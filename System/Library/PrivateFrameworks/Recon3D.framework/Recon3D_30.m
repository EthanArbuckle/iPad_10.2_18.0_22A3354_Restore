_QWORD *sub_223D37CC0(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[428];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[429];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[430];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[431];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[432];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[433];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[434];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[435];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[436];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[437];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[438];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[439];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[440];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[441];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[442];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[443];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[444];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[445];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[446];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[447];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[448];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[449];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[450];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[451];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[452];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[453];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[454];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[455];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[456];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[457];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[458];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[459];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[460];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[461];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[462];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[463];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[464];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[465];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[466];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[467];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[468];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[469];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D3C008(v642, *(double *)a2.i64, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D3C008(v642, *(double *)a2.i64, a3, a4);
}

_QWORD *sub_223D3C008(_QWORD *result, double a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  float32x4_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  _QWORD **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  float32x4_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  _QWORD **v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  float32x4_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  _QWORD **v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t *v61;
  float32x4_t v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  _QWORD **v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t *v77;
  float32x4_t v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD **v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  uint64_t *v92;
  float32x4_t v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD **v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  uint64_t *v107;
  float32x4_t v108;
  unsigned int v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD **v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t *v122;
  float32x4_t v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD **v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  uint64_t *v137;
  float32x4_t v138;
  unsigned int v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD **v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  uint64_t *v152;
  float32x4_t v153;
  unsigned int v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD **v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  uint64_t *v167;
  float32x4_t v168;
  unsigned int v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD **v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  uint64_t *v182;
  float32x4_t v183;
  unsigned int v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD **v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t *v196;
  uint64_t *v197;
  float32x4_t v198;
  unsigned int v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD **v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  uint64_t *v212;
  float32x4_t v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  float32x4_t v228;
  unsigned int v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD **v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t *v241;
  uint64_t *v242;
  float32x4_t v243;
  unsigned int v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD **v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t *v256;
  uint64_t *v257;
  float32x4_t v258;
  unsigned int v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD **v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t *v271;
  uint64_t *v272;
  float32x4_t v273;
  unsigned int v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD **v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  uint64_t *v287;
  float32x4_t v288;
  unsigned int v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD **v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t *v301;
  uint64_t *v302;
  float32x4_t v303;
  unsigned int v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  char *v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD **v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t *v316;
  uint64_t *v317;
  float32x4_t v318;
  unsigned int v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  char *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD **v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t *v331;
  uint64_t *v332;
  float32x4_t v333;
  unsigned int v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  char *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD **v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t *v346;
  uint64_t *v347;
  float32x4_t v348;
  unsigned int v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  char *v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD **v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t *v361;
  uint64_t *v362;
  float32x4_t v363;
  unsigned int v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  char *v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD **v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t *v376;
  uint64_t *v377;
  float32x4_t v378;
  unsigned int v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  char *v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD **v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t *v391;
  uint64_t *v392;
  float32x4_t v393;
  unsigned int v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  char *v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD **v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t *v406;
  uint64_t *v407;
  float32x4_t v408;
  unsigned int v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  char *v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _QWORD **v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t *v421;
  uint64_t *v422;
  float32x4_t v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  char *v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  float32x4_t v438;
  unsigned int v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  char *v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  _QWORD **v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t *v451;
  uint64_t *v452;
  float32x4_t v453;
  unsigned int v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  char *v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  _QWORD **v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t *v466;
  uint64_t *v467;
  float32x4_t v468;
  unsigned int v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char *v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  _QWORD **v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t *v481;
  uint64_t *v482;
  float32x4_t v483;
  unsigned int v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  char *v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  _QWORD **v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t *v496;
  uint64_t *v497;
  float32x4_t v498;
  unsigned int v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  char *v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  _QWORD **v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t *v511;
  uint64_t *v512;
  float32x4_t v513;
  unsigned int v514;
  unint64_t v515;
  uint64_t v516;
  unint64_t v517;
  char *v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  _QWORD **v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t *v526;
  uint64_t *v527;
  float32x4_t v528;
  unsigned int v529;
  unint64_t v530;
  uint64_t v531;
  unint64_t v532;
  char *v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  _QWORD **v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t *v541;
  uint64_t *v542;
  float32x4_t v543;
  unsigned int v544;
  unint64_t v545;
  uint64_t v546;
  unint64_t v547;
  char *v548;
  unint64_t v549;
  uint64_t v550;
  uint64_t v551;
  _QWORD **v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unint64_t *v556;
  uint64_t *v557;
  float32x4_t v558;
  unsigned int v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  char *v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  _QWORD **v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t *v571;
  uint64_t *v572;
  float32x4_t v573;
  unsigned int v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  char *v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  _QWORD **v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t *v586;
  uint64_t *v587;
  float32x4_t v588;
  unsigned int v589;
  unint64_t v590;
  uint64_t v591;
  unint64_t v592;
  char *v593;
  unint64_t v594;
  uint64_t v595;
  uint64_t v596;
  _QWORD **v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t *v601;
  uint64_t *v602;
  float32x4_t v603;
  unsigned int v604;
  unint64_t v605;
  uint64_t v606;
  unint64_t v607;
  char *v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  _QWORD **v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t *v616;
  uint64_t *v617;
  float32x4_t v618;
  unsigned int v619;
  unint64_t v620;
  uint64_t v621;
  unint64_t v622;
  char *v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  _QWORD **v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t *v631;
  uint64_t *v632;
  float32x4_t v633;
  unsigned int v634;
  unint64_t v635;
  uint64_t v636;
  unint64_t v637;
  char *v638;
  unint64_t v639;
  uint64_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  float32x4_t v644;
  float32x4_t v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  float32x4_t v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  float32x4_t v680;
  float32x4_t v681;
  _QWORD *v682;
  float32x4_t v683;
  uint64_t v684;
  __int32 v685;

  v4 = (unsigned int *)result[1];
  v5 = v4[470];
  v6 = *(_DWORD *)(*result + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v682 = result;
  if (!v7)
  {
    v8 = (_QWORD **)result[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      v14 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = v14;
      do
      {
        while (1)
        {
          v15 = *(unsigned __int8 *)v13;
          if ((v15 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v15 = *(unsigned __int8 *)v13;
          }
          v16 = v12[1];
          if (v16 >= v12[2])
          {
            v18 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v17 = *(v13 - 3);
            *(_DWORD *)(v16 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v16 = v17;
            v18 = v16 + 12;
          }
          v12[1] = v18;
          v19 = &byte_2245C3FE4[3 * v15];
          if (v15 >= 0x2A)
            v19 = &byte_2245C9FE2;
          v14.i8[0] = *v19;
          v14.f32[0] = (float)v14.u32[0];
          LOBYTE(a3) = v19[1];
          LOBYTE(a4) = v19[2];
          a4 = (float)LODWORD(a4);
          v14.f32[1] = (float)LODWORD(a3);
          v14.f32[2] = a4;
          a3 = v641.f32[0];
          v14 = vdivq_f32(v14, v641);
          v685 = v14.i32[2];
          v684 = v14.i64[0];
          v20 = v12[5];
          if (v20 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, &v684);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v21 = v684;
        *(_DWORD *)(v20 + 8) = v685;
        *(_QWORD *)v20 = v21;
        v12[5] = v20 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v22 = v4[471];
  if (v22 >> 30)
    v23 = 1;
  else
    v23 = (_DWORD)v22 == v6;
  if (!v23)
  {
    v24 = (_QWORD **)result[4];
    v25 = v22 & 0xFFFFFFFFCFFFFFFFLL;
    v26 = (*v24)[306];
    v27 = *(unsigned int *)(v26 + 520 * v25 + 4);
    if ((_DWORD)v27)
    {
      v28 = (unint64_t *)*v24[1];
      v29 = (uint64_t *)(v26 + 520 * v25 + 36);
      v30 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v642 = v30;
      do
      {
        while (1)
        {
          v31 = *(unsigned __int8 *)v29;
          if ((v31 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v31 = *(unsigned __int8 *)v29;
          }
          v32 = v28[1];
          if (v32 >= v28[2])
          {
            v34 = sub_2233B2B48(v28, v29 - 3);
          }
          else
          {
            v33 = *(v29 - 3);
            *(_DWORD *)(v32 + 8) = *((_DWORD *)v29 - 4);
            *(_QWORD *)v32 = v33;
            v34 = v32 + 12;
          }
          v28[1] = v34;
          v35 = &byte_2245C3FE4[3 * v31];
          if (v31 >= 0x2A)
            v35 = &byte_2245C9FE2;
          v30.i8[0] = *v35;
          v30.f32[0] = (float)v30.u32[0];
          LOBYTE(a3) = v35[1];
          LOBYTE(a4) = v35[2];
          a4 = (float)LODWORD(a4);
          v30.f32[1] = (float)LODWORD(a3);
          v30.f32[2] = a4;
          a3 = v642.f32[0];
          v30 = vdivq_f32(v30, v642);
          v685 = v30.i32[2];
          v684 = v30.i64[0];
          v36 = v28[5];
          if (v36 < v28[6])
            break;
          v28[5] = sub_2233B2B48(v28 + 4, &v684);
          v29 = (uint64_t *)((char *)v29 + 28);
          if (!--v27)
            goto LABEL_36;
        }
        v37 = v684;
        *(_DWORD *)(v36 + 8) = v685;
        *(_QWORD *)v36 = v37;
        v28[5] = v36 + 12;
        v29 = (uint64_t *)((char *)v29 + 28);
        --v27;
      }
      while (v27);
LABEL_36:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v38 = v4[472];
  if (v38 >> 30)
    v39 = 1;
  else
    v39 = (_DWORD)v38 == v6;
  if (!v39)
  {
    v40 = (_QWORD **)result[4];
    v41 = v38 & 0xFFFFFFFFCFFFFFFFLL;
    v42 = (*v40)[306];
    v43 = *(unsigned int *)(v42 + 520 * v41 + 4);
    if ((_DWORD)v43)
    {
      v44 = (unint64_t *)*v40[1];
      v45 = (uint64_t *)(v42 + 520 * v41 + 36);
      v46 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v643 = v46;
      do
      {
        while (1)
        {
          v47 = *(unsigned __int8 *)v45;
          if ((v47 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v47 = *(unsigned __int8 *)v45;
          }
          v48 = v44[1];
          if (v48 >= v44[2])
          {
            v50 = sub_2233B2B48(v44, v45 - 3);
          }
          else
          {
            v49 = *(v45 - 3);
            *(_DWORD *)(v48 + 8) = *((_DWORD *)v45 - 4);
            *(_QWORD *)v48 = v49;
            v50 = v48 + 12;
          }
          v44[1] = v50;
          v51 = &byte_2245C3FE4[3 * v47];
          if (v47 >= 0x2A)
            v51 = &byte_2245C9FE2;
          v46.i8[0] = *v51;
          v46.f32[0] = (float)v46.u32[0];
          LOBYTE(a3) = v51[1];
          LOBYTE(a4) = v51[2];
          a4 = (float)LODWORD(a4);
          v46.f32[1] = (float)LODWORD(a3);
          v46.f32[2] = a4;
          a3 = v643.f32[0];
          v46 = vdivq_f32(v46, v643);
          v685 = v46.i32[2];
          v684 = v46.i64[0];
          v52 = v44[5];
          if (v52 < v44[6])
            break;
          v44[5] = sub_2233B2B48(v44 + 4, &v684);
          v45 = (uint64_t *)((char *)v45 + 28);
          if (!--v43)
            goto LABEL_54;
        }
        v53 = v684;
        *(_DWORD *)(v52 + 8) = v685;
        *(_QWORD *)v52 = v53;
        v44[5] = v52 + 12;
        v45 = (uint64_t *)((char *)v45 + 28);
        --v43;
      }
      while (v43);
LABEL_54:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v54 = v4[473];
  if (v54 >> 30)
    v55 = 1;
  else
    v55 = (_DWORD)v54 == v6;
  if (!v55)
  {
    v56 = (_QWORD **)result[4];
    v57 = v54 & 0xFFFFFFFFCFFFFFFFLL;
    v58 = (*v56)[306];
    v59 = *(unsigned int *)(v58 + 520 * v57 + 4);
    if ((_DWORD)v59)
    {
      v60 = (unint64_t *)*v56[1];
      v61 = (uint64_t *)(v58 + 520 * v57 + 36);
      v62 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v644 = v62;
      do
      {
        while (1)
        {
          v63 = *(unsigned __int8 *)v61;
          if ((v63 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v63 = *(unsigned __int8 *)v61;
          }
          v64 = v60[1];
          if (v64 >= v60[2])
          {
            v66 = sub_2233B2B48(v60, v61 - 3);
          }
          else
          {
            v65 = *(v61 - 3);
            *(_DWORD *)(v64 + 8) = *((_DWORD *)v61 - 4);
            *(_QWORD *)v64 = v65;
            v66 = v64 + 12;
          }
          v60[1] = v66;
          v67 = &byte_2245C3FE4[3 * v63];
          if (v63 >= 0x2A)
            v67 = &byte_2245C9FE2;
          v62.i8[0] = *v67;
          v62.f32[0] = (float)v62.u32[0];
          LOBYTE(a3) = v67[1];
          LOBYTE(a4) = v67[2];
          a4 = (float)LODWORD(a4);
          v62.f32[1] = (float)LODWORD(a3);
          v62.f32[2] = a4;
          a3 = v644.f32[0];
          v62 = vdivq_f32(v62, v644);
          v685 = v62.i32[2];
          v684 = v62.i64[0];
          v68 = v60[5];
          if (v68 < v60[6])
            break;
          v60[5] = sub_2233B2B48(v60 + 4, &v684);
          v61 = (uint64_t *)((char *)v61 + 28);
          if (!--v59)
            goto LABEL_72;
        }
        v69 = v684;
        *(_DWORD *)(v68 + 8) = v685;
        *(_QWORD *)v68 = v69;
        v60[5] = v68 + 12;
        v61 = (uint64_t *)((char *)v61 + 28);
        --v59;
      }
      while (v59);
LABEL_72:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v70 = v4[474];
  if (v70 >> 30)
    v71 = 1;
  else
    v71 = (_DWORD)v70 == v6;
  if (!v71)
  {
    v72 = (_QWORD **)result[4];
    v73 = v70 & 0xFFFFFFFFCFFFFFFFLL;
    v74 = (*v72)[306];
    v75 = *(unsigned int *)(v74 + 520 * v73 + 4);
    if ((_DWORD)v75)
    {
      v76 = (unint64_t *)*v72[1];
      v77 = (uint64_t *)(v74 + 520 * v73 + 36);
      v78 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v645 = v78;
      do
      {
        while (1)
        {
          v79 = *(unsigned __int8 *)v77;
          if ((v79 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v79 = *(unsigned __int8 *)v77;
          }
          v80 = v76[1];
          if (v80 >= v76[2])
          {
            v82 = sub_2233B2B48(v76, v77 - 3);
          }
          else
          {
            v81 = *(v77 - 3);
            *(_DWORD *)(v80 + 8) = *((_DWORD *)v77 - 4);
            *(_QWORD *)v80 = v81;
            v82 = v80 + 12;
          }
          v76[1] = v82;
          v83 = &byte_2245C3FE4[3 * v79];
          if (v79 >= 0x2A)
            v83 = &byte_2245C9FE2;
          v78.i8[0] = *v83;
          v78.f32[0] = (float)v78.u32[0];
          LOBYTE(a3) = v83[1];
          LOBYTE(a4) = v83[2];
          a4 = (float)LODWORD(a4);
          v78.f32[1] = (float)LODWORD(a3);
          v78.f32[2] = a4;
          a3 = v645.f32[0];
          v78 = vdivq_f32(v78, v645);
          v685 = v78.i32[2];
          v684 = v78.i64[0];
          v84 = v76[5];
          if (v84 < v76[6])
            break;
          v76[5] = sub_2233B2B48(v76 + 4, &v684);
          v77 = (uint64_t *)((char *)v77 + 28);
          if (!--v75)
            goto LABEL_90;
        }
        v85 = v684;
        *(_DWORD *)(v84 + 8) = v685;
        *(_QWORD *)v84 = v85;
        v76[5] = v84 + 12;
        v77 = (uint64_t *)((char *)v77 + 28);
        --v75;
      }
      while (v75);
LABEL_90:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v86 = v4[475];
  if (!(v86 >> 30) && (_DWORD)v86 != v6)
  {
    v87 = (_QWORD **)result[4];
    v88 = v86 & 0xFFFFFFFFCFFFFFFFLL;
    v89 = (*v87)[306];
    v90 = *(unsigned int *)(v89 + 520 * v88 + 4);
    if ((_DWORD)v90)
    {
      v91 = (unint64_t *)*v87[1];
      v92 = (uint64_t *)(v89 + 520 * v88 + 36);
      v93 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v646 = v93;
      do
      {
        while (1)
        {
          v94 = *(unsigned __int8 *)v92;
          if ((v94 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v94 = *(unsigned __int8 *)v92;
          }
          v95 = v91[1];
          if (v95 >= v91[2])
          {
            v97 = sub_2233B2B48(v91, v92 - 3);
          }
          else
          {
            v96 = *(v92 - 3);
            *(_DWORD *)(v95 + 8) = *((_DWORD *)v92 - 4);
            *(_QWORD *)v95 = v96;
            v97 = v95 + 12;
          }
          v91[1] = v97;
          v98 = &byte_2245C3FE4[3 * v94];
          if (v94 >= 0x2A)
            v98 = &byte_2245C9FE2;
          v93.i8[0] = *v98;
          v93.f32[0] = (float)v93.u32[0];
          LOBYTE(a3) = v98[1];
          LOBYTE(a4) = v98[2];
          a4 = (float)LODWORD(a4);
          v93.f32[1] = (float)LODWORD(a3);
          v93.f32[2] = a4;
          a3 = v646.f32[0];
          v93 = vdivq_f32(v93, v646);
          v685 = v93.i32[2];
          v684 = v93.i64[0];
          v99 = v91[5];
          if (v99 < v91[6])
            break;
          v91[5] = sub_2233B2B48(v91 + 4, &v684);
          v92 = (uint64_t *)((char *)v92 + 28);
          if (!--v90)
            goto LABEL_106;
        }
        v100 = v684;
        *(_DWORD *)(v99 + 8) = v685;
        *(_QWORD *)v99 = v100;
        v91[5] = v99 + 12;
        v92 = (uint64_t *)((char *)v92 + 28);
        --v90;
      }
      while (v90);
LABEL_106:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v101 = v4[476];
  if (!(v101 >> 30) && (_DWORD)v101 != v6)
  {
    v102 = (_QWORD **)result[4];
    v103 = v101 & 0xFFFFFFFFCFFFFFFFLL;
    v104 = (*v102)[306];
    v105 = *(unsigned int *)(v104 + 520 * v103 + 4);
    if ((_DWORD)v105)
    {
      v106 = (unint64_t *)*v102[1];
      v107 = (uint64_t *)(v104 + 520 * v103 + 36);
      v108 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v647 = v108;
      do
      {
        while (1)
        {
          v109 = *(unsigned __int8 *)v107;
          if ((v109 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v109 = *(unsigned __int8 *)v107;
          }
          v110 = v106[1];
          if (v110 >= v106[2])
          {
            v112 = sub_2233B2B48(v106, v107 - 3);
          }
          else
          {
            v111 = *(v107 - 3);
            *(_DWORD *)(v110 + 8) = *((_DWORD *)v107 - 4);
            *(_QWORD *)v110 = v111;
            v112 = v110 + 12;
          }
          v106[1] = v112;
          v113 = &byte_2245C3FE4[3 * v109];
          if (v109 >= 0x2A)
            v113 = &byte_2245C9FE2;
          v108.i8[0] = *v113;
          v108.f32[0] = (float)v108.u32[0];
          LOBYTE(a3) = v113[1];
          LOBYTE(a4) = v113[2];
          a4 = (float)LODWORD(a4);
          v108.f32[1] = (float)LODWORD(a3);
          v108.f32[2] = a4;
          a3 = v647.f32[0];
          v108 = vdivq_f32(v108, v647);
          v685 = v108.i32[2];
          v684 = v108.i64[0];
          v114 = v106[5];
          if (v114 < v106[6])
            break;
          v106[5] = sub_2233B2B48(v106 + 4, &v684);
          v107 = (uint64_t *)((char *)v107 + 28);
          if (!--v105)
            goto LABEL_122;
        }
        v115 = v684;
        *(_DWORD *)(v114 + 8) = v685;
        *(_QWORD *)v114 = v115;
        v106[5] = v114 + 12;
        v107 = (uint64_t *)((char *)v107 + 28);
        --v105;
      }
      while (v105);
LABEL_122:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v116 = v4[477];
  if (!(v116 >> 30) && (_DWORD)v116 != v6)
  {
    v117 = (_QWORD **)result[4];
    v118 = v116 & 0xFFFFFFFFCFFFFFFFLL;
    v119 = (*v117)[306];
    v120 = *(unsigned int *)(v119 + 520 * v118 + 4);
    if ((_DWORD)v120)
    {
      v121 = (unint64_t *)*v117[1];
      v122 = (uint64_t *)(v119 + 520 * v118 + 36);
      v123 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v648 = v123;
      do
      {
        while (1)
        {
          v124 = *(unsigned __int8 *)v122;
          if ((v124 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v124 = *(unsigned __int8 *)v122;
          }
          v125 = v121[1];
          if (v125 >= v121[2])
          {
            v127 = sub_2233B2B48(v121, v122 - 3);
          }
          else
          {
            v126 = *(v122 - 3);
            *(_DWORD *)(v125 + 8) = *((_DWORD *)v122 - 4);
            *(_QWORD *)v125 = v126;
            v127 = v125 + 12;
          }
          v121[1] = v127;
          v128 = &byte_2245C3FE4[3 * v124];
          if (v124 >= 0x2A)
            v128 = &byte_2245C9FE2;
          v123.i8[0] = *v128;
          v123.f32[0] = (float)v123.u32[0];
          LOBYTE(a3) = v128[1];
          LOBYTE(a4) = v128[2];
          a4 = (float)LODWORD(a4);
          v123.f32[1] = (float)LODWORD(a3);
          v123.f32[2] = a4;
          a3 = v648.f32[0];
          v123 = vdivq_f32(v123, v648);
          v685 = v123.i32[2];
          v684 = v123.i64[0];
          v129 = v121[5];
          if (v129 < v121[6])
            break;
          v121[5] = sub_2233B2B48(v121 + 4, &v684);
          v122 = (uint64_t *)((char *)v122 + 28);
          if (!--v120)
            goto LABEL_138;
        }
        v130 = v684;
        *(_DWORD *)(v129 + 8) = v685;
        *(_QWORD *)v129 = v130;
        v121[5] = v129 + 12;
        v122 = (uint64_t *)((char *)v122 + 28);
        --v120;
      }
      while (v120);
LABEL_138:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v131 = v4[478];
  if (!(v131 >> 30) && (_DWORD)v131 != v6)
  {
    v132 = (_QWORD **)result[4];
    v133 = v131 & 0xFFFFFFFFCFFFFFFFLL;
    v134 = (*v132)[306];
    v135 = *(unsigned int *)(v134 + 520 * v133 + 4);
    if ((_DWORD)v135)
    {
      v136 = (unint64_t *)*v132[1];
      v137 = (uint64_t *)(v134 + 520 * v133 + 36);
      v138 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v649 = v138;
      do
      {
        while (1)
        {
          v139 = *(unsigned __int8 *)v137;
          if ((v139 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v139 = *(unsigned __int8 *)v137;
          }
          v140 = v136[1];
          if (v140 >= v136[2])
          {
            v142 = sub_2233B2B48(v136, v137 - 3);
          }
          else
          {
            v141 = *(v137 - 3);
            *(_DWORD *)(v140 + 8) = *((_DWORD *)v137 - 4);
            *(_QWORD *)v140 = v141;
            v142 = v140 + 12;
          }
          v136[1] = v142;
          v143 = &byte_2245C3FE4[3 * v139];
          if (v139 >= 0x2A)
            v143 = &byte_2245C9FE2;
          v138.i8[0] = *v143;
          v138.f32[0] = (float)v138.u32[0];
          LOBYTE(a3) = v143[1];
          LOBYTE(a4) = v143[2];
          a4 = (float)LODWORD(a4);
          v138.f32[1] = (float)LODWORD(a3);
          v138.f32[2] = a4;
          a3 = v649.f32[0];
          v138 = vdivq_f32(v138, v649);
          v685 = v138.i32[2];
          v684 = v138.i64[0];
          v144 = v136[5];
          if (v144 < v136[6])
            break;
          v136[5] = sub_2233B2B48(v136 + 4, &v684);
          v137 = (uint64_t *)((char *)v137 + 28);
          if (!--v135)
            goto LABEL_154;
        }
        v145 = v684;
        *(_DWORD *)(v144 + 8) = v685;
        *(_QWORD *)v144 = v145;
        v136[5] = v144 + 12;
        v137 = (uint64_t *)((char *)v137 + 28);
        --v135;
      }
      while (v135);
LABEL_154:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v146 = v4[479];
  if (!(v146 >> 30) && (_DWORD)v146 != v6)
  {
    v147 = (_QWORD **)result[4];
    v148 = v146 & 0xFFFFFFFFCFFFFFFFLL;
    v149 = (*v147)[306];
    v150 = *(unsigned int *)(v149 + 520 * v148 + 4);
    if ((_DWORD)v150)
    {
      v151 = (unint64_t *)*v147[1];
      v152 = (uint64_t *)(v149 + 520 * v148 + 36);
      v153 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v650 = v153;
      do
      {
        while (1)
        {
          v154 = *(unsigned __int8 *)v152;
          if ((v154 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v154 = *(unsigned __int8 *)v152;
          }
          v155 = v151[1];
          if (v155 >= v151[2])
          {
            v157 = sub_2233B2B48(v151, v152 - 3);
          }
          else
          {
            v156 = *(v152 - 3);
            *(_DWORD *)(v155 + 8) = *((_DWORD *)v152 - 4);
            *(_QWORD *)v155 = v156;
            v157 = v155 + 12;
          }
          v151[1] = v157;
          v158 = &byte_2245C3FE4[3 * v154];
          if (v154 >= 0x2A)
            v158 = &byte_2245C9FE2;
          v153.i8[0] = *v158;
          v153.f32[0] = (float)v153.u32[0];
          LOBYTE(a3) = v158[1];
          LOBYTE(a4) = v158[2];
          a4 = (float)LODWORD(a4);
          v153.f32[1] = (float)LODWORD(a3);
          v153.f32[2] = a4;
          a3 = v650.f32[0];
          v153 = vdivq_f32(v153, v650);
          v685 = v153.i32[2];
          v684 = v153.i64[0];
          v159 = v151[5];
          if (v159 < v151[6])
            break;
          v151[5] = sub_2233B2B48(v151 + 4, &v684);
          v152 = (uint64_t *)((char *)v152 + 28);
          if (!--v150)
            goto LABEL_170;
        }
        v160 = v684;
        *(_DWORD *)(v159 + 8) = v685;
        *(_QWORD *)v159 = v160;
        v151[5] = v159 + 12;
        v152 = (uint64_t *)((char *)v152 + 28);
        --v150;
      }
      while (v150);
LABEL_170:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v161 = v4[480];
  if (!(v161 >> 30) && (_DWORD)v161 != v6)
  {
    v162 = (_QWORD **)result[4];
    v163 = v161 & 0xFFFFFFFFCFFFFFFFLL;
    v164 = (*v162)[306];
    v165 = *(unsigned int *)(v164 + 520 * v163 + 4);
    if ((_DWORD)v165)
    {
      v166 = (unint64_t *)*v162[1];
      v167 = (uint64_t *)(v164 + 520 * v163 + 36);
      v168 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v651 = v168;
      do
      {
        while (1)
        {
          v169 = *(unsigned __int8 *)v167;
          if ((v169 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v169 = *(unsigned __int8 *)v167;
          }
          v170 = v166[1];
          if (v170 >= v166[2])
          {
            v172 = sub_2233B2B48(v166, v167 - 3);
          }
          else
          {
            v171 = *(v167 - 3);
            *(_DWORD *)(v170 + 8) = *((_DWORD *)v167 - 4);
            *(_QWORD *)v170 = v171;
            v172 = v170 + 12;
          }
          v166[1] = v172;
          v173 = &byte_2245C3FE4[3 * v169];
          if (v169 >= 0x2A)
            v173 = &byte_2245C9FE2;
          v168.i8[0] = *v173;
          v168.f32[0] = (float)v168.u32[0];
          LOBYTE(a3) = v173[1];
          LOBYTE(a4) = v173[2];
          a4 = (float)LODWORD(a4);
          v168.f32[1] = (float)LODWORD(a3);
          v168.f32[2] = a4;
          a3 = v651.f32[0];
          v168 = vdivq_f32(v168, v651);
          v685 = v168.i32[2];
          v684 = v168.i64[0];
          v174 = v166[5];
          if (v174 < v166[6])
            break;
          v166[5] = sub_2233B2B48(v166 + 4, &v684);
          v167 = (uint64_t *)((char *)v167 + 28);
          if (!--v165)
            goto LABEL_186;
        }
        v175 = v684;
        *(_DWORD *)(v174 + 8) = v685;
        *(_QWORD *)v174 = v175;
        v166[5] = v174 + 12;
        v167 = (uint64_t *)((char *)v167 + 28);
        --v165;
      }
      while (v165);
LABEL_186:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v176 = v4[481];
  if (!(v176 >> 30) && (_DWORD)v176 != v6)
  {
    v177 = (_QWORD **)result[4];
    v178 = v176 & 0xFFFFFFFFCFFFFFFFLL;
    v179 = (*v177)[306];
    v180 = *(unsigned int *)(v179 + 520 * v178 + 4);
    if ((_DWORD)v180)
    {
      v181 = (unint64_t *)*v177[1];
      v182 = (uint64_t *)(v179 + 520 * v178 + 36);
      v183 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v652 = v183;
      do
      {
        while (1)
        {
          v184 = *(unsigned __int8 *)v182;
          if ((v184 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v184 = *(unsigned __int8 *)v182;
          }
          v185 = v181[1];
          if (v185 >= v181[2])
          {
            v187 = sub_2233B2B48(v181, v182 - 3);
          }
          else
          {
            v186 = *(v182 - 3);
            *(_DWORD *)(v185 + 8) = *((_DWORD *)v182 - 4);
            *(_QWORD *)v185 = v186;
            v187 = v185 + 12;
          }
          v181[1] = v187;
          v188 = &byte_2245C3FE4[3 * v184];
          if (v184 >= 0x2A)
            v188 = &byte_2245C9FE2;
          v183.i8[0] = *v188;
          v183.f32[0] = (float)v183.u32[0];
          LOBYTE(a3) = v188[1];
          LOBYTE(a4) = v188[2];
          a4 = (float)LODWORD(a4);
          v183.f32[1] = (float)LODWORD(a3);
          v183.f32[2] = a4;
          a3 = v652.f32[0];
          v183 = vdivq_f32(v183, v652);
          v685 = v183.i32[2];
          v684 = v183.i64[0];
          v189 = v181[5];
          if (v189 < v181[6])
            break;
          v181[5] = sub_2233B2B48(v181 + 4, &v684);
          v182 = (uint64_t *)((char *)v182 + 28);
          if (!--v180)
            goto LABEL_202;
        }
        v190 = v684;
        *(_DWORD *)(v189 + 8) = v685;
        *(_QWORD *)v189 = v190;
        v181[5] = v189 + 12;
        v182 = (uint64_t *)((char *)v182 + 28);
        --v180;
      }
      while (v180);
LABEL_202:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v191 = v4[482];
  if (!(v191 >> 30) && (_DWORD)v191 != v6)
  {
    v192 = (_QWORD **)result[4];
    v193 = v191 & 0xFFFFFFFFCFFFFFFFLL;
    v194 = (*v192)[306];
    v195 = *(unsigned int *)(v194 + 520 * v193 + 4);
    if ((_DWORD)v195)
    {
      v196 = (unint64_t *)*v192[1];
      v197 = (uint64_t *)(v194 + 520 * v193 + 36);
      v198 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v653 = v198;
      do
      {
        while (1)
        {
          v199 = *(unsigned __int8 *)v197;
          if ((v199 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v199 = *(unsigned __int8 *)v197;
          }
          v200 = v196[1];
          if (v200 >= v196[2])
          {
            v202 = sub_2233B2B48(v196, v197 - 3);
          }
          else
          {
            v201 = *(v197 - 3);
            *(_DWORD *)(v200 + 8) = *((_DWORD *)v197 - 4);
            *(_QWORD *)v200 = v201;
            v202 = v200 + 12;
          }
          v196[1] = v202;
          v203 = &byte_2245C3FE4[3 * v199];
          if (v199 >= 0x2A)
            v203 = &byte_2245C9FE2;
          v198.i8[0] = *v203;
          v198.f32[0] = (float)v198.u32[0];
          LOBYTE(a3) = v203[1];
          LOBYTE(a4) = v203[2];
          a4 = (float)LODWORD(a4);
          v198.f32[1] = (float)LODWORD(a3);
          v198.f32[2] = a4;
          a3 = v653.f32[0];
          v198 = vdivq_f32(v198, v653);
          v685 = v198.i32[2];
          v684 = v198.i64[0];
          v204 = v196[5];
          if (v204 < v196[6])
            break;
          v196[5] = sub_2233B2B48(v196 + 4, &v684);
          v197 = (uint64_t *)((char *)v197 + 28);
          if (!--v195)
            goto LABEL_218;
        }
        v205 = v684;
        *(_DWORD *)(v204 + 8) = v685;
        *(_QWORD *)v204 = v205;
        v196[5] = v204 + 12;
        v197 = (uint64_t *)((char *)v197 + 28);
        --v195;
      }
      while (v195);
LABEL_218:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v206 = v4[483];
  if (!(v206 >> 30) && (_DWORD)v206 != v6)
  {
    v207 = (_QWORD **)result[4];
    v208 = v206 & 0xFFFFFFFFCFFFFFFFLL;
    v209 = (*v207)[306];
    v210 = *(unsigned int *)(v209 + 520 * v208 + 4);
    if ((_DWORD)v210)
    {
      v211 = (unint64_t *)*v207[1];
      v212 = (uint64_t *)(v209 + 520 * v208 + 36);
      v213 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v654 = v213;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v212;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v212;
          }
          v215 = v211[1];
          if (v215 >= v211[2])
          {
            v217 = sub_2233B2B48(v211, v212 - 3);
          }
          else
          {
            v216 = *(v212 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v212 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v211[1] = v217;
          v218 = &byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = &byte_2245C9FE2;
          v213.i8[0] = *v218;
          v213.f32[0] = (float)v213.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          v213.f32[1] = (float)LODWORD(a3);
          v213.f32[2] = a4;
          a3 = v654.f32[0];
          v213 = vdivq_f32(v213, v654);
          v685 = v213.i32[2];
          v684 = v213.i64[0];
          v219 = v211[5];
          if (v219 < v211[6])
            break;
          v211[5] = sub_2233B2B48(v211 + 4, &v684);
          v212 = (uint64_t *)((char *)v212 + 28);
          if (!--v210)
            goto LABEL_234;
        }
        v220 = v684;
        *(_DWORD *)(v219 + 8) = v685;
        *(_QWORD *)v219 = v220;
        v211[5] = v219 + 12;
        v212 = (uint64_t *)((char *)v212 + 28);
        --v210;
      }
      while (v210);
LABEL_234:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v221 = v4[484];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)result[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      v228 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v655 = v228;
      do
      {
        while (1)
        {
          v229 = *(unsigned __int8 *)v227;
          if ((v229 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v229 = *(unsigned __int8 *)v227;
          }
          v230 = v226[1];
          if (v230 >= v226[2])
          {
            v232 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v231 = *(v227 - 3);
            *(_DWORD *)(v230 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v230 = v231;
            v232 = v230 + 12;
          }
          v226[1] = v232;
          v233 = &byte_2245C3FE4[3 * v229];
          if (v229 >= 0x2A)
            v233 = &byte_2245C9FE2;
          v228.i8[0] = *v233;
          v228.f32[0] = (float)v228.u32[0];
          LOBYTE(a3) = v233[1];
          LOBYTE(a4) = v233[2];
          a4 = (float)LODWORD(a4);
          v228.f32[1] = (float)LODWORD(a3);
          v228.f32[2] = a4;
          a3 = v655.f32[0];
          v228 = vdivq_f32(v228, v655);
          v685 = v228.i32[2];
          v684 = v228.i64[0];
          v234 = v226[5];
          if (v234 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, &v684);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_250;
        }
        v235 = v684;
        *(_DWORD *)(v234 + 8) = v685;
        *(_QWORD *)v234 = v235;
        v226[5] = v234 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_250:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v236 = v4[485];
  if (!(v236 >> 30) && (_DWORD)v236 != v6)
  {
    v237 = (_QWORD **)result[4];
    v238 = v236 & 0xFFFFFFFFCFFFFFFFLL;
    v239 = (*v237)[306];
    v240 = *(unsigned int *)(v239 + 520 * v238 + 4);
    if ((_DWORD)v240)
    {
      v241 = (unint64_t *)*v237[1];
      v242 = (uint64_t *)(v239 + 520 * v238 + 36);
      v243 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v656 = v243;
      do
      {
        while (1)
        {
          v244 = *(unsigned __int8 *)v242;
          if ((v244 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v244 = *(unsigned __int8 *)v242;
          }
          v245 = v241[1];
          if (v245 >= v241[2])
          {
            v247 = sub_2233B2B48(v241, v242 - 3);
          }
          else
          {
            v246 = *(v242 - 3);
            *(_DWORD *)(v245 + 8) = *((_DWORD *)v242 - 4);
            *(_QWORD *)v245 = v246;
            v247 = v245 + 12;
          }
          v241[1] = v247;
          v248 = &byte_2245C3FE4[3 * v244];
          if (v244 >= 0x2A)
            v248 = &byte_2245C9FE2;
          v243.i8[0] = *v248;
          v243.f32[0] = (float)v243.u32[0];
          LOBYTE(a3) = v248[1];
          LOBYTE(a4) = v248[2];
          a4 = (float)LODWORD(a4);
          v243.f32[1] = (float)LODWORD(a3);
          v243.f32[2] = a4;
          a3 = v656.f32[0];
          v243 = vdivq_f32(v243, v656);
          v685 = v243.i32[2];
          v684 = v243.i64[0];
          v249 = v241[5];
          if (v249 < v241[6])
            break;
          v241[5] = sub_2233B2B48(v241 + 4, &v684);
          v242 = (uint64_t *)((char *)v242 + 28);
          if (!--v240)
            goto LABEL_266;
        }
        v250 = v684;
        *(_DWORD *)(v249 + 8) = v685;
        *(_QWORD *)v249 = v250;
        v241[5] = v249 + 12;
        v242 = (uint64_t *)((char *)v242 + 28);
        --v240;
      }
      while (v240);
LABEL_266:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v251 = v4[486];
  if (!(v251 >> 30) && (_DWORD)v251 != v6)
  {
    v252 = (_QWORD **)result[4];
    v253 = v251 & 0xFFFFFFFFCFFFFFFFLL;
    v254 = (*v252)[306];
    v255 = *(unsigned int *)(v254 + 520 * v253 + 4);
    if ((_DWORD)v255)
    {
      v256 = (unint64_t *)*v252[1];
      v257 = (uint64_t *)(v254 + 520 * v253 + 36);
      v258 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v657 = v258;
      do
      {
        while (1)
        {
          v259 = *(unsigned __int8 *)v257;
          if ((v259 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v259 = *(unsigned __int8 *)v257;
          }
          v260 = v256[1];
          if (v260 >= v256[2])
          {
            v262 = sub_2233B2B48(v256, v257 - 3);
          }
          else
          {
            v261 = *(v257 - 3);
            *(_DWORD *)(v260 + 8) = *((_DWORD *)v257 - 4);
            *(_QWORD *)v260 = v261;
            v262 = v260 + 12;
          }
          v256[1] = v262;
          v263 = &byte_2245C3FE4[3 * v259];
          if (v259 >= 0x2A)
            v263 = &byte_2245C9FE2;
          v258.i8[0] = *v263;
          v258.f32[0] = (float)v258.u32[0];
          LOBYTE(a3) = v263[1];
          LOBYTE(a4) = v263[2];
          a4 = (float)LODWORD(a4);
          v258.f32[1] = (float)LODWORD(a3);
          v258.f32[2] = a4;
          a3 = v657.f32[0];
          v258 = vdivq_f32(v258, v657);
          v685 = v258.i32[2];
          v684 = v258.i64[0];
          v264 = v256[5];
          if (v264 < v256[6])
            break;
          v256[5] = sub_2233B2B48(v256 + 4, &v684);
          v257 = (uint64_t *)((char *)v257 + 28);
          if (!--v255)
            goto LABEL_282;
        }
        v265 = v684;
        *(_DWORD *)(v264 + 8) = v685;
        *(_QWORD *)v264 = v265;
        v256[5] = v264 + 12;
        v257 = (uint64_t *)((char *)v257 + 28);
        --v255;
      }
      while (v255);
LABEL_282:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v266 = v4[487];
  if (!(v266 >> 30) && (_DWORD)v266 != v6)
  {
    v267 = (_QWORD **)result[4];
    v268 = v266 & 0xFFFFFFFFCFFFFFFFLL;
    v269 = (*v267)[306];
    v270 = *(unsigned int *)(v269 + 520 * v268 + 4);
    if ((_DWORD)v270)
    {
      v271 = (unint64_t *)*v267[1];
      v272 = (uint64_t *)(v269 + 520 * v268 + 36);
      v273 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v658 = v273;
      do
      {
        while (1)
        {
          v274 = *(unsigned __int8 *)v272;
          if ((v274 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v274 = *(unsigned __int8 *)v272;
          }
          v275 = v271[1];
          if (v275 >= v271[2])
          {
            v277 = sub_2233B2B48(v271, v272 - 3);
          }
          else
          {
            v276 = *(v272 - 3);
            *(_DWORD *)(v275 + 8) = *((_DWORD *)v272 - 4);
            *(_QWORD *)v275 = v276;
            v277 = v275 + 12;
          }
          v271[1] = v277;
          v278 = &byte_2245C3FE4[3 * v274];
          if (v274 >= 0x2A)
            v278 = &byte_2245C9FE2;
          v273.i8[0] = *v278;
          v273.f32[0] = (float)v273.u32[0];
          LOBYTE(a3) = v278[1];
          LOBYTE(a4) = v278[2];
          a4 = (float)LODWORD(a4);
          v273.f32[1] = (float)LODWORD(a3);
          v273.f32[2] = a4;
          a3 = v658.f32[0];
          v273 = vdivq_f32(v273, v658);
          v685 = v273.i32[2];
          v684 = v273.i64[0];
          v279 = v271[5];
          if (v279 < v271[6])
            break;
          v271[5] = sub_2233B2B48(v271 + 4, &v684);
          v272 = (uint64_t *)((char *)v272 + 28);
          if (!--v270)
            goto LABEL_298;
        }
        v280 = v684;
        *(_DWORD *)(v279 + 8) = v685;
        *(_QWORD *)v279 = v280;
        v271[5] = v279 + 12;
        v272 = (uint64_t *)((char *)v272 + 28);
        --v270;
      }
      while (v270);
LABEL_298:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v281 = v4[488];
  if (!(v281 >> 30) && (_DWORD)v281 != v6)
  {
    v282 = (_QWORD **)result[4];
    v283 = v281 & 0xFFFFFFFFCFFFFFFFLL;
    v284 = (*v282)[306];
    v285 = *(unsigned int *)(v284 + 520 * v283 + 4);
    if ((_DWORD)v285)
    {
      v286 = (unint64_t *)*v282[1];
      v287 = (uint64_t *)(v284 + 520 * v283 + 36);
      v288 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v659 = v288;
      do
      {
        while (1)
        {
          v289 = *(unsigned __int8 *)v287;
          if ((v289 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v289 = *(unsigned __int8 *)v287;
          }
          v290 = v286[1];
          if (v290 >= v286[2])
          {
            v292 = sub_2233B2B48(v286, v287 - 3);
          }
          else
          {
            v291 = *(v287 - 3);
            *(_DWORD *)(v290 + 8) = *((_DWORD *)v287 - 4);
            *(_QWORD *)v290 = v291;
            v292 = v290 + 12;
          }
          v286[1] = v292;
          v293 = &byte_2245C3FE4[3 * v289];
          if (v289 >= 0x2A)
            v293 = &byte_2245C9FE2;
          v288.i8[0] = *v293;
          v288.f32[0] = (float)v288.u32[0];
          LOBYTE(a3) = v293[1];
          LOBYTE(a4) = v293[2];
          a4 = (float)LODWORD(a4);
          v288.f32[1] = (float)LODWORD(a3);
          v288.f32[2] = a4;
          a3 = v659.f32[0];
          v288 = vdivq_f32(v288, v659);
          v685 = v288.i32[2];
          v684 = v288.i64[0];
          v294 = v286[5];
          if (v294 < v286[6])
            break;
          v286[5] = sub_2233B2B48(v286 + 4, &v684);
          v287 = (uint64_t *)((char *)v287 + 28);
          if (!--v285)
            goto LABEL_314;
        }
        v295 = v684;
        *(_DWORD *)(v294 + 8) = v685;
        *(_QWORD *)v294 = v295;
        v286[5] = v294 + 12;
        v287 = (uint64_t *)((char *)v287 + 28);
        --v285;
      }
      while (v285);
LABEL_314:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v296 = v4[489];
  if (!(v296 >> 30) && (_DWORD)v296 != v6)
  {
    v297 = (_QWORD **)result[4];
    v298 = v296 & 0xFFFFFFFFCFFFFFFFLL;
    v299 = (*v297)[306];
    v300 = *(unsigned int *)(v299 + 520 * v298 + 4);
    if ((_DWORD)v300)
    {
      v301 = (unint64_t *)*v297[1];
      v302 = (uint64_t *)(v299 + 520 * v298 + 36);
      v303 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v660 = v303;
      do
      {
        while (1)
        {
          v304 = *(unsigned __int8 *)v302;
          if ((v304 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v304 = *(unsigned __int8 *)v302;
          }
          v305 = v301[1];
          if (v305 >= v301[2])
          {
            v307 = sub_2233B2B48(v301, v302 - 3);
          }
          else
          {
            v306 = *(v302 - 3);
            *(_DWORD *)(v305 + 8) = *((_DWORD *)v302 - 4);
            *(_QWORD *)v305 = v306;
            v307 = v305 + 12;
          }
          v301[1] = v307;
          v308 = &byte_2245C3FE4[3 * v304];
          if (v304 >= 0x2A)
            v308 = &byte_2245C9FE2;
          v303.i8[0] = *v308;
          v303.f32[0] = (float)v303.u32[0];
          LOBYTE(a3) = v308[1];
          LOBYTE(a4) = v308[2];
          a4 = (float)LODWORD(a4);
          v303.f32[1] = (float)LODWORD(a3);
          v303.f32[2] = a4;
          a3 = v660.f32[0];
          v303 = vdivq_f32(v303, v660);
          v685 = v303.i32[2];
          v684 = v303.i64[0];
          v309 = v301[5];
          if (v309 < v301[6])
            break;
          v301[5] = sub_2233B2B48(v301 + 4, &v684);
          v302 = (uint64_t *)((char *)v302 + 28);
          if (!--v300)
            goto LABEL_330;
        }
        v310 = v684;
        *(_DWORD *)(v309 + 8) = v685;
        *(_QWORD *)v309 = v310;
        v301[5] = v309 + 12;
        v302 = (uint64_t *)((char *)v302 + 28);
        --v300;
      }
      while (v300);
LABEL_330:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v311 = v4[490];
  if (!(v311 >> 30) && (_DWORD)v311 != v6)
  {
    v312 = (_QWORD **)result[4];
    v313 = v311 & 0xFFFFFFFFCFFFFFFFLL;
    v314 = (*v312)[306];
    v315 = *(unsigned int *)(v314 + 520 * v313 + 4);
    if ((_DWORD)v315)
    {
      v316 = (unint64_t *)*v312[1];
      v317 = (uint64_t *)(v314 + 520 * v313 + 36);
      v318 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v661 = v318;
      do
      {
        while (1)
        {
          v319 = *(unsigned __int8 *)v317;
          if ((v319 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v319 = *(unsigned __int8 *)v317;
          }
          v320 = v316[1];
          if (v320 >= v316[2])
          {
            v322 = sub_2233B2B48(v316, v317 - 3);
          }
          else
          {
            v321 = *(v317 - 3);
            *(_DWORD *)(v320 + 8) = *((_DWORD *)v317 - 4);
            *(_QWORD *)v320 = v321;
            v322 = v320 + 12;
          }
          v316[1] = v322;
          v323 = &byte_2245C3FE4[3 * v319];
          if (v319 >= 0x2A)
            v323 = &byte_2245C9FE2;
          v318.i8[0] = *v323;
          v318.f32[0] = (float)v318.u32[0];
          LOBYTE(a3) = v323[1];
          LOBYTE(a4) = v323[2];
          a4 = (float)LODWORD(a4);
          v318.f32[1] = (float)LODWORD(a3);
          v318.f32[2] = a4;
          a3 = v661.f32[0];
          v318 = vdivq_f32(v318, v661);
          v685 = v318.i32[2];
          v684 = v318.i64[0];
          v324 = v316[5];
          if (v324 < v316[6])
            break;
          v316[5] = sub_2233B2B48(v316 + 4, &v684);
          v317 = (uint64_t *)((char *)v317 + 28);
          if (!--v315)
            goto LABEL_346;
        }
        v325 = v684;
        *(_DWORD *)(v324 + 8) = v685;
        *(_QWORD *)v324 = v325;
        v316[5] = v324 + 12;
        v317 = (uint64_t *)((char *)v317 + 28);
        --v315;
      }
      while (v315);
LABEL_346:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v326 = v4[491];
  if (!(v326 >> 30) && (_DWORD)v326 != v6)
  {
    v327 = (_QWORD **)result[4];
    v328 = v326 & 0xFFFFFFFFCFFFFFFFLL;
    v329 = (*v327)[306];
    v330 = *(unsigned int *)(v329 + 520 * v328 + 4);
    if ((_DWORD)v330)
    {
      v331 = (unint64_t *)*v327[1];
      v332 = (uint64_t *)(v329 + 520 * v328 + 36);
      v333 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v662 = v333;
      do
      {
        while (1)
        {
          v334 = *(unsigned __int8 *)v332;
          if ((v334 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v334 = *(unsigned __int8 *)v332;
          }
          v335 = v331[1];
          if (v335 >= v331[2])
          {
            v337 = sub_2233B2B48(v331, v332 - 3);
          }
          else
          {
            v336 = *(v332 - 3);
            *(_DWORD *)(v335 + 8) = *((_DWORD *)v332 - 4);
            *(_QWORD *)v335 = v336;
            v337 = v335 + 12;
          }
          v331[1] = v337;
          v338 = &byte_2245C3FE4[3 * v334];
          if (v334 >= 0x2A)
            v338 = &byte_2245C9FE2;
          v333.i8[0] = *v338;
          v333.f32[0] = (float)v333.u32[0];
          LOBYTE(a3) = v338[1];
          LOBYTE(a4) = v338[2];
          a4 = (float)LODWORD(a4);
          v333.f32[1] = (float)LODWORD(a3);
          v333.f32[2] = a4;
          a3 = v662.f32[0];
          v333 = vdivq_f32(v333, v662);
          v685 = v333.i32[2];
          v684 = v333.i64[0];
          v339 = v331[5];
          if (v339 < v331[6])
            break;
          v331[5] = sub_2233B2B48(v331 + 4, &v684);
          v332 = (uint64_t *)((char *)v332 + 28);
          if (!--v330)
            goto LABEL_362;
        }
        v340 = v684;
        *(_DWORD *)(v339 + 8) = v685;
        *(_QWORD *)v339 = v340;
        v331[5] = v339 + 12;
        v332 = (uint64_t *)((char *)v332 + 28);
        --v330;
      }
      while (v330);
LABEL_362:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v341 = v4[492];
  if (!(v341 >> 30) && (_DWORD)v341 != v6)
  {
    v342 = (_QWORD **)result[4];
    v343 = v341 & 0xFFFFFFFFCFFFFFFFLL;
    v344 = (*v342)[306];
    v345 = *(unsigned int *)(v344 + 520 * v343 + 4);
    if ((_DWORD)v345)
    {
      v346 = (unint64_t *)*v342[1];
      v347 = (uint64_t *)(v344 + 520 * v343 + 36);
      v348 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v663 = v348;
      do
      {
        while (1)
        {
          v349 = *(unsigned __int8 *)v347;
          if ((v349 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v349 = *(unsigned __int8 *)v347;
          }
          v350 = v346[1];
          if (v350 >= v346[2])
          {
            v352 = sub_2233B2B48(v346, v347 - 3);
          }
          else
          {
            v351 = *(v347 - 3);
            *(_DWORD *)(v350 + 8) = *((_DWORD *)v347 - 4);
            *(_QWORD *)v350 = v351;
            v352 = v350 + 12;
          }
          v346[1] = v352;
          v353 = &byte_2245C3FE4[3 * v349];
          if (v349 >= 0x2A)
            v353 = &byte_2245C9FE2;
          v348.i8[0] = *v353;
          v348.f32[0] = (float)v348.u32[0];
          LOBYTE(a3) = v353[1];
          LOBYTE(a4) = v353[2];
          a4 = (float)LODWORD(a4);
          v348.f32[1] = (float)LODWORD(a3);
          v348.f32[2] = a4;
          a3 = v663.f32[0];
          v348 = vdivq_f32(v348, v663);
          v685 = v348.i32[2];
          v684 = v348.i64[0];
          v354 = v346[5];
          if (v354 < v346[6])
            break;
          v346[5] = sub_2233B2B48(v346 + 4, &v684);
          v347 = (uint64_t *)((char *)v347 + 28);
          if (!--v345)
            goto LABEL_378;
        }
        v355 = v684;
        *(_DWORD *)(v354 + 8) = v685;
        *(_QWORD *)v354 = v355;
        v346[5] = v354 + 12;
        v347 = (uint64_t *)((char *)v347 + 28);
        --v345;
      }
      while (v345);
LABEL_378:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v356 = v4[493];
  if (!(v356 >> 30) && (_DWORD)v356 != v6)
  {
    v357 = (_QWORD **)result[4];
    v358 = v356 & 0xFFFFFFFFCFFFFFFFLL;
    v359 = (*v357)[306];
    v360 = *(unsigned int *)(v359 + 520 * v358 + 4);
    if ((_DWORD)v360)
    {
      v361 = (unint64_t *)*v357[1];
      v362 = (uint64_t *)(v359 + 520 * v358 + 36);
      v363 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v664 = v363;
      do
      {
        while (1)
        {
          v364 = *(unsigned __int8 *)v362;
          if ((v364 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v364 = *(unsigned __int8 *)v362;
          }
          v365 = v361[1];
          if (v365 >= v361[2])
          {
            v367 = sub_2233B2B48(v361, v362 - 3);
          }
          else
          {
            v366 = *(v362 - 3);
            *(_DWORD *)(v365 + 8) = *((_DWORD *)v362 - 4);
            *(_QWORD *)v365 = v366;
            v367 = v365 + 12;
          }
          v361[1] = v367;
          v368 = &byte_2245C3FE4[3 * v364];
          if (v364 >= 0x2A)
            v368 = &byte_2245C9FE2;
          v363.i8[0] = *v368;
          v363.f32[0] = (float)v363.u32[0];
          LOBYTE(a3) = v368[1];
          LOBYTE(a4) = v368[2];
          a4 = (float)LODWORD(a4);
          v363.f32[1] = (float)LODWORD(a3);
          v363.f32[2] = a4;
          a3 = v664.f32[0];
          v363 = vdivq_f32(v363, v664);
          v685 = v363.i32[2];
          v684 = v363.i64[0];
          v369 = v361[5];
          if (v369 < v361[6])
            break;
          v361[5] = sub_2233B2B48(v361 + 4, &v684);
          v362 = (uint64_t *)((char *)v362 + 28);
          if (!--v360)
            goto LABEL_394;
        }
        v370 = v684;
        *(_DWORD *)(v369 + 8) = v685;
        *(_QWORD *)v369 = v370;
        v361[5] = v369 + 12;
        v362 = (uint64_t *)((char *)v362 + 28);
        --v360;
      }
      while (v360);
LABEL_394:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v371 = v4[494];
  if (!(v371 >> 30) && (_DWORD)v371 != v6)
  {
    v372 = (_QWORD **)result[4];
    v373 = v371 & 0xFFFFFFFFCFFFFFFFLL;
    v374 = (*v372)[306];
    v375 = *(unsigned int *)(v374 + 520 * v373 + 4);
    if ((_DWORD)v375)
    {
      v376 = (unint64_t *)*v372[1];
      v377 = (uint64_t *)(v374 + 520 * v373 + 36);
      v378 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v665 = v378;
      do
      {
        while (1)
        {
          v379 = *(unsigned __int8 *)v377;
          if ((v379 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v379 = *(unsigned __int8 *)v377;
          }
          v380 = v376[1];
          if (v380 >= v376[2])
          {
            v382 = sub_2233B2B48(v376, v377 - 3);
          }
          else
          {
            v381 = *(v377 - 3);
            *(_DWORD *)(v380 + 8) = *((_DWORD *)v377 - 4);
            *(_QWORD *)v380 = v381;
            v382 = v380 + 12;
          }
          v376[1] = v382;
          v383 = &byte_2245C3FE4[3 * v379];
          if (v379 >= 0x2A)
            v383 = &byte_2245C9FE2;
          v378.i8[0] = *v383;
          v378.f32[0] = (float)v378.u32[0];
          LOBYTE(a3) = v383[1];
          LOBYTE(a4) = v383[2];
          a4 = (float)LODWORD(a4);
          v378.f32[1] = (float)LODWORD(a3);
          v378.f32[2] = a4;
          a3 = v665.f32[0];
          v378 = vdivq_f32(v378, v665);
          v685 = v378.i32[2];
          v684 = v378.i64[0];
          v384 = v376[5];
          if (v384 < v376[6])
            break;
          v376[5] = sub_2233B2B48(v376 + 4, &v684);
          v377 = (uint64_t *)((char *)v377 + 28);
          if (!--v375)
            goto LABEL_410;
        }
        v385 = v684;
        *(_DWORD *)(v384 + 8) = v685;
        *(_QWORD *)v384 = v385;
        v376[5] = v384 + 12;
        v377 = (uint64_t *)((char *)v377 + 28);
        --v375;
      }
      while (v375);
LABEL_410:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v386 = v4[495];
  if (!(v386 >> 30) && (_DWORD)v386 != v6)
  {
    v387 = (_QWORD **)result[4];
    v388 = v386 & 0xFFFFFFFFCFFFFFFFLL;
    v389 = (*v387)[306];
    v390 = *(unsigned int *)(v389 + 520 * v388 + 4);
    if ((_DWORD)v390)
    {
      v391 = (unint64_t *)*v387[1];
      v392 = (uint64_t *)(v389 + 520 * v388 + 36);
      v393 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v666 = v393;
      do
      {
        while (1)
        {
          v394 = *(unsigned __int8 *)v392;
          if ((v394 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v394 = *(unsigned __int8 *)v392;
          }
          v395 = v391[1];
          if (v395 >= v391[2])
          {
            v397 = sub_2233B2B48(v391, v392 - 3);
          }
          else
          {
            v396 = *(v392 - 3);
            *(_DWORD *)(v395 + 8) = *((_DWORD *)v392 - 4);
            *(_QWORD *)v395 = v396;
            v397 = v395 + 12;
          }
          v391[1] = v397;
          v398 = &byte_2245C3FE4[3 * v394];
          if (v394 >= 0x2A)
            v398 = &byte_2245C9FE2;
          v393.i8[0] = *v398;
          v393.f32[0] = (float)v393.u32[0];
          LOBYTE(a3) = v398[1];
          LOBYTE(a4) = v398[2];
          a4 = (float)LODWORD(a4);
          v393.f32[1] = (float)LODWORD(a3);
          v393.f32[2] = a4;
          a3 = v666.f32[0];
          v393 = vdivq_f32(v393, v666);
          v685 = v393.i32[2];
          v684 = v393.i64[0];
          v399 = v391[5];
          if (v399 < v391[6])
            break;
          v391[5] = sub_2233B2B48(v391 + 4, &v684);
          v392 = (uint64_t *)((char *)v392 + 28);
          if (!--v390)
            goto LABEL_426;
        }
        v400 = v684;
        *(_DWORD *)(v399 + 8) = v685;
        *(_QWORD *)v399 = v400;
        v391[5] = v399 + 12;
        v392 = (uint64_t *)((char *)v392 + 28);
        --v390;
      }
      while (v390);
LABEL_426:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v401 = v4[496];
  if (!(v401 >> 30) && (_DWORD)v401 != v6)
  {
    v402 = (_QWORD **)result[4];
    v403 = v401 & 0xFFFFFFFFCFFFFFFFLL;
    v404 = (*v402)[306];
    v405 = *(unsigned int *)(v404 + 520 * v403 + 4);
    if ((_DWORD)v405)
    {
      v406 = (unint64_t *)*v402[1];
      v407 = (uint64_t *)(v404 + 520 * v403 + 36);
      v408 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v667 = v408;
      do
      {
        while (1)
        {
          v409 = *(unsigned __int8 *)v407;
          if ((v409 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v409 = *(unsigned __int8 *)v407;
          }
          v410 = v406[1];
          if (v410 >= v406[2])
          {
            v412 = sub_2233B2B48(v406, v407 - 3);
          }
          else
          {
            v411 = *(v407 - 3);
            *(_DWORD *)(v410 + 8) = *((_DWORD *)v407 - 4);
            *(_QWORD *)v410 = v411;
            v412 = v410 + 12;
          }
          v406[1] = v412;
          v413 = &byte_2245C3FE4[3 * v409];
          if (v409 >= 0x2A)
            v413 = &byte_2245C9FE2;
          v408.i8[0] = *v413;
          v408.f32[0] = (float)v408.u32[0];
          LOBYTE(a3) = v413[1];
          LOBYTE(a4) = v413[2];
          a4 = (float)LODWORD(a4);
          v408.f32[1] = (float)LODWORD(a3);
          v408.f32[2] = a4;
          a3 = v667.f32[0];
          v408 = vdivq_f32(v408, v667);
          v685 = v408.i32[2];
          v684 = v408.i64[0];
          v414 = v406[5];
          if (v414 < v406[6])
            break;
          v406[5] = sub_2233B2B48(v406 + 4, &v684);
          v407 = (uint64_t *)((char *)v407 + 28);
          if (!--v405)
            goto LABEL_442;
        }
        v415 = v684;
        *(_DWORD *)(v414 + 8) = v685;
        *(_QWORD *)v414 = v415;
        v406[5] = v414 + 12;
        v407 = (uint64_t *)((char *)v407 + 28);
        --v405;
      }
      while (v405);
LABEL_442:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v416 = v4[497];
  if (!(v416 >> 30) && (_DWORD)v416 != v6)
  {
    v417 = (_QWORD **)result[4];
    v418 = v416 & 0xFFFFFFFFCFFFFFFFLL;
    v419 = (*v417)[306];
    v420 = *(unsigned int *)(v419 + 520 * v418 + 4);
    if ((_DWORD)v420)
    {
      v421 = (unint64_t *)*v417[1];
      v422 = (uint64_t *)(v419 + 520 * v418 + 36);
      v423 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v668 = v423;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v422;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v422;
          }
          v425 = v421[1];
          if (v425 >= v421[2])
          {
            v427 = sub_2233B2B48(v421, v422 - 3);
          }
          else
          {
            v426 = *(v422 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v422 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v421[1] = v427;
          v428 = &byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = &byte_2245C9FE2;
          v423.i8[0] = *v428;
          v423.f32[0] = (float)v423.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          v423.f32[1] = (float)LODWORD(a3);
          v423.f32[2] = a4;
          a3 = v668.f32[0];
          v423 = vdivq_f32(v423, v668);
          v685 = v423.i32[2];
          v684 = v423.i64[0];
          v429 = v421[5];
          if (v429 < v421[6])
            break;
          v421[5] = sub_2233B2B48(v421 + 4, &v684);
          v422 = (uint64_t *)((char *)v422 + 28);
          if (!--v420)
            goto LABEL_458;
        }
        v430 = v684;
        *(_DWORD *)(v429 + 8) = v685;
        *(_QWORD *)v429 = v430;
        v421[5] = v429 + 12;
        v422 = (uint64_t *)((char *)v422 + 28);
        --v420;
      }
      while (v420);
LABEL_458:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v431 = v4[498];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)result[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      v438 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v669 = v438;
      do
      {
        while (1)
        {
          v439 = *(unsigned __int8 *)v437;
          if ((v439 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v439 = *(unsigned __int8 *)v437;
          }
          v440 = v436[1];
          if (v440 >= v436[2])
          {
            v442 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v441 = *(v437 - 3);
            *(_DWORD *)(v440 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v440 = v441;
            v442 = v440 + 12;
          }
          v436[1] = v442;
          v443 = &byte_2245C3FE4[3 * v439];
          if (v439 >= 0x2A)
            v443 = &byte_2245C9FE2;
          v438.i8[0] = *v443;
          v438.f32[0] = (float)v438.u32[0];
          LOBYTE(a3) = v443[1];
          LOBYTE(a4) = v443[2];
          a4 = (float)LODWORD(a4);
          v438.f32[1] = (float)LODWORD(a3);
          v438.f32[2] = a4;
          a3 = v669.f32[0];
          v438 = vdivq_f32(v438, v669);
          v685 = v438.i32[2];
          v684 = v438.i64[0];
          v444 = v436[5];
          if (v444 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, &v684);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_474;
        }
        v445 = v684;
        *(_DWORD *)(v444 + 8) = v685;
        *(_QWORD *)v444 = v445;
        v436[5] = v444 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_474:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v446 = v4[499];
  if (!(v446 >> 30) && (_DWORD)v446 != v6)
  {
    v447 = (_QWORD **)result[4];
    v448 = v446 & 0xFFFFFFFFCFFFFFFFLL;
    v449 = (*v447)[306];
    v450 = *(unsigned int *)(v449 + 520 * v448 + 4);
    if ((_DWORD)v450)
    {
      v451 = (unint64_t *)*v447[1];
      v452 = (uint64_t *)(v449 + 520 * v448 + 36);
      v453 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v670 = v453;
      do
      {
        while (1)
        {
          v454 = *(unsigned __int8 *)v452;
          if ((v454 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v454 = *(unsigned __int8 *)v452;
          }
          v455 = v451[1];
          if (v455 >= v451[2])
          {
            v457 = sub_2233B2B48(v451, v452 - 3);
          }
          else
          {
            v456 = *(v452 - 3);
            *(_DWORD *)(v455 + 8) = *((_DWORD *)v452 - 4);
            *(_QWORD *)v455 = v456;
            v457 = v455 + 12;
          }
          v451[1] = v457;
          v458 = &byte_2245C3FE4[3 * v454];
          if (v454 >= 0x2A)
            v458 = &byte_2245C9FE2;
          v453.i8[0] = *v458;
          v453.f32[0] = (float)v453.u32[0];
          LOBYTE(a3) = v458[1];
          LOBYTE(a4) = v458[2];
          a4 = (float)LODWORD(a4);
          v453.f32[1] = (float)LODWORD(a3);
          v453.f32[2] = a4;
          a3 = v670.f32[0];
          v453 = vdivq_f32(v453, v670);
          v685 = v453.i32[2];
          v684 = v453.i64[0];
          v459 = v451[5];
          if (v459 < v451[6])
            break;
          v451[5] = sub_2233B2B48(v451 + 4, &v684);
          v452 = (uint64_t *)((char *)v452 + 28);
          if (!--v450)
            goto LABEL_490;
        }
        v460 = v684;
        *(_DWORD *)(v459 + 8) = v685;
        *(_QWORD *)v459 = v460;
        v451[5] = v459 + 12;
        v452 = (uint64_t *)((char *)v452 + 28);
        --v450;
      }
      while (v450);
LABEL_490:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v461 = v4[500];
  if (!(v461 >> 30) && (_DWORD)v461 != v6)
  {
    v462 = (_QWORD **)result[4];
    v463 = v461 & 0xFFFFFFFFCFFFFFFFLL;
    v464 = (*v462)[306];
    v465 = *(unsigned int *)(v464 + 520 * v463 + 4);
    if ((_DWORD)v465)
    {
      v466 = (unint64_t *)*v462[1];
      v467 = (uint64_t *)(v464 + 520 * v463 + 36);
      v468 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v671 = v468;
      do
      {
        while (1)
        {
          v469 = *(unsigned __int8 *)v467;
          if ((v469 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v469 = *(unsigned __int8 *)v467;
          }
          v470 = v466[1];
          if (v470 >= v466[2])
          {
            v472 = sub_2233B2B48(v466, v467 - 3);
          }
          else
          {
            v471 = *(v467 - 3);
            *(_DWORD *)(v470 + 8) = *((_DWORD *)v467 - 4);
            *(_QWORD *)v470 = v471;
            v472 = v470 + 12;
          }
          v466[1] = v472;
          v473 = &byte_2245C3FE4[3 * v469];
          if (v469 >= 0x2A)
            v473 = &byte_2245C9FE2;
          v468.i8[0] = *v473;
          v468.f32[0] = (float)v468.u32[0];
          LOBYTE(a3) = v473[1];
          LOBYTE(a4) = v473[2];
          a4 = (float)LODWORD(a4);
          v468.f32[1] = (float)LODWORD(a3);
          v468.f32[2] = a4;
          a3 = v671.f32[0];
          v468 = vdivq_f32(v468, v671);
          v685 = v468.i32[2];
          v684 = v468.i64[0];
          v474 = v466[5];
          if (v474 < v466[6])
            break;
          v466[5] = sub_2233B2B48(v466 + 4, &v684);
          v467 = (uint64_t *)((char *)v467 + 28);
          if (!--v465)
            goto LABEL_506;
        }
        v475 = v684;
        *(_DWORD *)(v474 + 8) = v685;
        *(_QWORD *)v474 = v475;
        v466[5] = v474 + 12;
        v467 = (uint64_t *)((char *)v467 + 28);
        --v465;
      }
      while (v465);
LABEL_506:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v476 = v4[501];
  if (!(v476 >> 30) && (_DWORD)v476 != v6)
  {
    v477 = (_QWORD **)result[4];
    v478 = v476 & 0xFFFFFFFFCFFFFFFFLL;
    v479 = (*v477)[306];
    v480 = *(unsigned int *)(v479 + 520 * v478 + 4);
    if ((_DWORD)v480)
    {
      v481 = (unint64_t *)*v477[1];
      v482 = (uint64_t *)(v479 + 520 * v478 + 36);
      v483 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v672 = v483;
      do
      {
        while (1)
        {
          v484 = *(unsigned __int8 *)v482;
          if ((v484 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v484 = *(unsigned __int8 *)v482;
          }
          v485 = v481[1];
          if (v485 >= v481[2])
          {
            v487 = sub_2233B2B48(v481, v482 - 3);
          }
          else
          {
            v486 = *(v482 - 3);
            *(_DWORD *)(v485 + 8) = *((_DWORD *)v482 - 4);
            *(_QWORD *)v485 = v486;
            v487 = v485 + 12;
          }
          v481[1] = v487;
          v488 = &byte_2245C3FE4[3 * v484];
          if (v484 >= 0x2A)
            v488 = &byte_2245C9FE2;
          v483.i8[0] = *v488;
          v483.f32[0] = (float)v483.u32[0];
          LOBYTE(a3) = v488[1];
          LOBYTE(a4) = v488[2];
          a4 = (float)LODWORD(a4);
          v483.f32[1] = (float)LODWORD(a3);
          v483.f32[2] = a4;
          a3 = v672.f32[0];
          v483 = vdivq_f32(v483, v672);
          v685 = v483.i32[2];
          v684 = v483.i64[0];
          v489 = v481[5];
          if (v489 < v481[6])
            break;
          v481[5] = sub_2233B2B48(v481 + 4, &v684);
          v482 = (uint64_t *)((char *)v482 + 28);
          if (!--v480)
            goto LABEL_522;
        }
        v490 = v684;
        *(_DWORD *)(v489 + 8) = v685;
        *(_QWORD *)v489 = v490;
        v481[5] = v489 + 12;
        v482 = (uint64_t *)((char *)v482 + 28);
        --v480;
      }
      while (v480);
LABEL_522:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v491 = v4[502];
  if (!(v491 >> 30) && (_DWORD)v491 != v6)
  {
    v492 = (_QWORD **)result[4];
    v493 = v491 & 0xFFFFFFFFCFFFFFFFLL;
    v494 = (*v492)[306];
    v495 = *(unsigned int *)(v494 + 520 * v493 + 4);
    if ((_DWORD)v495)
    {
      v496 = (unint64_t *)*v492[1];
      v497 = (uint64_t *)(v494 + 520 * v493 + 36);
      v498 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v673 = v498;
      do
      {
        while (1)
        {
          v499 = *(unsigned __int8 *)v497;
          if ((v499 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v499 = *(unsigned __int8 *)v497;
          }
          v500 = v496[1];
          if (v500 >= v496[2])
          {
            v502 = sub_2233B2B48(v496, v497 - 3);
          }
          else
          {
            v501 = *(v497 - 3);
            *(_DWORD *)(v500 + 8) = *((_DWORD *)v497 - 4);
            *(_QWORD *)v500 = v501;
            v502 = v500 + 12;
          }
          v496[1] = v502;
          v503 = &byte_2245C3FE4[3 * v499];
          if (v499 >= 0x2A)
            v503 = &byte_2245C9FE2;
          v498.i8[0] = *v503;
          v498.f32[0] = (float)v498.u32[0];
          LOBYTE(a3) = v503[1];
          LOBYTE(a4) = v503[2];
          a4 = (float)LODWORD(a4);
          v498.f32[1] = (float)LODWORD(a3);
          v498.f32[2] = a4;
          a3 = v673.f32[0];
          v498 = vdivq_f32(v498, v673);
          v685 = v498.i32[2];
          v684 = v498.i64[0];
          v504 = v496[5];
          if (v504 < v496[6])
            break;
          v496[5] = sub_2233B2B48(v496 + 4, &v684);
          v497 = (uint64_t *)((char *)v497 + 28);
          if (!--v495)
            goto LABEL_538;
        }
        v505 = v684;
        *(_DWORD *)(v504 + 8) = v685;
        *(_QWORD *)v504 = v505;
        v496[5] = v504 + 12;
        v497 = (uint64_t *)((char *)v497 + 28);
        --v495;
      }
      while (v495);
LABEL_538:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v506 = v4[503];
  if (!(v506 >> 30) && (_DWORD)v506 != v6)
  {
    v507 = (_QWORD **)result[4];
    v508 = v506 & 0xFFFFFFFFCFFFFFFFLL;
    v509 = (*v507)[306];
    v510 = *(unsigned int *)(v509 + 520 * v508 + 4);
    if ((_DWORD)v510)
    {
      v511 = (unint64_t *)*v507[1];
      v512 = (uint64_t *)(v509 + 520 * v508 + 36);
      v513 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v674 = v513;
      do
      {
        while (1)
        {
          v514 = *(unsigned __int8 *)v512;
          if ((v514 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v514 = *(unsigned __int8 *)v512;
          }
          v515 = v511[1];
          if (v515 >= v511[2])
          {
            v517 = sub_2233B2B48(v511, v512 - 3);
          }
          else
          {
            v516 = *(v512 - 3);
            *(_DWORD *)(v515 + 8) = *((_DWORD *)v512 - 4);
            *(_QWORD *)v515 = v516;
            v517 = v515 + 12;
          }
          v511[1] = v517;
          v518 = &byte_2245C3FE4[3 * v514];
          if (v514 >= 0x2A)
            v518 = &byte_2245C9FE2;
          v513.i8[0] = *v518;
          v513.f32[0] = (float)v513.u32[0];
          LOBYTE(a3) = v518[1];
          LOBYTE(a4) = v518[2];
          a4 = (float)LODWORD(a4);
          v513.f32[1] = (float)LODWORD(a3);
          v513.f32[2] = a4;
          a3 = v674.f32[0];
          v513 = vdivq_f32(v513, v674);
          v685 = v513.i32[2];
          v684 = v513.i64[0];
          v519 = v511[5];
          if (v519 < v511[6])
            break;
          v511[5] = sub_2233B2B48(v511 + 4, &v684);
          v512 = (uint64_t *)((char *)v512 + 28);
          if (!--v510)
            goto LABEL_554;
        }
        v520 = v684;
        *(_DWORD *)(v519 + 8) = v685;
        *(_QWORD *)v519 = v520;
        v511[5] = v519 + 12;
        v512 = (uint64_t *)((char *)v512 + 28);
        --v510;
      }
      while (v510);
LABEL_554:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v521 = v4[504];
  if (!(v521 >> 30) && (_DWORD)v521 != v6)
  {
    v522 = (_QWORD **)result[4];
    v523 = v521 & 0xFFFFFFFFCFFFFFFFLL;
    v524 = (*v522)[306];
    v525 = *(unsigned int *)(v524 + 520 * v523 + 4);
    if ((_DWORD)v525)
    {
      v526 = (unint64_t *)*v522[1];
      v527 = (uint64_t *)(v524 + 520 * v523 + 36);
      v528 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v675 = v528;
      do
      {
        while (1)
        {
          v529 = *(unsigned __int8 *)v527;
          if ((v529 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v529 = *(unsigned __int8 *)v527;
          }
          v530 = v526[1];
          if (v530 >= v526[2])
          {
            v532 = sub_2233B2B48(v526, v527 - 3);
          }
          else
          {
            v531 = *(v527 - 3);
            *(_DWORD *)(v530 + 8) = *((_DWORD *)v527 - 4);
            *(_QWORD *)v530 = v531;
            v532 = v530 + 12;
          }
          v526[1] = v532;
          v533 = &byte_2245C3FE4[3 * v529];
          if (v529 >= 0x2A)
            v533 = &byte_2245C9FE2;
          v528.i8[0] = *v533;
          v528.f32[0] = (float)v528.u32[0];
          LOBYTE(a3) = v533[1];
          LOBYTE(a4) = v533[2];
          a4 = (float)LODWORD(a4);
          v528.f32[1] = (float)LODWORD(a3);
          v528.f32[2] = a4;
          a3 = v675.f32[0];
          v528 = vdivq_f32(v528, v675);
          v685 = v528.i32[2];
          v684 = v528.i64[0];
          v534 = v526[5];
          if (v534 < v526[6])
            break;
          v526[5] = sub_2233B2B48(v526 + 4, &v684);
          v527 = (uint64_t *)((char *)v527 + 28);
          if (!--v525)
            goto LABEL_570;
        }
        v535 = v684;
        *(_DWORD *)(v534 + 8) = v685;
        *(_QWORD *)v534 = v535;
        v526[5] = v534 + 12;
        v527 = (uint64_t *)((char *)v527 + 28);
        --v525;
      }
      while (v525);
LABEL_570:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v536 = v4[505];
  if (!(v536 >> 30) && (_DWORD)v536 != v6)
  {
    v537 = (_QWORD **)result[4];
    v538 = v536 & 0xFFFFFFFFCFFFFFFFLL;
    v539 = (*v537)[306];
    v540 = *(unsigned int *)(v539 + 520 * v538 + 4);
    if ((_DWORD)v540)
    {
      v541 = (unint64_t *)*v537[1];
      v542 = (uint64_t *)(v539 + 520 * v538 + 36);
      v543 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v676 = v543;
      do
      {
        while (1)
        {
          v544 = *(unsigned __int8 *)v542;
          if ((v544 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v544 = *(unsigned __int8 *)v542;
          }
          v545 = v541[1];
          if (v545 >= v541[2])
          {
            v547 = sub_2233B2B48(v541, v542 - 3);
          }
          else
          {
            v546 = *(v542 - 3);
            *(_DWORD *)(v545 + 8) = *((_DWORD *)v542 - 4);
            *(_QWORD *)v545 = v546;
            v547 = v545 + 12;
          }
          v541[1] = v547;
          v548 = &byte_2245C3FE4[3 * v544];
          if (v544 >= 0x2A)
            v548 = &byte_2245C9FE2;
          v543.i8[0] = *v548;
          v543.f32[0] = (float)v543.u32[0];
          LOBYTE(a3) = v548[1];
          LOBYTE(a4) = v548[2];
          a4 = (float)LODWORD(a4);
          v543.f32[1] = (float)LODWORD(a3);
          v543.f32[2] = a4;
          a3 = v676.f32[0];
          v543 = vdivq_f32(v543, v676);
          v685 = v543.i32[2];
          v684 = v543.i64[0];
          v549 = v541[5];
          if (v549 < v541[6])
            break;
          v541[5] = sub_2233B2B48(v541 + 4, &v684);
          v542 = (uint64_t *)((char *)v542 + 28);
          if (!--v540)
            goto LABEL_586;
        }
        v550 = v684;
        *(_DWORD *)(v549 + 8) = v685;
        *(_QWORD *)v549 = v550;
        v541[5] = v549 + 12;
        v542 = (uint64_t *)((char *)v542 + 28);
        --v540;
      }
      while (v540);
LABEL_586:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v551 = v4[506];
  if (!(v551 >> 30) && (_DWORD)v551 != v6)
  {
    v552 = (_QWORD **)result[4];
    v553 = v551 & 0xFFFFFFFFCFFFFFFFLL;
    v554 = (*v552)[306];
    v555 = *(unsigned int *)(v554 + 520 * v553 + 4);
    if ((_DWORD)v555)
    {
      v556 = (unint64_t *)*v552[1];
      v557 = (uint64_t *)(v554 + 520 * v553 + 36);
      v558 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v677 = v558;
      do
      {
        while (1)
        {
          v559 = *(unsigned __int8 *)v557;
          if ((v559 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v559 = *(unsigned __int8 *)v557;
          }
          v560 = v556[1];
          if (v560 >= v556[2])
          {
            v562 = sub_2233B2B48(v556, v557 - 3);
          }
          else
          {
            v561 = *(v557 - 3);
            *(_DWORD *)(v560 + 8) = *((_DWORD *)v557 - 4);
            *(_QWORD *)v560 = v561;
            v562 = v560 + 12;
          }
          v556[1] = v562;
          v563 = &byte_2245C3FE4[3 * v559];
          if (v559 >= 0x2A)
            v563 = &byte_2245C9FE2;
          v558.i8[0] = *v563;
          v558.f32[0] = (float)v558.u32[0];
          LOBYTE(a3) = v563[1];
          LOBYTE(a4) = v563[2];
          a4 = (float)LODWORD(a4);
          v558.f32[1] = (float)LODWORD(a3);
          v558.f32[2] = a4;
          a3 = v677.f32[0];
          v558 = vdivq_f32(v558, v677);
          v685 = v558.i32[2];
          v684 = v558.i64[0];
          v564 = v556[5];
          if (v564 < v556[6])
            break;
          v556[5] = sub_2233B2B48(v556 + 4, &v684);
          v557 = (uint64_t *)((char *)v557 + 28);
          if (!--v555)
            goto LABEL_602;
        }
        v565 = v684;
        *(_DWORD *)(v564 + 8) = v685;
        *(_QWORD *)v564 = v565;
        v556[5] = v564 + 12;
        v557 = (uint64_t *)((char *)v557 + 28);
        --v555;
      }
      while (v555);
LABEL_602:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v566 = v4[507];
  if (!(v566 >> 30) && (_DWORD)v566 != v6)
  {
    v567 = (_QWORD **)result[4];
    v568 = v566 & 0xFFFFFFFFCFFFFFFFLL;
    v569 = (*v567)[306];
    v570 = *(unsigned int *)(v569 + 520 * v568 + 4);
    if ((_DWORD)v570)
    {
      v571 = (unint64_t *)*v567[1];
      v572 = (uint64_t *)(v569 + 520 * v568 + 36);
      v573 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v678 = v573;
      do
      {
        while (1)
        {
          v574 = *(unsigned __int8 *)v572;
          if ((v574 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v574 = *(unsigned __int8 *)v572;
          }
          v575 = v571[1];
          if (v575 >= v571[2])
          {
            v577 = sub_2233B2B48(v571, v572 - 3);
          }
          else
          {
            v576 = *(v572 - 3);
            *(_DWORD *)(v575 + 8) = *((_DWORD *)v572 - 4);
            *(_QWORD *)v575 = v576;
            v577 = v575 + 12;
          }
          v571[1] = v577;
          v578 = &byte_2245C3FE4[3 * v574];
          if (v574 >= 0x2A)
            v578 = &byte_2245C9FE2;
          v573.i8[0] = *v578;
          v573.f32[0] = (float)v573.u32[0];
          LOBYTE(a3) = v578[1];
          LOBYTE(a4) = v578[2];
          a4 = (float)LODWORD(a4);
          v573.f32[1] = (float)LODWORD(a3);
          v573.f32[2] = a4;
          a3 = v678.f32[0];
          v573 = vdivq_f32(v573, v678);
          v685 = v573.i32[2];
          v684 = v573.i64[0];
          v579 = v571[5];
          if (v579 < v571[6])
            break;
          v571[5] = sub_2233B2B48(v571 + 4, &v684);
          v572 = (uint64_t *)((char *)v572 + 28);
          if (!--v570)
            goto LABEL_618;
        }
        v580 = v684;
        *(_DWORD *)(v579 + 8) = v685;
        *(_QWORD *)v579 = v580;
        v571[5] = v579 + 12;
        v572 = (uint64_t *)((char *)v572 + 28);
        --v570;
      }
      while (v570);
LABEL_618:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v581 = v4[508];
  if (!(v581 >> 30) && (_DWORD)v581 != v6)
  {
    v582 = (_QWORD **)result[4];
    v583 = v581 & 0xFFFFFFFFCFFFFFFFLL;
    v584 = (*v582)[306];
    v585 = *(unsigned int *)(v584 + 520 * v583 + 4);
    if ((_DWORD)v585)
    {
      v586 = (unint64_t *)*v582[1];
      v587 = (uint64_t *)(v584 + 520 * v583 + 36);
      v588 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v679 = v588;
      do
      {
        while (1)
        {
          v589 = *(unsigned __int8 *)v587;
          if ((v589 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v589 = *(unsigned __int8 *)v587;
          }
          v590 = v586[1];
          if (v590 >= v586[2])
          {
            v592 = sub_2233B2B48(v586, v587 - 3);
          }
          else
          {
            v591 = *(v587 - 3);
            *(_DWORD *)(v590 + 8) = *((_DWORD *)v587 - 4);
            *(_QWORD *)v590 = v591;
            v592 = v590 + 12;
          }
          v586[1] = v592;
          v593 = &byte_2245C3FE4[3 * v589];
          if (v589 >= 0x2A)
            v593 = &byte_2245C9FE2;
          v588.i8[0] = *v593;
          v588.f32[0] = (float)v588.u32[0];
          LOBYTE(a3) = v593[1];
          LOBYTE(a4) = v593[2];
          a4 = (float)LODWORD(a4);
          v588.f32[1] = (float)LODWORD(a3);
          v588.f32[2] = a4;
          a3 = v679.f32[0];
          v588 = vdivq_f32(v588, v679);
          v685 = v588.i32[2];
          v684 = v588.i64[0];
          v594 = v586[5];
          if (v594 < v586[6])
            break;
          v586[5] = sub_2233B2B48(v586 + 4, &v684);
          v587 = (uint64_t *)((char *)v587 + 28);
          if (!--v585)
            goto LABEL_634;
        }
        v595 = v684;
        *(_DWORD *)(v594 + 8) = v685;
        *(_QWORD *)v594 = v595;
        v586[5] = v594 + 12;
        v587 = (uint64_t *)((char *)v587 + 28);
        --v585;
      }
      while (v585);
LABEL_634:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v596 = v4[509];
  if (!(v596 >> 30) && (_DWORD)v596 != v6)
  {
    v597 = (_QWORD **)result[4];
    v598 = v596 & 0xFFFFFFFFCFFFFFFFLL;
    v599 = (*v597)[306];
    v600 = *(unsigned int *)(v599 + 520 * v598 + 4);
    if ((_DWORD)v600)
    {
      v601 = (unint64_t *)*v597[1];
      v602 = (uint64_t *)(v599 + 520 * v598 + 36);
      v603 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v680 = v603;
      do
      {
        while (1)
        {
          v604 = *(unsigned __int8 *)v602;
          if ((v604 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v604 = *(unsigned __int8 *)v602;
          }
          v605 = v601[1];
          if (v605 >= v601[2])
          {
            v607 = sub_2233B2B48(v601, v602 - 3);
          }
          else
          {
            v606 = *(v602 - 3);
            *(_DWORD *)(v605 + 8) = *((_DWORD *)v602 - 4);
            *(_QWORD *)v605 = v606;
            v607 = v605 + 12;
          }
          v601[1] = v607;
          v608 = &byte_2245C3FE4[3 * v604];
          if (v604 >= 0x2A)
            v608 = &byte_2245C9FE2;
          v603.i8[0] = *v608;
          v603.f32[0] = (float)v603.u32[0];
          LOBYTE(a3) = v608[1];
          LOBYTE(a4) = v608[2];
          a4 = (float)LODWORD(a4);
          v603.f32[1] = (float)LODWORD(a3);
          v603.f32[2] = a4;
          a3 = v680.f32[0];
          v603 = vdivq_f32(v603, v680);
          v685 = v603.i32[2];
          v684 = v603.i64[0];
          v609 = v601[5];
          if (v609 < v601[6])
            break;
          v601[5] = sub_2233B2B48(v601 + 4, &v684);
          v602 = (uint64_t *)((char *)v602 + 28);
          if (!--v600)
            goto LABEL_650;
        }
        v610 = v684;
        *(_DWORD *)(v609 + 8) = v685;
        *(_QWORD *)v609 = v610;
        v601[5] = v609 + 12;
        v602 = (uint64_t *)((char *)v602 + 28);
        --v600;
      }
      while (v600);
LABEL_650:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v611 = v4[510];
  if (!(v611 >> 30) && (_DWORD)v611 != v6)
  {
    v612 = (_QWORD **)result[4];
    v613 = v611 & 0xFFFFFFFFCFFFFFFFLL;
    v614 = (*v612)[306];
    v615 = *(unsigned int *)(v614 + 520 * v613 + 4);
    if ((_DWORD)v615)
    {
      v616 = (unint64_t *)*v612[1];
      v617 = (uint64_t *)(v614 + 520 * v613 + 36);
      v618 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v681 = v618;
      do
      {
        while (1)
        {
          v619 = *(unsigned __int8 *)v617;
          if ((v619 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v619 = *(unsigned __int8 *)v617;
          }
          v620 = v616[1];
          if (v620 >= v616[2])
          {
            v622 = sub_2233B2B48(v616, v617 - 3);
          }
          else
          {
            v621 = *(v617 - 3);
            *(_DWORD *)(v620 + 8) = *((_DWORD *)v617 - 4);
            *(_QWORD *)v620 = v621;
            v622 = v620 + 12;
          }
          v616[1] = v622;
          v623 = &byte_2245C3FE4[3 * v619];
          if (v619 >= 0x2A)
            v623 = &byte_2245C9FE2;
          v618.i8[0] = *v623;
          v618.f32[0] = (float)v618.u32[0];
          LOBYTE(a3) = v623[1];
          LOBYTE(a4) = v623[2];
          a4 = (float)LODWORD(a4);
          v618.f32[1] = (float)LODWORD(a3);
          v618.f32[2] = a4;
          a3 = v681.f32[0];
          v618 = vdivq_f32(v618, v681);
          v685 = v618.i32[2];
          v684 = v618.i64[0];
          v624 = v616[5];
          if (v624 < v616[6])
            break;
          v616[5] = sub_2233B2B48(v616 + 4, &v684);
          v617 = (uint64_t *)((char *)v617 + 28);
          if (!--v615)
            goto LABEL_666;
        }
        v625 = v684;
        *(_DWORD *)(v624 + 8) = v685;
        *(_QWORD *)v624 = v625;
        v616[5] = v624 + 12;
        v617 = (uint64_t *)((char *)v617 + 28);
        --v615;
      }
      while (v615);
LABEL_666:
      result = v682;
      v4 = (unsigned int *)v682[1];
      v6 = *(_DWORD *)(*v682 + 272);
    }
  }
  v626 = v4[511];
  if (!(v626 >> 30) && (_DWORD)v626 != v6)
  {
    v627 = (_QWORD **)result[4];
    v628 = v626 & 0xFFFFFFFFCFFFFFFFLL;
    v629 = (*v627)[306];
    v630 = *(unsigned int *)(v629 + 520 * v628 + 4);
    if ((_DWORD)v630)
    {
      v631 = (unint64_t *)*v627[1];
      v632 = (uint64_t *)(v629 + 520 * v628 + 36);
      v633 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v683 = v633;
      do
      {
        while (1)
        {
          v634 = *(unsigned __int8 *)v632;
          if ((v634 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v634 = *(unsigned __int8 *)v632;
          }
          v635 = v631[1];
          if (v635 >= v631[2])
          {
            v637 = sub_2233B2B48(v631, v632 - 3);
          }
          else
          {
            v636 = *(v632 - 3);
            *(_DWORD *)(v635 + 8) = *((_DWORD *)v632 - 4);
            *(_QWORD *)v635 = v636;
            v637 = v635 + 12;
          }
          v631[1] = v637;
          v638 = &byte_2245C3FE4[3 * v634];
          if (v634 >= 0x2A)
            v638 = &byte_2245C9FE2;
          v633.i8[0] = *v638;
          v633.f32[0] = (float)v633.u32[0];
          LOBYTE(a3) = v638[1];
          LOBYTE(a4) = v638[2];
          a4 = (float)LODWORD(a4);
          v633.f32[1] = (float)LODWORD(a3);
          v633.f32[2] = a4;
          a3 = v683.f32[0];
          v633 = vdivq_f32(v633, v683);
          v685 = v633.i32[2];
          v684 = v633.i64[0];
          v639 = v631[5];
          if (v639 < v631[6])
            break;
          result = (_QWORD *)sub_2233B2B48(v631 + 4, &v684);
          v631[5] = (unint64_t)result;
          v632 = (uint64_t *)((char *)v632 + 28);
          if (!--v630)
            return result;
        }
        v640 = v684;
        *(_DWORD *)(v639 + 8) = v685;
        *(_QWORD *)v639 = v640;
        result = (_QWORD *)(v639 + 12);
        v631[5] = v639 + 12;
        v632 = (uint64_t *)((char *)v632 + 28);
        --v630;
      }
      while (v630);
    }
  }
  return result;
}

uint64_t sub_223D4033C(uint64_t a1, int32x2_t *a2, unsigned int a3, unsigned int **a4, float32x4_t a5, float32x4_t a6, double a7, double a8, double a9, float32x4_t a10, int8x16_t a11, float32x4_t a12)
{
  unsigned int **v12;
  unsigned int v13;
  float32x2_t *v14;
  _DWORD *v16;
  _DWORD *v17;
  _BYTE *v18;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x2_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t **v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  unsigned __int8 v56;
  Class isa;
  size_t isa_high;
  int v59;
  unint64_t v60;
  uint64_t v61;
  const char *v62;
  size_t v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  const char *v66;
  size_t v67;
  void **v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  int v72;
  NSObject *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  float32x2_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  float *v115;
  int v116;
  float *v117;
  float32x4_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t **v122;
  float32x4_t v123;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v125;
  const char *v126;
  int v127;
  const char *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  os_log_t v132;
  void *v133[2];
  unint64_t v134;
  char v135;
  void *v136[2];
  unint64_t v137;
  char v138;
  __int128 v139;
  uint64_t v140;
  char v141;

  v12 = a4;
  v13 = a3;
  v14 = (float32x2_t *)a2;
  v16 = *(_DWORD **)a1;
  if (a2->i32[0] == **(_DWORD **)a1 && a2->i32[1] == v16[1] && a2[1].i32[0] == v16[2])
    return 1;
  v17 = *(_DWORD **)(a1 + 8);
  if (a2->i32[0] == *v17 && a2->i32[1] == v17[1] && a2[1].i32[0] == v17[2])
    return 0;
  v18 = *(_BYTE **)(a1 + 16);
  if (*v18)
    return 0;
  *(float32x2_t *)a5.f32 = vcvt_f32_s32(*a2);
  a5.f32[2] = (float)a2[1].i32[0];
  v20.i64[0] = 0x3F0000003F000000;
  v20.i64[1] = 0x3F0000003F000000;
  v21 = vaddq_f32(a5, v20);
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(_QWORD *)(a1 + 40);
  v20.i64[0] = *(_QWORD *)v22;
  v20.i32[2] = *(_DWORD *)(v22 + 8);
  v24 = vmlaq_n_f32(v20, v21, *(float *)(*(_QWORD *)(a1 + 24) + 144));
  a6.i64[0] = *(_QWORD *)v23;
  a6.i32[2] = *(_DWORD *)(v23 + 8);
  v25 = (int8x16_t)vsubq_f32(v24, a6);
  v26 = (float32x2_t)vextq_s8(v25, v25, 8uLL).u64[0];
  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1), *(float32x2_t *)v25.i8, 1), v26, v26).f32[0] > **(float **)(a1 + 48))*v18 = 1;
  if ((a3 & 0x10000000) != 0)
    v27 = 0x40000000;
  else
    v27 = 0x80000000;
  if ((a3 & 0x20000000) != 0)
    v28 = v27;
  else
    v28 = a3 & 0xCFFFFFFF;
  if (v28 >> 30)
  {
    if ((v28 & 0x40000000) == 0)
      goto LABEL_119;
    return 1;
  }
  v29 = *(_QWORD *)(a1 + 72);
  v30 = *(_QWORD *)(*(_QWORD *)v29 + 2448);
  v31 = *(unsigned int *)(v30 + 520 * v28 + 508);
  if (!(_DWORD)v31)
    goto LABEL_118;
  v32 = 0;
  v103 = *(_QWORD *)(*(_QWORD *)v29 + 2448);
  v104 = v28;
  v33 = v30 + 520 * v28;
  v34 = (int8x16_t)vmulq_n_f32(v21, *(float *)(*(_QWORD *)v29 + 144));
  v118 = (float32x4_t)v34;
  v35 = v33 + 364;
  v36 = v33 + 340;
  v113 = v33 + 340;
  v37 = *(_DWORD **)(v29 + 8);
  v122 = *(uint64_t ***)(v29 + 16);
  v119 = *(_QWORD *)(v29 + 32);
  v120 = *(_QWORD **)(v29 + 24);
  v121 = *(_QWORD *)(v29 + 40);
  v117 = *(float **)(v29 + 48);
  v105 = *(_QWORD *)(a1 + 72);
  v115 = *(float **)(v29 + 56);
  v111 = v33 + 364;
  v112 = *(unsigned int *)(v33 + 508);
  while (1)
  {
    v39 = (_DWORD *)(v35 + 12 * v32);
    v40 = *(unsigned __int16 *)(v36 + 2 * v32);
    if (*v39 == *v37 && v39[1] == v37[1] && v39[2] == v37[2])
    {
      v41 = *v122;
      if (*v122)
        break;
    }
    v42 = sub_2239942A0(v120, (int *)(v35 + 12 * v32));
    if (v42)
    {
      v41 = v42 + 4;
      *v122 = v42 + 4;
      if (v37 != v39)
      {
        v43 = *(_QWORD *)v39;
        v37[2] = v39[2];
        *(_QWORD *)v37 = v43;
        v41 = *v122;
      }
      break;
    }
    v56 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223CF9954(&v132);
    v38 = v122;
    if (SHIBYTE(v132[4].isa) < 0)
    {
      isa = v132[2].isa;
      isa_high = (size_t)v132[3].isa;
    }
    else
    {
      isa = (Class)&v132[2];
      isa_high = HIBYTE(v132[4].isa);
    }
    sub_223195728((uint64_t)&unk_255789280, isa, isa_high, "Chunk reference does not exist in the mesh map", 0x2EuLL);
    sub_223CFA3BC(&v131);
    if (**(int **)(v131 + 56) <= 5)
    {
      v59 = *(unsigned __int8 *)(v131 + 72);
      v60 = sub_22322F254(v131, "OSLogSurrogateAppender", 1, 0);
      if (v59 || v60)
      {
        v114 = v60;
        v123.i64[0] = (uint64_t)&v131;
        *(std::chrono::steady_clock::time_point *)&v123.u32[2] = std::chrono::steady_clock::now();
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v125 = 5;
        v126 = "unknown file";
        v127 = 854;
        v128 = "unknown function";
        v129 = 0;
        v130 = 0;
        v61 = *(_QWORD *)v123.i64[0];
        v62 = (const char *)(*(_QWORD *)v123.i64[0] + 16);
        v109 = v62;
        v110 = *(_QWORD *)v123.i64[0];
        if (*(char *)(*(_QWORD *)v123.i64[0] + 39) < 0)
        {
          v62 = *(const char **)(v61 + 16);
          v63 = *(_QWORD *)(v61 + 24);
          v116 = v59;
          v65 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v65 & 1) == 0)
          {
LABEL_110:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v139);
              if (v141)
              {
                xmmword_255788F40 = v139;
                unk_255788F50 = v140;
              }
              else
              {
                byte_255788F57 = 14;
                strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
              }
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v63 = *(unsigned __int8 *)(*(_QWORD *)v123.i64[0] + 39);
          v116 = v59;
          v64 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v64 & 1) == 0)
            goto LABEL_110;
        }
        if (byte_255788F57 >= 0)
          v66 = (const char *)&xmmword_255788F40;
        else
          v66 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v67 = byte_255788F57;
        else
          v67 = *((_QWORD *)&xmmword_255788F40 + 1);
        v132 = os_log_create(v66, v62);
        if (v67 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v67 >= 0x17)
        {
          v69 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v67 | 7) != 0x17)
            v69 = v67 | 7;
          v70 = v69 + 1;
          v68 = (void **)operator new(v69 + 1);
          v133[1] = (void *)v67;
          v134 = v70 | 0x8000000000000000;
          v133[0] = v68;
        }
        else
        {
          HIBYTE(v134) = v67;
          v68 = v133;
          if (!v67)
          {
LABEL_62:
            *((_BYTE *)v68 + v67) = 0;
            v135 = 1;
            if (v63 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v31 = v112;
            if (v63 >= 0x17)
            {
              v75 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v63 | 7) != 0x17)
                v75 = v63 | 7;
              v76 = v75 + 1;
              v71 = (void **)operator new(v75 + 1);
              v136[1] = (void *)v63;
              v137 = v76 | 0x8000000000000000;
              v136[0] = v71;
              v72 = v116;
            }
            else
            {
              HIBYTE(v137) = v63;
              v71 = v136;
              v72 = v116;
              if (!v63)
              {
                LOBYTE(v136[0]) = 0;
                v138 = 1;
                v73 = v132;
                if ((SHIBYTE(v137) & 0x80000000) == 0)
                  goto LABEL_66;
LABEL_72:
                operator delete(v136[0]);
                v36 = v113;
                v74 = v114;
                if (v135)
                  goto LABEL_73;
                goto LABEL_75;
              }
            }
            memmove(v71, v62, v63);
            *((_BYTE *)v71 + v63) = 0;
            v138 = 1;
            v73 = v132;
            if (SHIBYTE(v137) < 0)
              goto LABEL_72;
LABEL_66:
            v36 = v113;
            v74 = v114;
            if (v135)
            {
LABEL_73:
              if (SHIBYTE(v134) < 0)
                operator delete(v133[0]);
            }
LABEL_75:
            if (v132)
              os_release(v132);
            if (v74 && *(_QWORD *)(v74 + 24))
            {
              v77 = _os_log_pack_size();
              v78 = (std::__shared_weak_count_vtbl *)operator new(v77, (std::align_val_t)8uLL);
              v79 = (std::__shared_weak_count *)operator new();
              v80 = v79;
              v79->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v79->__shared_owners_;
              v79->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v79->__shared_weak_owners_ = 0;
              v79[1].__vftable = v78;
              do
                v82 = __ldxr(p_shared_owners);
              while (__stxr(v82 + 1, p_shared_owners));
              do
                v83 = __ldaxr(p_shared_owners);
              while (__stlxr(v83 - 1, p_shared_owners));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v80);
              }
              *(_WORD *)_os_log_pack_fill() = 0;
              v84 = operator new();
              v85 = *(unsigned __int8 *)(v110 + 39);
              v86 = v109;
              if ((v85 & 0x80u) != 0)
              {
                v86 = *(const char **)(v110 + 16);
                v85 = *(_QWORD *)(v110 + 24);
              }
              *(_QWORD *)v84 = v78;
              *(_QWORD *)(v84 + 8) = v78;
              *(_QWORD *)(v84 + 16) = v80;
              *(_QWORD *)(v84 + 24) = 0;
              *(_QWORD *)(v84 + 32) = 0;
              *(_QWORD *)(v84 + 40) = v86;
              *(_QWORD *)(v84 + 48) = v85;
              *(_BYTE *)(v84 + 56) = 16;
              v132 = (os_log_t)v84;
              (*(void (**)(_QWORD, os_log_t *))(**(_QWORD **)(v74 + 24) + 40))(*(_QWORD *)(v74 + 24), &v132);
              v87 = (float32x2_t)v132;
              v132 = 0;
              v35 = v111;
              v36 = v113;
              if (v87)
              {
                v88 = *(std::__shared_weak_count **)(*(_QWORD *)&v87 + 32);
                if (v88)
                {
                  v89 = (unint64_t *)&v88->__shared_owners_;
                  do
                    v90 = __ldaxr(v89);
                  while (__stlxr(v90 - 1, v89));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                v91 = *(std::__shared_weak_count **)(*(_QWORD *)&v87 + 16);
                if (v91)
                {
                  v92 = (unint64_t *)&v91->__shared_owners_;
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
                MEMORY[0x227684CE8](*(_QWORD *)&v87, 0x10F0C40B62ED6C6);
              }
              v72 = v116;
            }
            else
            {
              os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
              LOWORD(v132) = 0;
              v94 = (void *)_os_log_send_and_compose_impl();
              v35 = v111;
              if (v94)
                free(v94);
            }
            if (v72)
            {
              sub_22322C138((uint64_t)&v123, "Chunk reference does not exist in the mesh map");
              sub_223182C08((uint64_t)&v123);
            }
            sub_223182C08((uint64_t)&v123);
            v95 = v130;
            if (v130)
            {
              v96 = (unint64_t *)&v130->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            v38 = v122;
            goto LABEL_21;
          }
        }
        memmove(v68, v66, v67);
        goto LABEL_62;
      }
    }
LABEL_21:
    *v38 = 0;
LABEL_22:
    if (++v32 == v31)
      return 1;
  }
  v44 = (unsigned int *)(v41[14] + 12 * v40);
  v45 = *v41;
  v46 = v45 + 12 * *v44;
  v47 = v45 + 12 * v44[1];
  v48 = v45 + 12 * v44[2];
  v34.i64[0] = *(_QWORD *)v47;
  v34.i32[2] = *(_DWORD *)(v47 + 8);
  v25.i64[0] = *(_QWORD *)v46;
  v25.i32[2] = *(_DWORD *)(v46 + 8);
  v49 = (int8x16_t)vsubq_f32((float32x4_t)v34, (float32x4_t)v25);
  v24.i64[0] = *(_QWORD *)v48;
  v24.i32[2] = *(_DWORD *)(v48 + 8);
  v50 = (int8x16_t)vsubq_f32(v24, (float32x4_t)v25);
  v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), v50, 0xCuLL);
  v52 = vextq_s8(v50, v50, 0xCuLL);
  v53 = (float32x4_t)vextq_s8(v52, v50, 8uLL);
  v54 = vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v49, v49, 0xCuLL), v49, 8uLL), v51);
  v55 = vsubq_f32(v54, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL), v53));
  LODWORD(v133[0]) = v55.i32[2];
  v132 = (os_log_t)v55.i64[0];
  if (!sub_223ED29D8(v46, v47, v48, (float32x2_t *)&v132, v119, v121, (uint64_t)&v123, v55, v53, *(double *)v54.i64, *(float32x2_t *)v51.f32, *(double *)v52.i64, a10, a11, a12))goto LABEL_22;
  v34.i32[3] = v123.i32[3];
  v25 = (int8x16_t)vabdq_f32(v123, v118);
  if (*(float *)v25.i32 >= *v117)
    goto LABEL_22;
  v25.i32[0] = vextq_s8(v25, v25, 8uLL).u32[0];
  v24.f32[0] = *v117;
  *(int32x2_t *)v25.i8 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.f32, 0), *(float32x2_t *)v25.i8);
  if ((v25.i8[4] & 1) == 0)
    goto LABEL_22;
  if ((v25.i8[0] & 1) == 0)
    goto LABEL_22;
  v25.i64[0] = *(_QWORD *)v121;
  v25.i32[2] = *(_DWORD *)(v121 + 8);
  v34 = (int8x16_t)vsubq_f32(v123, (float32x4_t)v25);
  v24 = (float32x4_t)vextq_s8(v34, v34, 8uLL);
  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1), *(float32x2_t *)v34.i8, 1), *(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32).f32[0] < *v115&& !*(_BYTE *)(v121 + 30))
  {
    goto LABEL_22;
  }
  v13 = a3;
  v12 = a4;
  v14 = (float32x2_t *)a2;
  v28 = v104;
  v29 = v105;
  v30 = v103;
LABEL_118:
  if ((double)(uint64_t)(**(_QWORD **)(v29 + 64) - *(_QWORD *)(v30 + 520 * v28 + 312)) / 1000000000.0 < **(double **)(v29 + 72))
    return 0;
LABEL_119:
  v98 = (uint64_t)v12[1];
  v99 = sub_223D02A44(v98, (int *)v12[2], **v12);
  **v12 = v99;
  if ((v99 & 0x80000000) != 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 629, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown block index", 19, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_131;
  }
  v100 = *(_QWORD *)(v98 + 2328);
  if (v99 >= (unint64_t)((*(_QWORD *)(v98 + 2336) - v100) >> 11))
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 630, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v100 = *(_QWORD *)(v98 + 2328);
      goto LABEL_124;
    }
LABEL_131:
    abort();
  }
LABEL_124:
  v101 = v100 + ((unint64_t)v99 << 11);
  sub_223D03114((char *)v98, (int *)v12[2]);
  *(_DWORD *)(v101 + 4 * (*v12[2] & 7 | (8 * (v12[2][1] & 7)) & 0x3F | ((v12[2][2] & 7) << 6))) = 0x40000000;
  if (v13 != 0x40000000)
  {
    v102 = **(_QWORD **)(a1 + 80);
    if (!(v13 >> 30))
      sub_223CF7DE8(**(_QWORD **)(a1 + 80), v13);
    v132 = (os_log_t)*v14;
    LODWORD(v133[0]) = v14[1].i32[0];
    sub_223CF89D8(v102, (int *)&v132, v13, 0x40000000u);
  }
  return 1;
}

void sub_223D40E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43)
{
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a35);
  v44 = a43;
  if (a43)
  {
    p_shared_owners = (unint64_t *)&a43->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223D41048(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int32x2_t v19;
  _BYTE v20[12];
  int32x2_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  char v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  char v54;
  uint64_t v55;
  int v56;
  char v57;
  char v58;
  uint64_t v59;
  int v60;
  char v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  char v66;
  uint64_t v67;
  int v68;
  char v69;
  char v70;
  uint64_t v71;
  int v72;
  char v73;
  char v74;
  int v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  char v82;
  int v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  int v88;
  char v89;
  char v90;
  int v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  int v96;
  char v97;
  char v98;
  int v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  int v104;
  char v105;
  char v106;
  int v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  int v115;
  uint64_t v116;
  char v117;
  char v118;
  uint64_t v119;
  int v120;
  char v121;
  char v122;
  int v123;
  uint64_t v124;
  char v125;
  int32x2_t v126;
  int v127;
  uint64_t v128;
  int v129;

  v7 = a3 & 0xCFFFFFFF;
  v8 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v9 = *(int32x2_t *)v8;
  v127 = *(_DWORD *)(v8 + 8);
  v126 = v9;
  v10 = *(_QWORD *)(v8 + 12);
  v129 = *(_DWORD *)(v8 + 20);
  v128 = v10;
  v20[0] = 1;
  *(_QWORD *)&v20[4] = -1;
  v21.i32[0] = -1;
  v21.i8[4] = 8;
  LOBYTE(v22) = 1;
  v23 = -1;
  v24 = -1;
  v25 = 8;
  v26 = 1;
  v27 = -1;
  v28 = -1;
  v29 = 8;
  v30 = 1;
  v31 = -1;
  v32 = -1;
  v33 = 8;
  v34 = 1;
  v35 = -1;
  v36 = -1;
  v37 = 8;
  v38 = 1;
  v39 = -1;
  v40 = -1;
  v41 = 8;
  v42 = 1;
  v43 = -1;
  v44 = -1;
  v45 = 8;
  v46 = 1;
  v47 = -1;
  v48 = -1;
  v49 = 8;
  v50 = 1;
  v51 = -1;
  v52 = -1;
  v53 = 8;
  v54 = 1;
  v55 = -1;
  v56 = -1;
  v57 = 8;
  v58 = 1;
  v59 = -1;
  v60 = -1;
  v61 = 8;
  v62 = 1;
  v63 = -1;
  v64 = -1;
  v65 = 8;
  v66 = 1;
  v67 = -1;
  v68 = -1;
  v69 = 8;
  v70 = 1;
  v71 = -1;
  v72 = -1;
  v73 = 8;
  v74 = 1;
  v75 = -1;
  v76 = -1;
  v77 = 8;
  v78 = 1;
  v79 = -1;
  v80 = -1;
  v81 = 8;
  v82 = 1;
  v83 = -1;
  v84 = -1;
  v85 = 8;
  v86 = 1;
  v87 = -1;
  v88 = -1;
  v89 = 8;
  v90 = 1;
  v91 = -1;
  v92 = -1;
  v93 = 8;
  v94 = 1;
  v95 = -1;
  v96 = -1;
  v97 = 8;
  v98 = 1;
  v99 = -1;
  v100 = -1;
  v101 = 8;
  v102 = 1;
  v103 = -1;
  v104 = -1;
  v105 = 8;
  v106 = 1;
  v107 = -1;
  v108 = -1;
  v109 = 8;
  v110 = 1;
  v111 = -1;
  v112 = -1;
  v113 = 8;
  v114 = 1;
  v115 = -1;
  v116 = -1;
  v117 = 8;
  v118 = 1;
  v119 = -1;
  v120 = -1;
  v121 = 8;
  v122 = 1;
  v123 = -1;
  v124 = -1;
  v125 = 8;
  result = sub_223D4150C(a4, a2, 0, &v126, *(_DWORD *)(v8 + 64), (uint64_t)v20);
  if (a2 && (_DWORD)result != 3)
  {
    v12 = (a2 - 1);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(a1 + 184);
      if ((*(_DWORD *)(v13 + 4488 * v7 + 24) & 0x80000000) == 0)
      {
        result = sub_223D41048(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 28) & 0x80000000) == 0)
      {
        result = sub_223D41048(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 32) & 0x80000000) == 0)
      {
        result = sub_223D41048(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 36) & 0x80000000) == 0)
      {
        result = sub_223D41048(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 40) & 0x80000000) == 0)
      {
        result = sub_223D41048(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 44) & 0x80000000) == 0)
      {
        result = sub_223D41048(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 48) & 0x80000000) == 0)
      {
        result = sub_223D41048(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 52) & 0x80000000) == 0)
        return sub_223D41048(a1, v12);
    }
    else
    {
      for (i = 0; i != 8; ++i)
      {
        v15 = byte_22466FA9C[i];
        v16 = *(_QWORD *)(a1 + 184);
        v17 = *(_DWORD *)(v16 + 4488 * v7 + 4 * v15 + 24);
        if ((v17 & 0x80000000) == 0)
        {
          v18 = (v128 - v126.i32[0]) >> 1;
          v19 = vdup_n_s32(v18);
          *(int32x2_t *)v20 = vmla_s32(v126, v19, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v15), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
          *(_DWORD *)&v20[8] = v127 + v18 * (v15 & 1);
          v21 = vadd_s32(*(int32x2_t *)v20, v19);
          v22 = *(_DWORD *)&v20[8] + v18;
          result = sub_223D4150C(a4, 0, v17, (int32x2_t *)v20, v17 >> 30 == 0, v16 + 4488 * v7 + 540 * v15 + 68);
        }
      }
    }
  }
  return result;
}

uint64_t sub_223D4150C(uint64_t a1, int a2, unsigned int a3, int32x2_t *a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[5];
  char v15;
  uint64_t v16;
  int v17;

  if (!a5)
    return 3;
  if (a2)
    return 2;
  v9 = *(uint64_t **)(a1 + 8);
  v15 = 1;
  v10 = *v9;
  v11 = a3;
  v12 = *(_QWORD *)(*v9 + 2328);
  if (a3 >= (unint64_t)((*(_QWORD *)(*v9 + 2336) - v12) >> 11))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v12 = *(_QWORD *)(v10 + 2328);
  }
  v14[0] = v10;
  v14[1] = v12 + (v11 << 11);
  v14[2] = a6;
  v14[3] = (uint64_t)&v15;
  v14[4] = v9[1];
  v16 = 0;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0);
  v16 = 1;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 1u);
  v16 = 2;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 2u);
  v16 = 3;
  v17 = 0;
  v6 = 3;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 3u);
  v16 = 4;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 4u);
  v16 = 5;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 5u);
  v16 = 6;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 6u);
  v16 = 7;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 7u);
  v16 = 0x100000000;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 8u);
  v16 = 0x100000001;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 9u);
  v16 = 0x100000002;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0xAu);
  v16 = 0x100000003;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0xBu);
  v16 = 0x100000004;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0xCu);
  v16 = 0x100000005;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0xDu);
  v16 = 0x100000006;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0xEu);
  v16 = 0x100000007;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0xFu);
  v16 = 0x200000000;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x10u);
  v16 = 0x200000001;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x11u);
  v16 = 0x200000002;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x12u);
  v16 = 0x200000003;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x13u);
  v16 = 0x200000004;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x14u);
  v16 = 0x200000005;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x15u);
  v16 = 0x200000006;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x16u);
  v16 = 0x200000007;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x17u);
  v16 = 0x300000000;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x18u);
  v16 = 0x300000001;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x19u);
  v16 = 0x300000002;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x1Au);
  v16 = 0x300000003;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x1Bu);
  v16 = 0x300000004;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x1Cu);
  v16 = 0x300000005;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x1Du);
  v16 = 0x300000006;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x1Eu);
  v16 = 0x300000007;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x1Fu);
  v16 = 0x400000000;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x20u);
  v16 = 0x400000001;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x21u);
  v16 = 0x400000002;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x22u);
  v16 = 0x400000003;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x23u);
  v16 = 0x400000004;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x24u);
  v16 = 0x400000005;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x25u);
  v16 = 0x400000006;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x26u);
  v16 = 0x400000007;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x27u);
  v16 = 0x500000000;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x28u);
  v16 = 0x500000001;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x29u);
  v16 = 0x500000002;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x2Au);
  v16 = 0x500000003;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x2Bu);
  v16 = 0x500000004;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x2Cu);
  v16 = 0x500000005;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x2Du);
  v16 = 0x500000006;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x2Eu);
  v16 = 0x500000007;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x2Fu);
  v16 = 0x600000000;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x30u);
  v16 = 0x600000001;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x31u);
  v16 = 0x600000002;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x32u);
  v16 = 0x600000003;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x33u);
  v16 = 0x600000004;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x34u);
  v16 = 0x600000005;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x35u);
  v16 = 0x600000006;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x36u);
  v16 = 0x600000007;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x37u);
  v16 = 0x700000000;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x38u);
  v16 = 0x700000001;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x39u);
  v16 = 0x700000002;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x3Au);
  v16 = 0x700000003;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x3Bu);
  v16 = 0x700000004;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x3Cu);
  v16 = 0x700000005;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x3Du);
  v16 = 0x700000006;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x3Eu);
  v16 = 0x700000007;
  v17 = 0;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x3Fu);
  v16 = 0;
  v17 = 1;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x40u);
  v16 = 1;
  v17 = 1;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x41u);
  v16 = 2;
  v17 = 1;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x42u);
  v16 = 3;
  v17 = 1;
  sub_223D41F50(v14, a4, (int32x2_t *)&v16, 0x43u);
  sub_223D420F8(v14, a4);
  return v6;
}

void sub_223D41F50(uint64_t *a1, int32x2_t *a2, int32x2_t *a3, unsigned int a4)
{
  int32x2_t v6;
  int32x2_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int32x2_t v14;
  __int32 v15;
  int32x2_t ***v16;
  int32x2_t **v17;
  unint64_t v18;
  int32x2_t *v19;
  int32x2_t *v20;
  int32x2_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int32x2_t *v27;
  int32x2_t v28;
  __int32 v29;

  v6 = *a2;
  v7 = *a3;
  v8 = a2[1].i32[0];
  v9 = a3[1].i32[0];
  v10 = *a1;
  v11 = a1[1];
  if (a4 >= 0x200
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 499, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v12 = *(_DWORD *)(v11 + 4 * a4);
  if (v12 != *(_DWORD *)(v10 + 272) && (v12 & 0x40000000) != 0)
  {
    v14 = vadd_s32(v7, v6);
    v15 = v9 + v8;
    v16 = *(int32x2_t ****)a1[4];
    v17 = *v16;
    v19 = (*v16)[1];
    v18 = (unint64_t)(*v16)[2];
    if ((unint64_t)v19 >= v18)
    {
      v21 = *v17;
      v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)*v17) >> 2);
      v23 = v22 + 1;
      if (v22 + 1 > 0x1555555555555555)
        sub_22316E078();
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v21) >> 2);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0xAAAAAAAAAAAAAAALL)
        v25 = 0x1555555555555555;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 > 0x1555555555555555)
          sub_223174E94();
        v26 = (char *)operator new(12 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = (int32x2_t *)&v26[12 * v22];
      *v27 = v14;
      v27[1].i32[0] = v15;
      v20 = (int32x2_t *)((char *)v27 + 12);
      if (v19 != v21)
      {
        do
        {
          v28 = *(int32x2_t *)((char *)v19 - 12);
          v19 = (int32x2_t *)((char *)v19 - 12);
          v29 = v19[1].i32[0];
          *(int32x2_t *)((char *)v27 - 12) = v28;
          v27 = (int32x2_t *)((char *)v27 - 12);
          v27[1].i32[0] = v29;
        }
        while (v19 != v21);
        v19 = *v17;
      }
      *v17 = v27;
      v17[1] = v20;
      v17[2] = (int32x2_t *)&v26[12 * v25];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v19 = v14;
      v19[1].i32[0] = v15;
      v20 = (int32x2_t *)((char *)v19 + 12);
    }
    v17[1] = v20;
  }
}

void sub_223D420F8(uint64_t *a1, int32x2_t *a2)
{
  uint64_t v4;
  int v5;

  v4 = 4;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x44u);
  v4 = 5;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x45u);
  v4 = 6;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x46u);
  v4 = 7;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x47u);
  v4 = 0x100000000;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x48u);
  v4 = 0x100000001;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x49u);
  v4 = 0x100000002;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x4Au);
  v4 = 0x100000003;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x4Bu);
  v4 = 0x100000004;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x4Cu);
  v4 = 0x100000005;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x4Du);
  v4 = 0x100000006;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x4Eu);
  v4 = 0x100000007;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x4Fu);
  v4 = 0x200000000;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x50u);
  v4 = 0x200000001;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x51u);
  v4 = 0x200000002;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x52u);
  v4 = 0x200000003;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x53u);
  v4 = 0x200000004;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x54u);
  v4 = 0x200000005;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x55u);
  v4 = 0x200000006;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x56u);
  v4 = 0x200000007;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x57u);
  v4 = 0x300000000;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x58u);
  v4 = 0x300000001;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x59u);
  v4 = 0x300000002;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x5Au);
  v4 = 0x300000003;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x5Bu);
  v4 = 0x300000004;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x5Cu);
  v4 = 0x300000005;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x5Du);
  v4 = 0x300000006;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x5Eu);
  v4 = 0x300000007;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x5Fu);
  v4 = 0x400000000;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x60u);
  v4 = 0x400000001;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x61u);
  v4 = 0x400000002;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x62u);
  v4 = 0x400000003;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x63u);
  v4 = 0x400000004;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x64u);
  v4 = 0x400000005;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x65u);
  v4 = 0x400000006;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x66u);
  v4 = 0x400000007;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x67u);
  v4 = 0x500000000;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x68u);
  v4 = 0x500000001;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x69u);
  v4 = 0x500000002;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x6Au);
  v4 = 0x500000003;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x6Bu);
  v4 = 0x500000004;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x6Cu);
  v4 = 0x500000005;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x6Du);
  v4 = 0x500000006;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x6Eu);
  v4 = 0x500000007;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x6Fu);
  v4 = 0x600000000;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x70u);
  v4 = 0x600000001;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x71u);
  v4 = 0x600000002;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x72u);
  v4 = 0x600000003;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x73u);
  v4 = 0x600000004;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x74u);
  v4 = 0x600000005;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x75u);
  v4 = 0x600000006;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x76u);
  v4 = 0x600000007;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x77u);
  v4 = 0x700000000;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x78u);
  v4 = 0x700000001;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x79u);
  v4 = 0x700000002;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x7Au);
  v4 = 0x700000003;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x7Bu);
  v4 = 0x700000004;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x7Cu);
  v4 = 0x700000005;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x7Du);
  v4 = 0x700000006;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x7Eu);
  v4 = 0x700000007;
  v5 = 1;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x7Fu);
  v4 = 0;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x80u);
  v4 = 1;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x81u);
  v4 = 2;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x82u);
  v4 = 3;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x83u);
  v4 = 4;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x84u);
  v4 = 5;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x85u);
  v4 = 6;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x86u);
  v4 = 7;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x87u);
  v4 = 0x100000000;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x88u);
  v4 = 0x100000001;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x89u);
  v4 = 0x100000002;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x8Au);
  v4 = 0x100000003;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x8Bu);
  v4 = 0x100000004;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x8Cu);
  v4 = 0x100000005;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x8Du);
  v4 = 0x100000006;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x8Eu);
  v4 = 0x100000007;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x8Fu);
  v4 = 0x200000000;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x90u);
  v4 = 0x200000001;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x91u);
  v4 = 0x200000002;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x92u);
  v4 = 0x200000003;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x93u);
  v4 = 0x200000004;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x94u);
  v4 = 0x200000005;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x95u);
  v4 = 0x200000006;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x96u);
  v4 = 0x200000007;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x97u);
  v4 = 0x300000000;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x98u);
  v4 = 0x300000001;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x99u);
  v4 = 0x300000002;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x9Au);
  v4 = 0x300000003;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x9Bu);
  v4 = 0x300000004;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x9Cu);
  v4 = 0x300000005;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x9Du);
  v4 = 0x300000006;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x9Eu);
  v4 = 0x300000007;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x9Fu);
  v4 = 0x400000000;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xA0u);
  v4 = 0x400000001;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xA1u);
  v4 = 0x400000002;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xA2u);
  v4 = 0x400000003;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xA3u);
  v4 = 0x400000004;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xA4u);
  v4 = 0x400000005;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xA5u);
  v4 = 0x400000006;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xA6u);
  v4 = 0x400000007;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xA7u);
  v4 = 0x500000000;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xA8u);
  v4 = 0x500000001;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xA9u);
  v4 = 0x500000002;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xAAu);
  v4 = 0x500000003;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xABu);
  v4 = 0x500000004;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xACu);
  v4 = 0x500000005;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xADu);
  v4 = 0x500000006;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xAEu);
  v4 = 0x500000007;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xAFu);
  v4 = 0x600000000;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xB0u);
  v4 = 0x600000001;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xB1u);
  v4 = 0x600000002;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xB2u);
  v4 = 0x600000003;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xB3u);
  v4 = 0x600000004;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xB4u);
  v4 = 0x600000005;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xB5u);
  v4 = 0x600000006;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xB6u);
  v4 = 0x600000007;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xB7u);
  v4 = 0x700000000;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xB8u);
  v4 = 0x700000001;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xB9u);
  v4 = 0x700000002;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xBAu);
  v4 = 0x700000003;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xBBu);
  v4 = 0x700000004;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xBCu);
  v4 = 0x700000005;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xBDu);
  v4 = 0x700000006;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xBEu);
  v4 = 0x700000007;
  v5 = 2;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xBFu);
  v4 = 0;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xC0u);
  v4 = 1;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xC1u);
  v4 = 2;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xC2u);
  v4 = 3;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xC3u);
  v4 = 4;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xC4u);
  v4 = 5;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xC5u);
  v4 = 6;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xC6u);
  v4 = 7;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xC7u);
  v4 = 0x100000000;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xC8u);
  v4 = 0x100000001;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xC9u);
  v4 = 0x100000002;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xCAu);
  v4 = 0x100000003;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xCBu);
  v4 = 0x100000004;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xCCu);
  v4 = 0x100000005;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xCDu);
  v4 = 0x100000006;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xCEu);
  v4 = 0x100000007;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xCFu);
  v4 = 0x200000000;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xD0u);
  v4 = 0x200000001;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xD1u);
  v4 = 0x200000002;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xD2u);
  v4 = 0x200000003;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xD3u);
  v4 = 0x200000004;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xD4u);
  v4 = 0x200000005;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xD5u);
  v4 = 0x200000006;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xD6u);
  v4 = 0x200000007;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xD7u);
  v4 = 0x300000000;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xD8u);
  v4 = 0x300000001;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xD9u);
  v4 = 0x300000002;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xDAu);
  v4 = 0x300000003;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xDBu);
  v4 = 0x300000004;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xDCu);
  v4 = 0x300000005;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xDDu);
  v4 = 0x300000006;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xDEu);
  v4 = 0x300000007;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xDFu);
  v4 = 0x400000000;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xE0u);
  v4 = 0x400000001;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xE1u);
  v4 = 0x400000002;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xE2u);
  v4 = 0x400000003;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xE3u);
  v4 = 0x400000004;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xE4u);
  v4 = 0x400000005;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xE5u);
  v4 = 0x400000006;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xE6u);
  v4 = 0x400000007;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xE7u);
  v4 = 0x500000000;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xE8u);
  v4 = 0x500000001;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xE9u);
  v4 = 0x500000002;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xEAu);
  v4 = 0x500000003;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xEBu);
  v4 = 0x500000004;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xECu);
  v4 = 0x500000005;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xEDu);
  v4 = 0x500000006;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xEEu);
  v4 = 0x500000007;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xEFu);
  v4 = 0x600000000;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xF0u);
  v4 = 0x600000001;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xF1u);
  v4 = 0x600000002;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xF2u);
  v4 = 0x600000003;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xF3u);
  v4 = 0x600000004;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xF4u);
  v4 = 0x600000005;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xF5u);
  v4 = 0x600000006;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xF6u);
  v4 = 0x600000007;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xF7u);
  v4 = 0x700000000;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xF8u);
  v4 = 0x700000001;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xF9u);
  v4 = 0x700000002;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xFAu);
  v4 = 0x700000003;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xFBu);
  v4 = 0x700000004;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xFCu);
  v4 = 0x700000005;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xFDu);
  v4 = 0x700000006;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xFEu);
  v4 = 0x700000007;
  v5 = 3;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0xFFu);
  v4 = 0;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x100u);
  v4 = 1;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x101u);
  v4 = 2;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x102u);
  v4 = 3;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x103u);
  v4 = 4;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x104u);
  v4 = 5;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x105u);
  v4 = 6;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x106u);
  v4 = 7;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x107u);
  v4 = 0x100000000;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x108u);
  v4 = 0x100000001;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x109u);
  v4 = 0x100000002;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x10Au);
  v4 = 0x100000003;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x10Bu);
  v4 = 0x100000004;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x10Cu);
  v4 = 0x100000005;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x10Du);
  v4 = 0x100000006;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x10Eu);
  v4 = 0x100000007;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x10Fu);
  v4 = 0x200000000;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x110u);
  v4 = 0x200000001;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x111u);
  v4 = 0x200000002;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x112u);
  v4 = 0x200000003;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x113u);
  v4 = 0x200000004;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x114u);
  v4 = 0x200000005;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x115u);
  v4 = 0x200000006;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x116u);
  v4 = 0x200000007;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x117u);
  v4 = 0x300000000;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x118u);
  v4 = 0x300000001;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x119u);
  v4 = 0x300000002;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x11Au);
  v4 = 0x300000003;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x11Bu);
  v4 = 0x300000004;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x11Cu);
  v4 = 0x300000005;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x11Du);
  v4 = 0x300000006;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x11Eu);
  v4 = 0x300000007;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x11Fu);
  v4 = 0x400000000;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x120u);
  v4 = 0x400000001;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x121u);
  sub_223D43E74(a1, a2);
}

void sub_223D43E74(uint64_t *a1, int32x2_t *a2)
{
  uint64_t v4;
  int v5;

  v4 = 0x400000002;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x122u);
  v4 = 0x400000003;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x123u);
  v4 = 0x400000004;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x124u);
  v4 = 0x400000005;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x125u);
  v4 = 0x400000006;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x126u);
  v4 = 0x400000007;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x127u);
  v4 = 0x500000000;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x128u);
  v4 = 0x500000001;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x129u);
  v4 = 0x500000002;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x12Au);
  v4 = 0x500000003;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x12Bu);
  v4 = 0x500000004;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x12Cu);
  v4 = 0x500000005;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x12Du);
  v4 = 0x500000006;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x12Eu);
  v4 = 0x500000007;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x12Fu);
  v4 = 0x600000000;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x130u);
  v4 = 0x600000001;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x131u);
  v4 = 0x600000002;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x132u);
  v4 = 0x600000003;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x133u);
  v4 = 0x600000004;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x134u);
  v4 = 0x600000005;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x135u);
  v4 = 0x600000006;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x136u);
  v4 = 0x600000007;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x137u);
  v4 = 0x700000000;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x138u);
  v4 = 0x700000001;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x139u);
  v4 = 0x700000002;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x13Au);
  v4 = 0x700000003;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x13Bu);
  v4 = 0x700000004;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x13Cu);
  v4 = 0x700000005;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x13Du);
  v4 = 0x700000006;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x13Eu);
  v4 = 0x700000007;
  v5 = 4;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x13Fu);
  v4 = 0;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x140u);
  v4 = 1;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x141u);
  v4 = 2;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x142u);
  v4 = 3;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x143u);
  v4 = 4;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x144u);
  v4 = 5;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x145u);
  v4 = 6;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x146u);
  v4 = 7;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x147u);
  v4 = 0x100000000;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x148u);
  v4 = 0x100000001;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x149u);
  v4 = 0x100000002;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x14Au);
  v4 = 0x100000003;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x14Bu);
  v4 = 0x100000004;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x14Cu);
  v4 = 0x100000005;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x14Du);
  v4 = 0x100000006;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x14Eu);
  v4 = 0x100000007;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x14Fu);
  v4 = 0x200000000;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x150u);
  v4 = 0x200000001;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x151u);
  v4 = 0x200000002;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x152u);
  v4 = 0x200000003;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x153u);
  v4 = 0x200000004;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x154u);
  v4 = 0x200000005;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x155u);
  v4 = 0x200000006;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x156u);
  v4 = 0x200000007;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x157u);
  v4 = 0x300000000;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x158u);
  v4 = 0x300000001;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x159u);
  v4 = 0x300000002;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x15Au);
  v4 = 0x300000003;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x15Bu);
  v4 = 0x300000004;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x15Cu);
  v4 = 0x300000005;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x15Du);
  v4 = 0x300000006;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x15Eu);
  v4 = 0x300000007;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x15Fu);
  v4 = 0x400000000;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x160u);
  v4 = 0x400000001;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x161u);
  v4 = 0x400000002;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x162u);
  v4 = 0x400000003;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x163u);
  v4 = 0x400000004;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x164u);
  v4 = 0x400000005;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x165u);
  v4 = 0x400000006;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x166u);
  v4 = 0x400000007;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x167u);
  v4 = 0x500000000;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x168u);
  v4 = 0x500000001;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x169u);
  v4 = 0x500000002;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x16Au);
  v4 = 0x500000003;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x16Bu);
  v4 = 0x500000004;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x16Cu);
  v4 = 0x500000005;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x16Du);
  v4 = 0x500000006;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x16Eu);
  v4 = 0x500000007;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x16Fu);
  v4 = 0x600000000;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x170u);
  v4 = 0x600000001;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x171u);
  v4 = 0x600000002;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x172u);
  v4 = 0x600000003;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x173u);
  v4 = 0x600000004;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x174u);
  v4 = 0x600000005;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x175u);
  v4 = 0x600000006;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x176u);
  v4 = 0x600000007;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x177u);
  v4 = 0x700000000;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x178u);
  v4 = 0x700000001;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x179u);
  v4 = 0x700000002;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x17Au);
  v4 = 0x700000003;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x17Bu);
  v4 = 0x700000004;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x17Cu);
  v4 = 0x700000005;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x17Du);
  v4 = 0x700000006;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x17Eu);
  v4 = 0x700000007;
  v5 = 5;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x17Fu);
  v4 = 0;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x180u);
  v4 = 1;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x181u);
  v4 = 2;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x182u);
  v4 = 3;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x183u);
  v4 = 4;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x184u);
  v4 = 5;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x185u);
  v4 = 6;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x186u);
  v4 = 7;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x187u);
  v4 = 0x100000000;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x188u);
  v4 = 0x100000001;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x189u);
  v4 = 0x100000002;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x18Au);
  v4 = 0x100000003;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x18Bu);
  v4 = 0x100000004;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x18Cu);
  v4 = 0x100000005;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x18Du);
  v4 = 0x100000006;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x18Eu);
  v4 = 0x100000007;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x18Fu);
  v4 = 0x200000000;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x190u);
  v4 = 0x200000001;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x191u);
  v4 = 0x200000002;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x192u);
  v4 = 0x200000003;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x193u);
  v4 = 0x200000004;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x194u);
  v4 = 0x200000005;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x195u);
  v4 = 0x200000006;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x196u);
  v4 = 0x200000007;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x197u);
  v4 = 0x300000000;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x198u);
  v4 = 0x300000001;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x199u);
  v4 = 0x300000002;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x19Au);
  v4 = 0x300000003;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x19Bu);
  v4 = 0x300000004;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x19Cu);
  v4 = 0x300000005;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x19Du);
  v4 = 0x300000006;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x19Eu);
  v4 = 0x300000007;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x19Fu);
  v4 = 0x400000000;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1A0u);
  v4 = 0x400000001;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1A1u);
  v4 = 0x400000002;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1A2u);
  v4 = 0x400000003;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1A3u);
  v4 = 0x400000004;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1A4u);
  v4 = 0x400000005;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1A5u);
  v4 = 0x400000006;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1A6u);
  v4 = 0x400000007;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1A7u);
  v4 = 0x500000000;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1A8u);
  v4 = 0x500000001;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1A9u);
  v4 = 0x500000002;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1AAu);
  v4 = 0x500000003;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1ABu);
  v4 = 0x500000004;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1ACu);
  v4 = 0x500000005;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1ADu);
  v4 = 0x500000006;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1AEu);
  v4 = 0x500000007;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1AFu);
  v4 = 0x600000000;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1B0u);
  v4 = 0x600000001;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1B1u);
  v4 = 0x600000002;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1B2u);
  v4 = 0x600000003;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1B3u);
  v4 = 0x600000004;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1B4u);
  v4 = 0x600000005;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1B5u);
  v4 = 0x600000006;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1B6u);
  v4 = 0x600000007;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1B7u);
  v4 = 0x700000000;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1B8u);
  v4 = 0x700000001;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1B9u);
  v4 = 0x700000002;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1BAu);
  v4 = 0x700000003;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1BBu);
  v4 = 0x700000004;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1BCu);
  v4 = 0x700000005;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1BDu);
  v4 = 0x700000006;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1BEu);
  v4 = 0x700000007;
  v5 = 6;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1BFu);
  v4 = 0;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1C0u);
  v4 = 1;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1C1u);
  v4 = 2;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1C2u);
  v4 = 3;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1C3u);
  v4 = 4;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1C4u);
  v4 = 5;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1C5u);
  v4 = 6;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1C6u);
  v4 = 7;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1C7u);
  v4 = 0x100000000;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1C8u);
  v4 = 0x100000001;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1C9u);
  v4 = 0x100000002;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1CAu);
  v4 = 0x100000003;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1CBu);
  v4 = 0x100000004;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1CCu);
  v4 = 0x100000005;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1CDu);
  v4 = 0x100000006;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1CEu);
  v4 = 0x100000007;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1CFu);
  v4 = 0x200000000;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1D0u);
  v4 = 0x200000001;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1D1u);
  v4 = 0x200000002;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1D2u);
  v4 = 0x200000003;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1D3u);
  v4 = 0x200000004;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1D4u);
  v4 = 0x200000005;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1D5u);
  v4 = 0x200000006;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1D6u);
  v4 = 0x200000007;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1D7u);
  v4 = 0x300000000;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1D8u);
  v4 = 0x300000001;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1D9u);
  v4 = 0x300000002;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1DAu);
  v4 = 0x300000003;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1DBu);
  v4 = 0x300000004;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1DCu);
  v4 = 0x300000005;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1DDu);
  v4 = 0x300000006;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1DEu);
  v4 = 0x300000007;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1DFu);
  v4 = 0x400000000;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1E0u);
  v4 = 0x400000001;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1E1u);
  v4 = 0x400000002;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1E2u);
  v4 = 0x400000003;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1E3u);
  v4 = 0x400000004;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1E4u);
  v4 = 0x400000005;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1E5u);
  v4 = 0x400000006;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1E6u);
  v4 = 0x400000007;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1E7u);
  v4 = 0x500000000;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1E8u);
  v4 = 0x500000001;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1E9u);
  v4 = 0x500000002;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1EAu);
  v4 = 0x500000003;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1EBu);
  v4 = 0x500000004;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1ECu);
  v4 = 0x500000005;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1EDu);
  v4 = 0x500000006;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1EEu);
  v4 = 0x500000007;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1EFu);
  v4 = 0x600000000;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1F0u);
  v4 = 0x600000001;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1F1u);
  v4 = 0x600000002;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1F2u);
  v4 = 0x600000003;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1F3u);
  v4 = 0x600000004;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1F4u);
  v4 = 0x600000005;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1F5u);
  v4 = 0x600000006;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1F6u);
  v4 = 0x600000007;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1F7u);
  v4 = 0x700000000;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1F8u);
  v4 = 0x700000001;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1F9u);
  v4 = 0x700000002;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1FAu);
  v4 = 0x700000003;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1FBu);
  v4 = 0x700000004;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1FCu);
  v4 = 0x700000005;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1FDu);
  v4 = 0x700000006;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1FEu);
  v4 = 0x700000007;
  v5 = 7;
  sub_223D41F50(a1, a2, (int32x2_t *)&v4, 0x1FFu);
}

uint64_t sub_223D45BE8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int32x2_t v19;
  _BYTE v20[12];
  int32x2_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  char v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  char v54;
  uint64_t v55;
  int v56;
  char v57;
  char v58;
  uint64_t v59;
  int v60;
  char v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  char v66;
  uint64_t v67;
  int v68;
  char v69;
  char v70;
  uint64_t v71;
  int v72;
  char v73;
  char v74;
  int v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  char v82;
  int v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  int v88;
  char v89;
  char v90;
  int v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  int v96;
  char v97;
  char v98;
  int v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  int v104;
  char v105;
  char v106;
  int v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  int v115;
  uint64_t v116;
  char v117;
  char v118;
  uint64_t v119;
  int v120;
  char v121;
  char v122;
  int v123;
  uint64_t v124;
  char v125;
  int32x2_t v126;
  int v127;
  uint64_t v128;
  int v129;

  v7 = a3 & 0xCFFFFFFF;
  v8 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v9 = *(int32x2_t *)v8;
  v127 = *(_DWORD *)(v8 + 8);
  v126 = v9;
  v10 = *(_QWORD *)(v8 + 12);
  v129 = *(_DWORD *)(v8 + 20);
  v128 = v10;
  v20[0] = 1;
  *(_QWORD *)&v20[4] = -1;
  v21.i32[0] = -1;
  v21.i8[4] = 8;
  LOBYTE(v22) = 1;
  v23 = -1;
  v24 = -1;
  v25 = 8;
  v26 = 1;
  v27 = -1;
  v28 = -1;
  v29 = 8;
  v30 = 1;
  v31 = -1;
  v32 = -1;
  v33 = 8;
  v34 = 1;
  v35 = -1;
  v36 = -1;
  v37 = 8;
  v38 = 1;
  v39 = -1;
  v40 = -1;
  v41 = 8;
  v42 = 1;
  v43 = -1;
  v44 = -1;
  v45 = 8;
  v46 = 1;
  v47 = -1;
  v48 = -1;
  v49 = 8;
  v50 = 1;
  v51 = -1;
  v52 = -1;
  v53 = 8;
  v54 = 1;
  v55 = -1;
  v56 = -1;
  v57 = 8;
  v58 = 1;
  v59 = -1;
  v60 = -1;
  v61 = 8;
  v62 = 1;
  v63 = -1;
  v64 = -1;
  v65 = 8;
  v66 = 1;
  v67 = -1;
  v68 = -1;
  v69 = 8;
  v70 = 1;
  v71 = -1;
  v72 = -1;
  v73 = 8;
  v74 = 1;
  v75 = -1;
  v76 = -1;
  v77 = 8;
  v78 = 1;
  v79 = -1;
  v80 = -1;
  v81 = 8;
  v82 = 1;
  v83 = -1;
  v84 = -1;
  v85 = 8;
  v86 = 1;
  v87 = -1;
  v88 = -1;
  v89 = 8;
  v90 = 1;
  v91 = -1;
  v92 = -1;
  v93 = 8;
  v94 = 1;
  v95 = -1;
  v96 = -1;
  v97 = 8;
  v98 = 1;
  v99 = -1;
  v100 = -1;
  v101 = 8;
  v102 = 1;
  v103 = -1;
  v104 = -1;
  v105 = 8;
  v106 = 1;
  v107 = -1;
  v108 = -1;
  v109 = 8;
  v110 = 1;
  v111 = -1;
  v112 = -1;
  v113 = 8;
  v114 = 1;
  v115 = -1;
  v116 = -1;
  v117 = 8;
  v118 = 1;
  v119 = -1;
  v120 = -1;
  v121 = 8;
  v122 = 1;
  v123 = -1;
  v124 = -1;
  v125 = 8;
  result = sub_223D460AC(a4, a2, 0, &v126, *(_DWORD *)(v8 + 64), (uint64_t)v20);
  if (a2 && (_DWORD)result != 3)
  {
    v12 = (a2 - 1);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(a1 + 184);
      if ((*(_DWORD *)(v13 + 4488 * v7 + 24) & 0x80000000) == 0)
      {
        result = sub_223D45BE8(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 28) & 0x80000000) == 0)
      {
        result = sub_223D45BE8(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 32) & 0x80000000) == 0)
      {
        result = sub_223D45BE8(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 36) & 0x80000000) == 0)
      {
        result = sub_223D45BE8(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 40) & 0x80000000) == 0)
      {
        result = sub_223D45BE8(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 44) & 0x80000000) == 0)
      {
        result = sub_223D45BE8(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 48) & 0x80000000) == 0)
      {
        result = sub_223D45BE8(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 52) & 0x80000000) == 0)
        return sub_223D45BE8(a1, v12);
    }
    else
    {
      for (i = 0; i != 8; ++i)
      {
        v15 = byte_22466FA9C[i];
        v16 = *(_QWORD *)(a1 + 184);
        v17 = *(_DWORD *)(v16 + 4488 * v7 + 4 * v15 + 24);
        if ((v17 & 0x80000000) == 0)
        {
          v18 = (v128 - v126.i32[0]) >> 1;
          v19 = vdup_n_s32(v18);
          *(int32x2_t *)v20 = vmla_s32(v126, v19, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v15), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
          *(_DWORD *)&v20[8] = v127 + v18 * (v15 & 1);
          v21 = vadd_s32(*(int32x2_t *)v20, v19);
          v22 = *(_DWORD *)&v20[8] + v18;
          result = sub_223D460AC(a4, 0, v17, (int32x2_t *)v20, v17 >> 30 == 0, v16 + 4488 * v7 + 540 * v15 + 68);
        }
      }
    }
  }
  return result;
}

uint64_t sub_223D460AC(uint64_t a1, int a2, unsigned int a3, int32x2_t *a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[5];
  char v15;
  uint64_t v16;
  int v17;

  if (!a5)
    return 3;
  if (a2)
    return 2;
  v9 = *(uint64_t **)(a1 + 8);
  v15 = 1;
  v10 = *v9;
  v11 = a3;
  v12 = *(_QWORD *)(*v9 + 2328);
  if (a3 >= (unint64_t)((*(_QWORD *)(*v9 + 2336) - v12) >> 11))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v12 = *(_QWORD *)(v10 + 2328);
  }
  v14[0] = v10;
  v14[1] = v12 + (v11 << 11);
  v14[2] = a6;
  v14[3] = (uint64_t)&v15;
  v14[4] = v9[1];
  v16 = 0;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0);
  v16 = 1;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 1u);
  v16 = 2;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 2u);
  v16 = 3;
  v17 = 0;
  v6 = 3;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 3u);
  v16 = 4;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 4u);
  v16 = 5;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 5u);
  v16 = 6;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 6u);
  v16 = 7;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 7u);
  v16 = 0x100000000;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 8u);
  v16 = 0x100000001;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 9u);
  v16 = 0x100000002;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0xAu);
  v16 = 0x100000003;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0xBu);
  v16 = 0x100000004;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0xCu);
  v16 = 0x100000005;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0xDu);
  v16 = 0x100000006;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0xEu);
  v16 = 0x100000007;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0xFu);
  v16 = 0x200000000;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x10u);
  v16 = 0x200000001;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x11u);
  v16 = 0x200000002;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x12u);
  v16 = 0x200000003;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x13u);
  v16 = 0x200000004;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x14u);
  v16 = 0x200000005;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x15u);
  v16 = 0x200000006;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x16u);
  v16 = 0x200000007;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x17u);
  v16 = 0x300000000;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x18u);
  v16 = 0x300000001;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x19u);
  v16 = 0x300000002;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x1Au);
  v16 = 0x300000003;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x1Bu);
  v16 = 0x300000004;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x1Cu);
  v16 = 0x300000005;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x1Du);
  v16 = 0x300000006;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x1Eu);
  v16 = 0x300000007;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x1Fu);
  v16 = 0x400000000;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x20u);
  v16 = 0x400000001;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x21u);
  v16 = 0x400000002;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x22u);
  v16 = 0x400000003;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x23u);
  v16 = 0x400000004;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x24u);
  v16 = 0x400000005;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x25u);
  v16 = 0x400000006;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x26u);
  v16 = 0x400000007;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x27u);
  v16 = 0x500000000;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x28u);
  v16 = 0x500000001;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x29u);
  v16 = 0x500000002;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x2Au);
  v16 = 0x500000003;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x2Bu);
  v16 = 0x500000004;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x2Cu);
  v16 = 0x500000005;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x2Du);
  v16 = 0x500000006;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x2Eu);
  v16 = 0x500000007;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x2Fu);
  v16 = 0x600000000;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x30u);
  v16 = 0x600000001;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x31u);
  v16 = 0x600000002;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x32u);
  v16 = 0x600000003;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x33u);
  v16 = 0x600000004;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x34u);
  v16 = 0x600000005;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x35u);
  v16 = 0x600000006;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x36u);
  v16 = 0x600000007;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x37u);
  v16 = 0x700000000;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x38u);
  v16 = 0x700000001;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x39u);
  v16 = 0x700000002;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x3Au);
  v16 = 0x700000003;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x3Bu);
  v16 = 0x700000004;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x3Cu);
  v16 = 0x700000005;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x3Du);
  v16 = 0x700000006;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x3Eu);
  v16 = 0x700000007;
  v17 = 0;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x3Fu);
  v16 = 0;
  v17 = 1;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x40u);
  v16 = 1;
  v17 = 1;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x41u);
  v16 = 2;
  v17 = 1;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x42u);
  v16 = 3;
  v17 = 1;
  sub_223D46AF0(v14, a4, (int32x2_t *)&v16, 0x43u);
  sub_223D46CBC(v14, a4);
  return v6;
}

void sub_223D46AF0(uint64_t *a1, int32x2_t *a2, int32x2_t *a3, unsigned int a4)
{
  int32x2_t v6;
  int32x2_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  int32x2_t v17;
  __int32 v18;
  int32x2_t **v19;
  unint64_t v20;
  int32x2_t *v21;
  int32x2_t *v22;
  int32x2_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int32x2_t *v29;
  int32x2_t v30;
  __int32 v31;

  v6 = *a2;
  v7 = *a3;
  v8 = a2[1].i32[0];
  v9 = a3[1].i32[0];
  v10 = *a1;
  v11 = a1[1];
  if (a4 >= 0x200
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 499, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v12 = *(unsigned int *)(v11 + 4 * a4);
  if (v12 >> 30)
    v13 = 1;
  else
    v13 = (_DWORD)v12 == *(_DWORD *)(v10 + 272);
  if (!v13)
  {
    v14 = (_QWORD *)a1[4];
    v15 = v12 & 0xFFFFFFFFCFFFFFFFLL;
    v16 = v14[1];
    if (*(_QWORD *)(*(_QWORD *)(*v14 + 2448) + 520 * v15 + 312) > **(_QWORD **)v16)
    {
      v17 = vadd_s32(v7, v6);
      v18 = v9 + v8;
      v19 = *(int32x2_t ***)(v16 + 8);
      v21 = v19[1];
      v20 = (unint64_t)v19[2];
      if ((unint64_t)v21 >= v20)
      {
        v23 = *v19;
        v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)*v19) >> 2);
        v25 = v24 + 1;
        if (v24 + 1 > 0x1555555555555555)
          sub_22316E078();
        v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v23) >> 2);
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0xAAAAAAAAAAAAAAALL)
          v27 = 0x1555555555555555;
        else
          v27 = v25;
        if (v27)
        {
          if (v27 > 0x1555555555555555)
            sub_223174E94();
          v28 = (char *)operator new(12 * v27);
        }
        else
        {
          v28 = 0;
        }
        v29 = (int32x2_t *)&v28[12 * v24];
        *v29 = v17;
        v29[1].i32[0] = v18;
        v22 = (int32x2_t *)((char *)v29 + 12);
        if (v21 != v23)
        {
          do
          {
            v30 = *(int32x2_t *)((char *)v21 - 12);
            v21 = (int32x2_t *)((char *)v21 - 12);
            v31 = v21[1].i32[0];
            *(int32x2_t *)((char *)v29 - 12) = v30;
            v29 = (int32x2_t *)((char *)v29 - 12);
            v29[1].i32[0] = v31;
          }
          while (v21 != v23);
          v21 = *v19;
        }
        *v19 = v29;
        v19[1] = v22;
        v19[2] = (int32x2_t *)&v28[12 * v27];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v21 = v17;
        v21[1].i32[0] = v18;
        v22 = (int32x2_t *)((char *)v21 + 12);
      }
      v19[1] = v22;
    }
  }
}

void sub_223D46CBC(uint64_t *a1, int32x2_t *a2)
{
  uint64_t v4;
  int v5;

  v4 = 4;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x44u);
  v4 = 5;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x45u);
  v4 = 6;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x46u);
  v4 = 7;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x47u);
  v4 = 0x100000000;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x48u);
  v4 = 0x100000001;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x49u);
  v4 = 0x100000002;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x4Au);
  v4 = 0x100000003;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x4Bu);
  v4 = 0x100000004;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x4Cu);
  v4 = 0x100000005;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x4Du);
  v4 = 0x100000006;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x4Eu);
  v4 = 0x100000007;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x4Fu);
  v4 = 0x200000000;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x50u);
  v4 = 0x200000001;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x51u);
  v4 = 0x200000002;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x52u);
  v4 = 0x200000003;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x53u);
  v4 = 0x200000004;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x54u);
  v4 = 0x200000005;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x55u);
  v4 = 0x200000006;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x56u);
  v4 = 0x200000007;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x57u);
  v4 = 0x300000000;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x58u);
  v4 = 0x300000001;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x59u);
  v4 = 0x300000002;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x5Au);
  v4 = 0x300000003;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x5Bu);
  v4 = 0x300000004;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x5Cu);
  v4 = 0x300000005;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x5Du);
  v4 = 0x300000006;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x5Eu);
  v4 = 0x300000007;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x5Fu);
  v4 = 0x400000000;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x60u);
  v4 = 0x400000001;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x61u);
  v4 = 0x400000002;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x62u);
  v4 = 0x400000003;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x63u);
  v4 = 0x400000004;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x64u);
  v4 = 0x400000005;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x65u);
  v4 = 0x400000006;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x66u);
  v4 = 0x400000007;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x67u);
  v4 = 0x500000000;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x68u);
  v4 = 0x500000001;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x69u);
  v4 = 0x500000002;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x6Au);
  v4 = 0x500000003;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x6Bu);
  v4 = 0x500000004;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x6Cu);
  v4 = 0x500000005;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x6Du);
  v4 = 0x500000006;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x6Eu);
  v4 = 0x500000007;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x6Fu);
  v4 = 0x600000000;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x70u);
  v4 = 0x600000001;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x71u);
  v4 = 0x600000002;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x72u);
  v4 = 0x600000003;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x73u);
  v4 = 0x600000004;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x74u);
  v4 = 0x600000005;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x75u);
  v4 = 0x600000006;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x76u);
  v4 = 0x600000007;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x77u);
  v4 = 0x700000000;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x78u);
  v4 = 0x700000001;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x79u);
  v4 = 0x700000002;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x7Au);
  v4 = 0x700000003;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x7Bu);
  v4 = 0x700000004;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x7Cu);
  v4 = 0x700000005;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x7Du);
  v4 = 0x700000006;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x7Eu);
  v4 = 0x700000007;
  v5 = 1;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x7Fu);
  v4 = 0;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x80u);
  v4 = 1;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x81u);
  v4 = 2;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x82u);
  v4 = 3;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x83u);
  v4 = 4;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x84u);
  v4 = 5;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x85u);
  v4 = 6;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x86u);
  v4 = 7;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x87u);
  v4 = 0x100000000;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x88u);
  v4 = 0x100000001;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x89u);
  v4 = 0x100000002;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x8Au);
  v4 = 0x100000003;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x8Bu);
  v4 = 0x100000004;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x8Cu);
  v4 = 0x100000005;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x8Du);
  v4 = 0x100000006;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x8Eu);
  v4 = 0x100000007;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x8Fu);
  v4 = 0x200000000;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x90u);
  v4 = 0x200000001;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x91u);
  v4 = 0x200000002;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x92u);
  v4 = 0x200000003;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x93u);
  v4 = 0x200000004;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x94u);
  v4 = 0x200000005;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x95u);
  v4 = 0x200000006;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x96u);
  v4 = 0x200000007;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x97u);
  v4 = 0x300000000;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x98u);
  v4 = 0x300000001;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x99u);
  v4 = 0x300000002;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x9Au);
  v4 = 0x300000003;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x9Bu);
  v4 = 0x300000004;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x9Cu);
  v4 = 0x300000005;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x9Du);
  v4 = 0x300000006;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x9Eu);
  v4 = 0x300000007;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x9Fu);
  v4 = 0x400000000;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xA0u);
  v4 = 0x400000001;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xA1u);
  v4 = 0x400000002;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xA2u);
  v4 = 0x400000003;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xA3u);
  v4 = 0x400000004;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xA4u);
  v4 = 0x400000005;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xA5u);
  v4 = 0x400000006;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xA6u);
  v4 = 0x400000007;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xA7u);
  v4 = 0x500000000;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xA8u);
  v4 = 0x500000001;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xA9u);
  v4 = 0x500000002;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xAAu);
  v4 = 0x500000003;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xABu);
  v4 = 0x500000004;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xACu);
  v4 = 0x500000005;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xADu);
  v4 = 0x500000006;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xAEu);
  v4 = 0x500000007;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xAFu);
  v4 = 0x600000000;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xB0u);
  v4 = 0x600000001;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xB1u);
  v4 = 0x600000002;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xB2u);
  v4 = 0x600000003;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xB3u);
  v4 = 0x600000004;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xB4u);
  v4 = 0x600000005;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xB5u);
  v4 = 0x600000006;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xB6u);
  v4 = 0x600000007;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xB7u);
  v4 = 0x700000000;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xB8u);
  v4 = 0x700000001;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xB9u);
  v4 = 0x700000002;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xBAu);
  v4 = 0x700000003;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xBBu);
  v4 = 0x700000004;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xBCu);
  v4 = 0x700000005;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xBDu);
  v4 = 0x700000006;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xBEu);
  v4 = 0x700000007;
  v5 = 2;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xBFu);
  v4 = 0;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xC0u);
  v4 = 1;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xC1u);
  v4 = 2;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xC2u);
  v4 = 3;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xC3u);
  v4 = 4;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xC4u);
  v4 = 5;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xC5u);
  v4 = 6;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xC6u);
  v4 = 7;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xC7u);
  v4 = 0x100000000;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xC8u);
  v4 = 0x100000001;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xC9u);
  v4 = 0x100000002;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xCAu);
  v4 = 0x100000003;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xCBu);
  v4 = 0x100000004;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xCCu);
  v4 = 0x100000005;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xCDu);
  v4 = 0x100000006;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xCEu);
  v4 = 0x100000007;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xCFu);
  v4 = 0x200000000;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xD0u);
  v4 = 0x200000001;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xD1u);
  v4 = 0x200000002;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xD2u);
  v4 = 0x200000003;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xD3u);
  v4 = 0x200000004;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xD4u);
  v4 = 0x200000005;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xD5u);
  v4 = 0x200000006;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xD6u);
  v4 = 0x200000007;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xD7u);
  v4 = 0x300000000;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xD8u);
  v4 = 0x300000001;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xD9u);
  v4 = 0x300000002;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xDAu);
  v4 = 0x300000003;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xDBu);
  v4 = 0x300000004;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xDCu);
  v4 = 0x300000005;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xDDu);
  v4 = 0x300000006;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xDEu);
  v4 = 0x300000007;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xDFu);
  v4 = 0x400000000;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xE0u);
  v4 = 0x400000001;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xE1u);
  v4 = 0x400000002;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xE2u);
  v4 = 0x400000003;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xE3u);
  v4 = 0x400000004;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xE4u);
  v4 = 0x400000005;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xE5u);
  v4 = 0x400000006;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xE6u);
  v4 = 0x400000007;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xE7u);
  v4 = 0x500000000;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xE8u);
  v4 = 0x500000001;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xE9u);
  v4 = 0x500000002;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xEAu);
  v4 = 0x500000003;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xEBu);
  v4 = 0x500000004;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xECu);
  v4 = 0x500000005;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xEDu);
  v4 = 0x500000006;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xEEu);
  v4 = 0x500000007;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xEFu);
  v4 = 0x600000000;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xF0u);
  v4 = 0x600000001;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xF1u);
  v4 = 0x600000002;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xF2u);
  v4 = 0x600000003;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xF3u);
  v4 = 0x600000004;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xF4u);
  v4 = 0x600000005;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xF5u);
  v4 = 0x600000006;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xF6u);
  v4 = 0x600000007;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xF7u);
  v4 = 0x700000000;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xF8u);
  v4 = 0x700000001;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xF9u);
  v4 = 0x700000002;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xFAu);
  v4 = 0x700000003;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xFBu);
  v4 = 0x700000004;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xFCu);
  v4 = 0x700000005;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xFDu);
  v4 = 0x700000006;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xFEu);
  v4 = 0x700000007;
  v5 = 3;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0xFFu);
  v4 = 0;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x100u);
  v4 = 1;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x101u);
  v4 = 2;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x102u);
  v4 = 3;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x103u);
  v4 = 4;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x104u);
  v4 = 5;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x105u);
  v4 = 6;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x106u);
  v4 = 7;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x107u);
  v4 = 0x100000000;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x108u);
  v4 = 0x100000001;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x109u);
  v4 = 0x100000002;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x10Au);
  v4 = 0x100000003;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x10Bu);
  v4 = 0x100000004;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x10Cu);
  v4 = 0x100000005;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x10Du);
  v4 = 0x100000006;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x10Eu);
  v4 = 0x100000007;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x10Fu);
  v4 = 0x200000000;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x110u);
  v4 = 0x200000001;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x111u);
  v4 = 0x200000002;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x112u);
  v4 = 0x200000003;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x113u);
  v4 = 0x200000004;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x114u);
  v4 = 0x200000005;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x115u);
  v4 = 0x200000006;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x116u);
  v4 = 0x200000007;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x117u);
  v4 = 0x300000000;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x118u);
  v4 = 0x300000001;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x119u);
  v4 = 0x300000002;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x11Au);
  v4 = 0x300000003;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x11Bu);
  v4 = 0x300000004;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x11Cu);
  v4 = 0x300000005;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x11Du);
  v4 = 0x300000006;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x11Eu);
  v4 = 0x300000007;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x11Fu);
  v4 = 0x400000000;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x120u);
  v4 = 0x400000001;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x121u);
  sub_223D48A38(a1, a2);
}

void sub_223D48A38(uint64_t *a1, int32x2_t *a2)
{
  uint64_t v4;
  int v5;

  v4 = 0x400000002;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x122u);
  v4 = 0x400000003;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x123u);
  v4 = 0x400000004;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x124u);
  v4 = 0x400000005;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x125u);
  v4 = 0x400000006;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x126u);
  v4 = 0x400000007;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x127u);
  v4 = 0x500000000;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x128u);
  v4 = 0x500000001;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x129u);
  v4 = 0x500000002;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x12Au);
  v4 = 0x500000003;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x12Bu);
  v4 = 0x500000004;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x12Cu);
  v4 = 0x500000005;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x12Du);
  v4 = 0x500000006;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x12Eu);
  v4 = 0x500000007;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x12Fu);
  v4 = 0x600000000;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x130u);
  v4 = 0x600000001;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x131u);
  v4 = 0x600000002;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x132u);
  v4 = 0x600000003;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x133u);
  v4 = 0x600000004;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x134u);
  v4 = 0x600000005;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x135u);
  v4 = 0x600000006;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x136u);
  v4 = 0x600000007;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x137u);
  v4 = 0x700000000;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x138u);
  v4 = 0x700000001;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x139u);
  v4 = 0x700000002;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x13Au);
  v4 = 0x700000003;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x13Bu);
  v4 = 0x700000004;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x13Cu);
  v4 = 0x700000005;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x13Du);
  v4 = 0x700000006;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x13Eu);
  v4 = 0x700000007;
  v5 = 4;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x13Fu);
  v4 = 0;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x140u);
  v4 = 1;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x141u);
  v4 = 2;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x142u);
  v4 = 3;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x143u);
  v4 = 4;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x144u);
  v4 = 5;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x145u);
  v4 = 6;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x146u);
  v4 = 7;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x147u);
  v4 = 0x100000000;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x148u);
  v4 = 0x100000001;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x149u);
  v4 = 0x100000002;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x14Au);
  v4 = 0x100000003;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x14Bu);
  v4 = 0x100000004;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x14Cu);
  v4 = 0x100000005;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x14Du);
  v4 = 0x100000006;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x14Eu);
  v4 = 0x100000007;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x14Fu);
  v4 = 0x200000000;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x150u);
  v4 = 0x200000001;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x151u);
  v4 = 0x200000002;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x152u);
  v4 = 0x200000003;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x153u);
  v4 = 0x200000004;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x154u);
  v4 = 0x200000005;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x155u);
  v4 = 0x200000006;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x156u);
  v4 = 0x200000007;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x157u);
  v4 = 0x300000000;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x158u);
  v4 = 0x300000001;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x159u);
  v4 = 0x300000002;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x15Au);
  v4 = 0x300000003;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x15Bu);
  v4 = 0x300000004;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x15Cu);
  v4 = 0x300000005;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x15Du);
  v4 = 0x300000006;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x15Eu);
  v4 = 0x300000007;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x15Fu);
  v4 = 0x400000000;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x160u);
  v4 = 0x400000001;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x161u);
  v4 = 0x400000002;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x162u);
  v4 = 0x400000003;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x163u);
  v4 = 0x400000004;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x164u);
  v4 = 0x400000005;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x165u);
  v4 = 0x400000006;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x166u);
  v4 = 0x400000007;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x167u);
  v4 = 0x500000000;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x168u);
  v4 = 0x500000001;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x169u);
  v4 = 0x500000002;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x16Au);
  v4 = 0x500000003;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x16Bu);
  v4 = 0x500000004;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x16Cu);
  v4 = 0x500000005;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x16Du);
  v4 = 0x500000006;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x16Eu);
  v4 = 0x500000007;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x16Fu);
  v4 = 0x600000000;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x170u);
  v4 = 0x600000001;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x171u);
  v4 = 0x600000002;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x172u);
  v4 = 0x600000003;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x173u);
  v4 = 0x600000004;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x174u);
  v4 = 0x600000005;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x175u);
  v4 = 0x600000006;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x176u);
  v4 = 0x600000007;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x177u);
  v4 = 0x700000000;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x178u);
  v4 = 0x700000001;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x179u);
  v4 = 0x700000002;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x17Au);
  v4 = 0x700000003;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x17Bu);
  v4 = 0x700000004;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x17Cu);
  v4 = 0x700000005;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x17Du);
  v4 = 0x700000006;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x17Eu);
  v4 = 0x700000007;
  v5 = 5;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x17Fu);
  v4 = 0;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x180u);
  v4 = 1;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x181u);
  v4 = 2;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x182u);
  v4 = 3;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x183u);
  v4 = 4;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x184u);
  v4 = 5;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x185u);
  v4 = 6;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x186u);
  v4 = 7;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x187u);
  v4 = 0x100000000;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x188u);
  v4 = 0x100000001;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x189u);
  v4 = 0x100000002;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x18Au);
  v4 = 0x100000003;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x18Bu);
  v4 = 0x100000004;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x18Cu);
  v4 = 0x100000005;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x18Du);
  v4 = 0x100000006;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x18Eu);
  v4 = 0x100000007;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x18Fu);
  v4 = 0x200000000;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x190u);
  v4 = 0x200000001;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x191u);
  v4 = 0x200000002;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x192u);
  v4 = 0x200000003;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x193u);
  v4 = 0x200000004;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x194u);
  v4 = 0x200000005;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x195u);
  v4 = 0x200000006;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x196u);
  v4 = 0x200000007;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x197u);
  v4 = 0x300000000;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x198u);
  v4 = 0x300000001;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x199u);
  v4 = 0x300000002;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x19Au);
  v4 = 0x300000003;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x19Bu);
  v4 = 0x300000004;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x19Cu);
  v4 = 0x300000005;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x19Du);
  v4 = 0x300000006;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x19Eu);
  v4 = 0x300000007;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x19Fu);
  v4 = 0x400000000;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1A0u);
  v4 = 0x400000001;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1A1u);
  v4 = 0x400000002;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1A2u);
  v4 = 0x400000003;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1A3u);
  v4 = 0x400000004;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1A4u);
  v4 = 0x400000005;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1A5u);
  v4 = 0x400000006;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1A6u);
  v4 = 0x400000007;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1A7u);
  v4 = 0x500000000;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1A8u);
  v4 = 0x500000001;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1A9u);
  v4 = 0x500000002;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1AAu);
  v4 = 0x500000003;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1ABu);
  v4 = 0x500000004;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1ACu);
  v4 = 0x500000005;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1ADu);
  v4 = 0x500000006;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1AEu);
  v4 = 0x500000007;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1AFu);
  v4 = 0x600000000;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1B0u);
  v4 = 0x600000001;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1B1u);
  v4 = 0x600000002;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1B2u);
  v4 = 0x600000003;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1B3u);
  v4 = 0x600000004;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1B4u);
  v4 = 0x600000005;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1B5u);
  v4 = 0x600000006;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1B6u);
  v4 = 0x600000007;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1B7u);
  v4 = 0x700000000;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1B8u);
  v4 = 0x700000001;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1B9u);
  v4 = 0x700000002;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1BAu);
  v4 = 0x700000003;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1BBu);
  v4 = 0x700000004;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1BCu);
  v4 = 0x700000005;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1BDu);
  v4 = 0x700000006;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1BEu);
  v4 = 0x700000007;
  v5 = 6;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1BFu);
  v4 = 0;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1C0u);
  v4 = 1;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1C1u);
  v4 = 2;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1C2u);
  v4 = 3;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1C3u);
  v4 = 4;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1C4u);
  v4 = 5;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1C5u);
  v4 = 6;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1C6u);
  v4 = 7;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1C7u);
  v4 = 0x100000000;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1C8u);
  v4 = 0x100000001;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1C9u);
  v4 = 0x100000002;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1CAu);
  v4 = 0x100000003;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1CBu);
  v4 = 0x100000004;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1CCu);
  v4 = 0x100000005;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1CDu);
  v4 = 0x100000006;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1CEu);
  v4 = 0x100000007;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1CFu);
  v4 = 0x200000000;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1D0u);
  v4 = 0x200000001;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1D1u);
  v4 = 0x200000002;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1D2u);
  v4 = 0x200000003;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1D3u);
  v4 = 0x200000004;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1D4u);
  v4 = 0x200000005;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1D5u);
  v4 = 0x200000006;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1D6u);
  v4 = 0x200000007;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1D7u);
  v4 = 0x300000000;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1D8u);
  v4 = 0x300000001;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1D9u);
  v4 = 0x300000002;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1DAu);
  v4 = 0x300000003;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1DBu);
  v4 = 0x300000004;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1DCu);
  v4 = 0x300000005;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1DDu);
  v4 = 0x300000006;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1DEu);
  v4 = 0x300000007;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1DFu);
  v4 = 0x400000000;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1E0u);
  v4 = 0x400000001;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1E1u);
  v4 = 0x400000002;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1E2u);
  v4 = 0x400000003;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1E3u);
  v4 = 0x400000004;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1E4u);
  v4 = 0x400000005;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1E5u);
  v4 = 0x400000006;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1E6u);
  v4 = 0x400000007;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1E7u);
  v4 = 0x500000000;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1E8u);
  v4 = 0x500000001;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1E9u);
  v4 = 0x500000002;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1EAu);
  v4 = 0x500000003;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1EBu);
  v4 = 0x500000004;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1ECu);
  v4 = 0x500000005;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1EDu);
  v4 = 0x500000006;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1EEu);
  v4 = 0x500000007;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1EFu);
  v4 = 0x600000000;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1F0u);
  v4 = 0x600000001;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1F1u);
  v4 = 0x600000002;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1F2u);
  v4 = 0x600000003;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1F3u);
  v4 = 0x600000004;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1F4u);
  v4 = 0x600000005;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1F5u);
  v4 = 0x600000006;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1F6u);
  v4 = 0x600000007;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1F7u);
  v4 = 0x700000000;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1F8u);
  v4 = 0x700000001;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1F9u);
  v4 = 0x700000002;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1FAu);
  v4 = 0x700000003;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1FBu);
  v4 = 0x700000004;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1FCu);
  v4 = 0x700000005;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1FDu);
  v4 = 0x700000006;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1FEu);
  v4 = 0x700000007;
  v5 = 7;
  sub_223D46AF0(a1, a2, (int32x2_t *)&v4, 0x1FFu);
}

uint64_t sub_223D4A7AC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int32x2_t v19;
  _BYTE v20[12];
  int32x2_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  char v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  char v54;
  uint64_t v55;
  int v56;
  char v57;
  char v58;
  uint64_t v59;
  int v60;
  char v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  char v66;
  uint64_t v67;
  int v68;
  char v69;
  char v70;
  uint64_t v71;
  int v72;
  char v73;
  char v74;
  int v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  char v82;
  int v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  int v88;
  char v89;
  char v90;
  int v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  int v96;
  char v97;
  char v98;
  int v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  int v104;
  char v105;
  char v106;
  int v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  int v115;
  uint64_t v116;
  char v117;
  char v118;
  uint64_t v119;
  int v120;
  char v121;
  char v122;
  int v123;
  uint64_t v124;
  char v125;
  int32x2_t v126;
  int v127;
  uint64_t v128;
  int v129;

  v7 = a3 & 0xCFFFFFFF;
  v8 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v9 = *(int32x2_t *)v8;
  v127 = *(_DWORD *)(v8 + 8);
  v126 = v9;
  v10 = *(_QWORD *)(v8 + 12);
  v129 = *(_DWORD *)(v8 + 20);
  v128 = v10;
  v20[0] = 1;
  *(_QWORD *)&v20[4] = -1;
  v21.i32[0] = -1;
  v21.i8[4] = 8;
  LOBYTE(v22) = 1;
  v23 = -1;
  v24 = -1;
  v25 = 8;
  v26 = 1;
  v27 = -1;
  v28 = -1;
  v29 = 8;
  v30 = 1;
  v31 = -1;
  v32 = -1;
  v33 = 8;
  v34 = 1;
  v35 = -1;
  v36 = -1;
  v37 = 8;
  v38 = 1;
  v39 = -1;
  v40 = -1;
  v41 = 8;
  v42 = 1;
  v43 = -1;
  v44 = -1;
  v45 = 8;
  v46 = 1;
  v47 = -1;
  v48 = -1;
  v49 = 8;
  v50 = 1;
  v51 = -1;
  v52 = -1;
  v53 = 8;
  v54 = 1;
  v55 = -1;
  v56 = -1;
  v57 = 8;
  v58 = 1;
  v59 = -1;
  v60 = -1;
  v61 = 8;
  v62 = 1;
  v63 = -1;
  v64 = -1;
  v65 = 8;
  v66 = 1;
  v67 = -1;
  v68 = -1;
  v69 = 8;
  v70 = 1;
  v71 = -1;
  v72 = -1;
  v73 = 8;
  v74 = 1;
  v75 = -1;
  v76 = -1;
  v77 = 8;
  v78 = 1;
  v79 = -1;
  v80 = -1;
  v81 = 8;
  v82 = 1;
  v83 = -1;
  v84 = -1;
  v85 = 8;
  v86 = 1;
  v87 = -1;
  v88 = -1;
  v89 = 8;
  v90 = 1;
  v91 = -1;
  v92 = -1;
  v93 = 8;
  v94 = 1;
  v95 = -1;
  v96 = -1;
  v97 = 8;
  v98 = 1;
  v99 = -1;
  v100 = -1;
  v101 = 8;
  v102 = 1;
  v103 = -1;
  v104 = -1;
  v105 = 8;
  v106 = 1;
  v107 = -1;
  v108 = -1;
  v109 = 8;
  v110 = 1;
  v111 = -1;
  v112 = -1;
  v113 = 8;
  v114 = 1;
  v115 = -1;
  v116 = -1;
  v117 = 8;
  v118 = 1;
  v119 = -1;
  v120 = -1;
  v121 = 8;
  v122 = 1;
  v123 = -1;
  v124 = -1;
  v125 = 8;
  result = sub_223D4AC70(a4, a2, 0, &v126, *(_DWORD *)(v8 + 64), (uint64_t)v20);
  if (a2 && (_DWORD)result != 3)
  {
    v12 = (a2 - 1);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(a1 + 184);
      if ((*(_DWORD *)(v13 + 4488 * v7 + 24) & 0x80000000) == 0)
      {
        result = sub_223D4A7AC(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 28) & 0x80000000) == 0)
      {
        result = sub_223D4A7AC(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 32) & 0x80000000) == 0)
      {
        result = sub_223D4A7AC(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 36) & 0x80000000) == 0)
      {
        result = sub_223D4A7AC(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 40) & 0x80000000) == 0)
      {
        result = sub_223D4A7AC(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 44) & 0x80000000) == 0)
      {
        result = sub_223D4A7AC(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 48) & 0x80000000) == 0)
      {
        result = sub_223D4A7AC(a1, v12);
        v13 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v13 + 4488 * v7 + 52) & 0x80000000) == 0)
        return sub_223D4A7AC(a1, v12);
    }
    else
    {
      for (i = 0; i != 8; ++i)
      {
        v15 = byte_22466FA9C[i];
        v16 = *(_QWORD *)(a1 + 184);
        v17 = *(_DWORD *)(v16 + 4488 * v7 + 4 * v15 + 24);
        if ((v17 & 0x80000000) == 0)
        {
          v18 = (v128 - v126.i32[0]) >> 1;
          v19 = vdup_n_s32(v18);
          *(int32x2_t *)v20 = vmla_s32(v126, v19, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v15), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
          *(_DWORD *)&v20[8] = v127 + v18 * (v15 & 1);
          v21 = vadd_s32(*(int32x2_t *)v20, v19);
          v22 = *(_DWORD *)&v20[8] + v18;
          result = sub_223D4AC70(a4, 0, v17, (int32x2_t *)v20, v17 >> 30 == 0, v16 + 4488 * v7 + 540 * v15 + 68);
        }
      }
    }
  }
  return result;
}

uint64_t sub_223D4AC70(uint64_t a1, int a2, unsigned int a3, int32x2_t *a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[5];
  char v15;
  uint64_t v16;
  int v17;

  if (!a5)
    return 3;
  if (a2)
    return 2;
  v9 = *(uint64_t **)(a1 + 8);
  v15 = 1;
  v10 = *v9;
  v11 = a3;
  v12 = *(_QWORD *)(*v9 + 2328);
  if (a3 >= (unint64_t)((*(_QWORD *)(*v9 + 2336) - v12) >> 11))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v12 = *(_QWORD *)(v10 + 2328);
  }
  v14[0] = v10;
  v14[1] = v12 + (v11 << 11);
  v14[2] = a6;
  v14[3] = (uint64_t)&v15;
  v14[4] = v9[1];
  v16 = 0;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0);
  v16 = 1;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 1u);
  v16 = 2;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 2u);
  v16 = 3;
  v17 = 0;
  v6 = 3;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 3u);
  v16 = 4;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 4u);
  v16 = 5;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 5u);
  v16 = 6;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 6u);
  v16 = 7;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 7u);
  v16 = 0x100000000;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 8u);
  v16 = 0x100000001;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 9u);
  v16 = 0x100000002;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0xAu);
  v16 = 0x100000003;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0xBu);
  v16 = 0x100000004;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0xCu);
  v16 = 0x100000005;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0xDu);
  v16 = 0x100000006;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0xEu);
  v16 = 0x100000007;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0xFu);
  v16 = 0x200000000;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x10u);
  v16 = 0x200000001;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x11u);
  v16 = 0x200000002;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x12u);
  v16 = 0x200000003;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x13u);
  v16 = 0x200000004;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x14u);
  v16 = 0x200000005;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x15u);
  v16 = 0x200000006;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x16u);
  v16 = 0x200000007;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x17u);
  v16 = 0x300000000;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x18u);
  v16 = 0x300000001;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x19u);
  v16 = 0x300000002;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x1Au);
  v16 = 0x300000003;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x1Bu);
  v16 = 0x300000004;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x1Cu);
  v16 = 0x300000005;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x1Du);
  v16 = 0x300000006;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x1Eu);
  v16 = 0x300000007;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x1Fu);
  v16 = 0x400000000;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x20u);
  v16 = 0x400000001;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x21u);
  v16 = 0x400000002;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x22u);
  v16 = 0x400000003;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x23u);
  v16 = 0x400000004;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x24u);
  v16 = 0x400000005;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x25u);
  v16 = 0x400000006;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x26u);
  v16 = 0x400000007;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x27u);
  v16 = 0x500000000;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x28u);
  v16 = 0x500000001;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x29u);
  v16 = 0x500000002;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x2Au);
  v16 = 0x500000003;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x2Bu);
  v16 = 0x500000004;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x2Cu);
  v16 = 0x500000005;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x2Du);
  v16 = 0x500000006;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x2Eu);
  v16 = 0x500000007;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x2Fu);
  v16 = 0x600000000;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x30u);
  v16 = 0x600000001;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x31u);
  v16 = 0x600000002;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x32u);
  v16 = 0x600000003;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x33u);
  v16 = 0x600000004;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x34u);
  v16 = 0x600000005;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x35u);
  v16 = 0x600000006;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x36u);
  v16 = 0x600000007;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x37u);
  v16 = 0x700000000;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x38u);
  v16 = 0x700000001;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x39u);
  v16 = 0x700000002;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x3Au);
  v16 = 0x700000003;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x3Bu);
  v16 = 0x700000004;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x3Cu);
  v16 = 0x700000005;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x3Du);
  v16 = 0x700000006;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x3Eu);
  v16 = 0x700000007;
  v17 = 0;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x3Fu);
  v16 = 0;
  v17 = 1;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x40u);
  v16 = 1;
  v17 = 1;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x41u);
  v16 = 2;
  v17 = 1;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x42u);
  v16 = 3;
  v17 = 1;
  sub_223D4B6B4(v14, a4, (int32x2_t *)&v16, 0x43u);
  sub_223D4BC8C(v14, a4);
  return v6;
}

void sub_223D4B6B4(uint64_t *a1, int32x2_t *a2, int32x2_t *a3, unsigned int a4)
{
  int32x2_t v6;
  int32x2_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int32x2_t v14;
  __int32 v15;
  _QWORD *v16;
  int32x2_t ***v17;
  uint64_t v18;
  int32x2_t **v19;
  unint64_t v20;
  int32x2_t *v21;
  int32x2_t *v22;
  int32x2_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int32x2_t *v29;
  int32x2_t v30;
  __int32 v31;
  uint64_t v32;
  uint64_t v33;
  int32x2_t **v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  char *v47;
  char *v48;
  int32x2_t *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  __int128 v55;
  char *v56;
  int64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  int32x2_t **v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  char v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  size_t v75;
  char *v76;
  char *v77;
  int32x2_t *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  __int128 v84;
  char *v85;
  int64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;

  v6 = *a2;
  v7 = *a3;
  v8 = a2[1].i32[0];
  v9 = a3[1].i32[0];
  v11 = *a1;
  v10 = a1[1];
  if (a4 >= 0x200
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 499, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v12 = *(_DWORD *)(v10 + 4 * a4);
  if (v12 >> 30)
    v13 = 1;
  else
    v13 = v12 == *(_DWORD *)(v11 + 272);
  if (!v13)
  {
    v14 = vadd_s32(v7, v6);
    v15 = v9 + v8;
    v16 = (_QWORD *)a1[4];
    v17 = (int32x2_t ***)v16[1];
    v18 = *(_QWORD *)(*v16 + 2448);
    v19 = *v17;
    v21 = (*v17)[1];
    v20 = (unint64_t)(*v17)[2];
    if ((unint64_t)v21 >= v20)
    {
      v23 = *v19;
      v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)*v19) >> 2);
      v25 = v24 + 1;
      if (v24 + 1 > 0x1555555555555555)
        sub_22316E078();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v23) >> 2);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0xAAAAAAAAAAAAAAALL)
        v27 = 0x1555555555555555;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 > 0x1555555555555555)
          sub_223174E94();
        v28 = (char *)operator new(12 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = (int32x2_t *)&v28[12 * v24];
      *v29 = v14;
      v29[1].i32[0] = v15;
      v22 = (int32x2_t *)((char *)v29 + 12);
      if (v21 != v23)
      {
        do
        {
          v30 = *(int32x2_t *)((char *)v21 - 12);
          v21 = (int32x2_t *)((char *)v21 - 12);
          v31 = v21[1].i32[0];
          *(int32x2_t *)((char *)v29 - 12) = v30;
          v29 = (int32x2_t *)((char *)v29 - 12);
          v29[1].i32[0] = v31;
        }
        while (v21 != v23);
        v21 = *v19;
      }
      *v19 = v29;
      v19[1] = v22;
      v19[2] = (int32x2_t *)&v28[12 * v27];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v21 = v14;
      v21[1].i32[0] = v15;
      v22 = (int32x2_t *)((char *)v21 + 12);
    }
    v32 = v12 & 0xCFFFFFFF;
    v33 = v18 + 520 * v32;
    v19[1] = v22;
    v34 = v17[1];
    if (*(_BYTE *)(v33 + 336))
    {
      *(_BYTE *)(v33 + 336) = 0;
      v35 = *(unsigned int *)(v33 + 4);
      if ((_DWORD)v35)
      {
        v36 = 0;
        v37 = (unsigned __int8 *)(520 * v32 + v18 + 36);
        do
        {
          v38 = *v37;
          v37 += 28;
          v36 = sub_223A4EC9C(v36, ((unint64_t)v38 << 8) | 1, 0xFFu);
          --v35;
        }
        while (v35);
        if ((_BYTE)v36)
          v39 = BYTE1(v36);
        else
          v39 = -1;
      }
      else
      {
        v39 = -1;
      }
      *(_BYTE *)(v18 + 520 * v32 + 338) = v39;
      v41 = (char *)v34[1];
      v40 = (unint64_t)v34[2];
      if ((unint64_t)v41 < v40)
        goto LABEL_43;
    }
    else
    {
      v39 = *(_BYTE *)(v18 + 520 * v32 + 338);
      v41 = (char *)v34[1];
      v40 = (unint64_t)v34[2];
      if ((unint64_t)v41 < v40)
      {
LABEL_43:
        *v41 = v39;
        v50 = (uint64_t)(v41 + 1);
        goto LABEL_63;
      }
    }
    v42 = (char *)*v34;
    v43 = v41 - (char *)*v34;
    v44 = v43 + 1;
    if ((uint64_t)(v43 + 1) < 0)
      sub_22316E078();
    v45 = v40 - (_QWORD)v42;
    if (2 * v45 > v44)
      v44 = 2 * v45;
    if (v45 >= 0x3FFFFFFFFFFFFFFFLL)
      v46 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    if (v46)
    {
      v47 = (char *)operator new(v46);
      v48 = &v47[v43];
      v49 = (int32x2_t *)&v47[v46];
      v47[v43] = v39;
      v50 = (uint64_t)&v47[v43 + 1];
      if (v41 == v42)
      {
LABEL_61:
        *v34 = (int32x2_t *)v48;
        v34[1] = (int32x2_t *)v50;
        v34[2] = v49;
        if (v42)
          operator delete(v42);
LABEL_63:
        v34[1] = (int32x2_t *)v50;
        v62 = v17[2];
        v63 = v18 + 520 * v32;
        if (*(_BYTE *)(v63 + 337))
        {
          *(_BYTE *)(v63 + 337) = 0;
          v64 = *(unsigned int *)(v33 + 4);
          if ((_DWORD)v64)
          {
            v65 = 0;
            v66 = (unsigned __int8 *)(520 * v32 + v18 + 37);
            do
            {
              v67 = *v66;
              v66 += 28;
              v65 = sub_223A4EC9C(v65, ((unint64_t)v67 << 8) | 1, 0xFFu);
              --v64;
            }
            while (v64);
            if ((_BYTE)v65)
              v68 = BYTE1(v65);
            else
              v68 = -1;
          }
          else
          {
            v68 = -1;
          }
          *(_BYTE *)(v18 + 520 * v32 + 339) = v68;
          v70 = (char *)v62[1];
          v69 = (unint64_t)v62[2];
          if ((unint64_t)v70 < v69)
            goto LABEL_82;
        }
        else
        {
          v68 = *(_BYTE *)(v18 + 520 * v32 + 339);
          v70 = (char *)v62[1];
          v69 = (unint64_t)v62[2];
          if ((unint64_t)v70 < v69)
          {
LABEL_82:
            *v70 = v68;
            v79 = (uint64_t)(v70 + 1);
LABEL_102:
            v62[1] = (int32x2_t *)v79;
            return;
          }
        }
        v71 = (char *)*v62;
        v72 = v70 - (char *)*v62;
        v73 = v72 + 1;
        if ((uint64_t)(v72 + 1) < 0)
          sub_22316E078();
        v74 = v69 - (_QWORD)v71;
        if (2 * v74 > v73)
          v73 = 2 * v74;
        if (v74 >= 0x3FFFFFFFFFFFFFFFLL)
          v75 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
        {
          v76 = (char *)operator new(v75);
          v77 = &v76[v72];
          v78 = (int32x2_t *)&v76[v75];
          v76[v72] = v68;
          v79 = (uint64_t)&v76[v72 + 1];
          if (v70 == v71)
          {
LABEL_100:
            *v62 = (int32x2_t *)v77;
            v62[1] = (int32x2_t *)v79;
            v62[2] = v78;
            if (v71)
              operator delete(v71);
            goto LABEL_102;
          }
        }
        else
        {
          v76 = 0;
          v77 = (char *)(v70 - (char *)*v62);
          v78 = 0;
          *(_BYTE *)v72 = v68;
          v79 = v72 + 1;
          if (v70 == v71)
            goto LABEL_100;
        }
        if (v72 >= 8 && (unint64_t)(v71 - v76) >= 0x20)
        {
          if (v72 < 0x20)
          {
            v80 = 0;
            goto LABEL_92;
          }
          v80 = v72 & 0xFFFFFFFFFFFFFFE0;
          v81 = v70 - 16;
          v82 = &v76[v70 - 16 - v71];
          v83 = v72 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v84 = *(_OWORD *)v81;
            *((_OWORD *)v82 - 1) = *((_OWORD *)v81 - 1);
            *(_OWORD *)v82 = v84;
            v82 -= 32;
            v81 -= 32;
            v83 -= 32;
          }
          while (v83);
          if (v72 == v80)
            goto LABEL_99;
          if ((v72 & 0x18) != 0)
          {
LABEL_92:
            v77 -= v72 & 0xFFFFFFFFFFFFFFF8;
            v85 = &v70[-v80 - 8];
            v86 = v85 - v71;
            v87 = v80 - (v72 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v88 = *(_QWORD *)v85;
              v85 -= 8;
              *(_QWORD *)&v76[v86] = v88;
              v86 -= 8;
              v87 += 8;
            }
            while (v87);
            v70 -= v72 & 0xFFFFFFFFFFFFFFF8;
            if (v72 == (v72 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_99;
            goto LABEL_97;
          }
          v77 -= v80;
          v70 -= v80;
        }
LABEL_97:
        v89 = v77 - 1;
        do
        {
          v90 = *--v70;
          *v89-- = v90;
        }
        while (v70 != v71);
LABEL_99:
        v77 = v76;
        goto LABEL_100;
      }
    }
    else
    {
      v47 = 0;
      v48 = (char *)(v41 - (char *)*v34);
      v49 = 0;
      *(_BYTE *)v43 = v39;
      v50 = v43 + 1;
      if (v41 == v42)
        goto LABEL_61;
    }
    if (v43 >= 8 && (unint64_t)(v42 - v47) >= 0x20)
    {
      if (v43 < 0x20)
      {
        v51 = 0;
        goto LABEL_53;
      }
      v51 = v43 & 0xFFFFFFFFFFFFFFE0;
      v52 = v41 - 16;
      v53 = &v47[v41 - 16 - v42];
      v54 = v43 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v55 = *(_OWORD *)v52;
        *((_OWORD *)v53 - 1) = *((_OWORD *)v52 - 1);
        *(_OWORD *)v53 = v55;
        v53 -= 32;
        v52 -= 32;
        v54 -= 32;
      }
      while (v54);
      if (v43 == v51)
        goto LABEL_60;
      if ((v43 & 0x18) != 0)
      {
LABEL_53:
        v48 -= v43 & 0xFFFFFFFFFFFFFFF8;
        v56 = &v41[-v51 - 8];
        v57 = v56 - v42;
        v58 = v51 - (v43 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v59 = *(_QWORD *)v56;
          v56 -= 8;
          *(_QWORD *)&v47[v57] = v59;
          v57 -= 8;
          v58 += 8;
        }
        while (v58);
        v41 -= v43 & 0xFFFFFFFFFFFFFFF8;
        if (v43 == (v43 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_60;
        goto LABEL_58;
      }
      v48 -= v51;
      v41 -= v51;
    }
LABEL_58:
    v60 = v48 - 1;
    do
    {
      v61 = *--v41;
      *v60-- = v61;
    }
    while (v41 != v42);
LABEL_60:
    v48 = v47;
    goto LABEL_61;
  }
}

void sub_223D4BC8C(uint64_t *a1, int32x2_t *a2)
{
  uint64_t v4;
  int v5;

  v4 = 4;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x44u);
  v4 = 5;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x45u);
  v4 = 6;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x46u);
  v4 = 7;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x47u);
  v4 = 0x100000000;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x48u);
  v4 = 0x100000001;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x49u);
  v4 = 0x100000002;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x4Au);
  v4 = 0x100000003;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x4Bu);
  v4 = 0x100000004;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x4Cu);
  v4 = 0x100000005;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x4Du);
  v4 = 0x100000006;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x4Eu);
  v4 = 0x100000007;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x4Fu);
  v4 = 0x200000000;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x50u);
  v4 = 0x200000001;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x51u);
  v4 = 0x200000002;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x52u);
  v4 = 0x200000003;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x53u);
  v4 = 0x200000004;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x54u);
  v4 = 0x200000005;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x55u);
  v4 = 0x200000006;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x56u);
  v4 = 0x200000007;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x57u);
  v4 = 0x300000000;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x58u);
  v4 = 0x300000001;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x59u);
  v4 = 0x300000002;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x5Au);
  v4 = 0x300000003;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x5Bu);
  v4 = 0x300000004;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x5Cu);
  v4 = 0x300000005;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x5Du);
  v4 = 0x300000006;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x5Eu);
  v4 = 0x300000007;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x5Fu);
  v4 = 0x400000000;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x60u);
  v4 = 0x400000001;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x61u);
  v4 = 0x400000002;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x62u);
  v4 = 0x400000003;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x63u);
  v4 = 0x400000004;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x64u);
  v4 = 0x400000005;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x65u);
  v4 = 0x400000006;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x66u);
  v4 = 0x400000007;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x67u);
  v4 = 0x500000000;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x68u);
  v4 = 0x500000001;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x69u);
  v4 = 0x500000002;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x6Au);
  v4 = 0x500000003;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x6Bu);
  v4 = 0x500000004;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x6Cu);
  v4 = 0x500000005;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x6Du);
  v4 = 0x500000006;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x6Eu);
  v4 = 0x500000007;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x6Fu);
  v4 = 0x600000000;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x70u);
  v4 = 0x600000001;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x71u);
  v4 = 0x600000002;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x72u);
  v4 = 0x600000003;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x73u);
  v4 = 0x600000004;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x74u);
  v4 = 0x600000005;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x75u);
  v4 = 0x600000006;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x76u);
  v4 = 0x600000007;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x77u);
  v4 = 0x700000000;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x78u);
  v4 = 0x700000001;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x79u);
  v4 = 0x700000002;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x7Au);
  v4 = 0x700000003;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x7Bu);
  v4 = 0x700000004;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x7Cu);
  v4 = 0x700000005;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x7Du);
  v4 = 0x700000006;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x7Eu);
  v4 = 0x700000007;
  v5 = 1;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x7Fu);
  v4 = 0;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x80u);
  v4 = 1;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x81u);
  v4 = 2;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x82u);
  v4 = 3;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x83u);
  v4 = 4;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x84u);
  v4 = 5;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x85u);
  v4 = 6;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x86u);
  v4 = 7;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x87u);
  v4 = 0x100000000;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x88u);
  v4 = 0x100000001;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x89u);
  v4 = 0x100000002;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x8Au);
  v4 = 0x100000003;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x8Bu);
  v4 = 0x100000004;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x8Cu);
  v4 = 0x100000005;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x8Du);
  v4 = 0x100000006;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x8Eu);
  v4 = 0x100000007;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x8Fu);
  v4 = 0x200000000;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x90u);
  v4 = 0x200000001;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x91u);
  v4 = 0x200000002;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x92u);
  v4 = 0x200000003;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x93u);
  v4 = 0x200000004;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x94u);
  v4 = 0x200000005;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x95u);
  v4 = 0x200000006;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x96u);
  v4 = 0x200000007;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x97u);
  v4 = 0x300000000;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x98u);
  v4 = 0x300000001;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x99u);
  v4 = 0x300000002;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x9Au);
  v4 = 0x300000003;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x9Bu);
  v4 = 0x300000004;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x9Cu);
  v4 = 0x300000005;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x9Du);
  v4 = 0x300000006;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x9Eu);
  v4 = 0x300000007;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x9Fu);
  v4 = 0x400000000;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xA0u);
  v4 = 0x400000001;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xA1u);
  v4 = 0x400000002;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xA2u);
  v4 = 0x400000003;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xA3u);
  v4 = 0x400000004;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xA4u);
  v4 = 0x400000005;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xA5u);
  v4 = 0x400000006;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xA6u);
  v4 = 0x400000007;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xA7u);
  v4 = 0x500000000;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xA8u);
  v4 = 0x500000001;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xA9u);
  v4 = 0x500000002;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xAAu);
  v4 = 0x500000003;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xABu);
  v4 = 0x500000004;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xACu);
  v4 = 0x500000005;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xADu);
  v4 = 0x500000006;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xAEu);
  v4 = 0x500000007;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xAFu);
  v4 = 0x600000000;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xB0u);
  v4 = 0x600000001;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xB1u);
  v4 = 0x600000002;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xB2u);
  v4 = 0x600000003;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xB3u);
  v4 = 0x600000004;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xB4u);
  v4 = 0x600000005;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xB5u);
  v4 = 0x600000006;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xB6u);
  v4 = 0x600000007;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xB7u);
  v4 = 0x700000000;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xB8u);
  v4 = 0x700000001;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xB9u);
  v4 = 0x700000002;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xBAu);
  v4 = 0x700000003;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xBBu);
  v4 = 0x700000004;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xBCu);
  v4 = 0x700000005;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xBDu);
  v4 = 0x700000006;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xBEu);
  v4 = 0x700000007;
  v5 = 2;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xBFu);
  v4 = 0;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xC0u);
  v4 = 1;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xC1u);
  v4 = 2;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xC2u);
  v4 = 3;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xC3u);
  v4 = 4;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xC4u);
  v4 = 5;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xC5u);
  v4 = 6;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xC6u);
  v4 = 7;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xC7u);
  v4 = 0x100000000;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xC8u);
  v4 = 0x100000001;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xC9u);
  v4 = 0x100000002;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xCAu);
  v4 = 0x100000003;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xCBu);
  v4 = 0x100000004;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xCCu);
  v4 = 0x100000005;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xCDu);
  v4 = 0x100000006;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xCEu);
  v4 = 0x100000007;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xCFu);
  v4 = 0x200000000;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xD0u);
  v4 = 0x200000001;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xD1u);
  v4 = 0x200000002;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xD2u);
  v4 = 0x200000003;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xD3u);
  v4 = 0x200000004;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xD4u);
  v4 = 0x200000005;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xD5u);
  v4 = 0x200000006;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xD6u);
  v4 = 0x200000007;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xD7u);
  v4 = 0x300000000;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xD8u);
  v4 = 0x300000001;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xD9u);
  v4 = 0x300000002;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xDAu);
  v4 = 0x300000003;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xDBu);
  v4 = 0x300000004;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xDCu);
  v4 = 0x300000005;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xDDu);
  v4 = 0x300000006;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xDEu);
  v4 = 0x300000007;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xDFu);
  v4 = 0x400000000;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xE0u);
  v4 = 0x400000001;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xE1u);
  v4 = 0x400000002;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xE2u);
  v4 = 0x400000003;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xE3u);
  v4 = 0x400000004;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xE4u);
  v4 = 0x400000005;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xE5u);
  v4 = 0x400000006;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xE6u);
  v4 = 0x400000007;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xE7u);
  v4 = 0x500000000;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xE8u);
  v4 = 0x500000001;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xE9u);
  v4 = 0x500000002;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xEAu);
  v4 = 0x500000003;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xEBu);
  v4 = 0x500000004;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xECu);
  v4 = 0x500000005;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xEDu);
  v4 = 0x500000006;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xEEu);
  v4 = 0x500000007;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xEFu);
  v4 = 0x600000000;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xF0u);
  v4 = 0x600000001;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xF1u);
  v4 = 0x600000002;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xF2u);
  v4 = 0x600000003;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xF3u);
  v4 = 0x600000004;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xF4u);
  v4 = 0x600000005;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xF5u);
  v4 = 0x600000006;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xF6u);
  v4 = 0x600000007;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xF7u);
  v4 = 0x700000000;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xF8u);
  v4 = 0x700000001;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xF9u);
  v4 = 0x700000002;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xFAu);
  v4 = 0x700000003;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xFBu);
  v4 = 0x700000004;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xFCu);
  v4 = 0x700000005;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xFDu);
  v4 = 0x700000006;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xFEu);
  v4 = 0x700000007;
  v5 = 3;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0xFFu);
  v4 = 0;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x100u);
  v4 = 1;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x101u);
  v4 = 2;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x102u);
  v4 = 3;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x103u);
  v4 = 4;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x104u);
  v4 = 5;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x105u);
  v4 = 6;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x106u);
  v4 = 7;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x107u);
  v4 = 0x100000000;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x108u);
  v4 = 0x100000001;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x109u);
  v4 = 0x100000002;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x10Au);
  v4 = 0x100000003;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x10Bu);
  v4 = 0x100000004;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x10Cu);
  v4 = 0x100000005;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x10Du);
  v4 = 0x100000006;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x10Eu);
  v4 = 0x100000007;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x10Fu);
  v4 = 0x200000000;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x110u);
  v4 = 0x200000001;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x111u);
  v4 = 0x200000002;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x112u);
  v4 = 0x200000003;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x113u);
  v4 = 0x200000004;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x114u);
  v4 = 0x200000005;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x115u);
  v4 = 0x200000006;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x116u);
  v4 = 0x200000007;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x117u);
  v4 = 0x300000000;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x118u);
  v4 = 0x300000001;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x119u);
  v4 = 0x300000002;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x11Au);
  v4 = 0x300000003;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x11Bu);
  v4 = 0x300000004;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x11Cu);
  v4 = 0x300000005;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x11Du);
  v4 = 0x300000006;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x11Eu);
  v4 = 0x300000007;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x11Fu);
  v4 = 0x400000000;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x120u);
  v4 = 0x400000001;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x121u);
  sub_223D4DA08(a1, a2);
}

void sub_223D4DA08(uint64_t *a1, int32x2_t *a2)
{
  uint64_t v4;
  int v5;

  v4 = 0x400000002;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x122u);
  v4 = 0x400000003;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x123u);
  v4 = 0x400000004;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x124u);
  v4 = 0x400000005;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x125u);
  v4 = 0x400000006;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x126u);
  v4 = 0x400000007;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x127u);
  v4 = 0x500000000;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x128u);
  v4 = 0x500000001;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x129u);
  v4 = 0x500000002;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x12Au);
  v4 = 0x500000003;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x12Bu);
  v4 = 0x500000004;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x12Cu);
  v4 = 0x500000005;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x12Du);
  v4 = 0x500000006;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x12Eu);
  v4 = 0x500000007;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x12Fu);
  v4 = 0x600000000;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x130u);
  v4 = 0x600000001;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x131u);
  v4 = 0x600000002;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x132u);
  v4 = 0x600000003;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x133u);
  v4 = 0x600000004;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x134u);
  v4 = 0x600000005;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x135u);
  v4 = 0x600000006;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x136u);
  v4 = 0x600000007;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x137u);
  v4 = 0x700000000;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x138u);
  v4 = 0x700000001;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x139u);
  v4 = 0x700000002;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x13Au);
  v4 = 0x700000003;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x13Bu);
  v4 = 0x700000004;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x13Cu);
  v4 = 0x700000005;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x13Du);
  v4 = 0x700000006;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x13Eu);
  v4 = 0x700000007;
  v5 = 4;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x13Fu);
  v4 = 0;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x140u);
  v4 = 1;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x141u);
  v4 = 2;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x142u);
  v4 = 3;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x143u);
  v4 = 4;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x144u);
  v4 = 5;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x145u);
  v4 = 6;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x146u);
  v4 = 7;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x147u);
  v4 = 0x100000000;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x148u);
  v4 = 0x100000001;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x149u);
  v4 = 0x100000002;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x14Au);
  v4 = 0x100000003;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x14Bu);
  v4 = 0x100000004;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x14Cu);
  v4 = 0x100000005;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x14Du);
  v4 = 0x100000006;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x14Eu);
  v4 = 0x100000007;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x14Fu);
  v4 = 0x200000000;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x150u);
  v4 = 0x200000001;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x151u);
  v4 = 0x200000002;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x152u);
  v4 = 0x200000003;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x153u);
  v4 = 0x200000004;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x154u);
  v4 = 0x200000005;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x155u);
  v4 = 0x200000006;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x156u);
  v4 = 0x200000007;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x157u);
  v4 = 0x300000000;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x158u);
  v4 = 0x300000001;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x159u);
  v4 = 0x300000002;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x15Au);
  v4 = 0x300000003;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x15Bu);
  v4 = 0x300000004;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x15Cu);
  v4 = 0x300000005;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x15Du);
  v4 = 0x300000006;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x15Eu);
  v4 = 0x300000007;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x15Fu);
  v4 = 0x400000000;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x160u);
  v4 = 0x400000001;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x161u);
  v4 = 0x400000002;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x162u);
  v4 = 0x400000003;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x163u);
  v4 = 0x400000004;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x164u);
  v4 = 0x400000005;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x165u);
  v4 = 0x400000006;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x166u);
  v4 = 0x400000007;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x167u);
  v4 = 0x500000000;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x168u);
  v4 = 0x500000001;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x169u);
  v4 = 0x500000002;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x16Au);
  v4 = 0x500000003;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x16Bu);
  v4 = 0x500000004;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x16Cu);
  v4 = 0x500000005;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x16Du);
  v4 = 0x500000006;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x16Eu);
  v4 = 0x500000007;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x16Fu);
  v4 = 0x600000000;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x170u);
  v4 = 0x600000001;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x171u);
  v4 = 0x600000002;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x172u);
  v4 = 0x600000003;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x173u);
  v4 = 0x600000004;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x174u);
  v4 = 0x600000005;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x175u);
  v4 = 0x600000006;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x176u);
  v4 = 0x600000007;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x177u);
  v4 = 0x700000000;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x178u);
  v4 = 0x700000001;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x179u);
  v4 = 0x700000002;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x17Au);
  v4 = 0x700000003;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x17Bu);
  v4 = 0x700000004;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x17Cu);
  v4 = 0x700000005;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x17Du);
  v4 = 0x700000006;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x17Eu);
  v4 = 0x700000007;
  v5 = 5;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x17Fu);
  v4 = 0;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x180u);
  v4 = 1;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x181u);
  v4 = 2;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x182u);
  v4 = 3;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x183u);
  v4 = 4;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x184u);
  v4 = 5;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x185u);
  v4 = 6;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x186u);
  v4 = 7;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x187u);
  v4 = 0x100000000;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x188u);
  v4 = 0x100000001;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x189u);
  v4 = 0x100000002;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x18Au);
  v4 = 0x100000003;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x18Bu);
  v4 = 0x100000004;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x18Cu);
  v4 = 0x100000005;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x18Du);
  v4 = 0x100000006;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x18Eu);
  v4 = 0x100000007;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x18Fu);
  v4 = 0x200000000;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x190u);
  v4 = 0x200000001;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x191u);
  v4 = 0x200000002;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x192u);
  v4 = 0x200000003;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x193u);
  v4 = 0x200000004;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x194u);
  v4 = 0x200000005;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x195u);
  v4 = 0x200000006;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x196u);
  v4 = 0x200000007;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x197u);
  v4 = 0x300000000;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x198u);
  v4 = 0x300000001;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x199u);
  v4 = 0x300000002;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x19Au);
  v4 = 0x300000003;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x19Bu);
  v4 = 0x300000004;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x19Cu);
  v4 = 0x300000005;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x19Du);
  v4 = 0x300000006;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x19Eu);
  v4 = 0x300000007;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x19Fu);
  v4 = 0x400000000;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1A0u);
  v4 = 0x400000001;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1A1u);
  v4 = 0x400000002;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1A2u);
  v4 = 0x400000003;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1A3u);
  v4 = 0x400000004;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1A4u);
  v4 = 0x400000005;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1A5u);
  v4 = 0x400000006;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1A6u);
  v4 = 0x400000007;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1A7u);
  v4 = 0x500000000;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1A8u);
  v4 = 0x500000001;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1A9u);
  v4 = 0x500000002;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1AAu);
  v4 = 0x500000003;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1ABu);
  v4 = 0x500000004;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1ACu);
  v4 = 0x500000005;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1ADu);
  v4 = 0x500000006;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1AEu);
  v4 = 0x500000007;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1AFu);
  v4 = 0x600000000;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1B0u);
  v4 = 0x600000001;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1B1u);
  v4 = 0x600000002;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1B2u);
  v4 = 0x600000003;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1B3u);
  v4 = 0x600000004;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1B4u);
  v4 = 0x600000005;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1B5u);
  v4 = 0x600000006;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1B6u);
  v4 = 0x600000007;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1B7u);
  v4 = 0x700000000;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1B8u);
  v4 = 0x700000001;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1B9u);
  v4 = 0x700000002;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1BAu);
  v4 = 0x700000003;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1BBu);
  v4 = 0x700000004;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1BCu);
  v4 = 0x700000005;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1BDu);
  v4 = 0x700000006;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1BEu);
  v4 = 0x700000007;
  v5 = 6;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1BFu);
  v4 = 0;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1C0u);
  v4 = 1;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1C1u);
  v4 = 2;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1C2u);
  v4 = 3;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1C3u);
  v4 = 4;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1C4u);
  v4 = 5;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1C5u);
  v4 = 6;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1C6u);
  v4 = 7;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1C7u);
  v4 = 0x100000000;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1C8u);
  v4 = 0x100000001;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1C9u);
  v4 = 0x100000002;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1CAu);
  v4 = 0x100000003;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1CBu);
  v4 = 0x100000004;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1CCu);
  v4 = 0x100000005;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1CDu);
  v4 = 0x100000006;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1CEu);
  v4 = 0x100000007;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1CFu);
  v4 = 0x200000000;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1D0u);
  v4 = 0x200000001;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1D1u);
  v4 = 0x200000002;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1D2u);
  v4 = 0x200000003;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1D3u);
  v4 = 0x200000004;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1D4u);
  v4 = 0x200000005;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1D5u);
  v4 = 0x200000006;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1D6u);
  v4 = 0x200000007;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1D7u);
  v4 = 0x300000000;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1D8u);
  v4 = 0x300000001;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1D9u);
  v4 = 0x300000002;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1DAu);
  v4 = 0x300000003;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1DBu);
  v4 = 0x300000004;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1DCu);
  v4 = 0x300000005;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1DDu);
  v4 = 0x300000006;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1DEu);
  v4 = 0x300000007;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1DFu);
  v4 = 0x400000000;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1E0u);
  v4 = 0x400000001;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1E1u);
  v4 = 0x400000002;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1E2u);
  v4 = 0x400000003;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1E3u);
  v4 = 0x400000004;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1E4u);
  v4 = 0x400000005;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1E5u);
  v4 = 0x400000006;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1E6u);
  v4 = 0x400000007;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1E7u);
  v4 = 0x500000000;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1E8u);
  v4 = 0x500000001;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1E9u);
  v4 = 0x500000002;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1EAu);
  v4 = 0x500000003;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1EBu);
  v4 = 0x500000004;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1ECu);
  v4 = 0x500000005;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1EDu);
  v4 = 0x500000006;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1EEu);
  v4 = 0x500000007;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1EFu);
  v4 = 0x600000000;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1F0u);
  v4 = 0x600000001;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1F1u);
  v4 = 0x600000002;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1F2u);
  v4 = 0x600000003;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1F3u);
  v4 = 0x600000004;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1F4u);
  v4 = 0x600000005;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1F5u);
  v4 = 0x600000006;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1F6u);
  v4 = 0x600000007;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1F7u);
  v4 = 0x700000000;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1F8u);
  v4 = 0x700000001;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1F9u);
  v4 = 0x700000002;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1FAu);
  v4 = 0x700000003;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1FBu);
  v4 = 0x700000004;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1FCu);
  v4 = 0x700000005;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1FDu);
  v4 = 0x700000006;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1FEu);
  v4 = 0x700000007;
  v5 = 7;
  sub_223D4B6B4(a1, a2, (int32x2_t *)&v4, 0x1FFu);
}

uint64_t sub_223D4F77C(uint64_t a1, int a2, int a3, char a4, uint64_t a5, double a6, double a7, float32x4_t a8, float32x4_t a9, double a10, float32x4_t a11)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  double v19;
  double v20;
  float32x4_t v21;
  float32x4_t v22;
  double v23;
  float32x4_t v24;
  int v25;
  uint64_t v26;
  double v27;
  float32x4_t v28;
  float32x4_t v29;
  double v30;
  float32x4_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  double v42;
  float32x4_t v43;
  float32x4_t v44;
  double v45;
  float32x4_t v46;
  unsigned int v47;
  double v48;
  float32x4_t v49;
  float32x4_t v50;
  double v51;
  float32x4_t v52;
  unsigned int v53;
  double v54;
  float32x4_t v55;
  float32x4_t v56;
  double v57;
  float32x4_t v58;
  unsigned int v59;
  double v60;
  float32x4_t v61;
  float32x4_t v62;
  double v63;
  float32x4_t v64;
  unsigned int v65;
  double v66;
  float32x4_t v67;
  float32x4_t v68;
  double v69;
  float32x4_t v70;
  unsigned int v71;
  double v72;
  float32x4_t v73;
  float32x4_t v74;
  double v75;
  float32x4_t v76;
  unsigned int v77;
  unsigned int v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  _BYTE v83[12];
  int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  char v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  char v94;
  uint64_t v95;
  int v96;
  char v97;
  char v98;
  uint64_t v99;
  int v100;
  char v101;
  char v102;
  uint64_t v103;
  int v104;
  char v105;
  char v106;
  uint64_t v107;
  int v108;
  char v109;
  char v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  int v116;
  char v117;
  char v118;
  uint64_t v119;
  int v120;
  char v121;
  char v122;
  uint64_t v123;
  int v124;
  char v125;
  char v126;
  uint64_t v127;
  int v128;
  char v129;
  char v130;
  uint64_t v131;
  int v132;
  char v133;
  char v134;
  uint64_t v135;
  int v136;
  char v137;
  char v138;
  int v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  int v144;
  char v145;
  char v146;
  int v147;
  uint64_t v148;
  char v149;
  char v150;
  uint64_t v151;
  int v152;
  char v153;
  char v154;
  int v155;
  uint64_t v156;
  char v157;
  char v158;
  uint64_t v159;
  int v160;
  char v161;
  char v162;
  int v163;
  uint64_t v164;
  char v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  char v170;
  int v171;
  uint64_t v172;
  char v173;
  char v174;
  uint64_t v175;
  int v176;
  char v177;
  char v178;
  int v179;
  uint64_t v180;
  char v181;
  char v182;
  uint64_t v183;
  int v184;
  char v185;
  char v186;
  int v187;
  uint64_t v188;
  char v189;
  _BYTE v190[12];
  uint64_t v191;
  int v192;

  v14 = a3 & 0xCFFFFFFF;
  v15 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v16 = *(_QWORD *)v15;
  *(_DWORD *)&v190[8] = *(_DWORD *)(v15 + 8);
  *(_QWORD *)v190 = v16;
  v17 = *(_QWORD *)(v15 + 12);
  v192 = *(_DWORD *)(v15 + 20);
  v191 = v17;
  v83[0] = 1;
  *(_QWORD *)&v83[4] = -1;
  v84 = -1;
  LOBYTE(v85) = 8;
  LOBYTE(v86) = 1;
  v87 = -1;
  v88 = -1;
  v89 = 8;
  v90 = 1;
  v91 = -1;
  v92 = -1;
  v93 = 8;
  v94 = 1;
  v95 = -1;
  v96 = -1;
  v97 = 8;
  v98 = 1;
  v99 = -1;
  v100 = -1;
  v101 = 8;
  v102 = 1;
  v103 = -1;
  v104 = -1;
  v105 = 8;
  v106 = 1;
  v107 = -1;
  v108 = -1;
  v109 = 8;
  v110 = 1;
  v111 = -1;
  v112 = -1;
  v113 = 8;
  v114 = 1;
  v115 = -1;
  v116 = -1;
  v117 = 8;
  v118 = 1;
  v119 = -1;
  v120 = -1;
  v121 = 8;
  v122 = 1;
  v123 = -1;
  v124 = -1;
  v125 = 8;
  v126 = 1;
  v127 = -1;
  v128 = -1;
  v129 = 8;
  v130 = 1;
  v131 = -1;
  v132 = -1;
  v133 = 8;
  v134 = 1;
  v135 = -1;
  v136 = -1;
  v137 = 8;
  v138 = 1;
  v139 = -1;
  v140 = -1;
  v141 = 8;
  v142 = 1;
  v143 = -1;
  v144 = -1;
  v145 = 8;
  v146 = 1;
  v147 = -1;
  v148 = -1;
  v149 = 8;
  v150 = 1;
  v151 = -1;
  v152 = -1;
  v153 = 8;
  v154 = 1;
  v155 = -1;
  v156 = -1;
  v157 = 8;
  v158 = 1;
  v159 = -1;
  v160 = -1;
  v161 = 8;
  v162 = 1;
  v163 = -1;
  v164 = -1;
  v165 = 8;
  v166 = 1;
  v167 = -1;
  v168 = -1;
  v169 = 8;
  v170 = 1;
  v171 = -1;
  v172 = -1;
  v173 = 8;
  v174 = 1;
  v175 = -1;
  v176 = -1;
  v177 = 8;
  v178 = 1;
  v179 = -1;
  v180 = -1;
  v181 = 8;
  v182 = 1;
  v183 = -1;
  v184 = -1;
  v185 = 8;
  v186 = 1;
  v187 = -1;
  v188 = -1;
  v189 = 8;
  result = sub_223D4FFF8(a5, a4, a2, 0, (int32x2_t *)v190, (uint64_t)v83, NAN, a7, a8, a9, a10, a11);
  if ((_DWORD)result)
  {
    v25 = result;
    result = 1;
    if (a2)
    {
      if (v25 != 3)
      {
        v26 = (a2 - 1);
        if (!(_DWORD)v26)
        {
          v32 = 0;
          while (1)
          {
            v34 = byte_22466FA9C[v32];
            v35 = *(_QWORD *)(a1 + 184);
            v36 = *(_DWORD *)(v35 + 4488 * v14 + 4 * v34 + 24);
            v37 = (v34 >> 2) & 1;
            v38 = (v34 >> 1) & 1;
            v39 = v34 & 1;
            if ((v36 & 0x80000000) != 0)
            {
              v33 = (v191 - *(_DWORD *)v190) >> 1;
              *(_DWORD *)v83 = *(_DWORD *)v190 + v33 * v37;
              *(_DWORD *)&v83[4] = *(_DWORD *)&v190[4] + v33 * v38;
              *(_DWORD *)&v83[8] = *(_DWORD *)&v190[8] + v33 * v39;
              v84 = *(_DWORD *)v83 + v33;
              v85 = *(_DWORD *)&v83[4] + v33;
              v86 = *(_DWORD *)&v83[8] + v33;
              v81 = *(_OWORD *)a5;
              v82 = *(_QWORD *)(a5 + 16);
              result = sub_223D50880(0, (int32x2_t *)v83, v25 == 2, (uint64_t)&v81, *(double *)&v81, v20, v21, v22, v23, v24);
              if (!(_DWORD)result)
                return result;
            }
            else
            {
              v40 = (v191 - *(_DWORD *)v190) >> 1;
              *(_DWORD *)v83 = *(_DWORD *)v190 + v40 * v37;
              *(_DWORD *)&v83[4] = *(_DWORD *)&v190[4] + v40 * v38;
              *(_DWORD *)&v83[8] = *(_DWORD *)&v190[8] + v40 * v39;
              v84 = *(_DWORD *)v83 + v40;
              v85 = *(_DWORD *)&v83[4] + v40;
              v86 = *(_DWORD *)&v83[8] + v40;
              result = sub_223D4FFF8(a5, v25 == 2, 0, v36, (int32x2_t *)v83, v35 + 4488 * v14 + 540 * v34 + 68, v19, v20, v21, v22, v23, v24);
              if (!(_DWORD)result)
                return result;
            }
            if (++v32 == 8)
              return 1;
          }
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 24) & 0x80000000) != 0)
        {
          v41 = (v191 - *(_DWORD *)v190) >> 1;
          *(_QWORD *)v83 = *(_QWORD *)v190;
          *(_DWORD *)&v83[8] = *(_DWORD *)&v190[8];
          v84 = v41 + *(_DWORD *)v190;
          v85 = *(_DWORD *)&v190[4] + v41;
          v86 = *(_DWORD *)&v190[8] + v41;
          v81 = *(_OWORD *)a5;
          v82 = *(_QWORD *)(a5 + 16);
          if ((sub_223D50880(v26, (int32x2_t *)v83, v25 == 2, (uint64_t)&v81, *(double *)&v81, v20, v21, v22, v23, v24) & 1) == 0)
            return 0;
        }
        else
        {
          v79 = *(_OWORD *)a5;
          v80 = *(_QWORD *)(a5 + 16);
          result = sub_223D4F77C(a1, v26);
          if (!(_DWORD)result)
            return result;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 28) & 0x80000000) != 0)
        {
          v47 = (v191 - *(_DWORD *)v190) >> 1;
          *(_QWORD *)v83 = *(_QWORD *)v190;
          *(_DWORD *)&v83[8] = *(_DWORD *)&v190[8] + v47;
          v84 = v47 + *(_DWORD *)v190;
          v85 = *(_DWORD *)&v190[4] + v47;
          v86 = *(_DWORD *)&v190[8] + v47 + v47;
          v81 = *(_OWORD *)a5;
          v82 = *(_QWORD *)(a5 + 16);
          result = sub_223D50880(v26, (int32x2_t *)v83, v25 == 2, (uint64_t)&v81, *(double *)&v81, v27, v28, v29, v30, v31);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v79 = *(_OWORD *)a5;
          v80 = *(_QWORD *)(a5 + 16);
          if ((sub_223D4F77C(a1, v26) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 32) & 0x80000000) != 0)
        {
          v53 = (v191 - *(_DWORD *)v190) >> 1;
          *(_DWORD *)v83 = *(_DWORD *)v190;
          *(_DWORD *)&v83[4] = v53 + *(_DWORD *)&v190[4];
          *(_DWORD *)&v83[8] = *(_DWORD *)&v190[8];
          v84 = v53 + *(_DWORD *)v190;
          v85 = v53 + *(_DWORD *)&v190[4] + v53;
          v86 = *(_DWORD *)&v190[8] + v53;
          v81 = *(_OWORD *)a5;
          v82 = *(_QWORD *)(a5 + 16);
          result = sub_223D50880(v26, (int32x2_t *)v83, v25 == 2, (uint64_t)&v81, *(double *)&v81, v42, v43, v44, v45, v46);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v79 = *(_OWORD *)a5;
          v80 = *(_QWORD *)(a5 + 16);
          if ((sub_223D4F77C(a1, v26) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 36) & 0x80000000) != 0)
        {
          v59 = (v191 - *(_DWORD *)v190) >> 1;
          *(_DWORD *)v83 = *(_DWORD *)v190;
          *(_DWORD *)&v83[4] = v59 + *(_DWORD *)&v190[4];
          *(_DWORD *)&v83[8] = *(_DWORD *)&v190[8] + v59;
          v84 = v59 + *(_DWORD *)v190;
          v85 = v59 + *(_DWORD *)&v190[4] + v59;
          v86 = *(_DWORD *)&v190[8] + v59 + v59;
          v81 = *(_OWORD *)a5;
          v82 = *(_QWORD *)(a5 + 16);
          result = sub_223D50880(v26, (int32x2_t *)v83, v25 == 2, (uint64_t)&v81, *(double *)&v81, v48, v49, v50, v51, v52);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v79 = *(_OWORD *)a5;
          v80 = *(_QWORD *)(a5 + 16);
          if ((sub_223D4F77C(a1, v26) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 40) & 0x80000000) != 0)
        {
          v65 = (v191 - *(_DWORD *)v190) >> 1;
          *(_DWORD *)v83 = v65 + *(_DWORD *)v190;
          *(_QWORD *)&v83[4] = *(_QWORD *)&v190[4];
          v84 = v65 + *(_DWORD *)v190 + v65;
          v85 = *(_DWORD *)&v190[4] + v65;
          v86 = *(_DWORD *)&v190[8] + v65;
          v81 = *(_OWORD *)a5;
          v82 = *(_QWORD *)(a5 + 16);
          result = sub_223D50880(v26, (int32x2_t *)v83, v25 == 2, (uint64_t)&v81, *(double *)&v81, v54, v55, v56, v57, v58);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v79 = *(_OWORD *)a5;
          v80 = *(_QWORD *)(a5 + 16);
          if ((sub_223D4F77C(a1, v26) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 44) & 0x80000000) != 0)
        {
          v71 = (v191 - *(_DWORD *)v190) >> 1;
          *(_DWORD *)v83 = v71 + *(_DWORD *)v190;
          *(_DWORD *)&v83[4] = *(_DWORD *)&v190[4];
          *(_DWORD *)&v83[8] = *(_DWORD *)&v190[8] + v71;
          v84 = v71 + *(_DWORD *)v190 + v71;
          v85 = *(_DWORD *)&v190[4] + v71;
          v86 = *(_DWORD *)&v190[8] + v71 + v71;
          v81 = *(_OWORD *)a5;
          v82 = *(_QWORD *)(a5 + 16);
          result = sub_223D50880(v26, (int32x2_t *)v83, v25 == 2, (uint64_t)&v81, *(double *)&v81, v60, v61, v62, v63, v64);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v79 = *(_OWORD *)a5;
          v80 = *(_QWORD *)(a5 + 16);
          if ((sub_223D4F77C(a1, v26) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 48) & 0x80000000) != 0)
        {
          v77 = (v191 - *(_DWORD *)v190) >> 1;
          *(_DWORD *)v83 = v77 + *(_DWORD *)v190;
          *(_DWORD *)&v83[4] = v77 + *(_DWORD *)&v190[4];
          *(_DWORD *)&v83[8] = *(_DWORD *)&v190[8];
          v84 = v77 + *(_DWORD *)v190 + v77;
          v85 = v77 + *(_DWORD *)&v190[4] + v77;
          v86 = *(_DWORD *)&v190[8] + v77;
          v81 = *(_OWORD *)a5;
          v82 = *(_QWORD *)(a5 + 16);
          result = sub_223D50880(v26, (int32x2_t *)v83, v25 == 2, (uint64_t)&v81, *(double *)&v81, v66, v67, v68, v69, v70);
          if (!(_DWORD)result)
            return result;
LABEL_39:
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 52) & 0x80000000) != 0)
          {
            v78 = (v191 - *(_DWORD *)v190) >> 1;
            *(_DWORD *)v83 = v78 + *(_DWORD *)v190;
            *(_DWORD *)&v83[4] = v78 + *(_DWORD *)&v190[4];
            *(_DWORD *)&v83[8] = *(_DWORD *)&v190[8] + v78;
            v84 = v78 + *(_DWORD *)v190 + v78;
            v85 = v78 + *(_DWORD *)&v190[4] + v78;
            v86 = *(_DWORD *)&v190[8] + v78 + v78;
            v81 = *(_OWORD *)a5;
            v82 = *(_QWORD *)(a5 + 16);
            result = sub_223D50880(v26, (int32x2_t *)v83, v25 == 2, (uint64_t)&v81, *(double *)&v81, v72, v73, v74, v75, v76);
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            v79 = *(_OWORD *)a5;
            v80 = *(_QWORD *)(a5 + 16);
            if ((sub_223D4F77C(a1, v26) & 1) == 0)
              return 0;
          }
          return 1;
        }
        v79 = *(_OWORD *)a5;
        v80 = *(_QWORD *)(a5 + 16);
        if ((sub_223D4F77C(a1, v26) & 1) != 0)
          goto LABEL_39;
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_223D4FFF8(uint64_t a1, char a2, int a3, unsigned int a4, int32x2_t *a5, uint64_t a6, double a7, double a8, float32x4_t a9, float32x4_t a10, double a11, float32x4_t a12)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _BYTE **v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  int v109;
  __int128 v110[2];
  BOOL *v111;
  _BYTE *v112;
  _BYTE v113[12];
  int v114;
  _BYTE v115[32];
  BOOL *v116;
  BOOL v117;

  v17 = 2;
  v109 = 2;
  if ((a2 & 1) == 0)
  {
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    LODWORD(a7) = *(_DWORD *)(**(_QWORD **)a1 + 144);
    *(float32x2_t *)a9.f32 = vcvt_f32_s32(*a5);
    a10.f32[0] = (float)a5[1].i32[0];
    a9.f32[2] = a10.f32[0];
    v20 = vmulq_n_f32(a9, *(float *)&a7);
    *(float *)&a7 = *(float *)&a7 * (float)(int)(a5[1].i32[1] - *(_QWORD *)a5);
    *(_DWORD *)&v115[8] = v20.i32[2];
    *(_QWORD *)v115 = v20.i64[0];
    v21 = vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0));
    *(_DWORD *)&v115[20] = v21.i32[2];
    *(_QWORD *)&v115[12] = v21.i64[0];
    if (*(_BYTE *)(v19 + 20) == 1)
    {
      v17 = sub_223E998FC((float *)v115, (float *)v19, *(float *)(v19 + 12), *(float *)(v19 + 16), v20, *(double *)a10.i64, a11, a12);
      v109 = v17;
      if (!v17)
        return 3;
    }
    else if (*(_BYTE *)(v19 + 20))
    {
      v17 = sub_223E99B90((float *)v115, (float *)v19, *(float *)(v19 + 12), *(float *)(v19 + 16), v20, a10);
      v109 = v17;
      if (!v17)
        return 3;
    }
    else
    {
      v17 = sub_223E99668((float *)v115, (float *)v19, *(float *)(v19 + 12), *(float *)(v19 + 16), v20, a10);
      v109 = v17;
      if (!v17)
        return 3;
    }
  }
  if (!a3)
  {
    v22 = *(uint64_t **)(a1 + 8);
    v117 = (a4 & 0x80000000) == 0;
    v23 = *v22;
    if ((a4 & 0x80000000) != 0)
    {
      v25 = (_DWORD *)(v23 + 280);
    }
    else
    {
      v24 = *(_QWORD *)(v23 + 2328);
      if (a4 >= (unint64_t)((*(_QWORD *)(v23 + 2336) - v24) >> 11))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v24 = *(_QWORD *)(v23 + 2328);
      }
      v25 = (_DWORD *)(v24 + ((unint64_t)a4 << 11));
    }
    *(_QWORD *)v115 = v23;
    *(_QWORD *)&v115[8] = v25;
    v26 = v22[1];
    *(_QWORD *)&v115[16] = v26;
    *(_QWORD *)&v115[24] = a6;
    v116 = &v117;
    if (v17 != 2)
    {
      v112 = (_BYTE *)*a5;
      *(_DWORD *)v113 = a5[1].i32[0];
      *(int32x2_t *)&v113[4] = vadd_s32(*a5, (int32x2_t)0x800000008);
      v114 = *(_DWORD *)v113 + 8;
      v105 = (uint64_t *)v22[2];
      v106 = *v105;
      v107 = v105[1];
      v110[0] = *(_OWORD *)v115;
      v110[1] = *(_OWORD *)&v115[16];
      v111 = v116;
      v18 = 3;
      if ((sub_223D50D84((int *)a5, 3, (int *)&v112, v106, v107, v110, *(double *)v115, *(double *)&v115[16], a9, a10, a11, a12) & 1) != 0)return v18;
      goto LABEL_286;
    }
    v112 = v115;
    *(_QWORD *)v113 = &v109;
    v27 = **(_BYTE ****)(v26 + 8);
    if ((*v25 & 0x10000000) != 0)
      v28 = 0x40000000;
    else
      v28 = 0x80000000;
    if ((*v25 & 0x20000000) != 0)
      v29 = v28;
    else
      v29 = *v25 & 0xCFFFFFFF;
    if ((v29 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v29 >> 30) && !**v27)
      **v27 = 1;
    v30 = v25[1];
    v31 = (v30 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v32 = (v30 & 0x20000000) != 0 ? v31 : v30 & 0xCFFFFFFF;
    if ((v32 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v32 >> 30) && !**v27)
      **v27 = 1;
    v33 = v25[2];
    v34 = (v33 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v35 = (v33 & 0x20000000) != 0 ? v34 : v33 & 0xCFFFFFFF;
    if ((v35 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v35 >> 30) && !**v27)
      **v27 = 1;
    v36 = v25[3];
    v37 = (v36 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v38 = (v36 & 0x20000000) != 0 ? v37 : v36 & 0xCFFFFFFF;
    if ((v38 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v38 >> 30) && !**v27)
      **v27 = 1;
    v39 = v25[4];
    v40 = (v39 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v41 = (v39 & 0x20000000) != 0 ? v40 : v39 & 0xCFFFFFFF;
    if ((v41 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v41 >> 30) && !**v27)
      **v27 = 1;
    v42 = v25[5];
    v43 = (v42 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v44 = (v42 & 0x20000000) != 0 ? v43 : v42 & 0xCFFFFFFF;
    if ((v44 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v44 >> 30) && !**v27)
      **v27 = 1;
    v45 = v25[6];
    v46 = (v45 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v47 = (v45 & 0x20000000) != 0 ? v46 : v45 & 0xCFFFFFFF;
    if ((v47 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v47 >> 30) && !**v27)
      **v27 = 1;
    v48 = v25[7];
    v49 = (v48 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v50 = (v48 & 0x20000000) != 0 ? v49 : v48 & 0xCFFFFFFF;
    if ((v50 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v50 >> 30) && !**v27)
      **v27 = 1;
    v51 = v25[8];
    v52 = (v51 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v53 = (v51 & 0x20000000) != 0 ? v52 : v51 & 0xCFFFFFFF;
    if ((v53 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v53 >> 30) && !**v27)
      **v27 = 1;
    v54 = v25[9];
    v55 = (v54 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v56 = (v54 & 0x20000000) != 0 ? v55 : v54 & 0xCFFFFFFF;
    if ((v56 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v56 >> 30) && !**v27)
      **v27 = 1;
    v57 = v25[10];
    v58 = (v57 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v59 = (v57 & 0x20000000) != 0 ? v58 : v57 & 0xCFFFFFFF;
    if ((v59 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v59 >> 30) && !**v27)
      **v27 = 1;
    v60 = v25[11];
    v61 = (v60 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v62 = (v60 & 0x20000000) != 0 ? v61 : v60 & 0xCFFFFFFF;
    if ((v62 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v62 >> 30) && !**v27)
      **v27 = 1;
    v63 = v25[12];
    v64 = (v63 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v65 = (v63 & 0x20000000) != 0 ? v64 : v63 & 0xCFFFFFFF;
    if ((v65 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v65 >> 30) && !**v27)
      **v27 = 1;
    v66 = v25[13];
    v67 = (v66 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v68 = (v66 & 0x20000000) != 0 ? v67 : v66 & 0xCFFFFFFF;
    if ((v68 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v68 >> 30) && !**v27)
      **v27 = 1;
    v69 = v25[14];
    v70 = (v69 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v71 = (v69 & 0x20000000) != 0 ? v70 : v69 & 0xCFFFFFFF;
    if ((v71 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v71 >> 30) && !**v27)
      **v27 = 1;
    v72 = v25[15];
    v73 = (v72 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v74 = (v72 & 0x20000000) != 0 ? v73 : v72 & 0xCFFFFFFF;
    if ((v74 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v74 >> 30) && !**v27)
      **v27 = 1;
    v75 = v25[16];
    v76 = (v75 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v77 = (v75 & 0x20000000) != 0 ? v76 : v75 & 0xCFFFFFFF;
    if ((v77 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v77 >> 30) && !**v27)
      **v27 = 1;
    v78 = v25[17];
    v79 = (v78 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v80 = (v78 & 0x20000000) != 0 ? v79 : v78 & 0xCFFFFFFF;
    if ((v80 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v80 >> 30) && !**v27)
      **v27 = 1;
    v81 = v25[18];
    v82 = (v81 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v83 = (v81 & 0x20000000) != 0 ? v82 : v81 & 0xCFFFFFFF;
    if ((v83 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v83 >> 30) && !**v27)
      **v27 = 1;
    v84 = v25[19];
    v85 = (v84 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v86 = (v84 & 0x20000000) != 0 ? v85 : v84 & 0xCFFFFFFF;
    if ((v86 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v86 >> 30) && !**v27)
      **v27 = 1;
    v87 = v25[20];
    v88 = (v87 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v89 = (v87 & 0x20000000) != 0 ? v88 : v87 & 0xCFFFFFFF;
    if ((v89 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v89 >> 30) && !**v27)
      **v27 = 1;
    v90 = v25[21];
    v91 = (v90 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v92 = (v90 & 0x20000000) != 0 ? v91 : v90 & 0xCFFFFFFF;
    if ((v92 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v92 >> 30) && !**v27)
      **v27 = 1;
    v93 = v25[22];
    v94 = (v93 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v95 = (v93 & 0x20000000) != 0 ? v94 : v93 & 0xCFFFFFFF;
    if ((v95 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v95 >> 30) && !**v27)
      **v27 = 1;
    v96 = v25[23];
    v97 = (v96 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v98 = (v96 & 0x20000000) != 0 ? v97 : v96 & 0xCFFFFFFF;
    if ((v98 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v98 >> 30) && !**v27)
      **v27 = 1;
    v99 = v25[24];
    v100 = (v99 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v101 = (v99 & 0x20000000) != 0 ? v100 : v99 & 0xCFFFFFFF;
    if ((v101 & 0x80000000) != 0)
      goto LABEL_285;
    if (!(v101 >> 30) && !**v27)
      **v27 = 1;
    v102 = v25[25];
    v103 = (v102 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
    v104 = (v102 & 0x20000000) != 0 ? v103 : v102 & 0xCFFFFFFF;
    if ((v104 & 0x80000000) != 0)
    {
LABEL_285:
      **v27 = 2;
LABEL_286:
      v18 = 0;
      **(_BYTE **)(a1 + 16) = 0;
      return v18;
    }
    if (!(v104 >> 30) && !**v27)
      **v27 = 1;
    if ((sub_223D513CC((uint64_t)&v112) & 1) == 0)
      goto LABEL_286;
    return 3;
  }
  if (v17 == 1)
    return 1;
  else
    return 2;
}

uint64_t sub_223D50880(int a1, int32x2_t *a2, char a3, uint64_t a4, double a5, double a6, float32x4_t a7, float32x4_t a8, double a9, float32x4_t a10)
{
  uint64_t result;
  int v14;
  uint64_t v15;
  __int32 v16;
  __int32 v17;
  unsigned int v18;
  __int32 v19;
  __int32 v20;
  unsigned int v21;
  __int32 v22;
  unsigned int v23;
  unsigned __int32 v24;
  __int32 v25;
  unsigned int v26;
  unsigned __int32 v27;
  __int32 v28;
  __int32 v29;
  unsigned int v30;
  __int32 v31;
  __int32 v32;
  unsigned int v33;
  __int32 v34;
  unsigned int v35;
  unsigned __int32 v36;
  __int32 v37;
  unsigned int v38;
  unsigned __int32 v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int32 v42;
  unint64_t v43;
  int v44;
  unsigned __int32 v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  char v54;
  uint64_t v55;
  int v56;
  char v57;
  char v58;
  uint64_t v59;
  int v60;
  char v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  char v66;
  uint64_t v67;
  int v68;
  char v69;
  char v70;
  uint64_t v71;
  int v72;
  char v73;
  char v74;
  uint64_t v75;
  int v76;
  char v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  char v82;
  uint64_t v83;
  int v84;
  char v85;
  char v86;
  uint64_t v87;
  int v88;
  char v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  char v94;
  uint64_t v95;
  int v96;
  char v97;
  char v98;
  int v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  int v104;
  char v105;
  char v106;
  int v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  int v115;
  uint64_t v116;
  char v117;
  char v118;
  uint64_t v119;
  int v120;
  char v121;
  char v122;
  int v123;
  uint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  int v128;
  char v129;
  char v130;
  int v131;
  uint64_t v132;
  char v133;
  char v134;
  uint64_t v135;
  int v136;
  char v137;
  char v138;
  int v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  int v144;
  char v145;
  char v146;
  int v147;
  uint64_t v148;
  char v149;

  LOBYTE(v42) = 1;
  v43 = -1;
  v44 = -1;
  LOBYTE(v45) = 8;
  LOBYTE(v46) = 1;
  v47 = -1;
  v48 = -1;
  v49 = 8;
  v50 = 1;
  v51 = -1;
  v52 = -1;
  v53 = 8;
  v54 = 1;
  v55 = -1;
  v56 = -1;
  v57 = 8;
  v58 = 1;
  v59 = -1;
  v60 = -1;
  v61 = 8;
  v62 = 1;
  v63 = -1;
  v64 = -1;
  v65 = 8;
  v66 = 1;
  v67 = -1;
  v68 = -1;
  v69 = 8;
  v70 = 1;
  v71 = -1;
  v72 = -1;
  v73 = 8;
  v74 = 1;
  v75 = -1;
  v76 = -1;
  v77 = 8;
  v78 = 1;
  v79 = -1;
  v80 = -1;
  v81 = 8;
  v82 = 1;
  v83 = -1;
  v84 = -1;
  v85 = 8;
  v86 = 1;
  v87 = -1;
  v88 = -1;
  v89 = 8;
  v90 = 1;
  v91 = -1;
  v92 = -1;
  v93 = 8;
  v94 = 1;
  v95 = -1;
  v96 = -1;
  v97 = 8;
  v98 = 1;
  v99 = -1;
  v100 = -1;
  v101 = 8;
  v102 = 1;
  v103 = -1;
  v104 = -1;
  v105 = 8;
  v106 = 1;
  v107 = -1;
  v108 = -1;
  v109 = 8;
  v110 = 1;
  v111 = -1;
  v112 = -1;
  v113 = 8;
  v114 = 1;
  v115 = -1;
  v116 = -1;
  v117 = 8;
  v118 = 1;
  v119 = -1;
  v120 = -1;
  v121 = 8;
  v122 = 1;
  v123 = -1;
  v124 = -1;
  v125 = 8;
  v126 = 1;
  v127 = -1;
  v128 = -1;
  v129 = 8;
  v130 = 1;
  v131 = -1;
  v132 = -1;
  v133 = 8;
  v134 = 1;
  v135 = -1;
  v136 = -1;
  v137 = 8;
  v138 = 1;
  v139 = -1;
  v140 = -1;
  v141 = 8;
  v142 = 1;
  v143 = -1;
  v144 = -1;
  v145 = 8;
  v146 = 1;
  v147 = -1;
  v148 = -1;
  v149 = 8;
  result = sub_223D4FFF8(a4, a3, a1, 0x80000000, a2, (uint64_t)&v42, NAN, a6, a7, a8, a9, a10);
  if ((_DWORD)result)
  {
    v14 = result;
    result = 1;
    if (a1)
    {
      if (v14 != 3)
      {
        v15 = (a1 - 1);
        v16 = a2->i32[1];
        v17 = a2[1].i32[0];
        v18 = (a2[1].i32[1] - a2->i32[0]) >> 1;
        v42 = a2->i32[0];
        v43 = __PAIR64__(v17, v16);
        v44 = v18 + v42;
        v45 = v16 + v18;
        v46 = v17 + v18;
        v40 = *(_OWORD *)a4;
        v41 = *(_QWORD *)(a4 + 16);
        result = sub_223D50880(v15, &v42, v14 == 2, &v40);
        if ((_DWORD)result)
        {
          v19 = a2->i32[1];
          v20 = a2[1].i32[0];
          v21 = (a2[1].i32[1] - a2->i32[0]) >> 1;
          v42 = a2->i32[0];
          LODWORD(v43) = v19;
          HIDWORD(v43) = v20 + v21;
          v44 = v21 + v42;
          v45 = v19 + v21;
          v46 = v20 + v21 + v21;
          v40 = *(_OWORD *)a4;
          v41 = *(_QWORD *)(a4 + 16);
          result = sub_223D50880(v15, &v42, v14 == 2, &v40);
          if ((_DWORD)result)
          {
            v22 = a2[1].i32[0];
            v23 = (a2[1].i32[1] - a2->i32[0]) >> 1;
            v24 = v23 + a2->i32[1];
            v42 = a2->i32[0];
            v43 = __PAIR64__(v22, v24);
            v44 = v23 + v42;
            v45 = v24 + v23;
            v46 = v22 + v23;
            v40 = *(_OWORD *)a4;
            v41 = *(_QWORD *)(a4 + 16);
            result = sub_223D50880(v15, &v42, v14 == 2, &v40);
            if ((_DWORD)result)
            {
              v25 = a2[1].i32[0];
              v26 = (a2[1].i32[1] - a2->i32[0]) >> 1;
              v27 = v26 + a2->i32[1];
              v42 = a2->i32[0];
              LODWORD(v43) = v27;
              HIDWORD(v43) = v25 + v26;
              v44 = v26 + v42;
              v45 = v27 + v26;
              v46 = v25 + v26 + v26;
              v40 = *(_OWORD *)a4;
              v41 = *(_QWORD *)(a4 + 16);
              result = sub_223D50880(v15, &v42, v14 == 2, &v40);
              if ((_DWORD)result)
              {
                v28 = a2->i32[1];
                v29 = a2[1].i32[0];
                v30 = (a2[1].i32[1] - a2->i32[0]) >> 1;
                v42 = v30 + a2->i32[0];
                v43 = __PAIR64__(v29, v28);
                v44 = v42 + v30;
                v45 = v28 + v30;
                v46 = v29 + v30;
                v40 = *(_OWORD *)a4;
                v41 = *(_QWORD *)(a4 + 16);
                result = sub_223D50880(v15, &v42, v14 == 2, &v40);
                if ((_DWORD)result)
                {
                  v31 = a2->i32[1];
                  v32 = a2[1].i32[0];
                  v33 = (a2[1].i32[1] - a2->i32[0]) >> 1;
                  v42 = v33 + a2->i32[0];
                  LODWORD(v43) = v31;
                  HIDWORD(v43) = v32 + v33;
                  v44 = v42 + v33;
                  v45 = v31 + v33;
                  v46 = v32 + v33 + v33;
                  v40 = *(_OWORD *)a4;
                  v41 = *(_QWORD *)(a4 + 16);
                  result = sub_223D50880(v15, &v42, v14 == 2, &v40);
                  if ((_DWORD)result)
                  {
                    v34 = a2[1].i32[0];
                    v35 = (a2[1].i32[1] - a2->i32[0]) >> 1;
                    v36 = v35 + a2->i32[1];
                    v42 = v35 + a2->i32[0];
                    v43 = __PAIR64__(v34, v36);
                    v44 = v42 + v35;
                    v45 = v36 + v35;
                    v46 = v34 + v35;
                    v40 = *(_OWORD *)a4;
                    v41 = *(_QWORD *)(a4 + 16);
                    result = sub_223D50880(v15, &v42, v14 == 2, &v40);
                    if ((_DWORD)result)
                    {
                      v37 = a2[1].i32[0];
                      v38 = (a2[1].i32[1] - a2->i32[0]) >> 1;
                      v39 = v38 + a2->i32[1];
                      v42 = v38 + a2->i32[0];
                      LODWORD(v43) = v39;
                      HIDWORD(v43) = v37 + v38;
                      v44 = v42 + v38;
                      v45 = v39 + v38;
                      v46 = v37 + v38 + v38;
                      v40 = *(_OWORD *)a4;
                      v41 = *(_QWORD *)(a4 + 16);
                      return sub_223D50880(v15, &v42, v14 == 2, &v40);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_223D50D84(int *a1, int a2, int *a3, uint64_t a4, uint64_t a5, __int128 *a6, double a7, double a8, float32x4_t a9, float32x4_t a10, double a11, float32x4_t a12)
{
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  uint64_t v21;
  int v22;
  __int32 v23;
  unsigned int v24;
  __int128 v25;
  uint64_t result;
  int v27;
  int v28;
  unsigned int v29;
  __int128 v30;
  __int32 v31;
  unsigned int v32;
  unsigned int v33;
  __int128 v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  int v39;
  __int32 v40;
  unsigned int v41;
  __int128 v42;
  int v43;
  int v44;
  unsigned int v45;
  __int128 v46;
  __int32 v47;
  unsigned int v48;
  unsigned int v49;
  __int128 v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  __int128 v54;
  int v55;
  _BYTE **v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE *v59;
  int v60;
  int v61;
  int v62;
  int32x2_t v63;
  int32x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  unsigned int v67;
  __int32 v68;
  __int32 v69;
  __int32 v70;
  int v71;
  __int32 v72;
  int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  _BYTE *v78;
  __int32 v79;
  __int32 v80;
  __int32 v81;
  __int32 v82;
  __int32 v83;
  __int32 v84;
  unsigned int v85;
  int v86;
  int v87;
  __int32 v88;
  __int32 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int32 v94;
  uint64_t v95;
  unsigned int v96;

  LODWORD(a7) = *(_DWORD *)(a4 + 144);
  *(float32x2_t *)a9.f32 = vcvt_f32_s32(*(int32x2_t *)a3);
  a10.f32[0] = (float)a3[2];
  a9.f32[2] = a10.f32[0];
  v18 = vmulq_n_f32(a9, *(float *)&a7);
  *(float *)&a7 = *(float *)&a7 * (float)(int)(a3[3] - *(_QWORD *)a3);
  v94 = v18.i32[2];
  v93 = v18.i64[0];
  v19 = vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0));
  v96 = v19.u32[2];
  v95 = v19.i64[0];
  if (*(_BYTE *)(a5 + 20) == 1)
  {
    v20 = sub_223E998FC((float *)&v93, (float *)a5, *(float *)(a5 + 12), *(float *)(a5 + 16), v18, *(double *)a10.i64, a11, a12);
    if (!v20)
      return 1;
  }
  else if (*(_BYTE *)(a5 + 20))
  {
    v20 = sub_223E99B90((float *)&v93, (float *)a5, *(float *)(a5 + 12), *(float *)(a5 + 16), v18, a10);
    if (!v20)
      return 1;
  }
  else
  {
    v20 = sub_223E99668((float *)&v93, (float *)a5, *(float *)(a5 + 12), *(float *)(a5 + 16), v18, a10);
    if (!v20)
      return 1;
  }
  if (!a2)
  {
    v55 = *(_DWORD *)(*((_QWORD *)a6 + 1) + 4 * (*a3 & 7 | (8 * (a3[1] & 7)) & 0x3F | ((a3[2] & 7u) << 6)));
    v56 = **(_BYTE ****)(*((_QWORD *)a6 + 2) + 8);
    if ((v55 & 0x10000000) != 0)
      v57 = 0x40000000;
    else
      v57 = 0x80000000;
    if ((v55 & 0x20000000) != 0)
      v58 = v57;
    else
      v58 = v55 & 0xCFFFFFFF;
    if ((v58 & 0x80000000) != 0)
    {
LABEL_57:
      result = 0;
      **v56 = 2;
      return result;
    }
    if (!(v58 >> 30))
    {
      v59 = *v56;
      result = 1;
      if (!*v59)
        *v59 = 1;
      return result;
    }
    return 1;
  }
  if (v20 == 1)
  {
    v21 = (a2 - 1);
    v22 = a3[1];
    v23 = a3[2];
    v24 = (a3[3] - *a3) >> 1;
    LODWORD(v93) = *a3;
    HIDWORD(v93) = v22;
    v94 = v23;
    LODWORD(v95) = v24 + v93;
    HIDWORD(v95) = v22 + v24;
    v96 = v23 + v24;
    v25 = a6[1];
    v90 = *a6;
    v91 = v25;
    v92 = *((_QWORD *)a6 + 4);
    result = sub_223D50D84(a1, v21, &v93, a4, a5, &v90);
    if ((_DWORD)result)
    {
      v27 = a3[1];
      v28 = a3[2];
      v29 = (a3[3] - *a3) >> 1;
      LODWORD(v93) = *a3;
      HIDWORD(v93) = v27;
      v94 = v28 + v29;
      LODWORD(v95) = v29 + v93;
      HIDWORD(v95) = v27 + v29;
      v96 = v28 + v29 + v29;
      v30 = a6[1];
      v90 = *a6;
      v91 = v30;
      v92 = *((_QWORD *)a6 + 4);
      result = sub_223D50D84(a1, v21, &v93, a4, a5, &v90);
      if ((_DWORD)result)
      {
        v31 = a3[2];
        v32 = (a3[3] - *a3) >> 1;
        v33 = v32 + a3[1];
        LODWORD(v93) = *a3;
        HIDWORD(v93) = v33;
        v94 = v31;
        LODWORD(v95) = v32 + v93;
        HIDWORD(v95) = v33 + v32;
        v96 = v31 + v32;
        v34 = a6[1];
        v90 = *a6;
        v91 = v34;
        v92 = *((_QWORD *)a6 + 4);
        result = sub_223D50D84(a1, v21, &v93, a4, a5, &v90);
        if ((_DWORD)result)
        {
          v35 = a3[2];
          v36 = (a3[3] - *a3) >> 1;
          v37 = v36 + a3[1];
          LODWORD(v93) = *a3;
          HIDWORD(v93) = v37;
          v94 = v35 + v36;
          LODWORD(v95) = v36 + v93;
          HIDWORD(v95) = v37 + v36;
          v96 = v35 + v36 + v36;
          v38 = a6[1];
          v90 = *a6;
          v91 = v38;
          v92 = *((_QWORD *)a6 + 4);
          result = sub_223D50D84(a1, v21, &v93, a4, a5, &v90);
          if ((_DWORD)result)
          {
            v39 = a3[1];
            v40 = a3[2];
            v41 = (a3[3] - *a3) >> 1;
            LODWORD(v93) = v41 + *a3;
            HIDWORD(v93) = v39;
            v94 = v40;
            LODWORD(v95) = v93 + v41;
            HIDWORD(v95) = v39 + v41;
            v96 = v40 + v41;
            v42 = a6[1];
            v90 = *a6;
            v91 = v42;
            v92 = *((_QWORD *)a6 + 4);
            result = sub_223D50D84(a1, v21, &v93, a4, a5, &v90);
            if ((_DWORD)result)
            {
              v43 = a3[1];
              v44 = a3[2];
              v45 = (a3[3] - *a3) >> 1;
              LODWORD(v93) = v45 + *a3;
              HIDWORD(v93) = v43;
              v94 = v44 + v45;
              LODWORD(v95) = v93 + v45;
              HIDWORD(v95) = v43 + v45;
              v96 = v44 + v45 + v45;
              v46 = a6[1];
              v90 = *a6;
              v91 = v46;
              v92 = *((_QWORD *)a6 + 4);
              result = sub_223D50D84(a1, v21, &v93, a4, a5, &v90);
              if ((_DWORD)result)
              {
                v47 = a3[2];
                v48 = (a3[3] - *a3) >> 1;
                v49 = v48 + a3[1];
                LODWORD(v93) = v48 + *a3;
                HIDWORD(v93) = v49;
                v94 = v47;
                LODWORD(v95) = v93 + v48;
                HIDWORD(v95) = v49 + v48;
                v96 = v47 + v48;
                v50 = a6[1];
                v90 = *a6;
                v91 = v50;
                v92 = *((_QWORD *)a6 + 4);
                result = sub_223D50D84(a1, v21, &v93, a4, a5, &v90);
                if ((_DWORD)result)
                {
                  v51 = a3[2];
                  v52 = (a3[3] - *a3) >> 1;
                  v53 = v52 + a3[1];
                  LODWORD(v93) = v52 + *a3;
                  HIDWORD(v93) = v53;
                  v94 = v51 + v52;
                  LODWORD(v95) = v93 + v52;
                  HIDWORD(v95) = v53 + v52;
                  v96 = v51 + v52 + v52;
                  v54 = a6[1];
                  v90 = *a6;
                  v91 = v54;
                  v92 = *((_QWORD *)a6 + 4);
                  return sub_223D50D84(a1, v21, &v93, a4, a5, &v90);
                }
              }
            }
          }
        }
      }
    }
    return result;
  }
  v60 = *a3;
  if (*a1 > *a3)
    v60 = *a1;
  v61 = *a1 + 8;
  if (a3[3] < v61)
    v61 = a3[3];
  result = 1;
  v62 = v61 - v60;
  if (v61 > v60)
  {
    v63 = *(int32x2_t *)(a1 + 1);
    v64 = vmax_s32(v63, *(int32x2_t *)(a3 + 1));
    v65 = vmin_s32(*(int32x2_t *)(a3 + 4), vadd_s32(v63, (int32x2_t)0x800000008));
    v66 = vcgt_s32(v65, v64);
    if ((v66.i8[0] & 1) != 0 && (v66.i8[4] & 1) != 0)
    {
      v67 = v60 & 7;
      v68 = v64.i32[0];
      v83 = v64.i32[1];
      v84 = v65.i32[0];
      v69 = v64.i32[1] << 6;
      v70 = 8 * v64.i32[0];
      v85 = v67;
      v86 = v62;
      v80 = v64.i32[0];
      v81 = v65.i32[1];
      v79 = 8 * v64.i32[0];
LABEL_37:
      v82 = v69;
      v71 = v69 & 0x1C0;
      v72 = v70;
      v87 = v71;
LABEL_38:
      v88 = v68;
      v89 = v72;
      v73 = v71 + (v72 & 0x38);
      while (1)
      {
        if (v67 >= 8
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 483, (uint64_t)"RelativePositionIsValid(pos)", 28, (uint64_t)"Invalid grid position", 21, (void (*)(void **))sub_22457406C)|| (v74 = *((_QWORD *)a6 + 1), v73 + v67 >= 0x200)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 499, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v75 = *(_DWORD *)(v74 + 4 * (v73 + v67));
        v56 = **(_BYTE ****)(*((_QWORD *)a6 + 2) + 8);
        v76 = (v75 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
        v77 = (v75 & 0x20000000) != 0 ? v76 : v75 & 0xCFFFFFFF;
        if ((v77 & 0x80000000) != 0)
          goto LABEL_57;
        if (!(v77 >> 30))
        {
          v78 = *v56;
          if (!*v78)
            *v78 = 1;
        }
        ++v67;
        if (!--v62)
        {
          v68 = v88 + 1;
          v72 = v89 + 8;
          v67 = v85;
          v62 = v86;
          v71 = v87;
          if (v88 + 1 != v84)
            goto LABEL_38;
          v69 = v82 + 64;
          result = 1;
          ++v83;
          v70 = v79;
          v68 = v80;
          if (v83 != v81)
            goto LABEL_37;
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_223D513CC(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  _BYTE **v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  unsigned int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  int v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  unsigned int v299;
  int v300;
  unsigned int v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  unsigned int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  unsigned int v320;
  int v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  int v327;
  unsigned int v328;
  unsigned int v329;
  int v330;
  unsigned int v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  int v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  unsigned int v359;
  int v360;
  unsigned int v361;
  unsigned int v362;
  int v363;
  unsigned int v364;
  unsigned int v365;
  int v366;
  unsigned int v367;
  unsigned int v368;
  int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  int v378;
  unsigned int v379;
  unsigned int v380;
  int v381;
  unsigned int v382;
  unsigned int v383;
  int v384;
  unsigned int v385;
  unsigned int v386;
  int v387;
  unsigned int v388;
  unsigned int v389;
  int v390;
  unsigned int v391;
  unsigned int v392;
  int v393;
  unsigned int v394;
  unsigned int v395;
  int v396;
  unsigned int v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  unsigned int v401;
  int v402;
  unsigned int v403;
  unsigned int v404;
  int v405;
  unsigned int v406;
  unsigned int v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  int v414;
  unsigned int v415;
  unsigned int v416;
  int v417;
  unsigned int v418;
  unsigned int v419;
  int v420;
  unsigned int v421;
  unsigned int v422;
  int v423;
  unsigned int v424;
  unsigned int v425;
  int v426;
  unsigned int v427;
  unsigned int v428;
  int v429;
  unsigned int v430;
  unsigned int v431;
  int v432;
  unsigned int v433;
  unsigned int v434;
  int v435;
  unsigned int v436;
  unsigned int v437;
  int v438;
  unsigned int v439;
  unsigned int v440;
  int v441;
  unsigned int v442;
  unsigned int v443;
  int v444;
  unsigned int v445;
  unsigned int v446;
  int v447;
  unsigned int v448;
  unsigned int v449;
  int v450;
  unsigned int v451;
  unsigned int v452;
  int v453;
  unsigned int v454;
  unsigned int v455;
  int v456;
  unsigned int v457;
  unsigned int v458;
  int v459;
  unsigned int v460;
  unsigned int v461;
  int v462;
  unsigned int v463;
  unsigned int v464;
  int v465;
  unsigned int v466;
  unsigned int v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  unsigned int v473;
  int v474;
  unsigned int v475;
  unsigned int v476;
  int v477;
  unsigned int v478;
  unsigned int v479;
  int v480;
  unsigned int v481;
  unsigned int v482;
  int v483;
  unsigned int v484;
  unsigned int v485;
  int v486;
  unsigned int v487;
  unsigned int v488;
  _BYTE *v489;

  v1 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v2 = v1[26];
  v3 = **(_BYTE ****)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  if ((v2 & 0x10000000) != 0)
    v4 = 0x40000000;
  else
    v4 = 0x80000000;
  if ((v2 & 0x20000000) != 0)
    v5 = v4;
  else
    v5 = v2 & 0xCFFFFFFF;
  if ((v5 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v5 >> 30) && !**v3)
    **v3 = 1;
  v6 = v1[27];
  v7 = (v6 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v8 = (v6 & 0x20000000) != 0 ? v7 : v6 & 0xCFFFFFFF;
  if ((v8 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v8 >> 30) && !**v3)
    **v3 = 1;
  v9 = v1[28];
  v10 = (v9 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v11 = (v9 & 0x20000000) != 0 ? v10 : v9 & 0xCFFFFFFF;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v11 >> 30) && !**v3)
    **v3 = 1;
  v12 = v1[29];
  v13 = (v12 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v14 = (v12 & 0x20000000) != 0 ? v13 : v12 & 0xCFFFFFFF;
  if ((v14 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v14 >> 30) && !**v3)
    **v3 = 1;
  v15 = v1[30];
  v16 = (v15 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v17 = (v15 & 0x20000000) != 0 ? v16 : v15 & 0xCFFFFFFF;
  if ((v17 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v17 >> 30) && !**v3)
    **v3 = 1;
  v18 = v1[31];
  v19 = (v18 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v20 = (v18 & 0x20000000) != 0 ? v19 : v18 & 0xCFFFFFFF;
  if ((v20 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v20 >> 30) && !**v3)
    **v3 = 1;
  v21 = v1[32];
  v22 = (v21 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v23 = (v21 & 0x20000000) != 0 ? v22 : v21 & 0xCFFFFFFF;
  if ((v23 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v23 >> 30) && !**v3)
    **v3 = 1;
  v24 = v1[33];
  v25 = (v24 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v26 = (v24 & 0x20000000) != 0 ? v25 : v24 & 0xCFFFFFFF;
  if ((v26 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v26 >> 30) && !**v3)
    **v3 = 1;
  v27 = v1[34];
  v28 = (v27 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v29 = (v27 & 0x20000000) != 0 ? v28 : v27 & 0xCFFFFFFF;
  if ((v29 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v29 >> 30) && !**v3)
    **v3 = 1;
  v30 = v1[35];
  v31 = (v30 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v32 = (v30 & 0x20000000) != 0 ? v31 : v30 & 0xCFFFFFFF;
  if ((v32 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v32 >> 30) && !**v3)
    **v3 = 1;
  v33 = v1[36];
  v34 = (v33 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v35 = (v33 & 0x20000000) != 0 ? v34 : v33 & 0xCFFFFFFF;
  if ((v35 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v35 >> 30) && !**v3)
    **v3 = 1;
  v36 = v1[37];
  v37 = (v36 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v38 = (v36 & 0x20000000) != 0 ? v37 : v36 & 0xCFFFFFFF;
  if ((v38 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v38 >> 30) && !**v3)
    **v3 = 1;
  v39 = v1[38];
  v40 = (v39 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v41 = (v39 & 0x20000000) != 0 ? v40 : v39 & 0xCFFFFFFF;
  if ((v41 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v41 >> 30) && !**v3)
    **v3 = 1;
  v42 = v1[39];
  v43 = (v42 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v44 = (v42 & 0x20000000) != 0 ? v43 : v42 & 0xCFFFFFFF;
  if ((v44 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v44 >> 30) && !**v3)
    **v3 = 1;
  v45 = v1[40];
  v46 = (v45 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v47 = (v45 & 0x20000000) != 0 ? v46 : v45 & 0xCFFFFFFF;
  if ((v47 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v47 >> 30) && !**v3)
    **v3 = 1;
  v48 = v1[41];
  v49 = (v48 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v50 = (v48 & 0x20000000) != 0 ? v49 : v48 & 0xCFFFFFFF;
  if ((v50 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v50 >> 30) && !**v3)
    **v3 = 1;
  v51 = v1[42];
  v52 = (v51 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v53 = (v51 & 0x20000000) != 0 ? v52 : v51 & 0xCFFFFFFF;
  if ((v53 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v53 >> 30) && !**v3)
    **v3 = 1;
  v54 = v1[43];
  v55 = (v54 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v56 = (v54 & 0x20000000) != 0 ? v55 : v54 & 0xCFFFFFFF;
  if ((v56 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v56 >> 30) && !**v3)
    **v3 = 1;
  v57 = v1[44];
  v58 = (v57 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v59 = (v57 & 0x20000000) != 0 ? v58 : v57 & 0xCFFFFFFF;
  if ((v59 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v59 >> 30) && !**v3)
    **v3 = 1;
  v60 = v1[45];
  v61 = (v60 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v62 = (v60 & 0x20000000) != 0 ? v61 : v60 & 0xCFFFFFFF;
  if ((v62 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v62 >> 30) && !**v3)
    **v3 = 1;
  v63 = v1[46];
  v64 = (v63 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v65 = (v63 & 0x20000000) != 0 ? v64 : v63 & 0xCFFFFFFF;
  if ((v65 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v65 >> 30) && !**v3)
    **v3 = 1;
  v66 = v1[47];
  v67 = (v66 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v68 = (v66 & 0x20000000) != 0 ? v67 : v66 & 0xCFFFFFFF;
  if ((v68 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v68 >> 30) && !**v3)
    **v3 = 1;
  v69 = v1[48];
  v70 = (v69 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v71 = (v69 & 0x20000000) != 0 ? v70 : v69 & 0xCFFFFFFF;
  if ((v71 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v71 >> 30) && !**v3)
    **v3 = 1;
  v72 = v1[49];
  v73 = (v72 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v74 = (v72 & 0x20000000) != 0 ? v73 : v72 & 0xCFFFFFFF;
  if ((v74 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v74 >> 30) && !**v3)
    **v3 = 1;
  v75 = v1[50];
  v76 = (v75 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v77 = (v75 & 0x20000000) != 0 ? v76 : v75 & 0xCFFFFFFF;
  if ((v77 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v77 >> 30) && !**v3)
    **v3 = 1;
  v78 = v1[51];
  v79 = (v78 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v80 = (v78 & 0x20000000) != 0 ? v79 : v78 & 0xCFFFFFFF;
  if ((v80 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v80 >> 30) && !**v3)
    **v3 = 1;
  v81 = v1[52];
  v82 = (v81 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v83 = (v81 & 0x20000000) != 0 ? v82 : v81 & 0xCFFFFFFF;
  if ((v83 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v83 >> 30) && !**v3)
    **v3 = 1;
  v84 = v1[53];
  v85 = (v84 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v86 = (v84 & 0x20000000) != 0 ? v85 : v84 & 0xCFFFFFFF;
  if ((v86 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v86 >> 30) && !**v3)
    **v3 = 1;
  v87 = v1[54];
  v88 = (v87 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v89 = (v87 & 0x20000000) != 0 ? v88 : v87 & 0xCFFFFFFF;
  if ((v89 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v89 >> 30) && !**v3)
    **v3 = 1;
  v90 = v1[55];
  v91 = (v90 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v92 = (v90 & 0x20000000) != 0 ? v91 : v90 & 0xCFFFFFFF;
  if ((v92 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v92 >> 30) && !**v3)
    **v3 = 1;
  v93 = v1[56];
  v94 = (v93 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v95 = (v93 & 0x20000000) != 0 ? v94 : v93 & 0xCFFFFFFF;
  if ((v95 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v95 >> 30) && !**v3)
    **v3 = 1;
  v96 = v1[57];
  v97 = (v96 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v98 = (v96 & 0x20000000) != 0 ? v97 : v96 & 0xCFFFFFFF;
  if ((v98 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v98 >> 30) && !**v3)
    **v3 = 1;
  v99 = v1[58];
  v100 = (v99 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v101 = (v99 & 0x20000000) != 0 ? v100 : v99 & 0xCFFFFFFF;
  if ((v101 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v101 >> 30) && !**v3)
    **v3 = 1;
  v102 = v1[59];
  v103 = (v102 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v104 = (v102 & 0x20000000) != 0 ? v103 : v102 & 0xCFFFFFFF;
  if ((v104 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v104 >> 30) && !**v3)
    **v3 = 1;
  v105 = v1[60];
  v106 = (v105 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v107 = (v105 & 0x20000000) != 0 ? v106 : v105 & 0xCFFFFFFF;
  if ((v107 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v107 >> 30) && !**v3)
    **v3 = 1;
  v108 = v1[61];
  v109 = (v108 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v110 = (v108 & 0x20000000) != 0 ? v109 : v108 & 0xCFFFFFFF;
  if ((v110 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v110 >> 30) && !**v3)
    **v3 = 1;
  v111 = v1[62];
  v112 = (v111 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v113 = (v111 & 0x20000000) != 0 ? v112 : v111 & 0xCFFFFFFF;
  if ((v113 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v113 >> 30) && !**v3)
    **v3 = 1;
  v114 = v1[63];
  v115 = (v114 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v116 = (v114 & 0x20000000) != 0 ? v115 : v114 & 0xCFFFFFFF;
  if ((v116 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v116 >> 30) && !**v3)
    **v3 = 1;
  v117 = v1[64];
  v118 = (v117 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v119 = (v117 & 0x20000000) != 0 ? v118 : v117 & 0xCFFFFFFF;
  if ((v119 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v119 >> 30) && !**v3)
    **v3 = 1;
  v120 = v1[65];
  v121 = (v120 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v122 = (v120 & 0x20000000) != 0 ? v121 : v120 & 0xCFFFFFFF;
  if ((v122 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v122 >> 30) && !**v3)
    **v3 = 1;
  v123 = v1[66];
  v124 = (v123 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v125 = (v123 & 0x20000000) != 0 ? v124 : v123 & 0xCFFFFFFF;
  if ((v125 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v125 >> 30) && !**v3)
    **v3 = 1;
  v126 = v1[67];
  v127 = (v126 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v128 = (v126 & 0x20000000) != 0 ? v127 : v126 & 0xCFFFFFFF;
  if ((v128 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v128 >> 30) && !**v3)
    **v3 = 1;
  v129 = v1[68];
  v130 = (v129 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v131 = (v129 & 0x20000000) != 0 ? v130 : v129 & 0xCFFFFFFF;
  if ((v131 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v131 >> 30) && !**v3)
    **v3 = 1;
  v132 = v1[69];
  v133 = (v132 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v134 = (v132 & 0x20000000) != 0 ? v133 : v132 & 0xCFFFFFFF;
  if ((v134 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v134 >> 30) && !**v3)
    **v3 = 1;
  v135 = v1[70];
  v136 = (v135 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v137 = (v135 & 0x20000000) != 0 ? v136 : v135 & 0xCFFFFFFF;
  if ((v137 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v137 >> 30) && !**v3)
    **v3 = 1;
  v138 = v1[71];
  v139 = (v138 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v140 = (v138 & 0x20000000) != 0 ? v139 : v138 & 0xCFFFFFFF;
  if ((v140 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v140 >> 30) && !**v3)
    **v3 = 1;
  v141 = v1[72];
  v142 = (v141 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v143 = (v141 & 0x20000000) != 0 ? v142 : v141 & 0xCFFFFFFF;
  if ((v143 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v143 >> 30) && !**v3)
    **v3 = 1;
  v144 = v1[73];
  v145 = (v144 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v146 = (v144 & 0x20000000) != 0 ? v145 : v144 & 0xCFFFFFFF;
  if ((v146 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v146 >> 30) && !**v3)
    **v3 = 1;
  v147 = v1[74];
  v148 = (v147 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v149 = (v147 & 0x20000000) != 0 ? v148 : v147 & 0xCFFFFFFF;
  if ((v149 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v149 >> 30) && !**v3)
    **v3 = 1;
  v150 = v1[75];
  v151 = (v150 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v152 = (v150 & 0x20000000) != 0 ? v151 : v150 & 0xCFFFFFFF;
  if ((v152 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v152 >> 30) && !**v3)
    **v3 = 1;
  v153 = v1[76];
  v154 = (v153 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v155 = (v153 & 0x20000000) != 0 ? v154 : v153 & 0xCFFFFFFF;
  if ((v155 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v155 >> 30) && !**v3)
    **v3 = 1;
  v156 = v1[77];
  v157 = (v156 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v158 = (v156 & 0x20000000) != 0 ? v157 : v156 & 0xCFFFFFFF;
  if ((v158 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v158 >> 30) && !**v3)
    **v3 = 1;
  v159 = v1[78];
  v160 = (v159 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v161 = (v159 & 0x20000000) != 0 ? v160 : v159 & 0xCFFFFFFF;
  if ((v161 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v161 >> 30) && !**v3)
    **v3 = 1;
  v162 = v1[79];
  v163 = (v162 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v164 = (v162 & 0x20000000) != 0 ? v163 : v162 & 0xCFFFFFFF;
  if ((v164 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v164 >> 30) && !**v3)
    **v3 = 1;
  v165 = v1[80];
  v166 = (v165 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v167 = (v165 & 0x20000000) != 0 ? v166 : v165 & 0xCFFFFFFF;
  if ((v167 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v167 >> 30) && !**v3)
    **v3 = 1;
  v168 = v1[81];
  v169 = (v168 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v170 = (v168 & 0x20000000) != 0 ? v169 : v168 & 0xCFFFFFFF;
  if ((v170 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v170 >> 30) && !**v3)
    **v3 = 1;
  v171 = v1[82];
  v172 = (v171 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v173 = (v171 & 0x20000000) != 0 ? v172 : v171 & 0xCFFFFFFF;
  if ((v173 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v173 >> 30) && !**v3)
    **v3 = 1;
  v174 = v1[83];
  v175 = (v174 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v176 = (v174 & 0x20000000) != 0 ? v175 : v174 & 0xCFFFFFFF;
  if ((v176 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v176 >> 30) && !**v3)
    **v3 = 1;
  v177 = v1[84];
  v178 = (v177 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v179 = (v177 & 0x20000000) != 0 ? v178 : v177 & 0xCFFFFFFF;
  if ((v179 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v179 >> 30) && !**v3)
    **v3 = 1;
  v180 = v1[85];
  v181 = (v180 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v182 = (v180 & 0x20000000) != 0 ? v181 : v180 & 0xCFFFFFFF;
  if ((v182 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v182 >> 30) && !**v3)
    **v3 = 1;
  v183 = v1[86];
  v184 = (v183 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v185 = (v183 & 0x20000000) != 0 ? v184 : v183 & 0xCFFFFFFF;
  if ((v185 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v185 >> 30) && !**v3)
    **v3 = 1;
  v186 = v1[87];
  v187 = (v186 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v188 = (v186 & 0x20000000) != 0 ? v187 : v186 & 0xCFFFFFFF;
  if ((v188 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v188 >> 30) && !**v3)
    **v3 = 1;
  v189 = v1[88];
  v190 = (v189 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v191 = (v189 & 0x20000000) != 0 ? v190 : v189 & 0xCFFFFFFF;
  if ((v191 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v191 >> 30) && !**v3)
    **v3 = 1;
  v192 = v1[89];
  v193 = (v192 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v194 = (v192 & 0x20000000) != 0 ? v193 : v192 & 0xCFFFFFFF;
  if ((v194 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v194 >> 30) && !**v3)
    **v3 = 1;
  v195 = v1[90];
  v196 = (v195 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v197 = (v195 & 0x20000000) != 0 ? v196 : v195 & 0xCFFFFFFF;
  if ((v197 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v197 >> 30) && !**v3)
    **v3 = 1;
  v198 = v1[91];
  v199 = (v198 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v200 = (v198 & 0x20000000) != 0 ? v199 : v198 & 0xCFFFFFFF;
  if ((v200 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v200 >> 30) && !**v3)
    **v3 = 1;
  v201 = v1[92];
  v202 = (v201 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v203 = (v201 & 0x20000000) != 0 ? v202 : v201 & 0xCFFFFFFF;
  if ((v203 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v203 >> 30) && !**v3)
    **v3 = 1;
  v204 = v1[93];
  v205 = (v204 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v206 = (v204 & 0x20000000) != 0 ? v205 : v204 & 0xCFFFFFFF;
  if ((v206 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v206 >> 30) && !**v3)
    **v3 = 1;
  v207 = v1[94];
  v208 = (v207 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v209 = (v207 & 0x20000000) != 0 ? v208 : v207 & 0xCFFFFFFF;
  if ((v209 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v209 >> 30) && !**v3)
    **v3 = 1;
  v210 = v1[95];
  v211 = (v210 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v212 = (v210 & 0x20000000) != 0 ? v211 : v210 & 0xCFFFFFFF;
  if ((v212 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v212 >> 30) && !**v3)
    **v3 = 1;
  v213 = v1[96];
  v214 = (v213 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v215 = (v213 & 0x20000000) != 0 ? v214 : v213 & 0xCFFFFFFF;
  if ((v215 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v215 >> 30) && !**v3)
    **v3 = 1;
  v216 = v1[97];
  v217 = (v216 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v218 = (v216 & 0x20000000) != 0 ? v217 : v216 & 0xCFFFFFFF;
  if ((v218 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v218 >> 30) && !**v3)
    **v3 = 1;
  v219 = v1[98];
  v220 = (v219 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v221 = (v219 & 0x20000000) != 0 ? v220 : v219 & 0xCFFFFFFF;
  if ((v221 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v221 >> 30) && !**v3)
    **v3 = 1;
  v222 = v1[99];
  v223 = (v222 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v224 = (v222 & 0x20000000) != 0 ? v223 : v222 & 0xCFFFFFFF;
  if ((v224 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v224 >> 30) && !**v3)
    **v3 = 1;
  v225 = v1[100];
  v226 = (v225 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v227 = (v225 & 0x20000000) != 0 ? v226 : v225 & 0xCFFFFFFF;
  if ((v227 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v227 >> 30) && !**v3)
    **v3 = 1;
  v228 = v1[101];
  v229 = (v228 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v230 = (v228 & 0x20000000) != 0 ? v229 : v228 & 0xCFFFFFFF;
  if ((v230 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v230 >> 30) && !**v3)
    **v3 = 1;
  v231 = v1[102];
  v232 = (v231 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v233 = (v231 & 0x20000000) != 0 ? v232 : v231 & 0xCFFFFFFF;
  if ((v233 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v233 >> 30) && !**v3)
    **v3 = 1;
  v234 = v1[103];
  v235 = (v234 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v236 = (v234 & 0x20000000) != 0 ? v235 : v234 & 0xCFFFFFFF;
  if ((v236 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v236 >> 30) && !**v3)
    **v3 = 1;
  v237 = v1[104];
  v238 = (v237 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v239 = (v237 & 0x20000000) != 0 ? v238 : v237 & 0xCFFFFFFF;
  if ((v239 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v239 >> 30) && !**v3)
    **v3 = 1;
  v240 = v1[105];
  v241 = (v240 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v242 = (v240 & 0x20000000) != 0 ? v241 : v240 & 0xCFFFFFFF;
  if ((v242 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v242 >> 30) && !**v3)
    **v3 = 1;
  v243 = v1[106];
  v244 = (v243 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v245 = (v243 & 0x20000000) != 0 ? v244 : v243 & 0xCFFFFFFF;
  if ((v245 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v245 >> 30) && !**v3)
    **v3 = 1;
  v246 = v1[107];
  v247 = (v246 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v248 = (v246 & 0x20000000) != 0 ? v247 : v246 & 0xCFFFFFFF;
  if ((v248 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v248 >> 30) && !**v3)
    **v3 = 1;
  v249 = v1[108];
  v250 = (v249 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v251 = (v249 & 0x20000000) != 0 ? v250 : v249 & 0xCFFFFFFF;
  if ((v251 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v251 >> 30) && !**v3)
    **v3 = 1;
  v252 = v1[109];
  v253 = (v252 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v254 = (v252 & 0x20000000) != 0 ? v253 : v252 & 0xCFFFFFFF;
  if ((v254 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v254 >> 30) && !**v3)
    **v3 = 1;
  v255 = v1[110];
  v256 = (v255 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v257 = (v255 & 0x20000000) != 0 ? v256 : v255 & 0xCFFFFFFF;
  if ((v257 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v257 >> 30) && !**v3)
    **v3 = 1;
  v258 = v1[111];
  v259 = (v258 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v260 = (v258 & 0x20000000) != 0 ? v259 : v258 & 0xCFFFFFFF;
  if ((v260 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v260 >> 30) && !**v3)
    **v3 = 1;
  v261 = v1[112];
  v262 = (v261 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v263 = (v261 & 0x20000000) != 0 ? v262 : v261 & 0xCFFFFFFF;
  if ((v263 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v263 >> 30) && !**v3)
    **v3 = 1;
  v264 = v1[113];
  v265 = (v264 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v266 = (v264 & 0x20000000) != 0 ? v265 : v264 & 0xCFFFFFFF;
  if ((v266 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v266 >> 30) && !**v3)
    **v3 = 1;
  v267 = v1[114];
  v268 = (v267 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v269 = (v267 & 0x20000000) != 0 ? v268 : v267 & 0xCFFFFFFF;
  if ((v269 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v269 >> 30) && !**v3)
    **v3 = 1;
  v270 = v1[115];
  v271 = (v270 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v272 = (v270 & 0x20000000) != 0 ? v271 : v270 & 0xCFFFFFFF;
  if ((v272 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v272 >> 30) && !**v3)
    **v3 = 1;
  v273 = v1[116];
  v274 = (v273 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v275 = (v273 & 0x20000000) != 0 ? v274 : v273 & 0xCFFFFFFF;
  if ((v275 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v275 >> 30) && !**v3)
    **v3 = 1;
  v276 = v1[117];
  v277 = (v276 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v278 = (v276 & 0x20000000) != 0 ? v277 : v276 & 0xCFFFFFFF;
  if ((v278 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v278 >> 30) && !**v3)
    **v3 = 1;
  v279 = v1[118];
  v280 = (v279 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v281 = (v279 & 0x20000000) != 0 ? v280 : v279 & 0xCFFFFFFF;
  if ((v281 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v281 >> 30) && !**v3)
    **v3 = 1;
  v282 = v1[119];
  v283 = (v282 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v284 = (v282 & 0x20000000) != 0 ? v283 : v282 & 0xCFFFFFFF;
  if ((v284 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v284 >> 30) && !**v3)
    **v3 = 1;
  v285 = v1[120];
  v286 = (v285 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v287 = (v285 & 0x20000000) != 0 ? v286 : v285 & 0xCFFFFFFF;
  if ((v287 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v287 >> 30) && !**v3)
    **v3 = 1;
  v288 = v1[121];
  v289 = (v288 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v290 = (v288 & 0x20000000) != 0 ? v289 : v288 & 0xCFFFFFFF;
  if ((v290 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v290 >> 30) && !**v3)
    **v3 = 1;
  v291 = v1[122];
  v292 = (v291 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v293 = (v291 & 0x20000000) != 0 ? v292 : v291 & 0xCFFFFFFF;
  if ((v293 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v293 >> 30) && !**v3)
    **v3 = 1;
  v294 = v1[123];
  v295 = (v294 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v296 = (v294 & 0x20000000) != 0 ? v295 : v294 & 0xCFFFFFFF;
  if ((v296 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v296 >> 30) && !**v3)
    **v3 = 1;
  v297 = v1[124];
  v298 = (v297 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v299 = (v297 & 0x20000000) != 0 ? v298 : v297 & 0xCFFFFFFF;
  if ((v299 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v299 >> 30) && !**v3)
    **v3 = 1;
  v300 = v1[125];
  v301 = (v300 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v302 = (v300 & 0x20000000) != 0 ? v301 : v300 & 0xCFFFFFFF;
  if ((v302 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v302 >> 30) && !**v3)
    **v3 = 1;
  v303 = v1[126];
  v304 = (v303 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v305 = (v303 & 0x20000000) != 0 ? v304 : v303 & 0xCFFFFFFF;
  if ((v305 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v305 >> 30) && !**v3)
    **v3 = 1;
  v306 = v1[127];
  v307 = (v306 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v308 = (v306 & 0x20000000) != 0 ? v307 : v306 & 0xCFFFFFFF;
  if ((v308 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v308 >> 30) && !**v3)
    **v3 = 1;
  v309 = v1[128];
  v310 = (v309 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v311 = (v309 & 0x20000000) != 0 ? v310 : v309 & 0xCFFFFFFF;
  if ((v311 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v311 >> 30) && !**v3)
    **v3 = 1;
  v312 = v1[129];
  v313 = (v312 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v314 = (v312 & 0x20000000) != 0 ? v313 : v312 & 0xCFFFFFFF;
  if ((v314 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v314 >> 30) && !**v3)
    **v3 = 1;
  v315 = v1[130];
  v316 = (v315 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v317 = (v315 & 0x20000000) != 0 ? v316 : v315 & 0xCFFFFFFF;
  if ((v317 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v317 >> 30) && !**v3)
    **v3 = 1;
  v318 = v1[131];
  v319 = (v318 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v320 = (v318 & 0x20000000) != 0 ? v319 : v318 & 0xCFFFFFFF;
  if ((v320 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v320 >> 30) && !**v3)
    **v3 = 1;
  v321 = v1[132];
  v322 = (v321 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v323 = (v321 & 0x20000000) != 0 ? v322 : v321 & 0xCFFFFFFF;
  if ((v323 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v323 >> 30) && !**v3)
    **v3 = 1;
  v324 = v1[133];
  v325 = (v324 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v326 = (v324 & 0x20000000) != 0 ? v325 : v324 & 0xCFFFFFFF;
  if ((v326 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v326 >> 30) && !**v3)
    **v3 = 1;
  v327 = v1[134];
  v328 = (v327 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v329 = (v327 & 0x20000000) != 0 ? v328 : v327 & 0xCFFFFFFF;
  if ((v329 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v329 >> 30) && !**v3)
    **v3 = 1;
  v330 = v1[135];
  v331 = (v330 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v332 = (v330 & 0x20000000) != 0 ? v331 : v330 & 0xCFFFFFFF;
  if ((v332 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v332 >> 30) && !**v3)
    **v3 = 1;
  v333 = v1[136];
  v334 = (v333 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v335 = (v333 & 0x20000000) != 0 ? v334 : v333 & 0xCFFFFFFF;
  if ((v335 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v335 >> 30) && !**v3)
    **v3 = 1;
  v336 = v1[137];
  v337 = (v336 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v338 = (v336 & 0x20000000) != 0 ? v337 : v336 & 0xCFFFFFFF;
  if ((v338 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v338 >> 30) && !**v3)
    **v3 = 1;
  v339 = v1[138];
  v340 = (v339 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v341 = (v339 & 0x20000000) != 0 ? v340 : v339 & 0xCFFFFFFF;
  if ((v341 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v341 >> 30) && !**v3)
    **v3 = 1;
  v342 = v1[139];
  v343 = (v342 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v344 = (v342 & 0x20000000) != 0 ? v343 : v342 & 0xCFFFFFFF;
  if ((v344 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v344 >> 30) && !**v3)
    **v3 = 1;
  v345 = v1[140];
  v346 = (v345 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v347 = (v345 & 0x20000000) != 0 ? v346 : v345 & 0xCFFFFFFF;
  if ((v347 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v347 >> 30) && !**v3)
    **v3 = 1;
  v348 = v1[141];
  v349 = (v348 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v350 = (v348 & 0x20000000) != 0 ? v349 : v348 & 0xCFFFFFFF;
  if ((v350 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v350 >> 30) && !**v3)
    **v3 = 1;
  v351 = v1[142];
  v352 = (v351 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v353 = (v351 & 0x20000000) != 0 ? v352 : v351 & 0xCFFFFFFF;
  if ((v353 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v353 >> 30) && !**v3)
    **v3 = 1;
  v354 = v1[143];
  v355 = (v354 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v356 = (v354 & 0x20000000) != 0 ? v355 : v354 & 0xCFFFFFFF;
  if ((v356 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v356 >> 30) && !**v3)
    **v3 = 1;
  v357 = v1[144];
  v358 = (v357 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v359 = (v357 & 0x20000000) != 0 ? v358 : v357 & 0xCFFFFFFF;
  if ((v359 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v359 >> 30) && !**v3)
    **v3 = 1;
  v360 = v1[145];
  v361 = (v360 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v362 = (v360 & 0x20000000) != 0 ? v361 : v360 & 0xCFFFFFFF;
  if ((v362 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v362 >> 30) && !**v3)
    **v3 = 1;
  v363 = v1[146];
  v364 = (v363 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v365 = (v363 & 0x20000000) != 0 ? v364 : v363 & 0xCFFFFFFF;
  if ((v365 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v365 >> 30) && !**v3)
    **v3 = 1;
  v366 = v1[147];
  v367 = (v366 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v368 = (v366 & 0x20000000) != 0 ? v367 : v366 & 0xCFFFFFFF;
  if ((v368 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v368 >> 30) && !**v3)
    **v3 = 1;
  v369 = v1[148];
  v370 = (v369 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v371 = (v369 & 0x20000000) != 0 ? v370 : v369 & 0xCFFFFFFF;
  if ((v371 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v371 >> 30) && !**v3)
    **v3 = 1;
  v372 = v1[149];
  v373 = (v372 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v374 = (v372 & 0x20000000) != 0 ? v373 : v372 & 0xCFFFFFFF;
  if ((v374 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v374 >> 30) && !**v3)
    **v3 = 1;
  v375 = v1[150];
  v376 = (v375 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v377 = (v375 & 0x20000000) != 0 ? v376 : v375 & 0xCFFFFFFF;
  if ((v377 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v377 >> 30) && !**v3)
    **v3 = 1;
  v378 = v1[151];
  v379 = (v378 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v380 = (v378 & 0x20000000) != 0 ? v379 : v378 & 0xCFFFFFFF;
  if ((v380 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v380 >> 30) && !**v3)
    **v3 = 1;
  v381 = v1[152];
  v382 = (v381 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v383 = (v381 & 0x20000000) != 0 ? v382 : v381 & 0xCFFFFFFF;
  if ((v383 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v383 >> 30) && !**v3)
    **v3 = 1;
  v384 = v1[153];
  v385 = (v384 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v386 = (v384 & 0x20000000) != 0 ? v385 : v384 & 0xCFFFFFFF;
  if ((v386 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v386 >> 30) && !**v3)
    **v3 = 1;
  v387 = v1[154];
  v388 = (v387 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v389 = (v387 & 0x20000000) != 0 ? v388 : v387 & 0xCFFFFFFF;
  if ((v389 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v389 >> 30) && !**v3)
    **v3 = 1;
  v390 = v1[155];
  v391 = (v390 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v392 = (v390 & 0x20000000) != 0 ? v391 : v390 & 0xCFFFFFFF;
  if ((v392 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v392 >> 30) && !**v3)
    **v3 = 1;
  v393 = v1[156];
  v394 = (v393 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v395 = (v393 & 0x20000000) != 0 ? v394 : v393 & 0xCFFFFFFF;
  if ((v395 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v395 >> 30) && !**v3)
    **v3 = 1;
  v396 = v1[157];
  v397 = (v396 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v398 = (v396 & 0x20000000) != 0 ? v397 : v396 & 0xCFFFFFFF;
  if ((v398 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v398 >> 30) && !**v3)
    **v3 = 1;
  v399 = v1[158];
  v400 = (v399 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v401 = (v399 & 0x20000000) != 0 ? v400 : v399 & 0xCFFFFFFF;
  if ((v401 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v401 >> 30) && !**v3)
    **v3 = 1;
  v402 = v1[159];
  v403 = (v402 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v404 = (v402 & 0x20000000) != 0 ? v403 : v402 & 0xCFFFFFFF;
  if ((v404 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v404 >> 30) && !**v3)
    **v3 = 1;
  v405 = v1[160];
  v406 = (v405 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v407 = (v405 & 0x20000000) != 0 ? v406 : v405 & 0xCFFFFFFF;
  if ((v407 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v407 >> 30) && !**v3)
    **v3 = 1;
  v408 = v1[161];
  v409 = (v408 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v410 = (v408 & 0x20000000) != 0 ? v409 : v408 & 0xCFFFFFFF;
  if ((v410 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v410 >> 30) && !**v3)
    **v3 = 1;
  v411 = v1[162];
  v412 = (v411 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v413 = (v411 & 0x20000000) != 0 ? v412 : v411 & 0xCFFFFFFF;
  if ((v413 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v413 >> 30) && !**v3)
    **v3 = 1;
  v414 = v1[163];
  v415 = (v414 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v416 = (v414 & 0x20000000) != 0 ? v415 : v414 & 0xCFFFFFFF;
  if ((v416 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v416 >> 30) && !**v3)
    **v3 = 1;
  v417 = v1[164];
  v418 = (v417 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v419 = (v417 & 0x20000000) != 0 ? v418 : v417 & 0xCFFFFFFF;
  if ((v419 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v419 >> 30) && !**v3)
    **v3 = 1;
  v420 = v1[165];
  v421 = (v420 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v422 = (v420 & 0x20000000) != 0 ? v421 : v420 & 0xCFFFFFFF;
  if ((v422 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v422 >> 30) && !**v3)
    **v3 = 1;
  v423 = v1[166];
  v424 = (v423 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v425 = (v423 & 0x20000000) != 0 ? v424 : v423 & 0xCFFFFFFF;
  if ((v425 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v425 >> 30) && !**v3)
    **v3 = 1;
  v426 = v1[167];
  v427 = (v426 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v428 = (v426 & 0x20000000) != 0 ? v427 : v426 & 0xCFFFFFFF;
  if ((v428 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v428 >> 30) && !**v3)
    **v3 = 1;
  v429 = v1[168];
  v430 = (v429 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v431 = (v429 & 0x20000000) != 0 ? v430 : v429 & 0xCFFFFFFF;
  if ((v431 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v431 >> 30) && !**v3)
    **v3 = 1;
  v432 = v1[169];
  v433 = (v432 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v434 = (v432 & 0x20000000) != 0 ? v433 : v432 & 0xCFFFFFFF;
  if ((v434 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v434 >> 30) && !**v3)
    **v3 = 1;
  v435 = v1[170];
  v436 = (v435 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v437 = (v435 & 0x20000000) != 0 ? v436 : v435 & 0xCFFFFFFF;
  if ((v437 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v437 >> 30) && !**v3)
    **v3 = 1;
  v438 = v1[171];
  v439 = (v438 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v440 = (v438 & 0x20000000) != 0 ? v439 : v438 & 0xCFFFFFFF;
  if ((v440 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v440 >> 30) && !**v3)
    **v3 = 1;
  v441 = v1[172];
  v442 = (v441 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v443 = (v441 & 0x20000000) != 0 ? v442 : v441 & 0xCFFFFFFF;
  if ((v443 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v443 >> 30) && !**v3)
    **v3 = 1;
  v444 = v1[173];
  v445 = (v444 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v446 = (v444 & 0x20000000) != 0 ? v445 : v444 & 0xCFFFFFFF;
  if ((v446 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v446 >> 30) && !**v3)
    **v3 = 1;
  v447 = v1[174];
  v448 = (v447 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v449 = (v447 & 0x20000000) != 0 ? v448 : v447 & 0xCFFFFFFF;
  if ((v449 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v449 >> 30) && !**v3)
    **v3 = 1;
  v450 = v1[175];
  v451 = (v450 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v452 = (v450 & 0x20000000) != 0 ? v451 : v450 & 0xCFFFFFFF;
  if ((v452 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v452 >> 30) && !**v3)
    **v3 = 1;
  v453 = v1[176];
  v454 = (v453 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v455 = (v453 & 0x20000000) != 0 ? v454 : v453 & 0xCFFFFFFF;
  if ((v455 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v455 >> 30) && !**v3)
    **v3 = 1;
  v456 = v1[177];
  v457 = (v456 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v458 = (v456 & 0x20000000) != 0 ? v457 : v456 & 0xCFFFFFFF;
  if ((v458 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v458 >> 30) && !**v3)
    **v3 = 1;
  v459 = v1[178];
  v460 = (v459 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v461 = (v459 & 0x20000000) != 0 ? v460 : v459 & 0xCFFFFFFF;
  if ((v461 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v461 >> 30) && !**v3)
    **v3 = 1;
  v462 = v1[179];
  v463 = (v462 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v464 = (v462 & 0x20000000) != 0 ? v463 : v462 & 0xCFFFFFFF;
  if ((v464 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v464 >> 30) && !**v3)
    **v3 = 1;
  v465 = v1[180];
  v466 = (v465 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v467 = (v465 & 0x20000000) != 0 ? v466 : v465 & 0xCFFFFFFF;
  if ((v467 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v467 >> 30) && !**v3)
    **v3 = 1;
  v468 = v1[181];
  v469 = (v468 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v470 = (v468 & 0x20000000) != 0 ? v469 : v468 & 0xCFFFFFFF;
  if ((v470 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v470 >> 30) && !**v3)
    **v3 = 1;
  v471 = v1[182];
  v472 = (v471 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v473 = (v471 & 0x20000000) != 0 ? v472 : v471 & 0xCFFFFFFF;
  if ((v473 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v473 >> 30) && !**v3)
    **v3 = 1;
  v474 = v1[183];
  v475 = (v474 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v476 = (v474 & 0x20000000) != 0 ? v475 : v474 & 0xCFFFFFFF;
  if ((v476 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v476 >> 30) && !**v3)
    **v3 = 1;
  v477 = v1[184];
  v478 = (v477 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v479 = (v477 & 0x20000000) != 0 ? v478 : v477 & 0xCFFFFFFF;
  if ((v479 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v479 >> 30) && !**v3)
    **v3 = 1;
  v480 = v1[185];
  v481 = (v480 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v482 = (v480 & 0x20000000) != 0 ? v481 : v480 & 0xCFFFFFFF;
  if ((v482 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v482 >> 30) && !**v3)
    **v3 = 1;
  v483 = v1[186];
  v484 = (v483 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v485 = (v483 & 0x20000000) != 0 ? v484 : v483 & 0xCFFFFFFF;
  if ((v485 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v485 >> 30) && !**v3)
    **v3 = 1;
  v486 = v1[187];
  v487 = (v486 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v488 = (v486 & 0x20000000) != 0 ? v487 : v486 & 0xCFFFFFFF;
  if ((v488 & 0x80000000) != 0)
  {
LABEL_1622:
    **v3 = 2;
    return 0;
  }
  else
  {
    if (!(v488 >> 30))
    {
      v489 = *v3;
      if (!*v489)
        *v489 = 1;
    }
    return sub_223D539F4(a1);
  }
}

uint64_t sub_223D539F4(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  _BYTE **v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  unsigned int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  int v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  unsigned int v299;
  int v300;
  unsigned int v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  unsigned int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  unsigned int v320;
  int v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  int v327;
  unsigned int v328;
  unsigned int v329;
  int v330;
  unsigned int v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  int v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  unsigned int v359;
  int v360;
  unsigned int v361;
  unsigned int v362;
  int v363;
  unsigned int v364;
  unsigned int v365;
  int v366;
  unsigned int v367;
  unsigned int v368;
  int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  int v378;
  unsigned int v379;
  unsigned int v380;
  int v381;
  unsigned int v382;
  unsigned int v383;
  int v384;
  unsigned int v385;
  unsigned int v386;
  int v387;
  unsigned int v388;
  unsigned int v389;
  int v390;
  unsigned int v391;
  unsigned int v392;
  int v393;
  unsigned int v394;
  unsigned int v395;
  int v396;
  unsigned int v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  unsigned int v401;
  int v402;
  unsigned int v403;
  unsigned int v404;
  int v405;
  unsigned int v406;
  unsigned int v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  int v414;
  unsigned int v415;
  unsigned int v416;
  int v417;
  unsigned int v418;
  unsigned int v419;
  int v420;
  unsigned int v421;
  unsigned int v422;
  int v423;
  unsigned int v424;
  unsigned int v425;
  int v426;
  unsigned int v427;
  unsigned int v428;
  int v429;
  unsigned int v430;
  unsigned int v431;
  int v432;
  unsigned int v433;
  unsigned int v434;
  int v435;
  unsigned int v436;
  unsigned int v437;
  int v438;
  unsigned int v439;
  unsigned int v440;
  int v441;
  unsigned int v442;
  unsigned int v443;
  int v444;
  unsigned int v445;
  unsigned int v446;
  int v447;
  unsigned int v448;
  unsigned int v449;
  int v450;
  unsigned int v451;
  unsigned int v452;
  int v453;
  unsigned int v454;
  unsigned int v455;
  int v456;
  unsigned int v457;
  unsigned int v458;
  int v459;
  unsigned int v460;
  unsigned int v461;
  int v462;
  unsigned int v463;
  unsigned int v464;
  int v465;
  unsigned int v466;
  unsigned int v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  unsigned int v473;
  int v474;
  unsigned int v475;
  unsigned int v476;
  int v477;
  unsigned int v478;
  unsigned int v479;
  int v480;
  unsigned int v481;
  unsigned int v482;
  int v483;
  unsigned int v484;
  unsigned int v485;
  int v486;
  unsigned int v487;
  unsigned int v488;
  _BYTE *v489;

  v1 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v2 = v1[188];
  v3 = **(_BYTE ****)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  if ((v2 & 0x10000000) != 0)
    v4 = 0x40000000;
  else
    v4 = 0x80000000;
  if ((v2 & 0x20000000) != 0)
    v5 = v4;
  else
    v5 = v2 & 0xCFFFFFFF;
  if ((v5 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v5 >> 30) && !**v3)
    **v3 = 1;
  v6 = v1[189];
  v7 = (v6 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v8 = (v6 & 0x20000000) != 0 ? v7 : v6 & 0xCFFFFFFF;
  if ((v8 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v8 >> 30) && !**v3)
    **v3 = 1;
  v9 = v1[190];
  v10 = (v9 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v11 = (v9 & 0x20000000) != 0 ? v10 : v9 & 0xCFFFFFFF;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v11 >> 30) && !**v3)
    **v3 = 1;
  v12 = v1[191];
  v13 = (v12 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v14 = (v12 & 0x20000000) != 0 ? v13 : v12 & 0xCFFFFFFF;
  if ((v14 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v14 >> 30) && !**v3)
    **v3 = 1;
  v15 = v1[192];
  v16 = (v15 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v17 = (v15 & 0x20000000) != 0 ? v16 : v15 & 0xCFFFFFFF;
  if ((v17 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v17 >> 30) && !**v3)
    **v3 = 1;
  v18 = v1[193];
  v19 = (v18 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v20 = (v18 & 0x20000000) != 0 ? v19 : v18 & 0xCFFFFFFF;
  if ((v20 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v20 >> 30) && !**v3)
    **v3 = 1;
  v21 = v1[194];
  v22 = (v21 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v23 = (v21 & 0x20000000) != 0 ? v22 : v21 & 0xCFFFFFFF;
  if ((v23 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v23 >> 30) && !**v3)
    **v3 = 1;
  v24 = v1[195];
  v25 = (v24 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v26 = (v24 & 0x20000000) != 0 ? v25 : v24 & 0xCFFFFFFF;
  if ((v26 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v26 >> 30) && !**v3)
    **v3 = 1;
  v27 = v1[196];
  v28 = (v27 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v29 = (v27 & 0x20000000) != 0 ? v28 : v27 & 0xCFFFFFFF;
  if ((v29 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v29 >> 30) && !**v3)
    **v3 = 1;
  v30 = v1[197];
  v31 = (v30 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v32 = (v30 & 0x20000000) != 0 ? v31 : v30 & 0xCFFFFFFF;
  if ((v32 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v32 >> 30) && !**v3)
    **v3 = 1;
  v33 = v1[198];
  v34 = (v33 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v35 = (v33 & 0x20000000) != 0 ? v34 : v33 & 0xCFFFFFFF;
  if ((v35 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v35 >> 30) && !**v3)
    **v3 = 1;
  v36 = v1[199];
  v37 = (v36 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v38 = (v36 & 0x20000000) != 0 ? v37 : v36 & 0xCFFFFFFF;
  if ((v38 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v38 >> 30) && !**v3)
    **v3 = 1;
  v39 = v1[200];
  v40 = (v39 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v41 = (v39 & 0x20000000) != 0 ? v40 : v39 & 0xCFFFFFFF;
  if ((v41 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v41 >> 30) && !**v3)
    **v3 = 1;
  v42 = v1[201];
  v43 = (v42 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v44 = (v42 & 0x20000000) != 0 ? v43 : v42 & 0xCFFFFFFF;
  if ((v44 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v44 >> 30) && !**v3)
    **v3 = 1;
  v45 = v1[202];
  v46 = (v45 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v47 = (v45 & 0x20000000) != 0 ? v46 : v45 & 0xCFFFFFFF;
  if ((v47 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v47 >> 30) && !**v3)
    **v3 = 1;
  v48 = v1[203];
  v49 = (v48 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v50 = (v48 & 0x20000000) != 0 ? v49 : v48 & 0xCFFFFFFF;
  if ((v50 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v50 >> 30) && !**v3)
    **v3 = 1;
  v51 = v1[204];
  v52 = (v51 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v53 = (v51 & 0x20000000) != 0 ? v52 : v51 & 0xCFFFFFFF;
  if ((v53 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v53 >> 30) && !**v3)
    **v3 = 1;
  v54 = v1[205];
  v55 = (v54 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v56 = (v54 & 0x20000000) != 0 ? v55 : v54 & 0xCFFFFFFF;
  if ((v56 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v56 >> 30) && !**v3)
    **v3 = 1;
  v57 = v1[206];
  v58 = (v57 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v59 = (v57 & 0x20000000) != 0 ? v58 : v57 & 0xCFFFFFFF;
  if ((v59 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v59 >> 30) && !**v3)
    **v3 = 1;
  v60 = v1[207];
  v61 = (v60 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v62 = (v60 & 0x20000000) != 0 ? v61 : v60 & 0xCFFFFFFF;
  if ((v62 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v62 >> 30) && !**v3)
    **v3 = 1;
  v63 = v1[208];
  v64 = (v63 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v65 = (v63 & 0x20000000) != 0 ? v64 : v63 & 0xCFFFFFFF;
  if ((v65 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v65 >> 30) && !**v3)
    **v3 = 1;
  v66 = v1[209];
  v67 = (v66 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v68 = (v66 & 0x20000000) != 0 ? v67 : v66 & 0xCFFFFFFF;
  if ((v68 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v68 >> 30) && !**v3)
    **v3 = 1;
  v69 = v1[210];
  v70 = (v69 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v71 = (v69 & 0x20000000) != 0 ? v70 : v69 & 0xCFFFFFFF;
  if ((v71 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v71 >> 30) && !**v3)
    **v3 = 1;
  v72 = v1[211];
  v73 = (v72 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v74 = (v72 & 0x20000000) != 0 ? v73 : v72 & 0xCFFFFFFF;
  if ((v74 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v74 >> 30) && !**v3)
    **v3 = 1;
  v75 = v1[212];
  v76 = (v75 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v77 = (v75 & 0x20000000) != 0 ? v76 : v75 & 0xCFFFFFFF;
  if ((v77 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v77 >> 30) && !**v3)
    **v3 = 1;
  v78 = v1[213];
  v79 = (v78 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v80 = (v78 & 0x20000000) != 0 ? v79 : v78 & 0xCFFFFFFF;
  if ((v80 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v80 >> 30) && !**v3)
    **v3 = 1;
  v81 = v1[214];
  v82 = (v81 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v83 = (v81 & 0x20000000) != 0 ? v82 : v81 & 0xCFFFFFFF;
  if ((v83 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v83 >> 30) && !**v3)
    **v3 = 1;
  v84 = v1[215];
  v85 = (v84 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v86 = (v84 & 0x20000000) != 0 ? v85 : v84 & 0xCFFFFFFF;
  if ((v86 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v86 >> 30) && !**v3)
    **v3 = 1;
  v87 = v1[216];
  v88 = (v87 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v89 = (v87 & 0x20000000) != 0 ? v88 : v87 & 0xCFFFFFFF;
  if ((v89 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v89 >> 30) && !**v3)
    **v3 = 1;
  v90 = v1[217];
  v91 = (v90 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v92 = (v90 & 0x20000000) != 0 ? v91 : v90 & 0xCFFFFFFF;
  if ((v92 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v92 >> 30) && !**v3)
    **v3 = 1;
  v93 = v1[218];
  v94 = (v93 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v95 = (v93 & 0x20000000) != 0 ? v94 : v93 & 0xCFFFFFFF;
  if ((v95 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v95 >> 30) && !**v3)
    **v3 = 1;
  v96 = v1[219];
  v97 = (v96 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v98 = (v96 & 0x20000000) != 0 ? v97 : v96 & 0xCFFFFFFF;
  if ((v98 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v98 >> 30) && !**v3)
    **v3 = 1;
  v99 = v1[220];
  v100 = (v99 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v101 = (v99 & 0x20000000) != 0 ? v100 : v99 & 0xCFFFFFFF;
  if ((v101 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v101 >> 30) && !**v3)
    **v3 = 1;
  v102 = v1[221];
  v103 = (v102 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v104 = (v102 & 0x20000000) != 0 ? v103 : v102 & 0xCFFFFFFF;
  if ((v104 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v104 >> 30) && !**v3)
    **v3 = 1;
  v105 = v1[222];
  v106 = (v105 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v107 = (v105 & 0x20000000) != 0 ? v106 : v105 & 0xCFFFFFFF;
  if ((v107 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v107 >> 30) && !**v3)
    **v3 = 1;
  v108 = v1[223];
  v109 = (v108 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v110 = (v108 & 0x20000000) != 0 ? v109 : v108 & 0xCFFFFFFF;
  if ((v110 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v110 >> 30) && !**v3)
    **v3 = 1;
  v111 = v1[224];
  v112 = (v111 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v113 = (v111 & 0x20000000) != 0 ? v112 : v111 & 0xCFFFFFFF;
  if ((v113 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v113 >> 30) && !**v3)
    **v3 = 1;
  v114 = v1[225];
  v115 = (v114 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v116 = (v114 & 0x20000000) != 0 ? v115 : v114 & 0xCFFFFFFF;
  if ((v116 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v116 >> 30) && !**v3)
    **v3 = 1;
  v117 = v1[226];
  v118 = (v117 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v119 = (v117 & 0x20000000) != 0 ? v118 : v117 & 0xCFFFFFFF;
  if ((v119 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v119 >> 30) && !**v3)
    **v3 = 1;
  v120 = v1[227];
  v121 = (v120 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v122 = (v120 & 0x20000000) != 0 ? v121 : v120 & 0xCFFFFFFF;
  if ((v122 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v122 >> 30) && !**v3)
    **v3 = 1;
  v123 = v1[228];
  v124 = (v123 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v125 = (v123 & 0x20000000) != 0 ? v124 : v123 & 0xCFFFFFFF;
  if ((v125 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v125 >> 30) && !**v3)
    **v3 = 1;
  v126 = v1[229];
  v127 = (v126 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v128 = (v126 & 0x20000000) != 0 ? v127 : v126 & 0xCFFFFFFF;
  if ((v128 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v128 >> 30) && !**v3)
    **v3 = 1;
  v129 = v1[230];
  v130 = (v129 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v131 = (v129 & 0x20000000) != 0 ? v130 : v129 & 0xCFFFFFFF;
  if ((v131 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v131 >> 30) && !**v3)
    **v3 = 1;
  v132 = v1[231];
  v133 = (v132 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v134 = (v132 & 0x20000000) != 0 ? v133 : v132 & 0xCFFFFFFF;
  if ((v134 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v134 >> 30) && !**v3)
    **v3 = 1;
  v135 = v1[232];
  v136 = (v135 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v137 = (v135 & 0x20000000) != 0 ? v136 : v135 & 0xCFFFFFFF;
  if ((v137 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v137 >> 30) && !**v3)
    **v3 = 1;
  v138 = v1[233];
  v139 = (v138 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v140 = (v138 & 0x20000000) != 0 ? v139 : v138 & 0xCFFFFFFF;
  if ((v140 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v140 >> 30) && !**v3)
    **v3 = 1;
  v141 = v1[234];
  v142 = (v141 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v143 = (v141 & 0x20000000) != 0 ? v142 : v141 & 0xCFFFFFFF;
  if ((v143 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v143 >> 30) && !**v3)
    **v3 = 1;
  v144 = v1[235];
  v145 = (v144 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v146 = (v144 & 0x20000000) != 0 ? v145 : v144 & 0xCFFFFFFF;
  if ((v146 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v146 >> 30) && !**v3)
    **v3 = 1;
  v147 = v1[236];
  v148 = (v147 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v149 = (v147 & 0x20000000) != 0 ? v148 : v147 & 0xCFFFFFFF;
  if ((v149 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v149 >> 30) && !**v3)
    **v3 = 1;
  v150 = v1[237];
  v151 = (v150 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v152 = (v150 & 0x20000000) != 0 ? v151 : v150 & 0xCFFFFFFF;
  if ((v152 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v152 >> 30) && !**v3)
    **v3 = 1;
  v153 = v1[238];
  v154 = (v153 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v155 = (v153 & 0x20000000) != 0 ? v154 : v153 & 0xCFFFFFFF;
  if ((v155 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v155 >> 30) && !**v3)
    **v3 = 1;
  v156 = v1[239];
  v157 = (v156 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v158 = (v156 & 0x20000000) != 0 ? v157 : v156 & 0xCFFFFFFF;
  if ((v158 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v158 >> 30) && !**v3)
    **v3 = 1;
  v159 = v1[240];
  v160 = (v159 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v161 = (v159 & 0x20000000) != 0 ? v160 : v159 & 0xCFFFFFFF;
  if ((v161 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v161 >> 30) && !**v3)
    **v3 = 1;
  v162 = v1[241];
  v163 = (v162 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v164 = (v162 & 0x20000000) != 0 ? v163 : v162 & 0xCFFFFFFF;
  if ((v164 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v164 >> 30) && !**v3)
    **v3 = 1;
  v165 = v1[242];
  v166 = (v165 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v167 = (v165 & 0x20000000) != 0 ? v166 : v165 & 0xCFFFFFFF;
  if ((v167 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v167 >> 30) && !**v3)
    **v3 = 1;
  v168 = v1[243];
  v169 = (v168 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v170 = (v168 & 0x20000000) != 0 ? v169 : v168 & 0xCFFFFFFF;
  if ((v170 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v170 >> 30) && !**v3)
    **v3 = 1;
  v171 = v1[244];
  v172 = (v171 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v173 = (v171 & 0x20000000) != 0 ? v172 : v171 & 0xCFFFFFFF;
  if ((v173 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v173 >> 30) && !**v3)
    **v3 = 1;
  v174 = v1[245];
  v175 = (v174 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v176 = (v174 & 0x20000000) != 0 ? v175 : v174 & 0xCFFFFFFF;
  if ((v176 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v176 >> 30) && !**v3)
    **v3 = 1;
  v177 = v1[246];
  v178 = (v177 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v179 = (v177 & 0x20000000) != 0 ? v178 : v177 & 0xCFFFFFFF;
  if ((v179 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v179 >> 30) && !**v3)
    **v3 = 1;
  v180 = v1[247];
  v181 = (v180 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v182 = (v180 & 0x20000000) != 0 ? v181 : v180 & 0xCFFFFFFF;
  if ((v182 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v182 >> 30) && !**v3)
    **v3 = 1;
  v183 = v1[248];
  v184 = (v183 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v185 = (v183 & 0x20000000) != 0 ? v184 : v183 & 0xCFFFFFFF;
  if ((v185 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v185 >> 30) && !**v3)
    **v3 = 1;
  v186 = v1[249];
  v187 = (v186 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v188 = (v186 & 0x20000000) != 0 ? v187 : v186 & 0xCFFFFFFF;
  if ((v188 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v188 >> 30) && !**v3)
    **v3 = 1;
  v189 = v1[250];
  v190 = (v189 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v191 = (v189 & 0x20000000) != 0 ? v190 : v189 & 0xCFFFFFFF;
  if ((v191 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v191 >> 30) && !**v3)
    **v3 = 1;
  v192 = v1[251];
  v193 = (v192 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v194 = (v192 & 0x20000000) != 0 ? v193 : v192 & 0xCFFFFFFF;
  if ((v194 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v194 >> 30) && !**v3)
    **v3 = 1;
  v195 = v1[252];
  v196 = (v195 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v197 = (v195 & 0x20000000) != 0 ? v196 : v195 & 0xCFFFFFFF;
  if ((v197 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v197 >> 30) && !**v3)
    **v3 = 1;
  v198 = v1[253];
  v199 = (v198 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v200 = (v198 & 0x20000000) != 0 ? v199 : v198 & 0xCFFFFFFF;
  if ((v200 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v200 >> 30) && !**v3)
    **v3 = 1;
  v201 = v1[254];
  v202 = (v201 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v203 = (v201 & 0x20000000) != 0 ? v202 : v201 & 0xCFFFFFFF;
  if ((v203 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v203 >> 30) && !**v3)
    **v3 = 1;
  v204 = v1[255];
  v205 = (v204 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v206 = (v204 & 0x20000000) != 0 ? v205 : v204 & 0xCFFFFFFF;
  if ((v206 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v206 >> 30) && !**v3)
    **v3 = 1;
  v207 = v1[256];
  v208 = (v207 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v209 = (v207 & 0x20000000) != 0 ? v208 : v207 & 0xCFFFFFFF;
  if ((v209 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v209 >> 30) && !**v3)
    **v3 = 1;
  v210 = v1[257];
  v211 = (v210 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v212 = (v210 & 0x20000000) != 0 ? v211 : v210 & 0xCFFFFFFF;
  if ((v212 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v212 >> 30) && !**v3)
    **v3 = 1;
  v213 = v1[258];
  v214 = (v213 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v215 = (v213 & 0x20000000) != 0 ? v214 : v213 & 0xCFFFFFFF;
  if ((v215 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v215 >> 30) && !**v3)
    **v3 = 1;
  v216 = v1[259];
  v217 = (v216 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v218 = (v216 & 0x20000000) != 0 ? v217 : v216 & 0xCFFFFFFF;
  if ((v218 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v218 >> 30) && !**v3)
    **v3 = 1;
  v219 = v1[260];
  v220 = (v219 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v221 = (v219 & 0x20000000) != 0 ? v220 : v219 & 0xCFFFFFFF;
  if ((v221 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v221 >> 30) && !**v3)
    **v3 = 1;
  v222 = v1[261];
  v223 = (v222 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v224 = (v222 & 0x20000000) != 0 ? v223 : v222 & 0xCFFFFFFF;
  if ((v224 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v224 >> 30) && !**v3)
    **v3 = 1;
  v225 = v1[262];
  v226 = (v225 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v227 = (v225 & 0x20000000) != 0 ? v226 : v225 & 0xCFFFFFFF;
  if ((v227 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v227 >> 30) && !**v3)
    **v3 = 1;
  v228 = v1[263];
  v229 = (v228 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v230 = (v228 & 0x20000000) != 0 ? v229 : v228 & 0xCFFFFFFF;
  if ((v230 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v230 >> 30) && !**v3)
    **v3 = 1;
  v231 = v1[264];
  v232 = (v231 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v233 = (v231 & 0x20000000) != 0 ? v232 : v231 & 0xCFFFFFFF;
  if ((v233 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v233 >> 30) && !**v3)
    **v3 = 1;
  v234 = v1[265];
  v235 = (v234 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v236 = (v234 & 0x20000000) != 0 ? v235 : v234 & 0xCFFFFFFF;
  if ((v236 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v236 >> 30) && !**v3)
    **v3 = 1;
  v237 = v1[266];
  v238 = (v237 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v239 = (v237 & 0x20000000) != 0 ? v238 : v237 & 0xCFFFFFFF;
  if ((v239 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v239 >> 30) && !**v3)
    **v3 = 1;
  v240 = v1[267];
  v241 = (v240 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v242 = (v240 & 0x20000000) != 0 ? v241 : v240 & 0xCFFFFFFF;
  if ((v242 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v242 >> 30) && !**v3)
    **v3 = 1;
  v243 = v1[268];
  v244 = (v243 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v245 = (v243 & 0x20000000) != 0 ? v244 : v243 & 0xCFFFFFFF;
  if ((v245 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v245 >> 30) && !**v3)
    **v3 = 1;
  v246 = v1[269];
  v247 = (v246 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v248 = (v246 & 0x20000000) != 0 ? v247 : v246 & 0xCFFFFFFF;
  if ((v248 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v248 >> 30) && !**v3)
    **v3 = 1;
  v249 = v1[270];
  v250 = (v249 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v251 = (v249 & 0x20000000) != 0 ? v250 : v249 & 0xCFFFFFFF;
  if ((v251 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v251 >> 30) && !**v3)
    **v3 = 1;
  v252 = v1[271];
  v253 = (v252 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v254 = (v252 & 0x20000000) != 0 ? v253 : v252 & 0xCFFFFFFF;
  if ((v254 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v254 >> 30) && !**v3)
    **v3 = 1;
  v255 = v1[272];
  v256 = (v255 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v257 = (v255 & 0x20000000) != 0 ? v256 : v255 & 0xCFFFFFFF;
  if ((v257 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v257 >> 30) && !**v3)
    **v3 = 1;
  v258 = v1[273];
  v259 = (v258 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v260 = (v258 & 0x20000000) != 0 ? v259 : v258 & 0xCFFFFFFF;
  if ((v260 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v260 >> 30) && !**v3)
    **v3 = 1;
  v261 = v1[274];
  v262 = (v261 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v263 = (v261 & 0x20000000) != 0 ? v262 : v261 & 0xCFFFFFFF;
  if ((v263 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v263 >> 30) && !**v3)
    **v3 = 1;
  v264 = v1[275];
  v265 = (v264 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v266 = (v264 & 0x20000000) != 0 ? v265 : v264 & 0xCFFFFFFF;
  if ((v266 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v266 >> 30) && !**v3)
    **v3 = 1;
  v267 = v1[276];
  v268 = (v267 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v269 = (v267 & 0x20000000) != 0 ? v268 : v267 & 0xCFFFFFFF;
  if ((v269 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v269 >> 30) && !**v3)
    **v3 = 1;
  v270 = v1[277];
  v271 = (v270 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v272 = (v270 & 0x20000000) != 0 ? v271 : v270 & 0xCFFFFFFF;
  if ((v272 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v272 >> 30) && !**v3)
    **v3 = 1;
  v273 = v1[278];
  v274 = (v273 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v275 = (v273 & 0x20000000) != 0 ? v274 : v273 & 0xCFFFFFFF;
  if ((v275 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v275 >> 30) && !**v3)
    **v3 = 1;
  v276 = v1[279];
  v277 = (v276 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v278 = (v276 & 0x20000000) != 0 ? v277 : v276 & 0xCFFFFFFF;
  if ((v278 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v278 >> 30) && !**v3)
    **v3 = 1;
  v279 = v1[280];
  v280 = (v279 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v281 = (v279 & 0x20000000) != 0 ? v280 : v279 & 0xCFFFFFFF;
  if ((v281 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v281 >> 30) && !**v3)
    **v3 = 1;
  v282 = v1[281];
  v283 = (v282 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v284 = (v282 & 0x20000000) != 0 ? v283 : v282 & 0xCFFFFFFF;
  if ((v284 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v284 >> 30) && !**v3)
    **v3 = 1;
  v285 = v1[282];
  v286 = (v285 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v287 = (v285 & 0x20000000) != 0 ? v286 : v285 & 0xCFFFFFFF;
  if ((v287 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v287 >> 30) && !**v3)
    **v3 = 1;
  v288 = v1[283];
  v289 = (v288 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v290 = (v288 & 0x20000000) != 0 ? v289 : v288 & 0xCFFFFFFF;
  if ((v290 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v290 >> 30) && !**v3)
    **v3 = 1;
  v291 = v1[284];
  v292 = (v291 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v293 = (v291 & 0x20000000) != 0 ? v292 : v291 & 0xCFFFFFFF;
  if ((v293 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v293 >> 30) && !**v3)
    **v3 = 1;
  v294 = v1[285];
  v295 = (v294 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v296 = (v294 & 0x20000000) != 0 ? v295 : v294 & 0xCFFFFFFF;
  if ((v296 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v296 >> 30) && !**v3)
    **v3 = 1;
  v297 = v1[286];
  v298 = (v297 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v299 = (v297 & 0x20000000) != 0 ? v298 : v297 & 0xCFFFFFFF;
  if ((v299 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v299 >> 30) && !**v3)
    **v3 = 1;
  v300 = v1[287];
  v301 = (v300 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v302 = (v300 & 0x20000000) != 0 ? v301 : v300 & 0xCFFFFFFF;
  if ((v302 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v302 >> 30) && !**v3)
    **v3 = 1;
  v303 = v1[288];
  v304 = (v303 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v305 = (v303 & 0x20000000) != 0 ? v304 : v303 & 0xCFFFFFFF;
  if ((v305 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v305 >> 30) && !**v3)
    **v3 = 1;
  v306 = v1[289];
  v307 = (v306 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v308 = (v306 & 0x20000000) != 0 ? v307 : v306 & 0xCFFFFFFF;
  if ((v308 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v308 >> 30) && !**v3)
    **v3 = 1;
  v309 = v1[290];
  v310 = (v309 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v311 = (v309 & 0x20000000) != 0 ? v310 : v309 & 0xCFFFFFFF;
  if ((v311 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v311 >> 30) && !**v3)
    **v3 = 1;
  v312 = v1[291];
  v313 = (v312 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v314 = (v312 & 0x20000000) != 0 ? v313 : v312 & 0xCFFFFFFF;
  if ((v314 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v314 >> 30) && !**v3)
    **v3 = 1;
  v315 = v1[292];
  v316 = (v315 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v317 = (v315 & 0x20000000) != 0 ? v316 : v315 & 0xCFFFFFFF;
  if ((v317 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v317 >> 30) && !**v3)
    **v3 = 1;
  v318 = v1[293];
  v319 = (v318 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v320 = (v318 & 0x20000000) != 0 ? v319 : v318 & 0xCFFFFFFF;
  if ((v320 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v320 >> 30) && !**v3)
    **v3 = 1;
  v321 = v1[294];
  v322 = (v321 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v323 = (v321 & 0x20000000) != 0 ? v322 : v321 & 0xCFFFFFFF;
  if ((v323 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v323 >> 30) && !**v3)
    **v3 = 1;
  v324 = v1[295];
  v325 = (v324 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v326 = (v324 & 0x20000000) != 0 ? v325 : v324 & 0xCFFFFFFF;
  if ((v326 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v326 >> 30) && !**v3)
    **v3 = 1;
  v327 = v1[296];
  v328 = (v327 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v329 = (v327 & 0x20000000) != 0 ? v328 : v327 & 0xCFFFFFFF;
  if ((v329 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v329 >> 30) && !**v3)
    **v3 = 1;
  v330 = v1[297];
  v331 = (v330 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v332 = (v330 & 0x20000000) != 0 ? v331 : v330 & 0xCFFFFFFF;
  if ((v332 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v332 >> 30) && !**v3)
    **v3 = 1;
  v333 = v1[298];
  v334 = (v333 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v335 = (v333 & 0x20000000) != 0 ? v334 : v333 & 0xCFFFFFFF;
  if ((v335 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v335 >> 30) && !**v3)
    **v3 = 1;
  v336 = v1[299];
  v337 = (v336 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v338 = (v336 & 0x20000000) != 0 ? v337 : v336 & 0xCFFFFFFF;
  if ((v338 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v338 >> 30) && !**v3)
    **v3 = 1;
  v339 = v1[300];
  v340 = (v339 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v341 = (v339 & 0x20000000) != 0 ? v340 : v339 & 0xCFFFFFFF;
  if ((v341 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v341 >> 30) && !**v3)
    **v3 = 1;
  v342 = v1[301];
  v343 = (v342 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v344 = (v342 & 0x20000000) != 0 ? v343 : v342 & 0xCFFFFFFF;
  if ((v344 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v344 >> 30) && !**v3)
    **v3 = 1;
  v345 = v1[302];
  v346 = (v345 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v347 = (v345 & 0x20000000) != 0 ? v346 : v345 & 0xCFFFFFFF;
  if ((v347 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v347 >> 30) && !**v3)
    **v3 = 1;
  v348 = v1[303];
  v349 = (v348 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v350 = (v348 & 0x20000000) != 0 ? v349 : v348 & 0xCFFFFFFF;
  if ((v350 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v350 >> 30) && !**v3)
    **v3 = 1;
  v351 = v1[304];
  v352 = (v351 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v353 = (v351 & 0x20000000) != 0 ? v352 : v351 & 0xCFFFFFFF;
  if ((v353 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v353 >> 30) && !**v3)
    **v3 = 1;
  v354 = v1[305];
  v355 = (v354 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v356 = (v354 & 0x20000000) != 0 ? v355 : v354 & 0xCFFFFFFF;
  if ((v356 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v356 >> 30) && !**v3)
    **v3 = 1;
  v357 = v1[306];
  v358 = (v357 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v359 = (v357 & 0x20000000) != 0 ? v358 : v357 & 0xCFFFFFFF;
  if ((v359 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v359 >> 30) && !**v3)
    **v3 = 1;
  v360 = v1[307];
  v361 = (v360 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v362 = (v360 & 0x20000000) != 0 ? v361 : v360 & 0xCFFFFFFF;
  if ((v362 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v362 >> 30) && !**v3)
    **v3 = 1;
  v363 = v1[308];
  v364 = (v363 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v365 = (v363 & 0x20000000) != 0 ? v364 : v363 & 0xCFFFFFFF;
  if ((v365 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v365 >> 30) && !**v3)
    **v3 = 1;
  v366 = v1[309];
  v367 = (v366 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v368 = (v366 & 0x20000000) != 0 ? v367 : v366 & 0xCFFFFFFF;
  if ((v368 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v368 >> 30) && !**v3)
    **v3 = 1;
  v369 = v1[310];
  v370 = (v369 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v371 = (v369 & 0x20000000) != 0 ? v370 : v369 & 0xCFFFFFFF;
  if ((v371 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v371 >> 30) && !**v3)
    **v3 = 1;
  v372 = v1[311];
  v373 = (v372 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v374 = (v372 & 0x20000000) != 0 ? v373 : v372 & 0xCFFFFFFF;
  if ((v374 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v374 >> 30) && !**v3)
    **v3 = 1;
  v375 = v1[312];
  v376 = (v375 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v377 = (v375 & 0x20000000) != 0 ? v376 : v375 & 0xCFFFFFFF;
  if ((v377 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v377 >> 30) && !**v3)
    **v3 = 1;
  v378 = v1[313];
  v379 = (v378 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v380 = (v378 & 0x20000000) != 0 ? v379 : v378 & 0xCFFFFFFF;
  if ((v380 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v380 >> 30) && !**v3)
    **v3 = 1;
  v381 = v1[314];
  v382 = (v381 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v383 = (v381 & 0x20000000) != 0 ? v382 : v381 & 0xCFFFFFFF;
  if ((v383 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v383 >> 30) && !**v3)
    **v3 = 1;
  v384 = v1[315];
  v385 = (v384 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v386 = (v384 & 0x20000000) != 0 ? v385 : v384 & 0xCFFFFFFF;
  if ((v386 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v386 >> 30) && !**v3)
    **v3 = 1;
  v387 = v1[316];
  v388 = (v387 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v389 = (v387 & 0x20000000) != 0 ? v388 : v387 & 0xCFFFFFFF;
  if ((v389 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v389 >> 30) && !**v3)
    **v3 = 1;
  v390 = v1[317];
  v391 = (v390 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v392 = (v390 & 0x20000000) != 0 ? v391 : v390 & 0xCFFFFFFF;
  if ((v392 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v392 >> 30) && !**v3)
    **v3 = 1;
  v393 = v1[318];
  v394 = (v393 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v395 = (v393 & 0x20000000) != 0 ? v394 : v393 & 0xCFFFFFFF;
  if ((v395 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v395 >> 30) && !**v3)
    **v3 = 1;
  v396 = v1[319];
  v397 = (v396 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v398 = (v396 & 0x20000000) != 0 ? v397 : v396 & 0xCFFFFFFF;
  if ((v398 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v398 >> 30) && !**v3)
    **v3 = 1;
  v399 = v1[320];
  v400 = (v399 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v401 = (v399 & 0x20000000) != 0 ? v400 : v399 & 0xCFFFFFFF;
  if ((v401 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v401 >> 30) && !**v3)
    **v3 = 1;
  v402 = v1[321];
  v403 = (v402 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v404 = (v402 & 0x20000000) != 0 ? v403 : v402 & 0xCFFFFFFF;
  if ((v404 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v404 >> 30) && !**v3)
    **v3 = 1;
  v405 = v1[322];
  v406 = (v405 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v407 = (v405 & 0x20000000) != 0 ? v406 : v405 & 0xCFFFFFFF;
  if ((v407 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v407 >> 30) && !**v3)
    **v3 = 1;
  v408 = v1[323];
  v409 = (v408 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v410 = (v408 & 0x20000000) != 0 ? v409 : v408 & 0xCFFFFFFF;
  if ((v410 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v410 >> 30) && !**v3)
    **v3 = 1;
  v411 = v1[324];
  v412 = (v411 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v413 = (v411 & 0x20000000) != 0 ? v412 : v411 & 0xCFFFFFFF;
  if ((v413 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v413 >> 30) && !**v3)
    **v3 = 1;
  v414 = v1[325];
  v415 = (v414 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v416 = (v414 & 0x20000000) != 0 ? v415 : v414 & 0xCFFFFFFF;
  if ((v416 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v416 >> 30) && !**v3)
    **v3 = 1;
  v417 = v1[326];
  v418 = (v417 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v419 = (v417 & 0x20000000) != 0 ? v418 : v417 & 0xCFFFFFFF;
  if ((v419 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v419 >> 30) && !**v3)
    **v3 = 1;
  v420 = v1[327];
  v421 = (v420 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v422 = (v420 & 0x20000000) != 0 ? v421 : v420 & 0xCFFFFFFF;
  if ((v422 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v422 >> 30) && !**v3)
    **v3 = 1;
  v423 = v1[328];
  v424 = (v423 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v425 = (v423 & 0x20000000) != 0 ? v424 : v423 & 0xCFFFFFFF;
  if ((v425 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v425 >> 30) && !**v3)
    **v3 = 1;
  v426 = v1[329];
  v427 = (v426 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v428 = (v426 & 0x20000000) != 0 ? v427 : v426 & 0xCFFFFFFF;
  if ((v428 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v428 >> 30) && !**v3)
    **v3 = 1;
  v429 = v1[330];
  v430 = (v429 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v431 = (v429 & 0x20000000) != 0 ? v430 : v429 & 0xCFFFFFFF;
  if ((v431 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v431 >> 30) && !**v3)
    **v3 = 1;
  v432 = v1[331];
  v433 = (v432 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v434 = (v432 & 0x20000000) != 0 ? v433 : v432 & 0xCFFFFFFF;
  if ((v434 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v434 >> 30) && !**v3)
    **v3 = 1;
  v435 = v1[332];
  v436 = (v435 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v437 = (v435 & 0x20000000) != 0 ? v436 : v435 & 0xCFFFFFFF;
  if ((v437 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v437 >> 30) && !**v3)
    **v3 = 1;
  v438 = v1[333];
  v439 = (v438 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v440 = (v438 & 0x20000000) != 0 ? v439 : v438 & 0xCFFFFFFF;
  if ((v440 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v440 >> 30) && !**v3)
    **v3 = 1;
  v441 = v1[334];
  v442 = (v441 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v443 = (v441 & 0x20000000) != 0 ? v442 : v441 & 0xCFFFFFFF;
  if ((v443 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v443 >> 30) && !**v3)
    **v3 = 1;
  v444 = v1[335];
  v445 = (v444 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v446 = (v444 & 0x20000000) != 0 ? v445 : v444 & 0xCFFFFFFF;
  if ((v446 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v446 >> 30) && !**v3)
    **v3 = 1;
  v447 = v1[336];
  v448 = (v447 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v449 = (v447 & 0x20000000) != 0 ? v448 : v447 & 0xCFFFFFFF;
  if ((v449 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v449 >> 30) && !**v3)
    **v3 = 1;
  v450 = v1[337];
  v451 = (v450 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v452 = (v450 & 0x20000000) != 0 ? v451 : v450 & 0xCFFFFFFF;
  if ((v452 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v452 >> 30) && !**v3)
    **v3 = 1;
  v453 = v1[338];
  v454 = (v453 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v455 = (v453 & 0x20000000) != 0 ? v454 : v453 & 0xCFFFFFFF;
  if ((v455 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v455 >> 30) && !**v3)
    **v3 = 1;
  v456 = v1[339];
  v457 = (v456 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v458 = (v456 & 0x20000000) != 0 ? v457 : v456 & 0xCFFFFFFF;
  if ((v458 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v458 >> 30) && !**v3)
    **v3 = 1;
  v459 = v1[340];
  v460 = (v459 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v461 = (v459 & 0x20000000) != 0 ? v460 : v459 & 0xCFFFFFFF;
  if ((v461 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v461 >> 30) && !**v3)
    **v3 = 1;
  v462 = v1[341];
  v463 = (v462 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v464 = (v462 & 0x20000000) != 0 ? v463 : v462 & 0xCFFFFFFF;
  if ((v464 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v464 >> 30) && !**v3)
    **v3 = 1;
  v465 = v1[342];
  v466 = (v465 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v467 = (v465 & 0x20000000) != 0 ? v466 : v465 & 0xCFFFFFFF;
  if ((v467 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v467 >> 30) && !**v3)
    **v3 = 1;
  v468 = v1[343];
  v469 = (v468 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v470 = (v468 & 0x20000000) != 0 ? v469 : v468 & 0xCFFFFFFF;
  if ((v470 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v470 >> 30) && !**v3)
    **v3 = 1;
  v471 = v1[344];
  v472 = (v471 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v473 = (v471 & 0x20000000) != 0 ? v472 : v471 & 0xCFFFFFFF;
  if ((v473 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v473 >> 30) && !**v3)
    **v3 = 1;
  v474 = v1[345];
  v475 = (v474 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v476 = (v474 & 0x20000000) != 0 ? v475 : v474 & 0xCFFFFFFF;
  if ((v476 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v476 >> 30) && !**v3)
    **v3 = 1;
  v477 = v1[346];
  v478 = (v477 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v479 = (v477 & 0x20000000) != 0 ? v478 : v477 & 0xCFFFFFFF;
  if ((v479 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v479 >> 30) && !**v3)
    **v3 = 1;
  v480 = v1[347];
  v481 = (v480 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v482 = (v480 & 0x20000000) != 0 ? v481 : v480 & 0xCFFFFFFF;
  if ((v482 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v482 >> 30) && !**v3)
    **v3 = 1;
  v483 = v1[348];
  v484 = (v483 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v485 = (v483 & 0x20000000) != 0 ? v484 : v483 & 0xCFFFFFFF;
  if ((v485 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v485 >> 30) && !**v3)
    **v3 = 1;
  v486 = v1[349];
  v487 = (v486 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v488 = (v486 & 0x20000000) != 0 ? v487 : v486 & 0xCFFFFFFF;
  if ((v488 & 0x80000000) != 0)
  {
LABEL_1622:
    **v3 = 2;
    return 0;
  }
  else
  {
    if (!(v488 >> 30))
    {
      v489 = *v3;
      if (!*v489)
        *v489 = 1;
    }
    return sub_223D5601C(a1);
  }
}

uint64_t sub_223D5601C(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  _BYTE **v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  unsigned int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  int v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  unsigned int v299;
  int v300;
  unsigned int v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  unsigned int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  unsigned int v320;
  int v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  int v327;
  unsigned int v328;
  unsigned int v329;
  int v330;
  unsigned int v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  int v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  unsigned int v359;
  int v360;
  unsigned int v361;
  unsigned int v362;
  int v363;
  unsigned int v364;
  unsigned int v365;
  int v366;
  unsigned int v367;
  unsigned int v368;
  int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  int v378;
  unsigned int v379;
  unsigned int v380;
  int v381;
  unsigned int v382;
  unsigned int v383;
  int v384;
  unsigned int v385;
  unsigned int v386;
  int v387;
  unsigned int v388;
  unsigned int v389;
  int v390;
  unsigned int v391;
  unsigned int v392;
  int v393;
  unsigned int v394;
  unsigned int v395;
  int v396;
  unsigned int v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  unsigned int v401;
  int v402;
  unsigned int v403;
  unsigned int v404;
  int v405;
  unsigned int v406;
  unsigned int v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  int v414;
  unsigned int v415;
  unsigned int v416;
  int v417;
  unsigned int v418;
  unsigned int v419;
  int v420;
  unsigned int v421;
  unsigned int v422;
  int v423;
  unsigned int v424;
  unsigned int v425;
  int v426;
  unsigned int v427;
  unsigned int v428;
  int v429;
  unsigned int v430;
  unsigned int v431;
  int v432;
  unsigned int v433;
  unsigned int v434;
  int v435;
  unsigned int v436;
  unsigned int v437;
  int v438;
  unsigned int v439;
  unsigned int v440;
  int v441;
  unsigned int v442;
  unsigned int v443;
  int v444;
  unsigned int v445;
  unsigned int v446;
  int v447;
  unsigned int v448;
  unsigned int v449;
  int v450;
  unsigned int v451;
  unsigned int v452;
  int v453;
  unsigned int v454;
  unsigned int v455;
  int v456;
  unsigned int v457;
  unsigned int v458;
  int v459;
  unsigned int v460;
  unsigned int v461;
  int v462;
  unsigned int v463;
  unsigned int v464;
  int v465;
  unsigned int v466;
  unsigned int v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  unsigned int v473;
  int v474;
  unsigned int v475;
  unsigned int v476;
  int v477;
  unsigned int v478;
  unsigned int v479;
  int v480;
  unsigned int v481;
  unsigned int v482;
  int v483;
  unsigned int v484;
  unsigned int v485;
  int v486;
  unsigned int v487;
  unsigned int v488;
  _BYTE *v489;
  uint64_t result;

  v1 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v2 = v1[350];
  v3 = **(_BYTE ****)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  if ((v2 & 0x10000000) != 0)
    v4 = 0x40000000;
  else
    v4 = 0x80000000;
  if ((v2 & 0x20000000) != 0)
    v5 = v4;
  else
    v5 = v2 & 0xCFFFFFFF;
  if ((v5 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v5 >> 30) && !**v3)
    **v3 = 1;
  v6 = v1[351];
  v7 = (v6 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v8 = (v6 & 0x20000000) != 0 ? v7 : v6 & 0xCFFFFFFF;
  if ((v8 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v8 >> 30) && !**v3)
    **v3 = 1;
  v9 = v1[352];
  v10 = (v9 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v11 = (v9 & 0x20000000) != 0 ? v10 : v9 & 0xCFFFFFFF;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v11 >> 30) && !**v3)
    **v3 = 1;
  v12 = v1[353];
  v13 = (v12 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v14 = (v12 & 0x20000000) != 0 ? v13 : v12 & 0xCFFFFFFF;
  if ((v14 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v14 >> 30) && !**v3)
    **v3 = 1;
  v15 = v1[354];
  v16 = (v15 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v17 = (v15 & 0x20000000) != 0 ? v16 : v15 & 0xCFFFFFFF;
  if ((v17 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v17 >> 30) && !**v3)
    **v3 = 1;
  v18 = v1[355];
  v19 = (v18 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v20 = (v18 & 0x20000000) != 0 ? v19 : v18 & 0xCFFFFFFF;
  if ((v20 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v20 >> 30) && !**v3)
    **v3 = 1;
  v21 = v1[356];
  v22 = (v21 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v23 = (v21 & 0x20000000) != 0 ? v22 : v21 & 0xCFFFFFFF;
  if ((v23 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v23 >> 30) && !**v3)
    **v3 = 1;
  v24 = v1[357];
  v25 = (v24 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v26 = (v24 & 0x20000000) != 0 ? v25 : v24 & 0xCFFFFFFF;
  if ((v26 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v26 >> 30) && !**v3)
    **v3 = 1;
  v27 = v1[358];
  v28 = (v27 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v29 = (v27 & 0x20000000) != 0 ? v28 : v27 & 0xCFFFFFFF;
  if ((v29 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v29 >> 30) && !**v3)
    **v3 = 1;
  v30 = v1[359];
  v31 = (v30 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v32 = (v30 & 0x20000000) != 0 ? v31 : v30 & 0xCFFFFFFF;
  if ((v32 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v32 >> 30) && !**v3)
    **v3 = 1;
  v33 = v1[360];
  v34 = (v33 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v35 = (v33 & 0x20000000) != 0 ? v34 : v33 & 0xCFFFFFFF;
  if ((v35 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v35 >> 30) && !**v3)
    **v3 = 1;
  v36 = v1[361];
  v37 = (v36 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v38 = (v36 & 0x20000000) != 0 ? v37 : v36 & 0xCFFFFFFF;
  if ((v38 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v38 >> 30) && !**v3)
    **v3 = 1;
  v39 = v1[362];
  v40 = (v39 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v41 = (v39 & 0x20000000) != 0 ? v40 : v39 & 0xCFFFFFFF;
  if ((v41 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v41 >> 30) && !**v3)
    **v3 = 1;
  v42 = v1[363];
  v43 = (v42 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v44 = (v42 & 0x20000000) != 0 ? v43 : v42 & 0xCFFFFFFF;
  if ((v44 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v44 >> 30) && !**v3)
    **v3 = 1;
  v45 = v1[364];
  v46 = (v45 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v47 = (v45 & 0x20000000) != 0 ? v46 : v45 & 0xCFFFFFFF;
  if ((v47 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v47 >> 30) && !**v3)
    **v3 = 1;
  v48 = v1[365];
  v49 = (v48 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v50 = (v48 & 0x20000000) != 0 ? v49 : v48 & 0xCFFFFFFF;
  if ((v50 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v50 >> 30) && !**v3)
    **v3 = 1;
  v51 = v1[366];
  v52 = (v51 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v53 = (v51 & 0x20000000) != 0 ? v52 : v51 & 0xCFFFFFFF;
  if ((v53 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v53 >> 30) && !**v3)
    **v3 = 1;
  v54 = v1[367];
  v55 = (v54 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v56 = (v54 & 0x20000000) != 0 ? v55 : v54 & 0xCFFFFFFF;
  if ((v56 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v56 >> 30) && !**v3)
    **v3 = 1;
  v57 = v1[368];
  v58 = (v57 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v59 = (v57 & 0x20000000) != 0 ? v58 : v57 & 0xCFFFFFFF;
  if ((v59 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v59 >> 30) && !**v3)
    **v3 = 1;
  v60 = v1[369];
  v61 = (v60 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v62 = (v60 & 0x20000000) != 0 ? v61 : v60 & 0xCFFFFFFF;
  if ((v62 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v62 >> 30) && !**v3)
    **v3 = 1;
  v63 = v1[370];
  v64 = (v63 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v65 = (v63 & 0x20000000) != 0 ? v64 : v63 & 0xCFFFFFFF;
  if ((v65 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v65 >> 30) && !**v3)
    **v3 = 1;
  v66 = v1[371];
  v67 = (v66 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v68 = (v66 & 0x20000000) != 0 ? v67 : v66 & 0xCFFFFFFF;
  if ((v68 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v68 >> 30) && !**v3)
    **v3 = 1;
  v69 = v1[372];
  v70 = (v69 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v71 = (v69 & 0x20000000) != 0 ? v70 : v69 & 0xCFFFFFFF;
  if ((v71 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v71 >> 30) && !**v3)
    **v3 = 1;
  v72 = v1[373];
  v73 = (v72 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v74 = (v72 & 0x20000000) != 0 ? v73 : v72 & 0xCFFFFFFF;
  if ((v74 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v74 >> 30) && !**v3)
    **v3 = 1;
  v75 = v1[374];
  v76 = (v75 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v77 = (v75 & 0x20000000) != 0 ? v76 : v75 & 0xCFFFFFFF;
  if ((v77 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v77 >> 30) && !**v3)
    **v3 = 1;
  v78 = v1[375];
  v79 = (v78 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v80 = (v78 & 0x20000000) != 0 ? v79 : v78 & 0xCFFFFFFF;
  if ((v80 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v80 >> 30) && !**v3)
    **v3 = 1;
  v81 = v1[376];
  v82 = (v81 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v83 = (v81 & 0x20000000) != 0 ? v82 : v81 & 0xCFFFFFFF;
  if ((v83 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v83 >> 30) && !**v3)
    **v3 = 1;
  v84 = v1[377];
  v85 = (v84 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v86 = (v84 & 0x20000000) != 0 ? v85 : v84 & 0xCFFFFFFF;
  if ((v86 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v86 >> 30) && !**v3)
    **v3 = 1;
  v87 = v1[378];
  v88 = (v87 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v89 = (v87 & 0x20000000) != 0 ? v88 : v87 & 0xCFFFFFFF;
  if ((v89 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v89 >> 30) && !**v3)
    **v3 = 1;
  v90 = v1[379];
  v91 = (v90 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v92 = (v90 & 0x20000000) != 0 ? v91 : v90 & 0xCFFFFFFF;
  if ((v92 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v92 >> 30) && !**v3)
    **v3 = 1;
  v93 = v1[380];
  v94 = (v93 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v95 = (v93 & 0x20000000) != 0 ? v94 : v93 & 0xCFFFFFFF;
  if ((v95 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v95 >> 30) && !**v3)
    **v3 = 1;
  v96 = v1[381];
  v97 = (v96 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v98 = (v96 & 0x20000000) != 0 ? v97 : v96 & 0xCFFFFFFF;
  if ((v98 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v98 >> 30) && !**v3)
    **v3 = 1;
  v99 = v1[382];
  v100 = (v99 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v101 = (v99 & 0x20000000) != 0 ? v100 : v99 & 0xCFFFFFFF;
  if ((v101 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v101 >> 30) && !**v3)
    **v3 = 1;
  v102 = v1[383];
  v103 = (v102 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v104 = (v102 & 0x20000000) != 0 ? v103 : v102 & 0xCFFFFFFF;
  if ((v104 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v104 >> 30) && !**v3)
    **v3 = 1;
  v105 = v1[384];
  v106 = (v105 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v107 = (v105 & 0x20000000) != 0 ? v106 : v105 & 0xCFFFFFFF;
  if ((v107 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v107 >> 30) && !**v3)
    **v3 = 1;
  v108 = v1[385];
  v109 = (v108 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v110 = (v108 & 0x20000000) != 0 ? v109 : v108 & 0xCFFFFFFF;
  if ((v110 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v110 >> 30) && !**v3)
    **v3 = 1;
  v111 = v1[386];
  v112 = (v111 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v113 = (v111 & 0x20000000) != 0 ? v112 : v111 & 0xCFFFFFFF;
  if ((v113 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v113 >> 30) && !**v3)
    **v3 = 1;
  v114 = v1[387];
  v115 = (v114 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v116 = (v114 & 0x20000000) != 0 ? v115 : v114 & 0xCFFFFFFF;
  if ((v116 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v116 >> 30) && !**v3)
    **v3 = 1;
  v117 = v1[388];
  v118 = (v117 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v119 = (v117 & 0x20000000) != 0 ? v118 : v117 & 0xCFFFFFFF;
  if ((v119 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v119 >> 30) && !**v3)
    **v3 = 1;
  v120 = v1[389];
  v121 = (v120 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v122 = (v120 & 0x20000000) != 0 ? v121 : v120 & 0xCFFFFFFF;
  if ((v122 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v122 >> 30) && !**v3)
    **v3 = 1;
  v123 = v1[390];
  v124 = (v123 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v125 = (v123 & 0x20000000) != 0 ? v124 : v123 & 0xCFFFFFFF;
  if ((v125 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v125 >> 30) && !**v3)
    **v3 = 1;
  v126 = v1[391];
  v127 = (v126 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v128 = (v126 & 0x20000000) != 0 ? v127 : v126 & 0xCFFFFFFF;
  if ((v128 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v128 >> 30) && !**v3)
    **v3 = 1;
  v129 = v1[392];
  v130 = (v129 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v131 = (v129 & 0x20000000) != 0 ? v130 : v129 & 0xCFFFFFFF;
  if ((v131 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v131 >> 30) && !**v3)
    **v3 = 1;
  v132 = v1[393];
  v133 = (v132 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v134 = (v132 & 0x20000000) != 0 ? v133 : v132 & 0xCFFFFFFF;
  if ((v134 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v134 >> 30) && !**v3)
    **v3 = 1;
  v135 = v1[394];
  v136 = (v135 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v137 = (v135 & 0x20000000) != 0 ? v136 : v135 & 0xCFFFFFFF;
  if ((v137 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v137 >> 30) && !**v3)
    **v3 = 1;
  v138 = v1[395];
  v139 = (v138 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v140 = (v138 & 0x20000000) != 0 ? v139 : v138 & 0xCFFFFFFF;
  if ((v140 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v140 >> 30) && !**v3)
    **v3 = 1;
  v141 = v1[396];
  v142 = (v141 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v143 = (v141 & 0x20000000) != 0 ? v142 : v141 & 0xCFFFFFFF;
  if ((v143 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v143 >> 30) && !**v3)
    **v3 = 1;
  v144 = v1[397];
  v145 = (v144 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v146 = (v144 & 0x20000000) != 0 ? v145 : v144 & 0xCFFFFFFF;
  if ((v146 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v146 >> 30) && !**v3)
    **v3 = 1;
  v147 = v1[398];
  v148 = (v147 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v149 = (v147 & 0x20000000) != 0 ? v148 : v147 & 0xCFFFFFFF;
  if ((v149 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v149 >> 30) && !**v3)
    **v3 = 1;
  v150 = v1[399];
  v151 = (v150 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v152 = (v150 & 0x20000000) != 0 ? v151 : v150 & 0xCFFFFFFF;
  if ((v152 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v152 >> 30) && !**v3)
    **v3 = 1;
  v153 = v1[400];
  v154 = (v153 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v155 = (v153 & 0x20000000) != 0 ? v154 : v153 & 0xCFFFFFFF;
  if ((v155 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v155 >> 30) && !**v3)
    **v3 = 1;
  v156 = v1[401];
  v157 = (v156 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v158 = (v156 & 0x20000000) != 0 ? v157 : v156 & 0xCFFFFFFF;
  if ((v158 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v158 >> 30) && !**v3)
    **v3 = 1;
  v159 = v1[402];
  v160 = (v159 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v161 = (v159 & 0x20000000) != 0 ? v160 : v159 & 0xCFFFFFFF;
  if ((v161 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v161 >> 30) && !**v3)
    **v3 = 1;
  v162 = v1[403];
  v163 = (v162 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v164 = (v162 & 0x20000000) != 0 ? v163 : v162 & 0xCFFFFFFF;
  if ((v164 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v164 >> 30) && !**v3)
    **v3 = 1;
  v165 = v1[404];
  v166 = (v165 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v167 = (v165 & 0x20000000) != 0 ? v166 : v165 & 0xCFFFFFFF;
  if ((v167 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v167 >> 30) && !**v3)
    **v3 = 1;
  v168 = v1[405];
  v169 = (v168 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v170 = (v168 & 0x20000000) != 0 ? v169 : v168 & 0xCFFFFFFF;
  if ((v170 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v170 >> 30) && !**v3)
    **v3 = 1;
  v171 = v1[406];
  v172 = (v171 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v173 = (v171 & 0x20000000) != 0 ? v172 : v171 & 0xCFFFFFFF;
  if ((v173 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v173 >> 30) && !**v3)
    **v3 = 1;
  v174 = v1[407];
  v175 = (v174 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v176 = (v174 & 0x20000000) != 0 ? v175 : v174 & 0xCFFFFFFF;
  if ((v176 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v176 >> 30) && !**v3)
    **v3 = 1;
  v177 = v1[408];
  v178 = (v177 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v179 = (v177 & 0x20000000) != 0 ? v178 : v177 & 0xCFFFFFFF;
  if ((v179 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v179 >> 30) && !**v3)
    **v3 = 1;
  v180 = v1[409];
  v181 = (v180 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v182 = (v180 & 0x20000000) != 0 ? v181 : v180 & 0xCFFFFFFF;
  if ((v182 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v182 >> 30) && !**v3)
    **v3 = 1;
  v183 = v1[410];
  v184 = (v183 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v185 = (v183 & 0x20000000) != 0 ? v184 : v183 & 0xCFFFFFFF;
  if ((v185 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v185 >> 30) && !**v3)
    **v3 = 1;
  v186 = v1[411];
  v187 = (v186 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v188 = (v186 & 0x20000000) != 0 ? v187 : v186 & 0xCFFFFFFF;
  if ((v188 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v188 >> 30) && !**v3)
    **v3 = 1;
  v189 = v1[412];
  v190 = (v189 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v191 = (v189 & 0x20000000) != 0 ? v190 : v189 & 0xCFFFFFFF;
  if ((v191 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v191 >> 30) && !**v3)
    **v3 = 1;
  v192 = v1[413];
  v193 = (v192 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v194 = (v192 & 0x20000000) != 0 ? v193 : v192 & 0xCFFFFFFF;
  if ((v194 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v194 >> 30) && !**v3)
    **v3 = 1;
  v195 = v1[414];
  v196 = (v195 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v197 = (v195 & 0x20000000) != 0 ? v196 : v195 & 0xCFFFFFFF;
  if ((v197 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v197 >> 30) && !**v3)
    **v3 = 1;
  v198 = v1[415];
  v199 = (v198 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v200 = (v198 & 0x20000000) != 0 ? v199 : v198 & 0xCFFFFFFF;
  if ((v200 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v200 >> 30) && !**v3)
    **v3 = 1;
  v201 = v1[416];
  v202 = (v201 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v203 = (v201 & 0x20000000) != 0 ? v202 : v201 & 0xCFFFFFFF;
  if ((v203 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v203 >> 30) && !**v3)
    **v3 = 1;
  v204 = v1[417];
  v205 = (v204 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v206 = (v204 & 0x20000000) != 0 ? v205 : v204 & 0xCFFFFFFF;
  if ((v206 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v206 >> 30) && !**v3)
    **v3 = 1;
  v207 = v1[418];
  v208 = (v207 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v209 = (v207 & 0x20000000) != 0 ? v208 : v207 & 0xCFFFFFFF;
  if ((v209 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v209 >> 30) && !**v3)
    **v3 = 1;
  v210 = v1[419];
  v211 = (v210 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v212 = (v210 & 0x20000000) != 0 ? v211 : v210 & 0xCFFFFFFF;
  if ((v212 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v212 >> 30) && !**v3)
    **v3 = 1;
  v213 = v1[420];
  v214 = (v213 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v215 = (v213 & 0x20000000) != 0 ? v214 : v213 & 0xCFFFFFFF;
  if ((v215 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v215 >> 30) && !**v3)
    **v3 = 1;
  v216 = v1[421];
  v217 = (v216 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v218 = (v216 & 0x20000000) != 0 ? v217 : v216 & 0xCFFFFFFF;
  if ((v218 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v218 >> 30) && !**v3)
    **v3 = 1;
  v219 = v1[422];
  v220 = (v219 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v221 = (v219 & 0x20000000) != 0 ? v220 : v219 & 0xCFFFFFFF;
  if ((v221 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v221 >> 30) && !**v3)
    **v3 = 1;
  v222 = v1[423];
  v223 = (v222 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v224 = (v222 & 0x20000000) != 0 ? v223 : v222 & 0xCFFFFFFF;
  if ((v224 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v224 >> 30) && !**v3)
    **v3 = 1;
  v225 = v1[424];
  v226 = (v225 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v227 = (v225 & 0x20000000) != 0 ? v226 : v225 & 0xCFFFFFFF;
  if ((v227 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v227 >> 30) && !**v3)
    **v3 = 1;
  v228 = v1[425];
  v229 = (v228 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v230 = (v228 & 0x20000000) != 0 ? v229 : v228 & 0xCFFFFFFF;
  if ((v230 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v230 >> 30) && !**v3)
    **v3 = 1;
  v231 = v1[426];
  v232 = (v231 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v233 = (v231 & 0x20000000) != 0 ? v232 : v231 & 0xCFFFFFFF;
  if ((v233 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v233 >> 30) && !**v3)
    **v3 = 1;
  v234 = v1[427];
  v235 = (v234 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v236 = (v234 & 0x20000000) != 0 ? v235 : v234 & 0xCFFFFFFF;
  if ((v236 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v236 >> 30) && !**v3)
    **v3 = 1;
  v237 = v1[428];
  v238 = (v237 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v239 = (v237 & 0x20000000) != 0 ? v238 : v237 & 0xCFFFFFFF;
  if ((v239 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v239 >> 30) && !**v3)
    **v3 = 1;
  v240 = v1[429];
  v241 = (v240 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v242 = (v240 & 0x20000000) != 0 ? v241 : v240 & 0xCFFFFFFF;
  if ((v242 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v242 >> 30) && !**v3)
    **v3 = 1;
  v243 = v1[430];
  v244 = (v243 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v245 = (v243 & 0x20000000) != 0 ? v244 : v243 & 0xCFFFFFFF;
  if ((v245 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v245 >> 30) && !**v3)
    **v3 = 1;
  v246 = v1[431];
  v247 = (v246 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v248 = (v246 & 0x20000000) != 0 ? v247 : v246 & 0xCFFFFFFF;
  if ((v248 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v248 >> 30) && !**v3)
    **v3 = 1;
  v249 = v1[432];
  v250 = (v249 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v251 = (v249 & 0x20000000) != 0 ? v250 : v249 & 0xCFFFFFFF;
  if ((v251 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v251 >> 30) && !**v3)
    **v3 = 1;
  v252 = v1[433];
  v253 = (v252 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v254 = (v252 & 0x20000000) != 0 ? v253 : v252 & 0xCFFFFFFF;
  if ((v254 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v254 >> 30) && !**v3)
    **v3 = 1;
  v255 = v1[434];
  v256 = (v255 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v257 = (v255 & 0x20000000) != 0 ? v256 : v255 & 0xCFFFFFFF;
  if ((v257 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v257 >> 30) && !**v3)
    **v3 = 1;
  v258 = v1[435];
  v259 = (v258 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v260 = (v258 & 0x20000000) != 0 ? v259 : v258 & 0xCFFFFFFF;
  if ((v260 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v260 >> 30) && !**v3)
    **v3 = 1;
  v261 = v1[436];
  v262 = (v261 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v263 = (v261 & 0x20000000) != 0 ? v262 : v261 & 0xCFFFFFFF;
  if ((v263 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v263 >> 30) && !**v3)
    **v3 = 1;
  v264 = v1[437];
  v265 = (v264 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v266 = (v264 & 0x20000000) != 0 ? v265 : v264 & 0xCFFFFFFF;
  if ((v266 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v266 >> 30) && !**v3)
    **v3 = 1;
  v267 = v1[438];
  v268 = (v267 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v269 = (v267 & 0x20000000) != 0 ? v268 : v267 & 0xCFFFFFFF;
  if ((v269 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v269 >> 30) && !**v3)
    **v3 = 1;
  v270 = v1[439];
  v271 = (v270 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v272 = (v270 & 0x20000000) != 0 ? v271 : v270 & 0xCFFFFFFF;
  if ((v272 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v272 >> 30) && !**v3)
    **v3 = 1;
  v273 = v1[440];
  v274 = (v273 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v275 = (v273 & 0x20000000) != 0 ? v274 : v273 & 0xCFFFFFFF;
  if ((v275 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v275 >> 30) && !**v3)
    **v3 = 1;
  v276 = v1[441];
  v277 = (v276 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v278 = (v276 & 0x20000000) != 0 ? v277 : v276 & 0xCFFFFFFF;
  if ((v278 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v278 >> 30) && !**v3)
    **v3 = 1;
  v279 = v1[442];
  v280 = (v279 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v281 = (v279 & 0x20000000) != 0 ? v280 : v279 & 0xCFFFFFFF;
  if ((v281 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v281 >> 30) && !**v3)
    **v3 = 1;
  v282 = v1[443];
  v283 = (v282 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v284 = (v282 & 0x20000000) != 0 ? v283 : v282 & 0xCFFFFFFF;
  if ((v284 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v284 >> 30) && !**v3)
    **v3 = 1;
  v285 = v1[444];
  v286 = (v285 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v287 = (v285 & 0x20000000) != 0 ? v286 : v285 & 0xCFFFFFFF;
  if ((v287 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v287 >> 30) && !**v3)
    **v3 = 1;
  v288 = v1[445];
  v289 = (v288 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v290 = (v288 & 0x20000000) != 0 ? v289 : v288 & 0xCFFFFFFF;
  if ((v290 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v290 >> 30) && !**v3)
    **v3 = 1;
  v291 = v1[446];
  v292 = (v291 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v293 = (v291 & 0x20000000) != 0 ? v292 : v291 & 0xCFFFFFFF;
  if ((v293 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v293 >> 30) && !**v3)
    **v3 = 1;
  v294 = v1[447];
  v295 = (v294 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v296 = (v294 & 0x20000000) != 0 ? v295 : v294 & 0xCFFFFFFF;
  if ((v296 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v296 >> 30) && !**v3)
    **v3 = 1;
  v297 = v1[448];
  v298 = (v297 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v299 = (v297 & 0x20000000) != 0 ? v298 : v297 & 0xCFFFFFFF;
  if ((v299 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v299 >> 30) && !**v3)
    **v3 = 1;
  v300 = v1[449];
  v301 = (v300 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v302 = (v300 & 0x20000000) != 0 ? v301 : v300 & 0xCFFFFFFF;
  if ((v302 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v302 >> 30) && !**v3)
    **v3 = 1;
  v303 = v1[450];
  v304 = (v303 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v305 = (v303 & 0x20000000) != 0 ? v304 : v303 & 0xCFFFFFFF;
  if ((v305 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v305 >> 30) && !**v3)
    **v3 = 1;
  v306 = v1[451];
  v307 = (v306 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v308 = (v306 & 0x20000000) != 0 ? v307 : v306 & 0xCFFFFFFF;
  if ((v308 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v308 >> 30) && !**v3)
    **v3 = 1;
  v309 = v1[452];
  v310 = (v309 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v311 = (v309 & 0x20000000) != 0 ? v310 : v309 & 0xCFFFFFFF;
  if ((v311 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v311 >> 30) && !**v3)
    **v3 = 1;
  v312 = v1[453];
  v313 = (v312 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v314 = (v312 & 0x20000000) != 0 ? v313 : v312 & 0xCFFFFFFF;
  if ((v314 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v314 >> 30) && !**v3)
    **v3 = 1;
  v315 = v1[454];
  v316 = (v315 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v317 = (v315 & 0x20000000) != 0 ? v316 : v315 & 0xCFFFFFFF;
  if ((v317 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v317 >> 30) && !**v3)
    **v3 = 1;
  v318 = v1[455];
  v319 = (v318 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v320 = (v318 & 0x20000000) != 0 ? v319 : v318 & 0xCFFFFFFF;
  if ((v320 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v320 >> 30) && !**v3)
    **v3 = 1;
  v321 = v1[456];
  v322 = (v321 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v323 = (v321 & 0x20000000) != 0 ? v322 : v321 & 0xCFFFFFFF;
  if ((v323 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v323 >> 30) && !**v3)
    **v3 = 1;
  v324 = v1[457];
  v325 = (v324 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v326 = (v324 & 0x20000000) != 0 ? v325 : v324 & 0xCFFFFFFF;
  if ((v326 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v326 >> 30) && !**v3)
    **v3 = 1;
  v327 = v1[458];
  v328 = (v327 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v329 = (v327 & 0x20000000) != 0 ? v328 : v327 & 0xCFFFFFFF;
  if ((v329 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v329 >> 30) && !**v3)
    **v3 = 1;
  v330 = v1[459];
  v331 = (v330 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v332 = (v330 & 0x20000000) != 0 ? v331 : v330 & 0xCFFFFFFF;
  if ((v332 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v332 >> 30) && !**v3)
    **v3 = 1;
  v333 = v1[460];
  v334 = (v333 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v335 = (v333 & 0x20000000) != 0 ? v334 : v333 & 0xCFFFFFFF;
  if ((v335 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v335 >> 30) && !**v3)
    **v3 = 1;
  v336 = v1[461];
  v337 = (v336 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v338 = (v336 & 0x20000000) != 0 ? v337 : v336 & 0xCFFFFFFF;
  if ((v338 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v338 >> 30) && !**v3)
    **v3 = 1;
  v339 = v1[462];
  v340 = (v339 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v341 = (v339 & 0x20000000) != 0 ? v340 : v339 & 0xCFFFFFFF;
  if ((v341 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v341 >> 30) && !**v3)
    **v3 = 1;
  v342 = v1[463];
  v343 = (v342 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v344 = (v342 & 0x20000000) != 0 ? v343 : v342 & 0xCFFFFFFF;
  if ((v344 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v344 >> 30) && !**v3)
    **v3 = 1;
  v345 = v1[464];
  v346 = (v345 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v347 = (v345 & 0x20000000) != 0 ? v346 : v345 & 0xCFFFFFFF;
  if ((v347 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v347 >> 30) && !**v3)
    **v3 = 1;
  v348 = v1[465];
  v349 = (v348 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v350 = (v348 & 0x20000000) != 0 ? v349 : v348 & 0xCFFFFFFF;
  if ((v350 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v350 >> 30) && !**v3)
    **v3 = 1;
  v351 = v1[466];
  v352 = (v351 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v353 = (v351 & 0x20000000) != 0 ? v352 : v351 & 0xCFFFFFFF;
  if ((v353 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v353 >> 30) && !**v3)
    **v3 = 1;
  v354 = v1[467];
  v355 = (v354 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v356 = (v354 & 0x20000000) != 0 ? v355 : v354 & 0xCFFFFFFF;
  if ((v356 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v356 >> 30) && !**v3)
    **v3 = 1;
  v357 = v1[468];
  v358 = (v357 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v359 = (v357 & 0x20000000) != 0 ? v358 : v357 & 0xCFFFFFFF;
  if ((v359 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v359 >> 30) && !**v3)
    **v3 = 1;
  v360 = v1[469];
  v361 = (v360 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v362 = (v360 & 0x20000000) != 0 ? v361 : v360 & 0xCFFFFFFF;
  if ((v362 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v362 >> 30) && !**v3)
    **v3 = 1;
  v363 = v1[470];
  v364 = (v363 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v365 = (v363 & 0x20000000) != 0 ? v364 : v363 & 0xCFFFFFFF;
  if ((v365 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v365 >> 30) && !**v3)
    **v3 = 1;
  v366 = v1[471];
  v367 = (v366 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v368 = (v366 & 0x20000000) != 0 ? v367 : v366 & 0xCFFFFFFF;
  if ((v368 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v368 >> 30) && !**v3)
    **v3 = 1;
  v369 = v1[472];
  v370 = (v369 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v371 = (v369 & 0x20000000) != 0 ? v370 : v369 & 0xCFFFFFFF;
  if ((v371 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v371 >> 30) && !**v3)
    **v3 = 1;
  v372 = v1[473];
  v373 = (v372 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v374 = (v372 & 0x20000000) != 0 ? v373 : v372 & 0xCFFFFFFF;
  if ((v374 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v374 >> 30) && !**v3)
    **v3 = 1;
  v375 = v1[474];
  v376 = (v375 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v377 = (v375 & 0x20000000) != 0 ? v376 : v375 & 0xCFFFFFFF;
  if ((v377 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v377 >> 30) && !**v3)
    **v3 = 1;
  v378 = v1[475];
  v379 = (v378 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v380 = (v378 & 0x20000000) != 0 ? v379 : v378 & 0xCFFFFFFF;
  if ((v380 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v380 >> 30) && !**v3)
    **v3 = 1;
  v381 = v1[476];
  v382 = (v381 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v383 = (v381 & 0x20000000) != 0 ? v382 : v381 & 0xCFFFFFFF;
  if ((v383 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v383 >> 30) && !**v3)
    **v3 = 1;
  v384 = v1[477];
  v385 = (v384 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v386 = (v384 & 0x20000000) != 0 ? v385 : v384 & 0xCFFFFFFF;
  if ((v386 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v386 >> 30) && !**v3)
    **v3 = 1;
  v387 = v1[478];
  v388 = (v387 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v389 = (v387 & 0x20000000) != 0 ? v388 : v387 & 0xCFFFFFFF;
  if ((v389 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v389 >> 30) && !**v3)
    **v3 = 1;
  v390 = v1[479];
  v391 = (v390 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v392 = (v390 & 0x20000000) != 0 ? v391 : v390 & 0xCFFFFFFF;
  if ((v392 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v392 >> 30) && !**v3)
    **v3 = 1;
  v393 = v1[480];
  v394 = (v393 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v395 = (v393 & 0x20000000) != 0 ? v394 : v393 & 0xCFFFFFFF;
  if ((v395 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v395 >> 30) && !**v3)
    **v3 = 1;
  v396 = v1[481];
  v397 = (v396 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v398 = (v396 & 0x20000000) != 0 ? v397 : v396 & 0xCFFFFFFF;
  if ((v398 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v398 >> 30) && !**v3)
    **v3 = 1;
  v399 = v1[482];
  v400 = (v399 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v401 = (v399 & 0x20000000) != 0 ? v400 : v399 & 0xCFFFFFFF;
  if ((v401 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v401 >> 30) && !**v3)
    **v3 = 1;
  v402 = v1[483];
  v403 = (v402 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v404 = (v402 & 0x20000000) != 0 ? v403 : v402 & 0xCFFFFFFF;
  if ((v404 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v404 >> 30) && !**v3)
    **v3 = 1;
  v405 = v1[484];
  v406 = (v405 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v407 = (v405 & 0x20000000) != 0 ? v406 : v405 & 0xCFFFFFFF;
  if ((v407 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v407 >> 30) && !**v3)
    **v3 = 1;
  v408 = v1[485];
  v409 = (v408 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v410 = (v408 & 0x20000000) != 0 ? v409 : v408 & 0xCFFFFFFF;
  if ((v410 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v410 >> 30) && !**v3)
    **v3 = 1;
  v411 = v1[486];
  v412 = (v411 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v413 = (v411 & 0x20000000) != 0 ? v412 : v411 & 0xCFFFFFFF;
  if ((v413 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v413 >> 30) && !**v3)
    **v3 = 1;
  v414 = v1[487];
  v415 = (v414 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v416 = (v414 & 0x20000000) != 0 ? v415 : v414 & 0xCFFFFFFF;
  if ((v416 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v416 >> 30) && !**v3)
    **v3 = 1;
  v417 = v1[488];
  v418 = (v417 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v419 = (v417 & 0x20000000) != 0 ? v418 : v417 & 0xCFFFFFFF;
  if ((v419 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v419 >> 30) && !**v3)
    **v3 = 1;
  v420 = v1[489];
  v421 = (v420 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v422 = (v420 & 0x20000000) != 0 ? v421 : v420 & 0xCFFFFFFF;
  if ((v422 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v422 >> 30) && !**v3)
    **v3 = 1;
  v423 = v1[490];
  v424 = (v423 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v425 = (v423 & 0x20000000) != 0 ? v424 : v423 & 0xCFFFFFFF;
  if ((v425 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v425 >> 30) && !**v3)
    **v3 = 1;
  v426 = v1[491];
  v427 = (v426 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v428 = (v426 & 0x20000000) != 0 ? v427 : v426 & 0xCFFFFFFF;
  if ((v428 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v428 >> 30) && !**v3)
    **v3 = 1;
  v429 = v1[492];
  v430 = (v429 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v431 = (v429 & 0x20000000) != 0 ? v430 : v429 & 0xCFFFFFFF;
  if ((v431 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v431 >> 30) && !**v3)
    **v3 = 1;
  v432 = v1[493];
  v433 = (v432 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v434 = (v432 & 0x20000000) != 0 ? v433 : v432 & 0xCFFFFFFF;
  if ((v434 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v434 >> 30) && !**v3)
    **v3 = 1;
  v435 = v1[494];
  v436 = (v435 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v437 = (v435 & 0x20000000) != 0 ? v436 : v435 & 0xCFFFFFFF;
  if ((v437 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v437 >> 30) && !**v3)
    **v3 = 1;
  v438 = v1[495];
  v439 = (v438 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v440 = (v438 & 0x20000000) != 0 ? v439 : v438 & 0xCFFFFFFF;
  if ((v440 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v440 >> 30) && !**v3)
    **v3 = 1;
  v441 = v1[496];
  v442 = (v441 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v443 = (v441 & 0x20000000) != 0 ? v442 : v441 & 0xCFFFFFFF;
  if ((v443 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v443 >> 30) && !**v3)
    **v3 = 1;
  v444 = v1[497];
  v445 = (v444 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v446 = (v444 & 0x20000000) != 0 ? v445 : v444 & 0xCFFFFFFF;
  if ((v446 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v446 >> 30) && !**v3)
    **v3 = 1;
  v447 = v1[498];
  v448 = (v447 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v449 = (v447 & 0x20000000) != 0 ? v448 : v447 & 0xCFFFFFFF;
  if ((v449 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v449 >> 30) && !**v3)
    **v3 = 1;
  v450 = v1[499];
  v451 = (v450 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v452 = (v450 & 0x20000000) != 0 ? v451 : v450 & 0xCFFFFFFF;
  if ((v452 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v452 >> 30) && !**v3)
    **v3 = 1;
  v453 = v1[500];
  v454 = (v453 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v455 = (v453 & 0x20000000) != 0 ? v454 : v453 & 0xCFFFFFFF;
  if ((v455 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v455 >> 30) && !**v3)
    **v3 = 1;
  v456 = v1[501];
  v457 = (v456 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v458 = (v456 & 0x20000000) != 0 ? v457 : v456 & 0xCFFFFFFF;
  if ((v458 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v458 >> 30) && !**v3)
    **v3 = 1;
  v459 = v1[502];
  v460 = (v459 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v461 = (v459 & 0x20000000) != 0 ? v460 : v459 & 0xCFFFFFFF;
  if ((v461 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v461 >> 30) && !**v3)
    **v3 = 1;
  v462 = v1[503];
  v463 = (v462 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v464 = (v462 & 0x20000000) != 0 ? v463 : v462 & 0xCFFFFFFF;
  if ((v464 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v464 >> 30) && !**v3)
    **v3 = 1;
  v465 = v1[504];
  v466 = (v465 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v467 = (v465 & 0x20000000) != 0 ? v466 : v465 & 0xCFFFFFFF;
  if ((v467 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v467 >> 30) && !**v3)
    **v3 = 1;
  v468 = v1[505];
  v469 = (v468 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v470 = (v468 & 0x20000000) != 0 ? v469 : v468 & 0xCFFFFFFF;
  if ((v470 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v470 >> 30) && !**v3)
    **v3 = 1;
  v471 = v1[506];
  v472 = (v471 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v473 = (v471 & 0x20000000) != 0 ? v472 : v471 & 0xCFFFFFFF;
  if ((v473 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v473 >> 30) && !**v3)
    **v3 = 1;
  v474 = v1[507];
  v475 = (v474 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v476 = (v474 & 0x20000000) != 0 ? v475 : v474 & 0xCFFFFFFF;
  if ((v476 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v476 >> 30) && !**v3)
    **v3 = 1;
  v477 = v1[508];
  v478 = (v477 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v479 = (v477 & 0x20000000) != 0 ? v478 : v477 & 0xCFFFFFFF;
  if ((v479 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v479 >> 30) && !**v3)
    **v3 = 1;
  v480 = v1[509];
  v481 = (v480 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v482 = (v480 & 0x20000000) != 0 ? v481 : v480 & 0xCFFFFFFF;
  if ((v482 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v482 >> 30) && !**v3)
    **v3 = 1;
  v483 = v1[510];
  v484 = (v483 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v485 = (v483 & 0x20000000) != 0 ? v484 : v483 & 0xCFFFFFFF;
  if ((v485 & 0x80000000) != 0)
    goto LABEL_1622;
  if (!(v485 >> 30) && !**v3)
    **v3 = 1;
  v486 = v1[511];
  v487 = (v486 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v488 = (v486 & 0x20000000) != 0 ? v487 : v486 & 0xCFFFFFFF;
  if ((v488 & 0x80000000) != 0)
  {
LABEL_1622:
    result = 0;
    **v3 = 2;
  }
  else if (v488 >> 30)
  {
    return 1;
  }
  else
  {
    v489 = *v3;
    result = 1;
    if (!*v489)
      *v489 = 1;
  }
  return result;
}

uint64_t sub_223D5864C(uint64_t a1, int a2, int a3, char a4, uint64_t a5, double a6, double a7, double a8, float32x4_t a9, float32x4_t a10)
{
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  double v18;
  double v19;
  double v20;
  float32x4_t v21;
  float32x4_t v22;
  int v23;
  uint64_t v24;
  double v25;
  double v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  double v39;
  double v40;
  float32x4_t v41;
  float32x4_t v42;
  unsigned int v43;
  double v44;
  double v45;
  float32x4_t v46;
  float32x4_t v47;
  unsigned int v48;
  double v49;
  double v50;
  float32x4_t v51;
  float32x4_t v52;
  unsigned int v53;
  double v54;
  double v55;
  float32x4_t v56;
  float32x4_t v57;
  unsigned int v58;
  double v59;
  double v60;
  float32x4_t v61;
  float32x4_t v62;
  unsigned int v63;
  double v64;
  double v65;
  float32x4_t v66;
  float32x4_t v67;
  unsigned int v68;
  unsigned int v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[12];
  int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  char v80;
  char v81;
  uint64_t v82;
  int v83;
  char v84;
  char v85;
  uint64_t v86;
  int v87;
  char v88;
  char v89;
  uint64_t v90;
  int v91;
  char v92;
  char v93;
  uint64_t v94;
  int v95;
  char v96;
  char v97;
  uint64_t v98;
  int v99;
  char v100;
  char v101;
  uint64_t v102;
  int v103;
  char v104;
  char v105;
  uint64_t v106;
  int v107;
  char v108;
  char v109;
  uint64_t v110;
  int v111;
  char v112;
  char v113;
  uint64_t v114;
  int v115;
  char v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  char v121;
  uint64_t v122;
  int v123;
  char v124;
  char v125;
  uint64_t v126;
  int v127;
  char v128;
  char v129;
  int v130;
  uint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  int v135;
  char v136;
  char v137;
  int v138;
  uint64_t v139;
  char v140;
  char v141;
  uint64_t v142;
  int v143;
  char v144;
  char v145;
  int v146;
  uint64_t v147;
  char v148;
  char v149;
  uint64_t v150;
  int v151;
  char v152;
  char v153;
  int v154;
  uint64_t v155;
  char v156;
  char v157;
  uint64_t v158;
  int v159;
  char v160;
  char v161;
  int v162;
  uint64_t v163;
  char v164;
  char v165;
  uint64_t v166;
  int v167;
  char v168;
  char v169;
  int v170;
  uint64_t v171;
  char v172;
  char v173;
  uint64_t v174;
  int v175;
  char v176;
  char v177;
  int v178;
  uint64_t v179;
  char v180;
  _BYTE v181[12];
  uint64_t v182;
  int v183;

  v13 = a3 & 0xCFFFFFFF;
  v14 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v15 = *(_QWORD *)v14;
  *(_DWORD *)&v181[8] = *(_DWORD *)(v14 + 8);
  *(_QWORD *)v181 = v15;
  v16 = *(_QWORD *)(v14 + 12);
  v183 = *(_DWORD *)(v14 + 20);
  v182 = v16;
  v74[0] = 1;
  *(_QWORD *)&v74[4] = -1;
  v75 = -1;
  LOBYTE(v76) = 8;
  LOBYTE(v77) = 1;
  v78 = -1;
  v79 = -1;
  v80 = 8;
  v81 = 1;
  v82 = -1;
  v83 = -1;
  v84 = 8;
  v85 = 1;
  v86 = -1;
  v87 = -1;
  v88 = 8;
  v89 = 1;
  v90 = -1;
  v91 = -1;
  v92 = 8;
  v93 = 1;
  v94 = -1;
  v95 = -1;
  v96 = 8;
  v97 = 1;
  v98 = -1;
  v99 = -1;
  v100 = 8;
  v101 = 1;
  v102 = -1;
  v103 = -1;
  v104 = 8;
  v105 = 1;
  v106 = -1;
  v107 = -1;
  v108 = 8;
  v109 = 1;
  v110 = -1;
  v111 = -1;
  v112 = 8;
  v113 = 1;
  v114 = -1;
  v115 = -1;
  v116 = 8;
  v117 = 1;
  v118 = -1;
  v119 = -1;
  v120 = 8;
  v121 = 1;
  v122 = -1;
  v123 = -1;
  v124 = 8;
  v125 = 1;
  v126 = -1;
  v127 = -1;
  v128 = 8;
  v129 = 1;
  v130 = -1;
  v131 = -1;
  v132 = 8;
  v133 = 1;
  v134 = -1;
  v135 = -1;
  v136 = 8;
  v137 = 1;
  v138 = -1;
  v139 = -1;
  v140 = 8;
  v141 = 1;
  v142 = -1;
  v143 = -1;
  v144 = 8;
  v145 = 1;
  v146 = -1;
  v147 = -1;
  v148 = 8;
  v149 = 1;
  v150 = -1;
  v151 = -1;
  v152 = 8;
  v153 = 1;
  v154 = -1;
  v155 = -1;
  v156 = 8;
  v157 = 1;
  v158 = -1;
  v159 = -1;
  v160 = 8;
  v161 = 1;
  v162 = -1;
  v163 = -1;
  v164 = 8;
  v165 = 1;
  v166 = -1;
  v167 = -1;
  v168 = 8;
  v169 = 1;
  v170 = -1;
  v171 = -1;
  v172 = 8;
  v173 = 1;
  v174 = -1;
  v175 = -1;
  v176 = 8;
  v177 = 1;
  v178 = -1;
  v179 = -1;
  v180 = 8;
  result = sub_223D58EC8(a5, a4, a2, 0, (int32x2_t *)v181, (uint64_t)v74, NAN, a7, a8, a9, a10);
  if ((_DWORD)result)
  {
    v23 = result;
    result = 1;
    if (a2)
    {
      if (v23 != 3)
      {
        v24 = (a2 - 1);
        if (!(_DWORD)v24)
        {
          v29 = 0;
          while (1)
          {
            v31 = byte_22466FA9C[v29];
            v32 = *(_QWORD *)(a1 + 184);
            v33 = *(_DWORD *)(v32 + 4488 * v13 + 4 * v31 + 24);
            v34 = (v31 >> 2) & 1;
            v35 = (v31 >> 1) & 1;
            v36 = v31 & 1;
            if ((v33 & 0x80000000) != 0)
            {
              v30 = (v182 - *(_DWORD *)v181) >> 1;
              *(_DWORD *)v74 = *(_DWORD *)v181 + v30 * v34;
              *(_DWORD *)&v74[4] = *(_DWORD *)&v181[4] + v30 * v35;
              *(_DWORD *)&v74[8] = *(_DWORD *)&v181[8] + v30 * v36;
              v75 = *(_DWORD *)v74 + v30;
              v76 = *(_DWORD *)&v74[4] + v30;
              v77 = *(_DWORD *)&v74[8] + v30;
              v72 = *(_OWORD *)a5;
              v73 = *(_QWORD *)(a5 + 16);
              result = sub_223D59718(0, (int32x2_t *)v74, v23 == 2, (uint64_t)&v72, *(double *)&v72, v19, v20, v21, v22);
              if (!(_DWORD)result)
                return result;
            }
            else
            {
              v37 = (v182 - *(_DWORD *)v181) >> 1;
              *(_DWORD *)v74 = *(_DWORD *)v181 + v37 * v34;
              *(_DWORD *)&v74[4] = *(_DWORD *)&v181[4] + v37 * v35;
              *(_DWORD *)&v74[8] = *(_DWORD *)&v181[8] + v37 * v36;
              v75 = *(_DWORD *)v74 + v37;
              v76 = *(_DWORD *)&v74[4] + v37;
              v77 = *(_DWORD *)&v74[8] + v37;
              result = sub_223D58EC8(a5, v23 == 2, 0, v33, (int32x2_t *)v74, v32 + 4488 * v13 + 540 * v31 + 68, v18, v19, v20, v21, v22);
              if (!(_DWORD)result)
                return result;
            }
            if (++v29 == 8)
              return 1;
          }
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v13 + 24) & 0x80000000) != 0)
        {
          v38 = (v182 - *(_DWORD *)v181) >> 1;
          *(_QWORD *)v74 = *(_QWORD *)v181;
          *(_DWORD *)&v74[8] = *(_DWORD *)&v181[8];
          v75 = v38 + *(_DWORD *)v181;
          v76 = *(_DWORD *)&v181[4] + v38;
          v77 = *(_DWORD *)&v181[8] + v38;
          v72 = *(_OWORD *)a5;
          v73 = *(_QWORD *)(a5 + 16);
          if ((sub_223D59718(v24, (int32x2_t *)v74, v23 == 2, (uint64_t)&v72, *(double *)&v72, v19, v20, v21, v22) & 1) == 0)
            return 0;
        }
        else
        {
          v70 = *(_OWORD *)a5;
          v71 = *(_QWORD *)(a5 + 16);
          result = sub_223D5864C(a1, v24);
          if (!(_DWORD)result)
            return result;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v13 + 28) & 0x80000000) != 0)
        {
          v43 = (v182 - *(_DWORD *)v181) >> 1;
          *(_QWORD *)v74 = *(_QWORD *)v181;
          *(_DWORD *)&v74[8] = *(_DWORD *)&v181[8] + v43;
          v75 = v43 + *(_DWORD *)v181;
          v76 = *(_DWORD *)&v181[4] + v43;
          v77 = *(_DWORD *)&v181[8] + v43 + v43;
          v72 = *(_OWORD *)a5;
          v73 = *(_QWORD *)(a5 + 16);
          result = sub_223D59718(v24, (int32x2_t *)v74, v23 == 2, (uint64_t)&v72, *(double *)&v72, v25, v26, v27, v28);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v70 = *(_OWORD *)a5;
          v71 = *(_QWORD *)(a5 + 16);
          if ((sub_223D5864C(a1, v24) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v13 + 32) & 0x80000000) != 0)
        {
          v48 = (v182 - *(_DWORD *)v181) >> 1;
          *(_DWORD *)v74 = *(_DWORD *)v181;
          *(_DWORD *)&v74[4] = v48 + *(_DWORD *)&v181[4];
          *(_DWORD *)&v74[8] = *(_DWORD *)&v181[8];
          v75 = v48 + *(_DWORD *)v181;
          v76 = v48 + *(_DWORD *)&v181[4] + v48;
          v77 = *(_DWORD *)&v181[8] + v48;
          v72 = *(_OWORD *)a5;
          v73 = *(_QWORD *)(a5 + 16);
          result = sub_223D59718(v24, (int32x2_t *)v74, v23 == 2, (uint64_t)&v72, *(double *)&v72, v39, v40, v41, v42);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v70 = *(_OWORD *)a5;
          v71 = *(_QWORD *)(a5 + 16);
          if ((sub_223D5864C(a1, v24) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v13 + 36) & 0x80000000) != 0)
        {
          v53 = (v182 - *(_DWORD *)v181) >> 1;
          *(_DWORD *)v74 = *(_DWORD *)v181;
          *(_DWORD *)&v74[4] = v53 + *(_DWORD *)&v181[4];
          *(_DWORD *)&v74[8] = *(_DWORD *)&v181[8] + v53;
          v75 = v53 + *(_DWORD *)v181;
          v76 = v53 + *(_DWORD *)&v181[4] + v53;
          v77 = *(_DWORD *)&v181[8] + v53 + v53;
          v72 = *(_OWORD *)a5;
          v73 = *(_QWORD *)(a5 + 16);
          result = sub_223D59718(v24, (int32x2_t *)v74, v23 == 2, (uint64_t)&v72, *(double *)&v72, v44, v45, v46, v47);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v70 = *(_OWORD *)a5;
          v71 = *(_QWORD *)(a5 + 16);
          if ((sub_223D5864C(a1, v24) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v13 + 40) & 0x80000000) != 0)
        {
          v58 = (v182 - *(_DWORD *)v181) >> 1;
          *(_DWORD *)v74 = v58 + *(_DWORD *)v181;
          *(_QWORD *)&v74[4] = *(_QWORD *)&v181[4];
          v75 = v58 + *(_DWORD *)v181 + v58;
          v76 = *(_DWORD *)&v181[4] + v58;
          v77 = *(_DWORD *)&v181[8] + v58;
          v72 = *(_OWORD *)a5;
          v73 = *(_QWORD *)(a5 + 16);
          result = sub_223D59718(v24, (int32x2_t *)v74, v23 == 2, (uint64_t)&v72, *(double *)&v72, v49, v50, v51, v52);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v70 = *(_OWORD *)a5;
          v71 = *(_QWORD *)(a5 + 16);
          if ((sub_223D5864C(a1, v24) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v13 + 44) & 0x80000000) != 0)
        {
          v63 = (v182 - *(_DWORD *)v181) >> 1;
          *(_DWORD *)v74 = v63 + *(_DWORD *)v181;
          *(_DWORD *)&v74[4] = *(_DWORD *)&v181[4];
          *(_DWORD *)&v74[8] = *(_DWORD *)&v181[8] + v63;
          v75 = v63 + *(_DWORD *)v181 + v63;
          v76 = *(_DWORD *)&v181[4] + v63;
          v77 = *(_DWORD *)&v181[8] + v63 + v63;
          v72 = *(_OWORD *)a5;
          v73 = *(_QWORD *)(a5 + 16);
          result = sub_223D59718(v24, (int32x2_t *)v74, v23 == 2, (uint64_t)&v72, *(double *)&v72, v54, v55, v56, v57);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v70 = *(_OWORD *)a5;
          v71 = *(_QWORD *)(a5 + 16);
          if ((sub_223D5864C(a1, v24) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v13 + 48) & 0x80000000) != 0)
        {
          v68 = (v182 - *(_DWORD *)v181) >> 1;
          *(_DWORD *)v74 = v68 + *(_DWORD *)v181;
          *(_DWORD *)&v74[4] = v68 + *(_DWORD *)&v181[4];
          *(_DWORD *)&v74[8] = *(_DWORD *)&v181[8];
          v75 = v68 + *(_DWORD *)v181 + v68;
          v76 = v68 + *(_DWORD *)&v181[4] + v68;
          v77 = *(_DWORD *)&v181[8] + v68;
          v72 = *(_OWORD *)a5;
          v73 = *(_QWORD *)(a5 + 16);
          result = sub_223D59718(v24, (int32x2_t *)v74, v23 == 2, (uint64_t)&v72, *(double *)&v72, v59, v60, v61, v62);
          if (!(_DWORD)result)
            return result;
LABEL_39:
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v13 + 52) & 0x80000000) != 0)
          {
            v69 = (v182 - *(_DWORD *)v181) >> 1;
            *(_DWORD *)v74 = v69 + *(_DWORD *)v181;
            *(_DWORD *)&v74[4] = v69 + *(_DWORD *)&v181[4];
            *(_DWORD *)&v74[8] = *(_DWORD *)&v181[8] + v69;
            v75 = v69 + *(_DWORD *)v181 + v69;
            v76 = v69 + *(_DWORD *)&v181[4] + v69;
            v77 = *(_DWORD *)&v181[8] + v69 + v69;
            v72 = *(_OWORD *)a5;
            v73 = *(_QWORD *)(a5 + 16);
            result = sub_223D59718(v24, (int32x2_t *)v74, v23 == 2, (uint64_t)&v72, *(double *)&v72, v64, v65, v66, v67);
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            v70 = *(_OWORD *)a5;
            v71 = *(_QWORD *)(a5 + 16);
            if ((sub_223D5864C(a1, v24) & 1) == 0)
              return 0;
          }
          return 1;
        }
        v70 = *(_OWORD *)a5;
        v71 = *(_QWORD *)(a5 + 16);
        if ((sub_223D5864C(a1, v24) & 1) != 0)
          goto LABEL_39;
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_223D58EC8(uint64_t a1, char a2, int a3, unsigned int a4, int32x2_t *a5, uint64_t a6, double a7, double a8, double a9, float32x4_t a10, float32x4_t a11)
{
  int v16;
  uint64_t v17;
  double v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _BYTE **v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  int v107;
  __int128 v108[2];
  BOOL *v109;
  __int128 v110;
  uint64_t v111;
  _BYTE *v112;
  _BYTE v113[12];
  int v114;
  _BYTE v115[32];
  BOOL *v116;
  BOOL v117;

  v16 = 2;
  v107 = 2;
  if ((a2 & 1) == 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    LODWORD(a8) = *(_DWORD *)(**(_QWORD **)a1 + 144);
    LODWORD(a7) = **(_DWORD **)(*(_QWORD *)a1 + 16);
    v18 = *(double *)a5;
    *(float32x2_t *)a10.f32 = vcvt_f32_s32(*a5);
    a11.f32[0] = (float)a5[1].i32[0];
    a10.f32[2] = a11.f32[0];
    v19 = vmulq_n_f32(a10, *(float *)&a8);
    *(float *)&v18 = (float)(int)(a5[1].i32[1] - *(_QWORD *)a5);
    *(float *)&a8 = *(float *)&a8 * *(float *)&v18;
    *(_DWORD *)&v115[8] = v19.i32[2];
    *(_QWORD *)v115 = v19.i64[0];
    v20 = vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0));
    *(_DWORD *)&v115[20] = v20.i32[2];
    *(_QWORD *)&v115[12] = v20.i64[0];
    v16 = sub_223E9A510((uint64_t)v115, v17, a7, *(double *)v20.i64, v18, v19, a11);
    v107 = v16;
    if (!v16)
      return 3;
  }
  if (!a3)
  {
    v22 = *(uint64_t **)(a1 + 8);
    v117 = (a4 & 0x80000000) == 0;
    v23 = *v22;
    if ((a4 & 0x80000000) != 0)
    {
      v25 = (_DWORD *)(v23 + 280);
    }
    else
    {
      v24 = *(_QWORD *)(v23 + 2328);
      if (a4 >= (unint64_t)((*(_QWORD *)(v23 + 2336) - v24) >> 11))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v24 = *(_QWORD *)(v23 + 2328);
      }
      v25 = (_DWORD *)(v24 + ((unint64_t)a4 << 11));
    }
    *(_QWORD *)v115 = v23;
    *(_QWORD *)&v115[8] = v25;
    v26 = v22[1];
    *(_QWORD *)&v115[16] = v26;
    *(_QWORD *)&v115[24] = a6;
    v116 = &v117;
    if (v16 == 2)
    {
      v112 = v115;
      *(_QWORD *)v113 = &v107;
      v27 = **(_BYTE ****)(v26 + 8);
      if ((*v25 & 0x10000000) != 0)
        v28 = 0x40000000;
      else
        v28 = 0x80000000;
      if ((*v25 & 0x20000000) != 0)
        v29 = v28;
      else
        v29 = *v25 & 0xCFFFFFFF;
      if ((v29 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v29 >> 30) && !**v27)
        **v27 = 1;
      v30 = v25[1];
      v31 = (v30 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v32 = (v30 & 0x20000000) != 0 ? v31 : v30 & 0xCFFFFFFF;
      if ((v32 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v32 >> 30) && !**v27)
        **v27 = 1;
      v33 = v25[2];
      v34 = (v33 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v35 = (v33 & 0x20000000) != 0 ? v34 : v33 & 0xCFFFFFFF;
      if ((v35 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v35 >> 30) && !**v27)
        **v27 = 1;
      v36 = v25[3];
      v37 = (v36 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v38 = (v36 & 0x20000000) != 0 ? v37 : v36 & 0xCFFFFFFF;
      if ((v38 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v38 >> 30) && !**v27)
        **v27 = 1;
      v39 = v25[4];
      v40 = (v39 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v41 = (v39 & 0x20000000) != 0 ? v40 : v39 & 0xCFFFFFFF;
      if ((v41 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v41 >> 30) && !**v27)
        **v27 = 1;
      v42 = v25[5];
      v43 = (v42 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v44 = (v42 & 0x20000000) != 0 ? v43 : v42 & 0xCFFFFFFF;
      if ((v44 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v44 >> 30) && !**v27)
        **v27 = 1;
      v45 = v25[6];
      v46 = (v45 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v47 = (v45 & 0x20000000) != 0 ? v46 : v45 & 0xCFFFFFFF;
      if ((v47 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v47 >> 30) && !**v27)
        **v27 = 1;
      v48 = v25[7];
      v49 = (v48 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v50 = (v48 & 0x20000000) != 0 ? v49 : v48 & 0xCFFFFFFF;
      if ((v50 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v50 >> 30) && !**v27)
        **v27 = 1;
      v51 = v25[8];
      v52 = (v51 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v53 = (v51 & 0x20000000) != 0 ? v52 : v51 & 0xCFFFFFFF;
      if ((v53 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v53 >> 30) && !**v27)
        **v27 = 1;
      v54 = v25[9];
      v55 = (v54 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v56 = (v54 & 0x20000000) != 0 ? v55 : v54 & 0xCFFFFFFF;
      if ((v56 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v56 >> 30) && !**v27)
        **v27 = 1;
      v57 = v25[10];
      v58 = (v57 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v59 = (v57 & 0x20000000) != 0 ? v58 : v57 & 0xCFFFFFFF;
      if ((v59 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v59 >> 30) && !**v27)
        **v27 = 1;
      v60 = v25[11];
      v61 = (v60 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v62 = (v60 & 0x20000000) != 0 ? v61 : v60 & 0xCFFFFFFF;
      if ((v62 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v62 >> 30) && !**v27)
        **v27 = 1;
      v63 = v25[12];
      v64 = (v63 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v65 = (v63 & 0x20000000) != 0 ? v64 : v63 & 0xCFFFFFFF;
      if ((v65 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v65 >> 30) && !**v27)
        **v27 = 1;
      v66 = v25[13];
      v67 = (v66 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v68 = (v66 & 0x20000000) != 0 ? v67 : v66 & 0xCFFFFFFF;
      if ((v68 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v68 >> 30) && !**v27)
        **v27 = 1;
      v69 = v25[14];
      v70 = (v69 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v71 = (v69 & 0x20000000) != 0 ? v70 : v69 & 0xCFFFFFFF;
      if ((v71 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v71 >> 30) && !**v27)
        **v27 = 1;
      v72 = v25[15];
      v73 = (v72 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v74 = (v72 & 0x20000000) != 0 ? v73 : v72 & 0xCFFFFFFF;
      if ((v74 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v74 >> 30) && !**v27)
        **v27 = 1;
      v75 = v25[16];
      v76 = (v75 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v77 = (v75 & 0x20000000) != 0 ? v76 : v75 & 0xCFFFFFFF;
      if ((v77 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v77 >> 30) && !**v27)
        **v27 = 1;
      v78 = v25[17];
      v79 = (v78 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v80 = (v78 & 0x20000000) != 0 ? v79 : v78 & 0xCFFFFFFF;
      if ((v80 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v80 >> 30) && !**v27)
        **v27 = 1;
      v81 = v25[18];
      v82 = (v81 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v83 = (v81 & 0x20000000) != 0 ? v82 : v81 & 0xCFFFFFFF;
      if ((v83 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v83 >> 30) && !**v27)
        **v27 = 1;
      v84 = v25[19];
      v85 = (v84 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v86 = (v84 & 0x20000000) != 0 ? v85 : v84 & 0xCFFFFFFF;
      if ((v86 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v86 >> 30) && !**v27)
        **v27 = 1;
      v87 = v25[20];
      v88 = (v87 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v89 = (v87 & 0x20000000) != 0 ? v88 : v87 & 0xCFFFFFFF;
      if ((v89 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v89 >> 30) && !**v27)
        **v27 = 1;
      v90 = v25[21];
      v91 = (v90 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v92 = (v90 & 0x20000000) != 0 ? v91 : v90 & 0xCFFFFFFF;
      if ((v92 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v92 >> 30) && !**v27)
        **v27 = 1;
      v93 = v25[22];
      v94 = (v93 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v95 = (v93 & 0x20000000) != 0 ? v94 : v93 & 0xCFFFFFFF;
      if ((v95 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v95 >> 30) && !**v27)
        **v27 = 1;
      v96 = v25[23];
      v97 = (v96 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v98 = (v96 & 0x20000000) != 0 ? v97 : v96 & 0xCFFFFFFF;
      if ((v98 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v98 >> 30) && !**v27)
        **v27 = 1;
      v99 = v25[24];
      v100 = (v99 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v101 = (v99 & 0x20000000) != 0 ? v100 : v99 & 0xCFFFFFFF;
      if ((v101 & 0x80000000) != 0)
        goto LABEL_278;
      if (!(v101 >> 30) && !**v27)
        **v27 = 1;
      v102 = v25[25];
      v103 = (v102 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
      v104 = (v102 & 0x20000000) != 0 ? v103 : v102 & 0xCFFFFFFF;
      if ((v104 & 0x80000000) != 0)
      {
LABEL_278:
        **v27 = 2;
      }
      else
      {
        if (!(v104 >> 30) && !**v27)
          **v27 = 1;
        if ((sub_223D513CC((uint64_t)&v112) & 1) != 0)
          return 3;
      }
    }
    else
    {
      v112 = (_BYTE *)*a5;
      *(_DWORD *)v113 = a5[1].i32[0];
      *(int32x2_t *)&v113[4] = vadd_s32(*a5, (int32x2_t)0x800000008);
      v114 = *(_DWORD *)v113 + 8;
      v105 = v22[2];
      v110 = *(_OWORD *)v105;
      v111 = *(_QWORD *)(v105 + 16);
      v109 = v116;
      v108[0] = *(_OWORD *)v115;
      v108[1] = *(_OWORD *)&v115[16];
      v21 = 3;
      if ((sub_223D59C1C((int *)a5, 3, (int *)&v112, &v110, v108, *(double *)&v115[16], *(double *)v115, a9, a10, a11) & 1) != 0)
        return v21;
    }
    v21 = 0;
    **(_BYTE **)(a1 + 16) = 0;
    return v21;
  }
  if (v16 == 1)
    return 1;
  else
    return 2;
}

uint64_t sub_223D59718(int a1, int32x2_t *a2, char a3, uint64_t a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  uint64_t result;
  int v13;
  uint64_t v14;
  __int32 v15;
  __int32 v16;
  unsigned int v17;
  __int32 v18;
  __int32 v19;
  unsigned int v20;
  __int32 v21;
  unsigned int v22;
  unsigned __int32 v23;
  __int32 v24;
  unsigned int v25;
  unsigned __int32 v26;
  __int32 v27;
  __int32 v28;
  unsigned int v29;
  __int32 v30;
  __int32 v31;
  unsigned int v32;
  __int32 v33;
  unsigned int v34;
  unsigned __int32 v35;
  __int32 v36;
  unsigned int v37;
  unsigned __int32 v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int32 v41;
  unint64_t v42;
  int v43;
  unsigned __int32 v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  char v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  char v53;
  uint64_t v54;
  int v55;
  char v56;
  char v57;
  uint64_t v58;
  int v59;
  char v60;
  char v61;
  uint64_t v62;
  int v63;
  char v64;
  char v65;
  uint64_t v66;
  int v67;
  char v68;
  char v69;
  uint64_t v70;
  int v71;
  char v72;
  char v73;
  uint64_t v74;
  int v75;
  char v76;
  char v77;
  uint64_t v78;
  int v79;
  char v80;
  char v81;
  uint64_t v82;
  int v83;
  char v84;
  char v85;
  uint64_t v86;
  int v87;
  char v88;
  char v89;
  uint64_t v90;
  int v91;
  char v92;
  char v93;
  uint64_t v94;
  int v95;
  char v96;
  char v97;
  int v98;
  uint64_t v99;
  char v100;
  char v101;
  uint64_t v102;
  int v103;
  char v104;
  char v105;
  int v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  int v111;
  char v112;
  char v113;
  int v114;
  uint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  char v121;
  int v122;
  uint64_t v123;
  char v124;
  char v125;
  uint64_t v126;
  int v127;
  char v128;
  char v129;
  int v130;
  uint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  int v135;
  char v136;
  char v137;
  int v138;
  uint64_t v139;
  char v140;
  char v141;
  uint64_t v142;
  int v143;
  char v144;
  char v145;
  int v146;
  uint64_t v147;
  char v148;

  LOBYTE(v41) = 1;
  v42 = -1;
  v43 = -1;
  LOBYTE(v44) = 8;
  LOBYTE(v45) = 1;
  v46 = -1;
  v47 = -1;
  v48 = 8;
  v49 = 1;
  v50 = -1;
  v51 = -1;
  v52 = 8;
  v53 = 1;
  v54 = -1;
  v55 = -1;
  v56 = 8;
  v57 = 1;
  v58 = -1;
  v59 = -1;
  v60 = 8;
  v61 = 1;
  v62 = -1;
  v63 = -1;
  v64 = 8;
  v65 = 1;
  v66 = -1;
  v67 = -1;
  v68 = 8;
  v69 = 1;
  v70 = -1;
  v71 = -1;
  v72 = 8;
  v73 = 1;
  v74 = -1;
  v75 = -1;
  v76 = 8;
  v77 = 1;
  v78 = -1;
  v79 = -1;
  v80 = 8;
  v81 = 1;
  v82 = -1;
  v83 = -1;
  v84 = 8;
  v85 = 1;
  v86 = -1;
  v87 = -1;
  v88 = 8;
  v89 = 1;
  v90 = -1;
  v91 = -1;
  v92 = 8;
  v93 = 1;
  v94 = -1;
  v95 = -1;
  v96 = 8;
  v97 = 1;
  v98 = -1;
  v99 = -1;
  v100 = 8;
  v101 = 1;
  v102 = -1;
  v103 = -1;
  v104 = 8;
  v105 = 1;
  v106 = -1;
  v107 = -1;
  v108 = 8;
  v109 = 1;
  v110 = -1;
  v111 = -1;
  v112 = 8;
  v113 = 1;
  v114 = -1;
  v115 = -1;
  v116 = 8;
  v117 = 1;
  v118 = -1;
  v119 = -1;
  v120 = 8;
  v121 = 1;
  v122 = -1;
  v123 = -1;
  v124 = 8;
  v125 = 1;
  v126 = -1;
  v127 = -1;
  v128 = 8;
  v129 = 1;
  v130 = -1;
  v131 = -1;
  v132 = 8;
  v133 = 1;
  v134 = -1;
  v135 = -1;
  v136 = 8;
  v137 = 1;
  v138 = -1;
  v139 = -1;
  v140 = 8;
  v141 = 1;
  v142 = -1;
  v143 = -1;
  v144 = 8;
  v145 = 1;
  v146 = -1;
  v147 = -1;
  v148 = 8;
  result = sub_223D58EC8(a4, a3, a1, 0x80000000, a2, (uint64_t)&v41, NAN, a6, a7, a8, a9);
  if ((_DWORD)result)
  {
    v13 = result;
    result = 1;
    if (a1)
    {
      if (v13 != 3)
      {
        v14 = (a1 - 1);
        v15 = a2->i32[1];
        v16 = a2[1].i32[0];
        v17 = (a2[1].i32[1] - a2->i32[0]) >> 1;
        v41 = a2->i32[0];
        v42 = __PAIR64__(v16, v15);
        v43 = v17 + v41;
        v44 = v15 + v17;
        v45 = v16 + v17;
        v39 = *(_OWORD *)a4;
        v40 = *(_QWORD *)(a4 + 16);
        result = sub_223D59718(v14, &v41, v13 == 2, &v39);
        if ((_DWORD)result)
        {
          v18 = a2->i32[1];
          v19 = a2[1].i32[0];
          v20 = (a2[1].i32[1] - a2->i32[0]) >> 1;
          v41 = a2->i32[0];
          LODWORD(v42) = v18;
          HIDWORD(v42) = v19 + v20;
          v43 = v20 + v41;
          v44 = v18 + v20;
          v45 = v19 + v20 + v20;
          v39 = *(_OWORD *)a4;
          v40 = *(_QWORD *)(a4 + 16);
          result = sub_223D59718(v14, &v41, v13 == 2, &v39);
          if ((_DWORD)result)
          {
            v21 = a2[1].i32[0];
            v22 = (a2[1].i32[1] - a2->i32[0]) >> 1;
            v23 = v22 + a2->i32[1];
            v41 = a2->i32[0];
            v42 = __PAIR64__(v21, v23);
            v43 = v22 + v41;
            v44 = v23 + v22;
            v45 = v21 + v22;
            v39 = *(_OWORD *)a4;
            v40 = *(_QWORD *)(a4 + 16);
            result = sub_223D59718(v14, &v41, v13 == 2, &v39);
            if ((_DWORD)result)
            {
              v24 = a2[1].i32[0];
              v25 = (a2[1].i32[1] - a2->i32[0]) >> 1;
              v26 = v25 + a2->i32[1];
              v41 = a2->i32[0];
              LODWORD(v42) = v26;
              HIDWORD(v42) = v24 + v25;
              v43 = v25 + v41;
              v44 = v26 + v25;
              v45 = v24 + v25 + v25;
              v39 = *(_OWORD *)a4;
              v40 = *(_QWORD *)(a4 + 16);
              result = sub_223D59718(v14, &v41, v13 == 2, &v39);
              if ((_DWORD)result)
              {
                v27 = a2->i32[1];
                v28 = a2[1].i32[0];
                v29 = (a2[1].i32[1] - a2->i32[0]) >> 1;
                v41 = v29 + a2->i32[0];
                v42 = __PAIR64__(v28, v27);
                v43 = v41 + v29;
                v44 = v27 + v29;
                v45 = v28 + v29;
                v39 = *(_OWORD *)a4;
                v40 = *(_QWORD *)(a4 + 16);
                result = sub_223D59718(v14, &v41, v13 == 2, &v39);
                if ((_DWORD)result)
                {
                  v30 = a2->i32[1];
                  v31 = a2[1].i32[0];
                  v32 = (a2[1].i32[1] - a2->i32[0]) >> 1;
                  v41 = v32 + a2->i32[0];
                  LODWORD(v42) = v30;
                  HIDWORD(v42) = v31 + v32;
                  v43 = v41 + v32;
                  v44 = v30 + v32;
                  v45 = v31 + v32 + v32;
                  v39 = *(_OWORD *)a4;
                  v40 = *(_QWORD *)(a4 + 16);
                  result = sub_223D59718(v14, &v41, v13 == 2, &v39);
                  if ((_DWORD)result)
                  {
                    v33 = a2[1].i32[0];
                    v34 = (a2[1].i32[1] - a2->i32[0]) >> 1;
                    v35 = v34 + a2->i32[1];
                    v41 = v34 + a2->i32[0];
                    v42 = __PAIR64__(v33, v35);
                    v43 = v41 + v34;
                    v44 = v35 + v34;
                    v45 = v33 + v34;
                    v39 = *(_OWORD *)a4;
                    v40 = *(_QWORD *)(a4 + 16);
                    result = sub_223D59718(v14, &v41, v13 == 2, &v39);
                    if ((_DWORD)result)
                    {
                      v36 = a2[1].i32[0];
                      v37 = (a2[1].i32[1] - a2->i32[0]) >> 1;
                      v38 = v37 + a2->i32[1];
                      v41 = v37 + a2->i32[0];
                      LODWORD(v42) = v38;
                      HIDWORD(v42) = v36 + v37;
                      v43 = v41 + v37;
                      v44 = v38 + v37;
                      v45 = v36 + v37 + v37;
                      v39 = *(_OWORD *)a4;
                      v40 = *(_QWORD *)(a4 + 16);
                      return sub_223D59718(v14, &v41, v13 == 2, &v39);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_223D59C1C(int *a1, int a2, int *a3, __int128 *a4, __int128 *a5, double a6, double a7, double a8, float32x4_t a9, float32x4_t a10)
{
  uint64_t v15;
  double v16;
  float32x4_t v17;
  float32x4_t v18;
  int v19;
  uint64_t v20;
  int v21;
  __int32 v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;
  int v27;
  int v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int32 v32;
  unsigned int v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int32 v43;
  unsigned int v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  __int32 v52;
  unsigned int v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  int v62;
  _BYTE **v63;
  unsigned int v64;
  unsigned int v65;
  _BYTE *v66;
  int v67;
  int v68;
  int v69;
  int32x2_t v70;
  int32x2_t v71;
  int32x2_t v72;
  int32x2_t v73;
  unsigned int v74;
  __int32 v75;
  __int32 v76;
  __int32 v77;
  int v78;
  __int32 v79;
  int v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  _BYTE *v85;
  __int32 v86;
  __int32 v87;
  __int32 v88;
  __int32 v89;
  __int32 v90;
  __int32 v91;
  unsigned int v92;
  int v93;
  int v94;
  __int32 v95;
  __int32 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  __int32 v103;
  uint64_t v104;
  unsigned int v105;

  v15 = *((_QWORD *)a4 + 1);
  LODWORD(a7) = *(_DWORD *)(*(_QWORD *)a4 + 144);
  LODWORD(a6) = **((_DWORD **)a4 + 2);
  v16 = *(double *)a3;
  *(float32x2_t *)a9.f32 = vcvt_f32_s32(*(int32x2_t *)a3);
  a10.f32[0] = (float)a3[2];
  a9.f32[2] = a10.f32[0];
  v17 = vmulq_n_f32(a9, *(float *)&a7);
  *(float *)&v16 = (float)(int)(a3[3] - *(_QWORD *)a3);
  *(float *)&a7 = *(float *)&a7 * *(float *)&v16;
  v103 = v17.i32[2];
  v102 = v17.i64[0];
  v18 = vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0));
  v105 = v18.u32[2];
  v104 = v18.i64[0];
  v19 = sub_223E9A510((uint64_t)&v102, v15, a6, *(double *)v18.i64, v16, v17, a10);
  if (!v19)
    return 1;
  if (!a2)
  {
    v62 = *(_DWORD *)(*((_QWORD *)a5 + 1) + 4 * (*a3 & 7 | (8 * (a3[1] & 7)) & 0x3F | ((a3[2] & 7u) << 6)));
    v63 = **(_BYTE ****)(*((_QWORD *)a5 + 2) + 8);
    if ((v62 & 0x10000000) != 0)
      v64 = 0x40000000;
    else
      v64 = 0x80000000;
    if ((v62 & 0x20000000) != 0)
      v65 = v64;
    else
      v65 = v62 & 0xCFFFFFFF;
    if ((v65 & 0x80000000) != 0)
    {
LABEL_51:
      result = 0;
      **v63 = 2;
      return result;
    }
    if (!(v65 >> 30))
    {
      v66 = *v63;
      result = 1;
      if (!*v66)
        *v66 = 1;
      return result;
    }
    return 1;
  }
  if (v19 == 1)
  {
    v20 = (a2 - 1);
    v21 = a3[1];
    v22 = a3[2];
    v23 = (a3[3] - *a3) >> 1;
    LODWORD(v102) = *a3;
    HIDWORD(v102) = v21;
    v103 = v22;
    LODWORD(v104) = v23 + v102;
    HIDWORD(v104) = v21 + v23;
    v105 = v22 + v23;
    v100 = *a4;
    v101 = *((_QWORD *)a4 + 2);
    v24 = *a5;
    v25 = a5[1];
    v99 = *((_QWORD *)a5 + 4);
    v97 = v24;
    v98 = v25;
    result = sub_223D59C1C(a1, v20, &v102, &v100, &v97);
    if ((_DWORD)result)
    {
      v27 = a3[1];
      v28 = a3[2];
      v29 = (a3[3] - *a3) >> 1;
      LODWORD(v102) = *a3;
      HIDWORD(v102) = v27;
      v103 = v28 + v29;
      LODWORD(v104) = v29 + v102;
      HIDWORD(v104) = v27 + v29;
      v105 = v28 + v29 + v29;
      v100 = *a4;
      v101 = *((_QWORD *)a4 + 2);
      v30 = *a5;
      v31 = a5[1];
      v99 = *((_QWORD *)a5 + 4);
      v97 = v30;
      v98 = v31;
      result = sub_223D59C1C(a1, v20, &v102, &v100, &v97);
      if ((_DWORD)result)
      {
        v32 = a3[2];
        v33 = (a3[3] - *a3) >> 1;
        v34 = v33 + a3[1];
        LODWORD(v102) = *a3;
        HIDWORD(v102) = v34;
        v103 = v32;
        LODWORD(v104) = v33 + v102;
        HIDWORD(v104) = v34 + v33;
        v105 = v32 + v33;
        v100 = *a4;
        v101 = *((_QWORD *)a4 + 2);
        v35 = *a5;
        v36 = a5[1];
        v99 = *((_QWORD *)a5 + 4);
        v97 = v35;
        v98 = v36;
        result = sub_223D59C1C(a1, v20, &v102, &v100, &v97);
        if ((_DWORD)result)
        {
          v37 = a3[2];
          v38 = (a3[3] - *a3) >> 1;
          v39 = v38 + a3[1];
          LODWORD(v102) = *a3;
          HIDWORD(v102) = v39;
          v103 = v37 + v38;
          LODWORD(v104) = v38 + v102;
          HIDWORD(v104) = v39 + v38;
          v105 = v37 + v38 + v38;
          v100 = *a4;
          v101 = *((_QWORD *)a4 + 2);
          v40 = *a5;
          v41 = a5[1];
          v99 = *((_QWORD *)a5 + 4);
          v97 = v40;
          v98 = v41;
          result = sub_223D59C1C(a1, v20, &v102, &v100, &v97);
          if ((_DWORD)result)
          {
            v42 = a3[1];
            v43 = a3[2];
            v44 = (a3[3] - *a3) >> 1;
            LODWORD(v102) = v44 + *a3;
            HIDWORD(v102) = v42;
            v103 = v43;
            LODWORD(v104) = v102 + v44;
            HIDWORD(v104) = v42 + v44;
            v105 = v43 + v44;
            v100 = *a4;
            v101 = *((_QWORD *)a4 + 2);
            v45 = *a5;
            v46 = a5[1];
            v99 = *((_QWORD *)a5 + 4);
            v97 = v45;
            v98 = v46;
            result = sub_223D59C1C(a1, v20, &v102, &v100, &v97);
            if ((_DWORD)result)
            {
              v47 = a3[1];
              v48 = a3[2];
              v49 = (a3[3] - *a3) >> 1;
              LODWORD(v102) = v49 + *a3;
              HIDWORD(v102) = v47;
              v103 = v48 + v49;
              LODWORD(v104) = v102 + v49;
              HIDWORD(v104) = v47 + v49;
              v105 = v48 + v49 + v49;
              v100 = *a4;
              v101 = *((_QWORD *)a4 + 2);
              v50 = *a5;
              v51 = a5[1];
              v99 = *((_QWORD *)a5 + 4);
              v97 = v50;
              v98 = v51;
              result = sub_223D59C1C(a1, v20, &v102, &v100, &v97);
              if ((_DWORD)result)
              {
                v52 = a3[2];
                v53 = (a3[3] - *a3) >> 1;
                v54 = v53 + a3[1];
                LODWORD(v102) = v53 + *a3;
                HIDWORD(v102) = v54;
                v103 = v52;
                LODWORD(v104) = v102 + v53;
                HIDWORD(v104) = v54 + v53;
                v105 = v52 + v53;
                v100 = *a4;
                v101 = *((_QWORD *)a4 + 2);
                v55 = *a5;
                v56 = a5[1];
                v99 = *((_QWORD *)a5 + 4);
                v97 = v55;
                v98 = v56;
                result = sub_223D59C1C(a1, v20, &v102, &v100, &v97);
                if ((_DWORD)result)
                {
                  v57 = a3[2];
                  v58 = (a3[3] - *a3) >> 1;
                  v59 = v58 + a3[1];
                  LODWORD(v102) = v58 + *a3;
                  HIDWORD(v102) = v59;
                  v103 = v57 + v58;
                  LODWORD(v104) = v102 + v58;
                  HIDWORD(v104) = v59 + v58;
                  v105 = v57 + v58 + v58;
                  v100 = *a4;
                  v101 = *((_QWORD *)a4 + 2);
                  v60 = *a5;
                  v61 = a5[1];
                  v99 = *((_QWORD *)a5 + 4);
                  v97 = v60;
                  v98 = v61;
                  return sub_223D59C1C(a1, v20, &v102, &v100, &v97);
                }
              }
            }
          }
        }
      }
    }
    return result;
  }
  v67 = *a3;
  if (*a1 > *a3)
    v67 = *a1;
  v68 = *a1 + 8;
  if (a3[3] < v68)
    v68 = a3[3];
  result = 1;
  v69 = v68 - v67;
  if (v68 > v67)
  {
    v70 = *(int32x2_t *)(a1 + 1);
    v71 = vmax_s32(v70, *(int32x2_t *)(a3 + 1));
    v72 = vmin_s32(*(int32x2_t *)(a3 + 4), vadd_s32(v70, (int32x2_t)0x800000008));
    v73 = vcgt_s32(v72, v71);
    if ((v73.i8[0] & 1) != 0 && (v73.i8[4] & 1) != 0)
    {
      v74 = v67 & 7;
      v75 = v71.i32[0];
      v90 = v71.i32[1];
      v91 = v72.i32[0];
      v76 = v71.i32[1] << 6;
      v77 = 8 * v71.i32[0];
      v92 = v74;
      v93 = v69;
      v87 = v71.i32[0];
      v88 = v72.i32[1];
      v86 = 8 * v71.i32[0];
LABEL_31:
      v89 = v76;
      v78 = v76 & 0x1C0;
      v79 = v77;
      v94 = v78;
LABEL_32:
      v95 = v75;
      v96 = v79;
      v80 = v78 + (v79 & 0x38);
      while (1)
      {
        if (v74 >= 8
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 483, (uint64_t)"RelativePositionIsValid(pos)", 28, (uint64_t)"Invalid grid position", 21, (void (*)(void **))sub_22457406C)|| (v81 = *((_QWORD *)a5 + 1), v80 + v74 >= 0x200)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 499, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v82 = *(_DWORD *)(v81 + 4 * (v80 + v74));
        v63 = **(_BYTE ****)(*((_QWORD *)a5 + 2) + 8);
        v83 = (v82 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
        v84 = (v82 & 0x20000000) != 0 ? v83 : v82 & 0xCFFFFFFF;
        if ((v84 & 0x80000000) != 0)
          goto LABEL_51;
        if (!(v84 >> 30))
        {
          v85 = *v63;
          if (!*v85)
            *v85 = 1;
        }
        ++v74;
        if (!--v69)
        {
          v75 = v95 + 1;
          v79 = v96 + 8;
          v74 = v92;
          v69 = v93;
          v78 = v94;
          if (v95 + 1 != v91)
            goto LABEL_32;
          v76 = v89 + 64;
          result = 1;
          ++v90;
          v77 = v86;
          v75 = v87;
          if (v90 != v88)
            goto LABEL_31;
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_223D5A284(uint64_t a1, int a2, int a3, char a4, _QWORD *a5, double a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, double a10, float32x4_t a11)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  double v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  double v23;
  float32x4_t v24;
  int v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  double v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  double v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  double v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  double v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  double v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  double v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  double v60;
  float32x4_t v61;
  uint64_t i;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  __int128 v79;
  uint64_t v80;
  _BYTE v81[12];
  int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  char v87;
  char v88;
  uint64_t v89;
  int v90;
  char v91;
  char v92;
  uint64_t v93;
  int v94;
  char v95;
  char v96;
  uint64_t v97;
  int v98;
  char v99;
  char v100;
  uint64_t v101;
  int v102;
  char v103;
  char v104;
  uint64_t v105;
  int v106;
  char v107;
  char v108;
  uint64_t v109;
  int v110;
  char v111;
  char v112;
  uint64_t v113;
  int v114;
  char v115;
  char v116;
  uint64_t v117;
  int v118;
  char v119;
  char v120;
  uint64_t v121;
  int v122;
  char v123;
  char v124;
  uint64_t v125;
  int v126;
  char v127;
  char v128;
  uint64_t v129;
  int v130;
  char v131;
  char v132;
  uint64_t v133;
  int v134;
  char v135;
  char v136;
  int v137;
  uint64_t v138;
  char v139;
  char v140;
  uint64_t v141;
  int v142;
  char v143;
  char v144;
  int v145;
  uint64_t v146;
  char v147;
  char v148;
  uint64_t v149;
  int v150;
  char v151;
  char v152;
  int v153;
  uint64_t v154;
  char v155;
  char v156;
  uint64_t v157;
  int v158;
  char v159;
  char v160;
  int v161;
  uint64_t v162;
  char v163;
  char v164;
  uint64_t v165;
  int v166;
  char v167;
  char v168;
  int v169;
  uint64_t v170;
  char v171;
  char v172;
  uint64_t v173;
  int v174;
  char v175;
  char v176;
  int v177;
  uint64_t v178;
  char v179;
  char v180;
  uint64_t v181;
  int v182;
  char v183;
  char v184;
  int v185;
  uint64_t v186;
  char v187;
  _BYTE v188[12];
  uint64_t v189;
  int v190;

  v14 = a3 & 0xCFFFFFFF;
  v15 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v16 = *(_QWORD *)v15;
  *(_DWORD *)&v188[8] = *(_DWORD *)(v15 + 8);
  *(_QWORD *)v188 = v16;
  v17 = *(_QWORD *)(v15 + 12);
  v190 = *(_DWORD *)(v15 + 20);
  v189 = v17;
  v81[0] = 1;
  *(_QWORD *)&v81[4] = -1;
  v82 = -1;
  LOBYTE(v83) = 8;
  LOBYTE(v84) = 1;
  v85 = -1;
  v86 = -1;
  v87 = 8;
  v88 = 1;
  v89 = -1;
  v90 = -1;
  v91 = 8;
  v92 = 1;
  v93 = -1;
  v94 = -1;
  v95 = 8;
  v96 = 1;
  v97 = -1;
  v98 = -1;
  v99 = 8;
  v100 = 1;
  v101 = -1;
  v102 = -1;
  v103 = 8;
  v104 = 1;
  v105 = -1;
  v106 = -1;
  v107 = 8;
  v108 = 1;
  v109 = -1;
  v110 = -1;
  v111 = 8;
  v112 = 1;
  v113 = -1;
  v114 = -1;
  v115 = 8;
  v116 = 1;
  v117 = -1;
  v118 = -1;
  v119 = 8;
  v120 = 1;
  v121 = -1;
  v122 = -1;
  v123 = 8;
  v124 = 1;
  v125 = -1;
  v126 = -1;
  v127 = 8;
  v128 = 1;
  v129 = -1;
  v130 = -1;
  v131 = 8;
  v132 = 1;
  v133 = -1;
  v134 = -1;
  v135 = 8;
  v136 = 1;
  v137 = -1;
  v138 = -1;
  v139 = 8;
  v140 = 1;
  v141 = -1;
  v142 = -1;
  v143 = 8;
  v144 = 1;
  v145 = -1;
  v146 = -1;
  v147 = 8;
  v148 = 1;
  v149 = -1;
  v150 = -1;
  v151 = 8;
  v152 = 1;
  v153 = -1;
  v154 = -1;
  v155 = 8;
  v156 = 1;
  v157 = -1;
  v158 = -1;
  v159 = 8;
  v160 = 1;
  v161 = -1;
  v162 = -1;
  v163 = 8;
  v164 = 1;
  v165 = -1;
  v166 = -1;
  v167 = 8;
  v168 = 1;
  v169 = -1;
  v170 = -1;
  v171 = 8;
  v172 = 1;
  v173 = -1;
  v174 = -1;
  v175 = 8;
  v176 = 1;
  v177 = -1;
  v178 = -1;
  v179 = 8;
  v180 = 1;
  v181 = -1;
  v182 = -1;
  v183 = 8;
  v184 = 1;
  v185 = -1;
  v186 = -1;
  v187 = 8;
  result = sub_223D5AB24(a5, a4, a2, 0, (int32x2_t *)v188, (uint64_t)v81, NAN, a7, a8, a9, a10, a11);
  if (a2)
  {
    v25 = result;
    if ((_DWORD)result != 3)
    {
      v26 = (a2 - 1);
      if ((_DWORD)v26)
      {
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 24) & 0x80000000) != 0)
        {
          v71 = (v189 - *(_DWORD *)v188) >> 1;
          *(_QWORD *)v81 = *(_QWORD *)v188;
          *(_DWORD *)&v81[8] = *(_DWORD *)&v188[8];
          v82 = v71 + *(_DWORD *)v188;
          v83 = *(_DWORD *)&v188[4] + v71;
          v84 = *(_DWORD *)&v188[8] + v71;
          v79 = *(_OWORD *)a5;
          v80 = a5[2];
          sub_223D5CE80(v26, (int32x2_t *)v81, (_DWORD)result == 2, &v79, *(double *)&v79, v20, v21, v22, v23, v24);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 28) & 0x80000000) == 0)
          {
LABEL_6:
            sub_223D5A284(a1, v26);
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 32) & 0x80000000) == 0)
              goto LABEL_7;
            goto LABEL_20;
          }
        }
        else
        {
          sub_223D5A284(a1, v26);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 28) & 0x80000000) == 0)
            goto LABEL_6;
        }
        v72 = (v189 - *(_DWORD *)v188) >> 1;
        *(_QWORD *)v81 = *(_QWORD *)v188;
        *(_DWORD *)&v81[8] = *(_DWORD *)&v188[8] + v72;
        v82 = v72 + *(_DWORD *)v188;
        v83 = *(_DWORD *)&v188[4] + v72;
        v84 = *(_DWORD *)&v188[8] + v72 + v72;
        v79 = *(_OWORD *)a5;
        v80 = a5[2];
        sub_223D5CE80(v26, (int32x2_t *)v81, v25 == 2, &v79, *(double *)&v79, v27, v28, v29, v30, v31);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 32) & 0x80000000) == 0)
        {
LABEL_7:
          sub_223D5A284(a1, v26);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 36) & 0x80000000) == 0)
            goto LABEL_8;
          goto LABEL_21;
        }
LABEL_20:
        v73 = (v189 - *(_DWORD *)v188) >> 1;
        *(_DWORD *)v81 = *(_DWORD *)v188;
        *(_DWORD *)&v81[4] = v73 + *(_DWORD *)&v188[4];
        *(_DWORD *)&v81[8] = *(_DWORD *)&v188[8];
        v82 = v73 + *(_DWORD *)v188;
        v83 = v73 + *(_DWORD *)&v188[4] + v73;
        v84 = *(_DWORD *)&v188[8] + v73;
        v79 = *(_OWORD *)a5;
        v80 = a5[2];
        sub_223D5CE80(v26, (int32x2_t *)v81, v25 == 2, &v79, *(double *)&v79, v32, v33, v34, v35, v36);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 36) & 0x80000000) == 0)
        {
LABEL_8:
          sub_223D5A284(a1, v26);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 40) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_22;
        }
LABEL_21:
        v74 = (v189 - *(_DWORD *)v188) >> 1;
        *(_DWORD *)v81 = *(_DWORD *)v188;
        *(_DWORD *)&v81[4] = v74 + *(_DWORD *)&v188[4];
        *(_DWORD *)&v81[8] = *(_DWORD *)&v188[8] + v74;
        v82 = v74 + *(_DWORD *)v188;
        v83 = v74 + *(_DWORD *)&v188[4] + v74;
        v84 = *(_DWORD *)&v188[8] + v74 + v74;
        v79 = *(_OWORD *)a5;
        v80 = a5[2];
        sub_223D5CE80(v26, (int32x2_t *)v81, v25 == 2, &v79, *(double *)&v79, v37, v38, v39, v40, v41);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 40) & 0x80000000) == 0)
        {
LABEL_9:
          sub_223D5A284(a1, v26);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 44) & 0x80000000) == 0)
            goto LABEL_10;
          goto LABEL_23;
        }
LABEL_22:
        v75 = (v189 - *(_DWORD *)v188) >> 1;
        *(_DWORD *)v81 = v75 + *(_DWORD *)v188;
        *(_QWORD *)&v81[4] = *(_QWORD *)&v188[4];
        v82 = v75 + *(_DWORD *)v188 + v75;
        v83 = *(_DWORD *)&v188[4] + v75;
        v84 = *(_DWORD *)&v188[8] + v75;
        v79 = *(_OWORD *)a5;
        v80 = a5[2];
        sub_223D5CE80(v26, (int32x2_t *)v81, v25 == 2, &v79, *(double *)&v79, v42, v43, v44, v45, v46);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 44) & 0x80000000) == 0)
        {
LABEL_10:
          sub_223D5A284(a1, v26);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 48) & 0x80000000) == 0)
            goto LABEL_11;
          goto LABEL_24;
        }
LABEL_23:
        v76 = (v189 - *(_DWORD *)v188) >> 1;
        *(_DWORD *)v81 = v76 + *(_DWORD *)v188;
        *(_DWORD *)&v81[4] = *(_DWORD *)&v188[4];
        *(_DWORD *)&v81[8] = *(_DWORD *)&v188[8] + v76;
        v82 = v76 + *(_DWORD *)v188 + v76;
        v83 = *(_DWORD *)&v188[4] + v76;
        v84 = *(_DWORD *)&v188[8] + v76 + v76;
        v79 = *(_OWORD *)a5;
        v80 = a5[2];
        sub_223D5CE80(v26, (int32x2_t *)v81, v25 == 2, &v79, *(double *)&v79, v47, v48, v49, v50, v51);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 48) & 0x80000000) == 0)
        {
LABEL_11:
          sub_223D5A284(a1, v26);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 52) & 0x80000000) == 0)
            return sub_223D5A284(a1, v26);
          goto LABEL_25;
        }
LABEL_24:
        v77 = (v189 - *(_DWORD *)v188) >> 1;
        *(_DWORD *)v81 = v77 + *(_DWORD *)v188;
        *(_DWORD *)&v81[4] = v77 + *(_DWORD *)&v188[4];
        *(_DWORD *)&v81[8] = *(_DWORD *)&v188[8];
        v82 = v77 + *(_DWORD *)v188 + v77;
        v83 = v77 + *(_DWORD *)&v188[4] + v77;
        v84 = *(_DWORD *)&v188[8] + v77;
        v79 = *(_OWORD *)a5;
        v80 = a5[2];
        sub_223D5CE80(v26, (int32x2_t *)v81, v25 == 2, &v79, *(double *)&v79, v52, v53, v54, v55, v56);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v14 + 52) & 0x80000000) == 0)
          return sub_223D5A284(a1, v26);
LABEL_25:
        v78 = (v189 - *(_DWORD *)v188) >> 1;
        *(_DWORD *)v81 = v78 + *(_DWORD *)v188;
        *(_DWORD *)&v81[4] = v78 + *(_DWORD *)&v188[4];
        *(_DWORD *)&v81[8] = *(_DWORD *)&v188[8] + v78;
        v82 = v78 + *(_DWORD *)v188 + v78;
        v83 = v78 + *(_DWORD *)&v188[4] + v78;
        v84 = *(_DWORD *)&v188[8] + v78 + v78;
        v79 = *(_OWORD *)a5;
        v80 = a5[2];
        return sub_223D5CE80(v26, (int32x2_t *)v81, v25 == 2, &v79, *(double *)&v79, v57, v58, v59, v60, v61);
      }
      for (i = 0; i != 8; ++i)
      {
        while (1)
        {
          v64 = byte_22466FA9C[i];
          v65 = *(_QWORD *)(a1 + 184);
          v66 = *(_DWORD *)(v65 + 4488 * v14 + 4 * v64 + 24);
          v67 = (v64 >> 2) & 1;
          v68 = (v64 >> 1) & 1;
          v69 = v64 & 1;
          if ((v66 & 0x80000000) == 0)
            break;
          v63 = (v189 - *(_DWORD *)v188) >> 1;
          *(_DWORD *)v81 = *(_DWORD *)v188 + v63 * v67;
          *(_DWORD *)&v81[4] = *(_DWORD *)&v188[4] + v63 * v68;
          *(_DWORD *)&v81[8] = *(_DWORD *)&v188[8] + v63 * v69;
          v82 = *(_DWORD *)v81 + v63;
          v83 = *(_DWORD *)&v81[4] + v63;
          v84 = *(_DWORD *)&v81[8] + v63;
          v79 = *(_OWORD *)a5;
          v80 = a5[2];
          result = sub_223D5CE80(0, (int32x2_t *)v81, v25 == 2, &v79, *(double *)&v79, v20, v21, v22, v23, v24);
          if (++i == 8)
            return result;
        }
        v70 = (v189 - *(_DWORD *)v188) >> 1;
        *(_DWORD *)v81 = *(_DWORD *)v188 + v70 * v67;
        *(_DWORD *)&v81[4] = *(_DWORD *)&v188[4] + v70 * v68;
        *(_DWORD *)&v81[8] = *(_DWORD *)&v188[8] + v70 * v69;
        v82 = *(_DWORD *)v81 + v70;
        v83 = *(_DWORD *)&v81[4] + v70;
        v84 = *(_DWORD *)&v81[8] + v70;
        result = sub_223D5AB24(a5, v25 == 2, 0, v66, (int32x2_t *)v81, v65 + 4488 * v14 + 540 * v64 + 68, v19, v20, v21, v22, v23, v24);
      }
    }
  }
  return result;
}

uint64_t sub_223D5AB24(_QWORD *a1, char a2, int a3, unsigned int a4, int32x2_t *a5, uint64_t a6, double a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, double a11, float32x4_t a12)
{
  int v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  __int32 v44;
  __int32 v45;
  int v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t **v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  __int32 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  float v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t **v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  __int32 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unint64_t v81;
  int v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t **v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  __int32 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned __int8 *v97;
  unsigned int v98;
  unint64_t v99;
  int v100;
  float v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t **v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  __int32 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  unsigned int v116;
  unint64_t v117;
  int v118;
  float v119;
  float32x4_t v120;
  float32x4_t v121;
  uint64_t **v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  __int32 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned __int8 *v133;
  unsigned int v134;
  unint64_t v135;
  int v136;
  float v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t **v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  __int32 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned __int8 *v151;
  unsigned int v152;
  unint64_t v153;
  int v154;
  float v155;
  float32x4_t v156;
  float32x4_t v157;
  uint64_t **v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  __int32 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unsigned __int8 *v169;
  unsigned int v170;
  unint64_t v171;
  int v172;
  float v173;
  float32x4_t v174;
  float32x4_t v175;
  uint64_t **v176;
  __int32 v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unsigned __int8 *v187;
  unsigned int v188;
  unint64_t v189;
  int v190;
  float v191;
  float32x4_t v192;
  float32x4_t v193;
  uint64_t **v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  __int32 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unsigned __int8 *v205;
  unsigned int v206;
  unint64_t v207;
  int v208;
  float v209;
  float32x4_t v210;
  float32x4_t v211;
  uint64_t **v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  __int32 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unsigned __int8 *v223;
  unsigned int v224;
  unint64_t v225;
  int v226;
  float v227;
  float32x4_t v228;
  float32x4_t v229;
  uint64_t **v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  __int32 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unsigned __int8 *v241;
  unsigned int v242;
  unint64_t v243;
  int v244;
  float v245;
  float32x4_t v246;
  float32x4_t v247;
  uint64_t **v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  __int32 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unsigned __int8 *v259;
  unsigned int v260;
  unint64_t v261;
  int v262;
  float v263;
  float32x4_t v264;
  float32x4_t v265;
  uint64_t **v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  __int32 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unsigned __int8 *v277;
  unsigned int v278;
  unint64_t v279;
  int v280;
  float v281;
  float32x4_t v282;
  float32x4_t v283;
  uint64_t **v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  __int32 v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unsigned __int8 *v295;
  unsigned int v296;
  unint64_t v297;
  int v298;
  float v299;
  float32x4_t v300;
  float32x4_t v301;
  uint64_t **v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  __int32 v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unsigned __int8 *v313;
  unsigned int v314;
  unint64_t v315;
  int v316;
  float v317;
  float32x4_t v318;
  float32x4_t v319;
  uint64_t **v320;
  __int32 v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unsigned __int8 *v331;
  unsigned int v332;
  unint64_t v333;
  int v334;
  float v335;
  float32x4_t v336;
  float32x4_t v337;
  uint64_t **v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  __int32 v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unsigned __int8 *v349;
  unsigned int v350;
  unint64_t v351;
  int v352;
  float v353;
  float32x4_t v354;
  float32x4_t v355;
  uint64_t **v356;
  int v357;
  unsigned int v358;
  unsigned int v359;
  __int32 v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unsigned __int8 *v367;
  unsigned int v368;
  unint64_t v369;
  int v370;
  float v371;
  float32x4_t v372;
  float32x4_t v373;
  uint64_t **v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  __int32 v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  unsigned __int8 *v385;
  unsigned int v386;
  unint64_t v387;
  int v388;
  float v389;
  float32x4_t v390;
  float32x4_t v391;
  uint64_t **v392;
  int v393;
  unsigned int v394;
  unsigned int v395;
  __int32 v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unsigned __int8 *v403;
  unsigned int v404;
  unint64_t v405;
  int v406;
  float v407;
  float32x4_t v408;
  float32x4_t v409;
  uint64_t **v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  __int32 v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unsigned __int8 *v421;
  unsigned int v422;
  unint64_t v423;
  int v424;
  float v425;
  float32x4_t v426;
  float32x4_t v427;
  uint64_t **v428;
  int v429;
  unsigned int v430;
  unsigned int v431;
  __int32 v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  unsigned __int8 *v439;
  unsigned int v440;
  unint64_t v441;
  int v442;
  float v443;
  float32x4_t v444;
  float32x4_t v445;
  uint64_t **v446;
  int v447;
  unsigned int v448;
  unsigned int v449;
  __int32 v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unsigned __int8 *v457;
  unsigned int v458;
  unint64_t v459;
  int v460;
  float v461;
  float32x4_t v462;
  float32x4_t v463;
  uint64_t **v464;
  int v465;
  int v466;
  unsigned int v467;
  unsigned int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unsigned __int8 *v475;
  unsigned int v476;
  unint64_t v477;
  int v478;
  float v479;
  float32x4_t v480;
  float32x4_t v481;
  uint64_t **v482;
  int v483;
  unsigned int v484;
  unsigned int v485;
  __int32 v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  unsigned __int8 *v493;
  unsigned int v494;
  unint64_t v495;
  int v496;
  float v497;
  float32x4_t v498;
  float32x4_t v499;
  uint64_t **v500;
  int v501;
  unsigned int v502;
  unsigned int v503;
  __int32 v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  unsigned __int8 *v511;
  unsigned int v512;
  unint64_t v513;
  int v514;
  float v515;
  float32x4_t v516;
  float32x4_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  float32x4_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  __int128 v601[2];
  BOOL *v602;
  int32x2_t v603;
  __int32 v604;
  int32x2_t v605;
  __int32 v606;
  _BYTE v607[32];
  BOOL *v608;
  BOOL v609;

  v17 = 2;
  v600 = 2;
  if ((a2 & 1) == 0)
  {
    v18 = *(_QWORD *)(*a1 + 8);
    LODWORD(a7) = *(_DWORD *)(*(_QWORD *)*a1 + 144);
    *(float32x2_t *)a9.f32 = vcvt_f32_s32(*a5);
    a10.f32[0] = (float)a5[1].i32[0];
    a9.f32[2] = a10.f32[0];
    v19 = vmulq_n_f32(a9, *(float *)&a7);
    *(float *)&a7 = *(float *)&a7 * (float)(int)(a5[1].i32[1] - *(_QWORD *)a5);
    *(_DWORD *)&v607[8] = v19.i32[2];
    *(_QWORD *)v607 = v19.i64[0];
    v20 = vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0));
    *(_DWORD *)&v607[20] = v20.i32[2];
    *(_QWORD *)&v607[12] = v20.i64[0];
    if (*(_BYTE *)(v18 + 20) == 1)
    {
      v17 = sub_223E998FC((float *)v607, (float *)v18, *(float *)(v18 + 12), *(float *)(v18 + 16), v19, *(double *)a10.i64, a11, a12);
      v600 = v17;
      if (!v17)
        return 3;
    }
    else if (*(_BYTE *)(v18 + 20))
    {
      v17 = sub_223E99B90((float *)v607, (float *)v18, *(float *)(v18 + 12), *(float *)(v18 + 16), v19, a10);
      v600 = v17;
      if (!v17)
        return 3;
    }
    else
    {
      v17 = sub_223E99668((float *)v607, (float *)v18, *(float *)(v18 + 12), *(float *)(v18 + 16), v19, a10);
      v600 = v17;
      if (!v17)
        return 3;
    }
  }
  if (!a3)
  {
    v22 = (uint64_t *)a1[1];
    v609 = (a4 & 0x80000000) == 0;
    v23 = *v22;
    if ((a4 & 0x80000000) != 0)
    {
      v25 = (_DWORD *)(v23 + 280);
    }
    else
    {
      v24 = *(_QWORD *)(v23 + 2328);
      if (a4 >= (unint64_t)((*(_QWORD *)(v23 + 2336) - v24) >> 11))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v24 = *(_QWORD *)(v23 + 2328);
      }
      v25 = (_DWORD *)(v24 + ((unint64_t)a4 << 11));
    }
    *(_QWORD *)v607 = v23;
    *(_QWORD *)&v607[8] = v25;
    v26 = v22[1];
    *(_QWORD *)&v607[16] = v26;
    *(_QWORD *)&v607[24] = a6;
    v608 = &v609;
    if (v17 == 2)
    {
      *(_QWORD *)&v601[0] = v607;
      *((_QWORD *)&v601[0] + 1) = &v600;
      *(int32x2_t *)a9.f32 = *a5;
      v27 = a5[1].i32[0];
      v28 = **(uint64_t ***)(v26 + 8);
      v29 = *v28;
      if ((*v25 & 0x10000000) != 0)
        v30 = 0x40000000;
      else
        v30 = 0x80000000;
      if ((*v25 & 0x20000000) != 0)
        v31 = v30;
      else
        v31 = *v25 & 0xCFFFFFFF;
      if ((v31 & 0x40000000) != 0)
      {
        v44 = (__int32)*a5;
        v45 = HIDWORD(*(unint64_t *)a5);
      }
      else
      {
        if ((v31 & 0x80000000) != 0)
        {
          LOBYTE(v40) = -1;
          v46 = 2;
        }
        else
        {
          v32 = *(_QWORD *)(v29 + 2448);
          v33 = v32 + 520 * v31;
          v34 = *(_QWORD *)(v33 + 312);
          v35 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v33 + 336))
          {
            *(_BYTE *)(v33 + 336) = 0;
            v36 = *(unsigned int *)(v33 + 4);
            if ((_DWORD)v36)
            {
              v518 = v35;
              v519 = v34;
              v546 = a9;
              v573 = v27;
              v37 = 0;
              v38 = (unsigned __int8 *)(v32 + 520 * v31 + 36);
              do
              {
                v39 = *v38;
                v38 += 28;
                v37 = sub_223A4EC9C(v37, ((unint64_t)v39 << 8) | 1, 0xFFu);
                --v36;
              }
              while (v36);
              v40 = v37 >> 8;
              if (!(_BYTE)v37)
                LOBYTE(v40) = -1;
              v27 = v573;
              a9 = v546;
              v35 = v518;
              v34 = v519;
            }
            else
            {
              LOBYTE(v40) = -1;
            }
            *(_BYTE *)(v32 + 520 * v31 + 338) = v40;
          }
          else
          {
            LOBYTE(v40) = *(_BYTE *)(v32 + 520 * v31 + 338);
          }
          v46 = v34 > v35;
        }
        v47 = *(float *)(v29 + 144);
        *(float32x2_t *)a9.f32 = vcvt_f32_s32(*(int32x2_t *)a9.f32);
        a9.f32[2] = (float)v27;
        v48.i64[0] = 0x3F0000003F000000;
        v48.i64[1] = 0x3F0000003F000000;
        v49 = vmulq_n_f32(vaddq_f32(a9, v48), v47);
        v604 = v49.i32[2];
        v603 = *(int32x2_t *)v49.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v40, v46, v47);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v50 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v50;
        v29 = **v50;
      }
      v51 = v25[1];
      if ((v51 & 0x10000000) != 0)
        v52 = 0x40000000;
      else
        v52 = 0x80000000;
      if ((v51 & 0x20000000) != 0)
        v53 = v52;
      else
        v53 = v51 & 0xCFFFFFFF;
      if ((v53 & 0x40000000) == 0)
      {
        v54 = v44 + 1;
        if ((v53 & 0x80000000) != 0)
        {
          LOBYTE(v63) = -1;
          v64 = 2;
        }
        else
        {
          v55 = *(_QWORD *)(v29 + 2448);
          v56 = v55 + 520 * v53;
          v57 = *(_QWORD *)(v56 + 312);
          v58 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v56 + 336))
          {
            *(_BYTE *)(v56 + 336) = 0;
            v59 = *(unsigned int *)(v56 + 4);
            if ((_DWORD)v59)
            {
              v520 = v58;
              v547 = v57;
              v574 = v27;
              v60 = 0;
              v61 = (unsigned __int8 *)(v55 + 520 * v53 + 36);
              do
              {
                v62 = *v61;
                v61 += 28;
                v60 = sub_223A4EC9C(v60, ((unint64_t)v62 << 8) | 1, 0xFFu);
                --v59;
              }
              while (v59);
              v63 = v60 >> 8;
              if (!(_BYTE)v60)
                LOBYTE(v63) = -1;
              v27 = v574;
              v58 = v520;
              v57 = v547;
            }
            else
            {
              LOBYTE(v63) = -1;
            }
            *(_BYTE *)(v55 + 520 * v53 + 338) = v63;
          }
          else
          {
            LOBYTE(v63) = *(_BYTE *)(v55 + 520 * v53 + 338);
          }
          v64 = v57 > v58;
        }
        v65 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v45, v54));
        a8.f32[2] = (float)v27;
        v66.i64[0] = 0x3F0000003F000000;
        v66.i64[1] = 0x3F0000003F000000;
        v67 = vmulq_n_f32(vaddq_f32(a8, v66), v65);
        v604 = v67.i32[2];
        v603 = *(int32x2_t *)v67.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v63, v64, v65);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v68 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v68;
        v29 = **v68;
      }
      v69 = v25[2];
      if ((v69 & 0x10000000) != 0)
        v70 = 0x40000000;
      else
        v70 = 0x80000000;
      if ((v69 & 0x20000000) != 0)
        v71 = v70;
      else
        v71 = v69 & 0xCFFFFFFF;
      if ((v71 & 0x40000000) == 0)
      {
        v72 = v44 + 2;
        if ((v71 & 0x80000000) != 0)
        {
          LOBYTE(v81) = -1;
          v82 = 2;
        }
        else
        {
          v73 = *(_QWORD *)(v29 + 2448);
          v74 = v73 + 520 * v71;
          v75 = *(_QWORD *)(v74 + 312);
          v76 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v74 + 336))
          {
            *(_BYTE *)(v74 + 336) = 0;
            v77 = *(unsigned int *)(v74 + 4);
            if ((_DWORD)v77)
            {
              v521 = v76;
              v548 = v75;
              v575 = v27;
              v78 = 0;
              v79 = (unsigned __int8 *)(v73 + 520 * v71 + 36);
              do
              {
                v80 = *v79;
                v79 += 28;
                v78 = sub_223A4EC9C(v78, ((unint64_t)v80 << 8) | 1, 0xFFu);
                --v77;
              }
              while (v77);
              v81 = v78 >> 8;
              if (!(_BYTE)v78)
                LOBYTE(v81) = -1;
              v27 = v575;
              v76 = v521;
              v75 = v548;
            }
            else
            {
              LOBYTE(v81) = -1;
            }
            *(_BYTE *)(v73 + 520 * v71 + 338) = v81;
          }
          else
          {
            LOBYTE(v81) = *(_BYTE *)(v73 + 520 * v71 + 338);
          }
          v82 = v75 > v76;
        }
        v83 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v45, v72));
        a8.f32[2] = (float)v27;
        v84.i64[0] = 0x3F0000003F000000;
        v84.i64[1] = 0x3F0000003F000000;
        v85 = vmulq_n_f32(vaddq_f32(a8, v84), v83);
        v604 = v85.i32[2];
        v603 = *(int32x2_t *)v85.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v81, v82, v83);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v86 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v86;
        v29 = **v86;
      }
      v87 = v25[3];
      if ((v87 & 0x10000000) != 0)
        v88 = 0x40000000;
      else
        v88 = 0x80000000;
      if ((v87 & 0x20000000) != 0)
        v89 = v88;
      else
        v89 = v87 & 0xCFFFFFFF;
      if ((v89 & 0x40000000) == 0)
      {
        v90 = v44 + 3;
        if ((v89 & 0x80000000) != 0)
        {
          LOBYTE(v99) = -1;
          v100 = 2;
        }
        else
        {
          v91 = *(_QWORD *)(v29 + 2448);
          v92 = v91 + 520 * v89;
          v93 = *(_QWORD *)(v92 + 312);
          v94 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v92 + 336))
          {
            *(_BYTE *)(v92 + 336) = 0;
            v95 = *(unsigned int *)(v92 + 4);
            if ((_DWORD)v95)
            {
              v522 = v94;
              v549 = v93;
              v576 = v27;
              v96 = 0;
              v97 = (unsigned __int8 *)(v91 + 520 * v89 + 36);
              do
              {
                v98 = *v97;
                v97 += 28;
                v96 = sub_223A4EC9C(v96, ((unint64_t)v98 << 8) | 1, 0xFFu);
                --v95;
              }
              while (v95);
              v99 = v96 >> 8;
              if (!(_BYTE)v96)
                LOBYTE(v99) = -1;
              v27 = v576;
              v94 = v522;
              v93 = v549;
            }
            else
            {
              LOBYTE(v99) = -1;
            }
            *(_BYTE *)(v91 + 520 * v89 + 338) = v99;
          }
          else
          {
            LOBYTE(v99) = *(_BYTE *)(v91 + 520 * v89 + 338);
          }
          v100 = v93 > v94;
        }
        v101 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v45, v90));
        a8.f32[2] = (float)v27;
        v102.i64[0] = 0x3F0000003F000000;
        v102.i64[1] = 0x3F0000003F000000;
        v103 = vmulq_n_f32(vaddq_f32(a8, v102), v101);
        v604 = v103.i32[2];
        v603 = *(int32x2_t *)v103.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v99, v100, v101);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v104 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v104;
        v29 = **v104;
      }
      v105 = v25[4];
      if ((v105 & 0x10000000) != 0)
        v106 = 0x40000000;
      else
        v106 = 0x80000000;
      if ((v105 & 0x20000000) != 0)
        v107 = v106;
      else
        v107 = v105 & 0xCFFFFFFF;
      if ((v107 & 0x40000000) == 0)
      {
        v108 = v44 + 4;
        if ((v107 & 0x80000000) != 0)
        {
          LOBYTE(v117) = -1;
          v118 = 2;
        }
        else
        {
          v109 = *(_QWORD *)(v29 + 2448);
          v110 = v109 + 520 * v107;
          v111 = *(_QWORD *)(v110 + 312);
          v112 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v110 + 336))
          {
            *(_BYTE *)(v110 + 336) = 0;
            v113 = *(unsigned int *)(v110 + 4);
            if ((_DWORD)v113)
            {
              v523 = v112;
              v550 = v111;
              v577 = v27;
              v114 = 0;
              v115 = (unsigned __int8 *)(v109 + 520 * v107 + 36);
              do
              {
                v116 = *v115;
                v115 += 28;
                v114 = sub_223A4EC9C(v114, ((unint64_t)v116 << 8) | 1, 0xFFu);
                --v113;
              }
              while (v113);
              v117 = v114 >> 8;
              if (!(_BYTE)v114)
                LOBYTE(v117) = -1;
              v27 = v577;
              v112 = v523;
              v111 = v550;
            }
            else
            {
              LOBYTE(v117) = -1;
            }
            *(_BYTE *)(v109 + 520 * v107 + 338) = v117;
          }
          else
          {
            LOBYTE(v117) = *(_BYTE *)(v109 + 520 * v107 + 338);
          }
          v118 = v111 > v112;
        }
        v119 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v45, v108));
        a8.f32[2] = (float)v27;
        v120.i64[0] = 0x3F0000003F000000;
        v120.i64[1] = 0x3F0000003F000000;
        v121 = vmulq_n_f32(vaddq_f32(a8, v120), v119);
        v604 = v121.i32[2];
        v603 = *(int32x2_t *)v121.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v117, v118, v119);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v122 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v122;
        v29 = **v122;
      }
      v123 = v25[5];
      if ((v123 & 0x10000000) != 0)
        v124 = 0x40000000;
      else
        v124 = 0x80000000;
      if ((v123 & 0x20000000) != 0)
        v125 = v124;
      else
        v125 = v123 & 0xCFFFFFFF;
      if ((v125 & 0x40000000) == 0)
      {
        v126 = v44 + 5;
        if ((v125 & 0x80000000) != 0)
        {
          LOBYTE(v135) = -1;
          v136 = 2;
        }
        else
        {
          v127 = *(_QWORD *)(v29 + 2448);
          v128 = v127 + 520 * v125;
          v129 = *(_QWORD *)(v128 + 312);
          v130 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v128 + 336))
          {
            *(_BYTE *)(v128 + 336) = 0;
            v131 = *(unsigned int *)(v128 + 4);
            if ((_DWORD)v131)
            {
              v524 = v130;
              v551 = v129;
              v578 = v27;
              v132 = 0;
              v133 = (unsigned __int8 *)(v127 + 520 * v125 + 36);
              do
              {
                v134 = *v133;
                v133 += 28;
                v132 = sub_223A4EC9C(v132, ((unint64_t)v134 << 8) | 1, 0xFFu);
                --v131;
              }
              while (v131);
              v135 = v132 >> 8;
              if (!(_BYTE)v132)
                LOBYTE(v135) = -1;
              v27 = v578;
              v130 = v524;
              v129 = v551;
            }
            else
            {
              LOBYTE(v135) = -1;
            }
            *(_BYTE *)(v127 + 520 * v125 + 338) = v135;
          }
          else
          {
            LOBYTE(v135) = *(_BYTE *)(v127 + 520 * v125 + 338);
          }
          v136 = v129 > v130;
        }
        v137 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v45, v126));
        a8.f32[2] = (float)v27;
        v138.i64[0] = 0x3F0000003F000000;
        v138.i64[1] = 0x3F0000003F000000;
        v139 = vmulq_n_f32(vaddq_f32(a8, v138), v137);
        v604 = v139.i32[2];
        v603 = *(int32x2_t *)v139.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v135, v136, v137);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v140 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v140;
        v29 = **v140;
      }
      v141 = v25[6];
      if ((v141 & 0x10000000) != 0)
        v142 = 0x40000000;
      else
        v142 = 0x80000000;
      if ((v141 & 0x20000000) != 0)
        v143 = v142;
      else
        v143 = v141 & 0xCFFFFFFF;
      if ((v143 & 0x40000000) == 0)
      {
        v144 = v44 + 6;
        if ((v143 & 0x80000000) != 0)
        {
          LOBYTE(v153) = -1;
          v154 = 2;
        }
        else
        {
          v145 = *(_QWORD *)(v29 + 2448);
          v146 = v145 + 520 * v143;
          v147 = *(_QWORD *)(v146 + 312);
          v148 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v146 + 336))
          {
            *(_BYTE *)(v146 + 336) = 0;
            v149 = *(unsigned int *)(v146 + 4);
            if ((_DWORD)v149)
            {
              v525 = v148;
              v552 = v147;
              v579 = v27;
              v150 = 0;
              v151 = (unsigned __int8 *)(v145 + 520 * v143 + 36);
              do
              {
                v152 = *v151;
                v151 += 28;
                v150 = sub_223A4EC9C(v150, ((unint64_t)v152 << 8) | 1, 0xFFu);
                --v149;
              }
              while (v149);
              v153 = v150 >> 8;
              if (!(_BYTE)v150)
                LOBYTE(v153) = -1;
              v27 = v579;
              v148 = v525;
              v147 = v552;
            }
            else
            {
              LOBYTE(v153) = -1;
            }
            *(_BYTE *)(v145 + 520 * v143 + 338) = v153;
          }
          else
          {
            LOBYTE(v153) = *(_BYTE *)(v145 + 520 * v143 + 338);
          }
          v154 = v147 > v148;
        }
        v155 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v45, v144));
        a8.f32[2] = (float)v27;
        v156.i64[0] = 0x3F0000003F000000;
        v156.i64[1] = 0x3F0000003F000000;
        v157 = vmulq_n_f32(vaddq_f32(a8, v156), v155);
        v604 = v157.i32[2];
        v603 = *(int32x2_t *)v157.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v153, v154, v155);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v158 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v158;
        v29 = **v158;
      }
      v159 = v25[7];
      if ((v159 & 0x10000000) != 0)
        v160 = 0x40000000;
      else
        v160 = 0x80000000;
      if ((v159 & 0x20000000) != 0)
        v161 = v160;
      else
        v161 = v159 & 0xCFFFFFFF;
      if ((v161 & 0x40000000) == 0)
      {
        v162 = v44 + 7;
        if ((v161 & 0x80000000) != 0)
        {
          LOBYTE(v171) = -1;
          v172 = 2;
        }
        else
        {
          v163 = *(_QWORD *)(v29 + 2448);
          v164 = v163 + 520 * v161;
          v165 = *(_QWORD *)(v164 + 312);
          v166 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v164 + 336))
          {
            *(_BYTE *)(v164 + 336) = 0;
            v167 = *(unsigned int *)(v164 + 4);
            if ((_DWORD)v167)
            {
              v526 = v166;
              v553 = v165;
              v580 = v27;
              v168 = 0;
              v169 = (unsigned __int8 *)(v163 + 520 * v161 + 36);
              do
              {
                v170 = *v169;
                v169 += 28;
                v168 = sub_223A4EC9C(v168, ((unint64_t)v170 << 8) | 1, 0xFFu);
                --v167;
              }
              while (v167);
              v171 = v168 >> 8;
              if (!(_BYTE)v168)
                LOBYTE(v171) = -1;
              v27 = v580;
              v166 = v526;
              v165 = v553;
            }
            else
            {
              LOBYTE(v171) = -1;
            }
            *(_BYTE *)(v163 + 520 * v161 + 338) = v171;
          }
          else
          {
            LOBYTE(v171) = *(_BYTE *)(v163 + 520 * v161 + 338);
          }
          v172 = v165 > v166;
        }
        v173 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v45, v162));
        a8.f32[2] = (float)v27;
        v174.i64[0] = 0x3F0000003F000000;
        v174.i64[1] = 0x3F0000003F000000;
        v175 = vmulq_n_f32(vaddq_f32(a8, v174), v173);
        v604 = v175.i32[2];
        v603 = *(int32x2_t *)v175.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v171, v172, v173);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v176 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v176;
        v29 = **v176;
      }
      v177 = v45 + 1;
      v178 = v25[8];
      if ((v178 & 0x10000000) != 0)
        v179 = 0x40000000;
      else
        v179 = 0x80000000;
      if ((v178 & 0x20000000) != 0)
        v180 = v179;
      else
        v180 = v178 & 0xCFFFFFFF;
      if ((v180 & 0x40000000) == 0)
      {
        if ((v180 & 0x80000000) != 0)
        {
          LOBYTE(v189) = -1;
          v190 = 2;
        }
        else
        {
          v181 = *(_QWORD *)(v29 + 2448);
          v182 = v181 + 520 * v180;
          v183 = *(_QWORD *)(v182 + 312);
          v184 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v182 + 336))
          {
            *(_BYTE *)(v182 + 336) = 0;
            v185 = *(unsigned int *)(v182 + 4);
            if ((_DWORD)v185)
            {
              v527 = v184;
              v554 = v183;
              v581 = v27;
              v186 = 0;
              v187 = (unsigned __int8 *)(v181 + 520 * v180 + 36);
              do
              {
                v188 = *v187;
                v187 += 28;
                v186 = sub_223A4EC9C(v186, ((unint64_t)v188 << 8) | 1, 0xFFu);
                --v185;
              }
              while (v185);
              v189 = v186 >> 8;
              if (!(_BYTE)v186)
                LOBYTE(v189) = -1;
              v27 = v581;
              v184 = v527;
              v183 = v554;
            }
            else
            {
              LOBYTE(v189) = -1;
            }
            *(_BYTE *)(v181 + 520 * v180 + 338) = v189;
          }
          else
          {
            LOBYTE(v189) = *(_BYTE *)(v181 + 520 * v180 + 338);
          }
          v190 = v183 > v184;
        }
        v191 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v177, v44));
        a8.f32[2] = (float)v27;
        v192.i64[0] = 0x3F0000003F000000;
        v192.i64[1] = 0x3F0000003F000000;
        v193 = vmulq_n_f32(vaddq_f32(a8, v192), v191);
        v604 = v193.i32[2];
        v603 = *(int32x2_t *)v193.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v189, v190, v191);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v194 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v194;
        v29 = **v194;
        v177 = v45 + 1;
      }
      v195 = v25[9];
      if ((v195 & 0x10000000) != 0)
        v196 = 0x40000000;
      else
        v196 = 0x80000000;
      if ((v195 & 0x20000000) != 0)
        v197 = v196;
      else
        v197 = v195 & 0xCFFFFFFF;
      if ((v197 & 0x40000000) == 0)
      {
        v198 = v44 + 1;
        if ((v197 & 0x80000000) != 0)
        {
          LOBYTE(v207) = -1;
          v208 = 2;
        }
        else
        {
          v199 = *(_QWORD *)(v29 + 2448);
          v200 = v199 + 520 * v197;
          v201 = *(_QWORD *)(v200 + 312);
          v202 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v200 + 336))
          {
            *(_BYTE *)(v200 + 336) = 0;
            v203 = *(unsigned int *)(v200 + 4);
            if ((_DWORD)v203)
            {
              v528 = v202;
              v555 = v201;
              v582 = v27;
              v204 = 0;
              v205 = (unsigned __int8 *)(v199 + 520 * v197 + 36);
              do
              {
                v206 = *v205;
                v205 += 28;
                v204 = sub_223A4EC9C(v204, ((unint64_t)v206 << 8) | 1, 0xFFu);
                --v203;
              }
              while (v203);
              v207 = v204 >> 8;
              if (!(_BYTE)v204)
                LOBYTE(v207) = -1;
              v27 = v582;
              v202 = v528;
              v201 = v555;
            }
            else
            {
              LOBYTE(v207) = -1;
            }
            *(_BYTE *)(v199 + 520 * v197 + 338) = v207;
          }
          else
          {
            LOBYTE(v207) = *(_BYTE *)(v199 + 520 * v197 + 338);
          }
          v208 = v201 > v202;
        }
        v209 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v177, v198));
        a8.f32[2] = (float)v27;
        v210.i64[0] = 0x3F0000003F000000;
        v210.i64[1] = 0x3F0000003F000000;
        v211 = vmulq_n_f32(vaddq_f32(a8, v210), v209);
        v604 = v211.i32[2];
        v603 = *(int32x2_t *)v211.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v207, v208, v209);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v212 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v212;
        v29 = **v212;
        v177 = v45 + 1;
      }
      v213 = v25[10];
      if ((v213 & 0x10000000) != 0)
        v214 = 0x40000000;
      else
        v214 = 0x80000000;
      if ((v213 & 0x20000000) != 0)
        v215 = v214;
      else
        v215 = v213 & 0xCFFFFFFF;
      if ((v215 & 0x40000000) == 0)
      {
        v216 = v44 + 2;
        if ((v215 & 0x80000000) != 0)
        {
          LOBYTE(v225) = -1;
          v226 = 2;
        }
        else
        {
          v217 = *(_QWORD *)(v29 + 2448);
          v218 = v217 + 520 * v215;
          v219 = *(_QWORD *)(v218 + 312);
          v220 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v218 + 336))
          {
            *(_BYTE *)(v218 + 336) = 0;
            v221 = *(unsigned int *)(v218 + 4);
            if ((_DWORD)v221)
            {
              v529 = v220;
              v556 = v219;
              v583 = v27;
              v222 = 0;
              v223 = (unsigned __int8 *)(v217 + 520 * v215 + 36);
              do
              {
                v224 = *v223;
                v223 += 28;
                v222 = sub_223A4EC9C(v222, ((unint64_t)v224 << 8) | 1, 0xFFu);
                --v221;
              }
              while (v221);
              v225 = v222 >> 8;
              if (!(_BYTE)v222)
                LOBYTE(v225) = -1;
              v27 = v583;
              v220 = v529;
              v219 = v556;
            }
            else
            {
              LOBYTE(v225) = -1;
            }
            *(_BYTE *)(v217 + 520 * v215 + 338) = v225;
          }
          else
          {
            LOBYTE(v225) = *(_BYTE *)(v217 + 520 * v215 + 338);
          }
          v226 = v219 > v220;
        }
        v227 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v177, v216));
        a8.f32[2] = (float)v27;
        v228.i64[0] = 0x3F0000003F000000;
        v228.i64[1] = 0x3F0000003F000000;
        v229 = vmulq_n_f32(vaddq_f32(a8, v228), v227);
        v604 = v229.i32[2];
        v603 = *(int32x2_t *)v229.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v225, v226, v227);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v230 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v230;
        v29 = **v230;
        v177 = v45 + 1;
      }
      v231 = v25[11];
      if ((v231 & 0x10000000) != 0)
        v232 = 0x40000000;
      else
        v232 = 0x80000000;
      if ((v231 & 0x20000000) != 0)
        v233 = v232;
      else
        v233 = v231 & 0xCFFFFFFF;
      if ((v233 & 0x40000000) == 0)
      {
        v234 = v44 + 3;
        if ((v233 & 0x80000000) != 0)
        {
          LOBYTE(v243) = -1;
          v244 = 2;
        }
        else
        {
          v235 = *(_QWORD *)(v29 + 2448);
          v236 = v235 + 520 * v233;
          v237 = *(_QWORD *)(v236 + 312);
          v238 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v236 + 336))
          {
            *(_BYTE *)(v236 + 336) = 0;
            v239 = *(unsigned int *)(v236 + 4);
            if ((_DWORD)v239)
            {
              v530 = v238;
              v557 = v237;
              v584 = v27;
              v240 = 0;
              v241 = (unsigned __int8 *)(v235 + 520 * v233 + 36);
              do
              {
                v242 = *v241;
                v241 += 28;
                v240 = sub_223A4EC9C(v240, ((unint64_t)v242 << 8) | 1, 0xFFu);
                --v239;
              }
              while (v239);
              v243 = v240 >> 8;
              if (!(_BYTE)v240)
                LOBYTE(v243) = -1;
              v27 = v584;
              v238 = v530;
              v237 = v557;
            }
            else
            {
              LOBYTE(v243) = -1;
            }
            *(_BYTE *)(v235 + 520 * v233 + 338) = v243;
          }
          else
          {
            LOBYTE(v243) = *(_BYTE *)(v235 + 520 * v233 + 338);
          }
          v244 = v237 > v238;
        }
        v245 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v177, v234));
        a8.f32[2] = (float)v27;
        v246.i64[0] = 0x3F0000003F000000;
        v246.i64[1] = 0x3F0000003F000000;
        v247 = vmulq_n_f32(vaddq_f32(a8, v246), v245);
        v604 = v247.i32[2];
        v603 = *(int32x2_t *)v247.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v243, v244, v245);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v248 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v248;
        v29 = **v248;
        v177 = v45 + 1;
      }
      v249 = v25[12];
      if ((v249 & 0x10000000) != 0)
        v250 = 0x40000000;
      else
        v250 = 0x80000000;
      if ((v249 & 0x20000000) != 0)
        v251 = v250;
      else
        v251 = v249 & 0xCFFFFFFF;
      if ((v251 & 0x40000000) == 0)
      {
        v252 = v44 + 4;
        if ((v251 & 0x80000000) != 0)
        {
          LOBYTE(v261) = -1;
          v262 = 2;
        }
        else
        {
          v253 = *(_QWORD *)(v29 + 2448);
          v254 = v253 + 520 * v251;
          v255 = *(_QWORD *)(v254 + 312);
          v256 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v254 + 336))
          {
            *(_BYTE *)(v254 + 336) = 0;
            v257 = *(unsigned int *)(v254 + 4);
            if ((_DWORD)v257)
            {
              v531 = v256;
              v558 = v255;
              v585 = v27;
              v258 = 0;
              v259 = (unsigned __int8 *)(v253 + 520 * v251 + 36);
              do
              {
                v260 = *v259;
                v259 += 28;
                v258 = sub_223A4EC9C(v258, ((unint64_t)v260 << 8) | 1, 0xFFu);
                --v257;
              }
              while (v257);
              v261 = v258 >> 8;
              if (!(_BYTE)v258)
                LOBYTE(v261) = -1;
              v27 = v585;
              v256 = v531;
              v255 = v558;
            }
            else
            {
              LOBYTE(v261) = -1;
            }
            *(_BYTE *)(v253 + 520 * v251 + 338) = v261;
          }
          else
          {
            LOBYTE(v261) = *(_BYTE *)(v253 + 520 * v251 + 338);
          }
          v262 = v255 > v256;
        }
        v263 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v177, v252));
        a8.f32[2] = (float)v27;
        v264.i64[0] = 0x3F0000003F000000;
        v264.i64[1] = 0x3F0000003F000000;
        v265 = vmulq_n_f32(vaddq_f32(a8, v264), v263);
        v604 = v265.i32[2];
        v603 = *(int32x2_t *)v265.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v261, v262, v263);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v266 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v266;
        v29 = **v266;
        v177 = v45 + 1;
      }
      v267 = v25[13];
      if ((v267 & 0x10000000) != 0)
        v268 = 0x40000000;
      else
        v268 = 0x80000000;
      if ((v267 & 0x20000000) != 0)
        v269 = v268;
      else
        v269 = v267 & 0xCFFFFFFF;
      if ((v269 & 0x40000000) == 0)
      {
        v270 = v44 + 5;
        if ((v269 & 0x80000000) != 0)
        {
          LOBYTE(v279) = -1;
          v280 = 2;
        }
        else
        {
          v271 = *(_QWORD *)(v29 + 2448);
          v272 = v271 + 520 * v269;
          v273 = *(_QWORD *)(v272 + 312);
          v274 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v272 + 336))
          {
            *(_BYTE *)(v272 + 336) = 0;
            v275 = *(unsigned int *)(v272 + 4);
            if ((_DWORD)v275)
            {
              v532 = v274;
              v559 = v273;
              v586 = v27;
              v276 = 0;
              v277 = (unsigned __int8 *)(v271 + 520 * v269 + 36);
              do
              {
                v278 = *v277;
                v277 += 28;
                v276 = sub_223A4EC9C(v276, ((unint64_t)v278 << 8) | 1, 0xFFu);
                --v275;
              }
              while (v275);
              v279 = v276 >> 8;
              if (!(_BYTE)v276)
                LOBYTE(v279) = -1;
              v27 = v586;
              v274 = v532;
              v273 = v559;
            }
            else
            {
              LOBYTE(v279) = -1;
            }
            *(_BYTE *)(v271 + 520 * v269 + 338) = v279;
          }
          else
          {
            LOBYTE(v279) = *(_BYTE *)(v271 + 520 * v269 + 338);
          }
          v280 = v273 > v274;
        }
        v281 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v177, v270));
        a8.f32[2] = (float)v27;
        v282.i64[0] = 0x3F0000003F000000;
        v282.i64[1] = 0x3F0000003F000000;
        v283 = vmulq_n_f32(vaddq_f32(a8, v282), v281);
        v604 = v283.i32[2];
        v603 = *(int32x2_t *)v283.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v279, v280, v281);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v284 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v284;
        v29 = **v284;
        v177 = v45 + 1;
      }
      v285 = v25[14];
      if ((v285 & 0x10000000) != 0)
        v286 = 0x40000000;
      else
        v286 = 0x80000000;
      if ((v285 & 0x20000000) != 0)
        v287 = v286;
      else
        v287 = v285 & 0xCFFFFFFF;
      if ((v287 & 0x40000000) == 0)
      {
        v288 = v44 + 6;
        if ((v287 & 0x80000000) != 0)
        {
          LOBYTE(v297) = -1;
          v298 = 2;
        }
        else
        {
          v289 = *(_QWORD *)(v29 + 2448);
          v290 = v289 + 520 * v287;
          v291 = *(_QWORD *)(v290 + 312);
          v292 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v290 + 336))
          {
            *(_BYTE *)(v290 + 336) = 0;
            v293 = *(unsigned int *)(v290 + 4);
            if ((_DWORD)v293)
            {
              v533 = v292;
              v560 = v291;
              v587 = v27;
              v294 = 0;
              v295 = (unsigned __int8 *)(v289 + 520 * v287 + 36);
              do
              {
                v296 = *v295;
                v295 += 28;
                v294 = sub_223A4EC9C(v294, ((unint64_t)v296 << 8) | 1, 0xFFu);
                --v293;
              }
              while (v293);
              v297 = v294 >> 8;
              if (!(_BYTE)v294)
                LOBYTE(v297) = -1;
              v27 = v587;
              v292 = v533;
              v291 = v560;
            }
            else
            {
              LOBYTE(v297) = -1;
            }
            *(_BYTE *)(v289 + 520 * v287 + 338) = v297;
          }
          else
          {
            LOBYTE(v297) = *(_BYTE *)(v289 + 520 * v287 + 338);
          }
          v298 = v291 > v292;
        }
        v299 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v177, v288));
        a8.f32[2] = (float)v27;
        v300.i64[0] = 0x3F0000003F000000;
        v300.i64[1] = 0x3F0000003F000000;
        v301 = vmulq_n_f32(vaddq_f32(a8, v300), v299);
        v604 = v301.i32[2];
        v603 = *(int32x2_t *)v301.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v297, v298, v299);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v302 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v302;
        v29 = **v302;
        v177 = v45 + 1;
      }
      v303 = v25[15];
      if ((v303 & 0x10000000) != 0)
        v304 = 0x40000000;
      else
        v304 = 0x80000000;
      if ((v303 & 0x20000000) != 0)
        v305 = v304;
      else
        v305 = v303 & 0xCFFFFFFF;
      if ((v305 & 0x40000000) == 0)
      {
        v306 = v44 + 7;
        if ((v305 & 0x80000000) != 0)
        {
          LOBYTE(v315) = -1;
          v316 = 2;
        }
        else
        {
          v307 = *(_QWORD *)(v29 + 2448);
          v308 = v307 + 520 * v305;
          v309 = *(_QWORD *)(v308 + 312);
          v310 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v308 + 336))
          {
            *(_BYTE *)(v308 + 336) = 0;
            v311 = *(unsigned int *)(v308 + 4);
            if ((_DWORD)v311)
            {
              v534 = v310;
              v561 = v309;
              v588 = v27;
              v312 = 0;
              v313 = (unsigned __int8 *)(v307 + 520 * v305 + 36);
              do
              {
                v314 = *v313;
                v313 += 28;
                v312 = sub_223A4EC9C(v312, ((unint64_t)v314 << 8) | 1, 0xFFu);
                --v311;
              }
              while (v311);
              v315 = v312 >> 8;
              if (!(_BYTE)v312)
                LOBYTE(v315) = -1;
              v27 = v588;
              v310 = v534;
              v309 = v561;
            }
            else
            {
              LOBYTE(v315) = -1;
            }
            *(_BYTE *)(v307 + 520 * v305 + 338) = v315;
          }
          else
          {
            LOBYTE(v315) = *(_BYTE *)(v307 + 520 * v305 + 338);
          }
          v316 = v309 > v310;
        }
        v317 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v177, v306));
        a8.f32[2] = (float)v27;
        v318.i64[0] = 0x3F0000003F000000;
        v318.i64[1] = 0x3F0000003F000000;
        v319 = vmulq_n_f32(vaddq_f32(a8, v318), v317);
        v604 = v319.i32[2];
        v603 = *(int32x2_t *)v319.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v315, v316, v317);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v320 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v320;
        v29 = **v320;
      }
      v321 = v45 + 2;
      v322 = v25[16];
      if ((v322 & 0x10000000) != 0)
        v323 = 0x40000000;
      else
        v323 = 0x80000000;
      if ((v322 & 0x20000000) != 0)
        v324 = v323;
      else
        v324 = v322 & 0xCFFFFFFF;
      if ((v324 & 0x40000000) == 0)
      {
        if ((v324 & 0x80000000) != 0)
        {
          LOBYTE(v333) = -1;
          v334 = 2;
        }
        else
        {
          v325 = *(_QWORD *)(v29 + 2448);
          v326 = v325 + 520 * v324;
          v327 = *(_QWORD *)(v326 + 312);
          v328 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v326 + 336))
          {
            *(_BYTE *)(v326 + 336) = 0;
            v329 = *(unsigned int *)(v326 + 4);
            if ((_DWORD)v329)
            {
              v535 = v328;
              v562 = v327;
              v589 = v27;
              v330 = 0;
              v331 = (unsigned __int8 *)(v325 + 520 * v324 + 36);
              do
              {
                v332 = *v331;
                v331 += 28;
                v330 = sub_223A4EC9C(v330, ((unint64_t)v332 << 8) | 1, 0xFFu);
                --v329;
              }
              while (v329);
              v333 = v330 >> 8;
              if (!(_BYTE)v330)
                LOBYTE(v333) = -1;
              v27 = v589;
              v328 = v535;
              v327 = v562;
            }
            else
            {
              LOBYTE(v333) = -1;
            }
            *(_BYTE *)(v325 + 520 * v324 + 338) = v333;
          }
          else
          {
            LOBYTE(v333) = *(_BYTE *)(v325 + 520 * v324 + 338);
          }
          v334 = v327 > v328;
        }
        v335 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v321, v44));
        a8.f32[2] = (float)v27;
        v336.i64[0] = 0x3F0000003F000000;
        v336.i64[1] = 0x3F0000003F000000;
        v337 = vmulq_n_f32(vaddq_f32(a8, v336), v335);
        v604 = v337.i32[2];
        v603 = *(int32x2_t *)v337.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v333, v334, v335);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v338 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v338;
        v29 = **v338;
        v321 = v45 + 2;
      }
      v339 = v25[17];
      if ((v339 & 0x10000000) != 0)
        v340 = 0x40000000;
      else
        v340 = 0x80000000;
      if ((v339 & 0x20000000) != 0)
        v341 = v340;
      else
        v341 = v339 & 0xCFFFFFFF;
      if ((v341 & 0x40000000) == 0)
      {
        v342 = v44 + 1;
        if ((v341 & 0x80000000) != 0)
        {
          LOBYTE(v351) = -1;
          v352 = 2;
        }
        else
        {
          v343 = *(_QWORD *)(v29 + 2448);
          v344 = v343 + 520 * v341;
          v345 = *(_QWORD *)(v344 + 312);
          v346 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v344 + 336))
          {
            *(_BYTE *)(v344 + 336) = 0;
            v347 = *(unsigned int *)(v344 + 4);
            if ((_DWORD)v347)
            {
              v536 = v346;
              v563 = v345;
              v590 = v27;
              v348 = 0;
              v349 = (unsigned __int8 *)(v343 + 520 * v341 + 36);
              do
              {
                v350 = *v349;
                v349 += 28;
                v348 = sub_223A4EC9C(v348, ((unint64_t)v350 << 8) | 1, 0xFFu);
                --v347;
              }
              while (v347);
              v351 = v348 >> 8;
              if (!(_BYTE)v348)
                LOBYTE(v351) = -1;
              v27 = v590;
              v346 = v536;
              v345 = v563;
            }
            else
            {
              LOBYTE(v351) = -1;
            }
            *(_BYTE *)(v343 + 520 * v341 + 338) = v351;
          }
          else
          {
            LOBYTE(v351) = *(_BYTE *)(v343 + 520 * v341 + 338);
          }
          v352 = v345 > v346;
        }
        v353 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v321, v342));
        a8.f32[2] = (float)v27;
        v354.i64[0] = 0x3F0000003F000000;
        v354.i64[1] = 0x3F0000003F000000;
        v355 = vmulq_n_f32(vaddq_f32(a8, v354), v353);
        v604 = v355.i32[2];
        v603 = *(int32x2_t *)v355.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v351, v352, v353);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v356 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v356;
        v29 = **v356;
        v321 = v45 + 2;
      }
      v357 = v25[18];
      if ((v357 & 0x10000000) != 0)
        v358 = 0x40000000;
      else
        v358 = 0x80000000;
      if ((v357 & 0x20000000) != 0)
        v359 = v358;
      else
        v359 = v357 & 0xCFFFFFFF;
      if ((v359 & 0x40000000) == 0)
      {
        v360 = v44 + 2;
        if ((v359 & 0x80000000) != 0)
        {
          LOBYTE(v369) = -1;
          v370 = 2;
        }
        else
        {
          v361 = *(_QWORD *)(v29 + 2448);
          v362 = v361 + 520 * v359;
          v363 = *(_QWORD *)(v362 + 312);
          v364 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v362 + 336))
          {
            *(_BYTE *)(v362 + 336) = 0;
            v365 = *(unsigned int *)(v362 + 4);
            if ((_DWORD)v365)
            {
              v537 = v364;
              v564 = v363;
              v591 = v27;
              v366 = 0;
              v367 = (unsigned __int8 *)(v361 + 520 * v359 + 36);
              do
              {
                v368 = *v367;
                v367 += 28;
                v366 = sub_223A4EC9C(v366, ((unint64_t)v368 << 8) | 1, 0xFFu);
                --v365;
              }
              while (v365);
              v369 = v366 >> 8;
              if (!(_BYTE)v366)
                LOBYTE(v369) = -1;
              v27 = v591;
              v364 = v537;
              v363 = v564;
            }
            else
            {
              LOBYTE(v369) = -1;
            }
            *(_BYTE *)(v361 + 520 * v359 + 338) = v369;
          }
          else
          {
            LOBYTE(v369) = *(_BYTE *)(v361 + 520 * v359 + 338);
          }
          v370 = v363 > v364;
        }
        v371 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v321, v360));
        a8.f32[2] = (float)v27;
        v372.i64[0] = 0x3F0000003F000000;
        v372.i64[1] = 0x3F0000003F000000;
        v373 = vmulq_n_f32(vaddq_f32(a8, v372), v371);
        v604 = v373.i32[2];
        v603 = *(int32x2_t *)v373.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v369, v370, v371);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v374 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v374;
        v29 = **v374;
        v321 = v45 + 2;
      }
      v375 = v25[19];
      if ((v375 & 0x10000000) != 0)
        v376 = 0x40000000;
      else
        v376 = 0x80000000;
      if ((v375 & 0x20000000) != 0)
        v377 = v376;
      else
        v377 = v375 & 0xCFFFFFFF;
      if ((v377 & 0x40000000) == 0)
      {
        v378 = v44 + 3;
        if ((v377 & 0x80000000) != 0)
        {
          LOBYTE(v387) = -1;
          v388 = 2;
        }
        else
        {
          v379 = *(_QWORD *)(v29 + 2448);
          v380 = v379 + 520 * v377;
          v381 = *(_QWORD *)(v380 + 312);
          v382 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v380 + 336))
          {
            *(_BYTE *)(v380 + 336) = 0;
            v383 = *(unsigned int *)(v380 + 4);
            if ((_DWORD)v383)
            {
              v538 = v382;
              v565 = v381;
              v592 = v27;
              v384 = 0;
              v385 = (unsigned __int8 *)(v379 + 520 * v377 + 36);
              do
              {
                v386 = *v385;
                v385 += 28;
                v384 = sub_223A4EC9C(v384, ((unint64_t)v386 << 8) | 1, 0xFFu);
                --v383;
              }
              while (v383);
              v387 = v384 >> 8;
              if (!(_BYTE)v384)
                LOBYTE(v387) = -1;
              v27 = v592;
              v382 = v538;
              v381 = v565;
            }
            else
            {
              LOBYTE(v387) = -1;
            }
            *(_BYTE *)(v379 + 520 * v377 + 338) = v387;
          }
          else
          {
            LOBYTE(v387) = *(_BYTE *)(v379 + 520 * v377 + 338);
          }
          v388 = v381 > v382;
        }
        v389 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v321, v378));
        a8.f32[2] = (float)v27;
        v390.i64[0] = 0x3F0000003F000000;
        v390.i64[1] = 0x3F0000003F000000;
        v391 = vmulq_n_f32(vaddq_f32(a8, v390), v389);
        v604 = v391.i32[2];
        v603 = *(int32x2_t *)v391.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v387, v388, v389);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v392 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v392;
        v29 = **v392;
        v321 = v45 + 2;
      }
      v393 = v25[20];
      if ((v393 & 0x10000000) != 0)
        v394 = 0x40000000;
      else
        v394 = 0x80000000;
      if ((v393 & 0x20000000) != 0)
        v395 = v394;
      else
        v395 = v393 & 0xCFFFFFFF;
      if ((v395 & 0x40000000) == 0)
      {
        v396 = v44 + 4;
        if ((v395 & 0x80000000) != 0)
        {
          LOBYTE(v405) = -1;
          v406 = 2;
        }
        else
        {
          v397 = *(_QWORD *)(v29 + 2448);
          v398 = v397 + 520 * v395;
          v399 = *(_QWORD *)(v398 + 312);
          v400 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v398 + 336))
          {
            *(_BYTE *)(v398 + 336) = 0;
            v401 = *(unsigned int *)(v398 + 4);
            if ((_DWORD)v401)
            {
              v539 = v400;
              v566 = v399;
              v593 = v27;
              v402 = 0;
              v403 = (unsigned __int8 *)(v397 + 520 * v395 + 36);
              do
              {
                v404 = *v403;
                v403 += 28;
                v402 = sub_223A4EC9C(v402, ((unint64_t)v404 << 8) | 1, 0xFFu);
                --v401;
              }
              while (v401);
              v405 = v402 >> 8;
              if (!(_BYTE)v402)
                LOBYTE(v405) = -1;
              v27 = v593;
              v400 = v539;
              v399 = v566;
            }
            else
            {
              LOBYTE(v405) = -1;
            }
            *(_BYTE *)(v397 + 520 * v395 + 338) = v405;
          }
          else
          {
            LOBYTE(v405) = *(_BYTE *)(v397 + 520 * v395 + 338);
          }
          v406 = v399 > v400;
        }
        v407 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v321, v396));
        a8.f32[2] = (float)v27;
        v408.i64[0] = 0x3F0000003F000000;
        v408.i64[1] = 0x3F0000003F000000;
        v409 = vmulq_n_f32(vaddq_f32(a8, v408), v407);
        v604 = v409.i32[2];
        v603 = *(int32x2_t *)v409.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v405, v406, v407);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v410 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v410;
        v29 = **v410;
        v321 = v45 + 2;
      }
      v411 = v25[21];
      if ((v411 & 0x10000000) != 0)
        v412 = 0x40000000;
      else
        v412 = 0x80000000;
      if ((v411 & 0x20000000) != 0)
        v413 = v412;
      else
        v413 = v411 & 0xCFFFFFFF;
      if ((v413 & 0x40000000) == 0)
      {
        v414 = v44 + 5;
        if ((v413 & 0x80000000) != 0)
        {
          LOBYTE(v423) = -1;
          v424 = 2;
        }
        else
        {
          v415 = *(_QWORD *)(v29 + 2448);
          v416 = v415 + 520 * v413;
          v417 = *(_QWORD *)(v416 + 312);
          v418 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v416 + 336))
          {
            *(_BYTE *)(v416 + 336) = 0;
            v419 = *(unsigned int *)(v416 + 4);
            if ((_DWORD)v419)
            {
              v540 = v418;
              v567 = v417;
              v594 = v27;
              v420 = 0;
              v421 = (unsigned __int8 *)(v415 + 520 * v413 + 36);
              do
              {
                v422 = *v421;
                v421 += 28;
                v420 = sub_223A4EC9C(v420, ((unint64_t)v422 << 8) | 1, 0xFFu);
                --v419;
              }
              while (v419);
              v423 = v420 >> 8;
              if (!(_BYTE)v420)
                LOBYTE(v423) = -1;
              v27 = v594;
              v418 = v540;
              v417 = v567;
            }
            else
            {
              LOBYTE(v423) = -1;
            }
            *(_BYTE *)(v415 + 520 * v413 + 338) = v423;
          }
          else
          {
            LOBYTE(v423) = *(_BYTE *)(v415 + 520 * v413 + 338);
          }
          v424 = v417 > v418;
        }
        v425 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v321, v414));
        a8.f32[2] = (float)v27;
        v426.i64[0] = 0x3F0000003F000000;
        v426.i64[1] = 0x3F0000003F000000;
        v427 = vmulq_n_f32(vaddq_f32(a8, v426), v425);
        v604 = v427.i32[2];
        v603 = *(int32x2_t *)v427.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v423, v424, v425);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v428 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v428;
        v29 = **v428;
        v321 = v45 + 2;
      }
      v429 = v25[22];
      if ((v429 & 0x10000000) != 0)
        v430 = 0x40000000;
      else
        v430 = 0x80000000;
      if ((v429 & 0x20000000) != 0)
        v431 = v430;
      else
        v431 = v429 & 0xCFFFFFFF;
      if ((v431 & 0x40000000) == 0)
      {
        v432 = v44 + 6;
        if ((v431 & 0x80000000) != 0)
        {
          LOBYTE(v441) = -1;
          v442 = 2;
        }
        else
        {
          v433 = *(_QWORD *)(v29 + 2448);
          v434 = v433 + 520 * v431;
          v435 = *(_QWORD *)(v434 + 312);
          v436 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v434 + 336))
          {
            *(_BYTE *)(v434 + 336) = 0;
            v437 = *(unsigned int *)(v434 + 4);
            if ((_DWORD)v437)
            {
              v541 = v436;
              v568 = v435;
              v595 = v27;
              v438 = 0;
              v439 = (unsigned __int8 *)(v433 + 520 * v431 + 36);
              do
              {
                v440 = *v439;
                v439 += 28;
                v438 = sub_223A4EC9C(v438, ((unint64_t)v440 << 8) | 1, 0xFFu);
                --v437;
              }
              while (v437);
              v441 = v438 >> 8;
              if (!(_BYTE)v438)
                LOBYTE(v441) = -1;
              v27 = v595;
              v436 = v541;
              v435 = v568;
            }
            else
            {
              LOBYTE(v441) = -1;
            }
            *(_BYTE *)(v433 + 520 * v431 + 338) = v441;
          }
          else
          {
            LOBYTE(v441) = *(_BYTE *)(v433 + 520 * v431 + 338);
          }
          v442 = v435 > v436;
        }
        v443 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v321, v432));
        a8.f32[2] = (float)v27;
        v444.i64[0] = 0x3F0000003F000000;
        v444.i64[1] = 0x3F0000003F000000;
        v445 = vmulq_n_f32(vaddq_f32(a8, v444), v443);
        v604 = v445.i32[2];
        v603 = *(int32x2_t *)v445.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v441, v442, v443);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v446 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v446;
        v29 = **v446;
        v321 = v45 + 2;
      }
      v447 = v25[23];
      if ((v447 & 0x10000000) != 0)
        v448 = 0x40000000;
      else
        v448 = 0x80000000;
      if ((v447 & 0x20000000) != 0)
        v449 = v448;
      else
        v449 = v447 & 0xCFFFFFFF;
      if ((v449 & 0x40000000) == 0)
      {
        v450 = v44 + 7;
        if ((v449 & 0x80000000) != 0)
        {
          LOBYTE(v459) = -1;
          v460 = 2;
        }
        else
        {
          v451 = *(_QWORD *)(v29 + 2448);
          v452 = v451 + 520 * v449;
          v453 = *(_QWORD *)(v452 + 312);
          v454 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v452 + 336))
          {
            *(_BYTE *)(v452 + 336) = 0;
            v455 = *(unsigned int *)(v452 + 4);
            if ((_DWORD)v455)
            {
              v542 = v454;
              v569 = v453;
              v596 = v27;
              v456 = 0;
              v457 = (unsigned __int8 *)(v451 + 520 * v449 + 36);
              do
              {
                v458 = *v457;
                v457 += 28;
                v456 = sub_223A4EC9C(v456, ((unint64_t)v458 << 8) | 1, 0xFFu);
                --v455;
              }
              while (v455);
              v459 = v456 >> 8;
              if (!(_BYTE)v456)
                LOBYTE(v459) = -1;
              v27 = v596;
              v454 = v542;
              v453 = v569;
            }
            else
            {
              LOBYTE(v459) = -1;
            }
            *(_BYTE *)(v451 + 520 * v449 + 338) = v459;
          }
          else
          {
            LOBYTE(v459) = *(_BYTE *)(v451 + 520 * v449 + 338);
          }
          v460 = v453 > v454;
        }
        v461 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v321, v450));
        a8.f32[2] = (float)v27;
        v462.i64[0] = 0x3F0000003F000000;
        v462.i64[1] = 0x3F0000003F000000;
        v463 = vmulq_n_f32(vaddq_f32(a8, v462), v461);
        v604 = v463.i32[2];
        v603 = *(int32x2_t *)v463.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v459, v460, v461);
        v44 = a5->i32[0];
        v45 = a5->i32[1];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v464 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v464;
        v29 = **v464;
      }
      v465 = v45 + 3;
      v466 = v25[24];
      if ((v466 & 0x10000000) != 0)
        v467 = 0x40000000;
      else
        v467 = 0x80000000;
      if ((v466 & 0x20000000) != 0)
        v468 = v467;
      else
        v468 = v466 & 0xCFFFFFFF;
      if ((v468 & 0x40000000) == 0)
      {
        if ((v468 & 0x80000000) != 0)
        {
          LOBYTE(v477) = -1;
          v478 = 2;
        }
        else
        {
          v469 = *(_QWORD *)(v29 + 2448);
          v470 = v469 + 520 * v468;
          v471 = *(_QWORD *)(v470 + 312);
          v472 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v470 + 336))
          {
            *(_BYTE *)(v470 + 336) = 0;
            v473 = *(unsigned int *)(v470 + 4);
            if ((_DWORD)v473)
            {
              v543 = v472;
              v570 = v471;
              v597 = v27;
              v474 = 0;
              v475 = (unsigned __int8 *)(v469 + 520 * v468 + 36);
              do
              {
                v476 = *v475;
                v475 += 28;
                v474 = sub_223A4EC9C(v474, ((unint64_t)v476 << 8) | 1, 0xFFu);
                --v473;
              }
              while (v473);
              v477 = v474 >> 8;
              if (!(_BYTE)v474)
                LOBYTE(v477) = -1;
              v27 = v597;
              v472 = v543;
              v471 = v570;
            }
            else
            {
              LOBYTE(v477) = -1;
            }
            *(_BYTE *)(v469 + 520 * v468 + 338) = v477;
          }
          else
          {
            LOBYTE(v477) = *(_BYTE *)(v469 + 520 * v468 + 338);
          }
          v478 = v471 > v472;
        }
        v479 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v465, v44));
        a8.f32[2] = (float)v27;
        v480.i64[0] = 0x3F0000003F000000;
        v480.i64[1] = 0x3F0000003F000000;
        v481 = vmulq_n_f32(vaddq_f32(a8, v480), v479);
        v604 = v481.i32[2];
        v603 = *(int32x2_t *)v481.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v477, v478, v479);
        v44 = a5->i32[0];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v482 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v482;
        v29 = **v482;
        v465 = a5->i32[1] + 3;
      }
      v483 = v25[25];
      if ((v483 & 0x10000000) != 0)
        v484 = 0x40000000;
      else
        v484 = 0x80000000;
      if ((v483 & 0x20000000) != 0)
        v485 = v484;
      else
        v485 = v483 & 0xCFFFFFFF;
      if ((v485 & 0x40000000) == 0)
      {
        v486 = v44 + 1;
        if ((v485 & 0x80000000) != 0)
        {
          LOBYTE(v495) = -1;
          v496 = 2;
        }
        else
        {
          v487 = *(_QWORD *)(v29 + 2448);
          v488 = v487 + 520 * v485;
          v489 = *(_QWORD *)(v488 + 312);
          v490 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v488 + 336))
          {
            *(_BYTE *)(v488 + 336) = 0;
            v491 = *(unsigned int *)(v488 + 4);
            if ((_DWORD)v491)
            {
              v544 = v490;
              v571 = v489;
              v598 = v27;
              v492 = 0;
              v493 = (unsigned __int8 *)(v487 + 520 * v485 + 36);
              do
              {
                v494 = *v493;
                v493 += 28;
                v492 = sub_223A4EC9C(v492, ((unint64_t)v494 << 8) | 1, 0xFFu);
                --v491;
              }
              while (v491);
              v495 = v492 >> 8;
              if (!(_BYTE)v492)
                LOBYTE(v495) = -1;
              v27 = v598;
              v490 = v544;
              v489 = v571;
            }
            else
            {
              LOBYTE(v495) = -1;
            }
            *(_BYTE *)(v487 + 520 * v485 + 338) = v495;
          }
          else
          {
            LOBYTE(v495) = *(_BYTE *)(v487 + 520 * v485 + 338);
          }
          v496 = v489 > v490;
        }
        v497 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v465, v486));
        a8.f32[2] = (float)v27;
        v498.i64[0] = 0x3F0000003F000000;
        v498.i64[1] = 0x3F0000003F000000;
        v499 = vmulq_n_f32(vaddq_f32(a8, v498), v497);
        v604 = v499.i32[2];
        v603 = *(int32x2_t *)v499.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v495, v496, v497);
        v44 = a5->i32[0];
        v27 = a5[1].i32[0];
        v25 = *(_DWORD **)&v607[8];
        v500 = *(uint64_t ***)(*(_QWORD *)&v607[16] + 8);
        v28 = *v500;
        v29 = **v500;
        v465 = a5->i32[1] + 3;
      }
      v501 = v25[26];
      if ((v501 & 0x10000000) != 0)
        v502 = 0x40000000;
      else
        v502 = 0x80000000;
      if ((v501 & 0x20000000) != 0)
        v503 = v502;
      else
        v503 = v501 & 0xCFFFFFFF;
      if ((v503 & 0x40000000) == 0)
      {
        v504 = v44 + 2;
        if ((v503 & 0x80000000) != 0)
        {
          LOBYTE(v513) = -1;
          v514 = 2;
        }
        else
        {
          v505 = *(_QWORD *)(v29 + 2448);
          v506 = v505 + 520 * v503;
          v507 = *(_QWORD *)(v506 + 312);
          v508 = *(_QWORD *)v28[1];
          if (*(_BYTE *)(v506 + 336))
          {
            *(_BYTE *)(v506 + 336) = 0;
            v509 = *(unsigned int *)(v506 + 4);
            if ((_DWORD)v509)
            {
              v545 = v508;
              v572 = v507;
              v599 = v27;
              v510 = 0;
              v511 = (unsigned __int8 *)(v505 + 520 * v503 + 36);
              do
              {
                v512 = *v511;
                v511 += 28;
                v510 = sub_223A4EC9C(v510, ((unint64_t)v512 << 8) | 1, 0xFFu);
                --v509;
              }
              while (v509);
              v513 = v510 >> 8;
              if (!(_BYTE)v510)
                LOBYTE(v513) = -1;
              v27 = v599;
              v508 = v545;
              v507 = v572;
            }
            else
            {
              LOBYTE(v513) = -1;
            }
            *(_BYTE *)(v505 + 520 * v503 + 338) = v513;
          }
          else
          {
            LOBYTE(v513) = *(_BYTE *)(v505 + 520 * v503 + 338);
          }
          v514 = v507 > v508;
        }
        v515 = *(float *)(v29 + 144);
        *(float32x2_t *)a8.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v465, v504));
        a8.f32[2] = (float)v27;
        v516.i64[0] = 0x3F0000003F000000;
        v516.i64[1] = 0x3F0000003F000000;
        v517 = vmulq_n_f32(vaddq_f32(a8, v516), v515);
        v604 = v517.i32[2];
        v603 = *(int32x2_t *)v517.f32;
        sub_223FFDF1C(v28[2], (uint64_t *)&v603, v513, v514, v515);
      }
      sub_223D5DEF8((uint64_t)v601, (unsigned int *)a5, a7, a8);
    }
    else
    {
      v603 = *a5;
      v604 = a5[1].i32[0];
      v605 = vadd_s32(*a5, (int32x2_t)0x800000008);
      v606 = v604 + 8;
      v41 = (uint64_t *)v22[2];
      v42 = *v41;
      v43 = v41[1];
      v601[0] = *(_OWORD *)v607;
      v601[1] = *(_OWORD *)&v607[16];
      v602 = v608;
      sub_223D5D344((int *)a5, 3, (int *)&v603, v42, v43, v601, *(double *)v607, *(double *)&v607[16], a9, a10, a11, a12);
    }
    return 3;
  }
  if (v17 == 1)
    return 1;
  else
    return 2;
}

uint64_t sub_223D5CE80(int a1, int32x2_t *a2, char a3, _QWORD *a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, double a9, float32x4_t a10)
{
  uint64_t result;
  _BOOL8 v14;
  uint64_t v15;
  __int32 v16;
  __int32 v17;
  unsigned int v18;
  __int32 v19;
  __int32 v20;
  unsigned int v21;
  __int32 v22;
  unsigned int v23;
  unsigned __int32 v24;
  __int32 v25;
  unsigned int v26;
  unsigned __int32 v27;
  __int32 v28;
  __int32 v29;
  unsigned int v30;
  __int32 v31;
  __int32 v32;
  unsigned int v33;
  __int32 v34;
  unsigned int v35;
  unsigned __int32 v36;
  __int32 v37;
  unsigned int v38;
  unsigned __int32 v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int32 v42;
  unint64_t v43;
  int v44;
  unsigned __int32 v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  char v54;
  uint64_t v55;
  int v56;
  char v57;
  char v58;
  uint64_t v59;
  int v60;
  char v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  char v66;
  uint64_t v67;
  int v68;
  char v69;
  char v70;
  uint64_t v71;
  int v72;
  char v73;
  char v74;
  uint64_t v75;
  int v76;
  char v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  char v82;
  uint64_t v83;
  int v84;
  char v85;
  char v86;
  uint64_t v87;
  int v88;
  char v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  char v94;
  uint64_t v95;
  int v96;
  char v97;
  char v98;
  int v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  int v104;
  char v105;
  char v106;
  int v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  int v115;
  uint64_t v116;
  char v117;
  char v118;
  uint64_t v119;
  int v120;
  char v121;
  char v122;
  int v123;
  uint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  int v128;
  char v129;
  char v130;
  int v131;
  uint64_t v132;
  char v133;
  char v134;
  uint64_t v135;
  int v136;
  char v137;
  char v138;
  int v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  int v144;
  char v145;
  char v146;
  int v147;
  uint64_t v148;
  char v149;

  LOBYTE(v42) = 1;
  v43 = -1;
  v44 = -1;
  LOBYTE(v45) = 8;
  LOBYTE(v46) = 1;
  v47 = -1;
  v48 = -1;
  v49 = 8;
  v50 = 1;
  v51 = -1;
  v52 = -1;
  v53 = 8;
  v54 = 1;
  v55 = -1;
  v56 = -1;
  v57 = 8;
  v58 = 1;
  v59 = -1;
  v60 = -1;
  v61 = 8;
  v62 = 1;
  v63 = -1;
  v64 = -1;
  v65 = 8;
  v66 = 1;
  v67 = -1;
  v68 = -1;
  v69 = 8;
  v70 = 1;
  v71 = -1;
  v72 = -1;
  v73 = 8;
  v74 = 1;
  v75 = -1;
  v76 = -1;
  v77 = 8;
  v78 = 1;
  v79 = -1;
  v80 = -1;
  v81 = 8;
  v82 = 1;
  v83 = -1;
  v84 = -1;
  v85 = 8;
  v86 = 1;
  v87 = -1;
  v88 = -1;
  v89 = 8;
  v90 = 1;
  v91 = -1;
  v92 = -1;
  v93 = 8;
  v94 = 1;
  v95 = -1;
  v96 = -1;
  v97 = 8;
  v98 = 1;
  v99 = -1;
  v100 = -1;
  v101 = 8;
  v102 = 1;
  v103 = -1;
  v104 = -1;
  v105 = 8;
  v106 = 1;
  v107 = -1;
  v108 = -1;
  v109 = 8;
  v110 = 1;
  v111 = -1;
  v112 = -1;
  v113 = 8;
  v114 = 1;
  v115 = -1;
  v116 = -1;
  v117 = 8;
  v118 = 1;
  v119 = -1;
  v120 = -1;
  v121 = 8;
  v122 = 1;
  v123 = -1;
  v124 = -1;
  v125 = 8;
  v126 = 1;
  v127 = -1;
  v128 = -1;
  v129 = 8;
  v130 = 1;
  v131 = -1;
  v132 = -1;
  v133 = 8;
  v134 = 1;
  v135 = -1;
  v136 = -1;
  v137 = 8;
  v138 = 1;
  v139 = -1;
  v140 = -1;
  v141 = 8;
  v142 = 1;
  v143 = -1;
  v144 = -1;
  v145 = 8;
  v146 = 1;
  v147 = -1;
  v148 = -1;
  v149 = 8;
  result = sub_223D5AB24(a4, a3, a1, 0x80000000, a2, (uint64_t)&v42, NAN, a6, a7, a8, a9, a10);
  if (a1)
  {
    if ((_DWORD)result != 3)
    {
      v14 = (_DWORD)result == 2;
      v15 = (a1 - 1);
      v16 = a2->i32[1];
      v17 = a2[1].i32[0];
      v18 = (a2[1].i32[1] - a2->i32[0]) >> 1;
      v42 = a2->i32[0];
      v43 = __PAIR64__(v17, v16);
      v44 = v18 + v42;
      v45 = v16 + v18;
      v46 = v17 + v18;
      v40 = *(_OWORD *)a4;
      v41 = a4[2];
      sub_223D5CE80(v15, &v42, v14, &v40);
      v19 = a2->i32[1];
      v20 = a2[1].i32[0];
      v21 = (a2[1].i32[1] - a2->i32[0]) >> 1;
      v42 = a2->i32[0];
      LODWORD(v43) = v19;
      HIDWORD(v43) = v20 + v21;
      v44 = v21 + v42;
      v45 = v19 + v21;
      v46 = v20 + v21 + v21;
      v40 = *(_OWORD *)a4;
      v41 = a4[2];
      sub_223D5CE80(v15, &v42, v14, &v40);
      v22 = a2[1].i32[0];
      v23 = (a2[1].i32[1] - a2->i32[0]) >> 1;
      v24 = v23 + a2->i32[1];
      v42 = a2->i32[0];
      v43 = __PAIR64__(v22, v24);
      v44 = v23 + v42;
      v45 = v24 + v23;
      v46 = v22 + v23;
      v40 = *(_OWORD *)a4;
      v41 = a4[2];
      sub_223D5CE80(v15, &v42, v14, &v40);
      v25 = a2[1].i32[0];
      v26 = (a2[1].i32[1] - a2->i32[0]) >> 1;
      v27 = v26 + a2->i32[1];
      v42 = a2->i32[0];
      LODWORD(v43) = v27;
      HIDWORD(v43) = v25 + v26;
      v44 = v26 + v42;
      v45 = v27 + v26;
      v46 = v25 + v26 + v26;
      v40 = *(_OWORD *)a4;
      v41 = a4[2];
      sub_223D5CE80(v15, &v42, v14, &v40);
      v28 = a2->i32[1];
      v29 = a2[1].i32[0];
      v30 = (a2[1].i32[1] - a2->i32[0]) >> 1;
      v42 = v30 + a2->i32[0];
      v43 = __PAIR64__(v29, v28);
      v44 = v42 + v30;
      v45 = v28 + v30;
      v46 = v29 + v30;
      v40 = *(_OWORD *)a4;
      v41 = a4[2];
      sub_223D5CE80(v15, &v42, v14, &v40);
      v31 = a2->i32[1];
      v32 = a2[1].i32[0];
      v33 = (a2[1].i32[1] - a2->i32[0]) >> 1;
      v42 = v33 + a2->i32[0];
      LODWORD(v43) = v31;
      HIDWORD(v43) = v32 + v33;
      v44 = v42 + v33;
      v45 = v31 + v33;
      v46 = v32 + v33 + v33;
      v40 = *(_OWORD *)a4;
      v41 = a4[2];
      sub_223D5CE80(v15, &v42, v14, &v40);
      v34 = a2[1].i32[0];
      v35 = (a2[1].i32[1] - a2->i32[0]) >> 1;
      v36 = v35 + a2->i32[1];
      v42 = v35 + a2->i32[0];
      v43 = __PAIR64__(v34, v36);
      v44 = v42 + v35;
      v45 = v36 + v35;
      v46 = v34 + v35;
      v40 = *(_OWORD *)a4;
      v41 = a4[2];
      sub_223D5CE80(v15, &v42, v14, &v40);
      v37 = a2[1].i32[0];
      v38 = (a2[1].i32[1] - a2->i32[0]) >> 1;
      v39 = v38 + a2->i32[1];
      v42 = v38 + a2->i32[0];
      LODWORD(v43) = v39;
      HIDWORD(v43) = v37 + v38;
      v44 = v42 + v38;
      v45 = v39 + v38;
      v46 = v37 + v38 + v38;
      v40 = *(_OWORD *)a4;
      v41 = a4[2];
      return sub_223D5CE80(v15, &v42, v14, &v40);
    }
  }
  return result;
}

void sub_223D5D344(int *a1, int a2, int *a3, uint64_t a4, uint64_t a5, __int128 *a6, double a7, double a8, float32x4_t a9, float32x4_t a10, double a11, float32x4_t a12)
{
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  float32x4_t v21;
  float32x4_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  __int32 v26;
  unsigned int v27;
  __int128 v28;
  int v29;
  int v30;
  unsigned int v31;
  __int128 v32;
  __int32 v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;
  int v41;
  __int32 v42;
  unsigned int v43;
  __int128 v44;
  int v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int32 v49;
  unsigned int v50;
  unsigned int v51;
  __int128 v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  __int128 v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  char v72;
  int v73;
  int v74;
  int32x2_t v75;
  int32x2_t v76;
  int32x2_t v77;
  __int32 v78;
  __int32 v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  char *v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  uint64_t v86;
  int v87;
  int32x2_t v88;
  int v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned __int8 *v104;
  unsigned int v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  int v115;
  float32x4_t v116;
  char **v117;
  unint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  float v133;
  float32x4_t v134;
  float32x4_t v135;
  __int32 v136;
  __int32 v137;
  __int32 v138;
  __int32 v139;
  int v140;
  int v141;
  __int32 v142;
  __int128 *v143;
  uint64_t v144;
  float32x4_t v145;
  int v146;
  __int128 v147;
  int *v148;
  int v149;
  int v150;
  int v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  __int32 v156;
  uint64_t v157;
  unsigned int v158;

  LODWORD(a7) = *(_DWORD *)(a4 + 144);
  *(float32x2_t *)a9.f32 = vcvt_f32_s32(*(int32x2_t *)a3);
  a10.f32[0] = (float)a3[2];
  a9.f32[2] = a10.f32[0];
  v18 = vmulq_n_f32(a9, *(float *)&a7);
  *(float *)&a7 = *(float *)&a7 * (float)(int)(a3[3] - *(_QWORD *)a3);
  v156 = v18.i32[2];
  v155 = v18.i64[0];
  v19 = vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0));
  v158 = v19.u32[2];
  v157 = v19.i64[0];
  if (*(_BYTE *)(a5 + 20) == 1)
  {
    v20 = sub_223E998FC((float *)&v155, (float *)a5, *(float *)(a5 + 12), *(float *)(a5 + 16), v18, *(double *)a10.i64, a11, a12);
    if (!v20)
      return;
  }
  else if (*(_BYTE *)(a5 + 20))
  {
    v20 = sub_223E99B90((float *)&v155, (float *)a5, *(float *)(a5 + 12), *(float *)(a5 + 16), v18, a10);
    if (!v20)
      return;
  }
  else
  {
    v20 = sub_223E99668((float *)&v155, (float *)a5, *(float *)(a5 + 12), *(float *)(a5 + 16), v18, a10);
    if (!v20)
      return;
  }
  if (a2)
  {
    if (v20 == 1)
    {
      v24 = (a2 - 1);
      v25 = a3[1];
      v26 = a3[2];
      v27 = (a3[3] - *a3) >> 1;
      LODWORD(v155) = *a3;
      HIDWORD(v155) = v25;
      v156 = v26;
      LODWORD(v157) = v27 + v155;
      HIDWORD(v157) = v25 + v27;
      v158 = v26 + v27;
      v28 = a6[1];
      v152 = *a6;
      v153 = v28;
      v154 = *((_QWORD *)a6 + 4);
      sub_223D5D344(a1, v24, &v155, a4, a5, &v152);
      v29 = a3[1];
      v30 = a3[2];
      v31 = (a3[3] - *a3) >> 1;
      LODWORD(v155) = *a3;
      HIDWORD(v155) = v29;
      v156 = v30 + v31;
      LODWORD(v157) = v31 + v155;
      HIDWORD(v157) = v29 + v31;
      v158 = v30 + v31 + v31;
      v32 = a6[1];
      v152 = *a6;
      v153 = v32;
      v154 = *((_QWORD *)a6 + 4);
      sub_223D5D344(a1, v24, &v155, a4, a5, &v152);
      v33 = a3[2];
      v34 = (a3[3] - *a3) >> 1;
      v35 = v34 + a3[1];
      LODWORD(v155) = *a3;
      HIDWORD(v155) = v35;
      v156 = v33;
      LODWORD(v157) = v34 + v155;
      HIDWORD(v157) = v35 + v34;
      v158 = v33 + v34;
      v36 = a6[1];
      v152 = *a6;
      v153 = v36;
      v154 = *((_QWORD *)a6 + 4);
      sub_223D5D344(a1, v24, &v155, a4, a5, &v152);
      v37 = a3[2];
      v38 = (a3[3] - *a3) >> 1;
      v39 = v38 + a3[1];
      LODWORD(v155) = *a3;
      HIDWORD(v155) = v39;
      v156 = v37 + v38;
      LODWORD(v157) = v38 + v155;
      HIDWORD(v157) = v39 + v38;
      v158 = v37 + v38 + v38;
      v40 = a6[1];
      v152 = *a6;
      v153 = v40;
      v154 = *((_QWORD *)a6 + 4);
      sub_223D5D344(a1, v24, &v155, a4, a5, &v152);
      v41 = a3[1];
      v42 = a3[2];
      v43 = (a3[3] - *a3) >> 1;
      LODWORD(v155) = v43 + *a3;
      HIDWORD(v155) = v41;
      v156 = v42;
      LODWORD(v157) = v155 + v43;
      HIDWORD(v157) = v41 + v43;
      v158 = v42 + v43;
      v44 = a6[1];
      v152 = *a6;
      v153 = v44;
      v154 = *((_QWORD *)a6 + 4);
      sub_223D5D344(a1, v24, &v155, a4, a5, &v152);
      v45 = a3[1];
      v46 = a3[2];
      v47 = (a3[3] - *a3) >> 1;
      LODWORD(v155) = v47 + *a3;
      HIDWORD(v155) = v45;
      v156 = v46 + v47;
      LODWORD(v157) = v155 + v47;
      HIDWORD(v157) = v45 + v47;
      v158 = v46 + v47 + v47;
      v48 = a6[1];
      v152 = *a6;
      v153 = v48;
      v154 = *((_QWORD *)a6 + 4);
      sub_223D5D344(a1, v24, &v155, a4, a5, &v152);
      v49 = a3[2];
      v50 = (a3[3] - *a3) >> 1;
      v51 = v50 + a3[1];
      LODWORD(v155) = v50 + *a3;
      HIDWORD(v155) = v51;
      v156 = v49;
      LODWORD(v157) = v155 + v50;
      HIDWORD(v157) = v51 + v50;
      v158 = v49 + v50;
      v52 = a6[1];
      v152 = *a6;
      v153 = v52;
      v154 = *((_QWORD *)a6 + 4);
      sub_223D5D344(a1, v24, &v155, a4, a5, &v152);
      v53 = a3[2];
      v54 = (a3[3] - *a3) >> 1;
      v55 = v54 + a3[1];
      LODWORD(v155) = v54 + *a3;
      HIDWORD(v155) = v55;
      v156 = v53 + v54;
      LODWORD(v157) = v155 + v54;
      HIDWORD(v157) = v55 + v54;
      v158 = v53 + v54 + v54;
      v56 = a6[1];
      v152 = *a6;
      v153 = v56;
      v154 = *((_QWORD *)a6 + 4);
      sub_223D5D344(a1, v24, &v155, a4, a5, &v152);
    }
    else
    {
      v73 = *a3;
      if (*a1 > *a3)
        v73 = *a1;
      v74 = *a1 + 8;
      if (a3[3] < v74)
        v74 = a3[3];
      v141 = v74 - v73;
      if (v74 > v73)
      {
        v75 = *(int32x2_t *)(a1 + 1);
        v76 = vmax_s32(v75, *(int32x2_t *)(a3 + 1));
        v77 = vmin_s32(*(int32x2_t *)(a3 + 4), vadd_s32(v75, (int32x2_t)0x800000008));
        *(int32x2_t *)&v23 = vcgt_s32(v77, v76);
        if ((v23 & 1) != 0 && (BYTE4(v23) & 1) != 0)
        {
          v78 = v76.i32[1];
          v136 = v77.i32[1];
          v137 = v76.i32[0];
          v139 = v77.i32[0];
          v140 = v73 & 7;
          v143 = a6;
          v148 = a1;
          do
          {
            v138 = v78;
            v149 = v78 & 7;
            v79 = v137;
            do
            {
              v142 = v79;
              v80 = v79 & 7;
              v81 = v140;
              v82 = (v149 << 6) | (8 * v80) | v140;
              v150 = v80;
              v151 = v141 + v82;
              do
              {
                if (v81 >= 8)
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 483, (uint64_t)"RelativePositionIsValid(pos)", 28, (uint64_t)"Invalid grid position", 21, (void (*)(void **))sub_22457406C);
                  v84 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v107 = qword_255795648;
                    v108 = qword_255795650;
                    while (v107 != v108)
                    {
                      v110 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v107;
                      v109 = *(_QWORD *)(v107 + 8);
                      v107 += 16;
                      v110(v109, "RelativePositionIsValid(pos)", 28, "Invalid grid position", 21);
                    }
                  }
                  v85 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
LABEL_110:
                    abort();
                  qword_255795660(*(_QWORD *)algn_255795668, "RelativePositionIsValid(pos)", 28, "Invalid grid position", 21);
                }
                v86 = *((_QWORD *)a6 + 1);
                v87 = a1[2];
                v88 = *(int32x2_t *)a1;
                if (v82 >= 0x200)
                {
                  v89 = a1[2];
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 499, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C);
                  v90 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v111 = qword_255795648;
                    v112 = qword_255795650;
                    while (v111 != v112)
                    {
                      v114 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v111;
                      v113 = *(_QWORD *)(v111 + 8);
                      v111 += 16;
                      v114(v113, "index < voxel_block.size()", 26, "Invalid grid index", 18);
                    }
                  }
                  v91 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_110;
                  qword_255795660(*(_QWORD *)algn_255795668, "index < voxel_block.size()", 26, "Invalid grid index", 18);
                  v87 = v89;
                }
                v92 = *(_DWORD *)(v86 + 4 * v82);
                if ((v92 & 0x10000000) != 0)
                  v93 = 0x40000000;
                else
                  v93 = 0x80000000;
                if ((v92 & 0x20000000) != 0)
                  v94 = v93;
                else
                  v94 = v92 & 0xCFFFFFFF;
                if ((v94 & 0x40000000) == 0)
                {
                  v95 = *(uint64_t ***)(*((_QWORD *)a6 + 2) + 8);
                  v96 = *v95;
                  v97 = **v95;
                  if ((v94 & 0x80000000) != 0)
                  {
                    v106 = -1;
                    v115 = 2;
                  }
                  else
                  {
                    v98 = *(_QWORD *)(v97 + 2448);
                    v99 = v98 + 520 * v94;
                    v100 = *(_QWORD *)(v99 + 312);
                    v101 = *(_QWORD *)v96[1];
                    if (*(_BYTE *)(v99 + 336))
                    {
                      *(_BYTE *)(v99 + 336) = 0;
                      v102 = *(unsigned int *)(v99 + 4);
                      if ((_DWORD)v102)
                      {
                        v144 = v100;
                        v146 = v87;
                        v103 = 0;
                        v104 = (unsigned __int8 *)(v98 + 520 * v94 + 36);
                        do
                        {
                          v105 = *v104;
                          v104 += 28;
                          v103 = sub_223A4EC9C(v103, ((unint64_t)v105 << 8) | 1, 0xFFu);
                          --v102;
                        }
                        while (v102);
                        if ((_BYTE)v103)
                          v106 = BYTE1(v103);
                        else
                          v106 = -1;
                        v87 = v146;
                        v100 = v144;
                      }
                      else
                      {
                        v106 = -1;
                      }
                      *(_BYTE *)(v98 + 520 * v94 + 338) = v106;
                    }
                    else
                    {
                      v106 = *(_BYTE *)(v98 + 520 * v94 + 338);
                    }
                    v115 = v100 > v101;
                    a6 = v143;
                  }
                  LODWORD(v23) = *(_DWORD *)(v97 + 144);
                  *(float32x2_t *)v21.f32 = vcvt_f32_s32(vadd_s32(v88, (int32x2_t)__PAIR64__(v150, v81)));
                  v21.f32[2] = (float)(v87 + v149);
                  v116.i64[0] = 0x3F0000003F000000;
                  v116.i64[1] = 0x3F0000003F000000;
                  v21 = vmulq_n_f32(vaddq_f32(v21, v116), *(float *)&v23);
                  v117 = (char **)v96[2];
                  v119 = v117[1];
                  v118 = (unint64_t)v117[2];
                  if ((unint64_t)v119 < v118)
                  {
                    *((_DWORD *)v119 + 2) = v21.i32[2];
                    *(_QWORD *)v119 = v21.i64[0];
                    *((_DWORD *)v119 + 3) = v23;
                    v119[16] = v106;
                    v83 = v119 + 24;
                    *((_DWORD *)v119 + 5) = v115;
                  }
                  else
                  {
                    v120 = *v117;
                    v121 = 0xAAAAAAAAAAAAAAABLL * ((v119 - *v117) >> 3);
                    v122 = v121 + 1;
                    if (v121 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_22329A3C4();
                    v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v118 - (_QWORD)v120) >> 3);
                    if (2 * v123 > v122)
                      v122 = 2 * v123;
                    if (v123 >= 0x555555555555555)
                      v124 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v124 = v122;
                    if (v124 > 0xAAAAAAAAAAAAAAALL)
                      sub_223174E94();
                    v125 = 24 * v124;
                    v145 = v21;
                    v147 = v23;
                    v126 = (char *)operator new(24 * v124);
                    v127 = &v126[24 * v121];
                    *(_QWORD *)v127 = v145.i64[0];
                    *((_DWORD *)v127 + 2) = v145.i32[2];
                    v21.i32[3] = HIDWORD(v147);
                    *((_DWORD *)v127 + 3) = v147;
                    v127[16] = v106;
                    *((_DWORD *)v127 + 5) = v115;
                    v128 = v127;
                    if (v119 != v120)
                    {
                      do
                      {
                        v129 = *((_QWORD *)v119 - 3);
                        v119 -= 24;
                        v130 = *((_DWORD *)v119 + 2);
                        *((_QWORD *)v128 - 3) = v129;
                        v128 -= 24;
                        *((_DWORD *)v128 + 2) = v130;
                        v131 = *(_QWORD *)(v119 + 12);
                        *((_DWORD *)v128 + 5) = *((_DWORD *)v119 + 5);
                        *(_QWORD *)(v128 + 12) = v131;
                      }
                      while (v119 != v120);
                      v119 = v120;
                    }
                    v83 = v127 + 24;
                    *v117 = v128;
                    v117[1] = v127 + 24;
                    v117[2] = &v126[v125];
                    if (v119)
                      operator delete(v119);
                  }
                  a1 = v148;
                  v117[1] = v83;
                  ++*((_DWORD *)v117 + 6);
                }
                ++v81;
                ++v82;
              }
              while (v82 != v151);
              v79 = v142 + 1;
            }
            while (v142 + 1 != v139);
            v78 = v138 + 1;
          }
          while (v138 + 1 != v136);
        }
      }
    }
  }
  else
  {
    v22.i64[0] = *(_QWORD *)a3;
    v57 = a3[2];
    v58 = *(_DWORD *)(*((_QWORD *)a6 + 1)
                    + 4
                    * (*(_QWORD *)a3 & 7 | (8 * (HIDWORD(*(_QWORD *)a3) & 7)) & 0xFFFFFE3F | ((v57 & 7) << 6)));
    if ((v58 & 0x10000000) != 0)
      v59 = 0x40000000;
    else
      v59 = 0x80000000;
    if ((v58 & 0x20000000) != 0)
      v60 = v59;
    else
      v60 = v58 & 0xCFFFFFFF;
    if ((v60 & 0x40000000) == 0)
    {
      v61 = *(uint64_t ***)(*((_QWORD *)a6 + 2) + 8);
      v62 = *v61;
      v63 = **v61;
      if ((v60 & 0x80000000) != 0)
      {
        v72 = -1;
        v132 = 2;
      }
      else
      {
        v64 = *(_QWORD *)(v63 + 2448);
        v65 = v64 + 520 * v60;
        v66 = *(_QWORD *)(v65 + 312);
        v67 = *(_QWORD *)v62[1];
        if (*(_BYTE *)(v65 + 336))
        {
          *(_BYTE *)(v65 + 336) = 0;
          v68 = *(unsigned int *)(v65 + 4);
          if ((_DWORD)v68)
          {
            v69 = 0;
            v70 = (unsigned __int8 *)(v64 + 520 * v60 + 36);
            do
            {
              v71 = *v70;
              v70 += 28;
              v69 = sub_223A4EC9C(v69, ((unint64_t)v71 << 8) | 1, 0xFFu);
              --v68;
            }
            while (v68);
            if ((_BYTE)v69)
              v72 = BYTE1(v69);
            else
              v72 = -1;
          }
          else
          {
            v72 = -1;
          }
          *(_BYTE *)(v64 + 520 * v60 + 338) = v72;
          v22.i64[0] = *(_QWORD *)a3;
          v57 = a3[2];
        }
        else
        {
          v72 = *(_BYTE *)(v64 + 520 * v60 + 338);
        }
        v132 = v66 > v67;
      }
      v133 = *(float *)(v63 + 144);
      *(float32x2_t *)v22.f32 = vcvt_f32_s32(*(int32x2_t *)v22.f32);
      v22.f32[2] = (float)v57;
      v134.i64[0] = 0x3F0000003F000000;
      v134.i64[1] = 0x3F0000003F000000;
      v135 = vmulq_n_f32(vaddq_f32(v22, v134), v133);
      v156 = v135.i32[2];
      v155 = v135.i64[0];
      sub_223FFDF1C(v62[2], &v155, v72, v132, v133);
    }
  }
}

void sub_223D5DEF8(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t **v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  float v45;
  float32x4_t v46;
  float32x4_t v47;
  uint64_t **v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t **v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  float v81;
  float32x4_t v82;
  float32x4_t v83;
  uint64_t **v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unint64_t v97;
  int v98;
  float v99;
  float32x4_t v100;
  float32x4_t v101;
  uint64_t **v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned __int8 *v113;
  unsigned int v114;
  unint64_t v115;
  int v116;
  float v117;
  float32x4_t v118;
  float32x4_t v119;
  uint64_t **v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unsigned __int8 *v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  float v135;
  float32x4_t v136;
  float32x4_t v137;
  uint64_t **v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unsigned __int8 *v149;
  unsigned int v150;
  unint64_t v151;
  int v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  uint64_t **v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unsigned __int8 *v167;
  unsigned int v168;
  unint64_t v169;
  int v170;
  float v171;
  float32x4_t v172;
  float32x4_t v173;
  uint64_t **v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unsigned __int8 *v185;
  unsigned int v186;
  unint64_t v187;
  int v188;
  float v189;
  float32x4_t v190;
  float32x4_t v191;
  uint64_t **v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unsigned __int8 *v203;
  unsigned int v204;
  unint64_t v205;
  int v206;
  float v207;
  float32x4_t v208;
  float32x4_t v209;
  uint64_t **v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unsigned __int8 *v221;
  unsigned int v222;
  unint64_t v223;
  int v224;
  float v225;
  float32x4_t v226;
  float32x4_t v227;
  uint64_t **v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unsigned __int8 *v239;
  unsigned int v240;
  unint64_t v241;
  int v242;
  float v243;
  float32x4_t v244;
  float32x4_t v245;
  uint64_t **v246;
  int v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unsigned __int8 *v257;
  unsigned int v258;
  unint64_t v259;
  int v260;
  float v261;
  float32x4_t v262;
  float32x4_t v263;
  uint64_t **v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unsigned __int8 *v275;
  unsigned int v276;
  unint64_t v277;
  int v278;
  float v279;
  float32x4_t v280;
  float32x4_t v281;
  uint64_t **v282;
  int v283;
  unsigned int v284;
  unsigned int v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unsigned __int8 *v293;
  unsigned int v294;
  unint64_t v295;
  int v296;
  float v297;
  float32x4_t v298;
  float32x4_t v299;
  uint64_t **v300;
  int v301;
  unsigned int v302;
  unsigned int v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unsigned __int8 *v311;
  unsigned int v312;
  unint64_t v313;
  int v314;
  float v315;
  float32x4_t v316;
  float32x4_t v317;
  uint64_t **v318;
  int v319;
  unsigned int v320;
  unsigned int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unsigned __int8 *v329;
  unsigned int v330;
  unint64_t v331;
  int v332;
  float v333;
  float32x4_t v334;
  float32x4_t v335;
  uint64_t **v336;
  int v337;
  unsigned int v338;
  unsigned int v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unsigned __int8 *v347;
  unsigned int v348;
  unint64_t v349;
  int v350;
  float v351;
  float32x4_t v352;
  float32x4_t v353;
  uint64_t **v354;
  int v355;
  unsigned int v356;
  unsigned int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unsigned __int8 *v365;
  unsigned int v366;
  unint64_t v367;
  int v368;
  float v369;
  float32x4_t v370;
  float32x4_t v371;
  uint64_t **v372;
  int v373;
  unsigned int v374;
  unsigned int v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unsigned __int8 *v383;
  unsigned int v384;
  unint64_t v385;
  int v386;
  float v387;
  float32x4_t v388;
  float32x4_t v389;
  uint64_t **v390;
  int v391;
  int v392;
  unsigned int v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unsigned __int8 *v401;
  unsigned int v402;
  unint64_t v403;
  int v404;
  float v405;
  float32x4_t v406;
  float32x4_t v407;
  uint64_t **v408;
  int v409;
  unsigned int v410;
  unsigned int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unsigned __int8 *v419;
  unsigned int v420;
  unint64_t v421;
  int v422;
  float v423;
  float32x4_t v424;
  float32x4_t v425;
  uint64_t **v426;
  int v427;
  unsigned int v428;
  unsigned int v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  unsigned __int8 *v437;
  unsigned int v438;
  unint64_t v439;
  int v440;
  float v441;
  float32x4_t v442;
  float32x4_t v443;
  uint64_t **v444;
  int v445;
  unsigned int v446;
  unsigned int v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unsigned __int8 *v455;
  unsigned int v456;
  unint64_t v457;
  int v458;
  float v459;
  float32x4_t v460;
  float32x4_t v461;
  uint64_t **v462;
  int v463;
  unsigned int v464;
  unsigned int v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unsigned __int8 *v473;
  unsigned int v474;
  unint64_t v475;
  int v476;
  float v477;
  float32x4_t v478;
  float32x4_t v479;
  uint64_t **v480;
  int v481;
  unsigned int v482;
  unsigned int v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unsigned __int8 *v491;
  unsigned int v492;
  unint64_t v493;
  int v494;
  float v495;
  float32x4_t v496;
  float32x4_t v497;
  uint64_t **v498;
  int v499;
  unsigned int v500;
  unsigned int v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unsigned __int8 *v509;
  unsigned int v510;
  unint64_t v511;
  int v512;
  float v513;
  float32x4_t v514;
  float32x4_t v515;
  uint64_t **v516;
  int v517;
  unsigned int v518;
  unsigned int v519;
  int v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unsigned __int8 *v527;
  unsigned int v528;
  unint64_t v529;
  int v530;
  float v531;
  float32x4_t v532;
  float32x4_t v533;
  uint64_t **v534;
  int v535;
  int v536;
  unsigned int v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  unsigned __int8 *v545;
  unsigned int v546;
  unint64_t v547;
  int v548;
  float v549;
  float32x4_t v550;
  float32x4_t v551;
  uint64_t **v552;
  int v553;
  unsigned int v554;
  unsigned int v555;
  int v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  unsigned __int8 *v563;
  unsigned int v564;
  unint64_t v565;
  int v566;
  float v567;
  float32x4_t v568;
  float32x4_t v569;
  uint64_t **v570;
  int v571;
  unsigned int v572;
  unsigned int v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unsigned __int8 *v581;
  unsigned int v582;
  unint64_t v583;
  int v584;
  float v585;
  float32x4_t v586;
  float32x4_t v587;
  uint64_t **v588;
  int v589;
  unsigned int v590;
  unsigned int v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  unsigned __int8 *v599;
  unsigned int v600;
  unint64_t v601;
  int v602;
  float v603;
  float32x4_t v604;
  float32x4_t v605;
  uint64_t **v606;
  int v607;
  unsigned int v608;
  unsigned int v609;
  int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  unsigned __int8 *v617;
  unsigned int v618;
  unint64_t v619;
  int v620;
  float v621;
  float32x4_t v622;
  float32x4_t v623;
  uint64_t **v624;
  int v625;
  unsigned int v626;
  unsigned int v627;
  int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  unsigned __int8 *v635;
  unsigned int v636;
  unint64_t v637;
  int v638;
  float v639;
  float32x4_t v640;
  float32x4_t v641;
  uint64_t **v642;
  int v643;
  unsigned int v644;
  unsigned int v645;
  int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unsigned __int8 *v653;
  unsigned int v654;
  unint64_t v655;
  int v656;
  float v657;
  float32x4_t v658;
  float32x4_t v659;
  uint64_t **v660;
  int v661;
  unsigned int v662;
  unsigned int v663;
  int v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unsigned __int8 *v671;
  unsigned int v672;
  unint64_t v673;
  int v674;
  float v675;
  float32x4_t v676;
  float32x4_t v677;
  uint64_t **v678;
  int v679;
  int v680;
  unsigned int v681;
  unsigned int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t v688;
  unsigned __int8 *v689;
  unsigned int v690;
  unint64_t v691;
  int v692;
  float v693;
  float32x4_t v694;
  float32x4_t v695;
  uint64_t **v696;
  int v697;
  unsigned int v698;
  unsigned int v699;
  int v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  unsigned __int8 *v707;
  unsigned int v708;
  unint64_t v709;
  int v710;
  float v711;
  float32x4_t v712;
  float32x4_t v713;
  uint64_t **v714;
  int v715;
  unsigned int v716;
  unsigned int v717;
  int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  unsigned __int8 *v725;
  unsigned int v726;
  unint64_t v727;
  int v728;
  float v729;
  float32x4_t v730;
  float32x4_t v731;
  uint64_t **v732;
  int v733;
  unsigned int v734;
  unsigned int v735;
  int v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  unsigned __int8 *v743;
  unsigned int v744;
  unint64_t v745;
  int v746;
  float v747;
  float32x4_t v748;
  float32x4_t v749;
  uint64_t **v750;
  int v751;
  unsigned int v752;
  unsigned int v753;
  int v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unint64_t v760;
  unsigned __int8 *v761;
  unsigned int v762;
  unint64_t v763;
  int v764;
  float v765;
  float32x4_t v766;
  float32x4_t v767;
  uint64_t **v768;
  int v769;
  unsigned int v770;
  unsigned int v771;
  int v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  unsigned __int8 *v779;
  unsigned int v780;
  unint64_t v781;
  int v782;
  float v783;
  float32x4_t v784;
  float32x4_t v785;
  uint64_t **v786;
  int v787;
  unsigned int v788;
  unsigned int v789;
  int v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  unsigned __int8 *v797;
  unsigned int v798;
  unint64_t v799;
  int v800;
  float v801;
  float32x4_t v802;
  float32x4_t v803;
  uint64_t **v804;
  int v805;
  unsigned int v806;
  unsigned int v807;
  int v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  unsigned __int8 *v815;
  unsigned int v816;
  unint64_t v817;
  int v818;
  float v819;
  float32x4_t v820;
  float32x4_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  int v938;
  int v939;
  int v940;
  int v941;
  int v942;
  int v943;
  int v944;
  int v945;
  int v946;
  int v947;
  int v948;
  int v949;
  int v950;
  int v951;
  int v952;
  int v953;
  int v954;
  int v955;
  int v956;
  int v957;
  uint64_t v958;
  __int32 v959;

  v5 = a1;
  v7 = *a2;
  v6 = a2[1];
  v8 = v6 + 3;
  v9 = a2[2];
  v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v11 = v10[27];
  v12 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v13 = *v12;
  if ((v11 & 0x10000000) != 0)
    v14 = 0x40000000;
  else
    v14 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v15 = v14;
  else
    v15 = v11 & 0xCFFFFFFF;
  if ((v15 & 0x40000000) == 0)
  {
    v16 = v7 + 3;
    if ((v15 & 0x80000000) != 0)
    {
      LOBYTE(v25) = -1;
      v26 = 2;
    }
    else
    {
      v17 = *(_QWORD *)(v13 + 2448);
      v18 = v17 + 520 * v15;
      v19 = *(_QWORD *)(v18 + 312);
      v20 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v18 + 336))
      {
        *(_BYTE *)(v18 + 336) = 0;
        v21 = *(unsigned int *)(v18 + 4);
        if ((_DWORD)v21)
        {
          v822 = v20;
          v867 = v19;
          v913 = v9;
          v22 = 0;
          v23 = (unsigned __int8 *)(v17 + 520 * v15 + 36);
          do
          {
            v24 = *v23;
            v23 += 28;
            v22 = sub_223A4EC9C(v22, ((unint64_t)v24 << 8) | 1, 0xFFu);
            --v21;
          }
          while (v21);
          v25 = v22 >> 8;
          if (!(_BYTE)v22)
            LOBYTE(v25) = -1;
          v19 = v867;
          v5 = a1;
          v9 = v913;
          v20 = v822;
        }
        else
        {
          LOBYTE(v25) = -1;
        }
        *(_BYTE *)(v17 + 520 * v15 + 338) = v25;
      }
      else
      {
        LOBYTE(v25) = *(_BYTE *)(v17 + 520 * v15 + 338);
      }
      v26 = v19 > v20;
    }
    a4.f32[0] = (float)v16;
    a4.f32[1] = (float)v8;
    v27 = *(float *)(v13 + 144);
    a4.f32[2] = (float)v9;
    v28.i64[0] = 0x3F0000003F000000;
    v28.i64[1] = 0x3F0000003F000000;
    v29 = vmulq_n_f32(vaddq_f32(a4, v28), v27);
    v959 = v29.i32[2];
    v958 = v29.i64[0];
    sub_223FFDF1C(v12[2], &v958, v25, v26, v27);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v30 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v30;
    v13 = **v30;
    v8 = v6 + 3;
  }
  v31 = v10[28];
  if ((v31 & 0x10000000) != 0)
    v32 = 0x40000000;
  else
    v32 = 0x80000000;
  if ((v31 & 0x20000000) != 0)
    v33 = v32;
  else
    v33 = v31 & 0xCFFFFFFF;
  if ((v33 & 0x40000000) == 0)
  {
    v34 = v7 + 4;
    if ((v33 & 0x80000000) != 0)
    {
      LOBYTE(v43) = -1;
      v44 = 2;
    }
    else
    {
      v35 = *(_QWORD *)(v13 + 2448);
      v36 = v35 + 520 * v33;
      v37 = *(_QWORD *)(v36 + 312);
      v38 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v36 + 336))
      {
        *(_BYTE *)(v36 + 336) = 0;
        v39 = *(unsigned int *)(v36 + 4);
        if ((_DWORD)v39)
        {
          v823 = v38;
          v868 = v37;
          v914 = v9;
          v40 = 0;
          v41 = (unsigned __int8 *)(v35 + 520 * v33 + 36);
          do
          {
            v42 = *v41;
            v41 += 28;
            v40 = sub_223A4EC9C(v40, ((unint64_t)v42 << 8) | 1, 0xFFu);
            --v39;
          }
          while (v39);
          v43 = v40 >> 8;
          if (!(_BYTE)v40)
            LOBYTE(v43) = -1;
          v37 = v868;
          v5 = a1;
          v9 = v914;
          v38 = v823;
        }
        else
        {
          LOBYTE(v43) = -1;
        }
        *(_BYTE *)(v35 + 520 * v33 + 338) = v43;
      }
      else
      {
        LOBYTE(v43) = *(_BYTE *)(v35 + 520 * v33 + 338);
      }
      v44 = v37 > v38;
    }
    v45 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v34));
    a4.f32[2] = (float)v9;
    v46.i64[0] = 0x3F0000003F000000;
    v46.i64[1] = 0x3F0000003F000000;
    v47 = vmulq_n_f32(vaddq_f32(a4, v46), v45);
    v959 = v47.i32[2];
    v958 = v47.i64[0];
    sub_223FFDF1C(v12[2], &v958, v43, v44, v45);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v48 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v48;
    v13 = **v48;
    v8 = v6 + 3;
  }
  v49 = v10[29];
  if ((v49 & 0x10000000) != 0)
    v50 = 0x40000000;
  else
    v50 = 0x80000000;
  if ((v49 & 0x20000000) != 0)
    v51 = v50;
  else
    v51 = v49 & 0xCFFFFFFF;
  if ((v51 & 0x40000000) == 0)
  {
    v52 = v7 + 5;
    if ((v51 & 0x80000000) != 0)
    {
      LOBYTE(v61) = -1;
      v62 = 2;
    }
    else
    {
      v53 = *(_QWORD *)(v13 + 2448);
      v54 = v53 + 520 * v51;
      v55 = *(_QWORD *)(v54 + 312);
      v56 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v54 + 336))
      {
        *(_BYTE *)(v54 + 336) = 0;
        v57 = *(unsigned int *)(v54 + 4);
        if ((_DWORD)v57)
        {
          v824 = v56;
          v869 = v55;
          v915 = v9;
          v58 = 0;
          v59 = (unsigned __int8 *)(v53 + 520 * v51 + 36);
          do
          {
            v60 = *v59;
            v59 += 28;
            v58 = sub_223A4EC9C(v58, ((unint64_t)v60 << 8) | 1, 0xFFu);
            --v57;
          }
          while (v57);
          v61 = v58 >> 8;
          if (!(_BYTE)v58)
            LOBYTE(v61) = -1;
          v55 = v869;
          v5 = a1;
          v9 = v915;
          v56 = v824;
        }
        else
        {
          LOBYTE(v61) = -1;
        }
        *(_BYTE *)(v53 + 520 * v51 + 338) = v61;
      }
      else
      {
        LOBYTE(v61) = *(_BYTE *)(v53 + 520 * v51 + 338);
      }
      v62 = v55 > v56;
    }
    v63 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v52));
    a4.f32[2] = (float)v9;
    v64.i64[0] = 0x3F0000003F000000;
    v64.i64[1] = 0x3F0000003F000000;
    v65 = vmulq_n_f32(vaddq_f32(a4, v64), v63);
    v959 = v65.i32[2];
    v958 = v65.i64[0];
    sub_223FFDF1C(v12[2], &v958, v61, v62, v63);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v66 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v66;
    v13 = **v66;
    v8 = v6 + 3;
  }
  v67 = v10[30];
  if ((v67 & 0x10000000) != 0)
    v68 = 0x40000000;
  else
    v68 = 0x80000000;
  if ((v67 & 0x20000000) != 0)
    v69 = v68;
  else
    v69 = v67 & 0xCFFFFFFF;
  if ((v69 & 0x40000000) == 0)
  {
    v70 = v7 + 6;
    if ((v69 & 0x80000000) != 0)
    {
      LOBYTE(v79) = -1;
      v80 = 2;
    }
    else
    {
      v71 = *(_QWORD *)(v13 + 2448);
      v72 = v71 + 520 * v69;
      v73 = *(_QWORD *)(v72 + 312);
      v74 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v72 + 336))
      {
        *(_BYTE *)(v72 + 336) = 0;
        v75 = *(unsigned int *)(v72 + 4);
        if ((_DWORD)v75)
        {
          v825 = v74;
          v870 = v73;
          v916 = v9;
          v76 = 0;
          v77 = (unsigned __int8 *)(v71 + 520 * v69 + 36);
          do
          {
            v78 = *v77;
            v77 += 28;
            v76 = sub_223A4EC9C(v76, ((unint64_t)v78 << 8) | 1, 0xFFu);
            --v75;
          }
          while (v75);
          v79 = v76 >> 8;
          if (!(_BYTE)v76)
            LOBYTE(v79) = -1;
          v73 = v870;
          v5 = a1;
          v9 = v916;
          v74 = v825;
        }
        else
        {
          LOBYTE(v79) = -1;
        }
        *(_BYTE *)(v71 + 520 * v69 + 338) = v79;
      }
      else
      {
        LOBYTE(v79) = *(_BYTE *)(v71 + 520 * v69 + 338);
      }
      v80 = v73 > v74;
    }
    v81 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v70));
    a4.f32[2] = (float)v9;
    v82.i64[0] = 0x3F0000003F000000;
    v82.i64[1] = 0x3F0000003F000000;
    v83 = vmulq_n_f32(vaddq_f32(a4, v82), v81);
    v959 = v83.i32[2];
    v958 = v83.i64[0];
    sub_223FFDF1C(v12[2], &v958, v79, v80, v81);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v84 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v84;
    v13 = **v84;
    v8 = v6 + 3;
  }
  v85 = v10[31];
  if ((v85 & 0x10000000) != 0)
    v86 = 0x40000000;
  else
    v86 = 0x80000000;
  if ((v85 & 0x20000000) != 0)
    v87 = v86;
  else
    v87 = v85 & 0xCFFFFFFF;
  if ((v87 & 0x40000000) == 0)
  {
    v88 = v7 + 7;
    if ((v87 & 0x80000000) != 0)
    {
      LOBYTE(v97) = -1;
      v98 = 2;
    }
    else
    {
      v89 = *(_QWORD *)(v13 + 2448);
      v90 = v89 + 520 * v87;
      v91 = *(_QWORD *)(v90 + 312);
      v92 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v90 + 336))
      {
        *(_BYTE *)(v90 + 336) = 0;
        v93 = *(unsigned int *)(v90 + 4);
        if ((_DWORD)v93)
        {
          v826 = v92;
          v871 = v91;
          v917 = v9;
          v94 = 0;
          v95 = (unsigned __int8 *)(v89 + 520 * v87 + 36);
          do
          {
            v96 = *v95;
            v95 += 28;
            v94 = sub_223A4EC9C(v94, ((unint64_t)v96 << 8) | 1, 0xFFu);
            --v93;
          }
          while (v93);
          v97 = v94 >> 8;
          if (!(_BYTE)v94)
            LOBYTE(v97) = -1;
          v91 = v871;
          v5 = a1;
          v9 = v917;
          v92 = v826;
        }
        else
        {
          LOBYTE(v97) = -1;
        }
        *(_BYTE *)(v89 + 520 * v87 + 338) = v97;
      }
      else
      {
        LOBYTE(v97) = *(_BYTE *)(v89 + 520 * v87 + 338);
      }
      v98 = v91 > v92;
    }
    v99 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v88));
    a4.f32[2] = (float)v9;
    v100.i64[0] = 0x3F0000003F000000;
    v100.i64[1] = 0x3F0000003F000000;
    v101 = vmulq_n_f32(vaddq_f32(a4, v100), v99);
    v959 = v101.i32[2];
    v958 = v101.i64[0];
    sub_223FFDF1C(v12[2], &v958, v97, v98, v99);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v102 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v102;
    v13 = **v102;
  }
  v103 = v6 + 4;
  v104 = v10[32];
  if ((v104 & 0x10000000) != 0)
    v105 = 0x40000000;
  else
    v105 = 0x80000000;
  if ((v104 & 0x20000000) != 0)
    v106 = v105;
  else
    v106 = v104 & 0xCFFFFFFF;
  if ((v106 & 0x40000000) == 0)
  {
    if ((v106 & 0x80000000) != 0)
    {
      LOBYTE(v115) = -1;
      v116 = 2;
    }
    else
    {
      v107 = *(_QWORD *)(v13 + 2448);
      v108 = v107 + 520 * v106;
      v109 = *(_QWORD *)(v108 + 312);
      v110 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v108 + 336))
      {
        *(_BYTE *)(v108 + 336) = 0;
        v111 = *(unsigned int *)(v108 + 4);
        if ((_DWORD)v111)
        {
          v827 = v110;
          v872 = v109;
          v918 = v9;
          v112 = 0;
          v113 = (unsigned __int8 *)(v107 + 520 * v106 + 36);
          do
          {
            v114 = *v113;
            v113 += 28;
            v112 = sub_223A4EC9C(v112, ((unint64_t)v114 << 8) | 1, 0xFFu);
            --v111;
          }
          while (v111);
          v115 = v112 >> 8;
          if (!(_BYTE)v112)
            LOBYTE(v115) = -1;
          v109 = v872;
          v5 = a1;
          v9 = v918;
          v110 = v827;
        }
        else
        {
          LOBYTE(v115) = -1;
        }
        *(_BYTE *)(v107 + 520 * v106 + 338) = v115;
      }
      else
      {
        LOBYTE(v115) = *(_BYTE *)(v107 + 520 * v106 + 338);
      }
      v116 = v109 > v110;
    }
    v117 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v103, v7));
    a4.f32[2] = (float)v9;
    v118.i64[0] = 0x3F0000003F000000;
    v118.i64[1] = 0x3F0000003F000000;
    v119 = vmulq_n_f32(vaddq_f32(a4, v118), v117);
    v959 = v119.i32[2];
    v958 = v119.i64[0];
    sub_223FFDF1C(v12[2], &v958, v115, v116, v117);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v120 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v120;
    v13 = **v120;
    v103 = v6 + 4;
  }
  v121 = v10[33];
  if ((v121 & 0x10000000) != 0)
    v122 = 0x40000000;
  else
    v122 = 0x80000000;
  if ((v121 & 0x20000000) != 0)
    v123 = v122;
  else
    v123 = v121 & 0xCFFFFFFF;
  if ((v123 & 0x40000000) == 0)
  {
    v124 = v7 + 1;
    if ((v123 & 0x80000000) != 0)
    {
      LOBYTE(v133) = -1;
      v134 = 2;
    }
    else
    {
      v125 = *(_QWORD *)(v13 + 2448);
      v126 = v125 + 520 * v123;
      v127 = *(_QWORD *)(v126 + 312);
      v128 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v126 + 336))
      {
        *(_BYTE *)(v126 + 336) = 0;
        v129 = *(unsigned int *)(v126 + 4);
        if ((_DWORD)v129)
        {
          v828 = v128;
          v873 = v127;
          v919 = v9;
          v130 = 0;
          v131 = (unsigned __int8 *)(v125 + 520 * v123 + 36);
          do
          {
            v132 = *v131;
            v131 += 28;
            v130 = sub_223A4EC9C(v130, ((unint64_t)v132 << 8) | 1, 0xFFu);
            --v129;
          }
          while (v129);
          v133 = v130 >> 8;
          if (!(_BYTE)v130)
            LOBYTE(v133) = -1;
          v127 = v873;
          v5 = a1;
          v9 = v919;
          v128 = v828;
        }
        else
        {
          LOBYTE(v133) = -1;
        }
        *(_BYTE *)(v125 + 520 * v123 + 338) = v133;
      }
      else
      {
        LOBYTE(v133) = *(_BYTE *)(v125 + 520 * v123 + 338);
      }
      v134 = v127 > v128;
    }
    v135 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v103, v124));
    a4.f32[2] = (float)v9;
    v136.i64[0] = 0x3F0000003F000000;
    v136.i64[1] = 0x3F0000003F000000;
    v137 = vmulq_n_f32(vaddq_f32(a4, v136), v135);
    v959 = v137.i32[2];
    v958 = v137.i64[0];
    sub_223FFDF1C(v12[2], &v958, v133, v134, v135);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v138 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v138;
    v13 = **v138;
    v103 = v6 + 4;
  }
  v139 = v10[34];
  if ((v139 & 0x10000000) != 0)
    v140 = 0x40000000;
  else
    v140 = 0x80000000;
  if ((v139 & 0x20000000) != 0)
    v141 = v140;
  else
    v141 = v139 & 0xCFFFFFFF;
  if ((v141 & 0x40000000) == 0)
  {
    v142 = v7 + 2;
    if ((v141 & 0x80000000) != 0)
    {
      LOBYTE(v151) = -1;
      v152 = 2;
    }
    else
    {
      v143 = *(_QWORD *)(v13 + 2448);
      v144 = v143 + 520 * v141;
      v145 = *(_QWORD *)(v144 + 312);
      v146 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v144 + 336))
      {
        *(_BYTE *)(v144 + 336) = 0;
        v147 = *(unsigned int *)(v144 + 4);
        if ((_DWORD)v147)
        {
          v829 = v146;
          v874 = v145;
          v920 = v9;
          v148 = 0;
          v149 = (unsigned __int8 *)(v143 + 520 * v141 + 36);
          do
          {
            v150 = *v149;
            v149 += 28;
            v148 = sub_223A4EC9C(v148, ((unint64_t)v150 << 8) | 1, 0xFFu);
            --v147;
          }
          while (v147);
          v151 = v148 >> 8;
          if (!(_BYTE)v148)
            LOBYTE(v151) = -1;
          v145 = v874;
          v5 = a1;
          v9 = v920;
          v146 = v829;
        }
        else
        {
          LOBYTE(v151) = -1;
        }
        *(_BYTE *)(v143 + 520 * v141 + 338) = v151;
      }
      else
      {
        LOBYTE(v151) = *(_BYTE *)(v143 + 520 * v141 + 338);
      }
      v152 = v145 > v146;
    }
    v153 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v103, v142));
    a4.f32[2] = (float)v9;
    v154.i64[0] = 0x3F0000003F000000;
    v154.i64[1] = 0x3F0000003F000000;
    v155 = vmulq_n_f32(vaddq_f32(a4, v154), v153);
    v959 = v155.i32[2];
    v958 = v155.i64[0];
    sub_223FFDF1C(v12[2], &v958, v151, v152, v153);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v156 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v156;
    v13 = **v156;
    v103 = v6 + 4;
  }
  v157 = v10[35];
  if ((v157 & 0x10000000) != 0)
    v158 = 0x40000000;
  else
    v158 = 0x80000000;
  if ((v157 & 0x20000000) != 0)
    v159 = v158;
  else
    v159 = v157 & 0xCFFFFFFF;
  if ((v159 & 0x40000000) == 0)
  {
    v160 = v7 + 3;
    if ((v159 & 0x80000000) != 0)
    {
      LOBYTE(v169) = -1;
      v170 = 2;
    }
    else
    {
      v161 = *(_QWORD *)(v13 + 2448);
      v162 = v161 + 520 * v159;
      v163 = *(_QWORD *)(v162 + 312);
      v164 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v162 + 336))
      {
        *(_BYTE *)(v162 + 336) = 0;
        v165 = *(unsigned int *)(v162 + 4);
        if ((_DWORD)v165)
        {
          v830 = v164;
          v875 = v163;
          v921 = v9;
          v166 = 0;
          v167 = (unsigned __int8 *)(v161 + 520 * v159 + 36);
          do
          {
            v168 = *v167;
            v167 += 28;
            v166 = sub_223A4EC9C(v166, ((unint64_t)v168 << 8) | 1, 0xFFu);
            --v165;
          }
          while (v165);
          v169 = v166 >> 8;
          if (!(_BYTE)v166)
            LOBYTE(v169) = -1;
          v163 = v875;
          v5 = a1;
          v9 = v921;
          v164 = v830;
        }
        else
        {
          LOBYTE(v169) = -1;
        }
        *(_BYTE *)(v161 + 520 * v159 + 338) = v169;
      }
      else
      {
        LOBYTE(v169) = *(_BYTE *)(v161 + 520 * v159 + 338);
      }
      v170 = v163 > v164;
    }
    v171 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v103, v160));
    a4.f32[2] = (float)v9;
    v172.i64[0] = 0x3F0000003F000000;
    v172.i64[1] = 0x3F0000003F000000;
    v173 = vmulq_n_f32(vaddq_f32(a4, v172), v171);
    v959 = v173.i32[2];
    v958 = v173.i64[0];
    sub_223FFDF1C(v12[2], &v958, v169, v170, v171);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v174 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v174;
    v13 = **v174;
    v103 = v6 + 4;
  }
  v175 = v10[36];
  if ((v175 & 0x10000000) != 0)
    v176 = 0x40000000;
  else
    v176 = 0x80000000;
  if ((v175 & 0x20000000) != 0)
    v177 = v176;
  else
    v177 = v175 & 0xCFFFFFFF;
  if ((v177 & 0x40000000) == 0)
  {
    v178 = v7 + 4;
    if ((v177 & 0x80000000) != 0)
    {
      LOBYTE(v187) = -1;
      v188 = 2;
    }
    else
    {
      v179 = *(_QWORD *)(v13 + 2448);
      v180 = v179 + 520 * v177;
      v181 = *(_QWORD *)(v180 + 312);
      v182 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v180 + 336))
      {
        *(_BYTE *)(v180 + 336) = 0;
        v183 = *(unsigned int *)(v180 + 4);
        if ((_DWORD)v183)
        {
          v831 = v182;
          v876 = v181;
          v922 = v9;
          v184 = 0;
          v185 = (unsigned __int8 *)(v179 + 520 * v177 + 36);
          do
          {
            v186 = *v185;
            v185 += 28;
            v184 = sub_223A4EC9C(v184, ((unint64_t)v186 << 8) | 1, 0xFFu);
            --v183;
          }
          while (v183);
          v187 = v184 >> 8;
          if (!(_BYTE)v184)
            LOBYTE(v187) = -1;
          v181 = v876;
          v5 = a1;
          v9 = v922;
          v182 = v831;
        }
        else
        {
          LOBYTE(v187) = -1;
        }
        *(_BYTE *)(v179 + 520 * v177 + 338) = v187;
      }
      else
      {
        LOBYTE(v187) = *(_BYTE *)(v179 + 520 * v177 + 338);
      }
      v188 = v181 > v182;
    }
    v189 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v103, v178));
    a4.f32[2] = (float)v9;
    v190.i64[0] = 0x3F0000003F000000;
    v190.i64[1] = 0x3F0000003F000000;
    v191 = vmulq_n_f32(vaddq_f32(a4, v190), v189);
    v959 = v191.i32[2];
    v958 = v191.i64[0];
    sub_223FFDF1C(v12[2], &v958, v187, v188, v189);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v192 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v192;
    v13 = **v192;
    v103 = v6 + 4;
  }
  v193 = v10[37];
  if ((v193 & 0x10000000) != 0)
    v194 = 0x40000000;
  else
    v194 = 0x80000000;
  if ((v193 & 0x20000000) != 0)
    v195 = v194;
  else
    v195 = v193 & 0xCFFFFFFF;
  if ((v195 & 0x40000000) == 0)
  {
    v196 = v7 + 5;
    if ((v195 & 0x80000000) != 0)
    {
      LOBYTE(v205) = -1;
      v206 = 2;
    }
    else
    {
      v197 = *(_QWORD *)(v13 + 2448);
      v198 = v197 + 520 * v195;
      v199 = *(_QWORD *)(v198 + 312);
      v200 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v198 + 336))
      {
        *(_BYTE *)(v198 + 336) = 0;
        v201 = *(unsigned int *)(v198 + 4);
        if ((_DWORD)v201)
        {
          v832 = v200;
          v877 = v199;
          v923 = v9;
          v202 = 0;
          v203 = (unsigned __int8 *)(v197 + 520 * v195 + 36);
          do
          {
            v204 = *v203;
            v203 += 28;
            v202 = sub_223A4EC9C(v202, ((unint64_t)v204 << 8) | 1, 0xFFu);
            --v201;
          }
          while (v201);
          v205 = v202 >> 8;
          if (!(_BYTE)v202)
            LOBYTE(v205) = -1;
          v199 = v877;
          v5 = a1;
          v9 = v923;
          v200 = v832;
        }
        else
        {
          LOBYTE(v205) = -1;
        }
        *(_BYTE *)(v197 + 520 * v195 + 338) = v205;
      }
      else
      {
        LOBYTE(v205) = *(_BYTE *)(v197 + 520 * v195 + 338);
      }
      v206 = v199 > v200;
    }
    v207 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v103, v196));
    a4.f32[2] = (float)v9;
    v208.i64[0] = 0x3F0000003F000000;
    v208.i64[1] = 0x3F0000003F000000;
    v209 = vmulq_n_f32(vaddq_f32(a4, v208), v207);
    v959 = v209.i32[2];
    v958 = v209.i64[0];
    sub_223FFDF1C(v12[2], &v958, v205, v206, v207);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v210 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v210;
    v13 = **v210;
    v103 = v6 + 4;
  }
  v211 = v10[38];
  if ((v211 & 0x10000000) != 0)
    v212 = 0x40000000;
  else
    v212 = 0x80000000;
  if ((v211 & 0x20000000) != 0)
    v213 = v212;
  else
    v213 = v211 & 0xCFFFFFFF;
  if ((v213 & 0x40000000) == 0)
  {
    v214 = v7 + 6;
    if ((v213 & 0x80000000) != 0)
    {
      LOBYTE(v223) = -1;
      v224 = 2;
    }
    else
    {
      v215 = *(_QWORD *)(v13 + 2448);
      v216 = v215 + 520 * v213;
      v217 = *(_QWORD *)(v216 + 312);
      v218 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v216 + 336))
      {
        *(_BYTE *)(v216 + 336) = 0;
        v219 = *(unsigned int *)(v216 + 4);
        if ((_DWORD)v219)
        {
          v833 = v218;
          v878 = v217;
          v924 = v9;
          v220 = 0;
          v221 = (unsigned __int8 *)(v215 + 520 * v213 + 36);
          do
          {
            v222 = *v221;
            v221 += 28;
            v220 = sub_223A4EC9C(v220, ((unint64_t)v222 << 8) | 1, 0xFFu);
            --v219;
          }
          while (v219);
          v223 = v220 >> 8;
          if (!(_BYTE)v220)
            LOBYTE(v223) = -1;
          v217 = v878;
          v5 = a1;
          v9 = v924;
          v218 = v833;
        }
        else
        {
          LOBYTE(v223) = -1;
        }
        *(_BYTE *)(v215 + 520 * v213 + 338) = v223;
      }
      else
      {
        LOBYTE(v223) = *(_BYTE *)(v215 + 520 * v213 + 338);
      }
      v224 = v217 > v218;
    }
    v225 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v103, v214));
    a4.f32[2] = (float)v9;
    v226.i64[0] = 0x3F0000003F000000;
    v226.i64[1] = 0x3F0000003F000000;
    v227 = vmulq_n_f32(vaddq_f32(a4, v226), v225);
    v959 = v227.i32[2];
    v958 = v227.i64[0];
    sub_223FFDF1C(v12[2], &v958, v223, v224, v225);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v228 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v228;
    v13 = **v228;
    v103 = v6 + 4;
  }
  v229 = v10[39];
  if ((v229 & 0x10000000) != 0)
    v230 = 0x40000000;
  else
    v230 = 0x80000000;
  if ((v229 & 0x20000000) != 0)
    v231 = v230;
  else
    v231 = v229 & 0xCFFFFFFF;
  if ((v231 & 0x40000000) == 0)
  {
    v232 = v7 + 7;
    if ((v231 & 0x80000000) != 0)
    {
      LOBYTE(v241) = -1;
      v242 = 2;
    }
    else
    {
      v233 = *(_QWORD *)(v13 + 2448);
      v234 = v233 + 520 * v231;
      v235 = *(_QWORD *)(v234 + 312);
      v236 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v234 + 336))
      {
        *(_BYTE *)(v234 + 336) = 0;
        v237 = *(unsigned int *)(v234 + 4);
        if ((_DWORD)v237)
        {
          v834 = v236;
          v879 = v235;
          v925 = v9;
          v238 = 0;
          v239 = (unsigned __int8 *)(v233 + 520 * v231 + 36);
          do
          {
            v240 = *v239;
            v239 += 28;
            v238 = sub_223A4EC9C(v238, ((unint64_t)v240 << 8) | 1, 0xFFu);
            --v237;
          }
          while (v237);
          v241 = v238 >> 8;
          if (!(_BYTE)v238)
            LOBYTE(v241) = -1;
          v235 = v879;
          v5 = a1;
          v9 = v925;
          v236 = v834;
        }
        else
        {
          LOBYTE(v241) = -1;
        }
        *(_BYTE *)(v233 + 520 * v231 + 338) = v241;
      }
      else
      {
        LOBYTE(v241) = *(_BYTE *)(v233 + 520 * v231 + 338);
      }
      v242 = v235 > v236;
    }
    v243 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v103, v232));
    a4.f32[2] = (float)v9;
    v244.i64[0] = 0x3F0000003F000000;
    v244.i64[1] = 0x3F0000003F000000;
    v245 = vmulq_n_f32(vaddq_f32(a4, v244), v243);
    v959 = v245.i32[2];
    v958 = v245.i64[0];
    sub_223FFDF1C(v12[2], &v958, v241, v242, v243);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v246 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v246;
    v13 = **v246;
  }
  v247 = v6 + 5;
  v248 = v10[40];
  if ((v248 & 0x10000000) != 0)
    v249 = 0x40000000;
  else
    v249 = 0x80000000;
  if ((v248 & 0x20000000) != 0)
    v250 = v249;
  else
    v250 = v248 & 0xCFFFFFFF;
  if ((v250 & 0x40000000) == 0)
  {
    if ((v250 & 0x80000000) != 0)
    {
      LOBYTE(v259) = -1;
      v260 = 2;
    }
    else
    {
      v251 = *(_QWORD *)(v13 + 2448);
      v252 = v251 + 520 * v250;
      v253 = *(_QWORD *)(v252 + 312);
      v254 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v252 + 336))
      {
        *(_BYTE *)(v252 + 336) = 0;
        v255 = *(unsigned int *)(v252 + 4);
        if ((_DWORD)v255)
        {
          v835 = v254;
          v880 = v253;
          v926 = v9;
          v256 = 0;
          v257 = (unsigned __int8 *)(v251 + 520 * v250 + 36);
          do
          {
            v258 = *v257;
            v257 += 28;
            v256 = sub_223A4EC9C(v256, ((unint64_t)v258 << 8) | 1, 0xFFu);
            --v255;
          }
          while (v255);
          v259 = v256 >> 8;
          if (!(_BYTE)v256)
            LOBYTE(v259) = -1;
          v253 = v880;
          v5 = a1;
          v9 = v926;
          v254 = v835;
        }
        else
        {
          LOBYTE(v259) = -1;
        }
        *(_BYTE *)(v251 + 520 * v250 + 338) = v259;
      }
      else
      {
        LOBYTE(v259) = *(_BYTE *)(v251 + 520 * v250 + 338);
      }
      v260 = v253 > v254;
    }
    v261 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v247, v7));
    a4.f32[2] = (float)v9;
    v262.i64[0] = 0x3F0000003F000000;
    v262.i64[1] = 0x3F0000003F000000;
    v263 = vmulq_n_f32(vaddq_f32(a4, v262), v261);
    v959 = v263.i32[2];
    v958 = v263.i64[0];
    sub_223FFDF1C(v12[2], &v958, v259, v260, v261);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v264 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v264;
    v13 = **v264;
    v247 = v6 + 5;
  }
  v265 = v10[41];
  if ((v265 & 0x10000000) != 0)
    v266 = 0x40000000;
  else
    v266 = 0x80000000;
  if ((v265 & 0x20000000) != 0)
    v267 = v266;
  else
    v267 = v265 & 0xCFFFFFFF;
  if ((v267 & 0x40000000) == 0)
  {
    v268 = v7 + 1;
    if ((v267 & 0x80000000) != 0)
    {
      LOBYTE(v277) = -1;
      v278 = 2;
    }
    else
    {
      v269 = *(_QWORD *)(v13 + 2448);
      v270 = v269 + 520 * v267;
      v271 = *(_QWORD *)(v270 + 312);
      v272 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v270 + 336))
      {
        *(_BYTE *)(v270 + 336) = 0;
        v273 = *(unsigned int *)(v270 + 4);
        if ((_DWORD)v273)
        {
          v836 = v272;
          v881 = v271;
          v927 = v9;
          v274 = 0;
          v275 = (unsigned __int8 *)(v269 + 520 * v267 + 36);
          do
          {
            v276 = *v275;
            v275 += 28;
            v274 = sub_223A4EC9C(v274, ((unint64_t)v276 << 8) | 1, 0xFFu);
            --v273;
          }
          while (v273);
          v277 = v274 >> 8;
          if (!(_BYTE)v274)
            LOBYTE(v277) = -1;
          v271 = v881;
          v5 = a1;
          v9 = v927;
          v272 = v836;
        }
        else
        {
          LOBYTE(v277) = -1;
        }
        *(_BYTE *)(v269 + 520 * v267 + 338) = v277;
      }
      else
      {
        LOBYTE(v277) = *(_BYTE *)(v269 + 520 * v267 + 338);
      }
      v278 = v271 > v272;
    }
    v279 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v247, v268));
    a4.f32[2] = (float)v9;
    v280.i64[0] = 0x3F0000003F000000;
    v280.i64[1] = 0x3F0000003F000000;
    v281 = vmulq_n_f32(vaddq_f32(a4, v280), v279);
    v959 = v281.i32[2];
    v958 = v281.i64[0];
    sub_223FFDF1C(v12[2], &v958, v277, v278, v279);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v282 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v282;
    v13 = **v282;
    v247 = v6 + 5;
  }
  v283 = v10[42];
  if ((v283 & 0x10000000) != 0)
    v284 = 0x40000000;
  else
    v284 = 0x80000000;
  if ((v283 & 0x20000000) != 0)
    v285 = v284;
  else
    v285 = v283 & 0xCFFFFFFF;
  if ((v285 & 0x40000000) == 0)
  {
    v286 = v7 + 2;
    if ((v285 & 0x80000000) != 0)
    {
      LOBYTE(v295) = -1;
      v296 = 2;
    }
    else
    {
      v287 = *(_QWORD *)(v13 + 2448);
      v288 = v287 + 520 * v285;
      v289 = *(_QWORD *)(v288 + 312);
      v290 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v288 + 336))
      {
        *(_BYTE *)(v288 + 336) = 0;
        v291 = *(unsigned int *)(v288 + 4);
        if ((_DWORD)v291)
        {
          v837 = v290;
          v882 = v289;
          v928 = v9;
          v292 = 0;
          v293 = (unsigned __int8 *)(v287 + 520 * v285 + 36);
          do
          {
            v294 = *v293;
            v293 += 28;
            v292 = sub_223A4EC9C(v292, ((unint64_t)v294 << 8) | 1, 0xFFu);
            --v291;
          }
          while (v291);
          v295 = v292 >> 8;
          if (!(_BYTE)v292)
            LOBYTE(v295) = -1;
          v289 = v882;
          v5 = a1;
          v9 = v928;
          v290 = v837;
        }
        else
        {
          LOBYTE(v295) = -1;
        }
        *(_BYTE *)(v287 + 520 * v285 + 338) = v295;
      }
      else
      {
        LOBYTE(v295) = *(_BYTE *)(v287 + 520 * v285 + 338);
      }
      v296 = v289 > v290;
    }
    v297 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v247, v286));
    a4.f32[2] = (float)v9;
    v298.i64[0] = 0x3F0000003F000000;
    v298.i64[1] = 0x3F0000003F000000;
    v299 = vmulq_n_f32(vaddq_f32(a4, v298), v297);
    v959 = v299.i32[2];
    v958 = v299.i64[0];
    sub_223FFDF1C(v12[2], &v958, v295, v296, v297);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v300 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v300;
    v13 = **v300;
    v247 = v6 + 5;
  }
  v301 = v10[43];
  if ((v301 & 0x10000000) != 0)
    v302 = 0x40000000;
  else
    v302 = 0x80000000;
  if ((v301 & 0x20000000) != 0)
    v303 = v302;
  else
    v303 = v301 & 0xCFFFFFFF;
  if ((v303 & 0x40000000) == 0)
  {
    v304 = v7 + 3;
    if ((v303 & 0x80000000) != 0)
    {
      LOBYTE(v313) = -1;
      v314 = 2;
    }
    else
    {
      v305 = *(_QWORD *)(v13 + 2448);
      v306 = v305 + 520 * v303;
      v307 = *(_QWORD *)(v306 + 312);
      v308 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v306 + 336))
      {
        *(_BYTE *)(v306 + 336) = 0;
        v309 = *(unsigned int *)(v306 + 4);
        if ((_DWORD)v309)
        {
          v838 = v308;
          v883 = v307;
          v929 = v9;
          v310 = 0;
          v311 = (unsigned __int8 *)(v305 + 520 * v303 + 36);
          do
          {
            v312 = *v311;
            v311 += 28;
            v310 = sub_223A4EC9C(v310, ((unint64_t)v312 << 8) | 1, 0xFFu);
            --v309;
          }
          while (v309);
          v313 = v310 >> 8;
          if (!(_BYTE)v310)
            LOBYTE(v313) = -1;
          v307 = v883;
          v5 = a1;
          v9 = v929;
          v308 = v838;
        }
        else
        {
          LOBYTE(v313) = -1;
        }
        *(_BYTE *)(v305 + 520 * v303 + 338) = v313;
      }
      else
      {
        LOBYTE(v313) = *(_BYTE *)(v305 + 520 * v303 + 338);
      }
      v314 = v307 > v308;
    }
    v315 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v247, v304));
    a4.f32[2] = (float)v9;
    v316.i64[0] = 0x3F0000003F000000;
    v316.i64[1] = 0x3F0000003F000000;
    v317 = vmulq_n_f32(vaddq_f32(a4, v316), v315);
    v959 = v317.i32[2];
    v958 = v317.i64[0];
    sub_223FFDF1C(v12[2], &v958, v313, v314, v315);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v318 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v318;
    v13 = **v318;
    v247 = v6 + 5;
  }
  v319 = v10[44];
  if ((v319 & 0x10000000) != 0)
    v320 = 0x40000000;
  else
    v320 = 0x80000000;
  if ((v319 & 0x20000000) != 0)
    v321 = v320;
  else
    v321 = v319 & 0xCFFFFFFF;
  if ((v321 & 0x40000000) == 0)
  {
    v322 = v7 + 4;
    if ((v321 & 0x80000000) != 0)
    {
      LOBYTE(v331) = -1;
      v332 = 2;
    }
    else
    {
      v323 = *(_QWORD *)(v13 + 2448);
      v324 = v323 + 520 * v321;
      v325 = *(_QWORD *)(v324 + 312);
      v326 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v324 + 336))
      {
        *(_BYTE *)(v324 + 336) = 0;
        v327 = *(unsigned int *)(v324 + 4);
        if ((_DWORD)v327)
        {
          v839 = v326;
          v884 = v325;
          v930 = v9;
          v328 = 0;
          v329 = (unsigned __int8 *)(v323 + 520 * v321 + 36);
          do
          {
            v330 = *v329;
            v329 += 28;
            v328 = sub_223A4EC9C(v328, ((unint64_t)v330 << 8) | 1, 0xFFu);
            --v327;
          }
          while (v327);
          v331 = v328 >> 8;
          if (!(_BYTE)v328)
            LOBYTE(v331) = -1;
          v325 = v884;
          v5 = a1;
          v9 = v930;
          v326 = v839;
        }
        else
        {
          LOBYTE(v331) = -1;
        }
        *(_BYTE *)(v323 + 520 * v321 + 338) = v331;
      }
      else
      {
        LOBYTE(v331) = *(_BYTE *)(v323 + 520 * v321 + 338);
      }
      v332 = v325 > v326;
    }
    v333 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v247, v322));
    a4.f32[2] = (float)v9;
    v334.i64[0] = 0x3F0000003F000000;
    v334.i64[1] = 0x3F0000003F000000;
    v335 = vmulq_n_f32(vaddq_f32(a4, v334), v333);
    v959 = v335.i32[2];
    v958 = v335.i64[0];
    sub_223FFDF1C(v12[2], &v958, v331, v332, v333);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v336 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v336;
    v13 = **v336;
    v247 = v6 + 5;
  }
  v337 = v10[45];
  if ((v337 & 0x10000000) != 0)
    v338 = 0x40000000;
  else
    v338 = 0x80000000;
  if ((v337 & 0x20000000) != 0)
    v339 = v338;
  else
    v339 = v337 & 0xCFFFFFFF;
  if ((v339 & 0x40000000) == 0)
  {
    v340 = v7 + 5;
    if ((v339 & 0x80000000) != 0)
    {
      LOBYTE(v349) = -1;
      v350 = 2;
    }
    else
    {
      v341 = *(_QWORD *)(v13 + 2448);
      v342 = v341 + 520 * v339;
      v343 = *(_QWORD *)(v342 + 312);
      v344 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v342 + 336))
      {
        *(_BYTE *)(v342 + 336) = 0;
        v345 = *(unsigned int *)(v342 + 4);
        if ((_DWORD)v345)
        {
          v840 = v344;
          v885 = v343;
          v931 = v9;
          v346 = 0;
          v347 = (unsigned __int8 *)(v341 + 520 * v339 + 36);
          do
          {
            v348 = *v347;
            v347 += 28;
            v346 = sub_223A4EC9C(v346, ((unint64_t)v348 << 8) | 1, 0xFFu);
            --v345;
          }
          while (v345);
          v349 = v346 >> 8;
          if (!(_BYTE)v346)
            LOBYTE(v349) = -1;
          v343 = v885;
          v5 = a1;
          v9 = v931;
          v344 = v840;
        }
        else
        {
          LOBYTE(v349) = -1;
        }
        *(_BYTE *)(v341 + 520 * v339 + 338) = v349;
      }
      else
      {
        LOBYTE(v349) = *(_BYTE *)(v341 + 520 * v339 + 338);
      }
      v350 = v343 > v344;
    }
    v351 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v247, v340));
    a4.f32[2] = (float)v9;
    v352.i64[0] = 0x3F0000003F000000;
    v352.i64[1] = 0x3F0000003F000000;
    v353 = vmulq_n_f32(vaddq_f32(a4, v352), v351);
    v959 = v353.i32[2];
    v958 = v353.i64[0];
    sub_223FFDF1C(v12[2], &v958, v349, v350, v351);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v354 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v354;
    v13 = **v354;
    v247 = v6 + 5;
  }
  v355 = v10[46];
  if ((v355 & 0x10000000) != 0)
    v356 = 0x40000000;
  else
    v356 = 0x80000000;
  if ((v355 & 0x20000000) != 0)
    v357 = v356;
  else
    v357 = v355 & 0xCFFFFFFF;
  if ((v357 & 0x40000000) == 0)
  {
    v358 = v7 + 6;
    if ((v357 & 0x80000000) != 0)
    {
      LOBYTE(v367) = -1;
      v368 = 2;
    }
    else
    {
      v359 = *(_QWORD *)(v13 + 2448);
      v360 = v359 + 520 * v357;
      v361 = *(_QWORD *)(v360 + 312);
      v362 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v360 + 336))
      {
        *(_BYTE *)(v360 + 336) = 0;
        v363 = *(unsigned int *)(v360 + 4);
        if ((_DWORD)v363)
        {
          v841 = v362;
          v886 = v361;
          v932 = v9;
          v364 = 0;
          v365 = (unsigned __int8 *)(v359 + 520 * v357 + 36);
          do
          {
            v366 = *v365;
            v365 += 28;
            v364 = sub_223A4EC9C(v364, ((unint64_t)v366 << 8) | 1, 0xFFu);
            --v363;
          }
          while (v363);
          v367 = v364 >> 8;
          if (!(_BYTE)v364)
            LOBYTE(v367) = -1;
          v361 = v886;
          v5 = a1;
          v9 = v932;
          v362 = v841;
        }
        else
        {
          LOBYTE(v367) = -1;
        }
        *(_BYTE *)(v359 + 520 * v357 + 338) = v367;
      }
      else
      {
        LOBYTE(v367) = *(_BYTE *)(v359 + 520 * v357 + 338);
      }
      v368 = v361 > v362;
    }
    v369 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v247, v358));
    a4.f32[2] = (float)v9;
    v370.i64[0] = 0x3F0000003F000000;
    v370.i64[1] = 0x3F0000003F000000;
    v371 = vmulq_n_f32(vaddq_f32(a4, v370), v369);
    v959 = v371.i32[2];
    v958 = v371.i64[0];
    sub_223FFDF1C(v12[2], &v958, v367, v368, v369);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v372 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v372;
    v13 = **v372;
    v247 = v6 + 5;
  }
  v373 = v10[47];
  if ((v373 & 0x10000000) != 0)
    v374 = 0x40000000;
  else
    v374 = 0x80000000;
  if ((v373 & 0x20000000) != 0)
    v375 = v374;
  else
    v375 = v373 & 0xCFFFFFFF;
  if ((v375 & 0x40000000) == 0)
  {
    v376 = v7 + 7;
    if ((v375 & 0x80000000) != 0)
    {
      LOBYTE(v385) = -1;
      v386 = 2;
    }
    else
    {
      v377 = *(_QWORD *)(v13 + 2448);
      v378 = v377 + 520 * v375;
      v379 = *(_QWORD *)(v378 + 312);
      v380 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v378 + 336))
      {
        *(_BYTE *)(v378 + 336) = 0;
        v381 = *(unsigned int *)(v378 + 4);
        if ((_DWORD)v381)
        {
          v842 = v380;
          v887 = v379;
          v933 = v9;
          v382 = 0;
          v383 = (unsigned __int8 *)(v377 + 520 * v375 + 36);
          do
          {
            v384 = *v383;
            v383 += 28;
            v382 = sub_223A4EC9C(v382, ((unint64_t)v384 << 8) | 1, 0xFFu);
            --v381;
          }
          while (v381);
          v385 = v382 >> 8;
          if (!(_BYTE)v382)
            LOBYTE(v385) = -1;
          v379 = v887;
          v5 = a1;
          v9 = v933;
          v380 = v842;
        }
        else
        {
          LOBYTE(v385) = -1;
        }
        *(_BYTE *)(v377 + 520 * v375 + 338) = v385;
      }
      else
      {
        LOBYTE(v385) = *(_BYTE *)(v377 + 520 * v375 + 338);
      }
      v386 = v379 > v380;
    }
    v387 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v247, v376));
    a4.f32[2] = (float)v9;
    v388.i64[0] = 0x3F0000003F000000;
    v388.i64[1] = 0x3F0000003F000000;
    v389 = vmulq_n_f32(vaddq_f32(a4, v388), v387);
    v959 = v389.i32[2];
    v958 = v389.i64[0];
    sub_223FFDF1C(v12[2], &v958, v385, v386, v387);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v390 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v390;
    v13 = **v390;
  }
  v391 = v6 + 6;
  v392 = v10[48];
  if ((v392 & 0x10000000) != 0)
    v393 = 0x40000000;
  else
    v393 = 0x80000000;
  if ((v392 & 0x20000000) != 0)
    v394 = v393;
  else
    v394 = v392 & 0xCFFFFFFF;
  if ((v394 & 0x40000000) == 0)
  {
    if ((v394 & 0x80000000) != 0)
    {
      LOBYTE(v403) = -1;
      v404 = 2;
    }
    else
    {
      v395 = *(_QWORD *)(v13 + 2448);
      v396 = v395 + 520 * v394;
      v397 = *(_QWORD *)(v396 + 312);
      v398 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v396 + 336))
      {
        *(_BYTE *)(v396 + 336) = 0;
        v399 = *(unsigned int *)(v396 + 4);
        if ((_DWORD)v399)
        {
          v843 = v398;
          v888 = v397;
          v934 = v9;
          v400 = 0;
          v401 = (unsigned __int8 *)(v395 + 520 * v394 + 36);
          do
          {
            v402 = *v401;
            v401 += 28;
            v400 = sub_223A4EC9C(v400, ((unint64_t)v402 << 8) | 1, 0xFFu);
            --v399;
          }
          while (v399);
          v403 = v400 >> 8;
          if (!(_BYTE)v400)
            LOBYTE(v403) = -1;
          v397 = v888;
          v5 = a1;
          v9 = v934;
          v398 = v843;
        }
        else
        {
          LOBYTE(v403) = -1;
        }
        *(_BYTE *)(v395 + 520 * v394 + 338) = v403;
      }
      else
      {
        LOBYTE(v403) = *(_BYTE *)(v395 + 520 * v394 + 338);
      }
      v404 = v397 > v398;
    }
    v405 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v391, v7));
    a4.f32[2] = (float)v9;
    v406.i64[0] = 0x3F0000003F000000;
    v406.i64[1] = 0x3F0000003F000000;
    v407 = vmulq_n_f32(vaddq_f32(a4, v406), v405);
    v959 = v407.i32[2];
    v958 = v407.i64[0];
    sub_223FFDF1C(v12[2], &v958, v403, v404, v405);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v408 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v408;
    v13 = **v408;
    v391 = v6 + 6;
  }
  v409 = v10[49];
  if ((v409 & 0x10000000) != 0)
    v410 = 0x40000000;
  else
    v410 = 0x80000000;
  if ((v409 & 0x20000000) != 0)
    v411 = v410;
  else
    v411 = v409 & 0xCFFFFFFF;
  if ((v411 & 0x40000000) == 0)
  {
    v412 = v7 + 1;
    if ((v411 & 0x80000000) != 0)
    {
      LOBYTE(v421) = -1;
      v422 = 2;
    }
    else
    {
      v413 = *(_QWORD *)(v13 + 2448);
      v414 = v413 + 520 * v411;
      v415 = *(_QWORD *)(v414 + 312);
      v416 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v414 + 336))
      {
        *(_BYTE *)(v414 + 336) = 0;
        v417 = *(unsigned int *)(v414 + 4);
        if ((_DWORD)v417)
        {
          v844 = v416;
          v889 = v415;
          v935 = v9;
          v418 = 0;
          v419 = (unsigned __int8 *)(v413 + 520 * v411 + 36);
          do
          {
            v420 = *v419;
            v419 += 28;
            v418 = sub_223A4EC9C(v418, ((unint64_t)v420 << 8) | 1, 0xFFu);
            --v417;
          }
          while (v417);
          v421 = v418 >> 8;
          if (!(_BYTE)v418)
            LOBYTE(v421) = -1;
          v415 = v889;
          v5 = a1;
          v9 = v935;
          v416 = v844;
        }
        else
        {
          LOBYTE(v421) = -1;
        }
        *(_BYTE *)(v413 + 520 * v411 + 338) = v421;
      }
      else
      {
        LOBYTE(v421) = *(_BYTE *)(v413 + 520 * v411 + 338);
      }
      v422 = v415 > v416;
    }
    v423 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v391, v412));
    a4.f32[2] = (float)v9;
    v424.i64[0] = 0x3F0000003F000000;
    v424.i64[1] = 0x3F0000003F000000;
    v425 = vmulq_n_f32(vaddq_f32(a4, v424), v423);
    v959 = v425.i32[2];
    v958 = v425.i64[0];
    sub_223FFDF1C(v12[2], &v958, v421, v422, v423);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v426 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v426;
    v13 = **v426;
    v391 = v6 + 6;
  }
  v427 = v10[50];
  if ((v427 & 0x10000000) != 0)
    v428 = 0x40000000;
  else
    v428 = 0x80000000;
  if ((v427 & 0x20000000) != 0)
    v429 = v428;
  else
    v429 = v427 & 0xCFFFFFFF;
  if ((v429 & 0x40000000) == 0)
  {
    v430 = v7 + 2;
    if ((v429 & 0x80000000) != 0)
    {
      LOBYTE(v439) = -1;
      v440 = 2;
    }
    else
    {
      v431 = *(_QWORD *)(v13 + 2448);
      v432 = v431 + 520 * v429;
      v433 = *(_QWORD *)(v432 + 312);
      v434 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v432 + 336))
      {
        *(_BYTE *)(v432 + 336) = 0;
        v435 = *(unsigned int *)(v432 + 4);
        if ((_DWORD)v435)
        {
          v845 = v434;
          v890 = v433;
          v936 = v9;
          v436 = 0;
          v437 = (unsigned __int8 *)(v431 + 520 * v429 + 36);
          do
          {
            v438 = *v437;
            v437 += 28;
            v436 = sub_223A4EC9C(v436, ((unint64_t)v438 << 8) | 1, 0xFFu);
            --v435;
          }
          while (v435);
          v439 = v436 >> 8;
          if (!(_BYTE)v436)
            LOBYTE(v439) = -1;
          v433 = v890;
          v5 = a1;
          v9 = v936;
          v434 = v845;
        }
        else
        {
          LOBYTE(v439) = -1;
        }
        *(_BYTE *)(v431 + 520 * v429 + 338) = v439;
      }
      else
      {
        LOBYTE(v439) = *(_BYTE *)(v431 + 520 * v429 + 338);
      }
      v440 = v433 > v434;
    }
    v441 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v391, v430));
    a4.f32[2] = (float)v9;
    v442.i64[0] = 0x3F0000003F000000;
    v442.i64[1] = 0x3F0000003F000000;
    v443 = vmulq_n_f32(vaddq_f32(a4, v442), v441);
    v959 = v443.i32[2];
    v958 = v443.i64[0];
    sub_223FFDF1C(v12[2], &v958, v439, v440, v441);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v444 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v444;
    v13 = **v444;
    v391 = v6 + 6;
  }
  v445 = v10[51];
  if ((v445 & 0x10000000) != 0)
    v446 = 0x40000000;
  else
    v446 = 0x80000000;
  if ((v445 & 0x20000000) != 0)
    v447 = v446;
  else
    v447 = v445 & 0xCFFFFFFF;
  if ((v447 & 0x40000000) == 0)
  {
    v448 = v7 + 3;
    if ((v447 & 0x80000000) != 0)
    {
      LOBYTE(v457) = -1;
      v458 = 2;
    }
    else
    {
      v449 = *(_QWORD *)(v13 + 2448);
      v450 = v449 + 520 * v447;
      v451 = *(_QWORD *)(v450 + 312);
      v452 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v450 + 336))
      {
        *(_BYTE *)(v450 + 336) = 0;
        v453 = *(unsigned int *)(v450 + 4);
        if ((_DWORD)v453)
        {
          v846 = v452;
          v891 = v451;
          v937 = v9;
          v454 = 0;
          v455 = (unsigned __int8 *)(v449 + 520 * v447 + 36);
          do
          {
            v456 = *v455;
            v455 += 28;
            v454 = sub_223A4EC9C(v454, ((unint64_t)v456 << 8) | 1, 0xFFu);
            --v453;
          }
          while (v453);
          v457 = v454 >> 8;
          if (!(_BYTE)v454)
            LOBYTE(v457) = -1;
          v451 = v891;
          v5 = a1;
          v9 = v937;
          v452 = v846;
        }
        else
        {
          LOBYTE(v457) = -1;
        }
        *(_BYTE *)(v449 + 520 * v447 + 338) = v457;
      }
      else
      {
        LOBYTE(v457) = *(_BYTE *)(v449 + 520 * v447 + 338);
      }
      v458 = v451 > v452;
    }
    v459 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v391, v448));
    a4.f32[2] = (float)v9;
    v460.i64[0] = 0x3F0000003F000000;
    v460.i64[1] = 0x3F0000003F000000;
    v461 = vmulq_n_f32(vaddq_f32(a4, v460), v459);
    v959 = v461.i32[2];
    v958 = v461.i64[0];
    sub_223FFDF1C(v12[2], &v958, v457, v458, v459);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v462 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v462;
    v13 = **v462;
    v391 = v6 + 6;
  }
  v463 = v10[52];
  if ((v463 & 0x10000000) != 0)
    v464 = 0x40000000;
  else
    v464 = 0x80000000;
  if ((v463 & 0x20000000) != 0)
    v465 = v464;
  else
    v465 = v463 & 0xCFFFFFFF;
  if ((v465 & 0x40000000) == 0)
  {
    v466 = v7 + 4;
    if ((v465 & 0x80000000) != 0)
    {
      LOBYTE(v475) = -1;
      v476 = 2;
    }
    else
    {
      v467 = *(_QWORD *)(v13 + 2448);
      v468 = v467 + 520 * v465;
      v469 = *(_QWORD *)(v468 + 312);
      v470 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v468 + 336))
      {
        *(_BYTE *)(v468 + 336) = 0;
        v471 = *(unsigned int *)(v468 + 4);
        if ((_DWORD)v471)
        {
          v847 = v470;
          v892 = v469;
          v938 = v9;
          v472 = 0;
          v473 = (unsigned __int8 *)(v467 + 520 * v465 + 36);
          do
          {
            v474 = *v473;
            v473 += 28;
            v472 = sub_223A4EC9C(v472, ((unint64_t)v474 << 8) | 1, 0xFFu);
            --v471;
          }
          while (v471);
          v475 = v472 >> 8;
          if (!(_BYTE)v472)
            LOBYTE(v475) = -1;
          v469 = v892;
          v5 = a1;
          v9 = v938;
          v470 = v847;
        }
        else
        {
          LOBYTE(v475) = -1;
        }
        *(_BYTE *)(v467 + 520 * v465 + 338) = v475;
      }
      else
      {
        LOBYTE(v475) = *(_BYTE *)(v467 + 520 * v465 + 338);
      }
      v476 = v469 > v470;
    }
    v477 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v391, v466));
    a4.f32[2] = (float)v9;
    v478.i64[0] = 0x3F0000003F000000;
    v478.i64[1] = 0x3F0000003F000000;
    v479 = vmulq_n_f32(vaddq_f32(a4, v478), v477);
    v959 = v479.i32[2];
    v958 = v479.i64[0];
    sub_223FFDF1C(v12[2], &v958, v475, v476, v477);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v480 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v480;
    v13 = **v480;
    v391 = v6 + 6;
  }
  v481 = v10[53];
  if ((v481 & 0x10000000) != 0)
    v482 = 0x40000000;
  else
    v482 = 0x80000000;
  if ((v481 & 0x20000000) != 0)
    v483 = v482;
  else
    v483 = v481 & 0xCFFFFFFF;
  if ((v483 & 0x40000000) == 0)
  {
    v484 = v7 + 5;
    if ((v483 & 0x80000000) != 0)
    {
      LOBYTE(v493) = -1;
      v494 = 2;
    }
    else
    {
      v485 = *(_QWORD *)(v13 + 2448);
      v486 = v485 + 520 * v483;
      v487 = *(_QWORD *)(v486 + 312);
      v488 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v486 + 336))
      {
        *(_BYTE *)(v486 + 336) = 0;
        v489 = *(unsigned int *)(v486 + 4);
        if ((_DWORD)v489)
        {
          v848 = v488;
          v893 = v487;
          v939 = v9;
          v490 = 0;
          v491 = (unsigned __int8 *)(v485 + 520 * v483 + 36);
          do
          {
            v492 = *v491;
            v491 += 28;
            v490 = sub_223A4EC9C(v490, ((unint64_t)v492 << 8) | 1, 0xFFu);
            --v489;
          }
          while (v489);
          v493 = v490 >> 8;
          if (!(_BYTE)v490)
            LOBYTE(v493) = -1;
          v487 = v893;
          v5 = a1;
          v9 = v939;
          v488 = v848;
        }
        else
        {
          LOBYTE(v493) = -1;
        }
        *(_BYTE *)(v485 + 520 * v483 + 338) = v493;
      }
      else
      {
        LOBYTE(v493) = *(_BYTE *)(v485 + 520 * v483 + 338);
      }
      v494 = v487 > v488;
    }
    v495 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v391, v484));
    a4.f32[2] = (float)v9;
    v496.i64[0] = 0x3F0000003F000000;
    v496.i64[1] = 0x3F0000003F000000;
    v497 = vmulq_n_f32(vaddq_f32(a4, v496), v495);
    v959 = v497.i32[2];
    v958 = v497.i64[0];
    sub_223FFDF1C(v12[2], &v958, v493, v494, v495);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v498 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v498;
    v13 = **v498;
    v391 = v6 + 6;
  }
  v499 = v10[54];
  if ((v499 & 0x10000000) != 0)
    v500 = 0x40000000;
  else
    v500 = 0x80000000;
  if ((v499 & 0x20000000) != 0)
    v501 = v500;
  else
    v501 = v499 & 0xCFFFFFFF;
  if ((v501 & 0x40000000) == 0)
  {
    v502 = v7 + 6;
    if ((v501 & 0x80000000) != 0)
    {
      LOBYTE(v511) = -1;
      v512 = 2;
    }
    else
    {
      v503 = *(_QWORD *)(v13 + 2448);
      v504 = v503 + 520 * v501;
      v505 = *(_QWORD *)(v504 + 312);
      v506 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v504 + 336))
      {
        *(_BYTE *)(v504 + 336) = 0;
        v507 = *(unsigned int *)(v504 + 4);
        if ((_DWORD)v507)
        {
          v849 = v506;
          v894 = v505;
          v940 = v9;
          v508 = 0;
          v509 = (unsigned __int8 *)(v503 + 520 * v501 + 36);
          do
          {
            v510 = *v509;
            v509 += 28;
            v508 = sub_223A4EC9C(v508, ((unint64_t)v510 << 8) | 1, 0xFFu);
            --v507;
          }
          while (v507);
          v511 = v508 >> 8;
          if (!(_BYTE)v508)
            LOBYTE(v511) = -1;
          v505 = v894;
          v5 = a1;
          v9 = v940;
          v506 = v849;
        }
        else
        {
          LOBYTE(v511) = -1;
        }
        *(_BYTE *)(v503 + 520 * v501 + 338) = v511;
      }
      else
      {
        LOBYTE(v511) = *(_BYTE *)(v503 + 520 * v501 + 338);
      }
      v512 = v505 > v506;
    }
    v513 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v391, v502));
    a4.f32[2] = (float)v9;
    v514.i64[0] = 0x3F0000003F000000;
    v514.i64[1] = 0x3F0000003F000000;
    v515 = vmulq_n_f32(vaddq_f32(a4, v514), v513);
    v959 = v515.i32[2];
    v958 = v515.i64[0];
    sub_223FFDF1C(v12[2], &v958, v511, v512, v513);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v516 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v516;
    v13 = **v516;
    v391 = v6 + 6;
  }
  v517 = v10[55];
  if ((v517 & 0x10000000) != 0)
    v518 = 0x40000000;
  else
    v518 = 0x80000000;
  if ((v517 & 0x20000000) != 0)
    v519 = v518;
  else
    v519 = v517 & 0xCFFFFFFF;
  if ((v519 & 0x40000000) == 0)
  {
    v520 = v7 + 7;
    if ((v519 & 0x80000000) != 0)
    {
      LOBYTE(v529) = -1;
      v530 = 2;
    }
    else
    {
      v521 = *(_QWORD *)(v13 + 2448);
      v522 = v521 + 520 * v519;
      v523 = *(_QWORD *)(v522 + 312);
      v524 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v522 + 336))
      {
        *(_BYTE *)(v522 + 336) = 0;
        v525 = *(unsigned int *)(v522 + 4);
        if ((_DWORD)v525)
        {
          v850 = v524;
          v895 = v523;
          v941 = v9;
          v526 = 0;
          v527 = (unsigned __int8 *)(v521 + 520 * v519 + 36);
          do
          {
            v528 = *v527;
            v527 += 28;
            v526 = sub_223A4EC9C(v526, ((unint64_t)v528 << 8) | 1, 0xFFu);
            --v525;
          }
          while (v525);
          v529 = v526 >> 8;
          if (!(_BYTE)v526)
            LOBYTE(v529) = -1;
          v523 = v895;
          v5 = a1;
          v9 = v941;
          v524 = v850;
        }
        else
        {
          LOBYTE(v529) = -1;
        }
        *(_BYTE *)(v521 + 520 * v519 + 338) = v529;
      }
      else
      {
        LOBYTE(v529) = *(_BYTE *)(v521 + 520 * v519 + 338);
      }
      v530 = v523 > v524;
    }
    v531 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v391, v520));
    a4.f32[2] = (float)v9;
    v532.i64[0] = 0x3F0000003F000000;
    v532.i64[1] = 0x3F0000003F000000;
    v533 = vmulq_n_f32(vaddq_f32(a4, v532), v531);
    v959 = v533.i32[2];
    v958 = v533.i64[0];
    sub_223FFDF1C(v12[2], &v958, v529, v530, v531);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v534 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v534;
    v13 = **v534;
  }
  v535 = v6 + 7;
  v536 = v10[56];
  if ((v536 & 0x10000000) != 0)
    v537 = 0x40000000;
  else
    v537 = 0x80000000;
  if ((v536 & 0x20000000) != 0)
    v538 = v537;
  else
    v538 = v536 & 0xCFFFFFFF;
  if ((v538 & 0x40000000) == 0)
  {
    if ((v538 & 0x80000000) != 0)
    {
      LOBYTE(v547) = -1;
      v548 = 2;
    }
    else
    {
      v539 = *(_QWORD *)(v13 + 2448);
      v540 = v539 + 520 * v538;
      v541 = *(_QWORD *)(v540 + 312);
      v542 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v540 + 336))
      {
        *(_BYTE *)(v540 + 336) = 0;
        v543 = *(unsigned int *)(v540 + 4);
        if ((_DWORD)v543)
        {
          v851 = v542;
          v896 = v541;
          v942 = v9;
          v544 = 0;
          v545 = (unsigned __int8 *)(v539 + 520 * v538 + 36);
          do
          {
            v546 = *v545;
            v545 += 28;
            v544 = sub_223A4EC9C(v544, ((unint64_t)v546 << 8) | 1, 0xFFu);
            --v543;
          }
          while (v543);
          v547 = v544 >> 8;
          if (!(_BYTE)v544)
            LOBYTE(v547) = -1;
          v541 = v896;
          v5 = a1;
          v9 = v942;
          v542 = v851;
        }
        else
        {
          LOBYTE(v547) = -1;
        }
        *(_BYTE *)(v539 + 520 * v538 + 338) = v547;
      }
      else
      {
        LOBYTE(v547) = *(_BYTE *)(v539 + 520 * v538 + 338);
      }
      v548 = v541 > v542;
    }
    v549 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v535, v7));
    a4.f32[2] = (float)v9;
    v550.i64[0] = 0x3F0000003F000000;
    v550.i64[1] = 0x3F0000003F000000;
    v551 = vmulq_n_f32(vaddq_f32(a4, v550), v549);
    v959 = v551.i32[2];
    v958 = v551.i64[0];
    sub_223FFDF1C(v12[2], &v958, v547, v548, v549);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v552 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v552;
    v13 = **v552;
    v535 = v6 + 7;
  }
  v553 = v10[57];
  if ((v553 & 0x10000000) != 0)
    v554 = 0x40000000;
  else
    v554 = 0x80000000;
  if ((v553 & 0x20000000) != 0)
    v555 = v554;
  else
    v555 = v553 & 0xCFFFFFFF;
  if ((v555 & 0x40000000) == 0)
  {
    v556 = v7 + 1;
    if ((v555 & 0x80000000) != 0)
    {
      LOBYTE(v565) = -1;
      v566 = 2;
    }
    else
    {
      v557 = *(_QWORD *)(v13 + 2448);
      v558 = v557 + 520 * v555;
      v559 = *(_QWORD *)(v558 + 312);
      v560 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v558 + 336))
      {
        *(_BYTE *)(v558 + 336) = 0;
        v561 = *(unsigned int *)(v558 + 4);
        if ((_DWORD)v561)
        {
          v852 = v560;
          v897 = v559;
          v943 = v9;
          v562 = 0;
          v563 = (unsigned __int8 *)(v557 + 520 * v555 + 36);
          do
          {
            v564 = *v563;
            v563 += 28;
            v562 = sub_223A4EC9C(v562, ((unint64_t)v564 << 8) | 1, 0xFFu);
            --v561;
          }
          while (v561);
          v565 = v562 >> 8;
          if (!(_BYTE)v562)
            LOBYTE(v565) = -1;
          v559 = v897;
          v5 = a1;
          v9 = v943;
          v560 = v852;
        }
        else
        {
          LOBYTE(v565) = -1;
        }
        *(_BYTE *)(v557 + 520 * v555 + 338) = v565;
      }
      else
      {
        LOBYTE(v565) = *(_BYTE *)(v557 + 520 * v555 + 338);
      }
      v566 = v559 > v560;
    }
    v567 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v535, v556));
    a4.f32[2] = (float)v9;
    v568.i64[0] = 0x3F0000003F000000;
    v568.i64[1] = 0x3F0000003F000000;
    v569 = vmulq_n_f32(vaddq_f32(a4, v568), v567);
    v959 = v569.i32[2];
    v958 = v569.i64[0];
    sub_223FFDF1C(v12[2], &v958, v565, v566, v567);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v570 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v570;
    v13 = **v570;
    v535 = v6 + 7;
  }
  v571 = v10[58];
  if ((v571 & 0x10000000) != 0)
    v572 = 0x40000000;
  else
    v572 = 0x80000000;
  if ((v571 & 0x20000000) != 0)
    v573 = v572;
  else
    v573 = v571 & 0xCFFFFFFF;
  if ((v573 & 0x40000000) == 0)
  {
    v574 = v7 + 2;
    if ((v573 & 0x80000000) != 0)
    {
      LOBYTE(v583) = -1;
      v584 = 2;
    }
    else
    {
      v575 = *(_QWORD *)(v13 + 2448);
      v576 = v575 + 520 * v573;
      v577 = *(_QWORD *)(v576 + 312);
      v578 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v576 + 336))
      {
        *(_BYTE *)(v576 + 336) = 0;
        v579 = *(unsigned int *)(v576 + 4);
        if ((_DWORD)v579)
        {
          v853 = v578;
          v898 = v577;
          v944 = v9;
          v580 = 0;
          v581 = (unsigned __int8 *)(v575 + 520 * v573 + 36);
          do
          {
            v582 = *v581;
            v581 += 28;
            v580 = sub_223A4EC9C(v580, ((unint64_t)v582 << 8) | 1, 0xFFu);
            --v579;
          }
          while (v579);
          v583 = v580 >> 8;
          if (!(_BYTE)v580)
            LOBYTE(v583) = -1;
          v577 = v898;
          v5 = a1;
          v9 = v944;
          v578 = v853;
        }
        else
        {
          LOBYTE(v583) = -1;
        }
        *(_BYTE *)(v575 + 520 * v573 + 338) = v583;
      }
      else
      {
        LOBYTE(v583) = *(_BYTE *)(v575 + 520 * v573 + 338);
      }
      v584 = v577 > v578;
    }
    v585 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v535, v574));
    a4.f32[2] = (float)v9;
    v586.i64[0] = 0x3F0000003F000000;
    v586.i64[1] = 0x3F0000003F000000;
    v587 = vmulq_n_f32(vaddq_f32(a4, v586), v585);
    v959 = v587.i32[2];
    v958 = v587.i64[0];
    sub_223FFDF1C(v12[2], &v958, v583, v584, v585);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v588 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v588;
    v13 = **v588;
    v535 = v6 + 7;
  }
  v589 = v10[59];
  if ((v589 & 0x10000000) != 0)
    v590 = 0x40000000;
  else
    v590 = 0x80000000;
  if ((v589 & 0x20000000) != 0)
    v591 = v590;
  else
    v591 = v589 & 0xCFFFFFFF;
  if ((v591 & 0x40000000) == 0)
  {
    v592 = v7 + 3;
    if ((v591 & 0x80000000) != 0)
    {
      LOBYTE(v601) = -1;
      v602 = 2;
    }
    else
    {
      v593 = *(_QWORD *)(v13 + 2448);
      v594 = v593 + 520 * v591;
      v595 = *(_QWORD *)(v594 + 312);
      v596 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v594 + 336))
      {
        *(_BYTE *)(v594 + 336) = 0;
        v597 = *(unsigned int *)(v594 + 4);
        if ((_DWORD)v597)
        {
          v854 = v596;
          v899 = v595;
          v945 = v9;
          v598 = 0;
          v599 = (unsigned __int8 *)(v593 + 520 * v591 + 36);
          do
          {
            v600 = *v599;
            v599 += 28;
            v598 = sub_223A4EC9C(v598, ((unint64_t)v600 << 8) | 1, 0xFFu);
            --v597;
          }
          while (v597);
          v601 = v598 >> 8;
          if (!(_BYTE)v598)
            LOBYTE(v601) = -1;
          v595 = v899;
          v5 = a1;
          v9 = v945;
          v596 = v854;
        }
        else
        {
          LOBYTE(v601) = -1;
        }
        *(_BYTE *)(v593 + 520 * v591 + 338) = v601;
      }
      else
      {
        LOBYTE(v601) = *(_BYTE *)(v593 + 520 * v591 + 338);
      }
      v602 = v595 > v596;
    }
    v603 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v535, v592));
    a4.f32[2] = (float)v9;
    v604.i64[0] = 0x3F0000003F000000;
    v604.i64[1] = 0x3F0000003F000000;
    v605 = vmulq_n_f32(vaddq_f32(a4, v604), v603);
    v959 = v605.i32[2];
    v958 = v605.i64[0];
    sub_223FFDF1C(v12[2], &v958, v601, v602, v603);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v606 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v606;
    v13 = **v606;
    v535 = v6 + 7;
  }
  v607 = v10[60];
  if ((v607 & 0x10000000) != 0)
    v608 = 0x40000000;
  else
    v608 = 0x80000000;
  if ((v607 & 0x20000000) != 0)
    v609 = v608;
  else
    v609 = v607 & 0xCFFFFFFF;
  if ((v609 & 0x40000000) == 0)
  {
    v610 = v7 + 4;
    if ((v609 & 0x80000000) != 0)
    {
      LOBYTE(v619) = -1;
      v620 = 2;
    }
    else
    {
      v611 = *(_QWORD *)(v13 + 2448);
      v612 = v611 + 520 * v609;
      v613 = *(_QWORD *)(v612 + 312);
      v614 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v612 + 336))
      {
        *(_BYTE *)(v612 + 336) = 0;
        v615 = *(unsigned int *)(v612 + 4);
        if ((_DWORD)v615)
        {
          v855 = v614;
          v900 = v613;
          v946 = v9;
          v616 = 0;
          v617 = (unsigned __int8 *)(v611 + 520 * v609 + 36);
          do
          {
            v618 = *v617;
            v617 += 28;
            v616 = sub_223A4EC9C(v616, ((unint64_t)v618 << 8) | 1, 0xFFu);
            --v615;
          }
          while (v615);
          v619 = v616 >> 8;
          if (!(_BYTE)v616)
            LOBYTE(v619) = -1;
          v613 = v900;
          v5 = a1;
          v9 = v946;
          v614 = v855;
        }
        else
        {
          LOBYTE(v619) = -1;
        }
        *(_BYTE *)(v611 + 520 * v609 + 338) = v619;
      }
      else
      {
        LOBYTE(v619) = *(_BYTE *)(v611 + 520 * v609 + 338);
      }
      v620 = v613 > v614;
    }
    v621 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v535, v610));
    a4.f32[2] = (float)v9;
    v622.i64[0] = 0x3F0000003F000000;
    v622.i64[1] = 0x3F0000003F000000;
    v623 = vmulq_n_f32(vaddq_f32(a4, v622), v621);
    v959 = v623.i32[2];
    v958 = v623.i64[0];
    sub_223FFDF1C(v12[2], &v958, v619, v620, v621);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v624 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v624;
    v13 = **v624;
    v535 = v6 + 7;
  }
  v625 = v10[61];
  if ((v625 & 0x10000000) != 0)
    v626 = 0x40000000;
  else
    v626 = 0x80000000;
  if ((v625 & 0x20000000) != 0)
    v627 = v626;
  else
    v627 = v625 & 0xCFFFFFFF;
  if ((v627 & 0x40000000) == 0)
  {
    v628 = v7 + 5;
    if ((v627 & 0x80000000) != 0)
    {
      LOBYTE(v637) = -1;
      v638 = 2;
    }
    else
    {
      v629 = *(_QWORD *)(v13 + 2448);
      v630 = v629 + 520 * v627;
      v631 = *(_QWORD *)(v630 + 312);
      v632 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v630 + 336))
      {
        *(_BYTE *)(v630 + 336) = 0;
        v633 = *(unsigned int *)(v630 + 4);
        if ((_DWORD)v633)
        {
          v856 = v632;
          v901 = v631;
          v947 = v9;
          v634 = 0;
          v635 = (unsigned __int8 *)(v629 + 520 * v627 + 36);
          do
          {
            v636 = *v635;
            v635 += 28;
            v634 = sub_223A4EC9C(v634, ((unint64_t)v636 << 8) | 1, 0xFFu);
            --v633;
          }
          while (v633);
          v637 = v634 >> 8;
          if (!(_BYTE)v634)
            LOBYTE(v637) = -1;
          v631 = v901;
          v5 = a1;
          v9 = v947;
          v632 = v856;
        }
        else
        {
          LOBYTE(v637) = -1;
        }
        *(_BYTE *)(v629 + 520 * v627 + 338) = v637;
      }
      else
      {
        LOBYTE(v637) = *(_BYTE *)(v629 + 520 * v627 + 338);
      }
      v638 = v631 > v632;
    }
    v639 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v535, v628));
    a4.f32[2] = (float)v9;
    v640.i64[0] = 0x3F0000003F000000;
    v640.i64[1] = 0x3F0000003F000000;
    v641 = vmulq_n_f32(vaddq_f32(a4, v640), v639);
    v959 = v641.i32[2];
    v958 = v641.i64[0];
    sub_223FFDF1C(v12[2], &v958, v637, v638, v639);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v642 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v642;
    v13 = **v642;
    v535 = v6 + 7;
  }
  v643 = v10[62];
  if ((v643 & 0x10000000) != 0)
    v644 = 0x40000000;
  else
    v644 = 0x80000000;
  if ((v643 & 0x20000000) != 0)
    v645 = v644;
  else
    v645 = v643 & 0xCFFFFFFF;
  if ((v645 & 0x40000000) == 0)
  {
    v646 = v7 + 6;
    if ((v645 & 0x80000000) != 0)
    {
      LOBYTE(v655) = -1;
      v656 = 2;
    }
    else
    {
      v647 = *(_QWORD *)(v13 + 2448);
      v648 = v647 + 520 * v645;
      v649 = *(_QWORD *)(v648 + 312);
      v650 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v648 + 336))
      {
        *(_BYTE *)(v648 + 336) = 0;
        v651 = *(unsigned int *)(v648 + 4);
        if ((_DWORD)v651)
        {
          v857 = v650;
          v902 = v649;
          v948 = v9;
          v652 = 0;
          v653 = (unsigned __int8 *)(v647 + 520 * v645 + 36);
          do
          {
            v654 = *v653;
            v653 += 28;
            v652 = sub_223A4EC9C(v652, ((unint64_t)v654 << 8) | 1, 0xFFu);
            --v651;
          }
          while (v651);
          v655 = v652 >> 8;
          if (!(_BYTE)v652)
            LOBYTE(v655) = -1;
          v649 = v902;
          v5 = a1;
          v9 = v948;
          v650 = v857;
        }
        else
        {
          LOBYTE(v655) = -1;
        }
        *(_BYTE *)(v647 + 520 * v645 + 338) = v655;
      }
      else
      {
        LOBYTE(v655) = *(_BYTE *)(v647 + 520 * v645 + 338);
      }
      v656 = v649 > v650;
    }
    v657 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v535, v646));
    a4.f32[2] = (float)v9;
    v658.i64[0] = 0x3F0000003F000000;
    v658.i64[1] = 0x3F0000003F000000;
    v659 = vmulq_n_f32(vaddq_f32(a4, v658), v657);
    v959 = v659.i32[2];
    v958 = v659.i64[0];
    sub_223FFDF1C(v12[2], &v958, v655, v656, v657);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v660 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v660;
    v13 = **v660;
    v535 = v6 + 7;
  }
  v661 = v10[63];
  if ((v661 & 0x10000000) != 0)
    v662 = 0x40000000;
  else
    v662 = 0x80000000;
  if ((v661 & 0x20000000) != 0)
    v663 = v662;
  else
    v663 = v661 & 0xCFFFFFFF;
  if ((v663 & 0x40000000) == 0)
  {
    v664 = v7 + 7;
    if ((v663 & 0x80000000) != 0)
    {
      LOBYTE(v673) = -1;
      v674 = 2;
    }
    else
    {
      v665 = *(_QWORD *)(v13 + 2448);
      v666 = v665 + 520 * v663;
      v667 = *(_QWORD *)(v666 + 312);
      v668 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v666 + 336))
      {
        *(_BYTE *)(v666 + 336) = 0;
        v669 = *(unsigned int *)(v666 + 4);
        if ((_DWORD)v669)
        {
          v858 = v668;
          v903 = v667;
          v949 = v9;
          v670 = 0;
          v671 = (unsigned __int8 *)(v665 + 520 * v663 + 36);
          do
          {
            v672 = *v671;
            v671 += 28;
            v670 = sub_223A4EC9C(v670, ((unint64_t)v672 << 8) | 1, 0xFFu);
            --v669;
          }
          while (v669);
          v673 = v670 >> 8;
          if (!(_BYTE)v670)
            LOBYTE(v673) = -1;
          v667 = v903;
          v5 = a1;
          v9 = v949;
          v668 = v858;
        }
        else
        {
          LOBYTE(v673) = -1;
        }
        *(_BYTE *)(v665 + 520 * v663 + 338) = v673;
      }
      else
      {
        LOBYTE(v673) = *(_BYTE *)(v665 + 520 * v663 + 338);
      }
      v674 = v667 > v668;
    }
    v675 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v535, v664));
    a4.f32[2] = (float)v9;
    v676.i64[0] = 0x3F0000003F000000;
    v676.i64[1] = 0x3F0000003F000000;
    v677 = vmulq_n_f32(vaddq_f32(a4, v676), v675);
    v959 = v677.i32[2];
    v958 = v677.i64[0];
    sub_223FFDF1C(v12[2], &v958, v673, v674, v675);
    v7 = *a2;
    v6 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v678 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v678;
    v13 = **v678;
  }
  v679 = v9 + 1;
  v680 = v10[64];
  if ((v680 & 0x10000000) != 0)
    v681 = 0x40000000;
  else
    v681 = 0x80000000;
  if ((v680 & 0x20000000) != 0)
    v682 = v681;
  else
    v682 = v680 & 0xCFFFFFFF;
  if ((v682 & 0x40000000) == 0)
  {
    if ((v682 & 0x80000000) != 0)
    {
      LOBYTE(v691) = -1;
      v692 = 2;
    }
    else
    {
      v683 = *(_QWORD *)(v13 + 2448);
      v684 = v683 + 520 * v682;
      v685 = *(_QWORD *)(v684 + 312);
      v686 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v684 + 336))
      {
        *(_BYTE *)(v684 + 336) = 0;
        v687 = *(unsigned int *)(v684 + 4);
        if ((_DWORD)v687)
        {
          v859 = v686;
          v904 = v685;
          v950 = v679;
          v688 = 0;
          v689 = (unsigned __int8 *)(v683 + 520 * v682 + 36);
          do
          {
            v690 = *v689;
            v689 += 28;
            v688 = sub_223A4EC9C(v688, ((unint64_t)v690 << 8) | 1, 0xFFu);
            --v687;
          }
          while (v687);
          v691 = v688 >> 8;
          if (!(_BYTE)v688)
            LOBYTE(v691) = -1;
          v685 = v904;
          v5 = a1;
          v679 = v950;
          v686 = v859;
        }
        else
        {
          LOBYTE(v691) = -1;
        }
        *(_BYTE *)(v683 + 520 * v682 + 338) = v691;
      }
      else
      {
        LOBYTE(v691) = *(_BYTE *)(v683 + 520 * v682 + 338);
      }
      v692 = v685 > v686;
    }
    a4.f32[0] = (float)v7;
    a4.f32[1] = (float)v6;
    v693 = *(float *)(v13 + 144);
    a4.f32[2] = (float)v679;
    v694.i64[0] = 0x3F0000003F000000;
    v694.i64[1] = 0x3F0000003F000000;
    v695 = vmulq_n_f32(vaddq_f32(a4, v694), v693);
    v959 = v695.i32[2];
    v958 = v695.i64[0];
    sub_223FFDF1C(v12[2], &v958, v691, v692, v693);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v696 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v696;
    v13 = **v696;
    v679 = a2[2] + 1;
  }
  v697 = v10[65];
  if ((v697 & 0x10000000) != 0)
    v698 = 0x40000000;
  else
    v698 = 0x80000000;
  if ((v697 & 0x20000000) != 0)
    v699 = v698;
  else
    v699 = v697 & 0xCFFFFFFF;
  if ((v699 & 0x40000000) == 0)
  {
    v700 = v7 + 1;
    if ((v699 & 0x80000000) != 0)
    {
      LOBYTE(v709) = -1;
      v710 = 2;
    }
    else
    {
      v701 = *(_QWORD *)(v13 + 2448);
      v702 = v701 + 520 * v699;
      v703 = *(_QWORD *)(v702 + 312);
      v704 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v702 + 336))
      {
        *(_BYTE *)(v702 + 336) = 0;
        v705 = *(unsigned int *)(v702 + 4);
        if ((_DWORD)v705)
        {
          v860 = v704;
          v905 = v703;
          v951 = v679;
          v706 = 0;
          v707 = (unsigned __int8 *)(v701 + 520 * v699 + 36);
          do
          {
            v708 = *v707;
            v707 += 28;
            v706 = sub_223A4EC9C(v706, ((unint64_t)v708 << 8) | 1, 0xFFu);
            --v705;
          }
          while (v705);
          v709 = v706 >> 8;
          if (!(_BYTE)v706)
            LOBYTE(v709) = -1;
          v703 = v905;
          v5 = a1;
          v679 = v951;
          v704 = v860;
        }
        else
        {
          LOBYTE(v709) = -1;
        }
        *(_BYTE *)(v701 + 520 * v699 + 338) = v709;
      }
      else
      {
        LOBYTE(v709) = *(_BYTE *)(v701 + 520 * v699 + 338);
      }
      v710 = v703 > v704;
    }
    v711 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v700));
    a4.f32[2] = (float)v679;
    v712.i64[0] = 0x3F0000003F000000;
    v712.i64[1] = 0x3F0000003F000000;
    v713 = vmulq_n_f32(vaddq_f32(a4, v712), v711);
    v959 = v713.i32[2];
    v958 = v713.i64[0];
    sub_223FFDF1C(v12[2], &v958, v709, v710, v711);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v714 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v714;
    v13 = **v714;
    v679 = a2[2] + 1;
  }
  v715 = v10[66];
  if ((v715 & 0x10000000) != 0)
    v716 = 0x40000000;
  else
    v716 = 0x80000000;
  if ((v715 & 0x20000000) != 0)
    v717 = v716;
  else
    v717 = v715 & 0xCFFFFFFF;
  if ((v717 & 0x40000000) == 0)
  {
    v718 = v7 + 2;
    if ((v717 & 0x80000000) != 0)
    {
      LOBYTE(v727) = -1;
      v728 = 2;
    }
    else
    {
      v719 = *(_QWORD *)(v13 + 2448);
      v720 = v719 + 520 * v717;
      v721 = *(_QWORD *)(v720 + 312);
      v722 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v720 + 336))
      {
        *(_BYTE *)(v720 + 336) = 0;
        v723 = *(unsigned int *)(v720 + 4);
        if ((_DWORD)v723)
        {
          v861 = v722;
          v906 = v721;
          v952 = v679;
          v724 = 0;
          v725 = (unsigned __int8 *)(v719 + 520 * v717 + 36);
          do
          {
            v726 = *v725;
            v725 += 28;
            v724 = sub_223A4EC9C(v724, ((unint64_t)v726 << 8) | 1, 0xFFu);
            --v723;
          }
          while (v723);
          v727 = v724 >> 8;
          if (!(_BYTE)v724)
            LOBYTE(v727) = -1;
          v721 = v906;
          v5 = a1;
          v679 = v952;
          v722 = v861;
        }
        else
        {
          LOBYTE(v727) = -1;
        }
        *(_BYTE *)(v719 + 520 * v717 + 338) = v727;
      }
      else
      {
        LOBYTE(v727) = *(_BYTE *)(v719 + 520 * v717 + 338);
      }
      v728 = v721 > v722;
    }
    v729 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v718));
    a4.f32[2] = (float)v679;
    v730.i64[0] = 0x3F0000003F000000;
    v730.i64[1] = 0x3F0000003F000000;
    v731 = vmulq_n_f32(vaddq_f32(a4, v730), v729);
    v959 = v731.i32[2];
    v958 = v731.i64[0];
    sub_223FFDF1C(v12[2], &v958, v727, v728, v729);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v732 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v732;
    v13 = **v732;
    v679 = a2[2] + 1;
  }
  v733 = v10[67];
  if ((v733 & 0x10000000) != 0)
    v734 = 0x40000000;
  else
    v734 = 0x80000000;
  if ((v733 & 0x20000000) != 0)
    v735 = v734;
  else
    v735 = v733 & 0xCFFFFFFF;
  if ((v735 & 0x40000000) == 0)
  {
    v736 = v7 + 3;
    if ((v735 & 0x80000000) != 0)
    {
      LOBYTE(v745) = -1;
      v746 = 2;
    }
    else
    {
      v737 = *(_QWORD *)(v13 + 2448);
      v738 = v737 + 520 * v735;
      v739 = *(_QWORD *)(v738 + 312);
      v740 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v738 + 336))
      {
        *(_BYTE *)(v738 + 336) = 0;
        v741 = *(unsigned int *)(v738 + 4);
        if ((_DWORD)v741)
        {
          v862 = v740;
          v907 = v739;
          v953 = v679;
          v742 = 0;
          v743 = (unsigned __int8 *)(v737 + 520 * v735 + 36);
          do
          {
            v744 = *v743;
            v743 += 28;
            v742 = sub_223A4EC9C(v742, ((unint64_t)v744 << 8) | 1, 0xFFu);
            --v741;
          }
          while (v741);
          v745 = v742 >> 8;
          if (!(_BYTE)v742)
            LOBYTE(v745) = -1;
          v739 = v907;
          v5 = a1;
          v679 = v953;
          v740 = v862;
        }
        else
        {
          LOBYTE(v745) = -1;
        }
        *(_BYTE *)(v737 + 520 * v735 + 338) = v745;
      }
      else
      {
        LOBYTE(v745) = *(_BYTE *)(v737 + 520 * v735 + 338);
      }
      v746 = v739 > v740;
    }
    v747 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v736));
    a4.f32[2] = (float)v679;
    v748.i64[0] = 0x3F0000003F000000;
    v748.i64[1] = 0x3F0000003F000000;
    v749 = vmulq_n_f32(vaddq_f32(a4, v748), v747);
    v959 = v749.i32[2];
    v958 = v749.i64[0];
    sub_223FFDF1C(v12[2], &v958, v745, v746, v747);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v750 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v750;
    v13 = **v750;
    v679 = a2[2] + 1;
  }
  v751 = v10[68];
  if ((v751 & 0x10000000) != 0)
    v752 = 0x40000000;
  else
    v752 = 0x80000000;
  if ((v751 & 0x20000000) != 0)
    v753 = v752;
  else
    v753 = v751 & 0xCFFFFFFF;
  if ((v753 & 0x40000000) == 0)
  {
    v754 = v7 + 4;
    if ((v753 & 0x80000000) != 0)
    {
      LOBYTE(v763) = -1;
      v764 = 2;
    }
    else
    {
      v755 = *(_QWORD *)(v13 + 2448);
      v756 = v755 + 520 * v753;
      v757 = *(_QWORD *)(v756 + 312);
      v758 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v756 + 336))
      {
        *(_BYTE *)(v756 + 336) = 0;
        v759 = *(unsigned int *)(v756 + 4);
        if ((_DWORD)v759)
        {
          v863 = v758;
          v908 = v757;
          v954 = v679;
          v760 = 0;
          v761 = (unsigned __int8 *)(v755 + 520 * v753 + 36);
          do
          {
            v762 = *v761;
            v761 += 28;
            v760 = sub_223A4EC9C(v760, ((unint64_t)v762 << 8) | 1, 0xFFu);
            --v759;
          }
          while (v759);
          v763 = v760 >> 8;
          if (!(_BYTE)v760)
            LOBYTE(v763) = -1;
          v757 = v908;
          v5 = a1;
          v679 = v954;
          v758 = v863;
        }
        else
        {
          LOBYTE(v763) = -1;
        }
        *(_BYTE *)(v755 + 520 * v753 + 338) = v763;
      }
      else
      {
        LOBYTE(v763) = *(_BYTE *)(v755 + 520 * v753 + 338);
      }
      v764 = v757 > v758;
    }
    v765 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v754));
    a4.f32[2] = (float)v679;
    v766.i64[0] = 0x3F0000003F000000;
    v766.i64[1] = 0x3F0000003F000000;
    v767 = vmulq_n_f32(vaddq_f32(a4, v766), v765);
    v959 = v767.i32[2];
    v958 = v767.i64[0];
    sub_223FFDF1C(v12[2], &v958, v763, v764, v765);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v768 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v768;
    v13 = **v768;
    v679 = a2[2] + 1;
  }
  v769 = v10[69];
  if ((v769 & 0x10000000) != 0)
    v770 = 0x40000000;
  else
    v770 = 0x80000000;
  if ((v769 & 0x20000000) != 0)
    v771 = v770;
  else
    v771 = v769 & 0xCFFFFFFF;
  if ((v771 & 0x40000000) == 0)
  {
    v772 = v7 + 5;
    if ((v771 & 0x80000000) != 0)
    {
      LOBYTE(v781) = -1;
      v782 = 2;
    }
    else
    {
      v773 = *(_QWORD *)(v13 + 2448);
      v774 = v773 + 520 * v771;
      v775 = *(_QWORD *)(v774 + 312);
      v776 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v774 + 336))
      {
        *(_BYTE *)(v774 + 336) = 0;
        v777 = *(unsigned int *)(v774 + 4);
        if ((_DWORD)v777)
        {
          v864 = v776;
          v909 = v775;
          v955 = v679;
          v778 = 0;
          v779 = (unsigned __int8 *)(v773 + 520 * v771 + 36);
          do
          {
            v780 = *v779;
            v779 += 28;
            v778 = sub_223A4EC9C(v778, ((unint64_t)v780 << 8) | 1, 0xFFu);
            --v777;
          }
          while (v777);
          v781 = v778 >> 8;
          if (!(_BYTE)v778)
            LOBYTE(v781) = -1;
          v775 = v909;
          v5 = a1;
          v679 = v955;
          v776 = v864;
        }
        else
        {
          LOBYTE(v781) = -1;
        }
        *(_BYTE *)(v773 + 520 * v771 + 338) = v781;
      }
      else
      {
        LOBYTE(v781) = *(_BYTE *)(v773 + 520 * v771 + 338);
      }
      v782 = v775 > v776;
    }
    v783 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v772));
    a4.f32[2] = (float)v679;
    v784.i64[0] = 0x3F0000003F000000;
    v784.i64[1] = 0x3F0000003F000000;
    v785 = vmulq_n_f32(vaddq_f32(a4, v784), v783);
    v959 = v785.i32[2];
    v958 = v785.i64[0];
    sub_223FFDF1C(v12[2], &v958, v781, v782, v783);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v786 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v786;
    v13 = **v786;
    v679 = a2[2] + 1;
  }
  v787 = v10[70];
  if ((v787 & 0x10000000) != 0)
    v788 = 0x40000000;
  else
    v788 = 0x80000000;
  if ((v787 & 0x20000000) != 0)
    v789 = v788;
  else
    v789 = v787 & 0xCFFFFFFF;
  if ((v789 & 0x40000000) == 0)
  {
    v790 = v7 + 6;
    if ((v789 & 0x80000000) != 0)
    {
      LOBYTE(v799) = -1;
      v800 = 2;
    }
    else
    {
      v791 = *(_QWORD *)(v13 + 2448);
      v792 = v791 + 520 * v789;
      v793 = *(_QWORD *)(v792 + 312);
      v794 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v792 + 336))
      {
        *(_BYTE *)(v792 + 336) = 0;
        v795 = *(unsigned int *)(v792 + 4);
        if ((_DWORD)v795)
        {
          v865 = v794;
          v910 = v793;
          v956 = v679;
          v796 = 0;
          v797 = (unsigned __int8 *)(v791 + 520 * v789 + 36);
          do
          {
            v798 = *v797;
            v797 += 28;
            v796 = sub_223A4EC9C(v796, ((unint64_t)v798 << 8) | 1, 0xFFu);
            --v795;
          }
          while (v795);
          v799 = v796 >> 8;
          if (!(_BYTE)v796)
            LOBYTE(v799) = -1;
          v793 = v910;
          v5 = a1;
          v679 = v956;
          v794 = v865;
        }
        else
        {
          LOBYTE(v799) = -1;
        }
        *(_BYTE *)(v791 + 520 * v789 + 338) = v799;
      }
      else
      {
        LOBYTE(v799) = *(_BYTE *)(v791 + 520 * v789 + 338);
      }
      v800 = v793 > v794;
    }
    v801 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v790));
    a4.f32[2] = (float)v679;
    v802.i64[0] = 0x3F0000003F000000;
    v802.i64[1] = 0x3F0000003F000000;
    v803 = vmulq_n_f32(vaddq_f32(a4, v802), v801);
    v959 = v803.i32[2];
    v958 = v803.i64[0];
    sub_223FFDF1C(v12[2], &v958, v799, v800, v801);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v804 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v804;
    v13 = **v804;
    v679 = a2[2] + 1;
  }
  v805 = v10[71];
  if ((v805 & 0x10000000) != 0)
    v806 = 0x40000000;
  else
    v806 = 0x80000000;
  if ((v805 & 0x20000000) != 0)
    v807 = v806;
  else
    v807 = v805 & 0xCFFFFFFF;
  if ((v807 & 0x40000000) == 0)
  {
    v808 = v7 + 7;
    if ((v807 & 0x80000000) != 0)
    {
      LOBYTE(v817) = -1;
      v818 = 2;
    }
    else
    {
      v809 = *(_QWORD *)(v13 + 2448);
      v810 = v809 + 520 * v807;
      v811 = *(_QWORD *)(v810 + 312);
      v812 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v810 + 336))
      {
        *(_BYTE *)(v810 + 336) = 0;
        v813 = *(unsigned int *)(v810 + 4);
        if ((_DWORD)v813)
        {
          v866 = v812;
          v911 = v811;
          v957 = v679;
          v814 = 0;
          v815 = (unsigned __int8 *)(v809 + 520 * v807 + 36);
          do
          {
            v816 = *v815;
            v815 += 28;
            v814 = sub_223A4EC9C(v814, ((unint64_t)v816 << 8) | 1, 0xFFu);
            --v813;
          }
          while (v813);
          v817 = v814 >> 8;
          if (!(_BYTE)v814)
            LOBYTE(v817) = -1;
          v811 = v911;
          v5 = a1;
          v679 = v957;
          v812 = v866;
        }
        else
        {
          LOBYTE(v817) = -1;
        }
        *(_BYTE *)(v809 + 520 * v807 + 338) = v817;
      }
      else
      {
        LOBYTE(v817) = *(_BYTE *)(v809 + 520 * v807 + 338);
      }
      v818 = v811 > v812;
    }
    v819 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v808));
    a4.f32[2] = (float)v679;
    v820.i64[0] = 0x3F0000003F000000;
    v820.i64[1] = 0x3F0000003F000000;
    v821 = vmulq_n_f32(vaddq_f32(a4, v820), v819);
    v959 = v821.i32[2];
    v958 = v821.i64[0];
    sub_223FFDF1C(v12[2], &v958, v817, v818, v819);
  }
  sub_223D6182C(v5, a2, a3, a4);
}

void sub_223D6182C(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t **v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unint64_t v42;
  int v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t **v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unint64_t v60;
  int v61;
  float v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t **v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unint64_t v78;
  int v79;
  float v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t **v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unint64_t v96;
  int v97;
  float v98;
  float32x4_t v99;
  float32x4_t v100;
  uint64_t **v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unsigned __int8 *v112;
  unsigned int v113;
  unint64_t v114;
  int v115;
  float v116;
  float32x4_t v117;
  float32x4_t v118;
  uint64_t **v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unsigned __int8 *v130;
  unsigned int v131;
  unint64_t v132;
  int v133;
  float v134;
  float32x4_t v135;
  float32x4_t v136;
  uint64_t **v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unsigned int v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  uint64_t **v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unsigned __int8 *v167;
  unsigned int v168;
  unint64_t v169;
  int v170;
  float v171;
  float32x4_t v172;
  float32x4_t v173;
  uint64_t **v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unsigned __int8 *v185;
  unsigned int v186;
  unint64_t v187;
  int v188;
  float v189;
  float32x4_t v190;
  float32x4_t v191;
  uint64_t **v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unsigned __int8 *v203;
  unsigned int v204;
  unint64_t v205;
  int v206;
  float v207;
  float32x4_t v208;
  float32x4_t v209;
  uint64_t **v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unsigned __int8 *v221;
  unsigned int v222;
  unint64_t v223;
  int v224;
  float v225;
  float32x4_t v226;
  float32x4_t v227;
  uint64_t **v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unsigned __int8 *v239;
  unsigned int v240;
  unint64_t v241;
  int v242;
  float v243;
  float32x4_t v244;
  float32x4_t v245;
  uint64_t **v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unsigned __int8 *v257;
  unsigned int v258;
  unint64_t v259;
  int v260;
  float v261;
  float32x4_t v262;
  float32x4_t v263;
  uint64_t **v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unsigned __int8 *v275;
  unsigned int v276;
  unint64_t v277;
  int v278;
  float v279;
  float32x4_t v280;
  float32x4_t v281;
  uint64_t **v282;
  int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unsigned __int8 *v293;
  unsigned int v294;
  unint64_t v295;
  int v296;
  float v297;
  float32x4_t v298;
  float32x4_t v299;
  uint64_t **v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unsigned __int8 *v311;
  unsigned int v312;
  unint64_t v313;
  int v314;
  float v315;
  float32x4_t v316;
  float32x4_t v317;
  uint64_t **v318;
  int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unsigned __int8 *v329;
  unsigned int v330;
  unint64_t v331;
  int v332;
  float v333;
  float32x4_t v334;
  float32x4_t v335;
  uint64_t **v336;
  int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unsigned __int8 *v347;
  unsigned int v348;
  unint64_t v349;
  int v350;
  float v351;
  float32x4_t v352;
  float32x4_t v353;
  uint64_t **v354;
  int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unsigned __int8 *v365;
  unsigned int v366;
  unint64_t v367;
  int v368;
  float v369;
  float32x4_t v370;
  float32x4_t v371;
  uint64_t **v372;
  int v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unsigned __int8 *v383;
  unsigned int v384;
  unint64_t v385;
  int v386;
  float v387;
  float32x4_t v388;
  float32x4_t v389;
  uint64_t **v390;
  int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unsigned __int8 *v401;
  unsigned int v402;
  unint64_t v403;
  int v404;
  float v405;
  float32x4_t v406;
  float32x4_t v407;
  uint64_t **v408;
  int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unsigned __int8 *v419;
  unsigned int v420;
  unint64_t v421;
  int v422;
  float v423;
  float32x4_t v424;
  float32x4_t v425;
  uint64_t **v426;
  int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  unsigned __int8 *v437;
  unsigned int v438;
  unint64_t v439;
  int v440;
  float v441;
  float32x4_t v442;
  float32x4_t v443;
  uint64_t **v444;
  unsigned int v445;
  int v446;
  unsigned int v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unsigned __int8 *v455;
  unsigned int v456;
  unint64_t v457;
  int v458;
  float v459;
  float32x4_t v460;
  float32x4_t v461;
  uint64_t **v462;
  int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unsigned __int8 *v473;
  unsigned int v474;
  unint64_t v475;
  int v476;
  float v477;
  float32x4_t v478;
  float32x4_t v479;
  uint64_t **v480;
  int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unsigned __int8 *v491;
  unsigned int v492;
  unint64_t v493;
  int v494;
  float v495;
  float32x4_t v496;
  float32x4_t v497;
  uint64_t **v498;
  int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unsigned __int8 *v509;
  unsigned int v510;
  unint64_t v511;
  int v512;
  float v513;
  float32x4_t v514;
  float32x4_t v515;
  uint64_t **v516;
  int v517;
  unsigned int v518;
  unsigned int v519;
  unsigned int v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unsigned __int8 *v527;
  unsigned int v528;
  unint64_t v529;
  int v530;
  float v531;
  float32x4_t v532;
  float32x4_t v533;
  uint64_t **v534;
  int v535;
  unsigned int v536;
  unsigned int v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  unsigned __int8 *v545;
  unsigned int v546;
  unint64_t v547;
  int v548;
  float v549;
  float32x4_t v550;
  float32x4_t v551;
  uint64_t **v552;
  int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  unsigned __int8 *v563;
  unsigned int v564;
  unint64_t v565;
  int v566;
  float v567;
  float32x4_t v568;
  float32x4_t v569;
  uint64_t **v570;
  int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unsigned __int8 *v581;
  unsigned int v582;
  unint64_t v583;
  int v584;
  float v585;
  float32x4_t v586;
  float32x4_t v587;
  uint64_t **v588;
  unsigned int v589;
  int v590;
  unsigned int v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  unsigned __int8 *v599;
  unsigned int v600;
  unint64_t v601;
  int v602;
  float v603;
  float32x4_t v604;
  float32x4_t v605;
  uint64_t **v606;
  int v607;
  unsigned int v608;
  unsigned int v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  unsigned __int8 *v617;
  unsigned int v618;
  unint64_t v619;
  int v620;
  float v621;
  float32x4_t v622;
  float32x4_t v623;
  uint64_t **v624;
  int v625;
  unsigned int v626;
  unsigned int v627;
  unsigned int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  unsigned __int8 *v635;
  unsigned int v636;
  unint64_t v637;
  int v638;
  float v639;
  float32x4_t v640;
  float32x4_t v641;
  uint64_t **v642;
  int v643;
  unsigned int v644;
  unsigned int v645;
  unsigned int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unsigned __int8 *v653;
  unsigned int v654;
  unint64_t v655;
  int v656;
  float v657;
  float32x4_t v658;
  float32x4_t v659;
  uint64_t **v660;
  int v661;
  unsigned int v662;
  unsigned int v663;
  unsigned int v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unsigned __int8 *v671;
  unsigned int v672;
  unint64_t v673;
  int v674;
  float v675;
  float32x4_t v676;
  float32x4_t v677;
  uint64_t **v678;
  int v679;
  unsigned int v680;
  unsigned int v681;
  unsigned int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t v688;
  unsigned __int8 *v689;
  unsigned int v690;
  unint64_t v691;
  int v692;
  float v693;
  float32x4_t v694;
  float32x4_t v695;
  uint64_t **v696;
  int v697;
  unsigned int v698;
  unsigned int v699;
  unsigned int v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  unsigned __int8 *v707;
  unsigned int v708;
  unint64_t v709;
  int v710;
  float v711;
  float32x4_t v712;
  float32x4_t v713;
  uint64_t **v714;
  int v715;
  unsigned int v716;
  unsigned int v717;
  unsigned int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  unsigned __int8 *v725;
  unsigned int v726;
  unint64_t v727;
  int v728;
  float v729;
  float32x4_t v730;
  float32x4_t v731;
  uint64_t **v732;
  int v733;
  int v734;
  unsigned int v735;
  unsigned int v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  unsigned __int8 *v743;
  unsigned int v744;
  unint64_t v745;
  int v746;
  float v747;
  float32x4_t v748;
  float32x4_t v749;
  uint64_t **v750;
  int v751;
  unsigned int v752;
  unsigned int v753;
  unsigned int v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unint64_t v760;
  unsigned __int8 *v761;
  unsigned int v762;
  unint64_t v763;
  int v764;
  float v765;
  float32x4_t v766;
  float32x4_t v767;
  uint64_t **v768;
  int v769;
  unsigned int v770;
  unsigned int v771;
  unsigned int v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  unsigned __int8 *v779;
  unsigned int v780;
  unint64_t v781;
  int v782;
  float v783;
  float32x4_t v784;
  float32x4_t v785;
  uint64_t **v786;
  int v787;
  unsigned int v788;
  unsigned int v789;
  unsigned int v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  unsigned __int8 *v797;
  unsigned int v798;
  unint64_t v799;
  int v800;
  float v801;
  float32x4_t v802;
  float32x4_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  unsigned int v853;
  unsigned int v854;
  unsigned int v855;
  unsigned int v856;
  unsigned int v857;
  unsigned int v858;
  unsigned int v859;
  unsigned int v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  int v898;
  int v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  int v938;
  int v939;
  int v940;
  int v941;
  uint64_t v942;
  __int32 v943;

  v5 = a1;
  v7 = *a2;
  v6 = a2[1];
  v8 = v6 + 1;
  v9 = a2[2] + 1;
  v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v11 = v10[72];
  v12 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v13 = *v12;
  if ((v11 & 0x10000000) != 0)
    v14 = 0x40000000;
  else
    v14 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v15 = v14;
  else
    v15 = v11 & 0xCFFFFFFF;
  if ((v15 & 0x40000000) == 0)
  {
    if ((v15 & 0x80000000) != 0)
    {
      LOBYTE(v24) = -1;
      v25 = 2;
    }
    else
    {
      v16 = *(_QWORD *)(v13 + 2448);
      v17 = v16 + 520 * v15;
      v18 = *(_QWORD *)(v17 + 312);
      v19 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v17 + 336))
      {
        *(_BYTE *)(v17 + 336) = 0;
        v20 = *(unsigned int *)(v17 + 4);
        if ((_DWORD)v20)
        {
          v804 = v19;
          v809 = v18;
          v853 = v6 + 1;
          v898 = v9;
          v21 = 0;
          v22 = (unsigned __int8 *)(v16 + 520 * v15 + 36);
          do
          {
            v23 = *v22;
            v22 += 28;
            v21 = sub_223A4EC9C(v21, ((unint64_t)v23 << 8) | 1, 0xFFu);
            --v20;
          }
          while (v20);
          v24 = v21 >> 8;
          if (!(_BYTE)v21)
            LOBYTE(v24) = -1;
          v5 = a1;
          v9 = v898;
          v8 = v853;
          v19 = v804;
          v18 = v809;
        }
        else
        {
          LOBYTE(v24) = -1;
        }
        *(_BYTE *)(v16 + 520 * v15 + 338) = v24;
      }
      else
      {
        LOBYTE(v24) = *(_BYTE *)(v16 + 520 * v15 + 338);
      }
      v25 = v18 > v19;
    }
    v26 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v7));
    a4.f32[2] = (float)v9;
    v27.i64[0] = 0x3F0000003F000000;
    v27.i64[1] = 0x3F0000003F000000;
    v28 = vmulq_n_f32(vaddq_f32(a4, v27), v26);
    v943 = v28.i32[2];
    v942 = v28.i64[0];
    sub_223FFDF1C(v12[2], &v942, v24, v25, v26);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v29 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v29;
    v13 = **v29;
    v8 = v6 + 1;
    v9 = a2[2] + 1;
  }
  v30 = v10[73];
  if ((v30 & 0x10000000) != 0)
    v31 = 0x40000000;
  else
    v31 = 0x80000000;
  if ((v30 & 0x20000000) != 0)
    v32 = v31;
  else
    v32 = v30 & 0xCFFFFFFF;
  if ((v32 & 0x40000000) == 0)
  {
    v33 = v7 + 1;
    if ((v32 & 0x80000000) != 0)
    {
      LOBYTE(v42) = -1;
      v43 = 2;
    }
    else
    {
      v34 = *(_QWORD *)(v13 + 2448);
      v35 = v34 + 520 * v32;
      v36 = *(_QWORD *)(v35 + 312);
      v37 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v35 + 336))
      {
        *(_BYTE *)(v35 + 336) = 0;
        v38 = *(unsigned int *)(v35 + 4);
        if ((_DWORD)v38)
        {
          v805 = v37;
          v810 = v36;
          v854 = v8;
          v899 = v9;
          v39 = 0;
          v40 = (unsigned __int8 *)(v34 + 520 * v32 + 36);
          do
          {
            v41 = *v40;
            v40 += 28;
            v39 = sub_223A4EC9C(v39, ((unint64_t)v41 << 8) | 1, 0xFFu);
            --v38;
          }
          while (v38);
          v42 = v39 >> 8;
          if (!(_BYTE)v39)
            LOBYTE(v42) = -1;
          v5 = a1;
          v9 = v899;
          v8 = v854;
          v37 = v805;
          v36 = v810;
        }
        else
        {
          LOBYTE(v42) = -1;
        }
        *(_BYTE *)(v34 + 520 * v32 + 338) = v42;
      }
      else
      {
        LOBYTE(v42) = *(_BYTE *)(v34 + 520 * v32 + 338);
      }
      v43 = v36 > v37;
    }
    v44 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v33));
    a4.f32[2] = (float)v9;
    v45.i64[0] = 0x3F0000003F000000;
    v45.i64[1] = 0x3F0000003F000000;
    v46 = vmulq_n_f32(vaddq_f32(a4, v45), v44);
    v943 = v46.i32[2];
    v942 = v46.i64[0];
    sub_223FFDF1C(v12[2], &v942, v42, v43, v44);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v47 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v47;
    v13 = **v47;
    v8 = v6 + 1;
    v9 = a2[2] + 1;
  }
  v48 = v10[74];
  if ((v48 & 0x10000000) != 0)
    v49 = 0x40000000;
  else
    v49 = 0x80000000;
  if ((v48 & 0x20000000) != 0)
    v50 = v49;
  else
    v50 = v48 & 0xCFFFFFFF;
  if ((v50 & 0x40000000) == 0)
  {
    v51 = v7 + 2;
    if ((v50 & 0x80000000) != 0)
    {
      LOBYTE(v60) = -1;
      v61 = 2;
    }
    else
    {
      v52 = *(_QWORD *)(v13 + 2448);
      v53 = v52 + 520 * v50;
      v54 = *(_QWORD *)(v53 + 312);
      v55 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v53 + 336))
      {
        *(_BYTE *)(v53 + 336) = 0;
        v56 = *(unsigned int *)(v53 + 4);
        if ((_DWORD)v56)
        {
          v806 = v55;
          v811 = v54;
          v855 = v8;
          v900 = v9;
          v57 = 0;
          v58 = (unsigned __int8 *)(v52 + 520 * v50 + 36);
          do
          {
            v59 = *v58;
            v58 += 28;
            v57 = sub_223A4EC9C(v57, ((unint64_t)v59 << 8) | 1, 0xFFu);
            --v56;
          }
          while (v56);
          v60 = v57 >> 8;
          if (!(_BYTE)v57)
            LOBYTE(v60) = -1;
          v9 = v900;
          v8 = v855;
          v55 = v806;
          v54 = v811;
        }
        else
        {
          LOBYTE(v60) = -1;
        }
        *(_BYTE *)(v52 + 520 * v50 + 338) = v60;
      }
      else
      {
        LOBYTE(v60) = *(_BYTE *)(v52 + 520 * v50 + 338);
      }
      v61 = v54 > v55;
    }
    v62 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v51));
    a4.f32[2] = (float)v9;
    v63.i64[0] = 0x3F0000003F000000;
    v63.i64[1] = 0x3F0000003F000000;
    v64 = vmulq_n_f32(vaddq_f32(a4, v63), v62);
    v943 = v64.i32[2];
    v942 = v64.i64[0];
    sub_223FFDF1C(v12[2], &v942, v60, v61, v62);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v65 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v65;
    v13 = **v65;
    v8 = v6 + 1;
    v9 = a2[2] + 1;
  }
  v66 = v10[75];
  if ((v66 & 0x10000000) != 0)
    v67 = 0x40000000;
  else
    v67 = 0x80000000;
  if ((v66 & 0x20000000) != 0)
    v68 = v67;
  else
    v68 = v66 & 0xCFFFFFFF;
  if ((v68 & 0x40000000) == 0)
  {
    v69 = v7 + 3;
    if ((v68 & 0x80000000) != 0)
    {
      LOBYTE(v78) = -1;
      v79 = 2;
    }
    else
    {
      v70 = *(_QWORD *)(v13 + 2448);
      v71 = v70 + 520 * v68;
      v72 = *(_QWORD *)(v71 + 312);
      v73 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v71 + 336))
      {
        *(_BYTE *)(v71 + 336) = 0;
        v74 = *(unsigned int *)(v71 + 4);
        if ((_DWORD)v74)
        {
          v812 = v72;
          v856 = v8;
          v901 = v9;
          v75 = 0;
          v76 = (unsigned __int8 *)(v70 + 520 * v68 + 36);
          do
          {
            v77 = *v76;
            v76 += 28;
            v75 = sub_223A4EC9C(v75, ((unint64_t)v77 << 8) | 1, 0xFFu);
            --v74;
          }
          while (v74);
          v78 = v75 >> 8;
          if (!(_BYTE)v75)
            LOBYTE(v78) = -1;
          v9 = v901;
          v8 = v856;
          v72 = v812;
        }
        else
        {
          LOBYTE(v78) = -1;
        }
        *(_BYTE *)(v70 + 520 * v68 + 338) = v78;
      }
      else
      {
        LOBYTE(v78) = *(_BYTE *)(v70 + 520 * v68 + 338);
      }
      v79 = v72 > v73;
    }
    v80 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v69));
    a4.f32[2] = (float)v9;
    v81.i64[0] = 0x3F0000003F000000;
    v81.i64[1] = 0x3F0000003F000000;
    v82 = vmulq_n_f32(vaddq_f32(a4, v81), v80);
    v943 = v82.i32[2];
    v942 = v82.i64[0];
    sub_223FFDF1C(v12[2], &v942, v78, v79, v80);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v83 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v83;
    v13 = **v83;
    v8 = v6 + 1;
    v9 = a2[2] + 1;
  }
  v84 = v10[76];
  if ((v84 & 0x10000000) != 0)
    v85 = 0x40000000;
  else
    v85 = 0x80000000;
  if ((v84 & 0x20000000) != 0)
    v86 = v85;
  else
    v86 = v84 & 0xCFFFFFFF;
  if ((v86 & 0x40000000) == 0)
  {
    v87 = v7 + 4;
    if ((v86 & 0x80000000) != 0)
    {
      LOBYTE(v96) = -1;
      v97 = 2;
    }
    else
    {
      v88 = *(_QWORD *)(v13 + 2448);
      v89 = v88 + 520 * v86;
      v90 = *(_QWORD *)(v89 + 312);
      v91 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v89 + 336))
      {
        *(_BYTE *)(v89 + 336) = 0;
        v92 = *(unsigned int *)(v89 + 4);
        if ((_DWORD)v92)
        {
          v807 = v91;
          v813 = v90;
          v857 = v8;
          v902 = v9;
          v93 = 0;
          v94 = (unsigned __int8 *)(v88 + 520 * v86 + 36);
          do
          {
            v95 = *v94;
            v94 += 28;
            v93 = sub_223A4EC9C(v93, ((unint64_t)v95 << 8) | 1, 0xFFu);
            --v92;
          }
          while (v92);
          v96 = v93 >> 8;
          if (!(_BYTE)v93)
            LOBYTE(v96) = -1;
          v9 = v902;
          v8 = v857;
          v91 = v807;
          v90 = v813;
        }
        else
        {
          LOBYTE(v96) = -1;
        }
        *(_BYTE *)(v88 + 520 * v86 + 338) = v96;
      }
      else
      {
        LOBYTE(v96) = *(_BYTE *)(v88 + 520 * v86 + 338);
      }
      v97 = v90 > v91;
    }
    v98 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v87));
    a4.f32[2] = (float)v9;
    v99.i64[0] = 0x3F0000003F000000;
    v99.i64[1] = 0x3F0000003F000000;
    v100 = vmulq_n_f32(vaddq_f32(a4, v99), v98);
    v943 = v100.i32[2];
    v942 = v100.i64[0];
    sub_223FFDF1C(v12[2], &v942, v96, v97, v98);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v101 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v101;
    v13 = **v101;
    v8 = v6 + 1;
    v9 = a2[2] + 1;
  }
  v102 = v10[77];
  if ((v102 & 0x10000000) != 0)
    v103 = 0x40000000;
  else
    v103 = 0x80000000;
  if ((v102 & 0x20000000) != 0)
    v104 = v103;
  else
    v104 = v102 & 0xCFFFFFFF;
  if ((v104 & 0x40000000) == 0)
  {
    v105 = v7 + 5;
    if ((v104 & 0x80000000) != 0)
    {
      LOBYTE(v114) = -1;
      v115 = 2;
    }
    else
    {
      v106 = *(_QWORD *)(v13 + 2448);
      v107 = v106 + 520 * v104;
      v108 = *(_QWORD *)(v107 + 312);
      v109 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v107 + 336))
      {
        *(_BYTE *)(v107 + 336) = 0;
        v110 = *(unsigned int *)(v107 + 4);
        if ((_DWORD)v110)
        {
          v814 = v108;
          v858 = v8;
          v903 = v9;
          v111 = 0;
          v112 = (unsigned __int8 *)(v106 + 520 * v104 + 36);
          do
          {
            v113 = *v112;
            v112 += 28;
            v111 = sub_223A4EC9C(v111, ((unint64_t)v113 << 8) | 1, 0xFFu);
            --v110;
          }
          while (v110);
          v114 = v111 >> 8;
          if (!(_BYTE)v111)
            LOBYTE(v114) = -1;
          v9 = v903;
          v8 = v858;
          v108 = v814;
        }
        else
        {
          LOBYTE(v114) = -1;
        }
        *(_BYTE *)(v106 + 520 * v104 + 338) = v114;
      }
      else
      {
        LOBYTE(v114) = *(_BYTE *)(v106 + 520 * v104 + 338);
      }
      v115 = v108 > v109;
    }
    v116 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v105));
    a4.f32[2] = (float)v9;
    v117.i64[0] = 0x3F0000003F000000;
    v117.i64[1] = 0x3F0000003F000000;
    v118 = vmulq_n_f32(vaddq_f32(a4, v117), v116);
    v943 = v118.i32[2];
    v942 = v118.i64[0];
    sub_223FFDF1C(v12[2], &v942, v114, v115, v116);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v119 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v119;
    v13 = **v119;
    v8 = v6 + 1;
    v9 = a2[2] + 1;
  }
  v120 = v10[78];
  if ((v120 & 0x10000000) != 0)
    v121 = 0x40000000;
  else
    v121 = 0x80000000;
  if ((v120 & 0x20000000) != 0)
    v122 = v121;
  else
    v122 = v120 & 0xCFFFFFFF;
  if ((v122 & 0x40000000) == 0)
  {
    v123 = v7 + 6;
    if ((v122 & 0x80000000) != 0)
    {
      LOBYTE(v132) = -1;
      v133 = 2;
    }
    else
    {
      v124 = *(_QWORD *)(v13 + 2448);
      v125 = v124 + 520 * v122;
      v126 = *(_QWORD *)(v125 + 312);
      v127 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v125 + 336))
      {
        *(_BYTE *)(v125 + 336) = 0;
        v128 = *(unsigned int *)(v125 + 4);
        if ((_DWORD)v128)
        {
          v808 = v127;
          v815 = v126;
          v859 = v8;
          v904 = v9;
          v129 = 0;
          v130 = (unsigned __int8 *)(v124 + 520 * v122 + 36);
          do
          {
            v131 = *v130;
            v130 += 28;
            v129 = sub_223A4EC9C(v129, ((unint64_t)v131 << 8) | 1, 0xFFu);
            --v128;
          }
          while (v128);
          v132 = v129 >> 8;
          if (!(_BYTE)v129)
            LOBYTE(v132) = -1;
          v9 = v904;
          v8 = v859;
          v127 = v808;
          v126 = v815;
        }
        else
        {
          LOBYTE(v132) = -1;
        }
        *(_BYTE *)(v124 + 520 * v122 + 338) = v132;
      }
      else
      {
        LOBYTE(v132) = *(_BYTE *)(v124 + 520 * v122 + 338);
      }
      v133 = v126 > v127;
    }
    v134 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v123));
    a4.f32[2] = (float)v9;
    v135.i64[0] = 0x3F0000003F000000;
    v135.i64[1] = 0x3F0000003F000000;
    v136 = vmulq_n_f32(vaddq_f32(a4, v135), v134);
    v943 = v136.i32[2];
    v942 = v136.i64[0];
    sub_223FFDF1C(v12[2], &v942, v132, v133, v134);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v137 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v137;
    v13 = **v137;
    v8 = v6 + 1;
    v9 = a2[2] + 1;
  }
  v138 = v10[79];
  if ((v138 & 0x10000000) != 0)
    v139 = 0x40000000;
  else
    v139 = 0x80000000;
  if ((v138 & 0x20000000) != 0)
    v140 = v139;
  else
    v140 = v138 & 0xCFFFFFFF;
  if ((v140 & 0x40000000) != 0)
  {
    v151 = a1;
  }
  else
  {
    v141 = v7 + 7;
    if ((v140 & 0x80000000) != 0)
    {
      LOBYTE(v150) = -1;
      v152 = 2;
    }
    else
    {
      v142 = *(_QWORD *)(v13 + 2448);
      v143 = v142 + 520 * v140;
      v144 = *(_QWORD *)(v143 + 312);
      v145 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v143 + 336))
      {
        *(_BYTE *)(v143 + 336) = 0;
        v146 = *(unsigned int *)(v143 + 4);
        if ((_DWORD)v146)
        {
          v816 = v144;
          v860 = v8;
          v905 = v9;
          v147 = 0;
          v148 = (unsigned __int8 *)(v142 + 520 * v140 + 36);
          do
          {
            v149 = *v148;
            v148 += 28;
            v147 = sub_223A4EC9C(v147, ((unint64_t)v149 << 8) | 1, 0xFFu);
            --v146;
          }
          while (v146);
          v150 = v147 >> 8;
          if (!(_BYTE)v147)
            LOBYTE(v150) = -1;
          v9 = v905;
          v8 = v860;
          v144 = v816;
        }
        else
        {
          LOBYTE(v150) = -1;
        }
        *(_BYTE *)(v142 + 520 * v140 + 338) = v150;
      }
      else
      {
        LOBYTE(v150) = *(_BYTE *)(v142 + 520 * v140 + 338);
      }
      v152 = v144 > v145;
    }
    v153 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v141));
    a4.f32[2] = (float)v9;
    v154.i64[0] = 0x3F0000003F000000;
    v154.i64[1] = 0x3F0000003F000000;
    v155 = vmulq_n_f32(vaddq_f32(a4, v154), v153);
    v943 = v155.i32[2];
    v942 = v155.i64[0];
    sub_223FFDF1C(v12[2], &v942, v150, v152, v153);
    v151 = a1;
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v156 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v156;
    v13 = **v156;
    v9 = a2[2] + 1;
  }
  v157 = v6 + 2;
  v158 = v10[80];
  if ((v158 & 0x10000000) != 0)
    v159 = 0x40000000;
  else
    v159 = 0x80000000;
  if ((v158 & 0x20000000) != 0)
    v160 = v159;
  else
    v160 = v158 & 0xCFFFFFFF;
  if ((v160 & 0x40000000) == 0)
  {
    if ((v160 & 0x80000000) != 0)
    {
      LOBYTE(v169) = -1;
      v170 = 2;
    }
    else
    {
      v161 = *(_QWORD *)(v13 + 2448);
      v162 = v161 + 520 * v160;
      v163 = *(_QWORD *)(v162 + 312);
      v164 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v162 + 336))
      {
        *(_BYTE *)(v162 + 336) = 0;
        v165 = *(unsigned int *)(v162 + 4);
        if ((_DWORD)v165)
        {
          v817 = v164;
          v861 = v163;
          v906 = v9;
          v166 = 0;
          v167 = (unsigned __int8 *)(v161 + 520 * v160 + 36);
          do
          {
            v168 = *v167;
            v167 += 28;
            v166 = sub_223A4EC9C(v166, ((unint64_t)v168 << 8) | 1, 0xFFu);
            --v165;
          }
          while (v165);
          v169 = v166 >> 8;
          if (!(_BYTE)v166)
            LOBYTE(v169) = -1;
          v163 = v861;
          v151 = a1;
          v9 = v906;
          v164 = v817;
        }
        else
        {
          LOBYTE(v169) = -1;
        }
        *(_BYTE *)(v161 + 520 * v160 + 338) = v169;
      }
      else
      {
        LOBYTE(v169) = *(_BYTE *)(v161 + 520 * v160 + 338);
      }
      v170 = v163 > v164;
    }
    v171 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v7));
    a4.f32[2] = (float)v9;
    v172.i64[0] = 0x3F0000003F000000;
    v172.i64[1] = 0x3F0000003F000000;
    v173 = vmulq_n_f32(vaddq_f32(a4, v172), v171);
    v943 = v173.i32[2];
    v942 = v173.i64[0];
    sub_223FFDF1C(v12[2], &v942, v169, v170, v171);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v174 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v174;
    v13 = **v174;
    v157 = v6 + 2;
    v9 = a2[2] + 1;
  }
  v175 = v10[81];
  if ((v175 & 0x10000000) != 0)
    v176 = 0x40000000;
  else
    v176 = 0x80000000;
  if ((v175 & 0x20000000) != 0)
    v177 = v176;
  else
    v177 = v175 & 0xCFFFFFFF;
  if ((v177 & 0x40000000) == 0)
  {
    v178 = v7 + 1;
    if ((v177 & 0x80000000) != 0)
    {
      LOBYTE(v187) = -1;
      v188 = 2;
    }
    else
    {
      v179 = *(_QWORD *)(v13 + 2448);
      v180 = v179 + 520 * v177;
      v181 = *(_QWORD *)(v180 + 312);
      v182 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v180 + 336))
      {
        *(_BYTE *)(v180 + 336) = 0;
        v183 = *(unsigned int *)(v180 + 4);
        if ((_DWORD)v183)
        {
          v818 = v182;
          v862 = v181;
          v907 = v9;
          v184 = 0;
          v185 = (unsigned __int8 *)(v179 + 520 * v177 + 36);
          do
          {
            v186 = *v185;
            v185 += 28;
            v184 = sub_223A4EC9C(v184, ((unint64_t)v186 << 8) | 1, 0xFFu);
            --v183;
          }
          while (v183);
          v187 = v184 >> 8;
          if (!(_BYTE)v184)
            LOBYTE(v187) = -1;
          v181 = v862;
          v151 = a1;
          v9 = v907;
          v182 = v818;
        }
        else
        {
          LOBYTE(v187) = -1;
        }
        *(_BYTE *)(v179 + 520 * v177 + 338) = v187;
      }
      else
      {
        LOBYTE(v187) = *(_BYTE *)(v179 + 520 * v177 + 338);
      }
      v188 = v181 > v182;
    }
    v189 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v178));
    a4.f32[2] = (float)v9;
    v190.i64[0] = 0x3F0000003F000000;
    v190.i64[1] = 0x3F0000003F000000;
    v191 = vmulq_n_f32(vaddq_f32(a4, v190), v189);
    v943 = v191.i32[2];
    v942 = v191.i64[0];
    sub_223FFDF1C(v12[2], &v942, v187, v188, v189);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v192 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v192;
    v13 = **v192;
    v157 = v6 + 2;
    v9 = a2[2] + 1;
  }
  v193 = v10[82];
  if ((v193 & 0x10000000) != 0)
    v194 = 0x40000000;
  else
    v194 = 0x80000000;
  if ((v193 & 0x20000000) != 0)
    v195 = v194;
  else
    v195 = v193 & 0xCFFFFFFF;
  if ((v195 & 0x40000000) == 0)
  {
    v196 = v7 + 2;
    if ((v195 & 0x80000000) != 0)
    {
      LOBYTE(v205) = -1;
      v206 = 2;
    }
    else
    {
      v197 = *(_QWORD *)(v13 + 2448);
      v198 = v197 + 520 * v195;
      v199 = *(_QWORD *)(v198 + 312);
      v200 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v198 + 336))
      {
        *(_BYTE *)(v198 + 336) = 0;
        v201 = *(unsigned int *)(v198 + 4);
        if ((_DWORD)v201)
        {
          v819 = v200;
          v863 = v199;
          v908 = v9;
          v202 = 0;
          v203 = (unsigned __int8 *)(v197 + 520 * v195 + 36);
          do
          {
            v204 = *v203;
            v203 += 28;
            v202 = sub_223A4EC9C(v202, ((unint64_t)v204 << 8) | 1, 0xFFu);
            --v201;
          }
          while (v201);
          v205 = v202 >> 8;
          if (!(_BYTE)v202)
            LOBYTE(v205) = -1;
          v199 = v863;
          v151 = a1;
          v9 = v908;
          v200 = v819;
        }
        else
        {
          LOBYTE(v205) = -1;
        }
        *(_BYTE *)(v197 + 520 * v195 + 338) = v205;
      }
      else
      {
        LOBYTE(v205) = *(_BYTE *)(v197 + 520 * v195 + 338);
      }
      v206 = v199 > v200;
    }
    v207 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v196));
    a4.f32[2] = (float)v9;
    v208.i64[0] = 0x3F0000003F000000;
    v208.i64[1] = 0x3F0000003F000000;
    v209 = vmulq_n_f32(vaddq_f32(a4, v208), v207);
    v943 = v209.i32[2];
    v942 = v209.i64[0];
    sub_223FFDF1C(v12[2], &v942, v205, v206, v207);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v210 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v210;
    v13 = **v210;
    v157 = v6 + 2;
    v9 = a2[2] + 1;
  }
  v211 = v10[83];
  if ((v211 & 0x10000000) != 0)
    v212 = 0x40000000;
  else
    v212 = 0x80000000;
  if ((v211 & 0x20000000) != 0)
    v213 = v212;
  else
    v213 = v211 & 0xCFFFFFFF;
  if ((v213 & 0x40000000) == 0)
  {
    v214 = v7 + 3;
    if ((v213 & 0x80000000) != 0)
    {
      LOBYTE(v223) = -1;
      v224 = 2;
    }
    else
    {
      v215 = *(_QWORD *)(v13 + 2448);
      v216 = v215 + 520 * v213;
      v217 = *(_QWORD *)(v216 + 312);
      v218 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v216 + 336))
      {
        *(_BYTE *)(v216 + 336) = 0;
        v219 = *(unsigned int *)(v216 + 4);
        if ((_DWORD)v219)
        {
          v820 = v218;
          v864 = v217;
          v909 = v9;
          v220 = 0;
          v221 = (unsigned __int8 *)(v215 + 520 * v213 + 36);
          do
          {
            v222 = *v221;
            v221 += 28;
            v220 = sub_223A4EC9C(v220, ((unint64_t)v222 << 8) | 1, 0xFFu);
            --v219;
          }
          while (v219);
          v223 = v220 >> 8;
          if (!(_BYTE)v220)
            LOBYTE(v223) = -1;
          v217 = v864;
          v151 = a1;
          v9 = v909;
          v218 = v820;
        }
        else
        {
          LOBYTE(v223) = -1;
        }
        *(_BYTE *)(v215 + 520 * v213 + 338) = v223;
      }
      else
      {
        LOBYTE(v223) = *(_BYTE *)(v215 + 520 * v213 + 338);
      }
      v224 = v217 > v218;
    }
    v225 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v214));
    a4.f32[2] = (float)v9;
    v226.i64[0] = 0x3F0000003F000000;
    v226.i64[1] = 0x3F0000003F000000;
    v227 = vmulq_n_f32(vaddq_f32(a4, v226), v225);
    v943 = v227.i32[2];
    v942 = v227.i64[0];
    sub_223FFDF1C(v12[2], &v942, v223, v224, v225);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v228 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v228;
    v13 = **v228;
    v157 = v6 + 2;
    v9 = a2[2] + 1;
  }
  v229 = v10[84];
  if ((v229 & 0x10000000) != 0)
    v230 = 0x40000000;
  else
    v230 = 0x80000000;
  if ((v229 & 0x20000000) != 0)
    v231 = v230;
  else
    v231 = v229 & 0xCFFFFFFF;
  if ((v231 & 0x40000000) == 0)
  {
    v232 = v7 + 4;
    if ((v231 & 0x80000000) != 0)
    {
      LOBYTE(v241) = -1;
      v242 = 2;
    }
    else
    {
      v233 = *(_QWORD *)(v13 + 2448);
      v234 = v233 + 520 * v231;
      v235 = *(_QWORD *)(v234 + 312);
      v236 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v234 + 336))
      {
        *(_BYTE *)(v234 + 336) = 0;
        v237 = *(unsigned int *)(v234 + 4);
        if ((_DWORD)v237)
        {
          v821 = v236;
          v865 = v235;
          v910 = v9;
          v238 = 0;
          v239 = (unsigned __int8 *)(v233 + 520 * v231 + 36);
          do
          {
            v240 = *v239;
            v239 += 28;
            v238 = sub_223A4EC9C(v238, ((unint64_t)v240 << 8) | 1, 0xFFu);
            --v237;
          }
          while (v237);
          v241 = v238 >> 8;
          if (!(_BYTE)v238)
            LOBYTE(v241) = -1;
          v235 = v865;
          v151 = a1;
          v9 = v910;
          v236 = v821;
        }
        else
        {
          LOBYTE(v241) = -1;
        }
        *(_BYTE *)(v233 + 520 * v231 + 338) = v241;
      }
      else
      {
        LOBYTE(v241) = *(_BYTE *)(v233 + 520 * v231 + 338);
      }
      v242 = v235 > v236;
    }
    v243 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v232));
    a4.f32[2] = (float)v9;
    v244.i64[0] = 0x3F0000003F000000;
    v244.i64[1] = 0x3F0000003F000000;
    v245 = vmulq_n_f32(vaddq_f32(a4, v244), v243);
    v943 = v245.i32[2];
    v942 = v245.i64[0];
    sub_223FFDF1C(v12[2], &v942, v241, v242, v243);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v246 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v246;
    v13 = **v246;
    v157 = v6 + 2;
    v9 = a2[2] + 1;
  }
  v247 = v10[85];
  if ((v247 & 0x10000000) != 0)
    v248 = 0x40000000;
  else
    v248 = 0x80000000;
  if ((v247 & 0x20000000) != 0)
    v249 = v248;
  else
    v249 = v247 & 0xCFFFFFFF;
  if ((v249 & 0x40000000) == 0)
  {
    v250 = v7 + 5;
    if ((v249 & 0x80000000) != 0)
    {
      LOBYTE(v259) = -1;
      v260 = 2;
    }
    else
    {
      v251 = *(_QWORD *)(v13 + 2448);
      v252 = v251 + 520 * v249;
      v253 = *(_QWORD *)(v252 + 312);
      v254 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v252 + 336))
      {
        *(_BYTE *)(v252 + 336) = 0;
        v255 = *(unsigned int *)(v252 + 4);
        if ((_DWORD)v255)
        {
          v822 = v254;
          v866 = v253;
          v911 = v9;
          v256 = 0;
          v257 = (unsigned __int8 *)(v251 + 520 * v249 + 36);
          do
          {
            v258 = *v257;
            v257 += 28;
            v256 = sub_223A4EC9C(v256, ((unint64_t)v258 << 8) | 1, 0xFFu);
            --v255;
          }
          while (v255);
          v259 = v256 >> 8;
          if (!(_BYTE)v256)
            LOBYTE(v259) = -1;
          v253 = v866;
          v151 = a1;
          v9 = v911;
          v254 = v822;
        }
        else
        {
          LOBYTE(v259) = -1;
        }
        *(_BYTE *)(v251 + 520 * v249 + 338) = v259;
      }
      else
      {
        LOBYTE(v259) = *(_BYTE *)(v251 + 520 * v249 + 338);
      }
      v260 = v253 > v254;
    }
    v261 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v250));
    a4.f32[2] = (float)v9;
    v262.i64[0] = 0x3F0000003F000000;
    v262.i64[1] = 0x3F0000003F000000;
    v263 = vmulq_n_f32(vaddq_f32(a4, v262), v261);
    v943 = v263.i32[2];
    v942 = v263.i64[0];
    sub_223FFDF1C(v12[2], &v942, v259, v260, v261);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v264 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v264;
    v13 = **v264;
    v157 = v6 + 2;
    v9 = a2[2] + 1;
  }
  v265 = v10[86];
  if ((v265 & 0x10000000) != 0)
    v266 = 0x40000000;
  else
    v266 = 0x80000000;
  if ((v265 & 0x20000000) != 0)
    v267 = v266;
  else
    v267 = v265 & 0xCFFFFFFF;
  if ((v267 & 0x40000000) == 0)
  {
    v268 = v7 + 6;
    if ((v267 & 0x80000000) != 0)
    {
      LOBYTE(v277) = -1;
      v278 = 2;
    }
    else
    {
      v269 = *(_QWORD *)(v13 + 2448);
      v270 = v269 + 520 * v267;
      v271 = *(_QWORD *)(v270 + 312);
      v272 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v270 + 336))
      {
        *(_BYTE *)(v270 + 336) = 0;
        v273 = *(unsigned int *)(v270 + 4);
        if ((_DWORD)v273)
        {
          v823 = v272;
          v867 = v271;
          v912 = v9;
          v274 = 0;
          v275 = (unsigned __int8 *)(v269 + 520 * v267 + 36);
          do
          {
            v276 = *v275;
            v275 += 28;
            v274 = sub_223A4EC9C(v274, ((unint64_t)v276 << 8) | 1, 0xFFu);
            --v273;
          }
          while (v273);
          v277 = v274 >> 8;
          if (!(_BYTE)v274)
            LOBYTE(v277) = -1;
          v271 = v867;
          v151 = a1;
          v9 = v912;
          v272 = v823;
        }
        else
        {
          LOBYTE(v277) = -1;
        }
        *(_BYTE *)(v269 + 520 * v267 + 338) = v277;
      }
      else
      {
        LOBYTE(v277) = *(_BYTE *)(v269 + 520 * v267 + 338);
      }
      v278 = v271 > v272;
    }
    v279 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v268));
    a4.f32[2] = (float)v9;
    v280.i64[0] = 0x3F0000003F000000;
    v280.i64[1] = 0x3F0000003F000000;
    v281 = vmulq_n_f32(vaddq_f32(a4, v280), v279);
    v943 = v281.i32[2];
    v942 = v281.i64[0];
    sub_223FFDF1C(v12[2], &v942, v277, v278, v279);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v282 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v282;
    v13 = **v282;
    v157 = v6 + 2;
    v9 = a2[2] + 1;
  }
  v283 = v10[87];
  if ((v283 & 0x10000000) != 0)
    v284 = 0x40000000;
  else
    v284 = 0x80000000;
  if ((v283 & 0x20000000) != 0)
    v285 = v284;
  else
    v285 = v283 & 0xCFFFFFFF;
  if ((v285 & 0x40000000) == 0)
  {
    v286 = v7 + 7;
    if ((v285 & 0x80000000) != 0)
    {
      LOBYTE(v295) = -1;
      v296 = 2;
    }
    else
    {
      v287 = *(_QWORD *)(v13 + 2448);
      v288 = v287 + 520 * v285;
      v289 = *(_QWORD *)(v288 + 312);
      v290 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v288 + 336))
      {
        *(_BYTE *)(v288 + 336) = 0;
        v291 = *(unsigned int *)(v288 + 4);
        if ((_DWORD)v291)
        {
          v824 = v290;
          v868 = v289;
          v913 = v9;
          v292 = 0;
          v293 = (unsigned __int8 *)(v287 + 520 * v285 + 36);
          do
          {
            v294 = *v293;
            v293 += 28;
            v292 = sub_223A4EC9C(v292, ((unint64_t)v294 << 8) | 1, 0xFFu);
            --v291;
          }
          while (v291);
          v295 = v292 >> 8;
          if (!(_BYTE)v292)
            LOBYTE(v295) = -1;
          v289 = v868;
          v151 = a1;
          v9 = v913;
          v290 = v824;
        }
        else
        {
          LOBYTE(v295) = -1;
        }
        *(_BYTE *)(v287 + 520 * v285 + 338) = v295;
      }
      else
      {
        LOBYTE(v295) = *(_BYTE *)(v287 + 520 * v285 + 338);
      }
      v296 = v289 > v290;
    }
    v297 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v286));
    a4.f32[2] = (float)v9;
    v298.i64[0] = 0x3F0000003F000000;
    v298.i64[1] = 0x3F0000003F000000;
    v299 = vmulq_n_f32(vaddq_f32(a4, v298), v297);
    v943 = v299.i32[2];
    v942 = v299.i64[0];
    sub_223FFDF1C(v12[2], &v942, v295, v296, v297);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v300 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v300;
    v13 = **v300;
    v9 = a2[2] + 1;
  }
  v301 = v6 + 3;
  v302 = v10[88];
  if ((v302 & 0x10000000) != 0)
    v303 = 0x40000000;
  else
    v303 = 0x80000000;
  if ((v302 & 0x20000000) != 0)
    v304 = v303;
  else
    v304 = v302 & 0xCFFFFFFF;
  if ((v304 & 0x40000000) == 0)
  {
    if ((v304 & 0x80000000) != 0)
    {
      LOBYTE(v313) = -1;
      v314 = 2;
    }
    else
    {
      v305 = *(_QWORD *)(v13 + 2448);
      v306 = v305 + 520 * v304;
      v307 = *(_QWORD *)(v306 + 312);
      v308 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v306 + 336))
      {
        *(_BYTE *)(v306 + 336) = 0;
        v309 = *(unsigned int *)(v306 + 4);
        if ((_DWORD)v309)
        {
          v825 = v308;
          v869 = v307;
          v914 = v9;
          v310 = 0;
          v311 = (unsigned __int8 *)(v305 + 520 * v304 + 36);
          do
          {
            v312 = *v311;
            v311 += 28;
            v310 = sub_223A4EC9C(v310, ((unint64_t)v312 << 8) | 1, 0xFFu);
            --v309;
          }
          while (v309);
          v313 = v310 >> 8;
          if (!(_BYTE)v310)
            LOBYTE(v313) = -1;
          v307 = v869;
          v151 = a1;
          v9 = v914;
          v308 = v825;
        }
        else
        {
          LOBYTE(v313) = -1;
        }
        *(_BYTE *)(v305 + 520 * v304 + 338) = v313;
      }
      else
      {
        LOBYTE(v313) = *(_BYTE *)(v305 + 520 * v304 + 338);
      }
      v314 = v307 > v308;
    }
    v315 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v7));
    a4.f32[2] = (float)v9;
    v316.i64[0] = 0x3F0000003F000000;
    v316.i64[1] = 0x3F0000003F000000;
    v317 = vmulq_n_f32(vaddq_f32(a4, v316), v315);
    v943 = v317.i32[2];
    v942 = v317.i64[0];
    sub_223FFDF1C(v12[2], &v942, v313, v314, v315);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v318 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v318;
    v13 = **v318;
    v301 = v6 + 3;
    v9 = a2[2] + 1;
  }
  v319 = v10[89];
  if ((v319 & 0x10000000) != 0)
    v320 = 0x40000000;
  else
    v320 = 0x80000000;
  if ((v319 & 0x20000000) != 0)
    v321 = v320;
  else
    v321 = v319 & 0xCFFFFFFF;
  if ((v321 & 0x40000000) == 0)
  {
    v322 = v7 + 1;
    if ((v321 & 0x80000000) != 0)
    {
      LOBYTE(v331) = -1;
      v332 = 2;
    }
    else
    {
      v323 = *(_QWORD *)(v13 + 2448);
      v324 = v323 + 520 * v321;
      v325 = *(_QWORD *)(v324 + 312);
      v326 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v324 + 336))
      {
        *(_BYTE *)(v324 + 336) = 0;
        v327 = *(unsigned int *)(v324 + 4);
        if ((_DWORD)v327)
        {
          v826 = v326;
          v870 = v325;
          v915 = v9;
          v328 = 0;
          v329 = (unsigned __int8 *)(v323 + 520 * v321 + 36);
          do
          {
            v330 = *v329;
            v329 += 28;
            v328 = sub_223A4EC9C(v328, ((unint64_t)v330 << 8) | 1, 0xFFu);
            --v327;
          }
          while (v327);
          v331 = v328 >> 8;
          if (!(_BYTE)v328)
            LOBYTE(v331) = -1;
          v325 = v870;
          v151 = a1;
          v9 = v915;
          v326 = v826;
        }
        else
        {
          LOBYTE(v331) = -1;
        }
        *(_BYTE *)(v323 + 520 * v321 + 338) = v331;
      }
      else
      {
        LOBYTE(v331) = *(_BYTE *)(v323 + 520 * v321 + 338);
      }
      v332 = v325 > v326;
    }
    v333 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v322));
    a4.f32[2] = (float)v9;
    v334.i64[0] = 0x3F0000003F000000;
    v334.i64[1] = 0x3F0000003F000000;
    v335 = vmulq_n_f32(vaddq_f32(a4, v334), v333);
    v943 = v335.i32[2];
    v942 = v335.i64[0];
    sub_223FFDF1C(v12[2], &v942, v331, v332, v333);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v336 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v336;
    v13 = **v336;
    v301 = v6 + 3;
    v9 = a2[2] + 1;
  }
  v337 = v10[90];
  if ((v337 & 0x10000000) != 0)
    v338 = 0x40000000;
  else
    v338 = 0x80000000;
  if ((v337 & 0x20000000) != 0)
    v339 = v338;
  else
    v339 = v337 & 0xCFFFFFFF;
  if ((v339 & 0x40000000) == 0)
  {
    v340 = v7 + 2;
    if ((v339 & 0x80000000) != 0)
    {
      LOBYTE(v349) = -1;
      v350 = 2;
    }
    else
    {
      v341 = *(_QWORD *)(v13 + 2448);
      v342 = v341 + 520 * v339;
      v343 = *(_QWORD *)(v342 + 312);
      v344 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v342 + 336))
      {
        *(_BYTE *)(v342 + 336) = 0;
        v345 = *(unsigned int *)(v342 + 4);
        if ((_DWORD)v345)
        {
          v827 = v344;
          v871 = v343;
          v916 = v9;
          v346 = 0;
          v347 = (unsigned __int8 *)(v341 + 520 * v339 + 36);
          do
          {
            v348 = *v347;
            v347 += 28;
            v346 = sub_223A4EC9C(v346, ((unint64_t)v348 << 8) | 1, 0xFFu);
            --v345;
          }
          while (v345);
          v349 = v346 >> 8;
          if (!(_BYTE)v346)
            LOBYTE(v349) = -1;
          v343 = v871;
          v151 = a1;
          v9 = v916;
          v344 = v827;
        }
        else
        {
          LOBYTE(v349) = -1;
        }
        *(_BYTE *)(v341 + 520 * v339 + 338) = v349;
      }
      else
      {
        LOBYTE(v349) = *(_BYTE *)(v341 + 520 * v339 + 338);
      }
      v350 = v343 > v344;
    }
    v351 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v340));
    a4.f32[2] = (float)v9;
    v352.i64[0] = 0x3F0000003F000000;
    v352.i64[1] = 0x3F0000003F000000;
    v353 = vmulq_n_f32(vaddq_f32(a4, v352), v351);
    v943 = v353.i32[2];
    v942 = v353.i64[0];
    sub_223FFDF1C(v12[2], &v942, v349, v350, v351);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v354 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v354;
    v13 = **v354;
    v301 = v6 + 3;
    v9 = a2[2] + 1;
  }
  v355 = v10[91];
  if ((v355 & 0x10000000) != 0)
    v356 = 0x40000000;
  else
    v356 = 0x80000000;
  if ((v355 & 0x20000000) != 0)
    v357 = v356;
  else
    v357 = v355 & 0xCFFFFFFF;
  if ((v357 & 0x40000000) == 0)
  {
    v358 = v7 + 3;
    if ((v357 & 0x80000000) != 0)
    {
      LOBYTE(v367) = -1;
      v368 = 2;
    }
    else
    {
      v359 = *(_QWORD *)(v13 + 2448);
      v360 = v359 + 520 * v357;
      v361 = *(_QWORD *)(v360 + 312);
      v362 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v360 + 336))
      {
        *(_BYTE *)(v360 + 336) = 0;
        v363 = *(unsigned int *)(v360 + 4);
        if ((_DWORD)v363)
        {
          v828 = v362;
          v872 = v361;
          v917 = v9;
          v364 = 0;
          v365 = (unsigned __int8 *)(v359 + 520 * v357 + 36);
          do
          {
            v366 = *v365;
            v365 += 28;
            v364 = sub_223A4EC9C(v364, ((unint64_t)v366 << 8) | 1, 0xFFu);
            --v363;
          }
          while (v363);
          v367 = v364 >> 8;
          if (!(_BYTE)v364)
            LOBYTE(v367) = -1;
          v361 = v872;
          v151 = a1;
          v9 = v917;
          v362 = v828;
        }
        else
        {
          LOBYTE(v367) = -1;
        }
        *(_BYTE *)(v359 + 520 * v357 + 338) = v367;
      }
      else
      {
        LOBYTE(v367) = *(_BYTE *)(v359 + 520 * v357 + 338);
      }
      v368 = v361 > v362;
    }
    v369 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v358));
    a4.f32[2] = (float)v9;
    v370.i64[0] = 0x3F0000003F000000;
    v370.i64[1] = 0x3F0000003F000000;
    v371 = vmulq_n_f32(vaddq_f32(a4, v370), v369);
    v943 = v371.i32[2];
    v942 = v371.i64[0];
    sub_223FFDF1C(v12[2], &v942, v367, v368, v369);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v372 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v372;
    v13 = **v372;
    v301 = v6 + 3;
    v9 = a2[2] + 1;
  }
  v373 = v10[92];
  if ((v373 & 0x10000000) != 0)
    v374 = 0x40000000;
  else
    v374 = 0x80000000;
  if ((v373 & 0x20000000) != 0)
    v375 = v374;
  else
    v375 = v373 & 0xCFFFFFFF;
  if ((v375 & 0x40000000) == 0)
  {
    v376 = v7 + 4;
    if ((v375 & 0x80000000) != 0)
    {
      LOBYTE(v385) = -1;
      v386 = 2;
    }
    else
    {
      v377 = *(_QWORD *)(v13 + 2448);
      v378 = v377 + 520 * v375;
      v379 = *(_QWORD *)(v378 + 312);
      v380 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v378 + 336))
      {
        *(_BYTE *)(v378 + 336) = 0;
        v381 = *(unsigned int *)(v378 + 4);
        if ((_DWORD)v381)
        {
          v829 = v380;
          v873 = v379;
          v918 = v9;
          v382 = 0;
          v383 = (unsigned __int8 *)(v377 + 520 * v375 + 36);
          do
          {
            v384 = *v383;
            v383 += 28;
            v382 = sub_223A4EC9C(v382, ((unint64_t)v384 << 8) | 1, 0xFFu);
            --v381;
          }
          while (v381);
          v385 = v382 >> 8;
          if (!(_BYTE)v382)
            LOBYTE(v385) = -1;
          v379 = v873;
          v151 = a1;
          v9 = v918;
          v380 = v829;
        }
        else
        {
          LOBYTE(v385) = -1;
        }
        *(_BYTE *)(v377 + 520 * v375 + 338) = v385;
      }
      else
      {
        LOBYTE(v385) = *(_BYTE *)(v377 + 520 * v375 + 338);
      }
      v386 = v379 > v380;
    }
    v387 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v376));
    a4.f32[2] = (float)v9;
    v388.i64[0] = 0x3F0000003F000000;
    v388.i64[1] = 0x3F0000003F000000;
    v389 = vmulq_n_f32(vaddq_f32(a4, v388), v387);
    v943 = v389.i32[2];
    v942 = v389.i64[0];
    sub_223FFDF1C(v12[2], &v942, v385, v386, v387);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v390 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v390;
    v13 = **v390;
    v301 = v6 + 3;
    v9 = a2[2] + 1;
  }
  v391 = v10[93];
  if ((v391 & 0x10000000) != 0)
    v392 = 0x40000000;
  else
    v392 = 0x80000000;
  if ((v391 & 0x20000000) != 0)
    v393 = v392;
  else
    v393 = v391 & 0xCFFFFFFF;
  if ((v393 & 0x40000000) == 0)
  {
    v394 = v7 + 5;
    if ((v393 & 0x80000000) != 0)
    {
      LOBYTE(v403) = -1;
      v404 = 2;
    }
    else
    {
      v395 = *(_QWORD *)(v13 + 2448);
      v396 = v395 + 520 * v393;
      v397 = *(_QWORD *)(v396 + 312);
      v398 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v396 + 336))
      {
        *(_BYTE *)(v396 + 336) = 0;
        v399 = *(unsigned int *)(v396 + 4);
        if ((_DWORD)v399)
        {
          v830 = v398;
          v874 = v397;
          v919 = v9;
          v400 = 0;
          v401 = (unsigned __int8 *)(v395 + 520 * v393 + 36);
          do
          {
            v402 = *v401;
            v401 += 28;
            v400 = sub_223A4EC9C(v400, ((unint64_t)v402 << 8) | 1, 0xFFu);
            --v399;
          }
          while (v399);
          v403 = v400 >> 8;
          if (!(_BYTE)v400)
            LOBYTE(v403) = -1;
          v397 = v874;
          v151 = a1;
          v9 = v919;
          v398 = v830;
        }
        else
        {
          LOBYTE(v403) = -1;
        }
        *(_BYTE *)(v395 + 520 * v393 + 338) = v403;
      }
      else
      {
        LOBYTE(v403) = *(_BYTE *)(v395 + 520 * v393 + 338);
      }
      v404 = v397 > v398;
    }
    v405 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v394));
    a4.f32[2] = (float)v9;
    v406.i64[0] = 0x3F0000003F000000;
    v406.i64[1] = 0x3F0000003F000000;
    v407 = vmulq_n_f32(vaddq_f32(a4, v406), v405);
    v943 = v407.i32[2];
    v942 = v407.i64[0];
    sub_223FFDF1C(v12[2], &v942, v403, v404, v405);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v408 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v408;
    v13 = **v408;
    v301 = v6 + 3;
    v9 = a2[2] + 1;
  }
  v409 = v10[94];
  if ((v409 & 0x10000000) != 0)
    v410 = 0x40000000;
  else
    v410 = 0x80000000;
  if ((v409 & 0x20000000) != 0)
    v411 = v410;
  else
    v411 = v409 & 0xCFFFFFFF;
  if ((v411 & 0x40000000) == 0)
  {
    v412 = v7 + 6;
    if ((v411 & 0x80000000) != 0)
    {
      LOBYTE(v421) = -1;
      v422 = 2;
    }
    else
    {
      v413 = *(_QWORD *)(v13 + 2448);
      v414 = v413 + 520 * v411;
      v415 = *(_QWORD *)(v414 + 312);
      v416 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v414 + 336))
      {
        *(_BYTE *)(v414 + 336) = 0;
        v417 = *(unsigned int *)(v414 + 4);
        if ((_DWORD)v417)
        {
          v831 = v416;
          v875 = v415;
          v920 = v9;
          v418 = 0;
          v419 = (unsigned __int8 *)(v413 + 520 * v411 + 36);
          do
          {
            v420 = *v419;
            v419 += 28;
            v418 = sub_223A4EC9C(v418, ((unint64_t)v420 << 8) | 1, 0xFFu);
            --v417;
          }
          while (v417);
          v421 = v418 >> 8;
          if (!(_BYTE)v418)
            LOBYTE(v421) = -1;
          v415 = v875;
          v151 = a1;
          v9 = v920;
          v416 = v831;
        }
        else
        {
          LOBYTE(v421) = -1;
        }
        *(_BYTE *)(v413 + 520 * v411 + 338) = v421;
      }
      else
      {
        LOBYTE(v421) = *(_BYTE *)(v413 + 520 * v411 + 338);
      }
      v422 = v415 > v416;
    }
    v423 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v412));
    a4.f32[2] = (float)v9;
    v424.i64[0] = 0x3F0000003F000000;
    v424.i64[1] = 0x3F0000003F000000;
    v425 = vmulq_n_f32(vaddq_f32(a4, v424), v423);
    v943 = v425.i32[2];
    v942 = v425.i64[0];
    sub_223FFDF1C(v12[2], &v942, v421, v422, v423);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v426 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v426;
    v13 = **v426;
    v301 = v6 + 3;
    v9 = a2[2] + 1;
  }
  v427 = v10[95];
  if ((v427 & 0x10000000) != 0)
    v428 = 0x40000000;
  else
    v428 = 0x80000000;
  if ((v427 & 0x20000000) != 0)
    v429 = v428;
  else
    v429 = v427 & 0xCFFFFFFF;
  if ((v429 & 0x40000000) == 0)
  {
    v430 = v7 + 7;
    if ((v429 & 0x80000000) != 0)
    {
      LOBYTE(v439) = -1;
      v440 = 2;
    }
    else
    {
      v431 = *(_QWORD *)(v13 + 2448);
      v432 = v431 + 520 * v429;
      v433 = *(_QWORD *)(v432 + 312);
      v434 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v432 + 336))
      {
        *(_BYTE *)(v432 + 336) = 0;
        v435 = *(unsigned int *)(v432 + 4);
        if ((_DWORD)v435)
        {
          v832 = v434;
          v876 = v433;
          v921 = v9;
          v436 = 0;
          v437 = (unsigned __int8 *)(v431 + 520 * v429 + 36);
          do
          {
            v438 = *v437;
            v437 += 28;
            v436 = sub_223A4EC9C(v436, ((unint64_t)v438 << 8) | 1, 0xFFu);
            --v435;
          }
          while (v435);
          v439 = v436 >> 8;
          if (!(_BYTE)v436)
            LOBYTE(v439) = -1;
          v433 = v876;
          v151 = a1;
          v9 = v921;
          v434 = v832;
        }
        else
        {
          LOBYTE(v439) = -1;
        }
        *(_BYTE *)(v431 + 520 * v429 + 338) = v439;
      }
      else
      {
        LOBYTE(v439) = *(_BYTE *)(v431 + 520 * v429 + 338);
      }
      v440 = v433 > v434;
    }
    v441 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v430));
    a4.f32[2] = (float)v9;
    v442.i64[0] = 0x3F0000003F000000;
    v442.i64[1] = 0x3F0000003F000000;
    v443 = vmulq_n_f32(vaddq_f32(a4, v442), v441);
    v943 = v443.i32[2];
    v942 = v443.i64[0];
    sub_223FFDF1C(v12[2], &v942, v439, v440, v441);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v444 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v444;
    v13 = **v444;
    v9 = a2[2] + 1;
  }
  v445 = v6 + 4;
  v446 = v10[96];
  if ((v446 & 0x10000000) != 0)
    v447 = 0x40000000;
  else
    v447 = 0x80000000;
  if ((v446 & 0x20000000) != 0)
    v448 = v447;
  else
    v448 = v446 & 0xCFFFFFFF;
  if ((v448 & 0x40000000) == 0)
  {
    if ((v448 & 0x80000000) != 0)
    {
      LOBYTE(v457) = -1;
      v458 = 2;
    }
    else
    {
      v449 = *(_QWORD *)(v13 + 2448);
      v450 = v449 + 520 * v448;
      v451 = *(_QWORD *)(v450 + 312);
      v452 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v450 + 336))
      {
        *(_BYTE *)(v450 + 336) = 0;
        v453 = *(unsigned int *)(v450 + 4);
        if ((_DWORD)v453)
        {
          v833 = v452;
          v877 = v451;
          v922 = v9;
          v454 = 0;
          v455 = (unsigned __int8 *)(v449 + 520 * v448 + 36);
          do
          {
            v456 = *v455;
            v455 += 28;
            v454 = sub_223A4EC9C(v454, ((unint64_t)v456 << 8) | 1, 0xFFu);
            --v453;
          }
          while (v453);
          v457 = v454 >> 8;
          if (!(_BYTE)v454)
            LOBYTE(v457) = -1;
          v451 = v877;
          v151 = a1;
          v9 = v922;
          v452 = v833;
        }
        else
        {
          LOBYTE(v457) = -1;
        }
        *(_BYTE *)(v449 + 520 * v448 + 338) = v457;
      }
      else
      {
        LOBYTE(v457) = *(_BYTE *)(v449 + 520 * v448 + 338);
      }
      v458 = v451 > v452;
    }
    v459 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v7));
    a4.f32[2] = (float)v9;
    v460.i64[0] = 0x3F0000003F000000;
    v460.i64[1] = 0x3F0000003F000000;
    v461 = vmulq_n_f32(vaddq_f32(a4, v460), v459);
    v943 = v461.i32[2];
    v942 = v461.i64[0];
    sub_223FFDF1C(v12[2], &v942, v457, v458, v459);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v462 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v462;
    v13 = **v462;
    v445 = v6 + 4;
    v9 = a2[2] + 1;
  }
  v463 = v10[97];
  if ((v463 & 0x10000000) != 0)
    v464 = 0x40000000;
  else
    v464 = 0x80000000;
  if ((v463 & 0x20000000) != 0)
    v465 = v464;
  else
    v465 = v463 & 0xCFFFFFFF;
  if ((v465 & 0x40000000) == 0)
  {
    v466 = v7 + 1;
    if ((v465 & 0x80000000) != 0)
    {
      LOBYTE(v475) = -1;
      v476 = 2;
    }
    else
    {
      v467 = *(_QWORD *)(v13 + 2448);
      v468 = v467 + 520 * v465;
      v469 = *(_QWORD *)(v468 + 312);
      v470 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v468 + 336))
      {
        *(_BYTE *)(v468 + 336) = 0;
        v471 = *(unsigned int *)(v468 + 4);
        if ((_DWORD)v471)
        {
          v834 = v470;
          v878 = v469;
          v923 = v9;
          v472 = 0;
          v473 = (unsigned __int8 *)(v467 + 520 * v465 + 36);
          do
          {
            v474 = *v473;
            v473 += 28;
            v472 = sub_223A4EC9C(v472, ((unint64_t)v474 << 8) | 1, 0xFFu);
            --v471;
          }
          while (v471);
          v475 = v472 >> 8;
          if (!(_BYTE)v472)
            LOBYTE(v475) = -1;
          v469 = v878;
          v151 = a1;
          v9 = v923;
          v470 = v834;
        }
        else
        {
          LOBYTE(v475) = -1;
        }
        *(_BYTE *)(v467 + 520 * v465 + 338) = v475;
      }
      else
      {
        LOBYTE(v475) = *(_BYTE *)(v467 + 520 * v465 + 338);
      }
      v476 = v469 > v470;
    }
    v477 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v466));
    a4.f32[2] = (float)v9;
    v478.i64[0] = 0x3F0000003F000000;
    v478.i64[1] = 0x3F0000003F000000;
    v479 = vmulq_n_f32(vaddq_f32(a4, v478), v477);
    v943 = v479.i32[2];
    v942 = v479.i64[0];
    sub_223FFDF1C(v12[2], &v942, v475, v476, v477);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v480 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v480;
    v13 = **v480;
    v445 = v6 + 4;
    v9 = a2[2] + 1;
  }
  v481 = v10[98];
  if ((v481 & 0x10000000) != 0)
    v482 = 0x40000000;
  else
    v482 = 0x80000000;
  if ((v481 & 0x20000000) != 0)
    v483 = v482;
  else
    v483 = v481 & 0xCFFFFFFF;
  if ((v483 & 0x40000000) == 0)
  {
    v484 = v7 + 2;
    if ((v483 & 0x80000000) != 0)
    {
      LOBYTE(v493) = -1;
      v494 = 2;
    }
    else
    {
      v485 = *(_QWORD *)(v13 + 2448);
      v486 = v485 + 520 * v483;
      v487 = *(_QWORD *)(v486 + 312);
      v488 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v486 + 336))
      {
        *(_BYTE *)(v486 + 336) = 0;
        v489 = *(unsigned int *)(v486 + 4);
        if ((_DWORD)v489)
        {
          v835 = v488;
          v879 = v487;
          v924 = v9;
          v490 = 0;
          v491 = (unsigned __int8 *)(v485 + 520 * v483 + 36);
          do
          {
            v492 = *v491;
            v491 += 28;
            v490 = sub_223A4EC9C(v490, ((unint64_t)v492 << 8) | 1, 0xFFu);
            --v489;
          }
          while (v489);
          v493 = v490 >> 8;
          if (!(_BYTE)v490)
            LOBYTE(v493) = -1;
          v487 = v879;
          v151 = a1;
          v9 = v924;
          v488 = v835;
        }
        else
        {
          LOBYTE(v493) = -1;
        }
        *(_BYTE *)(v485 + 520 * v483 + 338) = v493;
      }
      else
      {
        LOBYTE(v493) = *(_BYTE *)(v485 + 520 * v483 + 338);
      }
      v494 = v487 > v488;
    }
    v495 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v484));
    a4.f32[2] = (float)v9;
    v496.i64[0] = 0x3F0000003F000000;
    v496.i64[1] = 0x3F0000003F000000;
    v497 = vmulq_n_f32(vaddq_f32(a4, v496), v495);
    v943 = v497.i32[2];
    v942 = v497.i64[0];
    sub_223FFDF1C(v12[2], &v942, v493, v494, v495);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v498 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v498;
    v13 = **v498;
    v445 = v6 + 4;
    v9 = a2[2] + 1;
  }
  v499 = v10[99];
  if ((v499 & 0x10000000) != 0)
    v500 = 0x40000000;
  else
    v500 = 0x80000000;
  if ((v499 & 0x20000000) != 0)
    v501 = v500;
  else
    v501 = v499 & 0xCFFFFFFF;
  if ((v501 & 0x40000000) == 0)
  {
    v502 = v7 + 3;
    if ((v501 & 0x80000000) != 0)
    {
      LOBYTE(v511) = -1;
      v512 = 2;
    }
    else
    {
      v503 = *(_QWORD *)(v13 + 2448);
      v504 = v503 + 520 * v501;
      v505 = *(_QWORD *)(v504 + 312);
      v506 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v504 + 336))
      {
        *(_BYTE *)(v504 + 336) = 0;
        v507 = *(unsigned int *)(v504 + 4);
        if ((_DWORD)v507)
        {
          v836 = v506;
          v880 = v505;
          v925 = v9;
          v508 = 0;
          v509 = (unsigned __int8 *)(v503 + 520 * v501 + 36);
          do
          {
            v510 = *v509;
            v509 += 28;
            v508 = sub_223A4EC9C(v508, ((unint64_t)v510 << 8) | 1, 0xFFu);
            --v507;
          }
          while (v507);
          v511 = v508 >> 8;
          if (!(_BYTE)v508)
            LOBYTE(v511) = -1;
          v505 = v880;
          v151 = a1;
          v9 = v925;
          v506 = v836;
        }
        else
        {
          LOBYTE(v511) = -1;
        }
        *(_BYTE *)(v503 + 520 * v501 + 338) = v511;
      }
      else
      {
        LOBYTE(v511) = *(_BYTE *)(v503 + 520 * v501 + 338);
      }
      v512 = v505 > v506;
    }
    v513 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v502));
    a4.f32[2] = (float)v9;
    v514.i64[0] = 0x3F0000003F000000;
    v514.i64[1] = 0x3F0000003F000000;
    v515 = vmulq_n_f32(vaddq_f32(a4, v514), v513);
    v943 = v515.i32[2];
    v942 = v515.i64[0];
    sub_223FFDF1C(v12[2], &v942, v511, v512, v513);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v516 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v516;
    v13 = **v516;
    v445 = v6 + 4;
    v9 = a2[2] + 1;
  }
  v517 = v10[100];
  if ((v517 & 0x10000000) != 0)
    v518 = 0x40000000;
  else
    v518 = 0x80000000;
  if ((v517 & 0x20000000) != 0)
    v519 = v518;
  else
    v519 = v517 & 0xCFFFFFFF;
  if ((v519 & 0x40000000) == 0)
  {
    v520 = v7 + 4;
    if ((v519 & 0x80000000) != 0)
    {
      LOBYTE(v529) = -1;
      v530 = 2;
    }
    else
    {
      v521 = *(_QWORD *)(v13 + 2448);
      v522 = v521 + 520 * v519;
      v523 = *(_QWORD *)(v522 + 312);
      v524 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v522 + 336))
      {
        *(_BYTE *)(v522 + 336) = 0;
        v525 = *(unsigned int *)(v522 + 4);
        if ((_DWORD)v525)
        {
          v837 = v524;
          v881 = v523;
          v926 = v9;
          v526 = 0;
          v527 = (unsigned __int8 *)(v521 + 520 * v519 + 36);
          do
          {
            v528 = *v527;
            v527 += 28;
            v526 = sub_223A4EC9C(v526, ((unint64_t)v528 << 8) | 1, 0xFFu);
            --v525;
          }
          while (v525);
          v529 = v526 >> 8;
          if (!(_BYTE)v526)
            LOBYTE(v529) = -1;
          v523 = v881;
          v151 = a1;
          v9 = v926;
          v524 = v837;
        }
        else
        {
          LOBYTE(v529) = -1;
        }
        *(_BYTE *)(v521 + 520 * v519 + 338) = v529;
      }
      else
      {
        LOBYTE(v529) = *(_BYTE *)(v521 + 520 * v519 + 338);
      }
      v530 = v523 > v524;
    }
    v531 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v520));
    a4.f32[2] = (float)v9;
    v532.i64[0] = 0x3F0000003F000000;
    v532.i64[1] = 0x3F0000003F000000;
    v533 = vmulq_n_f32(vaddq_f32(a4, v532), v531);
    v943 = v533.i32[2];
    v942 = v533.i64[0];
    sub_223FFDF1C(v12[2], &v942, v529, v530, v531);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v534 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v534;
    v13 = **v534;
    v445 = v6 + 4;
    v9 = a2[2] + 1;
  }
  v535 = v10[101];
  if ((v535 & 0x10000000) != 0)
    v536 = 0x40000000;
  else
    v536 = 0x80000000;
  if ((v535 & 0x20000000) != 0)
    v537 = v536;
  else
    v537 = v535 & 0xCFFFFFFF;
  if ((v537 & 0x40000000) == 0)
  {
    v538 = v7 + 5;
    if ((v537 & 0x80000000) != 0)
    {
      LOBYTE(v547) = -1;
      v548 = 2;
    }
    else
    {
      v539 = *(_QWORD *)(v13 + 2448);
      v540 = v539 + 520 * v537;
      v541 = *(_QWORD *)(v540 + 312);
      v542 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v540 + 336))
      {
        *(_BYTE *)(v540 + 336) = 0;
        v543 = *(unsigned int *)(v540 + 4);
        if ((_DWORD)v543)
        {
          v838 = v542;
          v882 = v541;
          v927 = v9;
          v544 = 0;
          v545 = (unsigned __int8 *)(v539 + 520 * v537 + 36);
          do
          {
            v546 = *v545;
            v545 += 28;
            v544 = sub_223A4EC9C(v544, ((unint64_t)v546 << 8) | 1, 0xFFu);
            --v543;
          }
          while (v543);
          v547 = v544 >> 8;
          if (!(_BYTE)v544)
            LOBYTE(v547) = -1;
          v541 = v882;
          v151 = a1;
          v9 = v927;
          v542 = v838;
        }
        else
        {
          LOBYTE(v547) = -1;
        }
        *(_BYTE *)(v539 + 520 * v537 + 338) = v547;
      }
      else
      {
        LOBYTE(v547) = *(_BYTE *)(v539 + 520 * v537 + 338);
      }
      v548 = v541 > v542;
    }
    v549 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v538));
    a4.f32[2] = (float)v9;
    v550.i64[0] = 0x3F0000003F000000;
    v550.i64[1] = 0x3F0000003F000000;
    v551 = vmulq_n_f32(vaddq_f32(a4, v550), v549);
    v943 = v551.i32[2];
    v942 = v551.i64[0];
    sub_223FFDF1C(v12[2], &v942, v547, v548, v549);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v552 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v552;
    v13 = **v552;
    v445 = v6 + 4;
    v9 = a2[2] + 1;
  }
  v553 = v10[102];
  if ((v553 & 0x10000000) != 0)
    v554 = 0x40000000;
  else
    v554 = 0x80000000;
  if ((v553 & 0x20000000) != 0)
    v555 = v554;
  else
    v555 = v553 & 0xCFFFFFFF;
  if ((v555 & 0x40000000) == 0)
  {
    v556 = v7 + 6;
    if ((v555 & 0x80000000) != 0)
    {
      LOBYTE(v565) = -1;
      v566 = 2;
    }
    else
    {
      v557 = *(_QWORD *)(v13 + 2448);
      v558 = v557 + 520 * v555;
      v559 = *(_QWORD *)(v558 + 312);
      v560 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v558 + 336))
      {
        *(_BYTE *)(v558 + 336) = 0;
        v561 = *(unsigned int *)(v558 + 4);
        if ((_DWORD)v561)
        {
          v839 = v560;
          v883 = v559;
          v928 = v9;
          v562 = 0;
          v563 = (unsigned __int8 *)(v557 + 520 * v555 + 36);
          do
          {
            v564 = *v563;
            v563 += 28;
            v562 = sub_223A4EC9C(v562, ((unint64_t)v564 << 8) | 1, 0xFFu);
            --v561;
          }
          while (v561);
          v565 = v562 >> 8;
          if (!(_BYTE)v562)
            LOBYTE(v565) = -1;
          v559 = v883;
          v151 = a1;
          v9 = v928;
          v560 = v839;
        }
        else
        {
          LOBYTE(v565) = -1;
        }
        *(_BYTE *)(v557 + 520 * v555 + 338) = v565;
      }
      else
      {
        LOBYTE(v565) = *(_BYTE *)(v557 + 520 * v555 + 338);
      }
      v566 = v559 > v560;
    }
    v567 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v556));
    a4.f32[2] = (float)v9;
    v568.i64[0] = 0x3F0000003F000000;
    v568.i64[1] = 0x3F0000003F000000;
    v569 = vmulq_n_f32(vaddq_f32(a4, v568), v567);
    v943 = v569.i32[2];
    v942 = v569.i64[0];
    sub_223FFDF1C(v12[2], &v942, v565, v566, v567);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v570 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v570;
    v13 = **v570;
    v445 = v6 + 4;
    v9 = a2[2] + 1;
  }
  v571 = v10[103];
  if ((v571 & 0x10000000) != 0)
    v572 = 0x40000000;
  else
    v572 = 0x80000000;
  if ((v571 & 0x20000000) != 0)
    v573 = v572;
  else
    v573 = v571 & 0xCFFFFFFF;
  if ((v573 & 0x40000000) == 0)
  {
    v574 = v7 + 7;
    if ((v573 & 0x80000000) != 0)
    {
      LOBYTE(v583) = -1;
      v584 = 2;
    }
    else
    {
      v575 = *(_QWORD *)(v13 + 2448);
      v576 = v575 + 520 * v573;
      v577 = *(_QWORD *)(v576 + 312);
      v578 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v576 + 336))
      {
        *(_BYTE *)(v576 + 336) = 0;
        v579 = *(unsigned int *)(v576 + 4);
        if ((_DWORD)v579)
        {
          v840 = v578;
          v884 = v577;
          v929 = v9;
          v580 = 0;
          v581 = (unsigned __int8 *)(v575 + 520 * v573 + 36);
          do
          {
            v582 = *v581;
            v581 += 28;
            v580 = sub_223A4EC9C(v580, ((unint64_t)v582 << 8) | 1, 0xFFu);
            --v579;
          }
          while (v579);
          v583 = v580 >> 8;
          if (!(_BYTE)v580)
            LOBYTE(v583) = -1;
          v577 = v884;
          v151 = a1;
          v9 = v929;
          v578 = v840;
        }
        else
        {
          LOBYTE(v583) = -1;
        }
        *(_BYTE *)(v575 + 520 * v573 + 338) = v583;
      }
      else
      {
        LOBYTE(v583) = *(_BYTE *)(v575 + 520 * v573 + 338);
      }
      v584 = v577 > v578;
    }
    v585 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v574));
    a4.f32[2] = (float)v9;
    v586.i64[0] = 0x3F0000003F000000;
    v586.i64[1] = 0x3F0000003F000000;
    v587 = vmulq_n_f32(vaddq_f32(a4, v586), v585);
    v943 = v587.i32[2];
    v942 = v587.i64[0];
    sub_223FFDF1C(v12[2], &v942, v583, v584, v585);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v588 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v588;
    v13 = **v588;
    v9 = a2[2] + 1;
  }
  v589 = v6 + 5;
  v590 = v10[104];
  if ((v590 & 0x10000000) != 0)
    v591 = 0x40000000;
  else
    v591 = 0x80000000;
  if ((v590 & 0x20000000) != 0)
    v592 = v591;
  else
    v592 = v590 & 0xCFFFFFFF;
  if ((v592 & 0x40000000) == 0)
  {
    if ((v592 & 0x80000000) != 0)
    {
      LOBYTE(v601) = -1;
      v602 = 2;
    }
    else
    {
      v593 = *(_QWORD *)(v13 + 2448);
      v594 = v593 + 520 * v592;
      v595 = *(_QWORD *)(v594 + 312);
      v596 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v594 + 336))
      {
        *(_BYTE *)(v594 + 336) = 0;
        v597 = *(unsigned int *)(v594 + 4);
        if ((_DWORD)v597)
        {
          v841 = v596;
          v885 = v595;
          v930 = v9;
          v598 = 0;
          v599 = (unsigned __int8 *)(v593 + 520 * v592 + 36);
          do
          {
            v600 = *v599;
            v599 += 28;
            v598 = sub_223A4EC9C(v598, ((unint64_t)v600 << 8) | 1, 0xFFu);
            --v597;
          }
          while (v597);
          v601 = v598 >> 8;
          if (!(_BYTE)v598)
            LOBYTE(v601) = -1;
          v595 = v885;
          v151 = a1;
          v9 = v930;
          v596 = v841;
        }
        else
        {
          LOBYTE(v601) = -1;
        }
        *(_BYTE *)(v593 + 520 * v592 + 338) = v601;
      }
      else
      {
        LOBYTE(v601) = *(_BYTE *)(v593 + 520 * v592 + 338);
      }
      v602 = v595 > v596;
    }
    v603 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v7));
    a4.f32[2] = (float)v9;
    v604.i64[0] = 0x3F0000003F000000;
    v604.i64[1] = 0x3F0000003F000000;
    v605 = vmulq_n_f32(vaddq_f32(a4, v604), v603);
    v943 = v605.i32[2];
    v942 = v605.i64[0];
    sub_223FFDF1C(v12[2], &v942, v601, v602, v603);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v606 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v606;
    v13 = **v606;
    v589 = v6 + 5;
    v9 = a2[2] + 1;
  }
  v607 = v10[105];
  if ((v607 & 0x10000000) != 0)
    v608 = 0x40000000;
  else
    v608 = 0x80000000;
  if ((v607 & 0x20000000) != 0)
    v609 = v608;
  else
    v609 = v607 & 0xCFFFFFFF;
  if ((v609 & 0x40000000) == 0)
  {
    v610 = v7 + 1;
    if ((v609 & 0x80000000) != 0)
    {
      LOBYTE(v619) = -1;
      v620 = 2;
    }
    else
    {
      v611 = *(_QWORD *)(v13 + 2448);
      v612 = v611 + 520 * v609;
      v613 = *(_QWORD *)(v612 + 312);
      v614 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v612 + 336))
      {
        *(_BYTE *)(v612 + 336) = 0;
        v615 = *(unsigned int *)(v612 + 4);
        if ((_DWORD)v615)
        {
          v842 = v614;
          v886 = v613;
          v931 = v9;
          v616 = 0;
          v617 = (unsigned __int8 *)(v611 + 520 * v609 + 36);
          do
          {
            v618 = *v617;
            v617 += 28;
            v616 = sub_223A4EC9C(v616, ((unint64_t)v618 << 8) | 1, 0xFFu);
            --v615;
          }
          while (v615);
          v619 = v616 >> 8;
          if (!(_BYTE)v616)
            LOBYTE(v619) = -1;
          v613 = v886;
          v151 = a1;
          v9 = v931;
          v614 = v842;
        }
        else
        {
          LOBYTE(v619) = -1;
        }
        *(_BYTE *)(v611 + 520 * v609 + 338) = v619;
      }
      else
      {
        LOBYTE(v619) = *(_BYTE *)(v611 + 520 * v609 + 338);
      }
      v620 = v613 > v614;
    }
    v621 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v610));
    a4.f32[2] = (float)v9;
    v622.i64[0] = 0x3F0000003F000000;
    v622.i64[1] = 0x3F0000003F000000;
    v623 = vmulq_n_f32(vaddq_f32(a4, v622), v621);
    v943 = v623.i32[2];
    v942 = v623.i64[0];
    sub_223FFDF1C(v12[2], &v942, v619, v620, v621);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v624 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v624;
    v13 = **v624;
    v589 = v6 + 5;
    v9 = a2[2] + 1;
  }
  v625 = v10[106];
  if ((v625 & 0x10000000) != 0)
    v626 = 0x40000000;
  else
    v626 = 0x80000000;
  if ((v625 & 0x20000000) != 0)
    v627 = v626;
  else
    v627 = v625 & 0xCFFFFFFF;
  if ((v627 & 0x40000000) == 0)
  {
    v628 = v7 + 2;
    if ((v627 & 0x80000000) != 0)
    {
      LOBYTE(v637) = -1;
      v638 = 2;
    }
    else
    {
      v629 = *(_QWORD *)(v13 + 2448);
      v630 = v629 + 520 * v627;
      v631 = *(_QWORD *)(v630 + 312);
      v632 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v630 + 336))
      {
        *(_BYTE *)(v630 + 336) = 0;
        v633 = *(unsigned int *)(v630 + 4);
        if ((_DWORD)v633)
        {
          v843 = v632;
          v887 = v631;
          v932 = v9;
          v634 = 0;
          v635 = (unsigned __int8 *)(v629 + 520 * v627 + 36);
          do
          {
            v636 = *v635;
            v635 += 28;
            v634 = sub_223A4EC9C(v634, ((unint64_t)v636 << 8) | 1, 0xFFu);
            --v633;
          }
          while (v633);
          v637 = v634 >> 8;
          if (!(_BYTE)v634)
            LOBYTE(v637) = -1;
          v631 = v887;
          v151 = a1;
          v9 = v932;
          v632 = v843;
        }
        else
        {
          LOBYTE(v637) = -1;
        }
        *(_BYTE *)(v629 + 520 * v627 + 338) = v637;
      }
      else
      {
        LOBYTE(v637) = *(_BYTE *)(v629 + 520 * v627 + 338);
      }
      v638 = v631 > v632;
    }
    v639 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v628));
    a4.f32[2] = (float)v9;
    v640.i64[0] = 0x3F0000003F000000;
    v640.i64[1] = 0x3F0000003F000000;
    v641 = vmulq_n_f32(vaddq_f32(a4, v640), v639);
    v943 = v641.i32[2];
    v942 = v641.i64[0];
    sub_223FFDF1C(v12[2], &v942, v637, v638, v639);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v642 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v642;
    v13 = **v642;
    v589 = v6 + 5;
    v9 = a2[2] + 1;
  }
  v643 = v10[107];
  if ((v643 & 0x10000000) != 0)
    v644 = 0x40000000;
  else
    v644 = 0x80000000;
  if ((v643 & 0x20000000) != 0)
    v645 = v644;
  else
    v645 = v643 & 0xCFFFFFFF;
  if ((v645 & 0x40000000) == 0)
  {
    v646 = v7 + 3;
    if ((v645 & 0x80000000) != 0)
    {
      LOBYTE(v655) = -1;
      v656 = 2;
    }
    else
    {
      v647 = *(_QWORD *)(v13 + 2448);
      v648 = v647 + 520 * v645;
      v649 = *(_QWORD *)(v648 + 312);
      v650 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v648 + 336))
      {
        *(_BYTE *)(v648 + 336) = 0;
        v651 = *(unsigned int *)(v648 + 4);
        if ((_DWORD)v651)
        {
          v844 = v650;
          v888 = v649;
          v933 = v9;
          v652 = 0;
          v653 = (unsigned __int8 *)(v647 + 520 * v645 + 36);
          do
          {
            v654 = *v653;
            v653 += 28;
            v652 = sub_223A4EC9C(v652, ((unint64_t)v654 << 8) | 1, 0xFFu);
            --v651;
          }
          while (v651);
          v655 = v652 >> 8;
          if (!(_BYTE)v652)
            LOBYTE(v655) = -1;
          v649 = v888;
          v151 = a1;
          v9 = v933;
          v650 = v844;
        }
        else
        {
          LOBYTE(v655) = -1;
        }
        *(_BYTE *)(v647 + 520 * v645 + 338) = v655;
      }
      else
      {
        LOBYTE(v655) = *(_BYTE *)(v647 + 520 * v645 + 338);
      }
      v656 = v649 > v650;
    }
    v657 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v646));
    a4.f32[2] = (float)v9;
    v658.i64[0] = 0x3F0000003F000000;
    v658.i64[1] = 0x3F0000003F000000;
    v659 = vmulq_n_f32(vaddq_f32(a4, v658), v657);
    v943 = v659.i32[2];
    v942 = v659.i64[0];
    sub_223FFDF1C(v12[2], &v942, v655, v656, v657);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v660 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v660;
    v13 = **v660;
    v589 = v6 + 5;
    v9 = a2[2] + 1;
  }
  v661 = v10[108];
  if ((v661 & 0x10000000) != 0)
    v662 = 0x40000000;
  else
    v662 = 0x80000000;
  if ((v661 & 0x20000000) != 0)
    v663 = v662;
  else
    v663 = v661 & 0xCFFFFFFF;
  if ((v663 & 0x40000000) == 0)
  {
    v664 = v7 + 4;
    if ((v663 & 0x80000000) != 0)
    {
      LOBYTE(v673) = -1;
      v674 = 2;
    }
    else
    {
      v665 = *(_QWORD *)(v13 + 2448);
      v666 = v665 + 520 * v663;
      v667 = *(_QWORD *)(v666 + 312);
      v668 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v666 + 336))
      {
        *(_BYTE *)(v666 + 336) = 0;
        v669 = *(unsigned int *)(v666 + 4);
        if ((_DWORD)v669)
        {
          v845 = v668;
          v889 = v667;
          v934 = v9;
          v670 = 0;
          v671 = (unsigned __int8 *)(v665 + 520 * v663 + 36);
          do
          {
            v672 = *v671;
            v671 += 28;
            v670 = sub_223A4EC9C(v670, ((unint64_t)v672 << 8) | 1, 0xFFu);
            --v669;
          }
          while (v669);
          v673 = v670 >> 8;
          if (!(_BYTE)v670)
            LOBYTE(v673) = -1;
          v667 = v889;
          v151 = a1;
          v9 = v934;
          v668 = v845;
        }
        else
        {
          LOBYTE(v673) = -1;
        }
        *(_BYTE *)(v665 + 520 * v663 + 338) = v673;
      }
      else
      {
        LOBYTE(v673) = *(_BYTE *)(v665 + 520 * v663 + 338);
      }
      v674 = v667 > v668;
    }
    v675 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v664));
    a4.f32[2] = (float)v9;
    v676.i64[0] = 0x3F0000003F000000;
    v676.i64[1] = 0x3F0000003F000000;
    v677 = vmulq_n_f32(vaddq_f32(a4, v676), v675);
    v943 = v677.i32[2];
    v942 = v677.i64[0];
    sub_223FFDF1C(v12[2], &v942, v673, v674, v675);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v678 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v678;
    v13 = **v678;
    v589 = v6 + 5;
    v9 = a2[2] + 1;
  }
  v679 = v10[109];
  if ((v679 & 0x10000000) != 0)
    v680 = 0x40000000;
  else
    v680 = 0x80000000;
  if ((v679 & 0x20000000) != 0)
    v681 = v680;
  else
    v681 = v679 & 0xCFFFFFFF;
  if ((v681 & 0x40000000) == 0)
  {
    v682 = v7 + 5;
    if ((v681 & 0x80000000) != 0)
    {
      LOBYTE(v691) = -1;
      v692 = 2;
    }
    else
    {
      v683 = *(_QWORD *)(v13 + 2448);
      v684 = v683 + 520 * v681;
      v685 = *(_QWORD *)(v684 + 312);
      v686 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v684 + 336))
      {
        *(_BYTE *)(v684 + 336) = 0;
        v687 = *(unsigned int *)(v684 + 4);
        if ((_DWORD)v687)
        {
          v846 = v686;
          v890 = v685;
          v935 = v9;
          v688 = 0;
          v689 = (unsigned __int8 *)(v683 + 520 * v681 + 36);
          do
          {
            v690 = *v689;
            v689 += 28;
            v688 = sub_223A4EC9C(v688, ((unint64_t)v690 << 8) | 1, 0xFFu);
            --v687;
          }
          while (v687);
          v691 = v688 >> 8;
          if (!(_BYTE)v688)
            LOBYTE(v691) = -1;
          v685 = v890;
          v151 = a1;
          v9 = v935;
          v686 = v846;
        }
        else
        {
          LOBYTE(v691) = -1;
        }
        *(_BYTE *)(v683 + 520 * v681 + 338) = v691;
      }
      else
      {
        LOBYTE(v691) = *(_BYTE *)(v683 + 520 * v681 + 338);
      }
      v692 = v685 > v686;
    }
    v693 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v682));
    a4.f32[2] = (float)v9;
    v694.i64[0] = 0x3F0000003F000000;
    v694.i64[1] = 0x3F0000003F000000;
    v695 = vmulq_n_f32(vaddq_f32(a4, v694), v693);
    v943 = v695.i32[2];
    v942 = v695.i64[0];
    sub_223FFDF1C(v12[2], &v942, v691, v692, v693);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v696 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v696;
    v13 = **v696;
    v589 = v6 + 5;
    v9 = a2[2] + 1;
  }
  v697 = v10[110];
  if ((v697 & 0x10000000) != 0)
    v698 = 0x40000000;
  else
    v698 = 0x80000000;
  if ((v697 & 0x20000000) != 0)
    v699 = v698;
  else
    v699 = v697 & 0xCFFFFFFF;
  if ((v699 & 0x40000000) == 0)
  {
    v700 = v7 + 6;
    if ((v699 & 0x80000000) != 0)
    {
      LOBYTE(v709) = -1;
      v710 = 2;
    }
    else
    {
      v701 = *(_QWORD *)(v13 + 2448);
      v702 = v701 + 520 * v699;
      v703 = *(_QWORD *)(v702 + 312);
      v704 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v702 + 336))
      {
        *(_BYTE *)(v702 + 336) = 0;
        v705 = *(unsigned int *)(v702 + 4);
        if ((_DWORD)v705)
        {
          v847 = v704;
          v891 = v703;
          v936 = v9;
          v706 = 0;
          v707 = (unsigned __int8 *)(v701 + 520 * v699 + 36);
          do
          {
            v708 = *v707;
            v707 += 28;
            v706 = sub_223A4EC9C(v706, ((unint64_t)v708 << 8) | 1, 0xFFu);
            --v705;
          }
          while (v705);
          v709 = v706 >> 8;
          if (!(_BYTE)v706)
            LOBYTE(v709) = -1;
          v703 = v891;
          v151 = a1;
          v9 = v936;
          v704 = v847;
        }
        else
        {
          LOBYTE(v709) = -1;
        }
        *(_BYTE *)(v701 + 520 * v699 + 338) = v709;
      }
      else
      {
        LOBYTE(v709) = *(_BYTE *)(v701 + 520 * v699 + 338);
      }
      v710 = v703 > v704;
    }
    v711 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v700));
    a4.f32[2] = (float)v9;
    v712.i64[0] = 0x3F0000003F000000;
    v712.i64[1] = 0x3F0000003F000000;
    v713 = vmulq_n_f32(vaddq_f32(a4, v712), v711);
    v943 = v713.i32[2];
    v942 = v713.i64[0];
    sub_223FFDF1C(v12[2], &v942, v709, v710, v711);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v714 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v714;
    v13 = **v714;
    v589 = v6 + 5;
    v9 = a2[2] + 1;
  }
  v715 = v10[111];
  if ((v715 & 0x10000000) != 0)
    v716 = 0x40000000;
  else
    v716 = 0x80000000;
  if ((v715 & 0x20000000) != 0)
    v717 = v716;
  else
    v717 = v715 & 0xCFFFFFFF;
  if ((v717 & 0x40000000) == 0)
  {
    v718 = v7 + 7;
    if ((v717 & 0x80000000) != 0)
    {
      LOBYTE(v727) = -1;
      v728 = 2;
    }
    else
    {
      v719 = *(_QWORD *)(v13 + 2448);
      v720 = v719 + 520 * v717;
      v721 = *(_QWORD *)(v720 + 312);
      v722 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v720 + 336))
      {
        *(_BYTE *)(v720 + 336) = 0;
        v723 = *(unsigned int *)(v720 + 4);
        if ((_DWORD)v723)
        {
          v848 = v722;
          v892 = v721;
          v937 = v9;
          v724 = 0;
          v725 = (unsigned __int8 *)(v719 + 520 * v717 + 36);
          do
          {
            v726 = *v725;
            v725 += 28;
            v724 = sub_223A4EC9C(v724, ((unint64_t)v726 << 8) | 1, 0xFFu);
            --v723;
          }
          while (v723);
          v727 = v724 >> 8;
          if (!(_BYTE)v724)
            LOBYTE(v727) = -1;
          v721 = v892;
          v151 = a1;
          v9 = v937;
          v722 = v848;
        }
        else
        {
          LOBYTE(v727) = -1;
        }
        *(_BYTE *)(v719 + 520 * v717 + 338) = v727;
      }
      else
      {
        LOBYTE(v727) = *(_BYTE *)(v719 + 520 * v717 + 338);
      }
      v728 = v721 > v722;
    }
    v729 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v718));
    a4.f32[2] = (float)v9;
    v730.i64[0] = 0x3F0000003F000000;
    v730.i64[1] = 0x3F0000003F000000;
    v731 = vmulq_n_f32(vaddq_f32(a4, v730), v729);
    v943 = v731.i32[2];
    v942 = v731.i64[0];
    sub_223FFDF1C(v12[2], &v942, v727, v728, v729);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v732 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v732;
    v13 = **v732;
    v9 = a2[2] + 1;
  }
  v733 = v6 + 6;
  v734 = v10[112];
  if ((v734 & 0x10000000) != 0)
    v735 = 0x40000000;
  else
    v735 = 0x80000000;
  if ((v734 & 0x20000000) != 0)
    v736 = v735;
  else
    v736 = v734 & 0xCFFFFFFF;
  if ((v736 & 0x40000000) == 0)
  {
    if ((v736 & 0x80000000) != 0)
    {
      LOBYTE(v745) = -1;
      v746 = 2;
    }
    else
    {
      v737 = *(_QWORD *)(v13 + 2448);
      v738 = v737 + 520 * v736;
      v739 = *(_QWORD *)(v738 + 312);
      v740 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v738 + 336))
      {
        *(_BYTE *)(v738 + 336) = 0;
        v741 = *(unsigned int *)(v738 + 4);
        if ((_DWORD)v741)
        {
          v849 = v740;
          v893 = v739;
          v938 = v9;
          v742 = 0;
          v743 = (unsigned __int8 *)(v737 + 520 * v736 + 36);
          do
          {
            v744 = *v743;
            v743 += 28;
            v742 = sub_223A4EC9C(v742, ((unint64_t)v744 << 8) | 1, 0xFFu);
            --v741;
          }
          while (v741);
          v745 = v742 >> 8;
          if (!(_BYTE)v742)
            LOBYTE(v745) = -1;
          v739 = v893;
          v151 = a1;
          v9 = v938;
          v740 = v849;
        }
        else
        {
          LOBYTE(v745) = -1;
        }
        *(_BYTE *)(v737 + 520 * v736 + 338) = v745;
      }
      else
      {
        LOBYTE(v745) = *(_BYTE *)(v737 + 520 * v736 + 338);
      }
      v746 = v739 > v740;
    }
    v747 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v733, v7));
    a4.f32[2] = (float)v9;
    v748.i64[0] = 0x3F0000003F000000;
    v748.i64[1] = 0x3F0000003F000000;
    v749 = vmulq_n_f32(vaddq_f32(a4, v748), v747);
    v943 = v749.i32[2];
    v942 = v749.i64[0];
    sub_223FFDF1C(v12[2], &v942, v745, v746, v747);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v750 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v750;
    v13 = **v750;
    v733 = a2[1] + 6;
    v9 = a2[2] + 1;
  }
  v751 = v10[113];
  if ((v751 & 0x10000000) != 0)
    v752 = 0x40000000;
  else
    v752 = 0x80000000;
  if ((v751 & 0x20000000) != 0)
    v753 = v752;
  else
    v753 = v751 & 0xCFFFFFFF;
  if ((v753 & 0x40000000) == 0)
  {
    v754 = v7 + 1;
    if ((v753 & 0x80000000) != 0)
    {
      LOBYTE(v763) = -1;
      v764 = 2;
    }
    else
    {
      v755 = *(_QWORD *)(v13 + 2448);
      v756 = v755 + 520 * v753;
      v757 = *(_QWORD *)(v756 + 312);
      v758 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v756 + 336))
      {
        *(_BYTE *)(v756 + 336) = 0;
        v759 = *(unsigned int *)(v756 + 4);
        if ((_DWORD)v759)
        {
          v850 = v758;
          v894 = v757;
          v939 = v9;
          v760 = 0;
          v761 = (unsigned __int8 *)(v755 + 520 * v753 + 36);
          do
          {
            v762 = *v761;
            v761 += 28;
            v760 = sub_223A4EC9C(v760, ((unint64_t)v762 << 8) | 1, 0xFFu);
            --v759;
          }
          while (v759);
          v763 = v760 >> 8;
          if (!(_BYTE)v760)
            LOBYTE(v763) = -1;
          v757 = v894;
          v151 = a1;
          v9 = v939;
          v758 = v850;
        }
        else
        {
          LOBYTE(v763) = -1;
        }
        *(_BYTE *)(v755 + 520 * v753 + 338) = v763;
      }
      else
      {
        LOBYTE(v763) = *(_BYTE *)(v755 + 520 * v753 + 338);
      }
      v764 = v757 > v758;
    }
    v765 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v733, v754));
    a4.f32[2] = (float)v9;
    v766.i64[0] = 0x3F0000003F000000;
    v766.i64[1] = 0x3F0000003F000000;
    v767 = vmulq_n_f32(vaddq_f32(a4, v766), v765);
    v943 = v767.i32[2];
    v942 = v767.i64[0];
    sub_223FFDF1C(v12[2], &v942, v763, v764, v765);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v768 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v768;
    v13 = **v768;
    v733 = a2[1] + 6;
    v9 = a2[2] + 1;
  }
  v769 = v10[114];
  if ((v769 & 0x10000000) != 0)
    v770 = 0x40000000;
  else
    v770 = 0x80000000;
  if ((v769 & 0x20000000) != 0)
    v771 = v770;
  else
    v771 = v769 & 0xCFFFFFFF;
  if ((v771 & 0x40000000) == 0)
  {
    v772 = v7 + 2;
    if ((v771 & 0x80000000) != 0)
    {
      LOBYTE(v781) = -1;
      v782 = 2;
    }
    else
    {
      v773 = *(_QWORD *)(v13 + 2448);
      v774 = v773 + 520 * v771;
      v775 = *(_QWORD *)(v774 + 312);
      v776 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v774 + 336))
      {
        *(_BYTE *)(v774 + 336) = 0;
        v777 = *(unsigned int *)(v774 + 4);
        if ((_DWORD)v777)
        {
          v851 = v776;
          v895 = v775;
          v940 = v9;
          v778 = 0;
          v779 = (unsigned __int8 *)(v773 + 520 * v771 + 36);
          do
          {
            v780 = *v779;
            v779 += 28;
            v778 = sub_223A4EC9C(v778, ((unint64_t)v780 << 8) | 1, 0xFFu);
            --v777;
          }
          while (v777);
          v781 = v778 >> 8;
          if (!(_BYTE)v778)
            LOBYTE(v781) = -1;
          v775 = v895;
          v151 = a1;
          v9 = v940;
          v776 = v851;
        }
        else
        {
          LOBYTE(v781) = -1;
        }
        *(_BYTE *)(v773 + 520 * v771 + 338) = v781;
      }
      else
      {
        LOBYTE(v781) = *(_BYTE *)(v773 + 520 * v771 + 338);
      }
      v782 = v775 > v776;
    }
    v783 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v733, v772));
    a4.f32[2] = (float)v9;
    v784.i64[0] = 0x3F0000003F000000;
    v784.i64[1] = 0x3F0000003F000000;
    v785 = vmulq_n_f32(vaddq_f32(a4, v784), v783);
    v943 = v785.i32[2];
    v942 = v785.i64[0];
    sub_223FFDF1C(v12[2], &v942, v781, v782, v783);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v786 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v786;
    v13 = **v786;
    v733 = a2[1] + 6;
    v9 = a2[2] + 1;
  }
  v787 = v10[115];
  if ((v787 & 0x10000000) != 0)
    v788 = 0x40000000;
  else
    v788 = 0x80000000;
  if ((v787 & 0x20000000) != 0)
    v789 = v788;
  else
    v789 = v787 & 0xCFFFFFFF;
  if ((v789 & 0x40000000) == 0)
  {
    v790 = v7 + 3;
    if ((v789 & 0x80000000) != 0)
    {
      LOBYTE(v799) = -1;
      v800 = 2;
    }
    else
    {
      v791 = *(_QWORD *)(v13 + 2448);
      v792 = v791 + 520 * v789;
      v793 = *(_QWORD *)(v792 + 312);
      v794 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v792 + 336))
      {
        *(_BYTE *)(v792 + 336) = 0;
        v795 = *(unsigned int *)(v792 + 4);
        if ((_DWORD)v795)
        {
          v852 = v794;
          v896 = v793;
          v941 = v9;
          v796 = 0;
          v797 = (unsigned __int8 *)(v791 + 520 * v789 + 36);
          do
          {
            v798 = *v797;
            v797 += 28;
            v796 = sub_223A4EC9C(v796, ((unint64_t)v798 << 8) | 1, 0xFFu);
            --v795;
          }
          while (v795);
          v799 = v796 >> 8;
          if (!(_BYTE)v796)
            LOBYTE(v799) = -1;
          v793 = v896;
          v151 = a1;
          v9 = v941;
          v794 = v852;
        }
        else
        {
          LOBYTE(v799) = -1;
        }
        *(_BYTE *)(v791 + 520 * v789 + 338) = v799;
      }
      else
      {
        LOBYTE(v799) = *(_BYTE *)(v791 + 520 * v789 + 338);
      }
      v800 = v793 > v794;
    }
    v801 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v733, v790));
    a4.f32[2] = (float)v9;
    v802.i64[0] = 0x3F0000003F000000;
    v802.i64[1] = 0x3F0000003F000000;
    v803 = vmulq_n_f32(vaddq_f32(a4, v802), v801);
    v943 = v803.i32[2];
    v942 = v803.i64[0];
    sub_223FFDF1C(v12[2], &v942, v799, v800, v801);
  }
  sub_223D65104(v151, a2, a3, a4);
}

void sub_223D65104(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t **v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t **v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  float v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t **v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t **v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unint64_t v98;
  int v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  uint64_t **v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  unsigned int v115;
  unint64_t v116;
  int v117;
  float v118;
  float32x4_t v119;
  float32x4_t v120;
  uint64_t **v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unsigned __int8 *v132;
  unsigned int v133;
  unint64_t v134;
  int v135;
  float v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t **v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unsigned __int8 *v150;
  unsigned int v151;
  unint64_t v152;
  int v153;
  float v154;
  float32x4_t v155;
  float32x4_t v156;
  uint64_t **v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned __int8 *v168;
  unsigned int v169;
  unint64_t v170;
  int v171;
  float v172;
  float32x4_t v173;
  float32x4_t v174;
  uint64_t **v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unsigned __int8 *v186;
  unsigned int v187;
  unint64_t v188;
  int v189;
  float v190;
  float32x4_t v191;
  float32x4_t v192;
  uint64_t **v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unsigned int v205;
  unint64_t v206;
  int v207;
  float v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t **v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unsigned __int8 *v222;
  unsigned int v223;
  unint64_t v224;
  int v225;
  float v226;
  float32x4_t v227;
  float32x4_t v228;
  uint64_t **v229;
  int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unsigned __int8 *v240;
  unsigned int v241;
  unint64_t v242;
  int v243;
  float v244;
  float32x4_t v245;
  float32x4_t v246;
  uint64_t **v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unsigned __int8 *v258;
  unsigned int v259;
  unint64_t v260;
  int v261;
  float v262;
  float32x4_t v263;
  float32x4_t v264;
  uint64_t **v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unsigned __int8 *v276;
  unsigned int v277;
  unint64_t v278;
  int v279;
  float v280;
  float32x4_t v281;
  float32x4_t v282;
  uint64_t **v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unsigned __int8 *v294;
  unsigned int v295;
  unint64_t v296;
  int v297;
  float v298;
  float32x4_t v299;
  float32x4_t v300;
  uint64_t **v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unsigned __int8 *v312;
  unsigned int v313;
  unint64_t v314;
  int v315;
  float v316;
  float32x4_t v317;
  float32x4_t v318;
  uint64_t **v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unsigned int v331;
  unint64_t v332;
  int v333;
  float v334;
  float32x4_t v335;
  float32x4_t v336;
  uint64_t **v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unsigned __int8 *v348;
  unsigned int v349;
  unint64_t v350;
  int v351;
  float v352;
  float32x4_t v353;
  float32x4_t v354;
  uint64_t **v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unsigned __int8 *v366;
  unsigned int v367;
  unint64_t v368;
  int v369;
  float v370;
  float32x4_t v371;
  float32x4_t v372;
  uint64_t **v373;
  int v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unsigned __int8 *v384;
  unsigned int v385;
  unint64_t v386;
  int v387;
  float v388;
  float32x4_t v389;
  float32x4_t v390;
  uint64_t **v391;
  int v392;
  unsigned int v393;
  unsigned int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unsigned __int8 *v402;
  unsigned int v403;
  unint64_t v404;
  int v405;
  float v406;
  float32x4_t v407;
  float32x4_t v408;
  uint64_t **v409;
  int v410;
  unsigned int v411;
  unsigned int v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  unsigned __int8 *v420;
  unsigned int v421;
  unint64_t v422;
  int v423;
  float v424;
  float32x4_t v425;
  float32x4_t v426;
  uint64_t **v427;
  int v428;
  unsigned int v429;
  unsigned int v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unsigned __int8 *v438;
  unsigned int v439;
  unint64_t v440;
  int v441;
  float v442;
  float32x4_t v443;
  float32x4_t v444;
  uint64_t **v445;
  int v446;
  unsigned int v447;
  unsigned int v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unsigned int v457;
  unint64_t v458;
  int v459;
  float v460;
  float32x4_t v461;
  float32x4_t v462;
  uint64_t **v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unsigned __int8 *v474;
  unsigned int v475;
  unint64_t v476;
  int v477;
  float v478;
  float32x4_t v479;
  float32x4_t v480;
  uint64_t **v481;
  int v482;
  unsigned int v483;
  unsigned int v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unsigned __int8 *v492;
  unsigned int v493;
  unint64_t v494;
  int v495;
  float v496;
  float32x4_t v497;
  float32x4_t v498;
  uint64_t **v499;
  int v500;
  unsigned int v501;
  unsigned int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unsigned __int8 *v510;
  unsigned int v511;
  unint64_t v512;
  int v513;
  float v514;
  float32x4_t v515;
  float32x4_t v516;
  uint64_t **v517;
  int v518;
  int v519;
  unsigned int v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unsigned __int8 *v528;
  unsigned int v529;
  unint64_t v530;
  int v531;
  float v532;
  float32x4_t v533;
  float32x4_t v534;
  uint64_t **v535;
  int v536;
  unsigned int v537;
  unsigned int v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  unsigned __int8 *v546;
  unsigned int v547;
  unint64_t v548;
  int v549;
  float v550;
  float32x4_t v551;
  float32x4_t v552;
  uint64_t **v553;
  int v554;
  unsigned int v555;
  unsigned int v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  unsigned __int8 *v564;
  unsigned int v565;
  unint64_t v566;
  int v567;
  float v568;
  float32x4_t v569;
  float32x4_t v570;
  uint64_t **v571;
  int v572;
  unsigned int v573;
  unsigned int v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unsigned int v583;
  unint64_t v584;
  int v585;
  float v586;
  float32x4_t v587;
  float32x4_t v588;
  uint64_t **v589;
  int v590;
  unsigned int v591;
  unsigned int v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unsigned __int8 *v600;
  unsigned int v601;
  unint64_t v602;
  int v603;
  float v604;
  float32x4_t v605;
  float32x4_t v606;
  uint64_t **v607;
  int v608;
  unsigned int v609;
  unsigned int v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  unsigned __int8 *v618;
  unsigned int v619;
  unint64_t v620;
  int v621;
  float v622;
  float32x4_t v623;
  float32x4_t v624;
  uint64_t **v625;
  int v626;
  unsigned int v627;
  unsigned int v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unint64_t v635;
  unsigned __int8 *v636;
  unsigned int v637;
  unint64_t v638;
  int v639;
  float v640;
  float32x4_t v641;
  float32x4_t v642;
  uint64_t **v643;
  int v644;
  unsigned int v645;
  unsigned int v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  unsigned __int8 *v654;
  unsigned int v655;
  unint64_t v656;
  int v657;
  float v658;
  float32x4_t v659;
  float32x4_t v660;
  uint64_t **v661;
  int v662;
  int v663;
  unsigned int v664;
  unsigned int v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  unsigned __int8 *v672;
  unsigned int v673;
  unint64_t v674;
  int v675;
  float v676;
  float32x4_t v677;
  float32x4_t v678;
  uint64_t **v679;
  int v680;
  unsigned int v681;
  unsigned int v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  unsigned __int8 *v690;
  unsigned int v691;
  unint64_t v692;
  int v693;
  float v694;
  float32x4_t v695;
  float32x4_t v696;
  uint64_t **v697;
  int v698;
  unsigned int v699;
  unsigned int v700;
  int v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  unsigned __int8 *v708;
  unsigned int v709;
  unint64_t v710;
  int v711;
  float v712;
  float32x4_t v713;
  float32x4_t v714;
  uint64_t **v715;
  int v716;
  unsigned int v717;
  unsigned int v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  unint64_t v725;
  unsigned __int8 *v726;
  unsigned int v727;
  unint64_t v728;
  int v729;
  float v730;
  float32x4_t v731;
  float32x4_t v732;
  uint64_t **v733;
  int v734;
  unsigned int v735;
  unsigned int v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unint64_t v743;
  unsigned __int8 *v744;
  unsigned int v745;
  unint64_t v746;
  int v747;
  float v748;
  float32x4_t v749;
  float32x4_t v750;
  uint64_t **v751;
  int v752;
  unsigned int v753;
  unsigned int v754;
  int v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  unint64_t v761;
  unsigned __int8 *v762;
  unsigned int v763;
  unint64_t v764;
  int v765;
  float v766;
  float32x4_t v767;
  float32x4_t v768;
  uint64_t **v769;
  int v770;
  unsigned int v771;
  unsigned int v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  unsigned __int8 *v780;
  unsigned int v781;
  unint64_t v782;
  int v783;
  float v784;
  float32x4_t v785;
  float32x4_t v786;
  uint64_t **v787;
  int v788;
  unsigned int v789;
  unsigned int v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  unint64_t v797;
  unsigned __int8 *v798;
  unsigned int v799;
  unint64_t v800;
  int v801;
  float v802;
  float32x4_t v803;
  float32x4_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  int v890;
  int v891;
  int v892;
  int v893;
  int v894;
  int v895;
  int v896;
  int v897;
  int v898;
  int v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  int v938;
  int v939;
  uint64_t v941;
  __int32 v942;

  v5 = a1;
  v6 = *a2;
  v7 = a2[1];
  v8 = v7 + 6;
  v9 = a2[2];
  v10 = v9 + 1;
  v11 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v12 = v11[116];
  v13 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v14 = *v13;
  if ((v12 & 0x10000000) != 0)
    v15 = 0x40000000;
  else
    v15 = 0x80000000;
  if ((v12 & 0x20000000) != 0)
    v16 = v15;
  else
    v16 = v12 & 0xCFFFFFFF;
  if ((v16 & 0x40000000) == 0)
  {
    v17 = v6 + 4;
    if ((v16 & 0x80000000) != 0)
    {
      LOBYTE(v26) = -1;
      v27 = 2;
    }
    else
    {
      v18 = *(_QWORD *)(v14 + 2448);
      v19 = v18 + 520 * v16;
      v20 = *(_QWORD *)(v19 + 312);
      v21 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v19 + 336))
      {
        *(_BYTE *)(v19 + 336) = 0;
        v22 = *(unsigned int *)(v19 + 4);
        if ((_DWORD)v22)
        {
          v809 = v21;
          v853 = v20;
          v896 = v9 + 1;
          v23 = 0;
          v24 = (unsigned __int8 *)(v18 + 520 * v16 + 36);
          do
          {
            v25 = *v24;
            v24 += 28;
            v23 = sub_223A4EC9C(v23, ((unint64_t)v25 << 8) | 1, 0xFFu);
            --v22;
          }
          while (v22);
          v26 = v23 >> 8;
          if (!(_BYTE)v23)
            LOBYTE(v26) = -1;
          v10 = v896;
          v21 = v809;
          v20 = v853;
        }
        else
        {
          LOBYTE(v26) = -1;
        }
        *(_BYTE *)(v18 + 520 * v16 + 338) = v26;
        v5 = a1;
      }
      else
      {
        LOBYTE(v26) = *(_BYTE *)(v18 + 520 * v16 + 338);
      }
      v27 = v20 > v21;
    }
    a4.f32[0] = (float)v17;
    a4.f32[1] = (float)v8;
    v28 = *(float *)(v14 + 144);
    a4.f32[2] = (float)v10;
    v29.i64[0] = 0x3F0000003F000000;
    v29.i64[1] = 0x3F0000003F000000;
    v30 = vmulq_n_f32(vaddq_f32(a4, v29), v28);
    v942 = v30.i32[2];
    v941 = v30.i64[0];
    sub_223FFDF1C(v13[2], &v941, v26, v27, v28);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v31 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v31;
    v14 = **v31;
    v8 = v7 + 6;
    v10 = v9 + 1;
  }
  v32 = v11[117];
  if ((v32 & 0x10000000) != 0)
    v33 = 0x40000000;
  else
    v33 = 0x80000000;
  if ((v32 & 0x20000000) != 0)
    v34 = v33;
  else
    v34 = v32 & 0xCFFFFFFF;
  if ((v34 & 0x40000000) == 0)
  {
    v35 = v6 + 5;
    if ((v34 & 0x80000000) != 0)
    {
      LOBYTE(v44) = -1;
      v45 = 2;
    }
    else
    {
      v36 = *(_QWORD *)(v14 + 2448);
      v37 = v36 + 520 * v34;
      v38 = *(_QWORD *)(v37 + 312);
      v39 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v37 + 336))
      {
        *(_BYTE *)(v37 + 336) = 0;
        v40 = *(unsigned int *)(v37 + 4);
        if ((_DWORD)v40)
        {
          v810 = v39;
          v854 = v38;
          v897 = v10;
          v41 = 0;
          v42 = (unsigned __int8 *)(v36 + 520 * v34 + 36);
          do
          {
            v43 = *v42;
            v42 += 28;
            v41 = sub_223A4EC9C(v41, ((unint64_t)v43 << 8) | 1, 0xFFu);
            --v40;
          }
          while (v40);
          v44 = v41 >> 8;
          if (!(_BYTE)v41)
            LOBYTE(v44) = -1;
          v10 = v897;
          v39 = v810;
          v38 = v854;
        }
        else
        {
          LOBYTE(v44) = -1;
        }
        *(_BYTE *)(v36 + 520 * v34 + 338) = v44;
        v5 = a1;
      }
      else
      {
        LOBYTE(v44) = *(_BYTE *)(v36 + 520 * v34 + 338);
      }
      v45 = v38 > v39;
    }
    v46 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v35));
    a4.f32[2] = (float)v10;
    v47.i64[0] = 0x3F0000003F000000;
    v47.i64[1] = 0x3F0000003F000000;
    v48 = vmulq_n_f32(vaddq_f32(a4, v47), v46);
    v942 = v48.i32[2];
    v941 = v48.i64[0];
    sub_223FFDF1C(v13[2], &v941, v44, v45, v46);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v49 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v49;
    v14 = **v49;
    v8 = v7 + 6;
    v10 = v9 + 1;
  }
  v50 = v11[118];
  if ((v50 & 0x10000000) != 0)
    v51 = 0x40000000;
  else
    v51 = 0x80000000;
  if ((v50 & 0x20000000) != 0)
    v52 = v51;
  else
    v52 = v50 & 0xCFFFFFFF;
  if ((v52 & 0x40000000) == 0)
  {
    v53 = v6 + 6;
    if ((v52 & 0x80000000) != 0)
    {
      LOBYTE(v62) = -1;
      v63 = 2;
    }
    else
    {
      v54 = *(_QWORD *)(v14 + 2448);
      v55 = v54 + 520 * v52;
      v56 = *(_QWORD *)(v55 + 312);
      v57 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v55 + 336))
      {
        *(_BYTE *)(v55 + 336) = 0;
        v58 = *(unsigned int *)(v55 + 4);
        if ((_DWORD)v58)
        {
          v811 = v57;
          v855 = v56;
          v898 = v10;
          v59 = 0;
          v60 = (unsigned __int8 *)(v54 + 520 * v52 + 36);
          do
          {
            v61 = *v60;
            v60 += 28;
            v59 = sub_223A4EC9C(v59, ((unint64_t)v61 << 8) | 1, 0xFFu);
            --v58;
          }
          while (v58);
          v62 = v59 >> 8;
          if (!(_BYTE)v59)
            LOBYTE(v62) = -1;
          v10 = v898;
          v57 = v811;
          v56 = v855;
        }
        else
        {
          LOBYTE(v62) = -1;
        }
        *(_BYTE *)(v54 + 520 * v52 + 338) = v62;
        v5 = a1;
      }
      else
      {
        LOBYTE(v62) = *(_BYTE *)(v54 + 520 * v52 + 338);
      }
      v63 = v56 > v57;
    }
    v64 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v53));
    a4.f32[2] = (float)v10;
    v65.i64[0] = 0x3F0000003F000000;
    v65.i64[1] = 0x3F0000003F000000;
    v66 = vmulq_n_f32(vaddq_f32(a4, v65), v64);
    v942 = v66.i32[2];
    v941 = v66.i64[0];
    sub_223FFDF1C(v13[2], &v941, v62, v63, v64);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v67 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v67;
    v14 = **v67;
    v8 = v7 + 6;
    v10 = v9 + 1;
  }
  v68 = v11[119];
  if ((v68 & 0x10000000) != 0)
    v69 = 0x40000000;
  else
    v69 = 0x80000000;
  if ((v68 & 0x20000000) != 0)
    v70 = v69;
  else
    v70 = v68 & 0xCFFFFFFF;
  if ((v70 & 0x40000000) == 0)
  {
    v71 = v6 + 7;
    if ((v70 & 0x80000000) != 0)
    {
      LOBYTE(v80) = -1;
      v81 = 2;
    }
    else
    {
      v72 = *(_QWORD *)(v14 + 2448);
      v73 = v72 + 520 * v70;
      v74 = *(_QWORD *)(v73 + 312);
      v75 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v73 + 336))
      {
        *(_BYTE *)(v73 + 336) = 0;
        v76 = *(unsigned int *)(v73 + 4);
        if ((_DWORD)v76)
        {
          v812 = v75;
          v856 = v74;
          v899 = v10;
          v77 = 0;
          v78 = (unsigned __int8 *)(v72 + 520 * v70 + 36);
          do
          {
            v79 = *v78;
            v78 += 28;
            v77 = sub_223A4EC9C(v77, ((unint64_t)v79 << 8) | 1, 0xFFu);
            --v76;
          }
          while (v76);
          v80 = v77 >> 8;
          if (!(_BYTE)v77)
            LOBYTE(v80) = -1;
          v10 = v899;
          v75 = v812;
          v74 = v856;
        }
        else
        {
          LOBYTE(v80) = -1;
        }
        *(_BYTE *)(v72 + 520 * v70 + 338) = v80;
        v5 = a1;
      }
      else
      {
        LOBYTE(v80) = *(_BYTE *)(v72 + 520 * v70 + 338);
      }
      v81 = v74 > v75;
    }
    v82 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v71));
    a4.f32[2] = (float)v10;
    v83.i64[0] = 0x3F0000003F000000;
    v83.i64[1] = 0x3F0000003F000000;
    v84 = vmulq_n_f32(vaddq_f32(a4, v83), v82);
    v942 = v84.i32[2];
    v941 = v84.i64[0];
    sub_223FFDF1C(v13[2], &v941, v80, v81, v82);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v85 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v85;
    v14 = **v85;
    v10 = v9 + 1;
  }
  v86 = v7 + 7;
  v87 = v11[120];
  if ((v87 & 0x10000000) != 0)
    v88 = 0x40000000;
  else
    v88 = 0x80000000;
  if ((v87 & 0x20000000) != 0)
    v89 = v88;
  else
    v89 = v87 & 0xCFFFFFFF;
  if ((v89 & 0x40000000) == 0)
  {
    if ((v89 & 0x80000000) != 0)
    {
      LOBYTE(v98) = -1;
      v99 = 2;
    }
    else
    {
      v90 = *(_QWORD *)(v14 + 2448);
      v91 = v90 + 520 * v89;
      v92 = *(_QWORD *)(v91 + 312);
      v93 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v91 + 336))
      {
        *(_BYTE *)(v91 + 336) = 0;
        v94 = *(unsigned int *)(v91 + 4);
        if ((_DWORD)v94)
        {
          v813 = v93;
          v857 = v92;
          v900 = v10;
          v95 = 0;
          v96 = (unsigned __int8 *)(v90 + 520 * v89 + 36);
          do
          {
            v97 = *v96;
            v96 += 28;
            v95 = sub_223A4EC9C(v95, ((unint64_t)v97 << 8) | 1, 0xFFu);
            --v94;
          }
          while (v94);
          v98 = v95 >> 8;
          if (!(_BYTE)v95)
            LOBYTE(v98) = -1;
          v10 = v900;
          v93 = v813;
          v92 = v857;
        }
        else
        {
          LOBYTE(v98) = -1;
        }
        *(_BYTE *)(v90 + 520 * v89 + 338) = v98;
        v5 = a1;
      }
      else
      {
        LOBYTE(v98) = *(_BYTE *)(v90 + 520 * v89 + 338);
      }
      v99 = v92 > v93;
    }
    v100 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v6));
    a4.f32[2] = (float)v10;
    v101.i64[0] = 0x3F0000003F000000;
    v101.i64[1] = 0x3F0000003F000000;
    v102 = vmulq_n_f32(vaddq_f32(a4, v101), v100);
    v942 = v102.i32[2];
    v941 = v102.i64[0];
    sub_223FFDF1C(v13[2], &v941, v98, v99, v100);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v103 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v103;
    v14 = **v103;
    v86 = v7 + 7;
    v10 = v9 + 1;
  }
  v104 = v11[121];
  if ((v104 & 0x10000000) != 0)
    v105 = 0x40000000;
  else
    v105 = 0x80000000;
  if ((v104 & 0x20000000) != 0)
    v106 = v105;
  else
    v106 = v104 & 0xCFFFFFFF;
  if ((v106 & 0x40000000) == 0)
  {
    v107 = v6 + 1;
    if ((v106 & 0x80000000) != 0)
    {
      LOBYTE(v116) = -1;
      v117 = 2;
    }
    else
    {
      v108 = *(_QWORD *)(v14 + 2448);
      v109 = v108 + 520 * v106;
      v110 = *(_QWORD *)(v109 + 312);
      v111 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v109 + 336))
      {
        *(_BYTE *)(v109 + 336) = 0;
        v112 = *(unsigned int *)(v109 + 4);
        if ((_DWORD)v112)
        {
          v814 = v111;
          v858 = v110;
          v901 = v10;
          v113 = 0;
          v114 = (unsigned __int8 *)(v108 + 520 * v106 + 36);
          do
          {
            v115 = *v114;
            v114 += 28;
            v113 = sub_223A4EC9C(v113, ((unint64_t)v115 << 8) | 1, 0xFFu);
            --v112;
          }
          while (v112);
          v116 = v113 >> 8;
          if (!(_BYTE)v113)
            LOBYTE(v116) = -1;
          v10 = v901;
          v111 = v814;
          v110 = v858;
        }
        else
        {
          LOBYTE(v116) = -1;
        }
        *(_BYTE *)(v108 + 520 * v106 + 338) = v116;
        v5 = a1;
      }
      else
      {
        LOBYTE(v116) = *(_BYTE *)(v108 + 520 * v106 + 338);
      }
      v117 = v110 > v111;
    }
    v118 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v107));
    a4.f32[2] = (float)v10;
    v119.i64[0] = 0x3F0000003F000000;
    v119.i64[1] = 0x3F0000003F000000;
    v120 = vmulq_n_f32(vaddq_f32(a4, v119), v118);
    v942 = v120.i32[2];
    v941 = v120.i64[0];
    sub_223FFDF1C(v13[2], &v941, v116, v117, v118);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v121 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v121;
    v14 = **v121;
    v86 = v7 + 7;
    v10 = v9 + 1;
  }
  v122 = v11[122];
  if ((v122 & 0x10000000) != 0)
    v123 = 0x40000000;
  else
    v123 = 0x80000000;
  if ((v122 & 0x20000000) != 0)
    v124 = v123;
  else
    v124 = v122 & 0xCFFFFFFF;
  if ((v124 & 0x40000000) == 0)
  {
    v125 = v6 + 2;
    if ((v124 & 0x80000000) != 0)
    {
      LOBYTE(v134) = -1;
      v135 = 2;
    }
    else
    {
      v126 = *(_QWORD *)(v14 + 2448);
      v127 = v126 + 520 * v124;
      v128 = *(_QWORD *)(v127 + 312);
      v129 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v127 + 336))
      {
        *(_BYTE *)(v127 + 336) = 0;
        v130 = *(unsigned int *)(v127 + 4);
        if ((_DWORD)v130)
        {
          v815 = v129;
          v859 = v128;
          v902 = v10;
          v131 = 0;
          v132 = (unsigned __int8 *)(v126 + 520 * v124 + 36);
          do
          {
            v133 = *v132;
            v132 += 28;
            v131 = sub_223A4EC9C(v131, ((unint64_t)v133 << 8) | 1, 0xFFu);
            --v130;
          }
          while (v130);
          v134 = v131 >> 8;
          if (!(_BYTE)v131)
            LOBYTE(v134) = -1;
          v10 = v902;
          v129 = v815;
          v128 = v859;
        }
        else
        {
          LOBYTE(v134) = -1;
        }
        *(_BYTE *)(v126 + 520 * v124 + 338) = v134;
        v5 = a1;
      }
      else
      {
        LOBYTE(v134) = *(_BYTE *)(v126 + 520 * v124 + 338);
      }
      v135 = v128 > v129;
    }
    v136 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v125));
    a4.f32[2] = (float)v10;
    v137.i64[0] = 0x3F0000003F000000;
    v137.i64[1] = 0x3F0000003F000000;
    v138 = vmulq_n_f32(vaddq_f32(a4, v137), v136);
    v942 = v138.i32[2];
    v941 = v138.i64[0];
    sub_223FFDF1C(v13[2], &v941, v134, v135, v136);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v139 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v139;
    v14 = **v139;
    v86 = v7 + 7;
    v10 = v9 + 1;
  }
  v140 = v11[123];
  if ((v140 & 0x10000000) != 0)
    v141 = 0x40000000;
  else
    v141 = 0x80000000;
  if ((v140 & 0x20000000) != 0)
    v142 = v141;
  else
    v142 = v140 & 0xCFFFFFFF;
  if ((v142 & 0x40000000) == 0)
  {
    v143 = v6 + 3;
    if ((v142 & 0x80000000) != 0)
    {
      LOBYTE(v152) = -1;
      v153 = 2;
    }
    else
    {
      v144 = *(_QWORD *)(v14 + 2448);
      v145 = v144 + 520 * v142;
      v146 = *(_QWORD *)(v145 + 312);
      v147 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v145 + 336))
      {
        *(_BYTE *)(v145 + 336) = 0;
        v148 = *(unsigned int *)(v145 + 4);
        if ((_DWORD)v148)
        {
          v816 = v147;
          v860 = v146;
          v903 = v10;
          v149 = 0;
          v150 = (unsigned __int8 *)(v144 + 520 * v142 + 36);
          do
          {
            v151 = *v150;
            v150 += 28;
            v149 = sub_223A4EC9C(v149, ((unint64_t)v151 << 8) | 1, 0xFFu);
            --v148;
          }
          while (v148);
          v152 = v149 >> 8;
          if (!(_BYTE)v149)
            LOBYTE(v152) = -1;
          v10 = v903;
          v147 = v816;
          v146 = v860;
        }
        else
        {
          LOBYTE(v152) = -1;
        }
        *(_BYTE *)(v144 + 520 * v142 + 338) = v152;
        v5 = a1;
      }
      else
      {
        LOBYTE(v152) = *(_BYTE *)(v144 + 520 * v142 + 338);
      }
      v153 = v146 > v147;
    }
    v154 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v143));
    a4.f32[2] = (float)v10;
    v155.i64[0] = 0x3F0000003F000000;
    v155.i64[1] = 0x3F0000003F000000;
    v156 = vmulq_n_f32(vaddq_f32(a4, v155), v154);
    v942 = v156.i32[2];
    v941 = v156.i64[0];
    sub_223FFDF1C(v13[2], &v941, v152, v153, v154);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v157 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v157;
    v14 = **v157;
    v86 = v7 + 7;
    v10 = v9 + 1;
  }
  v158 = v11[124];
  if ((v158 & 0x10000000) != 0)
    v159 = 0x40000000;
  else
    v159 = 0x80000000;
  if ((v158 & 0x20000000) != 0)
    v160 = v159;
  else
    v160 = v158 & 0xCFFFFFFF;
  if ((v160 & 0x40000000) == 0)
  {
    v161 = v6 + 4;
    if ((v160 & 0x80000000) != 0)
    {
      LOBYTE(v170) = -1;
      v171 = 2;
    }
    else
    {
      v162 = *(_QWORD *)(v14 + 2448);
      v163 = v162 + 520 * v160;
      v164 = *(_QWORD *)(v163 + 312);
      v165 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v163 + 336))
      {
        *(_BYTE *)(v163 + 336) = 0;
        v166 = *(unsigned int *)(v163 + 4);
        if ((_DWORD)v166)
        {
          v817 = v165;
          v861 = v164;
          v904 = v10;
          v167 = 0;
          v168 = (unsigned __int8 *)(v162 + 520 * v160 + 36);
          do
          {
            v169 = *v168;
            v168 += 28;
            v167 = sub_223A4EC9C(v167, ((unint64_t)v169 << 8) | 1, 0xFFu);
            --v166;
          }
          while (v166);
          v170 = v167 >> 8;
          if (!(_BYTE)v167)
            LOBYTE(v170) = -1;
          v10 = v904;
          v165 = v817;
          v164 = v861;
        }
        else
        {
          LOBYTE(v170) = -1;
        }
        *(_BYTE *)(v162 + 520 * v160 + 338) = v170;
        v5 = a1;
      }
      else
      {
        LOBYTE(v170) = *(_BYTE *)(v162 + 520 * v160 + 338);
      }
      v171 = v164 > v165;
    }
    v172 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v161));
    a4.f32[2] = (float)v10;
    v173.i64[0] = 0x3F0000003F000000;
    v173.i64[1] = 0x3F0000003F000000;
    v174 = vmulq_n_f32(vaddq_f32(a4, v173), v172);
    v942 = v174.i32[2];
    v941 = v174.i64[0];
    sub_223FFDF1C(v13[2], &v941, v170, v171, v172);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v175 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v175;
    v14 = **v175;
    v86 = v7 + 7;
    v10 = v9 + 1;
  }
  v176 = v11[125];
  if ((v176 & 0x10000000) != 0)
    v177 = 0x40000000;
  else
    v177 = 0x80000000;
  if ((v176 & 0x20000000) != 0)
    v178 = v177;
  else
    v178 = v176 & 0xCFFFFFFF;
  if ((v178 & 0x40000000) == 0)
  {
    v179 = v6 + 5;
    if ((v178 & 0x80000000) != 0)
    {
      LOBYTE(v188) = -1;
      v189 = 2;
    }
    else
    {
      v180 = *(_QWORD *)(v14 + 2448);
      v181 = v180 + 520 * v178;
      v182 = *(_QWORD *)(v181 + 312);
      v183 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v181 + 336))
      {
        *(_BYTE *)(v181 + 336) = 0;
        v184 = *(unsigned int *)(v181 + 4);
        if ((_DWORD)v184)
        {
          v818 = v183;
          v862 = v182;
          v905 = v10;
          v185 = 0;
          v186 = (unsigned __int8 *)(v180 + 520 * v178 + 36);
          do
          {
            v187 = *v186;
            v186 += 28;
            v185 = sub_223A4EC9C(v185, ((unint64_t)v187 << 8) | 1, 0xFFu);
            --v184;
          }
          while (v184);
          v188 = v185 >> 8;
          if (!(_BYTE)v185)
            LOBYTE(v188) = -1;
          v10 = v905;
          v183 = v818;
          v182 = v862;
        }
        else
        {
          LOBYTE(v188) = -1;
        }
        *(_BYTE *)(v180 + 520 * v178 + 338) = v188;
        v5 = a1;
      }
      else
      {
        LOBYTE(v188) = *(_BYTE *)(v180 + 520 * v178 + 338);
      }
      v189 = v182 > v183;
    }
    v190 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v179));
    a4.f32[2] = (float)v10;
    v191.i64[0] = 0x3F0000003F000000;
    v191.i64[1] = 0x3F0000003F000000;
    v192 = vmulq_n_f32(vaddq_f32(a4, v191), v190);
    v942 = v192.i32[2];
    v941 = v192.i64[0];
    sub_223FFDF1C(v13[2], &v941, v188, v189, v190);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v193 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v193;
    v14 = **v193;
    v86 = v7 + 7;
    v10 = v9 + 1;
  }
  v194 = v11[126];
  if ((v194 & 0x10000000) != 0)
    v195 = 0x40000000;
  else
    v195 = 0x80000000;
  if ((v194 & 0x20000000) != 0)
    v196 = v195;
  else
    v196 = v194 & 0xCFFFFFFF;
  if ((v196 & 0x40000000) == 0)
  {
    v197 = v6 + 6;
    if ((v196 & 0x80000000) != 0)
    {
      LOBYTE(v206) = -1;
      v207 = 2;
    }
    else
    {
      v198 = *(_QWORD *)(v14 + 2448);
      v199 = v198 + 520 * v196;
      v200 = *(_QWORD *)(v199 + 312);
      v201 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v199 + 336))
      {
        *(_BYTE *)(v199 + 336) = 0;
        v202 = *(unsigned int *)(v199 + 4);
        if ((_DWORD)v202)
        {
          v819 = v201;
          v863 = v200;
          v906 = v10;
          v203 = 0;
          v204 = (unsigned __int8 *)(v198 + 520 * v196 + 36);
          do
          {
            v205 = *v204;
            v204 += 28;
            v203 = sub_223A4EC9C(v203, ((unint64_t)v205 << 8) | 1, 0xFFu);
            --v202;
          }
          while (v202);
          v206 = v203 >> 8;
          if (!(_BYTE)v203)
            LOBYTE(v206) = -1;
          v10 = v906;
          v201 = v819;
          v200 = v863;
        }
        else
        {
          LOBYTE(v206) = -1;
        }
        *(_BYTE *)(v198 + 520 * v196 + 338) = v206;
        v5 = a1;
      }
      else
      {
        LOBYTE(v206) = *(_BYTE *)(v198 + 520 * v196 + 338);
      }
      v207 = v200 > v201;
    }
    v208 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v197));
    a4.f32[2] = (float)v10;
    v209.i64[0] = 0x3F0000003F000000;
    v209.i64[1] = 0x3F0000003F000000;
    v210 = vmulq_n_f32(vaddq_f32(a4, v209), v208);
    v942 = v210.i32[2];
    v941 = v210.i64[0];
    sub_223FFDF1C(v13[2], &v941, v206, v207, v208);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v211 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v211;
    v14 = **v211;
    v86 = v7 + 7;
    v10 = v9 + 1;
  }
  v212 = v11[127];
  if ((v212 & 0x10000000) != 0)
    v213 = 0x40000000;
  else
    v213 = 0x80000000;
  if ((v212 & 0x20000000) != 0)
    v214 = v213;
  else
    v214 = v212 & 0xCFFFFFFF;
  if ((v214 & 0x40000000) == 0)
  {
    v215 = v6 + 7;
    if ((v214 & 0x80000000) != 0)
    {
      LOBYTE(v224) = -1;
      v225 = 2;
    }
    else
    {
      v216 = *(_QWORD *)(v14 + 2448);
      v217 = v216 + 520 * v214;
      v218 = *(_QWORD *)(v217 + 312);
      v219 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v217 + 336))
      {
        *(_BYTE *)(v217 + 336) = 0;
        v220 = *(unsigned int *)(v217 + 4);
        if ((_DWORD)v220)
        {
          v820 = v219;
          v864 = v218;
          v907 = v10;
          v221 = 0;
          v222 = (unsigned __int8 *)(v216 + 520 * v214 + 36);
          do
          {
            v223 = *v222;
            v222 += 28;
            v221 = sub_223A4EC9C(v221, ((unint64_t)v223 << 8) | 1, 0xFFu);
            --v220;
          }
          while (v220);
          v224 = v221 >> 8;
          if (!(_BYTE)v221)
            LOBYTE(v224) = -1;
          v10 = v907;
          v219 = v820;
          v218 = v864;
        }
        else
        {
          LOBYTE(v224) = -1;
        }
        *(_BYTE *)(v216 + 520 * v214 + 338) = v224;
        v5 = a1;
      }
      else
      {
        LOBYTE(v224) = *(_BYTE *)(v216 + 520 * v214 + 338);
      }
      v225 = v218 > v219;
    }
    v226 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v215));
    a4.f32[2] = (float)v10;
    v227.i64[0] = 0x3F0000003F000000;
    v227.i64[1] = 0x3F0000003F000000;
    v228 = vmulq_n_f32(vaddq_f32(a4, v227), v226);
    v942 = v228.i32[2];
    v941 = v228.i64[0];
    sub_223FFDF1C(v13[2], &v941, v224, v225, v226);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v229 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v229;
    v14 = **v229;
  }
  v230 = v9 + 2;
  v231 = v11[128];
  if ((v231 & 0x10000000) != 0)
    v232 = 0x40000000;
  else
    v232 = 0x80000000;
  if ((v231 & 0x20000000) != 0)
    v233 = v232;
  else
    v233 = v231 & 0xCFFFFFFF;
  if ((v233 & 0x40000000) == 0)
  {
    if ((v233 & 0x80000000) != 0)
    {
      LOBYTE(v242) = -1;
      v243 = 2;
    }
    else
    {
      v234 = *(_QWORD *)(v14 + 2448);
      v235 = v234 + 520 * v233;
      v236 = *(_QWORD *)(v235 + 312);
      v237 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v235 + 336))
      {
        *(_BYTE *)(v235 + 336) = 0;
        v238 = *(unsigned int *)(v235 + 4);
        if ((_DWORD)v238)
        {
          v821 = v237;
          v865 = v236;
          v908 = v230;
          v239 = 0;
          v240 = (unsigned __int8 *)(v234 + 520 * v233 + 36);
          do
          {
            v241 = *v240;
            v240 += 28;
            v239 = sub_223A4EC9C(v239, ((unint64_t)v241 << 8) | 1, 0xFFu);
            --v238;
          }
          while (v238);
          v242 = v239 >> 8;
          if (!(_BYTE)v239)
            LOBYTE(v242) = -1;
          v230 = v908;
          v237 = v821;
          v236 = v865;
        }
        else
        {
          LOBYTE(v242) = -1;
        }
        *(_BYTE *)(v234 + 520 * v233 + 338) = v242;
        v5 = a1;
      }
      else
      {
        LOBYTE(v242) = *(_BYTE *)(v234 + 520 * v233 + 338);
      }
      v243 = v236 > v237;
    }
    a4.f32[0] = (float)v6;
    a4.f32[1] = (float)v7;
    v244 = *(float *)(v14 + 144);
    a4.f32[2] = (float)v230;
    v245.i64[0] = 0x3F0000003F000000;
    v245.i64[1] = 0x3F0000003F000000;
    v246 = vmulq_n_f32(vaddq_f32(a4, v245), v244);
    v942 = v246.i32[2];
    v941 = v246.i64[0];
    sub_223FFDF1C(v13[2], &v941, v242, v243, v244);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v247 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v247;
    v14 = **v247;
    v230 = a2[2] + 2;
  }
  v248 = v11[129];
  if ((v248 & 0x10000000) != 0)
    v249 = 0x40000000;
  else
    v249 = 0x80000000;
  if ((v248 & 0x20000000) != 0)
    v250 = v249;
  else
    v250 = v248 & 0xCFFFFFFF;
  if ((v250 & 0x40000000) == 0)
  {
    v251 = v6 + 1;
    if ((v250 & 0x80000000) != 0)
    {
      LOBYTE(v260) = -1;
      v261 = 2;
    }
    else
    {
      v252 = *(_QWORD *)(v14 + 2448);
      v253 = v252 + 520 * v250;
      v254 = *(_QWORD *)(v253 + 312);
      v255 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v253 + 336))
      {
        *(_BYTE *)(v253 + 336) = 0;
        v256 = *(unsigned int *)(v253 + 4);
        if ((_DWORD)v256)
        {
          v822 = v255;
          v866 = v254;
          v909 = v230;
          v257 = 0;
          v258 = (unsigned __int8 *)(v252 + 520 * v250 + 36);
          do
          {
            v259 = *v258;
            v258 += 28;
            v257 = sub_223A4EC9C(v257, ((unint64_t)v259 << 8) | 1, 0xFFu);
            --v256;
          }
          while (v256);
          v260 = v257 >> 8;
          if (!(_BYTE)v257)
            LOBYTE(v260) = -1;
          v230 = v909;
          v255 = v822;
          v254 = v866;
        }
        else
        {
          LOBYTE(v260) = -1;
        }
        *(_BYTE *)(v252 + 520 * v250 + 338) = v260;
        v5 = a1;
      }
      else
      {
        LOBYTE(v260) = *(_BYTE *)(v252 + 520 * v250 + 338);
      }
      v261 = v254 > v255;
    }
    v262 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v251));
    a4.f32[2] = (float)v230;
    v263.i64[0] = 0x3F0000003F000000;
    v263.i64[1] = 0x3F0000003F000000;
    v264 = vmulq_n_f32(vaddq_f32(a4, v263), v262);
    v942 = v264.i32[2];
    v941 = v264.i64[0];
    sub_223FFDF1C(v13[2], &v941, v260, v261, v262);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v265 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v265;
    v14 = **v265;
    v230 = a2[2] + 2;
  }
  v266 = v11[130];
  if ((v266 & 0x10000000) != 0)
    v267 = 0x40000000;
  else
    v267 = 0x80000000;
  if ((v266 & 0x20000000) != 0)
    v268 = v267;
  else
    v268 = v266 & 0xCFFFFFFF;
  if ((v268 & 0x40000000) == 0)
  {
    v269 = v6 + 2;
    if ((v268 & 0x80000000) != 0)
    {
      LOBYTE(v278) = -1;
      v279 = 2;
    }
    else
    {
      v270 = *(_QWORD *)(v14 + 2448);
      v271 = v270 + 520 * v268;
      v272 = *(_QWORD *)(v271 + 312);
      v273 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v271 + 336))
      {
        *(_BYTE *)(v271 + 336) = 0;
        v274 = *(unsigned int *)(v271 + 4);
        if ((_DWORD)v274)
        {
          v823 = v273;
          v867 = v272;
          v910 = v230;
          v275 = 0;
          v276 = (unsigned __int8 *)(v270 + 520 * v268 + 36);
          do
          {
            v277 = *v276;
            v276 += 28;
            v275 = sub_223A4EC9C(v275, ((unint64_t)v277 << 8) | 1, 0xFFu);
            --v274;
          }
          while (v274);
          v278 = v275 >> 8;
          if (!(_BYTE)v275)
            LOBYTE(v278) = -1;
          v230 = v910;
          v273 = v823;
          v272 = v867;
        }
        else
        {
          LOBYTE(v278) = -1;
        }
        *(_BYTE *)(v270 + 520 * v268 + 338) = v278;
        v5 = a1;
      }
      else
      {
        LOBYTE(v278) = *(_BYTE *)(v270 + 520 * v268 + 338);
      }
      v279 = v272 > v273;
    }
    v280 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v269));
    a4.f32[2] = (float)v230;
    v281.i64[0] = 0x3F0000003F000000;
    v281.i64[1] = 0x3F0000003F000000;
    v282 = vmulq_n_f32(vaddq_f32(a4, v281), v280);
    v942 = v282.i32[2];
    v941 = v282.i64[0];
    sub_223FFDF1C(v13[2], &v941, v278, v279, v280);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v283 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v283;
    v14 = **v283;
    v230 = a2[2] + 2;
  }
  v284 = v11[131];
  if ((v284 & 0x10000000) != 0)
    v285 = 0x40000000;
  else
    v285 = 0x80000000;
  if ((v284 & 0x20000000) != 0)
    v286 = v285;
  else
    v286 = v284 & 0xCFFFFFFF;
  if ((v286 & 0x40000000) == 0)
  {
    v287 = v6 + 3;
    if ((v286 & 0x80000000) != 0)
    {
      LOBYTE(v296) = -1;
      v297 = 2;
    }
    else
    {
      v288 = *(_QWORD *)(v14 + 2448);
      v289 = v288 + 520 * v286;
      v290 = *(_QWORD *)(v289 + 312);
      v291 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v289 + 336))
      {
        *(_BYTE *)(v289 + 336) = 0;
        v292 = *(unsigned int *)(v289 + 4);
        if ((_DWORD)v292)
        {
          v824 = v291;
          v868 = v290;
          v911 = v230;
          v293 = 0;
          v294 = (unsigned __int8 *)(v288 + 520 * v286 + 36);
          do
          {
            v295 = *v294;
            v294 += 28;
            v293 = sub_223A4EC9C(v293, ((unint64_t)v295 << 8) | 1, 0xFFu);
            --v292;
          }
          while (v292);
          v296 = v293 >> 8;
          if (!(_BYTE)v293)
            LOBYTE(v296) = -1;
          v230 = v911;
          v291 = v824;
          v290 = v868;
        }
        else
        {
          LOBYTE(v296) = -1;
        }
        *(_BYTE *)(v288 + 520 * v286 + 338) = v296;
        v5 = a1;
      }
      else
      {
        LOBYTE(v296) = *(_BYTE *)(v288 + 520 * v286 + 338);
      }
      v297 = v290 > v291;
    }
    v298 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v287));
    a4.f32[2] = (float)v230;
    v299.i64[0] = 0x3F0000003F000000;
    v299.i64[1] = 0x3F0000003F000000;
    v300 = vmulq_n_f32(vaddq_f32(a4, v299), v298);
    v942 = v300.i32[2];
    v941 = v300.i64[0];
    sub_223FFDF1C(v13[2], &v941, v296, v297, v298);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v301 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v301;
    v14 = **v301;
    v230 = a2[2] + 2;
  }
  v302 = v11[132];
  if ((v302 & 0x10000000) != 0)
    v303 = 0x40000000;
  else
    v303 = 0x80000000;
  if ((v302 & 0x20000000) != 0)
    v304 = v303;
  else
    v304 = v302 & 0xCFFFFFFF;
  if ((v304 & 0x40000000) == 0)
  {
    v305 = v6 + 4;
    if ((v304 & 0x80000000) != 0)
    {
      LOBYTE(v314) = -1;
      v315 = 2;
    }
    else
    {
      v306 = *(_QWORD *)(v14 + 2448);
      v307 = v306 + 520 * v304;
      v308 = *(_QWORD *)(v307 + 312);
      v309 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v307 + 336))
      {
        *(_BYTE *)(v307 + 336) = 0;
        v310 = *(unsigned int *)(v307 + 4);
        if ((_DWORD)v310)
        {
          v825 = v309;
          v869 = v308;
          v912 = v230;
          v311 = 0;
          v312 = (unsigned __int8 *)(v306 + 520 * v304 + 36);
          do
          {
            v313 = *v312;
            v312 += 28;
            v311 = sub_223A4EC9C(v311, ((unint64_t)v313 << 8) | 1, 0xFFu);
            --v310;
          }
          while (v310);
          v314 = v311 >> 8;
          if (!(_BYTE)v311)
            LOBYTE(v314) = -1;
          v230 = v912;
          v309 = v825;
          v308 = v869;
        }
        else
        {
          LOBYTE(v314) = -1;
        }
        *(_BYTE *)(v306 + 520 * v304 + 338) = v314;
        v5 = a1;
      }
      else
      {
        LOBYTE(v314) = *(_BYTE *)(v306 + 520 * v304 + 338);
      }
      v315 = v308 > v309;
    }
    v316 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v305));
    a4.f32[2] = (float)v230;
    v317.i64[0] = 0x3F0000003F000000;
    v317.i64[1] = 0x3F0000003F000000;
    v318 = vmulq_n_f32(vaddq_f32(a4, v317), v316);
    v942 = v318.i32[2];
    v941 = v318.i64[0];
    sub_223FFDF1C(v13[2], &v941, v314, v315, v316);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v319 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v319;
    v14 = **v319;
    v230 = a2[2] + 2;
  }
  v320 = v11[133];
  if ((v320 & 0x10000000) != 0)
    v321 = 0x40000000;
  else
    v321 = 0x80000000;
  if ((v320 & 0x20000000) != 0)
    v322 = v321;
  else
    v322 = v320 & 0xCFFFFFFF;
  if ((v322 & 0x40000000) == 0)
  {
    v323 = v6 + 5;
    if ((v322 & 0x80000000) != 0)
    {
      LOBYTE(v332) = -1;
      v333 = 2;
    }
    else
    {
      v324 = *(_QWORD *)(v14 + 2448);
      v325 = v324 + 520 * v322;
      v326 = *(_QWORD *)(v325 + 312);
      v327 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v325 + 336))
      {
        *(_BYTE *)(v325 + 336) = 0;
        v328 = *(unsigned int *)(v325 + 4);
        if ((_DWORD)v328)
        {
          v826 = v327;
          v870 = v326;
          v913 = v230;
          v329 = 0;
          v330 = (unsigned __int8 *)(v324 + 520 * v322 + 36);
          do
          {
            v331 = *v330;
            v330 += 28;
            v329 = sub_223A4EC9C(v329, ((unint64_t)v331 << 8) | 1, 0xFFu);
            --v328;
          }
          while (v328);
          v332 = v329 >> 8;
          if (!(_BYTE)v329)
            LOBYTE(v332) = -1;
          v230 = v913;
          v327 = v826;
          v326 = v870;
        }
        else
        {
          LOBYTE(v332) = -1;
        }
        *(_BYTE *)(v324 + 520 * v322 + 338) = v332;
        v5 = a1;
      }
      else
      {
        LOBYTE(v332) = *(_BYTE *)(v324 + 520 * v322 + 338);
      }
      v333 = v326 > v327;
    }
    v334 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v323));
    a4.f32[2] = (float)v230;
    v335.i64[0] = 0x3F0000003F000000;
    v335.i64[1] = 0x3F0000003F000000;
    v336 = vmulq_n_f32(vaddq_f32(a4, v335), v334);
    v942 = v336.i32[2];
    v941 = v336.i64[0];
    sub_223FFDF1C(v13[2], &v941, v332, v333, v334);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v337 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v337;
    v14 = **v337;
    v230 = a2[2] + 2;
  }
  v338 = v11[134];
  if ((v338 & 0x10000000) != 0)
    v339 = 0x40000000;
  else
    v339 = 0x80000000;
  if ((v338 & 0x20000000) != 0)
    v340 = v339;
  else
    v340 = v338 & 0xCFFFFFFF;
  if ((v340 & 0x40000000) == 0)
  {
    v341 = v6 + 6;
    if ((v340 & 0x80000000) != 0)
    {
      LOBYTE(v350) = -1;
      v351 = 2;
    }
    else
    {
      v342 = *(_QWORD *)(v14 + 2448);
      v343 = v342 + 520 * v340;
      v344 = *(_QWORD *)(v343 + 312);
      v345 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v343 + 336))
      {
        *(_BYTE *)(v343 + 336) = 0;
        v346 = *(unsigned int *)(v343 + 4);
        if ((_DWORD)v346)
        {
          v827 = v345;
          v871 = v344;
          v914 = v230;
          v347 = 0;
          v348 = (unsigned __int8 *)(v342 + 520 * v340 + 36);
          do
          {
            v349 = *v348;
            v348 += 28;
            v347 = sub_223A4EC9C(v347, ((unint64_t)v349 << 8) | 1, 0xFFu);
            --v346;
          }
          while (v346);
          v350 = v347 >> 8;
          if (!(_BYTE)v347)
            LOBYTE(v350) = -1;
          v230 = v914;
          v345 = v827;
          v344 = v871;
        }
        else
        {
          LOBYTE(v350) = -1;
        }
        *(_BYTE *)(v342 + 520 * v340 + 338) = v350;
        v5 = a1;
      }
      else
      {
        LOBYTE(v350) = *(_BYTE *)(v342 + 520 * v340 + 338);
      }
      v351 = v344 > v345;
    }
    v352 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v341));
    a4.f32[2] = (float)v230;
    v353.i64[0] = 0x3F0000003F000000;
    v353.i64[1] = 0x3F0000003F000000;
    v354 = vmulq_n_f32(vaddq_f32(a4, v353), v352);
    v942 = v354.i32[2];
    v941 = v354.i64[0];
    sub_223FFDF1C(v13[2], &v941, v350, v351, v352);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v355 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v355;
    v14 = **v355;
    v230 = a2[2] + 2;
  }
  v356 = v11[135];
  if ((v356 & 0x10000000) != 0)
    v357 = 0x40000000;
  else
    v357 = 0x80000000;
  if ((v356 & 0x20000000) != 0)
    v358 = v357;
  else
    v358 = v356 & 0xCFFFFFFF;
  if ((v358 & 0x40000000) == 0)
  {
    v359 = v6 + 7;
    if ((v358 & 0x80000000) != 0)
    {
      LOBYTE(v368) = -1;
      v369 = 2;
    }
    else
    {
      v360 = *(_QWORD *)(v14 + 2448);
      v361 = v360 + 520 * v358;
      v362 = *(_QWORD *)(v361 + 312);
      v363 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v361 + 336))
      {
        *(_BYTE *)(v361 + 336) = 0;
        v364 = *(unsigned int *)(v361 + 4);
        if ((_DWORD)v364)
        {
          v828 = v363;
          v872 = v362;
          v915 = v230;
          v365 = 0;
          v366 = (unsigned __int8 *)(v360 + 520 * v358 + 36);
          do
          {
            v367 = *v366;
            v366 += 28;
            v365 = sub_223A4EC9C(v365, ((unint64_t)v367 << 8) | 1, 0xFFu);
            --v364;
          }
          while (v364);
          v368 = v365 >> 8;
          if (!(_BYTE)v365)
            LOBYTE(v368) = -1;
          v230 = v915;
          v363 = v828;
          v362 = v872;
        }
        else
        {
          LOBYTE(v368) = -1;
        }
        *(_BYTE *)(v360 + 520 * v358 + 338) = v368;
        v5 = a1;
      }
      else
      {
        LOBYTE(v368) = *(_BYTE *)(v360 + 520 * v358 + 338);
      }
      v369 = v362 > v363;
    }
    v370 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v359));
    a4.f32[2] = (float)v230;
    v371.i64[0] = 0x3F0000003F000000;
    v371.i64[1] = 0x3F0000003F000000;
    v372 = vmulq_n_f32(vaddq_f32(a4, v371), v370);
    v942 = v372.i32[2];
    v941 = v372.i64[0];
    sub_223FFDF1C(v13[2], &v941, v368, v369, v370);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v373 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v373;
    v14 = **v373;
    v230 = a2[2] + 2;
  }
  v374 = v7 + 1;
  v375 = v11[136];
  if ((v375 & 0x10000000) != 0)
    v376 = 0x40000000;
  else
    v376 = 0x80000000;
  if ((v375 & 0x20000000) != 0)
    v377 = v376;
  else
    v377 = v375 & 0xCFFFFFFF;
  if ((v377 & 0x40000000) == 0)
  {
    if ((v377 & 0x80000000) != 0)
    {
      LOBYTE(v386) = -1;
      v387 = 2;
    }
    else
    {
      v378 = *(_QWORD *)(v14 + 2448);
      v379 = v378 + 520 * v377;
      v380 = *(_QWORD *)(v379 + 312);
      v381 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v379 + 336))
      {
        *(_BYTE *)(v379 + 336) = 0;
        v382 = *(unsigned int *)(v379 + 4);
        if ((_DWORD)v382)
        {
          v829 = v381;
          v873 = v380;
          v916 = v230;
          v383 = 0;
          v384 = (unsigned __int8 *)(v378 + 520 * v377 + 36);
          do
          {
            v385 = *v384;
            v384 += 28;
            v383 = sub_223A4EC9C(v383, ((unint64_t)v385 << 8) | 1, 0xFFu);
            --v382;
          }
          while (v382);
          v386 = v383 >> 8;
          if (!(_BYTE)v383)
            LOBYTE(v386) = -1;
          v230 = v916;
          v381 = v829;
          v380 = v873;
        }
        else
        {
          LOBYTE(v386) = -1;
        }
        *(_BYTE *)(v378 + 520 * v377 + 338) = v386;
        v5 = a1;
      }
      else
      {
        LOBYTE(v386) = *(_BYTE *)(v378 + 520 * v377 + 338);
      }
      v387 = v380 > v381;
    }
    v388 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v6));
    a4.f32[2] = (float)v230;
    v389.i64[0] = 0x3F0000003F000000;
    v389.i64[1] = 0x3F0000003F000000;
    v390 = vmulq_n_f32(vaddq_f32(a4, v389), v388);
    v942 = v390.i32[2];
    v941 = v390.i64[0];
    sub_223FFDF1C(v13[2], &v941, v386, v387, v388);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v391 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v391;
    v14 = **v391;
    v374 = v7 + 1;
    v230 = a2[2] + 2;
  }
  v392 = v11[137];
  if ((v392 & 0x10000000) != 0)
    v393 = 0x40000000;
  else
    v393 = 0x80000000;
  if ((v392 & 0x20000000) != 0)
    v394 = v393;
  else
    v394 = v392 & 0xCFFFFFFF;
  if ((v394 & 0x40000000) == 0)
  {
    v395 = v6 + 1;
    if ((v394 & 0x80000000) != 0)
    {
      LOBYTE(v404) = -1;
      v405 = 2;
    }
    else
    {
      v396 = *(_QWORD *)(v14 + 2448);
      v397 = v396 + 520 * v394;
      v398 = *(_QWORD *)(v397 + 312);
      v399 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v397 + 336))
      {
        *(_BYTE *)(v397 + 336) = 0;
        v400 = *(unsigned int *)(v397 + 4);
        if ((_DWORD)v400)
        {
          v830 = v399;
          v874 = v398;
          v917 = v230;
          v401 = 0;
          v402 = (unsigned __int8 *)(v396 + 520 * v394 + 36);
          do
          {
            v403 = *v402;
            v402 += 28;
            v401 = sub_223A4EC9C(v401, ((unint64_t)v403 << 8) | 1, 0xFFu);
            --v400;
          }
          while (v400);
          v404 = v401 >> 8;
          if (!(_BYTE)v401)
            LOBYTE(v404) = -1;
          v230 = v917;
          v399 = v830;
          v398 = v874;
        }
        else
        {
          LOBYTE(v404) = -1;
        }
        *(_BYTE *)(v396 + 520 * v394 + 338) = v404;
        v5 = a1;
      }
      else
      {
        LOBYTE(v404) = *(_BYTE *)(v396 + 520 * v394 + 338);
      }
      v405 = v398 > v399;
    }
    v406 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v395));
    a4.f32[2] = (float)v230;
    v407.i64[0] = 0x3F0000003F000000;
    v407.i64[1] = 0x3F0000003F000000;
    v408 = vmulq_n_f32(vaddq_f32(a4, v407), v406);
    v942 = v408.i32[2];
    v941 = v408.i64[0];
    sub_223FFDF1C(v13[2], &v941, v404, v405, v406);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v409 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v409;
    v14 = **v409;
    v374 = v7 + 1;
    v230 = a2[2] + 2;
  }
  v410 = v11[138];
  if ((v410 & 0x10000000) != 0)
    v411 = 0x40000000;
  else
    v411 = 0x80000000;
  if ((v410 & 0x20000000) != 0)
    v412 = v411;
  else
    v412 = v410 & 0xCFFFFFFF;
  if ((v412 & 0x40000000) == 0)
  {
    v413 = v6 + 2;
    if ((v412 & 0x80000000) != 0)
    {
      LOBYTE(v422) = -1;
      v423 = 2;
    }
    else
    {
      v414 = *(_QWORD *)(v14 + 2448);
      v415 = v414 + 520 * v412;
      v416 = *(_QWORD *)(v415 + 312);
      v417 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v415 + 336))
      {
        *(_BYTE *)(v415 + 336) = 0;
        v418 = *(unsigned int *)(v415 + 4);
        if ((_DWORD)v418)
        {
          v831 = v417;
          v875 = v416;
          v918 = v230;
          v419 = 0;
          v420 = (unsigned __int8 *)(v414 + 520 * v412 + 36);
          do
          {
            v421 = *v420;
            v420 += 28;
            v419 = sub_223A4EC9C(v419, ((unint64_t)v421 << 8) | 1, 0xFFu);
            --v418;
          }
          while (v418);
          v422 = v419 >> 8;
          if (!(_BYTE)v419)
            LOBYTE(v422) = -1;
          v230 = v918;
          v417 = v831;
          v416 = v875;
        }
        else
        {
          LOBYTE(v422) = -1;
        }
        *(_BYTE *)(v414 + 520 * v412 + 338) = v422;
        v5 = a1;
      }
      else
      {
        LOBYTE(v422) = *(_BYTE *)(v414 + 520 * v412 + 338);
      }
      v423 = v416 > v417;
    }
    v424 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v413));
    a4.f32[2] = (float)v230;
    v425.i64[0] = 0x3F0000003F000000;
    v425.i64[1] = 0x3F0000003F000000;
    v426 = vmulq_n_f32(vaddq_f32(a4, v425), v424);
    v942 = v426.i32[2];
    v941 = v426.i64[0];
    sub_223FFDF1C(v13[2], &v941, v422, v423, v424);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v427 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v427;
    v14 = **v427;
    v374 = v7 + 1;
    v230 = a2[2] + 2;
  }
  v428 = v11[139];
  if ((v428 & 0x10000000) != 0)
    v429 = 0x40000000;
  else
    v429 = 0x80000000;
  if ((v428 & 0x20000000) != 0)
    v430 = v429;
  else
    v430 = v428 & 0xCFFFFFFF;
  if ((v430 & 0x40000000) == 0)
  {
    v431 = v6 + 3;
    if ((v430 & 0x80000000) != 0)
    {
      LOBYTE(v440) = -1;
      v441 = 2;
    }
    else
    {
      v432 = *(_QWORD *)(v14 + 2448);
      v433 = v432 + 520 * v430;
      v434 = *(_QWORD *)(v433 + 312);
      v435 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v433 + 336))
      {
        *(_BYTE *)(v433 + 336) = 0;
        v436 = *(unsigned int *)(v433 + 4);
        if ((_DWORD)v436)
        {
          v832 = v435;
          v876 = v434;
          v919 = v230;
          v437 = 0;
          v438 = (unsigned __int8 *)(v432 + 520 * v430 + 36);
          do
          {
            v439 = *v438;
            v438 += 28;
            v437 = sub_223A4EC9C(v437, ((unint64_t)v439 << 8) | 1, 0xFFu);
            --v436;
          }
          while (v436);
          v440 = v437 >> 8;
          if (!(_BYTE)v437)
            LOBYTE(v440) = -1;
          v230 = v919;
          v435 = v832;
          v434 = v876;
        }
        else
        {
          LOBYTE(v440) = -1;
        }
        *(_BYTE *)(v432 + 520 * v430 + 338) = v440;
        v5 = a1;
      }
      else
      {
        LOBYTE(v440) = *(_BYTE *)(v432 + 520 * v430 + 338);
      }
      v441 = v434 > v435;
    }
    v442 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v431));
    a4.f32[2] = (float)v230;
    v443.i64[0] = 0x3F0000003F000000;
    v443.i64[1] = 0x3F0000003F000000;
    v444 = vmulq_n_f32(vaddq_f32(a4, v443), v442);
    v942 = v444.i32[2];
    v941 = v444.i64[0];
    sub_223FFDF1C(v13[2], &v941, v440, v441, v442);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v445 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v445;
    v14 = **v445;
    v374 = v7 + 1;
    v230 = a2[2] + 2;
  }
  v446 = v11[140];
  if ((v446 & 0x10000000) != 0)
    v447 = 0x40000000;
  else
    v447 = 0x80000000;
  if ((v446 & 0x20000000) != 0)
    v448 = v447;
  else
    v448 = v446 & 0xCFFFFFFF;
  if ((v448 & 0x40000000) == 0)
  {
    v449 = v6 + 4;
    if ((v448 & 0x80000000) != 0)
    {
      LOBYTE(v458) = -1;
      v459 = 2;
    }
    else
    {
      v450 = *(_QWORD *)(v14 + 2448);
      v451 = v450 + 520 * v448;
      v452 = *(_QWORD *)(v451 + 312);
      v453 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v451 + 336))
      {
        *(_BYTE *)(v451 + 336) = 0;
        v454 = *(unsigned int *)(v451 + 4);
        if ((_DWORD)v454)
        {
          v833 = v453;
          v877 = v452;
          v920 = v230;
          v455 = 0;
          v456 = (unsigned __int8 *)(v450 + 520 * v448 + 36);
          do
          {
            v457 = *v456;
            v456 += 28;
            v455 = sub_223A4EC9C(v455, ((unint64_t)v457 << 8) | 1, 0xFFu);
            --v454;
          }
          while (v454);
          v458 = v455 >> 8;
          if (!(_BYTE)v455)
            LOBYTE(v458) = -1;
          v230 = v920;
          v453 = v833;
          v452 = v877;
        }
        else
        {
          LOBYTE(v458) = -1;
        }
        *(_BYTE *)(v450 + 520 * v448 + 338) = v458;
        v5 = a1;
      }
      else
      {
        LOBYTE(v458) = *(_BYTE *)(v450 + 520 * v448 + 338);
      }
      v459 = v452 > v453;
    }
    v460 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v449));
    a4.f32[2] = (float)v230;
    v461.i64[0] = 0x3F0000003F000000;
    v461.i64[1] = 0x3F0000003F000000;
    v462 = vmulq_n_f32(vaddq_f32(a4, v461), v460);
    v942 = v462.i32[2];
    v941 = v462.i64[0];
    sub_223FFDF1C(v13[2], &v941, v458, v459, v460);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v463 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v463;
    v14 = **v463;
    v374 = v7 + 1;
    v230 = a2[2] + 2;
  }
  v464 = v11[141];
  if ((v464 & 0x10000000) != 0)
    v465 = 0x40000000;
  else
    v465 = 0x80000000;
  if ((v464 & 0x20000000) != 0)
    v466 = v465;
  else
    v466 = v464 & 0xCFFFFFFF;
  if ((v466 & 0x40000000) == 0)
  {
    v467 = v6 + 5;
    if ((v466 & 0x80000000) != 0)
    {
      LOBYTE(v476) = -1;
      v477 = 2;
    }
    else
    {
      v468 = *(_QWORD *)(v14 + 2448);
      v469 = v468 + 520 * v466;
      v470 = *(_QWORD *)(v469 + 312);
      v471 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v469 + 336))
      {
        *(_BYTE *)(v469 + 336) = 0;
        v472 = *(unsigned int *)(v469 + 4);
        if ((_DWORD)v472)
        {
          v834 = v471;
          v878 = v470;
          v921 = v230;
          v473 = 0;
          v474 = (unsigned __int8 *)(v468 + 520 * v466 + 36);
          do
          {
            v475 = *v474;
            v474 += 28;
            v473 = sub_223A4EC9C(v473, ((unint64_t)v475 << 8) | 1, 0xFFu);
            --v472;
          }
          while (v472);
          v476 = v473 >> 8;
          if (!(_BYTE)v473)
            LOBYTE(v476) = -1;
          v230 = v921;
          v471 = v834;
          v470 = v878;
        }
        else
        {
          LOBYTE(v476) = -1;
        }
        *(_BYTE *)(v468 + 520 * v466 + 338) = v476;
        v5 = a1;
      }
      else
      {
        LOBYTE(v476) = *(_BYTE *)(v468 + 520 * v466 + 338);
      }
      v477 = v470 > v471;
    }
    v478 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v467));
    a4.f32[2] = (float)v230;
    v479.i64[0] = 0x3F0000003F000000;
    v479.i64[1] = 0x3F0000003F000000;
    v480 = vmulq_n_f32(vaddq_f32(a4, v479), v478);
    v942 = v480.i32[2];
    v941 = v480.i64[0];
    sub_223FFDF1C(v13[2], &v941, v476, v477, v478);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v481 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v481;
    v14 = **v481;
    v374 = v7 + 1;
    v230 = a2[2] + 2;
  }
  v482 = v11[142];
  if ((v482 & 0x10000000) != 0)
    v483 = 0x40000000;
  else
    v483 = 0x80000000;
  if ((v482 & 0x20000000) != 0)
    v484 = v483;
  else
    v484 = v482 & 0xCFFFFFFF;
  if ((v484 & 0x40000000) == 0)
  {
    v485 = v6 + 6;
    if ((v484 & 0x80000000) != 0)
    {
      LOBYTE(v494) = -1;
      v495 = 2;
    }
    else
    {
      v486 = *(_QWORD *)(v14 + 2448);
      v487 = v486 + 520 * v484;
      v488 = *(_QWORD *)(v487 + 312);
      v489 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v487 + 336))
      {
        *(_BYTE *)(v487 + 336) = 0;
        v490 = *(unsigned int *)(v487 + 4);
        if ((_DWORD)v490)
        {
          v835 = v489;
          v879 = v488;
          v922 = v230;
          v491 = 0;
          v492 = (unsigned __int8 *)(v486 + 520 * v484 + 36);
          do
          {
            v493 = *v492;
            v492 += 28;
            v491 = sub_223A4EC9C(v491, ((unint64_t)v493 << 8) | 1, 0xFFu);
            --v490;
          }
          while (v490);
          v494 = v491 >> 8;
          if (!(_BYTE)v491)
            LOBYTE(v494) = -1;
          v230 = v922;
          v489 = v835;
          v488 = v879;
        }
        else
        {
          LOBYTE(v494) = -1;
        }
        *(_BYTE *)(v486 + 520 * v484 + 338) = v494;
        v5 = a1;
      }
      else
      {
        LOBYTE(v494) = *(_BYTE *)(v486 + 520 * v484 + 338);
      }
      v495 = v488 > v489;
    }
    v496 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v485));
    a4.f32[2] = (float)v230;
    v497.i64[0] = 0x3F0000003F000000;
    v497.i64[1] = 0x3F0000003F000000;
    v498 = vmulq_n_f32(vaddq_f32(a4, v497), v496);
    v942 = v498.i32[2];
    v941 = v498.i64[0];
    sub_223FFDF1C(v13[2], &v941, v494, v495, v496);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v499 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v499;
    v14 = **v499;
    v374 = v7 + 1;
    v230 = a2[2] + 2;
  }
  v500 = v11[143];
  if ((v500 & 0x10000000) != 0)
    v501 = 0x40000000;
  else
    v501 = 0x80000000;
  if ((v500 & 0x20000000) != 0)
    v502 = v501;
  else
    v502 = v500 & 0xCFFFFFFF;
  if ((v502 & 0x40000000) == 0)
  {
    v503 = v6 + 7;
    if ((v502 & 0x80000000) != 0)
    {
      LOBYTE(v512) = -1;
      v513 = 2;
    }
    else
    {
      v504 = *(_QWORD *)(v14 + 2448);
      v505 = v504 + 520 * v502;
      v506 = *(_QWORD *)(v505 + 312);
      v507 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v505 + 336))
      {
        *(_BYTE *)(v505 + 336) = 0;
        v508 = *(unsigned int *)(v505 + 4);
        if ((_DWORD)v508)
        {
          v836 = v507;
          v880 = v506;
          v923 = v230;
          v509 = 0;
          v510 = (unsigned __int8 *)(v504 + 520 * v502 + 36);
          do
          {
            v511 = *v510;
            v510 += 28;
            v509 = sub_223A4EC9C(v509, ((unint64_t)v511 << 8) | 1, 0xFFu);
            --v508;
          }
          while (v508);
          v512 = v509 >> 8;
          if (!(_BYTE)v509)
            LOBYTE(v512) = -1;
          v230 = v923;
          v507 = v836;
          v506 = v880;
        }
        else
        {
          LOBYTE(v512) = -1;
        }
        *(_BYTE *)(v504 + 520 * v502 + 338) = v512;
        v5 = a1;
      }
      else
      {
        LOBYTE(v512) = *(_BYTE *)(v504 + 520 * v502 + 338);
      }
      v513 = v506 > v507;
    }
    v514 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v503));
    a4.f32[2] = (float)v230;
    v515.i64[0] = 0x3F0000003F000000;
    v515.i64[1] = 0x3F0000003F000000;
    v516 = vmulq_n_f32(vaddq_f32(a4, v515), v514);
    v942 = v516.i32[2];
    v941 = v516.i64[0];
    sub_223FFDF1C(v13[2], &v941, v512, v513, v514);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v517 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v517;
    v14 = **v517;
    v230 = a2[2] + 2;
  }
  v518 = v7 + 2;
  v519 = v11[144];
  if ((v519 & 0x10000000) != 0)
    v520 = 0x40000000;
  else
    v520 = 0x80000000;
  if ((v519 & 0x20000000) != 0)
    v521 = v520;
  else
    v521 = v519 & 0xCFFFFFFF;
  if ((v521 & 0x40000000) == 0)
  {
    if ((v521 & 0x80000000) != 0)
    {
      LOBYTE(v530) = -1;
      v531 = 2;
    }
    else
    {
      v522 = *(_QWORD *)(v14 + 2448);
      v523 = v522 + 520 * v521;
      v524 = *(_QWORD *)(v523 + 312);
      v525 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v523 + 336))
      {
        *(_BYTE *)(v523 + 336) = 0;
        v526 = *(unsigned int *)(v523 + 4);
        if ((_DWORD)v526)
        {
          v837 = v525;
          v881 = v524;
          v924 = v230;
          v527 = 0;
          v528 = (unsigned __int8 *)(v522 + 520 * v521 + 36);
          do
          {
            v529 = *v528;
            v528 += 28;
            v527 = sub_223A4EC9C(v527, ((unint64_t)v529 << 8) | 1, 0xFFu);
            --v526;
          }
          while (v526);
          v530 = v527 >> 8;
          if (!(_BYTE)v527)
            LOBYTE(v530) = -1;
          v230 = v924;
          v525 = v837;
          v524 = v881;
        }
        else
        {
          LOBYTE(v530) = -1;
        }
        *(_BYTE *)(v522 + 520 * v521 + 338) = v530;
        v5 = a1;
      }
      else
      {
        LOBYTE(v530) = *(_BYTE *)(v522 + 520 * v521 + 338);
      }
      v531 = v524 > v525;
    }
    v532 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v6));
    a4.f32[2] = (float)v230;
    v533.i64[0] = 0x3F0000003F000000;
    v533.i64[1] = 0x3F0000003F000000;
    v534 = vmulq_n_f32(vaddq_f32(a4, v533), v532);
    v942 = v534.i32[2];
    v941 = v534.i64[0];
    sub_223FFDF1C(v13[2], &v941, v530, v531, v532);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v535 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v535;
    v14 = **v535;
    v518 = v7 + 2;
    v230 = a2[2] + 2;
  }
  v536 = v11[145];
  if ((v536 & 0x10000000) != 0)
    v537 = 0x40000000;
  else
    v537 = 0x80000000;
  if ((v536 & 0x20000000) != 0)
    v538 = v537;
  else
    v538 = v536 & 0xCFFFFFFF;
  if ((v538 & 0x40000000) == 0)
  {
    v539 = v6 + 1;
    if ((v538 & 0x80000000) != 0)
    {
      LOBYTE(v548) = -1;
      v549 = 2;
    }
    else
    {
      v540 = *(_QWORD *)(v14 + 2448);
      v541 = v540 + 520 * v538;
      v542 = *(_QWORD *)(v541 + 312);
      v543 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v541 + 336))
      {
        *(_BYTE *)(v541 + 336) = 0;
        v544 = *(unsigned int *)(v541 + 4);
        if ((_DWORD)v544)
        {
          v838 = v543;
          v882 = v542;
          v925 = v230;
          v545 = 0;
          v546 = (unsigned __int8 *)(v540 + 520 * v538 + 36);
          do
          {
            v547 = *v546;
            v546 += 28;
            v545 = sub_223A4EC9C(v545, ((unint64_t)v547 << 8) | 1, 0xFFu);
            --v544;
          }
          while (v544);
          v548 = v545 >> 8;
          if (!(_BYTE)v545)
            LOBYTE(v548) = -1;
          v230 = v925;
          v543 = v838;
          v542 = v882;
        }
        else
        {
          LOBYTE(v548) = -1;
        }
        *(_BYTE *)(v540 + 520 * v538 + 338) = v548;
        v5 = a1;
      }
      else
      {
        LOBYTE(v548) = *(_BYTE *)(v540 + 520 * v538 + 338);
      }
      v549 = v542 > v543;
    }
    v550 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v539));
    a4.f32[2] = (float)v230;
    v551.i64[0] = 0x3F0000003F000000;
    v551.i64[1] = 0x3F0000003F000000;
    v552 = vmulq_n_f32(vaddq_f32(a4, v551), v550);
    v942 = v552.i32[2];
    v941 = v552.i64[0];
    sub_223FFDF1C(v13[2], &v941, v548, v549, v550);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v553 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v553;
    v14 = **v553;
    v518 = v7 + 2;
    v230 = a2[2] + 2;
  }
  v554 = v11[146];
  if ((v554 & 0x10000000) != 0)
    v555 = 0x40000000;
  else
    v555 = 0x80000000;
  if ((v554 & 0x20000000) != 0)
    v556 = v555;
  else
    v556 = v554 & 0xCFFFFFFF;
  if ((v556 & 0x40000000) == 0)
  {
    v557 = v6 + 2;
    if ((v556 & 0x80000000) != 0)
    {
      LOBYTE(v566) = -1;
      v567 = 2;
    }
    else
    {
      v558 = *(_QWORD *)(v14 + 2448);
      v559 = v558 + 520 * v556;
      v560 = *(_QWORD *)(v559 + 312);
      v561 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v559 + 336))
      {
        *(_BYTE *)(v559 + 336) = 0;
        v562 = *(unsigned int *)(v559 + 4);
        if ((_DWORD)v562)
        {
          v839 = v561;
          v883 = v560;
          v926 = v230;
          v563 = 0;
          v564 = (unsigned __int8 *)(v558 + 520 * v556 + 36);
          do
          {
            v565 = *v564;
            v564 += 28;
            v563 = sub_223A4EC9C(v563, ((unint64_t)v565 << 8) | 1, 0xFFu);
            --v562;
          }
          while (v562);
          v566 = v563 >> 8;
          if (!(_BYTE)v563)
            LOBYTE(v566) = -1;
          v230 = v926;
          v561 = v839;
          v560 = v883;
        }
        else
        {
          LOBYTE(v566) = -1;
        }
        *(_BYTE *)(v558 + 520 * v556 + 338) = v566;
        v5 = a1;
      }
      else
      {
        LOBYTE(v566) = *(_BYTE *)(v558 + 520 * v556 + 338);
      }
      v567 = v560 > v561;
    }
    v568 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v557));
    a4.f32[2] = (float)v230;
    v569.i64[0] = 0x3F0000003F000000;
    v569.i64[1] = 0x3F0000003F000000;
    v570 = vmulq_n_f32(vaddq_f32(a4, v569), v568);
    v942 = v570.i32[2];
    v941 = v570.i64[0];
    sub_223FFDF1C(v13[2], &v941, v566, v567, v568);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v571 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v571;
    v14 = **v571;
    v518 = v7 + 2;
    v230 = a2[2] + 2;
  }
  v572 = v11[147];
  if ((v572 & 0x10000000) != 0)
    v573 = 0x40000000;
  else
    v573 = 0x80000000;
  if ((v572 & 0x20000000) != 0)
    v574 = v573;
  else
    v574 = v572 & 0xCFFFFFFF;
  if ((v574 & 0x40000000) == 0)
  {
    v575 = v6 + 3;
    if ((v574 & 0x80000000) != 0)
    {
      LOBYTE(v584) = -1;
      v585 = 2;
    }
    else
    {
      v576 = *(_QWORD *)(v14 + 2448);
      v577 = v576 + 520 * v574;
      v578 = *(_QWORD *)(v577 + 312);
      v579 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v577 + 336))
      {
        *(_BYTE *)(v577 + 336) = 0;
        v580 = *(unsigned int *)(v577 + 4);
        if ((_DWORD)v580)
        {
          v840 = v579;
          v884 = v578;
          v927 = v230;
          v581 = 0;
          v582 = (unsigned __int8 *)(v576 + 520 * v574 + 36);
          do
          {
            v583 = *v582;
            v582 += 28;
            v581 = sub_223A4EC9C(v581, ((unint64_t)v583 << 8) | 1, 0xFFu);
            --v580;
          }
          while (v580);
          v584 = v581 >> 8;
          if (!(_BYTE)v581)
            LOBYTE(v584) = -1;
          v230 = v927;
          v579 = v840;
          v578 = v884;
        }
        else
        {
          LOBYTE(v584) = -1;
        }
        *(_BYTE *)(v576 + 520 * v574 + 338) = v584;
        v5 = a1;
      }
      else
      {
        LOBYTE(v584) = *(_BYTE *)(v576 + 520 * v574 + 338);
      }
      v585 = v578 > v579;
    }
    v586 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v575));
    a4.f32[2] = (float)v230;
    v587.i64[0] = 0x3F0000003F000000;
    v587.i64[1] = 0x3F0000003F000000;
    v588 = vmulq_n_f32(vaddq_f32(a4, v587), v586);
    v942 = v588.i32[2];
    v941 = v588.i64[0];
    sub_223FFDF1C(v13[2], &v941, v584, v585, v586);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v589 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v589;
    v14 = **v589;
    v518 = v7 + 2;
    v230 = a2[2] + 2;
  }
  v590 = v11[148];
  if ((v590 & 0x10000000) != 0)
    v591 = 0x40000000;
  else
    v591 = 0x80000000;
  if ((v590 & 0x20000000) != 0)
    v592 = v591;
  else
    v592 = v590 & 0xCFFFFFFF;
  if ((v592 & 0x40000000) == 0)
  {
    v593 = v6 + 4;
    if ((v592 & 0x80000000) != 0)
    {
      LOBYTE(v602) = -1;
      v603 = 2;
    }
    else
    {
      v594 = *(_QWORD *)(v14 + 2448);
      v595 = v594 + 520 * v592;
      v596 = *(_QWORD *)(v595 + 312);
      v597 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v595 + 336))
      {
        *(_BYTE *)(v595 + 336) = 0;
        v598 = *(unsigned int *)(v595 + 4);
        if ((_DWORD)v598)
        {
          v841 = v597;
          v885 = v596;
          v928 = v230;
          v599 = 0;
          v600 = (unsigned __int8 *)(v594 + 520 * v592 + 36);
          do
          {
            v601 = *v600;
            v600 += 28;
            v599 = sub_223A4EC9C(v599, ((unint64_t)v601 << 8) | 1, 0xFFu);
            --v598;
          }
          while (v598);
          v602 = v599 >> 8;
          if (!(_BYTE)v599)
            LOBYTE(v602) = -1;
          v230 = v928;
          v597 = v841;
          v596 = v885;
        }
        else
        {
          LOBYTE(v602) = -1;
        }
        *(_BYTE *)(v594 + 520 * v592 + 338) = v602;
        v5 = a1;
      }
      else
      {
        LOBYTE(v602) = *(_BYTE *)(v594 + 520 * v592 + 338);
      }
      v603 = v596 > v597;
    }
    v604 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v593));
    a4.f32[2] = (float)v230;
    v605.i64[0] = 0x3F0000003F000000;
    v605.i64[1] = 0x3F0000003F000000;
    v606 = vmulq_n_f32(vaddq_f32(a4, v605), v604);
    v942 = v606.i32[2];
    v941 = v606.i64[0];
    sub_223FFDF1C(v13[2], &v941, v602, v603, v604);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v607 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v607;
    v14 = **v607;
    v518 = v7 + 2;
    v230 = a2[2] + 2;
  }
  v608 = v11[149];
  if ((v608 & 0x10000000) != 0)
    v609 = 0x40000000;
  else
    v609 = 0x80000000;
  if ((v608 & 0x20000000) != 0)
    v610 = v609;
  else
    v610 = v608 & 0xCFFFFFFF;
  if ((v610 & 0x40000000) == 0)
  {
    v611 = v6 + 5;
    if ((v610 & 0x80000000) != 0)
    {
      LOBYTE(v620) = -1;
      v621 = 2;
    }
    else
    {
      v612 = *(_QWORD *)(v14 + 2448);
      v613 = v612 + 520 * v610;
      v614 = *(_QWORD *)(v613 + 312);
      v615 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v613 + 336))
      {
        *(_BYTE *)(v613 + 336) = 0;
        v616 = *(unsigned int *)(v613 + 4);
        if ((_DWORD)v616)
        {
          v842 = v615;
          v886 = v614;
          v929 = v230;
          v617 = 0;
          v618 = (unsigned __int8 *)(v612 + 520 * v610 + 36);
          do
          {
            v619 = *v618;
            v618 += 28;
            v617 = sub_223A4EC9C(v617, ((unint64_t)v619 << 8) | 1, 0xFFu);
            --v616;
          }
          while (v616);
          v620 = v617 >> 8;
          if (!(_BYTE)v617)
            LOBYTE(v620) = -1;
          v230 = v929;
          v615 = v842;
          v614 = v886;
        }
        else
        {
          LOBYTE(v620) = -1;
        }
        *(_BYTE *)(v612 + 520 * v610 + 338) = v620;
        v5 = a1;
      }
      else
      {
        LOBYTE(v620) = *(_BYTE *)(v612 + 520 * v610 + 338);
      }
      v621 = v614 > v615;
    }
    v622 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v611));
    a4.f32[2] = (float)v230;
    v623.i64[0] = 0x3F0000003F000000;
    v623.i64[1] = 0x3F0000003F000000;
    v624 = vmulq_n_f32(vaddq_f32(a4, v623), v622);
    v942 = v624.i32[2];
    v941 = v624.i64[0];
    sub_223FFDF1C(v13[2], &v941, v620, v621, v622);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v625 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v625;
    v14 = **v625;
    v518 = v7 + 2;
    v230 = a2[2] + 2;
  }
  v626 = v11[150];
  if ((v626 & 0x10000000) != 0)
    v627 = 0x40000000;
  else
    v627 = 0x80000000;
  if ((v626 & 0x20000000) != 0)
    v628 = v627;
  else
    v628 = v626 & 0xCFFFFFFF;
  if ((v628 & 0x40000000) == 0)
  {
    v629 = v6 + 6;
    if ((v628 & 0x80000000) != 0)
    {
      LOBYTE(v638) = -1;
      v639 = 2;
    }
    else
    {
      v630 = *(_QWORD *)(v14 + 2448);
      v631 = v630 + 520 * v628;
      v632 = *(_QWORD *)(v631 + 312);
      v633 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v631 + 336))
      {
        *(_BYTE *)(v631 + 336) = 0;
        v634 = *(unsigned int *)(v631 + 4);
        if ((_DWORD)v634)
        {
          v843 = v633;
          v887 = v632;
          v930 = v230;
          v635 = 0;
          v636 = (unsigned __int8 *)(v630 + 520 * v628 + 36);
          do
          {
            v637 = *v636;
            v636 += 28;
            v635 = sub_223A4EC9C(v635, ((unint64_t)v637 << 8) | 1, 0xFFu);
            --v634;
          }
          while (v634);
          v638 = v635 >> 8;
          if (!(_BYTE)v635)
            LOBYTE(v638) = -1;
          v230 = v930;
          v633 = v843;
          v632 = v887;
        }
        else
        {
          LOBYTE(v638) = -1;
        }
        *(_BYTE *)(v630 + 520 * v628 + 338) = v638;
        v5 = a1;
      }
      else
      {
        LOBYTE(v638) = *(_BYTE *)(v630 + 520 * v628 + 338);
      }
      v639 = v632 > v633;
    }
    v640 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v629));
    a4.f32[2] = (float)v230;
    v641.i64[0] = 0x3F0000003F000000;
    v641.i64[1] = 0x3F0000003F000000;
    v642 = vmulq_n_f32(vaddq_f32(a4, v641), v640);
    v942 = v642.i32[2];
    v941 = v642.i64[0];
    sub_223FFDF1C(v13[2], &v941, v638, v639, v640);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v643 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v643;
    v14 = **v643;
    v518 = v7 + 2;
    v230 = a2[2] + 2;
  }
  v644 = v11[151];
  if ((v644 & 0x10000000) != 0)
    v645 = 0x40000000;
  else
    v645 = 0x80000000;
  if ((v644 & 0x20000000) != 0)
    v646 = v645;
  else
    v646 = v644 & 0xCFFFFFFF;
  if ((v646 & 0x40000000) == 0)
  {
    v647 = v6 + 7;
    if ((v646 & 0x80000000) != 0)
    {
      LOBYTE(v656) = -1;
      v657 = 2;
    }
    else
    {
      v648 = *(_QWORD *)(v14 + 2448);
      v649 = v648 + 520 * v646;
      v650 = *(_QWORD *)(v649 + 312);
      v651 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v649 + 336))
      {
        *(_BYTE *)(v649 + 336) = 0;
        v652 = *(unsigned int *)(v649 + 4);
        if ((_DWORD)v652)
        {
          v844 = v651;
          v888 = v650;
          v931 = v230;
          v653 = 0;
          v654 = (unsigned __int8 *)(v648 + 520 * v646 + 36);
          do
          {
            v655 = *v654;
            v654 += 28;
            v653 = sub_223A4EC9C(v653, ((unint64_t)v655 << 8) | 1, 0xFFu);
            --v652;
          }
          while (v652);
          v656 = v653 >> 8;
          if (!(_BYTE)v653)
            LOBYTE(v656) = -1;
          v230 = v931;
          v651 = v844;
          v650 = v888;
        }
        else
        {
          LOBYTE(v656) = -1;
        }
        *(_BYTE *)(v648 + 520 * v646 + 338) = v656;
        v5 = a1;
      }
      else
      {
        LOBYTE(v656) = *(_BYTE *)(v648 + 520 * v646 + 338);
      }
      v657 = v650 > v651;
    }
    v658 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v647));
    a4.f32[2] = (float)v230;
    v659.i64[0] = 0x3F0000003F000000;
    v659.i64[1] = 0x3F0000003F000000;
    v660 = vmulq_n_f32(vaddq_f32(a4, v659), v658);
    v942 = v660.i32[2];
    v941 = v660.i64[0];
    sub_223FFDF1C(v13[2], &v941, v656, v657, v658);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v661 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v661;
    v14 = **v661;
    v230 = a2[2] + 2;
  }
  v662 = v7 + 3;
  v663 = v11[152];
  if ((v663 & 0x10000000) != 0)
    v664 = 0x40000000;
  else
    v664 = 0x80000000;
  if ((v663 & 0x20000000) != 0)
    v665 = v664;
  else
    v665 = v663 & 0xCFFFFFFF;
  if ((v665 & 0x40000000) == 0)
  {
    if ((v665 & 0x80000000) != 0)
    {
      LOBYTE(v674) = -1;
      v675 = 2;
    }
    else
    {
      v666 = *(_QWORD *)(v14 + 2448);
      v667 = v666 + 520 * v665;
      v668 = *(_QWORD *)(v667 + 312);
      v669 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v667 + 336))
      {
        *(_BYTE *)(v667 + 336) = 0;
        v670 = *(unsigned int *)(v667 + 4);
        if ((_DWORD)v670)
        {
          v805 = v669;
          v845 = v668;
          v932 = v230;
          v671 = 0;
          v672 = (unsigned __int8 *)(v666 + 520 * v665 + 36);
          do
          {
            v673 = *v672;
            v672 += 28;
            v671 = sub_223A4EC9C(v671, ((unint64_t)v673 << 8) | 1, 0xFFu);
            --v670;
          }
          while (v670);
          v674 = v671 >> 8;
          if (!(_BYTE)v671)
            LOBYTE(v674) = -1;
          v230 = v932;
          v662 = v7 + 3;
          v669 = v805;
          v668 = v845;
        }
        else
        {
          LOBYTE(v674) = -1;
        }
        *(_BYTE *)(v666 + 520 * v665 + 338) = v674;
        v5 = a1;
      }
      else
      {
        LOBYTE(v674) = *(_BYTE *)(v666 + 520 * v665 + 338);
      }
      v675 = v668 > v669;
    }
    v676 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v6));
    a4.f32[2] = (float)v230;
    v677.i64[0] = 0x3F0000003F000000;
    v677.i64[1] = 0x3F0000003F000000;
    v678 = vmulq_n_f32(vaddq_f32(a4, v677), v676);
    v942 = v678.i32[2];
    v941 = v678.i64[0];
    sub_223FFDF1C(v13[2], &v941, v674, v675, v676);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v679 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v679;
    v14 = **v679;
    v662 = a2[1] + 3;
    v230 = a2[2] + 2;
  }
  v680 = v11[153];
  if ((v680 & 0x10000000) != 0)
    v681 = 0x40000000;
  else
    v681 = 0x80000000;
  if ((v680 & 0x20000000) != 0)
    v682 = v681;
  else
    v682 = v680 & 0xCFFFFFFF;
  if ((v682 & 0x40000000) == 0)
  {
    v683 = v6 + 1;
    if ((v682 & 0x80000000) != 0)
    {
      LOBYTE(v692) = -1;
      v693 = 2;
    }
    else
    {
      v684 = *(_QWORD *)(v14 + 2448);
      v685 = v684 + 520 * v682;
      v686 = *(_QWORD *)(v685 + 312);
      v687 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v685 + 336))
      {
        *(_BYTE *)(v685 + 336) = 0;
        v688 = *(unsigned int *)(v685 + 4);
        if ((_DWORD)v688)
        {
          v846 = v686;
          v889 = v662;
          v933 = v230;
          v689 = 0;
          v690 = (unsigned __int8 *)(v684 + 520 * v682 + 36);
          do
          {
            v691 = *v690;
            v690 += 28;
            v689 = sub_223A4EC9C(v689, ((unint64_t)v691 << 8) | 1, 0xFFu);
            --v688;
          }
          while (v688);
          v692 = v689 >> 8;
          if (!(_BYTE)v689)
            LOBYTE(v692) = -1;
          v230 = v933;
          v662 = v889;
          v686 = v846;
        }
        else
        {
          LOBYTE(v692) = -1;
        }
        *(_BYTE *)(v684 + 520 * v682 + 338) = v692;
        v5 = a1;
      }
      else
      {
        LOBYTE(v692) = *(_BYTE *)(v684 + 520 * v682 + 338);
      }
      v693 = v686 > v687;
    }
    v694 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v683));
    a4.f32[2] = (float)v230;
    v695.i64[0] = 0x3F0000003F000000;
    v695.i64[1] = 0x3F0000003F000000;
    v696 = vmulq_n_f32(vaddq_f32(a4, v695), v694);
    v942 = v696.i32[2];
    v941 = v696.i64[0];
    sub_223FFDF1C(v13[2], &v941, v692, v693, v694);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v697 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v697;
    v14 = **v697;
    v662 = a2[1] + 3;
    v230 = a2[2] + 2;
  }
  v698 = v11[154];
  if ((v698 & 0x10000000) != 0)
    v699 = 0x40000000;
  else
    v699 = 0x80000000;
  if ((v698 & 0x20000000) != 0)
    v700 = v699;
  else
    v700 = v698 & 0xCFFFFFFF;
  if ((v700 & 0x40000000) == 0)
  {
    v701 = v6 + 2;
    if ((v700 & 0x80000000) != 0)
    {
      LOBYTE(v710) = -1;
      v711 = 2;
    }
    else
    {
      v702 = *(_QWORD *)(v14 + 2448);
      v703 = v702 + 520 * v700;
      v704 = *(_QWORD *)(v703 + 312);
      v705 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v703 + 336))
      {
        *(_BYTE *)(v703 + 336) = 0;
        v706 = *(unsigned int *)(v703 + 4);
        if ((_DWORD)v706)
        {
          v806 = v705;
          v847 = v704;
          v890 = v662;
          v934 = v230;
          v707 = 0;
          v708 = (unsigned __int8 *)(v702 + 520 * v700 + 36);
          do
          {
            v709 = *v708;
            v708 += 28;
            v707 = sub_223A4EC9C(v707, ((unint64_t)v709 << 8) | 1, 0xFFu);
            --v706;
          }
          while (v706);
          v710 = v707 >> 8;
          if (!(_BYTE)v707)
            LOBYTE(v710) = -1;
          v230 = v934;
          v662 = v890;
          v705 = v806;
          v704 = v847;
        }
        else
        {
          LOBYTE(v710) = -1;
        }
        *(_BYTE *)(v702 + 520 * v700 + 338) = v710;
        v5 = a1;
      }
      else
      {
        LOBYTE(v710) = *(_BYTE *)(v702 + 520 * v700 + 338);
      }
      v711 = v704 > v705;
    }
    v712 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v701));
    a4.f32[2] = (float)v230;
    v713.i64[0] = 0x3F0000003F000000;
    v713.i64[1] = 0x3F0000003F000000;
    v714 = vmulq_n_f32(vaddq_f32(a4, v713), v712);
    v942 = v714.i32[2];
    v941 = v714.i64[0];
    sub_223FFDF1C(v13[2], &v941, v710, v711, v712);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v715 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v715;
    v14 = **v715;
    v662 = a2[1] + 3;
    v230 = a2[2] + 2;
  }
  v716 = v11[155];
  if ((v716 & 0x10000000) != 0)
    v717 = 0x40000000;
  else
    v717 = 0x80000000;
  if ((v716 & 0x20000000) != 0)
    v718 = v717;
  else
    v718 = v716 & 0xCFFFFFFF;
  if ((v718 & 0x40000000) == 0)
  {
    v719 = v6 + 3;
    if ((v718 & 0x80000000) != 0)
    {
      LOBYTE(v728) = -1;
      v729 = 2;
    }
    else
    {
      v720 = *(_QWORD *)(v14 + 2448);
      v721 = v720 + 520 * v718;
      v722 = *(_QWORD *)(v721 + 312);
      v723 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v721 + 336))
      {
        *(_BYTE *)(v721 + 336) = 0;
        v724 = *(unsigned int *)(v721 + 4);
        if ((_DWORD)v724)
        {
          v848 = v722;
          v891 = v662;
          v935 = v230;
          v725 = 0;
          v726 = (unsigned __int8 *)(v720 + 520 * v718 + 36);
          do
          {
            v727 = *v726;
            v726 += 28;
            v725 = sub_223A4EC9C(v725, ((unint64_t)v727 << 8) | 1, 0xFFu);
            --v724;
          }
          while (v724);
          v728 = v725 >> 8;
          if (!(_BYTE)v725)
            LOBYTE(v728) = -1;
          v230 = v935;
          v662 = v891;
          v722 = v848;
        }
        else
        {
          LOBYTE(v728) = -1;
        }
        *(_BYTE *)(v720 + 520 * v718 + 338) = v728;
        v5 = a1;
      }
      else
      {
        LOBYTE(v728) = *(_BYTE *)(v720 + 520 * v718 + 338);
      }
      v729 = v722 > v723;
    }
    v730 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v719));
    a4.f32[2] = (float)v230;
    v731.i64[0] = 0x3F0000003F000000;
    v731.i64[1] = 0x3F0000003F000000;
    v732 = vmulq_n_f32(vaddq_f32(a4, v731), v730);
    v942 = v732.i32[2];
    v941 = v732.i64[0];
    sub_223FFDF1C(v13[2], &v941, v728, v729, v730);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v733 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v733;
    v14 = **v733;
    v662 = a2[1] + 3;
    v230 = a2[2] + 2;
  }
  v734 = v11[156];
  if ((v734 & 0x10000000) != 0)
    v735 = 0x40000000;
  else
    v735 = 0x80000000;
  if ((v734 & 0x20000000) != 0)
    v736 = v735;
  else
    v736 = v734 & 0xCFFFFFFF;
  if ((v736 & 0x40000000) == 0)
  {
    v737 = v6 + 4;
    if ((v736 & 0x80000000) != 0)
    {
      LOBYTE(v746) = -1;
      v747 = 2;
    }
    else
    {
      v738 = *(_QWORD *)(v14 + 2448);
      v739 = v738 + 520 * v736;
      v740 = *(_QWORD *)(v739 + 312);
      v741 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v739 + 336))
      {
        *(_BYTE *)(v739 + 336) = 0;
        v742 = *(unsigned int *)(v739 + 4);
        if ((_DWORD)v742)
        {
          v807 = v741;
          v849 = v740;
          v892 = v662;
          v936 = v230;
          v743 = 0;
          v744 = (unsigned __int8 *)(v738 + 520 * v736 + 36);
          do
          {
            v745 = *v744;
            v744 += 28;
            v743 = sub_223A4EC9C(v743, ((unint64_t)v745 << 8) | 1, 0xFFu);
            --v742;
          }
          while (v742);
          v746 = v743 >> 8;
          if (!(_BYTE)v743)
            LOBYTE(v746) = -1;
          v230 = v936;
          v662 = v892;
          v741 = v807;
          v740 = v849;
        }
        else
        {
          LOBYTE(v746) = -1;
        }
        *(_BYTE *)(v738 + 520 * v736 + 338) = v746;
        v5 = a1;
      }
      else
      {
        LOBYTE(v746) = *(_BYTE *)(v738 + 520 * v736 + 338);
      }
      v747 = v740 > v741;
    }
    v748 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v737));
    a4.f32[2] = (float)v230;
    v749.i64[0] = 0x3F0000003F000000;
    v749.i64[1] = 0x3F0000003F000000;
    v750 = vmulq_n_f32(vaddq_f32(a4, v749), v748);
    v942 = v750.i32[2];
    v941 = v750.i64[0];
    sub_223FFDF1C(v13[2], &v941, v746, v747, v748);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v751 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v751;
    v14 = **v751;
    v662 = a2[1] + 3;
    v230 = a2[2] + 2;
  }
  v752 = v11[157];
  if ((v752 & 0x10000000) != 0)
    v753 = 0x40000000;
  else
    v753 = 0x80000000;
  if ((v752 & 0x20000000) != 0)
    v754 = v753;
  else
    v754 = v752 & 0xCFFFFFFF;
  if ((v754 & 0x40000000) == 0)
  {
    v755 = v6 + 5;
    if ((v754 & 0x80000000) != 0)
    {
      LOBYTE(v764) = -1;
      v765 = 2;
    }
    else
    {
      v756 = *(_QWORD *)(v14 + 2448);
      v757 = v756 + 520 * v754;
      v758 = *(_QWORD *)(v757 + 312);
      v759 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v757 + 336))
      {
        *(_BYTE *)(v757 + 336) = 0;
        v760 = *(unsigned int *)(v757 + 4);
        if ((_DWORD)v760)
        {
          v850 = v758;
          v893 = v662;
          v937 = v230;
          v761 = 0;
          v762 = (unsigned __int8 *)(v756 + 520 * v754 + 36);
          do
          {
            v763 = *v762;
            v762 += 28;
            v761 = sub_223A4EC9C(v761, ((unint64_t)v763 << 8) | 1, 0xFFu);
            --v760;
          }
          while (v760);
          v764 = v761 >> 8;
          if (!(_BYTE)v761)
            LOBYTE(v764) = -1;
          v230 = v937;
          v662 = v893;
          v758 = v850;
        }
        else
        {
          LOBYTE(v764) = -1;
        }
        *(_BYTE *)(v756 + 520 * v754 + 338) = v764;
        v5 = a1;
      }
      else
      {
        LOBYTE(v764) = *(_BYTE *)(v756 + 520 * v754 + 338);
      }
      v765 = v758 > v759;
    }
    v766 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v755));
    a4.f32[2] = (float)v230;
    v767.i64[0] = 0x3F0000003F000000;
    v767.i64[1] = 0x3F0000003F000000;
    v768 = vmulq_n_f32(vaddq_f32(a4, v767), v766);
    v942 = v768.i32[2];
    v941 = v768.i64[0];
    sub_223FFDF1C(v13[2], &v941, v764, v765, v766);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v769 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v769;
    v14 = **v769;
    v662 = a2[1] + 3;
    v230 = a2[2] + 2;
  }
  v770 = v11[158];
  if ((v770 & 0x10000000) != 0)
    v771 = 0x40000000;
  else
    v771 = 0x80000000;
  if ((v770 & 0x20000000) != 0)
    v772 = v771;
  else
    v772 = v770 & 0xCFFFFFFF;
  if ((v772 & 0x40000000) == 0)
  {
    v773 = v6 + 6;
    if ((v772 & 0x80000000) != 0)
    {
      LOBYTE(v782) = -1;
      v783 = 2;
    }
    else
    {
      v774 = *(_QWORD *)(v14 + 2448);
      v775 = v774 + 520 * v772;
      v776 = *(_QWORD *)(v775 + 312);
      v777 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v775 + 336))
      {
        *(_BYTE *)(v775 + 336) = 0;
        v778 = *(unsigned int *)(v775 + 4);
        if ((_DWORD)v778)
        {
          v808 = v777;
          v851 = v776;
          v894 = v662;
          v938 = v230;
          v779 = 0;
          v780 = (unsigned __int8 *)(v774 + 520 * v772 + 36);
          do
          {
            v781 = *v780;
            v780 += 28;
            v779 = sub_223A4EC9C(v779, ((unint64_t)v781 << 8) | 1, 0xFFu);
            --v778;
          }
          while (v778);
          v782 = v779 >> 8;
          if (!(_BYTE)v779)
            LOBYTE(v782) = -1;
          v230 = v938;
          v662 = v894;
          v777 = v808;
          v776 = v851;
        }
        else
        {
          LOBYTE(v782) = -1;
        }
        *(_BYTE *)(v774 + 520 * v772 + 338) = v782;
        v5 = a1;
      }
      else
      {
        LOBYTE(v782) = *(_BYTE *)(v774 + 520 * v772 + 338);
      }
      v783 = v776 > v777;
    }
    v784 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v773));
    a4.f32[2] = (float)v230;
    v785.i64[0] = 0x3F0000003F000000;
    v785.i64[1] = 0x3F0000003F000000;
    v786 = vmulq_n_f32(vaddq_f32(a4, v785), v784);
    v942 = v786.i32[2];
    v941 = v786.i64[0];
    sub_223FFDF1C(v13[2], &v941, v782, v783, v784);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v787 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v787;
    v14 = **v787;
    v662 = a2[1] + 3;
    v230 = a2[2] + 2;
  }
  v788 = v11[159];
  if ((v788 & 0x10000000) != 0)
    v789 = 0x40000000;
  else
    v789 = 0x80000000;
  if ((v788 & 0x20000000) != 0)
    v790 = v789;
  else
    v790 = v788 & 0xCFFFFFFF;
  if ((v790 & 0x40000000) == 0)
  {
    v791 = v6 + 7;
    if ((v790 & 0x80000000) != 0)
    {
      LOBYTE(v800) = -1;
      v801 = 2;
    }
    else
    {
      v792 = *(_QWORD *)(v14 + 2448);
      v793 = v792 + 520 * v790;
      v794 = *(_QWORD *)(v793 + 312);
      v795 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v793 + 336))
      {
        *(_BYTE *)(v793 + 336) = 0;
        v796 = *(unsigned int *)(v793 + 4);
        if ((_DWORD)v796)
        {
          v852 = v794;
          v895 = v662;
          v939 = v230;
          v797 = 0;
          v798 = (unsigned __int8 *)(v792 + 520 * v790 + 36);
          do
          {
            v799 = *v798;
            v798 += 28;
            v797 = sub_223A4EC9C(v797, ((unint64_t)v799 << 8) | 1, 0xFFu);
            --v796;
          }
          while (v796);
          v800 = v797 >> 8;
          if (!(_BYTE)v797)
            LOBYTE(v800) = -1;
          v230 = v939;
          v662 = v895;
          v794 = v852;
        }
        else
        {
          LOBYTE(v800) = -1;
        }
        *(_BYTE *)(v792 + 520 * v790 + 338) = v800;
        v5 = a1;
      }
      else
      {
        LOBYTE(v800) = *(_BYTE *)(v792 + 520 * v790 + 338);
      }
      v801 = v794 > v795;
    }
    v802 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v791));
    a4.f32[2] = (float)v230;
    v803.i64[0] = 0x3F0000003F000000;
    v803.i64[1] = 0x3F0000003F000000;
    v804 = vmulq_n_f32(vaddq_f32(a4, v803), v802);
    v942 = v804.i32[2];
    v941 = v804.i64[0];
    sub_223FFDF1C(v13[2], &v941, v800, v801, v802);
  }
  sub_223D689B4(v5, a2, a3, a4);
}

void sub_223D689B4(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t **v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t **v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  float v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t **v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unint64_t v81;
  int v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t **v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned __int8 *v97;
  unsigned int v98;
  unint64_t v99;
  int v100;
  float v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t **v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  unsigned int v116;
  unint64_t v117;
  int v118;
  float v119;
  float32x4_t v120;
  float32x4_t v121;
  uint64_t **v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned __int8 *v133;
  unsigned int v134;
  unint64_t v135;
  int v136;
  float v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t **v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned __int8 *v151;
  unsigned int v152;
  unint64_t v153;
  int v154;
  float v155;
  float32x4_t v156;
  float32x4_t v157;
  uint64_t **v158;
  int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unsigned __int8 *v169;
  unsigned int v170;
  unint64_t v171;
  int v172;
  float v173;
  float32x4_t v174;
  float32x4_t v175;
  uint64_t **v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unsigned __int8 *v187;
  unsigned int v188;
  unint64_t v189;
  int v190;
  float v191;
  float32x4_t v192;
  float32x4_t v193;
  uint64_t **v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unsigned __int8 *v205;
  unsigned int v206;
  unint64_t v207;
  int v208;
  float v209;
  float32x4_t v210;
  float32x4_t v211;
  uint64_t **v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unsigned __int8 *v223;
  unsigned int v224;
  unint64_t v225;
  int v226;
  float v227;
  float32x4_t v228;
  float32x4_t v229;
  uint64_t **v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unsigned __int8 *v241;
  unsigned int v242;
  unint64_t v243;
  int v244;
  float v245;
  float32x4_t v246;
  float32x4_t v247;
  uint64_t **v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unsigned __int8 *v259;
  unsigned int v260;
  unint64_t v261;
  int v262;
  float v263;
  float32x4_t v264;
  float32x4_t v265;
  uint64_t **v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unsigned __int8 *v277;
  unsigned int v278;
  unint64_t v279;
  int v280;
  float v281;
  float32x4_t v282;
  float32x4_t v283;
  uint64_t **v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unsigned __int8 *v295;
  unsigned int v296;
  unint64_t v297;
  int v298;
  float v299;
  float32x4_t v300;
  float32x4_t v301;
  uint64_t **v302;
  int v303;
  int v304;
  unsigned int v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unsigned __int8 *v313;
  unsigned int v314;
  unint64_t v315;
  int v316;
  float v317;
  float32x4_t v318;
  float32x4_t v319;
  uint64_t **v320;
  int v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unsigned __int8 *v331;
  unsigned int v332;
  unint64_t v333;
  int v334;
  float v335;
  float32x4_t v336;
  float32x4_t v337;
  uint64_t **v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unsigned __int8 *v349;
  unsigned int v350;
  unint64_t v351;
  int v352;
  float v353;
  float32x4_t v354;
  float32x4_t v355;
  uint64_t **v356;
  int v357;
  unsigned int v358;
  unsigned int v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unsigned __int8 *v367;
  unsigned int v368;
  unint64_t v369;
  int v370;
  float v371;
  float32x4_t v372;
  float32x4_t v373;
  uint64_t **v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  unsigned __int8 *v385;
  unsigned int v386;
  unint64_t v387;
  int v388;
  float v389;
  float32x4_t v390;
  float32x4_t v391;
  uint64_t **v392;
  int v393;
  unsigned int v394;
  unsigned int v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unsigned __int8 *v403;
  unsigned int v404;
  unint64_t v405;
  int v406;
  float v407;
  float32x4_t v408;
  float32x4_t v409;
  uint64_t **v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unsigned __int8 *v421;
  unsigned int v422;
  unint64_t v423;
  int v424;
  float v425;
  float32x4_t v426;
  float32x4_t v427;
  uint64_t **v428;
  int v429;
  unsigned int v430;
  unsigned int v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  unsigned __int8 *v439;
  unsigned int v440;
  unint64_t v441;
  int v442;
  float v443;
  float32x4_t v444;
  float32x4_t v445;
  uint64_t **v446;
  int v447;
  int v448;
  unsigned int v449;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unsigned __int8 *v457;
  unsigned int v458;
  unint64_t v459;
  int v460;
  float v461;
  float32x4_t v462;
  float32x4_t v463;
  uint64_t **v464;
  int v465;
  unsigned int v466;
  unsigned int v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unsigned __int8 *v475;
  unsigned int v476;
  unint64_t v477;
  int v478;
  float v479;
  float32x4_t v480;
  float32x4_t v481;
  uint64_t **v482;
  int v483;
  unsigned int v484;
  unsigned int v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  unsigned __int8 *v493;
  unsigned int v494;
  unint64_t v495;
  int v496;
  float v497;
  float32x4_t v498;
  float32x4_t v499;
  uint64_t **v500;
  int v501;
  unsigned int v502;
  unsigned int v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  unsigned __int8 *v511;
  unsigned int v512;
  unint64_t v513;
  int v514;
  float v515;
  float32x4_t v516;
  float32x4_t v517;
  uint64_t **v518;
  int v519;
  unsigned int v520;
  unsigned int v521;
  int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  unsigned __int8 *v529;
  unsigned int v530;
  unint64_t v531;
  int v532;
  float v533;
  float32x4_t v534;
  float32x4_t v535;
  uint64_t **v536;
  int v537;
  unsigned int v538;
  unsigned int v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  unsigned __int8 *v547;
  unsigned int v548;
  unint64_t v549;
  int v550;
  float v551;
  float32x4_t v552;
  float32x4_t v553;
  uint64_t **v554;
  int v555;
  unsigned int v556;
  unsigned int v557;
  int v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  unsigned __int8 *v565;
  unsigned int v566;
  unint64_t v567;
  int v568;
  float v569;
  float32x4_t v570;
  float32x4_t v571;
  uint64_t **v572;
  int v573;
  unsigned int v574;
  unsigned int v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  unsigned __int8 *v583;
  unsigned int v584;
  unint64_t v585;
  int v586;
  float v587;
  float32x4_t v588;
  float32x4_t v589;
  uint64_t **v590;
  int v591;
  int v592;
  unsigned int v593;
  unsigned int v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unint64_t v600;
  unsigned __int8 *v601;
  unsigned int v602;
  unint64_t v603;
  int v604;
  float v605;
  float32x4_t v606;
  float32x4_t v607;
  uint64_t **v608;
  int v609;
  unsigned int v610;
  unsigned int v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  unsigned __int8 *v619;
  unsigned int v620;
  unint64_t v621;
  int v622;
  float v623;
  float32x4_t v624;
  float32x4_t v625;
  uint64_t **v626;
  int v627;
  unsigned int v628;
  unsigned int v629;
  int v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  unint64_t v636;
  unsigned __int8 *v637;
  unsigned int v638;
  unint64_t v639;
  int v640;
  float v641;
  float32x4_t v642;
  float32x4_t v643;
  uint64_t **v644;
  int v645;
  unsigned int v646;
  unsigned int v647;
  int v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  unsigned __int8 *v655;
  unsigned int v656;
  unint64_t v657;
  int v658;
  float v659;
  float32x4_t v660;
  float32x4_t v661;
  uint64_t **v662;
  int v663;
  unsigned int v664;
  unsigned int v665;
  int v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  unsigned __int8 *v673;
  unsigned int v674;
  unint64_t v675;
  int v676;
  float v677;
  float32x4_t v678;
  float32x4_t v679;
  uint64_t **v680;
  int v681;
  unsigned int v682;
  unsigned int v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  unsigned __int8 *v691;
  unsigned int v692;
  unint64_t v693;
  int v694;
  float v695;
  float32x4_t v696;
  float32x4_t v697;
  uint64_t **v698;
  int v699;
  unsigned int v700;
  unsigned int v701;
  int v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unint64_t v708;
  unsigned __int8 *v709;
  unsigned int v710;
  unint64_t v711;
  int v712;
  float v713;
  float32x4_t v714;
  float32x4_t v715;
  uint64_t **v716;
  int v717;
  unsigned int v718;
  unsigned int v719;
  int v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  unsigned __int8 *v727;
  unsigned int v728;
  unint64_t v729;
  int v730;
  float v731;
  float32x4_t v732;
  float32x4_t v733;
  uint64_t **v734;
  int v735;
  int v736;
  unsigned int v737;
  unsigned int v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  unsigned __int8 *v745;
  unsigned int v746;
  unint64_t v747;
  int v748;
  float v749;
  float32x4_t v750;
  float32x4_t v751;
  uint64_t **v752;
  int v753;
  unsigned int v754;
  unsigned int v755;
  int v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  unsigned __int8 *v763;
  unsigned int v764;
  unint64_t v765;
  int v766;
  float v767;
  float32x4_t v768;
  float32x4_t v769;
  uint64_t **v770;
  int v771;
  unsigned int v772;
  unsigned int v773;
  int v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t v780;
  unsigned __int8 *v781;
  unsigned int v782;
  unint64_t v783;
  int v784;
  float v785;
  float32x4_t v786;
  float32x4_t v787;
  uint64_t **v788;
  int v789;
  unsigned int v790;
  unsigned int v791;
  int v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  unsigned __int8 *v799;
  unsigned int v800;
  unint64_t v801;
  int v802;
  float v803;
  float32x4_t v804;
  float32x4_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  int v854;
  int v855;
  int v856;
  int v857;
  int v858;
  int v859;
  int v860;
  int v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  int v898;
  uint64_t v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  int v938;
  int v939;
  int v940;
  int v941;
  uint64_t v943;
  __int32 v944;

  v5 = *a2;
  v6 = a2[1];
  v7 = v6 + 4;
  v8 = a2[2];
  v9 = v8 + 2;
  v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v11 = v10[160];
  v12 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v13 = *v12;
  if ((v11 & 0x10000000) != 0)
    v14 = 0x40000000;
  else
    v14 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v15 = v14;
  else
    v15 = v11 & 0xCFFFFFFF;
  if ((v15 & 0x40000000) == 0)
  {
    v16 = a1;
    if ((v15 & 0x80000000) != 0)
    {
      LOBYTE(v25) = -1;
      v26 = 2;
    }
    else
    {
      v17 = *(_QWORD *)(v13 + 2448);
      v18 = v17 + 520 * v15;
      v19 = *(_QWORD *)(v18 + 312);
      v20 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v18 + 336))
      {
        *(_BYTE *)(v18 + 336) = 0;
        v21 = *(unsigned int *)(v18 + 4);
        if ((_DWORD)v21)
        {
          v806 = v20;
          v810 = v19;
          v854 = v7;
          v898 = v8 + 2;
          v22 = 0;
          v23 = (unsigned __int8 *)(v17 + 520 * v15 + 36);
          do
          {
            v24 = *v23;
            v23 += 28;
            v22 = sub_223A4EC9C(v22, ((unint64_t)v24 << 8) | 1, 0xFFu);
            --v21;
          }
          while (v21);
          v25 = v22 >> 8;
          if (!(_BYTE)v22)
            LOBYTE(v25) = -1;
          v16 = a1;
          v9 = v898;
          v7 = v854;
          v20 = v806;
          v19 = v810;
        }
        else
        {
          LOBYTE(v25) = -1;
        }
        *(_BYTE *)(v17 + 520 * v15 + 338) = v25;
      }
      else
      {
        LOBYTE(v25) = *(_BYTE *)(v17 + 520 * v15 + 338);
      }
      v26 = v19 > v20;
    }
    v27 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v5));
    a4.f32[2] = (float)v9;
    v28.i64[0] = 0x3F0000003F000000;
    v28.i64[1] = 0x3F0000003F000000;
    v29 = vmulq_n_f32(vaddq_f32(a4, v28), v27);
    v944 = v29.i32[2];
    v943 = v29.i64[0];
    sub_223FFDF1C(v12[2], &v943, v25, v26, v27);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v16 + 8);
    v30 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v16 + 16) + 8);
    v12 = *v30;
    v13 = **v30;
    v7 = v6 + 4;
    v9 = v8 + 2;
  }
  v31 = v10[161];
  if ((v31 & 0x10000000) != 0)
    v32 = 0x40000000;
  else
    v32 = 0x80000000;
  if ((v31 & 0x20000000) != 0)
    v33 = v32;
  else
    v33 = v31 & 0xCFFFFFFF;
  if ((v33 & 0x40000000) != 0)
  {
    v45 = a1;
  }
  else
  {
    v34 = v5 + 1;
    if ((v33 & 0x80000000) != 0)
    {
      LOBYTE(v44) = -1;
      v46 = 2;
      v45 = a1;
    }
    else
    {
      v35 = *(_QWORD *)(v13 + 2448);
      v36 = v35 + 520 * v33;
      v37 = *(_QWORD *)(v36 + 312);
      v38 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v36 + 336))
      {
        *(_BYTE *)(v36 + 336) = 0;
        v39 = *(unsigned int *)(v36 + 4);
        if ((_DWORD)v39)
        {
          v811 = v38;
          v899 = v37;
          v855 = v7;
          v40 = v9;
          v41 = 0;
          v42 = (unsigned __int8 *)(v35 + 520 * v33 + 36);
          do
          {
            v43 = *v42;
            v42 += 28;
            v41 = sub_223A4EC9C(v41, ((unint64_t)v43 << 8) | 1, 0xFFu);
            --v39;
          }
          while (v39);
          v44 = v41 >> 8;
          if (!(_BYTE)v41)
            LOBYTE(v44) = -1;
          v9 = v40;
          v7 = v855;
          v37 = v899;
          v38 = v811;
        }
        else
        {
          LOBYTE(v44) = -1;
        }
        *(_BYTE *)(v35 + 520 * v33 + 338) = v44;
      }
      else
      {
        LOBYTE(v44) = *(_BYTE *)(v35 + 520 * v33 + 338);
      }
      v45 = a1;
      v46 = v37 > v38;
    }
    v47 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v34));
    a4.f32[2] = (float)v9;
    v48.i64[0] = 0x3F0000003F000000;
    v48.i64[1] = 0x3F0000003F000000;
    v49 = vmulq_n_f32(vaddq_f32(a4, v48), v47);
    v944 = v49.i32[2];
    v943 = v49.i64[0];
    sub_223FFDF1C(v12[2], &v943, v44, v46, v47);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v50 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v50;
    v13 = **v50;
    v7 = v6 + 4;
    v9 = v8 + 2;
  }
  v51 = v10[162];
  if ((v51 & 0x10000000) != 0)
    v52 = 0x40000000;
  else
    v52 = 0x80000000;
  if ((v51 & 0x20000000) != 0)
    v53 = v52;
  else
    v53 = v51 & 0xCFFFFFFF;
  if ((v53 & 0x40000000) == 0)
  {
    v54 = v5 + 2;
    if ((v53 & 0x80000000) != 0)
    {
      LOBYTE(v63) = -1;
      v64 = 2;
    }
    else
    {
      v55 = *(_QWORD *)(v13 + 2448);
      v56 = v55 + 520 * v53;
      v57 = *(_QWORD *)(v56 + 312);
      v58 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v56 + 336))
      {
        *(_BYTE *)(v56 + 336) = 0;
        v59 = *(unsigned int *)(v56 + 4);
        if ((_DWORD)v59)
        {
          v807 = v58;
          v812 = v57;
          v856 = v7;
          v900 = v9;
          v60 = 0;
          v61 = (unsigned __int8 *)(v55 + 520 * v53 + 36);
          do
          {
            v62 = *v61;
            v61 += 28;
            v60 = sub_223A4EC9C(v60, ((unint64_t)v62 << 8) | 1, 0xFFu);
            --v59;
          }
          while (v59);
          v63 = v60 >> 8;
          if (!(_BYTE)v60)
            LOBYTE(v63) = -1;
          v45 = a1;
          v9 = v900;
          v7 = v856;
          v58 = v807;
          v57 = v812;
        }
        else
        {
          LOBYTE(v63) = -1;
        }
        *(_BYTE *)(v55 + 520 * v53 + 338) = v63;
      }
      else
      {
        LOBYTE(v63) = *(_BYTE *)(v55 + 520 * v53 + 338);
      }
      v64 = v57 > v58;
    }
    v65 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v54));
    a4.f32[2] = (float)v9;
    v66.i64[0] = 0x3F0000003F000000;
    v66.i64[1] = 0x3F0000003F000000;
    v67 = vmulq_n_f32(vaddq_f32(a4, v66), v65);
    v944 = v67.i32[2];
    v943 = v67.i64[0];
    sub_223FFDF1C(v12[2], &v943, v63, v64, v65);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v68 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v68;
    v13 = **v68;
    v7 = v6 + 4;
    v9 = v8 + 2;
  }
  v69 = v10[163];
  if ((v69 & 0x10000000) != 0)
    v70 = 0x40000000;
  else
    v70 = 0x80000000;
  if ((v69 & 0x20000000) != 0)
    v71 = v70;
  else
    v71 = v69 & 0xCFFFFFFF;
  if ((v71 & 0x40000000) == 0)
  {
    v72 = v5 + 3;
    if ((v71 & 0x80000000) != 0)
    {
      LOBYTE(v81) = -1;
      v82 = 2;
    }
    else
    {
      v73 = *(_QWORD *)(v13 + 2448);
      v74 = v73 + 520 * v71;
      v75 = *(_QWORD *)(v74 + 312);
      v76 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v74 + 336))
      {
        *(_BYTE *)(v74 + 336) = 0;
        v77 = *(unsigned int *)(v74 + 4);
        if ((_DWORD)v77)
        {
          v813 = v75;
          v857 = v7;
          v901 = v9;
          v78 = 0;
          v79 = (unsigned __int8 *)(v73 + 520 * v71 + 36);
          do
          {
            v80 = *v79;
            v79 += 28;
            v78 = sub_223A4EC9C(v78, ((unint64_t)v80 << 8) | 1, 0xFFu);
            --v77;
          }
          while (v77);
          v81 = v78 >> 8;
          if (!(_BYTE)v78)
            LOBYTE(v81) = -1;
          v9 = v901;
          v7 = v857;
          v75 = v813;
        }
        else
        {
          LOBYTE(v81) = -1;
        }
        *(_BYTE *)(v73 + 520 * v71 + 338) = v81;
      }
      else
      {
        LOBYTE(v81) = *(_BYTE *)(v73 + 520 * v71 + 338);
      }
      v82 = v75 > v76;
      v45 = a1;
    }
    v83 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v72));
    a4.f32[2] = (float)v9;
    v84.i64[0] = 0x3F0000003F000000;
    v84.i64[1] = 0x3F0000003F000000;
    v85 = vmulq_n_f32(vaddq_f32(a4, v84), v83);
    v944 = v85.i32[2];
    v943 = v85.i64[0];
    sub_223FFDF1C(v12[2], &v943, v81, v82, v83);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v86 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v86;
    v13 = **v86;
    v7 = v6 + 4;
    v9 = v8 + 2;
  }
  v87 = v10[164];
  if ((v87 & 0x10000000) != 0)
    v88 = 0x40000000;
  else
    v88 = 0x80000000;
  if ((v87 & 0x20000000) != 0)
    v89 = v88;
  else
    v89 = v87 & 0xCFFFFFFF;
  if ((v89 & 0x40000000) == 0)
  {
    v90 = v5 + 4;
    if ((v89 & 0x80000000) != 0)
    {
      LOBYTE(v99) = -1;
      v100 = 2;
    }
    else
    {
      v91 = *(_QWORD *)(v13 + 2448);
      v92 = v91 + 520 * v89;
      v93 = *(_QWORD *)(v92 + 312);
      v94 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v92 + 336))
      {
        *(_BYTE *)(v92 + 336) = 0;
        v95 = *(unsigned int *)(v92 + 4);
        if ((_DWORD)v95)
        {
          v808 = v94;
          v814 = v93;
          v858 = v7;
          v902 = v9;
          v96 = 0;
          v97 = (unsigned __int8 *)(v91 + 520 * v89 + 36);
          do
          {
            v98 = *v97;
            v97 += 28;
            v96 = sub_223A4EC9C(v96, ((unint64_t)v98 << 8) | 1, 0xFFu);
            --v95;
          }
          while (v95);
          v99 = v96 >> 8;
          if (!(_BYTE)v96)
            LOBYTE(v99) = -1;
          v45 = a1;
          v9 = v902;
          v7 = v858;
          v94 = v808;
          v93 = v814;
        }
        else
        {
          LOBYTE(v99) = -1;
        }
        *(_BYTE *)(v91 + 520 * v89 + 338) = v99;
      }
      else
      {
        LOBYTE(v99) = *(_BYTE *)(v91 + 520 * v89 + 338);
      }
      v100 = v93 > v94;
    }
    v101 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v90));
    a4.f32[2] = (float)v9;
    v102.i64[0] = 0x3F0000003F000000;
    v102.i64[1] = 0x3F0000003F000000;
    v103 = vmulq_n_f32(vaddq_f32(a4, v102), v101);
    v944 = v103.i32[2];
    v943 = v103.i64[0];
    sub_223FFDF1C(v12[2], &v943, v99, v100, v101);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v104 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v104;
    v13 = **v104;
    v7 = v6 + 4;
    v9 = v8 + 2;
  }
  v105 = v10[165];
  if ((v105 & 0x10000000) != 0)
    v106 = 0x40000000;
  else
    v106 = 0x80000000;
  if ((v105 & 0x20000000) != 0)
    v107 = v106;
  else
    v107 = v105 & 0xCFFFFFFF;
  if ((v107 & 0x40000000) == 0)
  {
    v108 = v5 + 5;
    if ((v107 & 0x80000000) != 0)
    {
      LOBYTE(v117) = -1;
      v118 = 2;
    }
    else
    {
      v109 = *(_QWORD *)(v13 + 2448);
      v110 = v109 + 520 * v107;
      v111 = *(_QWORD *)(v110 + 312);
      v112 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v110 + 336))
      {
        *(_BYTE *)(v110 + 336) = 0;
        v113 = *(unsigned int *)(v110 + 4);
        if ((_DWORD)v113)
        {
          v815 = v111;
          v859 = v7;
          v903 = v9;
          v114 = 0;
          v115 = (unsigned __int8 *)(v109 + 520 * v107 + 36);
          do
          {
            v116 = *v115;
            v115 += 28;
            v114 = sub_223A4EC9C(v114, ((unint64_t)v116 << 8) | 1, 0xFFu);
            --v113;
          }
          while (v113);
          v117 = v114 >> 8;
          if (!(_BYTE)v114)
            LOBYTE(v117) = -1;
          v9 = v903;
          v7 = v859;
          v111 = v815;
        }
        else
        {
          LOBYTE(v117) = -1;
        }
        *(_BYTE *)(v109 + 520 * v107 + 338) = v117;
      }
      else
      {
        LOBYTE(v117) = *(_BYTE *)(v109 + 520 * v107 + 338);
      }
      v118 = v111 > v112;
      v45 = a1;
    }
    v119 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v108));
    a4.f32[2] = (float)v9;
    v120.i64[0] = 0x3F0000003F000000;
    v120.i64[1] = 0x3F0000003F000000;
    v121 = vmulq_n_f32(vaddq_f32(a4, v120), v119);
    v944 = v121.i32[2];
    v943 = v121.i64[0];
    sub_223FFDF1C(v12[2], &v943, v117, v118, v119);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v122 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v122;
    v13 = **v122;
    v7 = v6 + 4;
    v9 = v8 + 2;
  }
  v123 = v10[166];
  if ((v123 & 0x10000000) != 0)
    v124 = 0x40000000;
  else
    v124 = 0x80000000;
  if ((v123 & 0x20000000) != 0)
    v125 = v124;
  else
    v125 = v123 & 0xCFFFFFFF;
  if ((v125 & 0x40000000) == 0)
  {
    v126 = v5 + 6;
    if ((v125 & 0x80000000) != 0)
    {
      LOBYTE(v135) = -1;
      v136 = 2;
    }
    else
    {
      v127 = *(_QWORD *)(v13 + 2448);
      v128 = v127 + 520 * v125;
      v129 = *(_QWORD *)(v128 + 312);
      v130 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v128 + 336))
      {
        *(_BYTE *)(v128 + 336) = 0;
        v131 = *(unsigned int *)(v128 + 4);
        if ((_DWORD)v131)
        {
          v809 = v130;
          v816 = v129;
          v860 = v7;
          v904 = v9;
          v132 = 0;
          v133 = (unsigned __int8 *)(v127 + 520 * v125 + 36);
          do
          {
            v134 = *v133;
            v133 += 28;
            v132 = sub_223A4EC9C(v132, ((unint64_t)v134 << 8) | 1, 0xFFu);
            --v131;
          }
          while (v131);
          v135 = v132 >> 8;
          if (!(_BYTE)v132)
            LOBYTE(v135) = -1;
          v45 = a1;
          v9 = v904;
          v7 = v860;
          v130 = v809;
          v129 = v816;
        }
        else
        {
          LOBYTE(v135) = -1;
        }
        *(_BYTE *)(v127 + 520 * v125 + 338) = v135;
      }
      else
      {
        LOBYTE(v135) = *(_BYTE *)(v127 + 520 * v125 + 338);
      }
      v136 = v129 > v130;
    }
    v137 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v126));
    a4.f32[2] = (float)v9;
    v138.i64[0] = 0x3F0000003F000000;
    v138.i64[1] = 0x3F0000003F000000;
    v139 = vmulq_n_f32(vaddq_f32(a4, v138), v137);
    v944 = v139.i32[2];
    v943 = v139.i64[0];
    sub_223FFDF1C(v12[2], &v943, v135, v136, v137);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v140 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v140;
    v13 = **v140;
    v7 = v6 + 4;
    v9 = v8 + 2;
  }
  v141 = v10[167];
  if ((v141 & 0x10000000) != 0)
    v142 = 0x40000000;
  else
    v142 = 0x80000000;
  if ((v141 & 0x20000000) != 0)
    v143 = v142;
  else
    v143 = v141 & 0xCFFFFFFF;
  if ((v143 & 0x40000000) == 0)
  {
    v144 = v5 + 7;
    if ((v143 & 0x80000000) != 0)
    {
      LOBYTE(v153) = -1;
      v154 = 2;
    }
    else
    {
      v145 = *(_QWORD *)(v13 + 2448);
      v146 = v145 + 520 * v143;
      v147 = *(_QWORD *)(v146 + 312);
      v148 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v146 + 336))
      {
        *(_BYTE *)(v146 + 336) = 0;
        v149 = *(unsigned int *)(v146 + 4);
        if ((_DWORD)v149)
        {
          v817 = v147;
          v861 = v7;
          v905 = v9;
          v150 = 0;
          v151 = (unsigned __int8 *)(v145 + 520 * v143 + 36);
          do
          {
            v152 = *v151;
            v151 += 28;
            v150 = sub_223A4EC9C(v150, ((unint64_t)v152 << 8) | 1, 0xFFu);
            --v149;
          }
          while (v149);
          v153 = v150 >> 8;
          if (!(_BYTE)v150)
            LOBYTE(v153) = -1;
          v9 = v905;
          v7 = v861;
          v147 = v817;
        }
        else
        {
          LOBYTE(v153) = -1;
        }
        *(_BYTE *)(v145 + 520 * v143 + 338) = v153;
      }
      else
      {
        LOBYTE(v153) = *(_BYTE *)(v145 + 520 * v143 + 338);
      }
      v154 = v147 > v148;
      v45 = a1;
    }
    v155 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v144));
    a4.f32[2] = (float)v9;
    v156.i64[0] = 0x3F0000003F000000;
    v156.i64[1] = 0x3F0000003F000000;
    v157 = vmulq_n_f32(vaddq_f32(a4, v156), v155);
    v944 = v157.i32[2];
    v943 = v157.i64[0];
    sub_223FFDF1C(v12[2], &v943, v153, v154, v155);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v158 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v158;
    v13 = **v158;
    v9 = v8 + 2;
  }
  v159 = v6 + 5;
  v160 = v10[168];
  if ((v160 & 0x10000000) != 0)
    v161 = 0x40000000;
  else
    v161 = 0x80000000;
  if ((v160 & 0x20000000) != 0)
    v162 = v161;
  else
    v162 = v160 & 0xCFFFFFFF;
  if ((v162 & 0x40000000) == 0)
  {
    if ((v162 & 0x80000000) != 0)
    {
      LOBYTE(v171) = -1;
      v172 = 2;
    }
    else
    {
      v163 = *(_QWORD *)(v13 + 2448);
      v164 = v163 + 520 * v162;
      v165 = *(_QWORD *)(v164 + 312);
      v166 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v164 + 336))
      {
        *(_BYTE *)(v164 + 336) = 0;
        v167 = *(unsigned int *)(v164 + 4);
        if ((_DWORD)v167)
        {
          v818 = v166;
          v862 = v165;
          v906 = v9;
          v168 = 0;
          v169 = (unsigned __int8 *)(v163 + 520 * v162 + 36);
          do
          {
            v170 = *v169;
            v169 += 28;
            v168 = sub_223A4EC9C(v168, ((unint64_t)v170 << 8) | 1, 0xFFu);
            --v167;
          }
          while (v167);
          v171 = v168 >> 8;
          if (!(_BYTE)v168)
            LOBYTE(v171) = -1;
          v45 = a1;
          v9 = v906;
          v166 = v818;
          v165 = v862;
        }
        else
        {
          LOBYTE(v171) = -1;
        }
        *(_BYTE *)(v163 + 520 * v162 + 338) = v171;
      }
      else
      {
        LOBYTE(v171) = *(_BYTE *)(v163 + 520 * v162 + 338);
      }
      v172 = v165 > v166;
    }
    v173 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v5));
    a4.f32[2] = (float)v9;
    v174.i64[0] = 0x3F0000003F000000;
    v174.i64[1] = 0x3F0000003F000000;
    v175 = vmulq_n_f32(vaddq_f32(a4, v174), v173);
    v944 = v175.i32[2];
    v943 = v175.i64[0];
    sub_223FFDF1C(v12[2], &v943, v171, v172, v173);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v176 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v176;
    v13 = **v176;
    v159 = v6 + 5;
    v9 = v8 + 2;
  }
  v177 = v10[169];
  if ((v177 & 0x10000000) != 0)
    v178 = 0x40000000;
  else
    v178 = 0x80000000;
  if ((v177 & 0x20000000) != 0)
    v179 = v178;
  else
    v179 = v177 & 0xCFFFFFFF;
  if ((v179 & 0x40000000) == 0)
  {
    v180 = v5 + 1;
    if ((v179 & 0x80000000) != 0)
    {
      LOBYTE(v189) = -1;
      v190 = 2;
    }
    else
    {
      v181 = *(_QWORD *)(v13 + 2448);
      v182 = v181 + 520 * v179;
      v183 = *(_QWORD *)(v182 + 312);
      v184 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v182 + 336))
      {
        *(_BYTE *)(v182 + 336) = 0;
        v185 = *(unsigned int *)(v182 + 4);
        if ((_DWORD)v185)
        {
          v819 = v184;
          v863 = v183;
          v907 = v9;
          v186 = 0;
          v187 = (unsigned __int8 *)(v181 + 520 * v179 + 36);
          do
          {
            v188 = *v187;
            v187 += 28;
            v186 = sub_223A4EC9C(v186, ((unint64_t)v188 << 8) | 1, 0xFFu);
            --v185;
          }
          while (v185);
          v189 = v186 >> 8;
          if (!(_BYTE)v186)
            LOBYTE(v189) = -1;
          v45 = a1;
          v9 = v907;
          v184 = v819;
          v183 = v863;
        }
        else
        {
          LOBYTE(v189) = -1;
        }
        *(_BYTE *)(v181 + 520 * v179 + 338) = v189;
      }
      else
      {
        LOBYTE(v189) = *(_BYTE *)(v181 + 520 * v179 + 338);
      }
      v190 = v183 > v184;
    }
    v191 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v180));
    a4.f32[2] = (float)v9;
    v192.i64[0] = 0x3F0000003F000000;
    v192.i64[1] = 0x3F0000003F000000;
    v193 = vmulq_n_f32(vaddq_f32(a4, v192), v191);
    v944 = v193.i32[2];
    v943 = v193.i64[0];
    sub_223FFDF1C(v12[2], &v943, v189, v190, v191);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v194 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v194;
    v13 = **v194;
    v159 = v6 + 5;
    v9 = v8 + 2;
  }
  v195 = v10[170];
  if ((v195 & 0x10000000) != 0)
    v196 = 0x40000000;
  else
    v196 = 0x80000000;
  if ((v195 & 0x20000000) != 0)
    v197 = v196;
  else
    v197 = v195 & 0xCFFFFFFF;
  if ((v197 & 0x40000000) == 0)
  {
    v198 = v5 + 2;
    if ((v197 & 0x80000000) != 0)
    {
      LOBYTE(v207) = -1;
      v208 = 2;
    }
    else
    {
      v199 = *(_QWORD *)(v13 + 2448);
      v200 = v199 + 520 * v197;
      v201 = *(_QWORD *)(v200 + 312);
      v202 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v200 + 336))
      {
        *(_BYTE *)(v200 + 336) = 0;
        v203 = *(unsigned int *)(v200 + 4);
        if ((_DWORD)v203)
        {
          v820 = v202;
          v864 = v201;
          v908 = v9;
          v204 = 0;
          v205 = (unsigned __int8 *)(v199 + 520 * v197 + 36);
          do
          {
            v206 = *v205;
            v205 += 28;
            v204 = sub_223A4EC9C(v204, ((unint64_t)v206 << 8) | 1, 0xFFu);
            --v203;
          }
          while (v203);
          v207 = v204 >> 8;
          if (!(_BYTE)v204)
            LOBYTE(v207) = -1;
          v45 = a1;
          v9 = v908;
          v202 = v820;
          v201 = v864;
        }
        else
        {
          LOBYTE(v207) = -1;
        }
        *(_BYTE *)(v199 + 520 * v197 + 338) = v207;
      }
      else
      {
        LOBYTE(v207) = *(_BYTE *)(v199 + 520 * v197 + 338);
      }
      v208 = v201 > v202;
    }
    v209 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v198));
    a4.f32[2] = (float)v9;
    v210.i64[0] = 0x3F0000003F000000;
    v210.i64[1] = 0x3F0000003F000000;
    v211 = vmulq_n_f32(vaddq_f32(a4, v210), v209);
    v944 = v211.i32[2];
    v943 = v211.i64[0];
    sub_223FFDF1C(v12[2], &v943, v207, v208, v209);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v212 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v212;
    v13 = **v212;
    v159 = v6 + 5;
    v9 = v8 + 2;
  }
  v213 = v10[171];
  if ((v213 & 0x10000000) != 0)
    v214 = 0x40000000;
  else
    v214 = 0x80000000;
  if ((v213 & 0x20000000) != 0)
    v215 = v214;
  else
    v215 = v213 & 0xCFFFFFFF;
  if ((v215 & 0x40000000) == 0)
  {
    v216 = v5 + 3;
    if ((v215 & 0x80000000) != 0)
    {
      LOBYTE(v225) = -1;
      v226 = 2;
    }
    else
    {
      v217 = *(_QWORD *)(v13 + 2448);
      v218 = v217 + 520 * v215;
      v219 = *(_QWORD *)(v218 + 312);
      v220 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v218 + 336))
      {
        *(_BYTE *)(v218 + 336) = 0;
        v221 = *(unsigned int *)(v218 + 4);
        if ((_DWORD)v221)
        {
          v821 = v220;
          v865 = v219;
          v909 = v9;
          v222 = 0;
          v223 = (unsigned __int8 *)(v217 + 520 * v215 + 36);
          do
          {
            v224 = *v223;
            v223 += 28;
            v222 = sub_223A4EC9C(v222, ((unint64_t)v224 << 8) | 1, 0xFFu);
            --v221;
          }
          while (v221);
          v225 = v222 >> 8;
          if (!(_BYTE)v222)
            LOBYTE(v225) = -1;
          v45 = a1;
          v9 = v909;
          v220 = v821;
          v219 = v865;
        }
        else
        {
          LOBYTE(v225) = -1;
        }
        *(_BYTE *)(v217 + 520 * v215 + 338) = v225;
      }
      else
      {
        LOBYTE(v225) = *(_BYTE *)(v217 + 520 * v215 + 338);
      }
      v226 = v219 > v220;
    }
    v227 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v216));
    a4.f32[2] = (float)v9;
    v228.i64[0] = 0x3F0000003F000000;
    v228.i64[1] = 0x3F0000003F000000;
    v229 = vmulq_n_f32(vaddq_f32(a4, v228), v227);
    v944 = v229.i32[2];
    v943 = v229.i64[0];
    sub_223FFDF1C(v12[2], &v943, v225, v226, v227);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v230 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v230;
    v13 = **v230;
    v159 = v6 + 5;
    v9 = v8 + 2;
  }
  v231 = v10[172];
  if ((v231 & 0x10000000) != 0)
    v232 = 0x40000000;
  else
    v232 = 0x80000000;
  if ((v231 & 0x20000000) != 0)
    v233 = v232;
  else
    v233 = v231 & 0xCFFFFFFF;
  if ((v233 & 0x40000000) == 0)
  {
    v234 = v5 + 4;
    if ((v233 & 0x80000000) != 0)
    {
      LOBYTE(v243) = -1;
      v244 = 2;
    }
    else
    {
      v235 = *(_QWORD *)(v13 + 2448);
      v236 = v235 + 520 * v233;
      v237 = *(_QWORD *)(v236 + 312);
      v238 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v236 + 336))
      {
        *(_BYTE *)(v236 + 336) = 0;
        v239 = *(unsigned int *)(v236 + 4);
        if ((_DWORD)v239)
        {
          v822 = v238;
          v866 = v237;
          v910 = v9;
          v240 = 0;
          v241 = (unsigned __int8 *)(v235 + 520 * v233 + 36);
          do
          {
            v242 = *v241;
            v241 += 28;
            v240 = sub_223A4EC9C(v240, ((unint64_t)v242 << 8) | 1, 0xFFu);
            --v239;
          }
          while (v239);
          v243 = v240 >> 8;
          if (!(_BYTE)v240)
            LOBYTE(v243) = -1;
          v45 = a1;
          v9 = v910;
          v238 = v822;
          v237 = v866;
        }
        else
        {
          LOBYTE(v243) = -1;
        }
        *(_BYTE *)(v235 + 520 * v233 + 338) = v243;
      }
      else
      {
        LOBYTE(v243) = *(_BYTE *)(v235 + 520 * v233 + 338);
      }
      v244 = v237 > v238;
    }
    v245 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v234));
    a4.f32[2] = (float)v9;
    v246.i64[0] = 0x3F0000003F000000;
    v246.i64[1] = 0x3F0000003F000000;
    v247 = vmulq_n_f32(vaddq_f32(a4, v246), v245);
    v944 = v247.i32[2];
    v943 = v247.i64[0];
    sub_223FFDF1C(v12[2], &v943, v243, v244, v245);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v248 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v248;
    v13 = **v248;
    v159 = v6 + 5;
    v9 = v8 + 2;
  }
  v249 = v10[173];
  if ((v249 & 0x10000000) != 0)
    v250 = 0x40000000;
  else
    v250 = 0x80000000;
  if ((v249 & 0x20000000) != 0)
    v251 = v250;
  else
    v251 = v249 & 0xCFFFFFFF;
  if ((v251 & 0x40000000) == 0)
  {
    v252 = v5 + 5;
    if ((v251 & 0x80000000) != 0)
    {
      LOBYTE(v261) = -1;
      v262 = 2;
    }
    else
    {
      v253 = *(_QWORD *)(v13 + 2448);
      v254 = v253 + 520 * v251;
      v255 = *(_QWORD *)(v254 + 312);
      v256 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v254 + 336))
      {
        *(_BYTE *)(v254 + 336) = 0;
        v257 = *(unsigned int *)(v254 + 4);
        if ((_DWORD)v257)
        {
          v823 = v256;
          v867 = v255;
          v911 = v9;
          v258 = 0;
          v259 = (unsigned __int8 *)(v253 + 520 * v251 + 36);
          do
          {
            v260 = *v259;
            v259 += 28;
            v258 = sub_223A4EC9C(v258, ((unint64_t)v260 << 8) | 1, 0xFFu);
            --v257;
          }
          while (v257);
          v261 = v258 >> 8;
          if (!(_BYTE)v258)
            LOBYTE(v261) = -1;
          v45 = a1;
          v9 = v911;
          v256 = v823;
          v255 = v867;
        }
        else
        {
          LOBYTE(v261) = -1;
        }
        *(_BYTE *)(v253 + 520 * v251 + 338) = v261;
      }
      else
      {
        LOBYTE(v261) = *(_BYTE *)(v253 + 520 * v251 + 338);
      }
      v262 = v255 > v256;
    }
    v263 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v252));
    a4.f32[2] = (float)v9;
    v264.i64[0] = 0x3F0000003F000000;
    v264.i64[1] = 0x3F0000003F000000;
    v265 = vmulq_n_f32(vaddq_f32(a4, v264), v263);
    v944 = v265.i32[2];
    v943 = v265.i64[0];
    sub_223FFDF1C(v12[2], &v943, v261, v262, v263);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v266 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v266;
    v13 = **v266;
    v159 = v6 + 5;
    v9 = v8 + 2;
  }
  v267 = v10[174];
  if ((v267 & 0x10000000) != 0)
    v268 = 0x40000000;
  else
    v268 = 0x80000000;
  if ((v267 & 0x20000000) != 0)
    v269 = v268;
  else
    v269 = v267 & 0xCFFFFFFF;
  if ((v269 & 0x40000000) == 0)
  {
    v270 = v5 + 6;
    if ((v269 & 0x80000000) != 0)
    {
      LOBYTE(v279) = -1;
      v280 = 2;
    }
    else
    {
      v271 = *(_QWORD *)(v13 + 2448);
      v272 = v271 + 520 * v269;
      v273 = *(_QWORD *)(v272 + 312);
      v274 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v272 + 336))
      {
        *(_BYTE *)(v272 + 336) = 0;
        v275 = *(unsigned int *)(v272 + 4);
        if ((_DWORD)v275)
        {
          v824 = v274;
          v868 = v273;
          v912 = v9;
          v276 = 0;
          v277 = (unsigned __int8 *)(v271 + 520 * v269 + 36);
          do
          {
            v278 = *v277;
            v277 += 28;
            v276 = sub_223A4EC9C(v276, ((unint64_t)v278 << 8) | 1, 0xFFu);
            --v275;
          }
          while (v275);
          v279 = v276 >> 8;
          if (!(_BYTE)v276)
            LOBYTE(v279) = -1;
          v45 = a1;
          v9 = v912;
          v274 = v824;
          v273 = v868;
        }
        else
        {
          LOBYTE(v279) = -1;
        }
        *(_BYTE *)(v271 + 520 * v269 + 338) = v279;
      }
      else
      {
        LOBYTE(v279) = *(_BYTE *)(v271 + 520 * v269 + 338);
      }
      v280 = v273 > v274;
    }
    v281 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v270));
    a4.f32[2] = (float)v9;
    v282.i64[0] = 0x3F0000003F000000;
    v282.i64[1] = 0x3F0000003F000000;
    v283 = vmulq_n_f32(vaddq_f32(a4, v282), v281);
    v944 = v283.i32[2];
    v943 = v283.i64[0];
    sub_223FFDF1C(v12[2], &v943, v279, v280, v281);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v284 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v284;
    v13 = **v284;
    v159 = v6 + 5;
    v9 = v8 + 2;
  }
  v285 = v10[175];
  if ((v285 & 0x10000000) != 0)
    v286 = 0x40000000;
  else
    v286 = 0x80000000;
  if ((v285 & 0x20000000) != 0)
    v287 = v286;
  else
    v287 = v285 & 0xCFFFFFFF;
  if ((v287 & 0x40000000) == 0)
  {
    v288 = v5 + 7;
    if ((v287 & 0x80000000) != 0)
    {
      LOBYTE(v297) = -1;
      v298 = 2;
    }
    else
    {
      v289 = *(_QWORD *)(v13 + 2448);
      v290 = v289 + 520 * v287;
      v291 = *(_QWORD *)(v290 + 312);
      v292 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v290 + 336))
      {
        *(_BYTE *)(v290 + 336) = 0;
        v293 = *(unsigned int *)(v290 + 4);
        if ((_DWORD)v293)
        {
          v825 = v292;
          v869 = v291;
          v913 = v9;
          v294 = 0;
          v295 = (unsigned __int8 *)(v289 + 520 * v287 + 36);
          do
          {
            v296 = *v295;
            v295 += 28;
            v294 = sub_223A4EC9C(v294, ((unint64_t)v296 << 8) | 1, 0xFFu);
            --v293;
          }
          while (v293);
          v297 = v294 >> 8;
          if (!(_BYTE)v294)
            LOBYTE(v297) = -1;
          v45 = a1;
          v9 = v913;
          v292 = v825;
          v291 = v869;
        }
        else
        {
          LOBYTE(v297) = -1;
        }
        *(_BYTE *)(v289 + 520 * v287 + 338) = v297;
      }
      else
      {
        LOBYTE(v297) = *(_BYTE *)(v289 + 520 * v287 + 338);
      }
      v298 = v291 > v292;
    }
    v299 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v288));
    a4.f32[2] = (float)v9;
    v300.i64[0] = 0x3F0000003F000000;
    v300.i64[1] = 0x3F0000003F000000;
    v301 = vmulq_n_f32(vaddq_f32(a4, v300), v299);
    v944 = v301.i32[2];
    v943 = v301.i64[0];
    sub_223FFDF1C(v12[2], &v943, v297, v298, v299);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v302 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v302;
    v13 = **v302;
    v9 = v8 + 2;
  }
  v303 = v6 + 6;
  v304 = v10[176];
  if ((v304 & 0x10000000) != 0)
    v305 = 0x40000000;
  else
    v305 = 0x80000000;
  if ((v304 & 0x20000000) != 0)
    v306 = v305;
  else
    v306 = v304 & 0xCFFFFFFF;
  if ((v306 & 0x40000000) == 0)
  {
    if ((v306 & 0x80000000) != 0)
    {
      LOBYTE(v315) = -1;
      v316 = 2;
    }
    else
    {
      v307 = *(_QWORD *)(v13 + 2448);
      v308 = v307 + 520 * v306;
      v309 = *(_QWORD *)(v308 + 312);
      v310 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v308 + 336))
      {
        *(_BYTE *)(v308 + 336) = 0;
        v311 = *(unsigned int *)(v308 + 4);
        if ((_DWORD)v311)
        {
          v826 = v310;
          v870 = v309;
          v914 = v9;
          v312 = 0;
          v313 = (unsigned __int8 *)(v307 + 520 * v306 + 36);
          do
          {
            v314 = *v313;
            v313 += 28;
            v312 = sub_223A4EC9C(v312, ((unint64_t)v314 << 8) | 1, 0xFFu);
            --v311;
          }
          while (v311);
          v315 = v312 >> 8;
          if (!(_BYTE)v312)
            LOBYTE(v315) = -1;
          v45 = a1;
          v9 = v914;
          v310 = v826;
          v309 = v870;
        }
        else
        {
          LOBYTE(v315) = -1;
        }
        *(_BYTE *)(v307 + 520 * v306 + 338) = v315;
      }
      else
      {
        LOBYTE(v315) = *(_BYTE *)(v307 + 520 * v306 + 338);
      }
      v316 = v309 > v310;
    }
    v317 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v5));
    a4.f32[2] = (float)v9;
    v318.i64[0] = 0x3F0000003F000000;
    v318.i64[1] = 0x3F0000003F000000;
    v319 = vmulq_n_f32(vaddq_f32(a4, v318), v317);
    v944 = v319.i32[2];
    v943 = v319.i64[0];
    sub_223FFDF1C(v12[2], &v943, v315, v316, v317);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v320 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v320;
    v13 = **v320;
    v303 = v6 + 6;
    v9 = v8 + 2;
  }
  v321 = v10[177];
  if ((v321 & 0x10000000) != 0)
    v322 = 0x40000000;
  else
    v322 = 0x80000000;
  if ((v321 & 0x20000000) != 0)
    v323 = v322;
  else
    v323 = v321 & 0xCFFFFFFF;
  if ((v323 & 0x40000000) == 0)
  {
    v324 = v5 + 1;
    if ((v323 & 0x80000000) != 0)
    {
      LOBYTE(v333) = -1;
      v334 = 2;
    }
    else
    {
      v325 = *(_QWORD *)(v13 + 2448);
      v326 = v325 + 520 * v323;
      v327 = *(_QWORD *)(v326 + 312);
      v328 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v326 + 336))
      {
        *(_BYTE *)(v326 + 336) = 0;
        v329 = *(unsigned int *)(v326 + 4);
        if ((_DWORD)v329)
        {
          v827 = v328;
          v871 = v327;
          v915 = v9;
          v330 = 0;
          v331 = (unsigned __int8 *)(v325 + 520 * v323 + 36);
          do
          {
            v332 = *v331;
            v331 += 28;
            v330 = sub_223A4EC9C(v330, ((unint64_t)v332 << 8) | 1, 0xFFu);
            --v329;
          }
          while (v329);
          v333 = v330 >> 8;
          if (!(_BYTE)v330)
            LOBYTE(v333) = -1;
          v45 = a1;
          v9 = v915;
          v328 = v827;
          v327 = v871;
        }
        else
        {
          LOBYTE(v333) = -1;
        }
        *(_BYTE *)(v325 + 520 * v323 + 338) = v333;
      }
      else
      {
        LOBYTE(v333) = *(_BYTE *)(v325 + 520 * v323 + 338);
      }
      v334 = v327 > v328;
    }
    v335 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v324));
    a4.f32[2] = (float)v9;
    v336.i64[0] = 0x3F0000003F000000;
    v336.i64[1] = 0x3F0000003F000000;
    v337 = vmulq_n_f32(vaddq_f32(a4, v336), v335);
    v944 = v337.i32[2];
    v943 = v337.i64[0];
    sub_223FFDF1C(v12[2], &v943, v333, v334, v335);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v338 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v338;
    v13 = **v338;
    v303 = v6 + 6;
    v9 = v8 + 2;
  }
  v339 = v10[178];
  if ((v339 & 0x10000000) != 0)
    v340 = 0x40000000;
  else
    v340 = 0x80000000;
  if ((v339 & 0x20000000) != 0)
    v341 = v340;
  else
    v341 = v339 & 0xCFFFFFFF;
  if ((v341 & 0x40000000) == 0)
  {
    v342 = v5 + 2;
    if ((v341 & 0x80000000) != 0)
    {
      LOBYTE(v351) = -1;
      v352 = 2;
    }
    else
    {
      v343 = *(_QWORD *)(v13 + 2448);
      v344 = v343 + 520 * v341;
      v345 = *(_QWORD *)(v344 + 312);
      v346 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v344 + 336))
      {
        *(_BYTE *)(v344 + 336) = 0;
        v347 = *(unsigned int *)(v344 + 4);
        if ((_DWORD)v347)
        {
          v828 = v346;
          v872 = v345;
          v916 = v9;
          v348 = 0;
          v349 = (unsigned __int8 *)(v343 + 520 * v341 + 36);
          do
          {
            v350 = *v349;
            v349 += 28;
            v348 = sub_223A4EC9C(v348, ((unint64_t)v350 << 8) | 1, 0xFFu);
            --v347;
          }
          while (v347);
          v351 = v348 >> 8;
          if (!(_BYTE)v348)
            LOBYTE(v351) = -1;
          v45 = a1;
          v9 = v916;
          v346 = v828;
          v345 = v872;
        }
        else
        {
          LOBYTE(v351) = -1;
        }
        *(_BYTE *)(v343 + 520 * v341 + 338) = v351;
      }
      else
      {
        LOBYTE(v351) = *(_BYTE *)(v343 + 520 * v341 + 338);
      }
      v352 = v345 > v346;
    }
    v353 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v342));
    a4.f32[2] = (float)v9;
    v354.i64[0] = 0x3F0000003F000000;
    v354.i64[1] = 0x3F0000003F000000;
    v355 = vmulq_n_f32(vaddq_f32(a4, v354), v353);
    v944 = v355.i32[2];
    v943 = v355.i64[0];
    sub_223FFDF1C(v12[2], &v943, v351, v352, v353);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v356 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v356;
    v13 = **v356;
    v303 = v6 + 6;
    v9 = v8 + 2;
  }
  v357 = v10[179];
  if ((v357 & 0x10000000) != 0)
    v358 = 0x40000000;
  else
    v358 = 0x80000000;
  if ((v357 & 0x20000000) != 0)
    v359 = v358;
  else
    v359 = v357 & 0xCFFFFFFF;
  if ((v359 & 0x40000000) == 0)
  {
    v360 = v5 + 3;
    if ((v359 & 0x80000000) != 0)
    {
      LOBYTE(v369) = -1;
      v370 = 2;
    }
    else
    {
      v361 = *(_QWORD *)(v13 + 2448);
      v362 = v361 + 520 * v359;
      v363 = *(_QWORD *)(v362 + 312);
      v364 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v362 + 336))
      {
        *(_BYTE *)(v362 + 336) = 0;
        v365 = *(unsigned int *)(v362 + 4);
        if ((_DWORD)v365)
        {
          v829 = v364;
          v873 = v363;
          v917 = v9;
          v366 = 0;
          v367 = (unsigned __int8 *)(v361 + 520 * v359 + 36);
          do
          {
            v368 = *v367;
            v367 += 28;
            v366 = sub_223A4EC9C(v366, ((unint64_t)v368 << 8) | 1, 0xFFu);
            --v365;
          }
          while (v365);
          v369 = v366 >> 8;
          if (!(_BYTE)v366)
            LOBYTE(v369) = -1;
          v45 = a1;
          v9 = v917;
          v364 = v829;
          v363 = v873;
        }
        else
        {
          LOBYTE(v369) = -1;
        }
        *(_BYTE *)(v361 + 520 * v359 + 338) = v369;
      }
      else
      {
        LOBYTE(v369) = *(_BYTE *)(v361 + 520 * v359 + 338);
      }
      v370 = v363 > v364;
    }
    v371 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v360));
    a4.f32[2] = (float)v9;
    v372.i64[0] = 0x3F0000003F000000;
    v372.i64[1] = 0x3F0000003F000000;
    v373 = vmulq_n_f32(vaddq_f32(a4, v372), v371);
    v944 = v373.i32[2];
    v943 = v373.i64[0];
    sub_223FFDF1C(v12[2], &v943, v369, v370, v371);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v374 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v374;
    v13 = **v374;
    v303 = v6 + 6;
    v9 = v8 + 2;
  }
  v375 = v10[180];
  if ((v375 & 0x10000000) != 0)
    v376 = 0x40000000;
  else
    v376 = 0x80000000;
  if ((v375 & 0x20000000) != 0)
    v377 = v376;
  else
    v377 = v375 & 0xCFFFFFFF;
  if ((v377 & 0x40000000) == 0)
  {
    v378 = v5 + 4;
    if ((v377 & 0x80000000) != 0)
    {
      LOBYTE(v387) = -1;
      v388 = 2;
    }
    else
    {
      v379 = *(_QWORD *)(v13 + 2448);
      v380 = v379 + 520 * v377;
      v381 = *(_QWORD *)(v380 + 312);
      v382 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v380 + 336))
      {
        *(_BYTE *)(v380 + 336) = 0;
        v383 = *(unsigned int *)(v380 + 4);
        if ((_DWORD)v383)
        {
          v830 = v382;
          v874 = v381;
          v918 = v9;
          v384 = 0;
          v385 = (unsigned __int8 *)(v379 + 520 * v377 + 36);
          do
          {
            v386 = *v385;
            v385 += 28;
            v384 = sub_223A4EC9C(v384, ((unint64_t)v386 << 8) | 1, 0xFFu);
            --v383;
          }
          while (v383);
          v387 = v384 >> 8;
          if (!(_BYTE)v384)
            LOBYTE(v387) = -1;
          v45 = a1;
          v9 = v918;
          v382 = v830;
          v381 = v874;
        }
        else
        {
          LOBYTE(v387) = -1;
        }
        *(_BYTE *)(v379 + 520 * v377 + 338) = v387;
      }
      else
      {
        LOBYTE(v387) = *(_BYTE *)(v379 + 520 * v377 + 338);
      }
      v388 = v381 > v382;
    }
    v389 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v378));
    a4.f32[2] = (float)v9;
    v390.i64[0] = 0x3F0000003F000000;
    v390.i64[1] = 0x3F0000003F000000;
    v391 = vmulq_n_f32(vaddq_f32(a4, v390), v389);
    v944 = v391.i32[2];
    v943 = v391.i64[0];
    sub_223FFDF1C(v12[2], &v943, v387, v388, v389);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v392 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v392;
    v13 = **v392;
    v303 = v6 + 6;
    v9 = v8 + 2;
  }
  v393 = v10[181];
  if ((v393 & 0x10000000) != 0)
    v394 = 0x40000000;
  else
    v394 = 0x80000000;
  if ((v393 & 0x20000000) != 0)
    v395 = v394;
  else
    v395 = v393 & 0xCFFFFFFF;
  if ((v395 & 0x40000000) == 0)
  {
    v396 = v5 + 5;
    if ((v395 & 0x80000000) != 0)
    {
      LOBYTE(v405) = -1;
      v406 = 2;
    }
    else
    {
      v397 = *(_QWORD *)(v13 + 2448);
      v398 = v397 + 520 * v395;
      v399 = *(_QWORD *)(v398 + 312);
      v400 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v398 + 336))
      {
        *(_BYTE *)(v398 + 336) = 0;
        v401 = *(unsigned int *)(v398 + 4);
        if ((_DWORD)v401)
        {
          v831 = v400;
          v875 = v399;
          v919 = v9;
          v402 = 0;
          v403 = (unsigned __int8 *)(v397 + 520 * v395 + 36);
          do
          {
            v404 = *v403;
            v403 += 28;
            v402 = sub_223A4EC9C(v402, ((unint64_t)v404 << 8) | 1, 0xFFu);
            --v401;
          }
          while (v401);
          v405 = v402 >> 8;
          if (!(_BYTE)v402)
            LOBYTE(v405) = -1;
          v45 = a1;
          v9 = v919;
          v400 = v831;
          v399 = v875;
        }
        else
        {
          LOBYTE(v405) = -1;
        }
        *(_BYTE *)(v397 + 520 * v395 + 338) = v405;
      }
      else
      {
        LOBYTE(v405) = *(_BYTE *)(v397 + 520 * v395 + 338);
      }
      v406 = v399 > v400;
    }
    v407 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v396));
    a4.f32[2] = (float)v9;
    v408.i64[0] = 0x3F0000003F000000;
    v408.i64[1] = 0x3F0000003F000000;
    v409 = vmulq_n_f32(vaddq_f32(a4, v408), v407);
    v944 = v409.i32[2];
    v943 = v409.i64[0];
    sub_223FFDF1C(v12[2], &v943, v405, v406, v407);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v410 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v410;
    v13 = **v410;
    v303 = v6 + 6;
    v9 = v8 + 2;
  }
  v411 = v10[182];
  if ((v411 & 0x10000000) != 0)
    v412 = 0x40000000;
  else
    v412 = 0x80000000;
  if ((v411 & 0x20000000) != 0)
    v413 = v412;
  else
    v413 = v411 & 0xCFFFFFFF;
  if ((v413 & 0x40000000) == 0)
  {
    v414 = v5 + 6;
    if ((v413 & 0x80000000) != 0)
    {
      LOBYTE(v423) = -1;
      v424 = 2;
    }
    else
    {
      v415 = *(_QWORD *)(v13 + 2448);
      v416 = v415 + 520 * v413;
      v417 = *(_QWORD *)(v416 + 312);
      v418 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v416 + 336))
      {
        *(_BYTE *)(v416 + 336) = 0;
        v419 = *(unsigned int *)(v416 + 4);
        if ((_DWORD)v419)
        {
          v832 = v418;
          v876 = v417;
          v920 = v9;
          v420 = 0;
          v421 = (unsigned __int8 *)(v415 + 520 * v413 + 36);
          do
          {
            v422 = *v421;
            v421 += 28;
            v420 = sub_223A4EC9C(v420, ((unint64_t)v422 << 8) | 1, 0xFFu);
            --v419;
          }
          while (v419);
          v423 = v420 >> 8;
          if (!(_BYTE)v420)
            LOBYTE(v423) = -1;
          v45 = a1;
          v9 = v920;
          v418 = v832;
          v417 = v876;
        }
        else
        {
          LOBYTE(v423) = -1;
        }
        *(_BYTE *)(v415 + 520 * v413 + 338) = v423;
      }
      else
      {
        LOBYTE(v423) = *(_BYTE *)(v415 + 520 * v413 + 338);
      }
      v424 = v417 > v418;
    }
    v425 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v414));
    a4.f32[2] = (float)v9;
    v426.i64[0] = 0x3F0000003F000000;
    v426.i64[1] = 0x3F0000003F000000;
    v427 = vmulq_n_f32(vaddq_f32(a4, v426), v425);
    v944 = v427.i32[2];
    v943 = v427.i64[0];
    sub_223FFDF1C(v12[2], &v943, v423, v424, v425);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v428 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v428;
    v13 = **v428;
    v303 = v6 + 6;
    v9 = v8 + 2;
  }
  v429 = v10[183];
  if ((v429 & 0x10000000) != 0)
    v430 = 0x40000000;
  else
    v430 = 0x80000000;
  if ((v429 & 0x20000000) != 0)
    v431 = v430;
  else
    v431 = v429 & 0xCFFFFFFF;
  if ((v431 & 0x40000000) == 0)
  {
    v432 = v5 + 7;
    if ((v431 & 0x80000000) != 0)
    {
      LOBYTE(v441) = -1;
      v442 = 2;
    }
    else
    {
      v433 = *(_QWORD *)(v13 + 2448);
      v434 = v433 + 520 * v431;
      v435 = *(_QWORD *)(v434 + 312);
      v436 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v434 + 336))
      {
        *(_BYTE *)(v434 + 336) = 0;
        v437 = *(unsigned int *)(v434 + 4);
        if ((_DWORD)v437)
        {
          v833 = v436;
          v877 = v435;
          v921 = v9;
          v438 = 0;
          v439 = (unsigned __int8 *)(v433 + 520 * v431 + 36);
          do
          {
            v440 = *v439;
            v439 += 28;
            v438 = sub_223A4EC9C(v438, ((unint64_t)v440 << 8) | 1, 0xFFu);
            --v437;
          }
          while (v437);
          v441 = v438 >> 8;
          if (!(_BYTE)v438)
            LOBYTE(v441) = -1;
          v45 = a1;
          v9 = v921;
          v436 = v833;
          v435 = v877;
        }
        else
        {
          LOBYTE(v441) = -1;
        }
        *(_BYTE *)(v433 + 520 * v431 + 338) = v441;
      }
      else
      {
        LOBYTE(v441) = *(_BYTE *)(v433 + 520 * v431 + 338);
      }
      v442 = v435 > v436;
    }
    v443 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v432));
    a4.f32[2] = (float)v9;
    v444.i64[0] = 0x3F0000003F000000;
    v444.i64[1] = 0x3F0000003F000000;
    v445 = vmulq_n_f32(vaddq_f32(a4, v444), v443);
    v944 = v445.i32[2];
    v943 = v445.i64[0];
    sub_223FFDF1C(v12[2], &v943, v441, v442, v443);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v446 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v446;
    v13 = **v446;
    v9 = v8 + 2;
  }
  v447 = v6 + 7;
  v448 = v10[184];
  if ((v448 & 0x10000000) != 0)
    v449 = 0x40000000;
  else
    v449 = 0x80000000;
  if ((v448 & 0x20000000) != 0)
    v450 = v449;
  else
    v450 = v448 & 0xCFFFFFFF;
  if ((v450 & 0x40000000) == 0)
  {
    if ((v450 & 0x80000000) != 0)
    {
      LOBYTE(v459) = -1;
      v460 = 2;
    }
    else
    {
      v451 = *(_QWORD *)(v13 + 2448);
      v452 = v451 + 520 * v450;
      v453 = *(_QWORD *)(v452 + 312);
      v454 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v452 + 336))
      {
        *(_BYTE *)(v452 + 336) = 0;
        v455 = *(unsigned int *)(v452 + 4);
        if ((_DWORD)v455)
        {
          v834 = v454;
          v878 = v453;
          v922 = v9;
          v456 = 0;
          v457 = (unsigned __int8 *)(v451 + 520 * v450 + 36);
          do
          {
            v458 = *v457;
            v457 += 28;
            v456 = sub_223A4EC9C(v456, ((unint64_t)v458 << 8) | 1, 0xFFu);
            --v455;
          }
          while (v455);
          v459 = v456 >> 8;
          if (!(_BYTE)v456)
            LOBYTE(v459) = -1;
          v45 = a1;
          v9 = v922;
          v454 = v834;
          v453 = v878;
        }
        else
        {
          LOBYTE(v459) = -1;
        }
        *(_BYTE *)(v451 + 520 * v450 + 338) = v459;
      }
      else
      {
        LOBYTE(v459) = *(_BYTE *)(v451 + 520 * v450 + 338);
      }
      v460 = v453 > v454;
    }
    v461 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v447, v5));
    a4.f32[2] = (float)v9;
    v462.i64[0] = 0x3F0000003F000000;
    v462.i64[1] = 0x3F0000003F000000;
    v463 = vmulq_n_f32(vaddq_f32(a4, v462), v461);
    v944 = v463.i32[2];
    v943 = v463.i64[0];
    sub_223FFDF1C(v12[2], &v943, v459, v460, v461);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v464 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v464;
    v13 = **v464;
    v447 = v6 + 7;
    v9 = v8 + 2;
  }
  v465 = v10[185];
  if ((v465 & 0x10000000) != 0)
    v466 = 0x40000000;
  else
    v466 = 0x80000000;
  if ((v465 & 0x20000000) != 0)
    v467 = v466;
  else
    v467 = v465 & 0xCFFFFFFF;
  if ((v467 & 0x40000000) == 0)
  {
    v468 = v5 + 1;
    if ((v467 & 0x80000000) != 0)
    {
      LOBYTE(v477) = -1;
      v478 = 2;
    }
    else
    {
      v469 = *(_QWORD *)(v13 + 2448);
      v470 = v469 + 520 * v467;
      v471 = *(_QWORD *)(v470 + 312);
      v472 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v470 + 336))
      {
        *(_BYTE *)(v470 + 336) = 0;
        v473 = *(unsigned int *)(v470 + 4);
        if ((_DWORD)v473)
        {
          v835 = v472;
          v879 = v471;
          v923 = v9;
          v474 = 0;
          v475 = (unsigned __int8 *)(v469 + 520 * v467 + 36);
          do
          {
            v476 = *v475;
            v475 += 28;
            v474 = sub_223A4EC9C(v474, ((unint64_t)v476 << 8) | 1, 0xFFu);
            --v473;
          }
          while (v473);
          v477 = v474 >> 8;
          if (!(_BYTE)v474)
            LOBYTE(v477) = -1;
          v45 = a1;
          v9 = v923;
          v472 = v835;
          v471 = v879;
        }
        else
        {
          LOBYTE(v477) = -1;
        }
        *(_BYTE *)(v469 + 520 * v467 + 338) = v477;
      }
      else
      {
        LOBYTE(v477) = *(_BYTE *)(v469 + 520 * v467 + 338);
      }
      v478 = v471 > v472;
    }
    v479 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v447, v468));
    a4.f32[2] = (float)v9;
    v480.i64[0] = 0x3F0000003F000000;
    v480.i64[1] = 0x3F0000003F000000;
    v481 = vmulq_n_f32(vaddq_f32(a4, v480), v479);
    v944 = v481.i32[2];
    v943 = v481.i64[0];
    sub_223FFDF1C(v12[2], &v943, v477, v478, v479);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v482 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v482;
    v13 = **v482;
    v447 = v6 + 7;
    v9 = v8 + 2;
  }
  v483 = v10[186];
  if ((v483 & 0x10000000) != 0)
    v484 = 0x40000000;
  else
    v484 = 0x80000000;
  if ((v483 & 0x20000000) != 0)
    v485 = v484;
  else
    v485 = v483 & 0xCFFFFFFF;
  if ((v485 & 0x40000000) == 0)
  {
    v486 = v5 + 2;
    if ((v485 & 0x80000000) != 0)
    {
      LOBYTE(v495) = -1;
      v496 = 2;
    }
    else
    {
      v487 = *(_QWORD *)(v13 + 2448);
      v488 = v487 + 520 * v485;
      v489 = *(_QWORD *)(v488 + 312);
      v490 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v488 + 336))
      {
        *(_BYTE *)(v488 + 336) = 0;
        v491 = *(unsigned int *)(v488 + 4);
        if ((_DWORD)v491)
        {
          v836 = v490;
          v880 = v489;
          v924 = v9;
          v492 = 0;
          v493 = (unsigned __int8 *)(v487 + 520 * v485 + 36);
          do
          {
            v494 = *v493;
            v493 += 28;
            v492 = sub_223A4EC9C(v492, ((unint64_t)v494 << 8) | 1, 0xFFu);
            --v491;
          }
          while (v491);
          v495 = v492 >> 8;
          if (!(_BYTE)v492)
            LOBYTE(v495) = -1;
          v45 = a1;
          v9 = v924;
          v490 = v836;
          v489 = v880;
        }
        else
        {
          LOBYTE(v495) = -1;
        }
        *(_BYTE *)(v487 + 520 * v485 + 338) = v495;
      }
      else
      {
        LOBYTE(v495) = *(_BYTE *)(v487 + 520 * v485 + 338);
      }
      v496 = v489 > v490;
    }
    v497 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v447, v486));
    a4.f32[2] = (float)v9;
    v498.i64[0] = 0x3F0000003F000000;
    v498.i64[1] = 0x3F0000003F000000;
    v499 = vmulq_n_f32(vaddq_f32(a4, v498), v497);
    v944 = v499.i32[2];
    v943 = v499.i64[0];
    sub_223FFDF1C(v12[2], &v943, v495, v496, v497);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v500 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v500;
    v13 = **v500;
    v447 = v6 + 7;
    v9 = v8 + 2;
  }
  v501 = v10[187];
  if ((v501 & 0x10000000) != 0)
    v502 = 0x40000000;
  else
    v502 = 0x80000000;
  if ((v501 & 0x20000000) != 0)
    v503 = v502;
  else
    v503 = v501 & 0xCFFFFFFF;
  if ((v503 & 0x40000000) == 0)
  {
    v504 = v5 + 3;
    if ((v503 & 0x80000000) != 0)
    {
      LOBYTE(v513) = -1;
      v514 = 2;
    }
    else
    {
      v505 = *(_QWORD *)(v13 + 2448);
      v506 = v505 + 520 * v503;
      v507 = *(_QWORD *)(v506 + 312);
      v508 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v506 + 336))
      {
        *(_BYTE *)(v506 + 336) = 0;
        v509 = *(unsigned int *)(v506 + 4);
        if ((_DWORD)v509)
        {
          v837 = v508;
          v881 = v507;
          v925 = v9;
          v510 = 0;
          v511 = (unsigned __int8 *)(v505 + 520 * v503 + 36);
          do
          {
            v512 = *v511;
            v511 += 28;
            v510 = sub_223A4EC9C(v510, ((unint64_t)v512 << 8) | 1, 0xFFu);
            --v509;
          }
          while (v509);
          v513 = v510 >> 8;
          if (!(_BYTE)v510)
            LOBYTE(v513) = -1;
          v45 = a1;
          v9 = v925;
          v508 = v837;
          v507 = v881;
        }
        else
        {
          LOBYTE(v513) = -1;
        }
        *(_BYTE *)(v505 + 520 * v503 + 338) = v513;
      }
      else
      {
        LOBYTE(v513) = *(_BYTE *)(v505 + 520 * v503 + 338);
      }
      v514 = v507 > v508;
    }
    v515 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v447, v504));
    a4.f32[2] = (float)v9;
    v516.i64[0] = 0x3F0000003F000000;
    v516.i64[1] = 0x3F0000003F000000;
    v517 = vmulq_n_f32(vaddq_f32(a4, v516), v515);
    v944 = v517.i32[2];
    v943 = v517.i64[0];
    sub_223FFDF1C(v12[2], &v943, v513, v514, v515);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v518 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v518;
    v13 = **v518;
    v447 = v6 + 7;
    v9 = v8 + 2;
  }
  v519 = v10[188];
  if ((v519 & 0x10000000) != 0)
    v520 = 0x40000000;
  else
    v520 = 0x80000000;
  if ((v519 & 0x20000000) != 0)
    v521 = v520;
  else
    v521 = v519 & 0xCFFFFFFF;
  if ((v521 & 0x40000000) == 0)
  {
    v522 = v5 + 4;
    if ((v521 & 0x80000000) != 0)
    {
      LOBYTE(v531) = -1;
      v532 = 2;
    }
    else
    {
      v523 = *(_QWORD *)(v13 + 2448);
      v524 = v523 + 520 * v521;
      v525 = *(_QWORD *)(v524 + 312);
      v526 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v524 + 336))
      {
        *(_BYTE *)(v524 + 336) = 0;
        v527 = *(unsigned int *)(v524 + 4);
        if ((_DWORD)v527)
        {
          v838 = v526;
          v882 = v525;
          v926 = v9;
          v528 = 0;
          v529 = (unsigned __int8 *)(v523 + 520 * v521 + 36);
          do
          {
            v530 = *v529;
            v529 += 28;
            v528 = sub_223A4EC9C(v528, ((unint64_t)v530 << 8) | 1, 0xFFu);
            --v527;
          }
          while (v527);
          v531 = v528 >> 8;
          if (!(_BYTE)v528)
            LOBYTE(v531) = -1;
          v45 = a1;
          v9 = v926;
          v526 = v838;
          v525 = v882;
        }
        else
        {
          LOBYTE(v531) = -1;
        }
        *(_BYTE *)(v523 + 520 * v521 + 338) = v531;
      }
      else
      {
        LOBYTE(v531) = *(_BYTE *)(v523 + 520 * v521 + 338);
      }
      v532 = v525 > v526;
    }
    v533 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v447, v522));
    a4.f32[2] = (float)v9;
    v534.i64[0] = 0x3F0000003F000000;
    v534.i64[1] = 0x3F0000003F000000;
    v535 = vmulq_n_f32(vaddq_f32(a4, v534), v533);
    v944 = v535.i32[2];
    v943 = v535.i64[0];
    sub_223FFDF1C(v12[2], &v943, v531, v532, v533);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v536 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v536;
    v13 = **v536;
    v447 = v6 + 7;
    v9 = v8 + 2;
  }
  v537 = v10[189];
  if ((v537 & 0x10000000) != 0)
    v538 = 0x40000000;
  else
    v538 = 0x80000000;
  if ((v537 & 0x20000000) != 0)
    v539 = v538;
  else
    v539 = v537 & 0xCFFFFFFF;
  if ((v539 & 0x40000000) == 0)
  {
    v540 = v5 + 5;
    if ((v539 & 0x80000000) != 0)
    {
      LOBYTE(v549) = -1;
      v550 = 2;
    }
    else
    {
      v541 = *(_QWORD *)(v13 + 2448);
      v542 = v541 + 520 * v539;
      v543 = *(_QWORD *)(v542 + 312);
      v544 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v542 + 336))
      {
        *(_BYTE *)(v542 + 336) = 0;
        v545 = *(unsigned int *)(v542 + 4);
        if ((_DWORD)v545)
        {
          v839 = v544;
          v883 = v543;
          v927 = v9;
          v546 = 0;
          v547 = (unsigned __int8 *)(v541 + 520 * v539 + 36);
          do
          {
            v548 = *v547;
            v547 += 28;
            v546 = sub_223A4EC9C(v546, ((unint64_t)v548 << 8) | 1, 0xFFu);
            --v545;
          }
          while (v545);
          v549 = v546 >> 8;
          if (!(_BYTE)v546)
            LOBYTE(v549) = -1;
          v45 = a1;
          v9 = v927;
          v544 = v839;
          v543 = v883;
        }
        else
        {
          LOBYTE(v549) = -1;
        }
        *(_BYTE *)(v541 + 520 * v539 + 338) = v549;
      }
      else
      {
        LOBYTE(v549) = *(_BYTE *)(v541 + 520 * v539 + 338);
      }
      v550 = v543 > v544;
    }
    v551 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v447, v540));
    a4.f32[2] = (float)v9;
    v552.i64[0] = 0x3F0000003F000000;
    v552.i64[1] = 0x3F0000003F000000;
    v553 = vmulq_n_f32(vaddq_f32(a4, v552), v551);
    v944 = v553.i32[2];
    v943 = v553.i64[0];
    sub_223FFDF1C(v12[2], &v943, v549, v550, v551);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v554 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v554;
    v13 = **v554;
    v447 = v6 + 7;
    v9 = v8 + 2;
  }
  v555 = v10[190];
  if ((v555 & 0x10000000) != 0)
    v556 = 0x40000000;
  else
    v556 = 0x80000000;
  if ((v555 & 0x20000000) != 0)
    v557 = v556;
  else
    v557 = v555 & 0xCFFFFFFF;
  if ((v557 & 0x40000000) == 0)
  {
    v558 = v5 + 6;
    if ((v557 & 0x80000000) != 0)
    {
      LOBYTE(v567) = -1;
      v568 = 2;
    }
    else
    {
      v559 = *(_QWORD *)(v13 + 2448);
      v560 = v559 + 520 * v557;
      v561 = *(_QWORD *)(v560 + 312);
      v562 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v560 + 336))
      {
        *(_BYTE *)(v560 + 336) = 0;
        v563 = *(unsigned int *)(v560 + 4);
        if ((_DWORD)v563)
        {
          v840 = v562;
          v884 = v561;
          v928 = v9;
          v564 = 0;
          v565 = (unsigned __int8 *)(v559 + 520 * v557 + 36);
          do
          {
            v566 = *v565;
            v565 += 28;
            v564 = sub_223A4EC9C(v564, ((unint64_t)v566 << 8) | 1, 0xFFu);
            --v563;
          }
          while (v563);
          v567 = v564 >> 8;
          if (!(_BYTE)v564)
            LOBYTE(v567) = -1;
          v45 = a1;
          v9 = v928;
          v562 = v840;
          v561 = v884;
        }
        else
        {
          LOBYTE(v567) = -1;
        }
        *(_BYTE *)(v559 + 520 * v557 + 338) = v567;
      }
      else
      {
        LOBYTE(v567) = *(_BYTE *)(v559 + 520 * v557 + 338);
      }
      v568 = v561 > v562;
    }
    v569 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v447, v558));
    a4.f32[2] = (float)v9;
    v570.i64[0] = 0x3F0000003F000000;
    v570.i64[1] = 0x3F0000003F000000;
    v571 = vmulq_n_f32(vaddq_f32(a4, v570), v569);
    v944 = v571.i32[2];
    v943 = v571.i64[0];
    sub_223FFDF1C(v12[2], &v943, v567, v568, v569);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v572 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v572;
    v13 = **v572;
    v447 = v6 + 7;
    v9 = v8 + 2;
  }
  v573 = v10[191];
  if ((v573 & 0x10000000) != 0)
    v574 = 0x40000000;
  else
    v574 = 0x80000000;
  if ((v573 & 0x20000000) != 0)
    v575 = v574;
  else
    v575 = v573 & 0xCFFFFFFF;
  if ((v575 & 0x40000000) == 0)
  {
    v576 = v5 + 7;
    if ((v575 & 0x80000000) != 0)
    {
      LOBYTE(v585) = -1;
      v586 = 2;
    }
    else
    {
      v577 = *(_QWORD *)(v13 + 2448);
      v578 = v577 + 520 * v575;
      v579 = *(_QWORD *)(v578 + 312);
      v580 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v578 + 336))
      {
        *(_BYTE *)(v578 + 336) = 0;
        v581 = *(unsigned int *)(v578 + 4);
        if ((_DWORD)v581)
        {
          v841 = v580;
          v885 = v579;
          v929 = v9;
          v582 = 0;
          v583 = (unsigned __int8 *)(v577 + 520 * v575 + 36);
          do
          {
            v584 = *v583;
            v583 += 28;
            v582 = sub_223A4EC9C(v582, ((unint64_t)v584 << 8) | 1, 0xFFu);
            --v581;
          }
          while (v581);
          v585 = v582 >> 8;
          if (!(_BYTE)v582)
            LOBYTE(v585) = -1;
          v45 = a1;
          v9 = v929;
          v580 = v841;
          v579 = v885;
        }
        else
        {
          LOBYTE(v585) = -1;
        }
        *(_BYTE *)(v577 + 520 * v575 + 338) = v585;
      }
      else
      {
        LOBYTE(v585) = *(_BYTE *)(v577 + 520 * v575 + 338);
      }
      v586 = v579 > v580;
    }
    v587 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v447, v576));
    a4.f32[2] = (float)v9;
    v588.i64[0] = 0x3F0000003F000000;
    v588.i64[1] = 0x3F0000003F000000;
    v589 = vmulq_n_f32(vaddq_f32(a4, v588), v587);
    v944 = v589.i32[2];
    v943 = v589.i64[0];
    sub_223FFDF1C(v12[2], &v943, v585, v586, v587);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v590 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v590;
    v13 = **v590;
  }
  v591 = v8 + 3;
  v592 = v10[192];
  if ((v592 & 0x10000000) != 0)
    v593 = 0x40000000;
  else
    v593 = 0x80000000;
  if ((v592 & 0x20000000) != 0)
    v594 = v593;
  else
    v594 = v592 & 0xCFFFFFFF;
  if ((v594 & 0x40000000) == 0)
  {
    if ((v594 & 0x80000000) != 0)
    {
      LOBYTE(v603) = -1;
      v604 = 2;
    }
    else
    {
      v595 = *(_QWORD *)(v13 + 2448);
      v596 = v595 + 520 * v594;
      v597 = *(_QWORD *)(v596 + 312);
      v598 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v596 + 336))
      {
        *(_BYTE *)(v596 + 336) = 0;
        v599 = *(unsigned int *)(v596 + 4);
        if ((_DWORD)v599)
        {
          v842 = v598;
          v886 = v597;
          v930 = v591;
          v600 = 0;
          v601 = (unsigned __int8 *)(v595 + 520 * v594 + 36);
          do
          {
            v602 = *v601;
            v601 += 28;
            v600 = sub_223A4EC9C(v600, ((unint64_t)v602 << 8) | 1, 0xFFu);
            --v599;
          }
          while (v599);
          v603 = v600 >> 8;
          if (!(_BYTE)v600)
            LOBYTE(v603) = -1;
          v45 = a1;
          v591 = v930;
          v598 = v842;
          v597 = v886;
        }
        else
        {
          LOBYTE(v603) = -1;
        }
        *(_BYTE *)(v595 + 520 * v594 + 338) = v603;
      }
      else
      {
        LOBYTE(v603) = *(_BYTE *)(v595 + 520 * v594 + 338);
      }
      v604 = v597 > v598;
    }
    a4.f32[0] = (float)v5;
    a4.f32[1] = (float)v6;
    v605 = *(float *)(v13 + 144);
    a4.f32[2] = (float)v591;
    v606.i64[0] = 0x3F0000003F000000;
    v606.i64[1] = 0x3F0000003F000000;
    v607 = vmulq_n_f32(vaddq_f32(a4, v606), v605);
    v944 = v607.i32[2];
    v943 = v607.i64[0];
    sub_223FFDF1C(v12[2], &v943, v603, v604, v605);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v608 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v608;
    v13 = **v608;
    v591 = a2[2] + 3;
  }
  v609 = v10[193];
  if ((v609 & 0x10000000) != 0)
    v610 = 0x40000000;
  else
    v610 = 0x80000000;
  if ((v609 & 0x20000000) != 0)
    v611 = v610;
  else
    v611 = v609 & 0xCFFFFFFF;
  if ((v611 & 0x40000000) == 0)
  {
    v612 = v5 + 1;
    if ((v611 & 0x80000000) != 0)
    {
      LOBYTE(v621) = -1;
      v622 = 2;
    }
    else
    {
      v613 = *(_QWORD *)(v13 + 2448);
      v614 = v613 + 520 * v611;
      v615 = *(_QWORD *)(v614 + 312);
      v616 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v614 + 336))
      {
        *(_BYTE *)(v614 + 336) = 0;
        v617 = *(unsigned int *)(v614 + 4);
        if ((_DWORD)v617)
        {
          v843 = v616;
          v887 = v615;
          v931 = v591;
          v618 = 0;
          v619 = (unsigned __int8 *)(v613 + 520 * v611 + 36);
          do
          {
            v620 = *v619;
            v619 += 28;
            v618 = sub_223A4EC9C(v618, ((unint64_t)v620 << 8) | 1, 0xFFu);
            --v617;
          }
          while (v617);
          v621 = v618 >> 8;
          if (!(_BYTE)v618)
            LOBYTE(v621) = -1;
          v45 = a1;
          v591 = v931;
          v616 = v843;
          v615 = v887;
        }
        else
        {
          LOBYTE(v621) = -1;
        }
        *(_BYTE *)(v613 + 520 * v611 + 338) = v621;
      }
      else
      {
        LOBYTE(v621) = *(_BYTE *)(v613 + 520 * v611 + 338);
      }
      v622 = v615 > v616;
    }
    v623 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v612));
    a4.f32[2] = (float)v591;
    v624.i64[0] = 0x3F0000003F000000;
    v624.i64[1] = 0x3F0000003F000000;
    v625 = vmulq_n_f32(vaddq_f32(a4, v624), v623);
    v944 = v625.i32[2];
    v943 = v625.i64[0];
    sub_223FFDF1C(v12[2], &v943, v621, v622, v623);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v626 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v626;
    v13 = **v626;
    v591 = a2[2] + 3;
  }
  v627 = v10[194];
  if ((v627 & 0x10000000) != 0)
    v628 = 0x40000000;
  else
    v628 = 0x80000000;
  if ((v627 & 0x20000000) != 0)
    v629 = v628;
  else
    v629 = v627 & 0xCFFFFFFF;
  if ((v629 & 0x40000000) == 0)
  {
    v630 = v5 + 2;
    if ((v629 & 0x80000000) != 0)
    {
      LOBYTE(v639) = -1;
      v640 = 2;
    }
    else
    {
      v631 = *(_QWORD *)(v13 + 2448);
      v632 = v631 + 520 * v629;
      v633 = *(_QWORD *)(v632 + 312);
      v634 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v632 + 336))
      {
        *(_BYTE *)(v632 + 336) = 0;
        v635 = *(unsigned int *)(v632 + 4);
        if ((_DWORD)v635)
        {
          v844 = v634;
          v888 = v633;
          v932 = v591;
          v636 = 0;
          v637 = (unsigned __int8 *)(v631 + 520 * v629 + 36);
          do
          {
            v638 = *v637;
            v637 += 28;
            v636 = sub_223A4EC9C(v636, ((unint64_t)v638 << 8) | 1, 0xFFu);
            --v635;
          }
          while (v635);
          v639 = v636 >> 8;
          if (!(_BYTE)v636)
            LOBYTE(v639) = -1;
          v45 = a1;
          v591 = v932;
          v634 = v844;
          v633 = v888;
        }
        else
        {
          LOBYTE(v639) = -1;
        }
        *(_BYTE *)(v631 + 520 * v629 + 338) = v639;
      }
      else
      {
        LOBYTE(v639) = *(_BYTE *)(v631 + 520 * v629 + 338);
      }
      v640 = v633 > v634;
    }
    v641 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v630));
    a4.f32[2] = (float)v591;
    v642.i64[0] = 0x3F0000003F000000;
    v642.i64[1] = 0x3F0000003F000000;
    v643 = vmulq_n_f32(vaddq_f32(a4, v642), v641);
    v944 = v643.i32[2];
    v943 = v643.i64[0];
    sub_223FFDF1C(v12[2], &v943, v639, v640, v641);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v644 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v644;
    v13 = **v644;
    v591 = a2[2] + 3;
  }
  v645 = v10[195];
  if ((v645 & 0x10000000) != 0)
    v646 = 0x40000000;
  else
    v646 = 0x80000000;
  if ((v645 & 0x20000000) != 0)
    v647 = v646;
  else
    v647 = v645 & 0xCFFFFFFF;
  if ((v647 & 0x40000000) == 0)
  {
    v648 = v5 + 3;
    if ((v647 & 0x80000000) != 0)
    {
      LOBYTE(v657) = -1;
      v658 = 2;
    }
    else
    {
      v649 = *(_QWORD *)(v13 + 2448);
      v650 = v649 + 520 * v647;
      v651 = *(_QWORD *)(v650 + 312);
      v652 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v650 + 336))
      {
        *(_BYTE *)(v650 + 336) = 0;
        v653 = *(unsigned int *)(v650 + 4);
        if ((_DWORD)v653)
        {
          v845 = v652;
          v889 = v651;
          v933 = v591;
          v654 = 0;
          v655 = (unsigned __int8 *)(v649 + 520 * v647 + 36);
          do
          {
            v656 = *v655;
            v655 += 28;
            v654 = sub_223A4EC9C(v654, ((unint64_t)v656 << 8) | 1, 0xFFu);
            --v653;
          }
          while (v653);
          v657 = v654 >> 8;
          if (!(_BYTE)v654)
            LOBYTE(v657) = -1;
          v45 = a1;
          v591 = v933;
          v652 = v845;
          v651 = v889;
        }
        else
        {
          LOBYTE(v657) = -1;
        }
        *(_BYTE *)(v649 + 520 * v647 + 338) = v657;
      }
      else
      {
        LOBYTE(v657) = *(_BYTE *)(v649 + 520 * v647 + 338);
      }
      v658 = v651 > v652;
    }
    v659 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v648));
    a4.f32[2] = (float)v591;
    v660.i64[0] = 0x3F0000003F000000;
    v660.i64[1] = 0x3F0000003F000000;
    v661 = vmulq_n_f32(vaddq_f32(a4, v660), v659);
    v944 = v661.i32[2];
    v943 = v661.i64[0];
    sub_223FFDF1C(v12[2], &v943, v657, v658, v659);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v662 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v662;
    v13 = **v662;
    v591 = a2[2] + 3;
  }
  v663 = v10[196];
  if ((v663 & 0x10000000) != 0)
    v664 = 0x40000000;
  else
    v664 = 0x80000000;
  if ((v663 & 0x20000000) != 0)
    v665 = v664;
  else
    v665 = v663 & 0xCFFFFFFF;
  if ((v665 & 0x40000000) == 0)
  {
    v666 = v5 + 4;
    if ((v665 & 0x80000000) != 0)
    {
      LOBYTE(v675) = -1;
      v676 = 2;
    }
    else
    {
      v667 = *(_QWORD *)(v13 + 2448);
      v668 = v667 + 520 * v665;
      v669 = *(_QWORD *)(v668 + 312);
      v670 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v668 + 336))
      {
        *(_BYTE *)(v668 + 336) = 0;
        v671 = *(unsigned int *)(v668 + 4);
        if ((_DWORD)v671)
        {
          v846 = v670;
          v890 = v669;
          v934 = v591;
          v672 = 0;
          v673 = (unsigned __int8 *)(v667 + 520 * v665 + 36);
          do
          {
            v674 = *v673;
            v673 += 28;
            v672 = sub_223A4EC9C(v672, ((unint64_t)v674 << 8) | 1, 0xFFu);
            --v671;
          }
          while (v671);
          v675 = v672 >> 8;
          if (!(_BYTE)v672)
            LOBYTE(v675) = -1;
          v45 = a1;
          v591 = v934;
          v670 = v846;
          v669 = v890;
        }
        else
        {
          LOBYTE(v675) = -1;
        }
        *(_BYTE *)(v667 + 520 * v665 + 338) = v675;
      }
      else
      {
        LOBYTE(v675) = *(_BYTE *)(v667 + 520 * v665 + 338);
      }
      v676 = v669 > v670;
    }
    v677 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v666));
    a4.f32[2] = (float)v591;
    v678.i64[0] = 0x3F0000003F000000;
    v678.i64[1] = 0x3F0000003F000000;
    v679 = vmulq_n_f32(vaddq_f32(a4, v678), v677);
    v944 = v679.i32[2];
    v943 = v679.i64[0];
    sub_223FFDF1C(v12[2], &v943, v675, v676, v677);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v680 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v680;
    v13 = **v680;
    v591 = a2[2] + 3;
  }
  v681 = v10[197];
  if ((v681 & 0x10000000) != 0)
    v682 = 0x40000000;
  else
    v682 = 0x80000000;
  if ((v681 & 0x20000000) != 0)
    v683 = v682;
  else
    v683 = v681 & 0xCFFFFFFF;
  if ((v683 & 0x40000000) == 0)
  {
    v684 = v5 + 5;
    if ((v683 & 0x80000000) != 0)
    {
      LOBYTE(v693) = -1;
      v694 = 2;
    }
    else
    {
      v685 = *(_QWORD *)(v13 + 2448);
      v686 = v685 + 520 * v683;
      v687 = *(_QWORD *)(v686 + 312);
      v688 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v686 + 336))
      {
        *(_BYTE *)(v686 + 336) = 0;
        v689 = *(unsigned int *)(v686 + 4);
        if ((_DWORD)v689)
        {
          v847 = v688;
          v891 = v687;
          v935 = v591;
          v690 = 0;
          v691 = (unsigned __int8 *)(v685 + 520 * v683 + 36);
          do
          {
            v692 = *v691;
            v691 += 28;
            v690 = sub_223A4EC9C(v690, ((unint64_t)v692 << 8) | 1, 0xFFu);
            --v689;
          }
          while (v689);
          v693 = v690 >> 8;
          if (!(_BYTE)v690)
            LOBYTE(v693) = -1;
          v45 = a1;
          v591 = v935;
          v688 = v847;
          v687 = v891;
        }
        else
        {
          LOBYTE(v693) = -1;
        }
        *(_BYTE *)(v685 + 520 * v683 + 338) = v693;
      }
      else
      {
        LOBYTE(v693) = *(_BYTE *)(v685 + 520 * v683 + 338);
      }
      v694 = v687 > v688;
    }
    v695 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v684));
    a4.f32[2] = (float)v591;
    v696.i64[0] = 0x3F0000003F000000;
    v696.i64[1] = 0x3F0000003F000000;
    v697 = vmulq_n_f32(vaddq_f32(a4, v696), v695);
    v944 = v697.i32[2];
    v943 = v697.i64[0];
    sub_223FFDF1C(v12[2], &v943, v693, v694, v695);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v698 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v698;
    v13 = **v698;
    v591 = a2[2] + 3;
  }
  v699 = v10[198];
  if ((v699 & 0x10000000) != 0)
    v700 = 0x40000000;
  else
    v700 = 0x80000000;
  if ((v699 & 0x20000000) != 0)
    v701 = v700;
  else
    v701 = v699 & 0xCFFFFFFF;
  if ((v701 & 0x40000000) == 0)
  {
    v702 = v5 + 6;
    if ((v701 & 0x80000000) != 0)
    {
      LOBYTE(v711) = -1;
      v712 = 2;
    }
    else
    {
      v703 = *(_QWORD *)(v13 + 2448);
      v704 = v703 + 520 * v701;
      v705 = *(_QWORD *)(v704 + 312);
      v706 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v704 + 336))
      {
        *(_BYTE *)(v704 + 336) = 0;
        v707 = *(unsigned int *)(v704 + 4);
        if ((_DWORD)v707)
        {
          v848 = v706;
          v892 = v705;
          v936 = v591;
          v708 = 0;
          v709 = (unsigned __int8 *)(v703 + 520 * v701 + 36);
          do
          {
            v710 = *v709;
            v709 += 28;
            v708 = sub_223A4EC9C(v708, ((unint64_t)v710 << 8) | 1, 0xFFu);
            --v707;
          }
          while (v707);
          v711 = v708 >> 8;
          if (!(_BYTE)v708)
            LOBYTE(v711) = -1;
          v45 = a1;
          v591 = v936;
          v706 = v848;
          v705 = v892;
        }
        else
        {
          LOBYTE(v711) = -1;
        }
        *(_BYTE *)(v703 + 520 * v701 + 338) = v711;
      }
      else
      {
        LOBYTE(v711) = *(_BYTE *)(v703 + 520 * v701 + 338);
      }
      v712 = v705 > v706;
    }
    v713 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v702));
    a4.f32[2] = (float)v591;
    v714.i64[0] = 0x3F0000003F000000;
    v714.i64[1] = 0x3F0000003F000000;
    v715 = vmulq_n_f32(vaddq_f32(a4, v714), v713);
    v944 = v715.i32[2];
    v943 = v715.i64[0];
    sub_223FFDF1C(v12[2], &v943, v711, v712, v713);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v716 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v716;
    v13 = **v716;
    v591 = a2[2] + 3;
  }
  v717 = v10[199];
  if ((v717 & 0x10000000) != 0)
    v718 = 0x40000000;
  else
    v718 = 0x80000000;
  if ((v717 & 0x20000000) != 0)
    v719 = v718;
  else
    v719 = v717 & 0xCFFFFFFF;
  if ((v719 & 0x40000000) == 0)
  {
    v720 = v5 + 7;
    if ((v719 & 0x80000000) != 0)
    {
      LOBYTE(v729) = -1;
      v730 = 2;
    }
    else
    {
      v721 = *(_QWORD *)(v13 + 2448);
      v722 = v721 + 520 * v719;
      v723 = *(_QWORD *)(v722 + 312);
      v724 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v722 + 336))
      {
        *(_BYTE *)(v722 + 336) = 0;
        v725 = *(unsigned int *)(v722 + 4);
        if ((_DWORD)v725)
        {
          v849 = v724;
          v893 = v723;
          v937 = v591;
          v726 = 0;
          v727 = (unsigned __int8 *)(v721 + 520 * v719 + 36);
          do
          {
            v728 = *v727;
            v727 += 28;
            v726 = sub_223A4EC9C(v726, ((unint64_t)v728 << 8) | 1, 0xFFu);
            --v725;
          }
          while (v725);
          v729 = v726 >> 8;
          if (!(_BYTE)v726)
            LOBYTE(v729) = -1;
          v45 = a1;
          v591 = v937;
          v724 = v849;
          v723 = v893;
        }
        else
        {
          LOBYTE(v729) = -1;
        }
        *(_BYTE *)(v721 + 520 * v719 + 338) = v729;
      }
      else
      {
        LOBYTE(v729) = *(_BYTE *)(v721 + 520 * v719 + 338);
      }
      v730 = v723 > v724;
    }
    v731 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v720));
    a4.f32[2] = (float)v591;
    v732.i64[0] = 0x3F0000003F000000;
    v732.i64[1] = 0x3F0000003F000000;
    v733 = vmulq_n_f32(vaddq_f32(a4, v732), v731);
    v944 = v733.i32[2];
    v943 = v733.i64[0];
    sub_223FFDF1C(v12[2], &v943, v729, v730, v731);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v734 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v734;
    v13 = **v734;
    v591 = a2[2] + 3;
  }
  v735 = v6 + 1;
  v736 = v10[200];
  if ((v736 & 0x10000000) != 0)
    v737 = 0x40000000;
  else
    v737 = 0x80000000;
  if ((v736 & 0x20000000) != 0)
    v738 = v737;
  else
    v738 = v736 & 0xCFFFFFFF;
  if ((v738 & 0x40000000) == 0)
  {
    if ((v738 & 0x80000000) != 0)
    {
      LOBYTE(v747) = -1;
      v748 = 2;
    }
    else
    {
      v739 = *(_QWORD *)(v13 + 2448);
      v740 = v739 + 520 * v738;
      v741 = *(_QWORD *)(v740 + 312);
      v742 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v740 + 336))
      {
        *(_BYTE *)(v740 + 336) = 0;
        v743 = *(unsigned int *)(v740 + 4);
        if ((_DWORD)v743)
        {
          v850 = v742;
          v894 = v741;
          v938 = v591;
          v744 = 0;
          v745 = (unsigned __int8 *)(v739 + 520 * v738 + 36);
          do
          {
            v746 = *v745;
            v745 += 28;
            v744 = sub_223A4EC9C(v744, ((unint64_t)v746 << 8) | 1, 0xFFu);
            --v743;
          }
          while (v743);
          v747 = v744 >> 8;
          if (!(_BYTE)v744)
            LOBYTE(v747) = -1;
          v45 = a1;
          v591 = v938;
          v742 = v850;
          v741 = v894;
        }
        else
        {
          LOBYTE(v747) = -1;
        }
        *(_BYTE *)(v739 + 520 * v738 + 338) = v747;
      }
      else
      {
        LOBYTE(v747) = *(_BYTE *)(v739 + 520 * v738 + 338);
      }
      v748 = v741 > v742;
    }
    v749 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v735, v5));
    a4.f32[2] = (float)v591;
    v750.i64[0] = 0x3F0000003F000000;
    v750.i64[1] = 0x3F0000003F000000;
    v751 = vmulq_n_f32(vaddq_f32(a4, v750), v749);
    v944 = v751.i32[2];
    v943 = v751.i64[0];
    sub_223FFDF1C(v12[2], &v943, v747, v748, v749);
    v5 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v752 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v752;
    v13 = **v752;
    v735 = a2[1] + 1;
    v591 = a2[2] + 3;
  }
  v753 = v10[201];
  if ((v753 & 0x10000000) != 0)
    v754 = 0x40000000;
  else
    v754 = 0x80000000;
  if ((v753 & 0x20000000) != 0)
    v755 = v754;
  else
    v755 = v753 & 0xCFFFFFFF;
  if ((v755 & 0x40000000) == 0)
  {
    v756 = v5 + 1;
    if ((v755 & 0x80000000) != 0)
    {
      LOBYTE(v765) = -1;
      v766 = 2;
    }
    else
    {
      v757 = *(_QWORD *)(v13 + 2448);
      v758 = v757 + 520 * v755;
      v759 = *(_QWORD *)(v758 + 312);
      v760 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v758 + 336))
      {
        *(_BYTE *)(v758 + 336) = 0;
        v761 = *(unsigned int *)(v758 + 4);
        if ((_DWORD)v761)
        {
          v851 = v760;
          v895 = v759;
          v939 = v591;
          v762 = 0;
          v763 = (unsigned __int8 *)(v757 + 520 * v755 + 36);
          do
          {
            v764 = *v763;
            v763 += 28;
            v762 = sub_223A4EC9C(v762, ((unint64_t)v764 << 8) | 1, 0xFFu);
            --v761;
          }
          while (v761);
          v765 = v762 >> 8;
          if (!(_BYTE)v762)
            LOBYTE(v765) = -1;
          v45 = a1;
          v591 = v939;
          v760 = v851;
          v759 = v895;
        }
        else
        {
          LOBYTE(v765) = -1;
        }
        *(_BYTE *)(v757 + 520 * v755 + 338) = v765;
      }
      else
      {
        LOBYTE(v765) = *(_BYTE *)(v757 + 520 * v755 + 338);
      }
      v766 = v759 > v760;
    }
    v767 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v735, v756));
    a4.f32[2] = (float)v591;
    v768.i64[0] = 0x3F0000003F000000;
    v768.i64[1] = 0x3F0000003F000000;
    v769 = vmulq_n_f32(vaddq_f32(a4, v768), v767);
    v944 = v769.i32[2];
    v943 = v769.i64[0];
    sub_223FFDF1C(v12[2], &v943, v765, v766, v767);
    v5 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v770 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v770;
    v13 = **v770;
    v735 = a2[1] + 1;
    v591 = a2[2] + 3;
  }
  v771 = v10[202];
  if ((v771 & 0x10000000) != 0)
    v772 = 0x40000000;
  else
    v772 = 0x80000000;
  if ((v771 & 0x20000000) != 0)
    v773 = v772;
  else
    v773 = v771 & 0xCFFFFFFF;
  if ((v773 & 0x40000000) == 0)
  {
    v774 = v5 + 2;
    if ((v773 & 0x80000000) != 0)
    {
      LOBYTE(v783) = -1;
      v784 = 2;
    }
    else
    {
      v775 = *(_QWORD *)(v13 + 2448);
      v776 = v775 + 520 * v773;
      v777 = *(_QWORD *)(v776 + 312);
      v778 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v776 + 336))
      {
        *(_BYTE *)(v776 + 336) = 0;
        v779 = *(unsigned int *)(v776 + 4);
        if ((_DWORD)v779)
        {
          v852 = v778;
          v896 = v777;
          v940 = v591;
          v780 = 0;
          v781 = (unsigned __int8 *)(v775 + 520 * v773 + 36);
          do
          {
            v782 = *v781;
            v781 += 28;
            v780 = sub_223A4EC9C(v780, ((unint64_t)v782 << 8) | 1, 0xFFu);
            --v779;
          }
          while (v779);
          v783 = v780 >> 8;
          if (!(_BYTE)v780)
            LOBYTE(v783) = -1;
          v45 = a1;
          v591 = v940;
          v778 = v852;
          v777 = v896;
        }
        else
        {
          LOBYTE(v783) = -1;
        }
        *(_BYTE *)(v775 + 520 * v773 + 338) = v783;
      }
      else
      {
        LOBYTE(v783) = *(_BYTE *)(v775 + 520 * v773 + 338);
      }
      v784 = v777 > v778;
    }
    v785 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v735, v774));
    a4.f32[2] = (float)v591;
    v786.i64[0] = 0x3F0000003F000000;
    v786.i64[1] = 0x3F0000003F000000;
    v787 = vmulq_n_f32(vaddq_f32(a4, v786), v785);
    v944 = v787.i32[2];
    v943 = v787.i64[0];
    sub_223FFDF1C(v12[2], &v943, v783, v784, v785);
    v5 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v788 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v788;
    v13 = **v788;
    v735 = a2[1] + 1;
    v591 = a2[2] + 3;
  }
  v789 = v10[203];
  if ((v789 & 0x10000000) != 0)
    v790 = 0x40000000;
  else
    v790 = 0x80000000;
  if ((v789 & 0x20000000) != 0)
    v791 = v790;
  else
    v791 = v789 & 0xCFFFFFFF;
  if ((v791 & 0x40000000) == 0)
  {
    v792 = v5 + 3;
    if ((v791 & 0x80000000) != 0)
    {
      LOBYTE(v801) = -1;
      v802 = 2;
    }
    else
    {
      v793 = *(_QWORD *)(v13 + 2448);
      v794 = v793 + 520 * v791;
      v795 = *(_QWORD *)(v794 + 312);
      v796 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v794 + 336))
      {
        *(_BYTE *)(v794 + 336) = 0;
        v797 = *(unsigned int *)(v794 + 4);
        if ((_DWORD)v797)
        {
          v853 = v796;
          v897 = v795;
          v941 = v591;
          v798 = 0;
          v799 = (unsigned __int8 *)(v793 + 520 * v791 + 36);
          do
          {
            v800 = *v799;
            v799 += 28;
            v798 = sub_223A4EC9C(v798, ((unint64_t)v800 << 8) | 1, 0xFFu);
            --v797;
          }
          while (v797);
          v801 = v798 >> 8;
          if (!(_BYTE)v798)
            LOBYTE(v801) = -1;
          v45 = a1;
          v591 = v941;
          v796 = v853;
          v795 = v897;
        }
        else
        {
          LOBYTE(v801) = -1;
        }
        *(_BYTE *)(v793 + 520 * v791 + 338) = v801;
      }
      else
      {
        LOBYTE(v801) = *(_BYTE *)(v793 + 520 * v791 + 338);
      }
      v802 = v795 > v796;
    }
    v803 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v735, v792));
    a4.f32[2] = (float)v591;
    v804.i64[0] = 0x3F0000003F000000;
    v804.i64[1] = 0x3F0000003F000000;
    v805 = vmulq_n_f32(vaddq_f32(a4, v804), v803);
    v944 = v805.i32[2];
    v943 = v805.i64[0];
    sub_223FFDF1C(v12[2], &v943, v801, v802, v803);
  }
  sub_223D6C278(v45, a2, a3, a4);
}

void sub_223D6C278(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t **v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  float v45;
  float32x4_t v46;
  float32x4_t v47;
  uint64_t **v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t **v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  float v81;
  float32x4_t v82;
  float32x4_t v83;
  uint64_t **v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unint64_t v97;
  int v98;
  float v99;
  float32x4_t v100;
  float32x4_t v101;
  uint64_t **v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned __int8 *v113;
  unsigned int v114;
  unint64_t v115;
  int v116;
  float v117;
  float32x4_t v118;
  float32x4_t v119;
  uint64_t **v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unsigned __int8 *v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  float v135;
  float32x4_t v136;
  float32x4_t v137;
  uint64_t **v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unsigned __int8 *v149;
  unsigned int v150;
  unint64_t v151;
  int v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  uint64_t **v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unsigned __int8 *v167;
  unsigned int v168;
  unint64_t v169;
  int v170;
  float v171;
  float32x4_t v172;
  float32x4_t v173;
  uint64_t **v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unsigned __int8 *v185;
  unsigned int v186;
  unint64_t v187;
  int v188;
  float v189;
  float32x4_t v190;
  float32x4_t v191;
  uint64_t **v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unsigned __int8 *v203;
  unsigned int v204;
  unint64_t v205;
  int v206;
  float v207;
  float32x4_t v208;
  float32x4_t v209;
  uint64_t **v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unsigned __int8 *v221;
  unsigned int v222;
  unint64_t v223;
  int v224;
  float v225;
  float32x4_t v226;
  float32x4_t v227;
  uint64_t **v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unsigned __int8 *v239;
  unsigned int v240;
  unint64_t v241;
  int v242;
  float v243;
  float32x4_t v244;
  float32x4_t v245;
  uint64_t **v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unsigned __int8 *v257;
  unsigned int v258;
  unint64_t v259;
  int v260;
  float v261;
  float32x4_t v262;
  float32x4_t v263;
  uint64_t **v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unsigned __int8 *v275;
  unsigned int v276;
  unint64_t v277;
  int v278;
  float v279;
  float32x4_t v280;
  float32x4_t v281;
  uint64_t **v282;
  int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unsigned __int8 *v293;
  unsigned int v294;
  unint64_t v295;
  int v296;
  float v297;
  float32x4_t v298;
  float32x4_t v299;
  uint64_t **v300;
  int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unsigned __int8 *v311;
  unsigned int v312;
  unint64_t v313;
  int v314;
  float v315;
  float32x4_t v316;
  float32x4_t v317;
  uint64_t **v318;
  int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unsigned __int8 *v329;
  unsigned int v330;
  unint64_t v331;
  int v332;
  float v333;
  float32x4_t v334;
  float32x4_t v335;
  uint64_t **v336;
  int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unsigned __int8 *v347;
  unsigned int v348;
  unint64_t v349;
  int v350;
  float v351;
  float32x4_t v352;
  float32x4_t v353;
  uint64_t **v354;
  int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unsigned __int8 *v365;
  unsigned int v366;
  unint64_t v367;
  int v368;
  float v369;
  float32x4_t v370;
  float32x4_t v371;
  uint64_t **v372;
  unsigned int v373;
  int v374;
  unsigned int v375;
  unsigned int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unsigned __int8 *v383;
  unsigned int v384;
  unint64_t v385;
  int v386;
  float v387;
  float32x4_t v388;
  float32x4_t v389;
  uint64_t **v390;
  int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unsigned __int8 *v401;
  unsigned int v402;
  unint64_t v403;
  int v404;
  float v405;
  float32x4_t v406;
  float32x4_t v407;
  uint64_t **v408;
  int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unsigned __int8 *v419;
  unsigned int v420;
  unint64_t v421;
  int v422;
  float v423;
  float32x4_t v424;
  float32x4_t v425;
  uint64_t **v426;
  int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  unsigned __int8 *v437;
  unsigned int v438;
  unint64_t v439;
  int v440;
  float v441;
  float32x4_t v442;
  float32x4_t v443;
  uint64_t **v444;
  int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unsigned __int8 *v455;
  unsigned int v456;
  unint64_t v457;
  int v458;
  float v459;
  float32x4_t v460;
  float32x4_t v461;
  uint64_t **v462;
  int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unsigned __int8 *v473;
  unsigned int v474;
  unint64_t v475;
  int v476;
  float v477;
  float32x4_t v478;
  float32x4_t v479;
  uint64_t **v480;
  int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unsigned __int8 *v491;
  unsigned int v492;
  unint64_t v493;
  int v494;
  float v495;
  float32x4_t v496;
  float32x4_t v497;
  uint64_t **v498;
  int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unsigned __int8 *v509;
  unsigned int v510;
  unint64_t v511;
  int v512;
  float v513;
  float32x4_t v514;
  float32x4_t v515;
  uint64_t **v516;
  unsigned int v517;
  int v518;
  unsigned int v519;
  unsigned int v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unsigned __int8 *v527;
  unsigned int v528;
  unint64_t v529;
  int v530;
  float v531;
  float32x4_t v532;
  float32x4_t v533;
  uint64_t **v534;
  int v535;
  unsigned int v536;
  unsigned int v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  unsigned __int8 *v545;
  unsigned int v546;
  unint64_t v547;
  int v548;
  float v549;
  float32x4_t v550;
  float32x4_t v551;
  uint64_t **v552;
  int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  unsigned __int8 *v563;
  unsigned int v564;
  unint64_t v565;
  int v566;
  float v567;
  float32x4_t v568;
  float32x4_t v569;
  uint64_t **v570;
  int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unsigned __int8 *v581;
  unsigned int v582;
  unint64_t v583;
  int v584;
  float v585;
  float32x4_t v586;
  float32x4_t v587;
  uint64_t **v588;
  int v589;
  unsigned int v590;
  unsigned int v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  unsigned __int8 *v599;
  unsigned int v600;
  unint64_t v601;
  int v602;
  float v603;
  float32x4_t v604;
  float32x4_t v605;
  uint64_t **v606;
  int v607;
  unsigned int v608;
  unsigned int v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  unsigned __int8 *v617;
  unsigned int v618;
  unint64_t v619;
  int v620;
  float v621;
  float32x4_t v622;
  float32x4_t v623;
  uint64_t **v624;
  int v625;
  unsigned int v626;
  unsigned int v627;
  unsigned int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  unsigned __int8 *v635;
  unsigned int v636;
  unint64_t v637;
  int v638;
  float v639;
  float32x4_t v640;
  float32x4_t v641;
  uint64_t **v642;
  int v643;
  unsigned int v644;
  unsigned int v645;
  unsigned int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unsigned __int8 *v653;
  unsigned int v654;
  unint64_t v655;
  int v656;
  float v657;
  float32x4_t v658;
  float32x4_t v659;
  uint64_t **v660;
  int v661;
  int v662;
  unsigned int v663;
  unsigned int v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unsigned __int8 *v671;
  unsigned int v672;
  unint64_t v673;
  int v674;
  float v675;
  float32x4_t v676;
  float32x4_t v677;
  uint64_t **v678;
  int v679;
  unsigned int v680;
  unsigned int v681;
  unsigned int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t v688;
  unsigned __int8 *v689;
  unsigned int v690;
  unint64_t v691;
  int v692;
  float v693;
  float32x4_t v694;
  float32x4_t v695;
  uint64_t **v696;
  int v697;
  unsigned int v698;
  unsigned int v699;
  unsigned int v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  unsigned __int8 *v707;
  unsigned int v708;
  unint64_t v709;
  int v710;
  float v711;
  float32x4_t v712;
  float32x4_t v713;
  uint64_t **v714;
  int v715;
  unsigned int v716;
  unsigned int v717;
  unsigned int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  unsigned __int8 *v725;
  unsigned int v726;
  unint64_t v727;
  int v728;
  float v729;
  float32x4_t v730;
  float32x4_t v731;
  uint64_t **v732;
  int v733;
  unsigned int v734;
  unsigned int v735;
  unsigned int v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  unsigned __int8 *v743;
  unsigned int v744;
  unint64_t v745;
  int v746;
  float v747;
  float32x4_t v748;
  float32x4_t v749;
  uint64_t **v750;
  int v751;
  unsigned int v752;
  unsigned int v753;
  unsigned int v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unint64_t v760;
  unsigned __int8 *v761;
  unsigned int v762;
  unint64_t v763;
  int v764;
  float v765;
  float32x4_t v766;
  float32x4_t v767;
  uint64_t **v768;
  int v769;
  unsigned int v770;
  unsigned int v771;
  unsigned int v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  unsigned __int8 *v779;
  unsigned int v780;
  unint64_t v781;
  int v782;
  float v783;
  float32x4_t v784;
  float32x4_t v785;
  uint64_t **v786;
  int v787;
  unsigned int v788;
  unsigned int v789;
  unsigned int v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  unsigned __int8 *v797;
  unsigned int v798;
  unint64_t v799;
  int v800;
  float v801;
  float32x4_t v802;
  float32x4_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  int v888;
  int v889;
  int v890;
  int v891;
  int v892;
  int v893;
  int v894;
  int v895;
  int v897;
  int v898;
  int v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  int v938;
  int v939;
  int v940;
  uint64_t v941;
  __int32 v942;

  v5 = a1;
  v7 = *a2;
  v6 = a2[1];
  v8 = v6 + 1;
  v9 = a2[2] + 3;
  v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v11 = v10[204];
  v12 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v13 = *v12;
  if ((v11 & 0x10000000) != 0)
    v14 = 0x40000000;
  else
    v14 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v15 = v14;
  else
    v15 = v11 & 0xCFFFFFFF;
  if ((v15 & 0x40000000) == 0)
  {
    v16 = v7 + 4;
    if ((v15 & 0x80000000) != 0)
    {
      LOBYTE(v25) = -1;
      v26 = 2;
    }
    else
    {
      v17 = *(_QWORD *)(v13 + 2448);
      v18 = v17 + 520 * v15;
      v19 = *(_QWORD *)(v18 + 312);
      v20 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v18 + 336))
      {
        *(_BYTE *)(v18 + 336) = 0;
        v21 = *(unsigned int *)(v18 + 4);
        if ((_DWORD)v21)
        {
          v808 = v20;
          v852 = v19;
          v897 = v9;
          v22 = 0;
          v23 = (unsigned __int8 *)(v17 + 520 * v15 + 36);
          do
          {
            v24 = *v23;
            v23 += 28;
            v22 = sub_223A4EC9C(v22, ((unint64_t)v24 << 8) | 1, 0xFFu);
            --v21;
          }
          while (v21);
          v25 = v22 >> 8;
          if (!(_BYTE)v22)
            LOBYTE(v25) = -1;
          v9 = v897;
          v20 = v808;
          v19 = v852;
        }
        else
        {
          LOBYTE(v25) = -1;
        }
        *(_BYTE *)(v17 + 520 * v15 + 338) = v25;
        v5 = a1;
      }
      else
      {
        LOBYTE(v25) = *(_BYTE *)(v17 + 520 * v15 + 338);
      }
      v26 = v19 > v20;
    }
    a4.f32[0] = (float)v16;
    a4.f32[1] = (float)v8;
    v27 = *(float *)(v13 + 144);
    a4.f32[2] = (float)v9;
    v28.i64[0] = 0x3F0000003F000000;
    v28.i64[1] = 0x3F0000003F000000;
    v29 = vmulq_n_f32(vaddq_f32(a4, v28), v27);
    v942 = v29.i32[2];
    v941 = v29.i64[0];
    sub_223FFDF1C(v12[2], &v941, v25, v26, v27);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v30 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v30;
    v13 = **v30;
    v8 = v6 + 1;
    v9 = a2[2] + 3;
  }
  v31 = v10[205];
  if ((v31 & 0x10000000) != 0)
    v32 = 0x40000000;
  else
    v32 = 0x80000000;
  if ((v31 & 0x20000000) != 0)
    v33 = v32;
  else
    v33 = v31 & 0xCFFFFFFF;
  if ((v33 & 0x40000000) == 0)
  {
    v34 = v7 + 5;
    if ((v33 & 0x80000000) != 0)
    {
      LOBYTE(v43) = -1;
      v44 = 2;
    }
    else
    {
      v35 = *(_QWORD *)(v13 + 2448);
      v36 = v35 + 520 * v33;
      v37 = *(_QWORD *)(v36 + 312);
      v38 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v36 + 336))
      {
        *(_BYTE *)(v36 + 336) = 0;
        v39 = *(unsigned int *)(v36 + 4);
        if ((_DWORD)v39)
        {
          v809 = v38;
          v853 = v37;
          v898 = v9;
          v40 = 0;
          v41 = (unsigned __int8 *)(v35 + 520 * v33 + 36);
          do
          {
            v42 = *v41;
            v41 += 28;
            v40 = sub_223A4EC9C(v40, ((unint64_t)v42 << 8) | 1, 0xFFu);
            --v39;
          }
          while (v39);
          v43 = v40 >> 8;
          if (!(_BYTE)v40)
            LOBYTE(v43) = -1;
          v9 = v898;
          v38 = v809;
          v37 = v853;
        }
        else
        {
          LOBYTE(v43) = -1;
        }
        *(_BYTE *)(v35 + 520 * v33 + 338) = v43;
        v5 = a1;
      }
      else
      {
        LOBYTE(v43) = *(_BYTE *)(v35 + 520 * v33 + 338);
      }
      v44 = v37 > v38;
    }
    v45 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v34));
    a4.f32[2] = (float)v9;
    v46.i64[0] = 0x3F0000003F000000;
    v46.i64[1] = 0x3F0000003F000000;
    v47 = vmulq_n_f32(vaddq_f32(a4, v46), v45);
    v942 = v47.i32[2];
    v941 = v47.i64[0];
    sub_223FFDF1C(v12[2], &v941, v43, v44, v45);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v48 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v48;
    v13 = **v48;
    v8 = v6 + 1;
    v9 = a2[2] + 3;
  }
  v49 = v10[206];
  if ((v49 & 0x10000000) != 0)
    v50 = 0x40000000;
  else
    v50 = 0x80000000;
  if ((v49 & 0x20000000) != 0)
    v51 = v50;
  else
    v51 = v49 & 0xCFFFFFFF;
  if ((v51 & 0x40000000) == 0)
  {
    v52 = v7 + 6;
    if ((v51 & 0x80000000) != 0)
    {
      LOBYTE(v61) = -1;
      v62 = 2;
    }
    else
    {
      v53 = *(_QWORD *)(v13 + 2448);
      v54 = v53 + 520 * v51;
      v55 = *(_QWORD *)(v54 + 312);
      v56 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v54 + 336))
      {
        *(_BYTE *)(v54 + 336) = 0;
        v57 = *(unsigned int *)(v54 + 4);
        if ((_DWORD)v57)
        {
          v810 = v56;
          v854 = v55;
          v899 = v9;
          v58 = 0;
          v59 = (unsigned __int8 *)(v53 + 520 * v51 + 36);
          do
          {
            v60 = *v59;
            v59 += 28;
            v58 = sub_223A4EC9C(v58, ((unint64_t)v60 << 8) | 1, 0xFFu);
            --v57;
          }
          while (v57);
          v61 = v58 >> 8;
          if (!(_BYTE)v58)
            LOBYTE(v61) = -1;
          v9 = v899;
          v56 = v810;
          v55 = v854;
        }
        else
        {
          LOBYTE(v61) = -1;
        }
        *(_BYTE *)(v53 + 520 * v51 + 338) = v61;
        v5 = a1;
      }
      else
      {
        LOBYTE(v61) = *(_BYTE *)(v53 + 520 * v51 + 338);
      }
      v62 = v55 > v56;
    }
    v63 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v52));
    a4.f32[2] = (float)v9;
    v64.i64[0] = 0x3F0000003F000000;
    v64.i64[1] = 0x3F0000003F000000;
    v65 = vmulq_n_f32(vaddq_f32(a4, v64), v63);
    v942 = v65.i32[2];
    v941 = v65.i64[0];
    sub_223FFDF1C(v12[2], &v941, v61, v62, v63);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v66 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v66;
    v13 = **v66;
    v8 = v6 + 1;
    v9 = a2[2] + 3;
  }
  v67 = v10[207];
  if ((v67 & 0x10000000) != 0)
    v68 = 0x40000000;
  else
    v68 = 0x80000000;
  if ((v67 & 0x20000000) != 0)
    v69 = v68;
  else
    v69 = v67 & 0xCFFFFFFF;
  if ((v69 & 0x40000000) == 0)
  {
    v70 = v7 + 7;
    if ((v69 & 0x80000000) != 0)
    {
      LOBYTE(v79) = -1;
      v80 = 2;
    }
    else
    {
      v71 = *(_QWORD *)(v13 + 2448);
      v72 = v71 + 520 * v69;
      v73 = *(_QWORD *)(v72 + 312);
      v74 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v72 + 336))
      {
        *(_BYTE *)(v72 + 336) = 0;
        v75 = *(unsigned int *)(v72 + 4);
        if ((_DWORD)v75)
        {
          v811 = v74;
          v855 = v73;
          v900 = v9;
          v76 = 0;
          v77 = (unsigned __int8 *)(v71 + 520 * v69 + 36);
          do
          {
            v78 = *v77;
            v77 += 28;
            v76 = sub_223A4EC9C(v76, ((unint64_t)v78 << 8) | 1, 0xFFu);
            --v75;
          }
          while (v75);
          v79 = v76 >> 8;
          if (!(_BYTE)v76)
            LOBYTE(v79) = -1;
          v9 = v900;
          v74 = v811;
          v73 = v855;
        }
        else
        {
          LOBYTE(v79) = -1;
        }
        *(_BYTE *)(v71 + 520 * v69 + 338) = v79;
        v5 = a1;
      }
      else
      {
        LOBYTE(v79) = *(_BYTE *)(v71 + 520 * v69 + 338);
      }
      v80 = v73 > v74;
    }
    v81 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v70));
    a4.f32[2] = (float)v9;
    v82.i64[0] = 0x3F0000003F000000;
    v82.i64[1] = 0x3F0000003F000000;
    v83 = vmulq_n_f32(vaddq_f32(a4, v82), v81);
    v942 = v83.i32[2];
    v941 = v83.i64[0];
    sub_223FFDF1C(v12[2], &v941, v79, v80, v81);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v84 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v84;
    v13 = **v84;
    v9 = a2[2] + 3;
  }
  v85 = v6 + 2;
  v86 = v10[208];
  if ((v86 & 0x10000000) != 0)
    v87 = 0x40000000;
  else
    v87 = 0x80000000;
  if ((v86 & 0x20000000) != 0)
    v88 = v87;
  else
    v88 = v86 & 0xCFFFFFFF;
  if ((v88 & 0x40000000) == 0)
  {
    if ((v88 & 0x80000000) != 0)
    {
      LOBYTE(v97) = -1;
      v98 = 2;
    }
    else
    {
      v89 = *(_QWORD *)(v13 + 2448);
      v90 = v89 + 520 * v88;
      v91 = *(_QWORD *)(v90 + 312);
      v92 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v90 + 336))
      {
        *(_BYTE *)(v90 + 336) = 0;
        v93 = *(unsigned int *)(v90 + 4);
        if ((_DWORD)v93)
        {
          v812 = v92;
          v856 = v91;
          v901 = v9;
          v94 = 0;
          v95 = (unsigned __int8 *)(v89 + 520 * v88 + 36);
          do
          {
            v96 = *v95;
            v95 += 28;
            v94 = sub_223A4EC9C(v94, ((unint64_t)v96 << 8) | 1, 0xFFu);
            --v93;
          }
          while (v93);
          v97 = v94 >> 8;
          if (!(_BYTE)v94)
            LOBYTE(v97) = -1;
          v9 = v901;
          v92 = v812;
          v91 = v856;
        }
        else
        {
          LOBYTE(v97) = -1;
        }
        *(_BYTE *)(v89 + 520 * v88 + 338) = v97;
        v5 = a1;
      }
      else
      {
        LOBYTE(v97) = *(_BYTE *)(v89 + 520 * v88 + 338);
      }
      v98 = v91 > v92;
    }
    v99 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v7));
    a4.f32[2] = (float)v9;
    v100.i64[0] = 0x3F0000003F000000;
    v100.i64[1] = 0x3F0000003F000000;
    v101 = vmulq_n_f32(vaddq_f32(a4, v100), v99);
    v942 = v101.i32[2];
    v941 = v101.i64[0];
    sub_223FFDF1C(v12[2], &v941, v97, v98, v99);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v102 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v102;
    v13 = **v102;
    v85 = v6 + 2;
    v9 = a2[2] + 3;
  }
  v103 = v10[209];
  if ((v103 & 0x10000000) != 0)
    v104 = 0x40000000;
  else
    v104 = 0x80000000;
  if ((v103 & 0x20000000) != 0)
    v105 = v104;
  else
    v105 = v103 & 0xCFFFFFFF;
  if ((v105 & 0x40000000) == 0)
  {
    v106 = v7 + 1;
    if ((v105 & 0x80000000) != 0)
    {
      LOBYTE(v115) = -1;
      v116 = 2;
    }
    else
    {
      v107 = *(_QWORD *)(v13 + 2448);
      v108 = v107 + 520 * v105;
      v109 = *(_QWORD *)(v108 + 312);
      v110 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v108 + 336))
      {
        *(_BYTE *)(v108 + 336) = 0;
        v111 = *(unsigned int *)(v108 + 4);
        if ((_DWORD)v111)
        {
          v813 = v110;
          v857 = v109;
          v902 = v9;
          v112 = 0;
          v113 = (unsigned __int8 *)(v107 + 520 * v105 + 36);
          do
          {
            v114 = *v113;
            v113 += 28;
            v112 = sub_223A4EC9C(v112, ((unint64_t)v114 << 8) | 1, 0xFFu);
            --v111;
          }
          while (v111);
          v115 = v112 >> 8;
          if (!(_BYTE)v112)
            LOBYTE(v115) = -1;
          v9 = v902;
          v110 = v813;
          v109 = v857;
        }
        else
        {
          LOBYTE(v115) = -1;
        }
        *(_BYTE *)(v107 + 520 * v105 + 338) = v115;
        v5 = a1;
      }
      else
      {
        LOBYTE(v115) = *(_BYTE *)(v107 + 520 * v105 + 338);
      }
      v116 = v109 > v110;
    }
    v117 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v106));
    a4.f32[2] = (float)v9;
    v118.i64[0] = 0x3F0000003F000000;
    v118.i64[1] = 0x3F0000003F000000;
    v119 = vmulq_n_f32(vaddq_f32(a4, v118), v117);
    v942 = v119.i32[2];
    v941 = v119.i64[0];
    sub_223FFDF1C(v12[2], &v941, v115, v116, v117);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v120 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v120;
    v13 = **v120;
    v85 = v6 + 2;
    v9 = a2[2] + 3;
  }
  v121 = v10[210];
  if ((v121 & 0x10000000) != 0)
    v122 = 0x40000000;
  else
    v122 = 0x80000000;
  if ((v121 & 0x20000000) != 0)
    v123 = v122;
  else
    v123 = v121 & 0xCFFFFFFF;
  if ((v123 & 0x40000000) == 0)
  {
    v124 = v7 + 2;
    if ((v123 & 0x80000000) != 0)
    {
      LOBYTE(v133) = -1;
      v134 = 2;
    }
    else
    {
      v125 = *(_QWORD *)(v13 + 2448);
      v126 = v125 + 520 * v123;
      v127 = *(_QWORD *)(v126 + 312);
      v128 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v126 + 336))
      {
        *(_BYTE *)(v126 + 336) = 0;
        v129 = *(unsigned int *)(v126 + 4);
        if ((_DWORD)v129)
        {
          v814 = v128;
          v858 = v127;
          v903 = v9;
          v130 = 0;
          v131 = (unsigned __int8 *)(v125 + 520 * v123 + 36);
          do
          {
            v132 = *v131;
            v131 += 28;
            v130 = sub_223A4EC9C(v130, ((unint64_t)v132 << 8) | 1, 0xFFu);
            --v129;
          }
          while (v129);
          v133 = v130 >> 8;
          if (!(_BYTE)v130)
            LOBYTE(v133) = -1;
          v9 = v903;
          v128 = v814;
          v127 = v858;
        }
        else
        {
          LOBYTE(v133) = -1;
        }
        *(_BYTE *)(v125 + 520 * v123 + 338) = v133;
        v5 = a1;
      }
      else
      {
        LOBYTE(v133) = *(_BYTE *)(v125 + 520 * v123 + 338);
      }
      v134 = v127 > v128;
    }
    v135 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v124));
    a4.f32[2] = (float)v9;
    v136.i64[0] = 0x3F0000003F000000;
    v136.i64[1] = 0x3F0000003F000000;
    v137 = vmulq_n_f32(vaddq_f32(a4, v136), v135);
    v942 = v137.i32[2];
    v941 = v137.i64[0];
    sub_223FFDF1C(v12[2], &v941, v133, v134, v135);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v138 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v138;
    v13 = **v138;
    v85 = v6 + 2;
    v9 = a2[2] + 3;
  }
  v139 = v10[211];
  if ((v139 & 0x10000000) != 0)
    v140 = 0x40000000;
  else
    v140 = 0x80000000;
  if ((v139 & 0x20000000) != 0)
    v141 = v140;
  else
    v141 = v139 & 0xCFFFFFFF;
  if ((v141 & 0x40000000) == 0)
  {
    v142 = v7 + 3;
    if ((v141 & 0x80000000) != 0)
    {
      LOBYTE(v151) = -1;
      v152 = 2;
    }
    else
    {
      v143 = *(_QWORD *)(v13 + 2448);
      v144 = v143 + 520 * v141;
      v145 = *(_QWORD *)(v144 + 312);
      v146 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v144 + 336))
      {
        *(_BYTE *)(v144 + 336) = 0;
        v147 = *(unsigned int *)(v144 + 4);
        if ((_DWORD)v147)
        {
          v815 = v146;
          v859 = v145;
          v904 = v9;
          v148 = 0;
          v149 = (unsigned __int8 *)(v143 + 520 * v141 + 36);
          do
          {
            v150 = *v149;
            v149 += 28;
            v148 = sub_223A4EC9C(v148, ((unint64_t)v150 << 8) | 1, 0xFFu);
            --v147;
          }
          while (v147);
          v151 = v148 >> 8;
          if (!(_BYTE)v148)
            LOBYTE(v151) = -1;
          v9 = v904;
          v146 = v815;
          v145 = v859;
        }
        else
        {
          LOBYTE(v151) = -1;
        }
        *(_BYTE *)(v143 + 520 * v141 + 338) = v151;
        v5 = a1;
      }
      else
      {
        LOBYTE(v151) = *(_BYTE *)(v143 + 520 * v141 + 338);
      }
      v152 = v145 > v146;
    }
    v153 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v142));
    a4.f32[2] = (float)v9;
    v154.i64[0] = 0x3F0000003F000000;
    v154.i64[1] = 0x3F0000003F000000;
    v155 = vmulq_n_f32(vaddq_f32(a4, v154), v153);
    v942 = v155.i32[2];
    v941 = v155.i64[0];
    sub_223FFDF1C(v12[2], &v941, v151, v152, v153);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v156 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v156;
    v13 = **v156;
    v85 = v6 + 2;
    v9 = a2[2] + 3;
  }
  v157 = v10[212];
  if ((v157 & 0x10000000) != 0)
    v158 = 0x40000000;
  else
    v158 = 0x80000000;
  if ((v157 & 0x20000000) != 0)
    v159 = v158;
  else
    v159 = v157 & 0xCFFFFFFF;
  if ((v159 & 0x40000000) == 0)
  {
    v160 = v7 + 4;
    if ((v159 & 0x80000000) != 0)
    {
      LOBYTE(v169) = -1;
      v170 = 2;
    }
    else
    {
      v161 = *(_QWORD *)(v13 + 2448);
      v162 = v161 + 520 * v159;
      v163 = *(_QWORD *)(v162 + 312);
      v164 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v162 + 336))
      {
        *(_BYTE *)(v162 + 336) = 0;
        v165 = *(unsigned int *)(v162 + 4);
        if ((_DWORD)v165)
        {
          v816 = v164;
          v860 = v163;
          v905 = v9;
          v166 = 0;
          v167 = (unsigned __int8 *)(v161 + 520 * v159 + 36);
          do
          {
            v168 = *v167;
            v167 += 28;
            v166 = sub_223A4EC9C(v166, ((unint64_t)v168 << 8) | 1, 0xFFu);
            --v165;
          }
          while (v165);
          v169 = v166 >> 8;
          if (!(_BYTE)v166)
            LOBYTE(v169) = -1;
          v9 = v905;
          v164 = v816;
          v163 = v860;
        }
        else
        {
          LOBYTE(v169) = -1;
        }
        *(_BYTE *)(v161 + 520 * v159 + 338) = v169;
        v5 = a1;
      }
      else
      {
        LOBYTE(v169) = *(_BYTE *)(v161 + 520 * v159 + 338);
      }
      v170 = v163 > v164;
    }
    v171 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v160));
    a4.f32[2] = (float)v9;
    v172.i64[0] = 0x3F0000003F000000;
    v172.i64[1] = 0x3F0000003F000000;
    v173 = vmulq_n_f32(vaddq_f32(a4, v172), v171);
    v942 = v173.i32[2];
    v941 = v173.i64[0];
    sub_223FFDF1C(v12[2], &v941, v169, v170, v171);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v174 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v174;
    v13 = **v174;
    v85 = v6 + 2;
    v9 = a2[2] + 3;
  }
  v175 = v10[213];
  if ((v175 & 0x10000000) != 0)
    v176 = 0x40000000;
  else
    v176 = 0x80000000;
  if ((v175 & 0x20000000) != 0)
    v177 = v176;
  else
    v177 = v175 & 0xCFFFFFFF;
  if ((v177 & 0x40000000) == 0)
  {
    v178 = v7 + 5;
    if ((v177 & 0x80000000) != 0)
    {
      LOBYTE(v187) = -1;
      v188 = 2;
    }
    else
    {
      v179 = *(_QWORD *)(v13 + 2448);
      v180 = v179 + 520 * v177;
      v181 = *(_QWORD *)(v180 + 312);
      v182 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v180 + 336))
      {
        *(_BYTE *)(v180 + 336) = 0;
        v183 = *(unsigned int *)(v180 + 4);
        if ((_DWORD)v183)
        {
          v817 = v182;
          v861 = v181;
          v906 = v9;
          v184 = 0;
          v185 = (unsigned __int8 *)(v179 + 520 * v177 + 36);
          do
          {
            v186 = *v185;
            v185 += 28;
            v184 = sub_223A4EC9C(v184, ((unint64_t)v186 << 8) | 1, 0xFFu);
            --v183;
          }
          while (v183);
          v187 = v184 >> 8;
          if (!(_BYTE)v184)
            LOBYTE(v187) = -1;
          v9 = v906;
          v182 = v817;
          v181 = v861;
        }
        else
        {
          LOBYTE(v187) = -1;
        }
        *(_BYTE *)(v179 + 520 * v177 + 338) = v187;
        v5 = a1;
      }
      else
      {
        LOBYTE(v187) = *(_BYTE *)(v179 + 520 * v177 + 338);
      }
      v188 = v181 > v182;
    }
    v189 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v178));
    a4.f32[2] = (float)v9;
    v190.i64[0] = 0x3F0000003F000000;
    v190.i64[1] = 0x3F0000003F000000;
    v191 = vmulq_n_f32(vaddq_f32(a4, v190), v189);
    v942 = v191.i32[2];
    v941 = v191.i64[0];
    sub_223FFDF1C(v12[2], &v941, v187, v188, v189);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v192 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v192;
    v13 = **v192;
    v85 = v6 + 2;
    v9 = a2[2] + 3;
  }
  v193 = v10[214];
  if ((v193 & 0x10000000) != 0)
    v194 = 0x40000000;
  else
    v194 = 0x80000000;
  if ((v193 & 0x20000000) != 0)
    v195 = v194;
  else
    v195 = v193 & 0xCFFFFFFF;
  if ((v195 & 0x40000000) == 0)
  {
    v196 = v7 + 6;
    if ((v195 & 0x80000000) != 0)
    {
      LOBYTE(v205) = -1;
      v206 = 2;
    }
    else
    {
      v197 = *(_QWORD *)(v13 + 2448);
      v198 = v197 + 520 * v195;
      v199 = *(_QWORD *)(v198 + 312);
      v200 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v198 + 336))
      {
        *(_BYTE *)(v198 + 336) = 0;
        v201 = *(unsigned int *)(v198 + 4);
        if ((_DWORD)v201)
        {
          v818 = v200;
          v862 = v199;
          v907 = v9;
          v202 = 0;
          v203 = (unsigned __int8 *)(v197 + 520 * v195 + 36);
          do
          {
            v204 = *v203;
            v203 += 28;
            v202 = sub_223A4EC9C(v202, ((unint64_t)v204 << 8) | 1, 0xFFu);
            --v201;
          }
          while (v201);
          v205 = v202 >> 8;
          if (!(_BYTE)v202)
            LOBYTE(v205) = -1;
          v9 = v907;
          v200 = v818;
          v199 = v862;
        }
        else
        {
          LOBYTE(v205) = -1;
        }
        *(_BYTE *)(v197 + 520 * v195 + 338) = v205;
        v5 = a1;
      }
      else
      {
        LOBYTE(v205) = *(_BYTE *)(v197 + 520 * v195 + 338);
      }
      v206 = v199 > v200;
    }
    v207 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v196));
    a4.f32[2] = (float)v9;
    v208.i64[0] = 0x3F0000003F000000;
    v208.i64[1] = 0x3F0000003F000000;
    v209 = vmulq_n_f32(vaddq_f32(a4, v208), v207);
    v942 = v209.i32[2];
    v941 = v209.i64[0];
    sub_223FFDF1C(v12[2], &v941, v205, v206, v207);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v210 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v210;
    v13 = **v210;
    v85 = v6 + 2;
    v9 = a2[2] + 3;
  }
  v211 = v10[215];
  if ((v211 & 0x10000000) != 0)
    v212 = 0x40000000;
  else
    v212 = 0x80000000;
  if ((v211 & 0x20000000) != 0)
    v213 = v212;
  else
    v213 = v211 & 0xCFFFFFFF;
  if ((v213 & 0x40000000) == 0)
  {
    v214 = v7 + 7;
    if ((v213 & 0x80000000) != 0)
    {
      LOBYTE(v223) = -1;
      v224 = 2;
    }
    else
    {
      v215 = *(_QWORD *)(v13 + 2448);
      v216 = v215 + 520 * v213;
      v217 = *(_QWORD *)(v216 + 312);
      v218 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v216 + 336))
      {
        *(_BYTE *)(v216 + 336) = 0;
        v219 = *(unsigned int *)(v216 + 4);
        if ((_DWORD)v219)
        {
          v819 = v218;
          v863 = v217;
          v908 = v9;
          v220 = 0;
          v221 = (unsigned __int8 *)(v215 + 520 * v213 + 36);
          do
          {
            v222 = *v221;
            v221 += 28;
            v220 = sub_223A4EC9C(v220, ((unint64_t)v222 << 8) | 1, 0xFFu);
            --v219;
          }
          while (v219);
          v223 = v220 >> 8;
          if (!(_BYTE)v220)
            LOBYTE(v223) = -1;
          v9 = v908;
          v218 = v819;
          v217 = v863;
        }
        else
        {
          LOBYTE(v223) = -1;
        }
        *(_BYTE *)(v215 + 520 * v213 + 338) = v223;
        v5 = a1;
      }
      else
      {
        LOBYTE(v223) = *(_BYTE *)(v215 + 520 * v213 + 338);
      }
      v224 = v217 > v218;
    }
    v225 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v214));
    a4.f32[2] = (float)v9;
    v226.i64[0] = 0x3F0000003F000000;
    v226.i64[1] = 0x3F0000003F000000;
    v227 = vmulq_n_f32(vaddq_f32(a4, v226), v225);
    v942 = v227.i32[2];
    v941 = v227.i64[0];
    sub_223FFDF1C(v12[2], &v941, v223, v224, v225);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v228 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v228;
    v13 = **v228;
    v9 = a2[2] + 3;
  }
  v229 = v6 + 3;
  v230 = v10[216];
  if ((v230 & 0x10000000) != 0)
    v231 = 0x40000000;
  else
    v231 = 0x80000000;
  if ((v230 & 0x20000000) != 0)
    v232 = v231;
  else
    v232 = v230 & 0xCFFFFFFF;
  if ((v232 & 0x40000000) == 0)
  {
    if ((v232 & 0x80000000) != 0)
    {
      LOBYTE(v241) = -1;
      v242 = 2;
    }
    else
    {
      v233 = *(_QWORD *)(v13 + 2448);
      v234 = v233 + 520 * v232;
      v235 = *(_QWORD *)(v234 + 312);
      v236 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v234 + 336))
      {
        *(_BYTE *)(v234 + 336) = 0;
        v237 = *(unsigned int *)(v234 + 4);
        if ((_DWORD)v237)
        {
          v820 = v236;
          v864 = v235;
          v909 = v9;
          v238 = 0;
          v239 = (unsigned __int8 *)(v233 + 520 * v232 + 36);
          do
          {
            v240 = *v239;
            v239 += 28;
            v238 = sub_223A4EC9C(v238, ((unint64_t)v240 << 8) | 1, 0xFFu);
            --v237;
          }
          while (v237);
          v241 = v238 >> 8;
          if (!(_BYTE)v238)
            LOBYTE(v241) = -1;
          v9 = v909;
          v236 = v820;
          v235 = v864;
        }
        else
        {
          LOBYTE(v241) = -1;
        }
        *(_BYTE *)(v233 + 520 * v232 + 338) = v241;
        v5 = a1;
      }
      else
      {
        LOBYTE(v241) = *(_BYTE *)(v233 + 520 * v232 + 338);
      }
      v242 = v235 > v236;
    }
    v243 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v7));
    a4.f32[2] = (float)v9;
    v244.i64[0] = 0x3F0000003F000000;
    v244.i64[1] = 0x3F0000003F000000;
    v245 = vmulq_n_f32(vaddq_f32(a4, v244), v243);
    v942 = v245.i32[2];
    v941 = v245.i64[0];
    sub_223FFDF1C(v12[2], &v941, v241, v242, v243);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v246 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v246;
    v13 = **v246;
    v229 = v6 + 3;
    v9 = a2[2] + 3;
  }
  v247 = v10[217];
  if ((v247 & 0x10000000) != 0)
    v248 = 0x40000000;
  else
    v248 = 0x80000000;
  if ((v247 & 0x20000000) != 0)
    v249 = v248;
  else
    v249 = v247 & 0xCFFFFFFF;
  if ((v249 & 0x40000000) == 0)
  {
    v250 = v7 + 1;
    if ((v249 & 0x80000000) != 0)
    {
      LOBYTE(v259) = -1;
      v260 = 2;
    }
    else
    {
      v251 = *(_QWORD *)(v13 + 2448);
      v252 = v251 + 520 * v249;
      v253 = *(_QWORD *)(v252 + 312);
      v254 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v252 + 336))
      {
        *(_BYTE *)(v252 + 336) = 0;
        v255 = *(unsigned int *)(v252 + 4);
        if ((_DWORD)v255)
        {
          v821 = v254;
          v865 = v253;
          v910 = v9;
          v256 = 0;
          v257 = (unsigned __int8 *)(v251 + 520 * v249 + 36);
          do
          {
            v258 = *v257;
            v257 += 28;
            v256 = sub_223A4EC9C(v256, ((unint64_t)v258 << 8) | 1, 0xFFu);
            --v255;
          }
          while (v255);
          v259 = v256 >> 8;
          if (!(_BYTE)v256)
            LOBYTE(v259) = -1;
          v9 = v910;
          v254 = v821;
          v253 = v865;
        }
        else
        {
          LOBYTE(v259) = -1;
        }
        *(_BYTE *)(v251 + 520 * v249 + 338) = v259;
        v5 = a1;
      }
      else
      {
        LOBYTE(v259) = *(_BYTE *)(v251 + 520 * v249 + 338);
      }
      v260 = v253 > v254;
    }
    v261 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v250));
    a4.f32[2] = (float)v9;
    v262.i64[0] = 0x3F0000003F000000;
    v262.i64[1] = 0x3F0000003F000000;
    v263 = vmulq_n_f32(vaddq_f32(a4, v262), v261);
    v942 = v263.i32[2];
    v941 = v263.i64[0];
    sub_223FFDF1C(v12[2], &v941, v259, v260, v261);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v264 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v264;
    v13 = **v264;
    v229 = v6 + 3;
    v9 = a2[2] + 3;
  }
  v265 = v10[218];
  if ((v265 & 0x10000000) != 0)
    v266 = 0x40000000;
  else
    v266 = 0x80000000;
  if ((v265 & 0x20000000) != 0)
    v267 = v266;
  else
    v267 = v265 & 0xCFFFFFFF;
  if ((v267 & 0x40000000) == 0)
  {
    v268 = v7 + 2;
    if ((v267 & 0x80000000) != 0)
    {
      LOBYTE(v277) = -1;
      v278 = 2;
    }
    else
    {
      v269 = *(_QWORD *)(v13 + 2448);
      v270 = v269 + 520 * v267;
      v271 = *(_QWORD *)(v270 + 312);
      v272 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v270 + 336))
      {
        *(_BYTE *)(v270 + 336) = 0;
        v273 = *(unsigned int *)(v270 + 4);
        if ((_DWORD)v273)
        {
          v822 = v272;
          v866 = v271;
          v911 = v9;
          v274 = 0;
          v275 = (unsigned __int8 *)(v269 + 520 * v267 + 36);
          do
          {
            v276 = *v275;
            v275 += 28;
            v274 = sub_223A4EC9C(v274, ((unint64_t)v276 << 8) | 1, 0xFFu);
            --v273;
          }
          while (v273);
          v277 = v274 >> 8;
          if (!(_BYTE)v274)
            LOBYTE(v277) = -1;
          v9 = v911;
          v272 = v822;
          v271 = v866;
        }
        else
        {
          LOBYTE(v277) = -1;
        }
        *(_BYTE *)(v269 + 520 * v267 + 338) = v277;
        v5 = a1;
      }
      else
      {
        LOBYTE(v277) = *(_BYTE *)(v269 + 520 * v267 + 338);
      }
      v278 = v271 > v272;
    }
    v279 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v268));
    a4.f32[2] = (float)v9;
    v280.i64[0] = 0x3F0000003F000000;
    v280.i64[1] = 0x3F0000003F000000;
    v281 = vmulq_n_f32(vaddq_f32(a4, v280), v279);
    v942 = v281.i32[2];
    v941 = v281.i64[0];
    sub_223FFDF1C(v12[2], &v941, v277, v278, v279);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v282 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v282;
    v13 = **v282;
    v229 = v6 + 3;
    v9 = a2[2] + 3;
  }
  v283 = v10[219];
  if ((v283 & 0x10000000) != 0)
    v284 = 0x40000000;
  else
    v284 = 0x80000000;
  if ((v283 & 0x20000000) != 0)
    v285 = v284;
  else
    v285 = v283 & 0xCFFFFFFF;
  if ((v285 & 0x40000000) == 0)
  {
    v286 = v7 + 3;
    if ((v285 & 0x80000000) != 0)
    {
      LOBYTE(v295) = -1;
      v296 = 2;
    }
    else
    {
      v287 = *(_QWORD *)(v13 + 2448);
      v288 = v287 + 520 * v285;
      v289 = *(_QWORD *)(v288 + 312);
      v290 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v288 + 336))
      {
        *(_BYTE *)(v288 + 336) = 0;
        v291 = *(unsigned int *)(v288 + 4);
        if ((_DWORD)v291)
        {
          v823 = v290;
          v867 = v289;
          v912 = v9;
          v292 = 0;
          v293 = (unsigned __int8 *)(v287 + 520 * v285 + 36);
          do
          {
            v294 = *v293;
            v293 += 28;
            v292 = sub_223A4EC9C(v292, ((unint64_t)v294 << 8) | 1, 0xFFu);
            --v291;
          }
          while (v291);
          v295 = v292 >> 8;
          if (!(_BYTE)v292)
            LOBYTE(v295) = -1;
          v9 = v912;
          v290 = v823;
          v289 = v867;
        }
        else
        {
          LOBYTE(v295) = -1;
        }
        *(_BYTE *)(v287 + 520 * v285 + 338) = v295;
        v5 = a1;
      }
      else
      {
        LOBYTE(v295) = *(_BYTE *)(v287 + 520 * v285 + 338);
      }
      v296 = v289 > v290;
    }
    v297 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v286));
    a4.f32[2] = (float)v9;
    v298.i64[0] = 0x3F0000003F000000;
    v298.i64[1] = 0x3F0000003F000000;
    v299 = vmulq_n_f32(vaddq_f32(a4, v298), v297);
    v942 = v299.i32[2];
    v941 = v299.i64[0];
    sub_223FFDF1C(v12[2], &v941, v295, v296, v297);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v300 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v300;
    v13 = **v300;
    v229 = v6 + 3;
    v9 = a2[2] + 3;
  }
  v301 = v10[220];
  if ((v301 & 0x10000000) != 0)
    v302 = 0x40000000;
  else
    v302 = 0x80000000;
  if ((v301 & 0x20000000) != 0)
    v303 = v302;
  else
    v303 = v301 & 0xCFFFFFFF;
  if ((v303 & 0x40000000) == 0)
  {
    v304 = v7 + 4;
    if ((v303 & 0x80000000) != 0)
    {
      LOBYTE(v313) = -1;
      v314 = 2;
    }
    else
    {
      v305 = *(_QWORD *)(v13 + 2448);
      v306 = v305 + 520 * v303;
      v307 = *(_QWORD *)(v306 + 312);
      v308 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v306 + 336))
      {
        *(_BYTE *)(v306 + 336) = 0;
        v309 = *(unsigned int *)(v306 + 4);
        if ((_DWORD)v309)
        {
          v824 = v308;
          v868 = v307;
          v913 = v9;
          v310 = 0;
          v311 = (unsigned __int8 *)(v305 + 520 * v303 + 36);
          do
          {
            v312 = *v311;
            v311 += 28;
            v310 = sub_223A4EC9C(v310, ((unint64_t)v312 << 8) | 1, 0xFFu);
            --v309;
          }
          while (v309);
          v313 = v310 >> 8;
          if (!(_BYTE)v310)
            LOBYTE(v313) = -1;
          v9 = v913;
          v308 = v824;
          v307 = v868;
        }
        else
        {
          LOBYTE(v313) = -1;
        }
        *(_BYTE *)(v305 + 520 * v303 + 338) = v313;
        v5 = a1;
      }
      else
      {
        LOBYTE(v313) = *(_BYTE *)(v305 + 520 * v303 + 338);
      }
      v314 = v307 > v308;
    }
    v315 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v304));
    a4.f32[2] = (float)v9;
    v316.i64[0] = 0x3F0000003F000000;
    v316.i64[1] = 0x3F0000003F000000;
    v317 = vmulq_n_f32(vaddq_f32(a4, v316), v315);
    v942 = v317.i32[2];
    v941 = v317.i64[0];
    sub_223FFDF1C(v12[2], &v941, v313, v314, v315);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v318 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v318;
    v13 = **v318;
    v229 = v6 + 3;
    v9 = a2[2] + 3;
  }
  v319 = v10[221];
  if ((v319 & 0x10000000) != 0)
    v320 = 0x40000000;
  else
    v320 = 0x80000000;
  if ((v319 & 0x20000000) != 0)
    v321 = v320;
  else
    v321 = v319 & 0xCFFFFFFF;
  if ((v321 & 0x40000000) == 0)
  {
    v322 = v7 + 5;
    if ((v321 & 0x80000000) != 0)
    {
      LOBYTE(v331) = -1;
      v332 = 2;
    }
    else
    {
      v323 = *(_QWORD *)(v13 + 2448);
      v324 = v323 + 520 * v321;
      v325 = *(_QWORD *)(v324 + 312);
      v326 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v324 + 336))
      {
        *(_BYTE *)(v324 + 336) = 0;
        v327 = *(unsigned int *)(v324 + 4);
        if ((_DWORD)v327)
        {
          v825 = v326;
          v869 = v325;
          v914 = v9;
          v328 = 0;
          v329 = (unsigned __int8 *)(v323 + 520 * v321 + 36);
          do
          {
            v330 = *v329;
            v329 += 28;
            v328 = sub_223A4EC9C(v328, ((unint64_t)v330 << 8) | 1, 0xFFu);
            --v327;
          }
          while (v327);
          v331 = v328 >> 8;
          if (!(_BYTE)v328)
            LOBYTE(v331) = -1;
          v9 = v914;
          v326 = v825;
          v325 = v869;
        }
        else
        {
          LOBYTE(v331) = -1;
        }
        *(_BYTE *)(v323 + 520 * v321 + 338) = v331;
        v5 = a1;
      }
      else
      {
        LOBYTE(v331) = *(_BYTE *)(v323 + 520 * v321 + 338);
      }
      v332 = v325 > v326;
    }
    v333 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v322));
    a4.f32[2] = (float)v9;
    v334.i64[0] = 0x3F0000003F000000;
    v334.i64[1] = 0x3F0000003F000000;
    v335 = vmulq_n_f32(vaddq_f32(a4, v334), v333);
    v942 = v335.i32[2];
    v941 = v335.i64[0];
    sub_223FFDF1C(v12[2], &v941, v331, v332, v333);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v336 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v336;
    v13 = **v336;
    v229 = v6 + 3;
    v9 = a2[2] + 3;
  }
  v337 = v10[222];
  if ((v337 & 0x10000000) != 0)
    v338 = 0x40000000;
  else
    v338 = 0x80000000;
  if ((v337 & 0x20000000) != 0)
    v339 = v338;
  else
    v339 = v337 & 0xCFFFFFFF;
  if ((v339 & 0x40000000) == 0)
  {
    v340 = v7 + 6;
    if ((v339 & 0x80000000) != 0)
    {
      LOBYTE(v349) = -1;
      v350 = 2;
    }
    else
    {
      v341 = *(_QWORD *)(v13 + 2448);
      v342 = v341 + 520 * v339;
      v343 = *(_QWORD *)(v342 + 312);
      v344 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v342 + 336))
      {
        *(_BYTE *)(v342 + 336) = 0;
        v345 = *(unsigned int *)(v342 + 4);
        if ((_DWORD)v345)
        {
          v826 = v344;
          v870 = v343;
          v915 = v9;
          v346 = 0;
          v347 = (unsigned __int8 *)(v341 + 520 * v339 + 36);
          do
          {
            v348 = *v347;
            v347 += 28;
            v346 = sub_223A4EC9C(v346, ((unint64_t)v348 << 8) | 1, 0xFFu);
            --v345;
          }
          while (v345);
          v349 = v346 >> 8;
          if (!(_BYTE)v346)
            LOBYTE(v349) = -1;
          v9 = v915;
          v344 = v826;
          v343 = v870;
        }
        else
        {
          LOBYTE(v349) = -1;
        }
        *(_BYTE *)(v341 + 520 * v339 + 338) = v349;
        v5 = a1;
      }
      else
      {
        LOBYTE(v349) = *(_BYTE *)(v341 + 520 * v339 + 338);
      }
      v350 = v343 > v344;
    }
    v351 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v340));
    a4.f32[2] = (float)v9;
    v352.i64[0] = 0x3F0000003F000000;
    v352.i64[1] = 0x3F0000003F000000;
    v353 = vmulq_n_f32(vaddq_f32(a4, v352), v351);
    v942 = v353.i32[2];
    v941 = v353.i64[0];
    sub_223FFDF1C(v12[2], &v941, v349, v350, v351);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v354 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v354;
    v13 = **v354;
    v229 = v6 + 3;
    v9 = a2[2] + 3;
  }
  v355 = v10[223];
  if ((v355 & 0x10000000) != 0)
    v356 = 0x40000000;
  else
    v356 = 0x80000000;
  if ((v355 & 0x20000000) != 0)
    v357 = v356;
  else
    v357 = v355 & 0xCFFFFFFF;
  if ((v357 & 0x40000000) == 0)
  {
    v358 = v7 + 7;
    if ((v357 & 0x80000000) != 0)
    {
      LOBYTE(v367) = -1;
      v368 = 2;
    }
    else
    {
      v359 = *(_QWORD *)(v13 + 2448);
      v360 = v359 + 520 * v357;
      v361 = *(_QWORD *)(v360 + 312);
      v362 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v360 + 336))
      {
        *(_BYTE *)(v360 + 336) = 0;
        v363 = *(unsigned int *)(v360 + 4);
        if ((_DWORD)v363)
        {
          v827 = v362;
          v871 = v361;
          v916 = v9;
          v364 = 0;
          v365 = (unsigned __int8 *)(v359 + 520 * v357 + 36);
          do
          {
            v366 = *v365;
            v365 += 28;
            v364 = sub_223A4EC9C(v364, ((unint64_t)v366 << 8) | 1, 0xFFu);
            --v363;
          }
          while (v363);
          v367 = v364 >> 8;
          if (!(_BYTE)v364)
            LOBYTE(v367) = -1;
          v9 = v916;
          v362 = v827;
          v361 = v871;
        }
        else
        {
          LOBYTE(v367) = -1;
        }
        *(_BYTE *)(v359 + 520 * v357 + 338) = v367;
        v5 = a1;
      }
      else
      {
        LOBYTE(v367) = *(_BYTE *)(v359 + 520 * v357 + 338);
      }
      v368 = v361 > v362;
    }
    v369 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v358));
    a4.f32[2] = (float)v9;
    v370.i64[0] = 0x3F0000003F000000;
    v370.i64[1] = 0x3F0000003F000000;
    v371 = vmulq_n_f32(vaddq_f32(a4, v370), v369);
    v942 = v371.i32[2];
    v941 = v371.i64[0];
    sub_223FFDF1C(v12[2], &v941, v367, v368, v369);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v372 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v372;
    v13 = **v372;
    v9 = a2[2] + 3;
  }
  v373 = v6 + 4;
  v374 = v10[224];
  if ((v374 & 0x10000000) != 0)
    v375 = 0x40000000;
  else
    v375 = 0x80000000;
  if ((v374 & 0x20000000) != 0)
    v376 = v375;
  else
    v376 = v374 & 0xCFFFFFFF;
  if ((v376 & 0x40000000) == 0)
  {
    if ((v376 & 0x80000000) != 0)
    {
      LOBYTE(v385) = -1;
      v386 = 2;
    }
    else
    {
      v377 = *(_QWORD *)(v13 + 2448);
      v378 = v377 + 520 * v376;
      v379 = *(_QWORD *)(v378 + 312);
      v380 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v378 + 336))
      {
        *(_BYTE *)(v378 + 336) = 0;
        v381 = *(unsigned int *)(v378 + 4);
        if ((_DWORD)v381)
        {
          v828 = v380;
          v872 = v379;
          v917 = v9;
          v382 = 0;
          v383 = (unsigned __int8 *)(v377 + 520 * v376 + 36);
          do
          {
            v384 = *v383;
            v383 += 28;
            v382 = sub_223A4EC9C(v382, ((unint64_t)v384 << 8) | 1, 0xFFu);
            --v381;
          }
          while (v381);
          v385 = v382 >> 8;
          if (!(_BYTE)v382)
            LOBYTE(v385) = -1;
          v9 = v917;
          v380 = v828;
          v379 = v872;
        }
        else
        {
          LOBYTE(v385) = -1;
        }
        *(_BYTE *)(v377 + 520 * v376 + 338) = v385;
        v5 = a1;
      }
      else
      {
        LOBYTE(v385) = *(_BYTE *)(v377 + 520 * v376 + 338);
      }
      v386 = v379 > v380;
    }
    v387 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v7));
    a4.f32[2] = (float)v9;
    v388.i64[0] = 0x3F0000003F000000;
    v388.i64[1] = 0x3F0000003F000000;
    v389 = vmulq_n_f32(vaddq_f32(a4, v388), v387);
    v942 = v389.i32[2];
    v941 = v389.i64[0];
    sub_223FFDF1C(v12[2], &v941, v385, v386, v387);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v390 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v390;
    v13 = **v390;
    v373 = v6 + 4;
    v9 = a2[2] + 3;
  }
  v391 = v10[225];
  if ((v391 & 0x10000000) != 0)
    v392 = 0x40000000;
  else
    v392 = 0x80000000;
  if ((v391 & 0x20000000) != 0)
    v393 = v392;
  else
    v393 = v391 & 0xCFFFFFFF;
  if ((v393 & 0x40000000) == 0)
  {
    v394 = v7 + 1;
    if ((v393 & 0x80000000) != 0)
    {
      LOBYTE(v403) = -1;
      v404 = 2;
    }
    else
    {
      v395 = *(_QWORD *)(v13 + 2448);
      v396 = v395 + 520 * v393;
      v397 = *(_QWORD *)(v396 + 312);
      v398 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v396 + 336))
      {
        *(_BYTE *)(v396 + 336) = 0;
        v399 = *(unsigned int *)(v396 + 4);
        if ((_DWORD)v399)
        {
          v829 = v398;
          v873 = v397;
          v918 = v9;
          v400 = 0;
          v401 = (unsigned __int8 *)(v395 + 520 * v393 + 36);
          do
          {
            v402 = *v401;
            v401 += 28;
            v400 = sub_223A4EC9C(v400, ((unint64_t)v402 << 8) | 1, 0xFFu);
            --v399;
          }
          while (v399);
          v403 = v400 >> 8;
          if (!(_BYTE)v400)
            LOBYTE(v403) = -1;
          v9 = v918;
          v398 = v829;
          v397 = v873;
        }
        else
        {
          LOBYTE(v403) = -1;
        }
        *(_BYTE *)(v395 + 520 * v393 + 338) = v403;
        v5 = a1;
      }
      else
      {
        LOBYTE(v403) = *(_BYTE *)(v395 + 520 * v393 + 338);
      }
      v404 = v397 > v398;
    }
    v405 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v394));
    a4.f32[2] = (float)v9;
    v406.i64[0] = 0x3F0000003F000000;
    v406.i64[1] = 0x3F0000003F000000;
    v407 = vmulq_n_f32(vaddq_f32(a4, v406), v405);
    v942 = v407.i32[2];
    v941 = v407.i64[0];
    sub_223FFDF1C(v12[2], &v941, v403, v404, v405);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v408 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v408;
    v13 = **v408;
    v373 = v6 + 4;
    v9 = a2[2] + 3;
  }
  v409 = v10[226];
  if ((v409 & 0x10000000) != 0)
    v410 = 0x40000000;
  else
    v410 = 0x80000000;
  if ((v409 & 0x20000000) != 0)
    v411 = v410;
  else
    v411 = v409 & 0xCFFFFFFF;
  if ((v411 & 0x40000000) == 0)
  {
    v412 = v7 + 2;
    if ((v411 & 0x80000000) != 0)
    {
      LOBYTE(v421) = -1;
      v422 = 2;
    }
    else
    {
      v413 = *(_QWORD *)(v13 + 2448);
      v414 = v413 + 520 * v411;
      v415 = *(_QWORD *)(v414 + 312);
      v416 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v414 + 336))
      {
        *(_BYTE *)(v414 + 336) = 0;
        v417 = *(unsigned int *)(v414 + 4);
        if ((_DWORD)v417)
        {
          v830 = v416;
          v874 = v415;
          v919 = v9;
          v418 = 0;
          v419 = (unsigned __int8 *)(v413 + 520 * v411 + 36);
          do
          {
            v420 = *v419;
            v419 += 28;
            v418 = sub_223A4EC9C(v418, ((unint64_t)v420 << 8) | 1, 0xFFu);
            --v417;
          }
          while (v417);
          v421 = v418 >> 8;
          if (!(_BYTE)v418)
            LOBYTE(v421) = -1;
          v9 = v919;
          v416 = v830;
          v415 = v874;
        }
        else
        {
          LOBYTE(v421) = -1;
        }
        *(_BYTE *)(v413 + 520 * v411 + 338) = v421;
        v5 = a1;
      }
      else
      {
        LOBYTE(v421) = *(_BYTE *)(v413 + 520 * v411 + 338);
      }
      v422 = v415 > v416;
    }
    v423 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v412));
    a4.f32[2] = (float)v9;
    v424.i64[0] = 0x3F0000003F000000;
    v424.i64[1] = 0x3F0000003F000000;
    v425 = vmulq_n_f32(vaddq_f32(a4, v424), v423);
    v942 = v425.i32[2];
    v941 = v425.i64[0];
    sub_223FFDF1C(v12[2], &v941, v421, v422, v423);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v426 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v426;
    v13 = **v426;
    v373 = v6 + 4;
    v9 = a2[2] + 3;
  }
  v427 = v10[227];
  if ((v427 & 0x10000000) != 0)
    v428 = 0x40000000;
  else
    v428 = 0x80000000;
  if ((v427 & 0x20000000) != 0)
    v429 = v428;
  else
    v429 = v427 & 0xCFFFFFFF;
  if ((v429 & 0x40000000) == 0)
  {
    v430 = v7 + 3;
    if ((v429 & 0x80000000) != 0)
    {
      LOBYTE(v439) = -1;
      v440 = 2;
    }
    else
    {
      v431 = *(_QWORD *)(v13 + 2448);
      v432 = v431 + 520 * v429;
      v433 = *(_QWORD *)(v432 + 312);
      v434 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v432 + 336))
      {
        *(_BYTE *)(v432 + 336) = 0;
        v435 = *(unsigned int *)(v432 + 4);
        if ((_DWORD)v435)
        {
          v831 = v434;
          v875 = v433;
          v920 = v9;
          v436 = 0;
          v437 = (unsigned __int8 *)(v431 + 520 * v429 + 36);
          do
          {
            v438 = *v437;
            v437 += 28;
            v436 = sub_223A4EC9C(v436, ((unint64_t)v438 << 8) | 1, 0xFFu);
            --v435;
          }
          while (v435);
          v439 = v436 >> 8;
          if (!(_BYTE)v436)
            LOBYTE(v439) = -1;
          v9 = v920;
          v434 = v831;
          v433 = v875;
        }
        else
        {
          LOBYTE(v439) = -1;
        }
        *(_BYTE *)(v431 + 520 * v429 + 338) = v439;
        v5 = a1;
      }
      else
      {
        LOBYTE(v439) = *(_BYTE *)(v431 + 520 * v429 + 338);
      }
      v440 = v433 > v434;
    }
    v441 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v430));
    a4.f32[2] = (float)v9;
    v442.i64[0] = 0x3F0000003F000000;
    v442.i64[1] = 0x3F0000003F000000;
    v443 = vmulq_n_f32(vaddq_f32(a4, v442), v441);
    v942 = v443.i32[2];
    v941 = v443.i64[0];
    sub_223FFDF1C(v12[2], &v941, v439, v440, v441);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v444 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v444;
    v13 = **v444;
    v373 = v6 + 4;
    v9 = a2[2] + 3;
  }
  v445 = v10[228];
  if ((v445 & 0x10000000) != 0)
    v446 = 0x40000000;
  else
    v446 = 0x80000000;
  if ((v445 & 0x20000000) != 0)
    v447 = v446;
  else
    v447 = v445 & 0xCFFFFFFF;
  if ((v447 & 0x40000000) == 0)
  {
    v448 = v7 + 4;
    if ((v447 & 0x80000000) != 0)
    {
      LOBYTE(v457) = -1;
      v458 = 2;
    }
    else
    {
      v449 = *(_QWORD *)(v13 + 2448);
      v450 = v449 + 520 * v447;
      v451 = *(_QWORD *)(v450 + 312);
      v452 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v450 + 336))
      {
        *(_BYTE *)(v450 + 336) = 0;
        v453 = *(unsigned int *)(v450 + 4);
        if ((_DWORD)v453)
        {
          v832 = v452;
          v876 = v451;
          v921 = v9;
          v454 = 0;
          v455 = (unsigned __int8 *)(v449 + 520 * v447 + 36);
          do
          {
            v456 = *v455;
            v455 += 28;
            v454 = sub_223A4EC9C(v454, ((unint64_t)v456 << 8) | 1, 0xFFu);
            --v453;
          }
          while (v453);
          v457 = v454 >> 8;
          if (!(_BYTE)v454)
            LOBYTE(v457) = -1;
          v9 = v921;
          v452 = v832;
          v451 = v876;
        }
        else
        {
          LOBYTE(v457) = -1;
        }
        *(_BYTE *)(v449 + 520 * v447 + 338) = v457;
        v5 = a1;
      }
      else
      {
        LOBYTE(v457) = *(_BYTE *)(v449 + 520 * v447 + 338);
      }
      v458 = v451 > v452;
    }
    v459 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v448));
    a4.f32[2] = (float)v9;
    v460.i64[0] = 0x3F0000003F000000;
    v460.i64[1] = 0x3F0000003F000000;
    v461 = vmulq_n_f32(vaddq_f32(a4, v460), v459);
    v942 = v461.i32[2];
    v941 = v461.i64[0];
    sub_223FFDF1C(v12[2], &v941, v457, v458, v459);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v462 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v462;
    v13 = **v462;
    v373 = v6 + 4;
    v9 = a2[2] + 3;
  }
  v463 = v10[229];
  if ((v463 & 0x10000000) != 0)
    v464 = 0x40000000;
  else
    v464 = 0x80000000;
  if ((v463 & 0x20000000) != 0)
    v465 = v464;
  else
    v465 = v463 & 0xCFFFFFFF;
  if ((v465 & 0x40000000) == 0)
  {
    v466 = v7 + 5;
    if ((v465 & 0x80000000) != 0)
    {
      LOBYTE(v475) = -1;
      v476 = 2;
    }
    else
    {
      v467 = *(_QWORD *)(v13 + 2448);
      v468 = v467 + 520 * v465;
      v469 = *(_QWORD *)(v468 + 312);
      v470 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v468 + 336))
      {
        *(_BYTE *)(v468 + 336) = 0;
        v471 = *(unsigned int *)(v468 + 4);
        if ((_DWORD)v471)
        {
          v833 = v470;
          v877 = v469;
          v922 = v9;
          v472 = 0;
          v473 = (unsigned __int8 *)(v467 + 520 * v465 + 36);
          do
          {
            v474 = *v473;
            v473 += 28;
            v472 = sub_223A4EC9C(v472, ((unint64_t)v474 << 8) | 1, 0xFFu);
            --v471;
          }
          while (v471);
          v475 = v472 >> 8;
          if (!(_BYTE)v472)
            LOBYTE(v475) = -1;
          v9 = v922;
          v470 = v833;
          v469 = v877;
        }
        else
        {
          LOBYTE(v475) = -1;
        }
        *(_BYTE *)(v467 + 520 * v465 + 338) = v475;
        v5 = a1;
      }
      else
      {
        LOBYTE(v475) = *(_BYTE *)(v467 + 520 * v465 + 338);
      }
      v476 = v469 > v470;
    }
    v477 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v466));
    a4.f32[2] = (float)v9;
    v478.i64[0] = 0x3F0000003F000000;
    v478.i64[1] = 0x3F0000003F000000;
    v479 = vmulq_n_f32(vaddq_f32(a4, v478), v477);
    v942 = v479.i32[2];
    v941 = v479.i64[0];
    sub_223FFDF1C(v12[2], &v941, v475, v476, v477);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v480 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v480;
    v13 = **v480;
    v373 = v6 + 4;
    v9 = a2[2] + 3;
  }
  v481 = v10[230];
  if ((v481 & 0x10000000) != 0)
    v482 = 0x40000000;
  else
    v482 = 0x80000000;
  if ((v481 & 0x20000000) != 0)
    v483 = v482;
  else
    v483 = v481 & 0xCFFFFFFF;
  if ((v483 & 0x40000000) == 0)
  {
    v484 = v7 + 6;
    if ((v483 & 0x80000000) != 0)
    {
      LOBYTE(v493) = -1;
      v494 = 2;
    }
    else
    {
      v485 = *(_QWORD *)(v13 + 2448);
      v486 = v485 + 520 * v483;
      v487 = *(_QWORD *)(v486 + 312);
      v488 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v486 + 336))
      {
        *(_BYTE *)(v486 + 336) = 0;
        v489 = *(unsigned int *)(v486 + 4);
        if ((_DWORD)v489)
        {
          v834 = v488;
          v878 = v487;
          v923 = v9;
          v490 = 0;
          v491 = (unsigned __int8 *)(v485 + 520 * v483 + 36);
          do
          {
            v492 = *v491;
            v491 += 28;
            v490 = sub_223A4EC9C(v490, ((unint64_t)v492 << 8) | 1, 0xFFu);
            --v489;
          }
          while (v489);
          v493 = v490 >> 8;
          if (!(_BYTE)v490)
            LOBYTE(v493) = -1;
          v9 = v923;
          v488 = v834;
          v487 = v878;
        }
        else
        {
          LOBYTE(v493) = -1;
        }
        *(_BYTE *)(v485 + 520 * v483 + 338) = v493;
        v5 = a1;
      }
      else
      {
        LOBYTE(v493) = *(_BYTE *)(v485 + 520 * v483 + 338);
      }
      v494 = v487 > v488;
    }
    v495 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v484));
    a4.f32[2] = (float)v9;
    v496.i64[0] = 0x3F0000003F000000;
    v496.i64[1] = 0x3F0000003F000000;
    v497 = vmulq_n_f32(vaddq_f32(a4, v496), v495);
    v942 = v497.i32[2];
    v941 = v497.i64[0];
    sub_223FFDF1C(v12[2], &v941, v493, v494, v495);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v498 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v498;
    v13 = **v498;
    v373 = v6 + 4;
    v9 = a2[2] + 3;
  }
  v499 = v10[231];
  if ((v499 & 0x10000000) != 0)
    v500 = 0x40000000;
  else
    v500 = 0x80000000;
  if ((v499 & 0x20000000) != 0)
    v501 = v500;
  else
    v501 = v499 & 0xCFFFFFFF;
  if ((v501 & 0x40000000) == 0)
  {
    v502 = v7 + 7;
    if ((v501 & 0x80000000) != 0)
    {
      LOBYTE(v511) = -1;
      v512 = 2;
    }
    else
    {
      v503 = *(_QWORD *)(v13 + 2448);
      v504 = v503 + 520 * v501;
      v505 = *(_QWORD *)(v504 + 312);
      v506 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v504 + 336))
      {
        *(_BYTE *)(v504 + 336) = 0;
        v507 = *(unsigned int *)(v504 + 4);
        if ((_DWORD)v507)
        {
          v835 = v506;
          v879 = v505;
          v924 = v9;
          v508 = 0;
          v509 = (unsigned __int8 *)(v503 + 520 * v501 + 36);
          do
          {
            v510 = *v509;
            v509 += 28;
            v508 = sub_223A4EC9C(v508, ((unint64_t)v510 << 8) | 1, 0xFFu);
            --v507;
          }
          while (v507);
          v511 = v508 >> 8;
          if (!(_BYTE)v508)
            LOBYTE(v511) = -1;
          v9 = v924;
          v506 = v835;
          v505 = v879;
        }
        else
        {
          LOBYTE(v511) = -1;
        }
        *(_BYTE *)(v503 + 520 * v501 + 338) = v511;
        v5 = a1;
      }
      else
      {
        LOBYTE(v511) = *(_BYTE *)(v503 + 520 * v501 + 338);
      }
      v512 = v505 > v506;
    }
    v513 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v502));
    a4.f32[2] = (float)v9;
    v514.i64[0] = 0x3F0000003F000000;
    v514.i64[1] = 0x3F0000003F000000;
    v515 = vmulq_n_f32(vaddq_f32(a4, v514), v513);
    v942 = v515.i32[2];
    v941 = v515.i64[0];
    sub_223FFDF1C(v12[2], &v941, v511, v512, v513);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v516 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v516;
    v13 = **v516;
    v9 = a2[2] + 3;
  }
  v517 = v6 + 5;
  v518 = v10[232];
  if ((v518 & 0x10000000) != 0)
    v519 = 0x40000000;
  else
    v519 = 0x80000000;
  if ((v518 & 0x20000000) != 0)
    v520 = v519;
  else
    v520 = v518 & 0xCFFFFFFF;
  if ((v520 & 0x40000000) == 0)
  {
    if ((v520 & 0x80000000) != 0)
    {
      LOBYTE(v529) = -1;
      v530 = 2;
    }
    else
    {
      v521 = *(_QWORD *)(v13 + 2448);
      v522 = v521 + 520 * v520;
      v523 = *(_QWORD *)(v522 + 312);
      v524 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v522 + 336))
      {
        *(_BYTE *)(v522 + 336) = 0;
        v525 = *(unsigned int *)(v522 + 4);
        if ((_DWORD)v525)
        {
          v836 = v524;
          v880 = v523;
          v925 = v9;
          v526 = 0;
          v527 = (unsigned __int8 *)(v521 + 520 * v520 + 36);
          do
          {
            v528 = *v527;
            v527 += 28;
            v526 = sub_223A4EC9C(v526, ((unint64_t)v528 << 8) | 1, 0xFFu);
            --v525;
          }
          while (v525);
          v529 = v526 >> 8;
          if (!(_BYTE)v526)
            LOBYTE(v529) = -1;
          v9 = v925;
          v524 = v836;
          v523 = v880;
        }
        else
        {
          LOBYTE(v529) = -1;
        }
        *(_BYTE *)(v521 + 520 * v520 + 338) = v529;
        v5 = a1;
      }
      else
      {
        LOBYTE(v529) = *(_BYTE *)(v521 + 520 * v520 + 338);
      }
      v530 = v523 > v524;
    }
    v531 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v7));
    a4.f32[2] = (float)v9;
    v532.i64[0] = 0x3F0000003F000000;
    v532.i64[1] = 0x3F0000003F000000;
    v533 = vmulq_n_f32(vaddq_f32(a4, v532), v531);
    v942 = v533.i32[2];
    v941 = v533.i64[0];
    sub_223FFDF1C(v12[2], &v941, v529, v530, v531);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v534 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v534;
    v13 = **v534;
    v517 = v6 + 5;
    v9 = a2[2] + 3;
  }
  v535 = v10[233];
  if ((v535 & 0x10000000) != 0)
    v536 = 0x40000000;
  else
    v536 = 0x80000000;
  if ((v535 & 0x20000000) != 0)
    v537 = v536;
  else
    v537 = v535 & 0xCFFFFFFF;
  if ((v537 & 0x40000000) == 0)
  {
    v538 = v7 + 1;
    if ((v537 & 0x80000000) != 0)
    {
      LOBYTE(v547) = -1;
      v548 = 2;
    }
    else
    {
      v539 = *(_QWORD *)(v13 + 2448);
      v540 = v539 + 520 * v537;
      v541 = *(_QWORD *)(v540 + 312);
      v542 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v540 + 336))
      {
        *(_BYTE *)(v540 + 336) = 0;
        v543 = *(unsigned int *)(v540 + 4);
        if ((_DWORD)v543)
        {
          v837 = v542;
          v881 = v541;
          v926 = v9;
          v544 = 0;
          v545 = (unsigned __int8 *)(v539 + 520 * v537 + 36);
          do
          {
            v546 = *v545;
            v545 += 28;
            v544 = sub_223A4EC9C(v544, ((unint64_t)v546 << 8) | 1, 0xFFu);
            --v543;
          }
          while (v543);
          v547 = v544 >> 8;
          if (!(_BYTE)v544)
            LOBYTE(v547) = -1;
          v9 = v926;
          v542 = v837;
          v541 = v881;
        }
        else
        {
          LOBYTE(v547) = -1;
        }
        *(_BYTE *)(v539 + 520 * v537 + 338) = v547;
        v5 = a1;
      }
      else
      {
        LOBYTE(v547) = *(_BYTE *)(v539 + 520 * v537 + 338);
      }
      v548 = v541 > v542;
    }
    v549 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v538));
    a4.f32[2] = (float)v9;
    v550.i64[0] = 0x3F0000003F000000;
    v550.i64[1] = 0x3F0000003F000000;
    v551 = vmulq_n_f32(vaddq_f32(a4, v550), v549);
    v942 = v551.i32[2];
    v941 = v551.i64[0];
    sub_223FFDF1C(v12[2], &v941, v547, v548, v549);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v552 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v552;
    v13 = **v552;
    v517 = v6 + 5;
    v9 = a2[2] + 3;
  }
  v553 = v10[234];
  if ((v553 & 0x10000000) != 0)
    v554 = 0x40000000;
  else
    v554 = 0x80000000;
  if ((v553 & 0x20000000) != 0)
    v555 = v554;
  else
    v555 = v553 & 0xCFFFFFFF;
  if ((v555 & 0x40000000) == 0)
  {
    v556 = v7 + 2;
    if ((v555 & 0x80000000) != 0)
    {
      LOBYTE(v565) = -1;
      v566 = 2;
    }
    else
    {
      v557 = *(_QWORD *)(v13 + 2448);
      v558 = v557 + 520 * v555;
      v559 = *(_QWORD *)(v558 + 312);
      v560 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v558 + 336))
      {
        *(_BYTE *)(v558 + 336) = 0;
        v561 = *(unsigned int *)(v558 + 4);
        if ((_DWORD)v561)
        {
          v838 = v560;
          v882 = v559;
          v927 = v9;
          v562 = 0;
          v563 = (unsigned __int8 *)(v557 + 520 * v555 + 36);
          do
          {
            v564 = *v563;
            v563 += 28;
            v562 = sub_223A4EC9C(v562, ((unint64_t)v564 << 8) | 1, 0xFFu);
            --v561;
          }
          while (v561);
          v565 = v562 >> 8;
          if (!(_BYTE)v562)
            LOBYTE(v565) = -1;
          v9 = v927;
          v560 = v838;
          v559 = v882;
        }
        else
        {
          LOBYTE(v565) = -1;
        }
        *(_BYTE *)(v557 + 520 * v555 + 338) = v565;
        v5 = a1;
      }
      else
      {
        LOBYTE(v565) = *(_BYTE *)(v557 + 520 * v555 + 338);
      }
      v566 = v559 > v560;
    }
    v567 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v556));
    a4.f32[2] = (float)v9;
    v568.i64[0] = 0x3F0000003F000000;
    v568.i64[1] = 0x3F0000003F000000;
    v569 = vmulq_n_f32(vaddq_f32(a4, v568), v567);
    v942 = v569.i32[2];
    v941 = v569.i64[0];
    sub_223FFDF1C(v12[2], &v941, v565, v566, v567);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v570 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v570;
    v13 = **v570;
    v517 = v6 + 5;
    v9 = a2[2] + 3;
  }
  v571 = v10[235];
  if ((v571 & 0x10000000) != 0)
    v572 = 0x40000000;
  else
    v572 = 0x80000000;
  if ((v571 & 0x20000000) != 0)
    v573 = v572;
  else
    v573 = v571 & 0xCFFFFFFF;
  if ((v573 & 0x40000000) == 0)
  {
    v574 = v7 + 3;
    if ((v573 & 0x80000000) != 0)
    {
      LOBYTE(v583) = -1;
      v584 = 2;
    }
    else
    {
      v575 = *(_QWORD *)(v13 + 2448);
      v576 = v575 + 520 * v573;
      v577 = *(_QWORD *)(v576 + 312);
      v578 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v576 + 336))
      {
        *(_BYTE *)(v576 + 336) = 0;
        v579 = *(unsigned int *)(v576 + 4);
        if ((_DWORD)v579)
        {
          v839 = v578;
          v883 = v577;
          v928 = v9;
          v580 = 0;
          v581 = (unsigned __int8 *)(v575 + 520 * v573 + 36);
          do
          {
            v582 = *v581;
            v581 += 28;
            v580 = sub_223A4EC9C(v580, ((unint64_t)v582 << 8) | 1, 0xFFu);
            --v579;
          }
          while (v579);
          v583 = v580 >> 8;
          if (!(_BYTE)v580)
            LOBYTE(v583) = -1;
          v9 = v928;
          v578 = v839;
          v577 = v883;
        }
        else
        {
          LOBYTE(v583) = -1;
        }
        *(_BYTE *)(v575 + 520 * v573 + 338) = v583;
        v5 = a1;
      }
      else
      {
        LOBYTE(v583) = *(_BYTE *)(v575 + 520 * v573 + 338);
      }
      v584 = v577 > v578;
    }
    v585 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v574));
    a4.f32[2] = (float)v9;
    v586.i64[0] = 0x3F0000003F000000;
    v586.i64[1] = 0x3F0000003F000000;
    v587 = vmulq_n_f32(vaddq_f32(a4, v586), v585);
    v942 = v587.i32[2];
    v941 = v587.i64[0];
    sub_223FFDF1C(v12[2], &v941, v583, v584, v585);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v588 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v588;
    v13 = **v588;
    v517 = v6 + 5;
    v9 = a2[2] + 3;
  }
  v589 = v10[236];
  if ((v589 & 0x10000000) != 0)
    v590 = 0x40000000;
  else
    v590 = 0x80000000;
  if ((v589 & 0x20000000) != 0)
    v591 = v590;
  else
    v591 = v589 & 0xCFFFFFFF;
  if ((v591 & 0x40000000) == 0)
  {
    v592 = v7 + 4;
    if ((v591 & 0x80000000) != 0)
    {
      LOBYTE(v601) = -1;
      v602 = 2;
    }
    else
    {
      v593 = *(_QWORD *)(v13 + 2448);
      v594 = v593 + 520 * v591;
      v595 = *(_QWORD *)(v594 + 312);
      v596 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v594 + 336))
      {
        *(_BYTE *)(v594 + 336) = 0;
        v597 = *(unsigned int *)(v594 + 4);
        if ((_DWORD)v597)
        {
          v840 = v596;
          v884 = v595;
          v929 = v9;
          v598 = 0;
          v599 = (unsigned __int8 *)(v593 + 520 * v591 + 36);
          do
          {
            v600 = *v599;
            v599 += 28;
            v598 = sub_223A4EC9C(v598, ((unint64_t)v600 << 8) | 1, 0xFFu);
            --v597;
          }
          while (v597);
          v601 = v598 >> 8;
          if (!(_BYTE)v598)
            LOBYTE(v601) = -1;
          v9 = v929;
          v596 = v840;
          v595 = v884;
        }
        else
        {
          LOBYTE(v601) = -1;
        }
        *(_BYTE *)(v593 + 520 * v591 + 338) = v601;
        v5 = a1;
      }
      else
      {
        LOBYTE(v601) = *(_BYTE *)(v593 + 520 * v591 + 338);
      }
      v602 = v595 > v596;
    }
    v603 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v592));
    a4.f32[2] = (float)v9;
    v604.i64[0] = 0x3F0000003F000000;
    v604.i64[1] = 0x3F0000003F000000;
    v605 = vmulq_n_f32(vaddq_f32(a4, v604), v603);
    v942 = v605.i32[2];
    v941 = v605.i64[0];
    sub_223FFDF1C(v12[2], &v941, v601, v602, v603);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v606 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v606;
    v13 = **v606;
    v517 = v6 + 5;
    v9 = a2[2] + 3;
  }
  v607 = v10[237];
  if ((v607 & 0x10000000) != 0)
    v608 = 0x40000000;
  else
    v608 = 0x80000000;
  if ((v607 & 0x20000000) != 0)
    v609 = v608;
  else
    v609 = v607 & 0xCFFFFFFF;
  if ((v609 & 0x40000000) == 0)
  {
    v610 = v7 + 5;
    if ((v609 & 0x80000000) != 0)
    {
      LOBYTE(v619) = -1;
      v620 = 2;
    }
    else
    {
      v611 = *(_QWORD *)(v13 + 2448);
      v612 = v611 + 520 * v609;
      v613 = *(_QWORD *)(v612 + 312);
      v614 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v612 + 336))
      {
        *(_BYTE *)(v612 + 336) = 0;
        v615 = *(unsigned int *)(v612 + 4);
        if ((_DWORD)v615)
        {
          v841 = v614;
          v885 = v613;
          v930 = v9;
          v616 = 0;
          v617 = (unsigned __int8 *)(v611 + 520 * v609 + 36);
          do
          {
            v618 = *v617;
            v617 += 28;
            v616 = sub_223A4EC9C(v616, ((unint64_t)v618 << 8) | 1, 0xFFu);
            --v615;
          }
          while (v615);
          v619 = v616 >> 8;
          if (!(_BYTE)v616)
            LOBYTE(v619) = -1;
          v9 = v930;
          v614 = v841;
          v613 = v885;
        }
        else
        {
          LOBYTE(v619) = -1;
        }
        *(_BYTE *)(v611 + 520 * v609 + 338) = v619;
        v5 = a1;
      }
      else
      {
        LOBYTE(v619) = *(_BYTE *)(v611 + 520 * v609 + 338);
      }
      v620 = v613 > v614;
    }
    v621 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v610));
    a4.f32[2] = (float)v9;
    v622.i64[0] = 0x3F0000003F000000;
    v622.i64[1] = 0x3F0000003F000000;
    v623 = vmulq_n_f32(vaddq_f32(a4, v622), v621);
    v942 = v623.i32[2];
    v941 = v623.i64[0];
    sub_223FFDF1C(v12[2], &v941, v619, v620, v621);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v624 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v624;
    v13 = **v624;
    v517 = v6 + 5;
    v9 = a2[2] + 3;
  }
  v625 = v10[238];
  if ((v625 & 0x10000000) != 0)
    v626 = 0x40000000;
  else
    v626 = 0x80000000;
  if ((v625 & 0x20000000) != 0)
    v627 = v626;
  else
    v627 = v625 & 0xCFFFFFFF;
  if ((v627 & 0x40000000) == 0)
  {
    v628 = v7 + 6;
    if ((v627 & 0x80000000) != 0)
    {
      LOBYTE(v637) = -1;
      v638 = 2;
    }
    else
    {
      v629 = *(_QWORD *)(v13 + 2448);
      v630 = v629 + 520 * v627;
      v631 = *(_QWORD *)(v630 + 312);
      v632 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v630 + 336))
      {
        *(_BYTE *)(v630 + 336) = 0;
        v633 = *(unsigned int *)(v630 + 4);
        if ((_DWORD)v633)
        {
          v842 = v632;
          v886 = v631;
          v931 = v9;
          v634 = 0;
          v635 = (unsigned __int8 *)(v629 + 520 * v627 + 36);
          do
          {
            v636 = *v635;
            v635 += 28;
            v634 = sub_223A4EC9C(v634, ((unint64_t)v636 << 8) | 1, 0xFFu);
            --v633;
          }
          while (v633);
          v637 = v634 >> 8;
          if (!(_BYTE)v634)
            LOBYTE(v637) = -1;
          v9 = v931;
          v632 = v842;
          v631 = v886;
        }
        else
        {
          LOBYTE(v637) = -1;
        }
        *(_BYTE *)(v629 + 520 * v627 + 338) = v637;
        v5 = a1;
      }
      else
      {
        LOBYTE(v637) = *(_BYTE *)(v629 + 520 * v627 + 338);
      }
      v638 = v631 > v632;
    }
    v639 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v628));
    a4.f32[2] = (float)v9;
    v640.i64[0] = 0x3F0000003F000000;
    v640.i64[1] = 0x3F0000003F000000;
    v641 = vmulq_n_f32(vaddq_f32(a4, v640), v639);
    v942 = v641.i32[2];
    v941 = v641.i64[0];
    sub_223FFDF1C(v12[2], &v941, v637, v638, v639);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v642 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v642;
    v13 = **v642;
    v517 = v6 + 5;
    v9 = a2[2] + 3;
  }
  v643 = v10[239];
  if ((v643 & 0x10000000) != 0)
    v644 = 0x40000000;
  else
    v644 = 0x80000000;
  if ((v643 & 0x20000000) != 0)
    v645 = v644;
  else
    v645 = v643 & 0xCFFFFFFF;
  if ((v645 & 0x40000000) == 0)
  {
    v646 = v7 + 7;
    if ((v645 & 0x80000000) != 0)
    {
      LOBYTE(v655) = -1;
      v656 = 2;
    }
    else
    {
      v647 = *(_QWORD *)(v13 + 2448);
      v648 = v647 + 520 * v645;
      v649 = *(_QWORD *)(v648 + 312);
      v650 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v648 + 336))
      {
        *(_BYTE *)(v648 + 336) = 0;
        v651 = *(unsigned int *)(v648 + 4);
        if ((_DWORD)v651)
        {
          v843 = v650;
          v887 = v649;
          v932 = v9;
          v652 = 0;
          v653 = (unsigned __int8 *)(v647 + 520 * v645 + 36);
          do
          {
            v654 = *v653;
            v653 += 28;
            v652 = sub_223A4EC9C(v652, ((unint64_t)v654 << 8) | 1, 0xFFu);
            --v651;
          }
          while (v651);
          v655 = v652 >> 8;
          if (!(_BYTE)v652)
            LOBYTE(v655) = -1;
          v9 = v932;
          v650 = v843;
          v649 = v887;
        }
        else
        {
          LOBYTE(v655) = -1;
        }
        *(_BYTE *)(v647 + 520 * v645 + 338) = v655;
        v5 = a1;
      }
      else
      {
        LOBYTE(v655) = *(_BYTE *)(v647 + 520 * v645 + 338);
      }
      v656 = v649 > v650;
    }
    v657 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v646));
    a4.f32[2] = (float)v9;
    v658.i64[0] = 0x3F0000003F000000;
    v658.i64[1] = 0x3F0000003F000000;
    v659 = vmulq_n_f32(vaddq_f32(a4, v658), v657);
    v942 = v659.i32[2];
    v941 = v659.i64[0];
    sub_223FFDF1C(v12[2], &v941, v655, v656, v657);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v660 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v660;
    v13 = **v660;
    v9 = a2[2] + 3;
  }
  v661 = v6 + 6;
  v662 = v10[240];
  if ((v662 & 0x10000000) != 0)
    v663 = 0x40000000;
  else
    v663 = 0x80000000;
  if ((v662 & 0x20000000) != 0)
    v664 = v663;
  else
    v664 = v662 & 0xCFFFFFFF;
  if ((v664 & 0x40000000) == 0)
  {
    if ((v664 & 0x80000000) != 0)
    {
      LOBYTE(v673) = -1;
      v674 = 2;
    }
    else
    {
      v665 = *(_QWORD *)(v13 + 2448);
      v666 = v665 + 520 * v664;
      v667 = *(_QWORD *)(v666 + 312);
      v668 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v666 + 336))
      {
        *(_BYTE *)(v666 + 336) = 0;
        v669 = *(unsigned int *)(v666 + 4);
        if ((_DWORD)v669)
        {
          v804 = v668;
          v844 = v667;
          v888 = v661;
          v933 = v9;
          v670 = 0;
          v671 = (unsigned __int8 *)(v665 + 520 * v664 + 36);
          do
          {
            v672 = *v671;
            v671 += 28;
            v670 = sub_223A4EC9C(v670, ((unint64_t)v672 << 8) | 1, 0xFFu);
            --v669;
          }
          while (v669);
          v673 = v670 >> 8;
          if (!(_BYTE)v670)
            LOBYTE(v673) = -1;
          v9 = v933;
          v661 = v888;
          v668 = v804;
          v667 = v844;
        }
        else
        {
          LOBYTE(v673) = -1;
        }
        *(_BYTE *)(v665 + 520 * v664 + 338) = v673;
        v5 = a1;
      }
      else
      {
        LOBYTE(v673) = *(_BYTE *)(v665 + 520 * v664 + 338);
      }
      v674 = v667 > v668;
    }
    v675 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v7));
    a4.f32[2] = (float)v9;
    v676.i64[0] = 0x3F0000003F000000;
    v676.i64[1] = 0x3F0000003F000000;
    v677 = vmulq_n_f32(vaddq_f32(a4, v676), v675);
    v942 = v677.i32[2];
    v941 = v677.i64[0];
    sub_223FFDF1C(v12[2], &v941, v673, v674, v675);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v678 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v678;
    v13 = **v678;
    v661 = a2[1] + 6;
    v9 = a2[2] + 3;
  }
  v679 = v10[241];
  if ((v679 & 0x10000000) != 0)
    v680 = 0x40000000;
  else
    v680 = 0x80000000;
  if ((v679 & 0x20000000) != 0)
    v681 = v680;
  else
    v681 = v679 & 0xCFFFFFFF;
  if ((v681 & 0x40000000) == 0)
  {
    v682 = v7 + 1;
    if ((v681 & 0x80000000) != 0)
    {
      LOBYTE(v691) = -1;
      v692 = 2;
    }
    else
    {
      v683 = *(_QWORD *)(v13 + 2448);
      v684 = v683 + 520 * v681;
      v685 = *(_QWORD *)(v684 + 312);
      v686 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v684 + 336))
      {
        *(_BYTE *)(v684 + 336) = 0;
        v687 = *(unsigned int *)(v684 + 4);
        if ((_DWORD)v687)
        {
          v845 = v685;
          v889 = v661;
          v934 = v9;
          v688 = 0;
          v689 = (unsigned __int8 *)(v683 + 520 * v681 + 36);
          do
          {
            v690 = *v689;
            v689 += 28;
            v688 = sub_223A4EC9C(v688, ((unint64_t)v690 << 8) | 1, 0xFFu);
            --v687;
          }
          while (v687);
          v691 = v688 >> 8;
          if (!(_BYTE)v688)
            LOBYTE(v691) = -1;
          v9 = v934;
          v661 = v889;
          v685 = v845;
        }
        else
        {
          LOBYTE(v691) = -1;
        }
        *(_BYTE *)(v683 + 520 * v681 + 338) = v691;
        v5 = a1;
      }
      else
      {
        LOBYTE(v691) = *(_BYTE *)(v683 + 520 * v681 + 338);
      }
      v692 = v685 > v686;
    }
    v693 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v682));
    a4.f32[2] = (float)v9;
    v694.i64[0] = 0x3F0000003F000000;
    v694.i64[1] = 0x3F0000003F000000;
    v695 = vmulq_n_f32(vaddq_f32(a4, v694), v693);
    v942 = v695.i32[2];
    v941 = v695.i64[0];
    sub_223FFDF1C(v12[2], &v941, v691, v692, v693);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v696 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v696;
    v13 = **v696;
    v661 = a2[1] + 6;
    v9 = a2[2] + 3;
  }
  v697 = v10[242];
  if ((v697 & 0x10000000) != 0)
    v698 = 0x40000000;
  else
    v698 = 0x80000000;
  if ((v697 & 0x20000000) != 0)
    v699 = v698;
  else
    v699 = v697 & 0xCFFFFFFF;
  if ((v699 & 0x40000000) == 0)
  {
    v700 = v7 + 2;
    if ((v699 & 0x80000000) != 0)
    {
      LOBYTE(v709) = -1;
      v710 = 2;
    }
    else
    {
      v701 = *(_QWORD *)(v13 + 2448);
      v702 = v701 + 520 * v699;
      v703 = *(_QWORD *)(v702 + 312);
      v704 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v702 + 336))
      {
        *(_BYTE *)(v702 + 336) = 0;
        v705 = *(unsigned int *)(v702 + 4);
        if ((_DWORD)v705)
        {
          v805 = v704;
          v846 = v703;
          v890 = v661;
          v935 = v9;
          v706 = 0;
          v707 = (unsigned __int8 *)(v701 + 520 * v699 + 36);
          do
          {
            v708 = *v707;
            v707 += 28;
            v706 = sub_223A4EC9C(v706, ((unint64_t)v708 << 8) | 1, 0xFFu);
            --v705;
          }
          while (v705);
          v709 = v706 >> 8;
          if (!(_BYTE)v706)
            LOBYTE(v709) = -1;
          v9 = v935;
          v661 = v890;
          v704 = v805;
          v703 = v846;
        }
        else
        {
          LOBYTE(v709) = -1;
        }
        *(_BYTE *)(v701 + 520 * v699 + 338) = v709;
        v5 = a1;
      }
      else
      {
        LOBYTE(v709) = *(_BYTE *)(v701 + 520 * v699 + 338);
      }
      v710 = v703 > v704;
    }
    v711 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v700));
    a4.f32[2] = (float)v9;
    v712.i64[0] = 0x3F0000003F000000;
    v712.i64[1] = 0x3F0000003F000000;
    v713 = vmulq_n_f32(vaddq_f32(a4, v712), v711);
    v942 = v713.i32[2];
    v941 = v713.i64[0];
    sub_223FFDF1C(v12[2], &v941, v709, v710, v711);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v714 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v714;
    v13 = **v714;
    v661 = a2[1] + 6;
    v9 = a2[2] + 3;
  }
  v715 = v10[243];
  if ((v715 & 0x10000000) != 0)
    v716 = 0x40000000;
  else
    v716 = 0x80000000;
  if ((v715 & 0x20000000) != 0)
    v717 = v716;
  else
    v717 = v715 & 0xCFFFFFFF;
  if ((v717 & 0x40000000) == 0)
  {
    v718 = v7 + 3;
    if ((v717 & 0x80000000) != 0)
    {
      LOBYTE(v727) = -1;
      v728 = 2;
    }
    else
    {
      v719 = *(_QWORD *)(v13 + 2448);
      v720 = v719 + 520 * v717;
      v721 = *(_QWORD *)(v720 + 312);
      v722 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v720 + 336))
      {
        *(_BYTE *)(v720 + 336) = 0;
        v723 = *(unsigned int *)(v720 + 4);
        if ((_DWORD)v723)
        {
          v847 = v721;
          v891 = v661;
          v936 = v9;
          v724 = 0;
          v725 = (unsigned __int8 *)(v719 + 520 * v717 + 36);
          do
          {
            v726 = *v725;
            v725 += 28;
            v724 = sub_223A4EC9C(v724, ((unint64_t)v726 << 8) | 1, 0xFFu);
            --v723;
          }
          while (v723);
          v727 = v724 >> 8;
          if (!(_BYTE)v724)
            LOBYTE(v727) = -1;
          v9 = v936;
          v661 = v891;
          v721 = v847;
        }
        else
        {
          LOBYTE(v727) = -1;
        }
        *(_BYTE *)(v719 + 520 * v717 + 338) = v727;
        v5 = a1;
      }
      else
      {
        LOBYTE(v727) = *(_BYTE *)(v719 + 520 * v717 + 338);
      }
      v728 = v721 > v722;
    }
    v729 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v718));
    a4.f32[2] = (float)v9;
    v730.i64[0] = 0x3F0000003F000000;
    v730.i64[1] = 0x3F0000003F000000;
    v731 = vmulq_n_f32(vaddq_f32(a4, v730), v729);
    v942 = v731.i32[2];
    v941 = v731.i64[0];
    sub_223FFDF1C(v12[2], &v941, v727, v728, v729);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v732 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v732;
    v13 = **v732;
    v661 = a2[1] + 6;
    v9 = a2[2] + 3;
  }
  v733 = v10[244];
  if ((v733 & 0x10000000) != 0)
    v734 = 0x40000000;
  else
    v734 = 0x80000000;
  if ((v733 & 0x20000000) != 0)
    v735 = v734;
  else
    v735 = v733 & 0xCFFFFFFF;
  if ((v735 & 0x40000000) == 0)
  {
    v736 = v7 + 4;
    if ((v735 & 0x80000000) != 0)
    {
      LOBYTE(v745) = -1;
      v746 = 2;
    }
    else
    {
      v737 = *(_QWORD *)(v13 + 2448);
      v738 = v737 + 520 * v735;
      v739 = *(_QWORD *)(v738 + 312);
      v740 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v738 + 336))
      {
        *(_BYTE *)(v738 + 336) = 0;
        v741 = *(unsigned int *)(v738 + 4);
        if ((_DWORD)v741)
        {
          v806 = v740;
          v848 = v739;
          v892 = v661;
          v937 = v9;
          v742 = 0;
          v743 = (unsigned __int8 *)(v737 + 520 * v735 + 36);
          do
          {
            v744 = *v743;
            v743 += 28;
            v742 = sub_223A4EC9C(v742, ((unint64_t)v744 << 8) | 1, 0xFFu);
            --v741;
          }
          while (v741);
          v745 = v742 >> 8;
          if (!(_BYTE)v742)
            LOBYTE(v745) = -1;
          v9 = v937;
          v661 = v892;
          v740 = v806;
          v739 = v848;
        }
        else
        {
          LOBYTE(v745) = -1;
        }
        *(_BYTE *)(v737 + 520 * v735 + 338) = v745;
        v5 = a1;
      }
      else
      {
        LOBYTE(v745) = *(_BYTE *)(v737 + 520 * v735 + 338);
      }
      v746 = v739 > v740;
    }
    v747 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v736));
    a4.f32[2] = (float)v9;
    v748.i64[0] = 0x3F0000003F000000;
    v748.i64[1] = 0x3F0000003F000000;
    v749 = vmulq_n_f32(vaddq_f32(a4, v748), v747);
    v942 = v749.i32[2];
    v941 = v749.i64[0];
    sub_223FFDF1C(v12[2], &v941, v745, v746, v747);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v750 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v750;
    v13 = **v750;
    v661 = a2[1] + 6;
    v9 = a2[2] + 3;
  }
  v751 = v10[245];
  if ((v751 & 0x10000000) != 0)
    v752 = 0x40000000;
  else
    v752 = 0x80000000;
  if ((v751 & 0x20000000) != 0)
    v753 = v752;
  else
    v753 = v751 & 0xCFFFFFFF;
  if ((v753 & 0x40000000) == 0)
  {
    v754 = v7 + 5;
    if ((v753 & 0x80000000) != 0)
    {
      LOBYTE(v763) = -1;
      v764 = 2;
    }
    else
    {
      v755 = *(_QWORD *)(v13 + 2448);
      v756 = v755 + 520 * v753;
      v757 = *(_QWORD *)(v756 + 312);
      v758 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v756 + 336))
      {
        *(_BYTE *)(v756 + 336) = 0;
        v759 = *(unsigned int *)(v756 + 4);
        if ((_DWORD)v759)
        {
          v849 = v757;
          v893 = v661;
          v938 = v9;
          v760 = 0;
          v761 = (unsigned __int8 *)(v755 + 520 * v753 + 36);
          do
          {
            v762 = *v761;
            v761 += 28;
            v760 = sub_223A4EC9C(v760, ((unint64_t)v762 << 8) | 1, 0xFFu);
            --v759;
          }
          while (v759);
          v763 = v760 >> 8;
          if (!(_BYTE)v760)
            LOBYTE(v763) = -1;
          v9 = v938;
          v661 = v893;
          v757 = v849;
        }
        else
        {
          LOBYTE(v763) = -1;
        }
        *(_BYTE *)(v755 + 520 * v753 + 338) = v763;
        v5 = a1;
      }
      else
      {
        LOBYTE(v763) = *(_BYTE *)(v755 + 520 * v753 + 338);
      }
      v764 = v757 > v758;
    }
    v765 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v754));
    a4.f32[2] = (float)v9;
    v766.i64[0] = 0x3F0000003F000000;
    v766.i64[1] = 0x3F0000003F000000;
    v767 = vmulq_n_f32(vaddq_f32(a4, v766), v765);
    v942 = v767.i32[2];
    v941 = v767.i64[0];
    sub_223FFDF1C(v12[2], &v941, v763, v764, v765);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v768 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v768;
    v13 = **v768;
    v661 = a2[1] + 6;
    v9 = a2[2] + 3;
  }
  v769 = v10[246];
  if ((v769 & 0x10000000) != 0)
    v770 = 0x40000000;
  else
    v770 = 0x80000000;
  if ((v769 & 0x20000000) != 0)
    v771 = v770;
  else
    v771 = v769 & 0xCFFFFFFF;
  if ((v771 & 0x40000000) == 0)
  {
    v772 = v7 + 6;
    if ((v771 & 0x80000000) != 0)
    {
      LOBYTE(v781) = -1;
      v782 = 2;
    }
    else
    {
      v773 = *(_QWORD *)(v13 + 2448);
      v774 = v773 + 520 * v771;
      v775 = *(_QWORD *)(v774 + 312);
      v776 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v774 + 336))
      {
        *(_BYTE *)(v774 + 336) = 0;
        v777 = *(unsigned int *)(v774 + 4);
        if ((_DWORD)v777)
        {
          v807 = v776;
          v850 = v775;
          v894 = v661;
          v939 = v9;
          v778 = 0;
          v779 = (unsigned __int8 *)(v773 + 520 * v771 + 36);
          do
          {
            v780 = *v779;
            v779 += 28;
            v778 = sub_223A4EC9C(v778, ((unint64_t)v780 << 8) | 1, 0xFFu);
            --v777;
          }
          while (v777);
          v781 = v778 >> 8;
          if (!(_BYTE)v778)
            LOBYTE(v781) = -1;
          v9 = v939;
          v661 = v894;
          v776 = v807;
          v775 = v850;
        }
        else
        {
          LOBYTE(v781) = -1;
        }
        *(_BYTE *)(v773 + 520 * v771 + 338) = v781;
        v5 = a1;
      }
      else
      {
        LOBYTE(v781) = *(_BYTE *)(v773 + 520 * v771 + 338);
      }
      v782 = v775 > v776;
    }
    v783 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v772));
    a4.f32[2] = (float)v9;
    v784.i64[0] = 0x3F0000003F000000;
    v784.i64[1] = 0x3F0000003F000000;
    v785 = vmulq_n_f32(vaddq_f32(a4, v784), v783);
    v942 = v785.i32[2];
    v941 = v785.i64[0];
    sub_223FFDF1C(v12[2], &v941, v781, v782, v783);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v786 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v786;
    v13 = **v786;
    v661 = a2[1] + 6;
    v9 = a2[2] + 3;
  }
  v787 = v10[247];
  if ((v787 & 0x10000000) != 0)
    v788 = 0x40000000;
  else
    v788 = 0x80000000;
  if ((v787 & 0x20000000) != 0)
    v789 = v788;
  else
    v789 = v787 & 0xCFFFFFFF;
  if ((v789 & 0x40000000) == 0)
  {
    v790 = v7 + 7;
    if ((v789 & 0x80000000) != 0)
    {
      LOBYTE(v799) = -1;
      v800 = 2;
    }
    else
    {
      v791 = *(_QWORD *)(v13 + 2448);
      v792 = v791 + 520 * v789;
      v793 = *(_QWORD *)(v792 + 312);
      v794 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v792 + 336))
      {
        *(_BYTE *)(v792 + 336) = 0;
        v795 = *(unsigned int *)(v792 + 4);
        if ((_DWORD)v795)
        {
          v851 = v793;
          v895 = v661;
          v940 = v9;
          v796 = 0;
          v797 = (unsigned __int8 *)(v791 + 520 * v789 + 36);
          do
          {
            v798 = *v797;
            v797 += 28;
            v796 = sub_223A4EC9C(v796, ((unint64_t)v798 << 8) | 1, 0xFFu);
            --v795;
          }
          while (v795);
          v799 = v796 >> 8;
          if (!(_BYTE)v796)
            LOBYTE(v799) = -1;
          v9 = v940;
          v661 = v895;
          v793 = v851;
        }
        else
        {
          LOBYTE(v799) = -1;
        }
        *(_BYTE *)(v791 + 520 * v789 + 338) = v799;
        v5 = a1;
      }
      else
      {
        LOBYTE(v799) = *(_BYTE *)(v791 + 520 * v789 + 338);
      }
      v800 = v793 > v794;
    }
    v801 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v790));
    a4.f32[2] = (float)v9;
    v802.i64[0] = 0x3F0000003F000000;
    v802.i64[1] = 0x3F0000003F000000;
    v803 = vmulq_n_f32(vaddq_f32(a4, v802), v801);
    v942 = v803.i32[2];
    v941 = v803.i64[0];
    sub_223FFDF1C(v12[2], &v941, v799, v800, v801);
  }
  sub_223D6FB48(v5, a2, a3, a4);
}

void sub_223D6FB48(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t **v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t **v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  float v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t **v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t **v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unint64_t v98;
  int v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  uint64_t **v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  unsigned int v115;
  unint64_t v116;
  int v117;
  float v118;
  float32x4_t v119;
  float32x4_t v120;
  uint64_t **v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unsigned __int8 *v132;
  unsigned int v133;
  unint64_t v134;
  int v135;
  float v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t **v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unsigned __int8 *v150;
  unsigned int v151;
  unint64_t v152;
  int v153;
  float v154;
  float32x4_t v155;
  float32x4_t v156;
  uint64_t **v157;
  int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned __int8 *v168;
  unsigned int v169;
  unint64_t v170;
  int v171;
  float v172;
  float32x4_t v173;
  float32x4_t v174;
  uint64_t **v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unsigned __int8 *v186;
  unsigned int v187;
  unint64_t v188;
  int v189;
  float v190;
  float32x4_t v191;
  float32x4_t v192;
  uint64_t **v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unsigned int v205;
  unint64_t v206;
  int v207;
  float v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t **v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unsigned __int8 *v222;
  unsigned int v223;
  unint64_t v224;
  int v225;
  float v226;
  float32x4_t v227;
  float32x4_t v228;
  uint64_t **v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unsigned __int8 *v240;
  unsigned int v241;
  unint64_t v242;
  int v243;
  float v244;
  float32x4_t v245;
  float32x4_t v246;
  uint64_t **v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unsigned __int8 *v258;
  unsigned int v259;
  unint64_t v260;
  int v261;
  float v262;
  float32x4_t v263;
  float32x4_t v264;
  uint64_t **v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unsigned __int8 *v276;
  unsigned int v277;
  unint64_t v278;
  int v279;
  float v280;
  float32x4_t v281;
  float32x4_t v282;
  uint64_t **v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unsigned __int8 *v294;
  unsigned int v295;
  unint64_t v296;
  int v297;
  float v298;
  float32x4_t v299;
  float32x4_t v300;
  uint64_t **v301;
  int v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unsigned __int8 *v312;
  unsigned int v313;
  unint64_t v314;
  int v315;
  float v316;
  float32x4_t v317;
  float32x4_t v318;
  uint64_t **v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unsigned int v331;
  unint64_t v332;
  int v333;
  float v334;
  float32x4_t v335;
  float32x4_t v336;
  uint64_t **v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unsigned __int8 *v348;
  unsigned int v349;
  unint64_t v350;
  int v351;
  float v352;
  float32x4_t v353;
  float32x4_t v354;
  uint64_t **v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unsigned __int8 *v366;
  unsigned int v367;
  unint64_t v368;
  int v369;
  float v370;
  float32x4_t v371;
  float32x4_t v372;
  uint64_t **v373;
  int v374;
  unsigned int v375;
  unsigned int v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unsigned __int8 *v384;
  unsigned int v385;
  unint64_t v386;
  int v387;
  float v388;
  float32x4_t v389;
  float32x4_t v390;
  uint64_t **v391;
  int v392;
  unsigned int v393;
  unsigned int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unsigned __int8 *v402;
  unsigned int v403;
  unint64_t v404;
  int v405;
  float v406;
  float32x4_t v407;
  float32x4_t v408;
  uint64_t **v409;
  int v410;
  unsigned int v411;
  unsigned int v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  unsigned __int8 *v420;
  unsigned int v421;
  unint64_t v422;
  int v423;
  float v424;
  float32x4_t v425;
  float32x4_t v426;
  uint64_t **v427;
  int v428;
  unsigned int v429;
  unsigned int v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unsigned __int8 *v438;
  unsigned int v439;
  unint64_t v440;
  int v441;
  float v442;
  float32x4_t v443;
  float32x4_t v444;
  uint64_t **v445;
  int v446;
  int v447;
  unsigned int v448;
  unsigned int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unsigned int v457;
  unint64_t v458;
  int v459;
  float v460;
  float32x4_t v461;
  float32x4_t v462;
  uint64_t **v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unsigned __int8 *v474;
  unsigned int v475;
  unint64_t v476;
  int v477;
  float v478;
  float32x4_t v479;
  float32x4_t v480;
  uint64_t **v481;
  int v482;
  unsigned int v483;
  unsigned int v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unsigned __int8 *v492;
  unsigned int v493;
  unint64_t v494;
  int v495;
  float v496;
  float32x4_t v497;
  float32x4_t v498;
  uint64_t **v499;
  int v500;
  unsigned int v501;
  unsigned int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unsigned __int8 *v510;
  unsigned int v511;
  unint64_t v512;
  int v513;
  float v514;
  float32x4_t v515;
  float32x4_t v516;
  uint64_t **v517;
  int v518;
  unsigned int v519;
  unsigned int v520;
  int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unsigned __int8 *v528;
  unsigned int v529;
  unint64_t v530;
  int v531;
  float v532;
  float32x4_t v533;
  float32x4_t v534;
  uint64_t **v535;
  int v536;
  unsigned int v537;
  unsigned int v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  unsigned __int8 *v546;
  unsigned int v547;
  unint64_t v548;
  int v549;
  float v550;
  float32x4_t v551;
  float32x4_t v552;
  uint64_t **v553;
  int v554;
  unsigned int v555;
  unsigned int v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  unsigned __int8 *v564;
  unsigned int v565;
  unint64_t v566;
  int v567;
  float v568;
  float32x4_t v569;
  float32x4_t v570;
  uint64_t **v571;
  int v572;
  unsigned int v573;
  unsigned int v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unsigned int v583;
  unint64_t v584;
  int v585;
  float v586;
  float32x4_t v587;
  float32x4_t v588;
  uint64_t **v589;
  int v590;
  int v591;
  unsigned int v592;
  unsigned int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unsigned __int8 *v600;
  unsigned int v601;
  unint64_t v602;
  int v603;
  float v604;
  float32x4_t v605;
  float32x4_t v606;
  uint64_t **v607;
  int v608;
  unsigned int v609;
  unsigned int v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  unsigned __int8 *v618;
  unsigned int v619;
  unint64_t v620;
  int v621;
  float v622;
  float32x4_t v623;
  float32x4_t v624;
  uint64_t **v625;
  int v626;
  unsigned int v627;
  unsigned int v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unint64_t v635;
  unsigned __int8 *v636;
  unsigned int v637;
  unint64_t v638;
  int v639;
  float v640;
  float32x4_t v641;
  float32x4_t v642;
  uint64_t **v643;
  int v644;
  unsigned int v645;
  unsigned int v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  unsigned __int8 *v654;
  unsigned int v655;
  unint64_t v656;
  int v657;
  float v658;
  float32x4_t v659;
  float32x4_t v660;
  uint64_t **v661;
  int v662;
  unsigned int v663;
  unsigned int v664;
  int v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  unsigned __int8 *v672;
  unsigned int v673;
  unint64_t v674;
  int v675;
  float v676;
  float32x4_t v677;
  float32x4_t v678;
  uint64_t **v679;
  int v680;
  unsigned int v681;
  unsigned int v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  unsigned __int8 *v690;
  unsigned int v691;
  unint64_t v692;
  int v693;
  float v694;
  float32x4_t v695;
  float32x4_t v696;
  uint64_t **v697;
  int v698;
  unsigned int v699;
  unsigned int v700;
  int v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  unsigned __int8 *v708;
  unsigned int v709;
  unint64_t v710;
  int v711;
  float v712;
  float32x4_t v713;
  float32x4_t v714;
  uint64_t **v715;
  int v716;
  unsigned int v717;
  unsigned int v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  unint64_t v725;
  unsigned __int8 *v726;
  unsigned int v727;
  unint64_t v728;
  int v729;
  float v730;
  float32x4_t v731;
  float32x4_t v732;
  uint64_t **v733;
  int v734;
  int v735;
  unsigned int v736;
  unsigned int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unint64_t v743;
  unsigned __int8 *v744;
  unsigned int v745;
  unint64_t v746;
  int v747;
  float v748;
  float32x4_t v749;
  float32x4_t v750;
  uint64_t **v751;
  int v752;
  unsigned int v753;
  unsigned int v754;
  int v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  unint64_t v761;
  unsigned __int8 *v762;
  unsigned int v763;
  unint64_t v764;
  int v765;
  float v766;
  float32x4_t v767;
  float32x4_t v768;
  uint64_t **v769;
  int v770;
  unsigned int v771;
  unsigned int v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  unsigned __int8 *v780;
  unsigned int v781;
  unint64_t v782;
  int v783;
  float v784;
  float32x4_t v785;
  float32x4_t v786;
  uint64_t **v787;
  int v788;
  unsigned int v789;
  unsigned int v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  unint64_t v797;
  unsigned __int8 *v798;
  unsigned int v799;
  unint64_t v800;
  int v801;
  float v802;
  float32x4_t v803;
  float32x4_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  int v891;
  int v892;
  int v893;
  int v894;
  int v895;
  int v896;
  int v897;
  int v898;
  int v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  uint64_t v935;
  __int32 v936;

  v5 = *a2;
  v6 = a2[1];
  v7 = v6 + 7;
  v8 = a2[2];
  v9 = v8 + 3;
  v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v11 = v10[248];
  v12 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v13 = *v12;
  if ((v11 & 0x10000000) != 0)
    v14 = 0x40000000;
  else
    v14 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v15 = v14;
  else
    v15 = v11 & 0xCFFFFFFF;
  if ((v15 & 0x40000000) == 0)
  {
    v16 = a1;
    if ((v15 & 0x80000000) != 0)
    {
      LOBYTE(v25) = -1;
      v26 = 2;
    }
    else
    {
      v17 = *(_QWORD *)(v13 + 2448);
      v18 = v17 + 520 * v15;
      v19 = *(_QWORD *)(v18 + 312);
      v20 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v18 + 336))
      {
        *(_BYTE *)(v18 + 336) = 0;
        v21 = *(unsigned int *)(v18 + 4);
        if ((_DWORD)v21)
        {
          v808 = v20;
          v852 = v19;
          v891 = v7;
          v22 = 0;
          v23 = (unsigned __int8 *)(v17 + 520 * v15 + 36);
          do
          {
            v24 = *v23;
            v23 += 28;
            v22 = sub_223A4EC9C(v22, ((unint64_t)v24 << 8) | 1, 0xFFu);
            --v21;
          }
          while (v21);
          v25 = v22 >> 8;
          if (!(_BYTE)v22)
            LOBYTE(v25) = -1;
          v7 = v891;
          v20 = v808;
          v19 = v852;
        }
        else
        {
          LOBYTE(v25) = -1;
        }
        *(_BYTE *)(v17 + 520 * v15 + 338) = v25;
        v16 = a1;
      }
      else
      {
        LOBYTE(v25) = *(_BYTE *)(v17 + 520 * v15 + 338);
      }
      v26 = v19 > v20;
    }
    v27 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v5));
    a4.f32[2] = (float)v9;
    v28.i64[0] = 0x3F0000003F000000;
    v28.i64[1] = 0x3F0000003F000000;
    v29 = vmulq_n_f32(vaddq_f32(a4, v28), v27);
    v936 = v29.i32[2];
    v935 = v29.i64[0];
    sub_223FFDF1C(v12[2], &v935, v25, v26, v27);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v16 + 8);
    v30 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v16 + 16) + 8);
    v12 = *v30;
    v13 = **v30;
    v7 = v6 + 7;
    v9 = v8 + 3;
  }
  v31 = v10[249];
  if ((v31 & 0x10000000) != 0)
    v32 = 0x40000000;
  else
    v32 = 0x80000000;
  if ((v31 & 0x20000000) != 0)
    v33 = v32;
  else
    v33 = v31 & 0xCFFFFFFF;
  if ((v33 & 0x40000000) != 0)
  {
    v44 = a1;
  }
  else
  {
    v34 = v5 + 1;
    if ((v33 & 0x80000000) != 0)
    {
      LOBYTE(v43) = -1;
      v45 = 2;
      v44 = a1;
    }
    else
    {
      v35 = *(_QWORD *)(v13 + 2448);
      v36 = v35 + 520 * v33;
      v37 = *(_QWORD *)(v36 + 312);
      v38 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v36 + 336))
      {
        *(_BYTE *)(v36 + 336) = 0;
        v39 = *(unsigned int *)(v36 + 4);
        if ((_DWORD)v39)
        {
          v809 = v38;
          v853 = v37;
          v892 = v7;
          v40 = 0;
          v41 = (unsigned __int8 *)(v35 + 520 * v33 + 36);
          do
          {
            v42 = *v41;
            v41 += 28;
            v40 = sub_223A4EC9C(v40, ((unint64_t)v42 << 8) | 1, 0xFFu);
            --v39;
          }
          while (v39);
          v43 = v40 >> 8;
          if (!(_BYTE)v40)
            LOBYTE(v43) = -1;
          v7 = v892;
          v38 = v809;
          v37 = v853;
        }
        else
        {
          LOBYTE(v43) = -1;
        }
        *(_BYTE *)(v35 + 520 * v33 + 338) = v43;
      }
      else
      {
        LOBYTE(v43) = *(_BYTE *)(v35 + 520 * v33 + 338);
      }
      v44 = a1;
      v45 = v37 > v38;
    }
    v46 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v34));
    a4.f32[2] = (float)v9;
    v47.i64[0] = 0x3F0000003F000000;
    v47.i64[1] = 0x3F0000003F000000;
    v48 = vmulq_n_f32(vaddq_f32(a4, v47), v46);
    v936 = v48.i32[2];
    v935 = v48.i64[0];
    sub_223FFDF1C(v12[2], &v935, v43, v45, v46);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v49 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v49;
    v13 = **v49;
    v7 = v6 + 7;
    v9 = v8 + 3;
  }
  v50 = v10[250];
  if ((v50 & 0x10000000) != 0)
    v51 = 0x40000000;
  else
    v51 = 0x80000000;
  if ((v50 & 0x20000000) != 0)
    v52 = v51;
  else
    v52 = v50 & 0xCFFFFFFF;
  if ((v52 & 0x40000000) == 0)
  {
    v53 = v5 + 2;
    if ((v52 & 0x80000000) != 0)
    {
      LOBYTE(v62) = -1;
      v63 = 2;
    }
    else
    {
      v54 = *(_QWORD *)(v13 + 2448);
      v55 = v54 + 520 * v52;
      v56 = *(_QWORD *)(v55 + 312);
      v57 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v55 + 336))
      {
        *(_BYTE *)(v55 + 336) = 0;
        v58 = *(unsigned int *)(v55 + 4);
        if ((_DWORD)v58)
        {
          v805 = v57;
          v810 = v56;
          v893 = v7;
          v59 = 0;
          v60 = (unsigned __int8 *)(v54 + 520 * v52 + 36);
          do
          {
            v61 = *v60;
            v60 += 28;
            v59 = sub_223A4EC9C(v59, ((unint64_t)v61 << 8) | 1, 0xFFu);
            --v58;
          }
          while (v58);
          v62 = v59 >> 8;
          if (!(_BYTE)v59)
            LOBYTE(v62) = -1;
          v44 = a1;
          v7 = v893;
          v57 = v805;
          v56 = v810;
        }
        else
        {
          LOBYTE(v62) = -1;
        }
        *(_BYTE *)(v54 + 520 * v52 + 338) = v62;
      }
      else
      {
        LOBYTE(v62) = *(_BYTE *)(v54 + 520 * v52 + 338);
      }
      v63 = v56 > v57;
    }
    v64 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v53));
    a4.f32[2] = (float)v9;
    v65.i64[0] = 0x3F0000003F000000;
    v65.i64[1] = 0x3F0000003F000000;
    v66 = vmulq_n_f32(vaddq_f32(a4, v65), v64);
    v936 = v66.i32[2];
    v935 = v66.i64[0];
    sub_223FFDF1C(v12[2], &v935, v62, v63, v64);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v67 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v67;
    v13 = **v67;
    v7 = v6 + 7;
    v9 = v8 + 3;
  }
  v68 = v10[251];
  if ((v68 & 0x10000000) != 0)
    v69 = 0x40000000;
  else
    v69 = 0x80000000;
  if ((v68 & 0x20000000) != 0)
    v70 = v69;
  else
    v70 = v68 & 0xCFFFFFFF;
  if ((v70 & 0x40000000) == 0)
  {
    v71 = v5 + 3;
    if ((v70 & 0x80000000) != 0)
    {
      LOBYTE(v80) = -1;
      v81 = 2;
    }
    else
    {
      v72 = *(_QWORD *)(v13 + 2448);
      v73 = v72 + 520 * v70;
      v74 = *(_QWORD *)(v73 + 312);
      v75 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v73 + 336))
      {
        *(_BYTE *)(v73 + 336) = 0;
        v76 = *(unsigned int *)(v73 + 4);
        if ((_DWORD)v76)
        {
          v811 = v74;
          v894 = v7;
          v77 = 0;
          v78 = (unsigned __int8 *)(v72 + 520 * v70 + 36);
          do
          {
            v79 = *v78;
            v78 += 28;
            v77 = sub_223A4EC9C(v77, ((unint64_t)v79 << 8) | 1, 0xFFu);
            --v76;
          }
          while (v76);
          v80 = v77 >> 8;
          if (!(_BYTE)v77)
            LOBYTE(v80) = -1;
          v7 = v894;
          v74 = v811;
        }
        else
        {
          LOBYTE(v80) = -1;
        }
        *(_BYTE *)(v72 + 520 * v70 + 338) = v80;
      }
      else
      {
        LOBYTE(v80) = *(_BYTE *)(v72 + 520 * v70 + 338);
      }
      v81 = v74 > v75;
      v44 = a1;
    }
    v82 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v71));
    a4.f32[2] = (float)v9;
    v83.i64[0] = 0x3F0000003F000000;
    v83.i64[1] = 0x3F0000003F000000;
    v84 = vmulq_n_f32(vaddq_f32(a4, v83), v82);
    v936 = v84.i32[2];
    v935 = v84.i64[0];
    sub_223FFDF1C(v12[2], &v935, v80, v81, v82);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v85 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v85;
    v13 = **v85;
    v7 = v6 + 7;
    v9 = v8 + 3;
  }
  v86 = v10[252];
  if ((v86 & 0x10000000) != 0)
    v87 = 0x40000000;
  else
    v87 = 0x80000000;
  if ((v86 & 0x20000000) != 0)
    v88 = v87;
  else
    v88 = v86 & 0xCFFFFFFF;
  if ((v88 & 0x40000000) == 0)
  {
    v89 = v5 + 4;
    if ((v88 & 0x80000000) != 0)
    {
      LOBYTE(v98) = -1;
      v99 = 2;
    }
    else
    {
      v90 = *(_QWORD *)(v13 + 2448);
      v91 = v90 + 520 * v88;
      v92 = *(_QWORD *)(v91 + 312);
      v93 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v91 + 336))
      {
        *(_BYTE *)(v91 + 336) = 0;
        v94 = *(unsigned int *)(v91 + 4);
        if ((_DWORD)v94)
        {
          v806 = v93;
          v812 = v92;
          v895 = v7;
          v95 = 0;
          v96 = (unsigned __int8 *)(v90 + 520 * v88 + 36);
          do
          {
            v97 = *v96;
            v96 += 28;
            v95 = sub_223A4EC9C(v95, ((unint64_t)v97 << 8) | 1, 0xFFu);
            --v94;
          }
          while (v94);
          v98 = v95 >> 8;
          if (!(_BYTE)v95)
            LOBYTE(v98) = -1;
          v44 = a1;
          v7 = v895;
          v93 = v806;
          v92 = v812;
        }
        else
        {
          LOBYTE(v98) = -1;
        }
        *(_BYTE *)(v90 + 520 * v88 + 338) = v98;
      }
      else
      {
        LOBYTE(v98) = *(_BYTE *)(v90 + 520 * v88 + 338);
      }
      v99 = v92 > v93;
    }
    v100 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v89));
    a4.f32[2] = (float)v9;
    v101.i64[0] = 0x3F0000003F000000;
    v101.i64[1] = 0x3F0000003F000000;
    v102 = vmulq_n_f32(vaddq_f32(a4, v101), v100);
    v936 = v102.i32[2];
    v935 = v102.i64[0];
    sub_223FFDF1C(v12[2], &v935, v98, v99, v100);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v103 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v103;
    v13 = **v103;
    v7 = v6 + 7;
    v9 = v8 + 3;
  }
  v104 = v10[253];
  if ((v104 & 0x10000000) != 0)
    v105 = 0x40000000;
  else
    v105 = 0x80000000;
  if ((v104 & 0x20000000) != 0)
    v106 = v105;
  else
    v106 = v104 & 0xCFFFFFFF;
  if ((v106 & 0x40000000) == 0)
  {
    v107 = v5 + 5;
    if ((v106 & 0x80000000) != 0)
    {
      LOBYTE(v116) = -1;
      v117 = 2;
    }
    else
    {
      v108 = *(_QWORD *)(v13 + 2448);
      v109 = v108 + 520 * v106;
      v110 = *(_QWORD *)(v109 + 312);
      v111 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v109 + 336))
      {
        *(_BYTE *)(v109 + 336) = 0;
        v112 = *(unsigned int *)(v109 + 4);
        if ((_DWORD)v112)
        {
          v813 = v110;
          v896 = v7;
          v113 = 0;
          v114 = (unsigned __int8 *)(v108 + 520 * v106 + 36);
          do
          {
            v115 = *v114;
            v114 += 28;
            v113 = sub_223A4EC9C(v113, ((unint64_t)v115 << 8) | 1, 0xFFu);
            --v112;
          }
          while (v112);
          v116 = v113 >> 8;
          if (!(_BYTE)v113)
            LOBYTE(v116) = -1;
          v7 = v896;
          v110 = v813;
        }
        else
        {
          LOBYTE(v116) = -1;
        }
        *(_BYTE *)(v108 + 520 * v106 + 338) = v116;
      }
      else
      {
        LOBYTE(v116) = *(_BYTE *)(v108 + 520 * v106 + 338);
      }
      v117 = v110 > v111;
      v44 = a1;
    }
    v118 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v107));
    a4.f32[2] = (float)v9;
    v119.i64[0] = 0x3F0000003F000000;
    v119.i64[1] = 0x3F0000003F000000;
    v120 = vmulq_n_f32(vaddq_f32(a4, v119), v118);
    v936 = v120.i32[2];
    v935 = v120.i64[0];
    sub_223FFDF1C(v12[2], &v935, v116, v117, v118);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v121 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v121;
    v13 = **v121;
    v7 = v6 + 7;
    v9 = v8 + 3;
  }
  v122 = v10[254];
  if ((v122 & 0x10000000) != 0)
    v123 = 0x40000000;
  else
    v123 = 0x80000000;
  if ((v122 & 0x20000000) != 0)
    v124 = v123;
  else
    v124 = v122 & 0xCFFFFFFF;
  if ((v124 & 0x40000000) == 0)
  {
    v125 = v5 + 6;
    if ((v124 & 0x80000000) != 0)
    {
      LOBYTE(v134) = -1;
      v135 = 2;
    }
    else
    {
      v126 = *(_QWORD *)(v13 + 2448);
      v127 = v126 + 520 * v124;
      v128 = *(_QWORD *)(v127 + 312);
      v129 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v127 + 336))
      {
        *(_BYTE *)(v127 + 336) = 0;
        v130 = *(unsigned int *)(v127 + 4);
        if ((_DWORD)v130)
        {
          v807 = v129;
          v814 = v128;
          v897 = v7;
          v131 = 0;
          v132 = (unsigned __int8 *)(v126 + 520 * v124 + 36);
          do
          {
            v133 = *v132;
            v132 += 28;
            v131 = sub_223A4EC9C(v131, ((unint64_t)v133 << 8) | 1, 0xFFu);
            --v130;
          }
          while (v130);
          v134 = v131 >> 8;
          if (!(_BYTE)v131)
            LOBYTE(v134) = -1;
          v44 = a1;
          v7 = v897;
          v129 = v807;
          v128 = v814;
        }
        else
        {
          LOBYTE(v134) = -1;
        }
        *(_BYTE *)(v126 + 520 * v124 + 338) = v134;
      }
      else
      {
        LOBYTE(v134) = *(_BYTE *)(v126 + 520 * v124 + 338);
      }
      v135 = v128 > v129;
    }
    v136 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v125));
    a4.f32[2] = (float)v9;
    v137.i64[0] = 0x3F0000003F000000;
    v137.i64[1] = 0x3F0000003F000000;
    v138 = vmulq_n_f32(vaddq_f32(a4, v137), v136);
    v936 = v138.i32[2];
    v935 = v138.i64[0];
    sub_223FFDF1C(v12[2], &v935, v134, v135, v136);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v139 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v139;
    v13 = **v139;
    v7 = v6 + 7;
    v9 = v8 + 3;
  }
  v140 = v10[255];
  if ((v140 & 0x10000000) != 0)
    v141 = 0x40000000;
  else
    v141 = 0x80000000;
  if ((v140 & 0x20000000) != 0)
    v142 = v141;
  else
    v142 = v140 & 0xCFFFFFFF;
  if ((v142 & 0x40000000) == 0)
  {
    v143 = v5 + 7;
    if ((v142 & 0x80000000) != 0)
    {
      LOBYTE(v152) = -1;
      v153 = 2;
    }
    else
    {
      v144 = *(_QWORD *)(v13 + 2448);
      v145 = v144 + 520 * v142;
      v146 = *(_QWORD *)(v145 + 312);
      v147 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v145 + 336))
      {
        *(_BYTE *)(v145 + 336) = 0;
        v148 = *(unsigned int *)(v145 + 4);
        if ((_DWORD)v148)
        {
          v815 = v146;
          v898 = v7;
          v149 = 0;
          v150 = (unsigned __int8 *)(v144 + 520 * v142 + 36);
          do
          {
            v151 = *v150;
            v150 += 28;
            v149 = sub_223A4EC9C(v149, ((unint64_t)v151 << 8) | 1, 0xFFu);
            --v148;
          }
          while (v148);
          v152 = v149 >> 8;
          if (!(_BYTE)v149)
            LOBYTE(v152) = -1;
          v7 = v898;
          v146 = v815;
        }
        else
        {
          LOBYTE(v152) = -1;
        }
        *(_BYTE *)(v144 + 520 * v142 + 338) = v152;
      }
      else
      {
        LOBYTE(v152) = *(_BYTE *)(v144 + 520 * v142 + 338);
      }
      v153 = v146 > v147;
      v44 = a1;
    }
    v154 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v143));
    a4.f32[2] = (float)v9;
    v155.i64[0] = 0x3F0000003F000000;
    v155.i64[1] = 0x3F0000003F000000;
    v156 = vmulq_n_f32(vaddq_f32(a4, v155), v154);
    v936 = v156.i32[2];
    v935 = v156.i64[0];
    sub_223FFDF1C(v12[2], &v935, v152, v153, v154);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v157 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v157;
    v13 = **v157;
  }
  v158 = v8 + 4;
  v159 = v10[256];
  if ((v159 & 0x10000000) != 0)
    v160 = 0x40000000;
  else
    v160 = 0x80000000;
  if ((v159 & 0x20000000) != 0)
    v161 = v160;
  else
    v161 = v159 & 0xCFFFFFFF;
  if ((v161 & 0x40000000) == 0)
  {
    if ((v161 & 0x80000000) != 0)
    {
      LOBYTE(v170) = -1;
      v171 = 2;
    }
    else
    {
      v162 = *(_QWORD *)(v13 + 2448);
      v163 = v162 + 520 * v161;
      v164 = *(_QWORD *)(v163 + 312);
      v165 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v163 + 336))
      {
        *(_BYTE *)(v163 + 336) = 0;
        v166 = *(unsigned int *)(v163 + 4);
        if ((_DWORD)v166)
        {
          v816 = v165;
          v854 = v164;
          v899 = v158;
          v167 = 0;
          v168 = (unsigned __int8 *)(v162 + 520 * v161 + 36);
          do
          {
            v169 = *v168;
            v168 += 28;
            v167 = sub_223A4EC9C(v167, ((unint64_t)v169 << 8) | 1, 0xFFu);
            --v166;
          }
          while (v166);
          v170 = v167 >> 8;
          if (!(_BYTE)v167)
            LOBYTE(v170) = -1;
          v164 = v854;
          v44 = a1;
          v158 = v899;
          v165 = v816;
        }
        else
        {
          LOBYTE(v170) = -1;
        }
        *(_BYTE *)(v162 + 520 * v161 + 338) = v170;
      }
      else
      {
        LOBYTE(v170) = *(_BYTE *)(v162 + 520 * v161 + 338);
      }
      v171 = v164 > v165;
    }
    a4.f32[0] = (float)v5;
    a4.f32[1] = (float)v6;
    v172 = *(float *)(v13 + 144);
    a4.f32[2] = (float)v158;
    v173.i64[0] = 0x3F0000003F000000;
    v173.i64[1] = 0x3F0000003F000000;
    v174 = vmulq_n_f32(vaddq_f32(a4, v173), v172);
    v936 = v174.i32[2];
    v935 = v174.i64[0];
    sub_223FFDF1C(v12[2], &v935, v170, v171, v172);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v175 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v175;
    v13 = **v175;
    v158 = a2[2] + 4;
  }
  v176 = v10[257];
  if ((v176 & 0x10000000) != 0)
    v177 = 0x40000000;
  else
    v177 = 0x80000000;
  if ((v176 & 0x20000000) != 0)
    v178 = v177;
  else
    v178 = v176 & 0xCFFFFFFF;
  if ((v178 & 0x40000000) == 0)
  {
    v179 = v5 + 1;
    if ((v178 & 0x80000000) != 0)
    {
      LOBYTE(v188) = -1;
      v189 = 2;
    }
    else
    {
      v180 = *(_QWORD *)(v13 + 2448);
      v181 = v180 + 520 * v178;
      v182 = *(_QWORD *)(v181 + 312);
      v183 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v181 + 336))
      {
        *(_BYTE *)(v181 + 336) = 0;
        v184 = *(unsigned int *)(v181 + 4);
        if ((_DWORD)v184)
        {
          v817 = v183;
          v855 = v182;
          v900 = v158;
          v185 = 0;
          v186 = (unsigned __int8 *)(v180 + 520 * v178 + 36);
          do
          {
            v187 = *v186;
            v186 += 28;
            v185 = sub_223A4EC9C(v185, ((unint64_t)v187 << 8) | 1, 0xFFu);
            --v184;
          }
          while (v184);
          v188 = v185 >> 8;
          if (!(_BYTE)v185)
            LOBYTE(v188) = -1;
          v182 = v855;
          v44 = a1;
          v158 = v900;
          v183 = v817;
        }
        else
        {
          LOBYTE(v188) = -1;
        }
        *(_BYTE *)(v180 + 520 * v178 + 338) = v188;
      }
      else
      {
        LOBYTE(v188) = *(_BYTE *)(v180 + 520 * v178 + 338);
      }
      v189 = v182 > v183;
    }
    v190 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v179));
    a4.f32[2] = (float)v158;
    v191.i64[0] = 0x3F0000003F000000;
    v191.i64[1] = 0x3F0000003F000000;
    v192 = vmulq_n_f32(vaddq_f32(a4, v191), v190);
    v936 = v192.i32[2];
    v935 = v192.i64[0];
    sub_223FFDF1C(v12[2], &v935, v188, v189, v190);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v193 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v193;
    v13 = **v193;
    v158 = a2[2] + 4;
  }
  v194 = v10[258];
  if ((v194 & 0x10000000) != 0)
    v195 = 0x40000000;
  else
    v195 = 0x80000000;
  if ((v194 & 0x20000000) != 0)
    v196 = v195;
  else
    v196 = v194 & 0xCFFFFFFF;
  if ((v196 & 0x40000000) == 0)
  {
    v197 = v5 + 2;
    if ((v196 & 0x80000000) != 0)
    {
      LOBYTE(v206) = -1;
      v207 = 2;
    }
    else
    {
      v198 = *(_QWORD *)(v13 + 2448);
      v199 = v198 + 520 * v196;
      v200 = *(_QWORD *)(v199 + 312);
      v201 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v199 + 336))
      {
        *(_BYTE *)(v199 + 336) = 0;
        v202 = *(unsigned int *)(v199 + 4);
        if ((_DWORD)v202)
        {
          v818 = v201;
          v856 = v200;
          v901 = v158;
          v203 = 0;
          v204 = (unsigned __int8 *)(v198 + 520 * v196 + 36);
          do
          {
            v205 = *v204;
            v204 += 28;
            v203 = sub_223A4EC9C(v203, ((unint64_t)v205 << 8) | 1, 0xFFu);
            --v202;
          }
          while (v202);
          v206 = v203 >> 8;
          if (!(_BYTE)v203)
            LOBYTE(v206) = -1;
          v200 = v856;
          v44 = a1;
          v158 = v901;
          v201 = v818;
        }
        else
        {
          LOBYTE(v206) = -1;
        }
        *(_BYTE *)(v198 + 520 * v196 + 338) = v206;
      }
      else
      {
        LOBYTE(v206) = *(_BYTE *)(v198 + 520 * v196 + 338);
      }
      v207 = v200 > v201;
    }
    v208 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v197));
    a4.f32[2] = (float)v158;
    v209.i64[0] = 0x3F0000003F000000;
    v209.i64[1] = 0x3F0000003F000000;
    v210 = vmulq_n_f32(vaddq_f32(a4, v209), v208);
    v936 = v210.i32[2];
    v935 = v210.i64[0];
    sub_223FFDF1C(v12[2], &v935, v206, v207, v208);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v211 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v211;
    v13 = **v211;
    v158 = a2[2] + 4;
  }
  v212 = v10[259];
  if ((v212 & 0x10000000) != 0)
    v213 = 0x40000000;
  else
    v213 = 0x80000000;
  if ((v212 & 0x20000000) != 0)
    v214 = v213;
  else
    v214 = v212 & 0xCFFFFFFF;
  if ((v214 & 0x40000000) == 0)
  {
    v215 = v5 + 3;
    if ((v214 & 0x80000000) != 0)
    {
      LOBYTE(v224) = -1;
      v225 = 2;
    }
    else
    {
      v216 = *(_QWORD *)(v13 + 2448);
      v217 = v216 + 520 * v214;
      v218 = *(_QWORD *)(v217 + 312);
      v219 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v217 + 336))
      {
        *(_BYTE *)(v217 + 336) = 0;
        v220 = *(unsigned int *)(v217 + 4);
        if ((_DWORD)v220)
        {
          v819 = v219;
          v857 = v218;
          v902 = v158;
          v221 = 0;
          v222 = (unsigned __int8 *)(v216 + 520 * v214 + 36);
          do
          {
            v223 = *v222;
            v222 += 28;
            v221 = sub_223A4EC9C(v221, ((unint64_t)v223 << 8) | 1, 0xFFu);
            --v220;
          }
          while (v220);
          v224 = v221 >> 8;
          if (!(_BYTE)v221)
            LOBYTE(v224) = -1;
          v218 = v857;
          v44 = a1;
          v158 = v902;
          v219 = v819;
        }
        else
        {
          LOBYTE(v224) = -1;
        }
        *(_BYTE *)(v216 + 520 * v214 + 338) = v224;
      }
      else
      {
        LOBYTE(v224) = *(_BYTE *)(v216 + 520 * v214 + 338);
      }
      v225 = v218 > v219;
    }
    v226 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v215));
    a4.f32[2] = (float)v158;
    v227.i64[0] = 0x3F0000003F000000;
    v227.i64[1] = 0x3F0000003F000000;
    v228 = vmulq_n_f32(vaddq_f32(a4, v227), v226);
    v936 = v228.i32[2];
    v935 = v228.i64[0];
    sub_223FFDF1C(v12[2], &v935, v224, v225, v226);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v229 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v229;
    v13 = **v229;
    v158 = a2[2] + 4;
  }
  v230 = v10[260];
  if ((v230 & 0x10000000) != 0)
    v231 = 0x40000000;
  else
    v231 = 0x80000000;
  if ((v230 & 0x20000000) != 0)
    v232 = v231;
  else
    v232 = v230 & 0xCFFFFFFF;
  if ((v232 & 0x40000000) == 0)
  {
    v233 = v5 + 4;
    if ((v232 & 0x80000000) != 0)
    {
      LOBYTE(v242) = -1;
      v243 = 2;
    }
    else
    {
      v234 = *(_QWORD *)(v13 + 2448);
      v235 = v234 + 520 * v232;
      v236 = *(_QWORD *)(v235 + 312);
      v237 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v235 + 336))
      {
        *(_BYTE *)(v235 + 336) = 0;
        v238 = *(unsigned int *)(v235 + 4);
        if ((_DWORD)v238)
        {
          v820 = v237;
          v858 = v236;
          v903 = v158;
          v239 = 0;
          v240 = (unsigned __int8 *)(v234 + 520 * v232 + 36);
          do
          {
            v241 = *v240;
            v240 += 28;
            v239 = sub_223A4EC9C(v239, ((unint64_t)v241 << 8) | 1, 0xFFu);
            --v238;
          }
          while (v238);
          v242 = v239 >> 8;
          if (!(_BYTE)v239)
            LOBYTE(v242) = -1;
          v236 = v858;
          v44 = a1;
          v158 = v903;
          v237 = v820;
        }
        else
        {
          LOBYTE(v242) = -1;
        }
        *(_BYTE *)(v234 + 520 * v232 + 338) = v242;
      }
      else
      {
        LOBYTE(v242) = *(_BYTE *)(v234 + 520 * v232 + 338);
      }
      v243 = v236 > v237;
    }
    v244 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v233));
    a4.f32[2] = (float)v158;
    v245.i64[0] = 0x3F0000003F000000;
    v245.i64[1] = 0x3F0000003F000000;
    v246 = vmulq_n_f32(vaddq_f32(a4, v245), v244);
    v936 = v246.i32[2];
    v935 = v246.i64[0];
    sub_223FFDF1C(v12[2], &v935, v242, v243, v244);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v247 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v247;
    v13 = **v247;
    v158 = a2[2] + 4;
  }
  v248 = v10[261];
  if ((v248 & 0x10000000) != 0)
    v249 = 0x40000000;
  else
    v249 = 0x80000000;
  if ((v248 & 0x20000000) != 0)
    v250 = v249;
  else
    v250 = v248 & 0xCFFFFFFF;
  if ((v250 & 0x40000000) == 0)
  {
    v251 = v5 + 5;
    if ((v250 & 0x80000000) != 0)
    {
      LOBYTE(v260) = -1;
      v261 = 2;
    }
    else
    {
      v252 = *(_QWORD *)(v13 + 2448);
      v253 = v252 + 520 * v250;
      v254 = *(_QWORD *)(v253 + 312);
      v255 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v253 + 336))
      {
        *(_BYTE *)(v253 + 336) = 0;
        v256 = *(unsigned int *)(v253 + 4);
        if ((_DWORD)v256)
        {
          v821 = v255;
          v859 = v254;
          v904 = v158;
          v257 = 0;
          v258 = (unsigned __int8 *)(v252 + 520 * v250 + 36);
          do
          {
            v259 = *v258;
            v258 += 28;
            v257 = sub_223A4EC9C(v257, ((unint64_t)v259 << 8) | 1, 0xFFu);
            --v256;
          }
          while (v256);
          v260 = v257 >> 8;
          if (!(_BYTE)v257)
            LOBYTE(v260) = -1;
          v254 = v859;
          v44 = a1;
          v158 = v904;
          v255 = v821;
        }
        else
        {
          LOBYTE(v260) = -1;
        }
        *(_BYTE *)(v252 + 520 * v250 + 338) = v260;
      }
      else
      {
        LOBYTE(v260) = *(_BYTE *)(v252 + 520 * v250 + 338);
      }
      v261 = v254 > v255;
    }
    v262 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v251));
    a4.f32[2] = (float)v158;
    v263.i64[0] = 0x3F0000003F000000;
    v263.i64[1] = 0x3F0000003F000000;
    v264 = vmulq_n_f32(vaddq_f32(a4, v263), v262);
    v936 = v264.i32[2];
    v935 = v264.i64[0];
    sub_223FFDF1C(v12[2], &v935, v260, v261, v262);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v265 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v265;
    v13 = **v265;
    v158 = a2[2] + 4;
  }
  v266 = v10[262];
  if ((v266 & 0x10000000) != 0)
    v267 = 0x40000000;
  else
    v267 = 0x80000000;
  if ((v266 & 0x20000000) != 0)
    v268 = v267;
  else
    v268 = v266 & 0xCFFFFFFF;
  if ((v268 & 0x40000000) == 0)
  {
    v269 = v5 + 6;
    if ((v268 & 0x80000000) != 0)
    {
      LOBYTE(v278) = -1;
      v279 = 2;
    }
    else
    {
      v270 = *(_QWORD *)(v13 + 2448);
      v271 = v270 + 520 * v268;
      v272 = *(_QWORD *)(v271 + 312);
      v273 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v271 + 336))
      {
        *(_BYTE *)(v271 + 336) = 0;
        v274 = *(unsigned int *)(v271 + 4);
        if ((_DWORD)v274)
        {
          v822 = v273;
          v860 = v272;
          v905 = v158;
          v275 = 0;
          v276 = (unsigned __int8 *)(v270 + 520 * v268 + 36);
          do
          {
            v277 = *v276;
            v276 += 28;
            v275 = sub_223A4EC9C(v275, ((unint64_t)v277 << 8) | 1, 0xFFu);
            --v274;
          }
          while (v274);
          v278 = v275 >> 8;
          if (!(_BYTE)v275)
            LOBYTE(v278) = -1;
          v272 = v860;
          v44 = a1;
          v158 = v905;
          v273 = v822;
        }
        else
        {
          LOBYTE(v278) = -1;
        }
        *(_BYTE *)(v270 + 520 * v268 + 338) = v278;
      }
      else
      {
        LOBYTE(v278) = *(_BYTE *)(v270 + 520 * v268 + 338);
      }
      v279 = v272 > v273;
    }
    v280 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v269));
    a4.f32[2] = (float)v158;
    v281.i64[0] = 0x3F0000003F000000;
    v281.i64[1] = 0x3F0000003F000000;
    v282 = vmulq_n_f32(vaddq_f32(a4, v281), v280);
    v936 = v282.i32[2];
    v935 = v282.i64[0];
    sub_223FFDF1C(v12[2], &v935, v278, v279, v280);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v283 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v283;
    v13 = **v283;
    v158 = a2[2] + 4;
  }
  v284 = v10[263];
  if ((v284 & 0x10000000) != 0)
    v285 = 0x40000000;
  else
    v285 = 0x80000000;
  if ((v284 & 0x20000000) != 0)
    v286 = v285;
  else
    v286 = v284 & 0xCFFFFFFF;
  if ((v286 & 0x40000000) == 0)
  {
    v287 = v5 + 7;
    if ((v286 & 0x80000000) != 0)
    {
      LOBYTE(v296) = -1;
      v297 = 2;
    }
    else
    {
      v288 = *(_QWORD *)(v13 + 2448);
      v289 = v288 + 520 * v286;
      v290 = *(_QWORD *)(v289 + 312);
      v291 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v289 + 336))
      {
        *(_BYTE *)(v289 + 336) = 0;
        v292 = *(unsigned int *)(v289 + 4);
        if ((_DWORD)v292)
        {
          v823 = v291;
          v861 = v290;
          v906 = v158;
          v293 = 0;
          v294 = (unsigned __int8 *)(v288 + 520 * v286 + 36);
          do
          {
            v295 = *v294;
            v294 += 28;
            v293 = sub_223A4EC9C(v293, ((unint64_t)v295 << 8) | 1, 0xFFu);
            --v292;
          }
          while (v292);
          v296 = v293 >> 8;
          if (!(_BYTE)v293)
            LOBYTE(v296) = -1;
          v290 = v861;
          v44 = a1;
          v158 = v906;
          v291 = v823;
        }
        else
        {
          LOBYTE(v296) = -1;
        }
        *(_BYTE *)(v288 + 520 * v286 + 338) = v296;
      }
      else
      {
        LOBYTE(v296) = *(_BYTE *)(v288 + 520 * v286 + 338);
      }
      v297 = v290 > v291;
    }
    v298 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v287));
    a4.f32[2] = (float)v158;
    v299.i64[0] = 0x3F0000003F000000;
    v299.i64[1] = 0x3F0000003F000000;
    v300 = vmulq_n_f32(vaddq_f32(a4, v299), v298);
    v936 = v300.i32[2];
    v935 = v300.i64[0];
    sub_223FFDF1C(v12[2], &v935, v296, v297, v298);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v301 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v301;
    v13 = **v301;
    v158 = a2[2] + 4;
  }
  v302 = v6 + 1;
  v303 = v10[264];
  if ((v303 & 0x10000000) != 0)
    v304 = 0x40000000;
  else
    v304 = 0x80000000;
  if ((v303 & 0x20000000) != 0)
    v305 = v304;
  else
    v305 = v303 & 0xCFFFFFFF;
  if ((v305 & 0x40000000) == 0)
  {
    if ((v305 & 0x80000000) != 0)
    {
      LOBYTE(v314) = -1;
      v315 = 2;
    }
    else
    {
      v306 = *(_QWORD *)(v13 + 2448);
      v307 = v306 + 520 * v305;
      v308 = *(_QWORD *)(v307 + 312);
      v309 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v307 + 336))
      {
        *(_BYTE *)(v307 + 336) = 0;
        v310 = *(unsigned int *)(v307 + 4);
        if ((_DWORD)v310)
        {
          v824 = v309;
          v862 = v308;
          v907 = v158;
          v311 = 0;
          v312 = (unsigned __int8 *)(v306 + 520 * v305 + 36);
          do
          {
            v313 = *v312;
            v312 += 28;
            v311 = sub_223A4EC9C(v311, ((unint64_t)v313 << 8) | 1, 0xFFu);
            --v310;
          }
          while (v310);
          v314 = v311 >> 8;
          if (!(_BYTE)v311)
            LOBYTE(v314) = -1;
          v308 = v862;
          v44 = a1;
          v158 = v907;
          v309 = v824;
        }
        else
        {
          LOBYTE(v314) = -1;
        }
        *(_BYTE *)(v306 + 520 * v305 + 338) = v314;
      }
      else
      {
        LOBYTE(v314) = *(_BYTE *)(v306 + 520 * v305 + 338);
      }
      v315 = v308 > v309;
    }
    v316 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v302, v5));
    a4.f32[2] = (float)v158;
    v317.i64[0] = 0x3F0000003F000000;
    v317.i64[1] = 0x3F0000003F000000;
    v318 = vmulq_n_f32(vaddq_f32(a4, v317), v316);
    v936 = v318.i32[2];
    v935 = v318.i64[0];
    sub_223FFDF1C(v12[2], &v935, v314, v315, v316);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v319 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v319;
    v13 = **v319;
    v302 = v6 + 1;
    v158 = a2[2] + 4;
  }
  v320 = v10[265];
  if ((v320 & 0x10000000) != 0)
    v321 = 0x40000000;
  else
    v321 = 0x80000000;
  if ((v320 & 0x20000000) != 0)
    v322 = v321;
  else
    v322 = v320 & 0xCFFFFFFF;
  if ((v322 & 0x40000000) == 0)
  {
    v323 = v5 + 1;
    if ((v322 & 0x80000000) != 0)
    {
      LOBYTE(v332) = -1;
      v333 = 2;
    }
    else
    {
      v324 = *(_QWORD *)(v13 + 2448);
      v325 = v324 + 520 * v322;
      v326 = *(_QWORD *)(v325 + 312);
      v327 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v325 + 336))
      {
        *(_BYTE *)(v325 + 336) = 0;
        v328 = *(unsigned int *)(v325 + 4);
        if ((_DWORD)v328)
        {
          v825 = v327;
          v863 = v326;
          v908 = v158;
          v329 = 0;
          v330 = (unsigned __int8 *)(v324 + 520 * v322 + 36);
          do
          {
            v331 = *v330;
            v330 += 28;
            v329 = sub_223A4EC9C(v329, ((unint64_t)v331 << 8) | 1, 0xFFu);
            --v328;
          }
          while (v328);
          v332 = v329 >> 8;
          if (!(_BYTE)v329)
            LOBYTE(v332) = -1;
          v326 = v863;
          v44 = a1;
          v158 = v908;
          v327 = v825;
        }
        else
        {
          LOBYTE(v332) = -1;
        }
        *(_BYTE *)(v324 + 520 * v322 + 338) = v332;
      }
      else
      {
        LOBYTE(v332) = *(_BYTE *)(v324 + 520 * v322 + 338);
      }
      v333 = v326 > v327;
    }
    v334 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v302, v323));
    a4.f32[2] = (float)v158;
    v335.i64[0] = 0x3F0000003F000000;
    v335.i64[1] = 0x3F0000003F000000;
    v336 = vmulq_n_f32(vaddq_f32(a4, v335), v334);
    v936 = v336.i32[2];
    v935 = v336.i64[0];
    sub_223FFDF1C(v12[2], &v935, v332, v333, v334);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v337 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v337;
    v13 = **v337;
    v302 = v6 + 1;
    v158 = a2[2] + 4;
  }
  v338 = v10[266];
  if ((v338 & 0x10000000) != 0)
    v339 = 0x40000000;
  else
    v339 = 0x80000000;
  if ((v338 & 0x20000000) != 0)
    v340 = v339;
  else
    v340 = v338 & 0xCFFFFFFF;
  if ((v340 & 0x40000000) == 0)
  {
    v341 = v5 + 2;
    if ((v340 & 0x80000000) != 0)
    {
      LOBYTE(v350) = -1;
      v351 = 2;
    }
    else
    {
      v342 = *(_QWORD *)(v13 + 2448);
      v343 = v342 + 520 * v340;
      v344 = *(_QWORD *)(v343 + 312);
      v345 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v343 + 336))
      {
        *(_BYTE *)(v343 + 336) = 0;
        v346 = *(unsigned int *)(v343 + 4);
        if ((_DWORD)v346)
        {
          v826 = v345;
          v864 = v344;
          v909 = v158;
          v347 = 0;
          v348 = (unsigned __int8 *)(v342 + 520 * v340 + 36);
          do
          {
            v349 = *v348;
            v348 += 28;
            v347 = sub_223A4EC9C(v347, ((unint64_t)v349 << 8) | 1, 0xFFu);
            --v346;
          }
          while (v346);
          v350 = v347 >> 8;
          if (!(_BYTE)v347)
            LOBYTE(v350) = -1;
          v344 = v864;
          v44 = a1;
          v158 = v909;
          v345 = v826;
        }
        else
        {
          LOBYTE(v350) = -1;
        }
        *(_BYTE *)(v342 + 520 * v340 + 338) = v350;
      }
      else
      {
        LOBYTE(v350) = *(_BYTE *)(v342 + 520 * v340 + 338);
      }
      v351 = v344 > v345;
    }
    v352 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v302, v341));
    a4.f32[2] = (float)v158;
    v353.i64[0] = 0x3F0000003F000000;
    v353.i64[1] = 0x3F0000003F000000;
    v354 = vmulq_n_f32(vaddq_f32(a4, v353), v352);
    v936 = v354.i32[2];
    v935 = v354.i64[0];
    sub_223FFDF1C(v12[2], &v935, v350, v351, v352);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v355 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v355;
    v13 = **v355;
    v302 = v6 + 1;
    v158 = a2[2] + 4;
  }
  v356 = v10[267];
  if ((v356 & 0x10000000) != 0)
    v357 = 0x40000000;
  else
    v357 = 0x80000000;
  if ((v356 & 0x20000000) != 0)
    v358 = v357;
  else
    v358 = v356 & 0xCFFFFFFF;
  if ((v358 & 0x40000000) == 0)
  {
    v359 = v5 + 3;
    if ((v358 & 0x80000000) != 0)
    {
      LOBYTE(v368) = -1;
      v369 = 2;
    }
    else
    {
      v360 = *(_QWORD *)(v13 + 2448);
      v361 = v360 + 520 * v358;
      v362 = *(_QWORD *)(v361 + 312);
      v363 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v361 + 336))
      {
        *(_BYTE *)(v361 + 336) = 0;
        v364 = *(unsigned int *)(v361 + 4);
        if ((_DWORD)v364)
        {
          v827 = v363;
          v865 = v362;
          v910 = v158;
          v365 = 0;
          v366 = (unsigned __int8 *)(v360 + 520 * v358 + 36);
          do
          {
            v367 = *v366;
            v366 += 28;
            v365 = sub_223A4EC9C(v365, ((unint64_t)v367 << 8) | 1, 0xFFu);
            --v364;
          }
          while (v364);
          v368 = v365 >> 8;
          if (!(_BYTE)v365)
            LOBYTE(v368) = -1;
          v362 = v865;
          v44 = a1;
          v158 = v910;
          v363 = v827;
        }
        else
        {
          LOBYTE(v368) = -1;
        }
        *(_BYTE *)(v360 + 520 * v358 + 338) = v368;
      }
      else
      {
        LOBYTE(v368) = *(_BYTE *)(v360 + 520 * v358 + 338);
      }
      v369 = v362 > v363;
    }
    v370 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v302, v359));
    a4.f32[2] = (float)v158;
    v371.i64[0] = 0x3F0000003F000000;
    v371.i64[1] = 0x3F0000003F000000;
    v372 = vmulq_n_f32(vaddq_f32(a4, v371), v370);
    v936 = v372.i32[2];
    v935 = v372.i64[0];
    sub_223FFDF1C(v12[2], &v935, v368, v369, v370);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v373 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v373;
    v13 = **v373;
    v302 = v6 + 1;
    v158 = a2[2] + 4;
  }
  v374 = v10[268];
  if ((v374 & 0x10000000) != 0)
    v375 = 0x40000000;
  else
    v375 = 0x80000000;
  if ((v374 & 0x20000000) != 0)
    v376 = v375;
  else
    v376 = v374 & 0xCFFFFFFF;
  if ((v376 & 0x40000000) == 0)
  {
    v377 = v5 + 4;
    if ((v376 & 0x80000000) != 0)
    {
      LOBYTE(v386) = -1;
      v387 = 2;
    }
    else
    {
      v378 = *(_QWORD *)(v13 + 2448);
      v379 = v378 + 520 * v376;
      v380 = *(_QWORD *)(v379 + 312);
      v381 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v379 + 336))
      {
        *(_BYTE *)(v379 + 336) = 0;
        v382 = *(unsigned int *)(v379 + 4);
        if ((_DWORD)v382)
        {
          v828 = v381;
          v866 = v380;
          v911 = v158;
          v383 = 0;
          v384 = (unsigned __int8 *)(v378 + 520 * v376 + 36);
          do
          {
            v385 = *v384;
            v384 += 28;
            v383 = sub_223A4EC9C(v383, ((unint64_t)v385 << 8) | 1, 0xFFu);
            --v382;
          }
          while (v382);
          v386 = v383 >> 8;
          if (!(_BYTE)v383)
            LOBYTE(v386) = -1;
          v380 = v866;
          v44 = a1;
          v158 = v911;
          v381 = v828;
        }
        else
        {
          LOBYTE(v386) = -1;
        }
        *(_BYTE *)(v378 + 520 * v376 + 338) = v386;
      }
      else
      {
        LOBYTE(v386) = *(_BYTE *)(v378 + 520 * v376 + 338);
      }
      v387 = v380 > v381;
    }
    v388 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v302, v377));
    a4.f32[2] = (float)v158;
    v389.i64[0] = 0x3F0000003F000000;
    v389.i64[1] = 0x3F0000003F000000;
    v390 = vmulq_n_f32(vaddq_f32(a4, v389), v388);
    v936 = v390.i32[2];
    v935 = v390.i64[0];
    sub_223FFDF1C(v12[2], &v935, v386, v387, v388);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v391 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v391;
    v13 = **v391;
    v302 = v6 + 1;
    v158 = a2[2] + 4;
  }
  v392 = v10[269];
  if ((v392 & 0x10000000) != 0)
    v393 = 0x40000000;
  else
    v393 = 0x80000000;
  if ((v392 & 0x20000000) != 0)
    v394 = v393;
  else
    v394 = v392 & 0xCFFFFFFF;
  if ((v394 & 0x40000000) == 0)
  {
    v395 = v5 + 5;
    if ((v394 & 0x80000000) != 0)
    {
      LOBYTE(v404) = -1;
      v405 = 2;
    }
    else
    {
      v396 = *(_QWORD *)(v13 + 2448);
      v397 = v396 + 520 * v394;
      v398 = *(_QWORD *)(v397 + 312);
      v399 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v397 + 336))
      {
        *(_BYTE *)(v397 + 336) = 0;
        v400 = *(unsigned int *)(v397 + 4);
        if ((_DWORD)v400)
        {
          v829 = v399;
          v867 = v398;
          v912 = v158;
          v401 = 0;
          v402 = (unsigned __int8 *)(v396 + 520 * v394 + 36);
          do
          {
            v403 = *v402;
            v402 += 28;
            v401 = sub_223A4EC9C(v401, ((unint64_t)v403 << 8) | 1, 0xFFu);
            --v400;
          }
          while (v400);
          v404 = v401 >> 8;
          if (!(_BYTE)v401)
            LOBYTE(v404) = -1;
          v398 = v867;
          v44 = a1;
          v158 = v912;
          v399 = v829;
        }
        else
        {
          LOBYTE(v404) = -1;
        }
        *(_BYTE *)(v396 + 520 * v394 + 338) = v404;
      }
      else
      {
        LOBYTE(v404) = *(_BYTE *)(v396 + 520 * v394 + 338);
      }
      v405 = v398 > v399;
    }
    v406 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v302, v395));
    a4.f32[2] = (float)v158;
    v407.i64[0] = 0x3F0000003F000000;
    v407.i64[1] = 0x3F0000003F000000;
    v408 = vmulq_n_f32(vaddq_f32(a4, v407), v406);
    v936 = v408.i32[2];
    v935 = v408.i64[0];
    sub_223FFDF1C(v12[2], &v935, v404, v405, v406);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v409 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v409;
    v13 = **v409;
    v302 = v6 + 1;
    v158 = a2[2] + 4;
  }
  v410 = v10[270];
  if ((v410 & 0x10000000) != 0)
    v411 = 0x40000000;
  else
    v411 = 0x80000000;
  if ((v410 & 0x20000000) != 0)
    v412 = v411;
  else
    v412 = v410 & 0xCFFFFFFF;
  if ((v412 & 0x40000000) == 0)
  {
    v413 = v5 + 6;
    if ((v412 & 0x80000000) != 0)
    {
      LOBYTE(v422) = -1;
      v423 = 2;
    }
    else
    {
      v414 = *(_QWORD *)(v13 + 2448);
      v415 = v414 + 520 * v412;
      v416 = *(_QWORD *)(v415 + 312);
      v417 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v415 + 336))
      {
        *(_BYTE *)(v415 + 336) = 0;
        v418 = *(unsigned int *)(v415 + 4);
        if ((_DWORD)v418)
        {
          v830 = v417;
          v868 = v416;
          v913 = v158;
          v419 = 0;
          v420 = (unsigned __int8 *)(v414 + 520 * v412 + 36);
          do
          {
            v421 = *v420;
            v420 += 28;
            v419 = sub_223A4EC9C(v419, ((unint64_t)v421 << 8) | 1, 0xFFu);
            --v418;
          }
          while (v418);
          v422 = v419 >> 8;
          if (!(_BYTE)v419)
            LOBYTE(v422) = -1;
          v416 = v868;
          v44 = a1;
          v158 = v913;
          v417 = v830;
        }
        else
        {
          LOBYTE(v422) = -1;
        }
        *(_BYTE *)(v414 + 520 * v412 + 338) = v422;
      }
      else
      {
        LOBYTE(v422) = *(_BYTE *)(v414 + 520 * v412 + 338);
      }
      v423 = v416 > v417;
    }
    v424 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v302, v413));
    a4.f32[2] = (float)v158;
    v425.i64[0] = 0x3F0000003F000000;
    v425.i64[1] = 0x3F0000003F000000;
    v426 = vmulq_n_f32(vaddq_f32(a4, v425), v424);
    v936 = v426.i32[2];
    v935 = v426.i64[0];
    sub_223FFDF1C(v12[2], &v935, v422, v423, v424);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v427 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v427;
    v13 = **v427;
    v302 = v6 + 1;
    v158 = a2[2] + 4;
  }
  v428 = v10[271];
  if ((v428 & 0x10000000) != 0)
    v429 = 0x40000000;
  else
    v429 = 0x80000000;
  if ((v428 & 0x20000000) != 0)
    v430 = v429;
  else
    v430 = v428 & 0xCFFFFFFF;
  if ((v430 & 0x40000000) == 0)
  {
    v431 = v5 + 7;
    if ((v430 & 0x80000000) != 0)
    {
      LOBYTE(v440) = -1;
      v441 = 2;
    }
    else
    {
      v432 = *(_QWORD *)(v13 + 2448);
      v433 = v432 + 520 * v430;
      v434 = *(_QWORD *)(v433 + 312);
      v435 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v433 + 336))
      {
        *(_BYTE *)(v433 + 336) = 0;
        v436 = *(unsigned int *)(v433 + 4);
        if ((_DWORD)v436)
        {
          v831 = v435;
          v869 = v434;
          v914 = v158;
          v437 = 0;
          v438 = (unsigned __int8 *)(v432 + 520 * v430 + 36);
          do
          {
            v439 = *v438;
            v438 += 28;
            v437 = sub_223A4EC9C(v437, ((unint64_t)v439 << 8) | 1, 0xFFu);
            --v436;
          }
          while (v436);
          v440 = v437 >> 8;
          if (!(_BYTE)v437)
            LOBYTE(v440) = -1;
          v434 = v869;
          v44 = a1;
          v158 = v914;
          v435 = v831;
        }
        else
        {
          LOBYTE(v440) = -1;
        }
        *(_BYTE *)(v432 + 520 * v430 + 338) = v440;
      }
      else
      {
        LOBYTE(v440) = *(_BYTE *)(v432 + 520 * v430 + 338);
      }
      v441 = v434 > v435;
    }
    v442 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v302, v431));
    a4.f32[2] = (float)v158;
    v443.i64[0] = 0x3F0000003F000000;
    v443.i64[1] = 0x3F0000003F000000;
    v444 = vmulq_n_f32(vaddq_f32(a4, v443), v442);
    v936 = v444.i32[2];
    v935 = v444.i64[0];
    sub_223FFDF1C(v12[2], &v935, v440, v441, v442);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v445 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v445;
    v13 = **v445;
    v158 = a2[2] + 4;
  }
  v446 = v6 + 2;
  v447 = v10[272];
  if ((v447 & 0x10000000) != 0)
    v448 = 0x40000000;
  else
    v448 = 0x80000000;
  if ((v447 & 0x20000000) != 0)
    v449 = v448;
  else
    v449 = v447 & 0xCFFFFFFF;
  if ((v449 & 0x40000000) == 0)
  {
    if ((v449 & 0x80000000) != 0)
    {
      LOBYTE(v458) = -1;
      v459 = 2;
    }
    else
    {
      v450 = *(_QWORD *)(v13 + 2448);
      v451 = v450 + 520 * v449;
      v452 = *(_QWORD *)(v451 + 312);
      v453 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v451 + 336))
      {
        *(_BYTE *)(v451 + 336) = 0;
        v454 = *(unsigned int *)(v451 + 4);
        if ((_DWORD)v454)
        {
          v832 = v453;
          v870 = v452;
          v915 = v158;
          v455 = 0;
          v456 = (unsigned __int8 *)(v450 + 520 * v449 + 36);
          do
          {
            v457 = *v456;
            v456 += 28;
            v455 = sub_223A4EC9C(v455, ((unint64_t)v457 << 8) | 1, 0xFFu);
            --v454;
          }
          while (v454);
          v458 = v455 >> 8;
          if (!(_BYTE)v455)
            LOBYTE(v458) = -1;
          v452 = v870;
          v44 = a1;
          v158 = v915;
          v453 = v832;
        }
        else
        {
          LOBYTE(v458) = -1;
        }
        *(_BYTE *)(v450 + 520 * v449 + 338) = v458;
      }
      else
      {
        LOBYTE(v458) = *(_BYTE *)(v450 + 520 * v449 + 338);
      }
      v459 = v452 > v453;
    }
    v460 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v446, v5));
    a4.f32[2] = (float)v158;
    v461.i64[0] = 0x3F0000003F000000;
    v461.i64[1] = 0x3F0000003F000000;
    v462 = vmulq_n_f32(vaddq_f32(a4, v461), v460);
    v936 = v462.i32[2];
    v935 = v462.i64[0];
    sub_223FFDF1C(v12[2], &v935, v458, v459, v460);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v463 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v463;
    v13 = **v463;
    v446 = v6 + 2;
    v158 = a2[2] + 4;
  }
  v464 = v10[273];
  if ((v464 & 0x10000000) != 0)
    v465 = 0x40000000;
  else
    v465 = 0x80000000;
  if ((v464 & 0x20000000) != 0)
    v466 = v465;
  else
    v466 = v464 & 0xCFFFFFFF;
  if ((v466 & 0x40000000) == 0)
  {
    v467 = v5 + 1;
    if ((v466 & 0x80000000) != 0)
    {
      LOBYTE(v476) = -1;
      v477 = 2;
    }
    else
    {
      v468 = *(_QWORD *)(v13 + 2448);
      v469 = v468 + 520 * v466;
      v470 = *(_QWORD *)(v469 + 312);
      v471 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v469 + 336))
      {
        *(_BYTE *)(v469 + 336) = 0;
        v472 = *(unsigned int *)(v469 + 4);
        if ((_DWORD)v472)
        {
          v833 = v471;
          v871 = v470;
          v916 = v158;
          v473 = 0;
          v474 = (unsigned __int8 *)(v468 + 520 * v466 + 36);
          do
          {
            v475 = *v474;
            v474 += 28;
            v473 = sub_223A4EC9C(v473, ((unint64_t)v475 << 8) | 1, 0xFFu);
            --v472;
          }
          while (v472);
          v476 = v473 >> 8;
          if (!(_BYTE)v473)
            LOBYTE(v476) = -1;
          v470 = v871;
          v44 = a1;
          v158 = v916;
          v471 = v833;
        }
        else
        {
          LOBYTE(v476) = -1;
        }
        *(_BYTE *)(v468 + 520 * v466 + 338) = v476;
      }
      else
      {
        LOBYTE(v476) = *(_BYTE *)(v468 + 520 * v466 + 338);
      }
      v477 = v470 > v471;
    }
    v478 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v446, v467));
    a4.f32[2] = (float)v158;
    v479.i64[0] = 0x3F0000003F000000;
    v479.i64[1] = 0x3F0000003F000000;
    v480 = vmulq_n_f32(vaddq_f32(a4, v479), v478);
    v936 = v480.i32[2];
    v935 = v480.i64[0];
    sub_223FFDF1C(v12[2], &v935, v476, v477, v478);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v481 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v481;
    v13 = **v481;
    v446 = v6 + 2;
    v158 = a2[2] + 4;
  }
  v482 = v10[274];
  if ((v482 & 0x10000000) != 0)
    v483 = 0x40000000;
  else
    v483 = 0x80000000;
  if ((v482 & 0x20000000) != 0)
    v484 = v483;
  else
    v484 = v482 & 0xCFFFFFFF;
  if ((v484 & 0x40000000) == 0)
  {
    v485 = v5 + 2;
    if ((v484 & 0x80000000) != 0)
    {
      LOBYTE(v494) = -1;
      v495 = 2;
    }
    else
    {
      v486 = *(_QWORD *)(v13 + 2448);
      v487 = v486 + 520 * v484;
      v488 = *(_QWORD *)(v487 + 312);
      v489 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v487 + 336))
      {
        *(_BYTE *)(v487 + 336) = 0;
        v490 = *(unsigned int *)(v487 + 4);
        if ((_DWORD)v490)
        {
          v834 = v489;
          v872 = v488;
          v917 = v158;
          v491 = 0;
          v492 = (unsigned __int8 *)(v486 + 520 * v484 + 36);
          do
          {
            v493 = *v492;
            v492 += 28;
            v491 = sub_223A4EC9C(v491, ((unint64_t)v493 << 8) | 1, 0xFFu);
            --v490;
          }
          while (v490);
          v494 = v491 >> 8;
          if (!(_BYTE)v491)
            LOBYTE(v494) = -1;
          v488 = v872;
          v44 = a1;
          v158 = v917;
          v489 = v834;
        }
        else
        {
          LOBYTE(v494) = -1;
        }
        *(_BYTE *)(v486 + 520 * v484 + 338) = v494;
      }
      else
      {
        LOBYTE(v494) = *(_BYTE *)(v486 + 520 * v484 + 338);
      }
      v495 = v488 > v489;
    }
    v496 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v446, v485));
    a4.f32[2] = (float)v158;
    v497.i64[0] = 0x3F0000003F000000;
    v497.i64[1] = 0x3F0000003F000000;
    v498 = vmulq_n_f32(vaddq_f32(a4, v497), v496);
    v936 = v498.i32[2];
    v935 = v498.i64[0];
    sub_223FFDF1C(v12[2], &v935, v494, v495, v496);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v499 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v499;
    v13 = **v499;
    v446 = v6 + 2;
    v158 = a2[2] + 4;
  }
  v500 = v10[275];
  if ((v500 & 0x10000000) != 0)
    v501 = 0x40000000;
  else
    v501 = 0x80000000;
  if ((v500 & 0x20000000) != 0)
    v502 = v501;
  else
    v502 = v500 & 0xCFFFFFFF;
  if ((v502 & 0x40000000) == 0)
  {
    v503 = v5 + 3;
    if ((v502 & 0x80000000) != 0)
    {
      LOBYTE(v512) = -1;
      v513 = 2;
    }
    else
    {
      v504 = *(_QWORD *)(v13 + 2448);
      v505 = v504 + 520 * v502;
      v506 = *(_QWORD *)(v505 + 312);
      v507 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v505 + 336))
      {
        *(_BYTE *)(v505 + 336) = 0;
        v508 = *(unsigned int *)(v505 + 4);
        if ((_DWORD)v508)
        {
          v835 = v507;
          v873 = v506;
          v918 = v158;
          v509 = 0;
          v510 = (unsigned __int8 *)(v504 + 520 * v502 + 36);
          do
          {
            v511 = *v510;
            v510 += 28;
            v509 = sub_223A4EC9C(v509, ((unint64_t)v511 << 8) | 1, 0xFFu);
            --v508;
          }
          while (v508);
          v512 = v509 >> 8;
          if (!(_BYTE)v509)
            LOBYTE(v512) = -1;
          v506 = v873;
          v44 = a1;
          v158 = v918;
          v507 = v835;
        }
        else
        {
          LOBYTE(v512) = -1;
        }
        *(_BYTE *)(v504 + 520 * v502 + 338) = v512;
      }
      else
      {
        LOBYTE(v512) = *(_BYTE *)(v504 + 520 * v502 + 338);
      }
      v513 = v506 > v507;
    }
    v514 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v446, v503));
    a4.f32[2] = (float)v158;
    v515.i64[0] = 0x3F0000003F000000;
    v515.i64[1] = 0x3F0000003F000000;
    v516 = vmulq_n_f32(vaddq_f32(a4, v515), v514);
    v936 = v516.i32[2];
    v935 = v516.i64[0];
    sub_223FFDF1C(v12[2], &v935, v512, v513, v514);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v517 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v517;
    v13 = **v517;
    v446 = v6 + 2;
    v158 = a2[2] + 4;
  }
  v518 = v10[276];
  if ((v518 & 0x10000000) != 0)
    v519 = 0x40000000;
  else
    v519 = 0x80000000;
  if ((v518 & 0x20000000) != 0)
    v520 = v519;
  else
    v520 = v518 & 0xCFFFFFFF;
  if ((v520 & 0x40000000) == 0)
  {
    v521 = v5 + 4;
    if ((v520 & 0x80000000) != 0)
    {
      LOBYTE(v530) = -1;
      v531 = 2;
    }
    else
    {
      v522 = *(_QWORD *)(v13 + 2448);
      v523 = v522 + 520 * v520;
      v524 = *(_QWORD *)(v523 + 312);
      v525 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v523 + 336))
      {
        *(_BYTE *)(v523 + 336) = 0;
        v526 = *(unsigned int *)(v523 + 4);
        if ((_DWORD)v526)
        {
          v836 = v525;
          v874 = v524;
          v919 = v158;
          v527 = 0;
          v528 = (unsigned __int8 *)(v522 + 520 * v520 + 36);
          do
          {
            v529 = *v528;
            v528 += 28;
            v527 = sub_223A4EC9C(v527, ((unint64_t)v529 << 8) | 1, 0xFFu);
            --v526;
          }
          while (v526);
          v530 = v527 >> 8;
          if (!(_BYTE)v527)
            LOBYTE(v530) = -1;
          v524 = v874;
          v44 = a1;
          v158 = v919;
          v525 = v836;
        }
        else
        {
          LOBYTE(v530) = -1;
        }
        *(_BYTE *)(v522 + 520 * v520 + 338) = v530;
      }
      else
      {
        LOBYTE(v530) = *(_BYTE *)(v522 + 520 * v520 + 338);
      }
      v531 = v524 > v525;
    }
    v532 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v446, v521));
    a4.f32[2] = (float)v158;
    v533.i64[0] = 0x3F0000003F000000;
    v533.i64[1] = 0x3F0000003F000000;
    v534 = vmulq_n_f32(vaddq_f32(a4, v533), v532);
    v936 = v534.i32[2];
    v935 = v534.i64[0];
    sub_223FFDF1C(v12[2], &v935, v530, v531, v532);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v535 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v535;
    v13 = **v535;
    v446 = v6 + 2;
    v158 = a2[2] + 4;
  }
  v536 = v10[277];
  if ((v536 & 0x10000000) != 0)
    v537 = 0x40000000;
  else
    v537 = 0x80000000;
  if ((v536 & 0x20000000) != 0)
    v538 = v537;
  else
    v538 = v536 & 0xCFFFFFFF;
  if ((v538 & 0x40000000) == 0)
  {
    v539 = v5 + 5;
    if ((v538 & 0x80000000) != 0)
    {
      LOBYTE(v548) = -1;
      v549 = 2;
    }
    else
    {
      v540 = *(_QWORD *)(v13 + 2448);
      v541 = v540 + 520 * v538;
      v542 = *(_QWORD *)(v541 + 312);
      v543 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v541 + 336))
      {
        *(_BYTE *)(v541 + 336) = 0;
        v544 = *(unsigned int *)(v541 + 4);
        if ((_DWORD)v544)
        {
          v837 = v543;
          v875 = v542;
          v920 = v158;
          v545 = 0;
          v546 = (unsigned __int8 *)(v540 + 520 * v538 + 36);
          do
          {
            v547 = *v546;
            v546 += 28;
            v545 = sub_223A4EC9C(v545, ((unint64_t)v547 << 8) | 1, 0xFFu);
            --v544;
          }
          while (v544);
          v548 = v545 >> 8;
          if (!(_BYTE)v545)
            LOBYTE(v548) = -1;
          v542 = v875;
          v44 = a1;
          v158 = v920;
          v543 = v837;
        }
        else
        {
          LOBYTE(v548) = -1;
        }
        *(_BYTE *)(v540 + 520 * v538 + 338) = v548;
      }
      else
      {
        LOBYTE(v548) = *(_BYTE *)(v540 + 520 * v538 + 338);
      }
      v549 = v542 > v543;
    }
    v550 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v446, v539));
    a4.f32[2] = (float)v158;
    v551.i64[0] = 0x3F0000003F000000;
    v551.i64[1] = 0x3F0000003F000000;
    v552 = vmulq_n_f32(vaddq_f32(a4, v551), v550);
    v936 = v552.i32[2];
    v935 = v552.i64[0];
    sub_223FFDF1C(v12[2], &v935, v548, v549, v550);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v553 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v553;
    v13 = **v553;
    v446 = v6 + 2;
    v158 = a2[2] + 4;
  }
  v554 = v10[278];
  if ((v554 & 0x10000000) != 0)
    v555 = 0x40000000;
  else
    v555 = 0x80000000;
  if ((v554 & 0x20000000) != 0)
    v556 = v555;
  else
    v556 = v554 & 0xCFFFFFFF;
  if ((v556 & 0x40000000) == 0)
  {
    v557 = v5 + 6;
    if ((v556 & 0x80000000) != 0)
    {
      LOBYTE(v566) = -1;
      v567 = 2;
    }
    else
    {
      v558 = *(_QWORD *)(v13 + 2448);
      v559 = v558 + 520 * v556;
      v560 = *(_QWORD *)(v559 + 312);
      v561 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v559 + 336))
      {
        *(_BYTE *)(v559 + 336) = 0;
        v562 = *(unsigned int *)(v559 + 4);
        if ((_DWORD)v562)
        {
          v838 = v561;
          v876 = v560;
          v921 = v158;
          v563 = 0;
          v564 = (unsigned __int8 *)(v558 + 520 * v556 + 36);
          do
          {
            v565 = *v564;
            v564 += 28;
            v563 = sub_223A4EC9C(v563, ((unint64_t)v565 << 8) | 1, 0xFFu);
            --v562;
          }
          while (v562);
          v566 = v563 >> 8;
          if (!(_BYTE)v563)
            LOBYTE(v566) = -1;
          v560 = v876;
          v44 = a1;
          v158 = v921;
          v561 = v838;
        }
        else
        {
          LOBYTE(v566) = -1;
        }
        *(_BYTE *)(v558 + 520 * v556 + 338) = v566;
      }
      else
      {
        LOBYTE(v566) = *(_BYTE *)(v558 + 520 * v556 + 338);
      }
      v567 = v560 > v561;
    }
    v568 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v446, v557));
    a4.f32[2] = (float)v158;
    v569.i64[0] = 0x3F0000003F000000;
    v569.i64[1] = 0x3F0000003F000000;
    v570 = vmulq_n_f32(vaddq_f32(a4, v569), v568);
    v936 = v570.i32[2];
    v935 = v570.i64[0];
    sub_223FFDF1C(v12[2], &v935, v566, v567, v568);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v571 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v571;
    v13 = **v571;
    v446 = v6 + 2;
    v158 = a2[2] + 4;
  }
  v572 = v10[279];
  if ((v572 & 0x10000000) != 0)
    v573 = 0x40000000;
  else
    v573 = 0x80000000;
  if ((v572 & 0x20000000) != 0)
    v574 = v573;
  else
    v574 = v572 & 0xCFFFFFFF;
  if ((v574 & 0x40000000) == 0)
  {
    v575 = v5 + 7;
    if ((v574 & 0x80000000) != 0)
    {
      LOBYTE(v584) = -1;
      v585 = 2;
    }
    else
    {
      v576 = *(_QWORD *)(v13 + 2448);
      v577 = v576 + 520 * v574;
      v578 = *(_QWORD *)(v577 + 312);
      v579 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v577 + 336))
      {
        *(_BYTE *)(v577 + 336) = 0;
        v580 = *(unsigned int *)(v577 + 4);
        if ((_DWORD)v580)
        {
          v839 = v579;
          v877 = v578;
          v922 = v158;
          v581 = 0;
          v582 = (unsigned __int8 *)(v576 + 520 * v574 + 36);
          do
          {
            v583 = *v582;
            v582 += 28;
            v581 = sub_223A4EC9C(v581, ((unint64_t)v583 << 8) | 1, 0xFFu);
            --v580;
          }
          while (v580);
          v584 = v581 >> 8;
          if (!(_BYTE)v581)
            LOBYTE(v584) = -1;
          v578 = v877;
          v44 = a1;
          v158 = v922;
          v579 = v839;
        }
        else
        {
          LOBYTE(v584) = -1;
        }
        *(_BYTE *)(v576 + 520 * v574 + 338) = v584;
      }
      else
      {
        LOBYTE(v584) = *(_BYTE *)(v576 + 520 * v574 + 338);
      }
      v585 = v578 > v579;
    }
    v586 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v446, v575));
    a4.f32[2] = (float)v158;
    v587.i64[0] = 0x3F0000003F000000;
    v587.i64[1] = 0x3F0000003F000000;
    v588 = vmulq_n_f32(vaddq_f32(a4, v587), v586);
    v936 = v588.i32[2];
    v935 = v588.i64[0];
    sub_223FFDF1C(v12[2], &v935, v584, v585, v586);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v589 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v589;
    v13 = **v589;
    v158 = a2[2] + 4;
  }
  v590 = v6 + 3;
  v591 = v10[280];
  if ((v591 & 0x10000000) != 0)
    v592 = 0x40000000;
  else
    v592 = 0x80000000;
  if ((v591 & 0x20000000) != 0)
    v593 = v592;
  else
    v593 = v591 & 0xCFFFFFFF;
  if ((v593 & 0x40000000) == 0)
  {
    if ((v593 & 0x80000000) != 0)
    {
      LOBYTE(v602) = -1;
      v603 = 2;
    }
    else
    {
      v594 = *(_QWORD *)(v13 + 2448);
      v595 = v594 + 520 * v593;
      v596 = *(_QWORD *)(v595 + 312);
      v597 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v595 + 336))
      {
        *(_BYTE *)(v595 + 336) = 0;
        v598 = *(unsigned int *)(v595 + 4);
        if ((_DWORD)v598)
        {
          v840 = v597;
          v878 = v596;
          v923 = v158;
          v599 = 0;
          v600 = (unsigned __int8 *)(v594 + 520 * v593 + 36);
          do
          {
            v601 = *v600;
            v600 += 28;
            v599 = sub_223A4EC9C(v599, ((unint64_t)v601 << 8) | 1, 0xFFu);
            --v598;
          }
          while (v598);
          v602 = v599 >> 8;
          if (!(_BYTE)v599)
            LOBYTE(v602) = -1;
          v596 = v878;
          v44 = a1;
          v158 = v923;
          v597 = v840;
        }
        else
        {
          LOBYTE(v602) = -1;
        }
        *(_BYTE *)(v594 + 520 * v593 + 338) = v602;
      }
      else
      {
        LOBYTE(v602) = *(_BYTE *)(v594 + 520 * v593 + 338);
      }
      v603 = v596 > v597;
    }
    v604 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v590, v5));
    a4.f32[2] = (float)v158;
    v605.i64[0] = 0x3F0000003F000000;
    v605.i64[1] = 0x3F0000003F000000;
    v606 = vmulq_n_f32(vaddq_f32(a4, v605), v604);
    v936 = v606.i32[2];
    v935 = v606.i64[0];
    sub_223FFDF1C(v12[2], &v935, v602, v603, v604);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v607 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v607;
    v13 = **v607;
    v590 = v6 + 3;
    v158 = a2[2] + 4;
  }
  v608 = v10[281];
  if ((v608 & 0x10000000) != 0)
    v609 = 0x40000000;
  else
    v609 = 0x80000000;
  if ((v608 & 0x20000000) != 0)
    v610 = v609;
  else
    v610 = v608 & 0xCFFFFFFF;
  if ((v610 & 0x40000000) == 0)
  {
    v611 = v5 + 1;
    if ((v610 & 0x80000000) != 0)
    {
      LOBYTE(v620) = -1;
      v621 = 2;
    }
    else
    {
      v612 = *(_QWORD *)(v13 + 2448);
      v613 = v612 + 520 * v610;
      v614 = *(_QWORD *)(v613 + 312);
      v615 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v613 + 336))
      {
        *(_BYTE *)(v613 + 336) = 0;
        v616 = *(unsigned int *)(v613 + 4);
        if ((_DWORD)v616)
        {
          v841 = v615;
          v879 = v614;
          v924 = v158;
          v617 = 0;
          v618 = (unsigned __int8 *)(v612 + 520 * v610 + 36);
          do
          {
            v619 = *v618;
            v618 += 28;
            v617 = sub_223A4EC9C(v617, ((unint64_t)v619 << 8) | 1, 0xFFu);
            --v616;
          }
          while (v616);
          v620 = v617 >> 8;
          if (!(_BYTE)v617)
            LOBYTE(v620) = -1;
          v614 = v879;
          v44 = a1;
          v158 = v924;
          v615 = v841;
        }
        else
        {
          LOBYTE(v620) = -1;
        }
        *(_BYTE *)(v612 + 520 * v610 + 338) = v620;
      }
      else
      {
        LOBYTE(v620) = *(_BYTE *)(v612 + 520 * v610 + 338);
      }
      v621 = v614 > v615;
    }
    v622 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v590, v611));
    a4.f32[2] = (float)v158;
    v623.i64[0] = 0x3F0000003F000000;
    v623.i64[1] = 0x3F0000003F000000;
    v624 = vmulq_n_f32(vaddq_f32(a4, v623), v622);
    v936 = v624.i32[2];
    v935 = v624.i64[0];
    sub_223FFDF1C(v12[2], &v935, v620, v621, v622);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v625 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v625;
    v13 = **v625;
    v590 = v6 + 3;
    v158 = a2[2] + 4;
  }
  v626 = v10[282];
  if ((v626 & 0x10000000) != 0)
    v627 = 0x40000000;
  else
    v627 = 0x80000000;
  if ((v626 & 0x20000000) != 0)
    v628 = v627;
  else
    v628 = v626 & 0xCFFFFFFF;
  if ((v628 & 0x40000000) == 0)
  {
    v629 = v5 + 2;
    if ((v628 & 0x80000000) != 0)
    {
      LOBYTE(v638) = -1;
      v639 = 2;
    }
    else
    {
      v630 = *(_QWORD *)(v13 + 2448);
      v631 = v630 + 520 * v628;
      v632 = *(_QWORD *)(v631 + 312);
      v633 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v631 + 336))
      {
        *(_BYTE *)(v631 + 336) = 0;
        v634 = *(unsigned int *)(v631 + 4);
        if ((_DWORD)v634)
        {
          v842 = v633;
          v880 = v632;
          v925 = v158;
          v635 = 0;
          v636 = (unsigned __int8 *)(v630 + 520 * v628 + 36);
          do
          {
            v637 = *v636;
            v636 += 28;
            v635 = sub_223A4EC9C(v635, ((unint64_t)v637 << 8) | 1, 0xFFu);
            --v634;
          }
          while (v634);
          v638 = v635 >> 8;
          if (!(_BYTE)v635)
            LOBYTE(v638) = -1;
          v632 = v880;
          v44 = a1;
          v158 = v925;
          v633 = v842;
        }
        else
        {
          LOBYTE(v638) = -1;
        }
        *(_BYTE *)(v630 + 520 * v628 + 338) = v638;
      }
      else
      {
        LOBYTE(v638) = *(_BYTE *)(v630 + 520 * v628 + 338);
      }
      v639 = v632 > v633;
    }
    v640 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v590, v629));
    a4.f32[2] = (float)v158;
    v641.i64[0] = 0x3F0000003F000000;
    v641.i64[1] = 0x3F0000003F000000;
    v642 = vmulq_n_f32(vaddq_f32(a4, v641), v640);
    v936 = v642.i32[2];
    v935 = v642.i64[0];
    sub_223FFDF1C(v12[2], &v935, v638, v639, v640);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v643 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v643;
    v13 = **v643;
    v590 = v6 + 3;
    v158 = a2[2] + 4;
  }
  v644 = v10[283];
  if ((v644 & 0x10000000) != 0)
    v645 = 0x40000000;
  else
    v645 = 0x80000000;
  if ((v644 & 0x20000000) != 0)
    v646 = v645;
  else
    v646 = v644 & 0xCFFFFFFF;
  if ((v646 & 0x40000000) == 0)
  {
    v647 = v5 + 3;
    if ((v646 & 0x80000000) != 0)
    {
      LOBYTE(v656) = -1;
      v657 = 2;
    }
    else
    {
      v648 = *(_QWORD *)(v13 + 2448);
      v649 = v648 + 520 * v646;
      v650 = *(_QWORD *)(v649 + 312);
      v651 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v649 + 336))
      {
        *(_BYTE *)(v649 + 336) = 0;
        v652 = *(unsigned int *)(v649 + 4);
        if ((_DWORD)v652)
        {
          v843 = v651;
          v881 = v650;
          v926 = v158;
          v653 = 0;
          v654 = (unsigned __int8 *)(v648 + 520 * v646 + 36);
          do
          {
            v655 = *v654;
            v654 += 28;
            v653 = sub_223A4EC9C(v653, ((unint64_t)v655 << 8) | 1, 0xFFu);
            --v652;
          }
          while (v652);
          v656 = v653 >> 8;
          if (!(_BYTE)v653)
            LOBYTE(v656) = -1;
          v650 = v881;
          v44 = a1;
          v158 = v926;
          v651 = v843;
        }
        else
        {
          LOBYTE(v656) = -1;
        }
        *(_BYTE *)(v648 + 520 * v646 + 338) = v656;
      }
      else
      {
        LOBYTE(v656) = *(_BYTE *)(v648 + 520 * v646 + 338);
      }
      v657 = v650 > v651;
    }
    v658 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v590, v647));
    a4.f32[2] = (float)v158;
    v659.i64[0] = 0x3F0000003F000000;
    v659.i64[1] = 0x3F0000003F000000;
    v660 = vmulq_n_f32(vaddq_f32(a4, v659), v658);
    v936 = v660.i32[2];
    v935 = v660.i64[0];
    sub_223FFDF1C(v12[2], &v935, v656, v657, v658);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v661 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v661;
    v13 = **v661;
    v590 = v6 + 3;
    v158 = a2[2] + 4;
  }
  v662 = v10[284];
  if ((v662 & 0x10000000) != 0)
    v663 = 0x40000000;
  else
    v663 = 0x80000000;
  if ((v662 & 0x20000000) != 0)
    v664 = v663;
  else
    v664 = v662 & 0xCFFFFFFF;
  if ((v664 & 0x40000000) == 0)
  {
    v665 = v5 + 4;
    if ((v664 & 0x80000000) != 0)
    {
      LOBYTE(v674) = -1;
      v675 = 2;
    }
    else
    {
      v666 = *(_QWORD *)(v13 + 2448);
      v667 = v666 + 520 * v664;
      v668 = *(_QWORD *)(v667 + 312);
      v669 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v667 + 336))
      {
        *(_BYTE *)(v667 + 336) = 0;
        v670 = *(unsigned int *)(v667 + 4);
        if ((_DWORD)v670)
        {
          v844 = v669;
          v882 = v668;
          v927 = v158;
          v671 = 0;
          v672 = (unsigned __int8 *)(v666 + 520 * v664 + 36);
          do
          {
            v673 = *v672;
            v672 += 28;
            v671 = sub_223A4EC9C(v671, ((unint64_t)v673 << 8) | 1, 0xFFu);
            --v670;
          }
          while (v670);
          v674 = v671 >> 8;
          if (!(_BYTE)v671)
            LOBYTE(v674) = -1;
          v668 = v882;
          v44 = a1;
          v158 = v927;
          v669 = v844;
        }
        else
        {
          LOBYTE(v674) = -1;
        }
        *(_BYTE *)(v666 + 520 * v664 + 338) = v674;
      }
      else
      {
        LOBYTE(v674) = *(_BYTE *)(v666 + 520 * v664 + 338);
      }
      v675 = v668 > v669;
    }
    v676 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v590, v665));
    a4.f32[2] = (float)v158;
    v677.i64[0] = 0x3F0000003F000000;
    v677.i64[1] = 0x3F0000003F000000;
    v678 = vmulq_n_f32(vaddq_f32(a4, v677), v676);
    v936 = v678.i32[2];
    v935 = v678.i64[0];
    sub_223FFDF1C(v12[2], &v935, v674, v675, v676);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v679 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v679;
    v13 = **v679;
    v590 = v6 + 3;
    v158 = a2[2] + 4;
  }
  v680 = v10[285];
  if ((v680 & 0x10000000) != 0)
    v681 = 0x40000000;
  else
    v681 = 0x80000000;
  if ((v680 & 0x20000000) != 0)
    v682 = v681;
  else
    v682 = v680 & 0xCFFFFFFF;
  if ((v682 & 0x40000000) == 0)
  {
    v683 = v5 + 5;
    if ((v682 & 0x80000000) != 0)
    {
      LOBYTE(v692) = -1;
      v693 = 2;
    }
    else
    {
      v684 = *(_QWORD *)(v13 + 2448);
      v685 = v684 + 520 * v682;
      v686 = *(_QWORD *)(v685 + 312);
      v687 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v685 + 336))
      {
        *(_BYTE *)(v685 + 336) = 0;
        v688 = *(unsigned int *)(v685 + 4);
        if ((_DWORD)v688)
        {
          v845 = v687;
          v883 = v686;
          v928 = v158;
          v689 = 0;
          v690 = (unsigned __int8 *)(v684 + 520 * v682 + 36);
          do
          {
            v691 = *v690;
            v690 += 28;
            v689 = sub_223A4EC9C(v689, ((unint64_t)v691 << 8) | 1, 0xFFu);
            --v688;
          }
          while (v688);
          v692 = v689 >> 8;
          if (!(_BYTE)v689)
            LOBYTE(v692) = -1;
          v686 = v883;
          v44 = a1;
          v158 = v928;
          v687 = v845;
        }
        else
        {
          LOBYTE(v692) = -1;
        }
        *(_BYTE *)(v684 + 520 * v682 + 338) = v692;
      }
      else
      {
        LOBYTE(v692) = *(_BYTE *)(v684 + 520 * v682 + 338);
      }
      v693 = v686 > v687;
    }
    v694 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v590, v683));
    a4.f32[2] = (float)v158;
    v695.i64[0] = 0x3F0000003F000000;
    v695.i64[1] = 0x3F0000003F000000;
    v696 = vmulq_n_f32(vaddq_f32(a4, v695), v694);
    v936 = v696.i32[2];
    v935 = v696.i64[0];
    sub_223FFDF1C(v12[2], &v935, v692, v693, v694);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v697 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v697;
    v13 = **v697;
    v590 = v6 + 3;
    v158 = a2[2] + 4;
  }
  v698 = v10[286];
  if ((v698 & 0x10000000) != 0)
    v699 = 0x40000000;
  else
    v699 = 0x80000000;
  if ((v698 & 0x20000000) != 0)
    v700 = v699;
  else
    v700 = v698 & 0xCFFFFFFF;
  if ((v700 & 0x40000000) == 0)
  {
    v701 = v5 + 6;
    if ((v700 & 0x80000000) != 0)
    {
      LOBYTE(v710) = -1;
      v711 = 2;
    }
    else
    {
      v702 = *(_QWORD *)(v13 + 2448);
      v703 = v702 + 520 * v700;
      v704 = *(_QWORD *)(v703 + 312);
      v705 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v703 + 336))
      {
        *(_BYTE *)(v703 + 336) = 0;
        v706 = *(unsigned int *)(v703 + 4);
        if ((_DWORD)v706)
        {
          v846 = v705;
          v884 = v704;
          v929 = v158;
          v707 = 0;
          v708 = (unsigned __int8 *)(v702 + 520 * v700 + 36);
          do
          {
            v709 = *v708;
            v708 += 28;
            v707 = sub_223A4EC9C(v707, ((unint64_t)v709 << 8) | 1, 0xFFu);
            --v706;
          }
          while (v706);
          v710 = v707 >> 8;
          if (!(_BYTE)v707)
            LOBYTE(v710) = -1;
          v704 = v884;
          v44 = a1;
          v158 = v929;
          v705 = v846;
        }
        else
        {
          LOBYTE(v710) = -1;
        }
        *(_BYTE *)(v702 + 520 * v700 + 338) = v710;
      }
      else
      {
        LOBYTE(v710) = *(_BYTE *)(v702 + 520 * v700 + 338);
      }
      v711 = v704 > v705;
    }
    v712 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v590, v701));
    a4.f32[2] = (float)v158;
    v713.i64[0] = 0x3F0000003F000000;
    v713.i64[1] = 0x3F0000003F000000;
    v714 = vmulq_n_f32(vaddq_f32(a4, v713), v712);
    v936 = v714.i32[2];
    v935 = v714.i64[0];
    sub_223FFDF1C(v12[2], &v935, v710, v711, v712);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v715 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v715;
    v13 = **v715;
    v590 = v6 + 3;
    v158 = a2[2] + 4;
  }
  v716 = v10[287];
  if ((v716 & 0x10000000) != 0)
    v717 = 0x40000000;
  else
    v717 = 0x80000000;
  if ((v716 & 0x20000000) != 0)
    v718 = v717;
  else
    v718 = v716 & 0xCFFFFFFF;
  if ((v718 & 0x40000000) == 0)
  {
    v719 = v5 + 7;
    if ((v718 & 0x80000000) != 0)
    {
      LOBYTE(v728) = -1;
      v729 = 2;
    }
    else
    {
      v720 = *(_QWORD *)(v13 + 2448);
      v721 = v720 + 520 * v718;
      v722 = *(_QWORD *)(v721 + 312);
      v723 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v721 + 336))
      {
        *(_BYTE *)(v721 + 336) = 0;
        v724 = *(unsigned int *)(v721 + 4);
        if ((_DWORD)v724)
        {
          v847 = v723;
          v885 = v722;
          v930 = v158;
          v725 = 0;
          v726 = (unsigned __int8 *)(v720 + 520 * v718 + 36);
          do
          {
            v727 = *v726;
            v726 += 28;
            v725 = sub_223A4EC9C(v725, ((unint64_t)v727 << 8) | 1, 0xFFu);
            --v724;
          }
          while (v724);
          v728 = v725 >> 8;
          if (!(_BYTE)v725)
            LOBYTE(v728) = -1;
          v722 = v885;
          v44 = a1;
          v158 = v930;
          v723 = v847;
        }
        else
        {
          LOBYTE(v728) = -1;
        }
        *(_BYTE *)(v720 + 520 * v718 + 338) = v728;
      }
      else
      {
        LOBYTE(v728) = *(_BYTE *)(v720 + 520 * v718 + 338);
      }
      v729 = v722 > v723;
    }
    v730 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v590, v719));
    a4.f32[2] = (float)v158;
    v731.i64[0] = 0x3F0000003F000000;
    v731.i64[1] = 0x3F0000003F000000;
    v732 = vmulq_n_f32(vaddq_f32(a4, v731), v730);
    v936 = v732.i32[2];
    v935 = v732.i64[0];
    sub_223FFDF1C(v12[2], &v935, v728, v729, v730);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v733 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v733;
    v13 = **v733;
    v158 = a2[2] + 4;
  }
  v734 = v6 + 4;
  v735 = v10[288];
  if ((v735 & 0x10000000) != 0)
    v736 = 0x40000000;
  else
    v736 = 0x80000000;
  if ((v735 & 0x20000000) != 0)
    v737 = v736;
  else
    v737 = v735 & 0xCFFFFFFF;
  if ((v737 & 0x40000000) == 0)
  {
    if ((v737 & 0x80000000) != 0)
    {
      LOBYTE(v746) = -1;
      v747 = 2;
    }
    else
    {
      v738 = *(_QWORD *)(v13 + 2448);
      v739 = v738 + 520 * v737;
      v740 = *(_QWORD *)(v739 + 312);
      v741 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v739 + 336))
      {
        *(_BYTE *)(v739 + 336) = 0;
        v742 = *(unsigned int *)(v739 + 4);
        if ((_DWORD)v742)
        {
          v848 = v741;
          v886 = v740;
          v931 = v158;
          v743 = 0;
          v744 = (unsigned __int8 *)(v738 + 520 * v737 + 36);
          do
          {
            v745 = *v744;
            v744 += 28;
            v743 = sub_223A4EC9C(v743, ((unint64_t)v745 << 8) | 1, 0xFFu);
            --v742;
          }
          while (v742);
          v746 = v743 >> 8;
          if (!(_BYTE)v743)
            LOBYTE(v746) = -1;
          v740 = v886;
          v44 = a1;
          v158 = v931;
          v741 = v848;
        }
        else
        {
          LOBYTE(v746) = -1;
        }
        *(_BYTE *)(v738 + 520 * v737 + 338) = v746;
      }
      else
      {
        LOBYTE(v746) = *(_BYTE *)(v738 + 520 * v737 + 338);
      }
      v747 = v740 > v741;
    }
    v748 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v734, v5));
    a4.f32[2] = (float)v158;
    v749.i64[0] = 0x3F0000003F000000;
    v749.i64[1] = 0x3F0000003F000000;
    v750 = vmulq_n_f32(vaddq_f32(a4, v749), v748);
    v936 = v750.i32[2];
    v935 = v750.i64[0];
    sub_223FFDF1C(v12[2], &v935, v746, v747, v748);
    v5 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v751 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v751;
    v13 = **v751;
    v734 = a2[1] + 4;
    v158 = a2[2] + 4;
  }
  v752 = v10[289];
  if ((v752 & 0x10000000) != 0)
    v753 = 0x40000000;
  else
    v753 = 0x80000000;
  if ((v752 & 0x20000000) != 0)
    v754 = v753;
  else
    v754 = v752 & 0xCFFFFFFF;
  if ((v754 & 0x40000000) == 0)
  {
    v755 = v5 + 1;
    if ((v754 & 0x80000000) != 0)
    {
      LOBYTE(v764) = -1;
      v765 = 2;
    }
    else
    {
      v756 = *(_QWORD *)(v13 + 2448);
      v757 = v756 + 520 * v754;
      v758 = *(_QWORD *)(v757 + 312);
      v759 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v757 + 336))
      {
        *(_BYTE *)(v757 + 336) = 0;
        v760 = *(unsigned int *)(v757 + 4);
        if ((_DWORD)v760)
        {
          v849 = v759;
          v887 = v758;
          v932 = v158;
          v761 = 0;
          v762 = (unsigned __int8 *)(v756 + 520 * v754 + 36);
          do
          {
            v763 = *v762;
            v762 += 28;
            v761 = sub_223A4EC9C(v761, ((unint64_t)v763 << 8) | 1, 0xFFu);
            --v760;
          }
          while (v760);
          v764 = v761 >> 8;
          if (!(_BYTE)v761)
            LOBYTE(v764) = -1;
          v758 = v887;
          v44 = a1;
          v158 = v932;
          v759 = v849;
        }
        else
        {
          LOBYTE(v764) = -1;
        }
        *(_BYTE *)(v756 + 520 * v754 + 338) = v764;
      }
      else
      {
        LOBYTE(v764) = *(_BYTE *)(v756 + 520 * v754 + 338);
      }
      v765 = v758 > v759;
    }
    v766 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v734, v755));
    a4.f32[2] = (float)v158;
    v767.i64[0] = 0x3F0000003F000000;
    v767.i64[1] = 0x3F0000003F000000;
    v768 = vmulq_n_f32(vaddq_f32(a4, v767), v766);
    v936 = v768.i32[2];
    v935 = v768.i64[0];
    sub_223FFDF1C(v12[2], &v935, v764, v765, v766);
    v5 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v769 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v769;
    v13 = **v769;
    v734 = a2[1] + 4;
    v158 = a2[2] + 4;
  }
  v770 = v10[290];
  if ((v770 & 0x10000000) != 0)
    v771 = 0x40000000;
  else
    v771 = 0x80000000;
  if ((v770 & 0x20000000) != 0)
    v772 = v771;
  else
    v772 = v770 & 0xCFFFFFFF;
  if ((v772 & 0x40000000) == 0)
  {
    v773 = v5 + 2;
    if ((v772 & 0x80000000) != 0)
    {
      LOBYTE(v782) = -1;
      v783 = 2;
    }
    else
    {
      v774 = *(_QWORD *)(v13 + 2448);
      v775 = v774 + 520 * v772;
      v776 = *(_QWORD *)(v775 + 312);
      v777 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v775 + 336))
      {
        *(_BYTE *)(v775 + 336) = 0;
        v778 = *(unsigned int *)(v775 + 4);
        if ((_DWORD)v778)
        {
          v850 = v777;
          v888 = v776;
          v933 = v158;
          v779 = 0;
          v780 = (unsigned __int8 *)(v774 + 520 * v772 + 36);
          do
          {
            v781 = *v780;
            v780 += 28;
            v779 = sub_223A4EC9C(v779, ((unint64_t)v781 << 8) | 1, 0xFFu);
            --v778;
          }
          while (v778);
          v782 = v779 >> 8;
          if (!(_BYTE)v779)
            LOBYTE(v782) = -1;
          v776 = v888;
          v44 = a1;
          v158 = v933;
          v777 = v850;
        }
        else
        {
          LOBYTE(v782) = -1;
        }
        *(_BYTE *)(v774 + 520 * v772 + 338) = v782;
      }
      else
      {
        LOBYTE(v782) = *(_BYTE *)(v774 + 520 * v772 + 338);
      }
      v783 = v776 > v777;
    }
    v784 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v734, v773));
    a4.f32[2] = (float)v158;
    v785.i64[0] = 0x3F0000003F000000;
    v785.i64[1] = 0x3F0000003F000000;
    v786 = vmulq_n_f32(vaddq_f32(a4, v785), v784);
    v936 = v786.i32[2];
    v935 = v786.i64[0];
    sub_223FFDF1C(v12[2], &v935, v782, v783, v784);
    v5 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v44 + 8);
    v787 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v44 + 16) + 8);
    v12 = *v787;
    v13 = **v787;
    v734 = a2[1] + 4;
    v158 = a2[2] + 4;
  }
  v788 = v10[291];
  if ((v788 & 0x10000000) != 0)
    v789 = 0x40000000;
  else
    v789 = 0x80000000;
  if ((v788 & 0x20000000) != 0)
    v790 = v789;
  else
    v790 = v788 & 0xCFFFFFFF;
  if ((v790 & 0x40000000) == 0)
  {
    v791 = v5 + 3;
    if ((v790 & 0x80000000) != 0)
    {
      LOBYTE(v800) = -1;
      v801 = 2;
    }
    else
    {
      v792 = *(_QWORD *)(v13 + 2448);
      v793 = v792 + 520 * v790;
      v794 = *(_QWORD *)(v793 + 312);
      v795 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v793 + 336))
      {
        *(_BYTE *)(v793 + 336) = 0;
        v796 = *(unsigned int *)(v793 + 4);
        if ((_DWORD)v796)
        {
          v851 = v795;
          v889 = v794;
          v934 = v158;
          v797 = 0;
          v798 = (unsigned __int8 *)(v792 + 520 * v790 + 36);
          do
          {
            v799 = *v798;
            v798 += 28;
            v797 = sub_223A4EC9C(v797, ((unint64_t)v799 << 8) | 1, 0xFFu);
            --v796;
          }
          while (v796);
          v800 = v797 >> 8;
          if (!(_BYTE)v797)
            LOBYTE(v800) = -1;
          v794 = v889;
          v44 = a1;
          v158 = v934;
          v795 = v851;
        }
        else
        {
          LOBYTE(v800) = -1;
        }
        *(_BYTE *)(v792 + 520 * v790 + 338) = v800;
      }
      else
      {
        LOBYTE(v800) = *(_BYTE *)(v792 + 520 * v790 + 338);
      }
      v801 = v794 > v795;
    }
    v802 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v734, v791));
    a4.f32[2] = (float)v158;
    v803.i64[0] = 0x3F0000003F000000;
    v803.i64[1] = 0x3F0000003F000000;
    v804 = vmulq_n_f32(vaddq_f32(a4, v803), v802);
    v936 = v804.i32[2];
    v935 = v804.i64[0];
    sub_223FFDF1C(v12[2], &v935, v800, v801, v802);
  }
  sub_223D733F4(v44, a2, a3, a4);
}

void sub_223D733F4(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t **v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t **v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  float v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t **v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t **v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unint64_t v98;
  int v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  uint64_t **v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  unsigned int v115;
  unint64_t v116;
  int v117;
  float v118;
  float32x4_t v119;
  float32x4_t v120;
  uint64_t **v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unsigned __int8 *v132;
  unsigned int v133;
  unint64_t v134;
  int v135;
  float v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t **v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unsigned __int8 *v150;
  unsigned int v151;
  unint64_t v152;
  int v153;
  float v154;
  float32x4_t v155;
  float32x4_t v156;
  uint64_t **v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned __int8 *v168;
  unsigned int v169;
  unint64_t v170;
  int v171;
  float v172;
  float32x4_t v173;
  float32x4_t v174;
  uint64_t **v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unsigned __int8 *v186;
  unsigned int v187;
  unint64_t v188;
  int v189;
  float v190;
  float32x4_t v191;
  float32x4_t v192;
  uint64_t **v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unsigned int v205;
  unint64_t v206;
  int v207;
  float v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t **v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unsigned __int8 *v222;
  unsigned int v223;
  unint64_t v224;
  int v225;
  float v226;
  float32x4_t v227;
  float32x4_t v228;
  uint64_t **v229;
  int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unsigned __int8 *v240;
  unsigned int v241;
  unint64_t v242;
  int v243;
  float v244;
  float32x4_t v245;
  float32x4_t v246;
  uint64_t **v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unsigned __int8 *v258;
  unsigned int v259;
  unint64_t v260;
  int v261;
  float v262;
  float32x4_t v263;
  float32x4_t v264;
  uint64_t **v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unsigned __int8 *v276;
  unsigned int v277;
  unint64_t v278;
  int v279;
  float v280;
  float32x4_t v281;
  float32x4_t v282;
  uint64_t **v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unsigned __int8 *v294;
  unsigned int v295;
  unint64_t v296;
  int v297;
  float v298;
  float32x4_t v299;
  float32x4_t v300;
  uint64_t **v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unsigned __int8 *v312;
  unsigned int v313;
  unint64_t v314;
  int v315;
  float v316;
  float32x4_t v317;
  float32x4_t v318;
  uint64_t **v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unsigned int v331;
  unint64_t v332;
  int v333;
  float v334;
  float32x4_t v335;
  float32x4_t v336;
  uint64_t **v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unsigned __int8 *v348;
  unsigned int v349;
  unint64_t v350;
  int v351;
  float v352;
  float32x4_t v353;
  float32x4_t v354;
  uint64_t **v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unsigned __int8 *v366;
  unsigned int v367;
  unint64_t v368;
  int v369;
  float v370;
  float32x4_t v371;
  float32x4_t v372;
  uint64_t **v373;
  int v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unsigned __int8 *v384;
  unsigned int v385;
  unint64_t v386;
  int v387;
  float v388;
  float32x4_t v389;
  float32x4_t v390;
  uint64_t **v391;
  int v392;
  unsigned int v393;
  unsigned int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unsigned __int8 *v402;
  unsigned int v403;
  unint64_t v404;
  int v405;
  float v406;
  float32x4_t v407;
  float32x4_t v408;
  uint64_t **v409;
  int v410;
  unsigned int v411;
  unsigned int v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  unsigned __int8 *v420;
  unsigned int v421;
  unint64_t v422;
  int v423;
  float v424;
  float32x4_t v425;
  float32x4_t v426;
  uint64_t **v427;
  int v428;
  unsigned int v429;
  unsigned int v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unsigned __int8 *v438;
  unsigned int v439;
  unint64_t v440;
  int v441;
  float v442;
  float32x4_t v443;
  float32x4_t v444;
  uint64_t **v445;
  int v446;
  unsigned int v447;
  unsigned int v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unsigned int v457;
  unint64_t v458;
  int v459;
  float v460;
  float32x4_t v461;
  float32x4_t v462;
  uint64_t **v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unsigned __int8 *v474;
  unsigned int v475;
  unint64_t v476;
  int v477;
  float v478;
  float32x4_t v479;
  float32x4_t v480;
  uint64_t **v481;
  int v482;
  unsigned int v483;
  unsigned int v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unsigned __int8 *v492;
  unsigned int v493;
  unint64_t v494;
  int v495;
  float v496;
  float32x4_t v497;
  float32x4_t v498;
  uint64_t **v499;
  int v500;
  unsigned int v501;
  unsigned int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unsigned __int8 *v510;
  unsigned int v511;
  unint64_t v512;
  int v513;
  float v514;
  float32x4_t v515;
  float32x4_t v516;
  uint64_t **v517;
  int v518;
  int v519;
  unsigned int v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unsigned __int8 *v528;
  unsigned int v529;
  unint64_t v530;
  int v531;
  float v532;
  float32x4_t v533;
  float32x4_t v534;
  uint64_t **v535;
  int v536;
  unsigned int v537;
  unsigned int v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  unsigned __int8 *v546;
  unsigned int v547;
  unint64_t v548;
  int v549;
  float v550;
  float32x4_t v551;
  float32x4_t v552;
  uint64_t **v553;
  int v554;
  unsigned int v555;
  unsigned int v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  unsigned __int8 *v564;
  unsigned int v565;
  unint64_t v566;
  int v567;
  float v568;
  float32x4_t v569;
  float32x4_t v570;
  uint64_t **v571;
  int v572;
  unsigned int v573;
  unsigned int v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unsigned int v583;
  unint64_t v584;
  int v585;
  float v586;
  float32x4_t v587;
  float32x4_t v588;
  uint64_t **v589;
  int v590;
  unsigned int v591;
  unsigned int v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unsigned __int8 *v600;
  unsigned int v601;
  unint64_t v602;
  int v603;
  float v604;
  float32x4_t v605;
  float32x4_t v606;
  uint64_t **v607;
  int v608;
  unsigned int v609;
  unsigned int v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  unsigned __int8 *v618;
  unsigned int v619;
  unint64_t v620;
  int v621;
  float v622;
  float32x4_t v623;
  float32x4_t v624;
  uint64_t **v625;
  int v626;
  unsigned int v627;
  unsigned int v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unint64_t v635;
  unsigned __int8 *v636;
  unsigned int v637;
  unint64_t v638;
  int v639;
  float v640;
  float32x4_t v641;
  float32x4_t v642;
  uint64_t **v643;
  int v644;
  unsigned int v645;
  unsigned int v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  unsigned __int8 *v654;
  unsigned int v655;
  unint64_t v656;
  int v657;
  float v658;
  float32x4_t v659;
  float32x4_t v660;
  uint64_t **v661;
  int v662;
  int v663;
  unsigned int v664;
  unsigned int v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  unsigned __int8 *v672;
  unsigned int v673;
  unint64_t v674;
  int v675;
  float v676;
  float32x4_t v677;
  float32x4_t v678;
  uint64_t **v679;
  int v680;
  unsigned int v681;
  unsigned int v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  unsigned __int8 *v690;
  unsigned int v691;
  unint64_t v692;
  int v693;
  float v694;
  float32x4_t v695;
  float32x4_t v696;
  uint64_t **v697;
  int v698;
  unsigned int v699;
  unsigned int v700;
  int v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  unsigned __int8 *v708;
  unsigned int v709;
  unint64_t v710;
  int v711;
  float v712;
  float32x4_t v713;
  float32x4_t v714;
  uint64_t **v715;
  int v716;
  unsigned int v717;
  unsigned int v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  unint64_t v725;
  unsigned __int8 *v726;
  unsigned int v727;
  unint64_t v728;
  int v729;
  float v730;
  float32x4_t v731;
  float32x4_t v732;
  uint64_t **v733;
  int v734;
  unsigned int v735;
  unsigned int v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unint64_t v743;
  unsigned __int8 *v744;
  unsigned int v745;
  unint64_t v746;
  int v747;
  float v748;
  float32x4_t v749;
  float32x4_t v750;
  uint64_t **v751;
  int v752;
  unsigned int v753;
  unsigned int v754;
  int v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  unint64_t v761;
  unsigned __int8 *v762;
  unsigned int v763;
  unint64_t v764;
  int v765;
  float v766;
  float32x4_t v767;
  float32x4_t v768;
  uint64_t **v769;
  int v770;
  unsigned int v771;
  unsigned int v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  unsigned __int8 *v780;
  unsigned int v781;
  unint64_t v782;
  int v783;
  float v784;
  float32x4_t v785;
  float32x4_t v786;
  uint64_t **v787;
  int v788;
  unsigned int v789;
  unsigned int v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  unint64_t v797;
  unsigned __int8 *v798;
  unsigned int v799;
  unint64_t v800;
  int v801;
  float v802;
  float32x4_t v803;
  float32x4_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  int v890;
  int v891;
  int v892;
  int v893;
  int v894;
  int v895;
  int v896;
  int v897;
  int v898;
  int v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  int v938;
  int v939;
  uint64_t v941;
  __int32 v942;

  v5 = a1;
  v6 = *a2;
  v7 = a2[1];
  v8 = v7 + 4;
  v9 = a2[2];
  v10 = v9 + 4;
  v11 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v12 = v11[292];
  v13 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v14 = *v13;
  if ((v12 & 0x10000000) != 0)
    v15 = 0x40000000;
  else
    v15 = 0x80000000;
  if ((v12 & 0x20000000) != 0)
    v16 = v15;
  else
    v16 = v12 & 0xCFFFFFFF;
  if ((v16 & 0x40000000) == 0)
  {
    v17 = v6 + 4;
    if ((v16 & 0x80000000) != 0)
    {
      LOBYTE(v26) = -1;
      v27 = 2;
    }
    else
    {
      v18 = *(_QWORD *)(v14 + 2448);
      v19 = v18 + 520 * v16;
      v20 = *(_QWORD *)(v19 + 312);
      v21 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v19 + 336))
      {
        *(_BYTE *)(v19 + 336) = 0;
        v22 = *(unsigned int *)(v19 + 4);
        if ((_DWORD)v22)
        {
          v809 = v21;
          v853 = v20;
          v896 = v9 + 4;
          v23 = 0;
          v24 = (unsigned __int8 *)(v18 + 520 * v16 + 36);
          do
          {
            v25 = *v24;
            v24 += 28;
            v23 = sub_223A4EC9C(v23, ((unint64_t)v25 << 8) | 1, 0xFFu);
            --v22;
          }
          while (v22);
          v26 = v23 >> 8;
          if (!(_BYTE)v23)
            LOBYTE(v26) = -1;
          v10 = v896;
          v21 = v809;
          v20 = v853;
        }
        else
        {
          LOBYTE(v26) = -1;
        }
        *(_BYTE *)(v18 + 520 * v16 + 338) = v26;
        v5 = a1;
      }
      else
      {
        LOBYTE(v26) = *(_BYTE *)(v18 + 520 * v16 + 338);
      }
      v27 = v20 > v21;
    }
    a4.f32[0] = (float)v17;
    a4.f32[1] = (float)v8;
    v28 = *(float *)(v14 + 144);
    a4.f32[2] = (float)v10;
    v29.i64[0] = 0x3F0000003F000000;
    v29.i64[1] = 0x3F0000003F000000;
    v30 = vmulq_n_f32(vaddq_f32(a4, v29), v28);
    v942 = v30.i32[2];
    v941 = v30.i64[0];
    sub_223FFDF1C(v13[2], &v941, v26, v27, v28);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v31 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v31;
    v14 = **v31;
    v8 = v7 + 4;
    v10 = v9 + 4;
  }
  v32 = v11[293];
  if ((v32 & 0x10000000) != 0)
    v33 = 0x40000000;
  else
    v33 = 0x80000000;
  if ((v32 & 0x20000000) != 0)
    v34 = v33;
  else
    v34 = v32 & 0xCFFFFFFF;
  if ((v34 & 0x40000000) == 0)
  {
    v35 = v6 + 5;
    if ((v34 & 0x80000000) != 0)
    {
      LOBYTE(v44) = -1;
      v45 = 2;
    }
    else
    {
      v36 = *(_QWORD *)(v14 + 2448);
      v37 = v36 + 520 * v34;
      v38 = *(_QWORD *)(v37 + 312);
      v39 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v37 + 336))
      {
        *(_BYTE *)(v37 + 336) = 0;
        v40 = *(unsigned int *)(v37 + 4);
        if ((_DWORD)v40)
        {
          v810 = v39;
          v854 = v38;
          v897 = v10;
          v41 = 0;
          v42 = (unsigned __int8 *)(v36 + 520 * v34 + 36);
          do
          {
            v43 = *v42;
            v42 += 28;
            v41 = sub_223A4EC9C(v41, ((unint64_t)v43 << 8) | 1, 0xFFu);
            --v40;
          }
          while (v40);
          v44 = v41 >> 8;
          if (!(_BYTE)v41)
            LOBYTE(v44) = -1;
          v10 = v897;
          v39 = v810;
          v38 = v854;
        }
        else
        {
          LOBYTE(v44) = -1;
        }
        *(_BYTE *)(v36 + 520 * v34 + 338) = v44;
        v5 = a1;
      }
      else
      {
        LOBYTE(v44) = *(_BYTE *)(v36 + 520 * v34 + 338);
      }
      v45 = v38 > v39;
    }
    v46 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v35));
    a4.f32[2] = (float)v10;
    v47.i64[0] = 0x3F0000003F000000;
    v47.i64[1] = 0x3F0000003F000000;
    v48 = vmulq_n_f32(vaddq_f32(a4, v47), v46);
    v942 = v48.i32[2];
    v941 = v48.i64[0];
    sub_223FFDF1C(v13[2], &v941, v44, v45, v46);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v49 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v49;
    v14 = **v49;
    v8 = v7 + 4;
    v10 = v9 + 4;
  }
  v50 = v11[294];
  if ((v50 & 0x10000000) != 0)
    v51 = 0x40000000;
  else
    v51 = 0x80000000;
  if ((v50 & 0x20000000) != 0)
    v52 = v51;
  else
    v52 = v50 & 0xCFFFFFFF;
  if ((v52 & 0x40000000) == 0)
  {
    v53 = v6 + 6;
    if ((v52 & 0x80000000) != 0)
    {
      LOBYTE(v62) = -1;
      v63 = 2;
    }
    else
    {
      v54 = *(_QWORD *)(v14 + 2448);
      v55 = v54 + 520 * v52;
      v56 = *(_QWORD *)(v55 + 312);
      v57 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v55 + 336))
      {
        *(_BYTE *)(v55 + 336) = 0;
        v58 = *(unsigned int *)(v55 + 4);
        if ((_DWORD)v58)
        {
          v811 = v57;
          v855 = v56;
          v898 = v10;
          v59 = 0;
          v60 = (unsigned __int8 *)(v54 + 520 * v52 + 36);
          do
          {
            v61 = *v60;
            v60 += 28;
            v59 = sub_223A4EC9C(v59, ((unint64_t)v61 << 8) | 1, 0xFFu);
            --v58;
          }
          while (v58);
          v62 = v59 >> 8;
          if (!(_BYTE)v59)
            LOBYTE(v62) = -1;
          v10 = v898;
          v57 = v811;
          v56 = v855;
        }
        else
        {
          LOBYTE(v62) = -1;
        }
        *(_BYTE *)(v54 + 520 * v52 + 338) = v62;
        v5 = a1;
      }
      else
      {
        LOBYTE(v62) = *(_BYTE *)(v54 + 520 * v52 + 338);
      }
      v63 = v56 > v57;
    }
    v64 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v53));
    a4.f32[2] = (float)v10;
    v65.i64[0] = 0x3F0000003F000000;
    v65.i64[1] = 0x3F0000003F000000;
    v66 = vmulq_n_f32(vaddq_f32(a4, v65), v64);
    v942 = v66.i32[2];
    v941 = v66.i64[0];
    sub_223FFDF1C(v13[2], &v941, v62, v63, v64);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v67 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v67;
    v14 = **v67;
    v8 = v7 + 4;
    v10 = v9 + 4;
  }
  v68 = v11[295];
  if ((v68 & 0x10000000) != 0)
    v69 = 0x40000000;
  else
    v69 = 0x80000000;
  if ((v68 & 0x20000000) != 0)
    v70 = v69;
  else
    v70 = v68 & 0xCFFFFFFF;
  if ((v70 & 0x40000000) == 0)
  {
    v71 = v6 + 7;
    if ((v70 & 0x80000000) != 0)
    {
      LOBYTE(v80) = -1;
      v81 = 2;
    }
    else
    {
      v72 = *(_QWORD *)(v14 + 2448);
      v73 = v72 + 520 * v70;
      v74 = *(_QWORD *)(v73 + 312);
      v75 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v73 + 336))
      {
        *(_BYTE *)(v73 + 336) = 0;
        v76 = *(unsigned int *)(v73 + 4);
        if ((_DWORD)v76)
        {
          v812 = v75;
          v856 = v74;
          v899 = v10;
          v77 = 0;
          v78 = (unsigned __int8 *)(v72 + 520 * v70 + 36);
          do
          {
            v79 = *v78;
            v78 += 28;
            v77 = sub_223A4EC9C(v77, ((unint64_t)v79 << 8) | 1, 0xFFu);
            --v76;
          }
          while (v76);
          v80 = v77 >> 8;
          if (!(_BYTE)v77)
            LOBYTE(v80) = -1;
          v10 = v899;
          v75 = v812;
          v74 = v856;
        }
        else
        {
          LOBYTE(v80) = -1;
        }
        *(_BYTE *)(v72 + 520 * v70 + 338) = v80;
        v5 = a1;
      }
      else
      {
        LOBYTE(v80) = *(_BYTE *)(v72 + 520 * v70 + 338);
      }
      v81 = v74 > v75;
    }
    v82 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v71));
    a4.f32[2] = (float)v10;
    v83.i64[0] = 0x3F0000003F000000;
    v83.i64[1] = 0x3F0000003F000000;
    v84 = vmulq_n_f32(vaddq_f32(a4, v83), v82);
    v942 = v84.i32[2];
    v941 = v84.i64[0];
    sub_223FFDF1C(v13[2], &v941, v80, v81, v82);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v85 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v85;
    v14 = **v85;
    v10 = v9 + 4;
  }
  v86 = v7 + 5;
  v87 = v11[296];
  if ((v87 & 0x10000000) != 0)
    v88 = 0x40000000;
  else
    v88 = 0x80000000;
  if ((v87 & 0x20000000) != 0)
    v89 = v88;
  else
    v89 = v87 & 0xCFFFFFFF;
  if ((v89 & 0x40000000) == 0)
  {
    if ((v89 & 0x80000000) != 0)
    {
      LOBYTE(v98) = -1;
      v99 = 2;
    }
    else
    {
      v90 = *(_QWORD *)(v14 + 2448);
      v91 = v90 + 520 * v89;
      v92 = *(_QWORD *)(v91 + 312);
      v93 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v91 + 336))
      {
        *(_BYTE *)(v91 + 336) = 0;
        v94 = *(unsigned int *)(v91 + 4);
        if ((_DWORD)v94)
        {
          v813 = v93;
          v857 = v92;
          v900 = v10;
          v95 = 0;
          v96 = (unsigned __int8 *)(v90 + 520 * v89 + 36);
          do
          {
            v97 = *v96;
            v96 += 28;
            v95 = sub_223A4EC9C(v95, ((unint64_t)v97 << 8) | 1, 0xFFu);
            --v94;
          }
          while (v94);
          v98 = v95 >> 8;
          if (!(_BYTE)v95)
            LOBYTE(v98) = -1;
          v10 = v900;
          v93 = v813;
          v92 = v857;
        }
        else
        {
          LOBYTE(v98) = -1;
        }
        *(_BYTE *)(v90 + 520 * v89 + 338) = v98;
        v5 = a1;
      }
      else
      {
        LOBYTE(v98) = *(_BYTE *)(v90 + 520 * v89 + 338);
      }
      v99 = v92 > v93;
    }
    v100 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v6));
    a4.f32[2] = (float)v10;
    v101.i64[0] = 0x3F0000003F000000;
    v101.i64[1] = 0x3F0000003F000000;
    v102 = vmulq_n_f32(vaddq_f32(a4, v101), v100);
    v942 = v102.i32[2];
    v941 = v102.i64[0];
    sub_223FFDF1C(v13[2], &v941, v98, v99, v100);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v103 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v103;
    v14 = **v103;
    v86 = v7 + 5;
    v10 = v9 + 4;
  }
  v104 = v11[297];
  if ((v104 & 0x10000000) != 0)
    v105 = 0x40000000;
  else
    v105 = 0x80000000;
  if ((v104 & 0x20000000) != 0)
    v106 = v105;
  else
    v106 = v104 & 0xCFFFFFFF;
  if ((v106 & 0x40000000) == 0)
  {
    v107 = v6 + 1;
    if ((v106 & 0x80000000) != 0)
    {
      LOBYTE(v116) = -1;
      v117 = 2;
    }
    else
    {
      v108 = *(_QWORD *)(v14 + 2448);
      v109 = v108 + 520 * v106;
      v110 = *(_QWORD *)(v109 + 312);
      v111 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v109 + 336))
      {
        *(_BYTE *)(v109 + 336) = 0;
        v112 = *(unsigned int *)(v109 + 4);
        if ((_DWORD)v112)
        {
          v814 = v111;
          v858 = v110;
          v901 = v10;
          v113 = 0;
          v114 = (unsigned __int8 *)(v108 + 520 * v106 + 36);
          do
          {
            v115 = *v114;
            v114 += 28;
            v113 = sub_223A4EC9C(v113, ((unint64_t)v115 << 8) | 1, 0xFFu);
            --v112;
          }
          while (v112);
          v116 = v113 >> 8;
          if (!(_BYTE)v113)
            LOBYTE(v116) = -1;
          v10 = v901;
          v111 = v814;
          v110 = v858;
        }
        else
        {
          LOBYTE(v116) = -1;
        }
        *(_BYTE *)(v108 + 520 * v106 + 338) = v116;
        v5 = a1;
      }
      else
      {
        LOBYTE(v116) = *(_BYTE *)(v108 + 520 * v106 + 338);
      }
      v117 = v110 > v111;
    }
    v118 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v107));
    a4.f32[2] = (float)v10;
    v119.i64[0] = 0x3F0000003F000000;
    v119.i64[1] = 0x3F0000003F000000;
    v120 = vmulq_n_f32(vaddq_f32(a4, v119), v118);
    v942 = v120.i32[2];
    v941 = v120.i64[0];
    sub_223FFDF1C(v13[2], &v941, v116, v117, v118);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v121 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v121;
    v14 = **v121;
    v86 = v7 + 5;
    v10 = v9 + 4;
  }
  v122 = v11[298];
  if ((v122 & 0x10000000) != 0)
    v123 = 0x40000000;
  else
    v123 = 0x80000000;
  if ((v122 & 0x20000000) != 0)
    v124 = v123;
  else
    v124 = v122 & 0xCFFFFFFF;
  if ((v124 & 0x40000000) == 0)
  {
    v125 = v6 + 2;
    if ((v124 & 0x80000000) != 0)
    {
      LOBYTE(v134) = -1;
      v135 = 2;
    }
    else
    {
      v126 = *(_QWORD *)(v14 + 2448);
      v127 = v126 + 520 * v124;
      v128 = *(_QWORD *)(v127 + 312);
      v129 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v127 + 336))
      {
        *(_BYTE *)(v127 + 336) = 0;
        v130 = *(unsigned int *)(v127 + 4);
        if ((_DWORD)v130)
        {
          v815 = v129;
          v859 = v128;
          v902 = v10;
          v131 = 0;
          v132 = (unsigned __int8 *)(v126 + 520 * v124 + 36);
          do
          {
            v133 = *v132;
            v132 += 28;
            v131 = sub_223A4EC9C(v131, ((unint64_t)v133 << 8) | 1, 0xFFu);
            --v130;
          }
          while (v130);
          v134 = v131 >> 8;
          if (!(_BYTE)v131)
            LOBYTE(v134) = -1;
          v10 = v902;
          v129 = v815;
          v128 = v859;
        }
        else
        {
          LOBYTE(v134) = -1;
        }
        *(_BYTE *)(v126 + 520 * v124 + 338) = v134;
        v5 = a1;
      }
      else
      {
        LOBYTE(v134) = *(_BYTE *)(v126 + 520 * v124 + 338);
      }
      v135 = v128 > v129;
    }
    v136 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v125));
    a4.f32[2] = (float)v10;
    v137.i64[0] = 0x3F0000003F000000;
    v137.i64[1] = 0x3F0000003F000000;
    v138 = vmulq_n_f32(vaddq_f32(a4, v137), v136);
    v942 = v138.i32[2];
    v941 = v138.i64[0];
    sub_223FFDF1C(v13[2], &v941, v134, v135, v136);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v139 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v139;
    v14 = **v139;
    v86 = v7 + 5;
    v10 = v9 + 4;
  }
  v140 = v11[299];
  if ((v140 & 0x10000000) != 0)
    v141 = 0x40000000;
  else
    v141 = 0x80000000;
  if ((v140 & 0x20000000) != 0)
    v142 = v141;
  else
    v142 = v140 & 0xCFFFFFFF;
  if ((v142 & 0x40000000) == 0)
  {
    v143 = v6 + 3;
    if ((v142 & 0x80000000) != 0)
    {
      LOBYTE(v152) = -1;
      v153 = 2;
    }
    else
    {
      v144 = *(_QWORD *)(v14 + 2448);
      v145 = v144 + 520 * v142;
      v146 = *(_QWORD *)(v145 + 312);
      v147 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v145 + 336))
      {
        *(_BYTE *)(v145 + 336) = 0;
        v148 = *(unsigned int *)(v145 + 4);
        if ((_DWORD)v148)
        {
          v816 = v147;
          v860 = v146;
          v903 = v10;
          v149 = 0;
          v150 = (unsigned __int8 *)(v144 + 520 * v142 + 36);
          do
          {
            v151 = *v150;
            v150 += 28;
            v149 = sub_223A4EC9C(v149, ((unint64_t)v151 << 8) | 1, 0xFFu);
            --v148;
          }
          while (v148);
          v152 = v149 >> 8;
          if (!(_BYTE)v149)
            LOBYTE(v152) = -1;
          v10 = v903;
          v147 = v816;
          v146 = v860;
        }
        else
        {
          LOBYTE(v152) = -1;
        }
        *(_BYTE *)(v144 + 520 * v142 + 338) = v152;
        v5 = a1;
      }
      else
      {
        LOBYTE(v152) = *(_BYTE *)(v144 + 520 * v142 + 338);
      }
      v153 = v146 > v147;
    }
    v154 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v143));
    a4.f32[2] = (float)v10;
    v155.i64[0] = 0x3F0000003F000000;
    v155.i64[1] = 0x3F0000003F000000;
    v156 = vmulq_n_f32(vaddq_f32(a4, v155), v154);
    v942 = v156.i32[2];
    v941 = v156.i64[0];
    sub_223FFDF1C(v13[2], &v941, v152, v153, v154);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v157 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v157;
    v14 = **v157;
    v86 = v7 + 5;
    v10 = v9 + 4;
  }
  v158 = v11[300];
  if ((v158 & 0x10000000) != 0)
    v159 = 0x40000000;
  else
    v159 = 0x80000000;
  if ((v158 & 0x20000000) != 0)
    v160 = v159;
  else
    v160 = v158 & 0xCFFFFFFF;
  if ((v160 & 0x40000000) == 0)
  {
    v161 = v6 + 4;
    if ((v160 & 0x80000000) != 0)
    {
      LOBYTE(v170) = -1;
      v171 = 2;
    }
    else
    {
      v162 = *(_QWORD *)(v14 + 2448);
      v163 = v162 + 520 * v160;
      v164 = *(_QWORD *)(v163 + 312);
      v165 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v163 + 336))
      {
        *(_BYTE *)(v163 + 336) = 0;
        v166 = *(unsigned int *)(v163 + 4);
        if ((_DWORD)v166)
        {
          v817 = v165;
          v861 = v164;
          v904 = v10;
          v167 = 0;
          v168 = (unsigned __int8 *)(v162 + 520 * v160 + 36);
          do
          {
            v169 = *v168;
            v168 += 28;
            v167 = sub_223A4EC9C(v167, ((unint64_t)v169 << 8) | 1, 0xFFu);
            --v166;
          }
          while (v166);
          v170 = v167 >> 8;
          if (!(_BYTE)v167)
            LOBYTE(v170) = -1;
          v10 = v904;
          v165 = v817;
          v164 = v861;
        }
        else
        {
          LOBYTE(v170) = -1;
        }
        *(_BYTE *)(v162 + 520 * v160 + 338) = v170;
        v5 = a1;
      }
      else
      {
        LOBYTE(v170) = *(_BYTE *)(v162 + 520 * v160 + 338);
      }
      v171 = v164 > v165;
    }
    v172 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v161));
    a4.f32[2] = (float)v10;
    v173.i64[0] = 0x3F0000003F000000;
    v173.i64[1] = 0x3F0000003F000000;
    v174 = vmulq_n_f32(vaddq_f32(a4, v173), v172);
    v942 = v174.i32[2];
    v941 = v174.i64[0];
    sub_223FFDF1C(v13[2], &v941, v170, v171, v172);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v175 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v175;
    v14 = **v175;
    v86 = v7 + 5;
    v10 = v9 + 4;
  }
  v176 = v11[301];
  if ((v176 & 0x10000000) != 0)
    v177 = 0x40000000;
  else
    v177 = 0x80000000;
  if ((v176 & 0x20000000) != 0)
    v178 = v177;
  else
    v178 = v176 & 0xCFFFFFFF;
  if ((v178 & 0x40000000) == 0)
  {
    v179 = v6 + 5;
    if ((v178 & 0x80000000) != 0)
    {
      LOBYTE(v188) = -1;
      v189 = 2;
    }
    else
    {
      v180 = *(_QWORD *)(v14 + 2448);
      v181 = v180 + 520 * v178;
      v182 = *(_QWORD *)(v181 + 312);
      v183 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v181 + 336))
      {
        *(_BYTE *)(v181 + 336) = 0;
        v184 = *(unsigned int *)(v181 + 4);
        if ((_DWORD)v184)
        {
          v818 = v183;
          v862 = v182;
          v905 = v10;
          v185 = 0;
          v186 = (unsigned __int8 *)(v180 + 520 * v178 + 36);
          do
          {
            v187 = *v186;
            v186 += 28;
            v185 = sub_223A4EC9C(v185, ((unint64_t)v187 << 8) | 1, 0xFFu);
            --v184;
          }
          while (v184);
          v188 = v185 >> 8;
          if (!(_BYTE)v185)
            LOBYTE(v188) = -1;
          v10 = v905;
          v183 = v818;
          v182 = v862;
        }
        else
        {
          LOBYTE(v188) = -1;
        }
        *(_BYTE *)(v180 + 520 * v178 + 338) = v188;
        v5 = a1;
      }
      else
      {
        LOBYTE(v188) = *(_BYTE *)(v180 + 520 * v178 + 338);
      }
      v189 = v182 > v183;
    }
    v190 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v179));
    a4.f32[2] = (float)v10;
    v191.i64[0] = 0x3F0000003F000000;
    v191.i64[1] = 0x3F0000003F000000;
    v192 = vmulq_n_f32(vaddq_f32(a4, v191), v190);
    v942 = v192.i32[2];
    v941 = v192.i64[0];
    sub_223FFDF1C(v13[2], &v941, v188, v189, v190);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v193 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v193;
    v14 = **v193;
    v86 = v7 + 5;
    v10 = v9 + 4;
  }
  v194 = v11[302];
  if ((v194 & 0x10000000) != 0)
    v195 = 0x40000000;
  else
    v195 = 0x80000000;
  if ((v194 & 0x20000000) != 0)
    v196 = v195;
  else
    v196 = v194 & 0xCFFFFFFF;
  if ((v196 & 0x40000000) == 0)
  {
    v197 = v6 + 6;
    if ((v196 & 0x80000000) != 0)
    {
      LOBYTE(v206) = -1;
      v207 = 2;
    }
    else
    {
      v198 = *(_QWORD *)(v14 + 2448);
      v199 = v198 + 520 * v196;
      v200 = *(_QWORD *)(v199 + 312);
      v201 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v199 + 336))
      {
        *(_BYTE *)(v199 + 336) = 0;
        v202 = *(unsigned int *)(v199 + 4);
        if ((_DWORD)v202)
        {
          v819 = v201;
          v863 = v200;
          v906 = v10;
          v203 = 0;
          v204 = (unsigned __int8 *)(v198 + 520 * v196 + 36);
          do
          {
            v205 = *v204;
            v204 += 28;
            v203 = sub_223A4EC9C(v203, ((unint64_t)v205 << 8) | 1, 0xFFu);
            --v202;
          }
          while (v202);
          v206 = v203 >> 8;
          if (!(_BYTE)v203)
            LOBYTE(v206) = -1;
          v10 = v906;
          v201 = v819;
          v200 = v863;
        }
        else
        {
          LOBYTE(v206) = -1;
        }
        *(_BYTE *)(v198 + 520 * v196 + 338) = v206;
        v5 = a1;
      }
      else
      {
        LOBYTE(v206) = *(_BYTE *)(v198 + 520 * v196 + 338);
      }
      v207 = v200 > v201;
    }
    v208 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v197));
    a4.f32[2] = (float)v10;
    v209.i64[0] = 0x3F0000003F000000;
    v209.i64[1] = 0x3F0000003F000000;
    v210 = vmulq_n_f32(vaddq_f32(a4, v209), v208);
    v942 = v210.i32[2];
    v941 = v210.i64[0];
    sub_223FFDF1C(v13[2], &v941, v206, v207, v208);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v211 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v211;
    v14 = **v211;
    v86 = v7 + 5;
    v10 = v9 + 4;
  }
  v212 = v11[303];
  if ((v212 & 0x10000000) != 0)
    v213 = 0x40000000;
  else
    v213 = 0x80000000;
  if ((v212 & 0x20000000) != 0)
    v214 = v213;
  else
    v214 = v212 & 0xCFFFFFFF;
  if ((v214 & 0x40000000) == 0)
  {
    v215 = v6 + 7;
    if ((v214 & 0x80000000) != 0)
    {
      LOBYTE(v224) = -1;
      v225 = 2;
    }
    else
    {
      v216 = *(_QWORD *)(v14 + 2448);
      v217 = v216 + 520 * v214;
      v218 = *(_QWORD *)(v217 + 312);
      v219 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v217 + 336))
      {
        *(_BYTE *)(v217 + 336) = 0;
        v220 = *(unsigned int *)(v217 + 4);
        if ((_DWORD)v220)
        {
          v820 = v219;
          v864 = v218;
          v907 = v10;
          v221 = 0;
          v222 = (unsigned __int8 *)(v216 + 520 * v214 + 36);
          do
          {
            v223 = *v222;
            v222 += 28;
            v221 = sub_223A4EC9C(v221, ((unint64_t)v223 << 8) | 1, 0xFFu);
            --v220;
          }
          while (v220);
          v224 = v221 >> 8;
          if (!(_BYTE)v221)
            LOBYTE(v224) = -1;
          v10 = v907;
          v219 = v820;
          v218 = v864;
        }
        else
        {
          LOBYTE(v224) = -1;
        }
        *(_BYTE *)(v216 + 520 * v214 + 338) = v224;
        v5 = a1;
      }
      else
      {
        LOBYTE(v224) = *(_BYTE *)(v216 + 520 * v214 + 338);
      }
      v225 = v218 > v219;
    }
    v226 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v86, v215));
    a4.f32[2] = (float)v10;
    v227.i64[0] = 0x3F0000003F000000;
    v227.i64[1] = 0x3F0000003F000000;
    v228 = vmulq_n_f32(vaddq_f32(a4, v227), v226);
    v942 = v228.i32[2];
    v941 = v228.i64[0];
    sub_223FFDF1C(v13[2], &v941, v224, v225, v226);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v229 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v229;
    v14 = **v229;
    v10 = v9 + 4;
  }
  v230 = v7 + 6;
  v231 = v11[304];
  if ((v231 & 0x10000000) != 0)
    v232 = 0x40000000;
  else
    v232 = 0x80000000;
  if ((v231 & 0x20000000) != 0)
    v233 = v232;
  else
    v233 = v231 & 0xCFFFFFFF;
  if ((v233 & 0x40000000) == 0)
  {
    if ((v233 & 0x80000000) != 0)
    {
      LOBYTE(v242) = -1;
      v243 = 2;
    }
    else
    {
      v234 = *(_QWORD *)(v14 + 2448);
      v235 = v234 + 520 * v233;
      v236 = *(_QWORD *)(v235 + 312);
      v237 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v235 + 336))
      {
        *(_BYTE *)(v235 + 336) = 0;
        v238 = *(unsigned int *)(v235 + 4);
        if ((_DWORD)v238)
        {
          v821 = v237;
          v865 = v236;
          v908 = v10;
          v239 = 0;
          v240 = (unsigned __int8 *)(v234 + 520 * v233 + 36);
          do
          {
            v241 = *v240;
            v240 += 28;
            v239 = sub_223A4EC9C(v239, ((unint64_t)v241 << 8) | 1, 0xFFu);
            --v238;
          }
          while (v238);
          v242 = v239 >> 8;
          if (!(_BYTE)v239)
            LOBYTE(v242) = -1;
          v10 = v908;
          v237 = v821;
          v236 = v865;
        }
        else
        {
          LOBYTE(v242) = -1;
        }
        *(_BYTE *)(v234 + 520 * v233 + 338) = v242;
        v5 = a1;
      }
      else
      {
        LOBYTE(v242) = *(_BYTE *)(v234 + 520 * v233 + 338);
      }
      v243 = v236 > v237;
    }
    v244 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v6));
    a4.f32[2] = (float)v10;
    v245.i64[0] = 0x3F0000003F000000;
    v245.i64[1] = 0x3F0000003F000000;
    v246 = vmulq_n_f32(vaddq_f32(a4, v245), v244);
    v942 = v246.i32[2];
    v941 = v246.i64[0];
    sub_223FFDF1C(v13[2], &v941, v242, v243, v244);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v247 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v247;
    v14 = **v247;
    v230 = v7 + 6;
    v10 = v9 + 4;
  }
  v248 = v11[305];
  if ((v248 & 0x10000000) != 0)
    v249 = 0x40000000;
  else
    v249 = 0x80000000;
  if ((v248 & 0x20000000) != 0)
    v250 = v249;
  else
    v250 = v248 & 0xCFFFFFFF;
  if ((v250 & 0x40000000) == 0)
  {
    v251 = v6 + 1;
    if ((v250 & 0x80000000) != 0)
    {
      LOBYTE(v260) = -1;
      v261 = 2;
    }
    else
    {
      v252 = *(_QWORD *)(v14 + 2448);
      v253 = v252 + 520 * v250;
      v254 = *(_QWORD *)(v253 + 312);
      v255 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v253 + 336))
      {
        *(_BYTE *)(v253 + 336) = 0;
        v256 = *(unsigned int *)(v253 + 4);
        if ((_DWORD)v256)
        {
          v822 = v255;
          v866 = v254;
          v909 = v10;
          v257 = 0;
          v258 = (unsigned __int8 *)(v252 + 520 * v250 + 36);
          do
          {
            v259 = *v258;
            v258 += 28;
            v257 = sub_223A4EC9C(v257, ((unint64_t)v259 << 8) | 1, 0xFFu);
            --v256;
          }
          while (v256);
          v260 = v257 >> 8;
          if (!(_BYTE)v257)
            LOBYTE(v260) = -1;
          v10 = v909;
          v255 = v822;
          v254 = v866;
        }
        else
        {
          LOBYTE(v260) = -1;
        }
        *(_BYTE *)(v252 + 520 * v250 + 338) = v260;
        v5 = a1;
      }
      else
      {
        LOBYTE(v260) = *(_BYTE *)(v252 + 520 * v250 + 338);
      }
      v261 = v254 > v255;
    }
    v262 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v251));
    a4.f32[2] = (float)v10;
    v263.i64[0] = 0x3F0000003F000000;
    v263.i64[1] = 0x3F0000003F000000;
    v264 = vmulq_n_f32(vaddq_f32(a4, v263), v262);
    v942 = v264.i32[2];
    v941 = v264.i64[0];
    sub_223FFDF1C(v13[2], &v941, v260, v261, v262);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v265 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v265;
    v14 = **v265;
    v230 = v7 + 6;
    v10 = v9 + 4;
  }
  v266 = v11[306];
  if ((v266 & 0x10000000) != 0)
    v267 = 0x40000000;
  else
    v267 = 0x80000000;
  if ((v266 & 0x20000000) != 0)
    v268 = v267;
  else
    v268 = v266 & 0xCFFFFFFF;
  if ((v268 & 0x40000000) == 0)
  {
    v269 = v6 + 2;
    if ((v268 & 0x80000000) != 0)
    {
      LOBYTE(v278) = -1;
      v279 = 2;
    }
    else
    {
      v270 = *(_QWORD *)(v14 + 2448);
      v271 = v270 + 520 * v268;
      v272 = *(_QWORD *)(v271 + 312);
      v273 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v271 + 336))
      {
        *(_BYTE *)(v271 + 336) = 0;
        v274 = *(unsigned int *)(v271 + 4);
        if ((_DWORD)v274)
        {
          v823 = v273;
          v867 = v272;
          v910 = v10;
          v275 = 0;
          v276 = (unsigned __int8 *)(v270 + 520 * v268 + 36);
          do
          {
            v277 = *v276;
            v276 += 28;
            v275 = sub_223A4EC9C(v275, ((unint64_t)v277 << 8) | 1, 0xFFu);
            --v274;
          }
          while (v274);
          v278 = v275 >> 8;
          if (!(_BYTE)v275)
            LOBYTE(v278) = -1;
          v10 = v910;
          v273 = v823;
          v272 = v867;
        }
        else
        {
          LOBYTE(v278) = -1;
        }
        *(_BYTE *)(v270 + 520 * v268 + 338) = v278;
        v5 = a1;
      }
      else
      {
        LOBYTE(v278) = *(_BYTE *)(v270 + 520 * v268 + 338);
      }
      v279 = v272 > v273;
    }
    v280 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v269));
    a4.f32[2] = (float)v10;
    v281.i64[0] = 0x3F0000003F000000;
    v281.i64[1] = 0x3F0000003F000000;
    v282 = vmulq_n_f32(vaddq_f32(a4, v281), v280);
    v942 = v282.i32[2];
    v941 = v282.i64[0];
    sub_223FFDF1C(v13[2], &v941, v278, v279, v280);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v283 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v283;
    v14 = **v283;
    v230 = v7 + 6;
    v10 = v9 + 4;
  }
  v284 = v11[307];
  if ((v284 & 0x10000000) != 0)
    v285 = 0x40000000;
  else
    v285 = 0x80000000;
  if ((v284 & 0x20000000) != 0)
    v286 = v285;
  else
    v286 = v284 & 0xCFFFFFFF;
  if ((v286 & 0x40000000) == 0)
  {
    v287 = v6 + 3;
    if ((v286 & 0x80000000) != 0)
    {
      LOBYTE(v296) = -1;
      v297 = 2;
    }
    else
    {
      v288 = *(_QWORD *)(v14 + 2448);
      v289 = v288 + 520 * v286;
      v290 = *(_QWORD *)(v289 + 312);
      v291 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v289 + 336))
      {
        *(_BYTE *)(v289 + 336) = 0;
        v292 = *(unsigned int *)(v289 + 4);
        if ((_DWORD)v292)
        {
          v824 = v291;
          v868 = v290;
          v911 = v10;
          v293 = 0;
          v294 = (unsigned __int8 *)(v288 + 520 * v286 + 36);
          do
          {
            v295 = *v294;
            v294 += 28;
            v293 = sub_223A4EC9C(v293, ((unint64_t)v295 << 8) | 1, 0xFFu);
            --v292;
          }
          while (v292);
          v296 = v293 >> 8;
          if (!(_BYTE)v293)
            LOBYTE(v296) = -1;
          v10 = v911;
          v291 = v824;
          v290 = v868;
        }
        else
        {
          LOBYTE(v296) = -1;
        }
        *(_BYTE *)(v288 + 520 * v286 + 338) = v296;
        v5 = a1;
      }
      else
      {
        LOBYTE(v296) = *(_BYTE *)(v288 + 520 * v286 + 338);
      }
      v297 = v290 > v291;
    }
    v298 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v287));
    a4.f32[2] = (float)v10;
    v299.i64[0] = 0x3F0000003F000000;
    v299.i64[1] = 0x3F0000003F000000;
    v300 = vmulq_n_f32(vaddq_f32(a4, v299), v298);
    v942 = v300.i32[2];
    v941 = v300.i64[0];
    sub_223FFDF1C(v13[2], &v941, v296, v297, v298);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v301 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v301;
    v14 = **v301;
    v230 = v7 + 6;
    v10 = v9 + 4;
  }
  v302 = v11[308];
  if ((v302 & 0x10000000) != 0)
    v303 = 0x40000000;
  else
    v303 = 0x80000000;
  if ((v302 & 0x20000000) != 0)
    v304 = v303;
  else
    v304 = v302 & 0xCFFFFFFF;
  if ((v304 & 0x40000000) == 0)
  {
    v305 = v6 + 4;
    if ((v304 & 0x80000000) != 0)
    {
      LOBYTE(v314) = -1;
      v315 = 2;
    }
    else
    {
      v306 = *(_QWORD *)(v14 + 2448);
      v307 = v306 + 520 * v304;
      v308 = *(_QWORD *)(v307 + 312);
      v309 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v307 + 336))
      {
        *(_BYTE *)(v307 + 336) = 0;
        v310 = *(unsigned int *)(v307 + 4);
        if ((_DWORD)v310)
        {
          v825 = v309;
          v869 = v308;
          v912 = v10;
          v311 = 0;
          v312 = (unsigned __int8 *)(v306 + 520 * v304 + 36);
          do
          {
            v313 = *v312;
            v312 += 28;
            v311 = sub_223A4EC9C(v311, ((unint64_t)v313 << 8) | 1, 0xFFu);
            --v310;
          }
          while (v310);
          v314 = v311 >> 8;
          if (!(_BYTE)v311)
            LOBYTE(v314) = -1;
          v10 = v912;
          v309 = v825;
          v308 = v869;
        }
        else
        {
          LOBYTE(v314) = -1;
        }
        *(_BYTE *)(v306 + 520 * v304 + 338) = v314;
        v5 = a1;
      }
      else
      {
        LOBYTE(v314) = *(_BYTE *)(v306 + 520 * v304 + 338);
      }
      v315 = v308 > v309;
    }
    v316 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v305));
    a4.f32[2] = (float)v10;
    v317.i64[0] = 0x3F0000003F000000;
    v317.i64[1] = 0x3F0000003F000000;
    v318 = vmulq_n_f32(vaddq_f32(a4, v317), v316);
    v942 = v318.i32[2];
    v941 = v318.i64[0];
    sub_223FFDF1C(v13[2], &v941, v314, v315, v316);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v319 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v319;
    v14 = **v319;
    v230 = v7 + 6;
    v10 = v9 + 4;
  }
  v320 = v11[309];
  if ((v320 & 0x10000000) != 0)
    v321 = 0x40000000;
  else
    v321 = 0x80000000;
  if ((v320 & 0x20000000) != 0)
    v322 = v321;
  else
    v322 = v320 & 0xCFFFFFFF;
  if ((v322 & 0x40000000) == 0)
  {
    v323 = v6 + 5;
    if ((v322 & 0x80000000) != 0)
    {
      LOBYTE(v332) = -1;
      v333 = 2;
    }
    else
    {
      v324 = *(_QWORD *)(v14 + 2448);
      v325 = v324 + 520 * v322;
      v326 = *(_QWORD *)(v325 + 312);
      v327 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v325 + 336))
      {
        *(_BYTE *)(v325 + 336) = 0;
        v328 = *(unsigned int *)(v325 + 4);
        if ((_DWORD)v328)
        {
          v826 = v327;
          v870 = v326;
          v913 = v10;
          v329 = 0;
          v330 = (unsigned __int8 *)(v324 + 520 * v322 + 36);
          do
          {
            v331 = *v330;
            v330 += 28;
            v329 = sub_223A4EC9C(v329, ((unint64_t)v331 << 8) | 1, 0xFFu);
            --v328;
          }
          while (v328);
          v332 = v329 >> 8;
          if (!(_BYTE)v329)
            LOBYTE(v332) = -1;
          v10 = v913;
          v327 = v826;
          v326 = v870;
        }
        else
        {
          LOBYTE(v332) = -1;
        }
        *(_BYTE *)(v324 + 520 * v322 + 338) = v332;
        v5 = a1;
      }
      else
      {
        LOBYTE(v332) = *(_BYTE *)(v324 + 520 * v322 + 338);
      }
      v333 = v326 > v327;
    }
    v334 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v323));
    a4.f32[2] = (float)v10;
    v335.i64[0] = 0x3F0000003F000000;
    v335.i64[1] = 0x3F0000003F000000;
    v336 = vmulq_n_f32(vaddq_f32(a4, v335), v334);
    v942 = v336.i32[2];
    v941 = v336.i64[0];
    sub_223FFDF1C(v13[2], &v941, v332, v333, v334);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v337 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v337;
    v14 = **v337;
    v230 = v7 + 6;
    v10 = v9 + 4;
  }
  v338 = v11[310];
  if ((v338 & 0x10000000) != 0)
    v339 = 0x40000000;
  else
    v339 = 0x80000000;
  if ((v338 & 0x20000000) != 0)
    v340 = v339;
  else
    v340 = v338 & 0xCFFFFFFF;
  if ((v340 & 0x40000000) == 0)
  {
    v341 = v6 + 6;
    if ((v340 & 0x80000000) != 0)
    {
      LOBYTE(v350) = -1;
      v351 = 2;
    }
    else
    {
      v342 = *(_QWORD *)(v14 + 2448);
      v343 = v342 + 520 * v340;
      v344 = *(_QWORD *)(v343 + 312);
      v345 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v343 + 336))
      {
        *(_BYTE *)(v343 + 336) = 0;
        v346 = *(unsigned int *)(v343 + 4);
        if ((_DWORD)v346)
        {
          v827 = v345;
          v871 = v344;
          v914 = v10;
          v347 = 0;
          v348 = (unsigned __int8 *)(v342 + 520 * v340 + 36);
          do
          {
            v349 = *v348;
            v348 += 28;
            v347 = sub_223A4EC9C(v347, ((unint64_t)v349 << 8) | 1, 0xFFu);
            --v346;
          }
          while (v346);
          v350 = v347 >> 8;
          if (!(_BYTE)v347)
            LOBYTE(v350) = -1;
          v10 = v914;
          v345 = v827;
          v344 = v871;
        }
        else
        {
          LOBYTE(v350) = -1;
        }
        *(_BYTE *)(v342 + 520 * v340 + 338) = v350;
        v5 = a1;
      }
      else
      {
        LOBYTE(v350) = *(_BYTE *)(v342 + 520 * v340 + 338);
      }
      v351 = v344 > v345;
    }
    v352 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v341));
    a4.f32[2] = (float)v10;
    v353.i64[0] = 0x3F0000003F000000;
    v353.i64[1] = 0x3F0000003F000000;
    v354 = vmulq_n_f32(vaddq_f32(a4, v353), v352);
    v942 = v354.i32[2];
    v941 = v354.i64[0];
    sub_223FFDF1C(v13[2], &v941, v350, v351, v352);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v355 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v355;
    v14 = **v355;
    v230 = v7 + 6;
    v10 = v9 + 4;
  }
  v356 = v11[311];
  if ((v356 & 0x10000000) != 0)
    v357 = 0x40000000;
  else
    v357 = 0x80000000;
  if ((v356 & 0x20000000) != 0)
    v358 = v357;
  else
    v358 = v356 & 0xCFFFFFFF;
  if ((v358 & 0x40000000) == 0)
  {
    v359 = v6 + 7;
    if ((v358 & 0x80000000) != 0)
    {
      LOBYTE(v368) = -1;
      v369 = 2;
    }
    else
    {
      v360 = *(_QWORD *)(v14 + 2448);
      v361 = v360 + 520 * v358;
      v362 = *(_QWORD *)(v361 + 312);
      v363 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v361 + 336))
      {
        *(_BYTE *)(v361 + 336) = 0;
        v364 = *(unsigned int *)(v361 + 4);
        if ((_DWORD)v364)
        {
          v828 = v363;
          v872 = v362;
          v915 = v10;
          v365 = 0;
          v366 = (unsigned __int8 *)(v360 + 520 * v358 + 36);
          do
          {
            v367 = *v366;
            v366 += 28;
            v365 = sub_223A4EC9C(v365, ((unint64_t)v367 << 8) | 1, 0xFFu);
            --v364;
          }
          while (v364);
          v368 = v365 >> 8;
          if (!(_BYTE)v365)
            LOBYTE(v368) = -1;
          v10 = v915;
          v363 = v828;
          v362 = v872;
        }
        else
        {
          LOBYTE(v368) = -1;
        }
        *(_BYTE *)(v360 + 520 * v358 + 338) = v368;
        v5 = a1;
      }
      else
      {
        LOBYTE(v368) = *(_BYTE *)(v360 + 520 * v358 + 338);
      }
      v369 = v362 > v363;
    }
    v370 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v359));
    a4.f32[2] = (float)v10;
    v371.i64[0] = 0x3F0000003F000000;
    v371.i64[1] = 0x3F0000003F000000;
    v372 = vmulq_n_f32(vaddq_f32(a4, v371), v370);
    v942 = v372.i32[2];
    v941 = v372.i64[0];
    sub_223FFDF1C(v13[2], &v941, v368, v369, v370);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v373 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v373;
    v14 = **v373;
    v10 = v9 + 4;
  }
  v374 = v7 + 7;
  v375 = v11[312];
  if ((v375 & 0x10000000) != 0)
    v376 = 0x40000000;
  else
    v376 = 0x80000000;
  if ((v375 & 0x20000000) != 0)
    v377 = v376;
  else
    v377 = v375 & 0xCFFFFFFF;
  if ((v377 & 0x40000000) == 0)
  {
    if ((v377 & 0x80000000) != 0)
    {
      LOBYTE(v386) = -1;
      v387 = 2;
    }
    else
    {
      v378 = *(_QWORD *)(v14 + 2448);
      v379 = v378 + 520 * v377;
      v380 = *(_QWORD *)(v379 + 312);
      v381 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v379 + 336))
      {
        *(_BYTE *)(v379 + 336) = 0;
        v382 = *(unsigned int *)(v379 + 4);
        if ((_DWORD)v382)
        {
          v829 = v381;
          v873 = v380;
          v916 = v10;
          v383 = 0;
          v384 = (unsigned __int8 *)(v378 + 520 * v377 + 36);
          do
          {
            v385 = *v384;
            v384 += 28;
            v383 = sub_223A4EC9C(v383, ((unint64_t)v385 << 8) | 1, 0xFFu);
            --v382;
          }
          while (v382);
          v386 = v383 >> 8;
          if (!(_BYTE)v383)
            LOBYTE(v386) = -1;
          v10 = v916;
          v381 = v829;
          v380 = v873;
        }
        else
        {
          LOBYTE(v386) = -1;
        }
        *(_BYTE *)(v378 + 520 * v377 + 338) = v386;
        v5 = a1;
      }
      else
      {
        LOBYTE(v386) = *(_BYTE *)(v378 + 520 * v377 + 338);
      }
      v387 = v380 > v381;
    }
    v388 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v6));
    a4.f32[2] = (float)v10;
    v389.i64[0] = 0x3F0000003F000000;
    v389.i64[1] = 0x3F0000003F000000;
    v390 = vmulq_n_f32(vaddq_f32(a4, v389), v388);
    v942 = v390.i32[2];
    v941 = v390.i64[0];
    sub_223FFDF1C(v13[2], &v941, v386, v387, v388);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v391 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v391;
    v14 = **v391;
    v374 = v7 + 7;
    v10 = v9 + 4;
  }
  v392 = v11[313];
  if ((v392 & 0x10000000) != 0)
    v393 = 0x40000000;
  else
    v393 = 0x80000000;
  if ((v392 & 0x20000000) != 0)
    v394 = v393;
  else
    v394 = v392 & 0xCFFFFFFF;
  if ((v394 & 0x40000000) == 0)
  {
    v395 = v6 + 1;
    if ((v394 & 0x80000000) != 0)
    {
      LOBYTE(v404) = -1;
      v405 = 2;
    }
    else
    {
      v396 = *(_QWORD *)(v14 + 2448);
      v397 = v396 + 520 * v394;
      v398 = *(_QWORD *)(v397 + 312);
      v399 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v397 + 336))
      {
        *(_BYTE *)(v397 + 336) = 0;
        v400 = *(unsigned int *)(v397 + 4);
        if ((_DWORD)v400)
        {
          v830 = v399;
          v874 = v398;
          v917 = v10;
          v401 = 0;
          v402 = (unsigned __int8 *)(v396 + 520 * v394 + 36);
          do
          {
            v403 = *v402;
            v402 += 28;
            v401 = sub_223A4EC9C(v401, ((unint64_t)v403 << 8) | 1, 0xFFu);
            --v400;
          }
          while (v400);
          v404 = v401 >> 8;
          if (!(_BYTE)v401)
            LOBYTE(v404) = -1;
          v10 = v917;
          v399 = v830;
          v398 = v874;
        }
        else
        {
          LOBYTE(v404) = -1;
        }
        *(_BYTE *)(v396 + 520 * v394 + 338) = v404;
        v5 = a1;
      }
      else
      {
        LOBYTE(v404) = *(_BYTE *)(v396 + 520 * v394 + 338);
      }
      v405 = v398 > v399;
    }
    v406 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v395));
    a4.f32[2] = (float)v10;
    v407.i64[0] = 0x3F0000003F000000;
    v407.i64[1] = 0x3F0000003F000000;
    v408 = vmulq_n_f32(vaddq_f32(a4, v407), v406);
    v942 = v408.i32[2];
    v941 = v408.i64[0];
    sub_223FFDF1C(v13[2], &v941, v404, v405, v406);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v409 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v409;
    v14 = **v409;
    v374 = v7 + 7;
    v10 = v9 + 4;
  }
  v410 = v11[314];
  if ((v410 & 0x10000000) != 0)
    v411 = 0x40000000;
  else
    v411 = 0x80000000;
  if ((v410 & 0x20000000) != 0)
    v412 = v411;
  else
    v412 = v410 & 0xCFFFFFFF;
  if ((v412 & 0x40000000) == 0)
  {
    v413 = v6 + 2;
    if ((v412 & 0x80000000) != 0)
    {
      LOBYTE(v422) = -1;
      v423 = 2;
    }
    else
    {
      v414 = *(_QWORD *)(v14 + 2448);
      v415 = v414 + 520 * v412;
      v416 = *(_QWORD *)(v415 + 312);
      v417 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v415 + 336))
      {
        *(_BYTE *)(v415 + 336) = 0;
        v418 = *(unsigned int *)(v415 + 4);
        if ((_DWORD)v418)
        {
          v831 = v417;
          v875 = v416;
          v918 = v10;
          v419 = 0;
          v420 = (unsigned __int8 *)(v414 + 520 * v412 + 36);
          do
          {
            v421 = *v420;
            v420 += 28;
            v419 = sub_223A4EC9C(v419, ((unint64_t)v421 << 8) | 1, 0xFFu);
            --v418;
          }
          while (v418);
          v422 = v419 >> 8;
          if (!(_BYTE)v419)
            LOBYTE(v422) = -1;
          v10 = v918;
          v417 = v831;
          v416 = v875;
        }
        else
        {
          LOBYTE(v422) = -1;
        }
        *(_BYTE *)(v414 + 520 * v412 + 338) = v422;
        v5 = a1;
      }
      else
      {
        LOBYTE(v422) = *(_BYTE *)(v414 + 520 * v412 + 338);
      }
      v423 = v416 > v417;
    }
    v424 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v413));
    a4.f32[2] = (float)v10;
    v425.i64[0] = 0x3F0000003F000000;
    v425.i64[1] = 0x3F0000003F000000;
    v426 = vmulq_n_f32(vaddq_f32(a4, v425), v424);
    v942 = v426.i32[2];
    v941 = v426.i64[0];
    sub_223FFDF1C(v13[2], &v941, v422, v423, v424);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v427 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v427;
    v14 = **v427;
    v374 = v7 + 7;
    v10 = v9 + 4;
  }
  v428 = v11[315];
  if ((v428 & 0x10000000) != 0)
    v429 = 0x40000000;
  else
    v429 = 0x80000000;
  if ((v428 & 0x20000000) != 0)
    v430 = v429;
  else
    v430 = v428 & 0xCFFFFFFF;
  if ((v430 & 0x40000000) == 0)
  {
    v431 = v6 + 3;
    if ((v430 & 0x80000000) != 0)
    {
      LOBYTE(v440) = -1;
      v441 = 2;
    }
    else
    {
      v432 = *(_QWORD *)(v14 + 2448);
      v433 = v432 + 520 * v430;
      v434 = *(_QWORD *)(v433 + 312);
      v435 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v433 + 336))
      {
        *(_BYTE *)(v433 + 336) = 0;
        v436 = *(unsigned int *)(v433 + 4);
        if ((_DWORD)v436)
        {
          v832 = v435;
          v876 = v434;
          v919 = v10;
          v437 = 0;
          v438 = (unsigned __int8 *)(v432 + 520 * v430 + 36);
          do
          {
            v439 = *v438;
            v438 += 28;
            v437 = sub_223A4EC9C(v437, ((unint64_t)v439 << 8) | 1, 0xFFu);
            --v436;
          }
          while (v436);
          v440 = v437 >> 8;
          if (!(_BYTE)v437)
            LOBYTE(v440) = -1;
          v10 = v919;
          v435 = v832;
          v434 = v876;
        }
        else
        {
          LOBYTE(v440) = -1;
        }
        *(_BYTE *)(v432 + 520 * v430 + 338) = v440;
        v5 = a1;
      }
      else
      {
        LOBYTE(v440) = *(_BYTE *)(v432 + 520 * v430 + 338);
      }
      v441 = v434 > v435;
    }
    v442 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v431));
    a4.f32[2] = (float)v10;
    v443.i64[0] = 0x3F0000003F000000;
    v443.i64[1] = 0x3F0000003F000000;
    v444 = vmulq_n_f32(vaddq_f32(a4, v443), v442);
    v942 = v444.i32[2];
    v941 = v444.i64[0];
    sub_223FFDF1C(v13[2], &v941, v440, v441, v442);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v445 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v445;
    v14 = **v445;
    v374 = v7 + 7;
    v10 = v9 + 4;
  }
  v446 = v11[316];
  if ((v446 & 0x10000000) != 0)
    v447 = 0x40000000;
  else
    v447 = 0x80000000;
  if ((v446 & 0x20000000) != 0)
    v448 = v447;
  else
    v448 = v446 & 0xCFFFFFFF;
  if ((v448 & 0x40000000) == 0)
  {
    v449 = v6 + 4;
    if ((v448 & 0x80000000) != 0)
    {
      LOBYTE(v458) = -1;
      v459 = 2;
    }
    else
    {
      v450 = *(_QWORD *)(v14 + 2448);
      v451 = v450 + 520 * v448;
      v452 = *(_QWORD *)(v451 + 312);
      v453 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v451 + 336))
      {
        *(_BYTE *)(v451 + 336) = 0;
        v454 = *(unsigned int *)(v451 + 4);
        if ((_DWORD)v454)
        {
          v833 = v453;
          v877 = v452;
          v920 = v10;
          v455 = 0;
          v456 = (unsigned __int8 *)(v450 + 520 * v448 + 36);
          do
          {
            v457 = *v456;
            v456 += 28;
            v455 = sub_223A4EC9C(v455, ((unint64_t)v457 << 8) | 1, 0xFFu);
            --v454;
          }
          while (v454);
          v458 = v455 >> 8;
          if (!(_BYTE)v455)
            LOBYTE(v458) = -1;
          v10 = v920;
          v453 = v833;
          v452 = v877;
        }
        else
        {
          LOBYTE(v458) = -1;
        }
        *(_BYTE *)(v450 + 520 * v448 + 338) = v458;
        v5 = a1;
      }
      else
      {
        LOBYTE(v458) = *(_BYTE *)(v450 + 520 * v448 + 338);
      }
      v459 = v452 > v453;
    }
    v460 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v449));
    a4.f32[2] = (float)v10;
    v461.i64[0] = 0x3F0000003F000000;
    v461.i64[1] = 0x3F0000003F000000;
    v462 = vmulq_n_f32(vaddq_f32(a4, v461), v460);
    v942 = v462.i32[2];
    v941 = v462.i64[0];
    sub_223FFDF1C(v13[2], &v941, v458, v459, v460);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v463 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v463;
    v14 = **v463;
    v374 = v7 + 7;
    v10 = v9 + 4;
  }
  v464 = v11[317];
  if ((v464 & 0x10000000) != 0)
    v465 = 0x40000000;
  else
    v465 = 0x80000000;
  if ((v464 & 0x20000000) != 0)
    v466 = v465;
  else
    v466 = v464 & 0xCFFFFFFF;
  if ((v466 & 0x40000000) == 0)
  {
    v467 = v6 + 5;
    if ((v466 & 0x80000000) != 0)
    {
      LOBYTE(v476) = -1;
      v477 = 2;
    }
    else
    {
      v468 = *(_QWORD *)(v14 + 2448);
      v469 = v468 + 520 * v466;
      v470 = *(_QWORD *)(v469 + 312);
      v471 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v469 + 336))
      {
        *(_BYTE *)(v469 + 336) = 0;
        v472 = *(unsigned int *)(v469 + 4);
        if ((_DWORD)v472)
        {
          v834 = v471;
          v878 = v470;
          v921 = v10;
          v473 = 0;
          v474 = (unsigned __int8 *)(v468 + 520 * v466 + 36);
          do
          {
            v475 = *v474;
            v474 += 28;
            v473 = sub_223A4EC9C(v473, ((unint64_t)v475 << 8) | 1, 0xFFu);
            --v472;
          }
          while (v472);
          v476 = v473 >> 8;
          if (!(_BYTE)v473)
            LOBYTE(v476) = -1;
          v10 = v921;
          v471 = v834;
          v470 = v878;
        }
        else
        {
          LOBYTE(v476) = -1;
        }
        *(_BYTE *)(v468 + 520 * v466 + 338) = v476;
        v5 = a1;
      }
      else
      {
        LOBYTE(v476) = *(_BYTE *)(v468 + 520 * v466 + 338);
      }
      v477 = v470 > v471;
    }
    v478 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v467));
    a4.f32[2] = (float)v10;
    v479.i64[0] = 0x3F0000003F000000;
    v479.i64[1] = 0x3F0000003F000000;
    v480 = vmulq_n_f32(vaddq_f32(a4, v479), v478);
    v942 = v480.i32[2];
    v941 = v480.i64[0];
    sub_223FFDF1C(v13[2], &v941, v476, v477, v478);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v481 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v481;
    v14 = **v481;
    v374 = v7 + 7;
    v10 = v9 + 4;
  }
  v482 = v11[318];
  if ((v482 & 0x10000000) != 0)
    v483 = 0x40000000;
  else
    v483 = 0x80000000;
  if ((v482 & 0x20000000) != 0)
    v484 = v483;
  else
    v484 = v482 & 0xCFFFFFFF;
  if ((v484 & 0x40000000) == 0)
  {
    v485 = v6 + 6;
    if ((v484 & 0x80000000) != 0)
    {
      LOBYTE(v494) = -1;
      v495 = 2;
    }
    else
    {
      v486 = *(_QWORD *)(v14 + 2448);
      v487 = v486 + 520 * v484;
      v488 = *(_QWORD *)(v487 + 312);
      v489 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v487 + 336))
      {
        *(_BYTE *)(v487 + 336) = 0;
        v490 = *(unsigned int *)(v487 + 4);
        if ((_DWORD)v490)
        {
          v835 = v489;
          v879 = v488;
          v922 = v10;
          v491 = 0;
          v492 = (unsigned __int8 *)(v486 + 520 * v484 + 36);
          do
          {
            v493 = *v492;
            v492 += 28;
            v491 = sub_223A4EC9C(v491, ((unint64_t)v493 << 8) | 1, 0xFFu);
            --v490;
          }
          while (v490);
          v494 = v491 >> 8;
          if (!(_BYTE)v491)
            LOBYTE(v494) = -1;
          v10 = v922;
          v489 = v835;
          v488 = v879;
        }
        else
        {
          LOBYTE(v494) = -1;
        }
        *(_BYTE *)(v486 + 520 * v484 + 338) = v494;
        v5 = a1;
      }
      else
      {
        LOBYTE(v494) = *(_BYTE *)(v486 + 520 * v484 + 338);
      }
      v495 = v488 > v489;
    }
    v496 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v485));
    a4.f32[2] = (float)v10;
    v497.i64[0] = 0x3F0000003F000000;
    v497.i64[1] = 0x3F0000003F000000;
    v498 = vmulq_n_f32(vaddq_f32(a4, v497), v496);
    v942 = v498.i32[2];
    v941 = v498.i64[0];
    sub_223FFDF1C(v13[2], &v941, v494, v495, v496);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v499 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v499;
    v14 = **v499;
    v374 = v7 + 7;
    v10 = v9 + 4;
  }
  v500 = v11[319];
  if ((v500 & 0x10000000) != 0)
    v501 = 0x40000000;
  else
    v501 = 0x80000000;
  if ((v500 & 0x20000000) != 0)
    v502 = v501;
  else
    v502 = v500 & 0xCFFFFFFF;
  if ((v502 & 0x40000000) == 0)
  {
    v503 = v6 + 7;
    if ((v502 & 0x80000000) != 0)
    {
      LOBYTE(v512) = -1;
      v513 = 2;
    }
    else
    {
      v504 = *(_QWORD *)(v14 + 2448);
      v505 = v504 + 520 * v502;
      v506 = *(_QWORD *)(v505 + 312);
      v507 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v505 + 336))
      {
        *(_BYTE *)(v505 + 336) = 0;
        v508 = *(unsigned int *)(v505 + 4);
        if ((_DWORD)v508)
        {
          v836 = v507;
          v880 = v506;
          v923 = v10;
          v509 = 0;
          v510 = (unsigned __int8 *)(v504 + 520 * v502 + 36);
          do
          {
            v511 = *v510;
            v510 += 28;
            v509 = sub_223A4EC9C(v509, ((unint64_t)v511 << 8) | 1, 0xFFu);
            --v508;
          }
          while (v508);
          v512 = v509 >> 8;
          if (!(_BYTE)v509)
            LOBYTE(v512) = -1;
          v10 = v923;
          v507 = v836;
          v506 = v880;
        }
        else
        {
          LOBYTE(v512) = -1;
        }
        *(_BYTE *)(v504 + 520 * v502 + 338) = v512;
        v5 = a1;
      }
      else
      {
        LOBYTE(v512) = *(_BYTE *)(v504 + 520 * v502 + 338);
      }
      v513 = v506 > v507;
    }
    v514 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v503));
    a4.f32[2] = (float)v10;
    v515.i64[0] = 0x3F0000003F000000;
    v515.i64[1] = 0x3F0000003F000000;
    v516 = vmulq_n_f32(vaddq_f32(a4, v515), v514);
    v942 = v516.i32[2];
    v941 = v516.i64[0];
    sub_223FFDF1C(v13[2], &v941, v512, v513, v514);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v517 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v517;
    v14 = **v517;
  }
  v518 = v9 + 5;
  v519 = v11[320];
  if ((v519 & 0x10000000) != 0)
    v520 = 0x40000000;
  else
    v520 = 0x80000000;
  if ((v519 & 0x20000000) != 0)
    v521 = v520;
  else
    v521 = v519 & 0xCFFFFFFF;
  if ((v521 & 0x40000000) == 0)
  {
    if ((v521 & 0x80000000) != 0)
    {
      LOBYTE(v530) = -1;
      v531 = 2;
    }
    else
    {
      v522 = *(_QWORD *)(v14 + 2448);
      v523 = v522 + 520 * v521;
      v524 = *(_QWORD *)(v523 + 312);
      v525 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v523 + 336))
      {
        *(_BYTE *)(v523 + 336) = 0;
        v526 = *(unsigned int *)(v523 + 4);
        if ((_DWORD)v526)
        {
          v837 = v525;
          v881 = v524;
          v924 = v518;
          v527 = 0;
          v528 = (unsigned __int8 *)(v522 + 520 * v521 + 36);
          do
          {
            v529 = *v528;
            v528 += 28;
            v527 = sub_223A4EC9C(v527, ((unint64_t)v529 << 8) | 1, 0xFFu);
            --v526;
          }
          while (v526);
          v530 = v527 >> 8;
          if (!(_BYTE)v527)
            LOBYTE(v530) = -1;
          v518 = v924;
          v525 = v837;
          v524 = v881;
        }
        else
        {
          LOBYTE(v530) = -1;
        }
        *(_BYTE *)(v522 + 520 * v521 + 338) = v530;
        v5 = a1;
      }
      else
      {
        LOBYTE(v530) = *(_BYTE *)(v522 + 520 * v521 + 338);
      }
      v531 = v524 > v525;
    }
    a4.f32[0] = (float)v6;
    a4.f32[1] = (float)v7;
    v532 = *(float *)(v14 + 144);
    a4.f32[2] = (float)v518;
    v533.i64[0] = 0x3F0000003F000000;
    v533.i64[1] = 0x3F0000003F000000;
    v534 = vmulq_n_f32(vaddq_f32(a4, v533), v532);
    v942 = v534.i32[2];
    v941 = v534.i64[0];
    sub_223FFDF1C(v13[2], &v941, v530, v531, v532);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v535 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v535;
    v14 = **v535;
    v518 = a2[2] + 5;
  }
  v536 = v11[321];
  if ((v536 & 0x10000000) != 0)
    v537 = 0x40000000;
  else
    v537 = 0x80000000;
  if ((v536 & 0x20000000) != 0)
    v538 = v537;
  else
    v538 = v536 & 0xCFFFFFFF;
  if ((v538 & 0x40000000) == 0)
  {
    v539 = v6 + 1;
    if ((v538 & 0x80000000) != 0)
    {
      LOBYTE(v548) = -1;
      v549 = 2;
    }
    else
    {
      v540 = *(_QWORD *)(v14 + 2448);
      v541 = v540 + 520 * v538;
      v542 = *(_QWORD *)(v541 + 312);
      v543 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v541 + 336))
      {
        *(_BYTE *)(v541 + 336) = 0;
        v544 = *(unsigned int *)(v541 + 4);
        if ((_DWORD)v544)
        {
          v838 = v543;
          v882 = v542;
          v925 = v518;
          v545 = 0;
          v546 = (unsigned __int8 *)(v540 + 520 * v538 + 36);
          do
          {
            v547 = *v546;
            v546 += 28;
            v545 = sub_223A4EC9C(v545, ((unint64_t)v547 << 8) | 1, 0xFFu);
            --v544;
          }
          while (v544);
          v548 = v545 >> 8;
          if (!(_BYTE)v545)
            LOBYTE(v548) = -1;
          v518 = v925;
          v543 = v838;
          v542 = v882;
        }
        else
        {
          LOBYTE(v548) = -1;
        }
        *(_BYTE *)(v540 + 520 * v538 + 338) = v548;
        v5 = a1;
      }
      else
      {
        LOBYTE(v548) = *(_BYTE *)(v540 + 520 * v538 + 338);
      }
      v549 = v542 > v543;
    }
    v550 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v539));
    a4.f32[2] = (float)v518;
    v551.i64[0] = 0x3F0000003F000000;
    v551.i64[1] = 0x3F0000003F000000;
    v552 = vmulq_n_f32(vaddq_f32(a4, v551), v550);
    v942 = v552.i32[2];
    v941 = v552.i64[0];
    sub_223FFDF1C(v13[2], &v941, v548, v549, v550);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v553 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v553;
    v14 = **v553;
    v518 = a2[2] + 5;
  }
  v554 = v11[322];
  if ((v554 & 0x10000000) != 0)
    v555 = 0x40000000;
  else
    v555 = 0x80000000;
  if ((v554 & 0x20000000) != 0)
    v556 = v555;
  else
    v556 = v554 & 0xCFFFFFFF;
  if ((v556 & 0x40000000) == 0)
  {
    v557 = v6 + 2;
    if ((v556 & 0x80000000) != 0)
    {
      LOBYTE(v566) = -1;
      v567 = 2;
    }
    else
    {
      v558 = *(_QWORD *)(v14 + 2448);
      v559 = v558 + 520 * v556;
      v560 = *(_QWORD *)(v559 + 312);
      v561 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v559 + 336))
      {
        *(_BYTE *)(v559 + 336) = 0;
        v562 = *(unsigned int *)(v559 + 4);
        if ((_DWORD)v562)
        {
          v839 = v561;
          v883 = v560;
          v926 = v518;
          v563 = 0;
          v564 = (unsigned __int8 *)(v558 + 520 * v556 + 36);
          do
          {
            v565 = *v564;
            v564 += 28;
            v563 = sub_223A4EC9C(v563, ((unint64_t)v565 << 8) | 1, 0xFFu);
            --v562;
          }
          while (v562);
          v566 = v563 >> 8;
          if (!(_BYTE)v563)
            LOBYTE(v566) = -1;
          v518 = v926;
          v561 = v839;
          v560 = v883;
        }
        else
        {
          LOBYTE(v566) = -1;
        }
        *(_BYTE *)(v558 + 520 * v556 + 338) = v566;
        v5 = a1;
      }
      else
      {
        LOBYTE(v566) = *(_BYTE *)(v558 + 520 * v556 + 338);
      }
      v567 = v560 > v561;
    }
    v568 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v557));
    a4.f32[2] = (float)v518;
    v569.i64[0] = 0x3F0000003F000000;
    v569.i64[1] = 0x3F0000003F000000;
    v570 = vmulq_n_f32(vaddq_f32(a4, v569), v568);
    v942 = v570.i32[2];
    v941 = v570.i64[0];
    sub_223FFDF1C(v13[2], &v941, v566, v567, v568);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v571 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v571;
    v14 = **v571;
    v518 = a2[2] + 5;
  }
  v572 = v11[323];
  if ((v572 & 0x10000000) != 0)
    v573 = 0x40000000;
  else
    v573 = 0x80000000;
  if ((v572 & 0x20000000) != 0)
    v574 = v573;
  else
    v574 = v572 & 0xCFFFFFFF;
  if ((v574 & 0x40000000) == 0)
  {
    v575 = v6 + 3;
    if ((v574 & 0x80000000) != 0)
    {
      LOBYTE(v584) = -1;
      v585 = 2;
    }
    else
    {
      v576 = *(_QWORD *)(v14 + 2448);
      v577 = v576 + 520 * v574;
      v578 = *(_QWORD *)(v577 + 312);
      v579 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v577 + 336))
      {
        *(_BYTE *)(v577 + 336) = 0;
        v580 = *(unsigned int *)(v577 + 4);
        if ((_DWORD)v580)
        {
          v840 = v579;
          v884 = v578;
          v927 = v518;
          v581 = 0;
          v582 = (unsigned __int8 *)(v576 + 520 * v574 + 36);
          do
          {
            v583 = *v582;
            v582 += 28;
            v581 = sub_223A4EC9C(v581, ((unint64_t)v583 << 8) | 1, 0xFFu);
            --v580;
          }
          while (v580);
          v584 = v581 >> 8;
          if (!(_BYTE)v581)
            LOBYTE(v584) = -1;
          v518 = v927;
          v579 = v840;
          v578 = v884;
        }
        else
        {
          LOBYTE(v584) = -1;
        }
        *(_BYTE *)(v576 + 520 * v574 + 338) = v584;
        v5 = a1;
      }
      else
      {
        LOBYTE(v584) = *(_BYTE *)(v576 + 520 * v574 + 338);
      }
      v585 = v578 > v579;
    }
    v586 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v575));
    a4.f32[2] = (float)v518;
    v587.i64[0] = 0x3F0000003F000000;
    v587.i64[1] = 0x3F0000003F000000;
    v588 = vmulq_n_f32(vaddq_f32(a4, v587), v586);
    v942 = v588.i32[2];
    v941 = v588.i64[0];
    sub_223FFDF1C(v13[2], &v941, v584, v585, v586);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v589 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v589;
    v14 = **v589;
    v518 = a2[2] + 5;
  }
  v590 = v11[324];
  if ((v590 & 0x10000000) != 0)
    v591 = 0x40000000;
  else
    v591 = 0x80000000;
  if ((v590 & 0x20000000) != 0)
    v592 = v591;
  else
    v592 = v590 & 0xCFFFFFFF;
  if ((v592 & 0x40000000) == 0)
  {
    v593 = v6 + 4;
    if ((v592 & 0x80000000) != 0)
    {
      LOBYTE(v602) = -1;
      v603 = 2;
    }
    else
    {
      v594 = *(_QWORD *)(v14 + 2448);
      v595 = v594 + 520 * v592;
      v596 = *(_QWORD *)(v595 + 312);
      v597 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v595 + 336))
      {
        *(_BYTE *)(v595 + 336) = 0;
        v598 = *(unsigned int *)(v595 + 4);
        if ((_DWORD)v598)
        {
          v841 = v597;
          v885 = v596;
          v928 = v518;
          v599 = 0;
          v600 = (unsigned __int8 *)(v594 + 520 * v592 + 36);
          do
          {
            v601 = *v600;
            v600 += 28;
            v599 = sub_223A4EC9C(v599, ((unint64_t)v601 << 8) | 1, 0xFFu);
            --v598;
          }
          while (v598);
          v602 = v599 >> 8;
          if (!(_BYTE)v599)
            LOBYTE(v602) = -1;
          v518 = v928;
          v597 = v841;
          v596 = v885;
        }
        else
        {
          LOBYTE(v602) = -1;
        }
        *(_BYTE *)(v594 + 520 * v592 + 338) = v602;
        v5 = a1;
      }
      else
      {
        LOBYTE(v602) = *(_BYTE *)(v594 + 520 * v592 + 338);
      }
      v603 = v596 > v597;
    }
    v604 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v593));
    a4.f32[2] = (float)v518;
    v605.i64[0] = 0x3F0000003F000000;
    v605.i64[1] = 0x3F0000003F000000;
    v606 = vmulq_n_f32(vaddq_f32(a4, v605), v604);
    v942 = v606.i32[2];
    v941 = v606.i64[0];
    sub_223FFDF1C(v13[2], &v941, v602, v603, v604);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v607 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v607;
    v14 = **v607;
    v518 = a2[2] + 5;
  }
  v608 = v11[325];
  if ((v608 & 0x10000000) != 0)
    v609 = 0x40000000;
  else
    v609 = 0x80000000;
  if ((v608 & 0x20000000) != 0)
    v610 = v609;
  else
    v610 = v608 & 0xCFFFFFFF;
  if ((v610 & 0x40000000) == 0)
  {
    v611 = v6 + 5;
    if ((v610 & 0x80000000) != 0)
    {
      LOBYTE(v620) = -1;
      v621 = 2;
    }
    else
    {
      v612 = *(_QWORD *)(v14 + 2448);
      v613 = v612 + 520 * v610;
      v614 = *(_QWORD *)(v613 + 312);
      v615 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v613 + 336))
      {
        *(_BYTE *)(v613 + 336) = 0;
        v616 = *(unsigned int *)(v613 + 4);
        if ((_DWORD)v616)
        {
          v842 = v615;
          v886 = v614;
          v929 = v518;
          v617 = 0;
          v618 = (unsigned __int8 *)(v612 + 520 * v610 + 36);
          do
          {
            v619 = *v618;
            v618 += 28;
            v617 = sub_223A4EC9C(v617, ((unint64_t)v619 << 8) | 1, 0xFFu);
            --v616;
          }
          while (v616);
          v620 = v617 >> 8;
          if (!(_BYTE)v617)
            LOBYTE(v620) = -1;
          v518 = v929;
          v615 = v842;
          v614 = v886;
        }
        else
        {
          LOBYTE(v620) = -1;
        }
        *(_BYTE *)(v612 + 520 * v610 + 338) = v620;
        v5 = a1;
      }
      else
      {
        LOBYTE(v620) = *(_BYTE *)(v612 + 520 * v610 + 338);
      }
      v621 = v614 > v615;
    }
    v622 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v611));
    a4.f32[2] = (float)v518;
    v623.i64[0] = 0x3F0000003F000000;
    v623.i64[1] = 0x3F0000003F000000;
    v624 = vmulq_n_f32(vaddq_f32(a4, v623), v622);
    v942 = v624.i32[2];
    v941 = v624.i64[0];
    sub_223FFDF1C(v13[2], &v941, v620, v621, v622);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v625 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v625;
    v14 = **v625;
    v518 = a2[2] + 5;
  }
  v626 = v11[326];
  if ((v626 & 0x10000000) != 0)
    v627 = 0x40000000;
  else
    v627 = 0x80000000;
  if ((v626 & 0x20000000) != 0)
    v628 = v627;
  else
    v628 = v626 & 0xCFFFFFFF;
  if ((v628 & 0x40000000) == 0)
  {
    v629 = v6 + 6;
    if ((v628 & 0x80000000) != 0)
    {
      LOBYTE(v638) = -1;
      v639 = 2;
    }
    else
    {
      v630 = *(_QWORD *)(v14 + 2448);
      v631 = v630 + 520 * v628;
      v632 = *(_QWORD *)(v631 + 312);
      v633 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v631 + 336))
      {
        *(_BYTE *)(v631 + 336) = 0;
        v634 = *(unsigned int *)(v631 + 4);
        if ((_DWORD)v634)
        {
          v843 = v633;
          v887 = v632;
          v930 = v518;
          v635 = 0;
          v636 = (unsigned __int8 *)(v630 + 520 * v628 + 36);
          do
          {
            v637 = *v636;
            v636 += 28;
            v635 = sub_223A4EC9C(v635, ((unint64_t)v637 << 8) | 1, 0xFFu);
            --v634;
          }
          while (v634);
          v638 = v635 >> 8;
          if (!(_BYTE)v635)
            LOBYTE(v638) = -1;
          v518 = v930;
          v633 = v843;
          v632 = v887;
        }
        else
        {
          LOBYTE(v638) = -1;
        }
        *(_BYTE *)(v630 + 520 * v628 + 338) = v638;
        v5 = a1;
      }
      else
      {
        LOBYTE(v638) = *(_BYTE *)(v630 + 520 * v628 + 338);
      }
      v639 = v632 > v633;
    }
    v640 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v629));
    a4.f32[2] = (float)v518;
    v641.i64[0] = 0x3F0000003F000000;
    v641.i64[1] = 0x3F0000003F000000;
    v642 = vmulq_n_f32(vaddq_f32(a4, v641), v640);
    v942 = v642.i32[2];
    v941 = v642.i64[0];
    sub_223FFDF1C(v13[2], &v941, v638, v639, v640);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v643 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v643;
    v14 = **v643;
    v518 = a2[2] + 5;
  }
  v644 = v11[327];
  if ((v644 & 0x10000000) != 0)
    v645 = 0x40000000;
  else
    v645 = 0x80000000;
  if ((v644 & 0x20000000) != 0)
    v646 = v645;
  else
    v646 = v644 & 0xCFFFFFFF;
  if ((v646 & 0x40000000) == 0)
  {
    v647 = v6 + 7;
    if ((v646 & 0x80000000) != 0)
    {
      LOBYTE(v656) = -1;
      v657 = 2;
    }
    else
    {
      v648 = *(_QWORD *)(v14 + 2448);
      v649 = v648 + 520 * v646;
      v650 = *(_QWORD *)(v649 + 312);
      v651 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v649 + 336))
      {
        *(_BYTE *)(v649 + 336) = 0;
        v652 = *(unsigned int *)(v649 + 4);
        if ((_DWORD)v652)
        {
          v844 = v651;
          v888 = v650;
          v931 = v518;
          v653 = 0;
          v654 = (unsigned __int8 *)(v648 + 520 * v646 + 36);
          do
          {
            v655 = *v654;
            v654 += 28;
            v653 = sub_223A4EC9C(v653, ((unint64_t)v655 << 8) | 1, 0xFFu);
            --v652;
          }
          while (v652);
          v656 = v653 >> 8;
          if (!(_BYTE)v653)
            LOBYTE(v656) = -1;
          v518 = v931;
          v651 = v844;
          v650 = v888;
        }
        else
        {
          LOBYTE(v656) = -1;
        }
        *(_BYTE *)(v648 + 520 * v646 + 338) = v656;
        v5 = a1;
      }
      else
      {
        LOBYTE(v656) = *(_BYTE *)(v648 + 520 * v646 + 338);
      }
      v657 = v650 > v651;
    }
    v658 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v647));
    a4.f32[2] = (float)v518;
    v659.i64[0] = 0x3F0000003F000000;
    v659.i64[1] = 0x3F0000003F000000;
    v660 = vmulq_n_f32(vaddq_f32(a4, v659), v658);
    v942 = v660.i32[2];
    v941 = v660.i64[0];
    sub_223FFDF1C(v13[2], &v941, v656, v657, v658);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v661 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v661;
    v14 = **v661;
    v518 = a2[2] + 5;
  }
  v662 = v7 + 1;
  v663 = v11[328];
  if ((v663 & 0x10000000) != 0)
    v664 = 0x40000000;
  else
    v664 = 0x80000000;
  if ((v663 & 0x20000000) != 0)
    v665 = v664;
  else
    v665 = v663 & 0xCFFFFFFF;
  if ((v665 & 0x40000000) == 0)
  {
    if ((v665 & 0x80000000) != 0)
    {
      LOBYTE(v674) = -1;
      v675 = 2;
    }
    else
    {
      v666 = *(_QWORD *)(v14 + 2448);
      v667 = v666 + 520 * v665;
      v668 = *(_QWORD *)(v667 + 312);
      v669 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v667 + 336))
      {
        *(_BYTE *)(v667 + 336) = 0;
        v670 = *(unsigned int *)(v667 + 4);
        if ((_DWORD)v670)
        {
          v805 = v669;
          v845 = v668;
          v932 = v518;
          v671 = 0;
          v672 = (unsigned __int8 *)(v666 + 520 * v665 + 36);
          do
          {
            v673 = *v672;
            v672 += 28;
            v671 = sub_223A4EC9C(v671, ((unint64_t)v673 << 8) | 1, 0xFFu);
            --v670;
          }
          while (v670);
          v674 = v671 >> 8;
          if (!(_BYTE)v671)
            LOBYTE(v674) = -1;
          v518 = v932;
          v662 = v7 + 1;
          v669 = v805;
          v668 = v845;
        }
        else
        {
          LOBYTE(v674) = -1;
        }
        *(_BYTE *)(v666 + 520 * v665 + 338) = v674;
        v5 = a1;
      }
      else
      {
        LOBYTE(v674) = *(_BYTE *)(v666 + 520 * v665 + 338);
      }
      v675 = v668 > v669;
    }
    v676 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v6));
    a4.f32[2] = (float)v518;
    v677.i64[0] = 0x3F0000003F000000;
    v677.i64[1] = 0x3F0000003F000000;
    v678 = vmulq_n_f32(vaddq_f32(a4, v677), v676);
    v942 = v678.i32[2];
    v941 = v678.i64[0];
    sub_223FFDF1C(v13[2], &v941, v674, v675, v676);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v679 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v679;
    v14 = **v679;
    v662 = a2[1] + 1;
    v518 = a2[2] + 5;
  }
  v680 = v11[329];
  if ((v680 & 0x10000000) != 0)
    v681 = 0x40000000;
  else
    v681 = 0x80000000;
  if ((v680 & 0x20000000) != 0)
    v682 = v681;
  else
    v682 = v680 & 0xCFFFFFFF;
  if ((v682 & 0x40000000) == 0)
  {
    v683 = v6 + 1;
    if ((v682 & 0x80000000) != 0)
    {
      LOBYTE(v692) = -1;
      v693 = 2;
    }
    else
    {
      v684 = *(_QWORD *)(v14 + 2448);
      v685 = v684 + 520 * v682;
      v686 = *(_QWORD *)(v685 + 312);
      v687 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v685 + 336))
      {
        *(_BYTE *)(v685 + 336) = 0;
        v688 = *(unsigned int *)(v685 + 4);
        if ((_DWORD)v688)
        {
          v846 = v686;
          v889 = v662;
          v933 = v518;
          v689 = 0;
          v690 = (unsigned __int8 *)(v684 + 520 * v682 + 36);
          do
          {
            v691 = *v690;
            v690 += 28;
            v689 = sub_223A4EC9C(v689, ((unint64_t)v691 << 8) | 1, 0xFFu);
            --v688;
          }
          while (v688);
          v692 = v689 >> 8;
          if (!(_BYTE)v689)
            LOBYTE(v692) = -1;
          v518 = v933;
          v662 = v889;
          v686 = v846;
        }
        else
        {
          LOBYTE(v692) = -1;
        }
        *(_BYTE *)(v684 + 520 * v682 + 338) = v692;
        v5 = a1;
      }
      else
      {
        LOBYTE(v692) = *(_BYTE *)(v684 + 520 * v682 + 338);
      }
      v693 = v686 > v687;
    }
    v694 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v683));
    a4.f32[2] = (float)v518;
    v695.i64[0] = 0x3F0000003F000000;
    v695.i64[1] = 0x3F0000003F000000;
    v696 = vmulq_n_f32(vaddq_f32(a4, v695), v694);
    v942 = v696.i32[2];
    v941 = v696.i64[0];
    sub_223FFDF1C(v13[2], &v941, v692, v693, v694);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v697 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v697;
    v14 = **v697;
    v662 = a2[1] + 1;
    v518 = a2[2] + 5;
  }
  v698 = v11[330];
  if ((v698 & 0x10000000) != 0)
    v699 = 0x40000000;
  else
    v699 = 0x80000000;
  if ((v698 & 0x20000000) != 0)
    v700 = v699;
  else
    v700 = v698 & 0xCFFFFFFF;
  if ((v700 & 0x40000000) == 0)
  {
    v701 = v6 + 2;
    if ((v700 & 0x80000000) != 0)
    {
      LOBYTE(v710) = -1;
      v711 = 2;
    }
    else
    {
      v702 = *(_QWORD *)(v14 + 2448);
      v703 = v702 + 520 * v700;
      v704 = *(_QWORD *)(v703 + 312);
      v705 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v703 + 336))
      {
        *(_BYTE *)(v703 + 336) = 0;
        v706 = *(unsigned int *)(v703 + 4);
        if ((_DWORD)v706)
        {
          v806 = v705;
          v847 = v704;
          v890 = v662;
          v934 = v518;
          v707 = 0;
          v708 = (unsigned __int8 *)(v702 + 520 * v700 + 36);
          do
          {
            v709 = *v708;
            v708 += 28;
            v707 = sub_223A4EC9C(v707, ((unint64_t)v709 << 8) | 1, 0xFFu);
            --v706;
          }
          while (v706);
          v710 = v707 >> 8;
          if (!(_BYTE)v707)
            LOBYTE(v710) = -1;
          v518 = v934;
          v662 = v890;
          v705 = v806;
          v704 = v847;
        }
        else
        {
          LOBYTE(v710) = -1;
        }
        *(_BYTE *)(v702 + 520 * v700 + 338) = v710;
        v5 = a1;
      }
      else
      {
        LOBYTE(v710) = *(_BYTE *)(v702 + 520 * v700 + 338);
      }
      v711 = v704 > v705;
    }
    v712 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v701));
    a4.f32[2] = (float)v518;
    v713.i64[0] = 0x3F0000003F000000;
    v713.i64[1] = 0x3F0000003F000000;
    v714 = vmulq_n_f32(vaddq_f32(a4, v713), v712);
    v942 = v714.i32[2];
    v941 = v714.i64[0];
    sub_223FFDF1C(v13[2], &v941, v710, v711, v712);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v715 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v715;
    v14 = **v715;
    v662 = a2[1] + 1;
    v518 = a2[2] + 5;
  }
  v716 = v11[331];
  if ((v716 & 0x10000000) != 0)
    v717 = 0x40000000;
  else
    v717 = 0x80000000;
  if ((v716 & 0x20000000) != 0)
    v718 = v717;
  else
    v718 = v716 & 0xCFFFFFFF;
  if ((v718 & 0x40000000) == 0)
  {
    v719 = v6 + 3;
    if ((v718 & 0x80000000) != 0)
    {
      LOBYTE(v728) = -1;
      v729 = 2;
    }
    else
    {
      v720 = *(_QWORD *)(v14 + 2448);
      v721 = v720 + 520 * v718;
      v722 = *(_QWORD *)(v721 + 312);
      v723 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v721 + 336))
      {
        *(_BYTE *)(v721 + 336) = 0;
        v724 = *(unsigned int *)(v721 + 4);
        if ((_DWORD)v724)
        {
          v848 = v722;
          v891 = v662;
          v935 = v518;
          v725 = 0;
          v726 = (unsigned __int8 *)(v720 + 520 * v718 + 36);
          do
          {
            v727 = *v726;
            v726 += 28;
            v725 = sub_223A4EC9C(v725, ((unint64_t)v727 << 8) | 1, 0xFFu);
            --v724;
          }
          while (v724);
          v728 = v725 >> 8;
          if (!(_BYTE)v725)
            LOBYTE(v728) = -1;
          v518 = v935;
          v662 = v891;
          v722 = v848;
        }
        else
        {
          LOBYTE(v728) = -1;
        }
        *(_BYTE *)(v720 + 520 * v718 + 338) = v728;
        v5 = a1;
      }
      else
      {
        LOBYTE(v728) = *(_BYTE *)(v720 + 520 * v718 + 338);
      }
      v729 = v722 > v723;
    }
    v730 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v719));
    a4.f32[2] = (float)v518;
    v731.i64[0] = 0x3F0000003F000000;
    v731.i64[1] = 0x3F0000003F000000;
    v732 = vmulq_n_f32(vaddq_f32(a4, v731), v730);
    v942 = v732.i32[2];
    v941 = v732.i64[0];
    sub_223FFDF1C(v13[2], &v941, v728, v729, v730);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v733 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v733;
    v14 = **v733;
    v662 = a2[1] + 1;
    v518 = a2[2] + 5;
  }
  v734 = v11[332];
  if ((v734 & 0x10000000) != 0)
    v735 = 0x40000000;
  else
    v735 = 0x80000000;
  if ((v734 & 0x20000000) != 0)
    v736 = v735;
  else
    v736 = v734 & 0xCFFFFFFF;
  if ((v736 & 0x40000000) == 0)
  {
    v737 = v6 + 4;
    if ((v736 & 0x80000000) != 0)
    {
      LOBYTE(v746) = -1;
      v747 = 2;
    }
    else
    {
      v738 = *(_QWORD *)(v14 + 2448);
      v739 = v738 + 520 * v736;
      v740 = *(_QWORD *)(v739 + 312);
      v741 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v739 + 336))
      {
        *(_BYTE *)(v739 + 336) = 0;
        v742 = *(unsigned int *)(v739 + 4);
        if ((_DWORD)v742)
        {
          v807 = v741;
          v849 = v740;
          v892 = v662;
          v936 = v518;
          v743 = 0;
          v744 = (unsigned __int8 *)(v738 + 520 * v736 + 36);
          do
          {
            v745 = *v744;
            v744 += 28;
            v743 = sub_223A4EC9C(v743, ((unint64_t)v745 << 8) | 1, 0xFFu);
            --v742;
          }
          while (v742);
          v746 = v743 >> 8;
          if (!(_BYTE)v743)
            LOBYTE(v746) = -1;
          v518 = v936;
          v662 = v892;
          v741 = v807;
          v740 = v849;
        }
        else
        {
          LOBYTE(v746) = -1;
        }
        *(_BYTE *)(v738 + 520 * v736 + 338) = v746;
        v5 = a1;
      }
      else
      {
        LOBYTE(v746) = *(_BYTE *)(v738 + 520 * v736 + 338);
      }
      v747 = v740 > v741;
    }
    v748 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v737));
    a4.f32[2] = (float)v518;
    v749.i64[0] = 0x3F0000003F000000;
    v749.i64[1] = 0x3F0000003F000000;
    v750 = vmulq_n_f32(vaddq_f32(a4, v749), v748);
    v942 = v750.i32[2];
    v941 = v750.i64[0];
    sub_223FFDF1C(v13[2], &v941, v746, v747, v748);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v751 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v751;
    v14 = **v751;
    v662 = a2[1] + 1;
    v518 = a2[2] + 5;
  }
  v752 = v11[333];
  if ((v752 & 0x10000000) != 0)
    v753 = 0x40000000;
  else
    v753 = 0x80000000;
  if ((v752 & 0x20000000) != 0)
    v754 = v753;
  else
    v754 = v752 & 0xCFFFFFFF;
  if ((v754 & 0x40000000) == 0)
  {
    v755 = v6 + 5;
    if ((v754 & 0x80000000) != 0)
    {
      LOBYTE(v764) = -1;
      v765 = 2;
    }
    else
    {
      v756 = *(_QWORD *)(v14 + 2448);
      v757 = v756 + 520 * v754;
      v758 = *(_QWORD *)(v757 + 312);
      v759 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v757 + 336))
      {
        *(_BYTE *)(v757 + 336) = 0;
        v760 = *(unsigned int *)(v757 + 4);
        if ((_DWORD)v760)
        {
          v850 = v758;
          v893 = v662;
          v937 = v518;
          v761 = 0;
          v762 = (unsigned __int8 *)(v756 + 520 * v754 + 36);
          do
          {
            v763 = *v762;
            v762 += 28;
            v761 = sub_223A4EC9C(v761, ((unint64_t)v763 << 8) | 1, 0xFFu);
            --v760;
          }
          while (v760);
          v764 = v761 >> 8;
          if (!(_BYTE)v761)
            LOBYTE(v764) = -1;
          v518 = v937;
          v662 = v893;
          v758 = v850;
        }
        else
        {
          LOBYTE(v764) = -1;
        }
        *(_BYTE *)(v756 + 520 * v754 + 338) = v764;
        v5 = a1;
      }
      else
      {
        LOBYTE(v764) = *(_BYTE *)(v756 + 520 * v754 + 338);
      }
      v765 = v758 > v759;
    }
    v766 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v755));
    a4.f32[2] = (float)v518;
    v767.i64[0] = 0x3F0000003F000000;
    v767.i64[1] = 0x3F0000003F000000;
    v768 = vmulq_n_f32(vaddq_f32(a4, v767), v766);
    v942 = v768.i32[2];
    v941 = v768.i64[0];
    sub_223FFDF1C(v13[2], &v941, v764, v765, v766);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v769 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v769;
    v14 = **v769;
    v662 = a2[1] + 1;
    v518 = a2[2] + 5;
  }
  v770 = v11[334];
  if ((v770 & 0x10000000) != 0)
    v771 = 0x40000000;
  else
    v771 = 0x80000000;
  if ((v770 & 0x20000000) != 0)
    v772 = v771;
  else
    v772 = v770 & 0xCFFFFFFF;
  if ((v772 & 0x40000000) == 0)
  {
    v773 = v6 + 6;
    if ((v772 & 0x80000000) != 0)
    {
      LOBYTE(v782) = -1;
      v783 = 2;
    }
    else
    {
      v774 = *(_QWORD *)(v14 + 2448);
      v775 = v774 + 520 * v772;
      v776 = *(_QWORD *)(v775 + 312);
      v777 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v775 + 336))
      {
        *(_BYTE *)(v775 + 336) = 0;
        v778 = *(unsigned int *)(v775 + 4);
        if ((_DWORD)v778)
        {
          v808 = v777;
          v851 = v776;
          v894 = v662;
          v938 = v518;
          v779 = 0;
          v780 = (unsigned __int8 *)(v774 + 520 * v772 + 36);
          do
          {
            v781 = *v780;
            v780 += 28;
            v779 = sub_223A4EC9C(v779, ((unint64_t)v781 << 8) | 1, 0xFFu);
            --v778;
          }
          while (v778);
          v782 = v779 >> 8;
          if (!(_BYTE)v779)
            LOBYTE(v782) = -1;
          v518 = v938;
          v662 = v894;
          v777 = v808;
          v776 = v851;
        }
        else
        {
          LOBYTE(v782) = -1;
        }
        *(_BYTE *)(v774 + 520 * v772 + 338) = v782;
        v5 = a1;
      }
      else
      {
        LOBYTE(v782) = *(_BYTE *)(v774 + 520 * v772 + 338);
      }
      v783 = v776 > v777;
    }
    v784 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v773));
    a4.f32[2] = (float)v518;
    v785.i64[0] = 0x3F0000003F000000;
    v785.i64[1] = 0x3F0000003F000000;
    v786 = vmulq_n_f32(vaddq_f32(a4, v785), v784);
    v942 = v786.i32[2];
    v941 = v786.i64[0];
    sub_223FFDF1C(v13[2], &v941, v782, v783, v784);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v787 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v787;
    v14 = **v787;
    v662 = a2[1] + 1;
    v518 = a2[2] + 5;
  }
  v788 = v11[335];
  if ((v788 & 0x10000000) != 0)
    v789 = 0x40000000;
  else
    v789 = 0x80000000;
  if ((v788 & 0x20000000) != 0)
    v790 = v789;
  else
    v790 = v788 & 0xCFFFFFFF;
  if ((v790 & 0x40000000) == 0)
  {
    v791 = v6 + 7;
    if ((v790 & 0x80000000) != 0)
    {
      LOBYTE(v800) = -1;
      v801 = 2;
    }
    else
    {
      v792 = *(_QWORD *)(v14 + 2448);
      v793 = v792 + 520 * v790;
      v794 = *(_QWORD *)(v793 + 312);
      v795 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v793 + 336))
      {
        *(_BYTE *)(v793 + 336) = 0;
        v796 = *(unsigned int *)(v793 + 4);
        if ((_DWORD)v796)
        {
          v852 = v794;
          v895 = v662;
          v939 = v518;
          v797 = 0;
          v798 = (unsigned __int8 *)(v792 + 520 * v790 + 36);
          do
          {
            v799 = *v798;
            v798 += 28;
            v797 = sub_223A4EC9C(v797, ((unint64_t)v799 << 8) | 1, 0xFFu);
            --v796;
          }
          while (v796);
          v800 = v797 >> 8;
          if (!(_BYTE)v797)
            LOBYTE(v800) = -1;
          v518 = v939;
          v662 = v895;
          v794 = v852;
        }
        else
        {
          LOBYTE(v800) = -1;
        }
        *(_BYTE *)(v792 + 520 * v790 + 338) = v800;
        v5 = a1;
      }
      else
      {
        LOBYTE(v800) = *(_BYTE *)(v792 + 520 * v790 + 338);
      }
      v801 = v794 > v795;
    }
    v802 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v791));
    a4.f32[2] = (float)v518;
    v803.i64[0] = 0x3F0000003F000000;
    v803.i64[1] = 0x3F0000003F000000;
    v804 = vmulq_n_f32(vaddq_f32(a4, v803), v802);
    v942 = v804.i32[2];
    v941 = v804.i64[0];
    sub_223FFDF1C(v13[2], &v941, v800, v801, v802);
  }
  sub_223D76CA4(v5, a2, a3, a4);
}

void sub_223D76CA4(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t **v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unint64_t v42;
  int v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t **v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unint64_t v60;
  int v61;
  float v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t **v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unint64_t v78;
  int v79;
  float v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t **v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unint64_t v96;
  int v97;
  float v98;
  float32x4_t v99;
  float32x4_t v100;
  uint64_t **v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unsigned __int8 *v112;
  unsigned int v113;
  unint64_t v114;
  int v115;
  float v116;
  float32x4_t v117;
  float32x4_t v118;
  uint64_t **v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unsigned __int8 *v130;
  unsigned int v131;
  unint64_t v132;
  int v133;
  float v134;
  float32x4_t v135;
  float32x4_t v136;
  uint64_t **v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unsigned int v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  uint64_t **v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unsigned __int8 *v167;
  unsigned int v168;
  unint64_t v169;
  int v170;
  float v171;
  float32x4_t v172;
  float32x4_t v173;
  uint64_t **v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unsigned __int8 *v185;
  unsigned int v186;
  unint64_t v187;
  int v188;
  float v189;
  float32x4_t v190;
  float32x4_t v191;
  uint64_t **v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unsigned __int8 *v203;
  unsigned int v204;
  unint64_t v205;
  int v206;
  float v207;
  float32x4_t v208;
  float32x4_t v209;
  uint64_t **v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unsigned __int8 *v221;
  unsigned int v222;
  unint64_t v223;
  int v224;
  float v225;
  float32x4_t v226;
  float32x4_t v227;
  uint64_t **v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unsigned __int8 *v239;
  unsigned int v240;
  unint64_t v241;
  int v242;
  float v243;
  float32x4_t v244;
  float32x4_t v245;
  uint64_t **v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unsigned __int8 *v257;
  unsigned int v258;
  unint64_t v259;
  int v260;
  float v261;
  float32x4_t v262;
  float32x4_t v263;
  uint64_t **v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unsigned __int8 *v275;
  unsigned int v276;
  unint64_t v277;
  int v278;
  float v279;
  float32x4_t v280;
  float32x4_t v281;
  uint64_t **v282;
  int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unsigned __int8 *v293;
  unsigned int v294;
  unint64_t v295;
  int v296;
  float v297;
  float32x4_t v298;
  float32x4_t v299;
  uint64_t **v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unsigned __int8 *v311;
  unsigned int v312;
  unint64_t v313;
  int v314;
  float v315;
  float32x4_t v316;
  float32x4_t v317;
  uint64_t **v318;
  int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unsigned __int8 *v329;
  unsigned int v330;
  unint64_t v331;
  int v332;
  float v333;
  float32x4_t v334;
  float32x4_t v335;
  uint64_t **v336;
  int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unsigned __int8 *v347;
  unsigned int v348;
  unint64_t v349;
  int v350;
  float v351;
  float32x4_t v352;
  float32x4_t v353;
  uint64_t **v354;
  int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unsigned __int8 *v365;
  unsigned int v366;
  unint64_t v367;
  int v368;
  float v369;
  float32x4_t v370;
  float32x4_t v371;
  uint64_t **v372;
  int v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unsigned __int8 *v383;
  unsigned int v384;
  unint64_t v385;
  int v386;
  float v387;
  float32x4_t v388;
  float32x4_t v389;
  uint64_t **v390;
  int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unsigned __int8 *v401;
  unsigned int v402;
  unint64_t v403;
  int v404;
  float v405;
  float32x4_t v406;
  float32x4_t v407;
  uint64_t **v408;
  int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unsigned __int8 *v419;
  unsigned int v420;
  unint64_t v421;
  int v422;
  float v423;
  float32x4_t v424;
  float32x4_t v425;
  uint64_t **v426;
  int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  unsigned __int8 *v437;
  unsigned int v438;
  unint64_t v439;
  int v440;
  float v441;
  float32x4_t v442;
  float32x4_t v443;
  uint64_t **v444;
  unsigned int v445;
  int v446;
  unsigned int v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unsigned __int8 *v455;
  unsigned int v456;
  unint64_t v457;
  int v458;
  float v459;
  float32x4_t v460;
  float32x4_t v461;
  uint64_t **v462;
  int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unsigned __int8 *v473;
  unsigned int v474;
  unint64_t v475;
  int v476;
  float v477;
  float32x4_t v478;
  float32x4_t v479;
  uint64_t **v480;
  int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unsigned __int8 *v491;
  unsigned int v492;
  unint64_t v493;
  int v494;
  float v495;
  float32x4_t v496;
  float32x4_t v497;
  uint64_t **v498;
  int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unsigned __int8 *v509;
  unsigned int v510;
  unint64_t v511;
  int v512;
  float v513;
  float32x4_t v514;
  float32x4_t v515;
  uint64_t **v516;
  int v517;
  unsigned int v518;
  unsigned int v519;
  unsigned int v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unsigned __int8 *v527;
  unsigned int v528;
  unint64_t v529;
  int v530;
  float v531;
  float32x4_t v532;
  float32x4_t v533;
  uint64_t **v534;
  int v535;
  unsigned int v536;
  unsigned int v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  unsigned __int8 *v545;
  unsigned int v546;
  unint64_t v547;
  int v548;
  float v549;
  float32x4_t v550;
  float32x4_t v551;
  uint64_t **v552;
  int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  unsigned __int8 *v563;
  unsigned int v564;
  unint64_t v565;
  int v566;
  float v567;
  float32x4_t v568;
  float32x4_t v569;
  uint64_t **v570;
  int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unsigned __int8 *v581;
  unsigned int v582;
  unint64_t v583;
  int v584;
  float v585;
  float32x4_t v586;
  float32x4_t v587;
  uint64_t **v588;
  unsigned int v589;
  int v590;
  unsigned int v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  unsigned __int8 *v599;
  unsigned int v600;
  unint64_t v601;
  int v602;
  float v603;
  float32x4_t v604;
  float32x4_t v605;
  uint64_t **v606;
  int v607;
  unsigned int v608;
  unsigned int v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  unsigned __int8 *v617;
  unsigned int v618;
  unint64_t v619;
  int v620;
  float v621;
  float32x4_t v622;
  float32x4_t v623;
  uint64_t **v624;
  int v625;
  unsigned int v626;
  unsigned int v627;
  unsigned int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  unsigned __int8 *v635;
  unsigned int v636;
  unint64_t v637;
  int v638;
  float v639;
  float32x4_t v640;
  float32x4_t v641;
  uint64_t **v642;
  int v643;
  unsigned int v644;
  unsigned int v645;
  unsigned int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unsigned __int8 *v653;
  unsigned int v654;
  unint64_t v655;
  int v656;
  float v657;
  float32x4_t v658;
  float32x4_t v659;
  uint64_t **v660;
  int v661;
  unsigned int v662;
  unsigned int v663;
  unsigned int v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unsigned __int8 *v671;
  unsigned int v672;
  unint64_t v673;
  int v674;
  float v675;
  float32x4_t v676;
  float32x4_t v677;
  uint64_t **v678;
  int v679;
  unsigned int v680;
  unsigned int v681;
  unsigned int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t v688;
  unsigned __int8 *v689;
  unsigned int v690;
  unint64_t v691;
  int v692;
  float v693;
  float32x4_t v694;
  float32x4_t v695;
  uint64_t **v696;
  int v697;
  unsigned int v698;
  unsigned int v699;
  unsigned int v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  unsigned __int8 *v707;
  unsigned int v708;
  unint64_t v709;
  int v710;
  float v711;
  float32x4_t v712;
  float32x4_t v713;
  uint64_t **v714;
  int v715;
  unsigned int v716;
  unsigned int v717;
  unsigned int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  unsigned __int8 *v725;
  unsigned int v726;
  unint64_t v727;
  int v728;
  float v729;
  float32x4_t v730;
  float32x4_t v731;
  uint64_t **v732;
  int v733;
  int v734;
  unsigned int v735;
  unsigned int v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  unsigned __int8 *v743;
  unsigned int v744;
  unint64_t v745;
  int v746;
  float v747;
  float32x4_t v748;
  float32x4_t v749;
  uint64_t **v750;
  int v751;
  unsigned int v752;
  unsigned int v753;
  unsigned int v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unint64_t v760;
  unsigned __int8 *v761;
  unsigned int v762;
  unint64_t v763;
  int v764;
  float v765;
  float32x4_t v766;
  float32x4_t v767;
  uint64_t **v768;
  int v769;
  unsigned int v770;
  unsigned int v771;
  unsigned int v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  unsigned __int8 *v779;
  unsigned int v780;
  unint64_t v781;
  int v782;
  float v783;
  float32x4_t v784;
  float32x4_t v785;
  uint64_t **v786;
  int v787;
  unsigned int v788;
  unsigned int v789;
  unsigned int v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  unsigned __int8 *v797;
  unsigned int v798;
  unint64_t v799;
  int v800;
  float v801;
  float32x4_t v802;
  float32x4_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  unsigned int v853;
  unsigned int v854;
  unsigned int v855;
  unsigned int v856;
  unsigned int v857;
  unsigned int v858;
  unsigned int v859;
  unsigned int v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  int v898;
  int v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  int v938;
  int v939;
  int v940;
  int v941;
  uint64_t v942;
  __int32 v943;

  v5 = a1;
  v7 = *a2;
  v6 = a2[1];
  v8 = v6 + 2;
  v9 = a2[2] + 5;
  v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v11 = v10[336];
  v12 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v13 = *v12;
  if ((v11 & 0x10000000) != 0)
    v14 = 0x40000000;
  else
    v14 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v15 = v14;
  else
    v15 = v11 & 0xCFFFFFFF;
  if ((v15 & 0x40000000) == 0)
  {
    if ((v15 & 0x80000000) != 0)
    {
      LOBYTE(v24) = -1;
      v25 = 2;
    }
    else
    {
      v16 = *(_QWORD *)(v13 + 2448);
      v17 = v16 + 520 * v15;
      v18 = *(_QWORD *)(v17 + 312);
      v19 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v17 + 336))
      {
        *(_BYTE *)(v17 + 336) = 0;
        v20 = *(unsigned int *)(v17 + 4);
        if ((_DWORD)v20)
        {
          v804 = v19;
          v809 = v18;
          v853 = v6 + 2;
          v898 = v9;
          v21 = 0;
          v22 = (unsigned __int8 *)(v16 + 520 * v15 + 36);
          do
          {
            v23 = *v22;
            v22 += 28;
            v21 = sub_223A4EC9C(v21, ((unint64_t)v23 << 8) | 1, 0xFFu);
            --v20;
          }
          while (v20);
          v24 = v21 >> 8;
          if (!(_BYTE)v21)
            LOBYTE(v24) = -1;
          v5 = a1;
          v9 = v898;
          v8 = v853;
          v19 = v804;
          v18 = v809;
        }
        else
        {
          LOBYTE(v24) = -1;
        }
        *(_BYTE *)(v16 + 520 * v15 + 338) = v24;
      }
      else
      {
        LOBYTE(v24) = *(_BYTE *)(v16 + 520 * v15 + 338);
      }
      v25 = v18 > v19;
    }
    v26 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v7));
    a4.f32[2] = (float)v9;
    v27.i64[0] = 0x3F0000003F000000;
    v27.i64[1] = 0x3F0000003F000000;
    v28 = vmulq_n_f32(vaddq_f32(a4, v27), v26);
    v943 = v28.i32[2];
    v942 = v28.i64[0];
    sub_223FFDF1C(v12[2], &v942, v24, v25, v26);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v29 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v29;
    v13 = **v29;
    v8 = v6 + 2;
    v9 = a2[2] + 5;
  }
  v30 = v10[337];
  if ((v30 & 0x10000000) != 0)
    v31 = 0x40000000;
  else
    v31 = 0x80000000;
  if ((v30 & 0x20000000) != 0)
    v32 = v31;
  else
    v32 = v30 & 0xCFFFFFFF;
  if ((v32 & 0x40000000) == 0)
  {
    v33 = v7 + 1;
    if ((v32 & 0x80000000) != 0)
    {
      LOBYTE(v42) = -1;
      v43 = 2;
    }
    else
    {
      v34 = *(_QWORD *)(v13 + 2448);
      v35 = v34 + 520 * v32;
      v36 = *(_QWORD *)(v35 + 312);
      v37 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v35 + 336))
      {
        *(_BYTE *)(v35 + 336) = 0;
        v38 = *(unsigned int *)(v35 + 4);
        if ((_DWORD)v38)
        {
          v805 = v37;
          v810 = v36;
          v854 = v8;
          v899 = v9;
          v39 = 0;
          v40 = (unsigned __int8 *)(v34 + 520 * v32 + 36);
          do
          {
            v41 = *v40;
            v40 += 28;
            v39 = sub_223A4EC9C(v39, ((unint64_t)v41 << 8) | 1, 0xFFu);
            --v38;
          }
          while (v38);
          v42 = v39 >> 8;
          if (!(_BYTE)v39)
            LOBYTE(v42) = -1;
          v5 = a1;
          v9 = v899;
          v8 = v854;
          v37 = v805;
          v36 = v810;
        }
        else
        {
          LOBYTE(v42) = -1;
        }
        *(_BYTE *)(v34 + 520 * v32 + 338) = v42;
      }
      else
      {
        LOBYTE(v42) = *(_BYTE *)(v34 + 520 * v32 + 338);
      }
      v43 = v36 > v37;
    }
    v44 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v33));
    a4.f32[2] = (float)v9;
    v45.i64[0] = 0x3F0000003F000000;
    v45.i64[1] = 0x3F0000003F000000;
    v46 = vmulq_n_f32(vaddq_f32(a4, v45), v44);
    v943 = v46.i32[2];
    v942 = v46.i64[0];
    sub_223FFDF1C(v12[2], &v942, v42, v43, v44);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v47 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v47;
    v13 = **v47;
    v8 = v6 + 2;
    v9 = a2[2] + 5;
  }
  v48 = v10[338];
  if ((v48 & 0x10000000) != 0)
    v49 = 0x40000000;
  else
    v49 = 0x80000000;
  if ((v48 & 0x20000000) != 0)
    v50 = v49;
  else
    v50 = v48 & 0xCFFFFFFF;
  if ((v50 & 0x40000000) == 0)
  {
    v51 = v7 + 2;
    if ((v50 & 0x80000000) != 0)
    {
      LOBYTE(v60) = -1;
      v61 = 2;
    }
    else
    {
      v52 = *(_QWORD *)(v13 + 2448);
      v53 = v52 + 520 * v50;
      v54 = *(_QWORD *)(v53 + 312);
      v55 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v53 + 336))
      {
        *(_BYTE *)(v53 + 336) = 0;
        v56 = *(unsigned int *)(v53 + 4);
        if ((_DWORD)v56)
        {
          v806 = v55;
          v811 = v54;
          v855 = v8;
          v900 = v9;
          v57 = 0;
          v58 = (unsigned __int8 *)(v52 + 520 * v50 + 36);
          do
          {
            v59 = *v58;
            v58 += 28;
            v57 = sub_223A4EC9C(v57, ((unint64_t)v59 << 8) | 1, 0xFFu);
            --v56;
          }
          while (v56);
          v60 = v57 >> 8;
          if (!(_BYTE)v57)
            LOBYTE(v60) = -1;
          v9 = v900;
          v8 = v855;
          v55 = v806;
          v54 = v811;
        }
        else
        {
          LOBYTE(v60) = -1;
        }
        *(_BYTE *)(v52 + 520 * v50 + 338) = v60;
      }
      else
      {
        LOBYTE(v60) = *(_BYTE *)(v52 + 520 * v50 + 338);
      }
      v61 = v54 > v55;
    }
    v62 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v51));
    a4.f32[2] = (float)v9;
    v63.i64[0] = 0x3F0000003F000000;
    v63.i64[1] = 0x3F0000003F000000;
    v64 = vmulq_n_f32(vaddq_f32(a4, v63), v62);
    v943 = v64.i32[2];
    v942 = v64.i64[0];
    sub_223FFDF1C(v12[2], &v942, v60, v61, v62);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v65 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v65;
    v13 = **v65;
    v8 = v6 + 2;
    v9 = a2[2] + 5;
  }
  v66 = v10[339];
  if ((v66 & 0x10000000) != 0)
    v67 = 0x40000000;
  else
    v67 = 0x80000000;
  if ((v66 & 0x20000000) != 0)
    v68 = v67;
  else
    v68 = v66 & 0xCFFFFFFF;
  if ((v68 & 0x40000000) == 0)
  {
    v69 = v7 + 3;
    if ((v68 & 0x80000000) != 0)
    {
      LOBYTE(v78) = -1;
      v79 = 2;
    }
    else
    {
      v70 = *(_QWORD *)(v13 + 2448);
      v71 = v70 + 520 * v68;
      v72 = *(_QWORD *)(v71 + 312);
      v73 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v71 + 336))
      {
        *(_BYTE *)(v71 + 336) = 0;
        v74 = *(unsigned int *)(v71 + 4);
        if ((_DWORD)v74)
        {
          v812 = v72;
          v856 = v8;
          v901 = v9;
          v75 = 0;
          v76 = (unsigned __int8 *)(v70 + 520 * v68 + 36);
          do
          {
            v77 = *v76;
            v76 += 28;
            v75 = sub_223A4EC9C(v75, ((unint64_t)v77 << 8) | 1, 0xFFu);
            --v74;
          }
          while (v74);
          v78 = v75 >> 8;
          if (!(_BYTE)v75)
            LOBYTE(v78) = -1;
          v9 = v901;
          v8 = v856;
          v72 = v812;
        }
        else
        {
          LOBYTE(v78) = -1;
        }
        *(_BYTE *)(v70 + 520 * v68 + 338) = v78;
      }
      else
      {
        LOBYTE(v78) = *(_BYTE *)(v70 + 520 * v68 + 338);
      }
      v79 = v72 > v73;
    }
    v80 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v69));
    a4.f32[2] = (float)v9;
    v81.i64[0] = 0x3F0000003F000000;
    v81.i64[1] = 0x3F0000003F000000;
    v82 = vmulq_n_f32(vaddq_f32(a4, v81), v80);
    v943 = v82.i32[2];
    v942 = v82.i64[0];
    sub_223FFDF1C(v12[2], &v942, v78, v79, v80);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v83 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v83;
    v13 = **v83;
    v8 = v6 + 2;
    v9 = a2[2] + 5;
  }
  v84 = v10[340];
  if ((v84 & 0x10000000) != 0)
    v85 = 0x40000000;
  else
    v85 = 0x80000000;
  if ((v84 & 0x20000000) != 0)
    v86 = v85;
  else
    v86 = v84 & 0xCFFFFFFF;
  if ((v86 & 0x40000000) == 0)
  {
    v87 = v7 + 4;
    if ((v86 & 0x80000000) != 0)
    {
      LOBYTE(v96) = -1;
      v97 = 2;
    }
    else
    {
      v88 = *(_QWORD *)(v13 + 2448);
      v89 = v88 + 520 * v86;
      v90 = *(_QWORD *)(v89 + 312);
      v91 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v89 + 336))
      {
        *(_BYTE *)(v89 + 336) = 0;
        v92 = *(unsigned int *)(v89 + 4);
        if ((_DWORD)v92)
        {
          v807 = v91;
          v813 = v90;
          v857 = v8;
          v902 = v9;
          v93 = 0;
          v94 = (unsigned __int8 *)(v88 + 520 * v86 + 36);
          do
          {
            v95 = *v94;
            v94 += 28;
            v93 = sub_223A4EC9C(v93, ((unint64_t)v95 << 8) | 1, 0xFFu);
            --v92;
          }
          while (v92);
          v96 = v93 >> 8;
          if (!(_BYTE)v93)
            LOBYTE(v96) = -1;
          v9 = v902;
          v8 = v857;
          v91 = v807;
          v90 = v813;
        }
        else
        {
          LOBYTE(v96) = -1;
        }
        *(_BYTE *)(v88 + 520 * v86 + 338) = v96;
      }
      else
      {
        LOBYTE(v96) = *(_BYTE *)(v88 + 520 * v86 + 338);
      }
      v97 = v90 > v91;
    }
    v98 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v87));
    a4.f32[2] = (float)v9;
    v99.i64[0] = 0x3F0000003F000000;
    v99.i64[1] = 0x3F0000003F000000;
    v100 = vmulq_n_f32(vaddq_f32(a4, v99), v98);
    v943 = v100.i32[2];
    v942 = v100.i64[0];
    sub_223FFDF1C(v12[2], &v942, v96, v97, v98);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v101 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v101;
    v13 = **v101;
    v8 = v6 + 2;
    v9 = a2[2] + 5;
  }
  v102 = v10[341];
  if ((v102 & 0x10000000) != 0)
    v103 = 0x40000000;
  else
    v103 = 0x80000000;
  if ((v102 & 0x20000000) != 0)
    v104 = v103;
  else
    v104 = v102 & 0xCFFFFFFF;
  if ((v104 & 0x40000000) == 0)
  {
    v105 = v7 + 5;
    if ((v104 & 0x80000000) != 0)
    {
      LOBYTE(v114) = -1;
      v115 = 2;
    }
    else
    {
      v106 = *(_QWORD *)(v13 + 2448);
      v107 = v106 + 520 * v104;
      v108 = *(_QWORD *)(v107 + 312);
      v109 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v107 + 336))
      {
        *(_BYTE *)(v107 + 336) = 0;
        v110 = *(unsigned int *)(v107 + 4);
        if ((_DWORD)v110)
        {
          v814 = v108;
          v858 = v8;
          v903 = v9;
          v111 = 0;
          v112 = (unsigned __int8 *)(v106 + 520 * v104 + 36);
          do
          {
            v113 = *v112;
            v112 += 28;
            v111 = sub_223A4EC9C(v111, ((unint64_t)v113 << 8) | 1, 0xFFu);
            --v110;
          }
          while (v110);
          v114 = v111 >> 8;
          if (!(_BYTE)v111)
            LOBYTE(v114) = -1;
          v9 = v903;
          v8 = v858;
          v108 = v814;
        }
        else
        {
          LOBYTE(v114) = -1;
        }
        *(_BYTE *)(v106 + 520 * v104 + 338) = v114;
      }
      else
      {
        LOBYTE(v114) = *(_BYTE *)(v106 + 520 * v104 + 338);
      }
      v115 = v108 > v109;
    }
    v116 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v105));
    a4.f32[2] = (float)v9;
    v117.i64[0] = 0x3F0000003F000000;
    v117.i64[1] = 0x3F0000003F000000;
    v118 = vmulq_n_f32(vaddq_f32(a4, v117), v116);
    v943 = v118.i32[2];
    v942 = v118.i64[0];
    sub_223FFDF1C(v12[2], &v942, v114, v115, v116);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v119 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v119;
    v13 = **v119;
    v8 = v6 + 2;
    v9 = a2[2] + 5;
  }
  v120 = v10[342];
  if ((v120 & 0x10000000) != 0)
    v121 = 0x40000000;
  else
    v121 = 0x80000000;
  if ((v120 & 0x20000000) != 0)
    v122 = v121;
  else
    v122 = v120 & 0xCFFFFFFF;
  if ((v122 & 0x40000000) == 0)
  {
    v123 = v7 + 6;
    if ((v122 & 0x80000000) != 0)
    {
      LOBYTE(v132) = -1;
      v133 = 2;
    }
    else
    {
      v124 = *(_QWORD *)(v13 + 2448);
      v125 = v124 + 520 * v122;
      v126 = *(_QWORD *)(v125 + 312);
      v127 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v125 + 336))
      {
        *(_BYTE *)(v125 + 336) = 0;
        v128 = *(unsigned int *)(v125 + 4);
        if ((_DWORD)v128)
        {
          v808 = v127;
          v815 = v126;
          v859 = v8;
          v904 = v9;
          v129 = 0;
          v130 = (unsigned __int8 *)(v124 + 520 * v122 + 36);
          do
          {
            v131 = *v130;
            v130 += 28;
            v129 = sub_223A4EC9C(v129, ((unint64_t)v131 << 8) | 1, 0xFFu);
            --v128;
          }
          while (v128);
          v132 = v129 >> 8;
          if (!(_BYTE)v129)
            LOBYTE(v132) = -1;
          v9 = v904;
          v8 = v859;
          v127 = v808;
          v126 = v815;
        }
        else
        {
          LOBYTE(v132) = -1;
        }
        *(_BYTE *)(v124 + 520 * v122 + 338) = v132;
      }
      else
      {
        LOBYTE(v132) = *(_BYTE *)(v124 + 520 * v122 + 338);
      }
      v133 = v126 > v127;
    }
    v134 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v123));
    a4.f32[2] = (float)v9;
    v135.i64[0] = 0x3F0000003F000000;
    v135.i64[1] = 0x3F0000003F000000;
    v136 = vmulq_n_f32(vaddq_f32(a4, v135), v134);
    v943 = v136.i32[2];
    v942 = v136.i64[0];
    sub_223FFDF1C(v12[2], &v942, v132, v133, v134);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v137 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v137;
    v13 = **v137;
    v8 = v6 + 2;
    v9 = a2[2] + 5;
  }
  v138 = v10[343];
  if ((v138 & 0x10000000) != 0)
    v139 = 0x40000000;
  else
    v139 = 0x80000000;
  if ((v138 & 0x20000000) != 0)
    v140 = v139;
  else
    v140 = v138 & 0xCFFFFFFF;
  if ((v140 & 0x40000000) != 0)
  {
    v151 = a1;
  }
  else
  {
    v141 = v7 + 7;
    if ((v140 & 0x80000000) != 0)
    {
      LOBYTE(v150) = -1;
      v152 = 2;
    }
    else
    {
      v142 = *(_QWORD *)(v13 + 2448);
      v143 = v142 + 520 * v140;
      v144 = *(_QWORD *)(v143 + 312);
      v145 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v143 + 336))
      {
        *(_BYTE *)(v143 + 336) = 0;
        v146 = *(unsigned int *)(v143 + 4);
        if ((_DWORD)v146)
        {
          v816 = v144;
          v860 = v8;
          v905 = v9;
          v147 = 0;
          v148 = (unsigned __int8 *)(v142 + 520 * v140 + 36);
          do
          {
            v149 = *v148;
            v148 += 28;
            v147 = sub_223A4EC9C(v147, ((unint64_t)v149 << 8) | 1, 0xFFu);
            --v146;
          }
          while (v146);
          v150 = v147 >> 8;
          if (!(_BYTE)v147)
            LOBYTE(v150) = -1;
          v9 = v905;
          v8 = v860;
          v144 = v816;
        }
        else
        {
          LOBYTE(v150) = -1;
        }
        *(_BYTE *)(v142 + 520 * v140 + 338) = v150;
      }
      else
      {
        LOBYTE(v150) = *(_BYTE *)(v142 + 520 * v140 + 338);
      }
      v152 = v144 > v145;
    }
    v153 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v141));
    a4.f32[2] = (float)v9;
    v154.i64[0] = 0x3F0000003F000000;
    v154.i64[1] = 0x3F0000003F000000;
    v155 = vmulq_n_f32(vaddq_f32(a4, v154), v153);
    v943 = v155.i32[2];
    v942 = v155.i64[0];
    sub_223FFDF1C(v12[2], &v942, v150, v152, v153);
    v151 = a1;
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
    v156 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    v12 = *v156;
    v13 = **v156;
    v9 = a2[2] + 5;
  }
  v157 = v6 + 3;
  v158 = v10[344];
  if ((v158 & 0x10000000) != 0)
    v159 = 0x40000000;
  else
    v159 = 0x80000000;
  if ((v158 & 0x20000000) != 0)
    v160 = v159;
  else
    v160 = v158 & 0xCFFFFFFF;
  if ((v160 & 0x40000000) == 0)
  {
    if ((v160 & 0x80000000) != 0)
    {
      LOBYTE(v169) = -1;
      v170 = 2;
    }
    else
    {
      v161 = *(_QWORD *)(v13 + 2448);
      v162 = v161 + 520 * v160;
      v163 = *(_QWORD *)(v162 + 312);
      v164 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v162 + 336))
      {
        *(_BYTE *)(v162 + 336) = 0;
        v165 = *(unsigned int *)(v162 + 4);
        if ((_DWORD)v165)
        {
          v817 = v164;
          v861 = v163;
          v906 = v9;
          v166 = 0;
          v167 = (unsigned __int8 *)(v161 + 520 * v160 + 36);
          do
          {
            v168 = *v167;
            v167 += 28;
            v166 = sub_223A4EC9C(v166, ((unint64_t)v168 << 8) | 1, 0xFFu);
            --v165;
          }
          while (v165);
          v169 = v166 >> 8;
          if (!(_BYTE)v166)
            LOBYTE(v169) = -1;
          v163 = v861;
          v151 = a1;
          v9 = v906;
          v164 = v817;
        }
        else
        {
          LOBYTE(v169) = -1;
        }
        *(_BYTE *)(v161 + 520 * v160 + 338) = v169;
      }
      else
      {
        LOBYTE(v169) = *(_BYTE *)(v161 + 520 * v160 + 338);
      }
      v170 = v163 > v164;
    }
    v171 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v7));
    a4.f32[2] = (float)v9;
    v172.i64[0] = 0x3F0000003F000000;
    v172.i64[1] = 0x3F0000003F000000;
    v173 = vmulq_n_f32(vaddq_f32(a4, v172), v171);
    v943 = v173.i32[2];
    v942 = v173.i64[0];
    sub_223FFDF1C(v12[2], &v942, v169, v170, v171);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v174 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v174;
    v13 = **v174;
    v157 = v6 + 3;
    v9 = a2[2] + 5;
  }
  v175 = v10[345];
  if ((v175 & 0x10000000) != 0)
    v176 = 0x40000000;
  else
    v176 = 0x80000000;
  if ((v175 & 0x20000000) != 0)
    v177 = v176;
  else
    v177 = v175 & 0xCFFFFFFF;
  if ((v177 & 0x40000000) == 0)
  {
    v178 = v7 + 1;
    if ((v177 & 0x80000000) != 0)
    {
      LOBYTE(v187) = -1;
      v188 = 2;
    }
    else
    {
      v179 = *(_QWORD *)(v13 + 2448);
      v180 = v179 + 520 * v177;
      v181 = *(_QWORD *)(v180 + 312);
      v182 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v180 + 336))
      {
        *(_BYTE *)(v180 + 336) = 0;
        v183 = *(unsigned int *)(v180 + 4);
        if ((_DWORD)v183)
        {
          v818 = v182;
          v862 = v181;
          v907 = v9;
          v184 = 0;
          v185 = (unsigned __int8 *)(v179 + 520 * v177 + 36);
          do
          {
            v186 = *v185;
            v185 += 28;
            v184 = sub_223A4EC9C(v184, ((unint64_t)v186 << 8) | 1, 0xFFu);
            --v183;
          }
          while (v183);
          v187 = v184 >> 8;
          if (!(_BYTE)v184)
            LOBYTE(v187) = -1;
          v181 = v862;
          v151 = a1;
          v9 = v907;
          v182 = v818;
        }
        else
        {
          LOBYTE(v187) = -1;
        }
        *(_BYTE *)(v179 + 520 * v177 + 338) = v187;
      }
      else
      {
        LOBYTE(v187) = *(_BYTE *)(v179 + 520 * v177 + 338);
      }
      v188 = v181 > v182;
    }
    v189 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v178));
    a4.f32[2] = (float)v9;
    v190.i64[0] = 0x3F0000003F000000;
    v190.i64[1] = 0x3F0000003F000000;
    v191 = vmulq_n_f32(vaddq_f32(a4, v190), v189);
    v943 = v191.i32[2];
    v942 = v191.i64[0];
    sub_223FFDF1C(v12[2], &v942, v187, v188, v189);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v192 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v192;
    v13 = **v192;
    v157 = v6 + 3;
    v9 = a2[2] + 5;
  }
  v193 = v10[346];
  if ((v193 & 0x10000000) != 0)
    v194 = 0x40000000;
  else
    v194 = 0x80000000;
  if ((v193 & 0x20000000) != 0)
    v195 = v194;
  else
    v195 = v193 & 0xCFFFFFFF;
  if ((v195 & 0x40000000) == 0)
  {
    v196 = v7 + 2;
    if ((v195 & 0x80000000) != 0)
    {
      LOBYTE(v205) = -1;
      v206 = 2;
    }
    else
    {
      v197 = *(_QWORD *)(v13 + 2448);
      v198 = v197 + 520 * v195;
      v199 = *(_QWORD *)(v198 + 312);
      v200 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v198 + 336))
      {
        *(_BYTE *)(v198 + 336) = 0;
        v201 = *(unsigned int *)(v198 + 4);
        if ((_DWORD)v201)
        {
          v819 = v200;
          v863 = v199;
          v908 = v9;
          v202 = 0;
          v203 = (unsigned __int8 *)(v197 + 520 * v195 + 36);
          do
          {
            v204 = *v203;
            v203 += 28;
            v202 = sub_223A4EC9C(v202, ((unint64_t)v204 << 8) | 1, 0xFFu);
            --v201;
          }
          while (v201);
          v205 = v202 >> 8;
          if (!(_BYTE)v202)
            LOBYTE(v205) = -1;
          v199 = v863;
          v151 = a1;
          v9 = v908;
          v200 = v819;
        }
        else
        {
          LOBYTE(v205) = -1;
        }
        *(_BYTE *)(v197 + 520 * v195 + 338) = v205;
      }
      else
      {
        LOBYTE(v205) = *(_BYTE *)(v197 + 520 * v195 + 338);
      }
      v206 = v199 > v200;
    }
    v207 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v196));
    a4.f32[2] = (float)v9;
    v208.i64[0] = 0x3F0000003F000000;
    v208.i64[1] = 0x3F0000003F000000;
    v209 = vmulq_n_f32(vaddq_f32(a4, v208), v207);
    v943 = v209.i32[2];
    v942 = v209.i64[0];
    sub_223FFDF1C(v12[2], &v942, v205, v206, v207);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v210 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v210;
    v13 = **v210;
    v157 = v6 + 3;
    v9 = a2[2] + 5;
  }
  v211 = v10[347];
  if ((v211 & 0x10000000) != 0)
    v212 = 0x40000000;
  else
    v212 = 0x80000000;
  if ((v211 & 0x20000000) != 0)
    v213 = v212;
  else
    v213 = v211 & 0xCFFFFFFF;
  if ((v213 & 0x40000000) == 0)
  {
    v214 = v7 + 3;
    if ((v213 & 0x80000000) != 0)
    {
      LOBYTE(v223) = -1;
      v224 = 2;
    }
    else
    {
      v215 = *(_QWORD *)(v13 + 2448);
      v216 = v215 + 520 * v213;
      v217 = *(_QWORD *)(v216 + 312);
      v218 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v216 + 336))
      {
        *(_BYTE *)(v216 + 336) = 0;
        v219 = *(unsigned int *)(v216 + 4);
        if ((_DWORD)v219)
        {
          v820 = v218;
          v864 = v217;
          v909 = v9;
          v220 = 0;
          v221 = (unsigned __int8 *)(v215 + 520 * v213 + 36);
          do
          {
            v222 = *v221;
            v221 += 28;
            v220 = sub_223A4EC9C(v220, ((unint64_t)v222 << 8) | 1, 0xFFu);
            --v219;
          }
          while (v219);
          v223 = v220 >> 8;
          if (!(_BYTE)v220)
            LOBYTE(v223) = -1;
          v217 = v864;
          v151 = a1;
          v9 = v909;
          v218 = v820;
        }
        else
        {
          LOBYTE(v223) = -1;
        }
        *(_BYTE *)(v215 + 520 * v213 + 338) = v223;
      }
      else
      {
        LOBYTE(v223) = *(_BYTE *)(v215 + 520 * v213 + 338);
      }
      v224 = v217 > v218;
    }
    v225 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v214));
    a4.f32[2] = (float)v9;
    v226.i64[0] = 0x3F0000003F000000;
    v226.i64[1] = 0x3F0000003F000000;
    v227 = vmulq_n_f32(vaddq_f32(a4, v226), v225);
    v943 = v227.i32[2];
    v942 = v227.i64[0];
    sub_223FFDF1C(v12[2], &v942, v223, v224, v225);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v228 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v228;
    v13 = **v228;
    v157 = v6 + 3;
    v9 = a2[2] + 5;
  }
  v229 = v10[348];
  if ((v229 & 0x10000000) != 0)
    v230 = 0x40000000;
  else
    v230 = 0x80000000;
  if ((v229 & 0x20000000) != 0)
    v231 = v230;
  else
    v231 = v229 & 0xCFFFFFFF;
  if ((v231 & 0x40000000) == 0)
  {
    v232 = v7 + 4;
    if ((v231 & 0x80000000) != 0)
    {
      LOBYTE(v241) = -1;
      v242 = 2;
    }
    else
    {
      v233 = *(_QWORD *)(v13 + 2448);
      v234 = v233 + 520 * v231;
      v235 = *(_QWORD *)(v234 + 312);
      v236 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v234 + 336))
      {
        *(_BYTE *)(v234 + 336) = 0;
        v237 = *(unsigned int *)(v234 + 4);
        if ((_DWORD)v237)
        {
          v821 = v236;
          v865 = v235;
          v910 = v9;
          v238 = 0;
          v239 = (unsigned __int8 *)(v233 + 520 * v231 + 36);
          do
          {
            v240 = *v239;
            v239 += 28;
            v238 = sub_223A4EC9C(v238, ((unint64_t)v240 << 8) | 1, 0xFFu);
            --v237;
          }
          while (v237);
          v241 = v238 >> 8;
          if (!(_BYTE)v238)
            LOBYTE(v241) = -1;
          v235 = v865;
          v151 = a1;
          v9 = v910;
          v236 = v821;
        }
        else
        {
          LOBYTE(v241) = -1;
        }
        *(_BYTE *)(v233 + 520 * v231 + 338) = v241;
      }
      else
      {
        LOBYTE(v241) = *(_BYTE *)(v233 + 520 * v231 + 338);
      }
      v242 = v235 > v236;
    }
    v243 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v232));
    a4.f32[2] = (float)v9;
    v244.i64[0] = 0x3F0000003F000000;
    v244.i64[1] = 0x3F0000003F000000;
    v245 = vmulq_n_f32(vaddq_f32(a4, v244), v243);
    v943 = v245.i32[2];
    v942 = v245.i64[0];
    sub_223FFDF1C(v12[2], &v942, v241, v242, v243);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v246 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v246;
    v13 = **v246;
    v157 = v6 + 3;
    v9 = a2[2] + 5;
  }
  v247 = v10[349];
  if ((v247 & 0x10000000) != 0)
    v248 = 0x40000000;
  else
    v248 = 0x80000000;
  if ((v247 & 0x20000000) != 0)
    v249 = v248;
  else
    v249 = v247 & 0xCFFFFFFF;
  if ((v249 & 0x40000000) == 0)
  {
    v250 = v7 + 5;
    if ((v249 & 0x80000000) != 0)
    {
      LOBYTE(v259) = -1;
      v260 = 2;
    }
    else
    {
      v251 = *(_QWORD *)(v13 + 2448);
      v252 = v251 + 520 * v249;
      v253 = *(_QWORD *)(v252 + 312);
      v254 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v252 + 336))
      {
        *(_BYTE *)(v252 + 336) = 0;
        v255 = *(unsigned int *)(v252 + 4);
        if ((_DWORD)v255)
        {
          v822 = v254;
          v866 = v253;
          v911 = v9;
          v256 = 0;
          v257 = (unsigned __int8 *)(v251 + 520 * v249 + 36);
          do
          {
            v258 = *v257;
            v257 += 28;
            v256 = sub_223A4EC9C(v256, ((unint64_t)v258 << 8) | 1, 0xFFu);
            --v255;
          }
          while (v255);
          v259 = v256 >> 8;
          if (!(_BYTE)v256)
            LOBYTE(v259) = -1;
          v253 = v866;
          v151 = a1;
          v9 = v911;
          v254 = v822;
        }
        else
        {
          LOBYTE(v259) = -1;
        }
        *(_BYTE *)(v251 + 520 * v249 + 338) = v259;
      }
      else
      {
        LOBYTE(v259) = *(_BYTE *)(v251 + 520 * v249 + 338);
      }
      v260 = v253 > v254;
    }
    v261 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v250));
    a4.f32[2] = (float)v9;
    v262.i64[0] = 0x3F0000003F000000;
    v262.i64[1] = 0x3F0000003F000000;
    v263 = vmulq_n_f32(vaddq_f32(a4, v262), v261);
    v943 = v263.i32[2];
    v942 = v263.i64[0];
    sub_223FFDF1C(v12[2], &v942, v259, v260, v261);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v264 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v264;
    v13 = **v264;
    v157 = v6 + 3;
    v9 = a2[2] + 5;
  }
  v265 = v10[350];
  if ((v265 & 0x10000000) != 0)
    v266 = 0x40000000;
  else
    v266 = 0x80000000;
  if ((v265 & 0x20000000) != 0)
    v267 = v266;
  else
    v267 = v265 & 0xCFFFFFFF;
  if ((v267 & 0x40000000) == 0)
  {
    v268 = v7 + 6;
    if ((v267 & 0x80000000) != 0)
    {
      LOBYTE(v277) = -1;
      v278 = 2;
    }
    else
    {
      v269 = *(_QWORD *)(v13 + 2448);
      v270 = v269 + 520 * v267;
      v271 = *(_QWORD *)(v270 + 312);
      v272 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v270 + 336))
      {
        *(_BYTE *)(v270 + 336) = 0;
        v273 = *(unsigned int *)(v270 + 4);
        if ((_DWORD)v273)
        {
          v823 = v272;
          v867 = v271;
          v912 = v9;
          v274 = 0;
          v275 = (unsigned __int8 *)(v269 + 520 * v267 + 36);
          do
          {
            v276 = *v275;
            v275 += 28;
            v274 = sub_223A4EC9C(v274, ((unint64_t)v276 << 8) | 1, 0xFFu);
            --v273;
          }
          while (v273);
          v277 = v274 >> 8;
          if (!(_BYTE)v274)
            LOBYTE(v277) = -1;
          v271 = v867;
          v151 = a1;
          v9 = v912;
          v272 = v823;
        }
        else
        {
          LOBYTE(v277) = -1;
        }
        *(_BYTE *)(v269 + 520 * v267 + 338) = v277;
      }
      else
      {
        LOBYTE(v277) = *(_BYTE *)(v269 + 520 * v267 + 338);
      }
      v278 = v271 > v272;
    }
    v279 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v268));
    a4.f32[2] = (float)v9;
    v280.i64[0] = 0x3F0000003F000000;
    v280.i64[1] = 0x3F0000003F000000;
    v281 = vmulq_n_f32(vaddq_f32(a4, v280), v279);
    v943 = v281.i32[2];
    v942 = v281.i64[0];
    sub_223FFDF1C(v12[2], &v942, v277, v278, v279);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v282 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v282;
    v13 = **v282;
    v157 = v6 + 3;
    v9 = a2[2] + 5;
  }
  v283 = v10[351];
  if ((v283 & 0x10000000) != 0)
    v284 = 0x40000000;
  else
    v284 = 0x80000000;
  if ((v283 & 0x20000000) != 0)
    v285 = v284;
  else
    v285 = v283 & 0xCFFFFFFF;
  if ((v285 & 0x40000000) == 0)
  {
    v286 = v7 + 7;
    if ((v285 & 0x80000000) != 0)
    {
      LOBYTE(v295) = -1;
      v296 = 2;
    }
    else
    {
      v287 = *(_QWORD *)(v13 + 2448);
      v288 = v287 + 520 * v285;
      v289 = *(_QWORD *)(v288 + 312);
      v290 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v288 + 336))
      {
        *(_BYTE *)(v288 + 336) = 0;
        v291 = *(unsigned int *)(v288 + 4);
        if ((_DWORD)v291)
        {
          v824 = v290;
          v868 = v289;
          v913 = v9;
          v292 = 0;
          v293 = (unsigned __int8 *)(v287 + 520 * v285 + 36);
          do
          {
            v294 = *v293;
            v293 += 28;
            v292 = sub_223A4EC9C(v292, ((unint64_t)v294 << 8) | 1, 0xFFu);
            --v291;
          }
          while (v291);
          v295 = v292 >> 8;
          if (!(_BYTE)v292)
            LOBYTE(v295) = -1;
          v289 = v868;
          v151 = a1;
          v9 = v913;
          v290 = v824;
        }
        else
        {
          LOBYTE(v295) = -1;
        }
        *(_BYTE *)(v287 + 520 * v285 + 338) = v295;
      }
      else
      {
        LOBYTE(v295) = *(_BYTE *)(v287 + 520 * v285 + 338);
      }
      v296 = v289 > v290;
    }
    v297 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v157, v286));
    a4.f32[2] = (float)v9;
    v298.i64[0] = 0x3F0000003F000000;
    v298.i64[1] = 0x3F0000003F000000;
    v299 = vmulq_n_f32(vaddq_f32(a4, v298), v297);
    v943 = v299.i32[2];
    v942 = v299.i64[0];
    sub_223FFDF1C(v12[2], &v942, v295, v296, v297);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v300 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v300;
    v13 = **v300;
    v9 = a2[2] + 5;
  }
  v301 = v6 + 4;
  v302 = v10[352];
  if ((v302 & 0x10000000) != 0)
    v303 = 0x40000000;
  else
    v303 = 0x80000000;
  if ((v302 & 0x20000000) != 0)
    v304 = v303;
  else
    v304 = v302 & 0xCFFFFFFF;
  if ((v304 & 0x40000000) == 0)
  {
    if ((v304 & 0x80000000) != 0)
    {
      LOBYTE(v313) = -1;
      v314 = 2;
    }
    else
    {
      v305 = *(_QWORD *)(v13 + 2448);
      v306 = v305 + 520 * v304;
      v307 = *(_QWORD *)(v306 + 312);
      v308 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v306 + 336))
      {
        *(_BYTE *)(v306 + 336) = 0;
        v309 = *(unsigned int *)(v306 + 4);
        if ((_DWORD)v309)
        {
          v825 = v308;
          v869 = v307;
          v914 = v9;
          v310 = 0;
          v311 = (unsigned __int8 *)(v305 + 520 * v304 + 36);
          do
          {
            v312 = *v311;
            v311 += 28;
            v310 = sub_223A4EC9C(v310, ((unint64_t)v312 << 8) | 1, 0xFFu);
            --v309;
          }
          while (v309);
          v313 = v310 >> 8;
          if (!(_BYTE)v310)
            LOBYTE(v313) = -1;
          v307 = v869;
          v151 = a1;
          v9 = v914;
          v308 = v825;
        }
        else
        {
          LOBYTE(v313) = -1;
        }
        *(_BYTE *)(v305 + 520 * v304 + 338) = v313;
      }
      else
      {
        LOBYTE(v313) = *(_BYTE *)(v305 + 520 * v304 + 338);
      }
      v314 = v307 > v308;
    }
    v315 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v7));
    a4.f32[2] = (float)v9;
    v316.i64[0] = 0x3F0000003F000000;
    v316.i64[1] = 0x3F0000003F000000;
    v317 = vmulq_n_f32(vaddq_f32(a4, v316), v315);
    v943 = v317.i32[2];
    v942 = v317.i64[0];
    sub_223FFDF1C(v12[2], &v942, v313, v314, v315);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v318 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v318;
    v13 = **v318;
    v301 = v6 + 4;
    v9 = a2[2] + 5;
  }
  v319 = v10[353];
  if ((v319 & 0x10000000) != 0)
    v320 = 0x40000000;
  else
    v320 = 0x80000000;
  if ((v319 & 0x20000000) != 0)
    v321 = v320;
  else
    v321 = v319 & 0xCFFFFFFF;
  if ((v321 & 0x40000000) == 0)
  {
    v322 = v7 + 1;
    if ((v321 & 0x80000000) != 0)
    {
      LOBYTE(v331) = -1;
      v332 = 2;
    }
    else
    {
      v323 = *(_QWORD *)(v13 + 2448);
      v324 = v323 + 520 * v321;
      v325 = *(_QWORD *)(v324 + 312);
      v326 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v324 + 336))
      {
        *(_BYTE *)(v324 + 336) = 0;
        v327 = *(unsigned int *)(v324 + 4);
        if ((_DWORD)v327)
        {
          v826 = v326;
          v870 = v325;
          v915 = v9;
          v328 = 0;
          v329 = (unsigned __int8 *)(v323 + 520 * v321 + 36);
          do
          {
            v330 = *v329;
            v329 += 28;
            v328 = sub_223A4EC9C(v328, ((unint64_t)v330 << 8) | 1, 0xFFu);
            --v327;
          }
          while (v327);
          v331 = v328 >> 8;
          if (!(_BYTE)v328)
            LOBYTE(v331) = -1;
          v325 = v870;
          v151 = a1;
          v9 = v915;
          v326 = v826;
        }
        else
        {
          LOBYTE(v331) = -1;
        }
        *(_BYTE *)(v323 + 520 * v321 + 338) = v331;
      }
      else
      {
        LOBYTE(v331) = *(_BYTE *)(v323 + 520 * v321 + 338);
      }
      v332 = v325 > v326;
    }
    v333 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v322));
    a4.f32[2] = (float)v9;
    v334.i64[0] = 0x3F0000003F000000;
    v334.i64[1] = 0x3F0000003F000000;
    v335 = vmulq_n_f32(vaddq_f32(a4, v334), v333);
    v943 = v335.i32[2];
    v942 = v335.i64[0];
    sub_223FFDF1C(v12[2], &v942, v331, v332, v333);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v336 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v336;
    v13 = **v336;
    v301 = v6 + 4;
    v9 = a2[2] + 5;
  }
  v337 = v10[354];
  if ((v337 & 0x10000000) != 0)
    v338 = 0x40000000;
  else
    v338 = 0x80000000;
  if ((v337 & 0x20000000) != 0)
    v339 = v338;
  else
    v339 = v337 & 0xCFFFFFFF;
  if ((v339 & 0x40000000) == 0)
  {
    v340 = v7 + 2;
    if ((v339 & 0x80000000) != 0)
    {
      LOBYTE(v349) = -1;
      v350 = 2;
    }
    else
    {
      v341 = *(_QWORD *)(v13 + 2448);
      v342 = v341 + 520 * v339;
      v343 = *(_QWORD *)(v342 + 312);
      v344 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v342 + 336))
      {
        *(_BYTE *)(v342 + 336) = 0;
        v345 = *(unsigned int *)(v342 + 4);
        if ((_DWORD)v345)
        {
          v827 = v344;
          v871 = v343;
          v916 = v9;
          v346 = 0;
          v347 = (unsigned __int8 *)(v341 + 520 * v339 + 36);
          do
          {
            v348 = *v347;
            v347 += 28;
            v346 = sub_223A4EC9C(v346, ((unint64_t)v348 << 8) | 1, 0xFFu);
            --v345;
          }
          while (v345);
          v349 = v346 >> 8;
          if (!(_BYTE)v346)
            LOBYTE(v349) = -1;
          v343 = v871;
          v151 = a1;
          v9 = v916;
          v344 = v827;
        }
        else
        {
          LOBYTE(v349) = -1;
        }
        *(_BYTE *)(v341 + 520 * v339 + 338) = v349;
      }
      else
      {
        LOBYTE(v349) = *(_BYTE *)(v341 + 520 * v339 + 338);
      }
      v350 = v343 > v344;
    }
    v351 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v340));
    a4.f32[2] = (float)v9;
    v352.i64[0] = 0x3F0000003F000000;
    v352.i64[1] = 0x3F0000003F000000;
    v353 = vmulq_n_f32(vaddq_f32(a4, v352), v351);
    v943 = v353.i32[2];
    v942 = v353.i64[0];
    sub_223FFDF1C(v12[2], &v942, v349, v350, v351);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v354 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v354;
    v13 = **v354;
    v301 = v6 + 4;
    v9 = a2[2] + 5;
  }
  v355 = v10[355];
  if ((v355 & 0x10000000) != 0)
    v356 = 0x40000000;
  else
    v356 = 0x80000000;
  if ((v355 & 0x20000000) != 0)
    v357 = v356;
  else
    v357 = v355 & 0xCFFFFFFF;
  if ((v357 & 0x40000000) == 0)
  {
    v358 = v7 + 3;
    if ((v357 & 0x80000000) != 0)
    {
      LOBYTE(v367) = -1;
      v368 = 2;
    }
    else
    {
      v359 = *(_QWORD *)(v13 + 2448);
      v360 = v359 + 520 * v357;
      v361 = *(_QWORD *)(v360 + 312);
      v362 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v360 + 336))
      {
        *(_BYTE *)(v360 + 336) = 0;
        v363 = *(unsigned int *)(v360 + 4);
        if ((_DWORD)v363)
        {
          v828 = v362;
          v872 = v361;
          v917 = v9;
          v364 = 0;
          v365 = (unsigned __int8 *)(v359 + 520 * v357 + 36);
          do
          {
            v366 = *v365;
            v365 += 28;
            v364 = sub_223A4EC9C(v364, ((unint64_t)v366 << 8) | 1, 0xFFu);
            --v363;
          }
          while (v363);
          v367 = v364 >> 8;
          if (!(_BYTE)v364)
            LOBYTE(v367) = -1;
          v361 = v872;
          v151 = a1;
          v9 = v917;
          v362 = v828;
        }
        else
        {
          LOBYTE(v367) = -1;
        }
        *(_BYTE *)(v359 + 520 * v357 + 338) = v367;
      }
      else
      {
        LOBYTE(v367) = *(_BYTE *)(v359 + 520 * v357 + 338);
      }
      v368 = v361 > v362;
    }
    v369 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v358));
    a4.f32[2] = (float)v9;
    v370.i64[0] = 0x3F0000003F000000;
    v370.i64[1] = 0x3F0000003F000000;
    v371 = vmulq_n_f32(vaddq_f32(a4, v370), v369);
    v943 = v371.i32[2];
    v942 = v371.i64[0];
    sub_223FFDF1C(v12[2], &v942, v367, v368, v369);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v372 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v372;
    v13 = **v372;
    v301 = v6 + 4;
    v9 = a2[2] + 5;
  }
  v373 = v10[356];
  if ((v373 & 0x10000000) != 0)
    v374 = 0x40000000;
  else
    v374 = 0x80000000;
  if ((v373 & 0x20000000) != 0)
    v375 = v374;
  else
    v375 = v373 & 0xCFFFFFFF;
  if ((v375 & 0x40000000) == 0)
  {
    v376 = v7 + 4;
    if ((v375 & 0x80000000) != 0)
    {
      LOBYTE(v385) = -1;
      v386 = 2;
    }
    else
    {
      v377 = *(_QWORD *)(v13 + 2448);
      v378 = v377 + 520 * v375;
      v379 = *(_QWORD *)(v378 + 312);
      v380 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v378 + 336))
      {
        *(_BYTE *)(v378 + 336) = 0;
        v381 = *(unsigned int *)(v378 + 4);
        if ((_DWORD)v381)
        {
          v829 = v380;
          v873 = v379;
          v918 = v9;
          v382 = 0;
          v383 = (unsigned __int8 *)(v377 + 520 * v375 + 36);
          do
          {
            v384 = *v383;
            v383 += 28;
            v382 = sub_223A4EC9C(v382, ((unint64_t)v384 << 8) | 1, 0xFFu);
            --v381;
          }
          while (v381);
          v385 = v382 >> 8;
          if (!(_BYTE)v382)
            LOBYTE(v385) = -1;
          v379 = v873;
          v151 = a1;
          v9 = v918;
          v380 = v829;
        }
        else
        {
          LOBYTE(v385) = -1;
        }
        *(_BYTE *)(v377 + 520 * v375 + 338) = v385;
      }
      else
      {
        LOBYTE(v385) = *(_BYTE *)(v377 + 520 * v375 + 338);
      }
      v386 = v379 > v380;
    }
    v387 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v376));
    a4.f32[2] = (float)v9;
    v388.i64[0] = 0x3F0000003F000000;
    v388.i64[1] = 0x3F0000003F000000;
    v389 = vmulq_n_f32(vaddq_f32(a4, v388), v387);
    v943 = v389.i32[2];
    v942 = v389.i64[0];
    sub_223FFDF1C(v12[2], &v942, v385, v386, v387);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v390 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v390;
    v13 = **v390;
    v301 = v6 + 4;
    v9 = a2[2] + 5;
  }
  v391 = v10[357];
  if ((v391 & 0x10000000) != 0)
    v392 = 0x40000000;
  else
    v392 = 0x80000000;
  if ((v391 & 0x20000000) != 0)
    v393 = v392;
  else
    v393 = v391 & 0xCFFFFFFF;
  if ((v393 & 0x40000000) == 0)
  {
    v394 = v7 + 5;
    if ((v393 & 0x80000000) != 0)
    {
      LOBYTE(v403) = -1;
      v404 = 2;
    }
    else
    {
      v395 = *(_QWORD *)(v13 + 2448);
      v396 = v395 + 520 * v393;
      v397 = *(_QWORD *)(v396 + 312);
      v398 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v396 + 336))
      {
        *(_BYTE *)(v396 + 336) = 0;
        v399 = *(unsigned int *)(v396 + 4);
        if ((_DWORD)v399)
        {
          v830 = v398;
          v874 = v397;
          v919 = v9;
          v400 = 0;
          v401 = (unsigned __int8 *)(v395 + 520 * v393 + 36);
          do
          {
            v402 = *v401;
            v401 += 28;
            v400 = sub_223A4EC9C(v400, ((unint64_t)v402 << 8) | 1, 0xFFu);
            --v399;
          }
          while (v399);
          v403 = v400 >> 8;
          if (!(_BYTE)v400)
            LOBYTE(v403) = -1;
          v397 = v874;
          v151 = a1;
          v9 = v919;
          v398 = v830;
        }
        else
        {
          LOBYTE(v403) = -1;
        }
        *(_BYTE *)(v395 + 520 * v393 + 338) = v403;
      }
      else
      {
        LOBYTE(v403) = *(_BYTE *)(v395 + 520 * v393 + 338);
      }
      v404 = v397 > v398;
    }
    v405 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v394));
    a4.f32[2] = (float)v9;
    v406.i64[0] = 0x3F0000003F000000;
    v406.i64[1] = 0x3F0000003F000000;
    v407 = vmulq_n_f32(vaddq_f32(a4, v406), v405);
    v943 = v407.i32[2];
    v942 = v407.i64[0];
    sub_223FFDF1C(v12[2], &v942, v403, v404, v405);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v408 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v408;
    v13 = **v408;
    v301 = v6 + 4;
    v9 = a2[2] + 5;
  }
  v409 = v10[358];
  if ((v409 & 0x10000000) != 0)
    v410 = 0x40000000;
  else
    v410 = 0x80000000;
  if ((v409 & 0x20000000) != 0)
    v411 = v410;
  else
    v411 = v409 & 0xCFFFFFFF;
  if ((v411 & 0x40000000) == 0)
  {
    v412 = v7 + 6;
    if ((v411 & 0x80000000) != 0)
    {
      LOBYTE(v421) = -1;
      v422 = 2;
    }
    else
    {
      v413 = *(_QWORD *)(v13 + 2448);
      v414 = v413 + 520 * v411;
      v415 = *(_QWORD *)(v414 + 312);
      v416 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v414 + 336))
      {
        *(_BYTE *)(v414 + 336) = 0;
        v417 = *(unsigned int *)(v414 + 4);
        if ((_DWORD)v417)
        {
          v831 = v416;
          v875 = v415;
          v920 = v9;
          v418 = 0;
          v419 = (unsigned __int8 *)(v413 + 520 * v411 + 36);
          do
          {
            v420 = *v419;
            v419 += 28;
            v418 = sub_223A4EC9C(v418, ((unint64_t)v420 << 8) | 1, 0xFFu);
            --v417;
          }
          while (v417);
          v421 = v418 >> 8;
          if (!(_BYTE)v418)
            LOBYTE(v421) = -1;
          v415 = v875;
          v151 = a1;
          v9 = v920;
          v416 = v831;
        }
        else
        {
          LOBYTE(v421) = -1;
        }
        *(_BYTE *)(v413 + 520 * v411 + 338) = v421;
      }
      else
      {
        LOBYTE(v421) = *(_BYTE *)(v413 + 520 * v411 + 338);
      }
      v422 = v415 > v416;
    }
    v423 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v412));
    a4.f32[2] = (float)v9;
    v424.i64[0] = 0x3F0000003F000000;
    v424.i64[1] = 0x3F0000003F000000;
    v425 = vmulq_n_f32(vaddq_f32(a4, v424), v423);
    v943 = v425.i32[2];
    v942 = v425.i64[0];
    sub_223FFDF1C(v12[2], &v942, v421, v422, v423);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v426 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v426;
    v13 = **v426;
    v301 = v6 + 4;
    v9 = a2[2] + 5;
  }
  v427 = v10[359];
  if ((v427 & 0x10000000) != 0)
    v428 = 0x40000000;
  else
    v428 = 0x80000000;
  if ((v427 & 0x20000000) != 0)
    v429 = v428;
  else
    v429 = v427 & 0xCFFFFFFF;
  if ((v429 & 0x40000000) == 0)
  {
    v430 = v7 + 7;
    if ((v429 & 0x80000000) != 0)
    {
      LOBYTE(v439) = -1;
      v440 = 2;
    }
    else
    {
      v431 = *(_QWORD *)(v13 + 2448);
      v432 = v431 + 520 * v429;
      v433 = *(_QWORD *)(v432 + 312);
      v434 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v432 + 336))
      {
        *(_BYTE *)(v432 + 336) = 0;
        v435 = *(unsigned int *)(v432 + 4);
        if ((_DWORD)v435)
        {
          v832 = v434;
          v876 = v433;
          v921 = v9;
          v436 = 0;
          v437 = (unsigned __int8 *)(v431 + 520 * v429 + 36);
          do
          {
            v438 = *v437;
            v437 += 28;
            v436 = sub_223A4EC9C(v436, ((unint64_t)v438 << 8) | 1, 0xFFu);
            --v435;
          }
          while (v435);
          v439 = v436 >> 8;
          if (!(_BYTE)v436)
            LOBYTE(v439) = -1;
          v433 = v876;
          v151 = a1;
          v9 = v921;
          v434 = v832;
        }
        else
        {
          LOBYTE(v439) = -1;
        }
        *(_BYTE *)(v431 + 520 * v429 + 338) = v439;
      }
      else
      {
        LOBYTE(v439) = *(_BYTE *)(v431 + 520 * v429 + 338);
      }
      v440 = v433 > v434;
    }
    v441 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v301, v430));
    a4.f32[2] = (float)v9;
    v442.i64[0] = 0x3F0000003F000000;
    v442.i64[1] = 0x3F0000003F000000;
    v443 = vmulq_n_f32(vaddq_f32(a4, v442), v441);
    v943 = v443.i32[2];
    v942 = v443.i64[0];
    sub_223FFDF1C(v12[2], &v942, v439, v440, v441);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v444 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v444;
    v13 = **v444;
    v9 = a2[2] + 5;
  }
  v445 = v6 + 5;
  v446 = v10[360];
  if ((v446 & 0x10000000) != 0)
    v447 = 0x40000000;
  else
    v447 = 0x80000000;
  if ((v446 & 0x20000000) != 0)
    v448 = v447;
  else
    v448 = v446 & 0xCFFFFFFF;
  if ((v448 & 0x40000000) == 0)
  {
    if ((v448 & 0x80000000) != 0)
    {
      LOBYTE(v457) = -1;
      v458 = 2;
    }
    else
    {
      v449 = *(_QWORD *)(v13 + 2448);
      v450 = v449 + 520 * v448;
      v451 = *(_QWORD *)(v450 + 312);
      v452 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v450 + 336))
      {
        *(_BYTE *)(v450 + 336) = 0;
        v453 = *(unsigned int *)(v450 + 4);
        if ((_DWORD)v453)
        {
          v833 = v452;
          v877 = v451;
          v922 = v9;
          v454 = 0;
          v455 = (unsigned __int8 *)(v449 + 520 * v448 + 36);
          do
          {
            v456 = *v455;
            v455 += 28;
            v454 = sub_223A4EC9C(v454, ((unint64_t)v456 << 8) | 1, 0xFFu);
            --v453;
          }
          while (v453);
          v457 = v454 >> 8;
          if (!(_BYTE)v454)
            LOBYTE(v457) = -1;
          v451 = v877;
          v151 = a1;
          v9 = v922;
          v452 = v833;
        }
        else
        {
          LOBYTE(v457) = -1;
        }
        *(_BYTE *)(v449 + 520 * v448 + 338) = v457;
      }
      else
      {
        LOBYTE(v457) = *(_BYTE *)(v449 + 520 * v448 + 338);
      }
      v458 = v451 > v452;
    }
    v459 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v7));
    a4.f32[2] = (float)v9;
    v460.i64[0] = 0x3F0000003F000000;
    v460.i64[1] = 0x3F0000003F000000;
    v461 = vmulq_n_f32(vaddq_f32(a4, v460), v459);
    v943 = v461.i32[2];
    v942 = v461.i64[0];
    sub_223FFDF1C(v12[2], &v942, v457, v458, v459);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v462 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v462;
    v13 = **v462;
    v445 = v6 + 5;
    v9 = a2[2] + 5;
  }
  v463 = v10[361];
  if ((v463 & 0x10000000) != 0)
    v464 = 0x40000000;
  else
    v464 = 0x80000000;
  if ((v463 & 0x20000000) != 0)
    v465 = v464;
  else
    v465 = v463 & 0xCFFFFFFF;
  if ((v465 & 0x40000000) == 0)
  {
    v466 = v7 + 1;
    if ((v465 & 0x80000000) != 0)
    {
      LOBYTE(v475) = -1;
      v476 = 2;
    }
    else
    {
      v467 = *(_QWORD *)(v13 + 2448);
      v468 = v467 + 520 * v465;
      v469 = *(_QWORD *)(v468 + 312);
      v470 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v468 + 336))
      {
        *(_BYTE *)(v468 + 336) = 0;
        v471 = *(unsigned int *)(v468 + 4);
        if ((_DWORD)v471)
        {
          v834 = v470;
          v878 = v469;
          v923 = v9;
          v472 = 0;
          v473 = (unsigned __int8 *)(v467 + 520 * v465 + 36);
          do
          {
            v474 = *v473;
            v473 += 28;
            v472 = sub_223A4EC9C(v472, ((unint64_t)v474 << 8) | 1, 0xFFu);
            --v471;
          }
          while (v471);
          v475 = v472 >> 8;
          if (!(_BYTE)v472)
            LOBYTE(v475) = -1;
          v469 = v878;
          v151 = a1;
          v9 = v923;
          v470 = v834;
        }
        else
        {
          LOBYTE(v475) = -1;
        }
        *(_BYTE *)(v467 + 520 * v465 + 338) = v475;
      }
      else
      {
        LOBYTE(v475) = *(_BYTE *)(v467 + 520 * v465 + 338);
      }
      v476 = v469 > v470;
    }
    v477 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v466));
    a4.f32[2] = (float)v9;
    v478.i64[0] = 0x3F0000003F000000;
    v478.i64[1] = 0x3F0000003F000000;
    v479 = vmulq_n_f32(vaddq_f32(a4, v478), v477);
    v943 = v479.i32[2];
    v942 = v479.i64[0];
    sub_223FFDF1C(v12[2], &v942, v475, v476, v477);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v480 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v480;
    v13 = **v480;
    v445 = v6 + 5;
    v9 = a2[2] + 5;
  }
  v481 = v10[362];
  if ((v481 & 0x10000000) != 0)
    v482 = 0x40000000;
  else
    v482 = 0x80000000;
  if ((v481 & 0x20000000) != 0)
    v483 = v482;
  else
    v483 = v481 & 0xCFFFFFFF;
  if ((v483 & 0x40000000) == 0)
  {
    v484 = v7 + 2;
    if ((v483 & 0x80000000) != 0)
    {
      LOBYTE(v493) = -1;
      v494 = 2;
    }
    else
    {
      v485 = *(_QWORD *)(v13 + 2448);
      v486 = v485 + 520 * v483;
      v487 = *(_QWORD *)(v486 + 312);
      v488 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v486 + 336))
      {
        *(_BYTE *)(v486 + 336) = 0;
        v489 = *(unsigned int *)(v486 + 4);
        if ((_DWORD)v489)
        {
          v835 = v488;
          v879 = v487;
          v924 = v9;
          v490 = 0;
          v491 = (unsigned __int8 *)(v485 + 520 * v483 + 36);
          do
          {
            v492 = *v491;
            v491 += 28;
            v490 = sub_223A4EC9C(v490, ((unint64_t)v492 << 8) | 1, 0xFFu);
            --v489;
          }
          while (v489);
          v493 = v490 >> 8;
          if (!(_BYTE)v490)
            LOBYTE(v493) = -1;
          v487 = v879;
          v151 = a1;
          v9 = v924;
          v488 = v835;
        }
        else
        {
          LOBYTE(v493) = -1;
        }
        *(_BYTE *)(v485 + 520 * v483 + 338) = v493;
      }
      else
      {
        LOBYTE(v493) = *(_BYTE *)(v485 + 520 * v483 + 338);
      }
      v494 = v487 > v488;
    }
    v495 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v484));
    a4.f32[2] = (float)v9;
    v496.i64[0] = 0x3F0000003F000000;
    v496.i64[1] = 0x3F0000003F000000;
    v497 = vmulq_n_f32(vaddq_f32(a4, v496), v495);
    v943 = v497.i32[2];
    v942 = v497.i64[0];
    sub_223FFDF1C(v12[2], &v942, v493, v494, v495);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v498 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v498;
    v13 = **v498;
    v445 = v6 + 5;
    v9 = a2[2] + 5;
  }
  v499 = v10[363];
  if ((v499 & 0x10000000) != 0)
    v500 = 0x40000000;
  else
    v500 = 0x80000000;
  if ((v499 & 0x20000000) != 0)
    v501 = v500;
  else
    v501 = v499 & 0xCFFFFFFF;
  if ((v501 & 0x40000000) == 0)
  {
    v502 = v7 + 3;
    if ((v501 & 0x80000000) != 0)
    {
      LOBYTE(v511) = -1;
      v512 = 2;
    }
    else
    {
      v503 = *(_QWORD *)(v13 + 2448);
      v504 = v503 + 520 * v501;
      v505 = *(_QWORD *)(v504 + 312);
      v506 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v504 + 336))
      {
        *(_BYTE *)(v504 + 336) = 0;
        v507 = *(unsigned int *)(v504 + 4);
        if ((_DWORD)v507)
        {
          v836 = v506;
          v880 = v505;
          v925 = v9;
          v508 = 0;
          v509 = (unsigned __int8 *)(v503 + 520 * v501 + 36);
          do
          {
            v510 = *v509;
            v509 += 28;
            v508 = sub_223A4EC9C(v508, ((unint64_t)v510 << 8) | 1, 0xFFu);
            --v507;
          }
          while (v507);
          v511 = v508 >> 8;
          if (!(_BYTE)v508)
            LOBYTE(v511) = -1;
          v505 = v880;
          v151 = a1;
          v9 = v925;
          v506 = v836;
        }
        else
        {
          LOBYTE(v511) = -1;
        }
        *(_BYTE *)(v503 + 520 * v501 + 338) = v511;
      }
      else
      {
        LOBYTE(v511) = *(_BYTE *)(v503 + 520 * v501 + 338);
      }
      v512 = v505 > v506;
    }
    v513 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v502));
    a4.f32[2] = (float)v9;
    v514.i64[0] = 0x3F0000003F000000;
    v514.i64[1] = 0x3F0000003F000000;
    v515 = vmulq_n_f32(vaddq_f32(a4, v514), v513);
    v943 = v515.i32[2];
    v942 = v515.i64[0];
    sub_223FFDF1C(v12[2], &v942, v511, v512, v513);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v516 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v516;
    v13 = **v516;
    v445 = v6 + 5;
    v9 = a2[2] + 5;
  }
  v517 = v10[364];
  if ((v517 & 0x10000000) != 0)
    v518 = 0x40000000;
  else
    v518 = 0x80000000;
  if ((v517 & 0x20000000) != 0)
    v519 = v518;
  else
    v519 = v517 & 0xCFFFFFFF;
  if ((v519 & 0x40000000) == 0)
  {
    v520 = v7 + 4;
    if ((v519 & 0x80000000) != 0)
    {
      LOBYTE(v529) = -1;
      v530 = 2;
    }
    else
    {
      v521 = *(_QWORD *)(v13 + 2448);
      v522 = v521 + 520 * v519;
      v523 = *(_QWORD *)(v522 + 312);
      v524 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v522 + 336))
      {
        *(_BYTE *)(v522 + 336) = 0;
        v525 = *(unsigned int *)(v522 + 4);
        if ((_DWORD)v525)
        {
          v837 = v524;
          v881 = v523;
          v926 = v9;
          v526 = 0;
          v527 = (unsigned __int8 *)(v521 + 520 * v519 + 36);
          do
          {
            v528 = *v527;
            v527 += 28;
            v526 = sub_223A4EC9C(v526, ((unint64_t)v528 << 8) | 1, 0xFFu);
            --v525;
          }
          while (v525);
          v529 = v526 >> 8;
          if (!(_BYTE)v526)
            LOBYTE(v529) = -1;
          v523 = v881;
          v151 = a1;
          v9 = v926;
          v524 = v837;
        }
        else
        {
          LOBYTE(v529) = -1;
        }
        *(_BYTE *)(v521 + 520 * v519 + 338) = v529;
      }
      else
      {
        LOBYTE(v529) = *(_BYTE *)(v521 + 520 * v519 + 338);
      }
      v530 = v523 > v524;
    }
    v531 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v520));
    a4.f32[2] = (float)v9;
    v532.i64[0] = 0x3F0000003F000000;
    v532.i64[1] = 0x3F0000003F000000;
    v533 = vmulq_n_f32(vaddq_f32(a4, v532), v531);
    v943 = v533.i32[2];
    v942 = v533.i64[0];
    sub_223FFDF1C(v12[2], &v942, v529, v530, v531);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v534 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v534;
    v13 = **v534;
    v445 = v6 + 5;
    v9 = a2[2] + 5;
  }
  v535 = v10[365];
  if ((v535 & 0x10000000) != 0)
    v536 = 0x40000000;
  else
    v536 = 0x80000000;
  if ((v535 & 0x20000000) != 0)
    v537 = v536;
  else
    v537 = v535 & 0xCFFFFFFF;
  if ((v537 & 0x40000000) == 0)
  {
    v538 = v7 + 5;
    if ((v537 & 0x80000000) != 0)
    {
      LOBYTE(v547) = -1;
      v548 = 2;
    }
    else
    {
      v539 = *(_QWORD *)(v13 + 2448);
      v540 = v539 + 520 * v537;
      v541 = *(_QWORD *)(v540 + 312);
      v542 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v540 + 336))
      {
        *(_BYTE *)(v540 + 336) = 0;
        v543 = *(unsigned int *)(v540 + 4);
        if ((_DWORD)v543)
        {
          v838 = v542;
          v882 = v541;
          v927 = v9;
          v544 = 0;
          v545 = (unsigned __int8 *)(v539 + 520 * v537 + 36);
          do
          {
            v546 = *v545;
            v545 += 28;
            v544 = sub_223A4EC9C(v544, ((unint64_t)v546 << 8) | 1, 0xFFu);
            --v543;
          }
          while (v543);
          v547 = v544 >> 8;
          if (!(_BYTE)v544)
            LOBYTE(v547) = -1;
          v541 = v882;
          v151 = a1;
          v9 = v927;
          v542 = v838;
        }
        else
        {
          LOBYTE(v547) = -1;
        }
        *(_BYTE *)(v539 + 520 * v537 + 338) = v547;
      }
      else
      {
        LOBYTE(v547) = *(_BYTE *)(v539 + 520 * v537 + 338);
      }
      v548 = v541 > v542;
    }
    v549 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v538));
    a4.f32[2] = (float)v9;
    v550.i64[0] = 0x3F0000003F000000;
    v550.i64[1] = 0x3F0000003F000000;
    v551 = vmulq_n_f32(vaddq_f32(a4, v550), v549);
    v943 = v551.i32[2];
    v942 = v551.i64[0];
    sub_223FFDF1C(v12[2], &v942, v547, v548, v549);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v552 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v552;
    v13 = **v552;
    v445 = v6 + 5;
    v9 = a2[2] + 5;
  }
  v553 = v10[366];
  if ((v553 & 0x10000000) != 0)
    v554 = 0x40000000;
  else
    v554 = 0x80000000;
  if ((v553 & 0x20000000) != 0)
    v555 = v554;
  else
    v555 = v553 & 0xCFFFFFFF;
  if ((v555 & 0x40000000) == 0)
  {
    v556 = v7 + 6;
    if ((v555 & 0x80000000) != 0)
    {
      LOBYTE(v565) = -1;
      v566 = 2;
    }
    else
    {
      v557 = *(_QWORD *)(v13 + 2448);
      v558 = v557 + 520 * v555;
      v559 = *(_QWORD *)(v558 + 312);
      v560 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v558 + 336))
      {
        *(_BYTE *)(v558 + 336) = 0;
        v561 = *(unsigned int *)(v558 + 4);
        if ((_DWORD)v561)
        {
          v839 = v560;
          v883 = v559;
          v928 = v9;
          v562 = 0;
          v563 = (unsigned __int8 *)(v557 + 520 * v555 + 36);
          do
          {
            v564 = *v563;
            v563 += 28;
            v562 = sub_223A4EC9C(v562, ((unint64_t)v564 << 8) | 1, 0xFFu);
            --v561;
          }
          while (v561);
          v565 = v562 >> 8;
          if (!(_BYTE)v562)
            LOBYTE(v565) = -1;
          v559 = v883;
          v151 = a1;
          v9 = v928;
          v560 = v839;
        }
        else
        {
          LOBYTE(v565) = -1;
        }
        *(_BYTE *)(v557 + 520 * v555 + 338) = v565;
      }
      else
      {
        LOBYTE(v565) = *(_BYTE *)(v557 + 520 * v555 + 338);
      }
      v566 = v559 > v560;
    }
    v567 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v556));
    a4.f32[2] = (float)v9;
    v568.i64[0] = 0x3F0000003F000000;
    v568.i64[1] = 0x3F0000003F000000;
    v569 = vmulq_n_f32(vaddq_f32(a4, v568), v567);
    v943 = v569.i32[2];
    v942 = v569.i64[0];
    sub_223FFDF1C(v12[2], &v942, v565, v566, v567);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v570 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v570;
    v13 = **v570;
    v445 = v6 + 5;
    v9 = a2[2] + 5;
  }
  v571 = v10[367];
  if ((v571 & 0x10000000) != 0)
    v572 = 0x40000000;
  else
    v572 = 0x80000000;
  if ((v571 & 0x20000000) != 0)
    v573 = v572;
  else
    v573 = v571 & 0xCFFFFFFF;
  if ((v573 & 0x40000000) == 0)
  {
    v574 = v7 + 7;
    if ((v573 & 0x80000000) != 0)
    {
      LOBYTE(v583) = -1;
      v584 = 2;
    }
    else
    {
      v575 = *(_QWORD *)(v13 + 2448);
      v576 = v575 + 520 * v573;
      v577 = *(_QWORD *)(v576 + 312);
      v578 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v576 + 336))
      {
        *(_BYTE *)(v576 + 336) = 0;
        v579 = *(unsigned int *)(v576 + 4);
        if ((_DWORD)v579)
        {
          v840 = v578;
          v884 = v577;
          v929 = v9;
          v580 = 0;
          v581 = (unsigned __int8 *)(v575 + 520 * v573 + 36);
          do
          {
            v582 = *v581;
            v581 += 28;
            v580 = sub_223A4EC9C(v580, ((unint64_t)v582 << 8) | 1, 0xFFu);
            --v579;
          }
          while (v579);
          v583 = v580 >> 8;
          if (!(_BYTE)v580)
            LOBYTE(v583) = -1;
          v577 = v884;
          v151 = a1;
          v9 = v929;
          v578 = v840;
        }
        else
        {
          LOBYTE(v583) = -1;
        }
        *(_BYTE *)(v575 + 520 * v573 + 338) = v583;
      }
      else
      {
        LOBYTE(v583) = *(_BYTE *)(v575 + 520 * v573 + 338);
      }
      v584 = v577 > v578;
    }
    v585 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v445, v574));
    a4.f32[2] = (float)v9;
    v586.i64[0] = 0x3F0000003F000000;
    v586.i64[1] = 0x3F0000003F000000;
    v587 = vmulq_n_f32(vaddq_f32(a4, v586), v585);
    v943 = v587.i32[2];
    v942 = v587.i64[0];
    sub_223FFDF1C(v12[2], &v942, v583, v584, v585);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v588 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v588;
    v13 = **v588;
    v9 = a2[2] + 5;
  }
  v589 = v6 + 6;
  v590 = v10[368];
  if ((v590 & 0x10000000) != 0)
    v591 = 0x40000000;
  else
    v591 = 0x80000000;
  if ((v590 & 0x20000000) != 0)
    v592 = v591;
  else
    v592 = v590 & 0xCFFFFFFF;
  if ((v592 & 0x40000000) == 0)
  {
    if ((v592 & 0x80000000) != 0)
    {
      LOBYTE(v601) = -1;
      v602 = 2;
    }
    else
    {
      v593 = *(_QWORD *)(v13 + 2448);
      v594 = v593 + 520 * v592;
      v595 = *(_QWORD *)(v594 + 312);
      v596 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v594 + 336))
      {
        *(_BYTE *)(v594 + 336) = 0;
        v597 = *(unsigned int *)(v594 + 4);
        if ((_DWORD)v597)
        {
          v841 = v596;
          v885 = v595;
          v930 = v9;
          v598 = 0;
          v599 = (unsigned __int8 *)(v593 + 520 * v592 + 36);
          do
          {
            v600 = *v599;
            v599 += 28;
            v598 = sub_223A4EC9C(v598, ((unint64_t)v600 << 8) | 1, 0xFFu);
            --v597;
          }
          while (v597);
          v601 = v598 >> 8;
          if (!(_BYTE)v598)
            LOBYTE(v601) = -1;
          v595 = v885;
          v151 = a1;
          v9 = v930;
          v596 = v841;
        }
        else
        {
          LOBYTE(v601) = -1;
        }
        *(_BYTE *)(v593 + 520 * v592 + 338) = v601;
      }
      else
      {
        LOBYTE(v601) = *(_BYTE *)(v593 + 520 * v592 + 338);
      }
      v602 = v595 > v596;
    }
    v603 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v7));
    a4.f32[2] = (float)v9;
    v604.i64[0] = 0x3F0000003F000000;
    v604.i64[1] = 0x3F0000003F000000;
    v605 = vmulq_n_f32(vaddq_f32(a4, v604), v603);
    v943 = v605.i32[2];
    v942 = v605.i64[0];
    sub_223FFDF1C(v12[2], &v942, v601, v602, v603);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v606 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v606;
    v13 = **v606;
    v589 = v6 + 6;
    v9 = a2[2] + 5;
  }
  v607 = v10[369];
  if ((v607 & 0x10000000) != 0)
    v608 = 0x40000000;
  else
    v608 = 0x80000000;
  if ((v607 & 0x20000000) != 0)
    v609 = v608;
  else
    v609 = v607 & 0xCFFFFFFF;
  if ((v609 & 0x40000000) == 0)
  {
    v610 = v7 + 1;
    if ((v609 & 0x80000000) != 0)
    {
      LOBYTE(v619) = -1;
      v620 = 2;
    }
    else
    {
      v611 = *(_QWORD *)(v13 + 2448);
      v612 = v611 + 520 * v609;
      v613 = *(_QWORD *)(v612 + 312);
      v614 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v612 + 336))
      {
        *(_BYTE *)(v612 + 336) = 0;
        v615 = *(unsigned int *)(v612 + 4);
        if ((_DWORD)v615)
        {
          v842 = v614;
          v886 = v613;
          v931 = v9;
          v616 = 0;
          v617 = (unsigned __int8 *)(v611 + 520 * v609 + 36);
          do
          {
            v618 = *v617;
            v617 += 28;
            v616 = sub_223A4EC9C(v616, ((unint64_t)v618 << 8) | 1, 0xFFu);
            --v615;
          }
          while (v615);
          v619 = v616 >> 8;
          if (!(_BYTE)v616)
            LOBYTE(v619) = -1;
          v613 = v886;
          v151 = a1;
          v9 = v931;
          v614 = v842;
        }
        else
        {
          LOBYTE(v619) = -1;
        }
        *(_BYTE *)(v611 + 520 * v609 + 338) = v619;
      }
      else
      {
        LOBYTE(v619) = *(_BYTE *)(v611 + 520 * v609 + 338);
      }
      v620 = v613 > v614;
    }
    v621 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v610));
    a4.f32[2] = (float)v9;
    v622.i64[0] = 0x3F0000003F000000;
    v622.i64[1] = 0x3F0000003F000000;
    v623 = vmulq_n_f32(vaddq_f32(a4, v622), v621);
    v943 = v623.i32[2];
    v942 = v623.i64[0];
    sub_223FFDF1C(v12[2], &v942, v619, v620, v621);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v624 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v624;
    v13 = **v624;
    v589 = v6 + 6;
    v9 = a2[2] + 5;
  }
  v625 = v10[370];
  if ((v625 & 0x10000000) != 0)
    v626 = 0x40000000;
  else
    v626 = 0x80000000;
  if ((v625 & 0x20000000) != 0)
    v627 = v626;
  else
    v627 = v625 & 0xCFFFFFFF;
  if ((v627 & 0x40000000) == 0)
  {
    v628 = v7 + 2;
    if ((v627 & 0x80000000) != 0)
    {
      LOBYTE(v637) = -1;
      v638 = 2;
    }
    else
    {
      v629 = *(_QWORD *)(v13 + 2448);
      v630 = v629 + 520 * v627;
      v631 = *(_QWORD *)(v630 + 312);
      v632 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v630 + 336))
      {
        *(_BYTE *)(v630 + 336) = 0;
        v633 = *(unsigned int *)(v630 + 4);
        if ((_DWORD)v633)
        {
          v843 = v632;
          v887 = v631;
          v932 = v9;
          v634 = 0;
          v635 = (unsigned __int8 *)(v629 + 520 * v627 + 36);
          do
          {
            v636 = *v635;
            v635 += 28;
            v634 = sub_223A4EC9C(v634, ((unint64_t)v636 << 8) | 1, 0xFFu);
            --v633;
          }
          while (v633);
          v637 = v634 >> 8;
          if (!(_BYTE)v634)
            LOBYTE(v637) = -1;
          v631 = v887;
          v151 = a1;
          v9 = v932;
          v632 = v843;
        }
        else
        {
          LOBYTE(v637) = -1;
        }
        *(_BYTE *)(v629 + 520 * v627 + 338) = v637;
      }
      else
      {
        LOBYTE(v637) = *(_BYTE *)(v629 + 520 * v627 + 338);
      }
      v638 = v631 > v632;
    }
    v639 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v628));
    a4.f32[2] = (float)v9;
    v640.i64[0] = 0x3F0000003F000000;
    v640.i64[1] = 0x3F0000003F000000;
    v641 = vmulq_n_f32(vaddq_f32(a4, v640), v639);
    v943 = v641.i32[2];
    v942 = v641.i64[0];
    sub_223FFDF1C(v12[2], &v942, v637, v638, v639);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v642 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v642;
    v13 = **v642;
    v589 = v6 + 6;
    v9 = a2[2] + 5;
  }
  v643 = v10[371];
  if ((v643 & 0x10000000) != 0)
    v644 = 0x40000000;
  else
    v644 = 0x80000000;
  if ((v643 & 0x20000000) != 0)
    v645 = v644;
  else
    v645 = v643 & 0xCFFFFFFF;
  if ((v645 & 0x40000000) == 0)
  {
    v646 = v7 + 3;
    if ((v645 & 0x80000000) != 0)
    {
      LOBYTE(v655) = -1;
      v656 = 2;
    }
    else
    {
      v647 = *(_QWORD *)(v13 + 2448);
      v648 = v647 + 520 * v645;
      v649 = *(_QWORD *)(v648 + 312);
      v650 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v648 + 336))
      {
        *(_BYTE *)(v648 + 336) = 0;
        v651 = *(unsigned int *)(v648 + 4);
        if ((_DWORD)v651)
        {
          v844 = v650;
          v888 = v649;
          v933 = v9;
          v652 = 0;
          v653 = (unsigned __int8 *)(v647 + 520 * v645 + 36);
          do
          {
            v654 = *v653;
            v653 += 28;
            v652 = sub_223A4EC9C(v652, ((unint64_t)v654 << 8) | 1, 0xFFu);
            --v651;
          }
          while (v651);
          v655 = v652 >> 8;
          if (!(_BYTE)v652)
            LOBYTE(v655) = -1;
          v649 = v888;
          v151 = a1;
          v9 = v933;
          v650 = v844;
        }
        else
        {
          LOBYTE(v655) = -1;
        }
        *(_BYTE *)(v647 + 520 * v645 + 338) = v655;
      }
      else
      {
        LOBYTE(v655) = *(_BYTE *)(v647 + 520 * v645 + 338);
      }
      v656 = v649 > v650;
    }
    v657 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v646));
    a4.f32[2] = (float)v9;
    v658.i64[0] = 0x3F0000003F000000;
    v658.i64[1] = 0x3F0000003F000000;
    v659 = vmulq_n_f32(vaddq_f32(a4, v658), v657);
    v943 = v659.i32[2];
    v942 = v659.i64[0];
    sub_223FFDF1C(v12[2], &v942, v655, v656, v657);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v660 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v660;
    v13 = **v660;
    v589 = v6 + 6;
    v9 = a2[2] + 5;
  }
  v661 = v10[372];
  if ((v661 & 0x10000000) != 0)
    v662 = 0x40000000;
  else
    v662 = 0x80000000;
  if ((v661 & 0x20000000) != 0)
    v663 = v662;
  else
    v663 = v661 & 0xCFFFFFFF;
  if ((v663 & 0x40000000) == 0)
  {
    v664 = v7 + 4;
    if ((v663 & 0x80000000) != 0)
    {
      LOBYTE(v673) = -1;
      v674 = 2;
    }
    else
    {
      v665 = *(_QWORD *)(v13 + 2448);
      v666 = v665 + 520 * v663;
      v667 = *(_QWORD *)(v666 + 312);
      v668 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v666 + 336))
      {
        *(_BYTE *)(v666 + 336) = 0;
        v669 = *(unsigned int *)(v666 + 4);
        if ((_DWORD)v669)
        {
          v845 = v668;
          v889 = v667;
          v934 = v9;
          v670 = 0;
          v671 = (unsigned __int8 *)(v665 + 520 * v663 + 36);
          do
          {
            v672 = *v671;
            v671 += 28;
            v670 = sub_223A4EC9C(v670, ((unint64_t)v672 << 8) | 1, 0xFFu);
            --v669;
          }
          while (v669);
          v673 = v670 >> 8;
          if (!(_BYTE)v670)
            LOBYTE(v673) = -1;
          v667 = v889;
          v151 = a1;
          v9 = v934;
          v668 = v845;
        }
        else
        {
          LOBYTE(v673) = -1;
        }
        *(_BYTE *)(v665 + 520 * v663 + 338) = v673;
      }
      else
      {
        LOBYTE(v673) = *(_BYTE *)(v665 + 520 * v663 + 338);
      }
      v674 = v667 > v668;
    }
    v675 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v664));
    a4.f32[2] = (float)v9;
    v676.i64[0] = 0x3F0000003F000000;
    v676.i64[1] = 0x3F0000003F000000;
    v677 = vmulq_n_f32(vaddq_f32(a4, v676), v675);
    v943 = v677.i32[2];
    v942 = v677.i64[0];
    sub_223FFDF1C(v12[2], &v942, v673, v674, v675);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v678 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v678;
    v13 = **v678;
    v589 = v6 + 6;
    v9 = a2[2] + 5;
  }
  v679 = v10[373];
  if ((v679 & 0x10000000) != 0)
    v680 = 0x40000000;
  else
    v680 = 0x80000000;
  if ((v679 & 0x20000000) != 0)
    v681 = v680;
  else
    v681 = v679 & 0xCFFFFFFF;
  if ((v681 & 0x40000000) == 0)
  {
    v682 = v7 + 5;
    if ((v681 & 0x80000000) != 0)
    {
      LOBYTE(v691) = -1;
      v692 = 2;
    }
    else
    {
      v683 = *(_QWORD *)(v13 + 2448);
      v684 = v683 + 520 * v681;
      v685 = *(_QWORD *)(v684 + 312);
      v686 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v684 + 336))
      {
        *(_BYTE *)(v684 + 336) = 0;
        v687 = *(unsigned int *)(v684 + 4);
        if ((_DWORD)v687)
        {
          v846 = v686;
          v890 = v685;
          v935 = v9;
          v688 = 0;
          v689 = (unsigned __int8 *)(v683 + 520 * v681 + 36);
          do
          {
            v690 = *v689;
            v689 += 28;
            v688 = sub_223A4EC9C(v688, ((unint64_t)v690 << 8) | 1, 0xFFu);
            --v687;
          }
          while (v687);
          v691 = v688 >> 8;
          if (!(_BYTE)v688)
            LOBYTE(v691) = -1;
          v685 = v890;
          v151 = a1;
          v9 = v935;
          v686 = v846;
        }
        else
        {
          LOBYTE(v691) = -1;
        }
        *(_BYTE *)(v683 + 520 * v681 + 338) = v691;
      }
      else
      {
        LOBYTE(v691) = *(_BYTE *)(v683 + 520 * v681 + 338);
      }
      v692 = v685 > v686;
    }
    v693 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v682));
    a4.f32[2] = (float)v9;
    v694.i64[0] = 0x3F0000003F000000;
    v694.i64[1] = 0x3F0000003F000000;
    v695 = vmulq_n_f32(vaddq_f32(a4, v694), v693);
    v943 = v695.i32[2];
    v942 = v695.i64[0];
    sub_223FFDF1C(v12[2], &v942, v691, v692, v693);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v696 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v696;
    v13 = **v696;
    v589 = v6 + 6;
    v9 = a2[2] + 5;
  }
  v697 = v10[374];
  if ((v697 & 0x10000000) != 0)
    v698 = 0x40000000;
  else
    v698 = 0x80000000;
  if ((v697 & 0x20000000) != 0)
    v699 = v698;
  else
    v699 = v697 & 0xCFFFFFFF;
  if ((v699 & 0x40000000) == 0)
  {
    v700 = v7 + 6;
    if ((v699 & 0x80000000) != 0)
    {
      LOBYTE(v709) = -1;
      v710 = 2;
    }
    else
    {
      v701 = *(_QWORD *)(v13 + 2448);
      v702 = v701 + 520 * v699;
      v703 = *(_QWORD *)(v702 + 312);
      v704 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v702 + 336))
      {
        *(_BYTE *)(v702 + 336) = 0;
        v705 = *(unsigned int *)(v702 + 4);
        if ((_DWORD)v705)
        {
          v847 = v704;
          v891 = v703;
          v936 = v9;
          v706 = 0;
          v707 = (unsigned __int8 *)(v701 + 520 * v699 + 36);
          do
          {
            v708 = *v707;
            v707 += 28;
            v706 = sub_223A4EC9C(v706, ((unint64_t)v708 << 8) | 1, 0xFFu);
            --v705;
          }
          while (v705);
          v709 = v706 >> 8;
          if (!(_BYTE)v706)
            LOBYTE(v709) = -1;
          v703 = v891;
          v151 = a1;
          v9 = v936;
          v704 = v847;
        }
        else
        {
          LOBYTE(v709) = -1;
        }
        *(_BYTE *)(v701 + 520 * v699 + 338) = v709;
      }
      else
      {
        LOBYTE(v709) = *(_BYTE *)(v701 + 520 * v699 + 338);
      }
      v710 = v703 > v704;
    }
    v711 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v700));
    a4.f32[2] = (float)v9;
    v712.i64[0] = 0x3F0000003F000000;
    v712.i64[1] = 0x3F0000003F000000;
    v713 = vmulq_n_f32(vaddq_f32(a4, v712), v711);
    v943 = v713.i32[2];
    v942 = v713.i64[0];
    sub_223FFDF1C(v12[2], &v942, v709, v710, v711);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v714 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v714;
    v13 = **v714;
    v589 = v6 + 6;
    v9 = a2[2] + 5;
  }
  v715 = v10[375];
  if ((v715 & 0x10000000) != 0)
    v716 = 0x40000000;
  else
    v716 = 0x80000000;
  if ((v715 & 0x20000000) != 0)
    v717 = v716;
  else
    v717 = v715 & 0xCFFFFFFF;
  if ((v717 & 0x40000000) == 0)
  {
    v718 = v7 + 7;
    if ((v717 & 0x80000000) != 0)
    {
      LOBYTE(v727) = -1;
      v728 = 2;
    }
    else
    {
      v719 = *(_QWORD *)(v13 + 2448);
      v720 = v719 + 520 * v717;
      v721 = *(_QWORD *)(v720 + 312);
      v722 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v720 + 336))
      {
        *(_BYTE *)(v720 + 336) = 0;
        v723 = *(unsigned int *)(v720 + 4);
        if ((_DWORD)v723)
        {
          v848 = v722;
          v892 = v721;
          v937 = v9;
          v724 = 0;
          v725 = (unsigned __int8 *)(v719 + 520 * v717 + 36);
          do
          {
            v726 = *v725;
            v725 += 28;
            v724 = sub_223A4EC9C(v724, ((unint64_t)v726 << 8) | 1, 0xFFu);
            --v723;
          }
          while (v723);
          v727 = v724 >> 8;
          if (!(_BYTE)v724)
            LOBYTE(v727) = -1;
          v721 = v892;
          v151 = a1;
          v9 = v937;
          v722 = v848;
        }
        else
        {
          LOBYTE(v727) = -1;
        }
        *(_BYTE *)(v719 + 520 * v717 + 338) = v727;
      }
      else
      {
        LOBYTE(v727) = *(_BYTE *)(v719 + 520 * v717 + 338);
      }
      v728 = v721 > v722;
    }
    v729 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v589, v718));
    a4.f32[2] = (float)v9;
    v730.i64[0] = 0x3F0000003F000000;
    v730.i64[1] = 0x3F0000003F000000;
    v731 = vmulq_n_f32(vaddq_f32(a4, v730), v729);
    v943 = v731.i32[2];
    v942 = v731.i64[0];
    sub_223FFDF1C(v12[2], &v942, v727, v728, v729);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v732 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v732;
    v13 = **v732;
    v9 = a2[2] + 5;
  }
  v733 = v6 + 7;
  v734 = v10[376];
  if ((v734 & 0x10000000) != 0)
    v735 = 0x40000000;
  else
    v735 = 0x80000000;
  if ((v734 & 0x20000000) != 0)
    v736 = v735;
  else
    v736 = v734 & 0xCFFFFFFF;
  if ((v736 & 0x40000000) == 0)
  {
    if ((v736 & 0x80000000) != 0)
    {
      LOBYTE(v745) = -1;
      v746 = 2;
    }
    else
    {
      v737 = *(_QWORD *)(v13 + 2448);
      v738 = v737 + 520 * v736;
      v739 = *(_QWORD *)(v738 + 312);
      v740 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v738 + 336))
      {
        *(_BYTE *)(v738 + 336) = 0;
        v741 = *(unsigned int *)(v738 + 4);
        if ((_DWORD)v741)
        {
          v849 = v740;
          v893 = v739;
          v938 = v9;
          v742 = 0;
          v743 = (unsigned __int8 *)(v737 + 520 * v736 + 36);
          do
          {
            v744 = *v743;
            v743 += 28;
            v742 = sub_223A4EC9C(v742, ((unint64_t)v744 << 8) | 1, 0xFFu);
            --v741;
          }
          while (v741);
          v745 = v742 >> 8;
          if (!(_BYTE)v742)
            LOBYTE(v745) = -1;
          v739 = v893;
          v151 = a1;
          v9 = v938;
          v740 = v849;
        }
        else
        {
          LOBYTE(v745) = -1;
        }
        *(_BYTE *)(v737 + 520 * v736 + 338) = v745;
      }
      else
      {
        LOBYTE(v745) = *(_BYTE *)(v737 + 520 * v736 + 338);
      }
      v746 = v739 > v740;
    }
    v747 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v733, v7));
    a4.f32[2] = (float)v9;
    v748.i64[0] = 0x3F0000003F000000;
    v748.i64[1] = 0x3F0000003F000000;
    v749 = vmulq_n_f32(vaddq_f32(a4, v748), v747);
    v943 = v749.i32[2];
    v942 = v749.i64[0];
    sub_223FFDF1C(v12[2], &v942, v745, v746, v747);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v750 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v750;
    v13 = **v750;
    v733 = a2[1] + 7;
    v9 = a2[2] + 5;
  }
  v751 = v10[377];
  if ((v751 & 0x10000000) != 0)
    v752 = 0x40000000;
  else
    v752 = 0x80000000;
  if ((v751 & 0x20000000) != 0)
    v753 = v752;
  else
    v753 = v751 & 0xCFFFFFFF;
  if ((v753 & 0x40000000) == 0)
  {
    v754 = v7 + 1;
    if ((v753 & 0x80000000) != 0)
    {
      LOBYTE(v763) = -1;
      v764 = 2;
    }
    else
    {
      v755 = *(_QWORD *)(v13 + 2448);
      v756 = v755 + 520 * v753;
      v757 = *(_QWORD *)(v756 + 312);
      v758 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v756 + 336))
      {
        *(_BYTE *)(v756 + 336) = 0;
        v759 = *(unsigned int *)(v756 + 4);
        if ((_DWORD)v759)
        {
          v850 = v758;
          v894 = v757;
          v939 = v9;
          v760 = 0;
          v761 = (unsigned __int8 *)(v755 + 520 * v753 + 36);
          do
          {
            v762 = *v761;
            v761 += 28;
            v760 = sub_223A4EC9C(v760, ((unint64_t)v762 << 8) | 1, 0xFFu);
            --v759;
          }
          while (v759);
          v763 = v760 >> 8;
          if (!(_BYTE)v760)
            LOBYTE(v763) = -1;
          v757 = v894;
          v151 = a1;
          v9 = v939;
          v758 = v850;
        }
        else
        {
          LOBYTE(v763) = -1;
        }
        *(_BYTE *)(v755 + 520 * v753 + 338) = v763;
      }
      else
      {
        LOBYTE(v763) = *(_BYTE *)(v755 + 520 * v753 + 338);
      }
      v764 = v757 > v758;
    }
    v765 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v733, v754));
    a4.f32[2] = (float)v9;
    v766.i64[0] = 0x3F0000003F000000;
    v766.i64[1] = 0x3F0000003F000000;
    v767 = vmulq_n_f32(vaddq_f32(a4, v766), v765);
    v943 = v767.i32[2];
    v942 = v767.i64[0];
    sub_223FFDF1C(v12[2], &v942, v763, v764, v765);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v768 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v768;
    v13 = **v768;
    v733 = a2[1] + 7;
    v9 = a2[2] + 5;
  }
  v769 = v10[378];
  if ((v769 & 0x10000000) != 0)
    v770 = 0x40000000;
  else
    v770 = 0x80000000;
  if ((v769 & 0x20000000) != 0)
    v771 = v770;
  else
    v771 = v769 & 0xCFFFFFFF;
  if ((v771 & 0x40000000) == 0)
  {
    v772 = v7 + 2;
    if ((v771 & 0x80000000) != 0)
    {
      LOBYTE(v781) = -1;
      v782 = 2;
    }
    else
    {
      v773 = *(_QWORD *)(v13 + 2448);
      v774 = v773 + 520 * v771;
      v775 = *(_QWORD *)(v774 + 312);
      v776 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v774 + 336))
      {
        *(_BYTE *)(v774 + 336) = 0;
        v777 = *(unsigned int *)(v774 + 4);
        if ((_DWORD)v777)
        {
          v851 = v776;
          v895 = v775;
          v940 = v9;
          v778 = 0;
          v779 = (unsigned __int8 *)(v773 + 520 * v771 + 36);
          do
          {
            v780 = *v779;
            v779 += 28;
            v778 = sub_223A4EC9C(v778, ((unint64_t)v780 << 8) | 1, 0xFFu);
            --v777;
          }
          while (v777);
          v781 = v778 >> 8;
          if (!(_BYTE)v778)
            LOBYTE(v781) = -1;
          v775 = v895;
          v151 = a1;
          v9 = v940;
          v776 = v851;
        }
        else
        {
          LOBYTE(v781) = -1;
        }
        *(_BYTE *)(v773 + 520 * v771 + 338) = v781;
      }
      else
      {
        LOBYTE(v781) = *(_BYTE *)(v773 + 520 * v771 + 338);
      }
      v782 = v775 > v776;
    }
    v783 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v733, v772));
    a4.f32[2] = (float)v9;
    v784.i64[0] = 0x3F0000003F000000;
    v784.i64[1] = 0x3F0000003F000000;
    v785 = vmulq_n_f32(vaddq_f32(a4, v784), v783);
    v943 = v785.i32[2];
    v942 = v785.i64[0];
    sub_223FFDF1C(v12[2], &v942, v781, v782, v783);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v151 + 8);
    v786 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v151 + 16) + 8);
    v12 = *v786;
    v13 = **v786;
    v733 = a2[1] + 7;
    v9 = a2[2] + 5;
  }
  v787 = v10[379];
  if ((v787 & 0x10000000) != 0)
    v788 = 0x40000000;
  else
    v788 = 0x80000000;
  if ((v787 & 0x20000000) != 0)
    v789 = v788;
  else
    v789 = v787 & 0xCFFFFFFF;
  if ((v789 & 0x40000000) == 0)
  {
    v790 = v7 + 3;
    if ((v789 & 0x80000000) != 0)
    {
      LOBYTE(v799) = -1;
      v800 = 2;
    }
    else
    {
      v791 = *(_QWORD *)(v13 + 2448);
      v792 = v791 + 520 * v789;
      v793 = *(_QWORD *)(v792 + 312);
      v794 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v792 + 336))
      {
        *(_BYTE *)(v792 + 336) = 0;
        v795 = *(unsigned int *)(v792 + 4);
        if ((_DWORD)v795)
        {
          v852 = v794;
          v896 = v793;
          v941 = v9;
          v796 = 0;
          v797 = (unsigned __int8 *)(v791 + 520 * v789 + 36);
          do
          {
            v798 = *v797;
            v797 += 28;
            v796 = sub_223A4EC9C(v796, ((unint64_t)v798 << 8) | 1, 0xFFu);
            --v795;
          }
          while (v795);
          v799 = v796 >> 8;
          if (!(_BYTE)v796)
            LOBYTE(v799) = -1;
          v793 = v896;
          v151 = a1;
          v9 = v941;
          v794 = v852;
        }
        else
        {
          LOBYTE(v799) = -1;
        }
        *(_BYTE *)(v791 + 520 * v789 + 338) = v799;
      }
      else
      {
        LOBYTE(v799) = *(_BYTE *)(v791 + 520 * v789 + 338);
      }
      v800 = v793 > v794;
    }
    v801 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v733, v790));
    a4.f32[2] = (float)v9;
    v802.i64[0] = 0x3F0000003F000000;
    v802.i64[1] = 0x3F0000003F000000;
    v803 = vmulq_n_f32(vaddq_f32(a4, v802), v801);
    v943 = v803.i32[2];
    v942 = v803.i64[0];
    sub_223FFDF1C(v12[2], &v942, v799, v800, v801);
  }
  sub_223D7A57C(v151, a2, a3, a4);
}

void sub_223D7A57C(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t **v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t **v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  float v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t **v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t **v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unint64_t v98;
  int v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  uint64_t **v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  unsigned int v115;
  unint64_t v116;
  int v117;
  float v118;
  float32x4_t v119;
  float32x4_t v120;
  uint64_t **v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unsigned __int8 *v132;
  unsigned int v133;
  unint64_t v134;
  int v135;
  float v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t **v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unsigned __int8 *v150;
  unsigned int v151;
  unint64_t v152;
  int v153;
  float v154;
  float32x4_t v155;
  float32x4_t v156;
  uint64_t **v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned __int8 *v168;
  unsigned int v169;
  unint64_t v170;
  int v171;
  float v172;
  float32x4_t v173;
  float32x4_t v174;
  uint64_t **v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unsigned __int8 *v186;
  unsigned int v187;
  unint64_t v188;
  int v189;
  float v190;
  float32x4_t v191;
  float32x4_t v192;
  uint64_t **v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unsigned int v205;
  unint64_t v206;
  int v207;
  float v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t **v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unsigned __int8 *v222;
  unsigned int v223;
  unint64_t v224;
  int v225;
  float v226;
  float32x4_t v227;
  float32x4_t v228;
  uint64_t **v229;
  int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unsigned __int8 *v240;
  unsigned int v241;
  unint64_t v242;
  int v243;
  float v244;
  float32x4_t v245;
  float32x4_t v246;
  uint64_t **v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unsigned __int8 *v258;
  unsigned int v259;
  unint64_t v260;
  int v261;
  float v262;
  float32x4_t v263;
  float32x4_t v264;
  uint64_t **v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unsigned __int8 *v276;
  unsigned int v277;
  unint64_t v278;
  int v279;
  float v280;
  float32x4_t v281;
  float32x4_t v282;
  uint64_t **v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unsigned __int8 *v294;
  unsigned int v295;
  unint64_t v296;
  int v297;
  float v298;
  float32x4_t v299;
  float32x4_t v300;
  uint64_t **v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unsigned __int8 *v312;
  unsigned int v313;
  unint64_t v314;
  int v315;
  float v316;
  float32x4_t v317;
  float32x4_t v318;
  uint64_t **v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unsigned int v331;
  unint64_t v332;
  int v333;
  float v334;
  float32x4_t v335;
  float32x4_t v336;
  uint64_t **v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unsigned __int8 *v348;
  unsigned int v349;
  unint64_t v350;
  int v351;
  float v352;
  float32x4_t v353;
  float32x4_t v354;
  uint64_t **v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unsigned __int8 *v366;
  unsigned int v367;
  unint64_t v368;
  int v369;
  float v370;
  float32x4_t v371;
  float32x4_t v372;
  uint64_t **v373;
  int v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unsigned __int8 *v384;
  unsigned int v385;
  unint64_t v386;
  int v387;
  float v388;
  float32x4_t v389;
  float32x4_t v390;
  uint64_t **v391;
  int v392;
  unsigned int v393;
  unsigned int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unsigned __int8 *v402;
  unsigned int v403;
  unint64_t v404;
  int v405;
  float v406;
  float32x4_t v407;
  float32x4_t v408;
  uint64_t **v409;
  int v410;
  unsigned int v411;
  unsigned int v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  unsigned __int8 *v420;
  unsigned int v421;
  unint64_t v422;
  int v423;
  float v424;
  float32x4_t v425;
  float32x4_t v426;
  uint64_t **v427;
  int v428;
  unsigned int v429;
  unsigned int v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unsigned __int8 *v438;
  unsigned int v439;
  unint64_t v440;
  int v441;
  float v442;
  float32x4_t v443;
  float32x4_t v444;
  uint64_t **v445;
  int v446;
  unsigned int v447;
  unsigned int v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unsigned int v457;
  unint64_t v458;
  int v459;
  float v460;
  float32x4_t v461;
  float32x4_t v462;
  uint64_t **v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unsigned __int8 *v474;
  unsigned int v475;
  unint64_t v476;
  int v477;
  float v478;
  float32x4_t v479;
  float32x4_t v480;
  uint64_t **v481;
  int v482;
  unsigned int v483;
  unsigned int v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unsigned __int8 *v492;
  unsigned int v493;
  unint64_t v494;
  int v495;
  float v496;
  float32x4_t v497;
  float32x4_t v498;
  uint64_t **v499;
  int v500;
  unsigned int v501;
  unsigned int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unsigned __int8 *v510;
  unsigned int v511;
  unint64_t v512;
  int v513;
  float v514;
  float32x4_t v515;
  float32x4_t v516;
  uint64_t **v517;
  int v518;
  int v519;
  unsigned int v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unsigned __int8 *v528;
  unsigned int v529;
  unint64_t v530;
  int v531;
  float v532;
  float32x4_t v533;
  float32x4_t v534;
  uint64_t **v535;
  int v536;
  unsigned int v537;
  unsigned int v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  unsigned __int8 *v546;
  unsigned int v547;
  unint64_t v548;
  int v549;
  float v550;
  float32x4_t v551;
  float32x4_t v552;
  uint64_t **v553;
  int v554;
  unsigned int v555;
  unsigned int v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  unsigned __int8 *v564;
  unsigned int v565;
  unint64_t v566;
  int v567;
  float v568;
  float32x4_t v569;
  float32x4_t v570;
  uint64_t **v571;
  int v572;
  unsigned int v573;
  unsigned int v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unsigned int v583;
  unint64_t v584;
  int v585;
  float v586;
  float32x4_t v587;
  float32x4_t v588;
  uint64_t **v589;
  int v590;
  unsigned int v591;
  unsigned int v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unsigned __int8 *v600;
  unsigned int v601;
  unint64_t v602;
  int v603;
  float v604;
  float32x4_t v605;
  float32x4_t v606;
  uint64_t **v607;
  int v608;
  unsigned int v609;
  unsigned int v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  unsigned __int8 *v618;
  unsigned int v619;
  unint64_t v620;
  int v621;
  float v622;
  float32x4_t v623;
  float32x4_t v624;
  uint64_t **v625;
  int v626;
  unsigned int v627;
  unsigned int v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unint64_t v635;
  unsigned __int8 *v636;
  unsigned int v637;
  unint64_t v638;
  int v639;
  float v640;
  float32x4_t v641;
  float32x4_t v642;
  uint64_t **v643;
  int v644;
  unsigned int v645;
  unsigned int v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  unsigned __int8 *v654;
  unsigned int v655;
  unint64_t v656;
  int v657;
  float v658;
  float32x4_t v659;
  float32x4_t v660;
  uint64_t **v661;
  int v662;
  int v663;
  unsigned int v664;
  unsigned int v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  unsigned __int8 *v672;
  unsigned int v673;
  unint64_t v674;
  int v675;
  float v676;
  float32x4_t v677;
  float32x4_t v678;
  uint64_t **v679;
  int v680;
  unsigned int v681;
  unsigned int v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  unsigned __int8 *v690;
  unsigned int v691;
  unint64_t v692;
  int v693;
  float v694;
  float32x4_t v695;
  float32x4_t v696;
  uint64_t **v697;
  int v698;
  unsigned int v699;
  unsigned int v700;
  int v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  unsigned __int8 *v708;
  unsigned int v709;
  unint64_t v710;
  int v711;
  float v712;
  float32x4_t v713;
  float32x4_t v714;
  uint64_t **v715;
  int v716;
  unsigned int v717;
  unsigned int v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  unint64_t v725;
  unsigned __int8 *v726;
  unsigned int v727;
  unint64_t v728;
  int v729;
  float v730;
  float32x4_t v731;
  float32x4_t v732;
  uint64_t **v733;
  int v734;
  unsigned int v735;
  unsigned int v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unint64_t v743;
  unsigned __int8 *v744;
  unsigned int v745;
  unint64_t v746;
  int v747;
  float v748;
  float32x4_t v749;
  float32x4_t v750;
  uint64_t **v751;
  int v752;
  unsigned int v753;
  unsigned int v754;
  int v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  unint64_t v761;
  unsigned __int8 *v762;
  unsigned int v763;
  unint64_t v764;
  int v765;
  float v766;
  float32x4_t v767;
  float32x4_t v768;
  uint64_t **v769;
  int v770;
  unsigned int v771;
  unsigned int v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  unsigned __int8 *v780;
  unsigned int v781;
  unint64_t v782;
  int v783;
  float v784;
  float32x4_t v785;
  float32x4_t v786;
  uint64_t **v787;
  int v788;
  unsigned int v789;
  unsigned int v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  unint64_t v797;
  unsigned __int8 *v798;
  unsigned int v799;
  unint64_t v800;
  int v801;
  float v802;
  float32x4_t v803;
  float32x4_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  int v890;
  int v891;
  int v892;
  int v893;
  int v894;
  int v895;
  int v897;
  int v898;
  int v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  int v938;
  int v939;
  int v940;
  uint64_t v941;
  __int32 v942;

  v5 = a1;
  v6 = *a2;
  v7 = a2[1];
  v8 = v7 + 7;
  v9 = a2[2];
  v10 = v9 + 5;
  v11 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v12 = v11[380];
  v13 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v14 = *v13;
  if ((v12 & 0x10000000) != 0)
    v15 = 0x40000000;
  else
    v15 = 0x80000000;
  if ((v12 & 0x20000000) != 0)
    v16 = v15;
  else
    v16 = v12 & 0xCFFFFFFF;
  if ((v16 & 0x40000000) == 0)
  {
    v17 = v6 + 4;
    if ((v16 & 0x80000000) != 0)
    {
      LOBYTE(v26) = -1;
      v27 = 2;
    }
    else
    {
      v18 = *(_QWORD *)(v14 + 2448);
      v19 = v18 + 520 * v16;
      v20 = *(_QWORD *)(v19 + 312);
      v21 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v19 + 336))
      {
        *(_BYTE *)(v19 + 336) = 0;
        v22 = *(unsigned int *)(v19 + 4);
        if ((_DWORD)v22)
        {
          v809 = v21;
          v853 = v20;
          v897 = v9 + 5;
          v23 = 0;
          v24 = (unsigned __int8 *)(v18 + 520 * v16 + 36);
          do
          {
            v25 = *v24;
            v24 += 28;
            v23 = sub_223A4EC9C(v23, ((unint64_t)v25 << 8) | 1, 0xFFu);
            --v22;
          }
          while (v22);
          v26 = v23 >> 8;
          if (!(_BYTE)v23)
            LOBYTE(v26) = -1;
          v20 = v853;
          v5 = a1;
          v10 = v897;
          v21 = v809;
        }
        else
        {
          LOBYTE(v26) = -1;
        }
        *(_BYTE *)(v18 + 520 * v16 + 338) = v26;
      }
      else
      {
        LOBYTE(v26) = *(_BYTE *)(v18 + 520 * v16 + 338);
      }
      v27 = v20 > v21;
    }
    a4.f32[0] = (float)v17;
    a4.f32[1] = (float)v8;
    v28 = *(float *)(v14 + 144);
    a4.f32[2] = (float)v10;
    v29.i64[0] = 0x3F0000003F000000;
    v29.i64[1] = 0x3F0000003F000000;
    v30 = vmulq_n_f32(vaddq_f32(a4, v29), v28);
    v942 = v30.i32[2];
    v941 = v30.i64[0];
    sub_223FFDF1C(v13[2], &v941, v26, v27, v28);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v31 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v31;
    v14 = **v31;
    v8 = v7 + 7;
    v10 = v9 + 5;
  }
  v32 = v11[381];
  if ((v32 & 0x10000000) != 0)
    v33 = 0x40000000;
  else
    v33 = 0x80000000;
  if ((v32 & 0x20000000) != 0)
    v34 = v33;
  else
    v34 = v32 & 0xCFFFFFFF;
  if ((v34 & 0x40000000) == 0)
  {
    v35 = v6 + 5;
    if ((v34 & 0x80000000) != 0)
    {
      LOBYTE(v44) = -1;
      v45 = 2;
    }
    else
    {
      v36 = *(_QWORD *)(v14 + 2448);
      v37 = v36 + 520 * v34;
      v38 = *(_QWORD *)(v37 + 312);
      v39 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v37 + 336))
      {
        *(_BYTE *)(v37 + 336) = 0;
        v40 = *(unsigned int *)(v37 + 4);
        if ((_DWORD)v40)
        {
          v810 = v39;
          v854 = v38;
          v898 = v10;
          v41 = 0;
          v42 = (unsigned __int8 *)(v36 + 520 * v34 + 36);
          do
          {
            v43 = *v42;
            v42 += 28;
            v41 = sub_223A4EC9C(v41, ((unint64_t)v43 << 8) | 1, 0xFFu);
            --v40;
          }
          while (v40);
          v44 = v41 >> 8;
          if (!(_BYTE)v41)
            LOBYTE(v44) = -1;
          v38 = v854;
          v5 = a1;
          v10 = v898;
          v39 = v810;
        }
        else
        {
          LOBYTE(v44) = -1;
        }
        *(_BYTE *)(v36 + 520 * v34 + 338) = v44;
      }
      else
      {
        LOBYTE(v44) = *(_BYTE *)(v36 + 520 * v34 + 338);
      }
      v45 = v38 > v39;
    }
    v46 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v35));
    a4.f32[2] = (float)v10;
    v47.i64[0] = 0x3F0000003F000000;
    v47.i64[1] = 0x3F0000003F000000;
    v48 = vmulq_n_f32(vaddq_f32(a4, v47), v46);
    v942 = v48.i32[2];
    v941 = v48.i64[0];
    sub_223FFDF1C(v13[2], &v941, v44, v45, v46);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v49 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v49;
    v14 = **v49;
    v8 = v7 + 7;
    v10 = v9 + 5;
  }
  v50 = v11[382];
  if ((v50 & 0x10000000) != 0)
    v51 = 0x40000000;
  else
    v51 = 0x80000000;
  if ((v50 & 0x20000000) != 0)
    v52 = v51;
  else
    v52 = v50 & 0xCFFFFFFF;
  if ((v52 & 0x40000000) == 0)
  {
    v53 = v6 + 6;
    if ((v52 & 0x80000000) != 0)
    {
      LOBYTE(v62) = -1;
      v63 = 2;
    }
    else
    {
      v54 = *(_QWORD *)(v14 + 2448);
      v55 = v54 + 520 * v52;
      v56 = *(_QWORD *)(v55 + 312);
      v57 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v55 + 336))
      {
        *(_BYTE *)(v55 + 336) = 0;
        v58 = *(unsigned int *)(v55 + 4);
        if ((_DWORD)v58)
        {
          v811 = v57;
          v855 = v56;
          v899 = v10;
          v59 = 0;
          v60 = (unsigned __int8 *)(v54 + 520 * v52 + 36);
          do
          {
            v61 = *v60;
            v60 += 28;
            v59 = sub_223A4EC9C(v59, ((unint64_t)v61 << 8) | 1, 0xFFu);
            --v58;
          }
          while (v58);
          v62 = v59 >> 8;
          if (!(_BYTE)v59)
            LOBYTE(v62) = -1;
          v56 = v855;
          v5 = a1;
          v10 = v899;
          v57 = v811;
        }
        else
        {
          LOBYTE(v62) = -1;
        }
        *(_BYTE *)(v54 + 520 * v52 + 338) = v62;
      }
      else
      {
        LOBYTE(v62) = *(_BYTE *)(v54 + 520 * v52 + 338);
      }
      v63 = v56 > v57;
    }
    v64 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v53));
    a4.f32[2] = (float)v10;
    v65.i64[0] = 0x3F0000003F000000;
    v65.i64[1] = 0x3F0000003F000000;
    v66 = vmulq_n_f32(vaddq_f32(a4, v65), v64);
    v942 = v66.i32[2];
    v941 = v66.i64[0];
    sub_223FFDF1C(v13[2], &v941, v62, v63, v64);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v67 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v67;
    v14 = **v67;
    v8 = v7 + 7;
    v10 = v9 + 5;
  }
  v68 = v11[383];
  if ((v68 & 0x10000000) != 0)
    v69 = 0x40000000;
  else
    v69 = 0x80000000;
  if ((v68 & 0x20000000) != 0)
    v70 = v69;
  else
    v70 = v68 & 0xCFFFFFFF;
  if ((v70 & 0x40000000) == 0)
  {
    v71 = v6 + 7;
    if ((v70 & 0x80000000) != 0)
    {
      LOBYTE(v80) = -1;
      v81 = 2;
    }
    else
    {
      v72 = *(_QWORD *)(v14 + 2448);
      v73 = v72 + 520 * v70;
      v74 = *(_QWORD *)(v73 + 312);
      v75 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v73 + 336))
      {
        *(_BYTE *)(v73 + 336) = 0;
        v76 = *(unsigned int *)(v73 + 4);
        if ((_DWORD)v76)
        {
          v812 = v75;
          v856 = v74;
          v900 = v10;
          v77 = 0;
          v78 = (unsigned __int8 *)(v72 + 520 * v70 + 36);
          do
          {
            v79 = *v78;
            v78 += 28;
            v77 = sub_223A4EC9C(v77, ((unint64_t)v79 << 8) | 1, 0xFFu);
            --v76;
          }
          while (v76);
          v80 = v77 >> 8;
          if (!(_BYTE)v77)
            LOBYTE(v80) = -1;
          v74 = v856;
          v5 = a1;
          v10 = v900;
          v75 = v812;
        }
        else
        {
          LOBYTE(v80) = -1;
        }
        *(_BYTE *)(v72 + 520 * v70 + 338) = v80;
      }
      else
      {
        LOBYTE(v80) = *(_BYTE *)(v72 + 520 * v70 + 338);
      }
      v81 = v74 > v75;
    }
    v82 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v71));
    a4.f32[2] = (float)v10;
    v83.i64[0] = 0x3F0000003F000000;
    v83.i64[1] = 0x3F0000003F000000;
    v84 = vmulq_n_f32(vaddq_f32(a4, v83), v82);
    v942 = v84.i32[2];
    v941 = v84.i64[0];
    sub_223FFDF1C(v13[2], &v941, v80, v81, v82);
    v6 = *a2;
    v7 = a2[1];
    v9 = a2[2];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v85 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v85;
    v14 = **v85;
  }
  v86 = v9 + 6;
  v87 = v11[384];
  if ((v87 & 0x10000000) != 0)
    v88 = 0x40000000;
  else
    v88 = 0x80000000;
  if ((v87 & 0x20000000) != 0)
    v89 = v88;
  else
    v89 = v87 & 0xCFFFFFFF;
  if ((v89 & 0x40000000) == 0)
  {
    if ((v89 & 0x80000000) != 0)
    {
      LOBYTE(v98) = -1;
      v99 = 2;
    }
    else
    {
      v90 = *(_QWORD *)(v14 + 2448);
      v91 = v90 + 520 * v89;
      v92 = *(_QWORD *)(v91 + 312);
      v93 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v91 + 336))
      {
        *(_BYTE *)(v91 + 336) = 0;
        v94 = *(unsigned int *)(v91 + 4);
        if ((_DWORD)v94)
        {
          v813 = v93;
          v857 = v92;
          v901 = v86;
          v95 = 0;
          v96 = (unsigned __int8 *)(v90 + 520 * v89 + 36);
          do
          {
            v97 = *v96;
            v96 += 28;
            v95 = sub_223A4EC9C(v95, ((unint64_t)v97 << 8) | 1, 0xFFu);
            --v94;
          }
          while (v94);
          v98 = v95 >> 8;
          if (!(_BYTE)v95)
            LOBYTE(v98) = -1;
          v86 = v901;
          v93 = v813;
          v92 = v857;
        }
        else
        {
          LOBYTE(v98) = -1;
        }
        *(_BYTE *)(v90 + 520 * v89 + 338) = v98;
        v5 = a1;
      }
      else
      {
        LOBYTE(v98) = *(_BYTE *)(v90 + 520 * v89 + 338);
      }
      v99 = v92 > v93;
    }
    a4.f32[0] = (float)v6;
    a4.f32[1] = (float)v7;
    v100 = *(float *)(v14 + 144);
    a4.f32[2] = (float)v86;
    v101.i64[0] = 0x3F0000003F000000;
    v101.i64[1] = 0x3F0000003F000000;
    v102 = vmulq_n_f32(vaddq_f32(a4, v101), v100);
    v942 = v102.i32[2];
    v941 = v102.i64[0];
    sub_223FFDF1C(v13[2], &v941, v98, v99, v100);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v103 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v103;
    v14 = **v103;
    v86 = a2[2] + 6;
  }
  v104 = v11[385];
  if ((v104 & 0x10000000) != 0)
    v105 = 0x40000000;
  else
    v105 = 0x80000000;
  if ((v104 & 0x20000000) != 0)
    v106 = v105;
  else
    v106 = v104 & 0xCFFFFFFF;
  if ((v106 & 0x40000000) == 0)
  {
    v107 = v6 + 1;
    if ((v106 & 0x80000000) != 0)
    {
      LOBYTE(v116) = -1;
      v117 = 2;
    }
    else
    {
      v108 = *(_QWORD *)(v14 + 2448);
      v109 = v108 + 520 * v106;
      v110 = *(_QWORD *)(v109 + 312);
      v111 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v109 + 336))
      {
        *(_BYTE *)(v109 + 336) = 0;
        v112 = *(unsigned int *)(v109 + 4);
        if ((_DWORD)v112)
        {
          v814 = v111;
          v858 = v110;
          v902 = v86;
          v113 = 0;
          v114 = (unsigned __int8 *)(v108 + 520 * v106 + 36);
          do
          {
            v115 = *v114;
            v114 += 28;
            v113 = sub_223A4EC9C(v113, ((unint64_t)v115 << 8) | 1, 0xFFu);
            --v112;
          }
          while (v112);
          v116 = v113 >> 8;
          if (!(_BYTE)v113)
            LOBYTE(v116) = -1;
          v86 = v902;
          v111 = v814;
          v110 = v858;
        }
        else
        {
          LOBYTE(v116) = -1;
        }
        *(_BYTE *)(v108 + 520 * v106 + 338) = v116;
        v5 = a1;
      }
      else
      {
        LOBYTE(v116) = *(_BYTE *)(v108 + 520 * v106 + 338);
      }
      v117 = v110 > v111;
    }
    v118 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v107));
    a4.f32[2] = (float)v86;
    v119.i64[0] = 0x3F0000003F000000;
    v119.i64[1] = 0x3F0000003F000000;
    v120 = vmulq_n_f32(vaddq_f32(a4, v119), v118);
    v942 = v120.i32[2];
    v941 = v120.i64[0];
    sub_223FFDF1C(v13[2], &v941, v116, v117, v118);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v121 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v121;
    v14 = **v121;
    v86 = a2[2] + 6;
  }
  v122 = v11[386];
  if ((v122 & 0x10000000) != 0)
    v123 = 0x40000000;
  else
    v123 = 0x80000000;
  if ((v122 & 0x20000000) != 0)
    v124 = v123;
  else
    v124 = v122 & 0xCFFFFFFF;
  if ((v124 & 0x40000000) == 0)
  {
    v125 = v6 + 2;
    if ((v124 & 0x80000000) != 0)
    {
      LOBYTE(v134) = -1;
      v135 = 2;
    }
    else
    {
      v126 = *(_QWORD *)(v14 + 2448);
      v127 = v126 + 520 * v124;
      v128 = *(_QWORD *)(v127 + 312);
      v129 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v127 + 336))
      {
        *(_BYTE *)(v127 + 336) = 0;
        v130 = *(unsigned int *)(v127 + 4);
        if ((_DWORD)v130)
        {
          v815 = v129;
          v859 = v128;
          v903 = v86;
          v131 = 0;
          v132 = (unsigned __int8 *)(v126 + 520 * v124 + 36);
          do
          {
            v133 = *v132;
            v132 += 28;
            v131 = sub_223A4EC9C(v131, ((unint64_t)v133 << 8) | 1, 0xFFu);
            --v130;
          }
          while (v130);
          v134 = v131 >> 8;
          if (!(_BYTE)v131)
            LOBYTE(v134) = -1;
          v86 = v903;
          v129 = v815;
          v128 = v859;
        }
        else
        {
          LOBYTE(v134) = -1;
        }
        *(_BYTE *)(v126 + 520 * v124 + 338) = v134;
        v5 = a1;
      }
      else
      {
        LOBYTE(v134) = *(_BYTE *)(v126 + 520 * v124 + 338);
      }
      v135 = v128 > v129;
    }
    v136 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v125));
    a4.f32[2] = (float)v86;
    v137.i64[0] = 0x3F0000003F000000;
    v137.i64[1] = 0x3F0000003F000000;
    v138 = vmulq_n_f32(vaddq_f32(a4, v137), v136);
    v942 = v138.i32[2];
    v941 = v138.i64[0];
    sub_223FFDF1C(v13[2], &v941, v134, v135, v136);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v139 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v139;
    v14 = **v139;
    v86 = a2[2] + 6;
  }
  v140 = v11[387];
  if ((v140 & 0x10000000) != 0)
    v141 = 0x40000000;
  else
    v141 = 0x80000000;
  if ((v140 & 0x20000000) != 0)
    v142 = v141;
  else
    v142 = v140 & 0xCFFFFFFF;
  if ((v142 & 0x40000000) == 0)
  {
    v143 = v6 + 3;
    if ((v142 & 0x80000000) != 0)
    {
      LOBYTE(v152) = -1;
      v153 = 2;
    }
    else
    {
      v144 = *(_QWORD *)(v14 + 2448);
      v145 = v144 + 520 * v142;
      v146 = *(_QWORD *)(v145 + 312);
      v147 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v145 + 336))
      {
        *(_BYTE *)(v145 + 336) = 0;
        v148 = *(unsigned int *)(v145 + 4);
        if ((_DWORD)v148)
        {
          v816 = v147;
          v860 = v146;
          v904 = v86;
          v149 = 0;
          v150 = (unsigned __int8 *)(v144 + 520 * v142 + 36);
          do
          {
            v151 = *v150;
            v150 += 28;
            v149 = sub_223A4EC9C(v149, ((unint64_t)v151 << 8) | 1, 0xFFu);
            --v148;
          }
          while (v148);
          v152 = v149 >> 8;
          if (!(_BYTE)v149)
            LOBYTE(v152) = -1;
          v86 = v904;
          v147 = v816;
          v146 = v860;
        }
        else
        {
          LOBYTE(v152) = -1;
        }
        *(_BYTE *)(v144 + 520 * v142 + 338) = v152;
        v5 = a1;
      }
      else
      {
        LOBYTE(v152) = *(_BYTE *)(v144 + 520 * v142 + 338);
      }
      v153 = v146 > v147;
    }
    v154 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v143));
    a4.f32[2] = (float)v86;
    v155.i64[0] = 0x3F0000003F000000;
    v155.i64[1] = 0x3F0000003F000000;
    v156 = vmulq_n_f32(vaddq_f32(a4, v155), v154);
    v942 = v156.i32[2];
    v941 = v156.i64[0];
    sub_223FFDF1C(v13[2], &v941, v152, v153, v154);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v157 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v157;
    v14 = **v157;
    v86 = a2[2] + 6;
  }
  v158 = v11[388];
  if ((v158 & 0x10000000) != 0)
    v159 = 0x40000000;
  else
    v159 = 0x80000000;
  if ((v158 & 0x20000000) != 0)
    v160 = v159;
  else
    v160 = v158 & 0xCFFFFFFF;
  if ((v160 & 0x40000000) == 0)
  {
    v161 = v6 + 4;
    if ((v160 & 0x80000000) != 0)
    {
      LOBYTE(v170) = -1;
      v171 = 2;
    }
    else
    {
      v162 = *(_QWORD *)(v14 + 2448);
      v163 = v162 + 520 * v160;
      v164 = *(_QWORD *)(v163 + 312);
      v165 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v163 + 336))
      {
        *(_BYTE *)(v163 + 336) = 0;
        v166 = *(unsigned int *)(v163 + 4);
        if ((_DWORD)v166)
        {
          v817 = v165;
          v861 = v164;
          v905 = v86;
          v167 = 0;
          v168 = (unsigned __int8 *)(v162 + 520 * v160 + 36);
          do
          {
            v169 = *v168;
            v168 += 28;
            v167 = sub_223A4EC9C(v167, ((unint64_t)v169 << 8) | 1, 0xFFu);
            --v166;
          }
          while (v166);
          v170 = v167 >> 8;
          if (!(_BYTE)v167)
            LOBYTE(v170) = -1;
          v86 = v905;
          v165 = v817;
          v164 = v861;
        }
        else
        {
          LOBYTE(v170) = -1;
        }
        *(_BYTE *)(v162 + 520 * v160 + 338) = v170;
        v5 = a1;
      }
      else
      {
        LOBYTE(v170) = *(_BYTE *)(v162 + 520 * v160 + 338);
      }
      v171 = v164 > v165;
    }
    v172 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v161));
    a4.f32[2] = (float)v86;
    v173.i64[0] = 0x3F0000003F000000;
    v173.i64[1] = 0x3F0000003F000000;
    v174 = vmulq_n_f32(vaddq_f32(a4, v173), v172);
    v942 = v174.i32[2];
    v941 = v174.i64[0];
    sub_223FFDF1C(v13[2], &v941, v170, v171, v172);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v175 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v175;
    v14 = **v175;
    v86 = a2[2] + 6;
  }
  v176 = v11[389];
  if ((v176 & 0x10000000) != 0)
    v177 = 0x40000000;
  else
    v177 = 0x80000000;
  if ((v176 & 0x20000000) != 0)
    v178 = v177;
  else
    v178 = v176 & 0xCFFFFFFF;
  if ((v178 & 0x40000000) == 0)
  {
    v179 = v6 + 5;
    if ((v178 & 0x80000000) != 0)
    {
      LOBYTE(v188) = -1;
      v189 = 2;
    }
    else
    {
      v180 = *(_QWORD *)(v14 + 2448);
      v181 = v180 + 520 * v178;
      v182 = *(_QWORD *)(v181 + 312);
      v183 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v181 + 336))
      {
        *(_BYTE *)(v181 + 336) = 0;
        v184 = *(unsigned int *)(v181 + 4);
        if ((_DWORD)v184)
        {
          v818 = v183;
          v862 = v182;
          v906 = v86;
          v185 = 0;
          v186 = (unsigned __int8 *)(v180 + 520 * v178 + 36);
          do
          {
            v187 = *v186;
            v186 += 28;
            v185 = sub_223A4EC9C(v185, ((unint64_t)v187 << 8) | 1, 0xFFu);
            --v184;
          }
          while (v184);
          v188 = v185 >> 8;
          if (!(_BYTE)v185)
            LOBYTE(v188) = -1;
          v86 = v906;
          v183 = v818;
          v182 = v862;
        }
        else
        {
          LOBYTE(v188) = -1;
        }
        *(_BYTE *)(v180 + 520 * v178 + 338) = v188;
        v5 = a1;
      }
      else
      {
        LOBYTE(v188) = *(_BYTE *)(v180 + 520 * v178 + 338);
      }
      v189 = v182 > v183;
    }
    v190 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v179));
    a4.f32[2] = (float)v86;
    v191.i64[0] = 0x3F0000003F000000;
    v191.i64[1] = 0x3F0000003F000000;
    v192 = vmulq_n_f32(vaddq_f32(a4, v191), v190);
    v942 = v192.i32[2];
    v941 = v192.i64[0];
    sub_223FFDF1C(v13[2], &v941, v188, v189, v190);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v193 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v193;
    v14 = **v193;
    v86 = a2[2] + 6;
  }
  v194 = v11[390];
  if ((v194 & 0x10000000) != 0)
    v195 = 0x40000000;
  else
    v195 = 0x80000000;
  if ((v194 & 0x20000000) != 0)
    v196 = v195;
  else
    v196 = v194 & 0xCFFFFFFF;
  if ((v196 & 0x40000000) == 0)
  {
    v197 = v6 + 6;
    if ((v196 & 0x80000000) != 0)
    {
      LOBYTE(v206) = -1;
      v207 = 2;
    }
    else
    {
      v198 = *(_QWORD *)(v14 + 2448);
      v199 = v198 + 520 * v196;
      v200 = *(_QWORD *)(v199 + 312);
      v201 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v199 + 336))
      {
        *(_BYTE *)(v199 + 336) = 0;
        v202 = *(unsigned int *)(v199 + 4);
        if ((_DWORD)v202)
        {
          v819 = v201;
          v863 = v200;
          v907 = v86;
          v203 = 0;
          v204 = (unsigned __int8 *)(v198 + 520 * v196 + 36);
          do
          {
            v205 = *v204;
            v204 += 28;
            v203 = sub_223A4EC9C(v203, ((unint64_t)v205 << 8) | 1, 0xFFu);
            --v202;
          }
          while (v202);
          v206 = v203 >> 8;
          if (!(_BYTE)v203)
            LOBYTE(v206) = -1;
          v86 = v907;
          v201 = v819;
          v200 = v863;
        }
        else
        {
          LOBYTE(v206) = -1;
        }
        *(_BYTE *)(v198 + 520 * v196 + 338) = v206;
        v5 = a1;
      }
      else
      {
        LOBYTE(v206) = *(_BYTE *)(v198 + 520 * v196 + 338);
      }
      v207 = v200 > v201;
    }
    v208 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v197));
    a4.f32[2] = (float)v86;
    v209.i64[0] = 0x3F0000003F000000;
    v209.i64[1] = 0x3F0000003F000000;
    v210 = vmulq_n_f32(vaddq_f32(a4, v209), v208);
    v942 = v210.i32[2];
    v941 = v210.i64[0];
    sub_223FFDF1C(v13[2], &v941, v206, v207, v208);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v211 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v211;
    v14 = **v211;
    v86 = a2[2] + 6;
  }
  v212 = v11[391];
  if ((v212 & 0x10000000) != 0)
    v213 = 0x40000000;
  else
    v213 = 0x80000000;
  if ((v212 & 0x20000000) != 0)
    v214 = v213;
  else
    v214 = v212 & 0xCFFFFFFF;
  if ((v214 & 0x40000000) == 0)
  {
    v215 = v6 + 7;
    if ((v214 & 0x80000000) != 0)
    {
      LOBYTE(v224) = -1;
      v225 = 2;
    }
    else
    {
      v216 = *(_QWORD *)(v14 + 2448);
      v217 = v216 + 520 * v214;
      v218 = *(_QWORD *)(v217 + 312);
      v219 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v217 + 336))
      {
        *(_BYTE *)(v217 + 336) = 0;
        v220 = *(unsigned int *)(v217 + 4);
        if ((_DWORD)v220)
        {
          v820 = v219;
          v864 = v218;
          v908 = v86;
          v221 = 0;
          v222 = (unsigned __int8 *)(v216 + 520 * v214 + 36);
          do
          {
            v223 = *v222;
            v222 += 28;
            v221 = sub_223A4EC9C(v221, ((unint64_t)v223 << 8) | 1, 0xFFu);
            --v220;
          }
          while (v220);
          v224 = v221 >> 8;
          if (!(_BYTE)v221)
            LOBYTE(v224) = -1;
          v86 = v908;
          v219 = v820;
          v218 = v864;
        }
        else
        {
          LOBYTE(v224) = -1;
        }
        *(_BYTE *)(v216 + 520 * v214 + 338) = v224;
        v5 = a1;
      }
      else
      {
        LOBYTE(v224) = *(_BYTE *)(v216 + 520 * v214 + 338);
      }
      v225 = v218 > v219;
    }
    v226 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v215));
    a4.f32[2] = (float)v86;
    v227.i64[0] = 0x3F0000003F000000;
    v227.i64[1] = 0x3F0000003F000000;
    v228 = vmulq_n_f32(vaddq_f32(a4, v227), v226);
    v942 = v228.i32[2];
    v941 = v228.i64[0];
    sub_223FFDF1C(v13[2], &v941, v224, v225, v226);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v229 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v229;
    v14 = **v229;
    v86 = a2[2] + 6;
  }
  v230 = v7 + 1;
  v231 = v11[392];
  if ((v231 & 0x10000000) != 0)
    v232 = 0x40000000;
  else
    v232 = 0x80000000;
  if ((v231 & 0x20000000) != 0)
    v233 = v232;
  else
    v233 = v231 & 0xCFFFFFFF;
  if ((v233 & 0x40000000) == 0)
  {
    if ((v233 & 0x80000000) != 0)
    {
      LOBYTE(v242) = -1;
      v243 = 2;
    }
    else
    {
      v234 = *(_QWORD *)(v14 + 2448);
      v235 = v234 + 520 * v233;
      v236 = *(_QWORD *)(v235 + 312);
      v237 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v235 + 336))
      {
        *(_BYTE *)(v235 + 336) = 0;
        v238 = *(unsigned int *)(v235 + 4);
        if ((_DWORD)v238)
        {
          v821 = v237;
          v865 = v236;
          v909 = v86;
          v239 = 0;
          v240 = (unsigned __int8 *)(v234 + 520 * v233 + 36);
          do
          {
            v241 = *v240;
            v240 += 28;
            v239 = sub_223A4EC9C(v239, ((unint64_t)v241 << 8) | 1, 0xFFu);
            --v238;
          }
          while (v238);
          v242 = v239 >> 8;
          if (!(_BYTE)v239)
            LOBYTE(v242) = -1;
          v86 = v909;
          v237 = v821;
          v236 = v865;
        }
        else
        {
          LOBYTE(v242) = -1;
        }
        *(_BYTE *)(v234 + 520 * v233 + 338) = v242;
        v5 = a1;
      }
      else
      {
        LOBYTE(v242) = *(_BYTE *)(v234 + 520 * v233 + 338);
      }
      v243 = v236 > v237;
    }
    v244 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v6));
    a4.f32[2] = (float)v86;
    v245.i64[0] = 0x3F0000003F000000;
    v245.i64[1] = 0x3F0000003F000000;
    v246 = vmulq_n_f32(vaddq_f32(a4, v245), v244);
    v942 = v246.i32[2];
    v941 = v246.i64[0];
    sub_223FFDF1C(v13[2], &v941, v242, v243, v244);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v247 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v247;
    v14 = **v247;
    v230 = v7 + 1;
    v86 = a2[2] + 6;
  }
  v248 = v11[393];
  if ((v248 & 0x10000000) != 0)
    v249 = 0x40000000;
  else
    v249 = 0x80000000;
  if ((v248 & 0x20000000) != 0)
    v250 = v249;
  else
    v250 = v248 & 0xCFFFFFFF;
  if ((v250 & 0x40000000) == 0)
  {
    v251 = v6 + 1;
    if ((v250 & 0x80000000) != 0)
    {
      LOBYTE(v260) = -1;
      v261 = 2;
    }
    else
    {
      v252 = *(_QWORD *)(v14 + 2448);
      v253 = v252 + 520 * v250;
      v254 = *(_QWORD *)(v253 + 312);
      v255 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v253 + 336))
      {
        *(_BYTE *)(v253 + 336) = 0;
        v256 = *(unsigned int *)(v253 + 4);
        if ((_DWORD)v256)
        {
          v822 = v255;
          v866 = v254;
          v910 = v86;
          v257 = 0;
          v258 = (unsigned __int8 *)(v252 + 520 * v250 + 36);
          do
          {
            v259 = *v258;
            v258 += 28;
            v257 = sub_223A4EC9C(v257, ((unint64_t)v259 << 8) | 1, 0xFFu);
            --v256;
          }
          while (v256);
          v260 = v257 >> 8;
          if (!(_BYTE)v257)
            LOBYTE(v260) = -1;
          v86 = v910;
          v255 = v822;
          v254 = v866;
        }
        else
        {
          LOBYTE(v260) = -1;
        }
        *(_BYTE *)(v252 + 520 * v250 + 338) = v260;
        v5 = a1;
      }
      else
      {
        LOBYTE(v260) = *(_BYTE *)(v252 + 520 * v250 + 338);
      }
      v261 = v254 > v255;
    }
    v262 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v251));
    a4.f32[2] = (float)v86;
    v263.i64[0] = 0x3F0000003F000000;
    v263.i64[1] = 0x3F0000003F000000;
    v264 = vmulq_n_f32(vaddq_f32(a4, v263), v262);
    v942 = v264.i32[2];
    v941 = v264.i64[0];
    sub_223FFDF1C(v13[2], &v941, v260, v261, v262);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v265 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v265;
    v14 = **v265;
    v230 = v7 + 1;
    v86 = a2[2] + 6;
  }
  v266 = v11[394];
  if ((v266 & 0x10000000) != 0)
    v267 = 0x40000000;
  else
    v267 = 0x80000000;
  if ((v266 & 0x20000000) != 0)
    v268 = v267;
  else
    v268 = v266 & 0xCFFFFFFF;
  if ((v268 & 0x40000000) == 0)
  {
    v269 = v6 + 2;
    if ((v268 & 0x80000000) != 0)
    {
      LOBYTE(v278) = -1;
      v279 = 2;
    }
    else
    {
      v270 = *(_QWORD *)(v14 + 2448);
      v271 = v270 + 520 * v268;
      v272 = *(_QWORD *)(v271 + 312);
      v273 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v271 + 336))
      {
        *(_BYTE *)(v271 + 336) = 0;
        v274 = *(unsigned int *)(v271 + 4);
        if ((_DWORD)v274)
        {
          v823 = v273;
          v867 = v272;
          v911 = v86;
          v275 = 0;
          v276 = (unsigned __int8 *)(v270 + 520 * v268 + 36);
          do
          {
            v277 = *v276;
            v276 += 28;
            v275 = sub_223A4EC9C(v275, ((unint64_t)v277 << 8) | 1, 0xFFu);
            --v274;
          }
          while (v274);
          v278 = v275 >> 8;
          if (!(_BYTE)v275)
            LOBYTE(v278) = -1;
          v86 = v911;
          v273 = v823;
          v272 = v867;
        }
        else
        {
          LOBYTE(v278) = -1;
        }
        *(_BYTE *)(v270 + 520 * v268 + 338) = v278;
        v5 = a1;
      }
      else
      {
        LOBYTE(v278) = *(_BYTE *)(v270 + 520 * v268 + 338);
      }
      v279 = v272 > v273;
    }
    v280 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v269));
    a4.f32[2] = (float)v86;
    v281.i64[0] = 0x3F0000003F000000;
    v281.i64[1] = 0x3F0000003F000000;
    v282 = vmulq_n_f32(vaddq_f32(a4, v281), v280);
    v942 = v282.i32[2];
    v941 = v282.i64[0];
    sub_223FFDF1C(v13[2], &v941, v278, v279, v280);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v283 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v283;
    v14 = **v283;
    v230 = v7 + 1;
    v86 = a2[2] + 6;
  }
  v284 = v11[395];
  if ((v284 & 0x10000000) != 0)
    v285 = 0x40000000;
  else
    v285 = 0x80000000;
  if ((v284 & 0x20000000) != 0)
    v286 = v285;
  else
    v286 = v284 & 0xCFFFFFFF;
  if ((v286 & 0x40000000) == 0)
  {
    v287 = v6 + 3;
    if ((v286 & 0x80000000) != 0)
    {
      LOBYTE(v296) = -1;
      v297 = 2;
    }
    else
    {
      v288 = *(_QWORD *)(v14 + 2448);
      v289 = v288 + 520 * v286;
      v290 = *(_QWORD *)(v289 + 312);
      v291 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v289 + 336))
      {
        *(_BYTE *)(v289 + 336) = 0;
        v292 = *(unsigned int *)(v289 + 4);
        if ((_DWORD)v292)
        {
          v824 = v291;
          v868 = v290;
          v912 = v86;
          v293 = 0;
          v294 = (unsigned __int8 *)(v288 + 520 * v286 + 36);
          do
          {
            v295 = *v294;
            v294 += 28;
            v293 = sub_223A4EC9C(v293, ((unint64_t)v295 << 8) | 1, 0xFFu);
            --v292;
          }
          while (v292);
          v296 = v293 >> 8;
          if (!(_BYTE)v293)
            LOBYTE(v296) = -1;
          v86 = v912;
          v291 = v824;
          v290 = v868;
        }
        else
        {
          LOBYTE(v296) = -1;
        }
        *(_BYTE *)(v288 + 520 * v286 + 338) = v296;
        v5 = a1;
      }
      else
      {
        LOBYTE(v296) = *(_BYTE *)(v288 + 520 * v286 + 338);
      }
      v297 = v290 > v291;
    }
    v298 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v287));
    a4.f32[2] = (float)v86;
    v299.i64[0] = 0x3F0000003F000000;
    v299.i64[1] = 0x3F0000003F000000;
    v300 = vmulq_n_f32(vaddq_f32(a4, v299), v298);
    v942 = v300.i32[2];
    v941 = v300.i64[0];
    sub_223FFDF1C(v13[2], &v941, v296, v297, v298);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v301 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v301;
    v14 = **v301;
    v230 = v7 + 1;
    v86 = a2[2] + 6;
  }
  v302 = v11[396];
  if ((v302 & 0x10000000) != 0)
    v303 = 0x40000000;
  else
    v303 = 0x80000000;
  if ((v302 & 0x20000000) != 0)
    v304 = v303;
  else
    v304 = v302 & 0xCFFFFFFF;
  if ((v304 & 0x40000000) == 0)
  {
    v305 = v6 + 4;
    if ((v304 & 0x80000000) != 0)
    {
      LOBYTE(v314) = -1;
      v315 = 2;
    }
    else
    {
      v306 = *(_QWORD *)(v14 + 2448);
      v307 = v306 + 520 * v304;
      v308 = *(_QWORD *)(v307 + 312);
      v309 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v307 + 336))
      {
        *(_BYTE *)(v307 + 336) = 0;
        v310 = *(unsigned int *)(v307 + 4);
        if ((_DWORD)v310)
        {
          v825 = v309;
          v869 = v308;
          v913 = v86;
          v311 = 0;
          v312 = (unsigned __int8 *)(v306 + 520 * v304 + 36);
          do
          {
            v313 = *v312;
            v312 += 28;
            v311 = sub_223A4EC9C(v311, ((unint64_t)v313 << 8) | 1, 0xFFu);
            --v310;
          }
          while (v310);
          v314 = v311 >> 8;
          if (!(_BYTE)v311)
            LOBYTE(v314) = -1;
          v86 = v913;
          v309 = v825;
          v308 = v869;
        }
        else
        {
          LOBYTE(v314) = -1;
        }
        *(_BYTE *)(v306 + 520 * v304 + 338) = v314;
        v5 = a1;
      }
      else
      {
        LOBYTE(v314) = *(_BYTE *)(v306 + 520 * v304 + 338);
      }
      v315 = v308 > v309;
    }
    v316 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v305));
    a4.f32[2] = (float)v86;
    v317.i64[0] = 0x3F0000003F000000;
    v317.i64[1] = 0x3F0000003F000000;
    v318 = vmulq_n_f32(vaddq_f32(a4, v317), v316);
    v942 = v318.i32[2];
    v941 = v318.i64[0];
    sub_223FFDF1C(v13[2], &v941, v314, v315, v316);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v319 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v319;
    v14 = **v319;
    v230 = v7 + 1;
    v86 = a2[2] + 6;
  }
  v320 = v11[397];
  if ((v320 & 0x10000000) != 0)
    v321 = 0x40000000;
  else
    v321 = 0x80000000;
  if ((v320 & 0x20000000) != 0)
    v322 = v321;
  else
    v322 = v320 & 0xCFFFFFFF;
  if ((v322 & 0x40000000) == 0)
  {
    v323 = v6 + 5;
    if ((v322 & 0x80000000) != 0)
    {
      LOBYTE(v332) = -1;
      v333 = 2;
    }
    else
    {
      v324 = *(_QWORD *)(v14 + 2448);
      v325 = v324 + 520 * v322;
      v326 = *(_QWORD *)(v325 + 312);
      v327 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v325 + 336))
      {
        *(_BYTE *)(v325 + 336) = 0;
        v328 = *(unsigned int *)(v325 + 4);
        if ((_DWORD)v328)
        {
          v826 = v327;
          v870 = v326;
          v914 = v86;
          v329 = 0;
          v330 = (unsigned __int8 *)(v324 + 520 * v322 + 36);
          do
          {
            v331 = *v330;
            v330 += 28;
            v329 = sub_223A4EC9C(v329, ((unint64_t)v331 << 8) | 1, 0xFFu);
            --v328;
          }
          while (v328);
          v332 = v329 >> 8;
          if (!(_BYTE)v329)
            LOBYTE(v332) = -1;
          v86 = v914;
          v327 = v826;
          v326 = v870;
        }
        else
        {
          LOBYTE(v332) = -1;
        }
        *(_BYTE *)(v324 + 520 * v322 + 338) = v332;
        v5 = a1;
      }
      else
      {
        LOBYTE(v332) = *(_BYTE *)(v324 + 520 * v322 + 338);
      }
      v333 = v326 > v327;
    }
    v334 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v323));
    a4.f32[2] = (float)v86;
    v335.i64[0] = 0x3F0000003F000000;
    v335.i64[1] = 0x3F0000003F000000;
    v336 = vmulq_n_f32(vaddq_f32(a4, v335), v334);
    v942 = v336.i32[2];
    v941 = v336.i64[0];
    sub_223FFDF1C(v13[2], &v941, v332, v333, v334);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v337 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v337;
    v14 = **v337;
    v230 = v7 + 1;
    v86 = a2[2] + 6;
  }
  v338 = v11[398];
  if ((v338 & 0x10000000) != 0)
    v339 = 0x40000000;
  else
    v339 = 0x80000000;
  if ((v338 & 0x20000000) != 0)
    v340 = v339;
  else
    v340 = v338 & 0xCFFFFFFF;
  if ((v340 & 0x40000000) == 0)
  {
    v341 = v6 + 6;
    if ((v340 & 0x80000000) != 0)
    {
      LOBYTE(v350) = -1;
      v351 = 2;
    }
    else
    {
      v342 = *(_QWORD *)(v14 + 2448);
      v343 = v342 + 520 * v340;
      v344 = *(_QWORD *)(v343 + 312);
      v345 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v343 + 336))
      {
        *(_BYTE *)(v343 + 336) = 0;
        v346 = *(unsigned int *)(v343 + 4);
        if ((_DWORD)v346)
        {
          v827 = v345;
          v871 = v344;
          v915 = v86;
          v347 = 0;
          v348 = (unsigned __int8 *)(v342 + 520 * v340 + 36);
          do
          {
            v349 = *v348;
            v348 += 28;
            v347 = sub_223A4EC9C(v347, ((unint64_t)v349 << 8) | 1, 0xFFu);
            --v346;
          }
          while (v346);
          v350 = v347 >> 8;
          if (!(_BYTE)v347)
            LOBYTE(v350) = -1;
          v86 = v915;
          v345 = v827;
          v344 = v871;
        }
        else
        {
          LOBYTE(v350) = -1;
        }
        *(_BYTE *)(v342 + 520 * v340 + 338) = v350;
        v5 = a1;
      }
      else
      {
        LOBYTE(v350) = *(_BYTE *)(v342 + 520 * v340 + 338);
      }
      v351 = v344 > v345;
    }
    v352 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v341));
    a4.f32[2] = (float)v86;
    v353.i64[0] = 0x3F0000003F000000;
    v353.i64[1] = 0x3F0000003F000000;
    v354 = vmulq_n_f32(vaddq_f32(a4, v353), v352);
    v942 = v354.i32[2];
    v941 = v354.i64[0];
    sub_223FFDF1C(v13[2], &v941, v350, v351, v352);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v355 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v355;
    v14 = **v355;
    v230 = v7 + 1;
    v86 = a2[2] + 6;
  }
  v356 = v11[399];
  if ((v356 & 0x10000000) != 0)
    v357 = 0x40000000;
  else
    v357 = 0x80000000;
  if ((v356 & 0x20000000) != 0)
    v358 = v357;
  else
    v358 = v356 & 0xCFFFFFFF;
  if ((v358 & 0x40000000) == 0)
  {
    v359 = v6 + 7;
    if ((v358 & 0x80000000) != 0)
    {
      LOBYTE(v368) = -1;
      v369 = 2;
    }
    else
    {
      v360 = *(_QWORD *)(v14 + 2448);
      v361 = v360 + 520 * v358;
      v362 = *(_QWORD *)(v361 + 312);
      v363 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v361 + 336))
      {
        *(_BYTE *)(v361 + 336) = 0;
        v364 = *(unsigned int *)(v361 + 4);
        if ((_DWORD)v364)
        {
          v828 = v363;
          v872 = v362;
          v916 = v86;
          v365 = 0;
          v366 = (unsigned __int8 *)(v360 + 520 * v358 + 36);
          do
          {
            v367 = *v366;
            v366 += 28;
            v365 = sub_223A4EC9C(v365, ((unint64_t)v367 << 8) | 1, 0xFFu);
            --v364;
          }
          while (v364);
          v368 = v365 >> 8;
          if (!(_BYTE)v365)
            LOBYTE(v368) = -1;
          v86 = v916;
          v363 = v828;
          v362 = v872;
        }
        else
        {
          LOBYTE(v368) = -1;
        }
        *(_BYTE *)(v360 + 520 * v358 + 338) = v368;
        v5 = a1;
      }
      else
      {
        LOBYTE(v368) = *(_BYTE *)(v360 + 520 * v358 + 338);
      }
      v369 = v362 > v363;
    }
    v370 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v230, v359));
    a4.f32[2] = (float)v86;
    v371.i64[0] = 0x3F0000003F000000;
    v371.i64[1] = 0x3F0000003F000000;
    v372 = vmulq_n_f32(vaddq_f32(a4, v371), v370);
    v942 = v372.i32[2];
    v941 = v372.i64[0];
    sub_223FFDF1C(v13[2], &v941, v368, v369, v370);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v373 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v373;
    v14 = **v373;
    v86 = a2[2] + 6;
  }
  v374 = v7 + 2;
  v375 = v11[400];
  if ((v375 & 0x10000000) != 0)
    v376 = 0x40000000;
  else
    v376 = 0x80000000;
  if ((v375 & 0x20000000) != 0)
    v377 = v376;
  else
    v377 = v375 & 0xCFFFFFFF;
  if ((v377 & 0x40000000) == 0)
  {
    if ((v377 & 0x80000000) != 0)
    {
      LOBYTE(v386) = -1;
      v387 = 2;
    }
    else
    {
      v378 = *(_QWORD *)(v14 + 2448);
      v379 = v378 + 520 * v377;
      v380 = *(_QWORD *)(v379 + 312);
      v381 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v379 + 336))
      {
        *(_BYTE *)(v379 + 336) = 0;
        v382 = *(unsigned int *)(v379 + 4);
        if ((_DWORD)v382)
        {
          v829 = v381;
          v873 = v380;
          v917 = v86;
          v383 = 0;
          v384 = (unsigned __int8 *)(v378 + 520 * v377 + 36);
          do
          {
            v385 = *v384;
            v384 += 28;
            v383 = sub_223A4EC9C(v383, ((unint64_t)v385 << 8) | 1, 0xFFu);
            --v382;
          }
          while (v382);
          v386 = v383 >> 8;
          if (!(_BYTE)v383)
            LOBYTE(v386) = -1;
          v86 = v917;
          v381 = v829;
          v380 = v873;
        }
        else
        {
          LOBYTE(v386) = -1;
        }
        *(_BYTE *)(v378 + 520 * v377 + 338) = v386;
        v5 = a1;
      }
      else
      {
        LOBYTE(v386) = *(_BYTE *)(v378 + 520 * v377 + 338);
      }
      v387 = v380 > v381;
    }
    v388 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v6));
    a4.f32[2] = (float)v86;
    v389.i64[0] = 0x3F0000003F000000;
    v389.i64[1] = 0x3F0000003F000000;
    v390 = vmulq_n_f32(vaddq_f32(a4, v389), v388);
    v942 = v390.i32[2];
    v941 = v390.i64[0];
    sub_223FFDF1C(v13[2], &v941, v386, v387, v388);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v391 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v391;
    v14 = **v391;
    v374 = v7 + 2;
    v86 = a2[2] + 6;
  }
  v392 = v11[401];
  if ((v392 & 0x10000000) != 0)
    v393 = 0x40000000;
  else
    v393 = 0x80000000;
  if ((v392 & 0x20000000) != 0)
    v394 = v393;
  else
    v394 = v392 & 0xCFFFFFFF;
  if ((v394 & 0x40000000) == 0)
  {
    v395 = v6 + 1;
    if ((v394 & 0x80000000) != 0)
    {
      LOBYTE(v404) = -1;
      v405 = 2;
    }
    else
    {
      v396 = *(_QWORD *)(v14 + 2448);
      v397 = v396 + 520 * v394;
      v398 = *(_QWORD *)(v397 + 312);
      v399 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v397 + 336))
      {
        *(_BYTE *)(v397 + 336) = 0;
        v400 = *(unsigned int *)(v397 + 4);
        if ((_DWORD)v400)
        {
          v830 = v399;
          v874 = v398;
          v918 = v86;
          v401 = 0;
          v402 = (unsigned __int8 *)(v396 + 520 * v394 + 36);
          do
          {
            v403 = *v402;
            v402 += 28;
            v401 = sub_223A4EC9C(v401, ((unint64_t)v403 << 8) | 1, 0xFFu);
            --v400;
          }
          while (v400);
          v404 = v401 >> 8;
          if (!(_BYTE)v401)
            LOBYTE(v404) = -1;
          v86 = v918;
          v399 = v830;
          v398 = v874;
        }
        else
        {
          LOBYTE(v404) = -1;
        }
        *(_BYTE *)(v396 + 520 * v394 + 338) = v404;
        v5 = a1;
      }
      else
      {
        LOBYTE(v404) = *(_BYTE *)(v396 + 520 * v394 + 338);
      }
      v405 = v398 > v399;
    }
    v406 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v395));
    a4.f32[2] = (float)v86;
    v407.i64[0] = 0x3F0000003F000000;
    v407.i64[1] = 0x3F0000003F000000;
    v408 = vmulq_n_f32(vaddq_f32(a4, v407), v406);
    v942 = v408.i32[2];
    v941 = v408.i64[0];
    sub_223FFDF1C(v13[2], &v941, v404, v405, v406);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v409 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v409;
    v14 = **v409;
    v374 = v7 + 2;
    v86 = a2[2] + 6;
  }
  v410 = v11[402];
  if ((v410 & 0x10000000) != 0)
    v411 = 0x40000000;
  else
    v411 = 0x80000000;
  if ((v410 & 0x20000000) != 0)
    v412 = v411;
  else
    v412 = v410 & 0xCFFFFFFF;
  if ((v412 & 0x40000000) == 0)
  {
    v413 = v6 + 2;
    if ((v412 & 0x80000000) != 0)
    {
      LOBYTE(v422) = -1;
      v423 = 2;
    }
    else
    {
      v414 = *(_QWORD *)(v14 + 2448);
      v415 = v414 + 520 * v412;
      v416 = *(_QWORD *)(v415 + 312);
      v417 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v415 + 336))
      {
        *(_BYTE *)(v415 + 336) = 0;
        v418 = *(unsigned int *)(v415 + 4);
        if ((_DWORD)v418)
        {
          v831 = v417;
          v875 = v416;
          v919 = v86;
          v419 = 0;
          v420 = (unsigned __int8 *)(v414 + 520 * v412 + 36);
          do
          {
            v421 = *v420;
            v420 += 28;
            v419 = sub_223A4EC9C(v419, ((unint64_t)v421 << 8) | 1, 0xFFu);
            --v418;
          }
          while (v418);
          v422 = v419 >> 8;
          if (!(_BYTE)v419)
            LOBYTE(v422) = -1;
          v86 = v919;
          v417 = v831;
          v416 = v875;
        }
        else
        {
          LOBYTE(v422) = -1;
        }
        *(_BYTE *)(v414 + 520 * v412 + 338) = v422;
        v5 = a1;
      }
      else
      {
        LOBYTE(v422) = *(_BYTE *)(v414 + 520 * v412 + 338);
      }
      v423 = v416 > v417;
    }
    v424 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v413));
    a4.f32[2] = (float)v86;
    v425.i64[0] = 0x3F0000003F000000;
    v425.i64[1] = 0x3F0000003F000000;
    v426 = vmulq_n_f32(vaddq_f32(a4, v425), v424);
    v942 = v426.i32[2];
    v941 = v426.i64[0];
    sub_223FFDF1C(v13[2], &v941, v422, v423, v424);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v427 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v427;
    v14 = **v427;
    v374 = v7 + 2;
    v86 = a2[2] + 6;
  }
  v428 = v11[403];
  if ((v428 & 0x10000000) != 0)
    v429 = 0x40000000;
  else
    v429 = 0x80000000;
  if ((v428 & 0x20000000) != 0)
    v430 = v429;
  else
    v430 = v428 & 0xCFFFFFFF;
  if ((v430 & 0x40000000) == 0)
  {
    v431 = v6 + 3;
    if ((v430 & 0x80000000) != 0)
    {
      LOBYTE(v440) = -1;
      v441 = 2;
    }
    else
    {
      v432 = *(_QWORD *)(v14 + 2448);
      v433 = v432 + 520 * v430;
      v434 = *(_QWORD *)(v433 + 312);
      v435 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v433 + 336))
      {
        *(_BYTE *)(v433 + 336) = 0;
        v436 = *(unsigned int *)(v433 + 4);
        if ((_DWORD)v436)
        {
          v832 = v435;
          v876 = v434;
          v920 = v86;
          v437 = 0;
          v438 = (unsigned __int8 *)(v432 + 520 * v430 + 36);
          do
          {
            v439 = *v438;
            v438 += 28;
            v437 = sub_223A4EC9C(v437, ((unint64_t)v439 << 8) | 1, 0xFFu);
            --v436;
          }
          while (v436);
          v440 = v437 >> 8;
          if (!(_BYTE)v437)
            LOBYTE(v440) = -1;
          v86 = v920;
          v435 = v832;
          v434 = v876;
        }
        else
        {
          LOBYTE(v440) = -1;
        }
        *(_BYTE *)(v432 + 520 * v430 + 338) = v440;
        v5 = a1;
      }
      else
      {
        LOBYTE(v440) = *(_BYTE *)(v432 + 520 * v430 + 338);
      }
      v441 = v434 > v435;
    }
    v442 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v431));
    a4.f32[2] = (float)v86;
    v443.i64[0] = 0x3F0000003F000000;
    v443.i64[1] = 0x3F0000003F000000;
    v444 = vmulq_n_f32(vaddq_f32(a4, v443), v442);
    v942 = v444.i32[2];
    v941 = v444.i64[0];
    sub_223FFDF1C(v13[2], &v941, v440, v441, v442);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v445 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v445;
    v14 = **v445;
    v374 = v7 + 2;
    v86 = a2[2] + 6;
  }
  v446 = v11[404];
  if ((v446 & 0x10000000) != 0)
    v447 = 0x40000000;
  else
    v447 = 0x80000000;
  if ((v446 & 0x20000000) != 0)
    v448 = v447;
  else
    v448 = v446 & 0xCFFFFFFF;
  if ((v448 & 0x40000000) == 0)
  {
    v449 = v6 + 4;
    if ((v448 & 0x80000000) != 0)
    {
      LOBYTE(v458) = -1;
      v459 = 2;
    }
    else
    {
      v450 = *(_QWORD *)(v14 + 2448);
      v451 = v450 + 520 * v448;
      v452 = *(_QWORD *)(v451 + 312);
      v453 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v451 + 336))
      {
        *(_BYTE *)(v451 + 336) = 0;
        v454 = *(unsigned int *)(v451 + 4);
        if ((_DWORD)v454)
        {
          v833 = v453;
          v877 = v452;
          v921 = v86;
          v455 = 0;
          v456 = (unsigned __int8 *)(v450 + 520 * v448 + 36);
          do
          {
            v457 = *v456;
            v456 += 28;
            v455 = sub_223A4EC9C(v455, ((unint64_t)v457 << 8) | 1, 0xFFu);
            --v454;
          }
          while (v454);
          v458 = v455 >> 8;
          if (!(_BYTE)v455)
            LOBYTE(v458) = -1;
          v86 = v921;
          v453 = v833;
          v452 = v877;
        }
        else
        {
          LOBYTE(v458) = -1;
        }
        *(_BYTE *)(v450 + 520 * v448 + 338) = v458;
        v5 = a1;
      }
      else
      {
        LOBYTE(v458) = *(_BYTE *)(v450 + 520 * v448 + 338);
      }
      v459 = v452 > v453;
    }
    v460 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v449));
    a4.f32[2] = (float)v86;
    v461.i64[0] = 0x3F0000003F000000;
    v461.i64[1] = 0x3F0000003F000000;
    v462 = vmulq_n_f32(vaddq_f32(a4, v461), v460);
    v942 = v462.i32[2];
    v941 = v462.i64[0];
    sub_223FFDF1C(v13[2], &v941, v458, v459, v460);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v463 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v463;
    v14 = **v463;
    v374 = v7 + 2;
    v86 = a2[2] + 6;
  }
  v464 = v11[405];
  if ((v464 & 0x10000000) != 0)
    v465 = 0x40000000;
  else
    v465 = 0x80000000;
  if ((v464 & 0x20000000) != 0)
    v466 = v465;
  else
    v466 = v464 & 0xCFFFFFFF;
  if ((v466 & 0x40000000) == 0)
  {
    v467 = v6 + 5;
    if ((v466 & 0x80000000) != 0)
    {
      LOBYTE(v476) = -1;
      v477 = 2;
    }
    else
    {
      v468 = *(_QWORD *)(v14 + 2448);
      v469 = v468 + 520 * v466;
      v470 = *(_QWORD *)(v469 + 312);
      v471 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v469 + 336))
      {
        *(_BYTE *)(v469 + 336) = 0;
        v472 = *(unsigned int *)(v469 + 4);
        if ((_DWORD)v472)
        {
          v834 = v471;
          v878 = v470;
          v922 = v86;
          v473 = 0;
          v474 = (unsigned __int8 *)(v468 + 520 * v466 + 36);
          do
          {
            v475 = *v474;
            v474 += 28;
            v473 = sub_223A4EC9C(v473, ((unint64_t)v475 << 8) | 1, 0xFFu);
            --v472;
          }
          while (v472);
          v476 = v473 >> 8;
          if (!(_BYTE)v473)
            LOBYTE(v476) = -1;
          v86 = v922;
          v471 = v834;
          v470 = v878;
        }
        else
        {
          LOBYTE(v476) = -1;
        }
        *(_BYTE *)(v468 + 520 * v466 + 338) = v476;
        v5 = a1;
      }
      else
      {
        LOBYTE(v476) = *(_BYTE *)(v468 + 520 * v466 + 338);
      }
      v477 = v470 > v471;
    }
    v478 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v467));
    a4.f32[2] = (float)v86;
    v479.i64[0] = 0x3F0000003F000000;
    v479.i64[1] = 0x3F0000003F000000;
    v480 = vmulq_n_f32(vaddq_f32(a4, v479), v478);
    v942 = v480.i32[2];
    v941 = v480.i64[0];
    sub_223FFDF1C(v13[2], &v941, v476, v477, v478);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v481 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v481;
    v14 = **v481;
    v374 = v7 + 2;
    v86 = a2[2] + 6;
  }
  v482 = v11[406];
  if ((v482 & 0x10000000) != 0)
    v483 = 0x40000000;
  else
    v483 = 0x80000000;
  if ((v482 & 0x20000000) != 0)
    v484 = v483;
  else
    v484 = v482 & 0xCFFFFFFF;
  if ((v484 & 0x40000000) == 0)
  {
    v485 = v6 + 6;
    if ((v484 & 0x80000000) != 0)
    {
      LOBYTE(v494) = -1;
      v495 = 2;
    }
    else
    {
      v486 = *(_QWORD *)(v14 + 2448);
      v487 = v486 + 520 * v484;
      v488 = *(_QWORD *)(v487 + 312);
      v489 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v487 + 336))
      {
        *(_BYTE *)(v487 + 336) = 0;
        v490 = *(unsigned int *)(v487 + 4);
        if ((_DWORD)v490)
        {
          v835 = v489;
          v879 = v488;
          v923 = v86;
          v491 = 0;
          v492 = (unsigned __int8 *)(v486 + 520 * v484 + 36);
          do
          {
            v493 = *v492;
            v492 += 28;
            v491 = sub_223A4EC9C(v491, ((unint64_t)v493 << 8) | 1, 0xFFu);
            --v490;
          }
          while (v490);
          v494 = v491 >> 8;
          if (!(_BYTE)v491)
            LOBYTE(v494) = -1;
          v86 = v923;
          v489 = v835;
          v488 = v879;
        }
        else
        {
          LOBYTE(v494) = -1;
        }
        *(_BYTE *)(v486 + 520 * v484 + 338) = v494;
        v5 = a1;
      }
      else
      {
        LOBYTE(v494) = *(_BYTE *)(v486 + 520 * v484 + 338);
      }
      v495 = v488 > v489;
    }
    v496 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v485));
    a4.f32[2] = (float)v86;
    v497.i64[0] = 0x3F0000003F000000;
    v497.i64[1] = 0x3F0000003F000000;
    v498 = vmulq_n_f32(vaddq_f32(a4, v497), v496);
    v942 = v498.i32[2];
    v941 = v498.i64[0];
    sub_223FFDF1C(v13[2], &v941, v494, v495, v496);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v499 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v499;
    v14 = **v499;
    v374 = v7 + 2;
    v86 = a2[2] + 6;
  }
  v500 = v11[407];
  if ((v500 & 0x10000000) != 0)
    v501 = 0x40000000;
  else
    v501 = 0x80000000;
  if ((v500 & 0x20000000) != 0)
    v502 = v501;
  else
    v502 = v500 & 0xCFFFFFFF;
  if ((v502 & 0x40000000) == 0)
  {
    v503 = v6 + 7;
    if ((v502 & 0x80000000) != 0)
    {
      LOBYTE(v512) = -1;
      v513 = 2;
    }
    else
    {
      v504 = *(_QWORD *)(v14 + 2448);
      v505 = v504 + 520 * v502;
      v506 = *(_QWORD *)(v505 + 312);
      v507 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v505 + 336))
      {
        *(_BYTE *)(v505 + 336) = 0;
        v508 = *(unsigned int *)(v505 + 4);
        if ((_DWORD)v508)
        {
          v836 = v507;
          v880 = v506;
          v924 = v86;
          v509 = 0;
          v510 = (unsigned __int8 *)(v504 + 520 * v502 + 36);
          do
          {
            v511 = *v510;
            v510 += 28;
            v509 = sub_223A4EC9C(v509, ((unint64_t)v511 << 8) | 1, 0xFFu);
            --v508;
          }
          while (v508);
          v512 = v509 >> 8;
          if (!(_BYTE)v509)
            LOBYTE(v512) = -1;
          v86 = v924;
          v507 = v836;
          v506 = v880;
        }
        else
        {
          LOBYTE(v512) = -1;
        }
        *(_BYTE *)(v504 + 520 * v502 + 338) = v512;
        v5 = a1;
      }
      else
      {
        LOBYTE(v512) = *(_BYTE *)(v504 + 520 * v502 + 338);
      }
      v513 = v506 > v507;
    }
    v514 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v374, v503));
    a4.f32[2] = (float)v86;
    v515.i64[0] = 0x3F0000003F000000;
    v515.i64[1] = 0x3F0000003F000000;
    v516 = vmulq_n_f32(vaddq_f32(a4, v515), v514);
    v942 = v516.i32[2];
    v941 = v516.i64[0];
    sub_223FFDF1C(v13[2], &v941, v512, v513, v514);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v517 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v517;
    v14 = **v517;
    v86 = a2[2] + 6;
  }
  v518 = v7 + 3;
  v519 = v11[408];
  if ((v519 & 0x10000000) != 0)
    v520 = 0x40000000;
  else
    v520 = 0x80000000;
  if ((v519 & 0x20000000) != 0)
    v521 = v520;
  else
    v521 = v519 & 0xCFFFFFFF;
  if ((v521 & 0x40000000) == 0)
  {
    if ((v521 & 0x80000000) != 0)
    {
      LOBYTE(v530) = -1;
      v531 = 2;
    }
    else
    {
      v522 = *(_QWORD *)(v14 + 2448);
      v523 = v522 + 520 * v521;
      v524 = *(_QWORD *)(v523 + 312);
      v525 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v523 + 336))
      {
        *(_BYTE *)(v523 + 336) = 0;
        v526 = *(unsigned int *)(v523 + 4);
        if ((_DWORD)v526)
        {
          v837 = v525;
          v881 = v524;
          v925 = v86;
          v527 = 0;
          v528 = (unsigned __int8 *)(v522 + 520 * v521 + 36);
          do
          {
            v529 = *v528;
            v528 += 28;
            v527 = sub_223A4EC9C(v527, ((unint64_t)v529 << 8) | 1, 0xFFu);
            --v526;
          }
          while (v526);
          v530 = v527 >> 8;
          if (!(_BYTE)v527)
            LOBYTE(v530) = -1;
          v86 = v925;
          v525 = v837;
          v524 = v881;
        }
        else
        {
          LOBYTE(v530) = -1;
        }
        *(_BYTE *)(v522 + 520 * v521 + 338) = v530;
        v5 = a1;
      }
      else
      {
        LOBYTE(v530) = *(_BYTE *)(v522 + 520 * v521 + 338);
      }
      v531 = v524 > v525;
    }
    v532 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v6));
    a4.f32[2] = (float)v86;
    v533.i64[0] = 0x3F0000003F000000;
    v533.i64[1] = 0x3F0000003F000000;
    v534 = vmulq_n_f32(vaddq_f32(a4, v533), v532);
    v942 = v534.i32[2];
    v941 = v534.i64[0];
    sub_223FFDF1C(v13[2], &v941, v530, v531, v532);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v535 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v535;
    v14 = **v535;
    v518 = v7 + 3;
    v86 = a2[2] + 6;
  }
  v536 = v11[409];
  if ((v536 & 0x10000000) != 0)
    v537 = 0x40000000;
  else
    v537 = 0x80000000;
  if ((v536 & 0x20000000) != 0)
    v538 = v537;
  else
    v538 = v536 & 0xCFFFFFFF;
  if ((v538 & 0x40000000) == 0)
  {
    v539 = v6 + 1;
    if ((v538 & 0x80000000) != 0)
    {
      LOBYTE(v548) = -1;
      v549 = 2;
    }
    else
    {
      v540 = *(_QWORD *)(v14 + 2448);
      v541 = v540 + 520 * v538;
      v542 = *(_QWORD *)(v541 + 312);
      v543 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v541 + 336))
      {
        *(_BYTE *)(v541 + 336) = 0;
        v544 = *(unsigned int *)(v541 + 4);
        if ((_DWORD)v544)
        {
          v838 = v543;
          v882 = v542;
          v926 = v86;
          v545 = 0;
          v546 = (unsigned __int8 *)(v540 + 520 * v538 + 36);
          do
          {
            v547 = *v546;
            v546 += 28;
            v545 = sub_223A4EC9C(v545, ((unint64_t)v547 << 8) | 1, 0xFFu);
            --v544;
          }
          while (v544);
          v548 = v545 >> 8;
          if (!(_BYTE)v545)
            LOBYTE(v548) = -1;
          v86 = v926;
          v543 = v838;
          v542 = v882;
        }
        else
        {
          LOBYTE(v548) = -1;
        }
        *(_BYTE *)(v540 + 520 * v538 + 338) = v548;
        v5 = a1;
      }
      else
      {
        LOBYTE(v548) = *(_BYTE *)(v540 + 520 * v538 + 338);
      }
      v549 = v542 > v543;
    }
    v550 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v539));
    a4.f32[2] = (float)v86;
    v551.i64[0] = 0x3F0000003F000000;
    v551.i64[1] = 0x3F0000003F000000;
    v552 = vmulq_n_f32(vaddq_f32(a4, v551), v550);
    v942 = v552.i32[2];
    v941 = v552.i64[0];
    sub_223FFDF1C(v13[2], &v941, v548, v549, v550);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v553 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v553;
    v14 = **v553;
    v518 = v7 + 3;
    v86 = a2[2] + 6;
  }
  v554 = v11[410];
  if ((v554 & 0x10000000) != 0)
    v555 = 0x40000000;
  else
    v555 = 0x80000000;
  if ((v554 & 0x20000000) != 0)
    v556 = v555;
  else
    v556 = v554 & 0xCFFFFFFF;
  if ((v556 & 0x40000000) == 0)
  {
    v557 = v6 + 2;
    if ((v556 & 0x80000000) != 0)
    {
      LOBYTE(v566) = -1;
      v567 = 2;
    }
    else
    {
      v558 = *(_QWORD *)(v14 + 2448);
      v559 = v558 + 520 * v556;
      v560 = *(_QWORD *)(v559 + 312);
      v561 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v559 + 336))
      {
        *(_BYTE *)(v559 + 336) = 0;
        v562 = *(unsigned int *)(v559 + 4);
        if ((_DWORD)v562)
        {
          v839 = v561;
          v883 = v560;
          v927 = v86;
          v563 = 0;
          v564 = (unsigned __int8 *)(v558 + 520 * v556 + 36);
          do
          {
            v565 = *v564;
            v564 += 28;
            v563 = sub_223A4EC9C(v563, ((unint64_t)v565 << 8) | 1, 0xFFu);
            --v562;
          }
          while (v562);
          v566 = v563 >> 8;
          if (!(_BYTE)v563)
            LOBYTE(v566) = -1;
          v86 = v927;
          v561 = v839;
          v560 = v883;
        }
        else
        {
          LOBYTE(v566) = -1;
        }
        *(_BYTE *)(v558 + 520 * v556 + 338) = v566;
        v5 = a1;
      }
      else
      {
        LOBYTE(v566) = *(_BYTE *)(v558 + 520 * v556 + 338);
      }
      v567 = v560 > v561;
    }
    v568 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v557));
    a4.f32[2] = (float)v86;
    v569.i64[0] = 0x3F0000003F000000;
    v569.i64[1] = 0x3F0000003F000000;
    v570 = vmulq_n_f32(vaddq_f32(a4, v569), v568);
    v942 = v570.i32[2];
    v941 = v570.i64[0];
    sub_223FFDF1C(v13[2], &v941, v566, v567, v568);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v571 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v571;
    v14 = **v571;
    v518 = v7 + 3;
    v86 = a2[2] + 6;
  }
  v572 = v11[411];
  if ((v572 & 0x10000000) != 0)
    v573 = 0x40000000;
  else
    v573 = 0x80000000;
  if ((v572 & 0x20000000) != 0)
    v574 = v573;
  else
    v574 = v572 & 0xCFFFFFFF;
  if ((v574 & 0x40000000) == 0)
  {
    v575 = v6 + 3;
    if ((v574 & 0x80000000) != 0)
    {
      LOBYTE(v584) = -1;
      v585 = 2;
    }
    else
    {
      v576 = *(_QWORD *)(v14 + 2448);
      v577 = v576 + 520 * v574;
      v578 = *(_QWORD *)(v577 + 312);
      v579 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v577 + 336))
      {
        *(_BYTE *)(v577 + 336) = 0;
        v580 = *(unsigned int *)(v577 + 4);
        if ((_DWORD)v580)
        {
          v840 = v579;
          v884 = v578;
          v928 = v86;
          v581 = 0;
          v582 = (unsigned __int8 *)(v576 + 520 * v574 + 36);
          do
          {
            v583 = *v582;
            v582 += 28;
            v581 = sub_223A4EC9C(v581, ((unint64_t)v583 << 8) | 1, 0xFFu);
            --v580;
          }
          while (v580);
          v584 = v581 >> 8;
          if (!(_BYTE)v581)
            LOBYTE(v584) = -1;
          v86 = v928;
          v579 = v840;
          v578 = v884;
        }
        else
        {
          LOBYTE(v584) = -1;
        }
        *(_BYTE *)(v576 + 520 * v574 + 338) = v584;
        v5 = a1;
      }
      else
      {
        LOBYTE(v584) = *(_BYTE *)(v576 + 520 * v574 + 338);
      }
      v585 = v578 > v579;
    }
    v586 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v575));
    a4.f32[2] = (float)v86;
    v587.i64[0] = 0x3F0000003F000000;
    v587.i64[1] = 0x3F0000003F000000;
    v588 = vmulq_n_f32(vaddq_f32(a4, v587), v586);
    v942 = v588.i32[2];
    v941 = v588.i64[0];
    sub_223FFDF1C(v13[2], &v941, v584, v585, v586);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v589 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v589;
    v14 = **v589;
    v518 = v7 + 3;
    v86 = a2[2] + 6;
  }
  v590 = v11[412];
  if ((v590 & 0x10000000) != 0)
    v591 = 0x40000000;
  else
    v591 = 0x80000000;
  if ((v590 & 0x20000000) != 0)
    v592 = v591;
  else
    v592 = v590 & 0xCFFFFFFF;
  if ((v592 & 0x40000000) == 0)
  {
    v593 = v6 + 4;
    if ((v592 & 0x80000000) != 0)
    {
      LOBYTE(v602) = -1;
      v603 = 2;
    }
    else
    {
      v594 = *(_QWORD *)(v14 + 2448);
      v595 = v594 + 520 * v592;
      v596 = *(_QWORD *)(v595 + 312);
      v597 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v595 + 336))
      {
        *(_BYTE *)(v595 + 336) = 0;
        v598 = *(unsigned int *)(v595 + 4);
        if ((_DWORD)v598)
        {
          v841 = v597;
          v885 = v596;
          v929 = v86;
          v599 = 0;
          v600 = (unsigned __int8 *)(v594 + 520 * v592 + 36);
          do
          {
            v601 = *v600;
            v600 += 28;
            v599 = sub_223A4EC9C(v599, ((unint64_t)v601 << 8) | 1, 0xFFu);
            --v598;
          }
          while (v598);
          v602 = v599 >> 8;
          if (!(_BYTE)v599)
            LOBYTE(v602) = -1;
          v86 = v929;
          v597 = v841;
          v596 = v885;
        }
        else
        {
          LOBYTE(v602) = -1;
        }
        *(_BYTE *)(v594 + 520 * v592 + 338) = v602;
        v5 = a1;
      }
      else
      {
        LOBYTE(v602) = *(_BYTE *)(v594 + 520 * v592 + 338);
      }
      v603 = v596 > v597;
    }
    v604 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v593));
    a4.f32[2] = (float)v86;
    v605.i64[0] = 0x3F0000003F000000;
    v605.i64[1] = 0x3F0000003F000000;
    v606 = vmulq_n_f32(vaddq_f32(a4, v605), v604);
    v942 = v606.i32[2];
    v941 = v606.i64[0];
    sub_223FFDF1C(v13[2], &v941, v602, v603, v604);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v607 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v607;
    v14 = **v607;
    v518 = v7 + 3;
    v86 = a2[2] + 6;
  }
  v608 = v11[413];
  if ((v608 & 0x10000000) != 0)
    v609 = 0x40000000;
  else
    v609 = 0x80000000;
  if ((v608 & 0x20000000) != 0)
    v610 = v609;
  else
    v610 = v608 & 0xCFFFFFFF;
  if ((v610 & 0x40000000) == 0)
  {
    v611 = v6 + 5;
    if ((v610 & 0x80000000) != 0)
    {
      LOBYTE(v620) = -1;
      v621 = 2;
    }
    else
    {
      v612 = *(_QWORD *)(v14 + 2448);
      v613 = v612 + 520 * v610;
      v614 = *(_QWORD *)(v613 + 312);
      v615 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v613 + 336))
      {
        *(_BYTE *)(v613 + 336) = 0;
        v616 = *(unsigned int *)(v613 + 4);
        if ((_DWORD)v616)
        {
          v842 = v615;
          v886 = v614;
          v930 = v86;
          v617 = 0;
          v618 = (unsigned __int8 *)(v612 + 520 * v610 + 36);
          do
          {
            v619 = *v618;
            v618 += 28;
            v617 = sub_223A4EC9C(v617, ((unint64_t)v619 << 8) | 1, 0xFFu);
            --v616;
          }
          while (v616);
          v620 = v617 >> 8;
          if (!(_BYTE)v617)
            LOBYTE(v620) = -1;
          v86 = v930;
          v615 = v842;
          v614 = v886;
        }
        else
        {
          LOBYTE(v620) = -1;
        }
        *(_BYTE *)(v612 + 520 * v610 + 338) = v620;
        v5 = a1;
      }
      else
      {
        LOBYTE(v620) = *(_BYTE *)(v612 + 520 * v610 + 338);
      }
      v621 = v614 > v615;
    }
    v622 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v611));
    a4.f32[2] = (float)v86;
    v623.i64[0] = 0x3F0000003F000000;
    v623.i64[1] = 0x3F0000003F000000;
    v624 = vmulq_n_f32(vaddq_f32(a4, v623), v622);
    v942 = v624.i32[2];
    v941 = v624.i64[0];
    sub_223FFDF1C(v13[2], &v941, v620, v621, v622);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v625 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v625;
    v14 = **v625;
    v518 = v7 + 3;
    v86 = a2[2] + 6;
  }
  v626 = v11[414];
  if ((v626 & 0x10000000) != 0)
    v627 = 0x40000000;
  else
    v627 = 0x80000000;
  if ((v626 & 0x20000000) != 0)
    v628 = v627;
  else
    v628 = v626 & 0xCFFFFFFF;
  if ((v628 & 0x40000000) == 0)
  {
    v629 = v6 + 6;
    if ((v628 & 0x80000000) != 0)
    {
      LOBYTE(v638) = -1;
      v639 = 2;
    }
    else
    {
      v630 = *(_QWORD *)(v14 + 2448);
      v631 = v630 + 520 * v628;
      v632 = *(_QWORD *)(v631 + 312);
      v633 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v631 + 336))
      {
        *(_BYTE *)(v631 + 336) = 0;
        v634 = *(unsigned int *)(v631 + 4);
        if ((_DWORD)v634)
        {
          v843 = v633;
          v887 = v632;
          v931 = v86;
          v635 = 0;
          v636 = (unsigned __int8 *)(v630 + 520 * v628 + 36);
          do
          {
            v637 = *v636;
            v636 += 28;
            v635 = sub_223A4EC9C(v635, ((unint64_t)v637 << 8) | 1, 0xFFu);
            --v634;
          }
          while (v634);
          v638 = v635 >> 8;
          if (!(_BYTE)v635)
            LOBYTE(v638) = -1;
          v86 = v931;
          v633 = v843;
          v632 = v887;
        }
        else
        {
          LOBYTE(v638) = -1;
        }
        *(_BYTE *)(v630 + 520 * v628 + 338) = v638;
        v5 = a1;
      }
      else
      {
        LOBYTE(v638) = *(_BYTE *)(v630 + 520 * v628 + 338);
      }
      v639 = v632 > v633;
    }
    v640 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v629));
    a4.f32[2] = (float)v86;
    v641.i64[0] = 0x3F0000003F000000;
    v641.i64[1] = 0x3F0000003F000000;
    v642 = vmulq_n_f32(vaddq_f32(a4, v641), v640);
    v942 = v642.i32[2];
    v941 = v642.i64[0];
    sub_223FFDF1C(v13[2], &v941, v638, v639, v640);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v643 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v643;
    v14 = **v643;
    v518 = v7 + 3;
    v86 = a2[2] + 6;
  }
  v644 = v11[415];
  if ((v644 & 0x10000000) != 0)
    v645 = 0x40000000;
  else
    v645 = 0x80000000;
  if ((v644 & 0x20000000) != 0)
    v646 = v645;
  else
    v646 = v644 & 0xCFFFFFFF;
  if ((v646 & 0x40000000) == 0)
  {
    v647 = v6 + 7;
    if ((v646 & 0x80000000) != 0)
    {
      LOBYTE(v656) = -1;
      v657 = 2;
    }
    else
    {
      v648 = *(_QWORD *)(v14 + 2448);
      v649 = v648 + 520 * v646;
      v650 = *(_QWORD *)(v649 + 312);
      v651 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v649 + 336))
      {
        *(_BYTE *)(v649 + 336) = 0;
        v652 = *(unsigned int *)(v649 + 4);
        if ((_DWORD)v652)
        {
          v844 = v651;
          v888 = v650;
          v932 = v86;
          v653 = 0;
          v654 = (unsigned __int8 *)(v648 + 520 * v646 + 36);
          do
          {
            v655 = *v654;
            v654 += 28;
            v653 = sub_223A4EC9C(v653, ((unint64_t)v655 << 8) | 1, 0xFFu);
            --v652;
          }
          while (v652);
          v656 = v653 >> 8;
          if (!(_BYTE)v653)
            LOBYTE(v656) = -1;
          v86 = v932;
          v651 = v844;
          v650 = v888;
        }
        else
        {
          LOBYTE(v656) = -1;
        }
        *(_BYTE *)(v648 + 520 * v646 + 338) = v656;
        v5 = a1;
      }
      else
      {
        LOBYTE(v656) = *(_BYTE *)(v648 + 520 * v646 + 338);
      }
      v657 = v650 > v651;
    }
    v658 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v518, v647));
    a4.f32[2] = (float)v86;
    v659.i64[0] = 0x3F0000003F000000;
    v659.i64[1] = 0x3F0000003F000000;
    v660 = vmulq_n_f32(vaddq_f32(a4, v659), v658);
    v942 = v660.i32[2];
    v941 = v660.i64[0];
    sub_223FFDF1C(v13[2], &v941, v656, v657, v658);
    v6 = *a2;
    v7 = a2[1];
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v661 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v661;
    v14 = **v661;
    v86 = a2[2] + 6;
  }
  v662 = v7 + 4;
  v663 = v11[416];
  if ((v663 & 0x10000000) != 0)
    v664 = 0x40000000;
  else
    v664 = 0x80000000;
  if ((v663 & 0x20000000) != 0)
    v665 = v664;
  else
    v665 = v663 & 0xCFFFFFFF;
  if ((v665 & 0x40000000) == 0)
  {
    if ((v665 & 0x80000000) != 0)
    {
      LOBYTE(v674) = -1;
      v675 = 2;
    }
    else
    {
      v666 = *(_QWORD *)(v14 + 2448);
      v667 = v666 + 520 * v665;
      v668 = *(_QWORD *)(v667 + 312);
      v669 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v667 + 336))
      {
        *(_BYTE *)(v667 + 336) = 0;
        v670 = *(unsigned int *)(v667 + 4);
        if ((_DWORD)v670)
        {
          v805 = v669;
          v845 = v668;
          v933 = v86;
          v671 = 0;
          v672 = (unsigned __int8 *)(v666 + 520 * v665 + 36);
          do
          {
            v673 = *v672;
            v672 += 28;
            v671 = sub_223A4EC9C(v671, ((unint64_t)v673 << 8) | 1, 0xFFu);
            --v670;
          }
          while (v670);
          v674 = v671 >> 8;
          if (!(_BYTE)v671)
            LOBYTE(v674) = -1;
          v86 = v933;
          v662 = v7 + 4;
          v669 = v805;
          v668 = v845;
        }
        else
        {
          LOBYTE(v674) = -1;
        }
        *(_BYTE *)(v666 + 520 * v665 + 338) = v674;
        v5 = a1;
      }
      else
      {
        LOBYTE(v674) = *(_BYTE *)(v666 + 520 * v665 + 338);
      }
      v675 = v668 > v669;
    }
    v676 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v6));
    a4.f32[2] = (float)v86;
    v677.i64[0] = 0x3F0000003F000000;
    v677.i64[1] = 0x3F0000003F000000;
    v678 = vmulq_n_f32(vaddq_f32(a4, v677), v676);
    v942 = v678.i32[2];
    v941 = v678.i64[0];
    sub_223FFDF1C(v13[2], &v941, v674, v675, v676);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v679 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v679;
    v14 = **v679;
    v662 = a2[1] + 4;
    v86 = a2[2] + 6;
  }
  v680 = v11[417];
  if ((v680 & 0x10000000) != 0)
    v681 = 0x40000000;
  else
    v681 = 0x80000000;
  if ((v680 & 0x20000000) != 0)
    v682 = v681;
  else
    v682 = v680 & 0xCFFFFFFF;
  if ((v682 & 0x40000000) == 0)
  {
    v683 = v6 + 1;
    if ((v682 & 0x80000000) != 0)
    {
      LOBYTE(v692) = -1;
      v693 = 2;
    }
    else
    {
      v684 = *(_QWORD *)(v14 + 2448);
      v685 = v684 + 520 * v682;
      v686 = *(_QWORD *)(v685 + 312);
      v687 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v685 + 336))
      {
        *(_BYTE *)(v685 + 336) = 0;
        v688 = *(unsigned int *)(v685 + 4);
        if ((_DWORD)v688)
        {
          v846 = v686;
          v889 = v662;
          v934 = v86;
          v689 = 0;
          v690 = (unsigned __int8 *)(v684 + 520 * v682 + 36);
          do
          {
            v691 = *v690;
            v690 += 28;
            v689 = sub_223A4EC9C(v689, ((unint64_t)v691 << 8) | 1, 0xFFu);
            --v688;
          }
          while (v688);
          v692 = v689 >> 8;
          if (!(_BYTE)v689)
            LOBYTE(v692) = -1;
          v86 = v934;
          v662 = v889;
          v686 = v846;
        }
        else
        {
          LOBYTE(v692) = -1;
        }
        *(_BYTE *)(v684 + 520 * v682 + 338) = v692;
        v5 = a1;
      }
      else
      {
        LOBYTE(v692) = *(_BYTE *)(v684 + 520 * v682 + 338);
      }
      v693 = v686 > v687;
    }
    v694 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v683));
    a4.f32[2] = (float)v86;
    v695.i64[0] = 0x3F0000003F000000;
    v695.i64[1] = 0x3F0000003F000000;
    v696 = vmulq_n_f32(vaddq_f32(a4, v695), v694);
    v942 = v696.i32[2];
    v941 = v696.i64[0];
    sub_223FFDF1C(v13[2], &v941, v692, v693, v694);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v697 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v697;
    v14 = **v697;
    v662 = a2[1] + 4;
    v86 = a2[2] + 6;
  }
  v698 = v11[418];
  if ((v698 & 0x10000000) != 0)
    v699 = 0x40000000;
  else
    v699 = 0x80000000;
  if ((v698 & 0x20000000) != 0)
    v700 = v699;
  else
    v700 = v698 & 0xCFFFFFFF;
  if ((v700 & 0x40000000) == 0)
  {
    v701 = v6 + 2;
    if ((v700 & 0x80000000) != 0)
    {
      LOBYTE(v710) = -1;
      v711 = 2;
    }
    else
    {
      v702 = *(_QWORD *)(v14 + 2448);
      v703 = v702 + 520 * v700;
      v704 = *(_QWORD *)(v703 + 312);
      v705 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v703 + 336))
      {
        *(_BYTE *)(v703 + 336) = 0;
        v706 = *(unsigned int *)(v703 + 4);
        if ((_DWORD)v706)
        {
          v806 = v705;
          v847 = v704;
          v890 = v662;
          v935 = v86;
          v707 = 0;
          v708 = (unsigned __int8 *)(v702 + 520 * v700 + 36);
          do
          {
            v709 = *v708;
            v708 += 28;
            v707 = sub_223A4EC9C(v707, ((unint64_t)v709 << 8) | 1, 0xFFu);
            --v706;
          }
          while (v706);
          v710 = v707 >> 8;
          if (!(_BYTE)v707)
            LOBYTE(v710) = -1;
          v86 = v935;
          v662 = v890;
          v705 = v806;
          v704 = v847;
        }
        else
        {
          LOBYTE(v710) = -1;
        }
        *(_BYTE *)(v702 + 520 * v700 + 338) = v710;
        v5 = a1;
      }
      else
      {
        LOBYTE(v710) = *(_BYTE *)(v702 + 520 * v700 + 338);
      }
      v711 = v704 > v705;
    }
    v712 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v701));
    a4.f32[2] = (float)v86;
    v713.i64[0] = 0x3F0000003F000000;
    v713.i64[1] = 0x3F0000003F000000;
    v714 = vmulq_n_f32(vaddq_f32(a4, v713), v712);
    v942 = v714.i32[2];
    v941 = v714.i64[0];
    sub_223FFDF1C(v13[2], &v941, v710, v711, v712);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v715 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v715;
    v14 = **v715;
    v662 = a2[1] + 4;
    v86 = a2[2] + 6;
  }
  v716 = v11[419];
  if ((v716 & 0x10000000) != 0)
    v717 = 0x40000000;
  else
    v717 = 0x80000000;
  if ((v716 & 0x20000000) != 0)
    v718 = v717;
  else
    v718 = v716 & 0xCFFFFFFF;
  if ((v718 & 0x40000000) == 0)
  {
    v719 = v6 + 3;
    if ((v718 & 0x80000000) != 0)
    {
      LOBYTE(v728) = -1;
      v729 = 2;
    }
    else
    {
      v720 = *(_QWORD *)(v14 + 2448);
      v721 = v720 + 520 * v718;
      v722 = *(_QWORD *)(v721 + 312);
      v723 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v721 + 336))
      {
        *(_BYTE *)(v721 + 336) = 0;
        v724 = *(unsigned int *)(v721 + 4);
        if ((_DWORD)v724)
        {
          v848 = v722;
          v891 = v662;
          v936 = v86;
          v725 = 0;
          v726 = (unsigned __int8 *)(v720 + 520 * v718 + 36);
          do
          {
            v727 = *v726;
            v726 += 28;
            v725 = sub_223A4EC9C(v725, ((unint64_t)v727 << 8) | 1, 0xFFu);
            --v724;
          }
          while (v724);
          v728 = v725 >> 8;
          if (!(_BYTE)v725)
            LOBYTE(v728) = -1;
          v86 = v936;
          v662 = v891;
          v722 = v848;
        }
        else
        {
          LOBYTE(v728) = -1;
        }
        *(_BYTE *)(v720 + 520 * v718 + 338) = v728;
        v5 = a1;
      }
      else
      {
        LOBYTE(v728) = *(_BYTE *)(v720 + 520 * v718 + 338);
      }
      v729 = v722 > v723;
    }
    v730 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v719));
    a4.f32[2] = (float)v86;
    v731.i64[0] = 0x3F0000003F000000;
    v731.i64[1] = 0x3F0000003F000000;
    v732 = vmulq_n_f32(vaddq_f32(a4, v731), v730);
    v942 = v732.i32[2];
    v941 = v732.i64[0];
    sub_223FFDF1C(v13[2], &v941, v728, v729, v730);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v733 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v733;
    v14 = **v733;
    v662 = a2[1] + 4;
    v86 = a2[2] + 6;
  }
  v734 = v11[420];
  if ((v734 & 0x10000000) != 0)
    v735 = 0x40000000;
  else
    v735 = 0x80000000;
  if ((v734 & 0x20000000) != 0)
    v736 = v735;
  else
    v736 = v734 & 0xCFFFFFFF;
  if ((v736 & 0x40000000) == 0)
  {
    v737 = v6 + 4;
    if ((v736 & 0x80000000) != 0)
    {
      LOBYTE(v746) = -1;
      v747 = 2;
    }
    else
    {
      v738 = *(_QWORD *)(v14 + 2448);
      v739 = v738 + 520 * v736;
      v740 = *(_QWORD *)(v739 + 312);
      v741 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v739 + 336))
      {
        *(_BYTE *)(v739 + 336) = 0;
        v742 = *(unsigned int *)(v739 + 4);
        if ((_DWORD)v742)
        {
          v807 = v741;
          v849 = v740;
          v892 = v662;
          v937 = v86;
          v743 = 0;
          v744 = (unsigned __int8 *)(v738 + 520 * v736 + 36);
          do
          {
            v745 = *v744;
            v744 += 28;
            v743 = sub_223A4EC9C(v743, ((unint64_t)v745 << 8) | 1, 0xFFu);
            --v742;
          }
          while (v742);
          v746 = v743 >> 8;
          if (!(_BYTE)v743)
            LOBYTE(v746) = -1;
          v86 = v937;
          v662 = v892;
          v741 = v807;
          v740 = v849;
        }
        else
        {
          LOBYTE(v746) = -1;
        }
        *(_BYTE *)(v738 + 520 * v736 + 338) = v746;
        v5 = a1;
      }
      else
      {
        LOBYTE(v746) = *(_BYTE *)(v738 + 520 * v736 + 338);
      }
      v747 = v740 > v741;
    }
    v748 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v737));
    a4.f32[2] = (float)v86;
    v749.i64[0] = 0x3F0000003F000000;
    v749.i64[1] = 0x3F0000003F000000;
    v750 = vmulq_n_f32(vaddq_f32(a4, v749), v748);
    v942 = v750.i32[2];
    v941 = v750.i64[0];
    sub_223FFDF1C(v13[2], &v941, v746, v747, v748);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v751 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v751;
    v14 = **v751;
    v662 = a2[1] + 4;
    v86 = a2[2] + 6;
  }
  v752 = v11[421];
  if ((v752 & 0x10000000) != 0)
    v753 = 0x40000000;
  else
    v753 = 0x80000000;
  if ((v752 & 0x20000000) != 0)
    v754 = v753;
  else
    v754 = v752 & 0xCFFFFFFF;
  if ((v754 & 0x40000000) == 0)
  {
    v755 = v6 + 5;
    if ((v754 & 0x80000000) != 0)
    {
      LOBYTE(v764) = -1;
      v765 = 2;
    }
    else
    {
      v756 = *(_QWORD *)(v14 + 2448);
      v757 = v756 + 520 * v754;
      v758 = *(_QWORD *)(v757 + 312);
      v759 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v757 + 336))
      {
        *(_BYTE *)(v757 + 336) = 0;
        v760 = *(unsigned int *)(v757 + 4);
        if ((_DWORD)v760)
        {
          v850 = v758;
          v893 = v662;
          v938 = v86;
          v761 = 0;
          v762 = (unsigned __int8 *)(v756 + 520 * v754 + 36);
          do
          {
            v763 = *v762;
            v762 += 28;
            v761 = sub_223A4EC9C(v761, ((unint64_t)v763 << 8) | 1, 0xFFu);
            --v760;
          }
          while (v760);
          v764 = v761 >> 8;
          if (!(_BYTE)v761)
            LOBYTE(v764) = -1;
          v86 = v938;
          v662 = v893;
          v758 = v850;
        }
        else
        {
          LOBYTE(v764) = -1;
        }
        *(_BYTE *)(v756 + 520 * v754 + 338) = v764;
        v5 = a1;
      }
      else
      {
        LOBYTE(v764) = *(_BYTE *)(v756 + 520 * v754 + 338);
      }
      v765 = v758 > v759;
    }
    v766 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v755));
    a4.f32[2] = (float)v86;
    v767.i64[0] = 0x3F0000003F000000;
    v767.i64[1] = 0x3F0000003F000000;
    v768 = vmulq_n_f32(vaddq_f32(a4, v767), v766);
    v942 = v768.i32[2];
    v941 = v768.i64[0];
    sub_223FFDF1C(v13[2], &v941, v764, v765, v766);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v769 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v769;
    v14 = **v769;
    v662 = a2[1] + 4;
    v86 = a2[2] + 6;
  }
  v770 = v11[422];
  if ((v770 & 0x10000000) != 0)
    v771 = 0x40000000;
  else
    v771 = 0x80000000;
  if ((v770 & 0x20000000) != 0)
    v772 = v771;
  else
    v772 = v770 & 0xCFFFFFFF;
  if ((v772 & 0x40000000) == 0)
  {
    v773 = v6 + 6;
    if ((v772 & 0x80000000) != 0)
    {
      LOBYTE(v782) = -1;
      v783 = 2;
    }
    else
    {
      v774 = *(_QWORD *)(v14 + 2448);
      v775 = v774 + 520 * v772;
      v776 = *(_QWORD *)(v775 + 312);
      v777 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v775 + 336))
      {
        *(_BYTE *)(v775 + 336) = 0;
        v778 = *(unsigned int *)(v775 + 4);
        if ((_DWORD)v778)
        {
          v808 = v777;
          v851 = v776;
          v894 = v662;
          v939 = v86;
          v779 = 0;
          v780 = (unsigned __int8 *)(v774 + 520 * v772 + 36);
          do
          {
            v781 = *v780;
            v780 += 28;
            v779 = sub_223A4EC9C(v779, ((unint64_t)v781 << 8) | 1, 0xFFu);
            --v778;
          }
          while (v778);
          v782 = v779 >> 8;
          if (!(_BYTE)v779)
            LOBYTE(v782) = -1;
          v86 = v939;
          v662 = v894;
          v777 = v808;
          v776 = v851;
        }
        else
        {
          LOBYTE(v782) = -1;
        }
        *(_BYTE *)(v774 + 520 * v772 + 338) = v782;
        v5 = a1;
      }
      else
      {
        LOBYTE(v782) = *(_BYTE *)(v774 + 520 * v772 + 338);
      }
      v783 = v776 > v777;
    }
    v784 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v773));
    a4.f32[2] = (float)v86;
    v785.i64[0] = 0x3F0000003F000000;
    v785.i64[1] = 0x3F0000003F000000;
    v786 = vmulq_n_f32(vaddq_f32(a4, v785), v784);
    v942 = v786.i32[2];
    v941 = v786.i64[0];
    sub_223FFDF1C(v13[2], &v941, v782, v783, v784);
    v6 = *a2;
    v11 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v787 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v13 = *v787;
    v14 = **v787;
    v662 = a2[1] + 4;
    v86 = a2[2] + 6;
  }
  v788 = v11[423];
  if ((v788 & 0x10000000) != 0)
    v789 = 0x40000000;
  else
    v789 = 0x80000000;
  if ((v788 & 0x20000000) != 0)
    v790 = v789;
  else
    v790 = v788 & 0xCFFFFFFF;
  if ((v790 & 0x40000000) == 0)
  {
    v791 = v6 + 7;
    if ((v790 & 0x80000000) != 0)
    {
      LOBYTE(v800) = -1;
      v801 = 2;
    }
    else
    {
      v792 = *(_QWORD *)(v14 + 2448);
      v793 = v792 + 520 * v790;
      v794 = *(_QWORD *)(v793 + 312);
      v795 = *(_QWORD *)v13[1];
      if (*(_BYTE *)(v793 + 336))
      {
        *(_BYTE *)(v793 + 336) = 0;
        v796 = *(unsigned int *)(v793 + 4);
        if ((_DWORD)v796)
        {
          v852 = v794;
          v895 = v662;
          v940 = v86;
          v797 = 0;
          v798 = (unsigned __int8 *)(v792 + 520 * v790 + 36);
          do
          {
            v799 = *v798;
            v798 += 28;
            v797 = sub_223A4EC9C(v797, ((unint64_t)v799 << 8) | 1, 0xFFu);
            --v796;
          }
          while (v796);
          v800 = v797 >> 8;
          if (!(_BYTE)v797)
            LOBYTE(v800) = -1;
          v86 = v940;
          v662 = v895;
          v794 = v852;
        }
        else
        {
          LOBYTE(v800) = -1;
        }
        *(_BYTE *)(v792 + 520 * v790 + 338) = v800;
        v5 = a1;
      }
      else
      {
        LOBYTE(v800) = *(_BYTE *)(v792 + 520 * v790 + 338);
      }
      v801 = v794 > v795;
    }
    v802 = *(float *)(v14 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v662, v791));
    a4.f32[2] = (float)v86;
    v803.i64[0] = 0x3F0000003F000000;
    v803.i64[1] = 0x3F0000003F000000;
    v804 = vmulq_n_f32(vaddq_f32(a4, v803), v802);
    v942 = v804.i32[2];
    v941 = v804.i64[0];
    sub_223FFDF1C(v13[2], &v941, v800, v801, v802);
  }
  sub_223D7DE2C(v5, a2, a3, a4);
}

void sub_223D7DE2C(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t **v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t **v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  float v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t **v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unint64_t v81;
  int v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t **v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned __int8 *v97;
  unsigned int v98;
  unint64_t v99;
  int v100;
  float v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t **v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  unsigned int v116;
  unint64_t v117;
  int v118;
  float v119;
  float32x4_t v120;
  float32x4_t v121;
  uint64_t **v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned __int8 *v133;
  unsigned int v134;
  unint64_t v135;
  int v136;
  float v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t **v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned __int8 *v151;
  unsigned int v152;
  unint64_t v153;
  int v154;
  float v155;
  float32x4_t v156;
  float32x4_t v157;
  uint64_t **v158;
  int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unsigned __int8 *v169;
  unsigned int v170;
  unint64_t v171;
  int v172;
  float v173;
  float32x4_t v174;
  float32x4_t v175;
  uint64_t **v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unsigned __int8 *v187;
  unsigned int v188;
  unint64_t v189;
  int v190;
  float v191;
  float32x4_t v192;
  float32x4_t v193;
  uint64_t **v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unsigned __int8 *v205;
  unsigned int v206;
  unint64_t v207;
  int v208;
  float v209;
  float32x4_t v210;
  float32x4_t v211;
  uint64_t **v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unsigned __int8 *v223;
  unsigned int v224;
  unint64_t v225;
  int v226;
  float v227;
  float32x4_t v228;
  float32x4_t v229;
  uint64_t **v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unsigned __int8 *v241;
  unsigned int v242;
  unint64_t v243;
  int v244;
  float v245;
  float32x4_t v246;
  float32x4_t v247;
  uint64_t **v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unsigned __int8 *v259;
  unsigned int v260;
  unint64_t v261;
  int v262;
  float v263;
  float32x4_t v264;
  float32x4_t v265;
  uint64_t **v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unsigned __int8 *v277;
  unsigned int v278;
  unint64_t v279;
  int v280;
  float v281;
  float32x4_t v282;
  float32x4_t v283;
  uint64_t **v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unsigned __int8 *v295;
  unsigned int v296;
  unint64_t v297;
  int v298;
  float v299;
  float32x4_t v300;
  float32x4_t v301;
  uint64_t **v302;
  int v303;
  int v304;
  unsigned int v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unsigned __int8 *v313;
  unsigned int v314;
  unint64_t v315;
  int v316;
  float v317;
  float32x4_t v318;
  float32x4_t v319;
  uint64_t **v320;
  int v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unsigned __int8 *v331;
  unsigned int v332;
  unint64_t v333;
  int v334;
  float v335;
  float32x4_t v336;
  float32x4_t v337;
  uint64_t **v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unsigned __int8 *v349;
  unsigned int v350;
  unint64_t v351;
  int v352;
  float v353;
  float32x4_t v354;
  float32x4_t v355;
  uint64_t **v356;
  int v357;
  unsigned int v358;
  unsigned int v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unsigned __int8 *v367;
  unsigned int v368;
  unint64_t v369;
  int v370;
  float v371;
  float32x4_t v372;
  float32x4_t v373;
  uint64_t **v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  unsigned __int8 *v385;
  unsigned int v386;
  unint64_t v387;
  int v388;
  float v389;
  float32x4_t v390;
  float32x4_t v391;
  uint64_t **v392;
  int v393;
  unsigned int v394;
  unsigned int v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unsigned __int8 *v403;
  unsigned int v404;
  unint64_t v405;
  int v406;
  float v407;
  float32x4_t v408;
  float32x4_t v409;
  uint64_t **v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unsigned __int8 *v421;
  unsigned int v422;
  unint64_t v423;
  int v424;
  float v425;
  float32x4_t v426;
  float32x4_t v427;
  uint64_t **v428;
  int v429;
  unsigned int v430;
  unsigned int v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  unsigned __int8 *v439;
  unsigned int v440;
  unint64_t v441;
  int v442;
  float v443;
  float32x4_t v444;
  float32x4_t v445;
  uint64_t **v446;
  int v447;
  int v448;
  unsigned int v449;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unsigned __int8 *v457;
  unsigned int v458;
  unint64_t v459;
  int v460;
  float v461;
  float32x4_t v462;
  float32x4_t v463;
  uint64_t **v464;
  int v465;
  unsigned int v466;
  unsigned int v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unsigned __int8 *v475;
  unsigned int v476;
  unint64_t v477;
  int v478;
  float v479;
  float32x4_t v480;
  float32x4_t v481;
  uint64_t **v482;
  int v483;
  unsigned int v484;
  unsigned int v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  unsigned __int8 *v493;
  unsigned int v494;
  unint64_t v495;
  int v496;
  float v497;
  float32x4_t v498;
  float32x4_t v499;
  uint64_t **v500;
  int v501;
  unsigned int v502;
  unsigned int v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  unsigned __int8 *v511;
  unsigned int v512;
  unint64_t v513;
  int v514;
  float v515;
  float32x4_t v516;
  float32x4_t v517;
  uint64_t **v518;
  int v519;
  unsigned int v520;
  unsigned int v521;
  int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  unsigned __int8 *v529;
  unsigned int v530;
  unint64_t v531;
  int v532;
  float v533;
  float32x4_t v534;
  float32x4_t v535;
  uint64_t **v536;
  int v537;
  unsigned int v538;
  unsigned int v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  unsigned __int8 *v547;
  unsigned int v548;
  unint64_t v549;
  int v550;
  float v551;
  float32x4_t v552;
  float32x4_t v553;
  uint64_t **v554;
  int v555;
  unsigned int v556;
  unsigned int v557;
  int v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  unsigned __int8 *v565;
  unsigned int v566;
  unint64_t v567;
  int v568;
  float v569;
  float32x4_t v570;
  float32x4_t v571;
  uint64_t **v572;
  int v573;
  unsigned int v574;
  unsigned int v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  unsigned __int8 *v583;
  unsigned int v584;
  unint64_t v585;
  int v586;
  float v587;
  float32x4_t v588;
  float32x4_t v589;
  uint64_t **v590;
  int v591;
  int v592;
  unsigned int v593;
  unsigned int v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unint64_t v600;
  unsigned __int8 *v601;
  unsigned int v602;
  unint64_t v603;
  int v604;
  float v605;
  float32x4_t v606;
  float32x4_t v607;
  uint64_t **v608;
  int v609;
  unsigned int v610;
  unsigned int v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  unsigned __int8 *v619;
  unsigned int v620;
  unint64_t v621;
  int v622;
  float v623;
  float32x4_t v624;
  float32x4_t v625;
  uint64_t **v626;
  int v627;
  unsigned int v628;
  unsigned int v629;
  int v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  unint64_t v636;
  unsigned __int8 *v637;
  unsigned int v638;
  unint64_t v639;
  int v640;
  float v641;
  float32x4_t v642;
  float32x4_t v643;
  uint64_t **v644;
  int v645;
  unsigned int v646;
  unsigned int v647;
  int v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  unsigned __int8 *v655;
  unsigned int v656;
  unint64_t v657;
  int v658;
  float v659;
  float32x4_t v660;
  float32x4_t v661;
  uint64_t **v662;
  int v663;
  unsigned int v664;
  unsigned int v665;
  int v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  unsigned __int8 *v673;
  unsigned int v674;
  unint64_t v675;
  int v676;
  float v677;
  float32x4_t v678;
  float32x4_t v679;
  uint64_t **v680;
  int v681;
  unsigned int v682;
  unsigned int v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  unsigned __int8 *v691;
  unsigned int v692;
  unint64_t v693;
  int v694;
  float v695;
  float32x4_t v696;
  float32x4_t v697;
  uint64_t **v698;
  int v699;
  unsigned int v700;
  unsigned int v701;
  int v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unint64_t v708;
  unsigned __int8 *v709;
  unsigned int v710;
  unint64_t v711;
  int v712;
  float v713;
  float32x4_t v714;
  float32x4_t v715;
  uint64_t **v716;
  int v717;
  unsigned int v718;
  unsigned int v719;
  int v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  unsigned __int8 *v727;
  unsigned int v728;
  unint64_t v729;
  int v730;
  float v731;
  float32x4_t v732;
  float32x4_t v733;
  uint64_t **v734;
  int v735;
  int v736;
  unsigned int v737;
  unsigned int v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  unsigned __int8 *v745;
  unsigned int v746;
  unint64_t v747;
  int v748;
  float v749;
  float32x4_t v750;
  float32x4_t v751;
  uint64_t **v752;
  int v753;
  unsigned int v754;
  unsigned int v755;
  int v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  unsigned __int8 *v763;
  unsigned int v764;
  unint64_t v765;
  int v766;
  float v767;
  float32x4_t v768;
  float32x4_t v769;
  uint64_t **v770;
  int v771;
  unsigned int v772;
  unsigned int v773;
  int v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t v780;
  unsigned __int8 *v781;
  unsigned int v782;
  unint64_t v783;
  int v784;
  float v785;
  float32x4_t v786;
  float32x4_t v787;
  uint64_t **v788;
  int v789;
  unsigned int v790;
  unsigned int v791;
  int v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  unsigned __int8 *v799;
  unsigned int v800;
  unint64_t v801;
  int v802;
  float v803;
  float32x4_t v804;
  float32x4_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  int v854;
  int v855;
  int v856;
  int v857;
  int v858;
  int v859;
  int v860;
  int v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  int v898;
  uint64_t v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  int v938;
  int v939;
  int v940;
  int v941;
  uint64_t v943;
  __int32 v944;

  v5 = *a2;
  v6 = a2[1];
  v7 = v6 + 5;
  v8 = a2[2];
  v9 = v8 + 6;
  v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v11 = v10[424];
  v12 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v13 = *v12;
  if ((v11 & 0x10000000) != 0)
    v14 = 0x40000000;
  else
    v14 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v15 = v14;
  else
    v15 = v11 & 0xCFFFFFFF;
  if ((v15 & 0x40000000) == 0)
  {
    v16 = a1;
    if ((v15 & 0x80000000) != 0)
    {
      LOBYTE(v25) = -1;
      v26 = 2;
    }
    else
    {
      v17 = *(_QWORD *)(v13 + 2448);
      v18 = v17 + 520 * v15;
      v19 = *(_QWORD *)(v18 + 312);
      v20 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v18 + 336))
      {
        *(_BYTE *)(v18 + 336) = 0;
        v21 = *(unsigned int *)(v18 + 4);
        if ((_DWORD)v21)
        {
          v806 = v20;
          v810 = v19;
          v854 = v7;
          v898 = v8 + 6;
          v22 = 0;
          v23 = (unsigned __int8 *)(v17 + 520 * v15 + 36);
          do
          {
            v24 = *v23;
            v23 += 28;
            v22 = sub_223A4EC9C(v22, ((unint64_t)v24 << 8) | 1, 0xFFu);
            --v21;
          }
          while (v21);
          v25 = v22 >> 8;
          if (!(_BYTE)v22)
            LOBYTE(v25) = -1;
          v16 = a1;
          v9 = v898;
          v7 = v854;
          v20 = v806;
          v19 = v810;
        }
        else
        {
          LOBYTE(v25) = -1;
        }
        *(_BYTE *)(v17 + 520 * v15 + 338) = v25;
      }
      else
      {
        LOBYTE(v25) = *(_BYTE *)(v17 + 520 * v15 + 338);
      }
      v26 = v19 > v20;
    }
    v27 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v5));
    a4.f32[2] = (float)v9;
    v28.i64[0] = 0x3F0000003F000000;
    v28.i64[1] = 0x3F0000003F000000;
    v29 = vmulq_n_f32(vaddq_f32(a4, v28), v27);
    v944 = v29.i32[2];
    v943 = v29.i64[0];
    sub_223FFDF1C(v12[2], &v943, v25, v26, v27);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v16 + 8);
    v30 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v16 + 16) + 8);
    v12 = *v30;
    v13 = **v30;
    v7 = v6 + 5;
    v9 = v8 + 6;
  }
  v31 = v10[425];
  if ((v31 & 0x10000000) != 0)
    v32 = 0x40000000;
  else
    v32 = 0x80000000;
  if ((v31 & 0x20000000) != 0)
    v33 = v32;
  else
    v33 = v31 & 0xCFFFFFFF;
  if ((v33 & 0x40000000) != 0)
  {
    v45 = a1;
  }
  else
  {
    v34 = v5 + 1;
    if ((v33 & 0x80000000) != 0)
    {
      LOBYTE(v44) = -1;
      v46 = 2;
      v45 = a1;
    }
    else
    {
      v35 = *(_QWORD *)(v13 + 2448);
      v36 = v35 + 520 * v33;
      v37 = *(_QWORD *)(v36 + 312);
      v38 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v36 + 336))
      {
        *(_BYTE *)(v36 + 336) = 0;
        v39 = *(unsigned int *)(v36 + 4);
        if ((_DWORD)v39)
        {
          v811 = v38;
          v899 = v37;
          v855 = v7;
          v40 = v9;
          v41 = 0;
          v42 = (unsigned __int8 *)(v35 + 520 * v33 + 36);
          do
          {
            v43 = *v42;
            v42 += 28;
            v41 = sub_223A4EC9C(v41, ((unint64_t)v43 << 8) | 1, 0xFFu);
            --v39;
          }
          while (v39);
          v44 = v41 >> 8;
          if (!(_BYTE)v41)
            LOBYTE(v44) = -1;
          v9 = v40;
          v7 = v855;
          v37 = v899;
          v38 = v811;
        }
        else
        {
          LOBYTE(v44) = -1;
        }
        *(_BYTE *)(v35 + 520 * v33 + 338) = v44;
      }
      else
      {
        LOBYTE(v44) = *(_BYTE *)(v35 + 520 * v33 + 338);
      }
      v45 = a1;
      v46 = v37 > v38;
    }
    v47 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v34));
    a4.f32[2] = (float)v9;
    v48.i64[0] = 0x3F0000003F000000;
    v48.i64[1] = 0x3F0000003F000000;
    v49 = vmulq_n_f32(vaddq_f32(a4, v48), v47);
    v944 = v49.i32[2];
    v943 = v49.i64[0];
    sub_223FFDF1C(v12[2], &v943, v44, v46, v47);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v50 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v50;
    v13 = **v50;
    v7 = v6 + 5;
    v9 = v8 + 6;
  }
  v51 = v10[426];
  if ((v51 & 0x10000000) != 0)
    v52 = 0x40000000;
  else
    v52 = 0x80000000;
  if ((v51 & 0x20000000) != 0)
    v53 = v52;
  else
    v53 = v51 & 0xCFFFFFFF;
  if ((v53 & 0x40000000) == 0)
  {
    v54 = v5 + 2;
    if ((v53 & 0x80000000) != 0)
    {
      LOBYTE(v63) = -1;
      v64 = 2;
    }
    else
    {
      v55 = *(_QWORD *)(v13 + 2448);
      v56 = v55 + 520 * v53;
      v57 = *(_QWORD *)(v56 + 312);
      v58 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v56 + 336))
      {
        *(_BYTE *)(v56 + 336) = 0;
        v59 = *(unsigned int *)(v56 + 4);
        if ((_DWORD)v59)
        {
          v807 = v58;
          v812 = v57;
          v856 = v7;
          v900 = v9;
          v60 = 0;
          v61 = (unsigned __int8 *)(v55 + 520 * v53 + 36);
          do
          {
            v62 = *v61;
            v61 += 28;
            v60 = sub_223A4EC9C(v60, ((unint64_t)v62 << 8) | 1, 0xFFu);
            --v59;
          }
          while (v59);
          v63 = v60 >> 8;
          if (!(_BYTE)v60)
            LOBYTE(v63) = -1;
          v45 = a1;
          v9 = v900;
          v7 = v856;
          v58 = v807;
          v57 = v812;
        }
        else
        {
          LOBYTE(v63) = -1;
        }
        *(_BYTE *)(v55 + 520 * v53 + 338) = v63;
      }
      else
      {
        LOBYTE(v63) = *(_BYTE *)(v55 + 520 * v53 + 338);
      }
      v64 = v57 > v58;
    }
    v65 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v54));
    a4.f32[2] = (float)v9;
    v66.i64[0] = 0x3F0000003F000000;
    v66.i64[1] = 0x3F0000003F000000;
    v67 = vmulq_n_f32(vaddq_f32(a4, v66), v65);
    v944 = v67.i32[2];
    v943 = v67.i64[0];
    sub_223FFDF1C(v12[2], &v943, v63, v64, v65);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v68 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v68;
    v13 = **v68;
    v7 = v6 + 5;
    v9 = v8 + 6;
  }
  v69 = v10[427];
  if ((v69 & 0x10000000) != 0)
    v70 = 0x40000000;
  else
    v70 = 0x80000000;
  if ((v69 & 0x20000000) != 0)
    v71 = v70;
  else
    v71 = v69 & 0xCFFFFFFF;
  if ((v71 & 0x40000000) == 0)
  {
    v72 = v5 + 3;
    if ((v71 & 0x80000000) != 0)
    {
      LOBYTE(v81) = -1;
      v82 = 2;
    }
    else
    {
      v73 = *(_QWORD *)(v13 + 2448);
      v74 = v73 + 520 * v71;
      v75 = *(_QWORD *)(v74 + 312);
      v76 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v74 + 336))
      {
        *(_BYTE *)(v74 + 336) = 0;
        v77 = *(unsigned int *)(v74 + 4);
        if ((_DWORD)v77)
        {
          v813 = v75;
          v857 = v7;
          v901 = v9;
          v78 = 0;
          v79 = (unsigned __int8 *)(v73 + 520 * v71 + 36);
          do
          {
            v80 = *v79;
            v79 += 28;
            v78 = sub_223A4EC9C(v78, ((unint64_t)v80 << 8) | 1, 0xFFu);
            --v77;
          }
          while (v77);
          v81 = v78 >> 8;
          if (!(_BYTE)v78)
            LOBYTE(v81) = -1;
          v9 = v901;
          v7 = v857;
          v75 = v813;
        }
        else
        {
          LOBYTE(v81) = -1;
        }
        *(_BYTE *)(v73 + 520 * v71 + 338) = v81;
      }
      else
      {
        LOBYTE(v81) = *(_BYTE *)(v73 + 520 * v71 + 338);
      }
      v82 = v75 > v76;
      v45 = a1;
    }
    v83 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v72));
    a4.f32[2] = (float)v9;
    v84.i64[0] = 0x3F0000003F000000;
    v84.i64[1] = 0x3F0000003F000000;
    v85 = vmulq_n_f32(vaddq_f32(a4, v84), v83);
    v944 = v85.i32[2];
    v943 = v85.i64[0];
    sub_223FFDF1C(v12[2], &v943, v81, v82, v83);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v86 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v86;
    v13 = **v86;
    v7 = v6 + 5;
    v9 = v8 + 6;
  }
  v87 = v10[428];
  if ((v87 & 0x10000000) != 0)
    v88 = 0x40000000;
  else
    v88 = 0x80000000;
  if ((v87 & 0x20000000) != 0)
    v89 = v88;
  else
    v89 = v87 & 0xCFFFFFFF;
  if ((v89 & 0x40000000) == 0)
  {
    v90 = v5 + 4;
    if ((v89 & 0x80000000) != 0)
    {
      LOBYTE(v99) = -1;
      v100 = 2;
    }
    else
    {
      v91 = *(_QWORD *)(v13 + 2448);
      v92 = v91 + 520 * v89;
      v93 = *(_QWORD *)(v92 + 312);
      v94 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v92 + 336))
      {
        *(_BYTE *)(v92 + 336) = 0;
        v95 = *(unsigned int *)(v92 + 4);
        if ((_DWORD)v95)
        {
          v808 = v94;
          v814 = v93;
          v858 = v7;
          v902 = v9;
          v96 = 0;
          v97 = (unsigned __int8 *)(v91 + 520 * v89 + 36);
          do
          {
            v98 = *v97;
            v97 += 28;
            v96 = sub_223A4EC9C(v96, ((unint64_t)v98 << 8) | 1, 0xFFu);
            --v95;
          }
          while (v95);
          v99 = v96 >> 8;
          if (!(_BYTE)v96)
            LOBYTE(v99) = -1;
          v45 = a1;
          v9 = v902;
          v7 = v858;
          v94 = v808;
          v93 = v814;
        }
        else
        {
          LOBYTE(v99) = -1;
        }
        *(_BYTE *)(v91 + 520 * v89 + 338) = v99;
      }
      else
      {
        LOBYTE(v99) = *(_BYTE *)(v91 + 520 * v89 + 338);
      }
      v100 = v93 > v94;
    }
    v101 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v90));
    a4.f32[2] = (float)v9;
    v102.i64[0] = 0x3F0000003F000000;
    v102.i64[1] = 0x3F0000003F000000;
    v103 = vmulq_n_f32(vaddq_f32(a4, v102), v101);
    v944 = v103.i32[2];
    v943 = v103.i64[0];
    sub_223FFDF1C(v12[2], &v943, v99, v100, v101);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v104 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v104;
    v13 = **v104;
    v7 = v6 + 5;
    v9 = v8 + 6;
  }
  v105 = v10[429];
  if ((v105 & 0x10000000) != 0)
    v106 = 0x40000000;
  else
    v106 = 0x80000000;
  if ((v105 & 0x20000000) != 0)
    v107 = v106;
  else
    v107 = v105 & 0xCFFFFFFF;
  if ((v107 & 0x40000000) == 0)
  {
    v108 = v5 + 5;
    if ((v107 & 0x80000000) != 0)
    {
      LOBYTE(v117) = -1;
      v118 = 2;
    }
    else
    {
      v109 = *(_QWORD *)(v13 + 2448);
      v110 = v109 + 520 * v107;
      v111 = *(_QWORD *)(v110 + 312);
      v112 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v110 + 336))
      {
        *(_BYTE *)(v110 + 336) = 0;
        v113 = *(unsigned int *)(v110 + 4);
        if ((_DWORD)v113)
        {
          v815 = v111;
          v859 = v7;
          v903 = v9;
          v114 = 0;
          v115 = (unsigned __int8 *)(v109 + 520 * v107 + 36);
          do
          {
            v116 = *v115;
            v115 += 28;
            v114 = sub_223A4EC9C(v114, ((unint64_t)v116 << 8) | 1, 0xFFu);
            --v113;
          }
          while (v113);
          v117 = v114 >> 8;
          if (!(_BYTE)v114)
            LOBYTE(v117) = -1;
          v9 = v903;
          v7 = v859;
          v111 = v815;
        }
        else
        {
          LOBYTE(v117) = -1;
        }
        *(_BYTE *)(v109 + 520 * v107 + 338) = v117;
      }
      else
      {
        LOBYTE(v117) = *(_BYTE *)(v109 + 520 * v107 + 338);
      }
      v118 = v111 > v112;
      v45 = a1;
    }
    v119 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v108));
    a4.f32[2] = (float)v9;
    v120.i64[0] = 0x3F0000003F000000;
    v120.i64[1] = 0x3F0000003F000000;
    v121 = vmulq_n_f32(vaddq_f32(a4, v120), v119);
    v944 = v121.i32[2];
    v943 = v121.i64[0];
    sub_223FFDF1C(v12[2], &v943, v117, v118, v119);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v122 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v122;
    v13 = **v122;
    v7 = v6 + 5;
    v9 = v8 + 6;
  }
  v123 = v10[430];
  if ((v123 & 0x10000000) != 0)
    v124 = 0x40000000;
  else
    v124 = 0x80000000;
  if ((v123 & 0x20000000) != 0)
    v125 = v124;
  else
    v125 = v123 & 0xCFFFFFFF;
  if ((v125 & 0x40000000) == 0)
  {
    v126 = v5 + 6;
    if ((v125 & 0x80000000) != 0)
    {
      LOBYTE(v135) = -1;
      v136 = 2;
    }
    else
    {
      v127 = *(_QWORD *)(v13 + 2448);
      v128 = v127 + 520 * v125;
      v129 = *(_QWORD *)(v128 + 312);
      v130 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v128 + 336))
      {
        *(_BYTE *)(v128 + 336) = 0;
        v131 = *(unsigned int *)(v128 + 4);
        if ((_DWORD)v131)
        {
          v809 = v130;
          v816 = v129;
          v860 = v7;
          v904 = v9;
          v132 = 0;
          v133 = (unsigned __int8 *)(v127 + 520 * v125 + 36);
          do
          {
            v134 = *v133;
            v133 += 28;
            v132 = sub_223A4EC9C(v132, ((unint64_t)v134 << 8) | 1, 0xFFu);
            --v131;
          }
          while (v131);
          v135 = v132 >> 8;
          if (!(_BYTE)v132)
            LOBYTE(v135) = -1;
          v45 = a1;
          v9 = v904;
          v7 = v860;
          v130 = v809;
          v129 = v816;
        }
        else
        {
          LOBYTE(v135) = -1;
        }
        *(_BYTE *)(v127 + 520 * v125 + 338) = v135;
      }
      else
      {
        LOBYTE(v135) = *(_BYTE *)(v127 + 520 * v125 + 338);
      }
      v136 = v129 > v130;
    }
    v137 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v126));
    a4.f32[2] = (float)v9;
    v138.i64[0] = 0x3F0000003F000000;
    v138.i64[1] = 0x3F0000003F000000;
    v139 = vmulq_n_f32(vaddq_f32(a4, v138), v137);
    v944 = v139.i32[2];
    v943 = v139.i64[0];
    sub_223FFDF1C(v12[2], &v943, v135, v136, v137);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v140 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v140;
    v13 = **v140;
    v7 = v6 + 5;
    v9 = v8 + 6;
  }
  v141 = v10[431];
  if ((v141 & 0x10000000) != 0)
    v142 = 0x40000000;
  else
    v142 = 0x80000000;
  if ((v141 & 0x20000000) != 0)
    v143 = v142;
  else
    v143 = v141 & 0xCFFFFFFF;
  if ((v143 & 0x40000000) == 0)
  {
    v144 = v5 + 7;
    if ((v143 & 0x80000000) != 0)
    {
      LOBYTE(v153) = -1;
      v154 = 2;
    }
    else
    {
      v145 = *(_QWORD *)(v13 + 2448);
      v146 = v145 + 520 * v143;
      v147 = *(_QWORD *)(v146 + 312);
      v148 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v146 + 336))
      {
        *(_BYTE *)(v146 + 336) = 0;
        v149 = *(unsigned int *)(v146 + 4);
        if ((_DWORD)v149)
        {
          v817 = v147;
          v861 = v7;
          v905 = v9;
          v150 = 0;
          v151 = (unsigned __int8 *)(v145 + 520 * v143 + 36);
          do
          {
            v152 = *v151;
            v151 += 28;
            v150 = sub_223A4EC9C(v150, ((unint64_t)v152 << 8) | 1, 0xFFu);
            --v149;
          }
          while (v149);
          v153 = v150 >> 8;
          if (!(_BYTE)v150)
            LOBYTE(v153) = -1;
          v9 = v905;
          v7 = v861;
          v147 = v817;
        }
        else
        {
          LOBYTE(v153) = -1;
        }
        *(_BYTE *)(v145 + 520 * v143 + 338) = v153;
      }
      else
      {
        LOBYTE(v153) = *(_BYTE *)(v145 + 520 * v143 + 338);
      }
      v154 = v147 > v148;
      v45 = a1;
    }
    v155 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v144));
    a4.f32[2] = (float)v9;
    v156.i64[0] = 0x3F0000003F000000;
    v156.i64[1] = 0x3F0000003F000000;
    v157 = vmulq_n_f32(vaddq_f32(a4, v156), v155);
    v944 = v157.i32[2];
    v943 = v157.i64[0];
    sub_223FFDF1C(v12[2], &v943, v153, v154, v155);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v158 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v158;
    v13 = **v158;
    v9 = v8 + 6;
  }
  v159 = v6 + 6;
  v160 = v10[432];
  if ((v160 & 0x10000000) != 0)
    v161 = 0x40000000;
  else
    v161 = 0x80000000;
  if ((v160 & 0x20000000) != 0)
    v162 = v161;
  else
    v162 = v160 & 0xCFFFFFFF;
  if ((v162 & 0x40000000) == 0)
  {
    if ((v162 & 0x80000000) != 0)
    {
      LOBYTE(v171) = -1;
      v172 = 2;
    }
    else
    {
      v163 = *(_QWORD *)(v13 + 2448);
      v164 = v163 + 520 * v162;
      v165 = *(_QWORD *)(v164 + 312);
      v166 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v164 + 336))
      {
        *(_BYTE *)(v164 + 336) = 0;
        v167 = *(unsigned int *)(v164 + 4);
        if ((_DWORD)v167)
        {
          v818 = v166;
          v862 = v165;
          v906 = v9;
          v168 = 0;
          v169 = (unsigned __int8 *)(v163 + 520 * v162 + 36);
          do
          {
            v170 = *v169;
            v169 += 28;
            v168 = sub_223A4EC9C(v168, ((unint64_t)v170 << 8) | 1, 0xFFu);
            --v167;
          }
          while (v167);
          v171 = v168 >> 8;
          if (!(_BYTE)v168)
            LOBYTE(v171) = -1;
          v45 = a1;
          v9 = v906;
          v166 = v818;
          v165 = v862;
        }
        else
        {
          LOBYTE(v171) = -1;
        }
        *(_BYTE *)(v163 + 520 * v162 + 338) = v171;
      }
      else
      {
        LOBYTE(v171) = *(_BYTE *)(v163 + 520 * v162 + 338);
      }
      v172 = v165 > v166;
    }
    v173 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v5));
    a4.f32[2] = (float)v9;
    v174.i64[0] = 0x3F0000003F000000;
    v174.i64[1] = 0x3F0000003F000000;
    v175 = vmulq_n_f32(vaddq_f32(a4, v174), v173);
    v944 = v175.i32[2];
    v943 = v175.i64[0];
    sub_223FFDF1C(v12[2], &v943, v171, v172, v173);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v176 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v176;
    v13 = **v176;
    v159 = v6 + 6;
    v9 = v8 + 6;
  }
  v177 = v10[433];
  if ((v177 & 0x10000000) != 0)
    v178 = 0x40000000;
  else
    v178 = 0x80000000;
  if ((v177 & 0x20000000) != 0)
    v179 = v178;
  else
    v179 = v177 & 0xCFFFFFFF;
  if ((v179 & 0x40000000) == 0)
  {
    v180 = v5 + 1;
    if ((v179 & 0x80000000) != 0)
    {
      LOBYTE(v189) = -1;
      v190 = 2;
    }
    else
    {
      v181 = *(_QWORD *)(v13 + 2448);
      v182 = v181 + 520 * v179;
      v183 = *(_QWORD *)(v182 + 312);
      v184 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v182 + 336))
      {
        *(_BYTE *)(v182 + 336) = 0;
        v185 = *(unsigned int *)(v182 + 4);
        if ((_DWORD)v185)
        {
          v819 = v184;
          v863 = v183;
          v907 = v9;
          v186 = 0;
          v187 = (unsigned __int8 *)(v181 + 520 * v179 + 36);
          do
          {
            v188 = *v187;
            v187 += 28;
            v186 = sub_223A4EC9C(v186, ((unint64_t)v188 << 8) | 1, 0xFFu);
            --v185;
          }
          while (v185);
          v189 = v186 >> 8;
          if (!(_BYTE)v186)
            LOBYTE(v189) = -1;
          v45 = a1;
          v9 = v907;
          v184 = v819;
          v183 = v863;
        }
        else
        {
          LOBYTE(v189) = -1;
        }
        *(_BYTE *)(v181 + 520 * v179 + 338) = v189;
      }
      else
      {
        LOBYTE(v189) = *(_BYTE *)(v181 + 520 * v179 + 338);
      }
      v190 = v183 > v184;
    }
    v191 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v180));
    a4.f32[2] = (float)v9;
    v192.i64[0] = 0x3F0000003F000000;
    v192.i64[1] = 0x3F0000003F000000;
    v193 = vmulq_n_f32(vaddq_f32(a4, v192), v191);
    v944 = v193.i32[2];
    v943 = v193.i64[0];
    sub_223FFDF1C(v12[2], &v943, v189, v190, v191);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v194 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v194;
    v13 = **v194;
    v159 = v6 + 6;
    v9 = v8 + 6;
  }
  v195 = v10[434];
  if ((v195 & 0x10000000) != 0)
    v196 = 0x40000000;
  else
    v196 = 0x80000000;
  if ((v195 & 0x20000000) != 0)
    v197 = v196;
  else
    v197 = v195 & 0xCFFFFFFF;
  if ((v197 & 0x40000000) == 0)
  {
    v198 = v5 + 2;
    if ((v197 & 0x80000000) != 0)
    {
      LOBYTE(v207) = -1;
      v208 = 2;
    }
    else
    {
      v199 = *(_QWORD *)(v13 + 2448);
      v200 = v199 + 520 * v197;
      v201 = *(_QWORD *)(v200 + 312);
      v202 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v200 + 336))
      {
        *(_BYTE *)(v200 + 336) = 0;
        v203 = *(unsigned int *)(v200 + 4);
        if ((_DWORD)v203)
        {
          v820 = v202;
          v864 = v201;
          v908 = v9;
          v204 = 0;
          v205 = (unsigned __int8 *)(v199 + 520 * v197 + 36);
          do
          {
            v206 = *v205;
            v205 += 28;
            v204 = sub_223A4EC9C(v204, ((unint64_t)v206 << 8) | 1, 0xFFu);
            --v203;
          }
          while (v203);
          v207 = v204 >> 8;
          if (!(_BYTE)v204)
            LOBYTE(v207) = -1;
          v45 = a1;
          v9 = v908;
          v202 = v820;
          v201 = v864;
        }
        else
        {
          LOBYTE(v207) = -1;
        }
        *(_BYTE *)(v199 + 520 * v197 + 338) = v207;
      }
      else
      {
        LOBYTE(v207) = *(_BYTE *)(v199 + 520 * v197 + 338);
      }
      v208 = v201 > v202;
    }
    v209 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v198));
    a4.f32[2] = (float)v9;
    v210.i64[0] = 0x3F0000003F000000;
    v210.i64[1] = 0x3F0000003F000000;
    v211 = vmulq_n_f32(vaddq_f32(a4, v210), v209);
    v944 = v211.i32[2];
    v943 = v211.i64[0];
    sub_223FFDF1C(v12[2], &v943, v207, v208, v209);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v212 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v212;
    v13 = **v212;
    v159 = v6 + 6;
    v9 = v8 + 6;
  }
  v213 = v10[435];
  if ((v213 & 0x10000000) != 0)
    v214 = 0x40000000;
  else
    v214 = 0x80000000;
  if ((v213 & 0x20000000) != 0)
    v215 = v214;
  else
    v215 = v213 & 0xCFFFFFFF;
  if ((v215 & 0x40000000) == 0)
  {
    v216 = v5 + 3;
    if ((v215 & 0x80000000) != 0)
    {
      LOBYTE(v225) = -1;
      v226 = 2;
    }
    else
    {
      v217 = *(_QWORD *)(v13 + 2448);
      v218 = v217 + 520 * v215;
      v219 = *(_QWORD *)(v218 + 312);
      v220 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v218 + 336))
      {
        *(_BYTE *)(v218 + 336) = 0;
        v221 = *(unsigned int *)(v218 + 4);
        if ((_DWORD)v221)
        {
          v821 = v220;
          v865 = v219;
          v909 = v9;
          v222 = 0;
          v223 = (unsigned __int8 *)(v217 + 520 * v215 + 36);
          do
          {
            v224 = *v223;
            v223 += 28;
            v222 = sub_223A4EC9C(v222, ((unint64_t)v224 << 8) | 1, 0xFFu);
            --v221;
          }
          while (v221);
          v225 = v222 >> 8;
          if (!(_BYTE)v222)
            LOBYTE(v225) = -1;
          v45 = a1;
          v9 = v909;
          v220 = v821;
          v219 = v865;
        }
        else
        {
          LOBYTE(v225) = -1;
        }
        *(_BYTE *)(v217 + 520 * v215 + 338) = v225;
      }
      else
      {
        LOBYTE(v225) = *(_BYTE *)(v217 + 520 * v215 + 338);
      }
      v226 = v219 > v220;
    }
    v227 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v216));
    a4.f32[2] = (float)v9;
    v228.i64[0] = 0x3F0000003F000000;
    v228.i64[1] = 0x3F0000003F000000;
    v229 = vmulq_n_f32(vaddq_f32(a4, v228), v227);
    v944 = v229.i32[2];
    v943 = v229.i64[0];
    sub_223FFDF1C(v12[2], &v943, v225, v226, v227);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v230 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v230;
    v13 = **v230;
    v159 = v6 + 6;
    v9 = v8 + 6;
  }
  v231 = v10[436];
  if ((v231 & 0x10000000) != 0)
    v232 = 0x40000000;
  else
    v232 = 0x80000000;
  if ((v231 & 0x20000000) != 0)
    v233 = v232;
  else
    v233 = v231 & 0xCFFFFFFF;
  if ((v233 & 0x40000000) == 0)
  {
    v234 = v5 + 4;
    if ((v233 & 0x80000000) != 0)
    {
      LOBYTE(v243) = -1;
      v244 = 2;
    }
    else
    {
      v235 = *(_QWORD *)(v13 + 2448);
      v236 = v235 + 520 * v233;
      v237 = *(_QWORD *)(v236 + 312);
      v238 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v236 + 336))
      {
        *(_BYTE *)(v236 + 336) = 0;
        v239 = *(unsigned int *)(v236 + 4);
        if ((_DWORD)v239)
        {
          v822 = v238;
          v866 = v237;
          v910 = v9;
          v240 = 0;
          v241 = (unsigned __int8 *)(v235 + 520 * v233 + 36);
          do
          {
            v242 = *v241;
            v241 += 28;
            v240 = sub_223A4EC9C(v240, ((unint64_t)v242 << 8) | 1, 0xFFu);
            --v239;
          }
          while (v239);
          v243 = v240 >> 8;
          if (!(_BYTE)v240)
            LOBYTE(v243) = -1;
          v45 = a1;
          v9 = v910;
          v238 = v822;
          v237 = v866;
        }
        else
        {
          LOBYTE(v243) = -1;
        }
        *(_BYTE *)(v235 + 520 * v233 + 338) = v243;
      }
      else
      {
        LOBYTE(v243) = *(_BYTE *)(v235 + 520 * v233 + 338);
      }
      v244 = v237 > v238;
    }
    v245 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v234));
    a4.f32[2] = (float)v9;
    v246.i64[0] = 0x3F0000003F000000;
    v246.i64[1] = 0x3F0000003F000000;
    v247 = vmulq_n_f32(vaddq_f32(a4, v246), v245);
    v944 = v247.i32[2];
    v943 = v247.i64[0];
    sub_223FFDF1C(v12[2], &v943, v243, v244, v245);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v248 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v248;
    v13 = **v248;
    v159 = v6 + 6;
    v9 = v8 + 6;
  }
  v249 = v10[437];
  if ((v249 & 0x10000000) != 0)
    v250 = 0x40000000;
  else
    v250 = 0x80000000;
  if ((v249 & 0x20000000) != 0)
    v251 = v250;
  else
    v251 = v249 & 0xCFFFFFFF;
  if ((v251 & 0x40000000) == 0)
  {
    v252 = v5 + 5;
    if ((v251 & 0x80000000) != 0)
    {
      LOBYTE(v261) = -1;
      v262 = 2;
    }
    else
    {
      v253 = *(_QWORD *)(v13 + 2448);
      v254 = v253 + 520 * v251;
      v255 = *(_QWORD *)(v254 + 312);
      v256 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v254 + 336))
      {
        *(_BYTE *)(v254 + 336) = 0;
        v257 = *(unsigned int *)(v254 + 4);
        if ((_DWORD)v257)
        {
          v823 = v256;
          v867 = v255;
          v911 = v9;
          v258 = 0;
          v259 = (unsigned __int8 *)(v253 + 520 * v251 + 36);
          do
          {
            v260 = *v259;
            v259 += 28;
            v258 = sub_223A4EC9C(v258, ((unint64_t)v260 << 8) | 1, 0xFFu);
            --v257;
          }
          while (v257);
          v261 = v258 >> 8;
          if (!(_BYTE)v258)
            LOBYTE(v261) = -1;
          v45 = a1;
          v9 = v911;
          v256 = v823;
          v255 = v867;
        }
        else
        {
          LOBYTE(v261) = -1;
        }
        *(_BYTE *)(v253 + 520 * v251 + 338) = v261;
      }
      else
      {
        LOBYTE(v261) = *(_BYTE *)(v253 + 520 * v251 + 338);
      }
      v262 = v255 > v256;
    }
    v263 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v252));
    a4.f32[2] = (float)v9;
    v264.i64[0] = 0x3F0000003F000000;
    v264.i64[1] = 0x3F0000003F000000;
    v265 = vmulq_n_f32(vaddq_f32(a4, v264), v263);
    v944 = v265.i32[2];
    v943 = v265.i64[0];
    sub_223FFDF1C(v12[2], &v943, v261, v262, v263);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v266 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v266;
    v13 = **v266;
    v159 = v6 + 6;
    v9 = v8 + 6;
  }
  v267 = v10[438];
  if ((v267 & 0x10000000) != 0)
    v268 = 0x40000000;
  else
    v268 = 0x80000000;
  if ((v267 & 0x20000000) != 0)
    v269 = v268;
  else
    v269 = v267 & 0xCFFFFFFF;
  if ((v269 & 0x40000000) == 0)
  {
    v270 = v5 + 6;
    if ((v269 & 0x80000000) != 0)
    {
      LOBYTE(v279) = -1;
      v280 = 2;
    }
    else
    {
      v271 = *(_QWORD *)(v13 + 2448);
      v272 = v271 + 520 * v269;
      v273 = *(_QWORD *)(v272 + 312);
      v274 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v272 + 336))
      {
        *(_BYTE *)(v272 + 336) = 0;
        v275 = *(unsigned int *)(v272 + 4);
        if ((_DWORD)v275)
        {
          v824 = v274;
          v868 = v273;
          v912 = v9;
          v276 = 0;
          v277 = (unsigned __int8 *)(v271 + 520 * v269 + 36);
          do
          {
            v278 = *v277;
            v277 += 28;
            v276 = sub_223A4EC9C(v276, ((unint64_t)v278 << 8) | 1, 0xFFu);
            --v275;
          }
          while (v275);
          v279 = v276 >> 8;
          if (!(_BYTE)v276)
            LOBYTE(v279) = -1;
          v45 = a1;
          v9 = v912;
          v274 = v824;
          v273 = v868;
        }
        else
        {
          LOBYTE(v279) = -1;
        }
        *(_BYTE *)(v271 + 520 * v269 + 338) = v279;
      }
      else
      {
        LOBYTE(v279) = *(_BYTE *)(v271 + 520 * v269 + 338);
      }
      v280 = v273 > v274;
    }
    v281 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v270));
    a4.f32[2] = (float)v9;
    v282.i64[0] = 0x3F0000003F000000;
    v282.i64[1] = 0x3F0000003F000000;
    v283 = vmulq_n_f32(vaddq_f32(a4, v282), v281);
    v944 = v283.i32[2];
    v943 = v283.i64[0];
    sub_223FFDF1C(v12[2], &v943, v279, v280, v281);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v284 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v284;
    v13 = **v284;
    v159 = v6 + 6;
    v9 = v8 + 6;
  }
  v285 = v10[439];
  if ((v285 & 0x10000000) != 0)
    v286 = 0x40000000;
  else
    v286 = 0x80000000;
  if ((v285 & 0x20000000) != 0)
    v287 = v286;
  else
    v287 = v285 & 0xCFFFFFFF;
  if ((v287 & 0x40000000) == 0)
  {
    v288 = v5 + 7;
    if ((v287 & 0x80000000) != 0)
    {
      LOBYTE(v297) = -1;
      v298 = 2;
    }
    else
    {
      v289 = *(_QWORD *)(v13 + 2448);
      v290 = v289 + 520 * v287;
      v291 = *(_QWORD *)(v290 + 312);
      v292 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v290 + 336))
      {
        *(_BYTE *)(v290 + 336) = 0;
        v293 = *(unsigned int *)(v290 + 4);
        if ((_DWORD)v293)
        {
          v825 = v292;
          v869 = v291;
          v913 = v9;
          v294 = 0;
          v295 = (unsigned __int8 *)(v289 + 520 * v287 + 36);
          do
          {
            v296 = *v295;
            v295 += 28;
            v294 = sub_223A4EC9C(v294, ((unint64_t)v296 << 8) | 1, 0xFFu);
            --v293;
          }
          while (v293);
          v297 = v294 >> 8;
          if (!(_BYTE)v294)
            LOBYTE(v297) = -1;
          v45 = a1;
          v9 = v913;
          v292 = v825;
          v291 = v869;
        }
        else
        {
          LOBYTE(v297) = -1;
        }
        *(_BYTE *)(v289 + 520 * v287 + 338) = v297;
      }
      else
      {
        LOBYTE(v297) = *(_BYTE *)(v289 + 520 * v287 + 338);
      }
      v298 = v291 > v292;
    }
    v299 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v159, v288));
    a4.f32[2] = (float)v9;
    v300.i64[0] = 0x3F0000003F000000;
    v300.i64[1] = 0x3F0000003F000000;
    v301 = vmulq_n_f32(vaddq_f32(a4, v300), v299);
    v944 = v301.i32[2];
    v943 = v301.i64[0];
    sub_223FFDF1C(v12[2], &v943, v297, v298, v299);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v302 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v302;
    v13 = **v302;
    v9 = v8 + 6;
  }
  v303 = v6 + 7;
  v304 = v10[440];
  if ((v304 & 0x10000000) != 0)
    v305 = 0x40000000;
  else
    v305 = 0x80000000;
  if ((v304 & 0x20000000) != 0)
    v306 = v305;
  else
    v306 = v304 & 0xCFFFFFFF;
  if ((v306 & 0x40000000) == 0)
  {
    if ((v306 & 0x80000000) != 0)
    {
      LOBYTE(v315) = -1;
      v316 = 2;
    }
    else
    {
      v307 = *(_QWORD *)(v13 + 2448);
      v308 = v307 + 520 * v306;
      v309 = *(_QWORD *)(v308 + 312);
      v310 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v308 + 336))
      {
        *(_BYTE *)(v308 + 336) = 0;
        v311 = *(unsigned int *)(v308 + 4);
        if ((_DWORD)v311)
        {
          v826 = v310;
          v870 = v309;
          v914 = v9;
          v312 = 0;
          v313 = (unsigned __int8 *)(v307 + 520 * v306 + 36);
          do
          {
            v314 = *v313;
            v313 += 28;
            v312 = sub_223A4EC9C(v312, ((unint64_t)v314 << 8) | 1, 0xFFu);
            --v311;
          }
          while (v311);
          v315 = v312 >> 8;
          if (!(_BYTE)v312)
            LOBYTE(v315) = -1;
          v45 = a1;
          v9 = v914;
          v310 = v826;
          v309 = v870;
        }
        else
        {
          LOBYTE(v315) = -1;
        }
        *(_BYTE *)(v307 + 520 * v306 + 338) = v315;
      }
      else
      {
        LOBYTE(v315) = *(_BYTE *)(v307 + 520 * v306 + 338);
      }
      v316 = v309 > v310;
    }
    v317 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v5));
    a4.f32[2] = (float)v9;
    v318.i64[0] = 0x3F0000003F000000;
    v318.i64[1] = 0x3F0000003F000000;
    v319 = vmulq_n_f32(vaddq_f32(a4, v318), v317);
    v944 = v319.i32[2];
    v943 = v319.i64[0];
    sub_223FFDF1C(v12[2], &v943, v315, v316, v317);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v320 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v320;
    v13 = **v320;
    v303 = v6 + 7;
    v9 = v8 + 6;
  }
  v321 = v10[441];
  if ((v321 & 0x10000000) != 0)
    v322 = 0x40000000;
  else
    v322 = 0x80000000;
  if ((v321 & 0x20000000) != 0)
    v323 = v322;
  else
    v323 = v321 & 0xCFFFFFFF;
  if ((v323 & 0x40000000) == 0)
  {
    v324 = v5 + 1;
    if ((v323 & 0x80000000) != 0)
    {
      LOBYTE(v333) = -1;
      v334 = 2;
    }
    else
    {
      v325 = *(_QWORD *)(v13 + 2448);
      v326 = v325 + 520 * v323;
      v327 = *(_QWORD *)(v326 + 312);
      v328 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v326 + 336))
      {
        *(_BYTE *)(v326 + 336) = 0;
        v329 = *(unsigned int *)(v326 + 4);
        if ((_DWORD)v329)
        {
          v827 = v328;
          v871 = v327;
          v915 = v9;
          v330 = 0;
          v331 = (unsigned __int8 *)(v325 + 520 * v323 + 36);
          do
          {
            v332 = *v331;
            v331 += 28;
            v330 = sub_223A4EC9C(v330, ((unint64_t)v332 << 8) | 1, 0xFFu);
            --v329;
          }
          while (v329);
          v333 = v330 >> 8;
          if (!(_BYTE)v330)
            LOBYTE(v333) = -1;
          v45 = a1;
          v9 = v915;
          v328 = v827;
          v327 = v871;
        }
        else
        {
          LOBYTE(v333) = -1;
        }
        *(_BYTE *)(v325 + 520 * v323 + 338) = v333;
      }
      else
      {
        LOBYTE(v333) = *(_BYTE *)(v325 + 520 * v323 + 338);
      }
      v334 = v327 > v328;
    }
    v335 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v324));
    a4.f32[2] = (float)v9;
    v336.i64[0] = 0x3F0000003F000000;
    v336.i64[1] = 0x3F0000003F000000;
    v337 = vmulq_n_f32(vaddq_f32(a4, v336), v335);
    v944 = v337.i32[2];
    v943 = v337.i64[0];
    sub_223FFDF1C(v12[2], &v943, v333, v334, v335);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v338 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v338;
    v13 = **v338;
    v303 = v6 + 7;
    v9 = v8 + 6;
  }
  v339 = v10[442];
  if ((v339 & 0x10000000) != 0)
    v340 = 0x40000000;
  else
    v340 = 0x80000000;
  if ((v339 & 0x20000000) != 0)
    v341 = v340;
  else
    v341 = v339 & 0xCFFFFFFF;
  if ((v341 & 0x40000000) == 0)
  {
    v342 = v5 + 2;
    if ((v341 & 0x80000000) != 0)
    {
      LOBYTE(v351) = -1;
      v352 = 2;
    }
    else
    {
      v343 = *(_QWORD *)(v13 + 2448);
      v344 = v343 + 520 * v341;
      v345 = *(_QWORD *)(v344 + 312);
      v346 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v344 + 336))
      {
        *(_BYTE *)(v344 + 336) = 0;
        v347 = *(unsigned int *)(v344 + 4);
        if ((_DWORD)v347)
        {
          v828 = v346;
          v872 = v345;
          v916 = v9;
          v348 = 0;
          v349 = (unsigned __int8 *)(v343 + 520 * v341 + 36);
          do
          {
            v350 = *v349;
            v349 += 28;
            v348 = sub_223A4EC9C(v348, ((unint64_t)v350 << 8) | 1, 0xFFu);
            --v347;
          }
          while (v347);
          v351 = v348 >> 8;
          if (!(_BYTE)v348)
            LOBYTE(v351) = -1;
          v45 = a1;
          v9 = v916;
          v346 = v828;
          v345 = v872;
        }
        else
        {
          LOBYTE(v351) = -1;
        }
        *(_BYTE *)(v343 + 520 * v341 + 338) = v351;
      }
      else
      {
        LOBYTE(v351) = *(_BYTE *)(v343 + 520 * v341 + 338);
      }
      v352 = v345 > v346;
    }
    v353 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v342));
    a4.f32[2] = (float)v9;
    v354.i64[0] = 0x3F0000003F000000;
    v354.i64[1] = 0x3F0000003F000000;
    v355 = vmulq_n_f32(vaddq_f32(a4, v354), v353);
    v944 = v355.i32[2];
    v943 = v355.i64[0];
    sub_223FFDF1C(v12[2], &v943, v351, v352, v353);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v356 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v356;
    v13 = **v356;
    v303 = v6 + 7;
    v9 = v8 + 6;
  }
  v357 = v10[443];
  if ((v357 & 0x10000000) != 0)
    v358 = 0x40000000;
  else
    v358 = 0x80000000;
  if ((v357 & 0x20000000) != 0)
    v359 = v358;
  else
    v359 = v357 & 0xCFFFFFFF;
  if ((v359 & 0x40000000) == 0)
  {
    v360 = v5 + 3;
    if ((v359 & 0x80000000) != 0)
    {
      LOBYTE(v369) = -1;
      v370 = 2;
    }
    else
    {
      v361 = *(_QWORD *)(v13 + 2448);
      v362 = v361 + 520 * v359;
      v363 = *(_QWORD *)(v362 + 312);
      v364 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v362 + 336))
      {
        *(_BYTE *)(v362 + 336) = 0;
        v365 = *(unsigned int *)(v362 + 4);
        if ((_DWORD)v365)
        {
          v829 = v364;
          v873 = v363;
          v917 = v9;
          v366 = 0;
          v367 = (unsigned __int8 *)(v361 + 520 * v359 + 36);
          do
          {
            v368 = *v367;
            v367 += 28;
            v366 = sub_223A4EC9C(v366, ((unint64_t)v368 << 8) | 1, 0xFFu);
            --v365;
          }
          while (v365);
          v369 = v366 >> 8;
          if (!(_BYTE)v366)
            LOBYTE(v369) = -1;
          v45 = a1;
          v9 = v917;
          v364 = v829;
          v363 = v873;
        }
        else
        {
          LOBYTE(v369) = -1;
        }
        *(_BYTE *)(v361 + 520 * v359 + 338) = v369;
      }
      else
      {
        LOBYTE(v369) = *(_BYTE *)(v361 + 520 * v359 + 338);
      }
      v370 = v363 > v364;
    }
    v371 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v360));
    a4.f32[2] = (float)v9;
    v372.i64[0] = 0x3F0000003F000000;
    v372.i64[1] = 0x3F0000003F000000;
    v373 = vmulq_n_f32(vaddq_f32(a4, v372), v371);
    v944 = v373.i32[2];
    v943 = v373.i64[0];
    sub_223FFDF1C(v12[2], &v943, v369, v370, v371);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v374 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v374;
    v13 = **v374;
    v303 = v6 + 7;
    v9 = v8 + 6;
  }
  v375 = v10[444];
  if ((v375 & 0x10000000) != 0)
    v376 = 0x40000000;
  else
    v376 = 0x80000000;
  if ((v375 & 0x20000000) != 0)
    v377 = v376;
  else
    v377 = v375 & 0xCFFFFFFF;
  if ((v377 & 0x40000000) == 0)
  {
    v378 = v5 + 4;
    if ((v377 & 0x80000000) != 0)
    {
      LOBYTE(v387) = -1;
      v388 = 2;
    }
    else
    {
      v379 = *(_QWORD *)(v13 + 2448);
      v380 = v379 + 520 * v377;
      v381 = *(_QWORD *)(v380 + 312);
      v382 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v380 + 336))
      {
        *(_BYTE *)(v380 + 336) = 0;
        v383 = *(unsigned int *)(v380 + 4);
        if ((_DWORD)v383)
        {
          v830 = v382;
          v874 = v381;
          v918 = v9;
          v384 = 0;
          v385 = (unsigned __int8 *)(v379 + 520 * v377 + 36);
          do
          {
            v386 = *v385;
            v385 += 28;
            v384 = sub_223A4EC9C(v384, ((unint64_t)v386 << 8) | 1, 0xFFu);
            --v383;
          }
          while (v383);
          v387 = v384 >> 8;
          if (!(_BYTE)v384)
            LOBYTE(v387) = -1;
          v45 = a1;
          v9 = v918;
          v382 = v830;
          v381 = v874;
        }
        else
        {
          LOBYTE(v387) = -1;
        }
        *(_BYTE *)(v379 + 520 * v377 + 338) = v387;
      }
      else
      {
        LOBYTE(v387) = *(_BYTE *)(v379 + 520 * v377 + 338);
      }
      v388 = v381 > v382;
    }
    v389 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v378));
    a4.f32[2] = (float)v9;
    v390.i64[0] = 0x3F0000003F000000;
    v390.i64[1] = 0x3F0000003F000000;
    v391 = vmulq_n_f32(vaddq_f32(a4, v390), v389);
    v944 = v391.i32[2];
    v943 = v391.i64[0];
    sub_223FFDF1C(v12[2], &v943, v387, v388, v389);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v392 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v392;
    v13 = **v392;
    v303 = v6 + 7;
    v9 = v8 + 6;
  }
  v393 = v10[445];
  if ((v393 & 0x10000000) != 0)
    v394 = 0x40000000;
  else
    v394 = 0x80000000;
  if ((v393 & 0x20000000) != 0)
    v395 = v394;
  else
    v395 = v393 & 0xCFFFFFFF;
  if ((v395 & 0x40000000) == 0)
  {
    v396 = v5 + 5;
    if ((v395 & 0x80000000) != 0)
    {
      LOBYTE(v405) = -1;
      v406 = 2;
    }
    else
    {
      v397 = *(_QWORD *)(v13 + 2448);
      v398 = v397 + 520 * v395;
      v399 = *(_QWORD *)(v398 + 312);
      v400 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v398 + 336))
      {
        *(_BYTE *)(v398 + 336) = 0;
        v401 = *(unsigned int *)(v398 + 4);
        if ((_DWORD)v401)
        {
          v831 = v400;
          v875 = v399;
          v919 = v9;
          v402 = 0;
          v403 = (unsigned __int8 *)(v397 + 520 * v395 + 36);
          do
          {
            v404 = *v403;
            v403 += 28;
            v402 = sub_223A4EC9C(v402, ((unint64_t)v404 << 8) | 1, 0xFFu);
            --v401;
          }
          while (v401);
          v405 = v402 >> 8;
          if (!(_BYTE)v402)
            LOBYTE(v405) = -1;
          v45 = a1;
          v9 = v919;
          v400 = v831;
          v399 = v875;
        }
        else
        {
          LOBYTE(v405) = -1;
        }
        *(_BYTE *)(v397 + 520 * v395 + 338) = v405;
      }
      else
      {
        LOBYTE(v405) = *(_BYTE *)(v397 + 520 * v395 + 338);
      }
      v406 = v399 > v400;
    }
    v407 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v396));
    a4.f32[2] = (float)v9;
    v408.i64[0] = 0x3F0000003F000000;
    v408.i64[1] = 0x3F0000003F000000;
    v409 = vmulq_n_f32(vaddq_f32(a4, v408), v407);
    v944 = v409.i32[2];
    v943 = v409.i64[0];
    sub_223FFDF1C(v12[2], &v943, v405, v406, v407);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v410 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v410;
    v13 = **v410;
    v303 = v6 + 7;
    v9 = v8 + 6;
  }
  v411 = v10[446];
  if ((v411 & 0x10000000) != 0)
    v412 = 0x40000000;
  else
    v412 = 0x80000000;
  if ((v411 & 0x20000000) != 0)
    v413 = v412;
  else
    v413 = v411 & 0xCFFFFFFF;
  if ((v413 & 0x40000000) == 0)
  {
    v414 = v5 + 6;
    if ((v413 & 0x80000000) != 0)
    {
      LOBYTE(v423) = -1;
      v424 = 2;
    }
    else
    {
      v415 = *(_QWORD *)(v13 + 2448);
      v416 = v415 + 520 * v413;
      v417 = *(_QWORD *)(v416 + 312);
      v418 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v416 + 336))
      {
        *(_BYTE *)(v416 + 336) = 0;
        v419 = *(unsigned int *)(v416 + 4);
        if ((_DWORD)v419)
        {
          v832 = v418;
          v876 = v417;
          v920 = v9;
          v420 = 0;
          v421 = (unsigned __int8 *)(v415 + 520 * v413 + 36);
          do
          {
            v422 = *v421;
            v421 += 28;
            v420 = sub_223A4EC9C(v420, ((unint64_t)v422 << 8) | 1, 0xFFu);
            --v419;
          }
          while (v419);
          v423 = v420 >> 8;
          if (!(_BYTE)v420)
            LOBYTE(v423) = -1;
          v45 = a1;
          v9 = v920;
          v418 = v832;
          v417 = v876;
        }
        else
        {
          LOBYTE(v423) = -1;
        }
        *(_BYTE *)(v415 + 520 * v413 + 338) = v423;
      }
      else
      {
        LOBYTE(v423) = *(_BYTE *)(v415 + 520 * v413 + 338);
      }
      v424 = v417 > v418;
    }
    v425 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v414));
    a4.f32[2] = (float)v9;
    v426.i64[0] = 0x3F0000003F000000;
    v426.i64[1] = 0x3F0000003F000000;
    v427 = vmulq_n_f32(vaddq_f32(a4, v426), v425);
    v944 = v427.i32[2];
    v943 = v427.i64[0];
    sub_223FFDF1C(v12[2], &v943, v423, v424, v425);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v428 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v428;
    v13 = **v428;
    v303 = v6 + 7;
    v9 = v8 + 6;
  }
  v429 = v10[447];
  if ((v429 & 0x10000000) != 0)
    v430 = 0x40000000;
  else
    v430 = 0x80000000;
  if ((v429 & 0x20000000) != 0)
    v431 = v430;
  else
    v431 = v429 & 0xCFFFFFFF;
  if ((v431 & 0x40000000) == 0)
  {
    v432 = v5 + 7;
    if ((v431 & 0x80000000) != 0)
    {
      LOBYTE(v441) = -1;
      v442 = 2;
    }
    else
    {
      v433 = *(_QWORD *)(v13 + 2448);
      v434 = v433 + 520 * v431;
      v435 = *(_QWORD *)(v434 + 312);
      v436 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v434 + 336))
      {
        *(_BYTE *)(v434 + 336) = 0;
        v437 = *(unsigned int *)(v434 + 4);
        if ((_DWORD)v437)
        {
          v833 = v436;
          v877 = v435;
          v921 = v9;
          v438 = 0;
          v439 = (unsigned __int8 *)(v433 + 520 * v431 + 36);
          do
          {
            v440 = *v439;
            v439 += 28;
            v438 = sub_223A4EC9C(v438, ((unint64_t)v440 << 8) | 1, 0xFFu);
            --v437;
          }
          while (v437);
          v441 = v438 >> 8;
          if (!(_BYTE)v438)
            LOBYTE(v441) = -1;
          v45 = a1;
          v9 = v921;
          v436 = v833;
          v435 = v877;
        }
        else
        {
          LOBYTE(v441) = -1;
        }
        *(_BYTE *)(v433 + 520 * v431 + 338) = v441;
      }
      else
      {
        LOBYTE(v441) = *(_BYTE *)(v433 + 520 * v431 + 338);
      }
      v442 = v435 > v436;
    }
    v443 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v432));
    a4.f32[2] = (float)v9;
    v444.i64[0] = 0x3F0000003F000000;
    v444.i64[1] = 0x3F0000003F000000;
    v445 = vmulq_n_f32(vaddq_f32(a4, v444), v443);
    v944 = v445.i32[2];
    v943 = v445.i64[0];
    sub_223FFDF1C(v12[2], &v943, v441, v442, v443);
    v5 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v446 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v446;
    v13 = **v446;
  }
  v447 = v8 + 7;
  v448 = v10[448];
  if ((v448 & 0x10000000) != 0)
    v449 = 0x40000000;
  else
    v449 = 0x80000000;
  if ((v448 & 0x20000000) != 0)
    v450 = v449;
  else
    v450 = v448 & 0xCFFFFFFF;
  if ((v450 & 0x40000000) == 0)
  {
    if ((v450 & 0x80000000) != 0)
    {
      LOBYTE(v459) = -1;
      v460 = 2;
    }
    else
    {
      v451 = *(_QWORD *)(v13 + 2448);
      v452 = v451 + 520 * v450;
      v453 = *(_QWORD *)(v452 + 312);
      v454 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v452 + 336))
      {
        *(_BYTE *)(v452 + 336) = 0;
        v455 = *(unsigned int *)(v452 + 4);
        if ((_DWORD)v455)
        {
          v834 = v454;
          v878 = v453;
          v922 = v447;
          v456 = 0;
          v457 = (unsigned __int8 *)(v451 + 520 * v450 + 36);
          do
          {
            v458 = *v457;
            v457 += 28;
            v456 = sub_223A4EC9C(v456, ((unint64_t)v458 << 8) | 1, 0xFFu);
            --v455;
          }
          while (v455);
          v459 = v456 >> 8;
          if (!(_BYTE)v456)
            LOBYTE(v459) = -1;
          v45 = a1;
          v447 = v922;
          v454 = v834;
          v453 = v878;
        }
        else
        {
          LOBYTE(v459) = -1;
        }
        *(_BYTE *)(v451 + 520 * v450 + 338) = v459;
      }
      else
      {
        LOBYTE(v459) = *(_BYTE *)(v451 + 520 * v450 + 338);
      }
      v460 = v453 > v454;
    }
    a4.f32[0] = (float)v5;
    a4.f32[1] = (float)v6;
    v461 = *(float *)(v13 + 144);
    a4.f32[2] = (float)v447;
    v462.i64[0] = 0x3F0000003F000000;
    v462.i64[1] = 0x3F0000003F000000;
    v463 = vmulq_n_f32(vaddq_f32(a4, v462), v461);
    v944 = v463.i32[2];
    v943 = v463.i64[0];
    sub_223FFDF1C(v12[2], &v943, v459, v460, v461);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v464 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v464;
    v13 = **v464;
    v447 = a2[2] + 7;
  }
  v465 = v10[449];
  if ((v465 & 0x10000000) != 0)
    v466 = 0x40000000;
  else
    v466 = 0x80000000;
  if ((v465 & 0x20000000) != 0)
    v467 = v466;
  else
    v467 = v465 & 0xCFFFFFFF;
  if ((v467 & 0x40000000) == 0)
  {
    v468 = v5 + 1;
    if ((v467 & 0x80000000) != 0)
    {
      LOBYTE(v477) = -1;
      v478 = 2;
    }
    else
    {
      v469 = *(_QWORD *)(v13 + 2448);
      v470 = v469 + 520 * v467;
      v471 = *(_QWORD *)(v470 + 312);
      v472 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v470 + 336))
      {
        *(_BYTE *)(v470 + 336) = 0;
        v473 = *(unsigned int *)(v470 + 4);
        if ((_DWORD)v473)
        {
          v835 = v472;
          v879 = v471;
          v923 = v447;
          v474 = 0;
          v475 = (unsigned __int8 *)(v469 + 520 * v467 + 36);
          do
          {
            v476 = *v475;
            v475 += 28;
            v474 = sub_223A4EC9C(v474, ((unint64_t)v476 << 8) | 1, 0xFFu);
            --v473;
          }
          while (v473);
          v477 = v474 >> 8;
          if (!(_BYTE)v474)
            LOBYTE(v477) = -1;
          v45 = a1;
          v447 = v923;
          v472 = v835;
          v471 = v879;
        }
        else
        {
          LOBYTE(v477) = -1;
        }
        *(_BYTE *)(v469 + 520 * v467 + 338) = v477;
      }
      else
      {
        LOBYTE(v477) = *(_BYTE *)(v469 + 520 * v467 + 338);
      }
      v478 = v471 > v472;
    }
    v479 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v468));
    a4.f32[2] = (float)v447;
    v480.i64[0] = 0x3F0000003F000000;
    v480.i64[1] = 0x3F0000003F000000;
    v481 = vmulq_n_f32(vaddq_f32(a4, v480), v479);
    v944 = v481.i32[2];
    v943 = v481.i64[0];
    sub_223FFDF1C(v12[2], &v943, v477, v478, v479);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v482 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v482;
    v13 = **v482;
    v447 = a2[2] + 7;
  }
  v483 = v10[450];
  if ((v483 & 0x10000000) != 0)
    v484 = 0x40000000;
  else
    v484 = 0x80000000;
  if ((v483 & 0x20000000) != 0)
    v485 = v484;
  else
    v485 = v483 & 0xCFFFFFFF;
  if ((v485 & 0x40000000) == 0)
  {
    v486 = v5 + 2;
    if ((v485 & 0x80000000) != 0)
    {
      LOBYTE(v495) = -1;
      v496 = 2;
    }
    else
    {
      v487 = *(_QWORD *)(v13 + 2448);
      v488 = v487 + 520 * v485;
      v489 = *(_QWORD *)(v488 + 312);
      v490 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v488 + 336))
      {
        *(_BYTE *)(v488 + 336) = 0;
        v491 = *(unsigned int *)(v488 + 4);
        if ((_DWORD)v491)
        {
          v836 = v490;
          v880 = v489;
          v924 = v447;
          v492 = 0;
          v493 = (unsigned __int8 *)(v487 + 520 * v485 + 36);
          do
          {
            v494 = *v493;
            v493 += 28;
            v492 = sub_223A4EC9C(v492, ((unint64_t)v494 << 8) | 1, 0xFFu);
            --v491;
          }
          while (v491);
          v495 = v492 >> 8;
          if (!(_BYTE)v492)
            LOBYTE(v495) = -1;
          v45 = a1;
          v447 = v924;
          v490 = v836;
          v489 = v880;
        }
        else
        {
          LOBYTE(v495) = -1;
        }
        *(_BYTE *)(v487 + 520 * v485 + 338) = v495;
      }
      else
      {
        LOBYTE(v495) = *(_BYTE *)(v487 + 520 * v485 + 338);
      }
      v496 = v489 > v490;
    }
    v497 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v486));
    a4.f32[2] = (float)v447;
    v498.i64[0] = 0x3F0000003F000000;
    v498.i64[1] = 0x3F0000003F000000;
    v499 = vmulq_n_f32(vaddq_f32(a4, v498), v497);
    v944 = v499.i32[2];
    v943 = v499.i64[0];
    sub_223FFDF1C(v12[2], &v943, v495, v496, v497);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v500 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v500;
    v13 = **v500;
    v447 = a2[2] + 7;
  }
  v501 = v10[451];
  if ((v501 & 0x10000000) != 0)
    v502 = 0x40000000;
  else
    v502 = 0x80000000;
  if ((v501 & 0x20000000) != 0)
    v503 = v502;
  else
    v503 = v501 & 0xCFFFFFFF;
  if ((v503 & 0x40000000) == 0)
  {
    v504 = v5 + 3;
    if ((v503 & 0x80000000) != 0)
    {
      LOBYTE(v513) = -1;
      v514 = 2;
    }
    else
    {
      v505 = *(_QWORD *)(v13 + 2448);
      v506 = v505 + 520 * v503;
      v507 = *(_QWORD *)(v506 + 312);
      v508 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v506 + 336))
      {
        *(_BYTE *)(v506 + 336) = 0;
        v509 = *(unsigned int *)(v506 + 4);
        if ((_DWORD)v509)
        {
          v837 = v508;
          v881 = v507;
          v925 = v447;
          v510 = 0;
          v511 = (unsigned __int8 *)(v505 + 520 * v503 + 36);
          do
          {
            v512 = *v511;
            v511 += 28;
            v510 = sub_223A4EC9C(v510, ((unint64_t)v512 << 8) | 1, 0xFFu);
            --v509;
          }
          while (v509);
          v513 = v510 >> 8;
          if (!(_BYTE)v510)
            LOBYTE(v513) = -1;
          v45 = a1;
          v447 = v925;
          v508 = v837;
          v507 = v881;
        }
        else
        {
          LOBYTE(v513) = -1;
        }
        *(_BYTE *)(v505 + 520 * v503 + 338) = v513;
      }
      else
      {
        LOBYTE(v513) = *(_BYTE *)(v505 + 520 * v503 + 338);
      }
      v514 = v507 > v508;
    }
    v515 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v504));
    a4.f32[2] = (float)v447;
    v516.i64[0] = 0x3F0000003F000000;
    v516.i64[1] = 0x3F0000003F000000;
    v517 = vmulq_n_f32(vaddq_f32(a4, v516), v515);
    v944 = v517.i32[2];
    v943 = v517.i64[0];
    sub_223FFDF1C(v12[2], &v943, v513, v514, v515);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v518 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v518;
    v13 = **v518;
    v447 = a2[2] + 7;
  }
  v519 = v10[452];
  if ((v519 & 0x10000000) != 0)
    v520 = 0x40000000;
  else
    v520 = 0x80000000;
  if ((v519 & 0x20000000) != 0)
    v521 = v520;
  else
    v521 = v519 & 0xCFFFFFFF;
  if ((v521 & 0x40000000) == 0)
  {
    v522 = v5 + 4;
    if ((v521 & 0x80000000) != 0)
    {
      LOBYTE(v531) = -1;
      v532 = 2;
    }
    else
    {
      v523 = *(_QWORD *)(v13 + 2448);
      v524 = v523 + 520 * v521;
      v525 = *(_QWORD *)(v524 + 312);
      v526 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v524 + 336))
      {
        *(_BYTE *)(v524 + 336) = 0;
        v527 = *(unsigned int *)(v524 + 4);
        if ((_DWORD)v527)
        {
          v838 = v526;
          v882 = v525;
          v926 = v447;
          v528 = 0;
          v529 = (unsigned __int8 *)(v523 + 520 * v521 + 36);
          do
          {
            v530 = *v529;
            v529 += 28;
            v528 = sub_223A4EC9C(v528, ((unint64_t)v530 << 8) | 1, 0xFFu);
            --v527;
          }
          while (v527);
          v531 = v528 >> 8;
          if (!(_BYTE)v528)
            LOBYTE(v531) = -1;
          v45 = a1;
          v447 = v926;
          v526 = v838;
          v525 = v882;
        }
        else
        {
          LOBYTE(v531) = -1;
        }
        *(_BYTE *)(v523 + 520 * v521 + 338) = v531;
      }
      else
      {
        LOBYTE(v531) = *(_BYTE *)(v523 + 520 * v521 + 338);
      }
      v532 = v525 > v526;
    }
    v533 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v522));
    a4.f32[2] = (float)v447;
    v534.i64[0] = 0x3F0000003F000000;
    v534.i64[1] = 0x3F0000003F000000;
    v535 = vmulq_n_f32(vaddq_f32(a4, v534), v533);
    v944 = v535.i32[2];
    v943 = v535.i64[0];
    sub_223FFDF1C(v12[2], &v943, v531, v532, v533);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v536 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v536;
    v13 = **v536;
    v447 = a2[2] + 7;
  }
  v537 = v10[453];
  if ((v537 & 0x10000000) != 0)
    v538 = 0x40000000;
  else
    v538 = 0x80000000;
  if ((v537 & 0x20000000) != 0)
    v539 = v538;
  else
    v539 = v537 & 0xCFFFFFFF;
  if ((v539 & 0x40000000) == 0)
  {
    v540 = v5 + 5;
    if ((v539 & 0x80000000) != 0)
    {
      LOBYTE(v549) = -1;
      v550 = 2;
    }
    else
    {
      v541 = *(_QWORD *)(v13 + 2448);
      v542 = v541 + 520 * v539;
      v543 = *(_QWORD *)(v542 + 312);
      v544 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v542 + 336))
      {
        *(_BYTE *)(v542 + 336) = 0;
        v545 = *(unsigned int *)(v542 + 4);
        if ((_DWORD)v545)
        {
          v839 = v544;
          v883 = v543;
          v927 = v447;
          v546 = 0;
          v547 = (unsigned __int8 *)(v541 + 520 * v539 + 36);
          do
          {
            v548 = *v547;
            v547 += 28;
            v546 = sub_223A4EC9C(v546, ((unint64_t)v548 << 8) | 1, 0xFFu);
            --v545;
          }
          while (v545);
          v549 = v546 >> 8;
          if (!(_BYTE)v546)
            LOBYTE(v549) = -1;
          v45 = a1;
          v447 = v927;
          v544 = v839;
          v543 = v883;
        }
        else
        {
          LOBYTE(v549) = -1;
        }
        *(_BYTE *)(v541 + 520 * v539 + 338) = v549;
      }
      else
      {
        LOBYTE(v549) = *(_BYTE *)(v541 + 520 * v539 + 338);
      }
      v550 = v543 > v544;
    }
    v551 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v540));
    a4.f32[2] = (float)v447;
    v552.i64[0] = 0x3F0000003F000000;
    v552.i64[1] = 0x3F0000003F000000;
    v553 = vmulq_n_f32(vaddq_f32(a4, v552), v551);
    v944 = v553.i32[2];
    v943 = v553.i64[0];
    sub_223FFDF1C(v12[2], &v943, v549, v550, v551);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v554 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v554;
    v13 = **v554;
    v447 = a2[2] + 7;
  }
  v555 = v10[454];
  if ((v555 & 0x10000000) != 0)
    v556 = 0x40000000;
  else
    v556 = 0x80000000;
  if ((v555 & 0x20000000) != 0)
    v557 = v556;
  else
    v557 = v555 & 0xCFFFFFFF;
  if ((v557 & 0x40000000) == 0)
  {
    v558 = v5 + 6;
    if ((v557 & 0x80000000) != 0)
    {
      LOBYTE(v567) = -1;
      v568 = 2;
    }
    else
    {
      v559 = *(_QWORD *)(v13 + 2448);
      v560 = v559 + 520 * v557;
      v561 = *(_QWORD *)(v560 + 312);
      v562 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v560 + 336))
      {
        *(_BYTE *)(v560 + 336) = 0;
        v563 = *(unsigned int *)(v560 + 4);
        if ((_DWORD)v563)
        {
          v840 = v562;
          v884 = v561;
          v928 = v447;
          v564 = 0;
          v565 = (unsigned __int8 *)(v559 + 520 * v557 + 36);
          do
          {
            v566 = *v565;
            v565 += 28;
            v564 = sub_223A4EC9C(v564, ((unint64_t)v566 << 8) | 1, 0xFFu);
            --v563;
          }
          while (v563);
          v567 = v564 >> 8;
          if (!(_BYTE)v564)
            LOBYTE(v567) = -1;
          v45 = a1;
          v447 = v928;
          v562 = v840;
          v561 = v884;
        }
        else
        {
          LOBYTE(v567) = -1;
        }
        *(_BYTE *)(v559 + 520 * v557 + 338) = v567;
      }
      else
      {
        LOBYTE(v567) = *(_BYTE *)(v559 + 520 * v557 + 338);
      }
      v568 = v561 > v562;
    }
    v569 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v558));
    a4.f32[2] = (float)v447;
    v570.i64[0] = 0x3F0000003F000000;
    v570.i64[1] = 0x3F0000003F000000;
    v571 = vmulq_n_f32(vaddq_f32(a4, v570), v569);
    v944 = v571.i32[2];
    v943 = v571.i64[0];
    sub_223FFDF1C(v12[2], &v943, v567, v568, v569);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v572 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v572;
    v13 = **v572;
    v447 = a2[2] + 7;
  }
  v573 = v10[455];
  if ((v573 & 0x10000000) != 0)
    v574 = 0x40000000;
  else
    v574 = 0x80000000;
  if ((v573 & 0x20000000) != 0)
    v575 = v574;
  else
    v575 = v573 & 0xCFFFFFFF;
  if ((v575 & 0x40000000) == 0)
  {
    v576 = v5 + 7;
    if ((v575 & 0x80000000) != 0)
    {
      LOBYTE(v585) = -1;
      v586 = 2;
    }
    else
    {
      v577 = *(_QWORD *)(v13 + 2448);
      v578 = v577 + 520 * v575;
      v579 = *(_QWORD *)(v578 + 312);
      v580 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v578 + 336))
      {
        *(_BYTE *)(v578 + 336) = 0;
        v581 = *(unsigned int *)(v578 + 4);
        if ((_DWORD)v581)
        {
          v841 = v580;
          v885 = v579;
          v929 = v447;
          v582 = 0;
          v583 = (unsigned __int8 *)(v577 + 520 * v575 + 36);
          do
          {
            v584 = *v583;
            v583 += 28;
            v582 = sub_223A4EC9C(v582, ((unint64_t)v584 << 8) | 1, 0xFFu);
            --v581;
          }
          while (v581);
          v585 = v582 >> 8;
          if (!(_BYTE)v582)
            LOBYTE(v585) = -1;
          v45 = a1;
          v447 = v929;
          v580 = v841;
          v579 = v885;
        }
        else
        {
          LOBYTE(v585) = -1;
        }
        *(_BYTE *)(v577 + 520 * v575 + 338) = v585;
      }
      else
      {
        LOBYTE(v585) = *(_BYTE *)(v577 + 520 * v575 + 338);
      }
      v586 = v579 > v580;
    }
    v587 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v6, v576));
    a4.f32[2] = (float)v447;
    v588.i64[0] = 0x3F0000003F000000;
    v588.i64[1] = 0x3F0000003F000000;
    v589 = vmulq_n_f32(vaddq_f32(a4, v588), v587);
    v944 = v589.i32[2];
    v943 = v589.i64[0];
    sub_223FFDF1C(v12[2], &v943, v585, v586, v587);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v590 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v590;
    v13 = **v590;
    v447 = a2[2] + 7;
  }
  v591 = v6 + 1;
  v592 = v10[456];
  if ((v592 & 0x10000000) != 0)
    v593 = 0x40000000;
  else
    v593 = 0x80000000;
  if ((v592 & 0x20000000) != 0)
    v594 = v593;
  else
    v594 = v592 & 0xCFFFFFFF;
  if ((v594 & 0x40000000) == 0)
  {
    if ((v594 & 0x80000000) != 0)
    {
      LOBYTE(v603) = -1;
      v604 = 2;
    }
    else
    {
      v595 = *(_QWORD *)(v13 + 2448);
      v596 = v595 + 520 * v594;
      v597 = *(_QWORD *)(v596 + 312);
      v598 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v596 + 336))
      {
        *(_BYTE *)(v596 + 336) = 0;
        v599 = *(unsigned int *)(v596 + 4);
        if ((_DWORD)v599)
        {
          v842 = v598;
          v886 = v597;
          v930 = v447;
          v600 = 0;
          v601 = (unsigned __int8 *)(v595 + 520 * v594 + 36);
          do
          {
            v602 = *v601;
            v601 += 28;
            v600 = sub_223A4EC9C(v600, ((unint64_t)v602 << 8) | 1, 0xFFu);
            --v599;
          }
          while (v599);
          v603 = v600 >> 8;
          if (!(_BYTE)v600)
            LOBYTE(v603) = -1;
          v45 = a1;
          v447 = v930;
          v598 = v842;
          v597 = v886;
        }
        else
        {
          LOBYTE(v603) = -1;
        }
        *(_BYTE *)(v595 + 520 * v594 + 338) = v603;
      }
      else
      {
        LOBYTE(v603) = *(_BYTE *)(v595 + 520 * v594 + 338);
      }
      v604 = v597 > v598;
    }
    v605 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v591, v5));
    a4.f32[2] = (float)v447;
    v606.i64[0] = 0x3F0000003F000000;
    v606.i64[1] = 0x3F0000003F000000;
    v607 = vmulq_n_f32(vaddq_f32(a4, v606), v605);
    v944 = v607.i32[2];
    v943 = v607.i64[0];
    sub_223FFDF1C(v12[2], &v943, v603, v604, v605);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v608 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v608;
    v13 = **v608;
    v591 = v6 + 1;
    v447 = a2[2] + 7;
  }
  v609 = v10[457];
  if ((v609 & 0x10000000) != 0)
    v610 = 0x40000000;
  else
    v610 = 0x80000000;
  if ((v609 & 0x20000000) != 0)
    v611 = v610;
  else
    v611 = v609 & 0xCFFFFFFF;
  if ((v611 & 0x40000000) == 0)
  {
    v612 = v5 + 1;
    if ((v611 & 0x80000000) != 0)
    {
      LOBYTE(v621) = -1;
      v622 = 2;
    }
    else
    {
      v613 = *(_QWORD *)(v13 + 2448);
      v614 = v613 + 520 * v611;
      v615 = *(_QWORD *)(v614 + 312);
      v616 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v614 + 336))
      {
        *(_BYTE *)(v614 + 336) = 0;
        v617 = *(unsigned int *)(v614 + 4);
        if ((_DWORD)v617)
        {
          v843 = v616;
          v887 = v615;
          v931 = v447;
          v618 = 0;
          v619 = (unsigned __int8 *)(v613 + 520 * v611 + 36);
          do
          {
            v620 = *v619;
            v619 += 28;
            v618 = sub_223A4EC9C(v618, ((unint64_t)v620 << 8) | 1, 0xFFu);
            --v617;
          }
          while (v617);
          v621 = v618 >> 8;
          if (!(_BYTE)v618)
            LOBYTE(v621) = -1;
          v45 = a1;
          v447 = v931;
          v616 = v843;
          v615 = v887;
        }
        else
        {
          LOBYTE(v621) = -1;
        }
        *(_BYTE *)(v613 + 520 * v611 + 338) = v621;
      }
      else
      {
        LOBYTE(v621) = *(_BYTE *)(v613 + 520 * v611 + 338);
      }
      v622 = v615 > v616;
    }
    v623 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v591, v612));
    a4.f32[2] = (float)v447;
    v624.i64[0] = 0x3F0000003F000000;
    v624.i64[1] = 0x3F0000003F000000;
    v625 = vmulq_n_f32(vaddq_f32(a4, v624), v623);
    v944 = v625.i32[2];
    v943 = v625.i64[0];
    sub_223FFDF1C(v12[2], &v943, v621, v622, v623);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v626 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v626;
    v13 = **v626;
    v591 = v6 + 1;
    v447 = a2[2] + 7;
  }
  v627 = v10[458];
  if ((v627 & 0x10000000) != 0)
    v628 = 0x40000000;
  else
    v628 = 0x80000000;
  if ((v627 & 0x20000000) != 0)
    v629 = v628;
  else
    v629 = v627 & 0xCFFFFFFF;
  if ((v629 & 0x40000000) == 0)
  {
    v630 = v5 + 2;
    if ((v629 & 0x80000000) != 0)
    {
      LOBYTE(v639) = -1;
      v640 = 2;
    }
    else
    {
      v631 = *(_QWORD *)(v13 + 2448);
      v632 = v631 + 520 * v629;
      v633 = *(_QWORD *)(v632 + 312);
      v634 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v632 + 336))
      {
        *(_BYTE *)(v632 + 336) = 0;
        v635 = *(unsigned int *)(v632 + 4);
        if ((_DWORD)v635)
        {
          v844 = v634;
          v888 = v633;
          v932 = v447;
          v636 = 0;
          v637 = (unsigned __int8 *)(v631 + 520 * v629 + 36);
          do
          {
            v638 = *v637;
            v637 += 28;
            v636 = sub_223A4EC9C(v636, ((unint64_t)v638 << 8) | 1, 0xFFu);
            --v635;
          }
          while (v635);
          v639 = v636 >> 8;
          if (!(_BYTE)v636)
            LOBYTE(v639) = -1;
          v45 = a1;
          v447 = v932;
          v634 = v844;
          v633 = v888;
        }
        else
        {
          LOBYTE(v639) = -1;
        }
        *(_BYTE *)(v631 + 520 * v629 + 338) = v639;
      }
      else
      {
        LOBYTE(v639) = *(_BYTE *)(v631 + 520 * v629 + 338);
      }
      v640 = v633 > v634;
    }
    v641 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v591, v630));
    a4.f32[2] = (float)v447;
    v642.i64[0] = 0x3F0000003F000000;
    v642.i64[1] = 0x3F0000003F000000;
    v643 = vmulq_n_f32(vaddq_f32(a4, v642), v641);
    v944 = v643.i32[2];
    v943 = v643.i64[0];
    sub_223FFDF1C(v12[2], &v943, v639, v640, v641);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v644 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v644;
    v13 = **v644;
    v591 = v6 + 1;
    v447 = a2[2] + 7;
  }
  v645 = v10[459];
  if ((v645 & 0x10000000) != 0)
    v646 = 0x40000000;
  else
    v646 = 0x80000000;
  if ((v645 & 0x20000000) != 0)
    v647 = v646;
  else
    v647 = v645 & 0xCFFFFFFF;
  if ((v647 & 0x40000000) == 0)
  {
    v648 = v5 + 3;
    if ((v647 & 0x80000000) != 0)
    {
      LOBYTE(v657) = -1;
      v658 = 2;
    }
    else
    {
      v649 = *(_QWORD *)(v13 + 2448);
      v650 = v649 + 520 * v647;
      v651 = *(_QWORD *)(v650 + 312);
      v652 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v650 + 336))
      {
        *(_BYTE *)(v650 + 336) = 0;
        v653 = *(unsigned int *)(v650 + 4);
        if ((_DWORD)v653)
        {
          v845 = v652;
          v889 = v651;
          v933 = v447;
          v654 = 0;
          v655 = (unsigned __int8 *)(v649 + 520 * v647 + 36);
          do
          {
            v656 = *v655;
            v655 += 28;
            v654 = sub_223A4EC9C(v654, ((unint64_t)v656 << 8) | 1, 0xFFu);
            --v653;
          }
          while (v653);
          v657 = v654 >> 8;
          if (!(_BYTE)v654)
            LOBYTE(v657) = -1;
          v45 = a1;
          v447 = v933;
          v652 = v845;
          v651 = v889;
        }
        else
        {
          LOBYTE(v657) = -1;
        }
        *(_BYTE *)(v649 + 520 * v647 + 338) = v657;
      }
      else
      {
        LOBYTE(v657) = *(_BYTE *)(v649 + 520 * v647 + 338);
      }
      v658 = v651 > v652;
    }
    v659 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v591, v648));
    a4.f32[2] = (float)v447;
    v660.i64[0] = 0x3F0000003F000000;
    v660.i64[1] = 0x3F0000003F000000;
    v661 = vmulq_n_f32(vaddq_f32(a4, v660), v659);
    v944 = v661.i32[2];
    v943 = v661.i64[0];
    sub_223FFDF1C(v12[2], &v943, v657, v658, v659);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v662 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v662;
    v13 = **v662;
    v591 = v6 + 1;
    v447 = a2[2] + 7;
  }
  v663 = v10[460];
  if ((v663 & 0x10000000) != 0)
    v664 = 0x40000000;
  else
    v664 = 0x80000000;
  if ((v663 & 0x20000000) != 0)
    v665 = v664;
  else
    v665 = v663 & 0xCFFFFFFF;
  if ((v665 & 0x40000000) == 0)
  {
    v666 = v5 + 4;
    if ((v665 & 0x80000000) != 0)
    {
      LOBYTE(v675) = -1;
      v676 = 2;
    }
    else
    {
      v667 = *(_QWORD *)(v13 + 2448);
      v668 = v667 + 520 * v665;
      v669 = *(_QWORD *)(v668 + 312);
      v670 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v668 + 336))
      {
        *(_BYTE *)(v668 + 336) = 0;
        v671 = *(unsigned int *)(v668 + 4);
        if ((_DWORD)v671)
        {
          v846 = v670;
          v890 = v669;
          v934 = v447;
          v672 = 0;
          v673 = (unsigned __int8 *)(v667 + 520 * v665 + 36);
          do
          {
            v674 = *v673;
            v673 += 28;
            v672 = sub_223A4EC9C(v672, ((unint64_t)v674 << 8) | 1, 0xFFu);
            --v671;
          }
          while (v671);
          v675 = v672 >> 8;
          if (!(_BYTE)v672)
            LOBYTE(v675) = -1;
          v45 = a1;
          v447 = v934;
          v670 = v846;
          v669 = v890;
        }
        else
        {
          LOBYTE(v675) = -1;
        }
        *(_BYTE *)(v667 + 520 * v665 + 338) = v675;
      }
      else
      {
        LOBYTE(v675) = *(_BYTE *)(v667 + 520 * v665 + 338);
      }
      v676 = v669 > v670;
    }
    v677 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v591, v666));
    a4.f32[2] = (float)v447;
    v678.i64[0] = 0x3F0000003F000000;
    v678.i64[1] = 0x3F0000003F000000;
    v679 = vmulq_n_f32(vaddq_f32(a4, v678), v677);
    v944 = v679.i32[2];
    v943 = v679.i64[0];
    sub_223FFDF1C(v12[2], &v943, v675, v676, v677);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v680 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v680;
    v13 = **v680;
    v591 = v6 + 1;
    v447 = a2[2] + 7;
  }
  v681 = v10[461];
  if ((v681 & 0x10000000) != 0)
    v682 = 0x40000000;
  else
    v682 = 0x80000000;
  if ((v681 & 0x20000000) != 0)
    v683 = v682;
  else
    v683 = v681 & 0xCFFFFFFF;
  if ((v683 & 0x40000000) == 0)
  {
    v684 = v5 + 5;
    if ((v683 & 0x80000000) != 0)
    {
      LOBYTE(v693) = -1;
      v694 = 2;
    }
    else
    {
      v685 = *(_QWORD *)(v13 + 2448);
      v686 = v685 + 520 * v683;
      v687 = *(_QWORD *)(v686 + 312);
      v688 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v686 + 336))
      {
        *(_BYTE *)(v686 + 336) = 0;
        v689 = *(unsigned int *)(v686 + 4);
        if ((_DWORD)v689)
        {
          v847 = v688;
          v891 = v687;
          v935 = v447;
          v690 = 0;
          v691 = (unsigned __int8 *)(v685 + 520 * v683 + 36);
          do
          {
            v692 = *v691;
            v691 += 28;
            v690 = sub_223A4EC9C(v690, ((unint64_t)v692 << 8) | 1, 0xFFu);
            --v689;
          }
          while (v689);
          v693 = v690 >> 8;
          if (!(_BYTE)v690)
            LOBYTE(v693) = -1;
          v45 = a1;
          v447 = v935;
          v688 = v847;
          v687 = v891;
        }
        else
        {
          LOBYTE(v693) = -1;
        }
        *(_BYTE *)(v685 + 520 * v683 + 338) = v693;
      }
      else
      {
        LOBYTE(v693) = *(_BYTE *)(v685 + 520 * v683 + 338);
      }
      v694 = v687 > v688;
    }
    v695 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v591, v684));
    a4.f32[2] = (float)v447;
    v696.i64[0] = 0x3F0000003F000000;
    v696.i64[1] = 0x3F0000003F000000;
    v697 = vmulq_n_f32(vaddq_f32(a4, v696), v695);
    v944 = v697.i32[2];
    v943 = v697.i64[0];
    sub_223FFDF1C(v12[2], &v943, v693, v694, v695);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v698 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v698;
    v13 = **v698;
    v591 = v6 + 1;
    v447 = a2[2] + 7;
  }
  v699 = v10[462];
  if ((v699 & 0x10000000) != 0)
    v700 = 0x40000000;
  else
    v700 = 0x80000000;
  if ((v699 & 0x20000000) != 0)
    v701 = v700;
  else
    v701 = v699 & 0xCFFFFFFF;
  if ((v701 & 0x40000000) == 0)
  {
    v702 = v5 + 6;
    if ((v701 & 0x80000000) != 0)
    {
      LOBYTE(v711) = -1;
      v712 = 2;
    }
    else
    {
      v703 = *(_QWORD *)(v13 + 2448);
      v704 = v703 + 520 * v701;
      v705 = *(_QWORD *)(v704 + 312);
      v706 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v704 + 336))
      {
        *(_BYTE *)(v704 + 336) = 0;
        v707 = *(unsigned int *)(v704 + 4);
        if ((_DWORD)v707)
        {
          v848 = v706;
          v892 = v705;
          v936 = v447;
          v708 = 0;
          v709 = (unsigned __int8 *)(v703 + 520 * v701 + 36);
          do
          {
            v710 = *v709;
            v709 += 28;
            v708 = sub_223A4EC9C(v708, ((unint64_t)v710 << 8) | 1, 0xFFu);
            --v707;
          }
          while (v707);
          v711 = v708 >> 8;
          if (!(_BYTE)v708)
            LOBYTE(v711) = -1;
          v45 = a1;
          v447 = v936;
          v706 = v848;
          v705 = v892;
        }
        else
        {
          LOBYTE(v711) = -1;
        }
        *(_BYTE *)(v703 + 520 * v701 + 338) = v711;
      }
      else
      {
        LOBYTE(v711) = *(_BYTE *)(v703 + 520 * v701 + 338);
      }
      v712 = v705 > v706;
    }
    v713 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v591, v702));
    a4.f32[2] = (float)v447;
    v714.i64[0] = 0x3F0000003F000000;
    v714.i64[1] = 0x3F0000003F000000;
    v715 = vmulq_n_f32(vaddq_f32(a4, v714), v713);
    v944 = v715.i32[2];
    v943 = v715.i64[0];
    sub_223FFDF1C(v12[2], &v943, v711, v712, v713);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v716 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v716;
    v13 = **v716;
    v591 = v6 + 1;
    v447 = a2[2] + 7;
  }
  v717 = v10[463];
  if ((v717 & 0x10000000) != 0)
    v718 = 0x40000000;
  else
    v718 = 0x80000000;
  if ((v717 & 0x20000000) != 0)
    v719 = v718;
  else
    v719 = v717 & 0xCFFFFFFF;
  if ((v719 & 0x40000000) == 0)
  {
    v720 = v5 + 7;
    if ((v719 & 0x80000000) != 0)
    {
      LOBYTE(v729) = -1;
      v730 = 2;
    }
    else
    {
      v721 = *(_QWORD *)(v13 + 2448);
      v722 = v721 + 520 * v719;
      v723 = *(_QWORD *)(v722 + 312);
      v724 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v722 + 336))
      {
        *(_BYTE *)(v722 + 336) = 0;
        v725 = *(unsigned int *)(v722 + 4);
        if ((_DWORD)v725)
        {
          v849 = v724;
          v893 = v723;
          v937 = v447;
          v726 = 0;
          v727 = (unsigned __int8 *)(v721 + 520 * v719 + 36);
          do
          {
            v728 = *v727;
            v727 += 28;
            v726 = sub_223A4EC9C(v726, ((unint64_t)v728 << 8) | 1, 0xFFu);
            --v725;
          }
          while (v725);
          v729 = v726 >> 8;
          if (!(_BYTE)v726)
            LOBYTE(v729) = -1;
          v45 = a1;
          v447 = v937;
          v724 = v849;
          v723 = v893;
        }
        else
        {
          LOBYTE(v729) = -1;
        }
        *(_BYTE *)(v721 + 520 * v719 + 338) = v729;
      }
      else
      {
        LOBYTE(v729) = *(_BYTE *)(v721 + 520 * v719 + 338);
      }
      v730 = v723 > v724;
    }
    v731 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v591, v720));
    a4.f32[2] = (float)v447;
    v732.i64[0] = 0x3F0000003F000000;
    v732.i64[1] = 0x3F0000003F000000;
    v733 = vmulq_n_f32(vaddq_f32(a4, v732), v731);
    v944 = v733.i32[2];
    v943 = v733.i64[0];
    sub_223FFDF1C(v12[2], &v943, v729, v730, v731);
    v5 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v734 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v734;
    v13 = **v734;
    v447 = a2[2] + 7;
  }
  v735 = v6 + 2;
  v736 = v10[464];
  if ((v736 & 0x10000000) != 0)
    v737 = 0x40000000;
  else
    v737 = 0x80000000;
  if ((v736 & 0x20000000) != 0)
    v738 = v737;
  else
    v738 = v736 & 0xCFFFFFFF;
  if ((v738 & 0x40000000) == 0)
  {
    if ((v738 & 0x80000000) != 0)
    {
      LOBYTE(v747) = -1;
      v748 = 2;
    }
    else
    {
      v739 = *(_QWORD *)(v13 + 2448);
      v740 = v739 + 520 * v738;
      v741 = *(_QWORD *)(v740 + 312);
      v742 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v740 + 336))
      {
        *(_BYTE *)(v740 + 336) = 0;
        v743 = *(unsigned int *)(v740 + 4);
        if ((_DWORD)v743)
        {
          v850 = v742;
          v894 = v741;
          v938 = v447;
          v744 = 0;
          v745 = (unsigned __int8 *)(v739 + 520 * v738 + 36);
          do
          {
            v746 = *v745;
            v745 += 28;
            v744 = sub_223A4EC9C(v744, ((unint64_t)v746 << 8) | 1, 0xFFu);
            --v743;
          }
          while (v743);
          v747 = v744 >> 8;
          if (!(_BYTE)v744)
            LOBYTE(v747) = -1;
          v45 = a1;
          v447 = v938;
          v742 = v850;
          v741 = v894;
        }
        else
        {
          LOBYTE(v747) = -1;
        }
        *(_BYTE *)(v739 + 520 * v738 + 338) = v747;
      }
      else
      {
        LOBYTE(v747) = *(_BYTE *)(v739 + 520 * v738 + 338);
      }
      v748 = v741 > v742;
    }
    v749 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v735, v5));
    a4.f32[2] = (float)v447;
    v750.i64[0] = 0x3F0000003F000000;
    v750.i64[1] = 0x3F0000003F000000;
    v751 = vmulq_n_f32(vaddq_f32(a4, v750), v749);
    v944 = v751.i32[2];
    v943 = v751.i64[0];
    sub_223FFDF1C(v12[2], &v943, v747, v748, v749);
    v5 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v752 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v752;
    v13 = **v752;
    v735 = a2[1] + 2;
    v447 = a2[2] + 7;
  }
  v753 = v10[465];
  if ((v753 & 0x10000000) != 0)
    v754 = 0x40000000;
  else
    v754 = 0x80000000;
  if ((v753 & 0x20000000) != 0)
    v755 = v754;
  else
    v755 = v753 & 0xCFFFFFFF;
  if ((v755 & 0x40000000) == 0)
  {
    v756 = v5 + 1;
    if ((v755 & 0x80000000) != 0)
    {
      LOBYTE(v765) = -1;
      v766 = 2;
    }
    else
    {
      v757 = *(_QWORD *)(v13 + 2448);
      v758 = v757 + 520 * v755;
      v759 = *(_QWORD *)(v758 + 312);
      v760 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v758 + 336))
      {
        *(_BYTE *)(v758 + 336) = 0;
        v761 = *(unsigned int *)(v758 + 4);
        if ((_DWORD)v761)
        {
          v851 = v760;
          v895 = v759;
          v939 = v447;
          v762 = 0;
          v763 = (unsigned __int8 *)(v757 + 520 * v755 + 36);
          do
          {
            v764 = *v763;
            v763 += 28;
            v762 = sub_223A4EC9C(v762, ((unint64_t)v764 << 8) | 1, 0xFFu);
            --v761;
          }
          while (v761);
          v765 = v762 >> 8;
          if (!(_BYTE)v762)
            LOBYTE(v765) = -1;
          v45 = a1;
          v447 = v939;
          v760 = v851;
          v759 = v895;
        }
        else
        {
          LOBYTE(v765) = -1;
        }
        *(_BYTE *)(v757 + 520 * v755 + 338) = v765;
      }
      else
      {
        LOBYTE(v765) = *(_BYTE *)(v757 + 520 * v755 + 338);
      }
      v766 = v759 > v760;
    }
    v767 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v735, v756));
    a4.f32[2] = (float)v447;
    v768.i64[0] = 0x3F0000003F000000;
    v768.i64[1] = 0x3F0000003F000000;
    v769 = vmulq_n_f32(vaddq_f32(a4, v768), v767);
    v944 = v769.i32[2];
    v943 = v769.i64[0];
    sub_223FFDF1C(v12[2], &v943, v765, v766, v767);
    v5 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v770 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v770;
    v13 = **v770;
    v735 = a2[1] + 2;
    v447 = a2[2] + 7;
  }
  v771 = v10[466];
  if ((v771 & 0x10000000) != 0)
    v772 = 0x40000000;
  else
    v772 = 0x80000000;
  if ((v771 & 0x20000000) != 0)
    v773 = v772;
  else
    v773 = v771 & 0xCFFFFFFF;
  if ((v773 & 0x40000000) == 0)
  {
    v774 = v5 + 2;
    if ((v773 & 0x80000000) != 0)
    {
      LOBYTE(v783) = -1;
      v784 = 2;
    }
    else
    {
      v775 = *(_QWORD *)(v13 + 2448);
      v776 = v775 + 520 * v773;
      v777 = *(_QWORD *)(v776 + 312);
      v778 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v776 + 336))
      {
        *(_BYTE *)(v776 + 336) = 0;
        v779 = *(unsigned int *)(v776 + 4);
        if ((_DWORD)v779)
        {
          v852 = v778;
          v896 = v777;
          v940 = v447;
          v780 = 0;
          v781 = (unsigned __int8 *)(v775 + 520 * v773 + 36);
          do
          {
            v782 = *v781;
            v781 += 28;
            v780 = sub_223A4EC9C(v780, ((unint64_t)v782 << 8) | 1, 0xFFu);
            --v779;
          }
          while (v779);
          v783 = v780 >> 8;
          if (!(_BYTE)v780)
            LOBYTE(v783) = -1;
          v45 = a1;
          v447 = v940;
          v778 = v852;
          v777 = v896;
        }
        else
        {
          LOBYTE(v783) = -1;
        }
        *(_BYTE *)(v775 + 520 * v773 + 338) = v783;
      }
      else
      {
        LOBYTE(v783) = *(_BYTE *)(v775 + 520 * v773 + 338);
      }
      v784 = v777 > v778;
    }
    v785 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v735, v774));
    a4.f32[2] = (float)v447;
    v786.i64[0] = 0x3F0000003F000000;
    v786.i64[1] = 0x3F0000003F000000;
    v787 = vmulq_n_f32(vaddq_f32(a4, v786), v785);
    v944 = v787.i32[2];
    v943 = v787.i64[0];
    sub_223FFDF1C(v12[2], &v943, v783, v784, v785);
    v5 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v45 + 8);
    v788 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v45 + 16) + 8);
    v12 = *v788;
    v13 = **v788;
    v735 = a2[1] + 2;
    v447 = a2[2] + 7;
  }
  v789 = v10[467];
  if ((v789 & 0x10000000) != 0)
    v790 = 0x40000000;
  else
    v790 = 0x80000000;
  if ((v789 & 0x20000000) != 0)
    v791 = v790;
  else
    v791 = v789 & 0xCFFFFFFF;
  if ((v791 & 0x40000000) == 0)
  {
    v792 = v5 + 3;
    if ((v791 & 0x80000000) != 0)
    {
      LOBYTE(v801) = -1;
      v802 = 2;
    }
    else
    {
      v793 = *(_QWORD *)(v13 + 2448);
      v794 = v793 + 520 * v791;
      v795 = *(_QWORD *)(v794 + 312);
      v796 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v794 + 336))
      {
        *(_BYTE *)(v794 + 336) = 0;
        v797 = *(unsigned int *)(v794 + 4);
        if ((_DWORD)v797)
        {
          v853 = v796;
          v897 = v795;
          v941 = v447;
          v798 = 0;
          v799 = (unsigned __int8 *)(v793 + 520 * v791 + 36);
          do
          {
            v800 = *v799;
            v799 += 28;
            v798 = sub_223A4EC9C(v798, ((unint64_t)v800 << 8) | 1, 0xFFu);
            --v797;
          }
          while (v797);
          v801 = v798 >> 8;
          if (!(_BYTE)v798)
            LOBYTE(v801) = -1;
          v45 = a1;
          v447 = v941;
          v796 = v853;
          v795 = v897;
        }
        else
        {
          LOBYTE(v801) = -1;
        }
        *(_BYTE *)(v793 + 520 * v791 + 338) = v801;
      }
      else
      {
        LOBYTE(v801) = *(_BYTE *)(v793 + 520 * v791 + 338);
      }
      v802 = v795 > v796;
    }
    v803 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v735, v792));
    a4.f32[2] = (float)v447;
    v804.i64[0] = 0x3F0000003F000000;
    v804.i64[1] = 0x3F0000003F000000;
    v805 = vmulq_n_f32(vaddq_f32(a4, v804), v803);
    v944 = v805.i32[2];
    v943 = v805.i64[0];
    sub_223FFDF1C(v12[2], &v943, v801, v802, v803);
  }
  sub_223D816F0(v45, a2, a3, a4);
}

void sub_223D816F0(uint64_t a1, unsigned int *a2, double a3, float32x4_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t **v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  float v45;
  float32x4_t v46;
  float32x4_t v47;
  uint64_t **v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t **v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  float v81;
  float32x4_t v82;
  float32x4_t v83;
  uint64_t **v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unint64_t v97;
  int v98;
  float v99;
  float32x4_t v100;
  float32x4_t v101;
  uint64_t **v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned __int8 *v113;
  unsigned int v114;
  unint64_t v115;
  int v116;
  float v117;
  float32x4_t v118;
  float32x4_t v119;
  uint64_t **v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unsigned __int8 *v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  float v135;
  float32x4_t v136;
  float32x4_t v137;
  uint64_t **v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unsigned __int8 *v149;
  unsigned int v150;
  unint64_t v151;
  int v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  uint64_t **v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unsigned __int8 *v167;
  unsigned int v168;
  unint64_t v169;
  int v170;
  float v171;
  float32x4_t v172;
  float32x4_t v173;
  uint64_t **v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unsigned __int8 *v185;
  unsigned int v186;
  unint64_t v187;
  int v188;
  float v189;
  float32x4_t v190;
  float32x4_t v191;
  uint64_t **v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unsigned __int8 *v203;
  unsigned int v204;
  unint64_t v205;
  int v206;
  float v207;
  float32x4_t v208;
  float32x4_t v209;
  uint64_t **v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unsigned __int8 *v221;
  unsigned int v222;
  unint64_t v223;
  int v224;
  float v225;
  float32x4_t v226;
  float32x4_t v227;
  uint64_t **v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unsigned __int8 *v239;
  unsigned int v240;
  unint64_t v241;
  int v242;
  float v243;
  float32x4_t v244;
  float32x4_t v245;
  uint64_t **v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unsigned __int8 *v257;
  unsigned int v258;
  unint64_t v259;
  int v260;
  float v261;
  float32x4_t v262;
  float32x4_t v263;
  uint64_t **v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unsigned __int8 *v275;
  unsigned int v276;
  unint64_t v277;
  int v278;
  float v279;
  float32x4_t v280;
  float32x4_t v281;
  uint64_t **v282;
  int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unsigned __int8 *v293;
  unsigned int v294;
  unint64_t v295;
  int v296;
  float v297;
  float32x4_t v298;
  float32x4_t v299;
  uint64_t **v300;
  int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unsigned __int8 *v311;
  unsigned int v312;
  unint64_t v313;
  int v314;
  float v315;
  float32x4_t v316;
  float32x4_t v317;
  uint64_t **v318;
  int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unsigned __int8 *v329;
  unsigned int v330;
  unint64_t v331;
  int v332;
  float v333;
  float32x4_t v334;
  float32x4_t v335;
  uint64_t **v336;
  int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unsigned __int8 *v347;
  unsigned int v348;
  unint64_t v349;
  int v350;
  float v351;
  float32x4_t v352;
  float32x4_t v353;
  uint64_t **v354;
  int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unsigned __int8 *v365;
  unsigned int v366;
  unint64_t v367;
  int v368;
  float v369;
  float32x4_t v370;
  float32x4_t v371;
  uint64_t **v372;
  unsigned int v373;
  int v374;
  unsigned int v375;
  unsigned int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unsigned __int8 *v383;
  unsigned int v384;
  unint64_t v385;
  int v386;
  float v387;
  float32x4_t v388;
  float32x4_t v389;
  uint64_t **v390;
  int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unsigned __int8 *v401;
  unsigned int v402;
  unint64_t v403;
  int v404;
  float v405;
  float32x4_t v406;
  float32x4_t v407;
  uint64_t **v408;
  int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unsigned __int8 *v419;
  unsigned int v420;
  unint64_t v421;
  int v422;
  float v423;
  float32x4_t v424;
  float32x4_t v425;
  uint64_t **v426;
  int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  unsigned __int8 *v437;
  unsigned int v438;
  unint64_t v439;
  int v440;
  float v441;
  float32x4_t v442;
  float32x4_t v443;
  uint64_t **v444;
  int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unsigned __int8 *v455;
  unsigned int v456;
  unint64_t v457;
  int v458;
  float v459;
  float32x4_t v460;
  float32x4_t v461;
  uint64_t **v462;
  int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unsigned __int8 *v473;
  unsigned int v474;
  unint64_t v475;
  int v476;
  float v477;
  float32x4_t v478;
  float32x4_t v479;
  uint64_t **v480;
  int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unsigned __int8 *v491;
  unsigned int v492;
  unint64_t v493;
  int v494;
  float v495;
  float32x4_t v496;
  float32x4_t v497;
  uint64_t **v498;
  int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unsigned __int8 *v509;
  unsigned int v510;
  unint64_t v511;
  int v512;
  float v513;
  float32x4_t v514;
  float32x4_t v515;
  uint64_t **v516;
  unsigned int v517;
  int v518;
  unsigned int v519;
  unsigned int v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unsigned __int8 *v527;
  unsigned int v528;
  unint64_t v529;
  int v530;
  float v531;
  float32x4_t v532;
  float32x4_t v533;
  uint64_t **v534;
  int v535;
  unsigned int v536;
  unsigned int v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  unsigned __int8 *v545;
  unsigned int v546;
  unint64_t v547;
  int v548;
  float v549;
  float32x4_t v550;
  float32x4_t v551;
  uint64_t **v552;
  int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  unsigned __int8 *v563;
  unsigned int v564;
  unint64_t v565;
  int v566;
  float v567;
  float32x4_t v568;
  float32x4_t v569;
  uint64_t **v570;
  int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unsigned __int8 *v581;
  unsigned int v582;
  unint64_t v583;
  int v584;
  float v585;
  float32x4_t v586;
  float32x4_t v587;
  uint64_t **v588;
  int v589;
  unsigned int v590;
  unsigned int v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  unsigned __int8 *v599;
  unsigned int v600;
  unint64_t v601;
  int v602;
  float v603;
  float32x4_t v604;
  float32x4_t v605;
  uint64_t **v606;
  int v607;
  unsigned int v608;
  unsigned int v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  unsigned __int8 *v617;
  unsigned int v618;
  unint64_t v619;
  int v620;
  float v621;
  float32x4_t v622;
  float32x4_t v623;
  uint64_t **v624;
  int v625;
  unsigned int v626;
  unsigned int v627;
  unsigned int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  unsigned __int8 *v635;
  unsigned int v636;
  unint64_t v637;
  int v638;
  float v639;
  float32x4_t v640;
  float32x4_t v641;
  uint64_t **v642;
  int v643;
  unsigned int v644;
  unsigned int v645;
  unsigned int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unsigned __int8 *v653;
  unsigned int v654;
  unint64_t v655;
  int v656;
  float v657;
  float32x4_t v658;
  float32x4_t v659;
  uint64_t **v660;
  int v661;
  int v662;
  unsigned int v663;
  unsigned int v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unsigned __int8 *v671;
  unsigned int v672;
  unint64_t v673;
  int v674;
  float v675;
  float32x4_t v676;
  float32x4_t v677;
  uint64_t **v678;
  int v679;
  unsigned int v680;
  unsigned int v681;
  unsigned int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t v688;
  unsigned __int8 *v689;
  unsigned int v690;
  unint64_t v691;
  int v692;
  float v693;
  float32x4_t v694;
  float32x4_t v695;
  uint64_t **v696;
  int v697;
  unsigned int v698;
  unsigned int v699;
  unsigned int v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  unsigned __int8 *v707;
  unsigned int v708;
  unint64_t v709;
  int v710;
  float v711;
  float32x4_t v712;
  float32x4_t v713;
  uint64_t **v714;
  int v715;
  unsigned int v716;
  unsigned int v717;
  unsigned int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  unsigned __int8 *v725;
  unsigned int v726;
  unint64_t v727;
  int v728;
  float v729;
  float32x4_t v730;
  float32x4_t v731;
  uint64_t **v732;
  int v733;
  unsigned int v734;
  unsigned int v735;
  unsigned int v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  unsigned __int8 *v743;
  unsigned int v744;
  unint64_t v745;
  int v746;
  float v747;
  float32x4_t v748;
  float32x4_t v749;
  uint64_t **v750;
  int v751;
  unsigned int v752;
  unsigned int v753;
  unsigned int v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unint64_t v760;
  unsigned __int8 *v761;
  unsigned int v762;
  unint64_t v763;
  int v764;
  float v765;
  float32x4_t v766;
  float32x4_t v767;
  uint64_t **v768;
  int v769;
  unsigned int v770;
  unsigned int v771;
  unsigned int v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  unsigned __int8 *v779;
  unsigned int v780;
  unint64_t v781;
  int v782;
  float v783;
  float32x4_t v784;
  float32x4_t v785;
  uint64_t **v786;
  int v787;
  unsigned int v788;
  unsigned int v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  unsigned __int8 *v796;
  unsigned int v797;
  unint64_t v798;
  int v799;
  float v800;
  float32x4_t v801;
  float32x4_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v890;
  int v891;
  int v892;
  int v893;
  int v894;
  int v895;
  int v896;
  int v897;
  int v898;
  int v899;
  int v900;
  int v901;
  int v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  int v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  int v917;
  int v918;
  int v919;
  int v920;
  int v921;
  int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  int v931;
  int v932;
  int v933;
  int v934;
  uint64_t v935;
  __int32 v936;

  v5 = a1;
  v7 = *a2;
  v6 = a2[1];
  v8 = v6 + 2;
  v9 = a2[2] + 7;
  v10 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v11 = v10[468];
  v12 = **(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  v13 = *v12;
  if ((v11 & 0x10000000) != 0)
    v14 = 0x40000000;
  else
    v14 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v15 = v14;
  else
    v15 = v11 & 0xCFFFFFFF;
  if ((v15 & 0x40000000) == 0)
  {
    v16 = v7 + 4;
    if ((v15 & 0x80000000) != 0)
    {
      LOBYTE(v25) = -1;
      v26 = 2;
    }
    else
    {
      v17 = *(_QWORD *)(v13 + 2448);
      v18 = v17 + 520 * v15;
      v19 = *(_QWORD *)(v18 + 312);
      v20 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v18 + 336))
      {
        *(_BYTE *)(v18 + 336) = 0;
        v21 = *(unsigned int *)(v18 + 4);
        if ((_DWORD)v21)
        {
          v803 = v20;
          v846 = v19;
          v891 = v9;
          v22 = 0;
          v23 = (unsigned __int8 *)(v17 + 520 * v15 + 36);
          do
          {
            v24 = *v23;
            v23 += 28;
            v22 = sub_223A4EC9C(v22, ((unint64_t)v24 << 8) | 1, 0xFFu);
            --v21;
          }
          while (v21);
          v25 = v22 >> 8;
          if (!(_BYTE)v22)
            LOBYTE(v25) = -1;
          v19 = v846;
          v5 = a1;
          v9 = v891;
          v20 = v803;
        }
        else
        {
          LOBYTE(v25) = -1;
        }
        *(_BYTE *)(v17 + 520 * v15 + 338) = v25;
      }
      else
      {
        LOBYTE(v25) = *(_BYTE *)(v17 + 520 * v15 + 338);
      }
      v26 = v19 > v20;
    }
    a4.f32[0] = (float)v16;
    a4.f32[1] = (float)v8;
    v27 = *(float *)(v13 + 144);
    a4.f32[2] = (float)v9;
    v28.i64[0] = 0x3F0000003F000000;
    v28.i64[1] = 0x3F0000003F000000;
    v29 = vmulq_n_f32(vaddq_f32(a4, v28), v27);
    v936 = v29.i32[2];
    v935 = v29.i64[0];
    sub_223FFDF1C(v12[2], &v935, v25, v26, v27);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v30 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v30;
    v13 = **v30;
    v8 = v6 + 2;
    v9 = a2[2] + 7;
  }
  v31 = v10[469];
  if ((v31 & 0x10000000) != 0)
    v32 = 0x40000000;
  else
    v32 = 0x80000000;
  if ((v31 & 0x20000000) != 0)
    v33 = v32;
  else
    v33 = v31 & 0xCFFFFFFF;
  if ((v33 & 0x40000000) == 0)
  {
    v34 = v7 + 5;
    if ((v33 & 0x80000000) != 0)
    {
      LOBYTE(v43) = -1;
      v44 = 2;
    }
    else
    {
      v35 = *(_QWORD *)(v13 + 2448);
      v36 = v35 + 520 * v33;
      v37 = *(_QWORD *)(v36 + 312);
      v38 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v36 + 336))
      {
        *(_BYTE *)(v36 + 336) = 0;
        v39 = *(unsigned int *)(v36 + 4);
        if ((_DWORD)v39)
        {
          v804 = v38;
          v847 = v37;
          v892 = v9;
          v40 = 0;
          v41 = (unsigned __int8 *)(v35 + 520 * v33 + 36);
          do
          {
            v42 = *v41;
            v41 += 28;
            v40 = sub_223A4EC9C(v40, ((unint64_t)v42 << 8) | 1, 0xFFu);
            --v39;
          }
          while (v39);
          v43 = v40 >> 8;
          if (!(_BYTE)v40)
            LOBYTE(v43) = -1;
          v37 = v847;
          v5 = a1;
          v9 = v892;
          v38 = v804;
        }
        else
        {
          LOBYTE(v43) = -1;
        }
        *(_BYTE *)(v35 + 520 * v33 + 338) = v43;
      }
      else
      {
        LOBYTE(v43) = *(_BYTE *)(v35 + 520 * v33 + 338);
      }
      v44 = v37 > v38;
    }
    v45 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v34));
    a4.f32[2] = (float)v9;
    v46.i64[0] = 0x3F0000003F000000;
    v46.i64[1] = 0x3F0000003F000000;
    v47 = vmulq_n_f32(vaddq_f32(a4, v46), v45);
    v936 = v47.i32[2];
    v935 = v47.i64[0];
    sub_223FFDF1C(v12[2], &v935, v43, v44, v45);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v48 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v48;
    v13 = **v48;
    v8 = v6 + 2;
    v9 = a2[2] + 7;
  }
  v49 = v10[470];
  if ((v49 & 0x10000000) != 0)
    v50 = 0x40000000;
  else
    v50 = 0x80000000;
  if ((v49 & 0x20000000) != 0)
    v51 = v50;
  else
    v51 = v49 & 0xCFFFFFFF;
  if ((v51 & 0x40000000) == 0)
  {
    v52 = v7 + 6;
    if ((v51 & 0x80000000) != 0)
    {
      LOBYTE(v61) = -1;
      v62 = 2;
    }
    else
    {
      v53 = *(_QWORD *)(v13 + 2448);
      v54 = v53 + 520 * v51;
      v55 = *(_QWORD *)(v54 + 312);
      v56 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v54 + 336))
      {
        *(_BYTE *)(v54 + 336) = 0;
        v57 = *(unsigned int *)(v54 + 4);
        if ((_DWORD)v57)
        {
          v805 = v56;
          v848 = v55;
          v893 = v9;
          v58 = 0;
          v59 = (unsigned __int8 *)(v53 + 520 * v51 + 36);
          do
          {
            v60 = *v59;
            v59 += 28;
            v58 = sub_223A4EC9C(v58, ((unint64_t)v60 << 8) | 1, 0xFFu);
            --v57;
          }
          while (v57);
          v61 = v58 >> 8;
          if (!(_BYTE)v58)
            LOBYTE(v61) = -1;
          v55 = v848;
          v5 = a1;
          v9 = v893;
          v56 = v805;
        }
        else
        {
          LOBYTE(v61) = -1;
        }
        *(_BYTE *)(v53 + 520 * v51 + 338) = v61;
      }
      else
      {
        LOBYTE(v61) = *(_BYTE *)(v53 + 520 * v51 + 338);
      }
      v62 = v55 > v56;
    }
    v63 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v52));
    a4.f32[2] = (float)v9;
    v64.i64[0] = 0x3F0000003F000000;
    v64.i64[1] = 0x3F0000003F000000;
    v65 = vmulq_n_f32(vaddq_f32(a4, v64), v63);
    v936 = v65.i32[2];
    v935 = v65.i64[0];
    sub_223FFDF1C(v12[2], &v935, v61, v62, v63);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v66 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v66;
    v13 = **v66;
    v8 = v6 + 2;
    v9 = a2[2] + 7;
  }
  v67 = v10[471];
  if ((v67 & 0x10000000) != 0)
    v68 = 0x40000000;
  else
    v68 = 0x80000000;
  if ((v67 & 0x20000000) != 0)
    v69 = v68;
  else
    v69 = v67 & 0xCFFFFFFF;
  if ((v69 & 0x40000000) == 0)
  {
    v70 = v7 + 7;
    if ((v69 & 0x80000000) != 0)
    {
      LOBYTE(v79) = -1;
      v80 = 2;
    }
    else
    {
      v71 = *(_QWORD *)(v13 + 2448);
      v72 = v71 + 520 * v69;
      v73 = *(_QWORD *)(v72 + 312);
      v74 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v72 + 336))
      {
        *(_BYTE *)(v72 + 336) = 0;
        v75 = *(unsigned int *)(v72 + 4);
        if ((_DWORD)v75)
        {
          v806 = v74;
          v849 = v73;
          v894 = v9;
          v76 = 0;
          v77 = (unsigned __int8 *)(v71 + 520 * v69 + 36);
          do
          {
            v78 = *v77;
            v77 += 28;
            v76 = sub_223A4EC9C(v76, ((unint64_t)v78 << 8) | 1, 0xFFu);
            --v75;
          }
          while (v75);
          v79 = v76 >> 8;
          if (!(_BYTE)v76)
            LOBYTE(v79) = -1;
          v73 = v849;
          v5 = a1;
          v9 = v894;
          v74 = v806;
        }
        else
        {
          LOBYTE(v79) = -1;
        }
        *(_BYTE *)(v71 + 520 * v69 + 338) = v79;
      }
      else
      {
        LOBYTE(v79) = *(_BYTE *)(v71 + 520 * v69 + 338);
      }
      v80 = v73 > v74;
    }
    v81 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v8, v70));
    a4.f32[2] = (float)v9;
    v82.i64[0] = 0x3F0000003F000000;
    v82.i64[1] = 0x3F0000003F000000;
    v83 = vmulq_n_f32(vaddq_f32(a4, v82), v81);
    v936 = v83.i32[2];
    v935 = v83.i64[0];
    sub_223FFDF1C(v12[2], &v935, v79, v80, v81);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v84 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v84;
    v13 = **v84;
    v9 = a2[2] + 7;
  }
  v85 = v6 + 3;
  v86 = v10[472];
  if ((v86 & 0x10000000) != 0)
    v87 = 0x40000000;
  else
    v87 = 0x80000000;
  if ((v86 & 0x20000000) != 0)
    v88 = v87;
  else
    v88 = v86 & 0xCFFFFFFF;
  if ((v88 & 0x40000000) == 0)
  {
    if ((v88 & 0x80000000) != 0)
    {
      LOBYTE(v97) = -1;
      v98 = 2;
    }
    else
    {
      v89 = *(_QWORD *)(v13 + 2448);
      v90 = v89 + 520 * v88;
      v91 = *(_QWORD *)(v90 + 312);
      v92 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v90 + 336))
      {
        *(_BYTE *)(v90 + 336) = 0;
        v93 = *(unsigned int *)(v90 + 4);
        if ((_DWORD)v93)
        {
          v807 = v92;
          v850 = v91;
          v895 = v9;
          v94 = 0;
          v95 = (unsigned __int8 *)(v89 + 520 * v88 + 36);
          do
          {
            v96 = *v95;
            v95 += 28;
            v94 = sub_223A4EC9C(v94, ((unint64_t)v96 << 8) | 1, 0xFFu);
            --v93;
          }
          while (v93);
          v97 = v94 >> 8;
          if (!(_BYTE)v94)
            LOBYTE(v97) = -1;
          v91 = v850;
          v5 = a1;
          v9 = v895;
          v92 = v807;
        }
        else
        {
          LOBYTE(v97) = -1;
        }
        *(_BYTE *)(v89 + 520 * v88 + 338) = v97;
      }
      else
      {
        LOBYTE(v97) = *(_BYTE *)(v89 + 520 * v88 + 338);
      }
      v98 = v91 > v92;
    }
    v99 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v7));
    a4.f32[2] = (float)v9;
    v100.i64[0] = 0x3F0000003F000000;
    v100.i64[1] = 0x3F0000003F000000;
    v101 = vmulq_n_f32(vaddq_f32(a4, v100), v99);
    v936 = v101.i32[2];
    v935 = v101.i64[0];
    sub_223FFDF1C(v12[2], &v935, v97, v98, v99);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v102 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v102;
    v13 = **v102;
    v85 = v6 + 3;
    v9 = a2[2] + 7;
  }
  v103 = v10[473];
  if ((v103 & 0x10000000) != 0)
    v104 = 0x40000000;
  else
    v104 = 0x80000000;
  if ((v103 & 0x20000000) != 0)
    v105 = v104;
  else
    v105 = v103 & 0xCFFFFFFF;
  if ((v105 & 0x40000000) == 0)
  {
    v106 = v7 + 1;
    if ((v105 & 0x80000000) != 0)
    {
      LOBYTE(v115) = -1;
      v116 = 2;
    }
    else
    {
      v107 = *(_QWORD *)(v13 + 2448);
      v108 = v107 + 520 * v105;
      v109 = *(_QWORD *)(v108 + 312);
      v110 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v108 + 336))
      {
        *(_BYTE *)(v108 + 336) = 0;
        v111 = *(unsigned int *)(v108 + 4);
        if ((_DWORD)v111)
        {
          v808 = v110;
          v851 = v109;
          v896 = v9;
          v112 = 0;
          v113 = (unsigned __int8 *)(v107 + 520 * v105 + 36);
          do
          {
            v114 = *v113;
            v113 += 28;
            v112 = sub_223A4EC9C(v112, ((unint64_t)v114 << 8) | 1, 0xFFu);
            --v111;
          }
          while (v111);
          v115 = v112 >> 8;
          if (!(_BYTE)v112)
            LOBYTE(v115) = -1;
          v109 = v851;
          v5 = a1;
          v9 = v896;
          v110 = v808;
        }
        else
        {
          LOBYTE(v115) = -1;
        }
        *(_BYTE *)(v107 + 520 * v105 + 338) = v115;
      }
      else
      {
        LOBYTE(v115) = *(_BYTE *)(v107 + 520 * v105 + 338);
      }
      v116 = v109 > v110;
    }
    v117 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v106));
    a4.f32[2] = (float)v9;
    v118.i64[0] = 0x3F0000003F000000;
    v118.i64[1] = 0x3F0000003F000000;
    v119 = vmulq_n_f32(vaddq_f32(a4, v118), v117);
    v936 = v119.i32[2];
    v935 = v119.i64[0];
    sub_223FFDF1C(v12[2], &v935, v115, v116, v117);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v120 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v120;
    v13 = **v120;
    v85 = v6 + 3;
    v9 = a2[2] + 7;
  }
  v121 = v10[474];
  if ((v121 & 0x10000000) != 0)
    v122 = 0x40000000;
  else
    v122 = 0x80000000;
  if ((v121 & 0x20000000) != 0)
    v123 = v122;
  else
    v123 = v121 & 0xCFFFFFFF;
  if ((v123 & 0x40000000) == 0)
  {
    v124 = v7 + 2;
    if ((v123 & 0x80000000) != 0)
    {
      LOBYTE(v133) = -1;
      v134 = 2;
    }
    else
    {
      v125 = *(_QWORD *)(v13 + 2448);
      v126 = v125 + 520 * v123;
      v127 = *(_QWORD *)(v126 + 312);
      v128 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v126 + 336))
      {
        *(_BYTE *)(v126 + 336) = 0;
        v129 = *(unsigned int *)(v126 + 4);
        if ((_DWORD)v129)
        {
          v809 = v128;
          v852 = v127;
          v897 = v9;
          v130 = 0;
          v131 = (unsigned __int8 *)(v125 + 520 * v123 + 36);
          do
          {
            v132 = *v131;
            v131 += 28;
            v130 = sub_223A4EC9C(v130, ((unint64_t)v132 << 8) | 1, 0xFFu);
            --v129;
          }
          while (v129);
          v133 = v130 >> 8;
          if (!(_BYTE)v130)
            LOBYTE(v133) = -1;
          v127 = v852;
          v5 = a1;
          v9 = v897;
          v128 = v809;
        }
        else
        {
          LOBYTE(v133) = -1;
        }
        *(_BYTE *)(v125 + 520 * v123 + 338) = v133;
      }
      else
      {
        LOBYTE(v133) = *(_BYTE *)(v125 + 520 * v123 + 338);
      }
      v134 = v127 > v128;
    }
    v135 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v124));
    a4.f32[2] = (float)v9;
    v136.i64[0] = 0x3F0000003F000000;
    v136.i64[1] = 0x3F0000003F000000;
    v137 = vmulq_n_f32(vaddq_f32(a4, v136), v135);
    v936 = v137.i32[2];
    v935 = v137.i64[0];
    sub_223FFDF1C(v12[2], &v935, v133, v134, v135);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v138 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v138;
    v13 = **v138;
    v85 = v6 + 3;
    v9 = a2[2] + 7;
  }
  v139 = v10[475];
  if ((v139 & 0x10000000) != 0)
    v140 = 0x40000000;
  else
    v140 = 0x80000000;
  if ((v139 & 0x20000000) != 0)
    v141 = v140;
  else
    v141 = v139 & 0xCFFFFFFF;
  if ((v141 & 0x40000000) == 0)
  {
    v142 = v7 + 3;
    if ((v141 & 0x80000000) != 0)
    {
      LOBYTE(v151) = -1;
      v152 = 2;
    }
    else
    {
      v143 = *(_QWORD *)(v13 + 2448);
      v144 = v143 + 520 * v141;
      v145 = *(_QWORD *)(v144 + 312);
      v146 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v144 + 336))
      {
        *(_BYTE *)(v144 + 336) = 0;
        v147 = *(unsigned int *)(v144 + 4);
        if ((_DWORD)v147)
        {
          v810 = v146;
          v853 = v145;
          v898 = v9;
          v148 = 0;
          v149 = (unsigned __int8 *)(v143 + 520 * v141 + 36);
          do
          {
            v150 = *v149;
            v149 += 28;
            v148 = sub_223A4EC9C(v148, ((unint64_t)v150 << 8) | 1, 0xFFu);
            --v147;
          }
          while (v147);
          v151 = v148 >> 8;
          if (!(_BYTE)v148)
            LOBYTE(v151) = -1;
          v145 = v853;
          v5 = a1;
          v9 = v898;
          v146 = v810;
        }
        else
        {
          LOBYTE(v151) = -1;
        }
        *(_BYTE *)(v143 + 520 * v141 + 338) = v151;
      }
      else
      {
        LOBYTE(v151) = *(_BYTE *)(v143 + 520 * v141 + 338);
      }
      v152 = v145 > v146;
    }
    v153 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v142));
    a4.f32[2] = (float)v9;
    v154.i64[0] = 0x3F0000003F000000;
    v154.i64[1] = 0x3F0000003F000000;
    v155 = vmulq_n_f32(vaddq_f32(a4, v154), v153);
    v936 = v155.i32[2];
    v935 = v155.i64[0];
    sub_223FFDF1C(v12[2], &v935, v151, v152, v153);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v156 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v156;
    v13 = **v156;
    v85 = v6 + 3;
    v9 = a2[2] + 7;
  }
  v157 = v10[476];
  if ((v157 & 0x10000000) != 0)
    v158 = 0x40000000;
  else
    v158 = 0x80000000;
  if ((v157 & 0x20000000) != 0)
    v159 = v158;
  else
    v159 = v157 & 0xCFFFFFFF;
  if ((v159 & 0x40000000) == 0)
  {
    v160 = v7 + 4;
    if ((v159 & 0x80000000) != 0)
    {
      LOBYTE(v169) = -1;
      v170 = 2;
    }
    else
    {
      v161 = *(_QWORD *)(v13 + 2448);
      v162 = v161 + 520 * v159;
      v163 = *(_QWORD *)(v162 + 312);
      v164 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v162 + 336))
      {
        *(_BYTE *)(v162 + 336) = 0;
        v165 = *(unsigned int *)(v162 + 4);
        if ((_DWORD)v165)
        {
          v811 = v164;
          v854 = v163;
          v899 = v9;
          v166 = 0;
          v167 = (unsigned __int8 *)(v161 + 520 * v159 + 36);
          do
          {
            v168 = *v167;
            v167 += 28;
            v166 = sub_223A4EC9C(v166, ((unint64_t)v168 << 8) | 1, 0xFFu);
            --v165;
          }
          while (v165);
          v169 = v166 >> 8;
          if (!(_BYTE)v166)
            LOBYTE(v169) = -1;
          v163 = v854;
          v5 = a1;
          v9 = v899;
          v164 = v811;
        }
        else
        {
          LOBYTE(v169) = -1;
        }
        *(_BYTE *)(v161 + 520 * v159 + 338) = v169;
      }
      else
      {
        LOBYTE(v169) = *(_BYTE *)(v161 + 520 * v159 + 338);
      }
      v170 = v163 > v164;
    }
    v171 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v160));
    a4.f32[2] = (float)v9;
    v172.i64[0] = 0x3F0000003F000000;
    v172.i64[1] = 0x3F0000003F000000;
    v173 = vmulq_n_f32(vaddq_f32(a4, v172), v171);
    v936 = v173.i32[2];
    v935 = v173.i64[0];
    sub_223FFDF1C(v12[2], &v935, v169, v170, v171);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v174 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v174;
    v13 = **v174;
    v85 = v6 + 3;
    v9 = a2[2] + 7;
  }
  v175 = v10[477];
  if ((v175 & 0x10000000) != 0)
    v176 = 0x40000000;
  else
    v176 = 0x80000000;
  if ((v175 & 0x20000000) != 0)
    v177 = v176;
  else
    v177 = v175 & 0xCFFFFFFF;
  if ((v177 & 0x40000000) == 0)
  {
    v178 = v7 + 5;
    if ((v177 & 0x80000000) != 0)
    {
      LOBYTE(v187) = -1;
      v188 = 2;
    }
    else
    {
      v179 = *(_QWORD *)(v13 + 2448);
      v180 = v179 + 520 * v177;
      v181 = *(_QWORD *)(v180 + 312);
      v182 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v180 + 336))
      {
        *(_BYTE *)(v180 + 336) = 0;
        v183 = *(unsigned int *)(v180 + 4);
        if ((_DWORD)v183)
        {
          v812 = v182;
          v855 = v181;
          v900 = v9;
          v184 = 0;
          v185 = (unsigned __int8 *)(v179 + 520 * v177 + 36);
          do
          {
            v186 = *v185;
            v185 += 28;
            v184 = sub_223A4EC9C(v184, ((unint64_t)v186 << 8) | 1, 0xFFu);
            --v183;
          }
          while (v183);
          v187 = v184 >> 8;
          if (!(_BYTE)v184)
            LOBYTE(v187) = -1;
          v181 = v855;
          v5 = a1;
          v9 = v900;
          v182 = v812;
        }
        else
        {
          LOBYTE(v187) = -1;
        }
        *(_BYTE *)(v179 + 520 * v177 + 338) = v187;
      }
      else
      {
        LOBYTE(v187) = *(_BYTE *)(v179 + 520 * v177 + 338);
      }
      v188 = v181 > v182;
    }
    v189 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v178));
    a4.f32[2] = (float)v9;
    v190.i64[0] = 0x3F0000003F000000;
    v190.i64[1] = 0x3F0000003F000000;
    v191 = vmulq_n_f32(vaddq_f32(a4, v190), v189);
    v936 = v191.i32[2];
    v935 = v191.i64[0];
    sub_223FFDF1C(v12[2], &v935, v187, v188, v189);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v192 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v192;
    v13 = **v192;
    v85 = v6 + 3;
    v9 = a2[2] + 7;
  }
  v193 = v10[478];
  if ((v193 & 0x10000000) != 0)
    v194 = 0x40000000;
  else
    v194 = 0x80000000;
  if ((v193 & 0x20000000) != 0)
    v195 = v194;
  else
    v195 = v193 & 0xCFFFFFFF;
  if ((v195 & 0x40000000) == 0)
  {
    v196 = v7 + 6;
    if ((v195 & 0x80000000) != 0)
    {
      LOBYTE(v205) = -1;
      v206 = 2;
    }
    else
    {
      v197 = *(_QWORD *)(v13 + 2448);
      v198 = v197 + 520 * v195;
      v199 = *(_QWORD *)(v198 + 312);
      v200 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v198 + 336))
      {
        *(_BYTE *)(v198 + 336) = 0;
        v201 = *(unsigned int *)(v198 + 4);
        if ((_DWORD)v201)
        {
          v813 = v200;
          v856 = v199;
          v901 = v9;
          v202 = 0;
          v203 = (unsigned __int8 *)(v197 + 520 * v195 + 36);
          do
          {
            v204 = *v203;
            v203 += 28;
            v202 = sub_223A4EC9C(v202, ((unint64_t)v204 << 8) | 1, 0xFFu);
            --v201;
          }
          while (v201);
          v205 = v202 >> 8;
          if (!(_BYTE)v202)
            LOBYTE(v205) = -1;
          v199 = v856;
          v5 = a1;
          v9 = v901;
          v200 = v813;
        }
        else
        {
          LOBYTE(v205) = -1;
        }
        *(_BYTE *)(v197 + 520 * v195 + 338) = v205;
      }
      else
      {
        LOBYTE(v205) = *(_BYTE *)(v197 + 520 * v195 + 338);
      }
      v206 = v199 > v200;
    }
    v207 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v196));
    a4.f32[2] = (float)v9;
    v208.i64[0] = 0x3F0000003F000000;
    v208.i64[1] = 0x3F0000003F000000;
    v209 = vmulq_n_f32(vaddq_f32(a4, v208), v207);
    v936 = v209.i32[2];
    v935 = v209.i64[0];
    sub_223FFDF1C(v12[2], &v935, v205, v206, v207);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v210 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v210;
    v13 = **v210;
    v85 = v6 + 3;
    v9 = a2[2] + 7;
  }
  v211 = v10[479];
  if ((v211 & 0x10000000) != 0)
    v212 = 0x40000000;
  else
    v212 = 0x80000000;
  if ((v211 & 0x20000000) != 0)
    v213 = v212;
  else
    v213 = v211 & 0xCFFFFFFF;
  if ((v213 & 0x40000000) == 0)
  {
    v214 = v7 + 7;
    if ((v213 & 0x80000000) != 0)
    {
      LOBYTE(v223) = -1;
      v224 = 2;
    }
    else
    {
      v215 = *(_QWORD *)(v13 + 2448);
      v216 = v215 + 520 * v213;
      v217 = *(_QWORD *)(v216 + 312);
      v218 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v216 + 336))
      {
        *(_BYTE *)(v216 + 336) = 0;
        v219 = *(unsigned int *)(v216 + 4);
        if ((_DWORD)v219)
        {
          v814 = v218;
          v857 = v217;
          v902 = v9;
          v220 = 0;
          v221 = (unsigned __int8 *)(v215 + 520 * v213 + 36);
          do
          {
            v222 = *v221;
            v221 += 28;
            v220 = sub_223A4EC9C(v220, ((unint64_t)v222 << 8) | 1, 0xFFu);
            --v219;
          }
          while (v219);
          v223 = v220 >> 8;
          if (!(_BYTE)v220)
            LOBYTE(v223) = -1;
          v217 = v857;
          v5 = a1;
          v9 = v902;
          v218 = v814;
        }
        else
        {
          LOBYTE(v223) = -1;
        }
        *(_BYTE *)(v215 + 520 * v213 + 338) = v223;
      }
      else
      {
        LOBYTE(v223) = *(_BYTE *)(v215 + 520 * v213 + 338);
      }
      v224 = v217 > v218;
    }
    v225 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v85, v214));
    a4.f32[2] = (float)v9;
    v226.i64[0] = 0x3F0000003F000000;
    v226.i64[1] = 0x3F0000003F000000;
    v227 = vmulq_n_f32(vaddq_f32(a4, v226), v225);
    v936 = v227.i32[2];
    v935 = v227.i64[0];
    sub_223FFDF1C(v12[2], &v935, v223, v224, v225);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v228 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v228;
    v13 = **v228;
    v9 = a2[2] + 7;
  }
  v229 = v6 + 4;
  v230 = v10[480];
  if ((v230 & 0x10000000) != 0)
    v231 = 0x40000000;
  else
    v231 = 0x80000000;
  if ((v230 & 0x20000000) != 0)
    v232 = v231;
  else
    v232 = v230 & 0xCFFFFFFF;
  if ((v232 & 0x40000000) == 0)
  {
    if ((v232 & 0x80000000) != 0)
    {
      LOBYTE(v241) = -1;
      v242 = 2;
    }
    else
    {
      v233 = *(_QWORD *)(v13 + 2448);
      v234 = v233 + 520 * v232;
      v235 = *(_QWORD *)(v234 + 312);
      v236 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v234 + 336))
      {
        *(_BYTE *)(v234 + 336) = 0;
        v237 = *(unsigned int *)(v234 + 4);
        if ((_DWORD)v237)
        {
          v815 = v236;
          v858 = v235;
          v903 = v9;
          v238 = 0;
          v239 = (unsigned __int8 *)(v233 + 520 * v232 + 36);
          do
          {
            v240 = *v239;
            v239 += 28;
            v238 = sub_223A4EC9C(v238, ((unint64_t)v240 << 8) | 1, 0xFFu);
            --v237;
          }
          while (v237);
          v241 = v238 >> 8;
          if (!(_BYTE)v238)
            LOBYTE(v241) = -1;
          v235 = v858;
          v5 = a1;
          v9 = v903;
          v236 = v815;
        }
        else
        {
          LOBYTE(v241) = -1;
        }
        *(_BYTE *)(v233 + 520 * v232 + 338) = v241;
      }
      else
      {
        LOBYTE(v241) = *(_BYTE *)(v233 + 520 * v232 + 338);
      }
      v242 = v235 > v236;
    }
    v243 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v7));
    a4.f32[2] = (float)v9;
    v244.i64[0] = 0x3F0000003F000000;
    v244.i64[1] = 0x3F0000003F000000;
    v245 = vmulq_n_f32(vaddq_f32(a4, v244), v243);
    v936 = v245.i32[2];
    v935 = v245.i64[0];
    sub_223FFDF1C(v12[2], &v935, v241, v242, v243);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v246 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v246;
    v13 = **v246;
    v229 = v6 + 4;
    v9 = a2[2] + 7;
  }
  v247 = v10[481];
  if ((v247 & 0x10000000) != 0)
    v248 = 0x40000000;
  else
    v248 = 0x80000000;
  if ((v247 & 0x20000000) != 0)
    v249 = v248;
  else
    v249 = v247 & 0xCFFFFFFF;
  if ((v249 & 0x40000000) == 0)
  {
    v250 = v7 + 1;
    if ((v249 & 0x80000000) != 0)
    {
      LOBYTE(v259) = -1;
      v260 = 2;
    }
    else
    {
      v251 = *(_QWORD *)(v13 + 2448);
      v252 = v251 + 520 * v249;
      v253 = *(_QWORD *)(v252 + 312);
      v254 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v252 + 336))
      {
        *(_BYTE *)(v252 + 336) = 0;
        v255 = *(unsigned int *)(v252 + 4);
        if ((_DWORD)v255)
        {
          v816 = v254;
          v859 = v253;
          v904 = v9;
          v256 = 0;
          v257 = (unsigned __int8 *)(v251 + 520 * v249 + 36);
          do
          {
            v258 = *v257;
            v257 += 28;
            v256 = sub_223A4EC9C(v256, ((unint64_t)v258 << 8) | 1, 0xFFu);
            --v255;
          }
          while (v255);
          v259 = v256 >> 8;
          if (!(_BYTE)v256)
            LOBYTE(v259) = -1;
          v253 = v859;
          v5 = a1;
          v9 = v904;
          v254 = v816;
        }
        else
        {
          LOBYTE(v259) = -1;
        }
        *(_BYTE *)(v251 + 520 * v249 + 338) = v259;
      }
      else
      {
        LOBYTE(v259) = *(_BYTE *)(v251 + 520 * v249 + 338);
      }
      v260 = v253 > v254;
    }
    v261 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v250));
    a4.f32[2] = (float)v9;
    v262.i64[0] = 0x3F0000003F000000;
    v262.i64[1] = 0x3F0000003F000000;
    v263 = vmulq_n_f32(vaddq_f32(a4, v262), v261);
    v936 = v263.i32[2];
    v935 = v263.i64[0];
    sub_223FFDF1C(v12[2], &v935, v259, v260, v261);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v264 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v264;
    v13 = **v264;
    v229 = v6 + 4;
    v9 = a2[2] + 7;
  }
  v265 = v10[482];
  if ((v265 & 0x10000000) != 0)
    v266 = 0x40000000;
  else
    v266 = 0x80000000;
  if ((v265 & 0x20000000) != 0)
    v267 = v266;
  else
    v267 = v265 & 0xCFFFFFFF;
  if ((v267 & 0x40000000) == 0)
  {
    v268 = v7 + 2;
    if ((v267 & 0x80000000) != 0)
    {
      LOBYTE(v277) = -1;
      v278 = 2;
    }
    else
    {
      v269 = *(_QWORD *)(v13 + 2448);
      v270 = v269 + 520 * v267;
      v271 = *(_QWORD *)(v270 + 312);
      v272 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v270 + 336))
      {
        *(_BYTE *)(v270 + 336) = 0;
        v273 = *(unsigned int *)(v270 + 4);
        if ((_DWORD)v273)
        {
          v817 = v272;
          v860 = v271;
          v905 = v9;
          v274 = 0;
          v275 = (unsigned __int8 *)(v269 + 520 * v267 + 36);
          do
          {
            v276 = *v275;
            v275 += 28;
            v274 = sub_223A4EC9C(v274, ((unint64_t)v276 << 8) | 1, 0xFFu);
            --v273;
          }
          while (v273);
          v277 = v274 >> 8;
          if (!(_BYTE)v274)
            LOBYTE(v277) = -1;
          v271 = v860;
          v5 = a1;
          v9 = v905;
          v272 = v817;
        }
        else
        {
          LOBYTE(v277) = -1;
        }
        *(_BYTE *)(v269 + 520 * v267 + 338) = v277;
      }
      else
      {
        LOBYTE(v277) = *(_BYTE *)(v269 + 520 * v267 + 338);
      }
      v278 = v271 > v272;
    }
    v279 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v268));
    a4.f32[2] = (float)v9;
    v280.i64[0] = 0x3F0000003F000000;
    v280.i64[1] = 0x3F0000003F000000;
    v281 = vmulq_n_f32(vaddq_f32(a4, v280), v279);
    v936 = v281.i32[2];
    v935 = v281.i64[0];
    sub_223FFDF1C(v12[2], &v935, v277, v278, v279);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v282 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v282;
    v13 = **v282;
    v229 = v6 + 4;
    v9 = a2[2] + 7;
  }
  v283 = v10[483];
  if ((v283 & 0x10000000) != 0)
    v284 = 0x40000000;
  else
    v284 = 0x80000000;
  if ((v283 & 0x20000000) != 0)
    v285 = v284;
  else
    v285 = v283 & 0xCFFFFFFF;
  if ((v285 & 0x40000000) == 0)
  {
    v286 = v7 + 3;
    if ((v285 & 0x80000000) != 0)
    {
      LOBYTE(v295) = -1;
      v296 = 2;
    }
    else
    {
      v287 = *(_QWORD *)(v13 + 2448);
      v288 = v287 + 520 * v285;
      v289 = *(_QWORD *)(v288 + 312);
      v290 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v288 + 336))
      {
        *(_BYTE *)(v288 + 336) = 0;
        v291 = *(unsigned int *)(v288 + 4);
        if ((_DWORD)v291)
        {
          v818 = v290;
          v861 = v289;
          v906 = v9;
          v292 = 0;
          v293 = (unsigned __int8 *)(v287 + 520 * v285 + 36);
          do
          {
            v294 = *v293;
            v293 += 28;
            v292 = sub_223A4EC9C(v292, ((unint64_t)v294 << 8) | 1, 0xFFu);
            --v291;
          }
          while (v291);
          v295 = v292 >> 8;
          if (!(_BYTE)v292)
            LOBYTE(v295) = -1;
          v289 = v861;
          v5 = a1;
          v9 = v906;
          v290 = v818;
        }
        else
        {
          LOBYTE(v295) = -1;
        }
        *(_BYTE *)(v287 + 520 * v285 + 338) = v295;
      }
      else
      {
        LOBYTE(v295) = *(_BYTE *)(v287 + 520 * v285 + 338);
      }
      v296 = v289 > v290;
    }
    v297 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v286));
    a4.f32[2] = (float)v9;
    v298.i64[0] = 0x3F0000003F000000;
    v298.i64[1] = 0x3F0000003F000000;
    v299 = vmulq_n_f32(vaddq_f32(a4, v298), v297);
    v936 = v299.i32[2];
    v935 = v299.i64[0];
    sub_223FFDF1C(v12[2], &v935, v295, v296, v297);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v300 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v300;
    v13 = **v300;
    v229 = v6 + 4;
    v9 = a2[2] + 7;
  }
  v301 = v10[484];
  if ((v301 & 0x10000000) != 0)
    v302 = 0x40000000;
  else
    v302 = 0x80000000;
  if ((v301 & 0x20000000) != 0)
    v303 = v302;
  else
    v303 = v301 & 0xCFFFFFFF;
  if ((v303 & 0x40000000) == 0)
  {
    v304 = v7 + 4;
    if ((v303 & 0x80000000) != 0)
    {
      LOBYTE(v313) = -1;
      v314 = 2;
    }
    else
    {
      v305 = *(_QWORD *)(v13 + 2448);
      v306 = v305 + 520 * v303;
      v307 = *(_QWORD *)(v306 + 312);
      v308 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v306 + 336))
      {
        *(_BYTE *)(v306 + 336) = 0;
        v309 = *(unsigned int *)(v306 + 4);
        if ((_DWORD)v309)
        {
          v819 = v308;
          v862 = v307;
          v907 = v9;
          v310 = 0;
          v311 = (unsigned __int8 *)(v305 + 520 * v303 + 36);
          do
          {
            v312 = *v311;
            v311 += 28;
            v310 = sub_223A4EC9C(v310, ((unint64_t)v312 << 8) | 1, 0xFFu);
            --v309;
          }
          while (v309);
          v313 = v310 >> 8;
          if (!(_BYTE)v310)
            LOBYTE(v313) = -1;
          v307 = v862;
          v5 = a1;
          v9 = v907;
          v308 = v819;
        }
        else
        {
          LOBYTE(v313) = -1;
        }
        *(_BYTE *)(v305 + 520 * v303 + 338) = v313;
      }
      else
      {
        LOBYTE(v313) = *(_BYTE *)(v305 + 520 * v303 + 338);
      }
      v314 = v307 > v308;
    }
    v315 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v304));
    a4.f32[2] = (float)v9;
    v316.i64[0] = 0x3F0000003F000000;
    v316.i64[1] = 0x3F0000003F000000;
    v317 = vmulq_n_f32(vaddq_f32(a4, v316), v315);
    v936 = v317.i32[2];
    v935 = v317.i64[0];
    sub_223FFDF1C(v12[2], &v935, v313, v314, v315);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v318 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v318;
    v13 = **v318;
    v229 = v6 + 4;
    v9 = a2[2] + 7;
  }
  v319 = v10[485];
  if ((v319 & 0x10000000) != 0)
    v320 = 0x40000000;
  else
    v320 = 0x80000000;
  if ((v319 & 0x20000000) != 0)
    v321 = v320;
  else
    v321 = v319 & 0xCFFFFFFF;
  if ((v321 & 0x40000000) == 0)
  {
    v322 = v7 + 5;
    if ((v321 & 0x80000000) != 0)
    {
      LOBYTE(v331) = -1;
      v332 = 2;
    }
    else
    {
      v323 = *(_QWORD *)(v13 + 2448);
      v324 = v323 + 520 * v321;
      v325 = *(_QWORD *)(v324 + 312);
      v326 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v324 + 336))
      {
        *(_BYTE *)(v324 + 336) = 0;
        v327 = *(unsigned int *)(v324 + 4);
        if ((_DWORD)v327)
        {
          v820 = v326;
          v863 = v325;
          v908 = v9;
          v328 = 0;
          v329 = (unsigned __int8 *)(v323 + 520 * v321 + 36);
          do
          {
            v330 = *v329;
            v329 += 28;
            v328 = sub_223A4EC9C(v328, ((unint64_t)v330 << 8) | 1, 0xFFu);
            --v327;
          }
          while (v327);
          v331 = v328 >> 8;
          if (!(_BYTE)v328)
            LOBYTE(v331) = -1;
          v325 = v863;
          v5 = a1;
          v9 = v908;
          v326 = v820;
        }
        else
        {
          LOBYTE(v331) = -1;
        }
        *(_BYTE *)(v323 + 520 * v321 + 338) = v331;
      }
      else
      {
        LOBYTE(v331) = *(_BYTE *)(v323 + 520 * v321 + 338);
      }
      v332 = v325 > v326;
    }
    v333 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v322));
    a4.f32[2] = (float)v9;
    v334.i64[0] = 0x3F0000003F000000;
    v334.i64[1] = 0x3F0000003F000000;
    v335 = vmulq_n_f32(vaddq_f32(a4, v334), v333);
    v936 = v335.i32[2];
    v935 = v335.i64[0];
    sub_223FFDF1C(v12[2], &v935, v331, v332, v333);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v336 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v336;
    v13 = **v336;
    v229 = v6 + 4;
    v9 = a2[2] + 7;
  }
  v337 = v10[486];
  if ((v337 & 0x10000000) != 0)
    v338 = 0x40000000;
  else
    v338 = 0x80000000;
  if ((v337 & 0x20000000) != 0)
    v339 = v338;
  else
    v339 = v337 & 0xCFFFFFFF;
  if ((v339 & 0x40000000) == 0)
  {
    v340 = v7 + 6;
    if ((v339 & 0x80000000) != 0)
    {
      LOBYTE(v349) = -1;
      v350 = 2;
    }
    else
    {
      v341 = *(_QWORD *)(v13 + 2448);
      v342 = v341 + 520 * v339;
      v343 = *(_QWORD *)(v342 + 312);
      v344 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v342 + 336))
      {
        *(_BYTE *)(v342 + 336) = 0;
        v345 = *(unsigned int *)(v342 + 4);
        if ((_DWORD)v345)
        {
          v821 = v344;
          v864 = v343;
          v909 = v9;
          v346 = 0;
          v347 = (unsigned __int8 *)(v341 + 520 * v339 + 36);
          do
          {
            v348 = *v347;
            v347 += 28;
            v346 = sub_223A4EC9C(v346, ((unint64_t)v348 << 8) | 1, 0xFFu);
            --v345;
          }
          while (v345);
          v349 = v346 >> 8;
          if (!(_BYTE)v346)
            LOBYTE(v349) = -1;
          v343 = v864;
          v5 = a1;
          v9 = v909;
          v344 = v821;
        }
        else
        {
          LOBYTE(v349) = -1;
        }
        *(_BYTE *)(v341 + 520 * v339 + 338) = v349;
      }
      else
      {
        LOBYTE(v349) = *(_BYTE *)(v341 + 520 * v339 + 338);
      }
      v350 = v343 > v344;
    }
    v351 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v340));
    a4.f32[2] = (float)v9;
    v352.i64[0] = 0x3F0000003F000000;
    v352.i64[1] = 0x3F0000003F000000;
    v353 = vmulq_n_f32(vaddq_f32(a4, v352), v351);
    v936 = v353.i32[2];
    v935 = v353.i64[0];
    sub_223FFDF1C(v12[2], &v935, v349, v350, v351);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v354 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v354;
    v13 = **v354;
    v229 = v6 + 4;
    v9 = a2[2] + 7;
  }
  v355 = v10[487];
  if ((v355 & 0x10000000) != 0)
    v356 = 0x40000000;
  else
    v356 = 0x80000000;
  if ((v355 & 0x20000000) != 0)
    v357 = v356;
  else
    v357 = v355 & 0xCFFFFFFF;
  if ((v357 & 0x40000000) == 0)
  {
    v358 = v7 + 7;
    if ((v357 & 0x80000000) != 0)
    {
      LOBYTE(v367) = -1;
      v368 = 2;
    }
    else
    {
      v359 = *(_QWORD *)(v13 + 2448);
      v360 = v359 + 520 * v357;
      v361 = *(_QWORD *)(v360 + 312);
      v362 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v360 + 336))
      {
        *(_BYTE *)(v360 + 336) = 0;
        v363 = *(unsigned int *)(v360 + 4);
        if ((_DWORD)v363)
        {
          v822 = v362;
          v865 = v361;
          v910 = v9;
          v364 = 0;
          v365 = (unsigned __int8 *)(v359 + 520 * v357 + 36);
          do
          {
            v366 = *v365;
            v365 += 28;
            v364 = sub_223A4EC9C(v364, ((unint64_t)v366 << 8) | 1, 0xFFu);
            --v363;
          }
          while (v363);
          v367 = v364 >> 8;
          if (!(_BYTE)v364)
            LOBYTE(v367) = -1;
          v361 = v865;
          v5 = a1;
          v9 = v910;
          v362 = v822;
        }
        else
        {
          LOBYTE(v367) = -1;
        }
        *(_BYTE *)(v359 + 520 * v357 + 338) = v367;
      }
      else
      {
        LOBYTE(v367) = *(_BYTE *)(v359 + 520 * v357 + 338);
      }
      v368 = v361 > v362;
    }
    v369 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v229, v358));
    a4.f32[2] = (float)v9;
    v370.i64[0] = 0x3F0000003F000000;
    v370.i64[1] = 0x3F0000003F000000;
    v371 = vmulq_n_f32(vaddq_f32(a4, v370), v369);
    v936 = v371.i32[2];
    v935 = v371.i64[0];
    sub_223FFDF1C(v12[2], &v935, v367, v368, v369);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v372 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v372;
    v13 = **v372;
    v9 = a2[2] + 7;
  }
  v373 = v6 + 5;
  v374 = v10[488];
  if ((v374 & 0x10000000) != 0)
    v375 = 0x40000000;
  else
    v375 = 0x80000000;
  if ((v374 & 0x20000000) != 0)
    v376 = v375;
  else
    v376 = v374 & 0xCFFFFFFF;
  if ((v376 & 0x40000000) == 0)
  {
    if ((v376 & 0x80000000) != 0)
    {
      LOBYTE(v385) = -1;
      v386 = 2;
    }
    else
    {
      v377 = *(_QWORD *)(v13 + 2448);
      v378 = v377 + 520 * v376;
      v379 = *(_QWORD *)(v378 + 312);
      v380 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v378 + 336))
      {
        *(_BYTE *)(v378 + 336) = 0;
        v381 = *(unsigned int *)(v378 + 4);
        if ((_DWORD)v381)
        {
          v823 = v380;
          v866 = v379;
          v911 = v9;
          v382 = 0;
          v383 = (unsigned __int8 *)(v377 + 520 * v376 + 36);
          do
          {
            v384 = *v383;
            v383 += 28;
            v382 = sub_223A4EC9C(v382, ((unint64_t)v384 << 8) | 1, 0xFFu);
            --v381;
          }
          while (v381);
          v385 = v382 >> 8;
          if (!(_BYTE)v382)
            LOBYTE(v385) = -1;
          v379 = v866;
          v5 = a1;
          v9 = v911;
          v380 = v823;
        }
        else
        {
          LOBYTE(v385) = -1;
        }
        *(_BYTE *)(v377 + 520 * v376 + 338) = v385;
      }
      else
      {
        LOBYTE(v385) = *(_BYTE *)(v377 + 520 * v376 + 338);
      }
      v386 = v379 > v380;
    }
    v387 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v7));
    a4.f32[2] = (float)v9;
    v388.i64[0] = 0x3F0000003F000000;
    v388.i64[1] = 0x3F0000003F000000;
    v389 = vmulq_n_f32(vaddq_f32(a4, v388), v387);
    v936 = v389.i32[2];
    v935 = v389.i64[0];
    sub_223FFDF1C(v12[2], &v935, v385, v386, v387);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v390 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v390;
    v13 = **v390;
    v373 = v6 + 5;
    v9 = a2[2] + 7;
  }
  v391 = v10[489];
  if ((v391 & 0x10000000) != 0)
    v392 = 0x40000000;
  else
    v392 = 0x80000000;
  if ((v391 & 0x20000000) != 0)
    v393 = v392;
  else
    v393 = v391 & 0xCFFFFFFF;
  if ((v393 & 0x40000000) == 0)
  {
    v394 = v7 + 1;
    if ((v393 & 0x80000000) != 0)
    {
      LOBYTE(v403) = -1;
      v404 = 2;
    }
    else
    {
      v395 = *(_QWORD *)(v13 + 2448);
      v396 = v395 + 520 * v393;
      v397 = *(_QWORD *)(v396 + 312);
      v398 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v396 + 336))
      {
        *(_BYTE *)(v396 + 336) = 0;
        v399 = *(unsigned int *)(v396 + 4);
        if ((_DWORD)v399)
        {
          v824 = v398;
          v867 = v397;
          v912 = v9;
          v400 = 0;
          v401 = (unsigned __int8 *)(v395 + 520 * v393 + 36);
          do
          {
            v402 = *v401;
            v401 += 28;
            v400 = sub_223A4EC9C(v400, ((unint64_t)v402 << 8) | 1, 0xFFu);
            --v399;
          }
          while (v399);
          v403 = v400 >> 8;
          if (!(_BYTE)v400)
            LOBYTE(v403) = -1;
          v397 = v867;
          v5 = a1;
          v9 = v912;
          v398 = v824;
        }
        else
        {
          LOBYTE(v403) = -1;
        }
        *(_BYTE *)(v395 + 520 * v393 + 338) = v403;
      }
      else
      {
        LOBYTE(v403) = *(_BYTE *)(v395 + 520 * v393 + 338);
      }
      v404 = v397 > v398;
    }
    v405 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v394));
    a4.f32[2] = (float)v9;
    v406.i64[0] = 0x3F0000003F000000;
    v406.i64[1] = 0x3F0000003F000000;
    v407 = vmulq_n_f32(vaddq_f32(a4, v406), v405);
    v936 = v407.i32[2];
    v935 = v407.i64[0];
    sub_223FFDF1C(v12[2], &v935, v403, v404, v405);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v408 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v408;
    v13 = **v408;
    v373 = v6 + 5;
    v9 = a2[2] + 7;
  }
  v409 = v10[490];
  if ((v409 & 0x10000000) != 0)
    v410 = 0x40000000;
  else
    v410 = 0x80000000;
  if ((v409 & 0x20000000) != 0)
    v411 = v410;
  else
    v411 = v409 & 0xCFFFFFFF;
  if ((v411 & 0x40000000) == 0)
  {
    v412 = v7 + 2;
    if ((v411 & 0x80000000) != 0)
    {
      LOBYTE(v421) = -1;
      v422 = 2;
    }
    else
    {
      v413 = *(_QWORD *)(v13 + 2448);
      v414 = v413 + 520 * v411;
      v415 = *(_QWORD *)(v414 + 312);
      v416 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v414 + 336))
      {
        *(_BYTE *)(v414 + 336) = 0;
        v417 = *(unsigned int *)(v414 + 4);
        if ((_DWORD)v417)
        {
          v825 = v416;
          v868 = v415;
          v913 = v9;
          v418 = 0;
          v419 = (unsigned __int8 *)(v413 + 520 * v411 + 36);
          do
          {
            v420 = *v419;
            v419 += 28;
            v418 = sub_223A4EC9C(v418, ((unint64_t)v420 << 8) | 1, 0xFFu);
            --v417;
          }
          while (v417);
          v421 = v418 >> 8;
          if (!(_BYTE)v418)
            LOBYTE(v421) = -1;
          v415 = v868;
          v5 = a1;
          v9 = v913;
          v416 = v825;
        }
        else
        {
          LOBYTE(v421) = -1;
        }
        *(_BYTE *)(v413 + 520 * v411 + 338) = v421;
      }
      else
      {
        LOBYTE(v421) = *(_BYTE *)(v413 + 520 * v411 + 338);
      }
      v422 = v415 > v416;
    }
    v423 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v412));
    a4.f32[2] = (float)v9;
    v424.i64[0] = 0x3F0000003F000000;
    v424.i64[1] = 0x3F0000003F000000;
    v425 = vmulq_n_f32(vaddq_f32(a4, v424), v423);
    v936 = v425.i32[2];
    v935 = v425.i64[0];
    sub_223FFDF1C(v12[2], &v935, v421, v422, v423);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v426 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v426;
    v13 = **v426;
    v373 = v6 + 5;
    v9 = a2[2] + 7;
  }
  v427 = v10[491];
  if ((v427 & 0x10000000) != 0)
    v428 = 0x40000000;
  else
    v428 = 0x80000000;
  if ((v427 & 0x20000000) != 0)
    v429 = v428;
  else
    v429 = v427 & 0xCFFFFFFF;
  if ((v429 & 0x40000000) == 0)
  {
    v430 = v7 + 3;
    if ((v429 & 0x80000000) != 0)
    {
      LOBYTE(v439) = -1;
      v440 = 2;
    }
    else
    {
      v431 = *(_QWORD *)(v13 + 2448);
      v432 = v431 + 520 * v429;
      v433 = *(_QWORD *)(v432 + 312);
      v434 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v432 + 336))
      {
        *(_BYTE *)(v432 + 336) = 0;
        v435 = *(unsigned int *)(v432 + 4);
        if ((_DWORD)v435)
        {
          v826 = v434;
          v869 = v433;
          v914 = v9;
          v436 = 0;
          v437 = (unsigned __int8 *)(v431 + 520 * v429 + 36);
          do
          {
            v438 = *v437;
            v437 += 28;
            v436 = sub_223A4EC9C(v436, ((unint64_t)v438 << 8) | 1, 0xFFu);
            --v435;
          }
          while (v435);
          v439 = v436 >> 8;
          if (!(_BYTE)v436)
            LOBYTE(v439) = -1;
          v433 = v869;
          v5 = a1;
          v9 = v914;
          v434 = v826;
        }
        else
        {
          LOBYTE(v439) = -1;
        }
        *(_BYTE *)(v431 + 520 * v429 + 338) = v439;
      }
      else
      {
        LOBYTE(v439) = *(_BYTE *)(v431 + 520 * v429 + 338);
      }
      v440 = v433 > v434;
    }
    v441 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v430));
    a4.f32[2] = (float)v9;
    v442.i64[0] = 0x3F0000003F000000;
    v442.i64[1] = 0x3F0000003F000000;
    v443 = vmulq_n_f32(vaddq_f32(a4, v442), v441);
    v936 = v443.i32[2];
    v935 = v443.i64[0];
    sub_223FFDF1C(v12[2], &v935, v439, v440, v441);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v444 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v444;
    v13 = **v444;
    v373 = v6 + 5;
    v9 = a2[2] + 7;
  }
  v445 = v10[492];
  if ((v445 & 0x10000000) != 0)
    v446 = 0x40000000;
  else
    v446 = 0x80000000;
  if ((v445 & 0x20000000) != 0)
    v447 = v446;
  else
    v447 = v445 & 0xCFFFFFFF;
  if ((v447 & 0x40000000) == 0)
  {
    v448 = v7 + 4;
    if ((v447 & 0x80000000) != 0)
    {
      LOBYTE(v457) = -1;
      v458 = 2;
    }
    else
    {
      v449 = *(_QWORD *)(v13 + 2448);
      v450 = v449 + 520 * v447;
      v451 = *(_QWORD *)(v450 + 312);
      v452 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v450 + 336))
      {
        *(_BYTE *)(v450 + 336) = 0;
        v453 = *(unsigned int *)(v450 + 4);
        if ((_DWORD)v453)
        {
          v827 = v452;
          v870 = v451;
          v915 = v9;
          v454 = 0;
          v455 = (unsigned __int8 *)(v449 + 520 * v447 + 36);
          do
          {
            v456 = *v455;
            v455 += 28;
            v454 = sub_223A4EC9C(v454, ((unint64_t)v456 << 8) | 1, 0xFFu);
            --v453;
          }
          while (v453);
          v457 = v454 >> 8;
          if (!(_BYTE)v454)
            LOBYTE(v457) = -1;
          v451 = v870;
          v5 = a1;
          v9 = v915;
          v452 = v827;
        }
        else
        {
          LOBYTE(v457) = -1;
        }
        *(_BYTE *)(v449 + 520 * v447 + 338) = v457;
      }
      else
      {
        LOBYTE(v457) = *(_BYTE *)(v449 + 520 * v447 + 338);
      }
      v458 = v451 > v452;
    }
    v459 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v448));
    a4.f32[2] = (float)v9;
    v460.i64[0] = 0x3F0000003F000000;
    v460.i64[1] = 0x3F0000003F000000;
    v461 = vmulq_n_f32(vaddq_f32(a4, v460), v459);
    v936 = v461.i32[2];
    v935 = v461.i64[0];
    sub_223FFDF1C(v12[2], &v935, v457, v458, v459);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v462 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v462;
    v13 = **v462;
    v373 = v6 + 5;
    v9 = a2[2] + 7;
  }
  v463 = v10[493];
  if ((v463 & 0x10000000) != 0)
    v464 = 0x40000000;
  else
    v464 = 0x80000000;
  if ((v463 & 0x20000000) != 0)
    v465 = v464;
  else
    v465 = v463 & 0xCFFFFFFF;
  if ((v465 & 0x40000000) == 0)
  {
    v466 = v7 + 5;
    if ((v465 & 0x80000000) != 0)
    {
      LOBYTE(v475) = -1;
      v476 = 2;
    }
    else
    {
      v467 = *(_QWORD *)(v13 + 2448);
      v468 = v467 + 520 * v465;
      v469 = *(_QWORD *)(v468 + 312);
      v470 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v468 + 336))
      {
        *(_BYTE *)(v468 + 336) = 0;
        v471 = *(unsigned int *)(v468 + 4);
        if ((_DWORD)v471)
        {
          v828 = v470;
          v871 = v469;
          v916 = v9;
          v472 = 0;
          v473 = (unsigned __int8 *)(v467 + 520 * v465 + 36);
          do
          {
            v474 = *v473;
            v473 += 28;
            v472 = sub_223A4EC9C(v472, ((unint64_t)v474 << 8) | 1, 0xFFu);
            --v471;
          }
          while (v471);
          v475 = v472 >> 8;
          if (!(_BYTE)v472)
            LOBYTE(v475) = -1;
          v469 = v871;
          v5 = a1;
          v9 = v916;
          v470 = v828;
        }
        else
        {
          LOBYTE(v475) = -1;
        }
        *(_BYTE *)(v467 + 520 * v465 + 338) = v475;
      }
      else
      {
        LOBYTE(v475) = *(_BYTE *)(v467 + 520 * v465 + 338);
      }
      v476 = v469 > v470;
    }
    v477 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v466));
    a4.f32[2] = (float)v9;
    v478.i64[0] = 0x3F0000003F000000;
    v478.i64[1] = 0x3F0000003F000000;
    v479 = vmulq_n_f32(vaddq_f32(a4, v478), v477);
    v936 = v479.i32[2];
    v935 = v479.i64[0];
    sub_223FFDF1C(v12[2], &v935, v475, v476, v477);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v480 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v480;
    v13 = **v480;
    v373 = v6 + 5;
    v9 = a2[2] + 7;
  }
  v481 = v10[494];
  if ((v481 & 0x10000000) != 0)
    v482 = 0x40000000;
  else
    v482 = 0x80000000;
  if ((v481 & 0x20000000) != 0)
    v483 = v482;
  else
    v483 = v481 & 0xCFFFFFFF;
  if ((v483 & 0x40000000) == 0)
  {
    v484 = v7 + 6;
    if ((v483 & 0x80000000) != 0)
    {
      LOBYTE(v493) = -1;
      v494 = 2;
    }
    else
    {
      v485 = *(_QWORD *)(v13 + 2448);
      v486 = v485 + 520 * v483;
      v487 = *(_QWORD *)(v486 + 312);
      v488 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v486 + 336))
      {
        *(_BYTE *)(v486 + 336) = 0;
        v489 = *(unsigned int *)(v486 + 4);
        if ((_DWORD)v489)
        {
          v829 = v488;
          v872 = v487;
          v917 = v9;
          v490 = 0;
          v491 = (unsigned __int8 *)(v485 + 520 * v483 + 36);
          do
          {
            v492 = *v491;
            v491 += 28;
            v490 = sub_223A4EC9C(v490, ((unint64_t)v492 << 8) | 1, 0xFFu);
            --v489;
          }
          while (v489);
          v493 = v490 >> 8;
          if (!(_BYTE)v490)
            LOBYTE(v493) = -1;
          v487 = v872;
          v5 = a1;
          v9 = v917;
          v488 = v829;
        }
        else
        {
          LOBYTE(v493) = -1;
        }
        *(_BYTE *)(v485 + 520 * v483 + 338) = v493;
      }
      else
      {
        LOBYTE(v493) = *(_BYTE *)(v485 + 520 * v483 + 338);
      }
      v494 = v487 > v488;
    }
    v495 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v484));
    a4.f32[2] = (float)v9;
    v496.i64[0] = 0x3F0000003F000000;
    v496.i64[1] = 0x3F0000003F000000;
    v497 = vmulq_n_f32(vaddq_f32(a4, v496), v495);
    v936 = v497.i32[2];
    v935 = v497.i64[0];
    sub_223FFDF1C(v12[2], &v935, v493, v494, v495);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v498 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v498;
    v13 = **v498;
    v373 = v6 + 5;
    v9 = a2[2] + 7;
  }
  v499 = v10[495];
  if ((v499 & 0x10000000) != 0)
    v500 = 0x40000000;
  else
    v500 = 0x80000000;
  if ((v499 & 0x20000000) != 0)
    v501 = v500;
  else
    v501 = v499 & 0xCFFFFFFF;
  if ((v501 & 0x40000000) == 0)
  {
    v502 = v7 + 7;
    if ((v501 & 0x80000000) != 0)
    {
      LOBYTE(v511) = -1;
      v512 = 2;
    }
    else
    {
      v503 = *(_QWORD *)(v13 + 2448);
      v504 = v503 + 520 * v501;
      v505 = *(_QWORD *)(v504 + 312);
      v506 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v504 + 336))
      {
        *(_BYTE *)(v504 + 336) = 0;
        v507 = *(unsigned int *)(v504 + 4);
        if ((_DWORD)v507)
        {
          v830 = v506;
          v873 = v505;
          v918 = v9;
          v508 = 0;
          v509 = (unsigned __int8 *)(v503 + 520 * v501 + 36);
          do
          {
            v510 = *v509;
            v509 += 28;
            v508 = sub_223A4EC9C(v508, ((unint64_t)v510 << 8) | 1, 0xFFu);
            --v507;
          }
          while (v507);
          v511 = v508 >> 8;
          if (!(_BYTE)v508)
            LOBYTE(v511) = -1;
          v505 = v873;
          v5 = a1;
          v9 = v918;
          v506 = v830;
        }
        else
        {
          LOBYTE(v511) = -1;
        }
        *(_BYTE *)(v503 + 520 * v501 + 338) = v511;
      }
      else
      {
        LOBYTE(v511) = *(_BYTE *)(v503 + 520 * v501 + 338);
      }
      v512 = v505 > v506;
    }
    v513 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v373, v502));
    a4.f32[2] = (float)v9;
    v514.i64[0] = 0x3F0000003F000000;
    v514.i64[1] = 0x3F0000003F000000;
    v515 = vmulq_n_f32(vaddq_f32(a4, v514), v513);
    v936 = v515.i32[2];
    v935 = v515.i64[0];
    sub_223FFDF1C(v12[2], &v935, v511, v512, v513);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v516 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v516;
    v13 = **v516;
    v9 = a2[2] + 7;
  }
  v517 = v6 + 6;
  v518 = v10[496];
  if ((v518 & 0x10000000) != 0)
    v519 = 0x40000000;
  else
    v519 = 0x80000000;
  if ((v518 & 0x20000000) != 0)
    v520 = v519;
  else
    v520 = v518 & 0xCFFFFFFF;
  if ((v520 & 0x40000000) == 0)
  {
    if ((v520 & 0x80000000) != 0)
    {
      LOBYTE(v529) = -1;
      v530 = 2;
    }
    else
    {
      v521 = *(_QWORD *)(v13 + 2448);
      v522 = v521 + 520 * v520;
      v523 = *(_QWORD *)(v522 + 312);
      v524 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v522 + 336))
      {
        *(_BYTE *)(v522 + 336) = 0;
        v525 = *(unsigned int *)(v522 + 4);
        if ((_DWORD)v525)
        {
          v831 = v524;
          v874 = v523;
          v919 = v9;
          v526 = 0;
          v527 = (unsigned __int8 *)(v521 + 520 * v520 + 36);
          do
          {
            v528 = *v527;
            v527 += 28;
            v526 = sub_223A4EC9C(v526, ((unint64_t)v528 << 8) | 1, 0xFFu);
            --v525;
          }
          while (v525);
          v529 = v526 >> 8;
          if (!(_BYTE)v526)
            LOBYTE(v529) = -1;
          v523 = v874;
          v5 = a1;
          v9 = v919;
          v524 = v831;
        }
        else
        {
          LOBYTE(v529) = -1;
        }
        *(_BYTE *)(v521 + 520 * v520 + 338) = v529;
      }
      else
      {
        LOBYTE(v529) = *(_BYTE *)(v521 + 520 * v520 + 338);
      }
      v530 = v523 > v524;
    }
    v531 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v7));
    a4.f32[2] = (float)v9;
    v532.i64[0] = 0x3F0000003F000000;
    v532.i64[1] = 0x3F0000003F000000;
    v533 = vmulq_n_f32(vaddq_f32(a4, v532), v531);
    v936 = v533.i32[2];
    v935 = v533.i64[0];
    sub_223FFDF1C(v12[2], &v935, v529, v530, v531);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v534 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v534;
    v13 = **v534;
    v517 = v6 + 6;
    v9 = a2[2] + 7;
  }
  v535 = v10[497];
  if ((v535 & 0x10000000) != 0)
    v536 = 0x40000000;
  else
    v536 = 0x80000000;
  if ((v535 & 0x20000000) != 0)
    v537 = v536;
  else
    v537 = v535 & 0xCFFFFFFF;
  if ((v537 & 0x40000000) == 0)
  {
    v538 = v7 + 1;
    if ((v537 & 0x80000000) != 0)
    {
      LOBYTE(v547) = -1;
      v548 = 2;
    }
    else
    {
      v539 = *(_QWORD *)(v13 + 2448);
      v540 = v539 + 520 * v537;
      v541 = *(_QWORD *)(v540 + 312);
      v542 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v540 + 336))
      {
        *(_BYTE *)(v540 + 336) = 0;
        v543 = *(unsigned int *)(v540 + 4);
        if ((_DWORD)v543)
        {
          v832 = v542;
          v875 = v541;
          v920 = v9;
          v544 = 0;
          v545 = (unsigned __int8 *)(v539 + 520 * v537 + 36);
          do
          {
            v546 = *v545;
            v545 += 28;
            v544 = sub_223A4EC9C(v544, ((unint64_t)v546 << 8) | 1, 0xFFu);
            --v543;
          }
          while (v543);
          v547 = v544 >> 8;
          if (!(_BYTE)v544)
            LOBYTE(v547) = -1;
          v541 = v875;
          v5 = a1;
          v9 = v920;
          v542 = v832;
        }
        else
        {
          LOBYTE(v547) = -1;
        }
        *(_BYTE *)(v539 + 520 * v537 + 338) = v547;
      }
      else
      {
        LOBYTE(v547) = *(_BYTE *)(v539 + 520 * v537 + 338);
      }
      v548 = v541 > v542;
    }
    v549 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v538));
    a4.f32[2] = (float)v9;
    v550.i64[0] = 0x3F0000003F000000;
    v550.i64[1] = 0x3F0000003F000000;
    v551 = vmulq_n_f32(vaddq_f32(a4, v550), v549);
    v936 = v551.i32[2];
    v935 = v551.i64[0];
    sub_223FFDF1C(v12[2], &v935, v547, v548, v549);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v552 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v552;
    v13 = **v552;
    v517 = v6 + 6;
    v9 = a2[2] + 7;
  }
  v553 = v10[498];
  if ((v553 & 0x10000000) != 0)
    v554 = 0x40000000;
  else
    v554 = 0x80000000;
  if ((v553 & 0x20000000) != 0)
    v555 = v554;
  else
    v555 = v553 & 0xCFFFFFFF;
  if ((v555 & 0x40000000) == 0)
  {
    v556 = v7 + 2;
    if ((v555 & 0x80000000) != 0)
    {
      LOBYTE(v565) = -1;
      v566 = 2;
    }
    else
    {
      v557 = *(_QWORD *)(v13 + 2448);
      v558 = v557 + 520 * v555;
      v559 = *(_QWORD *)(v558 + 312);
      v560 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v558 + 336))
      {
        *(_BYTE *)(v558 + 336) = 0;
        v561 = *(unsigned int *)(v558 + 4);
        if ((_DWORD)v561)
        {
          v833 = v560;
          v876 = v559;
          v921 = v9;
          v562 = 0;
          v563 = (unsigned __int8 *)(v557 + 520 * v555 + 36);
          do
          {
            v564 = *v563;
            v563 += 28;
            v562 = sub_223A4EC9C(v562, ((unint64_t)v564 << 8) | 1, 0xFFu);
            --v561;
          }
          while (v561);
          v565 = v562 >> 8;
          if (!(_BYTE)v562)
            LOBYTE(v565) = -1;
          v559 = v876;
          v5 = a1;
          v9 = v921;
          v560 = v833;
        }
        else
        {
          LOBYTE(v565) = -1;
        }
        *(_BYTE *)(v557 + 520 * v555 + 338) = v565;
      }
      else
      {
        LOBYTE(v565) = *(_BYTE *)(v557 + 520 * v555 + 338);
      }
      v566 = v559 > v560;
    }
    v567 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v556));
    a4.f32[2] = (float)v9;
    v568.i64[0] = 0x3F0000003F000000;
    v568.i64[1] = 0x3F0000003F000000;
    v569 = vmulq_n_f32(vaddq_f32(a4, v568), v567);
    v936 = v569.i32[2];
    v935 = v569.i64[0];
    sub_223FFDF1C(v12[2], &v935, v565, v566, v567);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v570 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v570;
    v13 = **v570;
    v517 = v6 + 6;
    v9 = a2[2] + 7;
  }
  v571 = v10[499];
  if ((v571 & 0x10000000) != 0)
    v572 = 0x40000000;
  else
    v572 = 0x80000000;
  if ((v571 & 0x20000000) != 0)
    v573 = v572;
  else
    v573 = v571 & 0xCFFFFFFF;
  if ((v573 & 0x40000000) == 0)
  {
    v574 = v7 + 3;
    if ((v573 & 0x80000000) != 0)
    {
      LOBYTE(v583) = -1;
      v584 = 2;
    }
    else
    {
      v575 = *(_QWORD *)(v13 + 2448);
      v576 = v575 + 520 * v573;
      v577 = *(_QWORD *)(v576 + 312);
      v578 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v576 + 336))
      {
        *(_BYTE *)(v576 + 336) = 0;
        v579 = *(unsigned int *)(v576 + 4);
        if ((_DWORD)v579)
        {
          v834 = v578;
          v877 = v577;
          v922 = v9;
          v580 = 0;
          v581 = (unsigned __int8 *)(v575 + 520 * v573 + 36);
          do
          {
            v582 = *v581;
            v581 += 28;
            v580 = sub_223A4EC9C(v580, ((unint64_t)v582 << 8) | 1, 0xFFu);
            --v579;
          }
          while (v579);
          v583 = v580 >> 8;
          if (!(_BYTE)v580)
            LOBYTE(v583) = -1;
          v577 = v877;
          v5 = a1;
          v9 = v922;
          v578 = v834;
        }
        else
        {
          LOBYTE(v583) = -1;
        }
        *(_BYTE *)(v575 + 520 * v573 + 338) = v583;
      }
      else
      {
        LOBYTE(v583) = *(_BYTE *)(v575 + 520 * v573 + 338);
      }
      v584 = v577 > v578;
    }
    v585 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v574));
    a4.f32[2] = (float)v9;
    v586.i64[0] = 0x3F0000003F000000;
    v586.i64[1] = 0x3F0000003F000000;
    v587 = vmulq_n_f32(vaddq_f32(a4, v586), v585);
    v936 = v587.i32[2];
    v935 = v587.i64[0];
    sub_223FFDF1C(v12[2], &v935, v583, v584, v585);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v588 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v588;
    v13 = **v588;
    v517 = v6 + 6;
    v9 = a2[2] + 7;
  }
  v589 = v10[500];
  if ((v589 & 0x10000000) != 0)
    v590 = 0x40000000;
  else
    v590 = 0x80000000;
  if ((v589 & 0x20000000) != 0)
    v591 = v590;
  else
    v591 = v589 & 0xCFFFFFFF;
  if ((v591 & 0x40000000) == 0)
  {
    v592 = v7 + 4;
    if ((v591 & 0x80000000) != 0)
    {
      LOBYTE(v601) = -1;
      v602 = 2;
    }
    else
    {
      v593 = *(_QWORD *)(v13 + 2448);
      v594 = v593 + 520 * v591;
      v595 = *(_QWORD *)(v594 + 312);
      v596 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v594 + 336))
      {
        *(_BYTE *)(v594 + 336) = 0;
        v597 = *(unsigned int *)(v594 + 4);
        if ((_DWORD)v597)
        {
          v835 = v596;
          v878 = v595;
          v923 = v9;
          v598 = 0;
          v599 = (unsigned __int8 *)(v593 + 520 * v591 + 36);
          do
          {
            v600 = *v599;
            v599 += 28;
            v598 = sub_223A4EC9C(v598, ((unint64_t)v600 << 8) | 1, 0xFFu);
            --v597;
          }
          while (v597);
          v601 = v598 >> 8;
          if (!(_BYTE)v598)
            LOBYTE(v601) = -1;
          v595 = v878;
          v5 = a1;
          v9 = v923;
          v596 = v835;
        }
        else
        {
          LOBYTE(v601) = -1;
        }
        *(_BYTE *)(v593 + 520 * v591 + 338) = v601;
      }
      else
      {
        LOBYTE(v601) = *(_BYTE *)(v593 + 520 * v591 + 338);
      }
      v602 = v595 > v596;
    }
    v603 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v592));
    a4.f32[2] = (float)v9;
    v604.i64[0] = 0x3F0000003F000000;
    v604.i64[1] = 0x3F0000003F000000;
    v605 = vmulq_n_f32(vaddq_f32(a4, v604), v603);
    v936 = v605.i32[2];
    v935 = v605.i64[0];
    sub_223FFDF1C(v12[2], &v935, v601, v602, v603);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v606 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v606;
    v13 = **v606;
    v517 = v6 + 6;
    v9 = a2[2] + 7;
  }
  v607 = v10[501];
  if ((v607 & 0x10000000) != 0)
    v608 = 0x40000000;
  else
    v608 = 0x80000000;
  if ((v607 & 0x20000000) != 0)
    v609 = v608;
  else
    v609 = v607 & 0xCFFFFFFF;
  if ((v609 & 0x40000000) == 0)
  {
    v610 = v7 + 5;
    if ((v609 & 0x80000000) != 0)
    {
      LOBYTE(v619) = -1;
      v620 = 2;
    }
    else
    {
      v611 = *(_QWORD *)(v13 + 2448);
      v612 = v611 + 520 * v609;
      v613 = *(_QWORD *)(v612 + 312);
      v614 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v612 + 336))
      {
        *(_BYTE *)(v612 + 336) = 0;
        v615 = *(unsigned int *)(v612 + 4);
        if ((_DWORD)v615)
        {
          v836 = v614;
          v879 = v613;
          v924 = v9;
          v616 = 0;
          v617 = (unsigned __int8 *)(v611 + 520 * v609 + 36);
          do
          {
            v618 = *v617;
            v617 += 28;
            v616 = sub_223A4EC9C(v616, ((unint64_t)v618 << 8) | 1, 0xFFu);
            --v615;
          }
          while (v615);
          v619 = v616 >> 8;
          if (!(_BYTE)v616)
            LOBYTE(v619) = -1;
          v613 = v879;
          v5 = a1;
          v9 = v924;
          v614 = v836;
        }
        else
        {
          LOBYTE(v619) = -1;
        }
        *(_BYTE *)(v611 + 520 * v609 + 338) = v619;
      }
      else
      {
        LOBYTE(v619) = *(_BYTE *)(v611 + 520 * v609 + 338);
      }
      v620 = v613 > v614;
    }
    v621 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v610));
    a4.f32[2] = (float)v9;
    v622.i64[0] = 0x3F0000003F000000;
    v622.i64[1] = 0x3F0000003F000000;
    v623 = vmulq_n_f32(vaddq_f32(a4, v622), v621);
    v936 = v623.i32[2];
    v935 = v623.i64[0];
    sub_223FFDF1C(v12[2], &v935, v619, v620, v621);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v624 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v624;
    v13 = **v624;
    v517 = v6 + 6;
    v9 = a2[2] + 7;
  }
  v625 = v10[502];
  if ((v625 & 0x10000000) != 0)
    v626 = 0x40000000;
  else
    v626 = 0x80000000;
  if ((v625 & 0x20000000) != 0)
    v627 = v626;
  else
    v627 = v625 & 0xCFFFFFFF;
  if ((v627 & 0x40000000) == 0)
  {
    v628 = v7 + 6;
    if ((v627 & 0x80000000) != 0)
    {
      LOBYTE(v637) = -1;
      v638 = 2;
    }
    else
    {
      v629 = *(_QWORD *)(v13 + 2448);
      v630 = v629 + 520 * v627;
      v631 = *(_QWORD *)(v630 + 312);
      v632 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v630 + 336))
      {
        *(_BYTE *)(v630 + 336) = 0;
        v633 = *(unsigned int *)(v630 + 4);
        if ((_DWORD)v633)
        {
          v837 = v632;
          v880 = v631;
          v925 = v9;
          v634 = 0;
          v635 = (unsigned __int8 *)(v629 + 520 * v627 + 36);
          do
          {
            v636 = *v635;
            v635 += 28;
            v634 = sub_223A4EC9C(v634, ((unint64_t)v636 << 8) | 1, 0xFFu);
            --v633;
          }
          while (v633);
          v637 = v634 >> 8;
          if (!(_BYTE)v634)
            LOBYTE(v637) = -1;
          v631 = v880;
          v5 = a1;
          v9 = v925;
          v632 = v837;
        }
        else
        {
          LOBYTE(v637) = -1;
        }
        *(_BYTE *)(v629 + 520 * v627 + 338) = v637;
      }
      else
      {
        LOBYTE(v637) = *(_BYTE *)(v629 + 520 * v627 + 338);
      }
      v638 = v631 > v632;
    }
    v639 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v628));
    a4.f32[2] = (float)v9;
    v640.i64[0] = 0x3F0000003F000000;
    v640.i64[1] = 0x3F0000003F000000;
    v641 = vmulq_n_f32(vaddq_f32(a4, v640), v639);
    v936 = v641.i32[2];
    v935 = v641.i64[0];
    sub_223FFDF1C(v12[2], &v935, v637, v638, v639);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v642 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v642;
    v13 = **v642;
    v517 = v6 + 6;
    v9 = a2[2] + 7;
  }
  v643 = v10[503];
  if ((v643 & 0x10000000) != 0)
    v644 = 0x40000000;
  else
    v644 = 0x80000000;
  if ((v643 & 0x20000000) != 0)
    v645 = v644;
  else
    v645 = v643 & 0xCFFFFFFF;
  if ((v645 & 0x40000000) == 0)
  {
    v646 = v7 + 7;
    if ((v645 & 0x80000000) != 0)
    {
      LOBYTE(v655) = -1;
      v656 = 2;
    }
    else
    {
      v647 = *(_QWORD *)(v13 + 2448);
      v648 = v647 + 520 * v645;
      v649 = *(_QWORD *)(v648 + 312);
      v650 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v648 + 336))
      {
        *(_BYTE *)(v648 + 336) = 0;
        v651 = *(unsigned int *)(v648 + 4);
        if ((_DWORD)v651)
        {
          v838 = v650;
          v881 = v649;
          v926 = v9;
          v652 = 0;
          v653 = (unsigned __int8 *)(v647 + 520 * v645 + 36);
          do
          {
            v654 = *v653;
            v653 += 28;
            v652 = sub_223A4EC9C(v652, ((unint64_t)v654 << 8) | 1, 0xFFu);
            --v651;
          }
          while (v651);
          v655 = v652 >> 8;
          if (!(_BYTE)v652)
            LOBYTE(v655) = -1;
          v649 = v881;
          v5 = a1;
          v9 = v926;
          v650 = v838;
        }
        else
        {
          LOBYTE(v655) = -1;
        }
        *(_BYTE *)(v647 + 520 * v645 + 338) = v655;
      }
      else
      {
        LOBYTE(v655) = *(_BYTE *)(v647 + 520 * v645 + 338);
      }
      v656 = v649 > v650;
    }
    v657 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v517, v646));
    a4.f32[2] = (float)v9;
    v658.i64[0] = 0x3F0000003F000000;
    v658.i64[1] = 0x3F0000003F000000;
    v659 = vmulq_n_f32(vaddq_f32(a4, v658), v657);
    v936 = v659.i32[2];
    v935 = v659.i64[0];
    sub_223FFDF1C(v12[2], &v935, v655, v656, v657);
    v7 = *a2;
    v6 = a2[1];
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v660 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v660;
    v13 = **v660;
    v9 = a2[2] + 7;
  }
  v661 = v6 + 7;
  v662 = v10[504];
  if ((v662 & 0x10000000) != 0)
    v663 = 0x40000000;
  else
    v663 = 0x80000000;
  if ((v662 & 0x20000000) != 0)
    v664 = v663;
  else
    v664 = v662 & 0xCFFFFFFF;
  if ((v664 & 0x40000000) == 0)
  {
    if ((v664 & 0x80000000) != 0)
    {
      LOBYTE(v673) = -1;
      v674 = 2;
    }
    else
    {
      v665 = *(_QWORD *)(v13 + 2448);
      v666 = v665 + 520 * v664;
      v667 = *(_QWORD *)(v666 + 312);
      v668 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v666 + 336))
      {
        *(_BYTE *)(v666 + 336) = 0;
        v669 = *(unsigned int *)(v666 + 4);
        if ((_DWORD)v669)
        {
          v839 = v668;
          v882 = v667;
          v927 = v9;
          v670 = 0;
          v671 = (unsigned __int8 *)(v665 + 520 * v664 + 36);
          do
          {
            v672 = *v671;
            v671 += 28;
            v670 = sub_223A4EC9C(v670, ((unint64_t)v672 << 8) | 1, 0xFFu);
            --v669;
          }
          while (v669);
          v673 = v670 >> 8;
          if (!(_BYTE)v670)
            LOBYTE(v673) = -1;
          v667 = v882;
          v5 = a1;
          v9 = v927;
          v668 = v839;
        }
        else
        {
          LOBYTE(v673) = -1;
        }
        *(_BYTE *)(v665 + 520 * v664 + 338) = v673;
      }
      else
      {
        LOBYTE(v673) = *(_BYTE *)(v665 + 520 * v664 + 338);
      }
      v674 = v667 > v668;
    }
    v675 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v7));
    a4.f32[2] = (float)v9;
    v676.i64[0] = 0x3F0000003F000000;
    v676.i64[1] = 0x3F0000003F000000;
    v677 = vmulq_n_f32(vaddq_f32(a4, v676), v675);
    v936 = v677.i32[2];
    v935 = v677.i64[0];
    sub_223FFDF1C(v12[2], &v935, v673, v674, v675);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v678 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v678;
    v13 = **v678;
    v661 = a2[1] + 7;
    v9 = a2[2] + 7;
  }
  v679 = v10[505];
  if ((v679 & 0x10000000) != 0)
    v680 = 0x40000000;
  else
    v680 = 0x80000000;
  if ((v679 & 0x20000000) != 0)
    v681 = v680;
  else
    v681 = v679 & 0xCFFFFFFF;
  if ((v681 & 0x40000000) == 0)
  {
    v682 = v7 + 1;
    if ((v681 & 0x80000000) != 0)
    {
      LOBYTE(v691) = -1;
      v692 = 2;
    }
    else
    {
      v683 = *(_QWORD *)(v13 + 2448);
      v684 = v683 + 520 * v681;
      v685 = *(_QWORD *)(v684 + 312);
      v686 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v684 + 336))
      {
        *(_BYTE *)(v684 + 336) = 0;
        v687 = *(unsigned int *)(v684 + 4);
        if ((_DWORD)v687)
        {
          v840 = v686;
          v883 = v685;
          v928 = v9;
          v688 = 0;
          v689 = (unsigned __int8 *)(v683 + 520 * v681 + 36);
          do
          {
            v690 = *v689;
            v689 += 28;
            v688 = sub_223A4EC9C(v688, ((unint64_t)v690 << 8) | 1, 0xFFu);
            --v687;
          }
          while (v687);
          v691 = v688 >> 8;
          if (!(_BYTE)v688)
            LOBYTE(v691) = -1;
          v685 = v883;
          v5 = a1;
          v9 = v928;
          v686 = v840;
        }
        else
        {
          LOBYTE(v691) = -1;
        }
        *(_BYTE *)(v683 + 520 * v681 + 338) = v691;
      }
      else
      {
        LOBYTE(v691) = *(_BYTE *)(v683 + 520 * v681 + 338);
      }
      v692 = v685 > v686;
    }
    v693 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v682));
    a4.f32[2] = (float)v9;
    v694.i64[0] = 0x3F0000003F000000;
    v694.i64[1] = 0x3F0000003F000000;
    v695 = vmulq_n_f32(vaddq_f32(a4, v694), v693);
    v936 = v695.i32[2];
    v935 = v695.i64[0];
    sub_223FFDF1C(v12[2], &v935, v691, v692, v693);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v696 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v696;
    v13 = **v696;
    v661 = a2[1] + 7;
    v9 = a2[2] + 7;
  }
  v697 = v10[506];
  if ((v697 & 0x10000000) != 0)
    v698 = 0x40000000;
  else
    v698 = 0x80000000;
  if ((v697 & 0x20000000) != 0)
    v699 = v698;
  else
    v699 = v697 & 0xCFFFFFFF;
  if ((v699 & 0x40000000) == 0)
  {
    v700 = v7 + 2;
    if ((v699 & 0x80000000) != 0)
    {
      LOBYTE(v709) = -1;
      v710 = 2;
    }
    else
    {
      v701 = *(_QWORD *)(v13 + 2448);
      v702 = v701 + 520 * v699;
      v703 = *(_QWORD *)(v702 + 312);
      v704 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v702 + 336))
      {
        *(_BYTE *)(v702 + 336) = 0;
        v705 = *(unsigned int *)(v702 + 4);
        if ((_DWORD)v705)
        {
          v841 = v704;
          v884 = v703;
          v929 = v9;
          v706 = 0;
          v707 = (unsigned __int8 *)(v701 + 520 * v699 + 36);
          do
          {
            v708 = *v707;
            v707 += 28;
            v706 = sub_223A4EC9C(v706, ((unint64_t)v708 << 8) | 1, 0xFFu);
            --v705;
          }
          while (v705);
          v709 = v706 >> 8;
          if (!(_BYTE)v706)
            LOBYTE(v709) = -1;
          v703 = v884;
          v5 = a1;
          v9 = v929;
          v704 = v841;
        }
        else
        {
          LOBYTE(v709) = -1;
        }
        *(_BYTE *)(v701 + 520 * v699 + 338) = v709;
      }
      else
      {
        LOBYTE(v709) = *(_BYTE *)(v701 + 520 * v699 + 338);
      }
      v710 = v703 > v704;
    }
    v711 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v700));
    a4.f32[2] = (float)v9;
    v712.i64[0] = 0x3F0000003F000000;
    v712.i64[1] = 0x3F0000003F000000;
    v713 = vmulq_n_f32(vaddq_f32(a4, v712), v711);
    v936 = v713.i32[2];
    v935 = v713.i64[0];
    sub_223FFDF1C(v12[2], &v935, v709, v710, v711);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v714 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v714;
    v13 = **v714;
    v661 = a2[1] + 7;
    v9 = a2[2] + 7;
  }
  v715 = v10[507];
  if ((v715 & 0x10000000) != 0)
    v716 = 0x40000000;
  else
    v716 = 0x80000000;
  if ((v715 & 0x20000000) != 0)
    v717 = v716;
  else
    v717 = v715 & 0xCFFFFFFF;
  if ((v717 & 0x40000000) == 0)
  {
    v718 = v7 + 3;
    if ((v717 & 0x80000000) != 0)
    {
      LOBYTE(v727) = -1;
      v728 = 2;
    }
    else
    {
      v719 = *(_QWORD *)(v13 + 2448);
      v720 = v719 + 520 * v717;
      v721 = *(_QWORD *)(v720 + 312);
      v722 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v720 + 336))
      {
        *(_BYTE *)(v720 + 336) = 0;
        v723 = *(unsigned int *)(v720 + 4);
        if ((_DWORD)v723)
        {
          v842 = v722;
          v885 = v721;
          v930 = v9;
          v724 = 0;
          v725 = (unsigned __int8 *)(v719 + 520 * v717 + 36);
          do
          {
            v726 = *v725;
            v725 += 28;
            v724 = sub_223A4EC9C(v724, ((unint64_t)v726 << 8) | 1, 0xFFu);
            --v723;
          }
          while (v723);
          v727 = v724 >> 8;
          if (!(_BYTE)v724)
            LOBYTE(v727) = -1;
          v721 = v885;
          v5 = a1;
          v9 = v930;
          v722 = v842;
        }
        else
        {
          LOBYTE(v727) = -1;
        }
        *(_BYTE *)(v719 + 520 * v717 + 338) = v727;
      }
      else
      {
        LOBYTE(v727) = *(_BYTE *)(v719 + 520 * v717 + 338);
      }
      v728 = v721 > v722;
    }
    v729 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v718));
    a4.f32[2] = (float)v9;
    v730.i64[0] = 0x3F0000003F000000;
    v730.i64[1] = 0x3F0000003F000000;
    v731 = vmulq_n_f32(vaddq_f32(a4, v730), v729);
    v936 = v731.i32[2];
    v935 = v731.i64[0];
    sub_223FFDF1C(v12[2], &v935, v727, v728, v729);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v732 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v732;
    v13 = **v732;
    v661 = a2[1] + 7;
    v9 = a2[2] + 7;
  }
  v733 = v10[508];
  if ((v733 & 0x10000000) != 0)
    v734 = 0x40000000;
  else
    v734 = 0x80000000;
  if ((v733 & 0x20000000) != 0)
    v735 = v734;
  else
    v735 = v733 & 0xCFFFFFFF;
  if ((v735 & 0x40000000) == 0)
  {
    v736 = v7 + 4;
    if ((v735 & 0x80000000) != 0)
    {
      LOBYTE(v745) = -1;
      v746 = 2;
    }
    else
    {
      v737 = *(_QWORD *)(v13 + 2448);
      v738 = v737 + 520 * v735;
      v739 = *(_QWORD *)(v738 + 312);
      v740 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v738 + 336))
      {
        *(_BYTE *)(v738 + 336) = 0;
        v741 = *(unsigned int *)(v738 + 4);
        if ((_DWORD)v741)
        {
          v843 = v740;
          v886 = v739;
          v931 = v9;
          v742 = 0;
          v743 = (unsigned __int8 *)(v737 + 520 * v735 + 36);
          do
          {
            v744 = *v743;
            v743 += 28;
            v742 = sub_223A4EC9C(v742, ((unint64_t)v744 << 8) | 1, 0xFFu);
            --v741;
          }
          while (v741);
          v745 = v742 >> 8;
          if (!(_BYTE)v742)
            LOBYTE(v745) = -1;
          v739 = v886;
          v5 = a1;
          v9 = v931;
          v740 = v843;
        }
        else
        {
          LOBYTE(v745) = -1;
        }
        *(_BYTE *)(v737 + 520 * v735 + 338) = v745;
      }
      else
      {
        LOBYTE(v745) = *(_BYTE *)(v737 + 520 * v735 + 338);
      }
      v746 = v739 > v740;
    }
    v747 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v736));
    a4.f32[2] = (float)v9;
    v748.i64[0] = 0x3F0000003F000000;
    v748.i64[1] = 0x3F0000003F000000;
    v749 = vmulq_n_f32(vaddq_f32(a4, v748), v747);
    v936 = v749.i32[2];
    v935 = v749.i64[0];
    sub_223FFDF1C(v12[2], &v935, v745, v746, v747);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v750 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v750;
    v13 = **v750;
    v661 = a2[1] + 7;
    v9 = a2[2] + 7;
  }
  v751 = v10[509];
  if ((v751 & 0x10000000) != 0)
    v752 = 0x40000000;
  else
    v752 = 0x80000000;
  if ((v751 & 0x20000000) != 0)
    v753 = v752;
  else
    v753 = v751 & 0xCFFFFFFF;
  if ((v753 & 0x40000000) == 0)
  {
    v754 = v7 + 5;
    if ((v753 & 0x80000000) != 0)
    {
      LOBYTE(v763) = -1;
      v764 = 2;
    }
    else
    {
      v755 = *(_QWORD *)(v13 + 2448);
      v756 = v755 + 520 * v753;
      v757 = *(_QWORD *)(v756 + 312);
      v758 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v756 + 336))
      {
        *(_BYTE *)(v756 + 336) = 0;
        v759 = *(unsigned int *)(v756 + 4);
        if ((_DWORD)v759)
        {
          v844 = v758;
          v887 = v757;
          v932 = v9;
          v760 = 0;
          v761 = (unsigned __int8 *)(v755 + 520 * v753 + 36);
          do
          {
            v762 = *v761;
            v761 += 28;
            v760 = sub_223A4EC9C(v760, ((unint64_t)v762 << 8) | 1, 0xFFu);
            --v759;
          }
          while (v759);
          v763 = v760 >> 8;
          if (!(_BYTE)v760)
            LOBYTE(v763) = -1;
          v757 = v887;
          v5 = a1;
          v9 = v932;
          v758 = v844;
        }
        else
        {
          LOBYTE(v763) = -1;
        }
        *(_BYTE *)(v755 + 520 * v753 + 338) = v763;
      }
      else
      {
        LOBYTE(v763) = *(_BYTE *)(v755 + 520 * v753 + 338);
      }
      v764 = v757 > v758;
    }
    v765 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v754));
    a4.f32[2] = (float)v9;
    v766.i64[0] = 0x3F0000003F000000;
    v766.i64[1] = 0x3F0000003F000000;
    v767 = vmulq_n_f32(vaddq_f32(a4, v766), v765);
    v936 = v767.i32[2];
    v935 = v767.i64[0];
    sub_223FFDF1C(v12[2], &v935, v763, v764, v765);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v768 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v768;
    v13 = **v768;
    v661 = a2[1] + 7;
    v9 = a2[2] + 7;
  }
  v769 = v10[510];
  if ((v769 & 0x10000000) != 0)
    v770 = 0x40000000;
  else
    v770 = 0x80000000;
  if ((v769 & 0x20000000) != 0)
    v771 = v770;
  else
    v771 = v769 & 0xCFFFFFFF;
  if ((v771 & 0x40000000) == 0)
  {
    v772 = v7 + 6;
    if ((v771 & 0x80000000) != 0)
    {
      LOBYTE(v781) = -1;
      v782 = 2;
    }
    else
    {
      v773 = *(_QWORD *)(v13 + 2448);
      v774 = v773 + 520 * v771;
      v775 = *(_QWORD *)(v774 + 312);
      v776 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v774 + 336))
      {
        *(_BYTE *)(v774 + 336) = 0;
        v777 = *(unsigned int *)(v774 + 4);
        if ((_DWORD)v777)
        {
          v845 = v776;
          v888 = v775;
          v933 = v9;
          v778 = 0;
          v779 = (unsigned __int8 *)(v773 + 520 * v771 + 36);
          do
          {
            v780 = *v779;
            v779 += 28;
            v778 = sub_223A4EC9C(v778, ((unint64_t)v780 << 8) | 1, 0xFFu);
            --v777;
          }
          while (v777);
          v781 = v778 >> 8;
          if (!(_BYTE)v778)
            LOBYTE(v781) = -1;
          v775 = v888;
          v5 = a1;
          v9 = v933;
          v776 = v845;
        }
        else
        {
          LOBYTE(v781) = -1;
        }
        *(_BYTE *)(v773 + 520 * v771 + 338) = v781;
      }
      else
      {
        LOBYTE(v781) = *(_BYTE *)(v773 + 520 * v771 + 338);
      }
      v782 = v775 > v776;
    }
    v783 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v772));
    a4.f32[2] = (float)v9;
    v784.i64[0] = 0x3F0000003F000000;
    v784.i64[1] = 0x3F0000003F000000;
    v785 = vmulq_n_f32(vaddq_f32(a4, v784), v783);
    v936 = v785.i32[2];
    v935 = v785.i64[0];
    sub_223FFDF1C(v12[2], &v935, v781, v782, v783);
    v7 = *a2;
    v10 = *(_DWORD **)(*(_QWORD *)v5 + 8);
    v786 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
    v12 = *v786;
    v13 = **v786;
    v661 = a2[1] + 7;
    v9 = a2[2] + 7;
  }
  v787 = v10[511];
  if ((v787 & 0x10000000) != 0)
    v788 = 0x40000000;
  else
    v788 = 0x80000000;
  if ((v787 & 0x20000000) != 0)
    v789 = v788;
  else
    v789 = v787 & 0xCFFFFFFF;
  if ((v789 & 0x40000000) == 0)
  {
    if ((v789 & 0x80000000) != 0)
    {
      LOBYTE(v798) = -1;
      v799 = 2;
    }
    else
    {
      v790 = *(_QWORD *)(v13 + 2448);
      v791 = v790 + 520 * v789;
      v792 = *(_QWORD *)(v791 + 312);
      v793 = *(_QWORD *)v12[1];
      if (*(_BYTE *)(v791 + 336))
      {
        *(_BYTE *)(v791 + 336) = 0;
        v794 = *(unsigned int *)(v791 + 4);
        if ((_DWORD)v794)
        {
          v890 = v792;
          v934 = v9;
          v795 = 0;
          v796 = (unsigned __int8 *)(v790 + 520 * v789 + 36);
          do
          {
            v797 = *v796;
            v796 += 28;
            v795 = sub_223A4EC9C(v795, ((unint64_t)v797 << 8) | 1, 0xFFu);
            --v794;
          }
          while (v794);
          v798 = v795 >> 8;
          if (!(_BYTE)v795)
            LOBYTE(v798) = -1;
          v9 = v934;
          v792 = v890;
        }
        else
        {
          LOBYTE(v798) = -1;
        }
        *(_BYTE *)(v790 + 520 * v789 + 338) = v798;
      }
      else
      {
        LOBYTE(v798) = *(_BYTE *)(v790 + 520 * v789 + 338);
      }
      v799 = v792 > v793;
    }
    v800 = *(float *)(v13 + 144);
    *(float32x2_t *)a4.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v661, v7 + 7));
    a4.f32[2] = (float)v9;
    v801.i64[0] = 0x3F0000003F000000;
    v801.i64[1] = 0x3F0000003F000000;
    v802 = vmulq_n_f32(vaddq_f32(a4, v801), v800);
    v936 = v802.i32[2];
    v935 = v802.i64[0];
    sub_223FFDF1C(v12[2], &v935, v798, v799, v800);
  }
}

uint64_t sub_223D84F84(uint64_t a1, int a2, int a3, char a4, _QWORD *a5, double a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, double a10, float32x4_t a11)
{
  unsigned int v14;
  uint64_t v15;
  int32x2_t v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t result;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  double v24;
  float32x4_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _BYTE v34[12];
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;
  char v60;
  uint64_t v61;
  int v62;
  char v63;
  char v64;
  uint64_t v65;
  int v66;
  char v67;
  char v68;
  uint64_t v69;
  int v70;
  char v71;
  char v72;
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  uint64_t v77;
  int v78;
  char v79;
  char v80;
  uint64_t v81;
  int v82;
  char v83;
  char v84;
  uint64_t v85;
  int v86;
  char v87;
  char v88;
  int v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  int v94;
  char v95;
  char v96;
  int v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  int v102;
  char v103;
  char v104;
  int v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  int v110;
  char v111;
  char v112;
  int v113;
  uint64_t v114;
  char v115;
  char v116;
  uint64_t v117;
  int v118;
  char v119;
  char v120;
  int v121;
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  int v126;
  char v127;
  char v128;
  int v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t v133;
  int v134;
  char v135;
  char v136;
  int v137;
  uint64_t v138;
  char v139;
  int32x2_t v140;
  int v141;
  uint64_t v142;
  int v143;

  v14 = a3 & 0xCFFFFFFF;
  v15 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v16 = *(int32x2_t *)v15;
  v141 = *(_DWORD *)(v15 + 8);
  v140 = v16;
  v17 = *(_QWORD *)(v15 + 12);
  v143 = *(_DWORD *)(v15 + 20);
  v142 = v17;
  v34[0] = 1;
  v18.i64[0] = -1;
  v18.i64[1] = -1;
  *(_QWORD *)&v34[4] = -1;
  LODWORD(v35) = -1;
  BYTE4(v35) = 8;
  LOBYTE(v36) = 1;
  v37 = -1;
  v38 = -1;
  v39 = 8;
  v40 = 1;
  v41 = -1;
  v42 = -1;
  v43 = 8;
  v44 = 1;
  v45 = -1;
  v46 = -1;
  v47 = 8;
  v48 = 1;
  v49 = -1;
  v50 = -1;
  v51 = 8;
  v52 = 1;
  v53 = -1;
  v54 = -1;
  v55 = 8;
  v56 = 1;
  v57 = -1;
  v58 = -1;
  v59 = 8;
  v60 = 1;
  v61 = -1;
  v62 = -1;
  v63 = 8;
  v64 = 1;
  v65 = -1;
  v66 = -1;
  v67 = 8;
  v68 = 1;
  v69 = -1;
  v70 = -1;
  v71 = 8;
  v72 = 1;
  v73 = -1;
  v74 = -1;
  v75 = 8;
  v76 = 1;
  v77 = -1;
  v78 = -1;
  v79 = 8;
  v80 = 1;
  v81 = -1;
  v82 = -1;
  v83 = 8;
  v84 = 1;
  v85 = -1;
  v86 = -1;
  v87 = 8;
  v88 = 1;
  v89 = -1;
  v90 = -1;
  v91 = 8;
  v92 = 1;
  v93 = -1;
  v94 = -1;
  v95 = 8;
  v96 = 1;
  v97 = -1;
  v98 = -1;
  v99 = 8;
  v100 = 1;
  v101 = -1;
  v102 = -1;
  v103 = 8;
  v104 = 1;
  v105 = -1;
  v106 = -1;
  v107 = 8;
  v108 = 1;
  v109 = -1;
  v110 = -1;
  v111 = 8;
  v112 = 1;
  v113 = -1;
  v114 = -1;
  v115 = 8;
  v116 = 1;
  v117 = -1;
  v118 = -1;
  v119 = 8;
  v120 = 1;
  v121 = -1;
  v122 = -1;
  v123 = 8;
  v124 = 1;
  v125 = -1;
  v126 = -1;
  v127 = 8;
  v128 = 1;
  v129 = -1;
  v130 = -1;
  v131 = 8;
  v132 = 1;
  v133 = -1;
  v134 = -1;
  v135 = 8;
  v136 = 1;
  v137 = -1;
  v138 = -1;
  v139 = 8;
  result = sub_223D854A4(a5, a4, a2, 0, &v140, *(_DWORD *)(v15 + 64), (uint64_t)v34, v18, a7, a8, a9, a10, a11);
  if (a2)
  {
    v26 = result;
    if ((_DWORD)result != 3)
    {
      v27 = (a2 - 1);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD *)(a1 + 184);
        if ((*(_DWORD *)(v28 + 4488 * v14 + 24) & 0x80000000) == 0)
        {
          result = sub_223D84F84(a1, v27);
          v28 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v28 + 4488 * v14 + 28) & 0x80000000) == 0)
        {
          result = sub_223D84F84(a1, v27);
          v28 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v28 + 4488 * v14 + 32) & 0x80000000) == 0)
        {
          result = sub_223D84F84(a1, v27);
          v28 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v28 + 4488 * v14 + 36) & 0x80000000) == 0)
        {
          result = sub_223D84F84(a1, v27);
          v28 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v28 + 4488 * v14 + 40) & 0x80000000) == 0)
        {
          result = sub_223D84F84(a1, v27);
          v28 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v28 + 4488 * v14 + 44) & 0x80000000) == 0)
        {
          result = sub_223D84F84(a1, v27);
          v28 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v28 + 4488 * v14 + 48) & 0x80000000) == 0)
        {
          result = sub_223D84F84(a1, v27);
          v28 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v28 + 4488 * v14 + 52) & 0x80000000) == 0)
          return sub_223D84F84(a1, v27);
      }
      else
      {
        for (i = 0; i != 8; ++i)
        {
          v30 = byte_22466FA9C[i];
          v31 = *(_QWORD *)(a1 + 184);
          v32 = *(_DWORD *)(v31 + 4488 * v14 + 4 * v30 + 24);
          if ((v32 & 0x80000000) == 0)
          {
            v33 = (v142 - v140.i32[0]) >> 1;
            *(int32x2_t *)v22.f32 = vdup_n_s32(v33);
            *(int32x2_t *)v21.f32 = vmla_s32(v140, *(int32x2_t *)v22.f32, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v30), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
            *(_QWORD *)v34 = v21.i64[0];
            *(_DWORD *)&v34[8] = v141 + v33 * (v30 & 1);
            *(int32x2_t *)v20.f32 = vadd_s32(*(int32x2_t *)v21.f32, *(int32x2_t *)v22.f32);
            v35 = v20.i64[0];
            v36 = *(_DWORD *)&v34[8] + v33;
            result = sub_223D854A4(a5, v26 == 2, 0, v32, (int32x2_t *)v34, v32 >> 30 == 0, v31 + 4488 * v14 + 540 * v30 + 68, v20, v21, v22, v23, v24, v25);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_223D854A4(_QWORD *a1, char a2, int a3, unsigned int a4, int32x2_t *a5, int a6, uint64_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, double a12, float32x4_t a13)
{
  int v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  double v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  double v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  double v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  double v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  double v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  double v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  double v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  double v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  double v64;
  float32x2_t v65;
  float32x4_t v66;
  float32x4_t v67;
  double v68;
  float32x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  double v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  double v76;
  float32x2_t v77;
  float32x4_t v78;
  float32x4_t v79;
  double v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x4_t v83;
  double v84;
  float32x2_t v85;
  float32x4_t v86;
  float32x4_t v87;
  double v88;
  float32x2_t v89;
  float32x4_t v90;
  float32x4_t v91;
  double v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  double v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x4_t v99;
  double v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x4_t v103;
  double v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x4_t v107;
  double v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  double v112;
  float32x2_t v113;
  float32x4_t v114;
  float32x4_t v115;
  double v116;
  float32x2_t v117;
  float32x4_t v118;
  float32x4_t v119;
  double v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x4_t v123;
  double v124;
  float32x2_t v125;
  float32x4_t v126;
  float32x4_t v127;
  double v128;
  float32x2_t v129;
  float32x4_t v130;
  float32x4_t v131;
  double v132;
  float32x2_t v133;
  float32x4_t v134;
  float32x4_t v135;
  double v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  double v140;
  float32x2_t v141;
  float32x4_t v142;
  float32x4_t v143;
  double v144;
  float32x2_t v145;
  float32x4_t v146;
  float32x4_t v147;
  double v148;
  float32x2_t v149;
  float32x4_t v150;
  float32x4_t v151;
  double v152;
  float32x2_t v153;
  float32x4_t v154;
  float32x4_t v155;
  double v156;
  float32x2_t v157;
  float32x4_t v158;
  float32x4_t v159;
  double v160;
  float32x2_t v161;
  float32x4_t v162;
  float32x4_t v163;
  double v164;
  float32x2_t v165;
  float32x4_t v166;
  float32x4_t v167;
  double v168;
  float32x2_t v169;
  float32x4_t v170;
  float32x4_t v171;
  double v172;
  float32x2_t v173;
  float32x4_t v174;
  float32x4_t v175;
  double v176;
  float32x2_t v177;
  float32x4_t v178;
  float32x4_t v179;
  double v180;
  float32x2_t v181;
  float32x4_t v182;
  float32x4_t v183;
  double v184;
  float32x2_t v185;
  float32x4_t v186;
  float32x4_t v187;
  double v188;
  float32x2_t v189;
  float32x4_t v190;
  float32x4_t v191;
  double v192;
  float32x2_t v193;
  float32x4_t v194;
  float32x4_t v195;
  double v196;
  float32x2_t v197;
  float32x4_t v198;
  float32x4_t v199;
  double v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x4_t v203;
  double v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x4_t v207;
  double v208;
  float32x2_t v209;
  float32x4_t v210;
  float32x4_t v211;
  double v212;
  float32x2_t v213;
  float32x4_t v214;
  float32x4_t v215;
  double v216;
  float32x2_t v217;
  float32x4_t v218;
  float32x4_t v219;
  double v220;
  float32x2_t v221;
  float32x4_t v222;
  float32x4_t v223;
  double v224;
  float32x2_t v225;
  float32x4_t v226;
  float32x4_t v227;
  double v228;
  float32x2_t v229;
  float32x4_t v230;
  float32x4_t v231;
  double v232;
  float32x2_t v233;
  float32x4_t v234;
  float32x4_t v235;
  double v236;
  float32x2_t v237;
  float32x4_t v238;
  float32x4_t v239;
  double v240;
  float32x2_t v241;
  float32x4_t v242;
  float32x4_t v243;
  double v244;
  float32x2_t v245;
  float32x4_t v246;
  float32x4_t v247;
  double v248;
  float32x2_t v249;
  float32x4_t v250;
  float32x4_t v251;
  double v252;
  float32x2_t v253;
  float32x4_t v254;
  float32x4_t v255;
  double v256;
  float32x2_t v257;
  float32x4_t v258;
  float32x4_t v259;
  double v260;
  float32x2_t v261;
  float32x4_t v262;
  float32x4_t v263;
  double v264;
  float32x2_t v265;
  float32x4_t v266;
  float32x4_t v267;
  double v268;
  float32x2_t v269;
  float32x4_t v270;
  float32x4_t v271;
  double v272;
  float32x2_t v273;
  float32x4_t v274;
  float32x4_t v275;
  double v276;
  float32x2_t v277;
  float32x4_t v278;
  float32x4_t v279;
  double v280;
  float32x2_t v281;
  float32x4_t v282;
  float32x4_t v283;
  double v284;
  float32x2_t v285;
  float32x4_t v286;
  float32x4_t v287;
  double v288;
  float32x2_t v289;
  float32x4_t v290;
  float32x4_t v291;
  double v292;
  float32x2_t v293;
  float32x4_t v294;
  float32x4_t v295;
  double v296;
  float32x2_t v297;
  float32x4_t v298;
  float32x4_t v299;
  double v300;
  float32x2_t v301;
  float32x4_t v302;
  float32x4_t v303;
  double v304;
  float32x2_t v305;
  float32x4_t v306;
  float32x4_t v307;
  double v308;
  float32x2_t v309;
  float32x4_t v310;
  float32x4_t v311;
  double v312;
  float32x2_t v313;
  float32x4_t v314;
  float32x4_t v315;
  double v316;
  float32x2_t v317;
  float32x4_t v318;
  float32x4_t v319;
  double v320;
  float32x2_t v321;
  float32x4_t v322;
  float32x4_t v323;
  double v324;
  float32x2_t v325;
  float32x4_t v326;
  float32x4_t v327;
  double v328;
  float32x2_t v329;
  float32x4_t v330;
  float32x4_t v331;
  double v332;
  float32x2_t v333;
  float32x4_t v334;
  float32x4_t v335;
  double v336;
  float32x2_t v337;
  float32x4_t v338;
  float32x4_t v339;
  double v340;
  float32x2_t v341;
  float32x4_t v342;
  float32x4_t v343;
  double v344;
  float32x2_t v345;
  float32x4_t v346;
  float32x4_t v347;
  double v348;
  float32x2_t v349;
  float32x4_t v350;
  float32x4_t v351;
  double v352;
  float32x2_t v353;
  float32x4_t v354;
  float32x4_t v355;
  double v356;
  float32x2_t v357;
  float32x4_t v358;
  float32x4_t v359;
  double v360;
  float32x2_t v361;
  float32x4_t v362;
  float32x4_t v363;
  double v364;
  float32x2_t v365;
  float32x4_t v366;
  float32x4_t v367;
  double v368;
  float32x2_t v369;
  float32x4_t v370;
  float32x4_t v371;
  double v372;
  float32x2_t v373;
  float32x4_t v374;
  float32x4_t v375;
  double v376;
  float32x2_t v377;
  float32x4_t v378;
  float32x4_t v379;
  double v380;
  float32x2_t v381;
  float32x4_t v382;
  float32x4_t v383;
  double v384;
  float32x2_t v385;
  float32x4_t v386;
  float32x4_t v387;
  double v388;
  float32x2_t v389;
  float32x4_t v390;
  float32x4_t v391;
  double v392;
  float32x2_t v393;
  float32x4_t v394;
  float32x4_t v395;
  double v396;
  float32x2_t v397;
  float32x4_t v398;
  float32x4_t v399;
  double v400;
  float32x2_t v401;
  float32x4_t v402;
  float32x4_t v403;
  double v404;
  float32x2_t v405;
  float32x4_t v406;
  float32x4_t v407;
  double v408;
  float32x2_t v409;
  float32x4_t v410;
  float32x4_t v411;
  double v412;
  float32x2_t v413;
  float32x4_t v414;
  float32x4_t v415;
  double v416;
  float32x2_t v417;
  float32x4_t v418;
  float32x4_t v419;
  double v420;
  float32x2_t v421;
  float32x4_t v422;
  float32x4_t v423;
  double v424;
  float32x2_t v425;
  float32x4_t v426;
  float32x4_t v427;
  double v428;
  float32x2_t v429;
  float32x4_t v430;
  float32x4_t v431;
  double v432;
  float32x2_t v433;
  float32x4_t v434;
  float32x4_t v435;
  double v436;
  float32x2_t v437;
  float32x4_t v438;
  float32x4_t v439;
  double v440;
  float32x2_t v441;
  float32x4_t v442;
  float32x4_t v443;
  double v444;
  float32x2_t v445;
  float32x4_t v446;
  float32x4_t v447;
  double v448;
  float32x2_t v449;
  float32x4_t v450;
  float32x4_t v451;
  double v452;
  float32x2_t v453;
  float32x4_t v454;
  float32x4_t v455;
  double v456;
  float32x2_t v457;
  float32x4_t v458;
  float32x4_t v459;
  double v460;
  float32x2_t v461;
  float32x4_t v462;
  float32x4_t v463;
  double v464;
  float32x2_t v465;
  float32x4_t v466;
  float32x4_t v467;
  double v468;
  float32x2_t v469;
  float32x4_t v470;
  float32x4_t v471;
  double v472;
  float32x2_t v473;
  float32x4_t v474;
  float32x4_t v475;
  double v476;
  float32x2_t v477;
  float32x4_t v478;
  float32x4_t v479;
  double v480;
  float32x2_t v481;
  float32x4_t v482;
  float32x4_t v483;
  double v484;
  float32x2_t v485;
  float32x4_t v486;
  float32x4_t v487;
  double v488;
  float32x2_t v489;
  float32x4_t v490;
  float32x4_t v491;
  double v492;
  float32x2_t v493;
  float32x4_t v494;
  float32x4_t v495;
  double v496;
  float32x2_t v497;
  float32x4_t v498;
  float32x4_t v499;
  double v500;
  float32x2_t v501;
  float32x4_t v502;
  float32x4_t v503;
  double v504;
  float32x2_t v505;
  float32x4_t v506;
  float32x4_t v507;
  double v508;
  float32x2_t v509;
  float32x4_t v510;
  float32x4_t v511;
  double v512;
  float32x2_t v513;
  float32x4_t v514;
  float32x4_t v515;
  double v516;
  float32x2_t v517;
  float32x4_t v518;
  float32x4_t v519;
  double v520;
  float32x2_t v521;
  float32x4_t v522;
  float32x4_t v523;
  double v524;
  float32x2_t v525;
  float32x4_t v526;
  float32x4_t v527;
  double v528;
  float32x2_t v529;
  float32x4_t v530;
  float32x4_t v531;
  double v532;
  float32x2_t v533;
  float32x4_t v534;
  float32x4_t v535;
  double v536;
  float32x2_t v537;
  float32x4_t v538;
  float32x4_t v539;
  double v540;
  float32x2_t v541;
  float32x4_t v542;
  float32x4_t v543;
  double v544;
  float32x2_t v545;
  float32x4_t v546;
  float32x4_t v547;
  double v548;
  float32x2_t v549;
  float32x4_t v550;
  float32x4_t v551;
  double v552;
  float32x2_t v553;
  float32x4_t v554;
  float32x4_t v555;
  double v556;
  float32x2_t v557;
  float32x4_t v558;
  float32x4_t v559;
  double v560;
  float32x2_t v561;
  float32x4_t v562;
  float32x4_t v563;
  double v564;
  float32x2_t v565;
  float32x4_t v566;
  float32x4_t v567;
  double v568;
  float32x2_t v569;
  float32x4_t v570;
  float32x4_t v571;
  double v572;
  float32x2_t v573;
  float32x4_t v574;
  float32x4_t v575;
  double v576;
  float32x2_t v577;
  float32x4_t v578;
  float32x4_t v579;
  double v580;
  float32x2_t v581;
  float32x4_t v582;
  float32x4_t v583;
  double v584;
  float32x2_t v585;
  float32x4_t v586;
  float32x4_t v587;
  double v588;
  float32x2_t v589;
  float32x4_t v590;
  float32x4_t v591;
  double v592;
  float32x2_t v593;
  float32x4_t v594;
  float32x4_t v595;
  double v596;
  float32x2_t v597;
  float32x4_t v598;
  float32x4_t v599;
  double v600;
  float32x2_t v601;
  float32x4_t v602;
  float32x4_t v603;
  double v604;
  float32x2_t v605;
  float32x4_t v606;
  float32x4_t v607;
  double v608;
  float32x2_t v609;
  float32x4_t v610;
  float32x4_t v611;
  double v612;
  float32x2_t v613;
  float32x4_t v614;
  float32x4_t v615;
  double v616;
  float32x2_t v617;
  float32x4_t v618;
  float32x4_t v619;
  double v620;
  float32x2_t v621;
  float32x4_t v622;
  float32x4_t v623;
  double v624;
  float32x2_t v625;
  float32x4_t v626;
  float32x4_t v627;
  double v628;
  float32x2_t v629;
  float32x4_t v630;
  float32x4_t v631;
  double v632;
  float32x2_t v633;
  float32x4_t v634;
  float32x4_t v635;
  double v636;
  float32x2_t v637;
  float32x4_t v638;
  float32x4_t v639;
  double v640;
  float32x2_t v641;
  float32x4_t v642;
  float32x4_t v643;
  double v644;
  float32x2_t v645;
  float32x4_t v646;
  float32x4_t v647;
  double v648;
  float32x2_t v649;
  float32x4_t v650;
  float32x4_t v651;
  double v652;
  float32x2_t v653;
  float32x4_t v654;
  float32x4_t v655;
  double v656;
  float32x2_t v657;
  float32x4_t v658;
  float32x4_t v659;
  double v660;
  float32x2_t v661;
  float32x4_t v662;
  float32x4_t v663;
  double v664;
  float32x2_t v665;
  float32x4_t v666;
  float32x4_t v667;
  double v668;
  float32x2_t v669;
  float32x4_t v670;
  float32x4_t v671;
  double v672;
  float32x2_t v673;
  float32x4_t v674;
  float32x4_t v675;
  double v676;
  float32x2_t v677;
  float32x4_t v678;
  float32x4_t v679;
  double v680;
  float32x2_t v681;
  float32x4_t v682;
  float32x4_t v683;
  double v684;
  float32x2_t v685;
  float32x4_t v686;
  float32x4_t v687;
  double v688;
  float32x2_t v689;
  float32x4_t v690;
  float32x4_t v691;
  double v692;
  float32x2_t v693;
  int32x2_t v694;
  uint64_t *v695;
  uint64_t v696;
  uint64_t v697;
  int v698;
  _OWORD v699[2];
  char *v700;
  int32x2_t v701;
  __int32 v702;
  int32x2_t v703;
  __int32 v704;
  _BYTE v705[32];
  char *v706;
  char v707;

  if (!a6)
    return 3;
  v18 = 2;
  v698 = 2;
  if ((a2 & 1) == 0)
  {
    v19 = *(_QWORD *)(*a1 + 8);
    a8.i32[0] = *(_DWORD *)(*(_QWORD *)*a1 + 144);
    *(float32x2_t *)a10.f32 = vcvt_f32_s32(*a5);
    a11.f32[0] = (float)a5[1].i32[0];
    a10.f32[2] = a11.f32[0];
    v20 = vmulq_n_f32(a10, a8.f32[0]);
    a8.f32[0] = a8.f32[0] * (float)(int)(a5[1].i32[1] - *(_QWORD *)a5);
    *(_DWORD *)&v705[8] = v20.i32[2];
    *(_QWORD *)v705 = v20.i64[0];
    v21 = vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0));
    *(_DWORD *)&v705[20] = v21.i32[2];
    *(_QWORD *)&v705[12] = v21.i64[0];
    if (*(_BYTE *)(v19 + 20) == 1)
    {
      v18 = sub_223E998FC((float *)v705, (float *)v19, *(float *)(v19 + 12), *(float *)(v19 + 16), v20, *(double *)a11.i64, a12, a13);
      v698 = v18;
      if (!v18)
        return 3;
    }
    else if (*(_BYTE *)(v19 + 20))
    {
      v18 = sub_223E99B90((float *)v705, (float *)v19, *(float *)(v19 + 12), *(float *)(v19 + 16), v20, a11);
      v698 = v18;
      if (!v18)
        return 3;
    }
    else
    {
      v18 = sub_223E99668((float *)v705, (float *)v19, *(float *)(v19 + 12), *(float *)(v19 + 16), v20, a11);
      v698 = v18;
      if (!v18)
        return 3;
    }
  }
  if (!a3)
  {
    v23 = (_QWORD *)a1[1];
    v707 = 1;
    v24 = *v23;
    v25 = *(_QWORD *)(*v23 + 2328);
    if (a4 >= (unint64_t)((*(_QWORD *)(*v23 + 2336) - v25) >> 11))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v25 = *(_QWORD *)(v24 + 2328);
    }
    *(_QWORD *)v705 = v24;
    *(_QWORD *)&v705[8] = v25 + ((unint64_t)a4 << 11);
    *(_QWORD *)&v705[16] = v23[1];
    *(_QWORD *)&v705[24] = a7;
    v706 = &v707;
    if (v18 == 2)
    {
      *(_QWORD *)&v699[0] = v705;
      *((_QWORD *)&v699[0] + 1) = &v698;
      sub_223D86500((uint64_t)v705, 0, a8, a9, *(double *)a10.i64, *(float32x2_t *)a11.f32);
      sub_223D86500(*(uint64_t *)&v699[0], 1u, v26, v27, v28, v29);
      sub_223D86500(*(uint64_t *)&v699[0], 2u, v30, v31, v32, v33);
      sub_223D86500(*(uint64_t *)&v699[0], 3u, v34, v35, v36, v37);
      sub_223D86500(*(uint64_t *)&v699[0], 4u, v38, v39, v40, v41);
      sub_223D86500(*(uint64_t *)&v699[0], 5u, v42, v43, v44, v45);
      sub_223D86500(*(uint64_t *)&v699[0], 6u, v46, v47, v48, v49);
      sub_223D86500(*(uint64_t *)&v699[0], 7u, v50, v51, v52, v53);
      sub_223D86500(*(uint64_t *)&v699[0], 8u, v54, v55, v56, v57);
      sub_223D86500(*(uint64_t *)&v699[0], 9u, v58, v59, v60, v61);
      sub_223D86500(*(uint64_t *)&v699[0], 0xAu, v62, v63, v64, v65);
      sub_223D86500(*(uint64_t *)&v699[0], 0xBu, v66, v67, v68, v69);
      sub_223D86500(*(uint64_t *)&v699[0], 0xCu, v70, v71, v72, v73);
      sub_223D86500(*(uint64_t *)&v699[0], 0xDu, v74, v75, v76, v77);
      sub_223D86500(*(uint64_t *)&v699[0], 0xEu, v78, v79, v80, v81);
      sub_223D86500(*(uint64_t *)&v699[0], 0xFu, v82, v83, v84, v85);
      sub_223D86500(*(uint64_t *)&v699[0], 0x10u, v86, v87, v88, v89);
      sub_223D86500(*(uint64_t *)&v699[0], 0x11u, v90, v91, v92, v93);
      sub_223D86500(*(uint64_t *)&v699[0], 0x12u, v94, v95, v96, v97);
      sub_223D86500(*(uint64_t *)&v699[0], 0x13u, v98, v99, v100, v101);
      sub_223D86500(*(uint64_t *)&v699[0], 0x14u, v102, v103, v104, v105);
      sub_223D86500(*(uint64_t *)&v699[0], 0x15u, v106, v107, v108, v109);
      sub_223D86500(*(uint64_t *)&v699[0], 0x16u, v110, v111, v112, v113);
      sub_223D86500(*(uint64_t *)&v699[0], 0x17u, v114, v115, v116, v117);
      sub_223D86500(*(uint64_t *)&v699[0], 0x18u, v118, v119, v120, v121);
      sub_223D86500(*(uint64_t *)&v699[0], 0x19u, v122, v123, v124, v125);
      sub_223D86500(*(uint64_t *)&v699[0], 0x1Au, v126, v127, v128, v129);
      sub_223D86500(*(uint64_t *)&v699[0], 0x1Bu, v130, v131, v132, v133);
      sub_223D86500(*(uint64_t *)&v699[0], 0x1Cu, v134, v135, v136, v137);
      sub_223D86500(*(uint64_t *)&v699[0], 0x1Du, v138, v139, v140, v141);
      sub_223D86500(*(uint64_t *)&v699[0], 0x1Eu, v142, v143, v144, v145);
      sub_223D86500(*(uint64_t *)&v699[0], 0x1Fu, v146, v147, v148, v149);
      sub_223D86500(*(uint64_t *)&v699[0], 0x20u, v150, v151, v152, v153);
      sub_223D86500(*(uint64_t *)&v699[0], 0x21u, v154, v155, v156, v157);
      sub_223D86500(*(uint64_t *)&v699[0], 0x22u, v158, v159, v160, v161);
      sub_223D86500(*(uint64_t *)&v699[0], 0x23u, v162, v163, v164, v165);
      sub_223D86500(*(uint64_t *)&v699[0], 0x24u, v166, v167, v168, v169);
      sub_223D86500(*(uint64_t *)&v699[0], 0x25u, v170, v171, v172, v173);
      sub_223D86500(*(uint64_t *)&v699[0], 0x26u, v174, v175, v176, v177);
      sub_223D86500(*(uint64_t *)&v699[0], 0x27u, v178, v179, v180, v181);
      sub_223D86500(*(uint64_t *)&v699[0], 0x28u, v182, v183, v184, v185);
      sub_223D86500(*(uint64_t *)&v699[0], 0x29u, v186, v187, v188, v189);
      sub_223D86500(*(uint64_t *)&v699[0], 0x2Au, v190, v191, v192, v193);
      sub_223D86500(*(uint64_t *)&v699[0], 0x2Bu, v194, v195, v196, v197);
      sub_223D86500(*(uint64_t *)&v699[0], 0x2Cu, v198, v199, v200, v201);
      sub_223D86500(*(uint64_t *)&v699[0], 0x2Du, v202, v203, v204, v205);
      sub_223D86500(*(uint64_t *)&v699[0], 0x2Eu, v206, v207, v208, v209);
      sub_223D86500(*(uint64_t *)&v699[0], 0x2Fu, v210, v211, v212, v213);
      sub_223D86500(*(uint64_t *)&v699[0], 0x30u, v214, v215, v216, v217);
      sub_223D86500(*(uint64_t *)&v699[0], 0x31u, v218, v219, v220, v221);
      sub_223D86500(*(uint64_t *)&v699[0], 0x32u, v222, v223, v224, v225);
      sub_223D86500(*(uint64_t *)&v699[0], 0x33u, v226, v227, v228, v229);
      sub_223D86500(*(uint64_t *)&v699[0], 0x34u, v230, v231, v232, v233);
      sub_223D86500(*(uint64_t *)&v699[0], 0x35u, v234, v235, v236, v237);
      sub_223D86500(*(uint64_t *)&v699[0], 0x36u, v238, v239, v240, v241);
      sub_223D86500(*(uint64_t *)&v699[0], 0x37u, v242, v243, v244, v245);
      sub_223D86500(*(uint64_t *)&v699[0], 0x38u, v246, v247, v248, v249);
      sub_223D86500(*(uint64_t *)&v699[0], 0x39u, v250, v251, v252, v253);
      sub_223D86500(*(uint64_t *)&v699[0], 0x3Au, v254, v255, v256, v257);
      sub_223D86500(*(uint64_t *)&v699[0], 0x3Bu, v258, v259, v260, v261);
      sub_223D86500(*(uint64_t *)&v699[0], 0x3Cu, v262, v263, v264, v265);
      sub_223D86500(*(uint64_t *)&v699[0], 0x3Du, v266, v267, v268, v269);
      sub_223D86500(*(uint64_t *)&v699[0], 0x3Eu, v270, v271, v272, v273);
      sub_223D86500(*(uint64_t *)&v699[0], 0x3Fu, v274, v275, v276, v277);
      sub_223D86500(*(uint64_t *)&v699[0], 0x40u, v278, v279, v280, v281);
      sub_223D86500(*(uint64_t *)&v699[0], 0x41u, v282, v283, v284, v285);
      sub_223D86500(*(uint64_t *)&v699[0], 0x42u, v286, v287, v288, v289);
      sub_223D86500(*(uint64_t *)&v699[0], 0x43u, v290, v291, v292, v293);
      sub_223D86500(*(uint64_t *)&v699[0], 0x44u, v294, v295, v296, v297);
      sub_223D86500(*(uint64_t *)&v699[0], 0x45u, v298, v299, v300, v301);
      sub_223D86500(*(uint64_t *)&v699[0], 0x46u, v302, v303, v304, v305);
      sub_223D86500(*(uint64_t *)&v699[0], 0x47u, v306, v307, v308, v309);
      sub_223D86500(*(uint64_t *)&v699[0], 0x48u, v310, v311, v312, v313);
      sub_223D86500(*(uint64_t *)&v699[0], 0x49u, v314, v315, v316, v317);
      sub_223D86500(*(uint64_t *)&v699[0], 0x4Au, v318, v319, v320, v321);
      sub_223D86500(*(uint64_t *)&v699[0], 0x4Bu, v322, v323, v324, v325);
      sub_223D86500(*(uint64_t *)&v699[0], 0x4Cu, v326, v327, v328, v329);
      sub_223D86500(*(uint64_t *)&v699[0], 0x4Du, v330, v331, v332, v333);
      sub_223D86500(*(uint64_t *)&v699[0], 0x4Eu, v334, v335, v336, v337);
      sub_223D86500(*(uint64_t *)&v699[0], 0x4Fu, v338, v339, v340, v341);
      sub_223D86500(*(uint64_t *)&v699[0], 0x50u, v342, v343, v344, v345);
      sub_223D86500(*(uint64_t *)&v699[0], 0x51u, v346, v347, v348, v349);
      sub_223D86500(*(uint64_t *)&v699[0], 0x52u, v350, v351, v352, v353);
      sub_223D86500(*(uint64_t *)&v699[0], 0x53u, v354, v355, v356, v357);
      sub_223D86500(*(uint64_t *)&v699[0], 0x54u, v358, v359, v360, v361);
      sub_223D86500(*(uint64_t *)&v699[0], 0x55u, v362, v363, v364, v365);
      sub_223D86500(*(uint64_t *)&v699[0], 0x56u, v366, v367, v368, v369);
      sub_223D86500(*(uint64_t *)&v699[0], 0x57u, v370, v371, v372, v373);
      sub_223D86500(*(uint64_t *)&v699[0], 0x58u, v374, v375, v376, v377);
      sub_223D86500(*(uint64_t *)&v699[0], 0x59u, v378, v379, v380, v381);
      sub_223D86500(*(uint64_t *)&v699[0], 0x5Au, v382, v383, v384, v385);
      sub_223D86500(*(uint64_t *)&v699[0], 0x5Bu, v386, v387, v388, v389);
      sub_223D86500(*(uint64_t *)&v699[0], 0x5Cu, v390, v391, v392, v393);
      sub_223D86500(*(uint64_t *)&v699[0], 0x5Du, v394, v395, v396, v397);
      sub_223D86500(*(uint64_t *)&v699[0], 0x5Eu, v398, v399, v400, v401);
      sub_223D86500(*(uint64_t *)&v699[0], 0x5Fu, v402, v403, v404, v405);
      sub_223D86500(*(uint64_t *)&v699[0], 0x60u, v406, v407, v408, v409);
      sub_223D86500(*(uint64_t *)&v699[0], 0x61u, v410, v411, v412, v413);
      sub_223D86500(*(uint64_t *)&v699[0], 0x62u, v414, v415, v416, v417);
      sub_223D86500(*(uint64_t *)&v699[0], 0x63u, v418, v419, v420, v421);
      sub_223D86500(*(uint64_t *)&v699[0], 0x64u, v422, v423, v424, v425);
      sub_223D86500(*(uint64_t *)&v699[0], 0x65u, v426, v427, v428, v429);
      sub_223D86500(*(uint64_t *)&v699[0], 0x66u, v430, v431, v432, v433);
      sub_223D86500(*(uint64_t *)&v699[0], 0x67u, v434, v435, v436, v437);
      sub_223D86500(*(uint64_t *)&v699[0], 0x68u, v438, v439, v440, v441);
      sub_223D86500(*(uint64_t *)&v699[0], 0x69u, v442, v443, v444, v445);
      sub_223D86500(*(uint64_t *)&v699[0], 0x6Au, v446, v447, v448, v449);
      sub_223D86500(*(uint64_t *)&v699[0], 0x6Bu, v450, v451, v452, v453);
      sub_223D86500(*(uint64_t *)&v699[0], 0x6Cu, v454, v455, v456, v457);
      sub_223D86500(*(uint64_t *)&v699[0], 0x6Du, v458, v459, v460, v461);
      sub_223D86500(*(uint64_t *)&v699[0], 0x6Eu, v462, v463, v464, v465);
      sub_223D86500(*(uint64_t *)&v699[0], 0x6Fu, v466, v467, v468, v469);
      sub_223D86500(*(uint64_t *)&v699[0], 0x70u, v470, v471, v472, v473);
      sub_223D86500(*(uint64_t *)&v699[0], 0x71u, v474, v475, v476, v477);
      sub_223D86500(*(uint64_t *)&v699[0], 0x72u, v478, v479, v480, v481);
      sub_223D86500(*(uint64_t *)&v699[0], 0x73u, v482, v483, v484, v485);
      sub_223D86500(*(uint64_t *)&v699[0], 0x74u, v486, v487, v488, v489);
      sub_223D86500(*(uint64_t *)&v699[0], 0x75u, v490, v491, v492, v493);
      sub_223D86500(*(uint64_t *)&v699[0], 0x76u, v494, v495, v496, v497);
      sub_223D86500(*(uint64_t *)&v699[0], 0x77u, v498, v499, v500, v501);
      sub_223D86500(*(uint64_t *)&v699[0], 0x78u, v502, v503, v504, v505);
      sub_223D86500(*(uint64_t *)&v699[0], 0x79u, v506, v507, v508, v509);
      sub_223D86500(*(uint64_t *)&v699[0], 0x7Au, v510, v511, v512, v513);
      sub_223D86500(*(uint64_t *)&v699[0], 0x7Bu, v514, v515, v516, v517);
      sub_223D86500(*(uint64_t *)&v699[0], 0x7Cu, v518, v519, v520, v521);
      sub_223D86500(*(uint64_t *)&v699[0], 0x7Du, v522, v523, v524, v525);
      sub_223D86500(*(uint64_t *)&v699[0], 0x7Eu, v526, v527, v528, v529);
      sub_223D86500(*(uint64_t *)&v699[0], 0x7Fu, v530, v531, v532, v533);
      sub_223D86500(*(uint64_t *)&v699[0], 0x80u, v534, v535, v536, v537);
      sub_223D86500(*(uint64_t *)&v699[0], 0x81u, v538, v539, v540, v541);
      sub_223D86500(*(uint64_t *)&v699[0], 0x82u, v542, v543, v544, v545);
      sub_223D86500(*(uint64_t *)&v699[0], 0x83u, v546, v547, v548, v549);
      sub_223D86500(*(uint64_t *)&v699[0], 0x84u, v550, v551, v552, v553);
      sub_223D86500(*(uint64_t *)&v699[0], 0x85u, v554, v555, v556, v557);
      sub_223D86500(*(uint64_t *)&v699[0], 0x86u, v558, v559, v560, v561);
      sub_223D86500(*(uint64_t *)&v699[0], 0x87u, v562, v563, v564, v565);
      sub_223D86500(*(uint64_t *)&v699[0], 0x88u, v566, v567, v568, v569);
      sub_223D86500(*(uint64_t *)&v699[0], 0x89u, v570, v571, v572, v573);
      sub_223D86500(*(uint64_t *)&v699[0], 0x8Au, v574, v575, v576, v577);
      sub_223D86500(*(uint64_t *)&v699[0], 0x8Bu, v578, v579, v580, v581);
      sub_223D86500(*(uint64_t *)&v699[0], 0x8Cu, v582, v583, v584, v585);
      sub_223D86500(*(uint64_t *)&v699[0], 0x8Du, v586, v587, v588, v589);
      sub_223D86500(*(uint64_t *)&v699[0], 0x8Eu, v590, v591, v592, v593);
      sub_223D86500(*(uint64_t *)&v699[0], 0x8Fu, v594, v595, v596, v597);
      sub_223D86500(*(uint64_t *)&v699[0], 0x90u, v598, v599, v600, v601);
      sub_223D86500(*(uint64_t *)&v699[0], 0x91u, v602, v603, v604, v605);
      sub_223D86500(*(uint64_t *)&v699[0], 0x92u, v606, v607, v608, v609);
      sub_223D86500(*(uint64_t *)&v699[0], 0x93u, v610, v611, v612, v613);
      sub_223D86500(*(uint64_t *)&v699[0], 0x94u, v614, v615, v616, v617);
      sub_223D86500(*(uint64_t *)&v699[0], 0x95u, v618, v619, v620, v621);
      sub_223D86500(*(uint64_t *)&v699[0], 0x96u, v622, v623, v624, v625);
      sub_223D86500(*(uint64_t *)&v699[0], 0x97u, v626, v627, v628, v629);
      sub_223D86500(*(uint64_t *)&v699[0], 0x98u, v630, v631, v632, v633);
      sub_223D86500(*(uint64_t *)&v699[0], 0x99u, v634, v635, v636, v637);
      sub_223D86500(*(uint64_t *)&v699[0], 0x9Au, v638, v639, v640, v641);
      sub_223D86500(*(uint64_t *)&v699[0], 0x9Bu, v642, v643, v644, v645);
      sub_223D86500(*(uint64_t *)&v699[0], 0x9Cu, v646, v647, v648, v649);
      sub_223D86500(*(uint64_t *)&v699[0], 0x9Du, v650, v651, v652, v653);
      sub_223D86500(*(uint64_t *)&v699[0], 0x9Eu, v654, v655, v656, v657);
      sub_223D86500(*(uint64_t *)&v699[0], 0x9Fu, v658, v659, v660, v661);
      sub_223D86500(*(uint64_t *)&v699[0], 0xA0u, v662, v663, v664, v665);
      sub_223D86500(*(uint64_t *)&v699[0], 0xA1u, v666, v667, v668, v669);
      sub_223D86500(*(uint64_t *)&v699[0], 0xA2u, v670, v671, v672, v673);
      sub_223D86500(*(uint64_t *)&v699[0], 0xA3u, v674, v675, v676, v677);
      sub_223D86500(*(uint64_t *)&v699[0], 0xA4u, v678, v679, v680, v681);
      sub_223D86500(*(uint64_t *)&v699[0], 0xA5u, v682, v683, v684, v685);
      sub_223D86500(*(uint64_t *)&v699[0], 0xA6u, v686, v687, v688, v689);
      sub_223D8698C((uint64_t *)v699, v690, v691, v692, v693);
    }
    else
    {
      v694 = *a5;
      v702 = a5[1].i32[0];
      v703 = vadd_s32(*a5, (int32x2_t)0x800000008);
      v704 = v702 + 8;
      v695 = (uint64_t *)v23[2];
      v696 = *v695;
      v697 = v695[1];
      v699[0] = *(_OWORD *)v705;
      v699[1] = *(_OWORD *)&v705[16];
      v700 = v706;
      v701 = v694;
      sub_223D85EA4((int *)a5, 3, (int *)&v701, v696, v697, (uint64_t)v699, *(double *)v705, *(double *)&v705[16], a10, a11, a12, a13);
    }
    return 3;
  }
  if (v18 == 1)
    return 1;
  else
    return 2;
}

uint64_t sub_223D85EA4(int *a1, int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, float32x4_t a9, float32x4_t a10, double a11, float32x4_t a12)
{
  float32x4_t v18;
  float32x4_t v19;
  uint64_t result;
  float32x4_t v21;
  float32x4_t v22;
  double v23;
  float32x2_t v24;
  uint64_t v25;
  int v26;
  __int32 v27;
  unsigned int v28;
  __int128 v29;
  int v30;
  int v31;
  unsigned int v32;
  __int128 v33;
  __int32 v34;
  unsigned int v35;
  unsigned int v36;
  __int128 v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  __int128 v41;
  int v42;
  __int32 v43;
  unsigned int v44;
  __int128 v45;
  int v46;
  int v47;
  unsigned int v48;
  __int128 v49;
  __int32 v50;
  unsigned int v51;
  unsigned int v52;
  __int128 v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  __int128 v57;
  int v58;
  int v59;
  int32x2_t v60;
  double v61;
  __int32 v62;
  __int32 v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  __int32 v73;
  __int32 v74;
  __int32 v75;
  __int32 v76;
  int v77;
  int v78;
  int v79;
  __int32 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int32 v85;
  uint64_t v86;
  unsigned int v87;

  LODWORD(a7) = *(_DWORD *)(a4 + 144);
  *(float32x2_t *)a9.f32 = vcvt_f32_s32(*(int32x2_t *)a3);
  a10.f32[0] = (float)a3[2];
  a9.f32[2] = a10.f32[0];
  v18 = vmulq_n_f32(a9, *(float *)&a7);
  *(float *)&a7 = *(float *)&a7 * (float)(int)(a3[3] - *(_QWORD *)a3);
  v85 = v18.i32[2];
  v84 = v18.i64[0];
  v19 = vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0));
  v87 = v19.u32[2];
  v86 = v19.i64[0];
  if (*(_BYTE *)(a5 + 20) == 1)
  {
    result = sub_223E998FC((float *)&v84, (float *)a5, *(float *)(a5 + 12), *(float *)(a5 + 16), v18, *(double *)a10.i64, a11, a12);
    if (!(_DWORD)result)
      return result;
  }
  else if (*(_BYTE *)(a5 + 20))
  {
    result = sub_223E99B90((float *)&v84, (float *)a5, *(float *)(a5 + 12), *(float *)(a5 + 16), v18, a10);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    result = sub_223E99668((float *)&v84, (float *)a5, *(float *)(a5 + 12), *(float *)(a5 + 16), v18, a10);
    if (!(_DWORD)result)
      return result;
  }
  if (!a2)
    return sub_223D86500(a6, *a3 & 7 | (8 * (a3[1] & 7)) & 0x3F | ((a3[2] & 7u) << 6), v21, v22, v23, v24);
  if ((_DWORD)result == 1)
  {
    v25 = (a2 - 1);
    v26 = a3[1];
    v27 = a3[2];
    v28 = (a3[3] - *a3) >> 1;
    LODWORD(v84) = *a3;
    HIDWORD(v84) = v26;
    v85 = v27;
    LODWORD(v86) = v28 + v84;
    HIDWORD(v86) = v26 + v28;
    v87 = v27 + v28;
    v29 = *(_OWORD *)(a6 + 16);
    v81 = *(_OWORD *)a6;
    v82 = v29;
    v83 = *(_QWORD *)(a6 + 32);
    sub_223D85EA4(a1, v25, &v84, a4, a5, &v81);
    v30 = a3[1];
    v31 = a3[2];
    v32 = (a3[3] - *a3) >> 1;
    LODWORD(v84) = *a3;
    HIDWORD(v84) = v30;
    v85 = v31 + v32;
    LODWORD(v86) = v32 + v84;
    HIDWORD(v86) = v30 + v32;
    v87 = v31 + v32 + v32;
    v33 = *(_OWORD *)(a6 + 16);
    v81 = *(_OWORD *)a6;
    v82 = v33;
    v83 = *(_QWORD *)(a6 + 32);
    sub_223D85EA4(a1, v25, &v84, a4, a5, &v81);
    v34 = a3[2];
    v35 = (a3[3] - *a3) >> 1;
    v36 = v35 + a3[1];
    LODWORD(v84) = *a3;
    HIDWORD(v84) = v36;
    v85 = v34;
    LODWORD(v86) = v35 + v84;
    HIDWORD(v86) = v36 + v35;
    v87 = v34 + v35;
    v37 = *(_OWORD *)(a6 + 16);
    v81 = *(_OWORD *)a6;
    v82 = v37;
    v83 = *(_QWORD *)(a6 + 32);
    sub_223D85EA4(a1, v25, &v84, a4, a5, &v81);
    v38 = a3[2];
    v39 = (a3[3] - *a3) >> 1;
    v40 = v39 + a3[1];
    LODWORD(v84) = *a3;
    HIDWORD(v84) = v40;
    v85 = v38 + v39;
    LODWORD(v86) = v39 + v84;
    HIDWORD(v86) = v40 + v39;
    v87 = v38 + v39 + v39;
    v41 = *(_OWORD *)(a6 + 16);
    v81 = *(_OWORD *)a6;
    v82 = v41;
    v83 = *(_QWORD *)(a6 + 32);
    sub_223D85EA4(a1, v25, &v84, a4, a5, &v81);
    v42 = a3[1];
    v43 = a3[2];
    v44 = (a3[3] - *a3) >> 1;
    LODWORD(v84) = v44 + *a3;
    HIDWORD(v84) = v42;
    v85 = v43;
    LODWORD(v86) = v84 + v44;
    HIDWORD(v86) = v42 + v44;
    v87 = v43 + v44;
    v45 = *(_OWORD *)(a6 + 16);
    v81 = *(_OWORD *)a6;
    v82 = v45;
    v83 = *(_QWORD *)(a6 + 32);
    sub_223D85EA4(a1, v25, &v84, a4, a5, &v81);
    v46 = a3[1];
    v47 = a3[2];
    v48 = (a3[3] - *a3) >> 1;
    LODWORD(v84) = v48 + *a3;
    HIDWORD(v84) = v46;
    v85 = v47 + v48;
    LODWORD(v86) = v84 + v48;
    HIDWORD(v86) = v46 + v48;
    v87 = v47 + v48 + v48;
    v49 = *(_OWORD *)(a6 + 16);
    v81 = *(_OWORD *)a6;
    v82 = v49;
    v83 = *(_QWORD *)(a6 + 32);
    sub_223D85EA4(a1, v25, &v84, a4, a5, &v81);
    v50 = a3[2];
    v51 = (a3[3] - *a3) >> 1;
    v52 = v51 + a3[1];
    LODWORD(v84) = v51 + *a3;
    HIDWORD(v84) = v52;
    v85 = v50;
    LODWORD(v86) = v84 + v51;
    HIDWORD(v86) = v52 + v51;
    v87 = v50 + v51;
    v53 = *(_OWORD *)(a6 + 16);
    v81 = *(_OWORD *)a6;
    v82 = v53;
    v83 = *(_QWORD *)(a6 + 32);
    sub_223D85EA4(a1, v25, &v84, a4, a5, &v81);
    v54 = a3[2];
    v55 = (a3[3] - *a3) >> 1;
    v56 = v55 + a3[1];
    LODWORD(v84) = v55 + *a3;
    HIDWORD(v84) = v56;
    v85 = v54 + v55;
    LODWORD(v86) = v84 + v55;
    HIDWORD(v86) = v56 + v55;
    v87 = v54 + v55 + v55;
    v57 = *(_OWORD *)(a6 + 16);
    v81 = *(_OWORD *)a6;
    v82 = v57;
    v83 = *(_QWORD *)(a6 + 32);
    return sub_223D85EA4(a1, v25, &v84, a4, a5, &v81);
  }
  else
  {
    v58 = *a3;
    if (*a1 > *a3)
      v58 = *a1;
    v59 = *a1 + 8;
    if (a3[3] < v59)
      v59 = a3[3];
    v78 = v59 - v58;
    if (v59 > v58)
    {
      v60 = *(int32x2_t *)(a1 + 1);
      *(int32x2_t *)v22.f32 = vmax_s32(v60, *(int32x2_t *)(a3 + 1));
      *(int32x2_t *)v21.f32 = vmin_s32(*(int32x2_t *)(a3 + 4), vadd_s32(v60, (int32x2_t)0x800000008));
      v61 = COERCE_DOUBLE(vcgt_s32(*(int32x2_t *)v21.f32, *(int32x2_t *)v22.f32));
      if ((LOBYTE(v61) & 1) != 0 && (BYTE4(v61) & 1) != 0)
      {
        v62 = v22.i32[1];
        v73 = v21.i32[1];
        v74 = v22.i32[0];
        v76 = v21.i32[0];
        v77 = v58 & 7;
        do
        {
          v75 = v62;
          v79 = (v62 & 7) << 6;
          v63 = v74;
          do
          {
            v80 = v63;
            v64 = v77;
            v65 = v79 | (8 * (v63 & 7)) | v77;
            v66 = v78 + v65;
            do
            {
              if (v64 >= 8)
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 483, (uint64_t)"RelativePositionIsValid(pos)", 28, (uint64_t)"Invalid grid position", 21, (void (*)(void **))sub_22457406C);
                v67 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v70 = qword_255795648;
                  v69 = qword_255795650;
                  while (v70 != v69)
                  {
                    v72 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v70;
                    v71 = *(_QWORD *)(v70 + 8);
                    v70 += 16;
                    v72(v71, "RelativePositionIsValid(pos)", 28, "Invalid grid position", 21);
                  }
                }
                v68 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  abort();
                qword_255795660(*(_QWORD *)algn_255795668, "RelativePositionIsValid(pos)", 28, "Invalid grid position", 21);
              }
              result = sub_223D86500(a6, v65, v21, v22, v61, v24);
              ++v64;
              ++v65;
            }
            while (v65 != v66);
            v63 = v80 + 1;
          }
          while (v80 + 1 != v76);
          v62 = v75 + 1;
        }
        while (v75 + 1 != v73);
      }
    }
  }
  return result;
}

uint64_t sub_223D86500(uint64_t result, unsigned int a2, float32x4_t a3, float32x4_t a4, double a5, float32x2_t a6)
{
  float32x2_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int32 *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  float32x4_t v27;
  float32x4_t v28;
  double v29;
  float32x2_t v30;
  int v31;
  float v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  float *v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  float *v41;
  uint64_t *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  std::string *v50;
  std::string::size_type size;
  float32x2_t v52;
  int8x16_t v53;
  _QWORD v54[2];
  std::string v55;
  unsigned __int8 v56;

  v8 = result;
  v9 = *(_QWORD *)result;
  v10 = *(_QWORD *)(result + 8);
  if (a2 >= 0x200)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 499, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      goto LABEL_56;
  }
  v11 = *(_DWORD *)(v10 + 4 * a2);
  if (v11 == *(_DWORD *)(v9 + 272))
    return result;
  v12 = (v11 & 0x10000000) != 0 ? 0x40000000 : 0x80000000;
  v13 = (v11 & 0x20000000) != 0 ? v12 : v11 & 0xCFFFFFFF;
  if (v13 >> 30)
    return result;
  v14 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 2448);
  v17 = (float32x2_t *)(v16 + 520 * v13);
  if (!v17->i32[1]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/src/PointCloudBlock.cpp", 124, (uint64_t)"points_.Count() > 0", 19, (uint64_t)"No points in block to compute mean", 34, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_56;
  }
  v18 = v16 + 520 * v13;
  if (*(_BYTE *)(v18 + 320))
  {
    *(_BYTE *)(v18 + 320) = 0;
    v19 = v16 + 520 * v13;
    v20 = v19 + 324;
    *(_QWORD *)(v19 + 328) = 0;
    *(_DWORD *)(v19 + 324) = 0;
    v21 = (unsigned __int32 *)(v19 + 332);
    v22 = v17->u32[1];
    a3.i64[0] = *(_QWORD *)v20;
    a3.i32[2] = *v21;
    if (v22)
    {
      v23 = (char *)&v17[1] + 4;
      v24 = v17->u32[1];
      do
      {
        a4.i64[0] = *(_QWORD *)v23;
        a4.i32[2] = *((_DWORD *)v23 + 2);
        a3 = vaddq_f32(a3, a4);
        *(_DWORD *)(v20 + 8) = a3.i32[2];
        *(_QWORD *)v20 = a3.i64[0];
        v23 += 28;
        --v24;
      }
      while (v24);
    }
    a4.f32[0] = (float)v22;
    a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
    a3 = vdivq_f32(a3, a4);
    *(_DWORD *)(v20 + 8) = a3.i32[2];
    v53 = (int8x16_t)a3;
    *(_QWORD *)v20 = a3.i64[0];
  }
  else
  {
    v25 = v16 + 520 * v13;
    a3.i64[0] = *(_QWORD *)(v25 + 324);
    a3.i32[2] = *(_DWORD *)(v25 + 332);
    v53 = (int8x16_t)a3;
  }
  a3.i64[0] = **(_QWORD **)v15;
  v52 = *(float32x2_t *)a3.f32;
  v6.i32[0] = *(_DWORD *)(*(_QWORD *)v15 + 8);
  v26 = sub_223CF6FF0((float32x2_t *)(v16 + 520 * v13), *(_QWORD *)(v15 + 8), a3, a4, a5, a6);
  result = sub_223CF6EA4(v17, *(_QWORD *)(v15 + 8), v27, v28, v29, v30);
  if ((_DWORD)result == 255)
    return result;
  v31 = result;
  if (result >= 0x2A)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      goto LABEL_56;
  }
  LODWORD(v32) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v53.i8, v52), (float32x2_t)vdup_lane_s32((int32x2_t)v52, 1), *(float32x2_t *)v53.i8, 1), v6, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)).u32[0];
  v33 = byte_224693EA5[v31];
  if (v33 == 1)
  {
    if (v32 <= **(float **)(v15 + 16))
      return result;
    v38 = *(unsigned int **)(v15 + 40);
    v40 = v38[1];
    v39 = v38[2];
    v38[2] = v39 + 1;
    if (v40 > 0x63)
    {
      if (v39 >= 0x7FFF)
        v39 = 0x7FFF;
      v46 = 214013 * *v38 + 2531011;
      *v38 = v46;
      v47 = (HIWORD(v46) & 0x7FFF) % (v39 + 1);
      if (v47 > 0x63)
        goto LABEL_47;
      v41 = (float *)&v38[v47 + 3];
    }
    else
    {
      v38[1] = v40 + 1;
      v41 = (float *)&v38[v40 + 3];
    }
    *v41 = v32;
LABEL_47:
    if (v26 == 25)
      return result;
    v43 = (uint64_t *)(v15 + 48);
    goto LABEL_49;
  }
  if (!byte_224693EA5[v31])
  {
    if (v32 >= **(float **)(v15 + 16))
      return result;
    v34 = *(unsigned int **)(v15 + 24);
    v36 = v34[1];
    v35 = v34[2];
    v34[2] = v35 + 1;
    if (v36 > 0x63)
    {
      if (v35 >= 0x7FFF)
        v35 = 0x7FFF;
      v44 = 214013 * *v34 + 2531011;
      *v34 = v44;
      v45 = (HIWORD(v44) & 0x7FFF) % (v35 + 1);
      if (v45 > 0x63)
        goto LABEL_40;
      v37 = (float *)&v34[v45 + 3];
    }
    else
    {
      v34[1] = v36 + 1;
      v37 = (float *)&v34[v36 + 3];
    }
    *v37 = v32;
LABEL_40:
    if (v26 == 25)
      return result;
    v43 = (uint64_t *)(v15 + 32);
    goto LABEL_49;
  }
  if (v33 == 2 && v26 != 25)
  {
    v43 = (uint64_t *)(v15 + 56);
LABEL_49:
    v48 = *v43;
    v56 = v26;
    if (v26 == 255)
      return result;
    if (v26 >= 0x1A)
    {
      v54[0] = "";
      v54[1] = 0;
      sub_2239B8924("AddVote<", (uint64_t)v54, (std::string *)">() with an invalid label: ", &v56);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v55;
      else
        v50 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        size = v55.__r_.__value_.__l.__size_;
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/include/Reconstruction/Common/LabelHistogram.h", 248, (uint64_t)"", 0, (uint64_t)v50, size, (void (*)(void **))sub_22457406C);
      std::string::~string(&v55);
      abort();
    }
    v49 = *(unsigned __int16 *)(v48 + 2 * v26);
    if (v49 != 0xFFFF)
      goto LABEL_54;
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/include/Reconstruction/Common/LabelHistogram.h", 251, (uint64_t)"histogram_[label] < std::numeric_limits<CountType>::max()", 57, (uint64_t)"Too many votes for the chosen vote count type causes an overflow.", 65, (void (*)(void **))sub_22457406C);
    if ((result & 1) == 0)
    {
      LOWORD(v49) = *(_WORD *)(v48 + 2 * v26);
LABEL_54:
      *(_WORD *)(v48 + 2 * v26) = v49 + 1;
      return result;
    }
LABEL_56:
    abort();
  }
  return result;
}

void sub_223D86970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223D8698C(uint64_t *a1, float32x4_t a2, float32x4_t a3, double a4, float32x2_t a5)
{
  float32x4_t v6;
  float32x4_t v7;
  double v8;
  float32x2_t v9;
  float32x4_t v10;
  float32x4_t v11;
  double v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  double v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  double v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  double v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  double v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  double v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  double v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  double v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  double v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  double v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  double v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  double v64;
  float32x2_t v65;
  float32x4_t v66;
  float32x4_t v67;
  double v68;
  float32x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  double v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  double v76;
  float32x2_t v77;
  float32x4_t v78;
  float32x4_t v79;
  double v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x4_t v83;
  double v84;
  float32x2_t v85;
  float32x4_t v86;
  float32x4_t v87;
  double v88;
  float32x2_t v89;
  float32x4_t v90;
  float32x4_t v91;
  double v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  double v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x4_t v99;
  double v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x4_t v103;
  double v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x4_t v107;
  double v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  double v112;
  float32x2_t v113;
  float32x4_t v114;
  float32x4_t v115;
  double v116;
  float32x2_t v117;
  float32x4_t v118;
  float32x4_t v119;
  double v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x4_t v123;
  double v124;
  float32x2_t v125;
  float32x4_t v126;
  float32x4_t v127;
  double v128;
  float32x2_t v129;
  float32x4_t v130;
  float32x4_t v131;
  double v132;
  float32x2_t v133;
  float32x4_t v134;
  float32x4_t v135;
  double v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  double v140;
  float32x2_t v141;
  float32x4_t v142;
  float32x4_t v143;
  double v144;
  float32x2_t v145;
  float32x4_t v146;
  float32x4_t v147;
  double v148;
  float32x2_t v149;
  float32x4_t v150;
  float32x4_t v151;
  double v152;
  float32x2_t v153;
  float32x4_t v154;
  float32x4_t v155;
  double v156;
  float32x2_t v157;
  float32x4_t v158;
  float32x4_t v159;
  double v160;
  float32x2_t v161;
  float32x4_t v162;
  float32x4_t v163;
  double v164;
  float32x2_t v165;
  float32x4_t v166;
  float32x4_t v167;
  double v168;
  float32x2_t v169;
  float32x4_t v170;
  float32x4_t v171;
  double v172;
  float32x2_t v173;
  float32x4_t v174;
  float32x4_t v175;
  double v176;
  float32x2_t v177;
  float32x4_t v178;
  float32x4_t v179;
  double v180;
  float32x2_t v181;
  float32x4_t v182;
  float32x4_t v183;
  double v184;
  float32x2_t v185;
  float32x4_t v186;
  float32x4_t v187;
  double v188;
  float32x2_t v189;
  float32x4_t v190;
  float32x4_t v191;
  double v192;
  float32x2_t v193;
  float32x4_t v194;
  float32x4_t v195;
  double v196;
  float32x2_t v197;
  float32x4_t v198;
  float32x4_t v199;
  double v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x4_t v203;
  double v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x4_t v207;
  double v208;
  float32x2_t v209;
  float32x4_t v210;
  float32x4_t v211;
  double v212;
  float32x2_t v213;
  float32x4_t v214;
  float32x4_t v215;
  double v216;
  float32x2_t v217;
  float32x4_t v218;
  float32x4_t v219;
  double v220;
  float32x2_t v221;
  float32x4_t v222;
  float32x4_t v223;
  double v224;
  float32x2_t v225;
  float32x4_t v226;
  float32x4_t v227;
  double v228;
  float32x2_t v229;
  float32x4_t v230;
  float32x4_t v231;
  double v232;
  float32x2_t v233;
  float32x4_t v234;
  float32x4_t v235;
  double v236;
  float32x2_t v237;
  float32x4_t v238;
  float32x4_t v239;
  double v240;
  float32x2_t v241;
  float32x4_t v242;
  float32x4_t v243;
  double v244;
  float32x2_t v245;
  float32x4_t v246;
  float32x4_t v247;
  double v248;
  float32x2_t v249;
  float32x4_t v250;
  float32x4_t v251;
  double v252;
  float32x2_t v253;
  float32x4_t v254;
  float32x4_t v255;
  double v256;
  float32x2_t v257;
  float32x4_t v258;
  float32x4_t v259;
  double v260;
  float32x2_t v261;
  float32x4_t v262;
  float32x4_t v263;
  double v264;
  float32x2_t v265;
  float32x4_t v266;
  float32x4_t v267;
  double v268;
  float32x2_t v269;
  float32x4_t v270;
  float32x4_t v271;
  double v272;
  float32x2_t v273;
  float32x4_t v274;
  float32x4_t v275;
  double v276;
  float32x2_t v277;
  float32x4_t v278;
  float32x4_t v279;
  double v280;
  float32x2_t v281;
  float32x4_t v282;
  float32x4_t v283;
  double v284;
  float32x2_t v285;
  float32x4_t v286;
  float32x4_t v287;
  double v288;
  float32x2_t v289;
  float32x4_t v290;
  float32x4_t v291;
  double v292;
  float32x2_t v293;
  float32x4_t v294;
  float32x4_t v295;
  double v296;
  float32x2_t v297;
  float32x4_t v298;
  float32x4_t v299;
  double v300;
  float32x2_t v301;
  float32x4_t v302;
  float32x4_t v303;
  double v304;
  float32x2_t v305;
  float32x4_t v306;
  float32x4_t v307;
  double v308;
  float32x2_t v309;
  float32x4_t v310;
  float32x4_t v311;
  double v312;
  float32x2_t v313;
  float32x4_t v314;
  float32x4_t v315;
  double v316;
  float32x2_t v317;
  float32x4_t v318;
  float32x4_t v319;
  double v320;
  float32x2_t v321;
  float32x4_t v322;
  float32x4_t v323;
  double v324;
  float32x2_t v325;
  float32x4_t v326;
  float32x4_t v327;
  double v328;
  float32x2_t v329;
  float32x4_t v330;
  float32x4_t v331;
  double v332;
  float32x2_t v333;
  float32x4_t v334;
  float32x4_t v335;
  double v336;
  float32x2_t v337;
  float32x4_t v338;
  float32x4_t v339;
  double v340;
  float32x2_t v341;
  float32x4_t v342;
  float32x4_t v343;
  double v344;
  float32x2_t v345;
  float32x4_t v346;
  float32x4_t v347;
  double v348;
  float32x2_t v349;
  float32x4_t v350;
  float32x4_t v351;
  double v352;
  float32x2_t v353;
  float32x4_t v354;
  float32x4_t v355;
  double v356;
  float32x2_t v357;
  float32x4_t v358;
  float32x4_t v359;
  double v360;
  float32x2_t v361;
  float32x4_t v362;
  float32x4_t v363;
  double v364;
  float32x2_t v365;
  float32x4_t v366;
  float32x4_t v367;
  double v368;
  float32x2_t v369;
  float32x4_t v370;
  float32x4_t v371;
  double v372;
  float32x2_t v373;
  float32x4_t v374;
  float32x4_t v375;
  double v376;
  float32x2_t v377;
  float32x4_t v378;
  float32x4_t v379;
  double v380;
  float32x2_t v381;
  float32x4_t v382;
  float32x4_t v383;
  double v384;
  float32x2_t v385;
  float32x4_t v386;
  float32x4_t v387;
  double v388;
  float32x2_t v389;
  float32x4_t v390;
  float32x4_t v391;
  double v392;
  float32x2_t v393;
  float32x4_t v394;
  float32x4_t v395;
  double v396;
  float32x2_t v397;
  float32x4_t v398;
  float32x4_t v399;
  double v400;
  float32x2_t v401;
  float32x4_t v402;
  float32x4_t v403;
  double v404;
  float32x2_t v405;
  float32x4_t v406;
  float32x4_t v407;
  double v408;
  float32x2_t v409;
  float32x4_t v410;
  float32x4_t v411;
  double v412;
  float32x2_t v413;
  float32x4_t v414;
  float32x4_t v415;
  double v416;
  float32x2_t v417;
  float32x4_t v418;
  float32x4_t v419;
  double v420;
  float32x2_t v421;
  float32x4_t v422;
  float32x4_t v423;
  double v424;
  float32x2_t v425;
  float32x4_t v426;
  float32x4_t v427;
  double v428;
  float32x2_t v429;
  float32x4_t v430;
  float32x4_t v431;
  double v432;
  float32x2_t v433;
  float32x4_t v434;
  float32x4_t v435;
  double v436;
  float32x2_t v437;
  float32x4_t v438;
  float32x4_t v439;
  double v440;
  float32x2_t v441;
  float32x4_t v442;
  float32x4_t v443;
  double v444;
  float32x2_t v445;
  float32x4_t v446;
  float32x4_t v447;
  double v448;
  float32x2_t v449;
  float32x4_t v450;
  float32x4_t v451;
  double v452;
  float32x2_t v453;
  float32x4_t v454;
  float32x4_t v455;
  double v456;
  float32x2_t v457;
  float32x4_t v458;
  float32x4_t v459;
  double v460;
  float32x2_t v461;
  float32x4_t v462;
  float32x4_t v463;
  double v464;
  float32x2_t v465;
  float32x4_t v466;
  float32x4_t v467;
  double v468;
  float32x2_t v469;
  float32x4_t v470;
  float32x4_t v471;
  double v472;
  float32x2_t v473;
  float32x4_t v474;
  float32x4_t v475;
  double v476;
  float32x2_t v477;
  float32x4_t v478;
  float32x4_t v479;
  double v480;
  float32x2_t v481;
  float32x4_t v482;
  float32x4_t v483;
  double v484;
  float32x2_t v485;
  float32x4_t v486;
  float32x4_t v487;
  double v488;
  float32x2_t v489;
  float32x4_t v490;
  float32x4_t v491;
  double v492;
  float32x2_t v493;
  float32x4_t v494;
  float32x4_t v495;
  double v496;
  float32x2_t v497;
  float32x4_t v498;
  float32x4_t v499;
  double v500;
  float32x2_t v501;
  float32x4_t v502;
  float32x4_t v503;
  double v504;
  float32x2_t v505;
  float32x4_t v506;
  float32x4_t v507;
  double v508;
  float32x2_t v509;
  float32x4_t v510;
  float32x4_t v511;
  double v512;
  float32x2_t v513;
  float32x4_t v514;
  float32x4_t v515;
  double v516;
  float32x2_t v517;
  float32x4_t v518;
  float32x4_t v519;
  double v520;
  float32x2_t v521;
  float32x4_t v522;
  float32x4_t v523;
  double v524;
  float32x2_t v525;
  float32x4_t v526;
  float32x4_t v527;
  double v528;
  float32x2_t v529;
  float32x4_t v530;
  float32x4_t v531;
  double v532;
  float32x2_t v533;
  float32x4_t v534;
  float32x4_t v535;
  double v536;
  float32x2_t v537;
  float32x4_t v538;
  float32x4_t v539;
  double v540;
  float32x2_t v541;
  float32x4_t v542;
  float32x4_t v543;
  double v544;
  float32x2_t v545;
  float32x4_t v546;
  float32x4_t v547;
  double v548;
  float32x2_t v549;
  float32x4_t v550;
  float32x4_t v551;
  double v552;
  float32x2_t v553;
  float32x4_t v554;
  float32x4_t v555;
  double v556;
  float32x2_t v557;
  float32x4_t v558;
  float32x4_t v559;
  double v560;
  float32x2_t v561;
  float32x4_t v562;
  float32x4_t v563;
  double v564;
  float32x2_t v565;
  float32x4_t v566;
  float32x4_t v567;
  double v568;
  float32x2_t v569;
  float32x4_t v570;
  float32x4_t v571;
  double v572;
  float32x2_t v573;
  float32x4_t v574;
  float32x4_t v575;
  double v576;
  float32x2_t v577;
  float32x4_t v578;
  float32x4_t v579;
  double v580;
  float32x2_t v581;
  float32x4_t v582;
  float32x4_t v583;
  double v584;
  float32x2_t v585;
  float32x4_t v586;
  float32x4_t v587;
  double v588;
  float32x2_t v589;
  float32x4_t v590;
  float32x4_t v591;
  double v592;
  float32x2_t v593;
  float32x4_t v594;
  float32x4_t v595;
  double v596;
  float32x2_t v597;
  float32x4_t v598;
  float32x4_t v599;
  double v600;
  float32x2_t v601;
  float32x4_t v602;
  float32x4_t v603;
  double v604;
  float32x2_t v605;
  float32x4_t v606;
  float32x4_t v607;
  double v608;
  float32x2_t v609;
  float32x4_t v610;
  float32x4_t v611;
  double v612;
  float32x2_t v613;
  float32x4_t v614;
  float32x4_t v615;
  double v616;
  float32x2_t v617;
  float32x4_t v618;
  float32x4_t v619;
  double v620;
  float32x2_t v621;
  float32x4_t v622;
  float32x4_t v623;
  double v624;
  float32x2_t v625;
  float32x4_t v626;
  float32x4_t v627;
  double v628;
  float32x2_t v629;
  float32x4_t v630;
  float32x4_t v631;
  double v632;
  float32x2_t v633;
  float32x4_t v634;
  float32x4_t v635;
  double v636;
  float32x2_t v637;
  float32x4_t v638;
  float32x4_t v639;
  double v640;
  float32x2_t v641;
  float32x4_t v642;
  float32x4_t v643;
  double v644;
  float32x2_t v645;
  float32x4_t v646;
  float32x4_t v647;
  double v648;
  float32x2_t v649;
  float32x4_t v650;
  float32x4_t v651;
  double v652;
  float32x2_t v653;
  float32x4_t v654;
  float32x4_t v655;
  double v656;
  float32x2_t v657;
  float32x4_t v658;
  float32x4_t v659;
  double v660;
  float32x2_t v661;
  float32x4_t v662;
  float32x4_t v663;
  double v664;
  float32x2_t v665;
  float32x4_t v666;
  float32x4_t v667;
  double v668;
  float32x2_t v669;
  float32x4_t v670;
  float32x4_t v671;
  double v672;
  float32x2_t v673;
  float32x4_t v674;
  float32x4_t v675;
  double v676;
  float32x2_t v677;
  float32x4_t v678;
  float32x4_t v679;
  double v680;
  float32x2_t v681;
  float32x4_t v682;
  float32x4_t v683;
  double v684;
  float32x2_t v685;
  float32x4_t v686;
  float32x4_t v687;
  double v688;
  float32x2_t v689;
  float32x4_t v690;
  float32x4_t v691;
  double v692;
  float32x2_t v693;
  float32x4_t v694;
  float32x4_t v695;
  double v696;
  float32x2_t v697;
  float32x4_t v698;
  float32x4_t v699;
  double v700;
  float32x2_t v701;
  float32x4_t v702;
  float32x4_t v703;
  double v704;
  float32x2_t v705;
  float32x4_t v706;
  float32x4_t v707;
  double v708;
  float32x2_t v709;
  float32x4_t v710;
  float32x4_t v711;
  double v712;
  float32x2_t v713;
  float32x4_t v714;
  float32x4_t v715;
  double v716;
  float32x2_t v717;
  float32x4_t v718;
  float32x4_t v719;
  double v720;
  float32x2_t v721;
  float32x4_t v722;
  float32x4_t v723;
  double v724;
  float32x2_t v725;
  float32x4_t v726;
  float32x4_t v727;
  double v728;
  float32x2_t v729;
  float32x4_t v730;
  float32x4_t v731;
  double v732;
  float32x2_t v733;
  float32x4_t v734;
  float32x4_t v735;
  double v736;
  float32x2_t v737;
  float32x4_t v738;
  float32x4_t v739;
  double v740;
  float32x2_t v741;
  float32x4_t v742;
  float32x4_t v743;
  double v744;
  float32x2_t v745;
  float32x4_t v746;
  float32x4_t v747;
  double v748;
  float32x2_t v749;
  float32x4_t v750;
  float32x4_t v751;
  double v752;
  float32x2_t v753;
  float32x4_t v754;
  float32x4_t v755;
  double v756;
  float32x2_t v757;
  float32x4_t v758;
  float32x4_t v759;
  double v760;
  float32x2_t v761;
  float32x4_t v762;
  float32x4_t v763;
  double v764;
  float32x2_t v765;
  float32x4_t v766;
  float32x4_t v767;
  double v768;
  float32x2_t v769;
  float32x4_t v770;
  float32x4_t v771;
  double v772;
  float32x2_t v773;
  float32x4_t v774;
  float32x4_t v775;
  double v776;
  float32x2_t v777;
  float32x4_t v778;
  float32x4_t v779;
  double v780;
  float32x2_t v781;
  float32x4_t v782;
  float32x4_t v783;
  double v784;
  float32x2_t v785;
  float32x4_t v786;
  float32x4_t v787;
  double v788;
  float32x2_t v789;
  float32x4_t v790;
  float32x4_t v791;
  double v792;
  float32x2_t v793;
  float32x4_t v794;
  float32x4_t v795;
  double v796;
  float32x2_t v797;
  float32x4_t v798;
  float32x4_t v799;
  double v800;
  float32x2_t v801;
  float32x4_t v802;
  float32x4_t v803;
  double v804;
  float32x2_t v805;
  float32x4_t v806;
  float32x4_t v807;
  double v808;
  float32x2_t v809;
  float32x4_t v810;
  float32x4_t v811;
  double v812;
  float32x2_t v813;
  float32x4_t v814;
  float32x4_t v815;
  double v816;
  float32x2_t v817;
  float32x4_t v818;
  float32x4_t v819;
  double v820;
  float32x2_t v821;
  float32x4_t v822;
  float32x4_t v823;
  double v824;
  float32x2_t v825;
  float32x4_t v826;
  float32x4_t v827;
  double v828;
  float32x2_t v829;
  float32x4_t v830;
  float32x4_t v831;
  double v832;
  float32x2_t v833;
  float32x4_t v834;
  float32x4_t v835;
  double v836;
  float32x2_t v837;
  float32x4_t v838;
  float32x4_t v839;
  double v840;
  float32x2_t v841;
  float32x4_t v842;
  float32x4_t v843;
  double v844;
  float32x2_t v845;
  float32x4_t v846;
  float32x4_t v847;
  double v848;
  float32x2_t v849;
  float32x4_t v850;
  float32x4_t v851;
  double v852;
  float32x2_t v853;
  float32x4_t v854;
  float32x4_t v855;
  double v856;
  float32x2_t v857;
  float32x4_t v858;
  float32x4_t v859;
  double v860;
  float32x2_t v861;
  float32x4_t v862;
  float32x4_t v863;
  double v864;
  float32x2_t v865;
  float32x4_t v866;
  float32x4_t v867;
  double v868;
  float32x2_t v869;
  float32x4_t v870;
  float32x4_t v871;
  double v872;
  float32x2_t v873;
  float32x4_t v874;
  float32x4_t v875;
  double v876;
  float32x2_t v877;
  float32x4_t v878;
  float32x4_t v879;
  double v880;
  float32x2_t v881;
  float32x4_t v882;
  float32x4_t v883;
  double v884;
  float32x2_t v885;
  float32x4_t v886;
  float32x4_t v887;
  double v888;
  float32x2_t v889;
  float32x4_t v890;
  float32x4_t v891;
  double v892;
  float32x2_t v893;
  float32x4_t v894;
  float32x4_t v895;
  double v896;
  float32x2_t v897;
  float32x4_t v898;
  float32x4_t v899;
  double v900;
  float32x2_t v901;
  float32x4_t v902;
  float32x4_t v903;
  double v904;
  float32x2_t v905;
  float32x4_t v906;
  float32x4_t v907;
  double v908;
  float32x2_t v909;
  float32x4_t v910;
  float32x4_t v911;
  double v912;
  float32x2_t v913;
  float32x4_t v914;
  float32x4_t v915;
  double v916;
  float32x2_t v917;
  float32x4_t v918;
  float32x4_t v919;
  double v920;
  float32x2_t v921;
  float32x4_t v922;
  float32x4_t v923;
  double v924;
  float32x2_t v925;
  float32x4_t v926;
  float32x4_t v927;
  double v928;
  float32x2_t v929;
  float32x4_t v930;
  float32x4_t v931;
  double v932;
  float32x2_t v933;
  float32x4_t v934;
  float32x4_t v935;
  double v936;
  float32x2_t v937;
  float32x4_t v938;
  float32x4_t v939;
  double v940;
  float32x2_t v941;
  float32x4_t v942;
  float32x4_t v943;
  double v944;
  float32x2_t v945;
  float32x4_t v946;
  float32x4_t v947;
  double v948;
  float32x2_t v949;
  float32x4_t v950;
  float32x4_t v951;
  double v952;
  float32x2_t v953;
  float32x4_t v954;
  float32x4_t v955;
  double v956;
  float32x2_t v957;
  float32x4_t v958;
  float32x4_t v959;
  double v960;
  float32x2_t v961;
  float32x4_t v962;
  float32x4_t v963;
  double v964;
  float32x2_t v965;
  float32x4_t v966;
  float32x4_t v967;
  double v968;
  float32x2_t v969;
  float32x4_t v970;
  float32x4_t v971;
  double v972;
  float32x2_t v973;
  float32x4_t v974;
  float32x4_t v975;
  double v976;
  float32x2_t v977;
  float32x4_t v978;
  float32x4_t v979;
  double v980;
  float32x2_t v981;
  float32x4_t v982;
  float32x4_t v983;
  double v984;
  float32x2_t v985;
  float32x4_t v986;
  float32x4_t v987;
  double v988;
  float32x2_t v989;
  float32x4_t v990;
  float32x4_t v991;
  double v992;
  float32x2_t v993;
  float32x4_t v994;
  float32x4_t v995;
  double v996;
  float32x2_t v997;
  float32x4_t v998;
  float32x4_t v999;
  double v1000;
  float32x2_t v1001;
  float32x4_t v1002;
  float32x4_t v1003;
  double v1004;
  float32x2_t v1005;
  float32x4_t v1006;
  float32x4_t v1007;
  double v1008;
  float32x2_t v1009;
  float32x4_t v1010;
  float32x4_t v1011;
  double v1012;
  float32x2_t v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  double v1016;
  float32x2_t v1017;
  float32x4_t v1018;
  float32x4_t v1019;
  double v1020;
  float32x2_t v1021;
  float32x4_t v1022;
  float32x4_t v1023;
  double v1024;
  float32x2_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  double v1028;
  float32x2_t v1029;
  float32x4_t v1030;
  float32x4_t v1031;
  double v1032;
  float32x2_t v1033;
  float32x4_t v1034;
  float32x4_t v1035;
  double v1036;
  float32x2_t v1037;
  float32x4_t v1038;
  float32x4_t v1039;
  double v1040;
  float32x2_t v1041;
  float32x4_t v1042;
  float32x4_t v1043;
  double v1044;
  float32x2_t v1045;
  float32x4_t v1046;
  float32x4_t v1047;
  double v1048;
  float32x2_t v1049;
  float32x4_t v1050;
  float32x4_t v1051;
  double v1052;
  float32x2_t v1053;
  float32x4_t v1054;
  float32x4_t v1055;
  double v1056;
  float32x2_t v1057;
  float32x4_t v1058;
  float32x4_t v1059;
  double v1060;
  float32x2_t v1061;
  float32x4_t v1062;
  float32x4_t v1063;
  double v1064;
  float32x2_t v1065;
  float32x4_t v1066;
  float32x4_t v1067;
  double v1068;
  float32x2_t v1069;
  float32x4_t v1070;
  float32x4_t v1071;
  double v1072;
  float32x2_t v1073;
  float32x4_t v1074;
  float32x4_t v1075;
  double v1076;
  float32x2_t v1077;
  float32x4_t v1078;
  float32x4_t v1079;
  double v1080;
  float32x2_t v1081;
  float32x4_t v1082;
  float32x4_t v1083;
  double v1084;
  float32x2_t v1085;
  float32x4_t v1086;
  float32x4_t v1087;
  double v1088;
  float32x2_t v1089;
  float32x4_t v1090;
  float32x4_t v1091;
  double v1092;
  float32x2_t v1093;
  float32x4_t v1094;
  float32x4_t v1095;
  double v1096;
  float32x2_t v1097;
  float32x4_t v1098;
  float32x4_t v1099;
  double v1100;
  float32x2_t v1101;
  float32x4_t v1102;
  float32x4_t v1103;
  double v1104;
  float32x2_t v1105;
  float32x4_t v1106;
  float32x4_t v1107;
  double v1108;
  float32x2_t v1109;
  float32x4_t v1110;
  float32x4_t v1111;
  double v1112;
  float32x2_t v1113;
  float32x4_t v1114;
  float32x4_t v1115;
  double v1116;
  float32x2_t v1117;
  float32x4_t v1118;
  float32x4_t v1119;
  double v1120;
  float32x2_t v1121;
  float32x4_t v1122;
  float32x4_t v1123;
  double v1124;
  float32x2_t v1125;
  float32x4_t v1126;
  float32x4_t v1127;
  double v1128;
  float32x2_t v1129;
  float32x4_t v1130;
  float32x4_t v1131;
  double v1132;
  float32x2_t v1133;
  float32x4_t v1134;
  float32x4_t v1135;
  double v1136;
  float32x2_t v1137;
  float32x4_t v1138;
  float32x4_t v1139;
  double v1140;
  float32x2_t v1141;
  float32x4_t v1142;
  float32x4_t v1143;
  double v1144;
  float32x2_t v1145;
  float32x4_t v1146;
  float32x4_t v1147;
  double v1148;
  float32x2_t v1149;
  float32x4_t v1150;
  float32x4_t v1151;
  double v1152;
  float32x2_t v1153;
  float32x4_t v1154;
  float32x4_t v1155;
  double v1156;
  float32x2_t v1157;
  float32x4_t v1158;
  float32x4_t v1159;
  double v1160;
  float32x2_t v1161;
  float32x4_t v1162;
  float32x4_t v1163;
  double v1164;
  float32x2_t v1165;
  float32x4_t v1166;
  float32x4_t v1167;
  double v1168;
  float32x2_t v1169;
  float32x4_t v1170;
  float32x4_t v1171;
  double v1172;
  float32x2_t v1173;
  float32x4_t v1174;
  float32x4_t v1175;
  double v1176;
  float32x2_t v1177;
  float32x4_t v1178;
  float32x4_t v1179;
  double v1180;
  float32x2_t v1181;
  float32x4_t v1182;
  float32x4_t v1183;
  double v1184;
  float32x2_t v1185;
  float32x4_t v1186;
  float32x4_t v1187;
  double v1188;
  float32x2_t v1189;
  float32x4_t v1190;
  float32x4_t v1191;
  double v1192;
  float32x2_t v1193;
  float32x4_t v1194;
  float32x4_t v1195;
  double v1196;
  float32x2_t v1197;
  float32x4_t v1198;
  float32x4_t v1199;
  double v1200;
  float32x2_t v1201;
  float32x4_t v1202;
  float32x4_t v1203;
  double v1204;
  float32x2_t v1205;
  float32x4_t v1206;
  float32x4_t v1207;
  double v1208;
  float32x2_t v1209;
  float32x4_t v1210;
  float32x4_t v1211;
  double v1212;
  float32x2_t v1213;
  float32x4_t v1214;
  float32x4_t v1215;
  double v1216;
  float32x2_t v1217;
  float32x4_t v1218;
  float32x4_t v1219;
  double v1220;
  float32x2_t v1221;
  float32x4_t v1222;
  float32x4_t v1223;
  double v1224;
  float32x2_t v1225;
  float32x4_t v1226;
  float32x4_t v1227;
  double v1228;
  float32x2_t v1229;
  float32x4_t v1230;
  float32x4_t v1231;
  double v1232;
  float32x2_t v1233;
  float32x4_t v1234;
  float32x4_t v1235;
  double v1236;
  float32x2_t v1237;
  float32x4_t v1238;
  float32x4_t v1239;
  double v1240;
  float32x2_t v1241;
  float32x4_t v1242;
  float32x4_t v1243;
  double v1244;
  float32x2_t v1245;
  float32x4_t v1246;
  float32x4_t v1247;
  double v1248;
  float32x2_t v1249;
  float32x4_t v1250;
  float32x4_t v1251;
  double v1252;
  float32x2_t v1253;
  float32x4_t v1254;
  float32x4_t v1255;
  double v1256;
  float32x2_t v1257;
  float32x4_t v1258;
  float32x4_t v1259;
  double v1260;
  float32x2_t v1261;
  float32x4_t v1262;
  float32x4_t v1263;
  double v1264;
  float32x2_t v1265;
  float32x4_t v1266;
  float32x4_t v1267;
  double v1268;
  float32x2_t v1269;
  float32x4_t v1270;
  float32x4_t v1271;
  double v1272;
  float32x2_t v1273;
  float32x4_t v1274;
  float32x4_t v1275;
  double v1276;
  float32x2_t v1277;
  float32x4_t v1278;
  float32x4_t v1279;
  double v1280;
  float32x2_t v1281;
  float32x4_t v1282;
  float32x4_t v1283;
  double v1284;
  float32x2_t v1285;
  float32x4_t v1286;
  float32x4_t v1287;
  double v1288;
  float32x2_t v1289;
  float32x4_t v1290;
  float32x4_t v1291;
  double v1292;
  float32x2_t v1293;
  float32x4_t v1294;
  float32x4_t v1295;
  double v1296;
  float32x2_t v1297;
  float32x4_t v1298;
  float32x4_t v1299;
  double v1300;
  float32x2_t v1301;
  float32x4_t v1302;
  float32x4_t v1303;
  double v1304;
  float32x2_t v1305;
  float32x4_t v1306;
  float32x4_t v1307;
  double v1308;
  float32x2_t v1309;
  float32x4_t v1310;
  float32x4_t v1311;
  double v1312;
  float32x2_t v1313;
  float32x4_t v1314;
  float32x4_t v1315;
  double v1316;
  float32x2_t v1317;
  float32x4_t v1318;
  float32x4_t v1319;
  double v1320;
  float32x2_t v1321;
  float32x4_t v1322;
  float32x4_t v1323;
  double v1324;
  float32x2_t v1325;
  float32x4_t v1326;
  float32x4_t v1327;
  double v1328;
  float32x2_t v1329;
  float32x4_t v1330;
  float32x4_t v1331;
  double v1332;
  float32x2_t v1333;
  float32x4_t v1334;
  float32x4_t v1335;
  double v1336;
  float32x2_t v1337;
  float32x4_t v1338;
  float32x4_t v1339;
  double v1340;
  float32x2_t v1341;
  float32x4_t v1342;
  float32x4_t v1343;
  double v1344;
  float32x2_t v1345;
  float32x4_t v1346;
  float32x4_t v1347;
  double v1348;
  float32x2_t v1349;
  float32x4_t v1350;
  float32x4_t v1351;
  double v1352;
  float32x2_t v1353;
  float32x4_t v1354;
  float32x4_t v1355;
  double v1356;
  float32x2_t v1357;
  float32x4_t v1358;
  float32x4_t v1359;
  double v1360;
  float32x2_t v1361;
  float32x4_t v1362;
  float32x4_t v1363;
  double v1364;
  float32x2_t v1365;
  float32x4_t v1366;
  float32x4_t v1367;
  double v1368;
  float32x2_t v1369;
  float32x4_t v1370;
  float32x4_t v1371;
  double v1372;
  float32x2_t v1373;
  float32x4_t v1374;
  float32x4_t v1375;
  double v1376;
  float32x2_t v1377;
  float32x4_t v1378;
  float32x4_t v1379;
  double v1380;
  float32x2_t v1381;

  sub_223D86500(*a1, 0xA7u, a2, a3, a4, a5);
  sub_223D86500(*a1, 0xA8u, v6, v7, v8, v9);
  sub_223D86500(*a1, 0xA9u, v10, v11, v12, v13);
  sub_223D86500(*a1, 0xAAu, v14, v15, v16, v17);
  sub_223D86500(*a1, 0xABu, v18, v19, v20, v21);
  sub_223D86500(*a1, 0xACu, v22, v23, v24, v25);
  sub_223D86500(*a1, 0xADu, v26, v27, v28, v29);
  sub_223D86500(*a1, 0xAEu, v30, v31, v32, v33);
  sub_223D86500(*a1, 0xAFu, v34, v35, v36, v37);
  sub_223D86500(*a1, 0xB0u, v38, v39, v40, v41);
  sub_223D86500(*a1, 0xB1u, v42, v43, v44, v45);
  sub_223D86500(*a1, 0xB2u, v46, v47, v48, v49);
  sub_223D86500(*a1, 0xB3u, v50, v51, v52, v53);
  sub_223D86500(*a1, 0xB4u, v54, v55, v56, v57);
  sub_223D86500(*a1, 0xB5u, v58, v59, v60, v61);
  sub_223D86500(*a1, 0xB6u, v62, v63, v64, v65);
  sub_223D86500(*a1, 0xB7u, v66, v67, v68, v69);
  sub_223D86500(*a1, 0xB8u, v70, v71, v72, v73);
  sub_223D86500(*a1, 0xB9u, v74, v75, v76, v77);
  sub_223D86500(*a1, 0xBAu, v78, v79, v80, v81);
  sub_223D86500(*a1, 0xBBu, v82, v83, v84, v85);
  sub_223D86500(*a1, 0xBCu, v86, v87, v88, v89);
  sub_223D86500(*a1, 0xBDu, v90, v91, v92, v93);
  sub_223D86500(*a1, 0xBEu, v94, v95, v96, v97);
  sub_223D86500(*a1, 0xBFu, v98, v99, v100, v101);
  sub_223D86500(*a1, 0xC0u, v102, v103, v104, v105);
  sub_223D86500(*a1, 0xC1u, v106, v107, v108, v109);
  sub_223D86500(*a1, 0xC2u, v110, v111, v112, v113);
  sub_223D86500(*a1, 0xC3u, v114, v115, v116, v117);
  sub_223D86500(*a1, 0xC4u, v118, v119, v120, v121);
  sub_223D86500(*a1, 0xC5u, v122, v123, v124, v125);
  sub_223D86500(*a1, 0xC6u, v126, v127, v128, v129);
  sub_223D86500(*a1, 0xC7u, v130, v131, v132, v133);
  sub_223D86500(*a1, 0xC8u, v134, v135, v136, v137);
  sub_223D86500(*a1, 0xC9u, v138, v139, v140, v141);
  sub_223D86500(*a1, 0xCAu, v142, v143, v144, v145);
  sub_223D86500(*a1, 0xCBu, v146, v147, v148, v149);
  sub_223D86500(*a1, 0xCCu, v150, v151, v152, v153);
  sub_223D86500(*a1, 0xCDu, v154, v155, v156, v157);
  sub_223D86500(*a1, 0xCEu, v158, v159, v160, v161);
  sub_223D86500(*a1, 0xCFu, v162, v163, v164, v165);
  sub_223D86500(*a1, 0xD0u, v166, v167, v168, v169);
  sub_223D86500(*a1, 0xD1u, v170, v171, v172, v173);
  sub_223D86500(*a1, 0xD2u, v174, v175, v176, v177);
  sub_223D86500(*a1, 0xD3u, v178, v179, v180, v181);
  sub_223D86500(*a1, 0xD4u, v182, v183, v184, v185);
  sub_223D86500(*a1, 0xD5u, v186, v187, v188, v189);
  sub_223D86500(*a1, 0xD6u, v190, v191, v192, v193);
  sub_223D86500(*a1, 0xD7u, v194, v195, v196, v197);
  sub_223D86500(*a1, 0xD8u, v198, v199, v200, v201);
  sub_223D86500(*a1, 0xD9u, v202, v203, v204, v205);
  sub_223D86500(*a1, 0xDAu, v206, v207, v208, v209);
  sub_223D86500(*a1, 0xDBu, v210, v211, v212, v213);
  sub_223D86500(*a1, 0xDCu, v214, v215, v216, v217);
  sub_223D86500(*a1, 0xDDu, v218, v219, v220, v221);
  sub_223D86500(*a1, 0xDEu, v222, v223, v224, v225);
  sub_223D86500(*a1, 0xDFu, v226, v227, v228, v229);
  sub_223D86500(*a1, 0xE0u, v230, v231, v232, v233);
  sub_223D86500(*a1, 0xE1u, v234, v235, v236, v237);
  sub_223D86500(*a1, 0xE2u, v238, v239, v240, v241);
  sub_223D86500(*a1, 0xE3u, v242, v243, v244, v245);
  sub_223D86500(*a1, 0xE4u, v246, v247, v248, v249);
  sub_223D86500(*a1, 0xE5u, v250, v251, v252, v253);
  sub_223D86500(*a1, 0xE6u, v254, v255, v256, v257);
  sub_223D86500(*a1, 0xE7u, v258, v259, v260, v261);
  sub_223D86500(*a1, 0xE8u, v262, v263, v264, v265);
  sub_223D86500(*a1, 0xE9u, v266, v267, v268, v269);
  sub_223D86500(*a1, 0xEAu, v270, v271, v272, v273);
  sub_223D86500(*a1, 0xEBu, v274, v275, v276, v277);
  sub_223D86500(*a1, 0xECu, v278, v279, v280, v281);
  sub_223D86500(*a1, 0xEDu, v282, v283, v284, v285);
  sub_223D86500(*a1, 0xEEu, v286, v287, v288, v289);
  sub_223D86500(*a1, 0xEFu, v290, v291, v292, v293);
  sub_223D86500(*a1, 0xF0u, v294, v295, v296, v297);
  sub_223D86500(*a1, 0xF1u, v298, v299, v300, v301);
  sub_223D86500(*a1, 0xF2u, v302, v303, v304, v305);
  sub_223D86500(*a1, 0xF3u, v306, v307, v308, v309);
  sub_223D86500(*a1, 0xF4u, v310, v311, v312, v313);
  sub_223D86500(*a1, 0xF5u, v314, v315, v316, v317);
  sub_223D86500(*a1, 0xF6u, v318, v319, v320, v321);
  sub_223D86500(*a1, 0xF7u, v322, v323, v324, v325);
  sub_223D86500(*a1, 0xF8u, v326, v327, v328, v329);
  sub_223D86500(*a1, 0xF9u, v330, v331, v332, v333);
  sub_223D86500(*a1, 0xFAu, v334, v335, v336, v337);
  sub_223D86500(*a1, 0xFBu, v338, v339, v340, v341);
  sub_223D86500(*a1, 0xFCu, v342, v343, v344, v345);
  sub_223D86500(*a1, 0xFDu, v346, v347, v348, v349);
  sub_223D86500(*a1, 0xFEu, v350, v351, v352, v353);
  sub_223D86500(*a1, 0xFFu, v354, v355, v356, v357);
  sub_223D86500(*a1, 0x100u, v358, v359, v360, v361);
  sub_223D86500(*a1, 0x101u, v362, v363, v364, v365);
  sub_223D86500(*a1, 0x102u, v366, v367, v368, v369);
  sub_223D86500(*a1, 0x103u, v370, v371, v372, v373);
  sub_223D86500(*a1, 0x104u, v374, v375, v376, v377);
  sub_223D86500(*a1, 0x105u, v378, v379, v380, v381);
  sub_223D86500(*a1, 0x106u, v382, v383, v384, v385);
  sub_223D86500(*a1, 0x107u, v386, v387, v388, v389);
  sub_223D86500(*a1, 0x108u, v390, v391, v392, v393);
  sub_223D86500(*a1, 0x109u, v394, v395, v396, v397);
  sub_223D86500(*a1, 0x10Au, v398, v399, v400, v401);
  sub_223D86500(*a1, 0x10Bu, v402, v403, v404, v405);
  sub_223D86500(*a1, 0x10Cu, v406, v407, v408, v409);
  sub_223D86500(*a1, 0x10Du, v410, v411, v412, v413);
  sub_223D86500(*a1, 0x10Eu, v414, v415, v416, v417);
  sub_223D86500(*a1, 0x10Fu, v418, v419, v420, v421);
  sub_223D86500(*a1, 0x110u, v422, v423, v424, v425);
  sub_223D86500(*a1, 0x111u, v426, v427, v428, v429);
  sub_223D86500(*a1, 0x112u, v430, v431, v432, v433);
  sub_223D86500(*a1, 0x113u, v434, v435, v436, v437);
  sub_223D86500(*a1, 0x114u, v438, v439, v440, v441);
  sub_223D86500(*a1, 0x115u, v442, v443, v444, v445);
  sub_223D86500(*a1, 0x116u, v446, v447, v448, v449);
  sub_223D86500(*a1, 0x117u, v450, v451, v452, v453);
  sub_223D86500(*a1, 0x118u, v454, v455, v456, v457);
  sub_223D86500(*a1, 0x119u, v458, v459, v460, v461);
  sub_223D86500(*a1, 0x11Au, v462, v463, v464, v465);
  sub_223D86500(*a1, 0x11Bu, v466, v467, v468, v469);
  sub_223D86500(*a1, 0x11Cu, v470, v471, v472, v473);
  sub_223D86500(*a1, 0x11Du, v474, v475, v476, v477);
  sub_223D86500(*a1, 0x11Eu, v478, v479, v480, v481);
  sub_223D86500(*a1, 0x11Fu, v482, v483, v484, v485);
  sub_223D86500(*a1, 0x120u, v486, v487, v488, v489);
  sub_223D86500(*a1, 0x121u, v490, v491, v492, v493);
  sub_223D86500(*a1, 0x122u, v494, v495, v496, v497);
  sub_223D86500(*a1, 0x123u, v498, v499, v500, v501);
  sub_223D86500(*a1, 0x124u, v502, v503, v504, v505);
  sub_223D86500(*a1, 0x125u, v506, v507, v508, v509);
  sub_223D86500(*a1, 0x126u, v510, v511, v512, v513);
  sub_223D86500(*a1, 0x127u, v514, v515, v516, v517);
  sub_223D86500(*a1, 0x128u, v518, v519, v520, v521);
  sub_223D86500(*a1, 0x129u, v522, v523, v524, v525);
  sub_223D86500(*a1, 0x12Au, v526, v527, v528, v529);
  sub_223D86500(*a1, 0x12Bu, v530, v531, v532, v533);
  sub_223D86500(*a1, 0x12Cu, v534, v535, v536, v537);
  sub_223D86500(*a1, 0x12Du, v538, v539, v540, v541);
  sub_223D86500(*a1, 0x12Eu, v542, v543, v544, v545);
  sub_223D86500(*a1, 0x12Fu, v546, v547, v548, v549);
  sub_223D86500(*a1, 0x130u, v550, v551, v552, v553);
  sub_223D86500(*a1, 0x131u, v554, v555, v556, v557);
  sub_223D86500(*a1, 0x132u, v558, v559, v560, v561);
  sub_223D86500(*a1, 0x133u, v562, v563, v564, v565);
  sub_223D86500(*a1, 0x134u, v566, v567, v568, v569);
  sub_223D86500(*a1, 0x135u, v570, v571, v572, v573);
  sub_223D86500(*a1, 0x136u, v574, v575, v576, v577);
  sub_223D86500(*a1, 0x137u, v578, v579, v580, v581);
  sub_223D86500(*a1, 0x138u, v582, v583, v584, v585);
  sub_223D86500(*a1, 0x139u, v586, v587, v588, v589);
  sub_223D86500(*a1, 0x13Au, v590, v591, v592, v593);
  sub_223D86500(*a1, 0x13Bu, v594, v595, v596, v597);
  sub_223D86500(*a1, 0x13Cu, v598, v599, v600, v601);
  sub_223D86500(*a1, 0x13Du, v602, v603, v604, v605);
  sub_223D86500(*a1, 0x13Eu, v606, v607, v608, v609);
  sub_223D86500(*a1, 0x13Fu, v610, v611, v612, v613);
  sub_223D86500(*a1, 0x140u, v614, v615, v616, v617);
  sub_223D86500(*a1, 0x141u, v618, v619, v620, v621);
  sub_223D86500(*a1, 0x142u, v622, v623, v624, v625);
  sub_223D86500(*a1, 0x143u, v626, v627, v628, v629);
  sub_223D86500(*a1, 0x144u, v630, v631, v632, v633);
  sub_223D86500(*a1, 0x145u, v634, v635, v636, v637);
  sub_223D86500(*a1, 0x146u, v638, v639, v640, v641);
  sub_223D86500(*a1, 0x147u, v642, v643, v644, v645);
  sub_223D86500(*a1, 0x148u, v646, v647, v648, v649);
  sub_223D86500(*a1, 0x149u, v650, v651, v652, v653);
  sub_223D86500(*a1, 0x14Au, v654, v655, v656, v657);
  sub_223D86500(*a1, 0x14Bu, v658, v659, v660, v661);
  sub_223D86500(*a1, 0x14Cu, v662, v663, v664, v665);
  sub_223D86500(*a1, 0x14Du, v666, v667, v668, v669);
  sub_223D86500(*a1, 0x14Eu, v670, v671, v672, v673);
  sub_223D86500(*a1, 0x14Fu, v674, v675, v676, v677);
  sub_223D86500(*a1, 0x150u, v678, v679, v680, v681);
  sub_223D86500(*a1, 0x151u, v682, v683, v684, v685);
  sub_223D86500(*a1, 0x152u, v686, v687, v688, v689);
  sub_223D86500(*a1, 0x153u, v690, v691, v692, v693);
  sub_223D86500(*a1, 0x154u, v694, v695, v696, v697);
  sub_223D86500(*a1, 0x155u, v698, v699, v700, v701);
  sub_223D86500(*a1, 0x156u, v702, v703, v704, v705);
  sub_223D86500(*a1, 0x157u, v706, v707, v708, v709);
  sub_223D86500(*a1, 0x158u, v710, v711, v712, v713);
  sub_223D86500(*a1, 0x159u, v714, v715, v716, v717);
  sub_223D86500(*a1, 0x15Au, v718, v719, v720, v721);
  sub_223D86500(*a1, 0x15Bu, v722, v723, v724, v725);
  sub_223D86500(*a1, 0x15Cu, v726, v727, v728, v729);
  sub_223D86500(*a1, 0x15Du, v730, v731, v732, v733);
  sub_223D86500(*a1, 0x15Eu, v734, v735, v736, v737);
  sub_223D86500(*a1, 0x15Fu, v738, v739, v740, v741);
  sub_223D86500(*a1, 0x160u, v742, v743, v744, v745);
  sub_223D86500(*a1, 0x161u, v746, v747, v748, v749);
  sub_223D86500(*a1, 0x162u, v750, v751, v752, v753);
  sub_223D86500(*a1, 0x163u, v754, v755, v756, v757);
  sub_223D86500(*a1, 0x164u, v758, v759, v760, v761);
  sub_223D86500(*a1, 0x165u, v762, v763, v764, v765);
  sub_223D86500(*a1, 0x166u, v766, v767, v768, v769);
  sub_223D86500(*a1, 0x167u, v770, v771, v772, v773);
  sub_223D86500(*a1, 0x168u, v774, v775, v776, v777);
  sub_223D86500(*a1, 0x169u, v778, v779, v780, v781);
  sub_223D86500(*a1, 0x16Au, v782, v783, v784, v785);
  sub_223D86500(*a1, 0x16Bu, v786, v787, v788, v789);
  sub_223D86500(*a1, 0x16Cu, v790, v791, v792, v793);
  sub_223D86500(*a1, 0x16Du, v794, v795, v796, v797);
  sub_223D86500(*a1, 0x16Eu, v798, v799, v800, v801);
  sub_223D86500(*a1, 0x16Fu, v802, v803, v804, v805);
  sub_223D86500(*a1, 0x170u, v806, v807, v808, v809);
  sub_223D86500(*a1, 0x171u, v810, v811, v812, v813);
  sub_223D86500(*a1, 0x172u, v814, v815, v816, v817);
  sub_223D86500(*a1, 0x173u, v818, v819, v820, v821);
  sub_223D86500(*a1, 0x174u, v822, v823, v824, v825);
  sub_223D86500(*a1, 0x175u, v826, v827, v828, v829);
  sub_223D86500(*a1, 0x176u, v830, v831, v832, v833);
  sub_223D86500(*a1, 0x177u, v834, v835, v836, v837);
  sub_223D86500(*a1, 0x178u, v838, v839, v840, v841);
  sub_223D86500(*a1, 0x179u, v842, v843, v844, v845);
  sub_223D86500(*a1, 0x17Au, v846, v847, v848, v849);
  sub_223D86500(*a1, 0x17Bu, v850, v851, v852, v853);
  sub_223D86500(*a1, 0x17Cu, v854, v855, v856, v857);
  sub_223D86500(*a1, 0x17Du, v858, v859, v860, v861);
  sub_223D86500(*a1, 0x17Eu, v862, v863, v864, v865);
  sub_223D86500(*a1, 0x17Fu, v866, v867, v868, v869);
  sub_223D86500(*a1, 0x180u, v870, v871, v872, v873);
  sub_223D86500(*a1, 0x181u, v874, v875, v876, v877);
  sub_223D86500(*a1, 0x182u, v878, v879, v880, v881);
  sub_223D86500(*a1, 0x183u, v882, v883, v884, v885);
  sub_223D86500(*a1, 0x184u, v886, v887, v888, v889);
  sub_223D86500(*a1, 0x185u, v890, v891, v892, v893);
  sub_223D86500(*a1, 0x186u, v894, v895, v896, v897);
  sub_223D86500(*a1, 0x187u, v898, v899, v900, v901);
  sub_223D86500(*a1, 0x188u, v902, v903, v904, v905);
  sub_223D86500(*a1, 0x189u, v906, v907, v908, v909);
  sub_223D86500(*a1, 0x18Au, v910, v911, v912, v913);
  sub_223D86500(*a1, 0x18Bu, v914, v915, v916, v917);
  sub_223D86500(*a1, 0x18Cu, v918, v919, v920, v921);
  sub_223D86500(*a1, 0x18Du, v922, v923, v924, v925);
  sub_223D86500(*a1, 0x18Eu, v926, v927, v928, v929);
  sub_223D86500(*a1, 0x18Fu, v930, v931, v932, v933);
  sub_223D86500(*a1, 0x190u, v934, v935, v936, v937);
  sub_223D86500(*a1, 0x191u, v938, v939, v940, v941);
  sub_223D86500(*a1, 0x192u, v942, v943, v944, v945);
  sub_223D86500(*a1, 0x193u, v946, v947, v948, v949);
  sub_223D86500(*a1, 0x194u, v950, v951, v952, v953);
  sub_223D86500(*a1, 0x195u, v954, v955, v956, v957);
  sub_223D86500(*a1, 0x196u, v958, v959, v960, v961);
  sub_223D86500(*a1, 0x197u, v962, v963, v964, v965);
  sub_223D86500(*a1, 0x198u, v966, v967, v968, v969);
  sub_223D86500(*a1, 0x199u, v970, v971, v972, v973);
  sub_223D86500(*a1, 0x19Au, v974, v975, v976, v977);
  sub_223D86500(*a1, 0x19Bu, v978, v979, v980, v981);
  sub_223D86500(*a1, 0x19Cu, v982, v983, v984, v985);
  sub_223D86500(*a1, 0x19Du, v986, v987, v988, v989);
  sub_223D86500(*a1, 0x19Eu, v990, v991, v992, v993);
  sub_223D86500(*a1, 0x19Fu, v994, v995, v996, v997);
  sub_223D86500(*a1, 0x1A0u, v998, v999, v1000, v1001);
  sub_223D86500(*a1, 0x1A1u, v1002, v1003, v1004, v1005);
  sub_223D86500(*a1, 0x1A2u, v1006, v1007, v1008, v1009);
  sub_223D86500(*a1, 0x1A3u, v1010, v1011, v1012, v1013);
  sub_223D86500(*a1, 0x1A4u, v1014, v1015, v1016, v1017);
  sub_223D86500(*a1, 0x1A5u, v1018, v1019, v1020, v1021);
  sub_223D86500(*a1, 0x1A6u, v1022, v1023, v1024, v1025);
  sub_223D86500(*a1, 0x1A7u, v1026, v1027, v1028, v1029);
  sub_223D86500(*a1, 0x1A8u, v1030, v1031, v1032, v1033);
  sub_223D86500(*a1, 0x1A9u, v1034, v1035, v1036, v1037);
  sub_223D86500(*a1, 0x1AAu, v1038, v1039, v1040, v1041);
  sub_223D86500(*a1, 0x1ABu, v1042, v1043, v1044, v1045);
  sub_223D86500(*a1, 0x1ACu, v1046, v1047, v1048, v1049);
  sub_223D86500(*a1, 0x1ADu, v1050, v1051, v1052, v1053);
  sub_223D86500(*a1, 0x1AEu, v1054, v1055, v1056, v1057);
  sub_223D86500(*a1, 0x1AFu, v1058, v1059, v1060, v1061);
  sub_223D86500(*a1, 0x1B0u, v1062, v1063, v1064, v1065);
  sub_223D86500(*a1, 0x1B1u, v1066, v1067, v1068, v1069);
  sub_223D86500(*a1, 0x1B2u, v1070, v1071, v1072, v1073);
  sub_223D86500(*a1, 0x1B3u, v1074, v1075, v1076, v1077);
  sub_223D86500(*a1, 0x1B4u, v1078, v1079, v1080, v1081);
  sub_223D86500(*a1, 0x1B5u, v1082, v1083, v1084, v1085);
  sub_223D86500(*a1, 0x1B6u, v1086, v1087, v1088, v1089);
  sub_223D86500(*a1, 0x1B7u, v1090, v1091, v1092, v1093);
  sub_223D86500(*a1, 0x1B8u, v1094, v1095, v1096, v1097);
  sub_223D86500(*a1, 0x1B9u, v1098, v1099, v1100, v1101);
  sub_223D86500(*a1, 0x1BAu, v1102, v1103, v1104, v1105);
  sub_223D86500(*a1, 0x1BBu, v1106, v1107, v1108, v1109);
  sub_223D86500(*a1, 0x1BCu, v1110, v1111, v1112, v1113);
  sub_223D86500(*a1, 0x1BDu, v1114, v1115, v1116, v1117);
  sub_223D86500(*a1, 0x1BEu, v1118, v1119, v1120, v1121);
  sub_223D86500(*a1, 0x1BFu, v1122, v1123, v1124, v1125);
  sub_223D86500(*a1, 0x1C0u, v1126, v1127, v1128, v1129);
  sub_223D86500(*a1, 0x1C1u, v1130, v1131, v1132, v1133);
  sub_223D86500(*a1, 0x1C2u, v1134, v1135, v1136, v1137);
  sub_223D86500(*a1, 0x1C3u, v1138, v1139, v1140, v1141);
  sub_223D86500(*a1, 0x1C4u, v1142, v1143, v1144, v1145);
  sub_223D86500(*a1, 0x1C5u, v1146, v1147, v1148, v1149);
  sub_223D86500(*a1, 0x1C6u, v1150, v1151, v1152, v1153);
  sub_223D86500(*a1, 0x1C7u, v1154, v1155, v1156, v1157);
  sub_223D86500(*a1, 0x1C8u, v1158, v1159, v1160, v1161);
  sub_223D86500(*a1, 0x1C9u, v1162, v1163, v1164, v1165);
  sub_223D86500(*a1, 0x1CAu, v1166, v1167, v1168, v1169);
  sub_223D86500(*a1, 0x1CBu, v1170, v1171, v1172, v1173);
  sub_223D86500(*a1, 0x1CCu, v1174, v1175, v1176, v1177);
  sub_223D86500(*a1, 0x1CDu, v1178, v1179, v1180, v1181);
  sub_223D86500(*a1, 0x1CEu, v1182, v1183, v1184, v1185);
  sub_223D86500(*a1, 0x1CFu, v1186, v1187, v1188, v1189);
  sub_223D86500(*a1, 0x1D0u, v1190, v1191, v1192, v1193);
  sub_223D86500(*a1, 0x1D1u, v1194, v1195, v1196, v1197);
  sub_223D86500(*a1, 0x1D2u, v1198, v1199, v1200, v1201);
  sub_223D86500(*a1, 0x1D3u, v1202, v1203, v1204, v1205);
  sub_223D86500(*a1, 0x1D4u, v1206, v1207, v1208, v1209);
  sub_223D86500(*a1, 0x1D5u, v1210, v1211, v1212, v1213);
  sub_223D86500(*a1, 0x1D6u, v1214, v1215, v1216, v1217);
  sub_223D86500(*a1, 0x1D7u, v1218, v1219, v1220, v1221);
  sub_223D86500(*a1, 0x1D8u, v1222, v1223, v1224, v1225);
  sub_223D86500(*a1, 0x1D9u, v1226, v1227, v1228, v1229);
  sub_223D86500(*a1, 0x1DAu, v1230, v1231, v1232, v1233);
  sub_223D86500(*a1, 0x1DBu, v1234, v1235, v1236, v1237);
  sub_223D86500(*a1, 0x1DCu, v1238, v1239, v1240, v1241);
  sub_223D86500(*a1, 0x1DDu, v1242, v1243, v1244, v1245);
  sub_223D86500(*a1, 0x1DEu, v1246, v1247, v1248, v1249);
  sub_223D86500(*a1, 0x1DFu, v1250, v1251, v1252, v1253);
  sub_223D86500(*a1, 0x1E0u, v1254, v1255, v1256, v1257);
  sub_223D86500(*a1, 0x1E1u, v1258, v1259, v1260, v1261);
  sub_223D86500(*a1, 0x1E2u, v1262, v1263, v1264, v1265);
  sub_223D86500(*a1, 0x1E3u, v1266, v1267, v1268, v1269);
  sub_223D86500(*a1, 0x1E4u, v1270, v1271, v1272, v1273);
  sub_223D86500(*a1, 0x1E5u, v1274, v1275, v1276, v1277);
  sub_223D86500(*a1, 0x1E6u, v1278, v1279, v1280, v1281);
  sub_223D86500(*a1, 0x1E7u, v1282, v1283, v1284, v1285);
  sub_223D86500(*a1, 0x1E8u, v1286, v1287, v1288, v1289);
  sub_223D86500(*a1, 0x1E9u, v1290, v1291, v1292, v1293);
  sub_223D86500(*a1, 0x1EAu, v1294, v1295, v1296, v1297);
  sub_223D86500(*a1, 0x1EBu, v1298, v1299, v1300, v1301);
  sub_223D86500(*a1, 0x1ECu, v1302, v1303, v1304, v1305);
  sub_223D86500(*a1, 0x1EDu, v1306, v1307, v1308, v1309);
  sub_223D86500(*a1, 0x1EEu, v1310, v1311, v1312, v1313);
  sub_223D86500(*a1, 0x1EFu, v1314, v1315, v1316, v1317);
  sub_223D86500(*a1, 0x1F0u, v1318, v1319, v1320, v1321);
  sub_223D86500(*a1, 0x1F1u, v1322, v1323, v1324, v1325);
  sub_223D86500(*a1, 0x1F2u, v1326, v1327, v1328, v1329);
  sub_223D86500(*a1, 0x1F3u, v1330, v1331, v1332, v1333);
  sub_223D86500(*a1, 0x1F4u, v1334, v1335, v1336, v1337);
  sub_223D86500(*a1, 0x1F5u, v1338, v1339, v1340, v1341);
  sub_223D86500(*a1, 0x1F6u, v1342, v1343, v1344, v1345);
  sub_223D86500(*a1, 0x1F7u, v1346, v1347, v1348, v1349);
  sub_223D86500(*a1, 0x1F8u, v1350, v1351, v1352, v1353);
  sub_223D86500(*a1, 0x1F9u, v1354, v1355, v1356, v1357);
  sub_223D86500(*a1, 0x1FAu, v1358, v1359, v1360, v1361);
  sub_223D86500(*a1, 0x1FBu, v1362, v1363, v1364, v1365);
  sub_223D86500(*a1, 0x1FCu, v1366, v1367, v1368, v1369);
  sub_223D86500(*a1, 0x1FDu, v1370, v1371, v1372, v1373);
  sub_223D86500(*a1, 0x1FEu, v1374, v1375, v1376, v1377);
  return sub_223D86500(*a1, 0x1FFu, v1378, v1379, v1380, v1381);
}

uint64_t sub_223D879D0(uint64_t result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v44;
  uint64_t v45;
  float v46;
  float *v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float *v56;
  BOOL v57;
  int v58;
  float v59;
  float *v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  float v76;
  float v77;
  float *v78;
  float *v79;
  float v80;
  float v81;
  float v82;
  float *v83;
  float v84;
  float *v85;
  float v86;
  float v87;
  float *v88;
  float *v89;
  float v90;
  float *v91;
  BOOL v93;
  uint64_t v94;
  float *v95;
  float *v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  int64_t v102;
  BOOL v103;
  uint64_t v104;
  float *v105;
  float *v106;
  float v107;
  float v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  float *v115;
  float *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  float *v121;
  float v122;
  float v123;
  float *v124;
  float v125;
  int v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float *v131;
  float v132;
  float v133;
  float v134;
  float v135;

  v7 = (float *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v68 = *(a2 - 1);
        v69 = *v8;
        if (v68 < *v8)
        {
          *v8 = v68;
          *(a2 - 1) = v69;
        }
        return result;
      case 3:
        v70 = *v8;
        v71 = v8[1];
        v72 = *(a2 - 1);
        if (v71 >= *v8)
        {
          if (v72 < v71)
          {
            v8[1] = v72;
            *(a2 - 1) = v71;
            v126 = *(_DWORD *)v8;
            v125 = v8[1];
            if (v125 < *v8)
              goto LABEL_195;
          }
        }
        else
        {
          if (v72 >= v71)
          {
            *v8 = v71;
            v8[1] = v70;
            v133 = *(a2 - 1);
            if (v133 >= v70)
              return result;
            v8[1] = v133;
          }
          else
          {
            *v8 = v72;
          }
          *(a2 - 1) = v70;
        }
        return result;
      case 4:
        v83 = v8 + 1;
        v84 = v8[1];
        v85 = v8 + 2;
        v86 = v8[2];
        v87 = *v8;
        if (v84 >= *v8)
        {
          if (v86 >= v84)
          {
LABEL_178:
            v84 = v86;
            v128 = *(a2 - 1);
            if (v128 >= v84)
              return result;
LABEL_179:
            *v85 = v128;
            *(a2 - 1) = v84;
            v125 = *v85;
            v132 = *v83;
            if (*v85 < *v83)
              goto LABEL_194;
            return result;
          }
          *v83 = v86;
          *v85 = v84;
          v88 = v8;
          v89 = v8 + 1;
          v90 = v84;
          if (v86 >= v87)
          {
LABEL_169:
            v128 = *(a2 - 1);
            if (v128 >= v84)
              return result;
            goto LABEL_179;
          }
        }
        else
        {
          v88 = v8;
          v89 = v8 + 2;
          v90 = *v8;
          if (v86 >= v84)
          {
            *v8 = v84;
            v8[1] = v87;
            v88 = v8 + 1;
            v89 = v8 + 2;
            v90 = v87;
            if (v86 >= v87)
              goto LABEL_178;
          }
        }
        *v88 = v86;
        *v89 = v87;
        v84 = v90;
        goto LABEL_169;
      case 5:
        v73 = v8 + 1;
        v74 = v8[1];
        v75 = v8 + 2;
        v76 = v8[2];
        v77 = *v8;
        if (v74 >= *v8)
        {
          if (v76 < v74)
          {
            *v73 = v76;
            *v75 = v74;
            v78 = v8;
            v79 = v8 + 1;
            v80 = v76;
            v81 = v77;
            v82 = v74;
            if (v76 >= v77)
            {
              v80 = v77;
              v77 = v76;
              v76 = v74;
              v127 = v8[3];
              if (v127 < v76)
                goto LABEL_186;
              goto LABEL_190;
            }
            goto LABEL_185;
          }
          v80 = *v8;
          v77 = v8[1];
          v127 = v8[3];
          if (v127 >= v76)
            goto LABEL_190;
        }
        else
        {
          if (v76 < v74)
          {
            v78 = v8;
            v79 = v8 + 2;
            v80 = v8[2];
            v81 = v8[1];
            v82 = *v8;
            goto LABEL_185;
          }
          *v8 = v74;
          v8[1] = v77;
          v78 = v8 + 1;
          v79 = v8 + 2;
          v80 = v74;
          v81 = v76;
          v82 = v77;
          if (v76 < v77)
          {
LABEL_185:
            *v78 = v76;
            *v79 = v77;
            v77 = v81;
            v76 = v82;
            v127 = v8[3];
            if (v127 < v82)
              goto LABEL_186;
LABEL_190:
            v76 = v127;
            goto LABEL_191;
          }
          v80 = v74;
          v127 = v8[3];
          if (v127 >= v76)
            goto LABEL_190;
        }
LABEL_186:
        v8[2] = v127;
        v8[3] = v76;
        if (v127 < v77)
        {
          *v73 = v127;
          *v75 = v77;
          if (v127 < v80)
          {
            *v8 = v127;
            v8[1] = v80;
          }
        }
LABEL_191:
        v134 = *(a2 - 1);
        if (v134 < v76)
        {
          v8[3] = v134;
          *(a2 - 1) = v76;
          v135 = v8[2];
          v125 = v8[3];
          if (v125 < v135)
          {
            v8[2] = v125;
            v8[3] = v135;
            v132 = v8[1];
            if (v125 < v132)
            {
LABEL_194:
              v8[1] = v125;
              v8[2] = v132;
              v126 = *(_DWORD *)v8;
              if (v125 < *v8)
              {
LABEL_195:
                *v8 = v125;
                *((_DWORD *)v8 + 1) = v126;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 95)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v101 = (unint64_t)(v10 - 2) >> 1;
              v102 = v101;
              do
              {
                if (v101 >= v102)
                {
                  v104 = (2 * v102) | 1;
                  v105 = &v8[v104];
                  if (2 * v102 + 2 < v10 && *v105 < v105[1])
                  {
                    ++v105;
                    v104 = 2 * v102 + 2;
                  }
                  v106 = &v8[v102];
                  v107 = *v105;
                  v108 = *v106;
                  if (*v105 >= *v106)
                  {
                    do
                    {
                      v109 = v105;
                      *v106 = v107;
                      if (v101 < v104)
                        break;
                      v110 = 2 * v104;
                      v104 = (2 * v104) | 1;
                      v105 = &v8[v104];
                      v111 = v110 + 2;
                      if (v111 < v10 && *v105 < v105[1])
                      {
                        ++v105;
                        v104 = v111;
                      }
                      v107 = *v105;
                      v106 = v109;
                    }
                    while (*v105 >= v108);
                    *v109 = v108;
                  }
                }
                v103 = v102-- <= 0;
              }
              while (!v103);
              v112 = (unint64_t)v9 >> 2;
              do
              {
                v113 = 0;
                v114 = *(_DWORD *)v8;
                v115 = v8;
                do
                {
                  v116 = v115;
                  v115 += v113 + 1;
                  v117 = 2 * v113;
                  v113 = (2 * v113) | 1;
                  v118 = v117 + 2;
                  if (v118 < v112 && *v115 < v115[1])
                  {
                    ++v115;
                    v113 = v118;
                  }
                  *v116 = *v115;
                }
                while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                if (v115 == --a2)
                {
                  *(_DWORD *)v115 = v114;
                }
                else
                {
                  *v115 = *a2;
                  *(_DWORD *)a2 = v114;
                  v119 = (char *)v115 - (char *)v8 + 4;
                  if (v119 >= 5)
                  {
                    v120 = (((unint64_t)v119 >> 2) - 2) >> 1;
                    v121 = &v8[v120];
                    v122 = *v121;
                    v123 = *v115;
                    if (*v121 < *v115)
                    {
                      do
                      {
                        v124 = v121;
                        *v115 = v122;
                        if (!v120)
                          break;
                        v120 = (v120 - 1) >> 1;
                        v121 = &v8[v120];
                        v122 = *v121;
                        v115 = v124;
                      }
                      while (*v121 < v123);
                      *v124 = v123;
                    }
                  }
                }
                v103 = v112-- <= 2;
              }
              while (!v103);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x201)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = *v8;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v13 < v16)
              {
                *v12 = v13;
                goto LABEL_31;
              }
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 < v17)
              {
                *v8 = v29;
LABEL_31:
                *(a2 - 1) = v17;
              }
            }
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *(_DWORD *)v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *(_DWORD *)v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v24 = *(v22 - 1);
          v23 = v22 - 1;
          v25 = v24;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v24 >= v26)
          {
            if (v27 < v25)
            {
              *v23 = v27;
              *(a2 - 2) = v25;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v25)
            {
              v8[1] = v25;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v33 = v31[1];
          v32 = v31 + 1;
          v34 = v33;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v33 >= v35)
          {
            if (v36 < v34)
            {
              *v32 = v36;
              *(a2 - 3) = v34;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v34)
            {
              v8[2] = v34;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = v40;
                v43 = *(_DWORD *)v8;
                *v8 = v42;
                *(_DWORD *)v12 = v43;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v44 = *(_DWORD *)v8;
            *v8 = v39;
            *(_DWORD *)v12 = v44;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v60 = v8 + 1;
              do
              {
                v8 = v60;
                if (v60 >= a2)
                  break;
                ++v60;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v59 = v8[1];
                ++v8;
              }
              while (v20 >= v59);
            }
            v61 = a2;
            if (v8 < a2)
            {
              v61 = a2;
              do
                v62 = *--v61;
              while (v20 < v62);
            }
            if (v8 < v61)
            {
              v63 = *v8;
              v64 = *v61;
              do
              {
                *v8 = v64;
                *v61 = v63;
                do
                {
                  v65 = v8[1];
                  ++v8;
                  v63 = v65;
                }
                while (v20 >= v65);
                do
                {
                  v66 = *--v61;
                  v64 = v66;
                }
                while (v20 < v66);
              }
              while (v8 < v61);
            }
            v67 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v67;
            a4 = 0;
            *v67 = v20;
            continue;
          }
          v58 = *(_DWORD *)v8;
          *v8 = v41;
          *(_DWORD *)v12 = v58;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v45 = 0;
          do
            v46 = v8[++v45];
          while (v46 < v20);
          v47 = &v8[v45];
          v48 = a2;
          if (v45 == 1)
          {
            v48 = a2;
            do
            {
              if (v47 >= v48)
                break;
              v50 = *--v48;
            }
            while (v50 >= v20);
          }
          else
          {
            do
              v49 = *--v48;
            while (v49 >= v20);
          }
          if (v47 >= v48)
          {
            v56 = v47 - 1;
            if (v47 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v51 = *v48;
            v52 = &v8[v45];
            v53 = v48;
            do
            {
              *v52 = v51;
              *v53 = v46;
              do
              {
                v54 = v52[1];
                ++v52;
                v46 = v54;
              }
              while (v54 < v20);
              do
              {
                v55 = *--v53;
                v51 = v55;
              }
              while (v55 >= v20);
            }
            while (v52 < v53);
            v56 = v52 - 1;
            if (v52 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v56;
          }
LABEL_74:
          *v56 = v20;
          if (v47 < v48)
            goto LABEL_77;
          v57 = sub_223D88418(v8, v56);
          v8 = v56 + 1;
          result = sub_223D88418(v56 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v57)
              continue;
LABEL_77:
            result = sub_223D879D0(v7, v56, a3, a4 & 1);
            a4 = 0;
            v8 = v56 + 1;
            continue;
          }
          a2 = v56;
          if (v57)
            return result;
          goto LABEL_2;
        }
        v91 = v8 + 1;
        v93 = v8 == a2 || v91 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v93)
          {
            v94 = 4;
            v95 = v8;
            do
            {
              v98 = *v95;
              v97 = v95[1];
              v95 = v91;
              if (v97 < v98)
              {
                v99 = v94;
                do
                {
                  *(float *)((char *)v8 + v99) = v98;
                  v100 = v99 - 4;
                  if (v99 == 4)
                  {
                    v96 = v8;
                    goto LABEL_123;
                  }
                  v98 = *(float *)((char *)v8 + v99 - 8);
                  v99 -= 4;
                }
                while (v97 < v98);
                v96 = (float *)((char *)v8 + v100);
LABEL_123:
                *v96 = v97;
              }
              v91 = v95 + 1;
              v94 += 4;
            }
            while (v95 + 1 != a2);
          }
        }
        else if (!v93)
        {
          do
          {
            v130 = *v7;
            v129 = v7[1];
            v7 = v91;
            if (v129 < v130)
            {
              v131 = v91;
              do
              {
                *v131 = v130;
                v130 = *(v131 - 2);
                --v131;
              }
              while (v129 < v130);
              *v131 = v129;
            }
            ++v91;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_223D88418(float *a1, float *a2)
{
  float v2;
  float v3;
  float *v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float *v32;
  int v33;
  uint64_t i;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v2 = *(a2 - 1);
      v3 = *a1;
      if (v2 >= *a1)
        return 1;
      *a1 = v2;
      *(a2 - 1) = v3;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v40 = *a1;
          v39 = a1[1];
          if (v39 < *a1)
          {
            *a1 = v39;
            a1[1] = v40;
            return 1;
          }
        }
      }
      else
      {
        if (v13 < v12)
        {
          *a1 = v13;
          *(a2 - 1) = v11;
          return 1;
        }
        *a1 = v12;
        a1[1] = v11;
        v45 = *(a2 - 1);
        if (v45 < v11)
        {
          a1[1] = v45;
          *(a2 - 1) = v11;
          return 1;
        }
      }
      return 1;
    case 4:
      v24 = a1 + 1;
      v25 = a1[1];
      v26 = a1 + 2;
      v27 = a1[2];
      v28 = *a1;
      if (v25 >= *a1)
      {
        if (v27 >= v25)
          goto LABEL_43;
        *v24 = v27;
        *v26 = v25;
        v29 = a1;
        v30 = a1 + 1;
        v31 = v25;
        if (v27 >= v28)
        {
LABEL_41:
          v42 = *(a2 - 1);
          if (v42 >= v25)
            return 1;
          goto LABEL_44;
        }
      }
      else
      {
        v29 = a1;
        v30 = a1 + 2;
        v31 = *a1;
        if (v27 >= v25)
        {
          *a1 = v25;
          a1[1] = v28;
          v29 = a1 + 1;
          v30 = a1 + 2;
          v31 = v28;
          if (v27 >= v28)
          {
LABEL_43:
            v25 = v27;
            v42 = *(a2 - 1);
            if (v42 >= v25)
              return 1;
LABEL_44:
            *v26 = v42;
            *(a2 - 1) = v25;
            v43 = *v26;
            v44 = *v24;
            if (*v26 < *v24)
              goto LABEL_59;
            return 1;
          }
        }
      }
      *v29 = v27;
      *v30 = v28;
      v25 = v31;
      goto LABEL_41;
    case 5:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 >= *a1)
      {
        if (v17 >= v15)
        {
          v21 = *a1;
          v18 = a1[1];
          v41 = a1[3];
          if (v41 < v17)
            goto LABEL_51;
          goto LABEL_55;
        }
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v17;
        v22 = v18;
        v23 = v15;
        if (v17 >= v18)
        {
          v21 = v18;
          v18 = v17;
          v17 = v15;
          v41 = a1[3];
          if (v41 < v17)
          {
LABEL_51:
            a1[2] = v41;
            a1[3] = v17;
            if (v41 < v18)
            {
              *v14 = v41;
              *v16 = v18;
              if (v41 < v21)
              {
                *a1 = v41;
                a1[1] = v21;
              }
            }
LABEL_56:
            v46 = *(a2 - 1);
            if (v46 < v17)
            {
              a1[3] = v46;
              *(a2 - 1) = v17;
              v47 = a1[2];
              v43 = a1[3];
              if (v43 < v47)
              {
                a1[2] = v43;
                a1[3] = v47;
                v44 = a1[1];
                if (v43 < v44)
                {
LABEL_59:
                  a1[1] = v43;
                  a1[2] = v44;
                  v48 = *a1;
                  if (v43 < *a1)
                  {
                    *a1 = v43;
                    a1[1] = v48;
                    return 1;
                  }
                }
              }
            }
            return 1;
          }
LABEL_55:
          v17 = v41;
          goto LABEL_56;
        }
      }
      else if (v17 >= v15)
      {
        *a1 = v15;
        a1[1] = v18;
        v19 = a1 + 1;
        v20 = a1 + 2;
        v21 = v15;
        v22 = v17;
        v23 = v18;
        if (v17 >= v18)
        {
          v21 = v15;
          v41 = a1[3];
          if (v41 < v17)
            goto LABEL_51;
          goto LABEL_55;
        }
      }
      else
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = a1[2];
        v22 = a1[1];
        v23 = *a1;
      }
      *v19 = v17;
      *v20 = v18;
      v18 = v22;
      v17 = v23;
      v41 = a1[3];
      if (v41 < v23)
        goto LABEL_51;
      goto LABEL_55;
    default:
      v5 = a1 + 2;
      v6 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 < *a1)
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v6 >= v7)
        {
          *a1 = v7;
          a1[1] = v8;
          v9 = a1 + 1;
          v10 = a1 + 2;
          if (v6 >= v8)
            goto LABEL_21;
        }
LABEL_20:
        *v9 = v6;
        *v10 = v8;
        goto LABEL_21;
      }
      if (v6 < v7)
      {
        a1[1] = v6;
        *v5 = v7;
        v9 = a1;
        v10 = a1 + 1;
        if (v6 < v8)
          goto LABEL_20;
      }
LABEL_21:
      v32 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v33 = 0;
      for (i = 12; ; i += 4)
      {
        v35 = *v32;
        v36 = *v5;
        if (*v32 < *v5)
          break;
LABEL_24:
        v5 = v32++;
        if (v32 == a2)
          return 1;
      }
      v37 = i;
      do
      {
        *(float *)((char *)a1 + v37) = v36;
        v38 = v37 - 4;
        if (v37 == 4)
        {
          *a1 = v35;
          if (++v33 != 8)
            goto LABEL_24;
          return v32 + 1 == a2;
        }
        v36 = *(float *)((char *)a1 + v37 - 8);
        v37 -= 4;
      }
      while (v35 < v36);
      *(float *)((char *)a1 + v38) = v35;
      if (++v33 != 8)
        goto LABEL_24;
      return v32 + 1 == a2;
  }
}

uint64_t sub_223D88808(uint64_t result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v44;
  uint64_t v45;
  float v46;
  float *v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float *v56;
  BOOL v57;
  int v58;
  float v59;
  float *v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  float v76;
  float v77;
  float *v78;
  float *v79;
  float v80;
  float v81;
  float v82;
  float *v83;
  float v84;
  float *v85;
  float v86;
  float v87;
  float *v88;
  float *v89;
  float v90;
  float *v91;
  BOOL v93;
  uint64_t v94;
  float *v95;
  float *v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  int64_t v102;
  BOOL v103;
  uint64_t v104;
  float *v105;
  float *v106;
  float v107;
  float v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  float *v115;
  float *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  float *v121;
  float v122;
  float v123;
  float *v124;
  float v125;
  int v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float *v131;
  float v132;
  float v133;
  float v134;
  float v135;

  v7 = (float *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v68 = *(a2 - 1);
        v69 = *v8;
        if (v68 < *v8)
        {
          *v8 = v68;
          *(a2 - 1) = v69;
        }
        return result;
      case 3:
        v70 = *v8;
        v71 = v8[1];
        v72 = *(a2 - 1);
        if (v71 >= *v8)
        {
          if (v72 < v71)
          {
            v8[1] = v72;
            *(a2 - 1) = v71;
            v126 = *(_DWORD *)v8;
            v125 = v8[1];
            if (v125 < *v8)
              goto LABEL_195;
          }
        }
        else
        {
          if (v72 >= v71)
          {
            *v8 = v71;
            v8[1] = v70;
            v133 = *(a2 - 1);
            if (v133 >= v70)
              return result;
            v8[1] = v133;
          }
          else
          {
            *v8 = v72;
          }
          *(a2 - 1) = v70;
        }
        return result;
      case 4:
        v83 = v8 + 1;
        v84 = v8[1];
        v85 = v8 + 2;
        v86 = v8[2];
        v87 = *v8;
        if (v84 >= *v8)
        {
          if (v86 >= v84)
          {
LABEL_178:
            v84 = v86;
            v128 = *(a2 - 1);
            if (v128 >= v84)
              return result;
LABEL_179:
            *v85 = v128;
            *(a2 - 1) = v84;
            v125 = *v85;
            v132 = *v83;
            if (*v85 < *v83)
              goto LABEL_194;
            return result;
          }
          *v83 = v86;
          *v85 = v84;
          v88 = v8;
          v89 = v8 + 1;
          v90 = v84;
          if (v86 >= v87)
          {
LABEL_169:
            v128 = *(a2 - 1);
            if (v128 >= v84)
              return result;
            goto LABEL_179;
          }
        }
        else
        {
          v88 = v8;
          v89 = v8 + 2;
          v90 = *v8;
          if (v86 >= v84)
          {
            *v8 = v84;
            v8[1] = v87;
            v88 = v8 + 1;
            v89 = v8 + 2;
            v90 = v87;
            if (v86 >= v87)
              goto LABEL_178;
          }
        }
        *v88 = v86;
        *v89 = v87;
        v84 = v90;
        goto LABEL_169;
      case 5:
        v73 = v8 + 1;
        v74 = v8[1];
        v75 = v8 + 2;
        v76 = v8[2];
        v77 = *v8;
        if (v74 >= *v8)
        {
          if (v76 < v74)
          {
            *v73 = v76;
            *v75 = v74;
            v78 = v8;
            v79 = v8 + 1;
            v80 = v76;
            v81 = v77;
            v82 = v74;
            if (v76 >= v77)
            {
              v80 = v77;
              v77 = v76;
              v76 = v74;
              v127 = v8[3];
              if (v127 < v76)
                goto LABEL_186;
              goto LABEL_190;
            }
            goto LABEL_185;
          }
          v80 = *v8;
          v77 = v8[1];
          v127 = v8[3];
          if (v127 >= v76)
            goto LABEL_190;
        }
        else
        {
          if (v76 < v74)
          {
            v78 = v8;
            v79 = v8 + 2;
            v80 = v8[2];
            v81 = v8[1];
            v82 = *v8;
            goto LABEL_185;
          }
          *v8 = v74;
          v8[1] = v77;
          v78 = v8 + 1;
          v79 = v8 + 2;
          v80 = v74;
          v81 = v76;
          v82 = v77;
          if (v76 < v77)
          {
LABEL_185:
            *v78 = v76;
            *v79 = v77;
            v77 = v81;
            v76 = v82;
            v127 = v8[3];
            if (v127 < v82)
              goto LABEL_186;
LABEL_190:
            v76 = v127;
            goto LABEL_191;
          }
          v80 = v74;
          v127 = v8[3];
          if (v127 >= v76)
            goto LABEL_190;
        }
LABEL_186:
        v8[2] = v127;
        v8[3] = v76;
        if (v127 < v77)
        {
          *v73 = v127;
          *v75 = v77;
          if (v127 < v80)
          {
            *v8 = v127;
            v8[1] = v80;
          }
        }
LABEL_191:
        v134 = *(a2 - 1);
        if (v134 < v76)
        {
          v8[3] = v134;
          *(a2 - 1) = v76;
          v135 = v8[2];
          v125 = v8[3];
          if (v125 < v135)
          {
            v8[2] = v125;
            v8[3] = v135;
            v132 = v8[1];
            if (v125 < v132)
            {
LABEL_194:
              v8[1] = v125;
              v8[2] = v132;
              v126 = *(_DWORD *)v8;
              if (v125 < *v8)
              {
LABEL_195:
                *v8 = v125;
                *((_DWORD *)v8 + 1) = v126;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 95)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v101 = (unint64_t)(v10 - 2) >> 1;
              v102 = v101;
              do
              {
                if (v101 >= v102)
                {
                  v104 = (2 * v102) | 1;
                  v105 = &v8[v104];
                  if (2 * v102 + 2 < v10 && *v105 < v105[1])
                  {
                    ++v105;
                    v104 = 2 * v102 + 2;
                  }
                  v106 = &v8[v102];
                  v107 = *v105;
                  v108 = *v106;
                  if (*v105 >= *v106)
                  {
                    do
                    {
                      v109 = v105;
                      *v106 = v107;
                      if (v101 < v104)
                        break;
                      v110 = 2 * v104;
                      v104 = (2 * v104) | 1;
                      v105 = &v8[v104];
                      v111 = v110 + 2;
                      if (v111 < v10 && *v105 < v105[1])
                      {
                        ++v105;
                        v104 = v111;
                      }
                      v107 = *v105;
                      v106 = v109;
                    }
                    while (*v105 >= v108);
                    *v109 = v108;
                  }
                }
                v103 = v102-- <= 0;
              }
              while (!v103);
              v112 = (unint64_t)v9 >> 2;
              do
              {
                v113 = 0;
                v114 = *(_DWORD *)v8;
                v115 = v8;
                do
                {
                  v116 = v115;
                  v115 += v113 + 1;
                  v117 = 2 * v113;
                  v113 = (2 * v113) | 1;
                  v118 = v117 + 2;
                  if (v118 < v112 && *v115 < v115[1])
                  {
                    ++v115;
                    v113 = v118;
                  }
                  *v116 = *v115;
                }
                while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                if (v115 == --a2)
                {
                  *(_DWORD *)v115 = v114;
                }
                else
                {
                  *v115 = *a2;
                  *(_DWORD *)a2 = v114;
                  v119 = (char *)v115 - (char *)v8 + 4;
                  if (v119 >= 5)
                  {
                    v120 = (((unint64_t)v119 >> 2) - 2) >> 1;
                    v121 = &v8[v120];
                    v122 = *v121;
                    v123 = *v115;
                    if (*v121 < *v115)
                    {
                      do
                      {
                        v124 = v121;
                        *v115 = v122;
                        if (!v120)
                          break;
                        v120 = (v120 - 1) >> 1;
                        v121 = &v8[v120];
                        v122 = *v121;
                        v115 = v124;
                      }
                      while (*v121 < v123);
                      *v124 = v123;
                    }
                  }
                }
                v103 = v112-- <= 2;
              }
              while (!v103);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x201)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = *v8;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v13 < v16)
              {
                *v12 = v13;
                goto LABEL_31;
              }
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 < v17)
              {
                *v8 = v29;
LABEL_31:
                *(a2 - 1) = v17;
              }
            }
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *(_DWORD *)v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *(_DWORD *)v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v24 = *(v22 - 1);
          v23 = v22 - 1;
          v25 = v24;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v24 >= v26)
          {
            if (v27 < v25)
            {
              *v23 = v27;
              *(a2 - 2) = v25;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v25)
            {
              v8[1] = v25;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v33 = v31[1];
          v32 = v31 + 1;
          v34 = v33;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v33 >= v35)
          {
            if (v36 < v34)
            {
              *v32 = v36;
              *(a2 - 3) = v34;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v34)
            {
              v8[2] = v34;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = v40;
                v43 = *(_DWORD *)v8;
                *v8 = v42;
                *(_DWORD *)v12 = v43;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v44 = *(_DWORD *)v8;
            *v8 = v39;
            *(_DWORD *)v12 = v44;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v60 = v8 + 1;
              do
              {
                v8 = v60;
                if (v60 >= a2)
                  break;
                ++v60;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v59 = v8[1];
                ++v8;
              }
              while (v20 >= v59);
            }
            v61 = a2;
            if (v8 < a2)
            {
              v61 = a2;
              do
                v62 = *--v61;
              while (v20 < v62);
            }
            if (v8 < v61)
            {
              v63 = *v8;
              v64 = *v61;
              do
              {
                *v8 = v64;
                *v61 = v63;
                do
                {
                  v65 = v8[1];
                  ++v8;
                  v63 = v65;
                }
                while (v20 >= v65);
                do
                {
                  v66 = *--v61;
                  v64 = v66;
                }
                while (v20 < v66);
              }
              while (v8 < v61);
            }
            v67 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v67;
            a4 = 0;
            *v67 = v20;
            continue;
          }
          v58 = *(_DWORD *)v8;
          *v8 = v41;
          *(_DWORD *)v12 = v58;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v45 = 0;
          do
            v46 = v8[++v45];
          while (v46 < v20);
          v47 = &v8[v45];
          v48 = a2;
          if (v45 == 1)
          {
            v48 = a2;
            do
            {
              if (v47 >= v48)
                break;
              v50 = *--v48;
            }
            while (v50 >= v20);
          }
          else
          {
            do
              v49 = *--v48;
            while (v49 >= v20);
          }
          if (v47 >= v48)
          {
            v56 = v47 - 1;
            if (v47 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v51 = *v48;
            v52 = &v8[v45];
            v53 = v48;
            do
            {
              *v52 = v51;
              *v53 = v46;
              do
              {
                v54 = v52[1];
                ++v52;
                v46 = v54;
              }
              while (v54 < v20);
              do
              {
                v55 = *--v53;
                v51 = v55;
              }
              while (v55 >= v20);
            }
            while (v52 < v53);
            v56 = v52 - 1;
            if (v52 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v56;
          }
LABEL_74:
          *v56 = v20;
          if (v47 < v48)
            goto LABEL_77;
          v57 = sub_223D89250(v8, v56);
          v8 = v56 + 1;
          result = sub_223D89250(v56 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v57)
              continue;
LABEL_77:
            result = sub_223D88808(v7, v56, a3, a4 & 1);
            a4 = 0;
            v8 = v56 + 1;
            continue;
          }
          a2 = v56;
          if (v57)
            return result;
          goto LABEL_2;
        }
        v91 = v8 + 1;
        v93 = v8 == a2 || v91 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v93)
          {
            v94 = 4;
            v95 = v8;
            do
            {
              v98 = *v95;
              v97 = v95[1];
              v95 = v91;
              if (v97 < v98)
              {
                v99 = v94;
                do
                {
                  *(float *)((char *)v8 + v99) = v98;
                  v100 = v99 - 4;
                  if (v99 == 4)
                  {
                    v96 = v8;
                    goto LABEL_123;
                  }
                  v98 = *(float *)((char *)v8 + v99 - 8);
                  v99 -= 4;
                }
                while (v97 < v98);
                v96 = (float *)((char *)v8 + v100);
LABEL_123:
                *v96 = v97;
              }
              v91 = v95 + 1;
              v94 += 4;
            }
            while (v95 + 1 != a2);
          }
        }
        else if (!v93)
        {
          do
          {
            v130 = *v7;
            v129 = v7[1];
            v7 = v91;
            if (v129 < v130)
            {
              v131 = v91;
              do
              {
                *v131 = v130;
                v130 = *(v131 - 2);
                --v131;
              }
              while (v129 < v130);
              *v131 = v129;
            }
            ++v91;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_223D89250(float *a1, float *a2)
{
  float v2;
  float v3;
  float *v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float *v32;
  int v33;
  uint64_t i;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v2 = *(a2 - 1);
      v3 = *a1;
      if (v2 >= *a1)
        return 1;
      *a1 = v2;
      *(a2 - 1) = v3;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v40 = *a1;
          v39 = a1[1];
          if (v39 < *a1)
          {
            *a1 = v39;
            a1[1] = v40;
            return 1;
          }
        }
      }
      else
      {
        if (v13 < v12)
        {
          *a1 = v13;
          *(a2 - 1) = v11;
          return 1;
        }
        *a1 = v12;
        a1[1] = v11;
        v45 = *(a2 - 1);
        if (v45 < v11)
        {
          a1[1] = v45;
          *(a2 - 1) = v11;
          return 1;
        }
      }
      return 1;
    case 4:
      v24 = a1 + 1;
      v25 = a1[1];
      v26 = a1 + 2;
      v27 = a1[2];
      v28 = *a1;
      if (v25 >= *a1)
      {
        if (v27 >= v25)
          goto LABEL_43;
        *v24 = v27;
        *v26 = v25;
        v29 = a1;
        v30 = a1 + 1;
        v31 = v25;
        if (v27 >= v28)
        {
LABEL_41:
          v42 = *(a2 - 1);
          if (v42 >= v25)
            return 1;
          goto LABEL_44;
        }
      }
      else
      {
        v29 = a1;
        v30 = a1 + 2;
        v31 = *a1;
        if (v27 >= v25)
        {
          *a1 = v25;
          a1[1] = v28;
          v29 = a1 + 1;
          v30 = a1 + 2;
          v31 = v28;
          if (v27 >= v28)
          {
LABEL_43:
            v25 = v27;
            v42 = *(a2 - 1);
            if (v42 >= v25)
              return 1;
LABEL_44:
            *v26 = v42;
            *(a2 - 1) = v25;
            v43 = *v26;
            v44 = *v24;
            if (*v26 < *v24)
              goto LABEL_59;
            return 1;
          }
        }
      }
      *v29 = v27;
      *v30 = v28;
      v25 = v31;
      goto LABEL_41;
    case 5:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 >= *a1)
      {
        if (v17 >= v15)
        {
          v21 = *a1;
          v18 = a1[1];
          v41 = a1[3];
          if (v41 < v17)
            goto LABEL_51;
          goto LABEL_55;
        }
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v17;
        v22 = v18;
        v23 = v15;
        if (v17 >= v18)
        {
          v21 = v18;
          v18 = v17;
          v17 = v15;
          v41 = a1[3];
          if (v41 < v17)
          {
LABEL_51:
            a1[2] = v41;
            a1[3] = v17;
            if (v41 < v18)
            {
              *v14 = v41;
              *v16 = v18;
              if (v41 < v21)
              {
                *a1 = v41;
                a1[1] = v21;
              }
            }
LABEL_56:
            v46 = *(a2 - 1);
            if (v46 < v17)
            {
              a1[3] = v46;
              *(a2 - 1) = v17;
              v47 = a1[2];
              v43 = a1[3];
              if (v43 < v47)
              {
                a1[2] = v43;
                a1[3] = v47;
                v44 = a1[1];
                if (v43 < v44)
                {
LABEL_59:
                  a1[1] = v43;
                  a1[2] = v44;
                  v48 = *a1;
                  if (v43 < *a1)
                  {
                    *a1 = v43;
                    a1[1] = v48;
                    return 1;
                  }
                }
              }
            }
            return 1;
          }
LABEL_55:
          v17 = v41;
          goto LABEL_56;
        }
      }
      else if (v17 >= v15)
      {
        *a1 = v15;
        a1[1] = v18;
        v19 = a1 + 1;
        v20 = a1 + 2;
        v21 = v15;
        v22 = v17;
        v23 = v18;
        if (v17 >= v18)
        {
          v21 = v15;
          v41 = a1[3];
          if (v41 < v17)
            goto LABEL_51;
          goto LABEL_55;
        }
      }
      else
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = a1[2];
        v22 = a1[1];
        v23 = *a1;
      }
      *v19 = v17;
      *v20 = v18;
      v18 = v22;
      v17 = v23;
      v41 = a1[3];
      if (v41 < v23)
        goto LABEL_51;
      goto LABEL_55;
    default:
      v5 = a1 + 2;
      v6 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 < *a1)
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v6 >= v7)
        {
          *a1 = v7;
          a1[1] = v8;
          v9 = a1 + 1;
          v10 = a1 + 2;
          if (v6 >= v8)
            goto LABEL_21;
        }
LABEL_20:
        *v9 = v6;
        *v10 = v8;
        goto LABEL_21;
      }
      if (v6 < v7)
      {
        a1[1] = v6;
        *v5 = v7;
        v9 = a1;
        v10 = a1 + 1;
        if (v6 < v8)
          goto LABEL_20;
      }
LABEL_21:
      v32 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v33 = 0;
      for (i = 12; ; i += 4)
      {
        v35 = *v32;
        v36 = *v5;
        if (*v32 < *v5)
          break;
LABEL_24:
        v5 = v32++;
        if (v32 == a2)
          return 1;
      }
      v37 = i;
      do
      {
        *(float *)((char *)a1 + v37) = v36;
        v38 = v37 - 4;
        if (v37 == 4)
        {
          *a1 = v35;
          if (++v33 != 8)
            goto LABEL_24;
          return v32 + 1 == a2;
        }
        v36 = *(float *)((char *)a1 + v37 - 8);
        v37 -= 4;
      }
      while (v35 < v36);
      *(float *)((char *)a1 + v38) = v35;
      if (++v33 != 8)
        goto LABEL_24;
      return v32 + 1 == a2;
  }
}

unint64_t sub_223D89640(unint64_t result, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  _BYTE *v7;
  uint64_t v8;
  _BYTE **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE **v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  _BYTE **v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  __int128 v38;
  __int128 v39;
  _BOOL4 v40;
  char v41;
  _BOOL4 v42;
  _BOOL4 v43;
  char v44;
  _BOOL4 v45;
  _BYTE **v46;
  _DWORD *v47;
  uint64_t v48;
  unsigned int *v49;
  _BYTE **v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  _BOOL4 v69;
  char v70;
  _BOOL4 v71;
  _BOOL4 v72;
  char v73;
  _BOOL4 v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  _BOOL4 v93;
  char v94;
  _BOOL4 v95;
  _BOOL4 v96;
  char v97;
  _BOOL4 v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  _BOOL4 v117;
  char v118;
  _BOOL4 v119;
  _BOOL4 v120;
  char v121;
  _BOOL4 v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  _BOOL4 v141;
  char v142;
  _BOOL4 v143;
  _BOOL4 v144;
  char v145;
  _BOOL4 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  unint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  int v164;
  _BOOL4 v165;
  char v166;
  _BOOL4 v167;
  _BOOL4 v168;
  char v169;
  _BOOL4 v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  int v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unint64_t v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  _BOOL4 v189;
  char v190;
  _BOOL4 v191;
  _BOOL4 v192;
  char v193;
  _BOOL4 v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE *v198;
  int v199;
  unint64_t v200;
  uint64_t v201;
  int v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  unint64_t v206;
  uint64_t v207;
  int v208;
  unint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  char v214;
  _BOOL4 v215;
  _BOOL4 v216;
  char v217;
  _BOOL4 v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  float32x4_t v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  _OWORD v336[2];
  _QWORD v337[3];

  v7 = (_BYTE *)result;
  v337[1] = *MEMORY[0x24BDAC8D0];
  *(_WORD *)result = *(_WORD *)(result + 9);
  *(_WORD *)(result + 3) = *(_WORD *)(result + 12);
  *(_BYTE *)(result + 6) = *(_BYTE *)(result + 15);
  *(_WORD *)(result + 9) = *(_WORD *)(result + 18);
  *(_WORD *)(result + 12) = *(_WORD *)(result + 21);
  *(_BYTE *)(result + 15) = *(_BYTE *)(result + 24);
  v8 = *a3;
  v9 = (_BYTE **)a3[2];
  v10 = *(unsigned int *)(a3[1] + 36);
  if ((v10 & 0x80000000) != 0)
  {
    v12 = v8 + 280;
  }
  else
  {
    v11 = *(_QWORD *)(v8 + 2328);
    if (v10 >= (*(_QWORD *)(v8 + 2336) - v11) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        goto LABEL_695;
      v11 = *(_QWORD *)(v8 + 2328);
    }
    v12 = v11 + (v10 << 11);
  }
  v13 = *(_DWORD *)(v12 + 2020);
  v14 = v13 & 0xCFFFFFFF;
  if ((v13 & 0x10000000) != 0)
    v15 = 0x40000000;
  else
    v15 = 0x80000000;
  if ((v13 & 0x20000000) != 0)
    v14 = v15;
  if (!**v9)
    v13 = v14;
  v7[18] = (v13 & 0x40000000) != 0;
  v16 = *a3;
  v17 = (_BYTE **)a3[2];
  v18 = *(unsigned int *)(a3[1] + 40);
  if ((v18 & 0x80000000) != 0)
  {
    v20 = v16 + 280;
  }
  else
  {
    v19 = *(_QWORD *)(v16 + 2328);
    if (v18 >= (*(_QWORD *)(v16 + 2336) - v19) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        goto LABEL_695;
      v19 = *(_QWORD *)(v16 + 2328);
    }
    v20 = v19 + (v18 << 11);
  }
  v21 = *(_DWORD *)(v20 + 228);
  v22 = v21 & 0xCFFFFFFF;
  if ((v21 & 0x10000000) != 0)
    v23 = 0x40000000;
  else
    v23 = 0x80000000;
  if ((v21 & 0x20000000) != 0)
    v22 = v23;
  if (!**v17)
    v21 = v22;
  v7[19] = (v21 & 0x40000000) != 0;
  v24 = *a3;
  v25 = (_BYTE **)a3[2];
  v26 = *(unsigned int *)(a3[1] + 48);
  if ((v26 & 0x80000000) != 0)
  {
    v28 = *(_DWORD *)(v24 + 2076);
    if (**v25)
      goto LABEL_38;
    goto LABEL_32;
  }
  v27 = *(_QWORD *)(v24 + 2328);
  if (v26 >= (*(_QWORD *)(v24 + 2336) - v27) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      goto LABEL_695;
    v27 = *(_QWORD *)(v24 + 2328);
  }
  v28 = *(_DWORD *)(v27 + (v26 << 11) + 1796);
  if (!**v25)
  {
LABEL_32:
    if ((v28 & 0x10000000) != 0)
      v29 = 0x40000000;
    else
      v29 = 0x80000000;
    if ((v28 & 0x20000000) != 0)
      v28 = v29;
    else
      v28 &= 0xCFFFFFFF;
  }
LABEL_38:
  v7[21] = (v28 & 0x40000000) != 0;
  v30 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4);
  if (***(_BYTE ***)a2)
  {
    v7[22] = (v30 & 0x40000000) != 0;
    v31 = *a3;
    v32 = (_BYTE **)a3[2];
    v33 = *(unsigned int *)(a3[1] + 48);
    if ((v33 & 0x80000000) == 0)
      goto LABEL_40;
LABEL_497:
    v35 = *(_DWORD *)(v31 + 2108);
    if (**v32)
      goto LABEL_50;
    goto LABEL_44;
  }
  if ((v30 & 0x10000000) != 0)
    v219 = 0x40000000;
  else
    v219 = 0x80000000;
  if ((v30 & 0x20000000) != 0)
    v220 = v219;
  else
    v220 = v30 & 0xCFFFFFFF;
  v7[22] = (v220 & 0x40000000) != 0;
  v31 = *a3;
  v32 = (_BYTE **)a3[2];
  v33 = *(unsigned int *)(a3[1] + 48);
  if ((v33 & 0x80000000) != 0)
    goto LABEL_497;
LABEL_40:
  v34 = *(_QWORD *)(v31 + 2328);
  if (v33 < (*(_QWORD *)(v31 + 2336) - v34) >> 11)
    goto LABEL_43;
  result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
  if ((result & 1) != 0)
LABEL_695:
    abort();
  v34 = *(_QWORD *)(v31 + 2328);
LABEL_43:
  v35 = *(_DWORD *)(v34 + (v33 << 11) + 1828);
  if (**v32)
    goto LABEL_50;
LABEL_44:
  if ((v35 & 0x10000000) != 0)
    v36 = 0x40000000;
  else
    v36 = 0x80000000;
  if ((v35 & 0x20000000) != 0)
    v35 = v36;
  else
    v35 &= 0xCFFFFFFF;
LABEL_50:
  v37 = (v35 >> 30) & 1;
  v7[24] = v37;
  v272 = a4[2];
  v273 = a4[3];
  v274 = a4[4];
  v270 = *a4;
  v271 = a4[1];
  if (v7[13])
  {
    v38 = a4[3];
    v282 = a4[2];
    v283 = v38;
    v284 = a4[4];
    v39 = a4[1];
    v280 = *a4;
    v281 = v39;
    *(_QWORD *)&v330 = 0xD0D0D0D0D0D0D0DLL;
    v275 = xmmword_22466FC40;
    v276 = (__int128)xmmword_22466FC50;
    *(_QWORD *)&v325 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v280, 0, 0, 0, (uint64_t)&v330, (uint64_t)&v275, (uint64_t)&v325, COERCE_DOUBLE(0x4000000000), xmmword_22466FC50);
    if (!v7[4])
    {
      v277 = v272;
      v278 = v273;
      v279 = v274;
      *(_QWORD *)&v325 = 0x4040D0D04040D0DLL;
      v275 = v270;
      v276 = v271;
      v330 = xmmword_22466FC60;
      v331 = (__int128)xmmword_22466FC70;
      *(_QWORD *)&v320 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v275, 0, 0, 0, (uint64_t)&v325, (uint64_t)&v330, (uint64_t)&v320, COERCE_DOUBLE(0x4000000000), xmmword_22466FC70);
      v40 = (v7[3] | v7[12]) == 0;
      if (!(v7[1] | v7[10]))
      {
        v332 = v272;
        v333 = v273;
        v334 = v274;
        v330 = v270;
        v331 = v271;
        *(_QWORD *)&v320 = 0x10104040A0A0D0DLL;
        v325 = xmmword_22466FC80;
        v326 = (__int128)xmmword_22466FC90;
        *(_QWORD *)&v315 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v330, 0, 0, 0, (uint64_t)&v320, (uint64_t)&v325, (uint64_t)&v315, COERCE_DOUBLE(0x4000000000), xmmword_22466FC90);
        if (!*v7)
        {
          v41 = !v40;
          if (v7[9])
            v41 = 1;
          if ((v41 & 1) == 0)
          {
            v327 = v272;
            v328 = v273;
            v329 = v274;
            v326 = v271;
            v325 = v270;
            *(_QWORD *)&v315 = 0x1090A03040C0DLL;
            v320 = xmmword_22466FCA0;
            v321 = (__int128)xmmword_22466FCB0;
            *(_QWORD *)&v310 = 0x1090A03040C0DLL;
            result = sub_223D91438((unint64_t)&v325, 0, 0, 0, (uint64_t)&v315, (uint64_t)&v320, (uint64_t)&v310, COERCE_DOUBLE(0x1C000000000), xmmword_22466FCB0);
          }
        }
      }
      if (v7[6])
        v42 = 0;
      else
        v42 = v40;
      if (v42 && !v7[15])
      {
        v322 = v272;
        v323 = v273;
        v324 = v274;
        v321 = v271;
        v320 = v270;
        *(_QWORD *)&v310 = 0x30403040C0D0C0DLL;
        v315 = xmmword_22466FCC0;
        v316 = (__int128)xmmword_22466FCD0;
        *(_QWORD *)&v305 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v320, 0, 0, 0, (uint64_t)&v310, (uint64_t)&v315, (uint64_t)&v305, COERCE_DOUBLE(0x1C000000000), xmmword_22466FCD0);
      }
    }
    v43 = (v7[12] | v7[21]) == 0;
    if (!(v7[10] | v7[19]))
    {
      v317 = v272;
      v318 = v273;
      v319 = v274;
      v316 = v271;
      v315 = v270;
      *(_QWORD *)&v305 = 0xA0A0A0A0D0D0D0DLL;
      v310 = xmmword_22466FCE0;
      v311 = (__int128)xmmword_22466FCF0;
      *(_QWORD *)&v300 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v315, 0, 0, 0, (uint64_t)&v305, (uint64_t)&v310, (uint64_t)&v300, COERCE_DOUBLE(0x4000000000), xmmword_22466FCF0);
      if (!v7[9])
      {
        v44 = !v43;
        if (v7[18])
          v44 = 1;
        if ((v44 & 1) == 0)
        {
          v312 = v272;
          v313 = v273;
          v314 = v274;
          v311 = v271;
          v310 = v270;
          *(_QWORD *)&v300 = 0x90A0C0D090A0C0DLL;
          v305 = xmmword_22466FD00;
          v306 = (__int128)xmmword_22466FD10;
          *(_QWORD *)&v295 = 0x12131516090A0C0DLL;
          result = sub_223D91438((unint64_t)&v310, 0, 0, 0, (uint64_t)&v300, (uint64_t)&v305, (uint64_t)&v295, COERCE_DOUBLE(0x1C000000000), xmmword_22466FD10);
        }
      }
    }
    if (v7[15])
      v45 = 0;
    else
      v45 = v43;
    LOBYTE(v37) = v7[24];
    if (v45 && !v7[24])
    {
      v307 = v272;
      v308 = v273;
      v309 = v274;
      v306 = v271;
      v305 = v270;
      *(_QWORD *)&v295 = 0xC0D0C0D0C0D0C0DLL;
      v300 = xmmword_22466FD20;
      v301 = xmmword_22466FD30;
      *(_QWORD *)&v290 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v305, 0, 0, 0, (uint64_t)&v295, (uint64_t)&v300, (uint64_t)&v290, COERCE_DOUBLE(0x1C000000000), xmmword_22466FD30);
      LOBYTE(v37) = v7[24];
    }
  }
  v46 = *(_BYTE ***)a2;
  v47 = *(_DWORD **)(a2 + 16);
  v48 = *a3;
  v49 = (unsigned int *)a3[1];
  v50 = (_BYTE **)a3[2];
  v267 = a4[2];
  v268 = a4[3];
  v269 = a4[4];
  v265 = *a4;
  v266 = a4[1];
  *(_WORD *)v7 = *(_WORD *)(v7 + 9);
  *(_WORD *)(v7 + 3) = *((_WORD *)v7 + 6);
  v7[6] = v7[15];
  *(_WORD *)(v7 + 9) = *((_WORD *)v7 + 9);
  *((_WORD *)v7 + 6) = *(_WORD *)(v7 + 21);
  v7[15] = v37;
  v51 = v49[9];
  if ((v51 & 0x80000000) != 0)
  {
    v54 = *v50;
    v55 = *(_DWORD *)(v48 + 2304);
    if (**v50)
      goto LABEL_81;
  }
  else
  {
    v52 = *(_QWORD *)(v48 + 2328);
    if (v51 >= (*(_QWORD *)(v48 + 2336) - v52) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v52 = *(_QWORD *)(v48 + 2328);
    }
    v53 = v52 + (v51 << 11);
    v54 = *v50;
    v55 = *(_DWORD *)(v53 + 2024);
    if (**v50)
    {
LABEL_81:
      v7[18] = (v55 & 0x40000000) != 0;
      v56 = v49[10];
      if ((v56 & 0x80000000) == 0)
        goto LABEL_82;
LABEL_507:
      v58 = *(_DWORD *)(v48 + 512);
      if (*v54)
        goto LABEL_86;
      goto LABEL_508;
    }
  }
  if ((v55 & 0x10000000) != 0)
    v221 = 0x40000000;
  else
    v221 = 0x80000000;
  if ((v55 & 0x20000000) != 0)
    v222 = v221;
  else
    v222 = v55 & 0xCFFFFFFF;
  v7[18] = (v222 & 0x40000000) != 0;
  v56 = v49[10];
  if ((v56 & 0x80000000) != 0)
    goto LABEL_507;
LABEL_82:
  v57 = *(_QWORD *)(v48 + 2328);
  if (v56 >= (*(_QWORD *)(v48 + 2336) - v57) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v57 = *(_QWORD *)(v48 + 2328);
    v54 = *v50;
  }
  v58 = *(_DWORD *)(v57 + (v56 << 11) + 232);
  if (*v54)
  {
LABEL_86:
    v7[19] = (v58 & 0x40000000) != 0;
    v59 = v49[12];
    if ((v59 & 0x80000000) == 0)
      goto LABEL_87;
LABEL_515:
    v61 = *(_DWORD *)(v48 + 2080);
    if (*v54)
      goto LABEL_97;
    goto LABEL_91;
  }
LABEL_508:
  if ((v58 & 0x10000000) != 0)
    v223 = 0x40000000;
  else
    v223 = 0x80000000;
  if ((v58 & 0x20000000) != 0)
    v224 = v223;
  else
    v224 = v58 & 0xCFFFFFFF;
  v7[19] = (v224 & 0x40000000) != 0;
  v59 = v49[12];
  if ((v59 & 0x80000000) != 0)
    goto LABEL_515;
LABEL_87:
  v60 = *(_QWORD *)(v48 + 2328);
  if (v59 >= (*(_QWORD *)(v48 + 2336) - v60) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v60 = *(_QWORD *)(v48 + 2328);
    v54 = *v50;
  }
  v61 = *(_DWORD *)(v60 + (v59 << 11) + 1800);
  if (!*v54)
  {
LABEL_91:
    if ((v61 & 0x10000000) != 0)
      v62 = 0x40000000;
    else
      v62 = 0x80000000;
    if ((v61 & 0x20000000) != 0)
      v61 = v62;
    else
      v61 &= 0xCFFFFFFF;
  }
LABEL_97:
  v7[21] = (v61 & 0x40000000) != 0;
  v63 = v47[2];
  if (**v46)
  {
    v7[22] = (v63 & 0x40000000) != 0;
    v64 = v49[12];
    if ((v64 & 0x80000000) == 0)
      goto LABEL_99;
LABEL_524:
    v66 = *(_DWORD *)(v48 + 2112);
    if (*v54)
      goto LABEL_109;
    goto LABEL_103;
  }
  if ((v63 & 0x10000000) != 0)
    v225 = 0x40000000;
  else
    v225 = 0x80000000;
  if ((v63 & 0x20000000) != 0)
    v226 = v225;
  else
    v226 = v63 & 0xCFFFFFFF;
  v7[22] = (v226 & 0x40000000) != 0;
  v64 = v49[12];
  if ((v64 & 0x80000000) != 0)
    goto LABEL_524;
LABEL_99:
  v65 = *(_QWORD *)(v48 + 2328);
  if (v64 >= (*(_QWORD *)(v48 + 2336) - v65) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v65 = *(_QWORD *)(v48 + 2328);
    v54 = *v50;
  }
  v66 = *(_DWORD *)(v65 + (v64 << 11) + 1832);
  if (!*v54)
  {
LABEL_103:
    if ((v66 & 0x10000000) != 0)
      v67 = 0x40000000;
    else
      v67 = 0x80000000;
    if ((v66 & 0x20000000) != 0)
      v66 = v67;
    else
      v66 &= 0xCFFFFFFF;
  }
LABEL_109:
  v68 = (v66 >> 30) & 1;
  v7[24] = (v66 & 0x40000000) != 0;
  if (v7[13])
  {
    v282 = v267;
    v283 = v268;
    v284 = v269;
    v280 = v265;
    v281 = v266;
    *(_QWORD *)&v330 = 0xD0D0D0D0D0D0D0DLL;
    v275 = xmmword_22466FD40;
    v276 = (__int128)xmmword_22466FD50;
    *(_QWORD *)&v325 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v280, 1, 0, 0, (uint64_t)&v330, (uint64_t)&v275, (uint64_t)&v325, COERCE_DOUBLE(0x4100000001), xmmword_22466FD50);
    if (!v7[4])
    {
      v277 = v267;
      v278 = v268;
      v279 = v269;
      v275 = v265;
      v276 = v266;
      *(_QWORD *)&v325 = 0xD0D0D0D0D0D0D0DLL;
      v330 = xmmword_22466FD60;
      v331 = (__int128)xmmword_22466FD70;
      *(_QWORD *)&v320 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v275, 1, 0, 0, (uint64_t)&v325, (uint64_t)&v330, (uint64_t)&v320, COERCE_DOUBLE(0x4100000001), xmmword_22466FD70);
      v69 = (v7[3] | v7[12]) == 0;
      if (!(v7[1] | v7[10]))
      {
        v332 = v267;
        v333 = v268;
        v334 = v269;
        v330 = v265;
        v331 = v266;
        *(_QWORD *)&v320 = 0xA0A0D0D0A0A0D0DLL;
        v325 = xmmword_22466FD80;
        v326 = (__int128)xmmword_22466FD90;
        *(_QWORD *)&v315 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v330, 1, 0, 0, (uint64_t)&v320, (uint64_t)&v325, (uint64_t)&v315, COERCE_DOUBLE(0x4100000001), xmmword_22466FD90);
        if (!*v7)
        {
          v70 = !v69;
          if (v7[9])
            v70 = 1;
          if ((v70 & 1) == 0)
          {
            v327 = v267;
            v328 = v268;
            v329 = v269;
            v326 = v266;
            v325 = v265;
            *(_QWORD *)&v315 = 0x90A090A0C0D0C0DLL;
            v320 = xmmword_22466FDA0;
            v321 = (__int128)xmmword_22466FDB0;
            *(_QWORD *)&v310 = 0x1090A03040C0DLL;
            result = sub_223D91438((unint64_t)&v325, 1, 0, 0, (uint64_t)&v315, (uint64_t)&v320, (uint64_t)&v310, COERCE_DOUBLE(0x1C100000001), xmmword_22466FDB0);
          }
        }
      }
      if (v7[6])
        v71 = 0;
      else
        v71 = v69;
      if (v71 && !v7[15])
      {
        v322 = v267;
        v323 = v268;
        v324 = v269;
        v321 = v266;
        v320 = v265;
        *(_QWORD *)&v310 = 0xC0D0C0D0C0D0C0DLL;
        v315 = xmmword_22466FDC0;
        v316 = (__int128)xmmword_22466FDD0;
        *(_QWORD *)&v305 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v320, 1, 0, 0, (uint64_t)&v310, (uint64_t)&v315, (uint64_t)&v305, COERCE_DOUBLE(0x1C100000001), xmmword_22466FDD0);
      }
    }
    v72 = (v7[12] | v7[21]) == 0;
    if (!(v7[10] | v7[19]))
    {
      v317 = v267;
      v318 = v268;
      v319 = v269;
      v316 = v266;
      v315 = v265;
      *(_QWORD *)&v305 = 0xA0A0A0A0D0D0D0DLL;
      v310 = xmmword_22466FDE0;
      v311 = (__int128)xmmword_22466FDF0;
      *(_QWORD *)&v300 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v315, 1, 0, 0, (uint64_t)&v305, (uint64_t)&v310, (uint64_t)&v300, COERCE_DOUBLE(0x4100000001), xmmword_22466FDF0);
      if (!v7[9])
      {
        v73 = !v72;
        if (v7[18])
          v73 = 1;
        if ((v73 & 1) == 0)
        {
          v312 = v267;
          v313 = v268;
          v314 = v269;
          v311 = v266;
          v310 = v265;
          *(_QWORD *)&v300 = 0x90A0C0D090A0C0DLL;
          v305 = xmmword_22466FE00;
          v306 = (__int128)xmmword_22466FE10;
          *(_QWORD *)&v295 = 0x12131516090A0C0DLL;
          result = sub_223D91438((unint64_t)&v310, 1, 0, 0, (uint64_t)&v300, (uint64_t)&v305, (uint64_t)&v295, COERCE_DOUBLE(0x1C100000001), xmmword_22466FE10);
        }
      }
    }
    if (v7[15])
      v74 = 0;
    else
      v74 = v72;
    LOBYTE(v68) = v7[24];
    if (v74 && !v7[24])
    {
      v307 = v267;
      v308 = v268;
      v309 = v269;
      v306 = v266;
      v305 = v265;
      *(_QWORD *)&v295 = 0xC0D0C0D0C0D0C0DLL;
      v300 = xmmword_22466FE20;
      v301 = xmmword_22466FE30;
      *(_QWORD *)&v290 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v305, 1, 0, 0, (uint64_t)&v295, (uint64_t)&v300, (uint64_t)&v290, COERCE_DOUBLE(0x1C100000001), xmmword_22466FE30);
      LOBYTE(v68) = v7[24];
    }
  }
  *(_WORD *)v7 = *(_WORD *)(v7 + 9);
  *(_WORD *)(v7 + 3) = *((_WORD *)v7 + 6);
  v7[6] = v7[15];
  *(_WORD *)(v7 + 9) = *((_WORD *)v7 + 9);
  *((_WORD *)v7 + 6) = *(_WORD *)(v7 + 21);
  v7[15] = v68;
  v75 = v49[9];
  if ((v75 & 0x80000000) != 0)
  {
    v78 = *v50;
    v79 = *(_DWORD *)(v48 + 2308);
    if (**v50)
      goto LABEL_140;
  }
  else
  {
    v76 = *(_QWORD *)(v48 + 2328);
    if (v75 >= (*(_QWORD *)(v48 + 2336) - v76) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v76 = *(_QWORD *)(v48 + 2328);
    }
    v77 = v76 + (v75 << 11);
    v78 = *v50;
    v79 = *(_DWORD *)(v77 + 2028);
    if (**v50)
    {
LABEL_140:
      v7[18] = (v79 & 0x40000000) != 0;
      v80 = v49[10];
      if ((v80 & 0x80000000) == 0)
        goto LABEL_141;
LABEL_534:
      v82 = *(_DWORD *)(v48 + 516);
      if (*v78)
        goto LABEL_145;
      goto LABEL_535;
    }
  }
  if ((v79 & 0x10000000) != 0)
    v227 = 0x40000000;
  else
    v227 = 0x80000000;
  if ((v79 & 0x20000000) != 0)
    v228 = v227;
  else
    v228 = v79 & 0xCFFFFFFF;
  v7[18] = (v228 & 0x40000000) != 0;
  v80 = v49[10];
  if ((v80 & 0x80000000) != 0)
    goto LABEL_534;
LABEL_141:
  v81 = *(_QWORD *)(v48 + 2328);
  if (v80 >= (*(_QWORD *)(v48 + 2336) - v81) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v81 = *(_QWORD *)(v48 + 2328);
    v78 = *v50;
  }
  v82 = *(_DWORD *)(v81 + (v80 << 11) + 236);
  if (*v78)
  {
LABEL_145:
    v7[19] = (v82 & 0x40000000) != 0;
    v83 = v49[12];
    if ((v83 & 0x80000000) == 0)
      goto LABEL_146;
LABEL_542:
    v85 = *(_DWORD *)(v48 + 2084);
    if (*v78)
      goto LABEL_156;
    goto LABEL_150;
  }
LABEL_535:
  if ((v82 & 0x10000000) != 0)
    v229 = 0x40000000;
  else
    v229 = 0x80000000;
  if ((v82 & 0x20000000) != 0)
    v230 = v229;
  else
    v230 = v82 & 0xCFFFFFFF;
  v7[19] = (v230 & 0x40000000) != 0;
  v83 = v49[12];
  if ((v83 & 0x80000000) != 0)
    goto LABEL_542;
LABEL_146:
  v84 = *(_QWORD *)(v48 + 2328);
  if (v83 >= (*(_QWORD *)(v48 + 2336) - v84) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v84 = *(_QWORD *)(v48 + 2328);
    v78 = *v50;
  }
  v85 = *(_DWORD *)(v84 + (v83 << 11) + 1804);
  if (!*v78)
  {
LABEL_150:
    if ((v85 & 0x10000000) != 0)
      v86 = 0x40000000;
    else
      v86 = 0x80000000;
    if ((v85 & 0x20000000) != 0)
      v85 = v86;
    else
      v85 &= 0xCFFFFFFF;
  }
LABEL_156:
  v7[21] = (v85 & 0x40000000) != 0;
  v87 = v47[3];
  if (**v46)
  {
    v7[22] = (v87 & 0x40000000) != 0;
    v88 = v49[12];
    if ((v88 & 0x80000000) == 0)
      goto LABEL_158;
LABEL_551:
    v90 = *(_DWORD *)(v48 + 2116);
    if (*v78)
      goto LABEL_168;
    goto LABEL_162;
  }
  if ((v87 & 0x10000000) != 0)
    v231 = 0x40000000;
  else
    v231 = 0x80000000;
  if ((v87 & 0x20000000) != 0)
    v232 = v231;
  else
    v232 = v87 & 0xCFFFFFFF;
  v7[22] = (v232 & 0x40000000) != 0;
  v88 = v49[12];
  if ((v88 & 0x80000000) != 0)
    goto LABEL_551;
LABEL_158:
  v89 = *(_QWORD *)(v48 + 2328);
  if (v88 >= (*(_QWORD *)(v48 + 2336) - v89) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v89 = *(_QWORD *)(v48 + 2328);
    v78 = *v50;
  }
  v90 = *(_DWORD *)(v89 + (v88 << 11) + 1836);
  if (!*v78)
  {
LABEL_162:
    if ((v90 & 0x10000000) != 0)
      v91 = 0x40000000;
    else
      v91 = 0x80000000;
    if ((v90 & 0x20000000) != 0)
      v90 = v91;
    else
      v90 &= 0xCFFFFFFF;
  }
LABEL_168:
  v92 = (v90 >> 30) & 1;
  v7[24] = (v90 & 0x40000000) != 0;
  if (v7[13])
  {
    v282 = v267;
    v283 = v268;
    v284 = v269;
    v280 = v265;
    v281 = v266;
    *(_QWORD *)&v330 = 0xD0D0D0D0D0D0D0DLL;
    v275 = xmmword_22466FE40;
    v276 = (__int128)xmmword_22466FE50;
    *(_QWORD *)&v325 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v280, 2, 0, 0, (uint64_t)&v330, (uint64_t)&v275, (uint64_t)&v325, COERCE_DOUBLE(0x4200000002), xmmword_22466FE50);
    if (!v7[4])
    {
      v277 = v267;
      v278 = v268;
      v279 = v269;
      v275 = v265;
      v276 = v266;
      *(_QWORD *)&v325 = 0xD0D0D0D0D0D0D0DLL;
      v330 = xmmword_22466FE60;
      v331 = (__int128)xmmword_22466FE70;
      *(_QWORD *)&v320 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v275, 2, 0, 0, (uint64_t)&v325, (uint64_t)&v330, (uint64_t)&v320, COERCE_DOUBLE(0x4200000002), xmmword_22466FE70);
      v93 = (v7[3] | v7[12]) == 0;
      if (!(v7[1] | v7[10]))
      {
        v332 = v267;
        v333 = v268;
        v334 = v269;
        v330 = v265;
        v331 = v266;
        *(_QWORD *)&v320 = 0xA0A0D0D0A0A0D0DLL;
        v325 = xmmword_22466FE80;
        v326 = (__int128)xmmword_22466FE90;
        *(_QWORD *)&v315 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v330, 2, 0, 0, (uint64_t)&v320, (uint64_t)&v325, (uint64_t)&v315, COERCE_DOUBLE(0x4200000002), xmmword_22466FE90);
        if (!*v7)
        {
          v94 = !v93;
          if (v7[9])
            v94 = 1;
          if ((v94 & 1) == 0)
          {
            v327 = v267;
            v328 = v268;
            v329 = v269;
            v326 = v266;
            v325 = v265;
            *(_QWORD *)&v315 = 0x90A090A0C0D0C0DLL;
            v320 = xmmword_22466FEA0;
            v321 = (__int128)xmmword_22466FEB0;
            *(_QWORD *)&v310 = 0x1090A03040C0DLL;
            result = sub_223D91438((unint64_t)&v325, 2, 0, 0, (uint64_t)&v315, (uint64_t)&v320, (uint64_t)&v310, COERCE_DOUBLE(0x1C200000002), xmmword_22466FEB0);
          }
        }
      }
      if (v7[6])
        v95 = 0;
      else
        v95 = v93;
      if (v95 && !v7[15])
      {
        v322 = v267;
        v323 = v268;
        v324 = v269;
        v321 = v266;
        v320 = v265;
        *(_QWORD *)&v310 = 0xC0D0C0D0C0D0C0DLL;
        v315 = xmmword_22466FEC0;
        v316 = (__int128)xmmword_22466FED0;
        *(_QWORD *)&v305 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v320, 2, 0, 0, (uint64_t)&v310, (uint64_t)&v315, (uint64_t)&v305, COERCE_DOUBLE(0x1C200000002), xmmword_22466FED0);
      }
    }
    v96 = (v7[12] | v7[21]) == 0;
    if (!(v7[10] | v7[19]))
    {
      v317 = v267;
      v318 = v268;
      v319 = v269;
      v316 = v266;
      v315 = v265;
      *(_QWORD *)&v305 = 0xA0A0A0A0D0D0D0DLL;
      v310 = xmmword_22466FEE0;
      v311 = (__int128)xmmword_22466FEF0;
      *(_QWORD *)&v300 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v315, 2, 0, 0, (uint64_t)&v305, (uint64_t)&v310, (uint64_t)&v300, COERCE_DOUBLE(0x4200000002), xmmword_22466FEF0);
      if (!v7[9])
      {
        v97 = !v96;
        if (v7[18])
          v97 = 1;
        if ((v97 & 1) == 0)
        {
          v312 = v267;
          v313 = v268;
          v314 = v269;
          v311 = v266;
          v310 = v265;
          *(_QWORD *)&v300 = 0x90A0C0D090A0C0DLL;
          v305 = xmmword_22466FF00;
          v306 = (__int128)xmmword_22466FF10;
          *(_QWORD *)&v295 = 0x12131516090A0C0DLL;
          result = sub_223D91438((unint64_t)&v310, 2, 0, 0, (uint64_t)&v300, (uint64_t)&v305, (uint64_t)&v295, COERCE_DOUBLE(0x1C200000002), xmmword_22466FF10);
        }
      }
    }
    if (v7[15])
      v98 = 0;
    else
      v98 = v96;
    LOBYTE(v92) = v7[24];
    if (v98 && !v7[24])
    {
      v307 = v267;
      v308 = v268;
      v309 = v269;
      v306 = v266;
      v305 = v265;
      *(_QWORD *)&v295 = 0xC0D0C0D0C0D0C0DLL;
      v300 = xmmword_22466FF20;
      v301 = xmmword_22466FF30;
      *(_QWORD *)&v290 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v305, 2, 0, 0, (uint64_t)&v295, (uint64_t)&v300, (uint64_t)&v290, COERCE_DOUBLE(0x1C200000002), xmmword_22466FF30);
      LOBYTE(v92) = v7[24];
    }
  }
  *(_WORD *)v7 = *(_WORD *)(v7 + 9);
  *(_WORD *)(v7 + 3) = *((_WORD *)v7 + 6);
  v7[6] = v7[15];
  *(_WORD *)(v7 + 9) = *((_WORD *)v7 + 9);
  *((_WORD *)v7 + 6) = *(_WORD *)(v7 + 21);
  v7[15] = v92;
  v99 = v49[9];
  if ((v99 & 0x80000000) != 0)
  {
    v102 = *v50;
    v103 = *(_DWORD *)(v48 + 2312);
    if (**v50)
      goto LABEL_199;
  }
  else
  {
    v100 = *(_QWORD *)(v48 + 2328);
    if (v99 >= (*(_QWORD *)(v48 + 2336) - v100) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v100 = *(_QWORD *)(v48 + 2328);
    }
    v101 = v100 + (v99 << 11);
    v102 = *v50;
    v103 = *(_DWORD *)(v101 + 2032);
    if (**v50)
    {
LABEL_199:
      v7[18] = (v103 & 0x40000000) != 0;
      v104 = v49[10];
      if ((v104 & 0x80000000) == 0)
        goto LABEL_200;
LABEL_561:
      v106 = *(_DWORD *)(v48 + 520);
      if (*v102)
        goto LABEL_204;
      goto LABEL_562;
    }
  }
  if ((v103 & 0x10000000) != 0)
    v233 = 0x40000000;
  else
    v233 = 0x80000000;
  if ((v103 & 0x20000000) != 0)
    v234 = v233;
  else
    v234 = v103 & 0xCFFFFFFF;
  v7[18] = (v234 & 0x40000000) != 0;
  v104 = v49[10];
  if ((v104 & 0x80000000) != 0)
    goto LABEL_561;
LABEL_200:
  v105 = *(_QWORD *)(v48 + 2328);
  if (v104 >= (*(_QWORD *)(v48 + 2336) - v105) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v105 = *(_QWORD *)(v48 + 2328);
    v102 = *v50;
  }
  v106 = *(_DWORD *)(v105 + (v104 << 11) + 240);
  if (*v102)
  {
LABEL_204:
    v7[19] = (v106 & 0x40000000) != 0;
    v107 = v49[12];
    if ((v107 & 0x80000000) == 0)
      goto LABEL_205;
LABEL_569:
    v109 = *(_DWORD *)(v48 + 2088);
    if (*v102)
      goto LABEL_215;
    goto LABEL_209;
  }
LABEL_562:
  if ((v106 & 0x10000000) != 0)
    v235 = 0x40000000;
  else
    v235 = 0x80000000;
  if ((v106 & 0x20000000) != 0)
    v236 = v235;
  else
    v236 = v106 & 0xCFFFFFFF;
  v7[19] = (v236 & 0x40000000) != 0;
  v107 = v49[12];
  if ((v107 & 0x80000000) != 0)
    goto LABEL_569;
LABEL_205:
  v108 = *(_QWORD *)(v48 + 2328);
  if (v107 >= (*(_QWORD *)(v48 + 2336) - v108) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v108 = *(_QWORD *)(v48 + 2328);
    v102 = *v50;
  }
  v109 = *(_DWORD *)(v108 + (v107 << 11) + 1808);
  if (!*v102)
  {
LABEL_209:
    if ((v109 & 0x10000000) != 0)
      v110 = 0x40000000;
    else
      v110 = 0x80000000;
    if ((v109 & 0x20000000) != 0)
      v109 = v110;
    else
      v109 &= 0xCFFFFFFF;
  }
LABEL_215:
  v7[21] = (v109 & 0x40000000) != 0;
  v111 = v47[4];
  if (**v46)
  {
    v7[22] = (v111 & 0x40000000) != 0;
    v112 = v49[12];
    if ((v112 & 0x80000000) == 0)
      goto LABEL_217;
LABEL_578:
    v114 = *(_DWORD *)(v48 + 2120);
    if (*v102)
      goto LABEL_227;
    goto LABEL_221;
  }
  if ((v111 & 0x10000000) != 0)
    v237 = 0x40000000;
  else
    v237 = 0x80000000;
  if ((v111 & 0x20000000) != 0)
    v238 = v237;
  else
    v238 = v111 & 0xCFFFFFFF;
  v7[22] = (v238 & 0x40000000) != 0;
  v112 = v49[12];
  if ((v112 & 0x80000000) != 0)
    goto LABEL_578;
LABEL_217:
  v113 = *(_QWORD *)(v48 + 2328);
  if (v112 >= (*(_QWORD *)(v48 + 2336) - v113) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v113 = *(_QWORD *)(v48 + 2328);
    v102 = *v50;
  }
  v114 = *(_DWORD *)(v113 + (v112 << 11) + 1840);
  if (!*v102)
  {
LABEL_221:
    if ((v114 & 0x10000000) != 0)
      v115 = 0x40000000;
    else
      v115 = 0x80000000;
    if ((v114 & 0x20000000) != 0)
      v114 = v115;
    else
      v114 &= 0xCFFFFFFF;
  }
LABEL_227:
  v116 = (v114 >> 30) & 1;
  v7[24] = (v114 & 0x40000000) != 0;
  if (v7[13])
  {
    v282 = v267;
    v283 = v268;
    v284 = v269;
    v280 = v265;
    v281 = v266;
    *(_QWORD *)&v330 = 0xD0D0D0D0D0D0D0DLL;
    v275 = xmmword_22466FF40;
    v276 = (__int128)xmmword_22466FF50;
    *(_QWORD *)&v325 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v280, 3, 0, 0, (uint64_t)&v330, (uint64_t)&v275, (uint64_t)&v325, COERCE_DOUBLE(0x4300000003), xmmword_22466FF50);
    if (!v7[4])
    {
      v277 = v267;
      v278 = v268;
      v279 = v269;
      v275 = v265;
      v276 = v266;
      *(_QWORD *)&v325 = 0xD0D0D0D0D0D0D0DLL;
      v330 = xmmword_22466FF60;
      v331 = (__int128)xmmword_22466FF70;
      *(_QWORD *)&v320 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v275, 3, 0, 0, (uint64_t)&v325, (uint64_t)&v330, (uint64_t)&v320, COERCE_DOUBLE(0x4300000003), xmmword_22466FF70);
      v117 = (v7[3] | v7[12]) == 0;
      if (!(v7[1] | v7[10]))
      {
        v332 = v267;
        v333 = v268;
        v334 = v269;
        v330 = v265;
        v331 = v266;
        *(_QWORD *)&v320 = 0xA0A0D0D0A0A0D0DLL;
        v325 = xmmword_22466FF80;
        v326 = (__int128)xmmword_22466FF90;
        *(_QWORD *)&v315 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v330, 3, 0, 0, (uint64_t)&v320, (uint64_t)&v325, (uint64_t)&v315, COERCE_DOUBLE(0x4300000003), xmmword_22466FF90);
        if (!*v7)
        {
          v118 = !v117;
          if (v7[9])
            v118 = 1;
          if ((v118 & 1) == 0)
          {
            v327 = v267;
            v328 = v268;
            v329 = v269;
            v326 = v266;
            v325 = v265;
            *(_QWORD *)&v315 = 0x90A090A0C0D0C0DLL;
            v320 = xmmword_22466FFA0;
            v321 = (__int128)xmmword_22466FFB0;
            *(_QWORD *)&v310 = 0x1090A03040C0DLL;
            result = sub_223D91438((unint64_t)&v325, 3, 0, 0, (uint64_t)&v315, (uint64_t)&v320, (uint64_t)&v310, COERCE_DOUBLE(0x1C300000003), xmmword_22466FFB0);
          }
        }
      }
      if (v7[6])
        v119 = 0;
      else
        v119 = v117;
      if (v119 && !v7[15])
      {
        v322 = v267;
        v323 = v268;
        v324 = v269;
        v321 = v266;
        v320 = v265;
        *(_QWORD *)&v310 = 0xC0D0C0D0C0D0C0DLL;
        v315 = xmmword_22466FFC0;
        v316 = (__int128)xmmword_22466FFD0;
        *(_QWORD *)&v305 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v320, 3, 0, 0, (uint64_t)&v310, (uint64_t)&v315, (uint64_t)&v305, COERCE_DOUBLE(0x1C300000003), xmmword_22466FFD0);
      }
    }
    v120 = (v7[12] | v7[21]) == 0;
    if (!(v7[10] | v7[19]))
    {
      v317 = v267;
      v318 = v268;
      v319 = v269;
      v316 = v266;
      v315 = v265;
      *(_QWORD *)&v305 = 0xA0A0A0A0D0D0D0DLL;
      v310 = xmmword_22466FFE0;
      v311 = (__int128)xmmword_22466FFF0;
      *(_QWORD *)&v300 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v315, 3, 0, 0, (uint64_t)&v305, (uint64_t)&v310, (uint64_t)&v300, COERCE_DOUBLE(0x4300000003), xmmword_22466FFF0);
      if (!v7[9])
      {
        v121 = !v120;
        if (v7[18])
          v121 = 1;
        if ((v121 & 1) == 0)
        {
          v312 = v267;
          v313 = v268;
          v314 = v269;
          v311 = v266;
          v310 = v265;
          *(_QWORD *)&v300 = 0x90A0C0D090A0C0DLL;
          v305 = xmmword_224670000;
          v306 = (__int128)xmmword_224670010;
          *(_QWORD *)&v295 = 0x12131516090A0C0DLL;
          result = sub_223D91438((unint64_t)&v310, 3, 0, 0, (uint64_t)&v300, (uint64_t)&v305, (uint64_t)&v295, COERCE_DOUBLE(0x1C300000003), xmmword_224670010);
        }
      }
    }
    if (v7[15])
      v122 = 0;
    else
      v122 = v120;
    LOBYTE(v116) = v7[24];
    if (v122 && !v7[24])
    {
      v307 = v267;
      v308 = v268;
      v309 = v269;
      v306 = v266;
      v305 = v265;
      *(_QWORD *)&v295 = 0xC0D0C0D0C0D0C0DLL;
      v300 = xmmword_224670020;
      v301 = xmmword_224670030;
      *(_QWORD *)&v290 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v305, 3, 0, 0, (uint64_t)&v295, (uint64_t)&v300, (uint64_t)&v290, COERCE_DOUBLE(0x1C300000003), xmmword_224670030);
      LOBYTE(v116) = v7[24];
    }
  }
  *(_WORD *)v7 = *(_WORD *)(v7 + 9);
  *(_WORD *)(v7 + 3) = *((_WORD *)v7 + 6);
  v7[6] = v7[15];
  *(_WORD *)(v7 + 9) = *((_WORD *)v7 + 9);
  *((_WORD *)v7 + 6) = *(_WORD *)(v7 + 21);
  v7[15] = v116;
  v123 = v49[9];
  if ((v123 & 0x80000000) != 0)
  {
    v126 = *v50;
    v127 = *(_DWORD *)(v48 + 2316);
    if (**v50)
      goto LABEL_258;
  }
  else
  {
    v124 = *(_QWORD *)(v48 + 2328);
    if (v123 >= (*(_QWORD *)(v48 + 2336) - v124) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v124 = *(_QWORD *)(v48 + 2328);
    }
    v125 = v124 + (v123 << 11);
    v126 = *v50;
    v127 = *(_DWORD *)(v125 + 2036);
    if (**v50)
    {
LABEL_258:
      v7[18] = (v127 & 0x40000000) != 0;
      v128 = v49[10];
      if ((v128 & 0x80000000) == 0)
        goto LABEL_259;
LABEL_588:
      v130 = *(_DWORD *)(v48 + 524);
      if (*v126)
        goto LABEL_263;
      goto LABEL_589;
    }
  }
  if ((v127 & 0x10000000) != 0)
    v239 = 0x40000000;
  else
    v239 = 0x80000000;
  if ((v127 & 0x20000000) != 0)
    v240 = v239;
  else
    v240 = v127 & 0xCFFFFFFF;
  v7[18] = (v240 & 0x40000000) != 0;
  v128 = v49[10];
  if ((v128 & 0x80000000) != 0)
    goto LABEL_588;
LABEL_259:
  v129 = *(_QWORD *)(v48 + 2328);
  if (v128 >= (*(_QWORD *)(v48 + 2336) - v129) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v129 = *(_QWORD *)(v48 + 2328);
    v126 = *v50;
  }
  v130 = *(_DWORD *)(v129 + (v128 << 11) + 244);
  if (*v126)
  {
LABEL_263:
    v7[19] = (v130 & 0x40000000) != 0;
    v131 = v49[12];
    if ((v131 & 0x80000000) == 0)
      goto LABEL_264;
LABEL_596:
    v133 = *(_DWORD *)(v48 + 2092);
    if (*v126)
      goto LABEL_274;
    goto LABEL_268;
  }
LABEL_589:
  if ((v130 & 0x10000000) != 0)
    v241 = 0x40000000;
  else
    v241 = 0x80000000;
  if ((v130 & 0x20000000) != 0)
    v242 = v241;
  else
    v242 = v130 & 0xCFFFFFFF;
  v7[19] = (v242 & 0x40000000) != 0;
  v131 = v49[12];
  if ((v131 & 0x80000000) != 0)
    goto LABEL_596;
LABEL_264:
  v132 = *(_QWORD *)(v48 + 2328);
  if (v131 >= (*(_QWORD *)(v48 + 2336) - v132) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v132 = *(_QWORD *)(v48 + 2328);
    v126 = *v50;
  }
  v133 = *(_DWORD *)(v132 + (v131 << 11) + 1812);
  if (!*v126)
  {
LABEL_268:
    if ((v133 & 0x10000000) != 0)
      v134 = 0x40000000;
    else
      v134 = 0x80000000;
    if ((v133 & 0x20000000) != 0)
      v133 = v134;
    else
      v133 &= 0xCFFFFFFF;
  }
LABEL_274:
  v7[21] = (v133 & 0x40000000) != 0;
  v135 = v47[5];
  if (**v46)
  {
    v7[22] = (v135 & 0x40000000) != 0;
    v136 = v49[12];
    if ((v136 & 0x80000000) == 0)
      goto LABEL_276;
LABEL_605:
    v138 = *(_DWORD *)(v48 + 2124);
    if (*v126)
      goto LABEL_286;
    goto LABEL_280;
  }
  if ((v135 & 0x10000000) != 0)
    v243 = 0x40000000;
  else
    v243 = 0x80000000;
  if ((v135 & 0x20000000) != 0)
    v244 = v243;
  else
    v244 = v135 & 0xCFFFFFFF;
  v7[22] = (v244 & 0x40000000) != 0;
  v136 = v49[12];
  if ((v136 & 0x80000000) != 0)
    goto LABEL_605;
LABEL_276:
  v137 = *(_QWORD *)(v48 + 2328);
  if (v136 >= (*(_QWORD *)(v48 + 2336) - v137) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v137 = *(_QWORD *)(v48 + 2328);
    v126 = *v50;
  }
  v138 = *(_DWORD *)(v137 + (v136 << 11) + 1844);
  if (!*v126)
  {
LABEL_280:
    if ((v138 & 0x10000000) != 0)
      v139 = 0x40000000;
    else
      v139 = 0x80000000;
    if ((v138 & 0x20000000) != 0)
      v138 = v139;
    else
      v138 &= 0xCFFFFFFF;
  }
LABEL_286:
  v140 = (v138 >> 30) & 1;
  v7[24] = (v138 & 0x40000000) != 0;
  if (v7[13])
  {
    v282 = v267;
    v283 = v268;
    v284 = v269;
    v280 = v265;
    v281 = v266;
    *(_QWORD *)&v330 = 0xD0D0D0D0D0D0D0DLL;
    v275 = xmmword_224670040;
    v276 = (__int128)xmmword_224670050;
    *(_QWORD *)&v325 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v280, 4, 0, 0, (uint64_t)&v330, (uint64_t)&v275, (uint64_t)&v325, COERCE_DOUBLE(0x4400000004), xmmword_224670050);
    if (!v7[4])
    {
      v277 = v267;
      v278 = v268;
      v279 = v269;
      v275 = v265;
      v276 = v266;
      *(_QWORD *)&v325 = 0xD0D0D0D0D0D0D0DLL;
      v330 = xmmword_224670060;
      v331 = (__int128)xmmword_224670070;
      *(_QWORD *)&v320 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v275, 4, 0, 0, (uint64_t)&v325, (uint64_t)&v330, (uint64_t)&v320, COERCE_DOUBLE(0x4400000004), xmmword_224670070);
      v141 = (v7[3] | v7[12]) == 0;
      if (!(v7[1] | v7[10]))
      {
        v332 = v267;
        v333 = v268;
        v334 = v269;
        v330 = v265;
        v331 = v266;
        *(_QWORD *)&v320 = 0xA0A0D0D0A0A0D0DLL;
        v325 = xmmword_224670080;
        v326 = (__int128)xmmword_224670090;
        *(_QWORD *)&v315 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v330, 4, 0, 0, (uint64_t)&v320, (uint64_t)&v325, (uint64_t)&v315, COERCE_DOUBLE(0x4400000004), xmmword_224670090);
        if (!*v7)
        {
          v142 = !v141;
          if (v7[9])
            v142 = 1;
          if ((v142 & 1) == 0)
          {
            v327 = v267;
            v328 = v268;
            v329 = v269;
            v326 = v266;
            v325 = v265;
            *(_QWORD *)&v315 = 0x90A090A0C0D0C0DLL;
            v320 = xmmword_2246700A0;
            v321 = (__int128)xmmword_2246700B0;
            *(_QWORD *)&v310 = 0x1090A03040C0DLL;
            result = sub_223D91438((unint64_t)&v325, 4, 0, 0, (uint64_t)&v315, (uint64_t)&v320, (uint64_t)&v310, COERCE_DOUBLE(0x1C400000004), xmmword_2246700B0);
          }
        }
      }
      if (v7[6])
        v143 = 0;
      else
        v143 = v141;
      if (v143 && !v7[15])
      {
        v322 = v267;
        v323 = v268;
        v324 = v269;
        v321 = v266;
        v320 = v265;
        *(_QWORD *)&v310 = 0xC0D0C0D0C0D0C0DLL;
        v315 = xmmword_2246700C0;
        v316 = (__int128)xmmword_2246700D0;
        *(_QWORD *)&v305 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v320, 4, 0, 0, (uint64_t)&v310, (uint64_t)&v315, (uint64_t)&v305, COERCE_DOUBLE(0x1C400000004), xmmword_2246700D0);
      }
    }
    v144 = (v7[12] | v7[21]) == 0;
    if (!(v7[10] | v7[19]))
    {
      v317 = v267;
      v318 = v268;
      v319 = v269;
      v316 = v266;
      v315 = v265;
      *(_QWORD *)&v305 = 0xA0A0A0A0D0D0D0DLL;
      v310 = xmmword_2246700E0;
      v311 = (__int128)xmmword_2246700F0;
      *(_QWORD *)&v300 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v315, 4, 0, 0, (uint64_t)&v305, (uint64_t)&v310, (uint64_t)&v300, COERCE_DOUBLE(0x4400000004), xmmword_2246700F0);
      if (!v7[9])
      {
        v145 = !v144;
        if (v7[18])
          v145 = 1;
        if ((v145 & 1) == 0)
        {
          v312 = v267;
          v313 = v268;
          v314 = v269;
          v311 = v266;
          v310 = v265;
          *(_QWORD *)&v300 = 0x90A0C0D090A0C0DLL;
          v305 = xmmword_224670100;
          v306 = (__int128)xmmword_224670110;
          *(_QWORD *)&v295 = 0x12131516090A0C0DLL;
          result = sub_223D91438((unint64_t)&v310, 4, 0, 0, (uint64_t)&v300, (uint64_t)&v305, (uint64_t)&v295, COERCE_DOUBLE(0x1C400000004), xmmword_224670110);
        }
      }
    }
    if (v7[15])
      v146 = 0;
    else
      v146 = v144;
    LOBYTE(v140) = v7[24];
    if (v146 && !v7[24])
    {
      v307 = v267;
      v308 = v268;
      v309 = v269;
      v306 = v266;
      v305 = v265;
      *(_QWORD *)&v295 = 0xC0D0C0D0C0D0C0DLL;
      v300 = xmmword_224670120;
      v301 = xmmword_224670130;
      *(_QWORD *)&v290 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v305, 4, 0, 0, (uint64_t)&v295, (uint64_t)&v300, (uint64_t)&v290, COERCE_DOUBLE(0x1C400000004), xmmword_224670130);
      LOBYTE(v140) = v7[24];
    }
  }
  *(_WORD *)v7 = *(_WORD *)(v7 + 9);
  *(_WORD *)(v7 + 3) = *((_WORD *)v7 + 6);
  v7[6] = v7[15];
  *(_WORD *)(v7 + 9) = *((_WORD *)v7 + 9);
  *((_WORD *)v7 + 6) = *(_WORD *)(v7 + 21);
  v7[15] = v140;
  v147 = v49[9];
  if ((v147 & 0x80000000) != 0)
  {
    v150 = *v50;
    v151 = *(_DWORD *)(v48 + 2320);
    if (**v50)
      goto LABEL_317;
  }
  else
  {
    v148 = *(_QWORD *)(v48 + 2328);
    if (v147 >= (*(_QWORD *)(v48 + 2336) - v148) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v148 = *(_QWORD *)(v48 + 2328);
    }
    v149 = v148 + (v147 << 11);
    v150 = *v50;
    v151 = *(_DWORD *)(v149 + 2040);
    if (**v50)
    {
LABEL_317:
      v7[18] = (v151 & 0x40000000) != 0;
      v152 = v49[10];
      if ((v152 & 0x80000000) == 0)
        goto LABEL_318;
LABEL_615:
      v154 = *(_DWORD *)(v48 + 528);
      if (*v150)
        goto LABEL_322;
      goto LABEL_616;
    }
  }
  if ((v151 & 0x10000000) != 0)
    v245 = 0x40000000;
  else
    v245 = 0x80000000;
  if ((v151 & 0x20000000) != 0)
    v246 = v245;
  else
    v246 = v151 & 0xCFFFFFFF;
  v7[18] = (v246 & 0x40000000) != 0;
  v152 = v49[10];
  if ((v152 & 0x80000000) != 0)
    goto LABEL_615;
LABEL_318:
  v153 = *(_QWORD *)(v48 + 2328);
  if (v152 >= (*(_QWORD *)(v48 + 2336) - v153) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v153 = *(_QWORD *)(v48 + 2328);
    v150 = *v50;
  }
  v154 = *(_DWORD *)(v153 + (v152 << 11) + 248);
  if (*v150)
  {
LABEL_322:
    v7[19] = (v154 & 0x40000000) != 0;
    v155 = v49[12];
    if ((v155 & 0x80000000) == 0)
      goto LABEL_323;
LABEL_623:
    v157 = *(_DWORD *)(v48 + 2096);
    if (*v150)
      goto LABEL_333;
    goto LABEL_327;
  }
LABEL_616:
  if ((v154 & 0x10000000) != 0)
    v247 = 0x40000000;
  else
    v247 = 0x80000000;
  if ((v154 & 0x20000000) != 0)
    v248 = v247;
  else
    v248 = v154 & 0xCFFFFFFF;
  v7[19] = (v248 & 0x40000000) != 0;
  v155 = v49[12];
  if ((v155 & 0x80000000) != 0)
    goto LABEL_623;
LABEL_323:
  v156 = *(_QWORD *)(v48 + 2328);
  if (v155 >= (*(_QWORD *)(v48 + 2336) - v156) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v156 = *(_QWORD *)(v48 + 2328);
    v150 = *v50;
  }
  v157 = *(_DWORD *)(v156 + (v155 << 11) + 1816);
  if (!*v150)
  {
LABEL_327:
    if ((v157 & 0x10000000) != 0)
      v158 = 0x40000000;
    else
      v158 = 0x80000000;
    if ((v157 & 0x20000000) != 0)
      v157 = v158;
    else
      v157 &= 0xCFFFFFFF;
  }
LABEL_333:
  v7[21] = (v157 & 0x40000000) != 0;
  v159 = v47[6];
  if (**v46)
  {
    v7[22] = (v159 & 0x40000000) != 0;
    v160 = v49[12];
    if ((v160 & 0x80000000) == 0)
      goto LABEL_335;
LABEL_632:
    v162 = *(_DWORD *)(v48 + 2128);
    if (*v150)
      goto LABEL_345;
    goto LABEL_339;
  }
  if ((v159 & 0x10000000) != 0)
    v249 = 0x40000000;
  else
    v249 = 0x80000000;
  if ((v159 & 0x20000000) != 0)
    v250 = v249;
  else
    v250 = v159 & 0xCFFFFFFF;
  v7[22] = (v250 & 0x40000000) != 0;
  v160 = v49[12];
  if ((v160 & 0x80000000) != 0)
    goto LABEL_632;
LABEL_335:
  v161 = *(_QWORD *)(v48 + 2328);
  if (v160 >= (*(_QWORD *)(v48 + 2336) - v161) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v161 = *(_QWORD *)(v48 + 2328);
    v150 = *v50;
  }
  v162 = *(_DWORD *)(v161 + (v160 << 11) + 1848);
  if (!*v150)
  {
LABEL_339:
    if ((v162 & 0x10000000) != 0)
      v163 = 0x40000000;
    else
      v163 = 0x80000000;
    if ((v162 & 0x20000000) != 0)
      v162 = v163;
    else
      v162 &= 0xCFFFFFFF;
  }
LABEL_345:
  v164 = (v162 >> 30) & 1;
  v7[24] = (v162 & 0x40000000) != 0;
  v292 = v267;
  v293 = v268;
  v294 = v269;
  v291 = v266;
  v290 = v265;
  if (v7[13])
  {
    v282 = v267;
    v283 = v268;
    v284 = v269;
    v280 = v265;
    v281 = v266;
    *(_QWORD *)&v330 = 0xD0D0D0D0D0D0D0DLL;
    v275 = xmmword_224670140;
    v276 = (__int128)xmmword_224670150;
    *(_QWORD *)&v325 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v280, 5, 0, 0, (uint64_t)&v330, (uint64_t)&v275, (uint64_t)&v325, COERCE_DOUBLE(0x4500000005), xmmword_224670150);
    if (!v7[4])
    {
      v277 = v267;
      v278 = v268;
      v279 = v269;
      v275 = v265;
      v276 = v266;
      *(_QWORD *)&v325 = 0xD0D0D0D0D0D0D0DLL;
      v330 = xmmword_224670160;
      v331 = (__int128)xmmword_224670170;
      *(_QWORD *)&v320 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v275, 5, 0, 0, (uint64_t)&v325, (uint64_t)&v330, (uint64_t)&v320, COERCE_DOUBLE(0x4500000005), xmmword_224670170);
      v165 = (v7[3] | v7[12]) == 0;
      if (!(v7[1] | v7[10]))
      {
        v332 = v267;
        v333 = v268;
        v334 = v269;
        v330 = v265;
        v331 = v266;
        *(_QWORD *)&v320 = 0xA0A0D0D0A0A0D0DLL;
        v325 = xmmword_224670180;
        v326 = (__int128)xmmword_224670190;
        *(_QWORD *)&v315 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v330, 5, 0, 0, (uint64_t)&v320, (uint64_t)&v325, (uint64_t)&v315, COERCE_DOUBLE(0x4500000005), xmmword_224670190);
        if (!*v7)
        {
          v166 = !v165;
          if (v7[9])
            v166 = 1;
          if ((v166 & 1) == 0)
          {
            v327 = v267;
            v328 = v268;
            v329 = v269;
            v326 = v266;
            v325 = v265;
            *(_QWORD *)&v315 = 0x90A090A0C0D0C0DLL;
            v320 = xmmword_2246701A0;
            v321 = (__int128)xmmword_2246701B0;
            *(_QWORD *)&v310 = 0x1090A03040C0DLL;
            result = sub_223D91438((unint64_t)&v325, 5, 0, 0, (uint64_t)&v315, (uint64_t)&v320, (uint64_t)&v310, COERCE_DOUBLE(0x1C500000005), xmmword_2246701B0);
          }
        }
      }
      if (v7[6])
        v167 = 0;
      else
        v167 = v165;
      if (v167 && !v7[15])
      {
        v322 = v292;
        v323 = v293;
        v324 = v294;
        v321 = v291;
        v320 = v290;
        *(_QWORD *)&v310 = 0xC0D0C0D0C0D0C0DLL;
        v315 = xmmword_2246701C0;
        v316 = (__int128)xmmword_2246701D0;
        *(_QWORD *)&v305 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v320, 5, 0, 0, (uint64_t)&v310, (uint64_t)&v315, (uint64_t)&v305, COERCE_DOUBLE(0x1C500000005), xmmword_2246701D0);
      }
    }
    v168 = (v7[12] | v7[21]) == 0;
    if (!(v7[10] | v7[19]))
    {
      v317 = v292;
      v318 = v293;
      v319 = v294;
      v316 = v291;
      v315 = v290;
      *(_QWORD *)&v305 = 0xA0A0A0A0D0D0D0DLL;
      v310 = xmmword_2246701E0;
      v311 = (__int128)xmmword_2246701F0;
      *(_QWORD *)&v300 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v315, 5, 0, 0, (uint64_t)&v305, (uint64_t)&v310, (uint64_t)&v300, COERCE_DOUBLE(0x4500000005), xmmword_2246701F0);
      if (!v7[9])
      {
        v169 = !v168;
        if (v7[18])
          v169 = 1;
        if ((v169 & 1) == 0)
        {
          v312 = v292;
          v313 = v293;
          v314 = v294;
          v311 = v291;
          v310 = v290;
          *(_QWORD *)&v300 = 0x90A0C0D090A0C0DLL;
          v305 = xmmword_224670200;
          v306 = (__int128)xmmword_224670210;
          *(_QWORD *)&v295 = 0x12131516090A0C0DLL;
          result = sub_223D91438((unint64_t)&v310, 5, 0, 0, (uint64_t)&v300, (uint64_t)&v305, (uint64_t)&v295, COERCE_DOUBLE(0x1C500000005), xmmword_224670210);
        }
      }
    }
    if (v7[15])
      v170 = 0;
    else
      v170 = v168;
    LOBYTE(v164) = v7[24];
    if (v170 && !v7[24])
    {
      v307 = v292;
      v308 = v293;
      v309 = v294;
      v306 = v291;
      v305 = v290;
      *(_QWORD *)&v295 = 0xC0D0C0D0C0D0C0DLL;
      v300 = xmmword_224670220;
      v301 = xmmword_224670230;
      *(_QWORD *)&v285 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v305, 5, 0, 0, (uint64_t)&v295, (uint64_t)&v300, (uint64_t)&v285, COERCE_DOUBLE(0x1C500000005), xmmword_224670230);
      LOBYTE(v164) = v7[24];
    }
  }
  v287 = v267;
  v288 = v268;
  v289 = v269;
  v285 = v265;
  v286 = v266;
  *(_WORD *)v7 = *(_WORD *)(v7 + 9);
  *(_WORD *)(v7 + 3) = *((_WORD *)v7 + 6);
  v7[6] = v7[15];
  *(_WORD *)(v7 + 9) = *((_WORD *)v7 + 9);
  *((_WORD *)v7 + 6) = *(_WORD *)(v7 + 21);
  v7[15] = v164;
  v171 = v49[9];
  if ((v171 & 0x80000000) != 0)
  {
    v174 = *v50;
    v175 = *(_DWORD *)(v48 + 2324);
    if (**v50)
      goto LABEL_376;
  }
  else
  {
    v172 = *(_QWORD *)(v48 + 2328);
    if (v171 >= (*(_QWORD *)(v48 + 2336) - v172) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v172 = *(_QWORD *)(v48 + 2328);
    }
    v173 = v172 + (v171 << 11);
    v174 = *v50;
    v175 = *(_DWORD *)(v173 + 2044);
    if (**v50)
    {
LABEL_376:
      v7[18] = (v175 & 0x40000000) != 0;
      v176 = v49[10];
      if ((v176 & 0x80000000) == 0)
        goto LABEL_377;
LABEL_642:
      v178 = *(_DWORD *)(v48 + 532);
      if (*v174)
        goto LABEL_381;
      goto LABEL_643;
    }
  }
  if ((v175 & 0x10000000) != 0)
    v251 = 0x40000000;
  else
    v251 = 0x80000000;
  if ((v175 & 0x20000000) != 0)
    v252 = v251;
  else
    v252 = v175 & 0xCFFFFFFF;
  v7[18] = (v252 & 0x40000000) != 0;
  v176 = v49[10];
  if ((v176 & 0x80000000) != 0)
    goto LABEL_642;
LABEL_377:
  v177 = *(_QWORD *)(v48 + 2328);
  if (v176 >= (*(_QWORD *)(v48 + 2336) - v177) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v177 = *(_QWORD *)(v48 + 2328);
    v174 = *v50;
  }
  v178 = *(_DWORD *)(v177 + (v176 << 11) + 252);
  if (*v174)
  {
LABEL_381:
    v7[19] = (v178 & 0x40000000) != 0;
    v179 = v49[12];
    if ((v179 & 0x80000000) == 0)
      goto LABEL_382;
LABEL_650:
    v181 = *(_DWORD *)(v48 + 2100);
    if (*v174)
      goto LABEL_392;
    goto LABEL_386;
  }
LABEL_643:
  if ((v178 & 0x10000000) != 0)
    v253 = 0x40000000;
  else
    v253 = 0x80000000;
  if ((v178 & 0x20000000) != 0)
    v254 = v253;
  else
    v254 = v178 & 0xCFFFFFFF;
  v7[19] = (v254 & 0x40000000) != 0;
  v179 = v49[12];
  if ((v179 & 0x80000000) != 0)
    goto LABEL_650;
LABEL_382:
  v180 = *(_QWORD *)(v48 + 2328);
  if (v179 >= (*(_QWORD *)(v48 + 2336) - v180) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v180 = *(_QWORD *)(v48 + 2328);
    v174 = *v50;
  }
  v181 = *(_DWORD *)(v180 + (v179 << 11) + 1820);
  if (!*v174)
  {
LABEL_386:
    if ((v181 & 0x10000000) != 0)
      v182 = 0x40000000;
    else
      v182 = 0x80000000;
    if ((v181 & 0x20000000) != 0)
      v181 = v182;
    else
      v181 &= 0xCFFFFFFF;
  }
LABEL_392:
  v7[21] = (v181 & 0x40000000) != 0;
  v183 = v47[7];
  if (**v46)
  {
    v7[22] = (v183 & 0x40000000) != 0;
    v184 = v49[12];
    if ((v184 & 0x80000000) == 0)
      goto LABEL_394;
LABEL_659:
    v186 = *(_DWORD *)(v48 + 2132);
    if (*v174)
      goto LABEL_404;
    goto LABEL_398;
  }
  if ((v183 & 0x10000000) != 0)
    v255 = 0x40000000;
  else
    v255 = 0x80000000;
  if ((v183 & 0x20000000) != 0)
    v256 = v255;
  else
    v256 = v183 & 0xCFFFFFFF;
  v7[22] = (v256 & 0x40000000) != 0;
  v184 = v49[12];
  if ((v184 & 0x80000000) != 0)
    goto LABEL_659;
LABEL_394:
  v185 = *(_QWORD *)(v48 + 2328);
  if (v184 >= (*(_QWORD *)(v48 + 2336) - v185) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v185 = *(_QWORD *)(v48 + 2328);
    v174 = *v50;
  }
  v186 = *(_DWORD *)(v185 + (v184 << 11) + 1852);
  if (!*v174)
  {
LABEL_398:
    if ((v186 & 0x10000000) != 0)
      v187 = 0x40000000;
    else
      v187 = 0x80000000;
    if ((v186 & 0x20000000) != 0)
      v186 = v187;
    else
      v186 &= 0xCFFFFFFF;
  }
LABEL_404:
  v188 = (v186 >> 30) & 1;
  v7[24] = (v186 & 0x40000000) != 0;
  v297 = v267;
  v298 = v268;
  v299 = v269;
  v296 = v266;
  v295 = v265;
  if (v7[13])
  {
    v282 = v267;
    v283 = v268;
    v284 = v269;
    v280 = v265;
    v281 = v266;
    *(_QWORD *)&v330 = 0xD0D0D0D0D0D0D0DLL;
    v275 = xmmword_224670240;
    v276 = (__int128)xmmword_224670250;
    *(_QWORD *)&v325 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v280, 6, 0, 0, (uint64_t)&v330, (uint64_t)&v275, (uint64_t)&v325, COERCE_DOUBLE(0x4600000006), xmmword_224670250);
    if (!v7[4])
    {
      v277 = v267;
      v278 = v268;
      v279 = v269;
      v275 = v265;
      v276 = v266;
      *(_QWORD *)&v325 = 0xD0D0D0D0D0D0D0DLL;
      v330 = xmmword_224670260;
      v331 = (__int128)xmmword_224670270;
      *(_QWORD *)&v320 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v275, 6, 0, 0, (uint64_t)&v325, (uint64_t)&v330, (uint64_t)&v320, COERCE_DOUBLE(0x4600000006), xmmword_224670270);
      v189 = (v7[3] | v7[12]) == 0;
      if (!(v7[1] | v7[10]))
      {
        v332 = v267;
        v333 = v268;
        v334 = v269;
        v330 = v265;
        v331 = v266;
        *(_QWORD *)&v320 = 0xA0A0D0D0A0A0D0DLL;
        v325 = xmmword_224670280;
        v326 = (__int128)xmmword_224670290;
        *(_QWORD *)&v315 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v330, 6, 0, 0, (uint64_t)&v320, (uint64_t)&v325, (uint64_t)&v315, COERCE_DOUBLE(0x4600000006), xmmword_224670290);
        if (!*v7)
        {
          v190 = !v189;
          if (v7[9])
            v190 = 1;
          if ((v190 & 1) == 0)
          {
            v327 = v267;
            v328 = v268;
            v329 = v269;
            v326 = v266;
            v325 = v265;
            *(_QWORD *)&v315 = 0x90A090A0C0D0C0DLL;
            v320 = xmmword_2246702A0;
            v321 = (__int128)xmmword_2246702B0;
            *(_QWORD *)&v310 = 0x1090A03040C0DLL;
            result = sub_223D91438((unint64_t)&v325, 6, 0, 0, (uint64_t)&v315, (uint64_t)&v320, (uint64_t)&v310, COERCE_DOUBLE(0x1C600000006), xmmword_2246702B0);
          }
        }
      }
      if (v7[6])
        v191 = 0;
      else
        v191 = v189;
      if (v191 && !v7[15])
      {
        v322 = v297;
        v323 = v298;
        v324 = v299;
        v321 = v296;
        v320 = v295;
        *(_QWORD *)&v310 = 0xC0D0C0D0C0D0C0DLL;
        v315 = xmmword_2246702C0;
        v316 = (__int128)xmmword_2246702D0;
        *(_QWORD *)&v305 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v320, 6, 0, 0, (uint64_t)&v310, (uint64_t)&v315, (uint64_t)&v305, COERCE_DOUBLE(0x1C600000006), xmmword_2246702D0);
      }
    }
    v192 = (v7[12] | v7[21]) == 0;
    if (!(v7[10] | v7[19]))
    {
      v317 = v297;
      v318 = v298;
      v319 = v299;
      *(_QWORD *)&v305 = 0xA0A0A0A0D0D0D0DLL;
      v316 = v296;
      v315 = v295;
      v310 = xmmword_2246702E0;
      v311 = (__int128)xmmword_2246702F0;
      *(_QWORD *)&v300 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v315, 6, 0, 0, (uint64_t)&v305, (uint64_t)&v310, (uint64_t)&v300, COERCE_DOUBLE(0x4600000006), xmmword_2246702F0);
      if (!v7[9])
      {
        v193 = !v192;
        if (v7[18])
          v193 = 1;
        if ((v193 & 1) == 0)
        {
          v312 = v297;
          v313 = v298;
          v314 = v299;
          v311 = v296;
          v310 = v295;
          *(_QWORD *)&v300 = 0x90A0C0D090A0C0DLL;
          v305 = xmmword_224670300;
          v306 = (__int128)xmmword_224670310;
          *(_QWORD *)&v336[0] = 0x12131516090A0C0DLL;
          result = sub_223D91438((unint64_t)&v310, 6, 0, 0, (uint64_t)&v300, (uint64_t)&v305, (uint64_t)v336, COERCE_DOUBLE(0x1C600000006), xmmword_224670310);
        }
      }
    }
    if (v7[15])
      v194 = 0;
    else
      v194 = v192;
    LOBYTE(v188) = v7[24];
    if (v194 && !v7[24])
    {
      v307 = v297;
      v308 = v298;
      v309 = v299;
      v306 = v296;
      v305 = v295;
      *(_QWORD *)&v336[0] = 0xC0D0C0D0C0D0C0DLL;
      v300 = xmmword_224670320;
      v301 = xmmword_224670330;
      v337[0] = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v305, 6, 0, 0, (uint64_t)v336, (uint64_t)&v300, (uint64_t)v337, COERCE_DOUBLE(0x1C600000006), xmmword_224670330);
      LOBYTE(v188) = v7[24];
    }
  }
  *(_WORD *)v7 = *(_WORD *)(v7 + 9);
  *(_WORD *)(v7 + 3) = *((_WORD *)v7 + 6);
  v7[6] = v7[15];
  *(_WORD *)(v7 + 9) = *((_WORD *)v7 + 9);
  *((_WORD *)v7 + 6) = *(_WORD *)(v7 + 21);
  v7[15] = v188;
  v195 = v49[18];
  if ((v195 & 0x80000000) != 0)
  {
    v198 = *v50;
    v199 = *(_DWORD *)(v48 + 2296);
    if (**v50)
      goto LABEL_435;
  }
  else
  {
    v196 = *(_QWORD *)(v48 + 2328);
    if (v195 >= (*(_QWORD *)(v48 + 2336) - v196) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v196 = *(_QWORD *)(v48 + 2328);
    }
    v197 = v196 + (v195 << 11);
    v198 = *v50;
    v199 = *(_DWORD *)(v197 + 2016);
    if (**v50)
    {
LABEL_435:
      v7[18] = (v199 & 0x40000000) != 0;
      v200 = v49[19];
      if ((v200 & 0x80000000) == 0)
        goto LABEL_436;
LABEL_669:
      v202 = *(_DWORD *)(v48 + 504);
      if (*v198)
        goto LABEL_440;
      goto LABEL_670;
    }
  }
  if ((v199 & 0x10000000) != 0)
    v257 = 0x40000000;
  else
    v257 = 0x80000000;
  if ((v199 & 0x20000000) != 0)
    v258 = v257;
  else
    v258 = v199 & 0xCFFFFFFF;
  v7[18] = (v258 & 0x40000000) != 0;
  v200 = v49[19];
  if ((v200 & 0x80000000) != 0)
    goto LABEL_669;
LABEL_436:
  v201 = *(_QWORD *)(v48 + 2328);
  if (v200 >= (*(_QWORD *)(v48 + 2336) - v201) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v201 = *(_QWORD *)(v48 + 2328);
    v198 = *v50;
  }
  v202 = *(_DWORD *)(v201 + (v200 << 11) + 224);
  if (*v198)
  {
LABEL_440:
    v7[19] = (v202 & 0x40000000) != 0;
    v203 = v49[21];
    if ((v203 & 0x80000000) == 0)
      goto LABEL_441;
LABEL_677:
    v205 = *(_DWORD *)(v48 + 2072);
    if (*v198)
      goto LABEL_445;
    goto LABEL_678;
  }
LABEL_670:
  if ((v202 & 0x10000000) != 0)
    v259 = 0x40000000;
  else
    v259 = 0x80000000;
  if ((v202 & 0x20000000) != 0)
    v260 = v259;
  else
    v260 = v202 & 0xCFFFFFFF;
  v7[19] = (v260 & 0x40000000) != 0;
  v203 = v49[21];
  if ((v203 & 0x80000000) != 0)
    goto LABEL_677;
LABEL_441:
  v204 = *(_QWORD *)(v48 + 2328);
  if (v203 >= (*(_QWORD *)(v48 + 2336) - v204) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v204 = *(_QWORD *)(v48 + 2328);
    v198 = *v50;
  }
  v205 = *(_DWORD *)(v204 + (v203 << 11) + 1792);
  if (*v198)
  {
LABEL_445:
    v7[21] = (v205 & 0x40000000) != 0;
    v206 = v49[22];
    if ((v206 & 0x80000000) == 0)
      goto LABEL_446;
LABEL_685:
    v208 = *(_DWORD *)(v48 + 280);
    if (*v198)
      goto LABEL_450;
    goto LABEL_686;
  }
LABEL_678:
  if ((v205 & 0x10000000) != 0)
    v261 = 0x40000000;
  else
    v261 = 0x80000000;
  if ((v205 & 0x20000000) != 0)
    v262 = v261;
  else
    v262 = v205 & 0xCFFFFFFF;
  v7[21] = (v262 & 0x40000000) != 0;
  v206 = v49[22];
  if ((v206 & 0x80000000) != 0)
    goto LABEL_685;
LABEL_446:
  v207 = *(_QWORD *)(v48 + 2328);
  if (v206 >= (*(_QWORD *)(v48 + 2336) - v207) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v207 = *(_QWORD *)(v48 + 2328);
    v198 = *v50;
  }
  v208 = *(_DWORD *)(v207 + (v206 << 11));
  if (*v198)
  {
LABEL_450:
    v7[22] = (v208 & 0x40000000) != 0;
    v209 = v49[21];
    if ((v209 & 0x80000000) == 0)
      goto LABEL_451;
LABEL_693:
    v211 = *(_DWORD *)(v48 + 2104);
    if (*v198)
      goto LABEL_461;
    goto LABEL_455;
  }
LABEL_686:
  if ((v208 & 0x10000000) != 0)
    v263 = 0x40000000;
  else
    v263 = 0x80000000;
  if ((v208 & 0x20000000) != 0)
    v264 = v263;
  else
    v264 = v208 & 0xCFFFFFFF;
  v7[22] = (v264 & 0x40000000) != 0;
  v209 = v49[21];
  if ((v209 & 0x80000000) != 0)
    goto LABEL_693;
LABEL_451:
  v210 = *(_QWORD *)(v48 + 2328);
  if (v209 >= (*(_QWORD *)(v48 + 2336) - v210) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v210 = *(_QWORD *)(v48 + 2328);
    v198 = *v50;
  }
  v211 = *(_DWORD *)(v210 + (v209 << 11) + 1824);
  if (!*v198)
  {
LABEL_455:
    if ((v211 & 0x10000000) != 0)
      v212 = 0x40000000;
    else
      v212 = 0x80000000;
    if ((v211 & 0x20000000) != 0)
      v211 = v212;
    else
      v211 &= 0xCFFFFFFF;
  }
LABEL_461:
  v7[24] = (v211 & 0x40000000) != 0;
  v302 = v287;
  v303 = v288;
  v304 = v289;
  v301 = (float32x4_t)v286;
  v300 = v285;
  if (v7[13])
  {
    v282 = v287;
    v283 = v288;
    v284 = v289;
    *(_QWORD *)&v330 = 0x161616160D0D0D0DLL;
    v280 = v285;
    v281 = v286;
    v275 = xmmword_224670340;
    v276 = (__int128)xmmword_224670350;
    *(_QWORD *)&v325 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v280, 7, 0, 0, (uint64_t)&v330, (uint64_t)&v275, (uint64_t)&v325, COERCE_DOUBLE(0x4700000007), xmmword_224670350);
    if (!v7[4])
    {
      v277 = v287;
      v278 = v288;
      v279 = v289;
      *(_QWORD *)&v325 = 0xD0D0D0D0D0D0D0DLL;
      v275 = v285;
      v276 = v286;
      v330 = xmmword_224670360;
      v331 = (__int128)xmmword_224670370;
      *(_QWORD *)&v320 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v275, 7, 0, 0, (uint64_t)&v325, (uint64_t)&v330, (uint64_t)&v320, COERCE_DOUBLE(0x4700000007), xmmword_224670370);
      v213 = (v7[3] | v7[12]) == 0;
      if (!(v7[1] | v7[10]))
      {
        v332 = v287;
        v333 = v288;
        v334 = v289;
        v330 = v285;
        v331 = v286;
        *(_QWORD *)&v320 = 0xA0A0D0D0A0A0D0DLL;
        v325 = xmmword_224670380;
        v326 = (__int128)xmmword_224670390;
        *(_QWORD *)&v315 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v330, 7, 0, 0, (uint64_t)&v320, (uint64_t)&v325, (uint64_t)&v315, COERCE_DOUBLE(0x4700000007), xmmword_224670390);
        if (!*v7)
        {
          v214 = !v213;
          if (v7[9])
            v214 = 1;
          if ((v214 & 1) == 0)
          {
            v327 = v287;
            v328 = v288;
            v329 = v289;
            v326 = v286;
            v325 = v285;
            *(_QWORD *)&v315 = 0x90A090A0C0D0C0DLL;
            v320 = xmmword_2246703A0;
            v321 = (__int128)xmmword_2246703B0;
            *(_QWORD *)&v310 = 0x1090A03040C0DLL;
            result = sub_223D91438((unint64_t)&v325, 7, 0, 0, (uint64_t)&v315, (uint64_t)&v320, (uint64_t)&v310, COERCE_DOUBLE(0x1C700000007), xmmword_2246703B0);
          }
        }
      }
      if (v7[6])
        v215 = 0;
      else
        v215 = v213;
      if (v215 && !v7[15])
      {
        v322 = v302;
        v323 = v303;
        v324 = v304;
        v321 = (__int128)v301;
        v320 = v300;
        *(_QWORD *)&v310 = 0xC0D0C0D0C0D0C0DLL;
        v315 = xmmword_2246703C0;
        v316 = (__int128)xmmword_2246703D0;
        *(_QWORD *)&v305 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v320, 7, 0, 0, (uint64_t)&v310, (uint64_t)&v315, (uint64_t)&v305, COERCE_DOUBLE(0x1C700000007), xmmword_2246703D0);
      }
    }
    v216 = (v7[12] | v7[21]) == 0;
    if (!(v7[10] | v7[19]))
    {
      v317 = v302;
      v318 = v303;
      v319 = v304;
      *(_QWORD *)&v305 = 0x13130A0A16160D0DLL;
      v316 = (__int128)v301;
      v315 = v300;
      v310 = xmmword_2246703E0;
      v311 = (__int128)xmmword_2246703F0;
      *(_QWORD *)&v336[0] = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v315, 7, 0, 0, (uint64_t)&v305, (uint64_t)&v310, (uint64_t)v336, COERCE_DOUBLE(0x4700000007), xmmword_2246703F0);
      if (!v7[9])
      {
        v217 = !v216;
        if (v7[18])
          v217 = 1;
        if ((v217 & 1) == 0)
        {
          v312 = v302;
          v313 = v303;
          v314 = v304;
          v311 = (__int128)v301;
          v310 = v300;
          *(_QWORD *)&v336[0] = 0x12131516090A0C0DLL;
          v305 = xmmword_224670400;
          v306 = (__int128)xmmword_224670410;
          v337[0] = 0x12131516090A0C0DLL;
          result = sub_223D91438((unint64_t)&v310, 7, 0, 0, (uint64_t)v336, (uint64_t)&v305, (uint64_t)v337, COERCE_DOUBLE(0x1C700000007), xmmword_224670410);
        }
      }
    }
    if (v7[15])
      v218 = 0;
    else
      v218 = v216;
    if (v218 && !v7[24])
    {
      v307 = v302;
      v308 = v303;
      v309 = v304;
      v337[0] = 0x15160C0D15160C0DLL;
      v306 = (__int128)v301;
      v305 = v300;
      v336[0] = xmmword_224670420;
      v336[1] = xmmword_224670430;
      v335 = 0x18190F1015160C0DLL;
      return sub_223D91438((unint64_t)&v305, 7, 0, 0, (uint64_t)v337, (uint64_t)v336, (uint64_t)&v335, COERCE_DOUBLE(0x1C700000007), xmmword_224670430);
    }
  }
  return result;
}

