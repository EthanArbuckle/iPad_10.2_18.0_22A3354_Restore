uint64_t sub_22396A908(_QWORD ***a1, int32x2_t *a2, double a3, double a4, float32x4_t a5, float32x4_t a6, double a7, float32x4_t a8, double a9, float32x4_t a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x8_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  int8x8_t v23;
  char v24;
  int v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x8_t v30;
  float32x4_t v31;
  int8x16_t v32;
  char v33;
  unsigned __int32 v34;
  unsigned __int32 v35;
  int v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x8_t v42;
  float32x4_t v43;
  int8x16_t v44;
  char v45;
  int v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x8_t v52;
  float32x4_t v53;
  int8x16_t v54;
  char v55;
  unsigned __int32 v56;
  int v57;
  int v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x8_t v64;
  float32x4_t v65;
  int8x16_t v66;
  char v67;
  int v68;
  int v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x8_t v75;
  float32x4_t v76;
  int8x16_t v77;
  char v78;
  unsigned __int32 v79;
  int v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x8_t v84;
  float32x4_t v85;
  int8x16_t v86;
  char v87;
  int v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x8_t v92;
  float32x4_t v93;
  int8x16_t v94;
  char v95;
  unsigned __int32 v96;
  int v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x8_t v103;
  float32x4_t v104;
  int8x16_t v105;
  char v106;
  int v107;
  float32x4_t v108;
  float32x4_t v109;
  int8x8_t v110;
  float32x4_t v111;
  int8x16_t v112;
  char v113;
  int v114;
  float32x4_t v115;
  int8x8_t v116;
  float32x4_t v117;
  int8x16_t v118;
  char v119;
  int v120;
  float32x4_t v121;
  int8x8_t v122;
  float32x4_t v123;
  int8x16_t v124;
  char v125;
  int v126;
  float32x4_t v127;
  float32x4_t v128;
  int8x8_t v129;
  float32x4_t v130;
  int8x16_t v131;
  char v132;
  int v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x8_t v136;
  float32x4_t v137;
  int8x16_t v138;
  char v139;
  int v140;
  float32x4_t v141;
  int8x8_t v142;
  float32x4_t v143;
  int8x16_t v144;
  char v145;
  int v146;
  float32x4_t v147;
  int8x8_t v148;
  float32x4_t v149;
  int8x16_t v150;
  char v151;
  int v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x8_t v155;
  float32x4_t v156;
  int8x16_t v157;
  char v158;
  int v159;
  float32x4_t v160;
  float32x4_t v161;
  int8x8_t v162;
  float32x4_t v163;
  int8x16_t v164;
  char v165;
  int v166;
  float32x4_t v167;
  int8x8_t v168;
  float32x4_t v169;
  int8x16_t v170;
  char v171;
  int v172;
  float32x4_t v173;
  int8x8_t v174;
  float32x4_t v175;
  int8x16_t v176;
  char v177;
  int v178;
  float32x4_t v179;
  float32x4_t v180;
  int8x8_t v181;
  float32x4_t v182;
  int8x16_t v183;
  char v184;
  int v185;
  float32x4_t v186;
  float32x4_t v187;
  int8x8_t v188;
  float32x4_t v189;
  int8x16_t v190;
  char v191;
  int v192;
  float32x4_t v193;
  int8x8_t v194;
  float32x4_t v195;
  int8x16_t v196;
  char v197;
  int v198;
  float32x4_t v199;
  int8x8_t v200;
  float32x4_t v201;
  int8x16_t v202;
  char v203;
  int v204;
  float32x4_t v205;
  float32x4_t v206;
  int8x8_t v207;
  float32x4_t v208;
  int8x16_t v209;
  char v210;
  int v211;
  float32x4_t v212;
  float32x4_t v213;
  int8x8_t v214;
  float32x4_t v215;
  int8x16_t v216;
  char v217;
  int v218;
  float32x4_t v219;
  int8x8_t v220;
  float32x4_t v221;
  int8x16_t v222;
  char v223;
  int v224;
  float32x4_t v225;
  int8x8_t v226;
  float32x4_t v227;
  int8x16_t v228;
  char v229;
  int v230;
  float32x4_t v231;
  float32x4_t v232;
  int8x8_t v233;
  float32x4_t v234;
  int8x16_t v235;
  char v236;
  int v237;
  float32x4_t v238;
  float32x4_t v239;
  int8x8_t v240;
  float32x4_t v241;
  int8x16_t v242;
  char v243;
  int v244;
  float32x4_t v245;
  int8x8_t v246;
  float32x4_t v247;
  int8x16_t v248;
  char v249;
  int v250;
  float32x4_t v251;
  int8x8_t v252;
  float32x4_t v253;
  int8x16_t v254;
  char v255;
  int v256;
  float32x4_t v257;
  float32x4_t v258;
  int8x8_t v259;
  float32x4_t v260;
  int8x16_t v261;
  char v262;
  int v263;
  float32x4_t v264;
  int8x16_t v265;
  int8x8_t v266;
  float32x4_t v267;
  char v268;
  int v269;
  float32x4_t v270;
  float32x4_t v271;
  int8x8_t v272;
  float32x4_t v273;
  int8x16_t v274;
  char v275;
  int v276;
  int8x16_t v277;
  float32x4_t v278;
  int8x8_t v279;
  float32x4_t v280;
  float32x2_t v281;
  char v282;
  int v283;
  float32x4_t v284;
  float32x4_t v285;
  int8x8_t v286;
  float32x4_t v287;
  int8x16_t v288;
  char v289;
  int v290;
  int v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  int8x8_t v295;
  float32x4_t v296;
  int8x16_t v297;
  char v298;
  unsigned __int32 v299;
  int v300;
  float32x4_t v301;
  float32x4_t v302;
  int8x8_t v303;
  float32x4_t v304;
  int8x16_t v305;
  char v306;
  int v307;
  float32x4_t v308;
  float32x4_t v309;
  int8x8_t v310;
  float32x4_t v311;
  int8x16_t v312;
  char v313;
  int v314;
  float32x4_t v315;
  int8x8_t v316;
  float32x4_t v317;
  int8x16_t v318;
  char v319;
  int v320;
  float32x4_t v321;
  int8x8_t v322;
  float32x4_t v323;
  int8x16_t v324;
  char v325;
  int v326;
  float32x4_t v327;
  float32x4_t v328;
  int8x8_t v329;
  float32x4_t v330;
  int8x16_t v331;
  char v332;
  int v333;
  float32x4_t v334;
  int8x16_t v335;
  float32x4_t v336;
  int8x8_t v337;
  float32x4_t v338;
  float32x2_t v339;
  char v340;
  int v341;
  float32x4_t v342;
  float32x4_t v343;
  int8x8_t v344;
  float32x4_t v345;
  int8x16_t v346;
  char v347;
  int v348;
  int v349;
  float32x4_t v350;
  int8x8_t v351;
  float32x4_t v352;
  int8x16_t v353;
  char v354;
  int v355;
  float32x4_t v356;
  float32x4_t v357;
  int8x8_t v358;
  float32x4_t v359;
  int8x16_t v360;
  char v361;
  int v362;
  float32x4_t v363;
  float32x4_t v364;
  int8x8_t v365;
  float32x4_t v366;
  int8x16_t v367;
  char v368;
  int v369;
  int8x16_t v370;
  int8x8_t v371;
  float32x4_t v372;
  char v373;
  int v374;
  float32x4_t v375;
  int8x8_t v376;
  float32x4_t v377;
  int8x16_t v378;
  char v379;
  int v380;
  float32x4_t v381;
  float32x4_t v382;
  int8x8_t v383;
  float32x4_t v384;
  int8x16_t v385;
  char v386;
  int v387;
  float32x4_t v388;
  float32x4_t v389;
  int8x8_t v390;
  float32x4_t v391;
  int8x16_t v392;
  char v393;
  unsigned __int32 v394;
  int v395;
  float32x4_t v396;
  float32x4_t v397;
  int8x8_t v398;
  float32x4_t v399;
  int8x16_t v400;
  char v401;
  int v402;
  float32x4_t v403;
  float32x4_t v404;
  int8x8_t v405;
  float32x4_t v406;
  int8x16_t v407;
  char v408;
  unsigned __int32 v409;
  int v410;
  float32x4_t v411;
  float32x4_t v412;
  int8x8_t v413;
  float32x4_t v414;
  int8x16_t v415;
  char v416;
  int v417;
  float32x4_t v418;
  float32x4_t v419;
  int8x8_t v420;
  float32x4_t v421;
  int8x16_t v422;
  char v423;
  int v424;
  float32x4_t v425;
  float32x4_t v426;
  int8x8_t v427;
  float32x4_t v428;
  int8x16_t v429;
  char v430;
  int v431;
  float32x4_t v432;
  float32x4_t v433;
  int8x8_t v434;
  float32x4_t v435;
  int8x16_t v436;
  char v437;
  int v438;
  float32x4_t v439;
  float32x4_t v440;
  int8x8_t v441;
  float32x4_t v442;
  int8x16_t v443;
  char v444;
  int v445;
  float32x4_t v446;
  float32x4_t v447;
  int8x8_t v448;
  float32x4_t v449;
  int8x16_t v450;
  char v451;
  int v452;
  float32x4_t v453;
  float32x4_t v454;
  int8x8_t v455;
  float32x4_t v456;
  int8x16_t v457;
  char v458;
  int v459;
  float32x4_t v460;
  float32x4_t v461;
  int8x8_t v462;
  float32x4_t v463;
  int8x16_t v464;
  char v465;
  int v466;
  float32x4_t v467;
  float32x4_t v468;
  int8x8_t v469;
  float32x4_t v470;
  int8x16_t v471;
  char v472;
  int v473;
  float32x4_t v474;
  float32x4_t v475;
  int8x8_t v476;
  float32x4_t v477;
  int8x16_t v478;
  char v479;
  int v480;
  float32x4_t v481;
  float32x4_t v482;
  int8x8_t v483;
  float32x4_t v484;
  int8x16_t v485;
  char v486;
  int v487;
  float32x4_t v488;
  float32x4_t v489;
  int8x8_t v490;
  float32x4_t v491;
  int8x16_t v492;
  char v493;
  int v494;
  float32x4_t v495;
  int8x16_t v496;
  int8x8_t v497;
  float32x4_t v498;
  char v499;
  int v500;
  float32x4_t v501;
  int8x8_t v502;
  float32x4_t v503;
  int8x16_t v504;
  char v505;
  int v506;
  float32x4_t v507;
  float32x4_t v508;
  int8x8_t v509;
  float32x4_t v510;
  int8x16_t v511;
  char v512;
  int v513;
  float32x4_t v514;
  float32x4_t v515;
  int8x8_t v516;
  float32x4_t v517;
  int8x16_t v518;
  char v519;
  int v520;
  float32x4_t v521;
  int8x8_t v522;
  float32x4_t v523;
  int8x16_t v524;
  char v525;
  int v526;
  float32x4_t v527;
  int8x8_t v528;
  float32x4_t v529;
  int8x16_t v530;
  char v531;
  int v532;
  float32x4_t v533;
  float32x4_t v534;
  int8x8_t v535;
  float32x4_t v536;
  int8x16_t v537;
  char v538;
  int v539;
  float32x4_t v540;
  float32x4_t v541;
  int8x8_t v542;
  float32x4_t v543;
  int8x16_t v544;
  char v545;
  int v546;
  float32x4_t v547;
  int8x8_t v548;
  float32x4_t v549;
  int8x16_t v550;
  char v551;
  int v552;
  float32x4_t v553;
  int8x8_t v554;
  float32x4_t v555;
  int8x16_t v556;
  char v557;
  int v558;
  float32x4_t v559;
  float32x4_t v560;
  int8x8_t v561;
  float32x4_t v562;
  int8x16_t v563;
  char v564;
  __int8 *v565;
  int v566;
  float32x4_t v567;
  float32x4_t v568;
  int8x8_t v569;
  float32x4_t v570;
  int8x16_t v571;
  char v572;
  int v573;
  float32x4_t v574;
  int8x8_t v575;
  float32x4_t v576;
  int8x16_t v577;
  char v578;
  int v579;
  float32x4_t v580;
  int8x8_t v581;
  float32x4_t v582;
  int8x16_t v583;
  char v584;
  int v585;
  float32x4_t v586;
  float32x4_t v587;
  int8x8_t v588;
  float32x4_t v589;
  int8x16_t v590;
  char v591;
  int v592;
  int8x16_t v593;
  int8x8_t v594;
  float32x4_t v595;
  char v596;

  *(int32x2_t *)a6.f32 = *a2;
  v18.i32[1] = 2;
  *(int32x2_t *)a5.f32 = vadd_s32(*a2, (int32x2_t)0x200000005);
  v14 = a2[1].i32[0];
  v15 = (_BYTE *)***a1;
  v16 = *(*a1)[5];
  v17 = (char)v15[13926];
  v18.i32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 40784) + 312);
  *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a5.f32);
  v19 = a8;
  v19.f32[2] = (float)(v14 + 6);
  v20.i64[0] = 0x3F0000003F000000;
  v20.i64[1] = 0x3F0000003F000000;
  if (v15[13926])
  {
    v21 = vaddq_f32(v19, v20);
    v22 = *(_QWORD *)(v16 + 8);
    v19.i32[0] = **(_DWORD **)(v16 + 16);
    if (v17 > 0)
      goto LABEL_10;
  }
  else
  {
    a10.i8[0] = v15[13923];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[13924];
    v23 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v23.i32 = (float)v23.i32[0];
    a10.i32[1] = v23.i32[0];
    v23.i8[0] = v15[13925];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v23));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v19 = vaddq_f32(v19, v20);
    v21 = vaddq_f32(v19, vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u)));
    v22 = *(_QWORD *)(v16 + 8);
    v19.i32[0] = **(_DWORD **)(v16 + 16);
    if (v17 > 0)
      goto LABEL_10;
  }
  a10.i64[0] = *(_QWORD *)v22;
  a10.i32[2] = *(_DWORD *)(v22 + 8);
  a10 = vmlsq_lane_f32(a10, v21, v18, 0);
  v10 = (float32x4_t)vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL);
  *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a10.f32, 1), *(float32x2_t *)a10.f32, 1), *(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32);
  if (v11.f32[0] <= v19.f32[0])
  {
    v24 = v15[13926] ? 2 : 1;
    **(_BYTE **)(v16 + 24) = v24;
    if (v17)
      return 0;
  }
LABEL_10:
  v25 = v14 + 7;
  v26 = (char)v15[13966];
  if (v15[13966])
  {
    a8.f32[2] = (float)v25;
    v27.i64[0] = 0x3F0000003F000000;
    v27.i64[1] = 0x3F0000003F000000;
    v28 = vaddq_f32(a8, v27);
    if (v26 > 0)
      goto LABEL_19;
  }
  else
  {
    a8.f32[2] = (float)v25;
    v29.i64[0] = 0x3F0000003F000000;
    v29.i64[1] = 0x3F0000003F000000;
    a10.i8[0] = v15[13963];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[13964];
    v30 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v30.i32 = (float)v30.i32[0];
    a10.i32[1] = v30.i32[0];
    v30.i8[0] = v15[13965];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v30));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v31 = vaddq_f32(a8, v29);
    v27 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v28 = vaddq_f32(v31, v27);
    if (v26 > 0)
      goto LABEL_19;
  }
  v27.i64[0] = *(_QWORD *)v22;
  v27.i32[2] = *(_DWORD *)(v22 + 8);
  v32 = (int8x16_t)vmlsq_lane_f32(v27, v28, v18, 0);
  a10.i64[0] = vextq_s8(v32, v32, 8uLL).u64[0];
  *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1), *(float32x2_t *)v32.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
  if (v10.f32[0] <= v19.f32[0])
  {
    v33 = v15[13966] ? 2 : 1;
    **(_BYTE **)(v16 + 24) = v33;
    if (v26)
      return 0;
  }
LABEL_19:
  v34 = a6.u32[1];
  v35 = a6.i32[1] + 3;
  v36 = (char)v15[14006];
  if (v15[14006])
  {
    v37 = a5;
    v37.i32[1] = a6.i32[1] + 3;
    *(float32x2_t *)v37.f32 = vcvt_f32_s32(*(int32x2_t *)v37.f32);
    v37.f32[2] = (float)(v14 + 6);
    v38.i64[0] = 0x3F0000003F000000;
    v38.i64[1] = 0x3F0000003F000000;
    v39 = vaddq_f32(v37, v38);
    if (v36 > 0)
      goto LABEL_28;
  }
  else
  {
    v40 = a5;
    v40.i32[1] = a6.i32[1] + 3;
    *(float32x2_t *)v40.f32 = vcvt_f32_s32(*(int32x2_t *)v40.f32);
    v40.f32[2] = (float)(v14 + 6);
    v41.i64[0] = 0x3F0000003F000000;
    v41.i64[1] = 0x3F0000003F000000;
    a10.i8[0] = v15[14003];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14004];
    v42 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v42.i32 = (float)v42.i32[0];
    a10.i32[1] = v42.i32[0];
    v42.i8[0] = v15[14005];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v42));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v43 = vaddq_f32(v40, v41);
    v38 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v39 = vaddq_f32(v43, v38);
    if (v36 > 0)
      goto LABEL_28;
  }
  v38.i64[0] = *(_QWORD *)v22;
  v38.i32[2] = *(_DWORD *)(v22 + 8);
  v44 = (int8x16_t)vmlsq_lane_f32(v38, v39, v18, 0);
  a10.i64[0] = vextq_s8(v44, v44, 8uLL).u64[0];
  *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1), *(float32x2_t *)v44.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
  if (v10.f32[0] <= v19.f32[0])
  {
    v45 = v15[14006] ? 2 : 1;
    **(_BYTE **)(v16 + 24) = v45;
    if (v36)
      return 0;
  }
LABEL_28:
  v46 = (char)v15[14046];
  if (v15[14046])
  {
    v47 = a5;
    v47.i32[1] = a6.i32[1] + 3;
    *(float32x2_t *)v47.f32 = vcvt_f32_s32(*(int32x2_t *)v47.f32);
    v47.f32[2] = (float)v25;
    v48.i64[0] = 0x3F0000003F000000;
    v48.i64[1] = 0x3F0000003F000000;
    v49 = vaddq_f32(v47, v48);
    if (v46 > 0)
      goto LABEL_37;
  }
  else
  {
    v50 = a5;
    v50.i32[1] = a6.i32[1] + 3;
    *(float32x2_t *)v50.f32 = vcvt_f32_s32(*(int32x2_t *)v50.f32);
    v50.f32[2] = (float)v25;
    v51.i64[0] = 0x3F0000003F000000;
    v51.i64[1] = 0x3F0000003F000000;
    a10.i8[0] = v15[14043];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14044];
    v52 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v52.i32 = (float)v52.i32[0];
    a10.i32[1] = v52.i32[0];
    v52.i8[0] = v15[14045];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v52));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v53 = vaddq_f32(v50, v51);
    v48 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v49 = vaddq_f32(v53, v48);
    if (v46 > 0)
      goto LABEL_37;
  }
  v48.i64[0] = *(_QWORD *)v22;
  v48.i32[2] = *(_DWORD *)(v22 + 8);
  v54 = (int8x16_t)vmlsq_lane_f32(v48, v49, v18, 0);
  a10.i64[0] = vextq_s8(v54, v54, 8uLL).u64[0];
  *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1), *(float32x2_t *)v54.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
  if (v10.f32[0] <= v19.f32[0])
  {
    v55 = v15[14046] ? 2 : 1;
    **(_BYTE **)(v16 + 24) = v55;
    if (v46)
      return 0;
  }
LABEL_37:
  v56 = a6.i32[0] + 6;
  v57 = v14 + 4;
  v58 = (char)v15[14086];
  if (v15[14086])
  {
    v59 = a6;
    v59.i32[0] = a6.i32[0] + 6;
    *(float32x2_t *)v59.f32 = vcvt_f32_s32(*(int32x2_t *)v59.f32);
    v59.f32[2] = (float)v57;
    v60.i64[0] = 0x3F0000003F000000;
    v60.i64[1] = 0x3F0000003F000000;
    v61 = vaddq_f32(v59, v60);
    if (v58 > 0)
      goto LABEL_46;
  }
  else
  {
    v62 = a6;
    v62.i32[0] = a6.i32[0] + 6;
    *(float32x2_t *)v62.f32 = vcvt_f32_s32(*(int32x2_t *)v62.f32);
    v62.f32[2] = (float)v57;
    v63.i64[0] = 0x3F0000003F000000;
    v63.i64[1] = 0x3F0000003F000000;
    a10.i8[0] = v15[14083];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14084];
    v64 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v64.i32 = (float)v64.i32[0];
    a10.i32[1] = v64.i32[0];
    v64.i8[0] = v15[14085];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v64));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v65 = vaddq_f32(v62, v63);
    v60 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v61 = vaddq_f32(v65, v60);
    if (v58 > 0)
      goto LABEL_46;
  }
  v60.i64[0] = *(_QWORD *)v22;
  v60.i32[2] = *(_DWORD *)(v22 + 8);
  v66 = (int8x16_t)vmlsq_lane_f32(v60, v61, v18, 0);
  a10.i64[0] = vextq_s8(v66, v66, 8uLL).u64[0];
  *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v66.i8, *(float32x2_t *)v66.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1), *(float32x2_t *)v66.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
  if (v10.f32[0] <= v19.f32[0])
  {
    v67 = v15[14086] ? 2 : 1;
    **(_BYTE **)(v16 + 24) = v67;
    if (v58)
      return 0;
  }
LABEL_46:
  v68 = v14 + 5;
  v69 = (char)v15[14126];
  if (v15[14126])
  {
    v70 = a6;
    v70.i32[0] = a6.i32[0] + 6;
    *(float32x2_t *)v70.f32 = vcvt_f32_s32(*(int32x2_t *)v70.f32);
    v70.f32[2] = (float)v68;
    v71.i64[0] = 0x3F0000003F000000;
    v71.i64[1] = 0x3F0000003F000000;
    v72 = vaddq_f32(v70, v71);
    if (v69 > 0)
      goto LABEL_55;
  }
  else
  {
    v73 = a6;
    v73.i32[0] = a6.i32[0] + 6;
    *(float32x2_t *)v73.f32 = vcvt_f32_s32(*(int32x2_t *)v73.f32);
    v73.f32[2] = (float)v68;
    v74.i64[0] = 0x3F0000003F000000;
    v74.i64[1] = 0x3F0000003F000000;
    a10.i8[0] = v15[14123];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14124];
    v75 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v75.i32 = (float)v75.i32[0];
    a10.i32[1] = v75.i32[0];
    v75.i8[0] = v15[14125];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v75));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v76 = vaddq_f32(v73, v74);
    v71 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v72 = vaddq_f32(v76, v71);
    if (v69 > 0)
      goto LABEL_55;
  }
  v71.i64[0] = *(_QWORD *)v22;
  v71.i32[2] = *(_DWORD *)(v22 + 8);
  v77 = (int8x16_t)vmlsq_lane_f32(v71, v72, v18, 0);
  a10.i64[0] = vextq_s8(v77, v77, 8uLL).u64[0];
  *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 1), *(float32x2_t *)v77.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
  if (v10.f32[0] <= v19.f32[0])
  {
    v78 = v15[14126] ? 2 : 1;
    **(_BYTE **)(v16 + 24) = v78;
    if (v69)
      return 0;
  }
LABEL_55:
  v79 = a6.i32[1] + 1;
  v80 = (char)v15[14166];
  if (v15[14166])
  {
    *(float32x2_t *)v72.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v79, v56));
    v72.f32[2] = (float)v57;
    v81.i64[0] = 0x3F0000003F000000;
    v81.i64[1] = 0x3F0000003F000000;
    v82 = vaddq_f32(v72, v81);
    if (v80 > 0)
      goto LABEL_64;
  }
  else
  {
    *(float32x2_t *)v72.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v79, v56));
    v72.f32[2] = (float)v57;
    v83.i64[0] = 0x3F0000003F000000;
    v83.i64[1] = 0x3F0000003F000000;
    a10.i8[0] = v15[14163];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14164];
    v84 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v84.i32 = (float)v84.i32[0];
    a10.i32[1] = v84.i32[0];
    v84.i8[0] = v15[14165];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v84));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v85 = vaddq_f32(v72, v83);
    v81 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v82 = vaddq_f32(v85, v81);
    if (v80 > 0)
      goto LABEL_64;
  }
  v81.i64[0] = *(_QWORD *)v22;
  v81.i32[2] = *(_DWORD *)(v22 + 8);
  v86 = (int8x16_t)vmlsq_lane_f32(v81, v82, v18, 0);
  a10.i64[0] = vextq_s8(v86, v86, 8uLL).u64[0];
  *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v86.i8, 1), *(float32x2_t *)v86.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
  if (v10.f32[0] <= v19.f32[0])
  {
    v87 = v15[14166] ? 2 : 1;
    **(_BYTE **)(v16 + 24) = v87;
    if (v80)
      return 0;
  }
LABEL_64:
  v88 = (char)v15[14206];
  if (v15[14206])
  {
    *(float32x2_t *)v82.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v79, v56));
    v82.f32[2] = (float)v68;
    v89.i64[0] = 0x3F0000003F000000;
    v89.i64[1] = 0x3F0000003F000000;
    v90 = vaddq_f32(v82, v89);
    if (v88 > 0)
      goto LABEL_73;
  }
  else
  {
    *(float32x2_t *)v82.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v79, v56));
    v82.f32[2] = (float)v68;
    v91.i64[0] = 0x3F0000003F000000;
    v91.i64[1] = 0x3F0000003F000000;
    a10.i8[0] = v15[14203];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14204];
    v92 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v92.i32 = (float)v92.i32[0];
    a10.i32[1] = v92.i32[0];
    v92.i8[0] = v15[14205];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v92));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v93 = vaddq_f32(v82, v91);
    v89 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v90 = vaddq_f32(v93, v89);
    if (v88 > 0)
      goto LABEL_73;
  }
  v89.i64[0] = *(_QWORD *)v22;
  v89.i32[2] = *(_DWORD *)(v22 + 8);
  v94 = (int8x16_t)vmlsq_lane_f32(v89, v90, v18, 0);
  a10.i64[0] = vextq_s8(v94, v94, 8uLL).u64[0];
  *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v94.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v94.i8, 1), *(float32x2_t *)v94.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
  if (v10.f32[0] <= v19.f32[0])
  {
    v95 = v15[14206] ? 2 : 1;
    **(_BYTE **)(v16 + 24) = v95;
    if (v88)
      return 0;
  }
LABEL_73:
  v96 = a6.i32[0] + 7;
  v97 = (char)v15[14246];
  if (v15[14246])
  {
    v98 = a6;
    v98.i32[0] = a6.i32[0] + 7;
    *(float32x2_t *)v98.f32 = vcvt_f32_s32(*(int32x2_t *)v98.f32);
    v98.f32[2] = (float)v57;
    v99.i64[0] = 0x3F0000003F000000;
    v99.i64[1] = 0x3F0000003F000000;
    v100 = vaddq_f32(v98, v99);
    if (v97 > 0)
      goto LABEL_82;
  }
  else
  {
    v101 = a6;
    v101.i32[0] = a6.i32[0] + 7;
    *(float32x2_t *)v101.f32 = vcvt_f32_s32(*(int32x2_t *)v101.f32);
    v101.f32[2] = (float)v57;
    v102.i64[0] = 0x3F0000003F000000;
    v102.i64[1] = 0x3F0000003F000000;
    a10.i8[0] = v15[14243];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14244];
    v103 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v103.i32 = (float)v103.i32[0];
    a10.i32[1] = v103.i32[0];
    v103.i8[0] = v15[14245];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v103));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v104 = vaddq_f32(v101, v102);
    v99 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v100 = vaddq_f32(v104, v99);
    if (v97 > 0)
      goto LABEL_82;
  }
  v99.i64[0] = *(_QWORD *)v22;
  v99.i32[2] = *(_DWORD *)(v22 + 8);
  v105 = (int8x16_t)vmlsq_lane_f32(v99, v100, v18, 0);
  a10.i64[0] = vextq_s8(v105, v105, 8uLL).u64[0];
  *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v105.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.i8, 1), *(float32x2_t *)v105.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
  if (v10.f32[0] <= v19.f32[0])
  {
    v106 = v15[14246] ? 2 : 1;
    **(_BYTE **)(v16 + 24) = v106;
    if (v97)
      return 0;
  }
LABEL_82:
  v107 = (char)v15[14286];
  v108 = a6;
  v108.i32[0] = a6.i32[0] + 7;
  *(float32x2_t *)v108.f32 = vcvt_f32_s32(*(int32x2_t *)v108.f32);
  v108.f32[2] = (float)v68;
  v109.i64[0] = 0x3F0000003F000000;
  v109.i64[1] = 0x3F0000003F000000;
  if (!v15[14286])
  {
    a10.i8[0] = v15[14283];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14284];
    v110 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v110.i32 = (float)v110.i32[0];
    a10.i32[1] = v110.i32[0];
    v110.i8[0] = v15[14285];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v110));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v108 = vaddq_f32(v108, v109);
    v109 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v111 = vaddq_f32(v108, v109);
  if (v107 <= 0)
  {
    v109.i64[0] = *(_QWORD *)v22;
    v109.i32[2] = *(_DWORD *)(v22 + 8);
    v112 = (int8x16_t)vmlsq_lane_f32(v109, v111, v18, 0);
    a10.i64[0] = vextq_s8(v112, v112, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v112.i8, *(float32x2_t *)v112.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.i8, 1), *(float32x2_t *)v112.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v113 = v15[14286] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v113;
      if (v107)
        return 0;
    }
  }
  v114 = (char)v15[14326];
  *(float32x2_t *)v111.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v79, v96));
  v111.f32[2] = (float)v57;
  v115.i64[0] = 0x3F0000003F000000;
  v115.i64[1] = 0x3F0000003F000000;
  if (!v15[14326])
  {
    a10.i8[0] = v15[14323];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14324];
    v116 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v116.i32 = (float)v116.i32[0];
    a10.i32[1] = v116.i32[0];
    v116.i8[0] = v15[14325];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v116));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v111 = vaddq_f32(v111, v115);
    v115 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v117 = vaddq_f32(v111, v115);
  if (v114 <= 0)
  {
    v115.i64[0] = *(_QWORD *)v22;
    v115.i32[2] = *(_DWORD *)(v22 + 8);
    v118 = (int8x16_t)vmlsq_lane_f32(v115, v117, v18, 0);
    a10.i64[0] = vextq_s8(v118, v118, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.i8, 1), *(float32x2_t *)v118.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v119 = v15[14326] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v119;
      if (v114)
        return 0;
    }
  }
  v120 = (char)v15[14366];
  *(float32x2_t *)v117.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v79, v96));
  v117.f32[2] = (float)v68;
  v121.i64[0] = 0x3F0000003F000000;
  v121.i64[1] = 0x3F0000003F000000;
  if (!v15[14366])
  {
    a10.i8[0] = v15[14363];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14364];
    v122 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v122.i32 = (float)v122.i32[0];
    a10.i32[1] = v122.i32[0];
    v122.i8[0] = v15[14365];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v122));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v117 = vaddq_f32(v117, v121);
    v121 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v123 = vaddq_f32(v117, v121);
  if (v120 <= 0)
  {
    v121.i64[0] = *(_QWORD *)v22;
    v121.i32[2] = *(_DWORD *)(v22 + 8);
    v124 = (int8x16_t)vmlsq_lane_f32(v121, v123, v18, 0);
    a10.i64[0] = vextq_s8(v124, v124, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v124.i8, *(float32x2_t *)v124.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v124.i8, 1), *(float32x2_t *)v124.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v125 = v15[14366] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v125;
      if (v120)
        return 0;
    }
  }
  v126 = (char)v15[14406];
  v127 = a6;
  v127.i32[0] = a6.i32[0] + 6;
  *(float32x2_t *)v127.f32 = vcvt_f32_s32(*(int32x2_t *)v127.f32);
  v127.f32[2] = (float)(v14 + 6);
  v128.i64[0] = 0x3F0000003F000000;
  v128.i64[1] = 0x3F0000003F000000;
  if (!v15[14406])
  {
    a10.i8[0] = v15[14403];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14404];
    v129 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v129.i32 = (float)v129.i32[0];
    a10.i32[1] = v129.i32[0];
    v129.i8[0] = v15[14405];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v129));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v127 = vaddq_f32(v127, v128);
    v128 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v130 = vaddq_f32(v127, v128);
  if (v126 <= 0)
  {
    v128.i64[0] = *(_QWORD *)v22;
    v128.i32[2] = *(_DWORD *)(v22 + 8);
    v131 = (int8x16_t)vmlsq_lane_f32(v128, v130, v18, 0);
    a10.i64[0] = vextq_s8(v131, v131, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v131.i8, *(float32x2_t *)v131.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v131.i8, 1), *(float32x2_t *)v131.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v132 = v15[14406] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v132;
      if (v126)
        return 0;
    }
  }
  v133 = (char)v15[14446];
  v134 = a6;
  v134.i32[0] = a6.i32[0] + 6;
  *(float32x2_t *)v134.f32 = vcvt_f32_s32(*(int32x2_t *)v134.f32);
  v134.f32[2] = (float)v25;
  v135.i64[0] = 0x3F0000003F000000;
  v135.i64[1] = 0x3F0000003F000000;
  if (!v15[14446])
  {
    a10.i8[0] = v15[14443];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14444];
    v136 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v136.i32 = (float)v136.i32[0];
    a10.i32[1] = v136.i32[0];
    v136.i8[0] = v15[14445];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v136));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v134 = vaddq_f32(v134, v135);
    v135 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v137 = vaddq_f32(v134, v135);
  if (v133 <= 0)
  {
    v135.i64[0] = *(_QWORD *)v22;
    v135.i32[2] = *(_DWORD *)(v22 + 8);
    v138 = (int8x16_t)vmlsq_lane_f32(v135, v137, v18, 0);
    a10.i64[0] = vextq_s8(v138, v138, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v138.i8, *(float32x2_t *)v138.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v138.i8, 1), *(float32x2_t *)v138.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v139 = v15[14446] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v139;
      if (v133)
        return 0;
    }
  }
  v140 = (char)v15[14486];
  *(float32x2_t *)v137.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v79, v56));
  v137.f32[2] = (float)(v14 + 6);
  v141.i64[0] = 0x3F0000003F000000;
  v141.i64[1] = 0x3F0000003F000000;
  if (!v15[14486])
  {
    a10.i8[0] = v15[14483];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14484];
    v142 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v142.i32 = (float)v142.i32[0];
    a10.i32[1] = v142.i32[0];
    v142.i8[0] = v15[14485];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v142));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v137 = vaddq_f32(v137, v141);
    v141 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v143 = vaddq_f32(v137, v141);
  if (v140 <= 0)
  {
    v141.i64[0] = *(_QWORD *)v22;
    v141.i32[2] = *(_DWORD *)(v22 + 8);
    v144 = (int8x16_t)vmlsq_lane_f32(v141, v143, v18, 0);
    a10.i64[0] = vextq_s8(v144, v144, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v144.i8, 1), *(float32x2_t *)v144.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v145 = v15[14486] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v145;
      if (v140)
        return 0;
    }
  }
  v146 = (char)v15[14526];
  *(float32x2_t *)v143.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v79, v56));
  v143.f32[2] = (float)v25;
  v147.i64[0] = 0x3F0000003F000000;
  v147.i64[1] = 0x3F0000003F000000;
  if (!v15[14526])
  {
    a10.i8[0] = v15[14523];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14524];
    v148 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v148.i32 = (float)v148.i32[0];
    a10.i32[1] = v148.i32[0];
    v148.i8[0] = v15[14525];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v148));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v143 = vaddq_f32(v143, v147);
    v147 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v149 = vaddq_f32(v143, v147);
  if (v146 <= 0)
  {
    v147.i64[0] = *(_QWORD *)v22;
    v147.i32[2] = *(_DWORD *)(v22 + 8);
    v150 = (int8x16_t)vmlsq_lane_f32(v147, v149, v18, 0);
    a10.i64[0] = vextq_s8(v150, v150, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v150.i8, *(float32x2_t *)v150.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v150.i8, 1), *(float32x2_t *)v150.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v151 = v15[14526] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v151;
      if (v146)
        return 0;
    }
  }
  v152 = (char)v15[14566];
  v153 = a6;
  v153.i32[0] = a6.i32[0] + 7;
  *(float32x2_t *)v153.f32 = vcvt_f32_s32(*(int32x2_t *)v153.f32);
  v153.f32[2] = (float)(v14 + 6);
  v154.i64[0] = 0x3F0000003F000000;
  v154.i64[1] = 0x3F0000003F000000;
  if (!v15[14566])
  {
    a10.i8[0] = v15[14563];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14564];
    v155 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v155.i32 = (float)v155.i32[0];
    a10.i32[1] = v155.i32[0];
    v155.i8[0] = v15[14565];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v155));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v153 = vaddq_f32(v153, v154);
    v154 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v156 = vaddq_f32(v153, v154);
  if (v152 <= 0)
  {
    v154.i64[0] = *(_QWORD *)v22;
    v154.i32[2] = *(_DWORD *)(v22 + 8);
    v157 = (int8x16_t)vmlsq_lane_f32(v154, v156, v18, 0);
    a10.i64[0] = vextq_s8(v157, v157, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v157.i8, *(float32x2_t *)v157.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v157.i8, 1), *(float32x2_t *)v157.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v158 = v15[14566] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v158;
      if (v152)
        return 0;
    }
  }
  v159 = (char)v15[14606];
  v160 = a6;
  v160.i32[0] = a6.i32[0] + 7;
  *(float32x2_t *)v160.f32 = vcvt_f32_s32(*(int32x2_t *)v160.f32);
  v160.f32[2] = (float)v25;
  v161.i64[0] = 0x3F0000003F000000;
  v161.i64[1] = 0x3F0000003F000000;
  if (!v15[14606])
  {
    a10.i8[0] = v15[14603];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14604];
    v162 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v162.i32 = (float)v162.i32[0];
    a10.i32[1] = v162.i32[0];
    v162.i8[0] = v15[14605];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v162));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v160 = vaddq_f32(v160, v161);
    v161 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v163 = vaddq_f32(v160, v161);
  if (v159 <= 0)
  {
    v161.i64[0] = *(_QWORD *)v22;
    v161.i32[2] = *(_DWORD *)(v22 + 8);
    v164 = (int8x16_t)vmlsq_lane_f32(v161, v163, v18, 0);
    a10.i64[0] = vextq_s8(v164, v164, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v164.i8, *(float32x2_t *)v164.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v164.i8, 1), *(float32x2_t *)v164.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v165 = v15[14606] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v165;
      if (v159)
        return 0;
    }
  }
  v166 = (char)v15[14646];
  *(float32x2_t *)v163.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v79, v96));
  v163.f32[2] = (float)(v14 + 6);
  v167.i64[0] = 0x3F0000003F000000;
  v167.i64[1] = 0x3F0000003F000000;
  if (!v15[14646])
  {
    a10.i8[0] = v15[14643];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14644];
    v168 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v168.i32 = (float)v168.i32[0];
    a10.i32[1] = v168.i32[0];
    v168.i8[0] = v15[14645];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v168));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v163 = vaddq_f32(v163, v167);
    v167 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v169 = vaddq_f32(v163, v167);
  if (v166 <= 0)
  {
    v167.i64[0] = *(_QWORD *)v22;
    v167.i32[2] = *(_DWORD *)(v22 + 8);
    v170 = (int8x16_t)vmlsq_lane_f32(v167, v169, v18, 0);
    a10.i64[0] = vextq_s8(v170, v170, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v170.i8, *(float32x2_t *)v170.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v170.i8, 1), *(float32x2_t *)v170.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v171 = v15[14646] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v171;
      if (v166)
        return 0;
    }
  }
  v172 = (char)v15[14686];
  *(float32x2_t *)v169.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v79, v96));
  v169.f32[2] = (float)v25;
  v173.i64[0] = 0x3F0000003F000000;
  v173.i64[1] = 0x3F0000003F000000;
  if (!v15[14686])
  {
    a10.i8[0] = v15[14683];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14684];
    v174 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v174.i32 = (float)v174.i32[0];
    a10.i32[1] = v174.i32[0];
    v174.i8[0] = v15[14685];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v174));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v169 = vaddq_f32(v169, v173);
    v173 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v175 = vaddq_f32(v169, v173);
  if (v172 <= 0)
  {
    v173.i64[0] = *(_QWORD *)v22;
    v173.i32[2] = *(_DWORD *)(v22 + 8);
    v176 = (int8x16_t)vmlsq_lane_f32(v173, v175, v18, 0);
    a10.i64[0] = vextq_s8(v176, v176, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v176.i8, *(float32x2_t *)v176.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v176.i8, 1), *(float32x2_t *)v176.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v177 = v15[14686] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v177;
      if (v172)
        return 0;
    }
  }
  v178 = (char)v15[14726];
  v179 = a5;
  v179.i32[0] = a6.i32[0] + 6;
  *(float32x2_t *)v179.f32 = vcvt_f32_s32(*(int32x2_t *)v179.f32);
  v179.f32[2] = (float)v57;
  v180.i64[0] = 0x3F0000003F000000;
  v180.i64[1] = 0x3F0000003F000000;
  if (!v15[14726])
  {
    a10.i8[0] = v15[14723];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14724];
    v181 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v181.i32 = (float)v181.i32[0];
    a10.i32[1] = v181.i32[0];
    v181.i8[0] = v15[14725];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v181));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v179 = vaddq_f32(v179, v180);
    v180 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v182 = vaddq_f32(v179, v180);
  if (v178 <= 0)
  {
    v180.i64[0] = *(_QWORD *)v22;
    v180.i32[2] = *(_DWORD *)(v22 + 8);
    v183 = (int8x16_t)vmlsq_lane_f32(v180, v182, v18, 0);
    a10.i64[0] = vextq_s8(v183, v183, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v183.i8, *(float32x2_t *)v183.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v183.i8, 1), *(float32x2_t *)v183.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v184 = v15[14726] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v184;
      if (v178)
        return 0;
    }
  }
  v185 = (char)v15[14766];
  v186 = a5;
  v186.i32[0] = a6.i32[0] + 6;
  *(float32x2_t *)v186.f32 = vcvt_f32_s32(*(int32x2_t *)v186.f32);
  v186.f32[2] = (float)v68;
  v187.i64[0] = 0x3F0000003F000000;
  v187.i64[1] = 0x3F0000003F000000;
  if (!v15[14766])
  {
    a10.i8[0] = v15[14763];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14764];
    v188 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v188.i32 = (float)v188.i32[0];
    a10.i32[1] = v188.i32[0];
    v188.i8[0] = v15[14765];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v188));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v186 = vaddq_f32(v186, v187);
    v187 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v189 = vaddq_f32(v186, v187);
  if (v185 <= 0)
  {
    v187.i64[0] = *(_QWORD *)v22;
    v187.i32[2] = *(_DWORD *)(v22 + 8);
    v190 = (int8x16_t)vmlsq_lane_f32(v187, v189, v18, 0);
    a10.i64[0] = vextq_s8(v190, v190, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v190.i8, *(float32x2_t *)v190.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v190.i8, 1), *(float32x2_t *)v190.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v191 = v15[14766] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v191;
      if (v185)
        return 0;
    }
  }
  v192 = (char)v15[14806];
  *(float32x2_t *)v189.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v35, v56));
  v189.f32[2] = (float)v57;
  v193.i64[0] = 0x3F0000003F000000;
  v193.i64[1] = 0x3F0000003F000000;
  if (!v15[14806])
  {
    a10.i8[0] = v15[14803];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14804];
    v194 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v194.i32 = (float)v194.i32[0];
    a10.i32[1] = v194.i32[0];
    v194.i8[0] = v15[14805];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v194));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v189 = vaddq_f32(v189, v193);
    v193 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v195 = vaddq_f32(v189, v193);
  if (v192 <= 0)
  {
    v193.i64[0] = *(_QWORD *)v22;
    v193.i32[2] = *(_DWORD *)(v22 + 8);
    v196 = (int8x16_t)vmlsq_lane_f32(v193, v195, v18, 0);
    a10.i64[0] = vextq_s8(v196, v196, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v196.i8, *(float32x2_t *)v196.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v196.i8, 1), *(float32x2_t *)v196.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v197 = v15[14806] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v197;
      if (v192)
        return 0;
    }
  }
  v198 = (char)v15[14846];
  *(float32x2_t *)v195.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v35, v56));
  v195.f32[2] = (float)v68;
  v199.i64[0] = 0x3F0000003F000000;
  v199.i64[1] = 0x3F0000003F000000;
  if (!v15[14846])
  {
    a10.i8[0] = v15[14843];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14844];
    v200 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v200.i32 = (float)v200.i32[0];
    a10.i32[1] = v200.i32[0];
    v200.i8[0] = v15[14845];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v200));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v195 = vaddq_f32(v195, v199);
    v199 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v201 = vaddq_f32(v195, v199);
  if (v198 <= 0)
  {
    v199.i64[0] = *(_QWORD *)v22;
    v199.i32[2] = *(_DWORD *)(v22 + 8);
    v202 = (int8x16_t)vmlsq_lane_f32(v199, v201, v18, 0);
    a10.i64[0] = vextq_s8(v202, v202, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v202.i8, *(float32x2_t *)v202.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v202.i8, 1), *(float32x2_t *)v202.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v203 = v15[14846] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v203;
      if (v198)
        return 0;
    }
  }
  v204 = (char)v15[14886];
  v205 = a5;
  v205.i32[0] = a6.i32[0] + 7;
  *(float32x2_t *)v205.f32 = vcvt_f32_s32(*(int32x2_t *)v205.f32);
  v205.f32[2] = (float)v57;
  v206.i64[0] = 0x3F0000003F000000;
  v206.i64[1] = 0x3F0000003F000000;
  if (!v15[14886])
  {
    a10.i8[0] = v15[14883];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14884];
    v207 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v207.i32 = (float)v207.i32[0];
    a10.i32[1] = v207.i32[0];
    v207.i8[0] = v15[14885];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v207));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v205 = vaddq_f32(v205, v206);
    v206 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v208 = vaddq_f32(v205, v206);
  if (v204 <= 0)
  {
    v206.i64[0] = *(_QWORD *)v22;
    v206.i32[2] = *(_DWORD *)(v22 + 8);
    v209 = (int8x16_t)vmlsq_lane_f32(v206, v208, v18, 0);
    a10.i64[0] = vextq_s8(v209, v209, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v209.i8, *(float32x2_t *)v209.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v209.i8, 1), *(float32x2_t *)v209.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v210 = v15[14886] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v210;
      if (v204)
        return 0;
    }
  }
  v211 = (char)v15[14926];
  v212 = a5;
  v212.i32[0] = a6.i32[0] + 7;
  *(float32x2_t *)v212.f32 = vcvt_f32_s32(*(int32x2_t *)v212.f32);
  v212.f32[2] = (float)v68;
  v213.i64[0] = 0x3F0000003F000000;
  v213.i64[1] = 0x3F0000003F000000;
  if (!v15[14926])
  {
    a10.i8[0] = v15[14923];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14924];
    v214 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v214.i32 = (float)v214.i32[0];
    a10.i32[1] = v214.i32[0];
    v214.i8[0] = v15[14925];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v214));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v212 = vaddq_f32(v212, v213);
    v213 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v215 = vaddq_f32(v212, v213);
  if (v211 <= 0)
  {
    v213.i64[0] = *(_QWORD *)v22;
    v213.i32[2] = *(_DWORD *)(v22 + 8);
    v216 = (int8x16_t)vmlsq_lane_f32(v213, v215, v18, 0);
    a10.i64[0] = vextq_s8(v216, v216, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v216.i8, *(float32x2_t *)v216.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v216.i8, 1), *(float32x2_t *)v216.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v217 = v15[14926] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v217;
      if (v211)
        return 0;
    }
  }
  v218 = (char)v15[14966];
  *(float32x2_t *)v215.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v35, v96));
  v215.f32[2] = (float)v57;
  v219.i64[0] = 0x3F0000003F000000;
  v219.i64[1] = 0x3F0000003F000000;
  if (!v15[14966])
  {
    a10.i8[0] = v15[14963];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[14964];
    v220 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v220.i32 = (float)v220.i32[0];
    a10.i32[1] = v220.i32[0];
    v220.i8[0] = v15[14965];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v220));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v215 = vaddq_f32(v215, v219);
    v219 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v221 = vaddq_f32(v215, v219);
  if (v218 <= 0)
  {
    v219.i64[0] = *(_QWORD *)v22;
    v219.i32[2] = *(_DWORD *)(v22 + 8);
    v222 = (int8x16_t)vmlsq_lane_f32(v219, v221, v18, 0);
    a10.i64[0] = vextq_s8(v222, v222, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v222.i8, *(float32x2_t *)v222.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v222.i8, 1), *(float32x2_t *)v222.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v223 = v15[14966] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v223;
      if (v218)
        return 0;
    }
  }
  v224 = (char)v15[15006];
  *(float32x2_t *)v221.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v35, v96));
  v221.f32[2] = (float)v68;
  v225.i64[0] = 0x3F0000003F000000;
  v225.i64[1] = 0x3F0000003F000000;
  if (!v15[15006])
  {
    a10.i8[0] = v15[15003];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[15004];
    v226 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v226.i32 = (float)v226.i32[0];
    a10.i32[1] = v226.i32[0];
    v226.i8[0] = v15[15005];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v226));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v221 = vaddq_f32(v221, v225);
    v225 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v227 = vaddq_f32(v221, v225);
  if (v224 <= 0)
  {
    v225.i64[0] = *(_QWORD *)v22;
    v225.i32[2] = *(_DWORD *)(v22 + 8);
    v228 = (int8x16_t)vmlsq_lane_f32(v225, v227, v18, 0);
    a10.i64[0] = vextq_s8(v228, v228, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v228.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.i8, 1), *(float32x2_t *)v228.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v229 = v15[15006] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v229;
      if (v224)
        return 0;
    }
  }
  v230 = (char)v15[15046];
  v231 = a5;
  v231.i32[0] = a6.i32[0] + 6;
  *(float32x2_t *)v231.f32 = vcvt_f32_s32(*(int32x2_t *)v231.f32);
  v231.f32[2] = (float)(v14 + 6);
  v232.i64[0] = 0x3F0000003F000000;
  v232.i64[1] = 0x3F0000003F000000;
  if (!v15[15046])
  {
    a10.i8[0] = v15[15043];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[15044];
    v233 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v233.i32 = (float)v233.i32[0];
    a10.i32[1] = v233.i32[0];
    v233.i8[0] = v15[15045];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v233));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v231 = vaddq_f32(v231, v232);
    v232 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v234 = vaddq_f32(v231, v232);
  if (v230 <= 0)
  {
    v232.i64[0] = *(_QWORD *)v22;
    v232.i32[2] = *(_DWORD *)(v22 + 8);
    v235 = (int8x16_t)vmlsq_lane_f32(v232, v234, v18, 0);
    a10.i64[0] = vextq_s8(v235, v235, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v235.i8, *(float32x2_t *)v235.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v235.i8, 1), *(float32x2_t *)v235.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v236 = v15[15046] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v236;
      if (v230)
        return 0;
    }
  }
  v237 = (char)v15[15086];
  v238 = a5;
  v238.i32[0] = a6.i32[0] + 6;
  *(float32x2_t *)v238.f32 = vcvt_f32_s32(*(int32x2_t *)v238.f32);
  v238.f32[2] = (float)v25;
  v239.i64[0] = 0x3F0000003F000000;
  v239.i64[1] = 0x3F0000003F000000;
  if (!v15[15086])
  {
    a10.i8[0] = v15[15083];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[15084];
    v240 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v240.i32 = (float)v240.i32[0];
    a10.i32[1] = v240.i32[0];
    v240.i8[0] = v15[15085];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v240));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v238 = vaddq_f32(v238, v239);
    v239 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v241 = vaddq_f32(v238, v239);
  if (v237 <= 0)
  {
    v239.i64[0] = *(_QWORD *)v22;
    v239.i32[2] = *(_DWORD *)(v22 + 8);
    v242 = (int8x16_t)vmlsq_lane_f32(v239, v241, v18, 0);
    a10.i64[0] = vextq_s8(v242, v242, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v242.i8, *(float32x2_t *)v242.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v242.i8, 1), *(float32x2_t *)v242.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v243 = v15[15086] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v243;
      if (v237)
        return 0;
    }
  }
  v244 = (char)v15[15126];
  *(float32x2_t *)v241.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v35, v56));
  v241.f32[2] = (float)(v14 + 6);
  v245.i64[0] = 0x3F0000003F000000;
  v245.i64[1] = 0x3F0000003F000000;
  if (!v15[15126])
  {
    a10.i8[0] = v15[15123];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[15124];
    v246 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v246.i32 = (float)v246.i32[0];
    a10.i32[1] = v246.i32[0];
    v246.i8[0] = v15[15125];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v246));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v241 = vaddq_f32(v241, v245);
    v245 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v247 = vaddq_f32(v241, v245);
  if (v244 <= 0)
  {
    v245.i64[0] = *(_QWORD *)v22;
    v245.i32[2] = *(_DWORD *)(v22 + 8);
    v248 = (int8x16_t)vmlsq_lane_f32(v245, v247, v18, 0);
    a10.i64[0] = vextq_s8(v248, v248, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v248.i8, *(float32x2_t *)v248.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v248.i8, 1), *(float32x2_t *)v248.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v249 = v15[15126] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v249;
      if (v244)
        return 0;
    }
  }
  v250 = (char)v15[15166];
  *(float32x2_t *)v247.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v35, v56));
  v247.f32[2] = (float)v25;
  v251.i64[0] = 0x3F0000003F000000;
  v251.i64[1] = 0x3F0000003F000000;
  if (!v15[15166])
  {
    a10.i8[0] = v15[15163];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[15164];
    v252 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v252.i32 = (float)v252.i32[0];
    a10.i32[1] = v252.i32[0];
    v252.i8[0] = v15[15165];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v252));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v247 = vaddq_f32(v247, v251);
    v251 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v253 = vaddq_f32(v247, v251);
  if (v250 <= 0)
  {
    v251.i64[0] = *(_QWORD *)v22;
    v251.i32[2] = *(_DWORD *)(v22 + 8);
    v254 = (int8x16_t)vmlsq_lane_f32(v251, v253, v18, 0);
    a10.i64[0] = vextq_s8(v254, v254, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v254.i8, *(float32x2_t *)v254.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v254.i8, 1), *(float32x2_t *)v254.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v255 = v15[15166] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v255;
      if (v250)
        return 0;
    }
  }
  v256 = (char)v15[15206];
  v257 = a5;
  v257.i32[0] = a6.i32[0] + 7;
  *(float32x2_t *)v257.f32 = vcvt_f32_s32(*(int32x2_t *)v257.f32);
  v257.f32[2] = (float)(v14 + 6);
  v258.i64[0] = 0x3F0000003F000000;
  v258.i64[1] = 0x3F0000003F000000;
  if (!v15[15206])
  {
    a10.i8[0] = v15[15203];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[15204];
    v259 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v259.i32 = (float)v259.i32[0];
    a10.i32[1] = v259.i32[0];
    v259.i8[0] = v15[15205];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v259));
    v10.f32[0] = (float)v10.i32[0];
    a10.i32[2] = v10.i32[0];
    v257 = vaddq_f32(v257, v258);
    v258 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v260 = vaddq_f32(v257, v258);
  if (v256 <= 0)
  {
    v258.i64[0] = *(_QWORD *)v22;
    v258.i32[2] = *(_DWORD *)(v22 + 8);
    v261 = (int8x16_t)vmlsq_lane_f32(v258, v260, v18, 0);
    a10.i64[0] = vextq_s8(v261, v261, 8uLL).u64[0];
    *(float32x2_t *)v10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v261.i8, *(float32x2_t *)v261.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v261.i8, 1), *(float32x2_t *)v261.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
    if (v10.f32[0] <= v19.f32[0])
    {
      v262 = v15[15206] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v262;
      if (v256)
        return 0;
    }
  }
  v263 = (char)v15[15246];
  v264 = a5;
  v264.i32[0] = a6.i32[0] + 7;
  *(float32x2_t *)v264.f32 = vcvt_f32_s32(*(int32x2_t *)v264.f32);
  v264.f32[2] = (float)v25;
  v265.i64[0] = 0x3F0000003F000000;
  v265.i64[1] = 0x3F0000003F000000;
  if (!v15[15246])
  {
    a10.i8[0] = v15[15243];
    a10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32));
    a10.f32[0] = (float)a10.i32[0];
    v10.i8[0] = v15[15244];
    v266 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.f32)).u64[0];
    *(float *)v266.i32 = (float)v266.i32[0];
    a10.i32[1] = v266.i32[0];
    v266.i8[0] = v15[15245];
    v10 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v266));
    a10.f32[2] = (float)v10.i32[0];
    v264 = vaddq_f32(v264, (float32x4_t)v265);
    v265 = (int8x16_t)vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v267 = vaddq_f32(v264, (float32x4_t)v265);
  if (v263 <= 0)
  {
    v265.i64[0] = *(_QWORD *)v22;
    v265.i32[2] = *(_DWORD *)(v22 + 8);
    v265 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v265, v267, v18, 0);
    a10.i64[0] = vextq_s8(v265, v265, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v265.i8, *(float32x2_t *)v265.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v265.i8, 1), *(float32x2_t *)v265.i8, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32).f32[0] <= v19.f32[0])
    {
      v268 = v15[15246] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v268;
      if (v263)
        return 0;
    }
  }
  v269 = (char)v15[15286];
  *(float32x2_t *)v267.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v35, v96));
  v267.f32[2] = (float)(v14 + 6);
  v270.i64[0] = 0x3F0000003F000000;
  v270.i64[1] = 0x3F0000003F000000;
  if (v15[15286])
  {
    v271 = vaddq_f32(v267, v270);
  }
  else
  {
    v265.i8[0] = v15[15283];
    v265 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v265.i8));
    *(float *)v265.i32 = (float)v265.i32[0];
    a10.i8[0] = v15[15284];
    v272 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32)).u64[0];
    *(float *)v272.i32 = (float)v272.i32[0];
    v265.i32[1] = v272.i32[0];
    v272.i8[0] = v15[15285];
    a10.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v272)).u64[0];
    a10.f32[0] = (float)a10.i32[0];
    v265.i32[2] = a10.i32[0];
    v273 = vaddq_f32(v267, v270);
    v267 = vmulq_f32((float32x4_t)v265, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v271 = vaddq_f32(v273, v267);
  }
  if (v269 <= 0)
  {
    v267.i64[0] = *(_QWORD *)v22;
    v267.i32[2] = *(_DWORD *)(v22 + 8);
    v274 = (int8x16_t)vmlsq_lane_f32(v267, v271, v18, 0);
    v265.i64[0] = vextq_s8(v274, v274, 8uLL).u64[0];
    *(float32x2_t *)a10.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v274.i8, *(float32x2_t *)v274.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v274.i8, 1), *(float32x2_t *)v274.i8, 1), *(float32x2_t *)v265.i8, *(float32x2_t *)v265.i8);
    if (a10.f32[0] <= v19.f32[0])
    {
      v275 = v15[15286] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v275;
      if (v269)
        return 0;
    }
  }
  v276 = (char)v15[15326];
  *(float32x2_t *)v271.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v35, v96));
  v271.f32[2] = (float)v25;
  v277.i64[0] = 0x3F0000003F000000;
  v277.i64[1] = 0x3F0000003F000000;
  if (!v15[15326])
  {
    v265.i8[0] = v15[15323];
    v278 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v265.i8));
    v278.f32[0] = (float)v278.i32[0];
    a10.i8[0] = v15[15324];
    v279 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32)).u64[0];
    *(float *)v279.i32 = (float)v279.i32[0];
    v278.i32[1] = v279.i32[0];
    v279.i8[0] = v15[15325];
    v278.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v279)).i32[0];
    v271 = vaddq_f32(v271, (float32x4_t)v277);
    v277 = (int8x16_t)vmulq_f32(v278, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v280 = vaddq_f32(v271, (float32x4_t)v277);
  if (v276 <= 0)
  {
    v277.i64[0] = *(_QWORD *)v22;
    v277.i32[2] = *(_DWORD *)(v22 + 8);
    v277 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v277, v280, v18, 0);
    v281 = (float32x2_t)vextq_s8(v277, v277, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v277.i8, *(float32x2_t *)v277.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v277.i8, 1), *(float32x2_t *)v277.i8, 1), v281, v281).f32[0] <= v19.f32[0])
    {
      v282 = v15[15326] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v282;
      if (v276)
        return 0;
    }
  }
  *(int32x2_t *)v280.f32 = vadd_s32(*(int32x2_t *)a6.f32, (int32x2_t)0x400000004);
  v283 = (char)v15[15366];
  *(float32x2_t *)v10.f32 = vcvt_f32_s32(*(int32x2_t *)v280.f32);
  *(float *)v277.i32 = (float)v14;
  v284 = v10;
  v284.f32[2] = (float)v14;
  v285.i64[0] = 0x3F0000003F000000;
  v285.i64[1] = 0x3F0000003F000000;
  if (!v15[15366])
  {
    v11.i8[0] = v15[15363];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v15[15364];
    v286 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v286.i32 = (float)v286.i32[0];
    v11.i32[1] = v286.i32[0];
    v286.i8[0] = v15[15365];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v286)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v284 = vaddq_f32(v284, v285);
    v285 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v287 = vaddq_f32(v284, v285);
  if (v283 <= 0)
  {
    v285.i64[0] = *(_QWORD *)v22;
    v285.i32[2] = *(_DWORD *)(v22 + 8);
    v288 = (int8x16_t)vmlsq_lane_f32(v285, v287, v18, 0);
    v11.i64[0] = vextq_s8(v288, v288, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v288.i8, *(float32x2_t *)v288.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v288.i8, 1), *(float32x2_t *)v288.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v19.f32[0])
    {
      v289 = v15[15366] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v289;
      if (v283)
        return 0;
    }
  }
  v290 = v14 + 1;
  v291 = (char)v15[15406];
  v292 = v10;
  v292.f32[2] = (float)(v14 + 1);
  v293.i64[0] = 0x3F0000003F000000;
  v293.i64[1] = 0x3F0000003F000000;
  if (v15[15406])
  {
    v294 = vaddq_f32(v292, v293);
  }
  else
  {
    v11.i8[0] = v15[15403];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v15[15404];
    v295 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v295.i32 = (float)v295.i32[0];
    v11.i32[1] = v295.i32[0];
    v295.i8[0] = v15[15405];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v295)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v296 = vaddq_f32(v292, v293);
    v292 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v294 = vaddq_f32(v296, v292);
  }
  if (v291 <= 0)
  {
    v292.i64[0] = *(_QWORD *)v22;
    v292.i32[2] = *(_DWORD *)(v22 + 8);
    v297 = (int8x16_t)vmlsq_lane_f32(v292, v294, v18, 0);
    v11.i64[0] = vextq_s8(v297, v297, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v297.i8, *(float32x2_t *)v297.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v297.i8, 1), *(float32x2_t *)v297.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v19.f32[0])
    {
      v298 = v15[15406] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v298;
      if (v291)
        return 0;
    }
  }
  v299 = a6.i32[1] + 5;
  v300 = (char)v15[15446];
  v301 = v280;
  v301.i32[1] = a6.i32[1] + 5;
  *(float32x2_t *)v301.f32 = vcvt_f32_s32(*(int32x2_t *)v301.f32);
  v301.f32[2] = (float)v14;
  v302.i64[0] = 0x3F0000003F000000;
  v302.i64[1] = 0x3F0000003F000000;
  if (!v15[15446])
  {
    v11.i8[0] = v15[15443];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v15[15444];
    v303 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v303.i32 = (float)v303.i32[0];
    v11.i32[1] = v303.i32[0];
    v303.i8[0] = v15[15445];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v303)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v301 = vaddq_f32(v301, v302);
    v302 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v304 = vaddq_f32(v301, v302);
  if (v300 <= 0)
  {
    v302.i64[0] = *(_QWORD *)v22;
    v302.i32[2] = *(_DWORD *)(v22 + 8);
    v305 = (int8x16_t)vmlsq_lane_f32(v302, v304, v18, 0);
    v11.i64[0] = vextq_s8(v305, v305, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v305.i8, *(float32x2_t *)v305.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v305.i8, 1), *(float32x2_t *)v305.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v19.f32[0])
    {
      v306 = v15[15446] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v306;
      if (v300)
        return 0;
    }
  }
  v307 = (char)v15[15486];
  v308 = v280;
  v308.i32[1] = a6.i32[1] + 5;
  *(float32x2_t *)v308.f32 = vcvt_f32_s32(*(int32x2_t *)v308.f32);
  v308.f32[2] = (float)v290;
  v309.i64[0] = 0x3F0000003F000000;
  v309.i64[1] = 0x3F0000003F000000;
  if (!v15[15486])
  {
    v11.i8[0] = v15[15483];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v15[15484];
    v310 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v310.i32 = (float)v310.i32[0];
    v11.i32[1] = v310.i32[0];
    v310.i8[0] = v15[15485];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v310)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v308 = vaddq_f32(v308, v309);
    v309 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v311 = vaddq_f32(v308, v309);
  if (v307 <= 0)
  {
    v309.i64[0] = *(_QWORD *)v22;
    v309.i32[2] = *(_DWORD *)(v22 + 8);
    v312 = (int8x16_t)vmlsq_lane_f32(v309, v311, v18, 0);
    v11.i64[0] = vextq_s8(v312, v312, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v312.i8, *(float32x2_t *)v312.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v312.i8, 1), *(float32x2_t *)v312.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v19.f32[0])
    {
      v313 = v15[15486] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v313;
      if (v307)
        return 0;
    }
  }
  v314 = (char)v15[15526];
  *(float32x2_t *)v311.f32 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)a6.f32, (int32x2_t)0x400000005));
  v311.f32[2] = (float)v14;
  v315.i64[0] = 0x3F0000003F000000;
  v315.i64[1] = 0x3F0000003F000000;
  if (!v15[15526])
  {
    v11.i8[0] = v15[15523];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v15[15524];
    v316 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v316.i32 = (float)v316.i32[0];
    v11.i32[1] = v316.i32[0];
    v316.i8[0] = v15[15525];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v316)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v311 = vaddq_f32(v311, v315);
    v315 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v317 = vaddq_f32(v311, v315);
  if (v314 <= 0)
  {
    v315.i64[0] = *(_QWORD *)v22;
    v315.i32[2] = *(_DWORD *)(v22 + 8);
    v318 = (int8x16_t)vmlsq_lane_f32(v315, v317, v18, 0);
    v11.i64[0] = vextq_s8(v318, v318, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v318.i8, *(float32x2_t *)v318.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v318.i8, 1), *(float32x2_t *)v318.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v19.f32[0])
    {
      v319 = v15[15526] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v319;
      if (v314)
        return 0;
    }
  }
  v320 = (char)v15[15566];
  *(float32x2_t *)v317.f32 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)a6.f32, (int32x2_t)0x400000005));
  v317.f32[2] = (float)v290;
  v321.i64[0] = 0x3F0000003F000000;
  v321.i64[1] = 0x3F0000003F000000;
  if (!v15[15566])
  {
    v11.i8[0] = v15[15563];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v15[15564];
    v322 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v322.i32 = (float)v322.i32[0];
    v11.i32[1] = v322.i32[0];
    v322.i8[0] = v15[15565];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v322)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v317 = vaddq_f32(v317, v321);
    v321 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v323 = vaddq_f32(v317, v321);
  if (v320 <= 0)
  {
    v321.i64[0] = *(_QWORD *)v22;
    v321.i32[2] = *(_DWORD *)(v22 + 8);
    v324 = (int8x16_t)vmlsq_lane_f32(v321, v323, v18, 0);
    v11.i64[0] = vextq_s8(v324, v324, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v324.i8, *(float32x2_t *)v324.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v324.i8, 1), *(float32x2_t *)v324.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v19.f32[0])
    {
      v325 = v15[15566] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v325;
      if (v320)
        return 0;
    }
  }
  v326 = (char)v15[15606];
  v327 = a5;
  v327.i32[1] = a6.i32[1] + 5;
  *(float32x2_t *)v327.f32 = vcvt_f32_s32(*(int32x2_t *)v327.f32);
  v327.f32[2] = (float)v14;
  v328.i64[0] = 0x3F0000003F000000;
  v328.i64[1] = 0x3F0000003F000000;
  if (!v15[15606])
  {
    v11.i8[0] = v15[15603];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v15[15604];
    v329 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v329.i32 = (float)v329.i32[0];
    v11.i32[1] = v329.i32[0];
    v329.i8[0] = v15[15605];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v329)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v327 = vaddq_f32(v327, v328);
    v328 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v330 = vaddq_f32(v327, v328);
  if (v326 <= 0)
  {
    v328.i64[0] = *(_QWORD *)v22;
    v328.i32[2] = *(_DWORD *)(v22 + 8);
    v331 = (int8x16_t)vmlsq_lane_f32(v328, v330, v18, 0);
    v11.i64[0] = vextq_s8(v331, v331, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v331.i8, *(float32x2_t *)v331.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v331.i8, 1), *(float32x2_t *)v331.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v19.f32[0])
    {
      v332 = v15[15606] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v332;
      if (v326)
        return 0;
    }
  }
  v333 = (char)v15[15646];
  v334 = a5;
  v334.i32[1] = a6.i32[1] + 5;
  *(float32x2_t *)v334.f32 = vcvt_f32_s32(*(int32x2_t *)v334.f32);
  v334.f32[2] = (float)v290;
  v335.i64[0] = 0x3F0000003F000000;
  v335.i64[1] = 0x3F0000003F000000;
  if (!v15[15646])
  {
    v11.i8[0] = v15[15643];
    v336 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v336.f32[0] = (float)v336.i32[0];
    v12.i8[0] = v15[15644];
    v337 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v337.i32 = (float)v337.i32[0];
    v336.i32[1] = v337.i32[0];
    v337.i8[0] = v15[15645];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v337)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v336.i32[2] = v12.i32[0];
    v334 = vaddq_f32(v334, (float32x4_t)v335);
    v335 = (int8x16_t)vmulq_f32(v336, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v338 = vaddq_f32(v334, (float32x4_t)v335);
  if (v333 <= 0)
  {
    v335.i64[0] = *(_QWORD *)v22;
    v335.i32[2] = *(_DWORD *)(v22 + 8);
    v335 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v335, v338, v18, 0);
    v339 = (float32x2_t)vextq_s8(v335, v335, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v335.i8, *(float32x2_t *)v335.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v335.i8, 1), *(float32x2_t *)v335.i8, 1), v339, v339);
    if (v12.f32[0] <= v19.f32[0])
    {
      v340 = v15[15646] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v340;
      if (v333)
        return 0;
    }
  }
  v341 = (char)v15[15686];
  *(float *)v335.i32 = (float)(v14 + 2);
  v342 = v10;
  v342.f32[2] = *(float *)v335.i32;
  v343.i64[0] = 0x3F0000003F000000;
  v343.i64[1] = 0x3F0000003F000000;
  if (!v15[15686])
  {
    v12.i8[0] = v15[15683];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v15[15684];
    v344 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v344.i32 = (float)v344.i32[0];
    v12.i32[1] = v344.i32[0];
    v344.i8[0] = v15[15685];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v344)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v342 = vaddq_f32(v342, v343);
    v343 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v345 = vaddq_f32(v342, v343);
  if (v341 <= 0)
  {
    v343.i64[0] = *(_QWORD *)v22;
    v343.i32[2] = *(_DWORD *)(v22 + 8);
    v346 = (int8x16_t)vmlsq_lane_f32(v343, v345, v18, 0);
    *(int32x2_t *)v345.f32 = vdup_lane_s32(*(int32x2_t *)v346.i8, 1);
    v12.i64[0] = vextq_s8(v346, v346, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v346.i8, *(float32x2_t *)v346.i8), *(float32x2_t *)v345.f32, *(float32x2_t *)v346.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v19.f32[0])
    {
      v347 = v15[15686] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v347;
      if (v341)
        return 0;
    }
  }
  v348 = v14 + 3;
  v349 = (char)v15[15726];
  v345.f32[0] = (float)v348;
  v10.f32[2] = (float)v348;
  v350.i64[0] = 0x3F0000003F000000;
  v350.i64[1] = 0x3F0000003F000000;
  if (!v15[15726])
  {
    v12.i8[0] = v15[15723];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v15[15724];
    v351 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v351.i32 = (float)v351.i32[0];
    v12.i32[1] = v351.i32[0];
    v351.i8[0] = v15[15725];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v351)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v10 = vaddq_f32(v10, v350);
    v350 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v352 = vaddq_f32(v10, v350);
  if (v349 <= 0)
  {
    v350.i64[0] = *(_QWORD *)v22;
    v350.i32[2] = *(_DWORD *)(v22 + 8);
    v353 = (int8x16_t)vmlsq_lane_f32(v350, v352, v18, 0);
    v12.i64[0] = vextq_s8(v353, v353, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v353.i8, *(float32x2_t *)v353.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v353.i8, 1), *(float32x2_t *)v353.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v19.f32[0])
    {
      v354 = v15[15726] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v354;
      if (v349)
        return 0;
    }
  }
  v355 = (char)v15[15766];
  v356 = v280;
  v356.i32[1] = a6.i32[1] + 5;
  *(float32x2_t *)v356.f32 = vcvt_f32_s32(*(int32x2_t *)v356.f32);
  v356.i32[2] = v335.i32[0];
  v357.i64[0] = 0x3F0000003F000000;
  v357.i64[1] = 0x3F0000003F000000;
  if (!v15[15766])
  {
    v12.i8[0] = v15[15763];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v15[15764];
    v358 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v358.i32 = (float)v358.i32[0];
    v12.i32[1] = v358.i32[0];
    v358.i8[0] = v15[15765];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v358)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v356 = vaddq_f32(v356, v357);
    v357 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v359 = vaddq_f32(v356, v357);
  if (v355 <= 0)
  {
    v357.i64[0] = *(_QWORD *)v22;
    v357.i32[2] = *(_DWORD *)(v22 + 8);
    v360 = (int8x16_t)vmlsq_lane_f32(v357, v359, v18, 0);
    v12.i64[0] = vextq_s8(v360, v360, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v360.i8, *(float32x2_t *)v360.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v360.i8, 1), *(float32x2_t *)v360.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v19.f32[0])
    {
      v361 = v15[15766] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v361;
      if (v355)
        return 0;
    }
  }
  v362 = (char)v15[15806];
  v363 = v280;
  v363.i32[1] = a6.i32[1] + 5;
  *(float32x2_t *)v363.f32 = vcvt_f32_s32(*(int32x2_t *)v363.f32);
  v363.i32[2] = v345.i32[0];
  v364.i64[0] = 0x3F0000003F000000;
  v364.i64[1] = 0x3F0000003F000000;
  if (!v15[15806])
  {
    v12.i8[0] = v15[15803];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v15[15804];
    v365 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v365.i32 = (float)v365.i32[0];
    v12.i32[1] = v365.i32[0];
    v365.i8[0] = v15[15805];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v365)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v363 = vaddq_f32(v363, v364);
    v364 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v366 = vaddq_f32(v363, v364);
  if (v362 <= 0)
  {
    v364.i64[0] = *(_QWORD *)v22;
    v364.i32[2] = *(_DWORD *)(v22 + 8);
    v367 = (int8x16_t)vmlsq_lane_f32(v364, v366, v18, 0);
    v12.i64[0] = vextq_s8(v367, v367, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v367.i8, *(float32x2_t *)v367.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v367.i8, 1), *(float32x2_t *)v367.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v19.f32[0])
    {
      v368 = v15[15806] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v368;
      if (v362)
        return 0;
    }
  }
  v369 = (char)v15[15846];
  *(float32x2_t *)v366.f32 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)a6.f32, (int32x2_t)0x400000005));
  v366.i32[2] = v335.i32[0];
  v370.i64[0] = 0x3F0000003F000000;
  v370.i64[1] = 0x3F0000003F000000;
  if (!v15[15846])
  {
    v12.i8[0] = v15[15843];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v15[15844];
    v371 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v371.i32 = (float)v371.i32[0];
    v12.i32[1] = v371.i32[0];
    v371.i8[0] = v15[15845];
    v12.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v371)).i32[0];
    v366 = vaddq_f32(v366, (float32x4_t)v370);
    v370 = (int8x16_t)vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v372 = vaddq_f32(v366, (float32x4_t)v370);
  if (v369 <= 0)
  {
    v370.i64[0] = *(_QWORD *)v22;
    v370.i32[2] = *(_DWORD *)(v22 + 8);
    v370 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v370, v372, v18, 0);
    v12.i64[0] = vextq_s8(v370, v370, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v370.i8, 1), *(float32x2_t *)v370.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32).f32[0] <= v19.f32[0])
    {
      v373 = v15[15846] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v373;
      if (v369)
        return 0;
    }
  }
  v374 = (char)v15[15886];
  *(float32x2_t *)a6.f32 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)a6.f32, (int32x2_t)0x400000005));
  a6.i32[2] = v345.i32[0];
  v375.i64[0] = 0x3F0000003F000000;
  v375.i64[1] = 0x3F0000003F000000;
  if (!v15[15886])
  {
    v370.i8[0] = v15[15883];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[15884];
    v376 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v376.i32 = (float)v376.i32[0];
    v370.i32[1] = v376.i32[0];
    v376.i8[0] = v15[15885];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v376)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    a6 = vaddq_f32(a6, v375);
    v375 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v377 = vaddq_f32(a6, v375);
  if (v374 <= 0)
  {
    v375.i64[0] = *(_QWORD *)v22;
    v375.i32[2] = *(_DWORD *)(v22 + 8);
    v378 = (int8x16_t)vmlsq_lane_f32(v375, v377, v18, 0);
    v370.i64[0] = vextq_s8(v378, v378, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v378.i8, *(float32x2_t *)v378.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v378.i8, 1), *(float32x2_t *)v378.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v379 = v15[15886] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v379;
      if (v374)
        return 0;
    }
  }
  v380 = (char)v15[15926];
  v381 = a5;
  v381.i32[1] = v299;
  *(float32x2_t *)v381.f32 = vcvt_f32_s32(*(int32x2_t *)v381.f32);
  v381.i32[2] = v335.i32[0];
  v382.i64[0] = 0x3F0000003F000000;
  v382.i64[1] = 0x3F0000003F000000;
  if (!v15[15926])
  {
    v370.i8[0] = v15[15923];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[15924];
    v383 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v383.i32 = (float)v383.i32[0];
    v370.i32[1] = v383.i32[0];
    v383.i8[0] = v15[15925];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v383)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v381 = vaddq_f32(v381, v382);
    v382 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v384 = vaddq_f32(v381, v382);
  if (v380 <= 0)
  {
    v382.i64[0] = *(_QWORD *)v22;
    v382.i32[2] = *(_DWORD *)(v22 + 8);
    v385 = (int8x16_t)vmlsq_lane_f32(v382, v384, v18, 0);
    v370.i64[0] = vextq_s8(v385, v385, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v385.i8, *(float32x2_t *)v385.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v385.i8, 1), *(float32x2_t *)v385.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v386 = v15[15926] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v386;
      if (v380)
        return 0;
    }
  }
  v387 = (char)v15[15966];
  v388 = a5;
  v388.i32[1] = v299;
  *(float32x2_t *)v388.f32 = vcvt_f32_s32(*(int32x2_t *)v388.f32);
  v388.i32[2] = v345.i32[0];
  v389.i64[0] = 0x3F0000003F000000;
  v389.i64[1] = 0x3F0000003F000000;
  if (!v15[15966])
  {
    v370.i8[0] = v15[15963];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[15964];
    v390 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v390.i32 = (float)v390.i32[0];
    v370.i32[1] = v390.i32[0];
    v390.i8[0] = v15[15965];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v390)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v388 = vaddq_f32(v388, v389);
    v389 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v391 = vaddq_f32(v388, v389);
  if (v387 <= 0)
  {
    v389.i64[0] = *(_QWORD *)v22;
    v389.i32[2] = *(_DWORD *)(v22 + 8);
    v392 = (int8x16_t)vmlsq_lane_f32(v389, v391, v18, 0);
    v370.i64[0] = vextq_s8(v392, v392, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v392.i8, *(float32x2_t *)v392.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v392.i8, 1), *(float32x2_t *)v392.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v393 = v15[15966] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v393;
      if (v387)
        return 0;
    }
  }
  v394 = v34 + 6;
  v395 = (char)v15[16006];
  v396 = v280;
  v396.i32[1] = v34 + 6;
  *(float32x2_t *)v396.f32 = vcvt_f32_s32(*(int32x2_t *)v396.f32);
  v396.i32[2] = v277.i32[0];
  v397.i64[0] = 0x3F0000003F000000;
  v397.i64[1] = 0x3F0000003F000000;
  if (!v15[16006])
  {
    v370.i8[0] = v15[16003];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16004];
    v398 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v398.i32 = (float)v398.i32[0];
    v370.i32[1] = v398.i32[0];
    v398.i8[0] = v15[16005];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v398)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v396 = vaddq_f32(v396, v397);
    v397 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v399 = vaddq_f32(v396, v397);
  if (v395 <= 0)
  {
    v397.i64[0] = *(_QWORD *)v22;
    v397.i32[2] = *(_DWORD *)(v22 + 8);
    v400 = (int8x16_t)vmlsq_lane_f32(v397, v399, v18, 0);
    v370.i64[0] = vextq_s8(v400, v400, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v400.i8, *(float32x2_t *)v400.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v400.i8, 1), *(float32x2_t *)v400.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v401 = v15[16006] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v401;
      if (v395)
        return 0;
    }
  }
  v402 = (char)v15[16046];
  v403 = v280;
  v403.i32[1] = v34 + 6;
  *(float32x2_t *)v403.f32 = vcvt_f32_s32(*(int32x2_t *)v403.f32);
  v403.f32[2] = (float)v290;
  v404.i64[0] = 0x3F0000003F000000;
  v404.i64[1] = 0x3F0000003F000000;
  if (!v15[16046])
  {
    v370.i8[0] = v15[16043];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16044];
    v405 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v405.i32 = (float)v405.i32[0];
    v370.i32[1] = v405.i32[0];
    v405.i8[0] = v15[16045];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v405)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v403 = vaddq_f32(v403, v404);
    v404 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v406 = vaddq_f32(v403, v404);
  if (v402 <= 0)
  {
    v404.i64[0] = *(_QWORD *)v22;
    v404.i32[2] = *(_DWORD *)(v22 + 8);
    v407 = (int8x16_t)vmlsq_lane_f32(v404, v406, v18, 0);
    v370.i64[0] = vextq_s8(v407, v407, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v407.i8, *(float32x2_t *)v407.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v407.i8, 1), *(float32x2_t *)v407.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v408 = v15[16046] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v408;
      if (v402)
        return 0;
    }
  }
  v409 = v34 + 7;
  v410 = (char)v15[16086];
  v411 = v280;
  v411.i32[1] = v409;
  *(float32x2_t *)v411.f32 = vcvt_f32_s32(*(int32x2_t *)v411.f32);
  v411.i32[2] = v277.i32[0];
  v412.i64[0] = 0x3F0000003F000000;
  v412.i64[1] = 0x3F0000003F000000;
  if (!v15[16086])
  {
    v370.i8[0] = v15[16083];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16084];
    v413 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v413.i32 = (float)v413.i32[0];
    v370.i32[1] = v413.i32[0];
    v413.i8[0] = v15[16085];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v413)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v411 = vaddq_f32(v411, v412);
    v412 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v414 = vaddq_f32(v411, v412);
  if (v410 <= 0)
  {
    v412.i64[0] = *(_QWORD *)v22;
    v412.i32[2] = *(_DWORD *)(v22 + 8);
    v415 = (int8x16_t)vmlsq_lane_f32(v412, v414, v18, 0);
    v370.i64[0] = vextq_s8(v415, v415, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v415.i8, *(float32x2_t *)v415.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v415.i8, 1), *(float32x2_t *)v415.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v416 = v15[16086] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v416;
      if (v410)
        return 0;
    }
  }
  v417 = (char)v15[16126];
  v418 = v280;
  v418.i32[1] = v409;
  *(float32x2_t *)v418.f32 = vcvt_f32_s32(*(int32x2_t *)v418.f32);
  v418.f32[2] = (float)v290;
  v419.i64[0] = 0x3F0000003F000000;
  v419.i64[1] = 0x3F0000003F000000;
  if (!v15[16126])
  {
    v370.i8[0] = v15[16123];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16124];
    v420 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v420.i32 = (float)v420.i32[0];
    v370.i32[1] = v420.i32[0];
    v420.i8[0] = v15[16125];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v420)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v418 = vaddq_f32(v418, v419);
    v419 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v421 = vaddq_f32(v418, v419);
  if (v417 <= 0)
  {
    v419.i64[0] = *(_QWORD *)v22;
    v419.i32[2] = *(_DWORD *)(v22 + 8);
    v422 = (int8x16_t)vmlsq_lane_f32(v419, v421, v18, 0);
    v370.i64[0] = vextq_s8(v422, v422, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v422.i8, *(float32x2_t *)v422.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v422.i8, 1), *(float32x2_t *)v422.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v423 = v15[16126] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v423;
      if (v417)
        return 0;
    }
  }
  v424 = (char)v15[16166];
  v425 = a5;
  v425.i32[1] = v394;
  *(float32x2_t *)v425.f32 = vcvt_f32_s32(*(int32x2_t *)v425.f32);
  v425.i32[2] = v277.i32[0];
  v426.i64[0] = 0x3F0000003F000000;
  v426.i64[1] = 0x3F0000003F000000;
  if (!v15[16166])
  {
    v370.i8[0] = v15[16163];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16164];
    v427 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v427.i32 = (float)v427.i32[0];
    v370.i32[1] = v427.i32[0];
    v427.i8[0] = v15[16165];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v427)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v425 = vaddq_f32(v425, v426);
    v426 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v428 = vaddq_f32(v425, v426);
  if (v424 <= 0)
  {
    v426.i64[0] = *(_QWORD *)v22;
    v426.i32[2] = *(_DWORD *)(v22 + 8);
    v429 = (int8x16_t)vmlsq_lane_f32(v426, v428, v18, 0);
    v370.i64[0] = vextq_s8(v429, v429, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v429.i8, *(float32x2_t *)v429.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v429.i8, 1), *(float32x2_t *)v429.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v430 = v15[16166] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v430;
      if (v424)
        return 0;
    }
  }
  v431 = (char)v15[16206];
  v432 = a5;
  v432.i32[1] = v394;
  *(float32x2_t *)v432.f32 = vcvt_f32_s32(*(int32x2_t *)v432.f32);
  v432.f32[2] = (float)v290;
  v433.i64[0] = 0x3F0000003F000000;
  v433.i64[1] = 0x3F0000003F000000;
  if (!v15[16206])
  {
    v370.i8[0] = v15[16203];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16204];
    v434 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v434.i32 = (float)v434.i32[0];
    v370.i32[1] = v434.i32[0];
    v434.i8[0] = v15[16205];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v434)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v432 = vaddq_f32(v432, v433);
    v433 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v435 = vaddq_f32(v432, v433);
  if (v431 <= 0)
  {
    v433.i64[0] = *(_QWORD *)v22;
    v433.i32[2] = *(_DWORD *)(v22 + 8);
    v436 = (int8x16_t)vmlsq_lane_f32(v433, v435, v18, 0);
    v370.i64[0] = vextq_s8(v436, v436, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v436.i8, *(float32x2_t *)v436.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v436.i8, 1), *(float32x2_t *)v436.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v437 = v15[16206] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v437;
      if (v431)
        return 0;
    }
  }
  v438 = (char)v15[16246];
  v439 = a5;
  v439.i32[1] = v409;
  *(float32x2_t *)v439.f32 = vcvt_f32_s32(*(int32x2_t *)v439.f32);
  v439.i32[2] = v277.i32[0];
  v440.i64[0] = 0x3F0000003F000000;
  v440.i64[1] = 0x3F0000003F000000;
  if (!v15[16246])
  {
    v370.i8[0] = v15[16243];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16244];
    v441 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v441.i32 = (float)v441.i32[0];
    v370.i32[1] = v441.i32[0];
    v441.i8[0] = v15[16245];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v441)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v439 = vaddq_f32(v439, v440);
    v440 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v442 = vaddq_f32(v439, v440);
  if (v438 <= 0)
  {
    v440.i64[0] = *(_QWORD *)v22;
    v440.i32[2] = *(_DWORD *)(v22 + 8);
    v443 = (int8x16_t)vmlsq_lane_f32(v440, v442, v18, 0);
    v370.i64[0] = vextq_s8(v443, v443, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v443.i8, *(float32x2_t *)v443.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v443.i8, 1), *(float32x2_t *)v443.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v444 = v15[16246] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v444;
      if (v438)
        return 0;
    }
  }
  v445 = (char)v15[16286];
  v446 = a5;
  v446.i32[1] = v409;
  *(float32x2_t *)v446.f32 = vcvt_f32_s32(*(int32x2_t *)v446.f32);
  v446.f32[2] = (float)v290;
  v447.i64[0] = 0x3F0000003F000000;
  v447.i64[1] = 0x3F0000003F000000;
  if (!v15[16286])
  {
    v370.i8[0] = v15[16283];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16284];
    v448 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v448.i32 = (float)v448.i32[0];
    v370.i32[1] = v448.i32[0];
    v448.i8[0] = v15[16285];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v448)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v446 = vaddq_f32(v446, v447);
    v447 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v449 = vaddq_f32(v446, v447);
  if (v445 <= 0)
  {
    v447.i64[0] = *(_QWORD *)v22;
    v447.i32[2] = *(_DWORD *)(v22 + 8);
    v450 = (int8x16_t)vmlsq_lane_f32(v447, v449, v18, 0);
    v370.i64[0] = vextq_s8(v450, v450, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v450.i8, *(float32x2_t *)v450.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v450.i8, 1), *(float32x2_t *)v450.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v451 = v15[16286] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v451;
      if (v445)
        return 0;
    }
  }
  v452 = (char)v15[16326];
  v453 = v280;
  v453.i32[1] = v394;
  *(float32x2_t *)v453.f32 = vcvt_f32_s32(*(int32x2_t *)v453.f32);
  v453.i32[2] = v335.i32[0];
  v454.i64[0] = 0x3F0000003F000000;
  v454.i64[1] = 0x3F0000003F000000;
  if (!v15[16326])
  {
    v370.i8[0] = v15[16323];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16324];
    v455 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v455.i32 = (float)v455.i32[0];
    v370.i32[1] = v455.i32[0];
    v455.i8[0] = v15[16325];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v455)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v453 = vaddq_f32(v453, v454);
    v454 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v456 = vaddq_f32(v453, v454);
  if (v452 <= 0)
  {
    v454.i64[0] = *(_QWORD *)v22;
    v454.i32[2] = *(_DWORD *)(v22 + 8);
    v457 = (int8x16_t)vmlsq_lane_f32(v454, v456, v18, 0);
    v370.i64[0] = vextq_s8(v457, v457, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v457.i8, *(float32x2_t *)v457.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v457.i8, 1), *(float32x2_t *)v457.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v458 = v15[16326] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v458;
      if (v452)
        return 0;
    }
  }
  v459 = (char)v15[16366];
  v460 = v280;
  v460.i32[1] = v394;
  *(float32x2_t *)v460.f32 = vcvt_f32_s32(*(int32x2_t *)v460.f32);
  v460.i32[2] = v345.i32[0];
  v461.i64[0] = 0x3F0000003F000000;
  v461.i64[1] = 0x3F0000003F000000;
  if (!v15[16366])
  {
    v370.i8[0] = v15[16363];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16364];
    v462 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v462.i32 = (float)v462.i32[0];
    v370.i32[1] = v462.i32[0];
    v462.i8[0] = v15[16365];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v462)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v460 = vaddq_f32(v460, v461);
    v461 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v463 = vaddq_f32(v460, v461);
  if (v459 <= 0)
  {
    v461.i64[0] = *(_QWORD *)v22;
    v461.i32[2] = *(_DWORD *)(v22 + 8);
    v464 = (int8x16_t)vmlsq_lane_f32(v461, v463, v18, 0);
    v370.i64[0] = vextq_s8(v464, v464, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v464.i8, *(float32x2_t *)v464.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v464.i8, 1), *(float32x2_t *)v464.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v465 = v15[16366] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v465;
      if (v459)
        return 0;
    }
  }
  v466 = (char)v15[16406];
  v467 = v280;
  v467.i32[1] = v409;
  *(float32x2_t *)v467.f32 = vcvt_f32_s32(*(int32x2_t *)v467.f32);
  v467.i32[2] = v335.i32[0];
  v468.i64[0] = 0x3F0000003F000000;
  v468.i64[1] = 0x3F0000003F000000;
  if (!v15[16406])
  {
    v370.i8[0] = v15[16403];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16404];
    v469 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v469.i32 = (float)v469.i32[0];
    v370.i32[1] = v469.i32[0];
    v469.i8[0] = v15[16405];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v469)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v467 = vaddq_f32(v467, v468);
    v468 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v470 = vaddq_f32(v467, v468);
  if (v466 <= 0)
  {
    v468.i64[0] = *(_QWORD *)v22;
    v468.i32[2] = *(_DWORD *)(v22 + 8);
    v471 = (int8x16_t)vmlsq_lane_f32(v468, v470, v18, 0);
    v370.i64[0] = vextq_s8(v471, v471, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v471.i8, *(float32x2_t *)v471.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v471.i8, 1), *(float32x2_t *)v471.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v472 = v15[16406] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v472;
      if (v466)
        return 0;
    }
  }
  v473 = (char)v15[16446];
  v474 = v280;
  v474.i32[1] = v409;
  *(float32x2_t *)v474.f32 = vcvt_f32_s32(*(int32x2_t *)v474.f32);
  v474.i32[2] = v345.i32[0];
  v475.i64[0] = 0x3F0000003F000000;
  v475.i64[1] = 0x3F0000003F000000;
  if (!v15[16446])
  {
    v370.i8[0] = v15[16443];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16444];
    v476 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v476.i32 = (float)v476.i32[0];
    v370.i32[1] = v476.i32[0];
    v476.i8[0] = v15[16445];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v476)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v474 = vaddq_f32(v474, v475);
    v475 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v477 = vaddq_f32(v474, v475);
  if (v473 <= 0)
  {
    v475.i64[0] = *(_QWORD *)v22;
    v475.i32[2] = *(_DWORD *)(v22 + 8);
    v478 = (int8x16_t)vmlsq_lane_f32(v475, v477, v18, 0);
    v370.i64[0] = vextq_s8(v478, v478, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v478.i8, *(float32x2_t *)v478.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v478.i8, 1), *(float32x2_t *)v478.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v479 = v15[16446] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v479;
      if (v473)
        return 0;
    }
  }
  v480 = (char)v15[16486];
  v481 = a5;
  v481.i32[1] = v394;
  *(float32x2_t *)v481.f32 = vcvt_f32_s32(*(int32x2_t *)v481.f32);
  v481.i32[2] = v335.i32[0];
  v482.i64[0] = 0x3F0000003F000000;
  v482.i64[1] = 0x3F0000003F000000;
  if (!v15[16486])
  {
    v370.i8[0] = v15[16483];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16484];
    v483 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v483.i32 = (float)v483.i32[0];
    v370.i32[1] = v483.i32[0];
    v483.i8[0] = v15[16485];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v483)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v481 = vaddq_f32(v481, v482);
    v482 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v484 = vaddq_f32(v481, v482);
  if (v480 <= 0)
  {
    v482.i64[0] = *(_QWORD *)v22;
    v482.i32[2] = *(_DWORD *)(v22 + 8);
    v485 = (int8x16_t)vmlsq_lane_f32(v482, v484, v18, 0);
    v370.i64[0] = vextq_s8(v485, v485, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v485.i8, *(float32x2_t *)v485.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v485.i8, 1), *(float32x2_t *)v485.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v486 = v15[16486] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v486;
      if (v480)
        return 0;
    }
  }
  v487 = (char)v15[16526];
  v488 = a5;
  v488.i32[1] = v394;
  *(float32x2_t *)v488.f32 = vcvt_f32_s32(*(int32x2_t *)v488.f32);
  v488.i32[2] = v345.i32[0];
  v489.i64[0] = 0x3F0000003F000000;
  v489.i64[1] = 0x3F0000003F000000;
  if (!v15[16526])
  {
    v370.i8[0] = v15[16523];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16524];
    v490 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v490.i32 = (float)v490.i32[0];
    v370.i32[1] = v490.i32[0];
    v490.i8[0] = v15[16525];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v490)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v370.i32[2] = v12.i32[0];
    v488 = vaddq_f32(v488, v489);
    v489 = vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v491 = vaddq_f32(v488, v489);
  if (v487 <= 0)
  {
    v489.i64[0] = *(_QWORD *)v22;
    v489.i32[2] = *(_DWORD *)(v22 + 8);
    v492 = (int8x16_t)vmlsq_lane_f32(v489, v491, v18, 0);
    v370.i64[0] = vextq_s8(v492, v492, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v492.i8, *(float32x2_t *)v492.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v492.i8, 1), *(float32x2_t *)v492.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8);
    if (v12.f32[0] <= v19.f32[0])
    {
      v493 = v15[16526] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v493;
      if (v487)
        return 0;
    }
  }
  v494 = (char)v15[16566];
  v495 = a5;
  v495.i32[1] = v409;
  *(float32x2_t *)v495.f32 = vcvt_f32_s32(*(int32x2_t *)v495.f32);
  v495.i32[2] = v335.i32[0];
  v496.i64[0] = 0x3F0000003F000000;
  v496.i64[1] = 0x3F0000003F000000;
  if (!v15[16566])
  {
    v370.i8[0] = v15[16563];
    v370 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8));
    *(float *)v370.i32 = (float)v370.i32[0];
    v12.i8[0] = v15[16564];
    v497 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v497.i32 = (float)v497.i32[0];
    v370.i32[1] = v497.i32[0];
    v497.i8[0] = v15[16565];
    *(float *)&v370.i32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v497)).i32[0];
    v495 = vaddq_f32(v495, (float32x4_t)v496);
    v496 = (int8x16_t)vmulq_f32((float32x4_t)v370, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v498 = vaddq_f32(v495, (float32x4_t)v496);
  if (v494 <= 0)
  {
    v496.i64[0] = *(_QWORD *)v22;
    v496.i32[2] = *(_DWORD *)(v22 + 8);
    v496 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v496, v498, v18, 0);
    v370.i64[0] = vextq_s8(v496, v496, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v496.i8, *(float32x2_t *)v496.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v496.i8, 1), *(float32x2_t *)v496.i8, 1), *(float32x2_t *)v370.i8, *(float32x2_t *)v370.i8).f32[0] <= v19.f32[0])
    {
      v499 = v15[16566] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v499;
      if (v494)
        return 0;
    }
  }
  v500 = (char)v15[16606];
  a5.i32[1] = v409;
  *(float32x2_t *)a5.f32 = vcvt_f32_s32(*(int32x2_t *)a5.f32);
  a5.i32[2] = v345.i32[0];
  v501.i64[0] = 0x3F0000003F000000;
  v501.i64[1] = 0x3F0000003F000000;
  if (!v15[16606])
  {
    v496.i8[0] = v15[16603];
    v496 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8));
    *(float *)v496.i32 = (float)v496.i32[0];
    v370.i8[0] = v15[16604];
    v502 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8)).u64[0];
    *(float *)v502.i32 = (float)v502.i32[0];
    v496.i32[1] = v502.i32[0];
    v502.i8[0] = v15[16605];
    v370.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v502)).u64[0];
    *(float *)v370.i32 = (float)v370.i32[0];
    v496.i32[2] = v370.i32[0];
    a5 = vaddq_f32(a5, v501);
    v501 = vmulq_f32((float32x4_t)v496, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v503 = vaddq_f32(a5, v501);
  if (v500 <= 0)
  {
    v501.i64[0] = *(_QWORD *)v22;
    v501.i32[2] = *(_DWORD *)(v22 + 8);
    v504 = (int8x16_t)vmlsq_lane_f32(v501, v503, v18, 0);
    v496.i64[0] = vextq_s8(v504, v504, 8uLL).u64[0];
    *(float32x2_t *)v370.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v504.i8, *(float32x2_t *)v504.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v504.i8, 1), *(float32x2_t *)v504.i8, 1), *(float32x2_t *)v496.i8, *(float32x2_t *)v496.i8);
    if (*(float *)v370.i32 <= v19.f32[0])
    {
      v505 = v15[16606] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v505;
      if (v500)
        return 0;
    }
  }
  v506 = (char)v15[16646];
  v507 = v280;
  v507.i32[0] = v56;
  *(float32x2_t *)v507.f32 = vcvt_f32_s32(*(int32x2_t *)v507.f32);
  v507.i32[2] = v277.i32[0];
  v508.i64[0] = 0x3F0000003F000000;
  v508.i64[1] = 0x3F0000003F000000;
  if (!v15[16646])
  {
    v496.i8[0] = v15[16643];
    v496 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8));
    *(float *)v496.i32 = (float)v496.i32[0];
    v370.i8[0] = v15[16644];
    v509 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8)).u64[0];
    *(float *)v509.i32 = (float)v509.i32[0];
    v496.i32[1] = v509.i32[0];
    v509.i8[0] = v15[16645];
    v370.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v509)).u64[0];
    *(float *)v370.i32 = (float)v370.i32[0];
    v496.i32[2] = v370.i32[0];
    v507 = vaddq_f32(v507, v508);
    v508 = vmulq_f32((float32x4_t)v496, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v510 = vaddq_f32(v507, v508);
  if (v506 <= 0)
  {
    v508.i64[0] = *(_QWORD *)v22;
    v508.i32[2] = *(_DWORD *)(v22 + 8);
    v511 = (int8x16_t)vmlsq_lane_f32(v508, v510, v18, 0);
    v496.i64[0] = vextq_s8(v511, v511, 8uLL).u64[0];
    *(float32x2_t *)v370.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v511.i8, *(float32x2_t *)v511.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v511.i8, 1), *(float32x2_t *)v511.i8, 1), *(float32x2_t *)v496.i8, *(float32x2_t *)v496.i8);
    if (*(float *)v370.i32 <= v19.f32[0])
    {
      v512 = v15[16646] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v512;
      if (v506)
        return 0;
    }
  }
  v513 = (char)v15[16686];
  v514 = v280;
  v514.i32[0] = v56;
  *(float32x2_t *)v514.f32 = vcvt_f32_s32(*(int32x2_t *)v514.f32);
  v514.f32[2] = (float)v290;
  v515.i64[0] = 0x3F0000003F000000;
  v515.i64[1] = 0x3F0000003F000000;
  if (!v15[16686])
  {
    v496.i8[0] = v15[16683];
    v496 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8));
    *(float *)v496.i32 = (float)v496.i32[0];
    v370.i8[0] = v15[16684];
    v516 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8)).u64[0];
    *(float *)v516.i32 = (float)v516.i32[0];
    v496.i32[1] = v516.i32[0];
    v516.i8[0] = v15[16685];
    v370.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v516)).u64[0];
    *(float *)v370.i32 = (float)v370.i32[0];
    v496.i32[2] = v370.i32[0];
    v514 = vaddq_f32(v514, v515);
    v515 = vmulq_f32((float32x4_t)v496, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v517 = vaddq_f32(v514, v515);
  if (v513 <= 0)
  {
    v515.i64[0] = *(_QWORD *)v22;
    v515.i32[2] = *(_DWORD *)(v22 + 8);
    v518 = (int8x16_t)vmlsq_lane_f32(v515, v517, v18, 0);
    v496.i64[0] = vextq_s8(v518, v518, 8uLL).u64[0];
    *(float32x2_t *)v370.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v518.i8, *(float32x2_t *)v518.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v518.i8, 1), *(float32x2_t *)v518.i8, 1), *(float32x2_t *)v496.i8, *(float32x2_t *)v496.i8);
    if (*(float *)v370.i32 <= v19.f32[0])
    {
      v519 = v15[16686] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v519;
      if (v513)
        return 0;
    }
  }
  v520 = (char)v15[16726];
  *(float32x2_t *)v517.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v299, v56));
  v517.i32[2] = v277.i32[0];
  v521.i64[0] = 0x3F0000003F000000;
  v521.i64[1] = 0x3F0000003F000000;
  if (!v15[16726])
  {
    v496.i8[0] = v15[16723];
    v496 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8));
    *(float *)v496.i32 = (float)v496.i32[0];
    v370.i8[0] = v15[16724];
    v522 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8)).u64[0];
    *(float *)v522.i32 = (float)v522.i32[0];
    v496.i32[1] = v522.i32[0];
    v522.i8[0] = v15[16725];
    v370.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v522)).u64[0];
    *(float *)v370.i32 = (float)v370.i32[0];
    v496.i32[2] = v370.i32[0];
    v517 = vaddq_f32(v517, v521);
    v521 = vmulq_f32((float32x4_t)v496, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v523 = vaddq_f32(v517, v521);
  if (v520 <= 0)
  {
    v521.i64[0] = *(_QWORD *)v22;
    v521.i32[2] = *(_DWORD *)(v22 + 8);
    v524 = (int8x16_t)vmlsq_lane_f32(v521, v523, v18, 0);
    v496.i64[0] = vextq_s8(v524, v524, 8uLL).u64[0];
    *(float32x2_t *)v370.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v524.i8, *(float32x2_t *)v524.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v524.i8, 1), *(float32x2_t *)v524.i8, 1), *(float32x2_t *)v496.i8, *(float32x2_t *)v496.i8);
    if (*(float *)v370.i32 <= v19.f32[0])
    {
      v525 = v15[16726] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v525;
      if (v520)
        return 0;
    }
  }
  v526 = (char)v15[16766];
  *(float32x2_t *)v523.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v299, v56));
  v523.f32[2] = (float)v290;
  v527.i64[0] = 0x3F0000003F000000;
  v527.i64[1] = 0x3F0000003F000000;
  if (!v15[16766])
  {
    v496.i8[0] = v15[16763];
    v496 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8));
    *(float *)v496.i32 = (float)v496.i32[0];
    v370.i8[0] = v15[16764];
    v528 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8)).u64[0];
    *(float *)v528.i32 = (float)v528.i32[0];
    v496.i32[1] = v528.i32[0];
    v528.i8[0] = v15[16765];
    v370.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v528)).u64[0];
    *(float *)v370.i32 = (float)v370.i32[0];
    v496.i32[2] = v370.i32[0];
    v523 = vaddq_f32(v523, v527);
    v527 = vmulq_f32((float32x4_t)v496, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v529 = vaddq_f32(v523, v527);
  if (v526 <= 0)
  {
    v527.i64[0] = *(_QWORD *)v22;
    v527.i32[2] = *(_DWORD *)(v22 + 8);
    v530 = (int8x16_t)vmlsq_lane_f32(v527, v529, v18, 0);
    v496.i64[0] = vextq_s8(v530, v530, 8uLL).u64[0];
    *(float32x2_t *)v370.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v530.i8, *(float32x2_t *)v530.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v530.i8, 1), *(float32x2_t *)v530.i8, 1), *(float32x2_t *)v496.i8, *(float32x2_t *)v496.i8);
    if (*(float *)v370.i32 <= v19.f32[0])
    {
      v531 = v15[16766] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v531;
      if (v526)
        return 0;
    }
  }
  v532 = (char)v15[16806];
  v533 = v280;
  v533.i32[0] = v96;
  *(float32x2_t *)v533.f32 = vcvt_f32_s32(*(int32x2_t *)v533.f32);
  v533.i32[2] = v277.i32[0];
  v534.i64[0] = 0x3F0000003F000000;
  v534.i64[1] = 0x3F0000003F000000;
  if (!v15[16806])
  {
    v496.i8[0] = v15[16803];
    v496 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8));
    *(float *)v496.i32 = (float)v496.i32[0];
    v370.i8[0] = v15[16804];
    v535 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8)).u64[0];
    *(float *)v535.i32 = (float)v535.i32[0];
    v496.i32[1] = v535.i32[0];
    v535.i8[0] = v15[16805];
    v370.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v535)).u64[0];
    *(float *)v370.i32 = (float)v370.i32[0];
    v496.i32[2] = v370.i32[0];
    v533 = vaddq_f32(v533, v534);
    v534 = vmulq_f32((float32x4_t)v496, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v536 = vaddq_f32(v533, v534);
  if (v532 <= 0)
  {
    v534.i64[0] = *(_QWORD *)v22;
    v534.i32[2] = *(_DWORD *)(v22 + 8);
    v537 = (int8x16_t)vmlsq_lane_f32(v534, v536, v18, 0);
    v496.i64[0] = vextq_s8(v537, v537, 8uLL).u64[0];
    *(float32x2_t *)v370.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v537.i8, *(float32x2_t *)v537.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v537.i8, 1), *(float32x2_t *)v537.i8, 1), *(float32x2_t *)v496.i8, *(float32x2_t *)v496.i8);
    if (*(float *)v370.i32 <= v19.f32[0])
    {
      v538 = v15[16806] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v538;
      if (v532)
        return 0;
    }
  }
  v539 = (char)v15[16846];
  v540 = v280;
  v540.i32[0] = v96;
  *(float32x2_t *)v540.f32 = vcvt_f32_s32(*(int32x2_t *)v540.f32);
  v540.f32[2] = (float)v290;
  v541.i64[0] = 0x3F0000003F000000;
  v541.i64[1] = 0x3F0000003F000000;
  if (!v15[16846])
  {
    v496.i8[0] = v15[16843];
    v496 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8));
    *(float *)v496.i32 = (float)v496.i32[0];
    v370.i8[0] = v15[16844];
    v542 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v370.i8)).u64[0];
    *(float *)v542.i32 = (float)v542.i32[0];
    v496.i32[1] = v542.i32[0];
    v542.i8[0] = v15[16845];
    *(float *)&v496.i32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v542)).i32[0];
    v540 = vaddq_f32(v540, v541);
    v541 = vmulq_f32((float32x4_t)v496, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v543 = vaddq_f32(v540, v541);
  if (v539 <= 0)
  {
    v541.i64[0] = *(_QWORD *)v22;
    v541.i32[2] = *(_DWORD *)(v22 + 8);
    v544 = (int8x16_t)vmlsq_lane_f32(v541, v543, v18, 0);
    v496.i64[0] = vextq_s8(v544, v544, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v544.i8, *(float32x2_t *)v544.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v544.i8, 1), *(float32x2_t *)v544.i8, 1), *(float32x2_t *)v496.i8, *(float32x2_t *)v496.i8).f32[0] <= v19.f32[0])
    {
      v545 = v15[16846] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v545;
      if (v539)
        return 0;
    }
  }
  v546 = (char)v15[16886];
  *(float32x2_t *)v543.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v299, v96));
  v543.i32[2] = v277.i32[0];
  v547.i64[0] = 0x3F0000003F000000;
  v547.i64[1] = 0x3F0000003F000000;
  if (!v15[16886])
  {
    v277.i8[0] = v15[16883];
    v277 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v277.i8));
    *(float *)v277.i32 = (float)v277.i32[0];
    v496.i8[0] = v15[16884];
    v548 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8)).u64[0];
    *(float *)v548.i32 = (float)v548.i32[0];
    v277.i32[1] = v548.i32[0];
    v548.i8[0] = v15[16885];
    v496.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v548)).u64[0];
    *(float *)v496.i32 = (float)v496.i32[0];
    v277.i32[2] = v496.i32[0];
    v543 = vaddq_f32(v543, v547);
    v547 = vmulq_f32((float32x4_t)v277, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v549 = vaddq_f32(v543, v547);
  if (v546 <= 0)
  {
    v547.i64[0] = *(_QWORD *)v22;
    v547.i32[2] = *(_DWORD *)(v22 + 8);
    v550 = (int8x16_t)vmlsq_lane_f32(v547, v549, v18, 0);
    v277 = vextq_s8(v550, v550, 8uLL);
    *(float32x2_t *)v496.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v550.i8, *(float32x2_t *)v550.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v550.i8, 1), *(float32x2_t *)v550.i8, 1), *(float32x2_t *)v277.i8, *(float32x2_t *)v277.i8);
    if (*(float *)v496.i32 <= v19.f32[0])
    {
      v551 = v15[16886] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v551;
      if (v546)
        return 0;
    }
  }
  v552 = (char)v15[16926];
  *(float32x2_t *)v549.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v299, v96));
  v549.f32[2] = (float)v290;
  v553.i64[0] = 0x3F0000003F000000;
  v553.i64[1] = 0x3F0000003F000000;
  if (!v15[16926])
  {
    v277.i8[0] = v15[16923];
    v277 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v277.i8));
    *(float *)v277.i32 = (float)v277.i32[0];
    v496.i8[0] = v15[16924];
    v554 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8)).u64[0];
    *(float *)v554.i32 = (float)v554.i32[0];
    v277.i32[1] = v554.i32[0];
    v554.i8[0] = v15[16925];
    v496.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v554)).u64[0];
    *(float *)v496.i32 = (float)v496.i32[0];
    v277.i32[2] = v496.i32[0];
    v549 = vaddq_f32(v549, v553);
    v553 = vmulq_f32((float32x4_t)v277, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v555 = vaddq_f32(v549, v553);
  if (v552 <= 0)
  {
    v553.i64[0] = *(_QWORD *)v22;
    v553.i32[2] = *(_DWORD *)(v22 + 8);
    v556 = (int8x16_t)vmlsq_lane_f32(v553, v555, v18, 0);
    v277 = vextq_s8(v556, v556, 8uLL);
    *(float32x2_t *)v496.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v556.i8, *(float32x2_t *)v556.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v556.i8, 1), *(float32x2_t *)v556.i8, 1), *(float32x2_t *)v277.i8, *(float32x2_t *)v277.i8);
    if (*(float *)v496.i32 <= v19.f32[0])
    {
      v557 = v15[16926] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v557;
      if (v552)
        return 0;
    }
  }
  v558 = (char)v15[16966];
  v559 = v280;
  v559.i32[0] = v56;
  *(float32x2_t *)v559.f32 = vcvt_f32_s32(*(int32x2_t *)v559.f32);
  v559.i32[2] = v335.i32[0];
  v560.i64[0] = 0x3F0000003F000000;
  v560.i64[1] = 0x3F0000003F000000;
  if (!v15[16966])
  {
    v277.i8[0] = v15[16963];
    v277 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v277.i8));
    *(float *)v277.i32 = (float)v277.i32[0];
    v496.i8[0] = v15[16964];
    v561 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8)).u64[0];
    *(float *)v561.i32 = (float)v561.i32[0];
    v277.i32[1] = v561.i32[0];
    v561.i8[0] = v15[16965];
    v496.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v561)).u64[0];
    *(float *)v496.i32 = (float)v496.i32[0];
    v277.i32[2] = v496.i32[0];
    v559 = vaddq_f32(v559, v560);
    v560 = vmulq_f32((float32x4_t)v277, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v562 = vaddq_f32(v559, v560);
  if (v558 <= 0)
  {
    v560.i64[0] = *(_QWORD *)v22;
    v560.i32[2] = *(_DWORD *)(v22 + 8);
    v563 = (int8x16_t)vmlsq_lane_f32(v560, v562, v18, 0);
    v277 = vextq_s8(v563, v563, 8uLL);
    *(float32x2_t *)v496.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v563.i8, *(float32x2_t *)v563.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v563.i8, 1), *(float32x2_t *)v563.i8, 1), *(float32x2_t *)v277.i8, *(float32x2_t *)v277.i8);
    if (*(float *)v496.i32 <= v19.f32[0])
    {
      v564 = v15[16966] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v564;
      if (v558)
        return 0;
    }
  }
  v565 = v15 + 17003;
  v566 = v565[3];
  v567 = v280;
  v567.i32[0] = v56;
  *(float32x2_t *)v567.f32 = vcvt_f32_s32(*(int32x2_t *)v567.f32);
  v567.i32[2] = v345.i32[0];
  v568.i64[0] = 0x3F0000003F000000;
  v568.i64[1] = 0x3F0000003F000000;
  if (!v565[3])
  {
    v277.i8[0] = *v565;
    v277 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v277.i8));
    *(float *)v277.i32 = (float)v277.i32[0];
    v496.i8[0] = v565[1];
    v569 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8)).u64[0];
    *(float *)v569.i32 = (float)v569.i32[0];
    v277.i32[1] = v569.i32[0];
    v569.i8[0] = v565[2];
    v496.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v569)).u64[0];
    *(float *)v496.i32 = (float)v496.i32[0];
    v277.i32[2] = v496.i32[0];
    v567 = vaddq_f32(v567, v568);
    v568 = vmulq_f32((float32x4_t)v277, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v570 = vaddq_f32(v567, v568);
  if (v566 <= 0)
  {
    v568.i64[0] = *(_QWORD *)v22;
    v568.i32[2] = *(_DWORD *)(v22 + 8);
    v571 = (int8x16_t)vmlsq_lane_f32(v568, v570, v18, 0);
    v277 = vextq_s8(v571, v571, 8uLL);
    *(float32x2_t *)v496.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v571.i8, *(float32x2_t *)v571.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v571.i8, 1), *(float32x2_t *)v571.i8, 1), *(float32x2_t *)v277.i8, *(float32x2_t *)v277.i8);
    if (*(float *)v496.i32 <= v19.f32[0])
    {
      v572 = v565[3] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v572;
      if (v566)
        return 0;
    }
  }
  v573 = v565[43];
  *(float32x2_t *)v570.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v299, v56));
  v570.i32[2] = v335.i32[0];
  v574.i64[0] = 0x3F0000003F000000;
  v574.i64[1] = 0x3F0000003F000000;
  if (!v565[43])
  {
    v277.i8[0] = v565[40];
    v277 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v277.i8));
    *(float *)v277.i32 = (float)v277.i32[0];
    v496.i8[0] = v565[41];
    v575 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8)).u64[0];
    *(float *)v575.i32 = (float)v575.i32[0];
    v277.i32[1] = v575.i32[0];
    v575.i8[0] = v565[42];
    v496.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v575)).u64[0];
    *(float *)v496.i32 = (float)v496.i32[0];
    v277.i32[2] = v496.i32[0];
    v570 = vaddq_f32(v570, v574);
    v574 = vmulq_f32((float32x4_t)v277, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v576 = vaddq_f32(v570, v574);
  if (v573 <= 0)
  {
    v574.i64[0] = *(_QWORD *)v22;
    v574.i32[2] = *(_DWORD *)(v22 + 8);
    v577 = (int8x16_t)vmlsq_lane_f32(v574, v576, v18, 0);
    v277 = vextq_s8(v577, v577, 8uLL);
    *(float32x2_t *)v496.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v577.i8, *(float32x2_t *)v577.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v577.i8, 1), *(float32x2_t *)v577.i8, 1), *(float32x2_t *)v277.i8, *(float32x2_t *)v277.i8);
    if (*(float *)v496.i32 <= v19.f32[0])
    {
      v578 = v565[43] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v578;
      if (v573)
        return 0;
    }
  }
  v579 = v565[83];
  *(float32x2_t *)v576.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v299, v56));
  v576.i32[2] = v345.i32[0];
  v580.i64[0] = 0x3F0000003F000000;
  v580.i64[1] = 0x3F0000003F000000;
  if (!v565[83])
  {
    v277.i8[0] = v565[80];
    v277 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v277.i8));
    *(float *)v277.i32 = (float)v277.i32[0];
    v496.i8[0] = v565[81];
    v581 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v496.i8)).u64[0];
    *(float *)v581.i32 = (float)v581.i32[0];
    v277.i32[1] = v581.i32[0];
    v581.i8[0] = v565[82];
    *(float *)&v277.i32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v581)).i32[0];
    v576 = vaddq_f32(v576, v580);
    v580 = vmulq_f32((float32x4_t)v277, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v582 = vaddq_f32(v576, v580);
  if (v579 <= 0)
  {
    v580.i64[0] = *(_QWORD *)v22;
    v580.i32[2] = *(_DWORD *)(v22 + 8);
    v583 = (int8x16_t)vmlsq_lane_f32(v580, v582, v18, 0);
    v277 = vextq_s8(v583, v583, 8uLL);
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v583.i8, *(float32x2_t *)v583.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v583.i8, 1), *(float32x2_t *)v583.i8, 1), *(float32x2_t *)v277.i8, *(float32x2_t *)v277.i8).f32[0] <= v19.f32[0])
    {
      v584 = v565[83] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v584;
      if (v579)
        return 0;
    }
  }
  v585 = v565[123];
  v586 = v280;
  v586.i32[0] = v96;
  *(float32x2_t *)v586.f32 = vcvt_f32_s32(*(int32x2_t *)v586.f32);
  v586.i32[2] = v335.i32[0];
  v587.i64[0] = 0x3F0000003F000000;
  v587.i64[1] = 0x3F0000003F000000;
  if (!v565[123])
  {
    v277.i8[0] = v565[120];
    v277 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v277.i8));
    *(float *)v277.i32 = (float)v277.i32[0];
    v335.i8[0] = v565[121];
    v588 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v335.i8)).u64[0];
    *(float *)v588.i32 = (float)v588.i32[0];
    v277.i32[1] = v588.i32[0];
    v588.i8[0] = v565[122];
    *(float *)&v277.i32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v588)).i32[0];
    v586 = vaddq_f32(v586, v587);
    v587 = vmulq_f32((float32x4_t)v277, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v589 = vaddq_f32(v586, v587);
  if (v585 <= 0)
  {
    v587.i64[0] = *(_QWORD *)v22;
    v587.i32[2] = *(_DWORD *)(v22 + 8);
    v590 = (int8x16_t)vmlsq_lane_f32(v587, v589, v18, 0);
    v277 = vextq_s8(v590, v590, 8uLL);
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v590.i8, *(float32x2_t *)v590.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v590.i8, 1), *(float32x2_t *)v590.i8, 1), *(float32x2_t *)v277.i8, *(float32x2_t *)v277.i8).f32[0] <= v19.f32[0])
    {
      v591 = v565[123] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v591;
      if (v585)
        return 0;
    }
  }
  v592 = v565[163];
  v280.i32[0] = v96;
  *(float32x2_t *)v589.f32 = vcvt_f32_s32(*(int32x2_t *)v280.f32);
  v589.i32[2] = v345.i32[0];
  v593.i64[0] = 0x3F0000003F000000;
  v593.i64[1] = 0x3F0000003F000000;
  if (!v565[163])
  {
    v280.i8[0] = v565[160];
    v280 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v280.f32));
    v280.f32[0] = (float)v280.i32[0];
    v277.i8[0] = v565[161];
    v594 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v277.i8)).u64[0];
    *(float *)v594.i32 = (float)v594.i32[0];
    v280.i32[1] = v594.i32[0];
    v594.i8[0] = v565[162];
    v277 = (int8x16_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v594));
    *(float *)v277.i32 = (float)v277.i32[0];
    v280.i32[2] = v277.i32[0];
    v589 = vaddq_f32(v589, (float32x4_t)v593);
    v593 = (int8x16_t)vmulq_f32(v280, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v595 = vaddq_f32(v589, (float32x4_t)v593);
  if (v592 <= 0)
  {
    v593.i64[0] = *(_QWORD *)v22;
    v593.i32[2] = *(_DWORD *)(v22 + 8);
    v593 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v593, v595, v18, 0);
    v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v593.i8, 1);
    v595.i64[0] = vextq_s8(v593, v593, 8uLL).u64[0];
    *(float32x2_t *)v280.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v593.i8, *(float32x2_t *)v593.i8), v18, *(float32x2_t *)v593.i8, 1), *(float32x2_t *)v595.f32, *(float32x2_t *)v595.f32);
    if (v280.f32[0] <= v19.f32[0])
    {
      v596 = v565[163] ? 2 : 1;
      **(_BYTE **)(v16 + 24) = v596;
      if (v592)
        return 0;
    }
  }
  return sub_22396ED90(a1, a2, *(double *)&v18, v19, *(double *)v595.i64, (float32x4_t)v593, *(double *)v280.i64, (float32x4_t)v277, v345);
}

uint64_t sub_22396ED90(_QWORD ***a1, int32x2_t *a2, double a3, float32x4_t a4, double a5, float32x4_t a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float32x2_t v9;
  int8x8_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x8_t v13;
  int32x2_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  float v24;
  int8x8_t v25;
  int8x16_t v26;
  char v27;
  uint64_t result;
  int v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x8_t v37;
  float32x4_t v38;
  float32x2_t v39;
  char v40;
  int v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x8_t v45;
  float32x4_t v46;
  int8x16_t v47;
  char v48;
  int v49;
  int v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x8_t v56;
  float32x4_t v57;
  int8x16_t v58;
  char v59;
  int v60;
  int v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x8_t v67;
  float32x4_t v68;
  int8x16_t v69;
  char v70;
  int v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x8_t v77;
  float32x4_t v78;
  int8x16_t v79;
  char v80;
  int v81;
  float32x4_t v82;
  int8x8_t v83;
  float32x4_t v84;
  int8x16_t v85;
  char v86;
  int v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x8_t v91;
  float32x4_t v92;
  char v93;
  int v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int8x8_t v100;
  float32x4_t v101;
  int8x16_t v102;
  char v103;
  int v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x8_t v107;
  float32x4_t v108;
  int8x16_t v109;
  char v110;
  int v111;
  float32x4_t v112;
  float32x4_t v113;
  int8x8_t v114;
  float32x4_t v115;
  int8x16_t v116;
  char v117;
  int v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int8x8_t v122;
  float32x4_t v123;
  int8x16_t v124;
  char v125;
  int v126;
  float32x4_t v127;
  float32x4_t v128;
  int8x8_t v129;
  float32x4_t v130;
  int8x16_t v131;
  char v132;
  int v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x8_t v136;
  float32x4_t v137;
  int8x16_t v138;
  char v139;
  int v140;
  float32x4_t v141;
  int8x8_t v142;
  float32x4_t v143;
  int8x16_t v144;
  char v145;
  int v146;
  float32x4_t v147;
  int8x8_t v148;
  float32x4_t v149;
  char v150;
  int v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x8_t v155;
  float32x4_t v156;
  int8x16_t v157;
  char v158;
  int v159;
  float32x4_t v160;
  float32x4_t v161;
  int8x8_t v162;
  float32x4_t v163;
  int8x16_t v164;
  char v165;
  int v166;
  int v167;
  float32x4_t v168;
  float32x4_t v169;
  int8x8_t v170;
  float32x4_t v171;
  float32x2_t v172;
  char v173;
  int v174;
  float v175;
  float32x4_t v176;
  int8x8_t v177;
  float32x4_t v178;
  int8x16_t v179;
  char v180;
  int v181;
  float32x4_t v182;
  int8x8_t v183;
  float32x4_t v184;
  int8x16_t v185;
  char v186;
  int v187;
  float32x4_t v188;
  int8x8_t v189;
  float32x4_t v190;
  int8x16_t v191;
  char v192;
  __int32 v193;
  int v194;
  float32x4_t v195;
  float32x4_t v196;
  int8x8_t v197;
  float32x4_t v198;
  int8x16_t v199;
  char v200;
  int v201;
  float32x4_t v202;
  float32x4_t v203;
  int8x8_t v204;
  float32x4_t v205;
  int8x16_t v206;
  char v207;
  int v208;
  float32x4_t v209;
  float32x4_t v210;
  int8x8_t v211;
  float32x4_t v212;
  int8x16_t v213;
  char v214;
  int v215;
  float32x4_t v216;
  float32x4_t v217;
  int8x8_t v218;
  float32x4_t v219;
  int8x16_t v220;
  char v221;
  int v222;
  int v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x8_t v226;
  float32x4_t v227;
  float32x2_t v228;
  char v229;
  int v230;
  int v231;
  unsigned __int32 v232;
  float32x4_t v233;
  int8x8_t v234;
  float32x4_t v235;
  int8x16_t v236;
  char v237;
  int v238;
  float32x4_t v239;
  int8x8_t v240;
  float32x4_t v241;
  int8x16_t v242;
  char v243;
  int v244;
  float32x4_t v245;
  int8x8_t v246;
  float32x4_t v247;
  int8x16_t v248;
  char v249;
  int v250;
  float32x4_t v251;
  float32x4_t v252;
  int8x8_t v253;
  float32x4_t v254;
  int8x16_t v255;
  char v256;
  int v257;
  float32x4_t v258;
  float32x4_t v259;
  int8x8_t v260;
  float32x4_t v261;
  int8x16_t v262;
  char v263;
  int v264;
  float32x4_t v265;
  float32x4_t v266;
  int8x8_t v267;
  float32x4_t v268;
  int8x16_t v269;
  char v270;
  int v271;
  float32x4_t v272;
  float32x4_t v273;
  int8x8_t v274;
  float32x4_t v275;
  int8x16_t v276;
  char v277;
  int v278;
  float32x4_t v279;
  int8x8_t v280;
  float32x4_t v281;
  int8x16_t v282;
  char v283;
  int v284;
  float32x4_t v285;
  int8x8_t v286;
  float32x4_t v287;
  int8x16_t v288;
  char v289;
  int v290;
  float32x4_t v291;
  float32x4_t v292;
  int8x8_t v293;
  float32x4_t v294;
  int8x16_t v295;
  char v296;
  int v297;
  float32x4_t v298;
  float32x4_t v299;
  int8x8_t v300;
  float32x4_t v301;
  int8x16_t v302;
  char v303;
  int v304;
  float32x4_t v305;
  float32x4_t v306;
  int8x8_t v307;
  float32x4_t v308;
  int8x16_t v309;
  char v310;
  int v311;
  float32x4_t v312;
  float32x4_t v313;
  int8x8_t v314;
  float32x4_t v315;
  int8x16_t v316;
  char v317;
  int v318;
  float32x4_t v319;
  int8x8_t v320;
  float32x4_t v321;
  int8x16_t v322;
  char v323;
  int v324;
  float32x4_t v325;
  int8x8_t v326;
  float32x4_t v327;
  int8x16_t v328;
  char v329;
  int v330;
  float32x4_t v331;
  int8x8_t v332;
  float32x4_t v333;
  int8x16_t v334;
  char v335;
  int v336;
  float32x4_t v337;
  int8x8_t v338;
  float32x4_t v339;
  int8x16_t v340;
  char v341;
  int v342;
  float32x4_t v343;
  float32x4_t v344;
  int8x8_t v345;
  float32x4_t v346;
  char v347;
  int v348;
  float32x4_t v349;
  int8x8_t v350;
  float32x4_t v351;
  int8x16_t v352;
  char v353;
  int v354;
  float32x4_t v355;
  float32x4_t v356;
  int8x8_t v357;
  float32x4_t v358;
  int8x16_t v359;
  char v360;
  int v361;
  float32x4_t v362;
  float32x4_t v363;
  int8x8_t v364;
  float32x4_t v365;
  int8x16_t v366;
  char v367;
  int v368;
  float32x4_t v369;
  int8x8_t v370;
  float32x4_t v371;
  int8x16_t v372;
  char v373;
  int v374;
  float32x4_t v375;
  int8x8_t v376;
  float32x4_t v377;
  int8x16_t v378;
  char v379;
  int v380;
  float32x4_t v381;
  int8x8_t v382;
  float32x4_t v383;
  int8x16_t v384;
  char v385;
  int v386;
  float32x4_t v387;
  int8x8_t v388;
  float32x4_t v389;
  int8x16_t v390;
  char v391;
  int v392;
  float32x4_t v393;
  int8x8_t v394;
  float32x4_t v395;
  int8x16_t v396;
  char v397;
  int v398;
  float32x4_t v399;
  int8x8_t v400;
  float32x4_t v401;
  int8x16_t v402;
  char v403;
  int v404;
  float32x4_t v405;
  int8x8_t v406;
  float32x4_t v407;
  int8x16_t v408;
  char v409;
  int v410;
  float32x4_t v411;
  int8x8_t v412;
  float32x4_t v413;
  int8x16_t v414;
  char v415;
  int v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  int8x8_t v420;
  float32x4_t v421;
  int8x16_t v422;
  char v423;
  int v424;
  float32x4_t v425;
  float32x4_t v426;
  int8x8_t v427;
  float32x4_t v428;
  int8x16_t v429;
  char v430;
  int v431;
  float32x4_t v432;
  int8x8_t v433;
  float32x4_t v434;
  int8x16_t v435;
  char v436;
  int v437;
  float32x4_t v438;
  int8x8_t v439;
  float32x4_t v440;
  int8x16_t v441;
  char v442;
  int v443;
  float32x4_t v444;
  int8x8_t v445;
  float32x4_t v446;
  int8x16_t v447;
  char v448;
  int v449;
  float32x4_t v450;
  int8x8_t v451;
  float32x4_t v452;
  int8x16_t v453;
  char v454;
  int v455;
  float32x4_t v456;
  int8x8_t v457;
  float32x4_t v458;
  int8x16_t v459;
  char v460;
  int v461;
  float32x4_t v462;
  int8x8_t v463;
  float32x4_t v464;
  int8x16_t v465;
  char v466;
  int v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  int8x8_t v471;
  float32x4_t v472;
  char v473;
  int v474;
  float32x4_t v475;
  int8x8_t v476;
  float32x4_t v477;
  int8x16_t v478;
  char v479;
  int v480;
  float32x4_t v481;
  float32x4_t v482;
  float32x4_t v483;
  int8x8_t v484;
  float32x4_t v485;
  int8x16_t v486;
  char v487;
  int v488;
  float32x4_t v489;
  float32x4_t v490;
  int8x8_t v491;
  float32x4_t v492;
  int8x16_t v493;
  char v494;
  int v495;
  float32x4_t v496;
  float32x4_t v497;
  int8x8_t v498;
  float32x4_t v499;
  int8x16_t v500;
  char v501;
  int v502;
  float32x4_t v503;
  float32x4_t v504;
  int8x8_t v505;
  float32x4_t v506;
  int8x16_t v507;
  char v508;
  int v509;
  float32x4_t v510;
  int8x8_t v511;
  float32x4_t v512;
  int8x16_t v513;
  char v514;
  int v515;
  float32x4_t v516;
  int8x8_t v517;
  float32x4_t v518;
  int8x16_t v519;
  char v520;
  int v521;
  float32x4_t v522;
  float32x4_t v523;
  int8x8_t v524;
  float32x4_t v525;
  char v526;
  int v527;
  float32x4_t v528;
  float32x4_t v529;
  int8x8_t v530;
  float32x4_t v531;
  int8x16_t v532;
  char v533;
  int v534;
  float32x4_t v535;
  float32x4_t v536;
  float32x4_t v537;
  int8x8_t v538;
  float32x4_t v539;
  char v540;
  int v541;
  float32x4_t v542;
  int8x8_t v543;
  float32x4_t v544;
  int8x16_t v545;
  char v546;
  int v547;
  float32x4_t v548;
  float32x4_t v549;
  int8x8_t v550;
  float32x4_t v551;
  char v552;
  __int8 *v553;
  int v554;
  float32x4_t v555;
  int8x8_t v556;
  float32x4_t v557;
  int8x16_t v558;
  char v559;
  int v560;
  float32x4_t v561;
  int8x8_t v562;
  float32x4_t v563;
  char v564;
  int v565;
  float32x4_t v566;
  int8x8_t v567;
  float32x4_t v568;
  int8x16_t v569;
  char v570;
  int v571;
  float32x4_t v572;
  float32x4_t v573;
  int8x8_t v574;
  float32x4_t v575;
  char v576;
  _BOOL8 v577;
  float32x4_t v578;
  float32x4_t v579;
  int8x8_t v580;
  float32x4_t v581;
  int8x16_t v582;
  float32x2_t v583;
  char v584;

  v14 = *a2;
  v19.i32[1] = 5;
  *(int32x2_t *)a4.f32 = vadd_s32(*a2, (int32x2_t)0x500000007);
  v15 = a2[1].i32[0];
  v16 = (_BYTE *)***a1;
  v17 = *(*a1)[5];
  v18 = (char)v16[17206];
  v19.i32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 40784) + 312);
  *(float32x2_t *)a9.f32 = vcvt_f32_s32(*(int32x2_t *)a4.f32);
  v20 = a9;
  v20.f32[2] = (float)(v15 + 2);
  v21.i64[0] = 0x3F0000003F000000;
  v21.i64[1] = 0x3F0000003F000000;
  if (v16[17206])
  {
    v22 = vaddq_f32(v20, v21);
    v23 = *(_QWORD *)(v17 + 8);
    v24 = **(float **)(v17 + 16);
    if (v18 > 0)
      goto LABEL_11;
  }
  else
  {
    a8.i8[0] = v16[17203];
    a8 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a8.f32));
    a8.f32[0] = (float)a8.i32[0];
    v9.i8[0] = v16[17204];
    v25 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)v9)).u64[0];
    *(float *)v25.i32 = (float)v25.i32[0];
    a8.i32[1] = v25.i32[0];
    v25.i8[0] = v16[17205];
    v9 = (float32x2_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v25)).u64[0];
    v9.f32[0] = (float)v9.i32[0];
    a8.i32[2] = v9.i32[0];
    v22 = vaddq_f32(vaddq_f32(v20, v21), vmulq_f32(a8, (float32x4_t)vdupq_n_s32(0x3B808081u)));
    v23 = *(_QWORD *)(v17 + 8);
    v24 = **(float **)(v17 + 16);
    if (v18 > 0)
      goto LABEL_11;
  }
  a8.i64[0] = *(_QWORD *)v23;
  a8.i32[2] = *(_DWORD *)(v23 + 8);
  v26 = (int8x16_t)vmlsq_lane_f32(a8, v22, v19, 0);
  v9 = (float32x2_t)vextq_s8(v26, v26, 8uLL).u64[0];
  v10 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v26.i8, 1), v9, v9);
  if (*(float *)v10.i32 <= v24)
  {
    v27 = v16[17206] ? 2 : 1;
    **(_BYTE **)(v17 + 24) = v27;
    if (v18)
      return 0;
  }
LABEL_11:
  v29 = v15 + 3;
  v30 = (char)v16[17246];
  if (v16[17246])
  {
    v31 = a9;
    v31.f32[2] = (float)v29;
    v32.i64[0] = 0x3F0000003F000000;
    v32.i64[1] = 0x3F0000003F000000;
    v33 = vaddq_f32(v31, v32);
    if (v30 > 0)
      goto LABEL_21;
  }
  else
  {
    v34 = a9;
    v34.f32[2] = (float)v29;
    v35.i64[0] = 0x3F0000003F000000;
    v35.i64[1] = 0x3F0000003F000000;
    v9.i8[0] = v16[17243];
    v36 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)v9));
    v36.f32[0] = (float)v36.i32[0];
    v10.i8[0] = v16[17244];
    v37 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v10)).u64[0];
    *(float *)v37.i32 = (float)v37.i32[0];
    v36.i32[1] = v37.i32[0];
    v37.i8[0] = v16[17245];
    v36.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v37)).i32[0];
    v38 = vaddq_f32(v34, v35);
    v31 = vmulq_f32(v36, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v33 = vaddq_f32(v38, v31);
    if (v30 > 0)
      goto LABEL_21;
  }
  v31.i64[0] = *(_QWORD *)v23;
  v31.i32[2] = *(_DWORD *)(v23 + 8);
  v31 = vmlsq_lane_f32(v31, v33, v19, 0);
  v39 = (float32x2_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 1), *(float32x2_t *)v31.f32, 1), v39, v39).f32[0] <= v24)
  {
    v40 = v16[17246] ? 2 : 1;
    **(_BYTE **)(v17 + 24) = v40;
    if (v30)
      return 0;
  }
LABEL_21:
  *(int32x2_t *)v33.f32 = vadd_s32(v14, (int32x2_t)0x600000006);
  v41 = (char)v16[17286];
  *(float32x2_t *)v31.f32 = vcvt_f32_s32(*(int32x2_t *)v33.f32);
  v42 = v31;
  v42.f32[2] = (float)v15;
  v43.i64[0] = 0x3F0000003F000000;
  v43.i64[1] = 0x3F0000003F000000;
  if (v16[17286])
  {
    v44 = vaddq_f32(v42, v43);
    if (v41 > 0)
      goto LABEL_31;
  }
  else
  {
    v11.i8[0] = v16[17283];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[17284];
    v45 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v45.i32 = (float)v45.i32[0];
    v11.i32[1] = v45.i32[0];
    v45.i8[0] = v16[17285];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v45)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v46 = vaddq_f32(v42, v43);
    v43 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v44 = vaddq_f32(v46, v43);
    if (v41 > 0)
      goto LABEL_31;
  }
  v43.i64[0] = *(_QWORD *)v23;
  v43.i32[2] = *(_DWORD *)(v23 + 8);
  v47 = (int8x16_t)vmlsq_lane_f32(v43, v44, v19, 0);
  v11.i64[0] = vextq_s8(v47, v47, 8uLL).u64[0];
  *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), *(float32x2_t *)v47.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
  if (v12.f32[0] <= v24)
  {
    v48 = v16[17286] ? 2 : 1;
    **(_BYTE **)(v17 + 24) = v48;
    if (v41)
      return 0;
  }
LABEL_31:
  v49 = v15 + 1;
  v50 = (char)v16[17326];
  if (v16[17326])
  {
    v51 = v31;
    v51.f32[2] = (float)v49;
    v52.i64[0] = 0x3F0000003F000000;
    v52.i64[1] = 0x3F0000003F000000;
    v53 = vaddq_f32(v51, v52);
    if (v50 > 0)
      goto LABEL_41;
  }
  else
  {
    v54 = v31;
    v54.f32[2] = (float)v49;
    v55.i64[0] = 0x3F0000003F000000;
    v55.i64[1] = 0x3F0000003F000000;
    v11.i8[0] = v16[17323];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[17324];
    v56 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v56.i32 = (float)v56.i32[0];
    v11.i32[1] = v56.i32[0];
    v56.i8[0] = v16[17325];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v56)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v57 = vaddq_f32(v54, v55);
    v51 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v53 = vaddq_f32(v57, v51);
    if (v50 > 0)
      goto LABEL_41;
  }
  v51.i64[0] = *(_QWORD *)v23;
  v51.i32[2] = *(_DWORD *)(v23 + 8);
  v58 = (int8x16_t)vmlsq_lane_f32(v51, v53, v19, 0);
  v11.i64[0] = vextq_s8(v58, v58, 8uLL).u64[0];
  *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 1), *(float32x2_t *)v58.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
  if (v12.f32[0] <= v24)
  {
    v59 = v16[17326] ? 2 : 1;
    **(_BYTE **)(v17 + 24) = v59;
    if (v50)
      return 0;
  }
LABEL_41:
  v60 = v14.i32[1] + 7;
  v61 = (char)v16[17366];
  if (v16[17366])
  {
    v62 = v33;
    v62.i32[1] = v14.i32[1] + 7;
    *(float32x2_t *)v62.f32 = vcvt_f32_s32(*(int32x2_t *)v62.f32);
    v62.f32[2] = (float)v15;
    v63.i64[0] = 0x3F0000003F000000;
    v63.i64[1] = 0x3F0000003F000000;
    v64 = vaddq_f32(v62, v63);
    if (v61 > 0)
      goto LABEL_51;
  }
  else
  {
    v65 = v33;
    v65.i32[1] = v14.i32[1] + 7;
    *(float32x2_t *)v65.f32 = vcvt_f32_s32(*(int32x2_t *)v65.f32);
    v65.f32[2] = (float)v15;
    v66.i64[0] = 0x3F0000003F000000;
    v66.i64[1] = 0x3F0000003F000000;
    v11.i8[0] = v16[17363];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[17364];
    v67 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v67.i32 = (float)v67.i32[0];
    v11.i32[1] = v67.i32[0];
    v67.i8[0] = v16[17365];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v67)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v68 = vaddq_f32(v65, v66);
    v63 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v64 = vaddq_f32(v68, v63);
    if (v61 > 0)
      goto LABEL_51;
  }
  v63.i64[0] = *(_QWORD *)v23;
  v63.i32[2] = *(_DWORD *)(v23 + 8);
  v69 = (int8x16_t)vmlsq_lane_f32(v63, v64, v19, 0);
  v11.i64[0] = vextq_s8(v69, v69, 8uLL).u64[0];
  *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v69.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.i8, 1), *(float32x2_t *)v69.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
  if (v12.f32[0] <= v24)
  {
    v70 = v16[17366] ? 2 : 1;
    **(_BYTE **)(v17 + 24) = v70;
    if (v61)
      return 0;
  }
LABEL_51:
  v71 = (char)v16[17406];
  if (v16[17406])
  {
    v72 = v33;
    v72.i32[1] = v14.i32[1] + 7;
    *(float32x2_t *)v72.f32 = vcvt_f32_s32(*(int32x2_t *)v72.f32);
    v72.f32[2] = (float)v49;
    v73.i64[0] = 0x3F0000003F000000;
    v73.i64[1] = 0x3F0000003F000000;
    v74 = vaddq_f32(v72, v73);
    if (v71 > 0)
      goto LABEL_61;
  }
  else
  {
    v75 = v33;
    v75.i32[1] = v14.i32[1] + 7;
    *(float32x2_t *)v75.f32 = vcvt_f32_s32(*(int32x2_t *)v75.f32);
    v75.f32[2] = (float)v49;
    v76.i64[0] = 0x3F0000003F000000;
    v76.i64[1] = 0x3F0000003F000000;
    v11.i8[0] = v16[17403];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[17404];
    v77 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v77.i32 = (float)v77.i32[0];
    v11.i32[1] = v77.i32[0];
    v77.i8[0] = v16[17405];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v77)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v78 = vaddq_f32(v75, v76);
    v73 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v74 = vaddq_f32(v78, v73);
    if (v71 > 0)
      goto LABEL_61;
  }
  v73.i64[0] = *(_QWORD *)v23;
  v73.i32[2] = *(_DWORD *)(v23 + 8);
  v79 = (int8x16_t)vmlsq_lane_f32(v73, v74, v19, 0);
  v11.i64[0] = vextq_s8(v79, v79, 8uLL).u64[0];
  *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 1), *(float32x2_t *)v79.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
  if (v12.f32[0] <= v24)
  {
    v80 = v16[17406] ? 2 : 1;
    **(_BYTE **)(v17 + 24) = v80;
    if (v71)
      return 0;
  }
LABEL_61:
  v81 = (char)v16[17446];
  *(float32x2_t *)v74.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000007));
  v74.f32[2] = (float)v15;
  v82.i64[0] = 0x3F0000003F000000;
  v82.i64[1] = 0x3F0000003F000000;
  if (!v16[17446])
  {
    v11.i8[0] = v16[17443];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[17444];
    v83 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v83.i32 = (float)v83.i32[0];
    v11.i32[1] = v83.i32[0];
    v83.i8[0] = v16[17445];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v83)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v74 = vaddq_f32(v74, v82);
    v82 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v84 = vaddq_f32(v74, v82);
  if (v81 <= 0)
  {
    v82.i64[0] = *(_QWORD *)v23;
    v82.i32[2] = *(_DWORD *)(v23 + 8);
    v85 = (int8x16_t)vmlsq_lane_f32(v82, v84, v19, 0);
    v11.i64[0] = vextq_s8(v85, v85, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.i8, 1), *(float32x2_t *)v85.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v24)
    {
      v86 = v16[17446] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v86;
      if (v81)
        return 0;
    }
  }
  v87 = (char)v16[17486];
  if (v16[17486])
  {
    *(float32x2_t *)v84.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000007));
    v84.f32[2] = (float)v49;
    v88.i64[0] = 0x3F0000003F000000;
    v88.i64[1] = 0x3F0000003F000000;
    v89 = vaddq_f32(v84, v88);
    if (v87 > 0)
      goto LABEL_80;
  }
  else
  {
    *(float32x2_t *)v84.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000007));
    v84.f32[2] = (float)v49;
    v90.i64[0] = 0x3F0000003F000000;
    v90.i64[1] = 0x3F0000003F000000;
    v11.i8[0] = v16[17483];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[17484];
    v91 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v91.i32 = (float)v91.i32[0];
    v11.i32[1] = v91.i32[0];
    v91.i8[0] = v16[17485];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v91)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v92 = vaddq_f32(v84, v90);
    v88 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v89 = vaddq_f32(v92, v88);
    if (v87 > 0)
      goto LABEL_80;
  }
  v88.i64[0] = *(_QWORD *)v23;
  v88.i32[2] = *(_DWORD *)(v23 + 8);
  v88 = vmlsq_lane_f32(v88, v89, v19, 0);
  v11.i64[0] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
  *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v88.f32, 1), *(float32x2_t *)v88.f32, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
  if (v12.f32[0] <= v24)
  {
    v93 = v16[17486] ? 2 : 1;
    **(_BYTE **)(v17 + 24) = v93;
    if (v87)
      return 0;
  }
LABEL_80:
  v94 = (char)v16[17526];
  if (v16[17526])
  {
    v95 = a4;
    v95.i32[1] = v14.i32[1] + 7;
    *(float32x2_t *)v95.f32 = vcvt_f32_s32(*(int32x2_t *)v95.f32);
    v95.f32[2] = (float)v15;
    v96.i64[0] = 0x3F0000003F000000;
    v96.i64[1] = 0x3F0000003F000000;
    v97 = vaddq_f32(v95, v96);
    if (v94 > 0)
      goto LABEL_90;
  }
  else
  {
    v98 = a4;
    v98.i32[1] = v14.i32[1] + 7;
    *(float32x2_t *)v98.f32 = vcvt_f32_s32(*(int32x2_t *)v98.f32);
    v98.f32[2] = (float)v15;
    v99.i64[0] = 0x3F0000003F000000;
    v99.i64[1] = 0x3F0000003F000000;
    v88.i8[0] = v16[17523];
    v88 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32));
    v88.f32[0] = (float)v88.i32[0];
    v11.i8[0] = v16[17524];
    v100 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32)).u64[0];
    *(float *)v100.i32 = (float)v100.i32[0];
    v88.i32[1] = v100.i32[0];
    v100.i8[0] = v16[17525];
    v11.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v100)).u64[0];
    v11.f32[0] = (float)v11.i32[0];
    v88.i32[2] = v11.i32[0];
    v101 = vaddq_f32(v98, v99);
    v95 = vmulq_f32(v88, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v97 = vaddq_f32(v101, v95);
    if (v94 > 0)
      goto LABEL_90;
  }
  v95.i64[0] = *(_QWORD *)v23;
  v95.i32[2] = *(_DWORD *)(v23 + 8);
  v102 = (int8x16_t)vmlsq_lane_f32(v95, v97, v19, 0);
  v88.i64[0] = vextq_s8(v102, v102, 8uLL).u64[0];
  *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v102.i8, 1), *(float32x2_t *)v102.i8, 1), *(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
  if (v11.f32[0] <= v24)
  {
    v103 = v16[17526] ? 2 : 1;
    **(_BYTE **)(v17 + 24) = v103;
    if (v94)
      return 0;
  }
LABEL_90:
  v104 = (char)v16[17566];
  v105 = a4;
  v105.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v105.f32 = vcvt_f32_s32(*(int32x2_t *)v105.f32);
  v105.f32[2] = (float)v49;
  v106.i64[0] = 0x3F0000003F000000;
  v106.i64[1] = 0x3F0000003F000000;
  if (!v16[17566])
  {
    v88.i8[0] = v16[17563];
    v88 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32));
    v88.f32[0] = (float)v88.i32[0];
    v11.i8[0] = v16[17564];
    v107 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32)).u64[0];
    *(float *)v107.i32 = (float)v107.i32[0];
    v88.i32[1] = v107.i32[0];
    v107.i8[0] = v16[17565];
    v11.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v107)).u64[0];
    v11.f32[0] = (float)v11.i32[0];
    v88.i32[2] = v11.i32[0];
    v105 = vaddq_f32(v105, v106);
    v106 = vmulq_f32(v88, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v108 = vaddq_f32(v105, v106);
  if (v104 <= 0)
  {
    v106.i64[0] = *(_QWORD *)v23;
    v106.i32[2] = *(_DWORD *)(v23 + 8);
    v109 = (int8x16_t)vmlsq_lane_f32(v106, v108, v19, 0);
    v88.i64[0] = vextq_s8(v109, v109, 8uLL).u64[0];
    *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.i8, 1), *(float32x2_t *)v109.i8, 1), *(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
    if (v11.f32[0] <= v24)
    {
      v110 = v16[17566] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v110;
      if (v104)
        return 0;
    }
  }
  v111 = (char)v16[17606];
  v112 = v31;
  v112.f32[2] = (float)(v15 + 2);
  v113.i64[0] = 0x3F0000003F000000;
  v113.i64[1] = 0x3F0000003F000000;
  if (!v16[17606])
  {
    v88.i8[0] = v16[17603];
    v88 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32));
    v88.f32[0] = (float)v88.i32[0];
    v11.i8[0] = v16[17604];
    v114 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32)).u64[0];
    *(float *)v114.i32 = (float)v114.i32[0];
    v88.i32[1] = v114.i32[0];
    v114.i8[0] = v16[17605];
    v11.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v114)).u64[0];
    v11.f32[0] = (float)v11.i32[0];
    v88.i32[2] = v11.i32[0];
    v112 = vaddq_f32(v112, v113);
    v113 = vmulq_f32(v88, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v115 = vaddq_f32(v112, v113);
  if (v111 <= 0)
  {
    v113.i64[0] = *(_QWORD *)v23;
    v113.i32[2] = *(_DWORD *)(v23 + 8);
    v116 = (int8x16_t)vmlsq_lane_f32(v113, v115, v19, 0);
    v88.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
    *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v116.i8, *(float32x2_t *)v116.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.i8, 1), *(float32x2_t *)v116.i8, 1), *(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
    if (v11.f32[0] <= v24)
    {
      v117 = v16[17606] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v117;
      if (v111)
        return 0;
    }
  }
  v118 = (char)v16[17646];
  v119 = v31;
  v119.f32[2] = (float)v29;
  v120.i64[0] = 0x3F0000003F000000;
  v120.i64[1] = 0x3F0000003F000000;
  if (v16[17646])
  {
    v121 = vaddq_f32(v119, v120);
  }
  else
  {
    v88.i8[0] = v16[17643];
    v88 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32));
    v88.f32[0] = (float)v88.i32[0];
    v11.i8[0] = v16[17644];
    v122 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32)).u64[0];
    *(float *)v122.i32 = (float)v122.i32[0];
    v88.i32[1] = v122.i32[0];
    v122.i8[0] = v16[17645];
    v11.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v122)).u64[0];
    v11.f32[0] = (float)v11.i32[0];
    v88.i32[2] = v11.i32[0];
    v123 = vaddq_f32(v119, v120);
    v119 = vmulq_f32(v88, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v121 = vaddq_f32(v123, v119);
  }
  if (v118 <= 0)
  {
    v119.i64[0] = *(_QWORD *)v23;
    v119.i32[2] = *(_DWORD *)(v23 + 8);
    v124 = (int8x16_t)vmlsq_lane_f32(v119, v121, v19, 0);
    v88.i64[0] = vextq_s8(v124, v124, 8uLL).u64[0];
    *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v124.i8, *(float32x2_t *)v124.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v124.i8, 1), *(float32x2_t *)v124.i8, 1), *(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
    if (v11.f32[0] <= v24)
    {
      v125 = v16[17646] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v125;
      if (v118)
        return 0;
    }
  }
  v126 = (char)v16[17686];
  v127 = v33;
  v127.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v127.f32 = vcvt_f32_s32(*(int32x2_t *)v127.f32);
  v127.f32[2] = (float)(v15 + 2);
  v128.i64[0] = 0x3F0000003F000000;
  v128.i64[1] = 0x3F0000003F000000;
  if (!v16[17686])
  {
    v88.i8[0] = v16[17683];
    v88 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32));
    v88.f32[0] = (float)v88.i32[0];
    v11.i8[0] = v16[17684];
    v129 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32)).u64[0];
    *(float *)v129.i32 = (float)v129.i32[0];
    v88.i32[1] = v129.i32[0];
    v129.i8[0] = v16[17685];
    v11.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v129)).u64[0];
    v11.f32[0] = (float)v11.i32[0];
    v88.i32[2] = v11.i32[0];
    v127 = vaddq_f32(v127, v128);
    v128 = vmulq_f32(v88, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v130 = vaddq_f32(v127, v128);
  if (v126 <= 0)
  {
    v128.i64[0] = *(_QWORD *)v23;
    v128.i32[2] = *(_DWORD *)(v23 + 8);
    v131 = (int8x16_t)vmlsq_lane_f32(v128, v130, v19, 0);
    v88.i64[0] = vextq_s8(v131, v131, 8uLL).u64[0];
    *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v131.i8, *(float32x2_t *)v131.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v131.i8, 1), *(float32x2_t *)v131.i8, 1), *(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
    if (v11.f32[0] <= v24)
    {
      v132 = v16[17686] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v132;
      if (v126)
        return 0;
    }
  }
  v133 = (char)v16[17726];
  v134 = v33;
  v134.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v134.f32 = vcvt_f32_s32(*(int32x2_t *)v134.f32);
  v134.f32[2] = (float)v29;
  v135.i64[0] = 0x3F0000003F000000;
  v135.i64[1] = 0x3F0000003F000000;
  if (!v16[17726])
  {
    v88.i8[0] = v16[17723];
    v88 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32));
    v88.f32[0] = (float)v88.i32[0];
    v11.i8[0] = v16[17724];
    v136 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32)).u64[0];
    *(float *)v136.i32 = (float)v136.i32[0];
    v88.i32[1] = v136.i32[0];
    v136.i8[0] = v16[17725];
    v11.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v136)).u64[0];
    v11.f32[0] = (float)v11.i32[0];
    v88.i32[2] = v11.i32[0];
    v134 = vaddq_f32(v134, v135);
    v135 = vmulq_f32(v88, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v137 = vaddq_f32(v134, v135);
  if (v133 <= 0)
  {
    v135.i64[0] = *(_QWORD *)v23;
    v135.i32[2] = *(_DWORD *)(v23 + 8);
    v138 = (int8x16_t)vmlsq_lane_f32(v135, v137, v19, 0);
    v88.i64[0] = vextq_s8(v138, v138, 8uLL).u64[0];
    *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v138.i8, *(float32x2_t *)v138.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v138.i8, 1), *(float32x2_t *)v138.i8, 1), *(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
    if (v11.f32[0] <= v24)
    {
      v139 = v16[17726] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v139;
      if (v133)
        return 0;
    }
  }
  v140 = (char)v16[17766];
  *(float32x2_t *)v137.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000007));
  v137.f32[2] = (float)(v15 + 2);
  v141.i64[0] = 0x3F0000003F000000;
  v141.i64[1] = 0x3F0000003F000000;
  if (!v16[17766])
  {
    v88.i8[0] = v16[17763];
    v88 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32));
    v88.f32[0] = (float)v88.i32[0];
    v11.i8[0] = v16[17764];
    v142 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32)).u64[0];
    *(float *)v142.i32 = (float)v142.i32[0];
    v88.i32[1] = v142.i32[0];
    v142.i8[0] = v16[17765];
    v11.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v142)).u64[0];
    v11.f32[0] = (float)v11.i32[0];
    v88.i32[2] = v11.i32[0];
    v137 = vaddq_f32(v137, v141);
    v141 = vmulq_f32(v88, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v143 = vaddq_f32(v137, v141);
  if (v140 <= 0)
  {
    v141.i64[0] = *(_QWORD *)v23;
    v141.i32[2] = *(_DWORD *)(v23 + 8);
    v144 = (int8x16_t)vmlsq_lane_f32(v141, v143, v19, 0);
    v88.i64[0] = vextq_s8(v144, v144, 8uLL).u64[0];
    *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v144.i8, 1), *(float32x2_t *)v144.i8, 1), *(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
    if (v11.f32[0] <= v24)
    {
      v145 = v16[17766] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v145;
      if (v140)
        return 0;
    }
  }
  v146 = (char)v16[17806];
  *(float32x2_t *)v143.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000007));
  v143.f32[2] = (float)v29;
  v147.i64[0] = 0x3F0000003F000000;
  v147.i64[1] = 0x3F0000003F000000;
  if (!v16[17806])
  {
    v88.i8[0] = v16[17803];
    v88 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32));
    v88.f32[0] = (float)v88.i32[0];
    v11.i8[0] = v16[17804];
    v148 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32)).u64[0];
    *(float *)v148.i32 = (float)v148.i32[0];
    v88.i32[1] = v148.i32[0];
    v148.i8[0] = v16[17805];
    v11.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v148)).u64[0];
    v11.f32[0] = (float)v11.i32[0];
    v88.i32[2] = v11.i32[0];
    v143 = vaddq_f32(v143, v147);
    v147 = vmulq_f32(v88, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v149 = vaddq_f32(v143, v147);
  if (v146 <= 0)
  {
    v147.i64[0] = *(_QWORD *)v23;
    v147.i32[2] = *(_DWORD *)(v23 + 8);
    v147 = vmlsq_lane_f32(v147, v149, v19, 0);
    v88.i64[0] = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u64[0];
    *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v147.f32, 1), *(float32x2_t *)v147.f32, 1), *(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
    if (v11.f32[0] <= v24)
    {
      v150 = v16[17806] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v150;
      if (v146)
        return 0;
    }
  }
  v151 = (char)v16[17846];
  v152 = a4;
  v152.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v152.f32 = vcvt_f32_s32(*(int32x2_t *)v152.f32);
  v152.f32[2] = (float)(v15 + 2);
  v153.i64[0] = 0x3F0000003F000000;
  v153.i64[1] = 0x3F0000003F000000;
  if (v16[17846])
  {
    v154 = vaddq_f32(v152, v153);
  }
  else
  {
    v147.i8[0] = v16[17843];
    v147 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v147.f32));
    v147.f32[0] = (float)v147.i32[0];
    v88.i8[0] = v16[17844];
    v155 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32)).u64[0];
    *(float *)v155.i32 = (float)v155.i32[0];
    v147.i32[1] = v155.i32[0];
    v155.i8[0] = v16[17845];
    v88.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v155)).u64[0];
    v88.f32[0] = (float)v88.i32[0];
    v147.i32[2] = v88.i32[0];
    v156 = vaddq_f32(v152, v153);
    v152 = vmulq_f32(v147, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v154 = vaddq_f32(v156, v152);
  }
  if (v151 <= 0)
  {
    v152.i64[0] = *(_QWORD *)v23;
    v152.i32[2] = *(_DWORD *)(v23 + 8);
    v157 = (int8x16_t)vmlsq_lane_f32(v152, v154, v19, 0);
    v147 = (float32x4_t)vextq_s8(v157, v157, 8uLL);
    *(float32x2_t *)v88.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v157.i8, *(float32x2_t *)v157.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v157.i8, 1), *(float32x2_t *)v157.i8, 1), *(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
    if (v88.f32[0] <= v24)
    {
      v158 = v16[17846] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v158;
      if (v151)
        return 0;
    }
  }
  v159 = (char)v16[17886];
  v160 = a4;
  v160.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v160.f32 = vcvt_f32_s32(*(int32x2_t *)v160.f32);
  v160.f32[2] = (float)v29;
  v161.i64[0] = 0x3F0000003F000000;
  v161.i64[1] = 0x3F0000003F000000;
  if (!v16[17886])
  {
    v147.i8[0] = v16[17883];
    v147 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v147.f32));
    v147.f32[0] = (float)v147.i32[0];
    v88.i8[0] = v16[17884];
    v162 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32)).u64[0];
    *(float *)v162.i32 = (float)v162.i32[0];
    v147.i32[1] = v162.i32[0];
    v162.i8[0] = v16[17885];
    v88.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v162)).u64[0];
    v88.f32[0] = (float)v88.i32[0];
    v147.i32[2] = v88.i32[0];
    v160 = vaddq_f32(v160, v161);
    v161 = vmulq_f32(v147, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v163 = vaddq_f32(v160, v161);
  if (v159 <= 0)
  {
    v161.i64[0] = *(_QWORD *)v23;
    v161.i32[2] = *(_DWORD *)(v23 + 8);
    v164 = (int8x16_t)vmlsq_lane_f32(v161, v163, v19, 0);
    v147 = (float32x4_t)vextq_s8(v164, v164, 8uLL);
    *(float32x2_t *)v88.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v164.i8, *(float32x2_t *)v164.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v164.i8, 1), *(float32x2_t *)v164.i8, 1), *(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
    if (v88.f32[0] <= v24)
    {
      v165 = v16[17886] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v165;
      if (v159)
        return 0;
    }
  }
  *(int32x2_t *)v147.f32 = vadd_s32(v14, (int32x2_t)0x400000004);
  v166 = v15 + 4;
  v167 = (char)v16[17926];
  *(float32x2_t *)v163.f32 = vcvt_f32_s32(*(int32x2_t *)v147.f32);
  v163.f32[2] = (float)(v15 + 4);
  v168.i64[0] = 0x3F0000003F000000;
  v168.i64[1] = 0x3F0000003F000000;
  if (!v16[17926])
  {
    v88.i8[0] = v16[17923];
    v169 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v88.f32));
    v169.f32[0] = (float)v169.i32[0];
    v11.i8[0] = v16[17924];
    v170 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32)).u64[0];
    *(float *)v170.i32 = (float)v170.i32[0];
    v169.i32[1] = v170.i32[0];
    v170.i8[0] = v16[17925];
    v11.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v170)).u64[0];
    v11.f32[0] = (float)v11.i32[0];
    v169.i32[2] = v11.i32[0];
    v163 = vaddq_f32(v163, v168);
    v168 = vmulq_f32(v169, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v171 = vaddq_f32(v163, v168);
  if (v167 <= 0)
  {
    v168.i64[0] = *(_QWORD *)v23;
    v168.i32[2] = *(_DWORD *)(v23 + 8);
    v168 = vmlsq_lane_f32(v168, v171, v19, 0);
    v172 = (float32x2_t)vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL).u64[0];
    *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v168.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v168.f32, 1), *(float32x2_t *)v168.f32, 1), v172, v172);
    if (v11.f32[0] <= v24)
    {
      v173 = v16[17926] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v173;
      if (v167)
        return 0;
    }
  }
  v174 = (char)v16[17966];
  v175 = (float)(v15 + 5);
  *(float32x2_t *)v168.f32 = vcvt_f32_s32(*(int32x2_t *)v147.f32);
  v168.f32[2] = v175;
  v176.i64[0] = 0x3F0000003F000000;
  v176.i64[1] = 0x3F0000003F000000;
  if (!v16[17966])
  {
    v11.i8[0] = v16[17963];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[17964];
    v177 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v177.i32 = (float)v177.i32[0];
    v11.i32[1] = v177.i32[0];
    v177.i8[0] = v16[17965];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v177)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v168 = vaddq_f32(v168, v176);
    v176 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v178 = vaddq_f32(v168, v176);
  if (v174 <= 0)
  {
    v176.i64[0] = *(_QWORD *)v23;
    v176.i32[2] = *(_DWORD *)(v23 + 8);
    v179 = (int8x16_t)vmlsq_lane_f32(v176, v178, v19, 0);
    v11.i64[0] = vextq_s8(v179, v179, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v179.i8, *(float32x2_t *)v179.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v179.i8, 1), *(float32x2_t *)v179.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v24)
    {
      v180 = v16[17966] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v180;
      if (v174)
        return 0;
    }
  }
  v181 = (char)v16[18006];
  *(float32x2_t *)v178.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x500000004));
  v178.f32[2] = (float)v166;
  v182.i64[0] = 0x3F0000003F000000;
  v182.i64[1] = 0x3F0000003F000000;
  if (!v16[18006])
  {
    v11.i8[0] = v16[18003];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[18004];
    v183 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v183.i32 = (float)v183.i32[0];
    v11.i32[1] = v183.i32[0];
    v183.i8[0] = v16[18005];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v183)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v178 = vaddq_f32(v178, v182);
    v182 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v184 = vaddq_f32(v178, v182);
  if (v181 <= 0)
  {
    v182.i64[0] = *(_QWORD *)v23;
    v182.i32[2] = *(_DWORD *)(v23 + 8);
    v185 = (int8x16_t)vmlsq_lane_f32(v182, v184, v19, 0);
    v11.i64[0] = vextq_s8(v185, v185, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v185.i8, *(float32x2_t *)v185.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v185.i8, 1), *(float32x2_t *)v185.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v24)
    {
      v186 = v16[18006] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v186;
      if (v181)
        return 0;
    }
  }
  v187 = (char)v16[18046];
  *(float32x2_t *)v184.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x500000004));
  v184.f32[2] = (float)(v15 + 5);
  v188.i64[0] = 0x3F0000003F000000;
  v188.i64[1] = 0x3F0000003F000000;
  if (!v16[18046])
  {
    v11.i8[0] = v16[18043];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[18044];
    v189 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v189.i32 = (float)v189.i32[0];
    v11.i32[1] = v189.i32[0];
    v189.i8[0] = v16[18045];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v189)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v184 = vaddq_f32(v184, v188);
    v188 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v190 = vaddq_f32(v184, v188);
  if (v187 <= 0)
  {
    v188.i64[0] = *(_QWORD *)v23;
    v188.i32[2] = *(_DWORD *)(v23 + 8);
    v191 = (int8x16_t)vmlsq_lane_f32(v188, v190, v19, 0);
    v11.i64[0] = vextq_s8(v191, v191, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v191.i8, 1), *(float32x2_t *)v191.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v24)
    {
      v192 = v16[18046] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v192;
      if (v187)
        return 0;
    }
  }
  v193 = v14.i32[0] + 5;
  v194 = (char)v16[18086];
  v195 = v147;
  v195.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v195.f32 = vcvt_f32_s32(*(int32x2_t *)v195.f32);
  v195.f32[2] = (float)v166;
  v196.i64[0] = 0x3F0000003F000000;
  v196.i64[1] = 0x3F0000003F000000;
  if (!v16[18086])
  {
    v11.i8[0] = v16[18083];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[18084];
    v197 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v197.i32 = (float)v197.i32[0];
    v11.i32[1] = v197.i32[0];
    v197.i8[0] = v16[18085];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v197)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v195 = vaddq_f32(v195, v196);
    v196 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v198 = vaddq_f32(v195, v196);
  if (v194 <= 0)
  {
    v196.i64[0] = *(_QWORD *)v23;
    v196.i32[2] = *(_DWORD *)(v23 + 8);
    v199 = (int8x16_t)vmlsq_lane_f32(v196, v198, v19, 0);
    v11.i64[0] = vextq_s8(v199, v199, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v199.i8, *(float32x2_t *)v199.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v199.i8, 1), *(float32x2_t *)v199.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v24)
    {
      v200 = v16[18086] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v200;
      if (v194)
        return 0;
    }
  }
  v201 = (char)v16[18126];
  v202 = v147;
  v202.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v202.f32 = vcvt_f32_s32(*(int32x2_t *)v202.f32);
  v202.f32[2] = (float)(v15 + 5);
  v203.i64[0] = 0x3F0000003F000000;
  v203.i64[1] = 0x3F0000003F000000;
  if (!v16[18126])
  {
    v11.i8[0] = v16[18123];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[18124];
    v204 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v204.i32 = (float)v204.i32[0];
    v11.i32[1] = v204.i32[0];
    v204.i8[0] = v16[18125];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v204)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v202 = vaddq_f32(v202, v203);
    v203 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v205 = vaddq_f32(v202, v203);
  if (v201 <= 0)
  {
    v203.i64[0] = *(_QWORD *)v23;
    v203.i32[2] = *(_DWORD *)(v23 + 8);
    v206 = (int8x16_t)vmlsq_lane_f32(v203, v205, v19, 0);
    v11.i64[0] = vextq_s8(v206, v206, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v206.i8, *(float32x2_t *)v206.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.i8, 1), *(float32x2_t *)v206.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v24)
    {
      v207 = v16[18126] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v207;
      if (v201)
        return 0;
    }
  }
  v208 = (char)v16[18166];
  v209 = a4;
  v209.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v209.f32 = vcvt_f32_s32(*(int32x2_t *)v209.f32);
  v209.f32[2] = (float)v166;
  v210.i64[0] = 0x3F0000003F000000;
  v210.i64[1] = 0x3F0000003F000000;
  if (!v16[18166])
  {
    v11.i8[0] = v16[18163];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[18164];
    v211 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v211.i32 = (float)v211.i32[0];
    v11.i32[1] = v211.i32[0];
    v211.i8[0] = v16[18165];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v211)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v209 = vaddq_f32(v209, v210);
    v210 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v212 = vaddq_f32(v209, v210);
  if (v208 <= 0)
  {
    v210.i64[0] = *(_QWORD *)v23;
    v210.i32[2] = *(_DWORD *)(v23 + 8);
    v213 = (int8x16_t)vmlsq_lane_f32(v210, v212, v19, 0);
    v11.i64[0] = vextq_s8(v213, v213, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v213.i8, *(float32x2_t *)v213.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v213.i8, 1), *(float32x2_t *)v213.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v24)
    {
      v214 = v16[18166] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v214;
      if (v208)
        return 0;
    }
  }
  v215 = (char)v16[18206];
  v216 = a4;
  v216.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v216.f32 = vcvt_f32_s32(*(int32x2_t *)v216.f32);
  v216.f32[2] = (float)(v15 + 5);
  v217.i64[0] = 0x3F0000003F000000;
  v217.i64[1] = 0x3F0000003F000000;
  if (!v16[18206])
  {
    v11.i8[0] = v16[18203];
    v11 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v11.f32[0] = (float)v11.i32[0];
    v12.i8[0] = v16[18204];
    v218 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v218.i32 = (float)v218.i32[0];
    v11.i32[1] = v218.i32[0];
    v218.i8[0] = v16[18205];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v218)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v11.i32[2] = v12.i32[0];
    v216 = vaddq_f32(v216, v217);
    v217 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v219 = vaddq_f32(v216, v217);
  if (v215 <= 0)
  {
    v217.i64[0] = *(_QWORD *)v23;
    v217.i32[2] = *(_DWORD *)(v23 + 8);
    v220 = (int8x16_t)vmlsq_lane_f32(v217, v219, v19, 0);
    v11.i64[0] = vextq_s8(v220, v220, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v220.i8, *(float32x2_t *)v220.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v220.i8, 1), *(float32x2_t *)v220.i8, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    if (v12.f32[0] <= v24)
    {
      v221 = v16[18206] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v221;
      if (v215)
        return 0;
    }
  }
  v222 = v15 + 6;
  v223 = (char)v16[18246];
  *(float32x2_t *)v219.f32 = vcvt_f32_s32(*(int32x2_t *)v147.f32);
  v219.f32[2] = (float)(v15 + 6);
  v224.i64[0] = 0x3F0000003F000000;
  v224.i64[1] = 0x3F0000003F000000;
  if (!v16[18246])
  {
    v11.i8[0] = v16[18243];
    v225 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v11.f32));
    v225.f32[0] = (float)v225.i32[0];
    v12.i8[0] = v16[18244];
    v226 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v226.i32 = (float)v226.i32[0];
    v225.i32[1] = v226.i32[0];
    v226.i8[0] = v16[18245];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v226)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v225.i32[2] = v12.i32[0];
    v219 = vaddq_f32(v219, v224);
    v224 = vmulq_f32(v225, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v227 = vaddq_f32(v219, v224);
  if (v223 <= 0)
  {
    v224.i64[0] = *(_QWORD *)v23;
    v224.i32[2] = *(_DWORD *)(v23 + 8);
    v224 = vmlsq_lane_f32(v224, v227, v19, 0);
    v228 = (float32x2_t)vextq_s8((int8x16_t)v224, (int8x16_t)v224, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v224.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v224.f32, 1), *(float32x2_t *)v224.f32, 1), v228, v228);
    if (v12.f32[0] <= v24)
    {
      v229 = v16[18246] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v229;
      if (v223)
        return 0;
    }
  }
  v230 = v15 + 7;
  v231 = (char)v16[18286];
  *(float *)&v232 = (float)v230;
  *(float32x2_t *)v224.f32 = vcvt_f32_s32(*(int32x2_t *)v147.f32);
  v224.f32[2] = (float)v230;
  v233.i64[0] = 0x3F0000003F000000;
  v233.i64[1] = 0x3F0000003F000000;
  if (!v16[18286])
  {
    v12.i8[0] = v16[18283];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18284];
    v234 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v234.i32 = (float)v234.i32[0];
    v12.i32[1] = v234.i32[0];
    v234.i8[0] = v16[18285];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v234)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v224 = vaddq_f32(v224, v233);
    v233 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v235 = vaddq_f32(v224, v233);
  if (v231 <= 0)
  {
    v233.i64[0] = *(_QWORD *)v23;
    v233.i32[2] = *(_DWORD *)(v23 + 8);
    v236 = (int8x16_t)vmlsq_lane_f32(v233, v235, v19, 0);
    v12.i64[0] = vextq_s8(v236, v236, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v236.i8, *(float32x2_t *)v236.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v236.i8, 1), *(float32x2_t *)v236.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v237 = v16[18286] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v237;
      if (v231)
        return 0;
    }
  }
  v238 = (char)v16[18326];
  *(float32x2_t *)v235.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x500000004));
  v235.f32[2] = (float)v222;
  v239.i64[0] = 0x3F0000003F000000;
  v239.i64[1] = 0x3F0000003F000000;
  if (!v16[18326])
  {
    v12.i8[0] = v16[18323];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18324];
    v240 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v240.i32 = (float)v240.i32[0];
    v12.i32[1] = v240.i32[0];
    v240.i8[0] = v16[18325];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v240)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v235 = vaddq_f32(v235, v239);
    v239 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v241 = vaddq_f32(v235, v239);
  if (v238 <= 0)
  {
    v239.i64[0] = *(_QWORD *)v23;
    v239.i32[2] = *(_DWORD *)(v23 + 8);
    v242 = (int8x16_t)vmlsq_lane_f32(v239, v241, v19, 0);
    v12.i64[0] = vextq_s8(v242, v242, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v242.i8, *(float32x2_t *)v242.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v242.i8, 1), *(float32x2_t *)v242.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v243 = v16[18326] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v243;
      if (v238)
        return 0;
    }
  }
  v244 = (char)v16[18366];
  *(float32x2_t *)v241.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x500000004));
  v241.i32[2] = v232;
  v245.i64[0] = 0x3F0000003F000000;
  v245.i64[1] = 0x3F0000003F000000;
  if (!v16[18366])
  {
    v12.i8[0] = v16[18363];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18364];
    v246 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v246.i32 = (float)v246.i32[0];
    v12.i32[1] = v246.i32[0];
    v246.i8[0] = v16[18365];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v246)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v241 = vaddq_f32(v241, v245);
    v245 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v247 = vaddq_f32(v241, v245);
  if (v244 <= 0)
  {
    v245.i64[0] = *(_QWORD *)v23;
    v245.i32[2] = *(_DWORD *)(v23 + 8);
    v248 = (int8x16_t)vmlsq_lane_f32(v245, v247, v19, 0);
    v12.i64[0] = vextq_s8(v248, v248, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v248.i8, *(float32x2_t *)v248.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v248.i8, 1), *(float32x2_t *)v248.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v249 = v16[18366] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v249;
      if (v244)
        return 0;
    }
  }
  v250 = (char)v16[18406];
  v251 = v147;
  v251.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v251.f32 = vcvt_f32_s32(*(int32x2_t *)v251.f32);
  v251.f32[2] = (float)v222;
  v252.i64[0] = 0x3F0000003F000000;
  v252.i64[1] = 0x3F0000003F000000;
  if (!v16[18406])
  {
    v12.i8[0] = v16[18403];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18404];
    v253 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v253.i32 = (float)v253.i32[0];
    v12.i32[1] = v253.i32[0];
    v253.i8[0] = v16[18405];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v253)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v251 = vaddq_f32(v251, v252);
    v252 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v254 = vaddq_f32(v251, v252);
  if (v250 <= 0)
  {
    v252.i64[0] = *(_QWORD *)v23;
    v252.i32[2] = *(_DWORD *)(v23 + 8);
    v255 = (int8x16_t)vmlsq_lane_f32(v252, v254, v19, 0);
    v12.i64[0] = vextq_s8(v255, v255, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v255.i8, *(float32x2_t *)v255.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v255.i8, 1), *(float32x2_t *)v255.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v256 = v16[18406] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v256;
      if (v250)
        return 0;
    }
  }
  v257 = (char)v16[18446];
  v258 = v147;
  v258.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v258.f32 = vcvt_f32_s32(*(int32x2_t *)v258.f32);
  v258.i32[2] = v232;
  v259.i64[0] = 0x3F0000003F000000;
  v259.i64[1] = 0x3F0000003F000000;
  if (!v16[18446])
  {
    v12.i8[0] = v16[18443];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18444];
    v260 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v260.i32 = (float)v260.i32[0];
    v12.i32[1] = v260.i32[0];
    v260.i8[0] = v16[18445];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v260)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v258 = vaddq_f32(v258, v259);
    v259 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v261 = vaddq_f32(v258, v259);
  if (v257 <= 0)
  {
    v259.i64[0] = *(_QWORD *)v23;
    v259.i32[2] = *(_DWORD *)(v23 + 8);
    v262 = (int8x16_t)vmlsq_lane_f32(v259, v261, v19, 0);
    v12.i64[0] = vextq_s8(v262, v262, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v262.i8, *(float32x2_t *)v262.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v262.i8, 1), *(float32x2_t *)v262.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v263 = v16[18446] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v263;
      if (v257)
        return 0;
    }
  }
  v264 = (char)v16[18486];
  v265 = a4;
  v265.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v265.f32 = vcvt_f32_s32(*(int32x2_t *)v265.f32);
  v265.f32[2] = (float)v222;
  v266.i64[0] = 0x3F0000003F000000;
  v266.i64[1] = 0x3F0000003F000000;
  if (!v16[18486])
  {
    v12.i8[0] = v16[18483];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18484];
    v267 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v267.i32 = (float)v267.i32[0];
    v12.i32[1] = v267.i32[0];
    v267.i8[0] = v16[18485];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v267)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v265 = vaddq_f32(v265, v266);
    v266 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v268 = vaddq_f32(v265, v266);
  if (v264 <= 0)
  {
    v266.i64[0] = *(_QWORD *)v23;
    v266.i32[2] = *(_DWORD *)(v23 + 8);
    v269 = (int8x16_t)vmlsq_lane_f32(v266, v268, v19, 0);
    v12.i64[0] = vextq_s8(v269, v269, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v269.i8, *(float32x2_t *)v269.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v269.i8, 1), *(float32x2_t *)v269.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v270 = v16[18486] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v270;
      if (v264)
        return 0;
    }
  }
  v271 = (char)v16[18526];
  v272 = a4;
  v272.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v272.f32 = vcvt_f32_s32(*(int32x2_t *)v272.f32);
  v272.i32[2] = v232;
  v273.i64[0] = 0x3F0000003F000000;
  v273.i64[1] = 0x3F0000003F000000;
  if (!v16[18526])
  {
    v12.i8[0] = v16[18523];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18524];
    v274 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v274.i32 = (float)v274.i32[0];
    v12.i32[1] = v274.i32[0];
    v274.i8[0] = v16[18525];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v274)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v272 = vaddq_f32(v272, v273);
    v273 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v275 = vaddq_f32(v272, v273);
  if (v271 <= 0)
  {
    v273.i64[0] = *(_QWORD *)v23;
    v273.i32[2] = *(_DWORD *)(v23 + 8);
    v276 = (int8x16_t)vmlsq_lane_f32(v273, v275, v19, 0);
    v12.i64[0] = vextq_s8(v276, v276, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v276.i8, *(float32x2_t *)v276.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v276.i8, 1), *(float32x2_t *)v276.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v277 = v16[18526] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v277;
      if (v271)
        return 0;
    }
  }
  v278 = (char)v16[18566];
  *(float32x2_t *)v275.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000004));
  v275.f32[2] = (float)v166;
  v279.i64[0] = 0x3F0000003F000000;
  v279.i64[1] = 0x3F0000003F000000;
  if (!v16[18566])
  {
    v12.i8[0] = v16[18563];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18564];
    v280 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v280.i32 = (float)v280.i32[0];
    v12.i32[1] = v280.i32[0];
    v280.i8[0] = v16[18565];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v280)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v275 = vaddq_f32(v275, v279);
    v279 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v281 = vaddq_f32(v275, v279);
  if (v278 <= 0)
  {
    v279.i64[0] = *(_QWORD *)v23;
    v279.i32[2] = *(_DWORD *)(v23 + 8);
    v282 = (int8x16_t)vmlsq_lane_f32(v279, v281, v19, 0);
    v12.i64[0] = vextq_s8(v282, v282, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v282.i8, *(float32x2_t *)v282.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v282.i8, 1), *(float32x2_t *)v282.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v283 = v16[18566] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v283;
      if (v278)
        return 0;
    }
  }
  v284 = (char)v16[18606];
  *(float32x2_t *)v281.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000004));
  v281.f32[2] = v175;
  v285.i64[0] = 0x3F0000003F000000;
  v285.i64[1] = 0x3F0000003F000000;
  if (!v16[18606])
  {
    v12.i8[0] = v16[18603];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18604];
    v286 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v286.i32 = (float)v286.i32[0];
    v12.i32[1] = v286.i32[0];
    v286.i8[0] = v16[18605];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v286)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v281 = vaddq_f32(v281, v285);
    v285 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v287 = vaddq_f32(v281, v285);
  if (v284 <= 0)
  {
    v285.i64[0] = *(_QWORD *)v23;
    v285.i32[2] = *(_DWORD *)(v23 + 8);
    v288 = (int8x16_t)vmlsq_lane_f32(v285, v287, v19, 0);
    v12.i64[0] = vextq_s8(v288, v288, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v288.i8, *(float32x2_t *)v288.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v288.i8, 1), *(float32x2_t *)v288.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v289 = v16[18606] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v289;
      if (v284)
        return 0;
    }
  }
  v290 = (char)v16[18646];
  v291 = v147;
  v291.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v291.f32 = vcvt_f32_s32(*(int32x2_t *)v291.f32);
  v291.f32[2] = (float)v166;
  v292.i64[0] = 0x3F0000003F000000;
  v292.i64[1] = 0x3F0000003F000000;
  if (!v16[18646])
  {
    v12.i8[0] = v16[18643];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18644];
    v293 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v293.i32 = (float)v293.i32[0];
    v12.i32[1] = v293.i32[0];
    v293.i8[0] = v16[18645];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v293)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v291 = vaddq_f32(v291, v292);
    v292 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v294 = vaddq_f32(v291, v292);
  if (v290 <= 0)
  {
    v292.i64[0] = *(_QWORD *)v23;
    v292.i32[2] = *(_DWORD *)(v23 + 8);
    v295 = (int8x16_t)vmlsq_lane_f32(v292, v294, v19, 0);
    v12.i64[0] = vextq_s8(v295, v295, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v295.i8, *(float32x2_t *)v295.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v295.i8, 1), *(float32x2_t *)v295.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v296 = v16[18646] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v296;
      if (v290)
        return 0;
    }
  }
  v297 = (char)v16[18686];
  v298 = v147;
  v298.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v298.f32 = vcvt_f32_s32(*(int32x2_t *)v298.f32);
  v298.f32[2] = v175;
  v299.i64[0] = 0x3F0000003F000000;
  v299.i64[1] = 0x3F0000003F000000;
  if (!v16[18686])
  {
    v12.i8[0] = v16[18683];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18684];
    v300 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v300.i32 = (float)v300.i32[0];
    v12.i32[1] = v300.i32[0];
    v300.i8[0] = v16[18685];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v300)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v298 = vaddq_f32(v298, v299);
    v299 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v301 = vaddq_f32(v298, v299);
  if (v297 <= 0)
  {
    v299.i64[0] = *(_QWORD *)v23;
    v299.i32[2] = *(_DWORD *)(v23 + 8);
    v302 = (int8x16_t)vmlsq_lane_f32(v299, v301, v19, 0);
    v12.i64[0] = vextq_s8(v302, v302, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v302.i8, *(float32x2_t *)v302.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v302.i8, 1), *(float32x2_t *)v302.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v303 = v16[18686] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v303;
      if (v297)
        return 0;
    }
  }
  v304 = (char)v16[18726];
  v305 = v33;
  v305.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v305.f32 = vcvt_f32_s32(*(int32x2_t *)v305.f32);
  v305.f32[2] = (float)v166;
  v306.i64[0] = 0x3F0000003F000000;
  v306.i64[1] = 0x3F0000003F000000;
  if (!v16[18726])
  {
    v12.i8[0] = v16[18723];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18724];
    v307 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v307.i32 = (float)v307.i32[0];
    v12.i32[1] = v307.i32[0];
    v307.i8[0] = v16[18725];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v307)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v305 = vaddq_f32(v305, v306);
    v306 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v308 = vaddq_f32(v305, v306);
  if (v304 <= 0)
  {
    v306.i64[0] = *(_QWORD *)v23;
    v306.i32[2] = *(_DWORD *)(v23 + 8);
    v309 = (int8x16_t)vmlsq_lane_f32(v306, v308, v19, 0);
    v12.i64[0] = vextq_s8(v309, v309, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v309.i8, *(float32x2_t *)v309.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v309.i8, 1), *(float32x2_t *)v309.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v310 = v16[18726] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v310;
      if (v304)
        return 0;
    }
  }
  v311 = (char)v16[18766];
  v312 = v33;
  v312.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v312.f32 = vcvt_f32_s32(*(int32x2_t *)v312.f32);
  v312.f32[2] = v175;
  v313.i64[0] = 0x3F0000003F000000;
  v313.i64[1] = 0x3F0000003F000000;
  if (!v16[18766])
  {
    v12.i8[0] = v16[18763];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18764];
    v314 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v314.i32 = (float)v314.i32[0];
    v12.i32[1] = v314.i32[0];
    v314.i8[0] = v16[18765];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v314)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v312 = vaddq_f32(v312, v313);
    v313 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v315 = vaddq_f32(v312, v313);
  if (v311 <= 0)
  {
    v313.i64[0] = *(_QWORD *)v23;
    v313.i32[2] = *(_DWORD *)(v23 + 8);
    v316 = (int8x16_t)vmlsq_lane_f32(v313, v315, v19, 0);
    v12.i64[0] = vextq_s8(v316, v316, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v316.i8, *(float32x2_t *)v316.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v316.i8, 1), *(float32x2_t *)v316.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v317 = v16[18766] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v317;
      if (v311)
        return 0;
    }
  }
  v318 = (char)v16[18806];
  *(float32x2_t *)v315.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v60, v193));
  v315.f32[2] = (float)v166;
  v319.i64[0] = 0x3F0000003F000000;
  v319.i64[1] = 0x3F0000003F000000;
  if (!v16[18806])
  {
    v12.i8[0] = v16[18803];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18804];
    v320 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v320.i32 = (float)v320.i32[0];
    v12.i32[1] = v320.i32[0];
    v320.i8[0] = v16[18805];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v320)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v315 = vaddq_f32(v315, v319);
    v319 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v321 = vaddq_f32(v315, v319);
  if (v318 <= 0)
  {
    v319.i64[0] = *(_QWORD *)v23;
    v319.i32[2] = *(_DWORD *)(v23 + 8);
    v322 = (int8x16_t)vmlsq_lane_f32(v319, v321, v19, 0);
    v12.i64[0] = vextq_s8(v322, v322, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v322.i8, *(float32x2_t *)v322.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v322.i8, 1), *(float32x2_t *)v322.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v323 = v16[18806] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v323;
      if (v318)
        return 0;
    }
  }
  v324 = (char)v16[18846];
  *(float32x2_t *)v321.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v60, v193));
  v321.f32[2] = v175;
  v325.i64[0] = 0x3F0000003F000000;
  v325.i64[1] = 0x3F0000003F000000;
  if (!v16[18846])
  {
    v12.i8[0] = v16[18843];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18844];
    v326 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v326.i32 = (float)v326.i32[0];
    v12.i32[1] = v326.i32[0];
    v326.i8[0] = v16[18845];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v326)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v321 = vaddq_f32(v321, v325);
    v325 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v327 = vaddq_f32(v321, v325);
  if (v324 <= 0)
  {
    v325.i64[0] = *(_QWORD *)v23;
    v325.i32[2] = *(_DWORD *)(v23 + 8);
    v328 = (int8x16_t)vmlsq_lane_f32(v325, v327, v19, 0);
    v12.i64[0] = vextq_s8(v328, v328, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v328.i8, *(float32x2_t *)v328.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v328.i8, 1), *(float32x2_t *)v328.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v329 = v16[18846] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v329;
      if (v324)
        return 0;
    }
  }
  v330 = (char)v16[18886];
  *(float32x2_t *)v327.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000004));
  v327.f32[2] = (float)v222;
  v331.i64[0] = 0x3F0000003F000000;
  v331.i64[1] = 0x3F0000003F000000;
  if (!v16[18886])
  {
    v12.i8[0] = v16[18883];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18884];
    v332 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v332.i32 = (float)v332.i32[0];
    v12.i32[1] = v332.i32[0];
    v332.i8[0] = v16[18885];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v332)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v327 = vaddq_f32(v327, v331);
    v331 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v333 = vaddq_f32(v327, v331);
  if (v330 <= 0)
  {
    v331.i64[0] = *(_QWORD *)v23;
    v331.i32[2] = *(_DWORD *)(v23 + 8);
    v334 = (int8x16_t)vmlsq_lane_f32(v331, v333, v19, 0);
    v12.i64[0] = vextq_s8(v334, v334, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v334.i8, *(float32x2_t *)v334.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v334.i8, 1), *(float32x2_t *)v334.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v335 = v16[18886] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v335;
      if (v330)
        return 0;
    }
  }
  v336 = (char)v16[18926];
  *(float32x2_t *)v333.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000004));
  v333.i32[2] = v232;
  v337.i64[0] = 0x3F0000003F000000;
  v337.i64[1] = 0x3F0000003F000000;
  if (!v16[18926])
  {
    v12.i8[0] = v16[18923];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18924];
    v338 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v338.i32 = (float)v338.i32[0];
    v12.i32[1] = v338.i32[0];
    v338.i8[0] = v16[18925];
    v13 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v338)).u64[0];
    *(float *)v13.i32 = (float)v13.i32[0];
    v12.i32[2] = v13.i32[0];
    v333 = vaddq_f32(v333, v337);
    v337 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v339 = vaddq_f32(v333, v337);
  if (v336 <= 0)
  {
    v337.i64[0] = *(_QWORD *)v23;
    v337.i32[2] = *(_DWORD *)(v23 + 8);
    v340 = (int8x16_t)vmlsq_lane_f32(v337, v339, v19, 0);
    v12.i64[0] = vextq_s8(v340, v340, 8uLL).u64[0];
    v13 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v340.i8, *(float32x2_t *)v340.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v340.i8, 1), *(float32x2_t *)v340.i8, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    if (*(float *)v13.i32 <= v24)
    {
      v341 = v16[18926] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v341;
      if (v336)
        return 0;
    }
  }
  v342 = (char)v16[18966];
  v343 = v147;
  v343.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v343.f32 = vcvt_f32_s32(*(int32x2_t *)v343.f32);
  v343.f32[2] = (float)v222;
  v344.i64[0] = 0x3F0000003F000000;
  v344.i64[1] = 0x3F0000003F000000;
  if (!v16[18966])
  {
    v12.i8[0] = v16[18963];
    v12 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32));
    v12.f32[0] = (float)v12.i32[0];
    v13.i8[0] = v16[18964];
    v345 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v13)).u64[0];
    *(float *)v345.i32 = (float)v345.i32[0];
    v12.i32[1] = v345.i32[0];
    v345.i8[0] = v16[18965];
    v12.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v345)).i32[0];
    v343 = vaddq_f32(v343, v344);
    v344 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v346 = vaddq_f32(v343, v344);
  if (v342 <= 0)
  {
    v344.i64[0] = *(_QWORD *)v23;
    v344.i32[2] = *(_DWORD *)(v23 + 8);
    v344 = vmlsq_lane_f32(v344, v346, v19, 0);
    v12.i64[0] = vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v344.f32, 1), *(float32x2_t *)v344.f32, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32).f32[0] <= v24)
    {
      v347 = v16[18966] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v347;
      if (v342)
        return 0;
    }
  }
  v348 = (char)v16[19006];
  v147.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v147.f32 = vcvt_f32_s32(*(int32x2_t *)v147.f32);
  v147.i32[2] = v232;
  v349.i64[0] = 0x3F0000003F000000;
  v349.i64[1] = 0x3F0000003F000000;
  if (!v16[19006])
  {
    v344.i8[0] = v16[19003];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19004];
    v350 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v350.i32 = (float)v350.i32[0];
    v344.i32[1] = v350.i32[0];
    v350.i8[0] = v16[19005];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v350)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v147 = vaddq_f32(v147, v349);
    v349 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v351 = vaddq_f32(v147, v349);
  if (v348 <= 0)
  {
    v349.i64[0] = *(_QWORD *)v23;
    v349.i32[2] = *(_DWORD *)(v23 + 8);
    v352 = (int8x16_t)vmlsq_lane_f32(v349, v351, v19, 0);
    v344.i64[0] = vextq_s8(v352, v352, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v352.i8, *(float32x2_t *)v352.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v352.i8, 1), *(float32x2_t *)v352.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v353 = v16[19006] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v353;
      if (v348)
        return 0;
    }
  }
  v354 = (char)v16[19046];
  v355 = v33;
  v355.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v355.f32 = vcvt_f32_s32(*(int32x2_t *)v355.f32);
  v355.f32[2] = (float)v222;
  v356.i64[0] = 0x3F0000003F000000;
  v356.i64[1] = 0x3F0000003F000000;
  if (!v16[19046])
  {
    v344.i8[0] = v16[19043];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19044];
    v357 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v357.i32 = (float)v357.i32[0];
    v344.i32[1] = v357.i32[0];
    v357.i8[0] = v16[19045];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v357)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v355 = vaddq_f32(v355, v356);
    v356 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v358 = vaddq_f32(v355, v356);
  if (v354 <= 0)
  {
    v356.i64[0] = *(_QWORD *)v23;
    v356.i32[2] = *(_DWORD *)(v23 + 8);
    v359 = (int8x16_t)vmlsq_lane_f32(v356, v358, v19, 0);
    v344.i64[0] = vextq_s8(v359, v359, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v359.i8, *(float32x2_t *)v359.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v359.i8, 1), *(float32x2_t *)v359.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v360 = v16[19046] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v360;
      if (v354)
        return 0;
    }
  }
  v361 = (char)v16[19086];
  v362 = v33;
  v362.i32[0] = v14.i32[0] + 5;
  *(float32x2_t *)v362.f32 = vcvt_f32_s32(*(int32x2_t *)v362.f32);
  v362.i32[2] = v232;
  v363.i64[0] = 0x3F0000003F000000;
  v363.i64[1] = 0x3F0000003F000000;
  if (!v16[19086])
  {
    v344.i8[0] = v16[19083];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19084];
    v364 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v364.i32 = (float)v364.i32[0];
    v344.i32[1] = v364.i32[0];
    v364.i8[0] = v16[19085];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v364)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v362 = vaddq_f32(v362, v363);
    v363 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v365 = vaddq_f32(v362, v363);
  if (v361 <= 0)
  {
    v363.i64[0] = *(_QWORD *)v23;
    v363.i32[2] = *(_DWORD *)(v23 + 8);
    v366 = (int8x16_t)vmlsq_lane_f32(v363, v365, v19, 0);
    v344.i64[0] = vextq_s8(v366, v366, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v366.i8, *(float32x2_t *)v366.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v366.i8, 1), *(float32x2_t *)v366.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v367 = v16[19086] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v367;
      if (v361)
        return 0;
    }
  }
  v368 = (char)v16[19126];
  *(float32x2_t *)v365.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v60, v193));
  v365.f32[2] = (float)v222;
  v369.i64[0] = 0x3F0000003F000000;
  v369.i64[1] = 0x3F0000003F000000;
  if (!v16[19126])
  {
    v344.i8[0] = v16[19123];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19124];
    v370 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v370.i32 = (float)v370.i32[0];
    v344.i32[1] = v370.i32[0];
    v370.i8[0] = v16[19125];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v370)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v365 = vaddq_f32(v365, v369);
    v369 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v371 = vaddq_f32(v365, v369);
  if (v368 <= 0)
  {
    v369.i64[0] = *(_QWORD *)v23;
    v369.i32[2] = *(_DWORD *)(v23 + 8);
    v372 = (int8x16_t)vmlsq_lane_f32(v369, v371, v19, 0);
    v344.i64[0] = vextq_s8(v372, v372, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v372.i8, *(float32x2_t *)v372.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v372.i8, 1), *(float32x2_t *)v372.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v373 = v16[19126] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v373;
      if (v368)
        return 0;
    }
  }
  v374 = (char)v16[19166];
  *(float32x2_t *)v371.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v60, v193));
  v371.i32[2] = v232;
  v375.i64[0] = 0x3F0000003F000000;
  v375.i64[1] = 0x3F0000003F000000;
  if (!v16[19166])
  {
    v344.i8[0] = v16[19163];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19164];
    v376 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v376.i32 = (float)v376.i32[0];
    v344.i32[1] = v376.i32[0];
    v376.i8[0] = v16[19165];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v376)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v371 = vaddq_f32(v371, v375);
    v375 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v377 = vaddq_f32(v371, v375);
  if (v374 <= 0)
  {
    v375.i64[0] = *(_QWORD *)v23;
    v375.i32[2] = *(_DWORD *)(v23 + 8);
    v378 = (int8x16_t)vmlsq_lane_f32(v375, v377, v19, 0);
    v344.i64[0] = vextq_s8(v378, v378, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v378.i8, *(float32x2_t *)v378.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v378.i8, 1), *(float32x2_t *)v378.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v379 = v16[19166] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v379;
      if (v374)
        return 0;
    }
  }
  v380 = (char)v16[19206];
  *(float32x2_t *)v377.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x400000006));
  v377.f32[2] = (float)v166;
  v381.i64[0] = 0x3F0000003F000000;
  v381.i64[1] = 0x3F0000003F000000;
  if (!v16[19206])
  {
    v344.i8[0] = v16[19203];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19204];
    v382 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v382.i32 = (float)v382.i32[0];
    v344.i32[1] = v382.i32[0];
    v382.i8[0] = v16[19205];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v382)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v377 = vaddq_f32(v377, v381);
    v381 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v383 = vaddq_f32(v377, v381);
  if (v380 <= 0)
  {
    v381.i64[0] = *(_QWORD *)v23;
    v381.i32[2] = *(_DWORD *)(v23 + 8);
    v384 = (int8x16_t)vmlsq_lane_f32(v381, v383, v19, 0);
    v344.i64[0] = vextq_s8(v384, v384, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v384.i8, *(float32x2_t *)v384.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v384.i8, 1), *(float32x2_t *)v384.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v385 = v16[19206] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v385;
      if (v380)
        return 0;
    }
  }
  v386 = (char)v16[19246];
  *(float32x2_t *)v383.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x400000006));
  v383.f32[2] = v175;
  v387.i64[0] = 0x3F0000003F000000;
  v387.i64[1] = 0x3F0000003F000000;
  if (!v16[19246])
  {
    v344.i8[0] = v16[19243];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19244];
    v388 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v388.i32 = (float)v388.i32[0];
    v344.i32[1] = v388.i32[0];
    v388.i8[0] = v16[19245];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v388)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v383 = vaddq_f32(v383, v387);
    v387 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v389 = vaddq_f32(v383, v387);
  if (v386 <= 0)
  {
    v387.i64[0] = *(_QWORD *)v23;
    v387.i32[2] = *(_DWORD *)(v23 + 8);
    v390 = (int8x16_t)vmlsq_lane_f32(v387, v389, v19, 0);
    v344.i64[0] = vextq_s8(v390, v390, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v390.i8, *(float32x2_t *)v390.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v390.i8, 1), *(float32x2_t *)v390.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v391 = v16[19246] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v391;
      if (v386)
        return 0;
    }
  }
  v392 = (char)v16[19286];
  *(float32x2_t *)v389.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x500000006));
  v389.f32[2] = (float)v166;
  v393.i64[0] = 0x3F0000003F000000;
  v393.i64[1] = 0x3F0000003F000000;
  if (!v16[19286])
  {
    v344.i8[0] = v16[19283];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19284];
    v394 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v394.i32 = (float)v394.i32[0];
    v344.i32[1] = v394.i32[0];
    v394.i8[0] = v16[19285];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v394)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v389 = vaddq_f32(v389, v393);
    v393 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v395 = vaddq_f32(v389, v393);
  if (v392 <= 0)
  {
    v393.i64[0] = *(_QWORD *)v23;
    v393.i32[2] = *(_DWORD *)(v23 + 8);
    v396 = (int8x16_t)vmlsq_lane_f32(v393, v395, v19, 0);
    v344.i64[0] = vextq_s8(v396, v396, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v396.i8, *(float32x2_t *)v396.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v396.i8, 1), *(float32x2_t *)v396.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v397 = v16[19286] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v397;
      if (v392)
        return 0;
    }
  }
  v398 = (char)v16[19326];
  *(float32x2_t *)v395.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x500000006));
  v395.f32[2] = v175;
  v399.i64[0] = 0x3F0000003F000000;
  v399.i64[1] = 0x3F0000003F000000;
  if (!v16[19326])
  {
    v344.i8[0] = v16[19323];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19324];
    v400 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v400.i32 = (float)v400.i32[0];
    v344.i32[1] = v400.i32[0];
    v400.i8[0] = v16[19325];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v400)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v395 = vaddq_f32(v395, v399);
    v399 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v401 = vaddq_f32(v395, v399);
  if (v398 <= 0)
  {
    v399.i64[0] = *(_QWORD *)v23;
    v399.i32[2] = *(_DWORD *)(v23 + 8);
    v402 = (int8x16_t)vmlsq_lane_f32(v399, v401, v19, 0);
    v344.i64[0] = vextq_s8(v402, v402, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v402.i8, *(float32x2_t *)v402.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v402.i8, 1), *(float32x2_t *)v402.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v403 = v16[19326] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v403;
      if (v398)
        return 0;
    }
  }
  v404 = (char)v16[19366];
  *(float32x2_t *)v401.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x400000007));
  v401.f32[2] = (float)v166;
  v405.i64[0] = 0x3F0000003F000000;
  v405.i64[1] = 0x3F0000003F000000;
  if (!v16[19366])
  {
    v344.i8[0] = v16[19363];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19364];
    v406 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v406.i32 = (float)v406.i32[0];
    v344.i32[1] = v406.i32[0];
    v406.i8[0] = v16[19365];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v406)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v401 = vaddq_f32(v401, v405);
    v405 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v407 = vaddq_f32(v401, v405);
  if (v404 <= 0)
  {
    v405.i64[0] = *(_QWORD *)v23;
    v405.i32[2] = *(_DWORD *)(v23 + 8);
    v408 = (int8x16_t)vmlsq_lane_f32(v405, v407, v19, 0);
    v344.i64[0] = vextq_s8(v408, v408, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v408.i8, *(float32x2_t *)v408.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v408.i8, 1), *(float32x2_t *)v408.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v409 = v16[19366] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v409;
      if (v404)
        return 0;
    }
  }
  v410 = (char)v16[19406];
  *(float32x2_t *)v407.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x400000007));
  v407.f32[2] = v175;
  v411.i64[0] = 0x3F0000003F000000;
  v411.i64[1] = 0x3F0000003F000000;
  if (!v16[19406])
  {
    v344.i8[0] = v16[19403];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19404];
    v412 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v412.i32 = (float)v412.i32[0];
    v344.i32[1] = v412.i32[0];
    v412.i8[0] = v16[19405];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v412)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v407 = vaddq_f32(v407, v411);
    v411 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v413 = vaddq_f32(v407, v411);
  if (v410 <= 0)
  {
    v411.i64[0] = *(_QWORD *)v23;
    v411.i32[2] = *(_DWORD *)(v23 + 8);
    v414 = (int8x16_t)vmlsq_lane_f32(v411, v413, v19, 0);
    v344.i64[0] = vextq_s8(v414, v414, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v414.i8, *(float32x2_t *)v414.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v414.i8, 1), *(float32x2_t *)v414.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v415 = v16[19406] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v415;
      if (v410)
        return 0;
    }
  }
  v416 = (char)v16[19446];
  v417 = a9;
  v417.f32[2] = (float)v166;
  v418.i64[0] = 0x3F0000003F000000;
  v418.i64[1] = 0x3F0000003F000000;
  if (v16[19446])
  {
    v419 = vaddq_f32(v417, v418);
  }
  else
  {
    v344.i8[0] = v16[19443];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19444];
    v420 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v420.i32 = (float)v420.i32[0];
    v344.i32[1] = v420.i32[0];
    v420.i8[0] = v16[19445];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v420)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v421 = vaddq_f32(v417, v418);
    v417 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v419 = vaddq_f32(v421, v417);
  }
  if (v416 <= 0)
  {
    v417.i64[0] = *(_QWORD *)v23;
    v417.i32[2] = *(_DWORD *)(v23 + 8);
    v422 = (int8x16_t)vmlsq_lane_f32(v417, v419, v19, 0);
    v344.i64[0] = vextq_s8(v422, v422, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v422.i8, *(float32x2_t *)v422.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v422.i8, 1), *(float32x2_t *)v422.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v423 = v16[19446] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v423;
      if (v416)
        return 0;
    }
  }
  v424 = (char)v16[19486];
  v425 = a9;
  v425.f32[2] = v175;
  v426.i64[0] = 0x3F0000003F000000;
  v426.i64[1] = 0x3F0000003F000000;
  if (!v16[19486])
  {
    v344.i8[0] = v16[19483];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19484];
    v427 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v427.i32 = (float)v427.i32[0];
    v344.i32[1] = v427.i32[0];
    v427.i8[0] = v16[19485];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v427)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v425 = vaddq_f32(v425, v426);
    v426 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v428 = vaddq_f32(v425, v426);
  if (v424 <= 0)
  {
    v426.i64[0] = *(_QWORD *)v23;
    v426.i32[2] = *(_DWORD *)(v23 + 8);
    v429 = (int8x16_t)vmlsq_lane_f32(v426, v428, v19, 0);
    v344.i64[0] = vextq_s8(v429, v429, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v429.i8, *(float32x2_t *)v429.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v429.i8, 1), *(float32x2_t *)v429.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v430 = v16[19486] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v430;
      if (v424)
        return 0;
    }
  }
  v431 = (char)v16[19526];
  *(float32x2_t *)v428.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x400000006));
  v428.f32[2] = (float)v222;
  v432.i64[0] = 0x3F0000003F000000;
  v432.i64[1] = 0x3F0000003F000000;
  if (!v16[19526])
  {
    v344.i8[0] = v16[19523];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19524];
    v433 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v433.i32 = (float)v433.i32[0];
    v344.i32[1] = v433.i32[0];
    v433.i8[0] = v16[19525];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v433)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v428 = vaddq_f32(v428, v432);
    v432 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v434 = vaddq_f32(v428, v432);
  if (v431 <= 0)
  {
    v432.i64[0] = *(_QWORD *)v23;
    v432.i32[2] = *(_DWORD *)(v23 + 8);
    v435 = (int8x16_t)vmlsq_lane_f32(v432, v434, v19, 0);
    v344.i64[0] = vextq_s8(v435, v435, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v435.i8, *(float32x2_t *)v435.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v435.i8, 1), *(float32x2_t *)v435.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v436 = v16[19526] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v436;
      if (v431)
        return 0;
    }
  }
  v437 = (char)v16[19566];
  *(float32x2_t *)v434.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x400000006));
  v434.i32[2] = v232;
  v438.i64[0] = 0x3F0000003F000000;
  v438.i64[1] = 0x3F0000003F000000;
  if (!v16[19566])
  {
    v344.i8[0] = v16[19563];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19564];
    v439 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v439.i32 = (float)v439.i32[0];
    v344.i32[1] = v439.i32[0];
    v439.i8[0] = v16[19565];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v439)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v434 = vaddq_f32(v434, v438);
    v438 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v440 = vaddq_f32(v434, v438);
  if (v437 <= 0)
  {
    v438.i64[0] = *(_QWORD *)v23;
    v438.i32[2] = *(_DWORD *)(v23 + 8);
    v441 = (int8x16_t)vmlsq_lane_f32(v438, v440, v19, 0);
    v344.i64[0] = vextq_s8(v441, v441, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v441.i8, *(float32x2_t *)v441.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v441.i8, 1), *(float32x2_t *)v441.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v442 = v16[19566] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v442;
      if (v437)
        return 0;
    }
  }
  v443 = (char)v16[19606];
  *(float32x2_t *)v440.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x500000006));
  v440.f32[2] = (float)v222;
  v444.i64[0] = 0x3F0000003F000000;
  v444.i64[1] = 0x3F0000003F000000;
  if (!v16[19606])
  {
    v344.i8[0] = v16[19603];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19604];
    v445 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v445.i32 = (float)v445.i32[0];
    v344.i32[1] = v445.i32[0];
    v445.i8[0] = v16[19605];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v445)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v440 = vaddq_f32(v440, v444);
    v444 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v446 = vaddq_f32(v440, v444);
  if (v443 <= 0)
  {
    v444.i64[0] = *(_QWORD *)v23;
    v444.i32[2] = *(_DWORD *)(v23 + 8);
    v447 = (int8x16_t)vmlsq_lane_f32(v444, v446, v19, 0);
    v344.i64[0] = vextq_s8(v447, v447, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v447.i8, *(float32x2_t *)v447.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v447.i8, 1), *(float32x2_t *)v447.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v448 = v16[19606] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v448;
      if (v443)
        return 0;
    }
  }
  v449 = (char)v16[19646];
  *(float32x2_t *)v446.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x500000006));
  v446.i32[2] = v232;
  v450.i64[0] = 0x3F0000003F000000;
  v450.i64[1] = 0x3F0000003F000000;
  if (!v16[19646])
  {
    v344.i8[0] = v16[19643];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19644];
    v451 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v451.i32 = (float)v451.i32[0];
    v344.i32[1] = v451.i32[0];
    v451.i8[0] = v16[19645];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v451)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v446 = vaddq_f32(v446, v450);
    v450 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v452 = vaddq_f32(v446, v450);
  if (v449 <= 0)
  {
    v450.i64[0] = *(_QWORD *)v23;
    v450.i32[2] = *(_DWORD *)(v23 + 8);
    v453 = (int8x16_t)vmlsq_lane_f32(v450, v452, v19, 0);
    v344.i64[0] = vextq_s8(v453, v453, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v453.i8, *(float32x2_t *)v453.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v453.i8, 1), *(float32x2_t *)v453.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v454 = v16[19646] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v454;
      if (v449)
        return 0;
    }
  }
  v455 = (char)v16[19686];
  *(float32x2_t *)v452.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x400000007));
  v452.f32[2] = (float)v222;
  v456.i64[0] = 0x3F0000003F000000;
  v456.i64[1] = 0x3F0000003F000000;
  if (!v16[19686])
  {
    v344.i8[0] = v16[19683];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19684];
    v457 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v457.i32 = (float)v457.i32[0];
    v344.i32[1] = v457.i32[0];
    v457.i8[0] = v16[19685];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v457)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v452 = vaddq_f32(v452, v456);
    v456 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v458 = vaddq_f32(v452, v456);
  if (v455 <= 0)
  {
    v456.i64[0] = *(_QWORD *)v23;
    v456.i32[2] = *(_DWORD *)(v23 + 8);
    v459 = (int8x16_t)vmlsq_lane_f32(v456, v458, v19, 0);
    v344.i64[0] = vextq_s8(v459, v459, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v459.i8, *(float32x2_t *)v459.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v459.i8, 1), *(float32x2_t *)v459.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v460 = v16[19686] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v460;
      if (v455)
        return 0;
    }
  }
  v461 = (char)v16[19726];
  *(float32x2_t *)v458.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x400000007));
  v458.i32[2] = v232;
  v462.i64[0] = 0x3F0000003F000000;
  v462.i64[1] = 0x3F0000003F000000;
  if (!v16[19726])
  {
    v344.i8[0] = v16[19723];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19724];
    v463 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v463.i32 = (float)v463.i32[0];
    v344.i32[1] = v463.i32[0];
    v463.i8[0] = v16[19725];
    v12.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v463)).u64[0];
    v12.f32[0] = (float)v12.i32[0];
    v344.i32[2] = v12.i32[0];
    v458 = vaddq_f32(v458, v462);
    v462 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v464 = vaddq_f32(v458, v462);
  if (v461 <= 0)
  {
    v462.i64[0] = *(_QWORD *)v23;
    v462.i32[2] = *(_DWORD *)(v23 + 8);
    v465 = (int8x16_t)vmlsq_lane_f32(v462, v464, v19, 0);
    v344.i64[0] = vextq_s8(v465, v465, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v465.i8, *(float32x2_t *)v465.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v465.i8, 1), *(float32x2_t *)v465.i8, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32);
    if (v12.f32[0] <= v24)
    {
      v466 = v16[19726] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v466;
      if (v461)
        return 0;
    }
  }
  v467 = (char)v16[19766];
  v468 = a9;
  v468.f32[2] = (float)v222;
  v469.i64[0] = 0x3F0000003F000000;
  v469.i64[1] = 0x3F0000003F000000;
  if (v16[19766])
  {
    v470 = vaddq_f32(v468, v469);
  }
  else
  {
    v344.i8[0] = v16[19763];
    v344 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32));
    v344.f32[0] = (float)v344.i32[0];
    v12.i8[0] = v16[19764];
    v471 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.f32)).u64[0];
    *(float *)v471.i32 = (float)v471.i32[0];
    v344.i32[1] = v471.i32[0];
    v471.i8[0] = v16[19765];
    v344.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v471)).i32[0];
    v472 = vaddq_f32(v468, v469);
    v468 = vmulq_f32(v344, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v470 = vaddq_f32(v472, v468);
  }
  if (v467 <= 0)
  {
    v468.i64[0] = *(_QWORD *)v23;
    v468.i32[2] = *(_DWORD *)(v23 + 8);
    v468 = vmlsq_lane_f32(v468, v470, v19, 0);
    v344.i64[0] = vextq_s8((int8x16_t)v468, (int8x16_t)v468, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v468.f32, *(float32x2_t *)v468.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v468.f32, 1), *(float32x2_t *)v468.f32, 1), *(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32).f32[0] <= v24)
    {
      v473 = v16[19766] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v473;
      if (v467)
        return 0;
    }
  }
  v474 = (char)v16[19806];
  a9.i32[2] = v232;
  v475.i64[0] = 0x3F0000003F000000;
  v475.i64[1] = 0x3F0000003F000000;
  if (!v16[19806])
  {
    v468.i8[0] = v16[19803];
    v468 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v468.f32));
    v468.f32[0] = (float)v468.i32[0];
    v344.i8[0] = v16[19804];
    v476 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32)).u64[0];
    *(float *)v476.i32 = (float)v476.i32[0];
    v468.i32[1] = v476.i32[0];
    v476.i8[0] = v16[19805];
    v344.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v476)).u64[0];
    v344.f32[0] = (float)v344.i32[0];
    v468.i32[2] = v344.i32[0];
    a9 = vaddq_f32(a9, v475);
    v475 = vmulq_f32(v468, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v477 = vaddq_f32(a9, v475);
  if (v474 <= 0)
  {
    v475.i64[0] = *(_QWORD *)v23;
    v475.i32[2] = *(_DWORD *)(v23 + 8);
    v478 = (int8x16_t)vmlsq_lane_f32(v475, v477, v19, 0);
    v468.i64[0] = vextq_s8(v478, v478, 8uLL).u64[0];
    *(float32x2_t *)v344.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v478.i8, *(float32x2_t *)v478.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v478.i8, 1), *(float32x2_t *)v478.i8, 1), *(float32x2_t *)v468.f32, *(float32x2_t *)v468.f32);
    if (v344.f32[0] <= v24)
    {
      v479 = v16[19806] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v479;
      if (v474)
        return 0;
    }
  }
  v480 = (char)v16[19846];
  v481 = v31;
  v481.f32[2] = (float)v166;
  v482.i64[0] = 0x3F0000003F000000;
  v482.i64[1] = 0x3F0000003F000000;
  if (v16[19846])
  {
    v483 = vaddq_f32(v481, v482);
  }
  else
  {
    v468.i8[0] = v16[19843];
    v468 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v468.f32));
    v468.f32[0] = (float)v468.i32[0];
    v344.i8[0] = v16[19844];
    v484 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32)).u64[0];
    *(float *)v484.i32 = (float)v484.i32[0];
    v468.i32[1] = v484.i32[0];
    v484.i8[0] = v16[19845];
    v344.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v484)).u64[0];
    v344.f32[0] = (float)v344.i32[0];
    v468.i32[2] = v344.i32[0];
    v485 = vaddq_f32(v481, v482);
    v481 = vmulq_f32(v468, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v483 = vaddq_f32(v485, v481);
  }
  if (v480 <= 0)
  {
    v481.i64[0] = *(_QWORD *)v23;
    v481.i32[2] = *(_DWORD *)(v23 + 8);
    v486 = (int8x16_t)vmlsq_lane_f32(v481, v483, v19, 0);
    v468.i64[0] = vextq_s8(v486, v486, 8uLL).u64[0];
    *(float32x2_t *)v344.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v486.i8, *(float32x2_t *)v486.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v486.i8, 1), *(float32x2_t *)v486.i8, 1), *(float32x2_t *)v468.f32, *(float32x2_t *)v468.f32);
    if (v344.f32[0] <= v24)
    {
      v487 = v16[19846] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v487;
      if (v480)
        return 0;
    }
  }
  v488 = (char)v16[19886];
  v489 = v31;
  v489.f32[2] = v175;
  v490.i64[0] = 0x3F0000003F000000;
  v490.i64[1] = 0x3F0000003F000000;
  if (!v16[19886])
  {
    v468.i8[0] = v16[19883];
    v468 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v468.f32));
    v468.f32[0] = (float)v468.i32[0];
    v344.i8[0] = v16[19884];
    v491 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32)).u64[0];
    *(float *)v491.i32 = (float)v491.i32[0];
    v468.i32[1] = v491.i32[0];
    v491.i8[0] = v16[19885];
    v344.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v491)).u64[0];
    v344.f32[0] = (float)v344.i32[0];
    v468.i32[2] = v344.i32[0];
    v489 = vaddq_f32(v489, v490);
    v490 = vmulq_f32(v468, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v492 = vaddq_f32(v489, v490);
  if (v488 <= 0)
  {
    v490.i64[0] = *(_QWORD *)v23;
    v490.i32[2] = *(_DWORD *)(v23 + 8);
    v493 = (int8x16_t)vmlsq_lane_f32(v490, v492, v19, 0);
    v468.i64[0] = vextq_s8(v493, v493, 8uLL).u64[0];
    *(float32x2_t *)v344.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v493.i8, *(float32x2_t *)v493.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v493.i8, 1), *(float32x2_t *)v493.i8, 1), *(float32x2_t *)v468.f32, *(float32x2_t *)v468.f32);
    if (v344.f32[0] <= v24)
    {
      v494 = v16[19886] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v494;
      if (v488)
        return 0;
    }
  }
  v495 = (char)v16[19926];
  v496 = v33;
  v496.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v496.f32 = vcvt_f32_s32(*(int32x2_t *)v496.f32);
  v496.f32[2] = (float)v166;
  v497.i64[0] = 0x3F0000003F000000;
  v497.i64[1] = 0x3F0000003F000000;
  if (!v16[19926])
  {
    v468.i8[0] = v16[19923];
    v468 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v468.f32));
    v468.f32[0] = (float)v468.i32[0];
    v344.i8[0] = v16[19924];
    v498 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32)).u64[0];
    *(float *)v498.i32 = (float)v498.i32[0];
    v468.i32[1] = v498.i32[0];
    v498.i8[0] = v16[19925];
    v344.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v498)).u64[0];
    v344.f32[0] = (float)v344.i32[0];
    v468.i32[2] = v344.i32[0];
    v496 = vaddq_f32(v496, v497);
    v497 = vmulq_f32(v468, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v499 = vaddq_f32(v496, v497);
  if (v495 <= 0)
  {
    v497.i64[0] = *(_QWORD *)v23;
    v497.i32[2] = *(_DWORD *)(v23 + 8);
    v500 = (int8x16_t)vmlsq_lane_f32(v497, v499, v19, 0);
    v468.i64[0] = vextq_s8(v500, v500, 8uLL).u64[0];
    *(float32x2_t *)v344.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v500.i8, *(float32x2_t *)v500.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v500.i8, 1), *(float32x2_t *)v500.i8, 1), *(float32x2_t *)v468.f32, *(float32x2_t *)v468.f32);
    if (v344.f32[0] <= v24)
    {
      v501 = v16[19926] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v501;
      if (v495)
        return 0;
    }
  }
  v502 = (char)v16[19966];
  v503 = v33;
  v503.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v503.f32 = vcvt_f32_s32(*(int32x2_t *)v503.f32);
  v503.f32[2] = v175;
  v504.i64[0] = 0x3F0000003F000000;
  v504.i64[1] = 0x3F0000003F000000;
  if (!v16[19966])
  {
    v468.i8[0] = v16[19963];
    v468 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v468.f32));
    v468.f32[0] = (float)v468.i32[0];
    v344.i8[0] = v16[19964];
    v505 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32)).u64[0];
    *(float *)v505.i32 = (float)v505.i32[0];
    v468.i32[1] = v505.i32[0];
    v505.i8[0] = v16[19965];
    v344.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v505)).u64[0];
    v344.f32[0] = (float)v344.i32[0];
    v468.i32[2] = v344.i32[0];
    v503 = vaddq_f32(v503, v504);
    v504 = vmulq_f32(v468, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v506 = vaddq_f32(v503, v504);
  if (v502 <= 0)
  {
    v504.i64[0] = *(_QWORD *)v23;
    v504.i32[2] = *(_DWORD *)(v23 + 8);
    v507 = (int8x16_t)vmlsq_lane_f32(v504, v506, v19, 0);
    v468.i64[0] = vextq_s8(v507, v507, 8uLL).u64[0];
    *(float32x2_t *)v344.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v507.i8, *(float32x2_t *)v507.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v507.i8, 1), *(float32x2_t *)v507.i8, 1), *(float32x2_t *)v468.f32, *(float32x2_t *)v468.f32);
    if (v344.f32[0] <= v24)
    {
      v508 = v16[19966] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v508;
      if (v502)
        return 0;
    }
  }
  v509 = (char)v16[20006];
  *(float32x2_t *)v506.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000007));
  v506.f32[2] = (float)v166;
  v510.i64[0] = 0x3F0000003F000000;
  v510.i64[1] = 0x3F0000003F000000;
  if (!v16[20006])
  {
    v468.i8[0] = v16[20003];
    v468 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v468.f32));
    v468.f32[0] = (float)v468.i32[0];
    v344.i8[0] = v16[20004];
    v511 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32)).u64[0];
    *(float *)v511.i32 = (float)v511.i32[0];
    v468.i32[1] = v511.i32[0];
    v511.i8[0] = v16[20005];
    v344.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v511)).u64[0];
    v344.f32[0] = (float)v344.i32[0];
    v468.i32[2] = v344.i32[0];
    v506 = vaddq_f32(v506, v510);
    v510 = vmulq_f32(v468, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v512 = vaddq_f32(v506, v510);
  if (v509 <= 0)
  {
    v510.i64[0] = *(_QWORD *)v23;
    v510.i32[2] = *(_DWORD *)(v23 + 8);
    v513 = (int8x16_t)vmlsq_lane_f32(v510, v512, v19, 0);
    v468.i64[0] = vextq_s8(v513, v513, 8uLL).u64[0];
    *(float32x2_t *)v344.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v513.i8, *(float32x2_t *)v513.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v513.i8, 1), *(float32x2_t *)v513.i8, 1), *(float32x2_t *)v468.f32, *(float32x2_t *)v468.f32);
    if (v344.f32[0] <= v24)
    {
      v514 = v16[20006] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v514;
      if (v509)
        return 0;
    }
  }
  v515 = (char)v16[20046];
  *(float32x2_t *)v512.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000007));
  v512.f32[2] = v175;
  v516.i64[0] = 0x3F0000003F000000;
  v516.i64[1] = 0x3F0000003F000000;
  if (!v16[20046])
  {
    v468.i8[0] = v16[20043];
    v468 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v468.f32));
    v468.f32[0] = (float)v468.i32[0];
    v344.i8[0] = v16[20044];
    v517 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32)).u64[0];
    *(float *)v517.i32 = (float)v517.i32[0];
    v468.i32[1] = v517.i32[0];
    v517.i8[0] = v16[20045];
    v344.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v517)).u64[0];
    v344.f32[0] = (float)v344.i32[0];
    v468.i32[2] = v344.i32[0];
    v512 = vaddq_f32(v512, v516);
    v516 = vmulq_f32(v468, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v518 = vaddq_f32(v512, v516);
  if (v515 <= 0)
  {
    v516.i64[0] = *(_QWORD *)v23;
    v516.i32[2] = *(_DWORD *)(v23 + 8);
    v519 = (int8x16_t)vmlsq_lane_f32(v516, v518, v19, 0);
    v468.i64[0] = vextq_s8(v519, v519, 8uLL).u64[0];
    *(float32x2_t *)v344.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v519.i8, *(float32x2_t *)v519.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v519.i8, 1), *(float32x2_t *)v519.i8, 1), *(float32x2_t *)v468.f32, *(float32x2_t *)v468.f32);
    if (v344.f32[0] <= v24)
    {
      v520 = v16[20046] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v520;
      if (v515)
        return 0;
    }
  }
  v521 = (char)v16[20086];
  v522 = a4;
  v522.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v522.f32 = vcvt_f32_s32(*(int32x2_t *)v522.f32);
  v522.f32[2] = (float)v166;
  v523.i64[0] = 0x3F0000003F000000;
  v523.i64[1] = 0x3F0000003F000000;
  if (!v16[20086])
  {
    v468.i8[0] = v16[20083];
    v468 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v468.f32));
    v468.f32[0] = (float)v468.i32[0];
    v344.i8[0] = v16[20084];
    v524 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v344.f32)).u64[0];
    *(float *)v524.i32 = (float)v524.i32[0];
    v468.i32[1] = v524.i32[0];
    v524.i8[0] = v16[20085];
    v468.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v524)).i32[0];
    v522 = vaddq_f32(v522, v523);
    v523 = vmulq_f32(v468, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v525 = vaddq_f32(v522, v523);
  if (v521 <= 0)
  {
    v523.i64[0] = *(_QWORD *)v23;
    v523.i32[2] = *(_DWORD *)(v23 + 8);
    v523 = vmlsq_lane_f32(v523, v525, v19, 0);
    v468.i64[0] = vextq_s8((int8x16_t)v523, (int8x16_t)v523, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v523.f32, *(float32x2_t *)v523.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v523.f32, 1), *(float32x2_t *)v523.f32, 1), *(float32x2_t *)v468.f32, *(float32x2_t *)v468.f32).f32[0] <= v24)
    {
      v526 = v16[20086] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v526;
      if (v521)
        return 0;
    }
  }
  v527 = (char)v16[20126];
  v528 = a4;
  v528.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v528.f32 = vcvt_f32_s32(*(int32x2_t *)v528.f32);
  v528.f32[2] = v175;
  v529.i64[0] = 0x3F0000003F000000;
  v529.i64[1] = 0x3F0000003F000000;
  if (!v16[20126])
  {
    v523.i8[0] = v16[20123];
    v523 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v523.f32));
    v523.f32[0] = (float)v523.i32[0];
    v468.i8[0] = v16[20124];
    v530 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v468.f32)).u64[0];
    *(float *)v530.i32 = (float)v530.i32[0];
    v523.i32[1] = v530.i32[0];
    v530.i8[0] = v16[20125];
    v468.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v530)).u64[0];
    v468.f32[0] = (float)v468.i32[0];
    v523.i32[2] = v468.i32[0];
    v528 = vaddq_f32(v528, v529);
    v529 = vmulq_f32(v523, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v531 = vaddq_f32(v528, v529);
  if (v527 <= 0)
  {
    v529.i64[0] = *(_QWORD *)v23;
    v529.i32[2] = *(_DWORD *)(v23 + 8);
    v532 = (int8x16_t)vmlsq_lane_f32(v529, v531, v19, 0);
    v523.i64[0] = vextq_s8(v532, v532, 8uLL).u64[0];
    *(float32x2_t *)v468.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v532.i8, *(float32x2_t *)v532.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v532.i8, 1), *(float32x2_t *)v532.i8, 1), *(float32x2_t *)v523.f32, *(float32x2_t *)v523.f32);
    if (v468.f32[0] <= v24)
    {
      v533 = v16[20126] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v533;
      if (v527)
        return 0;
    }
  }
  v534 = (char)v16[20166];
  v535 = v31;
  v535.f32[2] = (float)v222;
  v536.i64[0] = 0x3F0000003F000000;
  v536.i64[1] = 0x3F0000003F000000;
  if (v16[20166])
  {
    v537 = vaddq_f32(v535, v536);
  }
  else
  {
    v523.i8[0] = v16[20163];
    v523 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v523.f32));
    v523.f32[0] = (float)v523.i32[0];
    v468.i8[0] = v16[20164];
    v538 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v468.f32)).u64[0];
    *(float *)v538.i32 = (float)v538.i32[0];
    v523.i32[1] = v538.i32[0];
    v538.i8[0] = v16[20165];
    v523.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v538)).i32[0];
    v539 = vaddq_f32(v535, v536);
    v535 = vmulq_f32(v523, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v537 = vaddq_f32(v539, v535);
  }
  if (v534 <= 0)
  {
    v535.i64[0] = *(_QWORD *)v23;
    v535.i32[2] = *(_DWORD *)(v23 + 8);
    v535 = vmlsq_lane_f32(v535, v537, v19, 0);
    v523.i64[0] = vextq_s8((int8x16_t)v535, (int8x16_t)v535, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v535.f32, *(float32x2_t *)v535.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v535.f32, 1), *(float32x2_t *)v535.f32, 1), *(float32x2_t *)v523.f32, *(float32x2_t *)v523.f32).f32[0] <= v24)
    {
      v540 = v16[20166] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v540;
      if (v534)
        return 0;
    }
  }
  v541 = (char)v16[20206];
  v31.i32[2] = v232;
  v542.i64[0] = 0x3F0000003F000000;
  v542.i64[1] = 0x3F0000003F000000;
  if (!v16[20206])
  {
    v535.i8[0] = v16[20203];
    v535 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v535.f32));
    v535.f32[0] = (float)v535.i32[0];
    v523.i8[0] = v16[20204];
    v543 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v523.f32)).u64[0];
    *(float *)v543.i32 = (float)v543.i32[0];
    v535.i32[1] = v543.i32[0];
    v543.i8[0] = v16[20205];
    v523.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v543)).u64[0];
    v523.f32[0] = (float)v523.i32[0];
    v535.i32[2] = v523.i32[0];
    v31 = vaddq_f32(v31, v542);
    v542 = vmulq_f32(v535, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v544 = vaddq_f32(v31, v542);
  if (v541 <= 0)
  {
    v542.i64[0] = *(_QWORD *)v23;
    v542.i32[2] = *(_DWORD *)(v23 + 8);
    v545 = (int8x16_t)vmlsq_lane_f32(v542, v544, v19, 0);
    v535.i64[0] = vextq_s8(v545, v545, 8uLL).u64[0];
    *(float32x2_t *)v523.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v545.i8, *(float32x2_t *)v545.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v545.i8, 1), *(float32x2_t *)v545.i8, 1), *(float32x2_t *)v535.f32, *(float32x2_t *)v535.f32);
    if (v523.f32[0] <= v24)
    {
      v546 = v16[20206] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v546;
      if (v541)
        return 0;
    }
  }
  v547 = (char)v16[20246];
  v548 = v33;
  v548.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v548.f32 = vcvt_f32_s32(*(int32x2_t *)v548.f32);
  v548.f32[2] = (float)v222;
  v549.i64[0] = 0x3F0000003F000000;
  v549.i64[1] = 0x3F0000003F000000;
  if (!v16[20246])
  {
    v535.i8[0] = v16[20243];
    v535 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v535.f32));
    v535.f32[0] = (float)v535.i32[0];
    v523.i8[0] = v16[20244];
    v550 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v523.f32)).u64[0];
    *(float *)v550.i32 = (float)v550.i32[0];
    v535.i32[1] = v550.i32[0];
    v550.i8[0] = v16[20245];
    v535.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v550)).i32[0];
    v548 = vaddq_f32(v548, v549);
    v549 = vmulq_f32(v535, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v551 = vaddq_f32(v548, v549);
  if (v547 <= 0)
  {
    v549.i64[0] = *(_QWORD *)v23;
    v549.i32[2] = *(_DWORD *)(v23 + 8);
    v549 = vmlsq_lane_f32(v549, v551, v19, 0);
    v535.i64[0] = vextq_s8((int8x16_t)v549, (int8x16_t)v549, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v549.f32, *(float32x2_t *)v549.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v549.f32, 1), *(float32x2_t *)v549.f32, 1), *(float32x2_t *)v535.f32, *(float32x2_t *)v535.f32).f32[0] <= v24)
    {
      v552 = v16[20246] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v552;
      if (v547)
        return 0;
    }
  }
  v553 = v16 + 20283;
  v554 = v553[3];
  v33.i32[1] = v14.i32[1] + 7;
  *(float32x2_t *)v33.f32 = vcvt_f32_s32(*(int32x2_t *)v33.f32);
  v33.i32[2] = v232;
  v555.i64[0] = 0x3F0000003F000000;
  v555.i64[1] = 0x3F0000003F000000;
  if (!v553[3])
  {
    v549.i8[0] = *v553;
    v549 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v549.f32));
    v549.f32[0] = (float)v549.i32[0];
    v535.i8[0] = v553[1];
    v556 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v535.f32)).u64[0];
    *(float *)v556.i32 = (float)v556.i32[0];
    v549.i32[1] = v556.i32[0];
    v556.i8[0] = v553[2];
    v535.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v556)).u64[0];
    v535.f32[0] = (float)v535.i32[0];
    v549.i32[2] = v535.i32[0];
    v33 = vaddq_f32(v33, v555);
    v555 = vmulq_f32(v549, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v557 = vaddq_f32(v33, v555);
  if (v554 <= 0)
  {
    v555.i64[0] = *(_QWORD *)v23;
    v555.i32[2] = *(_DWORD *)(v23 + 8);
    v558 = (int8x16_t)vmlsq_lane_f32(v555, v557, v19, 0);
    v549.i64[0] = vextq_s8(v558, v558, 8uLL).u64[0];
    *(float32x2_t *)v535.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v558.i8, *(float32x2_t *)v558.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v558.i8, 1), *(float32x2_t *)v558.i8, 1), *(float32x2_t *)v549.f32, *(float32x2_t *)v549.f32);
    if (v535.f32[0] <= v24)
    {
      v559 = v553[3] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v559;
      if (v554)
        return 0;
    }
  }
  v560 = v553[43];
  *(float32x2_t *)v557.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000007));
  v557.f32[2] = (float)v222;
  v561.i64[0] = 0x3F0000003F000000;
  v561.i64[1] = 0x3F0000003F000000;
  if (!v553[43])
  {
    v549.i8[0] = v553[40];
    v549 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v549.f32));
    v549.f32[0] = (float)v549.i32[0];
    v535.i8[0] = v553[41];
    v562 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v535.f32)).u64[0];
    *(float *)v562.i32 = (float)v562.i32[0];
    v549.i32[1] = v562.i32[0];
    v562.i8[0] = v553[42];
    v549.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v562)).i32[0];
    v557 = vaddq_f32(v557, v561);
    v561 = vmulq_f32(v549, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v563 = vaddq_f32(v557, v561);
  if (v560 <= 0)
  {
    v561.i64[0] = *(_QWORD *)v23;
    v561.i32[2] = *(_DWORD *)(v23 + 8);
    v561 = vmlsq_lane_f32(v561, v563, v19, 0);
    v549.i64[0] = vextq_s8((int8x16_t)v561, (int8x16_t)v561, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v561.f32, *(float32x2_t *)v561.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v561.f32, 1), *(float32x2_t *)v561.f32, 1), *(float32x2_t *)v549.f32, *(float32x2_t *)v549.f32).f32[0] <= v24)
    {
      v564 = v553[43] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v564;
      if (v560)
        return 0;
    }
  }
  v565 = v553[83];
  *(float32x2_t *)a6.f32 = vcvt_f32_s32(vadd_s32(v14, (int32x2_t)0x600000007));
  a6.i32[2] = v232;
  v566.i64[0] = 0x3F0000003F000000;
  v566.i64[1] = 0x3F0000003F000000;
  if (!v553[83])
  {
    v561.i8[0] = v553[80];
    v561 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v561.f32));
    v561.f32[0] = (float)v561.i32[0];
    v549.i8[0] = v553[81];
    v567 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v549.f32)).u64[0];
    *(float *)v567.i32 = (float)v567.i32[0];
    v561.i32[1] = v567.i32[0];
    v567.i8[0] = v553[82];
    v549.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v567)).u64[0];
    v549.f32[0] = (float)v549.i32[0];
    v561.i32[2] = v549.i32[0];
    a6 = vaddq_f32(a6, v566);
    v566 = vmulq_f32(v561, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v568 = vaddq_f32(a6, v566);
  if (v565 <= 0)
  {
    v566.i64[0] = *(_QWORD *)v23;
    v566.i32[2] = *(_DWORD *)(v23 + 8);
    v569 = (int8x16_t)vmlsq_lane_f32(v566, v568, v19, 0);
    v561.i64[0] = vextq_s8(v569, v569, 8uLL).u64[0];
    *(float32x2_t *)v549.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v569.i8, *(float32x2_t *)v569.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v569.i8, 1), *(float32x2_t *)v569.i8, 1), *(float32x2_t *)v561.f32, *(float32x2_t *)v561.f32);
    if (v549.f32[0] <= v24)
    {
      v570 = v553[83] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v570;
      if (v565)
        return 0;
    }
  }
  v571 = v553[123];
  v572 = a4;
  v572.i32[1] = v60;
  *(float32x2_t *)v572.f32 = vcvt_f32_s32(*(int32x2_t *)v572.f32);
  v572.f32[2] = (float)v222;
  v573.i64[0] = 0x3F0000003F000000;
  v573.i64[1] = 0x3F0000003F000000;
  if (!v553[123])
  {
    v561.i8[0] = v553[120];
    v561 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v561.f32));
    v561.f32[0] = (float)v561.i32[0];
    v549.i8[0] = v553[121];
    v574 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v549.f32)).u64[0];
    *(float *)v574.i32 = (float)v574.i32[0];
    v561.i32[1] = v574.i32[0];
    v574.i8[0] = v553[122];
    v561.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v574)).i32[0];
    v572 = vaddq_f32(v572, v573);
    v573 = vmulq_f32(v561, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v575 = vaddq_f32(v572, v573);
  if (v571 <= 0)
  {
    v573.i64[0] = *(_QWORD *)v23;
    v573.i32[2] = *(_DWORD *)(v23 + 8);
    v573 = vmlsq_lane_f32(v573, v575, v19, 0);
    v561.i64[0] = vextq_s8((int8x16_t)v573, (int8x16_t)v573, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v573.f32, *(float32x2_t *)v573.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v573.f32, 1), *(float32x2_t *)v573.f32, 1), *(float32x2_t *)v561.f32, *(float32x2_t *)v561.f32).f32[0] <= v24)
    {
      v576 = v553[123] ? 2 : 1;
      **(_BYTE **)(v17 + 24) = v576;
      if (v571)
        return 0;
    }
  }
  v577 = v553[163] == 0;
  a4.i32[1] = v60;
  *(float32x2_t *)a4.f32 = vcvt_f32_s32(*(int32x2_t *)a4.f32);
  a4.i32[2] = v232;
  v578.i64[0] = 0x3F0000003F000000;
  v578.i64[1] = 0x3F0000003F000000;
  if (!v553[163])
  {
    v573.i8[0] = v553[160];
    v579 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v573.f32));
    v579.f32[0] = (float)v579.i32[0];
    v561.i8[0] = v553[161];
    v580 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v561.f32)).u64[0];
    *(float *)v580.i32 = (float)v580.i32[0];
    v579.i32[1] = v580.i32[0];
    v580.i8[0] = v553[162];
    v579.f32[2] = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v580)).i32[0];
    a4 = vaddq_f32(a4, v578);
    v578 = vmulq_f32(v579, (float32x4_t)vdupq_n_s32(0x3B808081u));
  }
  v581 = vaddq_f32(a4, v578);
  result = 1;
  if (v553[163] <= 0)
  {
    v578.i64[0] = *(_QWORD *)v23;
    v578.i32[2] = *(_DWORD *)(v23 + 8);
    v582 = (int8x16_t)vmlsq_lane_f32(v578, v581, v19, 0);
    v583 = (float32x2_t)vextq_s8(v582, v582, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v582.i8, *(float32x2_t *)v582.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v582.i8, 1), *(float32x2_t *)v582.i8, 1), v583, v583).f32[0] <= v24)
    {
      if (v553[163])
        v584 = 2;
      else
        v584 = 1;
      **(_BYTE **)(v17 + 24) = v584;
      return v577;
    }
  }
  return result;
}

void sub_223973360(uint64_t a1, int a2, double a3)
{
  double v6;
  std::mutex *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  std::mutex *v10;
  double v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v21;
  std::string::size_type v22;
  int v23;
  __n128 *v26;
  std::string *v27;
  size_t v28;
  BOOL v29;
  BOOL v30;
  std::mutex *v31;
  double v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  std::mutex *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  int v44;
  __n128 *v47;
  std::string *v48;
  size_t v49;
  std::string __p;
  double v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (a2 == 2)
    v6 = 0.0;
  else
    v6 = 1.0;
  v7 = (std::mutex *)(a1 + 304);
  std::mutex::lock((std::mutex *)(a1 + 304));
  if (*(_BYTE *)(a1 + 376))
    v6 = v6 + *(double *)(a1 + 368);
  else
    *(_BYTE *)(a1 + 376) = 1;
  *(double *)(a1 + 368) = v6;
  *(double *)(a1 + 384) = *(double *)(a1 + 384) + 1.0;
  std::mutex::unlock(v7);
  v8 = atomic_load((unsigned __int8 *)&qword_25578E908);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25578E908))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2938, &byte_25578E8B8, &dword_22314D000);
    __cxa_guard_release(&qword_25578E908);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_25578E960);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25578E960))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2938, &byte_25578E910, &dword_22314D000);
    __cxa_guard_release(&qword_25578E960);
  }
  std::mutex::lock(&stru_25578E8C8);
  if (a2 != 2 && !byte_25578E8B8)
  {
    qword_25578E8C0 = *(_QWORD *)&a3;
LABEL_12:
    byte_25578E8B8 = a2 != 2;
    v10 = &stru_25578E8C8;
    goto LABEL_45;
  }
  if (a2 != 2 || !byte_25578E8B8)
    goto LABEL_12;
  v11 = a3 - *(double *)&qword_25578E8C0;
  byte_25578E8B8 = 0;
  std::mutex::unlock(&stru_25578E8C8);
  v51 = v11;
  v52 = 1;
  *(_QWORD *)&v53 = "cv3d.recon.";
  *((_QWORD *)&v53 + 1) = 11;
  *(_QWORD *)&v54 = "Stats.aggregated";
  *((_QWORD *)&v54 + 1) = 16;
  sub_2231A9820((uint64_t)&v53, (uint64_t)&v55, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v12 = sub_2241471F8();
    v13 = v12[2];
    if (!v13)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v13 = v12[2];
    }
    v14 = *(_QWORD *)(v13 + 64);
    v15 = (std::mutex *)(v14 + 32);
    std::mutex::lock((std::mutex *)(v14 + 32));
    v17 = *(_QWORD *)(v14 + 96);
    v16 = *(_QWORD *)(v14 + 104);
    std::mutex::unlock(v15);
    if (v17 != v16)
    {
      sub_2241471F8();
      v18 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18))
      {
        v53 = 0u;
        v54 = 0u;
        v55 = 728325608;
        kdebug_trace();
        sub_223973B54((double *)&qword_255788F20, v18, (uint64_t *)&v51, "duration_of_last_indoor");
        kdebug_trace();
      }
    }
  }
  v53 = 0u;
  v54 = 0u;
  v55 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v21 = p_p->__r_.__value_.__r.__words[0];
    v22 = p_p->__r_.__value_.__l.__size_;
    v23 = p_p->__r_.__value_.__s.__data_[16];
    if (v21 == 0x6365722E64337663 && v22 == 0x73746174532E6E6FLL && v23 == 46)
    {
      v26 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v28 = __p.__r_.__value_.__l.__size_;
      sub_2231AA374((uint64_t *)v26, v27, v28, (uint64_t *)&v51, (uint64_t)"duration_of_last_indoor", 23);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = (std::mutex *)(a1 + 5904);
  std::mutex::lock((std::mutex *)(a1 + 5904));
  ++*(_QWORD *)(a1 + 5968);
LABEL_45:
  std::mutex::unlock(v10);
  std::mutex::lock(&stru_25578E920);
  v29 = a2 != 2;
  if (byte_25578E910)
    v29 = 1;
  if (!v29)
  {
    qword_25578E918 = *(_QWORD *)&a3;
LABEL_53:
    byte_25578E910 = a2 == 2;
    v31 = &stru_25578E920;
    goto LABEL_84;
  }
  if (byte_25578E910)
    v30 = a2 == 2;
  else
    v30 = 1;
  if (v30)
    goto LABEL_53;
  v32 = a3 - *(double *)&qword_25578E918;
  byte_25578E910 = 0;
  std::mutex::unlock(&stru_25578E920);
  v51 = v32;
  v52 = 1;
  *(_QWORD *)&v53 = "cv3d.recon.";
  *((_QWORD *)&v53 + 1) = 11;
  *(_QWORD *)&v54 = "Stats.aggregated";
  *((_QWORD *)&v54 + 1) = 16;
  sub_2231A9820((uint64_t)&v53, (uint64_t)&v55, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v33 = sub_2241471F8();
    v34 = v33[2];
    if (!v34)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v34 = v33[2];
    }
    v35 = *(_QWORD *)(v34 + 64);
    v36 = (std::mutex *)(v35 + 32);
    std::mutex::lock((std::mutex *)(v35 + 32));
    v38 = *(_QWORD *)(v35 + 96);
    v37 = *(_QWORD *)(v35 + 104);
    std::mutex::unlock(v36);
    if (v38 != v37)
    {
      sub_2241471F8();
      v39 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39))
      {
        v53 = 0u;
        v54 = 0u;
        v55 = 728325608;
        kdebug_trace();
        sub_2238B2A9C((double *)&qword_255788F20, v39, (uint64_t *)&v51, "duration_of_last_outdoor");
        kdebug_trace();
      }
    }
  }
  v53 = 0u;
  v54 = 0u;
  v55 = 728325624;
  kdebug_trace();
  v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = __p.__r_.__value_.__l.__size_;
  if (v40 >= 0x11)
  {
    v41 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v42 = v41->__r_.__value_.__r.__words[0];
    v43 = v41->__r_.__value_.__l.__size_;
    v44 = v41->__r_.__value_.__s.__data_[16];
    if (v42 == 0x6365722E64337663 && v43 == 0x73746174532E6E6FLL && v44 == 46)
    {
      v47 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &__p;
      else
        v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v49 = __p.__r_.__value_.__l.__size_;
      sub_2231AA374((uint64_t *)v47, v48, v49, (uint64_t *)&v51, (uint64_t)"duration_of_last_outdoor", 24);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v31 = (std::mutex *)(a1 + 5904);
  std::mutex::lock((std::mutex *)(a1 + 5904));
  ++*(_QWORD *)(a1 + 5968);
LABEL_84:
  std::mutex::unlock(v31);
}

void sub_223973AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223973B54(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705350((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223973C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223973C90(uint64_t a1@<X0>, int *a2@<X1>, int32x2_t *a3@<X8>)
{
  int v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  __int32 v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  __int32 v21;
  __int32 v22;
  int v23;
  BOOL v24;
  uint64_t v26;
  uint64_t j;
  int32x2_t *v28;
  __int32 v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  char *v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  int i;
  int32x2_t v52;
  int v53;
  int32x2_t v54;
  int v55;
  char v56;
  int32x2_t v57;
  int32x2_t *v58;
  uint64_t *v59;
  int *v60;
  int32x2_t *v61;
  uint64_t v62;

  v4 = *(_DWORD *)(a1 + 176);
  if ((v4 & 0x80000000) == 0)
  {
    v7 = *(_DWORD *)(a1 + 180);
    if (v7 > *(_DWORD *)(a1 + 148))
    {
      v52 = (int32x2_t)a1;
      v8 = *a2 - (uint64_t)*(int *)(a1 + 260);
      v9 = a2[1] - (uint64_t)*(int *)(a1 + 264);
      v10 = a2[2] - (uint64_t)*(int *)(a1 + 268);
      v62 = v8 * v8 + v9 * v9 + v10 * v10;
      v54.i8[0] = 0;
      v56 = 0;
      v57 = (int32x2_t)a1;
      v58 = &v52;
      v59 = &v62;
      v60 = a2;
      v61 = &v54;
      sub_223E97E00(a1, v7, v4, (_DWORD *)a1, (uint64_t)&v57);
      if (v56)
      {
        v57 = v54;
        LODWORD(v58) = v55;
        v11 = *(unsigned int *)(a1 + 176);
        if ((v11 & 0x80000000) != 0)
          goto LABEL_15;
        v12 = *(_QWORD *)(a1 + 184);
        v13 = (int *)(v12 + 4488 * (v11 & 0xFFFFFFFFCFFFFFFFLL));
        v14 = *v13;
        v15 = v57.i32[0] - *v13;
        if (v57.i32[0] < *v13)
          goto LABEL_15;
        v16 = v13[1];
        v17 = __OFSUB__(v57.i32[1], v16);
        v18 = v57.i32[1] - v16;
        if (v18 < 0 != v17)
          goto LABEL_15;
        v19 = v13[2];
        v17 = __OFSUB__((_DWORD)v58, v19);
        v20 = (_DWORD)v58 - v19;
        if (v20 < 0 != v17)
          goto LABEL_15;
        v22 = v13[3];
        v21 = v13[4];
        v23 = v13[5];
        v24 = v57.i32[0] < v22 && v57.i32[1] < v21;
        if (!v24 || (int)v58 >= v23)
        {
LABEL_15:
          LODWORD(v11) = 0x80000000;
        }
        else
        {
          for (i = v22 - v14; ; v20 -= i & v20)
          {
            i >>= 1;
            LODWORD(v11) = *(_DWORD *)(v12
                                     + 4488 * (v11 & 0xCFFFFFFF)
                                     + 4 * ((4 * ((i & v15) != 0)) | (2 * ((i & v18) != 0)) | ((i & v20) != 0))
                                     + 24);
            if (i == *(_DWORD *)(a1 + 136) || v11 >> 30)
              break;
            v15 -= i & v15;
            v18 -= i & v18;
          }
          if ((v11 & 0x80000000) == 0)
          {
LABEL_18:
            v26 = *(_QWORD *)(a1 + 2328);
            if (v11 >= (unint64_t)((*(_QWORD *)(a1 + 2336) - v26) >> 11))
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 630, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_55;
              }
              v26 = *(_QWORD *)(a1 + 2328);
            }
            sub_22397412C(a1, (int *)&v57, a1, (int *)(v26 + ((unint64_t)v11 << 11)));
            sub_223E8A9D8(a1, (int *)&v57);
            for (j = 0; j != 27; ++j)
            {
              v28 = (int32x2_t *)((char *)&unk_224656404 + 12 * byte_2246563E8[j]);
              v29 = v28[1].i32[0];
              v52 = vadd_s32(v57, vshl_n_s32(*v28, 3uLL));
              v53 = (_DWORD)v58 + 8 * v29;
              sub_22397FD34((uint64_t **)(a1 + 2376), (int *)&v52, (uint64_t)&v52);
            }
            if (v11 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 2336) - *(_QWORD *)(a1 + 2328)) >> 11)
              || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 368, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
            {
              v30 = *(char **)(a1 + 2360);
              v31 = *(_QWORD *)(a1 + 2368);
              if ((unint64_t)v30 < v31)
              {
                *(_DWORD *)v30 = v11;
                v32 = (uint64_t)(v30 + 4);
LABEL_48:
                *(_QWORD *)(a1 + 2360) = v32;
                *a3 = v57;
                a3[1].i32[0] = (int)v58;
                a3[1].i8[4] = 1;
                return;
              }
              v33 = *(char **)(a1 + 2352);
              v34 = (v30 - v33) >> 2;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62)
                sub_22316E078();
              v36 = v31 - (_QWORD)v33;
              if (v36 >> 1 > v35)
                v35 = v36 >> 1;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                v37 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                if (v37 >> 62)
                  sub_223174E94();
                v38 = operator new(4 * v37);
                v39 = &v38[4 * v34];
                v40 = &v38[4 * v37];
                *v39 = v11;
                v32 = (uint64_t)(v39 + 1);
                v41 = v30 - v33;
                if (v30 == v33)
                  goto LABEL_46;
              }
              else
              {
                v38 = 0;
                v39 = (_DWORD *)(4 * v34);
                v40 = 0;
                *(_DWORD *)(4 * v34) = v11;
                v32 = 4 * v34 + 4;
                v41 = v30 - v33;
                if (v30 == v33)
                {
LABEL_46:
                  *(_QWORD *)(a1 + 2352) = v39;
                  *(_QWORD *)(a1 + 2360) = v32;
                  *(_QWORD *)(a1 + 2368) = v40;
                  if (v33)
                    operator delete(v33);
                  goto LABEL_48;
                }
              }
              v42 = v41 - 4;
              if (v42 < 0x2C)
                goto LABEL_60;
              if ((unint64_t)(v33 - v38) < 0x20)
                goto LABEL_60;
              v43 = (v42 >> 2) + 1;
              v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
              v45 = &v30[-v44];
              v39 = (_DWORD *)((char *)v39 - v44);
              v46 = &v38[4 * v34 - 16];
              v47 = v30 - 16;
              v48 = v43 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v49 = *(_OWORD *)v47;
                *(v46 - 1) = *((_OWORD *)v47 - 1);
                *v46 = v49;
                v46 -= 2;
                v47 -= 32;
                v48 -= 8;
              }
              while (v48);
              v30 = v45;
              if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_60:
                do
                {
                  v50 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *--v39 = v50;
                }
                while (v30 != v33);
              }
              goto LABEL_46;
            }
LABEL_55:
            abort();
          }
        }
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 346, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Deallocating unknown block", 26, (void (*)(void **))sub_22457406C)|| sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 629, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown block index", 19, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_55;
        }
        goto LABEL_18;
      }
    }
  }
  a3->i8[0] = 0;
  a3[1].i8[4] = 0;
}

uint64_t sub_22397412C(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  _QWORD v16[2];
  int v17;
  int v18;
  int v19;

  v16[0] = a3;
  v16[1] = a4;
  v7 = *a2;
  v8 = a2[1];
  v17 = *a2;
  v18 = v8;
  v9 = a2[2];
  v19 = v9;
  v10 = *a4;
  if (*a4 != *(_DWORD *)(a3 + 272))
  {
    v11 = *(_QWORD *)(a3 + 2424);
    if (!v11)
      goto LABEL_8;
    (*(void (**)(uint64_t, int *, int *))(*(_QWORD *)v11 + 48))(v11, &v17, a4);
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = *(_DWORD *)(a3 + 272);
  }
  v17 = v7 + 1;
  v18 = v8;
  v19 = v9;
  v13 = a4[1];
  v12 = a4 + 1;
  if (v13 != v10)
  {
    v14 = *(_QWORD *)(a3 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v17, v12);
      return sub_2239741F0(v16, a2);
    }
LABEL_8:
    sub_223198474();
  }
  return sub_2239741F0(v16, a2);
}

uint64_t sub_2239741F0(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1];
  v16 = *a2 + 2;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[2];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 2);
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
  }
  v16 = v4 + 3;
  v17 = v5;
  v18 = v6;
  if (v7[3] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 3);
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
  }
  v16 = v4 + 4;
  v17 = v5;
  v18 = v6;
  v13 = v7[4];
  v12 = v7 + 4;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_2239742F8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239742F8(a1, a2);
}

uint64_t sub_2239742F8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1];
  v16 = *a2 + 5;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[5];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 5);
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
  }
  v16 = v4 + 6;
  v17 = v5;
  v18 = v6;
  if (v7[6] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 6);
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
  }
  v16 = v4 + 7;
  v17 = v5;
  v18 = v6;
  v13 = v7[7];
  v12 = v7 + 7;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223974400(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974400(a1, a2);
}

uint64_t sub_223974400(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 1;
  v16 = *a2;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[8];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 8);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 1;
  }
  v16 = v4 + 1;
  v17 = v5;
  v18 = v6;
  if (v7[9] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 9);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 1;
  }
  v16 = v4 + 2;
  v17 = v5;
  v18 = v6;
  v13 = v7[10];
  v12 = v7 + 10;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223974510(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974510(a1, a2);
}

uint64_t sub_223974510(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 1;
  v16 = *a2 + 3;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[11];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 11);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 1;
  }
  v16 = v4 + 4;
  v17 = v5;
  v18 = v6;
  if (v7[12] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 12);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 1;
  }
  v16 = v4 + 5;
  v17 = v5;
  v18 = v6;
  v13 = v7[13];
  v12 = v7 + 13;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223974624(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974624(a1, a2);
}

uint64_t sub_223974624(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  int v17;
  int v18;
  int v19;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 1;
  v17 = *a2 + 6;
  v18 = v5 + 1;
  v7 = a2[2];
  v19 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[14];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v17, v8 + 14);
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 1;
  }
  v17 = v4 + 7;
  v18 = v6;
  v19 = v7;
  if (v8[15] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v17, v8 + 15);
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
  }
  v17 = v4;
  v18 = v5 + 2;
  v19 = v7;
  v14 = v8[16];
  v13 = v8 + 16;
  if (v14 != v10)
  {
    v15 = *(_QWORD *)(v9 + 2424);
    if (v15)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v15 + 48))(v15, &v17, v13);
      return sub_223974734(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974734(a1, a2);
}

uint64_t sub_223974734(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 2;
  v16 = *a2 + 1;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[17];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 17);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 2;
  }
  v16 = v4 + 2;
  v17 = v5;
  v18 = v6;
  if (v7[18] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 18);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 2;
  }
  v16 = v4 + 3;
  v17 = v5;
  v18 = v6;
  v13 = v7[19];
  v12 = v7 + 19;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223974848(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974848(a1, a2);
}

uint64_t sub_223974848(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 2;
  v16 = *a2 + 4;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[20];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 20);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 2;
  }
  v16 = v4 + 5;
  v17 = v5;
  v18 = v6;
  if (v7[21] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 21);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 2;
  }
  v16 = v4 + 6;
  v17 = v5;
  v18 = v6;
  v13 = v7[22];
  v12 = v7 + 22;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_22397495C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397495C(a1, a2);
}

uint64_t sub_22397495C(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  int v17;
  int v18;
  int v19;

  v4 = *a2;
  v5 = a2[1];
  v17 = *a2 + 7;
  v18 = v5 + 2;
  v6 = a2[2];
  v19 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[23];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v17, v7 + 23);
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
  }
  v11 = v5 + 3;
  v17 = v4;
  v18 = v11;
  v19 = v6;
  if (v7[24] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v17, v7 + 24);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 3;
  }
  v17 = v4 + 1;
  v18 = v11;
  v19 = v6;
  v14 = v7[25];
  v13 = v7 + 25;
  if (v14 != v9)
  {
    v15 = *(_QWORD *)(v8 + 2424);
    if (v15)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v15 + 48))(v15, &v17, v13);
      return sub_223974A6C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974A6C(a1, a2);
}

uint64_t sub_223974A6C(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 3;
  v16 = *a2 + 2;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[26];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 26);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 3;
  }
  v16 = v4 + 3;
  v17 = v5;
  v18 = v6;
  if (v7[27] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 27);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 3;
  }
  v16 = v4 + 4;
  v17 = v5;
  v18 = v6;
  v13 = v7[28];
  v12 = v7 + 28;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223974B80(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974B80(a1, a2);
}

uint64_t sub_223974B80(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 3;
  v16 = *a2 + 5;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[29];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 29);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 3;
  }
  v16 = v4 + 6;
  v17 = v5;
  v18 = v6;
  if (v7[30] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 30);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 3;
  }
  v16 = v4 + 7;
  v17 = v5;
  v18 = v6;
  v13 = v7[31];
  v12 = v7 + 31;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223974C94(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974C94(a1, a2);
}

uint64_t sub_223974C94(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 4;
  v16 = *a2;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[32];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 32);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 4;
  }
  v16 = v4 + 1;
  v17 = v5;
  v18 = v6;
  if (v7[33] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 33);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 4;
  }
  v16 = v4 + 2;
  v17 = v5;
  v18 = v6;
  v13 = v7[34];
  v12 = v7 + 34;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223974DA4(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974DA4(a1, a2);
}

uint64_t sub_223974DA4(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 4;
  v16 = *a2 + 3;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[35];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 35);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 4;
  }
  v16 = v4 + 4;
  v17 = v5;
  v18 = v6;
  if (v7[36] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 36);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 4;
  }
  v16 = v4 + 5;
  v17 = v5;
  v18 = v6;
  v13 = v7[37];
  v12 = v7 + 37;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223974EB8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974EB8(a1, a2);
}

uint64_t sub_223974EB8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  int v17;
  int v18;
  int v19;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 4;
  v17 = *a2 + 6;
  v18 = v5 + 4;
  v7 = a2[2];
  v19 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[38];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v17, v8 + 38);
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 4;
  }
  v17 = v4 + 7;
  v18 = v6;
  v19 = v7;
  if (v8[39] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v17, v8 + 39);
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
  }
  v17 = v4;
  v18 = v5 + 5;
  v19 = v7;
  v14 = v8[40];
  v13 = v8 + 40;
  if (v14 != v10)
  {
    v15 = *(_QWORD *)(v9 + 2424);
    if (v15)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v15 + 48))(v15, &v17, v13);
      return sub_223974FC8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223974FC8(a1, a2);
}

uint64_t sub_223974FC8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 5;
  v16 = *a2 + 1;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[41];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 41);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 5;
  }
  v16 = v4 + 2;
  v17 = v5;
  v18 = v6;
  if (v7[42] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 42);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 5;
  }
  v16 = v4 + 3;
  v17 = v5;
  v18 = v6;
  v13 = v7[43];
  v12 = v7 + 43;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_2239750DC(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239750DC(a1, a2);
}

uint64_t sub_2239750DC(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 5;
  v16 = *a2 + 4;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[44];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 44);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 5;
  }
  v16 = v4 + 5;
  v17 = v5;
  v18 = v6;
  if (v7[45] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 45);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 5;
  }
  v16 = v4 + 6;
  v17 = v5;
  v18 = v6;
  v13 = v7[46];
  v12 = v7 + 46;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_2239751F0(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239751F0(a1, a2);
}

uint64_t sub_2239751F0(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  int v17;
  int v18;
  int v19;

  v4 = *a2;
  v5 = a2[1];
  v17 = *a2 + 7;
  v18 = v5 + 5;
  v6 = a2[2];
  v19 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[47];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v17, v7 + 47);
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
  }
  v11 = v5 + 6;
  v17 = v4;
  v18 = v11;
  v19 = v6;
  if (v7[48] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v17, v7 + 48);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 6;
  }
  v17 = v4 + 1;
  v18 = v11;
  v19 = v6;
  v14 = v7[49];
  v13 = v7 + 49;
  if (v14 != v9)
  {
    v15 = *(_QWORD *)(v8 + 2424);
    if (v15)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v15 + 48))(v15, &v17, v13);
      return sub_223975300(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975300(a1, a2);
}

uint64_t sub_223975300(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 6;
  v16 = *a2 + 2;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[50];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 50);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 6;
  }
  v16 = v4 + 3;
  v17 = v5;
  v18 = v6;
  if (v7[51] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 51);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 6;
  }
  v16 = v4 + 4;
  v17 = v5;
  v18 = v6;
  v13 = v7[52];
  v12 = v7 + 52;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223975414(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975414(a1, a2);
}

uint64_t sub_223975414(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 6;
  v16 = *a2 + 5;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[53];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 53);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 6;
  }
  v16 = v4 + 6;
  v17 = v5;
  v18 = v6;
  if (v7[54] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 54);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 6;
  }
  v16 = v4 + 7;
  v17 = v5;
  v18 = v6;
  v13 = v7[55];
  v12 = v7 + 55;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223975528(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975528(a1, a2);
}

uint64_t sub_223975528(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 7;
  v16 = *a2;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[56];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 56);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 7;
  }
  v16 = v4 + 1;
  v17 = v5;
  v18 = v6;
  if (v7[57] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 57);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 7;
  }
  v16 = v4 + 2;
  v17 = v5;
  v18 = v6;
  v13 = v7[58];
  v12 = v7 + 58;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_223975638(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975638(a1, a2);
}

uint64_t sub_223975638(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1] + 7;
  v16 = *a2 + 3;
  v17 = v5;
  v6 = a2[2];
  v18 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[59];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v16, v7 + 59);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 7;
  }
  v16 = v4 + 4;
  v17 = v5;
  v18 = v6;
  if (v7[60] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v16, v7 + 60);
    v4 = *a2;
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v5 = a2[1] + 7;
  }
  v16 = v4 + 5;
  v17 = v5;
  v18 = v6;
  v13 = v7[61];
  v12 = v7 + 61;
  if (v13 != v9)
  {
    v14 = *(_QWORD *)(v8 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v12);
      return sub_22397574C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397574C(a1, a2);
}

uint64_t sub_22397574C(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 7;
  v15 = *a2 + 6;
  v16 = v5 + 7;
  v7 = a2[2];
  v17 = v7;
  v8 = *a1;
  v9 = (_DWORD *)a1[1];
  v10 = v9[62];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v9 + 62);
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v8 = *a1;
    v9 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 7;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v9[63] != v10)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v9 + 63);
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v8 = *a1;
    v9 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
  }
  v15 = v4;
  v16 = v5;
  v17 = v7 + 1;
  if (v9[64] != v10)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v9 + 64);
      return sub_223975858(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975858(a1, a2);
}

uint64_t sub_223975858(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 1;
  v15 = v5;
  v6 = a2[2] + 1;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[65];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 65);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 1;
  }
  v14 = v4 + 2;
  v15 = v5;
  v16 = v6;
  if (v7[66] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 66);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 1;
  }
  v14 = v4 + 3;
  v15 = v5;
  v16 = v6;
  if (v7[67] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 67);
      return sub_223975968(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975968(a1, a2);
}

uint64_t sub_223975968(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 4;
  v15 = v5;
  v6 = a2[2] + 1;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[68];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 68);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 1;
  }
  v14 = v4 + 5;
  v15 = v5;
  v16 = v6;
  if (v7[69] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 69);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 1;
  }
  v14 = v4 + 6;
  v15 = v5;
  v16 = v6;
  if (v7[70] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 70);
      return sub_223975A78(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975A78(a1, a2);
}

uint64_t sub_223975A78(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5;
  v6 = a2[2] + 1;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[71];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 71);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 1;
  }
  v11 = v5 + 1;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[72] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 72);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 1;
    v6 = a2[2] + 1;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[73] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 73);
      return sub_223975B8C(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975B8C(a1, (uint64_t)a2);
}

uint64_t sub_223975B8C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[74];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 74);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000001);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[75] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 75);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000001);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[76] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 76);
      return sub_223975CA8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975CA8(a1, a2);
}

uint64_t sub_223975CA8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[77];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 77);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000001);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[78] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 78);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000001);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[79] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 79);
      return sub_223975DC4(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975DC4(a1, a2);
}

uint64_t sub_223975DC4(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[80];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 80);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000002);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[81] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 81);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000002);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[82] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 82);
      return sub_223975EE0(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223975EE0(a1, a2);
}

uint64_t sub_223975EE0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[83];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 83);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000002);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[84] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 84);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000002);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[85] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 85);
      return sub_223976000(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976000(a1, (int *)a2);
}

uint64_t sub_223976000(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 2;
  v15 = *a2 + 6;
  v16 = v5 + 2;
  v7 = a2[2] + 1;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[86];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 86);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 2;
    v7 = a2[2] + 1;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[87] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 87);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 1;
  }
  v15 = v4;
  v16 = v5 + 3;
  v17 = v7;
  if (v8[88] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 88);
      return sub_223976118(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976118(a1, (uint64_t)a2);
}

uint64_t sub_223976118(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[89];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 89);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000003);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[90] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 90);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000003);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[91] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 91);
      return sub_223976238(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976238(a1, a2);
}

uint64_t sub_223976238(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[92];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 92);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000003);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[93] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 93);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000003);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[94] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 94);
      return sub_223976358(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976358(a1, (int *)a2);
}

uint64_t sub_223976358(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 3;
  v6 = a2[2] + 1;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[95];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 95);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 1;
  }
  v11 = v5 + 4;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[96] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 96);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 4;
    v6 = a2[2] + 1;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[97] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 97);
      return sub_223976470(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976470(a1, (uint64_t)a2);
}

uint64_t sub_223976470(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[98];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 98);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000004);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[99] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 99);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000004);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[100] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 100);
      return sub_223976590(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976590(a1, a2);
}

uint64_t sub_223976590(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[101];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 101);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000004);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[102] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 102);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000004);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[103] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 103);
      return sub_2239766B0(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239766B0(a1, a2);
}

uint64_t sub_2239766B0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[104];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 104);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000005);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[105] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 105);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000005);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[106] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 106);
      return sub_2239767CC(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239767CC(a1, a2);
}

uint64_t sub_2239767CC(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[107];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 107);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000005);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[108] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 108);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000005);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[109] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 109);
      return sub_2239768EC(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239768EC(a1, (int *)a2);
}

uint64_t sub_2239768EC(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 5;
  v15 = *a2 + 6;
  v16 = v5 + 5;
  v7 = a2[2] + 1;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[110];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 110);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 5;
    v7 = a2[2] + 1;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[111] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 111);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 1;
  }
  v15 = v4;
  v16 = v5 + 6;
  v17 = v7;
  if (v8[112] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 112);
      return sub_223976A04(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976A04(a1, (uint64_t)a2);
}

uint64_t sub_223976A04(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[113];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 113);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000006);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[114] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 114);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000006);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[115] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 115);
      return sub_223976B24(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976B24(a1, a2);
}

uint64_t sub_223976B24(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[116];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 116);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000006);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[117] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 117);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000006);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[118] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 118);
      return sub_223976C44(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976C44(a1, (int *)a2);
}

uint64_t sub_223976C44(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 6;
  v6 = a2[2] + 1;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[119];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 119);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 1;
  }
  v11 = v5 + 7;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[120] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 120);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 7;
    v6 = a2[2] + 1;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[121] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 121);
      return sub_223976D5C(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976D5C(a1, (uint64_t)a2);
}

uint64_t sub_223976D5C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[122];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 122);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000007);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[123] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 123);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000007);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[124] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 124);
      return sub_223976E7C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976E7C(a1, a2);
}

uint64_t sub_223976E7C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[125];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 125);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000007);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[126] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 126);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000007);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[127] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 127);
      return sub_223976F9C(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223976F9C(a1, (int *)a2);
}

uint64_t sub_223976F9C(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2;
  v15 = v5;
  v6 = a2[2] + 2;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[128];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 128);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 2;
  }
  v14 = v4 + 1;
  v15 = v5;
  v16 = v6;
  if (v7[129] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 129);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 2;
  }
  v14 = v4 + 2;
  v15 = v5;
  v16 = v6;
  if (v7[130] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 130);
      return sub_2239770A8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239770A8(a1, a2);
}

uint64_t sub_2239770A8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 3;
  v15 = v5;
  v6 = a2[2] + 2;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[131];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 131);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 2;
  }
  v14 = v4 + 4;
  v15 = v5;
  v16 = v6;
  if (v7[132] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 132);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 2;
  }
  v14 = v4 + 5;
  v15 = v5;
  v16 = v6;
  if (v7[133] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 133);
      return sub_2239771B8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239771B8(a1, a2);
}

uint64_t sub_2239771B8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 6;
  v15 = v5;
  v6 = a2[2] + 2;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[134];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 134);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 2;
  }
  v14 = v4 + 7;
  v15 = v5;
  v16 = v6;
  if (v7[135] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 135);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 2;
  }
  v14 = v4;
  v15 = v5 + 1;
  v16 = v6;
  if (v7[136] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 136);
      return sub_2239772C8(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239772C8(a1, (uint64_t)a2);
}

uint64_t sub_2239772C8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[137];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 137);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000001);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[138] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 138);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000001);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[139] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 139);
      return sub_2239773E8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239773E8(a1, a2);
}

uint64_t sub_2239773E8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[140];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 140);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000001);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[141] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 141);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000001);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[142] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 142);
      return sub_223977508(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223977508(a1, (int *)a2);
}

uint64_t sub_223977508(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 1;
  v6 = a2[2] + 2;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[143];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 143);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 2;
  }
  v11 = v5 + 2;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[144] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 144);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 2;
    v6 = a2[2] + 2;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[145] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 145);
      return sub_223977620(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223977620(a1, (uint64_t)a2);
}

uint64_t sub_223977620(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[146];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 146);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000002);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[147] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 147);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000002);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[148] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 148);
      return sub_22397773C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397773C(a1, a2);
}

uint64_t sub_22397773C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[149];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 149);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000002);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[150] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 150);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000002);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[151] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 151);
      return sub_223977858(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223977858(a1, a2);
}

uint64_t sub_223977858(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[152];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 152);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000003);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[153] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 153);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000003);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[154] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 154);
      return sub_223977974(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223977974(a1, a2);
}

uint64_t sub_223977974(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[155];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 155);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000003);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[156] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 156);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000003);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[157] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 157);
      return sub_223977A94(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223977A94(a1, (int *)a2);
}

uint64_t sub_223977A94(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 3;
  v15 = *a2 + 6;
  v16 = v5 + 3;
  v7 = a2[2] + 2;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[158];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 158);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 3;
    v7 = a2[2] + 2;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[159] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 159);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 2;
  }
  v15 = v4;
  v16 = v5 + 4;
  v17 = v7;
  if (v8[160] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 160);
      return sub_223977BAC(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223977BAC(a1, (uint64_t)a2);
}

uint64_t sub_223977BAC(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[161];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 161);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000004);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[162] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 162);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000004);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[163] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 163);
      return sub_223977CCC(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223977CCC(a1, a2);
}

uint64_t sub_223977CCC(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[164];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 164);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000004);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[165] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 165);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000004);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[166] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 166);
      return sub_223977DEC(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223977DEC(a1, (int *)a2);
}

uint64_t sub_223977DEC(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 4;
  v6 = a2[2] + 2;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[167];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 167);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 2;
  }
  v11 = v5 + 5;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[168] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 168);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 5;
    v6 = a2[2] + 2;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[169] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 169);
      return sub_223977F04(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223977F04(a1, (uint64_t)a2);
}

uint64_t sub_223977F04(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[170];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 170);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000005);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[171] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 171);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000005);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[172] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 172);
      return sub_223978024(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978024(a1, a2);
}

uint64_t sub_223978024(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[173];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 173);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000005);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[174] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 174);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000005);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[175] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 175);
      return sub_223978144(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978144(a1, a2);
}

uint64_t sub_223978144(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[176];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 176);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000006);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[177] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 177);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000006);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[178] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 178);
      return sub_223978260(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978260(a1, a2);
}

uint64_t sub_223978260(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[179];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 179);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000006);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[180] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 180);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000006);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[181] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 181);
      return sub_223978380(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978380(a1, (int *)a2);
}

uint64_t sub_223978380(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 6;
  v15 = *a2 + 6;
  v16 = v5 + 6;
  v7 = a2[2] + 2;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[182];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 182);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 6;
    v7 = a2[2] + 2;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[183] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 183);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 2;
  }
  v15 = v4;
  v16 = v5 + 7;
  v17 = v7;
  if (v8[184] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 184);
      return sub_223978498(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978498(a1, (uint64_t)a2);
}

uint64_t sub_223978498(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[185];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 185);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000007);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[186] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 186);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000007);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[187] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 187);
      return sub_2239785B8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239785B8(a1, a2);
}

uint64_t sub_2239785B8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[188];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 188);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000007);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[189] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 189);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000007);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[190] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 190);
      return sub_2239786D8(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239786D8(a1, (int *)a2);
}

uint64_t sub_2239786D8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 7;
  v6 = a2[2];
  v17 = v6 + 2;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[191];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 191);
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
  }
  v15 = v4;
  v16 = v5;
  v11 = v6 + 3;
  v17 = v11;
  if (v7[192] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 192);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[2] + 3;
  }
  v15 = v4 + 1;
  v16 = v5;
  v17 = v11;
  if (v7[193] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 193);
      return sub_2239787E8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239787E8(a1, a2);
}

uint64_t sub_2239787E8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 2;
  v15 = v5;
  v6 = a2[2] + 3;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[194];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 194);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 3;
  }
  v14 = v4 + 3;
  v15 = v5;
  v16 = v6;
  if (v7[195] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 195);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 3;
  }
  v14 = v4 + 4;
  v15 = v5;
  v16 = v6;
  if (v7[196] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 196);
      return sub_2239788F8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239788F8(a1, a2);
}

uint64_t sub_2239788F8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 5;
  v15 = v5;
  v6 = a2[2] + 3;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[197];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 197);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 3;
  }
  v14 = v4 + 6;
  v15 = v5;
  v16 = v6;
  if (v7[198] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 198);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 3;
  }
  v14 = v4 + 7;
  v15 = v5;
  v16 = v6;
  if (v7[199] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 199);
      return sub_223978A08(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978A08(a1, (uint64_t)a2);
}

uint64_t sub_223978A08(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[200];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 200);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000001);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[201] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 201);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000001);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[202] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 202);
      return sub_223978B24(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978B24(a1, a2);
}

uint64_t sub_223978B24(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[203];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 203);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000001);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[204] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 204);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000001);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[205] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 205);
      return sub_223978C44(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978C44(a1, (int *)a2);
}

uint64_t sub_223978C44(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 1;
  v15 = *a2 + 6;
  v16 = v5 + 1;
  v7 = a2[2] + 3;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[206];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 206);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 1;
    v7 = a2[2] + 3;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[207] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 207);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 3;
  }
  v15 = v4;
  v16 = v5 + 2;
  v17 = v7;
  if (v8[208] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 208);
      return sub_223978D5C(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978D5C(a1, (uint64_t)a2);
}

uint64_t sub_223978D5C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[209];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 209);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000002);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[210] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 210);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000002);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[211] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 211);
      return sub_223978E7C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978E7C(a1, a2);
}

uint64_t sub_223978E7C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[212];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 212);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000002);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[213] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 213);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000002);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[214] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 214);
      return sub_223978F9C(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223978F9C(a1, (int *)a2);
}

uint64_t sub_223978F9C(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 2;
  v6 = a2[2] + 3;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[215];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 215);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 3;
  }
  v11 = v5 + 3;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[216] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 216);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 3;
    v6 = a2[2] + 3;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[217] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 217);
      return sub_2239790B4(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239790B4(a1, (uint64_t)a2);
}

uint64_t sub_2239790B4(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[218];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 218);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000003);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[219] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 219);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000003);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[220] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 220);
      return sub_2239791D0(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239791D0(a1, a2);
}

uint64_t sub_2239791D0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[221];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 221);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000003);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[222] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 222);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000003);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[223] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 223);
      return sub_2239792EC(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_2239792EC(a1, a2);
}

uint64_t sub_2239792EC(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[224];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 224);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000004);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[225] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 225);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000004);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[226] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 226);
      return sub_223979408(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979408(a1, a2);
}

uint64_t sub_223979408(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[227];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 227);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000004);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[228] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 228);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000004);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[229] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 229);
      return sub_223979528(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979528(a1, (int *)a2);
}

uint64_t sub_223979528(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 4;
  v15 = *a2 + 6;
  v16 = v5 + 4;
  v7 = a2[2] + 3;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[230];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 230);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 4;
    v7 = a2[2] + 3;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[231] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 231);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 3;
  }
  v15 = v4;
  v16 = v5 + 5;
  v17 = v7;
  if (v8[232] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 232);
      return sub_223979640(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979640(a1, (uint64_t)a2);
}

uint64_t sub_223979640(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[233];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 233);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000005);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[234] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 234);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000005);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[235] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 235);
      return sub_223979760(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979760(a1, a2);
}

uint64_t sub_223979760(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[236];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 236);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000005);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[237] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 237);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000005);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[238] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 238);
      return sub_223979880(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979880(a1, (int *)a2);
}

uint64_t sub_223979880(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 5;
  v6 = a2[2] + 3;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[239];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 239);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 3;
  }
  v11 = v5 + 6;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[240] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 240);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 6;
    v6 = a2[2] + 3;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[241] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 241);
      return sub_223979998(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979998(a1, (uint64_t)a2);
}

uint64_t sub_223979998(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[242];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 242);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000006);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[243] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 243);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000006);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[244] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 244);
      return sub_223979AB8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979AB8(a1, a2);
}

uint64_t sub_223979AB8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[245];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 245);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000006);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[246] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 246);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000006);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[247] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 247);
      return sub_223979BD8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979BD8(a1, a2);
}

uint64_t sub_223979BD8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[248];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 248);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000007);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[249] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 249);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000007);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[250] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 250);
      return sub_223979CF4(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979CF4(a1, a2);
}

uint64_t sub_223979CF4(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[251];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 251);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000007);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[252] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 252);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000007);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[253] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 253);
      return sub_223979E14(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979E14(a1, (int *)a2);
}

uint64_t sub_223979E14(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 7;
  v16 = *a2 + 6;
  v17 = v5 + 7;
  v7 = a2[2];
  v8 = v7 + 3;
  v18 = v7 + 3;
  v10 = *a1;
  v9 = (_DWORD *)a1[1];
  v11 = v9[254];
  if (v11 != *(_DWORD *)(*a1 + 272))
  {
    v12 = *(_QWORD *)(v10 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v16, v9 + 254);
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v10 = *a1;
    v9 = (_DWORD *)a1[1];
    v11 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 7;
    v8 = v7 + 3;
  }
  v16 = v4 + 7;
  v17 = v6;
  v18 = v8;
  if (v9[255] != v11)
  {
    v13 = *(_QWORD *)(v10 + 2424);
    if (!v13)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v16, v9 + 255);
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v10 = *a1;
    v9 = (_DWORD *)a1[1];
    v11 = *(_DWORD *)(*a1 + 272);
  }
  v16 = v4;
  v17 = v5;
  v18 = v7 + 4;
  if (v9[256] != v11)
  {
    v14 = *(_QWORD *)(v10 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v9 + 256);
      return sub_223979F28(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_223979F28(a1, a2);
}

uint64_t sub_223979F28(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 1;
  v15 = v5;
  v6 = a2[2] + 4;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[257];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 257);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 4;
  }
  v14 = v4 + 2;
  v15 = v5;
  v16 = v6;
  if (v7[258] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 258);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 4;
  }
  v14 = v4 + 3;
  v15 = v5;
  v16 = v6;
  if (v7[259] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 259);
      return sub_22397A038(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397A038(a1, a2);
}

uint64_t sub_22397A038(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 4;
  v15 = v5;
  v6 = a2[2] + 4;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[260];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 260);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 4;
  }
  v14 = v4 + 5;
  v15 = v5;
  v16 = v6;
  if (v7[261] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 261);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 4;
  }
  v14 = v4 + 6;
  v15 = v5;
  v16 = v6;
  if (v7[262] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 262);
      return sub_22397A148(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397A148(a1, a2);
}

uint64_t sub_22397A148(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5;
  v6 = a2[2] + 4;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[263];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 263);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 4;
  }
  v11 = v5 + 1;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[264] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 264);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 1;
    v6 = a2[2] + 4;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[265] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 265);
      return sub_22397A25C(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397A25C(a1, (uint64_t)a2);
}

uint64_t sub_22397A25C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[266];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 266);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000001);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[267] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 267);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000001);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[268] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 268);
      return sub_22397A37C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397A37C(a1, a2);
}

uint64_t sub_22397A37C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[269];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 269);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000001);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[270] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 270);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000001);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[271] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 271);
      return sub_22397A49C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397A49C(a1, a2);
}

uint64_t sub_22397A49C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[272];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 272);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000002);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[273] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 273);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000002);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[274] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 274);
      return sub_22397A5B8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397A5B8(a1, a2);
}

uint64_t sub_22397A5B8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[275];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 275);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000002);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[276] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 276);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000002);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[277] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 277);
      return sub_22397A6D8(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397A6D8(a1, (int *)a2);
}

uint64_t sub_22397A6D8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 2;
  v15 = *a2 + 6;
  v16 = v5 + 2;
  v7 = a2[2] + 4;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[278];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 278);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 2;
    v7 = a2[2] + 4;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[279] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 279);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 4;
  }
  v15 = v4;
  v16 = v5 + 3;
  v17 = v7;
  if (v8[280] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 280);
      return sub_22397A7F0(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397A7F0(a1, (uint64_t)a2);
}

uint64_t sub_22397A7F0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[281];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 281);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000003);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[282] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 282);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000003);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[283] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 283);
      return sub_22397A910(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397A910(a1, a2);
}

uint64_t sub_22397A910(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[284];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 284);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000003);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[285] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 285);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000003);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[286] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 286);
      return sub_22397AA30(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397AA30(a1, (int *)a2);
}

uint64_t sub_22397AA30(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 3;
  v6 = a2[2] + 4;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[287];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 287);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 4;
  }
  v11 = v5 + 4;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[288] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 288);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 4;
    v6 = a2[2] + 4;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[289] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 289);
      return sub_22397AB48(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397AB48(a1, (uint64_t)a2);
}

uint64_t sub_22397AB48(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[290];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 290);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000004);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[291] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 291);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000004);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[292] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 292);
      return sub_22397AC64(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397AC64(a1, a2);
}

uint64_t sub_22397AC64(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[293];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 293);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000004);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[294] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 294);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000004);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[295] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 295);
      return sub_22397AD80(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397AD80(a1, a2);
}

uint64_t sub_22397AD80(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[296];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 296);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000005);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[297] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 297);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000005);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[298] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 298);
      return sub_22397AE9C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397AE9C(a1, a2);
}

uint64_t sub_22397AE9C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[299];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 299);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000005);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[300] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 300);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000005);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[301] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 301);
      return sub_22397AFBC(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397AFBC(a1, (int *)a2);
}

uint64_t sub_22397AFBC(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 5;
  v15 = *a2 + 6;
  v16 = v5 + 5;
  v7 = a2[2] + 4;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[302];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 302);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 5;
    v7 = a2[2] + 4;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[303] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 303);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 4;
  }
  v15 = v4;
  v16 = v5 + 6;
  v17 = v7;
  if (v8[304] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 304);
      return sub_22397B0D4(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397B0D4(a1, (uint64_t)a2);
}

uint64_t sub_22397B0D4(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[305];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 305);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000006);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[306] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 306);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000006);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[307] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 307);
      return sub_22397B1F4(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397B1F4(a1, a2);
}

uint64_t sub_22397B1F4(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[308];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 308);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000006);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[309] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 309);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000006);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[310] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 310);
      return sub_22397B314(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397B314(a1, (int *)a2);
}

uint64_t sub_22397B314(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 6;
  v6 = a2[2] + 4;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[311];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 311);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 4;
  }
  v11 = v5 + 7;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[312] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 312);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 7;
    v6 = a2[2] + 4;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[313] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 313);
      return sub_22397B42C(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397B42C(a1, (uint64_t)a2);
}

uint64_t sub_22397B42C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[314];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 314);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000007);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[315] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 315);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000007);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[316] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 316);
      return sub_22397B54C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397B54C(a1, a2);
}

uint64_t sub_22397B54C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[317];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 317);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000007);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[318] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 318);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000007);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[319] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 319);
      return sub_22397B66C(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397B66C(a1, (int *)a2);
}

uint64_t sub_22397B66C(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2;
  v15 = v5;
  v6 = a2[2] + 5;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[320];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 320);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 5;
  }
  v14 = v4 + 1;
  v15 = v5;
  v16 = v6;
  if (v7[321] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 321);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 5;
  }
  v14 = v4 + 2;
  v15 = v5;
  v16 = v6;
  if (v7[322] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 322);
      return sub_22397B778(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397B778(a1, a2);
}

uint64_t sub_22397B778(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 3;
  v15 = v5;
  v6 = a2[2] + 5;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[323];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 323);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 5;
  }
  v14 = v4 + 4;
  v15 = v5;
  v16 = v6;
  if (v7[324] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 324);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 5;
  }
  v14 = v4 + 5;
  v15 = v5;
  v16 = v6;
  if (v7[325] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 325);
      return sub_22397B888(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397B888(a1, a2);
}

uint64_t sub_22397B888(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 6;
  v15 = v5;
  v6 = a2[2] + 5;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[326];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 326);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 5;
  }
  v14 = v4 + 7;
  v15 = v5;
  v16 = v6;
  if (v7[327] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 327);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 5;
  }
  v14 = v4;
  v15 = v5 + 1;
  v16 = v6;
  if (v7[328] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 328);
      return sub_22397B998(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397B998(a1, (uint64_t)a2);
}

uint64_t sub_22397B998(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[329];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 329);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000001);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[330] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 330);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000001);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[331] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 331);
      return sub_22397BAB8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397BAB8(a1, a2);
}

uint64_t sub_22397BAB8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[332];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 332);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000001);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[333] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 333);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000001);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[334] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 334);
      return sub_22397BBD8(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397BBD8(a1, (int *)a2);
}

uint64_t sub_22397BBD8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 1;
  v6 = a2[2] + 5;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[335];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 335);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 5;
  }
  v11 = v5 + 2;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[336] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 336);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 2;
    v6 = a2[2] + 5;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[337] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 337);
      return sub_22397BCF0(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397BCF0(a1, (uint64_t)a2);
}

uint64_t sub_22397BCF0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[338];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 338);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000002);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[339] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 339);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000002);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[340] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 340);
      return sub_22397BE10(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397BE10(a1, a2);
}

uint64_t sub_22397BE10(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[341];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 341);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000002);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[342] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 342);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000002);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[343] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 343);
      return sub_22397BF30(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397BF30(a1, a2);
}

uint64_t sub_22397BF30(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[344];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 344);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000003);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[345] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 345);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000003);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[346] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 346);
      return sub_22397C04C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397C04C(a1, a2);
}

uint64_t sub_22397C04C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[347];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 347);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000003);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[348] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 348);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000003);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[349] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 349);
      return sub_22397C16C(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397C16C(a1, (int *)a2);
}

uint64_t sub_22397C16C(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 3;
  v15 = *a2 + 6;
  v16 = v5 + 3;
  v7 = a2[2] + 5;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[350];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 350);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 3;
    v7 = a2[2] + 5;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[351] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 351);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 5;
  }
  v15 = v4;
  v16 = v5 + 4;
  v17 = v7;
  if (v8[352] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 352);
      return sub_22397C284(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397C284(a1, (uint64_t)a2);
}

uint64_t sub_22397C284(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[353];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 353);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000004);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[354] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 354);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000004);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[355] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 355);
      return sub_22397C3A4(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397C3A4(a1, a2);
}

uint64_t sub_22397C3A4(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[356];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 356);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000004);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[357] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 357);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000004);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[358] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 358);
      return sub_22397C4C4(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397C4C4(a1, (int *)a2);
}

uint64_t sub_22397C4C4(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 4;
  v6 = a2[2] + 5;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[359];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 359);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 5;
  }
  v11 = v5 + 5;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[360] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 360);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 5;
    v6 = a2[2] + 5;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[361] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 361);
      return sub_22397C5DC(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397C5DC(a1, (uint64_t)a2);
}

uint64_t sub_22397C5DC(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[362];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 362);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000005);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[363] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 363);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000005);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[364] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 364);
      return sub_22397C6F8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397C6F8(a1, a2);
}

uint64_t sub_22397C6F8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[365];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 365);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000005);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[366] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 366);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000005);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[367] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 367);
      return sub_22397C814(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397C814(a1, a2);
}

uint64_t sub_22397C814(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[368];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 368);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000006);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[369] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 369);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000006);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[370] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 370);
      return sub_22397C930(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397C930(a1, a2);
}

uint64_t sub_22397C930(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[371];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 371);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000006);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[372] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 372);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000006);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[373] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 373);
      return sub_22397CA50(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397CA50(a1, (int *)a2);
}

uint64_t sub_22397CA50(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 6;
  v15 = *a2 + 6;
  v16 = v5 + 6;
  v7 = a2[2] + 5;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[374];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 374);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 6;
    v7 = a2[2] + 5;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[375] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 375);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 5;
  }
  v15 = v4;
  v16 = v5 + 7;
  v17 = v7;
  if (v8[376] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 376);
      return sub_22397CB68(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397CB68(a1, (uint64_t)a2);
}

uint64_t sub_22397CB68(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[377];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 377);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000007);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[378] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 378);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000007);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[379] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 379);
      return sub_22397CC88(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397CC88(a1, a2);
}

uint64_t sub_22397CC88(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[380];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 380);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000007);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[381] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 381);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000007);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[382] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 382);
      return sub_22397CDA8(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397CDA8(a1, (int *)a2);
}

uint64_t sub_22397CDA8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 7;
  v6 = a2[2];
  v17 = v6 + 5;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[383];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 383);
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
  }
  v15 = v4;
  v16 = v5;
  v11 = v6 + 6;
  v17 = v11;
  if (v7[384] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 384);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[2] + 6;
  }
  v15 = v4 + 1;
  v16 = v5;
  v17 = v11;
  if (v7[385] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 385);
      return sub_22397CEB8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397CEB8(a1, a2);
}

uint64_t sub_22397CEB8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 2;
  v15 = v5;
  v6 = a2[2] + 6;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[386];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 386);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 6;
  }
  v14 = v4 + 3;
  v15 = v5;
  v16 = v6;
  if (v7[387] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 387);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 6;
  }
  v14 = v4 + 4;
  v15 = v5;
  v16 = v6;
  if (v7[388] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 388);
      return sub_22397CFC8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397CFC8(a1, a2);
}

uint64_t sub_22397CFC8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 5;
  v15 = v5;
  v6 = a2[2] + 6;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[389];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 389);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 6;
  }
  v14 = v4 + 6;
  v15 = v5;
  v16 = v6;
  if (v7[390] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 390);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 6;
  }
  v14 = v4 + 7;
  v15 = v5;
  v16 = v6;
  if (v7[391] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 391);
      return sub_22397D0D8(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397D0D8(a1, (uint64_t)a2);
}

uint64_t sub_22397D0D8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[392];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 392);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000001);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[393] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 393);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000001);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[394] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 394);
      return sub_22397D1F4(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397D1F4(a1, a2);
}

uint64_t sub_22397D1F4(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[395];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 395);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000001);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[396] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 396);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000001);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[397] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 397);
      return sub_22397D314(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397D314(a1, (int *)a2);
}

uint64_t sub_22397D314(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 1;
  v15 = *a2 + 6;
  v16 = v5 + 1;
  v7 = a2[2] + 6;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[398];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 398);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 1;
    v7 = a2[2] + 6;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[399] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 399);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 6;
  }
  v15 = v4;
  v16 = v5 + 2;
  v17 = v7;
  if (v8[400] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 400);
      return sub_22397D42C(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397D42C(a1, (uint64_t)a2);
}

uint64_t sub_22397D42C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[401];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 401);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000002);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[402] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 402);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000002);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[403] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 403);
      return sub_22397D54C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397D54C(a1, a2);
}

uint64_t sub_22397D54C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[404];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 404);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000002);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[405] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 405);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000002);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[406] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 406);
      return sub_22397D66C(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397D66C(a1, (int *)a2);
}

uint64_t sub_22397D66C(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 2;
  v6 = a2[2] + 6;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[407];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 407);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 6;
  }
  v11 = v5 + 3;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[408] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 408);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 3;
    v6 = a2[2] + 6;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[409] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 409);
      return sub_22397D784(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397D784(a1, (uint64_t)a2);
}

uint64_t sub_22397D784(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[410];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 410);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000003);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[411] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 411);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000003);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[412] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 412);
      return sub_22397D8A4(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397D8A4(a1, a2);
}

uint64_t sub_22397D8A4(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[413];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 413);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000003);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[414] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 414);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000003);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[415] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 415);
      return sub_22397D9C4(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397D9C4(a1, a2);
}

uint64_t sub_22397D9C4(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[416];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 416);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000004);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[417] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 417);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000004);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[418] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 418);
      return sub_22397DAE0(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397DAE0(a1, a2);
}

uint64_t sub_22397DAE0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[419];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 419);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000004);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[420] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 420);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000004);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[421] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 421);
      return sub_22397DC00(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397DC00(a1, (int *)a2);
}

uint64_t sub_22397DC00(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 4;
  v15 = *a2 + 6;
  v16 = v5 + 4;
  v7 = a2[2] + 6;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[422];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 422);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 4;
    v7 = a2[2] + 6;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[423] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 423);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 6;
  }
  v15 = v4;
  v16 = v5 + 5;
  v17 = v7;
  if (v8[424] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 424);
      return sub_22397DD18(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397DD18(a1, (uint64_t)a2);
}

uint64_t sub_22397DD18(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[425];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 425);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000005);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[426] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 426);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000005);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[427] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 427);
      return sub_22397DE38(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397DE38(a1, a2);
}

uint64_t sub_22397DE38(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[428];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 428);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000005);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[429] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 429);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000005);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[430] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 430);
      return sub_22397DF58(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397DF58(a1, (int *)a2);
}

uint64_t sub_22397DF58(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 5;
  v6 = a2[2] + 6;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[431];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 431);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 6;
  }
  v11 = v5 + 6;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[432] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 432);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 6;
    v6 = a2[2] + 6;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[433] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 433);
      return sub_22397E070(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397E070(a1, (uint64_t)a2);
}

uint64_t sub_22397E070(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[434];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 434);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000006);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[435] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 435);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000006);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[436] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 436);
      return sub_22397E18C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397E18C(a1, a2);
}

uint64_t sub_22397E18C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[437];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 437);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000006);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[438] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 438);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000006);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[439] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 439);
      return sub_22397E2A8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397E2A8(a1, a2);
}

uint64_t sub_22397E2A8(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[440];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 440);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000007);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[441] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 441);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000007);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[442] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 442);
      return sub_22397E3C4(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397E3C4(a1, a2);
}

uint64_t sub_22397E3C4(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[443];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 443);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000007);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[444] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 444);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000007);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[445] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 445);
      return sub_22397E4E4(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397E4E4(a1, (int *)a2);
}

uint64_t sub_22397E4E4(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 7;
  v16 = *a2 + 6;
  v17 = v5 + 7;
  v7 = a2[2];
  v8 = v7 + 6;
  v18 = v7 + 6;
  v10 = *a1;
  v9 = (_DWORD *)a1[1];
  v11 = v9[446];
  if (v11 != *(_DWORD *)(*a1 + 272))
  {
    v12 = *(_QWORD *)(v10 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v16, v9 + 446);
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v10 = *a1;
    v9 = (_DWORD *)a1[1];
    v11 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 7;
    v8 = v7 + 6;
  }
  v16 = v4 + 7;
  v17 = v6;
  v18 = v8;
  if (v9[447] != v11)
  {
    v13 = *(_QWORD *)(v10 + 2424);
    if (!v13)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v16, v9 + 447);
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v10 = *a1;
    v9 = (_DWORD *)a1[1];
    v11 = *(_DWORD *)(*a1 + 272);
  }
  v16 = v4;
  v17 = v5;
  v18 = v7 + 7;
  if (v9[448] != v11)
  {
    v14 = *(_QWORD *)(v10 + 2424);
    if (v14)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v14 + 48))(v14, &v16, v9 + 448);
      return sub_22397E5F8(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397E5F8(a1, a2);
}

uint64_t sub_22397E5F8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 1;
  v15 = v5;
  v6 = a2[2] + 7;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[449];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 449);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 7;
  }
  v14 = v4 + 2;
  v15 = v5;
  v16 = v6;
  if (v7[450] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 450);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 7;
  }
  v14 = v4 + 3;
  v15 = v5;
  v16 = v6;
  if (v7[451] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 451);
      return sub_22397E708(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397E708(a1, a2);
}

uint64_t sub_22397E708(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v4 = *a2;
  v5 = a2[1];
  v14 = *a2 + 4;
  v15 = v5;
  v6 = a2[2] + 7;
  v16 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[452];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v14, v7 + 452);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 7;
  }
  v14 = v4 + 5;
  v15 = v5;
  v16 = v6;
  if (v7[453] != v9)
  {
    v11 = *(_QWORD *)(v8 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v14, v7 + 453);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 7;
  }
  v14 = v4 + 6;
  v15 = v5;
  v16 = v6;
  if (v7[454] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (v12)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v7 + 454);
      return sub_22397E818(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397E818(a1, a2);
}

uint64_t sub_22397E818(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5;
  v6 = a2[2] + 7;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[455];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 455);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 7;
  }
  v11 = v5 + 1;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[456] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 456);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 1;
    v6 = a2[2] + 7;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[457] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 457);
      return sub_22397E92C(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397E92C(a1, (uint64_t)a2);
}

uint64_t sub_22397E92C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[458];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 458);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000001);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[459] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 459);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000001);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[460] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 460);
      return sub_22397EA4C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397EA4C(a1, a2);
}

uint64_t sub_22397EA4C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000001);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[461];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 461);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000001);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[462] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 462);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000001);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[463] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 463);
      return sub_22397EB6C(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397EB6C(a1, a2);
}

uint64_t sub_22397EB6C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[464];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 464);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000002);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[465] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 465);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000002);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[466] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 466);
      return sub_22397EC88(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397EC88(a1, a2);
}

uint64_t sub_22397EC88(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000002);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[467];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 467);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000002);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[468] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 468);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000002);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[469] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 469);
      return sub_22397EDA8(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397EDA8(a1, (int *)a2);
}

uint64_t sub_22397EDA8(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 2;
  v15 = *a2 + 6;
  v16 = v5 + 2;
  v7 = a2[2] + 7;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[470];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 470);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 2;
    v7 = a2[2] + 7;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[471] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 471);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 7;
  }
  v15 = v4;
  v16 = v5 + 3;
  v17 = v7;
  if (v8[472] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 472);
      return sub_22397EEC0(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397EEC0(a1, (uint64_t)a2);
}

uint64_t sub_22397EEC0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[473];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 473);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000003);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[474] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 474);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000003);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[475] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 475);
      return sub_22397EFE0(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397EFE0(a1, a2);
}

uint64_t sub_22397EFE0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000003);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[476];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 476);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000003);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[477] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 477);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000003);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[478] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 478);
      return sub_22397F100(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397F100(a1, (int *)a2);
}

uint64_t sub_22397F100(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 3;
  v6 = a2[2] + 7;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[479];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 479);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 7;
  }
  v11 = v5 + 4;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[480] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 480);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 4;
    v6 = a2[2] + 7;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[481] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 481);
      return sub_22397F218(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397F218(a1, (uint64_t)a2);
}

uint64_t sub_22397F218(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[482];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 482);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000004);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[483] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 483);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000004);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[484] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 484);
      return sub_22397F338(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397F338(a1, a2);
}

uint64_t sub_22397F338(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000004);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[485];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 485);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000004);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[486] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 486);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000004);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[487] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 487);
      return sub_22397F458(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397F458(a1, a2);
}

uint64_t sub_22397F458(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[488];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 488);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000005);
  }
  v13 = v4 + 1;
  v14 = v5;
  if (v6[489] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 489);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000005);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[490] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 490);
      return sub_22397F574(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397F574(a1, a2);
}

uint64_t sub_22397F574(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 3;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000005);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[491];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 491);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000005);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[492] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 492);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000005);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[493] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 493);
      return sub_22397F694(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397F694(a1, (int *)a2);
}

uint64_t sub_22397F694(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 + 5;
  v15 = *a2 + 6;
  v16 = v5 + 5;
  v7 = a2[2] + 7;
  v17 = v7;
  v9 = *a1;
  v8 = (_DWORD *)a1[1];
  v10 = v8[494];
  if (v10 != *(_DWORD *)(*a1 + 272))
  {
    v11 = *(_QWORD *)(v9 + 2424);
    if (!v11)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v8 + 494);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v6 = v5 + 5;
    v7 = a2[2] + 7;
  }
  v15 = v4 + 7;
  v16 = v6;
  v17 = v7;
  if (v8[495] != v10)
  {
    v12 = *(_QWORD *)(v9 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v8 + 495);
    v4 = *a2;
    v5 = a2[1];
    v9 = *a1;
    v8 = (_DWORD *)a1[1];
    v10 = *(_DWORD *)(*a1 + 272);
    v7 = a2[2] + 7;
  }
  v15 = v4;
  v16 = v5 + 6;
  v17 = v7;
  if (v8[496] != v10)
  {
    v13 = *(_QWORD *)(v9 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v8 + 496);
      return sub_22397F7AC(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397F7AC(a1, (uint64_t)a2);
}

uint64_t sub_22397F7AC(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 1;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[497];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 497);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000006);
  }
  v13 = v4 + 2;
  v14 = v5;
  if (v6[498] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 498);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000006);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[499] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 499);
      return sub_22397F8CC(a1, a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397F8CC(a1, a2);
}

uint64_t sub_22397F8CC(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 4;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000006);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[500];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 500);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000006);
  }
  v13 = v4 + 5;
  v14 = v5;
  if (v6[501] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 501);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000006);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[502] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 502);
      return sub_22397F9EC(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397F9EC(a1, (int *)a2);
}

uint64_t sub_22397F9EC(_QWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  int v17;

  v4 = *a2;
  v5 = a2[1];
  v15 = *a2 + 7;
  v16 = v5 + 6;
  v6 = a2[2] + 7;
  v17 = v6;
  v8 = *a1;
  v7 = (_DWORD *)a1[1];
  v9 = v7[503];
  if (v9 != *(_DWORD *)(*a1 + 272))
  {
    v10 = *(_QWORD *)(v8 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v15, v7 + 503);
    v4 = *a2;
    v5 = a2[1];
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v6 = a2[2] + 7;
  }
  v11 = v5 + 7;
  v15 = v4;
  v16 = v11;
  v17 = v6;
  if (v7[504] != v9)
  {
    v12 = *(_QWORD *)(v8 + 2424);
    if (!v12)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v12 + 48))(v12, &v15, v7 + 504);
    v4 = *a2;
    v8 = *a1;
    v7 = (_DWORD *)a1[1];
    v9 = *(_DWORD *)(*a1 + 272);
    v11 = a2[1] + 7;
    v6 = a2[2] + 7;
  }
  v15 = v4 + 1;
  v16 = v11;
  v17 = v6;
  if (v7[505] != v9)
  {
    v13 = *(_QWORD *)(v8 + 2424);
    if (v13)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v13 + 48))(v13, &v15, v7 + 505);
      return sub_22397FB04(a1, (uint64_t)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397FB04(a1, (uint64_t)a2);
}

uint64_t sub_22397FB04(_QWORD *a1, uint64_t a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a2 + 2;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[506];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 506);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000007);
  }
  v13 = v4 + 3;
  v14 = v5;
  if (v6[507] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 507);
    v4 = *(_DWORD *)a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000007);
  }
  v13 = v4 + 4;
  v14 = v5;
  if (v6[508] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 508);
      return sub_22397FC20(a1, (int *)a2);
    }
LABEL_11:
    sub_223198474();
  }
  return sub_22397FC20(a1, (int *)a2);
}

uint64_t sub_22397FC20(_QWORD *a1, int *a2)
{
  int v4;
  int32x2_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int32x2_t v14;

  v4 = *a2;
  v13 = *a2 + 5;
  v5 = vadd_s32(*(int32x2_t *)(a2 + 1), (int32x2_t)0x700000007);
  v14 = v5;
  v7 = *a1;
  v6 = (_DWORD *)a1[1];
  v8 = v6[509];
  if (v8 != *(_DWORD *)(*a1 + 272))
  {
    v9 = *(_QWORD *)(v7 + 2424);
    if (!v9)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v9 + 48))(v9, &v13, v6 + 509);
    v4 = *a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 1), (int32x2_t)0x700000007);
  }
  v13 = v4 + 6;
  v14 = v5;
  if (v6[510] != v8)
  {
    v10 = *(_QWORD *)(v7 + 2424);
    if (!v10)
      goto LABEL_11;
    (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v10 + 48))(v10, &v13, v6 + 510);
    v4 = *a2;
    v7 = *a1;
    v6 = (_DWORD *)a1[1];
    v8 = *(_DWORD *)(*a1 + 272);
    v5 = vadd_s32(*(int32x2_t *)(a2 + 1), (int32x2_t)0x700000007);
  }
  v13 = v4 + 7;
  v14 = v5;
  if (v6[511] != v8)
  {
    v11 = *(_QWORD *)(v7 + 2424);
    if (v11)
    {
      (*(void (**)(uint64_t, int *, _DWORD *))(*(_QWORD *)v11 + 48))(v11, &v13, v6 + 511);
      return 1;
    }
LABEL_11:
    sub_223198474();
  }
  return 1;
}

char *sub_22397FD34(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    while (1)
    {
      while (1)
      {
        v10 = v5;
        v11 = *((_DWORD *)v5 + 7);
        if (v7 == v11)
          break;
        if (v7 < v11)
          goto LABEL_3;
        if (v11 >= v7)
          return (char *)v10;
LABEL_14:
        v5 = (uint64_t *)v10[1];
        if (!v5)
        {
          v6 = (uint64_t **)(v10 + 1);
          goto LABEL_17;
        }
      }
      v12 = *((_DWORD *)v10 + 8);
      if (v8 != v12)
      {
        if (v8 < v12)
          goto LABEL_3;
        if (v12 >= v8)
          return (char *)v10;
        goto LABEL_14;
      }
      v13 = *((_DWORD *)v10 + 9);
      if (v9 >= v13)
      {
        if (v13 >= v9)
          return (char *)v10;
        goto LABEL_14;
      }
LABEL_3:
      v5 = (uint64_t *)*v10;
      v6 = (uint64_t **)v10;
      if (!*v10)
        goto LABEL_17;
    }
  }
  v10 = (uint64_t *)(a1 + 1);
LABEL_17:
  v14 = v10;
  v15 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v15 + 28) = *(_QWORD *)a3;
  *((_DWORD *)v15 + 9) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v14;
  *v6 = (uint64_t *)v15;
  v16 = (uint64_t *)**a1;
  v17 = (uint64_t *)v15;
  if (v16)
  {
    *a1 = v16;
    v17 = *v6;
  }
  sub_2231A9A8C(a1[1], v17);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v15;
}

_QWORD *sub_22397FE68(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC5D238;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22397FEA8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC5D238;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22397FEF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

unint64_t sub_22397FF08@<X0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  int32x4_t v16;
  unint64_t v17;
  unint64_t v18;
  float32x4_t v19;
  uint64_t v20;
  unint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  unint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  unint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int v37;
  int32x2_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t result;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char **v47;
  uint64_t v48;
  float32x2_t *v49;
  float32x2_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  __int32 v80;
  _BYTE v81[24];
  _BYTE *v82;

  sub_2241498F4(a4, 0);
  v12.i32[0] = a1[1].i32[0];
  *(float32x2_t *)v13.f32 = *a1;
  v14 = v13;
  v14.i32[2] = v12.i32[0];
  v15.i32[0] = a2[1].i32[0];
  *(float32x2_t *)v16.i8 = *a2;
  v16.i32[2] = v15.i32[0];
  v12.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*a1, *a2), (float32x2_t)vdup_lane_s32((int32x2_t)*a2, 1), *a1, 1), v15, v12).f32[0]- a5;
  v18 = *(_QWORD *)a4;
  v17 = *(_QWORD *)(a4 + 8);
  v75 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL), a6 * 0.5);
  v76 = vmlsq_lane_f32(v14, (float32x4_t)v16, v12, 0);
  v77 = vaddq_f32(v75, v76);
  v79 = vmulq_n_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v16, (int8x16_t)v16, 0xCuLL), (int8x16_t)v16, 8uLL), a6 * 0.5);
  v19 = vaddq_f32(v79, v77);
  *(_DWORD *)&v81[8] = v19.i32[2];
  *(_QWORD *)v81 = v19.i64[0];
  if (v17 >= *(_QWORD *)(a4 + 16))
  {
    v21 = sub_2233B2838((unint64_t *)a4, (uint64_t *)v81);
  }
  else
  {
    v20 = *(_QWORD *)v81;
    *(_DWORD *)(v17 + 8) = *(_DWORD *)&v81[8];
    *(_QWORD *)v17 = v20;
    v21 = v17 + 12;
  }
  *(_QWORD *)(a4 + 8) = v21;
  v22 = vsubq_f32(v77, v79);
  *(_DWORD *)&v81[8] = v22.i32[2];
  *(_QWORD *)v81 = v22.i64[0];
  if (v21 >= *(_QWORD *)(a4 + 16))
  {
    v24 = sub_2233B2838((unint64_t *)a4, (uint64_t *)v81);
  }
  else
  {
    v23 = *(_QWORD *)v81;
    *(_DWORD *)(v21 + 8) = *(_DWORD *)&v81[8];
    *(_QWORD *)v21 = v23;
    v24 = v21 + 12;
  }
  *(_QWORD *)(a4 + 8) = v24;
  v78 = vsubq_f32(v76, v75);
  v25 = vsubq_f32(v78, v79);
  *(_DWORD *)&v81[8] = v25.i32[2];
  *(_QWORD *)v81 = v25.i64[0];
  if (v24 >= *(_QWORD *)(a4 + 16))
  {
    v27 = sub_2233B2838((unint64_t *)a4, (uint64_t *)v81);
  }
  else
  {
    v26 = *(_QWORD *)v81;
    *(_DWORD *)(v24 + 8) = *(_DWORD *)&v81[8];
    *(_QWORD *)v24 = v26;
    v27 = v24 + 12;
  }
  *(_QWORD *)(a4 + 8) = v27;
  v28 = vaddq_f32(v79, v78);
  *(_DWORD *)&v81[8] = v28.i32[2];
  *(_QWORD *)v81 = v28.i64[0];
  if (v27 >= *(_QWORD *)(a4 + 16))
  {
    v30 = sub_2233B2838((unint64_t *)a4, (uint64_t *)v81);
  }
  else
  {
    v29 = *(_QWORD *)v81;
    *(_DWORD *)(v27 + 8) = *(_DWORD *)&v81[8];
    *(_QWORD *)v27 = v29;
    v30 = v27 + 12;
  }
  *(_QWORD *)(a4 + 8) = v30;
  *(_DWORD *)(a4 + 272) = 2;
  v81[0] = 1;
  v31 = *(_BYTE **)(a4 + 248);
  if ((unint64_t)v31 >= *(_QWORD *)(a4 + 256))
  {
    v32 = (_BYTE *)sub_223984B3C(a4 + 240, v81);
  }
  else
  {
    *v31 = 1;
    v32 = v31 + 1;
  }
  *(_QWORD *)(a4 + 248) = v32;
  v81[0] = 1;
  if ((unint64_t)v32 >= *(_QWORD *)(a4 + 256))
  {
    v33 = sub_223984B3C(a4 + 240, v81);
  }
  else
  {
    *v32 = 1;
    v33 = (uint64_t)(v32 + 1);
  }
  *(_QWORD *)(a4 + 248) = v33;
  *(_DWORD *)(a4 + 312) = 2;
  v81[0] = a3;
  v34 = *(_BYTE **)(a4 + 288);
  if ((unint64_t)v34 >= *(_QWORD *)(a4 + 296))
  {
    v35 = (_BYTE *)sub_223984B3C(a4 + 280, v81);
  }
  else
  {
    *v34 = a3;
    v35 = v34 + 1;
  }
  *(_QWORD *)(a4 + 288) = v35;
  v81[0] = a3;
  if ((unint64_t)v35 >= *(_QWORD *)(a4 + 296))
  {
    v36 = sub_223984B3C(a4 + 280, v81);
  }
  else
  {
    *v35 = a3;
    v36 = (uint64_t)(v35 + 1);
  }
  v37 = -1431655765 * ((v17 - v18) >> 2);
  *(_QWORD *)(a4 + 288) = v36;
  v38 = vadd_s32(vdup_n_s32(v37), (int32x2_t)0x100000002);
  *(_DWORD *)v81 = v37;
  v80 = v38.i32[0];
  *(int32x2_t *)&v81[4] = v38;
  v39 = *(_QWORD *)(a4 + 120);
  if (v39 >= *(_QWORD *)(a4 + 128))
  {
    v41 = sub_2233B29C0((unint64_t *)(a4 + 112), (uint64_t *)v81);
  }
  else
  {
    v40 = *(_QWORD *)v81;
    *(_DWORD *)(v39 + 8) = *(_DWORD *)&v81[8];
    *(_QWORD *)v39 = v40;
    v41 = v39 + 12;
  }
  *(_QWORD *)(a4 + 120) = v41;
  *(_DWORD *)v81 = -1431655765 * ((v17 - v18) >> 2);
  *(_DWORD *)&v81[4] = v37 + 3;
  *(_DWORD *)&v81[8] = v80;
  if (v41 >= *(_QWORD *)(a4 + 128))
  {
    result = sub_2233B29C0((unint64_t *)(a4 + 112), (uint64_t *)v81);
  }
  else
  {
    v42 = *(_QWORD *)v81;
    *(_DWORD *)(v41 + 8) = *(_DWORD *)&v81[8];
    *(_QWORD *)v41 = v42;
    result = v41 + 12;
  }
  *(_QWORD *)(a4 + 120) = result;
  *(_DWORD *)(a4 + 352) = 1;
  *(_DWORD *)(a4 + 104) = 1;
  v44 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v44)
  {
    v45 = 0;
    v46 = 0xAAAAAAAAAAAAAAABLL * (v44 >> 2);
    v47 = (char **)(a4 + 320);
    while (1)
    {
      v49 = *(float32x2_t **)(a4 + 80);
      if ((unint64_t)v49 >= *(_QWORD *)(a4 + 88))
      {
        result = sub_2233B2B48((unint64_t *)(a4 + 72), (uint64_t *)a2);
      }
      else
      {
        v50 = *a2;
        v49[1].i32[0] = a2[1].i32[0];
        *v49 = v50;
        result = (unint64_t)&v49[1] + 4;
      }
      *(_QWORD *)(a4 + 80) = result;
      v52 = *(char **)(a4 + 328);
      v51 = *(_QWORD *)(a4 + 336);
      if ((unint64_t)v52 >= v51)
        break;
      *(_DWORD *)v52 = 0;
      v48 = (uint64_t)(v52 + 4);
LABEL_34:
      *(_QWORD *)(a4 + 328) = v48;
      if (++v45 == v46)
        return result;
    }
    v53 = *v47;
    v54 = v52 - *v47;
    v55 = v54 >> 2;
    v56 = (v54 >> 2) + 1;
    if (v56 >> 62)
      sub_22316E078();
    v57 = v51 - (_QWORD)v53;
    if (v57 >> 1 > v56)
      v56 = v57 >> 1;
    v58 = (unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL;
    v59 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v58)
      v59 = v56;
    if (v59)
    {
      LODWORD(v82) = v59;
      v60 = *(unsigned int *)(a4 + 348);
      if ((_DWORD)v60 == -1)
        sub_22316DD70();
      *(_QWORD *)v81 = &v82;
      result = ((uint64_t (*)(_BYTE *, uint64_t))off_24EC5D2C0[v60])(v81, a4 + 344);
      v53 = *(char **)(a4 + 320);
      v52 = *(char **)(a4 + 328);
      v62 = (_DWORD *)(result + 4 * v55);
      *v62 = 0;
      v48 = (uint64_t)(v62 + 1);
      v63 = (char *)(v52 - v53);
      if (v52 == v53)
        goto LABEL_57;
    }
    else
    {
      result = 0;
      v61 = 0;
      v62 = (_DWORD *)(4 * v55);
      *(_DWORD *)(4 * v55) = 0;
      v48 = 4 * v55 + 4;
      v63 = (char *)(v52 - v53);
      if (v52 == v53)
        goto LABEL_57;
    }
    v64 = (unint64_t)(v63 - 4);
    if (v64 >= 0x2C)
    {
      if ((unint64_t)&v52[-result - v54] >= 0x20)
      {
        v66 = (v64 >> 2) + 1;
        v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
        v65 = &v52[-v67];
        v62 = (_DWORD *)((char *)v62 - v67);
        v68 = (_OWORD *)(result + 4 * v55 - 16);
        v69 = v52 - 16;
        v70 = v66 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 8;
        }
        while (v70);
        if (v66 == (v66 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_57:
          *(_QWORD *)(a4 + 320) = v62;
          *(_QWORD *)(a4 + 328) = v48;
          v73 = *(_QWORD *)(a4 + 336);
          *(_QWORD *)(a4 + 336) = result + 4 * v61;
          if (v53)
          {
            *(_QWORD *)v81 = v53;
            *(_DWORD *)&v81[8] = (unint64_t)(v73 - (_QWORD)v53) >> 2;
            v74 = *(unsigned int *)(a4 + 348);
            if ((_DWORD)v74 == -1)
              sub_22316DD70();
            v82 = v81;
            result = ((uint64_t (*)(_BYTE **, uint64_t))off_24EC5D2D0[v74])(&v82, a4 + 344);
          }
          goto LABEL_34;
        }
      }
      else
      {
        v65 = v52;
      }
    }
    else
    {
      v65 = v52;
    }
    do
    {
      v72 = *((_DWORD *)v65 - 1);
      v65 -= 4;
      *--v62 = v72;
    }
    while (v65 != v53);
    goto LABEL_57;
  }
  return result;
}

void sub_223980498(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2239804AC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2239804C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2239804D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2239804E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2239804FC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223980510(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223980524(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223980538(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22398054C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223980564(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22398057C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223980590(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2239805A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, float32x2_t *a3@<X2>, float32x2_t *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  float v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  float32x4_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int8x8_t v38;
  int v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  float v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  float *v59;
  size_t v60;
  void *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  BOOL v70;
  BOOL v71;
  float v72;
  int v73;
  int v74;
  int v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  int v84;
  int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  int8x16_t v94;
  float32x4_t v95;
  float v96;
  float v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  size_t v103;
  void **v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  size_t v109;
  void **p_dst;
  char *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  void **v115;
  uint64_t v116;
  size_t v117;
  const char *v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  const char *v121;
  size_t v122;
  const char *v123;
  const char *v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  size_t v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  size_t v136;
  size_t v137;
  _BYTE *v138;
  void *v139;
  char *v140;
  void **v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  _QWORD *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *p_shared_owners;
  unint64_t v150;
  char *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  const char *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  void **v194;
  uint64_t v195;
  const char *v196;
  unint64_t v197;
  unsigned __int8 v198;
  const char *v199;
  size_t v200;
  const char *v201;
  const char *v202;
  _BYTE *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  size_t v207;
  BOOL v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  NSObject *v212;
  size_t v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  size_t v216;
  size_t v217;
  _BYTE *v218;
  const char *v219;
  void *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  _QWORD *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  char *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  const char *v246;
  void *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  const char *v267;
  unint64_t *v268;
  void *v269;
  _DWORD *v270;
  int v271;
  uint64_t v272;
  int v273;
  int v274;
  unsigned int v275;
  _DWORD *v276;
  uint64_t v277;
  float32x4_t v278;
  float32x4_t v279;
  unint64_t v280;
  char *v281;
  _DWORD *v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  char *v286;
  char *v287;
  uint64_t v288;
  int v289;
  void *v290;
  char *v291;
  int64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  _BYTE *v297;
  _DWORD *v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  float32x4_t *v304;
  float32x4_t *v305;
  uint64_t v306;
  float32x4_t v307;
  int v308;
  uint64_t v309;
  unint64_t v310;
  _DWORD *v311;
  char *v312;
  uint64_t v313;
  _DWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  int v319;
  char *v320;
  char *v321;
  char *v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  char *v326;
  char *v327;
  __int128 v328;
  _QWORD *v329;
  float32x4_t v330;
  int v331;
  uint64_t i;
  float v333;
  uint64_t v334;
  float32x4_t v335;
  float32x4_t v336;
  __n128 v337;
  unsigned int v338;
  int8x16_t v339;
  unsigned int *v340;
  uint64_t v341;
  float v342;
  float v343;
  unsigned int v344;
  uint64_t v345;
  float32x2_t v346;
  float v347;
  int v348;
  float v349;
  _DWORD *v350;
  uint64_t v351;
  int v352;
  int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  int v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _DWORD *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  _DWORD *v381;
  _DWORD *v382;
  int v383;
  unint64_t v384;
  _BYTE *v385;
  unint64_t v386;
  _BYTE *v387;
  unint64_t v388;
  _BYTE *v389;
  unint64_t v390;
  char *v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  _DWORD *v398;
  _DWORD *v399;
  _DWORD *v400;
  _DWORD *v401;
  uint64_t v402;
  int v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  _DWORD *v411;
  _DWORD *v412;
  _DWORD *v413;
  _DWORD *v414;
  uint64_t v415;
  int v416;
  _DWORD *v417;
  unint64_t v418;
  _BYTE *v419;
  _BYTE *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  _BYTE *v426;
  char *v427;
  char *v428;
  unint64_t v429;
  char *v430;
  _OWORD *v431;
  __int128 *v432;
  unint64_t v433;
  __int128 v434;
  char v435;
  int v436;
  _BYTE *v437;
  _BYTE *v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _BYTE *v444;
  uint64_t v445;
  char *v446;
  char *v447;
  unint64_t v448;
  char *v449;
  _OWORD *v450;
  __int128 *v451;
  unint64_t v452;
  __int128 v453;
  char v454;
  int v455;
  _BYTE *v456;
  _BYTE *v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  _BYTE *v463;
  char *v464;
  char *v465;
  unint64_t v466;
  char *v467;
  _OWORD *v468;
  __int128 *v469;
  unint64_t v470;
  __int128 v471;
  char v472;
  int v473;
  _BYTE *v474;
  _BYTE *v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  _BYTE *v481;
  uint64_t v482;
  char *v483;
  char *v484;
  unint64_t v485;
  char *v486;
  _OWORD *v487;
  __int128 *v488;
  unint64_t v489;
  __int128 v490;
  char v491;
  int v492;
  float32x2_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  int v502;
  int v503;
  int v504;
  unint64_t v505;
  const char *v506;
  float32x4_t v507;
  float32x2_t *v508;
  int v509;
  int __s;
  char *__sa;
  unsigned int __sb;
  int __sc;
  int v514;
  const char *v515;
  unsigned int v516;
  char *v517[2];
  char *v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int8x16_t v525;
  unint64_t v526;
  void *v527;
  unint64_t rep;
  unint64_t v529;
  int v530;
  const char *v531;
  int v532;
  const char *v533;
  uint64_t v534;
  std::__shared_weak_count *v535;
  void **__dst;
  size_t v537;
  int64_t v538;
  uint64_t v539;
  uint64_t v540;
  void *v541;
  char *v542;
  char *v543;
  void *v544;
  char *v545;
  char *v546;
  void *v547;
  char *v548;
  void *__p;
  char v550;
  char *v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  _DWORD *v555;
  _DWORD *v556;
  unint64_t v557;
  _BYTE v558[4];
  int v559;
  _DWORD *v560;
  _DWORD *v561;
  unint64_t v562;
  _BYTE v563[4];
  int v564;
  _BYTE *v565;
  unint64_t v566;
  unint64_t v567;
  _BYTE v568[4];
  int v569;
  int v570;
  _BYTE *v571;
  unint64_t v572;
  unint64_t v573;
  _BYTE v574[4];
  int v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  int v579;
  void *v580[2];
  std::__shared_weak_count *v581;
  char *v582;
  std::__shared_weak_count *v583;
  _BYTE v584[24];
  _BYTE v585[24];
  __int128 v586;
  char *v587;
  size_t v588;
  unint64_t v589;
  char v590;
  _QWORD v591[5];

  v591[2] = *MEMORY[0x24BDAC8D0];
  sub_2241498F4((uint64_t)&v555, 0);
  *(float32x2_t *)v15.f32 = *a4;
  v508 = a4;
  v15.i32[2] = a4[1].i32[0];
  v16 = vabsq_f32(v15);
  v17 = v16.f32[1];
  v18 = v16.f32[1] > v16.f32[0];
  if (v16.f32[1] <= v16.f32[0])
    v17 = v16.f32[0];
  if (v17 < v16.f32[2])
    v18 = 2;
  if (v18)
  {
    if (v18 == 1)
    {
      v522 = 0;
      v19 = 0;
      v20 = 0;
      if (v15.f32[1] >= 0.0)
        v21 = 0;
      else
        v21 = -1;
      if (v15.f32[1] >= 0.0)
        v22 = 1;
      else
        v22 = -1;
      v523 = v15.f32[1] >= 0.0;
      v502 = v523;
      v503 = v21;
      v504 = 0;
      v521 = v21;
    }
    else
    {
      v523 = 0;
      v19 = 0;
      v22 = 0;
      v23 = a4->f32[v18];
      if (v23 >= 0.0)
        v24 = 0;
      else
        v24 = -1;
      if (v23 >= 0.0)
        v20 = 1;
      else
        v20 = -1;
      v522 = v24;
      v502 = v24;
      v503 = 0;
      v504 = v23 >= 0.0;
      v521 = v504;
    }
  }
  else if (v15.f32[0] >= 0.0)
  {
    v523 = 0;
    v504 = 0;
    v20 = 0;
    v22 = 0;
    v521 = 0;
    v522 = 1;
    v502 = 0;
    v503 = 1;
    v19 = 1;
  }
  else
  {
    v522 = 0;
    v502 = 0;
    v503 = 0;
    v20 = 0;
    v22 = 0;
    v521 = 0;
    v523 = -1;
    v504 = -1;
    v19 = -1;
  }
  v25 = (float)((float)((float)(a8 * 0.125) / *(float *)(a1 + 144)) + 0.5);
  v26 = (a3->i32[0] & 0x7FFFFFFFu) < 0x7F800000;
  if ((a3->i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v26 = (a3->i32[1] & 0x7FFFFFFFu) < 0x7F800000;
    if ((a3->i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v26 = (a3[1].i32[0] & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (v25 <= 3)
    v27 = 3;
  else
    v27 = v25;
  if (!v26
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v495 = a6;
  v28 = *(_QWORD *)(a1 + 148);
  *(float32x2_t *)v15.f32 = *a3;
  v15.i32[2] = a3[1].i32[0];
  v525 = (int8x16_t)v15;
  v29 = (v27 * v27);
  if ((_DWORD)v29)
  {
    v30 = (char *)operator new(4 * v29);
    memset_pattern16(v30, &unk_2246566B0, 4 * v29);
    v31 = &v30[4 * v29];
  }
  else
  {
    v31 = 0;
    v30 = 0;
  }
  v32 = vmulq_n_f32((float32x4_t)v525, *(float *)&v28);
  v33 = v27 >> 1;
  v34 = (vcvtms_s32_f32(v32.f32[0]) & 0xFFFFFFF8) - 8 * (v27 >> 1) * (v521 + v502);
  v35 = (vcvtms_s32_f32(v32.f32[1]) & 0xFFFFFFF8) - 8 * (v27 >> 1) * (v504 + v522);
  v36 = (vcvtms_s32_f32(v32.f32[2]) & 0xFFFFFFF8) - 8 * (v27 >> 1) * (v503 + v523);
  v37 = v35 * v22 + v34 * v19 + v36 * v20;
  v501 = v34 - v37 * v19;
  v500 = v35 - v37 * v22;
  v499 = v36 - v37 * v20;
  v38 = (int8x8_t)a2[1];
  if (v38)
  {
    v39 = 0;
    v40 = (uint8x8_t)vcnt_s8(v38);
    v40.i16[0] = vaddlv_u8(v40);
    v41 = v40.u32[0];
    v42 = *(_QWORD *)&v38 - 1;
    v43 = *a2;
    do
    {
      v44 = 0;
      do
      {
        v46 = v501 + 8 * v39 * v502 + 8 * v44 * v521;
        v47 = v500 + 8 * v39 * v504 + 8 * v44 * v522;
        v48 = v499 + 8 * v39 * v503 + 8 * v44 * v523;
        v49 = (19349669 * v47) ^ (73856093 * v46) ^ (83492791 * v48);
        if (v41 >= 2)
        {
          v50 = (19349669 * v47) ^ (73856093 * v46) ^ (83492791 * v48);
          if (v49 >= *(_QWORD *)&v38)
            v50 = v49 % *(_QWORD *)&v38;
        }
        else
        {
          v50 = v49 & v42;
        }
        v51 = *(uint64_t ***)(v43 + 8 * v50);
        if (v51)
        {
          v52 = *v51;
          if (v52)
          {
            if (v41 >= 2)
            {
              while (1)
              {
                v55 = v52[1];
                if (v49 == v55)
                {
                  if (*((_DWORD *)v52 + 4) == v46 && *((_DWORD *)v52 + 5) == v47 && *((_DWORD *)v52 + 6) == v48)
                    goto LABEL_56;
                }
                else
                {
                  if (v55 >= *(_QWORD *)&v38)
                    v55 %= *(_QWORD *)&v38;
                  if (v55 != v50)
                    goto LABEL_41;
                }
                v52 = (uint64_t *)*v52;
                if (!v52)
                  goto LABEL_41;
              }
            }
            do
            {
              v53 = v52[1];
              if (v49 == v53)
              {
                if (*((_DWORD *)v52 + 4) == v46 && *((_DWORD *)v52 + 5) == v47 && *((_DWORD *)v52 + 6) == v48)
                {
LABEL_56:
                  if (v41 >= 2)
                  {
                    v56 = (19349669 * v47) ^ (73856093 * v46) ^ (83492791 * v48);
                    if (v49 >= *(_QWORD *)&v38)
                      v56 = v49 % *(_QWORD *)&v38;
                    v54 = *(uint64_t **)(v43 + 8 * v56);
                    do
                    {
                      do
                        v54 = (uint64_t *)*v54;
                      while (v49 != v54[1]);
                    }
                    while (*((_DWORD *)v54 + 4) != v46 || *((_DWORD *)v54 + 5) != v47 || *((_DWORD *)v54 + 6) != v48);
                  }
                  else
                  {
                    v54 = *(uint64_t **)(v43 + 8 * (v49 & v42));
                    do
                    {
                      do
                        v54 = (uint64_t *)*v54;
                      while (v49 != v54[1]);
                    }
                    while (*((_DWORD *)v54 + 4) != v46 || *((_DWORD *)v54 + 5) != v47 || *((_DWORD *)v54 + 6) != v48);
                  }
                  if (v54[7])
                  {
                    if (v41 >= 2)
                    {
                      v58 = (19349669 * v47) ^ (73856093 * v46) ^ (83492791 * v48);
                      if (v49 >= *(_QWORD *)&v38)
                        v58 = v49 % *(_QWORD *)&v38;
                      v57 = *(uint64_t **)(v43 + 8 * v58);
                      do
                      {
                        do
                          v57 = (uint64_t *)*v57;
                        while (v49 != v57[1]);
                      }
                      while (*((_DWORD *)v57 + 4) != v46 || *((_DWORD *)v57 + 5) != v47 || *((_DWORD *)v57 + 6) != v48);
                    }
                    else
                    {
                      v57 = *(uint64_t **)(v43 + 8 * (v49 & v42));
                      do
                      {
                        do
                          v57 = (uint64_t *)*v57;
                        while (v49 != v57[1]);
                      }
                      while (*((_DWORD *)v57 + 4) != v46 || *((_DWORD *)v57 + 5) != v47 || *((_DWORD *)v57 + 6) != v48);
                    }
                    v59 = (float *)v57[6];
                    if (v59)
                    {
                      v45 = 3.4028e38;
                      do
                      {
                        if (v59[5] < v45)
                          v45 = v59[5];
                        v59 = *(float **)v59;
                      }
                      while (v59);
                    }
                    else
                    {
                      v45 = 3.4028e38;
                    }
                    *(float *)&v30[4 * (v44 + v39 * v27)] = v45;
                  }
                  break;
                }
              }
              else if ((v53 & v42) != v50)
              {
                break;
              }
              v52 = (uint64_t *)*v52;
            }
            while (v52);
          }
        }
LABEL_41:
        ++v44;
      }
      while (v44 != (_DWORD)v27);
      ++v39;
    }
    while (v39 != (_DWORD)v27);
  }
  v539 = 0;
  v540 = 0;
  v541 = 0;
  v60 = v31 - v30;
  v520 = v30;
  if (v31 == v30)
  {
    v61 = 0;
    v62 = v33 + v33 * (_DWORD)v27;
    v509 = v27 - 1;
    if ((int)v27 < 1)
      goto LABEL_183;
    goto LABEL_105;
  }
  if ((v60 & 0x8000000000000000) != 0)
    sub_22316E078();
  v61 = operator new(v31 - v30);
  memcpy(v61, v30, v60);
  v62 = v33 + v33 * (_DWORD)v27;
  v509 = v27 - 1;
  if ((int)v27 >= 1)
  {
LABEL_105:
    v63 = 0;
    v64 = 0;
    v65 = -(int)v27;
    v66 = v27;
    while (1)
    {
      v67 = v64;
      v68 = (v27 * v64);
      v69 = v64++ - 1;
      v70 = v69 >= 0 && v69 < (int)v27;
      v71 = !v70;
      v72 = *(float *)&v30[4 * v68];
      if (v72 > -3.4028e38)
        break;
LABEL_141:
      v81 = 0;
      do
      {
        v82 = (v63 + v81 + 1);
        v83 = *(float *)&v30[4 * v82];
        if (v83 <= -3.4028e38)
          goto LABEL_142;
        if (v71)
        {
          v84 = 0;
          v85 = 0;
          if (v67 < 0)
            goto LABEL_168;
          goto LABEL_160;
        }
        v86 = *((float *)v61 + (v65 + v81));
        if (v86 <= -3.4028e38)
        {
          v85 = 0;
          v84 = 0;
          v87 = *((float *)v61 + (v65 + v81 + 1));
          if (v87 > -3.4028e38)
            goto LABEL_154;
        }
        else if (vabds_f32(v83, v86) <= 1.0)
        {
          v84 = 0;
          v85 = 1;
          v87 = *((float *)v61 + (v65 + v81 + 1));
          if (v87 > -3.4028e38)
          {
LABEL_154:
            ++v85;
            if (vabds_f32(v83, v87) > 1.0)
              ++v84;
          }
        }
        else
        {
          v85 = 1;
          v84 = 1;
          v87 = *((float *)v61 + (v65 + v81 + 1));
          if (v87 > -3.4028e38)
            goto LABEL_154;
        }
        if (v81 + 2 < v27)
        {
          v88 = *((float *)v61 + (v65 + v81 + 2));
          if (v88 > -3.4028e38)
          {
            ++v85;
            if (vabds_f32(v83, v88) > 1.0)
              ++v84;
          }
        }
LABEL_160:
        if ((int)v27 > v67)
        {
          v89 = *((float *)v61 + (v63 + v81));
          if (v89 > -3.4028e38)
          {
            ++v85;
            if (vabds_f32(v83, v89) > 1.0)
              ++v84;
          }
          if (v81 + 2 < v27)
          {
            v90 = *((float *)v61 + (v63 + v81 + 2));
            if (v90 > -3.4028e38)
            {
              ++v85;
              if (vabds_f32(v83, v90) > 1.0)
                ++v84;
            }
          }
LABEL_169:
          if ((int)v27 > (int)v64)
          {
            v91 = *((float *)v61 + (v66 + v81));
            if (v91 > -3.4028e38)
            {
              ++v85;
              if (vabds_f32(v83, v91) > 1.0)
                ++v84;
            }
            v92 = *((float *)v61 + (v66 + v81 + 1));
            if (v92 > -3.4028e38)
            {
              ++v85;
              if (vabds_f32(v83, v92) > 1.0)
                ++v84;
            }
            if (v81 + 2 < v27)
            {
              v93 = *((float *)v61 + (v66 + v81 + 2));
              if (v93 > -3.4028e38)
              {
                ++v85;
                if (vabds_f32(v83, v93) > 1.0)
                  ++v84;
              }
            }
          }
          goto LABEL_180;
        }
LABEL_168:
        if ((v64 & 0x80000000) == 0)
          goto LABEL_169;
LABEL_180:
        if (v85 && v84 == v85)
          *(_DWORD *)&v30[4 * v82] = -8388609;
LABEL_142:
        ++v81;
      }
      while (v27 - 1 != v81);
      v65 += v27;
      v66 += v27;
      v63 += v27;
      if (v64 == v27)
        goto LABEL_183;
    }
    if (v71)
    {
      v73 = 0;
      v74 = 0;
      if (v67 < 0)
        goto LABEL_130;
      goto LABEL_126;
    }
    v75 = v69 * v27;
    v76 = *((float *)v61 + (v69 * v27));
    if (v76 <= -3.4028e38)
    {
      v74 = 0;
      v73 = 0;
      v77 = *((float *)v61 + (v75 + 1));
      if (v77 <= -3.4028e38)
        goto LABEL_126;
    }
    else if (vabds_f32(v72, v76) <= 1.0)
    {
      v73 = 0;
      v74 = 1;
      v77 = *((float *)v61 + (v75 + 1));
      if (v77 <= -3.4028e38)
        goto LABEL_126;
    }
    else
    {
      v74 = 1;
      v73 = 1;
      v77 = *((float *)v61 + (v75 + 1));
      if (v77 <= -3.4028e38)
        goto LABEL_126;
    }
    ++v74;
    if (vabds_f32(v72, v77) > 1.0)
      ++v73;
LABEL_126:
    if ((int)v27 > v67)
    {
      v78 = *((float *)v61 + (v68 + 1));
      if (v78 > -3.4028e38)
      {
        ++v74;
        if (vabds_f32(v72, v78) > 1.0)
          ++v73;
      }
      goto LABEL_131;
    }
LABEL_130:
    if ((v64 & 0x80000000) != 0)
    {
LABEL_138:
      if (v74 && v73 == v74)
        *(_DWORD *)&v30[4 * v68] = -8388609;
      goto LABEL_141;
    }
LABEL_131:
    if ((int)v27 > (int)v64)
    {
      v79 = *((float *)v61 + (v27 * v64));
      if (v79 > -3.4028e38)
      {
        ++v74;
        if (vabds_f32(v72, v79) > 1.0)
          ++v73;
      }
      v80 = *((float *)v61 + (v27 * v64 + 1));
      if (v80 > -3.4028e38)
      {
        ++v74;
        if (vabds_f32(v72, v80) > 1.0)
          ++v73;
      }
    }
    goto LABEL_138;
  }
LABEL_183:
  if (v61)
  {
    operator delete(v61);
    *(float32x2_t *)v94.i8 = *a3;
    v94.i32[2] = a3[1].i32[0];
    v525 = v94;
  }
  v95 = (float32x4_t)vextq_s8(v525, v525, 8uLL);
  v14.i32[0] = v508[1].i32[0];
  LODWORD(v96) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v525.i8, *v508), (float32x2_t)vdup_lane_s32((int32x2_t)*v508, 1), *(float32x2_t *)v525.i8, 1), v14, *(float32x2_t *)v95.f32).u32[0];
  v97 = *(float *)&v30[4 * v62];
  v526 = v27;
  v494 = a3;
  if (v97 <= -3.4028e38)
  {
    *(float *)&v30[4 * v62] = v96 + -1.5;
    sub_223983C84(&v554);
    if (**(int **)(v554 + 56) > 3)
      goto LABEL_460;
    v105 = *(unsigned __int8 *)(v554 + 72);
    v106 = sub_22322F254(v554, "OSLogSurrogateAppender", 1, 0);
    v107 = v106;
    if (!v105 && !v106)
      goto LABEL_460;
    sub_223195210((uint64_t)&v539);
    sub_2231813E8(&v541, (uint64_t)"PRR ground mesh user chunk did not contain a height estimate, using ", 68);
    v108 = (_QWORD *)std::ostream::operator<<();
    sub_2231813E8(v108, (uint64_t)"m", 1);
    v514 = v105;
    v505 = v107;
    if ((v552 & 0x10) != 0)
    {
      v111 = v551;
      if (v551 < v548)
      {
        v551 = v548;
        v111 = v548;
      }
      v112 = v547;
      v109 = v111 - (_BYTE *)v547;
      if ((unint64_t)(v111 - (_BYTE *)v547) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_253;
    }
    else
    {
      if ((v552 & 8) == 0)
      {
        v109 = 0;
        HIBYTE(v538) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_209;
      }
      v112 = v544;
      v109 = v546 - (_BYTE *)v544;
      if ((unint64_t)(v546 - (_BYTE *)v544) > 0x7FFFFFFFFFFFFFF7)
LABEL_253:
        sub_22316DBC0();
    }
    if (v109 >= 0x17)
    {
      v113 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v109 | 7) != 0x17)
        v113 = v109 | 7;
      v114 = v113 + 1;
      p_dst = (void **)operator new(v113 + 1);
      v537 = v109;
      v538 = v114 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v538) = v109;
      p_dst = (void **)&__dst;
      if (!v109)
      {
LABEL_209:
        *((_BYTE *)p_dst + v109) = 0;
        v527 = &v554;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v529 = std::chrono::system_clock::now().__d_.__rep_;
        v530 = 3;
        v531 = "unknown file";
        v532 = 198;
        v534 = 0;
        v535 = 0;
        v533 = "unknown function";
        v115 = (void **)&__dst;
        if (v538 < 0)
          v115 = __dst;
        __sa = (char *)v115;
        v116 = *(_QWORD *)v527;
        if (*(char *)(*(_QWORD *)v527 + 39) < 0)
        {
          v118 = *(const char **)(v116 + 16);
          v117 = *(_QWORD *)(v116 + 24);
          v496 = *(_QWORD *)v527 + 16;
          v120 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v120 & 1) != 0)
            goto LABEL_215;
        }
        else
        {
          v117 = *(unsigned __int8 *)(*(_QWORD *)v527 + 39);
          v118 = (const char *)(*(_QWORD *)v527 + 16);
          v496 = (uint64_t)v118;
          v119 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v119 & 1) != 0)
            goto LABEL_215;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v585);
          sub_223199C58("com.apple.cv3d", (unint64_t)v585, &xmmword_255788F40);
          if ((_BYTE)v586 && (v585[23] & 0x80000000) != 0)
            operator delete(*(void **)v585);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_215:
        if (byte_255788F57 >= 0)
          v121 = (const char *)&xmmword_255788F40;
        else
          v121 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v122 = byte_255788F57;
        else
          v122 = *((_QWORD *)&xmmword_255788F40 + 1);
        v123 = v121;
        v124 = v118;
        *(_QWORD *)v585 = os_log_create(v121, v118);
        v125 = &v585[8];
        if (v122 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v122 >= 0x17)
        {
          v126 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v122 | 7) != 0x17)
            v126 = v122 | 7;
          v127 = v126 + 1;
          v125 = operator new(v126 + 1);
          *(_QWORD *)&v585[16] = v122;
          *(_QWORD *)&v586 = v127 | 0x8000000000000000;
          *(_QWORD *)&v585[8] = v125;
        }
        else
        {
          BYTE7(v586) = v122;
          if (!v122)
          {
LABEL_229:
            v125[v122] = 0;
            BYTE8(v586) = 1;
            v128 = (char *)&v587;
            if (v117 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v117 >= 0x17)
            {
              v130 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v117 | 7) != 0x17)
                v130 = v117 | 7;
              v131 = v130 + 1;
              v129 = v514;
              v128 = (char *)operator new(v130 + 1);
              v588 = v117;
              v589 = v131 | 0x8000000000000000;
              v587 = v128;
            }
            else
            {
              HIBYTE(v589) = v117;
              v129 = v514;
              if (!v117)
              {
LABEL_237:
                v128[v117] = 0;
                v590 = 1;
                v132 = *(NSObject **)v585;
                if (SHIBYTE(v589) < 0)
                  operator delete(v587);
                if (BYTE8(v586) && SBYTE7(v586) < 0)
                  operator delete(*(void **)&v585[8]);
                if (*(_QWORD *)v585)
                  os_release(*(void **)v585);
                if (!v505 || !*(_QWORD *)(v505 + 24))
                {
                  os_log_type_enabled(v132, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v585 = 136315138;
                  *(_QWORD *)&v585[4] = __sa;
                  v139 = (void *)_os_log_send_and_compose_impl();
                  if (v139)
                    free(v139);
                  goto LABEL_320;
                }
                v133 = _os_log_pack_size();
                v134 = (std::__shared_weak_count_vtbl *)operator new(v133, (std::align_val_t)8uLL);
                v135 = (std::__shared_weak_count *)operator new();
                v135->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v135->__shared_owners_ = 0;
                v135->__shared_weak_owners_ = 0;
                v135[1].__vftable = v134;
                v580[0] = v134;
                v580[1] = v134;
                v583 = 0;
                v581 = v135;
                v582 = 0;
                v136 = strlen(__sa);
                if (v136 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v137 = v136;
                if (v136 >= 0x17)
                {
                  v142 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v136 | 7) != 0x17)
                    v142 = v136 | 7;
                  v143 = v142 + 1;
                  v138 = operator new(v142 + 1);
                  *(_QWORD *)&v584[8] = v137;
                  *(_QWORD *)&v584[16] = v143 | 0x8000000000000000;
                  *(_QWORD *)v584 = v138;
                }
                else
                {
                  v584[23] = v136;
                  v138 = v584;
                  if (!v136)
                  {
LABEL_261:
                    v138[v137] = 0;
                    v591[0] = *(_QWORD *)&v584[8];
                    v144 = *(_QWORD *)v584;
                    *(_QWORD *)((char *)v591 + 7) = *(_QWORD *)&v584[15];
                    v145 = v584[23];
                    v146 = operator new(0x38uLL);
                    v146[1] = 0;
                    v146[2] = 0;
                    v146[3] = off_24EC1FA48;
                    *v146 = &off_24EC1F9F8;
                    v147 = v591[0];
                    v146[4] = v144;
                    v146[5] = v147;
                    *(_QWORD *)((char *)v146 + 47) = *(_QWORD *)((char *)v591 + 7);
                    *((_BYTE *)v146 + 55) = v145;
                    v591[0] = 0;
                    *(_QWORD *)((char *)v591 + 7) = 0;
                    v148 = v583;
                    v582 = (char *)(v146 + 3);
                    v583 = (std::__shared_weak_count *)v146;
                    v129 = v514;
                    if (v148)
                    {
                      p_shared_owners = (unint64_t *)&v148->__shared_owners_;
                      do
                        v150 = __ldaxr(p_shared_owners);
                      while (__stlxr(v150 - 1, p_shared_owners));
                      if (!v150)
                      {
                        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                        std::__shared_weak_count::__release_weak(v148);
                      }
                    }
                    *(_OWORD *)v585 = *(_OWORD *)v580;
                    v151 = v582;
                    *(_QWORD *)&v585[16] = v581;
                    if (v581)
                    {
                      v152 = (unint64_t *)&v581->__shared_owners_;
                      do
                        v153 = __ldxr(v152);
                      while (__stxr(v153 + 1, v152));
                    }
                    v154 = v583;
                    *(_QWORD *)&v586 = v151;
                    *((_QWORD *)&v586 + 1) = v583;
                    if (v583)
                    {
                      v155 = (unint64_t *)&v583->__shared_owners_;
                      do
                        v156 = __ldxr(v155);
                      while (__stxr(v156 + 1, v155));
                      v587 = v151;
                      do
                        v157 = __ldaxr(v155);
                      while (__stlxr(v157 - 1, v155));
                      if (!v157)
                      {
                        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                        std::__shared_weak_count::__release_weak(v154);
                      }
                    }
                    else
                    {
                      v587 = v151;
                    }
                    v158 = v581;
                    if (v581)
                    {
                      v159 = (unint64_t *)&v581->__shared_owners_;
                      do
                        v160 = __ldaxr(v159);
                      while (__stlxr(v160 - 1, v159));
                      if (!v160)
                      {
                        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                        std::__shared_weak_count::__release_weak(v158);
                      }
                    }
                    v161 = *(_QWORD *)v585;
                    if (v587[31] >= 0)
                      v162 = v587 + 8;
                    else
                      v162 = (char *)*((_QWORD *)v587 + 1);
                    v163 = _os_log_pack_fill();
                    *(_DWORD *)v163 = 136315138;
                    *(_QWORD *)(v163 + 4) = v162;
                    v164 = (char *)operator new();
                    v165 = *(unsigned __int8 *)(v116 + 39);
                    v166 = v496;
                    if ((v165 & 0x80u) != 0)
                    {
                      v166 = *(_QWORD *)(v116 + 16);
                      v165 = *(_QWORD *)(v116 + 24);
                    }
                    *(_QWORD *)v164 = v161;
                    *(_OWORD *)(v164 + 8) = *(_OWORD *)&v585[8];
                    *(_QWORD *)&v585[8] = 0;
                    *(_QWORD *)&v585[16] = 0;
                    *(_OWORD *)(v164 + 24) = v586;
                    v586 = 0uLL;
                    *((_QWORD *)v164 + 5) = v166;
                    *((_QWORD *)v164 + 6) = v165;
                    v164[56] = 1;
                    *(_QWORD *)v584 = 0;
                    v580[0] = v164;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v505 + 24) + 40))(*(_QWORD *)(v505 + 24), v580);
                    v167 = v580[0];
                    v580[0] = 0;
                    if (v167)
                    {
                      v168 = (std::__shared_weak_count *)*((_QWORD *)v167 + 4);
                      if (v168)
                      {
                        v169 = (unint64_t *)&v168->__shared_owners_;
                        do
                          v170 = __ldaxr(v169);
                        while (__stlxr(v170 - 1, v169));
                        if (!v170)
                        {
                          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                          std::__shared_weak_count::__release_weak(v168);
                        }
                      }
                      v171 = (std::__shared_weak_count *)*((_QWORD *)v167 + 2);
                      if (v171)
                      {
                        v172 = (unint64_t *)&v171->__shared_owners_;
                        do
                          v173 = __ldaxr(v172);
                        while (__stlxr(v173 - 1, v172));
                        if (!v173)
                        {
                          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                          std::__shared_weak_count::__release_weak(v171);
                        }
                      }
                      MEMORY[0x227684CE8](v167, 0x10F0C40B62ED6C6);
                      v174 = *(_QWORD *)v584;
                      *(_QWORD *)v584 = 0;
                      if (v174)
                      {
                        v175 = *(std::__shared_weak_count **)(v174 + 32);
                        if (v175)
                        {
                          v176 = (unint64_t *)&v175->__shared_owners_;
                          do
                            v177 = __ldaxr(v176);
                          while (__stlxr(v177 - 1, v176));
                          if (!v177)
                          {
                            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                            std::__shared_weak_count::__release_weak(v175);
                          }
                        }
                        v178 = *(std::__shared_weak_count **)(v174 + 16);
                        if (v178)
                        {
                          v179 = (unint64_t *)&v178->__shared_owners_;
                          do
                            v180 = __ldaxr(v179);
                          while (__stlxr(v180 - 1, v179));
                          if (!v180)
                          {
                            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                            std::__shared_weak_count::__release_weak(v178);
                          }
                        }
                        MEMORY[0x227684CE8](v174, 0x10F0C40B62ED6C6);
                      }
                    }
                    v181 = (std::__shared_weak_count *)*((_QWORD *)&v586 + 1);
                    if (*((_QWORD *)&v586 + 1))
                    {
                      v182 = (unint64_t *)(*((_QWORD *)&v586 + 1) + 8);
                      do
                        v183 = __ldaxr(v182);
                      while (__stlxr(v183 - 1, v182));
                      if (!v183)
                      {
                        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                        std::__shared_weak_count::__release_weak(v181);
                      }
                    }
                    v184 = *(std::__shared_weak_count **)&v585[16];
                    if (*(_QWORD *)&v585[16])
                    {
                      v185 = (unint64_t *)(*(_QWORD *)&v585[16] + 8);
                      do
                        v186 = __ldaxr(v185);
                      while (__stlxr(v186 - 1, v185));
                      if (!v186)
                      {
                        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                        std::__shared_weak_count::__release_weak(v184);
                      }
                    }
LABEL_320:
                    if (v129)
                    {
                      v187 = (const char *)&__dst;
                      if (v538 < 0)
                        v187 = (const char *)__dst;
                      sub_22322C138((uint64_t)&v527, "%s", v187);
                      sub_223182C08((uint64_t)&v527);
                    }
                    sub_223182C08((uint64_t)&v527);
                    v188 = v535;
                    if (!v535)
                      goto LABEL_455;
                    v189 = (unint64_t *)&v535->__shared_owners_;
                    do
                      v190 = __ldaxr(v189);
                    while (__stlxr(v190 - 1, v189));
                    goto LABEL_453;
                  }
                }
                memcpy(v138, __sa, v137);
                goto LABEL_261;
              }
            }
            memmove(v128, v124, v117);
            goto LABEL_237;
          }
        }
        memmove(v125, v123, v122);
        goto LABEL_229;
      }
    }
    memmove(p_dst, v112, v109);
    goto LABEL_209;
  }
  if (v97 > (float)(v96 + -0.1))
  {
    *(float *)&v30[4 * v62] = v96 + -0.1;
    sub_223983C84(&v554);
    if (**(int **)(v554 + 56) <= 3)
    {
      v98 = *(unsigned __int8 *)(v554 + 72);
      v99 = sub_22322F254(v554, "OSLogSurrogateAppender", 1, 0);
      v100 = v99;
      if (v98 || v99)
      {
        sub_223195210((uint64_t)&v539);
        sub_2231813E8(&v541, (uint64_t)"PRR ground mesh user chunk contained a suspicious height estimate ", 66);
        v101 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v101, (uint64_t)", using ", 8);
        v102 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v102, (uint64_t)"m", 1);
        __s = v98;
        if ((v552 & 0x10) != 0)
        {
          v140 = v551;
          if (v551 < v548)
          {
            v551 = v548;
            v140 = v548;
          }
          v141 = &v547;
        }
        else
        {
          if ((v552 & 8) == 0)
          {
            v103 = 0;
            HIBYTE(v538) = 0;
            v104 = (void **)&__dst;
            goto LABEL_337;
          }
          v141 = &v544;
          v140 = v546;
        }
        v191 = *v141;
        v103 = v140 - (_BYTE *)*v141;
        if (v103 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v103 >= 0x17)
        {
          v192 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v103 | 7) != 0x17)
            v192 = v103 | 7;
          v193 = v192 + 1;
          v104 = (void **)operator new(v192 + 1);
          v537 = v103;
          v538 = v193 | 0x8000000000000000;
          __dst = v104;
        }
        else
        {
          HIBYTE(v538) = (_BYTE)v140 - *(_BYTE *)v141;
          v104 = (void **)&__dst;
          if (!v103)
          {
LABEL_337:
            *((_BYTE *)v104 + v103) = 0;
            v527 = &v554;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v529 = std::chrono::system_clock::now().__d_.__rep_;
            v530 = 3;
            v531 = "unknown file";
            v532 = 207;
            v534 = 0;
            v535 = 0;
            v533 = "unknown function";
            v194 = (void **)&__dst;
            if (v538 < 0)
              v194 = __dst;
            v515 = (const char *)v194;
            v195 = *(_QWORD *)v527;
            v196 = (const char *)(*(_QWORD *)v527 + 16);
            v506 = v196;
            v497 = *(_QWORD *)v527;
            if (*(char *)(*(_QWORD *)v527 + 39) < 0)
            {
              v196 = *(const char **)(v195 + 16);
              v197 = *(_QWORD *)(v195 + 24);
            }
            else
            {
              v197 = *(unsigned __int8 *)(*(_QWORD *)v527 + 39);
            }
            v198 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v198 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v585);
              sub_223199C58("com.apple.cv3d", (unint64_t)v585, &xmmword_255788F40);
              if ((_BYTE)v586 && (v585[23] & 0x80000000) != 0)
                operator delete(*(void **)v585);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
            if (byte_255788F57 >= 0)
              v199 = (const char *)&xmmword_255788F40;
            else
              v199 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v200 = byte_255788F57;
            else
              v200 = *((_QWORD *)&xmmword_255788F40 + 1);
            v201 = v199;
            v202 = v196;
            *(_QWORD *)v585 = os_log_create(v199, v196);
            v203 = &v585[8];
            if (v200 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v200 >= 0x17)
            {
              v204 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v200 | 7) != 0x17)
                v204 = v200 | 7;
              v205 = v204 + 1;
              v203 = operator new(v204 + 1);
              *(_QWORD *)&v585[16] = v200;
              *(_QWORD *)&v586 = v205 | 0x8000000000000000;
              *(_QWORD *)&v585[8] = v203;
            }
            else
            {
              BYTE7(v586) = v200;
              if (!v200)
              {
LABEL_357:
                v203[v200] = 0;
                BYTE8(v586) = 1;
                v206 = (char *)&v587;
                if (v197 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v207 = v197;
                v208 = v197 >= 0x17;
                v209 = v100;
                if (v208)
                {
                  v210 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v207 | 7) != 0x17)
                    v210 = v207 | 7;
                  v211 = v210 + 1;
                  v206 = (char *)operator new(v210 + 1);
                  v588 = v207;
                  v589 = v211 | 0x8000000000000000;
                  v587 = v206;
                }
                else
                {
                  HIBYTE(v589) = v207;
                  if (!v207)
                  {
LABEL_365:
                    v206[v207] = 0;
                    v590 = 1;
                    v212 = *(NSObject **)v585;
                    if (SHIBYTE(v589) < 0)
                      operator delete(v587);
                    if (BYTE8(v586) && SBYTE7(v586) < 0)
                      operator delete(*(void **)&v585[8]);
                    if (*(_QWORD *)v585)
                      os_release(*(void **)v585);
                    if (!v100 || !*(_QWORD *)(v100 + 24))
                    {
                      os_log_type_enabled(v212, OS_LOG_TYPE_INFO);
                      *(_DWORD *)v585 = 136315138;
                      *(_QWORD *)&v585[4] = v515;
                      v220 = (void *)_os_log_send_and_compose_impl();
                      v221 = __s;
                      if (v220)
                        free(v220);
                      goto LABEL_446;
                    }
                    v213 = _os_log_pack_size();
                    v214 = (std::__shared_weak_count_vtbl *)operator new(v213, (std::align_val_t)8uLL);
                    v215 = (std::__shared_weak_count *)operator new();
                    v215->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v215->__shared_owners_ = 0;
                    v215->__shared_weak_owners_ = 0;
                    v215[1].__vftable = v214;
                    v580[0] = v214;
                    v580[1] = v214;
                    v583 = 0;
                    v581 = v215;
                    v582 = 0;
                    v216 = strlen(v515);
                    if (v216 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v217 = v216;
                    if (v216 >= 0x17)
                    {
                      v222 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v216 | 7) != 0x17)
                        v222 = v216 | 7;
                      v223 = v222 + 1;
                      v218 = operator new(v222 + 1);
                      *(_QWORD *)&v584[8] = v217;
                      *(_QWORD *)&v584[16] = v223 | 0x8000000000000000;
                      *(_QWORD *)v584 = v218;
                      v219 = v506;
                    }
                    else
                    {
                      v584[23] = v216;
                      v218 = v584;
                      v219 = v506;
                      if (!v216)
                      {
LABEL_384:
                        v218[v217] = 0;
                        v591[0] = *(_QWORD *)&v584[8];
                        v224 = *(_QWORD *)v584;
                        *(_QWORD *)((char *)v591 + 7) = *(_QWORD *)&v584[15];
                        v225 = v584[23];
                        v226 = operator new(0x38uLL);
                        v226[1] = 0;
                        v226[2] = 0;
                        v226[3] = off_24EC1FA48;
                        *v226 = &off_24EC1F9F8;
                        v227 = v591[0];
                        v226[4] = v224;
                        v226[5] = v227;
                        *(_QWORD *)((char *)v226 + 47) = *(_QWORD *)((char *)v591 + 7);
                        *((_BYTE *)v226 + 55) = v225;
                        v591[0] = 0;
                        *(_QWORD *)((char *)v591 + 7) = 0;
                        v228 = v583;
                        v582 = (char *)(v226 + 3);
                        v583 = (std::__shared_weak_count *)v226;
                        if (v228)
                        {
                          v229 = (unint64_t *)&v228->__shared_owners_;
                          do
                            v230 = __ldaxr(v229);
                          while (__stlxr(v230 - 1, v229));
                          if (!v230)
                          {
                            ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                            std::__shared_weak_count::__release_weak(v228);
                          }
                        }
                        *(_OWORD *)v585 = *(_OWORD *)v580;
                        v231 = v582;
                        *(_QWORD *)&v585[16] = v581;
                        if (v581)
                        {
                          v232 = (unint64_t *)&v581->__shared_owners_;
                          do
                            v233 = __ldxr(v232);
                          while (__stxr(v233 + 1, v232));
                        }
                        v234 = v583;
                        *(_QWORD *)&v586 = v231;
                        *((_QWORD *)&v586 + 1) = v583;
                        if (v583)
                        {
                          v235 = (unint64_t *)&v583->__shared_owners_;
                          do
                            v236 = __ldxr(v235);
                          while (__stxr(v236 + 1, v235));
                          v587 = v231;
                          do
                            v237 = __ldaxr(v235);
                          while (__stlxr(v237 - 1, v235));
                          if (!v237)
                          {
                            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                            std::__shared_weak_count::__release_weak(v234);
                          }
                        }
                        else
                        {
                          v587 = v231;
                        }
                        v238 = v581;
                        if (v581)
                        {
                          v239 = (unint64_t *)&v581->__shared_owners_;
                          do
                            v240 = __ldaxr(v239);
                          while (__stlxr(v240 - 1, v239));
                          if (!v240)
                          {
                            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                            std::__shared_weak_count::__release_weak(v238);
                          }
                        }
                        v241 = *(_QWORD *)v585;
                        if (v587[31] >= 0)
                          v242 = v587 + 8;
                        else
                          v242 = (char *)*((_QWORD *)v587 + 1);
                        v243 = _os_log_pack_fill();
                        *(_DWORD *)v243 = 136315138;
                        *(_QWORD *)(v243 + 4) = v242;
                        v244 = (char *)operator new();
                        v245 = *(unsigned __int8 *)(v497 + 39);
                        if ((v245 & 0x80u) == 0)
                          v246 = v219;
                        else
                          v246 = *(const char **)(v497 + 16);
                        if ((v245 & 0x80u) != 0)
                          v245 = *(_QWORD *)(v497 + 24);
                        *(_QWORD *)v244 = v241;
                        *(_OWORD *)(v244 + 8) = *(_OWORD *)&v585[8];
                        *(_QWORD *)&v585[8] = 0;
                        *(_QWORD *)&v585[16] = 0;
                        *(_OWORD *)(v244 + 24) = v586;
                        v586 = 0uLL;
                        *((_QWORD *)v244 + 5) = v246;
                        *((_QWORD *)v244 + 6) = v245;
                        v244[56] = 1;
                        *(_QWORD *)v584 = 0;
                        v580[0] = v244;
                        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v209 + 24) + 40))(*(_QWORD *)(v209 + 24), v580);
                        v247 = v580[0];
                        v580[0] = 0;
                        v221 = __s;
                        if (v247)
                        {
                          v248 = (std::__shared_weak_count *)*((_QWORD *)v247 + 4);
                          if (v248)
                          {
                            v249 = (unint64_t *)&v248->__shared_owners_;
                            do
                              v250 = __ldaxr(v249);
                            while (__stlxr(v250 - 1, v249));
                            if (!v250)
                            {
                              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                              std::__shared_weak_count::__release_weak(v248);
                            }
                          }
                          v251 = (std::__shared_weak_count *)*((_QWORD *)v247 + 2);
                          if (v251)
                          {
                            v252 = (unint64_t *)&v251->__shared_owners_;
                            do
                              v253 = __ldaxr(v252);
                            while (__stlxr(v253 - 1, v252));
                            if (!v253)
                            {
                              ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                              std::__shared_weak_count::__release_weak(v251);
                            }
                          }
                          MEMORY[0x227684CE8](v247, 0x10F0C40B62ED6C6);
                          v254 = *(_QWORD *)v584;
                          *(_QWORD *)v584 = 0;
                          if (v254)
                          {
                            v255 = *(std::__shared_weak_count **)(v254 + 32);
                            if (v255)
                            {
                              v256 = (unint64_t *)&v255->__shared_owners_;
                              do
                                v257 = __ldaxr(v256);
                              while (__stlxr(v257 - 1, v256));
                              if (!v257)
                              {
                                ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                                std::__shared_weak_count::__release_weak(v255);
                              }
                            }
                            v258 = *(std::__shared_weak_count **)(v254 + 16);
                            if (v258)
                            {
                              v259 = (unint64_t *)&v258->__shared_owners_;
                              do
                                v260 = __ldaxr(v259);
                              while (__stlxr(v260 - 1, v259));
                              if (!v260)
                              {
                                ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                                std::__shared_weak_count::__release_weak(v258);
                              }
                            }
                            MEMORY[0x227684CE8](v254, 0x10F0C40B62ED6C6);
                          }
                        }
                        v261 = (std::__shared_weak_count *)*((_QWORD *)&v586 + 1);
                        if (*((_QWORD *)&v586 + 1))
                        {
                          v262 = (unint64_t *)(*((_QWORD *)&v586 + 1) + 8);
                          do
                            v263 = __ldaxr(v262);
                          while (__stlxr(v263 - 1, v262));
                          if (!v263)
                          {
                            ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                            std::__shared_weak_count::__release_weak(v261);
                          }
                        }
                        v264 = *(std::__shared_weak_count **)&v585[16];
                        if (*(_QWORD *)&v585[16])
                        {
                          v265 = (unint64_t *)(*(_QWORD *)&v585[16] + 8);
                          do
                            v266 = __ldaxr(v265);
                          while (__stlxr(v266 - 1, v265));
                          if (!v266)
                          {
                            ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                            std::__shared_weak_count::__release_weak(v264);
                          }
                        }
LABEL_446:
                        if (v221)
                        {
                          v267 = (const char *)&__dst;
                          if (v538 < 0)
                            v267 = (const char *)__dst;
                          sub_22322C138((uint64_t)&v527, "%s", v267);
                          sub_223182C08((uint64_t)&v527);
                        }
                        sub_223182C08((uint64_t)&v527);
                        v188 = v535;
                        if (!v535)
                          goto LABEL_455;
                        v268 = (unint64_t *)&v535->__shared_owners_;
                        do
                          v190 = __ldaxr(v268);
                        while (__stlxr(v190 - 1, v268));
LABEL_453:
                        if (!v190)
                        {
                          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                          std::__shared_weak_count::__release_weak(v188);
                        }
LABEL_455:
                        if (SHIBYTE(v538) < 0)
                          operator delete(__dst);
                        v539 = *MEMORY[0x24BEDB7F0];
                        v269 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
                        *(uint64_t *)((char *)&v539 + *(_QWORD *)(v539 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        v541 = v269;
                        v542 = (char *)(MEMORY[0x24BEDB848] + 16);
                        if (v550 < 0)
                          operator delete(__p);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x227684BE0](&v553);
                        goto LABEL_460;
                      }
                    }
                    memcpy(v218, v515, v217);
                    goto LABEL_384;
                  }
                }
                memmove(v206, v202, v207);
                goto LABEL_365;
              }
            }
            memmove(v203, v201, v200);
            goto LABEL_357;
          }
        }
        memmove(v104, v191, v103);
        goto LABEL_337;
      }
    }
  }
LABEL_460:
  v270 = 0;
  v271 = 0;
  memset(v585, 0, sizeof(v585));
  v527 = 0;
  rep = 0;
  v529 = 0;
  do
  {
    v272 = 0;
    v273 = v271 * v27;
    v498 = v271;
    v274 = 8 * v271;
    v516 = v501 + v274 * v502;
    __sb = v500 + v274 * v504;
    v275 = v499 + v274 * v503;
    do
    {
      v277 = (v273 + v272);
      if (*(float *)&v30[4 * v277] > -3.4028e38)
      {
        v95.f32[0] = (float)(int)(v516 + 8 * v272 * v521);
        v95.f32[1] = (float)(int)(__sb + 8 * v272 * v522);
        v95.f32[2] = (float)(int)(v275 + 8 * v272 * v523);
        v278.i64[0] = 0x3F0000003F000000;
        v278.i64[1] = 0x3F0000003F000000;
        v95 = vaddq_f32(v95, v278);
        v279 = vmulq_n_f32(v95, COERCE_FLOAT(*(_QWORD *)(a1 + 144)));
        if ((unint64_t)v270 < *(_QWORD *)&v585[16])
        {
          v270[2] = v279.i32[2];
          *(_QWORD *)v270 = v279.i64[0];
          v270 += 3;
          *(_QWORD *)&v585[8] = v270;
          v281 = (char *)rep;
          v280 = v529;
          if (rep >= v529)
          {
LABEL_486:
            v291 = (char *)v527;
            v292 = v281 - (_BYTE *)v527;
            v293 = (v281 - (_BYTE *)v527) >> 2;
            v294 = v293 + 1;
            if ((unint64_t)(v293 + 1) >> 62)
              sub_22316E078();
            v295 = v280 - (_QWORD)v527;
            if (v295 >> 1 > v294)
              v294 = v295 >> 1;
            if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFFCLL)
              v296 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v296 = v294;
            if (v296)
            {
              if (v296 >> 62)
                sub_223174E94();
              v297 = operator new(4 * v296);
            }
            else
            {
              v297 = 0;
            }
            v298 = &v297[4 * v293];
            *v298 = *(_DWORD *)&v520[4 * v277];
            v276 = v298 + 1;
            if (v281 == v291)
            {
              v27 = v526;
            }
            else
            {
              v299 = v281 - v291 - 4;
              if (v299 < 0x2C)
              {
                v27 = v526;
                goto LABEL_506;
              }
              v300 = v281 - v297 - v292;
              v27 = v526;
              if (v300 < 0x20)
                goto LABEL_770;
              v301 = (v299 >> 2) + 1;
              v302 = 4 * (v301 & 0x7FFFFFFFFFFFFFF8);
              v303 = &v281[-v302];
              v298 = (_DWORD *)((char *)v298 - v302);
              v304 = (float32x4_t *)&v297[4 * v293 - 16];
              v305 = (float32x4_t *)(v281 - 16);
              v306 = v301 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v95 = v305[-1];
                v307 = *v305;
                v304[-1] = v95;
                *v304 = v307;
                v304 -= 2;
                v305 -= 2;
                v306 -= 8;
              }
              while (v306);
              v281 = v303;
              if (v301 != (v301 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_770:
                do
                {
LABEL_506:
                  v308 = *((_DWORD *)v281 - 1);
                  v281 -= 4;
                  *--v298 = v308;
                }
                while (v281 != v291);
              }
            }
            v527 = v298;
            v529 = (unint64_t)&v297[4 * v296];
            if (v291)
              operator delete(v291);
            v30 = v520;
LABEL_464:
            rep = (unint64_t)v276;
            goto LABEL_465;
          }
LABEL_463:
          *(_DWORD *)v281 = *(_DWORD *)&v30[4 * v277];
          v276 = v281 + 4;
          goto LABEL_464;
        }
        v282 = *(_DWORD **)v585;
        v283 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v270 - *(_QWORD *)v585) >> 2) + 1;
        if (v283 > 0x1555555555555555)
          sub_22316E078();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v585[16] - *(_QWORD *)v585) >> 2) > v283)
          v283 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v585[16] - *(_QWORD *)v585) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v585[16] - *(_QWORD *)v585) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v284 = 0x1555555555555555;
        else
          v284 = v283;
        if (v284)
        {
          if (v284 > 0x1555555555555555)
            sub_223174E94();
          v507 = v279;
          v285 = (char *)operator new(12 * v284);
          v279 = v507;
        }
        else
        {
          v285 = 0;
        }
        v286 = &v285[4 * (v270 - v282)];
        *(_QWORD *)v286 = v279.i64[0];
        *((_DWORD *)v286 + 2) = v279.i32[2];
        if (v270 == v282)
        {
          v290 = v270;
          v270 = v286 + 12;
          *(_QWORD *)v585 = v286;
          *(_QWORD *)&v585[8] = v286 + 12;
          *(_QWORD *)&v585[16] = &v285[12 * v284];
          if (v290)
            goto LABEL_484;
        }
        else
        {
          v287 = &v285[4 * (v270 - v282)];
          do
          {
            v288 = *(_QWORD *)(v270 - 3);
            v270 -= 3;
            v289 = v270[2];
            *(_QWORD *)(v287 - 12) = v288;
            v287 -= 12;
            *((_DWORD *)v287 + 2) = v289;
          }
          while (v270 != v282);
          v290 = *(void **)v585;
          v270 = v286 + 12;
          *(_QWORD *)v585 = v287;
          *(_QWORD *)&v585[8] = v286 + 12;
          *(_QWORD *)&v585[16] = &v285[12 * v284];
          if (v290)
LABEL_484:
            operator delete(v290);
        }
        *(_QWORD *)&v585[8] = v270;
        v281 = (char *)rep;
        v280 = v529;
        if (rep >= v529)
          goto LABEL_486;
        goto LABEL_463;
      }
LABEL_465:
      ++v272;
    }
    while (v272 != v27);
    v271 = v498 + 1;
  }
  while (v498 + 1 != (_DWORD)v27);
  v309 = *(_QWORD *)v585;
  v310 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v270 - *(_QWORD *)v585) >> 2);
  if (v310 < 2)
  {
    sub_22397FF08(v494, v508, a5, v495, a7, a8);
    goto LABEL_714;
  }
  v539 = 0x600000003;
  LODWORD(v540) = 0;
  v542 = 0;
  v543 = 0;
  v541 = 0;
  if (v270 != *(_DWORD **)v585)
  {
    if (v310 >> 60)
      sub_22316E078();
    v311 = operator new(0xAAAAAAAAAAAAAAB0 * (((uint64_t)v270 - *(_QWORD *)v585) >> 2));
    v541 = v311;
    v543 = (char *)&v311[0xEAAAAAAAAAAAAAACLL * (((uint64_t)v270 - v309) >> 2)];
    v312 = (char *)v311;
    if (((v310 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_771;
    v313 = ((v310 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v312 = (char *)&v311[4 * (v313 & 0x1FFFFFFFFFFFFFFELL)];
    v314 = v311 + 7;
    v315 = v313 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v314 - 4) = 0;
      *v314 = 0;
      v314 += 8;
      v315 -= 2;
    }
    while (v315);
    if (v313 != (v313 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_771:
      do
      {
        *((_DWORD *)v312 + 3) = 0;
        v312 += 16;
      }
      while (v312 != (char *)&v311[0xEAAAAAAAAAAAAAACLL * (((uint64_t)v270 - v309) >> 2)]);
    }
    v542 = (char *)&v311[0xEAAAAAAAAAAAAAACLL * (((uint64_t)v270 - v309) >> 2)];
  }
  v544 = 0;
  v545 = 0;
  v546 = 0;
  if ((_DWORD)v310)
  {
    v316 = 0;
    v317 = 0;
    do
    {
      v318 = (char *)v541 + v316;
      v319 = *(_DWORD *)(v309 + 8);
      *(_QWORD *)v318 = *(_QWORD *)v309;
      *((_DWORD *)v318 + 2) = v319;
      *((_DWORD *)v318 + 3) = v317++;
      v316 += 16;
      v309 += 12;
    }
    while (v310 != v317);
    v320 = v545;
    if (v545 >= v546)
    {
      v322 = (char *)v544;
      v323 = 0xAAAAAAAAAAAAAAABLL * ((v545 - (_BYTE *)v544) >> 3);
      v324 = v323 + 1;
      if (v323 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      if (0x5555555555555556 * ((v546 - (_BYTE *)v544) >> 3) > v324)
        v324 = 0x5555555555555556 * ((v546 - (_BYTE *)v544) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v546 - (_BYTE *)v544) >> 3) >= 0x555555555555555)
        v325 = 0xAAAAAAAAAAAAAAALL;
      else
        v325 = v324;
      if (v325)
      {
        if (v325 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v326 = (char *)operator new(24 * v325);
      }
      else
      {
        v326 = 0;
      }
      v327 = &v326[24 * v323];
      *(_DWORD *)v327 = 2139095039;
      v327[4] = -1;
      *(_DWORD *)(v327 + 5) = 0;
      *((_DWORD *)v327 + 2) = 0;
      *(_QWORD *)(v327 + 12) = -1;
      *((_DWORD *)v327 + 5) = -1;
      v321 = v327 + 24;
      if (v320 != v322)
      {
        do
        {
          v328 = *(_OWORD *)(v320 - 24);
          *((_QWORD *)v327 - 1) = *((_QWORD *)v320 - 1);
          *(_OWORD *)(v327 - 24) = v328;
          v327 -= 24;
          v320 -= 24;
        }
        while (v320 != v322);
        v320 = (char *)v544;
      }
      v544 = v327;
      v545 = v321;
      v546 = &v326[24 * v325];
      if (v320)
        operator delete(v320);
    }
    else
    {
      *(_DWORD *)v545 = 2139095039;
      v320[4] = -1;
      *(_DWORD *)(v320 + 5) = 0;
      *((_DWORD *)v320 + 2) = 0;
      *(_QWORD *)(v320 + 12) = -1;
      *((_DWORD *)v320 + 5) = -1;
      v321 = v320 + 24;
    }
    v545 = v321;
    sub_223984CE0((uint64_t)&v539, v310, 0, 0, 0);
  }
  v329 = operator new(0x10uLL);
  v331 = 0;
  v581 = (std::__shared_weak_count *)(v329 + 2);
  *v329 = 0;
  v329[1] = 0;
  v580[0] = v329;
  v580[1] = v329 + 2;
  do
  {
    for (i = 0; i != v526; ++i)
    {
      v334 = (v331 * v27 + i);
      if (*(float *)&v520[4 * v334] <= -3.4028e38)
      {
        v330.f32[0] = (float)(int)(v501 + 8 * v331 * v502 + 8 * i * v521);
        v330.f32[1] = (float)(int)(v500 + 8 * v331 * v504 + 8 * i * v522);
        v330.f32[2] = (float)(int)(v499 + 8 * v331 * v503 + 8 * i * v523);
        v335.i64[0] = 0x3F0000003F000000;
        v335.i64[1] = 0x3F0000003F000000;
        v336 = vaddq_f32(v330, v335);
        v337 = (__n128)vmulq_n_f32(v336, COERCE_FLOAT(*(_QWORD *)(a1 + 144)));
        *(_DWORD *)&v584[8] = v337.n128_u32[2];
        *(_QWORD *)v584 = v337.n128_u64[0];
        v337.n128_u32[0] = 2139095039;
        v338 = sub_223983D78((uint64_t)&v539, (uint64_t)v584, 4u, (unint64_t *)v580, v337, v336, v335);
        if (v338)
        {
          v340 = (unsigned int *)v580[0];
          v341 = v338;
          v342 = 0.0;
          v343 = 0.0;
          do
          {
            v344 = *v340++;
            v345 = *(_QWORD *)v585 + 12 * v344;
            v339.i64[0] = *(_QWORD *)v345;
            v339.i32[2] = *(_DWORD *)(v345 + 8);
            v339 = (int8x16_t)vsubq_f32(*(float32x4_t *)v584, (float32x4_t)v339);
            v346 = (float32x2_t)vextq_s8(v339, v339, 8uLL).u64[0];
            v347 = 0.5
                 / (float)(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v339.i8, *(float32x2_t *)v339.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v339.i8, 1), *(float32x2_t *)v339.i8, 1), v346, v346).f32[0]+ 0.5);
            v342 = v342 + v347;
            v343 = v343 + (float)(*((float *)v527 + v344) * v347);
            --v341;
          }
          while (v341);
          v333 = v343 / v342;
        }
        else
        {
          v333 = NAN;
        }
        *(float *)&v520[4 * v334] = v333;
      }
    }
    ++v331;
    LODWORD(v27) = v526;
  }
  while (v331 != (_DWORD)v526);
  if (v580[0])
  {
    v580[1] = v580[0];
    operator delete(v580[0]);
  }
  v348 = 0;
  v349 = *(float *)(a1 + 144) * 0.5;
  v350 = v556;
  do
  {
    v351 = 0;
    v352 = (8 * v348) | 4;
    __sc = v348;
    v353 = v348 * v27;
    v354 = v501 + v352 * v502;
    v355 = v500 + v352 * v504;
    v356 = v499 + v352 * v503;
    do
    {
      v357 = (8 * v351) | 4;
      v330.f32[0] = (float)(int)(v354 + v357 * v521);
      v330.f32[1] = (float)(int)(v355 + v357 * v522);
      v330.f32[2] = (float)(int)(v356 + v357 * v523);
      v358.i64[0] = 0x3F0000003F000000;
      v358.i64[1] = 0x3F0000003F000000;
      v359 = vmulq_n_f32(vaddq_f32(v330, v358), COERCE_FLOAT(*(_QWORD *)(a1 + 144)));
      *(float32x2_t *)v358.f32 = *v508;
      v358.i32[2] = v508[1].i32[0];
      v330 = vmulq_n_f32(v358, *(float *)&v520[4 * (v353 + v351)] - v349);
      v360 = vaddq_f32(v330, v359);
      if ((unint64_t)v350 < v557)
      {
        v350[2] = v360.i32[2];
        *(_QWORD *)v350 = v360.i64[0];
        v350 += 3;
      }
      else
      {
        v361 = 0xAAAAAAAAAAAAAAABLL * (v350 - v555);
        v362 = v361 + 1;
        if (v361 + 1 > 0x1555555555555555)
          sub_22316E078();
        if (0x5555555555555556 * ((uint64_t)(v557 - (_QWORD)v555) >> 2) > v362)
          v362 = 0x5555555555555556 * ((uint64_t)(v557 - (_QWORD)v555) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v557 - (_QWORD)v555) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v363 = 0x1555555555555555;
        else
          v363 = v362;
        if (v363)
        {
          *(_DWORD *)v584 = v363;
          if (v559 == -1)
            sub_22316DD70();
          *(float32x4_t *)v517 = v360;
          v580[0] = v584;
          v364 = ((uint64_t (*)(void **, _BYTE *))off_24EC5D260[v559])(v580, v558);
          v360 = *(float32x4_t *)v517;
        }
        else
        {
          v364 = 0;
          v365 = 0;
        }
        v366 = v364 + 12 * v361;
        *(_QWORD *)v366 = v360.i64[0];
        *(_DWORD *)(v366 + 8) = v360.i32[2];
        v367 = v556;
        v368 = (uint64_t)v555;
        v369 = v366;
        if (v556 != v555)
        {
          do
          {
            v370 = *(_QWORD *)(v367 - 3);
            v367 -= 3;
            v371 = v367[2];
            *(_QWORD *)(v369 - 12) = v370;
            v369 -= 12;
            *(_DWORD *)(v369 + 8) = v371;
          }
          while (v367 != (_DWORD *)v368);
          v367 = v555;
        }
        v350 = (_DWORD *)(v366 + 12);
        v555 = (_DWORD *)v369;
        v556 = (_DWORD *)(v366 + 12);
        v372 = v557;
        v557 = v364 + 12 * v365;
        if (v367)
        {
          v580[0] = v367;
          LODWORD(v580[1]) = -1431655765 * ((v372 - (unint64_t)v367) >> 2);
          if (v559 == -1)
            sub_22316DD70();
          *(_QWORD *)v584 = v580;
          ((void (*)(_BYTE *, _BYTE *))off_24EC5D270[v559])(v584, v558);
        }
      }
      v556 = v350;
      ++v351;
    }
    while (v351 != v526);
    v348 = __sc + 1;
    LODWORD(v27) = v526;
  }
  while (__sc + 1 != (_DWORD)v526);
  v579 = 1;
  v373 = 0xAAAAAAAAAAAAAAABLL * (v350 - v555);
  LODWORD(v580[0]) = 1065353216;
  v374 = (v578 - v577) >> 2;
  if (v373 <= v374)
  {
    if (v373 < v374)
      v578 = v577 - 0x5555555555555554 * (v350 - v555);
  }
  else
  {
    sub_223937944((uint64_t)&v577, v373 - v374, (const float *)v580);
  }
  v375 = 0;
  v570 = 2;
  v576 = 2;
  while (2)
  {
    v376 = 0;
    v524 = v375;
    v377 = v375 * v526;
    while (2)
    {
      while (2)
      {
        v378 = v376 + v377;
        v379 = v376 + v377 + 1;
        v380 = v379 + v526;
        v381 = v561;
        if ((unint64_t)v561 < v562)
        {
          *v561 = v378;
          v381[1] = v379;
          v382 = v381 + 3;
          v381[2] = v380;
          v561 = v381 + 3;
          v383 = v378 + v526;
          v384 = v562;
          if ((unint64_t)(v381 + 3) < v562)
            goto LABEL_586;
LABEL_608:
          v405 = 0xAAAAAAAAAAAAAAABLL * (v382 - v560);
          v406 = v405 + 1;
          if (v405 + 1 > 0x1555555555555555)
            sub_22316E078();
          v407 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v384 - (_QWORD)v560) >> 2);
          if (2 * v407 > v406)
            v406 = 2 * v407;
          if (v407 >= 0xAAAAAAAAAAAAAAALL)
            v408 = 0x1555555555555555;
          else
            v408 = v406;
          if (v408)
          {
            *(_DWORD *)v584 = v408;
            if (v564 == -1)
              sub_22316DD70();
            v580[0] = v584;
            v409 = ((uint64_t (*)(void **, _BYTE *))off_24EC5D2A0[v564])(v580, v563);
          }
          else
          {
            v409 = 0;
            v410 = 0;
          }
          v411 = (_DWORD *)(v409 + 12 * v405);
          *v411 = v380;
          v411[1] = v383;
          v411[2] = v378;
          v412 = v561;
          v413 = v560;
          v414 = v411;
          if (v561 != v560)
          {
            do
            {
              v415 = *(_QWORD *)(v412 - 3);
              v412 -= 3;
              v416 = v412[2];
              *(_QWORD *)(v414 - 3) = v415;
              v414 -= 3;
              v414[2] = v416;
            }
            while (v412 != v413);
            v412 = v560;
          }
          v417 = v411 + 3;
          v560 = v414;
          v561 = v411 + 3;
          v418 = v562;
          v562 = v409 + 12 * v410;
          if (v412)
          {
            v580[0] = v412;
            LODWORD(v580[1]) = -1431655765 * ((v418 - (unint64_t)v412) >> 2);
            if (v564 == -1)
              sub_22316DD70();
            *(_QWORD *)v584 = v580;
            ((void (*)(_BYTE *, _BYTE *))off_24EC5D2B0[v564])(v584, v563);
          }
          v561 = v417;
          v385 = (_BYTE *)v566;
          v386 = v567;
          if (v566 >= v567)
            goto LABEL_625;
LABEL_587:
          *v385 = 1;
          v387 = v385 + 1;
          v566 = (unint64_t)(v385 + 1);
          v388 = v567;
          if ((unint64_t)(v385 + 1) < v567)
            goto LABEL_588;
LABEL_646:
          v437 = v565;
          v438 = (_BYTE *)(v387 - v565);
          v439 = v387 - v565 + 1;
          if (v439 < 0)
            sub_22316E078();
          v440 = v388 - (_QWORD)v565;
          if (2 * v440 > v439)
            v439 = 2 * v440;
          v208 = v440 >= 0x3FFFFFFFFFFFFFFFLL;
          v441 = 0x7FFFFFFFFFFFFFFFLL;
          if (!v208)
            v441 = v439;
          if (v441)
          {
            *(_DWORD *)v584 = v441;
            if (v569 == -1)
              sub_22316DD70();
            v580[0] = v584;
            v442 = ((uint64_t (*)(void **, _BYTE *))off_24EC5D280[v569])(v580, v568);
          }
          else
          {
            v442 = 0;
            v443 = 0;
          }
          v444 = &v438[v442];
          v438[v442] = 1;
          v445 = (uint64_t)&v438[v442 + 1];
          v446 = (char *)v566;
          v447 = v565;
          v448 = v566 - (_QWORD)v565;
          if ((_BYTE *)v566 != v565)
          {
            if (v448 < 0x20)
              goto LABEL_772;
            if (v437 - &v387[v442] + v566 < 0x20)
              goto LABEL_772;
            v449 = (char *)(v566 - (v448 & 0xFFFFFFFFFFFFFFE0));
            v444 -= v448 & 0xFFFFFFFFFFFFFFE0;
            v450 = &v438[v442 - 16];
            v451 = (__int128 *)(v566 - 16);
            v452 = v448 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v453 = *v451;
              *(v450 - 1) = *(v451 - 1);
              *v450 = v453;
              v450 -= 2;
              v451 -= 2;
              v452 -= 32;
            }
            while (v452);
            v446 = v449;
            if (v448 != (v448 & 0xFFFFFFFFFFFFFFE0))
            {
LABEL_772:
              do
              {
                v454 = *--v446;
                *--v444 = v454;
              }
              while (v446 != v447);
            }
            v446 = v565;
          }
          v565 = v444;
          v566 = (unint64_t)&v438[v442 + 1];
          v455 = v567;
          v567 = v442 + v443;
          if (v446)
          {
            v580[0] = v446;
            LODWORD(v580[1]) = v455 - (_DWORD)v446;
            if (v569 == -1)
              sub_22316DD70();
            *(_QWORD *)v584 = v580;
            ((void (*)(_BYTE *, _BYTE *))off_24EC5D290[v569])(v584, v568);
          }
          v566 = v445;
          v389 = (_BYTE *)v572;
          v390 = v573;
          if (v572 >= v573)
            goto LABEL_667;
LABEL_589:
          *v389 = a5;
          v391 = v389 + 1;
          v572 = (unint64_t)(v389 + 1);
          v392 = v573;
          if ((unint64_t)(v389 + 1) >= v573)
            break;
          goto LABEL_583;
        }
        v393 = 0xAAAAAAAAAAAAAAABLL * (v561 - v560);
        v394 = v393 + 1;
        if (v393 + 1 > 0x1555555555555555)
          sub_22316E078();
        if (0x5555555555555556 * ((uint64_t)(v562 - (_QWORD)v560) >> 2) > v394)
          v394 = 0x5555555555555556 * ((uint64_t)(v562 - (_QWORD)v560) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v562 - (_QWORD)v560) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v395 = 0x1555555555555555;
        else
          v395 = v394;
        if (v395)
        {
          *(_DWORD *)v584 = v395;
          if (v564 == -1)
            sub_22316DD70();
          v580[0] = v584;
          v396 = ((uint64_t (*)(void **, _BYTE *))off_24EC5D2A0[v564])(v580, v563);
        }
        else
        {
          v396 = 0;
          v397 = 0;
        }
        v398 = (_DWORD *)(v396 + 12 * v393);
        *v398 = v378;
        v398[1] = v379;
        v398[2] = v380;
        v399 = v561;
        v400 = v560;
        v401 = v398;
        if (v561 != v560)
        {
          do
          {
            v402 = *(_QWORD *)(v399 - 3);
            v399 -= 3;
            v403 = v399[2];
            *(_QWORD *)(v401 - 3) = v402;
            v401 -= 3;
            v401[2] = v403;
          }
          while (v399 != v400);
          v399 = v560;
        }
        v382 = v398 + 3;
        v560 = v401;
        v561 = v398 + 3;
        v404 = v562;
        v562 = v396 + 12 * v397;
        if (v399)
        {
          v580[0] = v399;
          LODWORD(v580[1]) = -1431655765 * ((v404 - (unint64_t)v399) >> 2);
          if (v564 == -1)
            sub_22316DD70();
          *(_QWORD *)v584 = v580;
          ((void (*)(_BYTE *, _BYTE *))off_24EC5D2B0[v564])(v584, v563);
        }
        v561 = v382;
        v383 = v378 + v526;
        v384 = v562;
        if ((unint64_t)v382 >= v562)
          goto LABEL_608;
LABEL_586:
        *v382 = v380;
        v382[1] = v383;
        v382[2] = v378;
        v561 = v382 + 3;
        v385 = (_BYTE *)v566;
        v386 = v567;
        if (v566 < v567)
          goto LABEL_587;
LABEL_625:
        v419 = v565;
        v420 = (_BYTE *)(v385 - v565);
        v421 = v385 - v565 + 1;
        if (v421 < 0)
          sub_22316E078();
        v422 = v386 - (_QWORD)v565;
        if (2 * v422 > v421)
          v421 = 2 * v422;
        v208 = v422 >= 0x3FFFFFFFFFFFFFFFLL;
        v423 = 0x7FFFFFFFFFFFFFFFLL;
        if (!v208)
          v423 = v421;
        if (v423)
        {
          *(_DWORD *)v584 = v423;
          if (v569 == -1)
            sub_22316DD70();
          v580[0] = v584;
          v424 = ((uint64_t (*)(void **, _BYTE *))off_24EC5D280[v569])(v580, v568);
        }
        else
        {
          v424 = 0;
          v425 = 0;
        }
        v426 = &v420[v424];
        v420[v424] = 1;
        v387 = &v420[v424 + 1];
        v427 = (char *)v566;
        v428 = v565;
        v429 = v566 - (_QWORD)v565;
        if ((_BYTE *)v566 != v565)
        {
          if (v429 < 0x20)
            goto LABEL_773;
          if (v419 - &v385[v424] + v566 < 0x20)
            goto LABEL_773;
          v430 = (char *)(v566 - (v429 & 0xFFFFFFFFFFFFFFE0));
          v426 -= v429 & 0xFFFFFFFFFFFFFFE0;
          v431 = &v420[v424 - 16];
          v432 = (__int128 *)(v566 - 16);
          v433 = v429 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v434 = *v432;
            *(v431 - 1) = *(v432 - 1);
            *v431 = v434;
            v431 -= 2;
            v432 -= 2;
            v433 -= 32;
          }
          while (v433);
          v427 = v430;
          if (v429 != (v429 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_773:
            do
            {
              v435 = *--v427;
              *--v426 = v435;
            }
            while (v427 != v428);
          }
          v427 = v565;
        }
        v565 = v426;
        v566 = (unint64_t)&v420[v424 + 1];
        v436 = v567;
        v567 = v424 + v425;
        if (v427)
        {
          v580[0] = v427;
          LODWORD(v580[1]) = v436 - (_DWORD)v427;
          if (v569 == -1)
            sub_22316DD70();
          *(_QWORD *)v584 = v580;
          ((void (*)(_BYTE *, _BYTE *))off_24EC5D290[v569])(v584, v568);
        }
        v566 = (unint64_t)v387;
        v388 = v567;
        if ((unint64_t)v387 >= v567)
          goto LABEL_646;
LABEL_588:
        *v387 = 1;
        v566 = (unint64_t)(v387 + 1);
        v389 = (_BYTE *)v572;
        v390 = v573;
        if (v572 < v573)
          goto LABEL_589;
LABEL_667:
        v456 = v571;
        v457 = (_BYTE *)(v389 - v571);
        v458 = v389 - v571 + 1;
        if (v458 < 0)
          sub_22316E078();
        v459 = v390 - (_QWORD)v571;
        if (2 * v459 > v458)
          v458 = 2 * v459;
        v208 = v459 >= 0x3FFFFFFFFFFFFFFFLL;
        v460 = 0x7FFFFFFFFFFFFFFFLL;
        if (!v208)
          v460 = v458;
        if (v460)
        {
          *(_DWORD *)v584 = v460;
          if (v575 == -1)
            sub_22316DD70();
          v580[0] = v584;
          v461 = ((uint64_t (*)(void **, _BYTE *))off_24EC5D280[v575])(v580, v574);
        }
        else
        {
          v461 = 0;
          v462 = 0;
        }
        v463 = &v457[v461];
        v457[v461] = a5;
        v391 = &v457[v461 + 1];
        v464 = (char *)v572;
        v465 = v571;
        v466 = v572 - (_QWORD)v571;
        if ((_BYTE *)v572 != v571)
        {
          if (v466 < 0x20)
            goto LABEL_774;
          if (v456 - &v389[v461] + v572 < 0x20)
            goto LABEL_774;
          v467 = (char *)(v572 - (v466 & 0xFFFFFFFFFFFFFFE0));
          v463 -= v466 & 0xFFFFFFFFFFFFFFE0;
          v468 = &v457[v461 - 16];
          v469 = (__int128 *)(v572 - 16);
          v470 = v466 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v471 = *v469;
            *(v468 - 1) = *(v469 - 1);
            *v468 = v471;
            v468 -= 2;
            v469 -= 2;
            v470 -= 32;
          }
          while (v470);
          v464 = v467;
          if (v466 != (v466 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_774:
            do
            {
              v472 = *--v464;
              *--v463 = v472;
            }
            while (v464 != v465);
          }
          v464 = v571;
        }
        v571 = v463;
        v572 = (unint64_t)&v457[v461 + 1];
        v473 = v573;
        v573 = v461 + v462;
        if (v464)
        {
          v580[0] = v464;
          LODWORD(v580[1]) = v473 - (_DWORD)v464;
          if (v575 == -1)
            sub_22316DD70();
          *(_QWORD *)v584 = v580;
          ((void (*)(_BYTE *, _BYTE *))off_24EC5D290[v575])(v584, v574);
        }
        v572 = (unint64_t)v391;
        v392 = v573;
        if ((unint64_t)v391 < v573)
        {
LABEL_583:
          *v391 = a5;
          v572 = (unint64_t)(v391 + 1);
          if (++v376 == v509)
            goto LABEL_581;
          continue;
        }
        break;
      }
      v474 = v571;
      v475 = (_BYTE *)(v391 - v571);
      v476 = v391 - v571 + 1;
      if (v476 < 0)
        sub_22316E078();
      v477 = v392 - (_QWORD)v571;
      if (2 * v477 > v476)
        v476 = 2 * v477;
      v208 = v477 >= 0x3FFFFFFFFFFFFFFFLL;
      v478 = 0x7FFFFFFFFFFFFFFFLL;
      if (!v208)
        v478 = v476;
      if (v478)
      {
        *(_DWORD *)v584 = v478;
        if (v575 == -1)
          sub_22316DD70();
        v580[0] = v584;
        v479 = ((uint64_t (*)(void **, _BYTE *))off_24EC5D280[v575])(v580, v574);
      }
      else
      {
        v479 = 0;
        v480 = 0;
      }
      v481 = &v475[v479];
      v475[v479] = a5;
      v482 = (uint64_t)&v475[v479 + 1];
      v483 = (char *)v572;
      v484 = v571;
      v485 = v572 - (_QWORD)v571;
      if ((_BYTE *)v572 != v571)
      {
        if (v485 < 0x20)
          goto LABEL_775;
        if (v474 - &v391[v479] + v572 < 0x20)
          goto LABEL_775;
        v486 = (char *)(v572 - (v485 & 0xFFFFFFFFFFFFFFE0));
        v481 -= v485 & 0xFFFFFFFFFFFFFFE0;
        v487 = &v475[v479 - 16];
        v488 = (__int128 *)(v572 - 16);
        v489 = v485 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v490 = *v488;
          *(v487 - 1) = *(v488 - 1);
          *v487 = v490;
          v487 -= 2;
          v488 -= 2;
          v489 -= 32;
        }
        while (v489);
        v483 = v486;
        if (v485 != (v485 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_775:
          do
          {
            v491 = *--v483;
            *--v481 = v491;
          }
          while (v483 != v484);
        }
        v483 = v571;
      }
      v571 = v481;
      v572 = (unint64_t)&v475[v479 + 1];
      v492 = v573;
      v573 = v479 + v480;
      if (v483)
      {
        v580[0] = v483;
        LODWORD(v580[1]) = v492 - (_DWORD)v483;
        if (v575 == -1)
          sub_22316DD70();
        *(_QWORD *)v584 = v580;
        ((void (*)(_BYTE *, _BYTE *))off_24EC5D290[v575])(v584, v574);
      }
      v572 = v482;
      if (++v376 != v509)
        continue;
      break;
    }
LABEL_581:
    v375 = v524 + 1;
    if (v524 + 1 != v509)
      continue;
    break;
  }
  sub_22317FD80(v495, (uint64_t)&v555);
  if (v544)
  {
    v545 = (char *)v544;
    operator delete(v544);
  }
  v30 = v520;
  if (v541)
  {
    v542 = (char *)v541;
    operator delete(v541);
  }
LABEL_714:
  if (v527)
    operator delete(v527);
  if (*(_QWORD *)v585)
    operator delete(*(void **)v585);
  if (v30)
    operator delete(v30);
  return sub_22316F8F4((uint64_t *)&v555);
}

void sub_223983908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48)
{
  uint64_t v48;

  if (*(_BYTE *)(v48 - 200) && *(char *)(v48 - 201) < 0)
    operator delete(*(void **)(v48 - 224));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a33);
  if (a47 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a48);
  operator delete(a27);
  sub_22316F8F4((uint64_t *)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_223983C84(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCA78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCA78))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.vlm");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCA70);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCA78);
  }
  *a1 = qword_2540CCA70;
}

void sub_223983D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCA78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCA78);
  _Unwind_Resume(a1);
}

uint64_t sub_223983D78(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t *a4, __n128 a5, float32x4_t a6, float32x4_t a7)
{
  float v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x2_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x2_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x2_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unsigned int *v52;
  int v53;
  unint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x2_t v62;
  float v63;
  unsigned int *v64;
  uint64_t v65;
  float32x2_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float32x2_t v76;
  float v77;
  unsigned int *v78;
  uint64_t v79;
  float32x2_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 *v85;
  __n128 *v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  _BYTE *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  int v99;
  unint64_t v100;
  unsigned int *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float32x2_t v108;
  float v109;
  unsigned int *v110;
  uint64_t v111;
  float32x2_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  char *v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  int v121;
  int v122;
  float *v123;
  _BOOL4 v124;
  int v125;
  unsigned int *v126;
  unsigned int *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  int64_t v136;
  unsigned int *v137;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  float32x2_t v144;
  unsigned int *v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float32x2_t v154;
  float v155;
  unsigned int *v156;
  uint64_t v157;
  float32x2_t v158;
  void *v159;
  _DWORD *v160;
  unint64_t v161;
  int v162;
  BOOL v163;
  void *__p;
  void *v167;
  uint64_t v168;
  int v169;
  uint64_t v171;
  unsigned int *v172;
  uint64_t v173;
  unsigned int v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _DWORD v179[33];
  unsigned int *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;

  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24))
    return 0xFFFFFFFFLL;
  if (!a3)
    return 0;
  v8 = a5.n128_f32[0];
  v10 = a1;
  if (a3 == -1)
  {
    __p = 0;
    v167 = 0;
  }
  else
  {
    v12 = 4 * (a3 + 1);
    v13 = operator new(v12);
    memset(v13, 255, v12);
    v167 = v13;
    __p = operator new(v12);
    memset_pattern16(__p, &unk_2246566A0, v12);
    v10 = a1;
  }
  v14 = 0;
  v175 = 0;
  v177 = a2;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v180 = 0;
  v181 = 0;
  v178 = a3;
  v182 = 0;
  v183 = a2;
  v184 = v10;
  v179[0] = 0;
  do
  {
    v169 = v17;
    v18 = v179[v17];
    v19 = *(_QWORD *)(v10 + 40);
    v168 = v19 + 24 * v18;
    v20 = *(_DWORD *)(v168 + 12);
    v173 = v19;
    v174 = v18;
    if (v20 != -1)
    {
      v21 = v19 + 24 * v18;
      v23 = *(_DWORD *)(v21 + 8);
      v22 = (unsigned int *)(v21 + 8);
      if (v23)
      {
        v24 = 0;
        v26 = v183;
        v25 = v184;
        v171 = v184;
        v172 = v22;
        while (1)
        {
          v27 = *(_QWORD *)(v10 + 16);
          v28 = v27 + 16 * v20;
          a5.n128_u64[0] = *(_QWORD *)v28;
          a5.n128_u32[2] = *(_DWORD *)(v28 + 8);
          a6.i64[0] = *(_QWORD *)a2;
          a6.i32[2] = *(_DWORD *)(a2 + 8);
          a7 = vsubq_f32((float32x4_t)a5, a6);
          v29 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
          v30 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v29, v29).f32[0];
          if (v30 > (float)(v8 * v8))
            goto LABEL_16;
          v31 = v16 - v15;
          v32 = (v16 - v15) >> 2;
          if (v32 >= v178)
          {
            v34 = *(unsigned int *)v15;
            v35 = v27 + 16 * v34;
            a7.i64[0] = *(_QWORD *)v35;
            a7.i32[2] = *(_DWORD *)(v35 + 8);
            a6 = vsubq_f32(a7, a6);
            v36 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
            if (v30 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v36, v36).f32[0])goto LABEL_88;
            if (v31 < 5)
              goto LABEL_54;
            v37 = 0;
            v38 = v15;
            do
            {
              v39 = &v38[4 * v37 + 4];
              v40 = (2 * v37) | 1;
              v41 = 2 * v37 + 2;
              if (v41 < v32)
              {
                v42 = *(_QWORD *)(v25 + 16);
                v43 = v42 + 16 * *(unsigned int *)v39;
                a5.n128_u64[0] = *(_QWORD *)v43;
                a5.n128_u32[2] = *(_DWORD *)(v43 + 8);
                a6.i64[0] = *(_QWORD *)v26;
                a6.i32[2] = *(_DWORD *)(v26 + 8);
                a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
                v44 = v42 + 16 * *((unsigned int *)v39 + 1);
                a7.i64[0] = *(_QWORD *)v44;
                a7.i32[2] = *(_DWORD *)(v44 + 8);
                a6 = vsubq_f32(a7, a6);
                v45 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
                a7 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                if (vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v45, v45).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0])
                {
                  v39 += 4;
                  v40 = v41;
                }
              }
              *(_DWORD *)v38 = *(_DWORD *)v39;
              v38 = v39;
              v37 = v40;
            }
            while (v40 <= (uint64_t)((unint64_t)(v32 - 2) >> 1));
            v67 = v16 - 4;
            if (v39 == v16 - 4)
            {
              *(_DWORD *)v39 = v34;
              v81 = v16 - 4;
              v181 = v16 - 4;
              if ((unint64_t)(v16 - 4) < v175)
                goto LABEL_55;
            }
            else
            {
              *(_DWORD *)v39 = *(_DWORD *)v67;
              *(_DWORD *)v67 = v34;
              v68 = v39 - v15 + 4;
              if (v68 >= 5)
              {
                v69 = (((unint64_t)v68 >> 2) - 2) >> 1;
                v70 = (unsigned int *)&v15[4 * v69];
                v71 = *v70;
                v72 = *(unsigned int *)v39;
                v73 = *(_QWORD *)(v25 + 16);
                v74 = v73 + 16 * v71;
                a5.n128_u64[0] = *(_QWORD *)v74;
                a5.n128_u32[2] = *(_DWORD *)(v74 + 8);
                a6.i64[0] = *(_QWORD *)v26;
                a6.i32[2] = *(_DWORD *)(v26 + 8);
                a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
                v75 = v73 + 16 * v72;
                a7.i64[0] = *(_QWORD *)v75;
                a7.i32[2] = *(_DWORD *)(v75 + 8);
                a6 = vsubq_f32(a7, a6);
                v76 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
                v77 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v76, v76).f32[0];
                a7 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                if (v77 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0])
                {
                  do
                  {
                    v78 = v70;
                    *(_DWORD *)v39 = v71;
                    if (!v69)
                      break;
                    v69 = (v69 - 1) >> 1;
                    v70 = (unsigned int *)&v15[4 * v69];
                    v71 = *v70;
                    v79 = v73 + 16 * v71;
                    a5.n128_u64[0] = *(_QWORD *)v79;
                    a5.n128_u32[2] = *(_DWORD *)(v79 + 8);
                    a6.i64[0] = *(_QWORD *)v26;
                    a6.i32[2] = *(_DWORD *)(v26 + 8);
                    a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
                    a7.i64[0] = *(_QWORD *)v75;
                    a7.i32[2] = *(_DWORD *)(v75 + 8);
                    a6 = vsubq_f32(a7, a6);
                    v80 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
                    a7 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                    v39 = (char *)v78;
                  }
                  while (vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v80, v80).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0]);
                  *v78 = v72;
                }
              }
LABEL_54:
              v81 = v16 - 4;
              v181 = v16 - 4;
              if ((unint64_t)(v16 - 4) < v175)
              {
LABEL_55:
                *(_DWORD *)v81 = v20;
                v181 = v16;
                if (v31 >= 5)
                  goto LABEL_83;
                goto LABEL_88;
              }
            }
            v88 = v81 - v15;
            v89 = (v81 - v15) >> 2;
            v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 62)
              sub_22316E078();
            if ((uint64_t)(v175 - (_QWORD)v15) >> 1 > v90)
              v90 = (uint64_t)(v175 - (_QWORD)v15) >> 1;
            if (v175 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
              v91 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v91 = v90;
            if (v91)
            {
              v176 = v16 - v15;
              if (v91 >> 62)
                sub_223174E94();
              v92 = v16;
              v93 = v91;
              v94 = operator new(4 * v91);
              v91 = v93;
              v16 = v92;
              v89 = (v81 - v15) >> 2;
              v88 = v81 - v15;
              v31 = v176;
              v95 = &v94[4 * v89];
              *(_DWORD *)v95 = v20;
              v96 = (uint64_t)(v95 + 4);
              if (v81 != v15)
              {
LABEL_76:
                v97 = v31 - 8;
                if ((unint64_t)(v31 - 8) < 0xBC
                  || (v113 = (v16 - 8 - v15) & 0xFFFFFFFFFFFFFFFCLL, &v94[v88 - 4 - v113] > &v94[v88 - 4])
                  || &v16[-v113 - 8] > v16 - 8)
                {
                  v98 = (char *)v96;
                }
                else
                {
                  v98 = (char *)v96;
                  if ((unint64_t)(v16 - v94 - v88 - 4) >= 0x20)
                  {
                    v114 = (v97 >> 2) + 1;
                    v115 = 4 * (v114 & 0x7FFFFFFFFFFFFFF8);
                    v81 -= v115;
                    v95 -= v115;
                    v116 = &v94[4 * v89 - 16];
                    v117 = v16 - 36;
                    v118 = v114 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v120 = *(_OWORD *)v117;
                      v119 = *((_OWORD *)v117 + 1);
                      v117 -= 32;
                      *(v116 - 1) = v120;
                      *v116 = v119;
                      v116 -= 2;
                      v118 -= 8;
                    }
                    while (v118);
                    if (v114 == (v114 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_82:
                      v14 = &v94[4 * v91];
                      v180 = (unsigned int *)v95;
                      v182 = v14;
                      operator delete(v15);
                      v16 = v98;
                      v31 = v98 - v95;
                      v175 = (unint64_t)v14;
                      v15 = v95;
                      v10 = a1;
                      v25 = v171;
                      v22 = v172;
                      v181 = v16;
                      if (v31 >= 5)
                      {
LABEL_83:
                        v100 = (((unint64_t)v31 >> 2) - 2) >> 1;
                        v101 = (unsigned int *)&v15[4 * v100];
                        v102 = *v101;
                        v104 = v16 - 4;
                        v103 = *((unsigned int *)v16 - 1);
                        v105 = *(_QWORD *)(v25 + 16);
                        v106 = v105 + 16 * v102;
                        a5.n128_u64[0] = *(_QWORD *)v106;
                        a5.n128_u32[2] = *(_DWORD *)(v106 + 8);
                        a6.i64[0] = *(_QWORD *)v26;
                        a6.i32[2] = *(_DWORD *)(v26 + 8);
                        a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
                        v107 = v105 + 16 * v103;
                        a7.i64[0] = *(_QWORD *)v107;
                        a7.i32[2] = *(_DWORD *)(v107 + 8);
                        a6 = vsubq_f32(a7, a6);
                        v108 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
                        v109 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v108, v108).f32[0];
                        a7 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                        if (v109 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0])
                        {
                          a2 = v177;
                          do
                          {
                            v110 = v101;
                            *(_DWORD *)v104 = v102;
                            if (!v100)
                              break;
                            v100 = (v100 - 1) >> 1;
                            v101 = (unsigned int *)&v15[4 * v100];
                            v102 = *v101;
                            v111 = v105 + 16 * v102;
                            a5.n128_u64[0] = *(_QWORD *)v111;
                            a5.n128_u32[2] = *(_DWORD *)(v111 + 8);
                            a6.i64[0] = *(_QWORD *)v26;
                            a6.i32[2] = *(_DWORD *)(v26 + 8);
                            a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
                            a7.i64[0] = *(_QWORD *)v107;
                            a7.i32[2] = *(_DWORD *)(v107 + 8);
                            a6 = vsubq_f32(a7, a6);
                            v112 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
                            a7 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                            v104 = (char *)v110;
                          }
                          while (vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v112, v112).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0]);
                          *v110 = v103;
                          goto LABEL_16;
                        }
                      }
LABEL_88:
                      a2 = v177;
                      goto LABEL_16;
                    }
                  }
                }
                do
                {
                  v99 = *((_DWORD *)v81 - 1);
                  v81 -= 4;
                  *((_DWORD *)v95 - 1) = v99;
                  v95 -= 4;
                }
                while (v81 != v15);
                goto LABEL_82;
              }
            }
            else
            {
              v94 = 0;
              v95 = (char *)(4 * v89);
              *(_DWORD *)(4 * v89) = v20;
              v96 = 4 * v89 + 4;
              if (v81 != v15)
                goto LABEL_76;
            }
            v98 = (char *)v96;
            goto LABEL_82;
          }
          if (v16 < v14)
          {
            *(_DWORD *)v16 = v20;
            v16 += 4;
            a2 = v177;
            v181 = v16;
            v33 = v16 - v15;
            if (v16 - v15 >= 5)
              goto LABEL_44;
            goto LABEL_15;
          }
          if ((v14 - v15) >> 1 <= (unint64_t)(v32 + 1))
            v46 = v32 + 1;
          else
            v46 = (v14 - v15) >> 1;
          if ((unint64_t)(v14 - v15) >= 0x7FFFFFFFFFFFFFFCLL)
            v47 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v47 = v46;
          if (v47 >> 62)
            sub_223174E94();
          v48 = operator new(4 * v47);
          v49 = &v48[4 * v32];
          *(_DWORD *)v49 = v20;
          v50 = v49 + 4;
          if (v16 != v15)
            break;
          a2 = v177;
          v14 = &v48[4 * v47];
          v180 = (unsigned int *)&v48[4 * v32];
          v182 = v14;
          if (v15)
            goto LABEL_42;
LABEL_43:
          v15 = v49;
          v16 = v50;
          v10 = a1;
          v25 = v171;
          v22 = v172;
          v181 = v50;
          v33 = v50 - v15;
          if (v50 - v15 >= 5)
          {
LABEL_44:
            v54 = ((v33 >> 2) - 2) >> 1;
            v55 = (unsigned int *)&v15[4 * v54];
            v56 = *v55;
            v58 = v16 - 4;
            v57 = *((unsigned int *)v16 - 1);
            v59 = *(_QWORD *)(v25 + 16);
            v60 = v59 + 16 * v56;
            a5.n128_u64[0] = *(_QWORD *)v60;
            a5.n128_u32[2] = *(_DWORD *)(v60 + 8);
            a6.i64[0] = *(_QWORD *)v26;
            a6.i32[2] = *(_DWORD *)(v26 + 8);
            a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
            v61 = v59 + 16 * v57;
            a7.i64[0] = *(_QWORD *)v61;
            a7.i32[2] = *(_DWORD *)(v61 + 8);
            a6 = vsubq_f32(a7, a6);
            v62 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
            v63 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v62, v62).f32[0];
            a7 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
            if (v63 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0])
            {
              do
              {
                v64 = v55;
                *(_DWORD *)v58 = v56;
                if (!v54)
                  break;
                v54 = (v54 - 1) >> 1;
                v55 = (unsigned int *)&v15[4 * v54];
                v56 = *v55;
                v65 = v59 + 16 * v56;
                a5.n128_u64[0] = *(_QWORD *)v65;
                a5.n128_u32[2] = *(_DWORD *)(v65 + 8);
                a6.i64[0] = *(_QWORD *)v26;
                a6.i32[2] = *(_DWORD *)(v26 + 8);
                a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
                a7.i64[0] = *(_QWORD *)v61;
                a7.i32[2] = *(_DWORD *)(v61 + 8);
                a6 = vsubq_f32(a7, a6);
                v66 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
                a7 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                v58 = (char *)v64;
              }
              while (vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v66, v66).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0]);
              *v64 = v57;
            }
          }
LABEL_15:
          v175 = (unint64_t)v14;
LABEL_16:
          ++v24;
          ++v20;
          if (v24 >= *v22)
            goto LABEL_96;
        }
        v51 = v16 - v15 - 4;
        if (v51 < 0xBC
          || (v82 = (v16 - 4 - v15) & 0xFFFFFFFFFFFFFFFCLL, &v48[v31 - 4 - v82] > &v48[v31 - 4])
          || &v16[-v82 - 4] > v16 - 4
          || (unint64_t)(v15 - v48) < 0x20)
        {
          v52 = (unsigned int *)v16;
          a2 = v177;
        }
        else
        {
          v83 = (v51 >> 2) + 1;
          v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
          v52 = (unsigned int *)&v16[-v84];
          v49 -= v84;
          v85 = (__n128 *)&v48[4 * v32 - 16];
          v86 = (__n128 *)(v16 - 16);
          v87 = v83 & 0x7FFFFFFFFFFFFFF8;
          a2 = v177;
          do
          {
            a6 = (float32x4_t)v86[-1];
            a5 = *v86;
            v85[-1] = (__n128)a6;
            *v85 = a5;
            v85 -= 2;
            v86 -= 2;
            v87 -= 8;
          }
          while (v87);
          if (v83 == (v83 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_41:
            v14 = &v48[4 * v47];
            v180 = (unsigned int *)v49;
            v182 = v14;
            if (!v15)
              goto LABEL_43;
LABEL_42:
            operator delete(v15);
            goto LABEL_43;
          }
        }
        do
        {
          v53 = *--v52;
          *((_DWORD *)v49 - 1) = v53;
          v49 -= 4;
        }
        while (v52 != (unsigned int *)v15);
        goto LABEL_41;
      }
    }
LABEL_96:
    v121 = v169 - 1;
    v122 = *(_DWORD *)(v173 + 24 * v174 + 16);
    if (v122 == -1)
    {
      v123 = (float *)v168;
    }
    else
    {
      v123 = (float *)v168;
      if ((float)(*(float *)(a2 + 4 * *(unsigned __int8 *)(v173 + 24 * v174 + 4)) - v8) <= *(float *)v168)
      {
        v179[v169] = v122;
        if (v169 >= 34)
        {
          v124 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/NearestNeighbor3D.hpp", 206, (uint64_t)"top <= kMaxNodes", 16, (uint64_t)"Stack size can't be more than 32", 32, (void (*)(void **))sub_22457406C);
          v121 = v169;
          if (v124)
            goto LABEL_106;
        }
        else
        {
          v121 = v169;
        }
      }
    }
    v125 = *(_DWORD *)(v173 + 24 * v174 + 20);
    if (v125 == -1 || (float)(*(float *)(a2 + 4 * *(unsigned __int8 *)(v173 + 24 * v174 + 4)) + v8) < *v123)
    {
      v17 = v121;
    }
    else
    {
      v17 = v121 + 1;
      v179[v121 + 1] = v125;
      if (v121 >= 33
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/NearestNeighbor3D.hpp", 211, (uint64_t)"top <= kMaxNodes", 16, (uint64_t)"Stack size can't be more than 32", 32, (void (*)(void **))sub_22457406C))
      {
LABEL_106:
        abort();
      }
    }
  }
  while (v17 != -1);
  v126 = v180;
  v127 = (unsigned int *)v181;
  if (v180 == (unsigned int *)v181)
  {
    v11 = 0;
    v159 = v167;
    if (v180)
      goto LABEL_130;
  }
  else
  {
    LODWORD(v11) = 0;
    v128 = *a4;
    v129 = *(_QWORD *)(v10 + 16);
    v130 = v183;
    v131 = v184;
    do
    {
      *(_DWORD *)(v128 + 4 * v11) = *(_DWORD *)(v129 + 16 * *v126 + 12);
      v132 = (char *)v127 - (char *)v126;
      if ((char *)v127 - (char *)v126 >= 5)
      {
        v133 = 0;
        v134 = v132 >> 2;
        v135 = *v126;
        v136 = (unint64_t)((v132 >> 2) - 2) >> 1;
        v137 = v126;
        do
        {
          v138 = &v137[v133 + 1];
          v139 = (2 * v133) | 1;
          v140 = 2 * v133 + 2;
          if (v140 < v134)
          {
            v141 = *(_QWORD *)(v131 + 16);
            v142 = v141 + 16 * *v138;
            a5.n128_u64[0] = *(_QWORD *)v142;
            a5.n128_u32[2] = *(_DWORD *)(v142 + 8);
            a6.i64[0] = *(_QWORD *)v130;
            a6.i32[2] = *(_DWORD *)(v130 + 8);
            a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
            v143 = v141 + 16 * v138[1];
            a7.i64[0] = *(_QWORD *)v143;
            a7.i32[2] = *(_DWORD *)(v143 + 8);
            a6 = vsubq_f32(a7, a6);
            v144 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
            a7 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
            if (vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v144, v144).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0])
            {
              ++v138;
              v139 = v140;
            }
          }
          *v137 = *v138;
          v137 = v138;
          v133 = v139;
        }
        while (v139 <= v136);
        v145 = v127 - 1;
        if (v138 == v127 - 1)
        {
          *v138 = v135;
        }
        else
        {
          *v138 = *v145;
          *v145 = v135;
          v146 = (char *)v138 - (char *)v126 + 4;
          if (v146 >= 5)
          {
            v147 = (((unint64_t)v146 >> 2) - 2) >> 1;
            v148 = &v126[v147];
            v149 = *v148;
            v150 = *v138;
            v151 = *(_QWORD *)(v131 + 16);
            v152 = v151 + 16 * v149;
            a5.n128_u64[0] = *(_QWORD *)v152;
            a5.n128_u32[2] = *(_DWORD *)(v152 + 8);
            a6.i64[0] = *(_QWORD *)v130;
            a6.i32[2] = *(_DWORD *)(v130 + 8);
            a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
            v153 = v151 + 16 * v150;
            a7.i64[0] = *(_QWORD *)v153;
            a7.i32[2] = *(_DWORD *)(v153 + 8);
            a6 = vsubq_f32(a7, a6);
            v154 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
            v155 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v154, v154).f32[0];
            a7 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
            if (v155 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0])
            {
              do
              {
                v156 = v148;
                *v138 = v149;
                if (!v147)
                  break;
                v147 = (v147 - 1) >> 1;
                v148 = &v126[v147];
                v149 = *v148;
                v157 = v151 + 16 * v149;
                a5.n128_u64[0] = *(_QWORD *)v157;
                a5.n128_u32[2] = *(_DWORD *)(v157 + 8);
                a6.i64[0] = *(_QWORD *)v130;
                a6.i32[2] = *(_DWORD *)(v130 + 8);
                a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
                a7.i64[0] = *(_QWORD *)v153;
                a7.i32[2] = *(_DWORD *)(v153 + 8);
                a6 = vsubq_f32(a7, a6);
                v158 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
                a7 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
                v138 = v156;
              }
              while (vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v158, v158).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0]);
              *v156 = v150;
            }
          }
        }
      }
      --v127;
      v11 = (v11 + 1);
    }
    while (v126 != v127);
    v159 = v167;
    if ((_DWORD)v11)
    {
      v160 = (_DWORD *)(v128 + 4 * v11 - 4);
      if ((unint64_t)v160 > v128)
      {
        v161 = v128 + 4;
        do
        {
          v162 = *(_DWORD *)(v161 - 4);
          *(_DWORD *)(v161 - 4) = *v160;
          *v160-- = v162;
          v163 = v161 >= (unint64_t)v160;
          v161 += 4;
        }
        while (!v163);
      }
    }
    if (v126)
LABEL_130:
      operator delete(v126);
  }
  if (__p)
    operator delete(__p);
  if (v159)
    operator delete(v159);
  return v11;
}

void sub_223984ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223984AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
    if (!__p)
    {
LABEL_3:
      if (!a11)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (!__p)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if (!a11)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223984B3C(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  unint64_t v16;
  _QWORD **v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v26;
  int v27;
  _QWORD *v28;

  v4 = *(_QWORD ***)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = v3 - *(_QWORD *)a1;
  v6 = v5 + 1;
  if (v5 + 1 < 0)
    sub_22316E078();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v4;
  if (2 * v8 > v6)
    v6 = 2 * v8;
  if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  if (v6)
  {
    LODWORD(v28) = v6;
    v9 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v9 == -1)
      sub_22316DD70();
    v26 = &v28;
    v10 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC5D280[v9])(&v26, a1 + 24);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = v10 + v5;
  *(_BYTE *)(v10 + v5) = *a2;
  v13 = v10 + v5 + 1;
  v14 = *(_QWORD ***)a1;
  v15 = *(_QWORD ***)(a1 + 8);
  v16 = (unint64_t)v15 - *(_QWORD *)a1;
  if (v15 != *(_QWORD ***)a1)
  {
    if (v16 < 0x20)
      goto LABEL_27;
    if ((_QWORD **)((char *)v15 + (_QWORD)((char *)v4 - v10 - v3)) < (_QWORD **)0x20)
      goto LABEL_27;
    v17 = (_QWORD **)((char *)v15 - (v16 & 0xFFFFFFFFFFFFFFE0));
    v12 -= v16 & 0xFFFFFFFFFFFFFFE0;
    v18 = (_OWORD *)(v5 + v10 - 16);
    v19 = (__int128 *)(v15 - 2);
    v20 = v16 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v21 = *v19;
      *(v18 - 1) = *(v19 - 1);
      *v18 = v21;
      v18 -= 2;
      v19 -= 2;
      v20 -= 32;
    }
    while (v20);
    v15 = v17;
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_27:
      do
      {
        v22 = *((_BYTE *)v15 - 1);
        v15 = (_QWORD **)((char *)v15 - 1);
        *(_BYTE *)--v12 = v22;
      }
      while (v15 != v14);
    }
    v15 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v13;
  v23 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10 + v11;
  if (v15)
  {
    v26 = v15;
    v27 = v23 - (_DWORD)v15;
    v24 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v24 == -1)
      sub_22316DD70();
    v28 = &v26;
    ((void (*)(_QWORD **, uint64_t))off_24EC5D290[v24])(&v28, a1 + 24);
  }
  return v13;
}

uint64_t sub_223984CE0(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  _QWORD *v8;
  uint64_t v9;
  char **v10;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int8 v44;

  if (a2)
  {
    v8 = (_QWORD *)result;
    *(_DWORD *)(result + 8) = a5;
    v10 = (char **)(result + 40);
    v9 = *(_QWORD *)(result + 40);
    v12 = (_DWORD *)(v9 + 24 * a4);
    v12[2] = a2;
    if (*(_DWORD *)result >= a2 || *(_DWORD *)(result + 4) < a5)
    {
      *v12 = 2139095039;
      v13 = v9 + 24 * a4;
      *(_BYTE *)(v13 + 4) = -1;
      *(_DWORD *)(v13 + 12) = a3;
      *(_QWORD *)(v13 + 16) = -1;
      return result;
    }
    v14 = a5 % 3;
    v15 = (char *)(*(_QWORD *)(result + 16) + 16 * a3);
    v43 = a2 >> 1;
    v16 = (unint64_t)&v15[16 * (a2 >> 1)];
    v44 = a5 % 3;
    sub_2239850BC(v15, v16, &v15[16 * a2], &v44);
    *v12 = *(_DWORD *)(v16 + 4 * v14);
    v17 = v9 + 24 * a4;
    *(_BYTE *)(v17 + 4) = v14;
    v18 = (char *)v8[5];
    v19 = (char *)v8[6];
    v20 = (v19 - v18) / 24;
    *(_DWORD *)(v17 + 12) = -1;
    *(_DWORD *)(v17 + 16) = v20;
    *(_DWORD *)(v17 + 20) = v20 + 1;
    v21 = v8[7];
    if ((unint64_t)v19 >= v21)
    {
      v23 = v20 + 1;
      if ((unint64_t)(v20 + 1) > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_43;
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v18) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_44;
        v26 = (char *)operator new(24 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[24 * v20];
      v28 = &v26[24 * v25];
      *(_DWORD *)v27 = 2139095039;
      v27[4] = -1;
      *(_DWORD *)(v27 + 5) = 0;
      *((_DWORD *)v27 + 2) = 0;
      *(_QWORD *)(v27 + 12) = -1;
      *((_DWORD *)v27 + 5) = -1;
      v22 = v27 + 24;
      if (v19 != v18)
      {
        do
        {
          v29 = *(_OWORD *)(v19 - 24);
          *((_QWORD *)v27 - 1) = *((_QWORD *)v19 - 1);
          *(_OWORD *)(v27 - 24) = v29;
          v27 -= 24;
          v19 -= 24;
        }
        while (v19 != v18);
        v19 = *v10;
      }
      v8[5] = v27;
      v8[6] = v22;
      v8[7] = v28;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v19 = 2139095039;
      v19[4] = -1;
      *(_DWORD *)(v19 + 5) = 0;
      *((_DWORD *)v19 + 2) = 0;
      *(_QWORD *)(v19 + 12) = -1;
      *((_DWORD *)v19 + 5) = -1;
      v22 = v19 + 24;
    }
    v8[6] = v22;
    v30 = v8[7];
    if ((unint64_t)v22 < v30)
    {
      *(_DWORD *)v22 = 2139095039;
      v22[4] = -1;
      *(_DWORD *)(v22 + 5) = 0;
      *((_DWORD *)v22 + 2) = 0;
      *(_QWORD *)(v22 + 12) = -1;
      *((_DWORD *)v22 + 5) = -1;
      v31 = v22 + 24;
      v32 = v43;
      goto LABEL_41;
    }
    v33 = *v10;
    v34 = 0xAAAAAAAAAAAAAAABLL * ((v22 - *v10) >> 3);
    v35 = v34 + 1;
    if (v34 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)v33) >> 3);
      if (2 * v36 > v35)
        v35 = 2 * v36;
      if (v36 >= 0x555555555555555)
        v37 = 0xAAAAAAAAAAAAAAALL;
      else
        v37 = v35;
      if (!v37)
      {
        v38 = 0;
        goto LABEL_34;
      }
      if (v37 <= 0xAAAAAAAAAAAAAAALL)
      {
        v38 = (char *)operator new(24 * v37);
LABEL_34:
        v39 = &v38[24 * v34];
        v40 = &v38[24 * v37];
        *(_DWORD *)v39 = 2139095039;
        v39[4] = -1;
        *(_DWORD *)(v39 + 5) = 0;
        *((_DWORD *)v39 + 2) = 0;
        *(_QWORD *)(v39 + 12) = -1;
        *((_DWORD *)v39 + 5) = -1;
        v31 = v39 + 24;
        if (v22 == v33)
        {
          v8[5] = v39;
          v8[6] = v31;
          v8[7] = v40;
          v32 = v43;
        }
        else
        {
          v32 = v43;
          do
          {
            v41 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v39 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v39 - 24) = v41;
            v39 -= 24;
            v22 -= 24;
          }
          while (v22 != v33);
          v22 = (char *)v8[5];
          v8[5] = v39;
          v8[6] = v31;
          v8[7] = v40;
          if (!v22)
            goto LABEL_41;
        }
        operator delete(v22);
LABEL_41:
        v8[6] = v31;
        v42 = a5 + 1;
        sub_223984CE0(v8, v32, a3, v20, v42);
        return sub_223984CE0(v8, a2 - v32, (v32 + a3), (v20 + 1), v42);
      }
LABEL_44:
      sub_223174E94();
    }
LABEL_43:
    sub_22316E078();
  }
  return result;
}

char *sub_2239850BC(char *result, unint64_t a2, char *a3, unsigned __int8 *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  float v10;
  int *v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  float v23;
  char *v24;
  char *v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t *v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  BOOL v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  float v46;
  float v47;
  uint64_t *v48;
  uint64_t v49;
  float v50;
  _DWORD *v51;
  uint64_t v52;
  float v53;
  float *v54;
  float v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;

  if (a3 == (char *)a2)
    return result;
  while (1)
  {
    v4 = (a3 - result) >> 4;
    if (v4 < 2)
      return result;
    if (v4 == 3)
    {
      v51 = result + 16;
      v52 = 4 * *a4;
      v53 = *(float *)&result[v52 + 16];
      v54 = (float *)(a3 - 16);
      v55 = *(float *)&a3[v52 - 16];
      if (v53 >= *(float *)&result[v52])
      {
        if (v55 >= v53)
          return result;
        v64 = *(_QWORD *)v51;
        v65 = *((_DWORD *)result + 6);
        v66 = *((_DWORD *)a3 - 2);
        *(_QWORD *)v51 = *(_QWORD *)v54;
        *((_DWORD *)result + 6) = v66;
        *((_DWORD *)a3 - 2) = v65;
        *(_QWORD *)v54 = v64;
        v58 = result + 28;
        LODWORD(v64) = *((_DWORD *)result + 7);
        *((_DWORD *)result + 7) = *((_DWORD *)a3 - 1);
        *((_DWORD *)a3 - 1) = v64;
        if (*(float *)&v51[*a4] >= *(float *)&result[4 * *a4])
          return result;
        v101 = *((_DWORD *)result + 2);
        v86 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)v51;
        *((_DWORD *)result + 2) = *((_DWORD *)result + 6);
        *(_QWORD *)v51 = v86;
        *((_DWORD *)result + 6) = v101;
        v56 = result + 12;
      }
      else if (v55 >= v53)
      {
        v102 = *((_DWORD *)result + 2);
        v87 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)v51;
        *((_DWORD *)result + 2) = *((_DWORD *)result + 6);
        *(_QWORD *)v51 = v87;
        *((_DWORD *)result + 6) = v102;
        v67 = *((_DWORD *)result + 7);
        result += 28;
        v68 = *((_DWORD *)result - 4);
        *((_DWORD *)result - 4) = v67;
        *(_DWORD *)result = v68;
        if (v54[*a4] >= *(float *)&v51[*a4])
          return result;
        v69 = *(_QWORD *)v51;
        v70 = v51[2];
        v71 = *((_DWORD *)a3 - 2);
        *(_QWORD *)v51 = *(_QWORD *)v54;
        v51[2] = v71;
        *((_DWORD *)a3 - 2) = v70;
        *(_QWORD *)v54 = v69;
        v58 = a3 - 4;
        v56 = result;
      }
      else
      {
        v56 = result + 12;
        v98 = *((_DWORD *)result + 2);
        v83 = *(_QWORD *)result;
        v57 = *(_QWORD *)v54;
        *((_DWORD *)result + 2) = *((_DWORD *)a3 - 2);
        *(_QWORD *)result = v57;
        *((_DWORD *)a3 - 2) = v98;
        *(_QWORD *)v54 = v83;
        v58 = a3 - 4;
      }
LABEL_91:
      v72 = *(_DWORD *)v56;
      *(_DWORD *)v56 = *(_DWORD *)v58;
      *(_DWORD *)v58 = v72;
      return result;
    }
    if (v4 == 2)
    {
      v59 = (uint64_t *)(a3 - 16);
      if (*(float *)&a3[4 * *a4 - 16] >= *(float *)&result[4 * *a4])
        return result;
      v99 = *((_DWORD *)result + 2);
      v84 = *(_QWORD *)result;
      v60 = *v59;
      *((_DWORD *)result + 2) = *((_DWORD *)a3 - 2);
      *(_QWORD *)result = v60;
      *((_DWORD *)a3 - 2) = v99;
      *v59 = v84;
      v56 = result + 12;
      v58 = a3 - 4;
      goto LABEL_91;
    }
    if (a3 - result <= 127)
    {
      if (a3 - 16 == result)
        return result;
      while (1)
      {
        v61 = a3;
        if (result == a3)
          goto LABEL_84;
        v62 = result + 16;
        if (result + 16 != a3)
          break;
LABEL_77:
        result += 16;
        if (result == a3 - 16)
          return result;
      }
      v61 = result;
      do
      {
        if (*(float *)&v62[4 * *a4] < *(float *)&v61[4 * *a4])
          v61 = v62;
        v62 += 16;
      }
      while (v62 != a3);
LABEL_84:
      if (v61 != result)
      {
        v100 = *((_DWORD *)result + 2);
        v85 = *(_QWORD *)result;
        v63 = *(_QWORD *)v61;
        *((_DWORD *)result + 2) = *((_DWORD *)v61 + 2);
        *(_QWORD *)result = v63;
        *((_DWORD *)v61 + 2) = v100;
        *(_QWORD *)v61 = v85;
        LODWORD(v63) = *((_DWORD *)result + 3);
        *((_DWORD *)result + 3) = *((_DWORD *)v61 + 3);
        *((_DWORD *)v61 + 3) = v63;
      }
      goto LABEL_77;
    }
    v5 = v4 >> 1;
    v6 = (unint64_t)&result[16 * (v4 >> 1)];
    v7 = *a4;
    v8 = *(float *)(v6 + 4 * v7);
    v9 = (unint64_t)(a3 - 16);
    v10 = *(float *)&a3[4 * v7 - 16];
    if (v8 < *(float *)&result[4 * v7])
      break;
    if (v10 < v8)
    {
      v89 = *(_DWORD *)(v6 + 8);
      v74 = *(_QWORD *)v6;
      v15 = *(_QWORD *)v9;
      *(_DWORD *)(v6 + 8) = *((_DWORD *)a3 - 2);
      *(_QWORD *)v6 = v15;
      *((_DWORD *)a3 - 2) = v89;
      *(_QWORD *)v9 = v74;
      v16 = &result[16 * v5];
      v17 = *((_DWORD *)v16 + 3);
      v13 = v16 + 12;
      *(_DWORD *)v13 = *((_DWORD *)a3 - 1);
      *((_DWORD *)a3 - 1) = v17;
      v7 = *a4;
      v8 = *(float *)(v6 + 4 * v7);
      if (v8 >= *(float *)&result[4 * v7])
        goto LABEL_21;
      v90 = *((_DWORD *)result + 2);
      v75 = *(_QWORD *)result;
      v18 = *(_QWORD *)v6;
      *((_DWORD *)result + 2) = *(_DWORD *)(v6 + 8);
      *(_QWORD *)result = v18;
      *(_DWORD *)(v6 + 8) = v90;
      *(_QWORD *)v6 = v75;
      v11 = (int *)(result + 12);
LABEL_14:
      v14 = 2;
LABEL_15:
      v22 = *v11;
      *v11 = *(_DWORD *)v13;
      *(_DWORD *)v13 = v22;
      v7 = *a4;
      v8 = *(float *)(v6 + 4 * v7);
      v23 = *(float *)&result[4 * v7];
      if (v23 < v8)
        goto LABEL_16;
      goto LABEL_22;
    }
    v14 = 0;
    v23 = *(float *)&result[4 * v7];
    if (v23 < v8)
      goto LABEL_16;
LABEL_22:
    v25 = a3 - 32;
    while (v25 != result)
    {
      v26 = *(float *)&v25[4 * v7];
      v25 -= 16;
      if (v26 < v8)
      {
        v93 = *((_DWORD *)result + 2);
        v78 = *(_QWORD *)result;
        v28 = *((_QWORD *)v25 + 2);
        v27 = (unint64_t)(v25 + 16);
        *((_DWORD *)result + 2) = *(_DWORD *)(v27 + 8);
        *(_QWORD *)result = v28;
        *(_DWORD *)(v27 + 8) = v93;
        *(_QWORD *)v27 = v78;
        v29 = *((_DWORD *)result + 3);
        *((_DWORD *)result + 3) = *(_DWORD *)(v27 + 12);
        *(_DWORD *)(v27 + 12) = v29;
        ++v14;
        v9 = v27;
        v24 = result + 16;
        if ((unint64_t)(result + 16) >= v27)
          goto LABEL_17;
        goto LABEL_26;
      }
    }
    v40 = result + 16;
    if (v23 >= *(float *)(v9 + 4 * v7))
    {
      if (v40 == (_DWORD *)v9)
        return result;
      while (v23 >= *(float *)&v40[v7])
      {
        v40 += 4;
        if (v40 == (_DWORD *)v9)
          return result;
      }
      v96 = v40[2];
      v81 = *(_QWORD *)v40;
      v42 = *(_QWORD *)v9;
      v40[2] = *((_DWORD *)a3 - 2);
      *(_QWORD *)v40 = v42;
      *((_DWORD *)a3 - 2) = v96;
      *(_QWORD *)v9 = v81;
      LODWORD(v42) = v40[3];
      v40[3] = *((_DWORD *)a3 - 1);
      *((_DWORD *)a3 - 1) = v42;
      v40 += 4;
    }
    if (v40 == (_DWORD *)v9)
      return result;
    while (1)
    {
      v45 = *a4;
      v46 = *(float *)&result[4 * v45];
      do
      {
        v47 = *(float *)&v40[v45];
        v40 += 4;
      }
      while (v46 >= v47);
      v48 = (uint64_t *)(v40 - 4);
      v49 = 4 * v45 - 16;
      do
      {
        v50 = *(float *)(v9 + v49);
        v9 -= 16;
      }
      while (v46 < v50);
      if ((unint64_t)v48 >= v9)
        break;
      v97 = *(v40 - 2);
      v82 = *v48;
      v43 = *(_QWORD *)v9;
      *(v40 - 2) = *(_DWORD *)(v9 + 8);
      *v48 = v43;
      *(_DWORD *)(v9 + 8) = v97;
      *(_QWORD *)v9 = v82;
      v44 = *(v40 - 1);
      *(v40 - 1) = *(_DWORD *)(v9 + 12);
      *(_DWORD *)(v9 + 12) = v44;
    }
    result = (char *)(v40 - 4);
    if ((unint64_t)v48 > a2)
      return result;
LABEL_68:
    if (a3 == (char *)a2)
      return result;
  }
  if (v10 < v8)
  {
    v11 = (int *)(result + 12);
    v88 = *((_DWORD *)result + 2);
    v73 = *(_QWORD *)result;
    v12 = *(_QWORD *)v9;
    *((_DWORD *)result + 2) = *((_DWORD *)a3 - 2);
    *(_QWORD *)result = v12;
    *((_DWORD *)a3 - 2) = v88;
    *(_QWORD *)v9 = v73;
    v13 = a3 - 4;
    v14 = 1;
    goto LABEL_15;
  }
  v91 = *((_DWORD *)result + 2);
  v76 = *(_QWORD *)result;
  v19 = *(_QWORD *)v6;
  *((_DWORD *)result + 2) = *(_DWORD *)(v6 + 8);
  *(_QWORD *)result = v19;
  *(_DWORD *)(v6 + 8) = v91;
  v20 = *((_DWORD *)result + 3);
  *(_QWORD *)v6 = v76;
  v11 = (int *)&result[16 * v5 + 12];
  *((_DWORD *)result + 3) = *v11;
  *v11 = v20;
  v7 = *a4;
  v8 = *(float *)(v6 + 4 * v7);
  if (*(float *)(v9 + 4 * v7) < v8)
  {
    v92 = *(_DWORD *)(v6 + 8);
    v77 = *(_QWORD *)v6;
    v21 = *(_QWORD *)v9;
    *(_DWORD *)(v6 + 8) = *((_DWORD *)a3 - 2);
    *(_QWORD *)v6 = v21;
    *((_DWORD *)a3 - 2) = v92;
    *(_QWORD *)v9 = v77;
    v13 = a3 - 4;
    goto LABEL_14;
  }
LABEL_21:
  v14 = 1;
  v23 = *(float *)&result[4 * v7];
  if (v23 >= v8)
    goto LABEL_22;
LABEL_16:
  v24 = result + 16;
  if ((unint64_t)(result + 16) < v9)
  {
LABEL_26:
    while (1)
    {
      v30 = *a4;
      v31 = *(float *)(v6 + 4 * v30);
      do
      {
        v32 = *(float *)&v24[4 * v30];
        v24 += 16;
      }
      while (v32 < v31);
      v33 = (uint64_t *)(v24 - 16);
      v34 = 4 * v30 - 16;
      do
      {
        v35 = *(float *)(v9 + v34);
        v9 -= 16;
      }
      while (v35 >= v31);
      if ((unint64_t)v33 >= v9)
        break;
      v94 = *((_DWORD *)v24 - 2);
      v79 = *v33;
      v36 = *(_QWORD *)v9;
      *((_DWORD *)v24 - 2) = *(_DWORD *)(v9 + 8);
      *v33 = v36;
      *(_DWORD *)(v9 + 8) = v94;
      *(_QWORD *)v9 = v79;
      LODWORD(v36) = *((_DWORD *)v24 - 1);
      *((_DWORD *)v24 - 1) = *(_DWORD *)(v9 + 12);
      *(_DWORD *)(v9 + 12) = v36;
      ++v14;
      if (v33 == (uint64_t *)v6)
        v6 = v9;
    }
    v24 -= 16;
    if (v33 != (uint64_t *)v6)
      goto LABEL_35;
  }
  else
  {
LABEL_17:
    if (v24 == (char *)v6)
      goto LABEL_37;
LABEL_35:
    if (*(float *)(v6 + 4 * *a4) < *(float *)&v24[4 * *a4])
    {
      v95 = *((_DWORD *)v24 + 2);
      v80 = *(_QWORD *)v24;
      v37 = *(_QWORD *)v6;
      *((_DWORD *)v24 + 2) = *(_DWORD *)(v6 + 8);
      *(_QWORD *)v24 = v37;
      *(_DWORD *)(v6 + 8) = v95;
      *(_QWORD *)v6 = v80;
      LODWORD(v37) = *((_DWORD *)v24 + 3);
      *((_DWORD *)v24 + 3) = *(_DWORD *)(v6 + 12);
      *(_DWORD *)(v6 + 12) = v37;
      ++v14;
    }
  }
LABEL_37:
  if (v24 == (char *)a2)
    return result;
  if (v14)
  {
LABEL_39:
    if ((unint64_t)v24 <= a2)
      result = v24 + 16;
    else
      a3 = v24;
    goto LABEL_68;
  }
  if ((unint64_t)v24 <= a2)
  {
    v41 = v24;
    while (v41 + 16 != a3)
    {
      v39 = *(float *)&v41[4 * *a4 + 16] < *(float *)&v41[4 * *a4];
      v41 += 16;
      if (v39)
        goto LABEL_39;
    }
  }
  else
  {
    v38 = result;
    while (v38 + 16 != v24)
    {
      v39 = *(float *)&v38[4 * *a4 + 16] < *(float *)&v38[4 * *a4];
      v38 += 16;
      if (v39)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t sub_223985894(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  void *v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  int v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _QWORD v68[3];
  int v69;
  const char *v70;
  int v71;
  const char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void *object;
  void *v77[2];
  __int128 v78;
  void *__p[2];
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;

  *(_QWORD *)a1 = &off_24EC5D2F0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = (_QWORD *)(a1 + 56);
  v6 = (_QWORD *)sub_22351A5C4(a1 + 56, 1838716844);
  v7 = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = xmmword_2246566C0;
  *(int32x2_t *)(a1 + 152) = vdup_n_s32(0x7FFFFFFEu);
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 388) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  sub_223919C2C(v6, (int *)(a1 + 136));
  sub_223919C2C(v5, (int *)(a1 + 148));
  sub_22398615C(&v75);
  if (**(int **)(v75 + 56) > 3)
    return a1;
  v8 = *(unsigned __int8 *)(v75 + 72);
  v9 = sub_22322F254(v75, "OSLogSurrogateAppender", 1, 0);
  v10 = v9;
  if (!v8 && !v9)
    return a1;
  v67 = v8;
  v68[0] = &v75;
  v68[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v68[2] = std::chrono::system_clock::now().__d_.__rep_;
  v69 = 3;
  v70 = "unknown file";
  v71 = 65;
  v73 = 0;
  v74 = 0;
  v72 = "unknown function";
  v66 = v75;
  if (*(char *)(v75 + 39) < 0)
  {
    v12 = *(const char **)(v75 + 16);
    v11 = *(_QWORD *)(v75 + 24);
    v65 = v75 + 16;
    v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v14 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v75 + 39);
    v12 = (const char *)(v75 + 16);
    v65 = v75 + 16;
    v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v13 & 1) != 0)
      goto LABEL_8;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v78 && SHIBYTE(v77[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_8:
  if (byte_255788F57 >= 0)
    v15 = (const char *)&xmmword_255788F40;
  else
    v15 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v16 = byte_255788F57;
  else
    v16 = *((_QWORD *)&xmmword_255788F40 + 1);
  object = os_log_create(v15, v12);
  v17 = v77;
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 >= 0x17)
  {
    v18 = v10;
    v19 = v12;
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v17 = operator new(v20 + 1);
    v77[1] = (void *)v16;
    *(_QWORD *)&v78 = v21 | 0x8000000000000000;
    v77[0] = v17;
    v12 = v19;
    v10 = v18;
    goto LABEL_21;
  }
  BYTE7(v78) = v16;
  if (v16)
LABEL_21:
    memmove(v17, v15, v16);
  *((_BYTE *)v17 + v16) = 0;
  BYTE8(v78) = 1;
  v22 = __p;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v11 >= 0x17)
  {
    v24 = v10;
    v25 = v12;
    v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v26 = v11 | 7;
    v27 = v26 + 1;
    v22 = operator new(v26 + 1);
    __p[1] = (void *)v11;
    v80 = v27 | 0x8000000000000000;
    __p[0] = v22;
    v12 = v25;
    v10 = v24;
  }
  else
  {
    HIBYTE(v80) = v11;
    if (!v11)
    {
      LOBYTE(__p[0]) = 0;
      v81 = 1;
      v23 = object;
      if ((SHIBYTE(v80) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_32;
    }
  }
  memmove(v22, v12, v11);
  *((_BYTE *)v22 + v11) = 0;
  v81 = 1;
  v23 = object;
  if ((SHIBYTE(v80) & 0x80000000) == 0)
  {
LABEL_26:
    if (!BYTE8(v78))
      goto LABEL_35;
LABEL_33:
    if (SBYTE7(v78) < 0)
      operator delete(v77[0]);
    goto LABEL_35;
  }
LABEL_32:
  operator delete(__p[0]);
  if (BYTE8(v78))
    goto LABEL_33;
LABEL_35:
  if (object)
    os_release(object);
  if (v10 && *(_QWORD *)(v10 + 24))
  {
    v28 = _os_log_pack_size();
    v29 = (std::__shared_weak_count_vtbl *)operator new(v28, (std::align_val_t)8uLL);
    v30 = (std::__shared_weak_count *)operator new();
    v31 = v30;
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v30->__shared_weak_owners_ = 0;
    v30[1].__vftable = v29;
    object = v29;
    v77[0] = v29;
    v77[1] = v30;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    v78 = 0uLL;
    __p[0] = 0;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v31);
    }
    v35 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v36 = operator new();
    v37 = *(unsigned __int8 *)(v66 + 39);
    v38 = v65;
    if ((v37 & 0x80u) != 0)
    {
      v38 = *(_QWORD *)(v66 + 16);
      v37 = *(_QWORD *)(v66 + 24);
    }
    *(_QWORD *)v36 = v35;
    *(_OWORD *)(v36 + 8) = *(_OWORD *)v77;
    v77[0] = 0;
    v77[1] = 0;
    *(_OWORD *)(v36 + 24) = v78;
    v78 = 0uLL;
    *(_QWORD *)(v36 + 40) = v38;
    *(_QWORD *)(v36 + 48) = v37;
    *(_BYTE *)(v36 + 56) = 1;
    v82 = 0;
    v83 = v36;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), &v83);
    v39 = v83;
    v83 = 0;
    if (v39)
    {
      v40 = *(std::__shared_weak_count **)(v39 + 32);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = *(std::__shared_weak_count **)(v39 + 16);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      MEMORY[0x227684CE8](v39, 0x10F0C40B62ED6C6);
      v46 = v82;
      v82 = 0;
      if (v46)
      {
        v47 = *(std::__shared_weak_count **)(v46 + 32);
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = *(std::__shared_weak_count **)(v46 + 16);
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        MEMORY[0x227684CE8](v46, 0x10F0C40B62ED6C6);
      }
    }
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
    v54 = v67;
    if (*((_QWORD *)&v78 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v57 = (std::__shared_weak_count *)v77[1];
    if (v77[1])
    {
      v58 = (unint64_t *)((char *)v77[1] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  else
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    LOWORD(object) = 0;
    v60 = (void *)_os_log_send_and_compose_impl();
    v54 = v67;
    if (v60)
      free(v60);
  }
  if (v54)
  {
    sub_22322C138((uint64_t)v68, "OCP:RS:Initializing");
    sub_223182C08((uint64_t)v68);
  }
  sub_223182C08((uint64_t)v68);
  v61 = v74;
  if (v74)
  {
    v62 = (unint64_t *)&v74->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return a1;
}

void sub_223986050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,void *a26,int a27,__int16 a28,char a29,char a30,char a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  sub_2238EFB04(v36 + 192);
  sub_22391E5EC(v36);
  sub_223530D14(a11);
  sub_223515074(v35);
  _Unwind_Resume(a1);
}

void sub_22398615C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCA90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCA90))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCA88);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCA90);
  }
  *a1 = qword_2540CCA88;
}

void sub_2239861F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCA90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCA90);
  _Unwind_Resume(a1);
}

_QWORD *sub_223986250(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void **v20;

  *a1 = &off_24EC5D2F0;
  v2 = (_QWORD *)a1[53];
  if (v2)
  {
    do
    {
      v16 = (_QWORD *)*v2;
      v17 = (_QWORD *)v2[6];
      if (v17)
      {
        do
        {
          v18 = (_QWORD *)*v17;
          operator delete(v17);
          v17 = v18;
        }
        while (v18);
      }
      v19 = (void *)v2[4];
      v2[4] = 0;
      if (v19)
        operator delete(v19);
      operator delete(v2);
      v2 = v16;
    }
    while (v16);
  }
  v3 = (void *)a1[51];
  a1[51] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void **)a1[29];
  if (v4)
  {
    do
    {
      v20 = (void **)*v4;
      if (v4[7])
        operator delete(v4[4]);
      operator delete(v4);
      v4 = v20;
    }
    while (v20);
  }
  v5 = (void *)a1[27];
  a1[27] = 0;
  if (v5)
    operator delete(v5);
  v6 = (_QWORD *)a1[23];
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      sub_22316F8F4(v6 + 4);
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)a1[21];
  a1[21] = 0;
  if (v8)
    operator delete(v8);
  v9 = (std::__shared_weak_count *)a1[13];
  if (!v9)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (_QWORD *)a1[9];
    if (!v12)
      goto LABEL_17;
  }
  else
  {
LABEL_15:
    v12 = (_QWORD *)a1[9];
    if (!v12)
      goto LABEL_17;
  }
  do
  {
    v13 = (_QWORD *)*v12;
    operator delete(v12);
    v12 = v13;
  }
  while (v13);
LABEL_17:
  v14 = (void *)a1[7];
  a1[7] = 0;
  if (v14)
    operator delete(v14);
  return a1;
}

void sub_2239863C0(_QWORD *a1)
{
  sub_223986250(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2239863E4(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  void *v14;
  unint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t i;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];
  int v70;
  const char *v71;
  int v72;
  const char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  void *object;
  void *v78[2];
  __int128 v79;
  void *__p[2];
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;

  sub_22398615C(&v76);
  if (**(int **)(v76 + 56) > 3)
    goto LABEL_91;
  v4 = *(unsigned __int8 *)(v76 + 72);
  v5 = sub_22322F254(v76, "OSLogSurrogateAppender", 1, 0);
  if (!v4 && v5 == 0)
    goto LABEL_91;
  v7 = v5;
  v69[0] = &v76;
  v69[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v69[2] = std::chrono::system_clock::now().__d_.__rep_;
  v70 = 3;
  v71 = "unknown file";
  v72 = 199;
  v74 = 0;
  v75 = 0;
  v73 = "unknown function";
  v68 = v76;
  if (*(char *)(v76 + 39) < 0)
  {
    v9 = *(const char **)(v76 + 16);
    v8 = *(_QWORD *)(v76 + 24);
    v67 = v76 + 16;
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v76 + 39);
    v9 = (const char *)(v76 + 16);
    v67 = v76 + 16;
    v10 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
    if ((_BYTE)v79 && SHIBYTE(v78[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F40[23] >= 0)
    v12 = byte_255788F40;
  else
    v12 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v13 = byte_255788F40[23];
  else
    v13 = *(_QWORD *)&byte_255788F40[8];
  object = os_log_create(v12, v9);
  v14 = v78;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v13 >= 0x17)
  {
    v15 = v7;
    v16 = v9;
    v17 = v4;
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    v14 = operator new(v18 + 1);
    v78[1] = (void *)v13;
    *(_QWORD *)&v79 = v19 | 0x8000000000000000;
    v78[0] = v14;
    v4 = v17;
    v9 = v16;
    v7 = v15;
    goto LABEL_23;
  }
  BYTE7(v79) = v13;
  if (v13)
LABEL_23:
    memmove(v14, v12, v13);
  *((_BYTE *)v14 + v13) = 0;
  BYTE8(v79) = 1;
  v20 = __p;
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v8 >= 0x17)
  {
    v22 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v22 = v8 | 7;
    v23 = v22 + 1;
    v20 = operator new(v22 + 1);
    __p[1] = (void *)v8;
    v81 = v23 | 0x8000000000000000;
    __p[0] = v20;
  }
  else
  {
    HIBYTE(v81) = v8;
    if (!v8)
    {
      LOBYTE(__p[0]) = 0;
      v82 = 1;
      v21 = object;
      if ((SHIBYTE(v81) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v9, v8);
  *((_BYTE *)v20 + v8) = 0;
  v82 = 1;
  v21 = object;
  if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v79))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v79) < 0)
      operator delete(v78[0]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  if (BYTE8(v79))
    goto LABEL_35;
LABEL_37:
  if (object)
    os_release(object);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v24 = _os_log_pack_size();
    v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
    v26 = (std::__shared_weak_count *)operator new();
    v27 = v26;
    v26->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v26->__shared_weak_owners_ = 0;
    v26[1].__vftable = v25;
    object = v25;
    v78[0] = v25;
    v78[1] = v26;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v79 = 0uLL;
    __p[0] = 0;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v27);
    }
    v31 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v32 = operator new();
    v33 = *(unsigned __int8 *)(v68 + 39);
    v34 = v67;
    if ((v33 & 0x80u) != 0)
    {
      v34 = *(_QWORD *)(v68 + 16);
      v33 = *(_QWORD *)(v68 + 24);
    }
    *(_QWORD *)v32 = v31;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)v78;
    v78[0] = 0;
    v78[1] = 0;
    *(_OWORD *)(v32 + 24) = v79;
    v79 = 0uLL;
    *(_QWORD *)(v32 + 40) = v34;
    *(_QWORD *)(v32 + 48) = v33;
    *(_BYTE *)(v32 + 56) = 1;
    v83 = 0;
    v84 = v32;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v84);
    v35 = v84;
    v84 = 0;
    if (v35)
    {
      v36 = *(std::__shared_weak_count **)(v35 + 32);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = *(std::__shared_weak_count **)(v35 + 16);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      MEMORY[0x227684CE8](v35, 0x10F0C40B62ED6C6);
      v42 = v83;
      v83 = 0;
      if (v42)
      {
        v43 = *(std::__shared_weak_count **)(v42 + 32);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = *(std::__shared_weak_count **)(v42 + 16);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        MEMORY[0x227684CE8](v42, 0x10F0C40B62ED6C6);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
    if (*((_QWORD *)&v79 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)v78[1];
    if (v78[1])
    {
      v53 = (unint64_t *)((char *)v78[1] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  else
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    LOWORD(object) = 0;
    v55 = (void *)_os_log_send_and_compose_impl();
    if (v55)
      free(v55);
  }
  if (v4)
  {
    sub_22322C138((uint64_t)v69, "OCP:RS:Reset");
    sub_223182C08((uint64_t)v69);
  }
  sub_223182C08((uint64_t)v69);
  v56 = v75;
  if (v75)
  {
    v57 = (unint64_t *)&v75->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_91:
  v59 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 158);
  *(_OWORD *)(a1 + 24) = v59;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a1 + 400))
    *(_BYTE *)(a1 + 400) = 0;
  if (*(_QWORD *)(a1 + 432))
  {
    v60 = *(_QWORD **)(a1 + 424);
    if (v60)
    {
      do
      {
        v63 = (_QWORD *)*v60;
        v64 = (_QWORD *)v60[6];
        if (v64)
        {
          do
          {
            v65 = (_QWORD *)*v64;
            operator delete(v64);
            v64 = v65;
          }
          while (v65);
        }
        v66 = (void *)v60[4];
        v60[4] = 0;
        if (v66)
          operator delete(v66);
        operator delete(v60);
        v60 = v63;
      }
      while (v63);
    }
    *(_QWORD *)(a1 + 424) = 0;
    v61 = *(_QWORD *)(a1 + 416);
    if (v61)
    {
      for (i = 0; i != v61; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 432) = 0;
  }
}

void sub_223986B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223986BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v5 - 96));
  sub_22319A054((uint64_t *)(v5 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223986BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223986C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223986C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223986C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_223986C88(uint64_t a1)
{
  sub_2233FADDC(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_223986CB0(uint64_t a1, int *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_22361FB3C((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_223986DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223986DF8(uint64_t a1, int *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_2238E825C((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_223986F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223986F40(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7;
  uint64_t result;
  int32x2_t *i;
  uint64_t *v10;
  uint64_t *v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  __int32 v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD v23[88];
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;

  v28 = 1065353216;
  v29 = 0;
  v26 = 0;
  v27 = 1065353216;
  v7 = sub_2241498F4(a1, 0);
  sub_22339E3C8(v7, 8 * *(_QWORD *)(a3 + 24));
  sub_22339E3C8(a1 + 32, 8 * *(_QWORD *)(a3 + 24));
  result = sub_22339E528(a1 + 112, 12 * *(_QWORD *)(a3 + 24));
  for (i = *(int32x2_t **)(a3 + 16); i; i = (int32x2_t *)*i)
  {
    if (i[2].i32[0] != *(_DWORD *)(a2 + 136)
      || i[2].i32[1] != *(_DWORD *)(a2 + 140)
      || i[3].i32[0] != *(_DWORD *)(a2 + 144))
    {
      v10 = sub_2239942A0((_QWORD *)(a2 + 168), (int *)&i[2]);
      if (!v10
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/PRRImpl.cpp", 331, (uint64_t)"it != accumulated_chunk_meshes_.end()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if (v10[4] == v10[5])
        v11 = &v28;
      else
        v11 = &v26;
      v24 = *v11;
      v25 = *((_DWORD *)v11 + 2);
      sub_22414CF6C(0, (uint64_t)&v21);
      v13 = v21;
      v14 = v22;
      if (v21 == v22)
        goto LABEL_18;
      do
      {
        v12.i64[0] = *(_QWORD *)v13;
        v12.i32[2] = *(_DWORD *)(v13 + 8);
        v12 = vmulq_n_f32(v12, a4 * 56.0);
        *(_DWORD *)(v13 + 8) = v12.i32[2];
        *(_QWORD *)v13 = v12.i64[0];
        v13 += 12;
      }
      while (v13 != v14);
      v15 = v21;
      v13 = v22;
      if (v21 == v22)
      {
LABEL_18:
        v18 = v13;
      }
      else
      {
        *(float32x2_t *)v12.f32 = vcvt_f32_s32(vadd_s32(i[2], (int32x2_t)0x400000004));
        v12.f32[2] = (float)(i[3].i32[0] + 4);
        v16.i32[3] = v20;
        v17 = vmulq_n_f32(v12, a4);
        do
        {
          v16.i64[0] = *(_QWORD *)v15;
          v16.i32[2] = *(_DWORD *)(v15 + 8);
          v16 = vaddq_f32(v17, v16);
          *(_DWORD *)(v15 + 8) = v16.i32[2];
          *(_QWORD *)v15 = v16.i64[0];
          v15 += 12;
        }
        while (v15 != v13);
        v13 = v21;
        v18 = v22;
      }
      sub_22339E688((uint64_t)v23, 0xAAAAAAAAAAAAAAABLL * ((v18 - v13) >> 2), &v24);
      v23[8] = 1;
      sub_22414E9E0(a1, (uint64_t)&v21);
      result = (uint64_t)sub_22316F8F4(&v21);
    }
  }
  return result;
}

void sub_2239871AC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2239871C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2239871D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2239871E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_2239871FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t *v6;
  va_list va;

  va_start(va, a6);
  sub_22316F8F4((uint64_t *)va);
  sub_22316F8F4(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_223987218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, float32x2_t *a11, uint64_t a12, __int8 a13)
{
  char v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  char *v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  char v43;
  char v44;
  void *v47[2];
  char v48;
  void *v49;
  char v50;
  _QWORD v51[2];
  char v52;
  __int128 v53;
  __int128 v54;
  int v55;
  void *__p;
  char *v57;
  unint64_t v58;
  void *__dst[4];
  int v60;
  char v61;
  _QWORD v62[2];
  char v63;
  float32x2_t v64[4];
  int v65;

  v53 = 0u;
  v54 = 0u;
  v55 = 728306384;
  kdebug_trace();
  v47[0] = (void *)0x75706D6F436C7352;
  v47[1] = (void *)25972;
  v48 = 10;
  v49 = (void *)5395024;
  v50 = 3;
  v51[1] = 0;
  v51[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v52 = 1;
  if (a13)
  {
    if (a12 < *(_QWORD *)(a1 + 128))
    {
      *(_BYTE *)a8 = 0;
      *(_BYTE *)(a8 + 32) = 0;
      goto LABEL_43;
    }
    *(_QWORD *)(a1 + 128) = a12 + (uint64_t)(*(double *)(a1 + 32) * 1000000000.0);
    if ((double)(a12 - *(_QWORD *)(a1 + 16)) / 1000000000.0 > *(float *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 8) ^= 1u;
      *(_QWORD *)(a1 + 16) = a12;
      v44 = 1;
      if (!*(_BYTE *)(a3 + 32))
        goto LABEL_37;
LABEL_8:
      v43 = a7;
      v19 = 0;
      v20 = "PRR v1 preset has been deprecated.";
      v21 = 118;
      v22 = 34;
      switch(*(_BYTE *)(a1 + 25))
      {
        case 0:
          goto LABEL_51;
        case 1:
        case 2:
          goto LABEL_10;
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
          v19 = 1;
LABEL_10:
          memset(v64, 0, sizeof(v64));
          v65 = 728306464;
          kdebug_trace();
          v23 = (char *)operator new(0x20uLL);
          strcpy(v23, "RslCompleteRoomsOccupancy");
          sub_223197FA4(__dst, v23, 0x19uLL);
          __dst[3] = (void *)5395024;
          v61 = 3;
          v62[0] = 0;
          v62[1] = 0;
          v63 = 0;
          v62[0] = std::chrono::steady_clock::now().__d_.__rep_;
          v63 = 1;
          operator delete(v23);
          sub_223198030(a2 + 2504, *(_QWORD **)(a2 + 2512));
          *(_QWORD *)(a2 + 2504) = a2 + 2512;
          *(_QWORD *)(a2 + 2520) = 0;
          *(_QWORD *)(a2 + 2512) = 0;
          sub_223198030(a2 + 2392, *(_QWORD **)(a2 + 2400));
          *(_QWORD *)(a2 + 2392) = a2 + 2400;
          *(_QWORD *)(a2 + 2408) = 0;
          *(_QWORD *)(a2 + 2400) = 0;
          __p = 0;
          v57 = 0;
          v58 = 0;
          v24 = *(_QWORD *)a3;
          v25 = *(_QWORD *)(a3 + 8);
          if (*(_QWORD *)a3 != v25)
          {
            v26 = 0;
            do
            {
              if (v26 >= v58)
              {
                v26 = sub_22393654C((uint64_t *)&__p, v24);
              }
              else
              {
                sub_2239367D8(v26, v24);
                v26 += 144;
              }
              v57 = (char *)v26;
              v24 += 216;
            }
            while (v24 != v25);
          }
          sub_223CF9284((char *)a2, (uint64_t *)&__p, v19, a5, a6, v43, a9, a10);
          v27 = (char *)__p;
          if (__p)
          {
            v28 = v57;
            v29 = __p;
            if (v57 != __p)
            {
              do
              {
                v30 = (void *)*((_QWORD *)v28 - 12);
                if (v30)
                {
                  *((_QWORD *)v28 - 11) = v30;
                  operator delete(v30);
                }
                v31 = *((_QWORD *)v28 - 15);
                if (v31)
                {
                  v32 = *((_QWORD *)v28 - 14);
                  v33 = (void *)*((_QWORD *)v28 - 15);
                  if (v32 != v31)
                  {
                    v34 = *((_QWORD *)v28 - 14);
                    do
                    {
                      v36 = *(void **)(v34 - 24);
                      v34 -= 24;
                      v35 = v36;
                      if (v36)
                      {
                        *(_QWORD *)(v32 - 16) = v35;
                        operator delete(v35);
                      }
                      v32 = v34;
                    }
                    while (v34 != v31);
                    v33 = (void *)*((_QWORD *)v28 - 15);
                  }
                  *((_QWORD *)v28 - 14) = v31;
                  operator delete(v33);
                }
                v37 = v28 - 144;
                v38 = (void *)*((_QWORD *)v28 - 18);
                if (v38)
                {
                  *((_QWORD *)v28 - 17) = v38;
                  operator delete(v38);
                }
                v28 -= 144;
              }
              while (v37 != v27);
              v29 = __p;
            }
            v57 = v27;
            operator delete(v29);
          }
          sub_22391CC34((uint64_t *)__dst, (uint64_t *)&__dst[3], (uint64_t)v62);
          if (v61 < 0)
          {
            operator delete(__dst[3]);
            if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
              goto LABEL_36;
          }
          else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
          {
            goto LABEL_36;
          }
          operator delete(__dst[0]);
LABEL_36:
          kdebug_trace();
          break;
        default:
          v20 = "Invalid PRR preset.";
          v21 = 168;
          v22 = 19;
LABEL_51:
          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/PRRImpl.cpp", v21, (uint64_t)"", 0, (uint64_t)v20, v22, (void (*)(void **))sub_22457406C);
          abort();
      }
      goto LABEL_37;
    }
  }
  v44 = 0;
  if (*(_BYTE *)(a3 + 32))
    goto LABEL_8;
LABEL_37:
  strcpy((char *)__dst, "Stats.PRR.Octree_After");
  HIBYTE(__dst[2]) = 22;
  sub_223CFC5B0(a2, (uint64_t *)__dst);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  memset(__dst, 0, sizeof(__dst));
  v60 = 1065353216;
  v64[0] = 0;
  v64[1].i32[0] = 0;
  sub_223987858(a1, 0, a2, (uint64_t)__dst, a4, a12, a13, v44, (uint64_t *)a8, 0.0, v64, a11, 255);
  v39 = __dst[2];
  if (__dst[2])
  {
    do
    {
      v40 = (_QWORD *)*v39;
      sub_22316F8F4(v39 + 4);
      operator delete(v39);
      v39 = v40;
    }
    while (v40);
  }
  v41 = __dst[0];
  __dst[0] = 0;
  if (v41)
    operator delete(v41);
LABEL_43:
  sub_22391CC34((uint64_t *)v47, (uint64_t *)&v49, (uint64_t)v51);
  if (v50 < 0)
  {
    operator delete(v49);
    if ((v48 & 0x80000000) == 0)
      return kdebug_trace();
LABEL_47:
    operator delete(v47[0]);
    return kdebug_trace();
  }
  if (v48 < 0)
    goto LABEL_47;
  return kdebug_trace();
}

void sub_223987778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_22392AA18((uint64_t)va);
  sub_2231874DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22398779C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  sub_22391786C(&a30);
  sub_22392AA18((uint64_t)&__p);
  sub_2231874DC(v38 - 144);
  sub_22392AA18((uint64_t)&a16);
  sub_2231874DC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223987858(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int8 a7@<W6>, char a8@<W7>, uint64_t *a9@<X8>, float a10@<S0>, float32x2_t *a11, float32x2_t *a12, char a13)
{
  unint64_t v13;
  float32x2_t v14;
  int v16;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t *i;
  int *j;
  float32x4_t v27;
  int8x16_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned __int8 *v40;
  float32x4_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  float *v49;
  float *v50;
  unint64_t v51;
  unint64_t v52;
  int32x2_t v53;
  int8x8_t v54;
  unint64_t v55;
  uint8x8_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint8x8_t v66;
  unint64_t v67;
  void **v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  float v72;
  unint64_t v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  size_t prime;
  void *v78;
  void *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  size_t v83;
  size_t v84;
  size_t v85;
  _QWORD *k;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  size_t v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t v107;
  void **v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  int8x8_t v119;
  unint64_t v120;
  uint8x8_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  void *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  std::mutex *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  std::string::size_type size;
  std::string *v148;
  std::string::size_type v149;
  std::string::size_type v150;
  int v151;
  BOOL v152;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t m;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  void *v161;
  uint64_t *v162;
  unsigned __int8 v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t *v167;
  unsigned int v168;
  BOOL v169;
  uint64_t *v170;
  int v171;
  void **v172;
  void **v173;
  void **v174;
  unsigned int v175;
  char *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _WORD *v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  _BYTE *v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char v201;
  void **v202;
  void **v203;
  void **v204;
  unsigned int v205;
  char *v206;
  uint64_t *v207;
  _BYTE *v208;
  _BYTE *v209;
  uint64_t *v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t *v215;
  unsigned int v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  std::mutex *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  _BYTE *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  __n128 *v234;
  _BYTE *v235;
  size_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  std::mutex *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  _BYTE *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  __n128 *v251;
  _BYTE *v252;
  size_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  std::mutex *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  std::string::size_type v262;
  std::string *v263;
  std::string::size_type v264;
  std::string::size_type v265;
  int v266;
  __n128 *v269;
  std::string *v270;
  size_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  std::mutex *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  _BYTE *v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  __n128 *v286;
  _BYTE *v287;
  size_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  std::mutex *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  _BYTE *v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  __n128 *v303;
  _BYTE *v304;
  size_t v305;
  uint64_t *v306;
  _QWORD *v307;
  char v308;
  double v309;
  int32x4_t v310;
  int8x16_t v311;
  int8x16_t v312;
  float32x2_t v313;
  float32x4_t v314;
  float32x2_t *nn;
  int v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  const char *v320;
  size_t v321;
  unsigned __int8 v322;
  _QWORD *v323;
  int v324;
  _QWORD *v325;
  _QWORD *v326;
  unsigned __int8 v327;
  const char *v328;
  size_t v329;
  void **v330;
  uint64_t v331;
  uint64_t v332;
  void **v333;
  NSObject *v334;
  uint64_t v335;
  uint64_t v336;
  size_t v337;
  std::__shared_weak_count_vtbl *v338;
  std::__shared_weak_count *v339;
  std::__shared_weak_count *v340;
  unint64_t *p_shared_owners;
  unint64_t v342;
  unint64_t v343;
  void *v344;
  uint64_t v345;
  int v346;
  int v347;
  char *v348;
  uint64_t v349;
  const char *v350;
  void *v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::string::size_type v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  int v371;
  void *v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  uint64_t *v376;
  char *v377;
  char *v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  int *v382;
  float32x4_t v383;
  int8x16_t v384;
  int8x16_t v385;
  float32x4_t v386;
  int8x16_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x2_t *v390;
  _QWORD *v391;
  unint64_t v392;
  uint64_t v393;
  BOOL v394;
  std::string::size_type v395;
  _QWORD *v396;
  float32x2_t v397;
  uint64_t v398;
  _QWORD *v399;
  char *v400;
  unint64_t *v401;
  unint64_t v402;
  char *v403;
  int v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t v407;
  const char *v408;
  size_t v409;
  unsigned __int8 v410;
  unsigned __int8 v411;
  const char *v412;
  size_t v413;
  void **v414;
  uint64_t v415;
  uint64_t v416;
  void **v417;
  NSObject *v418;
  uint64_t v419;
  uint64_t v420;
  size_t v421;
  std::__shared_weak_count_vtbl *v422;
  std::__shared_weak_count *v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  unint64_t v427;
  void *v428;
  char *v429;
  uint64_t v430;
  const char *v431;
  void *v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  std::string::size_type v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  void *v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  void *v456;
  float32x2_t *v457;
  float32x2_t *v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x2_t *v461;
  float32x2_t *n;
  unsigned __int32 v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  void **v474;
  std::string::size_type *p_size;
  _QWORD *v476;
  char *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  void **v482;
  uint64_t v483;
  std::string::size_type *v484;
  const char **v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  unint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  uint64_t v498;
  char *v499;
  unint64_t *v500;
  unint64_t v501;
  char *v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  uint64_t *v506;
  uint64_t v507;
  uint64_t v508;
  std::mutex *v509;
  uint64_t v510;
  uint64_t v511;
  char v512;
  _BYTE *v513;
  _BYTE *v514;
  uint64_t v515;
  unint64_t v516;
  _BYTE *v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  __n128 *v523;
  _BYTE *v524;
  size_t v525;
  char v526;
  char *v527;
  char *v528;
  char *v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  uint64_t *v533;
  uint64_t v534;
  uint64_t v535;
  std::mutex *v536;
  uint64_t v537;
  uint64_t v538;
  char v539;
  void **v540;
  void **v541;
  uint64_t v542;
  float v543;
  uint64_t *v544;
  unint64_t v545;
  void **v546;
  void *v547;
  void *v548;
  int v549;
  __n128 *v552;
  void **v553;
  size_t v554;
  float v555;
  uint64_t *v556;
  uint64_t v557;
  uint64_t v558;
  std::mutex *v559;
  uint64_t v560;
  uint64_t v561;
  char v562;
  void **v563;
  void **v564;
  uint64_t v565;
  uint64_t *v566;
  unint64_t v567;
  void **v568;
  void *v569;
  void *v570;
  int v571;
  __n128 *v574;
  void **v575;
  size_t v576;
  uint64_t *v577;
  uint64_t v578;
  uint64_t v579;
  std::mutex *v580;
  uint64_t v581;
  uint64_t v582;
  char v583;
  _BYTE *v584;
  _BYTE *v585;
  uint64_t v586;
  unint64_t v587;
  _BYTE *v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  __n128 *v594;
  _BYTE *v595;
  size_t v596;
  uint64_t *v597;
  uint64_t v598;
  uint64_t v599;
  std::mutex *v600;
  uint64_t v601;
  uint64_t v602;
  char v603;
  _BYTE *v604;
  _BYTE *v605;
  uint64_t v606;
  unint64_t v607;
  _BYTE *v608;
  uint64_t v609;
  uint64_t v610;
  int v611;
  __n128 *v614;
  _BYTE *v615;
  size_t v616;
  uint64_t *v617;
  uint64_t v618;
  uint64_t v619;
  std::mutex *v620;
  uint64_t v621;
  uint64_t v622;
  char v623;
  _BYTE *v624;
  _BYTE *v625;
  uint64_t v626;
  unint64_t v627;
  _BYTE *v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  __n128 *v634;
  _BYTE *v635;
  size_t v636;
  uint64_t *v637;
  uint64_t v638;
  uint64_t v639;
  std::mutex *v640;
  uint64_t v641;
  uint64_t v642;
  char v643;
  void **v644;
  void **v645;
  uint64_t v646;
  uint64_t *v647;
  unint64_t v648;
  void **v649;
  void *v650;
  void *v651;
  int v652;
  __n128 *v655;
  void **v656;
  size_t v657;
  uint64_t *v658;
  uint64_t v659;
  uint64_t v660;
  std::mutex *v661;
  uint64_t v662;
  uint64_t v663;
  char v664;
  std::string *v665;
  std::string *v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  std::string::size_type v673;
  const char *v674;
  const char **v675;
  uint64_t v676;
  int v677;
  int v678;
  uint64_t v679;
  _QWORD *v680;
  unint64_t v681;
  uint64_t v682;
  unint64_t v683;
  unint64_t v684;
  unsigned int v685;
  unint64_t v686;
  unsigned int v687;
  std::string::size_type ii;
  std::string::size_type *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  std::string::size_type *v694;
  uint64_t v695;
  _QWORD *v696;
  uint64_t (***v697)();
  std::string::size_type jj;
  uint64_t v699;
  void **v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t *v703;
  uint64_t v704;
  uint64_t v705;
  std::string::size_type v706;
  std::string *v707;
  std::string::size_type v708;
  std::string::size_type v709;
  int v710;
  BOOL v711;
  uint64_t *v713;
  uint64_t v714;
  uint64_t v715;
  std::mutex *v716;
  uint64_t v717;
  uint64_t v718;
  char v719;
  void **v720;
  void **v721;
  uint64_t v722;
  uint64_t *v723;
  unint64_t v724;
  void **v725;
  void *v726;
  void *v727;
  int v728;
  uint64_t *v731;
  uint64_t v732;
  uint64_t v733;
  std::mutex *v734;
  uint64_t v735;
  uint64_t v736;
  char v737;
  std::string *v738;
  std::string *v739;
  uint64_t v740;
  uint64_t *v741;
  std::string::size_type v742;
  std::string *v743;
  std::string::size_type v744;
  std::string::size_type v745;
  int v746;
  uint64_t *v749;
  uint64_t v750;
  uint64_t v751;
  std::mutex *v752;
  uint64_t v753;
  uint64_t v754;
  char v755;
  _BYTE *v756;
  _BYTE *v757;
  uint64_t v758;
  unint64_t v759;
  _BYTE *v760;
  uint64_t v761;
  uint64_t v762;
  int v763;
  __n128 *v766;
  _BYTE *v767;
  size_t v768;
  uint64_t *v769;
  uint64_t v770;
  uint64_t v771;
  std::mutex *v772;
  uint64_t v773;
  uint64_t v774;
  char v775;
  void **v776;
  void **v777;
  uint64_t v778;
  uint64_t *v779;
  int32x4_t v780;
  int32x4_t v781;
  float32x2_t v782;
  float32x4_t v783;
  int8x16_t v784;
  int32x4_t v785;
  float32x2_t v786;
  int8x16_t v787;
  int8x16_t v788;
  float32x4_t v789;
  float32x4_t v790;
  unint64_t v791;
  float32x4_t v792;
  float32x4_t v793;
  int8x16_t v794;
  int8x16_t v795;
  int8x16_t v796;
  float32x2_t *v797;
  float32x2_t *v798;
  float32x2_t v799;
  float32x2_t v800;
  float32x2_t v801;
  float32x4_t v802;
  float32x4_t v803;
  float32x2_t *v804;
  float32x2_t *v805;
  unsigned __int32 v806;
  uint64_t v807;
  void *v808;
  std::__shared_weak_count *v809;
  unint64_t *v810;
  unint64_t v811;
  __int128 v812;
  unint64_t *v813;
  unint64_t v814;
  unint64_t *v815;
  unint64_t v816;
  std::__shared_weak_count *v817;
  unint64_t *v818;
  unint64_t v819;
  unint64_t *v820;
  unint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  std::string::size_type v827;
  const char *v828;
  const char **v829;
  uint64_t v830;
  int v831;
  int v832;
  uint64_t *v833;
  uint64_t v834;
  uint64_t v835;
  std::mutex *v836;
  uint64_t v837;
  uint64_t v838;
  char v839;
  std::string *v840;
  std::string *v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  unint64_t v845;
  uint64_t v846;
  unint64_t v847;
  unint64_t v848;
  unsigned int v849;
  unint64_t v850;
  unsigned int v851;
  uint64_t v852;
  uint64_t *v853;
  std::string::size_type v854;
  std::string *v855;
  std::string::size_type v856;
  std::string::size_type v857;
  int v858;
  uint64_t v861;
  uint64_t v862;
  unint64_t v863;
  uint64_t v864;
  unint64_t v865;
  unint64_t v866;
  unsigned int v867;
  unint64_t v868;
  unsigned int v869;
  uint64_t v870;
  _QWORD *v871;
  _QWORD *v872;
  void *v873;
  _QWORD *v874;
  _QWORD *v875;
  void *v876;
  uint64_t v877;
  _QWORD *v878;
  unint64_t v879;
  uint64_t v880;
  unint64_t v881;
  unint64_t v882;
  unsigned int v883;
  unint64_t v884;
  unsigned int v885;
  std::string::size_type kk;
  uint64_t v887;
  std::string::size_type *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  std::string::size_type *v892;
  uint64_t v893;
  _QWORD *v894;
  uint64_t (***v895)();
  std::string::size_type mm;
  uint64_t v897;
  void **v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  const char *v902;
  uint64_t v903;
  float32x2_t *v904;
  float32x2_t *v906;
  int v907;
  uint64_t *v908;
  int *v911;
  float32x4_t v912;
  uint64_t v913;
  uint64_t *v914;
  int *v915;
  uint64_t v916;
  uint64_t *v917;
  uint64_t *v918;
  char v919;
  int v920;
  uint64_t *v921;
  uint64_t *v922;
  float32x2_t v923;
  int v924;
  int v925;
  _BOOL4 v926;
  float32x2_t v927;
  uint64_t v928;
  uint64_t v929;
  float32x2_t v930;
  int v931;
  int v932;
  float32x2_t v933;
  float32x2_t v934;
  float32x4_t v935;
  const char *v936;
  float32x2_t v937;
  uint64_t *v938;
  _QWORD *v939;
  void *v940;
  int8x16_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  void *v945[2];
  __int128 v946;
  int v947;
  std::string v948;
  int v949;
  void *v950[2];
  void *v951[2];
  int v952;
  uint64_t v953[11];
  int v954;
  uint64_t v955;
  uint64_t v956;
  void *v957[2];
  __int128 v958;
  int v959;
  _QWORD v960[2];
  char v961;
  uint64_t v962;
  uint64_t v963;
  __int16 v964;
  unsigned __int8 v965;
  uint64_t v966;
  void *v967[2];
  __int128 v968;
  void **v969;
  uint64_t v970;
  uint64_t (**v971)();
  float32x2_t *v972;
  uint64_t (***v973)();
  _BYTE __p[32];
  const char *v975;
  std::string::size_type v976;
  const char *v977;
  uint64_t *v978;
  std::__shared_weak_count *v979;
  const char **v980;
  uint64_t *v981;
  uint64_t *v982;
  uint64_t *v983;
  uint64_t *v984;
  uint64_t *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  _BYTE v993[24];
  char v994;
  _BYTE *v995;
  void *object[6];
  uint64_t *v997;
  unint64_t v998;
  uint64_t *v999;
  float32x2_t *v1000;
  uint64_t *v1001;
  uint64_t *v1002;
  uint64_t *v1003;
  uint64_t *v1004;
  uint64_t *v1005;
  char *v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  __int32 v1013;
  std::string v1014;
  std::string *v1015;
  uint64_t v1016;

  v1016 = *MEMORY[0x24BDAC8D0];
  v965 = a2;
  v16 = *(unsigned __int8 *)(a1 + 25);
  v962 = 0x3D75C28F00000000;
  v963 = 0x4200000000000001;
  v964 = 0;
  v21 = a1;
  switch(v16)
  {
    case 0:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/PRRImpl.cpp", 118, (uint64_t)"", 0, (uint64_t)"PRR v1 preset has been deprecated.", 34, (void (*)(void **))sub_22457406C);
      abort();
    case 1:
      goto LABEL_10;
    case 2:
      LOBYTE(v962) = 1;
      goto LABEL_10;
    case 4:
    case 6:
      LOWORD(v962) = 257;
      goto LABEL_10;
    case 5:
    case 7:
      LOWORD(v962) = 257;
      goto LABEL_8;
    case 8:
      LOWORD(v962) = 257;
      LOBYTE(v964) = 1;
      goto LABEL_10;
    case 9:
      LOWORD(v962) = 257;
      LOBYTE(v964) = 1;
      BYTE2(v962) = 1;
      goto LABEL_10;
    case 10:
      LOBYTE(v964) = 1;
      LODWORD(v962) = 16843009;
      goto LABEL_10;
    case 11:
      LOWORD(v962) = 257;
      v964 = 257;
LABEL_8:
      BYTE2(v962) = 1;
LABEL_10:
      v960[1] = 0;
      v960[0] = std::chrono::steady_clock::now().__d_.__rep_;
      v961 = 1;
      kdebug_trace();
      *(_OWORD *)v957 = 0u;
      v958 = 0u;
      v959 = 1065353216;
      v956 = 0;
      v955 = 0;
      v954 = 0;
      v953[0] = (uint64_t)v957;
      v953[1] = (uint64_t)&v965;
      v953[2] = v21;
      v953[3] = a3;
      v953[4] = (uint64_t)&v955 + 4;
      v953[5] = (uint64_t)&v955;
      v953[6] = (uint64_t)&v954;
      v953[7] = (uint64_t)&v962;
      v953[8] = a4;
      v953[9] = (uint64_t)&v956 + 4;
      v953[10] = (uint64_t)&v956;
      if (*(_BYTE *)(v21 + 208)
        && (a8 & 1) == 0
        && (v22 = *(unsigned __int8 *)(v21 + 160), v926 = v22 != v965, v22 == v965))
      {
        if (*(_BYTE *)(v21 + 160) || (v323 = *(_QWORD **)(a3 + 2528), v323 == (_QWORD *)(a3 + 2536)))
        {
          v926 = 0;
        }
        else
        {
          v14.i32[1] = 8;
          do
          {
            object[0] = *(void **)((char *)v323 + 28);
            v324 = *((_DWORD *)v323 + 9);
            *(int32x2_t *)((char *)&object[1] + 4) = vadd_s32(*(int32x2_t *)((char *)v323 + 28), (int32x2_t)0x800000008);
            LODWORD(object[1]) = v324;
            HIDWORD(object[2]) = v324 + 8;
            sub_2239901EC(v953, (int *)object);
            v325 = (_QWORD *)v323[1];
            if (v325)
            {
              do
              {
                v326 = v325;
                v325 = (_QWORD *)*v325;
              }
              while (v325);
            }
            else
            {
              do
              {
                v326 = (_QWORD *)v323[2];
                v152 = *v326 == (_QWORD)v323;
                v323 = v326;
              }
              while (!v152);
            }
            v323 = v326;
          }
          while (v326 != (_QWORD *)(a3 + 2536));
        }
      }
      else
      {
        v1014.__r_.__value_.__r.__words[0] = (std::string::size_type)v953;
        v967[0] = &v1014;
        *(_QWORD *)__p = v967;
        LOBYTE(v950[0]) = 1;
        v23 = *(_DWORD *)(a3 + 192);
        if ((v23 & 0x80000000) == 0)
        {
          v24 = *(_DWORD *)(a3 + 196);
          object[0] = v993;
          object[1] = __p;
          object[2] = v950;
          sub_223995020(a3 + 16, v24, v23, (uint64_t)object);
        }
        for (i = *(uint64_t **)(v21 + 184); i; i = (uint64_t *)*i)
        {
          object[0] = (void *)i[2];
          LODWORD(object[1]) = *((_DWORD *)i + 6);
          sub_2239901EC(v953, (int *)object);
        }
        v926 = 1;
      }
      v904 = (float32x2_t *)(v21 + 256);
      for (j = (int *)(a5 + 16); ; sub_2239901EC(v953, j + 4))
      {
        j = *(int **)j;
        if (!j)
          break;
      }
      kdebug_trace();
      object[0] = operator new(0x19uLL);
      *(_OWORD *)&object[1] = xmmword_2245B9430;
      strcpy((char *)object[0], "RslExtractOccupancyMesh");
      __p[23] = 3;
      strcpy(__p, "PRR");
      sub_22391CC34((uint64_t *)object, (uint64_t *)__p, (uint64_t)v960);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        v919 = a13;
        v908 = a9;
        if ((SHIBYTE(object[2]) & 0x80000000) == 0)
        {
LABEL_25:
          v944 = v21;
          if (!v965)
            goto LABEL_287;
          goto LABEL_29;
        }
      }
      else
      {
        v919 = a13;
        v908 = a9;
        if ((SHIBYTE(object[2]) & 0x80000000) == 0)
          goto LABEL_25;
      }
      operator delete(object[0]);
      v944 = v21;
      if (!v965)
        goto LABEL_287;
LABEL_29:
      if (HIBYTE(v964))
      {
        *(float32x2_t *)v27.f32 = *a12;
        v27.i32[2] = a12[1].i32[0];
        v28 = (int8x16_t)vabsq_f32(v27);
        v29 = *(float *)&v28.i32[1];
        if (*(float *)&v28.i32[1] <= *(float *)v28.i32)
          v29 = *(float *)v28.i32;
        v30 = 1;
        if (v29 < *(float *)&v28.i32[2] || *(float *)&v28.i32[1] <= *(float *)v28.i32)
          v30 = 2;
        v31 = v29 >= *(float *)&v28.i32[2] && *(float *)&v28.i32[1] <= *(float *)v28.i32 ? 0 : v30;
        v32 = (uint64_t *)v958;
        if ((_QWORD)v958)
        {
          v938 = (uint64_t *)(v21 + 408);
          v914 = (uint64_t *)(v21 + 424);
          v33 = 4 * v31;
          do
          {
            v36 = (void **)(v32 + 2);
            v37 = (unsigned int *)v32[18];
            v38 = (unsigned int *)v32[19];
            if (v37 == v38)
            {
              object[0] = *v36;
              LODWORD(object[1]) = *((_DWORD *)v32 + 6);
              *(_DWORD *)((char *)object + v33) = 0;
              v48 = *(_DWORD *)((char *)v36 + v33);
            }
            else
            {
              v39 = 0;
              v40 = (unsigned __int8 *)v32[34];
              v41 = 0uLL;
              do
              {
                v42 = *v40++;
                if (v42 == 1)
                {
                  v43 = v32[4];
                  v44 = v43 + 12 * *v37;
                  v28.i64[0] = *(_QWORD *)v44;
                  v28.i32[2] = *(_DWORD *)(v44 + 8);
                  v45 = vaddq_f32(v41, (float32x4_t)v28);
                  v46 = v43 + 12 * v37[1];
                  v41.i64[0] = *(_QWORD *)v46;
                  v41.i32[2] = *(_DWORD *)(v46 + 8);
                  v28 = (int8x16_t)vaddq_f32(v45, v41);
                  v47 = v43 + 12 * v37[2];
                  v41.i64[0] = *(_QWORD *)v47;
                  v41.i32[2] = *(_DWORD *)(v47 + 8);
                  v41 = vaddq_f32((float32x4_t)v28, v41);
                  v39 += 3;
                }
                v37 += 3;
              }
              while (v37 != v38);
              object[0] = *v36;
              LODWORD(object[1]) = *((_DWORD *)v32 + 6);
              *(_DWORD *)((char *)object + v33) = 0;
              v48 = *(_DWORD *)((char *)v36 + v33);
              if (v39)
              {
                v933 = *a12;
                v935 = v41;
                v14.i32[0] = a12[1].i32[0];
                v49 = (float *)sub_223995560(v938, (int *)object, (uint64_t)object);
                v50 = v49;
                v51 = v48;
                v52 = *((_QWORD *)v49 + 5);
                if (v52)
                {
                  v53 = (int32x2_t)vcnt_s8((int8x8_t)v52);
                  v53.i16[0] = vaddlv_u8((uint8x8_t)v53);
                  if (v53.u32[0] > 1uLL)
                  {
                    v13 = v48;
                    if (v52 <= v48)
                      v13 = v48 % v52;
                  }
                  else
                  {
                    v13 = (v52 - 1) & v48;
                  }
                  v68 = *(void ***)(*((_QWORD *)v49 + 4) + 8 * v13);
                  if (v68)
                  {
                    v69 = *v68;
                    if (*v68)
                    {
                      if (v53.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v71 = v69[1];
                          if (v71 == v48)
                          {
                            if (*((_DWORD *)v69 + 4) == v48)
                              goto LABEL_43;
                          }
                          else if ((v71 & (v52 - 1)) != v13)
                          {
                            goto LABEL_97;
                          }
                          v69 = (_QWORD *)*v69;
                          if (!v69)
                            goto LABEL_97;
                        }
                      }
                      do
                      {
                        v70 = v69[1];
                        if (v70 == v48)
                        {
                          if (*((_DWORD *)v69 + 4) == v48)
                            goto LABEL_43;
                        }
                        else
                        {
                          if (v70 >= v52)
                            v70 %= v52;
                          if (v70 != v13)
                            break;
                        }
                        v69 = (_QWORD *)*v69;
                      }
                      while (v69);
                    }
                  }
                }
LABEL_97:
                v69 = operator new(0x18uLL);
                *v69 = 0;
                v69[1] = v48;
                *((_DWORD *)v69 + 4) = v48;
                *((_DWORD *)v69 + 5) = 0;
                *(float *)v53.i32 = (float)(unint64_t)(*((_QWORD *)v50 + 7) + 1);
                v72 = v50[16];
                if (v52 && (float)(v72 * (float)v52) >= *(float *)v53.i32)
                {
                  v34 = *((_QWORD *)v50 + 4);
                  v35 = *(_QWORD **)(v34 + 8 * v13);
                  if (!v35)
                    goto LABEL_100;
LABEL_40:
                  *v69 = *v35;
LABEL_41:
                  *v35 = v69;
                  goto LABEL_42;
                }
                v74 = (v52 & (v52 - 1)) != 0;
                if (v52 < 3)
                  v74 = 1;
                v75 = v74 | (2 * v52);
                v76 = vcvtps_u32_f32(*(float *)v53.i32 / v72);
                if (v75 <= v76)
                  prime = v76;
                else
                  prime = v75;
                if (prime == 1)
                {
                  prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  prime = std::__next_prime(prime);
                  v52 = *((_QWORD *)v50 + 5);
                }
                if (prime <= v52)
                {
                  if (prime >= v52)
                    goto LABEL_152;
                  v90 = vcvtps_u32_f32((float)*((unint64_t *)v50 + 7) / v50[16]);
                  if (v52 < 3
                    || (v53 = (int32x2_t)vcnt_s8((int8x8_t)v52),
                        v53.i16[0] = vaddlv_u8((uint8x8_t)v53),
                        v53.u32[0] > 1uLL))
                  {
                    v90 = std::__next_prime(v90);
                  }
                  else
                  {
                    v91 = 1 << -(char)__clz(v90 - 1);
                    if (v90 >= 2)
                      v90 = v91;
                  }
                  if (prime <= v90)
                    prime = v90;
                  if (prime < v52)
                  {
                    if (prime)
                      goto LABEL_113;
                    v93 = (void *)*((_QWORD *)v50 + 4);
                    *((_QWORD *)v50 + 4) = 0;
                    if (v93)
                      operator delete(v93);
                    v52 = 0;
                    *((_QWORD *)v50 + 5) = 0;
                    v94 = -1;
                    goto LABEL_39;
                  }
                  v52 = *((_QWORD *)v50 + 5);
                  v94 = v52 - 1;
                  if ((v52 & (v52 - 1)) == 0)
                    goto LABEL_39;
LABEL_162:
                  if (v52 <= v51)
                  {
                    v13 = v51 % v52;
                    v34 = *((_QWORD *)v50 + 4);
                    v35 = *(_QWORD **)(v34 + 8 * (v51 % v52));
                    if (v35)
                      goto LABEL_40;
                  }
                  else
                  {
                    v13 = v51;
                    v34 = *((_QWORD *)v50 + 4);
                    v35 = *(_QWORD **)(v34 + 8 * v51);
                    if (v35)
                      goto LABEL_40;
                  }
LABEL_100:
                  *v69 = *((_QWORD *)v50 + 6);
                  *((_QWORD *)v50 + 6) = v69;
                  *(_QWORD *)(v34 + 8 * v13) = v50 + 12;
                  if (*v69)
                  {
                    v73 = *(_QWORD *)(*v69 + 8);
                    if ((v52 & (v52 - 1)) != 0)
                    {
                      if (v73 >= v52)
                        v73 %= v52;
                    }
                    else
                    {
                      v73 &= v52 - 1;
                    }
                    v35 = (_QWORD *)(*((_QWORD *)v50 + 4) + 8 * v73);
                    goto LABEL_41;
                  }
LABEL_42:
                  ++*((_QWORD *)v50 + 7);
LABEL_43:
                  *(float *)v53.i32 = (float)v39;
                  v28 = (int8x16_t)vdivq_f32(v935, (float32x4_t)vdupq_lane_s32(v53, 0));
                  *((_DWORD *)v69 + 5) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, v933), (float32x2_t)vdup_lane_s32((int32x2_t)v933, 1), *(float32x2_t *)v28.i8, 1), v14, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).u32[0];
                  goto LABEL_44;
                }
LABEL_113:
                if (prime >> 61)
                  sub_223174E94();
                v78 = operator new(8 * prime);
                v79 = (void *)*((_QWORD *)v50 + 4);
                *((_QWORD *)v50 + 4) = v78;
                if (v79)
                  operator delete(v79);
                v80 = 0;
                *((_QWORD *)v50 + 5) = prime;
                do
                  *(_QWORD *)(*((_QWORD *)v50 + 4) + 8 * v80++) = 0;
                while (prime != v80);
                v82 = v50 + 12;
                v81 = (_QWORD *)*((_QWORD *)v50 + 6);
                if (!v81)
                {
LABEL_161:
                  v52 = prime;
                  v94 = prime - 1;
                  if ((prime & (prime - 1)) == 0)
                    goto LABEL_39;
                  goto LABEL_162;
                }
                v83 = v81[1];
                v84 = prime - 1;
                if ((prime & (prime - 1)) == 0)
                {
                  v85 = v83 & v84;
                  *(_QWORD *)(*((_QWORD *)v50 + 4) + 8 * v85) = v82;
                  for (k = (_QWORD *)*v81; *v81; k = (_QWORD *)*v81)
                  {
                    v87 = k[1] & v84;
                    if (v87 == v85)
                    {
                      v81 = k;
                    }
                    else
                    {
                      v88 = *((_QWORD *)v50 + 4);
                      if (*(_QWORD *)(v88 + 8 * v87))
                      {
                        *v81 = *k;
                        v89 = 8 * v87;
                        *k = **(_QWORD **)(*((_QWORD *)v50 + 4) + v89);
                        **(_QWORD **)(*((_QWORD *)v50 + 4) + v89) = k;
                      }
                      else
                      {
                        *(_QWORD *)(v88 + 8 * v87) = v81;
                        v81 = k;
                        v85 = v87;
                      }
                    }
                  }
                  goto LABEL_161;
                }
                if (v83 < prime)
                {
                  *(_QWORD *)(*((_QWORD *)v50 + 4) + 8 * v83) = v82;
                  v92 = (_QWORD *)*v81;
                  if (*v81)
                    goto LABEL_156;
LABEL_151:
                  v52 = prime;
LABEL_152:
                  v94 = v52 - 1;
                  if ((v52 & (v52 - 1)) == 0)
                  {
LABEL_39:
                    v13 = v94 & v51;
                    v34 = *((_QWORD *)v50 + 4);
                    v35 = *(_QWORD **)(v34 + 8 * (v94 & v51));
                    if (!v35)
                      goto LABEL_100;
                    goto LABEL_40;
                  }
                  goto LABEL_162;
                }
                v83 %= prime;
                *(_QWORD *)(*((_QWORD *)v50 + 4) + 8 * v83) = v82;
                v92 = (_QWORD *)*v81;
                if (!*v81)
                  goto LABEL_151;
                while (1)
                {
LABEL_156:
                  v96 = v92[1];
                  if (v96 >= prime)
                    v96 %= prime;
                  if (v96 == v83)
                    goto LABEL_155;
                  v97 = *((_QWORD *)v50 + 4);
                  if (*(_QWORD *)(v97 + 8 * v96))
                    break;
                  *(_QWORD *)(v97 + 8 * v96) = v81;
                  v81 = v92;
                  v92 = (_QWORD *)*v92;
                  v83 = v96;
                  if (!v92)
                    goto LABEL_161;
                }
                *v81 = *v92;
                v95 = 8 * v96;
                *v92 = **(_QWORD **)(*((_QWORD *)v50 + 4) + v95);
                **(_QWORD **)(*((_QWORD *)v50 + 4) + v95) = v92;
                v92 = v81;
LABEL_155:
                v81 = v92;
                v92 = (_QWORD *)*v92;
                if (!v92)
                  goto LABEL_161;
                goto LABEL_156;
              }
            }
            v54 = *(int8x8_t *)(v944 + 416);
            if (!*(_QWORD *)&v54)
              goto LABEL_44;
            v55 = (19349669 * SHIDWORD(object[0])) ^ (73856093 * SLODWORD(object[0])) ^ (83492791
                                                                                           * SLODWORD(object[1]));
            v56 = (uint8x8_t)vcnt_s8(v54);
            v56.i16[0] = vaddlv_u8(v56);
            if (v56.u32[0] > 1uLL)
            {
              v57 = (19349669 * SHIDWORD(object[0])) ^ (73856093 * SLODWORD(object[0])) ^ (83492791
                                                                                             * SLODWORD(object[1]));
              if (v55 >= *(_QWORD *)&v54)
                v57 = v55 % *(_QWORD *)&v54;
            }
            else
            {
              v57 = v55 & (*(_QWORD *)&v54 - 1);
            }
            v58 = *(uint64_t ***)(*v938 + 8 * v57);
            if (!v58)
              goto LABEL_44;
            v59 = *v58;
            if (!v59)
              goto LABEL_44;
            if (v56.u32[0] < 2uLL)
            {
              v60 = *(_QWORD *)&v54 - 1;
              while (1)
              {
                v62 = v59[1];
                if (v55 == v62)
                {
                  if (*((_DWORD *)v59 + 4) == LODWORD(object[0])
                    && *(void **)((char *)v59 + 20) == *(void **)((char *)object + 4))
                  {
                    goto LABEL_77;
                  }
                }
                else if ((v62 & v60) != v57)
                {
                  goto LABEL_44;
                }
                v59 = (uint64_t *)*v59;
                if (!v59)
                  goto LABEL_44;
              }
            }
            while (1)
            {
              v61 = v59[1];
              if (v55 == v61)
                break;
              if (v61 >= *(_QWORD *)&v54)
                v61 %= *(_QWORD *)&v54;
              if (v61 != v57)
                goto LABEL_44;
LABEL_65:
              v59 = (uint64_t *)*v59;
              if (!v59)
                goto LABEL_44;
            }
            if (*((_DWORD *)v59 + 4) != LODWORD(object[0])
              || *(void **)((char *)v59 + 20) != *(void **)((char *)object + 4))
            {
              goto LABEL_65;
            }
LABEL_77:
            v63 = sub_223995560(v938, (int *)object, (uint64_t)object);
            v64 = v63[5];
            if (!v64)
              goto LABEL_44;
            v65 = v48;
            v66 = (uint8x8_t)vcnt_s8((int8x8_t)v64);
            v66.i16[0] = vaddlv_u8(v66);
            if (v66.u32[0] > 1uLL)
            {
              v67 = v48;
              if (v64 <= v48)
                v67 = v48 % v64;
            }
            else
            {
              v67 = (v64 - 1) & v48;
            }
            v98 = *(uint64_t ***)(v63[4] + 8 * v67);
            if (!v98)
              goto LABEL_44;
            v99 = *v98;
            if (!v99)
              goto LABEL_44;
            if (v66.u32[0] < 2uLL)
            {
              v100 = v64 - 1;
              while (1)
              {
                v102 = v99[1];
                if (v102 == v48)
                {
                  if (*((_DWORD *)v99 + 4) == v48)
                    goto LABEL_185;
                }
                else if ((v102 & v100) != v67)
                {
                  goto LABEL_44;
                }
                v99 = (uint64_t *)*v99;
                if (!v99)
                  goto LABEL_44;
              }
            }
            while (2)
            {
              v101 = v99[1];
              if (v101 != v48)
              {
                if (v101 >= v64)
                  v101 %= v64;
                if (v101 != v67)
                  goto LABEL_44;
                goto LABEL_174;
              }
              if (*((_DWORD *)v99 + 4) != v48)
              {
LABEL_174:
                v99 = (uint64_t *)*v99;
                if (!v99)
                  goto LABEL_44;
                continue;
              }
              break;
            }
LABEL_185:
            v103 = sub_223995560(v938, (int *)object, (uint64_t)object);
            v104 = v103[5];
            if (!v104)
              goto LABEL_233;
            v105 = (uint8x8_t)vcnt_s8((int8x8_t)v104);
            v105.i16[0] = vaddlv_u8(v105);
            if (v105.u32[0] > 1uLL)
            {
              v106 = v48;
              if (v104 <= v48)
                v106 = v48 % v104;
            }
            else
            {
              v106 = (v104 - 1) & v48;
            }
            v107 = v103[4];
            v108 = *(void ***)(v107 + 8 * v106);
            if (!v108)
              goto LABEL_233;
            v109 = *v108;
            if (!v109)
              goto LABEL_233;
            v110 = v104 - 1;
            if (v105.u32[0] < 2uLL)
            {
              while (1)
              {
                v111 = v109[1];
                if (v111 == v48)
                {
                  if (*((_DWORD *)v109 + 4) == v48)
                    goto LABEL_206;
                }
                else if ((v111 & v110) != v106)
                {
                  goto LABEL_233;
                }
                v109 = (_QWORD *)*v109;
                if (!v109)
                  goto LABEL_233;
              }
            }
            while (2)
            {
              v112 = v109[1];
              if (v112 != v48)
              {
                if (v112 >= v104)
                  v112 %= v104;
                if (v112 != v106)
                  goto LABEL_233;
                goto LABEL_200;
              }
              if (*((_DWORD *)v109 + 4) != v48)
              {
LABEL_200:
                v109 = (_QWORD *)*v109;
                if (!v109)
                  goto LABEL_233;
                continue;
              }
              break;
            }
LABEL_206:
            if (v105.u32[0] > 1uLL)
            {
              if (v104 <= v48)
                v65 = v48 % v104;
            }
            else
            {
              v65 = v110 & v48;
            }
            v113 = *(_QWORD **)(v107 + 8 * v65);
            do
            {
              v114 = v113;
              v113 = (_QWORD *)*v113;
            }
            while (v113 != v109);
            if (v114 == v103 + 6)
              goto LABEL_223;
            v115 = v114[1];
            if (v105.u32[0] > 1uLL)
            {
              if (v115 >= v104)
                v115 %= v104;
            }
            else
            {
              v115 &= v110;
            }
            if (v115 != v65)
            {
LABEL_223:
              if (!*v109)
                goto LABEL_224;
              v116 = *(_QWORD *)(*v109 + 8);
              if (v105.u32[0] > 1uLL)
              {
                if (v116 >= v104)
                  v116 %= v104;
              }
              else
              {
                v116 &= v110;
              }
              if (v116 != v65)
LABEL_224:
                *(_QWORD *)(v107 + 8 * v65) = 0;
            }
            v117 = *v109;
            if (*v109)
            {
              v118 = *(_QWORD *)(v117 + 8);
              if (v105.u32[0] > 1uLL)
              {
                if (v118 >= v104)
                  v118 %= v104;
              }
              else
              {
                v118 &= v110;
              }
              if (v118 != v65)
              {
                *(_QWORD *)(v103[4] + 8 * v118) = v114;
                v117 = *v109;
              }
            }
            *v114 = v117;
            *v109 = 0;
            --v103[7];
            operator delete(v109);
LABEL_233:
            if (!sub_223995560(v938, (int *)object, (uint64_t)object)[7])
            {
              v119 = *(int8x8_t *)(v944 + 416);
              if (v119)
              {
                v120 = (19349669 * SHIDWORD(object[0])) ^ (73856093 * SLODWORD(object[0])) ^ (83492791
                                                                                                * SLODWORD(object[1]));
                v121 = (uint8x8_t)vcnt_s8(v119);
                v121.i16[0] = vaddlv_u8(v121);
                if (v121.u32[0] > 1uLL)
                {
                  v122 = (19349669 * SHIDWORD(object[0])) ^ (73856093 * SLODWORD(object[0])) ^ (83492791
                                                                                                  * SLODWORD(object[1]));
                  if (v120 >= *(_QWORD *)&v119)
                    v122 = v120 % *(_QWORD *)&v119;
                }
                else
                {
                  v122 = v120 & (*(_QWORD *)&v119 - 1);
                }
                v123 = *v938;
                v124 = *(uint64_t ***)(*v938 + 8 * v122);
                if (v124)
                {
                  v125 = *v124;
                  if (*v124)
                  {
                    v126 = *(_QWORD *)&v119 - 1;
                    if (v121.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v127 = v125[1];
                        if (v127 == v120)
                        {
                          if (*((_DWORD *)v125 + 4) == LODWORD(object[0])
                            && *(void **)((char *)v125 + 20) == *(void **)((char *)object + 4))
                          {
                            goto LABEL_248;
                          }
                        }
                        else if ((v127 & v126) != v122)
                        {
                          goto LABEL_44;
                        }
                        v125 = (uint64_t *)*v125;
                        if (!v125)
                          goto LABEL_44;
                      }
                    }
                    do
                    {
                      v128 = v125[1];
                      if (v128 == v120)
                      {
                        if (*((_DWORD *)v125 + 4) == LODWORD(object[0])
                          && *(void **)((char *)v125 + 20) == *(void **)((char *)object + 4))
                        {
LABEL_248:
                          if (v121.u32[0] > 1uLL)
                          {
                            if (v120 >= *(_QWORD *)&v119)
                              v120 %= *(_QWORD *)&v119;
                          }
                          else
                          {
                            v120 &= v126;
                          }
                          v129 = *(uint64_t **)(v123 + 8 * v120);
                          do
                          {
                            v130 = v129;
                            v129 = (uint64_t *)*v129;
                          }
                          while (v129 != v125);
                          if (v130 == v914)
                            goto LABEL_273;
                          v131 = v130[1];
                          if (v121.u32[0] > 1uLL)
                          {
                            if (v131 >= *(_QWORD *)&v119)
                              v131 %= *(_QWORD *)&v119;
                          }
                          else
                          {
                            v131 &= v126;
                          }
                          if (v131 != v120)
                          {
LABEL_273:
                            if (!*v125)
                              goto LABEL_274;
                            v132 = *(_QWORD *)(*v125 + 8);
                            if (v121.u32[0] > 1uLL)
                            {
                              if (v132 >= *(_QWORD *)&v119)
                                v132 %= *(_QWORD *)&v119;
                            }
                            else
                            {
                              v132 &= v126;
                            }
                            if (v132 != v120)
LABEL_274:
                              *(_QWORD *)(v123 + 8 * v120) = 0;
                          }
                          v133 = (uint64_t *)*v125;
                          if (*v125)
                          {
                            v134 = v133[1];
                            if (v121.u32[0] > 1uLL)
                            {
                              if (v134 >= *(_QWORD *)&v119)
                                v134 %= *(_QWORD *)&v119;
                            }
                            else
                            {
                              v134 &= v126;
                            }
                            if (v134 != v120)
                            {
                              *(_QWORD *)(*v938 + 8 * v134) = v130;
                              v133 = (uint64_t *)*v125;
                            }
                          }
                          *v130 = (uint64_t)v133;
                          *v125 = 0;
                          --*(_QWORD *)(v944 + 432);
                          v135 = (_QWORD *)v125[6];
                          if (v135)
                          {
                            do
                            {
                              v136 = (_QWORD *)*v135;
                              operator delete(v135);
                              v135 = v136;
                            }
                            while (v136);
                          }
                          v137 = (void *)v125[4];
                          v125[4] = 0;
                          if (v137)
                            operator delete(v137);
                          operator delete(v125);
                          break;
                        }
                      }
                      else
                      {
                        if (v128 >= *(_QWORD *)&v119)
                          v128 %= *(_QWORD *)&v119;
                        if (v128 != v122)
                          break;
                      }
                      v125 = (uint64_t *)*v125;
                    }
                    while (v125);
                  }
                }
              }
            }
LABEL_44:
            v32 = (uint64_t *)*v32;
            v21 = v944;
          }
          while (v32);
        }
      }
LABEL_287:
      v138 = a3;
      if (BYTE2(v962))
      {
        if (a7)
        {
          object[0] = "cv3d.recon.";
          object[1] = (void *)11;
          object[2] = "PRR.Simplification.BeforeSimplification";
          object[3] = (void *)39;
          sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, &v1014);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v139 = sub_2241471F8();
            v140 = v139[2];
            if (!v140)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v140 = v139[2];
            }
            v141 = *(_QWORD *)(v140 + 64);
            v142 = (std::mutex *)(v141 + 32);
            std::mutex::lock((std::mutex *)(v141 + 32));
            v144 = *(_QWORD *)(v141 + 96);
            v143 = *(_QWORD *)(v141 + 104);
            std::mutex::unlock(v142);
            if (v144 != v143)
            {
              sub_2241471F8();
              v145 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
              v138 = a3;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v145 + 24))(v145))
              {
                memset(__p, 0, sizeof(__p));
                LODWORD(v975) = 728325608;
                kdebug_trace();
                v967[0] = (void *)v958;
                *(_QWORD *)&v968 = 0;
                sub_2241498F4((uint64_t)object, 0);
                sub_22392E874(object, (uint64_t)v967);
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v145 + 24))(v145))
                {
                  *(_QWORD *)v993 = (uint64_t)((double)a6 / 1000000000.0 * 1000000000.0);
                  *(_QWORD *)&v993[8] = 2;
                  v146 = sub_2241471F8();
                  sub_2238BB49C((uint64_t)v146, v145, (uint64_t)object, (uint64_t)&unk_2245C9EFE, (__int128 *)v993);
                }
                sub_22316F8F4((uint64_t *)object);
                kdebug_trace();
              }
            }
          }
          memset(__p, 0, sizeof(__p));
          LODWORD(v975) = 728325624;
          kdebug_trace();
          size = HIBYTE(v1014.__r_.__value_.__r.__words[2]);
          if ((v1014.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v1014.__r_.__value_.__l.__size_;
          if (size >= 0x11)
          {
            v148 = &v1014;
            if ((v1014.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v148 = (std::string *)v1014.__r_.__value_.__r.__words[0];
            v149 = v148->__r_.__value_.__r.__words[0];
            v150 = v148->__r_.__value_.__l.__size_;
            v151 = v148->__r_.__value_.__s.__data_[16];
            v152 = v149 == 0x6365722E64337663 && v150 == 0x73746174532E6E6FLL;
            if (v152 && v151 == 46)
            {
              sub_223187510();
              v967[0] = (void *)v958;
              *(_QWORD *)&v968 = 0;
              sub_2241498F4((uint64_t)object, 0);
              sub_22392E874(object, (uint64_t)v967);
              sub_22316F8F4((uint64_t *)object);
            }
          }
          kdebug_trace();
          if (SHIBYTE(v1014.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1014.__r_.__value_.__l.__data_);
        }
        sub_223999020(*((float32_t *)&v962 + 1), (float)v963, (uint64_t)object, v138, (uint64_t)v957, (_QWORD *)(v21 + 216), BYTE3(v962));
      }
      if (v965)
      {
        if (HIBYTE(v964))
          sub_2239805A4(v138, (uint64_t *)(v21 + 408), a11, a12, v919, (uint64_t)object, a10, *((float *)&v963 + 1));
        else
          sub_22397FF08(a11, a12, v919, (uint64_t)object, a10, *((float *)&v963 + 1));
        *(_QWORD *)__p = v21 + 136;
        v154 = sub_223939EBC((uint64_t)v957, (int *)(v21 + 136), (uint64_t)&unk_2245BA939, (uint64_t **)__p);
      }
      else
      {
        if (!*(_BYTE *)(v21 + 160))
          goto LABEL_334;
        if (*(_QWORD *)(v21 + 432))
        {
          v155 = *(_QWORD **)(v21 + 424);
          if (v155)
          {
            do
            {
              v158 = (_QWORD *)*v155;
              v159 = (_QWORD *)v155[6];
              if (v159)
              {
                do
                {
                  v160 = (_QWORD *)*v159;
                  operator delete(v159);
                  v159 = v160;
                }
                while (v160);
              }
              v161 = (void *)v155[4];
              v155[4] = 0;
              if (v161)
                operator delete(v161);
              operator delete(v155);
              v155 = v158;
            }
            while (v158);
          }
          *(_QWORD *)(v21 + 424) = 0;
          v156 = *(_QWORD *)(v21 + 416);
          if (v156)
          {
            for (m = 0; m != v156; ++m)
              *(_QWORD *)(*(_QWORD *)(v21 + 408) + 8 * m) = 0;
          }
          *(_QWORD *)(v21 + 432) = 0;
        }
        sub_2241498F4((uint64_t)object, 0);
        *(_QWORD *)__p = v21 + 136;
        v154 = sub_223939EBC((uint64_t)v957, (int *)(v21 + 136), (uint64_t)&unk_2245BA939, (uint64_t **)__p);
      }
      sub_2237C2E74(v154 + 4, (uint64_t)object);
      sub_22316F8F4((uint64_t *)object);
LABEL_334:
      *(_OWORD *)v950 = 0u;
      *(_OWORD *)v951 = 0u;
      v952 = 1065353216;
      v949 = 0;
      v162 = (uint64_t *)v958;
      if ((_QWORD)v958)
      {
        v939 = (_QWORD *)(v944 + 168);
        v915 = (int *)(v944 + 44);
        v911 = (int *)(v944 + 48);
        do
        {
          *((_DWORD *)v162 + 34) = 1;
          sub_223CD8718(v162 + 4, (unsigned int **)v162 + 18, (int32x2_t **)v162 + 13);
          if (v162[18] != v162[19])
            ++v949;
          if (!a7 || !*(_BYTE *)(v944 + 8))
            goto LABEL_596;
          v163 = atomic_load((unsigned __int8 *)&qword_2540CCA80);
          if ((v163 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCA80))
          {
            qword_2540CCAA8 = 0;
            qword_2540CCAA0 = 0;
            qword_2540CCA98 = (uint64_t)&qword_2540CCAA0;
            __cxa_atexit((void (*)(void *))sub_223986C88, &qword_2540CCA98, &dword_22314D000);
            __cxa_guard_release(&qword_2540CCA80);
          }
          if (!qword_2540CCAA8)
          {
            v178 = 0;
            v179 = 0;
            *(_OWORD *)object = xmmword_2246566D0;
            *(_OWORD *)&object[2] = xmmword_2246566E0;
            *(_OWORD *)&object[4] = xmmword_2246566F0;
            LODWORD(v997) = 50201368;
            WORD2(v997) = 767;
            v180 = qword_2540CCAA0;
            do
            {
              v181 = (_WORD *)object + v179;
              if (v180)
              {
                v182 = *(unsigned __int8 *)v181;
                v183 = v180;
                while (1)
                {
                  while (1)
                  {
                    v185 = (uint64_t *)v183;
                    v186 = *(unsigned __int8 *)(v183 + 25);
                    if (v182 >= v186)
                      break;
                    v183 = *v185;
                    v184 = v185;
                    if (!*v185)
                      goto LABEL_384;
                  }
                  if (v186 >= v182)
                    break;
                  v183 = v185[1];
                  if (!v183)
                  {
                    v184 = v185 + 1;
                    goto LABEL_384;
                  }
                }
              }
              else
              {
                v185 = &qword_2540CCAA0;
                v184 = &qword_2540CCAA0;
LABEL_384:
                v187 = (char *)operator new(0x20uLL);
                *(_WORD *)(v187 + 25) = *v181;
                *(_QWORD *)v187 = 0;
                *((_QWORD *)v187 + 1) = 0;
                *((_QWORD *)v187 + 2) = v185;
                *v184 = (uint64_t)v187;
                if (*(_QWORD *)qword_2540CCA98)
                {
                  qword_2540CCA98 = *(_QWORD *)qword_2540CCA98;
                  v187 = (char *)*v184;
                }
                v188 = qword_2540CCAA0;
                v152 = v187 == (char *)qword_2540CCAA0;
                v187[24] = v187 == (char *)qword_2540CCAA0;
                if (!v152)
                {
                  do
                  {
                    v189 = *((_QWORD *)v187 + 2);
                    if (*(_BYTE *)(v189 + 24))
                      break;
                    v190 = *(_BYTE **)(v189 + 16);
                    v191 = *(_QWORD *)v190;
                    if (*(_QWORD *)v190 == v189)
                    {
                      v194 = *((_QWORD *)v190 + 1);
                      if (!v194 || (v195 = *(unsigned __int8 *)(v194 + 24), v192 = (_BYTE *)(v194 + 24), v195))
                      {
                        if (*(char **)v189 == v187)
                        {
                          *(_BYTE *)(v189 + 24) = 1;
                          v190[24] = 0;
                          v198 = *(_QWORD *)(v189 + 8);
                          *(_QWORD *)v190 = v198;
                          if (v198)
                            goto LABEL_401;
                        }
                        else
                        {
                          v196 = *(uint64_t **)(v189 + 8);
                          v197 = *v196;
                          *(_QWORD *)(v189 + 8) = *v196;
                          if (v197)
                          {
                            *(_QWORD *)(v197 + 16) = v189;
                            v190 = *(_BYTE **)(v189 + 16);
                          }
                          v196[2] = (uint64_t)v190;
                          *(_QWORD *)(*(_QWORD *)(v189 + 16) + 8 * (**(_QWORD **)(v189 + 16) != v189)) = v196;
                          *v196 = v189;
                          *(_QWORD *)(v189 + 16) = v196;
                          v190 = (_BYTE *)v196[2];
                          v189 = *(_QWORD *)v190;
                          *((_BYTE *)v196 + 24) = 1;
                          v190[24] = 0;
                          v198 = *(_QWORD *)(v189 + 8);
                          *(_QWORD *)v190 = v198;
                          if (v198)
LABEL_401:
                            *(_QWORD *)(v198 + 16) = v190;
                        }
                        *(_QWORD *)(v189 + 16) = *((_QWORD *)v190 + 2);
                        *(_QWORD *)(*((_QWORD *)v190 + 2) + 8 * (**((_QWORD **)v190 + 2) != (_QWORD)v190)) = v189;
                        *(_QWORD *)(v189 + 8) = v190;
LABEL_373:
                        *((_QWORD *)v190 + 2) = v189;
                        break;
                      }
                    }
                    else if (!v191 || (v193 = *(unsigned __int8 *)(v191 + 24), v192 = (_BYTE *)(v191 + 24), v193))
                    {
                      if (*(char **)v189 == v187)
                      {
                        v200 = *((_QWORD *)v187 + 1);
                        *(_QWORD *)v189 = v200;
                        if (v200)
                        {
                          *(_QWORD *)(v200 + 16) = v189;
                          v190 = *(_BYTE **)(v189 + 16);
                        }
                        *((_QWORD *)v187 + 2) = v190;
                        *(_QWORD *)(*(_QWORD *)(v189 + 16) + 8 * (**(_QWORD **)(v189 + 16) != v189)) = v187;
                        *((_QWORD *)v187 + 1) = v189;
                        *(_QWORD *)(v189 + 16) = v187;
                        v190 = (_BYTE *)*((_QWORD *)v187 + 2);
                        v187[24] = 1;
                        v190[24] = 0;
                        v189 = *((_QWORD *)v190 + 1);
                        v199 = *(char **)v189;
                        *((_QWORD *)v190 + 1) = *(_QWORD *)v189;
                        if (!v199)
                          goto LABEL_372;
                      }
                      else
                      {
                        *(_BYTE *)(v189 + 24) = 1;
                        v190[24] = 0;
                        v189 = *((_QWORD *)v190 + 1);
                        v199 = *(char **)v189;
                        *((_QWORD *)v190 + 1) = *(_QWORD *)v189;
                        if (!v199)
                          goto LABEL_372;
                      }
                      *((_QWORD *)v199 + 2) = v190;
LABEL_372:
                      *(_QWORD *)(v189 + 16) = *((_QWORD *)v190 + 2);
                      *(_QWORD *)(*((_QWORD *)v190 + 2) + 8 * (**((_QWORD **)v190 + 2) != (_QWORD)v190)) = v189;
                      *(_QWORD *)v189 = v190;
                      goto LABEL_373;
                    }
                    *(_BYTE *)(v189 + 24) = 1;
                    v187 = v190;
                    v190[24] = v190 == (_BYTE *)v188;
                    *v192 = 1;
                  }
                  while (v190 != (_BYTE *)v188);
                }
                qword_2540CCAA8 = ++v178;
                v180 = qword_2540CCAA0;
              }
              ++v179;
            }
            while (v179 != 27);
          }
          LOBYTE(v945[0]) = 0;
          v967[1] = 0;
          *(_QWORD *)&v968 = 0;
          v967[0] = &v967[1];
          v164 = *v915;
          if (*v915 != -1)
          {
            v165 = *v915;
            v166 = qword_2540CCAA0;
            if (!qword_2540CCAA0)
              goto LABEL_1541;
            v167 = &qword_2540CCAA0;
            do
            {
              v168 = *(unsigned __int8 *)(v166 + 25);
              v169 = v168 >= v165;
              if (v168 >= v165)
                v170 = (uint64_t *)v166;
              else
                v170 = (uint64_t *)(v166 + 8);
              if (v169)
                v167 = (uint64_t *)v166;
              v166 = *v170;
            }
            while (*v170);
            if (v167 == &qword_2540CCAA0 || *((unsigned __int8 *)v167 + 25) > v165)
            {
LABEL_1541:
              v167 = &qword_2540CCAA0;
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/PRRImpl.cpp", 268, (uint64_t)"iter_src != default_confusion_table.end()", 41, (uint64_t)"Invalid source material label.", 30, (void (*)(void **))sub_22457406C))
              {
LABEL_1501:
                abort();
              }
            }
            v171 = *v911;
            if ((*v911 + 1) >= 0x1B)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/PRRImpl.cpp", 273, (uint64_t)"config_.material_label_to_switch_target >= PRRConfig::kInvalidMaterialLabel && config_.material_label_to_switch_target < static_cast<int32_t>(MaterialLabel::NumValidLabels)", 172, (uint64_t)"Invalid target material label.", 30, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_1501;
              }
              v171 = *v911;
            }
            if (v171 == -1)
            {
              v201 = *((_BYTE *)v167 + 26);
              v202 = (void **)v967[1];
              v203 = &v967[1];
LABEL_414:
              v204 = v203;
              if (v202)
              {
                while (1)
                {
                  v203 = v202;
                  v205 = *((unsigned __int8 *)v202 + 25);
                  if (v205 > v165)
                  {
                    v202 = (void **)*v203;
                    goto LABEL_414;
                  }
                  if (v205 >= v165)
                    break;
                  v202 = (void **)v203[1];
                  if (!v202)
                  {
                    v204 = v203 + 1;
                    goto LABEL_419;
                  }
                }
                *((_BYTE *)v203 + 26) = v201;
              }
              else
              {
LABEL_419:
                v206 = (char *)operator new(0x20uLL);
                *(_WORD *)(v206 + 25) = v165;
                *(_QWORD *)v206 = 0;
                *((_QWORD *)v206 + 1) = 0;
                *((_QWORD *)v206 + 2) = v203;
                *v204 = v206;
                v207 = (uint64_t *)v206;
                if (*(_QWORD *)v967[0])
                {
                  v967[0] = *(void **)v967[0];
                  v207 = (uint64_t *)*v204;
                }
                sub_2231A9A8C((uint64_t *)v967[1], v207);
                *(_QWORD *)&v968 = v968 + 1;
                v206[26] = v201;
              }
            }
            else
            {
              v172 = (void **)v967[1];
              v173 = &v967[1];
LABEL_362:
              v174 = v173;
              if (v172)
              {
                while (1)
                {
                  v173 = v172;
                  v175 = *((unsigned __int8 *)v172 + 25);
                  if (v175 > v165)
                  {
                    v172 = (void **)*v173;
                    goto LABEL_362;
                  }
                  if (v175 >= v165)
                    break;
                  v172 = (void **)v173[1];
                  if (!v172)
                  {
                    v174 = v173 + 1;
                    goto LABEL_367;
                  }
                }
                v176 = (char *)v173;
              }
              else
              {
LABEL_367:
                v176 = (char *)operator new(0x20uLL);
                *(_WORD *)(v176 + 25) = v165;
                *(_QWORD *)v176 = 0;
                *((_QWORD *)v176 + 1) = 0;
                *((_QWORD *)v176 + 2) = v173;
                *v174 = v176;
                v177 = (uint64_t *)v176;
                if (*(_QWORD *)v967[0])
                {
                  v967[0] = *(void **)v967[0];
                  v177 = (uint64_t *)*v174;
                }
                sub_2231A9A8C((uint64_t *)v967[1], v177);
                *(_QWORD *)&v968 = v968 + 1;
              }
              v176[26] = v171;
            }
            LOBYTE(v945[0]) = 1;
          }
          v208 = (_BYTE *)v162[39];
          v209 = (_BYTE *)v162[40];
          if (v208 != v209)
          {
            v210 = (uint64_t *)&v967[1];
            if (v164 == -1)
              v210 = &qword_2540CCAA0;
            v211 = *v210;
            if (*v210)
            {
LABEL_429:
              v212 = *v208;
              v213 = v210;
              do
              {
                v214 = (uint64_t *)v211;
                v215 = v213;
                v216 = *(unsigned __int8 *)(v211 + 25);
                v217 = (uint64_t *)(v211 + 8);
                if (v216 >= v212)
                {
                  v217 = v214;
                  v213 = v214;
                }
                v211 = *v217;
              }
              while (v211);
              if (v213 != v210)
              {
                v218 = v216 >= v212 ? v214 : v215;
                if (v212 >= *((unsigned __int8 *)v218 + 25))
                {
                  if (v216 >= v212)
                    v219 = v214;
                  else
                    v219 = v215;
                  *v208 = *((_BYTE *)v219 + 26);
                }
              }
              while (++v208 != v209)
              {
                v211 = *v210;
                if (*v210)
                  goto LABEL_429;
              }
            }
          }
          object[0] = "cv3d.recon.";
          object[1] = (void *)11;
          object[2] = "Stats.PRR.ApplyWrongLabel";
          object[3] = (void *)25;
          sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)__p);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v220 = sub_2241471F8();
            v221 = v220[2];
            if (!v221)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v221 = v220[2];
            }
            v222 = *(_QWORD *)(v221 + 64);
            v223 = (std::mutex *)(v222 + 32);
            std::mutex::lock((std::mutex *)(v222 + 32));
            v225 = *(_QWORD *)(v222 + 96);
            v224 = *(_QWORD *)(v222 + 104);
            std::mutex::unlock(v223);
            if (v225 != v224)
            {
              sub_2241471F8();
              v226 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v226 + 24))(v226))
              {
                memset(object, 0, 32);
                LODWORD(object[4]) = 728325608;
                kdebug_trace();
                sub_223986CB0(v226, v915, "config_source");
                kdebug_trace();
              }
            }
          }
          memset(object, 0, 32);
          LODWORD(object[4]) = 728325624;
          kdebug_trace();
          v227 = __p[23];
          if (__p[23] < 0)
            v227 = *(_QWORD *)&__p[8];
          if (v227 >= 0x11)
          {
            v228 = __p;
            if (__p[23] < 0)
              v228 = *(_BYTE **)__p;
            v229 = *(_QWORD *)v228;
            v230 = *((_QWORD *)v228 + 1);
            v231 = v228[16];
            if (v229 == 0x6365722E64337663 && v230 == 0x73746174532E6E6FLL && v231 == 46)
            {
              v234 = sub_223187510();
              if (__p[23] >= 0)
                v235 = __p;
              else
                v235 = *(_BYTE **)__p;
              if (__p[23] >= 0)
                v236 = __p[23];
              else
                v236 = *(_QWORD *)&__p[8];
              sub_22361F5C4(v234, v235, v236, v915, (uint64_t)"config_source", 13);
            }
          }
          kdebug_trace();
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          object[0] = "cv3d.recon.";
          object[1] = (void *)11;
          object[2] = "Stats.PRR.ApplyWrongLabel";
          object[3] = (void *)25;
          sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)__p);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v237 = sub_2241471F8();
            v238 = v237[2];
            if (!v238)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v238 = v237[2];
            }
            v239 = *(_QWORD *)(v238 + 64);
            v240 = (std::mutex *)(v239 + 32);
            std::mutex::lock((std::mutex *)(v239 + 32));
            v242 = *(_QWORD *)(v239 + 96);
            v241 = *(_QWORD *)(v239 + 104);
            std::mutex::unlock(v240);
            if (v242 != v241)
            {
              sub_2241471F8();
              v243 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v243 + 24))(v243))
              {
                memset(object, 0, 32);
                LODWORD(object[4]) = 728325608;
                kdebug_trace();
                sub_223986CB0(v243, v911, "config_target");
                kdebug_trace();
              }
            }
          }
          memset(object, 0, 32);
          LODWORD(object[4]) = 728325624;
          kdebug_trace();
          v244 = __p[23];
          if (__p[23] < 0)
            v244 = *(_QWORD *)&__p[8];
          if (v244 >= 0x11)
          {
            v245 = __p;
            if (__p[23] < 0)
              v245 = *(_BYTE **)__p;
            v246 = *(_QWORD *)v245;
            v247 = *((_QWORD *)v245 + 1);
            v248 = v245[16];
            if (v246 == 0x6365722E64337663 && v247 == 0x73746174532E6E6FLL && v248 == 46)
            {
              v251 = sub_223187510();
              if (__p[23] >= 0)
                v252 = __p;
              else
                v252 = *(_BYTE **)__p;
              if (__p[23] >= 0)
                v253 = __p[23];
              else
                v253 = *(_QWORD *)&__p[8];
              sub_22361F5C4(v251, v252, v253, v911, (uint64_t)"config_target", 13);
            }
          }
          kdebug_trace();
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          object[0] = "cv3d.recon.";
          object[1] = (void *)11;
          object[2] = "Stats.PRR.ApplyWrongLabel";
          object[3] = (void *)25;
          sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, &v1014);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v254 = sub_2241471F8();
            v255 = v254[2];
            if (!v255)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v255 = v254[2];
            }
            v256 = *(_QWORD *)(v255 + 64);
            v257 = (std::mutex *)(v256 + 32);
            std::mutex::lock((std::mutex *)(v256 + 32));
            v259 = *(_QWORD *)(v256 + 96);
            v258 = *(_QWORD *)(v256 + 104);
            std::mutex::unlock(v257);
            if (v259 != v258)
            {
              sub_2241471F8();
              v260 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v260 + 24))(v260))
              {
                memset(object, 0, 32);
                LODWORD(object[4]) = 728325608;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v260 + 24))(v260))
                {
                  __p[23] = 16;
                  strcpy(__p, "use_custom_table");
                  *(_QWORD *)v993 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *(_QWORD *)&v993[8] = 2;
                  v261 = sub_2241471F8();
                  sub_22393AEE8((uint64_t)v261, v260, (char *)v945, (uint64_t)__p, (__int128 *)v993);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
                kdebug_trace();
              }
            }
          }
          memset(object, 0, 32);
          LODWORD(object[4]) = 728325624;
          kdebug_trace();
          v262 = HIBYTE(v1014.__r_.__value_.__r.__words[2]);
          if ((v1014.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v262 = v1014.__r_.__value_.__l.__size_;
          if (v262 >= 0x11)
          {
            v263 = &v1014;
            if ((v1014.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v263 = (std::string *)v1014.__r_.__value_.__r.__words[0];
            v264 = v263->__r_.__value_.__r.__words[0];
            v265 = v263->__r_.__value_.__l.__size_;
            v266 = v263->__r_.__value_.__s.__data_[16];
            if (v264 == 0x6365722E64337663 && v265 == 0x73746174532E6E6FLL && v266 == 46)
            {
              v269 = sub_223187510();
              if ((v1014.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v270 = &v1014;
              else
                v270 = (std::string *)v1014.__r_.__value_.__r.__words[0];
              if ((v1014.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v271 = HIBYTE(v1014.__r_.__value_.__r.__words[2]);
              else
                v271 = v1014.__r_.__value_.__l.__size_;
              sub_223189538((uint64_t *)v269, v270, v271, (char *)v945, (uint64_t)"use_custom_table", 16);
            }
          }
          kdebug_trace();
          if (SHIBYTE(v1014.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v1014.__r_.__value_.__l.__data_);
            if (LOBYTE(v945[0]))
            {
LABEL_537:
              object[0] = "cv3d.recon.";
              object[1] = (void *)11;
              object[2] = "Stats.PRR.ApplyWrongLabel";
              object[3] = (void *)25;
              sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)__p);
              sub_224569D7C();
              sub_224569A80();
              if (os_variant_has_internal_diagnostics())
              {
                v272 = sub_2241471F8();
                v273 = v272[2];
                if (!v273)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v273 = v272[2];
                }
                v274 = *(_QWORD *)(v273 + 64);
                v275 = (std::mutex *)(v274 + 32);
                std::mutex::lock((std::mutex *)(v274 + 32));
                v277 = *(_QWORD *)(v274 + 96);
                v276 = *(_QWORD *)(v274 + 104);
                std::mutex::unlock(v275);
                if (v277 != v276)
                {
                  sub_2241471F8();
                  v278 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v278 + 24))(v278))
                  {
                    memset(object, 0, 32);
                    LODWORD(object[4]) = 728325608;
                    kdebug_trace();
                    LODWORD(v1014.__r_.__value_.__l.__data_) = *((unsigned __int8 *)v967[0] + 25);
                    sub_223986DF8(v278, (int *)&v1014, "source");
                    kdebug_trace();
                  }
                }
              }
              memset(object, 0, 32);
              LODWORD(object[4]) = 728325624;
              kdebug_trace();
              v279 = __p[23];
              if (__p[23] < 0)
                v279 = *(_QWORD *)&__p[8];
              if (v279 >= 0x11)
              {
                v280 = __p;
                if (__p[23] < 0)
                  v280 = *(_BYTE **)__p;
                v281 = *(_QWORD *)v280;
                v282 = *((_QWORD *)v280 + 1);
                v283 = v280[16];
                if (v281 == 0x6365722E64337663 && v282 == 0x73746174532E6E6FLL && v283 == 46)
                {
                  v286 = sub_223187510();
                  if (__p[23] >= 0)
                    v287 = __p;
                  else
                    v287 = *(_BYTE **)__p;
                  if (__p[23] >= 0)
                    v288 = __p[23];
                  else
                    v288 = *(_QWORD *)&__p[8];
                  LODWORD(v1014.__r_.__value_.__l.__data_) = *((unsigned __int8 *)v967[0] + 25);
                  sub_22361F5C4(v286, v287, v288, (int *)&v1014, (uint64_t)"source", 6);
                }
              }
              kdebug_trace();
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              object[0] = "cv3d.recon.";
              object[1] = (void *)11;
              object[2] = "Stats.PRR.ApplyWrongLabel";
              object[3] = (void *)25;
              sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)__p);
              sub_224569D7C();
              sub_224569A80();
              if (os_variant_has_internal_diagnostics())
              {
                v289 = sub_2241471F8();
                v290 = v289[2];
                if (!v290)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v290 = v289[2];
                }
                v291 = *(_QWORD *)(v290 + 64);
                v292 = (std::mutex *)(v291 + 32);
                std::mutex::lock((std::mutex *)(v291 + 32));
                v294 = *(_QWORD *)(v291 + 96);
                v293 = *(_QWORD *)(v291 + 104);
                std::mutex::unlock(v292);
                if (v294 != v293)
                {
                  sub_2241471F8();
                  v295 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v295 + 24))(v295))
                  {
                    memset(object, 0, 32);
                    LODWORD(object[4]) = 728325608;
                    kdebug_trace();
                    LODWORD(v1014.__r_.__value_.__l.__data_) = *((unsigned __int8 *)v967[0] + 26);
                    sub_223986DF8(v295, (int *)&v1014, "target");
                    kdebug_trace();
                  }
                }
              }
              memset(object, 0, 32);
              LODWORD(object[4]) = 728325624;
              kdebug_trace();
              v296 = __p[23];
              if (__p[23] < 0)
                v296 = *(_QWORD *)&__p[8];
              if (v296 >= 0x11)
              {
                v297 = __p;
                if (__p[23] < 0)
                  v297 = *(_BYTE **)__p;
                v298 = *(_QWORD *)v297;
                v299 = *((_QWORD *)v297 + 1);
                v300 = v297[16];
                if (v298 == 0x6365722E64337663 && v299 == 0x73746174532E6E6FLL && v300 == 46)
                {
                  v303 = sub_223187510();
                  if (__p[23] >= 0)
                    v304 = __p;
                  else
                    v304 = *(_BYTE **)__p;
                  if (__p[23] >= 0)
                    v305 = __p[23];
                  else
                    v305 = *(_QWORD *)&__p[8];
                  LODWORD(v1014.__r_.__value_.__l.__data_) = *((unsigned __int8 *)v967[0] + 26);
                  sub_22361F5C4(v303, v304, v305, (int *)&v1014, (uint64_t)"target", 6);
                }
              }
              kdebug_trace();
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
          }
          else if (LOBYTE(v945[0]))
          {
            goto LABEL_537;
          }
          sub_2233FADDC((_QWORD *)v967[1]);
LABEL_596:
          if (*(_DWORD *)(v944 + 120) == 2 && v162[18] != v162[19] && *((_DWORD *)v162 + 96) == 1)
            sub_223CE8414((uint64_t)(v162 + 4));
          v306 = sub_22393835C(v939, (int *)v162 + 4);
          if (v926)
            goto LABEL_1542;
          if (!v306)
            goto LABEL_1542;
          object[0] = v306 + 4;
          object[1] = v306 + 8;
          object[2] = v306 + 12;
          object[3] = v306 + 13;
          object[4] = v306 + 17;
          object[5] = v306 + 18;
          v997 = v306 + 22;
          v998 = (unint64_t)(v306 + 26);
          v999 = v306 + 30;
          v1000 = (float32x2_t *)(v306 + 34);
          v1001 = v306 + 38;
          v1002 = v306 + 39;
          v1003 = v306 + 43;
          v1004 = v306 + 44;
          v1005 = v306 + 48;
          v1006 = (char *)v306 + 388;
          *(_QWORD *)__p = v162 + 4;
          *(_QWORD *)&__p[8] = v162 + 8;
          *(_QWORD *)&__p[16] = v162 + 12;
          *(_QWORD *)&__p[24] = v162 + 13;
          v975 = (const char *)(v162 + 17);
          v976 = (std::string::size_type)(v162 + 18);
          v977 = (const char *)(v162 + 22);
          v978 = v162 + 26;
          v979 = (std::__shared_weak_count *)(v162 + 30);
          v980 = (const char **)(v162 + 34);
          v981 = v162 + 38;
          v982 = v162 + 39;
          v983 = v162 + 43;
          v984 = v162 + 44;
          v985 = v162 + 48;
          v986 = (uint64_t)v162 + 388;
          if (!sub_2239943E0((uint64_t)v967, (uint64_t)object, (uint64_t)__p))
          {
LABEL_1542:
            sub_22390246C((uint64_t)v950, (int *)v162 + 4, (uint64_t)(v162 + 2));
            v307 = sub_223995A9C((uint64_t)v939, (int *)v162 + 4, (uint64_t)(v162 + 2), (uint64_t)(v162 + 4));
            if (!v308)
              sub_2237C2E74(v307 + 4, (uint64_t)(v162 + 4));
          }
          v162 = (uint64_t *)*v162;
        }
        while (v162);
      }
      if (a7)
        v309 = (double)a6 / 1000000000.0;
      else
        v309 = 0.0;
      sub_22398615C(v993);
      nn = (float32x2_t *)v944;
      if (**(int **)(*(_QWORD *)v993 + 56) > 3)
        goto LABEL_708;
      v316 = *(unsigned __int8 *)(*(_QWORD *)v993 + 72);
      v317 = sub_22322F254(*(uint64_t *)v993, "OSLogSurrogateAppender", 1, 0);
      v318 = v317;
      if (!v316 && !v317)
        goto LABEL_708;
      *(_QWORD *)__p = v993;
      *(std::chrono::steady_clock::time_point *)&__p[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&__p[16] = std::chrono::system_clock::now();
      *(_DWORD *)&__p[24] = 3;
      v975 = "unknown file";
      LODWORD(v976) = 605;
      v979 = 0;
      v977 = "unknown function";
      v978 = 0;
      v319 = **(_QWORD **)__p;
      v320 = (const char *)(**(_QWORD **)__p + 16);
      v936 = v320;
      if (*(char *)(**(_QWORD **)__p + 39) < 0)
      {
        v320 = *(const char **)(v319 + 16);
        v321 = *(_QWORD *)(v319 + 24);
        v940 = (void *)*((_QWORD *)&v958 + 1);
        v327 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v327 & 1) != 0)
          goto LABEL_627;
      }
      else
      {
        v321 = *(unsigned __int8 *)(**(_QWORD **)__p + 39);
        v940 = (void *)*((_QWORD *)&v958 + 1);
        v322 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v322 & 1) != 0)
          goto LABEL_627;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        nn = (float32x2_t *)v944;
      }
LABEL_627:
      if (byte_255788F57 >= 0)
        v328 = (const char *)&xmmword_255788F40;
      else
        v328 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v329 = byte_255788F57;
      else
        v329 = *((_QWORD *)&xmmword_255788F40 + 1);
      object[0] = os_log_create(v328, v320);
      v330 = &object[1];
      if (v329 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v329 >= 0x17)
      {
        v331 = (v329 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v329 | 7) != 0x17)
          v331 = v329 | 7;
        v332 = v331 + 1;
        v330 = (void **)operator new(v331 + 1);
        object[3] = (void *)(v332 | 0x8000000000000000);
        object[1] = v330;
        object[2] = (void *)v329;
        nn = (float32x2_t *)v944;
      }
      else
      {
        HIBYTE(object[3]) = v329;
        if (!v329)
          goto LABEL_641;
      }
      memmove(v330, v328, v329);
LABEL_641:
      *((_BYTE *)v330 + v329) = 0;
      LOBYTE(object[4]) = 1;
      v333 = &object[5];
      if (v321 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v321 >= 0x17)
      {
        v335 = (v321 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v321 | 7) != 0x17)
          v335 = v321 | 7;
        v336 = v335 + 1;
        v333 = (void **)operator new(v335 + 1);
        v998 = v336 | 0x8000000000000000;
        object[5] = v333;
        v997 = (uint64_t *)v321;
      }
      else
      {
        HIBYTE(v998) = v321;
        if (!v321)
        {
          LOBYTE(object[5]) = 0;
          LOBYTE(v999) = 1;
          v334 = object[0];
          if ((SHIBYTE(v998) & 0x80000000) == 0)
            goto LABEL_645;
          goto LABEL_651;
        }
      }
      memmove(v333, v320, v321);
      *((_BYTE *)v333 + v321) = 0;
      LOBYTE(v999) = 1;
      v334 = object[0];
      if ((SHIBYTE(v998) & 0x80000000) == 0)
      {
LABEL_645:
        if (!LOBYTE(object[4]))
          goto LABEL_654;
        goto LABEL_652;
      }
LABEL_651:
      operator delete(object[5]);
      if (!LOBYTE(object[4]))
        goto LABEL_654;
LABEL_652:
      if (SHIBYTE(object[3]) < 0)
        operator delete(object[1]);
LABEL_654:
      if (object[0])
        os_release(object[0]);
      if (v318 && *(_QWORD *)(v318 + 24))
      {
        v337 = _os_log_pack_size();
        v338 = (std::__shared_weak_count_vtbl *)operator new(v337, (std::align_val_t)8uLL);
        v339 = (std::__shared_weak_count *)operator new();
        v340 = v339;
        v339->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v339->__shared_owners_;
        v339->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v339->__shared_weak_owners_ = 0;
        v339[1].__vftable = v338;
        object[0] = v338;
        object[1] = v338;
        object[2] = v339;
        do
          v342 = __ldxr(p_shared_owners);
        while (__stxr(v342 + 1, p_shared_owners));
        memset(&object[3], 0, 24);
        do
          v343 = __ldaxr(p_shared_owners);
        while (__stlxr(v343 - 1, p_shared_owners));
        if (!v343)
        {
          ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
          std::__shared_weak_count::__release_weak(v340);
        }
        v344 = object[0];
        v345 = _os_log_pack_fill();
        v346 = nn[48].u8[4];
        v347 = v949;
        *(_DWORD *)v345 = 134219008;
        *(double *)(v345 + 4) = v309;
        *(_WORD *)(v345 + 12) = 1024;
        *(_DWORD *)(v345 + 14) = v926;
        *(_WORD *)(v345 + 18) = 1024;
        *(_DWORD *)(v345 + 20) = v346;
        *(_WORD *)(v345 + 24) = 2048;
        *(_QWORD *)(v345 + 26) = v940;
        *(_WORD *)(v345 + 34) = 1024;
        *(_DWORD *)(v345 + 36) = v347;
        v348 = (char *)operator new();
        v349 = *(unsigned __int8 *)(v319 + 39);
        v350 = v936;
        if ((v349 & 0x80u) != 0)
        {
          v350 = *(const char **)(v319 + 16);
          v349 = *(_QWORD *)(v319 + 24);
        }
        *(_QWORD *)v348 = v344;
        *(_OWORD *)(v348 + 8) = *(_OWORD *)&object[1];
        object[1] = 0;
        object[2] = 0;
        *(_OWORD *)(v348 + 24) = *(_OWORD *)&object[3];
        object[3] = 0;
        object[4] = 0;
        *((_QWORD *)v348 + 5) = v350;
        *((_QWORD *)v348 + 6) = v349;
        v348[56] = 1;
        v1014.__r_.__value_.__r.__words[0] = 0;
        v967[0] = v348;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v318 + 24) + 40))(*(_QWORD *)(v318 + 24), v967);
        v351 = v967[0];
        v967[0] = 0;
        if (v351)
        {
          v352 = (std::__shared_weak_count *)*((_QWORD *)v351 + 4);
          if (v352)
          {
            v353 = (unint64_t *)&v352->__shared_owners_;
            do
              v354 = __ldaxr(v353);
            while (__stlxr(v354 - 1, v353));
            if (!v354)
            {
              ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
              std::__shared_weak_count::__release_weak(v352);
            }
          }
          v355 = (std::__shared_weak_count *)*((_QWORD *)v351 + 2);
          if (v355)
          {
            v356 = (unint64_t *)&v355->__shared_owners_;
            do
              v357 = __ldaxr(v356);
            while (__stlxr(v357 - 1, v356));
            if (!v357)
            {
              ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
              std::__shared_weak_count::__release_weak(v355);
            }
          }
          MEMORY[0x227684CE8](v351, 0x10F0C40B62ED6C6);
          v358 = v1014.__r_.__value_.__r.__words[0];
          v1014.__r_.__value_.__r.__words[0] = 0;
          if (v358)
          {
            v359 = *(std::__shared_weak_count **)(v358 + 32);
            if (v359)
            {
              v360 = (unint64_t *)&v359->__shared_owners_;
              do
                v361 = __ldaxr(v360);
              while (__stlxr(v361 - 1, v360));
              if (!v361)
              {
                ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
                std::__shared_weak_count::__release_weak(v359);
              }
            }
            v362 = *(std::__shared_weak_count **)(v358 + 16);
            if (v362)
            {
              v363 = (unint64_t *)&v362->__shared_owners_;
              do
                v364 = __ldaxr(v363);
              while (__stlxr(v364 - 1, v363));
              if (!v364)
              {
                ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                std::__shared_weak_count::__release_weak(v362);
              }
            }
            MEMORY[0x227684CE8](v358, 0x10F0C40B62ED6C6);
          }
        }
        v365 = (std::__shared_weak_count *)object[4];
        if (object[4])
        {
          v366 = (unint64_t *)((char *)object[4] + 8);
          do
            v367 = __ldaxr(v366);
          while (__stlxr(v367 - 1, v366));
          if (!v367)
          {
            ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
            std::__shared_weak_count::__release_weak(v365);
          }
        }
        v368 = (std::__shared_weak_count *)object[2];
        if (object[2])
        {
          v369 = (unint64_t *)((char *)object[2] + 8);
          do
            v370 = __ldaxr(v369);
          while (__stlxr(v370 - 1, v369));
          if (!v370)
          {
            ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
            std::__shared_weak_count::__release_weak(v368);
          }
        }
      }
      else
      {
        os_log_type_enabled(v334, OS_LOG_TYPE_INFO);
        v371 = nn[48].u8[4];
        LODWORD(object[0]) = 134219008;
        *(void **)((char *)object + 4) = *(void **)&v309;
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v926;
        WORD1(object[2]) = 1024;
        HIDWORD(object[2]) = v371;
        LOWORD(object[3]) = 2048;
        *(void **)((char *)&object[3] + 2) = v940;
        WORD1(object[4]) = 1024;
        HIDWORD(object[4]) = v949;
        v372 = (void *)_os_log_send_and_compose_impl();
        if (v372)
          free(v372);
      }
      if (v316)
      {
        sub_22322C138((uint64_t)__p, "OCP:RS:t:%f, UA:%d CC:%d CM:%lu NE:%u", v309, v926, nn[48].u8[4], *((_QWORD *)&v958 + 1), v949);
        sub_223182C08((uint64_t)__p);
      }
      sub_223182C08((uint64_t)__p);
      v373 = v979;
      if (v979)
      {
        v374 = (unint64_t *)&v979->__shared_owners_;
        do
          v375 = __ldaxr(v374);
        while (__stlxr(v375 - 1, v374));
        if (!v375)
        {
          ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
          std::__shared_weak_count::__release_weak(v373);
        }
      }
LABEL_708:
      nn[20].i8[0] = v965;
      nn[26].i8[0] = 1;
      v376 = v908;
      *(_BYTE *)v908 = 0;
      *((_BYTE *)v908 + 32) = 0;
      if (!nn[6].i8[4] || nn[48].i8[4])
      {
        nn[48].i8[4] = 0;
        v967[0] = (void *)nn[23];
        *(_QWORD *)&v968 = 0;
        sub_2239908A8(nn, (uint64_t **)v967, (uint64_t)__p, v310, (int32x4_t)v311, v313, v314);
        *(_OWORD *)object = *(_OWORD *)__p;
        object[2] = *(void **)&__p[16];
        LOBYTE(object[3]) = __p[24];
        LOBYTE(object[4]) = 1;
        sub_2235628FC((char **)v908, (uint64_t)object);
        if (!LOBYTE(object[4]))
          goto LABEL_966;
        v377 = (char *)object[0];
        if (!object[0])
          goto LABEL_966;
        v378 = (char *)object[1];
        if (object[1] == object[0])
        {
          object[1] = object[0];
          operator delete(object[0]);
          if (a7)
            goto LABEL_967;
        }
        else
        {
          do
          {
            v379 = (std::__shared_weak_count *)*((_QWORD *)v378 - 12);
            if (v379)
            {
              v380 = (unint64_t *)&v379->__shared_owners_;
              do
                v381 = __ldaxr(v380);
              while (__stlxr(v381 - 1, v380));
              if (!v381)
              {
                ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                std::__shared_weak_count::__release_weak(v379);
              }
            }
            v378 -= 120;
          }
          while (v378 != v377);
          object[1] = v377;
          operator delete(object[0]);
          if (a7)
            goto LABEL_967;
        }
        goto LABEL_1435;
      }
      v382 = (int *)v951[0];
      memset(v993, 0, sizeof(v993));
      v994 = 1;
      v920 = nn[48].u8[0];
      if (nn[48].i8[0])
      {
        *(float32x2_t *)v310.i8 = *v904;
        v310.i32[2] = v904[1].i32[0];
        *(float32x2_t *)v311.i8 = v904[2];
        v311.i32[2] = v904[3].i32[0];
        v313.i32[0] = v904[5].i32[0];
        *(float32x2_t *)v314.f32 = v904[6];
        v314.i32[2] = v904[7].i32[0];
        v383.i64[0] = vzip1q_s32(v310, (int32x4_t)v311).u64[0];
        v384 = (int8x16_t)vnegq_f32(v314);
        v385 = (int8x16_t)vtrn2q_s32(v310, (int32x4_t)v311);
        v385.i32[2] = HIDWORD(*(_QWORD *)&v904[4]);
        v386 = (float32x4_t)vzip2q_s32(v310, (int32x4_t)v311);
        *(float32x2_t *)v387.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v383.f32, *(float *)v384.i32), *(float32x2_t *)v385.i8, *(float32x2_t *)v314.f32, 1), *(float32x2_t *)v386.f32, v314, 2);
        v386.i32[2] = v313.i32[0];
        v387.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(v904[4], *(float32x2_t *)v384.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v904[4], 1), *(float32x2_t *)v314.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v384, v384, 8uLL), v313);
        v383.i64[1] = *(_QWORD *)&v904[4];
        v388.i32[3] = 0;
        v388.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v385, 0).i32[3];
        *(uint64_t *)((char *)v388.i64 + 4) = vextq_s8(v385, v387, 4uLL).u64[0];
        v386.i64[1] = vdupq_laneq_s32((int32x4_t)v386, 2).u32[0];
        v387.i32[3] = 1.0;
        v941 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v383, COERCE_FLOAT(*(_OWORD *)nn[40].f32)), v388, nn[40], 1), v386, *(float32x4_t *)nn[40].f32, 2), (float32x4_t)v387, *(float32x4_t *)nn[40].f32, 3);
        v311 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v383, COERCE_FLOAT(*(_OWORD *)nn[42].f32)), v388, nn[42], 1), v386, *(float32x4_t *)nn[42].f32, 2), (float32x4_t)v387, *(float32x4_t *)nn[42].f32, 3);
        v312 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v383, COERCE_FLOAT(*(_OWORD *)nn[44].f32)), v388, nn[44], 1), v386, *(float32x4_t *)nn[44].f32, 2), (float32x4_t)v387, *(float32x4_t *)nn[44].f32, 3);
        v389 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v383, COERCE_FLOAT(*(_OWORD *)nn[46].f32)), v388, nn[46], 1), v386, *(float32x4_t *)nn[46].f32, 2), (float32x4_t)v387, *(float32x4_t *)nn[46].f32, 3);
        if (!v951[0])
          goto LABEL_923;
      }
      else
      {
        v389 = 0uLL;
        v941 = 0u;
        if (!v951[0])
          goto LABEL_923;
      }
      v912 = v389;
      v916 = (uint64_t)&nn[21];
      v390 = nn + 7;
      v906 = nn + 7;
      v934 = *(float32x2_t *)v312.i8;
      v937 = *(float32x2_t *)v311.i8;
      v927 = (float32x2_t)vextq_s8(v311, v311, 8uLL).u64[0];
      v930 = (float32x2_t)vextq_s8(v941, v941, 8uLL).u64[0];
      v923 = (float32x2_t)vextq_s8(v312, v312, 8uLL).u64[0];
      break;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/PRRImpl.cpp", 168, (uint64_t)"", 0, (uint64_t)"Invalid PRR preset.", 19, (void (*)(void **))sub_22457406C);
      abort();
  }
  do
  {
    object[0] = v382 + 4;
    v391 = sub_223939EBC(v916, v382 + 4, (uint64_t)&unk_2245BA939, (uint64_t **)object);
    v392 = v391[35] - v391[34];
    if (v392 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v391[19] - v391[18]) >> 2))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/PRRImpl.hpp", 45, (uint64_t)"chunk_mesh.semantics.size() == chunk_mesh.faces.size()", 54, (uint64_t)"The mesh must contain per-face semantics", 40, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1500;
      }
      v392 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v391[19] - v391[18]) >> 2);
    }
    if (v391[40] - v391[39] != v392
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/PRRImpl.hpp", 47, (uint64_t)"chunk_mesh.materials.size() == chunk_mesh.faces.size()", 54, (uint64_t)"The mesh must contain per-face materials", 40, (void (*)(void **))sub_22457406C)|| v391[14] - v391[13] != v391[5] - v391[4]&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/PRRImpl.hpp", 49, (uint64_t)"chunk_mesh.normals.size() == chunk_mesh.vertices.size()", 55, (uint64_t)"The mesh must contain per-vertex normals", 40, (void (*)(void **))sub_22457406C))
    {
LABEL_1500:
      abort();
    }
    v393 = (uint64_t)(v391[45] - v391[44]) >> 2;
    if (nn[15].i32[0] == 2)
    {
      if (v393 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v391[19] - v391[18]) >> 2))
        goto LABEL_742;
      v394 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/PRRImpl.hpp", 52, (uint64_t)"chunk_mesh.confidences.size() == chunk_mesh.faces.size()", 56, (uint64_t)"The mesh must contain per-face confidences", 42, (void (*)(void **))sub_22457406C);
    }
    else
    {
      if (v393 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v391[5] - v391[4]) >> 2))
        goto LABEL_742;
      v394 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/PRRImpl.hpp", 55, (uint64_t)"chunk_mesh.confidences.size() == chunk_mesh.vertices.size()", 59, (uint64_t)"The mesh must contain per-vertex confidences", 44, (void (*)(void **))sub_22457406C);
    }
    if (v394)
      goto LABEL_1500;
LABEL_742:
    v1014.__r_.__value_.__r.__words[0] = sub_223919C2C(v390, v382 + 4);
    v1014.__r_.__value_.__l.__size_ = v395;
    v396 = operator new(0x198uLL);
    v396[2] = 0;
    *v396 = &off_24EC1F0A0;
    v396[1] = 0;
    v945[0] = (void *)sub_223180698((uint64_t)(v396 + 3), (uint64_t)(v391 + 4));
    v945[1] = v396;
    v398 = *(_QWORD *)&v993[8];
    if (*(_QWORD *)&v993[8] >= *(_QWORD *)&v993[16])
    {
      v403 = sub_22347343C((char **)v993, &v1014, v945);
      v399 = v945[0];
      *(_QWORD *)&v993[8] = v403;
      if (*((_QWORD *)v945[0] + 14) != *((_QWORD *)v945[0] + 15))
        goto LABEL_839;
LABEL_749:
      if (*v399 == v399[1])
        goto LABEL_839;
      sub_22398615C(&v966);
      if (**(int **)(v966 + 56) > 4
        || (v404 = *(unsigned __int8 *)(v966 + 72),
            v405 = sub_22322F254(v966, "OSLogSurrogateAppender", 1, 0),
            v406 = v405,
            !v404)
        && !v405)
      {
LABEL_838:
        sub_2241498F4((uint64_t)object, 0);
        sub_2237C2E74((uint64_t *)v945[0], (uint64_t)object);
        sub_22316F8F4((uint64_t *)object);
        goto LABEL_839;
      }
      *(_QWORD *)__p = &v966;
      *(std::chrono::steady_clock::time_point *)&__p[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&__p[16] = std::chrono::system_clock::now();
      *(_DWORD *)&__p[24] = 4;
      v975 = "unknown file";
      LODWORD(v976) = 64;
      v977 = "unknown function";
      v978 = 0;
      v979 = 0;
      v407 = **(_QWORD **)__p;
      v408 = (const char *)(**(_QWORD **)__p + 16);
      v902 = v408;
      v903 = **(_QWORD **)__p;
      if (*(char *)(**(_QWORD **)__p + 39) < 0)
      {
        v408 = *(const char **)(v407 + 16);
        v409 = *(_QWORD *)(v407 + 24);
        v411 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v411 & 1) != 0)
          goto LABEL_757;
      }
      else
      {
        v409 = *(unsigned __int8 *)(**(_QWORD **)__p + 39);
        v410 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v410 & 1) != 0)
          goto LABEL_757;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v967);
        sub_223199C58("com.apple.cv3d", (unint64_t)v967, &xmmword_255788F40);
        if (BYTE8(v968) && SBYTE7(v968) < 0)
          operator delete(v967[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        v390 = v906;
      }
LABEL_757:
      if (byte_255788F57 >= 0)
        v412 = (const char *)&xmmword_255788F40;
      else
        v412 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v413 = byte_255788F57;
      else
        v413 = *((_QWORD *)&xmmword_255788F40 + 1);
      object[0] = os_log_create(v412, v408);
      if (v413 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v907 = v404;
      if (v413 >= 0x17)
      {
        v415 = (v413 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v413 | 7) != 0x17)
          v415 = v413 | 7;
        v416 = v415 + 1;
        v414 = (void **)operator new(v415 + 1);
        object[3] = (void *)(v416 | 0x8000000000000000);
        object[1] = v414;
        object[2] = (void *)v413;
        v390 = v906;
      }
      else
      {
        HIBYTE(object[3]) = v413;
        v414 = &object[1];
        if (!v413)
        {
LABEL_771:
          *((_BYTE *)v414 + v413) = 0;
          LOBYTE(object[4]) = 1;
          if (v409 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v409 >= 0x17)
          {
            v419 = (v409 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v409 | 7) != 0x17)
              v419 = v409 | 7;
            v420 = v419 + 1;
            v417 = (void **)operator new(v419 + 1);
            v998 = v420 | 0x8000000000000000;
            object[5] = v417;
            v997 = (uint64_t *)v409;
            v390 = v906;
          }
          else
          {
            HIBYTE(v998) = v409;
            v417 = &object[5];
            if (!v409)
            {
              LOBYTE(object[5]) = 0;
              LOBYTE(v999) = 1;
              v418 = object[0];
              if ((SHIBYTE(v998) & 0x80000000) == 0)
                goto LABEL_775;
              goto LABEL_781;
            }
          }
          memmove(v417, v408, v409);
          *((_BYTE *)v417 + v409) = 0;
          LOBYTE(v999) = 1;
          v418 = object[0];
          if ((SHIBYTE(v998) & 0x80000000) == 0)
          {
LABEL_775:
            nn = (float32x2_t *)v944;
            if (!LOBYTE(object[4]))
              goto LABEL_784;
            goto LABEL_782;
          }
LABEL_781:
          operator delete(object[5]);
          nn = (float32x2_t *)v944;
          if (!LOBYTE(object[4]))
          {
LABEL_784:
            if (object[0])
              os_release(object[0]);
            if (v406 && *(_QWORD *)(v406 + 24))
            {
              v421 = _os_log_pack_size();
              v422 = (std::__shared_weak_count_vtbl *)operator new(v421, (std::align_val_t)8uLL);
              v423 = (std::__shared_weak_count *)operator new();
              v424 = v423;
              v423->__shared_owners_ = 0;
              v425 = (unint64_t *)&v423->__shared_owners_;
              v423->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v423->__shared_weak_owners_ = 0;
              v423[1].__vftable = v422;
              object[0] = v422;
              object[1] = v422;
              object[2] = v423;
              do
                v426 = __ldxr(v425);
              while (__stxr(v426 + 1, v425));
              memset(&object[3], 0, 24);
              nn = (float32x2_t *)v944;
              do
                v427 = __ldaxr(v425);
              while (__stlxr(v427 - 1, v425));
              if (!v427)
              {
                ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
                std::__shared_weak_count::__release_weak(v424);
              }
              v428 = object[0];
              *(_WORD *)_os_log_pack_fill() = 0;
              v429 = (char *)operator new();
              v430 = *(unsigned __int8 *)(v903 + 39);
              v431 = v902;
              if ((v430 & 0x80u) != 0)
              {
                v431 = *(const char **)(v903 + 16);
                v430 = *(_QWORD *)(v903 + 24);
              }
              *(_QWORD *)v429 = v428;
              *(_OWORD *)(v429 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v429 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *((_QWORD *)v429 + 5) = v431;
              *((_QWORD *)v429 + 6) = v430;
              v429[56] = 16;
              v948.__r_.__value_.__r.__words[0] = 0;
              v967[0] = v429;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v406 + 24) + 40))(*(_QWORD *)(v406 + 24), v967);
              v432 = v967[0];
              v967[0] = 0;
              if (v432)
              {
                v433 = (std::__shared_weak_count *)*((_QWORD *)v432 + 4);
                if (v433)
                {
                  v434 = (unint64_t *)&v433->__shared_owners_;
                  do
                    v435 = __ldaxr(v434);
                  while (__stlxr(v435 - 1, v434));
                  if (!v435)
                  {
                    ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
                    std::__shared_weak_count::__release_weak(v433);
                  }
                }
                v436 = (std::__shared_weak_count *)*((_QWORD *)v432 + 2);
                if (v436)
                {
                  v437 = (unint64_t *)&v436->__shared_owners_;
                  do
                    v438 = __ldaxr(v437);
                  while (__stlxr(v438 - 1, v437));
                  if (!v438)
                  {
                    ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
                    std::__shared_weak_count::__release_weak(v436);
                  }
                }
                MEMORY[0x227684CE8](v432, 0x10F0C40B62ED6C6);
                v439 = v948.__r_.__value_.__r.__words[0];
                v948.__r_.__value_.__r.__words[0] = 0;
                if (v439)
                {
                  v440 = *(std::__shared_weak_count **)(v439 + 32);
                  if (v440)
                  {
                    v441 = (unint64_t *)&v440->__shared_owners_;
                    do
                      v442 = __ldaxr(v441);
                    while (__stlxr(v442 - 1, v441));
                    if (!v442)
                    {
                      ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
                      std::__shared_weak_count::__release_weak(v440);
                    }
                  }
                  v443 = *(std::__shared_weak_count **)(v439 + 16);
                  if (v443)
                  {
                    v444 = (unint64_t *)&v443->__shared_owners_;
                    do
                      v445 = __ldaxr(v444);
                    while (__stlxr(v445 - 1, v444));
                    if (!v445)
                    {
                      ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
                      std::__shared_weak_count::__release_weak(v443);
                    }
                  }
                  MEMORY[0x227684CE8](v439, 0x10F0C40B62ED6C6);
                }
              }
              v446 = (std::__shared_weak_count *)object[4];
              if (object[4])
              {
                v447 = (unint64_t *)((char *)object[4] + 8);
                do
                  v448 = __ldaxr(v447);
                while (__stlxr(v448 - 1, v447));
                if (!v448)
                {
                  ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
                  std::__shared_weak_count::__release_weak(v446);
                }
              }
              v449 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v450 = (unint64_t *)((char *)object[2] + 8);
                do
                  v451 = __ldaxr(v450);
                while (__stlxr(v451 - 1, v450));
                if (!v451)
                {
                  ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
                  std::__shared_weak_count::__release_weak(v449);
                }
              }
            }
            else
            {
              os_log_type_enabled(v418, OS_LOG_TYPE_ERROR);
              LOWORD(object[0]) = 0;
              v452 = (void *)_os_log_send_and_compose_impl();
              if (v452)
                free(v452);
            }
            if (v907)
            {
              sub_22322C138((uint64_t)__p, "PRR chunk contains vertices but no faces");
              sub_223182C08((uint64_t)__p);
            }
            sub_223182C08((uint64_t)__p);
            v453 = v979;
            if (v979)
            {
              v454 = (unint64_t *)&v979->__shared_owners_;
              do
                v455 = __ldaxr(v454);
              while (__stlxr(v455 - 1, v454));
              if (!v455)
              {
                ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
                std::__shared_weak_count::__release_weak(v453);
              }
            }
            goto LABEL_838;
          }
LABEL_782:
          if (SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          goto LABEL_784;
        }
      }
      memmove(v414, v412, v413);
      goto LABEL_771;
    }
    **(_OWORD **)&v993[8] = *(_OWORD *)&v1014.__r_.__value_.__l.__data_;
    v399 = v945[0];
    v400 = (char *)v945[1];
    *(void **)(v398 + 16) = v945[0];
    *(_QWORD *)(v398 + 24) = v400;
    if (v400)
    {
      v401 = (unint64_t *)(v400 + 8);
      do
        v402 = __ldxr(v401);
      while (__stxr(v402 + 1, v401));
    }
    *(_BYTE *)(v398 + 32) = 0;
    *(_BYTE *)(v398 + 96) = 0;
    *(_BYTE *)(v398 + 100) = 0;
    *(_BYTE *)(v398 + 116) = 0;
    *(_QWORD *)&v993[8] = v398 + 120;
    if (v399[14] == v399[15])
      goto LABEL_749;
LABEL_839:
    if (v920)
    {
      v456 = v945[0];
      v457 = *(float32x2_t **)v945[0];
      v458 = (float32x2_t *)*((_QWORD *)v945[0] + 1);
      if (*(float32x2_t **)v945[0] != v458)
      {
        do
        {
          v397.i32[0] = v457[1].i32[0];
          *(float32x2_t *)v459.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v941.i8, COERCE_FLOAT(*v457)), v937, *v457, 1), v934, v397.f32[0]);
          *(float32x2_t *)&v459.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v930, *v457), v927, *v457, 1), v397, v923);
          v460 = vaddq_f32(v912, v459);
          v457[1].i32[0] = v460.i32[2];
          *v457 = *(float32x2_t *)v460.f32;
          v457 = (float32x2_t *)((char *)v457 + 12);
        }
        while (v457 != v458);
        v456 = v945[0];
      }
      v461 = (float32x2_t *)*((_QWORD *)v456 + 9);
      for (n = (float32x2_t *)*((_QWORD *)v456 + 10); v461 != n; v461 = (float32x2_t *)((char *)v461 + 12))
      {
        v397.i32[0] = v461[1].i32[0];
        v463 = vmla_f32(vmla_lane_f32(vmul_f32(v930, *v461), v927, *v461, 1), v397, v923).u32[0];
        *v461 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v941.i8, COERCE_FLOAT(*v461)), v937, *v461, 1), v934, v397.f32[0]);
        v461[1].i32[0] = v463;
      }
    }
    v464 = (std::__shared_weak_count *)v945[1];
    if (v945[1])
    {
      v465 = (unint64_t *)((char *)v945[1] + 8);
      do
        v466 = __ldaxr(v465);
      while (__stlxr(v466 - 1, v465));
      if (!v466)
      {
        ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
        std::__shared_weak_count::__release_weak(v464);
      }
    }
    v382 = *(int **)v382;
  }
  while (v382);
  if (!nn[6].i8[4])
  {
    sub_2241498F4((uint64_t)object, 0);
    *(_QWORD *)__p = *(_QWORD *)v993;
    *(_QWORD *)&__p[8] = &off_24EC5D438;
    v975 = &__p[8];
    v976 = *(_QWORD *)&v993[8];
    v980 = &v977;
    v977 = (const char *)&off_24EC5D438;
    v467 = 0xAAAAAAAAAAAAAAABLL * (((char *)object[1] - (char *)object[0]) >> 2);
    v468 = (v1012 - v1011) >> 2;
    v469 = 0xAAAAAAAAAAAAAAABLL * (((char *)object[5] - (char *)object[4]) >> 2);
    v470 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1001 - (char *)v1000) >> 2);
    LODWORD(v471) = v1008 - v1007;
    v472 = 0xAAAAAAAAAAAAAAABLL * ((v1006 - (char *)v1005) >> 2);
    LODWORD(v473) = v1010 - v1009;
    v474 = &v967[1];
    v969 = &v967[1];
    v967[0] = *(void **)v993;
    v967[1] = &off_24EC5D438;
    p_size = &v1014.__r_.__value_.__l.__size_;
    v1015 = (std::string *)&v1014.__r_.__value_.__r.__words[1];
    v1014.__r_.__value_.__r.__words[0] = *(_QWORD *)&v993[8];
    v1014.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24EC5D438;
    if (*(_QWORD *)v993 == *(_QWORD *)&v993[8])
      goto LABEL_862;
    do
    {
      if (!v969)
        sub_223198474();
      v476 = (_QWORD *)(*((uint64_t (**)(void **))*v969 + 6))(v969);
      v467 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v476[1] - *v476) >> 2) + v467;
      v468 = ((uint64_t)(v476[41] - v476[40]) >> 2) + v468;
      v469 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v476[5] - v476[4]) >> 2) + v469;
      v470 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v476[10] - v476[9]) >> 2) + v470;
      v471 = v476[31] + v471 - v476[30];
      v472 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v476[15] - v476[14]) >> 2) + v472;
      v473 = v476[36] + v473 - v476[35];
      v967[0] = (char *)v967[0] + 120;
    }
    while (v967[0] != v1014.__r_.__value_.__l.__data_);
    if (v1015 == (std::string *)&v1014.__r_.__value_.__r.__words[1])
    {
LABEL_862:
      v478 = 4;
      v477 = &__p[8];
LABEL_863:
      (*(void (**)(std::string::size_type *))(*p_size + 8 * v478))(p_size);
    }
    else
    {
      v477 = &__p[8];
      if (v1015)
      {
        v478 = 5;
        p_size = (std::string::size_type *)v1015;
        goto LABEL_863;
      }
    }
    if (v969 == &v967[1])
    {
      v479 = 4;
LABEL_868:
      (*((void (**)(void **))*v474 + v479))(v474);
    }
    else if (v969)
    {
      v479 = 5;
      v474 = v969;
      goto LABEL_868;
    }
    sub_22339E3C8((uint64_t)object, v467);
    sub_223674C80((uint64_t)&v1011, v468);
    sub_22339E3C8((uint64_t)&object[4], v469);
    sub_22339E3C8((uint64_t)&v1000, v470);
    sub_223674E10((uint64_t)&v1007, v471);
    sub_22339E528((uint64_t)&v1005, v472);
    sub_223674E10((uint64_t)&v1009, v473);
    v481 = (uint64_t)v975;
    v967[0] = *(void **)__p;
    v482 = &v967[1];
    if (v975)
    {
      if (v975 != &__p[8])
      {
        v481 = (*(uint64_t (**)(const char *, uint64_t))(*(_QWORD *)v975 + 16))(v975, v480);
        goto LABEL_872;
      }
      v969 = &v967[1];
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)&__p[8] + 24))((uint64_t)&__p[8], &v967[1]);
    }
    else
    {
LABEL_872:
      v969 = (void **)v481;
    }
    v483 = (uint64_t)v980;
    v1014.__r_.__value_.__r.__words[0] = v976;
    v484 = &v1014.__r_.__value_.__l.__size_;
    if (v980)
    {
      v485 = &v977;
      nn = (float32x2_t *)v944;
      if (v980 != &v977)
      {
        v483 = (*((uint64_t (**)(const char **, uint64_t))*v980 + 2))(v980, v480);
        goto LABEL_878;
      }
      v1015 = (std::string *)&v1014.__r_.__value_.__r.__words[1];
      (*((void (**)(uint64_t, _QWORD *))v977 + 3))((uint64_t)&v977, &v1014.__r_.__value_.__l.__size_);
      for (; v967[0] != v1014.__r_.__value_.__l.__data_; v967[0] = (char *)v967[0] + 120)
      {
LABEL_881:
        if (!v969)
          sub_223198474();
        v486 = (*((uint64_t (**)(void **))*v969 + 6))(v969);
        sub_22414E9E0((uint64_t)object, v486);
      }
    }
    else
    {
      nn = (float32x2_t *)v944;
      v485 = &v977;
LABEL_878:
      v1015 = (std::string *)v483;
      if (v967[0] != v1014.__r_.__value_.__l.__data_)
        goto LABEL_881;
    }
    if (v1015 == (std::string *)&v1014.__r_.__value_.__r.__words[1])
    {
      v487 = 4;
LABEL_887:
      (*(void (**)(std::string::size_type *))(*v484 + 8 * v487))(v484);
    }
    else if (v1015)
    {
      v487 = 5;
      v484 = (std::string::size_type *)v1015;
      goto LABEL_887;
    }
    if (v969 == &v967[1])
    {
      v488 = 4;
LABEL_892:
      (*((void (**)(void **))*v482 + v488))(v482);
    }
    else if (v969)
    {
      v488 = 5;
      v482 = v969;
      goto LABEL_892;
    }
    if (v980 == &v977)
    {
      v489 = 4;
LABEL_897:
      (*(void (**)(const char **))&(*v485)[8 * v489])(v485);
    }
    else if (v980)
    {
      v489 = 5;
      v485 = v980;
      goto LABEL_897;
    }
    if (v975 == &__p[8])
    {
      v490 = 4;
LABEL_902:
      (*(void (**)(char *))(*(_QWORD *)v477 + 8 * v490))(v477);
    }
    else if (v975)
    {
      v490 = 5;
      v477 = (char *)v975;
      goto LABEL_902;
    }
    v1013 = nn[15].i32[0];
    v491 = *(_QWORD *)&v993[8];
    v492 = *(_QWORD *)v993;
    while (v491 != v492)
    {
      v493 = *(std::__shared_weak_count **)(v491 - 96);
      if (v493)
      {
        v494 = (unint64_t *)&v493->__shared_owners_;
        do
          v495 = __ldaxr(v494);
        while (__stlxr(v495 - 1, v494));
        if (!v495)
        {
          ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
          std::__shared_weak_count::__release_weak(v493);
        }
      }
      v491 -= 120;
    }
    *(_QWORD *)&v993[8] = v492;
    *(_QWORD *)__p = sub_223919C2C(v906, (int *)&nn[18] + 1);
    *(_QWORD *)&__p[8] = v496;
    v497 = operator new(0x198uLL);
    v497[2] = 0;
    *v497 = &off_24EC1F0A0;
    v497[1] = 0;
    v967[0] = (void *)sub_223180698((uint64_t)(v497 + 3), (uint64_t)object);
    v967[1] = v497;
    v498 = *(_QWORD *)&v993[8];
    if (*(_QWORD *)&v993[8] >= *(_QWORD *)&v993[16])
    {
      v502 = sub_22347343C((char **)v993, __p, v967);
    }
    else
    {
      **(_OWORD **)&v993[8] = *(_OWORD *)__p;
      v499 = (char *)v967[1];
      *(void **)(v498 + 16) = v967[0];
      *(_QWORD *)(v498 + 24) = v499;
      if (v499)
      {
        v500 = (unint64_t *)(v499 + 8);
        do
          v501 = __ldxr(v500);
        while (__stxr(v501 + 1, v500));
      }
      *(_BYTE *)(v498 + 32) = 0;
      *(_BYTE *)(v498 + 96) = 0;
      *(_BYTE *)(v498 + 100) = 0;
      v502 = (char *)(v498 + 120);
      *(_BYTE *)(v498 + 116) = 0;
    }
    *(_QWORD *)&v993[8] = v502;
    v503 = (std::__shared_weak_count *)v967[1];
    if (v967[1])
    {
      v504 = (unint64_t *)((char *)v967[1] + 8);
      do
        v505 = __ldaxr(v504);
      while (__stlxr(v505 - 1, v504));
      if (!v505)
      {
        ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
        std::__shared_weak_count::__release_weak(v503);
      }
    }
    sub_22316F8F4((uint64_t *)object);
  }
LABEL_923:
  object[0] = "cv3d.recon.";
  object[1] = (void *)11;
  object[2] = "Stats.PRR.ResultChunks";
  object[3] = (void *)22;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)__p);
  v376 = v908;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v506 = sub_2241471F8();
    v507 = v506[2];
    if (!v507)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v507 = v506[2];
    }
    v508 = *(_QWORD *)(v507 + 64);
    v509 = (std::mutex *)(v508 + 32);
    std::mutex::lock((std::mutex *)(v508 + 32));
    v511 = *(_QWORD *)(v508 + 96);
    v510 = *(_QWORD *)(v508 + 104);
    std::mutex::unlock(v509);
    if (v511 != v510)
    {
      v512 = __p[23];
      v513 = *(_BYTE **)__p;
      sub_2241471F8();
      v514 = v512 >= 0 ? __p : v513;
      v515 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v514);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v515 + 24))(v515))
      {
        memset(object, 0, 32);
        LODWORD(object[4]) = 728325608;
        kdebug_trace();
        v967[0] = (void *)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)&v993[8] - *(_QWORD *)v993) >> 3));
        sub_223995E3C((double *)&qword_255788F20, v515, (uint64_t *)v967, "# of chunks updated");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  LODWORD(object[4]) = 728325624;
  kdebug_trace();
  v516 = __p[23];
  if (__p[23] < 0)
    v516 = *(_QWORD *)&__p[8];
  if (v516 >= 0x11)
  {
    v517 = __p;
    if (__p[23] < 0)
      v517 = *(_BYTE **)__p;
    v518 = *(_QWORD *)v517;
    v519 = *((_QWORD *)v517 + 1);
    v520 = v517[16];
    if (v518 == 0x6365722E64337663 && v519 == 0x73746174532E6E6FLL && v520 == 46)
    {
      v523 = sub_223187510();
      if (__p[23] >= 0)
        v524 = __p;
      else
        v524 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v525 = __p[23];
      else
        v525 = *(_QWORD *)&__p[8];
      v967[0] = (void *)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)&v993[8] - *(_QWORD *)v993) >> 3));
      sub_22318760C((uint64_t *)v523, v524, v525, (uint64_t *)v967, (uint64_t)"# of chunks updated", 19);
    }
  }
  kdebug_trace();
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    v526 = nn[20].i8[0] ^ 1;
    v994 = v526;
    if (!*((_BYTE *)v908 + 32))
      goto LABEL_965;
LABEL_955:
    v527 = (char *)*v908;
    if (*v908)
    {
      v528 = (char *)v908[1];
      v529 = (char *)*v908;
      if (v528 != v527)
      {
        do
        {
          v530 = (std::__shared_weak_count *)*((_QWORD *)v528 - 12);
          if (v530)
          {
            v531 = (unint64_t *)&v530->__shared_owners_;
            do
              v532 = __ldaxr(v531);
            while (__stlxr(v532 - 1, v531));
            if (!v532)
            {
              ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
              std::__shared_weak_count::__release_weak(v530);
            }
          }
          v528 -= 120;
        }
        while (v528 != v527);
        v529 = (char *)*v908;
      }
      v908[1] = (uint64_t)v527;
      operator delete(v529);
      *v908 = 0;
      v908[1] = 0;
      v908[2] = 0;
      v526 = v994;
    }
    *(_OWORD *)v908 = *(_OWORD *)v993;
    v908[2] = *(_QWORD *)&v993[16];
    *((_BYTE *)v908 + 24) = v526;
    if (a7)
      goto LABEL_967;
  }
  else
  {
    v526 = nn[20].i8[0] ^ 1;
    v994 = v526;
    if (*((_BYTE *)v908 + 32))
      goto LABEL_955;
LABEL_965:
    *(_OWORD *)v908 = *(_OWORD *)v993;
    v908[2] = *(_QWORD *)&v993[16];
    *((_BYTE *)v908 + 24) = v526;
    *((_BYTE *)v908 + 32) = 1;
LABEL_966:
    if (a7)
    {
LABEL_967:
      object[0] = "cv3d.recon.";
      object[1] = (void *)11;
      object[2] = "Stats.PRR.Material";
      object[3] = (void *)18;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)v967);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v533 = sub_2241471F8();
        v534 = v533[2];
        if (!v534)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v534 = v533[2];
        }
        v535 = *(_QWORD *)(v534 + 64);
        v536 = (std::mutex *)(v535 + 32);
        std::mutex::lock((std::mutex *)(v535 + 32));
        v538 = *(_QWORD *)(v535 + 96);
        v537 = *(_QWORD *)(v535 + 104);
        std::mutex::unlock(v536);
        if (v538 != v537)
        {
          v539 = BYTE7(v968);
          v540 = (void **)v967[0];
          sub_2241471F8();
          v541 = v539 >= 0 ? v967 : v540;
          v542 = (*(uint64_t (**)(uint64_t *, void **))(qword_2557952E0 + 48))(&qword_2557952E0, v541);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v542 + 24))(v542))
          {
            memset(object, 0, 32);
            LODWORD(object[4]) = 728325608;
            kdebug_trace();
            v543 = 0.0;
            if (nn[1].i8[0])
              v543 = 1.0;
            *(float *)v993 = v543;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v542 + 24))(v542))
            {
              __p[23] = 15;
              strcpy(__p, "ApplyWrongLabel");
              v1014.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v1014.__r_.__value_.__l.__size_ = 2;
              v544 = sub_2241471F8();
              sub_2231FBBA8((uint64_t)v544, v542, (float *)v993, (uint64_t)__p, (__int128 *)&v1014);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            kdebug_trace();
          }
        }
      }
      memset(object, 0, 32);
      LODWORD(object[4]) = 728325624;
      kdebug_trace();
      v545 = BYTE7(v968);
      if (SBYTE7(v968) < 0)
        v545 = (unint64_t)v967[1];
      if (v545 >= 0x11)
      {
        v546 = v967;
        if (SBYTE7(v968) < 0)
          v546 = (void **)v967[0];
        v547 = *v546;
        v548 = v546[1];
        v549 = *((unsigned __int8 *)v546 + 16);
        if (v547 == (void *)0x6365722E64337663 && v548 == (void *)0x73746174532E6E6FLL && v549 == 46)
        {
          v552 = sub_223187510();
          if ((SBYTE7(v968) & 0x80u) == 0)
            v553 = v967;
          else
            v553 = (void **)v967[0];
          if ((SBYTE7(v968) & 0x80u) == 0)
            v554 = BYTE7(v968);
          else
            v554 = (size_t)v967[1];
          v555 = 0.0;
          if (nn[1].i8[0])
            v555 = 1.0;
          *(float *)__p = v555;
          sub_2231897A8((uint64_t *)v552, v553, v554, (float *)__p, (uint64_t)"ApplyWrongLabel", 15);
        }
      }
      kdebug_trace();
      if (SBYTE7(v968) < 0)
        operator delete(v967[0]);
      object[0] = "cv3d.recon.";
      object[1] = (void *)11;
      object[2] = "Stats.PRR.Result";
      object[3] = (void *)16;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)v967);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v556 = sub_2241471F8();
        v557 = v556[2];
        if (!v557)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v557 = v556[2];
        }
        v558 = *(_QWORD *)(v557 + 64);
        v559 = (std::mutex *)(v558 + 32);
        std::mutex::lock((std::mutex *)(v558 + 32));
        v561 = *(_QWORD *)(v558 + 96);
        v560 = *(_QWORD *)(v558 + 104);
        std::mutex::unlock(v559);
        if (v561 != v560)
        {
          v562 = BYTE7(v968);
          v563 = (void **)v967[0];
          sub_2241471F8();
          v564 = v562 >= 0 ? v967 : v563;
          v565 = (*(uint64_t (**)(uint64_t *, void **))(qword_2557952E0 + 48))(&qword_2557952E0, v564);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v565 + 24))(v565))
          {
            memset(object, 0, 32);
            LODWORD(object[4]) = 728325608;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v565 + 24))(v565))
            {
              *(_QWORD *)__p = operator new(0x28uLL);
              *(_OWORD *)&__p[8] = xmmword_2245B8D40;
              strcpy(*(char **)__p, "ResultCoordinateTransformerChanged");
              v1014.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v1014.__r_.__value_.__l.__size_ = 2;
              v566 = sub_2241471F8();
              sub_22393AEE8((uint64_t)v566, v565, (char *)&nn[48] + 4, (uint64_t)__p, (__int128 *)&v1014);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            kdebug_trace();
          }
        }
      }
      memset(object, 0, 32);
      LODWORD(object[4]) = 728325624;
      kdebug_trace();
      v567 = BYTE7(v968);
      if (SBYTE7(v968) < 0)
        v567 = (unint64_t)v967[1];
      if (v567 >= 0x11)
      {
        v568 = v967;
        if (SBYTE7(v968) < 0)
          v568 = (void **)v967[0];
        v569 = *v568;
        v570 = v568[1];
        v571 = *((unsigned __int8 *)v568 + 16);
        if (v569 == (void *)0x6365722E64337663 && v570 == (void *)0x73746174532E6E6FLL && v571 == 46)
        {
          v574 = sub_223187510();
          if ((SBYTE7(v968) & 0x80u) == 0)
            v575 = v967;
          else
            v575 = (void **)v967[0];
          if ((SBYTE7(v968) & 0x80u) == 0)
            v576 = BYTE7(v968);
          else
            v576 = (size_t)v967[1];
          sub_223189538((uint64_t *)v574, v575, v576, (char *)&nn[48] + 4, (uint64_t)"ResultCoordinateTransformerChanged", 34);
        }
      }
      kdebug_trace();
      if (SBYTE7(v968) < 0)
        operator delete(v967[0]);
      object[0] = "cv3d.recon.";
      object[1] = (void *)11;
      object[2] = "Stats.PRR.ResultChunks";
      object[3] = (void *)22;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v577 = sub_2241471F8();
        v578 = v577[2];
        if (!v578)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v578 = v577[2];
        }
        v579 = *(_QWORD *)(v578 + 64);
        v580 = (std::mutex *)(v579 + 32);
        std::mutex::lock((std::mutex *)(v579 + 32));
        v582 = *(_QWORD *)(v579 + 96);
        v581 = *(_QWORD *)(v579 + 104);
        std::mutex::unlock(v580);
        v152 = v582 == v581;
        v376 = v908;
        if (!v152)
        {
          v583 = __p[23];
          v584 = *(_BYTE **)__p;
          sub_2241471F8();
          v585 = v583 >= 0 ? __p : v584;
          v586 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v585);
          v376 = v908;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v586 + 24))(v586))
          {
            memset(object, 0, 32);
            LODWORD(object[4]) = 728325608;
            kdebug_trace();
            sub_223822198((double *)&qword_255788F20, v586, (int *)&v955 + 1, "# of chunks meshed");
            kdebug_trace();
          }
        }
      }
      memset(object, 0, 32);
      LODWORD(object[4]) = 728325624;
      kdebug_trace();
      v587 = __p[23];
      if (__p[23] < 0)
        v587 = *(_QWORD *)&__p[8];
      if (v587 >= 0x11)
      {
        v588 = __p;
        if (__p[23] < 0)
          v588 = *(_BYTE **)__p;
        v589 = *(_QWORD *)v588;
        v590 = *((_QWORD *)v588 + 1);
        v591 = v588[16];
        if (v589 == 0x6365722E64337663 && v590 == 0x73746174532E6E6FLL && v591 == 46)
        {
          v594 = sub_223187510();
          if (__p[23] >= 0)
            v595 = __p;
          else
            v595 = *(_BYTE **)__p;
          if (__p[23] >= 0)
            v596 = __p[23];
          else
            v596 = *(_QWORD *)&__p[8];
          sub_223532E4C(v594, v595, v596, (unsigned int *)&v955 + 1, (uint64_t)"# of chunks meshed", 18);
        }
      }
      kdebug_trace();
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      object[0] = "cv3d.recon.";
      object[1] = (void *)11;
      object[2] = "Stats.PRR.ResultChunks";
      object[3] = (void *)22;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v597 = sub_2241471F8();
        v598 = v597[2];
        if (!v598)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v598 = v597[2];
        }
        v599 = *(_QWORD *)(v598 + 64);
        v600 = (std::mutex *)(v599 + 32);
        std::mutex::lock((std::mutex *)(v599 + 32));
        v602 = *(_QWORD *)(v599 + 96);
        v601 = *(_QWORD *)(v599 + 104);
        std::mutex::unlock(v600);
        v152 = v602 == v601;
        v376 = v908;
        if (!v152)
        {
          v603 = __p[23];
          v604 = *(_BYTE **)__p;
          sub_2241471F8();
          v605 = v603 >= 0 ? __p : v604;
          v606 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v605);
          v376 = v908;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v606 + 24))(v606))
          {
            memset(object, 0, 32);
            LODWORD(object[4]) = 728325608;
            kdebug_trace();
            sub_223990630((double *)&qword_255788F20, v606, (int *)&v955, "# of vertices meshed");
            kdebug_trace();
          }
        }
      }
      memset(object, 0, 32);
      LODWORD(object[4]) = 728325624;
      kdebug_trace();
      v607 = __p[23];
      if (__p[23] < 0)
        v607 = *(_QWORD *)&__p[8];
      if (v607 >= 0x11)
      {
        v608 = __p;
        if (__p[23] < 0)
          v608 = *(_BYTE **)__p;
        v609 = *(_QWORD *)v608;
        v610 = *((_QWORD *)v608 + 1);
        v611 = v608[16];
        if (v609 == 0x6365722E64337663 && v610 == 0x73746174532E6E6FLL && v611 == 46)
        {
          v614 = sub_223187510();
          if (__p[23] >= 0)
            v615 = __p;
          else
            v615 = *(_BYTE **)__p;
          if (__p[23] >= 0)
            v616 = __p[23];
          else
            v616 = *(_QWORD *)&__p[8];
          sub_223532E4C(v614, v615, v616, (unsigned int *)&v955, (uint64_t)"# of vertices meshed", 20);
        }
      }
      kdebug_trace();
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      object[0] = "cv3d.recon.";
      object[1] = (void *)11;
      object[2] = "Stats.PRR.ResultChunks";
      object[3] = (void *)22;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v617 = sub_2241471F8();
        v618 = v617[2];
        if (!v618)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v618 = v617[2];
        }
        v619 = *(_QWORD *)(v618 + 64);
        v620 = (std::mutex *)(v619 + 32);
        std::mutex::lock((std::mutex *)(v619 + 32));
        v622 = *(_QWORD *)(v619 + 96);
        v621 = *(_QWORD *)(v619 + 104);
        std::mutex::unlock(v620);
        v152 = v622 == v621;
        v376 = v908;
        if (!v152)
        {
          v623 = __p[23];
          v624 = *(_BYTE **)__p;
          sub_2241471F8();
          v625 = v623 >= 0 ? __p : v624;
          v626 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v625);
          v376 = v908;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v626 + 24))(v626))
          {
            memset(object, 0, 32);
            LODWORD(object[4]) = 728325608;
            kdebug_trace();
            sub_22399076C((double *)&qword_255788F20, v626, &v954, "# of faces meshed");
            kdebug_trace();
          }
        }
      }
      memset(object, 0, 32);
      LODWORD(object[4]) = 728325624;
      kdebug_trace();
      v627 = __p[23];
      if (__p[23] < 0)
        v627 = *(_QWORD *)&__p[8];
      if (v627 >= 0x11)
      {
        v628 = __p;
        if (__p[23] < 0)
          v628 = *(_BYTE **)__p;
        v629 = *(_QWORD *)v628;
        v630 = *((_QWORD *)v628 + 1);
        v631 = v628[16];
        if (v629 == 0x6365722E64337663 && v630 == 0x73746174532E6E6FLL && v631 == 46)
        {
          v634 = sub_223187510();
          if (__p[23] >= 0)
            v635 = __p;
          else
            v635 = *(_BYTE **)__p;
          if (__p[23] >= 0)
            v636 = __p[23];
          else
            v636 = *(_QWORD *)&__p[8];
          sub_223532E4C(v634, v635, v636, (unsigned int *)&v954, (uint64_t)"# of faces meshed", 17);
        }
      }
      kdebug_trace();
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      object[0] = "cv3d.recon.";
      object[1] = (void *)11;
      object[2] = "Stats.PRR.ResultChunks";
      object[3] = (void *)22;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)v967);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v637 = sub_2241471F8();
        v638 = v637[2];
        if (!v638)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v638 = v637[2];
        }
        v639 = *(_QWORD *)(v638 + 64);
        v640 = (std::mutex *)(v639 + 32);
        std::mutex::lock((std::mutex *)(v639 + 32));
        v642 = *(_QWORD *)(v639 + 96);
        v641 = *(_QWORD *)(v639 + 104);
        std::mutex::unlock(v640);
        if (v642 != v641)
        {
          v643 = BYTE7(v968);
          v644 = (void **)v967[0];
          sub_2241471F8();
          v645 = v643 >= 0 ? v967 : v644;
          v646 = (*(uint64_t (**)(uint64_t *, void **))(qword_2557952E0 + 48))(&qword_2557952E0, v645);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v646 + 24))(v646))
          {
            memset(object, 0, 32);
            LODWORD(object[4]) = 728325608;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v646 + 24))(v646))
            {
              *(_QWORD *)__p = operator new(0x20uLL);
              *(_OWORD *)&__p[8] = xmmword_2245B8EA0;
              strcpy(*(char **)__p, "# of non-empty chunks in result");
              v1014.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v1014.__r_.__value_.__l.__size_ = 2;
              v647 = sub_2241471F8();
              sub_22356F6DC((uint64_t)v647, v646, &v949, (uint64_t)__p, (__int128 *)&v1014);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            kdebug_trace();
          }
        }
      }
      memset(object, 0, 32);
      LODWORD(object[4]) = 728325624;
      kdebug_trace();
      v648 = BYTE7(v968);
      if (SBYTE7(v968) < 0)
        v648 = (unint64_t)v967[1];
      if (v648 >= 0x11)
      {
        v649 = v967;
        if (SBYTE7(v968) < 0)
          v649 = (void **)v967[0];
        v650 = *v649;
        v651 = v649[1];
        v652 = *((unsigned __int8 *)v649 + 16);
        if (v650 == (void *)0x6365722E64337663 && v651 == (void *)0x73746174532E6E6FLL && v652 == 46)
        {
          v655 = sub_223187510();
          if ((SBYTE7(v968) & 0x80u) == 0)
            v656 = v967;
          else
            v656 = (void **)v967[0];
          if ((SBYTE7(v968) & 0x80u) == 0)
            v657 = BYTE7(v968);
          else
            v657 = (size_t)v967[1];
          sub_223532E4C(v655, v656, v657, (unsigned int *)&v949, (uint64_t)"# of non-empty chunks in result", 31);
        }
      }
      kdebug_trace();
      if (SBYTE7(v968) < 0)
        operator delete(v967[0]);
      object[0] = "cv3d.recon.";
      object[1] = (void *)11;
      object[2] = "PRR.Result";
      object[3] = (void *)10;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, &v948);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v658 = sub_2241471F8();
        v659 = v658[2];
        if (!v659)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v659 = v658[2];
        }
        v660 = *(_QWORD *)(v659 + 64);
        v661 = (std::mutex *)(v660 + 32);
        std::mutex::lock((std::mutex *)(v660 + 32));
        v663 = *(_QWORD *)(v660 + 96);
        v662 = *(_QWORD *)(v660 + 104);
        std::mutex::unlock(v661);
        if (v663 != v662)
        {
          v664 = HIBYTE(v948.__r_.__value_.__r.__words[2]);
          v665 = (std::string *)v948.__r_.__value_.__r.__words[0];
          sub_2241471F8();
          v666 = v664 >= 0 ? &v948 : v665;
          v667 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v666);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v667 + 24))(v667))
          {
            v913 = v667;
            *(_OWORD *)v945 = 0u;
            v946 = 0u;
            v947 = 728325608;
            kdebug_trace();
            v967[0] = v951[0];
            v967[1] = &off_24EC5D328;
            v969 = &v967[1];
            *(_QWORD *)&v968 = nn;
            v970 = 0;
            v971 = &off_24EC5D328;
            v973 = &v971;
            v972 = nn;
            sub_2241498F4((uint64_t)__p, 0);
            v669 = *(_QWORD *)&__p[8];
            v670 = *(_QWORD *)__p;
            v671 = v992;
            v672 = v991;
            v673 = v976;
            v674 = v975;
            v675 = v980;
            v931 = v988;
            v924 = v987;
            v928 = v986;
            v917 = v981;
            v921 = v985;
            v676 = (uint64_t)v969;
            v1014.__r_.__value_.__l.__data_ = (std::string::pointer)v967[0];
            v677 = v990;
            v678 = v989;
            if (!v969)
              goto LABEL_1184;
            if (v969 == &v967[1])
            {
              v1015 = (std::string *)&v1014.__r_.__value_.__r.__words[1];
              (*((void (**)(uint64_t, _QWORD *))v967[1] + 3))((uint64_t)&v967[1], &v1014.__r_.__value_.__l.__size_);
            }
            else
            {
              v676 = (*((uint64_t (**)(void **, uint64_t))*v969 + 2))(v969, v668);
LABEL_1184:
              v1015 = (std::string *)v676;
            }
            v679 = (uint64_t)v973;
            *(_QWORD *)v993 = v970;
            v680 = &v993[8];
            if (v973)
            {
              if (v973 != &v971)
              {
                v679 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v973)[2])(v973, v668);
                goto LABEL_1193;
              }
              v995 = &v993[8];
              ((void (*)(uint64_t, _QWORD *))v971[3])((uint64_t)&v971, &v993[8]);
            }
            else
            {
LABEL_1193:
              v995 = (_BYTE *)v679;
            }
            v681 = 0xAAAAAAAAAAAAAAABLL * ((v669 - v670) >> 2);
            v682 = (v671 - v672) >> 2;
            v683 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v673 - (_QWORD)v674) >> 2);
            v684 = 0xAAAAAAAAAAAAAAABLL * (((char *)v917 - (char *)v675) >> 2);
            v685 = v931 - v924;
            v686 = 0xAAAAAAAAAAAAAAABLL * ((v928 - (uint64_t)v921) >> 2);
            v687 = v677 - v678;
            for (ii = v1014.__r_.__value_.__r.__words[0]; ii != *(_QWORD *)v993; v1014.__r_.__value_.__r.__words[0] = ii)
            {
              if (!v1015)
                sub_223198474();
              (*(void (**)(void **__return_ptr, std::string *, std::string::size_type))(v1015->__r_.__value_.__r.__words[0]
                                                                                                 + 48))(object, v1015, ii + 16);
              v681 = 0xAAAAAAAAAAAAAAABLL * (((char *)object[1] - (char *)object[0]) >> 2) + v681;
              v682 = ((v1012 - v1011) >> 2) + v682;
              v683 = 0xAAAAAAAAAAAAAAABLL * (((char *)object[5] - (char *)object[4]) >> 2) + v683;
              v684 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1001 - (char *)v1000) >> 2) + v684;
              v685 = v1008 + v685 - v1007;
              v686 = 0xAAAAAAAAAAAAAAABLL * ((v1006 - (char *)v1005) >> 2) + v686;
              v687 = v1010 + v687 - v1009;
              sub_22316F8F4((uint64_t *)object);
              ii = *(_QWORD *)v1014.__r_.__value_.__l.__data_;
            }
            if (v995 == &v993[8])
            {
              v690 = 4;
              v689 = &v1014.__r_.__value_.__l.__size_;
LABEL_1202:
              (*(void (**)(_QWORD *))(*v680 + 8 * v690))(v680);
            }
            else
            {
              v689 = &v1014.__r_.__value_.__l.__size_;
              if (v995)
              {
                v690 = 5;
                v680 = v995;
                goto LABEL_1202;
              }
            }
            if (v1015 == (std::string *)&v1014.__r_.__value_.__r.__words[1])
            {
              v691 = 4;
LABEL_1207:
              (*(void (**)(std::string::size_type *))(*v689 + 8 * v691))(v689);
            }
            else if (v1015)
            {
              v691 = 5;
              v689 = (std::string::size_type *)v1015;
              goto LABEL_1207;
            }
            sub_22339E3C8((uint64_t)__p, v681);
            sub_223674C80((uint64_t)&v991, v682);
            sub_22339E3C8((uint64_t)&v975, v683);
            sub_22339E3C8((uint64_t)&v980, v684);
            sub_223674E10((uint64_t)&v987, v685);
            sub_22339E528((uint64_t)&v985, v686);
            sub_223674E10((uint64_t)&v989, v687);
            v693 = (uint64_t)v969;
            v1014.__r_.__value_.__l.__data_ = (std::string::pointer)v967[0];
            v694 = &v1014.__r_.__value_.__l.__size_;
            if (v969)
            {
              if (v969 != &v967[1])
              {
                v693 = (*((uint64_t (**)(void **, uint64_t))*v969 + 2))(v969, v692);
                goto LABEL_1211;
              }
              v1015 = (std::string *)&v1014.__r_.__value_.__r.__words[1];
              (*((void (**)(uint64_t, _QWORD *))v967[1] + 3))((uint64_t)&v967[1], &v1014.__r_.__value_.__l.__size_);
            }
            else
            {
LABEL_1211:
              v1015 = (std::string *)v693;
            }
            v695 = (uint64_t)v973;
            *(_QWORD *)v993 = v970;
            v696 = &v993[8];
            if (v973)
            {
              v697 = &v971;
              v376 = v908;
              nn = (float32x2_t *)v944;
              if (v973 != &v971)
              {
                v695 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v973)[2])(v973, v692);
                goto LABEL_1217;
              }
              v995 = &v993[8];
              ((void (*)(uint64_t, _QWORD *))v971[3])((uint64_t)&v971, &v993[8]);
              for (jj = v1014.__r_.__value_.__r.__words[0]; jj != *(_QWORD *)v993; v1014.__r_.__value_.__r.__words[0] = jj)
              {
LABEL_1220:
                if (!v1015)
                  sub_223198474();
                (*(void (**)(void **__return_ptr, std::string *, std::string::size_type))(v1015->__r_.__value_.__r.__words[0] + 48))(object, v1015, jj + 16);
                sub_22414E9E0((uint64_t)__p, (uint64_t)object);
                sub_22316F8F4((uint64_t *)object);
                jj = *(_QWORD *)v1014.__r_.__value_.__l.__data_;
              }
            }
            else
            {
              v376 = v908;
              nn = (float32x2_t *)v944;
              v697 = &v971;
LABEL_1217:
              v995 = (_BYTE *)v695;
              jj = v1014.__r_.__value_.__r.__words[0];
              if (v1014.__r_.__value_.__r.__words[0] != *(_QWORD *)v993)
                goto LABEL_1220;
            }
            if (v995 == &v993[8])
            {
              v699 = 4;
LABEL_1226:
              (*(void (**)(_QWORD *))(*v696 + 8 * v699))(v696);
            }
            else if (v995)
            {
              v699 = 5;
              v696 = v995;
              goto LABEL_1226;
            }
            if (v1015 == (std::string *)&v1014.__r_.__value_.__r.__words[1])
            {
              v702 = 4;
              v700 = &v967[1];
              v701 = v913;
LABEL_1231:
              (*(void (**)(std::string::size_type *))(*v694 + 8 * v702))(v694);
            }
            else
            {
              v700 = &v967[1];
              v701 = v913;
              if (v1015)
              {
                v702 = 5;
                v694 = (std::string::size_type *)v1015;
                goto LABEL_1231;
              }
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v701 + 24))(v701))
            {
              object[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              object[1] = (void *)2;
              v703 = sub_2241471F8();
              sub_2238BB49C((uint64_t)v703, v701, (uint64_t)__p, (uint64_t)&unk_2245C9EFE, (__int128 *)object);
            }
            sub_22316F8F4((uint64_t *)__p);
            if (v973 == &v971)
            {
              v704 = 4;
LABEL_1238:
              ((void (*)(uint64_t (***)()))(*v697)[v704])(v697);
            }
            else if (v973)
            {
              v704 = 5;
              v697 = v973;
              goto LABEL_1238;
            }
            if (v969 == &v967[1])
            {
              v705 = 4;
LABEL_1243:
              (*((void (**)(void **))*v700 + v705))(v700);
            }
            else if (v969)
            {
              v705 = 5;
              v700 = v969;
              goto LABEL_1243;
            }
            kdebug_trace();
          }
        }
      }
      *(_OWORD *)v945 = 0u;
      v946 = 0u;
      v947 = 728325624;
      kdebug_trace();
      v706 = HIBYTE(v948.__r_.__value_.__r.__words[2]);
      if ((v948.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v706 = v948.__r_.__value_.__l.__size_;
      if (v706 < 0x11)
        goto LABEL_1257;
      v707 = &v948;
      if ((v948.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v707 = (std::string *)v948.__r_.__value_.__r.__words[0];
      v708 = v707->__r_.__value_.__r.__words[0];
      v709 = v707->__r_.__value_.__l.__size_;
      v710 = v707->__r_.__value_.__s.__data_[16];
      v711 = v708 == 0x6365722E64337663 && v709 == 0x73746174532E6E6FLL;
      if (!v711 || v710 != 46)
        goto LABEL_1257;
      sub_223187510();
      v967[0] = v951[0];
      v967[1] = &off_24EC5D3B8;
      v969 = &v967[1];
      *(_QWORD *)&v968 = nn;
      v970 = 0;
      v971 = &off_24EC5D3B8;
      v973 = &v971;
      v972 = nn;
      sub_2241498F4((uint64_t)__p, 0);
      v823 = *(_QWORD *)&__p[8];
      v824 = *(_QWORD *)__p;
      v825 = v992;
      v826 = v991;
      v827 = v976;
      v828 = v975;
      v829 = v980;
      v932 = v988;
      v925 = v987;
      v929 = v986;
      v918 = v981;
      v922 = v985;
      v830 = (uint64_t)v969;
      v1014.__r_.__value_.__l.__data_ = (std::string::pointer)v967[0];
      v831 = v990;
      v832 = v989;
      if (v969)
      {
        if (v969 != &v967[1])
        {
          v830 = (*((uint64_t (**)(void **, uint64_t))*v969 + 2))(v969, v822);
          goto LABEL_1392;
        }
        v1015 = (std::string *)&v1014.__r_.__value_.__r.__words[1];
        (*((void (**)(uint64_t, _QWORD *))v967[1] + 3))((uint64_t)&v967[1], &v1014.__r_.__value_.__l.__size_);
      }
      else
      {
LABEL_1392:
        v1015 = (std::string *)v830;
      }
      v877 = (uint64_t)v973;
      *(_QWORD *)v993 = v970;
      v878 = &v993[8];
      if (v973)
      {
        if (v973 != &v971)
        {
          v877 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v973)[2])(v973, v822);
          goto LABEL_1450;
        }
        v995 = &v993[8];
        ((void (*)(uint64_t, _QWORD *))v971[3])((uint64_t)&v971, &v993[8]);
      }
      else
      {
LABEL_1450:
        v995 = (_BYTE *)v877;
      }
      v879 = 0xAAAAAAAAAAAAAAABLL * ((v823 - v824) >> 2);
      v880 = (v825 - v826) >> 2;
      v881 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v827 - (_QWORD)v828) >> 2);
      v882 = 0xAAAAAAAAAAAAAAABLL * (((char *)v918 - (char *)v829) >> 2);
      v883 = v932 - v925;
      v884 = 0xAAAAAAAAAAAAAAABLL * ((v929 - (uint64_t)v922) >> 2);
      v885 = v831 - v832;
      for (kk = v1014.__r_.__value_.__r.__words[0]; kk != *(_QWORD *)v993; v1014.__r_.__value_.__r.__words[0] = kk)
      {
        if (!v1015)
          sub_223198474();
        (*(void (**)(void **__return_ptr, std::string *, std::string::size_type))(v1015->__r_.__value_.__r.__words[0]
                                                                                           + 48))(object, v1015, kk + 16);
        v879 = 0xAAAAAAAAAAAAAAABLL * (((char *)object[1] - (char *)object[0]) >> 2) + v879;
        v880 = ((v1012 - v1011) >> 2) + v880;
        v881 = 0xAAAAAAAAAAAAAAABLL * (((char *)object[5] - (char *)object[4]) >> 2) + v881;
        v882 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1001 - (char *)v1000) >> 2) + v882;
        v883 = v1008 + v883 - v1007;
        v884 = 0xAAAAAAAAAAAAAAABLL * ((v1006 - (char *)v1005) >> 2) + v884;
        v885 = v1010 + v885 - v1009;
        sub_22316F8F4((uint64_t *)object);
        kk = *(_QWORD *)v1014.__r_.__value_.__l.__data_;
      }
      if (v995 == &v993[8])
      {
        v887 = 4;
LABEL_1459:
        (*(void (**)(_QWORD *))(*v878 + 8 * v887))(v878);
      }
      else if (v995)
      {
        v887 = 5;
        v878 = v995;
        goto LABEL_1459;
      }
      v888 = &v1014.__r_.__value_.__l.__size_;
      if (v1015 == (std::string *)&v1014.__r_.__value_.__r.__words[1])
      {
        v889 = 4;
LABEL_1464:
        (*(void (**)(std::string::size_type *, uint64_t))(*v888 + 8 * v889))(v888, v822);
      }
      else if (v1015)
      {
        v889 = 5;
        v888 = (std::string::size_type *)v1015;
        goto LABEL_1464;
      }
      sub_22339E3C8((uint64_t)__p, v879);
      sub_223674C80((uint64_t)&v991, v880);
      sub_22339E3C8((uint64_t)&v975, v881);
      sub_22339E3C8((uint64_t)&v980, v882);
      sub_223674E10((uint64_t)&v987, v883);
      sub_22339E528((uint64_t)&v985, v884);
      sub_223674E10((uint64_t)&v989, v885);
      v891 = (uint64_t)v969;
      v1014.__r_.__value_.__l.__data_ = (std::string::pointer)v967[0];
      v892 = &v1014.__r_.__value_.__l.__size_;
      if (v969)
      {
        if (v969 != &v967[1])
        {
          v891 = (*((uint64_t (**)(void **, uint64_t))*v969 + 2))(v969, v890);
          goto LABEL_1468;
        }
        v1015 = (std::string *)&v1014.__r_.__value_.__r.__words[1];
        (*((void (**)(uint64_t, _QWORD *))v967[1] + 3))((uint64_t)&v967[1], &v1014.__r_.__value_.__l.__size_);
      }
      else
      {
LABEL_1468:
        v1015 = (std::string *)v891;
      }
      v893 = (uint64_t)v973;
      *(_QWORD *)v993 = v970;
      v894 = &v993[8];
      if (v973)
      {
        v895 = &v971;
        v376 = v908;
        nn = (float32x2_t *)v944;
        if (v973 != &v971)
        {
          v893 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v973)[2])(v973, v890);
          goto LABEL_1474;
        }
        v995 = &v993[8];
        ((void (*)(uint64_t, _QWORD *))v971[3])((uint64_t)&v971, &v993[8]);
        for (mm = v1014.__r_.__value_.__r.__words[0]; mm != *(_QWORD *)v993; v1014.__r_.__value_.__r.__words[0] = mm)
        {
LABEL_1477:
          if (!v1015)
            sub_223198474();
          (*(void (**)(void **__return_ptr, std::string *, std::string::size_type))(v1015->__r_.__value_.__r.__words[0]
                                                                                             + 48))(object, v1015, mm + 16);
          sub_22414E9E0((uint64_t)__p, (uint64_t)object);
          sub_22316F8F4((uint64_t *)object);
          mm = *(_QWORD *)v1014.__r_.__value_.__l.__data_;
        }
      }
      else
      {
        v376 = v908;
        nn = (float32x2_t *)v944;
        v895 = &v971;
LABEL_1474:
        v995 = (_BYTE *)v893;
        mm = v1014.__r_.__value_.__r.__words[0];
        if (v1014.__r_.__value_.__r.__words[0] != *(_QWORD *)v993)
          goto LABEL_1477;
      }
      if (v995 == &v993[8])
      {
        v897 = 4;
LABEL_1483:
        (*(void (**)(_QWORD *))(*v894 + 8 * v897))(v894);
      }
      else if (v995)
      {
        v897 = 5;
        v894 = v995;
        goto LABEL_1483;
      }
      if (v1015 == (std::string *)&v1014.__r_.__value_.__r.__words[1])
      {
        v899 = 4;
        v898 = &v967[1];
LABEL_1488:
        (*(void (**)(std::string::size_type *))(*v892 + 8 * v899))(v892);
      }
      else
      {
        v898 = &v967[1];
        if (v1015)
        {
          v899 = 5;
          v892 = (std::string::size_type *)v1015;
          goto LABEL_1488;
        }
      }
      sub_22316F8F4((uint64_t *)__p);
      if (v973 == &v971)
      {
        v900 = 4;
LABEL_1493:
        ((void (*)(uint64_t (***)()))(*v895)[v900])(v895);
      }
      else if (v973)
      {
        v900 = 5;
        v895 = v973;
        goto LABEL_1493;
      }
      if (v969 == &v967[1])
      {
        v901 = 4;
      }
      else
      {
        if (!v969)
          goto LABEL_1257;
        v901 = 5;
        v898 = v969;
      }
      (*((void (**)(void **))*v898 + v901))(v898);
LABEL_1257:
      kdebug_trace();
      if (SHIBYTE(v948.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v948.__r_.__value_.__l.__data_);
      object[0] = "cv3d.recon.";
      object[1] = (void *)11;
      object[2] = "PRR.ResultChunks";
      object[3] = (void *)16;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)v967);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v713 = sub_2241471F8();
        v714 = v713[2];
        if (!v714)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v714 = v713[2];
        }
        v715 = *(_QWORD *)(v714 + 64);
        v716 = (std::mutex *)(v715 + 32);
        std::mutex::lock((std::mutex *)(v715 + 32));
        v718 = *(_QWORD *)(v715 + 96);
        v717 = *(_QWORD *)(v715 + 104);
        std::mutex::unlock(v716);
        if (v718 != v717)
        {
          v719 = BYTE7(v968);
          v720 = (void **)v967[0];
          sub_2241471F8();
          v721 = v719 >= 0 ? v967 : v720;
          v722 = (*(uint64_t (**)(uint64_t *, void **))(qword_2557952E0 + 48))(&qword_2557952E0, v721);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v722 + 24))(v722))
          {
            memset(__p, 0, sizeof(__p));
            LODWORD(v975) = 728325608;
            kdebug_trace();
            sub_223986F40((uint64_t)object, (uint64_t)nn, (uint64_t)v950, *(float *)(a3 + 144));
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v722 + 24))(v722))
            {
              v1014.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v1014.__r_.__value_.__l.__size_ = 2;
              v723 = sub_2241471F8();
              sub_2238BB49C((uint64_t)v723, v722, (uint64_t)object, (uint64_t)&unk_2245C9EFE, (__int128 *)&v1014);
            }
            sub_22316F8F4((uint64_t *)object);
            kdebug_trace();
          }
        }
      }
      memset(__p, 0, sizeof(__p));
      LODWORD(v975) = 728325624;
      kdebug_trace();
      v724 = BYTE7(v968);
      if (SBYTE7(v968) < 0)
        v724 = (unint64_t)v967[1];
      if (v724 >= 0x11)
      {
        v725 = v967;
        if (SBYTE7(v968) < 0)
          v725 = (void **)v967[0];
        v726 = *v725;
        v727 = v725[1];
        v728 = *((unsigned __int8 *)v725 + 16);
        if (v726 == (void *)0x6365722E64337663 && v727 == (void *)0x73746174532E6E6FLL && v728 == 46)
        {
          sub_223187510();
          sub_223986F40((uint64_t)object, (uint64_t)nn, (uint64_t)v950, *(float *)(a3 + 144));
          sub_22316F8F4((uint64_t *)object);
        }
      }
      kdebug_trace();
      if (SBYTE7(v968) < 0)
        operator delete(v967[0]);
      object[0] = "cv3d.recon.";
      object[1] = (void *)11;
      object[2] = "PRR.AccumulatedResult";
      object[3] = (void *)21;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, &v1014);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v731 = sub_2241471F8();
        v732 = v731[2];
        if (!v732)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v732 = v731[2];
        }
        v733 = *(_QWORD *)(v732 + 64);
        v734 = (std::mutex *)(v733 + 32);
        std::mutex::lock((std::mutex *)(v733 + 32));
        v736 = *(_QWORD *)(v733 + 96);
        v735 = *(_QWORD *)(v733 + 104);
        std::mutex::unlock(v734);
        if (v736 != v735)
        {
          v737 = HIBYTE(v1014.__r_.__value_.__r.__words[2]);
          v738 = (std::string *)v1014.__r_.__value_.__r.__words[0];
          sub_2241471F8();
          v739 = v737 >= 0 ? &v1014 : v738;
          v740 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v739);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v740 + 24))(v740))
          {
            memset(__p, 0, sizeof(__p));
            LODWORD(v975) = 728325608;
            kdebug_trace();
            v967[0] = (void *)nn[23];
            *(_QWORD *)&v968 = 0;
            sub_2241498F4((uint64_t)object, 0);
            sub_22392E874(object, (uint64_t)v967);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v740 + 24))(v740))
            {
              *(_QWORD *)v993 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              *(_QWORD *)&v993[8] = 2;
              v741 = sub_2241471F8();
              sub_2238BB49C((uint64_t)v741, v740, (uint64_t)object, (uint64_t)&unk_2245C9EFE, (__int128 *)v993);
            }
            sub_22316F8F4((uint64_t *)object);
            kdebug_trace();
          }
        }
      }
      memset(__p, 0, sizeof(__p));
      LODWORD(v975) = 728325624;
      kdebug_trace();
      v742 = HIBYTE(v1014.__r_.__value_.__r.__words[2]);
      if ((v1014.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v742 = v1014.__r_.__value_.__l.__size_;
      if (v742 >= 0x11)
      {
        v743 = &v1014;
        if ((v1014.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v743 = (std::string *)v1014.__r_.__value_.__r.__words[0];
        v744 = v743->__r_.__value_.__r.__words[0];
        v745 = v743->__r_.__value_.__l.__size_;
        v746 = v743->__r_.__value_.__s.__data_[16];
        if (v744 == 0x6365722E64337663 && v745 == 0x73746174532E6E6FLL && v746 == 46)
        {
          sub_223187510();
          v967[0] = (void *)nn[23];
          *(_QWORD *)&v968 = 0;
          sub_2241498F4((uint64_t)object, 0);
          sub_22392E874(object, (uint64_t)v967);
          sub_22316F8F4((uint64_t *)object);
        }
      }
      kdebug_trace();
      if (SHIBYTE(v1014.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v1014.__r_.__value_.__l.__data_);
        if (nn[50].i8[0])
          goto LABEL_1317;
      }
      else
      {
        if (!nn[50].i8[0])
          goto LABEL_1349;
LABEL_1317:
        object[0] = "cv3d.recon.";
        object[1] = (void *)11;
        object[2] = "Stats.PRR.Timing";
        object[3] = (void *)16;
        sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)__p);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v749 = sub_2241471F8();
          v750 = v749[2];
          if (!v750)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v750 = v749[2];
          }
          v751 = *(_QWORD *)(v750 + 64);
          v752 = (std::mutex *)(v751 + 32);
          std::mutex::lock((std::mutex *)(v751 + 32));
          v754 = *(_QWORD *)(v751 + 96);
          v753 = *(_QWORD *)(v751 + 104);
          std::mutex::unlock(v752);
          if (v754 != v753)
          {
            v755 = __p[23];
            v756 = *(_BYTE **)__p;
            sub_2241471F8();
            v757 = v755 >= 0 ? __p : v756;
            v758 = (*(uint64_t (**)(uint64_t *, _BYTE *))(qword_2557952E0 + 48))(&qword_2557952E0, v757);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v758 + 24))(v758))
            {
              memset(object, 0, 32);
              LODWORD(object[4]) = 728325608;
              kdebug_trace();
              *(double *)v967 = (double)(a6 - *(_QWORD *)&nn[49]) / 1000000000.0;
              sub_2238B2C00((double *)&qword_255788F20, v758, (double *)v967, "seconds between updates");
              kdebug_trace();
            }
          }
        }
        memset(object, 0, 32);
        LODWORD(object[4]) = 728325624;
        kdebug_trace();
        v759 = __p[23];
        if (__p[23] < 0)
          v759 = *(_QWORD *)&__p[8];
        if (v759 >= 0x11)
        {
          v760 = __p;
          if (__p[23] < 0)
            v760 = *(_BYTE **)__p;
          v761 = *(_QWORD *)v760;
          v762 = *((_QWORD *)v760 + 1);
          v763 = v760[16];
          if (v761 == 0x6365722E64337663 && v762 == 0x73746174532E6E6FLL && v763 == 46)
          {
            v766 = sub_223187510();
            if (__p[23] >= 0)
              v767 = __p;
            else
              v767 = *(_BYTE **)__p;
            if (__p[23] >= 0)
              v768 = __p[23];
            else
              v768 = *(_QWORD *)&__p[8];
            *(double *)v967 = (double)(a6 - *(_QWORD *)&nn[49]) / 1000000000.0;
            sub_2231AA374((uint64_t *)v766, v767, v768, (uint64_t *)v967, (uint64_t)"seconds between updates", 23);
          }
        }
        kdebug_trace();
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
LABEL_1349:
      sub_224569D7C();
      sub_224569A80();
      if (!os_variant_has_internal_diagnostics())
        goto LABEL_1543;
      v769 = sub_2241471F8();
      v770 = v769[2];
      if (!v770)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v770 = v769[2];
      }
      v771 = *(_QWORD *)(v770 + 64);
      v772 = (std::mutex *)(v771 + 32);
      std::mutex::lock((std::mutex *)(v771 + 32));
      v774 = *(_QWORD *)(v771 + 96);
      v773 = *(_QWORD *)(v771 + 104);
      std::mutex::unlock(v772);
      if (v774 == v773)
        goto LABEL_1543;
      object[0] = "cv3d.recon.";
      object[1] = (void *)11;
      object[2] = "PRR.UserAccumulatedResult";
      object[3] = (void *)25;
      sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, (std::string *)v945);
      v775 = BYTE7(v946);
      v776 = (void **)v945[0];
      sub_2241471F8();
      if (v775 >= 0)
        v777 = v945;
      else
        v777 = v776;
      v778 = (*(uint64_t (**)(uint64_t *, void **))(qword_2557952E0 + 48))(&qword_2557952E0, v777);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v778 + 24))(v778))
      {
        memset(__p, 0, sizeof(__p));
        LODWORD(v975) = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v778 + 24))(v778))
        {
          v948.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v948.__r_.__value_.__l.__size_ = 2;
          v779 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v778 + 24))(v778))
          {
            v967[0] = (void *)nn[23];
            *(_QWORD *)&v968 = 0;
            sub_2241498F4((uint64_t)object, 0);
            sub_22392E874(object, (uint64_t)v967);
            if (nn[48].i8[0])
            {
              *(float32x2_t *)v780.i8 = *v904;
              v780.i32[2] = v904[1].i32[0];
              *(float32x2_t *)v781.i8 = v904[2];
              v781.i32[2] = v904[3].i32[0];
              v782.i32[0] = v904[5].i32[0];
              *(float32x2_t *)v783.f32 = v904[6];
              v783.i32[2] = v904[7].i32[0];
              v790.i64[0] = vzip1q_s32(v780, v781).u64[0];
              v784 = (int8x16_t)vnegq_f32(v783);
              v785 = vtrn2q_s32(v780, v781);
              v786 = vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v790.f32, *(float *)v784.i32), *(float32x2_t *)v785.i8, *(float32x2_t *)v783.f32, 1);
              v787 = (int8x16_t)v785;
              v787.i32[2] = HIDWORD(*(_QWORD *)&v904[4]);
              v793 = (float32x4_t)vzip2q_s32(v780, v781);
              *(float32x2_t *)v789.f32 = vmls_laneq_f32(v786, *(float32x2_t *)v793.f32, v783, 2);
              v793.i32[2] = v782.i32[0];
              v788 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v793, 2);
              v789.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v904[4], *(float32x2_t *)v784.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v904[4], 1), *(float32x2_t *)v783.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v784, v784, 8uLL), v782).u32[0]);
              v790.i64[1] = *(_QWORD *)&v904[4];
              v791 = vextq_s8(v787, v788, 4uLL).u64[0];
              v792.i32[3] = 0;
              v792.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v787, 0).i32[3];
              *(uint64_t *)((char *)v792.i64 + 4) = v791;
              v793.i64[1] = v788.u32[0];
              v794 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v790, COERCE_FLOAT(*(_OWORD *)nn[40].f32)), v792, nn[40], 1), v793, *(float32x4_t *)nn[40].f32, 2), v789, *(float32x4_t *)nn[40].f32, 3);
              v795 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v790, COERCE_FLOAT(*(_OWORD *)nn[42].f32)), v792, nn[42], 1), v793, *(float32x4_t *)nn[42].f32, 2), v789, *(float32x4_t *)nn[42].f32, 3);
              v796 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v790, COERCE_FLOAT(*(_OWORD *)nn[44].f32)), v792, nn[44], 1), v793, *(float32x4_t *)nn[44].f32, 2), v789, *(float32x4_t *)nn[44].f32, 3);
              v797 = (float32x2_t *)object[0];
              v798 = (float32x2_t *)object[1];
              v799 = (float32x2_t)vextq_s8(v794, v794, 8uLL).u64[0];
              v800 = (float32x2_t)vextq_s8(v795, v795, 8uLL).u64[0];
              v801 = (float32x2_t)vextq_s8(v796, v796, 8uLL).u64[0];
              if (object[0] != object[1])
              {
                v790 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v790, COERCE_FLOAT(*(_OWORD *)nn[46].f32)), v792, nn[46], 1), v793, *(float32x4_t *)nn[46].f32, 2), v789, *(float32x4_t *)nn[46].f32, 3);
                do
                {
                  v793.i32[0] = v797[1].i32[0];
                  *(float32x2_t *)v802.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v794.i8, COERCE_FLOAT(*v797)), *(float32x2_t *)v795.i8, *v797, 1), *(float32x2_t *)v796.i8, v793.f32[0]);
                  *(float32x2_t *)&v802.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v799, *v797), v800, *v797, 1), *(float32x2_t *)v793.f32, v801);
                  v803 = vaddq_f32(v802, v790);
                  v797[1].i32[0] = v803.i32[2];
                  *v797 = *(float32x2_t *)v803.f32;
                  v797 = (float32x2_t *)((char *)v797 + 12);
                }
                while (v797 != v798);
              }
              v804 = v1000;
              v805 = (float32x2_t *)v1001;
              if (v1000 != (float32x2_t *)v1001)
              {
                do
                {
                  v790.i32[0] = v804[1].i32[0];
                  v806 = vmla_f32(vmla_lane_f32(vmul_f32(v799, *v804), v800, *v804, 1), *(float32x2_t *)v790.f32, v801).u32[0];
                  *v804 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v794.i8, COERCE_FLOAT(*v804)), *(float32x2_t *)v795.i8, *v804, 1), *(float32x2_t *)v796.i8, v790.f32[0]);
                  v804[1].i32[0] = v806;
                  v804 = (float32x2_t *)((char *)v804 + 12);
                }
                while (v804 != v805);
              }
            }
            LOBYTE(v967[0]) = 0;
            BYTE8(v968) = 0;
            sub_22329F414((uint64_t)object, (__int128 *)v967, (__int128 *)&v948, &v1014);
            if (BYTE8(v968) && SBYTE7(v968) < 0)
              operator delete(v967[0]);
            sub_22316F8F4((uint64_t *)object);
            v807 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v778 + 56))(v778);
            v808 = *(void **)v807;
            v809 = *(std::__shared_weak_count **)(v807 + 8);
            if (v809)
            {
              v810 = (unint64_t *)&v809->__shared_owners_;
              do
                v811 = __ldxr(v810);
              while (__stxr(v811 + 1, v810));
            }
            v812 = *(_OWORD *)&v1014.__r_.__value_.__r.__words[1];
            *(_QWORD *)v993 = &off_24EC6A3B8;
            *(_OWORD *)&v993[8] = *(_OWORD *)&v1014.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v1014.__r_.__value_.__r.__words[1] = 0uLL;
            object[0] = v808;
            object[1] = v809;
            if (v809)
            {
              v813 = (unint64_t *)&v809->__shared_owners_;
              do
                v814 = __ldxr(v813);
              while (__stxr(v814 + 1, v813));
            }
            object[2] = &off_24EC6A3B8;
            *(_OWORD *)&object[3] = v812;
            if (*((_QWORD *)&v812 + 1))
            {
              v815 = (unint64_t *)(*((_QWORD *)&v812 + 1) + 8);
              do
                v816 = __ldxr(v815);
              while (__stxr(v816 + 1, v815));
            }
            (*(void (**)(uint64_t *, void **))(*v779 + 16))(v779, object);
            sub_2241231D8((uint64_t)&object[2]);
            v817 = (std::__shared_weak_count *)object[1];
            if (object[1])
            {
              v818 = (unint64_t *)((char *)object[1] + 8);
              do
                v819 = __ldaxr(v818);
              while (__stlxr(v819 - 1, v818));
              if (!v819)
              {
                ((void (*)(std::__shared_weak_count *))v817->__on_zero_shared)(v817);
                std::__shared_weak_count::__release_weak(v817);
              }
            }
            sub_2241231D8((uint64_t)v993);
            if (v809)
            {
              v820 = (unint64_t *)&v809->__shared_owners_;
              do
                v821 = __ldaxr(v820);
              while (__stlxr(v821 - 1, v820));
              if (!v821)
              {
                ((void (*)(std::__shared_weak_count *))v809->__on_zero_shared)(v809);
                std::__shared_weak_count::__release_weak(v809);
              }
            }
            sub_2241231D8((uint64_t)&v1014);
          }
        }
        kdebug_trace();
      }
      if (SBYTE7(v946) < 0)
      {
        operator delete(v945[0]);
        if (*((_BYTE *)v376 + 32))
        {
LABEL_1396:
          object[0] = "cv3d.recon.";
          object[1] = (void *)11;
          object[2] = "PRR.UserResult";
          object[3] = (void *)14;
          sub_2231A9820((uint64_t)object, (uint64_t)&object[4], 0, 0, &v1014);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v833 = sub_2241471F8();
            v834 = v833[2];
            if (!v834)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v834 = v833[2];
            }
            v835 = *(_QWORD *)(v834 + 64);
            v836 = (std::mutex *)(v835 + 32);
            std::mutex::lock((std::mutex *)(v835 + 32));
            v838 = *(_QWORD *)(v835 + 96);
            v837 = *(_QWORD *)(v835 + 104);
            std::mutex::unlock(v836);
            if (v838 != v837)
            {
              v839 = HIBYTE(v1014.__r_.__value_.__r.__words[2]);
              v840 = (std::string *)v1014.__r_.__value_.__r.__words[0];
              sub_2241471F8();
              v841 = v839 >= 0 ? &v1014 : v840;
              v842 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v841);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v842 + 24))(v842))
              {
                *(_OWORD *)v967 = 0u;
                v968 = 0u;
                LODWORD(v969) = 728325608;
                kdebug_trace();
                v844 = *v376;
                v843 = v376[1];
                sub_2241498F4((uint64_t)__p, 0);
                v845 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 2);
                v846 = (v992 - v991) >> 2;
                v847 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v976 - (_QWORD)v975) >> 2);
                v848 = 0xAAAAAAAAAAAAAAABLL * (((char *)v981 - (char *)v980) >> 2);
                v849 = v988 - v987;
                v850 = 0xAAAAAAAAAAAAAAABLL * ((v986 - (uint64_t)v985) >> 2);
                v851 = v990 - v989;
                v942 = v843;
                if (v844 != v843)
                {
                  v852 = v844;
                  do
                  {
                    sub_223180698((uint64_t)object, *(_QWORD *)(v852 + 16));
                    v845 = 0xAAAAAAAAAAAAAAABLL * (((char *)object[1] - (char *)object[0]) >> 2) + v845;
                    v846 = ((v1012 - v1011) >> 2) + v846;
                    v847 = 0xAAAAAAAAAAAAAAABLL * (((char *)object[5] - (char *)object[4]) >> 2) + v847;
                    v848 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1001 - (char *)v1000) >> 2) + v848;
                    v849 = v1008 + v849 - v1007;
                    v850 = 0xAAAAAAAAAAAAAAABLL * ((v1006 - (char *)v1005) >> 2) + v850;
                    v851 = v1010 + v851 - v1009;
                    sub_22316F8F4((uint64_t *)object);
                    v852 += 120;
                  }
                  while (v852 != v942);
                }
                sub_22339E3C8((uint64_t)__p, v845);
                sub_223674C80((uint64_t)&v991, v846);
                sub_22339E3C8((uint64_t)&v975, v847);
                sub_22339E3C8((uint64_t)&v980, v848);
                sub_223674E10((uint64_t)&v987, v849);
                sub_22339E528((uint64_t)&v985, v850);
                sub_223674E10((uint64_t)&v989, v851);
                v376 = v908;
                for (nn = (float32x2_t *)v944; v844 != v942; v844 += 120)
                {
                  sub_223180698((uint64_t)object, *(_QWORD *)(v844 + 16));
                  sub_22414E9E0((uint64_t)__p, (uint64_t)object);
                  sub_22316F8F4((uint64_t *)object);
                }
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v842 + 24))(v842))
                {
                  object[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  object[1] = (void *)2;
                  v853 = sub_2241471F8();
                  sub_2238BB49C((uint64_t)v853, v842, (uint64_t)__p, (uint64_t)&unk_2245C9EFE, (__int128 *)object);
                }
                sub_22316F8F4((uint64_t *)__p);
                kdebug_trace();
              }
            }
          }
          *(_OWORD *)v967 = 0u;
          v968 = 0u;
          LODWORD(v969) = 728325624;
          kdebug_trace();
          v854 = HIBYTE(v1014.__r_.__value_.__r.__words[2]);
          if ((v1014.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v854 = v1014.__r_.__value_.__l.__size_;
          if (v854 >= 0x11)
          {
            v855 = &v1014;
            if ((v1014.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v855 = (std::string *)v1014.__r_.__value_.__r.__words[0];
            v856 = v855->__r_.__value_.__r.__words[0];
            v857 = v855->__r_.__value_.__l.__size_;
            v858 = v855->__r_.__value_.__s.__data_[16];
            if (v856 == 0x6365722E64337663 && v857 == 0x73746174532E6E6FLL && v858 == 46)
            {
              sub_223187510();
              v862 = *v376;
              v861 = v376[1];
              sub_2241498F4((uint64_t)__p, 0);
              v863 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 2);
              v864 = (v992 - v991) >> 2;
              v865 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v976 - (_QWORD)v975) >> 2);
              v866 = 0xAAAAAAAAAAAAAAABLL * (((char *)v981 - (char *)v980) >> 2);
              v867 = v988 - v987;
              v868 = 0xAAAAAAAAAAAAAAABLL * ((v986 - (uint64_t)v985) >> 2);
              v869 = v990 - v989;
              v943 = v861;
              if (v862 != v861)
              {
                v870 = v862;
                do
                {
                  sub_223180698((uint64_t)object, *(_QWORD *)(v870 + 16));
                  v863 = 0xAAAAAAAAAAAAAAABLL * (((char *)object[1] - (char *)object[0]) >> 2) + v863;
                  v864 = ((v1012 - v1011) >> 2) + v864;
                  v865 = 0xAAAAAAAAAAAAAAABLL * (((char *)object[5] - (char *)object[4]) >> 2) + v865;
                  v866 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1001 - (char *)v1000) >> 2) + v866;
                  v867 = v1008 + v867 - v1007;
                  v868 = 0xAAAAAAAAAAAAAAABLL * ((v1006 - (char *)v1005) >> 2) + v868;
                  v869 = v1010 + v869 - v1009;
                  sub_22316F8F4((uint64_t *)object);
                  v870 += 120;
                }
                while (v870 != v943);
              }
              sub_22339E3C8((uint64_t)__p, v863);
              sub_223674C80((uint64_t)&v991, v864);
              sub_22339E3C8((uint64_t)&v975, v865);
              sub_22339E3C8((uint64_t)&v980, v866);
              sub_223674E10((uint64_t)&v987, v867);
              sub_22339E528((uint64_t)&v985, v868);
              sub_223674E10((uint64_t)&v989, v869);
              for (nn = (float32x2_t *)v944; v862 != v943; v862 += 120)
              {
                sub_223180698((uint64_t)object, *(_QWORD *)(v862 + 16));
                sub_22414E9E0((uint64_t)__p, (uint64_t)object);
                sub_22316F8F4((uint64_t *)object);
              }
              sub_22316F8F4((uint64_t *)__p);
            }
          }
          kdebug_trace();
          if (SHIBYTE(v1014.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1014.__r_.__value_.__l.__data_);
        }
      }
      else
      {
LABEL_1543:
        if (*((_BYTE *)v376 + 32))
          goto LABEL_1396;
      }
      nn[49] = (float32x2_t)a6;
      nn[50].i8[0] = a7;
    }
  }
LABEL_1435:
  v871 = v951[0];
  if (v951[0])
  {
    do
    {
      v872 = (_QWORD *)*v871;
      operator delete(v871);
      v871 = v872;
    }
    while (v872);
  }
  v873 = v950[0];
  v950[0] = 0;
  if (v873)
    operator delete(v873);
  v874 = (_QWORD *)v958;
  if ((_QWORD)v958)
  {
    do
    {
      v875 = (_QWORD *)*v874;
      sub_22316F8F4(v874 + 4);
      operator delete(v874);
      v874 = v875;
    }
    while (v875);
  }
  v876 = v957[0];
  v957[0] = 0;
  if (v876)
    operator delete(v876);
}

void sub_22398F548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (LOBYTE(STACK[0x4B8]))
  {
    if (SLOBYTE(STACK[0x4B7]) < 0)
      operator delete((void *)STACK[0x4A0]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x2F0]);
  sub_22322E828((uint64_t)&a61);
  sub_223530D14((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_2239901EC(uint64_t *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  char v99;

  v4 = (_QWORD *)a1[2];
  if (!sub_2239942A0((_QWORD *)*a1, a2))
  {
    v5 = *a1;
    *(_QWORD *)&v59 = a2;
    v6 = sub_223939EBC(v5, a2, (uint64_t)&unk_2245BA939, (uint64_t **)&v59);
    v7 = v6 + 4;
    if (*(_BYTE *)a1[1])
    {
      if (*(_BYTE *)(a1[7] + 16))
      {
        if (sub_2239942A0((_QWORD *)a1[8], a2))
        {
          v8 = sub_2239942A0((_QWORD *)a1[8], a2);
          if (!v8)
            sub_223198218("unordered_map::at: key not found");
          sub_22316B5A4((uint64_t)v7, (uint64_t)(v8 + 4));
        }
        sub_223180698((uint64_t)&v18, (uint64_t)v7);
        v10 = v29;
        v9 = v30;
        v11 = -1431655765 * ((unint64_t)(v30 - v29) >> 2);
        if (v11)
        {
          v12 = v11 - 1;
          do
          {
            v13 = v12;
            v14 = v42;
            if (*(unsigned __int8 *)(v42 + v12) == 255 || *(unsigned __int8 *)(v46 + v12) == 255)
            {
              v15 = (uint64_t *)(v9 - 12);
              v16 = v29 + 12 * v12;
              if ((uint64_t *)v16 != v15)
              {
                v17 = *v15;
                *(_DWORD *)(v16 + 8) = *((_DWORD *)v15 + 2);
                *(_QWORD *)v16 = v17;
                v14 = v42;
              }
              *(_BYTE *)(v14 + v12) = *(_BYTE *)(*((_QWORD *)&v42 + 1) - 1);
              *(_BYTE *)(v46 + v12) = *(_BYTE *)(v47 - 1);
              v9 = v30 - 12;
              v30 -= 12;
              --*((_QWORD *)&v42 + 1);
              *(_QWORD *)&v47 = v47 - 1;
            }
            --v12;
          }
          while (v13);
          v10 = v29;
        }
        if (v10 == v9)
        {
          sub_2241498F4((uint64_t)&v59, 0);
        }
        else
        {
          v59 = v18;
          v60 = v19;
          v61 = v20;
          v18 = 0uLL;
          v62 = v21;
          v63 = v22;
          v64 = v23;
          v19 = 0;
          v21 = 0uLL;
          v22 = 0;
          v65 = v24;
          v66 = v25;
          v67 = v26;
          v68 = v27;
          v25 = 0uLL;
          v69 = v28;
          v70 = v10;
          v71 = v9;
          v73 = v32;
          v72 = v31;
          v30 = 0;
          v31 = 0;
          v29 = 0;
          v74 = v33;
          v76 = v35;
          v75 = v34;
          v26 = 0;
          v33 = 0uLL;
          v34 = 0;
          v77 = v36;
          v79 = v38;
          v78 = v37;
          v36 = 0uLL;
          v80 = v39;
          v82 = v41;
          v81 = v40;
          v37 = 0;
          v39 = 0uLL;
          v40 = 0;
          v83 = v42;
          v85 = v44;
          v84 = v43;
          v42 = 0uLL;
          v86 = v45;
          v89 = v48;
          v87 = v46;
          v88 = v47;
          v43 = 0;
          v46 = 0;
          v47 = 0uLL;
          v90 = v49;
          v91 = v50;
          v93 = v52;
          v92 = v51;
          v50 = 0uLL;
          v51 = 0;
          v94 = v53;
          LOBYTE(v95) = 0;
          v99 = 0;
          if (v58)
          {
            v96 = v55;
            v95 = v54;
            v97 = v56;
            v98 = v57;
            v99 = 1;
          }
        }
        sub_2237C2E74(v7, (uint64_t)&v59);
        sub_22316F8F4((uint64_t *)&v59);
        sub_22316F8F4((uint64_t *)&v18);
      }
    }
    else
    {
      if (*a2 == *((_DWORD *)v4 + 34) && a2[1] == *((_DWORD *)v4 + 35) && a2[2] == *((_DWORD *)v4 + 36))
        return;
      sub_223D01024(a1[3], (uint64_t)a2, 1, 1u, (uint64_t)v7, v4 + 27, 1);
      ++*(_DWORD *)a1[4];
      *(_DWORD *)a1[5] -= 1431655765 * ((v6[5] - v6[4]) >> 2);
      *(_DWORD *)a1[6] -= 1431655765 * ((v6[19] - v6[18]) >> 2);
    }
    *(_DWORD *)a1[9] -= 1431655765 * ((v6[5] - v6[4]) >> 2);
    *(_DWORD *)a1[10] -= 1431655765 * ((v6[19] - v6[18]) >> 2);
  }
}

void sub_223990630(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22356F6DC((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223990750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22399076C(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22356F6DC((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22399088C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2239908A8(float32x2_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>, int32x4_t a4@<Q1>, int32x4_t a5@<Q2>, float32x2_t a6@<D4>, float32x4_t a7@<Q5>)
{
  float32x2_t *v7;
  uint64_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  float32x2_t v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  char *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  const char *v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  const char *v40;
  size_t v41;
  _BYTE *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  int v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  float32x2_t *v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x2_t *v92;
  float32x2_t *i;
  unsigned __int32 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  uint64_t (***v110)();
  uint64_t v111;
  std::string::size_type *p_size;
  uint64_t v113;
  uint64_t v114;
  uint64_t (***v115)();
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *j;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::string::size_type v129;
  uint64_t (**v130)();
  unint64_t v131;
  uint64_t (**v132)();
  unint64_t *v133;
  unint64_t v134;
  char *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  std::mutex *v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  std::string *v146;
  std::string *v147;
  uint64_t v148;
  std::string::size_type size;
  std::string *v150;
  std::string::size_type v151;
  std::string::size_type v152;
  int v153;
  __n128 *v156;
  std::string *v157;
  size_t v158;
  uint64_t v159;
  uint64_t v160;
  float32x2_t *v161;
  const char *__src;
  int v163;
  float32x2_t *v164;
  float32x4_t v165;
  float32x2_t *v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  uint64_t v173;
  uint64_t *v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  std::string v179;
  int v180;
  std::string *v181;
  uint64_t v182;
  _QWORD v183[2];
  std::__shared_weak_count *v184;
  _QWORD *v185;
  _BYTE object[40];
  void *__p[2];
  unint64_t v188;
  char v189;
  _QWORD v190[5];
  _QWORD v191[16];
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD v196[4];
  __int32 v197;
  _OWORD v198[2];
  _OWORD *v199;
  uint64_t v200;
  uint64_t (**v201)();
  char v202;
  char v203;
  uint64_t (***v204)();
  uint64_t v205;

  v7 = a1;
  v205 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  v9 = a1[48].u8[0];
  if (!a1[48].i8[0])
  {
    v172 = 0u;
    v16 = *a2;
    v17 = a2[2];
    v164 = a1;
    if (*a2 == v17)
      goto LABEL_133;
    goto LABEL_5;
  }
  *(float32x2_t *)a4.i8 = a1[32];
  a4.i32[2] = a1[33].i32[0];
  *(float32x2_t *)a5.i8 = a1[34];
  a5.i32[2] = a1[35].i32[0];
  a6.i32[0] = a1[37].i32[0];
  *(float32x2_t *)a7.f32 = a1[38];
  a7.i32[2] = a1[39].i32[0];
  v10.i64[0] = vzip1q_s32(a4, a5).u64[0];
  v11 = (int8x16_t)vnegq_f32(a7);
  v12 = (int8x16_t)vtrn2q_s32(a4, a5);
  v12.i32[2] = HIDWORD(*(_QWORD *)&a1[36]);
  v13 = (float32x4_t)vzip2q_s32(a4, a5);
  *(float32x2_t *)v14.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v10.f32, *(float *)v11.i32), *(float32x2_t *)v12.i8, *(float32x2_t *)a7.f32, 1), *(float32x2_t *)v13.f32, a7, 2);
  v13.i32[2] = a6.i32[0];
  v14.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(a1[36], *(float32x2_t *)v11.i8), (float32x2_t)vdup_lane_s32((int32x2_t)a1[36], 1), *(float32x2_t *)a7.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), a6);
  v10.i64[1] = *(_QWORD *)&a1[36];
  v15.i32[3] = 0;
  v15.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v12, 0).i32[3];
  *(uint64_t *)((char *)v15.i64 + 4) = vextq_s8(v12, v14, 4uLL).u64[0];
  v13.i64[1] = vdupq_laneq_s32((int32x4_t)v13, 2).u32[0];
  v14.i32[3] = 1.0;
  v171 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a1[42].f32)), v15, a1[42], 1), v13, *(float32x4_t *)a1[42].f32, 2), (float32x4_t)v14, *(float32x4_t *)a1[42].f32, 3);
  v172 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a1[40].f32)), v15, a1[40], 1), v13, *(float32x4_t *)a1[40].f32, 2), (float32x4_t)v14, *(float32x4_t *)a1[40].f32, 3);
  v170 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a1[44].f32)), v15, a1[44], 1), v13, *(float32x4_t *)a1[44].f32, 2), (float32x4_t)v14, *(float32x4_t *)a1[44].f32, 3);
  v165 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a1[46].f32)), v15, a1[46], 1), v13, *(float32x4_t *)a1[46].f32, 2), (float32x4_t)v14, *(float32x4_t *)a1[46].f32, 3);
  v16 = *a2;
  v17 = a2[2];
  v164 = a1;
  if (*a2 != v17)
  {
LABEL_5:
    v18 = (uint64_t)&a1[21];
    v166 = a1 + 7;
    v161 = a1 + 21;
    v168 = (float32x2_t)vextq_s8(v171, v171, 8uLL).u64[0];
    v169 = (float32x2_t)vextq_s8(v172, v172, 8uLL).u64[0];
    v167 = (float32x2_t)vextq_s8(v170, v170, 8uLL).u64[0];
    do
    {
      v176 = v16[2];
      v177 = *((_DWORD *)v16 + 6);
      *(_QWORD *)object = &v176;
      v19 = sub_223939EBC(v18, (int *)&v176, (uint64_t)&unk_2245BA939, (uint64_t **)object);
      v20 = v19[35] - v19[34];
      if (v20 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[19] - v19[18]) >> 2))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/PRRImpl.hpp", 45, (uint64_t)"chunk_mesh.semantics.size() == chunk_mesh.faces.size()", 54, (uint64_t)"The mesh must contain per-face semantics", 40, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_234;
        }
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[19] - v19[18]) >> 2);
      }
      if (v19[40] - v19[39] != v20
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/PRRImpl.hpp", 47, (uint64_t)"chunk_mesh.materials.size() == chunk_mesh.faces.size()", 54, (uint64_t)"The mesh must contain per-face materials", 40, (void (*)(void **))sub_22457406C)|| v19[14] - v19[13] != v19[5] - v19[4]&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/PRRImpl.hpp", 49, (uint64_t)"chunk_mesh.normals.size() == chunk_mesh.vertices.size()", 55, (uint64_t)"The mesh must contain per-vertex normals", 40, (void (*)(void **))sub_22457406C))
      {
LABEL_234:
        abort();
      }
      v21 = (uint64_t)(v19[45] - v19[44]) >> 2;
      if (v7[15].i32[0] == 2)
      {
        if (v21 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[19] - v19[18]) >> 2))
          goto LABEL_20;
        v22 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/PRRImpl.hpp", 52, (uint64_t)"chunk_mesh.confidences.size() == chunk_mesh.faces.size()", 56, (uint64_t)"The mesh must contain per-face confidences", 42, (void (*)(void **))sub_22457406C);
      }
      else
      {
        if (v21 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[5] - v19[4]) >> 2))
          goto LABEL_20;
        v22 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/PRRImpl.hpp", 55, (uint64_t)"chunk_mesh.confidences.size() == chunk_mesh.vertices.size()", 59, (uint64_t)"The mesh must contain per-vertex confidences", 44, (void (*)(void **))sub_22457406C);
      }
      if (v22)
        goto LABEL_234;
LABEL_20:
      *(_QWORD *)&v198[0] = sub_223919C2C(v166, (int *)&v176);
      *((_QWORD *)&v198[0] + 1) = v23;
      v24 = (std::__shared_weak_count *)operator new(0x198uLL);
      v24->__shared_weak_owners_ = 0;
      v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
      v24->__shared_owners_ = 0;
      v174 = (uint64_t *)sub_223180698((uint64_t)&v24[1], (uint64_t)(v19 + 4));
      v175 = v24;
      v26 = *(_QWORD *)(a3 + 8);
      if (v26 >= *(_QWORD *)(a3 + 16))
      {
        v31 = sub_22347343C((char **)a3, v198, &v174);
        v27 = v174;
        *(_QWORD *)(a3 + 8) = v31;
        if (v27[14] != v27[15])
          goto LABEL_117;
      }
      else
      {
        *(_OWORD *)v26 = v198[0];
        v27 = v174;
        v28 = v175;
        *(_QWORD *)(v26 + 16) = v174;
        *(_QWORD *)(v26 + 24) = v28;
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
        }
        *(_BYTE *)(v26 + 32) = 0;
        *(_BYTE *)(v26 + 96) = 0;
        *(_BYTE *)(v26 + 100) = 0;
        *(_BYTE *)(v26 + 116) = 0;
        *(_QWORD *)(a3 + 8) = v26 + 120;
        if (v27[14] != v27[15])
          goto LABEL_117;
      }
      if (*v27 != v27[1])
      {
        sub_22398615C(&v173);
        if (**(int **)(v173 + 56) > 4)
          goto LABEL_116;
        v32 = *(unsigned __int8 *)(v173 + 72);
        v33 = sub_22322F254(v173, "OSLogSurrogateAppender", 1, 0);
        v34 = v33;
        if (!v32 && !v33)
          goto LABEL_116;
        v163 = v32;
        v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
        v179.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v179.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v180 = 4;
        v181 = (std::string *)"unknown file";
        LODWORD(v182) = 64;
        v183[0] = "unknown function";
        v183[1] = 0;
        v184 = 0;
        v35 = *(_QWORD *)v179.__r_.__value_.__l.__data_;
        if (*(char *)(*(_QWORD *)v179.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v37 = *(const char **)(v35 + 16);
          v36 = *(_QWORD *)(v35 + 24);
          v159 = *(_QWORD *)v179.__r_.__value_.__l.__data_ + 16;
          v160 = *(_QWORD *)v179.__r_.__value_.__l.__data_;
          v39 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v39 & 1) == 0)
          {
LABEL_128:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v200);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v200, &xmmword_255788F40);
              if (v203 && v202 < 0)
                operator delete((void *)v200);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v36 = *(unsigned __int8 *)(*(_QWORD *)v179.__r_.__value_.__l.__data_ + 39);
          v37 = (const char *)(*(_QWORD *)v179.__r_.__value_.__l.__data_ + 16);
          v159 = (uint64_t)v37;
          v160 = *(_QWORD *)v179.__r_.__value_.__l.__data_;
          v38 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v38 & 1) == 0)
            goto LABEL_128;
        }
        if (byte_255788F57 >= 0)
          v40 = (const char *)&xmmword_255788F40;
        else
          v40 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v41 = byte_255788F57;
        else
          v41 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v40, v37);
        if (v41 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        __src = v37;
        if (v41 >= 0x17)
        {
          v43 = v17;
          v44 = v9;
          v45 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17)
            v45 = v41 | 7;
          v46 = v45 + 1;
          v42 = operator new(v45 + 1);
          *(_QWORD *)&object[16] = v41;
          *(_QWORD *)&object[24] = v46 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v42;
          v9 = v44;
          v17 = v43;
        }
        else
        {
          object[31] = v41;
          v42 = &object[8];
          if (!v41)
          {
LABEL_49:
            v42[v41] = 0;
            object[32] = 1;
            if (v36 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v7 = v164;
            if (v36 >= 0x17)
            {
              v49 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v36 | 7) != 0x17)
                v49 = v36 | 7;
              v50 = v49 + 1;
              v47 = operator new(v49 + 1);
              __p[1] = (void *)v36;
              v188 = v50 | 0x8000000000000000;
              __p[0] = v47;
              v18 = (uint64_t)v161;
            }
            else
            {
              HIBYTE(v188) = v36;
              v47 = __p;
              v18 = (uint64_t)v161;
              if (!v36)
              {
                LOBYTE(__p[0]) = 0;
                v189 = 1;
                v48 = *(NSObject **)object;
                if ((SHIBYTE(v188) & 0x80000000) == 0)
                  goto LABEL_53;
LABEL_59:
                operator delete(__p[0]);
                if (object[32])
                  goto LABEL_60;
                goto LABEL_62;
              }
            }
            memmove(v47, __src, v36);
            *((_BYTE *)v47 + v36) = 0;
            v189 = 1;
            v48 = *(NSObject **)object;
            if (SHIBYTE(v188) < 0)
              goto LABEL_59;
LABEL_53:
            if (object[32])
            {
LABEL_60:
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
            }
LABEL_62:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v34 && *(_QWORD *)(v34 + 24))
            {
              v51 = _os_log_pack_size();
              v52 = (std::__shared_weak_count_vtbl *)operator new(v51, (std::align_val_t)8uLL);
              v53 = (std::__shared_weak_count *)operator new();
              v54 = v53;
              v53->__shared_owners_ = 0;
              v55 = (unint64_t *)&v53->__shared_owners_;
              v53->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v53->__shared_weak_owners_ = 0;
              v53[1].__vftable = v52;
              *(_QWORD *)object = v52;
              *(_QWORD *)&object[8] = v52;
              *(_QWORD *)&object[16] = v53;
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              __p[0] = 0;
              v7 = v164;
              do
                v57 = __ldaxr(v55);
              while (__stlxr(v57 - 1, v55));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v54);
              }
              v58 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v59 = (char *)operator new();
              v60 = *(unsigned __int8 *)(v160 + 39);
              v61 = v159;
              if ((v60 & 0x80u) != 0)
              {
                v61 = *(_QWORD *)(v160 + 16);
                v60 = *(_QWORD *)(v160 + 24);
              }
              *(_QWORD *)v59 = v58;
              *(_OWORD *)(v59 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v59 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *((_QWORD *)v59 + 5) = v61;
              *((_QWORD *)v59 + 6) = v60;
              v59[56] = 16;
              v178 = 0;
              v200 = (uint64_t)v59;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), &v200);
              v62 = v200;
              v200 = 0;
              if (v62)
              {
                v63 = *(std::__shared_weak_count **)(v62 + 32);
                if (v63)
                {
                  v64 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                v66 = *(std::__shared_weak_count **)(v62 + 16);
                if (v66)
                {
                  v67 = (unint64_t *)&v66->__shared_owners_;
                  do
                    v68 = __ldaxr(v67);
                  while (__stlxr(v68 - 1, v67));
                  if (!v68)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                MEMORY[0x227684CE8](v62, 0x10F0C40B62ED6C6);
                v69 = v178;
                v178 = 0;
                if (v69)
                {
                  v70 = *(std::__shared_weak_count **)(v69 + 32);
                  if (v70)
                  {
                    v71 = (unint64_t *)&v70->__shared_owners_;
                    do
                      v72 = __ldaxr(v71);
                    while (__stlxr(v72 - 1, v71));
                    if (!v72)
                    {
                      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                      std::__shared_weak_count::__release_weak(v70);
                    }
                  }
                  v73 = *(std::__shared_weak_count **)(v69 + 16);
                  if (v73)
                  {
                    v74 = (unint64_t *)&v73->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                    {
                      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                      std::__shared_weak_count::__release_weak(v73);
                    }
                  }
                  MEMORY[0x227684CE8](v69, 0x10F0C40B62ED6C6);
                }
              }
              v76 = *(std::__shared_weak_count **)&object[32];
              v77 = v163;
              if (*(_QWORD *)&object[32])
              {
                v78 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              v80 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v81 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
            }
            else
            {
              os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
              *(_WORD *)object = 0;
              v83 = (void *)_os_log_send_and_compose_impl();
              v77 = v163;
              if (v83)
                free(v83);
            }
            if (v77)
            {
              sub_22322C138((uint64_t)&v179, "PRR chunk contains vertices but no faces");
              sub_223182C08((uint64_t)&v179);
            }
            sub_223182C08((uint64_t)&v179);
            v84 = v184;
            if (v184)
            {
              v85 = (unint64_t *)&v184->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
LABEL_116:
            sub_2241498F4((uint64_t)object, 0);
            sub_2237C2E74(v174, (uint64_t)object);
            sub_22316F8F4((uint64_t *)object);
            goto LABEL_117;
          }
        }
        memmove(v42, v40, v41);
        goto LABEL_49;
      }
LABEL_117:
      if ((_DWORD)v9)
      {
        v87 = v174;
        v88 = (float32x2_t *)*v174;
        v89 = v174[1];
        if (*v174 != v89)
        {
          do
          {
            v25.i32[0] = v88[1].i32[0];
            *(float32x2_t *)v90.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v172.i8, COERCE_FLOAT(*v88)), *(float32x2_t *)v171.i8, *v88, 1), *(float32x2_t *)v170.i8, v25.f32[0]);
            *(float32x2_t *)&v90.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v169, *v88), v168, *v88, 1), v25, v167);
            v91 = vaddq_f32(v165, v90);
            v88[1].i32[0] = v91.i32[2];
            *v88 = *(float32x2_t *)v91.f32;
            v88 = (float32x2_t *)((char *)v88 + 12);
          }
          while (v88 != (float32x2_t *)v89);
          v87 = v174;
        }
        v92 = (float32x2_t *)v87[9];
        for (i = (float32x2_t *)v87[10]; v92 != i; v92 = (float32x2_t *)((char *)v92 + 12))
        {
          v25.i32[0] = v92[1].i32[0];
          v94 = vmla_f32(vmla_lane_f32(vmul_f32(v169, *v92), v168, *v92, 1), v25, v167).u32[0];
          *v92 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v172.i8, COERCE_FLOAT(*v92)), *(float32x2_t *)v171.i8, *v92, 1), *(float32x2_t *)v170.i8, v25.f32[0]);
          v92[1].i32[0] = v94;
        }
      }
      v95 = v175;
      if (v175)
      {
        v96 = (unint64_t *)&v175->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v16 = (uint64_t *)*v16;
    }
    while (v16 != v17);
  }
LABEL_133:
  if (v7[6].i8[4])
    goto LABEL_201;
  sub_2241498F4((uint64_t)object, 0);
  v98 = *(_QWORD *)(a3 + 8);
  v179.__r_.__value_.__r.__words[0] = *(_QWORD *)a3;
  v179.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24EC5D4C8;
  v181 = (std::string *)&v179.__r_.__value_.__r.__words[1];
  v182 = v98;
  v185 = v183;
  v183[0] = &off_24EC5D4C8;
  v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 2);
  v100 = (uint64_t)(v196[1] - v196[0]) >> 2;
  v101 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)__p[0] - *(_QWORD *)&object[32]) >> 2);
  v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v190[1] - v190[0]) >> 2);
  LODWORD(v103) = v193 - v192;
  v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v191[1] - v191[0]) >> 2);
  LODWORD(v105) = v195 - v194;
  v204 = &v201;
  v200 = v179.__r_.__value_.__r.__words[0];
  v201 = &off_24EC5D4C8;
  v106 = (_QWORD *)v198 + 1;
  v199 = (_OWORD *)((char *)v198 + 8);
  *(_QWORD *)&v198[0] = v98;
  *((_QWORD *)&v198[0] + 1) = &off_24EC5D4C8;
  if (v179.__r_.__value_.__r.__words[0] == v98)
    goto LABEL_140;
  do
  {
    if (!v204)
      sub_223198474();
    v107 = (_QWORD *)((uint64_t (*)(uint64_t (***)()))(*v204)[6])(v204);
    v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107[1] - *v107) >> 2) + v99;
    v100 = ((uint64_t)(v107[41] - v107[40]) >> 2) + v100;
    v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107[5] - v107[4]) >> 2) + v101;
    v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107[10] - v107[9]) >> 2) + v102;
    v103 = v107[31] + v103 - v107[30];
    v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107[15] - v107[14]) >> 2) + v104;
    v105 = v107[36] + v105 - v107[35];
    v108 = (char *)(v200 + 120);
    v200 = (uint64_t)v108;
  }
  while (v108 != *(char **)&v198[0]);
  if (v199 == (_OWORD *)((char *)v198 + 8))
  {
LABEL_140:
    v109 = 4;
  }
  else
  {
    if (!v199)
      goto LABEL_142;
    v109 = 5;
    v106 = v199;
  }
  (*(void (**)(_QWORD *))(*v106 + 8 * v109))(v106);
LABEL_142:
  v110 = &v201;
  if (v204 == &v201)
  {
    v111 = 4;
  }
  else
  {
    if (!v204)
      goto LABEL_147;
    v111 = 5;
    v110 = v204;
  }
  ((void (*)(uint64_t (***)(), char *))(*v110)[v111])(v110, v108);
LABEL_147:
  sub_22339E3C8((uint64_t)object, v99);
  p_size = &v179.__r_.__value_.__l.__size_;
  sub_223674C80((uint64_t)v196, v100);
  sub_22339E3C8((uint64_t)&object[32], v101);
  sub_22339E3C8((uint64_t)v190, v102);
  sub_223674E10((uint64_t)&v192, v103);
  sub_22339E528((uint64_t)v191, v104);
  sub_223674E10((uint64_t)&v194, v105);
  v114 = (uint64_t)v181;
  v200 = v179.__r_.__value_.__r.__words[0];
  v115 = &v201;
  if (!v181)
  {
LABEL_150:
    v204 = (uint64_t (***)())v114;
    goto LABEL_152;
  }
  if (v181 != (std::string *)&v179.__r_.__value_.__r.__words[1])
  {
    v114 = (*(uint64_t (**)(std::string *, uint64_t))(v181->__r_.__value_.__r.__words[0] + 16))(v181, v113);
    goto LABEL_150;
  }
  v204 = &v201;
  (*(void (**)(std::string::size_type *, uint64_t (***)()))(v179.__r_.__value_.__l.__size_ + 24))(&v179.__r_.__value_.__l.__size_, &v201);
LABEL_152:
  v116 = (uint64_t)v185;
  *(_QWORD *)&v198[0] = v182;
  v117 = (_QWORD *)v198 + 1;
  if (!v185)
  {
    v7 = v164;
    v118 = v183;
LABEL_156:
    v199 = (_OWORD *)v116;
    if (v200 == *(_QWORD *)&v198[0])
      goto LABEL_161;
    goto LABEL_159;
  }
  v118 = v183;
  v7 = v164;
  if (v185 != v183)
  {
    v116 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v185 + 16))(v185, v113);
    goto LABEL_156;
  }
  v199 = (_OWORD *)((char *)v198 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v183[0] + 24))((uint64_t)v183, (_QWORD *)v198 + 1);
  if (v200 == *(_QWORD *)&v198[0])
    goto LABEL_161;
  do
  {
LABEL_159:
    if (!v204)
      sub_223198474();
    v119 = ((uint64_t (*)(uint64_t (***)()))(*v204)[6])(v204);
    sub_22414E9E0((uint64_t)object, v119);
    v200 += 120;
  }
  while (v200 != *(_QWORD *)&v198[0]);
LABEL_161:
  if (v199 == (_OWORD *)((char *)v198 + 8))
  {
    v120 = 4;
  }
  else
  {
    if (!v199)
      goto LABEL_166;
    v120 = 5;
    v117 = v199;
  }
  (*(void (**)(_QWORD *))(*v117 + 8 * v120))(v117);
LABEL_166:
  if (v204 == &v201)
  {
    v121 = 4;
  }
  else
  {
    if (!v204)
      goto LABEL_171;
    v121 = 5;
    v115 = v204;
  }
  ((void (*)(uint64_t (***)()))(*v115)[v121])(v115);
LABEL_171:
  if (v185 == v183)
  {
    v122 = 4;
  }
  else
  {
    if (!v185)
      goto LABEL_176;
    v122 = 5;
    v118 = v185;
  }
  (*(void (**)(_QWORD *))(*v118 + 8 * v122))(v118);
LABEL_176:
  if (v181 == (std::string *)&v179.__r_.__value_.__r.__words[1])
  {
    v123 = 4;
  }
  else
  {
    if (!v181)
      goto LABEL_181;
    v123 = 5;
    p_size = (std::string::size_type *)v181;
  }
  (*(void (**)(std::string::size_type *))(*p_size + 8 * v123))(p_size);
LABEL_181:
  v197 = v7[15].i32[0];
  v124 = *(char **)a3;
  for (j = *(char **)(a3 + 8); j != v124; j -= 120)
  {
    v126 = (std::__shared_weak_count *)*((_QWORD *)j - 12);
    if (v126)
    {
      v127 = (unint64_t *)&v126->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
  }
  *(_QWORD *)(a3 + 8) = v124;
  v179.__r_.__value_.__r.__words[0] = sub_223919C2C(&v7[7], (int *)&v7[18] + 1);
  v179.__r_.__value_.__l.__size_ = v129;
  v130 = (uint64_t (**)())operator new(0x198uLL);
  v130[1] = 0;
  v130[2] = 0;
  *v130 = (uint64_t (*)())&off_24EC1F0A0;
  v200 = sub_223180698((uint64_t)(v130 + 3), (uint64_t)object);
  v201 = v130;
  v131 = *(_QWORD *)(a3 + 8);
  if (v131 >= *(_QWORD *)(a3 + 16))
  {
    v135 = sub_22347343C((char **)a3, &v179, &v200);
  }
  else
  {
    *(_OWORD *)v131 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
    v132 = v201;
    *(_QWORD *)(v131 + 16) = v200;
    *(_QWORD *)(v131 + 24) = v132;
    if (v132)
    {
      v133 = (unint64_t *)(v132 + 1);
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
    *(_BYTE *)(v131 + 32) = 0;
    *(_BYTE *)(v131 + 96) = 0;
    *(_BYTE *)(v131 + 100) = 0;
    v135 = (char *)(v131 + 120);
    *(_BYTE *)(v131 + 116) = 0;
  }
  *(_QWORD *)(a3 + 8) = v135;
  v136 = (std::__shared_weak_count *)v201;
  if (v201)
  {
    v137 = (unint64_t *)(v201 + 1);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  sub_22316F8F4((uint64_t *)object);
LABEL_201:
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.PRR.ResultChunks";
  *(_QWORD *)&object[24] = 22;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v179);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v139 = sub_2241471F8();
    v140 = v139[2];
    if (!v140)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v140 = v139[2];
    }
    v141 = *(_QWORD *)(v140 + 64);
    v142 = (std::mutex *)(v141 + 32);
    std::mutex::lock((std::mutex *)(v141 + 32));
    v144 = *(_QWORD *)(v141 + 96);
    v143 = *(_QWORD *)(v141 + 104);
    std::mutex::unlock(v142);
    if (v144 != v143)
    {
      v145 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
      v146 = (std::string *)v179.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v147 = v145 >= 0 ? &v179 : v146;
      v148 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v147);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v148 + 24))(v148))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        v200 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
        sub_223995E3C((double *)&qword_255788F20, v148, &v200, "# of chunks updated");
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(v179.__r_.__value_.__r.__words[2]);
  if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v179.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v150 = &v179;
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v150 = (std::string *)v179.__r_.__value_.__r.__words[0];
    v151 = v150->__r_.__value_.__r.__words[0];
    v152 = v150->__r_.__value_.__l.__size_;
    v153 = v150->__r_.__value_.__s.__data_[16];
    if (v151 == 0x6365722E64337663 && v152 == 0x73746174532E6E6FLL && v153 == 46)
    {
      v156 = sub_223187510();
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v157 = &v179;
      else
        v157 = (std::string *)v179.__r_.__value_.__r.__words[0];
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v158 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
      else
        v158 = v179.__r_.__value_.__l.__size_;
      v200 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      sub_22318760C((uint64_t *)v156, v157, v158, &v200, (uint64_t)"# of chunks updated", 19);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v179.__r_.__value_.__l.__data_);
  *(_BYTE *)(a3 + 24) = v7[20].i8[0] ^ 1;
}

void sub_223991D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *object,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  void **v63;
  uint64_t v64;

  if (*(_BYTE *)(v64 - 120))
  {
    if (*(char *)(v64 - 121) < 0)
      operator delete(*(void **)(v64 - 144));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&__p);
  sub_223167354((uint64_t)&a38);
  sub_223295868(v63);
  _Unwind_Resume(a1);
}

uint64_t sub_223992000@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  float32x4_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  float32x4_t v42;
  float v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  float *v55;
  size_t v56;
  char *v57;
  char *v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  float *v70;
  double v71;
  double v72;
  double v73;
  float *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  float *v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  float *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  _QWORD *v97;
  char *v98;
  _BYTE *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 *v106;
  _OWORD *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  __int128 *v118;
  _OWORD *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  _QWORD *v125;
  _BYTE *v126;
  int64_t v127;
  int64_t v128;
  unint64_t v129;
  int64_t v130;
  unint64_t v131;
  _BYTE *v132;
  _QWORD *v133;
  int64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  _OWORD *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  float v146;
  float v147;
  float v148;
  float v149;
  __n128 v150;
  _QWORD *v151;
  uint64_t v152;
  float v154;
  float v155;
  float v156;
  float v157;
  char *v159;
  char *v160;
  char *v161;
  int64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  _BYTE *v167;
  char *v168;
  int64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _OWORD *v176;
  char *v177;
  uint64_t v178;
  __int128 v179;
  unint64_t v180;
  _BYTE *v181;
  uint64_t v182;
  _BYTE *v183;
  uint64_t v184;
  float v185;
  float v186;
  float v187;
  float v188;
  double v189;
  char *v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  int64_t v195;
  int64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  char *v202;
  int64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  _OWORD *v209;
  char *v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float *v226;
  float *v227;
  uint64_t v228;
  float *v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  float *v235;
  double v236;
  float *v237;
  float *v238;
  double v239;
  uint64_t v240;
  float *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t **v245;
  unint64_t v246;
  uint64_t *v247;
  unint64_t v248;
  float v249;
  float v250;
  float v251;
  float v252;
  uint64_t v253;
  float *v254;
  uint64_t v255;
  float *v256;
  float *v257;
  _QWORD *v258;
  _QWORD *v259;
  char *v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  double v268;
  char *v269;
  float *v270;
  uint64_t v271;
  float *v272;
  _QWORD *v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  char *v277;
  size_t v278;
  char *v279;
  void *v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  void *v285;
  std::__shared_weak_count *v286;
  std::__shared_weak_count *v287;
  void *v288;
  std::__shared_weak_count *v289;
  std::__shared_weak_count_vtbl *v290;
  std::__shared_weak_count_vtbl *v291;
  char *v292;
  char *v293;
  void *v294;
  char *v295;
  void *v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  _BYTE *v307;
  unint64_t v308;
  uint64_t v309;
  void *v310[2];
  void *v311[2];
  __int128 v312;
  std::string v313;
  uint64_t v314[2];
  char v315;
  void *v316;
  char v317;
  _QWORD v318[2];
  char v319;
  __int128 v320;
  __int128 v321;
  int v322;
  __int128 v323;
  void *v324;
  float *v325;
  unint64_t v326;
  void *__p[2];
  __int128 v328;
  void *v329;
  char *v330;
  std::__shared_weak_count *v331;
  void *v332;
  uint64_t v333;
  const char *v334;
  void *v335;
  std::__shared_weak_count *v336;
  void *v337;
  void *v338;
  char v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;

  v342 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(result + 25);
  if ((v4 - 4) >= 8)
  {
    if (v4 == 1)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return result;
    }
    if (v4 != 2)
    {
      if (!*(_BYTE *)(result + 25))
      {
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/PRRImpl.cpp", 118, (uint64_t)"", 0, (uint64_t)"PRR v1 preset has been deprecated.", 34, (void (*)(void **))sub_22457406C);
        abort();
      }
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/PRRImpl.cpp", 168, (uint64_t)"", 0, (uint64_t)"Invalid PRR preset.", 19, (void (*)(void **))sub_22457406C);
      abort();
    }
  }
  v320 = 0u;
  v321 = 0u;
  v322 = 728306392;
  kdebug_trace();
  strcpy((char *)v314, "RslComputeRooms");
  v315 = 15;
  v316 = (void *)5395024;
  v317 = 3;
  v318[1] = 0;
  v318[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v319 = 1;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v6[2];
    }
    v8 = *(_QWORD *)(v7 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      v332 = "cv3d.recon.";
      v333 = 11;
      v334 = "PRR.RoomBoundaries";
      v335 = (void *)18;
      sub_2231A9820((uint64_t)&v332, (uint64_t)&v336, 0, 0, &v313);
      sub_2241471F8();
      v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
      {
        *(_OWORD *)v310 = 0u;
        *(_OWORD *)v311 = 0u;
        LODWORD(v312) = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
        {
          *(_QWORD *)&v323 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v323 + 1) = 2;
          v13 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
          {
            v14 = *(_QWORD *)(a2 + 40);
            v15 = *(_QWORD *)(a2 + 48);
            v16 = 2.5;
            if (v14 != v15)
            {
              while (!*(_BYTE *)(v14 + 156))
              {
                v14 += 160;
                if (v14 == v15)
                  goto LABEL_21;
              }
              v16 = *(float *)(v14 + 152);
            }
LABEL_21:
            sub_223A20A50(a2, (uint64_t)&v332, v16);
            LOBYTE(__p[0]) = 0;
            BYTE8(v328) = 0;
            sub_22329F414((uint64_t)&v332, (__int128 *)__p, &v323, &v329);
            if (BYTE8(v328) && SBYTE7(v328) < 0)
              operator delete(__p[0]);
            sub_22316F8F4((uint64_t *)&v332);
            v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
            v18 = *(void **)v17;
            v19 = *(uint64_t **)(v17 + 8);
            if (v19)
            {
              v20 = (unint64_t *)(v19 + 1);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v23 = v330;
            v22 = (unint64_t *)v331;
            v324 = &off_24EC6A3B8;
            v325 = (float *)v330;
            v326 = (unint64_t)v331;
            v330 = 0;
            v331 = 0;
            v332 = v18;
            v333 = (uint64_t)v19;
            if (v19)
            {
              v24 = (unint64_t *)(v19 + 1);
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            v334 = (const char *)&off_24EC6A3B8;
            v335 = v23;
            v336 = (std::__shared_weak_count *)v22;
            if (v22)
            {
              v26 = v22 + 1;
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
            }
            (*(void (**)(uint64_t *, void **))(*v13 + 16))(v13, &v332);
            v28 = v336;
            if (v336)
            {
              p_shared_owners = (unint64_t *)&v336->__shared_owners_;
              do
                v30 = __ldaxr(p_shared_owners);
              while (__stlxr(v30 - 1, p_shared_owners));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            v31 = (std::__shared_weak_count *)v333;
            if (v333)
            {
              v32 = (unint64_t *)(v333 + 8);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            v34 = (std::__shared_weak_count *)v326;
            if (v326)
            {
              v35 = (unint64_t *)(v326 + 8);
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            if (v19)
            {
              v37 = (unint64_t *)(v19 + 1);
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                (*(void (**)(uint64_t *))(*v19 + 16))(v19);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v19);
              }
            }
            v39 = v331;
            if (v331)
            {
              v40 = (unint64_t *)&v331->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v313.__r_.__value_.__l.__data_);
    }
  }
  v5.i64[0] = *(_QWORD *)(a2 + 24);
  v5.i32[2] = *(_DWORD *)(a2 + 32);
  v42 = vabsq_f32(v5);
  v43 = v42.f32[1];
  v44 = v42.f32[1] > v42.f32[0];
  if (v42.f32[1] <= v42.f32[0])
    v43 = v42.f32[0];
  if (v43 < v42.f32[2])
    v44 = 2;
  if (v44 == 1)
  {
    if (v5.f32[1] < 0.0)
      v300 = 2;
    else
      v300 = 3;
    v303 = v300;
    v45 = 0uLL;
    *(_OWORD *)__p = 0u;
    v328 = 0u;
    v46 = *(_QWORD *)(a2 + 40);
    v47 = *(_QWORD *)(a2 + 48);
    if (v46 != v47)
      goto LABEL_68;
  }
  else if (v44)
  {
    if (*(float *)(a2 + 24 + 4 * v44) < 0.0)
      v301 = 4;
    else
      v301 = 5;
    v303 = v301;
    v45 = 0uLL;
    *(_OWORD *)__p = 0u;
    v328 = 0u;
    v46 = *(_QWORD *)(a2 + 40);
    v47 = *(_QWORD *)(a2 + 48);
    if (v46 != v47)
      goto LABEL_68;
  }
  else
  {
    v303 = v5.f32[0] >= 0.0;
    v45 = 0uLL;
    *(_OWORD *)__p = 0u;
    v328 = 0u;
    v46 = *(_QWORD *)(a2 + 40);
    v47 = *(_QWORD *)(a2 + 48);
    if (v46 != v47)
    {
LABEL_68:
      v304 = v47;
      while (!*(_BYTE *)(v46 + 148) || !*(_BYTE *)(v46 + 156))
      {
LABEL_69:
        v46 += 160;
        if (v46 == v47)
        {
          v45 = *(_OWORD *)__p;
          v298 = *((_QWORD *)&v328 + 1);
          v299 = v328;
          goto LABEL_438;
        }
      }
      v48 = *(float *)(v46 + 144);
      v49 = *(float *)(v46 + 152);
      v330 = 0;
      v331 = 0;
      v329 = 0;
      v51 = *(_BYTE **)(v46 + 8);
      v50 = *(_BYTE **)(v46 + 16);
      v52 = v50 - v51;
      if (v50 == v51)
      {
        v53 = 0;
        v57 = 0;
        v55 = 0;
      }
      else
      {
        if (v52 < 0)
          sub_22316E078();
        v53 = (float *)operator new(v50 - v51);
        v54 = v52 >> 3;
        v329 = v53;
        v330 = (char *)v53;
        v55 = &v53[2 * (v52 >> 3)];
        v331 = (std::__shared_weak_count *)v55;
        v56 = v52 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v53, v51, v56);
        v57 = (char *)v53 + v56;
        v330 = (char *)v53 + v56;
        if (v54 > (uint64_t)(v56 >> 3))
        {
          *(_QWORD *)v57 = *(_QWORD *)v53;
          v58 = v57 + 8;
          v330 = v57 + 8;
          v324 = 0;
          v325 = 0;
          v326 = 0;
          v59 = v56 + 8;
          if (v57 + 8 == (char *)v53)
          {
LABEL_76:
            v60 = 0;
LABEL_428:
            if (v60)
            {
              v325 = (float *)v60;
              operator delete(v60);
            }
            if (v329)
            {
              v330 = (char *)v329;
              operator delete(v329);
            }
            goto LABEL_69;
          }
          goto LABEL_89;
        }
      }
      v61 = (v57 - (char *)v53) >> 3;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
        sub_22316E078();
      if (v55 - v53 > v62)
        v62 = v55 - v53;
      if ((unint64_t)((char *)v55 - (char *)v53) >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v62;
      if (v63)
      {
        if (v63 >> 61)
          sub_223174E94();
        v64 = (char *)operator new(8 * v63);
        v65 = &v64[8 * v61];
        *(_QWORD *)v65 = *(_QWORD *)v53;
        v58 = v65 + 8;
        if (v57 != (char *)v53)
          goto LABEL_87;
      }
      else
      {
        v64 = 0;
        v65 = (char *)(8 * v61);
        v281 = (_QWORD *)(8 * v61);
        *v281 = *(_QWORD *)v53;
        v58 = (char *)(v281 + 1);
        if (v57 != (char *)v53)
        {
LABEL_87:
          v66 = (v57 - 8 - (char *)v53) & 0xFFFFFFFFFFFFFFF8;
          v65 = &v64[v57 - (char *)v53 - v66 - 8];
          memcpy(v65, &v57[-v66 - 8], v66 + 8);
        }
      }
      v329 = v65;
      v330 = v58;
      v331 = (std::__shared_weak_count *)&v64[8 * v63];
      operator delete(v53);
      v53 = (float *)v329;
      v330 = v58;
      v324 = 0;
      v325 = 0;
      v326 = 0;
      v59 = v58 - (_BYTE *)v329;
      if (v58 == v329)
        goto LABEL_76;
LABEL_89:
      v67 = v59 >> 3;
      v68 = 0.0;
      if ((unint64_t)v59 >= 0x18)
      {
        v69 = v67 - 1;
        v70 = &v53[2 * ((v67 - 1) % v67)];
        v71 = *v70;
        v72 = v70[1];
        v73 = (*v53 + v71) * (v53[1] - v72) + 0.0;
        if (v67 != 1)
        {
          v74 = v70 - 2;
          v73 = v73 + (v71 + *(v70 - 2)) * (v72 - *(v70 - 1));
          if (v67 != 2)
          {
            do
            {
              v253 = v69 - 1;
              if (v69 >= v67)
              {
                v254 = (float *)v58;
                if (v253 <= v67)
                  v254 = &v53[2 * (v253 % v67)];
              }
              else
              {
                v254 = v70 - 2;
              }
              v255 = v69 - 2;
              if (v253 >= v67)
              {
                v256 = (float *)v58;
                if (v255 <= v67)
                  v256 = &v53[2 * (v255 % v67)];
              }
              else
              {
                v256 = v74 - 2;
              }
              if (v69 >= v67)
              {
                v70 = (float *)v58;
                if (v253 <= v67)
                  v70 = &v53[2 * (v253 % v67)];
              }
              else
              {
                v70 -= 2;
              }
              if (v253 >= v67)
              {
                v74 = &v53[2 * (v255 % v67)];
                if (v255 > v67)
                  v74 = (float *)v58;
              }
              else
              {
                v74 -= 2;
              }
              v73 = v73 + (*v254 + *v256) * (v254[1] - v256[1]);
              --v69;
            }
            while (v253 != 1);
          }
        }
        v68 = v73 * 0.5;
      }
      v333 = 0;
      v334 = 0;
      v332 = &v333;
      v310[0] = 0;
      v310[1] = 0;
      v311[0] = 0;
      if (v59 < 0)
        sub_22316E078();
      v305 = v46;
      v75 = 0;
      v76 = 0;
      v310[0] = operator new(v59);
      v310[1] = (char *)v310[0] + v59;
      v311[0] = (char *)v310[0] + 8 * v67;
      v77 = (unint64_t)v67 >> 2;
      v306 = (unint64_t)v67 >> 3;
      v308 = (unint64_t)v67 >> 2;
      while (1)
      {
        v78 = v77;
        if (v75 != 1)
        {
          v78 = v77;
          if (v75 != 3)
          {
            if (v75 != 2)
              goto LABEL_102;
            v78 = v306;
          }
        }
        v76 = (v78 + v76) % v67;
LABEL_102:
        v79 = (char *)v329;
        v80 = v330;
        if (v329 != v330)
        {
          v81 = 0;
          v82 = (float *)((char *)v329 + 8 * v76);
          v83 = *v82;
          v84 = v82[1];
          v85 = v83 - v83;
          v86 = v84 - v84;
          v87 = v85 * v85 + v86 * v86;
          v88 = -1.0;
          v89 = (float *)v329;
          do
          {
            v93 = *v89;
            v94 = v89[1];
            v95 = v93 - v83;
            v96 = v85 * (v93 - v83) + v86 * (v94 - v84);
            if (v96 <= 0.0 || v87 <= v96)
            {
              v90 = (v94 - v84) * (v94 - v84);
              v91 = v95 * v95;
            }
            else
            {
              v91 = (v94 - (v86 * (v96 / v87) + v84)) * (v94 - (v86 * (v96 / v87) + v84));
              v90 = (v93 - (v85 * (v96 / v87) + v83)) * (v93 - (v85 * (v96 / v87) + v83));
            }
            v92 = sqrt(v91 + v90);
            if (v92 > v88)
            {
              v88 = v92;
              v76 = v81;
            }
            ++v81;
            v89 += 2;
          }
          while (v89 != (float *)v330);
        }
        v97 = (_QWORD *)v333;
        if (v333)
        {
          do
          {
            v103 = v97[4];
            if (v76 >= v103)
            {
              if (v103 >= v76)
                goto LABEL_96;
              ++v97;
            }
            v97 = (_QWORD *)*v97;
          }
          while (v97);
        }
        v98 = (char *)v329 + 8 * v76;
        v99 = v310[0];
        if (v98 == v330)
        {
          v101 = (char *)v310[0];
          goto LABEL_125;
        }
        v100 = v330 - (_BYTE *)v329 - 8 * v76 - 8;
        if (v100 < 0x38)
        {
          v101 = (char *)v310[0];
          v102 = (char *)v329 + 8 * v76;
          do
          {
LABEL_124:
            v110 = *(_QWORD *)v102;
            v102 += 8;
            *(_QWORD *)v101 = v110;
            v101 += 8;
          }
          while (v102 != v80);
          goto LABEL_125;
        }
        v101 = (char *)v310[0];
        v102 = (char *)v329 + 8 * v76;
        if ((void *)((char *)v310[0] - (char *)v102) < (void *)0x20)
          goto LABEL_124;
        v104 = (v100 >> 3) + 1;
        v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
        v101 = (char *)v310[0] + v105;
        v102 = &v98[v105];
        v106 = (__int128 *)((char *)v329 + 8 * v76 + 16);
        v107 = (char *)v310[0] + 16;
        v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v109 = *v106;
          *(v107 - 1) = *(v106 - 1);
          *v107 = v109;
          v106 += 2;
          v107 += 2;
          v108 -= 4;
        }
        while (v108);
        if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_124;
LABEL_125:
        if (v76)
        {
          v111 = v101 - v99;
          v112 = &v99[v111 & 0xFFFFFFFFFFFFFFF8];
          v113 = (v76 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v113 < 7)
            goto LABEL_464;
          if ((unint64_t)(&v99[v111 & 0xFFFFFFFFFFFFFFF8] - v79) < 0x20)
            goto LABEL_464;
          v114 = v111 >> 3;
          v115 = v113 + 1;
          v116 = (v113 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          v112 += v116;
          v117 = &v79[8 * v116];
          v118 = (__int128 *)(v79 + 16);
          v119 = &v99[8 * v114 + 16];
          v120 = v116;
          do
          {
            v121 = *v118;
            *(v119 - 1) = *(v118 - 1);
            *v119 = v121;
            v118 += 2;
            v119 += 2;
            v120 -= 4;
          }
          while (v120);
          v79 = v117;
          if (v115 != v116)
          {
LABEL_464:
            do
            {
              v122 = *(_QWORD *)v79;
              v79 += 8;
              *v112++ = v122;
            }
            while (v79 != v98);
          }
        }
        v309 = v75;
        v123 = v329;
        v124 = (char *)v310[1];
        if (v310[1] < v311[0])
        {
          *(_QWORD *)v310[1] = *((_QWORD *)v329 + v76);
          v125 = v124 + 8;
          goto LABEL_154;
        }
        v126 = v310[0];
        v127 = (char *)v310[1] - (char *)v310[0];
        v128 = ((char *)v310[1] - (char *)v310[0]) >> 3;
        v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) >> 61)
          sub_22316E078();
        v130 = (char *)v311[0] - (char *)v310[0];
        if (((char *)v311[0] - (char *)v310[0]) >> 2 > v129)
          v129 = v130 >> 2;
        if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8)
          v131 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v131 = v129;
        if (v131)
        {
          if (v131 >> 61)
            sub_223174E94();
          v132 = operator new(8 * v131);
          v133 = &v132[8 * v128];
          *v133 = v123[v76];
          v125 = v133 + 1;
          v134 = v124 - v126;
          if (v124 == v126)
          {
LABEL_152:
            v310[0] = v133;
            v310[1] = v125;
            v311[0] = &v132[8 * v131];
            if (!v124)
              goto LABEL_154;
LABEL_153:
            operator delete(v124);
            goto LABEL_154;
          }
        }
        else
        {
          v132 = 0;
          v133 = (_QWORD *)(8 * v128);
          *(_QWORD *)(8 * v128) = *((_QWORD *)v329 + v76);
          v125 = (_QWORD *)(8 * v128 + 8);
          v134 = v124 - v126;
          if (v124 == v126)
            goto LABEL_152;
        }
        v135 = v134 - 8;
        if (v135 < 0x58)
          goto LABEL_465;
        if ((unint64_t)(v124 - v132 - v127) < 0x20)
          goto LABEL_465;
        v136 = (v135 >> 3) + 1;
        v137 = 8 * (v136 & 0x3FFFFFFFFFFFFFFCLL);
        v138 = &v124[-v137];
        v133 = (_QWORD *)((char *)v133 - v137);
        v139 = &v132[8 * v128 - 16];
        v140 = v124 - 16;
        v141 = v136 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v142 = *(_OWORD *)v140;
          *(v139 - 1) = *((_OWORD *)v140 - 1);
          *v139 = v142;
          v139 -= 2;
          v140 -= 32;
          v141 -= 4;
        }
        while (v141);
        v124 = v138;
        if (v136 != (v136 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_465:
          do
          {
            v143 = *((_QWORD *)v124 - 1);
            v124 -= 8;
            *--v133 = v143;
          }
          while (v124 != v126);
        }
        v124 = (char *)v310[0];
        v310[0] = v133;
        v310[1] = v125;
        v311[0] = &v132[8 * v131];
        if (v124)
          goto LABEL_153;
LABEL_154:
        v310[1] = v125;
        v144 = v310[0];
        v145 = (char *)v125 - (char *)v310[0];
        if (v125 == v310[0])
          goto LABEL_216;
        if (v145 != 16)
        {
          if (v145 <= 0x17)
            goto LABEL_179;
          v313.__r_.__value_.__r.__words[0] = 0x3FA47AE151EB8520;
          if (v145 >= 0x7FFFFFFFFFFFFFF9)
            sub_22316E078();
          v307 = operator new(2 * v145);
          if (v145 - 8 < 8)
          {
            v151 = v144;
            v152 = (uint64_t)v307;
            goto LABEL_213;
          }
          v180 = ((v145 - 8) >> 3) + 1;
          v151 = &v144[v180 & 0x3FFFFFFFFFFFFFFELL];
          v152 = (uint64_t)&v307[16 * (v180 & 0x3FFFFFFFFFFFFFFELL)];
          v181 = v307 + 16;
          v182 = v180 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            *((_QWORD *)v181 - 2) = v144;
            *(_QWORD *)v181 = v144 + 1;
            *(v181 - 8) = 0;
            v181[8] = 0;
            v181 += 32;
            v144 += 2;
            v182 -= 2;
          }
          while (v182);
          if (v180 != (v180 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_213:
              *(_QWORD *)v152 = v151;
              *(_BYTE *)(v152 + 8) = 0;
              ++v151;
              v152 += 16;
            }
            while (v151 != v125);
          }
          LODWORD(v323) = 2;
          v307[8] = 1;
          *(_BYTE *)(v152 - 8) = 1;
          sub_223996120((uint64_t)v307, v152, (unint64_t *)&v313, &v323, v150);
          v183 = v307;
          if ((_BYTE *)v152 == v307)
          {
LABEL_215:
            operator delete(v307);
            goto LABEL_216;
          }
          while (2)
          {
            if (!v183[8])
              goto LABEL_222;
            v191 = *(_QWORD **)v183;
            v192 = (char *)v325;
            if ((unint64_t)v325 < v326)
            {
              *(_QWORD *)v325 = *v191;
              v190 = v192 + 8;
              goto LABEL_221;
            }
            v193 = v67;
            v194 = (char *)v324;
            v195 = (char *)v325 - (_BYTE *)v324;
            v196 = ((char *)v325 - (_BYTE *)v324) >> 3;
            v197 = v196 + 1;
            if ((unint64_t)(v196 + 1) >> 61)
              sub_22316E078();
            v198 = v326 - (_QWORD)v324;
            if ((uint64_t)(v326 - (_QWORD)v324) >> 2 > v197)
              v197 = v198 >> 2;
            if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF8)
              v199 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v199 = v197;
            if (v199)
            {
              if (v199 >> 61)
                sub_223174E94();
              v200 = v199;
              v201 = operator new(8 * v199);
              v199 = v200;
              v202 = &v201[8 * v196];
              *(_QWORD *)v202 = *v191;
              v190 = v202 + 8;
              v203 = v192 - v194;
              if (v192 != v194)
              {
LABEL_234:
                v204 = v203 - 8;
                if (v204 < 0x58)
                {
                  v67 = v193;
                  goto LABEL_243;
                }
                v205 = v192 - v201 - v195;
                v67 = v193;
                if (v205 < 0x20)
                  goto LABEL_466;
                v206 = (v204 >> 3) + 1;
                v207 = 8 * (v206 & 0x3FFFFFFFFFFFFFFCLL);
                v208 = &v192[-v207];
                v202 -= v207;
                v209 = &v201[8 * v196 - 16];
                v210 = v192 - 16;
                v211 = v206 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v212 = *(_OWORD *)v210;
                  *(v209 - 1) = *((_OWORD *)v210 - 1);
                  *v209 = v212;
                  v209 -= 2;
                  v210 -= 32;
                  v211 -= 4;
                }
                while (v211);
                v192 = v208;
                if (v206 != (v206 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_466:
                  do
                  {
LABEL_243:
                    v213 = *((_QWORD *)v192 - 1);
                    v192 -= 8;
                    *((_QWORD *)v202 - 1) = v213;
                    v202 -= 8;
                  }
                  while (v192 != v194);
                }
                v192 = (char *)v324;
                v324 = v202;
                v325 = (float *)v190;
                v326 = (unint64_t)&v201[8 * v199];
                if (v192)
LABEL_245:
                  operator delete(v192);
LABEL_221:
                v325 = (float *)v190;
LABEL_222:
                v183 += 16;
                if (v183 == (_BYTE *)v152)
                  goto LABEL_215;
                continue;
              }
            }
            else
            {
              v201 = 0;
              v202 = (char *)(8 * v196);
              *(_QWORD *)(8 * v196) = *v191;
              v190 = (char *)(8 * v196 + 8);
              v203 = v192 - v194;
              if (v192 != v194)
                goto LABEL_234;
            }
            break;
          }
          v67 = v193;
          v324 = v202;
          v325 = (float *)v190;
          v326 = (unint64_t)&v201[8 * v199];
          if (v192)
            goto LABEL_245;
          goto LABEL_221;
        }
        v146 = *(float *)v310[0];
        v147 = *((float *)v125 - 2);
        if (*(float *)v310[0] != v147)
        {
          if ((LODWORD(v146) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v147) & 0x7FFFFFFFu) > 0x7F7FFFFF)
            goto LABEL_179;
          v154 = vabds_f32(v146, v147);
          v155 = fabsf(v146);
          v156 = fabsf(v147);
          if (v155 < v156)
            v155 = v156;
          v157 = v155 >= 1.0 ? v155 * 0.00000011921 : 0.00000011921;
          if (v154 > v157)
            goto LABEL_179;
        }
        v148 = *((float *)v310[0] + 1);
        v149 = *((float *)v125 - 1);
        if (v148 != v149)
        {
          if ((LODWORD(v148) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v149) & 0x7FFFFFFFu) > 0x7F7FFFFF)
            goto LABEL_179;
          v249 = vabds_f32(v148, v149);
          v250 = fabsf(v148);
          v251 = fabsf(v149);
          if (v250 < v251)
            v250 = v251;
          v252 = v250 >= 1.0 ? v250 * 0.00000011921 : 0.00000011921;
          if (v249 > v252)
          {
LABEL_179:
            v159 = (char *)v325;
            while (1)
            {
              if ((unint64_t)v159 < v326)
              {
                *(_QWORD *)v159 = *v144;
                v160 = v159 + 8;
              }
              else
              {
                v161 = (char *)v324;
                v162 = v159 - (_BYTE *)v324;
                v163 = (v159 - (_BYTE *)v324) >> 3;
                v164 = v163 + 1;
                if ((unint64_t)(v163 + 1) >> 61)
                  sub_22316E078();
                v165 = v326 - (_QWORD)v324;
                if ((uint64_t)(v326 - (_QWORD)v324) >> 2 > v164)
                  v164 = v165 >> 2;
                if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
                  v166 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v166 = v164;
                if (v166)
                {
                  if (v166 >> 61)
                    sub_223174E94();
                  v167 = operator new(8 * v166);
                  v168 = &v167[8 * v163];
                  *(_QWORD *)v168 = *v144;
                  v160 = v168 + 8;
                  v169 = v159 - v161;
                  if (v159 != v161)
                  {
LABEL_192:
                    v170 = v169 - 8;
                    if (v170 < 0x168)
                    {
                      v171 = v159;
                      goto LABEL_194;
                    }
                    v173 = (v159 - 8 - v161) & 0xFFFFFFFFFFFFFFF8;
                    if (&v167[v162 - 8 - v173] > &v167[v162 - 8])
                    {
                      v171 = v159;
                      goto LABEL_194;
                    }
                    if (&v159[-v173 - 8] > v159 - 8)
                    {
                      v171 = v159;
                      goto LABEL_194;
                    }
                    if ((unint64_t)(v159 - v167 - v162) < 0x20)
                    {
                      v171 = v159;
                      goto LABEL_194;
                    }
                    v174 = (v170 >> 3) + 1;
                    v175 = 8 * (v174 & 0x3FFFFFFFFFFFFFFCLL);
                    v171 = &v159[-v175];
                    v168 -= v175;
                    v176 = &v167[8 * v163 - 16];
                    v177 = v159 - 16;
                    v178 = v174 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v179 = *(_OWORD *)v177;
                      *(v176 - 1) = *((_OWORD *)v177 - 1);
                      *v176 = v179;
                      v176 -= 2;
                      v177 -= 32;
                      v178 -= 4;
                    }
                    while (v178);
                    if (v174 != (v174 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      do
                      {
LABEL_194:
                        v172 = *((_QWORD *)v171 - 1);
                        v171 -= 8;
                        *((_QWORD *)v168 - 1) = v172;
                        v168 -= 8;
                      }
                      while (v171 != v161);
                    }
                    v159 = (char *)v324;
                    v324 = v168;
                    v325 = (float *)v160;
                    v326 = (unint64_t)&v167[8 * v166];
                    if (!v159)
                      goto LABEL_181;
LABEL_199:
                    operator delete(v159);
                    goto LABEL_181;
                  }
                }
                else
                {
                  v167 = 0;
                  v168 = (char *)(8 * v163);
                  *(_QWORD *)(8 * v163) = *v144;
                  v160 = (char *)(8 * v163 + 8);
                  v169 = v159 - v161;
                  if (v159 != v161)
                    goto LABEL_192;
                }
                v324 = v168;
                v325 = (float *)v160;
                v326 = (unint64_t)&v167[8 * v166];
                if (v159)
                  goto LABEL_199;
              }
LABEL_181:
              v325 = (float *)v160;
              ++v144;
              v159 = v160;
              if (v144 == v125)
                goto LABEL_216;
            }
          }
        }
        sub_2236928DC(&v324, (_QWORD *)v310[0]);
LABEL_216:
        v184 = (char *)v325 - (_BYTE *)v324;
        if ((char *)v325 - (_BYTE *)v324 == 16)
        {
          v185 = *(float *)v324;
          v186 = *(v325 - 2);
          v75 = v309;
          v77 = v308;
          if (*(float *)v324 == v186)
            goto LABEL_218;
          v189 = 0.0;
          if ((LODWORD(v185) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v186) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v218 = vabds_f32(v185, v186);
            v219 = fabsf(v185);
            v220 = fabsf(v186);
            if (v219 < v220)
              v219 = v220;
            v221 = v219 >= 1.0 ? v219 * 0.00000011921 : 0.00000011921;
            if (v218 <= v221)
            {
LABEL_218:
              v187 = *((float *)v324 + 1);
              v188 = *(v325 - 1);
              if (v187 == v188)
                goto LABEL_219;
              v189 = 0.0;
              if ((LODWORD(v187) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v188) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              {
                v222 = vabds_f32(v187, v188);
                v223 = fabsf(v187);
                v224 = fabsf(v188);
                if (v223 < v224)
                  v223 = v224;
                v225 = v223 >= 1.0 ? v223 * 0.00000011921 : 0.00000011921;
                if (v222 <= v225)
                {
LABEL_219:
                  v325 = (float *)((char *)v324 + 8);
                  v189 = 0.0;
                }
              }
            }
          }
        }
        else
        {
          v189 = 0.0;
          v75 = v309;
          v77 = v308;
          if ((unint64_t)v184 >= 0x18)
          {
            v214 = v184 >> 3;
            if (v325 == v324)
              v215 = 0;
            else
              v215 = v214 + 1;
            v216 = v215 - 1;
            if (v215 >= v214)
            {
              v217 = (char *)v325;
              if (v216 <= v214)
                v217 = (char *)v324 + 8 * (v216 % v214);
            }
            else
            {
              v217 = (char *)(v325 - 2);
            }
            if (v216)
            {
              v226 = v325;
              do
              {
                if (v216 + 1 >= v214)
                {
                  v227 = v325;
                  if (v216 <= v214)
                    v227 = (float *)((char *)v324 + 8 * (v216 % v214));
                }
                else
                {
                  v227 = v226 - 2;
                }
                v228 = v216 - 1;
                if (v216 >= v214)
                {
                  v229 = v325;
                  if (v228 <= v214)
                    v229 = (float *)((char *)v324 + 8 * (v228 % v214));
                }
                else
                {
                  v229 = (float *)(v217 - 8);
                }
                if (v216 + 1 >= v214)
                {
                  v226 = v325;
                  if (v216 <= v214)
                    v226 = (float *)((char *)v324 + 8 * (v216 % v214));
                }
                else
                {
                  v226 -= 2;
                }
                if (v216 >= v214)
                {
                  v217 = (char *)v324 + 8 * (v228 % v214);
                  if (v228 > v214)
                    v217 = (char *)v325;
                }
                else
                {
                  v217 -= 8;
                }
                v189 = v189 + (*v227 + *v229) * (v227[1] - v229[1]);
                --v216;
              }
              while (v228);
              v189 = v189 * 0.5;
            }
          }
        }
        v230 = ((v68 >= 0.0) ^ (v189 < 0.0)) & (v68 <= 0.0);
        if (v189 > 0.0)
          v230 = v68 > 0.0;
        if ((v230 & 1) == 0)
        {
          v325 = (float *)v324;
          if (v75)
            goto LABEL_314;
          v231 = v330 - (_BYTE *)v329;
          if (v330 != v329 && v231 != -8)
          {
            v232 = 0;
            v233 = v231 >> 3;
            v234 = (char *)v329 + 8 * (1 - (v231 >> 3));
            if (v231 < 1)
              v234 = v330;
            v235 = (float *)(v231 >= 9 ? (char *)v329 + 8 : v234);
            v236 = 0.0;
            v237 = (float *)v329;
            do
            {
              v240 = v232 + 1;
              if (v232 + 1 >= v233)
              {
                v241 = (float *)v330;
                if (v232 < v233)
                  v241 = (float *)((char *)v329 + 8 * (v240 % v233));
              }
              else
              {
                v241 = v237 + 2;
              }
              v242 = v232 + 2;
              if (v242 >= v233)
              {
                v238 = (float *)((char *)v329 + 8 * (v242 % v233));
                if (v240 >= v233)
                  v238 = (float *)v330;
              }
              else
              {
                v238 = v235 + 2;
              }
              v239 = v237[1] - v235[1];
              v236 = v236 + sqrt(v239 * v239 + (*v237 - *v235) * (*v237 - *v235));
              v237 = v241;
              v235 = v238;
              v232 = v240;
            }
            while (v233 != v240);
            if (v236 >= 0.600000024)
            {
LABEL_314:
              v243 = v333;
              v244 = &v333;
LABEL_316:
              v245 = (uint64_t **)v244;
              if (v243)
              {
                do
                {
                  v244 = (uint64_t *)v243;
                  v246 = *(_QWORD *)(v243 + 32);
                  if (v76 < v246)
                  {
                    v243 = *v244;
                    goto LABEL_316;
                  }
                  if (v246 >= v76)
                    goto LABEL_324;
                  v243 = v244[1];
                }
                while (v243);
                v245 = (uint64_t **)(v244 + 1);
              }
              v247 = (uint64_t *)operator new(0x28uLL);
              v247[4] = v76;
              *v247 = 0;
              v247[1] = 0;
              v247[2] = (uint64_t)v244;
              *v245 = v247;
              if (*(_QWORD *)v332)
              {
                v332 = *(void **)v332;
                v247 = *v245;
              }
              sub_2231A9A8C((uint64_t *)v333, v247);
              ++v334;
LABEL_324:
              v248 = ((char *)v310[1] - (char *)v310[0]) >> 3;
              if (v67 > v248)
              {
                sub_223341C68((uint64_t *)v310, v67 - v248);
              }
              else if (v67 < v248)
              {
                v310[1] = (char *)v310[0] + 8 * v67;
              }
LABEL_96:
              if (++v75 != 4)
                continue;
            }
          }
        }
        if (v310[0])
        {
          v310[1] = v310[0];
          operator delete(v310[0]);
        }
        sub_223198030((uint64_t)&v332, (_QWORD *)v333);
        v60 = (char *)v324;
        v257 = v325;
        v46 = v305;
        v47 = v304;
        if ((unint64_t)((char *)v325 - (_BYTE *)v324) >= 0x18)
        {
          v325 -= 2;
          *(_OWORD *)v311 = 0u;
          v312 = 0u;
          *(_OWORD *)v310 = 0u;
          sub_2233320C8(v310, (char *)v324, (char *)v325, ((char *)(v257 - 2) - (_BYTE *)v324) >> 3);
          v259 = *(_QWORD **)(v305 + 32);
          v258 = *(_QWORD **)(v305 + 40);
          while (v259 != v258)
          {
            v262 = (char *)*v259;
            v261 = (char *)v259[1];
            v263 = (uint64_t)&v261[-*v259];
            if ((unint64_t)v263 >= 0x18)
            {
              v264 = v263 >> 3;
              if (v261 == v262)
                v265 = 0;
              else
                v265 = v264 + 1;
              v266 = v265 - 1;
              if (v265 >= v264)
              {
                v267 = (char *)v259[1];
                if (v266 <= v264)
                  v267 = &v262[8 * (v266 % v264)];
              }
              else
              {
                v267 = v261 - 8;
              }
              if (v266)
              {
                v268 = 0.0;
                v269 = (char *)v259[1];
                do
                {
                  if (v266 + 1 >= v264)
                  {
                    v270 = (float *)v259[1];
                    if (v266 <= v264)
                      v270 = (float *)&v262[8 * (v266 % v264)];
                  }
                  else
                  {
                    v270 = (float *)(v269 - 8);
                  }
                  v271 = v266 - 1;
                  if (v266 >= v264)
                  {
                    v272 = (float *)v259[1];
                    if (v271 <= v264)
                      v272 = (float *)&v262[8 * (v271 % v264)];
                  }
                  else
                  {
                    v272 = (float *)(v267 - 8);
                  }
                  if (v266 + 1 >= v264)
                  {
                    v269 = (char *)v259[1];
                    if (v266 <= v264)
                      v269 = &v262[8 * (v266 % v264)];
                  }
                  else
                  {
                    v269 -= 8;
                  }
                  if (v266 >= v264)
                  {
                    v267 = &v262[8 * (v271 % v264)];
                    if (v271 > v264)
                      v267 = (char *)v259[1];
                  }
                  else
                  {
                    v267 -= 8;
                  }
                  v268 = v268 + (*v270 + *v272) * (v270[1] - v272[1]);
                  --v266;
                }
                while (v271);
                if (v268 * 0.5 < -10.0)
                {
                  v273 = (_QWORD *)v312;
                  if ((unint64_t)v312 >= *((_QWORD *)&v312 + 1))
                  {
                    v260 = sub_223452F08((char **)&v311[1], (uint64_t)v259);
                  }
                  else
                  {
                    *(_OWORD *)v312 = 0uLL;
                    v273[2] = 0;
                    v275 = (char *)*v259;
                    v274 = v259[1];
                    v276 = v274 - *v259;
                    if (v274 != *v259)
                    {
                      if (v276 < 0)
                        sub_22316E078();
                      v277 = (char *)operator new(v274 - *v259);
                      *v273 = v277;
                      v273[1] = v277;
                      v273[2] = &v277[8 * (v276 >> 3)];
                      v278 = v276 & 0xFFFFFFFFFFFFFFF8;
                      memcpy(v277, v275, v278);
                      v273[1] = &v277[v278];
                    }
                    v260 = (char *)(v273 + 3);
                  }
                  *(_QWORD *)&v312 = v260;
                }
              }
            }
            v259 += 3;
          }
          sub_223EB22AC((uint64_t)&v332, (uint64_t)v310, v303, v48, v49 - v48);
          v339 = 1;
          v340 = 0u;
          v341 = 0u;
          v279 = (char *)__p[1];
          if (__p[1] >= (void *)v328)
          {
            v280 = (void *)sub_223994BF0((uint64_t *)__p, (uint64_t)&v332);
          }
          else
          {
            sub_2239962A0((uint64_t)__p[1], (uint64_t)&v332);
            v280 = v279 + 216;
          }
          __p[1] = v280;
          v282 = v340;
          if ((_QWORD)v340)
          {
            v283 = *((_QWORD *)&v340 + 1);
            v284 = (void *)v340;
            if (*((_QWORD *)&v340 + 1) != (_QWORD)v340)
            {
              do
              {
                v285 = *(void **)(v283 - 40);
                if (v285)
                {
                  *(_QWORD *)(v283 - 32) = v285;
                  operator delete(v285);
                }
                v283 -= 104;
              }
              while (v283 != v282);
              v284 = (void *)v340;
            }
            *((_QWORD *)&v340 + 1) = v282;
            operator delete(v284);
          }
          if (v337)
          {
            v338 = v337;
            operator delete(v337);
          }
          v286 = (std::__shared_weak_count *)v335;
          if (v335)
          {
            v287 = v336;
            v288 = v335;
            if (v336 != v335)
            {
              v289 = v336;
              do
              {
                v291 = v289[-1].__vftable;
                --v289;
                v290 = v291;
                if (v291)
                {
                  v287[-1].__shared_owners_ = (uint64_t)v290;
                  operator delete(v290);
                }
                v287 = v289;
              }
              while (v289 != v286);
              v288 = v335;
            }
            v336 = v286;
            operator delete(v288);
          }
          if (v332)
          {
            v333 = (uint64_t)v332;
            operator delete(v332);
          }
          v292 = (char *)v311[1];
          if (v311[1])
          {
            v293 = (char *)v312;
            v294 = v311[1];
            if ((void *)v312 != v311[1])
            {
              v295 = (char *)v312;
              do
              {
                v297 = (void *)*((_QWORD *)v295 - 3);
                v295 -= 24;
                v296 = v297;
                if (v297)
                {
                  *((_QWORD *)v293 - 2) = v296;
                  operator delete(v296);
                }
                v293 = v295;
              }
              while (v295 != v292);
              v294 = v311[1];
            }
            *(_QWORD *)&v312 = v292;
            operator delete(v294);
          }
          if (v310[0])
          {
            v310[1] = v310[0];
            operator delete(v310[0]);
          }
          v60 = (char *)v324;
        }
        goto LABEL_428;
      }
    }
  }
  v298 = 0;
  v299 = 0;
LABEL_438:
  *(_OWORD *)a3 = v45;
  *(_QWORD *)(a3 + 16) = v299;
  *(_QWORD *)(a3 + 24) = v298;
  *(_BYTE *)(a3 + 32) = 1;
  sub_22391CC34(v314, (uint64_t *)&v316, (uint64_t)v318);
  if (v317 < 0)
  {
    operator delete(v316);
    if ((v315 & 0x80000000) == 0)
      return kdebug_trace();
LABEL_442:
    operator delete((void *)v314[0]);
    return kdebug_trace();
  }
  if (v315 < 0)
    goto LABEL_442;
  return kdebug_trace();
}

void sub_223993B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *p_shared_owners;
  unint64_t v68;

  sub_2241231D8(v62);
  v64 = (std::__shared_weak_count *)a61;
  if (a61)
  {
    v65 = (unint64_t *)(a61 + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  sub_2241231D8((uint64_t)&a49);
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v68 = __ldaxr(p_shared_owners);
    while (__stlxr(v68 - 1, p_shared_owners));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  sub_2241231D8((uint64_t)&a57);
  sub_2231874DC((uint64_t)&a21);
  if (a32 < 0)
    operator delete(__p);
  sub_22392AA18((uint64_t)&a33);
  sub_2231874DC((uint64_t)&a42);
  _Unwind_Resume(a1);
}

uint64_t *sub_223993D24(uint64_t *a1)
{
  if (*a1)
  {
    sub_22393771C((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t sub_223993D5C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24[3];
  void *v25;
  char *v26;
  void *v27;
  void *v28;
  char v29;
  __int128 __p;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[2];
  char v35;
  uint64_t v36;
  char v37;
  _QWORD v38[2];
  char v39;
  __int128 v40;
  __int128 v41;
  int v42;

  v5 = *(unsigned __int8 *)(result + 25);
  if ((v5 - 4) >= 8)
  {
    if (v5 == 1)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return result;
    }
    if (v5 != 2)
    {
      if (!*(_BYTE *)(result + 25))
      {
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/PRRImpl.cpp", 118, (uint64_t)"", 0, (uint64_t)"PRR v1 preset has been deprecated.", 34, (void (*)(void **))sub_22457406C);
        abort();
      }
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/PRRImpl.cpp", 168, (uint64_t)"", 0, (uint64_t)"Invalid PRR preset.", 19, (void (*)(void **))sub_22457406C);
      abort();
    }
  }
  v40 = 0u;
  v41 = 0u;
  v42 = 728306392;
  kdebug_trace();
  strcpy((char *)v34, "RslComputeRooms");
  v35 = 15;
  v36 = 5395024;
  v37 = 3;
  v38[1] = 0;
  v38[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v39 = 1;
  v6 = *a2;
  v7 = a2[1];
  v8 = 0uLL;
  v32 = 0u;
  v33 = 0u;
  if (v6 == v7)
  {
    v22 = 0;
    v23 = 0;
  }
  else
  {
    do
    {
      v9 = *(_QWORD *)(v6 + 88);
      if (v9)
      {
        sub_2239367D8((uint64_t)v24, v9);
        v29 = 1;
        __p = 0u;
        v31 = 0u;
        v10 = *((_QWORD *)&v32 + 1);
        if (*((_QWORD *)&v32 + 1) >= (unint64_t)v33)
        {
          v11 = sub_223994BF0((uint64_t *)&v32, (uint64_t)v24);
        }
        else
        {
          sub_2239962A0(*((uint64_t *)&v32 + 1), (uint64_t)v24);
          v11 = v10 + 216;
        }
        *((_QWORD *)&v32 + 1) = v11;
        v12 = __p;
        if ((_QWORD)__p)
        {
          v13 = *((_QWORD *)&__p + 1);
          v14 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
            {
              v15 = *(void **)(v13 - 40);
              if (v15)
              {
                *(_QWORD *)(v13 - 32) = v15;
                operator delete(v15);
              }
              v13 -= 104;
            }
            while (v13 != v12);
            v14 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v12;
          operator delete(v14);
        }
        if (v27)
        {
          v28 = v27;
          operator delete(v27);
        }
        v16 = (char *)v25;
        if (v25)
        {
          v17 = v26;
          v18 = v25;
          if (v26 != v25)
          {
            v19 = v26;
            do
            {
              v21 = (void *)*((_QWORD *)v19 - 3);
              v19 -= 24;
              v20 = v21;
              if (v21)
              {
                *((_QWORD *)v17 - 2) = v20;
                operator delete(v20);
              }
              v17 = v19;
            }
            while (v19 != v16);
            v18 = v25;
          }
          v26 = v16;
          operator delete(v18);
        }
        if (v24[0])
        {
          v24[1] = v24[0];
          operator delete(v24[0]);
        }
      }
      v6 += 360;
    }
    while (v6 != v7);
    v8 = v32;
    v22 = *((_QWORD *)&v33 + 1);
    v23 = v33;
  }
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v23;
  *(_QWORD *)(a3 + 24) = v22;
  *(_BYTE *)(a3 + 32) = 1;
  sub_22391CC34(v34, &v36, (uint64_t)v38);
  if (v37 < 0)
  {
    operator delete((void *)v36);
    if ((v35 & 0x80000000) == 0)
      return kdebug_trace();
LABEL_36:
    operator delete((void *)v34[0]);
    return kdebug_trace();
  }
  if (v35 < 0)
    goto LABEL_36;
  return kdebug_trace();
}

void sub_22399406C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  sub_223937868((uint64_t)&a10);
  sub_223993D24(&a33);
  sub_22392AA18(v33 - 200);
  sub_2231874DC(v33 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_2239940AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float32x2_t *a5@<X4>, float32x2_t *a6@<X5>, char a7@<W6>, uint64_t a8@<X8>, float a9@<S0>, uint64_t a10, __int8 a11)
{
  uint64_t v21[3];
  void *__p;
  char v23;
  _QWORD v24[2];
  char v25;
  __int128 v26;
  __int128 v27;
  int v28;

  v26 = 0u;
  v27 = 0u;
  v28 = 728306488;
  kdebug_trace();
  strcpy((char *)v21, "RslComputeOutdoor");
  HIBYTE(v21[2]) = 17;
  __p = (void *)5395024;
  v23 = 3;
  v24[1] = 0;
  v24[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v25 = 1;
  if (a11)
  {
    if (a10 < *(_QWORD *)(a1 + 128))
    {
      *(_BYTE *)a8 = 0;
      *(_BYTE *)(a8 + 32) = 0;
      goto LABEL_6;
    }
    *(_QWORD *)(a1 + 128) = a10 + (uint64_t)(*(double *)(a1 + 32) * 1000000000.0);
  }
  sub_223987858(a1, 1u, a2, a3, a4, a10, a11, 0, (uint64_t *)a8, a9, a5, a6, a7);
LABEL_6:
  sub_22391CC34(v21, (uint64_t *)&__p, (uint64_t)v24);
  if (v23 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v21[2]) & 0x80000000) == 0)
      return kdebug_trace();
LABEL_10:
    operator delete((void *)v21[0]);
    return kdebug_trace();
  }
  if (SHIBYTE(v21[2]) < 0)
    goto LABEL_10;
  return kdebug_trace();
}

void sub_223994278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_22392AA18((uint64_t)va);
  sub_2231874DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2239942A0(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = (19349669 * v4) ^ (73856093 * *a2) ^ (83492791 * v5);
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = (19349669 * v4) ^ (73856093 * v3) ^ (83492791 * v5);
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v6 == v13)
        {
          if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == v4 && *((_DWORD *)result + 6) == v5)
            return result;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v6 == v12)
      {
        if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == v4 && *((_DWORD *)result + 6) == v5)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v8)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

BOOL sub_2239943E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v5;
  float *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v12;

  if (sub_223994530((uint64_t)&v12, a2, a3))
  {
    v6 = **(float ***)(a2 + 104);
    v5 = *(float **)(*(_QWORD *)(a2 + 104) + 8);
    v7 = **(float ***)(a3 + 104);
    if ((char *)v5 - (char *)v6 == *(_QWORD *)(*(_QWORD *)(a3 + 104) + 8) - (_QWORD)v7)
    {
      if (v6 == v5)
      {
LABEL_6:
        if (**(_DWORD **)(a2 + 112) == **(_DWORD **)(a3 + 112))
        {
          v8 = *(_QWORD *)(a2 + 120);
          v9 = *(_QWORD *)(a3 + 120);
          if (*(_BYTE *)(v8 + 24))
            v10 = *(_BYTE *)(v9 + 24) == 0;
          else
            v10 = 1;
          if (v10)
            return (*(_BYTE *)(v8 + 24) != 0) == (*(_BYTE *)(v9 + 24) != 0);
          if (*(float *)v8 == *(float *)v9
            && *(float *)(v8 + 4) == *(float *)(v9 + 4)
            && *(float *)(v8 + 8) == *(float *)(v9 + 8)
            && *(float *)(v8 + 12) == *(float *)(v9 + 12)
            && *(float *)(v8 + 16) == *(float *)(v9 + 16)
            && *(float *)(v8 + 20) == *(float *)(v9 + 20))
          {
            return 1;
          }
        }
      }
      else
      {
        while (*v6 == *v7)
        {
          ++v6;
          ++v7;
          if (v6 == v5)
            goto LABEL_6;
        }
      }
    }
  }
  return 0;
}

BOOL sub_223994530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char v12;

  if (sub_2239945F8((uint64_t)&v12, a2, a3)
    && (v5 = *(_QWORD *)(a2 + 72),
        v6 = *(_QWORD *)(a3 + 72),
        v7 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5,
        v7 == *(_QWORD *)(v6 + 8) - *(_QWORD *)v6)
    && !memcmp(*(const void **)v5, *(const void **)v6, v7)
    && **(_DWORD **)(a2 + 80) == **(_DWORD **)(a3 + 80)
    && (v8 = *(_QWORD *)(a2 + 88),
        v9 = *(_QWORD *)(a3 + 88),
        v10 = *(_QWORD *)(v8 + 8) - *(_QWORD *)v8,
        v10 == *(_QWORD *)(v9 + 8) - *(_QWORD *)v9)
    && !memcmp(*(const void **)v8, *(const void **)v9, v10))
  {
    return **(_DWORD **)(a2 + 96) == **(_DWORD **)(a3 + 96);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_2239945F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v5;
  float *v6;
  float *v7;
  char *v8;
  char *v9;
  _DWORD *v10;
  uint64_t result;
  char v12;

  if (!sub_223994704((uint64_t)&v12, a2, a3))
    return 0;
  v6 = **(float ***)(a2 + 56);
  v5 = *(float **)(*(_QWORD *)(a2 + 56) + 8);
  v7 = **(float ***)(a3 + 56);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8) - (_QWORD)v7)
    return 0;
  if (v6 != v5)
  {
    while (*v6 == *v7 && v6[1] == v7[1])
    {
      v6 += 2;
      v7 += 2;
      if (v6 == v5)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  v9 = **(char ***)(a2 + 64);
  v8 = *(char **)(*(_QWORD *)(a2 + 64) + 8);
  v10 = **(_DWORD ***)(a3 + 64);
  if (v8 - v9 != *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8) - (_QWORD)v10)
    return 0;
  result = 1;
  if (v9 != v8)
  {
    while (*(_DWORD *)v9 == *v10 && *((_DWORD *)v9 + 1) == v10[1] && *((_DWORD *)v9 + 2) == v10[2])
    {
      v9 += 12;
      v10 += 3;
      if (v9 == v8)
        return result;
    }
    return 0;
  }
  return result;
}

BOOL sub_223994704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  char *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BOOL8 result;
  char v18;

  if ((sub_223994830((uint64_t)&v18, a2, a3) & 1) == 0)
    return 0;
  if (**(_DWORD **)(a2 + 32) != **(_DWORD **)(a3 + 32))
    return 0;
  v6 = **(char ***)(a2 + 40);
  v5 = *(char **)(*(_QWORD *)(a2 + 40) + 8);
  v7 = **(_DWORD ***)(a3 + 40);
  if (v5 - v6 != *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) - (_QWORD)v7)
    return 0;
  if (v6 != v5)
  {
    while (*(_DWORD *)v6 == *v7 && *((_DWORD *)v6 + 1) == v7[1] && *((_DWORD *)v6 + 2) == v7[2])
    {
      v6 += 12;
      v7 += 3;
      if (v6 == v5)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v9 = **(char ***)(a2 + 48);
  v8 = *(char **)(*(_QWORD *)(a2 + 48) + 8);
  v10 = **(int ***)(a3 + 48);
  if (v8 - v9 != *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8) - (_QWORD)v10)
    return 0;
  if (v9 == v8)
    return 1;
  do
  {
    v11 = *(_DWORD *)v9;
    v12 = *((_DWORD *)v9 + 1);
    v9 += 8;
    v13 = *v10;
    v14 = v10[1];
    v10 += 2;
    result = v11 == v13 && v12 == v14;
  }
  while (result && v9 != v8);
  return result;
}

uint64_t sub_223994830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t result;

  v4 = **(float ***)a2;
  v3 = *(float **)(*(_QWORD *)a2 + 8);
  v5 = **(float ***)a3;
  if ((char *)v3 - (char *)v4 == *(_QWORD *)(*(_QWORD *)a3 + 8) - (_QWORD)v5)
  {
    if (v4 == v3)
    {
LABEL_7:
      v7 = **(float ***)(a2 + 8);
      v6 = *(float **)(*(_QWORD *)(a2 + 8) + 8);
      v8 = **(float ***)(a3 + 8);
      if ((char *)v6 - (char *)v7 == *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) - (_QWORD)v8)
      {
        if (v7 == v6)
        {
LABEL_13:
          if (**(_DWORD **)(a2 + 16) == **(_DWORD **)(a3 + 16))
          {
            v10 = **(float ***)(a2 + 24);
            v9 = *(float **)(*(_QWORD *)(a2 + 24) + 8);
            v11 = **(float ***)(a3 + 24);
            if ((char *)v9 - (char *)v10 == *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - (_QWORD)v11)
            {
              result = 1;
              if (v10 == v9)
                return result;
              while (*v10 == *v11 && v10[1] == v11[1] && v10[2] == v11[2])
              {
                v10 += 3;
                v11 += 3;
                if (v10 == v9)
                  return result;
              }
            }
          }
        }
        else
        {
          while (*v7 == *v8 && v7[1] == v8[1] && v7[2] == v8[2])
          {
            v7 += 3;
            v8 += 3;
            if (v7 == v6)
              goto LABEL_13;
          }
        }
      }
    }
    else
    {
      while (*v4 == *v5 && v4[1] == v5[1] && v4[2] == v5[2])
      {
        v4 += 3;
        v5 += 3;
        if (v4 == v3)
          goto LABEL_7;
      }
    }
  }
  return 0;
}

void sub_223994994()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2239949A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5D328;
  result[1] = v3;
  return result;
}

uint64_t sub_2239949DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5D328;
  a2[1] = v2;
  return result;
}

uint64_t sub_2239949F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v7;

  v4 = *(_QWORD *)(a1 + 8) + 168;
  v7 = a2;
  v5 = sub_223939EBC(v4, (int *)a2, (uint64_t)&unk_2245BA939, &v7);
  return sub_223180698(a3, (uint64_t)(v5 + 4));
}

uint64_t sub_223994A48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm7PRRImpl23CreateIncrementalResultEbRNS0_5block15PointCloudStoreERKNSt3__113unorder"
                     "ed_mapIN3cva6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_8equal_toISA_EENS6_9al"
                     "locatorINS6_4pairIKSA_SD_EEEEEERKNS6_13unordered_setISA_SE_SG_NSH_ISA_EEEENS6_8optionalINS6_6chrono"
                     "8durationIxNS6_5ratioILl1ELl1000000000EEEEEEEbRKNS9_IfLj3ELj1ELb1EEES13_fNS0_13MaterialLabelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm7PRRImpl23CreateIncrementalResultEbRNS0_5block15PointCloudStoreERKNSt3_"
                                "_113unordered_mapIN3cva6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_"
                                "8equal_toISA_EENS6_9allocatorINS6_4pairIKSA_SD_EEEEEERKNS6_13unordered_setISA_SE_SG_NSH_"
                                "ISA_EEEENS6_8optionalINS6_6chrono8durationIxNS6_5ratioILl1ELl1000000000EEEEEEEbRKNS9_IfL"
                                "j3ELj1ELb1EEES13_fNS0_13MaterialLabelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm7PRRImpl23CreateIncrementalResultEbRNS0_5block15PointCloudStoreERKNSt3__113unordered_mapIN3cva6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_8equal_toISA_EENS6_9allocatorINS6_4pairIKSA_SD_EEEEEERKNS6_13unordered_setISA_SE_SG_NSH_ISA_EEEENS6_8optionalINS6_6chrono8durationIxNS6_5ratioILl1ELl1000000000EEEEEEEbRKNS9_IfLj3ELj1ELb1EEES13_fNS0_13MaterialLabelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm7PRRImpl23CreateIncrementalResultEbRNS0_5block15PointCloudStoreERKNSt3__113unordered_mapIN3cva6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_8equal_toISA_EENS6_9allocatorINS6_4pairIKSA_SD_EEEEEERKNS6_13unordered_setISA_SE_SG_NSH_ISA_EEEENS6_8optionalINS6_6chrono8durationIxNS6_5ratioILl1ELl1000000000EEEEEEEbRKNS9_IfLj3ELj1ELb1EEES13_fNS0_13MaterialLabelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223994AB4()
{
  return &unk_24EC5D398;
}

void sub_223994AC4()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223994AD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5D3B8;
  result[1] = v3;
  return result;
}

uint64_t sub_223994B0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5D3B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_223994B28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v7;

  v4 = *(_QWORD *)(a1 + 8) + 168;
  v7 = a2;
  v5 = sub_223939EBC(v4, (int *)a2, (uint64_t)&unk_2245BA939, &v7);
  return sub_223180698(a3, (uint64_t)(v5 + 4));
}

uint64_t sub_223994B78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm7PRRImpl23CreateIncrementalResultEbRNS0_5block15PointCloudStoreERKNSt3__113unorder"
                     "ed_mapIN3cva6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_8equal_toISA_EENS6_9al"
                     "locatorINS6_4pairIKSA_SD_EEEEEERKNS6_13unordered_setISA_SE_SG_NSH_ISA_EEEENS6_8optionalINS6_6chrono"
                     "8durationIxNS6_5ratioILl1ELl1000000000EEEEEEEbRKNS9_IfLj3ELj1ELb1EEES13_fNS0_13MaterialLabelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm7PRRImpl23CreateIncrementalResultEbRNS0_5block15PointCloudStoreERKNSt3_"
                                "_113unordered_mapIN3cva6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_"
                                "8equal_toISA_EENS6_9allocatorINS6_4pairIKSA_SD_EEEEEERKNS6_13unordered_setISA_SE_SG_NSH_"
                                "ISA_EEEENS6_8optionalINS6_6chrono8durationIxNS6_5ratioILl1ELl1000000000EEEEEEEbRKNS9_IfL"
                                "j3ELj1ELb1EEES13_fNS0_13MaterialLabelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm7PRRImpl23CreateIncrementalResultEbRNS0_5block15PointCloudStoreERKNSt3__113unordered_mapIN3cva6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_8equal_toISA_EENS6_9allocatorINS6_4pairIKSA_SD_EEEEEERKNS6_13unordered_setISA_SE_SG_NSH_ISA_EEEENS6_8optionalINS6_6chrono8durationIxNS6_5ratioILl1ELl1000000000EEEEEEEbRKNS9_IfLj3ELj1ELb1EEES13_fNS0_13MaterialLabelEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm7PRRImpl23CreateIncrementalResultEbRNS0_5block15PointCloudStoreERKNSt3__113unordered_mapIN3cva6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_8equal_toISA_EENS6_9allocatorINS6_4pairIKSA_SD_EEEEEERKNS6_13unordered_setISA_SE_SG_NSH_ISA_EEEENS6_8optionalINS6_6chrono8durationIxNS6_5ratioILl1ELl1000000000EEEEEEEbRKNS9_IfLj3ELj1ELb1EEES13_fNS0_13MaterialLabelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223994BE4()
{
  return &unk_24EC5D418;
}

uint64_t sub_223994BF0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *__p;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x12F684BDA12F684)
    sub_22316E078();
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42)
    v6 = 0x12F684BDA12F684;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x12F684BDA12F684)
      sub_223174E94();
    v7 = (char *)operator new(216 * v6);
  }
  else
  {
    v7 = 0;
  }
  __p = v7;
  v11 = &v7[216 * v3];
  v13 = &v7[216 * v6];
  sub_2239962A0((uint64_t)v11, a2);
  v12 = v11 + 216;
  sub_223994D30(a1, &__p);
  v8 = a1[1];
  sub_223994ECC((uint64_t)&__p, (uint64_t)v11);
  if (__p)
    operator delete(__p);
  return v8;
}

void sub_223994D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223994E98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223994D30(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 216) = 0;
      *(_QWORD *)(v6 - 208) = 0;
      *(_QWORD *)(v6 - 200) = 0;
      *(_OWORD *)(v6 - 216) = *(_OWORD *)(v2 + v5 - 216);
      *(_QWORD *)(v6 - 200) = *(_QWORD *)(v2 + v5 - 200);
      *(_QWORD *)(v7 - 216) = 0;
      *(_QWORD *)(v7 - 208) = 0;
      *(_QWORD *)(v7 - 200) = 0;
      *(_QWORD *)(v6 - 192) = 0;
      *(_QWORD *)(v6 - 184) = 0;
      *(_QWORD *)(v6 - 176) = 0;
      *(_OWORD *)(v6 - 192) = *(_OWORD *)(v2 + v5 - 192);
      *(_QWORD *)(v6 - 176) = *(_QWORD *)(v2 + v5 - 176);
      *(_QWORD *)(v7 - 192) = 0;
      *(_QWORD *)(v7 - 184) = 0;
      *(_QWORD *)(v7 - 176) = 0;
      *(_QWORD *)(v6 - 168) = 0;
      *(_QWORD *)(v6 - 160) = 0;
      *(_QWORD *)(v6 - 152) = 0;
      *(_OWORD *)(v6 - 168) = *(_OWORD *)(v2 + v5 - 168);
      *(_QWORD *)(v6 - 152) = *(_QWORD *)(v2 + v5 - 152);
      *(_QWORD *)(v7 - 168) = 0;
      *(_QWORD *)(v7 - 160) = 0;
      *(_QWORD *)(v7 - 152) = 0;
      v8 = *(_QWORD *)(v2 + v5 - 144);
      *(_DWORD *)(v6 - 136) = *(_DWORD *)(v2 + v5 - 136);
      *(_QWORD *)(v6 - 144) = v8;
      v9 = *(_QWORD *)(v2 + v5 - 132);
      *(_DWORD *)(v6 - 124) = *(_DWORD *)(v2 + v5 - 124);
      *(_QWORD *)(v6 - 132) = v9;
      v10 = *(_QWORD *)(v2 + v5 - 120);
      *(_DWORD *)(v6 - 112) = *(_DWORD *)(v2 + v5 - 112);
      *(_QWORD *)(v6 - 120) = v10;
      v11 = *(_OWORD *)(v2 + v5 - 108);
      v12 = *(_OWORD *)(v2 + v5 - 92);
      *(_DWORD *)(v6 - 76) = *(_DWORD *)(v2 + v5 - 76);
      *(_OWORD *)(v6 - 92) = v12;
      *(_OWORD *)(v6 - 108) = v11;
      LOBYTE(v10) = *(_BYTE *)(v2 + v5 - 72);
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 64) = 0;
      *(_BYTE *)(v6 - 72) = v10;
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      v13 = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 40) = v13;
      *(_QWORD *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 216;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v14 = *result;
  *result = v4;
  a2[1] = v14;
  v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

uint64_t sub_223994E98(uint64_t a1)
{
  sub_223994ECC(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223994ECC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 216;
      v6 = *(_QWORD *)(v2 - 32);
      if (v6)
      {
        v7 = *(_QWORD *)(v2 - 24);
        v5 = *(void **)(v2 - 32);
        if (v7 != v6)
        {
          do
          {
            v8 = *(_QWORD *)(v7 - 40);
            if (v8)
            {
              v9 = *(_QWORD *)(v7 - 32);
              v10 = *(void **)(v7 - 40);
              if (v9 != v8)
              {
                do
                {
                  v11 = *(void **)(v9 - 40);
                  if (v11)
                  {
                    *(_QWORD *)(v9 - 32) = v11;
                    operator delete(v11);
                  }
                  v9 -= 104;
                }
                while (v9 != v8);
                v10 = *(void **)(v7 - 40);
              }
              *(_QWORD *)(v7 - 32) = v8;
              operator delete(v10);
            }
            v12 = *(void **)(v7 - 144);
            if (v12)
            {
              *(_QWORD *)(v7 - 136) = v12;
              operator delete(v12);
            }
            v13 = *(_QWORD *)(v7 - 168);
            if (v13)
            {
              v14 = *(_QWORD *)(v7 - 160);
              v15 = *(void **)(v7 - 168);
              if (v14 != v13)
              {
                v16 = *(_QWORD *)(v7 - 160);
                do
                {
                  v18 = *(void **)(v16 - 24);
                  v16 -= 24;
                  v17 = v18;
                  if (v18)
                  {
                    *(_QWORD *)(v14 - 16) = v17;
                    operator delete(v17);
                  }
                  v14 = v16;
                }
                while (v16 != v13);
                v15 = *(void **)(v7 - 168);
              }
              *(_QWORD *)(v7 - 160) = v13;
              operator delete(v15);
            }
            v19 = v7 - 192;
            v20 = *(void **)(v7 - 192);
            if (v20)
            {
              *(_QWORD *)(v7 - 184) = v20;
              operator delete(v20);
            }
            v7 -= 192;
          }
          while (v19 != v6);
          v5 = *(void **)(v2 - 32);
        }
        *(_QWORD *)(v2 - 24) = v6;
        operator delete(v5);
      }
      result = sub_223937868(v2 - 216);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_223995020(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  int v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t ***v13;
  uint64_t **v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t ***v17;
  uint64_t ***v18;
  uint64_t ***v19;
  uint64_t ***v20;
  uint64_t ***v21;
  uint64_t ***v22;
  uint64_t ***v23;
  uint64_t ***v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;

  v4 = a3 & 0xCFFFFFFF;
  v5 = *(_QWORD *)(a1 + 184);
  v6 = (int *)(v5 + 4488 * (a3 & 0xCFFFFFFF));
  if (!v6[16])
    return;
  v8 = *v6;
  v9 = v6[1];
  v10 = v6[2];
  if (!a2)
  {
    v13 = **(uint64_t *****)(a4 + 8);
    v25 = *v6;
    v26 = v9;
    v27 = v10;
    v28 = v8 + 8;
    v29 = v9 + 8;
    v30 = v10 + 8;
    v14 = *v13;
LABEL_38:
    sub_2239901EC(*v14, &v25);
    return;
  }
  v12 = (a2 - 1);
  if (a2 == 1)
  {
    v15 = v6[3] - v8;
    if (*(_DWORD *)(v5 + 4488 * v4 + 24) >> 30)
    {
      v16 = v15 >> 1;
      if (*(_DWORD *)(v5 + 4488 * v4 + 28) >> 30)
        goto LABEL_23;
    }
    else
    {
      v17 = **(uint64_t *****)(a4 + 8);
      v25 = *v6;
      v26 = v9;
      v27 = v10;
      v28 = v8 + 8;
      v29 = v9 + 8;
      v30 = v10 + 8;
      sub_2239901EC(**v17, &v25);
      v5 = *(_QWORD *)(a1 + 184);
      v16 = v15 >> 1;
      if (*(_DWORD *)(v5 + 4488 * v4 + 28) >> 30)
      {
LABEL_23:
        if (*(_DWORD *)(v5 + 4488 * v4 + 32) >> 30)
          goto LABEL_24;
        goto LABEL_32;
      }
    }
    v18 = **(uint64_t *****)(a4 + 8);
    v25 = v8;
    v26 = v9;
    v27 = v16 + v10;
    v28 = v8 + 8;
    v29 = v9 + 8;
    v30 = v16 + v10 + 8;
    sub_2239901EC(**v18, &v25);
    v5 = *(_QWORD *)(a1 + 184);
    if (*(_DWORD *)(v5 + 4488 * v4 + 32) >> 30)
    {
LABEL_24:
      if (*(_DWORD *)(v5 + 4488 * v4 + 36) >> 30)
        goto LABEL_25;
      goto LABEL_33;
    }
LABEL_32:
    v19 = **(uint64_t *****)(a4 + 8);
    v25 = v8;
    v26 = v16 + v9;
    v27 = v10;
    v28 = v8 + 8;
    v29 = v16 + v9 + 8;
    v30 = v10 + 8;
    sub_2239901EC(**v19, &v25);
    v5 = *(_QWORD *)(a1 + 184);
    if (*(_DWORD *)(v5 + 4488 * v4 + 36) >> 30)
    {
LABEL_25:
      if (*(_DWORD *)(v5 + 4488 * v4 + 40) >> 30)
        goto LABEL_26;
      goto LABEL_34;
    }
LABEL_33:
    v20 = **(uint64_t *****)(a4 + 8);
    v25 = v8;
    v26 = v16 + v9;
    v27 = v16 + v10;
    v28 = v8 + 8;
    v29 = v16 + v9 + 8;
    v30 = v16 + v10 + 8;
    sub_2239901EC(**v20, &v25);
    v5 = *(_QWORD *)(a1 + 184);
    if (*(_DWORD *)(v5 + 4488 * v4 + 40) >> 30)
    {
LABEL_26:
      if (*(_DWORD *)(v5 + 4488 * v4 + 44) >> 30)
        goto LABEL_27;
      goto LABEL_35;
    }
LABEL_34:
    v21 = **(uint64_t *****)(a4 + 8);
    v25 = v16 + v8;
    v26 = v9;
    v27 = v10;
    v28 = v16 + v8 + 8;
    v29 = v9 + 8;
    v30 = v10 + 8;
    sub_2239901EC(**v21, &v25);
    v5 = *(_QWORD *)(a1 + 184);
    if (*(_DWORD *)(v5 + 4488 * v4 + 44) >> 30)
    {
LABEL_27:
      if (*(_DWORD *)(v5 + 4488 * v4 + 48) >> 30)
        goto LABEL_28;
      goto LABEL_36;
    }
LABEL_35:
    v22 = **(uint64_t *****)(a4 + 8);
    v25 = v16 + v8;
    v26 = v9;
    v27 = v16 + v10;
    v28 = v16 + v8 + 8;
    v29 = v9 + 8;
    v30 = v16 + v10 + 8;
    sub_2239901EC(**v22, &v25);
    v5 = *(_QWORD *)(a1 + 184);
    if (*(_DWORD *)(v5 + 4488 * v4 + 48) >> 30)
    {
LABEL_28:
      if (*(_DWORD *)(v5 + 4488 * v4 + 52) >> 30)
        return;
      goto LABEL_37;
    }
LABEL_36:
    v23 = **(uint64_t *****)(a4 + 8);
    v25 = v16 + v8;
    v26 = v16 + v9;
    v27 = v10;
    v28 = v16 + v8 + 8;
    v29 = v16 + v9 + 8;
    v30 = v10 + 8;
    sub_2239901EC(**v23, &v25);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v4 + 52) >> 30)
      return;
LABEL_37:
    v24 = **(uint64_t *****)(a4 + 8);
    v25 = v16 + v8;
    v26 = v16 + v9;
    v27 = v16 + v10;
    v28 = v16 + v8 + 8;
    v29 = v16 + v9 + 8;
    v30 = v16 + v10 + 8;
    v14 = *v24;
    goto LABEL_38;
  }
  if ((*(_DWORD *)(v5 + 4488 * v4 + 24) & 0x80000000) == 0)
  {
    sub_223995020(a1, (a2 - 1));
    v5 = *(_QWORD *)(a1 + 184);
  }
  if ((*(_DWORD *)(v5 + 4488 * v4 + 28) & 0x80000000) == 0)
  {
    sub_223995020(a1, v12);
    v5 = *(_QWORD *)(a1 + 184);
  }
  if ((*(_DWORD *)(v5 + 4488 * v4 + 32) & 0x80000000) == 0)
  {
    sub_223995020(a1, v12);
    v5 = *(_QWORD *)(a1 + 184);
  }
  if ((*(_DWORD *)(v5 + 4488 * v4 + 36) & 0x80000000) == 0)
  {
    sub_223995020(a1, v12);
    v5 = *(_QWORD *)(a1 + 184);
  }
  if ((*(_DWORD *)(v5 + 4488 * v4 + 40) & 0x80000000) == 0)
  {
    sub_223995020(a1, v12);
    v5 = *(_QWORD *)(a1 + 184);
  }
  if ((*(_DWORD *)(v5 + 4488 * v4 + 44) & 0x80000000) == 0)
  {
    sub_223995020(a1, v12);
    v5 = *(_QWORD *)(a1 + 184);
  }
  if ((*(_DWORD *)(v5 + 4488 * v4 + 48) & 0x80000000) == 0)
  {
    sub_223995020(a1, v12);
    v5 = *(_QWORD *)(a1 + 184);
  }
  if ((*(_DWORD *)(v5 + 4488 * v4 + 52) & 0x80000000) == 0)
    sub_223995020(a1, v12);
}

_QWORD *sub_223995560(uint64_t *a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = (19349669 * v7) ^ (73856093 * *a2) ^ (83492791 * v8);
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (19349669 * v7) ^ (73856093 * v6) ^ (83492791 * v8);
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == v7 && *((_DWORD *)v13 + 6) == v8)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == v7 && *((_DWORD *)v13 + 6) == v8)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_27:
  v16 = a1 + 2;
  v13 = operator new(0x48uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = *(_QWORD *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_DWORD *)v13 + 16) = 1065353216;
  v17 = (float)(unint64_t)(a1[3] + 1);
  v18 = *((float *)a1 + 8);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = a1[1];
    }
    if (prime > v10)
    {
LABEL_41:
      if (prime >> 61)
        sub_223174E94();
      v25 = operator new(8 * prime);
      v26 = (void *)*a1;
      *a1 = (uint64_t)v25;
      if (v26)
        operator delete(v26);
      v27 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v27++) = 0;
      while (prime != v27);
      v28 = (_QWORD *)*v16;
      if (!*v16)
        goto LABEL_73;
      v29 = v28[1];
      v30 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v31 = v29 & v30;
        *(_QWORD *)(*a1 + 8 * v31) = v16;
        for (i = (_QWORD *)*v28; *v28; i = (_QWORD *)*v28)
        {
          v33 = i[1] & v30;
          if (v33 == v31)
          {
            v28 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v33))
          {
            *v28 = *i;
            v34 = 8 * v33;
            *i = **(_QWORD **)(*a1 + v34);
            **(_QWORD **)(*a1 + v34) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v33) = v28;
            v28 = i;
            v31 = v33;
          }
        }
        goto LABEL_73;
      }
      if (v29 >= prime)
        v29 %= prime;
      *(_QWORD *)(*a1 + 8 * v29) = v16;
      v38 = (_QWORD *)*v28;
      if (!*v28)
      {
LABEL_73:
        v10 = prime;
        v41 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_74;
        goto LABEL_89;
      }
      while (1)
      {
        v40 = v38[1];
        if (v40 >= prime)
          v40 %= prime;
        if (v40 == v29)
          goto LABEL_67;
        if (*(_QWORD *)(*a1 + 8 * v40))
        {
          *v28 = *v38;
          v39 = 8 * v40;
          *v38 = **(_QWORD **)(*a1 + v39);
          **(_QWORD **)(*a1 + v39) = v38;
          v38 = v28;
LABEL_67:
          v28 = v38;
          v38 = (_QWORD *)*v38;
          if (!v38)
            goto LABEL_73;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v40) = v28;
          v28 = v38;
          v38 = (_QWORD *)*v38;
          v29 = v40;
          if (!v38)
            goto LABEL_73;
        }
      }
    }
    if (prime < v10)
    {
      v35 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < v10)
      {
        if (!prime)
        {
          v42 = (void *)*a1;
          *a1 = 0;
          if (v42)
            operator delete(v42);
          v10 = 0;
          a1[1] = 0;
          v41 = -1;
          goto LABEL_89;
        }
        goto LABEL_41;
      }
      v10 = a1[1];
    }
    v41 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_74:
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v19 = *a1;
        v20 = *(_QWORD **)(*a1 + 8 * (v9 % v10));
        if (v20)
          goto LABEL_30;
      }
      else
      {
        v3 = v9;
        v19 = *a1;
        v20 = *(_QWORD **)(*a1 + 8 * v9);
        if (v20)
          goto LABEL_30;
      }
      goto LABEL_90;
    }
LABEL_89:
    v3 = v41 & v9;
    v19 = *a1;
    v20 = *(_QWORD **)(*a1 + 8 * (v41 & v9));
    if (v20)
      goto LABEL_30;
    goto LABEL_90;
  }
  v19 = *a1;
  v20 = *(_QWORD **)(*a1 + 8 * v3);
  if (v20)
  {
LABEL_30:
    *v13 = *v20;
LABEL_96:
    *v20 = v13;
    goto LABEL_97;
  }
LABEL_90:
  *v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v19 + 8 * v3) = v16;
  if (*v13)
  {
    v43 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v43 >= v10)
        v43 %= v10;
    }
    else
    {
      v43 &= v10 - 1;
    }
    v20 = (_QWORD *)(*a1 + 8 * v43);
    goto LABEL_96;
  }
LABEL_97:
  ++a1[3];
  return v13;
}

void sub_223995A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2238BBFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223995A9C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = (19349669 * v9) ^ (73856093 * *a2) ^ (83492791 * v10);
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = (19349669 * v9) ^ (73856093 * v8) ^ (83492791 * v10);
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == v9 && *((_DWORD *)v15 + 6) == v10)
                return v15;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_27;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_27;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == v9 && *((_DWORD *)v15 + 6) == v10)
              return v15;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_27:
  v18 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x1A0uLL);
  *v15 = 0;
  v15[1] = v11;
  v15[2] = *(_QWORD *)a3;
  *((_DWORD *)v15 + 6) = *(_DWORD *)(a3 + 8);
  sub_22317FD80((uint64_t)(v15 + 4), a4);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v12 && (float)(v20 * (float)v12) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_30:
      *v15 = *v22;
LABEL_65:
      *v22 = v15;
      goto LABEL_66;
    }
  }
  else
  {
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_41;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_41:
        sub_2231B0668(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v31 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v22)
          goto LABEL_30;
      }
      else
      {
        v4 = v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v22)
          goto LABEL_30;
      }
    }
    else
    {
      v4 = v31 & v11;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v11));
      if (v22)
        goto LABEL_30;
    }
  }
  *v15 = *v18;
  *v18 = v15;
  *(_QWORD *)(v21 + 8 * v4) = v18;
  if (*v15)
  {
    v32 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v32 >= v12)
        v32 %= v12;
    }
    else
    {
      v32 &= v12 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_65;
  }
LABEL_66:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_223995E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22393849C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223995E3C(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223995F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223995F7C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223995F90()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5D438;
  return result;
}

void sub_223995FB4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5D438;
}

uint64_t sub_223995FCC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t sub_223995FD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm7PRRImpl11BuildResultINSt3__113unordered_setIN3cva6MatrixIiLj3ELj1ELb0EEENS0_6Hash"
                     "3DENS4_8equal_toIS8_EENS4_9allocatorIS8_EEEEEENS1_9PRRResultERKT_EUlSI_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm7PRRImpl11BuildResultINSt3__113unordered_setIN3cva6MatrixIiLj3ELj1ELb0E"
                                "EENS0_6Hash3DENS4_8equal_toIS8_EENS4_9allocatorIS8_EEEEEENS1_9PRRResultERKT_EUlSI_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm7PRRImpl11BuildResultINSt3__113unordered_setIN3cva6MatrixIiLj3ELj1ELb0EEENS0_6Hash3DENS4_8equal_toIS8_EENS4_9allocatorIS8_EEEEEENS1_9PRRResultERKT_EUlSI_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm7PRRImpl11BuildResultINSt3__113unordered_setIN3cva6MatrixIiLj3ELj1ELb0EEENS0_6Hash3DENS4_8equal_toIS8_EENS4_9allocatorIS8_EEEEEENS1_9PRRResultERKT_EUlSI_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223996040()
{
  return &unk_24EC5D4A8;
}

void sub_223996050()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223996064()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5D4C8;
  return result;
}

void sub_223996088(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5D4C8;
}

uint64_t sub_2239960A0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t sub_2239960A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm7PRRImpl11BuildResultINS_3esn13TransformViewINSt3__113unordered_mapIN3cva6MatrixIi"
                     "Lj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_8equal_toISA_EENS6_9allocatorINS6_4pairIKSA"
                     "_SD_EEEEEENS4_2op3GetILm0EEMUlOT_E_EEEEENS1_9PRRResultERKSO_EUlSU_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm7PRRImpl11BuildResultINS_3esn13TransformViewINSt3__113unordered_mapIN3c"
                                "va6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_8equal_toISA_EENS6_9a"
                                "llocatorINS6_4pairIKSA_SD_EEEEEENS4_2op3GetILm0EEMUlOT_E_EEEEENS1_9PRRResultERKSO_EUlSU_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm7PRRImpl11BuildResultINS_3esn13TransformViewINSt3__113unordered_mapIN3cva6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_8equal_toISA_EENS6_9allocatorINS6_4pairIKSA_SD_EEEEEENS4_2op3GetILm0EEMUlOT_E_EEEEENS1_9PRRResultERKSO_EUlSU_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm7PRRImpl11BuildResultINS_3esn13TransformViewINSt3__113unordered_mapIN3cva6MatrixIiLj3ELj1ELb0EEENS_3kit4mesh11TriMeshDataENS0_6Hash3DENS6_8equal_toISA_EENS6_9allocatorINS6_4pairIKSA_SD_EEEEEENS4_2op3GetILm0EEMUlOT_E_EEEEENS1_9PRRResultERKSO_EUlSU_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223996114()
{
  return &unk_24EC5D528;
}

uint64_t sub_223996120(uint64_t result, uint64_t a2, unint64_t *a3, _DWORD *a4, __n128 a5)
{
  uint64_t v8;
  uint64_t v9;
  float *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;

  if ((unint64_t)(a2 - result) < 0x30)
    return result;
  v8 = a2 - 16;
  do
  {
    v9 = result + 16;
    if (result + 16 == v8)
      return result;
    v10 = *(float **)(a2 - 16);
    v11 = *v10;
    v12 = v10[1];
    v13 = **(float **)result;
    v14 = *(float *)(*(_QWORD *)result + 4);
    v15 = v11 - v13;
    v16 = v12 - v14;
    v17 = v15 * v15 + v16 * v16;
    v18 = -1.0;
    v19 = a2;
    do
    {
      while (1)
      {
        v23 = **(float **)v9;
        v24 = *(float *)(*(_QWORD *)v9 + 4);
        v25 = v23 - v13;
        v26 = v15 * (v23 - v13) + v16 * (v24 - v14);
        if (v26 > 0.0)
          break;
        v20 = (v24 - v14) * (v24 - v14);
        v21 = v25 * v25;
LABEL_6:
        v22 = v21 + v20;
        if (v18 < v22)
        {
          v19 = v9;
          v18 = v22;
        }
        v9 += 16;
        if (v9 == v8)
          goto LABEL_15;
      }
      if (v17 > v26)
      {
        v21 = (v24 - (v16 * (v26 / v17) + v14)) * (v24 - (v16 * (v26 / v17) + v14));
        v20 = (v23 - (v15 * (v26 / v17) + v13)) * (v23 - (v15 * (v26 / v17) + v13));
        goto LABEL_6;
      }
      v27 = (v23 - v11) * (v23 - v11) + (v24 - v12) * (v24 - v12);
      if (v18 < v27)
      {
        v19 = v9;
        v18 = v27;
      }
      v9 += 16;
    }
    while (v9 != v8);
LABEL_15:
    a5.n128_u64[0] = *a3;
    if (*(double *)a3 >= v18 || v19 == a2)
      break;
    *(_BYTE *)(v19 + 8) = 1;
    ++*a4;
    sub_223996120(a5);
    result = v19;
  }
  while ((unint64_t)(a2 - v19) > 0x2F);
  return result;
}

uint64_t sub_2239962A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2239367D8(a1, a2);
  *(_BYTE *)(v4 + 144) = *(_BYTE *)(a2 + 144);
  sub_223996700((_QWORD *)(v4 + 152), (uint64_t *)(a2 + 152));
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return a1;
}

void sub_2239962F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;

  v3 = *(void **)(v1 + 48);
  if (v3)
  {
    *(_QWORD *)(v1 + 56) = v3;
    operator delete(v3);
    v4 = *(char **)(v1 + 24);
    if (!v4)
    {
LABEL_3:
      v5 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = *(char **)(v1 + 24);
    if (!v4)
      goto LABEL_3;
  }
  v6 = *(char **)(v1 + 32);
  v7 = v4;
  if (v6 != v4)
  {
    v8 = *(char **)(v1 + 32);
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 3);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v6 - 2) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v4);
    v7 = *(char **)(v1 + 24);
  }
  *(_QWORD *)(v1 + 32) = v4;
  operator delete(v7);
  v5 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v1 + 8) = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223996388(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const std::ios_base *v10;
  unsigned int fmtflags;
  const std::locale::facet *v12;
  lconv *v13;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v16;
  int8x16_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::locale v23;
  void (***v24)(void);
  std::__shared_weak_count *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  lconv *v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  void *__p;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC5D618;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5D5C8;
  v7[1].__shared_owners_ = (uint64_t)a1;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24));
  fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    v12 = std::locale::use_facet(&v23, MEMORY[0x24BEDB350]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v23);
    v10[1].__fmtflags_ = fmtflags;
  }
  v24 = (void (***)(void))&v7[1];
  v25 = v7;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v13 = localeconv();
  v30 = v13;
  thousands_sep = v13->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  v31 = (char)thousands_sep;
  decimal_point = v13->decimal_point;
  if (v13->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  v32 = (char)decimal_point;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v65 = fmtflags;
  v16 = operator new(0x208uLL);
  __p = v16;
  v68 = 0x8000000000000208;
  v67 = 512;
  v17 = vdupq_n_s8(fmtflags);
  *v16 = v17;
  v16[1] = v17;
  v16[2] = v17;
  v16[3] = v17;
  v16[4] = v17;
  v16[5] = v17;
  v16[6] = v17;
  v16[7] = v17;
  v16[8] = v17;
  v16[9] = v17;
  v16[10] = v17;
  v16[11] = v17;
  v16[12] = v17;
  v16[13] = v17;
  v16[14] = v17;
  v16[15] = v17;
  v16[16] = v17;
  v16[17] = v17;
  v16[18] = v17;
  v16[19] = v17;
  v16[20] = v17;
  v16[21] = v17;
  v16[22] = v17;
  v16[23] = v17;
  v16[24] = v17;
  v16[25] = v17;
  v16[26] = v17;
  v16[27] = v17;
  v16[28] = v17;
  v16[29] = v17;
  v16[30] = v17;
  v16[31] = v17;
  *((_BYTE *)v16 + 512) = 0;
  v69 = 0;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_2239970F8(&v24, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  if (SHIBYTE(v68) < 0)
    operator delete(__p);
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_223996664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223996680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  sub_223167354((uint64_t)&a12);
  sub_223167354((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_2239966A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223997FD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2239966B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223996700(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0x4EC4EC4EC4EC4EC5 * (v5 >> 3);
    if (v6 >= 0x276276276276277)
      sub_22316E078();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[104 * v6];
    do
    {
      v11 = v3 + v8;
      v12 = &v7[v8];
      v13 = *(_OWORD *)(v3 + v8);
      v14 = *(_OWORD *)(v3 + v8 + 16);
      v15 = *(_OWORD *)(v3 + v8 + 48);
      *((_OWORD *)v12 + 2) = *(_OWORD *)(v3 + v8 + 32);
      *((_OWORD *)v12 + 3) = v15;
      *(_OWORD *)v12 = v13;
      *((_OWORD *)v12 + 1) = v14;
      *((_QWORD *)v12 + 9) = 0;
      *((_QWORD *)v12 + 10) = 0;
      *((_QWORD *)v12 + 8) = 0;
      v17 = *(_BYTE **)(v3 + v8 + 64);
      v16 = *(_BYTE **)(v3 + v8 + 72);
      v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0)
          sub_22316E078();
        v9 = (char *)operator new(v16 - v17);
        *((_QWORD *)v12 + 8) = v9;
        *((_QWORD *)v12 + 9) = v9;
        *((_QWORD *)v12 + 10) = &v9[8 * (v18 >> 3)];
        v10 = v18 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v9, v17, v10);
        *((_QWORD *)v12 + 9) = &v9[v10];
      }
      v12[88] = *(_BYTE *)(v11 + 88);
      *(_QWORD *)(v12 + 92) = *(_QWORD *)(v11 + 92);
      v8 += 104;
    }
    while (v11 + 104 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_223996878(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 5);
        if (v6)
        {
          *((_QWORD *)v4 - 4) = v6;
          operator delete(v6);
        }
        v4 -= 104;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2239968F8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 40);
      if (v5)
      {
        *(_QWORD *)(v3 - 32) = v5;
        operator delete(v5);
      }
      v3 -= 104;
    }
  }
  return a1;
}

__n128 sub_223996958@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void sub_2239969B4(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 12;
  strcpy((char *)__p, "out_of_range");
  sub_223799B94((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &off_24EC58AB8;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &off_24EC5D560;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_223996AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223996B30(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC58AB8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_223996B60(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC58AB8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

_BYTE *sub_223996BA4(uint64_t a1)
{
  _BYTE *result;
  int v3;
  void *v4;
  void *exception;
  _QWORD v6[3];

  result = *(_BYTE **)a1;
  v3 = *result;
  if (v3 == 1)
    return (_BYTE *)(*(_QWORD *)(a1 + 8) + 56);
  if (v3 == 2)
    return *(_BYTE **)(a1 + 16);
  if (!*result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_223174DE4(v6, "cannot get value");
    sub_223996E0C(214, (uint64_t)v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24EC5D578, (void (*)(void *))sub_223996F7C);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v4 = __cxa_allocate_exception(0x20uLL);
    sub_223174DE4(v6, "cannot get value");
    sub_223996E0C(214, (uint64_t)v6, (uint64_t)v4);
    __cxa_throw(v4, (struct type_info *)&unk_24EC5D578, (void (*)(void *))sub_223996F7C);
  }
  return result;
}

void sub_223996CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

BOOL sub_223996D0C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_223174DE4(v7, "cannot compare iterators of different containers");
    sub_223996E0C(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24EC5D578, (void (*)(void *))sub_223996F7C);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_223996DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_223996E0C(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  char __p[17];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 16;
  strcpy(__p, "invalid_iterator");
  sub_223799B94((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__p);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &off_24EC58AB8;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &off_24EC5D5A0;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_223996F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223996F7C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC58AB8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_223996FAC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC58AB8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

char *sub_223996FF0(char *result, _BYTE *a2)
{
  char *v2;
  void *exception;
  char *v4;
  std::string v5;
  std::string v6;

  v2 = result;
  if (*result != 4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (char *)sub_223799B6C(v2);
    sub_223174DE4(&v5, v4);
    sub_223799B10("type must be BOOLean, but is ", &v5, &v6);
    sub_22379985C(302, (uint64_t)&v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24EC58AD0, (void (*)(void *))sub_2237999D4);
  }
  *a2 = result[8];
  return result;
}

void sub_223997098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void (****sub_2239970F8(void (****result)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6))(void)
{
  void (****v10)(void);
  void (**v11)(void);
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void (*v19)(void);
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(void);
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t (*v30)(void);
  unint64_t v31;
  uint64_t v32;
  void (*v33)(void);
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t (***v37)(void);
  _QWORD *v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  void (****v51)(void);
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  BOOL v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t *v73;
  _QWORD *v74;
  char *v75;
  char v76;
  char *v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(void);
  char *v89;
  char v90;

  v10 = result;
  switch(*(_BYTE *)a2)
  {
    case 0:
      goto LABEL_26;
    case 1:
      v11 = **result;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v30 = (uint64_t (*)(void))v11[1];
        return (void (****)(void))v30();
      }
      if (a3)
      {
        v11[1]();
        v12 = (a6 + a5);
        v13 = v10 + 76;
        if (*((char *)v10 + 631) < 0)
        {
          v14 = (unint64_t)v10[77];
          if (v14 >= v12)
          {
LABEL_6:
            v15 = *(_QWORD **)(a2 + 8);
            v16 = (_QWORD *)*v15;
            if (v15[2] == 1)
            {
LABEL_7:
              v17 = v16;
LABEL_8:
              v18 = v10 + 76;
              if (*((char *)v10 + 631) < 0)
                v18 = (_QWORD *)*v13;
              ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v10)[1])(*v10, v18, (a6 + a5));
              ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 34);
              sub_2239980D0((uint64_t)v10, v17 + 4, a4);
              ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\": ", 3);
              sub_2239970F8(v10, v17 + 7, 1, a4, a5, (a6 + a5));
              ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 10);
              v19 = (**v10)[1];
              goto LABEL_160;
            }
LABEL_92:
            v70 = 0;
            do
            {
              v71 = v10 + 76;
              if (*((char *)v10 + 631) < 0)
                v71 = (_QWORD *)*v13;
              ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v10)[1])(*v10, v71, (a6 + a5));
              ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 34);
              sub_2239980D0((uint64_t)v10, v16 + 4, a4);
              ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\": ", 3);
              sub_2239970F8(v10, v16 + 7, 1, a4, a5, (a6 + a5));
              ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, ",\n", 2);
              v72 = (_QWORD *)v16[1];
              if (v72)
              {
                do
                {
                  v17 = v72;
                  v72 = (_QWORD *)*v72;
                }
                while (v72);
              }
              else
              {
                do
                {
                  v17 = (_QWORD *)v16[2];
                  v68 = *v17 == (_QWORD)v16;
                  v16 = v17;
                }
                while (!v68);
              }
              ++v70;
              v16 = v17;
            }
            while (v70 < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) - 1);
            goto LABEL_8;
          }
        }
        else
        {
          v14 = *((unsigned __int8 *)v10 + 631);
          if (v12 <= v14)
            goto LABEL_6;
        }
        std::string::resize((std::string *)(v10 + 76), 2 * v14, 32);
        v69 = *(_QWORD **)(a2 + 8);
        v16 = (_QWORD *)*v69;
        if (v69[2] == 1)
          goto LABEL_7;
        goto LABEL_92;
      }
      (*v11)();
      v46 = *(_QWORD **)(a2 + 8);
      v47 = (_QWORD *)*v46;
      if (v46[2] == 1)
      {
        v48 = (_QWORD *)*v46;
      }
      else
      {
        v66 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 34);
          sub_2239980D0((uint64_t)v10, v47 + 4, a4);
          ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\":", 2);
          sub_2239970F8(v10, v47 + 7, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 44);
          v67 = (_QWORD *)v47[1];
          if (v67)
          {
            do
            {
              v48 = v67;
              v67 = (_QWORD *)*v67;
            }
            while (v67);
          }
          else
          {
            do
            {
              v48 = (_QWORD *)v47[2];
              v68 = *v48 == (_QWORD)v47;
              v47 = v48;
            }
            while (!v68);
          }
          ++v66;
          v47 = v48;
        }
        while (v66 < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) - 1);
      }
      ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 34);
      sub_2239980D0((uint64_t)v10, v48 + 4, a4);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\":", 2);
      sub_2239970F8(v10, v48 + 7, 0, a4, a5, a6);
      goto LABEL_161;
    case 2:
      v20 = *(uint64_t **)(a2 + 8);
      v21 = *v20;
      v22 = v20[1];
      v23 = **result;
      if (v21 == v22)
      {
        v30 = (uint64_t (*)(void))v23[1];
        return (void (****)(void))v30();
      }
      if (a3)
      {
        v23[1]();
        v24 = (a6 + a5);
        v25 = v10 + 76;
        if (*((char *)v10 + 631) < 0)
        {
          v26 = (unint64_t)v10[77];
          if (v26 >= v24)
          {
LABEL_15:
            v27 = *(uint64_t **)(a2 + 8);
            v28 = *v27;
            if (*v27 != v27[1] - 16)
              goto LABEL_16;
            goto LABEL_104;
          }
        }
        else
        {
          v26 = *((unsigned __int8 *)v10 + 631);
          if (v24 <= v26)
            goto LABEL_15;
        }
        std::string::resize((std::string *)(v10 + 76), 2 * v26, 32);
        v73 = *(uint64_t **)(a2 + 8);
        v28 = *v73;
        if (*v73 != v73[1] - 16)
        {
          do
          {
LABEL_16:
            ((void (*)(void (***)(void)))(**v10)[1])(*v10);
            sub_2239970F8(v10, v28, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, ",\n", 2);
            v28 += 16;
          }
          while (v28 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
        }
LABEL_104:
        v74 = v10 + 76;
        if (*((char *)v10 + 631) < 0)
          v74 = (_QWORD *)*v25;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v10)[1])(*v10, v74, (a6 + a5));
        sub_2239970F8(v10, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
        ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 10);
        if (*((char *)v10 + 631) < 0)
          v25 = (_QWORD *)*v25;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v10)[1])(*v10, v25, a6);
        goto LABEL_109;
      }
      (*v23)();
      v49 = *(uint64_t **)(a2 + 8);
      v50 = *v49;
      v51 = v10;
      if (*v49 != v49[1] - 16)
      {
        do
        {
          sub_2239970F8(v51, v50, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 44);
          v50 += 16;
          v51 = v10;
        }
        while (v50 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
      }
      sub_2239970F8(v51, v50, 0, a4, a5, a6);
LABEL_109:
      v29 = (uint64_t (*)(void))***v10;
      return (void (****)(void))v29();
    case 3:
      (***result)();
      sub_2239980D0((uint64_t)v10, *(uint64_t **)(a2 + 8), a4);
      v29 = (uint64_t (*)(void))***v10;
      return (void (****)(void))v29();
    case 4:
      v30 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v30();
    case 5:
      return (void (****)(void))sub_223998698(result, *(_QWORD *)(a2 + 8));
    case 6:
      v31 = *(_QWORD *)(a2 + 8);
      if (!v31)
      {
        v29 = (uint64_t (*)(void))***result;
        return (void (****)(void))v29();
      }
      if (v31 < 0xA)
      {
        v32 = (uint64_t)result + 17;
        goto LABEL_125;
      }
      v52 = 4;
      v53 = *(_QWORD *)(a2 + 8);
      while (2)
      {
        if (v53 <= 0x63)
        {
          v52 -= 2;
        }
        else
        {
          if (v53 > 0x3E7)
          {
            if (v53 >> 4 < 0x271)
              break;
            v54 = v53 >> 5;
            v53 /= 0x2710uLL;
            v52 += 4;
            if (v54 <= 0xC34)
            {
              v52 -= 3;
              break;
            }
            continue;
          }
          --v52;
        }
        break;
      }
      v32 = (uint64_t)result + v52 + 16;
      if (v31 < 0x64)
      {
        v79 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        do
        {
          v79 = v31 / 0x64;
          *(_WORD *)(v32 - 2) = *(_WORD *)&a00010203040506[2 * (v31 % 0x64) + 400];
          v32 -= 2;
          v80 = v31 >> 4;
          v31 /= 0x64uLL;
        }
        while (v80 > 0x270);
      }
      if (v79 >= 0xA)
      {
        *(_WORD *)(v32 - 2) = *(_WORD *)&a00010203040506[2 * v79 + 400];
        goto LABEL_126;
      }
      LOBYTE(v31) = v79;
LABEL_125:
      *(_BYTE *)(v32 - 1) = v31 + 48;
LABEL_126:
      v30 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v30();
    case 7:
      if ((*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_26:
        v30 = (uint64_t (*)(void))(**result)[1];
      }
      else
      {
        sub_2239988E4((_BYTE *)result + 16, *(double *)(a2 + 8));
        v30 = (uint64_t (*)(void))(**v10)[1];
      }
      return (void (****)(void))v30();
    case 8:
      v33 = (**result)[1];
      if (!a3)
      {
        v33();
        v39 = *(_QWORD *)(a2 + 8);
        v41 = *(_BYTE **)v39;
        v40 = *(_BYTE **)(v39 + 8);
        if (v41 == v40)
          goto LABEL_130;
        if (v41 != v40 - 1)
        {
          while (1)
          {
            v42 = *v41;
            if (*v41)
              break;
            ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
LABEL_36:
            ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 44);
            if (++v41 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
              goto LABEL_60;
          }
          if (v42 >= 0xA)
          {
            if (v42 < 0x64)
            {
              v44 = &a00010203040506[2 * v42];
              *((_BYTE *)v10 + 17) = v44[1];
              v45 = *v44;
              v43 = 2;
LABEL_44:
              *((_BYTE *)v10 + 16) = v45;
              ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v10)[1])(*v10, v10 + 2, v43);
              goto LABEL_36;
            }
            *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2 * (*v41 % 0x64u)];
            LODWORD(v42) = (41 * v42) >> 12;
            v43 = 3;
          }
          else
          {
            v43 = 1;
          }
          v45 = v42 | 0x30;
          goto LABEL_44;
        }
LABEL_60:
        v55 = *v41;
        if (!*v41)
        {
          ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
          goto LABEL_130;
        }
        if (v55 >= 0xA)
        {
          if (v55 < 0x64)
          {
            v75 = &a00010203040506[2 * v55];
            *((_BYTE *)v10 + 17) = v75[1];
            v76 = *v75;
            v56 = 2;
LABEL_129:
            *((_BYTE *)v10 + 16) = v76;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v10)[1])(*v10, v10 + 2, v56);
LABEL_130:
            ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "],\"subtype\":", 12);
            v81 = *(_QWORD *)(a2 + 8);
            if (!*(_BYTE *)(v81 + 25))
            {
              v30 = (uint64_t (*)(void))(**v10)[1];
              return (void (****)(void))v30();
            }
            v82 = *(unsigned __int8 *)(v81 + 24);
            if (!v82)
            {
              ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
              goto LABEL_161;
            }
            if (v82 >= 0xA)
            {
              if (v82 < 0x64)
              {
                v83 = &a00010203040506[2 * v82];
                *((_BYTE *)v10 + 17) = v83[1];
                v84 = *v83;
LABEL_154:
                *((_BYTE *)v10 + 16) = v84;
                v19 = (**v10)[1];
                goto LABEL_160;
              }
              *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2
                                                                      * (v82
                                                                                        - 100
                                                                                        * ((41 * v82) >> 12))];
              LODWORD(v82) = (41 * v82) >> 12;
            }
            v84 = v82 | 0x30;
            goto LABEL_154;
          }
          *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2 * (*v41 % 0x64u)];
          v56 = 3;
          LODWORD(v55) = (41 * v55) >> 12;
        }
        else
        {
          v56 = 1;
        }
        v76 = v55 | 0x30;
        goto LABEL_129;
      }
      v33();
      v34 = (a6 + a5);
      v35 = v10 + 76;
      if (*((char *)v10 + 631) < 0)
      {
        v36 = (unint64_t)v10[77];
        if (v36 >= v34)
        {
          v37 = (uint64_t (***)(void))*v10;
LABEL_65:
          v38 = (_QWORD *)*v35;
          goto LABEL_66;
        }
      }
      else
      {
        v36 = *((unsigned __int8 *)v10 + 631);
        if (v34 <= v36)
        {
          v37 = (uint64_t (***)(void))*v10;
          v38 = v10 + 76;
          goto LABEL_66;
        }
      }
      std::string::resize((std::string *)(v10 + 76), 2 * v36, 32);
      v37 = (uint64_t (***)(void))*v10;
      v38 = v10 + 76;
      if (*((char *)v10 + 631) < 0)
        goto LABEL_65;
LABEL_66:
      ((void (*)(uint64_t (***)(void), _QWORD *, unint64_t))(*v37)[1])(v37, v38, v34);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\"bytes\": [", 10);
      v57 = *(_QWORD *)(a2 + 8);
      v59 = *(_BYTE **)v57;
      v58 = *(_BYTE **)(v57 + 8);
      if (v59 == v58)
        goto LABEL_142;
      if (v59 != v58 - 1)
      {
        while (1)
        {
          v60 = *v59;
          if (*v59)
            break;
          ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
LABEL_70:
          ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, ", ", 2);
          if (++v59 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
            goto LABEL_79;
        }
        if (v60 >= 0xA)
        {
          if (v60 < 0x64)
          {
            v62 = &a00010203040506[2 * v60];
            *((_BYTE *)v10 + 17) = v62[1];
            v63 = *v62;
            v61 = 2;
LABEL_78:
            *((_BYTE *)v10 + 16) = v63;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v10)[1])(*v10, v10 + 2, v61);
            goto LABEL_70;
          }
          *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2 * (*v59 % 0x64u)];
          LODWORD(v60) = (41 * v60) >> 12;
          v61 = 3;
        }
        else
        {
          v61 = 1;
        }
        v63 = v60 | 0x30;
        goto LABEL_78;
      }
LABEL_79:
      v64 = *v59;
      if (!*v59)
      {
        ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
        goto LABEL_142;
      }
      if (v64 < 0xA)
      {
        v65 = 1;
LABEL_140:
        v78 = v64 | 0x30;
        goto LABEL_141;
      }
      if (v64 >= 0x64)
      {
        *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2 * (*v59 % 0x64u)];
        v65 = 3;
        LODWORD(v64) = (41 * v64) >> 12;
        goto LABEL_140;
      }
      v77 = &a00010203040506[2 * v64];
      *((_BYTE *)v10 + 17) = v77[1];
      v78 = *v77;
      v65 = 2;
LABEL_141:
      *((_BYTE *)v10 + 16) = v78;
      ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v10)[1])(*v10, v10 + 2, v65);
LABEL_142:
      ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "],\n", 3);
      v85 = v10 + 76;
      if (*((char *)v10 + 631) < 0)
        v85 = (_QWORD *)*v35;
      ((void (*)(void (***)(void), _QWORD *, unint64_t))(**v10)[1])(*v10, v85, v34);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v10)[1])(*v10, "\"subtype\": ", 11);
      v86 = *(_QWORD *)(a2 + 8);
      if (!*(_BYTE *)(v86 + 25))
      {
        v88 = (**v10)[1];
LABEL_158:
        v88();
        goto LABEL_159;
      }
      v87 = *(unsigned __int8 *)(v86 + 24);
      if (v87)
      {
        if (v87 >= 0xA)
        {
          if (v87 < 0x64)
          {
            v89 = &a00010203040506[2 * v87];
            *((_BYTE *)v10 + 17) = v89[1];
            v90 = *v89;
LABEL_157:
            *((_BYTE *)v10 + 16) = v90;
            v88 = (**v10)[1];
            goto LABEL_158;
          }
          *(_WORD *)((char *)v10 + 17) = *(_WORD *)&a00010203040506[2
                                                                  * (v87
                                                                                    - 100
                                                                                    * ((41 * v87) >> 12))];
          LODWORD(v87) = (41 * v87) >> 12;
        }
        v90 = v87 | 0x30;
        goto LABEL_157;
      }
      ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 48);
LABEL_159:
      ((void (*)(void (***)(void), uint64_t))***v10)(*v10, 10);
      v19 = (**v10)[1];
LABEL_160:
      v19();
LABEL_161:
      v29 = (uint64_t (*)(void))***v10;
      return (void (****)(void))v29();
    case 9:
      v30 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v30();
    default:
      return result;
  }
}

uint64_t sub_223997FD8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(char *)(a1 + 631) < 0)
  {
    operator delete(*(void **)(a1 + 608));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223998058(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5D5C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223998068(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5D5C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223998098(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t sub_2239980A8()
{
  return std::ostream::put();
}

uint64_t sub_2239980B0()
{
  return std::ostream::write();
}

void sub_2239980BC()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2239980D0(uint64_t result, uint64_t *a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  char v22;
  char v23;
  int v24;
  char *v26;
  uint64_t (*v27)(void);
  int v28;
  void *exception;
  char *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  uint64_t *v34;
  void *v35;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  std::string::size_type v40;
  char __str[8];
  std::string::size_type v42;
  char v43;

  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (!v4)
    return result;
  v7 = (_QWORD *)result;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = result + 90;
  do
  {
    if ((v3 & 1) != 0)
      v17 = (uint64_t *)*a2;
    else
      v17 = a2;
    v18 = *((unsigned __int8 *)v17 + v8);
    if (v12)
      v13 = *((_BYTE *)v17 + v8) & 0x3F | (v13 << 6);
    else
      v13 = (0xFFu >> byte_2246573A7[v18]) & v18;
    v12 = byte_2246573A7[16 * v12 + 256 + byte_2246573A7[v18]];
    if (v12 == 1)
    {
      v20 = *((_DWORD *)v7 + 158);
      if ((v20 - 1) < 2)
      {
        v8 -= v9 != 0;
        if (v20 != 1)
        {
          v12 = 0;
          v9 = 0;
          v11 = v10;
          goto LABEL_6;
        }
        v11 = v10 + 3;
        if (a3)
        {
          v21 = 102;
          *(_BYTE *)(v14 + v11) = 102;
          *(_WORD *)(v10 + v14 + 4) = 25702;
          v11 = v10 + 6;
          v22 = 117;
          v23 = 92;
        }
        else
        {
          v21 = -67;
          v22 = -65;
          v23 = -17;
        }
        *(_BYTE *)(v14 + v10) = v23;
        *(_BYTE *)(v14 + v10 + 1) = v22;
        *(_BYTE *)(v14 + v10 + 2) = v21;
        goto LABEL_48;
      }
      if (!v20)
      {
        v43 = 3;
        *(_DWORD *)__str = 0;
        snprintf(__str, 3uLL, "%.2X", v18);
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v36, v8);
        sub_223799B10("invalid UTF-8 byte at index ", &v36, &v37);
        sub_223996958(": 0x", &v37, &v38);
        if (v43 >= 0)
          v30 = __str;
        else
          v30 = *(char **)__str;
        if (v43 >= 0)
          v31 = v43;
        else
          v31 = v42;
        v32 = std::string::append(&v38, v30, v31);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v40 = v32->__r_.__value_.__r.__words[2];
        v39 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        sub_22379985C(316, (uint64_t)&v39, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24EC58AD0, (void (*)(void *))sub_2237999D4);
      }
      v12 = 1;
    }
    else
    {
      if (!v12)
      {
        switch(v13)
        {
          case 8u:
            v19 = 25180;
            goto LABEL_47;
          case 9u:
            v19 = 29788;
            goto LABEL_47;
          case 0xAu:
            v19 = 28252;
            goto LABEL_47;
          case 0xBu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
            goto LABEL_33;
          case 0xCu:
            v19 = 26204;
            goto LABEL_47;
          case 0xDu:
            v19 = 29276;
            goto LABEL_47;
          case 0x22u:
            v19 = 8796;
            goto LABEL_47;
          default:
            if (v13 == 92)
            {
              v19 = 23644;
LABEL_47:
              *(_WORD *)(v14 + v11) = v19;
              v11 += 2;
            }
            else
            {
LABEL_33:
              if (v13 > 0x7E)
                v24 = a3;
              else
                v24 = 0;
              if (v13 >= 0x20 && v24 == 0)
              {
                *(_BYTE *)(v14 + v11++) = *((_BYTE *)v17 + v8);
              }
              else
              {
                v26 = (char *)(v14 + v11);
                if (HIWORD(v13))
                {
                  result = snprintf(v26, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v13 >> 10) - 10304), v13 & 0x3FF | 0xDC00);
                  v11 += 12;
                }
                else
                {
                  result = snprintf(v26, 7uLL, "\\u%04x", v13);
                  v11 += 6;
                }
              }
            }
            break;
        }
LABEL_48:
        if ((unint64_t)(v11 - 500) <= 0xC)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v14, v11);
          v12 = 0;
          v11 = 0;
          v10 = 0;
          v9 = 0;
        }
        else
        {
          v12 = 0;
          v9 = 0;
          v10 = v11;
        }
        goto LABEL_6;
      }
      if ((a3 & 1) == 0)
        *(_BYTE *)(v14 + v11++) = *((_BYTE *)v17 + v8);
      ++v9;
    }
LABEL_6:
    ++v8;
    v15 = *((char *)a2 + 23);
    v3 = v15 >> 31;
    v16 = a2[1];
    if (v15 >= 0)
      v16 = *((unsigned __int8 *)a2 + 23);
  }
  while (v8 < v16);
  if (v12)
  {
    v28 = *((_DWORD *)v7 + 158);
    switch(v28)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v14, v10);
        v27 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 2:
        v27 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 0:
        v43 = 3;
        *(_DWORD *)__str = 0;
        v34 = (uint64_t *)*a2;
        if (v15 >= 0)
          v34 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v34 + v16 - 1));
        v35 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_22379985C(316, (uint64_t)&v39, (uint64_t)v35);
        __cxa_throw(v35, (struct type_info *)&unk_24EC58AD0, (void (*)(void *))sub_2237999D4);
      default:
        return result;
    }
    return v27();
  }
  if (v11)
  {
    v27 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
    return v27();
  }
  return result;
}

void sub_2239985B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (a35 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v36)
  {
LABEL_7:
    if (*(char *)(v37 - 81) < 0)
      operator delete(*(void **)(v37 - 104));
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v35);
  goto LABEL_7;
}

uint64_t sub_223998698(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  char *v5;
  unsigned int v6;
  unint64_t v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  v3 = a1 + 2;
  if ((v2 & 0x8000000000000000) != 0)
  {
    *v3 = 45;
    v2 = -(uint64_t)v2;
    if (v2 >= 0xA)
    {
      v9 = 4;
      v10 = v2;
      while (v10 > 0x63)
      {
        if (v10 <= 0x3E7)
        {
          v5 = &v3[v9];
          if (v2 < 0x64)
            goto LABEL_34;
          goto LABEL_30;
        }
        if (v10 >> 4 < 0x271)
          goto LABEL_22;
        v9 += 4;
        v8 = v10 >= 0x186A0;
        v10 /= 0x2710uLL;
        if (!v8)
        {
          v9 -= 3;
LABEL_22:
          v5 = &v3[v9 + 1];
          if (v2 < 0x64)
            goto LABEL_34;
          goto LABEL_30;
        }
      }
      v6 = v9 - 1;
LABEL_29:
      v5 = &v3[v6];
      if (v2 < 0x64)
        goto LABEL_34;
      do
      {
LABEL_30:
        v11 = v2 / 0x64;
        *((_WORD *)v5 - 1) = *(_WORD *)&a00010203040506[2 * (v2 % 0x64) + 200];
        v5 -= 2;
        v12 = v2 >> 4;
        v2 /= 0x64uLL;
      }
      while (v12 > 0x270);
      if (v11 < 0xA)
        goto LABEL_35;
      goto LABEL_32;
    }
    v5 = (char *)a1 + 18;
  }
  else
  {
    if (v2 < 0xA)
    {
      *((_BYTE *)a1 + 16) = v2 + 48;
      return (*(uint64_t (**)(_QWORD, _BYTE *, uint64_t))(*(_QWORD *)*a1 + 8))(*a1, v3, 1);
    }
    v6 = 4;
    v7 = v2;
    while (1)
    {
      if (v7 <= 0x63)
      {
        v5 = &v3[v6 - 2];
        if (v2 >= 0x64)
          goto LABEL_30;
        goto LABEL_34;
      }
      if (v7 <= 0x3E7)
        break;
      if (v7 >> 4 < 0x271)
        goto LABEL_29;
      v6 += 4;
      v8 = v7 >= 0x186A0;
      v7 /= 0x2710uLL;
      if (!v8)
      {
        v5 = &v3[v6 - 3];
        if (v2 >= 0x64)
          goto LABEL_30;
        goto LABEL_34;
      }
    }
    v5 = &v3[v6 - 1];
    if (v2 >= 0x64)
      goto LABEL_30;
  }
LABEL_34:
  v11 = v2;
  if (v2 >= 0xA)
  {
LABEL_32:
    *((_WORD *)v5 - 1) = *(_WORD *)&a00010203040506[2 * v11 + 200];
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
LABEL_35:
  *(v5 - 1) = v11 + 48;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t sub_2239988E4(_BYTE *a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  char v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;

  v2 = (uint64_t)a1;
  if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
  {
    a2 = -a2;
    *a1 = 45;
    v2 = (uint64_t)(a1 + 1);
    if (a2 == 0.0)
      goto LABEL_3;
  }
  else if (a2 == 0.0)
  {
LABEL_3:
    *(_WORD *)v2 = 11824;
    result = v2 + 3;
    *(_BYTE *)(v2 + 2) = 48;
    return result;
  }
  v16 = 0;
  sub_223998B50(v2, (int *)&v16 + 1, &v16, a2);
  v4 = SHIDWORD(v16);
  v5 = (int)v16 + (uint64_t)SHIDWORD(v16);
  if ((v16 & 0x80000000) == 0 && (int)v5 <= 15)
  {
    memset((void *)(v2 + SHIDWORD(v16)), 48, (int)v16);
    *(_WORD *)(v2 + v5) = 12334;
    return v2 + v5 + 2;
  }
  if ((v5 - 16) >= 0xFFFFFFF1)
  {
    v7 = v5;
    v8 = (_BYTE *)(v2 + v5);
    memmove(v8 + 1, v8, SHIDWORD(v16) - v7);
    *v8 = 46;
    return v4 + v2 + 1;
  }
  if ((_DWORD)v5 == 0 || v5 >= 0xFFFFFFFD)
  {
    v6 = -(int)v5;
    memmove((void *)(v2 + v6 + 2), (const void *)v2, SHIDWORD(v16));
    *(_WORD *)v2 = 11824;
    memset((void *)(v2 + 2), 48, v6);
    return v2 + v4 + v6 + 2;
  }
  if (HIDWORD(v16) == 1)
  {
    v9 = 1;
  }
  else
  {
    memmove((void *)(v2 + 2), (const void *)(v2 + 1), SHIDWORD(v16) - 1);
    *(_BYTE *)(v2 + 1) = 46;
    v9 = v4 + 1;
  }
  v10 = (_BYTE *)(v2 + v9);
  *v10 = 101;
  v11 = v5 - 1;
  if ((int)v5 >= 1)
    v12 = 43;
  else
    v12 = 45;
  if ((int)v5 - 1 < 0)
    v11 = 1 - v5;
  v10[1] = v12;
  if (v11 > 9)
  {
    if (v11 > 0x63)
    {
      v10[2] = v11 / 0x64 + 48;
      v15 = v11 % 0x64;
      v10[3] = (v15 / 0xAu) | 0x30;
      v10[4] = (v15 % 0xAu) | 0x30;
      v14 = 2;
      return (uint64_t)&v10[v14 + 3];
    }
    v10[2] = v11 / 0xAu + 48;
    v13 = (v11 % 0xAu) | 0x30;
  }
  else
  {
    v10[2] = 48;
    v13 = v11 + 48;
  }
  v10[3] = v13;
  v14 = 1;
  return (uint64_t)&v10[v14 + 3];
}

uint64_t sub_223998B50(uint64_t a1, int *a2, _DWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unsigned int v25;

  v4 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL;
  if (!(*(_QWORD *)&a4 >> 52))
  {
    v5 = 2 * v4;
    v6 = (2 * (*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL)) | 1;
    v7 = -1074;
    v8 = -1075;
LABEL_7:
    v10 = v5 - 1;
    v9 = v8;
    goto LABEL_8;
  }
  v7 = (*(_QWORD *)&a4 >> 52) - 1075;
  v5 = 2 * (v4 | 0x10000000000000);
  v6 = (2 * (*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000)) | 1;
  v8 = (*(_QWORD *)&a4 >> 52) - 1076;
  if (!(*(_QWORD *)&a4 >> 53) || v4)
  {
    v4 |= 0x10000000000000uLL;
    goto LABEL_7;
  }
  v9 = (*(_QWORD *)&a4 >> 52) - 53;
  v10 = 0x3FFFFFFFFFFFFFLL;
  v4 = 0x10000000000000;
LABEL_8:
  v11 = -v8;
  v12 = -4813693 - 78913 * v8;
  do
  {
    v13 = v6;
    v6 *= 2;
    ++v11;
    v12 += 78913;
  }
  while ((v6 & 0x8000000000000000) == 0);
  do
  {
    v14 = v4;
    v4 *= 2;
    v15 = --v7;
  }
  while ((v4 & 0x8000000000000000) == 0);
  v16 = v12 / 0x40000;
  if (v11 - 61 <= 0)
    v17 = v16;
  else
    v17 = v16 + 1;
  v18 = (char *)&unk_224657790 + 16 * ((int)((v17 + 307 + (((v17 + 307) >> 28) & 7)) << 16) >> 19);
  v19 = *(_QWORD *)v18;
  v20 = HIDWORD(*(_QWORD *)v18);
  v21 = *(_QWORD *)v18;
  v22 = v10 << (v9 + v11);
  v23 = v14 >> 31;
  v24 = v18 + 8;
  LODWORD(v18) = *((_DWORD *)v18 + 2);
  v25 = v6 & 0xFFFFFFFE;
  *a3 = -*((_DWORD *)v24 + 1);
  return sub_223998D40(a1, a2, a3, ((v21 * (unint64_t)HIDWORD(v22)) >> 32)+ v20 * (unint64_t)HIDWORD(v22)+ ((v20 * (unint64_t)v22) >> 32)+ ((((v19 * (unint64_t)v22) >> 32)+ (v20 * v22)+ (v21 * HIDWORD(v22))+ 0x80000000) >> 32)+ 1, ((_DWORD)v18 - v11 + 64), v20 * v23+ ((v21 * v23) >> 32)+ ((v20 * (unint64_t)(v4 & 0xFFFFFFFE)) >> 32)+ ((((v20 * (unint64_t)(v4 & 0xFFFFFFFE)) & 0xFFFFFFFE)+ ((v21 * (unint64_t)(v4 & 0xFFFFFFFE)) >> 32)+ (v21 * v23)+ 0x80000000) >> 32),
           ((_DWORD)v18 + v15 + 64),
           v21,
           v20 * (v13 >> 31)
         + ((v21 * (v13 >> 31)) >> 32)
         + ((v20 * (unint64_t)v25) >> 32)
         + ((((v20 * (unint64_t)v25) & 0xFFFFFFFE)
           + ((v21 * (unint64_t)v25) >> 32)
           + v21 * (v13 >> 31)
           + 0x80000000) >> 32)
         - 1,
           (int)v18 - v11 + 64);
}

uint64_t sub_223998D40(uint64_t result, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, int a10)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v10 = a9 - a4;
  v11 = a9 - a6;
  v12 = -a10;
  v13 = 1 << -(char)a10;
  v14 = a9 >> -(char)a10;
  v15 = (v13 - 1) & a9;
  if (v14 <= 0x3B9AC9FF)
  {
    if (v14 <= 0x5F5E0FF)
    {
      if (v14 <= 0x98967F)
      {
        if (v14 <= 0xF423F)
        {
          v18 = v14 >> 5;
          v19 = v14 >> 4;
          if (v14 <= 9)
            v20 = 1;
          else
            v20 = 10;
          if (v14 <= 9)
            v21 = 1;
          else
            v21 = 2;
          if (v14 <= 0x63)
            v22 = v20;
          else
            v22 = 100;
          if (v14 <= 0x63)
            v23 = v21;
          else
            v23 = 3;
          if (v14 <= 0x3E7)
            v24 = v22;
          else
            v24 = 1000;
          if (v14 <= 0x3E7)
            v25 = v23;
          else
            v25 = 4;
          if (v19 <= 0x270)
            v26 = v24;
          else
            v26 = 10000;
          if (v19 <= 0x270)
            v27 = v25;
          else
            v27 = 5;
          if (v18 > 0xC34)
            v16 = 100000;
          else
            v16 = v26;
          if (v18 <= 0xC34)
            v17 = v27;
          else
            v17 = 6;
        }
        else
        {
          v16 = 1000000;
          v17 = 7;
        }
      }
      else
      {
        v16 = 10000000;
        v17 = 8;
      }
    }
    else
    {
      v16 = 100000000;
      v17 = 9;
    }
  }
  else
  {
    v16 = 1000000000;
    v17 = 10;
  }
  v28 = -a6;
  v29 = a6 - a9;
  v30 = -a4;
  while (v17 > 0)
  {
    v31 = v14 / v16;
    v14 = v14 % v16;
    v32 = *a2;
    *a2 = v32 + 1;
    *(_BYTE *)(result + v32) = v31 + 48;
    --v17;
    v33 = (v14 << v12) + v15;
    if (v10 < v33)
    {
      v16 /= 0xAu;
    }
    else
    {
      *a3 += v17;
      v34 = (unint64_t)v16 << v12;
      if (v33 >= v11 || v10 - v33 < v34)
        return result;
      v36 = *a2 - 1;
      v37 = v15 + (v14 << v12) + v34;
      v38 = v30 - v37;
      v39 = a9;
      do
      {
        if (v37 >= v11 && v28 - v33 + v39 <= v29 + v37)
          break;
        --*(_BYTE *)(result + v36);
        if (v37 >= v11)
          break;
        v40 = v38 + v39;
        v39 -= v34;
        v37 += v34;
      }
      while (v40 >= v34);
    }
    if (v10 >= v33)
      return result;
  }
  v41 = 0;
  do
  {
    v42 = v10;
    v43 = v11;
    v44 = (10 * v15) >> v12;
    v15 = (10 * v15) & (v13 - 1);
    v45 = v44 + 48;
    v46 = *a2;
    *a2 = v46 + 1;
    *(_BYTE *)(result + v46) = v45;
    v10 = 10 * v42;
    v11 = 10 * v43;
    --v41;
  }
  while (10 * v42 < v15);
  *a3 += v41;
  if (v15 < v11 && 10 * v42 - v15 >= v13)
  {
    v47 = *a2 - 1;
    v48 = 10 * v43;
    v49 = -(uint64_t)v15;
    v50 = -10 * v43;
    v51 = v13 + v15;
    v52 = 10 * v42 - v13;
    do
    {
      if (v51 >= v11 && v48 + v49 <= v50 + v51)
        break;
      --*(_BYTE *)(result + v47);
      if (v51 >= v11)
        break;
      v53 = v52 + v49;
      v49 -= v13;
      v51 += v13;
    }
    while (v53 >= v13);
  }
  return result;
}

void sub_223999020(float32_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  _QWORD *v11;
  int v12;
  int v13;
  unsigned int *v14;
  int v15;
  int v16;
  uint64_t v17;
  float32x4_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t i;
  unsigned __int8 v31;
  float32x4_t v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v51;
  int v52;
  _QWORD *v53;
  unsigned int *v54;
  void *__p[4];
  __int128 v57;
  uint64_t *v58;
  _BYTE v59[24];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  __int128 v70;
  _QWORD v71[2];
  char v72;

  v11 = *(_QWORD **)(a5 + 16);
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v12 -= 1431655765 * ((v11[5] - v11[4]) >> 2);
      v13 -= 1431655765 * ((v11[19] - v11[18]) >> 2);
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  v71[1] = 0;
  v71[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v72 = 1;
  kdebug_trace();
  v14 = *(unsigned int **)(a5 + 16);
  if (v14)
  {
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v51 = v15;
      v52 = v16;
      v69 = 0;
      v70 = 0uLL;
      v17 = *((_QWORD *)v14 + 4);
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v53 = v14 + 8;
      sub_2239996F4((uint64_t)&v69, 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v14 + 5) - v17) >> 2));
      v19 = (_DWORD *)*((_QWORD *)v14 + 4);
      v20 = (_DWORD *)*((_QWORD *)v14 + 5);
      v54 = v14;
      if (v19 != v20)
        break;
LABEL_8:
      *((_QWORD *)v54 + 14) = *((_QWORD *)v54 + 13);
      v65 = 0;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      *(_OWORD *)&v59[8] = 0u;
      v60 = 0u;
      v57 = 0u;
      memset(__p, 0, sizeof(__p));
      v58 = v69;
      *(_OWORD *)v59 = v70;
      v70 = 0uLL;
      v69 = 0;
      sub_223CE0C6C((uint64_t)__p, a2, (uint64_t)v53, a7, a1, 0.5);
      sub_223CD8718(v53, (unsigned int **)v54 + 18, (int32x2_t **)v54 + 13);
      v22 = *((_QWORD *)v54 + 4);
      v21 = *((_QWORD *)v54 + 5);
      v24 = *((_QWORD *)v54 + 18);
      v23 = *((_QWORD *)v54 + 19);
      sub_22399984C(__p);
      v25 = v66;
      if (v66)
      {
        v26 = v67;
        if (v67 != v66)
        {
          do
            v26 = sub_22316F8F4(v26 - 48);
          while (v26 != v25);
          v25 = v66;
        }
        operator delete(v25);
      }
      if (v69)
        operator delete(v69);
      v15 = v51 - 1431655765 * ((unint64_t)(v21 - v22) >> 2);
      v16 = v52 - 1431655765 * ((unint64_t)(v23 - v24) >> 2);
      v14 = *(unsigned int **)v54;
      if (!*(_QWORD *)v54)
        goto LABEL_64;
    }
    while (1)
    {
      v27 = (*v19 & 0x7FFFFFFFu) < 0x7F800000;
      if ((*v19 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v27 = (v19[1] & 0x7FFFFFFFu) < 0x7F800000;
        if ((v19[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          v27 = (v19[2] & 0x7FFFFFFFu) < 0x7F800000;
      }
      if (!v27)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C);
        v28 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v29 = qword_255795648;
          for (i = qword_255795650; v29 != i; v29 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v29)(*(_QWORD *)(v29 + 8), "math::IsFinite(pos)", 19, "Converting nan value to voxel position", 38);
        }
        v31 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "math::IsFinite(pos)", 19, "Converting nan value to voxel position", 38);
      }
      v18.i64[0] = *(_QWORD *)v19;
      v18.i32[2] = v19[2];
      v32 = vmulq_n_f32(v18, COERCE_FLOAT(*(_QWORD *)(a4 + 148)));
      __p[0] = (void *)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v32.f32));
      LODWORD(__p[1]) = vcvtms_s32_f32(v32.f32[2]);
      v33 = sub_223CF25F4(a6, (int *)__p, 1, 8);
      v34 = v33;
      v35 = v70;
      if ((_QWORD)v70 != *((_QWORD *)&v70 + 1) << 6)
        goto LABEL_55;
      if ((uint64_t)v70 + 1 < 0)
        goto LABEL_69;
      if ((unint64_t)v70 > 0x3FFFFFFFFFFFFFFELL)
      {
        v36 = 0x7FFFFFFFFFFFFFFFLL;
        if ((unint64_t)v70 < 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_37;
        *(_QWORD *)&v70 = 0;
        v47 = v69;
        v48 = 0x3FFFFFFFFFFFFFFLL;
        v49 = 0;
        if (v33)
          goto LABEL_56;
LABEL_15:
        v47[v48] &= ~v49;
        v19 += 3;
        if (v19 == v20)
          goto LABEL_8;
      }
      else
      {
        v36 = *((_QWORD *)&v70 + 1) << 7;
        if (*((_QWORD *)&v70 + 1) << 7 <= ((unint64_t)v70 & 0xFFFFFFFFFFFFFFC0) + 64)
          v36 = (v70 & 0xFFFFFFFFFFFFFFC0) + 64;
        if ((unint64_t)v70 < v36)
        {
          if ((v36 & 0x8000000000000000) != 0)
LABEL_69:
            sub_2233DCD38();
LABEL_37:
          v37 = ((v36 - 1) >> 6) + 1;
          v38 = (uint64_t *)operator new(8 * v37);
          v39 = v69;
          v40 = (v35 - 1) >> 6;
          if (v35 < 0x41)
            v40 = 0;
          v38[v40] = 0;
          if (v35 > 0x3F || (v35 & 0x3F) != 0)
          {
            v41 = 0;
            v42 = 0;
            v43 = v38;
            v44 = v39;
            do
            {
              v45 = 1 << v41;
              if ((((unint64_t)*v44 >> v42) & 1) != 0)
                v46 = *v43 | v45;
              else
                v46 = *v43 & ~v45;
              *v43 = v46;
              v44 += v42 == 63;
              if (v42 == 63)
                v42 = 0;
              else
                ++v42;
              v43 += v41 == 63;
              if (v41 == 63)
                v41 = 0;
              else
                ++v41;
            }
            while (v42 != (v35 & 0x3F) || v44 != &v39[v35 >> 6]);
          }
          v69 = v38;
          *((_QWORD *)&v70 + 1) = v37;
          if (v39)
          {
            operator delete(v39);
            v35 = v70;
          }
        }
LABEL_55:
        *(_QWORD *)&v70 = v35 + 1;
        v47 = v69;
        v48 = v35 >> 6;
        v49 = 1 << v35;
        if (!v34)
          goto LABEL_15;
LABEL_56:
        v47[v48] |= v49;
        v19 += 3;
        if (v19 == v20)
          goto LABEL_8;
      }
    }
  }
LABEL_64:
  kdebug_trace();
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2245B9420;
  strcpy((char *)__p[0], "RslComputeSimplification");
  HIBYTE(v70) = 3;
  LODWORD(v69) = 5395024;
  sub_22391CC34((uint64_t *)__p, (uint64_t *)&v69, (uint64_t)v71);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return;
LABEL_68:
    operator delete(__p[0]);
    return;
  }
  operator delete(v69);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_68;
}

void sub_223999684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 129) < 0)
    operator delete(*(void **)(v20 - 152));
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2239996F4(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_2233DCD38();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

void **sub_2239997F4(void **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;

  v2 = (uint64_t *)*a1;
  if (*a1)
  {
    v3 = (uint64_t *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_22316F8F4(v3 - 48);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_22399984C(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  void *v11;
  void *v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  void *v18;

  v2 = a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = a1[9];
  if (v5)
    operator delete(v5);
  v6 = a1[6];
  if (v6)
    operator delete(v6);
  v7 = (char *)a1[3];
  if (v7)
  {
    v8 = (char *)a1[4];
    v9 = a1[3];
    if (v8 != v7)
    {
      v10 = (char *)a1[4];
      do
      {
        v12 = (void *)*((_QWORD *)v10 - 3);
        v10 -= 24;
        v11 = v12;
        if (v12)
        {
          *((_QWORD *)v8 - 2) = v11;
          operator delete(v11);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = a1[3];
    }
    a1[4] = v7;
    operator delete(v9);
  }
  v13 = (char *)*a1;
  if (*a1)
  {
    v14 = (char *)a1[1];
    v15 = *a1;
    if (v14 != v13)
    {
      v16 = (char *)a1[1];
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v14 - 2) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = *a1;
    }
    a1[1] = v13;
    operator delete(v15);
  }
  return a1;
}

void sub_223999954(uint64_t a1, uint64_t *a2, int a3)
{
  unsigned __int8 v3;
  int v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD **v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _DWORD *v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  void *v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  size_t v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD v100[3];
  int v101;
  const char *v102;
  int v103;
  const char *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  void *object;
  void *v109[2];
  __int128 v110;
  void *__p[2];
  unint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;

  if (!*(_BYTE *)(a1 + 108))
  {
    v17 = *(_DWORD **)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v17 >= v16)
    {
      v20 = (_DWORD **)(a1 + 8);
      v21 = *(_DWORD **)(a1 + 8);
      v22 = 0xAAAAAAAAAAAAAAABLL * (v17 - v21) + 1;
      if (v22 > 0x1555555555555555)
        sub_22316E078();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)v21) >> 2);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0xAAAAAAAAAAAAAAALL)
        v24 = 0x1555555555555555;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 > 0x1555555555555555)
          goto LABEL_138;
        v25 = (char *)operator new(12 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[4 * (v17 - v21)];
      *(_QWORD *)v26 = *a2;
      *((_DWORD *)v26 + 2) = *((_DWORD *)a2 + 2);
      v19 = v26 + 12;
      if (v17 != v21)
      {
        do
        {
          v27 = *(_QWORD *)(v17 - 3);
          v17 -= 3;
          v28 = v17[2];
          *(_QWORD *)(v26 - 12) = v27;
          v26 -= 12;
          *((_DWORD *)v26 + 2) = v28;
        }
        while (v17 != v21);
        v17 = *v20;
      }
      *(_QWORD *)(a1 + 8) = v26;
      *(_QWORD *)(a1 + 16) = v19;
      *(_QWORD *)(a1 + 24) = &v25[12 * v24];
      if (v17)
        operator delete(v17);
    }
    else
    {
      v18 = *a2;
      v17[2] = *((_DWORD *)a2 + 2);
      *(_QWORD *)v17 = v18;
      v19 = v17 + 3;
    }
    *(_QWORD *)(a1 + 16) = v19;
    v30 = *(char **)(a1 + 40);
    v29 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v30 < v29)
    {
      *(_DWORD *)v30 = a3;
      v31 = (uint64_t)(v30 + 4);
LABEL_49:
      *(_QWORD *)(a1 + 40) = v31;
      return;
    }
    v32 = *(char **)(a1 + 32);
    v33 = (v30 - v32) >> 2;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 62)
      sub_22316E078();
    v35 = v29 - (_QWORD)v32;
    if (v35 >> 1 > v34)
      v34 = v35 >> 1;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
      v36 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (!v36)
    {
      v37 = 0;
      v38 = (_DWORD *)(4 * v33);
      v39 = 0;
      *(_DWORD *)(4 * v33) = a3;
      v31 = 4 * v33 + 4;
      v40 = v30 - v32;
      if (v30 == v32)
        goto LABEL_47;
      goto LABEL_41;
    }
    if (!(v36 >> 62))
    {
      v37 = operator new(4 * v36);
      v38 = &v37[4 * v33];
      v39 = &v37[4 * v36];
      *v38 = a3;
      v31 = (uint64_t)(v38 + 1);
      v40 = v30 - v32;
      if (v30 == v32)
      {
LABEL_47:
        *(_QWORD *)(a1 + 32) = v38;
        *(_QWORD *)(a1 + 40) = v31;
        *(_QWORD *)(a1 + 48) = v39;
        if (v32)
          operator delete(v32);
        goto LABEL_49;
      }
LABEL_41:
      v41 = v40 - 4;
      if (v41 < 0x2C)
        goto LABEL_150;
      if ((unint64_t)(v32 - v37) < 0x20)
        goto LABEL_150;
      v42 = (v41 >> 2) + 1;
      v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
      v44 = &v30[-v43];
      v38 = (_DWORD *)((char *)v38 - v43);
      v45 = &v37[4 * v33 - 16];
      v46 = v30 - 16;
      v47 = v42 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v48 = *(_OWORD *)v46;
        *(v45 - 1) = *((_OWORD *)v46 - 1);
        *v45 = v48;
        v45 -= 2;
        v46 -= 32;
        v47 -= 8;
      }
      while (v47);
      v30 = v44;
      if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_150:
        do
        {
          v49 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *--v38 = v49;
        }
        while (v30 != v32);
      }
      goto LABEL_47;
    }
LABEL_138:
    sub_223174E94();
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_223195728((uint64_t)&unk_255789280, "cv3d.recon.vlm_sb", 0x11uLL, "Adding edge after boundary is completed", 0x27uLL);
  sub_22399A3E8(&v107);
  if (**(int **)(v107 + 56) <= 5)
  {
    v4 = *(unsigned __int8 *)(v107 + 72);
    v5 = sub_22322F254(v107, "OSLogSurrogateAppender", 1, 0);
    if (v4 || v5 != 0)
    {
      v7 = v5;
      v100[0] = &v107;
      v100[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v100[2] = std::chrono::system_clock::now().__d_.__rep_;
      v101 = 5;
      v102 = "unknown file";
      v103 = 184;
      v105 = 0;
      v106 = 0;
      v104 = "unknown function";
      v8 = v107;
      v9 = v107 + 16;
      if (*(char *)(v107 + 39) < 0)
      {
        v11 = *(const char **)(v107 + 16);
        v10 = *(_QWORD *)(v107 + 24);
        v50 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v50 & 1) != 0)
          goto LABEL_52;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v107 + 39);
        v11 = (const char *)(*(_QWORD *)v100[0] + 16);
        v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v12 & 1) != 0)
          goto LABEL_52;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v110 && SHIBYTE(v109[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_52:
      if (byte_255788F57 >= 0)
        v51 = (const char *)&xmmword_255788F40;
      else
        v51 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v52 = byte_255788F57;
      else
        v52 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v51, v11);
      v53 = v109;
      if (v52 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v52 >= 0x17)
      {
        v54 = v7;
        v55 = v11;
        v56 = v8;
        v57 = v4;
        v58 = v9;
        v59 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v52 | 7) != 0x17)
          v59 = v52 | 7;
        v60 = v59 + 1;
        v53 = operator new(v59 + 1);
        v109[1] = (void *)v52;
        *(_QWORD *)&v110 = v60 | 0x8000000000000000;
        v109[0] = v53;
        v9 = v58;
        v4 = v57;
        v8 = v56;
        v11 = v55;
        v7 = v54;
      }
      else
      {
        BYTE7(v110) = v52;
        if (!v52)
        {
LABEL_66:
          *((_BYTE *)v53 + v52) = 0;
          BYTE8(v110) = 1;
          v61 = __p;
          if (v10 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v10 >= 0x17)
          {
            v62 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17)
              v62 = v10 | 7;
            v63 = v62 + 1;
            v61 = operator new(v62 + 1);
            __p[1] = (void *)v10;
            v112 = v63 | 0x8000000000000000;
            __p[0] = v61;
          }
          else
          {
            HIBYTE(v112) = v10;
            if (!v10)
              goto LABEL_74;
          }
          memmove(v61, v11, v10);
LABEL_74:
          *((_BYTE *)v61 + v10) = 0;
          v113 = 1;
          v64 = object;
          if (SHIBYTE(v112) < 0)
            operator delete(__p[0]);
          if (BYTE8(v110) && SBYTE7(v110) < 0)
            operator delete(v109[0]);
          if (object)
            os_release(object);
          if (v7 && *(_QWORD *)(v7 + 24))
          {
            v65 = _os_log_pack_size();
            v66 = (std::__shared_weak_count_vtbl *)operator new(v65, (std::align_val_t)8uLL);
            v67 = (std::__shared_weak_count *)operator new();
            v68 = v67;
            v67->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v67->__shared_owners_;
            v67->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v67->__shared_weak_owners_ = 0;
            v67[1].__vftable = v66;
            object = v66;
            v109[0] = v66;
            v109[1] = v67;
            do
              v70 = __ldxr(p_shared_owners);
            while (__stxr(v70 + 1, p_shared_owners));
            v110 = 0uLL;
            __p[0] = 0;
            do
              v71 = __ldaxr(p_shared_owners);
            while (__stlxr(v71 - 1, p_shared_owners));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v68);
            }
            v72 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v73 = operator new();
            v74 = *(unsigned __int8 *)(v8 + 39);
            if ((v74 & 0x80u) == 0)
              v75 = v9;
            else
              v75 = *(_QWORD *)(v8 + 16);
            if ((v74 & 0x80u) != 0)
              v74 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)v73 = v72;
            *(_OWORD *)(v73 + 8) = *(_OWORD *)v109;
            v109[0] = 0;
            v109[1] = 0;
            *(_OWORD *)(v73 + 24) = v110;
            v110 = 0uLL;
            *(_QWORD *)(v73 + 40) = v75;
            *(_QWORD *)(v73 + 48) = v74;
            *(_BYTE *)(v73 + 56) = 16;
            v114 = 0;
            v115 = v73;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v115);
            v76 = v115;
            v115 = 0;
            if (v76)
            {
              v77 = *(std::__shared_weak_count **)(v76 + 32);
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              v80 = *(std::__shared_weak_count **)(v76 + 16);
              if (v80)
              {
                v81 = (unint64_t *)&v80->__shared_owners_;
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              MEMORY[0x227684CE8](v76, 0x10F0C40B62ED6C6);
              v83 = v114;
              v114 = 0;
              if (v83)
              {
                v84 = *(std::__shared_weak_count **)(v83 + 32);
                if (v84)
                {
                  v85 = (unint64_t *)&v84->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (!v86)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                v87 = *(std::__shared_weak_count **)(v83 + 16);
                if (v87)
                {
                  v88 = (unint64_t *)&v87->__shared_owners_;
                  do
                    v89 = __ldaxr(v88);
                  while (__stlxr(v89 - 1, v88));
                  if (!v89)
                  {
                    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                    std::__shared_weak_count::__release_weak(v87);
                  }
                }
                MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
              }
            }
            v90 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
            if (*((_QWORD *)&v110 + 1))
            {
              v91 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
            v93 = (std::__shared_weak_count *)v109[1];
            if (v109[1])
            {
              v94 = (unint64_t *)((char *)v109[1] + 8);
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
          }
          else
          {
            os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
            LOWORD(object) = 0;
            v96 = (void *)_os_log_send_and_compose_impl();
            if (v96)
              free(v96);
          }
          if (v4)
          {
            sub_22322C138((uint64_t)v100, "Adding edge after boundary is completed");
            sub_223182C08((uint64_t)v100);
          }
          sub_223182C08((uint64_t)v100);
          v97 = v106;
          if (v106)
          {
            v98 = (unint64_t *)&v106->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          return;
        }
      }
      memmove(v53, v51, v52);
      goto LABEL_66;
    }
  }
}

void sub_22399A2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22399A314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v3 - 96));
  sub_22319A054((uint64_t *)(v3 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399A348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399A374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399A390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399A3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22399A3E8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&unk_2540CCAB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_2540CCAB8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCAB0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release((__guard *)&unk_2540CCAB8);
  }
  *a1 = qword_2540CCAB0;
}

void sub_22399A484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort((__guard *)&unk_2540CCAB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort((__guard *)&unk_2540CCAB8);
  _Unwind_Resume(a1);
}

void sub_22399A4DC(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v2;
  int v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  unsigned __int8 v11;
  int *v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  const char *v20;
  size_t v21;
  void *v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD v69[3];
  int v70;
  const char *v71;
  int v72;
  const char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  void *object;
  void *v78[2];
  __int128 v79;
  void *__p[2];
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;

  if (*(_BYTE *)(a1 + 108))
  {
    v2 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&unk_255789280, "cv3d.recon.vlm_sb", 0x11uLL, "Completing boundary more than once", 0x22uLL);
    sub_22399A3E8(&v76);
    if (**(int **)(v76 + 56) <= 5)
    {
      v3 = *(unsigned __int8 *)(v76 + 72);
      v4 = sub_22322F254(v76, "OSLogSurrogateAppender", 1, 0);
      if (v3 || v4 != 0)
      {
        v6 = v4;
        v69[0] = &v76;
        v69[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v69[2] = std::chrono::system_clock::now().__d_.__rep_;
        v70 = 5;
        v71 = "unknown file";
        v72 = 194;
        v74 = 0;
        v75 = 0;
        v73 = "unknown function";
        v7 = v76;
        v8 = v76 + 16;
        if (*(char *)(v76 + 39) < 0)
        {
          v10 = *(const char **)(v76 + 16);
          v9 = *(_QWORD *)(v76 + 24);
          v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v19 & 1) != 0)
            goto LABEL_22;
        }
        else
        {
          v9 = *(unsigned __int8 *)(v76 + 39);
          v10 = (const char *)(*(_QWORD *)v69[0] + 16);
          v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v11 & 1) != 0)
            goto LABEL_22;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&object);
          sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
          if ((_BYTE)v79 && SHIBYTE(v78[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_22:
        if (byte_255788F57 >= 0)
          v20 = (const char *)&xmmword_255788F40;
        else
          v20 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v21 = byte_255788F57;
        else
          v21 = *((_QWORD *)&xmmword_255788F40 + 1);
        object = os_log_create(v20, v10);
        v22 = v78;
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v21 >= 0x17)
        {
          v23 = v6;
          v24 = v10;
          v25 = v7;
          v26 = v3;
          v27 = v8;
          v28 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v28 = v21 | 7;
          v29 = v28 + 1;
          v22 = operator new(v28 + 1);
          v78[1] = (void *)v21;
          *(_QWORD *)&v79 = v29 | 0x8000000000000000;
          v78[0] = v22;
          v8 = v27;
          v3 = v26;
          v7 = v25;
          v10 = v24;
          v6 = v23;
        }
        else
        {
          BYTE7(v79) = v21;
          if (!v21)
          {
LABEL_36:
            *((_BYTE *)v22 + v21) = 0;
            BYTE8(v79) = 1;
            v30 = __p;
            if (v9 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v9 >= 0x17)
            {
              v31 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v9 | 7) != 0x17)
                v31 = v9 | 7;
              v32 = v31 + 1;
              v30 = operator new(v31 + 1);
              __p[1] = (void *)v9;
              v81 = v32 | 0x8000000000000000;
              __p[0] = v30;
            }
            else
            {
              HIBYTE(v81) = v9;
              if (!v9)
                goto LABEL_44;
            }
            memmove(v30, v10, v9);
LABEL_44:
            *((_BYTE *)v30 + v9) = 0;
            v82 = 1;
            v33 = object;
            if (SHIBYTE(v81) < 0)
              operator delete(__p[0]);
            if (BYTE8(v79) && SBYTE7(v79) < 0)
              operator delete(v78[0]);
            if (object)
              os_release(object);
            if (v6 && *(_QWORD *)(v6 + 24))
            {
              v34 = _os_log_pack_size();
              v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
              v36 = (std::__shared_weak_count *)operator new();
              v37 = v36;
              v36->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v36->__shared_owners_;
              v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v36->__shared_weak_owners_ = 0;
              v36[1].__vftable = v35;
              object = v35;
              v78[0] = v35;
              v78[1] = v36;
              do
                v39 = __ldxr(p_shared_owners);
              while (__stxr(v39 + 1, p_shared_owners));
              v79 = 0uLL;
              __p[0] = 0;
              do
                v40 = __ldaxr(p_shared_owners);
              while (__stlxr(v40 - 1, p_shared_owners));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v37);
              }
              v41 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v42 = operator new();
              v43 = *(unsigned __int8 *)(v7 + 39);
              if ((v43 & 0x80u) == 0)
                v44 = v8;
              else
                v44 = *(_QWORD *)(v7 + 16);
              if ((v43 & 0x80u) != 0)
                v43 = *(_QWORD *)(v7 + 24);
              *(_QWORD *)v42 = v41;
              *(_OWORD *)(v42 + 8) = *(_OWORD *)v78;
              v78[0] = 0;
              v78[1] = 0;
              *(_OWORD *)(v42 + 24) = v79;
              v79 = 0uLL;
              *(_QWORD *)(v42 + 40) = v44;
              *(_QWORD *)(v42 + 48) = v43;
              *(_BYTE *)(v42 + 56) = 16;
              v83 = 0;
              v84 = v42;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v84);
              v45 = v84;
              v84 = 0;
              if (v45)
              {
                v46 = *(std::__shared_weak_count **)(v45 + 32);
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v49 = *(std::__shared_weak_count **)(v45 + 16);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
                v52 = v83;
                v83 = 0;
                if (v52)
                {
                  v53 = *(std::__shared_weak_count **)(v52 + 32);
                  if (v53)
                  {
                    v54 = (unint64_t *)&v53->__shared_owners_;
                    do
                      v55 = __ldaxr(v54);
                    while (__stlxr(v55 - 1, v54));
                    if (!v55)
                    {
                      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                      std::__shared_weak_count::__release_weak(v53);
                    }
                  }
                  v56 = *(std::__shared_weak_count **)(v52 + 16);
                  if (v56)
                  {
                    v57 = (unint64_t *)&v56->__shared_owners_;
                    do
                      v58 = __ldaxr(v57);
                    while (__stlxr(v58 - 1, v57));
                    if (!v58)
                    {
                      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                      std::__shared_weak_count::__release_weak(v56);
                    }
                  }
                  MEMORY[0x227684CE8](v52, 0x10F0C40B62ED6C6);
                }
              }
              v59 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
              if (*((_QWORD *)&v79 + 1))
              {
                v60 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              v62 = (std::__shared_weak_count *)v78[1];
              if (v78[1])
              {
                v63 = (unint64_t *)((char *)v78[1] + 8);
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
            }
            else
            {
              os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v65 = (void *)_os_log_send_and_compose_impl();
              if (v65)
                free(v65);
            }
            if (v3)
            {
              sub_22322C138((uint64_t)v69, "Completing boundary more than once");
              sub_223182C08((uint64_t)v69);
            }
            sub_223182C08((uint64_t)v69);
            v66 = v75;
            if (v75)
            {
              v67 = (unint64_t *)&v75->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            return;
          }
        }
        memmove(v22, v20, v21);
        goto LABEL_36;
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 108) = 1;
    v14 = *(int **)(a1 + 8);
    v15 = *(int **)(a1 + 16);
    if (v14 == v15)
    {
      v17 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      do
      {
        v16 = sub_2239942A0(a2, v14);
        if (!v16)
          sub_223198218("unordered_map::at: key not found");
        sub_2236928DC((void **)(a1 + 56), (uint64_t *)((char *)v16 + 44));
        v14 += 3;
      }
      while (v14 != v15);
      v14 = *(int **)(a1 + 8);
      v17 = *(_QWORD *)(a1 + 16);
    }
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v14) >> 2);
    if (v18 != (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
    }
    *(float *)(a1 + 104) = sub_22399AE18((_QWORD *)a1, 0, v18 - 1, a2);
  }
}

void sub_22399AD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22399AD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v3 - 96));
  sub_22319A054((uint64_t *)(v3 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399AD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399ADA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399ADC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399ADD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

float sub_22399AE18(_QWORD *a1, unsigned int a2, int a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  float v26;
  uint64_t v28;
  int v29;

  v8 = a1[1];
  v9 = a1[2];
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
  if (v10 != (uint64_t)(a1[5] - a1[4]) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_28;
    }
    v8 = a1[1];
    v9 = a1[2];
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
  }
  if ((_DWORD)v10)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
    if (v11 != (uint64_t)(a1[5] - a1[4]) >> 2)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_28;
      }
      v8 = a1[1];
      v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v8) >> 2);
    }
    v12 = v11;
    if (v11 > a2)
      goto LABEL_11;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      v8 = a1[1];
      v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v8) >> 2);
LABEL_11:
      v13 = (uint64_t *)(v8 + 12 * (a2 % v12));
      v14 = *v13;
      v29 = *((_DWORD *)v13 + 2);
      v28 = v14;
      v15 = sub_2239942A0(a4, (int *)&v28);
      if (v15)
      {
        v16 = *((float *)v15 + 11);
        v17 = *((float *)v15 + 12);
        v18 = 0.0;
        v19 = a2;
        while (1)
        {
          if (v19 == a3)
            v20 = a2;
          else
            v20 = (v19 + 1) % v11;
          if (v19 == a3)
            v19 = a2;
          else
            v19 = (v19 + 1) % v11;
          v21 = a1[1];
          v22 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v21) >> 2);
          if (v22 <= v20)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_28;
            }
            v21 = a1[1];
            v22 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v21) >> 2);
          }
          v23 = (uint64_t *)(v21 + 12 * (v20 % v22));
          v24 = *v23;
          v29 = *((_DWORD *)v23 + 2);
          v28 = v24;
          v25 = sub_2239942A0(a4, (int *)&v28);
          if (!v25)
            break;
          v26 = v16 * *((float *)v25 + 12);
          v16 = *((float *)v25 + 11);
          v18 = v18 + (float)((float)(v26 - (float)(v17 * v16)) * 0.5);
          v17 = *((float *)v25 + 12);
          if (v19 == a2)
            return v18;
        }
      }
      sub_223198218("unordered_map::at: key not found");
    }
LABEL_28:
    abort();
  }
  return 0.0;
}

uint64_t sub_22399B0EC(_QWORD *a1, float32x2_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  float32x2_t v22;
  float32x2_t v24;
  float32x2_t v25[2];
  int v26[4];
  int v27[4];

  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 2);
  if (v10 != (uint64_t)(a1[5] - a1[4]) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_24:
      abort();
    }
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 2);
  }
  v11 = v10;
  if (!(_DWORD)v10)
    return 0;
  v12 = 0;
  while (1)
  {
    v13 = a1[1];
    v14 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v13) >> 2);
    if (v14 <= v12)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_24;
      }
      v13 = a1[1];
      v14 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v13) >> 2);
    }
    v15 = (uint64_t *)(v13 + 12 * (v12 % v14));
    v16 = *v15;
    v27[2] = *((_DWORD *)v15 + 2);
    *(_QWORD *)v27 = v16;
    v17 = (uint64_t *)(v13 + 12 * (++v12 % v14));
    v18 = *v17;
    v26[2] = *((_DWORD *)v17 + 2);
    *(_QWORD *)v26 = v18;
    if ((v16 != *(_QWORD *)a3 || v27[2] != *(_DWORD *)(a3 + 8))
      && (v26[0] != *(_DWORD *)a3 || *(_QWORD *)&v26[1] != *(_QWORD *)(a3 + 4))
      && ((_DWORD)v16 != *(_DWORD *)a4 || *(_QWORD *)&v27[1] != *(_QWORD *)(a4 + 4))
      && (v26[0] != *(_DWORD *)a4 || *(_QWORD *)&v26[1] != *(_QWORD *)(a4 + 4)))
    {
      v19 = sub_2239942A0(a5, v27);
      if (!v19 || (v20 = v19, (v21 = sub_2239942A0(a5, v26)) == 0))
        sub_223198218("unordered_map::at: key not found");
      v22 = *(float32x2_t *)((char *)v21 + 44);
      v25[0] = *(float32x2_t *)((char *)v20 + 44);
      v25[1] = v22;
      if (sub_22369F3FC(a2, v25, &v24, 0))
        return 1;
    }
    if (v11 == v12)
      return 0;
  }
}

float sub_22399B380(_QWORD *a1, unsigned int a2, int a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  float32x2_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  float32x2_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  float32x2_t v27;
  float v28;
  unsigned int v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float v34;
  float v35;
  float v36;
  float32x2_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  float32x2_t v52;
  uint64_t v53;
  int v54;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2);
  if (v8 != (uint64_t)(a1[5] - a1[4]) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_46;
    }
    v6 = a1[1];
    v7 = a1[2];
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2);
  }
  v9 = a2;
  if (a2 != a3)
    v9 = (a2 + 1) % v8;
  v10 = a2;
  if (v9 != a3)
    v10 = (v9 + 1) % v8;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2);
  if (v11 <= a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_46;
    }
    v6 = a1[1];
    v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 2);
  }
  v12 = (uint64_t *)(v6 + 12 * (a2 % v11));
  v13 = *v12;
  v54 = *((_DWORD *)v12 + 2);
  v53 = v13;
  v14 = sub_2239942A0(a4, (int *)&v53);
  if (!v14)
    goto LABEL_45;
  v15 = *(float32x2_t *)((char *)v14 + 44);
  v16 = a1[1];
  v17 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v16) >> 2);
  if (v17 <= v9)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_46;
    }
    v16 = a1[1];
    v17 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v16) >> 2);
  }
  v18 = (uint64_t *)(v16 + 12 * (v9 % v17));
  v19 = *v18;
  v54 = *((_DWORD *)v18 + 2);
  v53 = v19;
  v20 = sub_2239942A0(a4, (int *)&v53);
  if (!v20)
    goto LABEL_45;
  v21 = *(float32x2_t *)((char *)v20 + 44);
  v22 = a1[1];
  v23 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v22) >> 2);
  if (v23 > v10)
    goto LABEL_19;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
  {
LABEL_46:
    abort();
  }
  v22 = a1[1];
  v23 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v22) >> 2);
LABEL_19:
  v24 = (uint64_t *)(v22 + 12 * (v10 % v23));
  v25 = *v24;
  v54 = *((_DWORD *)v24 + 2);
  v53 = v25;
  v26 = sub_2239942A0(a4, (int *)&v53);
  if (!v26)
LABEL_45:
    sub_223198218("unordered_map::at: key not found");
  v27 = *(float32x2_t *)((char *)v26 + 44);
  v28 = 0.0;
  while (1)
  {
    v29 = v9;
    v9 = v10;
    v30 = vsub_f32(v15, v21);
    v31 = (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1);
    v31.f32[0] = 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v30, v30), v31, v30, 1).f32[0]);
    v32 = vmul_n_f32(v30, v31.f32[0]);
    v33 = vsub_f32(v27, v21);
    v52 = vmul_n_f32(v33, 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v33, v33), (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1), v33, 1).f32[0]));
    v34 = vmla_lane_f32(vmul_f32(v32, v52), vmul_lane_f32(v31, v30, 1), v52, 1).f32[0];
    if (v34 <= 1.0)
      v35 = v34;
    else
      v35 = 1.0;
    if (v35 < -1.0)
      v35 = -1.0;
    v36 = acosf(v35) * 57.296;
    v37 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v32), v52);
    LODWORD(v38) = vsub_f32(v37, (float32x2_t)vdup_lane_s32((int32x2_t)v37, 1)).u32[0];
    v39 = v36 + -180.0;
    v40 = 180.0 - v36;
    v41 = vabds_f32(90.0, v36);
    if (v41 >= v40)
      v41 = v40;
    if (v38 <= 0.0)
      v41 = v39;
    v42 = v41 / 90.0;
    if (v42 < 0.0)
      v42 = v42 + v42;
    v28 = v28 + (float)(v42 * v42);
    if (v29 == a2)
      return v28;
    if (v10 == a3)
      v43 = a2;
    else
      v43 = (v10 + 1) % v8;
    if (v10 == a3)
      v10 = a2;
    else
      v10 = (v10 + 1) % v8;
    v44 = a1[1];
    v45 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v44) >> 2);
    if (v45 <= v43)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_46;
      }
      v44 = a1[1];
      v45 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v44) >> 2);
    }
    v46 = (uint64_t *)(v44 + 12 * (v43 % v45));
    v47 = *v46;
    v54 = *((_DWORD *)v46 + 2);
    v53 = v47;
    v48 = sub_2239942A0(a4, (int *)&v53);
    if (!v48)
      goto LABEL_45;
    v15 = v21;
    v21 = v27;
    v27 = *(float32x2_t *)((char *)v48 + 44);
  }
}

uint64_t sub_22399B844(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  float v8;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  unsigned int v30;
  unsigned int v31;
  float v32;
  float v33;
  _QWORD *v34;
  unint64_t v35;
  float32x2_t *v36;
  float32x2_t v37;
  uint64_t *v38;
  unsigned int v39;
  float32x2_t v40;
  float v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t i;
  unsigned __int8 v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int *v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t j;
  unsigned __int8 v67;
  unsigned int v68;
  int *v69;
  int v70;
  int v71;
  int v72;
  int8x8_t v75;
  unint64_t v76;
  uint8x8_t v77;
  uint64_t v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  float32x2_t v88;
  uint64_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float v95;
  float v96;
  int32x2_t v98;
  float32x2_t v99;
  float v100;
  float32x2_t v101;
  float v102;
  unint64_t v103;
  float v104;
  int v105;
  int v106;
  char *v107;
  uint64_t v108;
  char *v109;
  int64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  int64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  int v127;
  char *v128;
  char *v129;
  char *v130;
  int64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  unsigned int *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _OWORD *v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  unsigned int v147;
  char *v150;
  char *v151;
  int64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _BYTE *v157;
  char *v158;
  char *v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  _OWORD *v164;
  char *v165;
  uint64_t v166;
  __int128 v167;
  int v168;
  uint64_t v169;
  float v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t *v177;
  float32x2_t v178;
  uint64_t v179;
  unint64_t v180;
  unsigned int v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  _BOOL4 v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  float v189;
  float v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unsigned int v194;
  int v195;
  uint64_t *v196;
  unsigned int v197;
  uint64_t v198;
  int8x8_t v199;
  unint64_t v200;
  uint8x8_t v201;
  uint64_t v202;
  uint64_t **v203;
  uint64_t *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  float32x2_t v208;
  uint64_t v209;
  unint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  _BOOL4 v215;
  float32x2_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t *v223;
  float32x2_t v224;
  uint64_t *v225;
  uint64_t v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  int *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  BOOL v239;
  uint64_t *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int *v249;
  _DWORD *v250;
  float v251;
  float v252;
  int v253;
  float v254;
  int v255;
  unint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  int v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  int v266;
  void *__p;
  char *v268;
  char *v269;
  _QWORD *v270[2];
  float32x2_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  int v276;

  v8 = *(float *)(a1 + 104);
  if (v8 < 0.0 || v8 < 2.0)
    return 0;
  v15 = (_QWORD *)a1;
  v17 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 16);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 2);
  if (v18 != (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_373;
    }
    v17 = v15[1];
    v16 = v15[2];
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 2);
  }
  if (v18 < 0xB)
    return 0;
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 2);
  if (v21 != (uint64_t)(v15[5] - v15[4]) >> 2)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[2] - v15[1]) >> 2);
      goto LABEL_14;
    }
LABEL_373:
    abort();
  }
LABEL_14:
  v251 = sub_22399B380(v15, 0, v21 - 1, a6);
  v270[0] = a8;
  v270[1] = a7;
  __p = 0;
  v268 = 0;
  v269 = 0;
  v22 = v15[1];
  v23 = v15[2];
  v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 2);
  v25 = (uint64_t)(v15[5] - v15[4]) >> 2;
  v248 = a5;
  v249 = a3;
  v247 = a4;
  v250 = a2;
  if (v24 != v25)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_360;
    }
    v22 = v15[1];
    v23 = v15[2];
    v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 2);
    v25 = (uint64_t)(v15[5] - v15[4]) >> 2;
  }
  LODWORD(v26) = v24;
  if (v24 != v25)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v22 = v15[1];
      v23 = v15[2];
      v26 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 2);
      goto LABEL_20;
    }
LABEL_360:
    abort();
  }
LABEL_20:
  v27 = 0;
  v28 = v24 - 1;
  v29 = v24 != 1;
  v261 = v26 - 1;
  if ((_DWORD)v26 == 1)
    v30 = v24 - 1;
  else
    v30 = 0;
  if ((_DWORD)v26 == 1)
    v29 = 0;
  v253 = v29;
  v268 = (char *)__p;
  if ((_DWORD)v24 == 1)
    v31 = 0;
  else
    v31 = v30;
  v32 = 3.4028e38;
  v254 = 3.4028e38;
  v33 = 3.4028e38;
  v252 = 3.4028e38;
  v259 = v15;
  v34 = a6;
  while (2)
  {
    v35 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 2);
    v257 = v27;
    if (v35 <= v27)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_360;
      }
      v22 = v15[1];
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v15[2] - v22) >> 2);
      v34 = a6;
    }
    v36 = (float32x2_t *)(v22 + 12 * (v257 % v35));
    v37 = *v36;
    LODWORD(v272) = v36[1].i32[0];
    v271 = v37;
    v38 = sub_2239942A0(v34, (int *)&v271);
    if (!v38)
LABEL_204:
      sub_223198218("unordered_map::at: key not found");
    v39 = 0;
    v40 = *(float32x2_t *)((char *)v38 + 44);
    v41 = 0.0;
    while (2)
    {
      v43 = v28;
      if (v31)
        v43 = (v31 + v261) % v26;
      if (v39)
      {
        v44 = v28;
        if (v43)
          v44 = (v43 + v261) % v26;
        if (v39 == 1)
        {
          v43 = v44;
        }
        else
        {
          v43 = v28;
          if (v44)
            v43 = (v44 + v261) % v26;
        }
      }
      v45 = v43;
      v46 = v15[1];
      v47 = v15[2];
      v48 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 2);
      if (v48 <= v45)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C);
        v49 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v50 = qword_255795648;
          for (i = qword_255795650; v50 != i; v50 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v50)(*(_QWORD *)(v50 + 8), "index < nodes_.size()", 21, "Node index out of bounds", 24);
        }
        v52 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          goto LABEL_360;
        qword_255795660(*(_QWORD *)algn_255795668, "index < nodes_.size()", 21, "Node index out of bounds", 24);
        v46 = v15[1];
        v47 = v15[2];
        v48 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 2);
      }
      if ((_DWORD)v45 == v28)
      {
        v53 = 0;
        if (v28)
          goto LABEL_59;
LABEL_62:
        v54 = 0;
        if (!v39)
          goto LABEL_75;
        goto LABEL_63;
      }
      v53 = ((int)v45 + 1) % v26;
      if (v53 == v28)
        goto LABEL_62;
LABEL_59:
      v54 = (v53 + 1) % v26;
      if (!v39)
        goto LABEL_75;
LABEL_63:
      if (v54 == v28)
      {
        v55 = 0;
        if (v28)
          goto LABEL_65;
      }
      else
      {
        v55 = (v54 + 1) % v26;
        if (v55 != v28)
        {
LABEL_65:
          v54 = (v55 + 1) % v26;
          if (v39 < 2)
            goto LABEL_75;
LABEL_69:
          if (v54 == v28)
            v56 = 0;
          else
            v56 = (v54 + 1) % v26;
          v57 = (v56 + 1) % v26;
          if (v56 == v28)
            v57 = 0;
          v54 = v57;
          goto LABEL_75;
        }
      }
      v54 = 0;
      if (v39 >= 2)
        goto LABEL_69;
LABEL_75:
      v58 = (int *)(v46 + 12 * (v45 % v48));
      v59 = *v58;
      v60 = v58[1];
      v61 = v58[2];
      v62 = v54;
      v63 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 2);
      if (v63 <= v54)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C);
        v64 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v65 = qword_255795648;
          for (j = qword_255795650; v65 != j; v65 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v65)(*(_QWORD *)(v65 + 8), "index < nodes_.size()", 21, "Node index out of bounds", 24);
        }
        v67 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v15 = v259;
        if (!byte_255795670)
          goto LABEL_360;
        qword_255795660(*(_QWORD *)algn_255795668, "index < nodes_.size()", 21, "Node index out of bounds", 24);
        v46 = v259[1];
        v63 = 0xAAAAAAAAAAAAAAABLL * ((v259[2] - v46) >> 2);
      }
      v31 = v28;
      if ((_DWORD)v62)
        v31 = ((int)v62 + v261) % v26;
      if (v39)
      {
        v68 = v28;
        if (v31)
          v68 = (v31 + v261) % v26;
        if (v39 == 1)
        {
          v31 = v68;
        }
        else
        {
          v31 = v28;
          if (v68)
            v31 = (v68 + v261) % v26;
        }
      }
      v69 = (int *)(v46 + 12 * (v62 % v63));
      v70 = *v69;
      v71 = v69[1];
      v72 = v69[2];
      if (v59 == v70 && v60 == v71 && v61 == v72)
      {
        v42 = 180.0;
LABEL_37:
        v41 = v41 + v42;
        goto LABEL_38;
      }
      v75 = (int8x8_t)a6[1];
      if (!*(_QWORD *)&v75)
        goto LABEL_204;
      v76 = (19349669 * v60) ^ (73856093 * v59) ^ (83492791 * v61);
      v77 = (uint8x8_t)vcnt_s8(v75);
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.u32[0] > 1uLL)
      {
        v78 = (19349669 * v60) ^ (73856093 * v59) ^ (83492791 * v61);
        if (v76 >= *(_QWORD *)&v75)
          v78 = v76 % *(_QWORD *)&v75;
      }
      else
      {
        v78 = (*(_QWORD *)&v75 - 1) & v76;
      }
      v79 = *(uint64_t ***)(*a6 + 8 * v78);
      if (!v79)
        goto LABEL_204;
      v80 = *v79;
      if (!*v79)
        goto LABEL_204;
      v81 = *(_QWORD *)&v75 - 1;
      if (v77.u32[0] < 2uLL)
      {
        while (1)
        {
          v82 = v80[1];
          if (v76 == v82)
          {
            if (*((_DWORD *)v80 + 4) == v59 && *((_DWORD *)v80 + 5) == v60 && *((_DWORD *)v80 + 6) == v61)
              goto LABEL_115;
          }
          else if ((v82 & v81) != v78)
          {
            goto LABEL_204;
          }
          v80 = (uint64_t *)*v80;
          if (!v80)
            goto LABEL_204;
        }
      }
      while (1)
      {
        v85 = v80[1];
        if (v76 == v85)
          break;
        if (v85 >= *(_QWORD *)&v75)
          v85 %= *(_QWORD *)&v75;
        if (v85 != v78)
          goto LABEL_204;
LABEL_118:
        v80 = (uint64_t *)*v80;
        if (!v80)
          goto LABEL_204;
      }
      if (*((_DWORD *)v80 + 4) != v59 || *((_DWORD *)v80 + 5) != v60 || *((_DWORD *)v80 + 6) != v61)
        goto LABEL_118;
LABEL_115:
      v83 = (19349669 * v71) ^ (73856093 * v70) ^ (83492791 * v72);
      if (v77.u32[0] > 1uLL)
      {
        v84 = (19349669 * v71) ^ (73856093 * v70) ^ (83492791 * v72);
        if (v83 >= *(_QWORD *)&v75)
          v84 = v83 % *(_QWORD *)&v75;
      }
      else
      {
        v84 = v81 & v83;
      }
      v86 = *(uint64_t ***)(*a6 + 8 * v84);
      if (!v86)
        goto LABEL_204;
      v87 = *v86;
      if (!v87)
        goto LABEL_204;
      v88 = *(float32x2_t *)((char *)v80 + 44);
      if (v77.u32[0] < 2uLL)
      {
        while (1)
        {
          v89 = v87[1];
          if (v83 == v89)
          {
            if (*((_DWORD *)v87 + 4) == v70 && *((_DWORD *)v87 + 5) == v71 && *((_DWORD *)v87 + 6) == v72)
              goto LABEL_138;
          }
          else if ((v89 & v81) != v84)
          {
            goto LABEL_204;
          }
          v87 = (uint64_t *)*v87;
          if (!v87)
            goto LABEL_204;
        }
      }
      while (2)
      {
        v103 = v87[1];
        if (v83 != v103)
        {
          if (v103 >= *(_QWORD *)&v75)
            v103 %= *(_QWORD *)&v75;
          if (v103 != v84)
            goto LABEL_204;
LABEL_152:
          v87 = (uint64_t *)*v87;
          if (!v87)
            goto LABEL_204;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v87 + 4) != v70 || *((_DWORD *)v87 + 5) != v71 || *((_DWORD *)v87 + 6) != v72)
        goto LABEL_152;
LABEL_138:
      v90 = *(float32x2_t *)((char *)v87 + 44);
      v91 = vsub_f32(v40, v88);
      v92 = vsub_f32(v90, v40);
      v93 = (float32x2_t)vdup_lane_s32((int32x2_t)v91, 1);
      v93.f32[0] = 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v91, v91), v93, v91, 1).f32[0]);
      v94 = vmul_n_f32(v92, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v92, v92), (float32x2_t)vdup_lane_s32((int32x2_t)v92, 1), v92, 1).f32[0]));
      v95 = vmla_lane_f32(vmul_f32(vmul_f32(v91, v93), v94), vmul_lane_f32(v93, v91, 1), v94, 1).f32[0];
      if (v95 >= -1.0)
        v96 = v95;
      else
        v96 = -1.0;
      if (v96 > 1.0)
        v96 = 1.0;
      if (v96 >= -1.0 && v96 < 1.0)
      {
        v98 = (int32x2_t)vmul_n_f32(v91, v93.f32[0]);
        v99 = vsub_f32(v90, v88);
        v100 = acosf(v96);
        v101 = vmul_f32((float32x2_t)vrev64_s32(v98), v99);
        v102 = v100 * 57.296;
        v42 = -(float)(v100 * 57.296);
        if (vsub_f32(v101, (float32x2_t)vdup_lane_s32((int32x2_t)v101, 1)).f32[0] >= 0.0)
          v42 = v102;
        goto LABEL_37;
      }
LABEL_38:
      if (++v39 != 3)
        continue;
      break;
    }
    v104 = v41 / 3.0;
    v105 = v257;
    if (!(_DWORD)v257)
    {
      v254 = v41 / 3.0;
      v34 = a6;
      if (v31 == v28)
        goto LABEL_203;
LABEL_29:
      v31 = (v31 + 1) % v26;
      goto LABEL_30;
    }
    v34 = a6;
    if ((_DWORD)v257 == v253)
    {
      v252 = v41 / 3.0;
      v32 = v254;
      if (v31 != v28)
        goto LABEL_29;
LABEL_203:
      v31 = 0;
LABEL_30:
      v22 = v15[1];
      v23 = v15[2];
      v27 = v31;
      v33 = v41 / 3.0;
      continue;
    }
    break;
  }
  if (v33 <= 50.0 || v33 <= v32 || v33 <= v104)
    goto LABEL_201;
  v106 = v257 - 1;
  v107 = v268;
  if (v268 < v269)
  {
    *(_DWORD *)v268 = v106;
    v108 = (uint64_t)(v107 + 4);
    goto LABEL_200;
  }
  v109 = (char *)__p;
  v110 = v268 - (_BYTE *)__p;
  v111 = (v268 - (_BYTE *)__p) >> 2;
  v112 = v111 + 1;
  if ((unint64_t)(v111 + 1) >> 62)
    goto LABEL_371;
  v113 = v269 - (_BYTE *)__p;
  if ((v269 - (_BYTE *)__p) >> 1 > v112)
    v112 = v113 >> 1;
  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
    v114 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v114 = v112;
  if (v114)
  {
    if (!(v114 >> 62))
    {
      v115 = v114;
      v116 = (char *)operator new(4 * v114);
      v109 = (char *)__p;
      v114 = v115;
      v111 = (v268 - (_BYTE *)__p) >> 2;
      v110 = v268 - (_BYTE *)__p;
      v117 = &v116[4 * v111];
      *(_DWORD *)v117 = v106;
      v108 = (uint64_t)(v117 + 4);
      v118 = v107 - v109;
      if (v107 != v109)
        goto LABEL_188;
LABEL_191:
      v34 = a6;
      goto LABEL_197;
    }
LABEL_372:
    sub_223174E94();
  }
  v116 = 0;
  v117 = (char *)(4 * v111);
  *(_DWORD *)(4 * v111) = v106;
  v108 = 4 * v111 + 4;
  v118 = v107 - v109;
  if (v107 == v109)
    goto LABEL_191;
LABEL_188:
  v119 = v118 - 4;
  if (v119 >= 0x2C)
  {
    v34 = a6;
    if ((unint64_t)(v107 - v116 - v110) >= 0x20)
    {
      v120 = (v119 >> 2) + 1;
      v121 = 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
      v122 = &v107[-v121];
      v117 -= v121;
      v123 = &v116[4 * v111 - 16];
      v124 = v107 - 16;
      v125 = v120 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v126 = *(_OWORD *)v124;
        *((_OWORD *)v123 - 1) = *((_OWORD *)v124 - 1);
        *(_OWORD *)v123 = v126;
        v123 -= 32;
        v124 -= 32;
        v125 -= 8;
      }
      while (v125);
      v107 = v122;
      if (v120 == (v120 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_197;
    }
  }
  else
  {
    v34 = a6;
  }
  do
  {
    v127 = *((_DWORD *)v107 - 1);
    v107 -= 4;
    *((_DWORD *)v117 - 1) = v127;
    v117 -= 4;
  }
  while (v107 != v109);
LABEL_197:
  __p = v117;
  v268 = (char *)v108;
  v269 = &v116[4 * v114];
  if (v109)
    operator delete(v109);
  v105 = v257;
LABEL_200:
  v268 = (char *)v108;
LABEL_201:
  if (v105 != v28)
  {
    v32 = v33;
    if (v31 == v28)
      goto LABEL_203;
    goto LABEL_29;
  }
  v128 = v268;
  if (v104 <= v254 || v104 <= 50.0 || v104 <= v33)
    goto LABEL_231;
  if (v268 < v269)
  {
    *(_DWORD *)v268 = v28;
    v129 = v128 + 4;
    goto LABEL_230;
  }
  v130 = (char *)__p;
  v131 = v268 - (_BYTE *)__p;
  v132 = (v268 - (_BYTE *)__p) >> 2;
  v133 = v132 + 1;
  if ((unint64_t)(v132 + 1) >> 62)
    goto LABEL_371;
  v134 = v269 - (_BYTE *)__p;
  if ((v269 - (_BYTE *)__p) >> 1 > v133)
    v133 = v134 >> 1;
  if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
    v135 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v135 = v133;
  if (v135)
  {
    if (v135 >> 62)
      goto LABEL_372;
    v136 = operator new(4 * v135);
  }
  else
  {
    v136 = 0;
  }
  v137 = (unsigned int *)&v136[4 * v132];
  v138 = &v136[4 * v135];
  *v137 = v28;
  v129 = (char *)(v137 + 1);
  if (v128 != v130)
  {
    v139 = v128 - v130 - 4;
    if (v139 < 0x2C)
      goto LABEL_378;
    if ((unint64_t)(v128 - v136 - v131) < 0x20)
      goto LABEL_378;
    v140 = (v139 >> 2) + 1;
    v141 = 4 * (v140 & 0x7FFFFFFFFFFFFFF8);
    v142 = &v128[-v141];
    v137 = (unsigned int *)((char *)v137 - v141);
    v143 = &v136[4 * v132 - 16];
    v144 = v128 - 16;
    v145 = v140 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v146 = *(_OWORD *)v144;
      *(v143 - 1) = *((_OWORD *)v144 - 1);
      *v143 = v146;
      v143 -= 2;
      v144 -= 32;
      v145 -= 8;
    }
    while (v145);
    v128 = v142;
    if (v140 != (v140 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_378:
      do
      {
        v147 = *((_DWORD *)v128 - 1);
        v128 -= 4;
        *--v137 = v147;
      }
      while (v128 != v130);
    }
  }
  __p = v137;
  v268 = v129;
  v269 = v138;
  if (v130)
    operator delete(v130);
  v34 = a6;
LABEL_230:
  v268 = v129;
  v128 = v129;
LABEL_231:
  if (v254 <= v252 || v254 <= 50.0 || v254 <= v104)
    goto LABEL_263;
  if (v128 < v269)
  {
    *(_DWORD *)v128 = 0;
    v150 = v128 + 4;
    goto LABEL_262;
  }
  v151 = (char *)__p;
  v152 = v128 - (_BYTE *)__p;
  v153 = (v128 - (_BYTE *)__p) >> 2;
  v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 62)
LABEL_371:
    sub_22316E078();
  v155 = v269 - (_BYTE *)__p;
  if ((v269 - (_BYTE *)__p) >> 1 > v154)
    v154 = v155 >> 1;
  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL)
    v156 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v156 = v154;
  if (v156)
  {
    if (v156 >> 62)
      goto LABEL_372;
    v157 = operator new(4 * v156);
  }
  else
  {
    v157 = 0;
  }
  v158 = &v157[4 * v153];
  v159 = &v157[4 * v156];
  *(_DWORD *)v158 = 0;
  v150 = v158 + 4;
  if (v128 != v151)
  {
    v160 = v128 - v151 - 4;
    if (v160 < 0x2C)
    {
      v161 = v128;
      goto LABEL_258;
    }
    if ((unint64_t)(v128 - v157 - v152) < 0x20)
    {
      v161 = v128;
      goto LABEL_258;
    }
    v162 = (v160 >> 2) + 1;
    v163 = 4 * (v162 & 0x7FFFFFFFFFFFFFF8);
    v161 = &v128[-v163];
    v158 -= v163;
    v164 = &v157[4 * v153 - 16];
    v165 = v128 - 16;
    v166 = v162 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v167 = *(_OWORD *)v165;
      *(v164 - 1) = *((_OWORD *)v165 - 1);
      *v164 = v167;
      v164 -= 2;
      v165 -= 32;
      v166 -= 8;
    }
    while (v166);
    if (v162 != (v162 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_258:
        v168 = *((_DWORD *)v161 - 1);
        v161 -= 4;
        *((_DWORD *)v158 - 1) = v168;
        v158 -= 4;
      }
      while (v161 != v151);
    }
  }
  __p = v158;
  v268 = v150;
  v269 = v159;
  if (v151)
    operator delete(v151);
  v34 = a6;
LABEL_262:
  v268 = v150;
  v128 = v150;
LABEL_263:
  if (v128 == __p)
  {
LABEL_350:
    v19 = 0;
    v238 = (char *)__p;
    if (__p)
      goto LABEL_358;
    return v19;
  }
  v169 = 0;
  v258 = (v128 - (_BYTE *)__p) >> 2;
  v170 = 3.4028e38;
  while (2)
  {
    v172 = *((unsigned int *)__p + v169);
    v173 = v15[1];
    v174 = 0xAAAAAAAAAAAAAAABLL * ((v15[2] - v173) >> 2);
    if (v174 <= v172)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v173 = v15[1];
      v174 = 0xAAAAAAAAAAAAAAABLL * ((v15[2] - v173) >> 2);
    }
    v175 = (uint64_t *)(v173 + 12 * (v172 % v174));
    v176 = *v175;
    v266 = *((_DWORD *)v175 + 2);
    v265 = v176;
    v177 = sub_2239942A0(v34, (int *)&v265);
    if (!v177)
      sub_223198218("unordered_map::at: key not found");
    v178 = *(float32x2_t *)((char *)v177 + 44);
    v179 = v15[4];
    v180 = (v15[5] - v179) >> 2;
    if (v180 <= v172)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v179 = v15[4];
      v180 = (v15[5] - v179) >> 2;
    }
    v181 = *(_DWORD *)(v179 + 4 * (v172 % v180));
    v182 = *a7;
    v183 = ((v172 - 0x5555555555555555 * ((uint64_t)(v15[2] - v15[1]) >> 2) - 1)
                        % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[2] - v15[1]) >> 2)));
    v184 = *a7;
    if (v180 <= v183)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v179 = v15[4];
      v180 = (v15[5] - v179) >> 2;
      v184 = *a7;
    }
    v185 = sub_22399D28C(v270, (int *)&v265, *(float *)(v182 + 96 * v181 + 36), *(float *)(v184 + 96 * *(unsigned int *)(v179 + 4 * (v183 % v180)) + 36));
    v262 = v169;
    v186 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[2] - v15[1]) >> 2);
    if (v186 != (uint64_t)(v15[5] - v15[4]) >> 2)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v186 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[2] - v15[1]) >> 2);
    }
    v187 = v186;
    if (!(_DWORD)v186)
    {
      v171 = v262;
      goto LABEL_266;
    }
    v188 = 0;
    v189 = 0.0;
    v255 = -1;
    v190 = 3.4028e38;
    while (2)
    {
      v192 = v15[1];
      v191 = v15[2];
      v193 = 0xAAAAAAAAAAAAAAABLL * ((v191 - v192) >> 2);
      v194 = v188 - v172;
      if (v188 <= v172)
        v195 = v188 - v172;
      else
        v195 = v172 - v188;
      if (v188 <= v172)
        v194 = v172 - v188;
      if (v195 - 1431655765 * ((v191 - v192) >> 2) < v194)
        v194 = v195 - 1431655765 * ((v191 - v192) >> 2);
      if (v194 < 5)
        goto LABEL_283;
      if (v193 <= v188)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v192 = v15[1];
        v191 = v15[2];
        v193 = 0xAAAAAAAAAAAAAAABLL * ((v191 - v192) >> 2);
      }
      v196 = (uint64_t *)(v192 + 12 * (v188 % v193));
      v197 = *((_DWORD *)v196 + 2);
      v198 = *v196;
      v263 = v198;
      v264 = v197;
      v199 = (int8x8_t)v34[1];
      if (!*(_QWORD *)&v199)
        goto LABEL_359;
      v200 = (19349669 * SHIDWORD(v263)) ^ (83492791 * (int)v197) ^ (73856093 * (int)v198);
      v201 = (uint8x8_t)vcnt_s8(v199);
      v201.i16[0] = vaddlv_u8(v201);
      if (v201.u32[0] > 1uLL)
      {
        v202 = (19349669 * SHIDWORD(v263)) ^ (83492791 * (int)v197) ^ (73856093 * (int)v198);
        if (v200 >= *(_QWORD *)&v199)
          v202 = v200 % *(_QWORD *)&v199;
      }
      else
      {
        v202 = v200 & (*(_QWORD *)&v199 - 1);
      }
      v203 = *(uint64_t ***)(*v34 + 8 * v202);
      if (!v203 || (v204 = *v203) == 0)
LABEL_359:
        sub_223198218("unordered_map::at: key not found");
      if (v201.u32[0] < 2uLL)
      {
        v205 = *(_QWORD *)&v199 - 1;
        while (1)
        {
          v207 = v204[1];
          if (v200 == v207)
          {
            if (*((_DWORD *)v204 + 4) == (_DWORD)v198
              && *(uint64_t *)((char *)v204 + 20) == __PAIR64__(v197, HIDWORD(v263)))
            {
              goto LABEL_317;
            }
          }
          else if ((v207 & v205) != v202)
          {
            goto LABEL_359;
          }
          v204 = (uint64_t *)*v204;
          if (!v204)
            goto LABEL_359;
        }
      }
      while (2)
      {
        v206 = v204[1];
        if (v200 != v206)
        {
          if (v206 >= *(_QWORD *)&v199)
            v206 %= *(_QWORD *)&v199;
          if (v206 != v202)
            goto LABEL_359;
          goto LABEL_305;
        }
        if (*((_DWORD *)v204 + 4) != (_DWORD)v198 || *(uint64_t *)((char *)v204 + 20) != __PAIR64__(v197, HIDWORD(v263)))
        {
LABEL_305:
          v204 = (uint64_t *)*v204;
          if (!v204)
            goto LABEL_359;
          continue;
        }
        break;
      }
LABEL_317:
      v208 = *(float32x2_t *)((char *)v204 + 44);
      v209 = v15[4];
      v210 = (v15[5] - v209) >> 2;
      if (v210 <= v188)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v209 = v15[4];
        v210 = (v15[5] - v209) >> 2;
        v192 = v15[1];
        v191 = v15[2];
      }
      v211 = *(_DWORD *)(v209 + 4 * (v188 % v210));
      v212 = *a7;
      v213 = ((v188 - 0x5555555555555555 * ((v191 - v192) >> 2) - 1)
                          % (0xAAAAAAAAAAAAAAABLL * ((v191 - v192) >> 2)));
      v214 = *a7;
      if (v210 <= v213)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v209 = v259[4];
        v210 = (v259[5] - v209) >> 2;
        v214 = *a7;
      }
      v215 = sub_22399D28C(v270, (int *)&v263, *(float *)(v212 + 96 * v211 + 36), *(float *)(v214 + 96 * *(unsigned int *)(v209 + 4 * (v213 % v210)) + 36));
      v15 = v259;
      v34 = a6;
      if (v185 && v215)
      {
        v216 = vsub_f32(v208, v178);
        if (vmla_lane_f32(vmul_f32(v216, v216), (float32x2_t)vdup_lane_s32((int32x2_t)v216, 1), v216, 1).f32[0] < 2.25)
        {
          v217 = v259[1];
          v218 = 0xAAAAAAAAAAAAAAABLL * ((v259[2] - v217) >> 2);
          if (v218 > v172)
            goto LABEL_328;
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_365;
          }
          v217 = v259[1];
          v218 = 0xAAAAAAAAAAAAAAABLL * ((v259[2] - v217) >> 2);
          v34 = a6;
LABEL_328:
          v219 = (uint64_t *)(v217 + 12 * (v172 % v218));
          v220 = *v219;
          v276 = *((_DWORD *)v219 + 2);
          v275 = v220;
          if (v218 <= v188)
          {
            if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              v217 = v259[1];
              v218 = 0xAAAAAAAAAAAAAAABLL * ((v259[2] - v217) >> 2);
              v34 = a6;
              goto LABEL_331;
            }
LABEL_365:
            abort();
          }
LABEL_331:
          v221 = (uint64_t *)(v217 + 12 * (v188 % v218));
          v222 = *v221;
          v274 = *((_DWORD *)v221 + 2);
          v273 = v222;
          v223 = sub_2239942A0(v34, (int *)&v275);
          if (!v223 || (v224 = *(float32x2_t *)((char *)v223 + 44), (v225 = sub_2239942A0(a6, (int *)&v273)) == 0))
            sub_223198218("unordered_map::at: key not found");
          v226 = *(uint64_t *)((char *)v225 + 44);
          v271 = v224;
          v272 = v226;
          if ((sub_22399B0EC(v259, &v271, (uint64_t)&v275, (uint64_t)&v273, a6) & 1) != 0)
          {
            v34 = a6;
          }
          else
          {
            v34 = a6;
            v227 = sub_22399AE18(v259, v172, v188, a6);
            v228 = sub_22399AE18(v259, v188, v172, a6);
            if (v227 > 0.0)
            {
              v229 = v228;
              if (v228 > 0.0)
              {
                v230 = sub_22399B380(v259, v172, v188, a6);
                v231 = v230 + sub_22399B380(v259, v188, v172, a6);
                if (v231 < v251 && (v190 == 3.4028e38 || v231 < v190))
                {
                  if (v229 >= v227)
                    v189 = v227;
                  else
                    v189 = v229;
                  v190 = v231;
                  v255 = v188;
                }
              }
            }
          }
        }
      }
LABEL_283:
      if (++v188 != v187)
        continue;
      break;
    }
    v171 = v262;
    if (v189 >= 1.0 && (v170 == 3.4028e38 || v190 < v170))
    {
      *v250 = v172;
      *v249 = v255;
      v170 = v190;
    }
LABEL_266:
    v169 = v171 + 1;
    if (v169 != v258)
      continue;
    break;
  }
  if (v170 == 3.4028e38)
    goto LABEL_350;
  v232 = *v250;
  v233 = v15[1];
  v234 = 0xAAAAAAAAAAAAAAABLL * ((v15[2] - v233) >> 2);
  if (v234 <= v232)
  {
    v239 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C);
    v236 = v248;
    v235 = v249;
    v237 = v247;
    if (v239)
      abort();
    v233 = v15[1];
    v234 = 0xAAAAAAAAAAAAAAABLL * ((v15[2] - v233) >> 2);
  }
  else
  {
    v236 = v248;
    v235 = v249;
    v237 = v247;
  }
  v240 = (uint64_t *)(v233 + 12 * (v232 % v234));
  v241 = *v240;
  *(_DWORD *)(v237 + 8) = *((_DWORD *)v240 + 2);
  *(_QWORD *)v237 = v241;
  v242 = *v235;
  v243 = v15[1];
  v244 = 0xAAAAAAAAAAAAAAABLL * ((v15[2] - v243) >> 2);
  if (v244 <= v242)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v243 = v15[1];
    v244 = 0xAAAAAAAAAAAAAAABLL * ((v15[2] - v243) >> 2);
  }
  v245 = (uint64_t *)(v243 + 12 * (v242 % v244));
  v246 = *v245;
  *(_DWORD *)(v236 + 8) = *((_DWORD *)v245 + 2);
  *(_QWORD *)v236 = v246;
  v19 = 1;
  v238 = (char *)__p;
  if (__p)
  {
LABEL_358:
    v268 = v238;
    operator delete(v238);
  }
  return v19;
}

void sub_22399D1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_22399D28C(_QWORD **a1, int *a2, float a3, float a4)
{
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const char *v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  void *v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD v72[3];
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  void *object;
  void *v81[2];
  __int128 v82;
  void *__p[2];
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;

  if (a3 >= 0.25 || a4 >= 0.25)
    return 1;
  if (!sub_2239942A0(*a1, a2))
  {
    sub_22399F024(&v79);
    if (**(int **)(v79 + 56) > 5)
      return 0;
    v14 = *(unsigned __int8 *)(v79 + 72);
    v15 = sub_22322F254(v79, "OSLogSurrogateAppender", 1, 0);
    if (!v14 && v15 == 0)
      return 0;
    v17 = v15;
    v72[0] = &v79;
    v72[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v72[2] = std::chrono::system_clock::now().__d_.__rep_;
    v73 = 5;
    v74 = "unknown file";
    v75 = 493;
    v77 = 0;
    v78 = 0;
    v76 = "unknown function";
    v18 = v79;
    v19 = v79 + 16;
    if (*(char *)(v79 + 39) < 0)
    {
      v21 = *(const char **)(v79 + 16);
      v20 = *(_QWORD *)(v79 + 24);
    }
    else
    {
      v20 = *(unsigned __int8 *)(v79 + 39);
      v21 = (const char *)(*(_QWORD *)v72[0] + 16);
    }
    v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v82 && SHIBYTE(v81[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v23 = (const char *)&xmmword_255788F40;
    else
      v23 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v24 = byte_255788F57;
    else
      v24 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v23, v21);
    v25 = v81;
    if (v24 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v24 >= 0x17)
    {
      v26 = v17;
      v27 = v21;
      v28 = v18;
      v29 = v14;
      v30 = v19;
      v31 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v31 = v24 | 7;
      v32 = v31 + 1;
      v25 = operator new(v31 + 1);
      v81[1] = (void *)v24;
      *(_QWORD *)&v82 = v32 | 0x8000000000000000;
      v81[0] = v25;
      v19 = v30;
      v14 = v29;
      v18 = v28;
      v21 = v27;
      v17 = v26;
    }
    else
    {
      BYTE7(v82) = v24;
      if (!v24)
      {
LABEL_39:
        *((_BYTE *)v25 + v24) = 0;
        BYTE8(v82) = 1;
        v33 = __p;
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v20 >= 0x17)
        {
          v34 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v34 = v20 | 7;
          v35 = v34 + 1;
          v33 = operator new(v34 + 1);
          __p[1] = (void *)v20;
          v84 = v35 | 0x8000000000000000;
          __p[0] = v33;
        }
        else
        {
          HIBYTE(v84) = v20;
          if (!v20)
            goto LABEL_47;
        }
        memmove(v33, v21, v20);
LABEL_47:
        *((_BYTE *)v33 + v20) = 0;
        v85 = 1;
        v36 = object;
        if (SHIBYTE(v84) < 0)
          operator delete(__p[0]);
        if (BYTE8(v82) && SBYTE7(v82) < 0)
          operator delete(v81[0]);
        if (object)
          os_release(object);
        if (v17 && *(_QWORD *)(v17 + 24))
        {
          v37 = _os_log_pack_size();
          v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
          v39 = (std::__shared_weak_count *)operator new();
          v40 = v39;
          v39->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v39->__shared_weak_owners_ = 0;
          v39[1].__vftable = v38;
          object = v38;
          v81[0] = v38;
          v81[1] = v39;
          do
            v42 = __ldxr(p_shared_owners);
          while (__stxr(v42 + 1, p_shared_owners));
          v82 = 0uLL;
          __p[0] = 0;
          do
            v43 = __ldaxr(p_shared_owners);
          while (__stlxr(v43 - 1, p_shared_owners));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v40);
          }
          v44 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v45 = operator new();
          v46 = *(unsigned __int8 *)(v18 + 39);
          if ((v46 & 0x80u) == 0)
            v47 = v19;
          else
            v47 = *(_QWORD *)(v18 + 16);
          if ((v46 & 0x80u) != 0)
            v46 = *(_QWORD *)(v18 + 24);
          *(_QWORD *)v45 = v44;
          *(_OWORD *)(v45 + 8) = *(_OWORD *)v81;
          v81[0] = 0;
          v81[1] = 0;
          *(_OWORD *)(v45 + 24) = v82;
          v82 = 0uLL;
          *(_QWORD *)(v45 + 40) = v47;
          *(_QWORD *)(v45 + 48) = v46;
          *(_BYTE *)(v45 + 56) = 16;
          v86 = 0;
          v87 = v45;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &v87);
          v48 = v87;
          v87 = 0;
          if (v48)
          {
            v49 = *(std::__shared_weak_count **)(v48 + 32);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v52 = *(std::__shared_weak_count **)(v48 + 16);
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            MEMORY[0x227684CE8](v48, 0x10F0C40B62ED6C6);
            v55 = v86;
            v86 = 0;
            if (v55)
            {
              v56 = *(std::__shared_weak_count **)(v55 + 32);
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              v59 = *(std::__shared_weak_count **)(v55 + 16);
              if (v59)
              {
                v60 = (unint64_t *)&v59->__shared_owners_;
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              MEMORY[0x227684CE8](v55, 0x10F0C40B62ED6C6);
            }
          }
          v62 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
          if (*((_QWORD *)&v82 + 1))
          {
            v63 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v65 = (std::__shared_weak_count *)v81[1];
          if (v81[1])
          {
            v66 = (unint64_t *)((char *)v81[1] + 8);
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
        }
        else
        {
          os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v68 = (void *)_os_log_send_and_compose_impl();
          if (v68)
            free(v68);
        }
        if (v14)
        {
          sub_22322C138((uint64_t)v72, "Edges from corner node not found");
          sub_223182C08((uint64_t)v72);
        }
        sub_223182C08((uint64_t)v72);
        v69 = v78;
        if (v78)
        {
          v70 = (unint64_t *)&v78->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        return 0;
      }
    }
    memmove(v25, v23, v24);
    goto LABEL_39;
  }
  v8 = sub_2239942A0(*a1, a2);
  if (!v8)
    sub_223198218("unordered_map::at: key not found");
  v10 = v8[4];
  v9 = v8[5];
  if (v10 == v9)
    return 0;
  v11 = v10 + 4;
  do
  {
    v12 = *(float *)(*a1[1] + 96 * *(unsigned int *)(v11 - 4) + 36);
    result = v12 > 0.8;
    v13 = v12 > 0.8 || v11 == v9;
    v11 += 4;
  }
  while (!v13);
  return result;
}

void sub_22399D9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22399DA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v3 - 96));
  sub_22319A054((uint64_t *)(v3 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399DA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399DA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399DA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399DAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22399DAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22399DAFC(_QWORD *a1, _QWORD *a2, char **a3, _QWORD *a4, unsigned int a5, uint64_t a6, float a7)
{
  _QWORD *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  int v28;
  uint64_t *v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  float v45;
  _BOOL4 v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  const char *v52;
  size_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  const char *v73;
  size_t v74;
  _BYTE *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  size_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  float v123;
  float v124;
  float32x2_t v125;
  float v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t *v139;
  uint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t *v147;
  float32x2_t v148;
  float32x2_t v149;
  float v150;
  float32x2_t v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float32x2_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  unsigned int v161;
  unint64_t v162;
  unint64_t v163;
  float32x2_t v164;
  float32x2_t v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  char **v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  void *object;
  _BYTE v179[32];
  _BYTE __p[28];
  _BYTE v181[27];
  uint64_t *v182;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v184;
  int v185;
  const char *v186;
  int v187;
  const char *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;

  if (!a5)
    return;
  v9 = a4;
  if (a5 == 1)
  {
    v11 = a1[1];
    v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v11) >> 2);
    if (v12 <= a4)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_194;
      }
      v11 = a1[1];
      v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v11) >> 2);
    }
    v13 = v11 + 12 * (v9 % v12);
    v192 = *(_QWORD *)v13;
    v193 = *(_DWORD *)(v13 + 8);
    v14 = a1[4];
    v15 = (a1[5] - v14) >> 2;
    if (v15 > v9)
    {
LABEL_9:
      sub_223999954(a6, &v192, *(_DWORD *)(v14 + 4 * (v9 % v15)));
      return;
    }
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      v14 = a1[4];
      v15 = (a1[5] - v14) >> 2;
      goto LABEL_9;
    }
LABEL_194:
    abort();
  }
  v19 = a1[1];
  v20 = a1[2];
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
  if (v21 != (uint64_t)(a1[5] - a1[4]) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_194;
    }
    v19 = a1[1];
    v20 = a1[2];
    v21 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
  }
  v171 = a3;
  if (v21 > a5)
  {
    v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
    if (v22 <= v9)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_194;
      }
      v19 = a1[1];
      v22 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v19) >> 2);
    }
    v23 = v19 + 12 * (v9 % v22);
    v24 = *(void **)v23;
    *(_DWORD *)v179 = *(_DWORD *)(v23 + 8);
    object = v24;
    v25 = sub_2239942A0(a2, (int *)&object);
    if (!v25
      || (v26 = v25,
          v174 = v9,
          v27 = a1[1] + 12 * ((a5 + v9) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 2))),
          v28 = *(_DWORD *)(v27 + 8),
          object = *(void **)v27,
          *(_DWORD *)v179 = v28,
          (v29 = sub_2239942A0(a2, (int *)&object)) == 0))
    {
LABEL_193:
      sub_223198218("unordered_map::at: key not found");
    }
    LODWORD(object) = -1431655765 * ((unint64_t)(a3[1] - *a3) >> 5);
    WORD2(object) = 257;
    *(_QWORD *)v179 = v26[4];
    *(_DWORD *)&v179[8] = *((_DWORD *)v26 + 10);
    *(_QWORD *)&v179[12] = v29[4];
    *(_DWORD *)&v179[20] = *((_DWORD *)v29 + 10);
    *(_DWORD *)&__p[4] = 0;
    *(_DWORD *)&__p[8] = 0;
    *(_DWORD *)&v179[28] = 1008981770;
    v30 = *(float32x2_t *)((char *)v26 + 44);
    *(float32x2_t *)&__p[12] = v30;
    v31 = *(float32x2_t *)((char *)v29 + 44);
    *(float32x2_t *)&__p[20] = v31;
    *(_WORD *)&v181[12] = 0;
    *(_QWORD *)&v181[16] = -1;
    *(_WORD *)&v181[24] = 0;
    v181[26] = 0;
    v32 = vsub_f32(v31, v30);
    v33 = sqrtf(vmla_lane_f32(vmul_f32(v32, v32), (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1), v32, 1).f32[0]);
    *(float *)&v179[24] = v33;
    *(float *)__p = v33 / 0.01;
    v34 = v30.f32[0];
    if (v31.f32[0] >= v30.f32[0])
      v35 = v30.f32[0];
    else
      v35 = v31.f32[0];
    if (v30.f32[0] >= v31.f32[0])
      v36 = v30.f32[0];
    else
      v36 = v31.f32[0];
    *(float *)v181 = v35;
    *(float *)&v181[4] = v36;
    v37 = 0;
    v38 = (float)(atan2f(v32.f32[1], v32.f32[0]) * -57.296) + 90.0;
    if (v38 < 0.0)
      v38 = v38 + 360.0;
    *(float *)&v181[8] = v38;
    v164 = v31;
    v165 = v30;
    v39 = v31.f32[0] - v30.f32[0];
    v40 = 1;
    v41 = 3.4028e38;
    do
    {
      v42 = a1[1] + 12 * ((v9 + v40) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 2)));
      v43 = *(uint64_t **)v42;
      LODWORD(rep) = *(_DWORD *)(v42 + 8);
      v182 = v43;
      v44 = sub_2239942A0(a2, (int *)&v182);
      if (!v44)
        sub_223198218("unordered_map::at: key not found");
      v45 = fabsf((float)((float)(v39 * (float)(v30.f32[1] - *((float *)v44 + 12)))- (float)((float)(v31.f32[1] - v30.f32[1]) * (float)(v34 - *((float *)v44 + 11))))/ v33);
      if (v45 > a7)
      {
        v46 = v41 == 3.4028e38;
        if (v41 < v45)
          v46 = 1;
        if (v46)
        {
          v41 = v45;
          v37 = v40;
        }
        else
        {
          v37 = v37;
        }
      }
      ++v40;
    }
    while (a5 != v40);
    if (v41 == 3.4028e38)
    {
      v169 = a6;
      v54 = 0;
      v55 = a5;
      v57 = a1[4];
      v56 = a1[5];
      v58 = 0.0;
      do
      {
        v60 = v9 % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 2));
        v61 = (v56 - v57) >> 2;
        if (v61 <= v60)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v57 = a1[4];
          v56 = a1[5];
          v61 = (v56 - v57) >> 2;
        }
        v59 = (uint64_t)&(*v171)[96 * *(unsigned int *)(v57 + 4 * (v60 % v61))];
        v58 = v58 + *(float *)(v59 + 36);
        v54 += *(unsigned __int8 *)(v59 + 5);
        LODWORD(v9) = (_DWORD)v9 + 1;
        --v55;
      }
      while (v55);
      *(float *)&v179[28] = v58 / (float)a5;
      BYTE5(object) = v54 == a5;
      v62 = v171[1];
      if (v62 >= v171[2])
      {
        v68 = sub_2239A403C(v171, (uint64_t)&object);
      }
      else
      {
        v63 = (int)object;
        *((_WORD *)v62 + 2) = WORD2(object);
        *(_DWORD *)v62 = v63;
        v64 = *(_QWORD *)v179;
        *((_DWORD *)v62 + 4) = *(_DWORD *)&v179[8];
        *((_QWORD *)v62 + 1) = v64;
        v65 = *(_QWORD *)&v179[12];
        *((_DWORD *)v62 + 7) = *(_DWORD *)&v179[20];
        *(_QWORD *)(v62 + 20) = v65;
        v66 = *(_QWORD *)&v179[24];
        *((_DWORD *)v62 + 10) = *(_DWORD *)__p;
        *((_QWORD *)v62 + 4) = v66;
        *(_QWORD *)(v62 + 44) = *(_QWORD *)&__p[4];
        *(float32x2_t *)(v62 + 52) = v165;
        *(float32x2_t *)(v62 + 60) = v164;
        v67 = *(_OWORD *)v181;
        *(_OWORD *)(v62 + 79) = *(_OWORD *)&v181[11];
        *(_OWORD *)(v62 + 68) = v67;
        v68 = v62 + 96;
      }
      v171[1] = v68;
      v69 = a1[1];
      v70 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v69) >> 2);
      if (v70 <= v174)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v69 = a1[1];
        v70 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v69) >> 2);
      }
      v71 = v69 + 12 * (v174 % v70);
      v176 = *(_QWORD *)v71;
      v177 = *(_DWORD *)(v71 + 8);
      sub_223999954(v169, &v176, (int)object);
    }
    else
    {
      sub_22399DAFC(a1, a2, v171, v9, v37, a6, a7);
      sub_22399DAFC(a1, a2, v171, (v37 + (_DWORD)v9) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 2)), a5 - v37, a6, a7);
    }
    return;
  }
  v47 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
  if (v47 != (uint64_t)(a1[5] - a1[4]) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_194;
    }
    v19 = a1[1];
    v20 = a1[2];
    v47 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
  }
  v175 = (int)v9;
  if (v47 < a5)
  {
    sub_22399F024(&v191);
    if (**(int **)(v191 + 56) > 5
      || (v48 = *(unsigned __int8 *)(v191 + 72),
          v49 = sub_22322F254(v191, "OSLogSurrogateAppender", 1, 0),
          v50 = v49,
          !v48)
      && !v49)
    {
LABEL_142:
      v19 = a1[1];
      v20 = a1[2];
      goto LABEL_143;
    }
    v182 = &v191;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v184 = std::chrono::system_clock::now().__d_.__rep_;
    v185 = 5;
    v186 = "unknown file";
    v187 = 654;
    v189 = 0;
    v190 = 0;
    v188 = "unknown function";
    v51 = v191;
    v52 = (const char *)(v191 + 16);
    v167 = v191 + 16;
    if (*(char *)(v191 + 39) < 0)
    {
      v52 = *(const char **)(v191 + 16);
      v53 = *(_QWORD *)(v191 + 24);
    }
    else
    {
      v53 = *(unsigned __int8 *)(v191 + 39);
    }
    v168 = v48;
    v172 = a2;
    v170 = a6;
    v72 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if (v179[16] && (v179[15] & 0x80000000) != 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v73 = (const char *)&xmmword_255788F40;
    else
      v73 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v74 = byte_255788F57;
    else
      v74 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v73, v52);
    v75 = v179;
    if (v74 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v74 >= 0x17)
    {
      v76 = v52;
      v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v74 | 7) != 0x17)
        v77 = v74 | 7;
      v78 = v77 + 1;
      v75 = operator new(v77 + 1);
      *(_QWORD *)&v179[8] = v74;
      *(_QWORD *)&v179[16] = v78 | 0x8000000000000000;
      *(_QWORD *)v179 = v75;
      v52 = v76;
    }
    else
    {
      v179[23] = v74;
      if (!v74)
      {
LABEL_75:
        v75[v74] = 0;
        v179[24] = 1;
        v79 = __p;
        if (v53 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        a6 = v170;
        a2 = v172;
        if (v53 >= 0x17)
        {
          v166 = v50;
          v80 = v51;
          v81 = v52;
          v82 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v53 | 7) != 0x17)
            v82 = v53 | 7;
          v83 = v82 + 1;
          LODWORD(v9) = v175;
          v79 = operator new(v82 + 1);
          *(_QWORD *)&__p[8] = v53;
          *(_QWORD *)&__p[16] = v83 | 0x8000000000000000;
          *(_QWORD *)__p = v79;
          v52 = v81;
          v51 = v80;
          v50 = v166;
        }
        else
        {
          __p[23] = v53;
          LODWORD(v9) = v175;
          if (!v53)
            goto LABEL_83;
        }
        memmove(v79, v52, v53);
LABEL_83:
        v79[v53] = 0;
        __p[24] = 1;
        v84 = object;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (v179[24] && (v179[23] & 0x80000000) != 0)
          operator delete(*(void **)v179);
        if (object)
          os_release(object);
        if (v50 && *(_QWORD *)(v50 + 24))
        {
          v85 = _os_log_pack_size();
          v86 = (std::__shared_weak_count_vtbl *)operator new(v85, (std::align_val_t)8uLL);
          v87 = (std::__shared_weak_count *)operator new();
          v88 = v87;
          v87->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v87->__shared_owners_;
          v87->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v87->__shared_weak_owners_ = 0;
          v87[1].__vftable = v86;
          object = v86;
          *(_QWORD *)v179 = v86;
          *(_QWORD *)&v179[8] = v87;
          do
            v90 = __ldxr(p_shared_owners);
          while (__stxr(v90 + 1, p_shared_owners));
          *(_OWORD *)&v179[16] = 0uLL;
          *(_QWORD *)__p = 0;
          do
            v91 = __ldaxr(p_shared_owners);
          while (__stlxr(v91 - 1, p_shared_owners));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v88);
          }
          v92 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v93 = operator new();
          v94 = *(unsigned __int8 *)(v51 + 39);
          v95 = v167;
          if ((v94 & 0x80u) != 0)
          {
            v95 = *(_QWORD *)(v51 + 16);
            v94 = *(_QWORD *)(v51 + 24);
          }
          *(_QWORD *)v93 = v92;
          *(_OWORD *)(v93 + 8) = *(_OWORD *)v179;
          *(_QWORD *)v179 = 0;
          *(_QWORD *)&v179[8] = 0;
          *(_OWORD *)(v93 + 24) = *(_OWORD *)&v179[16];
          *(_OWORD *)&v179[16] = 0uLL;
          *(_QWORD *)(v93 + 40) = v95;
          *(_QWORD *)(v93 + 48) = v94;
          *(_BYTE *)(v93 + 56) = 16;
          v194 = 0;
          v195 = v93;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v50 + 24) + 40))(*(_QWORD *)(v50 + 24), &v195);
          v96 = v195;
          v195 = 0;
          if (v96)
          {
            v97 = *(std::__shared_weak_count **)(v96 + 32);
            if (v97)
            {
              v98 = (unint64_t *)&v97->__shared_owners_;
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
            v100 = *(std::__shared_weak_count **)(v96 + 16);
            if (v100)
            {
              v101 = (unint64_t *)&v100->__shared_owners_;
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            MEMORY[0x227684CE8](v96, 0x10F0C40B62ED6C6);
            v103 = v194;
            v194 = 0;
            if (v103)
            {
              v104 = *(std::__shared_weak_count **)(v103 + 32);
              if (v104)
              {
                v105 = (unint64_t *)&v104->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              v107 = *(std::__shared_weak_count **)(v103 + 16);
              if (v107)
              {
                v108 = (unint64_t *)&v107->__shared_owners_;
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v107);
                }
              }
              MEMORY[0x227684CE8](v103, 0x10F0C40B62ED6C6);
            }
          }
          v110 = *(std::__shared_weak_count **)&v179[24];
          if (*(_QWORD *)&v179[24])
          {
            v111 = (unint64_t *)(*(_QWORD *)&v179[24] + 8);
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          v113 = *(std::__shared_weak_count **)&v179[8];
          if (*(_QWORD *)&v179[8])
          {
            v114 = (unint64_t *)(*(_QWORD *)&v179[8] + 8);
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
        }
        else
        {
          os_log_type_enabled(v84, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v116 = (void *)_os_log_send_and_compose_impl();
          if (v116)
            free(v116);
        }
        if (v168)
        {
          sub_22322C138((uint64_t)&v182, "SimplifyEdges len larger than boundary length");
          sub_223182C08((uint64_t)&v182);
        }
        sub_223182C08((uint64_t)&v182);
        v117 = v190;
        if (v190)
        {
          v118 = (unint64_t *)&v190->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        goto LABEL_142;
      }
    }
    memmove(v75, v73, v74);
    goto LABEL_75;
  }
LABEL_143:
  v120 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
  if (v120 != (uint64_t)(a1[5] - a1[4]) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_194;
    }
    v19 = a1[1];
    v20 = a1[2];
    v120 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
  }
  v173 = v120;
  if ((_DWORD)v120)
  {
    v121 = 0;
    v122 = 0;
    v123 = -3.4028e38;
    while (1)
    {
      v127 = a1[1];
      v128 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v127) >> 2);
      v129 = ((v121 - 0x5555555555555555 * ((a1[2] - v127) >> 2) - 1) % v128);
      if (v128 <= v129)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_194;
        }
        v127 = a1[1];
        v130 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v127) >> 2);
      }
      else
      {
        v130 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v127) >> 2);
      }
      v131 = v127 + 12 * (v129 % v130);
      v132 = *(void **)v131;
      *(_DWORD *)v179 = *(_DWORD *)(v131 + 8);
      object = v132;
      v133 = sub_2239942A0(a2, (int *)&object);
      if (!v133)
        goto LABEL_193;
      v134 = v133;
      v135 = a1[1];
      v136 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v135) >> 2);
      if (v136 <= v121)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_194;
        }
        v135 = a1[1];
        v136 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v135) >> 2);
      }
      v137 = v135 + 12 * (v121 % v136);
      v138 = *(void **)v137;
      *(_DWORD *)v179 = *(_DWORD *)(v137 + 8);
      object = v138;
      v9 = a2;
      v139 = sub_2239942A0(a2, (int *)&object);
      if (!v139)
        goto LABEL_193;
      v140 = v139;
      v141 = v121 + 1;
      v142 = (v121 + 1) % v128;
      v143 = a1[1];
      v144 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v143) >> 2);
      if (v144 <= v142)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_194;
        }
        v143 = a1[1];
        v144 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v143) >> 2);
      }
      v145 = v143 + 12 * (v142 % v144);
      v146 = *(void **)v145;
      *(_DWORD *)v179 = *(_DWORD *)(v145 + 8);
      object = v146;
      v147 = sub_2239942A0(v9, (int *)&object);
      if (!v147)
        goto LABEL_193;
      v148 = *(float32x2_t *)((char *)v134 + 44);
      v149 = *(float32x2_t *)((char *)v147 + 44);
      if ((vceq_f32(v148, v149).u32[0] & 1) == 0)
      {
        LODWORD(v150) = vsub_f32(v148, v149).u32[0];
        v151 = vsub_f32(v149, v148);
        if ((vcgt_f32(v149, v148).u8[0] & 1) != 0)
          v150 = v151.f32[0];
        if (v150 > 0.000001)
          break;
      }
      LODWORD(v124) = HIDWORD(*(unint64_t *)((char *)v134 + 44));
      if (v148.f32[1] != v149.f32[1])
      {
        v152 = v149.f32[1] - v148.f32[1];
        v153 = v148.f32[1] >= v149.f32[1] ? v148.f32[1] - v149.f32[1] : v149.f32[1] - v148.f32[1];
        if (v153 > 0.000001)
        {
          v151.i32[0] = vsub_f32(v149, v148).u32[0];
          goto LABEL_176;
        }
      }
      v125 = vsub_f32(*(float32x2_t *)((char *)v140 + 44), v148);
      v126 = sqrtf(vmla_lane_f32(vmul_f32(v125, v125), (float32x2_t)vdup_lane_s32((int32x2_t)v125, 1), v125, 1).f32[0]);
LABEL_150:
      if (v123 < v126)
      {
        v122 = v121;
        v123 = v126;
      }
      ++v121;
      a2 = v9;
      LODWORD(v9) = v175;
      if (v173 == v141)
      {
        v19 = a1[1];
        v20 = a1[2];
        a3 = v171;
        goto LABEL_179;
      }
    }
    LODWORD(v124) = HIDWORD(*(unint64_t *)((char *)v134 + 44));
    v152 = v151.f32[1];
LABEL_176:
    v154 = v151.f32[0] * (float)(v124 - *((float *)v140 + 12));
    v155 = v152 * (float)(v148.f32[0] - *((float *)v140 + 11));
    v156 = vsub_f32(v149, v148);
    v126 = fabsf((float)(v154 - v155)/ sqrtf(vmla_lane_f32(vmul_f32(v156, v156), (float32x2_t)vdup_lane_s32((int32x2_t)v156, 1), v156, 1).f32[0]));
    goto LABEL_150;
  }
  v122 = 0;
LABEL_179:
  v157 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
  LODWORD(v158) = v157;
  if (v157 != (uint64_t)(a1[5] - a1[4]) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_194;
    }
    v19 = a1[1];
    v20 = a1[2];
    v158 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
  }
  v159 = (v122 + (_DWORD)v9);
  v160 = v159 % v157;
  v161 = v158 >> 1;
  if (v158 >= 2)
  {
    sub_22399DAFC(a1, a2, a3, (v159 % v157), v158 >> 1, a6, a7);
    v19 = a1[1];
    v20 = a1[2];
  }
  v162 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
  if (v162 != (uint64_t)(a1[5] - a1[4]) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_194;
    }
    v19 = a1[1];
    v20 = a1[2];
    v162 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
  }
  if (v161 < v162)
  {
    v163 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
    if (v163 != (uint64_t)(a1[5] - a1[4]) >> 2)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_194;
      }
      v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 2);
    }
    sub_22399DAFC(a1, a2, a3, (v161 + v160) % v163, v163 - v161, a6, a7);
  }
}

void sub_22399EEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_22399EF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  sub_22319A054((uint64_t *)(v36 - 160));
  sub_22319A054((uint64_t *)(v36 - 168));
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_22399EF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  MEMORY[0x227684CE8](v36, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_22399EF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223182DAC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_22399EFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223182DAC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_22399EFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_22399F024(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCAC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCAC8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.vlm");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCAC0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCAC8);
  }
  *a1 = qword_2540CCAC0;
}

void sub_22399F0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCAC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCAC8);
  _Unwind_Resume(a1);
}

void sub_22399F118(uint64_t a1, uint64_t a2, int a3, int a4, int a5, _QWORD *a6)
{
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int *v39;
  int *v40;
  int *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  int *v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _OWORD *v52;
  int *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  int *v67;
  _DWORD *v68;
  int *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  int *v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  int *__p;
  int *v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;

  LODWORD(v6) = a4;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  LODWORD(v11) = a3;
  do
  {
    v14 = v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 2);
    if (v15 <= v11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_9;
      }
      v9 = *(_QWORD *)(a1 + 8);
      v15 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v9) >> 2);
    }
    v16 = v9 + 12 * (v14 % v15);
    v17 = *(_QWORD *)v16;
    v99 = *(_DWORD *)(v16 + 8);
    v98 = v17;
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (*(_QWORD *)(a1 + 40) - v12) >> 2;
    if (v13 <= v14)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
LABEL_9:
        abort();
      }
      v12 = *(_QWORD *)(a1 + 32);
      v13 = (*(_QWORD *)(a1 + 40) - v12) >> 2;
    }
    sub_223999954(a2, &v98, *(_DWORD *)(v12 + 4 * (v14 % v13)));
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    v11 = (v14 + 1) % (0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 2));
  }
  while ((_DWORD)v11 != (_DWORD)v6);
  v18 = v9 + 12 * v11;
  v96 = *(_QWORD *)v18;
  v97 = *(_DWORD *)(v18 + 8);
  sub_223999954(a2, &v96, a5);
  sub_22399A4DC(a2, a6);
  v93 = 0;
  v94 = 0;
  v95 = 0;
  __p = 0;
  v91 = 0;
  v92 = 0;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  do
  {
    v22 = v6;
    v23 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
    if (v23 <= v6)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v19 = *(_QWORD *)(a1 + 8);
      v23 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v19) >> 2);
    }
    v24 = v19 + 12 * (v6 % v23);
    v25 = *(_QWORD *)v24;
    v101 = *(_DWORD *)(v24 + 8);
    v100 = v25;
    v26 = v94;
    if (v94 >= v95)
    {
      v29 = 0xAAAAAAAAAAAAAAABLL * ((v94 - v93) >> 2) + 1;
      if (v29 > 0x1555555555555555)
        sub_22316E078();
      if (0x5555555555555556 * ((v95 - v93) >> 2) > v29)
        v29 = 0x5555555555555556 * ((v95 - v93) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v95 - v93) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v30 = 0x1555555555555555;
      else
        v30 = v29;
      if (v30)
      {
        if (v30 > 0x1555555555555555)
          sub_223174E94();
        v31 = (char *)operator new(12 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[4 * ((v94 - v93) >> 2)];
      *(_QWORD *)v32 = v100;
      *((_DWORD *)v32 + 2) = v101;
      v33 = v32;
      if (v94 != v93)
      {
        do
        {
          v34 = *(_QWORD *)(v26 - 12);
          v26 -= 12;
          v35 = *((_DWORD *)v26 + 2);
          *(_QWORD *)(v33 - 12) = v34;
          v33 -= 12;
          *((_DWORD *)v33 + 2) = v35;
        }
        while (v26 != v93);
        v26 = v93;
      }
      v28 = v32 + 12;
      v93 = v33;
      v95 = &v31[12 * v30];
      if (v26)
        operator delete(v26);
    }
    else
    {
      v27 = *(_QWORD *)v24;
      *((_DWORD *)v94 + 2) = *(_DWORD *)(v24 + 8);
      *(_QWORD *)v94 = v27;
      v28 = v94 + 12;
    }
    v94 = v28;
    v36 = *(_QWORD *)(a1 + 32);
    v37 = (*(_QWORD *)(a1 + 40) - v36) >> 2;
    if (v37 <= v22)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v36 = *(_QWORD *)(a1 + 32);
      v37 = (*(_QWORD *)(a1 + 40) - v36) >> 2;
    }
    v38 = *(_DWORD *)(v36 + 4 * (v22 % v37));
    v40 = v91;
    v39 = (int *)v92;
    if ((unint64_t)v91 < v92)
    {
      *v91 = v38;
      v21 = v91 + 1;
      goto LABEL_12;
    }
    v41 = __p;
    v42 = v91 - __p;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 62)
      sub_22316E078();
    if ((uint64_t)(v92 - (_QWORD)__p) >> 1 > v43)
      v43 = (uint64_t)(v92 - (_QWORD)__p) >> 1;
    if (v92 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL)
      v44 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v44 = v43;
    if (v44)
    {
      if (v44 >> 62)
        sub_223174E94();
      v45 = operator new(4 * v44);
      v46 = (int *)&v45[4 * v42];
      *v46 = v38;
      v21 = v46 + 1;
      v47 = (char *)v91 - (char *)__p;
      if (v91 == __p)
        goto LABEL_55;
LABEL_46:
      v48 = v47 - 4;
      if (v48 < 0x2C)
        goto LABEL_121;
      if ((unint64_t)((char *)__p - v45) < 0x20)
        goto LABEL_121;
      v49 = (v48 >> 2) + 1;
      v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
      v51 = &v91[v50 / 0xFFFFFFFFFFFFFFFCLL];
      v46 = (int *)((char *)v46 - v50);
      v52 = &v45[4 * v42 - 16];
      v53 = v91 - 4;
      v54 = v49 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v55 = *(_OWORD *)v53;
        *(v52 - 1) = *((_OWORD *)v53 - 1);
        *v52 = v55;
        v52 -= 2;
        v53 -= 8;
        v54 -= 8;
      }
      while (v54);
      v40 = v51;
      if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_121:
        do
        {
          v56 = *--v40;
          *--v46 = v56;
        }
        while (v40 != __p);
      }
      goto LABEL_55;
    }
    v45 = 0;
    v46 = (int *)(4 * v42);
    *(_DWORD *)(4 * v42) = v38;
    v21 = (int *)(4 * v42 + 4);
    v47 = (char *)v91 - (char *)__p;
    if (v91 != __p)
      goto LABEL_46;
LABEL_55:
    v39 = (int *)&v45[4 * v44];
    __p = v46;
    v92 = (unint64_t)v39;
    if (v41)
      operator delete(v41);
LABEL_12:
    v91 = v21;
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a1 + 16);
    v6 = (v22 + 1) % (0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2));
  }
  while ((_DWORD)v6 != a3);
  v57 = v19 + 12 * v6;
  v100 = *(_QWORD *)v57;
  v101 = *(_DWORD *)(v57 + 8);
  v58 = v94;
  if (v94 >= v95)
  {
    v61 = 0xAAAAAAAAAAAAAAABLL * ((v94 - v93) >> 2) + 1;
    if (v61 > 0x1555555555555555)
      sub_22316E078();
    if (0x5555555555555556 * ((v95 - v93) >> 2) > v61)
      v61 = 0x5555555555555556 * ((v95 - v93) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((v95 - v93) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v62 = 0x1555555555555555;
    else
      v62 = v61;
    if (v62)
    {
      if (v62 > 0x1555555555555555)
        sub_223174E94();
      v63 = (char *)operator new(12 * v62);
    }
    else
    {
      v63 = 0;
    }
    v64 = &v63[4 * ((v94 - v93) >> 2)];
    *(_QWORD *)v64 = v100;
    *((_DWORD *)v64 + 2) = v101;
    v60 = v64 + 12;
    if (v94 != v93)
    {
      do
      {
        v65 = *(_QWORD *)(v58 - 12);
        v58 -= 12;
        v66 = *((_DWORD *)v58 + 2);
        *(_QWORD *)(v64 - 12) = v65;
        v64 -= 12;
        *((_DWORD *)v64 + 2) = v66;
      }
      while (v58 != v93);
      v58 = v93;
    }
    v93 = v64;
    if (v58)
      operator delete(v58);
  }
  else
  {
    v59 = *(_QWORD *)v57;
    *((_DWORD *)v94 + 2) = *(_DWORD *)(v57 + 8);
    *(_QWORD *)v94 = v59;
    v60 = v94 + 12;
  }
  if (v21 < v39)
  {
    *v21 = a5;
    v67 = __p;
    v68 = v21 + 1;
    goto LABEL_97;
  }
  v69 = __p;
  v70 = v21 - __p;
  v71 = v70 + 1;
  if ((unint64_t)(v70 + 1) >> 62)
    sub_22316E078();
  if (((char *)v39 - (char *)__p) >> 1 > v71)
    v71 = ((char *)v39 - (char *)__p) >> 1;
  if ((unint64_t)((char *)v39 - (char *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
    v72 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v72 = v71;
  if (v72)
  {
    if (v72 >> 62)
      sub_223174E94();
    v73 = operator new(4 * v72);
  }
  else
  {
    v73 = 0;
  }
  v67 = (int *)&v73[4 * v70];
  *v67 = a5;
  v68 = v67 + 1;
  if (v21 != __p)
  {
    v74 = (char *)v21 - (char *)__p - 4;
    if (v74 < 0x2C)
    {
      v75 = v21;
      goto LABEL_94;
    }
    if ((unint64_t)((char *)__p - v73) < 0x20)
    {
      v75 = v21;
      goto LABEL_94;
    }
    v76 = (v74 >> 2) + 1;
    v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
    v75 = &v21[v77 / 0xFFFFFFFFFFFFFFFCLL];
    v67 = (int *)((char *)v67 - v77);
    v78 = &v73[4 * v70 - 16];
    v79 = v21 - 4;
    v80 = v76 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v81 = *(_OWORD *)v79;
      *(v78 - 1) = *((_OWORD *)v79 - 1);
      *v78 = v81;
      v78 -= 2;
      v79 -= 8;
      v80 -= 8;
    }
    while (v80);
    if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_94:
        v82 = *--v75;
        *--v67 = v82;
      }
      while (v75 != __p);
    }
  }
  __p = v67;
  if (v69)
    operator delete(v69);
LABEL_97:
  *(_BYTE *)(a1 + 108) = 0;
  v83 = v93;
  v84 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v93) >> 2);
  if (v84 != v68 - v67)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/SpatialBoundary.cpp", 214, (uint64_t)"nodes.size() == edge_indices.size()", 35, (uint64_t)"Edge and node counts do not match", 33, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v83 = v93;
    v84 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v93) >> 2);
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  if (v60 != v83)
  {
    v85 = 0;
    do
    {
      v86 = &v93[12 * v85];
      v100 = *(_QWORD *)v86;
      v101 = *((_DWORD *)v86 + 2);
      sub_223999954(a1, &v100, __p[v85++]);
    }
    while (v84 != v85);
  }
  sub_22399A4DC(a1, a6);
  if (__p)
    operator delete(__p);
  if (v93)
    operator delete(v93);
}

void sub_22399F9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v16;

  if (__p)
  {
    operator delete(__p);
    v16 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v16 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

BOOL sub_22399FA20(uint64_t a1, int **a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  float v9;
  uint64_t v12;
  uint64_t v13;
  signed int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  signed int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int32x4_t v22;
  const float *v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  const float *v27;
  unsigned __int128 v28;
  unsigned __int128 v29;
  signed int v30;
  int v31;
  int *v32;
  int *v33;
  float *v34;
  float *v35;
  float *v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  float *v46;
  char *v47;
  unint64_t v48;
  float *v49;
  float *v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 *v56;
  __n128 *v57;
  uint64_t v58;
  float *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  _BOOL4 v72;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _QWORD v79[8];
  float v80;
  float v81;
  uint64_t v82;
  void *__p;
  float *v84;
  float *v85;

  v9 = a6.n128_f32[0];
  v13 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 == v13)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v13 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 4);
    v76 = a3;
    v77 = a4;
    if (v13 == v12)
    {
      v18 = *(_DWORD *)(v13 + 4);
      goto LABEL_19;
    }
  }
  else
  {
    v14 = *(_DWORD *)(v13 + 4);
    v76 = a3;
    v77 = a4;
  }
  v15 = v12 - v13 - 12;
  if (v15 >= 0x60)
  {
    v19 = v15 / 0xC + 1;
    v20 = v19 & 7;
    if ((v19 & 7) == 0)
      v20 = 8;
    v21 = v19 - v20;
    v17 = v13 + 12 * v21;
    v22 = vdupq_n_s32(v14);
    v23 = (const float *)(v13 + 52);
    v24 = v22;
    v25 = v22;
    v26 = v22;
    do
    {
      v27 = v23 - 12;
      v28 = (unsigned __int128)vld3q_f32(v27);
      v29 = (unsigned __int128)vld3q_f32(v23);
      v25 = vminq_s32((int32x4_t)v28, v25);
      v26 = vminq_s32((int32x4_t)v29, v26);
      v22 = vmaxq_s32(v22, (int32x4_t)v28);
      v24 = vmaxq_s32(v24, (int32x4_t)v29);
      v23 += 24;
      v21 -= 8;
    }
    while (v21);
    v16 = vminvq_s32(vminq_s32(v25, v26));
    a6 = (__n128)vmaxq_s32(v22, v24);
    a6.n128_u32[0] = vmaxvq_s32((int32x4_t)a6);
    v14 = a6.n128_u32[0];
  }
  else
  {
    v16 = v14;
    v17 = v13;
  }
  v18 = v14;
  v14 = v16;
  do
  {
    v30 = *(_DWORD *)(v17 + 4);
    if (v30 < v14)
      v14 = *(_DWORD *)(v17 + 4);
    if (v18 <= v30)
      v18 = *(_DWORD *)(v17 + 4);
    v17 += 12;
  }
  while (v17 != v12);
LABEL_19:
  v31 = v18 + v14;
  if (v18 + v14 < 0 != __OFADD__(v18, v14))
    ++v31;
  __p = 0;
  v84 = 0;
  v85 = 0;
  v32 = *a2;
  v33 = a2[1];
  if (*a2 != v33)
  {
    v75 = a5;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    a6.n128_f32[0] = (float)((v31 >> 1) + 1);
    v37 = a6.n128_f32[0] * v9;
    while (1)
    {
      if (!*((_BYTE *)v32 + 4))
        goto LABEL_25;
      a6.n128_u32[0] = v32[14];
      if (a6.n128_f32[0] <= v37 != *((float *)v32 + 16) > v37)
        goto LABEL_25;
      v38 = *(float32x2_t *)(v32 + 13);
      v39 = vsub_f32(*(float32x2_t *)(v32 + 15), v38);
      a6.n128_f32[0] = (float)((float)(v37 - a6.n128_f32[0]) / v39.f32[1]) * v39.f32[0];
      v40 = v38.f32[0] + a6.n128_f32[0];
      v41 = *v32;
      if (v36 < v35)
      {
        *(_DWORD *)v36 = v41;
        v36[1] = v40;
        v36 += 2;
      }
      else
      {
        v42 = ((char *)v36 - (char *)v34) >> 3;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61)
          sub_22316E078();
        if (v35 - v34 > v43)
          v43 = v35 - v34;
        if ((unint64_t)((char *)v35 - (char *)v34) >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          if (v44 >> 61)
            sub_223174E94();
          v45 = (char *)operator new(8 * v44);
          v46 = (float *)&v45[8 * v42];
          *(_DWORD *)v46 = v41;
          v46[1] = v40;
          v47 = (char *)((char *)v36 - (char *)v34);
          if (v36 != v34)
          {
LABEL_38:
            v48 = (unint64_t)(v47 - 8);
            if (v48 < 0x168
              || (v53 = ((char *)(v36 - 2) - (char *)v34) & 0xFFFFFFFFFFFFFFF8,
                  &v45[(char *)v36 - (char *)v34 - 8 - v53] > &v45[(char *)v36 - (char *)v34 - 8])
              || (float *)((char *)v36 - v53 - 8) > v36 - 2
              || (unint64_t)((char *)v34 - v45) < 0x20)
            {
              v49 = v36;
              v50 = v46;
            }
            else
            {
              v54 = (v48 >> 3) + 1;
              v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
              v49 = &v36[v55 / 0xFFFFFFFFFFFFFFFCLL];
              v50 = &v46[v55 / 0xFFFFFFFFFFFFFFFCLL];
              v56 = (__n128 *)&v45[8 * v42 - 16];
              v57 = (__n128 *)(v36 - 4);
              v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                a6 = *v57;
                v56[-1] = v57[-1];
                *v56 = a6;
                v56 -= 2;
                v57 -= 2;
                v58 -= 4;
              }
              while (v58);
              if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_41:
                v52 = __p;
                v34 = v50;
                v35 = (float *)&v45[8 * v44];
                v36 = v46 + 2;
                __p = v50;
                v85 = v35;
                if (!v52)
                  goto LABEL_24;
LABEL_45:
                operator delete(v52);
                goto LABEL_24;
              }
            }
            do
            {
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 2;
              *((_QWORD *)v50 - 1) = v51;
              v50 -= 2;
            }
            while (v49 != v34);
            goto LABEL_41;
          }
        }
        else
        {
          v45 = 0;
          v46 = (float *)(8 * v42);
          *(_DWORD *)v46 = v41;
          v46[1] = v40;
          v47 = (char *)((char *)v36 - (char *)v34);
          if (v36 != v34)
            goto LABEL_38;
        }
        v52 = v34;
        v34 = v46;
        v35 = (float *)&v45[8 * v44];
        v36 = v46 + 2;
        __p = v46;
        v85 = v35;
        if (v52)
          goto LABEL_45;
      }
LABEL_24:
      v84 = v36;
LABEL_25:
      v32 += 24;
      if (v32 == v33)
      {
        v59 = (float *)__p;
        a5 = v75;
        goto LABEL_55;
      }
    }
  }
  v36 = 0;
  v59 = 0;
LABEL_55:
  v60 = ((char *)v36 - (char *)v59) >> 3;
  v61 = 126 - 2 * __clz(v60);
  if (v36 == v59)
    v62 = 0;
  else
    v62 = v61;
  sub_2239A41F4(v59, (uint64_t *)v36, v62, 1, a6);
  v63 = v36 != v59;
  if (v36 != v59)
  {
    v64 = 0;
    v65 = -1;
    LODWORD(v66) = -1;
    do
    {
      v67 = LODWORD(v59[2 * v64]);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 5) <= v67)
        sub_2236C5448();
      v68 = (uint64_t)&(*a2)[24 * v67];
      v70 = *(_DWORD *)(v68 + 84);
      v69 = *(_DWORD *)(v68 + 88);
      v72 = v70 == *(_DWORD *)a1 || v69 == *(_DWORD *)a1;
      if (v72)
        LODWORD(v66) = v64;
      if (v72 && v65 == -1)
        v65 = v64;
      ++v64;
    }
    while (v60 != v64);
    if (v65 == -1 || (_DWORD)v66 == -1)
    {
      v63 = 0;
LABEL_82:
      v84 = v59;
      operator delete(v59);
      return v63;
    }
    v82 = a1;
    v81 = v59[2 * v65 + 1];
    v80 = v59[2 * v66 + 1];
    v79[0] = &__p;
    v79[1] = &v81;
    v79[2] = &v80;
    v79[3] = a2;
    v79[4] = v76;
    v79[5] = v77;
    v79[6] = &v82;
    v79[7] = a5;
    v78 = 1;
    do
      sub_22399FFA8((uint64_t)v79, 1, v65--, &v78);
    while (v65 != -1);
    v78 = 1;
    do
    {
      sub_22399FFA8((uint64_t)v79, 0, v66, &v78);
      v66 = (v66 + 1);
      v36 = (float *)__p;
    }
    while (v66 != ((char *)v84 - (_BYTE *)__p) >> 3);
  }
  v59 = v36;
  if (v36)
    goto LABEL_82;
  return v63;
}

void sub_22399FF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;

  if (v24)
    operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_22399FFA8(uint64_t a1, int a2, unsigned int a3, _BYTE *a4)
{
  float *v6;
  float v7;
  float v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  _DWORD *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  int v76;
  int v77;
  BOOL v78;
  int v79;
  BOOL v80;

  v6 = (float *)(**(_QWORD **)a1 + 8 * a3);
  v7 = v6[1];
  if (a2)
  {
    v8 = v6[1];
    v7 = **(float **)(a1 + 8);
  }
  else
  {
    v8 = **(float **)(a1 + 16);
  }
  v9 = *(uint64_t **)(a1 + 24);
  v10 = *(unsigned int *)v6;
  v11 = *v9;
  if (0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 5) <= v10)
    sub_2236C5448();
  v12 = (_DWORD *)(v11 + 96 * v10);
  if (!*a4 || (float)(v7 - v8) > 1.0)
  {
    v23 = v11 + 96 * v10;
    v25 = *(unsigned __int8 *)(v23 + 4);
    v24 = (_BYTE *)(v23 + 4);
    if (!v25)
      return;
    *v24 = 0;
    v26 = *(_QWORD *)(a1 + 56);
    v28 = *(char **)(v26 + 8);
    v27 = *(_QWORD *)(v26 + 16);
    if ((unint64_t)v28 >= v27)
    {
      v32 = *(char **)v26;
      v33 = (uint64_t)&v28[-*(_QWORD *)v26];
      v34 = v33 >> 2;
      v35 = (v33 >> 2) + 1;
      if (v35 >> 62)
        sub_22316E078();
      v36 = v27 - (_QWORD)v32;
      if (v36 >> 1 > v35)
        v35 = v36 >> 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 62)
          goto LABEL_84;
        v38 = operator new(4 * v37);
      }
      else
      {
        v38 = 0;
      }
      v45 = &v38[4 * v34];
      v46 = &v38[4 * v37];
      *v45 = *v12;
      v29 = v45 + 1;
      if (v28 != v32)
      {
        v47 = v28 - v32 - 4;
        if (v47 < 0x2C)
          goto LABEL_88;
        if ((unint64_t)(v28 - v38 - v33) < 0x20)
          goto LABEL_88;
        v48 = (v47 >> 2) + 1;
        v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
        v50 = &v28[-v49];
        v45 = (_DWORD *)((char *)v45 - v49);
        v51 = &v38[4 * v34 - 16];
        v52 = v28 - 16;
        v53 = v48 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v54 = *(_OWORD *)v52;
          *(v51 - 1) = *((_OWORD *)v52 - 1);
          *v51 = v54;
          v51 -= 2;
          v52 -= 32;
          v53 -= 8;
        }
        while (v53);
        v28 = v50;
        if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_88:
          do
          {
            v55 = *((_DWORD *)v28 - 1);
            v28 -= 4;
            *--v45 = v55;
          }
          while (v28 != v32);
        }
      }
      *(_QWORD *)v26 = v45;
      *(_QWORD *)(v26 + 8) = v29;
      *(_QWORD *)(v26 + 16) = v46;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_DWORD *)v28 = *v12;
      v29 = v28 + 4;
    }
    *(_QWORD *)(v26 + 8) = v29;
    return;
  }
  if (a2)
  {
    v13 = *(_QWORD *)(a1 + 32);
    v15 = *(char **)(v13 + 8);
    v14 = *(_QWORD *)(v13 + 16);
    if ((unint64_t)v15 >= v14)
    {
      v16 = *(char **)v13;
      v17 = (uint64_t)&v15[-*(_QWORD *)v13];
      v18 = v17 >> 2;
      v19 = (v17 >> 2) + 1;
      if (!(v19 >> 62))
      {
        v20 = v14 - (_QWORD)v16;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (!v21)
        {
          v22 = 0;
          goto LABEL_53;
        }
        if (!(v21 >> 62))
        {
          v22 = operator new(4 * v21);
LABEL_53:
          v56 = &v22[4 * v18];
          v57 = &v22[4 * v21];
          *v56 = *v12;
          v31 = v56 + 1;
          if (v15 != v16)
          {
            v58 = v15 - v16 - 4;
            if (v58 < 0x2C)
              goto LABEL_89;
            if ((unint64_t)(v15 - &v22[v17]) < 0x20)
              goto LABEL_89;
            v59 = (v58 >> 2) + 1;
            v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
            v61 = &v15[-v60];
            v56 = (_DWORD *)((char *)v56 - v60);
            v62 = &v22[4 * v18 - 16];
            v63 = v15 - 16;
            v64 = v59 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v65 = *(_OWORD *)v63;
              *(v62 - 1) = *((_OWORD *)v63 - 1);
              *v62 = v65;
              v62 -= 2;
              v63 -= 32;
              v64 -= 8;
            }
            while (v64);
            v15 = v61;
            if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_89:
              do
              {
                v66 = *((_DWORD *)v15 - 1);
                v15 -= 4;
                *--v56 = v66;
              }
              while (v15 != v16);
            }
          }
LABEL_69:
          *(_QWORD *)v13 = v56;
          *(_QWORD *)(v13 + 8) = v31;
          *(_QWORD *)(v13 + 16) = v57;
          if (v16)
            operator delete(v16);
          goto LABEL_71;
        }
LABEL_84:
        sub_223174E94();
      }
      goto LABEL_83;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 40);
    v15 = *(char **)(v13 + 8);
    v30 = *(_QWORD *)(v13 + 16);
    if ((unint64_t)v15 >= v30)
    {
      v16 = *(char **)v13;
      v39 = (uint64_t)&v15[-*(_QWORD *)v13];
      v40 = v39 >> 2;
      v41 = (v39 >> 2) + 1;
      if (!(v41 >> 62))
      {
        v42 = v30 - (_QWORD)v16;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          if (v43 >> 62)
            goto LABEL_84;
          v44 = operator new(4 * v43);
        }
        else
        {
          v44 = 0;
        }
        v56 = &v44[4 * v40];
        v57 = &v44[4 * v43];
        *v56 = *v12;
        v31 = v56 + 1;
        if (v15 != v16)
        {
          v67 = v15 - v16 - 4;
          if (v67 < 0x2C)
            goto LABEL_90;
          if ((unint64_t)(v15 - &v44[v39]) < 0x20)
            goto LABEL_90;
          v68 = (v67 >> 2) + 1;
          v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
          v70 = &v15[-v69];
          v56 = (_DWORD *)((char *)v56 - v69);
          v71 = &v44[4 * v40 - 16];
          v72 = v15 - 16;
          v73 = v68 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v74 = *(_OWORD *)v72;
            *(v71 - 1) = *((_OWORD *)v72 - 1);
            *v71 = v74;
            v71 -= 2;
            v72 -= 32;
            v73 -= 8;
          }
          while (v73);
          v15 = v70;
          if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_90:
            do
            {
              v75 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *--v56 = v75;
            }
            while (v15 != v16);
          }
        }
        goto LABEL_69;
      }
LABEL_83:
      sub_22316E078();
    }
  }
  *(_DWORD *)v15 = *v12;
  v31 = v15 + 4;
LABEL_71:
  *(_QWORD *)(v13 + 8) = v31;
  v76 = v12[21];
  v77 = ***(_DWORD ***)(a1 + 48);
  v78 = v76 == -1 || v76 == v77;
  if (!v78 || ((v79 = v12[22], v79 != v77) ? (v80 = v79 == -1) : (v80 = 1), !v80))
    *a4 = 0;
}

uint64_t sub_2239A03FC(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  void *v16;
  unint64_t v17;
  const char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  unint64_t v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  int v72;
  const char *v73;
  int v74;
  const char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  void *object;
  void *v80[2];
  __int128 v81;
  void *__p[2];
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;

  v4 = *(float *)(a1 + 104);
  v5 = *(float *)(a2 + 104);
  if (v4 <= v5)
  {
    sub_22399F024(&v78);
    if (**(int **)(v78 + 56) > 5
      || ((v6 = *(unsigned __int8 *)(v78 + 72), v7 = sub_22322F254(v78, "OSLogSurrogateAppender", 1, 0), v8 = v7, !v6)
        ? (v9 = v7 == 0)
        : (v9 = 0),
          v9))
    {
LABEL_92:
      v5 = *(float *)(a2 + 104);
      v4 = *(float *)(a1 + 104);
      goto LABEL_93;
    }
    v71[0] = &v78;
    v71[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v71[2] = std::chrono::system_clock::now().__d_.__rep_;
    v72 = 5;
    v73 = "unknown file";
    v74 = 1193;
    v76 = 0;
    v77 = 0;
    v75 = "unknown function";
    v70 = v78;
    if (*(char *)(v78 + 39) < 0)
    {
      v11 = *(const char **)(v78 + 16);
      v10 = *(_QWORD *)(v78 + 24);
      v69 = v78 + 16;
      v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v13 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v10 = *(unsigned __int8 *)(v78 + 39);
      v11 = (const char *)(v78 + 16);
      v69 = v78 + 16;
      v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v12 & 1) != 0)
        goto LABEL_11;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v81 && SHIBYTE(v80[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_11:
    if (byte_255788F57 >= 0)
      v14 = (const char *)&xmmword_255788F40;
    else
      v14 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v15 = byte_255788F57;
    else
      v15 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v14, v11);
    v16 = v80;
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v15 >= 0x17)
    {
      v17 = v8;
      v18 = v11;
      v19 = v6;
      v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v20 = v15 | 7;
      v21 = v20 + 1;
      v16 = operator new(v20 + 1);
      v80[1] = (void *)v15;
      *(_QWORD *)&v81 = v21 | 0x8000000000000000;
      v80[0] = v16;
      v6 = v19;
      v11 = v18;
      v8 = v17;
    }
    else
    {
      BYTE7(v81) = v15;
      if (!v15)
      {
LABEL_25:
        *((_BYTE *)v16 + v15) = 0;
        BYTE8(v81) = 1;
        v22 = __p;
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v10 >= 0x17)
        {
          v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v23 = v10 | 7;
          v24 = v23 + 1;
          v22 = operator new(v23 + 1);
          __p[1] = (void *)v10;
          v83 = v24 | 0x8000000000000000;
          __p[0] = v22;
        }
        else
        {
          HIBYTE(v83) = v10;
          if (!v10)
            goto LABEL_33;
        }
        memmove(v22, v11, v10);
LABEL_33:
        *((_BYTE *)v22 + v10) = 0;
        v84 = 1;
        v25 = object;
        if (SHIBYTE(v83) < 0)
          operator delete(__p[0]);
        if (BYTE8(v81) && SBYTE7(v81) < 0)
          operator delete(v80[0]);
        if (object)
          os_release(object);
        if (v8 && *(_QWORD *)(v8 + 24))
        {
          v26 = _os_log_pack_size();
          v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
          v28 = (std::__shared_weak_count *)operator new();
          v29 = v28;
          v28->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v28->__shared_weak_owners_ = 0;
          v28[1].__vftable = v27;
          object = v27;
          v80[0] = v27;
          v80[1] = v28;
          do
            v31 = __ldxr(p_shared_owners);
          while (__stxr(v31 + 1, p_shared_owners));
          v81 = 0uLL;
          __p[0] = 0;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v29);
          }
          v33 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v34 = operator new();
          v35 = *(unsigned __int8 *)(v70 + 39);
          v36 = v69;
          if ((v35 & 0x80u) != 0)
          {
            v36 = *(_QWORD *)(v70 + 16);
            v35 = *(_QWORD *)(v70 + 24);
          }
          *(_QWORD *)v34 = v33;
          *(_OWORD *)(v34 + 8) = *(_OWORD *)v80;
          v80[0] = 0;
          v80[1] = 0;
          *(_OWORD *)(v34 + 24) = v81;
          v81 = 0uLL;
          *(_QWORD *)(v34 + 40) = v36;
          *(_QWORD *)(v34 + 48) = v35;
          *(_BYTE *)(v34 + 56) = 16;
          v85 = 0;
          v86 = v34;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v86);
          v37 = v86;
          v86 = 0;
          if (v37)
          {
            v38 = *(std::__shared_weak_count **)(v37 + 32);
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            v41 = *(std::__shared_weak_count **)(v37 + 16);
            if (v41)
            {
              v42 = (unint64_t *)&v41->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            MEMORY[0x227684CE8](v37, 0x10F0C40B62ED6C6);
            v44 = v85;
            v85 = 0;
            if (v44)
            {
              v45 = *(std::__shared_weak_count **)(v44 + 32);
              if (v45)
              {
                v46 = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
              v48 = *(std::__shared_weak_count **)(v44 + 16);
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
              MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
            }
          }
          v51 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
          if (*((_QWORD *)&v81 + 1))
          {
            v52 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = (std::__shared_weak_count *)v80[1];
          if (v80[1])
          {
            v55 = (unint64_t *)((char *)v80[1] + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
        else
        {
          os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v57 = (void *)_os_log_send_and_compose_impl();
          if (v57)
            free(v57);
        }
        if (v6)
        {
          sub_22322C138((uint64_t)v71, "Boundary hole area larger than boundary area");
          sub_223182C08((uint64_t)v71);
        }
        sub_223182C08((uint64_t)v71);
        v58 = v77;
        if (v77)
        {
          v59 = (unint64_t *)&v77->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        goto LABEL_92;
      }
    }
    memmove(v16, v14, v15);
    goto LABEL_25;
  }
LABEL_93:
  *(float *)(a1 + 104) = v4 + v5;
  v61 = *(_QWORD **)(a1 + 88);
  if ((unint64_t)v61 < *(_QWORD *)(a1 + 96))
  {
    *v61 = 0;
    v61[1] = 0;
    v61[2] = 0;
    v63 = *(_BYTE **)(a2 + 56);
    v62 = *(_BYTE **)(a2 + 64);
    v64 = v62 - v63;
    if (v62 != v63)
    {
      if (v64 < 0)
        sub_22316E078();
      v65 = (char *)operator new(v62 - v63);
      *v61 = v65;
      v61[1] = v65;
      v61[2] = &v65[8 * (v64 >> 3)];
      v66 = v64 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v65, v63, v66);
      v61[1] = &v65[v66];
    }
    *(_QWORD *)(a1 + 88) = v61 + 3;
    *(_QWORD *)(a1 + 88) = v61 + 3;
    v67 = *(_QWORD *)(a1 + 128);
    if (v67 >= *(_QWORD *)(a1 + 136))
      goto LABEL_98;
LABEL_100:
    sub_2239A54E0(v67, (int *)a2);
    result = v67 + 144;
    *(_QWORD *)(a1 + 128) = v67 + 144;
    goto LABEL_101;
  }
  *(_QWORD *)(a1 + 88) = sub_223452F08((char **)(a1 + 80), a2 + 56);
  v67 = *(_QWORD *)(a1 + 128);
  if (v67 < *(_QWORD *)(a1 + 136))
    goto LABEL_100;
LABEL_98:
  result = sub_2239A5298((uint64_t *)(a1 + 120), (int *)a2);
LABEL_101:
  *(_QWORD *)(a1 + 128) = result;
  return result;
}

void sub_2239A0BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2239A0BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v5 - 96));
  sub_22319A054((uint64_t *)(v5 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2239A0C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2239A0C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2239A0C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2239A0C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2239A0CC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

void sub_2239A0CC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 88) = v2;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2239A0CE8(_QWORD *a1, _QWORD *a2, char **a3, _DWORD *a4, uint64_t a5, float a6, float a7)
{
  _QWORD *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  int v20;
  unsigned int v22;
  float v23;
  const char *v24;
  void (*v25)(void **);
  float v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  float v36;
  int v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t i;
  unsigned __int8 v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(void **);
  const char *v50;
  unsigned __int8 v51;
  uint64_t j;
  uint64_t v53;
  unsigned __int8 v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  float v116;
  float v117;
  float v118;
  char *v119;
  unsigned int v120;
  char *v121;
  uint64_t *v122;
  float v123;
  float v124;
  float32x2_t v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  char *v134;
  float32x2_t v135;
  float32x2_t v136;
  BOOL v137;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char **v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t *v174;
  char *v175;
  float *v176;
  float v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  float v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char **v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  int v212;
  float v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  float32x2_t v219;
  float32x2_t v220;
  float32x2_t v221;
  float32x2_t v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char v227;
  char v228;
  float v229;
  uint64_t *v230;
  int v231;
  uint64_t *v232;
  uint64_t v233;
  float32x2_t v234;
  float32x2_t v235;
  float v236;
  float v237;
  float v238;
  char *v239;
  char v240;
  char v241;
  float v242;
  uint64_t *v243;
  float32x2_t v244;
  float32x2_t v245;
  float32x2_t v246;
  float v247;
  float v248;
  float v249;
  char **v250;
  char *v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  char *v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  __int128 v262;
  char *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _BYTE *v273;
  char *v274;
  char *v275;
  size_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unsigned int k;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned int v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  float v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unsigned __int8 v298;
  uint64_t v299;
  uint64_t m;
  unsigned __int8 v301;
  unint64_t v302;
  unint64_t v303;
  unsigned __int8 v304;
  uint64_t n;
  uint64_t v306;
  unsigned __int8 v307;
  uint64_t v308;
  uint64_t ii;
  int v310;
  float v312;
  float v313;
  float v314;
  uint64_t *v315;
  char *v316;
  char *v317;
  int v318;
  int v319;
  uint64_t *v320;
  float v321;
  uint64_t *v322;
  uint64_t *v323;
  float *v324;
  float *v325;
  uint64_t *v326;
  unint64_t v327;
  unint64_t v328;
  int v329;
  int v330;
  uint64_t *v331;
  unint64_t v332;
  int v334;
  char *v335;
  uint64_t *v336;
  unsigned int v338;
  int v339;
  char *v340;
  int v341;
  _QWORD *v343;
  unint64_t v344;
  int v345;
  unsigned int v346;
  _QWORD *v347;
  uint64_t v349;
  _BYTE v350[101];
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  _BYTE v361[21];
  int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  _BYTE v372[21];
  int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  int v380;
  uint64_t *v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  int v385;
  unint64_t v386;
  float v387;
  uint64_t v388;
  float32x2_t v389;
  float32x2_t v390;
  _BYTE v391[27];
  uint64_t v392;
  int v393;
  float32x2_t v394;
  _QWORD v395[14];
  int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;

  v9 = a1;
  v400 = *MEMORY[0x24BDAC8D0];
  v10 = (*a4)++;
  LODWORD(v366) = v10;
  v373 = 0;
  v376 = 0;
  v374 = 0;
  v375 = 0;
  v367 = 0u;
  v368 = 0u;
  v369 = 0u;
  v370 = 0u;
  v371 = 0u;
  memset(v372, 0, sizeof(v372));
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 2);
  if (v11 != (uint64_t)(a1[5] - a1[4]) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_405:
      abort();
    }
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[2] - v9[1]) >> 2);
  }
  v12 = v11;
  if ((_DWORD)v11)
  {
    v13 = 0;
    v15 = v9[4];
    v14 = v9[5];
    while (1)
    {
      v16 = (v14 - v15) >> 2;
      if (v16 <= v13)
      {
        v17 = v13;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_405;
        }
        v15 = v9[4];
        v14 = v9[5];
        v16 = (v14 - v15) >> 2;
        v13 = v17;
      }
      v18 = (uint64_t)&(*a3)[96 * *(unsigned int *)(v15 + 4 * (v13 % v16))];
      v19 = *(float *)(v18 + 36);
      v20 = *(unsigned __int8 *)(v18 + 94);
      if (v19 < a6 || v20 != 0)
        break;
      if (v12 == ++v13)
        goto LABEL_15;
    }
    v334 = v13;
  }
  else
  {
LABEL_15:
    v334 = 0;
  }
  v22 = 0;
  v23 = (float)(a7 * 3.0) * 0.125;
  v24 = "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/Occu"
        "pancyMapper/SpatialBoundary.h";
  v25 = (void (*)(void **))sub_22457406C;
  v26 = (float)(a7 * 4.5) * 0.125;
  v347 = v9;
  while (1)
  {
    v28 = v9[1];
    v27 = v9[2];
    v29 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 2);
    if (v29 != (uint64_t)(v9[5] - v9[4]) >> 2)
    {
      v30 = v22;
      if (sub_224573870(v24, 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, v25))
        goto LABEL_405;
      v28 = v9[1];
      v27 = v9[2];
      v29 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 2);
      v22 = v30;
    }
    if (v22 >= v29)
      break;
    v338 = v22;
    v31 = (v22 + v334) % (0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 2));
    v33 = v9[4];
    v32 = v9[5];
    v343 = (_QWORD *)v31;
    if (v31 >= (v32 - v33) >> 2)
    {
      if (sub_224573870(v24, 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, v25))
      {
        goto LABEL_405;
      }
      v33 = v9[4];
      v32 = v9[5];
    }
    v34 = 0;
    do
    {
      v39 = v34;
      v41 = v9[1];
      v40 = v9[2];
      v42 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v41) >> 2);
      if (v42 != (v32 - v33) >> 2)
      {
        sub_2245739C8(v24, 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, v25);
        v43 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v44 = qword_255795648;
          for (i = qword_255795650; v44 != i; v44 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v44)(*(_QWORD *)(v44 + 8), "nodes_.size() == edge_indices_.size()", 37, "", 0);
        }
        v46 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v9 = v347;
        if (!byte_255795670)
          goto LABEL_405;
        qword_255795660(*(_QWORD *)algn_255795668, "nodes_.size() == edge_indices_.size()", 37, "", 0);
        v41 = v347[1];
        v40 = v347[2];
        v42 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v41) >> 2);
      }
      if (v39 >= v42)
        break;
      v47 = (v39 + (_DWORD)v343) % (0xAAAAAAAAAAAAAAABLL * ((v40 - v41) >> 2));
      v33 = v9[4];
      v32 = v9[5];
      v48 = (v32 - v33) >> 2;
      if (v48 <= v47)
      {
        sub_2245739C8(v24, 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, v25);
        v49 = v25;
        v50 = v24;
        v51 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v53 = qword_255795648;
          for (j = qword_255795650; v53 != j; v53 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v53)(*(_QWORD *)(v53 + 8), "index < edge_indices_.size()", 28, "Edge index out of bounds", 24);
        }
        v54 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v9 = v347;
        v24 = v50;
        v25 = v49;
        if (!byte_255795670)
          goto LABEL_405;
        qword_255795660(*(_QWORD *)algn_255795668, "index < edge_indices_.size()", 28, "Edge index out of bounds", 24);
        v33 = v347[4];
        v32 = v347[5];
        v48 = (v32 - v33) >> 2;
      }
      v35 = (uint64_t)&(*a3)[96 * *(unsigned int *)(v33 + 4 * (v47 % v48))];
      v36 = *(float *)(v35 + 36);
      v37 = *(unsigned __int8 *)(v35 + 94);
      v34 = v39 + 1;
    }
    while (v36 >= a6 && v37 == 0);
    if (v39 <= 1)
      LODWORD(v39) = 1;
    sub_22399DAFC(v9, a2, a3, v343, v39, (uint64_t)&v366, (float)(a7 * 3.0) * 0.125);
    v22 = v39 + v338;
  }
  sub_22399A4DC((uint64_t)&v366, a2);
  v55 = (*a4)++;
  LODWORD(v355) = v55;
  v362 = 0;
  v364 = 0;
  v365 = 0;
  v363 = 0;
  v356 = 0u;
  v357 = 0u;
  v358 = 0u;
  v359 = 0u;
  v360 = 0u;
  memset(v361, 0, sizeof(v361));
  sub_2239A506C(&v356, (char *)v367, *((char **)&v367 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v367 + 1) - v367) >> 2));
  sub_22342D7E8((_QWORD *)&v357 + 1, *((char **)&v368 + 1), (char *)v369, (uint64_t)(v369 - *((_QWORD *)&v368 + 1)) >> 2);
  v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
  if (v56 != (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_406;
    }
    v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
  }
  v57 = v56;
  if (!(_DWORD)v56)
    goto LABEL_190;
  v58 = 0;
  v60 = *((_QWORD *)&v357 + 1);
  v59 = v358;
  while (1)
  {
    v61 = (v59 - v60) >> 2;
    if (v61 <= v58)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_406;
      }
      v60 = *((_QWORD *)&v357 + 1);
      v59 = v358;
      v61 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5) <= *(unsigned int *)(v60 + 4 * (v58 % v61)))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 125, (uint64_t)"GetEdgeIndex(index) < edges.size()", 34, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_406;
      }
      v60 = *((_QWORD *)&v357 + 1);
      v59 = v358;
    }
    v62 = (v59 - v60) >> 2;
    if (v62 <= v58)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_406;
      }
      v60 = *((_QWORD *)&v357 + 1);
      v59 = v358;
      v62 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
    }
    if (*(float *)&(*a3)[96 * *(unsigned int *)(v60 + 4 * (v58 % v62)) + 36] >= a6)
      break;
    if (v57 == ++v58)
      goto LABEL_190;
  }
  if ((_DWORD)v58 == -1)
    goto LABEL_190;
  v63 = *((_QWORD *)&v356 + 1);
  v64 = v356;
  v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
  if (v65 != (v59 - v60) >> 2)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v63 = *((_QWORD *)&v356 + 1);
      v64 = v356;
      v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
      goto LABEL_81;
    }
LABEL_406:
    abort();
  }
LABEL_81:
  if ((_DWORD)v65)
  {
    v312 = v23 + v23;
    v313 = (float)(a7 * 4.5) * 0.125;
    v314 = a7;
    while (1)
    {
      while (1)
      {
        v329 = v65;
        v66 = v58;
        v67 = *((_QWORD *)&v357 + 1);
        v68 = v358;
        v69 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
        if (v69 <= v58)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_406;
          }
          v67 = *((_QWORD *)&v357 + 1);
          v68 = v358;
          v69 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5) <= *(unsigned int *)(v67 + 4 * (v58 % v69)))
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 149, (uint64_t)"GetEdgeIndex(boundary_index) < edges.size()", 43, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_406;
          }
          v67 = *((_QWORD *)&v357 + 1);
          v68 = v358;
        }
        v70 = (v68 - v67) >> 2;
        if (v70 <= v58)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_406;
          }
          v67 = *((_QWORD *)&v357 + 1);
          v70 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
        }
        v339 = *(_DWORD *)(v67 + 4 * (v58 % v70));
        v335 = *a3;
        v71 = v356;
        v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
        if (v72 <= v58)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_406;
          }
          v71 = v356;
          v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
        }
        v73 = (uint64_t *)(v71 + 12 * (v58 % v72));
        v74 = *v73;
        v327 = (v58 + 1);
        v75 = v327 % (0xAAAAAAAAAAAAAAABLL * ((v63 - v64) >> 2));
        LODWORD(v395[1]) = *((_DWORD *)v73 + 2);
        v395[0] = v74;
        if (v72 <= v75)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_406;
          }
          v71 = v356;
          v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
        }
        v76 = v71 + 12 * (v75 % v72);
        v77 = *(uint64_t **)v76;
        LODWORD(v382) = *(_DWORD *)(v76 + 8);
        v381 = v77;
        if (!sub_2239942A0(a2, (int *)v395)
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 155, (uint64_t)"node_map.count(edge_begin_node_pos) == 1", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !sub_2239942A0(a2, (int *)&v381)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 156, (uint64_t)"node_map.count(edge_end_node_pos) == 1", 38, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_406;
        }
        v78 = sub_2239942A0(a2, (int *)v395);
        if (!v78)
          goto LABEL_408;
        v331 = sub_2239942A0(a2, (int *)&v381);
        if (!v331)
          goto LABEL_408;
        v325 = (float *)&v335[96 * v339 + 36];
        if (*v325 >= a6)
        {
          v79 = 0;
          v81 = *((_QWORD *)&v357 + 1);
          v80 = v358;
          v323 = v78;
          while (1)
          {
            v83 = v79;
            v84 = *((_QWORD *)&v356 + 1);
            v85 = v356;
            v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
            if (v86 != (v80 - v81) >> 2)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_406;
              }
              v84 = *((_QWORD *)&v356 + 1);
              v85 = v356;
              v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
            }
            v87 = (v83 + v75);
            if (v83 >= v86)
              break;
            v88 = v87 % (0xAAAAAAAAAAAAAAABLL * ((v84 - v85) >> 2));
            v81 = *((_QWORD *)&v357 + 1);
            v80 = v358;
            v89 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
            if (v89 <= v88)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_406;
              }
              v81 = *((_QWORD *)&v357 + 1);
              v80 = v358;
              v89 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
            }
            v82 = *(float *)&(*a3)[96 * *(unsigned int *)(v81 + 4 * (v88 % v89)) + 36];
            v79 = v83 + 1;
            if (v82 >= a6)
            {
              v84 = *((_QWORD *)&v356 + 1);
              v85 = v356;
              break;
            }
          }
          if (v83)
          {
            v344 = v87 % (0xAAAAAAAAAAAAAAABLL * ((v84 - v85) >> 2));
            if ((_DWORD)v66 != (_DWORD)v344)
            {
              v90 = *((_QWORD *)&v357 + 1);
              v91 = v358;
              v92 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
              if (v92 <= v344)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_406;
                }
                v90 = *((_QWORD *)&v357 + 1);
                v91 = v358;
                v92 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
              }
              if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5) <= *(unsigned int *)(v90 + 4 * (v344 % v92)))
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 176, (uint64_t)"GetEdgeIndex(next_confident_index) < edges.size()", 49, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_406;
                }
                v90 = *((_QWORD *)&v357 + 1);
                v91 = v358;
              }
              v93 = (v91 - v90) >> 2;
              if (v93 <= v344)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_406;
                }
                v90 = *((_QWORD *)&v357 + 1);
                v93 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
              }
              v318 = *(_DWORD *)(v90 + 4 * (v344 % v93));
              v316 = *a3;
              v94 = v356;
              v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
              if (v95 <= v344)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_406;
                }
                v94 = v356;
                v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
              }
              v96 = (uint64_t *)(v94 + 12 * (v344 % v95));
              v97 = *v96;
              *(_DWORD *)v350 = *((_DWORD *)v96 + 2);
              v349 = v97;
              if (!sub_2239942A0(a2, (int *)&v349)
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 179, (uint64_t)"node_map.count(GetNodePosition(next_confident_index)) == 1", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_406;
              }
              v98 = v356;
              v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
              if (v99 <= v344)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_406;
                }
                v98 = v356;
                v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
              }
              v100 = (uint64_t *)(v98 + 12 * (v344 % v99));
              v101 = *v100;
              *(_DWORD *)v350 = *((_DWORD *)v100 + 2);
              v349 = v101;
              v320 = sub_2239942A0(a2, (int *)&v349);
              if (!v320)
                goto LABEL_408;
              v102 = (v344 + 1) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2));
              v103 = (uint64_t *)(v356 + 12 * v102);
              v104 = *v103;
              *(_DWORD *)v350 = *((_DWORD *)v103 + 2);
              v349 = v104;
              if (!sub_2239942A0(a2, (int *)&v349)
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 184, (uint64_t)"node_map.count(GetNodePosition(next_next_confident_index)) == 1", 63, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_406;
              }
              v105 = v356;
              v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
              if (v106 <= v102)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_406;
                }
                v105 = v356;
                v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
              }
              v107 = (uint64_t *)(v105 + 12 * (v102 % v106));
              v108 = *v107;
              *(_DWORD *)v350 = *((_DWORD *)v107 + 2);
              v349 = v108;
              v315 = sub_2239942A0(a2, (int *)&v349);
              if (!v315)
LABEL_408:
                sub_223198218("unordered_map::at: key not found");
              v109 = 0;
              v110 = 0.0;
              v112 = *((_QWORD *)&v357 + 1);
              v111 = v358;
              do
              {
                v113 = (v109 + v75)
                     % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2));
                v114 = (v111 - v112) >> 2;
                if (v114 <= v113)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
                  {
                    goto LABEL_406;
                  }
                  v112 = *((_QWORD *)&v357 + 1);
                  v111 = v358;
                  v114 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
                }
                if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5) <= *(unsigned int *)(v112 + 4 * (v113 % v114)))
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 194, (uint64_t)"GetEdgeIndex(low_confidence_boundary_index) < edges.size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    goto LABEL_406;
                  }
                  v112 = *((_QWORD *)&v357 + 1);
                  v111 = v358;
                }
                v115 = (v111 - v112) >> 2;
                if (v115 <= v113)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
                  {
                    goto LABEL_406;
                  }
                  v112 = *((_QWORD *)&v357 + 1);
                  v111 = v358;
                  v115 = (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2;
                }
                v110 = v110 + *(float *)&(*a3)[96 * *(unsigned int *)(v112 + 4 * (v113 % v115)) + 32];
                ++v109;
                --v83;
              }
              while (v83);
              if (!v335[96 * v339 + 94] && !v316[96 * v318 + 94] && v110 <= 0.75)
                break;
            }
          }
        }
LABEL_83:
        v63 = *((_QWORD *)&v356 + 1);
        v64 = v356;
        LODWORD(v58) = v327 % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2));
        LODWORD(v65) = v329 - 1;
        if (v329 == 1)
          goto LABEL_190;
      }
      v116 = *((float *)v320 + 12);
      v321 = *((float *)v320 + 11);
      v118 = *((float *)v331 + 11);
      v117 = *((float *)v331 + 12);
      v119 = &v316[96 * v318];
      *(float *)&v120 = (float)(*v325 + *((float *)v119 + 9)) * 0.5;
      v121 = a3[1];
      LODWORD(v349) = -1431655765 * ((unint64_t)(v121 - *a3) >> 5);
      WORD2(v349) = 257;
      v122 = v323 + 4;
      *(_QWORD *)v350 = v323[4];
      *(_DWORD *)&v350[8] = *((_DWORD *)v323 + 10);
      *(_QWORD *)&v350[12] = v315[4];
      *(_DWORD *)&v350[20] = *((_DWORD *)v315 + 10);
      *(_DWORD *)&v350[40] = 0;
      *(_DWORD *)&v350[36] = 0;
      *(_QWORD *)&v350[44] = *(uint64_t *)((char *)v323 + 44);
      v123 = *(float *)&v350[48];
      *(_QWORD *)&v350[52] = *(uint64_t *)((char *)v315 + 44);
      v124 = *(float *)&v350[56];
      *(_WORD *)&v350[72] = 0;
      *(_QWORD *)&v350[76] = -1;
      *(_WORD *)&v350[84] = 0;
      v350[86] = 0;
      v125 = vsub_f32(*(float32x2_t *)&v350[52], *(float32x2_t *)&v350[44]);
      v126 = sqrtf(vmla_lane_f32(vmul_f32(v125, v125), (float32x2_t)vdup_lane_s32((int32x2_t)v125, 1), v125, 1).f32[0]);
      *(_QWORD *)&v350[24] = __PAIR64__(v120, LODWORD(v126));
      *(float *)&v350[32] = v126 / *(float *)&v120;
      v127 = *(float *)&v350[52];
      v128 = *(float *)&v350[44];
      if (*(float *)&v350[52] >= *(float *)&v350[44])
        v129 = *(float *)&v350[44];
      else
        v129 = *(float *)&v350[52];
      if (*(float *)&v350[44] >= *(float *)&v350[52])
        v130 = *(float *)&v350[44];
      else
        v130 = *(float *)&v350[52];
      *(float *)&v350[60] = v129;
      *(float *)&v350[64] = v130;
      v131 = (float)(atan2f(v125.f32[1], v125.f32[0]) * -57.296) + 90.0;
      if (v131 < 0.0)
        v131 = v131 + 360.0;
      *(float *)&v350[68] = v131;
      v132 = fabsf((float)((float)((float)(v123 - v117) * (float)(v127 - v128))- (float)((float)(v128 - v118) * (float)(v124 - v123)))/ v126);
      v133 = fabsf((float)((float)((float)(v123 - v116) * (float)(v127 - v128))- (float)((float)(v128 - v321) * (float)(v124 - v123)))/ v126);
      v134 = &v335[96 * v339];
      v135 = vsub_f32(*(float32x2_t *)(v134 + 60), *(float32x2_t *)(v134 + 52));
      v136 = vsub_f32(*(float32x2_t *)(v119 + 60), *(float32x2_t *)(v119 + 52));
      if ((float)(vmla_lane_f32(vmul_f32(v135, v136), (float32x2_t)vdup_lane_s32((int32x2_t)v136, 1), v135, 1).f32[0]
                 / (float)(*((float *)v134 + 8) * *((float *)v119 + 8))) <= 0.99
        || (v132 < v312 ? (v137 = v133 < v312) : (v137 = 0), !v137))
      {
        if (v132 >= v23 || v133 >= v23)
        {
          v9 = v347;
          v26 = v313;
          a7 = v314;
          goto LABEL_83;
        }
      }
      v9 = v347;
      v26 = v313;
      a7 = v314;
      if (v121 >= a3[2])
      {
        v144 = sub_2239A403C(a3, (uint64_t)&v349);
      }
      else
      {
        v139 = v349;
        *((_WORD *)v121 + 2) = WORD2(v349);
        *(_DWORD *)v121 = v139;
        v140 = *(_QWORD *)v350;
        *((_DWORD *)v121 + 4) = *(_DWORD *)&v350[8];
        *((_QWORD *)v121 + 1) = v140;
        v141 = *(_QWORD *)&v350[12];
        *((_DWORD *)v121 + 7) = *(_DWORD *)&v350[20];
        *(_QWORD *)(v121 + 20) = v141;
        v142 = *(_QWORD *)&v350[24];
        *((_DWORD *)v121 + 10) = *(_DWORD *)&v350[32];
        *((_QWORD *)v121 + 4) = v142;
        *(_QWORD *)(v121 + 44) = *(_QWORD *)&v350[36];
        *(_QWORD *)(v121 + 52) = *(_QWORD *)&v350[44];
        *(_QWORD *)(v121 + 60) = *(_QWORD *)&v350[52];
        v143 = *(_OWORD *)&v350[60];
        *(_OWORD *)(v121 + 79) = *(_OWORD *)&v350[71];
        *(_OWORD *)(v121 + 68) = v143;
        v144 = v121 + 96;
      }
      a3[1] = v144;
      if (v66 >= (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/SpatialBoundary.cpp", 1041, (uint64_t)"boundary_index < result.edge_indices_.size()", 44, (uint64_t)"Merged edge index out of bounds", 31, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_406;
      }
      v145 = v356;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2) <= v66)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/SpatialBoundary.cpp", 1043, (uint64_t)"boundary_index < result.nodes_.size()", 37, (uint64_t)"Merged node index out of bounds", 31, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_406;
        }
        v145 = v356;
      }
      *(_DWORD *)(*((_QWORD *)&v357 + 1) + 4 * v66) = v349;
      v146 = v145 + 12 * v66;
      if ((uint64_t *)v146 != v122)
      {
        v147 = *v122;
        *(_DWORD *)(v146 + 8) = *((_DWORD *)v323 + 10);
        *(_QWORD *)v146 = v147;
      }
      sub_2239A58C0((char *)&v357 + 8, v66, v344, 1);
      sub_2239A5A44((uint64_t)&v356, v66, v344, 1);
      v63 = *((_QWORD *)&v356 + 1);
      v64 = v356;
      v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
      if (v65 == (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2)
        goto LABEL_187;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_406;
      }
      v63 = *((_QWORD *)&v356 + 1);
      v64 = v356;
      v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
      if (v65 == (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2)
      {
LABEL_187:
        LODWORD(v58) = v66 % v65;
      }
      else
      {
        v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2);
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_406;
        }
        v63 = *((_QWORD *)&v356 + 1);
        v64 = v356;
        LODWORD(v58) = v66 % (-1431655765 * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2));
        LODWORD(v65) = v148;
        if (!(_DWORD)v148)
          break;
      }
    }
  }
LABEL_190:
  sub_22399A4DC((uint64_t)&v355, a2);
  v149 = (*a4)++;
  LODWORD(v349) = v149;
  v351 = 0;
  v353 = 0;
  v354 = 0;
  v352 = 0;
  memset(v350, 0, sizeof(v350));
  sub_2239A506C(v350, (char *)v356, *((char **)&v356 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 2));
  sub_22342D7E8(&v350[24], *((char **)&v357 + 1), (char *)v358, (uint64_t)(v358 - *((_QWORD *)&v357 + 1)) >> 2);
  v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
  if (v150 != (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_404;
    }
    v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
  }
  v151 = v150;
  if ((_DWORD)v150)
  {
    v152 = 0;
    v154 = *(_QWORD *)&v350[24];
    v153 = *(_QWORD *)&v350[32];
    while (1)
    {
      v155 = (v153 - v154) >> 2;
      if (v155 <= v152)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_404;
        }
        v154 = *(_QWORD *)&v350[24];
        v153 = *(_QWORD *)&v350[32];
        v155 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5) <= *(unsigned int *)(v154 + 4 * (v152 % v155)))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 125, (uint64_t)"GetEdgeIndex(index) < edges.size()", 34, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_404;
        }
        v154 = *(_QWORD *)&v350[24];
        v153 = *(_QWORD *)&v350[32];
      }
      v156 = (v153 - v154) >> 2;
      if (v156 <= v152)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_404;
        }
        v154 = *(_QWORD *)&v350[24];
        v153 = *(_QWORD *)&v350[32];
        v156 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
      }
      if (*(float *)&(*a3)[96 * *(unsigned int *)(v154 + 4 * (v152 % v156)) + 36] >= a6)
        break;
      if (v151 == ++v152)
        goto LABEL_349;
    }
    if ((_DWORD)v152 != -1)
    {
      v157 = *(_QWORD *)&v350[8];
      v158 = *(_QWORD *)v350;
      v159 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
      if (v159 != (v153 - v154) >> 2)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_404;
        }
        v157 = *(_QWORD *)&v350[8];
        v158 = *(_QWORD *)v350;
        v159 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
      }
      if ((_DWORD)v159)
      {
        v160 = v159;
        do
        {
          v330 = v160;
          v161 = v152;
          v162 = *(_QWORD *)&v350[24];
          v163 = *(_QWORD *)&v350[32];
          v164 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
          if (v164 <= v152)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v162 = *(_QWORD *)&v350[24];
            v163 = *(_QWORD *)&v350[32];
            v164 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
          }
          v165 = a3;
          if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5) <= *(unsigned int *)(v162 + 4 * (v152 % v164)))
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 149, (uint64_t)"GetEdgeIndex(boundary_index) < edges.size()", 43, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v162 = *(_QWORD *)&v350[24];
            v163 = *(_QWORD *)&v350[32];
            v165 = a3;
          }
          v166 = (v163 - v162) >> 2;
          if (v166 <= v152)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v162 = *(_QWORD *)&v350[24];
            v166 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
            v165 = a3;
          }
          v345 = *(_DWORD *)(v162 + 4 * (v152 % v166));
          v340 = *v165;
          v167 = *(_QWORD *)v350;
          v168 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
          if (v168 <= v152)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v167 = *(_QWORD *)v350;
            v168 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
          }
          v169 = (uint64_t *)(v167 + 12 * (v152 % v168));
          v170 = *v169;
          v332 = (v152 + 1);
          v171 = v332 % (0xAAAAAAAAAAAAAAABLL * ((v157 - v158) >> 2));
          v380 = *((_DWORD *)v169 + 2);
          v379 = v170;
          if (v168 <= v171)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v167 = *(_QWORD *)v350;
            v168 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
          }
          v172 = (uint64_t *)(v167 + 12 * (v171 % v168));
          v173 = *v172;
          v378 = *((_DWORD *)v172 + 2);
          v377 = v173;
          if (!sub_2239942A0(a2, (int *)&v379)
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 155, (uint64_t)"node_map.count(edge_begin_node_pos) == 1", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !sub_2239942A0(a2, (int *)&v377)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 156, (uint64_t)"node_map.count(edge_end_node_pos) == 1", 38, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_404;
          }
          v336 = sub_2239942A0(a2, (int *)&v379);
          if (!v336)
            goto LABEL_407;
          v174 = sub_2239942A0(a2, (int *)&v377);
          if (!v174)
            goto LABEL_407;
          v175 = &v340[96 * v345];
          v177 = *((float *)v175 + 9);
          v176 = (float *)(v175 + 36);
          if (v177 < a6)
          {
LABEL_235:
            v9 = v347;
LABEL_236:
            LODWORD(v178) = v330;
            goto LABEL_237;
          }
          v324 = v176;
          v179 = 0;
          v181 = *(_QWORD *)&v350[24];
          v180 = *(_QWORD *)&v350[32];
          v9 = v347;
          while (1)
          {
            v183 = v179;
            v184 = *(_QWORD *)&v350[8];
            v185 = *(_QWORD *)v350;
            v186 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
            if (v186 != (v180 - v181) >> 2)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_404;
              }
              v184 = *(_QWORD *)&v350[8];
              v185 = *(_QWORD *)v350;
              v186 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
            }
            v187 = (v183 + v171);
            if (v183 >= v186)
              break;
            v188 = v187 % (0xAAAAAAAAAAAAAAABLL * ((v184 - v185) >> 2));
            v181 = *(_QWORD *)&v350[24];
            v180 = *(_QWORD *)&v350[32];
            v189 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
            if (v189 <= v188)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_404;
              }
              v181 = *(_QWORD *)&v350[24];
              v180 = *(_QWORD *)&v350[32];
              v189 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
            }
            v182 = *(float *)&(*a3)[96 * *(unsigned int *)(v181 + 4 * (v188 % v189)) + 36];
            v179 = v183 + 1;
            if (v182 >= a6)
            {
              v184 = *(_QWORD *)&v350[8];
              v185 = *(_QWORD *)v350;
              break;
            }
          }
          if (!v183)
            goto LABEL_236;
          v190 = v187 % (0xAAAAAAAAAAAAAAABLL * ((v184 - v185) >> 2));
          if ((_DWORD)v161 == (_DWORD)v190)
            goto LABEL_236;
          v191 = *(_QWORD *)&v350[24];
          v192 = *(_QWORD *)&v350[32];
          v193 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
          v328 = v190;
          if (v193 <= v190)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v191 = *(_QWORD *)&v350[24];
            v192 = *(_QWORD *)&v350[32];
            v193 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
            v194 = a3;
            v190 = v328;
          }
          else
          {
            v194 = a3;
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v194[1] - *v194) >> 5) <= *(unsigned int *)(v191 + 4 * (v190 % v193)))
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 176, (uint64_t)"GetEdgeIndex(next_confident_index) < edges.size()", 49, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v191 = *(_QWORD *)&v350[24];
            v192 = *(_QWORD *)&v350[32];
            v194 = a3;
            v190 = v328;
          }
          v195 = (v192 - v191) >> 2;
          if (v195 <= v190)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v191 = *(_QWORD *)&v350[24];
            v195 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
            v194 = a3;
            v190 = v328;
          }
          v319 = *(_DWORD *)(v191 + 4 * (v190 % v195));
          v317 = *v194;
          v196 = *(_QWORD *)v350;
          v197 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
          if (v197 <= v190)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v196 = *(_QWORD *)v350;
            v197 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
            v190 = v328;
          }
          v198 = (uint64_t *)(v196 + 12 * (v190 % v197));
          v199 = *v198;
          LODWORD(v395[1]) = *((_DWORD *)v198 + 2);
          v395[0] = v199;
          if (!sub_2239942A0(a2, (int *)v395)
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 179, (uint64_t)"node_map.count(GetNodePosition(next_confident_index)) == 1", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_404;
          }
          v200 = *(_QWORD *)v350;
          v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
          v202 = v328;
          if (v201 <= v328)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v200 = *(_QWORD *)v350;
            v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
            v202 = v328;
          }
          v203 = (uint64_t *)(v200 + 12 * (v202 % v201));
          v204 = *v203;
          LODWORD(v395[1]) = *((_DWORD *)v203 + 2);
          v395[0] = v204;
          v326 = sub_2239942A0(a2, (int *)v395);
          if (!v326)
            goto LABEL_407;
          v205 = (v328 + 1)
               % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2));
          v206 = *(_QWORD *)v350 + 12 * v205;
          v207 = *(_QWORD *)v206;
          LODWORD(v395[1]) = *(_DWORD *)(v206 + 8);
          v395[0] = v207;
          if (!sub_2239942A0(a2, (int *)v395)
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 184, (uint64_t)"node_map.count(GetNodePosition(next_next_confident_index)) == 1", 63, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_404;
          }
          v208 = *(_QWORD *)v350;
          v209 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
          if (v209 <= v205)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v208 = *(_QWORD *)v350;
            v209 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
          }
          v210 = (uint64_t *)(v208 + 12 * (v205 % v209));
          v211 = *v210;
          LODWORD(v395[1]) = *((_DWORD *)v210 + 2);
          v395[0] = v211;
          v322 = sub_2239942A0(a2, (int *)v395);
          if (!v322)
LABEL_407:
            sub_223198218("unordered_map::at: key not found");
          v212 = 0;
          v213 = 0.0;
          v215 = *(_QWORD *)&v350[24];
          v214 = *(_QWORD *)&v350[32];
          v9 = v347;
          do
          {
            v217 = (v212 + v171)
                 % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2));
            v218 = (v214 - v215) >> 2;
            if (v218 <= v217)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_404;
              }
              v215 = *(_QWORD *)&v350[24];
              v214 = *(_QWORD *)&v350[32];
              v218 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
            }
            if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5) <= *(unsigned int *)(v215 + 4 * (v217 % v218)))
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 194, (uint64_t)"GetEdgeIndex(low_confidence_boundary_index) < edges.size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_404;
              }
              v215 = *(_QWORD *)&v350[24];
              v214 = *(_QWORD *)&v350[32];
            }
            v216 = (v214 - v215) >> 2;
            if (v216 <= v217)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_404;
              }
              v215 = *(_QWORD *)&v350[24];
              v214 = *(_QWORD *)&v350[32];
              v216 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
            }
            v213 = v213 + *(float *)&(*a3)[96 * *(unsigned int *)(v215 + 4 * (v217 % v216)) + 32];
            ++v212;
            --v183;
          }
          while (v183);
          if (v213 > 0.75)
            goto LABEL_236;
          if (!sub_22369F3FC((float32x2_t *)&v340[96 * v345 + 52], (float32x2_t *)&v317[96 * v319 + 52], &v394, 1))goto LABEL_235;
          v219 = vsub_f32(*(float32x2_t *)((char *)v174 + 44), v394);
          v220 = vmla_lane_f32(vmul_f32(v219, v219), (float32x2_t)vdup_lane_s32((int32x2_t)v219, 1), v219, 1);
          v221 = vsub_f32(*(float32x2_t *)((char *)v326 + 44), v394);
          if (vadd_f32(v220, vmla_lane_f32(vmul_f32(v221, v221), (float32x2_t)vdup_lane_s32((int32x2_t)v221, 1), v221, 1)).f32[0] > 0.5625)goto LABEL_235;
          v392 = v174[4];
          v393 = *((_DWORD *)v174 + 10);
          do
            ++v393;
          while (sub_2239942A0(a2, (int *)&v392));
          *(_QWORD *)((char *)v395 + 2) = v392;
          *(_DWORD *)((char *)&v395[1] + 2) = v393;
          v222 = v394;
          v381 = &v392;
          v223 = sub_2239A5D2C((uint64_t)a2, (int *)&v392, (uint64_t)&unk_2245BA939, &v381);
          *((_WORD *)v223 + 14) = 257;
          *((_QWORD *)v223 + 4) = *(_QWORD *)((char *)v395 + 2);
          *((_DWORD *)v223 + 10) = *(_DWORD *)((char *)&v395[1] + 2);
          *(float32x2_t *)(v223 + 44) = v222;
          *(_QWORD *)(v223 + 52) = 0;
          *(_QWORD *)(v223 + 68) = 0;
          *(_QWORD *)(v223 + 60) = 0;
          v225 = *a3;
          v224 = a3[1];
          v226 = &v340[96 * v345];
          v227 = v226[4];
          v228 = v226[5];
          v229 = *v324;
          v230 = sub_22393835C(a2, (int *)&v392);
          if (!v230)
            goto LABEL_407;
          v231 = -1431655765 * ((unint64_t)(v224 - v225) >> 5);
          LODWORD(v395[0]) = v231;
          BYTE4(v395[0]) = v227;
          BYTE5(v395[0]) = v228;
          v395[1] = v336[4];
          LODWORD(v395[2]) = *((_DWORD *)v336 + 10);
          *(_QWORD *)((char *)&v395[2] + 4) = v230[4];
          HIDWORD(v395[3]) = *((_DWORD *)v230 + 10);
          LODWORD(v395[6]) = 0;
          HIDWORD(v395[5]) = 0;
          v232 = v336 + 4;
          *(_QWORD *)((char *)&v395[6] + 4) = *(uint64_t *)((char *)v336 + 44);
          v233 = *(_QWORD *)((char *)&v395[6] + 4);
          v234 = *(float32x2_t *)((char *)v230 + 44);
          *(float32x2_t *)((char *)&v395[7] + 4) = v234;
          LOWORD(v395[10]) = 0;
          *(_QWORD *)((char *)&v395[10] + 4) = -1;
          WORD2(v395[11]) = 0;
          v235 = vsub_f32(v234, *(float32x2_t *)((char *)&v395[6] + 4));
          v395[4] = __PAIR64__(LODWORD(v229), COERCE_UNSIGNED_INT(sqrtf(vmla_lane_f32(vmul_f32(v235, v235), (float32x2_t)vdup_lane_s32((int32x2_t)v235, 1), v235, 1).f32[0])));
          if (v234.f32[0] >= *((float *)&v395[6] + 1))
            v236 = *((float *)&v395[6] + 1);
          else
            v236 = v234.f32[0];
          *(float *)&v395[5] = *(float *)&v395[4] / v229;
          *((float *)&v395[8] + 1) = v236;
          if (*((float *)&v395[6] + 1) >= v234.f32[0])
            v237 = *((float *)&v395[6] + 1);
          else
            v237 = v234.f32[0];
          *(float *)&v395[9] = v237;
          v238 = (float)(atan2f(v235.f32[1], v235.f32[0]) * -57.296) + 90.0;
          if (v238 < 0.0)
            v238 = v238 + 360.0;
          *((float *)&v395[9] + 1) = v238;
          BYTE6(v395[11]) = v340[96 * v345 + 94];
          v239 = &v317[96 * v319];
          v240 = v239[4];
          v241 = v239[5];
          v242 = *((float *)v239 + 9);
          v243 = sub_22393835C(a2, (int *)&v392);
          if (!v243)
            goto LABEL_407;
          LODWORD(v381) = v231 + 1;
          BYTE4(v381) = v240;
          BYTE5(v381) = v241;
          v382 = v243[4];
          v383 = *((_DWORD *)v243 + 10);
          v384 = v322[4];
          v385 = *((_DWORD *)v322 + 10);
          v388 = 0;
          v389 = *(float32x2_t *)((char *)v243 + 44);
          v244 = v389;
          v245 = *(float32x2_t *)((char *)v322 + 44);
          v390 = v245;
          *(_WORD *)&v391[12] = 0;
          *(_QWORD *)&v391[16] = -1;
          *(_WORD *)&v391[24] = 0;
          v246 = vsub_f32(v245, v389);
          v386 = __PAIR64__(LODWORD(v242), COERCE_UNSIGNED_INT(sqrtf(vmla_lane_f32(vmul_f32(v246, v246), (float32x2_t)vdup_lane_s32((int32x2_t)v246, 1), v246, 1).f32[0])));
          if (v245.f32[0] >= v389.f32[0])
            v247 = v389.f32[0];
          else
            v247 = v245.f32[0];
          v387 = *(float *)&v386 / v242;
          *(float *)v391 = v247;
          if (v389.f32[0] >= v245.f32[0])
            v248 = v389.f32[0];
          else
            v248 = v245.f32[0];
          *(float *)&v391[4] = v248;
          v249 = (float)(atan2f(v246.f32[1], v246.f32[0]) * -57.296) + 90.0;
          if (v249 < 0.0)
            v249 = v249 + 360.0;
          *(float *)&v391[8] = v249;
          v391[26] = v317[96 * v319 + 94];
          v250 = a3;
          v251 = a3[1];
          if (v251 >= a3[2])
          {
            v257 = sub_2239A403C(a3, (uint64_t)v395);
            v250 = a3;
            a3[1] = v257;
            if (v257 >= a3[2])
            {
LABEL_315:
              v263 = sub_2239A403C(v250, (uint64_t)&v381);
              v250 = a3;
              goto LABEL_316;
            }
          }
          else
          {
            v252 = v395[0];
            *((_WORD *)v251 + 2) = WORD2(v395[0]);
            *(_DWORD *)v251 = v252;
            v253 = v395[1];
            *((_DWORD *)v251 + 4) = v395[2];
            *((_QWORD *)v251 + 1) = v253;
            v254 = *(_QWORD *)((char *)&v395[2] + 4);
            *((_DWORD *)v251 + 7) = HIDWORD(v395[3]);
            *(_QWORD *)(v251 + 20) = v254;
            v255 = v395[4];
            *((_DWORD *)v251 + 10) = v395[5];
            *((_QWORD *)v251 + 4) = v255;
            *(_QWORD *)(v251 + 44) = *(_QWORD *)((char *)&v395[5] + 4);
            *(_QWORD *)(v251 + 52) = v233;
            *(float32x2_t *)(v251 + 60) = v234;
            v256 = *(_OWORD *)((char *)&v395[8] + 4);
            *(_OWORD *)(v251 + 79) = *(_OWORD *)((char *)&v395[9] + 7);
            *(_OWORD *)(v251 + 68) = v256;
            v257 = v251 + 96;
            a3[1] = v251 + 96;
            if (v251 + 96 >= a3[2])
              goto LABEL_315;
          }
          v258 = (int)v381;
          *((_WORD *)v257 + 2) = WORD2(v381);
          *(_DWORD *)v257 = v258;
          v259 = v382;
          *((_DWORD *)v257 + 4) = v383;
          *((_QWORD *)v257 + 1) = v259;
          v260 = v384;
          *((_DWORD *)v257 + 7) = v385;
          *(_QWORD *)(v257 + 20) = v260;
          v261 = v386;
          *((float *)v257 + 10) = v387;
          *((_QWORD *)v257 + 4) = v261;
          *(_QWORD *)(v257 + 44) = v388;
          *(float32x2_t *)(v257 + 52) = v244;
          *(float32x2_t *)(v257 + 60) = v245;
          v262 = *(_OWORD *)v391;
          *(_OWORD *)(v257 + 79) = *(_OWORD *)&v391[11];
          *(_OWORD *)(v257 + 68) = v262;
          v263 = v257 + 96;
LABEL_316:
          v250[1] = v263;
          v264 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
          if (v264 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2))
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/SpatialBoundary.cpp", 1161, (uint64_t)"result.edge_indices_.size() == result.nodes_.size()", 51, (uint64_t)"Edge and node counts must match", 31, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v264 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
          }
          if (v264 <= v161
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/SpatialBoundary.cpp", 1163, (uint64_t)"boundary_index < result.edge_indices_.size()", 44, (uint64_t)"Corner edge index out of bounds", 31, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_404;
          }
          v265 = *(_QWORD *)v350;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2) <= v161)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/SpatialBoundary.cpp", 1164, (uint64_t)"boundary_index < result.nodes_.size()", 37, (uint64_t)"Corner node index out of bounds", 31, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v265 = *(_QWORD *)v350;
          }
          v266 = *(_QWORD *)&v350[24];
          *(_DWORD *)(*(_QWORD *)&v350[24] + 4 * v161) = v395[0];
          v267 = v265 + 12 * v161;
          if ((uint64_t *)v267 != v232)
          {
            v268 = *v232;
            *(_DWORD *)(v267 + 8) = *((_DWORD *)v336 + 10);
            *(_QWORD *)v267 = v268;
            v266 = *(_QWORD *)&v350[24];
          }
          if (v328 >= (*(_QWORD *)&v350[32] - v266) >> 2
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/SpatialBoundary.cpp", 1170, (uint64_t)"next_boundary_index < result.edge_indices_.size()", 49, (uint64_t)"Next corner edge index out of bounds", 36, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_404;
          }
          v269 = *(_QWORD *)v350;
          v270 = v328;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2) <= v328)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/src/SpatialBoundary.cpp", 1172, (uint64_t)"next_boundary_index < result.nodes_.size()", 42, (uint64_t)"Next corner node index out of bounds", 36, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v269 = *(_QWORD *)v350;
            v270 = v328;
          }
          *(_DWORD *)(*(_QWORD *)&v350[24] + 4 * v270) = (_DWORD)v381;
          v271 = v269 + 12 * v270;
          if ((uint64_t *)v271 != &v392)
          {
            v272 = v392;
            *(_DWORD *)(v271 + 8) = v393;
            *(_QWORD *)v271 = v272;
          }
          if (v161 > v270)
          {
            v273 = *(_BYTE **)&v350[32];
            if (v332 < (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2
              && *(_QWORD *)&v350[24] + 4 * v161 + 4 != *(_QWORD *)&v350[32])
            {
              *(_QWORD *)&v350[32] = *(_QWORD *)&v350[24] + 4 * v161 + 4;
              v273 = *(_BYTE **)&v350[32];
            }
            if (!(_DWORD)v270)
              goto LABEL_345;
            v274 = *(char **)&v350[24];
            v275 = (char *)(*(_QWORD *)&v350[24] + 4 * v270);
            v276 = v273 - v275;
            if (v273 == v275)
              goto LABEL_340;
LABEL_339:
            memmove(v274, v275, v276);
            goto LABEL_340;
          }
          if ((v270 - v161) < 2)
            goto LABEL_345;
          v274 = (char *)(*(_QWORD *)&v350[24] + 4 * v161 + 4);
          v275 = (char *)(*(_QWORD *)&v350[24] + 4 * v270);
          if (v274 == v275)
            goto LABEL_345;
          v276 = *(_QWORD *)&v350[32] - (_QWORD)v275;
          if (*(char **)&v350[32] != v275)
            goto LABEL_339;
LABEL_340:
          *(_QWORD *)&v350[32] = &v274[v276];
LABEL_345:
          sub_2239A5A44((uint64_t)v350, v161, v270, 0);
          v178 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
          if (v178 != (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_404;
            }
            v178 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
          }
          v9 = v347;
LABEL_237:
          v157 = *(_QWORD *)&v350[8];
          v158 = *(_QWORD *)v350;
          LODWORD(v152) = v332 % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2));
          v160 = v178 - 1;
        }
        while (v160);
      }
    }
  }
LABEL_349:
  sub_22399A4DC((uint64_t)&v349, a2);
  v277 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
  if (v277 == (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2)
    goto LABEL_352;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_404:
    abort();
  }
  v277 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
LABEL_352:
  v278 = v277;
  if ((_DWORD)v277)
  {
    v279 = 0;
    v281 = *(_QWORD *)&v350[24];
    v280 = *(_QWORD *)&v350[32];
    while (1)
    {
      v282 = (v280 - v281) >> 2;
      if (v282 <= v279)
      {
        v283 = v279;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_404;
        }
        v281 = *(_QWORD *)&v350[24];
        v280 = *(_QWORD *)&v350[32];
        v282 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
        v279 = v283;
      }
      if (*(float *)&(*a3)[96 * *(unsigned int *)(v281 + 4 * (v279 % v282)) + 36] >= a6)
        break;
      if (v278 == ++v279)
        goto LABEL_359;
    }
    v341 = v279;
  }
  else
  {
LABEL_359:
    v341 = 0;
  }
  for (k = 0; ; k = v294 + v346)
  {
    v285 = *(_QWORD *)&v350[8];
    v286 = *(_QWORD *)v350;
    v287 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
    if (v287 != (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2)
    {
      v288 = k;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_404;
      }
      v285 = *(_QWORD *)&v350[8];
      v286 = *(_QWORD *)v350;
      v287 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
      k = v288;
    }
    if (k >= v287)
      break;
    v346 = k;
    v289 = (k + v341) % (0xAAAAAAAAAAAAAAABLL * ((v285 - v286) >> 2));
    v291 = *(_QWORD *)&v350[24];
    v290 = *(_QWORD *)&v350[32];
    if (v289 >= (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_404;
      }
      v291 = *(_QWORD *)&v350[24];
      v290 = *(_QWORD *)&v350[32];
    }
    v292 = 0;
    do
    {
      v294 = v292;
      v295 = *(_QWORD *)&v350[8];
      v296 = *(_QWORD *)v350;
      v297 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
      if (v297 != (v290 - v291) >> 2)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v298 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v298 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v299 = qword_255795648;
          for (m = qword_255795650; v299 != m; v299 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v299)(*(_QWORD *)(v299 + 8), "nodes_.size() == edge_indices_.size()", 37, "", 0);
        }
        v301 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v301 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          goto LABEL_404;
        qword_255795660(*(_QWORD *)algn_255795668, "nodes_.size() == edge_indices_.size()", 37, "", 0);
        v295 = *(_QWORD *)&v350[8];
        v296 = *(_QWORD *)v350;
        v297 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v350[8] - *(_QWORD *)v350) >> 2);
      }
      if (v294 >= v297)
        break;
      v302 = (v294 + v289) % (0xAAAAAAAAAAAAAAABLL * ((v295 - v296) >> 2));
      v291 = *(_QWORD *)&v350[24];
      v290 = *(_QWORD *)&v350[32];
      v303 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
      if (v303 <= v302)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C);
        v304 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v304 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v306 = qword_255795648;
          for (n = qword_255795650; v306 != n; v306 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v306)(*(_QWORD *)(v306 + 8), "index < edge_indices_.size()", 28, "Edge index out of bounds", 24);
        }
        v307 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v307 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v9 = v347;
        if (!byte_255795670)
          goto LABEL_404;
        qword_255795660(*(_QWORD *)algn_255795668, "index < edge_indices_.size()", 28, "Edge index out of bounds", 24);
        v291 = *(_QWORD *)&v350[24];
        v290 = *(_QWORD *)&v350[32];
        v303 = (uint64_t)(*(_QWORD *)&v350[32] - *(_QWORD *)&v350[24]) >> 2;
      }
      v293 = *(float *)&(*a3)[96 * *(unsigned int *)(v291 + 4 * (v302 % v303)) + 36];
      v292 = v294 + 1;
    }
    while (v293 < a6);
    if (v294 <= 1)
      LODWORD(v294) = 1;
    sub_22399DAFC(&v349, a2, a3, (_QWORD *)v289, v294, a5, v26);
  }
  sub_22399A4DC(a5, a2);
  v308 = v9[15];
  for (ii = v9[16]; v308 != ii; v308 += 144)
  {
    v310 = (*a4)++;
    LODWORD(v395[0]) = v310;
    v396 = 0;
    v398 = 0;
    v399 = 0;
    v397 = 0;
    memset(&v395[1], 0, 101);
    sub_2239A0CE8(v308, a2, a3, a6, a7);
    sub_2239A03FC(a5, (uint64_t)v395);
    sub_22391679C(v395);
  }
  *(_DWORD *)(a5 + 112) = *((_DWORD *)v9 + 28);
  *(_BYTE *)(a5 + 4) = *((_BYTE *)v9 + 4);
  sub_22391679C(&v349);
  sub_22391679C(&v355);
  return sub_22391679C(&v366);
}

void sub_2239A3EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  sub_22391679C(&a37);
  sub_22391679C(&a55);
  sub_22391679C(&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_2239A4028(_Unwind_Exception *a1)
{
  sub_22391679C(&STACK[0x200]);
  _Unwind_Resume(a1);
}

char *sub_2239A403C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 5);
  v6 = v5 + 1;
  if (v5 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - v4) >> 5) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 5) >= 0x155555555555555)
    v8 = 0x2AAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x2AAAAAAAAAAAAAALL)
      sub_223174E94();
    v9 = (char *)operator new(96 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[96 * v5];
  *(_DWORD *)v10 = *(_DWORD *)a2;
  *((_WORD *)v10 + 2) = *(_WORD *)(a2 + 4);
  *((_QWORD *)v10 + 1) = *(_QWORD *)(a2 + 8);
  *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(v10 + 20) = *(_QWORD *)(a2 + 20);
  *((_DWORD *)v10 + 7) = *(_DWORD *)(a2 + 28);
  *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 + 40);
  *((_QWORD *)v10 + 4) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 44) = *(_OWORD *)(a2 + 44);
  *(_QWORD *)(v10 + 60) = *(_QWORD *)(a2 + 60);
  *(_OWORD *)(v10 + 79) = *(_OWORD *)(a2 + 79);
  v11 = *(_OWORD *)(a2 + 68);
  v12 = v10 + 96;
  *(_OWORD *)(v10 + 68) = v11;
  if (v3 != v4)
  {
    do
    {
      v13 = *((_DWORD *)v3 - 24);
      v3 -= 96;
      v14 = *((_WORD *)v3 + 2);
      *((_DWORD *)v10 - 24) = v13;
      v10 -= 96;
      *((_WORD *)v10 + 2) = v14;
      v15 = *((_QWORD *)v3 + 1);
      *((_DWORD *)v10 + 4) = *((_DWORD *)v3 + 4);
      *((_QWORD *)v10 + 1) = v15;
      v16 = *(_QWORD *)(v3 + 20);
      *((_DWORD *)v10 + 7) = *((_DWORD *)v3 + 7);
      *(_QWORD *)(v10 + 20) = v16;
      v17 = *((_QWORD *)v3 + 4);
      *((_DWORD *)v10 + 10) = *((_DWORD *)v3 + 10);
      *((_QWORD *)v10 + 4) = v17;
      *(_QWORD *)(v10 + 44) = *(_QWORD *)(v3 + 44);
      *(_QWORD *)(v10 + 52) = *(_QWORD *)(v3 + 52);
      *(_QWORD *)(v10 + 60) = *(_QWORD *)(v3 + 60);
      v18 = *(_OWORD *)(v3 + 68);
      *(_OWORD *)(v10 + 79) = *(_OWORD *)(v3 + 79);
      *(_OWORD *)(v10 + 68) = v18;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[96 * v8];
  if (v3)
    operator delete(v3);
  return v12;
}

float sub_2239A41F4(float *a1, uint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  float v53;
  uint64_t *v54;
  float v55;
  float *v56;
  uint64_t v57;
  float v58;
  float v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  float v63;
  unint64_t v64;
  float v65;
  uint64_t *v66;
  uint64_t *v67;
  float v68;
  uint64_t v69;
  float v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  BOOL v81;
  uint64_t v82;
  uint64_t *v83;
  _DWORD *v84;
  float v85;
  int v86;
  uint64_t v87;
  float v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  _DWORD *v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  _QWORD *v110;
  uint64_t v111;
  float v112;
  int v113;
  float *v114;
  uint64_t v115;

BOOL sub_2239A4C50(float *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  int v25;
  float *v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((float *)a2 - 1) < a1[1])
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return result;
    case 3:
      v7 = a1[3];
      v8 = *((float *)a2 - 1);
      if (v7 >= a1[1])
      {
        if (v8 < v7)
        {
          v19 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = *(a2 - 1);
          *(a2 - 1) = v19;
          if (a1[3] < a1[1])
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      else
      {
        v9 = *(_QWORD *)a1;
        if (v8 >= v7)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v9;
          if (*((float *)a2 - 1) < *((float *)&v9 + 1))
          {
            *((_QWORD *)a1 + 1) = *(a2 - 1);
            *(a2 - 1) = v9;
          }
        }
        else
        {
          *(_QWORD *)a1 = *(a2 - 1);
          *(a2 - 1) = v9;
        }
      }
      return result;
    case 4:
      sub_2239A4F60(a1, a1 + 2, a1 + 4, (float *)a2 - 2);
      return 1;
    case 5:
      sub_2239A4F60(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*((float *)a2 - 1) >= a1[7])
        return 1;
      v14 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = *(a2 - 1);
      *(a2 - 1) = v14;
      if (a1[7] >= a1[5])
        return 1;
      v16 = *((_QWORD *)a1 + 2);
      v15 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 2) = v15;
      *((_QWORD *)a1 + 3) = v16;
      if (a1[3] <= *((float *)&v15 + 1))
        return 1;
      v17 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v15;
      *((_QWORD *)a1 + 2) = v17;
      if (a1[1] <= *((float *)&v15 + 1))
        return 1;
      v18 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v15;
      *((_QWORD *)a1 + 1) = v18;
      return 1;
    default:
      v10 = a1[3];
      v11 = a1[1];
      v12 = a1[5];
      if (v10 >= v11)
      {
        if (v12 < v10)
        {
          v21 = *((_QWORD *)a1 + 1);
          v20 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 1) = v20;
          *((_QWORD *)a1 + 2) = v21;
          if (v11 > *((float *)&v20 + 1))
          {
            v22 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v20;
            *((_QWORD *)a1 + 1) = v22;
          }
        }
      }
      else
      {
        v13 = *(_QWORD *)a1;
        if (v12 >= v10)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v13;
          if (v12 >= *((float *)&v13 + 1))
            goto LABEL_29;
          *((_QWORD *)a1 + 1) = *((_QWORD *)a1 + 2);
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 2);
        }
        *((_QWORD *)a1 + 2) = v13;
      }
LABEL_29:
      v23 = a1 + 6;
      if (a1 + 6 == (float *)a2)
        return 1;
      v24 = 0;
      v25 = 0;
      v26 = a1 + 4;
      break;
  }
  while (1)
  {
    v27 = v23[1];
    if (v27 < v26[1])
      break;
LABEL_38:
    v26 = v23;
    v24 += 8;
    v23 += 2;
    if (v23 == (float *)a2)
      return 1;
  }
  v28 = *v23;
  v29 = v24;
  do
  {
    *(_QWORD *)((char *)a1 + v29 + 24) = *(_QWORD *)((char *)a1 + v29 + 16);
    if (v29 == -16)
    {
      *a1 = v28;
      a1[1] = v27;
      if (++v25 != 8)
        goto LABEL_38;
      return v23 + 2 == (float *)a2;
    }
    v30 = *(float *)((char *)a1 + v29 + 12);
    v29 -= 8;
  }
  while (v30 > v27);
  v31 = (uint64_t)a1 + v29;
  *(float *)(v31 + 24) = v28;
  *(float *)(v31 + 28) = v27;
  if (++v25 != 8)
    goto LABEL_38;
  return v23 + 2 == (float *)a2;
}

float *sub_2239A4F60(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  v5 = a3[1];
  if (v4 >= result[1])
  {
    if (v5 < v4)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (a2[1] >= result[1])
        goto LABEL_7;
      v7 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v7;
      v5 = a3[1];
    }
  }
  else
  {
    v6 = *(_QWORD *)result;
    if (v5 < v4)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
LABEL_7:
      v5 = *((float *)&v6 + 1);
      goto LABEL_10;
    }
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v6;
    v5 = a3[1];
    if (v5 < *((float *)&v6 + 1))
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      v5 = *((float *)&v6 + 1);
    }
  }
LABEL_10:
  if (a4[1] < v5)
  {
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v8;
    if (a3[1] < a2[1])
    {
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      if (a2[1] < result[1])
      {
        v10 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v10;
      }
    }
  }
  return result;
}

_QWORD *sub_2239A506C(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) >= __sz)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v17 - v9) >> 2) >= __sz)
    {
      v21 = *result;
      if (a2 != a3)
      {
        v22 = (char *)*result;
        do
        {
          if (v6 != v22)
          {
            v23 = *(_QWORD *)v6;
            *((_DWORD *)v22 + 2) = *((_DWORD *)v6 + 2);
            *(_QWORD *)v22 = v23;
          }
          v6 += 12;
          v22 += 12;
          v21 += 12;
        }
        while (v6 != a3);
      }
      v15 = v21 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[4 * ((v17 - v9) >> 2)];
      if (v17 != v9)
      {
        v19 = 4 * ((v17 - v9) >> 2);
        do
        {
          if (v6 != v9)
          {
            v20 = *(_QWORD *)v6;
            *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
            *(_QWORD *)v9 = v20;
          }
          v6 += 12;
          v9 += 12;
          v19 -= 12;
        }
        while (v19);
        v9 = *v16;
      }
      v24 = v9;
      if (v18 != a3)
      {
        v24 = v9;
        v25 = v9;
        do
        {
          v26 = *(_QWORD *)v18;
          *((_DWORD *)v25 + 2) = *((_DWORD *)v18 + 2);
          *v25 = v26;
          v25 = (_QWORD *)((char *)v25 + 12);
          v18 += 12;
          v24 = (_QWORD *)((char *)v24 + 12);
        }
        while (v18 != a3);
      }
      v15 = (char *)v24 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_32;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_32:
      sub_22316E078();
    v13 = 12 * v12;
    result = operator new(12 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, 12 * ((a3 - v6 - 12) / 0xCuLL) + 12);
      v14 = &v9[12 * ((a3 - v6 - 12) / 0xCuLL) + 12];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

uint64_t sub_2239A5298(uint64_t *a1, int *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  char *v19;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7)
    sub_22316E078();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3)
    v6 = 0x1C71C71C71C71C7;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7)
      sub_223174E94();
    v7 = (char *)operator new(144 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (uint64_t)&v7[144 * v3];
  v19 = &v7[144 * v6];
  sub_2239A54E0(v18, a2);
  v8 = v18 + 144;
  v9 = (char *)*a1;
  v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
    if (!v10)
      return v18 + 144;
    goto LABEL_17;
  }
  v11 = 0;
  do
  {
    v12 = v18 + v11;
    v13 = &v10[v11];
    v14 = *(_DWORD *)&v10[v11 - 144];
    *(_BYTE *)(v12 - 140) = v10[v11 - 140];
    *(_QWORD *)(v12 - 128) = 0;
    *(_QWORD *)(v12 - 120) = 0;
    *(_QWORD *)(v12 - 136) = 0;
    *(_DWORD *)(v12 - 144) = v14;
    *(_OWORD *)(v12 - 136) = *(_OWORD *)&v10[v11 - 136];
    *(_QWORD *)(v12 - 120) = *(_QWORD *)&v10[v11 - 120];
    *((_QWORD *)v13 - 17) = 0;
    *((_QWORD *)v13 - 16) = 0;
    *((_QWORD *)v13 - 15) = 0;
    *(_QWORD *)(v12 - 112) = 0;
    *(_QWORD *)(v12 - 104) = 0;
    *(_QWORD *)(v12 - 96) = 0;
    *(_OWORD *)(v12 - 112) = *(_OWORD *)&v10[v11 - 112];
    *(_QWORD *)(v12 - 96) = *(_QWORD *)&v10[v11 - 96];
    *((_QWORD *)v13 - 14) = 0;
    *((_QWORD *)v13 - 13) = 0;
    *((_QWORD *)v13 - 12) = 0;
    *(_QWORD *)(v12 - 88) = 0;
    *(_QWORD *)(v12 - 80) = 0;
    *(_QWORD *)(v12 - 72) = 0;
    *(_OWORD *)(v12 - 88) = *(_OWORD *)&v10[v11 - 88];
    *(_QWORD *)(v12 - 72) = *(_QWORD *)&v10[v11 - 72];
    *((_QWORD *)v13 - 11) = 0;
    *((_QWORD *)v13 - 10) = 0;
    *((_QWORD *)v13 - 9) = 0;
    *(_QWORD *)(v12 - 64) = 0;
    *(_QWORD *)(v12 - 56) = 0;
    *(_QWORD *)(v12 - 48) = 0;
    *(_OWORD *)(v12 - 64) = *(_OWORD *)&v10[v11 - 64];
    *(_QWORD *)(v12 - 48) = *(_QWORD *)&v10[v11 - 48];
    *((_QWORD *)v13 - 8) = 0;
    *((_QWORD *)v13 - 7) = 0;
    *((_QWORD *)v13 - 6) = 0;
    v15 = *(_QWORD *)&v10[v11 - 40];
    *(_DWORD *)(v12 - 32) = *(_DWORD *)&v10[v11 - 32];
    *(_QWORD *)(v12 - 16) = 0;
    *(_QWORD *)(v12 - 8) = 0;
    *(_QWORD *)(v12 - 40) = v15;
    *(_QWORD *)(v12 - 24) = 0;
    *(_OWORD *)(v12 - 24) = *(_OWORD *)&v10[v11 - 24];
    *(_QWORD *)(v12 - 8) = *(_QWORD *)&v10[v11 - 8];
    *((_QWORD *)v13 - 3) = 0;
    *((_QWORD *)v13 - 2) = 0;
    *((_QWORD *)v13 - 1) = 0;
    v11 -= 144;
  }
  while (&v10[v11] != v9);
  v10 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = v18 + v11;
  a1[1] = v8;
  for (a1[2] = (uint64_t)v19; v16 != v10; v16 = (char *)sub_22391679C((_QWORD *)v16 - 18))
    ;
  if (v10)
LABEL_17:
    operator delete(v10);
  return v18 + 144;
}

void sub_2239A54CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2239A5870((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2239A54E0(uint64_t a1, int *a2)
{
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  size_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_22316E078();
    v8 = (char *)operator new(v7);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = &v8[4 * (v7 >> 2)];
    v9 = 12 * ((v7 - 12) / 0xCuLL) + 12;
    memcpy(v8, v6, v9);
    *(_QWORD *)(a1 + 16) = &v8[v9];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  v10 = (_BYTE *)*((_QWORD *)a2 + 5);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_22316E078();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = (_BYTE *)*((_QWORD *)a2 + 7);
  v15 = (_BYTE *)*((_QWORD *)a2 + 8);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_22316E078();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v18;
    *(_QWORD *)(a1 + 72) = &v18[8 * (v17 >> 3)];
    v19 = v17 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v18, v16, v19);
    *(_QWORD *)(a1 + 64) = &v18[v19];
  }
  sub_22329A5CC((_QWORD *)(a1 + 80), (uint64_t *)a2 + 10);
  v20 = *((_QWORD *)a2 + 13);
  v21 = a2[28];
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 112) = v21;
  *(_QWORD *)(a1 + 104) = v20;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v23 = *((_QWORD *)a2 + 15);
  v22 = *((_QWORD *)a2 + 16);
  if (v22 != v23)
  {
    if (0x8E38E38E38E38E39 * ((v22 - v23) >> 4) >= 0x1C71C71C71C71C8)
      sub_22316E078();
    v24 = (char *)operator new(v22 - v23);
    v25 = 0;
    *(_QWORD *)(a1 + 120) = v24;
    *(_QWORD *)(a1 + 128) = v24;
    *(_QWORD *)(a1 + 136) = &v24[16 * ((v22 - v23) >> 4)];
    do
    {
      sub_2239A54E0(&v24[v25], v23 + v25);
      v25 += 144;
    }
    while (v23 + v25 != v22);
    *(_QWORD *)(a1 + 128) = &v24[v25];
  }
  return a1;
}

void sub_2239A5734(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[5] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[2] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void ***sub_2239A57EC(void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **v1;
      if (v4 != v3)
      {
        do
          v4 = sub_22391679C(v4 - 18);
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2239A5870(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    sub_22391679C((_QWORD *)(i - 144));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *sub_2239A58C0(void *result, unsigned int a2, unsigned int a3, int a4)
{
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  size_t v18;
  uint64_t v19;
  char *v20;

  v7 = result;
  if (a3 == a2)
  {
    result = (void *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 36, (uint64_t)"index1 != index2", 16, (uint64_t)"Trying to erase empty range", 27, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  if (a3 >= a2)
  {
    if (a4)
    {
      v12 = v7[1];
      v13 = *v7 + 4 * a3;
      v14 = v12 - (v13 + 4);
      if (v12 != v13 + 4)
        result = memmove((void *)(*v7 + 4 * a3), (const void *)(v13 + 4), v12 - (v13 + 4));
      v7[1] = v13 + v14;
    }
    if (a3 - a2 >= 2)
    {
      v15 = (char *)(*v7 + 4 * a2 + 4);
      v16 = (char *)(*v7 + 4 * a3);
      if (v15 != v16)
      {
        v17 = (_BYTE *)v7[1];
        v9 = v7 + 1;
        v18 = v17 - v16;
        if (v17 == v16)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    return result;
  }
  v9 = v7 + 1;
  v8 = (char *)v7[1];
  v10 = *v7 + 4 * a2 + 4;
  if (a2 + 1 >= (unint64_t)((uint64_t)&v8[-*v7] >> 2) || v10 == (_QWORD)v8)
  {
    if (a4)
      goto LABEL_21;
LABEL_10:
    if (a3)
      goto LABEL_24;
    return result;
  }
  *v9 = v10;
  v8 = (char *)v10;
  if (!a4)
    goto LABEL_10;
LABEL_21:
  v19 = *v7 + 4 * a3;
  v20 = &v8[-v19 - 4];
  if (v8 != (char *)(v19 + 4))
    result = memmove((void *)(*v7 + 4 * a3), (const void *)(v19 + 4), (size_t)&v8[-v19 - 4]);
  v8 = &v20[v19];
  *v9 = (uint64_t)&v20[v19];
  if (a3)
  {
LABEL_24:
    v15 = (char *)*v7;
    v16 = (char *)(*v7 + 4 * a3);
    v18 = v8 - v16;
    if (v8 == v16)
    {
LABEL_26:
      *v9 = (uint64_t)&v15[v18];
      return result;
    }
LABEL_25:
    result = memmove(v15, v16, v18);
    goto LABEL_26;
  }
  return result;
}

uint64_t sub_2239A5A44(uint64_t result, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v7 = (uint64_t *)result;
  if (a3 == a2)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.hpp", 36, (uint64_t)"index1 != index2", 16, (uint64_t)"Trying to erase empty range", 27, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  if (a3 < a2)
  {
    v9 = v7 + 1;
    v8 = v7[1];
    v10 = *v7 + 12 * a2 + 12;
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - *v7) >> 2) <= a2 + 1 || v10 == v8)
    {
      if (a4)
        goto LABEL_25;
    }
    else
    {
      *v9 = v10;
      v8 = v10;
      if (a4)
      {
LABEL_25:
        v25 = *v7;
        result = *v7 + 12 * a3;
        if (result + 12 == v8)
        {
          v8 = *v7 + 12 * a3;
          *v9 = result;
          if (!a3)
            return result;
        }
        else
        {
          v26 = v8 - result - 24;
          result = (uint64_t)memmove((void *)result, (const void *)(result + 12), 12 * (v26 / 0xC) + 12);
          v8 = v25 + 12 * (v26 / 0xC) + 12 + 12 * a3;
          *v9 = v8;
          if (!a3)
            return result;
        }
        goto LABEL_29;
      }
    }
    if (!a3)
      return result;
LABEL_29:
    v16 = *v7;
    if (*v7 + 12 * a3 == v8)
    {
      v24 = 0;
    }
    else
    {
      v27 = 12 * a3;
      v28 = *v7;
      v29 = *v7;
      do
      {
        *(_QWORD *)v29 = *(_QWORD *)(v29 + 12 * a3);
        *(_DWORD *)(v29 + 8) = *(_DWORD *)(v29 + v27 + 8);
        v29 += 12;
        v28 += 12;
      }
      while (v29 + v27 != v8);
      v24 = v28 - v16;
    }
LABEL_34:
    *v9 = v16 + v24;
    return result;
  }
  if (a4)
  {
    v13 = *v7;
    v12 = v7[1];
    result = *v7 + 12 * a3;
    if (result + 12 != v12)
    {
      v14 = v12 - result - 24;
      memmove((void *)result, (const void *)(result + 12), 12 * (v14 / 0xC) + 12);
      result = v13 + 12 * (v14 / 0xC) + 12 + 12 * a3;
    }
    v7[1] = result;
  }
  if (a3 - a2 >= 2)
  {
    v15 = *v7;
    v16 = *v7 + 12 * a2 + 12;
    v17 = *v7 + 12 * a3;
    if (v16 != v17)
    {
      v20 = v7[1];
      v19 = v7 + 1;
      v18 = v20;
      if (v17 == v20)
      {
        v21 = v16;
      }
      else
      {
        v21 = v15 + 12 * a2 + 12;
        v22 = v16;
        do
        {
          v23 = *(_QWORD *)v17;
          *(_DWORD *)(v22 + 8) = *(_DWORD *)(v17 + 8);
          *(_QWORD *)v22 = v23;
          v22 += 12;
          v17 += 12;
          v21 += 12;
        }
        while (v17 != v18);
      }
      v24 = v21 - v16;
      v9 = v19;
      goto LABEL_34;
    }
  }
  return result;
}

char *sub_2239A5D2C(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = (19349669 * v8) ^ (73856093 * *a2) ^ (83492791 * v9);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = (19349669 * v8) ^ (73856093 * v7) ^ (83492791 * v9);
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == v8 && *((_DWORD *)v14 + 6) == v9)
                return (char *)v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_27;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_27;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == v8 && *((_DWORD *)v14 + 6) == v9)
              return (char *)v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_27:
  v18 = (char *)operator new(0x50uLL);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = **a4;
  *((_DWORD *)v18 + 6) = *((_DWORD *)*a4 + 2);
  *((_QWORD *)v18 + 2) = v19;
  *(_OWORD *)(v18 + 28) = 0u;
  *(_OWORD *)(v18 + 44) = 0u;
  *(_QWORD *)(v18 + 60) = 2139095039;
  *((_DWORD *)v18 + 17) = 0;
  *((_DWORD *)v18 + 18) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_30:
      *(_QWORD *)v18 = *v23;
LABEL_65:
      *v23 = v18;
      goto LABEL_66;
    }
  }
  else
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_41;
    if (prime < v11)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < v11)
LABEL_41:
        sub_2231B0668(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v23)
          goto LABEL_30;
      }
      else
      {
        v4 = v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v23)
          goto LABEL_30;
      }
    }
    else
    {
      v4 = v31 & v10;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v10));
      if (v23)
        goto LABEL_30;
    }
  }
  *(_QWORD *)v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v18)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11)
        v32 %= v11;
    }
    else
    {
      v32 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_65;
  }
LABEL_66:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_2239A60C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2239A60D4(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  unsigned int *v6;
  unsigned int *v7;
  float *v8;
  float *v9;
  float *v10;
  int v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  float *v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  __n128 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  float *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  int v38;
  int v39;
  char *v40;
  void *v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  void *__p;
  char *v48;
  uint64_t v49;
  int *v50[3];

  v6 = *(unsigned int **)(a2 + 32);
  v7 = *(unsigned int **)(a2 + 40);
  if (v6 != v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      while (1)
      {
        v12 = **(_QWORD **)(a1 + 8) + 96 * *v6;
        a4.n128_u32[0] = *(_DWORD *)(v12 + 32);
        v13 = a4.n128_f32[0] * *(float *)(v12 + 36);
        if (v9 >= v10)
          break;
        *(_DWORD *)v9 = v11;
        v9[1] = v13;
        v9 += 2;
        ++v11;
        if (++v6 == v7)
          goto LABEL_32;
      }
      v14 = ((char *)v9 - (char *)v8) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_22316E078();
      if (v10 - v8 > v15)
        v15 = v10 - v8;
      v16 = (unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v15;
      if (v16)
      {
        if (v16 >> 61)
          sub_223174E94();
        v17 = operator new(8 * v16);
        v18 = (uint64_t)&v17[8 * v14];
        *(_DWORD *)v18 = v11;
        *(float *)(v18 + 4) = v13;
        v19 = (char *)v9 - (char *)v8;
        if (v9 == v8)
        {
LABEL_22:
          v22 = (float *)v18;
          v10 = (float *)&v17[8 * v16];
          v9 = (float *)(v18 + 8);
          if (!v8)
            goto LABEL_19;
LABEL_18:
          operator delete(v8);
          goto LABEL_19;
        }
      }
      else
      {
        v17 = 0;
        v18 = 8 * v14;
        *(_DWORD *)v18 = v11;
        *(float *)(v18 + 4) = v13;
        v19 = (char *)v9 - (char *)v8;
        if (v9 == v8)
          goto LABEL_22;
      }
      v20 = v19 - 8;
      if (v20 < 0x168)
        break;
      v24 = ((char *)(v9 - 2) - (char *)v8) & 0xFFFFFFFFFFFFFFF8;
      if (&v17[(char *)v9 - (char *)v8 - 8 - v24] > &v17[(char *)v9 - (char *)v8 - 8]
        || (float *)((char *)v9 - v24 - 8) > v9 - 2
        || (unint64_t)((char *)v8 - v17) < 0x20)
      {
        break;
      }
      v25 = (v20 >> 3) + 1;
      v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      v21 = &v9[v26 / 0xFFFFFFFFFFFFFFFCLL];
      v22 = (float *)(v18 - v26);
      v27 = (__n128 *)&v17[8 * v14 - 16];
      v28 = (__n128 *)(v9 - 4);
      v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        a4 = *v28;
        v27[-1] = v28[-1];
        *v27 = a4;
        v27 -= 2;
        v28 -= 2;
        v29 -= 4;
      }
      while (v29);
      if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_16;
LABEL_17:
      v10 = (float *)&v17[8 * v16];
      v9 = (float *)(v18 + 8);
      if (v8)
        goto LABEL_18;
LABEL_19:
      v8 = v22;
      ++v11;
      if (++v6 == v7)
        goto LABEL_32;
    }
    v21 = v9;
    v22 = (float *)v18;
    do
    {
LABEL_16:
      v23 = *((_QWORD *)v21 - 1);
      v21 -= 2;
      *((_QWORD *)v22 - 1) = v23;
      v22 -= 2;
    }
    while (v21 != v8);
    goto LABEL_17;
  }
  v8 = 0;
  v9 = 0;
LABEL_32:
  v30 = 126 - 2 * __clz(((char *)v9 - (char *)v8) >> 3);
  if (v9 == v8)
    v31 = 0;
  else
    v31 = v30;
  sub_2239AE0A8(v8, (uint64_t *)v9, v31, 1, a4);
  if (v9 == v8)
    goto LABEL_62;
  v32 = 0;
  v33 = v8;
  while (1)
  {
    v34 = *(_DWORD *)v33;
    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    __p = 0;
    v48 = 0;
    v49 = 0;
    v50[0] = (int *)a2;
    v50[1] = (int *)a1;
    v50[2] = (int *)&__p;
    LODWORD(v36) = v35;
    if (v35 != (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    }
    sub_2239AABE4(v50, (v34 + 1) % v35, v36 - 1);
    v37 = (char *)__p;
    if (__p != v48)
      break;
    v39 = 3;
    if (__p)
      goto LABEL_46;
LABEL_55:
    if (v39 != 3)
      goto LABEL_56;
LABEL_37:
    v33 += 2;
    if (v33 == v9)
      goto LABEL_57;
  }
  *((_DWORD *)__p + 20) = 1069547520;
  v38 = sub_2239A6538((char ***)a1, (_QWORD *)a2, (uint64_t)v37, a3);
  if (v38)
    v39 = 2;
  else
    v39 = 0;
  v32 |= v38;
  v37 = (char *)__p;
  if (!__p)
    goto LABEL_55;
LABEL_46:
  v40 = v48;
  if (v48 == v37)
  {
    v48 = v37;
    operator delete(v37);
    if (v39 == 3)
      goto LABEL_37;
  }
  else
  {
    do
    {
      v41 = (void *)*((_QWORD *)v40 - 5);
      if (v41)
      {
        *((_QWORD *)v40 - 4) = v41;
        operator delete(v41);
      }
      v40 -= 96;
    }
    while (v40 != v37);
    v48 = v37;
    operator delete(__p);
    if (v39 == 3)
      goto LABEL_37;
  }
LABEL_56:
  if (!v39)
    goto LABEL_37;
LABEL_57:
  if ((v32 & 1) == 0)
  {
LABEL_62:
    v44 = 0;
    if (!v8)
      return v44;
LABEL_63:
    operator delete(v8);
    return v44;
  }
  v43 = *(_QWORD *)(a2 + 120);
  for (i = *(_QWORD *)(a2 + 128); v43 != i; v43 += 144)
    sub_2239A03FC(a3, v43);
  *(_DWORD *)(a3 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a2 + 4);
  v44 = 1;
  if (v8)
    goto LABEL_63;
  return v44;
}

void sub_2239A6500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2239A6538(char ***a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  void *v20;
  size_t v21;
  const char *v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  unint64_t v27;
  const char *v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  size_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  unsigned __int8 v77;
  const char *v78;
  size_t v79;
  const char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  float v88;
  size_t v89;
  void *v90;
  _QWORD *v91;
  unint64_t *v92;
  char *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  char *v103;
  uint64_t v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  double v127;
  double v128;
  double v129;
  double v130;
  void *v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  float32x2_t *v150;
  uint64_t v151;
  float32x2_t v152;
  float32x2_t *v153;
  int64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _BYTE *v159;
  float32x2_t *v160;
  uint64_t v161;
  int64_t v162;
  unint64_t v163;
  float32x2_t *v164;
  float32x2_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _OWORD *v169;
  float32x2_t *v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  void *v174;
  char ***v175;
  unsigned int v176;
  float32x2_t v177;
  float32x2_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  _BYTE *v182;
  int v183;
  int v184;
  uint64_t v185;
  char **v186;
  int8x8_t v187;
  uint64_t v188;
  uint8x8_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t **v193;
  uint64_t *v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  int v218;
  char **v219;
  char *v220;
  char *v221;
  uint64_t *v222;
  uint64_t *v223;
  float v224;
  float32x2_t v225;
  float v226;
  float v227;
  char **v228;
  char *v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  int64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  _BYTE *v245;
  _DWORD *v246;
  int64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  _OWORD *v252;
  char *v253;
  uint64_t v254;
  __int128 v255;
  int v256;
  unint64_t *v257;
  unint64_t *v258;
  _DWORD *v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  char *v263;
  int v264;
  _DWORD *v265;
  _DWORD *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  _DWORD *v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  uint64_t *v274;
  int v275;
  uint64_t v276;
  unsigned __int8 v277;
  unsigned __int8 v278;
  int v279;
  unint64_t v280;
  unint64_t v281;
  unsigned __int8 *v282;
  uint64_t v283;
  size_t v284;
  const char *v285;
  unsigned __int8 v286;
  const char *v287;
  size_t v288;
  _BYTE *v289;
  unint64_t v290;
  const char *v291;
  unsigned __int8 *v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _BYTE *v297;
  uint64_t v298;
  uint64_t v299;
  NSObject *v300;
  size_t v301;
  std::__shared_weak_count_vtbl *v302;
  std::__shared_weak_count *v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  void *v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  _BYTE *v337;
  int v338;
  _QWORD *v340;
  uint64_t v341;
  int v343;
  unint64_t v344;
  uint64_t v345;
  float v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  unint64_t v353;
  int v354;
  void *v355;
  char *v356;
  char *v357;
  void *v358;
  char *v359;
  char *v360;
  void **v361;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v363;
  int v364;
  const char *v365;
  int v366;
  const char *v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  void *__p;
  __int128 v371;
  __int128 v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  _BYTE v376[95];
  uint64_t v377;

  v377 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56);
  v5 = v4 >> 4;
  if ((v4 >> 4) <= 2)
  {
    sub_2239AAAF0(&v355);
    if (**((int **)v355 + 7) > 4)
      return 0;
    v6 = *((unsigned __int8 *)v355 + 72);
    v7 = sub_22322F254((uint64_t)v355, "OSLogSurrogateAppender", 1, 0);
    v8 = v7;
    if (!v6 && v7 == 0)
      return 0;
    v361 = &v355;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v363 = std::chrono::system_clock::now().__d_.__rep_;
    v364 = 4;
    v365 = "unknown file";
    v366 = 1508;
    v368 = 0;
    v369 = 0;
    v367 = "unknown function";
    v10 = (unsigned __int8 *)*v361;
    v11 = (uint64_t)*v361 + 16;
    if (*((char *)*v361 + 39) < 0)
    {
      v13 = (const char *)*((_QWORD *)v10 + 2);
      v12 = *((_QWORD *)v10 + 3);
      v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v23 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      v12 = *((unsigned __int8 *)*v361 + 39);
      v13 = (char *)*v361 + 16;
      v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v14 & 1) != 0)
        goto LABEL_19;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v376);
      sub_223199C58("com.apple.cv3d", (unint64_t)v376, &xmmword_255788F40);
      if (v376[24] && (v376[23] & 0x80000000) != 0)
        operator delete(*(void **)v376);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_19:
    if (byte_255788F57 >= 0)
      v24 = (const char *)&xmmword_255788F40;
    else
      v24 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v25 = byte_255788F57;
    else
      v25 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v376 = os_log_create(v24, v13);
    v26 = &v376[8];
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v25 >= 0x17)
    {
      v27 = v8;
      v28 = v13;
      v29 = v10;
      v30 = v6;
      v31 = v11;
      v32 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v32 = v25 | 7;
      v33 = v32 + 1;
      v26 = operator new(v32 + 1);
      *(_QWORD *)&v376[16] = v25;
      *(_QWORD *)&v376[24] = v33 | 0x8000000000000000;
      *(_QWORD *)&v376[8] = v26;
      v11 = v31;
      v6 = v30;
      v10 = v29;
      v13 = v28;
      v8 = v27;
    }
    else
    {
      v376[31] = v25;
      if (!v25)
      {
LABEL_33:
        v26[v25] = 0;
        v376[32] = 1;
        v34 = &v376[40];
        if (v12 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v12 >= 0x17)
        {
          v35 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17)
            v35 = v12 | 7;
          v36 = v35 + 1;
          v34 = operator new(v35 + 1);
          *(_QWORD *)&v376[48] = v12;
          *(_QWORD *)&v376[56] = v36 | 0x8000000000000000;
          *(_QWORD *)&v376[40] = v34;
        }
        else
        {
          v376[63] = v12;
          if (!v12)
            goto LABEL_41;
        }
        memmove(v34, v13, v12);
LABEL_41:
        v34[v12] = 0;
        v376[64] = 1;
        v37 = *(NSObject **)v376;
        if ((v376[63] & 0x80000000) != 0)
          operator delete(*(void **)&v376[40]);
        if (v376[32] && (v376[31] & 0x80000000) != 0)
          operator delete(*(void **)&v376[8]);
        if (*(_QWORD *)v376)
          os_release(*(void **)v376);
        if (v8 && *(_QWORD *)(v8 + 24))
        {
          v38 = _os_log_pack_size();
          v39 = (std::__shared_weak_count_vtbl *)operator new(v38, (std::align_val_t)8uLL);
          v40 = (std::__shared_weak_count *)operator new();
          v41 = v40;
          v40->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v40->__shared_weak_owners_ = 0;
          v40[1].__vftable = v39;
          *(_QWORD *)v376 = v39;
          *(_QWORD *)&v376[8] = v39;
          *(_QWORD *)&v376[16] = v40;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          memset(&v376[24], 0, 24);
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v41);
          }
          v45 = *(_QWORD *)v376;
          *(_WORD *)_os_log_pack_fill() = 0;
          v46 = (char *)operator new();
          v47 = v10[39];
          if ((v47 & 0x80u) == 0)
            v48 = v11;
          else
            v48 = *((_QWORD *)v10 + 2);
          if ((v47 & 0x80u) != 0)
            v47 = *((_QWORD *)v10 + 3);
          *(_QWORD *)v46 = v45;
          *(_OWORD *)(v46 + 8) = *(_OWORD *)&v376[8];
          *(_QWORD *)&v376[8] = 0;
          *(_QWORD *)&v376[16] = 0;
          *(_OWORD *)(v46 + 24) = *(_OWORD *)&v376[24];
          *(_QWORD *)&v376[24] = 0;
          *(_QWORD *)&v376[32] = 0;
          *((_QWORD *)v46 + 5) = v48;
          *((_QWORD *)v46 + 6) = v47;
          v46[56] = 16;
          v358 = 0;
          __p = v46;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &__p);
          v49 = __p;
          __p = 0;
          if (v49)
          {
            v50 = (std::__shared_weak_count *)*((_QWORD *)v49 + 4);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v53 = (std::__shared_weak_count *)*((_QWORD *)v49 + 2);
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            MEMORY[0x227684CE8](v49, 0x10F0C40B62ED6C6);
            v56 = v358;
            v358 = 0;
            if (v56)
            {
              v57 = (std::__shared_weak_count *)*((_QWORD *)v56 + 4);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v60 = (std::__shared_weak_count *)*((_QWORD *)v56 + 2);
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
            }
          }
          v63 = *(std::__shared_weak_count **)&v376[32];
          if (*(_QWORD *)&v376[32])
          {
            v64 = (unint64_t *)(*(_QWORD *)&v376[32] + 8);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v66 = *(std::__shared_weak_count **)&v376[16];
          if (*(_QWORD *)&v376[16])
          {
            v67 = (unint64_t *)(*(_QWORD *)&v376[16] + 8);
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
        }
        else
        {
          os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
          *(_WORD *)v376 = 0;
          v69 = (void *)_os_log_send_and_compose_impl();
          if (v69)
            free(v69);
        }
        if (v6)
        {
          sub_22322C138((uint64_t)&v361, "ApplyExpansion with < 3 points");
          sub_223182C08((uint64_t)&v361);
        }
        sub_223182C08((uint64_t)&v361);
        v70 = v369;
        if (v369)
        {
          v71 = (unint64_t *)&v369->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        return 0;
      }
    }
    memmove(v26, v24, v25);
    goto LABEL_33;
  }
  v15 = a3;
  v348 = *(float *)(a3 + 80);
  if (v348 <= 5.0)
    goto LABEL_206;
  sub_2239AAAF0(&v355);
  if (**((int **)v355 + 7) <= 4)
  {
    v16 = *((unsigned __int8 *)v355 + 72);
    v17 = sub_22322F254((uint64_t)v355, "OSLogSurrogateAppender", 1, 0);
    v18 = v17;
    if (v16 || v17 != 0)
    {
      v343 = v16;
      v361 = &v355;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v363 = std::chrono::system_clock::now().__d_.__rep_;
      v364 = 4;
      v365 = "unknown file";
      v366 = 1523;
      v368 = 0;
      v369 = 0;
      v367 = "unknown function";
      v20 = *v361;
      v340 = *v361;
      if (*((char *)*v361 + 39) < 0)
      {
        v22 = (const char *)*((_QWORD *)v20 + 2);
        v21 = *((_QWORD *)v20 + 3);
      }
      else
      {
        v21 = *((unsigned __int8 *)*v361 + 39);
        v22 = (char *)*v361 + 16;
      }
      v341 = (uint64_t)*v361 + 16;
      v344 = v18;
      v74 = *(float *)(v15 + 36);
      v75 = *(float *)(v15 + 40);
      v76 = *(float *)(v15 + 44);
      v77 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v376);
        sub_223199C58("com.apple.cv3d", (unint64_t)v376, &xmmword_255788F40);
        if (v376[24] && (v376[23] & 0x80000000) != 0)
          operator delete(*(void **)v376);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v78 = (const char *)&xmmword_255788F40;
      else
        v78 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v79 = byte_255788F57;
      else
        v79 = *((_QWORD *)&xmmword_255788F40 + 1);
      v80 = v22;
      *(_QWORD *)v376 = os_log_create(v78, v22);
      v81 = &v376[8];
      if (v79 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v79 >= 0x17)
      {
        v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v79 | 7) != 0x17)
          v82 = v79 | 7;
        v83 = v82 + 1;
        v81 = operator new(v82 + 1);
        *(_QWORD *)&v376[16] = v79;
        *(_QWORD *)&v376[24] = v83 | 0x8000000000000000;
        *(_QWORD *)&v376[8] = v81;
      }
      else
      {
        v376[31] = v79;
        if (!v79)
        {
LABEL_120:
          v81[v79] = 0;
          v376[32] = 1;
          v84 = &v376[40];
          if (v21 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v21 >= 0x17)
          {
            v85 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v85 = v21 | 7;
            v86 = v85 + 1;
            v84 = operator new(v85 + 1);
            *(_QWORD *)&v376[48] = v21;
            *(_QWORD *)&v376[56] = v86 | 0x8000000000000000;
            *(_QWORD *)&v376[40] = v84;
          }
          else
          {
            v376[63] = v21;
            if (!v21)
            {
LABEL_128:
              v84[v21] = 0;
              v376[64] = 1;
              v87 = *(NSObject **)v376;
              if ((v376[63] & 0x80000000) != 0)
                operator delete(*(void **)&v376[40]);
              v15 = a3;
              if (v376[32] && (v376[31] & 0x80000000) != 0)
                operator delete(*(void **)&v376[8]);
              if (*(_QWORD *)v376)
                os_release(*(void **)v376);
              v88 = v76 + (float)((float)((float)(v348 * v348) * v74) + (float)(v348 * v75));
              if (v344 && *(_QWORD *)(v344 + 24))
              {
                v89 = _os_log_pack_size();
                v90 = operator new(v89, (std::align_val_t)8uLL);
                v91 = (_QWORD *)operator new();
                v91[1] = 0;
                v92 = v91 + 1;
                *v91 = &off_24EC1F7F0;
                v91[2] = 0;
                v91[3] = v90;
                *(_QWORD *)v376 = v90;
                *(_QWORD *)&v376[8] = v90;
                *(_QWORD *)&v376[32] = 0;
                *(_OWORD *)&v376[16] = (unint64_t)v91;
                v93 = (char *)operator new(0x40uLL);
                v94 = (std::__shared_weak_count *)v93;
                *((_QWORD *)v93 + 1) = 0;
                v95 = (unint64_t *)(v93 + 8);
                *((_QWORD *)v93 + 2) = 0;
                *((_QWORD *)v93 + 3) = off_24EC5D6C0;
                *(_QWORD *)v93 = &off_24EC5D670;
                strcpy(v93 + 32, "Room expansion");
                *(_QWORD *)(v93 + 47) = 0;
                v93[55] = 14;
                *(_QWORD *)&v376[24] = v93 + 24;
                *(_QWORD *)&v376[32] = v93;
                __p = v90;
                *(_QWORD *)&v371 = v90;
                *((_QWORD *)&v371 + 1) = v91;
                do
                  v96 = __ldxr(v92);
                while (__stxr(v96 + 1, v92));
                *(_QWORD *)&v372 = v93 + 24;
                *((_QWORD *)&v372 + 1) = v93;
                do
                  v97 = __ldxr(v95);
                while (__stxr(v97 + 1, v95));
                v373 = v93 + 24;
                do
                  v98 = __ldaxr(v95);
                while (__stlxr(v98 - 1, v95));
                if (!v98)
                {
                  (*(void (**)(char *))(*(_QWORD *)v93 + 16))(v93);
                  std::__shared_weak_count::__release_weak(v94);
                }
                v99 = *(std::__shared_weak_count **)&v376[16];
                if (*(_QWORD *)&v376[16])
                {
                  v100 = (unint64_t *)(*(_QWORD *)&v376[16] + 8);
                  do
                    v101 = __ldaxr(v100);
                  while (__stlxr(v101 - 1, v100));
                  if (!v101)
                  {
                    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                    std::__shared_weak_count::__release_weak(v99);
                  }
                }
                v102 = __p;
                if (v373[31] >= 0)
                  v103 = v373 + 8;
                else
                  v103 = (char *)*((_QWORD *)v373 + 1);
                v104 = _os_log_pack_fill();
                v105 = *(float *)(a3 + 48);
                v106 = v88;
                v107 = *(float *)(a3 + 36);
                v108 = *(float *)(a3 + 40);
                v109 = *(float *)(a3 + 44);
                *(_DWORD *)v104 = 136382211;
                *(_QWORD *)(v104 + 4) = v103;
                *(_WORD *)(v104 + 12) = 2048;
                *(double *)(v104 + 14) = v348;
                *(_WORD *)(v104 + 22) = 2048;
                *(double *)(v104 + 24) = v105;
                *(_WORD *)(v104 + 32) = 2048;
                *(double *)(v104 + 34) = v106;
                *(_WORD *)(v104 + 42) = 2048;
                *(double *)(v104 + 44) = v107;
                *(_WORD *)(v104 + 52) = 2048;
                *(double *)(v104 + 54) = v108;
                *(_WORD *)(v104 + 62) = 2048;
                *(double *)(v104 + 64) = v109;
                v110 = operator new();
                v111 = *((unsigned __int8 *)v340 + 39);
                v112 = v341;
                if ((v111 & 0x80u) != 0)
                {
                  v112 = v340[2];
                  v111 = v340[3];
                }
                *(_QWORD *)v110 = v102;
                *(_OWORD *)(v110 + 8) = v371;
                v371 = 0uLL;
                *(_OWORD *)(v110 + 24) = v372;
                v372 = 0uLL;
                *(_QWORD *)(v110 + 40) = v112;
                *(_QWORD *)(v110 + 48) = v111;
                *(_BYTE *)(v110 + 56) = 16;
                v358 = 0;
                *(_QWORD *)v376 = v110;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v344 + 24) + 40))(*(_QWORD *)(v344 + 24), v376);
                v113 = *(_QWORD *)v376;
                *(_QWORD *)v376 = 0;
                if (v113)
                {
                  v114 = *(std::__shared_weak_count **)(v113 + 32);
                  if (v114)
                  {
                    v115 = (unint64_t *)&v114->__shared_owners_;
                    do
                      v116 = __ldaxr(v115);
                    while (__stlxr(v116 - 1, v115));
                    if (!v116)
                    {
                      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                      std::__shared_weak_count::__release_weak(v114);
                    }
                  }
                  v117 = *(std::__shared_weak_count **)(v113 + 16);
                  if (v117)
                  {
                    v118 = (unint64_t *)&v117->__shared_owners_;
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  MEMORY[0x227684CE8](v113, 0x10F0C40B62ED6C6);
                  v120 = v358;
                  v358 = 0;
                  if (v120)
                  {
                    v121 = (std::__shared_weak_count *)*((_QWORD *)v120 + 4);
                    if (v121)
                    {
                      v122 = (unint64_t *)&v121->__shared_owners_;
                      do
                        v123 = __ldaxr(v122);
                      while (__stlxr(v123 - 1, v122));
                      if (!v123)
                      {
                        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                        std::__shared_weak_count::__release_weak(v121);
                      }
                    }
                    v124 = (std::__shared_weak_count *)*((_QWORD *)v120 + 2);
                    if (v124)
                    {
                      v125 = (unint64_t *)&v124->__shared_owners_;
                      do
                        v126 = __ldaxr(v125);
                      while (__stlxr(v126 - 1, v125));
                      if (!v126)
                      {
                        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                        std::__shared_weak_count::__release_weak(v124);
                      }
                    }
                    MEMORY[0x227684CE8](v120, 0x10F0C40B62ED6C6);
                  }
                }
                if (v343)
                {
                  v15 = a3;
                  v127 = *(float *)(a3 + 48);
                  v128 = *(float *)(a3 + 36);
                  v129 = *(float *)(a3 + 40);
                  v130 = *(float *)(a3 + 44);
                  *(_DWORD *)v376 = 136382211;
                  *(_QWORD *)&v376[4] = "Room expansion";
                  *(_WORD *)&v376[12] = 2048;
                  *(double *)&v376[14] = v348;
                  *(_WORD *)&v376[22] = 2048;
                  *(double *)&v376[24] = v127;
                  *(_WORD *)&v376[32] = 2048;
                  *(double *)&v376[34] = v106;
                  *(_WORD *)&v376[42] = 2048;
                  *(double *)&v376[44] = v128;
                  *(_WORD *)&v376[52] = 2048;
                  *(double *)&v376[54] = v129;
                  *(_WORD *)&v376[62] = 2048;
                  *(double *)&v376[64] = v130;
                  v338 = 72;
                  v337 = v376;
                  v131 = (void *)_os_log_send_and_compose_impl();
                }
                else
                {
                  v131 = 0;
                  v15 = a3;
                }
                v140 = (std::__shared_weak_count *)*((_QWORD *)&v372 + 1);
                if (*((_QWORD *)&v372 + 1))
                {
                  v141 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
                  do
                    v142 = __ldaxr(v141);
                  while (__stlxr(v142 - 1, v141));
                  if (!v142)
                  {
                    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                    std::__shared_weak_count::__release_weak(v140);
                  }
                }
                v143 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
                if (*((_QWORD *)&v371 + 1))
                {
                  v144 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
                  do
                    v145 = __ldaxr(v144);
                  while (__stlxr(v145 - 1, v144));
                  if (!v145)
                  {
                    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                    std::__shared_weak_count::__release_weak(v143);
                  }
                }
                if (!v343)
                {
LABEL_198:
                  if (!v131)
                  {
LABEL_200:
                    sub_223182C08((uint64_t)&v361);
                    v146 = v369;
                    if (v369)
                    {
                      v147 = (unint64_t *)&v369->__shared_owners_;
                      do
                        v148 = __ldaxr(v147);
                      while (__stlxr(v148 - 1, v147));
                      if (!v148)
                      {
                        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                        std::__shared_weak_count::__release_weak(v146);
                      }
                    }
                    goto LABEL_205;
                  }
LABEL_199:
                  free(v131);
                  goto LABEL_200;
                }
                sub_22322C138((uint64_t)&v361, (char *)v131, v337, v338);
              }
              else
              {
                os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
                if (!v343)
                {
                  v136 = *(float *)(a3 + 48);
                  v137 = *(float *)(a3 + 36);
                  v138 = *(float *)(a3 + 40);
                  v139 = *(float *)(a3 + 44);
                  *(_DWORD *)v376 = 136382211;
                  *(_QWORD *)&v376[4] = "Room expansion";
                  *(_WORD *)&v376[12] = 2048;
                  *(double *)&v376[14] = v348;
                  *(_WORD *)&v376[22] = 2048;
                  *(double *)&v376[24] = v136;
                  *(_WORD *)&v376[32] = 2048;
                  *(double *)&v376[34] = v88;
                  *(_WORD *)&v376[42] = 2048;
                  *(double *)&v376[44] = v137;
                  *(_WORD *)&v376[52] = 2048;
                  *(double *)&v376[54] = v138;
                  *(_WORD *)&v376[62] = 2048;
                  *(double *)&v376[64] = v139;
                  v131 = (void *)_os_log_send_and_compose_impl();
                  if (!v131)
                    goto LABEL_200;
                  goto LABEL_199;
                }
                v132 = *(float *)(a3 + 48);
                v133 = *(float *)(a3 + 36);
                v134 = *(float *)(a3 + 40);
                v135 = *(float *)(a3 + 44);
                *(_DWORD *)v376 = 136382211;
                *(_QWORD *)&v376[4] = "Room expansion";
                *(_WORD *)&v376[12] = 2048;
                *(double *)&v376[14] = v348;
                *(_WORD *)&v376[22] = 2048;
                *(double *)&v376[24] = v132;
                *(_WORD *)&v376[32] = 2048;
                *(double *)&v376[34] = v88;
                *(_WORD *)&v376[42] = 2048;
                *(double *)&v376[44] = v133;
                *(_WORD *)&v376[52] = 2048;
                *(double *)&v376[54] = v134;
                *(_WORD *)&v376[62] = 2048;
                *(double *)&v376[64] = v135;
                v131 = (void *)_os_log_send_and_compose_impl();
                sub_22322C138((uint64_t)&v361, (char *)v131, v376, 72);
              }
              sub_223182C08((uint64_t)&v361);
              goto LABEL_198;
            }
          }
          memmove(v84, v80, v21);
          goto LABEL_128;
        }
      }
      memmove(v81, v78, v79);
      goto LABEL_120;
    }
  }
LABEL_205:
  v348 = 5.0;
LABEL_206:
  __p = 0;
  v371 = 0uLL;
  v149 = (v4 >> 4);
  if ((v4 >> 4))
  {
    v150 = (float32x2_t *)operator new(8 * v149);
    __p = v150;
    *(_QWORD *)&v371 = v150;
    *((_QWORD *)&v371 + 1) = &v150[v149];
  }
  else
  {
    v150 = 0;
  }
  v151 = 0;
  do
  {
    while (1)
    {
      v152 = vadd_f32(*(float32x2_t *)(*(_QWORD *)(v15 + 56) + 8 * (2 * v151)), vmul_n_f32(*(float32x2_t *)(*(_QWORD *)(v15 + 56) + 8 * ((2 * (_DWORD)v151) | 1u)), v348));
      if ((unint64_t)v150 >= *((_QWORD *)&v371 + 1))
        break;
      *v150++ = v152;
      *(_QWORD *)&v371 = v150;
      if ((_DWORD)++v151 == (_DWORD)v5)
        goto LABEL_241;
    }
    v153 = (float32x2_t *)__p;
    v154 = (char *)v150 - (_BYTE *)__p;
    v155 = ((char *)v150 - (_BYTE *)__p) >> 3;
    v156 = v155 + 1;
    if ((unint64_t)(v155 + 1) >> 61)
      sub_22316E078();
    v157 = *((_QWORD *)&v371 + 1) - (_QWORD)__p;
    if ((uint64_t)(*((_QWORD *)&v371 + 1) - (_QWORD)__p) >> 2 > v156)
      v156 = v157 >> 2;
    if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
      v158 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v158 = v156;
    if (v158)
    {
      if (v158 >> 61)
        sub_223174E94();
      v159 = operator new(8 * v158);
      v160 = (float32x2_t *)&v159[8 * v155];
      *v160 = v152;
      v161 = (uint64_t)&v160[1];
      v162 = (char *)v150 - (char *)v153;
      if (v150 == v153)
      {
LABEL_227:
        __p = v160;
        *(_QWORD *)&v371 = v161;
        *((_QWORD *)&v371 + 1) = &v159[8 * v158];
        if (!v150)
          goto LABEL_229;
LABEL_228:
        operator delete(v150);
        goto LABEL_229;
      }
    }
    else
    {
      v159 = 0;
      v160 = (float32x2_t *)(8 * v155);
      *(float32x2_t *)(8 * v155) = v152;
      v161 = 8 * v155 + 8;
      v162 = (char *)v150 - (char *)v153;
      if (v150 == v153)
        goto LABEL_227;
    }
    v163 = v162 - 8;
    if (v163 < 0x168)
    {
      v164 = v150;
      goto LABEL_223;
    }
    v166 = ((char *)&v150[-1] - (char *)v153) & 0xFFFFFFFFFFFFFFF8;
    if (&v159[v154 - 8 - v166] > &v159[v154 - 8])
    {
      v164 = v150;
      do
      {
LABEL_223:
        v165 = v164[-1];
        --v164;
        v160[-1] = v165;
        --v160;
      }
      while (v164 != v153);
      goto LABEL_224;
    }
    if ((float32x2_t *)((char *)&v150[-1] - v166) > &v150[-1])
    {
      v164 = v150;
      goto LABEL_223;
    }
    if ((unint64_t)((char *)v150 - v159 - v154) < 0x20)
    {
      v164 = v150;
      goto LABEL_223;
    }
    v167 = (v163 >> 3) + 1;
    v168 = 8 * (v167 & 0x3FFFFFFFFFFFFFFCLL);
    v164 = &v150[v168 / 0xFFFFFFFFFFFFFFF8];
    v160 = (float32x2_t *)((char *)v160 - v168);
    v169 = &v159[8 * v155 - 16];
    v170 = v150 - 2;
    v171 = v167 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v172 = *(_OWORD *)v170->f32;
      *(v169 - 1) = *(_OWORD *)v170[-2].f32;
      *v169 = v172;
      v169 -= 2;
      v170 -= 4;
      v171 -= 4;
    }
    while (v171);
    if (v167 != (v167 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_223;
LABEL_224:
    v150 = (float32x2_t *)__p;
    __p = v160;
    *(_QWORD *)&v371 = v161;
    *((_QWORD *)&v371 + 1) = &v159[8 * v158];
    if (v150)
      goto LABEL_228;
LABEL_229:
    v15 = a3;
    *(_QWORD *)&v371 = v161;
    ++v151;
    v150 = (float32x2_t *)v161;
  }
  while ((_DWORD)v151 != (_DWORD)v5);
LABEL_241:
  v173 = 0;
  v174 = __p;
  v175 = a1;
  while ((_DWORD)v5 - 2 != v173)
  {
    v176 = v173 + 2;
    v177 = *(float32x2_t *)((char *)__p + 8 * v173++);
    v178 = vmul_f32(vsub_f32(*(float32x2_t *)((char *)__p + 8 * (v173 % v5)), v177), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)((char *)__p + 8 * (v176 % v5)), v177)));
    if (vsub_f32(v178, (float32x2_t)vdup_lane_s32((int32x2_t)v178, 1)).f32[0] < -0.001)
    {
      v73 = 0;
      goto LABEL_491;
    }
  }
  v179 = 0;
  v358 = 0;
  v359 = 0;
  v180 = (v5 - 1);
  v360 = 0;
  v345 = v15 + 24;
  v355 = 0;
  v356 = 0;
  v349 = v15 + 12;
  v357 = 0;
  v353 = 0x8000000080000000;
  v354 = 0x7FFFFFFF;
  while (2)
  {
    if (!v179)
    {
      v181 = v359;
      if (v359 < v360)
      {
        v182 = (_BYTE *)v349;
LABEL_302:
        v206 = *(_QWORD *)v182;
        *((_DWORD *)v181 + 2) = *((_DWORD *)v182 + 2);
        *(_QWORD *)v181 = v206;
        v207 = v181 + 12;
        goto LABEL_326;
      }
      v197 = (char *)v358;
      v198 = 0xAAAAAAAAAAAAAAABLL * ((v359 - (_BYTE *)v358) >> 2);
      v199 = v198 + 1;
      if (v198 + 1 > 0x1555555555555555)
        goto LABEL_496;
      if (0x5555555555555556 * ((v360 - (_BYTE *)v358) >> 2) > v199)
        v199 = 0x5555555555555556 * ((v360 - (_BYTE *)v358) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v360 - (_BYTE *)v358) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v200 = 0x1555555555555555;
      else
        v200 = v199;
      if (v200)
      {
        if (v200 > 0x1555555555555555)
          goto LABEL_498;
        v201 = (char *)operator new(12 * v200);
      }
      else
      {
        v201 = 0;
      }
      v211 = &v201[12 * v198];
      *(_QWORD *)v211 = *(_QWORD *)v349;
      *((_DWORD *)v211 + 2) = *(_DWORD *)(v349 + 8);
      v212 = v211;
      if (v181 == v197)
        goto LABEL_324;
      do
      {
        v213 = *(_QWORD *)(v181 - 12);
        v181 -= 12;
        v214 = *((_DWORD *)v181 + 2);
        *(_QWORD *)(v212 - 12) = v213;
        v212 -= 12;
        *((_DWORD *)v212 + 2) = v214;
      }
      while (v181 != v197);
LABEL_323:
      v181 = (char *)v358;
      goto LABEL_324;
    }
    if (v179 != v180)
    {
      v183 = *(_DWORD *)v358;
      v184 = *((_DWORD *)v358 + 1);
      v185 = *((int *)v358 + 2);
      v186 = *v175;
      v187 = (int8x8_t)(*v175)[1];
      if (v187)
      {
        v189 = (uint8x8_t)vcnt_s8(v187);
        v189.i16[0] = vaddlv_u8(v189);
        v190 = *(_QWORD *)&v187 - 1;
LABEL_255:
        ++v185;
        v188 = (19349669 * v184) ^ (73856093 * v183);
        v191 = v188 ^ (83492791 * v185);
        if (v189.u32[0] > 1uLL)
        {
          v192 = v188 ^ (83492791 * v185);
          if (v191 >= *(_QWORD *)&v187)
            v192 = v191 % *(_QWORD *)&v187;
        }
        else
        {
          v192 = v191 & v190;
        }
        v193 = *(uint64_t ***)&(*v186)[8 * v192];
        if (v193)
        {
          v194 = *v193;
          if (v194)
          {
            if (v189.u32[0] < 2uLL)
            {
              while (1)
              {
                v195 = v194[1];
                if (v191 == v195)
                {
                  if (*((_DWORD *)v194 + 4) == v183
                    && *((_DWORD *)v194 + 5) == v184
                    && *((_DWORD *)v194 + 6) == (_DWORD)v185)
                  {
                    goto LABEL_255;
                  }
                }
                else if ((v195 & v190) != v192)
                {
                  goto LABEL_298;
                }
                v194 = (uint64_t *)*v194;
                if (!v194)
                  goto LABEL_298;
              }
            }
            do
            {
              v196 = v194[1];
              if (v191 == v196)
              {
                if (*((_DWORD *)v194 + 4) == v183
                  && *((_DWORD *)v194 + 5) == v184
                  && *((_DWORD *)v194 + 6) == (_DWORD)v185)
                {
                  goto LABEL_255;
                }
              }
              else
              {
                if (v196 >= *(_QWORD *)&v187)
                  v196 %= *(_QWORD *)&v187;
                if (v196 != v192)
                  break;
              }
              v194 = (uint64_t *)*v194;
            }
            while (v194);
          }
        }
      }
      else
      {
        LODWORD(v185) = v185 + 1;
      }
LABEL_298:
      *(_WORD *)v376 = 1;
      *(_DWORD *)&v376[4] = v183;
      *(_DWORD *)&v376[8] = v184;
      *(_DWORD *)&v376[12] = v185;
      *(_OWORD *)&v376[16] = *((unint64_t *)__p + v179);
      *(_QWORD *)&v376[32] = 0;
      *(_QWORD *)&v376[40] = 0;
      v361 = (void **)&v376[4];
      v205 = sub_2239A5D2C((uint64_t)v186, (int *)&v376[4], (uint64_t)&unk_2245BA939, (uint64_t **)&v361);
      *((_WORD *)v205 + 14) = *(_WORD *)v376;
      if (v205 + 28 != v376)
      {
        *((_QWORD *)v205 + 4) = *(_QWORD *)&v376[4];
        *((_DWORD *)v205 + 10) = *(_DWORD *)&v376[12];
      }
      *(_OWORD *)(v205 + 44) = *(_OWORD *)&v376[16];
      *(_OWORD *)(v205 + 60) = *(_OWORD *)&v376[32];
      v181 = v359;
      if (v359 < v360)
      {
        v182 = &v376[4];
        goto LABEL_302;
      }
      v208 = (char *)v358;
      v209 = 0xAAAAAAAAAAAAAAABLL * ((v359 - (_BYTE *)v358) >> 2);
      v210 = v209 + 1;
      if (v209 + 1 > 0x1555555555555555)
        sub_22316E078();
      if (0x5555555555555556 * ((v360 - (_BYTE *)v358) >> 2) > v210)
        v210 = 0x5555555555555556 * ((v360 - (_BYTE *)v358) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v360 - (_BYTE *)v358) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v200 = 0x1555555555555555;
      else
        v200 = v210;
      if (v200)
      {
        if (v200 > 0x1555555555555555)
          sub_223174E94();
        v201 = (char *)operator new(12 * v200);
      }
      else
      {
        v201 = 0;
      }
      v211 = &v201[12 * v209];
      *(_QWORD *)v211 = *(_QWORD *)&v376[4];
      *((_DWORD *)v211 + 2) = *(_DWORD *)&v376[12];
      v212 = v211;
      if (v181 == v208)
        goto LABEL_324;
      do
      {
        v217 = *(_QWORD *)(v181 - 12);
        v181 -= 12;
        v218 = *((_DWORD *)v181 + 2);
        *(_QWORD *)(v212 - 12) = v217;
        v212 -= 12;
        *((_DWORD *)v212 + 2) = v218;
      }
      while (v181 != v208);
      goto LABEL_323;
    }
    v181 = v359;
    if (v359 < v360)
    {
      v182 = (_BYTE *)v345;
      goto LABEL_302;
    }
    v202 = (char *)v358;
    v203 = 0xAAAAAAAAAAAAAAABLL * ((v359 - (_BYTE *)v358) >> 2);
    v204 = v203 + 1;
    if (v203 + 1 > 0x1555555555555555)
LABEL_496:
      sub_22316E078();
    if (0x5555555555555556 * ((v360 - (_BYTE *)v358) >> 2) > v204)
      v204 = 0x5555555555555556 * ((v360 - (_BYTE *)v358) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((v360 - (_BYTE *)v358) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v200 = 0x1555555555555555;
    else
      v200 = v204;
    if (v200)
    {
      if (v200 > 0x1555555555555555)
LABEL_498:
        sub_223174E94();
      v201 = (char *)operator new(12 * v200);
    }
    else
    {
      v201 = 0;
    }
    v211 = &v201[12 * v203];
    *(_QWORD *)v211 = *(_QWORD *)v345;
    *((_DWORD *)v211 + 2) = *(_DWORD *)(v345 + 8);
    v212 = v211;
    if (v181 != v202)
    {
      do
      {
        v215 = *(_QWORD *)(v181 - 12);
        v181 -= 12;
        v216 = *((_DWORD *)v181 + 2);
        *(_QWORD *)(v212 - 12) = v215;
        v212 -= 12;
        *((_DWORD *)v212 + 2) = v216;
      }
      while (v181 != v202);
      goto LABEL_323;
    }
LABEL_324:
    v207 = v211 + 12;
    v358 = v212;
    v359 = v211 + 12;
    v360 = &v201[12 * v200];
    if (v181)
      operator delete(v181);
LABEL_326:
    v359 = v207;
    if (v179)
    {
      v219 = v175[1];
      v221 = *v219;
      v220 = v219[1];
      v222 = sub_22393835C(*v175, (int *)v358 + 3 * v179 - 3);
      if (!v222 || (v223 = sub_22393835C(*v175, (int *)v358 + 3 * v179)) == 0)
        sub_223198218("unordered_map::at: key not found");
      *(_DWORD *)v376 = -1431655765 * ((unint64_t)(v220 - v221) >> 5);
      *(_WORD *)&v376[4] = 1;
      *(_QWORD *)&v376[8] = v222[4];
      *(_DWORD *)&v376[16] = *((_DWORD *)v222 + 10);
      *(_QWORD *)&v376[20] = v223[4];
      *(_DWORD *)&v376[28] = *((_DWORD *)v223 + 10);
      *(_DWORD *)&v376[36] = 1008981770;
      *(_QWORD *)&v376[44] = 0;
      *(_QWORD *)&v376[52] = *(uint64_t *)((char *)v222 + 44);
      *(_QWORD *)&v376[60] = *(uint64_t *)((char *)v223 + 44);
      *(_WORD *)&v376[80] = 0;
      *(_QWORD *)&v376[84] = -1;
      *(_WORD *)&v376[92] = 0;
      v376[94] = 0;
      v224 = *(float *)&v376[60];
      v225 = vsub_f32(*(float32x2_t *)&v376[60], *(float32x2_t *)&v376[52]);
      *(_DWORD *)&v376[32] = sqrtf(vmla_lane_f32(vmul_f32(v225, v225), (float32x2_t)vdup_lane_s32((int32x2_t)v225, 1), v225, 1).f32[0]);
      if (*(float *)&v376[60] >= *(float *)&v376[52])
        v226 = *(float *)&v376[52];
      else
        v226 = *(float *)&v376[60];
      *(float *)&v376[40] = *(float *)&v376[32] / 0.01;
      if (*(float *)&v376[52] >= *(float *)&v376[60])
        v224 = *(float *)&v376[52];
      *(float *)&v376[68] = v226;
      *(float *)&v376[72] = v224;
      v227 = (float)(atan2f(v225.f32[1], v225.f32[0]) * -57.296) + 90.0;
      if (v227 < 0.0)
        v227 = v227 + 360.0;
      *(float *)&v376[76] = v227;
      v228 = v175[1];
      v229 = v228[1];
      if (v229 >= v228[2])
      {
        v238 = sub_2239A403C(v175[1], (uint64_t)v376);
        v175 = a1;
        v180 = (v5 - 1);
        v228[1] = v238;
        v236 = v356;
        v235 = v357;
        if (v356 >= v357)
          goto LABEL_340;
LABEL_338:
        *(_DWORD *)v236 = *(_DWORD *)v376;
        v237 = (uint64_t)(v236 + 4);
      }
      else
      {
        v230 = *(_DWORD *)v376;
        *((_WORD *)v229 + 2) = *(_WORD *)&v376[4];
        *(_DWORD *)v229 = v230;
        v231 = *(_QWORD *)&v376[8];
        *((_DWORD *)v229 + 4) = *(_DWORD *)&v376[16];
        *((_QWORD *)v229 + 1) = v231;
        v232 = *(_QWORD *)&v376[20];
        *((_DWORD *)v229 + 7) = *(_DWORD *)&v376[28];
        *(_QWORD *)(v229 + 20) = v232;
        v233 = *(_QWORD *)&v376[32];
        *((_DWORD *)v229 + 10) = *(_DWORD *)&v376[40];
        *((_QWORD *)v229 + 4) = v233;
        *(_OWORD *)(v229 + 44) = *(_OWORD *)&v376[44];
        *(_QWORD *)(v229 + 60) = *(_QWORD *)&v376[60];
        v234 = *(_OWORD *)&v376[68];
        *(_OWORD *)(v229 + 79) = *(_OWORD *)&v376[79];
        *(_OWORD *)(v229 + 68) = v234;
        v228[1] = v229 + 96;
        v236 = v356;
        v235 = v357;
        if (v356 < v357)
          goto LABEL_338;
LABEL_340:
        v239 = (char *)v355;
        v240 = v236 - (_BYTE *)v355;
        v241 = (v236 - (_BYTE *)v355) >> 2;
        v242 = v241 + 1;
        if ((unint64_t)(v241 + 1) >> 62)
          sub_22316E078();
        v243 = v235 - (_BYTE *)v355;
        if (v243 >> 1 > v242)
          v242 = v243 >> 1;
        if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFFCLL)
          v244 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v244 = v242;
        if (v244)
        {
          if (v244 >> 62)
            sub_223174E94();
          v245 = operator new(4 * v244);
          v246 = &v245[4 * v241];
          *v246 = *(_DWORD *)v376;
          v237 = (uint64_t)(v246 + 1);
          v247 = v236 - v239;
          if (v236 != v239)
          {
LABEL_349:
            v248 = v247 - 4;
            if (v248 < 0x2C)
              goto LABEL_531;
            if ((unint64_t)(v236 - v245 - v240) < 0x20)
              goto LABEL_531;
            v249 = (v248 >> 2) + 1;
            v250 = 4 * (v249 & 0x7FFFFFFFFFFFFFF8);
            v251 = &v236[-v250];
            v246 = (_DWORD *)((char *)v246 - v250);
            v252 = &v245[4 * v241 - 16];
            v253 = v236 - 16;
            v254 = v249 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v255 = *(_OWORD *)v253;
              *(v252 - 1) = *((_OWORD *)v253 - 1);
              *v252 = v255;
              v252 -= 2;
              v253 -= 32;
              v254 -= 8;
            }
            while (v254);
            v236 = v251;
            if (v249 != (v249 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_531:
              do
              {
                v256 = *((_DWORD *)v236 - 1);
                v236 -= 4;
                *--v246 = v256;
              }
              while (v236 != v239);
            }
          }
        }
        else
        {
          v245 = 0;
          v246 = (_DWORD *)(4 * v241);
          *(_DWORD *)(4 * v241) = *(_DWORD *)v376;
          v237 = 4 * v241 + 4;
          v247 = v236 - v239;
          if (v236 != v239)
            goto LABEL_349;
        }
        v355 = v246;
        v357 = &v245[4 * v244];
        if (v239)
          operator delete(v239);
        v175 = a1;
        v180 = (v5 - 1);
      }
      v356 = (char *)v237;
      v361 = (void **)*((_QWORD *)__p + v179 - 1);
      rep = *((_QWORD *)__p + v179);
      if (v179 == 1)
        v257 = (unint64_t *)v349;
      else
        v257 = &v353;
      if (v179 == v180)
        v258 = (unint64_t *)v345;
      else
        v258 = &v353;
      if ((sub_22399B0EC(a2, (float32x2_t *)&v361, (uint64_t)v257, (uint64_t)v258, *v175) & 1) != 0)
        goto LABEL_485;
    }
    if ((_DWORD)++v179 != (_DWORD)v5)
      continue;
    break;
  }
  v259 = v355;
  if (v356 != v355)
  {
    v260 = 0;
    v261 = (v356 - (_BYTE *)v355) >> 2;
    do
    {
      v262 = v259[v260];
      if (*(float *)&(*a1[1])[96 * v262 + 32] >= 0.01)
      {
        v263 = (char *)v358 + 12 * v260;
        v264 = *((_DWORD *)v263 + 2);
        v351 = *(_QWORD *)v263;
        v352 = v264;
        sub_223999954(a4, &v351, v262);
      }
      ++v260;
    }
    while (v261 != v260);
  }
  v265 = (_DWORD *)a2[1];
  v266 = (_DWORD *)a2[2];
  if (v265 == v266)
    goto LABEL_391;
  v267 = 0;
  v268 = -1;
  v269 = -1;
  v270 = (_DWORD *)a2[1];
  do
  {
    if (*v270 == *(_DWORD *)(a3 + 12) && v270[1] == *(_DWORD *)(a3 + 16) && v270[2] == *(_DWORD *)(a3 + 20))
      v269 = v267;
    if (*v270 == *(_DWORD *)(a3 + 24) && v270[1] == *(_DWORD *)(a3 + 28) && v270[2] == *(_DWORD *)(a3 + 32))
      v268 = v267;
    ++v267;
    v270 += 3;
  }
  while (v270 != v266);
  if (v269 == -1 || v268 == -1)
  {
LABEL_391:
    v277 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v277 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&unk_255789280, "cv3d.recon.vlm_sb", 0x11uLL, "Expansion node not found", 0x18uLL);
    v278 = atomic_load((unsigned __int8 *)&qword_2540CCAE8);
    if ((v278 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCAE8))
    {
      sub_22455F53C(&v361);
      sub_223174DE4(v376, "cv3dapi.recon3d");
      sub_2232300E0((uint64_t **)&v361, (uint64_t)v376, &qword_2540CCAE0);
      if ((v376[23] & 0x80000000) != 0)
        operator delete(*(void **)v376);
      __cxa_guard_release(&qword_2540CCAE8);
    }
    v350 = qword_2540CCAE0;
    if (**(int **)(qword_2540CCAE0 + 56) > 5)
      goto LABEL_485;
    v279 = *(unsigned __int8 *)(qword_2540CCAE0 + 72);
    v280 = sub_22322F254(qword_2540CCAE0, "OSLogSurrogateAppender", 1, 0);
    v281 = v280;
    if (!v279 && !v280)
      goto LABEL_485;
    v361 = (void **)&v350;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v363 = std::chrono::system_clock::now().__d_.__rep_;
    v364 = 5;
    v365 = "unknown file";
    v366 = 1663;
    v368 = 0;
    v369 = 0;
    v367 = "unknown function";
    v282 = (unsigned __int8 *)*v361;
    v283 = (uint64_t)*v361 + 16;
    if (*((char *)*v361 + 39) < 0)
    {
      v285 = (const char *)*((_QWORD *)v282 + 2);
      v284 = *((_QWORD *)v282 + 3);
    }
    else
    {
      v284 = *((unsigned __int8 *)*v361 + 39);
      v285 = (char *)*v361 + 16;
    }
    v286 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v286 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v376);
      sub_223199C58("com.apple.cv3d", (unint64_t)v376, &xmmword_255788F40);
      if (v376[24] && (v376[23] & 0x80000000) != 0)
        operator delete(*(void **)v376);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v287 = (const char *)&xmmword_255788F40;
    else
      v287 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v288 = byte_255788F57;
    else
      v288 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v376 = os_log_create(v287, v285);
    v289 = &v376[8];
    if (v288 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v288 >= 0x17)
    {
      v290 = v281;
      v291 = v285;
      v292 = v282;
      v293 = v279;
      v294 = v283;
      v295 = (v288 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v288 | 7) != 0x17)
        v295 = v288 | 7;
      v296 = v295 + 1;
      v289 = operator new(v295 + 1);
      *(_QWORD *)&v376[16] = v288;
      *(_QWORD *)&v376[24] = v296 | 0x8000000000000000;
      *(_QWORD *)&v376[8] = v289;
      v283 = v294;
      v279 = v293;
      v282 = v292;
      v285 = v291;
      v281 = v290;
    }
    else
    {
      v376[31] = v288;
      if (!v288)
      {
LABEL_415:
        v289[v288] = 0;
        v376[32] = 1;
        v297 = &v376[40];
        if (v284 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v284 >= 0x17)
        {
          v298 = (v284 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v284 | 7) != 0x17)
            v298 = v284 | 7;
          v299 = v298 + 1;
          v297 = operator new(v298 + 1);
          *(_QWORD *)&v376[48] = v284;
          *(_QWORD *)&v376[56] = v299 | 0x8000000000000000;
          *(_QWORD *)&v376[40] = v297;
        }
        else
        {
          v376[63] = v284;
          if (!v284)
            goto LABEL_423;
        }
        memmove(v297, v285, v284);
LABEL_423:
        v297[v284] = 0;
        v376[64] = 1;
        v300 = *(NSObject **)v376;
        if ((v376[63] & 0x80000000) != 0)
          operator delete(*(void **)&v376[40]);
        if (v376[32] && (v376[31] & 0x80000000) != 0)
          operator delete(*(void **)&v376[8]);
        if (*(_QWORD *)v376)
          os_release(*(void **)v376);
        if (v281 && *(_QWORD *)(v281 + 24))
        {
          v301 = _os_log_pack_size();
          v302 = (std::__shared_weak_count_vtbl *)operator new(v301, (std::align_val_t)8uLL);
          v303 = (std::__shared_weak_count *)operator new();
          v304 = v303;
          v303->__shared_owners_ = 0;
          v305 = (unint64_t *)&v303->__shared_owners_;
          v303->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v303->__shared_weak_owners_ = 0;
          v303[1].__vftable = v302;
          *(_QWORD *)v376 = v302;
          *(_QWORD *)&v376[8] = v302;
          *(_QWORD *)&v376[16] = v303;
          do
            v306 = __ldxr(v305);
          while (__stxr(v306 + 1, v305));
          memset(&v376[24], 0, 24);
          do
            v307 = __ldaxr(v305);
          while (__stlxr(v307 - 1, v305));
          if (!v307)
          {
            ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
            std::__shared_weak_count::__release_weak(v304);
          }
          v308 = *(_QWORD *)v376;
          *(_WORD *)_os_log_pack_fill() = 0;
          v309 = operator new();
          v310 = v282[39];
          if ((v310 & 0x80u) == 0)
            v311 = v283;
          else
            v311 = *((_QWORD *)v282 + 2);
          if ((v310 & 0x80u) != 0)
            v310 = *((_QWORD *)v282 + 3);
          *(_QWORD *)v309 = v308;
          *(_OWORD *)(v309 + 8) = *(_OWORD *)&v376[8];
          *(_QWORD *)&v376[8] = 0;
          *(_QWORD *)&v376[16] = 0;
          *(_OWORD *)(v309 + 24) = *(_OWORD *)&v376[24];
          *(_QWORD *)&v376[24] = 0;
          *(_QWORD *)&v376[32] = 0;
          *(_QWORD *)(v309 + 40) = v311;
          *(_QWORD *)(v309 + 48) = v310;
          *(_BYTE *)(v309 + 56) = 16;
          v374 = 0;
          v375 = v309;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v281 + 24) + 40))(*(_QWORD *)(v281 + 24), &v375);
          v312 = v375;
          v375 = 0;
          if (v312)
          {
            v313 = *(std::__shared_weak_count **)(v312 + 32);
            if (v313)
            {
              v314 = (unint64_t *)&v313->__shared_owners_;
              do
                v315 = __ldaxr(v314);
              while (__stlxr(v315 - 1, v314));
              if (!v315)
              {
                ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                std::__shared_weak_count::__release_weak(v313);
              }
            }
            v316 = *(std::__shared_weak_count **)(v312 + 16);
            if (v316)
            {
              v317 = (unint64_t *)&v316->__shared_owners_;
              do
                v318 = __ldaxr(v317);
              while (__stlxr(v318 - 1, v317));
              if (!v318)
              {
                ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
                std::__shared_weak_count::__release_weak(v316);
              }
            }
            MEMORY[0x227684CE8](v312, 0x10F0C40B62ED6C6);
            v319 = v374;
            v374 = 0;
            if (v319)
            {
              v320 = *(std::__shared_weak_count **)(v319 + 32);
              if (v320)
              {
                v321 = (unint64_t *)&v320->__shared_owners_;
                do
                  v322 = __ldaxr(v321);
                while (__stlxr(v322 - 1, v321));
                if (!v322)
                {
                  ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                  std::__shared_weak_count::__release_weak(v320);
                }
              }
              v323 = *(std::__shared_weak_count **)(v319 + 16);
              if (v323)
              {
                v324 = (unint64_t *)&v323->__shared_owners_;
                do
                  v325 = __ldaxr(v324);
                while (__stlxr(v325 - 1, v324));
                if (!v325)
                {
                  ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                  std::__shared_weak_count::__release_weak(v323);
                }
              }
              MEMORY[0x227684CE8](v319, 0x10F0C40B62ED6C6);
            }
          }
          v326 = *(std::__shared_weak_count **)&v376[32];
          if (*(_QWORD *)&v376[32])
          {
            v327 = (unint64_t *)(*(_QWORD *)&v376[32] + 8);
            do
              v328 = __ldaxr(v327);
            while (__stlxr(v328 - 1, v327));
            if (!v328)
            {
              ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
              std::__shared_weak_count::__release_weak(v326);
            }
          }
          v329 = *(std::__shared_weak_count **)&v376[16];
          if (*(_QWORD *)&v376[16])
          {
            v330 = (unint64_t *)(*(_QWORD *)&v376[16] + 8);
            do
              v331 = __ldaxr(v330);
            while (__stlxr(v331 - 1, v330));
            if (!v331)
            {
              ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
              std::__shared_weak_count::__release_weak(v329);
            }
          }
        }
        else
        {
          os_log_type_enabled(v300, OS_LOG_TYPE_ERROR);
          *(_WORD *)v376 = 0;
          v332 = (void *)_os_log_send_and_compose_impl();
          if (v332)
            free(v332);
        }
        if (v279)
        {
          sub_22322C138((uint64_t)&v361, "Expansion node not found");
          sub_223182C08((uint64_t)&v361);
        }
        sub_223182C08((uint64_t)&v361);
        v333 = v369;
        if (v369)
        {
          v334 = (unint64_t *)&v369->__shared_owners_;
          do
            v335 = __ldaxr(v334);
          while (__stlxr(v335 - 1, v334));
          if (!v335)
          {
            ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
            std::__shared_weak_count::__release_weak(v333);
          }
        }
LABEL_485:
        v73 = 0;
        goto LABEL_486;
      }
    }
    memmove(v289, v287, v288);
    goto LABEL_415;
  }
  v271 = 0xAAAAAAAAAAAAAAABLL * (v266 - v265);
  v272 = v268 % v271;
  v273 = ((v271 + v269 - 1) % v271) % v271;
  while (1)
  {
    v274 = (uint64_t *)&v265[3 * v272];
    v275 = *(_DWORD *)(a2[4] + 4 * v272);
    v276 = *v274;
    *(_DWORD *)&v376[8] = *((_DWORD *)v274 + 2);
    *(_QWORD *)v376 = v276;
    sub_223999954(a4, (uint64_t *)v376, v275);
    if ((_DWORD)v272 == v273)
      break;
    v265 = (_DWORD *)a2[1];
    v272 = (v272 + 1) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[2] - (_QWORD)v265) >> 2));
  }
  sub_22399A4DC(a4, *a1);
  v73 = 1;
LABEL_486:
  if (v355)
    operator delete(v355);
  if (v358)
  {
    v359 = (char *)v358;
    operator delete(v358);
  }
  v174 = __p;
  if (__p)
LABEL_491:
    operator delete(v174);
  return v73;
}

void sub_2239A8AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  uint64_t v46;
  void *v48;
  void *v49;

  if (*(_BYTE *)(v46 - 216))
  {
    if (*(char *)(v46 - 217) < 0)
      operator delete(*(void **)(v46 - 240));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a36);
  if (__p)
  {
    operator delete(__p);
    v48 = a33;
    if (!a33)
    {
LABEL_6:
      v49 = a45;
      if (!a45)
        goto LABEL_7;
      goto LABEL_10;
    }
  }
  else
  {
    v48 = a33;
    if (!a33)
      goto LABEL_6;
  }
  operator delete(v48);
  v49 = a45;
  if (!a45)
LABEL_7:
    _Unwind_Resume(a1);
LABEL_10:
  a46 = (uint64_t)v49;
  operator delete(v49);
  _Unwind_Resume(a1);
}

void **sub_2239A8E8C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2239A8EFC(_QWORD *a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  int *v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  int v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  float v31;
  int v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  int v48;
  float *v49;
  unsigned int v50;
  unsigned int v51;
  char *v52;
  float *v53;
  float *v54;
  float v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  char *v61;
  float *v62;
  char *v63;
  char *v64;
  void *v65;
  float v66;
  float *v68;
  float *v69;
  float v70;
  int v71;
  uint64_t v72;
  unsigned __int8 v73;
  void *v74;
  float *v75;
  unsigned __int8 v76;
  const char *v77;
  size_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  unint64_t v92;
  void *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  float *v121;
  float v122;
  float *v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float *v136;
  float v137;
  float v138;
  _BOOL4 v139;
  float v140;
  int v141;
  float v142;
  _BOOL4 v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float *v153;
  float v154;
  float v155;
  float v156;
  float32x2_t *v157;
  float32x2_t v158;
  float *v160;
  char *v161;
  char *v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  int v187;
  char *v188;
  uint64_t v189;
  char *v190;
  int *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t i;
  _QWORD *v195;
  _QWORD *v196;
  void *v197;
  float *v198;
  void *v199;
  void *v200;
  uint64_t v202;
  float *v203;
  float *v204;
  float v205;
  uint64_t v206;
  uint64_t v207;
  const char *__src;
  float *v209;
  int v210;
  size_t __len;
  int category;
  char *categorya;
  int *v216;
  _QWORD *v217;
  unint64_t v218;
  void *v219;
  float *v220;
  uint64_t v221;
  _QWORD v222[3];
  int v223;
  const char *v224;
  int v225;
  const char *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  uint64_t v229;
  void *object;
  void *v231[2];
  __int128 v232;
  void *__p[2];
  unint64_t v234;
  char v235;
  void *v236[2];
  char v237;
  char v238;
  uint64_t v239;

  v7 = (int *)a2;
  v8 = a4 - *(float *)(a2 + 104);
  if (a4 >= 0.0 && v8 <= 0.0)
  {
    LOBYTE(v9) = 0;
    return v9 & 1;
  }
  v219 = 0;
  v220 = 0;
  v221 = 0;
  object = (void *)a2;
  v231[0] = a1;
  v231[1] = &v219;
  v217 = (_QWORD *)a1[1];
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if (v10 != (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_344:
      abort();
    }
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v7 + 2) - *((_QWORD *)v7 + 1)) >> 2);
  }
  v11 = v10;
  if ((_DWORD)v10)
  {
    v12 = 0;
    v14 = *((_QWORD *)v7 + 4);
    v13 = *((_QWORD *)v7 + 5);
    while (1)
    {
      v15 = (v13 - v14) >> 2;
      if (v15 <= v12)
      {
        v16 = v12;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_344;
        }
        v14 = *((_QWORD *)v7 + 4);
        v13 = *((_QWORD *)v7 + 5);
        v15 = (v13 - v14) >> 2;
        v12 = v16;
      }
      v17 = *v217 + 96 * *(unsigned int *)(v14 + 4 * (v12 % v15));
      v18 = *(float *)(v17 + 36);
      v19 = *(unsigned __int8 *)(v17 + 94);
      if (v18 >= a5 || v19 != 0)
        break;
      if (v11 == ++v12)
        goto LABEL_18;
    }
    category = v12;
  }
  else
  {
LABEL_18:
    category = 0;
  }
  v21 = 0;
  v216 = v7;
  while (1)
  {
    v23 = *((_QWORD *)v7 + 1);
    v22 = *((_QWORD *)v7 + 2);
    v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 2);
    if (v24 != (uint64_t)(*((_QWORD *)v7 + 5) - *((_QWORD *)v7 + 4)) >> 2)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_344;
      }
      v23 = *((_QWORD *)v7 + 1);
      v22 = *((_QWORD *)v7 + 2);
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 2);
    }
    if (v21 >= v24)
      break;
    v25 = (v21 + category) % (0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 2));
    v27 = *((_QWORD *)v7 + 4);
    v26 = *((_QWORD *)v7 + 5);
    if (v25 >= (v26 - v27) >> 2)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_344;
      }
      v27 = *((_QWORD *)v7 + 4);
      v26 = *((_QWORD *)v7 + 5);
    }
    v28 = 0;
    v29 = v21;
    do
    {
      v34 = v28;
      v36 = *((_QWORD *)v7 + 1);
      v35 = *((_QWORD *)v7 + 2);
      v37 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v36) >> 2);
      if (v37 != (v26 - v27) >> 2)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v38 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v40 = qword_255795648;
          v39 = qword_255795650;
          while (v40 != v39)
          {
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v40)(*(_QWORD *)(v40 + 8), "nodes_.size() == edge_indices_.size()", 37, "", 0);
            v40 += 16;
          }
        }
        v41 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          goto LABEL_344;
        v21 = v29;
        qword_255795660(*(_QWORD *)algn_255795668, "nodes_.size() == edge_indices_.size()", 37, "", 0);
        v36 = *((_QWORD *)v7 + 1);
        v35 = *((_QWORD *)v7 + 2);
        v37 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v36) >> 2);
      }
      if (v34 >= v37)
        break;
      v42 = (v34 + v25) % (0xAAAAAAAAAAAAAAABLL * ((v35 - v36) >> 2));
      v27 = *((_QWORD *)v7 + 4);
      v26 = *((_QWORD *)v7 + 5);
      v43 = (v26 - v27) >> 2;
      if (v43 <= v42)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C);
        v44 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v46 = qword_255795648;
          v45 = qword_255795650;
          while (v46 != v45)
          {
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v46)(*(_QWORD *)(v46 + 8), "index < edge_indices_.size()", 28, "Edge index out of bounds", 24);
            v46 += 16;
          }
        }
        v47 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v7 = v216;
        if (!byte_255795670)
          goto LABEL_344;
        v21 = v29;
        qword_255795660(*(_QWORD *)algn_255795668, "index < edge_indices_.size()", 28, "Edge index out of bounds", 24);
        v27 = *((_QWORD *)v216 + 4);
        v26 = *((_QWORD *)v216 + 5);
        v43 = (v26 - v27) >> 2;
      }
      v30 = *v217 + 96 * *(unsigned int *)(v27 + 4 * (v42 % v43));
      v31 = *(float *)(v30 + 36);
      v32 = *(unsigned __int8 *)(v30 + 94);
      v28 = v34 + 1;
    }
    while (v31 < a5 && v32 == 0);
    sub_2239AABE4((int **)&object, v25, v34);
    if (v34 <= 1)
      v48 = 1;
    else
      v48 = v34;
    v21 += v48;
  }
  v49 = v220;
  if (a4 < 0.0)
  {
    v50 = -1431655765 * (((char *)v220 - (_BYTE *)v219) >> 5);
    if (!v50)
      goto LABEL_286;
    v51 = -1431655765 * (((char *)v220 - (_BYTE *)v219) >> 5) - 1;
    while (1)
    {
      --v50;
      v52 = (char *)v219;
      v53 = (float *)((char *)v219 + 96 * v50);
      v54 = v53 + 11;
      v55 = v53[11];
      v56 = v53 + 12;
      v57 = v53[12];
      v58 = v55 - v57;
      v59 = v53[21];
      if (v59 == 3.4028e38)
      {
        if (v55 < 0.0 || v58 > 30.0)
          goto LABEL_76;
      }
      else
      {
        v66 = v58
            + (float)((float)(v59 * (float)(v59 * *((float *)v219 + 24 * v50 + 9)))
                    + (float)(v59 * *((float *)v219 + 24 * v50 + 10)));
        if (v55 < 0.0 || v66 > 30.0)
        {
LABEL_76:
          v61 = (char *)(v53 + 24);
          v62 = v220;
          if (v53 + 24 != v220)
          {
            v53 = (float *)((char *)v219 + 96 * v51);
            v63 = (char *)(v53 + 16);
            do
            {
              *((_QWORD *)v63 - 8) = *((_QWORD *)v63 + 4);
              v64 = v63 - 64;
              *((_DWORD *)v64 + 2) = *((_DWORD *)v63 + 10);
              *(_QWORD *)(v64 + 12) = *(_QWORD *)(v63 + 44);
              *((_DWORD *)v64 + 5) = *((_DWORD *)v63 + 13);
              *((_QWORD *)v64 + 3) = *((_QWORD *)v63 + 7);
              *((_DWORD *)v64 + 8) = *((_DWORD *)v63 + 16);
              *(_OWORD *)(v64 + 36) = *(_OWORD *)(v63 + 68);
              v65 = (void *)*((_QWORD *)v63 - 1);
              if (v65)
              {
                *(_QWORD *)v63 = v65;
                operator delete(v65);
                *(_QWORD *)v63 = 0;
                *((_QWORD *)v63 + 1) = 0;
              }
              *(_OWORD *)(v63 - 8) = *(_OWORD *)(v63 + 88);
              *((_QWORD *)v63 + 1) = *((_QWORD *)v63 + 13);
              *((_QWORD *)v63 + 12) = 0;
              *((_QWORD *)v63 + 13) = 0;
              *((_QWORD *)v63 + 2) = *((_QWORD *)v63 + 14);
              *((_DWORD *)v63 + 6) = *((_DWORD *)v63 + 30);
              v53 += 24;
              v63 += 96;
              *((_QWORD *)v64 + 19) = 0;
            }
            while (v64 + 192 != (char *)v62);
            v61 = (char *)v220;
          }
          while (v61 != (char *)v53)
          {
            v74 = (void *)*((_QWORD *)v61 - 5);
            if (v74)
            {
              *((_QWORD *)v61 - 4) = v74;
              operator delete(v74);
            }
            v61 -= 96;
          }
          v220 = v53;
          goto LABEL_70;
        }
      }
      if (*(_BYTE *)v53 != 2)
      {
        v75 = (float *)((char *)v219 + 96 * v50 + 80);
        if (v59 != 3.4028e38)
          goto LABEL_186;
        goto LABEL_100;
      }
      v68 = (float *)((char *)v219 + 96 * v50);
      v70 = v68[22];
      v69 = v68 + 22;
      v59 = v70;
      if (v70 == 3.4028e38)
        break;
LABEL_185:
      v121 = (float *)&v52[96 * v50];
      v122 = (float)(v55 + (float)((float)(v59 * (float)(v59 * v121[9])) + (float)(v59 * v121[10]))) - v57;
      v75 = v121 + 20;
      if (v122 <= 10.0)
      {
LABEL_186:
        *v75 = v59;
        goto LABEL_70;
      }
LABEL_100:
      *v75 = 0.0;
LABEL_70:
      --v51;
      if (!v50)
      {
        v49 = v220;
        goto LABEL_286;
      }
    }
    *v69 = 0.0;
    sub_2239AAAF0(&v229);
    if (**(int **)(v229 + 56) > 4
      || (v71 = *(unsigned __int8 *)(v229 + 72), v218 = sub_22322F254(v229, "OSLogSurrogateAppender", 1, 0), !v71)
      && !v218)
    {
LABEL_184:
      v59 = *v69;
      v55 = *v54;
      v57 = *v56;
      goto LABEL_185;
    }
    v210 = v71;
    v222[0] = &v229;
    v222[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v222[2] = std::chrono::system_clock::now().__d_.__rep_;
    v223 = 4;
    v224 = "unknown file";
    v225 = 1719;
    v226 = "unknown function";
    v227 = 0;
    v228 = 0;
    v72 = *(_QWORD *)v222[0];
    if (*(char *)(*(_QWORD *)v222[0] + 39) < 0)
    {
      categorya = *(char **)(v72 + 16);
      __len = *(_QWORD *)(v72 + 24);
      v206 = *(_QWORD *)v222[0] + 16;
      v207 = *(_QWORD *)v222[0];
      v76 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v76 & 1) != 0)
        goto LABEL_102;
    }
    else
    {
      categorya = (char *)(*(_QWORD *)v222[0] + 16);
      __len = *(unsigned __int8 *)(*(_QWORD *)v222[0] + 39);
      v206 = (uint64_t)categorya;
      v207 = *(_QWORD *)v222[0];
      v73 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v73 & 1) != 0)
        goto LABEL_102;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v236);
      sub_223199C58("com.apple.cv3d", (unint64_t)v236, &xmmword_255788F40);
      if (v238 && v237 < 0)
        operator delete(v236[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v7 = v216;
    }
LABEL_102:
    if (byte_255788F57 >= 0)
      v77 = (const char *)&xmmword_255788F40;
    else
      v77 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v78 = byte_255788F57;
    else
      v78 = *((_QWORD *)&xmmword_255788F40 + 1);
    __src = v77;
    object = os_log_create(v77, categorya);
    if (v78 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v209 = v69;
    if (v78 >= 0x17)
    {
      v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v78 | 7) != 0x17)
        v80 = v78 | 7;
      v81 = v80 + 1;
      v79 = operator new(v80 + 1);
      v231[1] = (void *)v78;
      *(_QWORD *)&v232 = v81 | 0x8000000000000000;
      v231[0] = v79;
    }
    else
    {
      BYTE7(v232) = v78;
      v79 = v231;
      if (!v78)
      {
LABEL_116:
        *((_BYTE *)v79 + v78) = 0;
        BYTE8(v232) = 1;
        if (__len > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (__len >= 0x17)
        {
          v84 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__len | 7) != 0x17)
            v84 = __len | 7;
          v85 = v84 + 1;
          v82 = operator new(v84 + 1);
          __p[1] = (void *)__len;
          v234 = v85 | 0x8000000000000000;
          __p[0] = v82;
        }
        else
        {
          HIBYTE(v234) = __len;
          v82 = __p;
          if (!__len)
          {
            LOBYTE(__p[0]) = 0;
            v235 = 1;
            v83 = object;
            if ((SHIBYTE(v234) & 0x80000000) == 0)
              goto LABEL_120;
            goto LABEL_126;
          }
        }
        memmove(v82, categorya, __len);
        *((_BYTE *)v82 + __len) = 0;
        v235 = 1;
        v83 = object;
        if ((SHIBYTE(v234) & 0x80000000) == 0)
        {
LABEL_120:
          if (!BYTE8(v232))
            goto LABEL_129;
          goto LABEL_127;
        }
LABEL_126:
        operator delete(__p[0]);
        if (!BYTE8(v232))
        {
LABEL_129:
          if (object)
            os_release(object);
          if (v218 && *(_QWORD *)(v218 + 24))
          {
            v86 = _os_log_pack_size();
            v87 = (std::__shared_weak_count_vtbl *)operator new(v86, (std::align_val_t)8uLL);
            v88 = (std::__shared_weak_count *)operator new();
            v89 = v88;
            v88->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v88->__shared_owners_;
            v88->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v88->__shared_weak_owners_ = 0;
            v88[1].__vftable = v87;
            object = v87;
            v231[0] = v87;
            v231[1] = v88;
            do
              v91 = __ldxr(p_shared_owners);
            while (__stxr(v91 + 1, p_shared_owners));
            v232 = 0uLL;
            __p[0] = 0;
            do
              v92 = __ldaxr(p_shared_owners);
            while (__stlxr(v92 - 1, p_shared_owners));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v89);
            }
            v93 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v94 = (char *)operator new();
            v95 = *(unsigned __int8 *)(v207 + 39);
            v96 = v206;
            if ((v95 & 0x80u) != 0)
            {
              v96 = *(_QWORD *)(v207 + 16);
              v95 = *(_QWORD *)(v207 + 24);
            }
            *(_QWORD *)v94 = v93;
            *(_OWORD *)(v94 + 8) = *(_OWORD *)v231;
            v231[0] = 0;
            v231[1] = 0;
            *(_OWORD *)(v94 + 24) = v232;
            v232 = 0uLL;
            *((_QWORD *)v94 + 5) = v96;
            *((_QWORD *)v94 + 6) = v95;
            v94[56] = 16;
            v239 = 0;
            v236[0] = v94;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v218 + 24) + 40))(*(_QWORD *)(v218 + 24), v236);
            v97 = v236[0];
            v236[0] = 0;
            if (v97)
            {
              v98 = (std::__shared_weak_count *)*((_QWORD *)v97 + 4);
              if (v98)
              {
                v99 = (unint64_t *)&v98->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              v101 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              MEMORY[0x227684CE8](v97, 0x10F0C40B62ED6C6);
              v104 = v239;
              v239 = 0;
              if (v104)
              {
                v105 = *(std::__shared_weak_count **)(v104 + 32);
                if (v105)
                {
                  v106 = (unint64_t *)&v105->__shared_owners_;
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                  }
                }
                v108 = *(std::__shared_weak_count **)(v104 + 16);
                if (v108)
                {
                  v109 = (unint64_t *)&v108->__shared_owners_;
                  do
                    v110 = __ldaxr(v109);
                  while (__stlxr(v110 - 1, v109));
                  if (!v110)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                }
                MEMORY[0x227684CE8](v104, 0x10F0C40B62ED6C6);
              }
            }
            v111 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
            if (*((_QWORD *)&v232 + 1))
            {
              v112 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            v114 = (std::__shared_weak_count *)v231[1];
            if (v231[1])
            {
              v115 = (unint64_t *)((char *)v231[1] + 8);
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
          }
          else
          {
            os_log_type_enabled(v83, OS_LOG_TYPE_ERROR);
            v7 = v216;
            LOWORD(object) = 0;
            v117 = (void *)_os_log_send_and_compose_impl();
            if (v117)
              free(v117);
          }
          if (v210)
          {
            sub_22322C138((uint64_t)v222, "Narrow corner has invalid maximum expansion value");
            sub_223182C08((uint64_t)v222);
          }
          sub_223182C08((uint64_t)v222);
          v118 = v228;
          if (v228)
          {
            v119 = (unint64_t *)&v228->__shared_owners_;
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
          v69 = v209;
          goto LABEL_184;
        }
LABEL_127:
        if (SBYTE7(v232) < 0)
          operator delete(v231[0]);
        goto LABEL_129;
      }
    }
    memmove(v79, __src, v78);
    goto LABEL_116;
  }
  while (2)
  {
    v123 = (float *)v219;
    v124 = ((char *)v49 - (_BYTE *)v219) / 96;
    while (1)
    {
      if (v49 == v123)
      {
        v127 = 0;
        v126 = 0;
        v125 = 0;
        v134 = 0.0;
        v135 = 3.4028e38;
        v130 = 3.4028e38;
        v133 = 0.0;
        v132 = 0.0;
        v131 = 0.0;
        v129 = 0.0;
      }
      else
      {
        v125 = 0;
        v126 = 0;
        v127 = 0;
        v128 = 0;
        v129 = 0.0;
        v130 = 3.4028e38;
        v131 = 0.0;
        v132 = 0.0;
        v133 = 0.0;
        v134 = 0.0;
        v135 = 3.4028e38;
        do
        {
          if (v123[24 * v128 + 20] == 3.4028e38)
          {
            v136 = &v123[24 * v128];
            v132 = v132 + v136[9];
            v137 = v136[12];
            v131 = v131 + v137;
            v133 = v133 + v136[10];
            v134 = v134 + v136[11];
            if (v137 < 0.0 && v137 < v129)
            {
              v125 = v128;
              v129 = v136[12];
            }
            v138 = v136[22];
            v139 = v130 == 3.4028e38;
            if (v138 < v130)
              v139 = 1;
            if (v139)
              v140 = v138;
            else
              v140 = v130;
            if (v139)
              v141 = v128;
            else
              v141 = v126;
            if (v138 != 3.4028e38)
            {
              v130 = v140;
              v126 = v141;
            }
            v142 = v123[24 * v128 + 21];
            if (v142 != 3.4028e38)
            {
              v143 = v135 == 3.4028e38;
              if (v142 > v135)
                v143 = 1;
              if (v143)
              {
                v135 = v123[24 * v128 + 21];
                v127 = v128;
              }
            }
          }
          ++v128;
        }
        while (v124 != v128);
      }
      v144 = v134 - (float)(v8 + v131);
      if (fabsf(v132) >= 0.000001)
      {
        v146 = (float)(v133 * v133) + (float)((float)(v132 * -4.0) * v144);
        if (v146 < 0.0)
        {
LABEL_220:
          if (v130 != 3.4028e38)
            goto LABEL_237;
          if (v135 == 3.4028e38)
            goto LABEL_251;
LABEL_262:
          v160 = &v123[24 * v127];
          if (v160 + 24 != v49)
          {
            v165 = (uint64_t)&v123[24 * v127 + 16];
            do
            {
              *(_QWORD *)(v165 - 64) = *(_QWORD *)(v165 + 32);
              v166 = v165 - 64;
              *(_DWORD *)(v166 + 8) = *(_DWORD *)(v165 + 40);
              *(_QWORD *)(v166 + 12) = *(_QWORD *)(v165 + 44);
              *(_DWORD *)(v166 + 20) = *(_DWORD *)(v165 + 52);
              *(_QWORD *)(v166 + 24) = *(_QWORD *)(v165 + 56);
              *(_DWORD *)(v166 + 32) = *(_DWORD *)(v165 + 64);
              *(_OWORD *)(v166 + 36) = *(_OWORD *)(v165 + 68);
              v167 = *(void **)(v165 - 8);
              if (v167)
              {
                *(_QWORD *)v165 = v167;
                operator delete(v167);
                *(_QWORD *)v165 = 0;
                *(_QWORD *)(v165 + 8) = 0;
              }
              *(_OWORD *)(v165 - 8) = *(_OWORD *)(v165 + 88);
              *(_QWORD *)(v165 + 8) = *(_QWORD *)(v165 + 104);
              *(_QWORD *)(v165 + 96) = 0;
              *(_QWORD *)(v165 + 104) = 0;
              *(_QWORD *)(v165 + 16) = *(_QWORD *)(v165 + 112);
              *(_DWORD *)(v165 + 24) = *(_DWORD *)(v165 + 120);
              v160 += 24;
              v165 += 96;
              *(_QWORD *)(v166 + 152) = 0;
            }
            while ((float *)(v166 + 192) != v49);
            v49 = v220;
          }
          while (v49 != v160)
          {
            v168 = (void *)*((_QWORD *)v49 - 5);
            if (v168)
            {
              *((_QWORD *)v49 - 4) = v168;
              operator delete(v168);
            }
            v49 -= 24;
          }
          goto LABEL_272;
        }
        v147 = sqrtf(v146);
        v148 = -v133;
        if (v147 >= 0.000001)
        {
          v149 = v132 + v132;
          v145 = (float)(v147 - v133) / v149;
          v150 = (float)(v148 - v147) / v149;
          if (v145 >= v150)
            v151 = v145;
          else
            v151 = v150;
          if (v151 < 0.0)
            goto LABEL_231;
          if (v150 < v145)
            v145 = v150;
          if (v145 < 0.0)
LABEL_231:
            v145 = v151;
        }
        else
        {
          v145 = v148 / (float)(v132 + v132);
        }
      }
      else
      {
        if (fabsf(v133) < 0.000001)
          goto LABEL_220;
        v145 = (float)-v144 / v133;
      }
      if (v130 == 3.4028e38)
        break;
      if (v145 != 3.4028e38 && v145 <= v130)
        break;
LABEL_237:
      v153 = &v123[24 * v126];
      v154 = v153[22];
      v155 = v153[12];
      v156 = v153[11] + (float)((float)((float)(v154 * v154) * v153[9]) + (float)(v154 * v153[10]));
      v153[20] = v154;
      v8 = v8 - (float)(v156 - v155);
      if (v8 < 0.0)
      {
        if (v49 == v123)
          goto LABEL_285;
        do
        {
          v169 = (void *)*((_QWORD *)v49 - 5);
          if (v169)
          {
            *((_QWORD *)v49 - 4) = v169;
            operator delete(v169);
          }
          v49 -= 24;
        }
        while (v49 != v123);
LABEL_284:
        v49 = v123;
LABEL_285:
        v220 = v49;
        goto LABEL_286;
      }
      if (v8 < 0.001)
        goto LABEL_286;
      if (*(_BYTE *)v153 == 1)
      {
        v157 = *(float32x2_t **)&v123[24 * v126 + 14];
        v158 = vsub_f32(vmla_n_f32(v157[2], v157[3], v154), vmla_n_f32(v157[4], v157[5], v154));
        if (vmla_lane_f32(vmul_f32(v158, v158), (float32x2_t)vdup_lane_s32((int32x2_t)v158, 1), v158, 1).f32[0] < 0.25)
          v153[20] = 0.0;
      }
    }
    if (v135 != 3.4028e38 && (v145 == 3.4028e38 || v145 < v135))
      goto LABEL_262;
    if (v145 == 3.4028e38 || v145 < 0.0)
    {
LABEL_251:
      if (v129 >= 0.0)
      {
        if (v49 == v123)
          goto LABEL_285;
        do
        {
          v170 = (void *)*((_QWORD *)v49 - 5);
          if (v170)
          {
            *((_QWORD *)v49 - 4) = v170;
            operator delete(v170);
          }
          v49 -= 24;
        }
        while (v49 != v123);
        goto LABEL_284;
      }
      v160 = &v123[24 * v125];
      if (v160 + 24 != v49)
      {
        v160 = &v123[24 * v125];
        v161 = (char *)(v160 + 16);
        do
        {
          *((_QWORD *)v161 - 8) = *((_QWORD *)v161 + 4);
          v162 = v161 - 64;
          *((_DWORD *)v162 + 2) = *((_DWORD *)v161 + 10);
          *(_QWORD *)(v162 + 12) = *(_QWORD *)(v161 + 44);
          *((_DWORD *)v162 + 5) = *((_DWORD *)v161 + 13);
          *((_QWORD *)v162 + 3) = *((_QWORD *)v161 + 7);
          *((_DWORD *)v162 + 8) = *((_DWORD *)v161 + 16);
          *(_OWORD *)(v162 + 36) = *(_OWORD *)(v161 + 68);
          v163 = (void *)*((_QWORD *)v161 - 1);
          if (v163)
          {
            *(_QWORD *)v161 = v163;
            operator delete(v163);
            *(_QWORD *)v161 = 0;
            *((_QWORD *)v161 + 1) = 0;
          }
          *(_OWORD *)(v161 - 8) = *(_OWORD *)(v161 + 88);
          *((_QWORD *)v161 + 1) = *((_QWORD *)v161 + 13);
          *((_QWORD *)v161 + 12) = 0;
          *((_QWORD *)v161 + 13) = 0;
          *((_QWORD *)v161 + 2) = *((_QWORD *)v161 + 14);
          *((_DWORD *)v161 + 6) = *((_DWORD *)v161 + 30);
          v160 += 24;
          v161 += 96;
          *((_QWORD *)v162 + 19) = 0;
        }
        while (v162 + 192 != (char *)v49);
        v49 = v220;
      }
      while (v49 != v160)
      {
        v164 = (void *)*((_QWORD *)v49 - 5);
        if (v164)
        {
          *((_QWORD *)v49 - 4) = v164;
          operator delete(v164);
        }
        v49 -= 24;
      }
LABEL_272:
      v220 = v160;
      v49 = v160;
      continue;
    }
    break;
  }
  if (v49 != v123)
  {
    v202 = 0;
    do
    {
      v203 = &v123[24 * v202];
      v205 = v203[20];
      v204 = v203 + 20;
      if (v205 == 3.4028e38)
        *v204 = v145;
      ++v202;
    }
    while (v124 != v202);
  }
LABEL_286:
  if (v219 == v49)
  {
    LOBYTE(v9) = 0;
    if (!v49)
      return v9 & 1;
    goto LABEL_331;
  }
  v9 = 0;
  v171 = 0;
  object = 0;
  v231[0] = 0;
  v231[1] = 0;
  v172 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (_BYTE *)v219) >> 5);
  while (2)
  {
    v173 = v219;
    v174 = -1 - 0x5555555555555555 * (((char *)v220 - (_BYTE *)v219) >> 5);
    v175 = (char *)v231[0];
    if (v171 != v174)
    {
      if (v231[0] < v231[1])
      {
        *(_DWORD *)v231[0] = 0;
        *((_DWORD *)v175 + 28) = 0;
        *((_QWORD *)v175 + 16) = 0;
        *((_QWORD *)v175 + 17) = 0;
        *((_QWORD *)v175 + 15) = 0;
        *(_OWORD *)(v175 + 8) = 0u;
        *(_OWORD *)(v175 + 24) = 0u;
        *(_OWORD *)(v175 + 40) = 0u;
        *(_OWORD *)(v175 + 56) = 0u;
        *(_OWORD *)(v175 + 72) = 0u;
        *(_OWORD *)(v175 + 88) = 0u;
        v176 = v175 + 144;
        *(_QWORD *)(v175 + 101) = 0;
        goto LABEL_310;
      }
      v177 = (char *)object;
      v178 = 0x8E38E38E38E38E39 * (((char *)v231[0] - (char *)object) >> 4);
      v179 = v178 + 1;
      if (v178 + 1 > 0x1C71C71C71C71C7)
        sub_22316E078();
      v180 = v9;
      if (0x1C71C71C71C71C72 * (((char *)v231[1] - (char *)object) >> 4) > v179)
        v179 = 0x1C71C71C71C71C72 * (((char *)v231[1] - (char *)object) >> 4);
      if (0x8E38E38E38E38E39 * (((char *)v231[1] - (char *)object) >> 4) >= 0xE38E38E38E38E3)
        v181 = 0x1C71C71C71C71C7;
      else
        v181 = v179;
      if (v181)
      {
        if (v181 > 0x1C71C71C71C71C7)
          sub_223174E94();
        v182 = (char *)operator new(144 * v181);
      }
      else
      {
        v182 = 0;
      }
      v183 = &v182[144 * v178];
      *(_DWORD *)v183 = 0;
      *((_DWORD *)v183 + 28) = 0;
      *((_QWORD *)v183 + 16) = 0;
      *((_QWORD *)v183 + 17) = 0;
      v184 = &v182[144 * v181];
      *((_QWORD *)v183 + 15) = 0;
      *(_OWORD *)(v183 + 8) = 0u;
      *(_OWORD *)(v183 + 24) = 0u;
      *(_OWORD *)(v183 + 40) = 0u;
      *(_OWORD *)(v183 + 56) = 0u;
      *(_OWORD *)(v183 + 72) = 0u;
      *(_OWORD *)(v183 + 88) = 0u;
      *(_QWORD *)(v183 + 101) = 0;
      v176 = v183 + 144;
      if (v175 == v177)
      {
        object = v183;
        v231[0] = v183 + 144;
        v231[1] = &v182[144 * v181];
        v9 = v180;
        if (v175)
          goto LABEL_309;
      }
      else
      {
        v185 = 0;
        v9 = v180;
        do
        {
          v186 = &v175[v185];
          v187 = *(_DWORD *)&v175[v185 - 144];
          v188 = &v183[v185];
          *(v188 - 140) = v175[v185 - 140];
          *((_DWORD *)v188 - 36) = v187;
          *((_QWORD *)v188 - 16) = 0;
          *((_QWORD *)v188 - 15) = 0;
          *(_OWORD *)(v188 - 136) = *(_OWORD *)&v175[v185 - 136];
          *((_QWORD *)v188 - 15) = *(_QWORD *)&v175[v185 - 120];
          *((_QWORD *)v186 - 17) = 0;
          *((_QWORD *)v186 - 16) = 0;
          *((_QWORD *)v186 - 15) = 0;
          *((_QWORD *)v188 - 13) = 0;
          *((_QWORD *)v188 - 12) = 0;
          *((_OWORD *)v188 - 7) = *(_OWORD *)&v175[v185 - 112];
          *((_QWORD *)v188 - 12) = *(_QWORD *)&v175[v185 - 96];
          *((_QWORD *)v186 - 14) = 0;
          *((_QWORD *)v186 - 13) = 0;
          *((_QWORD *)v186 - 12) = 0;
          *((_QWORD *)v188 - 10) = 0;
          *((_QWORD *)v188 - 9) = 0;
          *(_OWORD *)(v188 - 88) = *(_OWORD *)&v175[v185 - 88];
          *((_QWORD *)v188 - 9) = *(_QWORD *)&v175[v185 - 72];
          *((_QWORD *)v186 - 11) = 0;
          *((_QWORD *)v186 - 10) = 0;
          *((_QWORD *)v186 - 9) = 0;
          *((_QWORD *)v188 - 7) = 0;
          *((_QWORD *)v188 - 6) = 0;
          *((_OWORD *)v188 - 4) = *(_OWORD *)&v175[v185 - 64];
          *((_QWORD *)v188 - 6) = *(_QWORD *)&v175[v185 - 48];
          *((_QWORD *)v186 - 8) = 0;
          *((_QWORD *)v186 - 7) = 0;
          *((_QWORD *)v186 - 6) = 0;
          v189 = *(_QWORD *)&v175[v185 - 40];
          *((_DWORD *)v188 - 8) = *(_DWORD *)&v175[v185 - 32];
          *((_QWORD *)v188 - 5) = v189;
          *((_QWORD *)v188 - 2) = 0;
          *((_QWORD *)v188 - 1) = 0;
          *(_OWORD *)(v188 - 24) = *(_OWORD *)&v175[v185 - 24];
          *((_QWORD *)v188 - 1) = *(_QWORD *)&v175[v185 - 8];
          *((_QWORD *)v186 - 3) = 0;
          *((_QWORD *)v186 - 2) = 0;
          *((_QWORD *)v186 - 1) = 0;
          v185 -= 144;
        }
        while (&v175[v185] != v177);
        v175 = (char *)object;
        v190 = (char *)v231[0];
        object = &v183[v185];
        v231[0] = v183 + 144;
        for (v231[1] = v184; v190 != v175; v190 = (char *)sub_22391679C((_QWORD *)v190 - 18))
          ;
        if (v175)
LABEL_309:
          operator delete(v175);
      }
LABEL_310:
      v231[0] = v176;
      v175 = v176;
      v173 = v219;
    }
    if ((_DWORD)v171)
      v191 = (int *)((char *)object + 144 * (v171 - 1));
    else
      v191 = v7;
    if (v171 == v174)
      v192 = a3;
    else
      v192 = (uint64_t)(v175 - 144);
    if ((sub_2239A6538((char ***)a1, v191, (uint64_t)v173 + 96 * v171, v192) & 1) != 0)
      v9 = 1;
    else
      sub_2239AA9B8(v192, v191);
    if (++v171 != v172)
      continue;
    break;
  }
  v193 = *((_QWORD *)v7 + 15);
  for (i = *((_QWORD *)v7 + 16); v193 != i; v193 += 144)
    sub_2239A03FC(a3, v193);
  *(_DWORD *)(a3 + 112) = v216[28];
  *(_BYTE *)(a3 + 4) = *((_BYTE *)v216 + 4);
  v195 = object;
  if (object)
  {
    v196 = v231[0];
    v197 = object;
    if (v231[0] != object)
    {
      do
        v196 = sub_22391679C(v196 - 18);
      while (v196 != v195);
      v197 = object;
    }
    v231[0] = v195;
    operator delete(v197);
  }
  v49 = (float *)v219;
  if (v219)
  {
LABEL_331:
    v198 = v220;
    v199 = v49;
    if (v220 != v49)
    {
      do
      {
        v200 = (void *)*((_QWORD *)v198 - 5);
        if (v200)
        {
          *((_QWORD *)v198 - 4) = v200;
          operator delete(v200);
        }
        v198 -= 24;
      }
      while (v198 != v49);
      v199 = v219;
    }
    v220 = v49;
    operator delete(v199);
  }
  return v9 & 1;
}

void sub_2239AA7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 136))
  {
    if (*(char *)(v29 - 137) < 0)
      operator delete(*(void **)(v29 - 160));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a29);
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

void sub_2239AA818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_22319A054((uint64_t *)(v39 - 160));
  sub_22319A054((uint64_t *)(v39 - 128));
  sub_223199DE8((uint64_t)&a39);
  sub_223182DAC((uint64_t)&a29);
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

void sub_2239AA854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  MEMORY[0x227684CE8](v29, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a29);
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

void sub_2239AA888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  sub_223182DAC((uint64_t)&a29);
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

void sub_2239AA904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

void sub_2239AA918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  sub_2239AAA98(&a39);
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

void sub_2239AA954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

void sub_2239AA968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

void sub_2239AA97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

void sub_2239AA990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

void sub_2239AA9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  sub_2239A8E8C(&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_2239AA9B8(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v5;

  v3 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v3;
  if ((int *)a1 != a2)
  {
    sub_2239A506C((_QWORD *)(a1 + 8), *((char **)a2 + 1), *((char **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2));
    sub_22342D7E8((_QWORD *)(a1 + 32), *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_2233320C8((_QWORD *)(a1 + 56), *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
    sub_22362017C(a1 + 80, *((char ***)a2 + 10), *((_QWORD *)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3));
    v5 = *((_QWORD *)a2 + 13);
    *(_DWORD *)(a1 + 112) = a2[28];
    *(_QWORD *)(a1 + 104) = v5;
    sub_2239AEF20((void **)(a1 + 120), *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 4));
  }
  return a1;
}

void **sub_2239AAA98(void **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_22391679C(v3 - 18);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2239AAAF0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCAD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCAD8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.vlm");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCAD0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCAD8);
  }
  *a1 = qword_2540CCAD0;
}

void sub_2239AAB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCAD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCAD8);
  _Unwind_Resume(a1);
}

void sub_2239AABE4(int **a1, unsigned int a2, unsigned int a3)
{
  int *v6;
  int *v7;
  unint64_t v8;
  int **v9;
  int *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int *v23;
  unsigned int v24;
  int **v25;
  _QWORD *v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  int *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  _QWORD **v53;
  _QWORD *v54;
  int *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int *v70;
  unint64_t v71;
  float v72;
  __int32 v73;
  unsigned int v74;
  float v75;
  float32x2_t v76;
  float32x2_t v77;
  float v78;
  unint64_t v80;
  float v81;
  unsigned int v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  unint64_t i;
  unint64_t v90;
  unsigned int v91;
  int v92;
  BOOL v93;
  int v94;
  BOOL v95;
  __int32 v96;
  float v97;
  float32x2_t v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float32x2_t *v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float *v109;
  float v110;
  float v111;
  _BOOL8 v112;
  float v113;
  float v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  const char *v121;
  float v122;
  float v123;
  BOOL v124;
  unsigned __int8 v125;
  const char *v126;
  size_t v127;
  void *v128;
  unint64_t v129;
  const char *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  size_t v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  unint64_t *p_shared_owners;
  unint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float32x2_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  unint64_t v181;
  float32x2_t v182;
  unint64_t v183;
  float32x2_t v184;
  float32x2_t v185;
  void *object;
  void *v187[2];
  __int128 v188;
  void *v189[2];
  void *__p;
  void *v191;
  float v192;
  float32x2_t v193;
  float32x2_t v194;
  float32x2_t v195;
  float32x2_t v196[2];
  float32x2_t v197;
  float32x2_t v198[3];
  int v199;
  const char *v200;
  int v201;
  const char *v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  float32x2_t v208[2];

  if (!a3)
    return;
  v6 = *a1;
  v7 = a1[1];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)*a1 + 2) - *((_QWORD *)*a1 + 1)) >> 2);
  if (v8 != (uint64_t)(*((_QWORD *)*a1 + 5) - *((_QWORD *)*a1 + 4)) >> 2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_217;
    }
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v6 + 2) - *((_QWORD *)v6 + 1)) >> 2);
  }
  if (v8 <= a3)
    return;
  v9 = a1;
  v10 = *a1;
  v11 = a2;
  v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v10 + 2) - *((_QWORD *)v10 + 1)) >> 2);
  v181 = a2;
  v13 = ((a2 + v12 - 1) % v12);
  v14 = (uint64_t *)*((_QWORD *)v7 + 1);
  v15 = *((_QWORD *)v10 + 4);
  v16 = (*((_QWORD *)v10 + 5) - v15) >> 2;
  if (v16 <= v13)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_217;
    }
    v20 = *((_QWORD *)v10 + 4);
    v19 = (*((_QWORD *)v10 + 5) - v20) >> 2;
    v17 = v7;
    v18 = (_QWORD *)*((_QWORD *)v7 + 1);
    v10 = *v9;
    v15 = *((_QWORD *)*v9 + 4);
    v16 = (*((_QWORD *)*v9 + 5) - v15) >> 2;
  }
  else
  {
    v17 = v7;
    v18 = (_QWORD *)*((_QWORD *)v7 + 1);
    v19 = (*((_QWORD *)v10 + 5) - v15) >> 2;
    v20 = *((_QWORD *)v10 + 4);
  }
  v21 = *(_DWORD *)(v20 + 4 * (v13 % v19));
  v22 = *v14;
  v183 = (a3 + v11) % v12;
  if (v16 <= v183)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 340, (uint64_t)"index < edge_indices_.size()", 28, (uint64_t)"Edge index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_217;
    }
    v15 = *((_QWORD *)v10 + 4);
    v16 = (*((_QWORD *)v10 + 5) - v15) >> 2;
  }
  if (*(unsigned __int8 *)(v22 + 96 * v21 + 94) | *(unsigned __int8 *)(*v18
                                                                        + 96
                                                                        * *(unsigned int *)(v15 + 4 * (v183 % v16))
                                                                        + 94))
    return;
  v23 = (_QWORD **)v17;
  v24 = v11;
  v25 = v9;
  v26 = *(_QWORD **)v17;
  v27 = *v9;
  v28 = *((_QWORD *)*v9 + 1);
  v29 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)*v9 + 2) - v28) >> 2);
  if (v29 <= v13)
  {
    v30 = v183;
    v31 = v181;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_217;
    }
    v28 = *((_QWORD *)v27 + 1);
    v29 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v27 + 2) - v28) >> 2);
  }
  else
  {
    v30 = v183;
    v31 = v181;
  }
  v32 = v28 + 12 * (v13 % v29);
  v33 = *(void **)v32;
  LODWORD(v187[0]) = *(_DWORD *)(v32 + 8);
  object = v33;
  v34 = sub_22393835C(v26, (int *)&object);
  if (!v34)
    goto LABEL_218;
  v35 = v34;
  v36 = *v23;
  v37 = *v25;
  v38 = *((_QWORD *)*v25 + 1);
  v39 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)*v25 + 2) - v38) >> 2);
  if (v39 <= v31)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_217;
    }
    v38 = *((_QWORD *)v37 + 1);
    v39 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v37 + 2) - v38) >> 2);
  }
  v40 = v38 + 12 * (v31 % v39);
  v41 = *(void **)v40;
  LODWORD(v187[0]) = *(_DWORD *)(v40 + 8);
  object = v41;
  v42 = sub_22393835C(v36, (int *)&object);
  if (!v42)
    goto LABEL_218;
  v43 = v42;
  v44 = *v23;
  v45 = *v25;
  v46 = *((_QWORD *)*v25 + 1);
  v47 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)*v25 + 2) - v46) >> 2);
  if (v47 <= v30)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_217;
    }
    v46 = *((_QWORD *)v45 + 1);
    v47 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v45 + 2) - v46) >> 2);
  }
  v48 = v46 + 12 * (v30 % v47);
  v49 = *(void **)v48;
  LODWORD(v187[0]) = *(_DWORD *)(v48 + 8);
  object = v49;
  v50 = sub_22393835C(v44, (int *)&object);
  if (!v50)
    goto LABEL_218;
  v51 = v50;
  v52 = (v30 + 1) % v12;
  v53 = v23;
  v54 = *v23;
  v55 = *v25;
  v56 = *((_QWORD *)*v25 + 1);
  v57 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)*v25 + 2) - v56) >> 2);
  if (v57 <= v52)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_217;
    }
    v56 = *((_QWORD *)v55 + 1);
    v57 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v55 + 2) - v56) >> 2);
  }
  v58 = v56 + 12 * (v52 % v57);
  v59 = *(void **)v58;
  LODWORD(v187[0]) = *(_DWORD *)(v58 + 8);
  object = v59;
  v60 = sub_22393835C(v54, (int *)&object);
  if (!v60)
LABEL_218:
    sub_223198218("unordered_map::at: key not found");
  v63 = *(float32x2_t *)((char *)v35 + 44);
  v64 = *(float32x2_t *)((char *)v43 + 44);
  v196[1] = v63;
  v197 = v64;
  v65 = *(float32x2_t *)((char *)v51 + 44);
  v66 = vsub_f32(v64, v63);
  v195 = *(float32x2_t *)((char *)v60 + 44);
  v196[0] = v65;
  v61.f32[0] = 1.0
             / sqrtf(vmla_lane_f32(vmul_f32(v66, v66), (float32x2_t)vdup_lane_s32((int32x2_t)v66, 1), v66, 1).f32[0]);
  v67 = vmul_n_f32(v66, v61.f32[0]);
  v68 = vsub_f32(v65, v195);
  v62.f32[0] = 1.0
             / sqrtf(vmla_lane_f32(vmul_f32(v68, v68), (float32x2_t)vdup_lane_s32((int32x2_t)v68, 1), v68, 1).f32[0]);
  v69 = vmul_n_f32(v68, v62.f32[0]);
  v193 = v69;
  v194 = v67;
  v70 = *v25;
  v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)*v25 + 2) - *((_QWORD *)*v25 + 1)) >> 2);
  if (v71 == (uint64_t)(*((_QWORD *)*v25 + 5) - *((_QWORD *)*v25 + 4)) >> 2)
    goto LABEL_34;
  v176 = v61;
  v177 = v66;
  v178 = v62;
  v179 = v68;
  v180 = v69;
  v182 = v67;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 346, (uint64_t)"nodes_.size() == edge_indices_.size()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_217:
    abort();
  }
  v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v70 + 2) - *((_QWORD *)v70 + 1)) >> 2);
  v69 = v180;
  v67 = v182;
  v62 = v178;
  v68 = v179;
  v61 = v176;
  v66 = v177;
LABEL_34:
  v72 = v67.f32[1];
  v73 = v69.i32[1];
  if (a3 + 1 == (_DWORD)v71)
    goto LABEL_35;
  v96 = v69.i32[0];
  v97 = v64.f32[0];
  v98 = vmul_lane_f32(v61, v66, 1);
  v99 = vmla_lane_f32(vmul_f32(v67, v69), v98, v69, 1).f32[0];
  if (v99 > -0.99619 && v99 < 0.99619)
  {
    v206 = 0;
    if (vmla_lane_f32(vmul_f32(v67, v67), v98, v67, 1).f32[0] >= 0.00000001
      && vmla_f32(vmul_f32(v69, v69), (float32x2_t)vdup_lane_s32((int32x2_t)v69, 1), vmul_lane_f32(v62, v68, 1)).f32[0] >= 0.00000001)
    {
      v100 = (float)(v67.f32[0] * v69.f32[1]) - (float)(v67.f32[1] * v69.f32[0]);
      v101 = vabds_f32(v67.f32[0] * v69.f32[1], v67.f32[1] * v69.f32[0]);
      v102 = vabds_f32(v67.f32[1] * v69.f32[0], v67.f32[0] * v69.f32[1]);
      if (v101 <= v102)
      {
        if (v102 >= 0.00001)
        {
          v103 = (float32x2_t *)((char *)&v193 + 4);
          v105 = (float)((float)((float)((float)(v67.f32[1] * v64.f32[0]) - (float)(v67.f32[0] * v64.f32[1]))
                               + (float)(v67.f32[0] * v65.f32[1]))
                       - (float)(v67.f32[1] * v65.f32[0]))
               / (float)((float)(v67.f32[1] * v69.f32[0]) - (float)(v67.f32[0] * v69.f32[1]));
          *(float *)&v206 = v105;
          v122 = fabsf(v67.f32[0]);
          v123 = fabsf(v67.f32[1]);
          v124 = v122 <= v123;
          if (v122 <= v123)
            v104 = v65.f32[1];
          else
            v104 = v65.f32[0];
          if (v124)
            v97 = v64.f32[1];
          else
            v103 = &v193;
          if (v124)
            v108 = v67.f32[1];
          else
            v108 = v67.f32[0];
          v109 = (float *)&v206 + 1;
LABEL_109:
          *v109 = (float)((float)(v104 + (float)(v105 * v103->f32[0])) - v97) / v108;
          if (*((float *)&v206 + 1) < 0.0 || *(float *)&v206 < 0.0)
          {
            if (*((float *)&v206 + 1) > 0.0 || *(float *)&v206 > 0.0)
            {
              if (*((float *)&v206 + 1) > 0.0)
              {
                v194.i32[0] = v67.i32[1];
                v194.f32[1] = -v67.f32[0];
                v175 = v194;
                v72 = -v67.f32[0];
                v67.i32[0] = v67.i32[1];
              }
              else
              {
                v175 = (float32x2_t)vzip1_s32((int32x2_t)v67, (int32x2_t)v98);
                v193.f32[0] = -v69.f32[1];
                v193.i32[1] = v69.i32[0];
                v69 = v193;
                v73 = v96;
              }
              if (vmla_lane_f32(vmul_f32(v175, v69), (float32x2_t)vdup_lane_s32((int32x2_t)v69, 1), v175, 1).f32[0] >= 0.5)
                v74 = 3;
              else
                v74 = 2;
            }
            else if (v100 <= 0.0)
            {
              if (v99 >= 0.17365)
                v74 = 4;
              else
                v74 = 6;
            }
            else if (v99 <= -0.17365)
            {
              v74 = 5;
            }
            else
            {
              v74 = 4;
            }
          }
          else
          {
            if (v100 >= 0.0)
              return;
            if (v99 >= 0.5)
              v74 = 1;
            else
              v74 = 2;
          }
          goto LABEL_36;
        }
      }
      else if (v101 >= 0.00001)
      {
        v103 = (float32x2_t *)((char *)&v194 + 4);
        v104 = v197.f32[1];
        v105 = (float)((float)((float)((float)(v67.f32[1] * v65.f32[0]) - (float)(v67.f32[0] * v65.f32[1]))
                             - (float)(v67.f32[1] * v64.f32[0]))
                     - (float)(v67.f32[0] * v197.f32[1]))
             / v100;
        *((float *)&v206 + 1) = v105;
        v106 = fabsf(v69.f32[0]);
        v107 = fabsf(v69.f32[1]);
        if (v106 <= v107)
        {
          v97 = v65.f32[1];
        }
        else
        {
          v104 = v64.f32[0];
          v103 = &v194;
          v97 = v65.f32[0];
        }
        if (v106 <= v107)
          v108 = v69.f32[1];
        else
          v108 = v69.f32[0];
        v109 = (float *)&v206;
        goto LABEL_109;
      }
    }
    sub_2239AAAF0(&v205);
    if (**(int **)(v205 + 56) > 4)
      return;
    v115 = *(unsigned __int8 *)(v205 + 72);
    v116 = sub_22322F254(v205, "OSLogSurrogateAppender", 1, 0);
    v117 = v116;
    if (!v115 && !v116)
      return;
    v198[0] = (float32x2_t)&v205;
    v198[1] = (float32x2_t)std::chrono::steady_clock::now().__d_.__rep_;
    v198[2] = (float32x2_t)std::chrono::system_clock::now().__d_.__rep_;
    v199 = 4;
    v200 = "unknown file";
    v201 = 632;
    v203 = 0;
    v204 = 0;
    v202 = "unknown function";
    v118 = **(_QWORD **)v198;
    v119 = **(_QWORD **)v198 + 16;
    if (*(char *)(**(_QWORD **)v198 + 39) < 0)
    {
      v121 = *(const char **)(v118 + 16);
      v120 = *(_QWORD *)(v118 + 24);
    }
    else
    {
      v120 = *(unsigned __int8 *)(**(_QWORD **)v198 + 39);
      v121 = (const char *)(v118 + 16);
    }
    v125 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v125 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v188 && SHIBYTE(v187[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v126 = (const char *)&xmmword_255788F40;
    else
      v126 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v127 = byte_255788F57;
    else
      v127 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v126, v121);
    v128 = v187;
    if (v127 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v127 >= 0x17)
    {
      v129 = v117;
      v130 = v121;
      v131 = v118;
      v132 = v115;
      v133 = v119;
      v134 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v127 | 7) != 0x17)
        v134 = v127 | 7;
      v135 = v134 + 1;
      v128 = operator new(v134 + 1);
      v187[1] = (void *)v127;
      *(_QWORD *)&v188 = v135 | 0x8000000000000000;
      v187[0] = v128;
      v119 = v133;
      v115 = v132;
      v118 = v131;
      v121 = v130;
      v117 = v129;
    }
    else
    {
      BYTE7(v188) = v127;
      if (!v127)
      {
LABEL_137:
        *((_BYTE *)v128 + v127) = 0;
        BYTE8(v188) = 1;
        v136 = v189;
        if (v120 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v120 >= 0x17)
        {
          v137 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v120 | 7) != 0x17)
            v137 = v120 | 7;
          v138 = v137 + 1;
          v136 = operator new(v137 + 1);
          v189[1] = (void *)v120;
          __p = (void *)(v138 | 0x8000000000000000);
          v189[0] = v136;
        }
        else
        {
          HIBYTE(__p) = v120;
          if (!v120)
            goto LABEL_145;
        }
        memmove(v136, v121, v120);
LABEL_145:
        *((_BYTE *)v136 + v120) = 0;
        LOBYTE(v191) = 1;
        v139 = object;
        if (SHIBYTE(__p) < 0)
          operator delete(v189[0]);
        if (BYTE8(v188) && SBYTE7(v188) < 0)
          operator delete(v187[0]);
        if (object)
          os_release(object);
        if (v117 && *(_QWORD *)(v117 + 24))
        {
          v140 = _os_log_pack_size();
          v141 = (std::__shared_weak_count_vtbl *)operator new(v140, (std::align_val_t)8uLL);
          v142 = (std::__shared_weak_count *)operator new();
          v143 = v142;
          v142->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v142->__shared_owners_;
          v142->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v142->__shared_weak_owners_ = 0;
          v142[1].__vftable = v141;
          object = v141;
          v187[0] = v141;
          v187[1] = v142;
          do
            v145 = __ldxr(p_shared_owners);
          while (__stxr(v145 + 1, p_shared_owners));
          v188 = 0uLL;
          v189[0] = 0;
          do
            v146 = __ldaxr(p_shared_owners);
          while (__stlxr(v146 - 1, p_shared_owners));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v143);
          }
          v147 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v148 = operator new();
          v149 = *(unsigned __int8 *)(v118 + 39);
          if ((v149 & 0x80u) == 0)
            v150 = v119;
          else
            v150 = *(_QWORD *)(v118 + 16);
          if ((v149 & 0x80u) != 0)
            v149 = *(_QWORD *)(v118 + 24);
          *(_QWORD *)v148 = v147;
          *(_OWORD *)(v148 + 8) = *(_OWORD *)v187;
          v187[0] = 0;
          v187[1] = 0;
          *(_OWORD *)(v148 + 24) = v188;
          v188 = 0uLL;
          *(_QWORD *)(v148 + 40) = v150;
          *(_QWORD *)(v148 + 48) = v149;
          *(_BYTE *)(v148 + 56) = 16;
          v207 = 0;
          v208[0] = (float32x2_t)v148;
          (*(void (**)(_QWORD, float32x2_t *))(**(_QWORD **)(v117 + 24) + 40))(*(_QWORD *)(v117 + 24), v208);
          v151 = v208[0];
          v208[0] = 0;
          if (v151)
          {
            v152 = *(std::__shared_weak_count **)(*(_QWORD *)&v151 + 32);
            if (v152)
            {
              v153 = (unint64_t *)&v152->__shared_owners_;
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
            }
            v155 = *(std::__shared_weak_count **)(*(_QWORD *)&v151 + 16);
            if (v155)
            {
              v156 = (unint64_t *)&v155->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
            MEMORY[0x227684CE8](*(_QWORD *)&v151, 0x10F0C40B62ED6C6);
            v158 = v207;
            v207 = 0;
            if (v158)
            {
              v159 = *(std::__shared_weak_count **)(v158 + 32);
              if (v159)
              {
                v160 = (unint64_t *)&v159->__shared_owners_;
                do
                  v161 = __ldaxr(v160);
                while (__stlxr(v161 - 1, v160));
                if (!v161)
                {
                  ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                  std::__shared_weak_count::__release_weak(v159);
                }
              }
              v162 = *(std::__shared_weak_count **)(v158 + 16);
              if (v162)
              {
                v163 = (unint64_t *)&v162->__shared_owners_;
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 - 1, v163));
                if (!v164)
                {
                  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                  std::__shared_weak_count::__release_weak(v162);
                }
              }
              MEMORY[0x227684CE8](v158, 0x10F0C40B62ED6C6);
            }
          }
          v165 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
          if (*((_QWORD *)&v188 + 1))
          {
            v166 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          v168 = (std::__shared_weak_count *)v187[1];
          if (v187[1])
          {
            v169 = (unint64_t *)((char *)v187[1] + 8);
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
        }
        else
        {
          os_log_type_enabled(v139, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v171 = (void *)_os_log_send_and_compose_impl();
          if (v171)
            free(v171);
        }
        if (v115)
        {
          sub_22322C138((uint64_t)v198, "Boundary expansion lines are parallel");
          sub_223182C08((uint64_t)v198);
        }
        sub_223182C08((uint64_t)v198);
        v172 = v204;
        if (v204)
        {
          v173 = (unint64_t *)&v204->__shared_owners_;
          do
            v174 = __ldaxr(v173);
          while (__stlxr(v174 - 1, v173));
          if (!v174)
          {
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
          }
        }
        return;
      }
    }
    memmove(v128, v126, v127);
    goto LABEL_137;
  }
  if (v99 >= 0.0)
  {
    if ((float)((float)((float)(v64.f32[0] - v63.f32[0]) * (float)(v63.f32[1] - v65.f32[1]))
               - (float)((float)(v63.f32[0] - v65.f32[0]) * (float)(v64.f32[1] - v63.f32[1]))) >= 0.0)
      return;
    v74 = 1;
    goto LABEL_36;
  }
  v110 = fabsf(v67.f32[0]);
  v111 = fabsf(v67.f32[1]);
  v112 = v110 <= v111;
  if (v110 > v111)
    v113 = v67.f32[0];
  else
    v113 = v67.f32[1];
  v185 = v65;
  v114 = *(float *)((unint64_t)&v185 & 0xFFFFFFFFFFFFFFFBLL | (4 * v112));
  v184 = v64;
  if ((float)((float)(v114 - *(float *)((unint64_t)&v184 | (4 * v112))) / v113) < 0.0)
  {
LABEL_35:
    v74 = 5;
LABEL_36:
    v75 = v69.f32[0];
    goto LABEL_37;
  }
  v194.i32[0] = v67.i32[1];
  v194.f32[1] = -v67.f32[0];
  v75 = -v69.f32[1];
  v193.f32[0] = -v69.f32[1];
  v193.i32[1] = v69.i32[0];
  v74 = 3;
  v73 = v69.i32[0];
  v67.i32[0] = v67.i32[1];
  v72 = v194.f32[1];
LABEL_37:
  LODWORD(v207) = v24;
  LODWORD(v205) = v183;
  v198[0].f32[0] = -v72;
  v198[0].i32[1] = v67.i32[0];
  v208[0].i32[0] = v73;
  v208[0].f32[1] = -v75;
  if (v74 <= 3)
  {
    v76 = vadd_f32(v194, v193);
    v77 = vmul_n_f32(v76, 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v76, v76), (float32x2_t)vdup_lane_s32((int32x2_t)v76, 1), v76, 1).f32[0]));
    v198[0].f32[0] = -v77.f32[1];
    v208[0].i32[0] = v77.i32[1];
    v198[0].i32[1] = v77.i32[0];
    v208[0].f32[1] = -v77.f32[0];
  }
  v78 = sub_2239ADF08(v53, (uint64_t)*v25, &v197, (float *)&v194, 0, v24, v183, &v207);
  if (v78 >= -0.001 || v78 == 3.4028e38)
    v80 = v207;
  else
    v80 = v24;
  v81 = sub_2239ADF08(v53, (uint64_t)*v25, v196, (float *)&v193, 1, v24, v183, &v205);
  if (v81 >= -0.001 || v81 == 3.4028e38)
    v83 = v205;
  else
    v83 = v183;
  if ((_DWORD)v80 != v83)
  {
    v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)*v25 + 2) - *((_QWORD *)*v25 + 1)) >> 2);
    v85 = ((v84 + v83 - 1) % v84) % v84;
    v86 = *v53[1];
    v87 = **v25;
    v88 = 1;
    for (i = v80; ; i = (v90 + 1))
    {
      v90 = i % v84;
      v91 = *(_DWORD *)(*((_QWORD *)*v25 + 4) + 4 * v90);
      v92 = *(_DWORD *)(v86 + 96 * v91 + 84);
      v93 = v92 == -1 || v92 == v87;
      if (v93 && ((v94 = *(_DWORD *)(v86 + 96 * v91 + 88), v94 != v87) ? (v95 = v94 == -1) : (v95 = 1), v95))
      {
        if ((_DWORD)v90 == v85)
        {
          if (v88)
          {
            sub_2239ABE88((uint64_t)&object, v53, *v25, v74, v80, v83, &v194, &v193, v198, v208);
            if (v192 == 3.4028e38 || v192 >= 0.0)
              sub_2239AF1C4((char **)v25[2], (uint64_t *)&object);
            if (__p)
            {
              v191 = __p;
              operator delete(__p);
            }
          }
          return;
        }
      }
      else
      {
        if ((_DWORD)v90 == v85)
          return;
        v88 = 0;
      }
    }
  }
}

void sub_2239ABD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  uint64_t v41;

  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC(v41 - 208);
  _Unwind_Resume(a1);
}

void sub_2239ABE88(uint64_t a1, _QWORD **a2, _QWORD *a3, int a4, unsigned int a5, unsigned int a6, float32x2_t *a7, float32x2_t *a8, float32x2_t *a9, float32x2_t *a10)
{
  float32x2_t v10;
  unsigned int v11;
  float32x2_t **v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  float32x2_t *v26;
  float v27;
  float v28;
  float32x2_t v29;
  float v30;
  float32x2_t *v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float v35;
  float v36;
  float v38;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  unint64_t v43;
  float32x2_t *v44;
  unsigned int v45;
  float32x2_t *v46;
  float32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  float32x2_t *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x2_t *v61;
  _OWORD *v62;
  float32x2_t *v63;
  uint64_t v64;
  __int128 v65;
  float32x2_t v66;
  unint64_t v67;
  float32x2_t *v68;
  unint64_t v69;
  float32x2_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  float32x2_t *v77;
  char *v78;
  char *v79;
  unint64_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t *v83;
  unint64_t v84;
  float32x2_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  float32x2_t *v92;
  char *v93;
  unint64_t v94;
  float32x2_t *v95;
  float32x2_t v96;
  float32x2_t *v97;
  unsigned int v98;
  int v99;
  float32x2_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  float32x2_t *v107;
  char *v108;
  unint64_t v109;
  float32x2_t *v110;
  float32x2_t v111;
  unint64_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float v117;
  float v118;
  float32x2_t *v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float32x2_t *v129;
  float32x2_t *v130;
  float v131;
  float *v132;
  float *v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float32x2_t *v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  unint64_t v145;
  float32x2_t *v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD *v154;
  float32x2_t *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  float32x2_t *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD *v166;
  float32x2_t *v167;
  uint64_t v168;
  __int128 v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float *v179;
  float32x2_t *v180;
  float32x2_t *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  _BYTE *v187;
  float32x2_t *v188;
  char *v189;
  char *v190;
  unint64_t v191;
  float32x2_t *v192;
  float32x2_t v193;
  float v194;
  float v195;
  float32x2_t v196;
  float v198;
  float v200;
  float v201;
  float32x2_t v202;
  float32x2_t v203;
  float32x2_t v204;
  float32x2_t v205;
  unint64_t v206;
  float32x2_t *v207;
  float32x2_t *v208;
  float32x2_t *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  _BYTE *v215;
  float32x2_t *v216;
  char *v217;
  char *v218;
  float v219;
  float v220;
  float v221;
  float v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  float32x2_t *v226;
  _OWORD *v227;
  float32x2_t *v228;
  uint64_t v229;
  __int128 v230;
  float32x2_t v231;
  unint64_t v232;
  float32x2_t *v233;
  float32x2_t *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  _BYTE *v240;
  float32x2_t *v241;
  char *v242;
  unint64_t v243;
  float32x2_t *v244;
  uint64_t v245;
  uint64_t v246;
  _OWORD *v247;
  float32x2_t *v248;
  uint64_t v249;
  __int128 v250;
  float32x2_t v251;
  float v252;
  float32x2_t v253;
  float v254;
  float32x2_t v255;
  float32x2_t v256;
  unint64_t v257;
  float32x2_t *v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  _BYTE *v264;
  float32x2_t *v265;
  char *v266;
  char *v267;
  unint64_t v268;
  float32x2_t *v269;
  uint64_t v270;
  uint64_t v271;
  _OWORD *v272;
  float32x2_t *v273;
  uint64_t v274;
  __int128 v275;
  float32x2_t v276;
  float32x2_t *v277;
  uint64_t v278;
  uint64_t v279;
  _OWORD *v280;
  float32x2_t *v281;
  uint64_t v282;
  __int128 v283;
  float32x2_t v284;
  float32x2_t v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float32x2_t v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float32x2_t v307;
  float32x2_t v308;
  float v309;
  float v310;
  float v311;
  float32x2_t v312;
  BOOL v313;
  float v314;
  float v315;
  float32x2_t *v316;
  float32x2_t *v317;
  float32x2_t *v318;
  float v319;
  float v320;
  float v321;
  float32x2_t *v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float32x2_t v327;
  float32x2_t v328;
  unint64_t v329;
  float32x2_t *v330;
  float32x2_t *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  _BYTE *v337;
  float32x2_t *v338;
  char *v339;
  unint64_t v340;
  float32x2_t *v341;
  uint64_t v342;
  uint64_t v343;
  _OWORD *v344;
  float32x2_t *v345;
  uint64_t v346;
  __int128 v347;
  float32x2_t v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float32x2_t v353;
  unint64_t v354;
  float32x2_t *v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  _BYTE *v361;
  float32x2_t *v362;
  char *v363;
  unint64_t v364;
  float32x2_t *v365;
  uint64_t v366;
  uint64_t v367;
  _OWORD *v368;
  float32x2_t *v369;
  uint64_t v370;
  __int128 v371;
  float32x2_t v372;
  unint64_t v373;
  float32x2_t *v374;
  float32x2_t *v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  _BYTE *v381;
  float32x2_t *v382;
  char *v383;
  unint64_t v384;
  float32x2_t *v385;
  uint64_t v386;
  uint64_t v387;
  _OWORD *v388;
  float32x2_t *v389;
  uint64_t v390;
  __int128 v391;
  float32x2_t v392;
  unint64_t v393;
  float32x2_t *v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  _BYTE *v400;
  float32x2_t *v401;
  char *v402;
  unint64_t v403;
  float32x2_t *v404;
  uint64_t v405;
  uint64_t v406;
  _OWORD *v407;
  float32x2_t *v408;
  uint64_t v409;
  __int128 v410;
  float32x2_t v411;
  float32x2_t *v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  _BYTE *v418;
  float32x2_t *v419;
  char *v420;
  unint64_t v421;
  float32x2_t *v422;
  uint64_t v423;
  uint64_t v424;
  _OWORD *v425;
  float32x2_t *v426;
  uint64_t v427;
  __int128 v428;
  float32x2_t v429;
  unint64_t v430;
  float32x2_t *v431;
  float32x2_t *v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  _BYTE *v438;
  float32x2_t *v439;
  char *v440;
  unint64_t v441;
  float32x2_t *v442;
  uint64_t v443;
  uint64_t v444;
  _OWORD *v445;
  float32x2_t *v446;
  uint64_t v447;
  __int128 v448;
  float32x2_t v449;
  unint64_t v450;
  float32x2_t *v451;
  float32x2_t *v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  _BYTE *v458;
  float32x2_t *v459;
  char *v460;
  unint64_t v461;
  float32x2_t *v462;
  uint64_t v463;
  uint64_t v464;
  _OWORD *v465;
  float32x2_t *v466;
  uint64_t v467;
  __int128 v468;
  float32x2_t v469;
  unint64_t v470;
  uint64_t v471;
  float32x2_t *v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  _BYTE *v478;
  _QWORD *v479;
  char *v480;
  char *v481;
  unint64_t v482;
  float32x2_t *v483;
  uint64_t v484;
  uint64_t v485;
  _OWORD *v486;
  float32x2_t *v487;
  uint64_t v488;
  __int128 v489;
  float32x2_t v490;
  uint64_t v491;
  uint64_t v492;
  float v493;
  unsigned int v494;
  float v495;
  float v496;
  unsigned int v497;
  float *v498;
  float *v499;
  float *v500;
  float *v501;
  float v502;
  float v503;
  float v504;
  unsigned int v505;
  float v506;
  float v507;
  float32x2_t v508;
  float v509;
  float v510;
  float32x2_t v511;
  float32x2_t *v512;
  float32x2_t v514;
  float v515;
  float32x2_t **v516;
  float32x2_t v519;
  float v520;
  float v521;
  float v522;
  float32x2_t v523;
  float32x2_t v524;
  float32x2_t v525;
  float32x2_t v526;
  int v527;
  float32x2_t v528;
  float32x2_t v529;
  float32x2_t v530;
  float32x2_t v531;
  _DWORD v532[3];

  v11 = a6;
  *(_QWORD *)(a1 + 56) = 0;
  v16 = (float32x2_t **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)a1 = a4;
  *(int32x2_t *)(a1 + 80) = vdup_n_s32(0x7F7FFFFFu);
  *(_DWORD *)(a1 + 88) = 2139095039;
  *(_DWORD *)(a1 + 4) = a5;
  *(_DWORD *)(a1 + 8) = a6;
  v17 = a5;
  v18 = a3[1];
  v19 = 0xAAAAAAAAAAAAAAABLL * ((a3[2] - v18) >> 2);
  v516 = (float32x2_t **)(a1 + 56);
  if (v19 <= a5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v18 = a3[1];
    v19 = 0xAAAAAAAAAAAAAAABLL * ((a3[2] - v18) >> 2);
  }
  v20 = v18 + 12 * (v17 % v19);
  v21 = *(_DWORD *)(v20 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)v20;
  *(_DWORD *)(a1 + 20) = v21;
  if (v19 <= v11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/OccupancyMapper/include/Reconstruction/OccupancyMapper/SpatialBoundary.h", 334, (uint64_t)"index < nodes_.size()", 21, (uint64_t)"Node index out of bounds", 24, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v18 = a3[1];
    v19 = 0xAAAAAAAAAAAAAAABLL * ((a3[2] - v18) >> 2);
  }
  v22 = v18 + 12 * (v11 % v19);
  v23 = *(_DWORD *)(v22 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)v22;
  *(_DWORD *)(a1 + 32) = v23;
  *(float *)(a1 + 48) = sub_22399AE18(a3, *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8), *a2);
  v24 = sub_22393835C(*a2, (int *)(a1 + 12));
  if (!v24)
    sub_223198218("unordered_map::at: key not found");
  v25 = sub_22393835C(*a2, (int *)(a1 + 24));
  if (!v25)
    sub_223198218("unordered_map::at: key not found");
  v26 = (float32x2_t *)((char *)v24 + 44);
  v27 = a9->f32[0];
  v10.i32[0] = a9->i32[1];
  v28 = a10->f32[1];
  v29 = *a10;
  v508 = *a7;
  v511 = *a8;
  v532[0] = 0;
  v30 = sub_2239ADF08(a2, (uint64_t)a3, v26, (float *)a9, 0, a5, v11, v532);
  v31 = (float32x2_t *)((char *)v25 + 44);
  v505 = a5;
  v32 = sub_2239ADF08(a2, (uint64_t)a3, v31, (float *)a10, 1, a5, v11, v532);
  v33.f32[0] = -v27;
  v34.f32[0] = -v28;
  LODWORD(v35) = vmla_lane_f32(vmul_f32(v508, v10), v33, v508, 1).u32[0];
  LODWORD(v36) = vmla_lane_f32(vmul_f32(v511, v34), v29, v511, 1).u32[0];
  if (v30 < 0.0 || v30 == 3.4028e38)
    v38 = 0.0;
  else
    v38 = v30;
  if (v32 < 0.0 || v32 == 3.4028e38)
    v32 = 0.0;
  v40 = (float)(v32 / v36) + 0.01;
  v41 = *v26;
  v42 = vadd_f32(*v26, vmul_n_f32(*a7, (float)(v38 / v35) + 0.01));
  v512 = v31;
  v530 = vadd_f32(*v31, vmul_n_f32(*a8, v40));
  v531 = v42;
  v44 = *(float32x2_t **)(a1 + 64);
  v43 = *(_QWORD *)(a1 + 72);
  v45 = v11;
  if ((unint64_t)v44 < v43)
  {
    *v44 = v41;
    v46 = v44 + 1;
    goto LABEL_43;
  }
  v47 = *v16;
  v48 = (char *)v44 - (char *)*v16;
  v49 = v48 >> 3;
  v50 = (v48 >> 3) + 1;
  if (v50 >> 61)
    goto LABEL_550;
  v51 = v43 - (_QWORD)v47;
  if (v51 >> 2 > v50)
    v50 = v51 >> 2;
  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
    v52 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 >> 61)
      goto LABEL_551;
    v53 = operator new(8 * v52);
    v54 = (float32x2_t *)&v53[8 * v49];
    v55 = &v53[8 * v52];
    *v54 = *v26;
    v46 = v54 + 1;
    v56 = (char *)((char *)v44 - (char *)v47);
    if (v44 != v47)
    {
LABEL_31:
      v57 = (unint64_t)(v56 - 8);
      v16 = v516;
      if (v57 >= 0x58)
      {
        v58 = (char *)v44 - v53 - v48;
        v11 = v45;
        if (v58 >= 0x20)
        {
          v59 = (v57 >> 3) + 1;
          v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
          v61 = &v44[v60 / 0xFFFFFFFFFFFFFFF8];
          v54 = (float32x2_t *)((char *)v54 - v60);
          v62 = &v53[8 * v49 - 16];
          v63 = v44 - 2;
          v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v65 = *(_OWORD *)v63->f32;
            *(v62 - 1) = *(_OWORD *)v63[-2].f32;
            *v62 = v65;
            v62 -= 2;
            v63 -= 4;
            v64 -= 4;
          }
          while (v64);
          v44 = v61;
          if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_41:
            v44 = *v516;
            *(_QWORD *)(a1 + 56) = v54;
            *(_QWORD *)(a1 + 64) = v46;
            *(_QWORD *)(a1 + 72) = v55;
            if (!v44)
              goto LABEL_43;
            goto LABEL_42;
          }
        }
      }
      else
      {
        v11 = v45;
      }
      do
      {
        v66 = v44[-1];
        --v44;
        v54[-1] = v66;
        --v54;
      }
      while (v44 != v47);
      goto LABEL_41;
    }
  }
  else
  {
    v53 = 0;
    v54 = (float32x2_t *)(8 * v49);
    v55 = 0;
    *(float32x2_t *)(8 * v49) = v41;
    v46 = (float32x2_t *)(8 * v49 + 8);
    v56 = (char *)((char *)v44 - (char *)v47);
    if (v44 != v47)
      goto LABEL_31;
  }
  v16 = v516;
  v11 = v45;
  *(_QWORD *)(a1 + 56) = v54;
  *(_QWORD *)(a1 + 64) = v46;
  *(_QWORD *)(a1 + 72) = v55;
  if (v44)
LABEL_42:
    operator delete(v44);
LABEL_43:
  *(_QWORD *)(a1 + 64) = v46;
  v67 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v46 >= v67)
  {
    v70 = *v16;
    v71 = (char *)v46 - (char *)*v16;
    v72 = v71 >> 3;
    v73 = (v71 >> 3) + 1;
    if (v73 >> 61)
      sub_22316E078();
    v74 = v67 - (_QWORD)v70;
    if (v74 >> 2 > v73)
      v73 = v74 >> 2;
    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
      v75 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v75 = v73;
    if (v75)
    {
      if (v75 >> 61)
        sub_223174E94();
      v76 = operator new(8 * v75);
      v77 = (float32x2_t *)&v76[8 * v72];
      v78 = &v76[8 * v75];
      *v77 = 0;
      v68 = v77 + 1;
      v79 = (char *)((char *)v46 - (char *)v70);
      if (v46 != v70)
      {
LABEL_55:
        v80 = (unint64_t)(v79 - 8);
        if (v80 >= 0x58 && (unint64_t)((char *)v46 - v76 - v71) >= 0x20)
        {
          v152 = (v80 >> 3) + 1;
          v153 = 8 * (v152 & 0x3FFFFFFFFFFFFFFCLL);
          v81 = &v46[v153 / 0xFFFFFFFFFFFFFFF8];
          v77 = (float32x2_t *)((char *)v77 - v153);
          v154 = &v76[8 * v72 - 16];
          v155 = v46 - 2;
          v156 = v152 & 0x3FFFFFFFFFFFFFFCLL;
          v11 = v45;
          do
          {
            v157 = *(_OWORD *)v155->f32;
            *(v154 - 1) = *(_OWORD *)v155[-2].f32;
            *v154 = v157;
            v154 -= 2;
            v155 -= 4;
            v156 -= 4;
          }
          while (v156);
          if (v152 == (v152 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_59:
            v46 = *(float32x2_t **)(a1 + 56);
            *(_QWORD *)(a1 + 56) = v77;
            *(_QWORD *)(a1 + 64) = v68;
            *(_QWORD *)(a1 + 72) = v78;
            if (!v46)
            {
              *(_QWORD *)(a1 + 64) = v68;
              v69 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v68 >= v69)
                goto LABEL_66;
              goto LABEL_61;
            }
LABEL_65:
            operator delete(v46);
            *(_QWORD *)(a1 + 64) = v68;
            v69 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v68 >= v69)
              goto LABEL_66;
LABEL_61:
            *v68 = v531;
            v83 = v68 + 1;
            *(_QWORD *)(a1 + 64) = v68 + 1;
            v84 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)&v68[1] < v84)
              goto LABEL_83;
            goto LABEL_87;
          }
        }
        else
        {
          v81 = v46;
          v11 = v45;
        }
        do
        {
          v82 = v81[-1];
          --v81;
          v77[-1] = v82;
          --v77;
        }
        while (v81 != v70);
        goto LABEL_59;
      }
    }
    else
    {
      v76 = 0;
      v77 = (float32x2_t *)(8 * v72);
      v78 = 0;
      *(_QWORD *)(8 * v72) = 0;
      v68 = (float32x2_t *)(8 * v72 + 8);
      v79 = (char *)((char *)v46 - (char *)v70);
      if (v46 != v70)
        goto LABEL_55;
    }
    *(_QWORD *)(a1 + 56) = v77;
    *(_QWORD *)(a1 + 64) = v68;
    *(_QWORD *)(a1 + 72) = v78;
    v11 = v45;
    goto LABEL_65;
  }
  *v46 = 0;
  v68 = v46 + 1;
  *(_QWORD *)(a1 + 64) = v46 + 1;
  v69 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)&v46[1] < v69)
    goto LABEL_61;
LABEL_66:
  v85 = *v16;
  v86 = (char *)v68 - (char *)*v16;
  v87 = v86 >> 3;
  v88 = (v86 >> 3) + 1;
  if (v88 >> 61)
    goto LABEL_550;
  v89 = v69 - (_QWORD)v85;
  if (v89 >> 2 > v88)
    v88 = v89 >> 2;
  if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
    v90 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v90 = v88;
  if (v90)
  {
    if (v90 >> 61)
      goto LABEL_551;
    v91 = operator new(8 * v90);
    v16 = v516;
  }
  else
  {
    v91 = 0;
  }
  v92 = (float32x2_t *)&v91[8 * v87];
  v93 = &v91[8 * v90];
  *v92 = v531;
  v83 = v92 + 1;
  if (v68 == v85)
  {
    *(_QWORD *)(a1 + 56) = v92;
    *(_QWORD *)(a1 + 64) = v83;
    *(_QWORD *)(a1 + 72) = v93;
    v11 = v45;
    goto LABEL_86;
  }
  v94 = (char *)v68 - (char *)v85 - 8;
  if (v94 < 0x58 || (unint64_t)((char *)v68 - v91 - v86) < 0x20)
  {
    v95 = v68;
    v11 = v45;
    do
    {
LABEL_80:
      v96 = v95[-1];
      --v95;
      v92[-1] = v96;
      --v92;
    }
    while (v95 != v85);
    goto LABEL_81;
  }
  v158 = (v94 >> 3) + 1;
  v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
  v95 = &v68[v159 / 0xFFFFFFFFFFFFFFF8];
  v92 = (float32x2_t *)((char *)v92 - v159);
  v160 = &v91[8 * v87 - 16];
  v161 = v68 - 2;
  v162 = v158 & 0x3FFFFFFFFFFFFFFCLL;
  v11 = v45;
  do
  {
    v163 = *(_OWORD *)v161->f32;
    *(v160 - 1) = *(_OWORD *)v161[-2].f32;
    *v160 = v163;
    v160 -= 2;
    v161 -= 4;
    v162 -= 4;
  }
  while (v162);
  if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_80;
LABEL_81:
  v68 = *(float32x2_t **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v92;
  *(_QWORD *)(a1 + 64) = v83;
  *(_QWORD *)(a1 + 72) = v93;
  if (!v68)
  {
    *(_QWORD *)(a1 + 64) = v83;
    v84 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v83 < v84)
      goto LABEL_83;
LABEL_87:
    v100 = *v16;
    v101 = (char *)v83 - (char *)*v16;
    v102 = v101 >> 3;
    v103 = (v101 >> 3) + 1;
    if (v103 >> 61)
      goto LABEL_550;
    v104 = v84 - (_QWORD)v100;
    if (v104 >> 2 > v103)
      v103 = v104 >> 2;
    if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
      v105 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v105 = v103;
    if (v105)
    {
      if (v105 >> 61)
        goto LABEL_551;
      v106 = operator new(8 * v105);
      v16 = v516;
    }
    else
    {
      v106 = 0;
    }
    v107 = (float32x2_t *)&v106[8 * v102];
    v108 = &v106[8 * v105];
    *v107 = *a7;
    v97 = v107 + 1;
    if (v83 == v100)
    {
      *(_QWORD *)(a1 + 56) = v107;
      *(_QWORD *)(a1 + 64) = v97;
      *(_QWORD *)(a1 + 72) = v108;
      v11 = v45;
      v98 = v505;
      goto LABEL_107;
    }
    v109 = (char *)v83 - (char *)v100 - 8;
    if (v109 >= 0x58 && (unint64_t)((char *)v83 - v106 - v101) >= 0x20)
    {
      v164 = (v109 >> 3) + 1;
      v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
      v110 = &v83[v165 / 0xFFFFFFFFFFFFFFF8];
      v107 = (float32x2_t *)((char *)v107 - v165);
      v166 = &v106[8 * v102 - 16];
      v167 = v83 - 2;
      v168 = v164 & 0x3FFFFFFFFFFFFFFCLL;
      v11 = v45;
      do
      {
        v169 = *(_OWORD *)v167->f32;
        *(v166 - 1) = *(_OWORD *)v167[-2].f32;
        *v166 = v169;
        v166 -= 2;
        v167 -= 4;
        v168 -= 4;
      }
      while (v168);
      v98 = v505;
      if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_102:
        v83 = *(float32x2_t **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v107;
        *(_QWORD *)(a1 + 64) = v97;
        *(_QWORD *)(a1 + 72) = v108;
        if (!v83)
        {
          *(_QWORD *)(a1 + 64) = v97;
          v99 = a4;
          if (a4 != 3)
            goto LABEL_108;
          goto LABEL_104;
        }
LABEL_107:
        operator delete(v83);
        *(_QWORD *)(a1 + 64) = v97;
        v99 = a4;
        if (a4 != 3)
          goto LABEL_108;
LABEL_104:
        *(_DWORD *)(a1 + 88) = 0;
        v112 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v97 >= v112)
          goto LABEL_444;
LABEL_119:
        *v97 = v530;
        v120 = v97 + 1;
        goto LABEL_466;
      }
    }
    else
    {
      v110 = v83;
      v11 = v45;
      v98 = v505;
    }
    do
    {
      v111 = v110[-1];
      --v110;
      v107[-1] = v111;
      --v107;
    }
    while (v110 != v100);
    goto LABEL_102;
  }
LABEL_86:
  operator delete(v68);
  *(_QWORD *)(a1 + 64) = v83;
  v84 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v83 >= v84)
    goto LABEL_87;
LABEL_83:
  *v83 = *a7;
  v97 = v83 + 1;
  v98 = v505;
  *(_QWORD *)(a1 + 64) = v83 + 1;
  v99 = a4;
  if (a4 == 3)
    goto LABEL_104;
LABEL_108:
  if ((v99 - 1) > 1)
  {
    if (v99 == 4)
    {
      v121 = a9->f32[0] * a10->f32[1];
      v122 = a9->f32[1] * a10->f32[0];
      v123 = v121 - v122;
      v124 = v122 - v121;
      v125 = vabds_f32(v121, v122);
      v126 = vabds_f32(v122, v121);
      if (v125 <= v126)
        v127 = a9->f32[1];
      else
        v127 = a10->f32[1];
      if (v125 <= v126)
        v128 = a9->f32[0];
      else
        v128 = a10->f32[0];
      v129 = &v530;
      if (v125 <= v126)
        v130 = &v530;
      else
        v130 = &v531;
      if (v125 <= v126)
        v131 = v124;
      else
        v131 = v123;
      v132 = (float *)a8;
      if (v125 <= v126)
        v133 = (float *)a7;
      else
        v133 = (float *)a8;
      if (v125 <= v126)
        v129 = &v531;
      else
        v132 = (float *)a7;
      v134 = v530.f32[1];
      if (v125 <= v126)
        v135 = v531.f32[1];
      else
        v135 = v530.f32[1];
      if (v125 > v126)
        v134 = v531.f32[1];
      v136 = (float)((float)(v128 * v134)
                   + (float)((float)((float)(v127 * v129->f32[0]) - (float)(v128 * v135)) - (float)(v127 * v130->f32[0])))
           / v131;
      v138 = *v133;
      v137 = v133[1];
      v140 = *v132;
      v139 = v132[1];
      if (v125 <= v126)
        v141 = a10;
      else
        v141 = a9;
      v142 = *v141;
      v143 = vadd_f32(*v130, vmul_n_f32(*v141, v136));
      v144 = *(float32x2_t *)v132;
      v145 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v97 < v145)
      {
        *v97 = v143;
        v146 = v97 + 1;
        goto LABEL_257;
      }
      v181 = *v16;
      v182 = (char *)v97 - (char *)*v16;
      v183 = v182 >> 3;
      v184 = (v182 >> 3) + 1;
      if (v184 >> 61)
        goto LABEL_562;
      v185 = v145 - (_QWORD)v181;
      if (v185 >> 2 > v184)
        v184 = v185 >> 2;
      if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8)
        v186 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v186 = v184;
      if (v186)
      {
        v514 = *(float32x2_t *)v132;
        v519 = v142;
        if (v186 >> 61)
          goto LABEL_563;
        v187 = operator new(8 * v186);
        v142 = v519;
        v144 = v514;
        v188 = (float32x2_t *)&v187[8 * v183];
        v189 = &v187[8 * v186];
        *v188 = v143;
        v146 = v188 + 1;
        v190 = (char *)((char *)v97 - (char *)v181);
        if (v97 != v181)
        {
LABEL_181:
          v191 = (unint64_t)(v190 - 8);
          if (v191 >= 0x58)
          {
            if ((unint64_t)((char *)v97 - v187 - v182) >= 0x20)
            {
              v245 = (v191 >> 3) + 1;
              v246 = 8 * (v245 & 0x3FFFFFFFFFFFFFFCLL);
              v192 = &v97[v246 / 0xFFFFFFFFFFFFFFF8];
              v188 = (float32x2_t *)((char *)v188 - v246);
              v247 = &v187[8 * v183 - 16];
              v248 = v97 - 2;
              v249 = v245 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v250 = *(_OWORD *)v248->f32;
                *(v247 - 1) = *(_OWORD *)v248[-2].f32;
                *v247 = v250;
                v247 -= 2;
                v248 -= 4;
                v249 -= 4;
              }
              while (v249);
              if (v245 == (v245 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_255:
                v97 = *(float32x2_t **)(a1 + 56);
                *(_QWORD *)(a1 + 56) = v188;
                *(_QWORD *)(a1 + 64) = v146;
                *(_QWORD *)(a1 + 72) = v189;
                if (!v97)
                  goto LABEL_257;
                goto LABEL_256;
              }
            }
            else
            {
              v192 = v97;
            }
          }
          else
          {
            v192 = v97;
          }
          do
          {
            v251 = v192[-1];
            --v192;
            v188[-1] = v251;
            --v188;
          }
          while (v192 != v181);
          goto LABEL_255;
        }
      }
      else
      {
        v187 = 0;
        v188 = (float32x2_t *)(8 * v183);
        v189 = 0;
        *(float32x2_t *)(8 * v183) = v143;
        v146 = (float32x2_t *)(8 * v183 + 8);
        v190 = (char *)((char *)v97 - (char *)v181);
        if (v97 != v181)
          goto LABEL_181;
      }
      *(_QWORD *)(a1 + 56) = v188;
      *(_QWORD *)(a1 + 64) = v146;
      *(_QWORD *)(a1 + 72) = v189;
LABEL_256:
      v252 = v140;
      v253 = v144;
      v520 = v127;
      v254 = v128;
      v255 = v142;
      operator delete(v97);
      v142 = v255;
      v128 = v254;
      v127 = v520;
      v144 = v253;
      v140 = v252;
LABEL_257:
      v256 = vadd_f32(v144, vmul_n_f32(v142, (float)((float)((float)((float)(v127 * v138) - (float)(v128 * v137)) - (float)(v127 * v140))+ (float)(v128 * v139))/ v131));
      *(_QWORD *)(a1 + 64) = v146;
      v257 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v146 < v257)
      {
        *v146 = v256;
        v97 = v146 + 1;
        goto LABEL_443;
      }
      v258 = *v16;
      v259 = (char *)v146 - (char *)*v16;
      v260 = v259 >> 3;
      v261 = (v259 >> 3) + 1;
      if (!(v261 >> 61))
      {
        v262 = v257 - (_QWORD)v258;
        if (v262 >> 2 > v261)
          v261 = v262 >> 2;
        if ((unint64_t)v262 >= 0x7FFFFFFFFFFFFFF8)
          v263 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v263 = v261;
        if (!v263)
        {
          v264 = 0;
          v265 = (float32x2_t *)(8 * v260);
          v266 = 0;
          *(float32x2_t *)(8 * v260) = v256;
          v97 = (float32x2_t *)(8 * v260 + 8);
          v267 = (char *)((char *)v146 - (char *)v258);
          if (v146 != v258)
          {
LABEL_268:
            v268 = (unint64_t)(v267 - 8);
            if (v268 >= 0x58)
            {
              if ((unint64_t)((char *)v146 - v264 - v259) >= 0x20)
              {
                v270 = (v268 >> 3) + 1;
                v271 = 8 * (v270 & 0x3FFFFFFFFFFFFFFCLL);
                v269 = &v146[v271 / 0xFFFFFFFFFFFFFFF8];
                v265 = (float32x2_t *)((char *)v265 - v271);
                v272 = &v264[8 * v260 - 16];
                v273 = v146 - 2;
                v274 = v270 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v275 = *(_OWORD *)v273->f32;
                  *(v272 - 1) = *(_OWORD *)v273[-2].f32;
                  *v272 = v275;
                  v272 -= 2;
                  v273 -= 4;
                  v274 -= 4;
                }
                while (v274);
                if (v270 == (v270 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_278:
                  v146 = *(float32x2_t **)(a1 + 56);
                  *(_QWORD *)(a1 + 56) = v265;
                  *(_QWORD *)(a1 + 64) = v97;
                  *(_QWORD *)(a1 + 72) = v266;
                  if (!v146)
                    goto LABEL_443;
                  goto LABEL_279;
                }
              }
              else
              {
                v269 = v146;
              }
            }
            else
            {
              v269 = v146;
            }
            do
            {
              v276 = v269[-1];
              --v269;
              v265[-1] = v276;
              --v265;
            }
            while (v269 != v258);
            goto LABEL_278;
          }
LABEL_271:
          *(_QWORD *)(a1 + 56) = v265;
          *(_QWORD *)(a1 + 64) = v97;
          *(_QWORD *)(a1 + 72) = v266;
LABEL_279:
          v277 = v146;
LABEL_442:
          operator delete(v277);
LABEL_443:
          *(_QWORD *)(a1 + 64) = v97;
          v112 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v97 >= v112)
            goto LABEL_444;
          goto LABEL_119;
        }
        if (!(v263 >> 61))
        {
          v264 = operator new(8 * v263);
          v265 = (float32x2_t *)&v264[8 * v260];
          v266 = &v264[8 * v263];
          *v265 = v256;
          v97 = v265 + 1;
          v267 = (char *)((char *)v146 - (char *)v258);
          if (v146 != v258)
            goto LABEL_268;
          goto LABEL_271;
        }
LABEL_563:
        sub_223174E94();
      }
LABEL_562:
      sub_22316E078();
    }
    v147 = *a9;
    v148 = *a10;
    v149 = vadd_f32(*a9, *a10);
    v150 = vmul_n_f32(v149, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v149, v149), (float32x2_t)vdup_lane_s32((int32x2_t)v149, 1), v149, 1).f32[0]));
    v529.f32[0] = -v150.f32[1];
    v528.i32[0] = v150.i32[1];
    v529.i32[1] = v150.i32[0];
    v528.f32[1] = -v150.f32[0];
    if (v99 == 6)
    {
      v509 = 1.0;
      v151 = vneg_f32(*a7);
      v528 = vneg_f32(*a8);
      v529 = v151;
      v506 = 1.0;
    }
    else
    {
      v193 = (float32x2_t)vdup_lane_s32((int32x2_t)v150, 1);
      LODWORD(v506) = vmla_lane_f32(vmul_f32(v147, v150), v193, v147, 1).u32[0];
      LODWORD(v509) = vmla_lane_f32(vmul_f32(v148, v150), v193, v148, 1).u32[0];
    }
    v527 = 0;
    v194 = sub_2239ADF08(a2, (uint64_t)a3, &v531, (float *)&v529, 0, v98, v11, &v527);
    v195 = sub_2239ADF08(a2, (uint64_t)a3, &v530, (float *)&v528, 1, v98, v11, &v527);
    if (v194 < 0.0 || v194 == 3.4028e38)
      v198 = 0.0;
    else
      v198 = v194;
    if (v195 < 0.0 || v195 == 3.4028e38)
      v195 = 0.0;
    v200 = (float)(v198 / v506) + 0.01;
    v201 = (float)(v195 / v509) + 0.01;
    v202 = *a9;
    v507 = v200;
    v510 = v201;
    v203 = vadd_f32(v531, vmul_n_f32(*a9, v200));
    v204 = *a10;
    v525 = vadd_f32(v530, vmul_n_f32(*a10, v201));
    v526 = v203;
    v205 = vadd_f32(v202, *a7);
    v523 = vadd_f32(v204, *a8);
    v524 = v205;
    v207 = *(float32x2_t **)(a1 + 64);
    v206 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v207 < v206)
    {
      *v207 = v203;
      v208 = v207 + 1;
      goto LABEL_231;
    }
    v209 = *v16;
    v210 = (char *)v207 - (char *)*v16;
    v211 = v210 >> 3;
    v212 = (v210 >> 3) + 1;
    if (v212 >> 61)
      goto LABEL_560;
    v213 = v206 - (_QWORD)v209;
    if (v213 >> 2 > v212)
      v212 = v213 >> 2;
    if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8)
      v214 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v214 = v212;
    if (v214)
    {
      if (v214 >> 61)
        goto LABEL_561;
      v215 = operator new(8 * v214);
      v216 = (float32x2_t *)&v215[8 * v211];
      v217 = &v215[8 * v214];
      *v216 = v203;
      v208 = v216 + 1;
      v218 = (char *)((char *)v207 - (char *)v209);
      if (v207 == v209)
        goto LABEL_229;
    }
    else
    {
      v215 = 0;
      v216 = (float32x2_t *)(8 * v211);
      v217 = 0;
      *(float32x2_t *)(8 * v211) = v203;
      v208 = (float32x2_t *)(8 * v211 + 8);
      v218 = (char *)((char *)v207 - (char *)v209);
      if (v207 == v209)
      {
LABEL_229:
        *(_QWORD *)(a1 + 56) = v216;
        *(_QWORD *)(a1 + 64) = v208;
        *(_QWORD *)(a1 + 72) = v217;
        if (v207)
          operator delete(v207);
LABEL_231:
        *(_QWORD *)(a1 + 64) = v208;
        v232 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v208 < v232)
        {
          *v208 = v524;
          v233 = v208 + 1;
          goto LABEL_286;
        }
        v234 = *v16;
        v235 = (char *)v208 - (char *)*v16;
        v236 = v235 >> 3;
        v237 = (v235 >> 3) + 1;
        if (v237 >> 61)
          goto LABEL_560;
        v238 = v232 - (_QWORD)v234;
        if (v238 >> 2 > v237)
          v237 = v238 >> 2;
        if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8)
          v239 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v239 = v237;
        if (v239)
        {
          if (v239 >> 61)
            goto LABEL_561;
          v240 = operator new(8 * v239);
        }
        else
        {
          v240 = 0;
        }
        v241 = (float32x2_t *)&v240[8 * v236];
        v242 = &v240[8 * v239];
        *v241 = v524;
        v233 = v241 + 1;
        if (v208 == v234)
        {
          *(_QWORD *)(a1 + 56) = v241;
          *(_QWORD *)(a1 + 64) = v233;
          *(_QWORD *)(a1 + 72) = v242;
LABEL_285:
          operator delete(v208);
LABEL_286:
          *(_QWORD *)(a1 + 64) = v233;
          if (a4 == 5)
          {
            *(int32x2_t *)(a1 + 84) = vdup_n_s32(0x7F7FFFFFu);
            v285 = vsub_f32(*a8, *a7);
            v286 = a9->f32[1];
            v287 = a10->f32[1];
            v288 = (float)(a9->f32[0] * v287) - (float)(v286 * a10->f32[0]);
            v289 = (float)(v287 * v285.f32[0]) - vmuls_lane_f32(a10->f32[0], v285, 1);
            v290 = (float)(v286 * v285.f32[0]) - vmuls_lane_f32(a9->f32[0], v285, 1);
            v291 = vabds_f32(v288, v289);
            v292 = fabsf(v289);
            v293 = fabsf(v290);
            if (vabds_f32(v288, v290) >= 0.00001 && v291 >= 0.00001 && v292 >= 0.00001 && v293 >= 0.00001)
            {
              v297 = vsub_f32(v530, v531);
              v298 = (float)(v287 * v297.f32[0]) - vmuls_lane_f32(a10->f32[0], v297, 1);
              v299 = (float)(v286 * v297.f32[0]) - vmuls_lane_f32(a9->f32[0], v297, 1);
              v300 = (float)(v298 - (float)(v507 * v288)) / (float)(v288 - v289);
              v301 = (float)-v298 / v289;
              v302 = (float)(v299 - (float)(v510 * v288)) / (float)(v288 - v290);
              v303 = (float)-v299 / v290;
              if (v301 >= v300)
                v304 = v300;
              else
                v304 = v301;
              if (v300 >= v301)
                v301 = v300;
              if (v303 >= v302)
                v305 = v302;
              else
                v305 = v303;
              if (v302 >= v303)
                v303 = v302;
              if (v304 >= v305)
                v306 = v304;
              else
                v306 = v305;
              if (v303 >= v301)
                v303 = v301;
              if (v306 < v303)
              {
                if (v303 > 0.0)
                  *(float *)(a1 + 84) = v303;
                if (v306 > 0.0)
                  *(float *)(a1 + 88) = v306;
              }
            }
LABEL_394:
            v373 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v233 < v373)
            {
              *v233 = v525;
              v374 = v233 + 1;
              goto LABEL_418;
            }
            v375 = *v16;
            v376 = (char *)v233 - (char *)*v16;
            v377 = v376 >> 3;
            v378 = (v376 >> 3) + 1;
            if (v378 >> 61)
              goto LABEL_560;
            v379 = v373 - (_QWORD)v375;
            if (v379 >> 2 > v378)
              v378 = v379 >> 2;
            if ((unint64_t)v379 >= 0x7FFFFFFFFFFFFFF8)
              v380 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v380 = v378;
            if (v380)
            {
              if (v380 >> 61)
                goto LABEL_561;
              v381 = operator new(8 * v380);
            }
            else
            {
              v381 = 0;
            }
            v382 = (float32x2_t *)&v381[8 * v377];
            v383 = &v381[8 * v380];
            *v382 = v525;
            v374 = v382 + 1;
            if (v233 == v375)
            {
              *(_QWORD *)(a1 + 56) = v382;
              *(_QWORD *)(a1 + 64) = v374;
              *(_QWORD *)(a1 + 72) = v383;
LABEL_417:
              operator delete(v233);
LABEL_418:
              *(_QWORD *)(a1 + 64) = v374;
              v393 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v374 < v393)
              {
                *v374 = v523;
                v97 = v374 + 1;
                goto LABEL_443;
              }
              v394 = *v16;
              v395 = (char *)v374 - (char *)*v16;
              v396 = v395 >> 3;
              v397 = (v395 >> 3) + 1;
              if (!(v397 >> 61))
              {
                v398 = v393 - (_QWORD)v394;
                if (v398 >> 2 > v397)
                  v397 = v398 >> 2;
                if ((unint64_t)v398 >= 0x7FFFFFFFFFFFFFF8)
                  v399 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v399 = v397;
                if (!v399)
                {
                  v400 = 0;
LABEL_430:
                  v401 = (float32x2_t *)&v400[8 * v396];
                  v402 = &v400[8 * v399];
                  *v401 = v523;
                  v97 = v401 + 1;
                  if (v374 == v394)
                  {
                    *(_QWORD *)(a1 + 56) = v401;
                    *(_QWORD *)(a1 + 64) = v97;
                    *(_QWORD *)(a1 + 72) = v402;
LABEL_441:
                    v277 = v374;
                    goto LABEL_442;
                  }
                  v403 = (char *)v374 - (char *)v394 - 8;
                  if (v403 >= 0x58)
                  {
                    if ((unint64_t)((char *)v374 - v400 - v395) >= 0x20)
                    {
                      v405 = (v403 >> 3) + 1;
                      v406 = 8 * (v405 & 0x3FFFFFFFFFFFFFFCLL);
                      v404 = &v374[v406 / 0xFFFFFFFFFFFFFFF8];
                      v401 = (float32x2_t *)((char *)v401 - v406);
                      v407 = &v400[8 * v396 - 16];
                      v408 = v374 - 2;
                      v409 = v405 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v410 = *(_OWORD *)v408->f32;
                        *(v407 - 1) = *(_OWORD *)v408[-2].f32;
                        *v407 = v410;
                        v407 -= 2;
                        v408 -= 4;
                        v409 -= 4;
                      }
                      while (v409);
                      if (v405 == (v405 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_440:
                        v374 = *(float32x2_t **)(a1 + 56);
                        *(_QWORD *)(a1 + 56) = v401;
                        *(_QWORD *)(a1 + 64) = v97;
                        *(_QWORD *)(a1 + 72) = v402;
                        if (!v374)
                          goto LABEL_443;
                        goto LABEL_441;
                      }
                    }
                    else
                    {
                      v404 = v374;
                    }
                  }
                  else
                  {
                    v404 = v374;
                  }
                  do
                  {
                    v411 = v404[-1];
                    --v404;
                    v401[-1] = v411;
                    --v401;
                  }
                  while (v404 != v394);
                  goto LABEL_440;
                }
                if (!(v399 >> 61))
                {
                  v400 = operator new(8 * v399);
                  goto LABEL_430;
                }
LABEL_561:
                sub_223174E94();
              }
LABEL_560:
              sub_22316E078();
            }
            v384 = (char *)v233 - (char *)v375 - 8;
            if (v384 >= 0x58)
            {
              if ((unint64_t)((char *)v233 - v381 - v376) >= 0x20)
              {
                v386 = (v384 >> 3) + 1;
                v387 = 8 * (v386 & 0x3FFFFFFFFFFFFFFCLL);
                v385 = &v233[v387 / 0xFFFFFFFFFFFFFFF8];
                v382 = (float32x2_t *)((char *)v382 - v387);
                v388 = &v381[8 * v377 - 16];
                v389 = v233 - 2;
                v390 = v386 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v391 = *(_OWORD *)v389->f32;
                  *(v388 - 1) = *(_OWORD *)v389[-2].f32;
                  *v388 = v391;
                  v388 -= 2;
                  v389 -= 4;
                  v390 -= 4;
                }
                while (v390);
                if (v386 == (v386 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_416:
                  v233 = *(float32x2_t **)(a1 + 56);
                  *(_QWORD *)(a1 + 56) = v382;
                  *(_QWORD *)(a1 + 64) = v374;
                  *(_QWORD *)(a1 + 72) = v383;
                  if (!v233)
                    goto LABEL_418;
                  goto LABEL_417;
                }
              }
              else
              {
                v385 = v233;
              }
            }
            else
            {
              v385 = v233;
            }
            do
            {
              v392 = v385[-1];
              --v385;
              v382[-1] = v392;
              --v382;
            }
            while (v385 != v375);
            goto LABEL_416;
          }
          v307 = vneg_f32(*a7);
          v308 = vneg_f32(*a8);
          v205.f32[0] = vmuls_lane_f32(v307.f32[0], v308, 1);
          v309 = vmuls_lane_f32(v308.f32[0], v307, 1);
          v310 = v205.f32[0] - v309;
          v311 = v309 - v205.f32[0];
          v196.f32[0] = vabds_f32(v205.f32[0], v309);
          v205.f32[0] = vabds_f32(v309, v205.f32[0]);
          v312 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v196, v205), 0), (int8x8_t)v307, (int8x8_t)v308);
          v313 = v196.f32[0] <= v205.f32[0];
          if (v196.f32[0] <= v205.f32[0])
            v314 = v307.f32[1];
          else
            v314 = v308.f32[1];
          if (v196.f32[0] <= v205.f32[0])
            v315 = v307.f32[0];
          else
            v315 = v308.f32[0];
          v316 = &v525;
          if (v196.f32[0] <= v205.f32[0])
            v317 = &v525;
          else
            v317 = &v526;
          if (v196.f32[0] <= v205.f32[0])
          {
            v318 = &v523;
          }
          else
          {
            v311 = v310;
            v318 = &v524;
          }
          if (v196.f32[0] <= v205.f32[0])
            v316 = &v526;
          v319 = v525.f32[1];
          if (v196.f32[0] <= v205.f32[0])
            v320 = v526.f32[1];
          else
            v320 = v525.f32[1];
          if (!v313)
            v319 = v526.f32[1];
          v321 = (float)((float)(v315 * v319)
                       + (float)((float)((float)(v314 * v316->f32[0]) - (float)(v315 * v320))
                               - (float)(v317->f32[0] * v314)))
               / v311;
          if (v313)
            v322 = &v524;
          else
            v322 = &v523;
          v323 = v322->f32[0];
          if (v313)
            v324 = v524.f32[1];
          else
            v324 = v523.f32[1];
          v325 = v318->f32[0];
          if (v313)
            v326 = v523.f32[1];
          else
            v326 = v524.f32[1];
          v327 = vadd_f32(*v317, vmul_n_f32(v312, v321));
          v328 = *v318;
          v329 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v233 < v329)
          {
            *v233 = v327;
            v330 = v233 + 1;
            goto LABEL_369;
          }
          v331 = *v16;
          v332 = (char *)v233 - (char *)*v16;
          v333 = v332 >> 3;
          v334 = (v332 >> 3) + 1;
          if (v334 >> 61)
            goto LABEL_564;
          v335 = v329 - (_QWORD)v331;
          if (v335 >> 2 > v334)
            v334 = v335 >> 2;
          if ((unint64_t)v335 >= 0x7FFFFFFFFFFFFFF8)
            v336 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v336 = v334;
          if (v336)
          {
            v515 = v324;
            v521 = v311;
            if (v336 >> 61)
              goto LABEL_565;
            v337 = operator new(8 * v336);
            v311 = v521;
            v324 = v515;
          }
          else
          {
            v337 = 0;
          }
          v338 = (float32x2_t *)&v337[8 * v333];
          v339 = &v337[8 * v336];
          *v338 = v327;
          v330 = v338 + 1;
          if (v233 == v331)
          {
            *(_QWORD *)(a1 + 56) = v338;
            *(_QWORD *)(a1 + 64) = v330;
            *(_QWORD *)(a1 + 72) = v339;
LABEL_368:
            v349 = v323;
            v350 = v324;
            v522 = v314;
            v351 = v315;
            v352 = v311;
            operator delete(v233);
            v311 = v352;
            v315 = v351;
            v314 = v522;
            v324 = v350;
            v323 = v349;
LABEL_369:
            v353 = vadd_f32(v328, vmul_n_f32(v312, (float)((float)(v315 * v326)+ (float)((float)((float)(v314 * v323) - (float)(v315 * v324)) - (float)(v314 * v325)))/ v311));
            *(_QWORD *)(a1 + 64) = v330;
            v354 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v330 < v354)
            {
              *v330 = v353;
              v233 = v330 + 1;
LABEL_393:
              *(_QWORD *)(a1 + 64) = v233;
              goto LABEL_394;
            }
            v355 = *v16;
            v356 = (char *)v330 - (char *)*v16;
            v357 = v356 >> 3;
            v358 = (v356 >> 3) + 1;
            if (!(v358 >> 61))
            {
              v359 = v354 - (_QWORD)v355;
              if (v359 >> 2 > v358)
                v358 = v359 >> 2;
              if ((unint64_t)v359 >= 0x7FFFFFFFFFFFFFF8)
                v360 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v360 = v358;
              if (!v360)
              {
                v361 = 0;
LABEL_381:
                v362 = (float32x2_t *)&v361[8 * v357];
                v363 = &v361[8 * v360];
                *v362 = v353;
                v233 = v362 + 1;
                if (v330 == v355)
                {
                  *(_QWORD *)(a1 + 56) = v362;
                  *(_QWORD *)(a1 + 64) = v233;
                  *(_QWORD *)(a1 + 72) = v363;
                  goto LABEL_392;
                }
                v364 = (char *)v330 - (char *)v355 - 8;
                if (v364 >= 0x58)
                {
                  if ((unint64_t)((char *)v330 - v361 - v356) >= 0x20)
                  {
                    v366 = (v364 >> 3) + 1;
                    v367 = 8 * (v366 & 0x3FFFFFFFFFFFFFFCLL);
                    v365 = &v330[v367 / 0xFFFFFFFFFFFFFFF8];
                    v362 = (float32x2_t *)((char *)v362 - v367);
                    v368 = &v361[8 * v357 - 16];
                    v369 = v330 - 2;
                    v370 = v366 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v371 = *(_OWORD *)v369->f32;
                      *(v368 - 1) = *(_OWORD *)v369[-2].f32;
                      *v368 = v371;
                      v368 -= 2;
                      v369 -= 4;
                      v370 -= 4;
                    }
                    while (v370);
                    if (v366 == (v366 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_391:
                      v330 = *(float32x2_t **)(a1 + 56);
                      *(_QWORD *)(a1 + 56) = v362;
                      *(_QWORD *)(a1 + 64) = v233;
                      *(_QWORD *)(a1 + 72) = v363;
                      if (!v330)
                        goto LABEL_393;
LABEL_392:
                      operator delete(v330);
                      goto LABEL_393;
                    }
                  }
                  else
                  {
                    v365 = v330;
                  }
                }
                else
                {
                  v365 = v330;
                }
                do
                {
                  v372 = v365[-1];
                  --v365;
                  v362[-1] = v372;
                  --v362;
                }
                while (v365 != v355);
                goto LABEL_391;
              }
              if (!(v360 >> 61))
              {
                v361 = operator new(8 * v360);
                goto LABEL_381;
              }
LABEL_565:
              sub_223174E94();
            }
LABEL_564:
            sub_22316E078();
          }
          v340 = (char *)v233 - (char *)v331 - 8;
          if (v340 >= 0x58)
          {
            if ((unint64_t)((char *)v233 - v337 - v332) >= 0x20)
            {
              v342 = (v340 >> 3) + 1;
              v343 = 8 * (v342 & 0x3FFFFFFFFFFFFFFCLL);
              v341 = &v233[v343 / 0xFFFFFFFFFFFFFFF8];
              v338 = (float32x2_t *)((char *)v338 - v343);
              v344 = &v337[8 * v333 - 16];
              v345 = v233 - 2;
              v346 = v342 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v347 = *(_OWORD *)v345->f32;
                *(v344 - 1) = *(_OWORD *)v345[-2].f32;
                *v344 = v347;
                v344 -= 2;
                v345 -= 4;
                v346 -= 4;
              }
              while (v346);
              if (v342 == (v342 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_367:
                v233 = *(float32x2_t **)(a1 + 56);
                *(_QWORD *)(a1 + 56) = v338;
                *(_QWORD *)(a1 + 64) = v330;
                *(_QWORD *)(a1 + 72) = v339;
                if (!v233)
                  goto LABEL_369;
                goto LABEL_368;
              }
            }
            else
            {
              v341 = v233;
            }
          }
          else
          {
            v341 = v233;
          }
          do
          {
            v348 = v341[-1];
            --v341;
            v338[-1] = v348;
            --v338;
          }
          while (v341 != v331);
          goto LABEL_367;
        }
        v243 = (char *)v208 - (char *)v234 - 8;
        if (v243 >= 0x58)
        {
          if ((unint64_t)((char *)v208 - v240 - v235) >= 0x20)
          {
            v278 = (v243 >> 3) + 1;
            v279 = 8 * (v278 & 0x3FFFFFFFFFFFFFFCLL);
            v244 = &v208[v279 / 0xFFFFFFFFFFFFFFF8];
            v241 = (float32x2_t *)((char *)v241 - v279);
            v280 = &v240[8 * v236 - 16];
            v281 = v208 - 2;
            v282 = v278 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v283 = *(_OWORD *)v281->f32;
              *(v280 - 1) = *(_OWORD *)v281[-2].f32;
              *v280 = v283;
              v280 -= 2;
              v281 -= 4;
              v282 -= 4;
            }
            while (v282);
            if (v278 == (v278 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_284:
              v208 = *(float32x2_t **)(a1 + 56);
              *(_QWORD *)(a1 + 56) = v241;
              *(_QWORD *)(a1 + 64) = v233;
              *(_QWORD *)(a1 + 72) = v242;
              if (!v208)
                goto LABEL_286;
              goto LABEL_285;
            }
          }
          else
          {
            v244 = v208;
          }
        }
        else
        {
          v244 = v208;
        }
        do
        {
          v284 = v244[-1];
          --v244;
          v241[-1] = v284;
          --v241;
        }
        while (v244 != v234);
        goto LABEL_284;
      }
    }
    v223 = (unint64_t)(v218 - 8);
    if (v223 < 0x58)
      goto LABEL_568;
    if ((unint64_t)((char *)v207 - v215 - v210) < 0x20)
      goto LABEL_568;
    v224 = (v223 >> 3) + 1;
    v225 = 8 * (v224 & 0x3FFFFFFFFFFFFFFCLL);
    v226 = &v207[v225 / 0xFFFFFFFFFFFFFFF8];
    v216 = (float32x2_t *)((char *)v216 - v225);
    v227 = &v215[8 * v211 - 16];
    v228 = v207 - 2;
    v229 = v224 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v230 = *(_OWORD *)v228->f32;
      *(v227 - 1) = *(_OWORD *)v228[-2].f32;
      *v227 = v230;
      v227 -= 2;
      v228 -= 4;
      v229 -= 4;
    }
    while (v229);
    v207 = v226;
    if (v224 != (v224 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_568:
      do
      {
        v231 = v207[-1];
        --v207;
        v216[-1] = v231;
        --v216;
      }
      while (v207 != v209);
    }
    v207 = *v16;
    goto LABEL_229;
  }
  v113 = *a7;
  v114 = *a8;
  v115 = (float32x2_t)vdup_lane_s32((int32x2_t)*a8, 1);
  if (vmla_lane_f32(vmul_f32(*a7, *a8), v115, *a7, 1).f32[0] < 0.99999)
  {
    v116 = (float32x2_t)vdup_lane_s32((int32x2_t)v113, 1);
    v529.i32[0] = 0;
    v528.i32[0] = 0;
    v117 = vmla_f32(vmul_f32(v113, v113), v116, v116).f32[0];
    LODWORD(v118) = vmla_f32(vmul_f32(v114, v114), v115, v115).u32[0];
    if (v117 >= 0.00000001 && v118 >= 0.00000001)
    {
      v170 = v113.f32[0] * v114.f32[1];
      v171 = v113.f32[1] * v114.f32[0];
      v172 = vabds_f32(v113.f32[0] * v114.f32[1], v113.f32[1] * v114.f32[0]);
      v173 = vabds_f32(v113.f32[1] * v114.f32[0], v113.f32[0] * v114.f32[1]);
      if (v172 <= v173)
      {
        if (v173 < 0.00001)
          goto LABEL_115;
        v219 = v171 - v170;
        v174 = v531.f32[1];
        v178 = v530.f32[1];
        v175 = (float)((float)((float)((float)(v113.f32[1] * v531.f32[0]) - (float)(v113.f32[0] * v531.f32[1]))
                             + (float)(v113.f32[0] * v530.f32[1]))
                     - (float)(v113.f32[1] * v530.f32[0]))
             / v219;
        v528.f32[0] = v175;
        v220 = fabsf(v113.f32[0]);
        v221 = fabsf(v113.f32[1]);
        if (v220 > v221)
          v178 = v530.f32[0];
        v179 = (float *)a8 + (v220 <= v221);
        if (v220 <= v221)
          v113.f32[0] = v113.f32[1];
        else
          v174 = v531.f32[0];
        v180 = &v529;
      }
      else
      {
        if (v172 < 0.00001)
          goto LABEL_115;
        v174 = v530.f32[0];
        v175 = (float)((float)((float)((float)(v113.f32[1] * v530.f32[0]) - (float)(v113.f32[0] * v530.f32[1]))
                             - (float)(v113.f32[1] * v531.f32[0]))
                     - (float)(v113.f32[0] * v531.f32[1]))
             / (float)(v170 - v171);
        v529.f32[0] = v175;
        v176 = fabsf(v114.f32[0]);
        v177 = fabsf(v114.f32[1]);
        if (v176 > v177)
          v178 = v531.f32[0];
        else
          v178 = v531.f32[1];
        v179 = (float *)a7 + (v176 <= v177);
        if (v176 > v177)
        {
          v113.f32[0] = v114.f32[0];
        }
        else
        {
          v174 = v530.f32[1];
          v113.f32[0] = v114.f32[1];
        }
        v180 = &v528;
      }
      v180->f32[0] = (float)((float)(v178 + (float)(v175 * *v179)) - v174) / v113.f32[0];
      v222 = v529.f32[0];
      if (v529.f32[0] > 0.0 && v528.f32[0] > 0.0)
      {
        if (v528.f32[0] < v529.f32[0])
          v222 = v528.f32[0];
        *(float *)(a1 + 88) = v222;
      }
    }
  }
LABEL_115:
  if (v99 == 2 && *(float *)(a1 + 88) == 3.4028e38)
  {
    *(_BYTE *)a1 = 3;
    *(_DWORD *)(a1 + 88) = 0;
  }
  v112 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v97 < v112)
    goto LABEL_119;
LABEL_444:
  v412 = *v16;
  v413 = (char *)v97 - (char *)*v16;
  v414 = v413 >> 3;
  v415 = (v413 >> 3) + 1;
  if (v415 >> 61)
    goto LABEL_550;
  v416 = v112 - (_QWORD)v412;
  if (v416 >> 2 > v415)
    v415 = v416 >> 2;
  if ((unint64_t)v416 >= 0x7FFFFFFFFFFFFFF8)
    v417 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v417 = v415;
  if (v417)
  {
    if (v417 >> 61)
      goto LABEL_551;
    v418 = operator new(8 * v417);
    v16 = v516;
  }
  else
  {
    v418 = 0;
  }
  v419 = (float32x2_t *)&v418[8 * v414];
  v420 = &v418[8 * v417];
  *v419 = v530;
  v120 = v419 + 1;
  if (v97 != v412)
  {
    v421 = (char *)v97 - (char *)v412 - 8;
    if (v421 >= 0x58)
    {
      if ((unint64_t)((char *)v97 - v418 - v413) >= 0x20)
      {
        v423 = (v421 >> 3) + 1;
        v424 = 8 * (v423 & 0x3FFFFFFFFFFFFFFCLL);
        v422 = &v97[v424 / 0xFFFFFFFFFFFFFFF8];
        v419 = (float32x2_t *)((char *)v419 - v424);
        v425 = &v418[8 * v414 - 16];
        v426 = v97 - 2;
        v427 = v423 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v428 = *(_OWORD *)v426->f32;
          *(v425 - 1) = *(_OWORD *)v426[-2].f32;
          *v425 = v428;
          v425 -= 2;
          v426 -= 4;
          v427 -= 4;
        }
        while (v427);
        if (v423 == (v423 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_464:
          v97 = *(float32x2_t **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v419;
          *(_QWORD *)(a1 + 64) = v120;
          *(_QWORD *)(a1 + 72) = v420;
          if (!v97)
            goto LABEL_466;
          goto LABEL_465;
        }
      }
      else
      {
        v422 = v97;
      }
    }
    else
    {
      v422 = v97;
    }
    do
    {
      v429 = v422[-1];
      --v422;
      v419[-1] = v429;
      --v419;
    }
    while (v422 != v412);
    goto LABEL_464;
  }
  *(_QWORD *)(a1 + 56) = v419;
  *(_QWORD *)(a1 + 64) = v120;
  *(_QWORD *)(a1 + 72) = v420;
LABEL_465:
  operator delete(v97);
LABEL_466:
  *(_QWORD *)(a1 + 64) = v120;
  v430 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v120 < v430)
  {
    *v120 = *a8;
    v431 = v120 + 1;
    goto LABEL_490;
  }
  v432 = *v16;
  v433 = (char *)v120 - (char *)*v16;
  v434 = v433 >> 3;
  v435 = (v433 >> 3) + 1;
  if (v435 >> 61)
    goto LABEL_550;
  v436 = v430 - (_QWORD)v432;
  if (v436 >> 2 > v435)
    v435 = v436 >> 2;
  if ((unint64_t)v436 >= 0x7FFFFFFFFFFFFFF8)
    v437 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v437 = v435;
  if (v437)
  {
    if (v437 >> 61)
      goto LABEL_551;
    v438 = operator new(8 * v437);
    v16 = v516;
  }
  else
  {
    v438 = 0;
  }
  v439 = (float32x2_t *)&v438[8 * v434];
  v440 = &v438[8 * v437];
  *v439 = *a8;
  v431 = v439 + 1;
  if (v120 != v432)
  {
    v441 = (char *)v120 - (char *)v432 - 8;
    if (v441 >= 0x58)
    {
      if ((unint64_t)((char *)v120 - v438 - v433) >= 0x20)
      {
        v443 = (v441 >> 3) + 1;
        v444 = 8 * (v443 & 0x3FFFFFFFFFFFFFFCLL);
        v442 = &v120[v444 / 0xFFFFFFFFFFFFFFF8];
        v439 = (float32x2_t *)((char *)v439 - v444);
        v445 = &v438[8 * v434 - 16];
        v446 = v120 - 2;
        v447 = v443 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v448 = *(_OWORD *)v446->f32;
          *(v445 - 1) = *(_OWORD *)v446[-2].f32;
          *v445 = v448;
          v445 -= 2;
          v446 -= 4;
          v447 -= 4;
        }
        while (v447);
        if (v443 == (v443 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_488:
          v120 = *(float32x2_t **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v439;
          *(_QWORD *)(a1 + 64) = v431;
          *(_QWORD *)(a1 + 72) = v440;
          if (!v120)
            goto LABEL_490;
          goto LABEL_489;
        }
      }
      else
      {
        v442 = v120;
      }
    }
    else
    {
      v442 = v120;
    }
    do
    {
      v449 = v442[-1];
      --v442;
      v439[-1] = v449;
      --v439;
    }
    while (v442 != v432);
    goto LABEL_488;
  }
  *(_QWORD *)(a1 + 56) = v439;
  *(_QWORD *)(a1 + 64) = v431;
  *(_QWORD *)(a1 + 72) = v440;
LABEL_489:
  operator delete(v120);
LABEL_490:
  *(_QWORD *)(a1 + 64) = v431;
  v450 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v431 < v450)
  {
    *v431 = *v512;
    v451 = v431 + 1;
    goto LABEL_514;
  }
  v452 = *v16;
  v453 = (char *)v431 - (char *)*v16;
  v454 = v453 >> 3;
  v455 = (v453 >> 3) + 1;
  if (v455 >> 61)
LABEL_550:
    sub_22316E078();
  v456 = v450 - (_QWORD)v452;
  if (v456 >> 2 > v455)
    v455 = v456 >> 2;
  if ((unint64_t)v456 >= 0x7FFFFFFFFFFFFFF8)
    v457 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v457 = v455;
  if (v457)
  {
    if (!(v457 >> 61))
    {
      v458 = operator new(8 * v457);
      v16 = v516;
      goto LABEL_502;
    }
LABEL_551:
    sub_223174E94();
  }
  v458 = 0;
LABEL_502:
  v459 = (float32x2_t *)&v458[8 * v454];
  v460 = &v458[8 * v457];
  *v459 = *v512;
  v451 = v459 + 1;
  if (v431 != v452)
  {
    v461 = (char *)v431 - (char *)v452 - 8;
    if (v461 >= 0x58)
    {
      if ((unint64_t)((char *)v431 - v458 - v453) >= 0x20)
      {
        v463 = (v461 >> 3) + 1;
        v464 = 8 * (v463 & 0x3FFFFFFFFFFFFFFCLL);
        v462 = &v431[v464 / 0xFFFFFFFFFFFFFFF8];
        v459 = (float32x2_t *)((char *)v459 - v464);
        v465 = &v458[8 * v454 - 16];
        v466 = v431 - 2;
        v467 = v463 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v468 = *(_OWORD *)v466->f32;
          *(v465 - 1) = *(_OWORD *)v466[-2].f32;
          *v465 = v468;
          v465 -= 2;
          v466 -= 4;
          v467 -= 4;
        }
        while (v467);
        if (v463 == (v463 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_512:
          v431 = *(float32x2_t **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v459;
          *(_QWORD *)(a1 + 64) = v451;
          *(_QWORD *)(a1 + 72) = v460;
          if (!v431)
            goto LABEL_514;
          goto LABEL_513;
        }
      }
      else
      {
        v462 = v431;
      }
    }
    else
    {
      v462 = v431;
    }
    do
    {
      v469 = v462[-1];
      --v462;
      v459[-1] = v469;
      --v459;
    }
    while (v462 != v452);
    goto LABEL_512;
  }
  *(_QWORD *)(a1 + 56) = v459;
  *(_QWORD *)(a1 + 64) = v451;
  *(_QWORD *)(a1 + 72) = v460;
LABEL_513:
  operator delete(v431);
LABEL_514:
  *(_QWORD *)(a1 + 64) = v451;
  v470 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v451 >= v470)
  {
    v472 = *v16;
    v473 = (char *)v451 - (char *)*v16;
    v474 = v473 >> 3;
    v475 = (v473 >> 3) + 1;
    if (v475 >> 61)
      sub_22316E078();
    v476 = v470 - (_QWORD)v472;
    if (v476 >> 2 > v475)
      v475 = v476 >> 2;
    if ((unint64_t)v476 >= 0x7FFFFFFFFFFFFFF8)
      v477 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v477 = v475;
    if (v477)
    {
      if (v477 >> 61)
        sub_223174E94();
      v478 = operator new(8 * v477);
      v479 = &v478[8 * v474];
      v480 = &v478[8 * v477];
      *v479 = 0;
      v471 = (uint64_t)(v479 + 1);
      v481 = (char *)((char *)v451 - (char *)v472);
      if (v451 != v472)
      {
LABEL_525:
        v482 = (unint64_t)(v481 - 8);
        if (v482 >= 0x58)
        {
          if ((unint64_t)((char *)v451 - v478 - v473) >= 0x20)
          {
            v484 = (v482 >> 3) + 1;
            v485 = 8 * (v484 & 0x3FFFFFFFFFFFFFFCLL);
            v483 = &v451[v485 / 0xFFFFFFFFFFFFFFF8];
            v479 = (_QWORD *)((char *)v479 - v485);
            v486 = &v478[8 * v474 - 16];
            v487 = v451 - 2;
            v488 = v484 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v489 = *(_OWORD *)v487->f32;
              *(v486 - 1) = *(_OWORD *)v487[-2].f32;
              *v486 = v489;
              v486 -= 2;
              v487 -= 4;
              v488 -= 4;
            }
            while (v488);
            if (v484 == (v484 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_535:
              v451 = *(float32x2_t **)(a1 + 56);
              *(_QWORD *)(a1 + 56) = v479;
              *(_QWORD *)(a1 + 64) = v471;
              *(_QWORD *)(a1 + 72) = v480;
              if (!v451)
                goto LABEL_537;
LABEL_536:
              operator delete(v451);
              goto LABEL_537;
            }
          }
          else
          {
            v483 = v451;
          }
        }
        else
        {
          v483 = v451;
        }
        do
        {
          v490 = v483[-1];
          --v483;
          *--v479 = v490;
        }
        while (v483 != v472);
        goto LABEL_535;
      }
    }
    else
    {
      v478 = 0;
      v479 = (_QWORD *)(8 * v474);
      v480 = 0;
      *(_QWORD *)(8 * v474) = 0;
      v471 = 8 * v474 + 8;
      v481 = (char *)((char *)v451 - (char *)v472);
      if (v451 != v472)
        goto LABEL_525;
    }
    *(_QWORD *)(a1 + 56) = v479;
    *(_QWORD *)(a1 + 64) = v471;
    *(_QWORD *)(a1 + 72) = v480;
    goto LABEL_536;
  }
  *v451 = 0;
  v471 = (uint64_t)&v451[1];
LABEL_537:
  *(_QWORD *)(a1 + 64) = v471;
  v491 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  if (((v471 - v491) & 0xFFFFFFFF0) == 0)
    goto LABEL_544;
  v492 = ((unint64_t)(v471 - v491) >> 4);
  v493 = 0.0;
  v494 = 1;
  v495 = 0.0;
  v496 = 0.0;
  do
  {
    if (--v492)
      v497 = v494 + 1;
    else
      v497 = 0;
    v498 = (float *)(v491 + 8 * v494);
    v499 = (float *)(v491 + 8 * (v497 | 1));
    v500 = (float *)(v491 + 8 * (v494 - 1));
    v495 = v495 + (float)((float)((float)(*v498 * v499[1]) - (float)(*v499 * v498[1])) * 0.5);
    v501 = (float *)(v491 + 8 * v497);
    *(float *)(a1 + 36) = v495;
    v496 = v496
         + (float)((float)((float)((float)((float)(*v498 * v501[1]) - (float)(*v499 * v500[1]))
                                 + (float)(*v500 * v499[1]))
                         - (float)(*v501 * v498[1]))
                 * 0.5);
    *(float *)(a1 + 40) = v496;
    v493 = v493 + (float)((float)((float)(*v500 * v501[1]) - (float)(*v501 * v500[1])) * 0.5);
    v494 += 2;
    *(float *)(a1 + 44) = v493;
  }
  while (v492);
  if (fabsf(v495) >= 0.0001)
  {
    if (v495 < 0.0)
    {
      v502 = v496 * -0.5;
      v503 = *(float *)(a1 + 88);
      v504 = v502 / v495;
      if (v503 == 3.4028e38 || v504 < v503)
        *(float *)(a1 + 88) = v504;
    }
  }
  else
  {
LABEL_544:
    *(_DWORD *)(a1 + 36) = 0;
  }
}

void sub_2239ADEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;
  void *v21;

  v21 = *a19;
  if (*a19)
  {
    *(_QWORD *)(v19 + 64) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

float sub_2239ADF08(_QWORD **a1, uint64_t a2, float32x2_t *a3, float *a4, int a5, unsigned int a6, unsigned int a7, _DWORD *a8)
{
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  float v21;
  int v22;
  float v23;
  float32x2_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  _DWORD v34[2];

  v14 = *a4;
  v13 = a4[1];
  if (a5)
    v15 = -v13;
  else
    v15 = a4[1];
  if (a5)
    v16 = *a4;
  else
    v16 = -*a4;
  *(float *)v34 = v15;
  *(float *)&v34[1] = v16;
  v17 = *(_QWORD *)(a2 + 8);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 16) - v17) >> 2);
  v19 = a6 % v18;
  v20 = sub_22393835C(*a1, (int *)(v17 + 12 * v19));
  if (!v20)
LABEL_20:
    sub_223198218("unordered_map::at: key not found");
  v21 = (float)(v13 * v15) - (float)(v14 * v16);
  v22 = a7 % v18;
  v23 = 3.4028e38;
  while (1)
  {
    v24 = vsub_f32(*a3, *(float32x2_t *)((char *)v20 + 44));
    v25 = a4[1];
    v26 = (float)(vmuls_lane_f32(*a4, v24, 1) - (float)(v25 * v24.f32[0])) / v21;
    v27 = fabsf(*a4);
    v28 = fabsf(v25);
    if (v27 <= v28)
      v24.f32[0] = v24.f32[1];
    v29 = -v24.f32[0];
    v30 = v27 > v28 ? *a4 : a4[1];
    if ((float)((float)(v29 - (float)(*(float *)&v34[v27 <= v28] * v26)) / v30) > 0.0
      && (v23 == 3.4028e38 || v26 > v23))
    {
      *a8 = v19;
      v23 = v26;
    }
    if ((_DWORD)v19 == v22)
      return v23;
    v31 = *(_QWORD *)(a2 + 8);
    v19 = (v19 + 1) % (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 16) - v31) >> 2));
    v20 = sub_22393835C(*a1, (int *)(v31 + 12 * v19));
    if (!v20)
      goto LABEL_20;
  }
}

float sub_2239AE0A8(float *a1, uint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  float v53;
  uint64_t *v54;
  float v55;
  float *v56;
  uint64_t v57;
  float v58;
  float v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  float v63;
  unint64_t v64;
  float v65;
  uint64_t *v66;
  uint64_t *v67;
  float v68;
  uint64_t v69;
  float v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  BOOL v81;
  uint64_t v82;
  uint64_t *v83;
  _DWORD *v84;
  float v85;
  int v86;
  uint64_t v87;
  float v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  _DWORD *v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  _QWORD *v110;
  uint64_t v111;
  float v112;
  int v113;
  float *v114;
  uint64_t v115;

BOOL sub_2239AEB04(float *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  int v25;
  float *v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((float *)a2 - 1) > a1[1])
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return result;
    case 3:
      v7 = a1[3];
      v8 = *((float *)a2 - 1);
      if (v7 <= a1[1])
      {
        if (v8 > v7)
        {
          v19 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = *(a2 - 1);
          *(a2 - 1) = v19;
          if (a1[3] > a1[1])
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      else
      {
        v9 = *(_QWORD *)a1;
        if (v8 <= v7)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v9;
          if (*((float *)a2 - 1) > *((float *)&v9 + 1))
          {
            *((_QWORD *)a1 + 1) = *(a2 - 1);
            *(a2 - 1) = v9;
          }
        }
        else
        {
          *(_QWORD *)a1 = *(a2 - 1);
          *(a2 - 1) = v9;
        }
      }
      return result;
    case 4:
      sub_2239AEE14(a1, a1 + 2, a1 + 4, (float *)a2 - 2);
      return 1;
    case 5:
      sub_2239AEE14(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*((float *)a2 - 1) <= a1[7])
        return 1;
      v14 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = *(a2 - 1);
      *(a2 - 1) = v14;
      if (a1[7] <= a1[5])
        return 1;
      v16 = *((_QWORD *)a1 + 2);
      v15 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 2) = v15;
      *((_QWORD *)a1 + 3) = v16;
      if (a1[3] >= *((float *)&v15 + 1))
        return 1;
      v17 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v15;
      *((_QWORD *)a1 + 2) = v17;
      if (a1[1] >= *((float *)&v15 + 1))
        return 1;
      v18 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v15;
      *((_QWORD *)a1 + 1) = v18;
      return 1;
    default:
      v10 = a1[3];
      v11 = a1[1];
      v12 = a1[5];
      if (v10 <= v11)
      {
        if (v12 > v10)
        {
          v21 = *((_QWORD *)a1 + 1);
          v20 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 1) = v20;
          *((_QWORD *)a1 + 2) = v21;
          if (v11 < *((float *)&v20 + 1))
          {
            v22 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v20;
            *((_QWORD *)a1 + 1) = v22;
          }
        }
      }
      else
      {
        v13 = *(_QWORD *)a1;
        if (v12 <= v10)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v13;
          if (v12 <= *((float *)&v13 + 1))
            goto LABEL_29;
          *((_QWORD *)a1 + 1) = *((_QWORD *)a1 + 2);
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 2);
        }
        *((_QWORD *)a1 + 2) = v13;
      }
LABEL_29:
      v23 = a1 + 6;
      if (a1 + 6 == (float *)a2)
        return 1;
      v24 = 0;
      v25 = 0;
      v26 = a1 + 4;
      break;
  }
  while (1)
  {
    v27 = v23[1];
    if (v27 > v26[1])
      break;
LABEL_38:
    v26 = v23;
    v24 += 8;
    v23 += 2;
    if (v23 == (float *)a2)
      return 1;
  }
  v28 = *v23;
  v29 = v24;
  do
  {
    *(_QWORD *)((char *)a1 + v29 + 24) = *(_QWORD *)((char *)a1 + v29 + 16);
    if (v29 == -16)
    {
      *a1 = v28;
      a1[1] = v27;
      if (++v25 != 8)
        goto LABEL_38;
      return v23 + 2 == (float *)a2;
    }
    v30 = *(float *)((char *)a1 + v29 + 12);
    v29 -= 8;
  }
  while (v30 < v27);
  v31 = (uint64_t)a1 + v29;
  *(float *)(v31 + 24) = v28;
  *(float *)(v31 + 28) = v27;
  if (++v25 != 8)
    goto LABEL_38;
  return v23 + 2 == (float *)a2;
}

float *sub_2239AEE14(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  v5 = a3[1];
  if (v4 <= result[1])
  {
    if (v5 > v4)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (a2[1] <= result[1])
        goto LABEL_7;
      v7 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v7;
      v5 = a3[1];
    }
  }
  else
  {
    v6 = *(_QWORD *)result;
    if (v5 > v4)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
LABEL_7:
      v5 = *((float *)&v6 + 1);
      goto LABEL_10;
    }
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v6;
    v5 = a3[1];
    if (v5 > *((float *)&v6 + 1))
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      v5 = *((float *)&v6 + 1);
    }
  }
LABEL_10:
  if (a4[1] > v5)
  {
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v8;
    if (a3[1] > a2[1])
    {
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      if (a2[1] > result[1])
      {
        v10 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v10;
      }
    }
  }
  return result;
}

char *sub_2239AEF20(void **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (char *)*a1;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)*a1) >> 4) >= __sz)
  {
    result = (char *)a1[1];
    if (0x8E38E38E38E38E39 * ((result - v9) >> 4) >= __sz)
    {
      if (a2 == a3)
      {
        v23 = v9;
      }
      else
      {
        v23 = v9;
        do
        {
          sub_2239AA9B8(v9, v6);
          v6 += 144;
          v9 += 144;
          v23 += 144;
        }
        while (v6 != a3);
        result = (char *)a1[1];
      }
      while (result != v23)
        result = (char *)sub_22391679C((_QWORD *)result - 18);
      a1[1] = v23;
    }
    else
    {
      v19 = a2 + 16 * ((result - v9) >> 4);
      if (result != v9)
      {
        v20 = 16 * ((result - v9) >> 4);
        do
        {
          result = (char *)sub_2239AA9B8(v9, v6);
          v6 += 144;
          v9 += 144;
          v20 -= 144;
        }
        while (v20);
        v9 = (char *)a1[1];
      }
      v21 = v9;
      if (v19 != a3)
      {
        v22 = 0;
        do
        {
          result = (char *)sub_2239A54E0((uint64_t)&v9[v22], (int *)(v19 + v22));
          v22 += 144;
        }
        while (v19 + v22 != a3);
        v21 = &v9[v22];
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (char *)a1[1];
      v11 = v9;
      if (v10 != v9)
      {
        do
          v10 = (char *)sub_22391679C((_QWORD *)v10 - 18);
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x1C71C71C71C71C7)
      goto LABEL_37;
    v12 = 0x8E38E38E38E38E39 * (v8 >> 4);
    v13 = 2 * v12;
    if (2 * v12 <= __sz)
      v13 = __sz;
    v14 = v12 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v13;
    if (v14 > 0x1C71C71C71C71C7)
LABEL_37:
      sub_22316E078();
    v15 = 144 * v14;
    result = (char *)operator new(144 * v14);
    v17 = (uint64_t)result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v15];
    if (v6 != a3)
    {
      v18 = 0;
      do
      {
        result = (char *)sub_2239A54E0(v17 + v18, (int *)(v6 + v18));
        v18 += 144;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = (void *)v17;
  }
  return result;
}

void sub_2239AF1C4(char **a1, uint64_t *a2)
{
  char **v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  void *v35;
  _BYTE *__src;
  __int128 v38;

  v3 = a1;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v16 = *a1;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    v18 = v17 + 1;
    if (v17 + 1 > 0x2AAAAAAAAAAAAAALL)
      sub_22316E078();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v16) >> 5);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x155555555555555)
      v20 = 0x2AAAAAAAAAAAAAALL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 > 0x2AAAAAAAAAAAAAALL)
        sub_223174E94();
      v21 = (char *)operator new(96 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[96 * v17];
    *((_QWORD *)&v38 + 1) = &v21[96 * v20];
    *(_QWORD *)v22 = *a2;
    *((_DWORD *)v22 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(v22 + 12) = *(uint64_t *)((char *)a2 + 12);
    *((_DWORD *)v22 + 5) = *((_DWORD *)a2 + 5);
    *((_QWORD *)v22 + 3) = a2[3];
    *((_DWORD *)v22 + 8) = *((_DWORD *)a2 + 8);
    *(_OWORD *)(v22 + 36) = *(_OWORD *)((char *)a2 + 36);
    *((_QWORD *)v22 + 7) = 0;
    *((_QWORD *)v22 + 8) = 0;
    v23 = v22 + 64;
    *((_QWORD *)v22 + 9) = 0;
    v24 = (_BYTE *)a2[8];
    __src = (_BYTE *)a2[7];
    v25 = v24 - __src;
    if (v24 != __src)
    {
      if (v25 < 0)
        sub_22316E078();
      v26 = (char *)operator new(v24 - __src);
      *((_QWORD *)v22 + 7) = v26;
      *v23 = v26;
      *((_QWORD *)v22 + 9) = &v26[8 * (v25 >> 3)];
      memcpy(v26, __src, v25 & 0xFFFFFFFFFFFFFFF8);
      *v23 = &v26[v25 & 0xFFFFFFFFFFFFFFF8];
    }
    v27 = &v21[96 * v17];
    *((_QWORD *)v27 + 10) = a2[10];
    *((_DWORD *)v27 + 22) = *((_DWORD *)a2 + 22);
    v15 = v22 + 96;
    *(_QWORD *)&v38 = v22 + 96;
    if (v5 == v16)
    {
      v3 = a1;
      *a1 = v22;
      a1[1] = v15;
      a1[2] = (char *)*((_QWORD *)&v38 + 1);
    }
    else
    {
      do
      {
        v28 = *((_QWORD *)v5 - 12);
        v5 -= 96;
        v29 = *((_DWORD *)v5 + 2);
        *((_QWORD *)v22 - 12) = v28;
        v22 -= 96;
        *((_DWORD *)v22 + 2) = v29;
        v30 = *(_QWORD *)(v5 + 12);
        *((_DWORD *)v22 + 5) = *((_DWORD *)v5 + 5);
        *(_QWORD *)(v22 + 12) = v30;
        v31 = *((_QWORD *)v5 + 3);
        *((_DWORD *)v22 + 8) = *((_DWORD *)v5 + 8);
        *((_QWORD *)v22 + 3) = v31;
        v32 = *(_OWORD *)(v5 + 36);
        *((_QWORD *)v22 + 8) = 0;
        *((_QWORD *)v22 + 9) = 0;
        *(_OWORD *)(v22 + 36) = v32;
        *(_OWORD *)(v22 + 56) = *(_OWORD *)(v5 + 56);
        *((_QWORD *)v22 + 9) = *((_QWORD *)v5 + 9);
        *((_QWORD *)v5 + 7) = 0;
        *((_QWORD *)v5 + 8) = 0;
        *((_QWORD *)v5 + 9) = 0;
        v33 = *((_QWORD *)v5 + 10);
        *((_DWORD *)v22 + 22) = *((_DWORD *)v5 + 22);
        *((_QWORD *)v22 + 10) = v33;
      }
      while (v5 != v16);
      v3 = a1;
      v5 = *a1;
      v34 = a1[1];
      *a1 = v22;
      *(_OWORD *)(a1 + 1) = v38;
      v15 = (char *)v38;
      while (v34 != v5)
      {
        v35 = (void *)*((_QWORD *)v34 - 5);
        if (v35)
        {
          *((_QWORD *)v34 - 4) = v35;
          operator delete(v35);
        }
        v34 -= 96;
      }
    }
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v5 = v6;
    v7 = *(uint64_t *)((char *)a2 + 12);
    *((_DWORD *)v5 + 5) = *((_DWORD *)a2 + 5);
    *(_QWORD *)(v5 + 12) = v7;
    v8 = a2[3];
    *((_DWORD *)v5 + 8) = *((_DWORD *)a2 + 8);
    *((_QWORD *)v5 + 3) = v8;
    v9 = *(_OWORD *)((char *)a2 + 36);
    *((_QWORD *)v5 + 7) = 0;
    *(_OWORD *)(v5 + 36) = v9;
    *((_QWORD *)v5 + 8) = 0;
    *((_QWORD *)v5 + 9) = 0;
    v11 = (_BYTE *)a2[7];
    v10 = (_BYTE *)a2[8];
    v12 = v10 - v11;
    if (v10 != v11)
    {
      if (v12 < 0)
        sub_22316E078();
      v13 = (char *)operator new(v10 - v11);
      *((_QWORD *)v5 + 7) = v13;
      *((_QWORD *)v5 + 8) = v13;
      *((_QWORD *)v5 + 9) = &v13[8 * (v12 >> 3)];
      memcpy(v13, v11, v12 & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)v5 + 8) = &v13[v12 & 0xFFFFFFFFFFFFFFF8];
    }
    v14 = a2[10];
    *((_DWORD *)v5 + 22) = *((_DWORD *)a2 + 22);
    *((_QWORD *)v5 + 10) = v14;
    v15 = v5 + 96;
    v3[1] = v5 + 96;
  }
  v3[1] = v15;
}

void sub_2239AF510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  void **v7;
  void *v9;
  va_list va;

  va_start(va, a6);
  v9 = *v7;
  if (*v7)
  {
    *v6 = v9;
    operator delete(v9);
  }
  sub_2239AF554((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2239AF534(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *v5;

  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(v3 + 8) = v1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2239AF554(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 96;
        *(_QWORD *)(a1 + 16) = v2 - 96;
        v5 = *(void **)(v2 - 40);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 32) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 96;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2239AF5C0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_2239AF600(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5D670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2239AF610(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5D670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2239AF640(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_2239AF658(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2239AF698(uint64_t a1, int a2, float32x2_t *a3, float a4)
{
  uint64_t v6;
  uint64_t v7;
  float32x2_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v17;
  __int32 v18;

  v6 = a1 + 1656;
  v7 = a1 + 328;
  *(float *)a1 = a4;
  *(float *)(a1 + 4) = 1.0 / a4;
  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = 1;
  sub_223A0A7F8(a1 + 24);
  v9 = (int8x16_t)xmmword_2245F4CE0;
  *(_OWORD *)v7 = xmmword_2245F4CE0;
  *(_OWORD *)(v7 + 16) = xmmword_2245F4CE0;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 392) = 12345;
  *(_DWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 804) = 12345;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 1216) = 12345;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_QWORD *)(a1 + 1648) = 0;
  *(_QWORD *)(a1 + 1640) = 0;
  *(_QWORD *)(a1 + 1632) = a1 + 1640;
  *(float32x2_t *)v10.f32 = *a3;
  v10.i32[2] = a3[1].i32[0];
  v11 = vnegq_f32(v10);
  v18 = v11.i32[2];
  v17 = v11.i64[0];
  v12 = vabsq_f32(v10);
  v13 = v12.f32[1];
  v14 = v12.f32[1] > v12.f32[0];
  if (v12.f32[1] <= v12.f32[0])
    v13 = v12.f32[0];
  if (v13 < v12.f32[2])
    v14 = 2;
  if (v14)
  {
    if (v14 == 1)
    {
      if (v11.f32[1] >= 0.0)
      {
        *(_DWORD *)(a1 + 16) = 3;
        v15 = (int64x2_t)xmmword_2245F53D0;
        v9 = (int8x16_t)xmmword_224657E00;
      }
      else
      {
        *(_DWORD *)(a1 + 16) = 2;
        v15 = (int64x2_t)xmmword_224657E10;
        v9 = (int8x16_t)xmmword_224657E20;
      }
      v12.i32[0] = 0;
    }
    else if (*(float *)((unint64_t)&v17 | (4 * v14)) >= 0.0)
    {
      *(_DWORD *)(a1 + 16) = 5;
      v12.i32[0] = 1.0;
      v15 = (int64x2_t)xmmword_2245F4CE0;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = 4;
      v9 = (int8x16_t)xmmword_224657E10;
      v15 = 0uLL;
      v12.i32[0] = -1.0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = v11.f32[0] >= 0.0;
    v12.i32[0] = 0;
    if (v11.f32[0] < 0.0)
    {
      v15 = (int64x2_t)xmmword_224657E30;
      v9 = (int8x16_t)xmmword_224657E40;
    }
    else
    {
      v15 = (int64x2_t)xmmword_224657E50;
      v9 = (int8x16_t)xmmword_2245F4CF0;
    }
  }
  *(int8x16_t *)v6 = v9;
  *(int64x2_t *)(v6 + 16) = v15;
  *(_DWORD *)(a1 + 1688) = v12.i32[0];
  v12.i32[0] = *(_DWORD *)(v6 + 32);
  *(_DWORD *)(v7 + 8) = v9.i32[2];
  *(_QWORD *)v7 = v9.i64[0];
  *(_DWORD *)(v7 + 20) = v15.i32[1];
  *(_QWORD *)(v7 + 12) = vextq_s8(v9, (int8x16_t)v15, 0xCuLL).u64[0];
  *(_DWORD *)(v7 + 32) = v12.i32[0];
  *(_QWORD *)(v7 + 24) = vdupq_laneq_s64(v15, 1).u64[0];
  v8.i32[0] = a3[1].i32[0];
  if (vmla_f32(vmla_laneq_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), *a3), (float32x2_t)vdup_lane_s32((int32x2_t)*a3, 1), (float32x4_t)v15, 3), v8, *(float32x2_t *)v12.f32).f32[0] > -0.99985)*(_BYTE *)(a1 + 12) = 0;
  return a1;
}

void *sub_2239AF8C4(void *result, uint64_t a2, _DWORD *a3, double a4, float32x4_t a5, double a6, double a7, double a8, double a9, float32x2_t a10)
{
  char *v12;
  BOOL v13;
  float32x4_t v14;
  signed int v15;
  float32x2_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  char **v20;
  signed int v21;
  int32x2_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int v30;
  float32x4_t v31;
  int32x2_t v32;
  int v33;
  char *v34;
  void **v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  BOOL v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  float32x4_t v58;
  int32x2_t v59;
  float32x2x3_t v60;

  v12 = (char *)result;
  v13 = (*a3 & 0x7FFFFFFFu) < 0x7F800000;
  if ((*a3 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v13 = (a3[1] & 0x7FFFFFFFu) < 0x7F800000;
    if ((a3[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v13 = (a3[2] & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (!v13)
  {
    result = (void *)sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  a5.i64[0] = *(_QWORD *)a3;
  a5.i32[2] = a3[2];
  v14 = vmulq_n_f32(a5, COERCE_FLOAT(*(_QWORD *)(a2 + 148)));
  v15 = *((_DWORD *)v12 + 2);
  v14.f32[0] = (float)((int)vcvtms_s32_f32(v14.f32[0]) / v15);
  v14.f32[1] = (float)((int)vcvtms_s32_f32(v14.f32[1]) / v15);
  v14.f32[2] = (float)((int)vcvtms_s32_f32(v14.f32[2]) / v15);
  v16 = (float32x2_t *)(v12 + 1656);
  v60 = vld3_f32((const float *)v16);
  v17.i64[0] = 0x3F0000003F000000;
  v17.i64[1] = 0x3F0000003F000000;
  v18 = vaddq_f32(v14, v17);
  v19 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v60.val[0], v18.f32[0]), v60.val[1], *(float32x2_t *)v18.f32, 1), v60.val[2], v18, 2);
  *(float32x2_t *)v18.f32 = vadd_f32(v19, (float32x2_t)0xBF000000BF000000);
  v55 = (int)v18.f32[0];
  v57 = (int)v18.f32[1];
  v20 = (char **)(v12 + 1640);
  v21 = v15;
  v22 = vdup_n_s32(v15);
  v23 = -4;
  while (2)
  {
    if (v23 >= 0)
      v24 = v23;
    else
      v24 = -v23;
    v56 = v23;
    v58 = (float32x4_t)COERCE_UNSIGNED_INT((float)(v23 + v55));
    v25 = -4;
    while (2)
    {
      if (v25 >= 0)
        v26 = v25;
      else
        v26 = -v25;
      if ((v26 + v24) > 6)
        goto LABEL_16;
      v27 = v58;
      v27.f32[1] = (float)(v25 + v57);
      v28.i64[0] = 0x3F0000003F000000;
      v28.i64[1] = 0x3F0000003F000000;
      v29 = (int8x16_t)vaddq_f32(v27, v28);
      v30 = *((_DWORD *)v12 + 416);
      v19.i32[0] = *((_DWORD *)v12 + 419);
      a10.i32[0] = *((_DWORD *)v12 + 422);
      *(float32x2_t *)v27.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*v16, *(float *)v29.i32), *(float32x2_t *)(v12 + 1668), *(float32x2_t *)v29.i8, 1), *(float32x2_t *)(v12 + 1680), (float32x4_t)v29, 2);
      v60.val[1] = vmla_f32(vmla_lane_f32(vmul_f32(v60.val[1], *(float32x2_t *)v29.i8), v19, *(float32x2_t *)v29.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), a10);
      v27.i64[1] = (uint64_t)v60.val[1];
      v29.i64[0] = 0xBF000000BF000000;
      v29.i64[1] = 0xBF000000BF000000;
      v31 = vaddq_f32(v27, (float32x4_t)v29);
      v32 = vmul_s32(v22, vcvt_s32_f32(*(float32x2_t *)v31.f32));
      v33 = v21 * (int)v31.f32[2];
      v34 = *v20;
      v35 = (void **)(v12 + 1640);
      v36 = v12 + 1640;
      if (!*v20)
        goto LABEL_36;
      do
      {
        while (1)
        {
          v36 = v34;
          v37 = *((_DWORD *)v34 + 7);
          if (v32.i32[0] != v37)
            break;
          v38 = *((_DWORD *)v36 + 8);
          if (v32.i32[1] != v38)
          {
            if (v32.i32[1] < v38)
              goto LABEL_23;
            if (v38 >= v32.i32[1])
              goto LABEL_16;
            goto LABEL_34;
          }
          v39 = *((_DWORD *)v36 + 9);
          if (v33 >= v39)
          {
            if (v39 >= v33)
              goto LABEL_16;
            goto LABEL_34;
          }
LABEL_23:
          v34 = *(char **)v36;
          v35 = (void **)v36;
          if (!*(_QWORD *)v36)
            goto LABEL_36;
        }
        if (v32.i32[0] < v37)
          goto LABEL_23;
        if (v37 >= v32.i32[0])
          goto LABEL_16;
LABEL_34:
        v34 = (char *)*((_QWORD *)v36 + 1);
      }
      while (v34);
      v35 = (void **)(v36 + 8);
LABEL_36:
      v59 = v32;
      result = operator new(0x28uLL);
      *(int32x2_t *)((char *)result + 28) = v59;
      *((_DWORD *)result + 9) = v33;
      *(_QWORD *)result = 0;
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)result + 2) = v36;
      *v35 = result;
      v40 = **((_QWORD **)v12 + 204);
      if (v40)
      {
        *((_QWORD *)v12 + 204) = v40;
        result = *v35;
      }
      v41 = *v20;
      v42 = result == *v20;
      *((_BYTE *)result + 24) = v42;
      if (!v42)
      {
        do
        {
          v43 = *((_QWORD *)result + 2);
          if (*(_BYTE *)(v43 + 24))
            break;
          v44 = *(char **)(v43 + 16);
          v45 = *(_QWORD *)v44;
          if (*(_QWORD *)v44 == v43)
          {
            v48 = *((_QWORD *)v44 + 1);
            if (!v48 || (v49 = *(unsigned __int8 *)(v48 + 24), v46 = (_BYTE *)(v48 + 24), v49))
            {
              if (*(void **)v43 == result)
              {
                *(_BYTE *)(v43 + 24) = 1;
                v44[24] = 0;
                v52 = *(_QWORD *)(v43 + 8);
                *(_QWORD *)v44 = v52;
                if (v52)
                  goto LABEL_53;
              }
              else
              {
                v50 = *(uint64_t **)(v43 + 8);
                v51 = *v50;
                *(_QWORD *)(v43 + 8) = *v50;
                if (v51)
                {
                  *(_QWORD *)(v51 + 16) = v43;
                  v44 = *(char **)(v43 + 16);
                }
                v50[2] = (uint64_t)v44;
                *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8 * (**(_QWORD **)(v43 + 16) != v43)) = v50;
                *v50 = v43;
                *(_QWORD *)(v43 + 16) = v50;
                v44 = (char *)v50[2];
                v43 = *(_QWORD *)v44;
                *((_BYTE *)v50 + 24) = 1;
                v44[24] = 0;
                v52 = *(_QWORD *)(v43 + 8);
                *(_QWORD *)v44 = v52;
                if (v52)
LABEL_53:
                  *(_QWORD *)(v52 + 16) = v44;
              }
              *(_QWORD *)(v43 + 16) = *((_QWORD *)v44 + 2);
              *(_QWORD *)(*((_QWORD *)v44 + 2) + 8 * (**((_QWORD **)v44 + 2) != (_QWORD)v44)) = v43;
              *(_QWORD *)(v43 + 8) = v44;
LABEL_14:
              *((_QWORD *)v44 + 2) = v43;
              break;
            }
          }
          else if (!v45 || (v47 = *(unsigned __int8 *)(v45 + 24), v46 = (_BYTE *)(v45 + 24), v47))
          {
            if (*(void **)v43 == result)
            {
              v54 = *((_QWORD *)result + 1);
              *(_QWORD *)v43 = v54;
              if (v54)
              {
                *(_QWORD *)(v54 + 16) = v43;
                v44 = *(char **)(v43 + 16);
              }
              *((_QWORD *)result + 2) = v44;
              *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8 * (**(_QWORD **)(v43 + 16) != v43)) = result;
              *((_QWORD *)result + 1) = v43;
              *(_QWORD *)(v43 + 16) = result;
              v44 = (char *)*((_QWORD *)result + 2);
              *((_BYTE *)result + 24) = 1;
              v44[24] = 0;
              v43 = *((_QWORD *)v44 + 1);
              v53 = *(_QWORD **)v43;
              *((_QWORD *)v44 + 1) = *(_QWORD *)v43;
              if (!v53)
                goto LABEL_13;
            }
            else
            {
              result = (void *)*((_QWORD *)result + 2);
              *(_BYTE *)(v43 + 24) = 1;
              v44[24] = 0;
              v43 = *((_QWORD *)v44 + 1);
              v53 = *(_QWORD **)v43;
              *((_QWORD *)v44 + 1) = *(_QWORD *)v43;
              if (!v53)
                goto LABEL_13;
            }
            v53[2] = v44;
LABEL_13:
            *(_QWORD *)(v43 + 16) = *((_QWORD *)v44 + 2);
            *(_QWORD *)(*((_QWORD *)v44 + 2) + 8 * (**((_QWORD **)v44 + 2) != (_QWORD)v44)) = v43;
            *(_QWORD *)v43 = v44;
            goto LABEL_14;
          }
          *(_BYTE *)(v43 + 24) = 1;
          result = v44;
          v44[24] = v44 == v41;
          *v46 = 1;
        }
        while (v44 != v41);
      }
      ++*((_QWORD *)v12 + 206);
LABEL_16:
      if (++v25 != 5)
        continue;
      break;
    }
    v23 = v56 + 1;
    if (v56 != 4)
      continue;
    return result;
  }
}

void sub_2239AFD90(float *a1, uint64_t a2, int32x4_t a3, int32x4_t a4, double a5, double a6, double a7, double a8, float32x2_t a9)
{
  uint64_t v9;
  float *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  const char *v16;
  size_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  const char *v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  void *p_p;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  float *v65;
  __int128 v66;
  int8x16_t v67;
  int8x16_t v68;
  unsigned __int32 v69;
  __int128 v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  float v84;
  int v85;
  unsigned __int8 v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  const char *v90;
  unsigned __int8 v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  float *v100;
  float v101;
  unsigned __int8 v102;
  const char *v103;
  size_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  float *v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  size_t v113;
  _QWORD *v114;
  void *v115;
  NSObject *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  void *v121;
  _QWORD *v122;
  unint64_t *v123;
  char *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  double v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  double v155;
  double v156;
  void *v157;
  std::__shared_weak_count *v158;
  double v159;
  double v160;
  double v161;
  double v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unsigned __int8 v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  size_t v176;
  const char *v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  const char *v180;
  size_t v181;
  _BYTE *v182;
  const char *v183;
  float *v184;
  unint64_t v185;
  uint64_t v186;
  int v187;
  float *v188;
  uint64_t v189;
  uint64_t v190;
  float *v191;
  void *v192;
  NSObject *v193;
  uint64_t v194;
  uint64_t v195;
  size_t v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  float *v235;
  const char *__src;
  int v237;
  size_t __len;
  int v239;
  uint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  size_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  float *v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD v255[3];
  _OWORD v256[3];
  float32x2_t v257;
  unsigned __int32 v258;
  int v259;
  uint64_t *v260;
  _BYTE *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v262;
  int v263;
  const char *v264;
  int v265;
  const char *v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  uint64_t v269;
  _BYTE object[24];
  __int128 v271;
  void *__p;
  size_t v273;
  unint64_t v274;
  char v275;
  _BYTE v276[24];
  double v277;
  char *v278;
  uint64_t v279;

  v9 = a2;
  v10 = a1;
  v279 = *MEMORY[0x24BDAC8D0];
  if (*(float *)(a2 + 144) == *a1)
    goto LABEL_92;
  sub_2239B1F58(&v269);
  if (**(int **)(v269 + 56) > 5)
    goto LABEL_92;
  v11 = *(unsigned __int8 *)(v269 + 72);
  v12 = sub_22322F254(v269, "OSLogSurrogateAppender", 1, 0);
  v13 = v12;
  if (!v11 && v12 == 0)
    goto LABEL_92;
  v260 = &v269;
  rep = (_BYTE *)std::chrono::steady_clock::now().__d_.__rep_;
  v262 = std::chrono::system_clock::now().__d_.__rep_;
  v263 = 5;
  v264 = "unknown file";
  v265 = 152;
  v267 = 0;
  v268 = 0;
  v266 = "unknown function";
  v15 = v269;
  v16 = (const char *)(v269 + 16);
  v249 = v269 + 16;
  if (*(char *)(v269 + 39) < 0)
  {
    v16 = *(const char **)(v269 + 16);
    v17 = *(_QWORD *)(v269 + 24);
    v252 = v11;
    v244 = v9;
    v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v19 & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    v17 = *(unsigned __int8 *)(v269 + 39);
    v252 = v11;
    v244 = v9;
    v18 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v18 & 1) != 0)
      goto LABEL_11;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if ((_BYTE)v271 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_11:
  if (byte_255788F57 >= 0)
    v20 = (const char *)&xmmword_255788F40;
  else
    v20 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v21 = byte_255788F57;
  else
    v21 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v20, v16);
  v22 = &object[8];
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v21 >= 0x17)
  {
    v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v23 = v21 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    *(_QWORD *)&object[16] = v21;
    *(_QWORD *)&v271 = v24 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v22;
    goto LABEL_24;
  }
  BYTE7(v271) = v21;
  if (v21)
LABEL_24:
    memmove(v22, v20, v21);
  v22[v21] = 0;
  BYTE8(v271) = 1;
  p_p = &__p;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v17 >= 0x17)
  {
    v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v26 = v17 | 7;
    v27 = v26 + 1;
    p_p = operator new(v26 + 1);
    v273 = v17;
    v274 = v27 | 0x8000000000000000;
    __p = p_p;
    v9 = v244;
  }
  else
  {
    HIBYTE(v274) = v17;
    v9 = v244;
    if (!v17)
      goto LABEL_33;
  }
  memmove(p_p, v16, v17);
LABEL_33:
  *((_BYTE *)p_p + v17) = 0;
  v275 = 1;
  v28 = *(NSObject **)object;
  if (SHIBYTE(v274) < 0)
    operator delete(__p);
  if (BYTE8(v271) && SBYTE7(v271) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v13 && *(_QWORD *)(v13 + 24))
  {
    v29 = _os_log_pack_size();
    v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
    v31 = (std::__shared_weak_count *)operator new();
    v32 = v31;
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v31->__shared_weak_owners_ = 0;
    v31[1].__vftable = v30;
    *(_QWORD *)object = v30;
    *(_QWORD *)&object[8] = v30;
    *(_QWORD *)&object[16] = v31;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    v271 = 0uLL;
    __p = 0;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v32);
    }
    v36 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v37 = operator new();
    v38 = *(unsigned __int8 *)(v15 + 39);
    v39 = v249;
    if ((v38 & 0x80u) != 0)
    {
      v39 = *(_QWORD *)(v15 + 16);
      v38 = *(_QWORD *)(v15 + 24);
    }
    *(_QWORD *)v37 = v36;
    *(_OWORD *)(v37 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v37 + 24) = v271;
    v271 = 0uLL;
    *(_QWORD *)(v37 + 40) = v39;
    *(_QWORD *)(v37 + 48) = v38;
    *(_BYTE *)(v37 + 56) = 16;
    *(_QWORD *)v276 = 0;
    *(_QWORD *)&v256[0] = v37;
    (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), v256);
    v40 = *(_QWORD *)&v256[0];
    *(_QWORD *)&v256[0] = 0;
    v9 = v244;
    v41 = v252;
    if (v40)
    {
      v42 = *(std::__shared_weak_count **)(v40 + 32);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = *(std::__shared_weak_count **)(v40 + 16);
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
      v48 = *(_QWORD *)v276;
      *(_QWORD *)v276 = 0;
      if (v48)
      {
        v49 = *(std::__shared_weak_count **)(v48 + 32);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = *(std::__shared_weak_count **)(v48 + 16);
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        MEMORY[0x227684CE8](v48, 0x10F0C40B62ED6C6);
      }
    }
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
    if (*((_QWORD *)&v271 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v59 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  else
  {
    os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    *(_WORD *)object = 0;
    LODWORD(v232) = 2;
    v231 = object;
    v61 = (void *)_os_log_send_and_compose_impl();
    v41 = v252;
    if (v61)
      free(v61);
  }
  if (v41)
  {
    sub_22322C138((uint64_t)&v260, "The voxel size of an input octree and the spatial subdivision do not match.");
    sub_223182C08((uint64_t)&v260);
  }
  sub_223182C08((uint64_t)&v260);
  v62 = v268;
  if (v268)
  {
    v63 = (unint64_t *)&v268->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
LABEL_92:
  v65 = v10 + 82;
  a3.i64[0] = *((_QWORD *)v10 + 41);
  a3.i32[2] = (__int32)v10[84];
  a4.i64[0] = *(_QWORD *)(v10 + 85);
  a4.i32[2] = (__int32)v10[87];
  *(_QWORD *)&v66 = vzip1q_s32(a3, a4).u64[0];
  a9.f32[0] = v10[90];
  v67 = (int8x16_t)vtrn2q_s32(a3, a4);
  v67.i32[2] = HIDWORD(*((_QWORD *)v10 + 44));
  v68 = (int8x16_t)vzip2q_s32(a3, a4);
  v71 = (float32x4_t)v68;
  v71.i32[2] = a9.i32[0];
  v69 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v10 + 88), (float32x2_t)0x8000000080000000), (float32x2_t)0x8000000080000000, *(float32x2_t *)(v10 + 88), 1), (float32x2_t)0x8000000080000000, a9).u32[0];
  *((_QWORD *)&v66 + 1) = *((_QWORD *)v10 + 44);
  HIDWORD(v70) = 0;
  LODWORD(v70) = vdupq_lane_s32(*(int32x2_t *)&v67, 0).i32[3];
  *(_QWORD *)((char *)&v70 + 4) = vextq_s8(v67, v68, 4uLL).u64[0];
  v71.i64[1] = vdupq_laneq_s32((int32x4_t)v71, 2).u32[0];
  v256[1] = v70;
  v256[2] = v71;
  v256[0] = v66;
  v257 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v66, (float32x2_t)0x8000000080000000), (float32x2_t)0x8000000080000000, *(float32x2_t *)v67.i8), (float32x2_t)0x8000000080000000, *(float32x2_t *)v68.i8);
  v258 = v69;
  v259 = 1065353216;
  v72 = *((_QWORD *)v10 + 46);
  v73 = *((_QWORD *)v10 + 47);
  if (v72 != v73)
  {
    v74 = v10 + 305;
    if ((*(_DWORD *)(v9 + 192) & 0x80000000) == 0)
    {
      v253 = v9 + 16;
      v246 = (uint64_t)(v10 + 307);
      v247 = (uint64_t)(v10 + 204);
      v248 = (uint64_t)(v10 + 101);
      v240 = *((_QWORD *)v10 + 47);
      v241 = v10 + 305;
      v245 = v9;
      v235 = v10 + 82;
      while (1)
      {
        *(_QWORD *)(v65 + 17) = 0;
        *((_QWORD *)v10 + 101) = 0;
        *v74 = 0;
        v255[0] = v256;
        v255[1] = v72;
        v255[2] = v10;
        *(_QWORD *)v276 = v9;
        *(_QWORD *)&v276[8] = v255;
        v260 = (uint64_t *)v253;
        rep = v276;
        LOBYTE(v254) = 1;
        v75 = *(_DWORD *)(v9 + 192);
        if (v75 < 0
          || (v76 = *(_DWORD *)(v9 + 196),
              *(_QWORD *)object = &v269,
              *(_QWORD *)&object[8] = &v260,
              *(_QWORD *)&object[16] = &v254,
              sub_2239B3B08(v253, v76, v75, (uint64_t)object, 0.0, v71),
              v77 = *(unsigned int *)v74,
              !(_DWORD)v77))
        {
          if (*(_BYTE *)(v72 + 156))
            *(_BYTE *)(v72 + 156) = 0;
          if (*(_BYTE *)(v72 + 148))
            *(_BYTE *)(v72 + 148) = 0;
          goto LABEL_102;
        }
        if (*((_DWORD *)v10 + 100) >= 0xAu)
          break;
        if (*((_DWORD *)v10 + 203) >= 0xAu)
          goto LABEL_126;
        sub_2239B7AEC(v246, (float *)(v246 + 4 * v77), 126 - 2 * __clz(v77), 1);
        v98 = *(_DWORD *)v74 / 0x14u;
        if (*(_DWORD *)v74 <= v98
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/include/Reconstruction/Common/SampledVector.h", 113, (uint64_t)"index < num_elements_", 21, (uint64_t)"Access element out of bounds", 28, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_DWORD *)(v72 + 144) = *(_DWORD *)(v246 + 4 * v98);
        *(_BYTE *)(v72 + 148) = 1;
        v96 = 19 * *(_DWORD *)v74 / 0x14u;
        if (*(_DWORD *)v74 <= v96)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/include/Reconstruction/Common/SampledVector.h", 113, (uint64_t)"index < num_elements_", 21, (uint64_t)"Access element out of bounds", 28, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v85 = 0;
          v97 = v246;
        }
        else
        {
          v85 = 0;
          v97 = v246;
        }
LABEL_139:
        v99 = *(_DWORD *)(v97 + 4 * v96);
        *(_BYTE *)(v72 + 156) = 1;
        v83 = (_BYTE *)(v72 + 156);
        *(_DWORD *)(v72 + 152) = v99;
        v100 = (float *)(v72 + 144);
        v82 = (_BYTE *)(v72 + 148);
        v250 = (float *)(v72 + 144);
        if (*(_BYTE *)(v72 + 148))
        {
          v84 = *v100;
          v71.i32[0] = *(_DWORD *)(v72 + 152);
          if (*v100 <= v71.f32[0])
            goto LABEL_141;
        }
        else
        {
          v84 = *(float *)(v72 + 152) + -2.5;
          *(float *)(v72 + 144) = v84;
          *(_BYTE *)(v72 + 148) = 1;
          v71.i32[0] = *(_DWORD *)(v72 + 152);
          if (v84 <= v71.f32[0])
            goto LABEL_141;
        }
LABEL_114:
        v86 = atomic_load((unsigned __int8 *)&qword_2557892F0);
        if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
        {
          __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
          __cxa_guard_release(&qword_2557892F0);
        }
        sub_223195728((uint64_t)&unk_255789280, "cv3d.recon.vlm_sb", 0x11uLL, "Invalid %{private}s height: %{private}f/%{private}f", 0x33uLL);
        sub_2239B204C(&v254);
        v87 = v74;
        if (**(int **)(v254 + 56) <= 5)
        {
          v88 = *(unsigned __int8 *)(v254 + 72);
          v242 = sub_22322F254(v254, "OSLogSurrogateAppender", 1, 0);
          if (v88 || v242)
          {
            v239 = v88;
            v260 = &v254;
            rep = (_BYTE *)std::chrono::steady_clock::now().__d_.__rep_;
            v262 = std::chrono::system_clock::now().__d_.__rep_;
            v263 = 5;
            v264 = "unknown file";
            v265 = 250;
            v266 = "unknown function";
            v267 = 0;
            v268 = 0;
            v89 = *v260;
            if (*(char *)(*v260 + 39) < 0)
            {
              v90 = *(const char **)(v89 + 16);
              __len = *(_QWORD *)(v89 + 24);
              v233 = *v260 + 16;
              v234 = *v260;
              v237 = v85;
              v102 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v102 & 1) == 0)
              {
LABEL_368:
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)v276);
                  sub_223199C58("com.apple.cv3d", (unint64_t)v276, &xmmword_255788F40);
                  if (LOBYTE(v277) && (v276[23] & 0x80000000) != 0)
                    operator delete(*(void **)v276);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
              }
            }
            else
            {
              __len = *(unsigned __int8 *)(*v260 + 39);
              v90 = (const char *)(*v260 + 16);
              v233 = (uint64_t)v90;
              v234 = *v260;
              v237 = v85;
              v91 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v91 & 1) == 0)
                goto LABEL_368;
            }
            if (byte_255788F57 >= 0)
              v103 = (const char *)&xmmword_255788F40;
            else
              v103 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v104 = byte_255788F57;
            else
              v104 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)object = os_log_create(v103, v90);
            if (v104 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            __src = v90;
            if (v104 >= 0x17)
            {
              v107 = v9;
              v108 = v65;
              v109 = v10;
              v110 = v107;
              v111 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v104 | 7) != 0x17)
                v111 = v104 | 7;
              v112 = v111 + 1;
              v106 = operator new(v111 + 1);
              *(_QWORD *)&object[16] = v104;
              *(_QWORD *)&v271 = v112 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v106;
              v105 = v110;
              v10 = v109;
              v65 = v108;
            }
            else
            {
              v105 = v9;
              BYTE7(v271) = v104;
              v106 = &object[8];
              if (!v104)
              {
LABEL_169:
                v106[v104] = 0;
                BYTE8(v271) = 1;
                v113 = __len;
                if (__len > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v114 = v241;
                v9 = v105;
                if (__len >= 0x17)
                {
                  v118 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((__len | 7) != 0x17)
                    v118 = __len | 7;
                  v119 = v118 + 1;
                  v115 = operator new(v118 + 1);
                  v273 = __len;
                  v274 = v119 | 0x8000000000000000;
                  __p = v115;
                  v113 = __len;
                }
                else
                {
                  HIBYTE(v274) = __len;
                  v115 = &__p;
                  if (!__len)
                  {
                    LOBYTE(__p) = 0;
                    v275 = 1;
                    v116 = *(NSObject **)object;
                    if ((SHIBYTE(v274) & 0x80000000) == 0)
                      goto LABEL_173;
LABEL_179:
                    operator delete(__p);
                    v117 = v242;
                    if (BYTE8(v271))
                      goto LABEL_180;
                    goto LABEL_182;
                  }
                }
                memmove(v115, __src, v113);
                *((_BYTE *)v115 + v113) = 0;
                v275 = 1;
                v116 = *(NSObject **)object;
                if (SHIBYTE(v274) < 0)
                  goto LABEL_179;
LABEL_173:
                v117 = v242;
                if (BYTE8(v271))
                {
LABEL_180:
                  if (SBYTE7(v271) < 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_182:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v117 && *(_QWORD *)(v117 + 24))
                {
                  v120 = _os_log_pack_size();
                  v121 = operator new(v120, (std::align_val_t)8uLL);
                  v122 = (_QWORD *)operator new();
                  v122[1] = 0;
                  v123 = v122 + 1;
                  *v122 = &off_24EC1F7F0;
                  v122[2] = 0;
                  v122[3] = v121;
                  *(_QWORD *)v276 = v121;
                  *(_QWORD *)&v276[8] = v121;
                  *(_QWORD *)&v276[16] = v122;
                  v277 = 0.0;
                  v278 = 0;
                  v124 = (char *)operator new(0x40uLL);
                  v125 = (std::__shared_weak_count *)v124;
                  *((_QWORD *)v124 + 1) = 0;
                  v126 = (unint64_t *)(v124 + 8);
                  *((_QWORD *)v124 + 2) = 0;
                  *(_QWORD *)v124 = &off_24EC1F840;
                  *((_QWORD *)v124 + 3) = off_24EC1F890;
                  strcpy(v124 + 32, "room floor/ceiling");
                  *(_DWORD *)(v124 + 51) = 0;
                  v124[55] = 18;
                  *(_QWORD *)&v277 = v124 + 24;
                  v278 = v124;
                  *(_QWORD *)object = v121;
                  *(_QWORD *)&object[8] = v121;
                  *(_QWORD *)&object[16] = v122;
                  do
                    v127 = __ldxr(v123);
                  while (__stxr(v127 + 1, v123));
                  *(_QWORD *)&v271 = v124 + 24;
                  *((_QWORD *)&v271 + 1) = v124;
                  v114 = v241;
                  do
                    v128 = __ldxr(v126);
                  while (__stxr(v128 + 1, v126));
                  __p = v124 + 24;
                  do
                    v129 = __ldaxr(v126);
                  while (__stlxr(v129 - 1, v126));
                  if (!v129)
                  {
                    (*(void (**)(char *))(*(_QWORD *)v124 + 16))(v124);
                    std::__shared_weak_count::__release_weak(v125);
                  }
                  v130 = *(std::__shared_weak_count **)&v276[16];
                  if (*(_QWORD *)&v276[16])
                  {
                    v131 = (unint64_t *)(*(_QWORD *)&v276[16] + 8);
                    do
                      v132 = __ldaxr(v131);
                    while (__stlxr(v132 - 1, v131));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                      std::__shared_weak_count::__release_weak(v130);
                    }
                  }
                  v133 = *(_QWORD *)object;
                  if (*((char *)__p + 31) >= 0)
                    v134 = (char *)__p + 8;
                  else
                    v134 = (char *)*((_QWORD *)__p + 1);
                  v135 = _os_log_pack_fill();
                  v136 = *(float *)(v72 + 144);
                  v137 = *(float *)(v72 + 152);
                  *(_DWORD *)v135 = 136381187;
                  *(_QWORD *)(v135 + 4) = v134;
                  *(_WORD *)(v135 + 12) = 2049;
                  *(double *)(v135 + 14) = v136;
                  *(_WORD *)(v135 + 22) = 2049;
                  *(double *)(v135 + 24) = v137;
                  v138 = operator new();
                  v139 = *(unsigned __int8 *)(v234 + 39);
                  v140 = v233;
                  if ((v139 & 0x80u) != 0)
                  {
                    v140 = *(_QWORD *)(v234 + 16);
                    v139 = *(_QWORD *)(v234 + 24);
                  }
                  *(_QWORD *)v138 = v133;
                  *(_OWORD *)(v138 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v138 + 24) = v271;
                  v271 = 0uLL;
                  *(_QWORD *)(v138 + 40) = v140;
                  *(_QWORD *)(v138 + 48) = v139;
                  *(_BYTE *)(v138 + 56) = 16;
                  v269 = 0;
                  *(_QWORD *)v276 = v138;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v242 + 24) + 40))(*(_QWORD *)(v242 + 24), v276);
                  v9 = v245;
                  v141 = *(_QWORD *)v276;
                  *(_QWORD *)v276 = 0;
                  if (v141)
                  {
                    v142 = *(std::__shared_weak_count **)(v141 + 32);
                    if (v142)
                    {
                      v143 = (unint64_t *)&v142->__shared_owners_;
                      do
                        v144 = __ldaxr(v143);
                      while (__stlxr(v144 - 1, v143));
                      if (!v144)
                      {
                        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                        std::__shared_weak_count::__release_weak(v142);
                      }
                    }
                    v145 = *(std::__shared_weak_count **)(v141 + 16);
                    if (v145)
                    {
                      v146 = (unint64_t *)&v145->__shared_owners_;
                      do
                        v147 = __ldaxr(v146);
                      while (__stlxr(v147 - 1, v146));
                      if (!v147)
                      {
                        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                        std::__shared_weak_count::__release_weak(v145);
                      }
                    }
                    MEMORY[0x227684CE8](v141, 0x10F0C40B62ED6C6);
                    v148 = v269;
                    v269 = 0;
                    if (v148)
                    {
                      v149 = *(std::__shared_weak_count **)(v148 + 32);
                      if (v149)
                      {
                        v150 = (unint64_t *)&v149->__shared_owners_;
                        do
                          v151 = __ldaxr(v150);
                        while (__stlxr(v151 - 1, v150));
                        if (!v151)
                        {
                          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                          std::__shared_weak_count::__release_weak(v149);
                        }
                      }
                      v152 = *(std::__shared_weak_count **)(v148 + 16);
                      if (v152)
                      {
                        v153 = (unint64_t *)&v152->__shared_owners_;
                        do
                          v154 = __ldaxr(v153);
                        while (__stlxr(v154 - 1, v153));
                        if (!v154)
                        {
                          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                          std::__shared_weak_count::__release_weak(v152);
                        }
                      }
                      MEMORY[0x227684CE8](v148, 0x10F0C40B62ED6C6);
                    }
                  }
                  if (v239)
                  {
                    v155 = *(float *)(v72 + 144);
                    v156 = *(float *)(v72 + 152);
                    *(_DWORD *)v276 = 136381187;
                    *(_QWORD *)&v276[4] = "room floor/ceiling";
                    *(_WORD *)&v276[12] = 2049;
                    *(double *)&v276[14] = v155;
                    *(_WORD *)&v276[22] = 2049;
                    v277 = v156;
                    LODWORD(v232) = 32;
                    v231 = v276;
                    v157 = (void *)_os_log_send_and_compose_impl();
                    v158 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
                    if (!*((_QWORD *)&v271 + 1))
                      goto LABEL_238;
                  }
                  else
                  {
                    v157 = 0;
                    v158 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
                    if (!*((_QWORD *)&v271 + 1))
                      goto LABEL_238;
                  }
                  v163 = (unint64_t *)&v158->__shared_owners_;
                  do
                    v164 = __ldaxr(v163);
                  while (__stlxr(v164 - 1, v163));
                  if (!v164)
                  {
                    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                    std::__shared_weak_count::__release_weak(v158);
                    v165 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                      goto LABEL_239;
                    goto LABEL_242;
                  }
LABEL_238:
                  v165 = *(std::__shared_weak_count **)&object[16];
                  if (!*(_QWORD *)&object[16])
                    goto LABEL_242;
LABEL_239:
                  v166 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v167 = __ldaxr(v166);
                  while (__stlxr(v167 - 1, v166));
                  if (v167)
                  {
LABEL_242:
                    if (v239)
                      goto LABEL_243;
LABEL_245:
                    if (v157)
LABEL_246:
                      free(v157);
LABEL_247:
                    v87 = v114;
                    sub_223182C08((uint64_t)&v260);
                    v168 = v268;
                    v85 = v237;
                    if (v268)
                    {
                      v169 = (unint64_t *)&v268->__shared_owners_;
                      do
                        v170 = __ldaxr(v169);
                      while (__stlxr(v170 - 1, v169));
                      if (!v170)
                      {
                        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                        std::__shared_weak_count::__release_weak(v168);
                      }
                    }
                    v73 = v240;
                    goto LABEL_253;
                  }
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                  if (!v239)
                    goto LABEL_245;
LABEL_243:
                  sub_22322C138((uint64_t)&v260, (char *)v157, v231, v232);
                }
                else
                {
                  os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
                  if (!v239)
                  {
                    v161 = *(float *)(v72 + 144);
                    v162 = *(float *)(v72 + 152);
                    *(_DWORD *)object = 136381187;
                    *(_QWORD *)&object[4] = "room floor/ceiling";
                    *(_WORD *)&object[12] = 2049;
                    *(double *)&object[14] = v161;
                    *(_WORD *)&object[22] = 2049;
                    *(double *)&v271 = v162;
                    LODWORD(v232) = 32;
                    v231 = object;
                    v157 = (void *)_os_log_send_and_compose_impl();
                    if (v157)
                      goto LABEL_246;
                    goto LABEL_247;
                  }
                  v159 = *(float *)(v72 + 144);
                  v160 = *(float *)(v72 + 152);
                  *(_DWORD *)object = 136381187;
                  *(_QWORD *)&object[4] = "room floor/ceiling";
                  *(_WORD *)&object[12] = 2049;
                  *(double *)&object[14] = v159;
                  *(_WORD *)&object[22] = 2049;
                  *(double *)&v271 = v160;
                  LODWORD(v232) = 32;
                  v157 = (void *)_os_log_send_and_compose_impl();
                  sub_22322C138((uint64_t)&v260, (char *)v157, object, v232);
                }
                sub_223182C08((uint64_t)&v260);
                goto LABEL_245;
              }
            }
            memmove(v106, v103, v104);
            goto LABEL_169;
          }
        }
LABEL_253:
        v71.i32[0] = *(_DWORD *)(v72 + 144);
        v84 = *(float *)(v72 + 152);
        *(float *)(v72 + 144) = v84;
        *(_DWORD *)(v72 + 152) = v71.i32[0];
        v74 = v87;
        if (v71.f32[0] >= (float)(v84 + 2.0))
        {
LABEL_254:
          if (!*v82)
            goto LABEL_256;
          goto LABEL_255;
        }
LABEL_142:
        if (v85)
        {
          if (*((_DWORD *)v10 + 100) > *((_DWORD *)v10 + 203))
          {
            *(float *)(v72 + 152) = v84 + 2.5;
            *(_BYTE *)(v72 + 156) = 1;
            if (!*v82)
              goto LABEL_256;
LABEL_255:
            if (*v83)
              goto LABEL_102;
            goto LABEL_256;
          }
          *v250 = v71.f32[0] + -2.5;
          *v82 = 1;
          if (*v83)
            goto LABEL_102;
        }
        else
        {
          v101 = (float)(v84 + v71.f32[0]) * 0.5;
          v71.f32[0] = v101 + -1.25;
          *(float *)(v72 + 144) = v101 + -1.25;
          *(_BYTE *)(v72 + 148) = 1;
          *(float *)(v72 + 152) = v101 + 1.25;
          *v83 = 1;
          if (*v83)
            goto LABEL_102;
        }
LABEL_256:
        v171 = atomic_load((unsigned __int8 *)&qword_2557892F0);
        if ((v171 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
        {
          __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
          __cxa_guard_release(&qword_2557892F0);
        }
        sub_223195728((uint64_t)&unk_255789280, "cv3d.recon.vlm_sb", 0x11uLL, "Failed to estimate %{private}s height room floor/ceiling", 0x38uLL);
        sub_2239B204C(&v254);
        if (**(int **)(v254 + 56) > 5)
          goto LABEL_101;
        v172 = *(unsigned __int8 *)(v254 + 72);
        v173 = sub_22322F254(v254, "OSLogSurrogateAppender", 1, 0);
        v174 = v173;
        if (!v172 && !v173)
          goto LABEL_101;
        v260 = &v254;
        rep = (_BYTE *)std::chrono::steady_clock::now().__d_.__rep_;
        v262 = std::chrono::system_clock::now().__d_.__rep_;
        v263 = 5;
        v264 = "unknown file";
        v265 = 278;
        v266 = "unknown function";
        v267 = 0;
        v268 = 0;
        v175 = *v260;
        if (*(char *)(*v260 + 39) < 0)
        {
          v177 = *(const char **)(v175 + 16);
          v176 = *(_QWORD *)(v175 + 24);
          v251 = *v260 + 16;
          v179 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v179 & 1) != 0)
            goto LABEL_264;
        }
        else
        {
          v176 = *(unsigned __int8 *)(*v260 + 39);
          v177 = (const char *)(*v260 + 16);
          v251 = (uint64_t)v177;
          v178 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v178 & 1) != 0)
            goto LABEL_264;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v276);
          sub_223199C58("com.apple.cv3d", (unint64_t)v276, &xmmword_255788F40);
          if (LOBYTE(v277) && (v276[23] & 0x80000000) != 0)
            operator delete(*(void **)v276);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_264:
        if (byte_255788F57 >= 0)
          v180 = (const char *)&xmmword_255788F40;
        else
          v180 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v181 = byte_255788F57;
        else
          v181 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v180, v177);
        if (v181 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v181 >= 0x17)
        {
          v243 = v176;
          v183 = v177;
          v184 = v10;
          v185 = v174;
          v186 = v175;
          v187 = v172;
          v188 = v184;
          v189 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v181 | 7) != 0x17)
            v189 = v181 | 7;
          v190 = v189 + 1;
          v182 = operator new(v189 + 1);
          *(_QWORD *)&object[16] = v181;
          *(_QWORD *)&v271 = v190 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v182;
          v191 = v188;
          v172 = v187;
          v175 = v186;
          v174 = v185;
          v10 = v191;
          v177 = v183;
          v176 = v243;
LABEL_277:
          memmove(v182, v180, v181);
          goto LABEL_278;
        }
        BYTE7(v271) = v181;
        v182 = &object[8];
        if (v181)
          goto LABEL_277;
LABEL_278:
        v182[v181] = 0;
        BYTE8(v271) = 1;
        if (v176 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v74 = v241;
        if (v176 >= 0x17)
        {
          v194 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v176 | 7) != 0x17)
            v194 = v176 | 7;
          v195 = v194 + 1;
          v192 = operator new(v194 + 1);
          v273 = v176;
          v274 = v195 | 0x8000000000000000;
          __p = v192;
        }
        else
        {
          HIBYTE(v274) = v176;
          v192 = &__p;
          if (!v176)
          {
            LOBYTE(__p) = 0;
            v275 = 1;
            v193 = *(NSObject **)object;
            if ((SHIBYTE(v274) & 0x80000000) == 0)
              goto LABEL_282;
            goto LABEL_288;
          }
        }
        memmove(v192, v177, v176);
        *((_BYTE *)v192 + v176) = 0;
        v275 = 1;
        v193 = *(NSObject **)object;
        if ((SHIBYTE(v274) & 0x80000000) == 0)
        {
LABEL_282:
          if (!BYTE8(v271))
            goto LABEL_291;
          goto LABEL_289;
        }
LABEL_288:
        operator delete(__p);
        if (!BYTE8(v271))
          goto LABEL_291;
LABEL_289:
        if (SBYTE7(v271) < 0)
          operator delete(*(void **)&object[8]);
LABEL_291:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v174 || !*(_QWORD *)(v174 + 24))
        {
          os_log_type_enabled(v193, OS_LOG_TYPE_ERROR);
          if (!v172)
          {
            *(_WORD *)object = 0;
            LODWORD(v232) = 2;
            v231 = object;
            v221 = (void *)_os_log_send_and_compose_impl();
            if (!v221)
              goto LABEL_346;
LABEL_345:
            free(v221);
            goto LABEL_346;
          }
          *(_WORD *)object = 0;
          LODWORD(v232) = 2;
          v221 = (void *)_os_log_send_and_compose_impl();
          sub_22322C138((uint64_t)&v260, (char *)v221, object, v232);
          goto LABEL_343;
        }
        v196 = _os_log_pack_size();
        v197 = (std::__shared_weak_count_vtbl *)operator new(v196, (std::align_val_t)8uLL);
        v198 = (std::__shared_weak_count *)operator new();
        v199 = v198;
        v198->__shared_owners_ = 0;
        v200 = (unint64_t *)&v198->__shared_owners_;
        v198->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v198->__shared_weak_owners_ = 0;
        v198[1].__vftable = v197;
        *(_QWORD *)object = v197;
        *(_QWORD *)&object[8] = v197;
        *(_QWORD *)&object[16] = v198;
        do
          v201 = __ldxr(v200);
        while (__stxr(v201 + 1, v200));
        v271 = 0uLL;
        __p = 0;
        v74 = v241;
        do
          v202 = __ldaxr(v200);
        while (__stlxr(v202 - 1, v200));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
          std::__shared_weak_count::__release_weak(v199);
        }
        v203 = *(_QWORD *)object;
        *(_WORD *)_os_log_pack_fill() = 0;
        v204 = operator new();
        v205 = *(unsigned __int8 *)(v175 + 39);
        v206 = v251;
        if ((v205 & 0x80u) != 0)
        {
          v206 = *(_QWORD *)(v175 + 16);
          v205 = *(_QWORD *)(v175 + 24);
        }
        *(_QWORD *)v204 = v203;
        *(_OWORD *)(v204 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v204 + 24) = v271;
        v271 = 0uLL;
        *(_QWORD *)(v204 + 40) = v206;
        *(_QWORD *)(v204 + 48) = v205;
        *(_BYTE *)(v204 + 56) = 16;
        v269 = 0;
        *(_QWORD *)v276 = v204;
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v174 + 24) + 40))(*(_QWORD *)(v174 + 24), v276);
        v207 = *(_QWORD *)v276;
        *(_QWORD *)v276 = 0;
        if (v207)
        {
          v208 = *(std::__shared_weak_count **)(v207 + 32);
          if (v208)
          {
            v209 = (unint64_t *)&v208->__shared_owners_;
            do
              v210 = __ldaxr(v209);
            while (__stlxr(v210 - 1, v209));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
              std::__shared_weak_count::__release_weak(v208);
            }
          }
          v211 = *(std::__shared_weak_count **)(v207 + 16);
          if (v211)
          {
            v212 = (unint64_t *)&v211->__shared_owners_;
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
          }
          MEMORY[0x227684CE8](v207, 0x10F0C40B62ED6C6);
          v214 = v269;
          v269 = 0;
          if (v214)
          {
            v215 = *(std::__shared_weak_count **)(v214 + 32);
            if (v215)
            {
              v216 = (unint64_t *)&v215->__shared_owners_;
              do
                v217 = __ldaxr(v216);
              while (__stlxr(v217 - 1, v216));
              if (!v217)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v218 = *(std::__shared_weak_count **)(v214 + 16);
            if (v218)
            {
              v219 = (unint64_t *)&v218->__shared_owners_;
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                std::__shared_weak_count::__release_weak(v218);
              }
            }
            MEMORY[0x227684CE8](v214, 0x10F0C40B62ED6C6);
          }
        }
        if (v172)
        {
          *(_WORD *)v276 = 0;
          LODWORD(v232) = 2;
          v231 = v276;
          v221 = (void *)_os_log_send_and_compose_impl();
          v222 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
          if (!*((_QWORD *)&v271 + 1))
            goto LABEL_337;
        }
        else
        {
          v221 = 0;
          v222 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
          if (!*((_QWORD *)&v271 + 1))
            goto LABEL_337;
        }
        v223 = (unint64_t *)&v222->__shared_owners_;
        do
          v224 = __ldaxr(v223);
        while (__stlxr(v224 - 1, v223));
        if (v224)
        {
LABEL_337:
          v225 = *(std::__shared_weak_count **)&object[16];
          if (!*(_QWORD *)&object[16])
            goto LABEL_341;
          goto LABEL_338;
        }
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
        v225 = *(std::__shared_weak_count **)&object[16];
        if (!*(_QWORD *)&object[16])
          goto LABEL_341;
LABEL_338:
        v226 = (unint64_t *)&v225->__shared_owners_;
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (v227)
        {
LABEL_341:
          if (!v172)
            goto LABEL_344;
LABEL_342:
          sub_22322C138((uint64_t)&v260, (char *)v221, v231, v232);
LABEL_343:
          sub_223182C08((uint64_t)&v260);
          goto LABEL_344;
        }
        ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
        std::__shared_weak_count::__release_weak(v225);
        if (v172)
          goto LABEL_342;
LABEL_344:
        if (v221)
          goto LABEL_345;
LABEL_346:
        sub_223182C08((uint64_t)&v260);
        v228 = v268;
        v65 = v235;
        if (v268)
        {
          v229 = (unint64_t *)&v268->__shared_owners_;
          do
            v230 = __ldaxr(v229);
          while (__stlxr(v230 - 1, v229));
          if (!v230)
          {
            ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
            std::__shared_weak_count::__release_weak(v228);
          }
        }
        v73 = v240;
LABEL_101:
        v9 = v245;
LABEL_102:
        v72 += 160;
        if (v72 == v73)
          return;
      }
      v78 = *((unsigned int *)v65 + 17);
      v79 = 126 - 2 * __clz(v78);
      if ((_DWORD)v78)
        v80 = v79;
      else
        v80 = 0;
      sub_2239B5E7C(v248, (float *)(v248 + 4 * v78), v80, 1);
      v81 = (unint64_t)*((unsigned int *)v65 + 17) >> 2;
      if (*((_DWORD *)v65 + 17) <= *((_DWORD *)v65 + 17) >> 2
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/include/Reconstruction/Common/SampledVector.h", 113, (uint64_t)"index < num_elements_", 21, (uint64_t)"Access element out of bounds", 28, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      *(_DWORD *)(v72 + 144) = *(_DWORD *)(v248 + 4 * v81);
      *(_BYTE *)(v72 + 148) = 1;
      v82 = (_BYTE *)(v72 + 148);
      if (*((_DWORD *)v10 + 203) <= 9u)
      {
        v250 = (float *)(v72 + 144);
        v83 = (_BYTE *)(v72 + 156);
        v84 = *(float *)(v72 + 144);
        v85 = 1;
        if (*(_BYTE *)(v72 + 156))
        {
          v71.i32[0] = *(_DWORD *)(v72 + 152);
          if (v84 <= v71.f32[0])
            goto LABEL_141;
        }
        else
        {
          *(float *)(v72 + 152) = v84 + 2.5;
          *(_BYTE *)(v72 + 156) = 1;
          v71.i32[0] = *(_DWORD *)(v72 + 152);
          if (v84 <= v71.f32[0])
          {
LABEL_141:
            if (v71.f32[0] >= (float)(v84 + 2.0))
              goto LABEL_254;
            goto LABEL_142;
          }
        }
        goto LABEL_114;
      }
LABEL_126:
      v92 = *((unsigned int *)v10 + 202);
      v93 = 126 - 2 * __clz(v92);
      if ((_DWORD)v92)
        v94 = v93;
      else
        v94 = 0;
      sub_2239B6CB4(v247, (float *)(v247 + 4 * v92), v94, 1);
      v95 = *((_DWORD *)v10 + 202);
      v96 = (3 * v95) >> 2;
      if (v95 <= v96)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/include/Reconstruction/Common/SampledVector.h", 113, (uint64_t)"index < num_elements_", 21, (uint64_t)"Access element out of bounds", 28, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v85 = 1;
        v97 = v247;
      }
      else
      {
        v97 = v247;
        v85 = 1;
      }
      goto LABEL_139;
    }
    do
    {
      if (*(_BYTE *)(v72 + 156))
        *(_BYTE *)(v72 + 156) = 0;
      if (*(_BYTE *)(v72 + 148))
        *(_BYTE *)(v72 + 148) = 0;
      v72 += 160;
    }
    while (v72 != v73);
    *(_QWORD *)(v10 + 99) = 0;
    *((_QWORD *)v10 + 101) = 0;
    *v74 = 0;
  }
}

void sub_2239B1C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  if (a63)
  {
    if (a62 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_2239B1C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  sub_22319A054(&a39);
  sub_22319A054((uint64_t *)(v57 - 192));
  sub_223199DE8((uint64_t)&a57);
  sub_223182DAC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_2239B1CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *object)
{
  sub_223199DE8((uint64_t)&object);
  sub_223182DAC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_2239B1E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_223182DAC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_2239B1E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *object,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a63 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_2239B1EB4()
{
  JUMPOUT(0x2239B1EE0);
}

void sub_2239B1EBC()
{
  JUMPOUT(0x2239B1ECCLL);
}

void sub_2239B1EF4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2239B1F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  void *v47;

  if (v47)
  {
    free(v47);
    sub_223182DAC((uint64_t)&a47);
    _Unwind_Resume(a1);
  }
  sub_223182DAC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_2239B1F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  void *v47;

  if (v47)
    free(v47);
  sub_223182DAC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_2239B1F58(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCAF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCAF8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.vlm");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCAF0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCAF8);
  }
  *a1 = qword_2540CCAF0;
}

void sub_2239B1FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCAF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCAF8);
  _Unwind_Resume(a1);
}

void sub_2239B204C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCB08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCB08))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCB00);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCB08);
  }
  *a1 = qword_2540CCB00;
}

void sub_2239B20E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCB08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCB08);
  _Unwind_Resume(a1);
}

void sub_2239B2140(uint64_t a1, uint64_t a2, float *a3, char a4, float *a5, double a6, double a7, double a8, double a9, double a10, double a11, __n128 a12)
{
  uint64_t v12;
  const float *v14;
  unsigned __int8 *v15;
  float32x2_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  _BOOL4 v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  __float2 v28;
  __n128 v31;
  float32x2x3_t v32;

  v12 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v12)
  {
    v14 = (const float *)(a1 + 1656);
    v15 = (unsigned __int8 *)(a2 + 36);
    v16 = 0;
    a12.n128_u32[0] = 0;
    v17 = 0.0;
    v18 = 0;
    do
    {
      v20 = *v15;
      if ((_DWORD)v20 != 255)
      {
        if (v20 >= 0x2A)
        {
          v31 = a12;
          v21 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C);
          a12 = v31;
          if (v21)
            abort();
        }
        if (byte_224693EA5[v20] == 2)
          goto LABEL_3;
      }
      if ((a4 & 1) == 0)
      {
LABEL_3:
        v32 = vld3_f32(v14);
        v19 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v32.val[0], COERCE_FLOAT(*((_QWORD *)v15 - 3))), v32.val[1], *(float32x2_t *)(v15 - 24), 1), v32.val[2], *((float *)v15 - 4));
        v18 = vadd_f32(v18, v19);
        v16 = vadd_f32(v16, vmul_f32(v19, v19));
        a12.n128_f32[0] = a12.n128_f32[0] + vmul_lane_f32(v19, v19, 1).f32[0];
        v17 = v17 + 1.0;
      }
      v15 += 28;
      --v12;
    }
    while (v12);
  }
  else
  {
    v16 = 0;
    a12.n128_u32[0] = 0;
    v17 = 0.0;
    v18 = 0;
  }
  v22 = vmul_n_f32(v18, 1.0 / v17);
  v23 = (float32x2_t)vdup_lane_s32((int32x2_t)v22, 0);
  v23.i32[0] = a12.n128_u32[0];
  v24 = vmul_f32(v22, v22);
  v22.f32[0] = 1.0 / v17;
  v25 = vmul_f32(v23, v22);
  v26 = vsub_f32(vmul_n_f32(v16, 1.0 / v17), v24);
  v25.f32[0] = vsub_f32(v25, (float32x2_t)vdup_lane_s32((int32x2_t)v25, 1)).f32[0];
  v27 = atan2f(v25.f32[0] + v25.f32[0], vsub_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1)).f32[0]);
  v28 = __sincosf_stret(v27 * 0.5);
  *a5 = v28.__cosval;
  a5[1] = v28.__sinval;
  if ((float)((float)(v28.__cosval * a3[1]) - (float)(v28.__sinval * *a3)) < 0.0)
  {
    *a5 = -v28.__cosval;
    a5[1] = -v28.__sinval;
  }
}

void sub_2239B2318(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, uint64_t a5, double a6, float32x4_t a7, double a8, double a9, double a10, double a11, __n128 a12, __n128 a13)
{
  __int128 v13;
  int32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  float32x2_t v24;
  float32x2_t v25;
  uint64_t v26;
  unsigned int v27;
  float32x2_t v28;
  float32x2_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v37;
  double v38;
  float32x4_t v39;
  uint64_t v40;
  float32x2_t v41;
  unsigned __int8 *v42;
  float32x2_t v43;
  float v44;
  uint64_t v45;
  float32x2_t v46;
  double v47;
  int32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x2_t v51;
  int32x4_t v52;
  float32x2_t v53;
  _BYTE *v54;
  float32x2_t v55;
  float v56;
  _BYTE *v57;
  float32x2_t v58;
  int32x4_t v59;
  int32x4_t v60;
  float32x2_t v61;
  char v62;
  _BOOL4 v63;
  int v64;
  float32x4_t v65;
  float32x4_t v66;
  int v67;
  float32x4_t v68;
  int v69;
  float v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  float32x2_t *v74;
  float32x2_t *v75;
  char v76;
  int v77;
  __int128 v78;
  float32x2_t v79;
  __int128 v80;
  int v81;
  int v82;
  float32x4_t v83;
  float32x4_t v84;
  std::string *v85;
  std::string::size_type size;
  uint64_t v87;
  float32x4_t v88;
  float32x4_t v89;
  __int128 v92;
  __int128 v93;
  __n128 v94;
  __n128 v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  double v100;
  float32x2_t v101;
  uint64_t *v102[2];
  std::string v103;
  unsigned __int8 v104[9];
  float32x2x3_t v105;
  float32x2x3_t v106;
  float32x2x3_t v107;

  v14 = a3;
  v15 = a1;
  v16 = a1 + 1656;
  v17.i64[1] = 0;
  v100 = 0.0;
  v101 = 0;
  v98 = 0;
  v99 = 0;
  v18 = *(unsigned int *)(a4 + 4);
  if (!(_DWORD)v18)
  {
LABEL_41:
    *(float32x2_t *)a7.f32 = vcvt_f32_s32(*v14);
    v64 = v14[1].i32[0];
    a7.f32[2] = (float)v64;
    v106 = vld3_f32((const float *)v16);
    v65.i64[0] = 0x3F0000003F000000;
    v65.i64[1] = 0x3F0000003F000000;
    v66 = vmulq_n_f32(vaddq_f32(a7, v65), COERCE_FLOAT(*(_QWORD *)(a2 + 144)));
    v67 = *(_DWORD *)(v15 + 8);
    v17.f32[0] = (float)(v14->i32[0] / v67);
    v17.f32[1] = (float)((int)HIDWORD(*(unint64_t *)v14) / v67);
    v17.f32[2] = (float)(v64 / v67);
    v68 = vaddq_f32(v17, v65);
    v103.__r_.__value_.__l.__data_ = (std::string::pointer)vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v106.val[0], v68.f32[0]), v106.val[1], *(float32x2_t *)v68.f32, 1), v106.val[2], v68, 2), (float32x2_t)0xBF000000BF000000));
    LODWORD(v103.__r_.__value_.__r.__words[1]) = 0;
    v102[0] = (uint64_t *)&v103;
    *(uint64_t *)((char *)sub_223A17B10((float *)(v15 + 64), (int *)&v103, (uint64_t)&unk_2245BA939, v102) + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v106.val[0], v66.f32[0]), v106.val[1], *(float32x2_t *)v66.f32, 1), v106.val[2], v66, 2);
    return;
  }
  v87 = a2;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  *(double *)&v25 = v100;
  v24 = v101;
  *(float32x2_t *)&v13 = v98;
  a13.n128_u64[0] = (unint64_t)v99;
  v26 = 28 * v18;
  do
  {
    v32 = a4 + v21;
    v33 = *(unsigned __int8 *)(a4 + v21 + 36);
    if ((_DWORD)v33 == 255)
    {
      v27 = 3;
LABEL_4:
      *(float32x2x3_t *)(&a8 - 2) = vld3_f32((const float *)v16);
      a9 = *(double *)(v32 + 12);
      a11 = COERCE_DOUBLE(vmla_n_f32(vmla_lane_f32(vmul_n_f32(v28, *(float *)&a9), v29, *(float32x2_t *)&a9, 1), *(float32x2_t *)&a8, *(float *)(v32 + 20)));
      LODWORD(a9) = *(_DWORD *)(v32 + 32);
      a10 = *(double *)(v32 + 24);
      a12.n128_u64[0] = (unint64_t)vmla_n_f32(vmla_lane_f32(vmul_n_f32(v28, *(float *)&a10), v29, *(float32x2_t *)&a10, 1), *(float32x2_t *)&a8, *(float *)&a9);
      v24 = vadd_f32(v24, *(float32x2_t *)&a11);
      a13.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)a13.n128_u64[0], (float32x2_t)a12.n128_u64[0]);
      ++v22;
      v30 = COERCE_DOUBLE(vadd_f32(v25, *(float32x2_t *)&a11));
      v31 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v13, (float32x2_t)a12.n128_u64[0]));
      if (v27 == 2)
      {
        *(double *)&v13 = v31;
        *(double *)&v25 = v30;
        ++v23;
      }
      goto LABEL_6;
    }
    v34 = *(unsigned __int8 *)(a4 + v21 + 36);
    if (v33 >= 0x2A)
    {
      v92 = v13;
      v94 = a13;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_40;
      }
      v34 = *(unsigned __int8 *)(v32 + 36);
      v13 = v92;
      a13 = v94;
    }
    v27 = byte_224693EA5[v33];
    v35 = *(unsigned __int8 *)(a4 + v21 + 37);
    if (v34 == 2 && (_DWORD)v35 != 25)
    {
      v104[0] = *(_BYTE *)(a4 + v21 + 37);
      if ((_DWORD)v35 != 255)
      {
        if (v35 >= 0x1A)
        {
          v102[0] = (uint64_t *)"";
          v102[1] = 0;
          sub_2239B8924("AddVote<", (uint64_t)v102, (std::string *)">() with an invalid label: ", v104);
          if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v85 = &v103;
          else
            v85 = (std::string *)v103.__r_.__value_.__r.__words[0];
          if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
          else
            size = v103.__r_.__value_.__l.__size_;
          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/include/Reconstruction/Common/LabelHistogram.h", 248, (uint64_t)"", 0, (uint64_t)v85, size, (void (*)(void **))sub_22457406C);
          std::string::~string(&v103);
          abort();
        }
        v37 = *(_DWORD *)(a5 + 4 * v35);
        if (v37 == -1)
        {
          v93 = v13;
          v95 = a13;
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/include/Reconstruction/Common/LabelHistogram.h", 251, (uint64_t)"histogram_[label] < std::numeric_limits<CountType>::max()", 57, (uint64_t)"Too many votes for the chosen vote count type causes an overflow.", 65, (void (*)(void **))sub_22457406C))
          {
LABEL_40:
            abort();
          }
          v37 = *(_DWORD *)(a5 + 4 * v35);
          v13 = v93;
          a13 = v95;
        }
        *(_DWORD *)(a5 + 4 * v35) = v37 + 1;
      }
    }
    if (v27 >= 2)
      goto LABEL_4;
LABEL_6:
    v21 += 28;
  }
  while (v26 != v21);
  v98 = (float32x2_t)v13;
  v99 = (float32x2_t)a13.n128_u64[0];
  if (v23 >= 3)
  {
    *(int32x2_t *)v17.f32 = vdup_lane_s32(*(int32x2_t *)&v13, 1);
    v38 = COERCE_DOUBLE(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v13, *(float32x2_t *)&v13), *(float32x2_t *)v17.f32, *(float32x2_t *)&v13, 1));
    if (*(float *)&v38 > 0.000001)
    {
      v17.f32[0] = (float)v23;
      *(float32x2_t *)v17.f32 = vdiv_f32(v25, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 0));
      v88 = v17;
      v100 = *(double *)v17.i64;
      sub_2239B2140(a1, a4, (float *)&v98, 1, (float *)v102, *(double *)v17.i64, v38, a8, a9, a10, a11, a12);
      v98.f32[0] = -*((float *)v102 + 1);
      v98.i32[1] = (__int32)v102[0];
      v40 = *(unsigned int *)(a4 + 4);
      if ((_DWORD)v40)
      {
        v41 = (float32x2_t)vdup_lane_s32((int32x2_t)v98, 1);
        v96 = v98;
        v39.i32[3] = v88.i32[3];
        v42 = (unsigned __int8 *)(a4 + 36);
        v43 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v88.f32, v98), v41, *(float32x2_t *)v88.f32, 1);
        v44 = 0.0;
        while (1)
        {
          v45 = *v42;
          if ((_DWORD)v45 != 255)
          {
            if (v45 >= 0x2A
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_40;
            }
            if (byte_224693EA5[v45] == 2)
            {
              v105 = vld3_f32((const float *)v16);
              v46 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v105.val[0], COERCE_FLOAT(*((_QWORD *)v42 - 3))), v105.val[1], *(float32x2_t *)(v42 - 24), 1), v105.val[2], *((float *)v42 - 4));
              v105.val[0] = vsub_f32(vmla_lane_f32(vmul_f32(v46, v96), v41, v46, 1), v43);
              v44 = v44 + vmul_f32(v105.val[0], v105.val[0]).f32[0];
            }
          }
          v42 += 28;
          if (!--v40)
            goto LABEL_43;
        }
      }
      v44 = 0.0;
LABEL_43:
      v69 = *(_DWORD *)(a1 + 8);
      v39.f32[0] = (float)(a3->i32[0] / v69);
      v39.f32[1] = (float)(a3->i32[1] / v69);
      v39.f32[2] = (float)(a3[1].i32[0] / v69);
      v107 = vld3_f32((const float *)v16);
      v70 = v44 / (float)v23;
      v71.i64[0] = 0x3F0000003F000000;
      v71.i64[1] = 0x3F0000003F000000;
      v72 = vaddq_f32(v39, v71);
      v103.__r_.__value_.__l.__data_ = (std::string::pointer)vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v107.val[0], v72.f32[0]), v107.val[1], *(float32x2_t *)v72.f32, 1), v107.val[2], v72, 2), (float32x2_t)0xBF000000BF000000));
      LODWORD(v103.__r_.__value_.__r.__words[1]) = 0;
      v73 = a1 + 24;
      v74 = (float32x2_t *)&v100;
      v75 = &v98;
      v76 = 1;
      v77 = v23;
      goto LABEL_47;
    }
  }
  v15 = a1;
  v14 = a3;
  a2 = v87;
  if (!v22)
    goto LABEL_41;
  *(int32x2_t *)v17.f32 = vdup_lane_s32((int32x2_t)a13.n128_u64[0], 1);
  v47 = COERCE_DOUBLE(vmla_lane_f32(vmul_f32((float32x2_t)a13.n128_u64[0], (float32x2_t)a13.n128_u64[0]), *(float32x2_t *)v17.f32, (float32x2_t)a13.n128_u64[0], 1));
  if (*(float *)&v47 <= 0.000001)
    goto LABEL_41;
  v17.f32[0] = (float)v22;
  *(float32x2_t *)v17.f32 = vdiv_f32(v24, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 0));
  v89 = v17;
  v101 = *(float32x2_t *)v17.f32;
  sub_2239B2140(a1, a4, (float *)&v99, 0, (float *)v102, *(double *)v17.i64, v47, a8, a9, a10, a11, a12);
  v99.f32[0] = -*((float *)v102 + 1);
  v99.i32[1] = (__int32)v102[0];
  v50 = *(unsigned int *)(a4 + 4);
  if ((_DWORD)v50)
  {
    v51 = v99;
    v52.i64[1] = v89.i64[1];
    v53 = (float32x2_t)vdup_lane_s32((int32x2_t)v99, 1);
    v54 = (_BYTE *)(a4 + 36);
    v55 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.f32, v99), v53, *(float32x2_t *)v89.f32, 1);
    v56 = 0.0;
    v57 = (_BYTE *)(a4 + 36);
    v97 = v99;
    do
    {
      v62 = *v57;
      v57 += 28;
      if ((v62 + 1) >= 0x2Bu)
      {
        v63 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C);
        v51 = v97;
        if (v63)
          goto LABEL_40;
      }
      v58.i32[0] = *(_DWORD *)(v16 + 8);
      v52.i64[0] = *(_QWORD *)v16;
      v59 = v52;
      v59.i32[2] = v58.i32[0];
      v48.i64[0] = *(_QWORD *)(v16 + 12);
      v60 = v48;
      v60.i32[2] = *(_DWORD *)(v16 + 20);
      v49 = (float32x4_t)vzip2q_s32(v59, v60);
      *(float32x2_t *)v60.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v16, *(int32x2_t *)v48.i8), COERCE_FLOAT(*((_QWORD *)v54 - 3))), (float32x2_t)vzip2_s32(*(int32x2_t *)v16, *(int32x2_t *)v48.i8), *(float32x2_t *)(v54 - 24), 1), *(float32x2_t *)v49.f32, *((float *)v54 - 4));
      v61 = vsub_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v60.i8, v51), v53, *(float32x2_t *)v60.i8, 1), v55);
      v56 = v56 + vmul_f32(v61, v61).f32[0];
      v54 = v57;
      --v50;
    }
    while (v50);
    *(_QWORD *)&v78 = vzip1q_s32(v52, v48).u64[0];
    v58.i32[1] = *(_DWORD *)(v16 + 20);
    v79 = (float32x2_t)vtrn2q_s32(v52, v48).u64[0];
    LODWORD(v80) = v79.i32[1];
    v81 = DWORD1(v78);
    v14 = a3;
  }
  else
  {
    v78 = *(_OWORD *)v16;
    v80 = *(_OWORD *)(v16 + 16);
    v81 = HIDWORD(*(_OWORD *)v16);
    v58.i32[0] = vdupq_laneq_s32(*(int32x4_t *)v16, 2).u32[0];
    v79.i32[0] = HIDWORD(*(_QWORD *)v16);
    v58.i32[1] = HIDWORD(*(_QWORD *)(v16 + 16));
    v56 = 0.0;
  }
  v82 = *(_DWORD *)(a1 + 8);
  v49.f32[0] = (float)(v14->i32[0] / v82);
  v49.f32[1] = (float)(v14->i32[1] / v82);
  v70 = v56 / (float)v22;
  v49.f32[2] = (float)(v14[1].i32[0] / v82);
  v83.i64[0] = 0x3F0000003F000000;
  v83.i64[1] = 0x3F0000003F000000;
  DWORD1(v78) = v81;
  v84 = vaddq_f32(v49, v83);
  v79.i32[1] = v80;
  v103.__r_.__value_.__l.__data_ = (std::string::pointer)vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v78, v84.f32[0]), v79, *(float32x2_t *)v84.f32, 1), v58, v84, 2), (float32x2_t)0xBF000000BF000000));
  LODWORD(v103.__r_.__value_.__r.__words[1]) = 0;
  v73 = a1 + 24;
  v74 = &v101;
  v75 = &v99;
  v76 = 0;
  v77 = v22;
LABEL_47:
  sub_223A0AA4C(v73, v76, (int *)&v103, v74, v75, v77, v70);
}

void sub_2239B2A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2239B2A3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _BYTE *a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  size_t v14;
  const char *v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  double v64;
  double v65;
  float32x4_t v66;
  __n128 v67;
  __n128 v68;
  const float *v69;
  float32x4_t v70;
  int v71;
  int v72;
  _QWORD *v73;
  float32x4_t v74;
  float32x4_t v75;
  int v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int v80;
  float32x4_t v81;
  uint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  int v86;
  int v87;
  _QWORD *v88;
  float32x4_t v89;
  int v90;
  int v91;
  float32x4_t v92;
  uint64_t *v93;
  float32x4_t v94;
  float32x4_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  BOOL v101;
  unsigned int v102;
  BOOL v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  BOOL v109;
  BOOL v110;
  BOOL v111;
  BOOL v112;
  BOOL v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  BOOL v117;
  BOOL v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  BOOL v123;
  BOOL v124;
  BOOL v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  _QWORD *v131;
  uint64_t v132;
  const char *__src;
  int v134;
  _BYTE *v135;
  float32x4_t v136;
  float v137;
  float32x4_t v138;
  float32x4_t v139;
  _QWORD v140[3];
  _QWORD v141[3];
  void *__p[6];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _QWORD v146[2];
  __int128 v147;
  __int128 v148;
  const char *v149;
  int v150;
  const char *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD v157[2];
  uint64_t *v158;
  _QWORD **v159;
  _QWORD *v160;
  _QWORD v161[2];
  _QWORD v162[2];
  char v163;
  _QWORD v164[2];
  _QWORD *v165;
  uint64_t **v166;
  char *v167;
  float32x2x3_t v168;
  float32x2x3_t v169;

  if (*(float *)(a2 + 144) == *(float *)a1)
    goto LABEL_92;
  sub_2239B1F58(&v154);
  if (*(int *)v154[7] > 5)
    goto LABEL_92;
  v10 = *((unsigned __int8 *)v154 + 72);
  v11 = sub_22322F254((uint64_t)v154, "OSLogSurrogateAppender", 1, 0);
  v12 = v11;
  v13 = !v10 && v11 == 0;
  if (v13)
    goto LABEL_92;
  v134 = v10;
  *(_QWORD *)&v147 = &v154;
  *((std::chrono::steady_clock::time_point *)&v147 + 1) = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v148 = std::chrono::system_clock::now();
  DWORD2(v148) = 5;
  v149 = "unknown file";
  v150 = 500;
  v152 = 0;
  v153 = 0;
  v151 = "unknown function";
  v132 = (uint64_t)v154;
  if (*((char *)v154 + 39) < 0)
  {
    v15 = (const char *)v154[2];
    v14 = v154[3];
  }
  else
  {
    v14 = *((unsigned __int8 *)v154 + 39);
    v15 = (const char *)(v154 + 2);
  }
  v131 = v154 + 2;
  v135 = a5;
  v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)__p);
    sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
    if (LOBYTE(__p[3]) && SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v17 = (const char *)&xmmword_255788F40;
  else
    v17 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v18 = byte_255788F57;
  else
    v18 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v15;
  __p[0] = os_log_create(v17, v15);
  v19 = &__p[1];
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v18 >= 0x17)
  {
    v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v20 = v18 | 7;
    v21 = v20 + 1;
    v19 = (void **)operator new(v20 + 1);
    __p[2] = (void *)v18;
    __p[3] = (void *)(v21 | 0x8000000000000000);
    __p[1] = v19;
    goto LABEL_24;
  }
  HIBYTE(__p[3]) = v18;
  if (v18)
LABEL_24:
    memmove(v19, v17, v18);
  *((_BYTE *)v19 + v18) = 0;
  LOBYTE(__p[4]) = 1;
  v22 = &__p[5];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  a5 = v135;
  if (v14 >= 0x17)
  {
    v23 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v23 = v14 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    *(_QWORD *)&v143 = v14;
    *((_QWORD *)&v143 + 1) = v24 | 0x8000000000000000;
    __p[5] = v22;
  }
  else
  {
    HIBYTE(v143) = v14;
    if (!v14)
      goto LABEL_33;
  }
  memmove(v22, __src, v14);
LABEL_33:
  *((_BYTE *)v22 + v14) = 0;
  LOBYTE(v144) = 1;
  v25 = __p[0];
  if (SHIBYTE(v143) < 0)
    operator delete(__p[5]);
  if (LOBYTE(__p[4]) && SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  if (__p[0])
    os_release(__p[0]);
  if (v12 && *(_QWORD *)(v12 + 24))
  {
    v26 = _os_log_pack_size();
    v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
    v28 = (std::__shared_weak_count *)operator new();
    v29 = v28;
    v28->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v28->__shared_weak_owners_ = 0;
    v28[1].__vftable = v27;
    __p[0] = v27;
    __p[1] = v27;
    __p[2] = v28;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    memset(&__p[3], 0, 24);
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v29);
    }
    v33 = __p[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v34 = operator new();
    v35 = *(unsigned __int8 *)(v132 + 39);
    v36 = v131;
    if ((v35 & 0x80u) != 0)
    {
      v36 = *(_QWORD **)(v132 + 16);
      v35 = *(_QWORD *)(v132 + 24);
    }
    *(_QWORD *)v34 = v33;
    *(_OWORD *)(v34 + 8) = *(_OWORD *)&__p[1];
    __p[1] = 0;
    __p[2] = 0;
    *(_OWORD *)(v34 + 24) = *(_OWORD *)&__p[3];
    *(_OWORD *)&__p[3] = 0uLL;
    *(_QWORD *)(v34 + 40) = v36;
    *(_QWORD *)(v34 + 48) = v35;
    *(_BYTE *)(v34 + 56) = 16;
    v158 = 0;
    v165 = (_QWORD *)v34;
    (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v165);
    v37 = v165;
    v165 = 0;
    if (v37)
    {
      v38 = (std::__shared_weak_count *)v37[4];
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = (std::__shared_weak_count *)v37[2];
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      MEMORY[0x227684CE8](v37, 0x10F0C40B62ED6C6);
      v44 = v158;
      v158 = 0;
      if (v44)
      {
        v45 = (std::__shared_weak_count *)v44[4];
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = (std::__shared_weak_count *)v44[2];
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
      }
    }
    v51 = (std::__shared_weak_count *)__p[4];
    v52 = v134;
    if (__p[4])
    {
      v53 = (unint64_t *)((char *)__p[4] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v55 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v56 = (unint64_t *)((char *)__p[2] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    LOWORD(__p[0]) = 0;
    v58 = (void *)_os_log_send_and_compose_impl();
    v52 = v134;
    if (v58)
      free(v58);
  }
  if (v52)
  {
    sub_22322C138((uint64_t)&v147, "The voxel size of an input octree and the spatial subdivision do not match.");
    sub_223182C08((uint64_t)&v147);
  }
  sub_223182C08((uint64_t)&v147);
  v59 = v153;
  if (v153)
  {
    v60 = (unint64_t *)&v153->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_92:
  v147 = 0u;
  v148 = 0u;
  LODWORD(v149) = 728306192;
  kdebug_trace();
  v69 = (const float *)(a1 + 1656);
  v146[0] = 0;
  v70 = 0uLL;
  v144 = 0u;
  v145 = 0u;
  v143 = 0u;
  memset(__p, 0, sizeof(__p));
  if (a4)
  {
    v141[0] = a1;
    v141[1] = a2;
    v141[2] = __p;
    v157[0] = a1;
    v157[1] = a2;
    v154 = v157;
    v155 = (_QWORD *)a2;
    v156 = v141;
    v162[0] = a2;
    v162[1] = a3;
    v161[0] = a2 + 16;
    v161[1] = &v154;
    v158 = (uint64_t *)(a2 + 16);
    v159 = (_QWORD **)v161;
    v160 = v162;
    v164[0] = a2;
    v164[1] = a3;
    v163 = 1;
    v71 = *(_DWORD *)(a2 + 192);
    if ((v71 & 0x80000000) == 0)
    {
      v72 = *(_DWORD *)(a2 + 196);
      v165 = v164;
      v166 = &v158;
      v167 = &v163;
      sub_2239B8FF0(a2 + 16, v72, v71, 0, &v165, 0.0, v62, v63, v64, v65, v66, v67, v68);
    }
    v73 = *(_QWORD **)(a1 + 1632);
    if (v73 != (_QWORD *)(a1 + 1640))
    {
      v70.f32[0] = (float)(*(float *)a1 * (float)*(int *)(a1 + 8)) * 0.5;
      v74 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 0);
      v75.i64[0] = 0x3F0000003F000000;
      v75.i64[1] = 0x3F0000003F000000;
      v136 = v74;
      do
      {
        v70.i64[0] = *(_QWORD *)((char *)v73 + 28);
        *(float32x2_t *)v63.f32 = vcvt_f32_s32(*(int32x2_t *)v70.f32);
        v76 = *((_DWORD *)v73 + 9);
        v63.f32[2] = (float)v76;
        v63 = vaddq_f32(v63, v75);
        v77 = vmulq_n_f32(v63, COERCE_FLOAT(*(_QWORD *)(a2 + 144)));
        v63.i64[0] = *(_QWORD *)(a3 + 12);
        v63.i32[2] = *(_DWORD *)(a3 + 20);
        v78 = (int8x16_t)vsubq_f32(vsubq_f32(v77, v74), v63);
        if (*(float *)v78.i32 <= 0.0)
        {
          v63 = (float32x4_t)vextq_s8(v78, v78, 8uLL);
          v78.i32[0] = v63.i32[0];
          *(int32x2_t *)v78.i8 = vcgtz_f32(*(float32x2_t *)v78.i8);
          if ((v78.i8[4] & 1) == 0 && (v78.i8[0] & 1) == 0)
          {
            v63.i64[0] = *(_QWORD *)a3;
            v63.i32[2] = *(_DWORD *)(a3 + 8);
            v79 = (int8x16_t)vsubq_f32(v63, vaddq_f32(v74, v77));
            if (*(float *)v79.i32 <= 0.0)
            {
              v63 = (float32x4_t)vextq_s8(v79, v79, 8uLL);
              v79.i32[0] = v63.i32[0];
              *(int8x8_t *)v79.i8 = vmvn_s8((int8x8_t)vcgtz_f32(*(float32x2_t *)v79.i8));
              if ((v79.i8[4] & 1) != 0 && (v79.i8[0] & 1) != 0)
              {
                v138 = v77;
                v80 = *(_DWORD *)(a1 + 8);
                v70.f32[0] = (float)(v70.i32[0] / v80);
                v70.f32[1] = (float)(v70.i32[1] / v80);
                v168 = vld3_f32(v69);
                v70.f32[2] = (float)(v76 / v80);
                v81 = vaddq_f32(v70, v75);
                v165 = (_QWORD *)vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v168.val[0], v81.f32[0]), v168.val[1], *(float32x2_t *)v81.f32, 1), v168.val[2], v81, 2), (float32x2_t)0xBF000000BF000000));
                LODWORD(v166) = 0;
                v158 = (uint64_t *)&v165;
                v82 = sub_223A17B10((float *)(a1 + 64), (int *)&v165, (uint64_t)&unk_2245BA939, &v158);
                v74 = v136;
                *(uint64_t *)((char *)v82 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v168.val[0], v138.f32[0]), v168.val[1], *(float32x2_t *)v138.f32, 1), v168.val[2], v138, 2);
                v75.i64[0] = 0x3F0000003F000000;
                v75.i64[1] = 0x3F0000003F000000;
              }
            }
          }
        }
        v83 = (_QWORD *)v73[1];
        if (v83)
        {
          do
          {
            v84 = v83;
            v83 = (_QWORD *)*v83;
          }
          while (v83);
        }
        else
        {
          do
          {
            v84 = (_QWORD *)v73[2];
            v13 = *v84 == (_QWORD)v73;
            v73 = v84;
          }
          while (!v13);
        }
        v73 = v84;
      }
      while (v84 != (_QWORD *)(a1 + 1640));
    }
  }
  else
  {
    v140[0] = a1;
    v140[1] = a2;
    v140[2] = __p;
    v154 = (_QWORD *)a2;
    v155 = v140;
    v158 = (uint64_t *)(a2 + 16);
    v159 = &v154;
    LOBYTE(v162[0]) = 1;
    v85 = *(_DWORD *)(a2 + 192);
    if ((v85 & 0x80000000) == 0)
    {
      v86 = *(_DWORD *)(a2 + 196);
      v165 = v164;
      v166 = &v158;
      v167 = (char *)v162;
      sub_2239E1350(a2 + 16, v86, v85, (uint64_t)&v165, 0.0, v62, *(double *)v63.i64, v64, v65, *(double *)v66.i64, v67, v68);
      v85 = *(_DWORD *)(a2 + 192);
    }
    v154 = (_QWORD *)a1;
    v155 = (_QWORD *)a2;
    v164[0] = &v154;
    v158 = (uint64_t *)(a2 + 16);
    v159 = (_QWORD **)v164;
    LOBYTE(v161[0]) = 1;
    if ((v85 & 0x80000000) == 0)
    {
      v87 = *(_DWORD *)(a2 + 196);
      v165 = v162;
      v166 = &v158;
      v167 = (char *)v161;
      sub_2239ED67C((uint64_t *)(a2 + 16), v87, v85, (uint64_t)&v165, *(double *)v70.i64, v62, *(double *)v63.i64, v64, v65, v66, (float32x4_t)v67);
    }
    v88 = *(_QWORD **)(a1 + 1632);
    if (v88 != (_QWORD *)(a1 + 1640))
    {
      v89.i64[0] = 0x3F0000003F000000;
      v89.i64[1] = 0x3F0000003F000000;
      do
      {
        v90 = *(_DWORD *)(a1 + 8);
        v70.i64[0] = *(_QWORD *)((char *)v88 + 28);
        v139 = v70;
        v91 = *((_DWORD *)v88 + 9);
        v70.f32[0] = (float)(v70.i32[0] / v90);
        v70.f32[1] = (float)(v70.i32[1] / v90);
        v70.f32[2] = (float)(v91 / v90);
        v92 = vaddq_f32(v70, v89);
        v169 = vld3_f32(v69);
        v165 = (_QWORD *)vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v169.val[0], v92.f32[0]), v169.val[1], *(float32x2_t *)v92.f32, 1), v169.val[2], v92, 2), (float32x2_t)0xBF000000BF000000));
        LODWORD(v166) = 0;
        LODWORD(v137) = *(_QWORD *)(a2 + 144);
        v158 = (uint64_t *)&v165;
        v93 = sub_223A17B10((float *)(a1 + 64), (int *)&v165, (uint64_t)&unk_2245BA939, &v158);
        v94.i32[3] = v139.i32[3];
        *(float32x2_t *)v94.f32 = vcvt_f32_s32(*(int32x2_t *)v139.f32);
        v94.f32[2] = (float)v91;
        v95.i64[0] = 0x3F0000003F000000;
        v95.i64[1] = 0x3F0000003F000000;
        v70 = vmulq_n_f32(vaddq_f32(v94, v95), v137);
        *(uint64_t *)((char *)v93 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v169.val[0], v70.f32[0]), v169.val[1], *(float32x2_t *)v70.f32, 1), v169.val[2], v70, 2);
        v96 = (_QWORD *)v88[1];
        v89.i64[0] = 0x3F0000003F000000;
        v89.i64[1] = 0x3F0000003F000000;
        if (v96)
        {
          do
          {
            v97 = v96;
            v96 = (_QWORD *)*v96;
          }
          while (v96);
        }
        else
        {
          do
          {
            v97 = (_QWORD *)v88[2];
            v13 = *v97 == (_QWORD)v88;
            v88 = v97;
          }
          while (!v13);
        }
        v88 = v97;
      }
      while (v97 != (_QWORD *)(a1 + 1640));
    }
  }
  v98 = __p[0];
  if (LODWORD(__p[0]) <= HIDWORD(__p[0]))
    v98 = HIDWORD(__p[0]);
  v99 = 4 * (LODWORD(__p[0]) < HIDWORD(__p[0]));
  if (LODWORD(__p[0]) >= HIDWORD(__p[0]))
    v100 = __p;
  else
    v100 = __p + 4;
  v101 = v98 >= LODWORD(__p[1]);
  if (v98 <= LODWORD(__p[1]))
    v98 = __p[1];
  if (v101)
  {
    v102 = v100;
  }
  else
  {
    v99 = 8;
    v102 = &__p[1];
  }
  v103 = v98 >= HIDWORD(__p[1]);
  if (v98 <= HIDWORD(__p[1]))
    v98 = HIDWORD(__p[1]);
  if (!v103)
  {
    v99 = 12;
    v102 = (unint64_t)__p | 0xC;
  }
  v104 = v98 >= LODWORD(__p[2]);
  if (v98 <= LODWORD(__p[2]))
    v98 = __p[2];
  if (!v104)
  {
    v99 = 16;
    v102 = &__p[2];
  }
  v105 = v98 >= HIDWORD(__p[2]);
  if (v98 <= HIDWORD(__p[2]))
    v98 = HIDWORD(__p[2]);
  if (!v105)
  {
    v99 = 20;
    v102 = &__p[2] + 4;
  }
  v106 = v98 >= LODWORD(__p[3]);
  if (v98 <= LODWORD(__p[3]))
    v98 = __p[3];
  if (!v106)
  {
    v99 = 24;
    v102 = &__p[3];
  }
  v107 = v98 >= HIDWORD(__p[3]);
  if (v98 <= HIDWORD(__p[3]))
    v98 = HIDWORD(__p[3]);
  if (!v107)
  {
    v99 = 28;
    v102 = &__p[3] + 4;
  }
  v108 = v98 >= LODWORD(__p[4]);
  if (v98 <= LODWORD(__p[4]))
    v98 = __p[4];
  if (!v108)
  {
    v99 = 32;
    v102 = &__p[4];
  }
  v109 = v98 >= HIDWORD(__p[4]);
  if (v98 <= HIDWORD(__p[4]))
    v98 = HIDWORD(__p[4]);
  if (!v109)
  {
    v99 = 36;
    v102 = &__p[4] + 4;
  }
  v110 = v98 >= LODWORD(__p[5]);
  if (v98 <= LODWORD(__p[5]))
    v98 = __p[5];
  if (!v110)
  {
    v99 = 40;
    v102 = &__p[5];
  }
  v111 = v98 >= HIDWORD(__p[5]);
  if (v98 <= HIDWORD(__p[5]))
    v98 = HIDWORD(__p[5]);
  if (!v111)
  {
    v99 = 44;
    v102 = &__p[5] + 4;
  }
  v112 = v98 >= v143;
  if (v98 <= v143)
    v98 = v143;
  if (!v112)
  {
    v99 = 48;
    v102 = &v143;
  }
  v113 = v98 >= DWORD1(v143);
  if (v98 <= DWORD1(v143))
    v98 = DWORD1(v143);
  if (!v113)
  {
    v99 = 52;
    v102 = &v143 + 4;
  }
  v114 = v98 >= DWORD2(v143);
  if (v98 <= DWORD2(v143))
    v98 = DWORD2(v143);
  if (!v114)
  {
    v99 = 56;
    v102 = &v143 + 8;
  }
  v115 = v98 >= HIDWORD(v143);
  if (v98 <= HIDWORD(v143))
    v98 = HIDWORD(v143);
  if (!v115)
  {
    v99 = 60;
    v102 = &v143 + 12;
  }
  v116 = v98 >= v144;
  if (v98 <= v144)
    v98 = v144;
  if (!v116)
  {
    v99 = 64;
    v102 = &v144;
  }
  v117 = v98 >= DWORD1(v144);
  if (v98 <= DWORD1(v144))
    v98 = DWORD1(v144);
  if (!v117)
  {
    v99 = 68;
    v102 = &v144 + 4;
  }
  v118 = v98 >= DWORD2(v144);
  if (v98 <= DWORD2(v144))
    v98 = DWORD2(v144);
  if (!v118)
  {
    v99 = 72;
    v102 = &v144 + 8;
  }
  v119 = v98 >= HIDWORD(v144);
  if (v98 <= HIDWORD(v144))
    v98 = HIDWORD(v144);
  if (!v119)
  {
    v99 = 76;
    v102 = &v144 + 12;
  }
  v120 = v98 >= v145;
  if (v98 <= v145)
    v98 = v145;
  if (!v120)
  {
    v99 = 80;
    v102 = &v145;
  }
  v121 = v98 >= DWORD1(v145);
  if (v98 <= DWORD1(v145))
    v98 = DWORD1(v145);
  if (!v121)
  {
    v99 = 84;
    v102 = &v145 + 4;
  }
  v122 = v98 >= DWORD2(v145);
  if (v98 <= DWORD2(v145))
    v98 = DWORD2(v145);
  if (!v122)
  {
    v99 = 88;
    v102 = &v145 + 8;
  }
  v123 = v98 >= HIDWORD(v145);
  if (v98 <= HIDWORD(v145))
    v98 = HIDWORD(v145);
  if (!v123)
  {
    v99 = 92;
    v102 = &v145 + 12;
  }
  v124 = v98 >= LODWORD(v146[0]);
  if (v98 <= LODWORD(v146[0]))
    v98 = v146[0];
  if (!v124)
  {
    v99 = 96;
    v102 = v146;
  }
  v125 = v98 >= HIDWORD(v146[0]);
  v126 = 100;
  if (v125)
    v126 = v99;
  v127 = *(_DWORD *)((char *)__p + v126);
  if (v125)
    v128 = v102;
  else
    v128 = v146 + 4;
  v129 = (v128 - __p) >> 2;
  if (!v127)
    LOBYTE(v129) = -1;
  *a5 = v129;
  return kdebug_trace();
}

void sub_2239B3810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_2239B3850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_22319A054((uint64_t *)(v39 - 144));
  sub_22319A054((uint64_t *)(v39 - 224));
  sub_223199DE8((uint64_t)&a25);
  sub_223182DAC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_2239B3884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  MEMORY[0x227684CE8](v39, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_2239B38B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223182DAC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_2239B38CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_223182DAC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_2239B38E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a32 && a31 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_2239B3928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_2231874DC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_2239B3944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_2231874DC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_2239B3958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_2231874DC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

BOOL sub_2239B396C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _BYTE *a5)
{
  int32x4_t v10;
  int32x4_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float32x2_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t *v19;
  float32x2_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  _BOOL8 v25;

  kdebug_trace();
  if (*(_BYTE *)(a1 + 12))
  {
    sub_223A0A908((_QWORD *)(a1 + 24));
    sub_2239B2A3C(a1, a2, a3, a4, a5);
    sub_223A0CD64((int8x8_t *)(a1 + 24), (_QWORD *)(a1 + 328), *(float *)a1 * (float)*(int *)(a1 + 8));
    if (a4)
    {
      v17 = *(_QWORD *)(a1 + 368);
      v18 = *(_QWORD *)(a1 + 376);
      if (v17 != v18)
      {
        v19 = (int32x2_t *)(a1 + 352);
        do
        {
          v11.i32[0] = *(_DWORD *)(a3 + 8);
          LODWORD(v13) = *(_DWORD *)(a1 + 360);
          v20 = (float32x2_t)vdup_lane_s32(*v19, 1);
          v16.i32[0] = *(_DWORD *)(a3 + 20);
          v21 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a3, (float32x2_t)*v19), v20, *(float32x2_t *)a3, 1), *(float32x2_t *)&v13, *(float32x2_t *)v11.i8).f32[0];
          v22 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a3 + 12), (float32x2_t)*v19), v20, *(float32x2_t *)(a3 + 12), 1), *(float32x2_t *)&v13, v16).f32[0];
          if (v22 >= v21)
            v23 = v21;
          else
            v23 = v22;
          *(_BYTE *)(v17 + 148) = 1;
          *(float *)(v17 + 144) = v23;
          if (v21 >= v22)
            v24 = v21;
          else
            v24 = v22;
          *(float *)(v17 + 152) = v24;
          *(_BYTE *)(v17 + 156) = 1;
          v17 += 160;
        }
        while (v17 != v18);
      }
    }
    else
    {
      sub_2239AFD90((float *)a1, a2, v10, v11, v12, v13, v14, v15, v16);
    }
    v25 = *(_QWORD *)(a1 + 368) != *(_QWORD *)(a1 + 376);
  }
  else
  {
    v25 = 0;
  }
  kdebug_trace();
  return v25;
}

void sub_2239B3AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231874DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2239B3B08(uint64_t a1, int a2, int a3, uint64_t a4, double a5, float32x4_t a6)
{
  uint64_t v9;
  float32x4_t v10;
  unsigned int v11;
  uint64_t result;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  char v32[4];
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;
  char v60;
  uint64_t v61;
  int v62;
  char v63;
  char v64;
  uint64_t v65;
  int v66;
  char v67;
  char v68;
  uint64_t v69;
  int v70;
  char v71;
  char v72;
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  uint64_t v77;
  int v78;
  char v79;
  char v80;
  uint64_t v81;
  int v82;
  char v83;
  char v84;
  uint64_t v85;
  int v86;
  char v87;
  char v88;
  int v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  int v94;
  char v95;
  char v96;
  int v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  int v102;
  char v103;
  char v104;
  int v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  int v110;
  char v111;
  char v112;
  int v113;
  uint64_t v114;
  char v115;
  char v116;
  uint64_t v117;
  int v118;
  char v119;
  char v120;
  int v121;
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  int v126;
  char v127;
  char v128;
  int v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t v133;
  int v134;
  char v135;
  char v136;
  int v137;
  uint64_t v138;
  char v139;

  v9 = *(_QWORD *)(a1 + 184);
  v32[0] = 1;
  v10.i64[0] = -1;
  v10.i64[1] = -1;
  v33 = -1;
  v34 = -1;
  v35 = 8;
  v11 = a3 & 0xCFFFFFFF;
  v36 = 1;
  v37 = -1;
  v38 = -1;
  v39 = 8;
  v40 = 1;
  v41 = -1;
  v42 = -1;
  v43 = 8;
  v44 = 1;
  v45 = -1;
  v46 = -1;
  v47 = 8;
  v48 = 1;
  v49 = -1;
  v50 = -1;
  v51 = 8;
  v52 = 1;
  v53 = -1;
  v54 = -1;
  v55 = 8;
  v56 = 1;
  v57 = -1;
  v58 = -1;
  v59 = 8;
  v60 = 1;
  v61 = -1;
  v62 = -1;
  v63 = 8;
  v64 = 1;
  v65 = -1;
  v66 = -1;
  v67 = 8;
  v68 = 1;
  v69 = -1;
  v70 = -1;
  v71 = 8;
  v72 = 1;
  v73 = -1;
  v74 = -1;
  v75 = 8;
  v76 = 1;
  v77 = -1;
  v78 = -1;
  v79 = 8;
  v80 = 1;
  v81 = -1;
  v82 = -1;
  v83 = 8;
  v84 = 1;
  v85 = -1;
  v86 = -1;
  v87 = 8;
  v88 = 1;
  v89 = -1;
  v90 = -1;
  v91 = 8;
  v92 = 1;
  v93 = -1;
  v94 = -1;
  v95 = 8;
  v96 = 1;
  v97 = -1;
  v98 = -1;
  v99 = 8;
  v100 = 1;
  v101 = -1;
  v102 = -1;
  v103 = 8;
  v104 = 1;
  v105 = -1;
  v106 = -1;
  v107 = 8;
  v108 = 1;
  v109 = -1;
  v110 = -1;
  v111 = 8;
  v112 = 1;
  v113 = -1;
  v114 = -1;
  v115 = 8;
  v116 = 1;
  v117 = -1;
  v118 = -1;
  v119 = 8;
  v120 = 1;
  v121 = -1;
  v122 = -1;
  v123 = 8;
  v124 = 1;
  v125 = -1;
  v126 = -1;
  v127 = 8;
  v128 = 1;
  v129 = -1;
  v130 = -1;
  v131 = 8;
  v132 = 1;
  v133 = -1;
  v134 = -1;
  v135 = 8;
  v136 = 1;
  v137 = -1;
  v138 = -1;
  v139 = 8;
  result = sub_2239B40A8(a4, a2, 0, *(_DWORD *)(v9 + 4488 * (a3 & 0xCFFFFFFF) + 64), (uint64_t)v32, v10, a6);
  if (a2 && (_DWORD)result != 3)
  {
    v15 = *(_QWORD *)(a1 + 184);
    v16 = *(_DWORD *)(v15 + 4488 * v11 + 24);
    v17 = (a2 - 1);
    if ((_DWORD)v17)
    {
      if ((v16 & 0x80000000) == 0)
      {
        result = sub_2239B3B08(a1, v17);
        v15 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v15 + 4488 * v11 + 28) & 0x80000000) == 0)
      {
        result = sub_2239B3B08(a1, v17);
        v15 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v15 + 4488 * v11 + 32) & 0x80000000) == 0)
      {
        result = sub_2239B3B08(a1, v17);
        v15 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v15 + 4488 * v11 + 36) & 0x80000000) == 0)
      {
        result = sub_2239B3B08(a1, v17);
        v15 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v15 + 4488 * v11 + 40) & 0x80000000) == 0)
      {
        result = sub_2239B3B08(a1, v17);
        v15 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v15 + 4488 * v11 + 44) & 0x80000000) == 0)
      {
        result = sub_2239B3B08(a1, v17);
        v15 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v15 + 4488 * v11 + 48) & 0x80000000) == 0)
      {
        result = sub_2239B3B08(a1, v17);
        v15 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v15 + 4488 * v11 + 52) & 0x80000000) == 0)
        return sub_2239B3B08(a1, v17);
    }
    else
    {
      if ((v16 & 0x80000000) == 0)
        result = sub_2239B40A8(a4, 0, v16, v16 >> 30 == 0, v15 + 4488 * v11 + 68, v13, v14);
      v18 = *(_QWORD *)(a1 + 184);
      v19 = *(_DWORD *)(v18 + 4488 * v11 + 28);
      if ((v19 & 0x80000000) == 0)
        result = sub_2239B40A8(a4, 0, v19, v19 >> 30 == 0, v18 + 4488 * v11 + 608, v13, v14);
      v20 = *(_QWORD *)(a1 + 184);
      v21 = *(_DWORD *)(v20 + 4488 * v11 + 32);
      if ((v21 & 0x80000000) == 0)
        result = sub_2239B40A8(a4, 0, v21, v21 >> 30 == 0, v20 + 4488 * v11 + 1148, v13, v14);
      v22 = *(_QWORD *)(a1 + 184);
      v23 = *(_DWORD *)(v22 + 4488 * v11 + 36);
      if ((v23 & 0x80000000) == 0)
        result = sub_2239B40A8(a4, 0, v23, v23 >> 30 == 0, v22 + 4488 * v11 + 1688, v13, v14);
      v24 = *(_QWORD *)(a1 + 184);
      v25 = *(_DWORD *)(v24 + 4488 * v11 + 40);
      if ((v25 & 0x80000000) == 0)
        result = sub_2239B40A8(a4, 0, v25, v25 >> 30 == 0, v24 + 4488 * v11 + 2228, v13, v14);
      v26 = *(_QWORD *)(a1 + 184);
      v27 = *(_DWORD *)(v26 + 4488 * v11 + 44);
      if ((v27 & 0x80000000) == 0)
        result = sub_2239B40A8(a4, 0, v27, v27 >> 30 == 0, v26 + 4488 * v11 + 2768, v13, v14);
      v28 = *(_QWORD *)(a1 + 184);
      v29 = *(_DWORD *)(v28 + 4488 * v11 + 48);
      if ((v29 & 0x80000000) == 0)
        result = sub_2239B40A8(a4, 0, v29, v29 >> 30 == 0, v28 + 4488 * v11 + 3308, v13, v14);
      v30 = *(_QWORD *)(a1 + 184);
      v31 = *(_DWORD *)(v30 + 4488 * v11 + 52);
      if ((v31 & 0x80000000) == 0)
        return sub_2239B40A8(a4, 0, v31, v31 >> 30 == 0, v30 + 4488 * v11 + 3848, v13, v14);
    }
  }
  return result;
}

uint64_t sub_2239B40A8(uint64_t a1, int a2, unsigned int a3, int a4, uint64_t a5, float32x4_t a6, float32x4_t a7)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  float32x4_t v482;
  float32x4_t v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  float32x4_t v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  float32x4_t v536;
  float32x4_t v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  float32x4_t v542;
  float32x4_t v543;
  float32x4_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  float32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  float32x4_t v554;
  float32x4_t v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  float32x4_t v596;
  float32x4_t v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  float32x4_t v644;
  float32x4_t v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  float32x4_t v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  float32x4_t v680;
  float32x4_t v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  float32x4_t v692;
  float32x4_t v693;
  float32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  float32x4_t v698;
  float32x4_t v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  float32x4_t v703;
  float32x4_t v704;
  float32x4_t v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  float32x4_t v710;
  float32x4_t v711;
  float32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  float32x4_t v722;
  float32x4_t v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  float32x4_t v728;
  float32x4_t v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float32x4_t v733;
  float32x4_t v734;
  float32x4_t v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  float32x4_t v741;
  float32x4_t v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  float32x4_t v752;
  float32x4_t v753;
  float32x4_t v754;
  float32x4_t v755;
  float32x4_t v756;
  float32x4_t v757;
  float32x4_t v758;
  float32x4_t v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  float32x4_t v765;
  float32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  float32x4_t v770;
  float32x4_t v771;
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  float32x4_t v776;
  float32x4_t v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float32x4_t v781;
  float32x4_t v782;
  float32x4_t v783;
  float32x4_t v784;
  float32x4_t v785;
  float32x4_t v786;
  float32x4_t v787;
  float32x4_t v788;
  float32x4_t v789;
  float32x4_t v790;
  float32x4_t v791;
  float32x4_t v792;
  float32x4_t v793;
  float32x4_t v794;
  float32x4_t v795;
  float32x4_t v796;
  float32x4_t v797;
  float32x4_t v798;
  float32x4_t v799;
  float32x4_t v800;
  float32x4_t v801;
  float32x4_t v802;
  float32x4_t v803;
  float32x4_t v804;
  float32x4_t v805;
  float32x4_t v806;
  float32x4_t v807;
  float32x4_t v808;
  float32x4_t v809;
  float32x4_t v810;
  float32x4_t v811;
  float32x4_t v812;
  float32x4_t v813;
  float32x4_t v814;
  float32x4_t v815;
  float32x4_t v816;
  float32x4_t v817;
  float32x4_t v818;
  float32x4_t v819;
  float32x4_t v820;
  float32x4_t v821;
  float32x4_t v822;
  float32x4_t v823;
  float32x4_t v824;
  float32x4_t v825;
  float32x4_t v826;
  float32x4_t v827;
  float32x4_t v828;
  float32x4_t v829;
  float32x4_t v830;
  float32x4_t v831;
  float32x4_t v832;
  float32x4_t v833;
  float32x4_t v834;
  float32x4_t v835;
  float32x4_t v836;
  float32x4_t v837;
  float32x4_t v838;
  float32x4_t v839;
  float32x4_t v840;
  float32x4_t v841;
  float32x4_t v842;
  float32x4_t v843;
  float32x4_t v844;
  float32x4_t v845;
  float32x4_t v846;
  float32x4_t v847;
  float32x4_t v848;
  float32x4_t v849;
  float32x4_t v850;
  float32x4_t v851;
  float32x4_t v852;
  float32x4_t v853;
  float32x4_t v854;
  float32x4_t v855;
  float32x4_t v856;
  float32x4_t v857;
  float32x4_t v858;
  float32x4_t v859;
  float32x4_t v860;
  float32x4_t v861;
  float32x4_t v862;
  float32x4_t v863;
  float32x4_t v864;
  float32x4_t v865;
  float32x4_t v866;
  float32x4_t v867;
  float32x4_t v868;
  float32x4_t v869;
  float32x4_t v870;
  float32x4_t v871;
  float32x4_t v872;
  float32x4_t v873;
  float32x4_t v874;
  float32x4_t v875;
  float32x4_t v876;
  float32x4_t v877;
  float32x4_t v878;
  float32x4_t v879;
  float32x4_t v880;
  float32x4_t v881;
  float32x4_t v882;
  float32x4_t v883;
  float32x4_t v884;
  float32x4_t v885;
  float32x4_t v886;
  float32x4_t v887;
  float32x4_t v888;
  float32x4_t v889;
  float32x4_t v890;
  float32x4_t v891;
  float32x4_t v892;
  float32x4_t v893;
  float32x4_t v894;
  float32x4_t v895;
  float32x4_t v896;
  float32x4_t v897;
  float32x4_t v898;
  float32x4_t v899;
  float32x4_t v900;
  float32x4_t v901;
  float32x4_t v902;
  float32x4_t v903;
  float32x4_t v904;
  float32x4_t v905;
  float32x4_t v906;
  float32x4_t v907;
  float32x4_t v908;
  float32x4_t v909;
  float32x4_t v910;
  float32x4_t v911;
  float32x4_t v912;
  float32x4_t v913;
  float32x4_t v914;
  float32x4_t v915;
  float32x4_t v916;
  float32x4_t v917;
  float32x4_t v918;
  float32x4_t v919;
  float32x4_t v920;
  float32x4_t v921;
  float32x4_t v922;
  float32x4_t v923;
  float32x4_t v924;
  float32x4_t v925;
  float32x4_t v926;
  float32x4_t v927;
  float32x4_t v928;
  float32x4_t v929;
  float32x4_t v930;
  float32x4_t v931;
  float32x4_t v932;
  float32x4_t v933;
  float32x4_t v934;
  float32x4_t v935;
  float32x4_t v936;
  float32x4_t v937;
  float32x4_t v938;
  float32x4_t v939;
  float32x4_t v940;
  float32x4_t v941;
  float32x4_t v942;
  float32x4_t v943;
  float32x4_t v944;
  float32x4_t v945;
  float32x4_t v946;
  float32x4_t v947;
  float32x4_t v948;
  float32x4_t v949;
  float32x4_t v950;
  float32x4_t v951;
  float32x4_t v952;
  float32x4_t v953;
  float32x4_t v954;
  float32x4_t v955;
  float32x4_t v956;
  float32x4_t v957;
  float32x4_t v958;
  float32x4_t v959;
  float32x4_t v960;
  float32x4_t v961;
  float32x4_t v962;
  float32x4_t v963;
  float32x4_t v964;
  float32x4_t v965;
  float32x4_t v966;
  float32x4_t v967;
  float32x4_t v968;
  float32x4_t v969;
  float32x4_t v970;
  float32x4_t v971;
  float32x4_t v972;
  float32x4_t v973;
  float32x4_t v974;
  float32x4_t v975;
  float32x4_t v976;
  float32x4_t v977;
  float32x4_t v978;
  float32x4_t v979;
  float32x4_t v980;
  float32x4_t v981;
  float32x4_t v982;
  float32x4_t v983;
  float32x4_t v984;
  float32x4_t v985;
  float32x4_t v986;
  float32x4_t v987;
  float32x4_t v988;
  float32x4_t v989;
  float32x4_t v990;
  float32x4_t v991;
  float32x4_t v992;
  float32x4_t v993;
  float32x4_t v994;
  float32x4_t v995;
  float32x4_t v996;
  float32x4_t v997;
  float32x4_t v998;
  float32x4_t v999;
  float32x4_t v1000;
  float32x4_t v1001;
  float32x4_t v1002;
  float32x4_t v1003;
  float32x4_t v1004;
  float32x4_t v1005;
  float32x4_t v1006;
  float32x4_t v1007;
  float32x4_t v1008;
  float32x4_t v1009;
  float32x4_t v1010;
  float32x4_t v1011;
  float32x4_t v1012;
  float32x4_t v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  float32x4_t v1016;
  float32x4_t v1017;
  float32x4_t v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  float32x4_t v1022;
  float32x4_t v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  float32x4_t v1028;
  float32x4_t v1029;
  float32x4_t v1030;
  float32x4_t v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  float32x4_t v1034;
  float32x4_t v1035;
  float32x4_t v1036;
  _QWORD v1037[5];
  char v1038;

  if (!a4)
    return 3;
  if (a2)
    return 2;
  if ((a3 & 0x80000000) != 0)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 417, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index) || kVisitUnknownVoxels", 68, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v10 = *(_QWORD **)(a1 + 8);
      v1038 = 0;
      v11 = *v10;
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 123, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        v14 = v11 + 280;
        goto LABEL_13;
      }
    }
    goto LABEL_14;
  }
  v10 = *(_QWORD **)(a1 + 8);
  v1038 = 1;
  v11 = *v10;
  v12 = a3;
  v13 = *(_QWORD *)(*v10 + 2328);
  if (a3 >= (unint64_t)((*(_QWORD *)(*v10 + 2336) - v13) >> 11))
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v13 = *(_QWORD *)(v11 + 2328);
      goto LABEL_9;
    }
LABEL_14:
    abort();
  }
LABEL_9:
  v14 = v13 + (v12 << 11);
LABEL_13:
  v1037[0] = v11;
  v1037[1] = v14;
  v1037[2] = a5;
  v1037[3] = &v1038;
  v1037[4] = v10[1];
  sub_2239B5A1C((uint64_t)v1037, 0, a6, a7);
  sub_2239B5A1C((uint64_t)v1037, 1u, v15, v16);
  sub_2239B5A1C((uint64_t)v1037, 2u, v17, v18);
  sub_2239B5A1C((uint64_t)v1037, 3u, v19, v20);
  sub_2239B5A1C((uint64_t)v1037, 4u, v21, v22);
  sub_2239B5A1C((uint64_t)v1037, 5u, v23, v24);
  sub_2239B5A1C((uint64_t)v1037, 6u, v25, v26);
  sub_2239B5A1C((uint64_t)v1037, 7u, v27, v28);
  sub_2239B5A1C((uint64_t)v1037, 8u, v29, v30);
  sub_2239B5A1C((uint64_t)v1037, 9u, v31, v32);
  sub_2239B5A1C((uint64_t)v1037, 0xAu, v33, v34);
  sub_2239B5A1C((uint64_t)v1037, 0xBu, v35, v36);
  sub_2239B5A1C((uint64_t)v1037, 0xCu, v37, v38);
  sub_2239B5A1C((uint64_t)v1037, 0xDu, v39, v40);
  sub_2239B5A1C((uint64_t)v1037, 0xEu, v41, v42);
  sub_2239B5A1C((uint64_t)v1037, 0xFu, v43, v44);
  sub_2239B5A1C((uint64_t)v1037, 0x10u, v45, v46);
  sub_2239B5A1C((uint64_t)v1037, 0x11u, v47, v48);
  sub_2239B5A1C((uint64_t)v1037, 0x12u, v49, v50);
  sub_2239B5A1C((uint64_t)v1037, 0x13u, v51, v52);
  sub_2239B5A1C((uint64_t)v1037, 0x14u, v53, v54);
  sub_2239B5A1C((uint64_t)v1037, 0x15u, v55, v56);
  sub_2239B5A1C((uint64_t)v1037, 0x16u, v57, v58);
  sub_2239B5A1C((uint64_t)v1037, 0x17u, v59, v60);
  sub_2239B5A1C((uint64_t)v1037, 0x18u, v61, v62);
  sub_2239B5A1C((uint64_t)v1037, 0x19u, v63, v64);
  sub_2239B5A1C((uint64_t)v1037, 0x1Au, v65, v66);
  sub_2239B5A1C((uint64_t)v1037, 0x1Bu, v67, v68);
  sub_2239B5A1C((uint64_t)v1037, 0x1Cu, v69, v70);
  sub_2239B5A1C((uint64_t)v1037, 0x1Du, v71, v72);
  sub_2239B5A1C((uint64_t)v1037, 0x1Eu, v73, v74);
  sub_2239B5A1C((uint64_t)v1037, 0x1Fu, v75, v76);
  sub_2239B5A1C((uint64_t)v1037, 0x20u, v77, v78);
  sub_2239B5A1C((uint64_t)v1037, 0x21u, v79, v80);
  sub_2239B5A1C((uint64_t)v1037, 0x22u, v81, v82);
  sub_2239B5A1C((uint64_t)v1037, 0x23u, v83, v84);
  sub_2239B5A1C((uint64_t)v1037, 0x24u, v85, v86);
  sub_2239B5A1C((uint64_t)v1037, 0x25u, v87, v88);
  sub_2239B5A1C((uint64_t)v1037, 0x26u, v89, v90);
  sub_2239B5A1C((uint64_t)v1037, 0x27u, v91, v92);
  sub_2239B5A1C((uint64_t)v1037, 0x28u, v93, v94);
  sub_2239B5A1C((uint64_t)v1037, 0x29u, v95, v96);
  sub_2239B5A1C((uint64_t)v1037, 0x2Au, v97, v98);
  sub_2239B5A1C((uint64_t)v1037, 0x2Bu, v99, v100);
  sub_2239B5A1C((uint64_t)v1037, 0x2Cu, v101, v102);
  sub_2239B5A1C((uint64_t)v1037, 0x2Du, v103, v104);
  sub_2239B5A1C((uint64_t)v1037, 0x2Eu, v105, v106);
  sub_2239B5A1C((uint64_t)v1037, 0x2Fu, v107, v108);
  sub_2239B5A1C((uint64_t)v1037, 0x30u, v109, v110);
  sub_2239B5A1C((uint64_t)v1037, 0x31u, v111, v112);
  sub_2239B5A1C((uint64_t)v1037, 0x32u, v113, v114);
  sub_2239B5A1C((uint64_t)v1037, 0x33u, v115, v116);
  sub_2239B5A1C((uint64_t)v1037, 0x34u, v117, v118);
  sub_2239B5A1C((uint64_t)v1037, 0x35u, v119, v120);
  sub_2239B5A1C((uint64_t)v1037, 0x36u, v121, v122);
  sub_2239B5A1C((uint64_t)v1037, 0x37u, v123, v124);
  sub_2239B5A1C((uint64_t)v1037, 0x38u, v125, v126);
  sub_2239B5A1C((uint64_t)v1037, 0x39u, v127, v128);
  sub_2239B5A1C((uint64_t)v1037, 0x3Au, v129, v130);
  sub_2239B5A1C((uint64_t)v1037, 0x3Bu, v131, v132);
  sub_2239B5A1C((uint64_t)v1037, 0x3Cu, v133, v134);
  sub_2239B5A1C((uint64_t)v1037, 0x3Du, v135, v136);
  sub_2239B5A1C((uint64_t)v1037, 0x3Eu, v137, v138);
  sub_2239B5A1C((uint64_t)v1037, 0x3Fu, v139, v140);
  sub_2239B5A1C((uint64_t)v1037, 0x40u, v141, v142);
  sub_2239B5A1C((uint64_t)v1037, 0x41u, v143, v144);
  sub_2239B5A1C((uint64_t)v1037, 0x42u, v145, v146);
  sub_2239B5A1C((uint64_t)v1037, 0x43u, v147, v148);
  sub_2239B5A1C((uint64_t)v1037, 0x44u, v149, v150);
  sub_2239B5A1C((uint64_t)v1037, 0x45u, v151, v152);
  sub_2239B5A1C((uint64_t)v1037, 0x46u, v153, v154);
  sub_2239B5A1C((uint64_t)v1037, 0x47u, v155, v156);
  sub_2239B5A1C((uint64_t)v1037, 0x48u, v157, v158);
  sub_2239B5A1C((uint64_t)v1037, 0x49u, v159, v160);
  sub_2239B5A1C((uint64_t)v1037, 0x4Au, v161, v162);
  sub_2239B5A1C((uint64_t)v1037, 0x4Bu, v163, v164);
  sub_2239B5A1C((uint64_t)v1037, 0x4Cu, v165, v166);
  sub_2239B5A1C((uint64_t)v1037, 0x4Du, v167, v168);
  sub_2239B5A1C((uint64_t)v1037, 0x4Eu, v169, v170);
  sub_2239B5A1C((uint64_t)v1037, 0x4Fu, v171, v172);
  sub_2239B5A1C((uint64_t)v1037, 0x50u, v173, v174);
  sub_2239B5A1C((uint64_t)v1037, 0x51u, v175, v176);
  sub_2239B5A1C((uint64_t)v1037, 0x52u, v177, v178);
  sub_2239B5A1C((uint64_t)v1037, 0x53u, v179, v180);
  sub_2239B5A1C((uint64_t)v1037, 0x54u, v181, v182);
  sub_2239B5A1C((uint64_t)v1037, 0x55u, v183, v184);
  sub_2239B5A1C((uint64_t)v1037, 0x56u, v185, v186);
  sub_2239B5A1C((uint64_t)v1037, 0x57u, v187, v188);
  sub_2239B5A1C((uint64_t)v1037, 0x58u, v189, v190);
  sub_2239B5A1C((uint64_t)v1037, 0x59u, v191, v192);
  sub_2239B5A1C((uint64_t)v1037, 0x5Au, v193, v194);
  sub_2239B5A1C((uint64_t)v1037, 0x5Bu, v195, v196);
  sub_2239B5A1C((uint64_t)v1037, 0x5Cu, v197, v198);
  sub_2239B5A1C((uint64_t)v1037, 0x5Du, v199, v200);
  sub_2239B5A1C((uint64_t)v1037, 0x5Eu, v201, v202);
  sub_2239B5A1C((uint64_t)v1037, 0x5Fu, v203, v204);
  sub_2239B5A1C((uint64_t)v1037, 0x60u, v205, v206);
  sub_2239B5A1C((uint64_t)v1037, 0x61u, v207, v208);
  sub_2239B5A1C((uint64_t)v1037, 0x62u, v209, v210);
  sub_2239B5A1C((uint64_t)v1037, 0x63u, v211, v212);
  sub_2239B5A1C((uint64_t)v1037, 0x64u, v213, v214);
  sub_2239B5A1C((uint64_t)v1037, 0x65u, v215, v216);
  sub_2239B5A1C((uint64_t)v1037, 0x66u, v217, v218);
  sub_2239B5A1C((uint64_t)v1037, 0x67u, v219, v220);
  sub_2239B5A1C((uint64_t)v1037, 0x68u, v221, v222);
  sub_2239B5A1C((uint64_t)v1037, 0x69u, v223, v224);
  sub_2239B5A1C((uint64_t)v1037, 0x6Au, v225, v226);
  sub_2239B5A1C((uint64_t)v1037, 0x6Bu, v227, v228);
  sub_2239B5A1C((uint64_t)v1037, 0x6Cu, v229, v230);
  sub_2239B5A1C((uint64_t)v1037, 0x6Du, v231, v232);
  sub_2239B5A1C((uint64_t)v1037, 0x6Eu, v233, v234);
  sub_2239B5A1C((uint64_t)v1037, 0x6Fu, v235, v236);
  sub_2239B5A1C((uint64_t)v1037, 0x70u, v237, v238);
  sub_2239B5A1C((uint64_t)v1037, 0x71u, v239, v240);
  sub_2239B5A1C((uint64_t)v1037, 0x72u, v241, v242);
  sub_2239B5A1C((uint64_t)v1037, 0x73u, v243, v244);
  sub_2239B5A1C((uint64_t)v1037, 0x74u, v245, v246);
  sub_2239B5A1C((uint64_t)v1037, 0x75u, v247, v248);
  sub_2239B5A1C((uint64_t)v1037, 0x76u, v249, v250);
  sub_2239B5A1C((uint64_t)v1037, 0x77u, v251, v252);
  sub_2239B5A1C((uint64_t)v1037, 0x78u, v253, v254);
  sub_2239B5A1C((uint64_t)v1037, 0x79u, v255, v256);
  sub_2239B5A1C((uint64_t)v1037, 0x7Au, v257, v258);
  sub_2239B5A1C((uint64_t)v1037, 0x7Bu, v259, v260);
  sub_2239B5A1C((uint64_t)v1037, 0x7Cu, v261, v262);
  sub_2239B5A1C((uint64_t)v1037, 0x7Du, v263, v264);
  sub_2239B5A1C((uint64_t)v1037, 0x7Eu, v265, v266);
  sub_2239B5A1C((uint64_t)v1037, 0x7Fu, v267, v268);
  sub_2239B5A1C((uint64_t)v1037, 0x80u, v269, v270);
  sub_2239B5A1C((uint64_t)v1037, 0x81u, v271, v272);
  sub_2239B5A1C((uint64_t)v1037, 0x82u, v273, v274);
  sub_2239B5A1C((uint64_t)v1037, 0x83u, v275, v276);
  sub_2239B5A1C((uint64_t)v1037, 0x84u, v277, v278);
  sub_2239B5A1C((uint64_t)v1037, 0x85u, v279, v280);
  sub_2239B5A1C((uint64_t)v1037, 0x86u, v281, v282);
  sub_2239B5A1C((uint64_t)v1037, 0x87u, v283, v284);
  sub_2239B5A1C((uint64_t)v1037, 0x88u, v285, v286);
  sub_2239B5A1C((uint64_t)v1037, 0x89u, v287, v288);
  sub_2239B5A1C((uint64_t)v1037, 0x8Au, v289, v290);
  sub_2239B5A1C((uint64_t)v1037, 0x8Bu, v291, v292);
  sub_2239B5A1C((uint64_t)v1037, 0x8Cu, v293, v294);
  sub_2239B5A1C((uint64_t)v1037, 0x8Du, v295, v296);
  sub_2239B5A1C((uint64_t)v1037, 0x8Eu, v297, v298);
  sub_2239B5A1C((uint64_t)v1037, 0x8Fu, v299, v300);
  sub_2239B5A1C((uint64_t)v1037, 0x90u, v301, v302);
  sub_2239B5A1C((uint64_t)v1037, 0x91u, v303, v304);
  sub_2239B5A1C((uint64_t)v1037, 0x92u, v305, v306);
  sub_2239B5A1C((uint64_t)v1037, 0x93u, v307, v308);
  sub_2239B5A1C((uint64_t)v1037, 0x94u, v309, v310);
  sub_2239B5A1C((uint64_t)v1037, 0x95u, v311, v312);
  sub_2239B5A1C((uint64_t)v1037, 0x96u, v313, v314);
  sub_2239B5A1C((uint64_t)v1037, 0x97u, v315, v316);
  sub_2239B5A1C((uint64_t)v1037, 0x98u, v317, v318);
  sub_2239B5A1C((uint64_t)v1037, 0x99u, v319, v320);
  sub_2239B5A1C((uint64_t)v1037, 0x9Au, v321, v322);
  sub_2239B5A1C((uint64_t)v1037, 0x9Bu, v323, v324);
  sub_2239B5A1C((uint64_t)v1037, 0x9Cu, v325, v326);
  sub_2239B5A1C((uint64_t)v1037, 0x9Du, v327, v328);
  sub_2239B5A1C((uint64_t)v1037, 0x9Eu, v329, v330);
  sub_2239B5A1C((uint64_t)v1037, 0x9Fu, v331, v332);
  sub_2239B5A1C((uint64_t)v1037, 0xA0u, v333, v334);
  sub_2239B5A1C((uint64_t)v1037, 0xA1u, v335, v336);
  sub_2239B5A1C((uint64_t)v1037, 0xA2u, v337, v338);
  sub_2239B5A1C((uint64_t)v1037, 0xA3u, v339, v340);
  sub_2239B5A1C((uint64_t)v1037, 0xA4u, v341, v342);
  sub_2239B5A1C((uint64_t)v1037, 0xA5u, v343, v344);
  sub_2239B5A1C((uint64_t)v1037, 0xA6u, v345, v346);
  sub_2239B5A1C((uint64_t)v1037, 0xA7u, v347, v348);
  sub_2239B5A1C((uint64_t)v1037, 0xA8u, v349, v350);
  sub_2239B5A1C((uint64_t)v1037, 0xA9u, v351, v352);
  sub_2239B5A1C((uint64_t)v1037, 0xAAu, v353, v354);
  sub_2239B5A1C((uint64_t)v1037, 0xABu, v355, v356);
  sub_2239B5A1C((uint64_t)v1037, 0xACu, v357, v358);
  sub_2239B5A1C((uint64_t)v1037, 0xADu, v359, v360);
  sub_2239B5A1C((uint64_t)v1037, 0xAEu, v361, v362);
  sub_2239B5A1C((uint64_t)v1037, 0xAFu, v363, v364);
  sub_2239B5A1C((uint64_t)v1037, 0xB0u, v365, v366);
  sub_2239B5A1C((uint64_t)v1037, 0xB1u, v367, v368);
  sub_2239B5A1C((uint64_t)v1037, 0xB2u, v369, v370);
  sub_2239B5A1C((uint64_t)v1037, 0xB3u, v371, v372);
  sub_2239B5A1C((uint64_t)v1037, 0xB4u, v373, v374);
  sub_2239B5A1C((uint64_t)v1037, 0xB5u, v375, v376);
  sub_2239B5A1C((uint64_t)v1037, 0xB6u, v377, v378);
  sub_2239B5A1C((uint64_t)v1037, 0xB7u, v379, v380);
  sub_2239B5A1C((uint64_t)v1037, 0xB8u, v381, v382);
  sub_2239B5A1C((uint64_t)v1037, 0xB9u, v383, v384);
  sub_2239B5A1C((uint64_t)v1037, 0xBAu, v385, v386);
  sub_2239B5A1C((uint64_t)v1037, 0xBBu, v387, v388);
  sub_2239B5A1C((uint64_t)v1037, 0xBCu, v389, v390);
  sub_2239B5A1C((uint64_t)v1037, 0xBDu, v391, v392);
  sub_2239B5A1C((uint64_t)v1037, 0xBEu, v393, v394);
  sub_2239B5A1C((uint64_t)v1037, 0xBFu, v395, v396);
  sub_2239B5A1C((uint64_t)v1037, 0xC0u, v397, v398);
  sub_2239B5A1C((uint64_t)v1037, 0xC1u, v399, v400);
  sub_2239B5A1C((uint64_t)v1037, 0xC2u, v401, v402);
  sub_2239B5A1C((uint64_t)v1037, 0xC3u, v403, v404);
  sub_2239B5A1C((uint64_t)v1037, 0xC4u, v405, v406);
  sub_2239B5A1C((uint64_t)v1037, 0xC5u, v407, v408);
  sub_2239B5A1C((uint64_t)v1037, 0xC6u, v409, v410);
  sub_2239B5A1C((uint64_t)v1037, 0xC7u, v411, v412);
  sub_2239B5A1C((uint64_t)v1037, 0xC8u, v413, v414);
  sub_2239B5A1C((uint64_t)v1037, 0xC9u, v415, v416);
  sub_2239B5A1C((uint64_t)v1037, 0xCAu, v417, v418);
  sub_2239B5A1C((uint64_t)v1037, 0xCBu, v419, v420);
  sub_2239B5A1C((uint64_t)v1037, 0xCCu, v421, v422);
  sub_2239B5A1C((uint64_t)v1037, 0xCDu, v423, v424);
  sub_2239B5A1C((uint64_t)v1037, 0xCEu, v425, v426);
  sub_2239B5A1C((uint64_t)v1037, 0xCFu, v427, v428);
  sub_2239B5A1C((uint64_t)v1037, 0xD0u, v429, v430);
  sub_2239B5A1C((uint64_t)v1037, 0xD1u, v431, v432);
  sub_2239B5A1C((uint64_t)v1037, 0xD2u, v433, v434);
  sub_2239B5A1C((uint64_t)v1037, 0xD3u, v435, v436);
  sub_2239B5A1C((uint64_t)v1037, 0xD4u, v437, v438);
  sub_2239B5A1C((uint64_t)v1037, 0xD5u, v439, v440);
  sub_2239B5A1C((uint64_t)v1037, 0xD6u, v441, v442);
  sub_2239B5A1C((uint64_t)v1037, 0xD7u, v443, v444);
  sub_2239B5A1C((uint64_t)v1037, 0xD8u, v445, v446);
  sub_2239B5A1C((uint64_t)v1037, 0xD9u, v447, v448);
  sub_2239B5A1C((uint64_t)v1037, 0xDAu, v449, v450);
  sub_2239B5A1C((uint64_t)v1037, 0xDBu, v451, v452);
  sub_2239B5A1C((uint64_t)v1037, 0xDCu, v453, v454);
  sub_2239B5A1C((uint64_t)v1037, 0xDDu, v455, v456);
  sub_2239B5A1C((uint64_t)v1037, 0xDEu, v457, v458);
  sub_2239B5A1C((uint64_t)v1037, 0xDFu, v459, v460);
  sub_2239B5A1C((uint64_t)v1037, 0xE0u, v461, v462);
  sub_2239B5A1C((uint64_t)v1037, 0xE1u, v463, v464);
  sub_2239B5A1C((uint64_t)v1037, 0xE2u, v465, v466);
  sub_2239B5A1C((uint64_t)v1037, 0xE3u, v467, v468);
  sub_2239B5A1C((uint64_t)v1037, 0xE4u, v469, v470);
  sub_2239B5A1C((uint64_t)v1037, 0xE5u, v471, v472);
  sub_2239B5A1C((uint64_t)v1037, 0xE6u, v473, v474);
  sub_2239B5A1C((uint64_t)v1037, 0xE7u, v475, v476);
  sub_2239B5A1C((uint64_t)v1037, 0xE8u, v477, v478);
  sub_2239B5A1C((uint64_t)v1037, 0xE9u, v479, v480);
  sub_2239B5A1C((uint64_t)v1037, 0xEAu, v481, v482);
  sub_2239B5A1C((uint64_t)v1037, 0xEBu, v483, v484);
  sub_2239B5A1C((uint64_t)v1037, 0xECu, v485, v486);
  sub_2239B5A1C((uint64_t)v1037, 0xEDu, v487, v488);
  sub_2239B5A1C((uint64_t)v1037, 0xEEu, v489, v490);
  sub_2239B5A1C((uint64_t)v1037, 0xEFu, v491, v492);
  sub_2239B5A1C((uint64_t)v1037, 0xF0u, v493, v494);
  sub_2239B5A1C((uint64_t)v1037, 0xF1u, v495, v496);
  sub_2239B5A1C((uint64_t)v1037, 0xF2u, v497, v498);
  sub_2239B5A1C((uint64_t)v1037, 0xF3u, v499, v500);
  sub_2239B5A1C((uint64_t)v1037, 0xF4u, v501, v502);
  sub_2239B5A1C((uint64_t)v1037, 0xF5u, v503, v504);
  sub_2239B5A1C((uint64_t)v1037, 0xF6u, v505, v506);
  sub_2239B5A1C((uint64_t)v1037, 0xF7u, v507, v508);
  sub_2239B5A1C((uint64_t)v1037, 0xF8u, v509, v510);
  sub_2239B5A1C((uint64_t)v1037, 0xF9u, v511, v512);
  sub_2239B5A1C((uint64_t)v1037, 0xFAu, v513, v514);
  sub_2239B5A1C((uint64_t)v1037, 0xFBu, v515, v516);
  sub_2239B5A1C((uint64_t)v1037, 0xFCu, v517, v518);
  sub_2239B5A1C((uint64_t)v1037, 0xFDu, v519, v520);
  sub_2239B5A1C((uint64_t)v1037, 0xFEu, v521, v522);
  sub_2239B5A1C((uint64_t)v1037, 0xFFu, v523, v524);
  sub_2239B5A1C((uint64_t)v1037, 0x100u, v525, v526);
  sub_2239B5A1C((uint64_t)v1037, 0x101u, v527, v528);
  sub_2239B5A1C((uint64_t)v1037, 0x102u, v529, v530);
  sub_2239B5A1C((uint64_t)v1037, 0x103u, v531, v532);
  sub_2239B5A1C((uint64_t)v1037, 0x104u, v533, v534);
  sub_2239B5A1C((uint64_t)v1037, 0x105u, v535, v536);
  sub_2239B5A1C((uint64_t)v1037, 0x106u, v537, v538);
  sub_2239B5A1C((uint64_t)v1037, 0x107u, v539, v540);
  sub_2239B5A1C((uint64_t)v1037, 0x108u, v541, v542);
  sub_2239B5A1C((uint64_t)v1037, 0x109u, v543, v544);
  sub_2239B5A1C((uint64_t)v1037, 0x10Au, v545, v546);
  sub_2239B5A1C((uint64_t)v1037, 0x10Bu, v547, v548);
  sub_2239B5A1C((uint64_t)v1037, 0x10Cu, v549, v550);
  sub_2239B5A1C((uint64_t)v1037, 0x10Du, v551, v552);
  sub_2239B5A1C((uint64_t)v1037, 0x10Eu, v553, v554);
  sub_2239B5A1C((uint64_t)v1037, 0x10Fu, v555, v556);
  sub_2239B5A1C((uint64_t)v1037, 0x110u, v557, v558);
  sub_2239B5A1C((uint64_t)v1037, 0x111u, v559, v560);
  sub_2239B5A1C((uint64_t)v1037, 0x112u, v561, v562);
  sub_2239B5A1C((uint64_t)v1037, 0x113u, v563, v564);
  sub_2239B5A1C((uint64_t)v1037, 0x114u, v565, v566);
  sub_2239B5A1C((uint64_t)v1037, 0x115u, v567, v568);
  sub_2239B5A1C((uint64_t)v1037, 0x116u, v569, v570);
  sub_2239B5A1C((uint64_t)v1037, 0x117u, v571, v572);
  sub_2239B5A1C((uint64_t)v1037, 0x118u, v573, v574);
  sub_2239B5A1C((uint64_t)v1037, 0x119u, v575, v576);
  sub_2239B5A1C((uint64_t)v1037, 0x11Au, v577, v578);
  sub_2239B5A1C((uint64_t)v1037, 0x11Bu, v579, v580);
  sub_2239B5A1C((uint64_t)v1037, 0x11Cu, v581, v582);
  sub_2239B5A1C((uint64_t)v1037, 0x11Du, v583, v584);
  sub_2239B5A1C((uint64_t)v1037, 0x11Eu, v585, v586);
  sub_2239B5A1C((uint64_t)v1037, 0x11Fu, v587, v588);
  sub_2239B5A1C((uint64_t)v1037, 0x120u, v589, v590);
  sub_2239B5A1C((uint64_t)v1037, 0x121u, v591, v592);
  sub_2239B5A1C((uint64_t)v1037, 0x122u, v593, v594);
  sub_2239B5A1C((uint64_t)v1037, 0x123u, v595, v596);
  sub_2239B5A1C((uint64_t)v1037, 0x124u, v597, v598);
  sub_2239B5A1C((uint64_t)v1037, 0x125u, v599, v600);
  sub_2239B5A1C((uint64_t)v1037, 0x126u, v601, v602);
  sub_2239B5A1C((uint64_t)v1037, 0x127u, v603, v604);
  sub_2239B5A1C((uint64_t)v1037, 0x128u, v605, v606);
  sub_2239B5A1C((uint64_t)v1037, 0x129u, v607, v608);
  sub_2239B5A1C((uint64_t)v1037, 0x12Au, v609, v610);
  sub_2239B5A1C((uint64_t)v1037, 0x12Bu, v611, v612);
  sub_2239B5A1C((uint64_t)v1037, 0x12Cu, v613, v614);
  sub_2239B5A1C((uint64_t)v1037, 0x12Du, v615, v616);
  sub_2239B5A1C((uint64_t)v1037, 0x12Eu, v617, v618);
  sub_2239B5A1C((uint64_t)v1037, 0x12Fu, v619, v620);
  sub_2239B5A1C((uint64_t)v1037, 0x130u, v621, v622);
  sub_2239B5A1C((uint64_t)v1037, 0x131u, v623, v624);
  sub_2239B5A1C((uint64_t)v1037, 0x132u, v625, v626);
  sub_2239B5A1C((uint64_t)v1037, 0x133u, v627, v628);
  sub_2239B5A1C((uint64_t)v1037, 0x134u, v629, v630);
  sub_2239B5A1C((uint64_t)v1037, 0x135u, v631, v632);
  sub_2239B5A1C((uint64_t)v1037, 0x136u, v633, v634);
  sub_2239B5A1C((uint64_t)v1037, 0x137u, v635, v636);
  sub_2239B5A1C((uint64_t)v1037, 0x138u, v637, v638);
  sub_2239B5A1C((uint64_t)v1037, 0x139u, v639, v640);
  sub_2239B5A1C((uint64_t)v1037, 0x13Au, v641, v642);
  sub_2239B5A1C((uint64_t)v1037, 0x13Bu, v643, v644);
  sub_2239B5A1C((uint64_t)v1037, 0x13Cu, v645, v646);
  sub_2239B5A1C((uint64_t)v1037, 0x13Du, v647, v648);
  sub_2239B5A1C((uint64_t)v1037, 0x13Eu, v649, v650);
  sub_2239B5A1C((uint64_t)v1037, 0x13Fu, v651, v652);
  sub_2239B5A1C((uint64_t)v1037, 0x140u, v653, v654);
  sub_2239B5A1C((uint64_t)v1037, 0x141u, v655, v656);
  sub_2239B5A1C((uint64_t)v1037, 0x142u, v657, v658);
  sub_2239B5A1C((uint64_t)v1037, 0x143u, v659, v660);
  sub_2239B5A1C((uint64_t)v1037, 0x144u, v661, v662);
  sub_2239B5A1C((uint64_t)v1037, 0x145u, v663, v664);
  sub_2239B5A1C((uint64_t)v1037, 0x146u, v665, v666);
  sub_2239B5A1C((uint64_t)v1037, 0x147u, v667, v668);
  sub_2239B5A1C((uint64_t)v1037, 0x148u, v669, v670);
  sub_2239B5A1C((uint64_t)v1037, 0x149u, v671, v672);
  sub_2239B5A1C((uint64_t)v1037, 0x14Au, v673, v674);
  sub_2239B5A1C((uint64_t)v1037, 0x14Bu, v675, v676);
  sub_2239B5A1C((uint64_t)v1037, 0x14Cu, v677, v678);
  sub_2239B5A1C((uint64_t)v1037, 0x14Du, v679, v680);
  sub_2239B5A1C((uint64_t)v1037, 0x14Eu, v681, v682);
  sub_2239B5A1C((uint64_t)v1037, 0x14Fu, v683, v684);
  sub_2239B5A1C((uint64_t)v1037, 0x150u, v685, v686);
  sub_2239B5A1C((uint64_t)v1037, 0x151u, v687, v688);
  sub_2239B5A1C((uint64_t)v1037, 0x152u, v689, v690);
  sub_2239B5A1C((uint64_t)v1037, 0x153u, v691, v692);
  sub_2239B5A1C((uint64_t)v1037, 0x154u, v693, v694);
  sub_2239B5A1C((uint64_t)v1037, 0x155u, v695, v696);
  sub_2239B5A1C((uint64_t)v1037, 0x156u, v697, v698);
  sub_2239B5A1C((uint64_t)v1037, 0x157u, v699, v700);
  sub_2239B5A1C((uint64_t)v1037, 0x158u, v701, v702);
  sub_2239B5A1C((uint64_t)v1037, 0x159u, v703, v704);
  sub_2239B5A1C((uint64_t)v1037, 0x15Au, v705, v706);
  sub_2239B5A1C((uint64_t)v1037, 0x15Bu, v707, v708);
  sub_2239B5A1C((uint64_t)v1037, 0x15Cu, v709, v710);
  sub_2239B5A1C((uint64_t)v1037, 0x15Du, v711, v712);
  sub_2239B5A1C((uint64_t)v1037, 0x15Eu, v713, v714);
  sub_2239B5A1C((uint64_t)v1037, 0x15Fu, v715, v716);
  sub_2239B5A1C((uint64_t)v1037, 0x160u, v717, v718);
  sub_2239B5A1C((uint64_t)v1037, 0x161u, v719, v720);
  sub_2239B5A1C((uint64_t)v1037, 0x162u, v721, v722);
  sub_2239B5A1C((uint64_t)v1037, 0x163u, v723, v724);
  sub_2239B5A1C((uint64_t)v1037, 0x164u, v725, v726);
  sub_2239B5A1C((uint64_t)v1037, 0x165u, v727, v728);
  sub_2239B5A1C((uint64_t)v1037, 0x166u, v729, v730);
  sub_2239B5A1C((uint64_t)v1037, 0x167u, v731, v732);
  sub_2239B5A1C((uint64_t)v1037, 0x168u, v733, v734);
  sub_2239B5A1C((uint64_t)v1037, 0x169u, v735, v736);
  sub_2239B5A1C((uint64_t)v1037, 0x16Au, v737, v738);
  sub_2239B5A1C((uint64_t)v1037, 0x16Bu, v739, v740);
  sub_2239B5A1C((uint64_t)v1037, 0x16Cu, v741, v742);
  sub_2239B5A1C((uint64_t)v1037, 0x16Du, v743, v744);
  sub_2239B5A1C((uint64_t)v1037, 0x16Eu, v745, v746);
  sub_2239B5A1C((uint64_t)v1037, 0x16Fu, v747, v748);
  sub_2239B5A1C((uint64_t)v1037, 0x170u, v749, v750);
  sub_2239B5A1C((uint64_t)v1037, 0x171u, v751, v752);
  sub_2239B5A1C((uint64_t)v1037, 0x172u, v753, v754);
  sub_2239B5A1C((uint64_t)v1037, 0x173u, v755, v756);
  sub_2239B5A1C((uint64_t)v1037, 0x174u, v757, v758);
  sub_2239B5A1C((uint64_t)v1037, 0x175u, v759, v760);
  sub_2239B5A1C((uint64_t)v1037, 0x176u, v761, v762);
  sub_2239B5A1C((uint64_t)v1037, 0x177u, v763, v764);
  sub_2239B5A1C((uint64_t)v1037, 0x178u, v765, v766);
  sub_2239B5A1C((uint64_t)v1037, 0x179u, v767, v768);
  sub_2239B5A1C((uint64_t)v1037, 0x17Au, v769, v770);
  sub_2239B5A1C((uint64_t)v1037, 0x17Bu, v771, v772);
  sub_2239B5A1C((uint64_t)v1037, 0x17Cu, v773, v774);
  sub_2239B5A1C((uint64_t)v1037, 0x17Du, v775, v776);
  sub_2239B5A1C((uint64_t)v1037, 0x17Eu, v777, v778);
  sub_2239B5A1C((uint64_t)v1037, 0x17Fu, v779, v780);
  sub_2239B5A1C((uint64_t)v1037, 0x180u, v781, v782);
  sub_2239B5A1C((uint64_t)v1037, 0x181u, v783, v784);
  sub_2239B5A1C((uint64_t)v1037, 0x182u, v785, v786);
  sub_2239B5A1C((uint64_t)v1037, 0x183u, v787, v788);
  sub_2239B5A1C((uint64_t)v1037, 0x184u, v789, v790);
  sub_2239B5A1C((uint64_t)v1037, 0x185u, v791, v792);
  sub_2239B5A1C((uint64_t)v1037, 0x186u, v793, v794);
  sub_2239B5A1C((uint64_t)v1037, 0x187u, v795, v796);
  sub_2239B5A1C((uint64_t)v1037, 0x188u, v797, v798);
  sub_2239B5A1C((uint64_t)v1037, 0x189u, v799, v800);
  sub_2239B5A1C((uint64_t)v1037, 0x18Au, v801, v802);
  sub_2239B5A1C((uint64_t)v1037, 0x18Bu, v803, v804);
  sub_2239B5A1C((uint64_t)v1037, 0x18Cu, v805, v806);
  sub_2239B5A1C((uint64_t)v1037, 0x18Du, v807, v808);
  sub_2239B5A1C((uint64_t)v1037, 0x18Eu, v809, v810);
  sub_2239B5A1C((uint64_t)v1037, 0x18Fu, v811, v812);
  sub_2239B5A1C((uint64_t)v1037, 0x190u, v813, v814);
  sub_2239B5A1C((uint64_t)v1037, 0x191u, v815, v816);
  sub_2239B5A1C((uint64_t)v1037, 0x192u, v817, v818);
  sub_2239B5A1C((uint64_t)v1037, 0x193u, v819, v820);
  sub_2239B5A1C((uint64_t)v1037, 0x194u, v821, v822);
  sub_2239B5A1C((uint64_t)v1037, 0x195u, v823, v824);
  sub_2239B5A1C((uint64_t)v1037, 0x196u, v825, v826);
  sub_2239B5A1C((uint64_t)v1037, 0x197u, v827, v828);
  sub_2239B5A1C((uint64_t)v1037, 0x198u, v829, v830);
  sub_2239B5A1C((uint64_t)v1037, 0x199u, v831, v832);
  sub_2239B5A1C((uint64_t)v1037, 0x19Au, v833, v834);
  sub_2239B5A1C((uint64_t)v1037, 0x19Bu, v835, v836);
  sub_2239B5A1C((uint64_t)v1037, 0x19Cu, v837, v838);
  sub_2239B5A1C((uint64_t)v1037, 0x19Du, v839, v840);
  sub_2239B5A1C((uint64_t)v1037, 0x19Eu, v841, v842);
  sub_2239B5A1C((uint64_t)v1037, 0x19Fu, v843, v844);
  sub_2239B5A1C((uint64_t)v1037, 0x1A0u, v845, v846);
  sub_2239B5A1C((uint64_t)v1037, 0x1A1u, v847, v848);
  sub_2239B5A1C((uint64_t)v1037, 0x1A2u, v849, v850);
  sub_2239B5A1C((uint64_t)v1037, 0x1A3u, v851, v852);
  sub_2239B5A1C((uint64_t)v1037, 0x1A4u, v853, v854);
  sub_2239B5A1C((uint64_t)v1037, 0x1A5u, v855, v856);
  sub_2239B5A1C((uint64_t)v1037, 0x1A6u, v857, v858);
  sub_2239B5A1C((uint64_t)v1037, 0x1A7u, v859, v860);
  sub_2239B5A1C((uint64_t)v1037, 0x1A8u, v861, v862);
  sub_2239B5A1C((uint64_t)v1037, 0x1A9u, v863, v864);
  sub_2239B5A1C((uint64_t)v1037, 0x1AAu, v865, v866);
  sub_2239B5A1C((uint64_t)v1037, 0x1ABu, v867, v868);
  sub_2239B5A1C((uint64_t)v1037, 0x1ACu, v869, v870);
  sub_2239B5A1C((uint64_t)v1037, 0x1ADu, v871, v872);
  sub_2239B5A1C((uint64_t)v1037, 0x1AEu, v873, v874);
  sub_2239B5A1C((uint64_t)v1037, 0x1AFu, v875, v876);
  sub_2239B5A1C((uint64_t)v1037, 0x1B0u, v877, v878);
  sub_2239B5A1C((uint64_t)v1037, 0x1B1u, v879, v880);
  sub_2239B5A1C((uint64_t)v1037, 0x1B2u, v881, v882);
  sub_2239B5A1C((uint64_t)v1037, 0x1B3u, v883, v884);
  sub_2239B5A1C((uint64_t)v1037, 0x1B4u, v885, v886);
  sub_2239B5A1C((uint64_t)v1037, 0x1B5u, v887, v888);
  sub_2239B5A1C((uint64_t)v1037, 0x1B6u, v889, v890);
  sub_2239B5A1C((uint64_t)v1037, 0x1B7u, v891, v892);
  sub_2239B5A1C((uint64_t)v1037, 0x1B8u, v893, v894);
  sub_2239B5A1C((uint64_t)v1037, 0x1B9u, v895, v896);
  sub_2239B5A1C((uint64_t)v1037, 0x1BAu, v897, v898);
  sub_2239B5A1C((uint64_t)v1037, 0x1BBu, v899, v900);
  sub_2239B5A1C((uint64_t)v1037, 0x1BCu, v901, v902);
  sub_2239B5A1C((uint64_t)v1037, 0x1BDu, v903, v904);
  sub_2239B5A1C((uint64_t)v1037, 0x1BEu, v905, v906);
  sub_2239B5A1C((uint64_t)v1037, 0x1BFu, v907, v908);
  sub_2239B5A1C((uint64_t)v1037, 0x1C0u, v909, v910);
  sub_2239B5A1C((uint64_t)v1037, 0x1C1u, v911, v912);
  sub_2239B5A1C((uint64_t)v1037, 0x1C2u, v913, v914);
  sub_2239B5A1C((uint64_t)v1037, 0x1C3u, v915, v916);
  sub_2239B5A1C((uint64_t)v1037, 0x1C4u, v917, v918);
  sub_2239B5A1C((uint64_t)v1037, 0x1C5u, v919, v920);
  sub_2239B5A1C((uint64_t)v1037, 0x1C6u, v921, v922);
  sub_2239B5A1C((uint64_t)v1037, 0x1C7u, v923, v924);
  sub_2239B5A1C((uint64_t)v1037, 0x1C8u, v925, v926);
  sub_2239B5A1C((uint64_t)v1037, 0x1C9u, v927, v928);
  sub_2239B5A1C((uint64_t)v1037, 0x1CAu, v929, v930);
  sub_2239B5A1C((uint64_t)v1037, 0x1CBu, v931, v932);
  sub_2239B5A1C((uint64_t)v1037, 0x1CCu, v933, v934);
  sub_2239B5A1C((uint64_t)v1037, 0x1CDu, v935, v936);
  sub_2239B5A1C((uint64_t)v1037, 0x1CEu, v937, v938);
  sub_2239B5A1C((uint64_t)v1037, 0x1CFu, v939, v940);
  sub_2239B5A1C((uint64_t)v1037, 0x1D0u, v941, v942);
  sub_2239B5A1C((uint64_t)v1037, 0x1D1u, v943, v944);
  sub_2239B5A1C((uint64_t)v1037, 0x1D2u, v945, v946);
  sub_2239B5A1C((uint64_t)v1037, 0x1D3u, v947, v948);
  sub_2239B5A1C((uint64_t)v1037, 0x1D4u, v949, v950);
  sub_2239B5A1C((uint64_t)v1037, 0x1D5u, v951, v952);
  sub_2239B5A1C((uint64_t)v1037, 0x1D6u, v953, v954);
  sub_2239B5A1C((uint64_t)v1037, 0x1D7u, v955, v956);
  sub_2239B5A1C((uint64_t)v1037, 0x1D8u, v957, v958);
  sub_2239B5A1C((uint64_t)v1037, 0x1D9u, v959, v960);
  sub_2239B5A1C((uint64_t)v1037, 0x1DAu, v961, v962);
  sub_2239B5A1C((uint64_t)v1037, 0x1DBu, v963, v964);
  sub_2239B5A1C((uint64_t)v1037, 0x1DCu, v965, v966);
  sub_2239B5A1C((uint64_t)v1037, 0x1DDu, v967, v968);
  sub_2239B5A1C((uint64_t)v1037, 0x1DEu, v969, v970);
  sub_2239B5A1C((uint64_t)v1037, 0x1DFu, v971, v972);
  sub_2239B5A1C((uint64_t)v1037, 0x1E0u, v973, v974);
  sub_2239B5A1C((uint64_t)v1037, 0x1E1u, v975, v976);
  sub_2239B5A1C((uint64_t)v1037, 0x1E2u, v977, v978);
  sub_2239B5A1C((uint64_t)v1037, 0x1E3u, v979, v980);
  sub_2239B5A1C((uint64_t)v1037, 0x1E4u, v981, v982);
  sub_2239B5A1C((uint64_t)v1037, 0x1E5u, v983, v984);
  sub_2239B5A1C((uint64_t)v1037, 0x1E6u, v985, v986);
  sub_2239B5A1C((uint64_t)v1037, 0x1E7u, v987, v988);
  sub_2239B5A1C((uint64_t)v1037, 0x1E8u, v989, v990);
  sub_2239B5A1C((uint64_t)v1037, 0x1E9u, v991, v992);
  sub_2239B5A1C((uint64_t)v1037, 0x1EAu, v993, v994);
  sub_2239B5A1C((uint64_t)v1037, 0x1EBu, v995, v996);
  sub_2239B5A1C((uint64_t)v1037, 0x1ECu, v997, v998);
  sub_2239B5A1C((uint64_t)v1037, 0x1EDu, v999, v1000);
  sub_2239B5A1C((uint64_t)v1037, 0x1EEu, v1001, v1002);
  sub_2239B5A1C((uint64_t)v1037, 0x1EFu, v1003, v1004);
  sub_2239B5A1C((uint64_t)v1037, 0x1F0u, v1005, v1006);
  sub_2239B5A1C((uint64_t)v1037, 0x1F1u, v1007, v1008);
  sub_2239B5A1C((uint64_t)v1037, 0x1F2u, v1009, v1010);
  sub_2239B5A1C((uint64_t)v1037, 0x1F3u, v1011, v1012);
  sub_2239B5A1C((uint64_t)v1037, 0x1F4u, v1013, v1014);
  sub_2239B5A1C((uint64_t)v1037, 0x1F5u, v1015, v1016);
  sub_2239B5A1C((uint64_t)v1037, 0x1F6u, v1017, v1018);
  sub_2239B5A1C((uint64_t)v1037, 0x1F7u, v1019, v1020);
  sub_2239B5A1C((uint64_t)v1037, 0x1F8u, v1021, v1022);
  sub_2239B5A1C((uint64_t)v1037, 0x1F9u, v1023, v1024);
  sub_2239B5A1C((uint64_t)v1037, 0x1FAu, v1025, v1026);
  sub_2239B5A1C((uint64_t)v1037, 0x1FBu, v1027, v1028);
  sub_2239B5A1C((uint64_t)v1037, 0x1FCu, v1029, v1030);
  sub_2239B5A1C((uint64_t)v1037, 0x1FDu, v1031, v1032);
  sub_2239B5A1C((uint64_t)v1037, 0x1FEu, v1033, v1034);
  sub_2239B5A1C((uint64_t)v1037, 0x1FFu, v1035, v1036);
  return 3;
}

uint64_t sub_2239B5A1C(uint64_t result, unsigned int a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  float32x2_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int32 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float **v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  uint64_t v31;
  float32x2_t *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  __int32 v35;
  uint64_t v36;
  unsigned int v37;
  float32x4_t v38;
  float32x4_t v39;
  unsigned int v40;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  float32x2_t v53;

  v5 = result;
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)(result + 8);
  if (a2 >= 0x200)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 499, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      goto LABEL_48;
  }
  v8 = *(unsigned int *)(v7 + 4 * a2);
  if (v8 >> 30)
    v9 = 1;
  else
    v9 = (_DWORD)v8 == *(_DWORD *)(v6 + 272);
  if (v9)
    return result;
  v10 = *(_QWORD **)(v5 + 32);
  v11 = v8 & 0xFFFFFFFFCFFFFFFFLL;
  v12 = v10[1];
  v13 = *(_QWORD *)(*v10 + 2448);
  v14 = v13 + 520 * (v8 & 0xFFFFFFFFCFFFFFFFLL);
  v15 = *(_DWORD **)(v12 + 16);
  v16 = *(float32x2_t **)v12;
  if (!*(_DWORD *)(v14 + 4)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/src/PointCloudBlock.cpp", 124, (uint64_t)"points_.Count() > 0", 19, (uint64_t)"No points in block to compute mean", 34, (void (*)(void **))sub_22457406C))
  {
LABEL_48:
    abort();
  }
  v17 = v13 + 520 * v11;
  if (*(_BYTE *)(v17 + 320))
  {
    *(_BYTE *)(v17 + 320) = 0;
    v18 = v13 + 520 * v11;
    v19 = v18 + 324;
    *(_QWORD *)(v18 + 328) = 0;
    *(_DWORD *)(v18 + 324) = 0;
    v20 = (unsigned __int32 *)(v18 + 332);
    v21 = *(_DWORD *)(v14 + 4);
    a3.i64[0] = *(_QWORD *)v19;
    a3.i32[2] = *v20;
    if (v21)
    {
      v22 = v14 + 12;
      v23 = *(unsigned int *)(v14 + 4);
      do
      {
        a4.i64[0] = *(_QWORD *)v22;
        a4.i32[2] = *(_DWORD *)(v22 + 8);
        a3 = vaddq_f32(a3, a4);
        *(_DWORD *)(v19 + 8) = a3.i32[2];
        *(_QWORD *)v19 = a3.i64[0];
        v22 += 28;
        --v23;
      }
      while (v23);
    }
    a4.f32[0] = (float)v21;
    a3 = vdivq_f32(a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0));
    *(_DWORD *)(v19 + 8) = a3.i32[2];
    *(_QWORD *)v19 = a3.i64[0];
  }
  else
  {
    v24 = v13 + 520 * v11;
    a3.i64[0] = *(_QWORD *)(v24 + 324);
    a3.i32[2] = *(_DWORD *)(v24 + 332);
  }
  v25 = (float **)(*(_QWORD *)(v12 + 8) + 8);
  v53 = vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*v16, a3.f32[0]), v16[2], *(float32x2_t *)a3.f32, 1), v16[4], a3, 2), v16[6]);
  result = sub_223EA98C0((float *)&v53, v25);
  if ((result & 0x80000000) == 0)
  {
    v31 = *(unsigned int *)(v14 + 4);
    if ((_DWORD)v31)
    {
      v32 = *(float32x2_t **)v12;
      v33 = 520 * v11 + v13 + 36;
      v34 = (unsigned __int8 *)v33;
      do
      {
        v37 = *v34;
        v34 += 28;
        v36 = v37;
        if (v37 == 255)
        {
          v26.i64[0] = *(_QWORD *)(v33 - 24);
          v27.i32[0] = *(_DWORD *)(v33 - 16);
          v28.i32[0] = v32[1].i32[0];
          v29.i32[0] = v32[3].i32[0];
          v30.i32[0] = v32[5].i32[0];
          *(float32x2_t *)v38.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v32, v26.f32[0]), v32[2], *(float32x2_t *)v26.f32, 1), v32[4], v27.f32[0]);
          v28 = vmla_f32(vmla_lane_f32(vmul_f32(v28, *(float32x2_t *)v26.f32), v29, *(float32x2_t *)v26.f32, 1), v27, v30);
          *(float32x2_t *)&v38.u32[2] = v28;
          *(float32x2_t *)v26.f32 = v32[6];
          v26.i32[2] = v32[7].i32[0];
          v26 = vaddq_f32(v38, v26);
          goto LABEL_41;
        }
        if (v36 >= 0x2A)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_48;
        }
        v26.i64[0] = *(_QWORD *)(v33 - 24);
        v27.i32[0] = *(_DWORD *)(v33 - 16);
        v28.i32[0] = v32[1].i32[0];
        v29.i32[0] = v32[3].i32[0];
        v30.i32[0] = v32[5].i32[0];
        *(float32x2_t *)v39.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v32, v26.f32[0]), v32[2], *(float32x2_t *)v26.f32, 1), v32[4], v27.f32[0]);
        v28 = vmla_f32(vmla_lane_f32(vmul_f32(v28, *(float32x2_t *)v26.f32), v29, *(float32x2_t *)v26.f32, 1), v27, v30);
        *(float32x2_t *)&v39.u32[2] = v28;
        *(float32x2_t *)v26.f32 = v32[6];
        v26.i32[2] = v32[7].i32[0];
        v26 = vaddq_f32(v39, v26);
        if (byte_224693EA5[v36] == 1)
        {
          v43 = v15[203];
          v15[203] = v43 + 1;
          v44 = v15[202];
          if (v44 <= 0x63)
          {
            v15[202] = v44 + 1;
            v42 = &v15[v44 + 204];
            goto LABEL_40;
          }
          if (v43 >= 0x7FFF)
            v43 = 0x7FFF;
          v48 = 214013 * v15[201] + 2531011;
          v15[201] = v48;
          v46 = (HIWORD(v48) & 0x7FFF) % (v43 + 1);
          if (v46 <= 0x63)
          {
            v47 = v15 + 204;
            goto LABEL_39;
          }
        }
        else
        {
          if (byte_224693EA5[v36])
            goto LABEL_41;
          v40 = v15[100];
          v15[100] = v40 + 1;
          v41 = v15[99];
          if (v41 <= 0x63)
          {
            v15[99] = v41 + 1;
            v42 = &v15[v41 + 101];
LABEL_40:
            *v42 = v26.i32[2];
            goto LABEL_41;
          }
          if (v40 >= 0x7FFF)
            v40 = 0x7FFF;
          v45 = 214013 * v15[98] + 2531011;
          v15[98] = v45;
          v46 = (HIWORD(v45) & 0x7FFF) % (v40 + 1);
          if (v46 <= 0x63)
          {
            v47 = v15 + 101;
LABEL_39:
            v42 = &v47[v46];
            goto LABEL_40;
          }
        }
LABEL_41:
        v49 = v15[306];
        v15[306] = v49 + 1;
        v50 = v15[305];
        if (v50 <= 0x63)
        {
          v35 = v26.i32[2];
          v15[305] = v50 + 1;
        }
        else
        {
          if (v49 >= 0x7FFF)
            v51 = 0x7FFF;
          else
            v51 = v49;
          v52 = 214013 * v15[304] + 2531011;
          v15[304] = v52;
          v50 = (HIWORD(v52) & 0x7FFF) % (v51 + 1);
          if (v50 > 0x63)
            goto LABEL_20;
          v35 = v26.i32[2];
        }
        v15[v50 + 307] = v35;
LABEL_20:
        v33 = (uint64_t)v34;
        --v31;
      }
      while (v31);
    }
  }
  return result;
}

uint64_t sub_2239B5E7C(uint64_t result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v44;
  uint64_t v45;
  float v46;
  float *v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float *v56;
  BOOL v57;
  int v58;
  float v59;
  float *v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  float v76;
  float v77;
  float *v78;
  float *v79;
  float v80;
  float v81;
  float v82;
  float *v83;
  float v84;
  float *v85;
  float v86;
  float v87;
  float *v88;
  float *v89;
  float v90;
  float *v91;
  BOOL v93;
  uint64_t v94;
  float *v95;
  float *v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  int64_t v102;
  BOOL v103;
  uint64_t v104;
  float *v105;
  float *v106;
  float v107;
  float v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  float *v115;
  float *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  float *v121;
  float v122;
  float v123;
  float *v124;
  float v125;
  int v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float *v131;
  float v132;
  float v133;
  float v134;
  float v135;

  v7 = (float *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v68 = *(a2 - 1);
        v69 = *v8;
        if (v68 < *v8)
        {
          *v8 = v68;
          *(a2 - 1) = v69;
        }
        return result;
      case 3:
        v70 = *v8;
        v71 = v8[1];
        v72 = *(a2 - 1);
        if (v71 >= *v8)
        {
          if (v72 < v71)
          {
            v8[1] = v72;
            *(a2 - 1) = v71;
            v126 = *(_DWORD *)v8;
            v125 = v8[1];
            if (v125 < *v8)
              goto LABEL_195;
          }
        }
        else
        {
          if (v72 >= v71)
          {
            *v8 = v71;
            v8[1] = v70;
            v133 = *(a2 - 1);
            if (v133 >= v70)
              return result;
            v8[1] = v133;
          }
          else
          {
            *v8 = v72;
          }
          *(a2 - 1) = v70;
        }
        return result;
      case 4:
        v83 = v8 + 1;
        v84 = v8[1];
        v85 = v8 + 2;
        v86 = v8[2];
        v87 = *v8;
        if (v84 >= *v8)
        {
          if (v86 >= v84)
          {
LABEL_178:
            v84 = v86;
            v128 = *(a2 - 1);
            if (v128 >= v84)
              return result;
LABEL_179:
            *v85 = v128;
            *(a2 - 1) = v84;
            v125 = *v85;
            v132 = *v83;
            if (*v85 < *v83)
              goto LABEL_194;
            return result;
          }
          *v83 = v86;
          *v85 = v84;
          v88 = v8;
          v89 = v8 + 1;
          v90 = v84;
          if (v86 >= v87)
          {
LABEL_169:
            v128 = *(a2 - 1);
            if (v128 >= v84)
              return result;
            goto LABEL_179;
          }
        }
        else
        {
          v88 = v8;
          v89 = v8 + 2;
          v90 = *v8;
          if (v86 >= v84)
          {
            *v8 = v84;
            v8[1] = v87;
            v88 = v8 + 1;
            v89 = v8 + 2;
            v90 = v87;
            if (v86 >= v87)
              goto LABEL_178;
          }
        }
        *v88 = v86;
        *v89 = v87;
        v84 = v90;
        goto LABEL_169;
      case 5:
        v73 = v8 + 1;
        v74 = v8[1];
        v75 = v8 + 2;
        v76 = v8[2];
        v77 = *v8;
        if (v74 >= *v8)
        {
          if (v76 < v74)
          {
            *v73 = v76;
            *v75 = v74;
            v78 = v8;
            v79 = v8 + 1;
            v80 = v76;
            v81 = v77;
            v82 = v74;
            if (v76 >= v77)
            {
              v80 = v77;
              v77 = v76;
              v76 = v74;
              v127 = v8[3];
              if (v127 < v76)
                goto LABEL_186;
              goto LABEL_190;
            }
            goto LABEL_185;
          }
          v80 = *v8;
          v77 = v8[1];
          v127 = v8[3];
          if (v127 >= v76)
            goto LABEL_190;
        }
        else
        {
          if (v76 < v74)
          {
            v78 = v8;
            v79 = v8 + 2;
            v80 = v8[2];
            v81 = v8[1];
            v82 = *v8;
            goto LABEL_185;
          }
          *v8 = v74;
          v8[1] = v77;
          v78 = v8 + 1;
          v79 = v8 + 2;
          v80 = v74;
          v81 = v76;
          v82 = v77;
          if (v76 < v77)
          {
LABEL_185:
            *v78 = v76;
            *v79 = v77;
            v77 = v81;
            v76 = v82;
            v127 = v8[3];
            if (v127 < v82)
              goto LABEL_186;
LABEL_190:
            v76 = v127;
            goto LABEL_191;
          }
          v80 = v74;
          v127 = v8[3];
          if (v127 >= v76)
            goto LABEL_190;
        }
LABEL_186:
        v8[2] = v127;
        v8[3] = v76;
        if (v127 < v77)
        {
          *v73 = v127;
          *v75 = v77;
          if (v127 < v80)
          {
            *v8 = v127;
            v8[1] = v80;
          }
        }
LABEL_191:
        v134 = *(a2 - 1);
        if (v134 < v76)
        {
          v8[3] = v134;
          *(a2 - 1) = v76;
          v135 = v8[2];
          v125 = v8[3];
          if (v125 < v135)
          {
            v8[2] = v125;
            v8[3] = v135;
            v132 = v8[1];
            if (v125 < v132)
            {
LABEL_194:
              v8[1] = v125;
              v8[2] = v132;
              v126 = *(_DWORD *)v8;
              if (v125 < *v8)
              {
LABEL_195:
                *v8 = v125;
                *((_DWORD *)v8 + 1) = v126;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 95)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v101 = (unint64_t)(v10 - 2) >> 1;
              v102 = v101;
              do
              {
                if (v101 >= v102)
                {
                  v104 = (2 * v102) | 1;
                  v105 = &v8[v104];
                  if (2 * v102 + 2 < v10 && *v105 < v105[1])
                  {
                    ++v105;
                    v104 = 2 * v102 + 2;
                  }
                  v106 = &v8[v102];
                  v107 = *v105;
                  v108 = *v106;
                  if (*v105 >= *v106)
                  {
                    do
                    {
                      v109 = v105;
                      *v106 = v107;
                      if (v101 < v104)
                        break;
                      v110 = 2 * v104;
                      v104 = (2 * v104) | 1;
                      v105 = &v8[v104];
                      v111 = v110 + 2;
                      if (v111 < v10 && *v105 < v105[1])
                      {
                        ++v105;
                        v104 = v111;
                      }
                      v107 = *v105;
                      v106 = v109;
                    }
                    while (*v105 >= v108);
                    *v109 = v108;
                  }
                }
                v103 = v102-- <= 0;
              }
              while (!v103);
              v112 = (unint64_t)v9 >> 2;
              do
              {
                v113 = 0;
                v114 = *(_DWORD *)v8;
                v115 = v8;
                do
                {
                  v116 = v115;
                  v115 += v113 + 1;
                  v117 = 2 * v113;
                  v113 = (2 * v113) | 1;
                  v118 = v117 + 2;
                  if (v118 < v112 && *v115 < v115[1])
                  {
                    ++v115;
                    v113 = v118;
                  }
                  *v116 = *v115;
                }
                while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                if (v115 == --a2)
                {
                  *(_DWORD *)v115 = v114;
                }
                else
                {
                  *v115 = *a2;
                  *(_DWORD *)a2 = v114;
                  v119 = (char *)v115 - (char *)v8 + 4;
                  if (v119 >= 5)
                  {
                    v120 = (((unint64_t)v119 >> 2) - 2) >> 1;
                    v121 = &v8[v120];
                    v122 = *v121;
                    v123 = *v115;
                    if (*v121 < *v115)
                    {
                      do
                      {
                        v124 = v121;
                        *v115 = v122;
                        if (!v120)
                          break;
                        v120 = (v120 - 1) >> 1;
                        v121 = &v8[v120];
                        v122 = *v121;
                        v115 = v124;
                      }
                      while (*v121 < v123);
                      *v124 = v123;
                    }
                  }
                }
                v103 = v112-- <= 2;
              }
              while (!v103);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x201)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = *v8;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v13 < v16)
              {
                *v12 = v13;
                goto LABEL_31;
              }
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 < v17)
              {
                *v8 = v29;
LABEL_31:
                *(a2 - 1) = v17;
              }
            }
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *(_DWORD *)v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *(_DWORD *)v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v24 = *(v22 - 1);
          v23 = v22 - 1;
          v25 = v24;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v24 >= v26)
          {
            if (v27 < v25)
            {
              *v23 = v27;
              *(a2 - 2) = v25;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v25)
            {
              v8[1] = v25;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v33 = v31[1];
          v32 = v31 + 1;
          v34 = v33;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v33 >= v35)
          {
            if (v36 < v34)
            {
              *v32 = v36;
              *(a2 - 3) = v34;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v34)
            {
              v8[2] = v34;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = v40;
                v43 = *(_DWORD *)v8;
                *v8 = v42;
                *(_DWORD *)v12 = v43;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v44 = *(_DWORD *)v8;
            *v8 = v39;
            *(_DWORD *)v12 = v44;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v60 = v8 + 1;
              do
              {
                v8 = v60;
                if (v60 >= a2)
                  break;
                ++v60;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v59 = v8[1];
                ++v8;
              }
              while (v20 >= v59);
            }
            v61 = a2;
            if (v8 < a2)
            {
              v61 = a2;
              do
                v62 = *--v61;
              while (v20 < v62);
            }
            if (v8 < v61)
            {
              v63 = *v8;
              v64 = *v61;
              do
              {
                *v8 = v64;
                *v61 = v63;
                do
                {
                  v65 = v8[1];
                  ++v8;
                  v63 = v65;
                }
                while (v20 >= v65);
                do
                {
                  v66 = *--v61;
                  v64 = v66;
                }
                while (v20 < v66);
              }
              while (v8 < v61);
            }
            v67 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v67;
            a4 = 0;
            *v67 = v20;
            continue;
          }
          v58 = *(_DWORD *)v8;
          *v8 = v41;
          *(_DWORD *)v12 = v58;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v45 = 0;
          do
            v46 = v8[++v45];
          while (v46 < v20);
          v47 = &v8[v45];
          v48 = a2;
          if (v45 == 1)
          {
            v48 = a2;
            do
            {
              if (v47 >= v48)
                break;
              v50 = *--v48;
            }
            while (v50 >= v20);
          }
          else
          {
            do
              v49 = *--v48;
            while (v49 >= v20);
          }
          if (v47 >= v48)
          {
            v56 = v47 - 1;
            if (v47 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v51 = *v48;
            v52 = &v8[v45];
            v53 = v48;
            do
            {
              *v52 = v51;
              *v53 = v46;
              do
              {
                v54 = v52[1];
                ++v52;
                v46 = v54;
              }
              while (v54 < v20);
              do
              {
                v55 = *--v53;
                v51 = v55;
              }
              while (v55 >= v20);
            }
            while (v52 < v53);
            v56 = v52 - 1;
            if (v52 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v56;
          }
LABEL_74:
          *v56 = v20;
          if (v47 < v48)
            goto LABEL_77;
          v57 = sub_2239B68C4(v8, v56);
          v8 = v56 + 1;
          result = sub_2239B68C4(v56 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v57)
              continue;
LABEL_77:
            result = sub_2239B5E7C(v7, v56, a3, a4 & 1);
            a4 = 0;
            v8 = v56 + 1;
            continue;
          }
          a2 = v56;
          if (v57)
            return result;
          goto LABEL_2;
        }
        v91 = v8 + 1;
        v93 = v8 == a2 || v91 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v93)
          {
            v94 = 4;
            v95 = v8;
            do
            {
              v98 = *v95;
              v97 = v95[1];
              v95 = v91;
              if (v97 < v98)
              {
                v99 = v94;
                do
                {
                  *(float *)((char *)v8 + v99) = v98;
                  v100 = v99 - 4;
                  if (v99 == 4)
                  {
                    v96 = v8;
                    goto LABEL_123;
                  }
                  v98 = *(float *)((char *)v8 + v99 - 8);
                  v99 -= 4;
                }
                while (v97 < v98);
                v96 = (float *)((char *)v8 + v100);
LABEL_123:
                *v96 = v97;
              }
              v91 = v95 + 1;
              v94 += 4;
            }
            while (v95 + 1 != a2);
          }
        }
        else if (!v93)
        {
          do
          {
            v130 = *v7;
            v129 = v7[1];
            v7 = v91;
            if (v129 < v130)
            {
              v131 = v91;
              do
              {
                *v131 = v130;
                v130 = *(v131 - 2);
                --v131;
              }
              while (v129 < v130);
              *v131 = v129;
            }
            ++v91;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_2239B68C4(float *a1, float *a2)
{
  float v2;
  float v3;
  float *v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float *v32;
  int v33;
  uint64_t i;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v2 = *(a2 - 1);
      v3 = *a1;
      if (v2 >= *a1)
        return 1;
      *a1 = v2;
      *(a2 - 1) = v3;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v40 = *a1;
          v39 = a1[1];
          if (v39 < *a1)
          {
            *a1 = v39;
            a1[1] = v40;
            return 1;
          }
        }
      }
      else
      {
        if (v13 < v12)
        {
          *a1 = v13;
          *(a2 - 1) = v11;
          return 1;
        }
        *a1 = v12;
        a1[1] = v11;
        v45 = *(a2 - 1);
        if (v45 < v11)
        {
          a1[1] = v45;
          *(a2 - 1) = v11;
          return 1;
        }
      }
      return 1;
    case 4:
      v24 = a1 + 1;
      v25 = a1[1];
      v26 = a1 + 2;
      v27 = a1[2];
      v28 = *a1;
      if (v25 >= *a1)
      {
        if (v27 >= v25)
          goto LABEL_43;
        *v24 = v27;
        *v26 = v25;
        v29 = a1;
        v30 = a1 + 1;
        v31 = v25;
        if (v27 >= v28)
        {
LABEL_41:
          v42 = *(a2 - 1);
          if (v42 >= v25)
            return 1;
          goto LABEL_44;
        }
      }
      else
      {
        v29 = a1;
        v30 = a1 + 2;
        v31 = *a1;
        if (v27 >= v25)
        {
          *a1 = v25;
          a1[1] = v28;
          v29 = a1 + 1;
          v30 = a1 + 2;
          v31 = v28;
          if (v27 >= v28)
          {
LABEL_43:
            v25 = v27;
            v42 = *(a2 - 1);
            if (v42 >= v25)
              return 1;
LABEL_44:
            *v26 = v42;
            *(a2 - 1) = v25;
            v43 = *v26;
            v44 = *v24;
            if (*v26 < *v24)
              goto LABEL_59;
            return 1;
          }
        }
      }
      *v29 = v27;
      *v30 = v28;
      v25 = v31;
      goto LABEL_41;
    case 5:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 >= *a1)
      {
        if (v17 >= v15)
        {
          v21 = *a1;
          v18 = a1[1];
          v41 = a1[3];
          if (v41 < v17)
            goto LABEL_51;
          goto LABEL_55;
        }
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v17;
        v22 = v18;
        v23 = v15;
        if (v17 >= v18)
        {
          v21 = v18;
          v18 = v17;
          v17 = v15;
          v41 = a1[3];
          if (v41 < v17)
          {
LABEL_51:
            a1[2] = v41;
            a1[3] = v17;
            if (v41 < v18)
            {
              *v14 = v41;
              *v16 = v18;
              if (v41 < v21)
              {
                *a1 = v41;
                a1[1] = v21;
              }
            }
LABEL_56:
            v46 = *(a2 - 1);
            if (v46 < v17)
            {
              a1[3] = v46;
              *(a2 - 1) = v17;
              v47 = a1[2];
              v43 = a1[3];
              if (v43 < v47)
              {
                a1[2] = v43;
                a1[3] = v47;
                v44 = a1[1];
                if (v43 < v44)
                {
LABEL_59:
                  a1[1] = v43;
                  a1[2] = v44;
                  v48 = *a1;
                  if (v43 < *a1)
                  {
                    *a1 = v43;
                    a1[1] = v48;
                    return 1;
                  }
                }
              }
            }
            return 1;
          }
LABEL_55:
          v17 = v41;
          goto LABEL_56;
        }
      }
      else if (v17 >= v15)
      {
        *a1 = v15;
        a1[1] = v18;
        v19 = a1 + 1;
        v20 = a1 + 2;
        v21 = v15;
        v22 = v17;
        v23 = v18;
        if (v17 >= v18)
        {
          v21 = v15;
          v41 = a1[3];
          if (v41 < v17)
            goto LABEL_51;
          goto LABEL_55;
        }
      }
      else
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = a1[2];
        v22 = a1[1];
        v23 = *a1;
      }
      *v19 = v17;
      *v20 = v18;
      v18 = v22;
      v17 = v23;
      v41 = a1[3];
      if (v41 < v23)
        goto LABEL_51;
      goto LABEL_55;
    default:
      v5 = a1 + 2;
      v6 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 < *a1)
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v6 >= v7)
        {
          *a1 = v7;
          a1[1] = v8;
          v9 = a1 + 1;
          v10 = a1 + 2;
          if (v6 >= v8)
            goto LABEL_21;
        }
LABEL_20:
        *v9 = v6;
        *v10 = v8;
        goto LABEL_21;
      }
      if (v6 < v7)
      {
        a1[1] = v6;
        *v5 = v7;
        v9 = a1;
        v10 = a1 + 1;
        if (v6 < v8)
          goto LABEL_20;
      }
LABEL_21:
      v32 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v33 = 0;
      for (i = 12; ; i += 4)
      {
        v35 = *v32;
        v36 = *v5;
        if (*v32 < *v5)
          break;
LABEL_24:
        v5 = v32++;
        if (v32 == a2)
          return 1;
      }
      v37 = i;
      do
      {
        *(float *)((char *)a1 + v37) = v36;
        v38 = v37 - 4;
        if (v37 == 4)
        {
          *a1 = v35;
          if (++v33 != 8)
            goto LABEL_24;
          return v32 + 1 == a2;
        }
        v36 = *(float *)((char *)a1 + v37 - 8);
        v37 -= 4;
      }
      while (v35 < v36);
      *(float *)((char *)a1 + v38) = v35;
      if (++v33 != 8)
        goto LABEL_24;
      return v32 + 1 == a2;
  }
}

uint64_t sub_2239B6CB4(uint64_t result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v44;
  uint64_t v45;
  float v46;
  float *v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float *v56;
  BOOL v57;
  int v58;
  float v59;
  float *v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  float v76;
  float v77;
  float *v78;
  float *v79;
  float v80;
  float v81;
  float v82;
  float *v83;
  float v84;
  float *v85;
  float v86;
  float v87;
  float *v88;
  float *v89;
  float v90;
  float *v91;
  BOOL v93;
  uint64_t v94;
  float *v95;
  float *v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  int64_t v102;
  BOOL v103;
  uint64_t v104;
  float *v105;
  float *v106;
  float v107;
  float v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  float *v115;
  float *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  float *v121;
  float v122;
  float v123;
  float *v124;
  float v125;
  int v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float *v131;
  float v132;
  float v133;
  float v134;
  float v135;

  v7 = (float *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v68 = *(a2 - 1);
        v69 = *v8;
        if (v68 < *v8)
        {
          *v8 = v68;
          *(a2 - 1) = v69;
        }
        return result;
      case 3:
        v70 = *v8;
        v71 = v8[1];
        v72 = *(a2 - 1);
        if (v71 >= *v8)
        {
          if (v72 < v71)
          {
            v8[1] = v72;
            *(a2 - 1) = v71;
            v126 = *(_DWORD *)v8;
            v125 = v8[1];
            if (v125 < *v8)
              goto LABEL_195;
          }
        }
        else
        {
          if (v72 >= v71)
          {
            *v8 = v71;
            v8[1] = v70;
            v133 = *(a2 - 1);
            if (v133 >= v70)
              return result;
            v8[1] = v133;
          }
          else
          {
            *v8 = v72;
          }
          *(a2 - 1) = v70;
        }
        return result;
      case 4:
        v83 = v8 + 1;
        v84 = v8[1];
        v85 = v8 + 2;
        v86 = v8[2];
        v87 = *v8;
        if (v84 >= *v8)
        {
          if (v86 >= v84)
          {
LABEL_178:
            v84 = v86;
            v128 = *(a2 - 1);
            if (v128 >= v84)
              return result;
LABEL_179:
            *v85 = v128;
            *(a2 - 1) = v84;
            v125 = *v85;
            v132 = *v83;
            if (*v85 < *v83)
              goto LABEL_194;
            return result;
          }
          *v83 = v86;
          *v85 = v84;
          v88 = v8;
          v89 = v8 + 1;
          v90 = v84;
          if (v86 >= v87)
          {
LABEL_169:
            v128 = *(a2 - 1);
            if (v128 >= v84)
              return result;
            goto LABEL_179;
          }
        }
        else
        {
          v88 = v8;
          v89 = v8 + 2;
          v90 = *v8;
          if (v86 >= v84)
          {
            *v8 = v84;
            v8[1] = v87;
            v88 = v8 + 1;
            v89 = v8 + 2;
            v90 = v87;
            if (v86 >= v87)
              goto LABEL_178;
          }
        }
        *v88 = v86;
        *v89 = v87;
        v84 = v90;
        goto LABEL_169;
      case 5:
        v73 = v8 + 1;
        v74 = v8[1];
        v75 = v8 + 2;
        v76 = v8[2];
        v77 = *v8;
        if (v74 >= *v8)
        {
          if (v76 < v74)
          {
            *v73 = v76;
            *v75 = v74;
            v78 = v8;
            v79 = v8 + 1;
            v80 = v76;
            v81 = v77;
            v82 = v74;
            if (v76 >= v77)
            {
              v80 = v77;
              v77 = v76;
              v76 = v74;
              v127 = v8[3];
              if (v127 < v76)
                goto LABEL_186;
              goto LABEL_190;
            }
            goto LABEL_185;
          }
          v80 = *v8;
          v77 = v8[1];
          v127 = v8[3];
          if (v127 >= v76)
            goto LABEL_190;
        }
        else
        {
          if (v76 < v74)
          {
            v78 = v8;
            v79 = v8 + 2;
            v80 = v8[2];
            v81 = v8[1];
            v82 = *v8;
            goto LABEL_185;
          }
          *v8 = v74;
          v8[1] = v77;
          v78 = v8 + 1;
          v79 = v8 + 2;
          v80 = v74;
          v81 = v76;
          v82 = v77;
          if (v76 < v77)
          {
LABEL_185:
            *v78 = v76;
            *v79 = v77;
            v77 = v81;
            v76 = v82;
            v127 = v8[3];
            if (v127 < v82)
              goto LABEL_186;
LABEL_190:
            v76 = v127;
            goto LABEL_191;
          }
          v80 = v74;
          v127 = v8[3];
          if (v127 >= v76)
            goto LABEL_190;
        }
LABEL_186:
        v8[2] = v127;
        v8[3] = v76;
        if (v127 < v77)
        {
          *v73 = v127;
          *v75 = v77;
          if (v127 < v80)
          {
            *v8 = v127;
            v8[1] = v80;
          }
        }
LABEL_191:
        v134 = *(a2 - 1);
        if (v134 < v76)
        {
          v8[3] = v134;
          *(a2 - 1) = v76;
          v135 = v8[2];
          v125 = v8[3];
          if (v125 < v135)
          {
            v8[2] = v125;
            v8[3] = v135;
            v132 = v8[1];
            if (v125 < v132)
            {
LABEL_194:
              v8[1] = v125;
              v8[2] = v132;
              v126 = *(_DWORD *)v8;
              if (v125 < *v8)
              {
LABEL_195:
                *v8 = v125;
                *((_DWORD *)v8 + 1) = v126;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 95)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v101 = (unint64_t)(v10 - 2) >> 1;
              v102 = v101;
              do
              {
                if (v101 >= v102)
                {
                  v104 = (2 * v102) | 1;
                  v105 = &v8[v104];
                  if (2 * v102 + 2 < v10 && *v105 < v105[1])
                  {
                    ++v105;
                    v104 = 2 * v102 + 2;
                  }
                  v106 = &v8[v102];
                  v107 = *v105;
                  v108 = *v106;
                  if (*v105 >= *v106)
                  {
                    do
                    {
                      v109 = v105;
                      *v106 = v107;
                      if (v101 < v104)
                        break;
                      v110 = 2 * v104;
                      v104 = (2 * v104) | 1;
                      v105 = &v8[v104];
                      v111 = v110 + 2;
                      if (v111 < v10 && *v105 < v105[1])
                      {
                        ++v105;
                        v104 = v111;
                      }
                      v107 = *v105;
                      v106 = v109;
                    }
                    while (*v105 >= v108);
                    *v109 = v108;
                  }
                }
                v103 = v102-- <= 0;
              }
              while (!v103);
              v112 = (unint64_t)v9 >> 2;
              do
              {
                v113 = 0;
                v114 = *(_DWORD *)v8;
                v115 = v8;
                do
                {
                  v116 = v115;
                  v115 += v113 + 1;
                  v117 = 2 * v113;
                  v113 = (2 * v113) | 1;
                  v118 = v117 + 2;
                  if (v118 < v112 && *v115 < v115[1])
                  {
                    ++v115;
                    v113 = v118;
                  }
                  *v116 = *v115;
                }
                while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                if (v115 == --a2)
                {
                  *(_DWORD *)v115 = v114;
                }
                else
                {
                  *v115 = *a2;
                  *(_DWORD *)a2 = v114;
                  v119 = (char *)v115 - (char *)v8 + 4;
                  if (v119 >= 5)
                  {
                    v120 = (((unint64_t)v119 >> 2) - 2) >> 1;
                    v121 = &v8[v120];
                    v122 = *v121;
                    v123 = *v115;
                    if (*v121 < *v115)
                    {
                      do
                      {
                        v124 = v121;
                        *v115 = v122;
                        if (!v120)
                          break;
                        v120 = (v120 - 1) >> 1;
                        v121 = &v8[v120];
                        v122 = *v121;
                        v115 = v124;
                      }
                      while (*v121 < v123);
                      *v124 = v123;
                    }
                  }
                }
                v103 = v112-- <= 2;
              }
              while (!v103);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x201)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = *v8;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v13 < v16)
              {
                *v12 = v13;
                goto LABEL_31;
              }
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 < v17)
              {
                *v8 = v29;
LABEL_31:
                *(a2 - 1) = v17;
              }
            }
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *(_DWORD *)v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *(_DWORD *)v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v24 = *(v22 - 1);
          v23 = v22 - 1;
          v25 = v24;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v24 >= v26)
          {
            if (v27 < v25)
            {
              *v23 = v27;
              *(a2 - 2) = v25;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v25)
            {
              v8[1] = v25;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v33 = v31[1];
          v32 = v31 + 1;
          v34 = v33;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v33 >= v35)
          {
            if (v36 < v34)
            {
              *v32 = v36;
              *(a2 - 3) = v34;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v34)
            {
              v8[2] = v34;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = v40;
                v43 = *(_DWORD *)v8;
                *v8 = v42;
                *(_DWORD *)v12 = v43;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v44 = *(_DWORD *)v8;
            *v8 = v39;
            *(_DWORD *)v12 = v44;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v60 = v8 + 1;
              do
              {
                v8 = v60;
                if (v60 >= a2)
                  break;
                ++v60;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v59 = v8[1];
                ++v8;
              }
              while (v20 >= v59);
            }
            v61 = a2;
            if (v8 < a2)
            {
              v61 = a2;
              do
                v62 = *--v61;
              while (v20 < v62);
            }
            if (v8 < v61)
            {
              v63 = *v8;
              v64 = *v61;
              do
              {
                *v8 = v64;
                *v61 = v63;
                do
                {
                  v65 = v8[1];
                  ++v8;
                  v63 = v65;
                }
                while (v20 >= v65);
                do
                {
                  v66 = *--v61;
                  v64 = v66;
                }
                while (v20 < v66);
              }
              while (v8 < v61);
            }
            v67 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v67;
            a4 = 0;
            *v67 = v20;
            continue;
          }
          v58 = *(_DWORD *)v8;
          *v8 = v41;
          *(_DWORD *)v12 = v58;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v45 = 0;
          do
            v46 = v8[++v45];
          while (v46 < v20);
          v47 = &v8[v45];
          v48 = a2;
          if (v45 == 1)
          {
            v48 = a2;
            do
            {
              if (v47 >= v48)
                break;
              v50 = *--v48;
            }
            while (v50 >= v20);
          }
          else
          {
            do
              v49 = *--v48;
            while (v49 >= v20);
          }
          if (v47 >= v48)
          {
            v56 = v47 - 1;
            if (v47 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v51 = *v48;
            v52 = &v8[v45];
            v53 = v48;
            do
            {
              *v52 = v51;
              *v53 = v46;
              do
              {
                v54 = v52[1];
                ++v52;
                v46 = v54;
              }
              while (v54 < v20);
              do
              {
                v55 = *--v53;
                v51 = v55;
              }
              while (v55 >= v20);
            }
            while (v52 < v53);
            v56 = v52 - 1;
            if (v52 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v56;
          }
LABEL_74:
          *v56 = v20;
          if (v47 < v48)
            goto LABEL_77;
          v57 = sub_2239B76FC(v8, v56);
          v8 = v56 + 1;
          result = sub_2239B76FC(v56 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v57)
              continue;
LABEL_77:
            result = sub_2239B6CB4(v7, v56, a3, a4 & 1);
            a4 = 0;
            v8 = v56 + 1;
            continue;
          }
          a2 = v56;
          if (v57)
            return result;
          goto LABEL_2;
        }
        v91 = v8 + 1;
        v93 = v8 == a2 || v91 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v93)
          {
            v94 = 4;
            v95 = v8;
            do
            {
              v98 = *v95;
              v97 = v95[1];
              v95 = v91;
              if (v97 < v98)
              {
                v99 = v94;
                do
                {
                  *(float *)((char *)v8 + v99) = v98;
                  v100 = v99 - 4;
                  if (v99 == 4)
                  {
                    v96 = v8;
                    goto LABEL_123;
                  }
                  v98 = *(float *)((char *)v8 + v99 - 8);
                  v99 -= 4;
                }
                while (v97 < v98);
                v96 = (float *)((char *)v8 + v100);
LABEL_123:
                *v96 = v97;
              }
              v91 = v95 + 1;
              v94 += 4;
            }
            while (v95 + 1 != a2);
          }
        }
        else if (!v93)
        {
          do
          {
            v130 = *v7;
            v129 = v7[1];
            v7 = v91;
            if (v129 < v130)
            {
              v131 = v91;
              do
              {
                *v131 = v130;
                v130 = *(v131 - 2);
                --v131;
              }
              while (v129 < v130);
              *v131 = v129;
            }
            ++v91;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_2239B76FC(float *a1, float *a2)
{
  float v2;
  float v3;
  float *v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float *v32;
  int v33;
  uint64_t i;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v2 = *(a2 - 1);
      v3 = *a1;
      if (v2 >= *a1)
        return 1;
      *a1 = v2;
      *(a2 - 1) = v3;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v40 = *a1;
          v39 = a1[1];
          if (v39 < *a1)
          {
            *a1 = v39;
            a1[1] = v40;
            return 1;
          }
        }
      }
      else
      {
        if (v13 < v12)
        {
          *a1 = v13;
          *(a2 - 1) = v11;
          return 1;
        }
        *a1 = v12;
        a1[1] = v11;
        v45 = *(a2 - 1);
        if (v45 < v11)
        {
          a1[1] = v45;
          *(a2 - 1) = v11;
          return 1;
        }
      }
      return 1;
    case 4:
      v24 = a1 + 1;
      v25 = a1[1];
      v26 = a1 + 2;
      v27 = a1[2];
      v28 = *a1;
      if (v25 >= *a1)
      {
        if (v27 >= v25)
          goto LABEL_43;
        *v24 = v27;
        *v26 = v25;
        v29 = a1;
        v30 = a1 + 1;
        v31 = v25;
        if (v27 >= v28)
        {
LABEL_41:
          v42 = *(a2 - 1);
          if (v42 >= v25)
            return 1;
          goto LABEL_44;
        }
      }
      else
      {
        v29 = a1;
        v30 = a1 + 2;
        v31 = *a1;
        if (v27 >= v25)
        {
          *a1 = v25;
          a1[1] = v28;
          v29 = a1 + 1;
          v30 = a1 + 2;
          v31 = v28;
          if (v27 >= v28)
          {
LABEL_43:
            v25 = v27;
            v42 = *(a2 - 1);
            if (v42 >= v25)
              return 1;
LABEL_44:
            *v26 = v42;
            *(a2 - 1) = v25;
            v43 = *v26;
            v44 = *v24;
            if (*v26 < *v24)
              goto LABEL_59;
            return 1;
          }
        }
      }
      *v29 = v27;
      *v30 = v28;
      v25 = v31;
      goto LABEL_41;
    case 5:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 >= *a1)
      {
        if (v17 >= v15)
        {
          v21 = *a1;
          v18 = a1[1];
          v41 = a1[3];
          if (v41 < v17)
            goto LABEL_51;
          goto LABEL_55;
        }
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v17;
        v22 = v18;
        v23 = v15;
        if (v17 >= v18)
        {
          v21 = v18;
          v18 = v17;
          v17 = v15;
          v41 = a1[3];
          if (v41 < v17)
          {
LABEL_51:
            a1[2] = v41;
            a1[3] = v17;
            if (v41 < v18)
            {
              *v14 = v41;
              *v16 = v18;
              if (v41 < v21)
              {
                *a1 = v41;
                a1[1] = v21;
              }
            }
LABEL_56:
            v46 = *(a2 - 1);
            if (v46 < v17)
            {
              a1[3] = v46;
              *(a2 - 1) = v17;
              v47 = a1[2];
              v43 = a1[3];
              if (v43 < v47)
              {
                a1[2] = v43;
                a1[3] = v47;
                v44 = a1[1];
                if (v43 < v44)
                {
LABEL_59:
                  a1[1] = v43;
                  a1[2] = v44;
                  v48 = *a1;
                  if (v43 < *a1)
                  {
                    *a1 = v43;
                    a1[1] = v48;
                    return 1;
                  }
                }
              }
            }
            return 1;
          }
LABEL_55:
          v17 = v41;
          goto LABEL_56;
        }
      }
      else if (v17 >= v15)
      {
        *a1 = v15;
        a1[1] = v18;
        v19 = a1 + 1;
        v20 = a1 + 2;
        v21 = v15;
        v22 = v17;
        v23 = v18;
        if (v17 >= v18)
        {
          v21 = v15;
          v41 = a1[3];
          if (v41 < v17)
            goto LABEL_51;
          goto LABEL_55;
        }
      }
      else
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = a1[2];
        v22 = a1[1];
        v23 = *a1;
      }
      *v19 = v17;
      *v20 = v18;
      v18 = v22;
      v17 = v23;
      v41 = a1[3];
      if (v41 < v23)
        goto LABEL_51;
      goto LABEL_55;
    default:
      v5 = a1 + 2;
      v6 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 < *a1)
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v6 >= v7)
        {
          *a1 = v7;
          a1[1] = v8;
          v9 = a1 + 1;
          v10 = a1 + 2;
          if (v6 >= v8)
            goto LABEL_21;
        }
LABEL_20:
        *v9 = v6;
        *v10 = v8;
        goto LABEL_21;
      }
      if (v6 < v7)
      {
        a1[1] = v6;
        *v5 = v7;
        v9 = a1;
        v10 = a1 + 1;
        if (v6 < v8)
          goto LABEL_20;
      }
LABEL_21:
      v32 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v33 = 0;
      for (i = 12; ; i += 4)
      {
        v35 = *v32;
        v36 = *v5;
        if (*v32 < *v5)
          break;
LABEL_24:
        v5 = v32++;
        if (v32 == a2)
          return 1;
      }
      v37 = i;
      do
      {
        *(float *)((char *)a1 + v37) = v36;
        v38 = v37 - 4;
        if (v37 == 4)
        {
          *a1 = v35;
          if (++v33 != 8)
            goto LABEL_24;
          return v32 + 1 == a2;
        }
        v36 = *(float *)((char *)a1 + v37 - 8);
        v37 -= 4;
      }
      while (v35 < v36);
      *(float *)((char *)a1 + v38) = v35;
      if (++v33 != 8)
        goto LABEL_24;
      return v32 + 1 == a2;
  }
}

uint64_t sub_2239B7AEC(uint64_t result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v44;
  uint64_t v45;
  float v46;
  float *v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float *v56;
  BOOL v57;
  int v58;
  float v59;
  float *v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  float v76;
  float v77;
  float *v78;
  float *v79;
  float v80;
  float v81;
  float v82;
  float *v83;
  float v84;
  float *v85;
  float v86;
  float v87;
  float *v88;
  float *v89;
  float v90;
  float *v91;
  BOOL v93;
  uint64_t v94;
  float *v95;
  float *v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  int64_t v102;
  BOOL v103;
  uint64_t v104;
  float *v105;
  float *v106;
  float v107;
  float v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  float *v115;
  float *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  float *v121;
  float v122;
  float v123;
  float *v124;
  float v125;
  int v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float *v131;
  float v132;
  float v133;
  float v134;
  float v135;

  v7 = (float *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v68 = *(a2 - 1);
        v69 = *v8;
        if (v68 < *v8)
        {
          *v8 = v68;
          *(a2 - 1) = v69;
        }
        return result;
      case 3:
        v70 = *v8;
        v71 = v8[1];
        v72 = *(a2 - 1);
        if (v71 >= *v8)
        {
          if (v72 < v71)
          {
            v8[1] = v72;
            *(a2 - 1) = v71;
            v126 = *(_DWORD *)v8;
            v125 = v8[1];
            if (v125 < *v8)
              goto LABEL_195;
          }
        }
        else
        {
          if (v72 >= v71)
          {
            *v8 = v71;
            v8[1] = v70;
            v133 = *(a2 - 1);
            if (v133 >= v70)
              return result;
            v8[1] = v133;
          }
          else
          {
            *v8 = v72;
          }
          *(a2 - 1) = v70;
        }
        return result;
      case 4:
        v83 = v8 + 1;
        v84 = v8[1];
        v85 = v8 + 2;
        v86 = v8[2];
        v87 = *v8;
        if (v84 >= *v8)
        {
          if (v86 >= v84)
          {
LABEL_178:
            v84 = v86;
            v128 = *(a2 - 1);
            if (v128 >= v84)
              return result;
LABEL_179:
            *v85 = v128;
            *(a2 - 1) = v84;
            v125 = *v85;
            v132 = *v83;
            if (*v85 < *v83)
              goto LABEL_194;
            return result;
          }
          *v83 = v86;
          *v85 = v84;
          v88 = v8;
          v89 = v8 + 1;
          v90 = v84;
          if (v86 >= v87)
          {
LABEL_169:
            v128 = *(a2 - 1);
            if (v128 >= v84)
              return result;
            goto LABEL_179;
          }
        }
        else
        {
          v88 = v8;
          v89 = v8 + 2;
          v90 = *v8;
          if (v86 >= v84)
          {
            *v8 = v84;
            v8[1] = v87;
            v88 = v8 + 1;
            v89 = v8 + 2;
            v90 = v87;
            if (v86 >= v87)
              goto LABEL_178;
          }
        }
        *v88 = v86;
        *v89 = v87;
        v84 = v90;
        goto LABEL_169;
      case 5:
        v73 = v8 + 1;
        v74 = v8[1];
        v75 = v8 + 2;
        v76 = v8[2];
        v77 = *v8;
        if (v74 >= *v8)
        {
          if (v76 < v74)
          {
            *v73 = v76;
            *v75 = v74;
            v78 = v8;
            v79 = v8 + 1;
            v80 = v76;
            v81 = v77;
            v82 = v74;
            if (v76 >= v77)
            {
              v80 = v77;
              v77 = v76;
              v76 = v74;
              v127 = v8[3];
              if (v127 < v76)
                goto LABEL_186;
              goto LABEL_190;
            }
            goto LABEL_185;
          }
          v80 = *v8;
          v77 = v8[1];
          v127 = v8[3];
          if (v127 >= v76)
            goto LABEL_190;
        }
        else
        {
          if (v76 < v74)
          {
            v78 = v8;
            v79 = v8 + 2;
            v80 = v8[2];
            v81 = v8[1];
            v82 = *v8;
            goto LABEL_185;
          }
          *v8 = v74;
          v8[1] = v77;
          v78 = v8 + 1;
          v79 = v8 + 2;
          v80 = v74;
          v81 = v76;
          v82 = v77;
          if (v76 < v77)
          {
LABEL_185:
            *v78 = v76;
            *v79 = v77;
            v77 = v81;
            v76 = v82;
            v127 = v8[3];
            if (v127 < v82)
              goto LABEL_186;
LABEL_190:
            v76 = v127;
            goto LABEL_191;
          }
          v80 = v74;
          v127 = v8[3];
          if (v127 >= v76)
            goto LABEL_190;
        }
LABEL_186:
        v8[2] = v127;
        v8[3] = v76;
        if (v127 < v77)
        {
          *v73 = v127;
          *v75 = v77;
          if (v127 < v80)
          {
            *v8 = v127;
            v8[1] = v80;
          }
        }
LABEL_191:
        v134 = *(a2 - 1);
        if (v134 < v76)
        {
          v8[3] = v134;
          *(a2 - 1) = v76;
          v135 = v8[2];
          v125 = v8[3];
          if (v125 < v135)
          {
            v8[2] = v125;
            v8[3] = v135;
            v132 = v8[1];
            if (v125 < v132)
            {
LABEL_194:
              v8[1] = v125;
              v8[2] = v132;
              v126 = *(_DWORD *)v8;
              if (v125 < *v8)
              {
LABEL_195:
                *v8 = v125;
                *((_DWORD *)v8 + 1) = v126;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 95)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v101 = (unint64_t)(v10 - 2) >> 1;
              v102 = v101;
              do
              {
                if (v101 >= v102)
                {
                  v104 = (2 * v102) | 1;
                  v105 = &v8[v104];
                  if (2 * v102 + 2 < v10 && *v105 < v105[1])
                  {
                    ++v105;
                    v104 = 2 * v102 + 2;
                  }
                  v106 = &v8[v102];
                  v107 = *v105;
                  v108 = *v106;
                  if (*v105 >= *v106)
                  {
                    do
                    {
                      v109 = v105;
                      *v106 = v107;
                      if (v101 < v104)
                        break;
                      v110 = 2 * v104;
                      v104 = (2 * v104) | 1;
                      v105 = &v8[v104];
                      v111 = v110 + 2;
                      if (v111 < v10 && *v105 < v105[1])
                      {
                        ++v105;
                        v104 = v111;
                      }
                      v107 = *v105;
                      v106 = v109;
                    }
                    while (*v105 >= v108);
                    *v109 = v108;
                  }
                }
                v103 = v102-- <= 0;
              }
              while (!v103);
              v112 = (unint64_t)v9 >> 2;
              do
              {
                v113 = 0;
                v114 = *(_DWORD *)v8;
                v115 = v8;
                do
                {
                  v116 = v115;
                  v115 += v113 + 1;
                  v117 = 2 * v113;
                  v113 = (2 * v113) | 1;
                  v118 = v117 + 2;
                  if (v118 < v112 && *v115 < v115[1])
                  {
                    ++v115;
                    v113 = v118;
                  }
                  *v116 = *v115;
                }
                while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                if (v115 == --a2)
                {
                  *(_DWORD *)v115 = v114;
                }
                else
                {
                  *v115 = *a2;
                  *(_DWORD *)a2 = v114;
                  v119 = (char *)v115 - (char *)v8 + 4;
                  if (v119 >= 5)
                  {
                    v120 = (((unint64_t)v119 >> 2) - 2) >> 1;
                    v121 = &v8[v120];
                    v122 = *v121;
                    v123 = *v115;
                    if (*v121 < *v115)
                    {
                      do
                      {
                        v124 = v121;
                        *v115 = v122;
                        if (!v120)
                          break;
                        v120 = (v120 - 1) >> 1;
                        v121 = &v8[v120];
                        v122 = *v121;
                        v115 = v124;
                      }
                      while (*v121 < v123);
                      *v124 = v123;
                    }
                  }
                }
                v103 = v112-- <= 2;
              }
              while (!v103);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x201)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = *v8;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v13 < v16)
              {
                *v12 = v13;
                goto LABEL_31;
              }
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 < v17)
              {
                *v8 = v29;
LABEL_31:
                *(a2 - 1) = v17;
              }
            }
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *(_DWORD *)v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *(_DWORD *)v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v24 = *(v22 - 1);
          v23 = v22 - 1;
          v25 = v24;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v24 >= v26)
          {
            if (v27 < v25)
            {
              *v23 = v27;
              *(a2 - 2) = v25;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v25)
            {
              v8[1] = v25;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v33 = v31[1];
          v32 = v31 + 1;
          v34 = v33;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v33 >= v35)
          {
            if (v36 < v34)
            {
              *v32 = v36;
              *(a2 - 3) = v34;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v34)
            {
              v8[2] = v34;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = v40;
                v43 = *(_DWORD *)v8;
                *v8 = v42;
                *(_DWORD *)v12 = v43;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v44 = *(_DWORD *)v8;
            *v8 = v39;
            *(_DWORD *)v12 = v44;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v60 = v8 + 1;
              do
              {
                v8 = v60;
                if (v60 >= a2)
                  break;
                ++v60;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v59 = v8[1];
                ++v8;
              }
              while (v20 >= v59);
            }
            v61 = a2;
            if (v8 < a2)
            {
              v61 = a2;
              do
                v62 = *--v61;
              while (v20 < v62);
            }
            if (v8 < v61)
            {
              v63 = *v8;
              v64 = *v61;
              do
              {
                *v8 = v64;
                *v61 = v63;
                do
                {
                  v65 = v8[1];
                  ++v8;
                  v63 = v65;
                }
                while (v20 >= v65);
                do
                {
                  v66 = *--v61;
                  v64 = v66;
                }
                while (v20 < v66);
              }
              while (v8 < v61);
            }
            v67 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v67;
            a4 = 0;
            *v67 = v20;
            continue;
          }
          v58 = *(_DWORD *)v8;
          *v8 = v41;
          *(_DWORD *)v12 = v58;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v45 = 0;
          do
            v46 = v8[++v45];
          while (v46 < v20);
          v47 = &v8[v45];
          v48 = a2;
          if (v45 == 1)
          {
            v48 = a2;
            do
            {
              if (v47 >= v48)
                break;
              v50 = *--v48;
            }
            while (v50 >= v20);
          }
          else
          {
            do
              v49 = *--v48;
            while (v49 >= v20);
          }
          if (v47 >= v48)
          {
            v56 = v47 - 1;
            if (v47 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v51 = *v48;
            v52 = &v8[v45];
            v53 = v48;
            do
            {
              *v52 = v51;
              *v53 = v46;
              do
              {
                v54 = v52[1];
                ++v52;
                v46 = v54;
              }
              while (v54 < v20);
              do
              {
                v55 = *--v53;
                v51 = v55;
              }
              while (v55 >= v20);
            }
            while (v52 < v53);
            v56 = v52 - 1;
            if (v52 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v56;
          }
LABEL_74:
          *v56 = v20;
          if (v47 < v48)
            goto LABEL_77;
          v57 = sub_2239B8534(v8, v56);
          v8 = v56 + 1;
          result = sub_2239B8534(v56 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v57)
              continue;
LABEL_77:
            result = sub_2239B7AEC(v7, v56, a3, a4 & 1);
            a4 = 0;
            v8 = v56 + 1;
            continue;
          }
          a2 = v56;
          if (v57)
            return result;
          goto LABEL_2;
        }
        v91 = v8 + 1;
        v93 = v8 == a2 || v91 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v93)
          {
            v94 = 4;
            v95 = v8;
            do
            {
              v98 = *v95;
              v97 = v95[1];
              v95 = v91;
              if (v97 < v98)
              {
                v99 = v94;
                do
                {
                  *(float *)((char *)v8 + v99) = v98;
                  v100 = v99 - 4;
                  if (v99 == 4)
                  {
                    v96 = v8;
                    goto LABEL_123;
                  }
                  v98 = *(float *)((char *)v8 + v99 - 8);
                  v99 -= 4;
                }
                while (v97 < v98);
                v96 = (float *)((char *)v8 + v100);
LABEL_123:
                *v96 = v97;
              }
              v91 = v95 + 1;
              v94 += 4;
            }
            while (v95 + 1 != a2);
          }
        }
        else if (!v93)
        {
          do
          {
            v130 = *v7;
            v129 = v7[1];
            v7 = v91;
            if (v129 < v130)
            {
              v131 = v91;
              do
              {
                *v131 = v130;
                v130 = *(v131 - 2);
                --v131;
              }
              while (v129 < v130);
              *v131 = v129;
            }
            ++v91;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_2239B8534(float *a1, float *a2)
{
  float v2;
  float v3;
  float *v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float *v32;
  int v33;
  uint64_t i;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v2 = *(a2 - 1);
      v3 = *a1;
      if (v2 >= *a1)
        return 1;
      *a1 = v2;
      *(a2 - 1) = v3;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v40 = *a1;
          v39 = a1[1];
          if (v39 < *a1)
          {
            *a1 = v39;
            a1[1] = v40;
            return 1;
          }
        }
      }
      else
      {
        if (v13 < v12)
        {
          *a1 = v13;
          *(a2 - 1) = v11;
          return 1;
        }
        *a1 = v12;
        a1[1] = v11;
        v45 = *(a2 - 1);
        if (v45 < v11)
        {
          a1[1] = v45;
          *(a2 - 1) = v11;
          return 1;
        }
      }
      return 1;
    case 4:
      v24 = a1 + 1;
      v25 = a1[1];
      v26 = a1 + 2;
      v27 = a1[2];
      v28 = *a1;
      if (v25 >= *a1)
      {
        if (v27 >= v25)
          goto LABEL_43;
        *v24 = v27;
        *v26 = v25;
        v29 = a1;
        v30 = a1 + 1;
        v31 = v25;
        if (v27 >= v28)
        {
LABEL_41:
          v42 = *(a2 - 1);
          if (v42 >= v25)
            return 1;
          goto LABEL_44;
        }
      }
      else
      {
        v29 = a1;
        v30 = a1 + 2;
        v31 = *a1;
        if (v27 >= v25)
        {
          *a1 = v25;
          a1[1] = v28;
          v29 = a1 + 1;
          v30 = a1 + 2;
          v31 = v28;
          if (v27 >= v28)
          {
LABEL_43:
            v25 = v27;
            v42 = *(a2 - 1);
            if (v42 >= v25)
              return 1;
LABEL_44:
            *v26 = v42;
            *(a2 - 1) = v25;
            v43 = *v26;
            v44 = *v24;
            if (*v26 < *v24)
              goto LABEL_59;
            return 1;
          }
        }
      }
      *v29 = v27;
      *v30 = v28;
      v25 = v31;
      goto LABEL_41;
    case 5:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 >= *a1)
      {
        if (v17 >= v15)
        {
          v21 = *a1;
          v18 = a1[1];
          v41 = a1[3];
          if (v41 < v17)
            goto LABEL_51;
          goto LABEL_55;
        }
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v17;
        v22 = v18;
        v23 = v15;
        if (v17 >= v18)
        {
          v21 = v18;
          v18 = v17;
          v17 = v15;
          v41 = a1[3];
          if (v41 < v17)
          {
LABEL_51:
            a1[2] = v41;
            a1[3] = v17;
            if (v41 < v18)
            {
              *v14 = v41;
              *v16 = v18;
              if (v41 < v21)
              {
                *a1 = v41;
                a1[1] = v21;
              }
            }
LABEL_56:
            v46 = *(a2 - 1);
            if (v46 < v17)
            {
              a1[3] = v46;
              *(a2 - 1) = v17;
              v47 = a1[2];
              v43 = a1[3];
              if (v43 < v47)
              {
                a1[2] = v43;
                a1[3] = v47;
                v44 = a1[1];
                if (v43 < v44)
                {
LABEL_59:
                  a1[1] = v43;
                  a1[2] = v44;
                  v48 = *a1;
                  if (v43 < *a1)
                  {
                    *a1 = v43;
                    a1[1] = v48;
                    return 1;
                  }
                }
              }
            }
            return 1;
          }
LABEL_55:
          v17 = v41;
          goto LABEL_56;
        }
      }
      else if (v17 >= v15)
      {
        *a1 = v15;
        a1[1] = v18;
        v19 = a1 + 1;
        v20 = a1 + 2;
        v21 = v15;
        v22 = v17;
        v23 = v18;
        if (v17 >= v18)
        {
          v21 = v15;
          v41 = a1[3];
          if (v41 < v17)
            goto LABEL_51;
          goto LABEL_55;
        }
      }
      else
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = a1[2];
        v22 = a1[1];
        v23 = *a1;
      }
      *v19 = v17;
      *v20 = v18;
      v18 = v22;
      v17 = v23;
      v41 = a1[3];
      if (v41 < v23)
        goto LABEL_51;
      goto LABEL_55;
    default:
      v5 = a1 + 2;
      v6 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 < *a1)
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v6 >= v7)
        {
          *a1 = v7;
          a1[1] = v8;
          v9 = a1 + 1;
          v10 = a1 + 2;
          if (v6 >= v8)
            goto LABEL_21;
        }
LABEL_20:
        *v9 = v6;
        *v10 = v8;
        goto LABEL_21;
      }
      if (v6 < v7)
      {
        a1[1] = v6;
        *v5 = v7;
        v9 = a1;
        v10 = a1 + 1;
        if (v6 < v8)
          goto LABEL_20;
      }
LABEL_21:
      v32 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v33 = 0;
      for (i = 12; ; i += 4)
      {
        v35 = *v32;
        v36 = *v5;
        if (*v32 < *v5)
          break;
LABEL_24:
        v5 = v32++;
        if (v32 == a2)
          return 1;
      }
      v37 = i;
      do
      {
        *(float *)((char *)a1 + v37) = v36;
        v38 = v37 - 4;
        if (v37 == 4)
        {
          *a1 = v35;
          if (++v33 != 8)
            goto LABEL_24;
          return v32 + 1 == a2;
        }
        v36 = *(float *)((char *)a1 + v37 - 8);
        v37 -= 4;
      }
      while (v35 < v36);
      *(float *)((char *)a1 + v38) = v35;
      if (++v33 != 8)
        goto LABEL_24;
      return v32 + 1 == a2;
  }
}

uint64_t sub_2239B8924(char *__s, uint64_t a2, std::string *a3, unsigned __int8 *a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  std::string v11;
  std::string *v12;
  std::string *v13;
  _DWORD *v14;
  std::string *v15;
  std::string *v16;
  std::string **v17;

  v10 = 0;
  sub_223846B20(v9, __s);
  sub_223663638((uint64_t)&v8, (uint64_t)v9, a2);
  v12 = (std::string *)v9;
  v13 = a3;
  v14 = v9;
  v15 = a3;
  v16 = a3;
  if (v10 == -1)
    sub_22316DD70();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, _DWORD *))off_24EC5D718[v10])(&v11, v9);
  std::to_string(&v11, *a4);
  v12 = (std::string *)v9;
  v13 = &v11;
  v14 = v9;
  v15 = &v11;
  v16 = &v11;
  if (v10 == -1)
    sub_22316DD70();
  v17 = &v12;
  ((void (*)(std::string ***, _DWORD *))off_24EC5D700[v10])(&v17, v9);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (v10 == -1)
    sub_22316DD70();
  v12 = &v11;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24EC5D730[v10])(&v12, v9);
  if (v10 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24EC5D6E8[v10])(&v12, v9);
  return result;
}

void sub_2239B8A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_DWORD *sub_2239B8AD4(_DWORD ***a1)
{
  return sub_223627500(**a1, (char *)(*a1)[1]);
}

void sub_2239B8AE0(uint64_t a1, uint64_t a2)
{
  sub_2239B8AF0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_2239B8AF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5D6E8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2239B8CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2239B8CE8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2239B8DE0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2239B8DD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2239B8DE0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2239B8FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2239B8FF0(uint64_t a1, int a2, int a3, int a4, _QWORD *a5, double a6, float32x4_t a7, float32x4_t a8, double a9, double a10, float32x4_t a11, __n128 a12, __n128 a13)
{
  unsigned int v16;
  uint64_t v17;
  int32x2_t v18;
  uint64_t v19;
  float32x4_t v20;
  uint64_t result;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  double v25;
  double v26;
  float32x4_t v27;
  __n128 v28;
  __n128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[12];
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;
  char v60;
  uint64_t v61;
  int v62;
  char v63;
  char v64;
  uint64_t v65;
  int v66;
  char v67;
  char v68;
  uint64_t v69;
  int v70;
  char v71;
  char v72;
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  uint64_t v77;
  int v78;
  char v79;
  char v80;
  uint64_t v81;
  int v82;
  char v83;
  char v84;
  uint64_t v85;
  int v86;
  char v87;
  char v88;
  uint64_t v89;
  int v90;
  char v91;
  char v92;
  int v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  int v98;
  char v99;
  char v100;
  int v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  int v106;
  char v107;
  char v108;
  int v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  int v114;
  char v115;
  char v116;
  int v117;
  uint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  int v122;
  char v123;
  char v124;
  int v125;
  uint64_t v126;
  char v127;
  char v128;
  uint64_t v129;
  int v130;
  char v131;
  char v132;
  int v133;
  uint64_t v134;
  char v135;
  char v136;
  uint64_t v137;
  int v138;
  char v139;
  char v140;
  int v141;
  uint64_t v142;
  char v143;
  int32x2_t v144;
  int v145;
  uint64_t v146;
  int v147;

  v16 = a3 & 0xCFFFFFFF;
  v17 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v18 = *(int32x2_t *)v17;
  v145 = *(_DWORD *)(v17 + 8);
  v144 = v18;
  v19 = *(_QWORD *)(v17 + 12);
  v147 = *(_DWORD *)(v17 + 20);
  v146 = v19;
  v38[0] = 1;
  v20.i64[0] = -1;
  v20.i64[1] = -1;
  *(_QWORD *)&v38[4] = -1;
  LODWORD(v39) = -1;
  BYTE4(v39) = 8;
  LOBYTE(v40) = 1;
  v41 = -1;
  v42 = -1;
  v43 = 8;
  v44 = 1;
  v45 = -1;
  v46 = -1;
  v47 = 8;
  v48 = 1;
  v49 = -1;
  v50 = -1;
  v51 = 8;
  v52 = 1;
  v53 = -1;
  v54 = -1;
  v55 = 8;
  v56 = 1;
  v57 = -1;
  v58 = -1;
  v59 = 8;
  v60 = 1;
  v61 = -1;
  v62 = -1;
  v63 = 8;
  v64 = 1;
  v65 = -1;
  v66 = -1;
  v67 = 8;
  v68 = 1;
  v69 = -1;
  v70 = -1;
  v71 = 8;
  v72 = 1;
  v73 = -1;
  v74 = -1;
  v75 = 8;
  v76 = 1;
  v77 = -1;
  v78 = -1;
  v79 = 8;
  v80 = 1;
  v81 = -1;
  v82 = -1;
  v83 = 8;
  v84 = 1;
  v85 = -1;
  v86 = -1;
  v87 = 8;
  v88 = 1;
  v89 = -1;
  v90 = -1;
  v91 = 8;
  v92 = 1;
  v93 = -1;
  v94 = -1;
  v95 = 8;
  v96 = 1;
  v97 = -1;
  v98 = -1;
  v99 = 8;
  v100 = 1;
  v101 = -1;
  v102 = -1;
  v103 = 8;
  v104 = 1;
  v105 = -1;
  v106 = -1;
  v107 = 8;
  v108 = 1;
  v109 = -1;
  v110 = -1;
  v111 = 8;
  v112 = 1;
  v113 = -1;
  v114 = -1;
  v115 = 8;
  v116 = 1;
  v117 = -1;
  v118 = -1;
  v119 = 8;
  v120 = 1;
  v121 = -1;
  v122 = -1;
  v123 = 8;
  v124 = 1;
  v125 = -1;
  v126 = -1;
  v127 = 8;
  v128 = 1;
  v129 = -1;
  v130 = -1;
  v131 = 8;
  v132 = 1;
  v133 = -1;
  v134 = -1;
  v135 = 8;
  v136 = 1;
  v137 = -1;
  v138 = -1;
  v139 = 8;
  v140 = 1;
  v141 = -1;
  v142 = -1;
  v143 = 8;
  result = sub_2239B9510(a5, a4, a2, 0, (signed int *)&v144, *(_DWORD *)(v17 + 64), (uint64_t)v38, v20, a7, a8, a9, a10, a11, a12, a13);
  if (a2)
  {
    v30 = result;
    if ((_DWORD)result != 3)
    {
      v31 = (a2 - 1);
      if ((_DWORD)v31)
      {
        v32 = *(_QWORD *)(a1 + 184);
        if ((*(_DWORD *)(v32 + 4488 * v16 + 24) & 0x80000000) == 0)
        {
          result = sub_2239B8FF0(a1, v31);
          v32 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v32 + 4488 * v16 + 28) & 0x80000000) == 0)
        {
          result = sub_2239B8FF0(a1, v31);
          v32 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v32 + 4488 * v16 + 32) & 0x80000000) == 0)
        {
          result = sub_2239B8FF0(a1, v31);
          v32 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v32 + 4488 * v16 + 36) & 0x80000000) == 0)
        {
          result = sub_2239B8FF0(a1, v31);
          v32 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v32 + 4488 * v16 + 40) & 0x80000000) == 0)
        {
          result = sub_2239B8FF0(a1, v31);
          v32 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v32 + 4488 * v16 + 44) & 0x80000000) == 0)
        {
          result = sub_2239B8FF0(a1, v31);
          v32 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v32 + 4488 * v16 + 48) & 0x80000000) == 0)
        {
          result = sub_2239B8FF0(a1, v31);
          v32 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v32 + 4488 * v16 + 52) & 0x80000000) == 0)
          return sub_2239B8FF0(a1, v31);
      }
      else
      {
        for (i = 0; i != 8; ++i)
        {
          v34 = byte_224657EA6[i];
          v35 = *(_QWORD *)(a1 + 184);
          v36 = *(_DWORD *)(v35 + 4488 * v16 + 4 * v34 + 24);
          if ((v36 & 0x80000000) == 0)
          {
            v37 = (v146 - v144.i32[0]) >> 1;
            *(int32x2_t *)v24.f32 = vdup_n_s32(v37);
            *(int32x2_t *)v23.f32 = vmla_s32(v144, *(int32x2_t *)v24.f32, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v34), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
            *(_QWORD *)v38 = v23.i64[0];
            *(_DWORD *)&v38[8] = v145 + v37 * (v34 & 1);
            *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v23.f32, *(int32x2_t *)v24.f32);
            v39 = v22.i64[0];
            v40 = *(_DWORD *)&v38[8] + v37;
            result = sub_2239B9510(a5, v30 == 2, 0, v36, (signed int *)v38, v36 >> 30 == 0, v35 + 4488 * v16 + 540 * v34 + 68, v22, v23, v24, v25, v26, v27, v28, v29);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2239B9510(_QWORD *a1, int a2, int a3, unsigned int a4, signed int *a5, int a6, uint64_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, double a11, double a12, float32x4_t a13, __n128 a14, __n128 a15)
{
  uint64_t v19;
  float v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  const float *v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  const float *v50;
  uint64_t v51;
  int v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  const float *v63;
  uint64_t v64;
  int v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  const float *v76;
  uint64_t v77;
  int v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  _QWORD *v87;
  uint64_t v88;
  const float *v89;
  uint64_t v90;
  int v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  _QWORD *v100;
  uint64_t v101;
  const float *v102;
  uint64_t v103;
  int v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  _QWORD *v113;
  uint64_t v114;
  const float *v115;
  uint64_t v116;
  int v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int v121;
  int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  _QWORD *v126;
  uint64_t v127;
  const float *v128;
  uint64_t v129;
  int v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  signed int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  _QWORD *v141;
  uint64_t v142;
  const float *v143;
  int v144;
  uint64_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int v149;
  int v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  _QWORD *v154;
  uint64_t v155;
  int v156;
  const float *v157;
  uint64_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  int v162;
  int v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int v166;
  _QWORD *v167;
  uint64_t v168;
  int v169;
  const float *v170;
  uint64_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  int v175;
  int v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  _QWORD *v180;
  uint64_t v181;
  int v182;
  const float *v183;
  uint64_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  int v188;
  int v189;
  uint64_t v190;
  unsigned int v191;
  unsigned int v192;
  _QWORD *v193;
  uint64_t v194;
  int v195;
  const float *v196;
  uint64_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  int v201;
  int v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  _QWORD *v206;
  uint64_t v207;
  int v208;
  const float *v209;
  uint64_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  int v214;
  int v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  _QWORD *v219;
  uint64_t v220;
  int v221;
  const float *v222;
  uint64_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  int v227;
  _OWORD v228[2];
  char *v229;
  int32x2_t v230;
  int v231;
  int32x2_t v232;
  int v233;
  float32x4_t v234;
  float32x4_t v235;
  char *v236;
  char v237;
  _BYTE v238[12];
  int32x2_t *v239;
  float32x2x3_t v240;
  float32x2x3_t v241;
  float32x2x3_t v242;
  float32x2x3_t v243;
  float32x2x3_t v244;
  float32x2x3_t v245;
  float32x2x3_t v246;
  float32x2x3_t v247;
  float32x2x3_t v248;
  float32x2x3_t v249;
  float32x2x3_t v250;
  float32x2x3_t v251;
  float32x2x3_t v252;
  float32x2x3_t v253;
  float32x2x3_t v254;

  if (!a6)
    return 3;
  v227 = 2;
  if ((a2 & 1) != 0)
  {
    if (a3)
      goto LABEL_4;
    goto LABEL_14;
  }
  v19 = *(_QWORD *)(*a1 + 8);
  v20 = *(float *)(*(_QWORD *)*a1 + 144);
  *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a5);
  a8.f32[2] = (float)a5[2];
  a8 = vmulq_n_f32(a8, v20);
  if (*(float *)(v19 + 12) < a8.f32[0])
    return 3;
  *(float32x2_t *)a10.f32 = vcvt_f32_s32(*(int32x2_t *)(a5 + 3));
  a10.f32[2] = (float)a5[5];
  a9 = vmulq_n_f32(a10, v20);
  if (*(float *)v19 > a9.f32[0])
    return 3;
  if (*(float *)(v19 + 16) < a8.f32[1])
    return 3;
  LODWORD(a11) = a9.i32[1];
  if (*(float *)(v19 + 4) > a9.f32[1])
    return 3;
  a10.i32[0] = *(_DWORD *)(v19 + 20);
  if (a10.f32[0] < a8.f32[2])
    return 3;
  a9.i32[0] = a9.i32[2];
  if (*(float *)(v19 + 8) > a9.f32[2])
    return 3;
  v227 = 1;
  if (!a3)
  {
LABEL_14:
    v21 = (uint64_t *)a1[1];
    v237 = 1;
    v22 = *v21;
    v23 = a4;
    v24 = *(_QWORD *)(*v21 + 2328);
    if (a4 >= (unint64_t)((*(_QWORD *)(*v21 + 2336) - v24) >> 11))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v24 = *(_QWORD *)(v22 + 2328);
    }
    v25 = (int *)(v24 + (v23 << 11));
    v234.i64[0] = v22;
    v234.i64[1] = (uint64_t)v25;
    v26 = v21[1];
    v235.i64[0] = v26;
    v235.i64[1] = a7;
    v236 = &v237;
    if (a2)
    {
      *(_QWORD *)&v228[0] = &v234;
      *((_QWORD *)&v228[0] + 1) = &v227;
      a8.i64[0] = *(_QWORD *)a5;
      *(_QWORD *)v238 = *(_QWORD *)a5;
      v27 = a5[2];
      *(_DWORD *)&v238[8] = v27;
      v28 = *v25;
      if (v28 != *(_DWORD *)(v22 + 272))
      {
        v29 = *(_QWORD *)(v26 + 8);
        if ((v28 & 0x10000000) != 0)
          v30 = 0x40000000;
        else
          v30 = 0x80000000;
        if ((v28 & 0x20000000) != 0)
          v31 = v30;
        else
          v31 = v28 & 0xCFFFFFFF;
        if ((v31 & 0x40000000) != 0)
        {
          v35 = *(_QWORD **)v29;
          v36 = *v35;
          v37 = *(_DWORD *)(*v35 + 8);
          a9.f32[0] = (float)(a8.i32[0] / v37);
          a9.f32[1] = (float)(a8.i32[1] / v37);
          a9.f32[2] = (float)(v27 / v37);
          v38 = (const float *)(*v35 + 1656);
          v240 = vld3_f32(v38);
          v39 = *(_QWORD *)(v35[1] + 144);
          v40.i64[0] = 0x3F0000003F000000;
          v40.i64[1] = 0x3F0000003F000000;
          v41 = vaddq_f32(a9, v40);
          v230 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v240.val[0], v41.f32[0]), v240.val[1], *(float32x2_t *)v41.f32, 1), v240.val[2], v41, 2), (float32x2_t)0xBF000000BF000000));
          v231 = 0;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a8.f32);
          a8.f32[2] = (float)v27;
          v42 = vmulq_n_f32(vaddq_f32(a8, v40), *(float *)&v39);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v36 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v240.val[0], v42.f32[0]), v240.val[1], *(float32x2_t *)v42.f32, 1), v240.val[2], v42, 2);
        }
        else if (!(v31 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v29 + 16), *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v29 + 8) + 2448) + 520 * v31, *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      v43 = *a5 + 1;
      *(_DWORD *)v238 = v43;
      a8.i64[0] = *(_QWORD *)(a5 + 1);
      *(_QWORD *)&v238[4] = a8.i64[0];
      v44 = *(_DWORD *)(v234.i64[1] + 4);
      if (v44 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v45 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v44 & 0x10000000) != 0)
          v46 = 0x40000000;
        else
          v46 = 0x80000000;
        if ((v44 & 0x20000000) != 0)
          v47 = v46;
        else
          v47 = v44 & 0xCFFFFFFF;
        if ((v47 & 0x40000000) != 0)
        {
          v48 = *(_QWORD **)v45;
          v49 = *v48;
          v50 = (const float *)(*v48 + 1656);
          v51 = *(_QWORD *)(v48[1] + 144);
          LODWORD(v48) = *(_DWORD *)(*v48 + 8);
          v52 = a8.i32[1];
          a10.f32[0] = (float)(v43 / (int)v48);
          a10.f32[1] = (float)(a8.i32[0] / (int)v48);
          a10.f32[2] = (float)(a8.i32[1] / (int)v48);
          v53.i64[0] = 0x3F0000003F000000;
          v53.i64[1] = 0x3F0000003F000000;
          v247 = vld3_f32(v50);
          v54 = vaddq_f32(a10, v53);
          *(int32x2_t *)v54.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v247.val[0], v54.f32[0]), v247.val[1], *(float32x2_t *)v54.f32, 1), v247.val[2], v54, 2), (float32x2_t)0xBF000000BF000000));
          v230 = *(int32x2_t *)v54.f32;
          v231 = 0;
          v54.i32[0] = v43;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v54.f32, *(int32x2_t *)a8.f32));
          a8.f32[2] = (float)v52;
          v55 = vmulq_n_f32(vaddq_f32(a8, v53), *(float *)&v51);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v49 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v247.val[0], v55.f32[0]), v247.val[1], *(float32x2_t *)v55.f32, 1), v247.val[2], v55, 2);
        }
        else if (!(v47 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v45 + 16), *(_QWORD *)(*(_QWORD *)(v45 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v45 + 8) + 2448) + 520 * v47, *(_QWORD *)(*(_QWORD *)(v45 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      v56 = *a5 + 2;
      *(_DWORD *)v238 = v56;
      a8.i64[0] = *(_QWORD *)(a5 + 1);
      *(_QWORD *)&v238[4] = a8.i64[0];
      v57 = *(_DWORD *)(v234.i64[1] + 8);
      if (v57 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v58 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v57 & 0x10000000) != 0)
          v59 = 0x40000000;
        else
          v59 = 0x80000000;
        if ((v57 & 0x20000000) != 0)
          v60 = v59;
        else
          v60 = v57 & 0xCFFFFFFF;
        if ((v60 & 0x40000000) != 0)
        {
          v61 = *(_QWORD **)v58;
          v62 = *v61;
          v63 = (const float *)(*v61 + 1656);
          v64 = *(_QWORD *)(v61[1] + 144);
          LODWORD(v61) = *(_DWORD *)(*v61 + 8);
          v65 = a8.i32[1];
          a10.f32[0] = (float)(v56 / (int)v61);
          a10.f32[1] = (float)(a8.i32[0] / (int)v61);
          a10.f32[2] = (float)(a8.i32[1] / (int)v61);
          v66.i64[0] = 0x3F0000003F000000;
          v66.i64[1] = 0x3F0000003F000000;
          v248 = vld3_f32(v63);
          v67 = vaddq_f32(a10, v66);
          *(int32x2_t *)v67.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v248.val[0], v67.f32[0]), v248.val[1], *(float32x2_t *)v67.f32, 1), v248.val[2], v67, 2), (float32x2_t)0xBF000000BF000000));
          v230 = *(int32x2_t *)v67.f32;
          v231 = 0;
          v67.i32[0] = v56;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v67.f32, *(int32x2_t *)a8.f32));
          a8.f32[2] = (float)v65;
          v68 = vmulq_n_f32(vaddq_f32(a8, v66), *(float *)&v64);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v62 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v248.val[0], v68.f32[0]), v248.val[1], *(float32x2_t *)v68.f32, 1), v248.val[2], v68, 2);
        }
        else if (!(v60 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v58 + 16), *(_QWORD *)(*(_QWORD *)(v58 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v58 + 8) + 2448) + 520 * v60, *(_QWORD *)(*(_QWORD *)(v58 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      v69 = *a5 + 3;
      *(_DWORD *)v238 = v69;
      a8.i64[0] = *(_QWORD *)(a5 + 1);
      *(_QWORD *)&v238[4] = a8.i64[0];
      v70 = *(_DWORD *)(v234.i64[1] + 12);
      if (v70 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v71 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v70 & 0x10000000) != 0)
          v72 = 0x40000000;
        else
          v72 = 0x80000000;
        if ((v70 & 0x20000000) != 0)
          v73 = v72;
        else
          v73 = v70 & 0xCFFFFFFF;
        if ((v73 & 0x40000000) != 0)
        {
          v74 = *(_QWORD **)v71;
          v75 = *v74;
          v76 = (const float *)(*v74 + 1656);
          v77 = *(_QWORD *)(v74[1] + 144);
          LODWORD(v74) = *(_DWORD *)(*v74 + 8);
          v78 = a8.i32[1];
          a10.f32[0] = (float)(v69 / (int)v74);
          a10.f32[1] = (float)(a8.i32[0] / (int)v74);
          a10.f32[2] = (float)(a8.i32[1] / (int)v74);
          v79.i64[0] = 0x3F0000003F000000;
          v79.i64[1] = 0x3F0000003F000000;
          v249 = vld3_f32(v76);
          v80 = vaddq_f32(a10, v79);
          *(int32x2_t *)v80.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v249.val[0], v80.f32[0]), v249.val[1], *(float32x2_t *)v80.f32, 1), v249.val[2], v80, 2), (float32x2_t)0xBF000000BF000000));
          v230 = *(int32x2_t *)v80.f32;
          v231 = 0;
          v80.i32[0] = v69;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v80.f32, *(int32x2_t *)a8.f32));
          a8.f32[2] = (float)v78;
          v81 = vmulq_n_f32(vaddq_f32(a8, v79), *(float *)&v77);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v75 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v249.val[0], v81.f32[0]), v249.val[1], *(float32x2_t *)v81.f32, 1), v249.val[2], v81, 2);
        }
        else if (!(v73 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v71 + 16), *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v71 + 8) + 2448) + 520 * v73, *(_QWORD *)(*(_QWORD *)(v71 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      v82 = *a5 + 4;
      *(_DWORD *)v238 = v82;
      a8.i64[0] = *(_QWORD *)(a5 + 1);
      *(_QWORD *)&v238[4] = a8.i64[0];
      v83 = *(_DWORD *)(v234.i64[1] + 16);
      if (v83 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v84 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v83 & 0x10000000) != 0)
          v85 = 0x40000000;
        else
          v85 = 0x80000000;
        if ((v83 & 0x20000000) != 0)
          v86 = v85;
        else
          v86 = v83 & 0xCFFFFFFF;
        if ((v86 & 0x40000000) != 0)
        {
          v87 = *(_QWORD **)v84;
          v88 = *v87;
          v89 = (const float *)(*v87 + 1656);
          v90 = *(_QWORD *)(v87[1] + 144);
          LODWORD(v87) = *(_DWORD *)(*v87 + 8);
          v91 = a8.i32[1];
          a10.f32[0] = (float)(v82 / (int)v87);
          a10.f32[1] = (float)(a8.i32[0] / (int)v87);
          a10.f32[2] = (float)(a8.i32[1] / (int)v87);
          v92.i64[0] = 0x3F0000003F000000;
          v92.i64[1] = 0x3F0000003F000000;
          v250 = vld3_f32(v89);
          v93 = vaddq_f32(a10, v92);
          *(int32x2_t *)v93.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v250.val[0], v93.f32[0]), v250.val[1], *(float32x2_t *)v93.f32, 1), v250.val[2], v93, 2), (float32x2_t)0xBF000000BF000000));
          v230 = *(int32x2_t *)v93.f32;
          v231 = 0;
          v93.i32[0] = v82;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v93.f32, *(int32x2_t *)a8.f32));
          a8.f32[2] = (float)v91;
          v94 = vmulq_n_f32(vaddq_f32(a8, v92), *(float *)&v90);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v88 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v250.val[0], v94.f32[0]), v250.val[1], *(float32x2_t *)v94.f32, 1), v250.val[2], v94, 2);
        }
        else if (!(v86 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v84 + 16), *(_QWORD *)(*(_QWORD *)(v84 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v84 + 8) + 2448) + 520 * v86, *(_QWORD *)(*(_QWORD *)(v84 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      v95 = *a5 + 5;
      *(_DWORD *)v238 = v95;
      a8.i64[0] = *(_QWORD *)(a5 + 1);
      *(_QWORD *)&v238[4] = a8.i64[0];
      v96 = *(_DWORD *)(v234.i64[1] + 20);
      if (v96 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v97 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v96 & 0x10000000) != 0)
          v98 = 0x40000000;
        else
          v98 = 0x80000000;
        if ((v96 & 0x20000000) != 0)
          v99 = v98;
        else
          v99 = v96 & 0xCFFFFFFF;
        if ((v99 & 0x40000000) != 0)
        {
          v100 = *(_QWORD **)v97;
          v101 = *v100;
          v102 = (const float *)(*v100 + 1656);
          v103 = *(_QWORD *)(v100[1] + 144);
          LODWORD(v100) = *(_DWORD *)(*v100 + 8);
          v104 = a8.i32[1];
          a10.f32[0] = (float)(v95 / (int)v100);
          a10.f32[1] = (float)(a8.i32[0] / (int)v100);
          a10.f32[2] = (float)(a8.i32[1] / (int)v100);
          v105.i64[0] = 0x3F0000003F000000;
          v105.i64[1] = 0x3F0000003F000000;
          v251 = vld3_f32(v102);
          v106 = vaddq_f32(a10, v105);
          *(int32x2_t *)v106.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v251.val[0], v106.f32[0]), v251.val[1], *(float32x2_t *)v106.f32, 1), v251.val[2], v106, 2), (float32x2_t)0xBF000000BF000000));
          v230 = *(int32x2_t *)v106.f32;
          v231 = 0;
          v106.i32[0] = v95;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v106.f32, *(int32x2_t *)a8.f32));
          a8.f32[2] = (float)v104;
          v107 = vmulq_n_f32(vaddq_f32(a8, v105), *(float *)&v103);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v101 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v251.val[0], v107.f32[0]), v251.val[1], *(float32x2_t *)v107.f32, 1), v251.val[2], v107, 2);
        }
        else if (!(v99 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v97 + 16), *(_QWORD *)(*(_QWORD *)(v97 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v97 + 8) + 2448) + 520 * v99, *(_QWORD *)(*(_QWORD *)(v97 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      v108 = *a5 + 6;
      *(_DWORD *)v238 = v108;
      a8.i64[0] = *(_QWORD *)(a5 + 1);
      *(_QWORD *)&v238[4] = a8.i64[0];
      v109 = *(_DWORD *)(v234.i64[1] + 24);
      if (v109 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v110 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v109 & 0x10000000) != 0)
          v111 = 0x40000000;
        else
          v111 = 0x80000000;
        if ((v109 & 0x20000000) != 0)
          v112 = v111;
        else
          v112 = v109 & 0xCFFFFFFF;
        if ((v112 & 0x40000000) != 0)
        {
          v113 = *(_QWORD **)v110;
          v114 = *v113;
          v115 = (const float *)(*v113 + 1656);
          v116 = *(_QWORD *)(v113[1] + 144);
          LODWORD(v113) = *(_DWORD *)(*v113 + 8);
          v117 = a8.i32[1];
          a10.f32[0] = (float)(v108 / (int)v113);
          a10.f32[1] = (float)(a8.i32[0] / (int)v113);
          a10.f32[2] = (float)(a8.i32[1] / (int)v113);
          v118.i64[0] = 0x3F0000003F000000;
          v118.i64[1] = 0x3F0000003F000000;
          v252 = vld3_f32(v115);
          v119 = vaddq_f32(a10, v118);
          *(int32x2_t *)v119.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v252.val[0], v119.f32[0]), v252.val[1], *(float32x2_t *)v119.f32, 1), v252.val[2], v119, 2), (float32x2_t)0xBF000000BF000000));
          v230 = *(int32x2_t *)v119.f32;
          v231 = 0;
          v119.i32[0] = v108;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v119.f32, *(int32x2_t *)a8.f32));
          a8.f32[2] = (float)v117;
          v120 = vmulq_n_f32(vaddq_f32(a8, v118), *(float *)&v116);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v114 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v252.val[0], v120.f32[0]), v252.val[1], *(float32x2_t *)v120.f32, 1), v252.val[2], v120, 2);
        }
        else if (!(v112 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v110 + 16), *(_QWORD *)(*(_QWORD *)(v110 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v110 + 8) + 2448) + 520 * v112, *(_QWORD *)(*(_QWORD *)(v110 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      v121 = *a5 + 7;
      *(_DWORD *)v238 = v121;
      a8.i64[0] = *(_QWORD *)(a5 + 1);
      *(_QWORD *)&v238[4] = a8.i64[0];
      v122 = *(_DWORD *)(v234.i64[1] + 28);
      if (v122 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v123 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v122 & 0x10000000) != 0)
          v124 = 0x40000000;
        else
          v124 = 0x80000000;
        if ((v122 & 0x20000000) != 0)
          v125 = v124;
        else
          v125 = v122 & 0xCFFFFFFF;
        if ((v125 & 0x40000000) != 0)
        {
          v126 = *(_QWORD **)v123;
          v127 = *v126;
          v128 = (const float *)(*v126 + 1656);
          v129 = *(_QWORD *)(v126[1] + 144);
          LODWORD(v126) = *(_DWORD *)(*v126 + 8);
          v130 = a8.i32[1];
          a10.f32[0] = (float)(v121 / (int)v126);
          a10.f32[1] = (float)(a8.i32[0] / (int)v126);
          a10.f32[2] = (float)(a8.i32[1] / (int)v126);
          v131.i64[0] = 0x3F0000003F000000;
          v131.i64[1] = 0x3F0000003F000000;
          v253 = vld3_f32(v128);
          v132 = vaddq_f32(a10, v131);
          *(int32x2_t *)v132.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v253.val[0], v132.f32[0]), v253.val[1], *(float32x2_t *)v132.f32, 1), v253.val[2], v132, 2), (float32x2_t)0xBF000000BF000000));
          v230 = *(int32x2_t *)v132.f32;
          v231 = 0;
          v132.i32[0] = v121;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v132.f32, *(int32x2_t *)a8.f32));
          a8.f32[2] = (float)v130;
          v133 = vmulq_n_f32(vaddq_f32(a8, v131), *(float *)&v129);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v127 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v253.val[0], v133.f32[0]), v253.val[1], *(float32x2_t *)v133.f32, 1), v253.val[2], v133, 2);
        }
        else if (!(v125 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v123 + 16), *(_QWORD *)(*(_QWORD *)(v123 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v123 + 8) + 2448) + 520 * v125, *(_QWORD *)(*(_QWORD *)(v123 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      v134 = *a5;
      v135 = a5[1] + 1;
      *(_DWORD *)v238 = *a5;
      *(_DWORD *)&v238[4] = v135;
      v136 = a5[2];
      *(_DWORD *)&v238[8] = v136;
      v137 = *(_DWORD *)(v234.i64[1] + 32);
      if (v137 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v138 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v137 & 0x10000000) != 0)
          v139 = 0x40000000;
        else
          v139 = 0x80000000;
        if ((v137 & 0x20000000) != 0)
          v140 = v139;
        else
          v140 = v137 & 0xCFFFFFFF;
        if ((v140 & 0x40000000) != 0)
        {
          v141 = *(_QWORD **)v138;
          v142 = *v141;
          v143 = (const float *)(*v141 + 1656);
          v144 = *(_DWORD *)(*v141 + 8);
          a8.f32[0] = (float)(v134 / v144);
          v145 = *(_QWORD *)(v141[1] + 144);
          a8.f32[1] = (float)(v135 / v144);
          a8.f32[2] = (float)(v136 / v144);
          v146.i64[0] = 0x3F0000003F000000;
          v146.i64[1] = 0x3F0000003F000000;
          v147 = vaddq_f32(a8, v146);
          v254 = vld3_f32(v143);
          v230 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v254.val[0], v147.f32[0]), v254.val[1], *(float32x2_t *)v147.f32, 1), v254.val[2], v147, 2), (float32x2_t)0xBF000000BF000000));
          v231 = 0;
          *(float32x2_t *)v147.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v135, v134));
          v147.f32[2] = (float)v136;
          v148 = vmulq_n_f32(vaddq_f32(v147, v146), *(float *)&v145);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v142 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v254.val[0], v148.f32[0]), v254.val[1], *(float32x2_t *)v148.f32, 1), v254.val[2], v148, 2);
        }
        else if (!(v140 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v138 + 16), *(_QWORD *)(*(_QWORD *)(v138 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v138 + 8) + 2448) + 520 * v140, *(_QWORD *)(*(_QWORD *)(v138 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      a9.i64[0] = 0x100000001;
      *(int32x2_t *)a8.f32 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000001);
      *(_QWORD *)v238 = a8.i64[0];
      v149 = a5[2];
      *(_DWORD *)&v238[8] = v149;
      v150 = *(_DWORD *)(v234.i64[1] + 36);
      if (v150 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v151 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v150 & 0x10000000) != 0)
          v152 = 0x40000000;
        else
          v152 = 0x80000000;
        if ((v150 & 0x20000000) != 0)
          v153 = v152;
        else
          v153 = v150 & 0xCFFFFFFF;
        if ((v153 & 0x40000000) != 0)
        {
          v154 = *(_QWORD **)v151;
          v155 = *v154;
          v156 = *(_DWORD *)(*v154 + 8);
          a9.f32[0] = (float)(a8.i32[0] / v156);
          a9.f32[1] = (float)(a8.i32[1] / v156);
          a9.f32[2] = (float)(v149 / v156);
          v157 = (const float *)(*v154 + 1656);
          v241 = vld3_f32(v157);
          v158 = *(_QWORD *)(v154[1] + 144);
          v159.i64[0] = 0x3F0000003F000000;
          v159.i64[1] = 0x3F0000003F000000;
          v160 = vaddq_f32(a9, v159);
          v230 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v241.val[0], v160.f32[0]), v241.val[1], *(float32x2_t *)v160.f32, 1), v241.val[2], v160, 2), (float32x2_t)0xBF000000BF000000));
          v231 = 0;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a8.f32);
          a8.f32[2] = (float)v149;
          v161 = vmulq_n_f32(vaddq_f32(a8, v159), *(float *)&v158);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v155 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v241.val[0], v161.f32[0]), v241.val[1], *(float32x2_t *)v161.f32, 1), v241.val[2], v161, 2);
        }
        else if (!(v153 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v151 + 16), *(_QWORD *)(*(_QWORD *)(v151 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v151 + 8) + 2448) + 520 * v153, *(_QWORD *)(*(_QWORD *)(v151 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      a9.i64[0] = 0x100000002;
      *(int32x2_t *)a8.f32 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000002);
      *(_QWORD *)v238 = a8.i64[0];
      v162 = a5[2];
      *(_DWORD *)&v238[8] = v162;
      v163 = *(_DWORD *)(v234.i64[1] + 40);
      if (v163 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v164 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v163 & 0x10000000) != 0)
          v165 = 0x40000000;
        else
          v165 = 0x80000000;
        if ((v163 & 0x20000000) != 0)
          v166 = v165;
        else
          v166 = v163 & 0xCFFFFFFF;
        if ((v166 & 0x40000000) != 0)
        {
          v167 = *(_QWORD **)v164;
          v168 = *v167;
          v169 = *(_DWORD *)(*v167 + 8);
          a9.f32[0] = (float)(a8.i32[0] / v169);
          a9.f32[1] = (float)(a8.i32[1] / v169);
          a9.f32[2] = (float)(v162 / v169);
          v170 = (const float *)(*v167 + 1656);
          v242 = vld3_f32(v170);
          v171 = *(_QWORD *)(v167[1] + 144);
          v172.i64[0] = 0x3F0000003F000000;
          v172.i64[1] = 0x3F0000003F000000;
          v173 = vaddq_f32(a9, v172);
          v230 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v242.val[0], v173.f32[0]), v242.val[1], *(float32x2_t *)v173.f32, 1), v242.val[2], v173, 2), (float32x2_t)0xBF000000BF000000));
          v231 = 0;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a8.f32);
          a8.f32[2] = (float)v162;
          v174 = vmulq_n_f32(vaddq_f32(a8, v172), *(float *)&v171);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v168 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v242.val[0], v174.f32[0]), v242.val[1], *(float32x2_t *)v174.f32, 1), v242.val[2], v174, 2);
        }
        else if (!(v166 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v164 + 16), *(_QWORD *)(*(_QWORD *)(v164 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v164 + 8) + 2448) + 520 * v166, *(_QWORD *)(*(_QWORD *)(v164 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      a9.i64[0] = 0x100000003;
      *(int32x2_t *)a8.f32 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000003);
      *(_QWORD *)v238 = a8.i64[0];
      v175 = a5[2];
      *(_DWORD *)&v238[8] = v175;
      v176 = *(_DWORD *)(v234.i64[1] + 44);
      if (v176 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v177 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v176 & 0x10000000) != 0)
          v178 = 0x40000000;
        else
          v178 = 0x80000000;
        if ((v176 & 0x20000000) != 0)
          v179 = v178;
        else
          v179 = v176 & 0xCFFFFFFF;
        if ((v179 & 0x40000000) != 0)
        {
          v180 = *(_QWORD **)v177;
          v181 = *v180;
          v182 = *(_DWORD *)(*v180 + 8);
          a9.f32[0] = (float)(a8.i32[0] / v182);
          a9.f32[1] = (float)(a8.i32[1] / v182);
          a9.f32[2] = (float)(v175 / v182);
          v183 = (const float *)(*v180 + 1656);
          v243 = vld3_f32(v183);
          v184 = *(_QWORD *)(v180[1] + 144);
          v185.i64[0] = 0x3F0000003F000000;
          v185.i64[1] = 0x3F0000003F000000;
          v186 = vaddq_f32(a9, v185);
          v230 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v243.val[0], v186.f32[0]), v243.val[1], *(float32x2_t *)v186.f32, 1), v243.val[2], v186, 2), (float32x2_t)0xBF000000BF000000));
          v231 = 0;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a8.f32);
          a8.f32[2] = (float)v175;
          v187 = vmulq_n_f32(vaddq_f32(a8, v185), *(float *)&v184);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v181 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v243.val[0], v187.f32[0]), v243.val[1], *(float32x2_t *)v187.f32, 1), v243.val[2], v187, 2);
        }
        else if (!(v179 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v177 + 16), *(_QWORD *)(*(_QWORD *)(v177 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v177 + 8) + 2448) + 520 * v179, *(_QWORD *)(*(_QWORD *)(v177 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      a9.i64[0] = 0x100000004;
      *(int32x2_t *)a8.f32 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000004);
      *(_QWORD *)v238 = a8.i64[0];
      v188 = a5[2];
      *(_DWORD *)&v238[8] = v188;
      v189 = *(_DWORD *)(v234.i64[1] + 48);
      if (v189 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v190 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v189 & 0x10000000) != 0)
          v191 = 0x40000000;
        else
          v191 = 0x80000000;
        if ((v189 & 0x20000000) != 0)
          v192 = v191;
        else
          v192 = v189 & 0xCFFFFFFF;
        if ((v192 & 0x40000000) != 0)
        {
          v193 = *(_QWORD **)v190;
          v194 = *v193;
          v195 = *(_DWORD *)(*v193 + 8);
          a9.f32[0] = (float)(a8.i32[0] / v195);
          a9.f32[1] = (float)(a8.i32[1] / v195);
          a9.f32[2] = (float)(v188 / v195);
          v196 = (const float *)(*v193 + 1656);
          v244 = vld3_f32(v196);
          v197 = *(_QWORD *)(v193[1] + 144);
          v198.i64[0] = 0x3F0000003F000000;
          v198.i64[1] = 0x3F0000003F000000;
          v199 = vaddq_f32(a9, v198);
          v230 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v244.val[0], v199.f32[0]), v244.val[1], *(float32x2_t *)v199.f32, 1), v244.val[2], v199, 2), (float32x2_t)0xBF000000BF000000));
          v231 = 0;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a8.f32);
          a8.f32[2] = (float)v188;
          v200 = vmulq_n_f32(vaddq_f32(a8, v198), *(float *)&v197);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v194 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v244.val[0], v200.f32[0]), v244.val[1], *(float32x2_t *)v200.f32, 1), v244.val[2], v200, 2);
        }
        else if (!(v192 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v190 + 16), *(_QWORD *)(*(_QWORD *)(v190 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v190 + 8) + 2448) + 520 * v192, *(_QWORD *)(*(_QWORD *)(v190 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      a9.i64[0] = 0x100000005;
      *(int32x2_t *)a8.f32 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000005);
      *(_QWORD *)v238 = a8.i64[0];
      v201 = a5[2];
      *(_DWORD *)&v238[8] = v201;
      v202 = *(_DWORD *)(v234.i64[1] + 52);
      if (v202 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v203 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v202 & 0x10000000) != 0)
          v204 = 0x40000000;
        else
          v204 = 0x80000000;
        if ((v202 & 0x20000000) != 0)
          v205 = v204;
        else
          v205 = v202 & 0xCFFFFFFF;
        if ((v205 & 0x40000000) != 0)
        {
          v206 = *(_QWORD **)v203;
          v207 = *v206;
          v208 = *(_DWORD *)(*v206 + 8);
          a9.f32[0] = (float)(a8.i32[0] / v208);
          a9.f32[1] = (float)(a8.i32[1] / v208);
          a9.f32[2] = (float)(v201 / v208);
          v209 = (const float *)(*v206 + 1656);
          v245 = vld3_f32(v209);
          v210 = *(_QWORD *)(v206[1] + 144);
          v211.i64[0] = 0x3F0000003F000000;
          v211.i64[1] = 0x3F0000003F000000;
          v212 = vaddq_f32(a9, v211);
          v230 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v245.val[0], v212.f32[0]), v245.val[1], *(float32x2_t *)v212.f32, 1), v245.val[2], v212, 2), (float32x2_t)0xBF000000BF000000));
          v231 = 0;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a8.f32);
          a8.f32[2] = (float)v201;
          v213 = vmulq_n_f32(vaddq_f32(a8, v211), *(float *)&v210);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v207 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v245.val[0], v213.f32[0]), v245.val[1], *(float32x2_t *)v213.f32, 1), v245.val[2], v213, 2);
        }
        else if (!(v205 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v203 + 16), *(_QWORD *)(*(_QWORD *)(v203 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v203 + 8) + 2448) + 520 * v205, *(_QWORD *)(*(_QWORD *)(v203 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      a9.i64[0] = 0x100000006;
      *(int32x2_t *)a8.f32 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000006);
      *(_QWORD *)v238 = a8.i64[0];
      v214 = a5[2];
      *(_DWORD *)&v238[8] = v214;
      v215 = *(_DWORD *)(v234.i64[1] + 56);
      if (v215 != *(_DWORD *)(v234.i64[0] + 272))
      {
        v216 = *(_QWORD *)(v235.i64[0] + 8);
        if ((v215 & 0x10000000) != 0)
          v217 = 0x40000000;
        else
          v217 = 0x80000000;
        if ((v215 & 0x20000000) != 0)
          v218 = v217;
        else
          v218 = v215 & 0xCFFFFFFF;
        if ((v218 & 0x40000000) != 0)
        {
          v219 = *(_QWORD **)v216;
          v220 = *v219;
          v221 = *(_DWORD *)(*v219 + 8);
          a9.f32[0] = (float)(a8.i32[0] / v221);
          a9.f32[1] = (float)(a8.i32[1] / v221);
          a9.f32[2] = (float)(v214 / v221);
          v222 = (const float *)(*v219 + 1656);
          v246 = vld3_f32(v222);
          v223 = *(_QWORD *)(v219[1] + 144);
          v224.i64[0] = 0x3F0000003F000000;
          v224.i64[1] = 0x3F0000003F000000;
          v225 = vaddq_f32(a9, v224);
          v230 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v246.val[0], v225.f32[0]), v246.val[1], *(float32x2_t *)v225.f32, 1), v246.val[2], v225, 2), (float32x2_t)0xBF000000BF000000));
          v231 = 0;
          *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a8.f32);
          a8.f32[2] = (float)v214;
          v226 = vmulq_n_f32(vaddq_f32(a8, v224), *(float *)&v223);
          v239 = &v230;
          *(uint64_t *)((char *)sub_223A17B10((float *)(v220 + 64), (int *)&v230, (uint64_t)&unk_2245BA939, (uint64_t **)&v239)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v246.val[0], v226.f32[0]), v246.val[1], *(float32x2_t *)v226.f32, 1), v246.val[2], v226, 2);
        }
        else if (!(v218 >> 30))
        {
          sub_2239B2318(**(_QWORD **)(v216 + 16), *(_QWORD *)(*(_QWORD *)(v216 + 16) + 8), (int32x2_t *)v238, *(_QWORD *)(*(_QWORD *)(v216 + 8) + 2448) + 520 * v218, *(_QWORD *)(*(_QWORD *)(v216 + 16) + 16), *(double *)a8.i64, a9, *(double *)a10.i64, a11, a12, *(double *)a13.i64, a14, a15);
        }
      }
      sub_2239BADB8((_QWORD **)v228, (int32x2_t *)a5, a8, a9, a10, a11, a12, *(double *)a13.i64, a14, a15);
    }
    else
    {
      v230 = *(int32x2_t *)a5;
      v231 = a5[2];
      v232 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x800000008);
      v233 = v231 + 8;
      v32 = (uint64_t *)v21[2];
      v33 = *v32;
      v34 = v32[1];
      v228[0] = v234;
      v228[1] = v235;
      v229 = v236;
      sub_2239BA8FC(3, (uint64_t)&v230, v33, v34, v228, v234, v235, *(double *)a10.i64, a11, a12, a13, a14, a15);
    }
    return 3;
  }
LABEL_4:
  if (a2)
    return 2;
  else
    return 1;
}

void sub_2239BA8FC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, float32x4_t a6, float32x4_t a7, double a8, double a9, double a10, float32x4_t a11, __n128 a12, __n128 a13)
{
  float v13;
  int v14;
  float32x4_t v15;
  double v17;
  float32x4_t v18;
  uint64_t v19;
  unsigned __int32 v20;
  __int32 v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  __int32 v30;
  int v31;
  unsigned int v32;
  __int32 v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  signed __int32 v49;
  signed __int32 v50;
  int v51;
  const float *v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x2_t v57;
  int v58;
  unsigned __int32 v59;
  unsigned __int32 v60;
  unsigned __int32 v61;
  int32x2_t *v62;
  float32x2x3_t v63;

  v13 = *(float *)(a3 + 144);
  a7.i64[0] = *(_QWORD *)a2;
  v14 = *(_DWORD *)(a2 + 8);
  *(float32x2_t *)a6.f32 = vcvt_f32_s32(*(int32x2_t *)a2);
  a6.f32[2] = (float)v14;
  v15 = vmulq_n_f32(a6, v13);
  if (*(float *)(a4 + 12) >= v15.f32[0])
  {
    v17 = *(double *)(a2 + 12);
    *(float32x2_t *)a11.f32 = vcvt_f32_s32(*(int32x2_t *)&v17);
    a11.f32[2] = (float)*(int *)(a2 + 20);
    v18 = vmulq_n_f32(a11, v13);
    if (*(float *)a4 <= v18.f32[0] && *(float *)(a4 + 16) >= v15.f32[1])
    {
      a12.n128_u32[0] = v18.u32[1];
      if (*(float *)(a4 + 4) <= v18.f32[1])
      {
        a11.i32[0] = *(_DWORD *)(a4 + 20);
        if (a11.f32[0] >= v15.f32[2])
        {
          v15.i32[0] = *(_DWORD *)(a4 + 8);
          v18.i32[0] = v18.i32[2];
          if (v15.f32[0] <= v18.f32[2])
          {
            if (a1)
            {
              v19 = (a1 - 1);
              v57 = *(int32x2_t *)a2;
              v20 = vsub_s32(*(int32x2_t *)&v17, *(int32x2_t *)a7.f32).u32[0] >> 1;
              v58 = v14;
              v59 = v20 + a7.i32[0];
              v60 = v20 + a7.i32[1];
              v61 = v20 + v14;
              sub_2239BA8FC(v19, &v57);
              v21 = *(_DWORD *)(a2 + 4);
              v22 = *(_DWORD *)(a2 + 8);
              v23 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
              v57.i32[0] = *(_DWORD *)a2;
              v57.i32[1] = v21;
              v58 = v22 + v23;
              v59 = v23 + v57.i32[0];
              v60 = v21 + v23;
              v61 = v22 + v23 + v23;
              sub_2239BA8FC(v19, &v57);
              v24 = *(_DWORD *)(a2 + 8);
              v25 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
              v26 = v25 + *(_DWORD *)(a2 + 4);
              v57.i32[0] = *(_DWORD *)a2;
              v57.i32[1] = v26;
              v58 = v24;
              v59 = v25 + v57.i32[0];
              v60 = v26 + v25;
              v61 = v24 + v25;
              sub_2239BA8FC(v19, &v57);
              v27 = *(_DWORD *)(a2 + 8);
              v28 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
              v29 = v28 + *(_DWORD *)(a2 + 4);
              v57.i32[0] = *(_DWORD *)a2;
              v57.i32[1] = v29;
              v58 = v27 + v28;
              v59 = v28 + v57.i32[0];
              v60 = v29 + v28;
              v61 = v27 + v28 + v28;
              sub_2239BA8FC(v19, &v57);
              v30 = *(_DWORD *)(a2 + 4);
              v31 = *(_DWORD *)(a2 + 8);
              v32 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
              v57.i32[0] = v32 + *(_DWORD *)a2;
              v57.i32[1] = v30;
              v58 = v31;
              v59 = v57.i32[0] + v32;
              v60 = v30 + v32;
              v61 = v31 + v32;
              sub_2239BA8FC(v19, &v57);
              v33 = *(_DWORD *)(a2 + 4);
              v34 = *(_DWORD *)(a2 + 8);
              v35 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
              v57.i32[0] = v35 + *(_DWORD *)a2;
              v57.i32[1] = v33;
              v58 = v34 + v35;
              v59 = v57.i32[0] + v35;
              v60 = v33 + v35;
              v61 = v34 + v35 + v35;
              sub_2239BA8FC(v19, &v57);
              v36 = *(_DWORD *)(a2 + 8);
              v37 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
              v38 = v37 + *(_DWORD *)(a2 + 4);
              v57.i32[0] = v37 + *(_DWORD *)a2;
              v57.i32[1] = v38;
              v58 = v36;
              v59 = v57.i32[0] + v37;
              v60 = v38 + v37;
              v61 = v36 + v37;
              sub_2239BA8FC(v19, &v57);
              v39 = *(_DWORD *)(a2 + 8);
              v40 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
              v41 = v40 + *(_DWORD *)(a2 + 4);
              v57.i32[0] = v40 + *(_DWORD *)a2;
              v57.i32[1] = v41;
              v58 = v39 + v40;
              v59 = v57.i32[0] + v40;
              v60 = v41 + v40;
              v61 = v39 + v40 + v40;
              sub_2239BA8FC(v19, &v57);
            }
            else
            {
              v42 = *(_DWORD *)(a5[1]
                              + 4 * (a7.i8[0] & 7 | (8 * (a7.i8[4] & 7)) & 0x3F | ((*(_DWORD *)(a2 + 8) & 7u) << 6)));
              if (v42 != *(_DWORD *)(*a5 + 272))
              {
                v43 = *(_QWORD *)(a5[2] + 8);
                if ((v42 & 0x10000000) != 0)
                  v44 = 0x40000000;
                else
                  v44 = 0x80000000;
                if ((v42 & 0x20000000) != 0)
                  v45 = v44;
                else
                  v45 = v42 & 0xCFFFFFFF;
                if ((v45 & 0x40000000) != 0)
                {
                  v46 = *(_QWORD **)v43;
                  v47 = *v46;
                  v48 = *(_DWORD *)(*v46 + 8);
                  v49 = a7.i32[0] / v48;
                  v50 = a7.i32[1] / v48;
                  v51 = v14 / v48;
                  v52 = (const float *)(*v46 + 1656);
                  a7.f32[0] = (float)v49;
                  a7.f32[1] = (float)v50;
                  a7.f32[2] = (float)v51;
                  v53 = *(_QWORD *)(v46[1] + 144);
                  v63 = vld3_f32(v52);
                  v54.i64[0] = 0x3F0000003F000000;
                  v54.i64[1] = 0x3F0000003F000000;
                  v55 = vaddq_f32(a7, v54);
                  v57 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v63.val[0], v55.f32[0]), v63.val[1], *(float32x2_t *)v55.f32, 1), v63.val[2], v55, 2), (float32x2_t)0xBF000000BF000000));
                  v58 = 0;
                  v56 = vmulq_n_f32(vaddq_f32(a6, v54), *(float *)&v53);
                  v62 = &v57;
                  *(uint64_t *)((char *)sub_223A17B10((float *)(v47 + 64), (int *)&v57, (uint64_t)&unk_2245BA939, (uint64_t **)&v62)+ 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v63.val[0], v56.f32[0]), v63.val[1], *(float32x2_t *)v56.f32, 1), v63.val[2], v56, 2);
                }
                else if (!(v45 >> 30))
                {
                  sub_2239B2318(**(_QWORD **)(v43 + 16), *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8), (int32x2_t *)a2, *(_QWORD *)(*(_QWORD *)(v43 + 8) + 2448) + 520 * v45, *(_QWORD *)(*(_QWORD *)(v43 + 16) + 16), *(double *)a6.i64, a7, v17, *(double *)v15.i64, *(double *)v18.i64, *(double *)a11.i64, a12, a13);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_2239BADB8(_QWORD **a1, int32x2_t *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  const float *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  _QWORD *v26;
  __int32 v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  const float *v36;
  int v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  _QWORD *v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  const float *v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  _QWORD *v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  const float *v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  _QWORD *v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  const float *v79;
  uint64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  _QWORD *v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  const float *v93;
  uint64_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  _QWORD *v98;
  int v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  _QWORD *v104;
  uint64_t v105;
  int v106;
  const float *v107;
  uint64_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  _QWORD *v112;
  int v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  _QWORD *v118;
  uint64_t v119;
  int v120;
  const float *v121;
  uint64_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  _QWORD *v126;
  int v127;
  int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  _QWORD *v132;
  uint64_t v133;
  int v134;
  const float *v135;
  uint64_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  _QWORD *v140;
  __int32 v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  _QWORD *v148;
  uint64_t v149;
  const float *v150;
  int v151;
  uint64_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  _QWORD *v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  _QWORD *v162;
  uint64_t v163;
  int v164;
  const float *v165;
  uint64_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  _QWORD *v170;
  int v171;
  int v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  _QWORD *v176;
  uint64_t v177;
  int v178;
  const float *v179;
  uint64_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  _QWORD *v184;
  int v185;
  int v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  _QWORD *v190;
  uint64_t v191;
  int v192;
  const float *v193;
  uint64_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  _QWORD *v198;
  int v199;
  int v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  _QWORD *v204;
  uint64_t v205;
  int v206;
  const float *v207;
  uint64_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  _QWORD *v212;
  int v213;
  int v214;
  uint64_t v215;
  unsigned int v216;
  unsigned int v217;
  _QWORD *v218;
  uint64_t v219;
  int v220;
  const float *v221;
  uint64_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  _QWORD *v226;
  int v227;
  int v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  _QWORD *v232;
  uint64_t v233;
  int v234;
  const float *v235;
  uint64_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  _QWORD *v240;
  int v241;
  int v242;
  uint64_t v243;
  unsigned int v244;
  unsigned int v245;
  _QWORD *v246;
  uint64_t v247;
  int v248;
  const float *v249;
  uint64_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  _QWORD *v254;
  __int32 v255;
  int v256;
  int v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  _QWORD *v262;
  uint64_t v263;
  const float *v264;
  int v265;
  uint64_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  _QWORD *v270;
  int v271;
  int v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  _QWORD *v276;
  uint64_t v277;
  int v278;
  const float *v279;
  uint64_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  _QWORD *v284;
  int v285;
  int v286;
  uint64_t v287;
  unsigned int v288;
  unsigned int v289;
  _QWORD *v290;
  uint64_t v291;
  int v292;
  const float *v293;
  uint64_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  _QWORD *v298;
  int v299;
  int v300;
  uint64_t v301;
  unsigned int v302;
  unsigned int v303;
  _QWORD *v304;
  uint64_t v305;
  int v306;
  const float *v307;
  uint64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  _QWORD *v312;
  int v313;
  int v314;
  uint64_t v315;
  unsigned int v316;
  unsigned int v317;
  _QWORD *v318;
  uint64_t v319;
  int v320;
  const float *v321;
  uint64_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  _QWORD *v326;
  int v327;
  int v328;
  uint64_t v329;
  unsigned int v330;
  unsigned int v331;
  _QWORD *v332;
  uint64_t v333;
  int v334;
  const float *v335;
  uint64_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  _QWORD *v340;
  int v341;
  int v342;
  uint64_t v343;
  unsigned int v344;
  unsigned int v345;
  _QWORD *v346;
  uint64_t v347;
  int v348;
  const float *v349;
  uint64_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  _QWORD *v354;
  int v355;
  int v356;
  uint64_t v357;
  unsigned int v358;
  unsigned int v359;
  _QWORD *v360;
  uint64_t v361;
  int v362;
  const float *v363;
  uint64_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  _QWORD *v368;
  __int32 v369;
  int v370;
  int v371;
  int v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int v375;
  _QWORD *v376;
  uint64_t v377;
  const float *v378;
  int v379;
  uint64_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  _QWORD *v384;
  int v385;
  int v386;
  uint64_t v387;
  unsigned int v388;
  unsigned int v389;
  _QWORD *v390;
  uint64_t v391;
  int v392;
  const float *v393;
  uint64_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  _QWORD *v398;
  int v399;
  int v400;
  uint64_t v401;
  unsigned int v402;
  unsigned int v403;
  _QWORD *v404;
  uint64_t v405;
  int v406;
  const float *v407;
  uint64_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  _QWORD *v412;
  int v413;
  int v414;
  uint64_t v415;
  unsigned int v416;
  unsigned int v417;
  _QWORD *v418;
  uint64_t v419;
  int v420;
  const float *v421;
  uint64_t v422;
  float32x4_t v423;
  float32x4_t v424;
  float32x4_t v425;
  _QWORD *v426;
  int v427;
  int v428;
  uint64_t v429;
  unsigned int v430;
  unsigned int v431;
  _QWORD *v432;
  uint64_t v433;
  int v434;
  const float *v435;
  uint64_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  _QWORD *v440;
  int v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  unsigned int v445;
  _QWORD *v446;
  uint64_t v447;
  int v448;
  const float *v449;
  uint64_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  _QWORD *v454;
  int v455;
  int v456;
  uint64_t v457;
  unsigned int v458;
  unsigned int v459;
  _QWORD *v460;
  uint64_t v461;
  int v462;
  const float *v463;
  uint64_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  _QWORD *v468;
  int v469;
  int v470;
  uint64_t v471;
  unsigned int v472;
  unsigned int v473;
  _QWORD *v474;
  uint64_t v475;
  int v476;
  const float *v477;
  uint64_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  _QWORD *v482;
  __int32 v483;
  int v484;
  int v485;
  int v486;
  uint64_t v487;
  unsigned int v488;
  unsigned int v489;
  _QWORD *v490;
  uint64_t v491;
  const float *v492;
  int v493;
  uint64_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  int32x2_t v498;
  int v499;
  int32x2_t v500;
  int v501;
  int32x2_t *v502;
  float32x2x3_t v503;
  float32x2x3_t v504;
  float32x2x3_t v505;
  float32x2x3_t v506;
  float32x2x3_t v507;
  float32x2x3_t v508;
  float32x2x3_t v509;
  float32x2x3_t v510;
  float32x2x3_t v511;
  float32x2x3_t v512;
  float32x2x3_t v513;
  float32x2x3_t v514;
  float32x2x3_t v515;
  float32x2x3_t v516;
  float32x2x3_t v517;
  float32x2x3_t v518;
  float32x2x3_t v519;
  float32x2x3_t v520;
  float32x2x3_t v521;
  float32x2x3_t v522;
  float32x2x3_t v523;
  float32x2x3_t v524;
  float32x2x3_t v525;
  float32x2x3_t v526;
  float32x2x3_t v527;
  float32x2x3_t v528;
  float32x2x3_t v529;
  float32x2x3_t v530;
  float32x2x3_t v531;
  float32x2x3_t v532;
  float32x2x3_t v533;
  float32x2x3_t v534;
  float32x2x3_t v535;
  float32x2x3_t v536;

  v12 = *a1;
  a4.i64[0] = 0x100000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x100000007);
  v498 = *(int32x2_t *)a3.f32;
  v13 = a2[1].i32[0];
  v499 = v13;
  v14 = *(_DWORD *)(v12[1] + 60);
  if (v14 != *(_DWORD *)(*v12 + 272))
  {
    v15 = *(_QWORD *)(v12[2] + 8);
    if ((v14 & 0x10000000) != 0)
      v16 = 0x40000000;
    else
      v16 = 0x80000000;
    if ((v14 & 0x20000000) != 0)
      v17 = v16;
    else
      v17 = v14 & 0xCFFFFFFF;
    if ((v17 & 0x40000000) != 0)
    {
      v18 = *(_QWORD **)v15;
      v19 = *v18;
      v20 = *(_DWORD *)(*v18 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v20);
      a4.f32[1] = (float)(a3.i32[1] / v20);
      a4.f32[2] = (float)(v13 / v20);
      v21 = (const float *)(*v18 + 1656);
      v503 = vld3_f32(v21);
      v22 = *(_QWORD *)(v18[1] + 144);
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      v24 = vaddq_f32(a4, v23);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v24.f32[0]), v503.val[1], *(float32x2_t *)v24.f32, 1), v503.val[2], v24, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v13;
      v25 = vmulq_n_f32(vaddq_f32(a3, v23), *(float *)&v22);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v19 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v25.f32[0]), v503.val[1], *(float32x2_t *)v25.f32, 1), v503.val[2], v25, 2);
    }
    else if (!(v17 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v15 + 16), *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 2448) + 520 * v17, *(_QWORD *)(*(_QWORD *)(v15 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v26 = *a1;
  v27 = a2->i32[0];
  v28 = a2->i32[1] + 2;
  v498.i32[0] = a2->i32[0];
  v498.i32[1] = v28;
  v29 = a2[1].i32[0];
  v499 = v29;
  v30 = *(_DWORD *)(v26[1] + 64);
  if (v30 != *(_DWORD *)(*v26 + 272))
  {
    v31 = *(_QWORD *)(v26[2] + 8);
    if ((v30 & 0x10000000) != 0)
      v32 = 0x40000000;
    else
      v32 = 0x80000000;
    if ((v30 & 0x20000000) != 0)
      v33 = v32;
    else
      v33 = v30 & 0xCFFFFFFF;
    if ((v33 & 0x40000000) != 0)
    {
      v34 = *(_QWORD **)v31;
      v35 = *v34;
      v36 = (const float *)(*v34 + 1656);
      v37 = *(_DWORD *)(*v34 + 8);
      a3.f32[0] = (float)(v27 / v37);
      v38 = *(_QWORD *)(v34[1] + 144);
      a3.f32[1] = (float)(v28 / v37);
      a3.f32[2] = (float)(v29 / v37);
      v39.i64[0] = 0x3F0000003F000000;
      v39.i64[1] = 0x3F0000003F000000;
      v40 = vaddq_f32(a3, v39);
      v532 = vld3_f32(v36);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v532.val[0], v40.f32[0]), v532.val[1], *(float32x2_t *)v40.f32, 1), v532.val[2], v40, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)v40.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v28, v27));
      v40.f32[2] = (float)v29;
      v41 = vmulq_n_f32(vaddq_f32(v40, v39), *(float *)&v38);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v35 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v532.val[0], v41.f32[0]), v532.val[1], *(float32x2_t *)v41.f32, 1), v532.val[2], v41, 2);
    }
    else if (!(v33 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v31 + 16), *(_QWORD *)(*(_QWORD *)(v31 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v31 + 8) + 2448) + 520 * v33, *(_QWORD *)(*(_QWORD *)(v31 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v42 = *a1;
  a4.i64[0] = 0x200000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x200000001);
  v498 = *(int32x2_t *)a3.f32;
  v43 = a2[1].i32[0];
  v499 = v43;
  v44 = *(_DWORD *)(v42[1] + 68);
  if (v44 != *(_DWORD *)(*v42 + 272))
  {
    v45 = *(_QWORD *)(v42[2] + 8);
    if ((v44 & 0x10000000) != 0)
      v46 = 0x40000000;
    else
      v46 = 0x80000000;
    if ((v44 & 0x20000000) != 0)
      v47 = v46;
    else
      v47 = v44 & 0xCFFFFFFF;
    if ((v47 & 0x40000000) != 0)
    {
      v48 = *(_QWORD **)v45;
      v49 = *v48;
      v50 = *(_DWORD *)(*v48 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v50);
      a4.f32[1] = (float)(a3.i32[1] / v50);
      a4.f32[2] = (float)(v43 / v50);
      v51 = (const float *)(*v48 + 1656);
      v504 = vld3_f32(v51);
      v52 = *(_QWORD *)(v48[1] + 144);
      v53.i64[0] = 0x3F0000003F000000;
      v53.i64[1] = 0x3F0000003F000000;
      v54 = vaddq_f32(a4, v53);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v54.f32[0]), v504.val[1], *(float32x2_t *)v54.f32, 1), v504.val[2], v54, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v43;
      v55 = vmulq_n_f32(vaddq_f32(a3, v53), *(float *)&v52);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v49 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v55.f32[0]), v504.val[1], *(float32x2_t *)v55.f32, 1), v504.val[2], v55, 2);
    }
    else if (!(v47 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v45 + 16), *(_QWORD *)(*(_QWORD *)(v45 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v45 + 8) + 2448) + 520 * v47, *(_QWORD *)(*(_QWORD *)(v45 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v56 = *a1;
  a4.i64[0] = 0x200000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x200000002);
  v498 = *(int32x2_t *)a3.f32;
  v57 = a2[1].i32[0];
  v499 = v57;
  v58 = *(_DWORD *)(v56[1] + 72);
  if (v58 != *(_DWORD *)(*v56 + 272))
  {
    v59 = *(_QWORD *)(v56[2] + 8);
    if ((v58 & 0x10000000) != 0)
      v60 = 0x40000000;
    else
      v60 = 0x80000000;
    if ((v58 & 0x20000000) != 0)
      v61 = v60;
    else
      v61 = v58 & 0xCFFFFFFF;
    if ((v61 & 0x40000000) != 0)
    {
      v62 = *(_QWORD **)v59;
      v63 = *v62;
      v64 = *(_DWORD *)(*v62 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v64);
      a4.f32[1] = (float)(a3.i32[1] / v64);
      a4.f32[2] = (float)(v57 / v64);
      v65 = (const float *)(*v62 + 1656);
      v505 = vld3_f32(v65);
      v66 = *(_QWORD *)(v62[1] + 144);
      v67.i64[0] = 0x3F0000003F000000;
      v67.i64[1] = 0x3F0000003F000000;
      v68 = vaddq_f32(a4, v67);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v68.f32[0]), v505.val[1], *(float32x2_t *)v68.f32, 1), v505.val[2], v68, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v57;
      v69 = vmulq_n_f32(vaddq_f32(a3, v67), *(float *)&v66);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v63 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v69.f32[0]), v505.val[1], *(float32x2_t *)v69.f32, 1), v505.val[2], v69, 2);
    }
    else if (!(v61 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v59 + 16), *(_QWORD *)(*(_QWORD *)(v59 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v59 + 8) + 2448) + 520 * v61, *(_QWORD *)(*(_QWORD *)(v59 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v70 = *a1;
  a4.i64[0] = 0x200000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x200000003);
  v498 = *(int32x2_t *)a3.f32;
  v71 = a2[1].i32[0];
  v499 = v71;
  v72 = *(_DWORD *)(v70[1] + 76);
  if (v72 != *(_DWORD *)(*v70 + 272))
  {
    v73 = *(_QWORD *)(v70[2] + 8);
    if ((v72 & 0x10000000) != 0)
      v74 = 0x40000000;
    else
      v74 = 0x80000000;
    if ((v72 & 0x20000000) != 0)
      v75 = v74;
    else
      v75 = v72 & 0xCFFFFFFF;
    if ((v75 & 0x40000000) != 0)
    {
      v76 = *(_QWORD **)v73;
      v77 = *v76;
      v78 = *(_DWORD *)(*v76 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v78);
      a4.f32[1] = (float)(a3.i32[1] / v78);
      a4.f32[2] = (float)(v71 / v78);
      v79 = (const float *)(*v76 + 1656);
      v506 = vld3_f32(v79);
      v80 = *(_QWORD *)(v76[1] + 144);
      v81.i64[0] = 0x3F0000003F000000;
      v81.i64[1] = 0x3F0000003F000000;
      v82 = vaddq_f32(a4, v81);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v82.f32[0]), v506.val[1], *(float32x2_t *)v82.f32, 1), v506.val[2], v82, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v71;
      v83 = vmulq_n_f32(vaddq_f32(a3, v81), *(float *)&v80);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v77 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v83.f32[0]), v506.val[1], *(float32x2_t *)v83.f32, 1), v506.val[2], v83, 2);
    }
    else if (!(v75 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v73 + 16), *(_QWORD *)(*(_QWORD *)(v73 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v73 + 8) + 2448) + 520 * v75, *(_QWORD *)(*(_QWORD *)(v73 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v84 = *a1;
  a4.i64[0] = 0x200000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x200000004);
  v498 = *(int32x2_t *)a3.f32;
  v85 = a2[1].i32[0];
  v499 = v85;
  v86 = *(_DWORD *)(v84[1] + 80);
  if (v86 != *(_DWORD *)(*v84 + 272))
  {
    v87 = *(_QWORD *)(v84[2] + 8);
    if ((v86 & 0x10000000) != 0)
      v88 = 0x40000000;
    else
      v88 = 0x80000000;
    if ((v86 & 0x20000000) != 0)
      v89 = v88;
    else
      v89 = v86 & 0xCFFFFFFF;
    if ((v89 & 0x40000000) != 0)
    {
      v90 = *(_QWORD **)v87;
      v91 = *v90;
      v92 = *(_DWORD *)(*v90 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v92);
      a4.f32[1] = (float)(a3.i32[1] / v92);
      a4.f32[2] = (float)(v85 / v92);
      v93 = (const float *)(*v90 + 1656);
      v507 = vld3_f32(v93);
      v94 = *(_QWORD *)(v90[1] + 144);
      v95.i64[0] = 0x3F0000003F000000;
      v95.i64[1] = 0x3F0000003F000000;
      v96 = vaddq_f32(a4, v95);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v96.f32[0]), v507.val[1], *(float32x2_t *)v96.f32, 1), v507.val[2], v96, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v85;
      v97 = vmulq_n_f32(vaddq_f32(a3, v95), *(float *)&v94);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v91 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v97.f32[0]), v507.val[1], *(float32x2_t *)v97.f32, 1), v507.val[2], v97, 2);
    }
    else if (!(v89 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v87 + 16), *(_QWORD *)(*(_QWORD *)(v87 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v87 + 8) + 2448) + 520 * v89, *(_QWORD *)(*(_QWORD *)(v87 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v98 = *a1;
  a4.i64[0] = 0x200000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x200000005);
  v498 = *(int32x2_t *)a3.f32;
  v99 = a2[1].i32[0];
  v499 = v99;
  v100 = *(_DWORD *)(v98[1] + 84);
  if (v100 != *(_DWORD *)(*v98 + 272))
  {
    v101 = *(_QWORD *)(v98[2] + 8);
    if ((v100 & 0x10000000) != 0)
      v102 = 0x40000000;
    else
      v102 = 0x80000000;
    if ((v100 & 0x20000000) != 0)
      v103 = v102;
    else
      v103 = v100 & 0xCFFFFFFF;
    if ((v103 & 0x40000000) != 0)
    {
      v104 = *(_QWORD **)v101;
      v105 = *v104;
      v106 = *(_DWORD *)(*v104 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v106);
      a4.f32[1] = (float)(a3.i32[1] / v106);
      a4.f32[2] = (float)(v99 / v106);
      v107 = (const float *)(*v104 + 1656);
      v508 = vld3_f32(v107);
      v108 = *(_QWORD *)(v104[1] + 144);
      v109.i64[0] = 0x3F0000003F000000;
      v109.i64[1] = 0x3F0000003F000000;
      v110 = vaddq_f32(a4, v109);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v110.f32[0]), v508.val[1], *(float32x2_t *)v110.f32, 1), v508.val[2], v110, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v99;
      v111 = vmulq_n_f32(vaddq_f32(a3, v109), *(float *)&v108);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v105 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v111.f32[0]), v508.val[1], *(float32x2_t *)v111.f32, 1), v508.val[2], v111, 2);
    }
    else if (!(v103 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v101 + 16), *(_QWORD *)(*(_QWORD *)(v101 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v101 + 8) + 2448) + 520 * v103, *(_QWORD *)(*(_QWORD *)(v101 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v112 = *a1;
  a4.i64[0] = 0x200000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x200000006);
  v498 = *(int32x2_t *)a3.f32;
  v113 = a2[1].i32[0];
  v499 = v113;
  v114 = *(_DWORD *)(v112[1] + 88);
  if (v114 != *(_DWORD *)(*v112 + 272))
  {
    v115 = *(_QWORD *)(v112[2] + 8);
    if ((v114 & 0x10000000) != 0)
      v116 = 0x40000000;
    else
      v116 = 0x80000000;
    if ((v114 & 0x20000000) != 0)
      v117 = v116;
    else
      v117 = v114 & 0xCFFFFFFF;
    if ((v117 & 0x40000000) != 0)
    {
      v118 = *(_QWORD **)v115;
      v119 = *v118;
      v120 = *(_DWORD *)(*v118 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v120);
      a4.f32[1] = (float)(a3.i32[1] / v120);
      a4.f32[2] = (float)(v113 / v120);
      v121 = (const float *)(*v118 + 1656);
      v509 = vld3_f32(v121);
      v122 = *(_QWORD *)(v118[1] + 144);
      v123.i64[0] = 0x3F0000003F000000;
      v123.i64[1] = 0x3F0000003F000000;
      v124 = vaddq_f32(a4, v123);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v124.f32[0]), v509.val[1], *(float32x2_t *)v124.f32, 1), v509.val[2], v124, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v113;
      v125 = vmulq_n_f32(vaddq_f32(a3, v123), *(float *)&v122);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v119 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v125.f32[0]), v509.val[1], *(float32x2_t *)v125.f32, 1), v509.val[2], v125, 2);
    }
    else if (!(v117 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v115 + 16), *(_QWORD *)(*(_QWORD *)(v115 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v115 + 8) + 2448) + 520 * v117, *(_QWORD *)(*(_QWORD *)(v115 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v126 = *a1;
  a4.i64[0] = 0x200000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x200000007);
  v498 = *(int32x2_t *)a3.f32;
  v127 = a2[1].i32[0];
  v499 = v127;
  v128 = *(_DWORD *)(v126[1] + 92);
  if (v128 != *(_DWORD *)(*v126 + 272))
  {
    v129 = *(_QWORD *)(v126[2] + 8);
    if ((v128 & 0x10000000) != 0)
      v130 = 0x40000000;
    else
      v130 = 0x80000000;
    if ((v128 & 0x20000000) != 0)
      v131 = v130;
    else
      v131 = v128 & 0xCFFFFFFF;
    if ((v131 & 0x40000000) != 0)
    {
      v132 = *(_QWORD **)v129;
      v133 = *v132;
      v134 = *(_DWORD *)(*v132 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v134);
      a4.f32[1] = (float)(a3.i32[1] / v134);
      a4.f32[2] = (float)(v127 / v134);
      v135 = (const float *)(*v132 + 1656);
      v510 = vld3_f32(v135);
      v136 = *(_QWORD *)(v132[1] + 144);
      v137.i64[0] = 0x3F0000003F000000;
      v137.i64[1] = 0x3F0000003F000000;
      v138 = vaddq_f32(a4, v137);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v138.f32[0]), v510.val[1], *(float32x2_t *)v138.f32, 1), v510.val[2], v138, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v127;
      v139 = vmulq_n_f32(vaddq_f32(a3, v137), *(float *)&v136);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v133 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v139.f32[0]), v510.val[1], *(float32x2_t *)v139.f32, 1), v510.val[2], v139, 2);
    }
    else if (!(v131 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v129 + 16), *(_QWORD *)(*(_QWORD *)(v129 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v129 + 8) + 2448) + 520 * v131, *(_QWORD *)(*(_QWORD *)(v129 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v140 = *a1;
  v141 = a2->i32[0];
  v142 = a2->i32[1] + 3;
  v498.i32[0] = a2->i32[0];
  v498.i32[1] = v142;
  v143 = a2[1].i32[0];
  v499 = v143;
  v144 = *(_DWORD *)(v140[1] + 96);
  if (v144 != *(_DWORD *)(*v140 + 272))
  {
    v145 = *(_QWORD *)(v140[2] + 8);
    if ((v144 & 0x10000000) != 0)
      v146 = 0x40000000;
    else
      v146 = 0x80000000;
    if ((v144 & 0x20000000) != 0)
      v147 = v146;
    else
      v147 = v144 & 0xCFFFFFFF;
    if ((v147 & 0x40000000) != 0)
    {
      v148 = *(_QWORD **)v145;
      v149 = *v148;
      v150 = (const float *)(*v148 + 1656);
      v151 = *(_DWORD *)(*v148 + 8);
      a3.f32[0] = (float)(v141 / v151);
      v152 = *(_QWORD *)(v148[1] + 144);
      a3.f32[1] = (float)(v142 / v151);
      a3.f32[2] = (float)(v143 / v151);
      v153.i64[0] = 0x3F0000003F000000;
      v153.i64[1] = 0x3F0000003F000000;
      v154 = vaddq_f32(a3, v153);
      v533 = vld3_f32(v150);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v533.val[0], v154.f32[0]), v533.val[1], *(float32x2_t *)v154.f32, 1), v533.val[2], v154, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)v154.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v142, v141));
      v154.f32[2] = (float)v143;
      v155 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v152);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v149 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v533.val[0], v155.f32[0]), v533.val[1], *(float32x2_t *)v155.f32, 1), v533.val[2], v155, 2);
    }
    else if (!(v147 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v145 + 16), *(_QWORD *)(*(_QWORD *)(v145 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v145 + 8) + 2448) + 520 * v147, *(_QWORD *)(*(_QWORD *)(v145 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v156 = *a1;
  a4.i64[0] = 0x300000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x300000001);
  v498 = *(int32x2_t *)a3.f32;
  v157 = a2[1].i32[0];
  v499 = v157;
  v158 = *(_DWORD *)(v156[1] + 100);
  if (v158 != *(_DWORD *)(*v156 + 272))
  {
    v159 = *(_QWORD *)(v156[2] + 8);
    if ((v158 & 0x10000000) != 0)
      v160 = 0x40000000;
    else
      v160 = 0x80000000;
    if ((v158 & 0x20000000) != 0)
      v161 = v160;
    else
      v161 = v158 & 0xCFFFFFFF;
    if ((v161 & 0x40000000) != 0)
    {
      v162 = *(_QWORD **)v159;
      v163 = *v162;
      v164 = *(_DWORD *)(*v162 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v164);
      a4.f32[1] = (float)(a3.i32[1] / v164);
      a4.f32[2] = (float)(v157 / v164);
      v165 = (const float *)(*v162 + 1656);
      v511 = vld3_f32(v165);
      v166 = *(_QWORD *)(v162[1] + 144);
      v167.i64[0] = 0x3F0000003F000000;
      v167.i64[1] = 0x3F0000003F000000;
      v168 = vaddq_f32(a4, v167);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v511.val[0], v168.f32[0]), v511.val[1], *(float32x2_t *)v168.f32, 1), v511.val[2], v168, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v157;
      v169 = vmulq_n_f32(vaddq_f32(a3, v167), *(float *)&v166);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v163 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v511.val[0], v169.f32[0]), v511.val[1], *(float32x2_t *)v169.f32, 1), v511.val[2], v169, 2);
    }
    else if (!(v161 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v159 + 16), *(_QWORD *)(*(_QWORD *)(v159 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v159 + 8) + 2448) + 520 * v161, *(_QWORD *)(*(_QWORD *)(v159 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v170 = *a1;
  a4.i64[0] = 0x300000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x300000002);
  v498 = *(int32x2_t *)a3.f32;
  v171 = a2[1].i32[0];
  v499 = v171;
  v172 = *(_DWORD *)(v170[1] + 104);
  if (v172 != *(_DWORD *)(*v170 + 272))
  {
    v173 = *(_QWORD *)(v170[2] + 8);
    if ((v172 & 0x10000000) != 0)
      v174 = 0x40000000;
    else
      v174 = 0x80000000;
    if ((v172 & 0x20000000) != 0)
      v175 = v174;
    else
      v175 = v172 & 0xCFFFFFFF;
    if ((v175 & 0x40000000) != 0)
    {
      v176 = *(_QWORD **)v173;
      v177 = *v176;
      v178 = *(_DWORD *)(*v176 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v178);
      a4.f32[1] = (float)(a3.i32[1] / v178);
      a4.f32[2] = (float)(v171 / v178);
      v179 = (const float *)(*v176 + 1656);
      v512 = vld3_f32(v179);
      v180 = *(_QWORD *)(v176[1] + 144);
      v181.i64[0] = 0x3F0000003F000000;
      v181.i64[1] = 0x3F0000003F000000;
      v182 = vaddq_f32(a4, v181);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v512.val[0], v182.f32[0]), v512.val[1], *(float32x2_t *)v182.f32, 1), v512.val[2], v182, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v171;
      v183 = vmulq_n_f32(vaddq_f32(a3, v181), *(float *)&v180);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v177 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v512.val[0], v183.f32[0]), v512.val[1], *(float32x2_t *)v183.f32, 1), v512.val[2], v183, 2);
    }
    else if (!(v175 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v173 + 16), *(_QWORD *)(*(_QWORD *)(v173 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v173 + 8) + 2448) + 520 * v175, *(_QWORD *)(*(_QWORD *)(v173 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v184 = *a1;
  a4.i64[0] = 0x300000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x300000003);
  v498 = *(int32x2_t *)a3.f32;
  v185 = a2[1].i32[0];
  v499 = v185;
  v186 = *(_DWORD *)(v184[1] + 108);
  if (v186 != *(_DWORD *)(*v184 + 272))
  {
    v187 = *(_QWORD *)(v184[2] + 8);
    if ((v186 & 0x10000000) != 0)
      v188 = 0x40000000;
    else
      v188 = 0x80000000;
    if ((v186 & 0x20000000) != 0)
      v189 = v188;
    else
      v189 = v186 & 0xCFFFFFFF;
    if ((v189 & 0x40000000) != 0)
    {
      v190 = *(_QWORD **)v187;
      v191 = *v190;
      v192 = *(_DWORD *)(*v190 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v192);
      a4.f32[1] = (float)(a3.i32[1] / v192);
      a4.f32[2] = (float)(v185 / v192);
      v193 = (const float *)(*v190 + 1656);
      v513 = vld3_f32(v193);
      v194 = *(_QWORD *)(v190[1] + 144);
      v195.i64[0] = 0x3F0000003F000000;
      v195.i64[1] = 0x3F0000003F000000;
      v196 = vaddq_f32(a4, v195);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v513.val[0], v196.f32[0]), v513.val[1], *(float32x2_t *)v196.f32, 1), v513.val[2], v196, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v185;
      v197 = vmulq_n_f32(vaddq_f32(a3, v195), *(float *)&v194);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v191 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v513.val[0], v197.f32[0]), v513.val[1], *(float32x2_t *)v197.f32, 1), v513.val[2], v197, 2);
    }
    else if (!(v189 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v187 + 16), *(_QWORD *)(*(_QWORD *)(v187 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v187 + 8) + 2448) + 520 * v189, *(_QWORD *)(*(_QWORD *)(v187 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v198 = *a1;
  a4.i64[0] = 0x300000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x300000004);
  v498 = *(int32x2_t *)a3.f32;
  v199 = a2[1].i32[0];
  v499 = v199;
  v200 = *(_DWORD *)(v198[1] + 112);
  if (v200 != *(_DWORD *)(*v198 + 272))
  {
    v201 = *(_QWORD *)(v198[2] + 8);
    if ((v200 & 0x10000000) != 0)
      v202 = 0x40000000;
    else
      v202 = 0x80000000;
    if ((v200 & 0x20000000) != 0)
      v203 = v202;
    else
      v203 = v200 & 0xCFFFFFFF;
    if ((v203 & 0x40000000) != 0)
    {
      v204 = *(_QWORD **)v201;
      v205 = *v204;
      v206 = *(_DWORD *)(*v204 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v206);
      a4.f32[1] = (float)(a3.i32[1] / v206);
      a4.f32[2] = (float)(v199 / v206);
      v207 = (const float *)(*v204 + 1656);
      v514 = vld3_f32(v207);
      v208 = *(_QWORD *)(v204[1] + 144);
      v209.i64[0] = 0x3F0000003F000000;
      v209.i64[1] = 0x3F0000003F000000;
      v210 = vaddq_f32(a4, v209);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v514.val[0], v210.f32[0]), v514.val[1], *(float32x2_t *)v210.f32, 1), v514.val[2], v210, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v199;
      v211 = vmulq_n_f32(vaddq_f32(a3, v209), *(float *)&v208);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v205 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v514.val[0], v211.f32[0]), v514.val[1], *(float32x2_t *)v211.f32, 1), v514.val[2], v211, 2);
    }
    else if (!(v203 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v201 + 16), *(_QWORD *)(*(_QWORD *)(v201 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v201 + 8) + 2448) + 520 * v203, *(_QWORD *)(*(_QWORD *)(v201 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v212 = *a1;
  a4.i64[0] = 0x300000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x300000005);
  v498 = *(int32x2_t *)a3.f32;
  v213 = a2[1].i32[0];
  v499 = v213;
  v214 = *(_DWORD *)(v212[1] + 116);
  if (v214 != *(_DWORD *)(*v212 + 272))
  {
    v215 = *(_QWORD *)(v212[2] + 8);
    if ((v214 & 0x10000000) != 0)
      v216 = 0x40000000;
    else
      v216 = 0x80000000;
    if ((v214 & 0x20000000) != 0)
      v217 = v216;
    else
      v217 = v214 & 0xCFFFFFFF;
    if ((v217 & 0x40000000) != 0)
    {
      v218 = *(_QWORD **)v215;
      v219 = *v218;
      v220 = *(_DWORD *)(*v218 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v220);
      a4.f32[1] = (float)(a3.i32[1] / v220);
      a4.f32[2] = (float)(v213 / v220);
      v221 = (const float *)(*v218 + 1656);
      v515 = vld3_f32(v221);
      v222 = *(_QWORD *)(v218[1] + 144);
      v223.i64[0] = 0x3F0000003F000000;
      v223.i64[1] = 0x3F0000003F000000;
      v224 = vaddq_f32(a4, v223);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v515.val[0], v224.f32[0]), v515.val[1], *(float32x2_t *)v224.f32, 1), v515.val[2], v224, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v213;
      v225 = vmulq_n_f32(vaddq_f32(a3, v223), *(float *)&v222);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v219 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v515.val[0], v225.f32[0]), v515.val[1], *(float32x2_t *)v225.f32, 1), v515.val[2], v225, 2);
    }
    else if (!(v217 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v215 + 16), *(_QWORD *)(*(_QWORD *)(v215 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v215 + 8) + 2448) + 520 * v217, *(_QWORD *)(*(_QWORD *)(v215 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v226 = *a1;
  a4.i64[0] = 0x300000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x300000006);
  v498 = *(int32x2_t *)a3.f32;
  v227 = a2[1].i32[0];
  v499 = v227;
  v228 = *(_DWORD *)(v226[1] + 120);
  if (v228 != *(_DWORD *)(*v226 + 272))
  {
    v229 = *(_QWORD *)(v226[2] + 8);
    if ((v228 & 0x10000000) != 0)
      v230 = 0x40000000;
    else
      v230 = 0x80000000;
    if ((v228 & 0x20000000) != 0)
      v231 = v230;
    else
      v231 = v228 & 0xCFFFFFFF;
    if ((v231 & 0x40000000) != 0)
    {
      v232 = *(_QWORD **)v229;
      v233 = *v232;
      v234 = *(_DWORD *)(*v232 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v234);
      a4.f32[1] = (float)(a3.i32[1] / v234);
      a4.f32[2] = (float)(v227 / v234);
      v235 = (const float *)(*v232 + 1656);
      v516 = vld3_f32(v235);
      v236 = *(_QWORD *)(v232[1] + 144);
      v237.i64[0] = 0x3F0000003F000000;
      v237.i64[1] = 0x3F0000003F000000;
      v238 = vaddq_f32(a4, v237);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v516.val[0], v238.f32[0]), v516.val[1], *(float32x2_t *)v238.f32, 1), v516.val[2], v238, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v227;
      v239 = vmulq_n_f32(vaddq_f32(a3, v237), *(float *)&v236);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v233 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v516.val[0], v239.f32[0]), v516.val[1], *(float32x2_t *)v239.f32, 1), v516.val[2], v239, 2);
    }
    else if (!(v231 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v229 + 16), *(_QWORD *)(*(_QWORD *)(v229 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v229 + 8) + 2448) + 520 * v231, *(_QWORD *)(*(_QWORD *)(v229 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v240 = *a1;
  a4.i64[0] = 0x300000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x300000007);
  v498 = *(int32x2_t *)a3.f32;
  v241 = a2[1].i32[0];
  v499 = v241;
  v242 = *(_DWORD *)(v240[1] + 124);
  if (v242 != *(_DWORD *)(*v240 + 272))
  {
    v243 = *(_QWORD *)(v240[2] + 8);
    if ((v242 & 0x10000000) != 0)
      v244 = 0x40000000;
    else
      v244 = 0x80000000;
    if ((v242 & 0x20000000) != 0)
      v245 = v244;
    else
      v245 = v242 & 0xCFFFFFFF;
    if ((v245 & 0x40000000) != 0)
    {
      v246 = *(_QWORD **)v243;
      v247 = *v246;
      v248 = *(_DWORD *)(*v246 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v248);
      a4.f32[1] = (float)(a3.i32[1] / v248);
      a4.f32[2] = (float)(v241 / v248);
      v249 = (const float *)(*v246 + 1656);
      v517 = vld3_f32(v249);
      v250 = *(_QWORD *)(v246[1] + 144);
      v251.i64[0] = 0x3F0000003F000000;
      v251.i64[1] = 0x3F0000003F000000;
      v252 = vaddq_f32(a4, v251);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v517.val[0], v252.f32[0]), v517.val[1], *(float32x2_t *)v252.f32, 1), v517.val[2], v252, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v241;
      v253 = vmulq_n_f32(vaddq_f32(a3, v251), *(float *)&v250);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v247 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v517.val[0], v253.f32[0]), v517.val[1], *(float32x2_t *)v253.f32, 1), v517.val[2], v253, 2);
    }
    else if (!(v245 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v243 + 16), *(_QWORD *)(*(_QWORD *)(v243 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v243 + 8) + 2448) + 520 * v245, *(_QWORD *)(*(_QWORD *)(v243 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v254 = *a1;
  v255 = a2->i32[0];
  v256 = a2->i32[1] + 4;
  v498.i32[0] = a2->i32[0];
  v498.i32[1] = v256;
  v257 = a2[1].i32[0];
  v499 = v257;
  v258 = *(_DWORD *)(v254[1] + 128);
  if (v258 != *(_DWORD *)(*v254 + 272))
  {
    v259 = *(_QWORD *)(v254[2] + 8);
    if ((v258 & 0x10000000) != 0)
      v260 = 0x40000000;
    else
      v260 = 0x80000000;
    if ((v258 & 0x20000000) != 0)
      v261 = v260;
    else
      v261 = v258 & 0xCFFFFFFF;
    if ((v261 & 0x40000000) != 0)
    {
      v262 = *(_QWORD **)v259;
      v263 = *v262;
      v264 = (const float *)(*v262 + 1656);
      v265 = *(_DWORD *)(*v262 + 8);
      a3.f32[0] = (float)(v255 / v265);
      v266 = *(_QWORD *)(v262[1] + 144);
      a3.f32[1] = (float)(v256 / v265);
      a3.f32[2] = (float)(v257 / v265);
      v267.i64[0] = 0x3F0000003F000000;
      v267.i64[1] = 0x3F0000003F000000;
      v268 = vaddq_f32(a3, v267);
      v534 = vld3_f32(v264);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v534.val[0], v268.f32[0]), v534.val[1], *(float32x2_t *)v268.f32, 1), v534.val[2], v268, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)v268.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v256, v255));
      v268.f32[2] = (float)v257;
      v269 = vmulq_n_f32(vaddq_f32(v268, v267), *(float *)&v266);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v263 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v534.val[0], v269.f32[0]), v534.val[1], *(float32x2_t *)v269.f32, 1), v534.val[2], v269, 2);
    }
    else if (!(v261 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v259 + 16), *(_QWORD *)(*(_QWORD *)(v259 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v259 + 8) + 2448) + 520 * v261, *(_QWORD *)(*(_QWORD *)(v259 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v270 = *a1;
  a4.i64[0] = 0x400000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x400000001);
  v498 = *(int32x2_t *)a3.f32;
  v271 = a2[1].i32[0];
  v499 = v271;
  v272 = *(_DWORD *)(v270[1] + 132);
  if (v272 != *(_DWORD *)(*v270 + 272))
  {
    v273 = *(_QWORD *)(v270[2] + 8);
    if ((v272 & 0x10000000) != 0)
      v274 = 0x40000000;
    else
      v274 = 0x80000000;
    if ((v272 & 0x20000000) != 0)
      v275 = v274;
    else
      v275 = v272 & 0xCFFFFFFF;
    if ((v275 & 0x40000000) != 0)
    {
      v276 = *(_QWORD **)v273;
      v277 = *v276;
      v278 = *(_DWORD *)(*v276 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v278);
      a4.f32[1] = (float)(a3.i32[1] / v278);
      a4.f32[2] = (float)(v271 / v278);
      v279 = (const float *)(*v276 + 1656);
      v518 = vld3_f32(v279);
      v280 = *(_QWORD *)(v276[1] + 144);
      v281.i64[0] = 0x3F0000003F000000;
      v281.i64[1] = 0x3F0000003F000000;
      v282 = vaddq_f32(a4, v281);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v518.val[0], v282.f32[0]), v518.val[1], *(float32x2_t *)v282.f32, 1), v518.val[2], v282, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v271;
      v283 = vmulq_n_f32(vaddq_f32(a3, v281), *(float *)&v280);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v277 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v518.val[0], v283.f32[0]), v518.val[1], *(float32x2_t *)v283.f32, 1), v518.val[2], v283, 2);
    }
    else if (!(v275 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v273 + 16), *(_QWORD *)(*(_QWORD *)(v273 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v273 + 8) + 2448) + 520 * v275, *(_QWORD *)(*(_QWORD *)(v273 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v284 = *a1;
  a4.i64[0] = 0x400000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x400000002);
  v498 = *(int32x2_t *)a3.f32;
  v285 = a2[1].i32[0];
  v499 = v285;
  v286 = *(_DWORD *)(v284[1] + 136);
  if (v286 != *(_DWORD *)(*v284 + 272))
  {
    v287 = *(_QWORD *)(v284[2] + 8);
    if ((v286 & 0x10000000) != 0)
      v288 = 0x40000000;
    else
      v288 = 0x80000000;
    if ((v286 & 0x20000000) != 0)
      v289 = v288;
    else
      v289 = v286 & 0xCFFFFFFF;
    if ((v289 & 0x40000000) != 0)
    {
      v290 = *(_QWORD **)v287;
      v291 = *v290;
      v292 = *(_DWORD *)(*v290 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v292);
      a4.f32[1] = (float)(a3.i32[1] / v292);
      a4.f32[2] = (float)(v285 / v292);
      v293 = (const float *)(*v290 + 1656);
      v519 = vld3_f32(v293);
      v294 = *(_QWORD *)(v290[1] + 144);
      v295.i64[0] = 0x3F0000003F000000;
      v295.i64[1] = 0x3F0000003F000000;
      v296 = vaddq_f32(a4, v295);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v519.val[0], v296.f32[0]), v519.val[1], *(float32x2_t *)v296.f32, 1), v519.val[2], v296, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v285;
      v297 = vmulq_n_f32(vaddq_f32(a3, v295), *(float *)&v294);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v291 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v519.val[0], v297.f32[0]), v519.val[1], *(float32x2_t *)v297.f32, 1), v519.val[2], v297, 2);
    }
    else if (!(v289 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v287 + 16), *(_QWORD *)(*(_QWORD *)(v287 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v287 + 8) + 2448) + 520 * v289, *(_QWORD *)(*(_QWORD *)(v287 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v298 = *a1;
  a4.i64[0] = 0x400000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x400000003);
  v498 = *(int32x2_t *)a3.f32;
  v299 = a2[1].i32[0];
  v499 = v299;
  v300 = *(_DWORD *)(v298[1] + 140);
  if (v300 != *(_DWORD *)(*v298 + 272))
  {
    v301 = *(_QWORD *)(v298[2] + 8);
    if ((v300 & 0x10000000) != 0)
      v302 = 0x40000000;
    else
      v302 = 0x80000000;
    if ((v300 & 0x20000000) != 0)
      v303 = v302;
    else
      v303 = v300 & 0xCFFFFFFF;
    if ((v303 & 0x40000000) != 0)
    {
      v304 = *(_QWORD **)v301;
      v305 = *v304;
      v306 = *(_DWORD *)(*v304 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v306);
      a4.f32[1] = (float)(a3.i32[1] / v306);
      a4.f32[2] = (float)(v299 / v306);
      v307 = (const float *)(*v304 + 1656);
      v520 = vld3_f32(v307);
      v308 = *(_QWORD *)(v304[1] + 144);
      v309.i64[0] = 0x3F0000003F000000;
      v309.i64[1] = 0x3F0000003F000000;
      v310 = vaddq_f32(a4, v309);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v520.val[0], v310.f32[0]), v520.val[1], *(float32x2_t *)v310.f32, 1), v520.val[2], v310, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v299;
      v311 = vmulq_n_f32(vaddq_f32(a3, v309), *(float *)&v308);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v305 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v520.val[0], v311.f32[0]), v520.val[1], *(float32x2_t *)v311.f32, 1), v520.val[2], v311, 2);
    }
    else if (!(v303 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v301 + 16), *(_QWORD *)(*(_QWORD *)(v301 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v301 + 8) + 2448) + 520 * v303, *(_QWORD *)(*(_QWORD *)(v301 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v312 = *a1;
  a4.i64[0] = 0x400000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x400000004);
  v498 = *(int32x2_t *)a3.f32;
  v313 = a2[1].i32[0];
  v499 = v313;
  v314 = *(_DWORD *)(v312[1] + 144);
  if (v314 != *(_DWORD *)(*v312 + 272))
  {
    v315 = *(_QWORD *)(v312[2] + 8);
    if ((v314 & 0x10000000) != 0)
      v316 = 0x40000000;
    else
      v316 = 0x80000000;
    if ((v314 & 0x20000000) != 0)
      v317 = v316;
    else
      v317 = v314 & 0xCFFFFFFF;
    if ((v317 & 0x40000000) != 0)
    {
      v318 = *(_QWORD **)v315;
      v319 = *v318;
      v320 = *(_DWORD *)(*v318 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v320);
      a4.f32[1] = (float)(a3.i32[1] / v320);
      a4.f32[2] = (float)(v313 / v320);
      v321 = (const float *)(*v318 + 1656);
      v521 = vld3_f32(v321);
      v322 = *(_QWORD *)(v318[1] + 144);
      v323.i64[0] = 0x3F0000003F000000;
      v323.i64[1] = 0x3F0000003F000000;
      v324 = vaddq_f32(a4, v323);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v521.val[0], v324.f32[0]), v521.val[1], *(float32x2_t *)v324.f32, 1), v521.val[2], v324, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v313;
      v325 = vmulq_n_f32(vaddq_f32(a3, v323), *(float *)&v322);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v319 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v521.val[0], v325.f32[0]), v521.val[1], *(float32x2_t *)v325.f32, 1), v521.val[2], v325, 2);
    }
    else if (!(v317 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v315 + 16), *(_QWORD *)(*(_QWORD *)(v315 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v315 + 8) + 2448) + 520 * v317, *(_QWORD *)(*(_QWORD *)(v315 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v326 = *a1;
  a4.i64[0] = 0x400000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x400000005);
  v498 = *(int32x2_t *)a3.f32;
  v327 = a2[1].i32[0];
  v499 = v327;
  v328 = *(_DWORD *)(v326[1] + 148);
  if (v328 != *(_DWORD *)(*v326 + 272))
  {
    v329 = *(_QWORD *)(v326[2] + 8);
    if ((v328 & 0x10000000) != 0)
      v330 = 0x40000000;
    else
      v330 = 0x80000000;
    if ((v328 & 0x20000000) != 0)
      v331 = v330;
    else
      v331 = v328 & 0xCFFFFFFF;
    if ((v331 & 0x40000000) != 0)
    {
      v332 = *(_QWORD **)v329;
      v333 = *v332;
      v334 = *(_DWORD *)(*v332 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v334);
      a4.f32[1] = (float)(a3.i32[1] / v334);
      a4.f32[2] = (float)(v327 / v334);
      v335 = (const float *)(*v332 + 1656);
      v522 = vld3_f32(v335);
      v336 = *(_QWORD *)(v332[1] + 144);
      v337.i64[0] = 0x3F0000003F000000;
      v337.i64[1] = 0x3F0000003F000000;
      v338 = vaddq_f32(a4, v337);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v522.val[0], v338.f32[0]), v522.val[1], *(float32x2_t *)v338.f32, 1), v522.val[2], v338, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v327;
      v339 = vmulq_n_f32(vaddq_f32(a3, v337), *(float *)&v336);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v333 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v522.val[0], v339.f32[0]), v522.val[1], *(float32x2_t *)v339.f32, 1), v522.val[2], v339, 2);
    }
    else if (!(v331 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v329 + 16), *(_QWORD *)(*(_QWORD *)(v329 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v329 + 8) + 2448) + 520 * v331, *(_QWORD *)(*(_QWORD *)(v329 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v340 = *a1;
  a4.i64[0] = 0x400000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x400000006);
  v498 = *(int32x2_t *)a3.f32;
  v341 = a2[1].i32[0];
  v499 = v341;
  v342 = *(_DWORD *)(v340[1] + 152);
  if (v342 != *(_DWORD *)(*v340 + 272))
  {
    v343 = *(_QWORD *)(v340[2] + 8);
    if ((v342 & 0x10000000) != 0)
      v344 = 0x40000000;
    else
      v344 = 0x80000000;
    if ((v342 & 0x20000000) != 0)
      v345 = v344;
    else
      v345 = v342 & 0xCFFFFFFF;
    if ((v345 & 0x40000000) != 0)
    {
      v346 = *(_QWORD **)v343;
      v347 = *v346;
      v348 = *(_DWORD *)(*v346 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v348);
      a4.f32[1] = (float)(a3.i32[1] / v348);
      a4.f32[2] = (float)(v341 / v348);
      v349 = (const float *)(*v346 + 1656);
      v523 = vld3_f32(v349);
      v350 = *(_QWORD *)(v346[1] + 144);
      v351.i64[0] = 0x3F0000003F000000;
      v351.i64[1] = 0x3F0000003F000000;
      v352 = vaddq_f32(a4, v351);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v523.val[0], v352.f32[0]), v523.val[1], *(float32x2_t *)v352.f32, 1), v523.val[2], v352, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v341;
      v353 = vmulq_n_f32(vaddq_f32(a3, v351), *(float *)&v350);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v347 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v523.val[0], v353.f32[0]), v523.val[1], *(float32x2_t *)v353.f32, 1), v523.val[2], v353, 2);
    }
    else if (!(v345 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v343 + 16), *(_QWORD *)(*(_QWORD *)(v343 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v343 + 8) + 2448) + 520 * v345, *(_QWORD *)(*(_QWORD *)(v343 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v354 = *a1;
  a4.i64[0] = 0x400000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x400000007);
  v498 = *(int32x2_t *)a3.f32;
  v355 = a2[1].i32[0];
  v499 = v355;
  v356 = *(_DWORD *)(v354[1] + 156);
  if (v356 != *(_DWORD *)(*v354 + 272))
  {
    v357 = *(_QWORD *)(v354[2] + 8);
    if ((v356 & 0x10000000) != 0)
      v358 = 0x40000000;
    else
      v358 = 0x80000000;
    if ((v356 & 0x20000000) != 0)
      v359 = v358;
    else
      v359 = v356 & 0xCFFFFFFF;
    if ((v359 & 0x40000000) != 0)
    {
      v360 = *(_QWORD **)v357;
      v361 = *v360;
      v362 = *(_DWORD *)(*v360 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v362);
      a4.f32[1] = (float)(a3.i32[1] / v362);
      a4.f32[2] = (float)(v355 / v362);
      v363 = (const float *)(*v360 + 1656);
      v524 = vld3_f32(v363);
      v364 = *(_QWORD *)(v360[1] + 144);
      v365.i64[0] = 0x3F0000003F000000;
      v365.i64[1] = 0x3F0000003F000000;
      v366 = vaddq_f32(a4, v365);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v524.val[0], v366.f32[0]), v524.val[1], *(float32x2_t *)v366.f32, 1), v524.val[2], v366, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v355;
      v367 = vmulq_n_f32(vaddq_f32(a3, v365), *(float *)&v364);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v361 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v524.val[0], v367.f32[0]), v524.val[1], *(float32x2_t *)v367.f32, 1), v524.val[2], v367, 2);
    }
    else if (!(v359 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v357 + 16), *(_QWORD *)(*(_QWORD *)(v357 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v357 + 8) + 2448) + 520 * v359, *(_QWORD *)(*(_QWORD *)(v357 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v368 = *a1;
  v369 = a2->i32[0];
  v370 = a2->i32[1] + 5;
  v498.i32[0] = a2->i32[0];
  v498.i32[1] = v370;
  v371 = a2[1].i32[0];
  v499 = v371;
  v372 = *(_DWORD *)(v368[1] + 160);
  if (v372 != *(_DWORD *)(*v368 + 272))
  {
    v373 = *(_QWORD *)(v368[2] + 8);
    if ((v372 & 0x10000000) != 0)
      v374 = 0x40000000;
    else
      v374 = 0x80000000;
    if ((v372 & 0x20000000) != 0)
      v375 = v374;
    else
      v375 = v372 & 0xCFFFFFFF;
    if ((v375 & 0x40000000) != 0)
    {
      v376 = *(_QWORD **)v373;
      v377 = *v376;
      v378 = (const float *)(*v376 + 1656);
      v379 = *(_DWORD *)(*v376 + 8);
      a3.f32[0] = (float)(v369 / v379);
      v380 = *(_QWORD *)(v376[1] + 144);
      a3.f32[1] = (float)(v370 / v379);
      a3.f32[2] = (float)(v371 / v379);
      v381.i64[0] = 0x3F0000003F000000;
      v381.i64[1] = 0x3F0000003F000000;
      v382 = vaddq_f32(a3, v381);
      v535 = vld3_f32(v378);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v535.val[0], v382.f32[0]), v535.val[1], *(float32x2_t *)v382.f32, 1), v535.val[2], v382, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)v382.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v370, v369));
      v382.f32[2] = (float)v371;
      v383 = vmulq_n_f32(vaddq_f32(v382, v381), *(float *)&v380);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v377 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v535.val[0], v383.f32[0]), v535.val[1], *(float32x2_t *)v383.f32, 1), v535.val[2], v383, 2);
    }
    else if (!(v375 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v373 + 16), *(_QWORD *)(*(_QWORD *)(v373 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v373 + 8) + 2448) + 520 * v375, *(_QWORD *)(*(_QWORD *)(v373 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v384 = *a1;
  a4.i64[0] = 0x500000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x500000001);
  v498 = *(int32x2_t *)a3.f32;
  v385 = a2[1].i32[0];
  v499 = v385;
  v386 = *(_DWORD *)(v384[1] + 164);
  if (v386 != *(_DWORD *)(*v384 + 272))
  {
    v387 = *(_QWORD *)(v384[2] + 8);
    if ((v386 & 0x10000000) != 0)
      v388 = 0x40000000;
    else
      v388 = 0x80000000;
    if ((v386 & 0x20000000) != 0)
      v389 = v388;
    else
      v389 = v386 & 0xCFFFFFFF;
    if ((v389 & 0x40000000) != 0)
    {
      v390 = *(_QWORD **)v387;
      v391 = *v390;
      v392 = *(_DWORD *)(*v390 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v392);
      a4.f32[1] = (float)(a3.i32[1] / v392);
      a4.f32[2] = (float)(v385 / v392);
      v393 = (const float *)(*v390 + 1656);
      v525 = vld3_f32(v393);
      v394 = *(_QWORD *)(v390[1] + 144);
      v395.i64[0] = 0x3F0000003F000000;
      v395.i64[1] = 0x3F0000003F000000;
      v396 = vaddq_f32(a4, v395);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v525.val[0], v396.f32[0]), v525.val[1], *(float32x2_t *)v396.f32, 1), v525.val[2], v396, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v385;
      v397 = vmulq_n_f32(vaddq_f32(a3, v395), *(float *)&v394);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v391 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v525.val[0], v397.f32[0]), v525.val[1], *(float32x2_t *)v397.f32, 1), v525.val[2], v397, 2);
    }
    else if (!(v389 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v387 + 16), *(_QWORD *)(*(_QWORD *)(v387 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v387 + 8) + 2448) + 520 * v389, *(_QWORD *)(*(_QWORD *)(v387 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v398 = *a1;
  a4.i64[0] = 0x500000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x500000002);
  v498 = *(int32x2_t *)a3.f32;
  v399 = a2[1].i32[0];
  v499 = v399;
  v400 = *(_DWORD *)(v398[1] + 168);
  if (v400 != *(_DWORD *)(*v398 + 272))
  {
    v401 = *(_QWORD *)(v398[2] + 8);
    if ((v400 & 0x10000000) != 0)
      v402 = 0x40000000;
    else
      v402 = 0x80000000;
    if ((v400 & 0x20000000) != 0)
      v403 = v402;
    else
      v403 = v400 & 0xCFFFFFFF;
    if ((v403 & 0x40000000) != 0)
    {
      v404 = *(_QWORD **)v401;
      v405 = *v404;
      v406 = *(_DWORD *)(*v404 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v406);
      a4.f32[1] = (float)(a3.i32[1] / v406);
      a4.f32[2] = (float)(v399 / v406);
      v407 = (const float *)(*v404 + 1656);
      v526 = vld3_f32(v407);
      v408 = *(_QWORD *)(v404[1] + 144);
      v409.i64[0] = 0x3F0000003F000000;
      v409.i64[1] = 0x3F0000003F000000;
      v410 = vaddq_f32(a4, v409);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v526.val[0], v410.f32[0]), v526.val[1], *(float32x2_t *)v410.f32, 1), v526.val[2], v410, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v399;
      v411 = vmulq_n_f32(vaddq_f32(a3, v409), *(float *)&v408);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v405 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v526.val[0], v411.f32[0]), v526.val[1], *(float32x2_t *)v411.f32, 1), v526.val[2], v411, 2);
    }
    else if (!(v403 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v401 + 16), *(_QWORD *)(*(_QWORD *)(v401 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v401 + 8) + 2448) + 520 * v403, *(_QWORD *)(*(_QWORD *)(v401 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v412 = *a1;
  a4.i64[0] = 0x500000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x500000003);
  v498 = *(int32x2_t *)a3.f32;
  v413 = a2[1].i32[0];
  v499 = v413;
  v414 = *(_DWORD *)(v412[1] + 172);
  if (v414 != *(_DWORD *)(*v412 + 272))
  {
    v415 = *(_QWORD *)(v412[2] + 8);
    if ((v414 & 0x10000000) != 0)
      v416 = 0x40000000;
    else
      v416 = 0x80000000;
    if ((v414 & 0x20000000) != 0)
      v417 = v416;
    else
      v417 = v414 & 0xCFFFFFFF;
    if ((v417 & 0x40000000) != 0)
    {
      v418 = *(_QWORD **)v415;
      v419 = *v418;
      v420 = *(_DWORD *)(*v418 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v420);
      a4.f32[1] = (float)(a3.i32[1] / v420);
      a4.f32[2] = (float)(v413 / v420);
      v421 = (const float *)(*v418 + 1656);
      v527 = vld3_f32(v421);
      v422 = *(_QWORD *)(v418[1] + 144);
      v423.i64[0] = 0x3F0000003F000000;
      v423.i64[1] = 0x3F0000003F000000;
      v424 = vaddq_f32(a4, v423);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v527.val[0], v424.f32[0]), v527.val[1], *(float32x2_t *)v424.f32, 1), v527.val[2], v424, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v413;
      v425 = vmulq_n_f32(vaddq_f32(a3, v423), *(float *)&v422);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v419 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v527.val[0], v425.f32[0]), v527.val[1], *(float32x2_t *)v425.f32, 1), v527.val[2], v425, 2);
    }
    else if (!(v417 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v415 + 16), *(_QWORD *)(*(_QWORD *)(v415 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v415 + 8) + 2448) + 520 * v417, *(_QWORD *)(*(_QWORD *)(v415 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v426 = *a1;
  a4.i64[0] = 0x500000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x500000004);
  v498 = *(int32x2_t *)a3.f32;
  v427 = a2[1].i32[0];
  v499 = v427;
  v428 = *(_DWORD *)(v426[1] + 176);
  if (v428 != *(_DWORD *)(*v426 + 272))
  {
    v429 = *(_QWORD *)(v426[2] + 8);
    if ((v428 & 0x10000000) != 0)
      v430 = 0x40000000;
    else
      v430 = 0x80000000;
    if ((v428 & 0x20000000) != 0)
      v431 = v430;
    else
      v431 = v428 & 0xCFFFFFFF;
    if ((v431 & 0x40000000) != 0)
    {
      v432 = *(_QWORD **)v429;
      v433 = *v432;
      v434 = *(_DWORD *)(*v432 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v434);
      a4.f32[1] = (float)(a3.i32[1] / v434);
      a4.f32[2] = (float)(v427 / v434);
      v435 = (const float *)(*v432 + 1656);
      v528 = vld3_f32(v435);
      v436 = *(_QWORD *)(v432[1] + 144);
      v437.i64[0] = 0x3F0000003F000000;
      v437.i64[1] = 0x3F0000003F000000;
      v438 = vaddq_f32(a4, v437);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v528.val[0], v438.f32[0]), v528.val[1], *(float32x2_t *)v438.f32, 1), v528.val[2], v438, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v427;
      v439 = vmulq_n_f32(vaddq_f32(a3, v437), *(float *)&v436);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v433 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v528.val[0], v439.f32[0]), v528.val[1], *(float32x2_t *)v439.f32, 1), v528.val[2], v439, 2);
    }
    else if (!(v431 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v429 + 16), *(_QWORD *)(*(_QWORD *)(v429 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v429 + 8) + 2448) + 520 * v431, *(_QWORD *)(*(_QWORD *)(v429 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v440 = *a1;
  a4.i64[0] = 0x500000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x500000005);
  v498 = *(int32x2_t *)a3.f32;
  v441 = a2[1].i32[0];
  v499 = v441;
  v442 = *(_DWORD *)(v440[1] + 180);
  if (v442 != *(_DWORD *)(*v440 + 272))
  {
    v443 = *(_QWORD *)(v440[2] + 8);
    if ((v442 & 0x10000000) != 0)
      v444 = 0x40000000;
    else
      v444 = 0x80000000;
    if ((v442 & 0x20000000) != 0)
      v445 = v444;
    else
      v445 = v442 & 0xCFFFFFFF;
    if ((v445 & 0x40000000) != 0)
    {
      v446 = *(_QWORD **)v443;
      v447 = *v446;
      v448 = *(_DWORD *)(*v446 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v448);
      a4.f32[1] = (float)(a3.i32[1] / v448);
      a4.f32[2] = (float)(v441 / v448);
      v449 = (const float *)(*v446 + 1656);
      v529 = vld3_f32(v449);
      v450 = *(_QWORD *)(v446[1] + 144);
      v451.i64[0] = 0x3F0000003F000000;
      v451.i64[1] = 0x3F0000003F000000;
      v452 = vaddq_f32(a4, v451);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v529.val[0], v452.f32[0]), v529.val[1], *(float32x2_t *)v452.f32, 1), v529.val[2], v452, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v441;
      v453 = vmulq_n_f32(vaddq_f32(a3, v451), *(float *)&v450);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v447 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v529.val[0], v453.f32[0]), v529.val[1], *(float32x2_t *)v453.f32, 1), v529.val[2], v453, 2);
    }
    else if (!(v445 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v443 + 16), *(_QWORD *)(*(_QWORD *)(v443 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v443 + 8) + 2448) + 520 * v445, *(_QWORD *)(*(_QWORD *)(v443 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v454 = *a1;
  a4.i64[0] = 0x500000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x500000006);
  v498 = *(int32x2_t *)a3.f32;
  v455 = a2[1].i32[0];
  v499 = v455;
  v456 = *(_DWORD *)(v454[1] + 184);
  if (v456 != *(_DWORD *)(*v454 + 272))
  {
    v457 = *(_QWORD *)(v454[2] + 8);
    if ((v456 & 0x10000000) != 0)
      v458 = 0x40000000;
    else
      v458 = 0x80000000;
    if ((v456 & 0x20000000) != 0)
      v459 = v458;
    else
      v459 = v456 & 0xCFFFFFFF;
    if ((v459 & 0x40000000) != 0)
    {
      v460 = *(_QWORD **)v457;
      v461 = *v460;
      v462 = *(_DWORD *)(*v460 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v462);
      a4.f32[1] = (float)(a3.i32[1] / v462);
      a4.f32[2] = (float)(v455 / v462);
      v463 = (const float *)(*v460 + 1656);
      v530 = vld3_f32(v463);
      v464 = *(_QWORD *)(v460[1] + 144);
      v465.i64[0] = 0x3F0000003F000000;
      v465.i64[1] = 0x3F0000003F000000;
      v466 = vaddq_f32(a4, v465);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v530.val[0], v466.f32[0]), v530.val[1], *(float32x2_t *)v466.f32, 1), v530.val[2], v466, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v455;
      v467 = vmulq_n_f32(vaddq_f32(a3, v465), *(float *)&v464);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v461 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v530.val[0], v467.f32[0]), v530.val[1], *(float32x2_t *)v467.f32, 1), v530.val[2], v467, 2);
    }
    else if (!(v459 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v457 + 16), *(_QWORD *)(*(_QWORD *)(v457 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v457 + 8) + 2448) + 520 * v459, *(_QWORD *)(*(_QWORD *)(v457 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v468 = *a1;
  a4.i64[0] = 0x500000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*a2, (int32x2_t)0x500000007);
  v498 = *(int32x2_t *)a3.f32;
  v469 = a2[1].i32[0];
  v499 = v469;
  v470 = *(_DWORD *)(v468[1] + 188);
  if (v470 != *(_DWORD *)(*v468 + 272))
  {
    v471 = *(_QWORD *)(v468[2] + 8);
    if ((v470 & 0x10000000) != 0)
      v472 = 0x40000000;
    else
      v472 = 0x80000000;
    if ((v470 & 0x20000000) != 0)
      v473 = v472;
    else
      v473 = v470 & 0xCFFFFFFF;
    if ((v473 & 0x40000000) != 0)
    {
      v474 = *(_QWORD **)v471;
      v475 = *v474;
      v476 = *(_DWORD *)(*v474 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v476);
      a4.f32[1] = (float)(a3.i32[1] / v476);
      a4.f32[2] = (float)(v469 / v476);
      v477 = (const float *)(*v474 + 1656);
      v531 = vld3_f32(v477);
      v478 = *(_QWORD *)(v474[1] + 144);
      v479.i64[0] = 0x3F0000003F000000;
      v479.i64[1] = 0x3F0000003F000000;
      v480 = vaddq_f32(a4, v479);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v531.val[0], v480.f32[0]), v531.val[1], *(float32x2_t *)v480.f32, 1), v531.val[2], v480, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v469;
      v481 = vmulq_n_f32(vaddq_f32(a3, v479), *(float *)&v478);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v475 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v531.val[0], v481.f32[0]), v531.val[1], *(float32x2_t *)v481.f32, 1), v531.val[2], v481, 2);
    }
    else if (!(v473 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v471 + 16), *(_QWORD *)(*(_QWORD *)(v471 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v471 + 8) + 2448) + 520 * v473, *(_QWORD *)(*(_QWORD *)(v471 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v482 = *a1;
  v483 = a2->i32[0];
  v484 = a2->i32[1] + 6;
  v498.i32[0] = a2->i32[0];
  v498.i32[1] = v484;
  v485 = a2[1].i32[0];
  v499 = v485;
  v486 = *(_DWORD *)(v482[1] + 192);
  if (v486 != *(_DWORD *)(*v482 + 272))
  {
    v487 = *(_QWORD *)(v482[2] + 8);
    if ((v486 & 0x10000000) != 0)
      v488 = 0x40000000;
    else
      v488 = 0x80000000;
    if ((v486 & 0x20000000) != 0)
      v489 = v488;
    else
      v489 = v486 & 0xCFFFFFFF;
    if ((v489 & 0x40000000) != 0)
    {
      v490 = *(_QWORD **)v487;
      v491 = *v490;
      v492 = (const float *)(*v490 + 1656);
      v493 = *(_DWORD *)(*v490 + 8);
      a3.f32[0] = (float)(v483 / v493);
      v494 = *(_QWORD *)(v490[1] + 144);
      a3.f32[1] = (float)(v484 / v493);
      a3.f32[2] = (float)(v485 / v493);
      v495.i64[0] = 0x3F0000003F000000;
      v495.i64[1] = 0x3F0000003F000000;
      v496 = vaddq_f32(a3, v495);
      v536 = vld3_f32(v492);
      v500 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v536.val[0], v496.f32[0]), v536.val[1], *(float32x2_t *)v496.f32, 1), v536.val[2], v496, 2), (float32x2_t)0xBF000000BF000000));
      v501 = 0;
      *(float32x2_t *)v496.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v484, v483));
      v496.f32[2] = (float)v485;
      v497 = vmulq_n_f32(vaddq_f32(v496, v495), *(float *)&v494);
      v502 = &v500;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v491 + 64), (int *)&v500, (uint64_t)&unk_2245BA939, (uint64_t **)&v502)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v536.val[0], v497.f32[0]), v536.val[1], *(float32x2_t *)v497.f32, 1), v536.val[2], v497, 2);
    }
    else if (!(v489 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v487 + 16), *(_QWORD *)(*(_QWORD *)(v487 + 16) + 8), &v498, *(_QWORD *)(*(_QWORD *)(v487 + 8) + 2448) + 520 * v489, *(_QWORD *)(*(_QWORD *)(v487 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  sub_2239BD72C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_2239BD72C(_QWORD **a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  const float *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  const float *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  const float *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  _QWORD *v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  const float *v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  _QWORD *v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  const float *v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  _QWORD *v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  const float *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _QWORD *v96;
  int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  const float *v105;
  uint64_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD *v110;
  signed int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  _QWORD *v118;
  uint64_t v119;
  const float *v120;
  int v121;
  uint64_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  _QWORD *v126;
  int v127;
  int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  _QWORD *v132;
  uint64_t v133;
  int v134;
  const float *v135;
  uint64_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  _QWORD *v140;
  int v141;
  int v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  _QWORD *v146;
  uint64_t v147;
  int v148;
  const float *v149;
  uint64_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  _QWORD *v154;
  int v155;
  int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _QWORD *v160;
  uint64_t v161;
  int v162;
  const float *v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  _QWORD *v168;
  int v169;
  int v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  _QWORD *v174;
  uint64_t v175;
  int v176;
  const float *v177;
  uint64_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  _QWORD *v182;
  int v183;
  int v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  _QWORD *v188;
  uint64_t v189;
  int v190;
  const float *v191;
  uint64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  _QWORD *v196;
  int v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  _QWORD *v202;
  uint64_t v203;
  int v204;
  const float *v205;
  uint64_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  _QWORD *v210;
  int v211;
  int v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  _QWORD *v216;
  uint64_t v217;
  int v218;
  const float *v219;
  uint64_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  _QWORD *v224;
  int v225;
  int v226;
  uint64_t v227;
  unsigned int v228;
  unsigned int v229;
  _QWORD *v230;
  uint64_t v231;
  int v232;
  const float *v233;
  uint64_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  _QWORD *v238;
  signed int v239;
  int v240;
  int v241;
  int v242;
  uint64_t v243;
  unsigned int v244;
  unsigned int v245;
  _QWORD *v246;
  uint64_t v247;
  const float *v248;
  int v249;
  uint64_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  _QWORD *v254;
  signed int v255;
  int v256;
  int v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  _QWORD *v262;
  uint64_t v263;
  const float *v264;
  int v265;
  uint64_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  _QWORD *v270;
  signed int v271;
  int v272;
  int v273;
  int v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  _QWORD *v278;
  uint64_t v279;
  const float *v280;
  int v281;
  uint64_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  _QWORD *v286;
  signed int v287;
  int v288;
  int v289;
  int v290;
  uint64_t v291;
  unsigned int v292;
  unsigned int v293;
  _QWORD *v294;
  uint64_t v295;
  const float *v296;
  int v297;
  uint64_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  _QWORD *v302;
  signed int v303;
  int v304;
  int v305;
  int v306;
  uint64_t v307;
  unsigned int v308;
  unsigned int v309;
  _QWORD *v310;
  uint64_t v311;
  const float *v312;
  int v313;
  uint64_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  _QWORD *v318;
  signed int v319;
  int v320;
  int v321;
  int v322;
  uint64_t v323;
  unsigned int v324;
  unsigned int v325;
  _QWORD *v326;
  uint64_t v327;
  const float *v328;
  int v329;
  uint64_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  _QWORD *v334;
  signed int v335;
  int v336;
  int v337;
  int v338;
  uint64_t v339;
  unsigned int v340;
  unsigned int v341;
  _QWORD *v342;
  uint64_t v343;
  const float *v344;
  int v345;
  uint64_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  _QWORD *v350;
  __int32 v351;
  int v352;
  uint64_t v353;
  unsigned int v354;
  unsigned int v355;
  _QWORD *v356;
  uint64_t v357;
  const float *v358;
  uint64_t v359;
  int v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  _QWORD *v364;
  int v365;
  int v366;
  uint64_t v367;
  unsigned int v368;
  unsigned int v369;
  _QWORD *v370;
  uint64_t v371;
  int v372;
  const float *v373;
  uint64_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  _QWORD *v378;
  int v379;
  int v380;
  uint64_t v381;
  unsigned int v382;
  unsigned int v383;
  _QWORD *v384;
  uint64_t v385;
  int v386;
  const float *v387;
  uint64_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  _QWORD *v392;
  int v393;
  int v394;
  uint64_t v395;
  unsigned int v396;
  unsigned int v397;
  _QWORD *v398;
  uint64_t v399;
  int v400;
  const float *v401;
  uint64_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  _QWORD *v406;
  int v407;
  int v408;
  uint64_t v409;
  unsigned int v410;
  unsigned int v411;
  _QWORD *v412;
  uint64_t v413;
  int v414;
  const float *v415;
  uint64_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  _QWORD *v420;
  int v421;
  int v422;
  uint64_t v423;
  unsigned int v424;
  unsigned int v425;
  _QWORD *v426;
  uint64_t v427;
  int v428;
  const float *v429;
  uint64_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  _QWORD *v434;
  int v435;
  int v436;
  uint64_t v437;
  unsigned int v438;
  unsigned int v439;
  _QWORD *v440;
  uint64_t v441;
  int v442;
  const float *v443;
  uint64_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  _QWORD *v448;
  int v449;
  int v450;
  uint64_t v451;
  unsigned int v452;
  unsigned int v453;
  _QWORD *v454;
  uint64_t v455;
  int v456;
  const float *v457;
  uint64_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  _QWORD *v462;
  __int32 v463;
  int v464;
  uint64_t v465;
  unsigned int v466;
  unsigned int v467;
  _QWORD *v468;
  uint64_t v469;
  const float *v470;
  uint64_t v471;
  int v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  _QWORD *v476;
  int v477;
  int v478;
  uint64_t v479;
  unsigned int v480;
  unsigned int v481;
  _QWORD *v482;
  uint64_t v483;
  int v484;
  const float *v485;
  uint64_t v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  _QWORD *v490;
  int v491;
  int v492;
  uint64_t v493;
  unsigned int v494;
  unsigned int v495;
  _QWORD *v496;
  uint64_t v497;
  int v498;
  const float *v499;
  uint64_t v500;
  float32x4_t v501;
  float32x4_t v502;
  float32x4_t v503;
  _BYTE v504[12];
  int32x2_t v505;
  int v506;
  int32x2_t *v507;
  float32x2x3_t v508;
  float32x2x3_t v509;
  float32x2x3_t v510;
  float32x2x3_t v511;
  float32x2x3_t v512;
  float32x2x3_t v513;
  float32x2x3_t v514;
  float32x2x3_t v515;
  float32x2x3_t v516;
  float32x2x3_t v517;
  float32x2x3_t v518;
  float32x2x3_t v519;
  float32x2x3_t v520;
  float32x2x3_t v521;
  float32x2x3_t v522;
  float32x2x3_t v523;
  float32x2x3_t v524;
  float32x2x3_t v525;
  float32x2x3_t v526;
  float32x2x3_t v527;
  float32x2x3_t v528;
  float32x2x3_t v529;
  float32x2x3_t v530;
  float32x2x3_t v531;
  float32x2x3_t v532;
  float32x2x3_t v533;
  float32x2x3_t v534;
  float32x2x3_t v535;
  float32x2x3_t v536;
  float32x2x3_t v537;
  float32x2x3_t v538;
  float32x2x3_t v539;
  float32x2x3_t v540;
  float32x2x3_t v541;

  v12 = *a1;
  a4.i64[0] = 0x600000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_QWORD *)v504 = a3.i64[0];
  v13 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v13;
  v14 = *(_DWORD *)(v12[1] + 196);
  if (v14 != *(_DWORD *)(*v12 + 272))
  {
    v15 = *(_QWORD *)(v12[2] + 8);
    if ((v14 & 0x10000000) != 0)
      v16 = 0x40000000;
    else
      v16 = 0x80000000;
    if ((v14 & 0x20000000) != 0)
      v17 = v16;
    else
      v17 = v14 & 0xCFFFFFFF;
    if ((v17 & 0x40000000) != 0)
    {
      v18 = *(_QWORD **)v15;
      v19 = *v18;
      v20 = *(_DWORD *)(*v18 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v20);
      a4.f32[1] = (float)(a3.i32[1] / v20);
      a4.f32[2] = (float)(v13 / v20);
      v21 = (const float *)(*v18 + 1656);
      v508 = vld3_f32(v21);
      v22 = *(_QWORD *)(v18[1] + 144);
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      v24 = vaddq_f32(a4, v23);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v24.f32[0]), v508.val[1], *(float32x2_t *)v24.f32, 1), v508.val[2], v24, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v13;
      v25 = vmulq_n_f32(vaddq_f32(a3, v23), *(float *)&v22);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v19 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v25.f32[0]), v508.val[1], *(float32x2_t *)v25.f32, 1), v508.val[2], v25, 2);
    }
    else if (!(v17 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v15 + 16), *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 2448) + 520 * v17, *(_QWORD *)(*(_QWORD *)(v15 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v26 = *a1;
  a4.i64[0] = 0x600000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_QWORD *)v504 = a3.i64[0];
  v27 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v27;
  v28 = *(_DWORD *)(v26[1] + 200);
  if (v28 != *(_DWORD *)(*v26 + 272))
  {
    v29 = *(_QWORD *)(v26[2] + 8);
    if ((v28 & 0x10000000) != 0)
      v30 = 0x40000000;
    else
      v30 = 0x80000000;
    if ((v28 & 0x20000000) != 0)
      v31 = v30;
    else
      v31 = v28 & 0xCFFFFFFF;
    if ((v31 & 0x40000000) != 0)
    {
      v32 = *(_QWORD **)v29;
      v33 = *v32;
      v34 = *(_DWORD *)(*v32 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v34);
      a4.f32[1] = (float)(a3.i32[1] / v34);
      a4.f32[2] = (float)(v27 / v34);
      v35 = (const float *)(*v32 + 1656);
      v509 = vld3_f32(v35);
      v36 = *(_QWORD *)(v32[1] + 144);
      v37.i64[0] = 0x3F0000003F000000;
      v37.i64[1] = 0x3F0000003F000000;
      v38 = vaddq_f32(a4, v37);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v38.f32[0]), v509.val[1], *(float32x2_t *)v38.f32, 1), v509.val[2], v38, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v27;
      v39 = vmulq_n_f32(vaddq_f32(a3, v37), *(float *)&v36);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v33 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v39.f32[0]), v509.val[1], *(float32x2_t *)v39.f32, 1), v509.val[2], v39, 2);
    }
    else if (!(v31 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v29 + 16), *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v29 + 8) + 2448) + 520 * v31, *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v40 = *a1;
  a4.i64[0] = 0x600000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_QWORD *)v504 = a3.i64[0];
  v41 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v41;
  v42 = *(_DWORD *)(v40[1] + 204);
  if (v42 != *(_DWORD *)(*v40 + 272))
  {
    v43 = *(_QWORD *)(v40[2] + 8);
    if ((v42 & 0x10000000) != 0)
      v44 = 0x40000000;
    else
      v44 = 0x80000000;
    if ((v42 & 0x20000000) != 0)
      v45 = v44;
    else
      v45 = v42 & 0xCFFFFFFF;
    if ((v45 & 0x40000000) != 0)
    {
      v46 = *(_QWORD **)v43;
      v47 = *v46;
      v48 = *(_DWORD *)(*v46 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v48);
      a4.f32[1] = (float)(a3.i32[1] / v48);
      a4.f32[2] = (float)(v41 / v48);
      v49 = (const float *)(*v46 + 1656);
      v510 = vld3_f32(v49);
      v50 = *(_QWORD *)(v46[1] + 144);
      v51.i64[0] = 0x3F0000003F000000;
      v51.i64[1] = 0x3F0000003F000000;
      v52 = vaddq_f32(a4, v51);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v52.f32[0]), v510.val[1], *(float32x2_t *)v52.f32, 1), v510.val[2], v52, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v41;
      v53 = vmulq_n_f32(vaddq_f32(a3, v51), *(float *)&v50);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v47 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v53.f32[0]), v510.val[1], *(float32x2_t *)v53.f32, 1), v510.val[2], v53, 2);
    }
    else if (!(v45 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v43 + 16), *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v43 + 8) + 2448) + 520 * v45, *(_QWORD *)(*(_QWORD *)(v43 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v54 = *a1;
  a4.i64[0] = 0x600000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_QWORD *)v504 = a3.i64[0];
  v55 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v55;
  v56 = *(_DWORD *)(v54[1] + 208);
  if (v56 != *(_DWORD *)(*v54 + 272))
  {
    v57 = *(_QWORD *)(v54[2] + 8);
    if ((v56 & 0x10000000) != 0)
      v58 = 0x40000000;
    else
      v58 = 0x80000000;
    if ((v56 & 0x20000000) != 0)
      v59 = v58;
    else
      v59 = v56 & 0xCFFFFFFF;
    if ((v59 & 0x40000000) != 0)
    {
      v60 = *(_QWORD **)v57;
      v61 = *v60;
      v62 = *(_DWORD *)(*v60 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v62);
      a4.f32[1] = (float)(a3.i32[1] / v62);
      a4.f32[2] = (float)(v55 / v62);
      v63 = (const float *)(*v60 + 1656);
      v511 = vld3_f32(v63);
      v64 = *(_QWORD *)(v60[1] + 144);
      v65.i64[0] = 0x3F0000003F000000;
      v65.i64[1] = 0x3F0000003F000000;
      v66 = vaddq_f32(a4, v65);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v511.val[0], v66.f32[0]), v511.val[1], *(float32x2_t *)v66.f32, 1), v511.val[2], v66, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v55;
      v67 = vmulq_n_f32(vaddq_f32(a3, v65), *(float *)&v64);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v61 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v511.val[0], v67.f32[0]), v511.val[1], *(float32x2_t *)v67.f32, 1), v511.val[2], v67, 2);
    }
    else if (!(v59 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v57 + 16), *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v57 + 8) + 2448) + 520 * v59, *(_QWORD *)(*(_QWORD *)(v57 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v68 = *a1;
  a4.i64[0] = 0x600000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_QWORD *)v504 = a3.i64[0];
  v69 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v69;
  v70 = *(_DWORD *)(v68[1] + 212);
  if (v70 != *(_DWORD *)(*v68 + 272))
  {
    v71 = *(_QWORD *)(v68[2] + 8);
    if ((v70 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v73 = v72;
    else
      v73 = v70 & 0xCFFFFFFF;
    if ((v73 & 0x40000000) != 0)
    {
      v74 = *(_QWORD **)v71;
      v75 = *v74;
      v76 = *(_DWORD *)(*v74 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v76);
      a4.f32[1] = (float)(a3.i32[1] / v76);
      a4.f32[2] = (float)(v69 / v76);
      v77 = (const float *)(*v74 + 1656);
      v512 = vld3_f32(v77);
      v78 = *(_QWORD *)(v74[1] + 144);
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      v80 = vaddq_f32(a4, v79);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v512.val[0], v80.f32[0]), v512.val[1], *(float32x2_t *)v80.f32, 1), v512.val[2], v80, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v69;
      v81 = vmulq_n_f32(vaddq_f32(a3, v79), *(float *)&v78);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v75 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v512.val[0], v81.f32[0]), v512.val[1], *(float32x2_t *)v81.f32, 1), v512.val[2], v81, 2);
    }
    else if (!(v73 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v71 + 16), *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v71 + 8) + 2448) + 520 * v73, *(_QWORD *)(*(_QWORD *)(v71 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v82 = *a1;
  a4.i64[0] = 0x600000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_QWORD *)v504 = a3.i64[0];
  v83 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v83;
  v84 = *(_DWORD *)(v82[1] + 216);
  if (v84 != *(_DWORD *)(*v82 + 272))
  {
    v85 = *(_QWORD *)(v82[2] + 8);
    if ((v84 & 0x10000000) != 0)
      v86 = 0x40000000;
    else
      v86 = 0x80000000;
    if ((v84 & 0x20000000) != 0)
      v87 = v86;
    else
      v87 = v84 & 0xCFFFFFFF;
    if ((v87 & 0x40000000) != 0)
    {
      v88 = *(_QWORD **)v85;
      v89 = *v88;
      v90 = *(_DWORD *)(*v88 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v90);
      a4.f32[1] = (float)(a3.i32[1] / v90);
      a4.f32[2] = (float)(v83 / v90);
      v91 = (const float *)(*v88 + 1656);
      v513 = vld3_f32(v91);
      v92 = *(_QWORD *)(v88[1] + 144);
      v93.i64[0] = 0x3F0000003F000000;
      v93.i64[1] = 0x3F0000003F000000;
      v94 = vaddq_f32(a4, v93);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v513.val[0], v94.f32[0]), v513.val[1], *(float32x2_t *)v94.f32, 1), v513.val[2], v94, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v83;
      v95 = vmulq_n_f32(vaddq_f32(a3, v93), *(float *)&v92);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v89 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v513.val[0], v95.f32[0]), v513.val[1], *(float32x2_t *)v95.f32, 1), v513.val[2], v95, 2);
    }
    else if (!(v87 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v85 + 16), *(_QWORD *)(*(_QWORD *)(v85 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v85 + 8) + 2448) + 520 * v87, *(_QWORD *)(*(_QWORD *)(v85 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v96 = *a1;
  a4.i64[0] = 0x600000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_QWORD *)v504 = a3.i64[0];
  v97 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v97;
  v98 = *(_DWORD *)(v96[1] + 220);
  if (v98 != *(_DWORD *)(*v96 + 272))
  {
    v99 = *(_QWORD *)(v96[2] + 8);
    if ((v98 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v98 & 0x20000000) != 0)
      v101 = v100;
    else
      v101 = v98 & 0xCFFFFFFF;
    if ((v101 & 0x40000000) != 0)
    {
      v102 = *(_QWORD **)v99;
      v103 = *v102;
      v104 = *(_DWORD *)(*v102 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v104);
      a4.f32[1] = (float)(a3.i32[1] / v104);
      a4.f32[2] = (float)(v97 / v104);
      v105 = (const float *)(*v102 + 1656);
      v514 = vld3_f32(v105);
      v106 = *(_QWORD *)(v102[1] + 144);
      v107.i64[0] = 0x3F0000003F000000;
      v107.i64[1] = 0x3F0000003F000000;
      v108 = vaddq_f32(a4, v107);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v514.val[0], v108.f32[0]), v514.val[1], *(float32x2_t *)v108.f32, 1), v514.val[2], v108, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v97;
      v109 = vmulq_n_f32(vaddq_f32(a3, v107), *(float *)&v106);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v103 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v514.val[0], v109.f32[0]), v514.val[1], *(float32x2_t *)v109.f32, 1), v514.val[2], v109, 2);
    }
    else if (!(v101 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v99 + 16), *(_QWORD *)(*(_QWORD *)(v99 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v99 + 8) + 2448) + 520 * v101, *(_QWORD *)(*(_QWORD *)(v99 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v110 = *a1;
  v111 = *(_DWORD *)a2;
  v112 = *(_DWORD *)(a2 + 4) + 7;
  *(_DWORD *)v504 = *(_DWORD *)a2;
  *(_DWORD *)&v504[4] = v112;
  v113 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v113;
  v114 = *(_DWORD *)(v110[1] + 224);
  if (v114 != *(_DWORD *)(*v110 + 272))
  {
    v115 = *(_QWORD *)(v110[2] + 8);
    if ((v114 & 0x10000000) != 0)
      v116 = 0x40000000;
    else
      v116 = 0x80000000;
    if ((v114 & 0x20000000) != 0)
      v117 = v116;
    else
      v117 = v114 & 0xCFFFFFFF;
    if ((v117 & 0x40000000) != 0)
    {
      v118 = *(_QWORD **)v115;
      v119 = *v118;
      v120 = (const float *)(*v118 + 1656);
      v121 = *(_DWORD *)(*v118 + 8);
      a3.f32[0] = (float)(v111 / v121);
      v122 = *(_QWORD *)(v118[1] + 144);
      a3.f32[1] = (float)(v112 / v121);
      a3.f32[2] = (float)(v113 / v121);
      v123.i64[0] = 0x3F0000003F000000;
      v123.i64[1] = 0x3F0000003F000000;
      v124 = vaddq_f32(a3, v123);
      v532 = vld3_f32(v120);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v532.val[0], v124.f32[0]), v532.val[1], *(float32x2_t *)v124.f32, 1), v532.val[2], v124, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)v124.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v112, v111));
      v124.f32[2] = (float)v113;
      v125 = vmulq_n_f32(vaddq_f32(v124, v123), *(float *)&v122);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v119 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v532.val[0], v125.f32[0]), v532.val[1], *(float32x2_t *)v125.f32, 1), v532.val[2], v125, 2);
    }
    else if (!(v117 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v115 + 16), *(_QWORD *)(*(_QWORD *)(v115 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v115 + 8) + 2448) + 520 * v117, *(_QWORD *)(*(_QWORD *)(v115 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v126 = *a1;
  a4.i64[0] = 0x700000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_QWORD *)v504 = a3.i64[0];
  v127 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v127;
  v128 = *(_DWORD *)(v126[1] + 228);
  if (v128 != *(_DWORD *)(*v126 + 272))
  {
    v129 = *(_QWORD *)(v126[2] + 8);
    if ((v128 & 0x10000000) != 0)
      v130 = 0x40000000;
    else
      v130 = 0x80000000;
    if ((v128 & 0x20000000) != 0)
      v131 = v130;
    else
      v131 = v128 & 0xCFFFFFFF;
    if ((v131 & 0x40000000) != 0)
    {
      v132 = *(_QWORD **)v129;
      v133 = *v132;
      v134 = *(_DWORD *)(*v132 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v134);
      a4.f32[1] = (float)(a3.i32[1] / v134);
      a4.f32[2] = (float)(v127 / v134);
      v135 = (const float *)(*v132 + 1656);
      v515 = vld3_f32(v135);
      v136 = *(_QWORD *)(v132[1] + 144);
      v137.i64[0] = 0x3F0000003F000000;
      v137.i64[1] = 0x3F0000003F000000;
      v138 = vaddq_f32(a4, v137);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v515.val[0], v138.f32[0]), v515.val[1], *(float32x2_t *)v138.f32, 1), v515.val[2], v138, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v127;
      v139 = vmulq_n_f32(vaddq_f32(a3, v137), *(float *)&v136);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v133 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v515.val[0], v139.f32[0]), v515.val[1], *(float32x2_t *)v139.f32, 1), v515.val[2], v139, 2);
    }
    else if (!(v131 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v129 + 16), *(_QWORD *)(*(_QWORD *)(v129 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v129 + 8) + 2448) + 520 * v131, *(_QWORD *)(*(_QWORD *)(v129 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v140 = *a1;
  a4.i64[0] = 0x700000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_QWORD *)v504 = a3.i64[0];
  v141 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v141;
  v142 = *(_DWORD *)(v140[1] + 232);
  if (v142 != *(_DWORD *)(*v140 + 272))
  {
    v143 = *(_QWORD *)(v140[2] + 8);
    if ((v142 & 0x10000000) != 0)
      v144 = 0x40000000;
    else
      v144 = 0x80000000;
    if ((v142 & 0x20000000) != 0)
      v145 = v144;
    else
      v145 = v142 & 0xCFFFFFFF;
    if ((v145 & 0x40000000) != 0)
    {
      v146 = *(_QWORD **)v143;
      v147 = *v146;
      v148 = *(_DWORD *)(*v146 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v148);
      a4.f32[1] = (float)(a3.i32[1] / v148);
      a4.f32[2] = (float)(v141 / v148);
      v149 = (const float *)(*v146 + 1656);
      v516 = vld3_f32(v149);
      v150 = *(_QWORD *)(v146[1] + 144);
      v151.i64[0] = 0x3F0000003F000000;
      v151.i64[1] = 0x3F0000003F000000;
      v152 = vaddq_f32(a4, v151);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v516.val[0], v152.f32[0]), v516.val[1], *(float32x2_t *)v152.f32, 1), v516.val[2], v152, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v141;
      v153 = vmulq_n_f32(vaddq_f32(a3, v151), *(float *)&v150);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v147 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v516.val[0], v153.f32[0]), v516.val[1], *(float32x2_t *)v153.f32, 1), v516.val[2], v153, 2);
    }
    else if (!(v145 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v143 + 16), *(_QWORD *)(*(_QWORD *)(v143 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v143 + 8) + 2448) + 520 * v145, *(_QWORD *)(*(_QWORD *)(v143 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v154 = *a1;
  a4.i64[0] = 0x700000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_QWORD *)v504 = a3.i64[0];
  v155 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v155;
  v156 = *(_DWORD *)(v154[1] + 236);
  if (v156 != *(_DWORD *)(*v154 + 272))
  {
    v157 = *(_QWORD *)(v154[2] + 8);
    if ((v156 & 0x10000000) != 0)
      v158 = 0x40000000;
    else
      v158 = 0x80000000;
    if ((v156 & 0x20000000) != 0)
      v159 = v158;
    else
      v159 = v156 & 0xCFFFFFFF;
    if ((v159 & 0x40000000) != 0)
    {
      v160 = *(_QWORD **)v157;
      v161 = *v160;
      v162 = *(_DWORD *)(*v160 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v162);
      a4.f32[1] = (float)(a3.i32[1] / v162);
      a4.f32[2] = (float)(v155 / v162);
      v163 = (const float *)(*v160 + 1656);
      v517 = vld3_f32(v163);
      v164 = *(_QWORD *)(v160[1] + 144);
      v165.i64[0] = 0x3F0000003F000000;
      v165.i64[1] = 0x3F0000003F000000;
      v166 = vaddq_f32(a4, v165);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v517.val[0], v166.f32[0]), v517.val[1], *(float32x2_t *)v166.f32, 1), v517.val[2], v166, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v155;
      v167 = vmulq_n_f32(vaddq_f32(a3, v165), *(float *)&v164);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v161 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v517.val[0], v167.f32[0]), v517.val[1], *(float32x2_t *)v167.f32, 1), v517.val[2], v167, 2);
    }
    else if (!(v159 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v157 + 16), *(_QWORD *)(*(_QWORD *)(v157 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v157 + 8) + 2448) + 520 * v159, *(_QWORD *)(*(_QWORD *)(v157 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v168 = *a1;
  a4.i64[0] = 0x700000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_QWORD *)v504 = a3.i64[0];
  v169 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v169;
  v170 = *(_DWORD *)(v168[1] + 240);
  if (v170 != *(_DWORD *)(*v168 + 272))
  {
    v171 = *(_QWORD *)(v168[2] + 8);
    if ((v170 & 0x10000000) != 0)
      v172 = 0x40000000;
    else
      v172 = 0x80000000;
    if ((v170 & 0x20000000) != 0)
      v173 = v172;
    else
      v173 = v170 & 0xCFFFFFFF;
    if ((v173 & 0x40000000) != 0)
    {
      v174 = *(_QWORD **)v171;
      v175 = *v174;
      v176 = *(_DWORD *)(*v174 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v176);
      a4.f32[1] = (float)(a3.i32[1] / v176);
      a4.f32[2] = (float)(v169 / v176);
      v177 = (const float *)(*v174 + 1656);
      v518 = vld3_f32(v177);
      v178 = *(_QWORD *)(v174[1] + 144);
      v179.i64[0] = 0x3F0000003F000000;
      v179.i64[1] = 0x3F0000003F000000;
      v180 = vaddq_f32(a4, v179);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v518.val[0], v180.f32[0]), v518.val[1], *(float32x2_t *)v180.f32, 1), v518.val[2], v180, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v169;
      v181 = vmulq_n_f32(vaddq_f32(a3, v179), *(float *)&v178);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v175 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v518.val[0], v181.f32[0]), v518.val[1], *(float32x2_t *)v181.f32, 1), v518.val[2], v181, 2);
    }
    else if (!(v173 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v171 + 16), *(_QWORD *)(*(_QWORD *)(v171 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v171 + 8) + 2448) + 520 * v173, *(_QWORD *)(*(_QWORD *)(v171 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v182 = *a1;
  a4.i64[0] = 0x700000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_QWORD *)v504 = a3.i64[0];
  v183 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v183;
  v184 = *(_DWORD *)(v182[1] + 244);
  if (v184 != *(_DWORD *)(*v182 + 272))
  {
    v185 = *(_QWORD *)(v182[2] + 8);
    if ((v184 & 0x10000000) != 0)
      v186 = 0x40000000;
    else
      v186 = 0x80000000;
    if ((v184 & 0x20000000) != 0)
      v187 = v186;
    else
      v187 = v184 & 0xCFFFFFFF;
    if ((v187 & 0x40000000) != 0)
    {
      v188 = *(_QWORD **)v185;
      v189 = *v188;
      v190 = *(_DWORD *)(*v188 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v190);
      a4.f32[1] = (float)(a3.i32[1] / v190);
      a4.f32[2] = (float)(v183 / v190);
      v191 = (const float *)(*v188 + 1656);
      v519 = vld3_f32(v191);
      v192 = *(_QWORD *)(v188[1] + 144);
      v193.i64[0] = 0x3F0000003F000000;
      v193.i64[1] = 0x3F0000003F000000;
      v194 = vaddq_f32(a4, v193);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v519.val[0], v194.f32[0]), v519.val[1], *(float32x2_t *)v194.f32, 1), v519.val[2], v194, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v183;
      v195 = vmulq_n_f32(vaddq_f32(a3, v193), *(float *)&v192);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v189 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v519.val[0], v195.f32[0]), v519.val[1], *(float32x2_t *)v195.f32, 1), v519.val[2], v195, 2);
    }
    else if (!(v187 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v185 + 16), *(_QWORD *)(*(_QWORD *)(v185 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v185 + 8) + 2448) + 520 * v187, *(_QWORD *)(*(_QWORD *)(v185 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v196 = *a1;
  a4.i64[0] = 0x700000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_QWORD *)v504 = a3.i64[0];
  v197 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v197;
  v198 = *(_DWORD *)(v196[1] + 248);
  if (v198 != *(_DWORD *)(*v196 + 272))
  {
    v199 = *(_QWORD *)(v196[2] + 8);
    if ((v198 & 0x10000000) != 0)
      v200 = 0x40000000;
    else
      v200 = 0x80000000;
    if ((v198 & 0x20000000) != 0)
      v201 = v200;
    else
      v201 = v198 & 0xCFFFFFFF;
    if ((v201 & 0x40000000) != 0)
    {
      v202 = *(_QWORD **)v199;
      v203 = *v202;
      v204 = *(_DWORD *)(*v202 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v204);
      a4.f32[1] = (float)(a3.i32[1] / v204);
      a4.f32[2] = (float)(v197 / v204);
      v205 = (const float *)(*v202 + 1656);
      v520 = vld3_f32(v205);
      v206 = *(_QWORD *)(v202[1] + 144);
      v207.i64[0] = 0x3F0000003F000000;
      v207.i64[1] = 0x3F0000003F000000;
      v208 = vaddq_f32(a4, v207);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v520.val[0], v208.f32[0]), v520.val[1], *(float32x2_t *)v208.f32, 1), v520.val[2], v208, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v197;
      v209 = vmulq_n_f32(vaddq_f32(a3, v207), *(float *)&v206);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v203 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v520.val[0], v209.f32[0]), v520.val[1], *(float32x2_t *)v209.f32, 1), v520.val[2], v209, 2);
    }
    else if (!(v201 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v199 + 16), *(_QWORD *)(*(_QWORD *)(v199 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v199 + 8) + 2448) + 520 * v201, *(_QWORD *)(*(_QWORD *)(v199 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v210 = *a1;
  a4.i64[0] = 0x700000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_QWORD *)v504 = a3.i64[0];
  v211 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)&v504[8] = v211;
  v212 = *(_DWORD *)(v210[1] + 252);
  if (v212 != *(_DWORD *)(*v210 + 272))
  {
    v213 = *(_QWORD *)(v210[2] + 8);
    if ((v212 & 0x10000000) != 0)
      v214 = 0x40000000;
    else
      v214 = 0x80000000;
    if ((v212 & 0x20000000) != 0)
      v215 = v214;
    else
      v215 = v212 & 0xCFFFFFFF;
    if ((v215 & 0x40000000) != 0)
    {
      v216 = *(_QWORD **)v213;
      v217 = *v216;
      v218 = *(_DWORD *)(*v216 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v218);
      a4.f32[1] = (float)(a3.i32[1] / v218);
      a4.f32[2] = (float)(v211 / v218);
      v219 = (const float *)(*v216 + 1656);
      v521 = vld3_f32(v219);
      v220 = *(_QWORD *)(v216[1] + 144);
      v221.i64[0] = 0x3F0000003F000000;
      v221.i64[1] = 0x3F0000003F000000;
      v222 = vaddq_f32(a4, v221);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v521.val[0], v222.f32[0]), v521.val[1], *(float32x2_t *)v222.f32, 1), v521.val[2], v222, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v211;
      v223 = vmulq_n_f32(vaddq_f32(a3, v221), *(float *)&v220);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v217 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v521.val[0], v223.f32[0]), v521.val[1], *(float32x2_t *)v223.f32, 1), v521.val[2], v223, 2);
    }
    else if (!(v215 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v213 + 16), *(_QWORD *)(*(_QWORD *)(v213 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v213 + 8) + 2448) + 520 * v215, *(_QWORD *)(*(_QWORD *)(v213 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v224 = *a1;
  a3.i64[0] = *(_QWORD *)a2;
  *(_QWORD *)v504 = *(_QWORD *)a2;
  v225 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v225;
  v226 = *(_DWORD *)(v224[1] + 256);
  if (v226 != *(_DWORD *)(*v224 + 272))
  {
    v227 = *(_QWORD *)(v224[2] + 8);
    if ((v226 & 0x10000000) != 0)
      v228 = 0x40000000;
    else
      v228 = 0x80000000;
    if ((v226 & 0x20000000) != 0)
      v229 = v228;
    else
      v229 = v226 & 0xCFFFFFFF;
    if ((v229 & 0x40000000) != 0)
    {
      v230 = *(_QWORD **)v227;
      v231 = *v230;
      v232 = *(_DWORD *)(*v230 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v232);
      a4.f32[1] = (float)(a3.i32[1] / v232);
      a4.f32[2] = (float)(v225 / v232);
      v233 = (const float *)(*v230 + 1656);
      v522 = vld3_f32(v233);
      v234 = *(_QWORD *)(v230[1] + 144);
      v235.i64[0] = 0x3F0000003F000000;
      v235.i64[1] = 0x3F0000003F000000;
      v236 = vaddq_f32(a4, v235);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v522.val[0], v236.f32[0]), v522.val[1], *(float32x2_t *)v236.f32, 1), v522.val[2], v236, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v225;
      v237 = vmulq_n_f32(vaddq_f32(a3, v235), *(float *)&v234);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v231 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v522.val[0], v237.f32[0]), v522.val[1], *(float32x2_t *)v237.f32, 1), v522.val[2], v237, 2);
    }
    else if (!(v229 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v227 + 16), *(_QWORD *)(*(_QWORD *)(v227 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v227 + 8) + 2448) + 520 * v229, *(_QWORD *)(*(_QWORD *)(v227 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v238 = *a1;
  v239 = *(_DWORD *)(a2 + 4);
  v240 = *(_DWORD *)a2 + 1;
  *(_DWORD *)v504 = v240;
  *(_DWORD *)&v504[4] = v239;
  v241 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v241;
  v242 = *(_DWORD *)(v238[1] + 260);
  if (v242 != *(_DWORD *)(*v238 + 272))
  {
    v243 = *(_QWORD *)(v238[2] + 8);
    if ((v242 & 0x10000000) != 0)
      v244 = 0x40000000;
    else
      v244 = 0x80000000;
    if ((v242 & 0x20000000) != 0)
      v245 = v244;
    else
      v245 = v242 & 0xCFFFFFFF;
    if ((v245 & 0x40000000) != 0)
    {
      v246 = *(_QWORD **)v243;
      v247 = *v246;
      v248 = (const float *)(*v246 + 1656);
      v249 = *(_DWORD *)(*v246 + 8);
      a3.f32[0] = (float)(v240 / v249);
      v250 = *(_QWORD *)(v246[1] + 144);
      a3.f32[1] = (float)(v239 / v249);
      a3.f32[2] = (float)(v241 / v249);
      v251.i64[0] = 0x3F0000003F000000;
      v251.i64[1] = 0x3F0000003F000000;
      v252 = vaddq_f32(a3, v251);
      v533 = vld3_f32(v248);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v533.val[0], v252.f32[0]), v533.val[1], *(float32x2_t *)v252.f32, 1), v533.val[2], v252, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)v252.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v239, v240));
      v252.f32[2] = (float)v241;
      v253 = vmulq_n_f32(vaddq_f32(v252, v251), *(float *)&v250);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v247 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v533.val[0], v253.f32[0]), v533.val[1], *(float32x2_t *)v253.f32, 1), v533.val[2], v253, 2);
    }
    else if (!(v245 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v243 + 16), *(_QWORD *)(*(_QWORD *)(v243 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v243 + 8) + 2448) + 520 * v245, *(_QWORD *)(*(_QWORD *)(v243 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v254 = *a1;
  v255 = *(_DWORD *)(a2 + 4);
  v256 = *(_DWORD *)a2 + 2;
  *(_DWORD *)v504 = v256;
  *(_DWORD *)&v504[4] = v255;
  v257 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v257;
  v258 = *(_DWORD *)(v254[1] + 264);
  if (v258 != *(_DWORD *)(*v254 + 272))
  {
    v259 = *(_QWORD *)(v254[2] + 8);
    if ((v258 & 0x10000000) != 0)
      v260 = 0x40000000;
    else
      v260 = 0x80000000;
    if ((v258 & 0x20000000) != 0)
      v261 = v260;
    else
      v261 = v258 & 0xCFFFFFFF;
    if ((v261 & 0x40000000) != 0)
    {
      v262 = *(_QWORD **)v259;
      v263 = *v262;
      v264 = (const float *)(*v262 + 1656);
      v265 = *(_DWORD *)(*v262 + 8);
      a3.f32[0] = (float)(v256 / v265);
      v266 = *(_QWORD *)(v262[1] + 144);
      a3.f32[1] = (float)(v255 / v265);
      a3.f32[2] = (float)(v257 / v265);
      v267.i64[0] = 0x3F0000003F000000;
      v267.i64[1] = 0x3F0000003F000000;
      v268 = vaddq_f32(a3, v267);
      v534 = vld3_f32(v264);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v534.val[0], v268.f32[0]), v534.val[1], *(float32x2_t *)v268.f32, 1), v534.val[2], v268, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)v268.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v255, v256));
      v268.f32[2] = (float)v257;
      v269 = vmulq_n_f32(vaddq_f32(v268, v267), *(float *)&v266);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v263 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v534.val[0], v269.f32[0]), v534.val[1], *(float32x2_t *)v269.f32, 1), v534.val[2], v269, 2);
    }
    else if (!(v261 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v259 + 16), *(_QWORD *)(*(_QWORD *)(v259 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v259 + 8) + 2448) + 520 * v261, *(_QWORD *)(*(_QWORD *)(v259 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v270 = *a1;
  v271 = *(_DWORD *)(a2 + 4);
  v272 = *(_DWORD *)a2 + 3;
  *(_DWORD *)v504 = v272;
  *(_DWORD *)&v504[4] = v271;
  v273 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v273;
  v274 = *(_DWORD *)(v270[1] + 268);
  if (v274 != *(_DWORD *)(*v270 + 272))
  {
    v275 = *(_QWORD *)(v270[2] + 8);
    if ((v274 & 0x10000000) != 0)
      v276 = 0x40000000;
    else
      v276 = 0x80000000;
    if ((v274 & 0x20000000) != 0)
      v277 = v276;
    else
      v277 = v274 & 0xCFFFFFFF;
    if ((v277 & 0x40000000) != 0)
    {
      v278 = *(_QWORD **)v275;
      v279 = *v278;
      v280 = (const float *)(*v278 + 1656);
      v281 = *(_DWORD *)(*v278 + 8);
      a3.f32[0] = (float)(v272 / v281);
      v282 = *(_QWORD *)(v278[1] + 144);
      a3.f32[1] = (float)(v271 / v281);
      a3.f32[2] = (float)(v273 / v281);
      v283.i64[0] = 0x3F0000003F000000;
      v283.i64[1] = 0x3F0000003F000000;
      v284 = vaddq_f32(a3, v283);
      v535 = vld3_f32(v280);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v535.val[0], v284.f32[0]), v535.val[1], *(float32x2_t *)v284.f32, 1), v535.val[2], v284, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)v284.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v271, v272));
      v284.f32[2] = (float)v273;
      v285 = vmulq_n_f32(vaddq_f32(v284, v283), *(float *)&v282);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v279 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v535.val[0], v285.f32[0]), v535.val[1], *(float32x2_t *)v285.f32, 1), v535.val[2], v285, 2);
    }
    else if (!(v277 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v275 + 16), *(_QWORD *)(*(_QWORD *)(v275 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v275 + 8) + 2448) + 520 * v277, *(_QWORD *)(*(_QWORD *)(v275 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v286 = *a1;
  v287 = *(_DWORD *)(a2 + 4);
  v288 = *(_DWORD *)a2 + 4;
  *(_DWORD *)v504 = v288;
  *(_DWORD *)&v504[4] = v287;
  v289 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v289;
  v290 = *(_DWORD *)(v286[1] + 272);
  if (v290 != *(_DWORD *)(*v286 + 272))
  {
    v291 = *(_QWORD *)(v286[2] + 8);
    if ((v290 & 0x10000000) != 0)
      v292 = 0x40000000;
    else
      v292 = 0x80000000;
    if ((v290 & 0x20000000) != 0)
      v293 = v292;
    else
      v293 = v290 & 0xCFFFFFFF;
    if ((v293 & 0x40000000) != 0)
    {
      v294 = *(_QWORD **)v291;
      v295 = *v294;
      v296 = (const float *)(*v294 + 1656);
      v297 = *(_DWORD *)(*v294 + 8);
      a3.f32[0] = (float)(v288 / v297);
      v298 = *(_QWORD *)(v294[1] + 144);
      a3.f32[1] = (float)(v287 / v297);
      a3.f32[2] = (float)(v289 / v297);
      v299.i64[0] = 0x3F0000003F000000;
      v299.i64[1] = 0x3F0000003F000000;
      v300 = vaddq_f32(a3, v299);
      v536 = vld3_f32(v296);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v536.val[0], v300.f32[0]), v536.val[1], *(float32x2_t *)v300.f32, 1), v536.val[2], v300, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)v300.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v287, v288));
      v300.f32[2] = (float)v289;
      v301 = vmulq_n_f32(vaddq_f32(v300, v299), *(float *)&v298);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v295 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v536.val[0], v301.f32[0]), v536.val[1], *(float32x2_t *)v301.f32, 1), v536.val[2], v301, 2);
    }
    else if (!(v293 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v291 + 16), *(_QWORD *)(*(_QWORD *)(v291 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v291 + 8) + 2448) + 520 * v293, *(_QWORD *)(*(_QWORD *)(v291 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v302 = *a1;
  v303 = *(_DWORD *)(a2 + 4);
  v304 = *(_DWORD *)a2 + 5;
  *(_DWORD *)v504 = v304;
  *(_DWORD *)&v504[4] = v303;
  v305 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v305;
  v306 = *(_DWORD *)(v302[1] + 276);
  if (v306 != *(_DWORD *)(*v302 + 272))
  {
    v307 = *(_QWORD *)(v302[2] + 8);
    if ((v306 & 0x10000000) != 0)
      v308 = 0x40000000;
    else
      v308 = 0x80000000;
    if ((v306 & 0x20000000) != 0)
      v309 = v308;
    else
      v309 = v306 & 0xCFFFFFFF;
    if ((v309 & 0x40000000) != 0)
    {
      v310 = *(_QWORD **)v307;
      v311 = *v310;
      v312 = (const float *)(*v310 + 1656);
      v313 = *(_DWORD *)(*v310 + 8);
      a3.f32[0] = (float)(v304 / v313);
      v314 = *(_QWORD *)(v310[1] + 144);
      a3.f32[1] = (float)(v303 / v313);
      a3.f32[2] = (float)(v305 / v313);
      v315.i64[0] = 0x3F0000003F000000;
      v315.i64[1] = 0x3F0000003F000000;
      v316 = vaddq_f32(a3, v315);
      v537 = vld3_f32(v312);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v537.val[0], v316.f32[0]), v537.val[1], *(float32x2_t *)v316.f32, 1), v537.val[2], v316, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)v316.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v303, v304));
      v316.f32[2] = (float)v305;
      v317 = vmulq_n_f32(vaddq_f32(v316, v315), *(float *)&v314);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v311 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v537.val[0], v317.f32[0]), v537.val[1], *(float32x2_t *)v317.f32, 1), v537.val[2], v317, 2);
    }
    else if (!(v309 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v307 + 16), *(_QWORD *)(*(_QWORD *)(v307 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v307 + 8) + 2448) + 520 * v309, *(_QWORD *)(*(_QWORD *)(v307 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v318 = *a1;
  v319 = *(_DWORD *)(a2 + 4);
  v320 = *(_DWORD *)a2 + 6;
  *(_DWORD *)v504 = v320;
  *(_DWORD *)&v504[4] = v319;
  v321 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v321;
  v322 = *(_DWORD *)(v318[1] + 280);
  if (v322 != *(_DWORD *)(*v318 + 272))
  {
    v323 = *(_QWORD *)(v318[2] + 8);
    if ((v322 & 0x10000000) != 0)
      v324 = 0x40000000;
    else
      v324 = 0x80000000;
    if ((v322 & 0x20000000) != 0)
      v325 = v324;
    else
      v325 = v322 & 0xCFFFFFFF;
    if ((v325 & 0x40000000) != 0)
    {
      v326 = *(_QWORD **)v323;
      v327 = *v326;
      v328 = (const float *)(*v326 + 1656);
      v329 = *(_DWORD *)(*v326 + 8);
      a3.f32[0] = (float)(v320 / v329);
      v330 = *(_QWORD *)(v326[1] + 144);
      a3.f32[1] = (float)(v319 / v329);
      a3.f32[2] = (float)(v321 / v329);
      v331.i64[0] = 0x3F0000003F000000;
      v331.i64[1] = 0x3F0000003F000000;
      v332 = vaddq_f32(a3, v331);
      v538 = vld3_f32(v328);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v538.val[0], v332.f32[0]), v538.val[1], *(float32x2_t *)v332.f32, 1), v538.val[2], v332, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)v332.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v319, v320));
      v332.f32[2] = (float)v321;
      v333 = vmulq_n_f32(vaddq_f32(v332, v331), *(float *)&v330);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v327 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v538.val[0], v333.f32[0]), v538.val[1], *(float32x2_t *)v333.f32, 1), v538.val[2], v333, 2);
    }
    else if (!(v325 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v323 + 16), *(_QWORD *)(*(_QWORD *)(v323 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v323 + 8) + 2448) + 520 * v325, *(_QWORD *)(*(_QWORD *)(v323 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v334 = *a1;
  v335 = *(_DWORD *)(a2 + 4);
  v336 = *(_DWORD *)a2 + 7;
  *(_DWORD *)v504 = v336;
  *(_DWORD *)&v504[4] = v335;
  v337 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v337;
  v338 = *(_DWORD *)(v334[1] + 284);
  if (v338 != *(_DWORD *)(*v334 + 272))
  {
    v339 = *(_QWORD *)(v334[2] + 8);
    if ((v338 & 0x10000000) != 0)
      v340 = 0x40000000;
    else
      v340 = 0x80000000;
    if ((v338 & 0x20000000) != 0)
      v341 = v340;
    else
      v341 = v338 & 0xCFFFFFFF;
    if ((v341 & 0x40000000) != 0)
    {
      v342 = *(_QWORD **)v339;
      v343 = *v342;
      v344 = (const float *)(*v342 + 1656);
      v345 = *(_DWORD *)(*v342 + 8);
      a3.f32[0] = (float)(v336 / v345);
      v346 = *(_QWORD *)(v342[1] + 144);
      a3.f32[1] = (float)(v335 / v345);
      a3.f32[2] = (float)(v337 / v345);
      v347.i64[0] = 0x3F0000003F000000;
      v347.i64[1] = 0x3F0000003F000000;
      v348 = vaddq_f32(a3, v347);
      v539 = vld3_f32(v344);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v539.val[0], v348.f32[0]), v539.val[1], *(float32x2_t *)v348.f32, 1), v539.val[2], v348, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)v348.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v335, v336));
      v348.f32[2] = (float)v337;
      v349 = vmulq_n_f32(vaddq_f32(v348, v347), *(float *)&v346);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v343 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v539.val[0], v349.f32[0]), v539.val[1], *(float32x2_t *)v349.f32, 1), v539.val[2], v349, 2);
    }
    else if (!(v341 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v339 + 16), *(_QWORD *)(*(_QWORD *)(v339 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v339 + 8) + 2448) + 520 * v341, *(_QWORD *)(*(_QWORD *)(v339 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v350 = *a1;
  v351 = *(_DWORD *)a2;
  *(_DWORD *)v504 = *(_DWORD *)a2;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000001);
  *(_QWORD *)&v504[4] = a3.i64[0];
  v352 = *(_DWORD *)(v350[1] + 288);
  if (v352 != *(_DWORD *)(*v350 + 272))
  {
    v353 = *(_QWORD *)(v350[2] + 8);
    if ((v352 & 0x10000000) != 0)
      v354 = 0x40000000;
    else
      v354 = 0x80000000;
    if ((v352 & 0x20000000) != 0)
      v355 = v354;
    else
      v355 = v352 & 0xCFFFFFFF;
    if ((v355 & 0x40000000) != 0)
    {
      v356 = *(_QWORD **)v353;
      v357 = *v356;
      v358 = (const float *)(*v356 + 1656);
      v359 = *(_QWORD *)(v356[1] + 144);
      LODWORD(v356) = *(_DWORD *)(*v356 + 8);
      v360 = a3.i32[1];
      a5.f32[0] = (float)(v351 / (int)v356);
      a5.f32[1] = (float)(a3.i32[0] / (int)v356);
      a5.f32[2] = (float)(a3.i32[1] / (int)v356);
      v361.i64[0] = 0x3F0000003F000000;
      v361.i64[1] = 0x3F0000003F000000;
      v540 = vld3_f32(v358);
      v362 = vaddq_f32(a5, v361);
      *(int32x2_t *)v362.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v540.val[0], v362.f32[0]), v540.val[1], *(float32x2_t *)v362.f32, 1), v540.val[2], v362, 2), (float32x2_t)0xBF000000BF000000));
      v505 = *(int32x2_t *)v362.f32;
      v506 = 0;
      v362.i32[0] = v351;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v362.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v360;
      v363 = vmulq_n_f32(vaddq_f32(a3, v361), *(float *)&v359);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v357 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v540.val[0], v363.f32[0]), v540.val[1], *(float32x2_t *)v363.f32, 1), v540.val[2], v363, 2);
    }
    else if (!(v355 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v353 + 16), *(_QWORD *)(*(_QWORD *)(v353 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v353 + 8) + 2448) + 520 * v355, *(_QWORD *)(*(_QWORD *)(v353 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v364 = *a1;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000001);
  *(_QWORD *)v504 = a3.i64[0];
  v365 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v365;
  v366 = *(_DWORD *)(v364[1] + 292);
  if (v366 != *(_DWORD *)(*v364 + 272))
  {
    v367 = *(_QWORD *)(v364[2] + 8);
    if ((v366 & 0x10000000) != 0)
      v368 = 0x40000000;
    else
      v368 = 0x80000000;
    if ((v366 & 0x20000000) != 0)
      v369 = v368;
    else
      v369 = v366 & 0xCFFFFFFF;
    if ((v369 & 0x40000000) != 0)
    {
      v370 = *(_QWORD **)v367;
      v371 = *v370;
      v372 = *(_DWORD *)(*v370 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v372);
      a4.f32[1] = (float)(a3.i32[1] / v372);
      a4.f32[2] = (float)(v365 / v372);
      v373 = (const float *)(*v370 + 1656);
      v523 = vld3_f32(v373);
      v374 = *(_QWORD *)(v370[1] + 144);
      v375.i64[0] = 0x3F0000003F000000;
      v375.i64[1] = 0x3F0000003F000000;
      v376 = vaddq_f32(a4, v375);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v523.val[0], v376.f32[0]), v523.val[1], *(float32x2_t *)v376.f32, 1), v523.val[2], v376, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v365;
      v377 = vmulq_n_f32(vaddq_f32(a3, v375), *(float *)&v374);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v371 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v523.val[0], v377.f32[0]), v523.val[1], *(float32x2_t *)v377.f32, 1), v523.val[2], v377, 2);
    }
    else if (!(v369 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v367 + 16), *(_QWORD *)(*(_QWORD *)(v367 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v367 + 8) + 2448) + 520 * v369, *(_QWORD *)(*(_QWORD *)(v367 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v378 = *a1;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000002);
  *(_QWORD *)v504 = a3.i64[0];
  v379 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v379;
  v380 = *(_DWORD *)(v378[1] + 296);
  if (v380 != *(_DWORD *)(*v378 + 272))
  {
    v381 = *(_QWORD *)(v378[2] + 8);
    if ((v380 & 0x10000000) != 0)
      v382 = 0x40000000;
    else
      v382 = 0x80000000;
    if ((v380 & 0x20000000) != 0)
      v383 = v382;
    else
      v383 = v380 & 0xCFFFFFFF;
    if ((v383 & 0x40000000) != 0)
    {
      v384 = *(_QWORD **)v381;
      v385 = *v384;
      v386 = *(_DWORD *)(*v384 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v386);
      a4.f32[1] = (float)(a3.i32[1] / v386);
      a4.f32[2] = (float)(v379 / v386);
      v387 = (const float *)(*v384 + 1656);
      v524 = vld3_f32(v387);
      v388 = *(_QWORD *)(v384[1] + 144);
      v389.i64[0] = 0x3F0000003F000000;
      v389.i64[1] = 0x3F0000003F000000;
      v390 = vaddq_f32(a4, v389);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v524.val[0], v390.f32[0]), v524.val[1], *(float32x2_t *)v390.f32, 1), v524.val[2], v390, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v379;
      v391 = vmulq_n_f32(vaddq_f32(a3, v389), *(float *)&v388);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v385 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v524.val[0], v391.f32[0]), v524.val[1], *(float32x2_t *)v391.f32, 1), v524.val[2], v391, 2);
    }
    else if (!(v383 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v381 + 16), *(_QWORD *)(*(_QWORD *)(v381 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v381 + 8) + 2448) + 520 * v383, *(_QWORD *)(*(_QWORD *)(v381 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v392 = *a1;
  a4.i64[0] = 0x100000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000003);
  *(_QWORD *)v504 = a3.i64[0];
  v393 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v393;
  v394 = *(_DWORD *)(v392[1] + 300);
  if (v394 != *(_DWORD *)(*v392 + 272))
  {
    v395 = *(_QWORD *)(v392[2] + 8);
    if ((v394 & 0x10000000) != 0)
      v396 = 0x40000000;
    else
      v396 = 0x80000000;
    if ((v394 & 0x20000000) != 0)
      v397 = v396;
    else
      v397 = v394 & 0xCFFFFFFF;
    if ((v397 & 0x40000000) != 0)
    {
      v398 = *(_QWORD **)v395;
      v399 = *v398;
      v400 = *(_DWORD *)(*v398 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v400);
      a4.f32[1] = (float)(a3.i32[1] / v400);
      a4.f32[2] = (float)(v393 / v400);
      v401 = (const float *)(*v398 + 1656);
      v525 = vld3_f32(v401);
      v402 = *(_QWORD *)(v398[1] + 144);
      v403.i64[0] = 0x3F0000003F000000;
      v403.i64[1] = 0x3F0000003F000000;
      v404 = vaddq_f32(a4, v403);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v525.val[0], v404.f32[0]), v525.val[1], *(float32x2_t *)v404.f32, 1), v525.val[2], v404, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v393;
      v405 = vmulq_n_f32(vaddq_f32(a3, v403), *(float *)&v402);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v399 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v525.val[0], v405.f32[0]), v525.val[1], *(float32x2_t *)v405.f32, 1), v525.val[2], v405, 2);
    }
    else if (!(v397 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v395 + 16), *(_QWORD *)(*(_QWORD *)(v395 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v395 + 8) + 2448) + 520 * v397, *(_QWORD *)(*(_QWORD *)(v395 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v406 = *a1;
  a4.i64[0] = 0x100000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000004);
  *(_QWORD *)v504 = a3.i64[0];
  v407 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v407;
  v408 = *(_DWORD *)(v406[1] + 304);
  if (v408 != *(_DWORD *)(*v406 + 272))
  {
    v409 = *(_QWORD *)(v406[2] + 8);
    if ((v408 & 0x10000000) != 0)
      v410 = 0x40000000;
    else
      v410 = 0x80000000;
    if ((v408 & 0x20000000) != 0)
      v411 = v410;
    else
      v411 = v408 & 0xCFFFFFFF;
    if ((v411 & 0x40000000) != 0)
    {
      v412 = *(_QWORD **)v409;
      v413 = *v412;
      v414 = *(_DWORD *)(*v412 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v414);
      a4.f32[1] = (float)(a3.i32[1] / v414);
      a4.f32[2] = (float)(v407 / v414);
      v415 = (const float *)(*v412 + 1656);
      v526 = vld3_f32(v415);
      v416 = *(_QWORD *)(v412[1] + 144);
      v417.i64[0] = 0x3F0000003F000000;
      v417.i64[1] = 0x3F0000003F000000;
      v418 = vaddq_f32(a4, v417);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v526.val[0], v418.f32[0]), v526.val[1], *(float32x2_t *)v418.f32, 1), v526.val[2], v418, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v407;
      v419 = vmulq_n_f32(vaddq_f32(a3, v417), *(float *)&v416);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v413 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v526.val[0], v419.f32[0]), v526.val[1], *(float32x2_t *)v419.f32, 1), v526.val[2], v419, 2);
    }
    else if (!(v411 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v409 + 16), *(_QWORD *)(*(_QWORD *)(v409 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v409 + 8) + 2448) + 520 * v411, *(_QWORD *)(*(_QWORD *)(v409 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v420 = *a1;
  a4.i64[0] = 0x100000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000005);
  *(_QWORD *)v504 = a3.i64[0];
  v421 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v421;
  v422 = *(_DWORD *)(v420[1] + 308);
  if (v422 != *(_DWORD *)(*v420 + 272))
  {
    v423 = *(_QWORD *)(v420[2] + 8);
    if ((v422 & 0x10000000) != 0)
      v424 = 0x40000000;
    else
      v424 = 0x80000000;
    if ((v422 & 0x20000000) != 0)
      v425 = v424;
    else
      v425 = v422 & 0xCFFFFFFF;
    if ((v425 & 0x40000000) != 0)
    {
      v426 = *(_QWORD **)v423;
      v427 = *v426;
      v428 = *(_DWORD *)(*v426 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v428);
      a4.f32[1] = (float)(a3.i32[1] / v428);
      a4.f32[2] = (float)(v421 / v428);
      v429 = (const float *)(*v426 + 1656);
      v527 = vld3_f32(v429);
      v430 = *(_QWORD *)(v426[1] + 144);
      v431.i64[0] = 0x3F0000003F000000;
      v431.i64[1] = 0x3F0000003F000000;
      v432 = vaddq_f32(a4, v431);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v527.val[0], v432.f32[0]), v527.val[1], *(float32x2_t *)v432.f32, 1), v527.val[2], v432, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v421;
      v433 = vmulq_n_f32(vaddq_f32(a3, v431), *(float *)&v430);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v427 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v527.val[0], v433.f32[0]), v527.val[1], *(float32x2_t *)v433.f32, 1), v527.val[2], v433, 2);
    }
    else if (!(v425 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v423 + 16), *(_QWORD *)(*(_QWORD *)(v423 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v423 + 8) + 2448) + 520 * v425, *(_QWORD *)(*(_QWORD *)(v423 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v434 = *a1;
  a4.i64[0] = 0x100000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000006);
  *(_QWORD *)v504 = a3.i64[0];
  v435 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v435;
  v436 = *(_DWORD *)(v434[1] + 312);
  if (v436 != *(_DWORD *)(*v434 + 272))
  {
    v437 = *(_QWORD *)(v434[2] + 8);
    if ((v436 & 0x10000000) != 0)
      v438 = 0x40000000;
    else
      v438 = 0x80000000;
    if ((v436 & 0x20000000) != 0)
      v439 = v438;
    else
      v439 = v436 & 0xCFFFFFFF;
    if ((v439 & 0x40000000) != 0)
    {
      v440 = *(_QWORD **)v437;
      v441 = *v440;
      v442 = *(_DWORD *)(*v440 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v442);
      a4.f32[1] = (float)(a3.i32[1] / v442);
      a4.f32[2] = (float)(v435 / v442);
      v443 = (const float *)(*v440 + 1656);
      v528 = vld3_f32(v443);
      v444 = *(_QWORD *)(v440[1] + 144);
      v445.i64[0] = 0x3F0000003F000000;
      v445.i64[1] = 0x3F0000003F000000;
      v446 = vaddq_f32(a4, v445);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v528.val[0], v446.f32[0]), v528.val[1], *(float32x2_t *)v446.f32, 1), v528.val[2], v446, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v435;
      v447 = vmulq_n_f32(vaddq_f32(a3, v445), *(float *)&v444);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v441 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v528.val[0], v447.f32[0]), v528.val[1], *(float32x2_t *)v447.f32, 1), v528.val[2], v447, 2);
    }
    else if (!(v439 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v437 + 16), *(_QWORD *)(*(_QWORD *)(v437 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v437 + 8) + 2448) + 520 * v439, *(_QWORD *)(*(_QWORD *)(v437 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v448 = *a1;
  a4.i64[0] = 0x100000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000007);
  *(_QWORD *)v504 = a3.i64[0];
  v449 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v449;
  v450 = *(_DWORD *)(v448[1] + 316);
  if (v450 != *(_DWORD *)(*v448 + 272))
  {
    v451 = *(_QWORD *)(v448[2] + 8);
    if ((v450 & 0x10000000) != 0)
      v452 = 0x40000000;
    else
      v452 = 0x80000000;
    if ((v450 & 0x20000000) != 0)
      v453 = v452;
    else
      v453 = v450 & 0xCFFFFFFF;
    if ((v453 & 0x40000000) != 0)
    {
      v454 = *(_QWORD **)v451;
      v455 = *v454;
      v456 = *(_DWORD *)(*v454 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v456);
      a4.f32[1] = (float)(a3.i32[1] / v456);
      a4.f32[2] = (float)(v449 / v456);
      v457 = (const float *)(*v454 + 1656);
      v529 = vld3_f32(v457);
      v458 = *(_QWORD *)(v454[1] + 144);
      v459.i64[0] = 0x3F0000003F000000;
      v459.i64[1] = 0x3F0000003F000000;
      v460 = vaddq_f32(a4, v459);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v529.val[0], v460.f32[0]), v529.val[1], *(float32x2_t *)v460.f32, 1), v529.val[2], v460, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v449;
      v461 = vmulq_n_f32(vaddq_f32(a3, v459), *(float *)&v458);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v455 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v529.val[0], v461.f32[0]), v529.val[1], *(float32x2_t *)v461.f32, 1), v529.val[2], v461, 2);
    }
    else if (!(v453 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v451 + 16), *(_QWORD *)(*(_QWORD *)(v451 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v451 + 8) + 2448) + 520 * v453, *(_QWORD *)(*(_QWORD *)(v451 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v462 = *a1;
  v463 = *(_DWORD *)a2;
  *(_DWORD *)v504 = *(_DWORD *)a2;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000002);
  *(_QWORD *)&v504[4] = a3.i64[0];
  v464 = *(_DWORD *)(v462[1] + 320);
  if (v464 != *(_DWORD *)(*v462 + 272))
  {
    v465 = *(_QWORD *)(v462[2] + 8);
    if ((v464 & 0x10000000) != 0)
      v466 = 0x40000000;
    else
      v466 = 0x80000000;
    if ((v464 & 0x20000000) != 0)
      v467 = v466;
    else
      v467 = v464 & 0xCFFFFFFF;
    if ((v467 & 0x40000000) != 0)
    {
      v468 = *(_QWORD **)v465;
      v469 = *v468;
      v470 = (const float *)(*v468 + 1656);
      v471 = *(_QWORD *)(v468[1] + 144);
      LODWORD(v468) = *(_DWORD *)(*v468 + 8);
      v472 = a3.i32[1];
      a5.f32[0] = (float)(v463 / (int)v468);
      a5.f32[1] = (float)(a3.i32[0] / (int)v468);
      a5.f32[2] = (float)(a3.i32[1] / (int)v468);
      v473.i64[0] = 0x3F0000003F000000;
      v473.i64[1] = 0x3F0000003F000000;
      v541 = vld3_f32(v470);
      v474 = vaddq_f32(a5, v473);
      *(int32x2_t *)v474.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v541.val[0], v474.f32[0]), v541.val[1], *(float32x2_t *)v474.f32, 1), v541.val[2], v474, 2), (float32x2_t)0xBF000000BF000000));
      v505 = *(int32x2_t *)v474.f32;
      v506 = 0;
      v474.i32[0] = v463;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v474.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v472;
      v475 = vmulq_n_f32(vaddq_f32(a3, v473), *(float *)&v471);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v469 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v541.val[0], v475.f32[0]), v541.val[1], *(float32x2_t *)v475.f32, 1), v541.val[2], v475, 2);
    }
    else if (!(v467 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v465 + 16), *(_QWORD *)(*(_QWORD *)(v465 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v465 + 8) + 2448) + 520 * v467, *(_QWORD *)(*(_QWORD *)(v465 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v476 = *a1;
  a4.i64[0] = 0x200000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000001);
  *(_QWORD *)v504 = a3.i64[0];
  v477 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v477;
  v478 = *(_DWORD *)(v476[1] + 324);
  if (v478 != *(_DWORD *)(*v476 + 272))
  {
    v479 = *(_QWORD *)(v476[2] + 8);
    if ((v478 & 0x10000000) != 0)
      v480 = 0x40000000;
    else
      v480 = 0x80000000;
    if ((v478 & 0x20000000) != 0)
      v481 = v480;
    else
      v481 = v478 & 0xCFFFFFFF;
    if ((v481 & 0x40000000) != 0)
    {
      v482 = *(_QWORD **)v479;
      v483 = *v482;
      v484 = *(_DWORD *)(*v482 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v484);
      a4.f32[1] = (float)(a3.i32[1] / v484);
      a4.f32[2] = (float)(v477 / v484);
      v485 = (const float *)(*v482 + 1656);
      v530 = vld3_f32(v485);
      v486 = *(_QWORD *)(v482[1] + 144);
      v487.i64[0] = 0x3F0000003F000000;
      v487.i64[1] = 0x3F0000003F000000;
      v488 = vaddq_f32(a4, v487);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v530.val[0], v488.f32[0]), v530.val[1], *(float32x2_t *)v488.f32, 1), v530.val[2], v488, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v477;
      v489 = vmulq_n_f32(vaddq_f32(a3, v487), *(float *)&v486);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v483 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v530.val[0], v489.f32[0]), v530.val[1], *(float32x2_t *)v489.f32, 1), v530.val[2], v489, 2);
    }
    else if (!(v481 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v479 + 16), *(_QWORD *)(*(_QWORD *)(v479 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v479 + 8) + 2448) + 520 * v481, *(_QWORD *)(*(_QWORD *)(v479 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v490 = *a1;
  a4.i64[0] = 0x200000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000002);
  *(_QWORD *)v504 = a3.i64[0];
  v491 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v504[8] = v491;
  v492 = *(_DWORD *)(v490[1] + 328);
  if (v492 != *(_DWORD *)(*v490 + 272))
  {
    v493 = *(_QWORD *)(v490[2] + 8);
    if ((v492 & 0x10000000) != 0)
      v494 = 0x40000000;
    else
      v494 = 0x80000000;
    if ((v492 & 0x20000000) != 0)
      v495 = v494;
    else
      v495 = v492 & 0xCFFFFFFF;
    if ((v495 & 0x40000000) != 0)
    {
      v496 = *(_QWORD **)v493;
      v497 = *v496;
      v498 = *(_DWORD *)(*v496 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v498);
      a4.f32[1] = (float)(a3.i32[1] / v498);
      a4.f32[2] = (float)(v491 / v498);
      v499 = (const float *)(*v496 + 1656);
      v531 = vld3_f32(v499);
      v500 = *(_QWORD *)(v496[1] + 144);
      v501.i64[0] = 0x3F0000003F000000;
      v501.i64[1] = 0x3F0000003F000000;
      v502 = vaddq_f32(a4, v501);
      v505 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v531.val[0], v502.f32[0]), v531.val[1], *(float32x2_t *)v502.f32, 1), v531.val[2], v502, 2), (float32x2_t)0xBF000000BF000000));
      v506 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v491;
      v503 = vmulq_n_f32(vaddq_f32(a3, v501), *(float *)&v500);
      v507 = &v505;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v497 + 64), (int *)&v505, (uint64_t)&unk_2245BA939, (uint64_t **)&v507)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v531.val[0], v503.f32[0]), v531.val[1], *(float32x2_t *)v503.f32, 1), v531.val[2], v503, 2);
    }
    else if (!(v495 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v493 + 16), *(_QWORD *)(*(_QWORD *)(v493 + 16) + 8), (int32x2_t *)v504, *(_QWORD *)(*(_QWORD *)(v493 + 8) + 2448) + 520 * v495, *(_QWORD *)(*(_QWORD *)(v493 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  sub_2239C00C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_2239C00C0(_QWORD **a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  const float *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  const float *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  const float *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  _QWORD *v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  const float *v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  _QWORD *v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  const float *v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  _QWORD *v82;
  __int32 v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  const float *v90;
  uint64_t v91;
  int v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _QWORD *v96;
  int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  const float *v105;
  uint64_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD *v110;
  int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  const float *v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  _QWORD *v124;
  int v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  const float *v133;
  uint64_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  _QWORD *v138;
  int v139;
  int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  _QWORD *v144;
  uint64_t v145;
  int v146;
  const float *v147;
  uint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  _QWORD *v152;
  int v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  const float *v161;
  uint64_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  _QWORD *v166;
  int v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  _QWORD *v172;
  uint64_t v173;
  int v174;
  const float *v175;
  uint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  _QWORD *v180;
  int v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  _QWORD *v186;
  uint64_t v187;
  int v188;
  const float *v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  _QWORD *v194;
  __int32 v195;
  int v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  _QWORD *v200;
  uint64_t v201;
  const float *v202;
  uint64_t v203;
  int v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  _QWORD *v208;
  int v209;
  int v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  _QWORD *v214;
  uint64_t v215;
  int v216;
  const float *v217;
  uint64_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  _QWORD *v222;
  int v223;
  int v224;
  uint64_t v225;
  unsigned int v226;
  unsigned int v227;
  _QWORD *v228;
  uint64_t v229;
  int v230;
  const float *v231;
  uint64_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  _QWORD *v236;
  int v237;
  int v238;
  uint64_t v239;
  unsigned int v240;
  unsigned int v241;
  _QWORD *v242;
  uint64_t v243;
  int v244;
  const float *v245;
  uint64_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  _QWORD *v250;
  int v251;
  int v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  _QWORD *v256;
  uint64_t v257;
  int v258;
  const float *v259;
  uint64_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  _QWORD *v264;
  int v265;
  int v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int v269;
  _QWORD *v270;
  uint64_t v271;
  int v272;
  const float *v273;
  uint64_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  _QWORD *v278;
  int v279;
  int v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  _QWORD *v284;
  uint64_t v285;
  int v286;
  const float *v287;
  uint64_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  _QWORD *v292;
  int v293;
  int v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  _QWORD *v298;
  uint64_t v299;
  int v300;
  const float *v301;
  uint64_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  _QWORD *v306;
  __int32 v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  _QWORD *v312;
  uint64_t v313;
  const float *v314;
  uint64_t v315;
  int v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  _QWORD *v320;
  int v321;
  int v322;
  uint64_t v323;
  unsigned int v324;
  unsigned int v325;
  _QWORD *v326;
  uint64_t v327;
  int v328;
  const float *v329;
  uint64_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  _QWORD *v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  _QWORD *v340;
  uint64_t v341;
  int v342;
  const float *v343;
  uint64_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  _QWORD *v348;
  int v349;
  int v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  _QWORD *v354;
  uint64_t v355;
  int v356;
  const float *v357;
  uint64_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  _QWORD *v362;
  int v363;
  int v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  _QWORD *v368;
  uint64_t v369;
  int v370;
  const float *v371;
  uint64_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  _QWORD *v376;
  int v377;
  int v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  _QWORD *v382;
  uint64_t v383;
  int v384;
  const float *v385;
  uint64_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  _QWORD *v390;
  int v391;
  int v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  _QWORD *v396;
  uint64_t v397;
  int v398;
  const float *v399;
  uint64_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  _QWORD *v404;
  int v405;
  int v406;
  uint64_t v407;
  unsigned int v408;
  unsigned int v409;
  _QWORD *v410;
  uint64_t v411;
  int v412;
  const float *v413;
  uint64_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  _QWORD *v418;
  __int32 v419;
  int v420;
  uint64_t v421;
  unsigned int v422;
  unsigned int v423;
  _QWORD *v424;
  uint64_t v425;
  const float *v426;
  uint64_t v427;
  int v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  _QWORD *v432;
  int v433;
  int v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  _QWORD *v438;
  uint64_t v439;
  int v440;
  const float *v441;
  uint64_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  _QWORD *v446;
  int v447;
  int v448;
  uint64_t v449;
  unsigned int v450;
  unsigned int v451;
  _QWORD *v452;
  uint64_t v453;
  int v454;
  const float *v455;
  uint64_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  _QWORD *v460;
  int v461;
  int v462;
  uint64_t v463;
  unsigned int v464;
  unsigned int v465;
  _QWORD *v466;
  uint64_t v467;
  int v468;
  const float *v469;
  uint64_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  _BYTE v474[12];
  int32x2_t v475;
  int v476;
  int32x2_t *v477;
  float32x2x3_t v478;
  float32x2x3_t v479;
  float32x2x3_t v480;
  float32x2x3_t v481;
  float32x2x3_t v482;
  float32x2x3_t v483;
  float32x2x3_t v484;
  float32x2x3_t v485;
  float32x2x3_t v486;
  float32x2x3_t v487;
  float32x2x3_t v488;
  float32x2x3_t v489;
  float32x2x3_t v490;
  float32x2x3_t v491;
  float32x2x3_t v492;
  float32x2x3_t v493;
  float32x2x3_t v494;
  float32x2x3_t v495;
  float32x2x3_t v496;
  float32x2x3_t v497;
  float32x2x3_t v498;
  float32x2x3_t v499;
  float32x2x3_t v500;
  float32x2x3_t v501;
  float32x2x3_t v502;
  float32x2x3_t v503;
  float32x2x3_t v504;
  float32x2x3_t v505;
  float32x2x3_t v506;
  float32x2x3_t v507;
  float32x2x3_t v508;
  float32x2x3_t v509;
  float32x2x3_t v510;

  v12 = *a1;
  a4.i64[0] = 0x200000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_QWORD *)v474 = a3.i64[0];
  v13 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v13;
  v14 = *(_DWORD *)(v12[1] + 332);
  if (v14 != *(_DWORD *)(*v12 + 272))
  {
    v15 = *(_QWORD *)(v12[2] + 8);
    if ((v14 & 0x10000000) != 0)
      v16 = 0x40000000;
    else
      v16 = 0x80000000;
    if ((v14 & 0x20000000) != 0)
      v17 = v16;
    else
      v17 = v14 & 0xCFFFFFFF;
    if ((v17 & 0x40000000) != 0)
    {
      v18 = *(_QWORD **)v15;
      v19 = *v18;
      v20 = *(_DWORD *)(*v18 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v20);
      a4.f32[1] = (float)(a3.i32[1] / v20);
      a4.f32[2] = (float)(v13 / v20);
      v21 = (const float *)(*v18 + 1656);
      v478 = vld3_f32(v21);
      v22 = *(_QWORD *)(v18[1] + 144);
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      v24 = vaddq_f32(a4, v23);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v478.val[0], v24.f32[0]), v478.val[1], *(float32x2_t *)v24.f32, 1), v478.val[2], v24, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v13;
      v25 = vmulq_n_f32(vaddq_f32(a3, v23), *(float *)&v22);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v19 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v478.val[0], v25.f32[0]), v478.val[1], *(float32x2_t *)v25.f32, 1), v478.val[2], v25, 2);
    }
    else if (!(v17 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v15 + 16), *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 2448) + 520 * v17, *(_QWORD *)(*(_QWORD *)(v15 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v26 = *a1;
  a4.i64[0] = 0x200000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_QWORD *)v474 = a3.i64[0];
  v27 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v27;
  v28 = *(_DWORD *)(v26[1] + 336);
  if (v28 != *(_DWORD *)(*v26 + 272))
  {
    v29 = *(_QWORD *)(v26[2] + 8);
    if ((v28 & 0x10000000) != 0)
      v30 = 0x40000000;
    else
      v30 = 0x80000000;
    if ((v28 & 0x20000000) != 0)
      v31 = v30;
    else
      v31 = v28 & 0xCFFFFFFF;
    if ((v31 & 0x40000000) != 0)
    {
      v32 = *(_QWORD **)v29;
      v33 = *v32;
      v34 = *(_DWORD *)(*v32 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v34);
      a4.f32[1] = (float)(a3.i32[1] / v34);
      a4.f32[2] = (float)(v27 / v34);
      v35 = (const float *)(*v32 + 1656);
      v479 = vld3_f32(v35);
      v36 = *(_QWORD *)(v32[1] + 144);
      v37.i64[0] = 0x3F0000003F000000;
      v37.i64[1] = 0x3F0000003F000000;
      v38 = vaddq_f32(a4, v37);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v479.val[0], v38.f32[0]), v479.val[1], *(float32x2_t *)v38.f32, 1), v479.val[2], v38, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v27;
      v39 = vmulq_n_f32(vaddq_f32(a3, v37), *(float *)&v36);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v33 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v479.val[0], v39.f32[0]), v479.val[1], *(float32x2_t *)v39.f32, 1), v479.val[2], v39, 2);
    }
    else if (!(v31 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v29 + 16), *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v29 + 8) + 2448) + 520 * v31, *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v40 = *a1;
  a4.i64[0] = 0x200000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_QWORD *)v474 = a3.i64[0];
  v41 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v41;
  v42 = *(_DWORD *)(v40[1] + 340);
  if (v42 != *(_DWORD *)(*v40 + 272))
  {
    v43 = *(_QWORD *)(v40[2] + 8);
    if ((v42 & 0x10000000) != 0)
      v44 = 0x40000000;
    else
      v44 = 0x80000000;
    if ((v42 & 0x20000000) != 0)
      v45 = v44;
    else
      v45 = v42 & 0xCFFFFFFF;
    if ((v45 & 0x40000000) != 0)
    {
      v46 = *(_QWORD **)v43;
      v47 = *v46;
      v48 = *(_DWORD *)(*v46 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v48);
      a4.f32[1] = (float)(a3.i32[1] / v48);
      a4.f32[2] = (float)(v41 / v48);
      v49 = (const float *)(*v46 + 1656);
      v480 = vld3_f32(v49);
      v50 = *(_QWORD *)(v46[1] + 144);
      v51.i64[0] = 0x3F0000003F000000;
      v51.i64[1] = 0x3F0000003F000000;
      v52 = vaddq_f32(a4, v51);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v480.val[0], v52.f32[0]), v480.val[1], *(float32x2_t *)v52.f32, 1), v480.val[2], v52, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v41;
      v53 = vmulq_n_f32(vaddq_f32(a3, v51), *(float *)&v50);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v47 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v480.val[0], v53.f32[0]), v480.val[1], *(float32x2_t *)v53.f32, 1), v480.val[2], v53, 2);
    }
    else if (!(v45 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v43 + 16), *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v43 + 8) + 2448) + 520 * v45, *(_QWORD *)(*(_QWORD *)(v43 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v54 = *a1;
  a4.i64[0] = 0x200000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_QWORD *)v474 = a3.i64[0];
  v55 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v55;
  v56 = *(_DWORD *)(v54[1] + 344);
  if (v56 != *(_DWORD *)(*v54 + 272))
  {
    v57 = *(_QWORD *)(v54[2] + 8);
    if ((v56 & 0x10000000) != 0)
      v58 = 0x40000000;
    else
      v58 = 0x80000000;
    if ((v56 & 0x20000000) != 0)
      v59 = v58;
    else
      v59 = v56 & 0xCFFFFFFF;
    if ((v59 & 0x40000000) != 0)
    {
      v60 = *(_QWORD **)v57;
      v61 = *v60;
      v62 = *(_DWORD *)(*v60 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v62);
      a4.f32[1] = (float)(a3.i32[1] / v62);
      a4.f32[2] = (float)(v55 / v62);
      v63 = (const float *)(*v60 + 1656);
      v481 = vld3_f32(v63);
      v64 = *(_QWORD *)(v60[1] + 144);
      v65.i64[0] = 0x3F0000003F000000;
      v65.i64[1] = 0x3F0000003F000000;
      v66 = vaddq_f32(a4, v65);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v481.val[0], v66.f32[0]), v481.val[1], *(float32x2_t *)v66.f32, 1), v481.val[2], v66, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v55;
      v67 = vmulq_n_f32(vaddq_f32(a3, v65), *(float *)&v64);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v61 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v481.val[0], v67.f32[0]), v481.val[1], *(float32x2_t *)v67.f32, 1), v481.val[2], v67, 2);
    }
    else if (!(v59 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v57 + 16), *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v57 + 8) + 2448) + 520 * v59, *(_QWORD *)(*(_QWORD *)(v57 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v68 = *a1;
  a4.i64[0] = 0x200000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_QWORD *)v474 = a3.i64[0];
  v69 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v69;
  v70 = *(_DWORD *)(v68[1] + 348);
  if (v70 != *(_DWORD *)(*v68 + 272))
  {
    v71 = *(_QWORD *)(v68[2] + 8);
    if ((v70 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v73 = v72;
    else
      v73 = v70 & 0xCFFFFFFF;
    if ((v73 & 0x40000000) != 0)
    {
      v74 = *(_QWORD **)v71;
      v75 = *v74;
      v76 = *(_DWORD *)(*v74 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v76);
      a4.f32[1] = (float)(a3.i32[1] / v76);
      a4.f32[2] = (float)(v69 / v76);
      v77 = (const float *)(*v74 + 1656);
      v482 = vld3_f32(v77);
      v78 = *(_QWORD *)(v74[1] + 144);
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      v80 = vaddq_f32(a4, v79);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v482.val[0], v80.f32[0]), v482.val[1], *(float32x2_t *)v80.f32, 1), v482.val[2], v80, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v69;
      v81 = vmulq_n_f32(vaddq_f32(a3, v79), *(float *)&v78);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v75 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v482.val[0], v81.f32[0]), v482.val[1], *(float32x2_t *)v81.f32, 1), v482.val[2], v81, 2);
    }
    else if (!(v73 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v71 + 16), *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v71 + 8) + 2448) + 520 * v73, *(_QWORD *)(*(_QWORD *)(v71 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v82 = *a1;
  v83 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  a4.i64[0] = 0x100000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000003);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v84 = *(_DWORD *)(v82[1] + 352);
  if (v84 != *(_DWORD *)(*v82 + 272))
  {
    v85 = *(_QWORD *)(v82[2] + 8);
    if ((v84 & 0x10000000) != 0)
      v86 = 0x40000000;
    else
      v86 = 0x80000000;
    if ((v84 & 0x20000000) != 0)
      v87 = v86;
    else
      v87 = v84 & 0xCFFFFFFF;
    if ((v87 & 0x40000000) != 0)
    {
      v88 = *(_QWORD **)v85;
      v89 = *v88;
      v90 = (const float *)(*v88 + 1656);
      v91 = *(_QWORD *)(v88[1] + 144);
      LODWORD(v88) = *(_DWORD *)(*v88 + 8);
      v92 = a3.i32[1];
      a5.f32[0] = (float)(v83 / (int)v88);
      a5.f32[1] = (float)(a3.i32[0] / (int)v88);
      a5.f32[2] = (float)(a3.i32[1] / (int)v88);
      v93.i64[0] = 0x3F0000003F000000;
      v93.i64[1] = 0x3F0000003F000000;
      v507 = vld3_f32(v90);
      v94 = vaddq_f32(a5, v93);
      *(int32x2_t *)v94.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v94.f32[0]), v507.val[1], *(float32x2_t *)v94.f32, 1), v507.val[2], v94, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v94.f32;
      v476 = 0;
      v94.i32[0] = v83;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v94.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v92;
      v95 = vmulq_n_f32(vaddq_f32(a3, v93), *(float *)&v91);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v89 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v95.f32[0]), v507.val[1], *(float32x2_t *)v95.f32, 1), v507.val[2], v95, 2);
    }
    else if (!(v87 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v85 + 16), *(_QWORD *)(*(_QWORD *)(v85 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v85 + 8) + 2448) + 520 * v87, *(_QWORD *)(*(_QWORD *)(v85 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v96 = *a1;
  a4.i64[0] = 0x300000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000001);
  *(_QWORD *)v474 = a3.i64[0];
  v97 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v97;
  v98 = *(_DWORD *)(v96[1] + 356);
  if (v98 != *(_DWORD *)(*v96 + 272))
  {
    v99 = *(_QWORD *)(v96[2] + 8);
    if ((v98 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v98 & 0x20000000) != 0)
      v101 = v100;
    else
      v101 = v98 & 0xCFFFFFFF;
    if ((v101 & 0x40000000) != 0)
    {
      v102 = *(_QWORD **)v99;
      v103 = *v102;
      v104 = *(_DWORD *)(*v102 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v104);
      a4.f32[1] = (float)(a3.i32[1] / v104);
      a4.f32[2] = (float)(v97 / v104);
      v105 = (const float *)(*v102 + 1656);
      v483 = vld3_f32(v105);
      v106 = *(_QWORD *)(v102[1] + 144);
      v107.i64[0] = 0x3F0000003F000000;
      v107.i64[1] = 0x3F0000003F000000;
      v108 = vaddq_f32(a4, v107);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v483.val[0], v108.f32[0]), v483.val[1], *(float32x2_t *)v108.f32, 1), v483.val[2], v108, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v97;
      v109 = vmulq_n_f32(vaddq_f32(a3, v107), *(float *)&v106);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v103 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v483.val[0], v109.f32[0]), v483.val[1], *(float32x2_t *)v109.f32, 1), v483.val[2], v109, 2);
    }
    else if (!(v101 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v99 + 16), *(_QWORD *)(*(_QWORD *)(v99 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v99 + 8) + 2448) + 520 * v101, *(_QWORD *)(*(_QWORD *)(v99 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v110 = *a1;
  a4.i64[0] = 0x300000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000002);
  *(_QWORD *)v474 = a3.i64[0];
  v111 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v111;
  v112 = *(_DWORD *)(v110[1] + 360);
  if (v112 != *(_DWORD *)(*v110 + 272))
  {
    v113 = *(_QWORD *)(v110[2] + 8);
    if ((v112 & 0x10000000) != 0)
      v114 = 0x40000000;
    else
      v114 = 0x80000000;
    if ((v112 & 0x20000000) != 0)
      v115 = v114;
    else
      v115 = v112 & 0xCFFFFFFF;
    if ((v115 & 0x40000000) != 0)
    {
      v116 = *(_QWORD **)v113;
      v117 = *v116;
      v118 = *(_DWORD *)(*v116 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v118);
      a4.f32[1] = (float)(a3.i32[1] / v118);
      a4.f32[2] = (float)(v111 / v118);
      v119 = (const float *)(*v116 + 1656);
      v484 = vld3_f32(v119);
      v120 = *(_QWORD *)(v116[1] + 144);
      v121.i64[0] = 0x3F0000003F000000;
      v121.i64[1] = 0x3F0000003F000000;
      v122 = vaddq_f32(a4, v121);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v484.val[0], v122.f32[0]), v484.val[1], *(float32x2_t *)v122.f32, 1), v484.val[2], v122, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v111;
      v123 = vmulq_n_f32(vaddq_f32(a3, v121), *(float *)&v120);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v117 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v484.val[0], v123.f32[0]), v484.val[1], *(float32x2_t *)v123.f32, 1), v484.val[2], v123, 2);
    }
    else if (!(v115 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v113 + 16), *(_QWORD *)(*(_QWORD *)(v113 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v113 + 8) + 2448) + 520 * v115, *(_QWORD *)(*(_QWORD *)(v113 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v124 = *a1;
  a4.i64[0] = 0x300000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000003);
  *(_QWORD *)v474 = a3.i64[0];
  v125 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v125;
  v126 = *(_DWORD *)(v124[1] + 364);
  if (v126 != *(_DWORD *)(*v124 + 272))
  {
    v127 = *(_QWORD *)(v124[2] + 8);
    if ((v126 & 0x10000000) != 0)
      v128 = 0x40000000;
    else
      v128 = 0x80000000;
    if ((v126 & 0x20000000) != 0)
      v129 = v128;
    else
      v129 = v126 & 0xCFFFFFFF;
    if ((v129 & 0x40000000) != 0)
    {
      v130 = *(_QWORD **)v127;
      v131 = *v130;
      v132 = *(_DWORD *)(*v130 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v132);
      a4.f32[1] = (float)(a3.i32[1] / v132);
      a4.f32[2] = (float)(v125 / v132);
      v133 = (const float *)(*v130 + 1656);
      v485 = vld3_f32(v133);
      v134 = *(_QWORD *)(v130[1] + 144);
      v135.i64[0] = 0x3F0000003F000000;
      v135.i64[1] = 0x3F0000003F000000;
      v136 = vaddq_f32(a4, v135);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v485.val[0], v136.f32[0]), v485.val[1], *(float32x2_t *)v136.f32, 1), v485.val[2], v136, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v125;
      v137 = vmulq_n_f32(vaddq_f32(a3, v135), *(float *)&v134);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v131 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v485.val[0], v137.f32[0]), v485.val[1], *(float32x2_t *)v137.f32, 1), v485.val[2], v137, 2);
    }
    else if (!(v129 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v127 + 16), *(_QWORD *)(*(_QWORD *)(v127 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v127 + 8) + 2448) + 520 * v129, *(_QWORD *)(*(_QWORD *)(v127 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v138 = *a1;
  a4.i64[0] = 0x300000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000004);
  *(_QWORD *)v474 = a3.i64[0];
  v139 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v139;
  v140 = *(_DWORD *)(v138[1] + 368);
  if (v140 != *(_DWORD *)(*v138 + 272))
  {
    v141 = *(_QWORD *)(v138[2] + 8);
    if ((v140 & 0x10000000) != 0)
      v142 = 0x40000000;
    else
      v142 = 0x80000000;
    if ((v140 & 0x20000000) != 0)
      v143 = v142;
    else
      v143 = v140 & 0xCFFFFFFF;
    if ((v143 & 0x40000000) != 0)
    {
      v144 = *(_QWORD **)v141;
      v145 = *v144;
      v146 = *(_DWORD *)(*v144 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v146);
      a4.f32[1] = (float)(a3.i32[1] / v146);
      a4.f32[2] = (float)(v139 / v146);
      v147 = (const float *)(*v144 + 1656);
      v486 = vld3_f32(v147);
      v148 = *(_QWORD *)(v144[1] + 144);
      v149.i64[0] = 0x3F0000003F000000;
      v149.i64[1] = 0x3F0000003F000000;
      v150 = vaddq_f32(a4, v149);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v486.val[0], v150.f32[0]), v486.val[1], *(float32x2_t *)v150.f32, 1), v486.val[2], v150, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v139;
      v151 = vmulq_n_f32(vaddq_f32(a3, v149), *(float *)&v148);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v145 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v486.val[0], v151.f32[0]), v486.val[1], *(float32x2_t *)v151.f32, 1), v486.val[2], v151, 2);
    }
    else if (!(v143 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v141 + 16), *(_QWORD *)(*(_QWORD *)(v141 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v141 + 8) + 2448) + 520 * v143, *(_QWORD *)(*(_QWORD *)(v141 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v152 = *a1;
  a4.i64[0] = 0x300000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000005);
  *(_QWORD *)v474 = a3.i64[0];
  v153 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v153;
  v154 = *(_DWORD *)(v152[1] + 372);
  if (v154 != *(_DWORD *)(*v152 + 272))
  {
    v155 = *(_QWORD *)(v152[2] + 8);
    if ((v154 & 0x10000000) != 0)
      v156 = 0x40000000;
    else
      v156 = 0x80000000;
    if ((v154 & 0x20000000) != 0)
      v157 = v156;
    else
      v157 = v154 & 0xCFFFFFFF;
    if ((v157 & 0x40000000) != 0)
    {
      v158 = *(_QWORD **)v155;
      v159 = *v158;
      v160 = *(_DWORD *)(*v158 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v160);
      a4.f32[1] = (float)(a3.i32[1] / v160);
      a4.f32[2] = (float)(v153 / v160);
      v161 = (const float *)(*v158 + 1656);
      v487 = vld3_f32(v161);
      v162 = *(_QWORD *)(v158[1] + 144);
      v163.i64[0] = 0x3F0000003F000000;
      v163.i64[1] = 0x3F0000003F000000;
      v164 = vaddq_f32(a4, v163);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v487.val[0], v164.f32[0]), v487.val[1], *(float32x2_t *)v164.f32, 1), v487.val[2], v164, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v153;
      v165 = vmulq_n_f32(vaddq_f32(a3, v163), *(float *)&v162);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v159 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v487.val[0], v165.f32[0]), v487.val[1], *(float32x2_t *)v165.f32, 1), v487.val[2], v165, 2);
    }
    else if (!(v157 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v155 + 16), *(_QWORD *)(*(_QWORD *)(v155 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v155 + 8) + 2448) + 520 * v157, *(_QWORD *)(*(_QWORD *)(v155 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v166 = *a1;
  a4.i64[0] = 0x300000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000006);
  *(_QWORD *)v474 = a3.i64[0];
  v167 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v167;
  v168 = *(_DWORD *)(v166[1] + 376);
  if (v168 != *(_DWORD *)(*v166 + 272))
  {
    v169 = *(_QWORD *)(v166[2] + 8);
    if ((v168 & 0x10000000) != 0)
      v170 = 0x40000000;
    else
      v170 = 0x80000000;
    if ((v168 & 0x20000000) != 0)
      v171 = v170;
    else
      v171 = v168 & 0xCFFFFFFF;
    if ((v171 & 0x40000000) != 0)
    {
      v172 = *(_QWORD **)v169;
      v173 = *v172;
      v174 = *(_DWORD *)(*v172 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v174);
      a4.f32[1] = (float)(a3.i32[1] / v174);
      a4.f32[2] = (float)(v167 / v174);
      v175 = (const float *)(*v172 + 1656);
      v488 = vld3_f32(v175);
      v176 = *(_QWORD *)(v172[1] + 144);
      v177.i64[0] = 0x3F0000003F000000;
      v177.i64[1] = 0x3F0000003F000000;
      v178 = vaddq_f32(a4, v177);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v488.val[0], v178.f32[0]), v488.val[1], *(float32x2_t *)v178.f32, 1), v488.val[2], v178, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v167;
      v179 = vmulq_n_f32(vaddq_f32(a3, v177), *(float *)&v176);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v173 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v488.val[0], v179.f32[0]), v488.val[1], *(float32x2_t *)v179.f32, 1), v488.val[2], v179, 2);
    }
    else if (!(v171 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v169 + 16), *(_QWORD *)(*(_QWORD *)(v169 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v169 + 8) + 2448) + 520 * v171, *(_QWORD *)(*(_QWORD *)(v169 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v180 = *a1;
  a4.i64[0] = 0x300000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000007);
  *(_QWORD *)v474 = a3.i64[0];
  v181 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v181;
  v182 = *(_DWORD *)(v180[1] + 380);
  if (v182 != *(_DWORD *)(*v180 + 272))
  {
    v183 = *(_QWORD *)(v180[2] + 8);
    if ((v182 & 0x10000000) != 0)
      v184 = 0x40000000;
    else
      v184 = 0x80000000;
    if ((v182 & 0x20000000) != 0)
      v185 = v184;
    else
      v185 = v182 & 0xCFFFFFFF;
    if ((v185 & 0x40000000) != 0)
    {
      v186 = *(_QWORD **)v183;
      v187 = *v186;
      v188 = *(_DWORD *)(*v186 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v188);
      a4.f32[1] = (float)(a3.i32[1] / v188);
      a4.f32[2] = (float)(v181 / v188);
      v189 = (const float *)(*v186 + 1656);
      v489 = vld3_f32(v189);
      v190 = *(_QWORD *)(v186[1] + 144);
      v191.i64[0] = 0x3F0000003F000000;
      v191.i64[1] = 0x3F0000003F000000;
      v192 = vaddq_f32(a4, v191);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v489.val[0], v192.f32[0]), v489.val[1], *(float32x2_t *)v192.f32, 1), v489.val[2], v192, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v181;
      v193 = vmulq_n_f32(vaddq_f32(a3, v191), *(float *)&v190);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v187 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v489.val[0], v193.f32[0]), v489.val[1], *(float32x2_t *)v193.f32, 1), v489.val[2], v193, 2);
    }
    else if (!(v185 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v183 + 16), *(_QWORD *)(*(_QWORD *)(v183 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v183 + 8) + 2448) + 520 * v185, *(_QWORD *)(*(_QWORD *)(v183 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v194 = *a1;
  v195 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  a4.i64[0] = 0x100000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000004);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v196 = *(_DWORD *)(v194[1] + 384);
  if (v196 != *(_DWORD *)(*v194 + 272))
  {
    v197 = *(_QWORD *)(v194[2] + 8);
    if ((v196 & 0x10000000) != 0)
      v198 = 0x40000000;
    else
      v198 = 0x80000000;
    if ((v196 & 0x20000000) != 0)
      v199 = v198;
    else
      v199 = v196 & 0xCFFFFFFF;
    if ((v199 & 0x40000000) != 0)
    {
      v200 = *(_QWORD **)v197;
      v201 = *v200;
      v202 = (const float *)(*v200 + 1656);
      v203 = *(_QWORD *)(v200[1] + 144);
      LODWORD(v200) = *(_DWORD *)(*v200 + 8);
      v204 = a3.i32[1];
      a5.f32[0] = (float)(v195 / (int)v200);
      a5.f32[1] = (float)(a3.i32[0] / (int)v200);
      a5.f32[2] = (float)(a3.i32[1] / (int)v200);
      v205.i64[0] = 0x3F0000003F000000;
      v205.i64[1] = 0x3F0000003F000000;
      v508 = vld3_f32(v202);
      v206 = vaddq_f32(a5, v205);
      *(int32x2_t *)v206.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v206.f32[0]), v508.val[1], *(float32x2_t *)v206.f32, 1), v508.val[2], v206, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v206.f32;
      v476 = 0;
      v206.i32[0] = v195;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v206.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v204;
      v207 = vmulq_n_f32(vaddq_f32(a3, v205), *(float *)&v203);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v201 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v207.f32[0]), v508.val[1], *(float32x2_t *)v207.f32, 1), v508.val[2], v207, 2);
    }
    else if (!(v199 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v197 + 16), *(_QWORD *)(*(_QWORD *)(v197 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v197 + 8) + 2448) + 520 * v199, *(_QWORD *)(*(_QWORD *)(v197 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v208 = *a1;
  a4.i64[0] = 0x400000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000001);
  *(_QWORD *)v474 = a3.i64[0];
  v209 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v209;
  v210 = *(_DWORD *)(v208[1] + 388);
  if (v210 != *(_DWORD *)(*v208 + 272))
  {
    v211 = *(_QWORD *)(v208[2] + 8);
    if ((v210 & 0x10000000) != 0)
      v212 = 0x40000000;
    else
      v212 = 0x80000000;
    if ((v210 & 0x20000000) != 0)
      v213 = v212;
    else
      v213 = v210 & 0xCFFFFFFF;
    if ((v213 & 0x40000000) != 0)
    {
      v214 = *(_QWORD **)v211;
      v215 = *v214;
      v216 = *(_DWORD *)(*v214 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v216);
      a4.f32[1] = (float)(a3.i32[1] / v216);
      a4.f32[2] = (float)(v209 / v216);
      v217 = (const float *)(*v214 + 1656);
      v490 = vld3_f32(v217);
      v218 = *(_QWORD *)(v214[1] + 144);
      v219.i64[0] = 0x3F0000003F000000;
      v219.i64[1] = 0x3F0000003F000000;
      v220 = vaddq_f32(a4, v219);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v490.val[0], v220.f32[0]), v490.val[1], *(float32x2_t *)v220.f32, 1), v490.val[2], v220, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v209;
      v221 = vmulq_n_f32(vaddq_f32(a3, v219), *(float *)&v218);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v215 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v490.val[0], v221.f32[0]), v490.val[1], *(float32x2_t *)v221.f32, 1), v490.val[2], v221, 2);
    }
    else if (!(v213 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v211 + 16), *(_QWORD *)(*(_QWORD *)(v211 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v211 + 8) + 2448) + 520 * v213, *(_QWORD *)(*(_QWORD *)(v211 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v222 = *a1;
  a4.i64[0] = 0x400000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000002);
  *(_QWORD *)v474 = a3.i64[0];
  v223 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v223;
  v224 = *(_DWORD *)(v222[1] + 392);
  if (v224 != *(_DWORD *)(*v222 + 272))
  {
    v225 = *(_QWORD *)(v222[2] + 8);
    if ((v224 & 0x10000000) != 0)
      v226 = 0x40000000;
    else
      v226 = 0x80000000;
    if ((v224 & 0x20000000) != 0)
      v227 = v226;
    else
      v227 = v224 & 0xCFFFFFFF;
    if ((v227 & 0x40000000) != 0)
    {
      v228 = *(_QWORD **)v225;
      v229 = *v228;
      v230 = *(_DWORD *)(*v228 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v230);
      a4.f32[1] = (float)(a3.i32[1] / v230);
      a4.f32[2] = (float)(v223 / v230);
      v231 = (const float *)(*v228 + 1656);
      v491 = vld3_f32(v231);
      v232 = *(_QWORD *)(v228[1] + 144);
      v233.i64[0] = 0x3F0000003F000000;
      v233.i64[1] = 0x3F0000003F000000;
      v234 = vaddq_f32(a4, v233);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v491.val[0], v234.f32[0]), v491.val[1], *(float32x2_t *)v234.f32, 1), v491.val[2], v234, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v223;
      v235 = vmulq_n_f32(vaddq_f32(a3, v233), *(float *)&v232);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v229 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v491.val[0], v235.f32[0]), v491.val[1], *(float32x2_t *)v235.f32, 1), v491.val[2], v235, 2);
    }
    else if (!(v227 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v225 + 16), *(_QWORD *)(*(_QWORD *)(v225 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v225 + 8) + 2448) + 520 * v227, *(_QWORD *)(*(_QWORD *)(v225 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v236 = *a1;
  a4.i64[0] = 0x400000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000003);
  *(_QWORD *)v474 = a3.i64[0];
  v237 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v237;
  v238 = *(_DWORD *)(v236[1] + 396);
  if (v238 != *(_DWORD *)(*v236 + 272))
  {
    v239 = *(_QWORD *)(v236[2] + 8);
    if ((v238 & 0x10000000) != 0)
      v240 = 0x40000000;
    else
      v240 = 0x80000000;
    if ((v238 & 0x20000000) != 0)
      v241 = v240;
    else
      v241 = v238 & 0xCFFFFFFF;
    if ((v241 & 0x40000000) != 0)
    {
      v242 = *(_QWORD **)v239;
      v243 = *v242;
      v244 = *(_DWORD *)(*v242 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v244);
      a4.f32[1] = (float)(a3.i32[1] / v244);
      a4.f32[2] = (float)(v237 / v244);
      v245 = (const float *)(*v242 + 1656);
      v492 = vld3_f32(v245);
      v246 = *(_QWORD *)(v242[1] + 144);
      v247.i64[0] = 0x3F0000003F000000;
      v247.i64[1] = 0x3F0000003F000000;
      v248 = vaddq_f32(a4, v247);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v248.f32[0]), v492.val[1], *(float32x2_t *)v248.f32, 1), v492.val[2], v248, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v237;
      v249 = vmulq_n_f32(vaddq_f32(a3, v247), *(float *)&v246);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v243 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v249.f32[0]), v492.val[1], *(float32x2_t *)v249.f32, 1), v492.val[2], v249, 2);
    }
    else if (!(v241 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v239 + 16), *(_QWORD *)(*(_QWORD *)(v239 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v239 + 8) + 2448) + 520 * v241, *(_QWORD *)(*(_QWORD *)(v239 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v250 = *a1;
  a4.i64[0] = 0x400000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000004);
  *(_QWORD *)v474 = a3.i64[0];
  v251 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v251;
  v252 = *(_DWORD *)(v250[1] + 400);
  if (v252 != *(_DWORD *)(*v250 + 272))
  {
    v253 = *(_QWORD *)(v250[2] + 8);
    if ((v252 & 0x10000000) != 0)
      v254 = 0x40000000;
    else
      v254 = 0x80000000;
    if ((v252 & 0x20000000) != 0)
      v255 = v254;
    else
      v255 = v252 & 0xCFFFFFFF;
    if ((v255 & 0x40000000) != 0)
    {
      v256 = *(_QWORD **)v253;
      v257 = *v256;
      v258 = *(_DWORD *)(*v256 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v258);
      a4.f32[1] = (float)(a3.i32[1] / v258);
      a4.f32[2] = (float)(v251 / v258);
      v259 = (const float *)(*v256 + 1656);
      v493 = vld3_f32(v259);
      v260 = *(_QWORD *)(v256[1] + 144);
      v261.i64[0] = 0x3F0000003F000000;
      v261.i64[1] = 0x3F0000003F000000;
      v262 = vaddq_f32(a4, v261);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v262.f32[0]), v493.val[1], *(float32x2_t *)v262.f32, 1), v493.val[2], v262, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v251;
      v263 = vmulq_n_f32(vaddq_f32(a3, v261), *(float *)&v260);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v257 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v263.f32[0]), v493.val[1], *(float32x2_t *)v263.f32, 1), v493.val[2], v263, 2);
    }
    else if (!(v255 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v253 + 16), *(_QWORD *)(*(_QWORD *)(v253 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v253 + 8) + 2448) + 520 * v255, *(_QWORD *)(*(_QWORD *)(v253 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v264 = *a1;
  a4.i64[0] = 0x400000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000005);
  *(_QWORD *)v474 = a3.i64[0];
  v265 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v265;
  v266 = *(_DWORD *)(v264[1] + 404);
  if (v266 != *(_DWORD *)(*v264 + 272))
  {
    v267 = *(_QWORD *)(v264[2] + 8);
    if ((v266 & 0x10000000) != 0)
      v268 = 0x40000000;
    else
      v268 = 0x80000000;
    if ((v266 & 0x20000000) != 0)
      v269 = v268;
    else
      v269 = v266 & 0xCFFFFFFF;
    if ((v269 & 0x40000000) != 0)
    {
      v270 = *(_QWORD **)v267;
      v271 = *v270;
      v272 = *(_DWORD *)(*v270 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v272);
      a4.f32[1] = (float)(a3.i32[1] / v272);
      a4.f32[2] = (float)(v265 / v272);
      v273 = (const float *)(*v270 + 1656);
      v494 = vld3_f32(v273);
      v274 = *(_QWORD *)(v270[1] + 144);
      v275.i64[0] = 0x3F0000003F000000;
      v275.i64[1] = 0x3F0000003F000000;
      v276 = vaddq_f32(a4, v275);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v276.f32[0]), v494.val[1], *(float32x2_t *)v276.f32, 1), v494.val[2], v276, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v265;
      v277 = vmulq_n_f32(vaddq_f32(a3, v275), *(float *)&v274);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v271 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v277.f32[0]), v494.val[1], *(float32x2_t *)v277.f32, 1), v494.val[2], v277, 2);
    }
    else if (!(v269 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v267 + 16), *(_QWORD *)(*(_QWORD *)(v267 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v267 + 8) + 2448) + 520 * v269, *(_QWORD *)(*(_QWORD *)(v267 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v278 = *a1;
  a4.i64[0] = 0x400000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000006);
  *(_QWORD *)v474 = a3.i64[0];
  v279 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v279;
  v280 = *(_DWORD *)(v278[1] + 408);
  if (v280 != *(_DWORD *)(*v278 + 272))
  {
    v281 = *(_QWORD *)(v278[2] + 8);
    if ((v280 & 0x10000000) != 0)
      v282 = 0x40000000;
    else
      v282 = 0x80000000;
    if ((v280 & 0x20000000) != 0)
      v283 = v282;
    else
      v283 = v280 & 0xCFFFFFFF;
    if ((v283 & 0x40000000) != 0)
    {
      v284 = *(_QWORD **)v281;
      v285 = *v284;
      v286 = *(_DWORD *)(*v284 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v286);
      a4.f32[1] = (float)(a3.i32[1] / v286);
      a4.f32[2] = (float)(v279 / v286);
      v287 = (const float *)(*v284 + 1656);
      v495 = vld3_f32(v287);
      v288 = *(_QWORD *)(v284[1] + 144);
      v289.i64[0] = 0x3F0000003F000000;
      v289.i64[1] = 0x3F0000003F000000;
      v290 = vaddq_f32(a4, v289);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v290.f32[0]), v495.val[1], *(float32x2_t *)v290.f32, 1), v495.val[2], v290, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v279;
      v291 = vmulq_n_f32(vaddq_f32(a3, v289), *(float *)&v288);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v285 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v291.f32[0]), v495.val[1], *(float32x2_t *)v291.f32, 1), v495.val[2], v291, 2);
    }
    else if (!(v283 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v281 + 16), *(_QWORD *)(*(_QWORD *)(v281 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v281 + 8) + 2448) + 520 * v283, *(_QWORD *)(*(_QWORD *)(v281 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v292 = *a1;
  a4.i64[0] = 0x400000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000007);
  *(_QWORD *)v474 = a3.i64[0];
  v293 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v293;
  v294 = *(_DWORD *)(v292[1] + 412);
  if (v294 != *(_DWORD *)(*v292 + 272))
  {
    v295 = *(_QWORD *)(v292[2] + 8);
    if ((v294 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v294 & 0x20000000) != 0)
      v297 = v296;
    else
      v297 = v294 & 0xCFFFFFFF;
    if ((v297 & 0x40000000) != 0)
    {
      v298 = *(_QWORD **)v295;
      v299 = *v298;
      v300 = *(_DWORD *)(*v298 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v300);
      a4.f32[1] = (float)(a3.i32[1] / v300);
      a4.f32[2] = (float)(v293 / v300);
      v301 = (const float *)(*v298 + 1656);
      v496 = vld3_f32(v301);
      v302 = *(_QWORD *)(v298[1] + 144);
      v303.i64[0] = 0x3F0000003F000000;
      v303.i64[1] = 0x3F0000003F000000;
      v304 = vaddq_f32(a4, v303);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v304.f32[0]), v496.val[1], *(float32x2_t *)v304.f32, 1), v496.val[2], v304, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v293;
      v305 = vmulq_n_f32(vaddq_f32(a3, v303), *(float *)&v302);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v299 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v305.f32[0]), v496.val[1], *(float32x2_t *)v305.f32, 1), v496.val[2], v305, 2);
    }
    else if (!(v297 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v295 + 16), *(_QWORD *)(*(_QWORD *)(v295 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v295 + 8) + 2448) + 520 * v297, *(_QWORD *)(*(_QWORD *)(v295 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v306 = *a1;
  v307 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  a4.i64[0] = 0x100000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000005);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v308 = *(_DWORD *)(v306[1] + 416);
  if (v308 != *(_DWORD *)(*v306 + 272))
  {
    v309 = *(_QWORD *)(v306[2] + 8);
    if ((v308 & 0x10000000) != 0)
      v310 = 0x40000000;
    else
      v310 = 0x80000000;
    if ((v308 & 0x20000000) != 0)
      v311 = v310;
    else
      v311 = v308 & 0xCFFFFFFF;
    if ((v311 & 0x40000000) != 0)
    {
      v312 = *(_QWORD **)v309;
      v313 = *v312;
      v314 = (const float *)(*v312 + 1656);
      v315 = *(_QWORD *)(v312[1] + 144);
      LODWORD(v312) = *(_DWORD *)(*v312 + 8);
      v316 = a3.i32[1];
      a5.f32[0] = (float)(v307 / (int)v312);
      a5.f32[1] = (float)(a3.i32[0] / (int)v312);
      a5.f32[2] = (float)(a3.i32[1] / (int)v312);
      v317.i64[0] = 0x3F0000003F000000;
      v317.i64[1] = 0x3F0000003F000000;
      v509 = vld3_f32(v314);
      v318 = vaddq_f32(a5, v317);
      *(int32x2_t *)v318.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v318.f32[0]), v509.val[1], *(float32x2_t *)v318.f32, 1), v509.val[2], v318, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v318.f32;
      v476 = 0;
      v318.i32[0] = v307;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v318.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v316;
      v319 = vmulq_n_f32(vaddq_f32(a3, v317), *(float *)&v315);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v313 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v319.f32[0]), v509.val[1], *(float32x2_t *)v319.f32, 1), v509.val[2], v319, 2);
    }
    else if (!(v311 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v309 + 16), *(_QWORD *)(*(_QWORD *)(v309 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v309 + 8) + 2448) + 520 * v311, *(_QWORD *)(*(_QWORD *)(v309 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v320 = *a1;
  a4.i64[0] = 0x500000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000001);
  *(_QWORD *)v474 = a3.i64[0];
  v321 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v321;
  v322 = *(_DWORD *)(v320[1] + 420);
  if (v322 != *(_DWORD *)(*v320 + 272))
  {
    v323 = *(_QWORD *)(v320[2] + 8);
    if ((v322 & 0x10000000) != 0)
      v324 = 0x40000000;
    else
      v324 = 0x80000000;
    if ((v322 & 0x20000000) != 0)
      v325 = v324;
    else
      v325 = v322 & 0xCFFFFFFF;
    if ((v325 & 0x40000000) != 0)
    {
      v326 = *(_QWORD **)v323;
      v327 = *v326;
      v328 = *(_DWORD *)(*v326 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v328);
      a4.f32[1] = (float)(a3.i32[1] / v328);
      a4.f32[2] = (float)(v321 / v328);
      v329 = (const float *)(*v326 + 1656);
      v497 = vld3_f32(v329);
      v330 = *(_QWORD *)(v326[1] + 144);
      v331.i64[0] = 0x3F0000003F000000;
      v331.i64[1] = 0x3F0000003F000000;
      v332 = vaddq_f32(a4, v331);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v332.f32[0]), v497.val[1], *(float32x2_t *)v332.f32, 1), v497.val[2], v332, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v321;
      v333 = vmulq_n_f32(vaddq_f32(a3, v331), *(float *)&v330);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v327 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v333.f32[0]), v497.val[1], *(float32x2_t *)v333.f32, 1), v497.val[2], v333, 2);
    }
    else if (!(v325 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v323 + 16), *(_QWORD *)(*(_QWORD *)(v323 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v323 + 8) + 2448) + 520 * v325, *(_QWORD *)(*(_QWORD *)(v323 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v334 = *a1;
  a4.i64[0] = 0x500000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000002);
  *(_QWORD *)v474 = a3.i64[0];
  v335 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v335;
  v336 = *(_DWORD *)(v334[1] + 424);
  if (v336 != *(_DWORD *)(*v334 + 272))
  {
    v337 = *(_QWORD *)(v334[2] + 8);
    if ((v336 & 0x10000000) != 0)
      v338 = 0x40000000;
    else
      v338 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v339 = v338;
    else
      v339 = v336 & 0xCFFFFFFF;
    if ((v339 & 0x40000000) != 0)
    {
      v340 = *(_QWORD **)v337;
      v341 = *v340;
      v342 = *(_DWORD *)(*v340 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v342);
      a4.f32[1] = (float)(a3.i32[1] / v342);
      a4.f32[2] = (float)(v335 / v342);
      v343 = (const float *)(*v340 + 1656);
      v498 = vld3_f32(v343);
      v344 = *(_QWORD *)(v340[1] + 144);
      v345.i64[0] = 0x3F0000003F000000;
      v345.i64[1] = 0x3F0000003F000000;
      v346 = vaddq_f32(a4, v345);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v346.f32[0]), v498.val[1], *(float32x2_t *)v346.f32, 1), v498.val[2], v346, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v335;
      v347 = vmulq_n_f32(vaddq_f32(a3, v345), *(float *)&v344);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v341 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v347.f32[0]), v498.val[1], *(float32x2_t *)v347.f32, 1), v498.val[2], v347, 2);
    }
    else if (!(v339 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v337 + 16), *(_QWORD *)(*(_QWORD *)(v337 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v337 + 8) + 2448) + 520 * v339, *(_QWORD *)(*(_QWORD *)(v337 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v348 = *a1;
  a4.i64[0] = 0x500000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000003);
  *(_QWORD *)v474 = a3.i64[0];
  v349 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v349;
  v350 = *(_DWORD *)(v348[1] + 428);
  if (v350 != *(_DWORD *)(*v348 + 272))
  {
    v351 = *(_QWORD *)(v348[2] + 8);
    if ((v350 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v350 & 0x20000000) != 0)
      v353 = v352;
    else
      v353 = v350 & 0xCFFFFFFF;
    if ((v353 & 0x40000000) != 0)
    {
      v354 = *(_QWORD **)v351;
      v355 = *v354;
      v356 = *(_DWORD *)(*v354 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v356);
      a4.f32[1] = (float)(a3.i32[1] / v356);
      a4.f32[2] = (float)(v349 / v356);
      v357 = (const float *)(*v354 + 1656);
      v499 = vld3_f32(v357);
      v358 = *(_QWORD *)(v354[1] + 144);
      v359.i64[0] = 0x3F0000003F000000;
      v359.i64[1] = 0x3F0000003F000000;
      v360 = vaddq_f32(a4, v359);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v360.f32[0]), v499.val[1], *(float32x2_t *)v360.f32, 1), v499.val[2], v360, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v349;
      v361 = vmulq_n_f32(vaddq_f32(a3, v359), *(float *)&v358);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v355 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v361.f32[0]), v499.val[1], *(float32x2_t *)v361.f32, 1), v499.val[2], v361, 2);
    }
    else if (!(v353 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v351 + 16), *(_QWORD *)(*(_QWORD *)(v351 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v351 + 8) + 2448) + 520 * v353, *(_QWORD *)(*(_QWORD *)(v351 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v362 = *a1;
  a4.i64[0] = 0x500000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000004);
  *(_QWORD *)v474 = a3.i64[0];
  v363 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v363;
  v364 = *(_DWORD *)(v362[1] + 432);
  if (v364 != *(_DWORD *)(*v362 + 272))
  {
    v365 = *(_QWORD *)(v362[2] + 8);
    if ((v364 & 0x10000000) != 0)
      v366 = 0x40000000;
    else
      v366 = 0x80000000;
    if ((v364 & 0x20000000) != 0)
      v367 = v366;
    else
      v367 = v364 & 0xCFFFFFFF;
    if ((v367 & 0x40000000) != 0)
    {
      v368 = *(_QWORD **)v365;
      v369 = *v368;
      v370 = *(_DWORD *)(*v368 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v370);
      a4.f32[1] = (float)(a3.i32[1] / v370);
      a4.f32[2] = (float)(v363 / v370);
      v371 = (const float *)(*v368 + 1656);
      v500 = vld3_f32(v371);
      v372 = *(_QWORD *)(v368[1] + 144);
      v373.i64[0] = 0x3F0000003F000000;
      v373.i64[1] = 0x3F0000003F000000;
      v374 = vaddq_f32(a4, v373);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v374.f32[0]), v500.val[1], *(float32x2_t *)v374.f32, 1), v500.val[2], v374, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v363;
      v375 = vmulq_n_f32(vaddq_f32(a3, v373), *(float *)&v372);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v369 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v375.f32[0]), v500.val[1], *(float32x2_t *)v375.f32, 1), v500.val[2], v375, 2);
    }
    else if (!(v367 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v365 + 16), *(_QWORD *)(*(_QWORD *)(v365 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v365 + 8) + 2448) + 520 * v367, *(_QWORD *)(*(_QWORD *)(v365 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v376 = *a1;
  a4.i64[0] = 0x500000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000005);
  *(_QWORD *)v474 = a3.i64[0];
  v377 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v377;
  v378 = *(_DWORD *)(v376[1] + 436);
  if (v378 != *(_DWORD *)(*v376 + 272))
  {
    v379 = *(_QWORD *)(v376[2] + 8);
    if ((v378 & 0x10000000) != 0)
      v380 = 0x40000000;
    else
      v380 = 0x80000000;
    if ((v378 & 0x20000000) != 0)
      v381 = v380;
    else
      v381 = v378 & 0xCFFFFFFF;
    if ((v381 & 0x40000000) != 0)
    {
      v382 = *(_QWORD **)v379;
      v383 = *v382;
      v384 = *(_DWORD *)(*v382 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v384);
      a4.f32[1] = (float)(a3.i32[1] / v384);
      a4.f32[2] = (float)(v377 / v384);
      v385 = (const float *)(*v382 + 1656);
      v501 = vld3_f32(v385);
      v386 = *(_QWORD *)(v382[1] + 144);
      v387.i64[0] = 0x3F0000003F000000;
      v387.i64[1] = 0x3F0000003F000000;
      v388 = vaddq_f32(a4, v387);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v388.f32[0]), v501.val[1], *(float32x2_t *)v388.f32, 1), v501.val[2], v388, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v377;
      v389 = vmulq_n_f32(vaddq_f32(a3, v387), *(float *)&v386);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v383 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v389.f32[0]), v501.val[1], *(float32x2_t *)v389.f32, 1), v501.val[2], v389, 2);
    }
    else if (!(v381 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v379 + 16), *(_QWORD *)(*(_QWORD *)(v379 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v379 + 8) + 2448) + 520 * v381, *(_QWORD *)(*(_QWORD *)(v379 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v390 = *a1;
  a4.i64[0] = 0x500000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000006);
  *(_QWORD *)v474 = a3.i64[0];
  v391 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v391;
  v392 = *(_DWORD *)(v390[1] + 440);
  if (v392 != *(_DWORD *)(*v390 + 272))
  {
    v393 = *(_QWORD *)(v390[2] + 8);
    if ((v392 & 0x10000000) != 0)
      v394 = 0x40000000;
    else
      v394 = 0x80000000;
    if ((v392 & 0x20000000) != 0)
      v395 = v394;
    else
      v395 = v392 & 0xCFFFFFFF;
    if ((v395 & 0x40000000) != 0)
    {
      v396 = *(_QWORD **)v393;
      v397 = *v396;
      v398 = *(_DWORD *)(*v396 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v398);
      a4.f32[1] = (float)(a3.i32[1] / v398);
      a4.f32[2] = (float)(v391 / v398);
      v399 = (const float *)(*v396 + 1656);
      v502 = vld3_f32(v399);
      v400 = *(_QWORD *)(v396[1] + 144);
      v401.i64[0] = 0x3F0000003F000000;
      v401.i64[1] = 0x3F0000003F000000;
      v402 = vaddq_f32(a4, v401);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v402.f32[0]), v502.val[1], *(float32x2_t *)v402.f32, 1), v502.val[2], v402, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v391;
      v403 = vmulq_n_f32(vaddq_f32(a3, v401), *(float *)&v400);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v397 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v403.f32[0]), v502.val[1], *(float32x2_t *)v403.f32, 1), v502.val[2], v403, 2);
    }
    else if (!(v395 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v393 + 16), *(_QWORD *)(*(_QWORD *)(v393 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v393 + 8) + 2448) + 520 * v395, *(_QWORD *)(*(_QWORD *)(v393 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v404 = *a1;
  a4.i64[0] = 0x500000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000007);
  *(_QWORD *)v474 = a3.i64[0];
  v405 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v405;
  v406 = *(_DWORD *)(v404[1] + 444);
  if (v406 != *(_DWORD *)(*v404 + 272))
  {
    v407 = *(_QWORD *)(v404[2] + 8);
    if ((v406 & 0x10000000) != 0)
      v408 = 0x40000000;
    else
      v408 = 0x80000000;
    if ((v406 & 0x20000000) != 0)
      v409 = v408;
    else
      v409 = v406 & 0xCFFFFFFF;
    if ((v409 & 0x40000000) != 0)
    {
      v410 = *(_QWORD **)v407;
      v411 = *v410;
      v412 = *(_DWORD *)(*v410 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v412);
      a4.f32[1] = (float)(a3.i32[1] / v412);
      a4.f32[2] = (float)(v405 / v412);
      v413 = (const float *)(*v410 + 1656);
      v503 = vld3_f32(v413);
      v414 = *(_QWORD *)(v410[1] + 144);
      v415.i64[0] = 0x3F0000003F000000;
      v415.i64[1] = 0x3F0000003F000000;
      v416 = vaddq_f32(a4, v415);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v416.f32[0]), v503.val[1], *(float32x2_t *)v416.f32, 1), v503.val[2], v416, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v405;
      v417 = vmulq_n_f32(vaddq_f32(a3, v415), *(float *)&v414);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v411 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v417.f32[0]), v503.val[1], *(float32x2_t *)v417.f32, 1), v503.val[2], v417, 2);
    }
    else if (!(v409 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v407 + 16), *(_QWORD *)(*(_QWORD *)(v407 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v407 + 8) + 2448) + 520 * v409, *(_QWORD *)(*(_QWORD *)(v407 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v418 = *a1;
  v419 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  a4.i64[0] = 0x100000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000006);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v420 = *(_DWORD *)(v418[1] + 448);
  if (v420 != *(_DWORD *)(*v418 + 272))
  {
    v421 = *(_QWORD *)(v418[2] + 8);
    if ((v420 & 0x10000000) != 0)
      v422 = 0x40000000;
    else
      v422 = 0x80000000;
    if ((v420 & 0x20000000) != 0)
      v423 = v422;
    else
      v423 = v420 & 0xCFFFFFFF;
    if ((v423 & 0x40000000) != 0)
    {
      v424 = *(_QWORD **)v421;
      v425 = *v424;
      v426 = (const float *)(*v424 + 1656);
      v427 = *(_QWORD *)(v424[1] + 144);
      LODWORD(v424) = *(_DWORD *)(*v424 + 8);
      v428 = a3.i32[1];
      a5.f32[0] = (float)(v419 / (int)v424);
      a5.f32[1] = (float)(a3.i32[0] / (int)v424);
      a5.f32[2] = (float)(a3.i32[1] / (int)v424);
      v429.i64[0] = 0x3F0000003F000000;
      v429.i64[1] = 0x3F0000003F000000;
      v510 = vld3_f32(v426);
      v430 = vaddq_f32(a5, v429);
      *(int32x2_t *)v430.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v430.f32[0]), v510.val[1], *(float32x2_t *)v430.f32, 1), v510.val[2], v430, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v430.f32;
      v476 = 0;
      v430.i32[0] = v419;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v430.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v428;
      v431 = vmulq_n_f32(vaddq_f32(a3, v429), *(float *)&v427);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v425 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v431.f32[0]), v510.val[1], *(float32x2_t *)v431.f32, 1), v510.val[2], v431, 2);
    }
    else if (!(v423 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v421 + 16), *(_QWORD *)(*(_QWORD *)(v421 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v421 + 8) + 2448) + 520 * v423, *(_QWORD *)(*(_QWORD *)(v421 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v432 = *a1;
  a4.i64[0] = 0x600000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_QWORD *)v474 = a3.i64[0];
  v433 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v433;
  v434 = *(_DWORD *)(v432[1] + 452);
  if (v434 != *(_DWORD *)(*v432 + 272))
  {
    v435 = *(_QWORD *)(v432[2] + 8);
    if ((v434 & 0x10000000) != 0)
      v436 = 0x40000000;
    else
      v436 = 0x80000000;
    if ((v434 & 0x20000000) != 0)
      v437 = v436;
    else
      v437 = v434 & 0xCFFFFFFF;
    if ((v437 & 0x40000000) != 0)
    {
      v438 = *(_QWORD **)v435;
      v439 = *v438;
      v440 = *(_DWORD *)(*v438 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v440);
      a4.f32[1] = (float)(a3.i32[1] / v440);
      a4.f32[2] = (float)(v433 / v440);
      v441 = (const float *)(*v438 + 1656);
      v504 = vld3_f32(v441);
      v442 = *(_QWORD *)(v438[1] + 144);
      v443.i64[0] = 0x3F0000003F000000;
      v443.i64[1] = 0x3F0000003F000000;
      v444 = vaddq_f32(a4, v443);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v444.f32[0]), v504.val[1], *(float32x2_t *)v444.f32, 1), v504.val[2], v444, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v433;
      v445 = vmulq_n_f32(vaddq_f32(a3, v443), *(float *)&v442);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v439 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v445.f32[0]), v504.val[1], *(float32x2_t *)v445.f32, 1), v504.val[2], v445, 2);
    }
    else if (!(v437 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v435 + 16), *(_QWORD *)(*(_QWORD *)(v435 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v435 + 8) + 2448) + 520 * v437, *(_QWORD *)(*(_QWORD *)(v435 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v446 = *a1;
  a4.i64[0] = 0x600000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_QWORD *)v474 = a3.i64[0];
  v447 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v447;
  v448 = *(_DWORD *)(v446[1] + 456);
  if (v448 != *(_DWORD *)(*v446 + 272))
  {
    v449 = *(_QWORD *)(v446[2] + 8);
    if ((v448 & 0x10000000) != 0)
      v450 = 0x40000000;
    else
      v450 = 0x80000000;
    if ((v448 & 0x20000000) != 0)
      v451 = v450;
    else
      v451 = v448 & 0xCFFFFFFF;
    if ((v451 & 0x40000000) != 0)
    {
      v452 = *(_QWORD **)v449;
      v453 = *v452;
      v454 = *(_DWORD *)(*v452 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v454);
      a4.f32[1] = (float)(a3.i32[1] / v454);
      a4.f32[2] = (float)(v447 / v454);
      v455 = (const float *)(*v452 + 1656);
      v505 = vld3_f32(v455);
      v456 = *(_QWORD *)(v452[1] + 144);
      v457.i64[0] = 0x3F0000003F000000;
      v457.i64[1] = 0x3F0000003F000000;
      v458 = vaddq_f32(a4, v457);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v458.f32[0]), v505.val[1], *(float32x2_t *)v458.f32, 1), v505.val[2], v458, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v447;
      v459 = vmulq_n_f32(vaddq_f32(a3, v457), *(float *)&v456);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v453 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v459.f32[0]), v505.val[1], *(float32x2_t *)v459.f32, 1), v505.val[2], v459, 2);
    }
    else if (!(v451 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v449 + 16), *(_QWORD *)(*(_QWORD *)(v449 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v449 + 8) + 2448) + 520 * v451, *(_QWORD *)(*(_QWORD *)(v449 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v460 = *a1;
  a4.i64[0] = 0x600000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_QWORD *)v474 = a3.i64[0];
  v461 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v474[8] = v461;
  v462 = *(_DWORD *)(v460[1] + 460);
  if (v462 != *(_DWORD *)(*v460 + 272))
  {
    v463 = *(_QWORD *)(v460[2] + 8);
    if ((v462 & 0x10000000) != 0)
      v464 = 0x40000000;
    else
      v464 = 0x80000000;
    if ((v462 & 0x20000000) != 0)
      v465 = v464;
    else
      v465 = v462 & 0xCFFFFFFF;
    if ((v465 & 0x40000000) != 0)
    {
      v466 = *(_QWORD **)v463;
      v467 = *v466;
      v468 = *(_DWORD *)(*v466 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v468);
      a4.f32[1] = (float)(a3.i32[1] / v468);
      a4.f32[2] = (float)(v461 / v468);
      v469 = (const float *)(*v466 + 1656);
      v506 = vld3_f32(v469);
      v470 = *(_QWORD *)(v466[1] + 144);
      v471.i64[0] = 0x3F0000003F000000;
      v471.i64[1] = 0x3F0000003F000000;
      v472 = vaddq_f32(a4, v471);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v472.f32[0]), v506.val[1], *(float32x2_t *)v472.f32, 1), v506.val[2], v472, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v461;
      v473 = vmulq_n_f32(vaddq_f32(a3, v471), *(float *)&v470);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v467 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v473.f32[0]), v506.val[1], *(float32x2_t *)v473.f32, 1), v506.val[2], v473, 2);
    }
    else if (!(v465 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v463 + 16), *(_QWORD *)(*(_QWORD *)(v463 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v463 + 8) + 2448) + 520 * v465, *(_QWORD *)(*(_QWORD *)(v463 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  sub_2239C29BC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_2239C29BC(_QWORD **a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  const float *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  const float *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  const float *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  _QWORD *v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  const float *v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  _QWORD *v68;
  __int32 v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  const float *v76;
  uint64_t v77;
  int v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  _QWORD *v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  const float *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _QWORD *v96;
  int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  const float *v105;
  uint64_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD *v110;
  int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  const float *v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  _QWORD *v124;
  int v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  const float *v133;
  uint64_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  _QWORD *v138;
  int v139;
  int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  _QWORD *v144;
  uint64_t v145;
  int v146;
  const float *v147;
  uint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  _QWORD *v152;
  int v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  const float *v161;
  uint64_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  _QWORD *v166;
  int v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  _QWORD *v172;
  uint64_t v173;
  int v174;
  const float *v175;
  uint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  _QWORD *v180;
  int v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  _QWORD *v186;
  uint64_t v187;
  int v188;
  const float *v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  _QWORD *v194;
  signed int v195;
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  _QWORD *v202;
  uint64_t v203;
  const float *v204;
  int v205;
  uint64_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  _QWORD *v210;
  signed int v211;
  int v212;
  int v213;
  int v214;
  uint64_t v215;
  unsigned int v216;
  unsigned int v217;
  _QWORD *v218;
  uint64_t v219;
  const float *v220;
  int v221;
  uint64_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  _QWORD *v226;
  signed int v227;
  int v228;
  int v229;
  int v230;
  uint64_t v231;
  unsigned int v232;
  unsigned int v233;
  _QWORD *v234;
  uint64_t v235;
  const float *v236;
  int v237;
  uint64_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  _QWORD *v242;
  signed int v243;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  _QWORD *v250;
  uint64_t v251;
  const float *v252;
  int v253;
  uint64_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  _QWORD *v258;
  signed int v259;
  int v260;
  int v261;
  int v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  _QWORD *v266;
  uint64_t v267;
  const float *v268;
  int v269;
  uint64_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  _QWORD *v274;
  signed int v275;
  int v276;
  int v277;
  int v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int v281;
  _QWORD *v282;
  uint64_t v283;
  const float *v284;
  int v285;
  uint64_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  _QWORD *v290;
  signed int v291;
  int v292;
  int v293;
  int v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  _QWORD *v298;
  uint64_t v299;
  const float *v300;
  int v301;
  uint64_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  _QWORD *v306;
  __int32 v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  _QWORD *v312;
  uint64_t v313;
  const float *v314;
  uint64_t v315;
  int v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  _QWORD *v320;
  int v321;
  int v322;
  uint64_t v323;
  unsigned int v324;
  unsigned int v325;
  _QWORD *v326;
  uint64_t v327;
  int v328;
  const float *v329;
  uint64_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  _QWORD *v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  _QWORD *v340;
  uint64_t v341;
  int v342;
  const float *v343;
  uint64_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  _QWORD *v348;
  int v349;
  int v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  _QWORD *v354;
  uint64_t v355;
  int v356;
  const float *v357;
  uint64_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  _QWORD *v362;
  int v363;
  int v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  _QWORD *v368;
  uint64_t v369;
  int v370;
  const float *v371;
  uint64_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  _QWORD *v376;
  int v377;
  int v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  _QWORD *v382;
  uint64_t v383;
  int v384;
  const float *v385;
  uint64_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  _QWORD *v390;
  int v391;
  int v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  _QWORD *v396;
  uint64_t v397;
  int v398;
  const float *v399;
  uint64_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  _QWORD *v404;
  int v405;
  int v406;
  uint64_t v407;
  unsigned int v408;
  unsigned int v409;
  _QWORD *v410;
  uint64_t v411;
  int v412;
  const float *v413;
  uint64_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  _QWORD *v418;
  __int32 v419;
  int v420;
  uint64_t v421;
  unsigned int v422;
  unsigned int v423;
  _QWORD *v424;
  uint64_t v425;
  const float *v426;
  uint64_t v427;
  int v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  _QWORD *v432;
  int v433;
  int v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  _QWORD *v438;
  uint64_t v439;
  int v440;
  const float *v441;
  uint64_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  _QWORD *v446;
  int v447;
  int v448;
  uint64_t v449;
  unsigned int v450;
  unsigned int v451;
  _QWORD *v452;
  uint64_t v453;
  int v454;
  const float *v455;
  uint64_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  _QWORD *v460;
  int v461;
  int v462;
  uint64_t v463;
  unsigned int v464;
  unsigned int v465;
  _QWORD *v466;
  uint64_t v467;
  int v468;
  const float *v469;
  uint64_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  _QWORD *v474;
  int v475;
  int v476;
  uint64_t v477;
  unsigned int v478;
  unsigned int v479;
  _QWORD *v480;
  uint64_t v481;
  int v482;
  const float *v483;
  uint64_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  _BYTE v488[12];
  int32x2_t v489;
  int v490;
  int32x2_t *v491;
  float32x2x3_t v492;
  float32x2x3_t v493;
  float32x2x3_t v494;
  float32x2x3_t v495;
  float32x2x3_t v496;
  float32x2x3_t v497;
  float32x2x3_t v498;
  float32x2x3_t v499;
  float32x2x3_t v500;
  float32x2x3_t v501;
  float32x2x3_t v502;
  float32x2x3_t v503;
  float32x2x3_t v504;
  float32x2x3_t v505;
  float32x2x3_t v506;
  float32x2x3_t v507;
  float32x2x3_t v508;
  float32x2x3_t v509;
  float32x2x3_t v510;
  float32x2x3_t v511;
  float32x2x3_t v512;
  float32x2x3_t v513;
  float32x2x3_t v514;
  float32x2x3_t v515;
  float32x2x3_t v516;
  float32x2x3_t v517;
  float32x2x3_t v518;
  float32x2x3_t v519;
  float32x2x3_t v520;
  float32x2x3_t v521;
  float32x2x3_t v522;
  float32x2x3_t v523;
  float32x2x3_t v524;

  v12 = *a1;
  a4.i64[0] = 0x600000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_QWORD *)v488 = a3.i64[0];
  v13 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v13;
  v14 = *(_DWORD *)(v12[1] + 464);
  if (v14 != *(_DWORD *)(*v12 + 272))
  {
    v15 = *(_QWORD *)(v12[2] + 8);
    if ((v14 & 0x10000000) != 0)
      v16 = 0x40000000;
    else
      v16 = 0x80000000;
    if ((v14 & 0x20000000) != 0)
      v17 = v16;
    else
      v17 = v14 & 0xCFFFFFFF;
    if ((v17 & 0x40000000) != 0)
    {
      v18 = *(_QWORD **)v15;
      v19 = *v18;
      v20 = *(_DWORD *)(*v18 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v20);
      a4.f32[1] = (float)(a3.i32[1] / v20);
      a4.f32[2] = (float)(v13 / v20);
      v21 = (const float *)(*v18 + 1656);
      v492 = vld3_f32(v21);
      v22 = *(_QWORD *)(v18[1] + 144);
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      v24 = vaddq_f32(a4, v23);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v24.f32[0]), v492.val[1], *(float32x2_t *)v24.f32, 1), v492.val[2], v24, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v13;
      v25 = vmulq_n_f32(vaddq_f32(a3, v23), *(float *)&v22);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v19 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v25.f32[0]), v492.val[1], *(float32x2_t *)v25.f32, 1), v492.val[2], v25, 2);
    }
    else if (!(v17 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v15 + 16), *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 2448) + 520 * v17, *(_QWORD *)(*(_QWORD *)(v15 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v26 = *a1;
  a4.i64[0] = 0x600000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_QWORD *)v488 = a3.i64[0];
  v27 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v27;
  v28 = *(_DWORD *)(v26[1] + 468);
  if (v28 != *(_DWORD *)(*v26 + 272))
  {
    v29 = *(_QWORD *)(v26[2] + 8);
    if ((v28 & 0x10000000) != 0)
      v30 = 0x40000000;
    else
      v30 = 0x80000000;
    if ((v28 & 0x20000000) != 0)
      v31 = v30;
    else
      v31 = v28 & 0xCFFFFFFF;
    if ((v31 & 0x40000000) != 0)
    {
      v32 = *(_QWORD **)v29;
      v33 = *v32;
      v34 = *(_DWORD *)(*v32 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v34);
      a4.f32[1] = (float)(a3.i32[1] / v34);
      a4.f32[2] = (float)(v27 / v34);
      v35 = (const float *)(*v32 + 1656);
      v493 = vld3_f32(v35);
      v36 = *(_QWORD *)(v32[1] + 144);
      v37.i64[0] = 0x3F0000003F000000;
      v37.i64[1] = 0x3F0000003F000000;
      v38 = vaddq_f32(a4, v37);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v38.f32[0]), v493.val[1], *(float32x2_t *)v38.f32, 1), v493.val[2], v38, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v27;
      v39 = vmulq_n_f32(vaddq_f32(a3, v37), *(float *)&v36);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v33 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v39.f32[0]), v493.val[1], *(float32x2_t *)v39.f32, 1), v493.val[2], v39, 2);
    }
    else if (!(v31 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v29 + 16), *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v29 + 8) + 2448) + 520 * v31, *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v40 = *a1;
  a4.i64[0] = 0x600000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_QWORD *)v488 = a3.i64[0];
  v41 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v41;
  v42 = *(_DWORD *)(v40[1] + 472);
  if (v42 != *(_DWORD *)(*v40 + 272))
  {
    v43 = *(_QWORD *)(v40[2] + 8);
    if ((v42 & 0x10000000) != 0)
      v44 = 0x40000000;
    else
      v44 = 0x80000000;
    if ((v42 & 0x20000000) != 0)
      v45 = v44;
    else
      v45 = v42 & 0xCFFFFFFF;
    if ((v45 & 0x40000000) != 0)
    {
      v46 = *(_QWORD **)v43;
      v47 = *v46;
      v48 = *(_DWORD *)(*v46 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v48);
      a4.f32[1] = (float)(a3.i32[1] / v48);
      a4.f32[2] = (float)(v41 / v48);
      v49 = (const float *)(*v46 + 1656);
      v494 = vld3_f32(v49);
      v50 = *(_QWORD *)(v46[1] + 144);
      v51.i64[0] = 0x3F0000003F000000;
      v51.i64[1] = 0x3F0000003F000000;
      v52 = vaddq_f32(a4, v51);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v52.f32[0]), v494.val[1], *(float32x2_t *)v52.f32, 1), v494.val[2], v52, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v41;
      v53 = vmulq_n_f32(vaddq_f32(a3, v51), *(float *)&v50);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v47 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v53.f32[0]), v494.val[1], *(float32x2_t *)v53.f32, 1), v494.val[2], v53, 2);
    }
    else if (!(v45 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v43 + 16), *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v43 + 8) + 2448) + 520 * v45, *(_QWORD *)(*(_QWORD *)(v43 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v54 = *a1;
  a4.i64[0] = 0x600000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_QWORD *)v488 = a3.i64[0];
  v55 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v55;
  v56 = *(_DWORD *)(v54[1] + 476);
  if (v56 != *(_DWORD *)(*v54 + 272))
  {
    v57 = *(_QWORD *)(v54[2] + 8);
    if ((v56 & 0x10000000) != 0)
      v58 = 0x40000000;
    else
      v58 = 0x80000000;
    if ((v56 & 0x20000000) != 0)
      v59 = v58;
    else
      v59 = v56 & 0xCFFFFFFF;
    if ((v59 & 0x40000000) != 0)
    {
      v60 = *(_QWORD **)v57;
      v61 = *v60;
      v62 = *(_DWORD *)(*v60 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v62);
      a4.f32[1] = (float)(a3.i32[1] / v62);
      a4.f32[2] = (float)(v55 / v62);
      v63 = (const float *)(*v60 + 1656);
      v495 = vld3_f32(v63);
      v64 = *(_QWORD *)(v60[1] + 144);
      v65.i64[0] = 0x3F0000003F000000;
      v65.i64[1] = 0x3F0000003F000000;
      v66 = vaddq_f32(a4, v65);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v66.f32[0]), v495.val[1], *(float32x2_t *)v66.f32, 1), v495.val[2], v66, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v55;
      v67 = vmulq_n_f32(vaddq_f32(a3, v65), *(float *)&v64);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v61 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v67.f32[0]), v495.val[1], *(float32x2_t *)v67.f32, 1), v495.val[2], v67, 2);
    }
    else if (!(v59 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v57 + 16), *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v57 + 8) + 2448) + 520 * v59, *(_QWORD *)(*(_QWORD *)(v57 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v68 = *a1;
  v69 = *(_DWORD *)a2;
  *(_DWORD *)v488 = *(_DWORD *)a2;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000007);
  *(_QWORD *)&v488[4] = a3.i64[0];
  v70 = *(_DWORD *)(v68[1] + 480);
  if (v70 != *(_DWORD *)(*v68 + 272))
  {
    v71 = *(_QWORD *)(v68[2] + 8);
    if ((v70 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v73 = v72;
    else
      v73 = v70 & 0xCFFFFFFF;
    if ((v73 & 0x40000000) != 0)
    {
      v74 = *(_QWORD **)v71;
      v75 = *v74;
      v76 = (const float *)(*v74 + 1656);
      v77 = *(_QWORD *)(v74[1] + 144);
      LODWORD(v74) = *(_DWORD *)(*v74 + 8);
      v78 = a3.i32[1];
      a5.f32[0] = (float)(v69 / (int)v74);
      a5.f32[1] = (float)(a3.i32[0] / (int)v74);
      a5.f32[2] = (float)(a3.i32[1] / (int)v74);
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      v515 = vld3_f32(v76);
      v80 = vaddq_f32(a5, v79);
      *(int32x2_t *)v80.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v515.val[0], v80.f32[0]), v515.val[1], *(float32x2_t *)v80.f32, 1), v515.val[2], v80, 2), (float32x2_t)0xBF000000BF000000));
      v489 = *(int32x2_t *)v80.f32;
      v490 = 0;
      v80.i32[0] = v69;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v80.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v78;
      v81 = vmulq_n_f32(vaddq_f32(a3, v79), *(float *)&v77);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v75 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v515.val[0], v81.f32[0]), v515.val[1], *(float32x2_t *)v81.f32, 1), v515.val[2], v81, 2);
    }
    else if (!(v73 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v71 + 16), *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v71 + 8) + 2448) + 520 * v73, *(_QWORD *)(*(_QWORD *)(v71 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v82 = *a1;
  a4.i64[0] = 0x700000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_QWORD *)v488 = a3.i64[0];
  v83 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v83;
  v84 = *(_DWORD *)(v82[1] + 484);
  if (v84 != *(_DWORD *)(*v82 + 272))
  {
    v85 = *(_QWORD *)(v82[2] + 8);
    if ((v84 & 0x10000000) != 0)
      v86 = 0x40000000;
    else
      v86 = 0x80000000;
    if ((v84 & 0x20000000) != 0)
      v87 = v86;
    else
      v87 = v84 & 0xCFFFFFFF;
    if ((v87 & 0x40000000) != 0)
    {
      v88 = *(_QWORD **)v85;
      v89 = *v88;
      v90 = *(_DWORD *)(*v88 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v90);
      a4.f32[1] = (float)(a3.i32[1] / v90);
      a4.f32[2] = (float)(v83 / v90);
      v91 = (const float *)(*v88 + 1656);
      v496 = vld3_f32(v91);
      v92 = *(_QWORD *)(v88[1] + 144);
      v93.i64[0] = 0x3F0000003F000000;
      v93.i64[1] = 0x3F0000003F000000;
      v94 = vaddq_f32(a4, v93);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v94.f32[0]), v496.val[1], *(float32x2_t *)v94.f32, 1), v496.val[2], v94, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v83;
      v95 = vmulq_n_f32(vaddq_f32(a3, v93), *(float *)&v92);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v89 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v95.f32[0]), v496.val[1], *(float32x2_t *)v95.f32, 1), v496.val[2], v95, 2);
    }
    else if (!(v87 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v85 + 16), *(_QWORD *)(*(_QWORD *)(v85 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v85 + 8) + 2448) + 520 * v87, *(_QWORD *)(*(_QWORD *)(v85 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v96 = *a1;
  a4.i64[0] = 0x700000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_QWORD *)v488 = a3.i64[0];
  v97 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v97;
  v98 = *(_DWORD *)(v96[1] + 488);
  if (v98 != *(_DWORD *)(*v96 + 272))
  {
    v99 = *(_QWORD *)(v96[2] + 8);
    if ((v98 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v98 & 0x20000000) != 0)
      v101 = v100;
    else
      v101 = v98 & 0xCFFFFFFF;
    if ((v101 & 0x40000000) != 0)
    {
      v102 = *(_QWORD **)v99;
      v103 = *v102;
      v104 = *(_DWORD *)(*v102 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v104);
      a4.f32[1] = (float)(a3.i32[1] / v104);
      a4.f32[2] = (float)(v97 / v104);
      v105 = (const float *)(*v102 + 1656);
      v497 = vld3_f32(v105);
      v106 = *(_QWORD *)(v102[1] + 144);
      v107.i64[0] = 0x3F0000003F000000;
      v107.i64[1] = 0x3F0000003F000000;
      v108 = vaddq_f32(a4, v107);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v108.f32[0]), v497.val[1], *(float32x2_t *)v108.f32, 1), v497.val[2], v108, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v97;
      v109 = vmulq_n_f32(vaddq_f32(a3, v107), *(float *)&v106);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v103 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v109.f32[0]), v497.val[1], *(float32x2_t *)v109.f32, 1), v497.val[2], v109, 2);
    }
    else if (!(v101 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v99 + 16), *(_QWORD *)(*(_QWORD *)(v99 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v99 + 8) + 2448) + 520 * v101, *(_QWORD *)(*(_QWORD *)(v99 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v110 = *a1;
  a4.i64[0] = 0x700000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_QWORD *)v488 = a3.i64[0];
  v111 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v111;
  v112 = *(_DWORD *)(v110[1] + 492);
  if (v112 != *(_DWORD *)(*v110 + 272))
  {
    v113 = *(_QWORD *)(v110[2] + 8);
    if ((v112 & 0x10000000) != 0)
      v114 = 0x40000000;
    else
      v114 = 0x80000000;
    if ((v112 & 0x20000000) != 0)
      v115 = v114;
    else
      v115 = v112 & 0xCFFFFFFF;
    if ((v115 & 0x40000000) != 0)
    {
      v116 = *(_QWORD **)v113;
      v117 = *v116;
      v118 = *(_DWORD *)(*v116 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v118);
      a4.f32[1] = (float)(a3.i32[1] / v118);
      a4.f32[2] = (float)(v111 / v118);
      v119 = (const float *)(*v116 + 1656);
      v498 = vld3_f32(v119);
      v120 = *(_QWORD *)(v116[1] + 144);
      v121.i64[0] = 0x3F0000003F000000;
      v121.i64[1] = 0x3F0000003F000000;
      v122 = vaddq_f32(a4, v121);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v122.f32[0]), v498.val[1], *(float32x2_t *)v122.f32, 1), v498.val[2], v122, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v111;
      v123 = vmulq_n_f32(vaddq_f32(a3, v121), *(float *)&v120);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v117 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v123.f32[0]), v498.val[1], *(float32x2_t *)v123.f32, 1), v498.val[2], v123, 2);
    }
    else if (!(v115 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v113 + 16), *(_QWORD *)(*(_QWORD *)(v113 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v113 + 8) + 2448) + 520 * v115, *(_QWORD *)(*(_QWORD *)(v113 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v124 = *a1;
  a4.i64[0] = 0x700000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_QWORD *)v488 = a3.i64[0];
  v125 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v125;
  v126 = *(_DWORD *)(v124[1] + 496);
  if (v126 != *(_DWORD *)(*v124 + 272))
  {
    v127 = *(_QWORD *)(v124[2] + 8);
    if ((v126 & 0x10000000) != 0)
      v128 = 0x40000000;
    else
      v128 = 0x80000000;
    if ((v126 & 0x20000000) != 0)
      v129 = v128;
    else
      v129 = v126 & 0xCFFFFFFF;
    if ((v129 & 0x40000000) != 0)
    {
      v130 = *(_QWORD **)v127;
      v131 = *v130;
      v132 = *(_DWORD *)(*v130 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v132);
      a4.f32[1] = (float)(a3.i32[1] / v132);
      a4.f32[2] = (float)(v125 / v132);
      v133 = (const float *)(*v130 + 1656);
      v499 = vld3_f32(v133);
      v134 = *(_QWORD *)(v130[1] + 144);
      v135.i64[0] = 0x3F0000003F000000;
      v135.i64[1] = 0x3F0000003F000000;
      v136 = vaddq_f32(a4, v135);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v136.f32[0]), v499.val[1], *(float32x2_t *)v136.f32, 1), v499.val[2], v136, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v125;
      v137 = vmulq_n_f32(vaddq_f32(a3, v135), *(float *)&v134);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v131 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v137.f32[0]), v499.val[1], *(float32x2_t *)v137.f32, 1), v499.val[2], v137, 2);
    }
    else if (!(v129 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v127 + 16), *(_QWORD *)(*(_QWORD *)(v127 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v127 + 8) + 2448) + 520 * v129, *(_QWORD *)(*(_QWORD *)(v127 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v138 = *a1;
  a4.i64[0] = 0x700000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_QWORD *)v488 = a3.i64[0];
  v139 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v139;
  v140 = *(_DWORD *)(v138[1] + 500);
  if (v140 != *(_DWORD *)(*v138 + 272))
  {
    v141 = *(_QWORD *)(v138[2] + 8);
    if ((v140 & 0x10000000) != 0)
      v142 = 0x40000000;
    else
      v142 = 0x80000000;
    if ((v140 & 0x20000000) != 0)
      v143 = v142;
    else
      v143 = v140 & 0xCFFFFFFF;
    if ((v143 & 0x40000000) != 0)
    {
      v144 = *(_QWORD **)v141;
      v145 = *v144;
      v146 = *(_DWORD *)(*v144 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v146);
      a4.f32[1] = (float)(a3.i32[1] / v146);
      a4.f32[2] = (float)(v139 / v146);
      v147 = (const float *)(*v144 + 1656);
      v500 = vld3_f32(v147);
      v148 = *(_QWORD *)(v144[1] + 144);
      v149.i64[0] = 0x3F0000003F000000;
      v149.i64[1] = 0x3F0000003F000000;
      v150 = vaddq_f32(a4, v149);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v150.f32[0]), v500.val[1], *(float32x2_t *)v150.f32, 1), v500.val[2], v150, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v139;
      v151 = vmulq_n_f32(vaddq_f32(a3, v149), *(float *)&v148);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v145 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v151.f32[0]), v500.val[1], *(float32x2_t *)v151.f32, 1), v500.val[2], v151, 2);
    }
    else if (!(v143 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v141 + 16), *(_QWORD *)(*(_QWORD *)(v141 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v141 + 8) + 2448) + 520 * v143, *(_QWORD *)(*(_QWORD *)(v141 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v152 = *a1;
  a4.i64[0] = 0x700000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_QWORD *)v488 = a3.i64[0];
  v153 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v153;
  v154 = *(_DWORD *)(v152[1] + 504);
  if (v154 != *(_DWORD *)(*v152 + 272))
  {
    v155 = *(_QWORD *)(v152[2] + 8);
    if ((v154 & 0x10000000) != 0)
      v156 = 0x40000000;
    else
      v156 = 0x80000000;
    if ((v154 & 0x20000000) != 0)
      v157 = v156;
    else
      v157 = v154 & 0xCFFFFFFF;
    if ((v157 & 0x40000000) != 0)
    {
      v158 = *(_QWORD **)v155;
      v159 = *v158;
      v160 = *(_DWORD *)(*v158 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v160);
      a4.f32[1] = (float)(a3.i32[1] / v160);
      a4.f32[2] = (float)(v153 / v160);
      v161 = (const float *)(*v158 + 1656);
      v501 = vld3_f32(v161);
      v162 = *(_QWORD *)(v158[1] + 144);
      v163.i64[0] = 0x3F0000003F000000;
      v163.i64[1] = 0x3F0000003F000000;
      v164 = vaddq_f32(a4, v163);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v164.f32[0]), v501.val[1], *(float32x2_t *)v164.f32, 1), v501.val[2], v164, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v153;
      v165 = vmulq_n_f32(vaddq_f32(a3, v163), *(float *)&v162);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v159 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v165.f32[0]), v501.val[1], *(float32x2_t *)v165.f32, 1), v501.val[2], v165, 2);
    }
    else if (!(v157 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v155 + 16), *(_QWORD *)(*(_QWORD *)(v155 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v155 + 8) + 2448) + 520 * v157, *(_QWORD *)(*(_QWORD *)(v155 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v166 = *a1;
  a4.i64[0] = 0x700000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_QWORD *)v488 = a3.i64[0];
  v167 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)&v488[8] = v167;
  v168 = *(_DWORD *)(v166[1] + 508);
  if (v168 != *(_DWORD *)(*v166 + 272))
  {
    v169 = *(_QWORD *)(v166[2] + 8);
    if ((v168 & 0x10000000) != 0)
      v170 = 0x40000000;
    else
      v170 = 0x80000000;
    if ((v168 & 0x20000000) != 0)
      v171 = v170;
    else
      v171 = v168 & 0xCFFFFFFF;
    if ((v171 & 0x40000000) != 0)
    {
      v172 = *(_QWORD **)v169;
      v173 = *v172;
      v174 = *(_DWORD *)(*v172 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v174);
      a4.f32[1] = (float)(a3.i32[1] / v174);
      a4.f32[2] = (float)(v167 / v174);
      v175 = (const float *)(*v172 + 1656);
      v502 = vld3_f32(v175);
      v176 = *(_QWORD *)(v172[1] + 144);
      v177.i64[0] = 0x3F0000003F000000;
      v177.i64[1] = 0x3F0000003F000000;
      v178 = vaddq_f32(a4, v177);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v178.f32[0]), v502.val[1], *(float32x2_t *)v178.f32, 1), v502.val[2], v178, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v167;
      v179 = vmulq_n_f32(vaddq_f32(a3, v177), *(float *)&v176);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v173 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v179.f32[0]), v502.val[1], *(float32x2_t *)v179.f32, 1), v502.val[2], v179, 2);
    }
    else if (!(v171 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v169 + 16), *(_QWORD *)(*(_QWORD *)(v169 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v169 + 8) + 2448) + 520 * v171, *(_QWORD *)(*(_QWORD *)(v169 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v180 = *a1;
  a3.i64[0] = *(_QWORD *)a2;
  *(_QWORD *)v488 = *(_QWORD *)a2;
  v181 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v181;
  v182 = *(_DWORD *)(v180[1] + 512);
  if (v182 != *(_DWORD *)(*v180 + 272))
  {
    v183 = *(_QWORD *)(v180[2] + 8);
    if ((v182 & 0x10000000) != 0)
      v184 = 0x40000000;
    else
      v184 = 0x80000000;
    if ((v182 & 0x20000000) != 0)
      v185 = v184;
    else
      v185 = v182 & 0xCFFFFFFF;
    if ((v185 & 0x40000000) != 0)
    {
      v186 = *(_QWORD **)v183;
      v187 = *v186;
      v188 = *(_DWORD *)(*v186 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v188);
      a4.f32[1] = (float)(a3.i32[1] / v188);
      a4.f32[2] = (float)(v181 / v188);
      v189 = (const float *)(*v186 + 1656);
      v503 = vld3_f32(v189);
      v190 = *(_QWORD *)(v186[1] + 144);
      v191.i64[0] = 0x3F0000003F000000;
      v191.i64[1] = 0x3F0000003F000000;
      v192 = vaddq_f32(a4, v191);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v192.f32[0]), v503.val[1], *(float32x2_t *)v192.f32, 1), v503.val[2], v192, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v181;
      v193 = vmulq_n_f32(vaddq_f32(a3, v191), *(float *)&v190);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v187 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v193.f32[0]), v503.val[1], *(float32x2_t *)v193.f32, 1), v503.val[2], v193, 2);
    }
    else if (!(v185 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v183 + 16), *(_QWORD *)(*(_QWORD *)(v183 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v183 + 8) + 2448) + 520 * v185, *(_QWORD *)(*(_QWORD *)(v183 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v194 = *a1;
  v195 = *(_DWORD *)(a2 + 4);
  v196 = *(_DWORD *)a2 + 1;
  *(_DWORD *)v488 = v196;
  *(_DWORD *)&v488[4] = v195;
  v197 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v197;
  v198 = *(_DWORD *)(v194[1] + 516);
  if (v198 != *(_DWORD *)(*v194 + 272))
  {
    v199 = *(_QWORD *)(v194[2] + 8);
    if ((v198 & 0x10000000) != 0)
      v200 = 0x40000000;
    else
      v200 = 0x80000000;
    if ((v198 & 0x20000000) != 0)
      v201 = v200;
    else
      v201 = v198 & 0xCFFFFFFF;
    if ((v201 & 0x40000000) != 0)
    {
      v202 = *(_QWORD **)v199;
      v203 = *v202;
      v204 = (const float *)(*v202 + 1656);
      v205 = *(_DWORD *)(*v202 + 8);
      a3.f32[0] = (float)(v196 / v205);
      v206 = *(_QWORD *)(v202[1] + 144);
      a3.f32[1] = (float)(v195 / v205);
      a3.f32[2] = (float)(v197 / v205);
      v207.i64[0] = 0x3F0000003F000000;
      v207.i64[1] = 0x3F0000003F000000;
      v208 = vaddq_f32(a3, v207);
      v516 = vld3_f32(v204);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v516.val[0], v208.f32[0]), v516.val[1], *(float32x2_t *)v208.f32, 1), v516.val[2], v208, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v208.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v195, v196));
      v208.f32[2] = (float)v197;
      v209 = vmulq_n_f32(vaddq_f32(v208, v207), *(float *)&v206);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v203 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v516.val[0], v209.f32[0]), v516.val[1], *(float32x2_t *)v209.f32, 1), v516.val[2], v209, 2);
    }
    else if (!(v201 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v199 + 16), *(_QWORD *)(*(_QWORD *)(v199 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v199 + 8) + 2448) + 520 * v201, *(_QWORD *)(*(_QWORD *)(v199 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v210 = *a1;
  v211 = *(_DWORD *)(a2 + 4);
  v212 = *(_DWORD *)a2 + 2;
  *(_DWORD *)v488 = v212;
  *(_DWORD *)&v488[4] = v211;
  v213 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v213;
  v214 = *(_DWORD *)(v210[1] + 520);
  if (v214 != *(_DWORD *)(*v210 + 272))
  {
    v215 = *(_QWORD *)(v210[2] + 8);
    if ((v214 & 0x10000000) != 0)
      v216 = 0x40000000;
    else
      v216 = 0x80000000;
    if ((v214 & 0x20000000) != 0)
      v217 = v216;
    else
      v217 = v214 & 0xCFFFFFFF;
    if ((v217 & 0x40000000) != 0)
    {
      v218 = *(_QWORD **)v215;
      v219 = *v218;
      v220 = (const float *)(*v218 + 1656);
      v221 = *(_DWORD *)(*v218 + 8);
      a3.f32[0] = (float)(v212 / v221);
      v222 = *(_QWORD *)(v218[1] + 144);
      a3.f32[1] = (float)(v211 / v221);
      a3.f32[2] = (float)(v213 / v221);
      v223.i64[0] = 0x3F0000003F000000;
      v223.i64[1] = 0x3F0000003F000000;
      v224 = vaddq_f32(a3, v223);
      v517 = vld3_f32(v220);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v517.val[0], v224.f32[0]), v517.val[1], *(float32x2_t *)v224.f32, 1), v517.val[2], v224, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v224.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v211, v212));
      v224.f32[2] = (float)v213;
      v225 = vmulq_n_f32(vaddq_f32(v224, v223), *(float *)&v222);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v219 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v517.val[0], v225.f32[0]), v517.val[1], *(float32x2_t *)v225.f32, 1), v517.val[2], v225, 2);
    }
    else if (!(v217 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v215 + 16), *(_QWORD *)(*(_QWORD *)(v215 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v215 + 8) + 2448) + 520 * v217, *(_QWORD *)(*(_QWORD *)(v215 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v226 = *a1;
  v227 = *(_DWORD *)(a2 + 4);
  v228 = *(_DWORD *)a2 + 3;
  *(_DWORD *)v488 = v228;
  *(_DWORD *)&v488[4] = v227;
  v229 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v229;
  v230 = *(_DWORD *)(v226[1] + 524);
  if (v230 != *(_DWORD *)(*v226 + 272))
  {
    v231 = *(_QWORD *)(v226[2] + 8);
    if ((v230 & 0x10000000) != 0)
      v232 = 0x40000000;
    else
      v232 = 0x80000000;
    if ((v230 & 0x20000000) != 0)
      v233 = v232;
    else
      v233 = v230 & 0xCFFFFFFF;
    if ((v233 & 0x40000000) != 0)
    {
      v234 = *(_QWORD **)v231;
      v235 = *v234;
      v236 = (const float *)(*v234 + 1656);
      v237 = *(_DWORD *)(*v234 + 8);
      a3.f32[0] = (float)(v228 / v237);
      v238 = *(_QWORD *)(v234[1] + 144);
      a3.f32[1] = (float)(v227 / v237);
      a3.f32[2] = (float)(v229 / v237);
      v239.i64[0] = 0x3F0000003F000000;
      v239.i64[1] = 0x3F0000003F000000;
      v240 = vaddq_f32(a3, v239);
      v518 = vld3_f32(v236);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v518.val[0], v240.f32[0]), v518.val[1], *(float32x2_t *)v240.f32, 1), v518.val[2], v240, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v240.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v227, v228));
      v240.f32[2] = (float)v229;
      v241 = vmulq_n_f32(vaddq_f32(v240, v239), *(float *)&v238);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v235 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v518.val[0], v241.f32[0]), v518.val[1], *(float32x2_t *)v241.f32, 1), v518.val[2], v241, 2);
    }
    else if (!(v233 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v231 + 16), *(_QWORD *)(*(_QWORD *)(v231 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v231 + 8) + 2448) + 520 * v233, *(_QWORD *)(*(_QWORD *)(v231 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v242 = *a1;
  v243 = *(_DWORD *)(a2 + 4);
  v244 = *(_DWORD *)a2 + 4;
  *(_DWORD *)v488 = v244;
  *(_DWORD *)&v488[4] = v243;
  v245 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v245;
  v246 = *(_DWORD *)(v242[1] + 528);
  if (v246 != *(_DWORD *)(*v242 + 272))
  {
    v247 = *(_QWORD *)(v242[2] + 8);
    if ((v246 & 0x10000000) != 0)
      v248 = 0x40000000;
    else
      v248 = 0x80000000;
    if ((v246 & 0x20000000) != 0)
      v249 = v248;
    else
      v249 = v246 & 0xCFFFFFFF;
    if ((v249 & 0x40000000) != 0)
    {
      v250 = *(_QWORD **)v247;
      v251 = *v250;
      v252 = (const float *)(*v250 + 1656);
      v253 = *(_DWORD *)(*v250 + 8);
      a3.f32[0] = (float)(v244 / v253);
      v254 = *(_QWORD *)(v250[1] + 144);
      a3.f32[1] = (float)(v243 / v253);
      a3.f32[2] = (float)(v245 / v253);
      v255.i64[0] = 0x3F0000003F000000;
      v255.i64[1] = 0x3F0000003F000000;
      v256 = vaddq_f32(a3, v255);
      v519 = vld3_f32(v252);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v519.val[0], v256.f32[0]), v519.val[1], *(float32x2_t *)v256.f32, 1), v519.val[2], v256, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v256.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v243, v244));
      v256.f32[2] = (float)v245;
      v257 = vmulq_n_f32(vaddq_f32(v256, v255), *(float *)&v254);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v251 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v519.val[0], v257.f32[0]), v519.val[1], *(float32x2_t *)v257.f32, 1), v519.val[2], v257, 2);
    }
    else if (!(v249 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v247 + 16), *(_QWORD *)(*(_QWORD *)(v247 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v247 + 8) + 2448) + 520 * v249, *(_QWORD *)(*(_QWORD *)(v247 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v258 = *a1;
  v259 = *(_DWORD *)(a2 + 4);
  v260 = *(_DWORD *)a2 + 5;
  *(_DWORD *)v488 = v260;
  *(_DWORD *)&v488[4] = v259;
  v261 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v261;
  v262 = *(_DWORD *)(v258[1] + 532);
  if (v262 != *(_DWORD *)(*v258 + 272))
  {
    v263 = *(_QWORD *)(v258[2] + 8);
    if ((v262 & 0x10000000) != 0)
      v264 = 0x40000000;
    else
      v264 = 0x80000000;
    if ((v262 & 0x20000000) != 0)
      v265 = v264;
    else
      v265 = v262 & 0xCFFFFFFF;
    if ((v265 & 0x40000000) != 0)
    {
      v266 = *(_QWORD **)v263;
      v267 = *v266;
      v268 = (const float *)(*v266 + 1656);
      v269 = *(_DWORD *)(*v266 + 8);
      a3.f32[0] = (float)(v260 / v269);
      v270 = *(_QWORD *)(v266[1] + 144);
      a3.f32[1] = (float)(v259 / v269);
      a3.f32[2] = (float)(v261 / v269);
      v271.i64[0] = 0x3F0000003F000000;
      v271.i64[1] = 0x3F0000003F000000;
      v272 = vaddq_f32(a3, v271);
      v520 = vld3_f32(v268);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v520.val[0], v272.f32[0]), v520.val[1], *(float32x2_t *)v272.f32, 1), v520.val[2], v272, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v272.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v259, v260));
      v272.f32[2] = (float)v261;
      v273 = vmulq_n_f32(vaddq_f32(v272, v271), *(float *)&v270);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v267 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v520.val[0], v273.f32[0]), v520.val[1], *(float32x2_t *)v273.f32, 1), v520.val[2], v273, 2);
    }
    else if (!(v265 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v263 + 16), *(_QWORD *)(*(_QWORD *)(v263 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v263 + 8) + 2448) + 520 * v265, *(_QWORD *)(*(_QWORD *)(v263 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v274 = *a1;
  v275 = *(_DWORD *)(a2 + 4);
  v276 = *(_DWORD *)a2 + 6;
  *(_DWORD *)v488 = v276;
  *(_DWORD *)&v488[4] = v275;
  v277 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v277;
  v278 = *(_DWORD *)(v274[1] + 536);
  if (v278 != *(_DWORD *)(*v274 + 272))
  {
    v279 = *(_QWORD *)(v274[2] + 8);
    if ((v278 & 0x10000000) != 0)
      v280 = 0x40000000;
    else
      v280 = 0x80000000;
    if ((v278 & 0x20000000) != 0)
      v281 = v280;
    else
      v281 = v278 & 0xCFFFFFFF;
    if ((v281 & 0x40000000) != 0)
    {
      v282 = *(_QWORD **)v279;
      v283 = *v282;
      v284 = (const float *)(*v282 + 1656);
      v285 = *(_DWORD *)(*v282 + 8);
      a3.f32[0] = (float)(v276 / v285);
      v286 = *(_QWORD *)(v282[1] + 144);
      a3.f32[1] = (float)(v275 / v285);
      a3.f32[2] = (float)(v277 / v285);
      v287.i64[0] = 0x3F0000003F000000;
      v287.i64[1] = 0x3F0000003F000000;
      v288 = vaddq_f32(a3, v287);
      v521 = vld3_f32(v284);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v521.val[0], v288.f32[0]), v521.val[1], *(float32x2_t *)v288.f32, 1), v521.val[2], v288, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v288.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v275, v276));
      v288.f32[2] = (float)v277;
      v289 = vmulq_n_f32(vaddq_f32(v288, v287), *(float *)&v286);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v283 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v521.val[0], v289.f32[0]), v521.val[1], *(float32x2_t *)v289.f32, 1), v521.val[2], v289, 2);
    }
    else if (!(v281 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v279 + 16), *(_QWORD *)(*(_QWORD *)(v279 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v279 + 8) + 2448) + 520 * v281, *(_QWORD *)(*(_QWORD *)(v279 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v290 = *a1;
  v291 = *(_DWORD *)(a2 + 4);
  v292 = *(_DWORD *)a2 + 7;
  *(_DWORD *)v488 = v292;
  *(_DWORD *)&v488[4] = v291;
  v293 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v293;
  v294 = *(_DWORD *)(v290[1] + 540);
  if (v294 != *(_DWORD *)(*v290 + 272))
  {
    v295 = *(_QWORD *)(v290[2] + 8);
    if ((v294 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v294 & 0x20000000) != 0)
      v297 = v296;
    else
      v297 = v294 & 0xCFFFFFFF;
    if ((v297 & 0x40000000) != 0)
    {
      v298 = *(_QWORD **)v295;
      v299 = *v298;
      v300 = (const float *)(*v298 + 1656);
      v301 = *(_DWORD *)(*v298 + 8);
      a3.f32[0] = (float)(v292 / v301);
      v302 = *(_QWORD *)(v298[1] + 144);
      a3.f32[1] = (float)(v291 / v301);
      a3.f32[2] = (float)(v293 / v301);
      v303.i64[0] = 0x3F0000003F000000;
      v303.i64[1] = 0x3F0000003F000000;
      v304 = vaddq_f32(a3, v303);
      v522 = vld3_f32(v300);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v522.val[0], v304.f32[0]), v522.val[1], *(float32x2_t *)v304.f32, 1), v522.val[2], v304, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v304.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v291, v292));
      v304.f32[2] = (float)v293;
      v305 = vmulq_n_f32(vaddq_f32(v304, v303), *(float *)&v302);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v299 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v522.val[0], v305.f32[0]), v522.val[1], *(float32x2_t *)v305.f32, 1), v522.val[2], v305, 2);
    }
    else if (!(v297 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v295 + 16), *(_QWORD *)(*(_QWORD *)(v295 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v295 + 8) + 2448) + 520 * v297, *(_QWORD *)(*(_QWORD *)(v295 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v306 = *a1;
  v307 = *(_DWORD *)a2;
  *(_DWORD *)v488 = *(_DWORD *)a2;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000001);
  *(_QWORD *)&v488[4] = a3.i64[0];
  v308 = *(_DWORD *)(v306[1] + 544);
  if (v308 != *(_DWORD *)(*v306 + 272))
  {
    v309 = *(_QWORD *)(v306[2] + 8);
    if ((v308 & 0x10000000) != 0)
      v310 = 0x40000000;
    else
      v310 = 0x80000000;
    if ((v308 & 0x20000000) != 0)
      v311 = v310;
    else
      v311 = v308 & 0xCFFFFFFF;
    if ((v311 & 0x40000000) != 0)
    {
      v312 = *(_QWORD **)v309;
      v313 = *v312;
      v314 = (const float *)(*v312 + 1656);
      v315 = *(_QWORD *)(v312[1] + 144);
      LODWORD(v312) = *(_DWORD *)(*v312 + 8);
      v316 = a3.i32[1];
      a5.f32[0] = (float)(v307 / (int)v312);
      a5.f32[1] = (float)(a3.i32[0] / (int)v312);
      a5.f32[2] = (float)(a3.i32[1] / (int)v312);
      v317.i64[0] = 0x3F0000003F000000;
      v317.i64[1] = 0x3F0000003F000000;
      v523 = vld3_f32(v314);
      v318 = vaddq_f32(a5, v317);
      *(int32x2_t *)v318.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v523.val[0], v318.f32[0]), v523.val[1], *(float32x2_t *)v318.f32, 1), v523.val[2], v318, 2), (float32x2_t)0xBF000000BF000000));
      v489 = *(int32x2_t *)v318.f32;
      v490 = 0;
      v318.i32[0] = v307;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v318.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v316;
      v319 = vmulq_n_f32(vaddq_f32(a3, v317), *(float *)&v315);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v313 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v523.val[0], v319.f32[0]), v523.val[1], *(float32x2_t *)v319.f32, 1), v523.val[2], v319, 2);
    }
    else if (!(v311 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v309 + 16), *(_QWORD *)(*(_QWORD *)(v309 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v309 + 8) + 2448) + 520 * v311, *(_QWORD *)(*(_QWORD *)(v309 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v320 = *a1;
  a4.i64[0] = 0x100000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000001);
  *(_QWORD *)v488 = a3.i64[0];
  v321 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v321;
  v322 = *(_DWORD *)(v320[1] + 548);
  if (v322 != *(_DWORD *)(*v320 + 272))
  {
    v323 = *(_QWORD *)(v320[2] + 8);
    if ((v322 & 0x10000000) != 0)
      v324 = 0x40000000;
    else
      v324 = 0x80000000;
    if ((v322 & 0x20000000) != 0)
      v325 = v324;
    else
      v325 = v322 & 0xCFFFFFFF;
    if ((v325 & 0x40000000) != 0)
    {
      v326 = *(_QWORD **)v323;
      v327 = *v326;
      v328 = *(_DWORD *)(*v326 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v328);
      a4.f32[1] = (float)(a3.i32[1] / v328);
      a4.f32[2] = (float)(v321 / v328);
      v329 = (const float *)(*v326 + 1656);
      v504 = vld3_f32(v329);
      v330 = *(_QWORD *)(v326[1] + 144);
      v331.i64[0] = 0x3F0000003F000000;
      v331.i64[1] = 0x3F0000003F000000;
      v332 = vaddq_f32(a4, v331);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v332.f32[0]), v504.val[1], *(float32x2_t *)v332.f32, 1), v504.val[2], v332, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v321;
      v333 = vmulq_n_f32(vaddq_f32(a3, v331), *(float *)&v330);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v327 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v333.f32[0]), v504.val[1], *(float32x2_t *)v333.f32, 1), v504.val[2], v333, 2);
    }
    else if (!(v325 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v323 + 16), *(_QWORD *)(*(_QWORD *)(v323 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v323 + 8) + 2448) + 520 * v325, *(_QWORD *)(*(_QWORD *)(v323 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v334 = *a1;
  a4.i64[0] = 0x100000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000002);
  *(_QWORD *)v488 = a3.i64[0];
  v335 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v335;
  v336 = *(_DWORD *)(v334[1] + 552);
  if (v336 != *(_DWORD *)(*v334 + 272))
  {
    v337 = *(_QWORD *)(v334[2] + 8);
    if ((v336 & 0x10000000) != 0)
      v338 = 0x40000000;
    else
      v338 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v339 = v338;
    else
      v339 = v336 & 0xCFFFFFFF;
    if ((v339 & 0x40000000) != 0)
    {
      v340 = *(_QWORD **)v337;
      v341 = *v340;
      v342 = *(_DWORD *)(*v340 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v342);
      a4.f32[1] = (float)(a3.i32[1] / v342);
      a4.f32[2] = (float)(v335 / v342);
      v343 = (const float *)(*v340 + 1656);
      v505 = vld3_f32(v343);
      v344 = *(_QWORD *)(v340[1] + 144);
      v345.i64[0] = 0x3F0000003F000000;
      v345.i64[1] = 0x3F0000003F000000;
      v346 = vaddq_f32(a4, v345);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v346.f32[0]), v505.val[1], *(float32x2_t *)v346.f32, 1), v505.val[2], v346, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v335;
      v347 = vmulq_n_f32(vaddq_f32(a3, v345), *(float *)&v344);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v341 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v347.f32[0]), v505.val[1], *(float32x2_t *)v347.f32, 1), v505.val[2], v347, 2);
    }
    else if (!(v339 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v337 + 16), *(_QWORD *)(*(_QWORD *)(v337 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v337 + 8) + 2448) + 520 * v339, *(_QWORD *)(*(_QWORD *)(v337 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v348 = *a1;
  a4.i64[0] = 0x100000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000003);
  *(_QWORD *)v488 = a3.i64[0];
  v349 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v349;
  v350 = *(_DWORD *)(v348[1] + 556);
  if (v350 != *(_DWORD *)(*v348 + 272))
  {
    v351 = *(_QWORD *)(v348[2] + 8);
    if ((v350 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v350 & 0x20000000) != 0)
      v353 = v352;
    else
      v353 = v350 & 0xCFFFFFFF;
    if ((v353 & 0x40000000) != 0)
    {
      v354 = *(_QWORD **)v351;
      v355 = *v354;
      v356 = *(_DWORD *)(*v354 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v356);
      a4.f32[1] = (float)(a3.i32[1] / v356);
      a4.f32[2] = (float)(v349 / v356);
      v357 = (const float *)(*v354 + 1656);
      v506 = vld3_f32(v357);
      v358 = *(_QWORD *)(v354[1] + 144);
      v359.i64[0] = 0x3F0000003F000000;
      v359.i64[1] = 0x3F0000003F000000;
      v360 = vaddq_f32(a4, v359);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v360.f32[0]), v506.val[1], *(float32x2_t *)v360.f32, 1), v506.val[2], v360, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v349;
      v361 = vmulq_n_f32(vaddq_f32(a3, v359), *(float *)&v358);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v355 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v361.f32[0]), v506.val[1], *(float32x2_t *)v361.f32, 1), v506.val[2], v361, 2);
    }
    else if (!(v353 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v351 + 16), *(_QWORD *)(*(_QWORD *)(v351 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v351 + 8) + 2448) + 520 * v353, *(_QWORD *)(*(_QWORD *)(v351 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v362 = *a1;
  a4.i64[0] = 0x100000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000004);
  *(_QWORD *)v488 = a3.i64[0];
  v363 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v363;
  v364 = *(_DWORD *)(v362[1] + 560);
  if (v364 != *(_DWORD *)(*v362 + 272))
  {
    v365 = *(_QWORD *)(v362[2] + 8);
    if ((v364 & 0x10000000) != 0)
      v366 = 0x40000000;
    else
      v366 = 0x80000000;
    if ((v364 & 0x20000000) != 0)
      v367 = v366;
    else
      v367 = v364 & 0xCFFFFFFF;
    if ((v367 & 0x40000000) != 0)
    {
      v368 = *(_QWORD **)v365;
      v369 = *v368;
      v370 = *(_DWORD *)(*v368 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v370);
      a4.f32[1] = (float)(a3.i32[1] / v370);
      a4.f32[2] = (float)(v363 / v370);
      v371 = (const float *)(*v368 + 1656);
      v507 = vld3_f32(v371);
      v372 = *(_QWORD *)(v368[1] + 144);
      v373.i64[0] = 0x3F0000003F000000;
      v373.i64[1] = 0x3F0000003F000000;
      v374 = vaddq_f32(a4, v373);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v374.f32[0]), v507.val[1], *(float32x2_t *)v374.f32, 1), v507.val[2], v374, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v363;
      v375 = vmulq_n_f32(vaddq_f32(a3, v373), *(float *)&v372);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v369 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v375.f32[0]), v507.val[1], *(float32x2_t *)v375.f32, 1), v507.val[2], v375, 2);
    }
    else if (!(v367 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v365 + 16), *(_QWORD *)(*(_QWORD *)(v365 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v365 + 8) + 2448) + 520 * v367, *(_QWORD *)(*(_QWORD *)(v365 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v376 = *a1;
  a4.i64[0] = 0x100000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000005);
  *(_QWORD *)v488 = a3.i64[0];
  v377 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v377;
  v378 = *(_DWORD *)(v376[1] + 564);
  if (v378 != *(_DWORD *)(*v376 + 272))
  {
    v379 = *(_QWORD *)(v376[2] + 8);
    if ((v378 & 0x10000000) != 0)
      v380 = 0x40000000;
    else
      v380 = 0x80000000;
    if ((v378 & 0x20000000) != 0)
      v381 = v380;
    else
      v381 = v378 & 0xCFFFFFFF;
    if ((v381 & 0x40000000) != 0)
    {
      v382 = *(_QWORD **)v379;
      v383 = *v382;
      v384 = *(_DWORD *)(*v382 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v384);
      a4.f32[1] = (float)(a3.i32[1] / v384);
      a4.f32[2] = (float)(v377 / v384);
      v385 = (const float *)(*v382 + 1656);
      v508 = vld3_f32(v385);
      v386 = *(_QWORD *)(v382[1] + 144);
      v387.i64[0] = 0x3F0000003F000000;
      v387.i64[1] = 0x3F0000003F000000;
      v388 = vaddq_f32(a4, v387);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v388.f32[0]), v508.val[1], *(float32x2_t *)v388.f32, 1), v508.val[2], v388, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v377;
      v389 = vmulq_n_f32(vaddq_f32(a3, v387), *(float *)&v386);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v383 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v389.f32[0]), v508.val[1], *(float32x2_t *)v389.f32, 1), v508.val[2], v389, 2);
    }
    else if (!(v381 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v379 + 16), *(_QWORD *)(*(_QWORD *)(v379 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v379 + 8) + 2448) + 520 * v381, *(_QWORD *)(*(_QWORD *)(v379 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v390 = *a1;
  a4.i64[0] = 0x100000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000006);
  *(_QWORD *)v488 = a3.i64[0];
  v391 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v391;
  v392 = *(_DWORD *)(v390[1] + 568);
  if (v392 != *(_DWORD *)(*v390 + 272))
  {
    v393 = *(_QWORD *)(v390[2] + 8);
    if ((v392 & 0x10000000) != 0)
      v394 = 0x40000000;
    else
      v394 = 0x80000000;
    if ((v392 & 0x20000000) != 0)
      v395 = v394;
    else
      v395 = v392 & 0xCFFFFFFF;
    if ((v395 & 0x40000000) != 0)
    {
      v396 = *(_QWORD **)v393;
      v397 = *v396;
      v398 = *(_DWORD *)(*v396 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v398);
      a4.f32[1] = (float)(a3.i32[1] / v398);
      a4.f32[2] = (float)(v391 / v398);
      v399 = (const float *)(*v396 + 1656);
      v509 = vld3_f32(v399);
      v400 = *(_QWORD *)(v396[1] + 144);
      v401.i64[0] = 0x3F0000003F000000;
      v401.i64[1] = 0x3F0000003F000000;
      v402 = vaddq_f32(a4, v401);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v402.f32[0]), v509.val[1], *(float32x2_t *)v402.f32, 1), v509.val[2], v402, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v391;
      v403 = vmulq_n_f32(vaddq_f32(a3, v401), *(float *)&v400);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v397 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v403.f32[0]), v509.val[1], *(float32x2_t *)v403.f32, 1), v509.val[2], v403, 2);
    }
    else if (!(v395 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v393 + 16), *(_QWORD *)(*(_QWORD *)(v393 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v393 + 8) + 2448) + 520 * v395, *(_QWORD *)(*(_QWORD *)(v393 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v404 = *a1;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000007);
  *(_QWORD *)v488 = a3.i64[0];
  v405 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v405;
  v406 = *(_DWORD *)(v404[1] + 572);
  if (v406 != *(_DWORD *)(*v404 + 272))
  {
    v407 = *(_QWORD *)(v404[2] + 8);
    if ((v406 & 0x10000000) != 0)
      v408 = 0x40000000;
    else
      v408 = 0x80000000;
    if ((v406 & 0x20000000) != 0)
      v409 = v408;
    else
      v409 = v406 & 0xCFFFFFFF;
    if ((v409 & 0x40000000) != 0)
    {
      v410 = *(_QWORD **)v407;
      v411 = *v410;
      v412 = *(_DWORD *)(*v410 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v412);
      a4.f32[1] = (float)(a3.i32[1] / v412);
      a4.f32[2] = (float)(v405 / v412);
      v413 = (const float *)(*v410 + 1656);
      v510 = vld3_f32(v413);
      v414 = *(_QWORD *)(v410[1] + 144);
      v415.i64[0] = 0x3F0000003F000000;
      v415.i64[1] = 0x3F0000003F000000;
      v416 = vaddq_f32(a4, v415);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v416.f32[0]), v510.val[1], *(float32x2_t *)v416.f32, 1), v510.val[2], v416, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v405;
      v417 = vmulq_n_f32(vaddq_f32(a3, v415), *(float *)&v414);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v411 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v417.f32[0]), v510.val[1], *(float32x2_t *)v417.f32, 1), v510.val[2], v417, 2);
    }
    else if (!(v409 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v407 + 16), *(_QWORD *)(*(_QWORD *)(v407 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v407 + 8) + 2448) + 520 * v409, *(_QWORD *)(*(_QWORD *)(v407 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v418 = *a1;
  v419 = *(_DWORD *)a2;
  *(_DWORD *)v488 = *(_DWORD *)a2;
  a4.i64[0] = 0x200000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000002);
  *(_QWORD *)&v488[4] = a3.i64[0];
  v420 = *(_DWORD *)(v418[1] + 576);
  if (v420 != *(_DWORD *)(*v418 + 272))
  {
    v421 = *(_QWORD *)(v418[2] + 8);
    if ((v420 & 0x10000000) != 0)
      v422 = 0x40000000;
    else
      v422 = 0x80000000;
    if ((v420 & 0x20000000) != 0)
      v423 = v422;
    else
      v423 = v420 & 0xCFFFFFFF;
    if ((v423 & 0x40000000) != 0)
    {
      v424 = *(_QWORD **)v421;
      v425 = *v424;
      v426 = (const float *)(*v424 + 1656);
      v427 = *(_QWORD *)(v424[1] + 144);
      LODWORD(v424) = *(_DWORD *)(*v424 + 8);
      v428 = a3.i32[1];
      a5.f32[0] = (float)(v419 / (int)v424);
      a5.f32[1] = (float)(a3.i32[0] / (int)v424);
      a5.f32[2] = (float)(a3.i32[1] / (int)v424);
      v429.i64[0] = 0x3F0000003F000000;
      v429.i64[1] = 0x3F0000003F000000;
      v524 = vld3_f32(v426);
      v430 = vaddq_f32(a5, v429);
      *(int32x2_t *)v430.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v524.val[0], v430.f32[0]), v524.val[1], *(float32x2_t *)v430.f32, 1), v524.val[2], v430, 2), (float32x2_t)0xBF000000BF000000));
      v489 = *(int32x2_t *)v430.f32;
      v490 = 0;
      v430.i32[0] = v419;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v430.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v428;
      v431 = vmulq_n_f32(vaddq_f32(a3, v429), *(float *)&v427);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v425 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v524.val[0], v431.f32[0]), v524.val[1], *(float32x2_t *)v431.f32, 1), v524.val[2], v431, 2);
    }
    else if (!(v423 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v421 + 16), *(_QWORD *)(*(_QWORD *)(v421 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v421 + 8) + 2448) + 520 * v423, *(_QWORD *)(*(_QWORD *)(v421 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v432 = *a1;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000001);
  *(_QWORD *)v488 = a3.i64[0];
  v433 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v433;
  v434 = *(_DWORD *)(v432[1] + 580);
  if (v434 != *(_DWORD *)(*v432 + 272))
  {
    v435 = *(_QWORD *)(v432[2] + 8);
    if ((v434 & 0x10000000) != 0)
      v436 = 0x40000000;
    else
      v436 = 0x80000000;
    if ((v434 & 0x20000000) != 0)
      v437 = v436;
    else
      v437 = v434 & 0xCFFFFFFF;
    if ((v437 & 0x40000000) != 0)
    {
      v438 = *(_QWORD **)v435;
      v439 = *v438;
      v440 = *(_DWORD *)(*v438 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v440);
      a4.f32[1] = (float)(a3.i32[1] / v440);
      a4.f32[2] = (float)(v433 / v440);
      v441 = (const float *)(*v438 + 1656);
      v511 = vld3_f32(v441);
      v442 = *(_QWORD *)(v438[1] + 144);
      v443.i64[0] = 0x3F0000003F000000;
      v443.i64[1] = 0x3F0000003F000000;
      v444 = vaddq_f32(a4, v443);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v511.val[0], v444.f32[0]), v511.val[1], *(float32x2_t *)v444.f32, 1), v511.val[2], v444, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v433;
      v445 = vmulq_n_f32(vaddq_f32(a3, v443), *(float *)&v442);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v439 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v511.val[0], v445.f32[0]), v511.val[1], *(float32x2_t *)v445.f32, 1), v511.val[2], v445, 2);
    }
    else if (!(v437 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v435 + 16), *(_QWORD *)(*(_QWORD *)(v435 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v435 + 8) + 2448) + 520 * v437, *(_QWORD *)(*(_QWORD *)(v435 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v446 = *a1;
  a4.i64[0] = 0x200000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000002);
  *(_QWORD *)v488 = a3.i64[0];
  v447 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v447;
  v448 = *(_DWORD *)(v446[1] + 584);
  if (v448 != *(_DWORD *)(*v446 + 272))
  {
    v449 = *(_QWORD *)(v446[2] + 8);
    if ((v448 & 0x10000000) != 0)
      v450 = 0x40000000;
    else
      v450 = 0x80000000;
    if ((v448 & 0x20000000) != 0)
      v451 = v450;
    else
      v451 = v448 & 0xCFFFFFFF;
    if ((v451 & 0x40000000) != 0)
    {
      v452 = *(_QWORD **)v449;
      v453 = *v452;
      v454 = *(_DWORD *)(*v452 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v454);
      a4.f32[1] = (float)(a3.i32[1] / v454);
      a4.f32[2] = (float)(v447 / v454);
      v455 = (const float *)(*v452 + 1656);
      v512 = vld3_f32(v455);
      v456 = *(_QWORD *)(v452[1] + 144);
      v457.i64[0] = 0x3F0000003F000000;
      v457.i64[1] = 0x3F0000003F000000;
      v458 = vaddq_f32(a4, v457);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v512.val[0], v458.f32[0]), v512.val[1], *(float32x2_t *)v458.f32, 1), v512.val[2], v458, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v447;
      v459 = vmulq_n_f32(vaddq_f32(a3, v457), *(float *)&v456);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v453 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v512.val[0], v459.f32[0]), v512.val[1], *(float32x2_t *)v459.f32, 1), v512.val[2], v459, 2);
    }
    else if (!(v451 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v449 + 16), *(_QWORD *)(*(_QWORD *)(v449 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v449 + 8) + 2448) + 520 * v451, *(_QWORD *)(*(_QWORD *)(v449 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v460 = *a1;
  a4.i64[0] = 0x200000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_QWORD *)v488 = a3.i64[0];
  v461 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v461;
  v462 = *(_DWORD *)(v460[1] + 588);
  if (v462 != *(_DWORD *)(*v460 + 272))
  {
    v463 = *(_QWORD *)(v460[2] + 8);
    if ((v462 & 0x10000000) != 0)
      v464 = 0x40000000;
    else
      v464 = 0x80000000;
    if ((v462 & 0x20000000) != 0)
      v465 = v464;
    else
      v465 = v462 & 0xCFFFFFFF;
    if ((v465 & 0x40000000) != 0)
    {
      v466 = *(_QWORD **)v463;
      v467 = *v466;
      v468 = *(_DWORD *)(*v466 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v468);
      a4.f32[1] = (float)(a3.i32[1] / v468);
      a4.f32[2] = (float)(v461 / v468);
      v469 = (const float *)(*v466 + 1656);
      v513 = vld3_f32(v469);
      v470 = *(_QWORD *)(v466[1] + 144);
      v471.i64[0] = 0x3F0000003F000000;
      v471.i64[1] = 0x3F0000003F000000;
      v472 = vaddq_f32(a4, v471);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v513.val[0], v472.f32[0]), v513.val[1], *(float32x2_t *)v472.f32, 1), v513.val[2], v472, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v461;
      v473 = vmulq_n_f32(vaddq_f32(a3, v471), *(float *)&v470);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v467 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v513.val[0], v473.f32[0]), v513.val[1], *(float32x2_t *)v473.f32, 1), v513.val[2], v473, 2);
    }
    else if (!(v465 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v463 + 16), *(_QWORD *)(*(_QWORD *)(v463 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v463 + 8) + 2448) + 520 * v465, *(_QWORD *)(*(_QWORD *)(v463 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v474 = *a1;
  a4.i64[0] = 0x200000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_QWORD *)v488 = a3.i64[0];
  v475 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v475;
  v476 = *(_DWORD *)(v474[1] + 592);
  if (v476 != *(_DWORD *)(*v474 + 272))
  {
    v477 = *(_QWORD *)(v474[2] + 8);
    if ((v476 & 0x10000000) != 0)
      v478 = 0x40000000;
    else
      v478 = 0x80000000;
    if ((v476 & 0x20000000) != 0)
      v479 = v478;
    else
      v479 = v476 & 0xCFFFFFFF;
    if ((v479 & 0x40000000) != 0)
    {
      v480 = *(_QWORD **)v477;
      v481 = *v480;
      v482 = *(_DWORD *)(*v480 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v482);
      a4.f32[1] = (float)(a3.i32[1] / v482);
      a4.f32[2] = (float)(v475 / v482);
      v483 = (const float *)(*v480 + 1656);
      v514 = vld3_f32(v483);
      v484 = *(_QWORD *)(v480[1] + 144);
      v485.i64[0] = 0x3F0000003F000000;
      v485.i64[1] = 0x3F0000003F000000;
      v486 = vaddq_f32(a4, v485);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v514.val[0], v486.f32[0]), v514.val[1], *(float32x2_t *)v486.f32, 1), v514.val[2], v486, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v475;
      v487 = vmulq_n_f32(vaddq_f32(a3, v485), *(float *)&v484);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v481 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v514.val[0], v487.f32[0]), v514.val[1], *(float32x2_t *)v487.f32, 1), v514.val[2], v487, 2);
    }
    else if (!(v479 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v477 + 16), *(_QWORD *)(*(_QWORD *)(v477 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v477 + 8) + 2448) + 520 * v479, *(_QWORD *)(*(_QWORD *)(v477 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  sub_2239C5260(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_2239C5260(_QWORD **a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  const float *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  const float *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  const float *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  _QWORD *v54;
  __int32 v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  const float *v62;
  uint64_t v63;
  int v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  _QWORD *v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  const float *v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  _QWORD *v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  const float *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _QWORD *v96;
  int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  const float *v105;
  uint64_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD *v110;
  int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  const float *v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  _QWORD *v124;
  int v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  const float *v133;
  uint64_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  _QWORD *v138;
  int v139;
  int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  _QWORD *v144;
  uint64_t v145;
  int v146;
  const float *v147;
  uint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  _QWORD *v152;
  int v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  const float *v161;
  uint64_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  _QWORD *v166;
  __int32 v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  _QWORD *v172;
  uint64_t v173;
  const float *v174;
  uint64_t v175;
  int v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  _QWORD *v180;
  int v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  _QWORD *v186;
  uint64_t v187;
  int v188;
  const float *v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  _QWORD *v194;
  int v195;
  int v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  _QWORD *v200;
  uint64_t v201;
  int v202;
  const float *v203;
  uint64_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  _QWORD *v208;
  int v209;
  int v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  _QWORD *v214;
  uint64_t v215;
  int v216;
  const float *v217;
  uint64_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  _QWORD *v222;
  int v223;
  int v224;
  uint64_t v225;
  unsigned int v226;
  unsigned int v227;
  _QWORD *v228;
  uint64_t v229;
  int v230;
  const float *v231;
  uint64_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  _QWORD *v236;
  int v237;
  int v238;
  uint64_t v239;
  unsigned int v240;
  unsigned int v241;
  _QWORD *v242;
  uint64_t v243;
  int v244;
  const float *v245;
  uint64_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  _QWORD *v250;
  int v251;
  int v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  _QWORD *v256;
  uint64_t v257;
  int v258;
  const float *v259;
  uint64_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  _QWORD *v264;
  int v265;
  int v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int v269;
  _QWORD *v270;
  uint64_t v271;
  int v272;
  const float *v273;
  uint64_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  _QWORD *v278;
  __int32 v279;
  int v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  _QWORD *v284;
  uint64_t v285;
  const float *v286;
  uint64_t v287;
  int v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  _QWORD *v292;
  int v293;
  int v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  _QWORD *v298;
  uint64_t v299;
  int v300;
  const float *v301;
  uint64_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  _QWORD *v306;
  int v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  _QWORD *v312;
  uint64_t v313;
  int v314;
  const float *v315;
  uint64_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  _QWORD *v320;
  int v321;
  int v322;
  uint64_t v323;
  unsigned int v324;
  unsigned int v325;
  _QWORD *v326;
  uint64_t v327;
  int v328;
  const float *v329;
  uint64_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  _QWORD *v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  _QWORD *v340;
  uint64_t v341;
  int v342;
  const float *v343;
  uint64_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  _QWORD *v348;
  int v349;
  int v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  _QWORD *v354;
  uint64_t v355;
  int v356;
  const float *v357;
  uint64_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  _QWORD *v362;
  int v363;
  int v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  _QWORD *v368;
  uint64_t v369;
  int v370;
  const float *v371;
  uint64_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  _QWORD *v376;
  int v377;
  int v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  _QWORD *v382;
  uint64_t v383;
  int v384;
  const float *v385;
  uint64_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  _QWORD *v390;
  __int32 v391;
  int v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  _QWORD *v396;
  uint64_t v397;
  const float *v398;
  uint64_t v399;
  int v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  _QWORD *v404;
  int v405;
  int v406;
  uint64_t v407;
  unsigned int v408;
  unsigned int v409;
  _QWORD *v410;
  uint64_t v411;
  int v412;
  const float *v413;
  uint64_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  _QWORD *v418;
  int v419;
  int v420;
  uint64_t v421;
  unsigned int v422;
  unsigned int v423;
  _QWORD *v424;
  uint64_t v425;
  int v426;
  const float *v427;
  uint64_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  _QWORD *v432;
  int v433;
  int v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  _QWORD *v438;
  uint64_t v439;
  int v440;
  const float *v441;
  uint64_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  _QWORD *v446;
  int v447;
  int v448;
  uint64_t v449;
  unsigned int v450;
  unsigned int v451;
  _QWORD *v452;
  uint64_t v453;
  int v454;
  const float *v455;
  uint64_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  _QWORD *v460;
  int v461;
  int v462;
  uint64_t v463;
  unsigned int v464;
  unsigned int v465;
  _QWORD *v466;
  uint64_t v467;
  int v468;
  const float *v469;
  uint64_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  _BYTE v474[12];
  int32x2_t v475;
  int v476;
  int32x2_t *v477;
  float32x2x3_t v478;
  float32x2x3_t v479;
  float32x2x3_t v480;
  float32x2x3_t v481;
  float32x2x3_t v482;
  float32x2x3_t v483;
  float32x2x3_t v484;
  float32x2x3_t v485;
  float32x2x3_t v486;
  float32x2x3_t v487;
  float32x2x3_t v488;
  float32x2x3_t v489;
  float32x2x3_t v490;
  float32x2x3_t v491;
  float32x2x3_t v492;
  float32x2x3_t v493;
  float32x2x3_t v494;
  float32x2x3_t v495;
  float32x2x3_t v496;
  float32x2x3_t v497;
  float32x2x3_t v498;
  float32x2x3_t v499;
  float32x2x3_t v500;
  float32x2x3_t v501;
  float32x2x3_t v502;
  float32x2x3_t v503;
  float32x2x3_t v504;
  float32x2x3_t v505;
  float32x2x3_t v506;
  float32x2x3_t v507;
  float32x2x3_t v508;
  float32x2x3_t v509;
  float32x2x3_t v510;

  v12 = *a1;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_QWORD *)v474 = a3.i64[0];
  v13 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v13;
  v14 = *(_DWORD *)(v12[1] + 596);
  if (v14 != *(_DWORD *)(*v12 + 272))
  {
    v15 = *(_QWORD *)(v12[2] + 8);
    if ((v14 & 0x10000000) != 0)
      v16 = 0x40000000;
    else
      v16 = 0x80000000;
    if ((v14 & 0x20000000) != 0)
      v17 = v16;
    else
      v17 = v14 & 0xCFFFFFFF;
    if ((v17 & 0x40000000) != 0)
    {
      v18 = *(_QWORD **)v15;
      v19 = *v18;
      v20 = *(_DWORD *)(*v18 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v20);
      a4.f32[1] = (float)(a3.i32[1] / v20);
      a4.f32[2] = (float)(v13 / v20);
      v21 = (const float *)(*v18 + 1656);
      v478 = vld3_f32(v21);
      v22 = *(_QWORD *)(v18[1] + 144);
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      v24 = vaddq_f32(a4, v23);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v478.val[0], v24.f32[0]), v478.val[1], *(float32x2_t *)v24.f32, 1), v478.val[2], v24, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v13;
      v25 = vmulq_n_f32(vaddq_f32(a3, v23), *(float *)&v22);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v19 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v478.val[0], v25.f32[0]), v478.val[1], *(float32x2_t *)v25.f32, 1), v478.val[2], v25, 2);
    }
    else if (!(v17 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v15 + 16), *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 2448) + 520 * v17, *(_QWORD *)(*(_QWORD *)(v15 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v26 = *a1;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_QWORD *)v474 = a3.i64[0];
  v27 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v27;
  v28 = *(_DWORD *)(v26[1] + 600);
  if (v28 != *(_DWORD *)(*v26 + 272))
  {
    v29 = *(_QWORD *)(v26[2] + 8);
    if ((v28 & 0x10000000) != 0)
      v30 = 0x40000000;
    else
      v30 = 0x80000000;
    if ((v28 & 0x20000000) != 0)
      v31 = v30;
    else
      v31 = v28 & 0xCFFFFFFF;
    if ((v31 & 0x40000000) != 0)
    {
      v32 = *(_QWORD **)v29;
      v33 = *v32;
      v34 = *(_DWORD *)(*v32 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v34);
      a4.f32[1] = (float)(a3.i32[1] / v34);
      a4.f32[2] = (float)(v27 / v34);
      v35 = (const float *)(*v32 + 1656);
      v479 = vld3_f32(v35);
      v36 = *(_QWORD *)(v32[1] + 144);
      v37.i64[0] = 0x3F0000003F000000;
      v37.i64[1] = 0x3F0000003F000000;
      v38 = vaddq_f32(a4, v37);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v479.val[0], v38.f32[0]), v479.val[1], *(float32x2_t *)v38.f32, 1), v479.val[2], v38, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v27;
      v39 = vmulq_n_f32(vaddq_f32(a3, v37), *(float *)&v36);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v33 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v479.val[0], v39.f32[0]), v479.val[1], *(float32x2_t *)v39.f32, 1), v479.val[2], v39, 2);
    }
    else if (!(v31 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v29 + 16), *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v29 + 8) + 2448) + 520 * v31, *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v40 = *a1;
  a4.i64[0] = 0x200000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_QWORD *)v474 = a3.i64[0];
  v41 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v41;
  v42 = *(_DWORD *)(v40[1] + 604);
  if (v42 != *(_DWORD *)(*v40 + 272))
  {
    v43 = *(_QWORD *)(v40[2] + 8);
    if ((v42 & 0x10000000) != 0)
      v44 = 0x40000000;
    else
      v44 = 0x80000000;
    if ((v42 & 0x20000000) != 0)
      v45 = v44;
    else
      v45 = v42 & 0xCFFFFFFF;
    if ((v45 & 0x40000000) != 0)
    {
      v46 = *(_QWORD **)v43;
      v47 = *v46;
      v48 = *(_DWORD *)(*v46 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v48);
      a4.f32[1] = (float)(a3.i32[1] / v48);
      a4.f32[2] = (float)(v41 / v48);
      v49 = (const float *)(*v46 + 1656);
      v480 = vld3_f32(v49);
      v50 = *(_QWORD *)(v46[1] + 144);
      v51.i64[0] = 0x3F0000003F000000;
      v51.i64[1] = 0x3F0000003F000000;
      v52 = vaddq_f32(a4, v51);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v480.val[0], v52.f32[0]), v480.val[1], *(float32x2_t *)v52.f32, 1), v480.val[2], v52, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v41;
      v53 = vmulq_n_f32(vaddq_f32(a3, v51), *(float *)&v50);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v47 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v480.val[0], v53.f32[0]), v480.val[1], *(float32x2_t *)v53.f32, 1), v480.val[2], v53, 2);
    }
    else if (!(v45 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v43 + 16), *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v43 + 8) + 2448) + 520 * v45, *(_QWORD *)(*(_QWORD *)(v43 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v54 = *a1;
  v55 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  a4.i64[0] = 0x200000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000003);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v56 = *(_DWORD *)(v54[1] + 608);
  if (v56 != *(_DWORD *)(*v54 + 272))
  {
    v57 = *(_QWORD *)(v54[2] + 8);
    if ((v56 & 0x10000000) != 0)
      v58 = 0x40000000;
    else
      v58 = 0x80000000;
    if ((v56 & 0x20000000) != 0)
      v59 = v58;
    else
      v59 = v56 & 0xCFFFFFFF;
    if ((v59 & 0x40000000) != 0)
    {
      v60 = *(_QWORD **)v57;
      v61 = *v60;
      v62 = (const float *)(*v60 + 1656);
      v63 = *(_QWORD *)(v60[1] + 144);
      LODWORD(v60) = *(_DWORD *)(*v60 + 8);
      v64 = a3.i32[1];
      a5.f32[0] = (float)(v55 / (int)v60);
      a5.f32[1] = (float)(a3.i32[0] / (int)v60);
      a5.f32[2] = (float)(a3.i32[1] / (int)v60);
      v65.i64[0] = 0x3F0000003F000000;
      v65.i64[1] = 0x3F0000003F000000;
      v507 = vld3_f32(v62);
      v66 = vaddq_f32(a5, v65);
      *(int32x2_t *)v66.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v66.f32[0]), v507.val[1], *(float32x2_t *)v66.f32, 1), v507.val[2], v66, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v66.f32;
      v476 = 0;
      v66.i32[0] = v55;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v66.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v64;
      v67 = vmulq_n_f32(vaddq_f32(a3, v65), *(float *)&v63);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v61 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v67.f32[0]), v507.val[1], *(float32x2_t *)v67.f32, 1), v507.val[2], v67, 2);
    }
    else if (!(v59 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v57 + 16), *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v57 + 8) + 2448) + 520 * v59, *(_QWORD *)(*(_QWORD *)(v57 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v68 = *a1;
  a4.i64[0] = 0x300000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000001);
  *(_QWORD *)v474 = a3.i64[0];
  v69 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v69;
  v70 = *(_DWORD *)(v68[1] + 612);
  if (v70 != *(_DWORD *)(*v68 + 272))
  {
    v71 = *(_QWORD *)(v68[2] + 8);
    if ((v70 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v73 = v72;
    else
      v73 = v70 & 0xCFFFFFFF;
    if ((v73 & 0x40000000) != 0)
    {
      v74 = *(_QWORD **)v71;
      v75 = *v74;
      v76 = *(_DWORD *)(*v74 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v76);
      a4.f32[1] = (float)(a3.i32[1] / v76);
      a4.f32[2] = (float)(v69 / v76);
      v77 = (const float *)(*v74 + 1656);
      v481 = vld3_f32(v77);
      v78 = *(_QWORD *)(v74[1] + 144);
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      v80 = vaddq_f32(a4, v79);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v481.val[0], v80.f32[0]), v481.val[1], *(float32x2_t *)v80.f32, 1), v481.val[2], v80, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v69;
      v81 = vmulq_n_f32(vaddq_f32(a3, v79), *(float *)&v78);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v75 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v481.val[0], v81.f32[0]), v481.val[1], *(float32x2_t *)v81.f32, 1), v481.val[2], v81, 2);
    }
    else if (!(v73 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v71 + 16), *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v71 + 8) + 2448) + 520 * v73, *(_QWORD *)(*(_QWORD *)(v71 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v82 = *a1;
  a4.i64[0] = 0x300000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000002);
  *(_QWORD *)v474 = a3.i64[0];
  v83 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v83;
  v84 = *(_DWORD *)(v82[1] + 616);
  if (v84 != *(_DWORD *)(*v82 + 272))
  {
    v85 = *(_QWORD *)(v82[2] + 8);
    if ((v84 & 0x10000000) != 0)
      v86 = 0x40000000;
    else
      v86 = 0x80000000;
    if ((v84 & 0x20000000) != 0)
      v87 = v86;
    else
      v87 = v84 & 0xCFFFFFFF;
    if ((v87 & 0x40000000) != 0)
    {
      v88 = *(_QWORD **)v85;
      v89 = *v88;
      v90 = *(_DWORD *)(*v88 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v90);
      a4.f32[1] = (float)(a3.i32[1] / v90);
      a4.f32[2] = (float)(v83 / v90);
      v91 = (const float *)(*v88 + 1656);
      v482 = vld3_f32(v91);
      v92 = *(_QWORD *)(v88[1] + 144);
      v93.i64[0] = 0x3F0000003F000000;
      v93.i64[1] = 0x3F0000003F000000;
      v94 = vaddq_f32(a4, v93);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v482.val[0], v94.f32[0]), v482.val[1], *(float32x2_t *)v94.f32, 1), v482.val[2], v94, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v83;
      v95 = vmulq_n_f32(vaddq_f32(a3, v93), *(float *)&v92);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v89 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v482.val[0], v95.f32[0]), v482.val[1], *(float32x2_t *)v95.f32, 1), v482.val[2], v95, 2);
    }
    else if (!(v87 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v85 + 16), *(_QWORD *)(*(_QWORD *)(v85 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v85 + 8) + 2448) + 520 * v87, *(_QWORD *)(*(_QWORD *)(v85 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v96 = *a1;
  a4.i64[0] = 0x300000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000003);
  *(_QWORD *)v474 = a3.i64[0];
  v97 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v97;
  v98 = *(_DWORD *)(v96[1] + 620);
  if (v98 != *(_DWORD *)(*v96 + 272))
  {
    v99 = *(_QWORD *)(v96[2] + 8);
    if ((v98 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v98 & 0x20000000) != 0)
      v101 = v100;
    else
      v101 = v98 & 0xCFFFFFFF;
    if ((v101 & 0x40000000) != 0)
    {
      v102 = *(_QWORD **)v99;
      v103 = *v102;
      v104 = *(_DWORD *)(*v102 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v104);
      a4.f32[1] = (float)(a3.i32[1] / v104);
      a4.f32[2] = (float)(v97 / v104);
      v105 = (const float *)(*v102 + 1656);
      v483 = vld3_f32(v105);
      v106 = *(_QWORD *)(v102[1] + 144);
      v107.i64[0] = 0x3F0000003F000000;
      v107.i64[1] = 0x3F0000003F000000;
      v108 = vaddq_f32(a4, v107);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v483.val[0], v108.f32[0]), v483.val[1], *(float32x2_t *)v108.f32, 1), v483.val[2], v108, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v97;
      v109 = vmulq_n_f32(vaddq_f32(a3, v107), *(float *)&v106);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v103 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v483.val[0], v109.f32[0]), v483.val[1], *(float32x2_t *)v109.f32, 1), v483.val[2], v109, 2);
    }
    else if (!(v101 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v99 + 16), *(_QWORD *)(*(_QWORD *)(v99 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v99 + 8) + 2448) + 520 * v101, *(_QWORD *)(*(_QWORD *)(v99 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v110 = *a1;
  a4.i64[0] = 0x300000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000004);
  *(_QWORD *)v474 = a3.i64[0];
  v111 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v111;
  v112 = *(_DWORD *)(v110[1] + 624);
  if (v112 != *(_DWORD *)(*v110 + 272))
  {
    v113 = *(_QWORD *)(v110[2] + 8);
    if ((v112 & 0x10000000) != 0)
      v114 = 0x40000000;
    else
      v114 = 0x80000000;
    if ((v112 & 0x20000000) != 0)
      v115 = v114;
    else
      v115 = v112 & 0xCFFFFFFF;
    if ((v115 & 0x40000000) != 0)
    {
      v116 = *(_QWORD **)v113;
      v117 = *v116;
      v118 = *(_DWORD *)(*v116 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v118);
      a4.f32[1] = (float)(a3.i32[1] / v118);
      a4.f32[2] = (float)(v111 / v118);
      v119 = (const float *)(*v116 + 1656);
      v484 = vld3_f32(v119);
      v120 = *(_QWORD *)(v116[1] + 144);
      v121.i64[0] = 0x3F0000003F000000;
      v121.i64[1] = 0x3F0000003F000000;
      v122 = vaddq_f32(a4, v121);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v484.val[0], v122.f32[0]), v484.val[1], *(float32x2_t *)v122.f32, 1), v484.val[2], v122, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v111;
      v123 = vmulq_n_f32(vaddq_f32(a3, v121), *(float *)&v120);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v117 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v484.val[0], v123.f32[0]), v484.val[1], *(float32x2_t *)v123.f32, 1), v484.val[2], v123, 2);
    }
    else if (!(v115 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v113 + 16), *(_QWORD *)(*(_QWORD *)(v113 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v113 + 8) + 2448) + 520 * v115, *(_QWORD *)(*(_QWORD *)(v113 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v124 = *a1;
  a4.i64[0] = 0x300000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000005);
  *(_QWORD *)v474 = a3.i64[0];
  v125 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v125;
  v126 = *(_DWORD *)(v124[1] + 628);
  if (v126 != *(_DWORD *)(*v124 + 272))
  {
    v127 = *(_QWORD *)(v124[2] + 8);
    if ((v126 & 0x10000000) != 0)
      v128 = 0x40000000;
    else
      v128 = 0x80000000;
    if ((v126 & 0x20000000) != 0)
      v129 = v128;
    else
      v129 = v126 & 0xCFFFFFFF;
    if ((v129 & 0x40000000) != 0)
    {
      v130 = *(_QWORD **)v127;
      v131 = *v130;
      v132 = *(_DWORD *)(*v130 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v132);
      a4.f32[1] = (float)(a3.i32[1] / v132);
      a4.f32[2] = (float)(v125 / v132);
      v133 = (const float *)(*v130 + 1656);
      v485 = vld3_f32(v133);
      v134 = *(_QWORD *)(v130[1] + 144);
      v135.i64[0] = 0x3F0000003F000000;
      v135.i64[1] = 0x3F0000003F000000;
      v136 = vaddq_f32(a4, v135);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v485.val[0], v136.f32[0]), v485.val[1], *(float32x2_t *)v136.f32, 1), v485.val[2], v136, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v125;
      v137 = vmulq_n_f32(vaddq_f32(a3, v135), *(float *)&v134);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v131 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v485.val[0], v137.f32[0]), v485.val[1], *(float32x2_t *)v137.f32, 1), v485.val[2], v137, 2);
    }
    else if (!(v129 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v127 + 16), *(_QWORD *)(*(_QWORD *)(v127 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v127 + 8) + 2448) + 520 * v129, *(_QWORD *)(*(_QWORD *)(v127 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v138 = *a1;
  a4.i64[0] = 0x300000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000006);
  *(_QWORD *)v474 = a3.i64[0];
  v139 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v139;
  v140 = *(_DWORD *)(v138[1] + 632);
  if (v140 != *(_DWORD *)(*v138 + 272))
  {
    v141 = *(_QWORD *)(v138[2] + 8);
    if ((v140 & 0x10000000) != 0)
      v142 = 0x40000000;
    else
      v142 = 0x80000000;
    if ((v140 & 0x20000000) != 0)
      v143 = v142;
    else
      v143 = v140 & 0xCFFFFFFF;
    if ((v143 & 0x40000000) != 0)
    {
      v144 = *(_QWORD **)v141;
      v145 = *v144;
      v146 = *(_DWORD *)(*v144 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v146);
      a4.f32[1] = (float)(a3.i32[1] / v146);
      a4.f32[2] = (float)(v139 / v146);
      v147 = (const float *)(*v144 + 1656);
      v486 = vld3_f32(v147);
      v148 = *(_QWORD *)(v144[1] + 144);
      v149.i64[0] = 0x3F0000003F000000;
      v149.i64[1] = 0x3F0000003F000000;
      v150 = vaddq_f32(a4, v149);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v486.val[0], v150.f32[0]), v486.val[1], *(float32x2_t *)v150.f32, 1), v486.val[2], v150, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v139;
      v151 = vmulq_n_f32(vaddq_f32(a3, v149), *(float *)&v148);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v145 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v486.val[0], v151.f32[0]), v486.val[1], *(float32x2_t *)v151.f32, 1), v486.val[2], v151, 2);
    }
    else if (!(v143 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v141 + 16), *(_QWORD *)(*(_QWORD *)(v141 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v141 + 8) + 2448) + 520 * v143, *(_QWORD *)(*(_QWORD *)(v141 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v152 = *a1;
  a4.i64[0] = 0x300000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000007);
  *(_QWORD *)v474 = a3.i64[0];
  v153 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v153;
  v154 = *(_DWORD *)(v152[1] + 636);
  if (v154 != *(_DWORD *)(*v152 + 272))
  {
    v155 = *(_QWORD *)(v152[2] + 8);
    if ((v154 & 0x10000000) != 0)
      v156 = 0x40000000;
    else
      v156 = 0x80000000;
    if ((v154 & 0x20000000) != 0)
      v157 = v156;
    else
      v157 = v154 & 0xCFFFFFFF;
    if ((v157 & 0x40000000) != 0)
    {
      v158 = *(_QWORD **)v155;
      v159 = *v158;
      v160 = *(_DWORD *)(*v158 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v160);
      a4.f32[1] = (float)(a3.i32[1] / v160);
      a4.f32[2] = (float)(v153 / v160);
      v161 = (const float *)(*v158 + 1656);
      v487 = vld3_f32(v161);
      v162 = *(_QWORD *)(v158[1] + 144);
      v163.i64[0] = 0x3F0000003F000000;
      v163.i64[1] = 0x3F0000003F000000;
      v164 = vaddq_f32(a4, v163);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v487.val[0], v164.f32[0]), v487.val[1], *(float32x2_t *)v164.f32, 1), v487.val[2], v164, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v153;
      v165 = vmulq_n_f32(vaddq_f32(a3, v163), *(float *)&v162);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v159 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v487.val[0], v165.f32[0]), v487.val[1], *(float32x2_t *)v165.f32, 1), v487.val[2], v165, 2);
    }
    else if (!(v157 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v155 + 16), *(_QWORD *)(*(_QWORD *)(v155 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v155 + 8) + 2448) + 520 * v157, *(_QWORD *)(*(_QWORD *)(v155 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v166 = *a1;
  v167 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  a4.i64[0] = 0x200000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000004);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v168 = *(_DWORD *)(v166[1] + 640);
  if (v168 != *(_DWORD *)(*v166 + 272))
  {
    v169 = *(_QWORD *)(v166[2] + 8);
    if ((v168 & 0x10000000) != 0)
      v170 = 0x40000000;
    else
      v170 = 0x80000000;
    if ((v168 & 0x20000000) != 0)
      v171 = v170;
    else
      v171 = v168 & 0xCFFFFFFF;
    if ((v171 & 0x40000000) != 0)
    {
      v172 = *(_QWORD **)v169;
      v173 = *v172;
      v174 = (const float *)(*v172 + 1656);
      v175 = *(_QWORD *)(v172[1] + 144);
      LODWORD(v172) = *(_DWORD *)(*v172 + 8);
      v176 = a3.i32[1];
      a5.f32[0] = (float)(v167 / (int)v172);
      a5.f32[1] = (float)(a3.i32[0] / (int)v172);
      a5.f32[2] = (float)(a3.i32[1] / (int)v172);
      v177.i64[0] = 0x3F0000003F000000;
      v177.i64[1] = 0x3F0000003F000000;
      v508 = vld3_f32(v174);
      v178 = vaddq_f32(a5, v177);
      *(int32x2_t *)v178.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v178.f32[0]), v508.val[1], *(float32x2_t *)v178.f32, 1), v508.val[2], v178, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v178.f32;
      v476 = 0;
      v178.i32[0] = v167;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v178.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v176;
      v179 = vmulq_n_f32(vaddq_f32(a3, v177), *(float *)&v175);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v173 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v179.f32[0]), v508.val[1], *(float32x2_t *)v179.f32, 1), v508.val[2], v179, 2);
    }
    else if (!(v171 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v169 + 16), *(_QWORD *)(*(_QWORD *)(v169 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v169 + 8) + 2448) + 520 * v171, *(_QWORD *)(*(_QWORD *)(v169 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v180 = *a1;
  a4.i64[0] = 0x400000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000001);
  *(_QWORD *)v474 = a3.i64[0];
  v181 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v181;
  v182 = *(_DWORD *)(v180[1] + 644);
  if (v182 != *(_DWORD *)(*v180 + 272))
  {
    v183 = *(_QWORD *)(v180[2] + 8);
    if ((v182 & 0x10000000) != 0)
      v184 = 0x40000000;
    else
      v184 = 0x80000000;
    if ((v182 & 0x20000000) != 0)
      v185 = v184;
    else
      v185 = v182 & 0xCFFFFFFF;
    if ((v185 & 0x40000000) != 0)
    {
      v186 = *(_QWORD **)v183;
      v187 = *v186;
      v188 = *(_DWORD *)(*v186 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v188);
      a4.f32[1] = (float)(a3.i32[1] / v188);
      a4.f32[2] = (float)(v181 / v188);
      v189 = (const float *)(*v186 + 1656);
      v488 = vld3_f32(v189);
      v190 = *(_QWORD *)(v186[1] + 144);
      v191.i64[0] = 0x3F0000003F000000;
      v191.i64[1] = 0x3F0000003F000000;
      v192 = vaddq_f32(a4, v191);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v488.val[0], v192.f32[0]), v488.val[1], *(float32x2_t *)v192.f32, 1), v488.val[2], v192, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v181;
      v193 = vmulq_n_f32(vaddq_f32(a3, v191), *(float *)&v190);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v187 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v488.val[0], v193.f32[0]), v488.val[1], *(float32x2_t *)v193.f32, 1), v488.val[2], v193, 2);
    }
    else if (!(v185 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v183 + 16), *(_QWORD *)(*(_QWORD *)(v183 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v183 + 8) + 2448) + 520 * v185, *(_QWORD *)(*(_QWORD *)(v183 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v194 = *a1;
  a4.i64[0] = 0x400000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000002);
  *(_QWORD *)v474 = a3.i64[0];
  v195 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v195;
  v196 = *(_DWORD *)(v194[1] + 648);
  if (v196 != *(_DWORD *)(*v194 + 272))
  {
    v197 = *(_QWORD *)(v194[2] + 8);
    if ((v196 & 0x10000000) != 0)
      v198 = 0x40000000;
    else
      v198 = 0x80000000;
    if ((v196 & 0x20000000) != 0)
      v199 = v198;
    else
      v199 = v196 & 0xCFFFFFFF;
    if ((v199 & 0x40000000) != 0)
    {
      v200 = *(_QWORD **)v197;
      v201 = *v200;
      v202 = *(_DWORD *)(*v200 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v202);
      a4.f32[1] = (float)(a3.i32[1] / v202);
      a4.f32[2] = (float)(v195 / v202);
      v203 = (const float *)(*v200 + 1656);
      v489 = vld3_f32(v203);
      v204 = *(_QWORD *)(v200[1] + 144);
      v205.i64[0] = 0x3F0000003F000000;
      v205.i64[1] = 0x3F0000003F000000;
      v206 = vaddq_f32(a4, v205);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v489.val[0], v206.f32[0]), v489.val[1], *(float32x2_t *)v206.f32, 1), v489.val[2], v206, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v195;
      v207 = vmulq_n_f32(vaddq_f32(a3, v205), *(float *)&v204);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v201 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v489.val[0], v207.f32[0]), v489.val[1], *(float32x2_t *)v207.f32, 1), v489.val[2], v207, 2);
    }
    else if (!(v199 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v197 + 16), *(_QWORD *)(*(_QWORD *)(v197 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v197 + 8) + 2448) + 520 * v199, *(_QWORD *)(*(_QWORD *)(v197 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v208 = *a1;
  a4.i64[0] = 0x400000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000003);
  *(_QWORD *)v474 = a3.i64[0];
  v209 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v209;
  v210 = *(_DWORD *)(v208[1] + 652);
  if (v210 != *(_DWORD *)(*v208 + 272))
  {
    v211 = *(_QWORD *)(v208[2] + 8);
    if ((v210 & 0x10000000) != 0)
      v212 = 0x40000000;
    else
      v212 = 0x80000000;
    if ((v210 & 0x20000000) != 0)
      v213 = v212;
    else
      v213 = v210 & 0xCFFFFFFF;
    if ((v213 & 0x40000000) != 0)
    {
      v214 = *(_QWORD **)v211;
      v215 = *v214;
      v216 = *(_DWORD *)(*v214 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v216);
      a4.f32[1] = (float)(a3.i32[1] / v216);
      a4.f32[2] = (float)(v209 / v216);
      v217 = (const float *)(*v214 + 1656);
      v490 = vld3_f32(v217);
      v218 = *(_QWORD *)(v214[1] + 144);
      v219.i64[0] = 0x3F0000003F000000;
      v219.i64[1] = 0x3F0000003F000000;
      v220 = vaddq_f32(a4, v219);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v490.val[0], v220.f32[0]), v490.val[1], *(float32x2_t *)v220.f32, 1), v490.val[2], v220, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v209;
      v221 = vmulq_n_f32(vaddq_f32(a3, v219), *(float *)&v218);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v215 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v490.val[0], v221.f32[0]), v490.val[1], *(float32x2_t *)v221.f32, 1), v490.val[2], v221, 2);
    }
    else if (!(v213 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v211 + 16), *(_QWORD *)(*(_QWORD *)(v211 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v211 + 8) + 2448) + 520 * v213, *(_QWORD *)(*(_QWORD *)(v211 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v222 = *a1;
  a4.i64[0] = 0x400000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000004);
  *(_QWORD *)v474 = a3.i64[0];
  v223 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v223;
  v224 = *(_DWORD *)(v222[1] + 656);
  if (v224 != *(_DWORD *)(*v222 + 272))
  {
    v225 = *(_QWORD *)(v222[2] + 8);
    if ((v224 & 0x10000000) != 0)
      v226 = 0x40000000;
    else
      v226 = 0x80000000;
    if ((v224 & 0x20000000) != 0)
      v227 = v226;
    else
      v227 = v224 & 0xCFFFFFFF;
    if ((v227 & 0x40000000) != 0)
    {
      v228 = *(_QWORD **)v225;
      v229 = *v228;
      v230 = *(_DWORD *)(*v228 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v230);
      a4.f32[1] = (float)(a3.i32[1] / v230);
      a4.f32[2] = (float)(v223 / v230);
      v231 = (const float *)(*v228 + 1656);
      v491 = vld3_f32(v231);
      v232 = *(_QWORD *)(v228[1] + 144);
      v233.i64[0] = 0x3F0000003F000000;
      v233.i64[1] = 0x3F0000003F000000;
      v234 = vaddq_f32(a4, v233);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v491.val[0], v234.f32[0]), v491.val[1], *(float32x2_t *)v234.f32, 1), v491.val[2], v234, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v223;
      v235 = vmulq_n_f32(vaddq_f32(a3, v233), *(float *)&v232);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v229 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v491.val[0], v235.f32[0]), v491.val[1], *(float32x2_t *)v235.f32, 1), v491.val[2], v235, 2);
    }
    else if (!(v227 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v225 + 16), *(_QWORD *)(*(_QWORD *)(v225 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v225 + 8) + 2448) + 520 * v227, *(_QWORD *)(*(_QWORD *)(v225 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v236 = *a1;
  a4.i64[0] = 0x400000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000005);
  *(_QWORD *)v474 = a3.i64[0];
  v237 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v237;
  v238 = *(_DWORD *)(v236[1] + 660);
  if (v238 != *(_DWORD *)(*v236 + 272))
  {
    v239 = *(_QWORD *)(v236[2] + 8);
    if ((v238 & 0x10000000) != 0)
      v240 = 0x40000000;
    else
      v240 = 0x80000000;
    if ((v238 & 0x20000000) != 0)
      v241 = v240;
    else
      v241 = v238 & 0xCFFFFFFF;
    if ((v241 & 0x40000000) != 0)
    {
      v242 = *(_QWORD **)v239;
      v243 = *v242;
      v244 = *(_DWORD *)(*v242 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v244);
      a4.f32[1] = (float)(a3.i32[1] / v244);
      a4.f32[2] = (float)(v237 / v244);
      v245 = (const float *)(*v242 + 1656);
      v492 = vld3_f32(v245);
      v246 = *(_QWORD *)(v242[1] + 144);
      v247.i64[0] = 0x3F0000003F000000;
      v247.i64[1] = 0x3F0000003F000000;
      v248 = vaddq_f32(a4, v247);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v248.f32[0]), v492.val[1], *(float32x2_t *)v248.f32, 1), v492.val[2], v248, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v237;
      v249 = vmulq_n_f32(vaddq_f32(a3, v247), *(float *)&v246);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v243 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v249.f32[0]), v492.val[1], *(float32x2_t *)v249.f32, 1), v492.val[2], v249, 2);
    }
    else if (!(v241 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v239 + 16), *(_QWORD *)(*(_QWORD *)(v239 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v239 + 8) + 2448) + 520 * v241, *(_QWORD *)(*(_QWORD *)(v239 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v250 = *a1;
  a4.i64[0] = 0x400000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000006);
  *(_QWORD *)v474 = a3.i64[0];
  v251 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v251;
  v252 = *(_DWORD *)(v250[1] + 664);
  if (v252 != *(_DWORD *)(*v250 + 272))
  {
    v253 = *(_QWORD *)(v250[2] + 8);
    if ((v252 & 0x10000000) != 0)
      v254 = 0x40000000;
    else
      v254 = 0x80000000;
    if ((v252 & 0x20000000) != 0)
      v255 = v254;
    else
      v255 = v252 & 0xCFFFFFFF;
    if ((v255 & 0x40000000) != 0)
    {
      v256 = *(_QWORD **)v253;
      v257 = *v256;
      v258 = *(_DWORD *)(*v256 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v258);
      a4.f32[1] = (float)(a3.i32[1] / v258);
      a4.f32[2] = (float)(v251 / v258);
      v259 = (const float *)(*v256 + 1656);
      v493 = vld3_f32(v259);
      v260 = *(_QWORD *)(v256[1] + 144);
      v261.i64[0] = 0x3F0000003F000000;
      v261.i64[1] = 0x3F0000003F000000;
      v262 = vaddq_f32(a4, v261);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v262.f32[0]), v493.val[1], *(float32x2_t *)v262.f32, 1), v493.val[2], v262, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v251;
      v263 = vmulq_n_f32(vaddq_f32(a3, v261), *(float *)&v260);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v257 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v263.f32[0]), v493.val[1], *(float32x2_t *)v263.f32, 1), v493.val[2], v263, 2);
    }
    else if (!(v255 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v253 + 16), *(_QWORD *)(*(_QWORD *)(v253 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v253 + 8) + 2448) + 520 * v255, *(_QWORD *)(*(_QWORD *)(v253 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v264 = *a1;
  a4.i64[0] = 0x400000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000007);
  *(_QWORD *)v474 = a3.i64[0];
  v265 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v265;
  v266 = *(_DWORD *)(v264[1] + 668);
  if (v266 != *(_DWORD *)(*v264 + 272))
  {
    v267 = *(_QWORD *)(v264[2] + 8);
    if ((v266 & 0x10000000) != 0)
      v268 = 0x40000000;
    else
      v268 = 0x80000000;
    if ((v266 & 0x20000000) != 0)
      v269 = v268;
    else
      v269 = v266 & 0xCFFFFFFF;
    if ((v269 & 0x40000000) != 0)
    {
      v270 = *(_QWORD **)v267;
      v271 = *v270;
      v272 = *(_DWORD *)(*v270 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v272);
      a4.f32[1] = (float)(a3.i32[1] / v272);
      a4.f32[2] = (float)(v265 / v272);
      v273 = (const float *)(*v270 + 1656);
      v494 = vld3_f32(v273);
      v274 = *(_QWORD *)(v270[1] + 144);
      v275.i64[0] = 0x3F0000003F000000;
      v275.i64[1] = 0x3F0000003F000000;
      v276 = vaddq_f32(a4, v275);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v276.f32[0]), v494.val[1], *(float32x2_t *)v276.f32, 1), v494.val[2], v276, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v265;
      v277 = vmulq_n_f32(vaddq_f32(a3, v275), *(float *)&v274);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v271 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v277.f32[0]), v494.val[1], *(float32x2_t *)v277.f32, 1), v494.val[2], v277, 2);
    }
    else if (!(v269 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v267 + 16), *(_QWORD *)(*(_QWORD *)(v267 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v267 + 8) + 2448) + 520 * v269, *(_QWORD *)(*(_QWORD *)(v267 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v278 = *a1;
  v279 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000005);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v280 = *(_DWORD *)(v278[1] + 672);
  if (v280 != *(_DWORD *)(*v278 + 272))
  {
    v281 = *(_QWORD *)(v278[2] + 8);
    if ((v280 & 0x10000000) != 0)
      v282 = 0x40000000;
    else
      v282 = 0x80000000;
    if ((v280 & 0x20000000) != 0)
      v283 = v282;
    else
      v283 = v280 & 0xCFFFFFFF;
    if ((v283 & 0x40000000) != 0)
    {
      v284 = *(_QWORD **)v281;
      v285 = *v284;
      v286 = (const float *)(*v284 + 1656);
      v287 = *(_QWORD *)(v284[1] + 144);
      LODWORD(v284) = *(_DWORD *)(*v284 + 8);
      v288 = a3.i32[1];
      a5.f32[0] = (float)(v279 / (int)v284);
      a5.f32[1] = (float)(a3.i32[0] / (int)v284);
      a5.f32[2] = (float)(a3.i32[1] / (int)v284);
      v289.i64[0] = 0x3F0000003F000000;
      v289.i64[1] = 0x3F0000003F000000;
      v509 = vld3_f32(v286);
      v290 = vaddq_f32(a5, v289);
      *(int32x2_t *)v290.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v290.f32[0]), v509.val[1], *(float32x2_t *)v290.f32, 1), v509.val[2], v290, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v290.f32;
      v476 = 0;
      v290.i32[0] = v279;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v290.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v288;
      v291 = vmulq_n_f32(vaddq_f32(a3, v289), *(float *)&v287);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v285 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v291.f32[0]), v509.val[1], *(float32x2_t *)v291.f32, 1), v509.val[2], v291, 2);
    }
    else if (!(v283 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v281 + 16), *(_QWORD *)(*(_QWORD *)(v281 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v281 + 8) + 2448) + 520 * v283, *(_QWORD *)(*(_QWORD *)(v281 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v292 = *a1;
  a4.i64[0] = 0x500000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000001);
  *(_QWORD *)v474 = a3.i64[0];
  v293 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v293;
  v294 = *(_DWORD *)(v292[1] + 676);
  if (v294 != *(_DWORD *)(*v292 + 272))
  {
    v295 = *(_QWORD *)(v292[2] + 8);
    if ((v294 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v294 & 0x20000000) != 0)
      v297 = v296;
    else
      v297 = v294 & 0xCFFFFFFF;
    if ((v297 & 0x40000000) != 0)
    {
      v298 = *(_QWORD **)v295;
      v299 = *v298;
      v300 = *(_DWORD *)(*v298 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v300);
      a4.f32[1] = (float)(a3.i32[1] / v300);
      a4.f32[2] = (float)(v293 / v300);
      v301 = (const float *)(*v298 + 1656);
      v495 = vld3_f32(v301);
      v302 = *(_QWORD *)(v298[1] + 144);
      v303.i64[0] = 0x3F0000003F000000;
      v303.i64[1] = 0x3F0000003F000000;
      v304 = vaddq_f32(a4, v303);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v304.f32[0]), v495.val[1], *(float32x2_t *)v304.f32, 1), v495.val[2], v304, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v293;
      v305 = vmulq_n_f32(vaddq_f32(a3, v303), *(float *)&v302);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v299 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v305.f32[0]), v495.val[1], *(float32x2_t *)v305.f32, 1), v495.val[2], v305, 2);
    }
    else if (!(v297 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v295 + 16), *(_QWORD *)(*(_QWORD *)(v295 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v295 + 8) + 2448) + 520 * v297, *(_QWORD *)(*(_QWORD *)(v295 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v306 = *a1;
  a4.i64[0] = 0x500000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000002);
  *(_QWORD *)v474 = a3.i64[0];
  v307 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v307;
  v308 = *(_DWORD *)(v306[1] + 680);
  if (v308 != *(_DWORD *)(*v306 + 272))
  {
    v309 = *(_QWORD *)(v306[2] + 8);
    if ((v308 & 0x10000000) != 0)
      v310 = 0x40000000;
    else
      v310 = 0x80000000;
    if ((v308 & 0x20000000) != 0)
      v311 = v310;
    else
      v311 = v308 & 0xCFFFFFFF;
    if ((v311 & 0x40000000) != 0)
    {
      v312 = *(_QWORD **)v309;
      v313 = *v312;
      v314 = *(_DWORD *)(*v312 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v314);
      a4.f32[1] = (float)(a3.i32[1] / v314);
      a4.f32[2] = (float)(v307 / v314);
      v315 = (const float *)(*v312 + 1656);
      v496 = vld3_f32(v315);
      v316 = *(_QWORD *)(v312[1] + 144);
      v317.i64[0] = 0x3F0000003F000000;
      v317.i64[1] = 0x3F0000003F000000;
      v318 = vaddq_f32(a4, v317);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v318.f32[0]), v496.val[1], *(float32x2_t *)v318.f32, 1), v496.val[2], v318, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v307;
      v319 = vmulq_n_f32(vaddq_f32(a3, v317), *(float *)&v316);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v313 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v319.f32[0]), v496.val[1], *(float32x2_t *)v319.f32, 1), v496.val[2], v319, 2);
    }
    else if (!(v311 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v309 + 16), *(_QWORD *)(*(_QWORD *)(v309 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v309 + 8) + 2448) + 520 * v311, *(_QWORD *)(*(_QWORD *)(v309 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v320 = *a1;
  a4.i64[0] = 0x500000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000003);
  *(_QWORD *)v474 = a3.i64[0];
  v321 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v321;
  v322 = *(_DWORD *)(v320[1] + 684);
  if (v322 != *(_DWORD *)(*v320 + 272))
  {
    v323 = *(_QWORD *)(v320[2] + 8);
    if ((v322 & 0x10000000) != 0)
      v324 = 0x40000000;
    else
      v324 = 0x80000000;
    if ((v322 & 0x20000000) != 0)
      v325 = v324;
    else
      v325 = v322 & 0xCFFFFFFF;
    if ((v325 & 0x40000000) != 0)
    {
      v326 = *(_QWORD **)v323;
      v327 = *v326;
      v328 = *(_DWORD *)(*v326 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v328);
      a4.f32[1] = (float)(a3.i32[1] / v328);
      a4.f32[2] = (float)(v321 / v328);
      v329 = (const float *)(*v326 + 1656);
      v497 = vld3_f32(v329);
      v330 = *(_QWORD *)(v326[1] + 144);
      v331.i64[0] = 0x3F0000003F000000;
      v331.i64[1] = 0x3F0000003F000000;
      v332 = vaddq_f32(a4, v331);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v332.f32[0]), v497.val[1], *(float32x2_t *)v332.f32, 1), v497.val[2], v332, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v321;
      v333 = vmulq_n_f32(vaddq_f32(a3, v331), *(float *)&v330);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v327 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v333.f32[0]), v497.val[1], *(float32x2_t *)v333.f32, 1), v497.val[2], v333, 2);
    }
    else if (!(v325 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v323 + 16), *(_QWORD *)(*(_QWORD *)(v323 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v323 + 8) + 2448) + 520 * v325, *(_QWORD *)(*(_QWORD *)(v323 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v334 = *a1;
  a4.i64[0] = 0x500000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000004);
  *(_QWORD *)v474 = a3.i64[0];
  v335 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v335;
  v336 = *(_DWORD *)(v334[1] + 688);
  if (v336 != *(_DWORD *)(*v334 + 272))
  {
    v337 = *(_QWORD *)(v334[2] + 8);
    if ((v336 & 0x10000000) != 0)
      v338 = 0x40000000;
    else
      v338 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v339 = v338;
    else
      v339 = v336 & 0xCFFFFFFF;
    if ((v339 & 0x40000000) != 0)
    {
      v340 = *(_QWORD **)v337;
      v341 = *v340;
      v342 = *(_DWORD *)(*v340 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v342);
      a4.f32[1] = (float)(a3.i32[1] / v342);
      a4.f32[2] = (float)(v335 / v342);
      v343 = (const float *)(*v340 + 1656);
      v498 = vld3_f32(v343);
      v344 = *(_QWORD *)(v340[1] + 144);
      v345.i64[0] = 0x3F0000003F000000;
      v345.i64[1] = 0x3F0000003F000000;
      v346 = vaddq_f32(a4, v345);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v346.f32[0]), v498.val[1], *(float32x2_t *)v346.f32, 1), v498.val[2], v346, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v335;
      v347 = vmulq_n_f32(vaddq_f32(a3, v345), *(float *)&v344);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v341 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v347.f32[0]), v498.val[1], *(float32x2_t *)v347.f32, 1), v498.val[2], v347, 2);
    }
    else if (!(v339 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v337 + 16), *(_QWORD *)(*(_QWORD *)(v337 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v337 + 8) + 2448) + 520 * v339, *(_QWORD *)(*(_QWORD *)(v337 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v348 = *a1;
  a4.i64[0] = 0x500000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000005);
  *(_QWORD *)v474 = a3.i64[0];
  v349 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v349;
  v350 = *(_DWORD *)(v348[1] + 692);
  if (v350 != *(_DWORD *)(*v348 + 272))
  {
    v351 = *(_QWORD *)(v348[2] + 8);
    if ((v350 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v350 & 0x20000000) != 0)
      v353 = v352;
    else
      v353 = v350 & 0xCFFFFFFF;
    if ((v353 & 0x40000000) != 0)
    {
      v354 = *(_QWORD **)v351;
      v355 = *v354;
      v356 = *(_DWORD *)(*v354 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v356);
      a4.f32[1] = (float)(a3.i32[1] / v356);
      a4.f32[2] = (float)(v349 / v356);
      v357 = (const float *)(*v354 + 1656);
      v499 = vld3_f32(v357);
      v358 = *(_QWORD *)(v354[1] + 144);
      v359.i64[0] = 0x3F0000003F000000;
      v359.i64[1] = 0x3F0000003F000000;
      v360 = vaddq_f32(a4, v359);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v360.f32[0]), v499.val[1], *(float32x2_t *)v360.f32, 1), v499.val[2], v360, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v349;
      v361 = vmulq_n_f32(vaddq_f32(a3, v359), *(float *)&v358);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v355 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v361.f32[0]), v499.val[1], *(float32x2_t *)v361.f32, 1), v499.val[2], v361, 2);
    }
    else if (!(v353 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v351 + 16), *(_QWORD *)(*(_QWORD *)(v351 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v351 + 8) + 2448) + 520 * v353, *(_QWORD *)(*(_QWORD *)(v351 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v362 = *a1;
  a4.i64[0] = 0x500000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000006);
  *(_QWORD *)v474 = a3.i64[0];
  v363 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v363;
  v364 = *(_DWORD *)(v362[1] + 696);
  if (v364 != *(_DWORD *)(*v362 + 272))
  {
    v365 = *(_QWORD *)(v362[2] + 8);
    if ((v364 & 0x10000000) != 0)
      v366 = 0x40000000;
    else
      v366 = 0x80000000;
    if ((v364 & 0x20000000) != 0)
      v367 = v366;
    else
      v367 = v364 & 0xCFFFFFFF;
    if ((v367 & 0x40000000) != 0)
    {
      v368 = *(_QWORD **)v365;
      v369 = *v368;
      v370 = *(_DWORD *)(*v368 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v370);
      a4.f32[1] = (float)(a3.i32[1] / v370);
      a4.f32[2] = (float)(v363 / v370);
      v371 = (const float *)(*v368 + 1656);
      v500 = vld3_f32(v371);
      v372 = *(_QWORD *)(v368[1] + 144);
      v373.i64[0] = 0x3F0000003F000000;
      v373.i64[1] = 0x3F0000003F000000;
      v374 = vaddq_f32(a4, v373);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v374.f32[0]), v500.val[1], *(float32x2_t *)v374.f32, 1), v500.val[2], v374, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v363;
      v375 = vmulq_n_f32(vaddq_f32(a3, v373), *(float *)&v372);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v369 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v375.f32[0]), v500.val[1], *(float32x2_t *)v375.f32, 1), v500.val[2], v375, 2);
    }
    else if (!(v367 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v365 + 16), *(_QWORD *)(*(_QWORD *)(v365 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v365 + 8) + 2448) + 520 * v367, *(_QWORD *)(*(_QWORD *)(v365 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v376 = *a1;
  a4.i64[0] = 0x500000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000007);
  *(_QWORD *)v474 = a3.i64[0];
  v377 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v377;
  v378 = *(_DWORD *)(v376[1] + 700);
  if (v378 != *(_DWORD *)(*v376 + 272))
  {
    v379 = *(_QWORD *)(v376[2] + 8);
    if ((v378 & 0x10000000) != 0)
      v380 = 0x40000000;
    else
      v380 = 0x80000000;
    if ((v378 & 0x20000000) != 0)
      v381 = v380;
    else
      v381 = v378 & 0xCFFFFFFF;
    if ((v381 & 0x40000000) != 0)
    {
      v382 = *(_QWORD **)v379;
      v383 = *v382;
      v384 = *(_DWORD *)(*v382 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v384);
      a4.f32[1] = (float)(a3.i32[1] / v384);
      a4.f32[2] = (float)(v377 / v384);
      v385 = (const float *)(*v382 + 1656);
      v501 = vld3_f32(v385);
      v386 = *(_QWORD *)(v382[1] + 144);
      v387.i64[0] = 0x3F0000003F000000;
      v387.i64[1] = 0x3F0000003F000000;
      v388 = vaddq_f32(a4, v387);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v388.f32[0]), v501.val[1], *(float32x2_t *)v388.f32, 1), v501.val[2], v388, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v377;
      v389 = vmulq_n_f32(vaddq_f32(a3, v387), *(float *)&v386);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v383 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v389.f32[0]), v501.val[1], *(float32x2_t *)v389.f32, 1), v501.val[2], v389, 2);
    }
    else if (!(v381 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v379 + 16), *(_QWORD *)(*(_QWORD *)(v379 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v379 + 8) + 2448) + 520 * v381, *(_QWORD *)(*(_QWORD *)(v379 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v390 = *a1;
  v391 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000006);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v392 = *(_DWORD *)(v390[1] + 704);
  if (v392 != *(_DWORD *)(*v390 + 272))
  {
    v393 = *(_QWORD *)(v390[2] + 8);
    if ((v392 & 0x10000000) != 0)
      v394 = 0x40000000;
    else
      v394 = 0x80000000;
    if ((v392 & 0x20000000) != 0)
      v395 = v394;
    else
      v395 = v392 & 0xCFFFFFFF;
    if ((v395 & 0x40000000) != 0)
    {
      v396 = *(_QWORD **)v393;
      v397 = *v396;
      v398 = (const float *)(*v396 + 1656);
      v399 = *(_QWORD *)(v396[1] + 144);
      LODWORD(v396) = *(_DWORD *)(*v396 + 8);
      v400 = a3.i32[1];
      a5.f32[0] = (float)(v391 / (int)v396);
      a5.f32[1] = (float)(a3.i32[0] / (int)v396);
      a5.f32[2] = (float)(a3.i32[1] / (int)v396);
      v401.i64[0] = 0x3F0000003F000000;
      v401.i64[1] = 0x3F0000003F000000;
      v510 = vld3_f32(v398);
      v402 = vaddq_f32(a5, v401);
      *(int32x2_t *)v402.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v402.f32[0]), v510.val[1], *(float32x2_t *)v402.f32, 1), v510.val[2], v402, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v402.f32;
      v476 = 0;
      v402.i32[0] = v391;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v402.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v400;
      v403 = vmulq_n_f32(vaddq_f32(a3, v401), *(float *)&v399);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v397 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v403.f32[0]), v510.val[1], *(float32x2_t *)v403.f32, 1), v510.val[2], v403, 2);
    }
    else if (!(v395 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v393 + 16), *(_QWORD *)(*(_QWORD *)(v393 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v393 + 8) + 2448) + 520 * v395, *(_QWORD *)(*(_QWORD *)(v393 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v404 = *a1;
  a4.i64[0] = 0x600000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_QWORD *)v474 = a3.i64[0];
  v405 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v405;
  v406 = *(_DWORD *)(v404[1] + 708);
  if (v406 != *(_DWORD *)(*v404 + 272))
  {
    v407 = *(_QWORD *)(v404[2] + 8);
    if ((v406 & 0x10000000) != 0)
      v408 = 0x40000000;
    else
      v408 = 0x80000000;
    if ((v406 & 0x20000000) != 0)
      v409 = v408;
    else
      v409 = v406 & 0xCFFFFFFF;
    if ((v409 & 0x40000000) != 0)
    {
      v410 = *(_QWORD **)v407;
      v411 = *v410;
      v412 = *(_DWORD *)(*v410 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v412);
      a4.f32[1] = (float)(a3.i32[1] / v412);
      a4.f32[2] = (float)(v405 / v412);
      v413 = (const float *)(*v410 + 1656);
      v502 = vld3_f32(v413);
      v414 = *(_QWORD *)(v410[1] + 144);
      v415.i64[0] = 0x3F0000003F000000;
      v415.i64[1] = 0x3F0000003F000000;
      v416 = vaddq_f32(a4, v415);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v416.f32[0]), v502.val[1], *(float32x2_t *)v416.f32, 1), v502.val[2], v416, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v405;
      v417 = vmulq_n_f32(vaddq_f32(a3, v415), *(float *)&v414);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v411 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v417.f32[0]), v502.val[1], *(float32x2_t *)v417.f32, 1), v502.val[2], v417, 2);
    }
    else if (!(v409 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v407 + 16), *(_QWORD *)(*(_QWORD *)(v407 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v407 + 8) + 2448) + 520 * v409, *(_QWORD *)(*(_QWORD *)(v407 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v418 = *a1;
  a4.i64[0] = 0x600000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_QWORD *)v474 = a3.i64[0];
  v419 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v419;
  v420 = *(_DWORD *)(v418[1] + 712);
  if (v420 != *(_DWORD *)(*v418 + 272))
  {
    v421 = *(_QWORD *)(v418[2] + 8);
    if ((v420 & 0x10000000) != 0)
      v422 = 0x40000000;
    else
      v422 = 0x80000000;
    if ((v420 & 0x20000000) != 0)
      v423 = v422;
    else
      v423 = v420 & 0xCFFFFFFF;
    if ((v423 & 0x40000000) != 0)
    {
      v424 = *(_QWORD **)v421;
      v425 = *v424;
      v426 = *(_DWORD *)(*v424 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v426);
      a4.f32[1] = (float)(a3.i32[1] / v426);
      a4.f32[2] = (float)(v419 / v426);
      v427 = (const float *)(*v424 + 1656);
      v503 = vld3_f32(v427);
      v428 = *(_QWORD *)(v424[1] + 144);
      v429.i64[0] = 0x3F0000003F000000;
      v429.i64[1] = 0x3F0000003F000000;
      v430 = vaddq_f32(a4, v429);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v430.f32[0]), v503.val[1], *(float32x2_t *)v430.f32, 1), v503.val[2], v430, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v419;
      v431 = vmulq_n_f32(vaddq_f32(a3, v429), *(float *)&v428);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v425 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v431.f32[0]), v503.val[1], *(float32x2_t *)v431.f32, 1), v503.val[2], v431, 2);
    }
    else if (!(v423 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v421 + 16), *(_QWORD *)(*(_QWORD *)(v421 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v421 + 8) + 2448) + 520 * v423, *(_QWORD *)(*(_QWORD *)(v421 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v432 = *a1;
  a4.i64[0] = 0x600000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_QWORD *)v474 = a3.i64[0];
  v433 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v433;
  v434 = *(_DWORD *)(v432[1] + 716);
  if (v434 != *(_DWORD *)(*v432 + 272))
  {
    v435 = *(_QWORD *)(v432[2] + 8);
    if ((v434 & 0x10000000) != 0)
      v436 = 0x40000000;
    else
      v436 = 0x80000000;
    if ((v434 & 0x20000000) != 0)
      v437 = v436;
    else
      v437 = v434 & 0xCFFFFFFF;
    if ((v437 & 0x40000000) != 0)
    {
      v438 = *(_QWORD **)v435;
      v439 = *v438;
      v440 = *(_DWORD *)(*v438 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v440);
      a4.f32[1] = (float)(a3.i32[1] / v440);
      a4.f32[2] = (float)(v433 / v440);
      v441 = (const float *)(*v438 + 1656);
      v504 = vld3_f32(v441);
      v442 = *(_QWORD *)(v438[1] + 144);
      v443.i64[0] = 0x3F0000003F000000;
      v443.i64[1] = 0x3F0000003F000000;
      v444 = vaddq_f32(a4, v443);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v444.f32[0]), v504.val[1], *(float32x2_t *)v444.f32, 1), v504.val[2], v444, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v433;
      v445 = vmulq_n_f32(vaddq_f32(a3, v443), *(float *)&v442);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v439 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v445.f32[0]), v504.val[1], *(float32x2_t *)v445.f32, 1), v504.val[2], v445, 2);
    }
    else if (!(v437 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v435 + 16), *(_QWORD *)(*(_QWORD *)(v435 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v435 + 8) + 2448) + 520 * v437, *(_QWORD *)(*(_QWORD *)(v435 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v446 = *a1;
  a4.i64[0] = 0x600000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_QWORD *)v474 = a3.i64[0];
  v447 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v447;
  v448 = *(_DWORD *)(v446[1] + 720);
  if (v448 != *(_DWORD *)(*v446 + 272))
  {
    v449 = *(_QWORD *)(v446[2] + 8);
    if ((v448 & 0x10000000) != 0)
      v450 = 0x40000000;
    else
      v450 = 0x80000000;
    if ((v448 & 0x20000000) != 0)
      v451 = v450;
    else
      v451 = v448 & 0xCFFFFFFF;
    if ((v451 & 0x40000000) != 0)
    {
      v452 = *(_QWORD **)v449;
      v453 = *v452;
      v454 = *(_DWORD *)(*v452 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v454);
      a4.f32[1] = (float)(a3.i32[1] / v454);
      a4.f32[2] = (float)(v447 / v454);
      v455 = (const float *)(*v452 + 1656);
      v505 = vld3_f32(v455);
      v456 = *(_QWORD *)(v452[1] + 144);
      v457.i64[0] = 0x3F0000003F000000;
      v457.i64[1] = 0x3F0000003F000000;
      v458 = vaddq_f32(a4, v457);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v458.f32[0]), v505.val[1], *(float32x2_t *)v458.f32, 1), v505.val[2], v458, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v447;
      v459 = vmulq_n_f32(vaddq_f32(a3, v457), *(float *)&v456);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v453 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v459.f32[0]), v505.val[1], *(float32x2_t *)v459.f32, 1), v505.val[2], v459, 2);
    }
    else if (!(v451 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v449 + 16), *(_QWORD *)(*(_QWORD *)(v449 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v449 + 8) + 2448) + 520 * v451, *(_QWORD *)(*(_QWORD *)(v449 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v460 = *a1;
  a4.i64[0] = 0x600000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_QWORD *)v474 = a3.i64[0];
  v461 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v474[8] = v461;
  v462 = *(_DWORD *)(v460[1] + 724);
  if (v462 != *(_DWORD *)(*v460 + 272))
  {
    v463 = *(_QWORD *)(v460[2] + 8);
    if ((v462 & 0x10000000) != 0)
      v464 = 0x40000000;
    else
      v464 = 0x80000000;
    if ((v462 & 0x20000000) != 0)
      v465 = v464;
    else
      v465 = v462 & 0xCFFFFFFF;
    if ((v465 & 0x40000000) != 0)
    {
      v466 = *(_QWORD **)v463;
      v467 = *v466;
      v468 = *(_DWORD *)(*v466 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v468);
      a4.f32[1] = (float)(a3.i32[1] / v468);
      a4.f32[2] = (float)(v461 / v468);
      v469 = (const float *)(*v466 + 1656);
      v506 = vld3_f32(v469);
      v470 = *(_QWORD *)(v466[1] + 144);
      v471.i64[0] = 0x3F0000003F000000;
      v471.i64[1] = 0x3F0000003F000000;
      v472 = vaddq_f32(a4, v471);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v472.f32[0]), v506.val[1], *(float32x2_t *)v472.f32, 1), v506.val[2], v472, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v461;
      v473 = vmulq_n_f32(vaddq_f32(a3, v471), *(float *)&v470);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v467 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v473.f32[0]), v506.val[1], *(float32x2_t *)v473.f32, 1), v506.val[2], v473, 2);
    }
    else if (!(v465 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v463 + 16), *(_QWORD *)(*(_QWORD *)(v463 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v463 + 8) + 2448) + 520 * v465, *(_QWORD *)(*(_QWORD *)(v463 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  sub_2239C7B54(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_2239C7B54(_QWORD **a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  const float *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  const float *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _QWORD *v40;
  __int32 v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  const float *v48;
  uint64_t v49;
  int v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  _QWORD *v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  const float *v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  _QWORD *v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  const float *v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  _QWORD *v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  const float *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _QWORD *v96;
  int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  const float *v105;
  uint64_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD *v110;
  int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  const float *v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  _QWORD *v124;
  int v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  const float *v133;
  uint64_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  _QWORD *v138;
  int v139;
  int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  _QWORD *v144;
  uint64_t v145;
  int v146;
  const float *v147;
  uint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  _QWORD *v152;
  int v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  const float *v161;
  uint64_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  _QWORD *v166;
  signed int v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  _QWORD *v174;
  uint64_t v175;
  const float *v176;
  int v177;
  uint64_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  _QWORD *v182;
  signed int v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  _QWORD *v190;
  uint64_t v191;
  const float *v192;
  int v193;
  uint64_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  _QWORD *v198;
  signed int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  _QWORD *v206;
  uint64_t v207;
  const float *v208;
  int v209;
  uint64_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  _QWORD *v214;
  signed int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  _QWORD *v222;
  uint64_t v223;
  const float *v224;
  int v225;
  uint64_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  _QWORD *v230;
  signed int v231;
  int v232;
  int v233;
  int v234;
  uint64_t v235;
  unsigned int v236;
  unsigned int v237;
  _QWORD *v238;
  uint64_t v239;
  const float *v240;
  int v241;
  uint64_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  _QWORD *v246;
  signed int v247;
  int v248;
  int v249;
  int v250;
  uint64_t v251;
  unsigned int v252;
  unsigned int v253;
  _QWORD *v254;
  uint64_t v255;
  const float *v256;
  int v257;
  uint64_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  _QWORD *v262;
  signed int v263;
  int v264;
  int v265;
  int v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int v269;
  _QWORD *v270;
  uint64_t v271;
  const float *v272;
  int v273;
  uint64_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  _QWORD *v278;
  __int32 v279;
  int v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  _QWORD *v284;
  uint64_t v285;
  const float *v286;
  uint64_t v287;
  int v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  _QWORD *v292;
  int v293;
  int v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  _QWORD *v298;
  uint64_t v299;
  int v300;
  const float *v301;
  uint64_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  _QWORD *v306;
  int v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  _QWORD *v312;
  uint64_t v313;
  int v314;
  const float *v315;
  uint64_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  _QWORD *v320;
  int v321;
  int v322;
  uint64_t v323;
  unsigned int v324;
  unsigned int v325;
  _QWORD *v326;
  uint64_t v327;
  int v328;
  const float *v329;
  uint64_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  _QWORD *v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  _QWORD *v340;
  uint64_t v341;
  int v342;
  const float *v343;
  uint64_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  _QWORD *v348;
  int v349;
  int v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  _QWORD *v354;
  uint64_t v355;
  int v356;
  const float *v357;
  uint64_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  _QWORD *v362;
  int v363;
  int v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  _QWORD *v368;
  uint64_t v369;
  int v370;
  const float *v371;
  uint64_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  _QWORD *v376;
  int v377;
  int v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  _QWORD *v382;
  uint64_t v383;
  int v384;
  const float *v385;
  uint64_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  _QWORD *v390;
  __int32 v391;
  int v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  _QWORD *v396;
  uint64_t v397;
  const float *v398;
  uint64_t v399;
  int v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  _QWORD *v404;
  int v405;
  int v406;
  uint64_t v407;
  unsigned int v408;
  unsigned int v409;
  _QWORD *v410;
  uint64_t v411;
  int v412;
  const float *v413;
  uint64_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  _QWORD *v418;
  int v419;
  int v420;
  uint64_t v421;
  unsigned int v422;
  unsigned int v423;
  _QWORD *v424;
  uint64_t v425;
  int v426;
  const float *v427;
  uint64_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  _QWORD *v432;
  int v433;
  int v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  _QWORD *v438;
  uint64_t v439;
  int v440;
  const float *v441;
  uint64_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  _QWORD *v446;
  int v447;
  int v448;
  uint64_t v449;
  unsigned int v450;
  unsigned int v451;
  _QWORD *v452;
  uint64_t v453;
  int v454;
  const float *v455;
  uint64_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  _QWORD *v460;
  int v461;
  int v462;
  uint64_t v463;
  unsigned int v464;
  unsigned int v465;
  _QWORD *v466;
  uint64_t v467;
  int v468;
  const float *v469;
  uint64_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  _QWORD *v474;
  int v475;
  int v476;
  uint64_t v477;
  unsigned int v478;
  unsigned int v479;
  _QWORD *v480;
  uint64_t v481;
  int v482;
  const float *v483;
  uint64_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  _BYTE v488[12];
  int32x2_t v489;
  int v490;
  int32x2_t *v491;
  float32x2x3_t v492;
  float32x2x3_t v493;
  float32x2x3_t v494;
  float32x2x3_t v495;
  float32x2x3_t v496;
  float32x2x3_t v497;
  float32x2x3_t v498;
  float32x2x3_t v499;
  float32x2x3_t v500;
  float32x2x3_t v501;
  float32x2x3_t v502;
  float32x2x3_t v503;
  float32x2x3_t v504;
  float32x2x3_t v505;
  float32x2x3_t v506;
  float32x2x3_t v507;
  float32x2x3_t v508;
  float32x2x3_t v509;
  float32x2x3_t v510;
  float32x2x3_t v511;
  float32x2x3_t v512;
  float32x2x3_t v513;
  float32x2x3_t v514;
  float32x2x3_t v515;
  float32x2x3_t v516;
  float32x2x3_t v517;
  float32x2x3_t v518;
  float32x2x3_t v519;
  float32x2x3_t v520;
  float32x2x3_t v521;
  float32x2x3_t v522;
  float32x2x3_t v523;
  float32x2x3_t v524;

  v12 = *a1;
  a4.i64[0] = 0x600000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_QWORD *)v488 = a3.i64[0];
  v13 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v13;
  v14 = *(_DWORD *)(v12[1] + 728);
  if (v14 != *(_DWORD *)(*v12 + 272))
  {
    v15 = *(_QWORD *)(v12[2] + 8);
    if ((v14 & 0x10000000) != 0)
      v16 = 0x40000000;
    else
      v16 = 0x80000000;
    if ((v14 & 0x20000000) != 0)
      v17 = v16;
    else
      v17 = v14 & 0xCFFFFFFF;
    if ((v17 & 0x40000000) != 0)
    {
      v18 = *(_QWORD **)v15;
      v19 = *v18;
      v20 = *(_DWORD *)(*v18 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v20);
      a4.f32[1] = (float)(a3.i32[1] / v20);
      a4.f32[2] = (float)(v13 / v20);
      v21 = (const float *)(*v18 + 1656);
      v492 = vld3_f32(v21);
      v22 = *(_QWORD *)(v18[1] + 144);
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      v24 = vaddq_f32(a4, v23);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v24.f32[0]), v492.val[1], *(float32x2_t *)v24.f32, 1), v492.val[2], v24, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v13;
      v25 = vmulq_n_f32(vaddq_f32(a3, v23), *(float *)&v22);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v19 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v25.f32[0]), v492.val[1], *(float32x2_t *)v25.f32, 1), v492.val[2], v25, 2);
    }
    else if (!(v17 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v15 + 16), *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 2448) + 520 * v17, *(_QWORD *)(*(_QWORD *)(v15 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v26 = *a1;
  a4.i64[0] = 0x600000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_QWORD *)v488 = a3.i64[0];
  v27 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v27;
  v28 = *(_DWORD *)(v26[1] + 732);
  if (v28 != *(_DWORD *)(*v26 + 272))
  {
    v29 = *(_QWORD *)(v26[2] + 8);
    if ((v28 & 0x10000000) != 0)
      v30 = 0x40000000;
    else
      v30 = 0x80000000;
    if ((v28 & 0x20000000) != 0)
      v31 = v30;
    else
      v31 = v28 & 0xCFFFFFFF;
    if ((v31 & 0x40000000) != 0)
    {
      v32 = *(_QWORD **)v29;
      v33 = *v32;
      v34 = *(_DWORD *)(*v32 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v34);
      a4.f32[1] = (float)(a3.i32[1] / v34);
      a4.f32[2] = (float)(v27 / v34);
      v35 = (const float *)(*v32 + 1656);
      v493 = vld3_f32(v35);
      v36 = *(_QWORD *)(v32[1] + 144);
      v37.i64[0] = 0x3F0000003F000000;
      v37.i64[1] = 0x3F0000003F000000;
      v38 = vaddq_f32(a4, v37);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v38.f32[0]), v493.val[1], *(float32x2_t *)v38.f32, 1), v493.val[2], v38, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v27;
      v39 = vmulq_n_f32(vaddq_f32(a3, v37), *(float *)&v36);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v33 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v39.f32[0]), v493.val[1], *(float32x2_t *)v39.f32, 1), v493.val[2], v39, 2);
    }
    else if (!(v31 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v29 + 16), *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v29 + 8) + 2448) + 520 * v31, *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v40 = *a1;
  v41 = *(_DWORD *)a2;
  *(_DWORD *)v488 = *(_DWORD *)a2;
  a4.i64[0] = 0x200000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000007);
  *(_QWORD *)&v488[4] = a3.i64[0];
  v42 = *(_DWORD *)(v40[1] + 736);
  if (v42 != *(_DWORD *)(*v40 + 272))
  {
    v43 = *(_QWORD *)(v40[2] + 8);
    if ((v42 & 0x10000000) != 0)
      v44 = 0x40000000;
    else
      v44 = 0x80000000;
    if ((v42 & 0x20000000) != 0)
      v45 = v44;
    else
      v45 = v42 & 0xCFFFFFFF;
    if ((v45 & 0x40000000) != 0)
    {
      v46 = *(_QWORD **)v43;
      v47 = *v46;
      v48 = (const float *)(*v46 + 1656);
      v49 = *(_QWORD *)(v46[1] + 144);
      LODWORD(v46) = *(_DWORD *)(*v46 + 8);
      v50 = a3.i32[1];
      a5.f32[0] = (float)(v41 / (int)v46);
      a5.f32[1] = (float)(a3.i32[0] / (int)v46);
      a5.f32[2] = (float)(a3.i32[1] / (int)v46);
      v51.i64[0] = 0x3F0000003F000000;
      v51.i64[1] = 0x3F0000003F000000;
      v515 = vld3_f32(v48);
      v52 = vaddq_f32(a5, v51);
      *(int32x2_t *)v52.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v515.val[0], v52.f32[0]), v515.val[1], *(float32x2_t *)v52.f32, 1), v515.val[2], v52, 2), (float32x2_t)0xBF000000BF000000));
      v489 = *(int32x2_t *)v52.f32;
      v490 = 0;
      v52.i32[0] = v41;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v52.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v50;
      v53 = vmulq_n_f32(vaddq_f32(a3, v51), *(float *)&v49);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v47 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v515.val[0], v53.f32[0]), v515.val[1], *(float32x2_t *)v53.f32, 1), v515.val[2], v53, 2);
    }
    else if (!(v45 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v43 + 16), *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v43 + 8) + 2448) + 520 * v45, *(_QWORD *)(*(_QWORD *)(v43 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v54 = *a1;
  a4.i64[0] = 0x700000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_QWORD *)v488 = a3.i64[0];
  v55 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v55;
  v56 = *(_DWORD *)(v54[1] + 740);
  if (v56 != *(_DWORD *)(*v54 + 272))
  {
    v57 = *(_QWORD *)(v54[2] + 8);
    if ((v56 & 0x10000000) != 0)
      v58 = 0x40000000;
    else
      v58 = 0x80000000;
    if ((v56 & 0x20000000) != 0)
      v59 = v58;
    else
      v59 = v56 & 0xCFFFFFFF;
    if ((v59 & 0x40000000) != 0)
    {
      v60 = *(_QWORD **)v57;
      v61 = *v60;
      v62 = *(_DWORD *)(*v60 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v62);
      a4.f32[1] = (float)(a3.i32[1] / v62);
      a4.f32[2] = (float)(v55 / v62);
      v63 = (const float *)(*v60 + 1656);
      v494 = vld3_f32(v63);
      v64 = *(_QWORD *)(v60[1] + 144);
      v65.i64[0] = 0x3F0000003F000000;
      v65.i64[1] = 0x3F0000003F000000;
      v66 = vaddq_f32(a4, v65);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v66.f32[0]), v494.val[1], *(float32x2_t *)v66.f32, 1), v494.val[2], v66, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v55;
      v67 = vmulq_n_f32(vaddq_f32(a3, v65), *(float *)&v64);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v61 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v67.f32[0]), v494.val[1], *(float32x2_t *)v67.f32, 1), v494.val[2], v67, 2);
    }
    else if (!(v59 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v57 + 16), *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v57 + 8) + 2448) + 520 * v59, *(_QWORD *)(*(_QWORD *)(v57 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v68 = *a1;
  a4.i64[0] = 0x700000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_QWORD *)v488 = a3.i64[0];
  v69 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v69;
  v70 = *(_DWORD *)(v68[1] + 744);
  if (v70 != *(_DWORD *)(*v68 + 272))
  {
    v71 = *(_QWORD *)(v68[2] + 8);
    if ((v70 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v73 = v72;
    else
      v73 = v70 & 0xCFFFFFFF;
    if ((v73 & 0x40000000) != 0)
    {
      v74 = *(_QWORD **)v71;
      v75 = *v74;
      v76 = *(_DWORD *)(*v74 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v76);
      a4.f32[1] = (float)(a3.i32[1] / v76);
      a4.f32[2] = (float)(v69 / v76);
      v77 = (const float *)(*v74 + 1656);
      v495 = vld3_f32(v77);
      v78 = *(_QWORD *)(v74[1] + 144);
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      v80 = vaddq_f32(a4, v79);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v80.f32[0]), v495.val[1], *(float32x2_t *)v80.f32, 1), v495.val[2], v80, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v69;
      v81 = vmulq_n_f32(vaddq_f32(a3, v79), *(float *)&v78);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v75 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v81.f32[0]), v495.val[1], *(float32x2_t *)v81.f32, 1), v495.val[2], v81, 2);
    }
    else if (!(v73 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v71 + 16), *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v71 + 8) + 2448) + 520 * v73, *(_QWORD *)(*(_QWORD *)(v71 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v82 = *a1;
  a4.i64[0] = 0x700000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_QWORD *)v488 = a3.i64[0];
  v83 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v83;
  v84 = *(_DWORD *)(v82[1] + 748);
  if (v84 != *(_DWORD *)(*v82 + 272))
  {
    v85 = *(_QWORD *)(v82[2] + 8);
    if ((v84 & 0x10000000) != 0)
      v86 = 0x40000000;
    else
      v86 = 0x80000000;
    if ((v84 & 0x20000000) != 0)
      v87 = v86;
    else
      v87 = v84 & 0xCFFFFFFF;
    if ((v87 & 0x40000000) != 0)
    {
      v88 = *(_QWORD **)v85;
      v89 = *v88;
      v90 = *(_DWORD *)(*v88 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v90);
      a4.f32[1] = (float)(a3.i32[1] / v90);
      a4.f32[2] = (float)(v83 / v90);
      v91 = (const float *)(*v88 + 1656);
      v496 = vld3_f32(v91);
      v92 = *(_QWORD *)(v88[1] + 144);
      v93.i64[0] = 0x3F0000003F000000;
      v93.i64[1] = 0x3F0000003F000000;
      v94 = vaddq_f32(a4, v93);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v94.f32[0]), v496.val[1], *(float32x2_t *)v94.f32, 1), v496.val[2], v94, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v83;
      v95 = vmulq_n_f32(vaddq_f32(a3, v93), *(float *)&v92);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v89 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v95.f32[0]), v496.val[1], *(float32x2_t *)v95.f32, 1), v496.val[2], v95, 2);
    }
    else if (!(v87 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v85 + 16), *(_QWORD *)(*(_QWORD *)(v85 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v85 + 8) + 2448) + 520 * v87, *(_QWORD *)(*(_QWORD *)(v85 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v96 = *a1;
  a4.i64[0] = 0x700000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_QWORD *)v488 = a3.i64[0];
  v97 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v97;
  v98 = *(_DWORD *)(v96[1] + 752);
  if (v98 != *(_DWORD *)(*v96 + 272))
  {
    v99 = *(_QWORD *)(v96[2] + 8);
    if ((v98 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v98 & 0x20000000) != 0)
      v101 = v100;
    else
      v101 = v98 & 0xCFFFFFFF;
    if ((v101 & 0x40000000) != 0)
    {
      v102 = *(_QWORD **)v99;
      v103 = *v102;
      v104 = *(_DWORD *)(*v102 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v104);
      a4.f32[1] = (float)(a3.i32[1] / v104);
      a4.f32[2] = (float)(v97 / v104);
      v105 = (const float *)(*v102 + 1656);
      v497 = vld3_f32(v105);
      v106 = *(_QWORD *)(v102[1] + 144);
      v107.i64[0] = 0x3F0000003F000000;
      v107.i64[1] = 0x3F0000003F000000;
      v108 = vaddq_f32(a4, v107);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v108.f32[0]), v497.val[1], *(float32x2_t *)v108.f32, 1), v497.val[2], v108, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v97;
      v109 = vmulq_n_f32(vaddq_f32(a3, v107), *(float *)&v106);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v103 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v109.f32[0]), v497.val[1], *(float32x2_t *)v109.f32, 1), v497.val[2], v109, 2);
    }
    else if (!(v101 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v99 + 16), *(_QWORD *)(*(_QWORD *)(v99 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v99 + 8) + 2448) + 520 * v101, *(_QWORD *)(*(_QWORD *)(v99 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v110 = *a1;
  a4.i64[0] = 0x700000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_QWORD *)v488 = a3.i64[0];
  v111 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v111;
  v112 = *(_DWORD *)(v110[1] + 756);
  if (v112 != *(_DWORD *)(*v110 + 272))
  {
    v113 = *(_QWORD *)(v110[2] + 8);
    if ((v112 & 0x10000000) != 0)
      v114 = 0x40000000;
    else
      v114 = 0x80000000;
    if ((v112 & 0x20000000) != 0)
      v115 = v114;
    else
      v115 = v112 & 0xCFFFFFFF;
    if ((v115 & 0x40000000) != 0)
    {
      v116 = *(_QWORD **)v113;
      v117 = *v116;
      v118 = *(_DWORD *)(*v116 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v118);
      a4.f32[1] = (float)(a3.i32[1] / v118);
      a4.f32[2] = (float)(v111 / v118);
      v119 = (const float *)(*v116 + 1656);
      v498 = vld3_f32(v119);
      v120 = *(_QWORD *)(v116[1] + 144);
      v121.i64[0] = 0x3F0000003F000000;
      v121.i64[1] = 0x3F0000003F000000;
      v122 = vaddq_f32(a4, v121);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v122.f32[0]), v498.val[1], *(float32x2_t *)v122.f32, 1), v498.val[2], v122, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v111;
      v123 = vmulq_n_f32(vaddq_f32(a3, v121), *(float *)&v120);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v117 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v123.f32[0]), v498.val[1], *(float32x2_t *)v123.f32, 1), v498.val[2], v123, 2);
    }
    else if (!(v115 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v113 + 16), *(_QWORD *)(*(_QWORD *)(v113 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v113 + 8) + 2448) + 520 * v115, *(_QWORD *)(*(_QWORD *)(v113 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v124 = *a1;
  a4.i64[0] = 0x700000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_QWORD *)v488 = a3.i64[0];
  v125 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v125;
  v126 = *(_DWORD *)(v124[1] + 760);
  if (v126 != *(_DWORD *)(*v124 + 272))
  {
    v127 = *(_QWORD *)(v124[2] + 8);
    if ((v126 & 0x10000000) != 0)
      v128 = 0x40000000;
    else
      v128 = 0x80000000;
    if ((v126 & 0x20000000) != 0)
      v129 = v128;
    else
      v129 = v126 & 0xCFFFFFFF;
    if ((v129 & 0x40000000) != 0)
    {
      v130 = *(_QWORD **)v127;
      v131 = *v130;
      v132 = *(_DWORD *)(*v130 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v132);
      a4.f32[1] = (float)(a3.i32[1] / v132);
      a4.f32[2] = (float)(v125 / v132);
      v133 = (const float *)(*v130 + 1656);
      v499 = vld3_f32(v133);
      v134 = *(_QWORD *)(v130[1] + 144);
      v135.i64[0] = 0x3F0000003F000000;
      v135.i64[1] = 0x3F0000003F000000;
      v136 = vaddq_f32(a4, v135);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v136.f32[0]), v499.val[1], *(float32x2_t *)v136.f32, 1), v499.val[2], v136, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v125;
      v137 = vmulq_n_f32(vaddq_f32(a3, v135), *(float *)&v134);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v131 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v137.f32[0]), v499.val[1], *(float32x2_t *)v137.f32, 1), v499.val[2], v137, 2);
    }
    else if (!(v129 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v127 + 16), *(_QWORD *)(*(_QWORD *)(v127 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v127 + 8) + 2448) + 520 * v129, *(_QWORD *)(*(_QWORD *)(v127 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v138 = *a1;
  a4.i64[0] = 0x700000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_QWORD *)v488 = a3.i64[0];
  v139 = *(_DWORD *)(a2 + 8) + 2;
  *(_DWORD *)&v488[8] = v139;
  v140 = *(_DWORD *)(v138[1] + 764);
  if (v140 != *(_DWORD *)(*v138 + 272))
  {
    v141 = *(_QWORD *)(v138[2] + 8);
    if ((v140 & 0x10000000) != 0)
      v142 = 0x40000000;
    else
      v142 = 0x80000000;
    if ((v140 & 0x20000000) != 0)
      v143 = v142;
    else
      v143 = v140 & 0xCFFFFFFF;
    if ((v143 & 0x40000000) != 0)
    {
      v144 = *(_QWORD **)v141;
      v145 = *v144;
      v146 = *(_DWORD *)(*v144 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v146);
      a4.f32[1] = (float)(a3.i32[1] / v146);
      a4.f32[2] = (float)(v139 / v146);
      v147 = (const float *)(*v144 + 1656);
      v500 = vld3_f32(v147);
      v148 = *(_QWORD *)(v144[1] + 144);
      v149.i64[0] = 0x3F0000003F000000;
      v149.i64[1] = 0x3F0000003F000000;
      v150 = vaddq_f32(a4, v149);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v150.f32[0]), v500.val[1], *(float32x2_t *)v150.f32, 1), v500.val[2], v150, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v139;
      v151 = vmulq_n_f32(vaddq_f32(a3, v149), *(float *)&v148);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v145 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v151.f32[0]), v500.val[1], *(float32x2_t *)v151.f32, 1), v500.val[2], v151, 2);
    }
    else if (!(v143 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v141 + 16), *(_QWORD *)(*(_QWORD *)(v141 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v141 + 8) + 2448) + 520 * v143, *(_QWORD *)(*(_QWORD *)(v141 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v152 = *a1;
  a3.i64[0] = *(_QWORD *)a2;
  *(_QWORD *)v488 = *(_QWORD *)a2;
  v153 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v153;
  v154 = *(_DWORD *)(v152[1] + 768);
  if (v154 != *(_DWORD *)(*v152 + 272))
  {
    v155 = *(_QWORD *)(v152[2] + 8);
    if ((v154 & 0x10000000) != 0)
      v156 = 0x40000000;
    else
      v156 = 0x80000000;
    if ((v154 & 0x20000000) != 0)
      v157 = v156;
    else
      v157 = v154 & 0xCFFFFFFF;
    if ((v157 & 0x40000000) != 0)
    {
      v158 = *(_QWORD **)v155;
      v159 = *v158;
      v160 = *(_DWORD *)(*v158 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v160);
      a4.f32[1] = (float)(a3.i32[1] / v160);
      a4.f32[2] = (float)(v153 / v160);
      v161 = (const float *)(*v158 + 1656);
      v501 = vld3_f32(v161);
      v162 = *(_QWORD *)(v158[1] + 144);
      v163.i64[0] = 0x3F0000003F000000;
      v163.i64[1] = 0x3F0000003F000000;
      v164 = vaddq_f32(a4, v163);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v164.f32[0]), v501.val[1], *(float32x2_t *)v164.f32, 1), v501.val[2], v164, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v153;
      v165 = vmulq_n_f32(vaddq_f32(a3, v163), *(float *)&v162);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v159 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v165.f32[0]), v501.val[1], *(float32x2_t *)v165.f32, 1), v501.val[2], v165, 2);
    }
    else if (!(v157 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v155 + 16), *(_QWORD *)(*(_QWORD *)(v155 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v155 + 8) + 2448) + 520 * v157, *(_QWORD *)(*(_QWORD *)(v155 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v166 = *a1;
  v167 = *(_DWORD *)(a2 + 4);
  v168 = *(_DWORD *)a2 + 1;
  *(_DWORD *)v488 = v168;
  *(_DWORD *)&v488[4] = v167;
  v169 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v169;
  v170 = *(_DWORD *)(v166[1] + 772);
  if (v170 != *(_DWORD *)(*v166 + 272))
  {
    v171 = *(_QWORD *)(v166[2] + 8);
    if ((v170 & 0x10000000) != 0)
      v172 = 0x40000000;
    else
      v172 = 0x80000000;
    if ((v170 & 0x20000000) != 0)
      v173 = v172;
    else
      v173 = v170 & 0xCFFFFFFF;
    if ((v173 & 0x40000000) != 0)
    {
      v174 = *(_QWORD **)v171;
      v175 = *v174;
      v176 = (const float *)(*v174 + 1656);
      v177 = *(_DWORD *)(*v174 + 8);
      a3.f32[0] = (float)(v168 / v177);
      v178 = *(_QWORD *)(v174[1] + 144);
      a3.f32[1] = (float)(v167 / v177);
      a3.f32[2] = (float)(v169 / v177);
      v179.i64[0] = 0x3F0000003F000000;
      v179.i64[1] = 0x3F0000003F000000;
      v180 = vaddq_f32(a3, v179);
      v516 = vld3_f32(v176);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v516.val[0], v180.f32[0]), v516.val[1], *(float32x2_t *)v180.f32, 1), v516.val[2], v180, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v180.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v167, v168));
      v180.f32[2] = (float)v169;
      v181 = vmulq_n_f32(vaddq_f32(v180, v179), *(float *)&v178);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v175 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v516.val[0], v181.f32[0]), v516.val[1], *(float32x2_t *)v181.f32, 1), v516.val[2], v181, 2);
    }
    else if (!(v173 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v171 + 16), *(_QWORD *)(*(_QWORD *)(v171 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v171 + 8) + 2448) + 520 * v173, *(_QWORD *)(*(_QWORD *)(v171 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v182 = *a1;
  v183 = *(_DWORD *)(a2 + 4);
  v184 = *(_DWORD *)a2 + 2;
  *(_DWORD *)v488 = v184;
  *(_DWORD *)&v488[4] = v183;
  v185 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v185;
  v186 = *(_DWORD *)(v182[1] + 776);
  if (v186 != *(_DWORD *)(*v182 + 272))
  {
    v187 = *(_QWORD *)(v182[2] + 8);
    if ((v186 & 0x10000000) != 0)
      v188 = 0x40000000;
    else
      v188 = 0x80000000;
    if ((v186 & 0x20000000) != 0)
      v189 = v188;
    else
      v189 = v186 & 0xCFFFFFFF;
    if ((v189 & 0x40000000) != 0)
    {
      v190 = *(_QWORD **)v187;
      v191 = *v190;
      v192 = (const float *)(*v190 + 1656);
      v193 = *(_DWORD *)(*v190 + 8);
      a3.f32[0] = (float)(v184 / v193);
      v194 = *(_QWORD *)(v190[1] + 144);
      a3.f32[1] = (float)(v183 / v193);
      a3.f32[2] = (float)(v185 / v193);
      v195.i64[0] = 0x3F0000003F000000;
      v195.i64[1] = 0x3F0000003F000000;
      v196 = vaddq_f32(a3, v195);
      v517 = vld3_f32(v192);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v517.val[0], v196.f32[0]), v517.val[1], *(float32x2_t *)v196.f32, 1), v517.val[2], v196, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v196.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v183, v184));
      v196.f32[2] = (float)v185;
      v197 = vmulq_n_f32(vaddq_f32(v196, v195), *(float *)&v194);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v191 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v517.val[0], v197.f32[0]), v517.val[1], *(float32x2_t *)v197.f32, 1), v517.val[2], v197, 2);
    }
    else if (!(v189 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v187 + 16), *(_QWORD *)(*(_QWORD *)(v187 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v187 + 8) + 2448) + 520 * v189, *(_QWORD *)(*(_QWORD *)(v187 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v198 = *a1;
  v199 = *(_DWORD *)(a2 + 4);
  v200 = *(_DWORD *)a2 + 3;
  *(_DWORD *)v488 = v200;
  *(_DWORD *)&v488[4] = v199;
  v201 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v201;
  v202 = *(_DWORD *)(v198[1] + 780);
  if (v202 != *(_DWORD *)(*v198 + 272))
  {
    v203 = *(_QWORD *)(v198[2] + 8);
    if ((v202 & 0x10000000) != 0)
      v204 = 0x40000000;
    else
      v204 = 0x80000000;
    if ((v202 & 0x20000000) != 0)
      v205 = v204;
    else
      v205 = v202 & 0xCFFFFFFF;
    if ((v205 & 0x40000000) != 0)
    {
      v206 = *(_QWORD **)v203;
      v207 = *v206;
      v208 = (const float *)(*v206 + 1656);
      v209 = *(_DWORD *)(*v206 + 8);
      a3.f32[0] = (float)(v200 / v209);
      v210 = *(_QWORD *)(v206[1] + 144);
      a3.f32[1] = (float)(v199 / v209);
      a3.f32[2] = (float)(v201 / v209);
      v211.i64[0] = 0x3F0000003F000000;
      v211.i64[1] = 0x3F0000003F000000;
      v212 = vaddq_f32(a3, v211);
      v518 = vld3_f32(v208);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v518.val[0], v212.f32[0]), v518.val[1], *(float32x2_t *)v212.f32, 1), v518.val[2], v212, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v212.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v199, v200));
      v212.f32[2] = (float)v201;
      v213 = vmulq_n_f32(vaddq_f32(v212, v211), *(float *)&v210);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v207 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v518.val[0], v213.f32[0]), v518.val[1], *(float32x2_t *)v213.f32, 1), v518.val[2], v213, 2);
    }
    else if (!(v205 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v203 + 16), *(_QWORD *)(*(_QWORD *)(v203 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v203 + 8) + 2448) + 520 * v205, *(_QWORD *)(*(_QWORD *)(v203 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v214 = *a1;
  v215 = *(_DWORD *)(a2 + 4);
  v216 = *(_DWORD *)a2 + 4;
  *(_DWORD *)v488 = v216;
  *(_DWORD *)&v488[4] = v215;
  v217 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v217;
  v218 = *(_DWORD *)(v214[1] + 784);
  if (v218 != *(_DWORD *)(*v214 + 272))
  {
    v219 = *(_QWORD *)(v214[2] + 8);
    if ((v218 & 0x10000000) != 0)
      v220 = 0x40000000;
    else
      v220 = 0x80000000;
    if ((v218 & 0x20000000) != 0)
      v221 = v220;
    else
      v221 = v218 & 0xCFFFFFFF;
    if ((v221 & 0x40000000) != 0)
    {
      v222 = *(_QWORD **)v219;
      v223 = *v222;
      v224 = (const float *)(*v222 + 1656);
      v225 = *(_DWORD *)(*v222 + 8);
      a3.f32[0] = (float)(v216 / v225);
      v226 = *(_QWORD *)(v222[1] + 144);
      a3.f32[1] = (float)(v215 / v225);
      a3.f32[2] = (float)(v217 / v225);
      v227.i64[0] = 0x3F0000003F000000;
      v227.i64[1] = 0x3F0000003F000000;
      v228 = vaddq_f32(a3, v227);
      v519 = vld3_f32(v224);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v519.val[0], v228.f32[0]), v519.val[1], *(float32x2_t *)v228.f32, 1), v519.val[2], v228, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v228.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v215, v216));
      v228.f32[2] = (float)v217;
      v229 = vmulq_n_f32(vaddq_f32(v228, v227), *(float *)&v226);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v223 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v519.val[0], v229.f32[0]), v519.val[1], *(float32x2_t *)v229.f32, 1), v519.val[2], v229, 2);
    }
    else if (!(v221 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v219 + 16), *(_QWORD *)(*(_QWORD *)(v219 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v219 + 8) + 2448) + 520 * v221, *(_QWORD *)(*(_QWORD *)(v219 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v230 = *a1;
  v231 = *(_DWORD *)(a2 + 4);
  v232 = *(_DWORD *)a2 + 5;
  *(_DWORD *)v488 = v232;
  *(_DWORD *)&v488[4] = v231;
  v233 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v233;
  v234 = *(_DWORD *)(v230[1] + 788);
  if (v234 != *(_DWORD *)(*v230 + 272))
  {
    v235 = *(_QWORD *)(v230[2] + 8);
    if ((v234 & 0x10000000) != 0)
      v236 = 0x40000000;
    else
      v236 = 0x80000000;
    if ((v234 & 0x20000000) != 0)
      v237 = v236;
    else
      v237 = v234 & 0xCFFFFFFF;
    if ((v237 & 0x40000000) != 0)
    {
      v238 = *(_QWORD **)v235;
      v239 = *v238;
      v240 = (const float *)(*v238 + 1656);
      v241 = *(_DWORD *)(*v238 + 8);
      a3.f32[0] = (float)(v232 / v241);
      v242 = *(_QWORD *)(v238[1] + 144);
      a3.f32[1] = (float)(v231 / v241);
      a3.f32[2] = (float)(v233 / v241);
      v243.i64[0] = 0x3F0000003F000000;
      v243.i64[1] = 0x3F0000003F000000;
      v244 = vaddq_f32(a3, v243);
      v520 = vld3_f32(v240);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v520.val[0], v244.f32[0]), v520.val[1], *(float32x2_t *)v244.f32, 1), v520.val[2], v244, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v244.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v231, v232));
      v244.f32[2] = (float)v233;
      v245 = vmulq_n_f32(vaddq_f32(v244, v243), *(float *)&v242);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v239 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v520.val[0], v245.f32[0]), v520.val[1], *(float32x2_t *)v245.f32, 1), v520.val[2], v245, 2);
    }
    else if (!(v237 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v235 + 16), *(_QWORD *)(*(_QWORD *)(v235 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v235 + 8) + 2448) + 520 * v237, *(_QWORD *)(*(_QWORD *)(v235 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v246 = *a1;
  v247 = *(_DWORD *)(a2 + 4);
  v248 = *(_DWORD *)a2 + 6;
  *(_DWORD *)v488 = v248;
  *(_DWORD *)&v488[4] = v247;
  v249 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v249;
  v250 = *(_DWORD *)(v246[1] + 792);
  if (v250 != *(_DWORD *)(*v246 + 272))
  {
    v251 = *(_QWORD *)(v246[2] + 8);
    if ((v250 & 0x10000000) != 0)
      v252 = 0x40000000;
    else
      v252 = 0x80000000;
    if ((v250 & 0x20000000) != 0)
      v253 = v252;
    else
      v253 = v250 & 0xCFFFFFFF;
    if ((v253 & 0x40000000) != 0)
    {
      v254 = *(_QWORD **)v251;
      v255 = *v254;
      v256 = (const float *)(*v254 + 1656);
      v257 = *(_DWORD *)(*v254 + 8);
      a3.f32[0] = (float)(v248 / v257);
      v258 = *(_QWORD *)(v254[1] + 144);
      a3.f32[1] = (float)(v247 / v257);
      a3.f32[2] = (float)(v249 / v257);
      v259.i64[0] = 0x3F0000003F000000;
      v259.i64[1] = 0x3F0000003F000000;
      v260 = vaddq_f32(a3, v259);
      v521 = vld3_f32(v256);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v521.val[0], v260.f32[0]), v521.val[1], *(float32x2_t *)v260.f32, 1), v521.val[2], v260, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v260.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v247, v248));
      v260.f32[2] = (float)v249;
      v261 = vmulq_n_f32(vaddq_f32(v260, v259), *(float *)&v258);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v255 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v521.val[0], v261.f32[0]), v521.val[1], *(float32x2_t *)v261.f32, 1), v521.val[2], v261, 2);
    }
    else if (!(v253 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v251 + 16), *(_QWORD *)(*(_QWORD *)(v251 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v251 + 8) + 2448) + 520 * v253, *(_QWORD *)(*(_QWORD *)(v251 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v262 = *a1;
  v263 = *(_DWORD *)(a2 + 4);
  v264 = *(_DWORD *)a2 + 7;
  *(_DWORD *)v488 = v264;
  *(_DWORD *)&v488[4] = v263;
  v265 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v265;
  v266 = *(_DWORD *)(v262[1] + 796);
  if (v266 != *(_DWORD *)(*v262 + 272))
  {
    v267 = *(_QWORD *)(v262[2] + 8);
    if ((v266 & 0x10000000) != 0)
      v268 = 0x40000000;
    else
      v268 = 0x80000000;
    if ((v266 & 0x20000000) != 0)
      v269 = v268;
    else
      v269 = v266 & 0xCFFFFFFF;
    if ((v269 & 0x40000000) != 0)
    {
      v270 = *(_QWORD **)v267;
      v271 = *v270;
      v272 = (const float *)(*v270 + 1656);
      v273 = *(_DWORD *)(*v270 + 8);
      a3.f32[0] = (float)(v264 / v273);
      v274 = *(_QWORD *)(v270[1] + 144);
      a3.f32[1] = (float)(v263 / v273);
      a3.f32[2] = (float)(v265 / v273);
      v275.i64[0] = 0x3F0000003F000000;
      v275.i64[1] = 0x3F0000003F000000;
      v276 = vaddq_f32(a3, v275);
      v522 = vld3_f32(v272);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v522.val[0], v276.f32[0]), v522.val[1], *(float32x2_t *)v276.f32, 1), v522.val[2], v276, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v276.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v263, v264));
      v276.f32[2] = (float)v265;
      v277 = vmulq_n_f32(vaddq_f32(v276, v275), *(float *)&v274);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v271 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v522.val[0], v277.f32[0]), v522.val[1], *(float32x2_t *)v277.f32, 1), v522.val[2], v277, 2);
    }
    else if (!(v269 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v267 + 16), *(_QWORD *)(*(_QWORD *)(v267 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v267 + 8) + 2448) + 520 * v269, *(_QWORD *)(*(_QWORD *)(v267 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v278 = *a1;
  v279 = *(_DWORD *)a2;
  *(_DWORD *)v488 = *(_DWORD *)a2;
  a4.i64[0] = 0x300000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000001);
  *(_QWORD *)&v488[4] = a3.i64[0];
  v280 = *(_DWORD *)(v278[1] + 800);
  if (v280 != *(_DWORD *)(*v278 + 272))
  {
    v281 = *(_QWORD *)(v278[2] + 8);
    if ((v280 & 0x10000000) != 0)
      v282 = 0x40000000;
    else
      v282 = 0x80000000;
    if ((v280 & 0x20000000) != 0)
      v283 = v282;
    else
      v283 = v280 & 0xCFFFFFFF;
    if ((v283 & 0x40000000) != 0)
    {
      v284 = *(_QWORD **)v281;
      v285 = *v284;
      v286 = (const float *)(*v284 + 1656);
      v287 = *(_QWORD *)(v284[1] + 144);
      LODWORD(v284) = *(_DWORD *)(*v284 + 8);
      v288 = a3.i32[1];
      a5.f32[0] = (float)(v279 / (int)v284);
      a5.f32[1] = (float)(a3.i32[0] / (int)v284);
      a5.f32[2] = (float)(a3.i32[1] / (int)v284);
      v289.i64[0] = 0x3F0000003F000000;
      v289.i64[1] = 0x3F0000003F000000;
      v523 = vld3_f32(v286);
      v290 = vaddq_f32(a5, v289);
      *(int32x2_t *)v290.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v523.val[0], v290.f32[0]), v523.val[1], *(float32x2_t *)v290.f32, 1), v523.val[2], v290, 2), (float32x2_t)0xBF000000BF000000));
      v489 = *(int32x2_t *)v290.f32;
      v490 = 0;
      v290.i32[0] = v279;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v290.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v288;
      v291 = vmulq_n_f32(vaddq_f32(a3, v289), *(float *)&v287);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v285 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v523.val[0], v291.f32[0]), v523.val[1], *(float32x2_t *)v291.f32, 1), v523.val[2], v291, 2);
    }
    else if (!(v283 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v281 + 16), *(_QWORD *)(*(_QWORD *)(v281 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v281 + 8) + 2448) + 520 * v283, *(_QWORD *)(*(_QWORD *)(v281 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v292 = *a1;
  a4.i64[0] = 0x100000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000001);
  *(_QWORD *)v488 = a3.i64[0];
  v293 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v293;
  v294 = *(_DWORD *)(v292[1] + 804);
  if (v294 != *(_DWORD *)(*v292 + 272))
  {
    v295 = *(_QWORD *)(v292[2] + 8);
    if ((v294 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v294 & 0x20000000) != 0)
      v297 = v296;
    else
      v297 = v294 & 0xCFFFFFFF;
    if ((v297 & 0x40000000) != 0)
    {
      v298 = *(_QWORD **)v295;
      v299 = *v298;
      v300 = *(_DWORD *)(*v298 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v300);
      a4.f32[1] = (float)(a3.i32[1] / v300);
      a4.f32[2] = (float)(v293 / v300);
      v301 = (const float *)(*v298 + 1656);
      v502 = vld3_f32(v301);
      v302 = *(_QWORD *)(v298[1] + 144);
      v303.i64[0] = 0x3F0000003F000000;
      v303.i64[1] = 0x3F0000003F000000;
      v304 = vaddq_f32(a4, v303);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v304.f32[0]), v502.val[1], *(float32x2_t *)v304.f32, 1), v502.val[2], v304, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v293;
      v305 = vmulq_n_f32(vaddq_f32(a3, v303), *(float *)&v302);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v299 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v305.f32[0]), v502.val[1], *(float32x2_t *)v305.f32, 1), v502.val[2], v305, 2);
    }
    else if (!(v297 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v295 + 16), *(_QWORD *)(*(_QWORD *)(v295 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v295 + 8) + 2448) + 520 * v297, *(_QWORD *)(*(_QWORD *)(v295 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v306 = *a1;
  a4.i64[0] = 0x100000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000002);
  *(_QWORD *)v488 = a3.i64[0];
  v307 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v307;
  v308 = *(_DWORD *)(v306[1] + 808);
  if (v308 != *(_DWORD *)(*v306 + 272))
  {
    v309 = *(_QWORD *)(v306[2] + 8);
    if ((v308 & 0x10000000) != 0)
      v310 = 0x40000000;
    else
      v310 = 0x80000000;
    if ((v308 & 0x20000000) != 0)
      v311 = v310;
    else
      v311 = v308 & 0xCFFFFFFF;
    if ((v311 & 0x40000000) != 0)
    {
      v312 = *(_QWORD **)v309;
      v313 = *v312;
      v314 = *(_DWORD *)(*v312 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v314);
      a4.f32[1] = (float)(a3.i32[1] / v314);
      a4.f32[2] = (float)(v307 / v314);
      v315 = (const float *)(*v312 + 1656);
      v503 = vld3_f32(v315);
      v316 = *(_QWORD *)(v312[1] + 144);
      v317.i64[0] = 0x3F0000003F000000;
      v317.i64[1] = 0x3F0000003F000000;
      v318 = vaddq_f32(a4, v317);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v318.f32[0]), v503.val[1], *(float32x2_t *)v318.f32, 1), v503.val[2], v318, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v307;
      v319 = vmulq_n_f32(vaddq_f32(a3, v317), *(float *)&v316);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v313 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v319.f32[0]), v503.val[1], *(float32x2_t *)v319.f32, 1), v503.val[2], v319, 2);
    }
    else if (!(v311 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v309 + 16), *(_QWORD *)(*(_QWORD *)(v309 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v309 + 8) + 2448) + 520 * v311, *(_QWORD *)(*(_QWORD *)(v309 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v320 = *a1;
  a4.i64[0] = 0x100000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000003);
  *(_QWORD *)v488 = a3.i64[0];
  v321 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v321;
  v322 = *(_DWORD *)(v320[1] + 812);
  if (v322 != *(_DWORD *)(*v320 + 272))
  {
    v323 = *(_QWORD *)(v320[2] + 8);
    if ((v322 & 0x10000000) != 0)
      v324 = 0x40000000;
    else
      v324 = 0x80000000;
    if ((v322 & 0x20000000) != 0)
      v325 = v324;
    else
      v325 = v322 & 0xCFFFFFFF;
    if ((v325 & 0x40000000) != 0)
    {
      v326 = *(_QWORD **)v323;
      v327 = *v326;
      v328 = *(_DWORD *)(*v326 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v328);
      a4.f32[1] = (float)(a3.i32[1] / v328);
      a4.f32[2] = (float)(v321 / v328);
      v329 = (const float *)(*v326 + 1656);
      v504 = vld3_f32(v329);
      v330 = *(_QWORD *)(v326[1] + 144);
      v331.i64[0] = 0x3F0000003F000000;
      v331.i64[1] = 0x3F0000003F000000;
      v332 = vaddq_f32(a4, v331);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v332.f32[0]), v504.val[1], *(float32x2_t *)v332.f32, 1), v504.val[2], v332, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v321;
      v333 = vmulq_n_f32(vaddq_f32(a3, v331), *(float *)&v330);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v327 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v333.f32[0]), v504.val[1], *(float32x2_t *)v333.f32, 1), v504.val[2], v333, 2);
    }
    else if (!(v325 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v323 + 16), *(_QWORD *)(*(_QWORD *)(v323 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v323 + 8) + 2448) + 520 * v325, *(_QWORD *)(*(_QWORD *)(v323 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v334 = *a1;
  a4.i64[0] = 0x100000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000004);
  *(_QWORD *)v488 = a3.i64[0];
  v335 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v335;
  v336 = *(_DWORD *)(v334[1] + 816);
  if (v336 != *(_DWORD *)(*v334 + 272))
  {
    v337 = *(_QWORD *)(v334[2] + 8);
    if ((v336 & 0x10000000) != 0)
      v338 = 0x40000000;
    else
      v338 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v339 = v338;
    else
      v339 = v336 & 0xCFFFFFFF;
    if ((v339 & 0x40000000) != 0)
    {
      v340 = *(_QWORD **)v337;
      v341 = *v340;
      v342 = *(_DWORD *)(*v340 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v342);
      a4.f32[1] = (float)(a3.i32[1] / v342);
      a4.f32[2] = (float)(v335 / v342);
      v343 = (const float *)(*v340 + 1656);
      v505 = vld3_f32(v343);
      v344 = *(_QWORD *)(v340[1] + 144);
      v345.i64[0] = 0x3F0000003F000000;
      v345.i64[1] = 0x3F0000003F000000;
      v346 = vaddq_f32(a4, v345);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v346.f32[0]), v505.val[1], *(float32x2_t *)v346.f32, 1), v505.val[2], v346, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v335;
      v347 = vmulq_n_f32(vaddq_f32(a3, v345), *(float *)&v344);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v341 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v347.f32[0]), v505.val[1], *(float32x2_t *)v347.f32, 1), v505.val[2], v347, 2);
    }
    else if (!(v339 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v337 + 16), *(_QWORD *)(*(_QWORD *)(v337 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v337 + 8) + 2448) + 520 * v339, *(_QWORD *)(*(_QWORD *)(v337 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v348 = *a1;
  a4.i64[0] = 0x100000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000005);
  *(_QWORD *)v488 = a3.i64[0];
  v349 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v349;
  v350 = *(_DWORD *)(v348[1] + 820);
  if (v350 != *(_DWORD *)(*v348 + 272))
  {
    v351 = *(_QWORD *)(v348[2] + 8);
    if ((v350 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v350 & 0x20000000) != 0)
      v353 = v352;
    else
      v353 = v350 & 0xCFFFFFFF;
    if ((v353 & 0x40000000) != 0)
    {
      v354 = *(_QWORD **)v351;
      v355 = *v354;
      v356 = *(_DWORD *)(*v354 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v356);
      a4.f32[1] = (float)(a3.i32[1] / v356);
      a4.f32[2] = (float)(v349 / v356);
      v357 = (const float *)(*v354 + 1656);
      v506 = vld3_f32(v357);
      v358 = *(_QWORD *)(v354[1] + 144);
      v359.i64[0] = 0x3F0000003F000000;
      v359.i64[1] = 0x3F0000003F000000;
      v360 = vaddq_f32(a4, v359);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v360.f32[0]), v506.val[1], *(float32x2_t *)v360.f32, 1), v506.val[2], v360, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v349;
      v361 = vmulq_n_f32(vaddq_f32(a3, v359), *(float *)&v358);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v355 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v361.f32[0]), v506.val[1], *(float32x2_t *)v361.f32, 1), v506.val[2], v361, 2);
    }
    else if (!(v353 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v351 + 16), *(_QWORD *)(*(_QWORD *)(v351 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v351 + 8) + 2448) + 520 * v353, *(_QWORD *)(*(_QWORD *)(v351 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v362 = *a1;
  a4.i64[0] = 0x100000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000006);
  *(_QWORD *)v488 = a3.i64[0];
  v363 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v363;
  v364 = *(_DWORD *)(v362[1] + 824);
  if (v364 != *(_DWORD *)(*v362 + 272))
  {
    v365 = *(_QWORD *)(v362[2] + 8);
    if ((v364 & 0x10000000) != 0)
      v366 = 0x40000000;
    else
      v366 = 0x80000000;
    if ((v364 & 0x20000000) != 0)
      v367 = v366;
    else
      v367 = v364 & 0xCFFFFFFF;
    if ((v367 & 0x40000000) != 0)
    {
      v368 = *(_QWORD **)v365;
      v369 = *v368;
      v370 = *(_DWORD *)(*v368 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v370);
      a4.f32[1] = (float)(a3.i32[1] / v370);
      a4.f32[2] = (float)(v363 / v370);
      v371 = (const float *)(*v368 + 1656);
      v507 = vld3_f32(v371);
      v372 = *(_QWORD *)(v368[1] + 144);
      v373.i64[0] = 0x3F0000003F000000;
      v373.i64[1] = 0x3F0000003F000000;
      v374 = vaddq_f32(a4, v373);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v374.f32[0]), v507.val[1], *(float32x2_t *)v374.f32, 1), v507.val[2], v374, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v363;
      v375 = vmulq_n_f32(vaddq_f32(a3, v373), *(float *)&v372);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v369 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v375.f32[0]), v507.val[1], *(float32x2_t *)v375.f32, 1), v507.val[2], v375, 2);
    }
    else if (!(v367 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v365 + 16), *(_QWORD *)(*(_QWORD *)(v365 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v365 + 8) + 2448) + 520 * v367, *(_QWORD *)(*(_QWORD *)(v365 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v376 = *a1;
  a4.i64[0] = 0x100000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000007);
  *(_QWORD *)v488 = a3.i64[0];
  v377 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v377;
  v378 = *(_DWORD *)(v376[1] + 828);
  if (v378 != *(_DWORD *)(*v376 + 272))
  {
    v379 = *(_QWORD *)(v376[2] + 8);
    if ((v378 & 0x10000000) != 0)
      v380 = 0x40000000;
    else
      v380 = 0x80000000;
    if ((v378 & 0x20000000) != 0)
      v381 = v380;
    else
      v381 = v378 & 0xCFFFFFFF;
    if ((v381 & 0x40000000) != 0)
    {
      v382 = *(_QWORD **)v379;
      v383 = *v382;
      v384 = *(_DWORD *)(*v382 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v384);
      a4.f32[1] = (float)(a3.i32[1] / v384);
      a4.f32[2] = (float)(v377 / v384);
      v385 = (const float *)(*v382 + 1656);
      v508 = vld3_f32(v385);
      v386 = *(_QWORD *)(v382[1] + 144);
      v387.i64[0] = 0x3F0000003F000000;
      v387.i64[1] = 0x3F0000003F000000;
      v388 = vaddq_f32(a4, v387);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v388.f32[0]), v508.val[1], *(float32x2_t *)v388.f32, 1), v508.val[2], v388, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v377;
      v389 = vmulq_n_f32(vaddq_f32(a3, v387), *(float *)&v386);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v383 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v389.f32[0]), v508.val[1], *(float32x2_t *)v389.f32, 1), v508.val[2], v389, 2);
    }
    else if (!(v381 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v379 + 16), *(_QWORD *)(*(_QWORD *)(v379 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v379 + 8) + 2448) + 520 * v381, *(_QWORD *)(*(_QWORD *)(v379 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v390 = *a1;
  v391 = *(_DWORD *)a2;
  *(_DWORD *)v488 = *(_DWORD *)a2;
  a4.i64[0] = 0x300000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000002);
  *(_QWORD *)&v488[4] = a3.i64[0];
  v392 = *(_DWORD *)(v390[1] + 832);
  if (v392 != *(_DWORD *)(*v390 + 272))
  {
    v393 = *(_QWORD *)(v390[2] + 8);
    if ((v392 & 0x10000000) != 0)
      v394 = 0x40000000;
    else
      v394 = 0x80000000;
    if ((v392 & 0x20000000) != 0)
      v395 = v394;
    else
      v395 = v392 & 0xCFFFFFFF;
    if ((v395 & 0x40000000) != 0)
    {
      v396 = *(_QWORD **)v393;
      v397 = *v396;
      v398 = (const float *)(*v396 + 1656);
      v399 = *(_QWORD *)(v396[1] + 144);
      LODWORD(v396) = *(_DWORD *)(*v396 + 8);
      v400 = a3.i32[1];
      a5.f32[0] = (float)(v391 / (int)v396);
      a5.f32[1] = (float)(a3.i32[0] / (int)v396);
      a5.f32[2] = (float)(a3.i32[1] / (int)v396);
      v401.i64[0] = 0x3F0000003F000000;
      v401.i64[1] = 0x3F0000003F000000;
      v524 = vld3_f32(v398);
      v402 = vaddq_f32(a5, v401);
      *(int32x2_t *)v402.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v524.val[0], v402.f32[0]), v524.val[1], *(float32x2_t *)v402.f32, 1), v524.val[2], v402, 2), (float32x2_t)0xBF000000BF000000));
      v489 = *(int32x2_t *)v402.f32;
      v490 = 0;
      v402.i32[0] = v391;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v402.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v400;
      v403 = vmulq_n_f32(vaddq_f32(a3, v401), *(float *)&v399);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v397 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v524.val[0], v403.f32[0]), v524.val[1], *(float32x2_t *)v403.f32, 1), v524.val[2], v403, 2);
    }
    else if (!(v395 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v393 + 16), *(_QWORD *)(*(_QWORD *)(v393 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v393 + 8) + 2448) + 520 * v395, *(_QWORD *)(*(_QWORD *)(v393 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v404 = *a1;
  a4.i64[0] = 0x200000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000001);
  *(_QWORD *)v488 = a3.i64[0];
  v405 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v405;
  v406 = *(_DWORD *)(v404[1] + 836);
  if (v406 != *(_DWORD *)(*v404 + 272))
  {
    v407 = *(_QWORD *)(v404[2] + 8);
    if ((v406 & 0x10000000) != 0)
      v408 = 0x40000000;
    else
      v408 = 0x80000000;
    if ((v406 & 0x20000000) != 0)
      v409 = v408;
    else
      v409 = v406 & 0xCFFFFFFF;
    if ((v409 & 0x40000000) != 0)
    {
      v410 = *(_QWORD **)v407;
      v411 = *v410;
      v412 = *(_DWORD *)(*v410 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v412);
      a4.f32[1] = (float)(a3.i32[1] / v412);
      a4.f32[2] = (float)(v405 / v412);
      v413 = (const float *)(*v410 + 1656);
      v509 = vld3_f32(v413);
      v414 = *(_QWORD *)(v410[1] + 144);
      v415.i64[0] = 0x3F0000003F000000;
      v415.i64[1] = 0x3F0000003F000000;
      v416 = vaddq_f32(a4, v415);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v416.f32[0]), v509.val[1], *(float32x2_t *)v416.f32, 1), v509.val[2], v416, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v405;
      v417 = vmulq_n_f32(vaddq_f32(a3, v415), *(float *)&v414);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v411 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v417.f32[0]), v509.val[1], *(float32x2_t *)v417.f32, 1), v509.val[2], v417, 2);
    }
    else if (!(v409 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v407 + 16), *(_QWORD *)(*(_QWORD *)(v407 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v407 + 8) + 2448) + 520 * v409, *(_QWORD *)(*(_QWORD *)(v407 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v418 = *a1;
  a4.i64[0] = 0x200000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000002);
  *(_QWORD *)v488 = a3.i64[0];
  v419 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v419;
  v420 = *(_DWORD *)(v418[1] + 840);
  if (v420 != *(_DWORD *)(*v418 + 272))
  {
    v421 = *(_QWORD *)(v418[2] + 8);
    if ((v420 & 0x10000000) != 0)
      v422 = 0x40000000;
    else
      v422 = 0x80000000;
    if ((v420 & 0x20000000) != 0)
      v423 = v422;
    else
      v423 = v420 & 0xCFFFFFFF;
    if ((v423 & 0x40000000) != 0)
    {
      v424 = *(_QWORD **)v421;
      v425 = *v424;
      v426 = *(_DWORD *)(*v424 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v426);
      a4.f32[1] = (float)(a3.i32[1] / v426);
      a4.f32[2] = (float)(v419 / v426);
      v427 = (const float *)(*v424 + 1656);
      v510 = vld3_f32(v427);
      v428 = *(_QWORD *)(v424[1] + 144);
      v429.i64[0] = 0x3F0000003F000000;
      v429.i64[1] = 0x3F0000003F000000;
      v430 = vaddq_f32(a4, v429);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v430.f32[0]), v510.val[1], *(float32x2_t *)v430.f32, 1), v510.val[2], v430, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v419;
      v431 = vmulq_n_f32(vaddq_f32(a3, v429), *(float *)&v428);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v425 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v431.f32[0]), v510.val[1], *(float32x2_t *)v431.f32, 1), v510.val[2], v431, 2);
    }
    else if (!(v423 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v421 + 16), *(_QWORD *)(*(_QWORD *)(v421 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v421 + 8) + 2448) + 520 * v423, *(_QWORD *)(*(_QWORD *)(v421 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v432 = *a1;
  a4.i64[0] = 0x200000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_QWORD *)v488 = a3.i64[0];
  v433 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v433;
  v434 = *(_DWORD *)(v432[1] + 844);
  if (v434 != *(_DWORD *)(*v432 + 272))
  {
    v435 = *(_QWORD *)(v432[2] + 8);
    if ((v434 & 0x10000000) != 0)
      v436 = 0x40000000;
    else
      v436 = 0x80000000;
    if ((v434 & 0x20000000) != 0)
      v437 = v436;
    else
      v437 = v434 & 0xCFFFFFFF;
    if ((v437 & 0x40000000) != 0)
    {
      v438 = *(_QWORD **)v435;
      v439 = *v438;
      v440 = *(_DWORD *)(*v438 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v440);
      a4.f32[1] = (float)(a3.i32[1] / v440);
      a4.f32[2] = (float)(v433 / v440);
      v441 = (const float *)(*v438 + 1656);
      v511 = vld3_f32(v441);
      v442 = *(_QWORD *)(v438[1] + 144);
      v443.i64[0] = 0x3F0000003F000000;
      v443.i64[1] = 0x3F0000003F000000;
      v444 = vaddq_f32(a4, v443);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v511.val[0], v444.f32[0]), v511.val[1], *(float32x2_t *)v444.f32, 1), v511.val[2], v444, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v433;
      v445 = vmulq_n_f32(vaddq_f32(a3, v443), *(float *)&v442);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v439 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v511.val[0], v445.f32[0]), v511.val[1], *(float32x2_t *)v445.f32, 1), v511.val[2], v445, 2);
    }
    else if (!(v437 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v435 + 16), *(_QWORD *)(*(_QWORD *)(v435 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v435 + 8) + 2448) + 520 * v437, *(_QWORD *)(*(_QWORD *)(v435 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v446 = *a1;
  a4.i64[0] = 0x200000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_QWORD *)v488 = a3.i64[0];
  v447 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v447;
  v448 = *(_DWORD *)(v446[1] + 848);
  if (v448 != *(_DWORD *)(*v446 + 272))
  {
    v449 = *(_QWORD *)(v446[2] + 8);
    if ((v448 & 0x10000000) != 0)
      v450 = 0x40000000;
    else
      v450 = 0x80000000;
    if ((v448 & 0x20000000) != 0)
      v451 = v450;
    else
      v451 = v448 & 0xCFFFFFFF;
    if ((v451 & 0x40000000) != 0)
    {
      v452 = *(_QWORD **)v449;
      v453 = *v452;
      v454 = *(_DWORD *)(*v452 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v454);
      a4.f32[1] = (float)(a3.i32[1] / v454);
      a4.f32[2] = (float)(v447 / v454);
      v455 = (const float *)(*v452 + 1656);
      v512 = vld3_f32(v455);
      v456 = *(_QWORD *)(v452[1] + 144);
      v457.i64[0] = 0x3F0000003F000000;
      v457.i64[1] = 0x3F0000003F000000;
      v458 = vaddq_f32(a4, v457);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v512.val[0], v458.f32[0]), v512.val[1], *(float32x2_t *)v458.f32, 1), v512.val[2], v458, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v447;
      v459 = vmulq_n_f32(vaddq_f32(a3, v457), *(float *)&v456);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v453 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v512.val[0], v459.f32[0]), v512.val[1], *(float32x2_t *)v459.f32, 1), v512.val[2], v459, 2);
    }
    else if (!(v451 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v449 + 16), *(_QWORD *)(*(_QWORD *)(v449 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v449 + 8) + 2448) + 520 * v451, *(_QWORD *)(*(_QWORD *)(v449 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v460 = *a1;
  a4.i64[0] = 0x200000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_QWORD *)v488 = a3.i64[0];
  v461 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v461;
  v462 = *(_DWORD *)(v460[1] + 852);
  if (v462 != *(_DWORD *)(*v460 + 272))
  {
    v463 = *(_QWORD *)(v460[2] + 8);
    if ((v462 & 0x10000000) != 0)
      v464 = 0x40000000;
    else
      v464 = 0x80000000;
    if ((v462 & 0x20000000) != 0)
      v465 = v464;
    else
      v465 = v462 & 0xCFFFFFFF;
    if ((v465 & 0x40000000) != 0)
    {
      v466 = *(_QWORD **)v463;
      v467 = *v466;
      v468 = *(_DWORD *)(*v466 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v468);
      a4.f32[1] = (float)(a3.i32[1] / v468);
      a4.f32[2] = (float)(v461 / v468);
      v469 = (const float *)(*v466 + 1656);
      v513 = vld3_f32(v469);
      v470 = *(_QWORD *)(v466[1] + 144);
      v471.i64[0] = 0x3F0000003F000000;
      v471.i64[1] = 0x3F0000003F000000;
      v472 = vaddq_f32(a4, v471);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v513.val[0], v472.f32[0]), v513.val[1], *(float32x2_t *)v472.f32, 1), v513.val[2], v472, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v461;
      v473 = vmulq_n_f32(vaddq_f32(a3, v471), *(float *)&v470);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v467 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v513.val[0], v473.f32[0]), v513.val[1], *(float32x2_t *)v473.f32, 1), v513.val[2], v473, 2);
    }
    else if (!(v465 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v463 + 16), *(_QWORD *)(*(_QWORD *)(v463 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v463 + 8) + 2448) + 520 * v465, *(_QWORD *)(*(_QWORD *)(v463 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v474 = *a1;
  a4.i64[0] = 0x200000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_QWORD *)v488 = a3.i64[0];
  v475 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v475;
  v476 = *(_DWORD *)(v474[1] + 856);
  if (v476 != *(_DWORD *)(*v474 + 272))
  {
    v477 = *(_QWORD *)(v474[2] + 8);
    if ((v476 & 0x10000000) != 0)
      v478 = 0x40000000;
    else
      v478 = 0x80000000;
    if ((v476 & 0x20000000) != 0)
      v479 = v478;
    else
      v479 = v476 & 0xCFFFFFFF;
    if ((v479 & 0x40000000) != 0)
    {
      v480 = *(_QWORD **)v477;
      v481 = *v480;
      v482 = *(_DWORD *)(*v480 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v482);
      a4.f32[1] = (float)(a3.i32[1] / v482);
      a4.f32[2] = (float)(v475 / v482);
      v483 = (const float *)(*v480 + 1656);
      v514 = vld3_f32(v483);
      v484 = *(_QWORD *)(v480[1] + 144);
      v485.i64[0] = 0x3F0000003F000000;
      v485.i64[1] = 0x3F0000003F000000;
      v486 = vaddq_f32(a4, v485);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v514.val[0], v486.f32[0]), v514.val[1], *(float32x2_t *)v486.f32, 1), v514.val[2], v486, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v475;
      v487 = vmulq_n_f32(vaddq_f32(a3, v485), *(float *)&v484);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v481 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v514.val[0], v487.f32[0]), v514.val[1], *(float32x2_t *)v487.f32, 1), v514.val[2], v487, 2);
    }
    else if (!(v479 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v477 + 16), *(_QWORD *)(*(_QWORD *)(v477 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v477 + 8) + 2448) + 520 * v479, *(_QWORD *)(*(_QWORD *)(v477 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  sub_2239CA404(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_2239CA404(_QWORD **a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  const float *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  _QWORD *v26;
  __int32 v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  const float *v34;
  uint64_t v35;
  int v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  const float *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  _QWORD *v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  const float *v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  _QWORD *v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  const float *v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  _QWORD *v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  const float *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _QWORD *v96;
  int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  const float *v105;
  uint64_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD *v110;
  int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  const float *v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  _QWORD *v124;
  int v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  const float *v133;
  uint64_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  _QWORD *v138;
  __int32 v139;
  int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  _QWORD *v144;
  uint64_t v145;
  const float *v146;
  uint64_t v147;
  int v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  _QWORD *v152;
  int v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  const float *v161;
  uint64_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  _QWORD *v166;
  int v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  _QWORD *v172;
  uint64_t v173;
  int v174;
  const float *v175;
  uint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  _QWORD *v180;
  int v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  _QWORD *v186;
  uint64_t v187;
  int v188;
  const float *v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  _QWORD *v194;
  int v195;
  int v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  _QWORD *v200;
  uint64_t v201;
  int v202;
  const float *v203;
  uint64_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  _QWORD *v208;
  int v209;
  int v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  _QWORD *v214;
  uint64_t v215;
  int v216;
  const float *v217;
  uint64_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  _QWORD *v222;
  int v223;
  int v224;
  uint64_t v225;
  unsigned int v226;
  unsigned int v227;
  _QWORD *v228;
  uint64_t v229;
  int v230;
  const float *v231;
  uint64_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  _QWORD *v236;
  int v237;
  int v238;
  uint64_t v239;
  unsigned int v240;
  unsigned int v241;
  _QWORD *v242;
  uint64_t v243;
  int v244;
  const float *v245;
  uint64_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  _QWORD *v250;
  __int32 v251;
  int v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  _QWORD *v256;
  uint64_t v257;
  const float *v258;
  uint64_t v259;
  int v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  _QWORD *v264;
  int v265;
  int v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int v269;
  _QWORD *v270;
  uint64_t v271;
  int v272;
  const float *v273;
  uint64_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  _QWORD *v278;
  int v279;
  int v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  _QWORD *v284;
  uint64_t v285;
  int v286;
  const float *v287;
  uint64_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  _QWORD *v292;
  int v293;
  int v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  _QWORD *v298;
  uint64_t v299;
  int v300;
  const float *v301;
  uint64_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  _QWORD *v306;
  int v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  _QWORD *v312;
  uint64_t v313;
  int v314;
  const float *v315;
  uint64_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  _QWORD *v320;
  int v321;
  int v322;
  uint64_t v323;
  unsigned int v324;
  unsigned int v325;
  _QWORD *v326;
  uint64_t v327;
  int v328;
  const float *v329;
  uint64_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  _QWORD *v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  _QWORD *v340;
  uint64_t v341;
  int v342;
  const float *v343;
  uint64_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  _QWORD *v348;
  int v349;
  int v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  _QWORD *v354;
  uint64_t v355;
  int v356;
  const float *v357;
  uint64_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  _QWORD *v362;
  __int32 v363;
  int v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  _QWORD *v368;
  uint64_t v369;
  const float *v370;
  uint64_t v371;
  int v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  _QWORD *v376;
  int v377;
  int v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  _QWORD *v382;
  uint64_t v383;
  int v384;
  const float *v385;
  uint64_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  _QWORD *v390;
  int v391;
  int v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  _QWORD *v396;
  uint64_t v397;
  int v398;
  const float *v399;
  uint64_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  _QWORD *v404;
  int v405;
  int v406;
  uint64_t v407;
  unsigned int v408;
  unsigned int v409;
  _QWORD *v410;
  uint64_t v411;
  int v412;
  const float *v413;
  uint64_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  _QWORD *v418;
  int v419;
  int v420;
  uint64_t v421;
  unsigned int v422;
  unsigned int v423;
  _QWORD *v424;
  uint64_t v425;
  int v426;
  const float *v427;
  uint64_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  _QWORD *v432;
  int v433;
  int v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  _QWORD *v438;
  uint64_t v439;
  int v440;
  const float *v441;
  uint64_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  _QWORD *v446;
  int v447;
  int v448;
  uint64_t v449;
  unsigned int v450;
  unsigned int v451;
  _QWORD *v452;
  uint64_t v453;
  int v454;
  const float *v455;
  uint64_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  _QWORD *v460;
  int v461;
  int v462;
  uint64_t v463;
  unsigned int v464;
  unsigned int v465;
  _QWORD *v466;
  uint64_t v467;
  int v468;
  const float *v469;
  uint64_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  _BYTE v474[12];
  int32x2_t v475;
  int v476;
  int32x2_t *v477;
  float32x2x3_t v478;
  float32x2x3_t v479;
  float32x2x3_t v480;
  float32x2x3_t v481;
  float32x2x3_t v482;
  float32x2x3_t v483;
  float32x2x3_t v484;
  float32x2x3_t v485;
  float32x2x3_t v486;
  float32x2x3_t v487;
  float32x2x3_t v488;
  float32x2x3_t v489;
  float32x2x3_t v490;
  float32x2x3_t v491;
  float32x2x3_t v492;
  float32x2x3_t v493;
  float32x2x3_t v494;
  float32x2x3_t v495;
  float32x2x3_t v496;
  float32x2x3_t v497;
  float32x2x3_t v498;
  float32x2x3_t v499;
  float32x2x3_t v500;
  float32x2x3_t v501;
  float32x2x3_t v502;
  float32x2x3_t v503;
  float32x2x3_t v504;
  float32x2x3_t v505;
  float32x2x3_t v506;
  float32x2x3_t v507;
  float32x2x3_t v508;
  float32x2x3_t v509;
  float32x2x3_t v510;

  v12 = *a1;
  a4.i64[0] = 0x200000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_QWORD *)v474 = a3.i64[0];
  v13 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v13;
  v14 = *(_DWORD *)(v12[1] + 860);
  if (v14 != *(_DWORD *)(*v12 + 272))
  {
    v15 = *(_QWORD *)(v12[2] + 8);
    if ((v14 & 0x10000000) != 0)
      v16 = 0x40000000;
    else
      v16 = 0x80000000;
    if ((v14 & 0x20000000) != 0)
      v17 = v16;
    else
      v17 = v14 & 0xCFFFFFFF;
    if ((v17 & 0x40000000) != 0)
    {
      v18 = *(_QWORD **)v15;
      v19 = *v18;
      v20 = *(_DWORD *)(*v18 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v20);
      a4.f32[1] = (float)(a3.i32[1] / v20);
      a4.f32[2] = (float)(v13 / v20);
      v21 = (const float *)(*v18 + 1656);
      v478 = vld3_f32(v21);
      v22 = *(_QWORD *)(v18[1] + 144);
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      v24 = vaddq_f32(a4, v23);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v478.val[0], v24.f32[0]), v478.val[1], *(float32x2_t *)v24.f32, 1), v478.val[2], v24, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v13;
      v25 = vmulq_n_f32(vaddq_f32(a3, v23), *(float *)&v22);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v19 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v478.val[0], v25.f32[0]), v478.val[1], *(float32x2_t *)v25.f32, 1), v478.val[2], v25, 2);
    }
    else if (!(v17 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v15 + 16), *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 2448) + 520 * v17, *(_QWORD *)(*(_QWORD *)(v15 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v26 = *a1;
  v27 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  a4.i64[0] = 0x300000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000003);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v28 = *(_DWORD *)(v26[1] + 864);
  if (v28 != *(_DWORD *)(*v26 + 272))
  {
    v29 = *(_QWORD *)(v26[2] + 8);
    if ((v28 & 0x10000000) != 0)
      v30 = 0x40000000;
    else
      v30 = 0x80000000;
    if ((v28 & 0x20000000) != 0)
      v31 = v30;
    else
      v31 = v28 & 0xCFFFFFFF;
    if ((v31 & 0x40000000) != 0)
    {
      v32 = *(_QWORD **)v29;
      v33 = *v32;
      v34 = (const float *)(*v32 + 1656);
      v35 = *(_QWORD *)(v32[1] + 144);
      LODWORD(v32) = *(_DWORD *)(*v32 + 8);
      v36 = a3.i32[1];
      a5.f32[0] = (float)(v27 / (int)v32);
      a5.f32[1] = (float)(a3.i32[0] / (int)v32);
      a5.f32[2] = (float)(a3.i32[1] / (int)v32);
      v37.i64[0] = 0x3F0000003F000000;
      v37.i64[1] = 0x3F0000003F000000;
      v507 = vld3_f32(v34);
      v38 = vaddq_f32(a5, v37);
      *(int32x2_t *)v38.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v38.f32[0]), v507.val[1], *(float32x2_t *)v38.f32, 1), v507.val[2], v38, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v38.f32;
      v476 = 0;
      v38.i32[0] = v27;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v38.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v36;
      v39 = vmulq_n_f32(vaddq_f32(a3, v37), *(float *)&v35);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v33 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v39.f32[0]), v507.val[1], *(float32x2_t *)v39.f32, 1), v507.val[2], v39, 2);
    }
    else if (!(v31 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v29 + 16), *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v29 + 8) + 2448) + 520 * v31, *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v40 = *a1;
  a4.i64[0] = 0x300000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000001);
  *(_QWORD *)v474 = a3.i64[0];
  v41 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v41;
  v42 = *(_DWORD *)(v40[1] + 868);
  if (v42 != *(_DWORD *)(*v40 + 272))
  {
    v43 = *(_QWORD *)(v40[2] + 8);
    if ((v42 & 0x10000000) != 0)
      v44 = 0x40000000;
    else
      v44 = 0x80000000;
    if ((v42 & 0x20000000) != 0)
      v45 = v44;
    else
      v45 = v42 & 0xCFFFFFFF;
    if ((v45 & 0x40000000) != 0)
    {
      v46 = *(_QWORD **)v43;
      v47 = *v46;
      v48 = *(_DWORD *)(*v46 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v48);
      a4.f32[1] = (float)(a3.i32[1] / v48);
      a4.f32[2] = (float)(v41 / v48);
      v49 = (const float *)(*v46 + 1656);
      v479 = vld3_f32(v49);
      v50 = *(_QWORD *)(v46[1] + 144);
      v51.i64[0] = 0x3F0000003F000000;
      v51.i64[1] = 0x3F0000003F000000;
      v52 = vaddq_f32(a4, v51);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v479.val[0], v52.f32[0]), v479.val[1], *(float32x2_t *)v52.f32, 1), v479.val[2], v52, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v41;
      v53 = vmulq_n_f32(vaddq_f32(a3, v51), *(float *)&v50);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v47 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v479.val[0], v53.f32[0]), v479.val[1], *(float32x2_t *)v53.f32, 1), v479.val[2], v53, 2);
    }
    else if (!(v45 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v43 + 16), *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v43 + 8) + 2448) + 520 * v45, *(_QWORD *)(*(_QWORD *)(v43 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v54 = *a1;
  a4.i64[0] = 0x300000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000002);
  *(_QWORD *)v474 = a3.i64[0];
  v55 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v55;
  v56 = *(_DWORD *)(v54[1] + 872);
  if (v56 != *(_DWORD *)(*v54 + 272))
  {
    v57 = *(_QWORD *)(v54[2] + 8);
    if ((v56 & 0x10000000) != 0)
      v58 = 0x40000000;
    else
      v58 = 0x80000000;
    if ((v56 & 0x20000000) != 0)
      v59 = v58;
    else
      v59 = v56 & 0xCFFFFFFF;
    if ((v59 & 0x40000000) != 0)
    {
      v60 = *(_QWORD **)v57;
      v61 = *v60;
      v62 = *(_DWORD *)(*v60 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v62);
      a4.f32[1] = (float)(a3.i32[1] / v62);
      a4.f32[2] = (float)(v55 / v62);
      v63 = (const float *)(*v60 + 1656);
      v480 = vld3_f32(v63);
      v64 = *(_QWORD *)(v60[1] + 144);
      v65.i64[0] = 0x3F0000003F000000;
      v65.i64[1] = 0x3F0000003F000000;
      v66 = vaddq_f32(a4, v65);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v480.val[0], v66.f32[0]), v480.val[1], *(float32x2_t *)v66.f32, 1), v480.val[2], v66, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v55;
      v67 = vmulq_n_f32(vaddq_f32(a3, v65), *(float *)&v64);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v61 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v480.val[0], v67.f32[0]), v480.val[1], *(float32x2_t *)v67.f32, 1), v480.val[2], v67, 2);
    }
    else if (!(v59 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v57 + 16), *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v57 + 8) + 2448) + 520 * v59, *(_QWORD *)(*(_QWORD *)(v57 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v68 = *a1;
  a4.i64[0] = 0x300000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000003);
  *(_QWORD *)v474 = a3.i64[0];
  v69 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v69;
  v70 = *(_DWORD *)(v68[1] + 876);
  if (v70 != *(_DWORD *)(*v68 + 272))
  {
    v71 = *(_QWORD *)(v68[2] + 8);
    if ((v70 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v73 = v72;
    else
      v73 = v70 & 0xCFFFFFFF;
    if ((v73 & 0x40000000) != 0)
    {
      v74 = *(_QWORD **)v71;
      v75 = *v74;
      v76 = *(_DWORD *)(*v74 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v76);
      a4.f32[1] = (float)(a3.i32[1] / v76);
      a4.f32[2] = (float)(v69 / v76);
      v77 = (const float *)(*v74 + 1656);
      v481 = vld3_f32(v77);
      v78 = *(_QWORD *)(v74[1] + 144);
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      v80 = vaddq_f32(a4, v79);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v481.val[0], v80.f32[0]), v481.val[1], *(float32x2_t *)v80.f32, 1), v481.val[2], v80, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v69;
      v81 = vmulq_n_f32(vaddq_f32(a3, v79), *(float *)&v78);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v75 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v481.val[0], v81.f32[0]), v481.val[1], *(float32x2_t *)v81.f32, 1), v481.val[2], v81, 2);
    }
    else if (!(v73 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v71 + 16), *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v71 + 8) + 2448) + 520 * v73, *(_QWORD *)(*(_QWORD *)(v71 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v82 = *a1;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000004);
  *(_QWORD *)v474 = a3.i64[0];
  v83 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v83;
  v84 = *(_DWORD *)(v82[1] + 880);
  if (v84 != *(_DWORD *)(*v82 + 272))
  {
    v85 = *(_QWORD *)(v82[2] + 8);
    if ((v84 & 0x10000000) != 0)
      v86 = 0x40000000;
    else
      v86 = 0x80000000;
    if ((v84 & 0x20000000) != 0)
      v87 = v86;
    else
      v87 = v84 & 0xCFFFFFFF;
    if ((v87 & 0x40000000) != 0)
    {
      v88 = *(_QWORD **)v85;
      v89 = *v88;
      v90 = *(_DWORD *)(*v88 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v90);
      a4.f32[1] = (float)(a3.i32[1] / v90);
      a4.f32[2] = (float)(v83 / v90);
      v91 = (const float *)(*v88 + 1656);
      v482 = vld3_f32(v91);
      v92 = *(_QWORD *)(v88[1] + 144);
      v93.i64[0] = 0x3F0000003F000000;
      v93.i64[1] = 0x3F0000003F000000;
      v94 = vaddq_f32(a4, v93);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v482.val[0], v94.f32[0]), v482.val[1], *(float32x2_t *)v94.f32, 1), v482.val[2], v94, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v83;
      v95 = vmulq_n_f32(vaddq_f32(a3, v93), *(float *)&v92);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v89 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v482.val[0], v95.f32[0]), v482.val[1], *(float32x2_t *)v95.f32, 1), v482.val[2], v95, 2);
    }
    else if (!(v87 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v85 + 16), *(_QWORD *)(*(_QWORD *)(v85 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v85 + 8) + 2448) + 520 * v87, *(_QWORD *)(*(_QWORD *)(v85 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v96 = *a1;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000005);
  *(_QWORD *)v474 = a3.i64[0];
  v97 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v97;
  v98 = *(_DWORD *)(v96[1] + 884);
  if (v98 != *(_DWORD *)(*v96 + 272))
  {
    v99 = *(_QWORD *)(v96[2] + 8);
    if ((v98 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v98 & 0x20000000) != 0)
      v101 = v100;
    else
      v101 = v98 & 0xCFFFFFFF;
    if ((v101 & 0x40000000) != 0)
    {
      v102 = *(_QWORD **)v99;
      v103 = *v102;
      v104 = *(_DWORD *)(*v102 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v104);
      a4.f32[1] = (float)(a3.i32[1] / v104);
      a4.f32[2] = (float)(v97 / v104);
      v105 = (const float *)(*v102 + 1656);
      v483 = vld3_f32(v105);
      v106 = *(_QWORD *)(v102[1] + 144);
      v107.i64[0] = 0x3F0000003F000000;
      v107.i64[1] = 0x3F0000003F000000;
      v108 = vaddq_f32(a4, v107);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v483.val[0], v108.f32[0]), v483.val[1], *(float32x2_t *)v108.f32, 1), v483.val[2], v108, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v97;
      v109 = vmulq_n_f32(vaddq_f32(a3, v107), *(float *)&v106);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v103 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v483.val[0], v109.f32[0]), v483.val[1], *(float32x2_t *)v109.f32, 1), v483.val[2], v109, 2);
    }
    else if (!(v101 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v99 + 16), *(_QWORD *)(*(_QWORD *)(v99 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v99 + 8) + 2448) + 520 * v101, *(_QWORD *)(*(_QWORD *)(v99 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v110 = *a1;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000006);
  *(_QWORD *)v474 = a3.i64[0];
  v111 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v111;
  v112 = *(_DWORD *)(v110[1] + 888);
  if (v112 != *(_DWORD *)(*v110 + 272))
  {
    v113 = *(_QWORD *)(v110[2] + 8);
    if ((v112 & 0x10000000) != 0)
      v114 = 0x40000000;
    else
      v114 = 0x80000000;
    if ((v112 & 0x20000000) != 0)
      v115 = v114;
    else
      v115 = v112 & 0xCFFFFFFF;
    if ((v115 & 0x40000000) != 0)
    {
      v116 = *(_QWORD **)v113;
      v117 = *v116;
      v118 = *(_DWORD *)(*v116 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v118);
      a4.f32[1] = (float)(a3.i32[1] / v118);
      a4.f32[2] = (float)(v111 / v118);
      v119 = (const float *)(*v116 + 1656);
      v484 = vld3_f32(v119);
      v120 = *(_QWORD *)(v116[1] + 144);
      v121.i64[0] = 0x3F0000003F000000;
      v121.i64[1] = 0x3F0000003F000000;
      v122 = vaddq_f32(a4, v121);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v484.val[0], v122.f32[0]), v484.val[1], *(float32x2_t *)v122.f32, 1), v484.val[2], v122, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v111;
      v123 = vmulq_n_f32(vaddq_f32(a3, v121), *(float *)&v120);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v117 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v484.val[0], v123.f32[0]), v484.val[1], *(float32x2_t *)v123.f32, 1), v484.val[2], v123, 2);
    }
    else if (!(v115 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v113 + 16), *(_QWORD *)(*(_QWORD *)(v113 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v113 + 8) + 2448) + 520 * v115, *(_QWORD *)(*(_QWORD *)(v113 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v124 = *a1;
  a4.i64[0] = 0x300000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000007);
  *(_QWORD *)v474 = a3.i64[0];
  v125 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v125;
  v126 = *(_DWORD *)(v124[1] + 892);
  if (v126 != *(_DWORD *)(*v124 + 272))
  {
    v127 = *(_QWORD *)(v124[2] + 8);
    if ((v126 & 0x10000000) != 0)
      v128 = 0x40000000;
    else
      v128 = 0x80000000;
    if ((v126 & 0x20000000) != 0)
      v129 = v128;
    else
      v129 = v126 & 0xCFFFFFFF;
    if ((v129 & 0x40000000) != 0)
    {
      v130 = *(_QWORD **)v127;
      v131 = *v130;
      v132 = *(_DWORD *)(*v130 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v132);
      a4.f32[1] = (float)(a3.i32[1] / v132);
      a4.f32[2] = (float)(v125 / v132);
      v133 = (const float *)(*v130 + 1656);
      v485 = vld3_f32(v133);
      v134 = *(_QWORD *)(v130[1] + 144);
      v135.i64[0] = 0x3F0000003F000000;
      v135.i64[1] = 0x3F0000003F000000;
      v136 = vaddq_f32(a4, v135);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v485.val[0], v136.f32[0]), v485.val[1], *(float32x2_t *)v136.f32, 1), v485.val[2], v136, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v125;
      v137 = vmulq_n_f32(vaddq_f32(a3, v135), *(float *)&v134);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v131 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v485.val[0], v137.f32[0]), v485.val[1], *(float32x2_t *)v137.f32, 1), v485.val[2], v137, 2);
    }
    else if (!(v129 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v127 + 16), *(_QWORD *)(*(_QWORD *)(v127 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v127 + 8) + 2448) + 520 * v129, *(_QWORD *)(*(_QWORD *)(v127 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v138 = *a1;
  v139 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000004);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v140 = *(_DWORD *)(v138[1] + 896);
  if (v140 != *(_DWORD *)(*v138 + 272))
  {
    v141 = *(_QWORD *)(v138[2] + 8);
    if ((v140 & 0x10000000) != 0)
      v142 = 0x40000000;
    else
      v142 = 0x80000000;
    if ((v140 & 0x20000000) != 0)
      v143 = v142;
    else
      v143 = v140 & 0xCFFFFFFF;
    if ((v143 & 0x40000000) != 0)
    {
      v144 = *(_QWORD **)v141;
      v145 = *v144;
      v146 = (const float *)(*v144 + 1656);
      v147 = *(_QWORD *)(v144[1] + 144);
      LODWORD(v144) = *(_DWORD *)(*v144 + 8);
      v148 = a3.i32[1];
      a5.f32[0] = (float)(v139 / (int)v144);
      a5.f32[1] = (float)(a3.i32[0] / (int)v144);
      a5.f32[2] = (float)(a3.i32[1] / (int)v144);
      v149.i64[0] = 0x3F0000003F000000;
      v149.i64[1] = 0x3F0000003F000000;
      v508 = vld3_f32(v146);
      v150 = vaddq_f32(a5, v149);
      *(int32x2_t *)v150.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v150.f32[0]), v508.val[1], *(float32x2_t *)v150.f32, 1), v508.val[2], v150, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v150.f32;
      v476 = 0;
      v150.i32[0] = v139;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v150.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v148;
      v151 = vmulq_n_f32(vaddq_f32(a3, v149), *(float *)&v147);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v145 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v151.f32[0]), v508.val[1], *(float32x2_t *)v151.f32, 1), v508.val[2], v151, 2);
    }
    else if (!(v143 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v141 + 16), *(_QWORD *)(*(_QWORD *)(v141 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v141 + 8) + 2448) + 520 * v143, *(_QWORD *)(*(_QWORD *)(v141 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v152 = *a1;
  a4.i64[0] = 0x400000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000001);
  *(_QWORD *)v474 = a3.i64[0];
  v153 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v153;
  v154 = *(_DWORD *)(v152[1] + 900);
  if (v154 != *(_DWORD *)(*v152 + 272))
  {
    v155 = *(_QWORD *)(v152[2] + 8);
    if ((v154 & 0x10000000) != 0)
      v156 = 0x40000000;
    else
      v156 = 0x80000000;
    if ((v154 & 0x20000000) != 0)
      v157 = v156;
    else
      v157 = v154 & 0xCFFFFFFF;
    if ((v157 & 0x40000000) != 0)
    {
      v158 = *(_QWORD **)v155;
      v159 = *v158;
      v160 = *(_DWORD *)(*v158 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v160);
      a4.f32[1] = (float)(a3.i32[1] / v160);
      a4.f32[2] = (float)(v153 / v160);
      v161 = (const float *)(*v158 + 1656);
      v486 = vld3_f32(v161);
      v162 = *(_QWORD *)(v158[1] + 144);
      v163.i64[0] = 0x3F0000003F000000;
      v163.i64[1] = 0x3F0000003F000000;
      v164 = vaddq_f32(a4, v163);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v486.val[0], v164.f32[0]), v486.val[1], *(float32x2_t *)v164.f32, 1), v486.val[2], v164, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v153;
      v165 = vmulq_n_f32(vaddq_f32(a3, v163), *(float *)&v162);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v159 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v486.val[0], v165.f32[0]), v486.val[1], *(float32x2_t *)v165.f32, 1), v486.val[2], v165, 2);
    }
    else if (!(v157 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v155 + 16), *(_QWORD *)(*(_QWORD *)(v155 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v155 + 8) + 2448) + 520 * v157, *(_QWORD *)(*(_QWORD *)(v155 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v166 = *a1;
  a4.i64[0] = 0x400000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000002);
  *(_QWORD *)v474 = a3.i64[0];
  v167 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v167;
  v168 = *(_DWORD *)(v166[1] + 904);
  if (v168 != *(_DWORD *)(*v166 + 272))
  {
    v169 = *(_QWORD *)(v166[2] + 8);
    if ((v168 & 0x10000000) != 0)
      v170 = 0x40000000;
    else
      v170 = 0x80000000;
    if ((v168 & 0x20000000) != 0)
      v171 = v170;
    else
      v171 = v168 & 0xCFFFFFFF;
    if ((v171 & 0x40000000) != 0)
    {
      v172 = *(_QWORD **)v169;
      v173 = *v172;
      v174 = *(_DWORD *)(*v172 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v174);
      a4.f32[1] = (float)(a3.i32[1] / v174);
      a4.f32[2] = (float)(v167 / v174);
      v175 = (const float *)(*v172 + 1656);
      v487 = vld3_f32(v175);
      v176 = *(_QWORD *)(v172[1] + 144);
      v177.i64[0] = 0x3F0000003F000000;
      v177.i64[1] = 0x3F0000003F000000;
      v178 = vaddq_f32(a4, v177);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v487.val[0], v178.f32[0]), v487.val[1], *(float32x2_t *)v178.f32, 1), v487.val[2], v178, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v167;
      v179 = vmulq_n_f32(vaddq_f32(a3, v177), *(float *)&v176);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v173 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v487.val[0], v179.f32[0]), v487.val[1], *(float32x2_t *)v179.f32, 1), v487.val[2], v179, 2);
    }
    else if (!(v171 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v169 + 16), *(_QWORD *)(*(_QWORD *)(v169 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v169 + 8) + 2448) + 520 * v171, *(_QWORD *)(*(_QWORD *)(v169 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v180 = *a1;
  a4.i64[0] = 0x400000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000003);
  *(_QWORD *)v474 = a3.i64[0];
  v181 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v181;
  v182 = *(_DWORD *)(v180[1] + 908);
  if (v182 != *(_DWORD *)(*v180 + 272))
  {
    v183 = *(_QWORD *)(v180[2] + 8);
    if ((v182 & 0x10000000) != 0)
      v184 = 0x40000000;
    else
      v184 = 0x80000000;
    if ((v182 & 0x20000000) != 0)
      v185 = v184;
    else
      v185 = v182 & 0xCFFFFFFF;
    if ((v185 & 0x40000000) != 0)
    {
      v186 = *(_QWORD **)v183;
      v187 = *v186;
      v188 = *(_DWORD *)(*v186 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v188);
      a4.f32[1] = (float)(a3.i32[1] / v188);
      a4.f32[2] = (float)(v181 / v188);
      v189 = (const float *)(*v186 + 1656);
      v488 = vld3_f32(v189);
      v190 = *(_QWORD *)(v186[1] + 144);
      v191.i64[0] = 0x3F0000003F000000;
      v191.i64[1] = 0x3F0000003F000000;
      v192 = vaddq_f32(a4, v191);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v488.val[0], v192.f32[0]), v488.val[1], *(float32x2_t *)v192.f32, 1), v488.val[2], v192, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v181;
      v193 = vmulq_n_f32(vaddq_f32(a3, v191), *(float *)&v190);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v187 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v488.val[0], v193.f32[0]), v488.val[1], *(float32x2_t *)v193.f32, 1), v488.val[2], v193, 2);
    }
    else if (!(v185 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v183 + 16), *(_QWORD *)(*(_QWORD *)(v183 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v183 + 8) + 2448) + 520 * v185, *(_QWORD *)(*(_QWORD *)(v183 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v194 = *a1;
  a4.i64[0] = 0x400000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000004);
  *(_QWORD *)v474 = a3.i64[0];
  v195 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v195;
  v196 = *(_DWORD *)(v194[1] + 912);
  if (v196 != *(_DWORD *)(*v194 + 272))
  {
    v197 = *(_QWORD *)(v194[2] + 8);
    if ((v196 & 0x10000000) != 0)
      v198 = 0x40000000;
    else
      v198 = 0x80000000;
    if ((v196 & 0x20000000) != 0)
      v199 = v198;
    else
      v199 = v196 & 0xCFFFFFFF;
    if ((v199 & 0x40000000) != 0)
    {
      v200 = *(_QWORD **)v197;
      v201 = *v200;
      v202 = *(_DWORD *)(*v200 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v202);
      a4.f32[1] = (float)(a3.i32[1] / v202);
      a4.f32[2] = (float)(v195 / v202);
      v203 = (const float *)(*v200 + 1656);
      v489 = vld3_f32(v203);
      v204 = *(_QWORD *)(v200[1] + 144);
      v205.i64[0] = 0x3F0000003F000000;
      v205.i64[1] = 0x3F0000003F000000;
      v206 = vaddq_f32(a4, v205);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v489.val[0], v206.f32[0]), v489.val[1], *(float32x2_t *)v206.f32, 1), v489.val[2], v206, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v195;
      v207 = vmulq_n_f32(vaddq_f32(a3, v205), *(float *)&v204);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v201 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v489.val[0], v207.f32[0]), v489.val[1], *(float32x2_t *)v207.f32, 1), v489.val[2], v207, 2);
    }
    else if (!(v199 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v197 + 16), *(_QWORD *)(*(_QWORD *)(v197 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v197 + 8) + 2448) + 520 * v199, *(_QWORD *)(*(_QWORD *)(v197 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v208 = *a1;
  a4.i64[0] = 0x400000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000005);
  *(_QWORD *)v474 = a3.i64[0];
  v209 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v209;
  v210 = *(_DWORD *)(v208[1] + 916);
  if (v210 != *(_DWORD *)(*v208 + 272))
  {
    v211 = *(_QWORD *)(v208[2] + 8);
    if ((v210 & 0x10000000) != 0)
      v212 = 0x40000000;
    else
      v212 = 0x80000000;
    if ((v210 & 0x20000000) != 0)
      v213 = v212;
    else
      v213 = v210 & 0xCFFFFFFF;
    if ((v213 & 0x40000000) != 0)
    {
      v214 = *(_QWORD **)v211;
      v215 = *v214;
      v216 = *(_DWORD *)(*v214 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v216);
      a4.f32[1] = (float)(a3.i32[1] / v216);
      a4.f32[2] = (float)(v209 / v216);
      v217 = (const float *)(*v214 + 1656);
      v490 = vld3_f32(v217);
      v218 = *(_QWORD *)(v214[1] + 144);
      v219.i64[0] = 0x3F0000003F000000;
      v219.i64[1] = 0x3F0000003F000000;
      v220 = vaddq_f32(a4, v219);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v490.val[0], v220.f32[0]), v490.val[1], *(float32x2_t *)v220.f32, 1), v490.val[2], v220, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v209;
      v221 = vmulq_n_f32(vaddq_f32(a3, v219), *(float *)&v218);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v215 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v490.val[0], v221.f32[0]), v490.val[1], *(float32x2_t *)v221.f32, 1), v490.val[2], v221, 2);
    }
    else if (!(v213 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v211 + 16), *(_QWORD *)(*(_QWORD *)(v211 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v211 + 8) + 2448) + 520 * v213, *(_QWORD *)(*(_QWORD *)(v211 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v222 = *a1;
  a4.i64[0] = 0x400000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000006);
  *(_QWORD *)v474 = a3.i64[0];
  v223 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v223;
  v224 = *(_DWORD *)(v222[1] + 920);
  if (v224 != *(_DWORD *)(*v222 + 272))
  {
    v225 = *(_QWORD *)(v222[2] + 8);
    if ((v224 & 0x10000000) != 0)
      v226 = 0x40000000;
    else
      v226 = 0x80000000;
    if ((v224 & 0x20000000) != 0)
      v227 = v226;
    else
      v227 = v224 & 0xCFFFFFFF;
    if ((v227 & 0x40000000) != 0)
    {
      v228 = *(_QWORD **)v225;
      v229 = *v228;
      v230 = *(_DWORD *)(*v228 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v230);
      a4.f32[1] = (float)(a3.i32[1] / v230);
      a4.f32[2] = (float)(v223 / v230);
      v231 = (const float *)(*v228 + 1656);
      v491 = vld3_f32(v231);
      v232 = *(_QWORD *)(v228[1] + 144);
      v233.i64[0] = 0x3F0000003F000000;
      v233.i64[1] = 0x3F0000003F000000;
      v234 = vaddq_f32(a4, v233);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v491.val[0], v234.f32[0]), v491.val[1], *(float32x2_t *)v234.f32, 1), v491.val[2], v234, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v223;
      v235 = vmulq_n_f32(vaddq_f32(a3, v233), *(float *)&v232);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v229 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v491.val[0], v235.f32[0]), v491.val[1], *(float32x2_t *)v235.f32, 1), v491.val[2], v235, 2);
    }
    else if (!(v227 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v225 + 16), *(_QWORD *)(*(_QWORD *)(v225 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v225 + 8) + 2448) + 520 * v227, *(_QWORD *)(*(_QWORD *)(v225 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v236 = *a1;
  a4.i64[0] = 0x400000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000007);
  *(_QWORD *)v474 = a3.i64[0];
  v237 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v237;
  v238 = *(_DWORD *)(v236[1] + 924);
  if (v238 != *(_DWORD *)(*v236 + 272))
  {
    v239 = *(_QWORD *)(v236[2] + 8);
    if ((v238 & 0x10000000) != 0)
      v240 = 0x40000000;
    else
      v240 = 0x80000000;
    if ((v238 & 0x20000000) != 0)
      v241 = v240;
    else
      v241 = v238 & 0xCFFFFFFF;
    if ((v241 & 0x40000000) != 0)
    {
      v242 = *(_QWORD **)v239;
      v243 = *v242;
      v244 = *(_DWORD *)(*v242 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v244);
      a4.f32[1] = (float)(a3.i32[1] / v244);
      a4.f32[2] = (float)(v237 / v244);
      v245 = (const float *)(*v242 + 1656);
      v492 = vld3_f32(v245);
      v246 = *(_QWORD *)(v242[1] + 144);
      v247.i64[0] = 0x3F0000003F000000;
      v247.i64[1] = 0x3F0000003F000000;
      v248 = vaddq_f32(a4, v247);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v248.f32[0]), v492.val[1], *(float32x2_t *)v248.f32, 1), v492.val[2], v248, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v237;
      v249 = vmulq_n_f32(vaddq_f32(a3, v247), *(float *)&v246);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v243 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v249.f32[0]), v492.val[1], *(float32x2_t *)v249.f32, 1), v492.val[2], v249, 2);
    }
    else if (!(v241 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v239 + 16), *(_QWORD *)(*(_QWORD *)(v239 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v239 + 8) + 2448) + 520 * v241, *(_QWORD *)(*(_QWORD *)(v239 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v250 = *a1;
  v251 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000005);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v252 = *(_DWORD *)(v250[1] + 928);
  if (v252 != *(_DWORD *)(*v250 + 272))
  {
    v253 = *(_QWORD *)(v250[2] + 8);
    if ((v252 & 0x10000000) != 0)
      v254 = 0x40000000;
    else
      v254 = 0x80000000;
    if ((v252 & 0x20000000) != 0)
      v255 = v254;
    else
      v255 = v252 & 0xCFFFFFFF;
    if ((v255 & 0x40000000) != 0)
    {
      v256 = *(_QWORD **)v253;
      v257 = *v256;
      v258 = (const float *)(*v256 + 1656);
      v259 = *(_QWORD *)(v256[1] + 144);
      LODWORD(v256) = *(_DWORD *)(*v256 + 8);
      v260 = a3.i32[1];
      a5.f32[0] = (float)(v251 / (int)v256);
      a5.f32[1] = (float)(a3.i32[0] / (int)v256);
      a5.f32[2] = (float)(a3.i32[1] / (int)v256);
      v261.i64[0] = 0x3F0000003F000000;
      v261.i64[1] = 0x3F0000003F000000;
      v509 = vld3_f32(v258);
      v262 = vaddq_f32(a5, v261);
      *(int32x2_t *)v262.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v262.f32[0]), v509.val[1], *(float32x2_t *)v262.f32, 1), v509.val[2], v262, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v262.f32;
      v476 = 0;
      v262.i32[0] = v251;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v262.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v260;
      v263 = vmulq_n_f32(vaddq_f32(a3, v261), *(float *)&v259);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v257 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v263.f32[0]), v509.val[1], *(float32x2_t *)v263.f32, 1), v509.val[2], v263, 2);
    }
    else if (!(v255 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v253 + 16), *(_QWORD *)(*(_QWORD *)(v253 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v253 + 8) + 2448) + 520 * v255, *(_QWORD *)(*(_QWORD *)(v253 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v264 = *a1;
  a4.i64[0] = 0x500000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000001);
  *(_QWORD *)v474 = a3.i64[0];
  v265 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v265;
  v266 = *(_DWORD *)(v264[1] + 932);
  if (v266 != *(_DWORD *)(*v264 + 272))
  {
    v267 = *(_QWORD *)(v264[2] + 8);
    if ((v266 & 0x10000000) != 0)
      v268 = 0x40000000;
    else
      v268 = 0x80000000;
    if ((v266 & 0x20000000) != 0)
      v269 = v268;
    else
      v269 = v266 & 0xCFFFFFFF;
    if ((v269 & 0x40000000) != 0)
    {
      v270 = *(_QWORD **)v267;
      v271 = *v270;
      v272 = *(_DWORD *)(*v270 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v272);
      a4.f32[1] = (float)(a3.i32[1] / v272);
      a4.f32[2] = (float)(v265 / v272);
      v273 = (const float *)(*v270 + 1656);
      v493 = vld3_f32(v273);
      v274 = *(_QWORD *)(v270[1] + 144);
      v275.i64[0] = 0x3F0000003F000000;
      v275.i64[1] = 0x3F0000003F000000;
      v276 = vaddq_f32(a4, v275);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v276.f32[0]), v493.val[1], *(float32x2_t *)v276.f32, 1), v493.val[2], v276, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v265;
      v277 = vmulq_n_f32(vaddq_f32(a3, v275), *(float *)&v274);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v271 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v277.f32[0]), v493.val[1], *(float32x2_t *)v277.f32, 1), v493.val[2], v277, 2);
    }
    else if (!(v269 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v267 + 16), *(_QWORD *)(*(_QWORD *)(v267 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v267 + 8) + 2448) + 520 * v269, *(_QWORD *)(*(_QWORD *)(v267 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v278 = *a1;
  a4.i64[0] = 0x500000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000002);
  *(_QWORD *)v474 = a3.i64[0];
  v279 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v279;
  v280 = *(_DWORD *)(v278[1] + 936);
  if (v280 != *(_DWORD *)(*v278 + 272))
  {
    v281 = *(_QWORD *)(v278[2] + 8);
    if ((v280 & 0x10000000) != 0)
      v282 = 0x40000000;
    else
      v282 = 0x80000000;
    if ((v280 & 0x20000000) != 0)
      v283 = v282;
    else
      v283 = v280 & 0xCFFFFFFF;
    if ((v283 & 0x40000000) != 0)
    {
      v284 = *(_QWORD **)v281;
      v285 = *v284;
      v286 = *(_DWORD *)(*v284 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v286);
      a4.f32[1] = (float)(a3.i32[1] / v286);
      a4.f32[2] = (float)(v279 / v286);
      v287 = (const float *)(*v284 + 1656);
      v494 = vld3_f32(v287);
      v288 = *(_QWORD *)(v284[1] + 144);
      v289.i64[0] = 0x3F0000003F000000;
      v289.i64[1] = 0x3F0000003F000000;
      v290 = vaddq_f32(a4, v289);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v290.f32[0]), v494.val[1], *(float32x2_t *)v290.f32, 1), v494.val[2], v290, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v279;
      v291 = vmulq_n_f32(vaddq_f32(a3, v289), *(float *)&v288);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v285 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v291.f32[0]), v494.val[1], *(float32x2_t *)v291.f32, 1), v494.val[2], v291, 2);
    }
    else if (!(v283 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v281 + 16), *(_QWORD *)(*(_QWORD *)(v281 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v281 + 8) + 2448) + 520 * v283, *(_QWORD *)(*(_QWORD *)(v281 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v292 = *a1;
  a4.i64[0] = 0x500000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000003);
  *(_QWORD *)v474 = a3.i64[0];
  v293 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v293;
  v294 = *(_DWORD *)(v292[1] + 940);
  if (v294 != *(_DWORD *)(*v292 + 272))
  {
    v295 = *(_QWORD *)(v292[2] + 8);
    if ((v294 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v294 & 0x20000000) != 0)
      v297 = v296;
    else
      v297 = v294 & 0xCFFFFFFF;
    if ((v297 & 0x40000000) != 0)
    {
      v298 = *(_QWORD **)v295;
      v299 = *v298;
      v300 = *(_DWORD *)(*v298 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v300);
      a4.f32[1] = (float)(a3.i32[1] / v300);
      a4.f32[2] = (float)(v293 / v300);
      v301 = (const float *)(*v298 + 1656);
      v495 = vld3_f32(v301);
      v302 = *(_QWORD *)(v298[1] + 144);
      v303.i64[0] = 0x3F0000003F000000;
      v303.i64[1] = 0x3F0000003F000000;
      v304 = vaddq_f32(a4, v303);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v304.f32[0]), v495.val[1], *(float32x2_t *)v304.f32, 1), v495.val[2], v304, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v293;
      v305 = vmulq_n_f32(vaddq_f32(a3, v303), *(float *)&v302);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v299 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v305.f32[0]), v495.val[1], *(float32x2_t *)v305.f32, 1), v495.val[2], v305, 2);
    }
    else if (!(v297 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v295 + 16), *(_QWORD *)(*(_QWORD *)(v295 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v295 + 8) + 2448) + 520 * v297, *(_QWORD *)(*(_QWORD *)(v295 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v306 = *a1;
  a4.i64[0] = 0x500000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000004);
  *(_QWORD *)v474 = a3.i64[0];
  v307 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v307;
  v308 = *(_DWORD *)(v306[1] + 944);
  if (v308 != *(_DWORD *)(*v306 + 272))
  {
    v309 = *(_QWORD *)(v306[2] + 8);
    if ((v308 & 0x10000000) != 0)
      v310 = 0x40000000;
    else
      v310 = 0x80000000;
    if ((v308 & 0x20000000) != 0)
      v311 = v310;
    else
      v311 = v308 & 0xCFFFFFFF;
    if ((v311 & 0x40000000) != 0)
    {
      v312 = *(_QWORD **)v309;
      v313 = *v312;
      v314 = *(_DWORD *)(*v312 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v314);
      a4.f32[1] = (float)(a3.i32[1] / v314);
      a4.f32[2] = (float)(v307 / v314);
      v315 = (const float *)(*v312 + 1656);
      v496 = vld3_f32(v315);
      v316 = *(_QWORD *)(v312[1] + 144);
      v317.i64[0] = 0x3F0000003F000000;
      v317.i64[1] = 0x3F0000003F000000;
      v318 = vaddq_f32(a4, v317);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v318.f32[0]), v496.val[1], *(float32x2_t *)v318.f32, 1), v496.val[2], v318, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v307;
      v319 = vmulq_n_f32(vaddq_f32(a3, v317), *(float *)&v316);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v313 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v319.f32[0]), v496.val[1], *(float32x2_t *)v319.f32, 1), v496.val[2], v319, 2);
    }
    else if (!(v311 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v309 + 16), *(_QWORD *)(*(_QWORD *)(v309 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v309 + 8) + 2448) + 520 * v311, *(_QWORD *)(*(_QWORD *)(v309 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v320 = *a1;
  a4.i64[0] = 0x500000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000005);
  *(_QWORD *)v474 = a3.i64[0];
  v321 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v321;
  v322 = *(_DWORD *)(v320[1] + 948);
  if (v322 != *(_DWORD *)(*v320 + 272))
  {
    v323 = *(_QWORD *)(v320[2] + 8);
    if ((v322 & 0x10000000) != 0)
      v324 = 0x40000000;
    else
      v324 = 0x80000000;
    if ((v322 & 0x20000000) != 0)
      v325 = v324;
    else
      v325 = v322 & 0xCFFFFFFF;
    if ((v325 & 0x40000000) != 0)
    {
      v326 = *(_QWORD **)v323;
      v327 = *v326;
      v328 = *(_DWORD *)(*v326 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v328);
      a4.f32[1] = (float)(a3.i32[1] / v328);
      a4.f32[2] = (float)(v321 / v328);
      v329 = (const float *)(*v326 + 1656);
      v497 = vld3_f32(v329);
      v330 = *(_QWORD *)(v326[1] + 144);
      v331.i64[0] = 0x3F0000003F000000;
      v331.i64[1] = 0x3F0000003F000000;
      v332 = vaddq_f32(a4, v331);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v332.f32[0]), v497.val[1], *(float32x2_t *)v332.f32, 1), v497.val[2], v332, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v321;
      v333 = vmulq_n_f32(vaddq_f32(a3, v331), *(float *)&v330);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v327 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v333.f32[0]), v497.val[1], *(float32x2_t *)v333.f32, 1), v497.val[2], v333, 2);
    }
    else if (!(v325 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v323 + 16), *(_QWORD *)(*(_QWORD *)(v323 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v323 + 8) + 2448) + 520 * v325, *(_QWORD *)(*(_QWORD *)(v323 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v334 = *a1;
  a4.i64[0] = 0x500000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000006);
  *(_QWORD *)v474 = a3.i64[0];
  v335 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v335;
  v336 = *(_DWORD *)(v334[1] + 952);
  if (v336 != *(_DWORD *)(*v334 + 272))
  {
    v337 = *(_QWORD *)(v334[2] + 8);
    if ((v336 & 0x10000000) != 0)
      v338 = 0x40000000;
    else
      v338 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v339 = v338;
    else
      v339 = v336 & 0xCFFFFFFF;
    if ((v339 & 0x40000000) != 0)
    {
      v340 = *(_QWORD **)v337;
      v341 = *v340;
      v342 = *(_DWORD *)(*v340 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v342);
      a4.f32[1] = (float)(a3.i32[1] / v342);
      a4.f32[2] = (float)(v335 / v342);
      v343 = (const float *)(*v340 + 1656);
      v498 = vld3_f32(v343);
      v344 = *(_QWORD *)(v340[1] + 144);
      v345.i64[0] = 0x3F0000003F000000;
      v345.i64[1] = 0x3F0000003F000000;
      v346 = vaddq_f32(a4, v345);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v346.f32[0]), v498.val[1], *(float32x2_t *)v346.f32, 1), v498.val[2], v346, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v335;
      v347 = vmulq_n_f32(vaddq_f32(a3, v345), *(float *)&v344);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v341 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v347.f32[0]), v498.val[1], *(float32x2_t *)v347.f32, 1), v498.val[2], v347, 2);
    }
    else if (!(v339 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v337 + 16), *(_QWORD *)(*(_QWORD *)(v337 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v337 + 8) + 2448) + 520 * v339, *(_QWORD *)(*(_QWORD *)(v337 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v348 = *a1;
  a4.i64[0] = 0x500000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000007);
  *(_QWORD *)v474 = a3.i64[0];
  v349 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v349;
  v350 = *(_DWORD *)(v348[1] + 956);
  if (v350 != *(_DWORD *)(*v348 + 272))
  {
    v351 = *(_QWORD *)(v348[2] + 8);
    if ((v350 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v350 & 0x20000000) != 0)
      v353 = v352;
    else
      v353 = v350 & 0xCFFFFFFF;
    if ((v353 & 0x40000000) != 0)
    {
      v354 = *(_QWORD **)v351;
      v355 = *v354;
      v356 = *(_DWORD *)(*v354 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v356);
      a4.f32[1] = (float)(a3.i32[1] / v356);
      a4.f32[2] = (float)(v349 / v356);
      v357 = (const float *)(*v354 + 1656);
      v499 = vld3_f32(v357);
      v358 = *(_QWORD *)(v354[1] + 144);
      v359.i64[0] = 0x3F0000003F000000;
      v359.i64[1] = 0x3F0000003F000000;
      v360 = vaddq_f32(a4, v359);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v360.f32[0]), v499.val[1], *(float32x2_t *)v360.f32, 1), v499.val[2], v360, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v349;
      v361 = vmulq_n_f32(vaddq_f32(a3, v359), *(float *)&v358);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v355 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v361.f32[0]), v499.val[1], *(float32x2_t *)v361.f32, 1), v499.val[2], v361, 2);
    }
    else if (!(v353 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v351 + 16), *(_QWORD *)(*(_QWORD *)(v351 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v351 + 8) + 2448) + 520 * v353, *(_QWORD *)(*(_QWORD *)(v351 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v362 = *a1;
  v363 = *(_DWORD *)a2;
  *(_DWORD *)v474 = *(_DWORD *)a2;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000006);
  *(_QWORD *)&v474[4] = a3.i64[0];
  v364 = *(_DWORD *)(v362[1] + 960);
  if (v364 != *(_DWORD *)(*v362 + 272))
  {
    v365 = *(_QWORD *)(v362[2] + 8);
    if ((v364 & 0x10000000) != 0)
      v366 = 0x40000000;
    else
      v366 = 0x80000000;
    if ((v364 & 0x20000000) != 0)
      v367 = v366;
    else
      v367 = v364 & 0xCFFFFFFF;
    if ((v367 & 0x40000000) != 0)
    {
      v368 = *(_QWORD **)v365;
      v369 = *v368;
      v370 = (const float *)(*v368 + 1656);
      v371 = *(_QWORD *)(v368[1] + 144);
      LODWORD(v368) = *(_DWORD *)(*v368 + 8);
      v372 = a3.i32[1];
      a5.f32[0] = (float)(v363 / (int)v368);
      a5.f32[1] = (float)(a3.i32[0] / (int)v368);
      a5.f32[2] = (float)(a3.i32[1] / (int)v368);
      v373.i64[0] = 0x3F0000003F000000;
      v373.i64[1] = 0x3F0000003F000000;
      v510 = vld3_f32(v370);
      v374 = vaddq_f32(a5, v373);
      *(int32x2_t *)v374.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v374.f32[0]), v510.val[1], *(float32x2_t *)v374.f32, 1), v510.val[2], v374, 2), (float32x2_t)0xBF000000BF000000));
      v475 = *(int32x2_t *)v374.f32;
      v476 = 0;
      v374.i32[0] = v363;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v374.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v372;
      v375 = vmulq_n_f32(vaddq_f32(a3, v373), *(float *)&v371);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v369 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v375.f32[0]), v510.val[1], *(float32x2_t *)v375.f32, 1), v510.val[2], v375, 2);
    }
    else if (!(v367 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v365 + 16), *(_QWORD *)(*(_QWORD *)(v365 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v365 + 8) + 2448) + 520 * v367, *(_QWORD *)(*(_QWORD *)(v365 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v376 = *a1;
  a4.i64[0] = 0x600000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_QWORD *)v474 = a3.i64[0];
  v377 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v377;
  v378 = *(_DWORD *)(v376[1] + 964);
  if (v378 != *(_DWORD *)(*v376 + 272))
  {
    v379 = *(_QWORD *)(v376[2] + 8);
    if ((v378 & 0x10000000) != 0)
      v380 = 0x40000000;
    else
      v380 = 0x80000000;
    if ((v378 & 0x20000000) != 0)
      v381 = v380;
    else
      v381 = v378 & 0xCFFFFFFF;
    if ((v381 & 0x40000000) != 0)
    {
      v382 = *(_QWORD **)v379;
      v383 = *v382;
      v384 = *(_DWORD *)(*v382 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v384);
      a4.f32[1] = (float)(a3.i32[1] / v384);
      a4.f32[2] = (float)(v377 / v384);
      v385 = (const float *)(*v382 + 1656);
      v500 = vld3_f32(v385);
      v386 = *(_QWORD *)(v382[1] + 144);
      v387.i64[0] = 0x3F0000003F000000;
      v387.i64[1] = 0x3F0000003F000000;
      v388 = vaddq_f32(a4, v387);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v388.f32[0]), v500.val[1], *(float32x2_t *)v388.f32, 1), v500.val[2], v388, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v377;
      v389 = vmulq_n_f32(vaddq_f32(a3, v387), *(float *)&v386);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v383 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v389.f32[0]), v500.val[1], *(float32x2_t *)v389.f32, 1), v500.val[2], v389, 2);
    }
    else if (!(v381 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v379 + 16), *(_QWORD *)(*(_QWORD *)(v379 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v379 + 8) + 2448) + 520 * v381, *(_QWORD *)(*(_QWORD *)(v379 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v390 = *a1;
  a4.i64[0] = 0x600000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_QWORD *)v474 = a3.i64[0];
  v391 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v391;
  v392 = *(_DWORD *)(v390[1] + 968);
  if (v392 != *(_DWORD *)(*v390 + 272))
  {
    v393 = *(_QWORD *)(v390[2] + 8);
    if ((v392 & 0x10000000) != 0)
      v394 = 0x40000000;
    else
      v394 = 0x80000000;
    if ((v392 & 0x20000000) != 0)
      v395 = v394;
    else
      v395 = v392 & 0xCFFFFFFF;
    if ((v395 & 0x40000000) != 0)
    {
      v396 = *(_QWORD **)v393;
      v397 = *v396;
      v398 = *(_DWORD *)(*v396 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v398);
      a4.f32[1] = (float)(a3.i32[1] / v398);
      a4.f32[2] = (float)(v391 / v398);
      v399 = (const float *)(*v396 + 1656);
      v501 = vld3_f32(v399);
      v400 = *(_QWORD *)(v396[1] + 144);
      v401.i64[0] = 0x3F0000003F000000;
      v401.i64[1] = 0x3F0000003F000000;
      v402 = vaddq_f32(a4, v401);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v402.f32[0]), v501.val[1], *(float32x2_t *)v402.f32, 1), v501.val[2], v402, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v391;
      v403 = vmulq_n_f32(vaddq_f32(a3, v401), *(float *)&v400);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v397 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v403.f32[0]), v501.val[1], *(float32x2_t *)v403.f32, 1), v501.val[2], v403, 2);
    }
    else if (!(v395 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v393 + 16), *(_QWORD *)(*(_QWORD *)(v393 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v393 + 8) + 2448) + 520 * v395, *(_QWORD *)(*(_QWORD *)(v393 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v404 = *a1;
  a4.i64[0] = 0x600000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_QWORD *)v474 = a3.i64[0];
  v405 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v405;
  v406 = *(_DWORD *)(v404[1] + 972);
  if (v406 != *(_DWORD *)(*v404 + 272))
  {
    v407 = *(_QWORD *)(v404[2] + 8);
    if ((v406 & 0x10000000) != 0)
      v408 = 0x40000000;
    else
      v408 = 0x80000000;
    if ((v406 & 0x20000000) != 0)
      v409 = v408;
    else
      v409 = v406 & 0xCFFFFFFF;
    if ((v409 & 0x40000000) != 0)
    {
      v410 = *(_QWORD **)v407;
      v411 = *v410;
      v412 = *(_DWORD *)(*v410 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v412);
      a4.f32[1] = (float)(a3.i32[1] / v412);
      a4.f32[2] = (float)(v405 / v412);
      v413 = (const float *)(*v410 + 1656);
      v502 = vld3_f32(v413);
      v414 = *(_QWORD *)(v410[1] + 144);
      v415.i64[0] = 0x3F0000003F000000;
      v415.i64[1] = 0x3F0000003F000000;
      v416 = vaddq_f32(a4, v415);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v416.f32[0]), v502.val[1], *(float32x2_t *)v416.f32, 1), v502.val[2], v416, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v405;
      v417 = vmulq_n_f32(vaddq_f32(a3, v415), *(float *)&v414);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v411 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v417.f32[0]), v502.val[1], *(float32x2_t *)v417.f32, 1), v502.val[2], v417, 2);
    }
    else if (!(v409 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v407 + 16), *(_QWORD *)(*(_QWORD *)(v407 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v407 + 8) + 2448) + 520 * v409, *(_QWORD *)(*(_QWORD *)(v407 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v418 = *a1;
  a4.i64[0] = 0x600000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_QWORD *)v474 = a3.i64[0];
  v419 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v419;
  v420 = *(_DWORD *)(v418[1] + 976);
  if (v420 != *(_DWORD *)(*v418 + 272))
  {
    v421 = *(_QWORD *)(v418[2] + 8);
    if ((v420 & 0x10000000) != 0)
      v422 = 0x40000000;
    else
      v422 = 0x80000000;
    if ((v420 & 0x20000000) != 0)
      v423 = v422;
    else
      v423 = v420 & 0xCFFFFFFF;
    if ((v423 & 0x40000000) != 0)
    {
      v424 = *(_QWORD **)v421;
      v425 = *v424;
      v426 = *(_DWORD *)(*v424 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v426);
      a4.f32[1] = (float)(a3.i32[1] / v426);
      a4.f32[2] = (float)(v419 / v426);
      v427 = (const float *)(*v424 + 1656);
      v503 = vld3_f32(v427);
      v428 = *(_QWORD *)(v424[1] + 144);
      v429.i64[0] = 0x3F0000003F000000;
      v429.i64[1] = 0x3F0000003F000000;
      v430 = vaddq_f32(a4, v429);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v430.f32[0]), v503.val[1], *(float32x2_t *)v430.f32, 1), v503.val[2], v430, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v419;
      v431 = vmulq_n_f32(vaddq_f32(a3, v429), *(float *)&v428);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v425 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v431.f32[0]), v503.val[1], *(float32x2_t *)v431.f32, 1), v503.val[2], v431, 2);
    }
    else if (!(v423 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v421 + 16), *(_QWORD *)(*(_QWORD *)(v421 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v421 + 8) + 2448) + 520 * v423, *(_QWORD *)(*(_QWORD *)(v421 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v432 = *a1;
  a4.i64[0] = 0x600000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_QWORD *)v474 = a3.i64[0];
  v433 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v433;
  v434 = *(_DWORD *)(v432[1] + 980);
  if (v434 != *(_DWORD *)(*v432 + 272))
  {
    v435 = *(_QWORD *)(v432[2] + 8);
    if ((v434 & 0x10000000) != 0)
      v436 = 0x40000000;
    else
      v436 = 0x80000000;
    if ((v434 & 0x20000000) != 0)
      v437 = v436;
    else
      v437 = v434 & 0xCFFFFFFF;
    if ((v437 & 0x40000000) != 0)
    {
      v438 = *(_QWORD **)v435;
      v439 = *v438;
      v440 = *(_DWORD *)(*v438 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v440);
      a4.f32[1] = (float)(a3.i32[1] / v440);
      a4.f32[2] = (float)(v433 / v440);
      v441 = (const float *)(*v438 + 1656);
      v504 = vld3_f32(v441);
      v442 = *(_QWORD *)(v438[1] + 144);
      v443.i64[0] = 0x3F0000003F000000;
      v443.i64[1] = 0x3F0000003F000000;
      v444 = vaddq_f32(a4, v443);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v444.f32[0]), v504.val[1], *(float32x2_t *)v444.f32, 1), v504.val[2], v444, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v433;
      v445 = vmulq_n_f32(vaddq_f32(a3, v443), *(float *)&v442);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v439 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v445.f32[0]), v504.val[1], *(float32x2_t *)v445.f32, 1), v504.val[2], v445, 2);
    }
    else if (!(v437 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v435 + 16), *(_QWORD *)(*(_QWORD *)(v435 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v435 + 8) + 2448) + 520 * v437, *(_QWORD *)(*(_QWORD *)(v435 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v446 = *a1;
  a4.i64[0] = 0x600000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_QWORD *)v474 = a3.i64[0];
  v447 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v447;
  v448 = *(_DWORD *)(v446[1] + 984);
  if (v448 != *(_DWORD *)(*v446 + 272))
  {
    v449 = *(_QWORD *)(v446[2] + 8);
    if ((v448 & 0x10000000) != 0)
      v450 = 0x40000000;
    else
      v450 = 0x80000000;
    if ((v448 & 0x20000000) != 0)
      v451 = v450;
    else
      v451 = v448 & 0xCFFFFFFF;
    if ((v451 & 0x40000000) != 0)
    {
      v452 = *(_QWORD **)v449;
      v453 = *v452;
      v454 = *(_DWORD *)(*v452 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v454);
      a4.f32[1] = (float)(a3.i32[1] / v454);
      a4.f32[2] = (float)(v447 / v454);
      v455 = (const float *)(*v452 + 1656);
      v505 = vld3_f32(v455);
      v456 = *(_QWORD *)(v452[1] + 144);
      v457.i64[0] = 0x3F0000003F000000;
      v457.i64[1] = 0x3F0000003F000000;
      v458 = vaddq_f32(a4, v457);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v458.f32[0]), v505.val[1], *(float32x2_t *)v458.f32, 1), v505.val[2], v458, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v447;
      v459 = vmulq_n_f32(vaddq_f32(a3, v457), *(float *)&v456);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v453 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v459.f32[0]), v505.val[1], *(float32x2_t *)v459.f32, 1), v505.val[2], v459, 2);
    }
    else if (!(v451 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v449 + 16), *(_QWORD *)(*(_QWORD *)(v449 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v449 + 8) + 2448) + 520 * v451, *(_QWORD *)(*(_QWORD *)(v449 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v460 = *a1;
  a4.i64[0] = 0x600000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_QWORD *)v474 = a3.i64[0];
  v461 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v474[8] = v461;
  v462 = *(_DWORD *)(v460[1] + 988);
  if (v462 != *(_DWORD *)(*v460 + 272))
  {
    v463 = *(_QWORD *)(v460[2] + 8);
    if ((v462 & 0x10000000) != 0)
      v464 = 0x40000000;
    else
      v464 = 0x80000000;
    if ((v462 & 0x20000000) != 0)
      v465 = v464;
    else
      v465 = v462 & 0xCFFFFFFF;
    if ((v465 & 0x40000000) != 0)
    {
      v466 = *(_QWORD **)v463;
      v467 = *v466;
      v468 = *(_DWORD *)(*v466 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v468);
      a4.f32[1] = (float)(a3.i32[1] / v468);
      a4.f32[2] = (float)(v461 / v468);
      v469 = (const float *)(*v466 + 1656);
      v506 = vld3_f32(v469);
      v470 = *(_QWORD *)(v466[1] + 144);
      v471.i64[0] = 0x3F0000003F000000;
      v471.i64[1] = 0x3F0000003F000000;
      v472 = vaddq_f32(a4, v471);
      v475 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v472.f32[0]), v506.val[1], *(float32x2_t *)v472.f32, 1), v506.val[2], v472, 2), (float32x2_t)0xBF000000BF000000));
      v476 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v461;
      v473 = vmulq_n_f32(vaddq_f32(a3, v471), *(float *)&v470);
      v477 = &v475;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v467 + 64), (int *)&v475, (uint64_t)&unk_2245BA939, (uint64_t **)&v477)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v473.f32[0]), v506.val[1], *(float32x2_t *)v473.f32, 1), v506.val[2], v473, 2);
    }
    else if (!(v465 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v463 + 16), *(_QWORD *)(*(_QWORD *)(v463 + 16) + 8), (int32x2_t *)v474, *(_QWORD *)(*(_QWORD *)(v463 + 8) + 2448) + 520 * v465, *(_QWORD *)(*(_QWORD *)(v463 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  sub_2239CCCE8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_2239CCCE8(_QWORD **a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  _QWORD *v12;
  __int32 v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  const float *v20;
  uint64_t v21;
  int v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  const float *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  const float *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  _QWORD *v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  const float *v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  _QWORD *v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  const float *v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  _QWORD *v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  const float *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _QWORD *v96;
  int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  const float *v105;
  uint64_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD *v110;
  int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  const float *v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  _QWORD *v124;
  int v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  const float *v133;
  uint64_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  _QWORD *v138;
  signed int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  _QWORD *v146;
  uint64_t v147;
  const float *v148;
  int v149;
  uint64_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  _QWORD *v154;
  signed int v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  _QWORD *v162;
  uint64_t v163;
  const float *v164;
  int v165;
  uint64_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  _QWORD *v170;
  signed int v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  _QWORD *v178;
  uint64_t v179;
  const float *v180;
  int v181;
  uint64_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  _QWORD *v186;
  signed int v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  unsigned int v192;
  unsigned int v193;
  _QWORD *v194;
  uint64_t v195;
  const float *v196;
  int v197;
  uint64_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  _QWORD *v202;
  signed int v203;
  int v204;
  int v205;
  int v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  _QWORD *v210;
  uint64_t v211;
  const float *v212;
  int v213;
  uint64_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  _QWORD *v218;
  signed int v219;
  int v220;
  int v221;
  int v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  _QWORD *v226;
  uint64_t v227;
  const float *v228;
  int v229;
  uint64_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  _QWORD *v234;
  signed int v235;
  int v236;
  int v237;
  int v238;
  uint64_t v239;
  unsigned int v240;
  unsigned int v241;
  _QWORD *v242;
  uint64_t v243;
  const float *v244;
  int v245;
  uint64_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  _QWORD *v250;
  __int32 v251;
  int v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  _QWORD *v256;
  uint64_t v257;
  const float *v258;
  uint64_t v259;
  int v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  _QWORD *v264;
  int v265;
  int v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int v269;
  _QWORD *v270;
  uint64_t v271;
  int v272;
  const float *v273;
  uint64_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  _QWORD *v278;
  int v279;
  int v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  _QWORD *v284;
  uint64_t v285;
  int v286;
  const float *v287;
  uint64_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  _QWORD *v292;
  int v293;
  int v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  _QWORD *v298;
  uint64_t v299;
  int v300;
  const float *v301;
  uint64_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  _QWORD *v306;
  int v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  _QWORD *v312;
  uint64_t v313;
  int v314;
  const float *v315;
  uint64_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  _QWORD *v320;
  int v321;
  int v322;
  uint64_t v323;
  unsigned int v324;
  unsigned int v325;
  _QWORD *v326;
  uint64_t v327;
  int v328;
  const float *v329;
  uint64_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  _QWORD *v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  _QWORD *v340;
  uint64_t v341;
  int v342;
  const float *v343;
  uint64_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  _QWORD *v348;
  int v349;
  int v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  _QWORD *v354;
  uint64_t v355;
  int v356;
  const float *v357;
  uint64_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  _QWORD *v362;
  __int32 v363;
  int v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  _QWORD *v368;
  uint64_t v369;
  const float *v370;
  uint64_t v371;
  int v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  _QWORD *v376;
  int v377;
  int v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  _QWORD *v382;
  uint64_t v383;
  int v384;
  const float *v385;
  uint64_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  _QWORD *v390;
  int v391;
  int v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  _QWORD *v396;
  uint64_t v397;
  int v398;
  const float *v399;
  uint64_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  _QWORD *v404;
  int v405;
  int v406;
  uint64_t v407;
  unsigned int v408;
  unsigned int v409;
  _QWORD *v410;
  uint64_t v411;
  int v412;
  const float *v413;
  uint64_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  _QWORD *v418;
  int v419;
  int v420;
  uint64_t v421;
  unsigned int v422;
  unsigned int v423;
  _QWORD *v424;
  uint64_t v425;
  int v426;
  const float *v427;
  uint64_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  _QWORD *v432;
  int v433;
  int v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  _QWORD *v438;
  uint64_t v439;
  int v440;
  const float *v441;
  uint64_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  _QWORD *v446;
  int v447;
  int v448;
  uint64_t v449;
  unsigned int v450;
  unsigned int v451;
  _QWORD *v452;
  uint64_t v453;
  int v454;
  const float *v455;
  uint64_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  _QWORD *v460;
  int v461;
  int v462;
  uint64_t v463;
  unsigned int v464;
  unsigned int v465;
  _QWORD *v466;
  uint64_t v467;
  int v468;
  const float *v469;
  uint64_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  _QWORD *v474;
  __int32 v475;
  int v476;
  uint64_t v477;
  unsigned int v478;
  unsigned int v479;
  _QWORD *v480;
  uint64_t v481;
  const float *v482;
  uint64_t v483;
  int v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  _BYTE v488[12];
  int32x2_t v489;
  int v490;
  int32x2_t *v491;
  float32x2x3_t v492;
  float32x2x3_t v493;
  float32x2x3_t v494;
  float32x2x3_t v495;
  float32x2x3_t v496;
  float32x2x3_t v497;
  float32x2x3_t v498;
  float32x2x3_t v499;
  float32x2x3_t v500;
  float32x2x3_t v501;
  float32x2x3_t v502;
  float32x2x3_t v503;
  float32x2x3_t v504;
  float32x2x3_t v505;
  float32x2x3_t v506;
  float32x2x3_t v507;
  float32x2x3_t v508;
  float32x2x3_t v509;
  float32x2x3_t v510;
  float32x2x3_t v511;
  float32x2x3_t v512;
  float32x2x3_t v513;
  float32x2x3_t v514;
  float32x2x3_t v515;
  float32x2x3_t v516;
  float32x2x3_t v517;
  float32x2x3_t v518;
  float32x2x3_t v519;
  float32x2x3_t v520;
  float32x2x3_t v521;
  float32x2x3_t v522;
  float32x2x3_t v523;
  float32x2x3_t v524;

  v12 = *a1;
  v13 = *(_DWORD *)a2;
  *(_DWORD *)v488 = *(_DWORD *)a2;
  a4.i64[0] = 0x300000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000007);
  *(_QWORD *)&v488[4] = a3.i64[0];
  v14 = *(_DWORD *)(v12[1] + 992);
  if (v14 != *(_DWORD *)(*v12 + 272))
  {
    v15 = *(_QWORD *)(v12[2] + 8);
    if ((v14 & 0x10000000) != 0)
      v16 = 0x40000000;
    else
      v16 = 0x80000000;
    if ((v14 & 0x20000000) != 0)
      v17 = v16;
    else
      v17 = v14 & 0xCFFFFFFF;
    if ((v17 & 0x40000000) != 0)
    {
      v18 = *(_QWORD **)v15;
      v19 = *v18;
      v20 = (const float *)(*v18 + 1656);
      v21 = *(_QWORD *)(v18[1] + 144);
      LODWORD(v18) = *(_DWORD *)(*v18 + 8);
      v22 = a3.i32[1];
      a5.f32[0] = (float)(v13 / (int)v18);
      a5.f32[1] = (float)(a3.i32[0] / (int)v18);
      a5.f32[2] = (float)(a3.i32[1] / (int)v18);
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      v514 = vld3_f32(v20);
      v24 = vaddq_f32(a5, v23);
      *(int32x2_t *)v24.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v514.val[0], v24.f32[0]), v514.val[1], *(float32x2_t *)v24.f32, 1), v514.val[2], v24, 2), (float32x2_t)0xBF000000BF000000));
      v489 = *(int32x2_t *)v24.f32;
      v490 = 0;
      v24.i32[0] = v13;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v22;
      v25 = vmulq_n_f32(vaddq_f32(a3, v23), *(float *)&v21);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v19 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v514.val[0], v25.f32[0]), v514.val[1], *(float32x2_t *)v25.f32, 1), v514.val[2], v25, 2);
    }
    else if (!(v17 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v15 + 16), *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 2448) + 520 * v17, *(_QWORD *)(*(_QWORD *)(v15 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v26 = *a1;
  a4.i64[0] = 0x700000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_QWORD *)v488 = a3.i64[0];
  v27 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v27;
  v28 = *(_DWORD *)(v26[1] + 996);
  if (v28 != *(_DWORD *)(*v26 + 272))
  {
    v29 = *(_QWORD *)(v26[2] + 8);
    if ((v28 & 0x10000000) != 0)
      v30 = 0x40000000;
    else
      v30 = 0x80000000;
    if ((v28 & 0x20000000) != 0)
      v31 = v30;
    else
      v31 = v28 & 0xCFFFFFFF;
    if ((v31 & 0x40000000) != 0)
    {
      v32 = *(_QWORD **)v29;
      v33 = *v32;
      v34 = *(_DWORD *)(*v32 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v34);
      a4.f32[1] = (float)(a3.i32[1] / v34);
      a4.f32[2] = (float)(v27 / v34);
      v35 = (const float *)(*v32 + 1656);
      v492 = vld3_f32(v35);
      v36 = *(_QWORD *)(v32[1] + 144);
      v37.i64[0] = 0x3F0000003F000000;
      v37.i64[1] = 0x3F0000003F000000;
      v38 = vaddq_f32(a4, v37);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v38.f32[0]), v492.val[1], *(float32x2_t *)v38.f32, 1), v492.val[2], v38, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v27;
      v39 = vmulq_n_f32(vaddq_f32(a3, v37), *(float *)&v36);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v33 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v492.val[0], v39.f32[0]), v492.val[1], *(float32x2_t *)v39.f32, 1), v492.val[2], v39, 2);
    }
    else if (!(v31 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v29 + 16), *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v29 + 8) + 2448) + 520 * v31, *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v40 = *a1;
  a4.i64[0] = 0x700000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_QWORD *)v488 = a3.i64[0];
  v41 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v41;
  v42 = *(_DWORD *)(v40[1] + 1000);
  if (v42 != *(_DWORD *)(*v40 + 272))
  {
    v43 = *(_QWORD *)(v40[2] + 8);
    if ((v42 & 0x10000000) != 0)
      v44 = 0x40000000;
    else
      v44 = 0x80000000;
    if ((v42 & 0x20000000) != 0)
      v45 = v44;
    else
      v45 = v42 & 0xCFFFFFFF;
    if ((v45 & 0x40000000) != 0)
    {
      v46 = *(_QWORD **)v43;
      v47 = *v46;
      v48 = *(_DWORD *)(*v46 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v48);
      a4.f32[1] = (float)(a3.i32[1] / v48);
      a4.f32[2] = (float)(v41 / v48);
      v49 = (const float *)(*v46 + 1656);
      v493 = vld3_f32(v49);
      v50 = *(_QWORD *)(v46[1] + 144);
      v51.i64[0] = 0x3F0000003F000000;
      v51.i64[1] = 0x3F0000003F000000;
      v52 = vaddq_f32(a4, v51);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v52.f32[0]), v493.val[1], *(float32x2_t *)v52.f32, 1), v493.val[2], v52, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v41;
      v53 = vmulq_n_f32(vaddq_f32(a3, v51), *(float *)&v50);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v47 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v493.val[0], v53.f32[0]), v493.val[1], *(float32x2_t *)v53.f32, 1), v493.val[2], v53, 2);
    }
    else if (!(v45 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v43 + 16), *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v43 + 8) + 2448) + 520 * v45, *(_QWORD *)(*(_QWORD *)(v43 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v54 = *a1;
  a4.i64[0] = 0x700000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_QWORD *)v488 = a3.i64[0];
  v55 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v55;
  v56 = *(_DWORD *)(v54[1] + 1004);
  if (v56 != *(_DWORD *)(*v54 + 272))
  {
    v57 = *(_QWORD *)(v54[2] + 8);
    if ((v56 & 0x10000000) != 0)
      v58 = 0x40000000;
    else
      v58 = 0x80000000;
    if ((v56 & 0x20000000) != 0)
      v59 = v58;
    else
      v59 = v56 & 0xCFFFFFFF;
    if ((v59 & 0x40000000) != 0)
    {
      v60 = *(_QWORD **)v57;
      v61 = *v60;
      v62 = *(_DWORD *)(*v60 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v62);
      a4.f32[1] = (float)(a3.i32[1] / v62);
      a4.f32[2] = (float)(v55 / v62);
      v63 = (const float *)(*v60 + 1656);
      v494 = vld3_f32(v63);
      v64 = *(_QWORD *)(v60[1] + 144);
      v65.i64[0] = 0x3F0000003F000000;
      v65.i64[1] = 0x3F0000003F000000;
      v66 = vaddq_f32(a4, v65);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v66.f32[0]), v494.val[1], *(float32x2_t *)v66.f32, 1), v494.val[2], v66, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v55;
      v67 = vmulq_n_f32(vaddq_f32(a3, v65), *(float *)&v64);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v61 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v494.val[0], v67.f32[0]), v494.val[1], *(float32x2_t *)v67.f32, 1), v494.val[2], v67, 2);
    }
    else if (!(v59 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v57 + 16), *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v57 + 8) + 2448) + 520 * v59, *(_QWORD *)(*(_QWORD *)(v57 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v68 = *a1;
  a4.i64[0] = 0x700000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_QWORD *)v488 = a3.i64[0];
  v69 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v69;
  v70 = *(_DWORD *)(v68[1] + 1008);
  if (v70 != *(_DWORD *)(*v68 + 272))
  {
    v71 = *(_QWORD *)(v68[2] + 8);
    if ((v70 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v73 = v72;
    else
      v73 = v70 & 0xCFFFFFFF;
    if ((v73 & 0x40000000) != 0)
    {
      v74 = *(_QWORD **)v71;
      v75 = *v74;
      v76 = *(_DWORD *)(*v74 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v76);
      a4.f32[1] = (float)(a3.i32[1] / v76);
      a4.f32[2] = (float)(v69 / v76);
      v77 = (const float *)(*v74 + 1656);
      v495 = vld3_f32(v77);
      v78 = *(_QWORD *)(v74[1] + 144);
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      v80 = vaddq_f32(a4, v79);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v80.f32[0]), v495.val[1], *(float32x2_t *)v80.f32, 1), v495.val[2], v80, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v69;
      v81 = vmulq_n_f32(vaddq_f32(a3, v79), *(float *)&v78);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v75 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v495.val[0], v81.f32[0]), v495.val[1], *(float32x2_t *)v81.f32, 1), v495.val[2], v81, 2);
    }
    else if (!(v73 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v71 + 16), *(_QWORD *)(*(_QWORD *)(v71 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v71 + 8) + 2448) + 520 * v73, *(_QWORD *)(*(_QWORD *)(v71 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v82 = *a1;
  a4.i64[0] = 0x700000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_QWORD *)v488 = a3.i64[0];
  v83 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v83;
  v84 = *(_DWORD *)(v82[1] + 1012);
  if (v84 != *(_DWORD *)(*v82 + 272))
  {
    v85 = *(_QWORD *)(v82[2] + 8);
    if ((v84 & 0x10000000) != 0)
      v86 = 0x40000000;
    else
      v86 = 0x80000000;
    if ((v84 & 0x20000000) != 0)
      v87 = v86;
    else
      v87 = v84 & 0xCFFFFFFF;
    if ((v87 & 0x40000000) != 0)
    {
      v88 = *(_QWORD **)v85;
      v89 = *v88;
      v90 = *(_DWORD *)(*v88 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v90);
      a4.f32[1] = (float)(a3.i32[1] / v90);
      a4.f32[2] = (float)(v83 / v90);
      v91 = (const float *)(*v88 + 1656);
      v496 = vld3_f32(v91);
      v92 = *(_QWORD *)(v88[1] + 144);
      v93.i64[0] = 0x3F0000003F000000;
      v93.i64[1] = 0x3F0000003F000000;
      v94 = vaddq_f32(a4, v93);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v94.f32[0]), v496.val[1], *(float32x2_t *)v94.f32, 1), v496.val[2], v94, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v83;
      v95 = vmulq_n_f32(vaddq_f32(a3, v93), *(float *)&v92);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v89 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v496.val[0], v95.f32[0]), v496.val[1], *(float32x2_t *)v95.f32, 1), v496.val[2], v95, 2);
    }
    else if (!(v87 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v85 + 16), *(_QWORD *)(*(_QWORD *)(v85 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v85 + 8) + 2448) + 520 * v87, *(_QWORD *)(*(_QWORD *)(v85 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v96 = *a1;
  a4.i64[0] = 0x700000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_QWORD *)v488 = a3.i64[0];
  v97 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v97;
  v98 = *(_DWORD *)(v96[1] + 1016);
  if (v98 != *(_DWORD *)(*v96 + 272))
  {
    v99 = *(_QWORD *)(v96[2] + 8);
    if ((v98 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v98 & 0x20000000) != 0)
      v101 = v100;
    else
      v101 = v98 & 0xCFFFFFFF;
    if ((v101 & 0x40000000) != 0)
    {
      v102 = *(_QWORD **)v99;
      v103 = *v102;
      v104 = *(_DWORD *)(*v102 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v104);
      a4.f32[1] = (float)(a3.i32[1] / v104);
      a4.f32[2] = (float)(v97 / v104);
      v105 = (const float *)(*v102 + 1656);
      v497 = vld3_f32(v105);
      v106 = *(_QWORD *)(v102[1] + 144);
      v107.i64[0] = 0x3F0000003F000000;
      v107.i64[1] = 0x3F0000003F000000;
      v108 = vaddq_f32(a4, v107);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v108.f32[0]), v497.val[1], *(float32x2_t *)v108.f32, 1), v497.val[2], v108, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v97;
      v109 = vmulq_n_f32(vaddq_f32(a3, v107), *(float *)&v106);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v103 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v497.val[0], v109.f32[0]), v497.val[1], *(float32x2_t *)v109.f32, 1), v497.val[2], v109, 2);
    }
    else if (!(v101 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v99 + 16), *(_QWORD *)(*(_QWORD *)(v99 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v99 + 8) + 2448) + 520 * v101, *(_QWORD *)(*(_QWORD *)(v99 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v110 = *a1;
  a4.i64[0] = 0x700000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_QWORD *)v488 = a3.i64[0];
  v111 = *(_DWORD *)(a2 + 8) + 3;
  *(_DWORD *)&v488[8] = v111;
  v112 = *(_DWORD *)(v110[1] + 1020);
  if (v112 != *(_DWORD *)(*v110 + 272))
  {
    v113 = *(_QWORD *)(v110[2] + 8);
    if ((v112 & 0x10000000) != 0)
      v114 = 0x40000000;
    else
      v114 = 0x80000000;
    if ((v112 & 0x20000000) != 0)
      v115 = v114;
    else
      v115 = v112 & 0xCFFFFFFF;
    if ((v115 & 0x40000000) != 0)
    {
      v116 = *(_QWORD **)v113;
      v117 = *v116;
      v118 = *(_DWORD *)(*v116 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v118);
      a4.f32[1] = (float)(a3.i32[1] / v118);
      a4.f32[2] = (float)(v111 / v118);
      v119 = (const float *)(*v116 + 1656);
      v498 = vld3_f32(v119);
      v120 = *(_QWORD *)(v116[1] + 144);
      v121.i64[0] = 0x3F0000003F000000;
      v121.i64[1] = 0x3F0000003F000000;
      v122 = vaddq_f32(a4, v121);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v122.f32[0]), v498.val[1], *(float32x2_t *)v122.f32, 1), v498.val[2], v122, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v111;
      v123 = vmulq_n_f32(vaddq_f32(a3, v121), *(float *)&v120);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v117 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v498.val[0], v123.f32[0]), v498.val[1], *(float32x2_t *)v123.f32, 1), v498.val[2], v123, 2);
    }
    else if (!(v115 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v113 + 16), *(_QWORD *)(*(_QWORD *)(v113 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v113 + 8) + 2448) + 520 * v115, *(_QWORD *)(*(_QWORD *)(v113 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v124 = *a1;
  a3.i64[0] = *(_QWORD *)a2;
  *(_QWORD *)v488 = *(_QWORD *)a2;
  v125 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v125;
  v126 = *(_DWORD *)(v124[1] + 1024);
  if (v126 != *(_DWORD *)(*v124 + 272))
  {
    v127 = *(_QWORD *)(v124[2] + 8);
    if ((v126 & 0x10000000) != 0)
      v128 = 0x40000000;
    else
      v128 = 0x80000000;
    if ((v126 & 0x20000000) != 0)
      v129 = v128;
    else
      v129 = v126 & 0xCFFFFFFF;
    if ((v129 & 0x40000000) != 0)
    {
      v130 = *(_QWORD **)v127;
      v131 = *v130;
      v132 = *(_DWORD *)(*v130 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v132);
      a4.f32[1] = (float)(a3.i32[1] / v132);
      a4.f32[2] = (float)(v125 / v132);
      v133 = (const float *)(*v130 + 1656);
      v499 = vld3_f32(v133);
      v134 = *(_QWORD *)(v130[1] + 144);
      v135.i64[0] = 0x3F0000003F000000;
      v135.i64[1] = 0x3F0000003F000000;
      v136 = vaddq_f32(a4, v135);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v136.f32[0]), v499.val[1], *(float32x2_t *)v136.f32, 1), v499.val[2], v136, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v125;
      v137 = vmulq_n_f32(vaddq_f32(a3, v135), *(float *)&v134);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v131 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v499.val[0], v137.f32[0]), v499.val[1], *(float32x2_t *)v137.f32, 1), v499.val[2], v137, 2);
    }
    else if (!(v129 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v127 + 16), *(_QWORD *)(*(_QWORD *)(v127 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v127 + 8) + 2448) + 520 * v129, *(_QWORD *)(*(_QWORD *)(v127 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v138 = *a1;
  v139 = *(_DWORD *)(a2 + 4);
  v140 = *(_DWORD *)a2 + 1;
  *(_DWORD *)v488 = v140;
  *(_DWORD *)&v488[4] = v139;
  v141 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v141;
  v142 = *(_DWORD *)(v138[1] + 1028);
  if (v142 != *(_DWORD *)(*v138 + 272))
  {
    v143 = *(_QWORD *)(v138[2] + 8);
    if ((v142 & 0x10000000) != 0)
      v144 = 0x40000000;
    else
      v144 = 0x80000000;
    if ((v142 & 0x20000000) != 0)
      v145 = v144;
    else
      v145 = v142 & 0xCFFFFFFF;
    if ((v145 & 0x40000000) != 0)
    {
      v146 = *(_QWORD **)v143;
      v147 = *v146;
      v148 = (const float *)(*v146 + 1656);
      v149 = *(_DWORD *)(*v146 + 8);
      a3.f32[0] = (float)(v140 / v149);
      v150 = *(_QWORD *)(v146[1] + 144);
      a3.f32[1] = (float)(v139 / v149);
      a3.f32[2] = (float)(v141 / v149);
      v151.i64[0] = 0x3F0000003F000000;
      v151.i64[1] = 0x3F0000003F000000;
      v152 = vaddq_f32(a3, v151);
      v515 = vld3_f32(v148);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v515.val[0], v152.f32[0]), v515.val[1], *(float32x2_t *)v152.f32, 1), v515.val[2], v152, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v152.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v139, v140));
      v152.f32[2] = (float)v141;
      v153 = vmulq_n_f32(vaddq_f32(v152, v151), *(float *)&v150);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v147 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v515.val[0], v153.f32[0]), v515.val[1], *(float32x2_t *)v153.f32, 1), v515.val[2], v153, 2);
    }
    else if (!(v145 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v143 + 16), *(_QWORD *)(*(_QWORD *)(v143 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v143 + 8) + 2448) + 520 * v145, *(_QWORD *)(*(_QWORD *)(v143 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v154 = *a1;
  v155 = *(_DWORD *)(a2 + 4);
  v156 = *(_DWORD *)a2 + 2;
  *(_DWORD *)v488 = v156;
  *(_DWORD *)&v488[4] = v155;
  v157 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v157;
  v158 = *(_DWORD *)(v154[1] + 1032);
  if (v158 != *(_DWORD *)(*v154 + 272))
  {
    v159 = *(_QWORD *)(v154[2] + 8);
    if ((v158 & 0x10000000) != 0)
      v160 = 0x40000000;
    else
      v160 = 0x80000000;
    if ((v158 & 0x20000000) != 0)
      v161 = v160;
    else
      v161 = v158 & 0xCFFFFFFF;
    if ((v161 & 0x40000000) != 0)
    {
      v162 = *(_QWORD **)v159;
      v163 = *v162;
      v164 = (const float *)(*v162 + 1656);
      v165 = *(_DWORD *)(*v162 + 8);
      a3.f32[0] = (float)(v156 / v165);
      v166 = *(_QWORD *)(v162[1] + 144);
      a3.f32[1] = (float)(v155 / v165);
      a3.f32[2] = (float)(v157 / v165);
      v167.i64[0] = 0x3F0000003F000000;
      v167.i64[1] = 0x3F0000003F000000;
      v168 = vaddq_f32(a3, v167);
      v516 = vld3_f32(v164);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v516.val[0], v168.f32[0]), v516.val[1], *(float32x2_t *)v168.f32, 1), v516.val[2], v168, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v168.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v155, v156));
      v168.f32[2] = (float)v157;
      v169 = vmulq_n_f32(vaddq_f32(v168, v167), *(float *)&v166);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v163 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v516.val[0], v169.f32[0]), v516.val[1], *(float32x2_t *)v169.f32, 1), v516.val[2], v169, 2);
    }
    else if (!(v161 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v159 + 16), *(_QWORD *)(*(_QWORD *)(v159 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v159 + 8) + 2448) + 520 * v161, *(_QWORD *)(*(_QWORD *)(v159 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v170 = *a1;
  v171 = *(_DWORD *)(a2 + 4);
  v172 = *(_DWORD *)a2 + 3;
  *(_DWORD *)v488 = v172;
  *(_DWORD *)&v488[4] = v171;
  v173 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v173;
  v174 = *(_DWORD *)(v170[1] + 1036);
  if (v174 != *(_DWORD *)(*v170 + 272))
  {
    v175 = *(_QWORD *)(v170[2] + 8);
    if ((v174 & 0x10000000) != 0)
      v176 = 0x40000000;
    else
      v176 = 0x80000000;
    if ((v174 & 0x20000000) != 0)
      v177 = v176;
    else
      v177 = v174 & 0xCFFFFFFF;
    if ((v177 & 0x40000000) != 0)
    {
      v178 = *(_QWORD **)v175;
      v179 = *v178;
      v180 = (const float *)(*v178 + 1656);
      v181 = *(_DWORD *)(*v178 + 8);
      a3.f32[0] = (float)(v172 / v181);
      v182 = *(_QWORD *)(v178[1] + 144);
      a3.f32[1] = (float)(v171 / v181);
      a3.f32[2] = (float)(v173 / v181);
      v183.i64[0] = 0x3F0000003F000000;
      v183.i64[1] = 0x3F0000003F000000;
      v184 = vaddq_f32(a3, v183);
      v517 = vld3_f32(v180);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v517.val[0], v184.f32[0]), v517.val[1], *(float32x2_t *)v184.f32, 1), v517.val[2], v184, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v184.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v171, v172));
      v184.f32[2] = (float)v173;
      v185 = vmulq_n_f32(vaddq_f32(v184, v183), *(float *)&v182);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v179 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v517.val[0], v185.f32[0]), v517.val[1], *(float32x2_t *)v185.f32, 1), v517.val[2], v185, 2);
    }
    else if (!(v177 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v175 + 16), *(_QWORD *)(*(_QWORD *)(v175 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v175 + 8) + 2448) + 520 * v177, *(_QWORD *)(*(_QWORD *)(v175 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v186 = *a1;
  v187 = *(_DWORD *)(a2 + 4);
  v188 = *(_DWORD *)a2 + 4;
  *(_DWORD *)v488 = v188;
  *(_DWORD *)&v488[4] = v187;
  v189 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v189;
  v190 = *(_DWORD *)(v186[1] + 1040);
  if (v190 != *(_DWORD *)(*v186 + 272))
  {
    v191 = *(_QWORD *)(v186[2] + 8);
    if ((v190 & 0x10000000) != 0)
      v192 = 0x40000000;
    else
      v192 = 0x80000000;
    if ((v190 & 0x20000000) != 0)
      v193 = v192;
    else
      v193 = v190 & 0xCFFFFFFF;
    if ((v193 & 0x40000000) != 0)
    {
      v194 = *(_QWORD **)v191;
      v195 = *v194;
      v196 = (const float *)(*v194 + 1656);
      v197 = *(_DWORD *)(*v194 + 8);
      a3.f32[0] = (float)(v188 / v197);
      v198 = *(_QWORD *)(v194[1] + 144);
      a3.f32[1] = (float)(v187 / v197);
      a3.f32[2] = (float)(v189 / v197);
      v199.i64[0] = 0x3F0000003F000000;
      v199.i64[1] = 0x3F0000003F000000;
      v200 = vaddq_f32(a3, v199);
      v518 = vld3_f32(v196);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v518.val[0], v200.f32[0]), v518.val[1], *(float32x2_t *)v200.f32, 1), v518.val[2], v200, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v200.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v187, v188));
      v200.f32[2] = (float)v189;
      v201 = vmulq_n_f32(vaddq_f32(v200, v199), *(float *)&v198);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v195 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v518.val[0], v201.f32[0]), v518.val[1], *(float32x2_t *)v201.f32, 1), v518.val[2], v201, 2);
    }
    else if (!(v193 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v191 + 16), *(_QWORD *)(*(_QWORD *)(v191 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v191 + 8) + 2448) + 520 * v193, *(_QWORD *)(*(_QWORD *)(v191 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v202 = *a1;
  v203 = *(_DWORD *)(a2 + 4);
  v204 = *(_DWORD *)a2 + 5;
  *(_DWORD *)v488 = v204;
  *(_DWORD *)&v488[4] = v203;
  v205 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v205;
  v206 = *(_DWORD *)(v202[1] + 1044);
  if (v206 != *(_DWORD *)(*v202 + 272))
  {
    v207 = *(_QWORD *)(v202[2] + 8);
    if ((v206 & 0x10000000) != 0)
      v208 = 0x40000000;
    else
      v208 = 0x80000000;
    if ((v206 & 0x20000000) != 0)
      v209 = v208;
    else
      v209 = v206 & 0xCFFFFFFF;
    if ((v209 & 0x40000000) != 0)
    {
      v210 = *(_QWORD **)v207;
      v211 = *v210;
      v212 = (const float *)(*v210 + 1656);
      v213 = *(_DWORD *)(*v210 + 8);
      a3.f32[0] = (float)(v204 / v213);
      v214 = *(_QWORD *)(v210[1] + 144);
      a3.f32[1] = (float)(v203 / v213);
      a3.f32[2] = (float)(v205 / v213);
      v215.i64[0] = 0x3F0000003F000000;
      v215.i64[1] = 0x3F0000003F000000;
      v216 = vaddq_f32(a3, v215);
      v519 = vld3_f32(v212);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v519.val[0], v216.f32[0]), v519.val[1], *(float32x2_t *)v216.f32, 1), v519.val[2], v216, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v216.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v203, v204));
      v216.f32[2] = (float)v205;
      v217 = vmulq_n_f32(vaddq_f32(v216, v215), *(float *)&v214);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v211 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v519.val[0], v217.f32[0]), v519.val[1], *(float32x2_t *)v217.f32, 1), v519.val[2], v217, 2);
    }
    else if (!(v209 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v207 + 16), *(_QWORD *)(*(_QWORD *)(v207 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v207 + 8) + 2448) + 520 * v209, *(_QWORD *)(*(_QWORD *)(v207 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v218 = *a1;
  v219 = *(_DWORD *)(a2 + 4);
  v220 = *(_DWORD *)a2 + 6;
  *(_DWORD *)v488 = v220;
  *(_DWORD *)&v488[4] = v219;
  v221 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v221;
  v222 = *(_DWORD *)(v218[1] + 1048);
  if (v222 != *(_DWORD *)(*v218 + 272))
  {
    v223 = *(_QWORD *)(v218[2] + 8);
    if ((v222 & 0x10000000) != 0)
      v224 = 0x40000000;
    else
      v224 = 0x80000000;
    if ((v222 & 0x20000000) != 0)
      v225 = v224;
    else
      v225 = v222 & 0xCFFFFFFF;
    if ((v225 & 0x40000000) != 0)
    {
      v226 = *(_QWORD **)v223;
      v227 = *v226;
      v228 = (const float *)(*v226 + 1656);
      v229 = *(_DWORD *)(*v226 + 8);
      a3.f32[0] = (float)(v220 / v229);
      v230 = *(_QWORD *)(v226[1] + 144);
      a3.f32[1] = (float)(v219 / v229);
      a3.f32[2] = (float)(v221 / v229);
      v231.i64[0] = 0x3F0000003F000000;
      v231.i64[1] = 0x3F0000003F000000;
      v232 = vaddq_f32(a3, v231);
      v520 = vld3_f32(v228);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v520.val[0], v232.f32[0]), v520.val[1], *(float32x2_t *)v232.f32, 1), v520.val[2], v232, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v232.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v219, v220));
      v232.f32[2] = (float)v221;
      v233 = vmulq_n_f32(vaddq_f32(v232, v231), *(float *)&v230);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v227 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v520.val[0], v233.f32[0]), v520.val[1], *(float32x2_t *)v233.f32, 1), v520.val[2], v233, 2);
    }
    else if (!(v225 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v223 + 16), *(_QWORD *)(*(_QWORD *)(v223 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v223 + 8) + 2448) + 520 * v225, *(_QWORD *)(*(_QWORD *)(v223 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v234 = *a1;
  v235 = *(_DWORD *)(a2 + 4);
  v236 = *(_DWORD *)a2 + 7;
  *(_DWORD *)v488 = v236;
  *(_DWORD *)&v488[4] = v235;
  v237 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v237;
  v238 = *(_DWORD *)(v234[1] + 1052);
  if (v238 != *(_DWORD *)(*v234 + 272))
  {
    v239 = *(_QWORD *)(v234[2] + 8);
    if ((v238 & 0x10000000) != 0)
      v240 = 0x40000000;
    else
      v240 = 0x80000000;
    if ((v238 & 0x20000000) != 0)
      v241 = v240;
    else
      v241 = v238 & 0xCFFFFFFF;
    if ((v241 & 0x40000000) != 0)
    {
      v242 = *(_QWORD **)v239;
      v243 = *v242;
      v244 = (const float *)(*v242 + 1656);
      v245 = *(_DWORD *)(*v242 + 8);
      a3.f32[0] = (float)(v236 / v245);
      v246 = *(_QWORD *)(v242[1] + 144);
      a3.f32[1] = (float)(v235 / v245);
      a3.f32[2] = (float)(v237 / v245);
      v247.i64[0] = 0x3F0000003F000000;
      v247.i64[1] = 0x3F0000003F000000;
      v248 = vaddq_f32(a3, v247);
      v521 = vld3_f32(v244);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v521.val[0], v248.f32[0]), v521.val[1], *(float32x2_t *)v248.f32, 1), v521.val[2], v248, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)v248.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v235, v236));
      v248.f32[2] = (float)v237;
      v249 = vmulq_n_f32(vaddq_f32(v248, v247), *(float *)&v246);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v243 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v521.val[0], v249.f32[0]), v521.val[1], *(float32x2_t *)v249.f32, 1), v521.val[2], v249, 2);
    }
    else if (!(v241 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v239 + 16), *(_QWORD *)(*(_QWORD *)(v239 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v239 + 8) + 2448) + 520 * v241, *(_QWORD *)(*(_QWORD *)(v239 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v250 = *a1;
  v251 = *(_DWORD *)a2;
  *(_DWORD *)v488 = *(_DWORD *)a2;
  a4.i64[0] = 0x400000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000001);
  *(_QWORD *)&v488[4] = a3.i64[0];
  v252 = *(_DWORD *)(v250[1] + 1056);
  if (v252 != *(_DWORD *)(*v250 + 272))
  {
    v253 = *(_QWORD *)(v250[2] + 8);
    if ((v252 & 0x10000000) != 0)
      v254 = 0x40000000;
    else
      v254 = 0x80000000;
    if ((v252 & 0x20000000) != 0)
      v255 = v254;
    else
      v255 = v252 & 0xCFFFFFFF;
    if ((v255 & 0x40000000) != 0)
    {
      v256 = *(_QWORD **)v253;
      v257 = *v256;
      v258 = (const float *)(*v256 + 1656);
      v259 = *(_QWORD *)(v256[1] + 144);
      LODWORD(v256) = *(_DWORD *)(*v256 + 8);
      v260 = a3.i32[1];
      a5.f32[0] = (float)(v251 / (int)v256);
      a5.f32[1] = (float)(a3.i32[0] / (int)v256);
      a5.f32[2] = (float)(a3.i32[1] / (int)v256);
      v261.i64[0] = 0x3F0000003F000000;
      v261.i64[1] = 0x3F0000003F000000;
      v522 = vld3_f32(v258);
      v262 = vaddq_f32(a5, v261);
      *(int32x2_t *)v262.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v522.val[0], v262.f32[0]), v522.val[1], *(float32x2_t *)v262.f32, 1), v522.val[2], v262, 2), (float32x2_t)0xBF000000BF000000));
      v489 = *(int32x2_t *)v262.f32;
      v490 = 0;
      v262.i32[0] = v251;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v262.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v260;
      v263 = vmulq_n_f32(vaddq_f32(a3, v261), *(float *)&v259);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v257 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v522.val[0], v263.f32[0]), v522.val[1], *(float32x2_t *)v263.f32, 1), v522.val[2], v263, 2);
    }
    else if (!(v255 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v253 + 16), *(_QWORD *)(*(_QWORD *)(v253 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v253 + 8) + 2448) + 520 * v255, *(_QWORD *)(*(_QWORD *)(v253 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v264 = *a1;
  a4.i64[0] = 0x100000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000001);
  *(_QWORD *)v488 = a3.i64[0];
  v265 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v265;
  v266 = *(_DWORD *)(v264[1] + 1060);
  if (v266 != *(_DWORD *)(*v264 + 272))
  {
    v267 = *(_QWORD *)(v264[2] + 8);
    if ((v266 & 0x10000000) != 0)
      v268 = 0x40000000;
    else
      v268 = 0x80000000;
    if ((v266 & 0x20000000) != 0)
      v269 = v268;
    else
      v269 = v266 & 0xCFFFFFFF;
    if ((v269 & 0x40000000) != 0)
    {
      v270 = *(_QWORD **)v267;
      v271 = *v270;
      v272 = *(_DWORD *)(*v270 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v272);
      a4.f32[1] = (float)(a3.i32[1] / v272);
      a4.f32[2] = (float)(v265 / v272);
      v273 = (const float *)(*v270 + 1656);
      v500 = vld3_f32(v273);
      v274 = *(_QWORD *)(v270[1] + 144);
      v275.i64[0] = 0x3F0000003F000000;
      v275.i64[1] = 0x3F0000003F000000;
      v276 = vaddq_f32(a4, v275);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v276.f32[0]), v500.val[1], *(float32x2_t *)v276.f32, 1), v500.val[2], v276, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v265;
      v277 = vmulq_n_f32(vaddq_f32(a3, v275), *(float *)&v274);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v271 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v500.val[0], v277.f32[0]), v500.val[1], *(float32x2_t *)v277.f32, 1), v500.val[2], v277, 2);
    }
    else if (!(v269 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v267 + 16), *(_QWORD *)(*(_QWORD *)(v267 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v267 + 8) + 2448) + 520 * v269, *(_QWORD *)(*(_QWORD *)(v267 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v278 = *a1;
  a4.i64[0] = 0x100000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000002);
  *(_QWORD *)v488 = a3.i64[0];
  v279 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v279;
  v280 = *(_DWORD *)(v278[1] + 1064);
  if (v280 != *(_DWORD *)(*v278 + 272))
  {
    v281 = *(_QWORD *)(v278[2] + 8);
    if ((v280 & 0x10000000) != 0)
      v282 = 0x40000000;
    else
      v282 = 0x80000000;
    if ((v280 & 0x20000000) != 0)
      v283 = v282;
    else
      v283 = v280 & 0xCFFFFFFF;
    if ((v283 & 0x40000000) != 0)
    {
      v284 = *(_QWORD **)v281;
      v285 = *v284;
      v286 = *(_DWORD *)(*v284 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v286);
      a4.f32[1] = (float)(a3.i32[1] / v286);
      a4.f32[2] = (float)(v279 / v286);
      v287 = (const float *)(*v284 + 1656);
      v501 = vld3_f32(v287);
      v288 = *(_QWORD *)(v284[1] + 144);
      v289.i64[0] = 0x3F0000003F000000;
      v289.i64[1] = 0x3F0000003F000000;
      v290 = vaddq_f32(a4, v289);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v290.f32[0]), v501.val[1], *(float32x2_t *)v290.f32, 1), v501.val[2], v290, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v279;
      v291 = vmulq_n_f32(vaddq_f32(a3, v289), *(float *)&v288);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v285 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v501.val[0], v291.f32[0]), v501.val[1], *(float32x2_t *)v291.f32, 1), v501.val[2], v291, 2);
    }
    else if (!(v283 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v281 + 16), *(_QWORD *)(*(_QWORD *)(v281 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v281 + 8) + 2448) + 520 * v283, *(_QWORD *)(*(_QWORD *)(v281 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v292 = *a1;
  a4.i64[0] = 0x100000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000003);
  *(_QWORD *)v488 = a3.i64[0];
  v293 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v293;
  v294 = *(_DWORD *)(v292[1] + 1068);
  if (v294 != *(_DWORD *)(*v292 + 272))
  {
    v295 = *(_QWORD *)(v292[2] + 8);
    if ((v294 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v294 & 0x20000000) != 0)
      v297 = v296;
    else
      v297 = v294 & 0xCFFFFFFF;
    if ((v297 & 0x40000000) != 0)
    {
      v298 = *(_QWORD **)v295;
      v299 = *v298;
      v300 = *(_DWORD *)(*v298 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v300);
      a4.f32[1] = (float)(a3.i32[1] / v300);
      a4.f32[2] = (float)(v293 / v300);
      v301 = (const float *)(*v298 + 1656);
      v502 = vld3_f32(v301);
      v302 = *(_QWORD *)(v298[1] + 144);
      v303.i64[0] = 0x3F0000003F000000;
      v303.i64[1] = 0x3F0000003F000000;
      v304 = vaddq_f32(a4, v303);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v304.f32[0]), v502.val[1], *(float32x2_t *)v304.f32, 1), v502.val[2], v304, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v293;
      v305 = vmulq_n_f32(vaddq_f32(a3, v303), *(float *)&v302);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v299 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v502.val[0], v305.f32[0]), v502.val[1], *(float32x2_t *)v305.f32, 1), v502.val[2], v305, 2);
    }
    else if (!(v297 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v295 + 16), *(_QWORD *)(*(_QWORD *)(v295 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v295 + 8) + 2448) + 520 * v297, *(_QWORD *)(*(_QWORD *)(v295 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v306 = *a1;
  a4.i64[0] = 0x100000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000004);
  *(_QWORD *)v488 = a3.i64[0];
  v307 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v307;
  v308 = *(_DWORD *)(v306[1] + 1072);
  if (v308 != *(_DWORD *)(*v306 + 272))
  {
    v309 = *(_QWORD *)(v306[2] + 8);
    if ((v308 & 0x10000000) != 0)
      v310 = 0x40000000;
    else
      v310 = 0x80000000;
    if ((v308 & 0x20000000) != 0)
      v311 = v310;
    else
      v311 = v308 & 0xCFFFFFFF;
    if ((v311 & 0x40000000) != 0)
    {
      v312 = *(_QWORD **)v309;
      v313 = *v312;
      v314 = *(_DWORD *)(*v312 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v314);
      a4.f32[1] = (float)(a3.i32[1] / v314);
      a4.f32[2] = (float)(v307 / v314);
      v315 = (const float *)(*v312 + 1656);
      v503 = vld3_f32(v315);
      v316 = *(_QWORD *)(v312[1] + 144);
      v317.i64[0] = 0x3F0000003F000000;
      v317.i64[1] = 0x3F0000003F000000;
      v318 = vaddq_f32(a4, v317);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v318.f32[0]), v503.val[1], *(float32x2_t *)v318.f32, 1), v503.val[2], v318, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v307;
      v319 = vmulq_n_f32(vaddq_f32(a3, v317), *(float *)&v316);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v313 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v503.val[0], v319.f32[0]), v503.val[1], *(float32x2_t *)v319.f32, 1), v503.val[2], v319, 2);
    }
    else if (!(v311 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v309 + 16), *(_QWORD *)(*(_QWORD *)(v309 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v309 + 8) + 2448) + 520 * v311, *(_QWORD *)(*(_QWORD *)(v309 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v320 = *a1;
  a4.i64[0] = 0x100000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000005);
  *(_QWORD *)v488 = a3.i64[0];
  v321 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v321;
  v322 = *(_DWORD *)(v320[1] + 1076);
  if (v322 != *(_DWORD *)(*v320 + 272))
  {
    v323 = *(_QWORD *)(v320[2] + 8);
    if ((v322 & 0x10000000) != 0)
      v324 = 0x40000000;
    else
      v324 = 0x80000000;
    if ((v322 & 0x20000000) != 0)
      v325 = v324;
    else
      v325 = v322 & 0xCFFFFFFF;
    if ((v325 & 0x40000000) != 0)
    {
      v326 = *(_QWORD **)v323;
      v327 = *v326;
      v328 = *(_DWORD *)(*v326 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v328);
      a4.f32[1] = (float)(a3.i32[1] / v328);
      a4.f32[2] = (float)(v321 / v328);
      v329 = (const float *)(*v326 + 1656);
      v504 = vld3_f32(v329);
      v330 = *(_QWORD *)(v326[1] + 144);
      v331.i64[0] = 0x3F0000003F000000;
      v331.i64[1] = 0x3F0000003F000000;
      v332 = vaddq_f32(a4, v331);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v332.f32[0]), v504.val[1], *(float32x2_t *)v332.f32, 1), v504.val[2], v332, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v321;
      v333 = vmulq_n_f32(vaddq_f32(a3, v331), *(float *)&v330);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v327 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v504.val[0], v333.f32[0]), v504.val[1], *(float32x2_t *)v333.f32, 1), v504.val[2], v333, 2);
    }
    else if (!(v325 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v323 + 16), *(_QWORD *)(*(_QWORD *)(v323 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v323 + 8) + 2448) + 520 * v325, *(_QWORD *)(*(_QWORD *)(v323 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v334 = *a1;
  a4.i64[0] = 0x100000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000006);
  *(_QWORD *)v488 = a3.i64[0];
  v335 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v335;
  v336 = *(_DWORD *)(v334[1] + 1080);
  if (v336 != *(_DWORD *)(*v334 + 272))
  {
    v337 = *(_QWORD *)(v334[2] + 8);
    if ((v336 & 0x10000000) != 0)
      v338 = 0x40000000;
    else
      v338 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v339 = v338;
    else
      v339 = v336 & 0xCFFFFFFF;
    if ((v339 & 0x40000000) != 0)
    {
      v340 = *(_QWORD **)v337;
      v341 = *v340;
      v342 = *(_DWORD *)(*v340 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v342);
      a4.f32[1] = (float)(a3.i32[1] / v342);
      a4.f32[2] = (float)(v335 / v342);
      v343 = (const float *)(*v340 + 1656);
      v505 = vld3_f32(v343);
      v344 = *(_QWORD *)(v340[1] + 144);
      v345.i64[0] = 0x3F0000003F000000;
      v345.i64[1] = 0x3F0000003F000000;
      v346 = vaddq_f32(a4, v345);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v346.f32[0]), v505.val[1], *(float32x2_t *)v346.f32, 1), v505.val[2], v346, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v335;
      v347 = vmulq_n_f32(vaddq_f32(a3, v345), *(float *)&v344);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v341 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v505.val[0], v347.f32[0]), v505.val[1], *(float32x2_t *)v347.f32, 1), v505.val[2], v347, 2);
    }
    else if (!(v339 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v337 + 16), *(_QWORD *)(*(_QWORD *)(v337 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v337 + 8) + 2448) + 520 * v339, *(_QWORD *)(*(_QWORD *)(v337 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v348 = *a1;
  a4.i64[0] = 0x100000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000007);
  *(_QWORD *)v488 = a3.i64[0];
  v349 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v349;
  v350 = *(_DWORD *)(v348[1] + 1084);
  if (v350 != *(_DWORD *)(*v348 + 272))
  {
    v351 = *(_QWORD *)(v348[2] + 8);
    if ((v350 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v350 & 0x20000000) != 0)
      v353 = v352;
    else
      v353 = v350 & 0xCFFFFFFF;
    if ((v353 & 0x40000000) != 0)
    {
      v354 = *(_QWORD **)v351;
      v355 = *v354;
      v356 = *(_DWORD *)(*v354 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v356);
      a4.f32[1] = (float)(a3.i32[1] / v356);
      a4.f32[2] = (float)(v349 / v356);
      v357 = (const float *)(*v354 + 1656);
      v506 = vld3_f32(v357);
      v358 = *(_QWORD *)(v354[1] + 144);
      v359.i64[0] = 0x3F0000003F000000;
      v359.i64[1] = 0x3F0000003F000000;
      v360 = vaddq_f32(a4, v359);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v360.f32[0]), v506.val[1], *(float32x2_t *)v360.f32, 1), v506.val[2], v360, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v349;
      v361 = vmulq_n_f32(vaddq_f32(a3, v359), *(float *)&v358);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v355 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v506.val[0], v361.f32[0]), v506.val[1], *(float32x2_t *)v361.f32, 1), v506.val[2], v361, 2);
    }
    else if (!(v353 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v351 + 16), *(_QWORD *)(*(_QWORD *)(v351 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v351 + 8) + 2448) + 520 * v353, *(_QWORD *)(*(_QWORD *)(v351 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v362 = *a1;
  v363 = *(_DWORD *)a2;
  *(_DWORD *)v488 = *(_DWORD *)a2;
  a4.i64[0] = 0x400000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000002);
  *(_QWORD *)&v488[4] = a3.i64[0];
  v364 = *(_DWORD *)(v362[1] + 1088);
  if (v364 != *(_DWORD *)(*v362 + 272))
  {
    v365 = *(_QWORD *)(v362[2] + 8);
    if ((v364 & 0x10000000) != 0)
      v366 = 0x40000000;
    else
      v366 = 0x80000000;
    if ((v364 & 0x20000000) != 0)
      v367 = v366;
    else
      v367 = v364 & 0xCFFFFFFF;
    if ((v367 & 0x40000000) != 0)
    {
      v368 = *(_QWORD **)v365;
      v369 = *v368;
      v370 = (const float *)(*v368 + 1656);
      v371 = *(_QWORD *)(v368[1] + 144);
      LODWORD(v368) = *(_DWORD *)(*v368 + 8);
      v372 = a3.i32[1];
      a5.f32[0] = (float)(v363 / (int)v368);
      a5.f32[1] = (float)(a3.i32[0] / (int)v368);
      a5.f32[2] = (float)(a3.i32[1] / (int)v368);
      v373.i64[0] = 0x3F0000003F000000;
      v373.i64[1] = 0x3F0000003F000000;
      v523 = vld3_f32(v370);
      v374 = vaddq_f32(a5, v373);
      *(int32x2_t *)v374.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v523.val[0], v374.f32[0]), v523.val[1], *(float32x2_t *)v374.f32, 1), v523.val[2], v374, 2), (float32x2_t)0xBF000000BF000000));
      v489 = *(int32x2_t *)v374.f32;
      v490 = 0;
      v374.i32[0] = v363;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v374.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v372;
      v375 = vmulq_n_f32(vaddq_f32(a3, v373), *(float *)&v371);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v369 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v523.val[0], v375.f32[0]), v523.val[1], *(float32x2_t *)v375.f32, 1), v523.val[2], v375, 2);
    }
    else if (!(v367 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v365 + 16), *(_QWORD *)(*(_QWORD *)(v365 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v365 + 8) + 2448) + 520 * v367, *(_QWORD *)(*(_QWORD *)(v365 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v376 = *a1;
  a4.i64[0] = 0x200000001;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000001);
  *(_QWORD *)v488 = a3.i64[0];
  v377 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v377;
  v378 = *(_DWORD *)(v376[1] + 1092);
  if (v378 != *(_DWORD *)(*v376 + 272))
  {
    v379 = *(_QWORD *)(v376[2] + 8);
    if ((v378 & 0x10000000) != 0)
      v380 = 0x40000000;
    else
      v380 = 0x80000000;
    if ((v378 & 0x20000000) != 0)
      v381 = v380;
    else
      v381 = v378 & 0xCFFFFFFF;
    if ((v381 & 0x40000000) != 0)
    {
      v382 = *(_QWORD **)v379;
      v383 = *v382;
      v384 = *(_DWORD *)(*v382 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v384);
      a4.f32[1] = (float)(a3.i32[1] / v384);
      a4.f32[2] = (float)(v377 / v384);
      v385 = (const float *)(*v382 + 1656);
      v507 = vld3_f32(v385);
      v386 = *(_QWORD *)(v382[1] + 144);
      v387.i64[0] = 0x3F0000003F000000;
      v387.i64[1] = 0x3F0000003F000000;
      v388 = vaddq_f32(a4, v387);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v388.f32[0]), v507.val[1], *(float32x2_t *)v388.f32, 1), v507.val[2], v388, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v377;
      v389 = vmulq_n_f32(vaddq_f32(a3, v387), *(float *)&v386);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v383 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v507.val[0], v389.f32[0]), v507.val[1], *(float32x2_t *)v389.f32, 1), v507.val[2], v389, 2);
    }
    else if (!(v381 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v379 + 16), *(_QWORD *)(*(_QWORD *)(v379 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v379 + 8) + 2448) + 520 * v381, *(_QWORD *)(*(_QWORD *)(v379 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v390 = *a1;
  a4.i64[0] = 0x200000002;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000002);
  *(_QWORD *)v488 = a3.i64[0];
  v391 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v391;
  v392 = *(_DWORD *)(v390[1] + 1096);
  if (v392 != *(_DWORD *)(*v390 + 272))
  {
    v393 = *(_QWORD *)(v390[2] + 8);
    if ((v392 & 0x10000000) != 0)
      v394 = 0x40000000;
    else
      v394 = 0x80000000;
    if ((v392 & 0x20000000) != 0)
      v395 = v394;
    else
      v395 = v392 & 0xCFFFFFFF;
    if ((v395 & 0x40000000) != 0)
    {
      v396 = *(_QWORD **)v393;
      v397 = *v396;
      v398 = *(_DWORD *)(*v396 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v398);
      a4.f32[1] = (float)(a3.i32[1] / v398);
      a4.f32[2] = (float)(v391 / v398);
      v399 = (const float *)(*v396 + 1656);
      v508 = vld3_f32(v399);
      v400 = *(_QWORD *)(v396[1] + 144);
      v401.i64[0] = 0x3F0000003F000000;
      v401.i64[1] = 0x3F0000003F000000;
      v402 = vaddq_f32(a4, v401);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v402.f32[0]), v508.val[1], *(float32x2_t *)v402.f32, 1), v508.val[2], v402, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v391;
      v403 = vmulq_n_f32(vaddq_f32(a3, v401), *(float *)&v400);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v397 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v508.val[0], v403.f32[0]), v508.val[1], *(float32x2_t *)v403.f32, 1), v508.val[2], v403, 2);
    }
    else if (!(v395 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v393 + 16), *(_QWORD *)(*(_QWORD *)(v393 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v393 + 8) + 2448) + 520 * v395, *(_QWORD *)(*(_QWORD *)(v393 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v404 = *a1;
  a4.i64[0] = 0x200000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_QWORD *)v488 = a3.i64[0];
  v405 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v405;
  v406 = *(_DWORD *)(v404[1] + 1100);
  if (v406 != *(_DWORD *)(*v404 + 272))
  {
    v407 = *(_QWORD *)(v404[2] + 8);
    if ((v406 & 0x10000000) != 0)
      v408 = 0x40000000;
    else
      v408 = 0x80000000;
    if ((v406 & 0x20000000) != 0)
      v409 = v408;
    else
      v409 = v406 & 0xCFFFFFFF;
    if ((v409 & 0x40000000) != 0)
    {
      v410 = *(_QWORD **)v407;
      v411 = *v410;
      v412 = *(_DWORD *)(*v410 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v412);
      a4.f32[1] = (float)(a3.i32[1] / v412);
      a4.f32[2] = (float)(v405 / v412);
      v413 = (const float *)(*v410 + 1656);
      v509 = vld3_f32(v413);
      v414 = *(_QWORD *)(v410[1] + 144);
      v415.i64[0] = 0x3F0000003F000000;
      v415.i64[1] = 0x3F0000003F000000;
      v416 = vaddq_f32(a4, v415);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v416.f32[0]), v509.val[1], *(float32x2_t *)v416.f32, 1), v509.val[2], v416, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v405;
      v417 = vmulq_n_f32(vaddq_f32(a3, v415), *(float *)&v414);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v411 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v509.val[0], v417.f32[0]), v509.val[1], *(float32x2_t *)v417.f32, 1), v509.val[2], v417, 2);
    }
    else if (!(v409 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v407 + 16), *(_QWORD *)(*(_QWORD *)(v407 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v407 + 8) + 2448) + 520 * v409, *(_QWORD *)(*(_QWORD *)(v407 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v418 = *a1;
  a4.i64[0] = 0x200000004;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_QWORD *)v488 = a3.i64[0];
  v419 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v419;
  v420 = *(_DWORD *)(v418[1] + 1104);
  if (v420 != *(_DWORD *)(*v418 + 272))
  {
    v421 = *(_QWORD *)(v418[2] + 8);
    if ((v420 & 0x10000000) != 0)
      v422 = 0x40000000;
    else
      v422 = 0x80000000;
    if ((v420 & 0x20000000) != 0)
      v423 = v422;
    else
      v423 = v420 & 0xCFFFFFFF;
    if ((v423 & 0x40000000) != 0)
    {
      v424 = *(_QWORD **)v421;
      v425 = *v424;
      v426 = *(_DWORD *)(*v424 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v426);
      a4.f32[1] = (float)(a3.i32[1] / v426);
      a4.f32[2] = (float)(v419 / v426);
      v427 = (const float *)(*v424 + 1656);
      v510 = vld3_f32(v427);
      v428 = *(_QWORD *)(v424[1] + 144);
      v429.i64[0] = 0x3F0000003F000000;
      v429.i64[1] = 0x3F0000003F000000;
      v430 = vaddq_f32(a4, v429);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v430.f32[0]), v510.val[1], *(float32x2_t *)v430.f32, 1), v510.val[2], v430, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v419;
      v431 = vmulq_n_f32(vaddq_f32(a3, v429), *(float *)&v428);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v425 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v510.val[0], v431.f32[0]), v510.val[1], *(float32x2_t *)v431.f32, 1), v510.val[2], v431, 2);
    }
    else if (!(v423 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v421 + 16), *(_QWORD *)(*(_QWORD *)(v421 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v421 + 8) + 2448) + 520 * v423, *(_QWORD *)(*(_QWORD *)(v421 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v432 = *a1;
  a4.i64[0] = 0x200000005;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_QWORD *)v488 = a3.i64[0];
  v433 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v433;
  v434 = *(_DWORD *)(v432[1] + 1108);
  if (v434 != *(_DWORD *)(*v432 + 272))
  {
    v435 = *(_QWORD *)(v432[2] + 8);
    if ((v434 & 0x10000000) != 0)
      v436 = 0x40000000;
    else
      v436 = 0x80000000;
    if ((v434 & 0x20000000) != 0)
      v437 = v436;
    else
      v437 = v434 & 0xCFFFFFFF;
    if ((v437 & 0x40000000) != 0)
    {
      v438 = *(_QWORD **)v435;
      v439 = *v438;
      v440 = *(_DWORD *)(*v438 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v440);
      a4.f32[1] = (float)(a3.i32[1] / v440);
      a4.f32[2] = (float)(v433 / v440);
      v441 = (const float *)(*v438 + 1656);
      v511 = vld3_f32(v441);
      v442 = *(_QWORD *)(v438[1] + 144);
      v443.i64[0] = 0x3F0000003F000000;
      v443.i64[1] = 0x3F0000003F000000;
      v444 = vaddq_f32(a4, v443);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v511.val[0], v444.f32[0]), v511.val[1], *(float32x2_t *)v444.f32, 1), v511.val[2], v444, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v433;
      v445 = vmulq_n_f32(vaddq_f32(a3, v443), *(float *)&v442);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v439 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v511.val[0], v445.f32[0]), v511.val[1], *(float32x2_t *)v445.f32, 1), v511.val[2], v445, 2);
    }
    else if (!(v437 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v435 + 16), *(_QWORD *)(*(_QWORD *)(v435 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v435 + 8) + 2448) + 520 * v437, *(_QWORD *)(*(_QWORD *)(v435 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v446 = *a1;
  a4.i64[0] = 0x200000006;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_QWORD *)v488 = a3.i64[0];
  v447 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v447;
  v448 = *(_DWORD *)(v446[1] + 1112);
  if (v448 != *(_DWORD *)(*v446 + 272))
  {
    v449 = *(_QWORD *)(v446[2] + 8);
    if ((v448 & 0x10000000) != 0)
      v450 = 0x40000000;
    else
      v450 = 0x80000000;
    if ((v448 & 0x20000000) != 0)
      v451 = v450;
    else
      v451 = v448 & 0xCFFFFFFF;
    if ((v451 & 0x40000000) != 0)
    {
      v452 = *(_QWORD **)v449;
      v453 = *v452;
      v454 = *(_DWORD *)(*v452 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v454);
      a4.f32[1] = (float)(a3.i32[1] / v454);
      a4.f32[2] = (float)(v447 / v454);
      v455 = (const float *)(*v452 + 1656);
      v512 = vld3_f32(v455);
      v456 = *(_QWORD *)(v452[1] + 144);
      v457.i64[0] = 0x3F0000003F000000;
      v457.i64[1] = 0x3F0000003F000000;
      v458 = vaddq_f32(a4, v457);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v512.val[0], v458.f32[0]), v512.val[1], *(float32x2_t *)v458.f32, 1), v512.val[2], v458, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v447;
      v459 = vmulq_n_f32(vaddq_f32(a3, v457), *(float *)&v456);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v453 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v512.val[0], v459.f32[0]), v512.val[1], *(float32x2_t *)v459.f32, 1), v512.val[2], v459, 2);
    }
    else if (!(v451 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v449 + 16), *(_QWORD *)(*(_QWORD *)(v449 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v449 + 8) + 2448) + 520 * v451, *(_QWORD *)(*(_QWORD *)(v449 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v460 = *a1;
  a4.i64[0] = 0x200000007;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_QWORD *)v488 = a3.i64[0];
  v461 = *(_DWORD *)(a2 + 8) + 4;
  *(_DWORD *)&v488[8] = v461;
  v462 = *(_DWORD *)(v460[1] + 1116);
  if (v462 != *(_DWORD *)(*v460 + 272))
  {
    v463 = *(_QWORD *)(v460[2] + 8);
    if ((v462 & 0x10000000) != 0)
      v464 = 0x40000000;
    else
      v464 = 0x80000000;
    if ((v462 & 0x20000000) != 0)
      v465 = v464;
    else
      v465 = v462 & 0xCFFFFFFF;
    if ((v465 & 0x40000000) != 0)
    {
      v466 = *(_QWORD **)v463;
      v467 = *v466;
      v468 = *(_DWORD *)(*v466 + 8);
      a4.f32[0] = (float)(a3.i32[0] / v468);
      a4.f32[1] = (float)(a3.i32[1] / v468);
      a4.f32[2] = (float)(v461 / v468);
      v469 = (const float *)(*v466 + 1656);
      v513 = vld3_f32(v469);
      v470 = *(_QWORD *)(v466[1] + 144);
      v471.i64[0] = 0x3F0000003F000000;
      v471.i64[1] = 0x3F0000003F000000;
      v472 = vaddq_f32(a4, v471);
      v489 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v513.val[0], v472.f32[0]), v513.val[1], *(float32x2_t *)v472.f32, 1), v513.val[2], v472, 2), (float32x2_t)0xBF000000BF000000));
      v490 = 0;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(*(int32x2_t *)a3.f32);
      a3.f32[2] = (float)v461;
      v473 = vmulq_n_f32(vaddq_f32(a3, v471), *(float *)&v470);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v467 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v513.val[0], v473.f32[0]), v513.val[1], *(float32x2_t *)v473.f32, 1), v513.val[2], v473, 2);
    }
    else if (!(v465 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v463 + 16), *(_QWORD *)(*(_QWORD *)(v463 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v463 + 8) + 2448) + 520 * v465, *(_QWORD *)(*(_QWORD *)(v463 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  v474 = *a1;
  v475 = *(_DWORD *)a2;
  *(_DWORD *)v488 = *(_DWORD *)a2;
  a4.i64[0] = 0x400000003;
  *(int32x2_t *)a3.f32 = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000003);
  *(_QWORD *)&v488[4] = a3.i64[0];
  v476 = *(_DWORD *)(v474[1] + 1120);
  if (v476 != *(_DWORD *)(*v474 + 272))
  {
    v477 = *(_QWORD *)(v474[2] + 8);
    if ((v476 & 0x10000000) != 0)
      v478 = 0x40000000;
    else
      v478 = 0x80000000;
    if ((v476 & 0x20000000) != 0)
      v479 = v478;
    else
      v479 = v476 & 0xCFFFFFFF;
    if ((v479 & 0x40000000) != 0)
    {
      v480 = *(_QWORD **)v477;
      v481 = *v480;
      v482 = (const float *)(*v480 + 1656);
      v483 = *(_QWORD *)(v480[1] + 144);
      LODWORD(v480) = *(_DWORD *)(*v480 + 8);
      v484 = a3.i32[1];
      a5.f32[0] = (float)(v475 / (int)v480);
      a5.f32[1] = (float)(a3.i32[0] / (int)v480);
      a5.f32[2] = (float)(a3.i32[1] / (int)v480);
      v485.i64[0] = 0x3F0000003F000000;
      v485.i64[1] = 0x3F0000003F000000;
      v524 = vld3_f32(v482);
      v486 = vaddq_f32(a5, v485);
      *(int32x2_t *)v486.f32 = vcvt_s32_f32(vadd_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v524.val[0], v486.f32[0]), v524.val[1], *(float32x2_t *)v486.f32, 1), v524.val[2], v486, 2), (float32x2_t)0xBF000000BF000000));
      v489 = *(int32x2_t *)v486.f32;
      v490 = 0;
      v486.i32[0] = v475;
      *(float32x2_t *)a3.f32 = vcvt_f32_s32(vzip1_s32(*(int32x2_t *)v486.f32, *(int32x2_t *)a3.f32));
      a3.f32[2] = (float)v484;
      v487 = vmulq_n_f32(vaddq_f32(a3, v485), *(float *)&v483);
      v491 = &v489;
      *(uint64_t *)((char *)sub_223A17B10((float *)(v481 + 64), (int *)&v489, (uint64_t)&unk_2245BA939, (uint64_t **)&v491)
                 + 28) = (uint64_t)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v524.val[0], v487.f32[0]), v524.val[1], *(float32x2_t *)v487.f32, 1), v524.val[2], v487, 2);
    }
    else if (!(v479 >> 30))
    {
      sub_2239B2318(**(_QWORD **)(v477 + 16), *(_QWORD *)(*(_QWORD *)(v477 + 16) + 8), (int32x2_t *)v488, *(_QWORD *)(*(_QWORD *)(v477 + 8) + 2448) + 520 * v479, *(_QWORD *)(*(_QWORD *)(v477 + 16) + 16), *(double *)a3.i64, a4, *(double *)a5.i64, a6, a7, a8, a9, a10);
    }
  }
  sub_2239CF5A0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

