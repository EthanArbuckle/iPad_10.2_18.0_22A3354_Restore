void sub_22374EFDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  uint64_t v48;
  void *v51;
  void *v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  const char *v61;
  NSObject *v62;
  const char *v63;
  const char *v64;
  _QWORD v65[3];
  int v66;
  const char *v67;
  int v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;

  sub_223714960(&v73);
  if (a2 == 1)
  {
    v51 = __cxa_begin_catch(a1);
    v52 = sub_2233B6FCC();
    sub_223195728((uint64_t)v52, "cv3d.recon.kfplanes_pers", 0x18uLL, "Cannot list directory content: %s", 0x21uLL);
    sub_22374F514(&v72);
    if (**(int **)(v72 + 56) <= 5)
    {
      v53 = *(unsigned __int8 *)(v72 + 72);
      v54 = sub_22322F254(v72, "OSLogSurrogateAppender", 1, 0);
      v55 = v54 ? v54 + 16 : 0;
      if (v53 || v54)
      {
        v65[0] = &v72;
        v65[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v65[2] = std::chrono::system_clock::now().__d_.__rep_;
        v66 = 5;
        v67 = "unknown file";
        v68 = 67;
        v70 = 0;
        v71 = 0;
        v69 = "unknown function";
        v64 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v51 + 16))(v51);
        v56 = (uint64_t *)(v72 + 16);
        if (*(char *)(v72 + 39) < 0)
        {
          v58 = *(_QWORD *)(v72 + 16);
          v57 = *(_QWORD *)(v72 + 24);
        }
        else
        {
          v57 = *(unsigned __int8 *)(v72 + 39);
          v58 = *(_QWORD *)v65[0] + 16;
        }
        *(_QWORD *)(v48 - 224) = v58;
        *(_QWORD *)(v48 - 216) = v57;
        v59 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628(v48 - 176);
          sub_223199C58("com.apple.cv3d", v48 - 176, &xmmword_255788F40);
          if (*(_BYTE *)(v48 - 152) && *(char *)(v48 - 153) < 0)
            operator delete(*(void **)(v48 - 176));
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        v60 = byte_255788F57;
        if (byte_255788F57 >= 0)
        {
          v61 = (const char *)&xmmword_255788F40;
        }
        else
        {
          v60 = *((_QWORD *)&xmmword_255788F40 + 1);
          v61 = (const char *)xmmword_255788F40;
        }
        *(_QWORD *)(v48 - 208) = v61;
        *(_QWORD *)(v48 - 200) = v60;
        *(_QWORD *)(v48 - 176) = os_log_create(v61, *(const char **)(v48 - 224));
        sub_223199D38((_QWORD *)(v48 - 168), v48 - 208);
        sub_223199D38((_QWORD *)(v48 - 136), v48 - 224);
        v62 = *(NSObject **)(v48 - 176);
        sub_223199BDC(v48 - 176);
        sub_22375C864(v55, v56, v62, OS_LOG_TYPE_ERROR, &v64);
        if (v53)
        {
          v63 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v51 + 16))(v51);
          sub_22322C138((uint64_t)v65, "Cannot list directory content: %s", v63);
          sub_223182C08((uint64_t)v65);
        }
        sub_223182DAC((uint64_t)v65);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x22374E44CLL);
  }
  JUMPOUT(0x22374F4C8);
}

void sub_22374F3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  va_list va;

  va_start(va, a11);
  if (*(_BYTE *)(v11 - 152))
  {
    if (*(char *)(v11 - 153) < 0)
      operator delete(*(void **)(v11 - 176));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  __cxa_end_catch();
  sub_22374F608(&v17);
  sub_22374F678(v13);
  sub_22375C0C4(v14);
  sub_22374F6EC(v15);
  sub_22375C06C(*(char **)(v16 + 56));
  sub_2236E4288(v16);
  _Unwind_Resume(a1);
}

void sub_22374F484(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48();
  _Unwind_Resume(a1);
}

void sub_22374F494()
{
  JUMPOUT(0x22374F4A0);
}

void sub_22374F504(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x22374F508);
  _Unwind_Resume(a1);
}

void sub_22374F50C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x22374F510);
  sub_22316DC48();
}

void sub_22374F514(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC4E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC4E0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC4D8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC4E0);
  }
  *a1 = qword_2540CC4D8;
}

void sub_22374F5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC4E0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC4E0);
  _Unwind_Resume(a1);
}

void **sub_22374F608(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 6;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22374F678(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (*(_QWORD *)(a1 + 48))
  {
    v2 = (uint64_t *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 32);
    v3 = *(uint64_t **)(a1 + 40);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 48) = 0;
    if (v3 != (uint64_t *)(a1 + 32))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  sub_22375A478(*(std::future<void> **)(a1 + 16));
  return a1;
}

uint64_t sub_22374F6EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_22374F73C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24EC581A0;
  sub_223757674(a1);
  if (*(_QWORD *)(a1 + 184))
  {
    v3 = *(_QWORD *)(a1 + 168);
    v2 = *(uint64_t **)(a1 + 176);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 184) = 0;
    if (v2 != (uint64_t *)(a1 + 168))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 168));
    }
  }
  sub_22375A478(*(std::future<void> **)(a1 + 152));
  sub_22375C0C4(a1 + 88);
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  sub_22375C06C(*(char **)(a1 + 56));
  *(_QWORD *)a1 = off_24EC57960;
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22374F84C(uint64_t a1)
{
  sub_22374F73C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22374F870(uint64_t a1@<X0>, std::__fs::filesystem::path *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  std::string::size_type v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *size;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__fs::filesystem::path *v46;
  uint64_t v47;
  const char *v48;
  size_t v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  std::string::size_type *p_size;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  size_t v62;
  void *v63;
  _QWORD *v64;
  size_t v65;
  size_t v66;
  _BYTE *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  char *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__fs::filesystem::path *v85;
  uint64_t v86;
  const char *v87;
  size_t v88;
  unsigned __int8 v89;
  const char *v90;
  size_t v91;
  std::string::size_type *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  size_t v101;
  void *v102;
  _QWORD *v103;
  size_t v104;
  size_t v105;
  _OWORD *v106;
  void *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string::size_type v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  std::string::size_type v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__fs::filesystem::path *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  _QWORD *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  char *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::string::size_type v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  std::string::size_type v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__fs::filesystem::path *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void *exception;
  const std::error_category *v193;
  const char *v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  unint64_t v200;
  unint64_t v201;
  int v202;
  std::future<void> v203;
  char v204;
  __int128 v205;
  std::string::size_type v206;
  int v207;
  std::__fs::filesystem::path v208;
  _OWORD v209[2];
  int v210;
  std::__fs::filesystem::path v211;
  uint64_t v212;
  std::__fs::filesystem::path v213;
  char *category;
  std::__fs::filesystem::path __p;
  uint64_t v216;
  const char *v217;
  int v218;
  const char *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  std::__fs::filesystem::path v222;
  char *v223;
  std::__shared_weak_count *v224;
  std::__fs::filesystem::path v225;
  __int128 v226;
  char *v227;
  size_t v228;
  unint64_t v229;
  char v230;
  uint64_t v231[2];
  _BYTE __dst[24];
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  sub_2236E5318(a2, a1, &v213);
  if (SHIBYTE(v213.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__p, v213.__pn_.__r_.__value_.__l.__data_, v213.__pn_.__r_.__value_.__l.__size_);
  else
    __p = v213;
  v5 = sub_22324053C(a1 + 144, (const void **)&__p.__pn_.__r_.__value_.__l.__data_);
  v6 = v5;
  v7 = (uint64_t *)(a1 + 152);
  if ((uint64_t *)(a1 + 152) == v5)
  {
    v13 = 0;
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else
  {
    v8 = (uint64_t *)(a1 + 168);
    v9 = (uint64_t *)v5[14];
    if (v9 != (uint64_t *)(a1 + 168))
    {
      v10 = (uint64_t *)v9[1];
      if (v10 != v8)
      {
        v11 = *v9;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)v9[1] = v11;
        v12 = *v8;
        *(_QWORD *)(v12 + 8) = v9;
        *v9 = v12;
        *v8 = (uint64_t)v9;
        v9[1] = (uint64_t)v8;
      }
    }
    v13 = (uint64_t)(v5 + 7);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if (v7 != v5)
        goto LABEL_10;
LABEL_18:
      if (!*(_BYTE *)(a1 + 40))
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
        goto LABEL_354;
      }
      memset(v209, 0, sizeof(v209));
      v210 = 728309956;
      kdebug_trace();
      if (SHIBYTE(v213.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_223197FA4(&v208, v213.__pn_.__r_.__value_.__l.__data_, v213.__pn_.__r_.__value_.__l.__size_);
      else
        v208 = v213;
      sub_223751D00(&v212, a1, (__int128 *)&v208);
      if (SHIBYTE(v208.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v208.__pn_.__r_.__value_.__l.__data_);
        v20 = v212;
        if (!*(_BYTE *)(a1 + 208))
          goto LABEL_33;
      }
      else
      {
        v20 = v212;
        if (!*(_BYTE *)(a1 + 208))
          goto LABEL_33;
      }
      v225.__pn_.__r_.__value_.__r.__words[0] = std::chrono::steady_clock::now().__d_.__rep_
                                              + 1000 * *(_QWORD *)(a1 + 200);
      if (sub_22375D580(v20, (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)&v225))
      {
        sub_22374F514(&category);
        if (**((int **)category + 7) > 4)
          goto LABEL_249;
        v21 = category[72];
        v22 = sub_22322F254((uint64_t)category, "OSLogSurrogateAppender", 1, 0);
        v23 = v22;
        if (!v21 && !v22)
          goto LABEL_249;
        __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&category;
        __p.__pn_.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__pn_.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v216) = 4;
        v217 = "unknown file";
        v218 = 114;
        v220 = 0;
        v221 = 0;
        v219 = "unknown function";
        v200 = v23;
        if (SHIBYTE(v213.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v211, v213.__pn_.__r_.__value_.__l.__data_, v213.__pn_.__r_.__value_.__l.__size_);
        else
          v211 = v213;
        if ((v211.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v211;
        else
          v46 = (std::__fs::filesystem::path *)v211.__pn_.__r_.__value_.__r.__words[0];
        v47 = *(_QWORD *)__p.__pn_.__r_.__value_.__l.__data_;
        v48 = (const char *)(*(_QWORD *)__p.__pn_.__r_.__value_.__l.__data_ + 16);
        v194 = v48;
        v196 = *(_QWORD *)__p.__pn_.__r_.__value_.__l.__data_;
        if (*(char *)(*(_QWORD *)__p.__pn_.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v48 = *(const char **)(v47 + 16);
          v49 = *(_QWORD *)(v47 + 24);
        }
        else
        {
          v49 = *(unsigned __int8 *)(*(_QWORD *)__p.__pn_.__r_.__value_.__l.__data_ + 39);
        }
        v198 = v21;
        v50 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&v225);
          sub_223199C58("com.apple.cv3d", (unint64_t)&v225, &xmmword_255788F40);
          if ((_BYTE)v226 && SHIBYTE(v225.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v225.__pn_.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v51 = (const char *)&xmmword_255788F40;
        else
          v51 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v52 = byte_255788F57;
        else
          v52 = *((_QWORD *)&xmmword_255788F40 + 1);
        v225.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v51, v48);
        p_size = &v225.__pn_.__r_.__value_.__l.__size_;
        if (v52 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v52 >= 0x17)
        {
          v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17)
            v54 = v52 | 7;
          v55 = v54 + 1;
          p_size = (std::string::size_type *)operator new(v54 + 1);
          v225.__pn_.__r_.__value_.__r.__words[2] = v52;
          *(_QWORD *)&v226 = v55 | 0x8000000000000000;
          v225.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
        }
        else
        {
          BYTE7(v226) = v52;
          if (!v52)
          {
LABEL_102:
            *((_BYTE *)p_size + v52) = 0;
            BYTE8(v226) = 1;
            v56 = (char *)&v227;
            if (v49 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v57 = (const char *)v46;
            if (v49 >= 0x17)
            {
              v59 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v49 | 7) != 0x17)
                v59 = v49 | 7;
              v60 = v59 + 1;
              v58 = v200;
              v56 = (char *)operator new(v59 + 1);
              v228 = v49;
              v229 = v60 | 0x8000000000000000;
              v227 = v56;
            }
            else
            {
              HIBYTE(v229) = v49;
              v58 = v200;
              if (!v49)
              {
LABEL_110:
                v56[v49] = 0;
                v230 = 1;
                v61 = v225.__pn_.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v229) < 0)
                  operator delete(v227);
                if (BYTE8(v226) && SBYTE7(v226) < 0)
                  operator delete((void *)v225.__pn_.__r_.__value_.__l.__size_);
                if (v225.__pn_.__r_.__value_.__r.__words[0])
                  os_release(v225.__pn_.__r_.__value_.__l.__data_);
                if (!v58 || !*(_QWORD *)(v58 + 24))
                {
                  os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
                  LODWORD(v225.__pn_.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v225.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
                  v68 = (void *)_os_log_send_and_compose_impl();
                  if (v68)
                    free(v68);
                  goto LABEL_233;
                }
                v62 = _os_log_pack_size();
                v63 = operator new(v62, (std::align_val_t)8uLL);
                v64 = (_QWORD *)operator new();
                *v64 = &off_24EC1F7F0;
                v64[1] = 0;
                v64[2] = 0;
                v64[3] = v63;
                v222.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
                v222.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v63;
                v223 = 0;
                v224 = 0;
                v222.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v64;
                v65 = strlen(v57);
                if (v65 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v66 = v65;
                if (v65 >= 0x17)
                {
                  v69 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v65 | 7) != 0x17)
                    v69 = v65 | 7;
                  v70 = v69 + 1;
                  v67 = operator new(v69 + 1);
                  *(_QWORD *)&__dst[8] = v66;
                  *(_QWORD *)&__dst[16] = v70 | 0x8000000000000000;
                  *(_QWORD *)__dst = v67;
                }
                else
                {
                  __dst[23] = v65;
                  v67 = __dst;
                  if (!v65)
                  {
LABEL_129:
                    v67[v66] = 0;
                    v71 = *(_QWORD *)__dst;
                    v231[0] = *(_QWORD *)&__dst[8];
                    *(uint64_t *)((char *)v231 + 7) = *(_QWORD *)&__dst[15];
                    v72 = __dst[23];
                    v73 = operator new(0x38uLL);
                    v73[1] = 0;
                    v73[2] = 0;
                    v73[3] = off_24EC1FA48;
                    *v73 = &off_24EC1F9F8;
                    v74 = v231[0];
                    v73[4] = v71;
                    v73[5] = v74;
                    *(_QWORD *)((char *)v73 + 47) = *(uint64_t *)((char *)v231 + 7);
                    *((_BYTE *)v73 + 55) = v72;
                    memset(v231, 0, 15);
                    v75 = v224;
                    v223 = (char *)(v73 + 3);
                    v224 = (std::__shared_weak_count *)v73;
                    if (v75)
                    {
                      p_shared_owners = (unint64_t *)&v75->__shared_owners_;
                      do
                        v77 = __ldaxr(p_shared_owners);
                      while (__stlxr(v77 - 1, p_shared_owners));
                      if (!v77)
                      {
                        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                        std::__shared_weak_count::__release_weak(v75);
                      }
                    }
                    v225 = v222;
                    v78 = v223;
                    if (v222.__pn_.__r_.__value_.__r.__words[2])
                    {
                      v79 = (unint64_t *)(v222.__pn_.__r_.__value_.__r.__words[2] + 8);
                      do
                        v80 = __ldxr(v79);
                      while (__stxr(v80 + 1, v79));
                    }
                    v81 = v224;
                    *(_QWORD *)&v226 = v78;
                    *((_QWORD *)&v226 + 1) = v224;
                    if (v224)
                    {
                      v82 = (unint64_t *)&v224->__shared_owners_;
                      do
                        v83 = __ldxr(v82);
                      while (__stxr(v83 + 1, v82));
                      v227 = v78;
                      do
                        v84 = __ldaxr(v82);
                      while (__stlxr(v84 - 1, v82));
                      if (!v84)
                      {
                        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                        std::__shared_weak_count::__release_weak(v81);
                      }
                    }
                    else
                    {
                      v227 = v78;
                    }
                    v108 = (std::__shared_weak_count *)v222.__pn_.__r_.__value_.__r.__words[2];
                    if (v222.__pn_.__r_.__value_.__r.__words[2])
                    {
                      v109 = (unint64_t *)(v222.__pn_.__r_.__value_.__r.__words[2] + 8);
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    v111 = v225.__pn_.__r_.__value_.__r.__words[0];
                    if (v227[31] >= 0)
                      v112 = v227 + 8;
                    else
                      v112 = (char *)*((_QWORD *)v227 + 1);
                    v113 = _os_log_pack_fill();
                    *(_DWORD *)v113 = 136315138;
                    *(_QWORD *)(v113 + 4) = v112;
                    v114 = operator new();
                    v115 = *(unsigned __int8 *)(v196 + 39);
                    v116 = v194;
                    if ((v115 & 0x80u) != 0)
                    {
                      v116 = *(const char **)(v196 + 16);
                      v115 = *(_QWORD *)(v196 + 24);
                    }
                    *(_QWORD *)v114 = v111;
                    *(_OWORD *)(v114 + 8) = *(_OWORD *)&v225.__pn_.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v225.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v114 + 24) = v226;
                    v226 = 0uLL;
                    *(_QWORD *)(v114 + 40) = v116;
                    *(_QWORD *)(v114 + 48) = v115;
                    *(_BYTE *)(v114 + 56) = 16;
                    *(_QWORD *)__dst = 0;
                    v222.__pn_.__r_.__value_.__r.__words[0] = v114;
                    (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v58 + 24) + 40))(*(_QWORD *)(v58 + 24), &v222);
                    v117 = v222.__pn_.__r_.__value_.__r.__words[0];
                    v222.__pn_.__r_.__value_.__r.__words[0] = 0;
                    if (v117)
                    {
                      v118 = *(std::__shared_weak_count **)(v117 + 32);
                      if (v118)
                      {
                        v119 = (unint64_t *)&v118->__shared_owners_;
                        do
                          v120 = __ldaxr(v119);
                        while (__stlxr(v120 - 1, v119));
                        if (!v120)
                        {
                          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                          std::__shared_weak_count::__release_weak(v118);
                        }
                      }
                      v121 = *(std::__shared_weak_count **)(v117 + 16);
                      if (v121)
                      {
                        v122 = (unint64_t *)&v121->__shared_owners_;
                        do
                          v123 = __ldaxr(v122);
                        while (__stlxr(v123 - 1, v122));
                        if (!v123)
                        {
                          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                          std::__shared_weak_count::__release_weak(v121);
                        }
                      }
                      MEMORY[0x227684CE8](v117, 0x10F0C40B62ED6C6);
                      v124 = *(_QWORD *)__dst;
                      *(_QWORD *)__dst = 0;
                      if (v124)
                      {
                        v125 = *(std::__shared_weak_count **)(v124 + 32);
                        if (v125)
                        {
                          v126 = (unint64_t *)&v125->__shared_owners_;
                          do
                            v127 = __ldaxr(v126);
                          while (__stlxr(v127 - 1, v126));
                          if (!v127)
                          {
                            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                            std::__shared_weak_count::__release_weak(v125);
                          }
                        }
                        v128 = *(std::__shared_weak_count **)(v124 + 16);
                        if (v128)
                        {
                          v129 = (unint64_t *)&v128->__shared_owners_;
                          do
                            v130 = __ldaxr(v129);
                          while (__stlxr(v130 - 1, v129));
                          if (!v130)
                          {
                            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                            std::__shared_weak_count::__release_weak(v128);
                          }
                        }
                        MEMORY[0x227684CE8](v124, 0x10F0C40B62ED6C6);
                      }
                    }
                    v131 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
                    v21 = v198;
                    if (*((_QWORD *)&v226 + 1))
                    {
                      v132 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
                      do
                        v133 = __ldaxr(v132);
                      while (__stlxr(v133 - 1, v132));
                      if (!v133)
                      {
                        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                        std::__shared_weak_count::__release_weak(v131);
                      }
                    }
                    v134 = (std::__shared_weak_count *)v225.__pn_.__r_.__value_.__r.__words[2];
                    if (v225.__pn_.__r_.__value_.__r.__words[2])
                    {
                      v135 = (unint64_t *)(v225.__pn_.__r_.__value_.__r.__words[2] + 8);
                      do
                        v136 = __ldaxr(v135);
                      while (__stlxr(v136 - 1, v135));
                      if (!v136)
                      {
                        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                        std::__shared_weak_count::__release_weak(v134);
                      }
                    }
LABEL_233:
                    if (SHIBYTE(v211.__pn_.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v211.__pn_.__r_.__value_.__l.__data_);
                    if (v21)
                    {
                      if (SHIBYTE(v213.__pn_.__r_.__value_.__r.__words[2]) < 0)
                        sub_223197FA4(&v225, v213.__pn_.__r_.__value_.__l.__data_, v213.__pn_.__r_.__value_.__l.__size_);
                      else
                        v225 = v213;
                      v137 = &v225;
                      if ((v225.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v137 = (std::__fs::filesystem::path *)v225.__pn_.__r_.__value_.__r.__words[0];
                      sub_22322C138((uint64_t)&__p, "Timed out on synchronous read for file %s", (const char *)v137);
                      if (SHIBYTE(v225.__pn_.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v225.__pn_.__r_.__value_.__l.__data_);
                      sub_223182C08((uint64_t)&__p);
                    }
                    sub_223182C08((uint64_t)&__p);
                    v138 = v221;
                    if (v221)
                    {
                      v139 = (unint64_t *)&v221->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
LABEL_249:
                    *(_BYTE *)a3 = 0;
                    *(_BYTE *)(a3 + 24) = 0;
                    v28 = v212;
                    if (!v212)
                    {
LABEL_254:
                      kdebug_trace();
                      goto LABEL_354;
                    }
LABEL_250:
                    v141 = (unint64_t *)(v28 + 8);
                    do
                      v142 = __ldaxr(v141);
                    while (__stlxr(v142 - 1, v141));
                    if (!v142)
                      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
                    goto LABEL_254;
                  }
                }
                memcpy(v67, v57, v66);
                goto LABEL_129;
              }
            }
            memmove(v56, v48, v49);
            goto LABEL_110;
          }
        }
        memmove(p_size, v51, v52);
        goto LABEL_102;
      }
LABEL_33:
      v212 = 0;
      sub_22375D700((uint64_t)&__p, v20);
      if (v20)
      {
        v24 = (unint64_t *)(v20 + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      }
      v202 = 0;
      LOBYTE(v203.__state_) = 0;
      v204 = 0;
      v205 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
      if (__p.__pn_.__r_.__value_.__l.__size_)
      {
        v26 = (unint64_t *)(__p.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v206 = __p.__pn_.__r_.__value_.__r.__words[2];
      v207 = 0;
      sub_22375220C(a1, (uint64_t)&v213, &v202);
      sub_223757750((uint64_t)&v202);
      if (v207 != -1)
        ((void (*)(std::__fs::filesystem::path *, __int128 *))off_24EC58218[v207])(&v225, &v205);
      v207 = -1;
      if (v204)
        std::future<void>::~future(&v203);
      *(std::__fs::filesystem::path *)a3 = __p;
      *(_BYTE *)(a3 + 24) = 1;
      v28 = v212;
      if (!v212)
        goto LABEL_254;
      goto LABEL_250;
    }
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (v7 == v6)
    goto LABEL_18;
LABEL_10:
  if (!*(_BYTE *)(a1 + 208))
  {
    sub_223751A70((uint64_t)&__p, v13);
    *(_OWORD *)a3 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
    v19 = __p.__pn_.__r_.__value_.__r.__words[2];
LABEL_79:
    *(_QWORD *)(a3 + 16) = v19;
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_354;
  }
  v14 = *(_DWORD *)(v13 + 48);
  if (v14 != 1)
  {
LABEL_74:
    if (v14)
      sub_22316DD70();
    *(_QWORD *)a3 = *(_QWORD *)(v13 + 24);
    v43 = *(_QWORD *)(v13 + 32);
    *(_QWORD *)(a3 + 8) = v43;
    if (v43)
    {
      v44 = (unint64_t *)(v43 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v19 = *(_QWORD *)(v13 + 40);
    goto LABEL_79;
  }
  v15 = *(_QWORD *)(a1 + 200);
  *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = 1uLL;
  __p.__pn_.__r_.__value_.__r.__words[2] = 0;
  v216 = 0;
  LODWORD(v217) = 728309964;
  kdebug_trace();
  if (*(_DWORD *)(v13 + 48) != 1)
    sub_22316DD70();
  v16 = (uint64_t *)(v13 + 24);
  v17 = *(_QWORD *)(v13 + 24);
  if (!v17)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v193 = std::future_category();
    MEMORY[0x2276844A8](exception, 3, v193);
    __cxa_throw(exception, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
  }
  v225.__pn_.__r_.__value_.__r.__words[0] = std::chrono::steady_clock::now().__d_.__rep_ + 1000 * v15;
  v18 = sub_22375D580(v17, (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)&v225);
  if (v18)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    goto LABEL_66;
  }
  v29 = *v16;
  *v16 = 0;
  sub_22375D700((uint64_t)&v225, v29);
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  }
  v32 = *(unsigned int *)(v13 + 48);
  if ((_DWORD)v32 == -1)
    goto LABEL_65;
  if ((_DWORD)v32)
  {
    ((void (*)(std::__fs::filesystem::path *, uint64_t))off_24EC58218[v32])(&v211, v13 + 24);
LABEL_65:
    *(_OWORD *)(v13 + 24) = *(_OWORD *)&v225.__pn_.__r_.__value_.__l.__data_;
    *(_OWORD *)&v225.__pn_.__r_.__value_.__l.__data_ = 0uLL;
    *(_QWORD *)(v13 + 40) = *((_QWORD *)&v225.__pn_.__r_.__value_.__l + 2);
    *(_DWORD *)(v13 + 48) = 0;
    goto LABEL_66;
  }
  v33 = *(_OWORD *)&v225.__pn_.__r_.__value_.__l.__data_;
  *(_OWORD *)&v225.__pn_.__r_.__value_.__l.__data_ = 0uLL;
  v34 = *(std::__shared_weak_count **)(v13 + 32);
  *(_OWORD *)(v13 + 24) = v33;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  size = (std::__shared_weak_count *)v225.__pn_.__r_.__value_.__l.__size_;
  *(_QWORD *)(v13 + 40) = *((_QWORD *)&v225.__pn_.__r_.__value_.__l + 2);
  if (size)
  {
    v38 = (unint64_t *)&size->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_66:
  kdebug_trace();
  if (!v18)
  {
    v14 = *(_DWORD *)(v13 + 48);
    goto LABEL_74;
  }
  if (*(_BYTE *)(a3 + 24))
    goto LABEL_354;
  sub_22374F514(v231);
  if (**(int **)(v231[0] + 56) > 4)
    goto LABEL_354;
  v40 = *(unsigned __int8 *)(v231[0] + 72);
  v41 = sub_22322F254(v231[0], "OSLogSurrogateAppender", 1, 0);
  v42 = v41;
  if (!v40 && !v41)
    goto LABEL_354;
  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v231;
  __p.__pn_.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  __p.__pn_.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v216) = 4;
  v217 = "unknown file";
  v218 = 90;
  v220 = 0;
  v221 = 0;
  v219 = "unknown function";
  v201 = v42;
  if (SHIBYTE(v213.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v211, v213.__pn_.__r_.__value_.__l.__data_, v213.__pn_.__r_.__value_.__l.__size_);
  else
    v211 = v213;
  if ((v211.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v85 = &v211;
  else
    v85 = (std::__fs::filesystem::path *)v211.__pn_.__r_.__value_.__r.__words[0];
  v86 = *(_QWORD *)__p.__pn_.__r_.__value_.__l.__data_;
  v87 = (const char *)(*(_QWORD *)__p.__pn_.__r_.__value_.__l.__data_ + 16);
  v195 = v87;
  v197 = *(_QWORD *)__p.__pn_.__r_.__value_.__l.__data_;
  if (*(char *)(*(_QWORD *)__p.__pn_.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v87 = *(const char **)(v86 + 16);
    v88 = *(_QWORD *)(v86 + 24);
  }
  else
  {
    v88 = *(unsigned __int8 *)(*(_QWORD *)__p.__pn_.__r_.__value_.__l.__data_ + 39);
  }
  v199 = v40;
  v89 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&v225);
    sub_223199C58("com.apple.cv3d", (unint64_t)&v225, &xmmword_255788F40);
    if ((_BYTE)v226 && SHIBYTE(v225.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v225.__pn_.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v90 = (const char *)&xmmword_255788F40;
  else
    v90 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v91 = byte_255788F57;
  else
    v91 = *((_QWORD *)&xmmword_255788F40 + 1);
  v225.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v90, v87);
  v92 = &v225.__pn_.__r_.__value_.__l.__size_;
  if (v91 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v91 >= 0x17)
  {
    v93 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17)
      v93 = v91 | 7;
    v94 = v93 + 1;
    v92 = (std::string::size_type *)operator new(v93 + 1);
    v225.__pn_.__r_.__value_.__r.__words[2] = v91;
    *(_QWORD *)&v226 = v94 | 0x8000000000000000;
    v225.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v92;
    goto LABEL_165;
  }
  BYTE7(v226) = v91;
  if (v91)
LABEL_165:
    memmove(v92, v90, v91);
  *((_BYTE *)v92 + v91) = 0;
  BYTE8(v226) = 1;
  v95 = (char *)&v227;
  if (v88 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v96 = (const char *)v85;
  if (v88 >= 0x17)
  {
    v98 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17)
      v98 = v88 | 7;
    v99 = v98 + 1;
    v97 = v201;
    v95 = (char *)operator new(v98 + 1);
    v228 = v88;
    v229 = v99 | 0x8000000000000000;
    v227 = v95;
    goto LABEL_173;
  }
  HIBYTE(v229) = v88;
  v97 = v201;
  if (v88)
LABEL_173:
    memmove(v95, v87, v88);
  v95[v88] = 0;
  v230 = 1;
  v100 = v225.__pn_.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v229) < 0)
    operator delete(v227);
  if (BYTE8(v226) && SBYTE7(v226) < 0)
    operator delete((void *)v225.__pn_.__r_.__value_.__l.__size_);
  if (v225.__pn_.__r_.__value_.__r.__words[0])
    os_release(v225.__pn_.__r_.__value_.__l.__data_);
  if (!v97 || !*(_QWORD *)(v97 + 24))
  {
    os_log_type_enabled(v100, OS_LOG_TYPE_ERROR);
    LODWORD(v225.__pn_.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v225.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v96;
    v107 = (void *)_os_log_send_and_compose_impl();
    if (v107)
      free(v107);
    goto LABEL_318;
  }
  v101 = _os_log_pack_size();
  v102 = operator new(v101, (std::align_val_t)8uLL);
  v103 = (_QWORD *)operator new();
  *v103 = &off_24EC1F7F0;
  v103[1] = 0;
  v103[2] = 0;
  v103[3] = v102;
  v222.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
  v222.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v102;
  v223 = 0;
  v224 = 0;
  v222.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v103;
  v104 = strlen(v96);
  if (v104 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v105 = v104;
  if (v104 >= 0x17)
  {
    v143 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17)
      v143 = v104 | 7;
    v144 = v143 + 1;
    v106 = operator new(v143 + 1);
    *((_QWORD *)&v209[0] + 1) = v105;
    *(_QWORD *)&v209[1] = v144 | 0x8000000000000000;
    *(_QWORD *)&v209[0] = v106;
    goto LABEL_258;
  }
  BYTE7(v209[1]) = v104;
  v106 = v209;
  if (v104)
LABEL_258:
    memcpy(v106, v96, v105);
  *((_BYTE *)v106 + v105) = 0;
  *(_QWORD *)__dst = *((_QWORD *)&v209[0] + 1);
  v145 = *(_QWORD *)&v209[0];
  *(_QWORD *)&__dst[7] = *(_QWORD *)((char *)v209 + 15);
  v146 = BYTE7(v209[1]);
  v147 = operator new(0x38uLL);
  v147[1] = 0;
  v147[2] = 0;
  v147[3] = off_24EC1FA48;
  *v147 = &off_24EC1F9F8;
  v148 = *(_QWORD *)__dst;
  v147[4] = v145;
  v147[5] = v148;
  *(_QWORD *)((char *)v147 + 47) = *(_QWORD *)&__dst[7];
  *((_BYTE *)v147 + 55) = v146;
  *(_QWORD *)__dst = 0;
  *(_QWORD *)&__dst[7] = 0;
  v149 = v224;
  v223 = (char *)(v147 + 3);
  v224 = (std::__shared_weak_count *)v147;
  if (v149)
  {
    v150 = (unint64_t *)&v149->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v225 = v222;
  v152 = v223;
  if (v222.__pn_.__r_.__value_.__r.__words[2])
  {
    v153 = (unint64_t *)(v222.__pn_.__r_.__value_.__r.__words[2] + 8);
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
  }
  v155 = v224;
  *(_QWORD *)&v226 = v152;
  *((_QWORD *)&v226 + 1) = v224;
  if (v224)
  {
    v156 = (unint64_t *)&v224->__shared_owners_;
    do
      v157 = __ldxr(v156);
    while (__stxr(v157 + 1, v156));
    v227 = v152;
    do
      v158 = __ldaxr(v156);
    while (__stlxr(v158 - 1, v156));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  else
  {
    v227 = v152;
  }
  v159 = (std::__shared_weak_count *)v222.__pn_.__r_.__value_.__r.__words[2];
  if (v222.__pn_.__r_.__value_.__r.__words[2])
  {
    v160 = (unint64_t *)(v222.__pn_.__r_.__value_.__r.__words[2] + 8);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = v225.__pn_.__r_.__value_.__r.__words[0];
  if (v227[31] >= 0)
    v163 = v227 + 8;
  else
    v163 = (char *)*((_QWORD *)v227 + 1);
  v164 = _os_log_pack_fill();
  *(_DWORD *)v164 = 136315138;
  *(_QWORD *)(v164 + 4) = v163;
  v165 = operator new();
  v166 = *(unsigned __int8 *)(v197 + 39);
  v167 = v195;
  if ((v166 & 0x80u) != 0)
  {
    v167 = *(const char **)(v197 + 16);
    v166 = *(_QWORD *)(v197 + 24);
  }
  *(_QWORD *)v165 = v162;
  *(_OWORD *)(v165 + 8) = *(_OWORD *)&v225.__pn_.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v225.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v165 + 24) = v226;
  v226 = 0uLL;
  *(_QWORD *)(v165 + 40) = v167;
  *(_QWORD *)(v165 + 48) = v166;
  *(_BYTE *)(v165 + 56) = 16;
  *(_QWORD *)&v209[0] = 0;
  v222.__pn_.__r_.__value_.__r.__words[0] = v165;
  (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v97 + 24) + 40))(*(_QWORD *)(v97 + 24), &v222);
  v168 = v222.__pn_.__r_.__value_.__r.__words[0];
  v222.__pn_.__r_.__value_.__r.__words[0] = 0;
  if (v168)
  {
    v169 = *(std::__shared_weak_count **)(v168 + 32);
    if (v169)
    {
      v170 = (unint64_t *)&v169->__shared_owners_;
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    v172 = *(std::__shared_weak_count **)(v168 + 16);
    if (v172)
    {
      v173 = (unint64_t *)&v172->__shared_owners_;
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    MEMORY[0x227684CE8](v168, 0x10F0C40B62ED6C6);
    v175 = *(_QWORD *)&v209[0];
    *(_QWORD *)&v209[0] = 0;
    if (v175)
    {
      v176 = *(std::__shared_weak_count **)(v175 + 32);
      if (v176)
      {
        v177 = (unint64_t *)&v176->__shared_owners_;
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      v179 = *(std::__shared_weak_count **)(v175 + 16);
      if (v179)
      {
        v180 = (unint64_t *)&v179->__shared_owners_;
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 - 1, v180));
        if (!v181)
        {
          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
          std::__shared_weak_count::__release_weak(v179);
        }
      }
      MEMORY[0x227684CE8](v175, 0x10F0C40B62ED6C6);
    }
  }
  v182 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
  v40 = v199;
  if (*((_QWORD *)&v226 + 1))
  {
    v183 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = (std::__shared_weak_count *)v225.__pn_.__r_.__value_.__r.__words[2];
  if (v225.__pn_.__r_.__value_.__r.__words[2])
  {
    v186 = (unint64_t *)(v225.__pn_.__r_.__value_.__r.__words[2] + 8);
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
LABEL_318:
  if (SHIBYTE(v211.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v211.__pn_.__r_.__value_.__l.__data_);
  if (v40)
  {
    if (SHIBYTE(v213.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&v225, v213.__pn_.__r_.__value_.__l.__data_, v213.__pn_.__r_.__value_.__l.__size_);
    else
      v225 = v213;
    v188 = &v225;
    if ((v225.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v188 = (std::__fs::filesystem::path *)v225.__pn_.__r_.__value_.__r.__words[0];
    sub_22322C138((uint64_t)&__p, "Timed out while reading %s", (const char *)v188);
    if (SHIBYTE(v225.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v225.__pn_.__r_.__value_.__l.__data_);
    sub_223182C08((uint64_t)&__p);
  }
  sub_223182C08((uint64_t)&__p);
  v189 = v221;
  if (v221)
  {
    v190 = (unint64_t *)&v221->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
LABEL_354:
  if (SHIBYTE(v213.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v213.__pn_.__r_.__value_.__l.__data_);
}

void sub_22375199C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,void *a52,int a53,__int16 a54,char a55,char a56,char a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (a57 && a56 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (*(char *)(v61 - 105) < 0)
    operator delete(*(void **)(v61 - 128));
  sub_223182DAC((uint64_t)&a35);
  __cxa_end_catch();
  JUMPOUT(0x223751668);
}

uint64_t sub_223751A70(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  const std::error_category *v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char v26;

  v3 = (_QWORD *)result;
  v4 = *(_DWORD *)(a2 + 48);
  if (v4 == 1)
  {
    v23 = 0u;
    v24 = 0u;
    v25 = 728309964;
    kdebug_trace();
    if (*(_DWORD *)(a2 + 48) != 1)
      sub_22316DD70();
    v5 = *(_QWORD *)(a2 + 24);
    if (!v5)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v20 = std::future_category();
      MEMORY[0x2276844A8](exception, 3, v20);
      __cxa_throw(exception, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
    *(_QWORD *)(a2 + 24) = 0;
    sub_22375D700((uint64_t)&v21, v5);
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7)
    {
      v8 = *(unsigned int *)(a2 + 48);
      if ((_DWORD)v8 == -1)
        goto LABEL_22;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v8 = *(unsigned int *)(a2 + 48);
      if ((_DWORD)v8 == -1)
        goto LABEL_22;
    }
    if (!(_DWORD)v8)
    {
      v9 = v21;
      v21 = 0uLL;
      v10 = *(std::__shared_weak_count **)(a2 + 32);
      *(_OWORD *)(a2 + 24) = v9;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      *(_QWORD *)(a2 + 40) = v22;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_23;
    }
    ((void (*)(char *, uint64_t))off_24EC58218[v8])(&v26, a2 + 24);
LABEL_22:
    *(_OWORD *)(a2 + 24) = v21;
    v21 = 0uLL;
    *(_QWORD *)(a2 + 40) = v22;
    *(_DWORD *)(a2 + 48) = 0;
LABEL_23:
    result = kdebug_trace();
    v4 = *(_DWORD *)(a2 + 48);
  }
  if (v4)
    sub_22316DD70();
  v16 = *(_QWORD *)(a2 + 32);
  *v3 = *(_QWORD *)(a2 + 24);
  v3[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v3[2] = *(_QWORD *)(a2 + 40);
  return result;
}

void sub_223751C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  sub_2231874DC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223751CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unint64_t *v5;
  unint64_t *v7;
  unint64_t v8;
  va_list va;

  va_start(va, a5);
  v7 = v5 + 1;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    (*(void (**)(unint64_t *))(*v5 + 16))(v5);
    sub_2231874DC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223751D00(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  unsigned int *v5;
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  unint64_t *v10;
  int v11;
  unint64_t v12;
  __int128 v13;
  int v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 __p;
  uint64_t v29;
  _DWORD v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int *)(a2 + 216);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (*((char *)a3 + 23) < 0)
  {
    sub_223197FA4(&v24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v24 = *a3;
    v25 = *((_QWORD *)a3 + 2);
  }
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC583C8;
  v9 = operator new();
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  *(_QWORD *)(v9 + 8) = 0;
  v10 = (unint64_t *)(v9 + 8);
  *(_QWORD *)(v9 + 24) = 850045863;
  *(_QWORD *)(v9 + 16) = 0;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 1018212795;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 124) = 0u;
  *(_QWORD *)v9 = &off_24EC58418;
  *a1 = v9;
  std::mutex::lock((std::mutex *)(v9 + 24));
  v11 = *(_DWORD *)(v9 + 136);
  if ((v11 & 2) != 0)
    sub_2233236D4(1u);
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  *(_DWORD *)(v9 + 136) = v11 | 2;
  std::mutex::unlock((std::mutex *)(v9 + 24));
  v13 = v24;
  v30[0] = v25;
  *(_DWORD *)((char *)v30 + 3) = *(_DWORD *)((char *)&v25 + 3);
  v14 = SHIBYTE(v25);
  v25 = 0;
  v24 = 0uLL;
  *(_QWORD *)&v26 = v7 + 1;
  *((_QWORD *)&v26 + 1) = v7;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v27 = a2;
  if (v14 < 0)
  {
    sub_223197FA4(&__p, (void *)v13, *((unint64_t *)&v13 + 1));
  }
  else
  {
    __p = v13;
    LODWORD(v29) = v30[0];
    *(_DWORD *)((char *)&v29 + 3) = *(_DWORD *)((char *)v30 + 3);
    HIBYTE(v29) = v14;
  }
  v32 = 0;
  v16 = (char *)operator new(0x38uLL);
  *(_QWORD *)v16 = off_24EC58460;
  *(_OWORD *)(v16 + 8) = v26;
  v26 = 0uLL;
  *((_QWORD *)v16 + 3) = v27;
  *((_OWORD *)v16 + 2) = __p;
  *((_QWORD *)v16 + 6) = v29;
  v29 = 0;
  __p = 0uLL;
  v32 = v16;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a2 + 72) + 40))(a2 + 72, v31);
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_18;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_18:
  if (SHIBYTE(v29) < 0)
  {
    operator delete((void *)__p);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (!*((_QWORD *)&v26 + 1))
      goto LABEL_25;
  }
  else
  {
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (!*((_QWORD *)&v26 + 1))
      goto LABEL_25;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_25:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (v14 < 0)
  {
LABEL_26:
    operator delete((void *)v13);
    goto LABEL_28;
  }
  do
LABEL_28:
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (v22)
  {
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_33:
    operator delete((void *)v24);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (SHIBYTE(v25) < 0)
    goto LABEL_33;
}

void sub_223752050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__shared_weak_count *v29;
  unint64_t **v30;
  void *v31;
  unint64_t *v32;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;

  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  operator delete(v31);
  do
    v36 = __ldaxr(v32);
  while (__stlxr(v36 - 1, v32));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  v37 = *v30;
  if (*v30)
  {
    v38 = v37 + 1;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
      (*(void (**)(unint64_t *))(*v37 + 16))(v37);
  }
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22375220C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  unint64_t v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  size_t v28;
  size_t v29;
  _QWORD *p_dst;
  int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  const char *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  char *v90;
  void *v91;
  void *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  int64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 *v122;
  char *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  int64x2_t v129;
  uint64_t v130;
  std::__fs::filesystem::path **v131;
  std::__fs::filesystem::path *v132;
  unint64_t v133;
  const std::__fs::filesystem::path **v134;
  std::__fs::filesystem::path *v135;
  uint64_t v136;
  const std::__fs::filesystem::path **v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *__src;
  void *__srca;
  const char *v144;
  char v145;
  _QWORD v146[3];
  int v147;
  const char *v148;
  int v149;
  const char *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  int v154;
  std::future<void> v155;
  char v156;
  _BYTE v157[24];
  int v158;
  __int128 __p;
  uint64_t v160;
  void *v161;
  __int128 v162;
  int v163;
  std::future<void> v164;
  char v165;
  uint64_t v166;
  int v167;
  char v168;
  __int128 v169;
  std::__shared_weak_count *v170;
  char *v171;
  std::__shared_weak_count *v172;
  _QWORD *__dst;
  __int128 v174;
  _BYTE v175[24];
  __int128 v176;
  void *v177[2];
  unint64_t v178;
  char v179;
  _QWORD v180[5];

  v180[2] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    __p = *(_OWORD *)a2;
    v160 = *(_QWORD *)(a2 + 16);
  }
  v154 = *a3;
  LOBYTE(v155.__state_) = 0;
  v156 = 0;
  if (*((_BYTE *)a3 + 16))
  {
    v155.__state_ = (std::__assoc_sub_state *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = 0;
    v156 = 1;
  }
  v157[0] = 0;
  v158 = -1;
  v6 = a3[12];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, int *))off_24EC58228[v6])(v175, v157, a3 + 6);
    v158 = v6;
  }
  sub_223757128((uint64_t)&v161, a1 + 136, (const void **)&__p, (uint64_t)&v154);
  sub_223757750((uint64_t)&v154);
  if (v158 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC58218[v158])(v175, v157);
  v158 = -1;
  if (v156)
    std::future<void>::~future(&v155);
  if (SHIBYTE(v160) < 0)
  {
    operator delete((void *)__p);
    if (v168)
      goto LABEL_14;
LABEL_25:
    v14 = *(_QWORD *)(a1 + 120);
    goto LABEL_195;
  }
  if (!v168)
    goto LABEL_25;
LABEL_14:
  if (v163 != 1)
    goto LABEL_137;
  if (v165)
    goto LABEL_137;
  sub_22374F514(&v153);
  if (**(int **)(v153 + 56) > 4)
    goto LABEL_137;
  v7 = *(unsigned __int8 *)(v153 + 72);
  v8 = sub_22322F254(v153, "OSLogSurrogateAppender", 1, 0);
  v9 = v8;
  if (!v7 && !v8)
    goto LABEL_137;
  v146[0] = &v153;
  v146[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v146[2] = std::chrono::system_clock::now().__d_.__rep_;
  v147 = 4;
  v148 = "unknown file";
  v149 = 364;
  v151 = 0;
  v152 = 0;
  v150 = "unknown function";
  if (v162 >= 0)
    v10 = (const char *)&v161;
  else
    v10 = (const char *)v161;
  v11 = *(_QWORD *)v146[0];
  v141 = *(_QWORD *)v146[0];
  if (*(char *)(*(_QWORD *)v146[0] + 39) < 0)
  {
    v13 = *(const char **)(v11 + 16);
    v12 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)v146[0] + 39);
    v13 = (const char *)(*(_QWORD *)v146[0] + 16);
  }
  v144 = v10;
  v140 = *(_QWORD *)v146[0] + 16;
  v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v175);
    sub_223199C58("com.apple.cv3d", (unint64_t)v175, &xmmword_255788F40);
    if ((_BYTE)v176 && (v175[23] & 0x80000000) != 0)
      operator delete(*(void **)v175);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v16 = (const char *)&xmmword_255788F40;
  else
    v16 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v17 = byte_255788F57;
  else
    v17 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v13;
  *(_QWORD *)v175 = os_log_create(v16, v13);
  v18 = &v175[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v17 >= 0x17)
  {
    v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v19 = v17 | 7;
    v20 = v19 + 1;
    v18 = operator new(v19 + 1);
    *(_QWORD *)&v175[16] = v17;
    *(_QWORD *)&v176 = v20 | 0x8000000000000000;
    *(_QWORD *)&v175[8] = v18;
    goto LABEL_41;
  }
  BYTE7(v176) = v17;
  if (v17)
LABEL_41:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  BYTE8(v176) = 1;
  v21 = v177;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v12 >= 0x17)
  {
    v22 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v22 = v12 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    v177[1] = (void *)v12;
    v178 = v23 | 0x8000000000000000;
    v177[0] = v21;
    goto LABEL_49;
  }
  HIBYTE(v178) = v12;
  if (v12)
LABEL_49:
    memmove(v21, __src, v12);
  *((_BYTE *)v21 + v12) = 0;
  v179 = 1;
  v24 = *(NSObject **)v175;
  if (SHIBYTE(v178) < 0)
    operator delete(v177[0]);
  if (BYTE8(v176) && SBYTE7(v176) < 0)
    operator delete(*(void **)&v175[8]);
  if (*(_QWORD *)v175)
    os_release(*(void **)v175);
  if (!v9 || !*(_QWORD *)(v9 + 24))
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v175 = 136315138;
    *(_QWORD *)&v175[4] = v144;
    v32 = (void *)_os_log_send_and_compose_impl();
    if (v32)
      free(v32);
    goto LABEL_128;
  }
  v25 = _os_log_pack_size();
  v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
  v27 = (std::__shared_weak_count *)operator new();
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v27->__shared_owners_ = 0;
  v27->__shared_weak_owners_ = 0;
  v27[1].__vftable = v26;
  *(_QWORD *)&v169 = v26;
  *((_QWORD *)&v169 + 1) = v26;
  v171 = 0;
  v172 = 0;
  v170 = v27;
  v28 = strlen(v144);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v33 = v28 | 7;
    v34 = v33 + 1;
    p_dst = operator new(v33 + 1);
    *(_QWORD *)&v174 = v29;
    *((_QWORD *)&v174 + 1) = v34 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v174) = v28;
    p_dst = &__dst;
    if (!v28)
    {
      v31 = v7;
      goto LABEL_69;
    }
  }
  v31 = v7;
  memcpy(p_dst, v144, v29);
LABEL_69:
  *((_BYTE *)p_dst + v29) = 0;
  v35 = __dst;
  v180[0] = v174;
  *(_QWORD *)((char *)v180 + 7) = *(_QWORD *)((char *)&v174 + 7);
  v36 = HIBYTE(v174);
  v37 = operator new(0x38uLL);
  v37[1] = 0;
  v37[2] = 0;
  v37[3] = off_24EC1FA48;
  *v37 = &off_24EC1F9F8;
  v38 = v180[0];
  v37[4] = v35;
  v37[5] = v38;
  *(_QWORD *)((char *)v37 + 47) = *(_QWORD *)((char *)v180 + 7);
  *((_BYTE *)v37 + 55) = v36;
  v180[0] = 0;
  *(_QWORD *)((char *)v180 + 7) = 0;
  v39 = v172;
  v171 = (char *)(v37 + 3);
  v172 = (std::__shared_weak_count *)v37;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *(_OWORD *)v175 = v169;
  v42 = v171;
  *(_QWORD *)&v175[16] = v170;
  if (v170)
  {
    v43 = (unint64_t *)&v170->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = v172;
  *(_QWORD *)&v176 = v42;
  *((_QWORD *)&v176 + 1) = v172;
  if (v172)
  {
    v46 = (unint64_t *)&v172->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    v177[0] = v42;
    do
      v48 = __ldaxr(v46);
    while (__stlxr(v48 - 1, v46));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  else
  {
    v177[0] = v42;
  }
  v49 = v170;
  if (v170)
  {
    v50 = (unint64_t *)&v170->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = *(_QWORD *)v175;
  if (*((char *)v177[0] + 31) >= 0)
    v53 = (char *)v177[0] + 8;
  else
    v53 = (char *)*((_QWORD *)v177[0] + 1);
  v54 = _os_log_pack_fill();
  *(_DWORD *)v54 = 136315138;
  *(_QWORD *)(v54 + 4) = v53;
  v55 = operator new();
  v56 = *(unsigned __int8 *)(v141 + 39);
  v57 = v140;
  if ((v56 & 0x80u) != 0)
  {
    v57 = *(_QWORD *)(v141 + 16);
    v56 = *(_QWORD *)(v141 + 24);
  }
  *(_QWORD *)v55 = v52;
  *(_OWORD *)(v55 + 8) = *(_OWORD *)&v175[8];
  *(_QWORD *)&v175[8] = 0;
  *(_QWORD *)&v175[16] = 0;
  *(_OWORD *)(v55 + 24) = v176;
  v176 = 0uLL;
  *(_QWORD *)(v55 + 40) = v57;
  *(_QWORD *)(v55 + 48) = v56;
  *(_BYTE *)(v55 + 56) = 16;
  __dst = 0;
  *(_QWORD *)&v169 = v55;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v169);
  v58 = v169;
  *(_QWORD *)&v169 = 0;
  if (v58)
  {
    v59 = *(std::__shared_weak_count **)(v58 + 32);
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = *(std::__shared_weak_count **)(v58 + 16);
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    MEMORY[0x227684CE8](v58, 0x10F0C40B62ED6C6);
    v65 = __dst;
    __dst = 0;
    if (v65)
    {
      v66 = (std::__shared_weak_count *)v65[4];
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v69 = (std::__shared_weak_count *)v65[2];
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      MEMORY[0x227684CE8](v65, 0x10F0C40B62ED6C6);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  v7 = v31;
  if (*((_QWORD *)&v176 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *(std::__shared_weak_count **)&v175[16];
  if (*(_QWORD *)&v175[16])
  {
    v76 = (unint64_t *)(*(_QWORD *)&v175[16] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
LABEL_128:
  if (v7)
  {
    v78 = (const char *)&v161;
    if (v162 < 0)
      v78 = (const char *)v161;
    sub_22322C138((uint64_t)v146, "Unsynchronized file \"%s\" evicted from cache", v78);
    sub_223182C08((uint64_t)v146);
  }
  sub_223182C08((uint64_t)v146);
  v79 = v152;
  if (v152)
  {
    v80 = (unint64_t *)&v152->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
LABEL_137:
  __srca = v161;
  *(_QWORD *)v175 = v162;
  *(_QWORD *)&v175[7] = *(_QWORD *)((char *)&v162 + 7);
  v145 = HIBYTE(v162);
  v162 = 0uLL;
  v161 = 0;
  v82 = *(_QWORD *)(a1 + 120);
  if (!v82)
  {
    v84 = *(uint64_t **)(a1 + 96);
    v83 = *(uint64_t **)(a1 + 104);
    v85 = v83 - v84;
    v86 = 170 * v85 - 1;
    if (v83 == v84)
      v86 = 0;
    if ((unint64_t)(v86 - *(_QWORD *)(a1 + 128)) >= 0xAA)
    {
      *(_QWORD *)(a1 + 120) = 170;
      v146[0] = *(v83 - 1);
      *(_QWORD *)(a1 + 104) = v83 - 1;
      sub_22323CE2C((void **)(a1 + 88), v146);
LABEL_189:
      v82 = *(_QWORD *)(a1 + 120);
      goto LABEL_190;
    }
    v87 = *(char **)(a1 + 112);
    v88 = *(char **)(a1 + 88);
    if (v85 < (v87 - v88) >> 3)
    {
      if (v84 == (uint64_t *)v88)
      {
        v146[0] = operator new(0xFF0uLL);
        sub_22323CCA0((char **)(a1 + 88), v146);
        v96 = *(_QWORD *)(a1 + 104);
        v146[0] = *(_QWORD *)(v96 - 8);
        *(_QWORD *)(a1 + 104) = v96 - 8;
      }
      else
      {
        v146[0] = operator new(0xFF0uLL);
      }
      sub_22323CE2C((void **)(a1 + 88), v146);
      if (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96) == 8)
        *(_QWORD *)(a1 + 120) = 85;
      else
        *(_QWORD *)(a1 + 120) += 170;
      goto LABEL_189;
    }
    if (v87 == v88)
      v89 = 1;
    else
      v89 = (v87 - v88) >> 2;
    if (v89 >> 61)
      sub_223174E94();
    v90 = (char *)operator new(8 * v89);
    v91 = operator new(0xFF0uLL);
    v92 = v91;
    if (v89)
    {
      v93 = &v90[8 * v89];
      *(_QWORD *)v90 = v91;
      v94 = v90 + 8;
      v95 = v90;
      if (v84 != v83)
        goto LABEL_162;
LABEL_157:
      v99 = v90;
      v100 = v94;
LABEL_158:
      v101 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v95;
      *(_QWORD *)(a1 + 96) = v99;
      *(_QWORD *)(a1 + 104) = v100;
      *(_QWORD *)(a1 + 112) = v93;
      if (v100 - v99 == 8)
        v102 = 85;
      else
        v102 = *(_QWORD *)(a1 + 120) + 170;
      *(_QWORD *)(a1 + 120) = v102;
      if (v101)
        operator delete(v101);
      goto LABEL_189;
    }
    v97 = (char *)operator new(8uLL);
    v93 = v97 + 8;
    operator delete(v90);
    v84 = *(uint64_t **)(a1 + 96);
    v98 = *(uint64_t **)(a1 + 104);
    v90 = v97;
    *(_QWORD *)v97 = v92;
    v94 = v97 + 8;
    v95 = v97;
    if (v84 == v98)
      goto LABEL_157;
    while (1)
    {
LABEL_162:
      if (v94 == v93)
      {
        if (v90 <= v95)
        {
          if (v94 == v95)
            v110 = 1;
          else
            v110 = (v94 - v95) >> 2;
          if (v110 >> 61)
            sub_223174E94();
          v111 = (char *)operator new(8 * v110);
          v112 = v111;
          v113 = v110 >> 2;
          v99 = &v111[8 * (v110 >> 2)];
          v103 = v99;
          v114 = v94 - v90;
          if (v94 != v90)
          {
            v103 = &v99[v114 & 0xFFFFFFFFFFFFFFF8];
            v115 = v114 - 8;
            if (v115 < 0x38 || (v116 = 8 * v113, (unint64_t)(&v111[8 * v113] - v90) < 0x20))
            {
              v117 = &v111[8 * (v110 >> 2)];
              v118 = v90;
              goto LABEL_178;
            }
            v120 = (v115 >> 3) + 1;
            v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
            v117 = &v99[v121];
            v118 = &v90[v121];
            v122 = (__int128 *)(v90 + 16);
            v123 = &v111[v116 + 16];
            v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v125 = *v122;
              *((_OWORD *)v123 - 1) = *(v122 - 1);
              *(_OWORD *)v123 = v125;
              v122 += 2;
              v123 += 32;
              v124 -= 4;
            }
            while (v124);
            if (v120 != (v120 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_178:
                v119 = *(_QWORD *)v118;
                v118 += 8;
                *(_QWORD *)v117 = v119;
                v117 += 8;
              }
              while (v117 != v103);
            }
          }
          v94 = &v111[8 * v110];
          if (v95)
            operator delete(v95);
          v95 = v112;
          goto LABEL_161;
        }
        v105 = (v90 - v95) >> 3;
        if (v105 >= -1)
          v106 = v105 + 1;
        else
          v106 = v105 + 2;
        v107 = v106 >> 1;
        v108 = &v90[-8 * (v106 >> 1)];
        v109 = v94;
        if (v94 != v90)
        {
          memmove(v108, v90, v94 - v90);
          v109 = v90;
        }
        v103 = &v108[v94 - v90];
        v99 = &v109[-8 * v107];
      }
      else
      {
        v99 = v90;
        v103 = v94;
        v94 = v93;
      }
LABEL_161:
      v93 = v94;
      v104 = *v84++;
      *(_QWORD *)v103 = v104;
      v100 = v103 + 8;
      v94 = v100;
      v90 = v99;
      if (v84 == *(uint64_t **)(a1 + 104))
        goto LABEL_158;
    }
  }
LABEL_190:
  v126 = *(_QWORD *)(a1 + 96);
  v127 = (_QWORD *)(v126 + 8 * (v82 / 0xAA));
  v128 = *v127 + 24 * (v82 % 0xAA);
  if (*(_QWORD *)(a1 + 104) == v126)
    v128 = 0;
  if (v128 == *v127)
    v128 = *(v127 - 1) + 4080;
  *(_QWORD *)(v128 - 24) = __srca;
  *(_QWORD *)(v128 - 16) = *(_QWORD *)v175;
  *(_QWORD *)(v128 - 9) = *(_QWORD *)&v175[7];
  *(_BYTE *)(v128 - 1) = v145;
  v129 = vaddq_s64(*(int64x2_t *)(a1 + 120), (int64x2_t)xmmword_22464C780);
  *(int64x2_t *)(a1 + 120) = v129;
  v14 = v129.i64[0];
LABEL_195:
  v130 = *(_QWORD *)(a1 + 96);
  v131 = (std::__fs::filesystem::path **)(v130 + 8 * (v14 / 0xAA));
  if (*(_QWORD *)(a1 + 104) == v130)
  {
    v132 = 0;
    v135 = 0;
    v134 = (const std::__fs::filesystem::path **)(v130 + 8 * ((*(_QWORD *)(a1 + 128) + v14) / 0xAA));
  }
  else
  {
    v132 = (std::__fs::filesystem::path *)(*(_QWORD *)(v130 + 8 * (v14 / 0xAA)) + 24 * (v14 % 0xAA));
    v133 = *(_QWORD *)(a1 + 128) + v14;
    v134 = (const std::__fs::filesystem::path **)(v130 + 8 * (v133 / 0xAA));
    v135 = (std::__fs::filesystem::path *)&(*v134)[v133 % 0xAA];
  }
  v137 = sub_22375BDB8(v131, v132, v134, v135, a2);
  v138 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 104) != v138)
  {
    v139 = *(_QWORD *)(a1 + 128) + *(_QWORD *)(a1 + 120);
    if (*(_QWORD *)(v138 + 8 * (v139 / 0xAA)) + 24 * (v139 % 0xAA) == v136)
      goto LABEL_201;
    goto LABEL_200;
  }
  if (v136)
LABEL_200:
    sub_223757AB4((int64x2_t *)(a1 + 88), v137, v136);
LABEL_201:
  if (v168)
  {
    sub_223757750((uint64_t)&v163);
    if (v167 != -1)
      ((void (*)(_BYTE *, uint64_t *))off_24EC58218[v167])(v175, &v166);
    v167 = -1;
    if (v165)
      std::future<void>::~future(&v164);
    if (SHIBYTE(v162) < 0)
      operator delete(v161);
  }
}

void sub_223753140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (*(_BYTE *)(v36 - 168))
  {
    if (*(char *)(v36 - 169) < 0)
      operator delete(*(void **)(v36 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a16);
  sub_2237575D8((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223753188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, int a15, int a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  void *v38;

  operator delete(v37);
  operator delete(v38);
  if ((a15 & 0x80000000) == 0)
  {
    sub_2237575D8((uint64_t)&a37);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_2237575D8((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_223753368(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223753378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  sub_22375339C((uint64_t)&a26);
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_22375339C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  sub_223757750(a1);
  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC58218[v2])(&v4, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  if (*(_BYTE *)(a1 + 16))
    std::future<void>::~future((std::future<void> *)(a1 + 8));
  return a1;
}

BOOL sub_223753408(uint64_t a1, std::__fs::filesystem::path *a2, void *a3, const void *a4)
{
  std::__fs::filesystem::path::__string_view v7;
  std::__fs::filesystem::path *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  int v11;
  std::__fs::filesystem::path::__string_view v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__fs::filesystem::path::__string_view v16;
  int v17;
  uint64_t *v18;
  int v19;
  std::__fs::filesystem::path::__string_view v20;
  _BOOL8 v21;
  void *v22;
  _QWORD *v23;
  std::__assoc_sub_state *state;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int v28;
  int data;
  std::future<void> v31;
  char v32;
  _BYTE v33[24];
  int v34;
  std::__fs::filesystem::path __p;
  std::future<void> v36;
  std::__fs::filesystem::path __dst;
  void *v38[3];
  int v39;
  std::__fs::filesystem::path v40;
  std::future<void> v41;
  std::__fs::filesystem::path v42;

  sub_2236E5318(a2, a1, &v40);
  v7 = std::__fs::filesystem::path::__parent_path(&v40);
  if (v7.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v7.__size_ >= 0x17)
  {
    v9 = (v7.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7.__size_ | 7) != 0x17)
      v9 = v7.__size_ | 7;
    v10 = v9 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v9 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v7.__size_;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v7.__size_;
  p_dst = &__dst;
  if (v7.__size_)
LABEL_8:
    memmove(p_dst, v7.__data_, v7.__size_);
  p_dst->__pn_.__r_.__value_.__s.__data_[v7.__size_] = 0;
  v42 = __dst;
  v11 = *(char *)(a1 + 31);
  if (v11 >= 0)
    v12.__data_ = (const std::string_view::value_type *)(a1 + 8);
  else
    v12.__data_ = *(const std::string_view::value_type **)(a1 + 8);
  if (v11 >= 0)
    v12.__size_ = *(unsigned __int8 *)(a1 + 31);
  else
    v12.__size_ = *(_QWORD *)(a1 + 16);
  if (!std::__fs::filesystem::path::__compare(&v42, v12))
  {
    v21 = 1;
    if ((SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
LABEL_40:
    operator delete(v42.__pn_.__r_.__value_.__l.__data_);
    if (!v21)
      goto LABEL_68;
    goto LABEL_41;
  }
  v13 = a1 + 56;
  v14 = *(_QWORD *)(a1 + 56);
  if (!v14)
    goto LABEL_35;
  v15 = a1 + 56;
  do
  {
    if ((v42.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16.__data_ = (const std::string_view::value_type *)&v42;
    else
      v16.__data_ = (const std::string_view::value_type *)v42.__pn_.__r_.__value_.__r.__words[0];
    if ((v42.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16.__size_ = HIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]);
    else
      v16.__size_ = v42.__pn_.__r_.__value_.__l.__size_;
    v17 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v14 + 32), v16);
    v18 = (uint64_t *)(v14 + 8);
    if (v17 >= 0)
    {
      v18 = (uint64_t *)v14;
      v15 = v14;
    }
    v14 = *v18;
  }
  while (*v18);
  if (v15 == v13
    || ((v19 = *(char *)(v15 + 55), v19 >= 0)
      ? (v20.__data_ = (const std::string_view::value_type *)(v15 + 32))
      : (v20.__data_ = *(const std::string_view::value_type **)(v15 + 32)),
        v19 >= 0 ? (v20.__size_ = *(unsigned __int8 *)(v15 + 55)) : (v20.__size_ = *(_QWORD *)(v15 + 40)),
        std::__fs::filesystem::path::__compare(&v42, v20) < 0))
  {
LABEL_35:
    v15 = a1 + 56;
  }
  v21 = v13 != v15;
  if (SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_40;
LABEL_37:
  if (!v21)
    goto LABEL_68;
LABEL_41:
  LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 1;
  __dst.__pn_.__r_.__value_.__s.__data_[8] = 0;
  __dst.__pn_.__r_.__value_.__s.__data_[16] = 0;
  v22 = (void *)operator new[]();
  v38[0] = v22;
  v23 = (_QWORD *)operator new();
  *v23 = &unk_24EC57A30;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v22;
  v38[1] = v23;
  v38[2] = a3;
  if (a3)
    memmove(v38[0], a4, (size_t)a3);
  v39 = 0;
  if (!*(_BYTE *)(a1 + 40))
    goto LABEL_56;
  if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__p, v40.__pn_.__r_.__value_.__l.__data_, v40.__pn_.__r_.__value_.__l.__size_);
  else
    __p = v40;
  sub_223751A70((uint64_t)&v42, (uint64_t)&__dst);
  sub_223753934((uint64_t)&v36, a1, (uint64_t)&__p, (uint64_t *)&v42);
  if (__dst.__pn_.__r_.__value_.__s.__data_[16])
  {
    state = v36.__state_;
    v36.__state_ = 0;
    v41.__state_ = (std::__assoc_sub_state *)__dst.__pn_.__r_.__value_.__l.__size_;
    __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)state;
    std::future<void>::~future(&v41);
    std::future<void>::~future(&v36);
    size = (std::__shared_weak_count *)v42.__pn_.__r_.__value_.__l.__size_;
    if (!v42.__pn_.__r_.__value_.__l.__size_)
      goto LABEL_54;
  }
  else
  {
    __dst.__pn_.__r_.__value_.__r.__words[1] = (std::string::size_type)v36.__state_;
    v36.__state_ = 0;
    __dst.__pn_.__r_.__value_.__s.__data_[16] = 1;
    std::future<void>::~future(&v36);
    size = (std::__shared_weak_count *)v42.__pn_.__r_.__value_.__l.__size_;
    if (!v42.__pn_.__r_.__value_.__l.__size_)
      goto LABEL_54;
  }
  p_shared_owners = (unint64_t *)&size->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_54:
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_55:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
LABEL_56:
  data = (int)__dst.__pn_.__r_.__value_.__l.__data_;
  LOBYTE(v31.__state_) = 0;
  v32 = 0;
  if (__dst.__pn_.__r_.__value_.__s.__data_[16])
  {
    v31.__state_ = (std::__assoc_sub_state *)__dst.__pn_.__r_.__value_.__l.__size_;
    __dst.__pn_.__r_.__value_.__l.__size_ = 0;
    v32 = 1;
  }
  v33[0] = 0;
  v34 = -1;
  v28 = v39;
  if (v39 != -1)
  {
    ((void (*)(std::__fs::filesystem::path *, _BYTE *, void **))off_24EC58228[v39])(&v42, v33, v38);
    v34 = v28;
  }
  sub_22375220C(a1, (uint64_t)&v40, &data);
  sub_223757750((uint64_t)&data);
  if (v34 != -1)
    ((void (*)(std::__fs::filesystem::path *, _BYTE *))off_24EC58218[v34])(&v42, v33);
  v34 = -1;
  if (v32)
    std::future<void>::~future(&v31);
  sub_223757750((uint64_t)&__dst);
  if (v39 != -1)
    ((void (*)(std::__fs::filesystem::path *, void **))off_24EC58218[v39])(&v42, v38);
  v39 = -1;
  if (__dst.__pn_.__r_.__value_.__s.__data_[16])
    std::future<void>::~future((std::future<void> *)&__dst.__pn_.__r_.__value_.__r.__words[1]);
LABEL_68:
  if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__pn_.__r_.__value_.__l.__data_);
  return v21;
}

void sub_223753860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_22375339C((uint64_t)&a25);
  if ((*(char *)(v27 - 121) & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(*(void **)(v27 - 144));
  _Unwind_Resume(a1);
}

void sub_223753934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__assoc_sub_state *state;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _BYTE __p[24];
  std::promise<void> v37;
  _QWORD v38[2];
  _BYTE v39[24];
  _BYTE *v40;
  std::__assoc_sub_state *v41;
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int *)(a2 + 216);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_OWORD *)__p = *(_OWORD *)a3;
  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v9 = *a4;
  v8 = (std::__shared_weak_count *)a4[1];
  *(_QWORD *)&__p[16] = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = a4[2];
  std::promise<void>::promise(&v37);
  std::promise<void>::get_future(&v37);
  v38[0] = *(_QWORD *)&__p[8];
  *(_QWORD *)((char *)v38 + 7) = *(_QWORD *)&__p[15];
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v40 = 0;
  v15 = operator new(0x40uLL);
  *v15 = off_24EC582C8;
  v15[1] = a2;
  v16 = v38[0];
  v15[2] = *(_QWORD *)__p;
  v15[3] = v16;
  *(_QWORD *)((char *)v15 + 31) = *(_QWORD *)((char *)v38 + 7);
  *((_BYTE *)v15 + 39) = __p[23];
  v38[0] = 0;
  *(_QWORD *)((char *)v38 + 7) = 0;
  v15[5] = v9;
  v15[6] = v8;
  if (v8)
  {
    v17 = (unint64_t *)&v8->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v15[7] = v12;
  state = v37.__state_;
  v37.__state_ = 0;
  v40 = 0;
  v41 = state;
  v43 = v15;
  (*(void (**)(uint64_t, std::__assoc_sub_state **))(*(_QWORD *)(a2 + 72) + 48))(a2 + 72, &v41);
  v24 = v43;
  if (v43 == v42)
  {
    v25 = 4;
    v24 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_17;
    v25 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v24 + 8 * v25))(v24, v20, v21, v22, v23);
LABEL_17:
  MEMORY[0x227684B68](&v41);
  v30 = v40;
  if (v40 == v39)
  {
    v31 = 4;
    v30 = v39;
    goto LABEL_21;
  }
  if (v40)
  {
    v31 = 5;
LABEL_21:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v30 + 8 * v31))(v30, v26, v27, v28, v29);
  }
  if (v8)
  {
    v32 = (unint64_t *)&v8->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  MEMORY[0x227684B68](&v37);
  if (v8)
  {
    v34 = (unint64_t *)&v8->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_223753BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,_QWORD *a27)
{
  std::__shared_weak_count *v27;
  std::future<void> *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  v31 = a27;
  if (a27 == (_QWORD *)(v29 + 8))
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 + 8);
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  MEMORY[0x227684B68](&a23);
  v33 = a22;
  if (a22 == &a19)
  {
    v34 = 4;
    v33 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_11;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_11:
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::future<void>::~future(v28);
  MEMORY[0x227684B68](&a16);
  sub_223757A34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223753CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223757A34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223753CB8(uint64_t a1, std::__fs::filesystem::path *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  uint64_t v12;
  unint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE v26[7];
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path __dst;
  __int128 v29;
  uint64_t v30;
  _DWORD v31[2];
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  sub_2236E5318(a2, a1, &__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__dst, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  v3 = sub_22324053C(a1 + 144, (const void **)&__dst.__pn_.__r_.__value_.__l.__data_);
  v4 = v3;
  v5 = (uint64_t *)(a1 + 152);
  if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v6 = SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
    if (v5 != v3)
      goto LABEL_6;
LABEL_10:
    v9 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
    *(_DWORD *)v26 = __p.__pn_.__r_.__value_.__r.__words[2];
    *(_DWORD *)&v26[3] = *(_DWORD *)((char *)&__p.__pn_.__r_.__value_.__r.__words[2] + 3);
    memset(&__p, 0, sizeof(__p));
    v10 = (std::__shared_weak_count *)operator new(0x20uLL);
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC3AC28;
    v12 = operator new();
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unint64_t *)(v12 + 8);
    *(_QWORD *)(v12 + 24) = 850045863;
    *(_QWORD *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_QWORD *)(v12 + 80) = 0;
    *(_QWORD *)(v12 + 88) = 1018212795;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 124) = 0u;
    *(_QWORD *)v12 = &off_24EC557C0;
    std::mutex::lock((std::mutex *)(v12 + 24));
    v14 = *(_DWORD *)(v12 + 136);
    if ((v14 & 2) != 0)
      sub_2233236D4(1u);
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    *(_DWORD *)(v12 + 136) = v14 | 2;
    std::mutex::unlock((std::mutex *)(v12 + 24));
    v31[0] = *(_DWORD *)v26;
    *(_DWORD *)((char *)v31 + 3) = *(_DWORD *)&v26[3];
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10[1];
    __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    __dst.__pn_.__r_.__value_.__r.__words[2] = a1;
    if (v6 < 0)
    {
      sub_223197FA4(&v29, (void *)v9, *((unint64_t *)&v9 + 1));
    }
    else
    {
      v29 = v9;
      LODWORD(v30) = v31[0];
      *(_DWORD *)((char *)&v30 + 3) = *(_DWORD *)((char *)v31 + 3);
      HIBYTE(v30) = v6;
    }
    v33 = 0;
    v17 = (char *)operator new(0x38uLL);
    *(_QWORD *)v17 = off_24EC58248;
    *(_OWORD *)(v17 + 8) = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = 0uLL;
    *((_QWORD *)v17 + 3) = *((_QWORD *)&__dst.__pn_.__r_.__value_.__l + 2);
    *((_OWORD *)v17 + 2) = v29;
    *((_QWORD *)v17 + 6) = v30;
    v30 = 0;
    v29 = 0uLL;
    v33 = v17;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, v32);
    v18 = v33;
    if (v33 == v32)
    {
      v19 = 4;
      v18 = v32;
    }
    else
    {
      if (!v33)
        goto LABEL_22;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_22:
    if (SHIBYTE(v30) < 0)
    {
      operator delete((void *)v29);
      size = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__l.__size_;
      if (!__dst.__pn_.__r_.__value_.__l.__size_)
        goto LABEL_29;
    }
    else
    {
      size = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__l.__size_;
      if (!__dst.__pn_.__r_.__value_.__l.__size_)
        goto LABEL_29;
    }
    v21 = (unint64_t *)&size->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      if ((v6 & 0x80000000) == 0)
      {
        do
LABEL_32:
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        sub_223622D08((std::__assoc_sub_state *)v12);
        v7 = v24;
        do
          v25 = __ldaxr(v13);
        while (__stlxr(v25 - 1, v13));
        if (v25)
        {
          if ((*((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) & 0x80) == 0)
            return v7;
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          if ((*((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) & 0x80) == 0)
            return v7;
        }
        goto LABEL_7;
      }
LABEL_30:
      operator delete((void *)v9);
      goto LABEL_32;
    }
LABEL_29:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_30;
  }
  operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  v6 = SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  if (v5 == v4)
    goto LABEL_10;
LABEL_6:
  v7 = 1;
  if ((v6 & 0x80) != 0)
LABEL_7:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  return v7;
}

void sub_2237542B4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x2237542BCLL);
  JUMPOUT(0x2237542C4);
}

uint64_t sub_2237542CC(uint64_t a1, std::__fs::filesystem::path *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  std::string::size_type v6;
  char v7;
  char *v8;
  uint64_t v9;
  std::__fs::filesystem::path *p_dst;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  std::__fs::filesystem::path **v25;
  std::__fs::filesystem::path *v26;
  unint64_t v27;
  const std::__fs::filesystem::path **v28;
  std::__fs::filesystem::path *v29;
  uint64_t v30;
  const std::__fs::filesystem::path **v31;
  uint64_t v32;
  unint64_t v33;
  std::__fs::filesystem::path v35;
  std::__fs::filesystem::path v36;
  uint64_t v37;
  std::__fs::filesystem::path __p;
  _QWORD v39[2];
  std::__fs::filesystem::path __dst;
  std::__fs::filesystem::path *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  sub_2236E5318(a2, a1, &v36);
  if (!*(_BYTE *)(a1 + 40))
    goto LABEL_17;
  if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v35, v36.__pn_.__r_.__value_.__l.__data_, v36.__pn_.__r_.__value_.__l.__size_);
  else
    v35 = v36;
  v3 = (unsigned int *)(a1 + 216);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v37 = a1;
  if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&__p, v35.__pn_.__r_.__value_.__l.__data_, v35.__pn_.__r_.__value_.__l.__size_);
    v5 = v37;
  }
  else
  {
    __p = v35;
    v5 = a1;
  }
  v39[0] = __p.__pn_.__r_.__value_.__l.__size_;
  v6 = __p.__pn_.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7);
  v7 = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  v8 = (char *)operator new(0x28uLL);
  *(_QWORD *)v8 = off_24EC58650;
  *((_QWORD *)v8 + 1) = v5;
  v9 = v39[0];
  *((_QWORD *)v8 + 2) = v6;
  *((_QWORD *)v8 + 3) = v9;
  *(_QWORD *)(v8 + 31) = *(_QWORD *)((char *)v39 + 7);
  v8[39] = v7;
  v41 = (std::__fs::filesystem::path *)v8;
  (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)(a1 + 72) + 40))(a1 + 72, &__dst);
  p_dst = v41;
  if (v41 == &__dst)
  {
    v11 = 4;
    p_dst = &__dst;
    goto LABEL_14;
  }
  if (v41)
  {
    v11 = 5;
LABEL_14:
    (*(void (**)(void))(p_dst->__pn_.__r_.__value_.__r.__words[0] + 8 * v11))();
  }
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    operator delete(v35.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_21;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_17:
  if ((SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    __dst = v36;
    goto LABEL_22;
  }
LABEL_21:
  sub_223197FA4(&__dst, v36.__pn_.__r_.__value_.__l.__data_, v36.__pn_.__r_.__value_.__l.__size_);
LABEL_22:
  v12 = (uint64_t **)(a1 + 144);
  v13 = sub_22324053C(a1 + 144, (const void **)&__dst.__pn_.__r_.__value_.__l.__data_);
  if ((uint64_t *)(a1 + 152) != v13)
  {
    v14 = v13;
    v15 = (uint64_t *)v13[14];
    v16 = *v15;
    *(_QWORD *)(v16 + 8) = v15[1];
    *(_QWORD *)v15[1] = v16;
    --*(_QWORD *)(a1 + 184);
    operator delete(v15);
    v17 = (uint64_t *)v14[1];
    if (v17)
    {
      do
      {
        v18 = v17;
        v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      v19 = v14;
      do
      {
        v18 = (uint64_t *)v19[2];
        v20 = *v18 == (_QWORD)v19;
        v19 = v18;
      }
      while (!v20);
    }
    if (*v12 == v14)
      *v12 = v18;
    v21 = *(uint64_t **)(a1 + 152);
    --*(_QWORD *)(a1 + 160);
    sub_2231AFE60(v21, v14);
    sub_223757750((uint64_t)(v14 + 7));
    v22 = *((unsigned int *)v14 + 26);
    if ((_DWORD)v22 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_24EC58218[v22])(&v37, v14 + 10);
    *((_DWORD *)v14 + 26) = -1;
    if (*((_BYTE *)v14 + 72))
      std::future<void>::~future((std::future<void> *)v14 + 8);
    if (*((char *)v14 + 55) < 0)
      operator delete((void *)v14[4]);
    operator delete(v14);
  }
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  v23 = *(_QWORD *)(a1 + 120);
  v24 = *(_QWORD *)(a1 + 96);
  v25 = (std::__fs::filesystem::path **)(v24 + 8 * (v23 / 0xAA));
  if (*(_QWORD *)(a1 + 104) == v24)
  {
    v26 = 0;
    v29 = 0;
    v28 = (const std::__fs::filesystem::path **)(v24 + 8 * ((*(_QWORD *)(a1 + 128) + v23) / 0xAA));
  }
  else
  {
    v26 = (std::__fs::filesystem::path *)(*(_QWORD *)(v24 + 8 * (v23 / 0xAA)) + 24 * (v23 % 0xAA));
    v27 = *(_QWORD *)(a1 + 128) + v23;
    v28 = (const std::__fs::filesystem::path **)(v24 + 8 * (v27 / 0xAA));
    v29 = (std::__fs::filesystem::path *)&(*v28)[v27 % 0xAA];
  }
  v31 = sub_22375BDB8(v25, v26, v28, v29, (uint64_t)&v36);
  v32 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 104) != v32)
  {
    v33 = *(_QWORD *)(a1 + 128) + *(_QWORD *)(a1 + 120);
    if (*(_QWORD *)(v32 + 8 * (v33 / 0xAA)) + 24 * (v33 % 0xAA) == v30)
      goto LABEL_46;
    goto LABEL_45;
  }
  if (v30)
LABEL_45:
    sub_223757AB4((int64x2_t *)(a1 + 88), v31, v30);
LABEL_46:
  if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__pn_.__r_.__value_.__l.__data_);
  return 1;
}

void sub_22375469C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22375476C@<X0>(uint64_t a1@<X0>, const std::__fs::filesystem::path *a2@<X1>, _QWORD *a3@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::exception_ptr v15;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v6 = sub_2236E5A70(a1, a2);
  v7 = operator new();
  *(_QWORD *)(v7 + 24) = 850045863;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 1018212795;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 124) = 0u;
  *(_QWORD *)v7 = &off_24EC557C0;
  v14 = v7;
  std::mutex::lock((std::mutex *)(v7 + 24));
  if ((*(_BYTE *)(v7 + 136) & 1) != 0
    || (v15.__ptr_ = 0, v8 = *(_QWORD *)(v7 + 16), std::exception_ptr::~exception_ptr(&v15), v8))
  {
    sub_2233236D4(2u);
  }
  *(_BYTE *)(v7 + 140) = v6;
  *(_DWORD *)(v7 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v7 + 88));
  std::mutex::unlock((std::mutex *)(v7 + 24));
  v9 = v14;
  if (!v14)
    sub_2233236D4(3u);
  *a3 = v14;
  std::mutex::lock((std::mutex *)(v9 + 24));
  v10 = *(_DWORD *)(v9 + 136);
  if ((v10 & 2) != 0)
    sub_2233236D4(1u);
  v11 = (unint64_t *)(v9 + 8);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  *(_DWORD *)(v9 + 136) = v10 | 2;
  std::mutex::unlock((std::mutex *)(v9 + 24));
  return sub_2234AB028(&v14);
}

void sub_2237548E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

void sub_223754900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

void sub_22375491C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223754930()
{
  return 1;
}

unint64_t sub_223754938(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 136);
  v2 = *(_QWORD *)(a1 + 160);
  v3 = v1 >= v2;
  v4 = v1 - v2;
  if (v3)
    return v4;
  else
    return 0;
}

void sub_22375494C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  _BYTE *v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  int v64;
  const char *v65;
  int v66;
  const char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE object[24];
  __int128 v74;
  void *__p[2];
  unint64_t v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  sub_2236E42F4(a1);
  v2 = sub_2237551C4(a1);
  sub_223755C54(&v70);
  if (**(int **)(v70 + 56) > 3)
    return;
  v3 = *(unsigned __int8 *)(v70 + 72);
  v4 = sub_22322F254(v70, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v63[0] = &v70;
  v63[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v63[2] = std::chrono::system_clock::now().__d_.__rep_;
  v64 = 3;
  v65 = "unknown file";
  v66 = 220;
  v68 = 0;
  v69 = 0;
  v67 = "unknown function";
  v7 = v70;
  if (*(char *)(v70 + 39) < 0)
  {
    v9 = *(const char **)(v70 + 16);
    v8 = *(_QWORD *)(v70 + 24);
    v62 = *(_QWORD *)v63[0] + 16;
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v70 + 39);
    v9 = (const char *)(*(_QWORD *)v63[0] + 16);
    v62 = (uint64_t)v9;
    v10 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if ((_BYTE)v74 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v12 = (const char *)&xmmword_255788F40;
  else
    v12 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v13 = byte_255788F57;
  else
    v13 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v12, v9);
  v14 = &object[8];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v13 >= 0x17)
  {
    v15 = v6;
    v16 = v9;
    v17 = v7;
    v18 = v2;
    v19 = v3;
    v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v20 = v13 | 7;
    v21 = v20 + 1;
    v14 = operator new(v20 + 1);
    *(_QWORD *)&object[16] = v13;
    *(_QWORD *)&v74 = v21 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v14;
    v3 = v19;
    v2 = v18;
    v7 = v17;
    v9 = v16;
    v6 = v15;
    goto LABEL_23;
  }
  BYTE7(v74) = v13;
  if (v13)
LABEL_23:
    memmove(v14, v12, v13);
  v14[v13] = 0;
  BYTE8(v74) = 1;
  v22 = __p;
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v8 >= 0x17)
  {
    v24 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v24 = v8 | 7;
    v25 = v24 + 1;
    v22 = operator new(v24 + 1);
    __p[1] = (void *)v8;
    v76 = v25 | 0x8000000000000000;
    __p[0] = v22;
  }
  else
  {
    HIBYTE(v76) = v8;
    if (!v8)
    {
      LOBYTE(__p[0]) = 0;
      v77 = 1;
      v23 = *(NSObject **)object;
      if ((SHIBYTE(v76) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v22, v9, v8);
  *((_BYTE *)v22 + v8) = 0;
  v77 = 1;
  v23 = *(NSObject **)object;
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v74))
      goto LABEL_37;
LABEL_35:
    if (SBYTE7(v74) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p[0]);
  if (BYTE8(v74))
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v26 = _os_log_pack_size();
    v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
    v28 = (std::__shared_weak_count *)operator new();
    v29 = v28;
    v28->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v28->__shared_weak_owners_ = 0;
    v28[1].__vftable = v27;
    *(_QWORD *)object = v27;
    *(_QWORD *)&object[8] = v27;
    *(_QWORD *)&object[16] = v28;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    v74 = 0uLL;
    __p[0] = 0;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v29);
    }
    v33 = *(_QWORD *)object;
    v34 = _os_log_pack_fill();
    *(_DWORD *)v34 = 134217984;
    *(_QWORD *)(v34 + 4) = v2;
    v35 = operator new();
    v36 = *(unsigned __int8 *)(v7 + 39);
    v37 = v62;
    if ((v36 & 0x80u) != 0)
    {
      v37 = *(_QWORD *)(v7 + 16);
      v36 = *(_QWORD *)(v7 + 24);
    }
    *(_QWORD *)v35 = v33;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v35 + 24) = v74;
    v74 = 0uLL;
    *(_QWORD *)(v35 + 40) = v37;
    *(_QWORD *)(v35 + 48) = v36;
    *(_BYTE *)(v35 + 56) = 1;
    v71 = 0;
    v72 = v35;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v72);
    v38 = v72;
    v72 = 0;
    if (v38)
    {
      v39 = *(std::__shared_weak_count **)(v38 + 32);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)(v38 + 16);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      MEMORY[0x227684CE8](v38, 0x10F0C40B62ED6C6);
      v45 = v71;
      v71 = 0;
      if (v45)
      {
        v46 = *(std::__shared_weak_count **)(v45 + 32);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = *(std::__shared_weak_count **)(v45 + 16);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
      }
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v56 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134217984;
    *(_QWORD *)&object[4] = v2;
    v58 = (void *)_os_log_send_and_compose_impl();
    if (v58)
      free(v58);
  }
  if (v3)
  {
    sub_22322C138((uint64_t)v63, "Dispatched %zu file(s) for writing after filesystem access became available", v2);
    sub_223182C08((uint64_t)v63);
  }
  sub_223182C08((uint64_t)v63);
  v59 = v69;
  if (v69)
  {
    v60 = (unint64_t *)&v69->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_223755098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237550D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22375510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223755138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22375514C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2237551C4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  std::string *v8;
  uint64_t v9;
  std::__assoc_sub_state *state;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  std::__assoc_sub_state_vtbl *v20;
  size_t execute;
  void (__cdecl **on_zero_shared)(std::__assoc_sub_state *__hidden);
  unsigned __int8 v23;
  unsigned __int8 v25;
  const char *v26;
  size_t v27;
  _BYTE *v28;
  unint64_t v29;
  void (__cdecl **v30)(std::__assoc_sub_state *__hidden);
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  size_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (__cdecl *v48)(std::__assoc_sub_state *__hidden);
  void *v49;
  std::__assoc_sub_state *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *ptr;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void (__cdecl **p_on_zero_shared)(std::__assoc_sub_state *__hidden);
  std::__assoc_sub_state_vtbl *v75;
  std::future<void> v76;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v78;
  int v79;
  const char *v80;
  int v81;
  const char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::string __p;
  uint64_t v87;
  std::future<void> v88;
  _BYTE object[24];
  __int128 v90;
  void *v91[2];
  unint64_t v92;
  char v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD **)(a1 + 144);
  v2 = (_QWORD *)(a1 + 152);
  if (v1 == (_QWORD *)(a1 + 152))
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *((_DWORD *)v1 + 14) == 1 && *((_BYTE *)v1 + 72) == 0;
    if (!v6)
      goto LABEL_20;
    if (!*(_BYTE *)(a1 + 40))
    {
      ++v5;
LABEL_20:
      v12 = (_QWORD *)v1[1];
      if (!v12)
        goto LABEL_33;
      goto LABEL_31;
    }
    memset(&__p, 0, sizeof(__p));
    v7 = *((_BYTE *)v1 + 55);
    if (v7 >= 0)
      v8 = (std::string *)(v1 + 4);
    else
      v8 = (std::string *)v1[4];
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)v1 + 55);
    else
      v9 = v1[5];
    sub_2231816F0(&__p, v8, (std::string *)((char *)v8 + v9));
    sub_223751A70((uint64_t)object, (uint64_t)(v1 + 7));
    sub_223753934((uint64_t)&v88, a1, (uint64_t)&__p, (uint64_t *)object);
    if (*((_BYTE *)v1 + 72))
    {
      state = v88.__state_;
      v88.__state_ = 0;
      v76.__state_ = (std::__assoc_sub_state *)v1[8];
      v1[8] = state;
      std::future<void>::~future(&v76);
      std::future<void>::~future(&v88);
      v11 = *(std::__shared_weak_count **)&object[8];
      if (!*(_QWORD *)&object[8])
        goto LABEL_26;
    }
    else
    {
      v1[8] = v88.__state_;
      v88.__state_ = 0;
      *((_BYTE *)v1 + 72) = 1;
      std::future<void>::~future(&v88);
      v11 = *(std::__shared_weak_count **)&object[8];
      if (!*(_QWORD *)&object[8])
        goto LABEL_26;
    }
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (v14)
    {
LABEL_26:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_30;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      ++v4;
      v12 = (_QWORD *)v1[1];
      if (!v12)
        goto LABEL_33;
      goto LABEL_31;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    ++v4;
    v12 = (_QWORD *)v1[1];
    if (!v12)
    {
      do
      {
LABEL_33:
        v15 = (_QWORD *)v1[2];
        v6 = *v15 == (_QWORD)v1;
        v1 = v15;
      }
      while (!v6);
      goto LABEL_3;
    }
    do
    {
LABEL_31:
      v15 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
LABEL_3:
    v1 = v15;
  }
  while (v15 != v2);
  if (v5)
  {
    v16 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kfplanes_pers", 0x18uLL, "Failed to synchronize %lu file(s) with modifications. Filesystem access is not available.", 0x59uLL);
    sub_22374F514(&v85);
    if (**(int **)(v85 + 56) <= 5)
    {
      v17 = *(unsigned __int8 *)(v85 + 72);
      v18 = sub_22322F254(v85, "OSLogSurrogateAppender", 1, 0);
      v19 = v18;
      if (v17 || v18)
      {
        v76.__state_ = (std::__assoc_sub_state *)&v85;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v78 = std::chrono::system_clock::now().__d_.__rep_;
        v79 = 5;
        v80 = "unknown file";
        v81 = 351;
        v83 = 0;
        v84 = 0;
        v82 = "unknown function";
        v20 = v76.__state_->__vftable;
        v75 = v76.__state_->__vftable;
        if (SHIBYTE(v76.__state_->__vftable[1].~__assoc_sub_state) < 0)
        {
          on_zero_shared = (void (__cdecl **)(std::__assoc_sub_state *__hidden))v20->__on_zero_shared;
          execute = (size_t)v20->__execute;
          p_on_zero_shared = &v76.__state_->__on_zero_shared;
          v25 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v25 & 1) == 0)
          {
LABEL_130:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)object);
              sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
              if ((_BYTE)v90 && (object[23] & 0x80000000) != 0)
                operator delete(*(void **)object);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          execute = HIBYTE(v76.__state_->__vftable[1].~__assoc_sub_state);
          on_zero_shared = &v76.__state_->__on_zero_shared;
          p_on_zero_shared = on_zero_shared;
          v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v23 & 1) == 0)
            goto LABEL_130;
        }
        if (byte_255788F57 >= 0)
          v26 = (const char *)&xmmword_255788F40;
        else
          v26 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v27 = byte_255788F57;
        else
          v27 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v26, (const char *)on_zero_shared);
        v28 = &object[8];
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v27 >= 0x17)
        {
          v29 = v19;
          v30 = on_zero_shared;
          v31 = v17;
          v32 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v32 = v27 | 7;
          v33 = v32 + 1;
          v28 = operator new(v32 + 1);
          *(_QWORD *)&object[16] = v27;
          *(_QWORD *)&v90 = v33 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v28;
          v17 = v31;
          on_zero_shared = v30;
          v19 = v29;
        }
        else
        {
          BYTE7(v90) = v27;
          if (!v27)
          {
LABEL_61:
            v28[v27] = 0;
            BYTE8(v90) = 1;
            v34 = v91;
            if (execute > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (execute >= 0x17)
            {
              v35 = (execute & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((execute | 7) != 0x17)
                v35 = execute | 7;
              v36 = v35 + 1;
              v34 = operator new(v35 + 1);
              v91[1] = (void *)execute;
              v92 = v36 | 0x8000000000000000;
              v91[0] = v34;
            }
            else
            {
              HIBYTE(v92) = execute;
              if (!execute)
              {
LABEL_69:
                *((_BYTE *)v34 + execute) = 0;
                v93 = 1;
                v37 = *(NSObject **)object;
                if (SHIBYTE(v92) < 0)
                  operator delete(v91[0]);
                if (BYTE8(v90) && SBYTE7(v90) < 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v19 && *(_QWORD *)(v19 + 24))
                {
                  v38 = _os_log_pack_size();
                  v39 = (std::__shared_weak_count_vtbl *)operator new(v38, (std::align_val_t)8uLL);
                  v40 = (std::__shared_weak_count *)operator new();
                  v41 = v40;
                  v40->__shared_owners_ = 0;
                  v42 = (unint64_t *)&v40->__shared_owners_;
                  v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v40->__shared_weak_owners_ = 0;
                  v40[1].__vftable = v39;
                  *(_QWORD *)object = v39;
                  *(_QWORD *)&object[8] = v39;
                  *(_QWORD *)&object[16] = v40;
                  do
                    v43 = __ldxr(v42);
                  while (__stxr(v43 + 1, v42));
                  v90 = 0uLL;
                  v91[0] = 0;
                  do
                    v44 = __ldaxr(v42);
                  while (__stlxr(v44 - 1, v42));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                    std::__shared_weak_count::__release_weak(v41);
                  }
                  v45 = *(_QWORD *)object;
                  v46 = _os_log_pack_fill();
                  *(_DWORD *)v46 = 134217984;
                  *(_QWORD *)(v46 + 4) = v5;
                  v47 = operator new();
                  v48 = (void (__cdecl *)(std::__assoc_sub_state *__hidden))HIBYTE(v75[1].~__assoc_sub_state);
                  v49 = p_on_zero_shared;
                  if ((char)v48 < 0)
                  {
                    v49 = v75->__on_zero_shared;
                    v48 = v75->__execute;
                  }
                  *(_QWORD *)v47 = v45;
                  *(_OWORD *)(v47 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v47 + 24) = v90;
                  v90 = 0uLL;
                  *(_QWORD *)(v47 + 40) = v49;
                  *(_QWORD *)(v47 + 48) = v48;
                  *(_BYTE *)(v47 + 56) = 16;
                  v87 = 0;
                  v88.__state_ = (std::__assoc_sub_state *)v47;
                  (*(void (**)(_QWORD, std::future<void> *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), &v88);
                  v50 = v88.__state_;
                  v88.__state_ = 0;
                  if (v50)
                  {
                    v51 = *(std::__shared_weak_count **)v50->__mut_.__m_.__opaque;
                    if (v51)
                    {
                      v52 = (unint64_t *)&v51->__shared_owners_;
                      do
                        v53 = __ldaxr(v52);
                      while (__stlxr(v53 - 1, v52));
                      if (!v53)
                      {
                        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                        std::__shared_weak_count::__release_weak(v51);
                      }
                    }
                    ptr = (std::__shared_weak_count *)v50->__exception_.__ptr_;
                    if (ptr)
                    {
                      v55 = (unint64_t *)&ptr->__shared_owners_;
                      do
                        v56 = __ldaxr(v55);
                      while (__stlxr(v56 - 1, v55));
                      if (!v56)
                      {
                        ((void (*)(std::__shared_weak_count *))ptr->__on_zero_shared)(ptr);
                        std::__shared_weak_count::__release_weak(ptr);
                      }
                    }
                    MEMORY[0x227684CE8](v50, 0x10F0C40B62ED6C6);
                    v57 = v87;
                    v87 = 0;
                    if (v57)
                    {
                      v58 = *(std::__shared_weak_count **)(v57 + 32);
                      if (v58)
                      {
                        v59 = (unint64_t *)&v58->__shared_owners_;
                        do
                          v60 = __ldaxr(v59);
                        while (__stlxr(v60 - 1, v59));
                        if (!v60)
                        {
                          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                          std::__shared_weak_count::__release_weak(v58);
                        }
                      }
                      v61 = *(std::__shared_weak_count **)(v57 + 16);
                      if (v61)
                      {
                        v62 = (unint64_t *)&v61->__shared_owners_;
                        do
                          v63 = __ldaxr(v62);
                        while (__stlxr(v63 - 1, v62));
                        if (!v63)
                        {
                          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                          std::__shared_weak_count::__release_weak(v61);
                        }
                      }
                      MEMORY[0x227684CE8](v57, 0x10F0C40B62ED6C6);
                    }
                  }
                  v64 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
                  if (*((_QWORD *)&v90 + 1))
                  {
                    v65 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
                    do
                      v66 = __ldaxr(v65);
                    while (__stlxr(v66 - 1, v65));
                    if (!v66)
                    {
                      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                      std::__shared_weak_count::__release_weak(v64);
                    }
                  }
                  v67 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v68 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v69 = __ldaxr(v68);
                    while (__stlxr(v69 - 1, v68));
                    if (!v69)
                    {
                      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                      std::__shared_weak_count::__release_weak(v67);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)object = 134217984;
                  *(_QWORD *)&object[4] = v5;
                  v70 = (void *)_os_log_send_and_compose_impl();
                  if (v70)
                    free(v70);
                }
                if (v17)
                {
                  sub_22322C138((uint64_t)&v76, "Failed to synchronize %lu file(s) with modifications. Filesystem access is not available.", v5);
                  sub_223182C08((uint64_t)&v76);
                }
                sub_223182C08((uint64_t)&v76);
                v71 = v84;
                if (v84)
                {
                  v72 = (unint64_t *)&v84->__shared_owners_;
                  do
                    v73 = __ldaxr(v72);
                  while (__stlxr(v73 - 1, v72));
                  if (!v73)
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                }
                return v4;
              }
            }
            memmove(v34, on_zero_shared, execute);
            goto LABEL_69;
          }
        }
        memmove(v28, v26, v27);
        goto LABEL_61;
      }
    }
  }
  return v4;
}

void sub_223755AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_223755B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_22319A054(&a28);
  sub_22319A054(&a27);
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_223755B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_223755B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x227684CE8](v6, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223755B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223755BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *object,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223755C54(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC4F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC4F0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC4E8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC4F0);
  }
  *a1 = qword_2540CC4E8;
}

void sub_223755CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC4F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC4F0);
  _Unwind_Resume(a1);
}

size_t sub_223755D48(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  size_t v44;
  const char *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 v48;
  size_t v49;
  const char *v50;
  _BYTE *v51;
  unint64_t v52;
  const char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  double v62;
  size_t v63;
  std::__shared_weak_count_vtbl *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v104;
  uint64_t v105;
  size_t v106;
  const char *v107;
  unsigned __int8 v108;
  size_t v109;
  const char *v110;
  _BYTE *v111;
  unint64_t v112;
  const char *v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  size_t v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count *v125;
  unint64_t *p_shared_owners;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  uint64_t v131;
  uint64_t v132;
  std::future<void> *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void *v154;
  unsigned int v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  std::future<void> *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v168;
  int v169;
  const char *v170;
  int v171;
  const char *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  uint64_t v175;
  int v176;
  std::future<void> v177;
  char v178;
  uint64_t v179[3];
  int v180;
  __int128 v181;
  uint64_t v182;
  __int128 __p;
  uint64_t v184;
  size_t v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE __dst[24];
  __int128 v189;
  void **v190;
  size_t v191;
  unint64_t v192;
  char v193;
  int v194;
  char v195;
  _QWORD v196[3];
  _QWORD *v197;
  uint64_t v198;

  v198 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned int *)(a1 + 216));
  kdebug_trace();
  v185 = 0;
  v6 = &off_24EC585C0;
  v196[0] = &off_24EC585C0;
  v196[1] = &v185;
  v7 = v196;
  v196[2] = 0;
  v197 = v196;
  if (!*(_BYTE *)(a1 + 40))
  {
    v38 = 0;
    goto LABEL_239;
  }
  if (*(_QWORD *)(a1 + 128))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    v9 = v8 >= a2 ? a2 : v8;
    if (v9 && v9 >= v4)
    {
      v11 = v9 - v4;
      if (v185 < v9 - v4)
      {
        v12 = (uint64_t *)(a1 + 152);
        do
        {
          v13 = *(_QWORD *)(a1 + 128);
          if (!v13)
            break;
          v14 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * ((v13 + *(_QWORD *)(a1 + 120) - 1) / 0xAAuLL))
              + 24 * ((v13 + *(_QWORD *)(a1 + 120) - 1) % 0xAAuLL);
          if (*(char *)(v14 + 23) < 0)
          {
            sub_223197FA4(__dst, *(void **)v14, *(_QWORD *)(v14 + 8));
          }
          else
          {
            v15 = *(_OWORD *)v14;
            *(_QWORD *)&__dst[16] = *(_QWORD *)(v14 + 16);
            *(_OWORD *)__dst = v15;
          }
          v16 = sub_22324053C(a1 + 144, (const void **)__dst);
          v17 = v16;
          if ((__dst[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__dst);
            if (v12 == v17)
            {
LABEL_28:
              if (*(char *)(v14 + 23) < 0)
              {
                sub_223197FA4(&__p, *(void **)v14, *(_QWORD *)(v14 + 8));
              }
              else
              {
                v27 = *(_OWORD *)v14;
                v184 = *(_QWORD *)(v14 + 16);
                __p = v27;
              }
              sub_223751D00((uint64_t *)&v166, a1, &__p);
              if (SHIBYTE(v184) < 0)
              {
                operator delete((void *)__p);
                if (*(char *)(v14 + 23) < 0)
                  goto LABEL_35;
LABEL_33:
                v28 = *(_OWORD *)v14;
                v182 = *(_QWORD *)(v14 + 16);
                v181 = v28;
              }
              else
              {
                if ((*(char *)(v14 + 23) & 0x80000000) == 0)
                  goto LABEL_33;
LABEL_35:
                sub_223197FA4(&v181, *(void **)v14, *(_QWORD *)(v14 + 8));
              }
              v176 = 0;
              LOBYTE(v177.__state_) = 0;
              v178 = 0;
              v179[0] = (uint64_t)v166;
              v166 = 0;
              v180 = 1;
              sub_223757128((uint64_t)__dst, a1 + 136, (const void **)&v181, (uint64_t)&v176);
              sub_223757750((uint64_t)&v176);
              if (v180 != -1)
                ((void (*)(uint64_t *, uint64_t *))off_24EC58218[v180])(&v187, v179);
              v180 = -1;
              if (v178)
                std::future<void>::~future(&v177);
              if (SHIBYTE(v182) < 0)
                operator delete((void *)v181);
              v30 = *(_QWORD *)(a1 + 120);
              v29 = *(_QWORD *)(a1 + 128);
              v31 = v29 - 1;
              v32 = *(_QWORD *)(a1 + 96);
              v33 = *(_QWORD *)(v32 + 8 * ((v29 - 1 + v30) / 0xAAuLL)) + 24 * ((v29 - 1 + v30) % 0xAAuLL);
              if (*(char *)(v33 + 23) < 0)
              {
                operator delete(*(void **)v33);
                v32 = *(_QWORD *)(a1 + 96);
                v30 = *(_QWORD *)(a1 + 120);
                v29 = *(_QWORD *)(a1 + 128);
                v31 = v29 - 1;
              }
              v34 = *(_QWORD *)(a1 + 104);
              v35 = v34 - v32;
              v42 = v35 == 0;
              v36 = 170 * (v35 >> 3) - 1;
              *(_QWORD *)(a1 + 128) = v31;
              if (v42)
                v37 = 0;
              else
                v37 = v36;
              if ((unint64_t)(v37 - (v30 + v29) + 1) >= 0x154)
              {
                operator delete(*(void **)(v34 - 8));
                *(_QWORD *)(a1 + 104) -= 8;
              }
              ++v185;
              if (v195)
              {
                sub_223757750((uint64_t)&v189);
                if (v194 != -1)
                  ((void (*)(uint64_t *, size_t *))off_24EC58218[v194])(&v187, &v191);
                v194 = -1;
                if ((_BYTE)v190)
                  std::future<void>::~future((std::future<void> *)&v189 + 1);
                if ((__dst[23] & 0x80000000) != 0)
                  operator delete(*(void **)__dst);
              }
              continue;
            }
          }
          else if (v12 == v16)
          {
            goto LABEL_28;
          }
          v19 = *(_QWORD *)(a1 + 120);
          v18 = *(_QWORD *)(a1 + 128);
          v20 = v18 - 1;
          v21 = *(_QWORD *)(a1 + 96);
          v22 = *(_QWORD *)(v21 + 8 * ((v18 - 1 + v19) / 0xAAuLL)) + 24 * ((v18 - 1 + v19) % 0xAAuLL);
          if (*(char *)(v22 + 23) < 0)
          {
            operator delete(*(void **)v22);
            v21 = *(_QWORD *)(a1 + 96);
            v19 = *(_QWORD *)(a1 + 120);
            v18 = *(_QWORD *)(a1 + 128);
            v20 = v18 - 1;
          }
          v23 = *(_QWORD *)(a1 + 104);
          v24 = v23 - v21;
          v42 = v24 == 0;
          v25 = 170 * (v24 >> 3) - 1;
          *(_QWORD *)(a1 + 128) = v20;
          if (v42)
            v26 = 0;
          else
            v26 = v25;
          if ((unint64_t)(v26 - (v19 + v18) + 1) >= 0x154)
          {
            operator delete(*(void **)(v23 - 8));
            *(_QWORD *)(a1 + 104) -= 8;
          }
        }
        while (v185 < v11);
      }
      sub_223755C54(&v175);
      if (**(int **)(v175 + 56) > 2
        || ((v39 = *(unsigned __int8 *)(v175 + 72),
             v40 = sub_22322F254(v175, "OSLogSurrogateAppender", 1, 0),
             v41 = v40,
             !v39)
          ? (v42 = v40 == 0)
          : (v42 = 0),
            v42))
      {
LABEL_147:
        sub_223755C54(&v175);
        if (**(int **)(v175 + 56) > 2)
          goto LABEL_237;
        v100 = *(unsigned __int8 *)(v175 + 72);
        v101 = sub_22322F254(v175, "OSLogSurrogateAppender", 1, 0);
        v102 = v101;
        if (!v100 && v101 == 0)
          goto LABEL_237;
        v166 = &v175;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v168 = std::chrono::system_clock::now().__d_.__rep_;
        v169 = 2;
        v170 = "unknown file";
        v171 = 266;
        v173 = 0;
        v174 = 0;
        v172 = "unknown function";
        v104 = atomic_load((unsigned int *)(a1 + 216));
        v105 = *v166;
        v165 = *v166;
        if (*(char *)(*v166 + 39) < 0)
        {
          v107 = *(const char **)(v105 + 16);
          v106 = *(_QWORD *)(v105 + 24);
        }
        else
        {
          v106 = *(unsigned __int8 *)(*v166 + 39);
          v107 = (const char *)(*v166 + 16);
        }
        v163 = (std::future<void> *)(*v166 + 16);
        v108 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v108 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)__dst);
          sub_223199C58("com.apple.cv3d", (unint64_t)__dst, &xmmword_255788F40);
          if ((_BYTE)v189 && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v109 = byte_255788F57;
        else
          v109 = *((_QWORD *)&xmmword_255788F40 + 1);
        if (byte_255788F57 >= 0)
          v110 = (const char *)&xmmword_255788F40;
        else
          v110 = (const char *)xmmword_255788F40;
        *(_QWORD *)__dst = os_log_create(v110, v107);
        v111 = &__dst[8];
        if (v109 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v109 >= 0x17)
        {
          v112 = v102;
          v113 = v107;
          v114 = v104;
          v115 = v100;
          v116 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v109 | 7) != 0x17)
            v116 = v109 | 7;
          v117 = v116 + 1;
          v111 = operator new(v116 + 1);
          *(_QWORD *)&__dst[16] = v109;
          *(_QWORD *)&v189 = v117 | 0x8000000000000000;
          *(_QWORD *)&__dst[8] = v111;
          v100 = v115;
          v104 = v114;
          v107 = v113;
          v102 = v112;
        }
        else
        {
          BYTE7(v189) = v109;
          if (!v109)
          {
LABEL_170:
            v111[v109] = 0;
            BYTE8(v189) = 1;
            v118 = (void **)&v190;
            if (v106 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v106 >= 0x17)
            {
              v119 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v106 | 7) != 0x17)
                v119 = v106 | 7;
              v120 = v119 + 1;
              v118 = (void **)operator new(v119 + 1);
              v191 = v106;
              v192 = v120 | 0x8000000000000000;
              v190 = v118;
            }
            else
            {
              HIBYTE(v192) = v106;
              if (!v106)
                goto LABEL_178;
            }
            memmove(v118, v107, v106);
LABEL_178:
            *((_BYTE *)v118 + v106) = 0;
            v193 = 1;
            v121 = *(NSObject **)__dst;
            if (SHIBYTE(v192) < 0)
              operator delete(v190);
            if (BYTE8(v189) && SBYTE7(v189) < 0)
              operator delete(*(void **)&__dst[8]);
            if (*(_QWORD *)__dst)
              os_release(*(void **)__dst);
            if (v102 && *(_QWORD *)(v102 + 24))
            {
              v122 = _os_log_pack_size();
              v123 = (std::__shared_weak_count_vtbl *)operator new(v122, (std::align_val_t)8uLL);
              v124 = (std::__shared_weak_count *)operator new();
              v125 = v124;
              v124->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v124->__shared_owners_;
              v124->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v124->__shared_weak_owners_ = 0;
              v124[1].__vftable = v123;
              *(_QWORD *)__dst = v123;
              *(_QWORD *)&__dst[8] = v123;
              *(_QWORD *)&__dst[16] = v124;
              do
                v127 = __ldxr(p_shared_owners);
              while (__stxr(v127 + 1, p_shared_owners));
              v189 = 0uLL;
              v190 = 0;
              do
                v128 = __ldaxr(p_shared_owners);
              while (__stlxr(v128 - 1, p_shared_owners));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v125);
              }
              v129 = *(_QWORD *)__dst;
              v130 = (_DWORD *)_os_log_pack_fill();
              *v130 = 67109120;
              v130[1] = v104;
              v131 = operator new();
              v132 = *(unsigned __int8 *)(v165 + 39);
              v133 = v163;
              if ((v132 & 0x80u) != 0)
              {
                v133 = *(std::future<void> **)(v165 + 16);
                v132 = *(_QWORD *)(v165 + 24);
              }
              *(_QWORD *)v131 = v129;
              *(_OWORD *)(v131 + 8) = *(_OWORD *)&__dst[8];
              *(_QWORD *)&__dst[8] = 0;
              *(_QWORD *)&__dst[16] = 0;
              *(_OWORD *)(v131 + 24) = v189;
              v189 = 0uLL;
              *(_QWORD *)(v131 + 40) = v133;
              *(_QWORD *)(v131 + 48) = v132;
              *(_BYTE *)(v131 + 56) = 2;
              v186 = 0;
              v187 = v131;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v102 + 24) + 40))(*(_QWORD *)(v102 + 24), &v187);
              v134 = v187;
              v187 = 0;
              if (v134)
              {
                v135 = *(std::__shared_weak_count **)(v134 + 32);
                if (v135)
                {
                  v136 = (unint64_t *)&v135->__shared_owners_;
                  do
                    v137 = __ldaxr(v136);
                  while (__stlxr(v137 - 1, v136));
                  if (!v137)
                  {
                    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                    std::__shared_weak_count::__release_weak(v135);
                  }
                }
                v138 = *(std::__shared_weak_count **)(v134 + 16);
                if (v138)
                {
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldaxr(v139);
                  while (__stlxr(v140 - 1, v139));
                  if (!v140)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
                MEMORY[0x227684CE8](v134, 0x10F0C40B62ED6C6);
                v141 = v186;
                v186 = 0;
                if (v141)
                {
                  v142 = *(std::__shared_weak_count **)(v141 + 32);
                  if (v142)
                  {
                    v143 = (unint64_t *)&v142->__shared_owners_;
                    do
                      v144 = __ldaxr(v143);
                    while (__stlxr(v144 - 1, v143));
                    if (!v144)
                    {
                      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                      std::__shared_weak_count::__release_weak(v142);
                    }
                  }
                  v145 = *(std::__shared_weak_count **)(v141 + 16);
                  if (v145)
                  {
                    v146 = (unint64_t *)&v145->__shared_owners_;
                    do
                      v147 = __ldaxr(v146);
                    while (__stlxr(v147 - 1, v146));
                    if (!v147)
                    {
                      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                      std::__shared_weak_count::__release_weak(v145);
                    }
                  }
                  MEMORY[0x227684CE8](v141, 0x10F0C40B62ED6C6);
                }
              }
              v148 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
              if (*((_QWORD *)&v189 + 1))
              {
                v149 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }
              v151 = *(std::__shared_weak_count **)&__dst[16];
              if (*(_QWORD *)&__dst[16])
              {
                v152 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }
            }
            else
            {
              os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)__dst = 67109120;
              *(_DWORD *)&__dst[4] = v104;
              v154 = (void *)_os_log_send_and_compose_impl();
              if (v154)
                free(v154);
            }
            if (v100)
            {
              v155 = atomic_load((unsigned int *)(a1 + 216));
              sub_22322C138((uint64_t)&v166, "Queue size after filling cache: %u", v155);
              sub_223182C08((uint64_t)&v166);
            }
            sub_223182C08((uint64_t)&v166);
            v156 = v174;
            if (v174)
            {
              v157 = (unint64_t *)&v174->__shared_owners_;
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
            goto LABEL_237;
          }
        }
        memmove(v111, v110, v109);
        goto LABEL_170;
      }
      v166 = &v175;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v168 = std::chrono::system_clock::now().__d_.__rep_;
      v169 = 2;
      v170 = "unknown file";
      v171 = 265;
      v173 = 0;
      v174 = 0;
      v172 = "unknown function";
      v43 = *v166;
      if (*(char *)(*v166 + 39) < 0)
      {
        v45 = *(const char **)(v43 + 16);
        v44 = *(_QWORD *)(v43 + 24);
      }
      else
      {
        v44 = *(unsigned __int8 *)(*v166 + 39);
        v45 = (const char *)(*v166 + 16);
      }
      v164 = *v166 + 16;
      v46 = *(_QWORD *)(a1 + 160);
      v47 = *(_QWORD *)(a1 + 136);
      v48 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__dst);
        sub_223199C58("com.apple.cv3d", (unint64_t)__dst, &xmmword_255788F40);
        if ((_BYTE)v189 && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v49 = byte_255788F57;
      else
        v49 = *((_QWORD *)&xmmword_255788F40 + 1);
      if (byte_255788F57 >= 0)
        v50 = (const char *)&xmmword_255788F40;
      else
        v50 = (const char *)xmmword_255788F40;
      *(_QWORD *)__dst = os_log_create(v50, v45);
      v51 = &__dst[8];
      if (v49 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v49 >= 0x17)
      {
        v52 = v41;
        v53 = v45;
        v54 = v43;
        v55 = v39;
        v56 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v49 | 7) != 0x17)
          v56 = v49 | 7;
        v57 = v56 + 1;
        v51 = operator new(v56 + 1);
        *(_QWORD *)&__dst[16] = v49;
        *(_QWORD *)&v189 = v57 | 0x8000000000000000;
        *(_QWORD *)&__dst[8] = v51;
        v39 = v55;
        v43 = v54;
        v45 = v53;
        v41 = v52;
      }
      else
      {
        BYTE7(v189) = v49;
        if (!v49)
        {
LABEL_80:
          v51[v49] = 0;
          BYTE8(v189) = 1;
          v58 = (void **)&v190;
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v44 >= 0x17)
          {
            v59 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v59 = v44 | 7;
            v60 = v59 + 1;
            v58 = (void **)operator new(v59 + 1);
            v191 = v44;
            v192 = v60 | 0x8000000000000000;
            v190 = v58;
          }
          else
          {
            HIBYTE(v192) = v44;
            if (!v44)
              goto LABEL_88;
          }
          memmove(v58, v45, v44);
LABEL_88:
          *((_BYTE *)v58 + v44) = 0;
          v193 = 1;
          v61 = *(NSObject **)__dst;
          if (SHIBYTE(v192) < 0)
            operator delete(v190);
          if (BYTE8(v189) && SBYTE7(v189) < 0)
            operator delete(*(void **)&__dst[8]);
          if (*(_QWORD *)__dst)
            os_release(*(void **)__dst);
          v62 = (double)v46 / (double)v47 * 100.0;
          if (v41 && *(_QWORD *)(v41 + 24))
          {
            v63 = _os_log_pack_size();
            v64 = (std::__shared_weak_count_vtbl *)operator new(v63, (std::align_val_t)8uLL);
            v65 = (std::__shared_weak_count *)operator new();
            v66 = v65;
            v65->__shared_owners_ = 0;
            v67 = (unint64_t *)&v65->__shared_owners_;
            v65->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v65->__shared_weak_owners_ = 0;
            v65[1].__vftable = v64;
            *(_QWORD *)__dst = v64;
            *(_QWORD *)&__dst[8] = v64;
            *(_QWORD *)&__dst[16] = v65;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
            v189 = 0uLL;
            v190 = 0;
            do
              v69 = __ldaxr(v67);
            while (__stlxr(v69 - 1, v67));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v66);
            }
            v70 = *(_QWORD *)__dst;
            v71 = _os_log_pack_fill();
            v72 = v185;
            *(_DWORD *)v71 = 134218240;
            *(_QWORD *)(v71 + 4) = v72;
            *(_WORD *)(v71 + 12) = 2048;
            *(double *)(v71 + 14) = v62;
            v73 = operator new();
            v74 = *(unsigned __int8 *)(v43 + 39);
            v75 = v164;
            if ((v74 & 0x80u) != 0)
            {
              v75 = *(_QWORD *)(v43 + 16);
              v74 = *(_QWORD *)(v43 + 24);
            }
            *(_QWORD *)v73 = v70;
            *(_OWORD *)(v73 + 8) = *(_OWORD *)&__dst[8];
            *(_QWORD *)&__dst[8] = 0;
            *(_QWORD *)&__dst[16] = 0;
            *(_OWORD *)(v73 + 24) = v189;
            v189 = 0uLL;
            *(_QWORD *)(v73 + 40) = v75;
            *(_QWORD *)(v73 + 48) = v74;
            *(_BYTE *)(v73 + 56) = 2;
            v186 = 0;
            v187 = v73;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v41 + 24) + 40))(*(_QWORD *)(v41 + 24), &v187);
            v76 = v187;
            v187 = 0;
            if (v76)
            {
              v77 = *(std::__shared_weak_count **)(v76 + 32);
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              v80 = *(std::__shared_weak_count **)(v76 + 16);
              if (v80)
              {
                v81 = (unint64_t *)&v80->__shared_owners_;
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              MEMORY[0x227684CE8](v76, 0x10F0C40B62ED6C6);
              v83 = v186;
              v186 = 0;
              if (v83)
              {
                v84 = *(std::__shared_weak_count **)(v83 + 32);
                if (v84)
                {
                  v85 = (unint64_t *)&v84->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (!v86)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                v87 = *(std::__shared_weak_count **)(v83 + 16);
                if (v87)
                {
                  v88 = (unint64_t *)&v87->__shared_owners_;
                  do
                    v89 = __ldaxr(v88);
                  while (__stlxr(v89 - 1, v88));
                  if (!v89)
                  {
                    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                    std::__shared_weak_count::__release_weak(v87);
                  }
                }
                MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
              }
            }
            v90 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
            if (*((_QWORD *)&v189 + 1))
            {
              v91 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
            v93 = *(std::__shared_weak_count **)&__dst[16];
            if (*(_QWORD *)&__dst[16])
            {
              v94 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
          }
          else
          {
            os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG);
            *(_DWORD *)__dst = 134218240;
            *(_QWORD *)&__dst[4] = v185;
            *(_WORD *)&__dst[12] = 2048;
            *(double *)&__dst[14] = v62;
            v96 = (void *)_os_log_send_and_compose_impl();
            if (v96)
              free(v96);
          }
          if (v39)
          {
            sub_22322C138((uint64_t)&v166, "Loaded %zu files into cache. Cache fill level %.2f%%", v185, (double)*(unint64_t *)(a1 + 160) / (double)*(unint64_t *)(a1 + 136) * 100.0);
            sub_223182C08((uint64_t)&v166);
          }
          sub_223182C08((uint64_t)&v166);
          v97 = v174;
          if (v174)
          {
            v98 = (unint64_t *)&v174->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          goto LABEL_147;
        }
      }
      memmove(v51, v50, v49);
      goto LABEL_80;
    }
  }
LABEL_237:
  v7 = v197;
  if (!v197)
    sub_223198474();
  v38 = v185;
  v6 = (uint64_t (**)())*v197;
LABEL_239:
  ((void (*)(_QWORD *, uint64_t))v6[6])(v7, v5);
  v160 = v197;
  if (v197 == v196)
  {
    v161 = 4;
    v160 = v196;
    goto LABEL_243;
  }
  if (v197)
  {
    v161 = 5;
LABEL_243:
    (*(void (**)(_QWORD *, uint64_t))(*v160 + 8 * v161))(v160, v159);
  }
  return v38;
}

void sub_223756FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  if (a2)
  {
    if (*(_BYTE *)(v41 - 216))
    {
      if (*(char *)(v41 - 217) < 0)
        operator delete(*(void **)(v41 - 240));
    }
    __cxa_guard_abort(&qword_255788F58);
    sub_22316DC48(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223757128(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t **v9;
  int v10;
  const void *v11;
  size_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  size_t v19;
  size_t v20;
  int v21;
  int v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::future<void> *v37;
  std::__assoc_sub_state *v38;
  std::__assoc_sub_state *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  BOOL v43;
  uint64_t *v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  std::future<void> v54;

  v9 = (uint64_t **)(a2 + 16);
  v8 = *(uint64_t **)(a2 + 16);
  if (v8)
  {
    v10 = *((char *)a3 + 23);
    if (v10 >= 0)
      v11 = a3;
    else
      v11 = *a3;
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)a3 + 23);
    else
      v12 = (size_t)a3[1];
    while (1)
    {
      v13 = v8;
      v16 = (uint64_t *)v8[4];
      v14 = v8 + 4;
      v15 = v16;
      v17 = *((char *)v14 + 23);
      if (v17 >= 0)
        v18 = v14;
      else
        v18 = v15;
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)v14 + 23);
      else
        v19 = v14[1];
      if (v19 >= v12)
        v20 = v12;
      else
        v20 = v19;
      v21 = memcmp(v11, v18, v20);
      if (v21)
      {
        if (v21 < 0)
          goto LABEL_8;
LABEL_22:
        v22 = memcmp(v18, v11, v20);
        if (v22)
        {
          if ((v22 & 0x80000000) == 0)
            goto LABEL_39;
        }
        else if (v19 >= v12)
        {
LABEL_39:
          *((_DWORD *)v13 + 14) = *(_DWORD *)a4;
          v37 = (std::future<void> *)(v13 + 8);
          if (*((unsigned __int8 *)v13 + 72) == *(unsigned __int8 *)(a4 + 16))
          {
            if (*((_BYTE *)v13 + 72))
            {
              v38 = *(std::__assoc_sub_state **)(a4 + 8);
              *(_QWORD *)(a4 + 8) = 0;
              v54.__state_ = v37->__state_;
              v37->__state_ = v38;
              std::future<void>::~future(&v54);
              v39 = (std::__assoc_sub_state *)(v13 + 10);
              v40 = *((unsigned int *)v13 + 26);
              v41 = *(unsigned int *)(a4 + 48);
              if ((_DWORD)v40 == -1)
              {
LABEL_65:
                if ((_DWORD)v41 != -1)
                {
LABEL_66:
                  v54.__state_ = v39;
                  ((void (*)(std::future<void> *))off_24EC58630[v41])(&v54);
                }
                goto LABEL_67;
              }
LABEL_62:
              if ((_DWORD)v41 != -1)
                goto LABEL_66;
              ((void (*)(std::future<void> *, std::__assoc_sub_state *))off_24EC58218[v40])(&v54, v39);
              *((_DWORD *)v13 + 26) = -1;
LABEL_67:
              v49 = (uint64_t *)(a2 + 32);
              v50 = (uint64_t *)v13[14];
              if (v50 != (uint64_t *)(a2 + 32))
              {
                v51 = (uint64_t *)v50[1];
                if (v51 != v49)
                {
                  v52 = *v50;
                  *(_QWORD *)(v52 + 8) = v51;
                  *(_QWORD *)v50[1] = v52;
                  v53 = *v49;
                  *(_QWORD *)(v53 + 8) = v50;
                  *v50 = v53;
                  *v49 = (uint64_t)v50;
                  v50[1] = (uint64_t)v49;
                }
              }
LABEL_70:
              *(_BYTE *)a1 = 0;
              *(_BYTE *)(a1 + 80) = 0;
              return;
            }
          }
          else
          {
            if (!*((_BYTE *)v13 + 72))
            {
              v13[8] = *(_QWORD *)(a4 + 8);
              *(_QWORD *)(a4 + 8) = 0;
              *((_BYTE *)v13 + 72) = 1;
              v39 = (std::__assoc_sub_state *)(v13 + 10);
              v40 = *((unsigned int *)v13 + 26);
              v41 = *(unsigned int *)(a4 + 48);
              if ((_DWORD)v40 == -1)
                goto LABEL_65;
              goto LABEL_62;
            }
            std::future<void>::~future(v37);
            *((_BYTE *)v13 + 72) = 0;
          }
          v39 = (std::__assoc_sub_state *)(v13 + 10);
          v40 = *((unsigned int *)v13 + 26);
          v41 = *(unsigned int *)(a4 + 48);
          if ((_DWORD)v40 == -1)
            goto LABEL_65;
          goto LABEL_62;
        }
        v8 = (uint64_t *)v13[1];
        if (!v8)
        {
          v9 = (uint64_t **)(v13 + 1);
          goto LABEL_29;
        }
      }
      else
      {
        if (v12 >= v19)
          goto LABEL_22;
LABEL_8:
        v8 = (uint64_t *)*v13;
        v9 = (uint64_t **)v13;
        if (!*v13)
          goto LABEL_29;
      }
    }
  }
  v13 = (uint64_t *)(a2 + 16);
LABEL_29:
  v23 = operator new(0x78uLL);
  v24 = v23;
  v23[2] = *(_OWORD *)a3;
  *((_QWORD *)v23 + 6) = a3[2];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *((_DWORD *)v23 + 14) = *(_DWORD *)a4;
  *((_BYTE *)v23 + 64) = 0;
  *((_BYTE *)v23 + 72) = 0;
  if (*(_BYTE *)(a4 + 16))
  {
    *((_QWORD *)v23 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    *((_BYTE *)v23 + 72) = 1;
  }
  *((_BYTE *)v23 + 80) = 0;
  *((_DWORD *)v23 + 26) = -1;
  v25 = *(unsigned int *)(a4 + 48);
  if ((_DWORD)v25 != -1)
  {
    ((void (*)(std::future<void> *))off_24EC58228[v25])(&v54);
    *((_DWORD *)v24 + 26) = v25;
  }
  *((_QWORD *)v24 + 14) = 0;
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = v13;
  *v9 = (uint64_t *)v24;
  v26 = **(_QWORD **)(a2 + 8);
  v27 = (uint64_t *)v24;
  if (v26)
  {
    *(_QWORD *)(a2 + 8) = v26;
    v27 = *v9;
  }
  sub_2231A9A8C(*(uint64_t **)(a2 + 16), v27);
  v28 = *(_QWORD *)(a2 + 24) + 1;
  *(_QWORD *)(a2 + 24) = v28;
  v29 = operator new(0x18uLL);
  v30 = *(_QWORD *)(a2 + 32);
  v29[1] = a2 + 32;
  v29[2] = v24;
  *v29 = v30;
  *(_QWORD *)(v30 + 8) = v29;
  *(_QWORD *)(a2 + 32) = v29;
  v31 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v31 + 1;
  *((_QWORD *)v24 + 14) = v29;
  if (v28 <= *(_QWORD *)a2)
    goto LABEL_70;
  v32 = *(uint64_t **)(a2 + 40);
  v33 = v32[2];
  v34 = *v32;
  *(_QWORD *)(v34 + 8) = v32[1];
  *(_QWORD *)v32[1] = v34;
  *(_QWORD *)(a2 + 48) = v31;
  operator delete(v32);
  v35 = *(_QWORD **)(v33 + 8);
  if (v35)
  {
    do
    {
      v36 = v35;
      v35 = (_QWORD *)*v35;
    }
    while (v35);
  }
  else
  {
    v42 = (_QWORD *)v33;
    do
    {
      v36 = (_QWORD *)v42[2];
      v43 = *v36 == (_QWORD)v42;
      v42 = v36;
    }
    while (!v43);
  }
  if (*(_QWORD *)(a2 + 8) == v33)
    *(_QWORD *)(a2 + 8) = v36;
  v44 = *(uint64_t **)(a2 + 16);
  --*(_QWORD *)(a2 + 24);
  sub_2231AFE60(v44, (uint64_t *)v33);
  v45 = *(_OWORD *)(v33 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v33 + 48);
  *(_OWORD *)a1 = v45;
  v46 = *(_DWORD *)(v33 + 56);
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 48) = 0;
  *(_QWORD *)(v33 + 40) = 0;
  *(_DWORD *)(a1 + 24) = v46;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(v33 + 72))
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v33 + 64);
    *(_QWORD *)(v33 + 64) = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  v47 = *(unsigned int *)(v33 + 104);
  if ((_DWORD)v47 != -1)
  {
    ((void (*)(std::future<void> *))off_24EC58228[v47])(&v54);
    *(_DWORD *)(a1 + 72) = v47;
  }
  *(_BYTE *)(a1 + 80) = 1;
  sub_223757750(v33 + 56);
  v48 = *(unsigned int *)(v33 + 104);
  if ((_DWORD)v48 != -1)
    ((void (*)(std::future<void> *, uint64_t))off_24EC58218[v48])(&v54, v33 + 80);
  *(_DWORD *)(v33 + 104) = -1;
  if (*(_BYTE *)(v33 + 72))
    std::future<void>::~future((std::future<void> *)(v33 + 64));
  if (*(char *)(v33 + 55) < 0)
    operator delete(*(void **)(v33 + 32));
  operator delete((void *)v33);
}

uint64_t sub_2237575D8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (!*(_BYTE *)(a1 + 80))
    return a1;
  sub_223757750(a1 + 24);
  v2 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC58218[v2])(&v4, a1 + 48);
  *(_DWORD *)(a1 + 72) = -1;
  if (*(_BYTE *)(a1 + 40))
    std::future<void>::~future((std::future<void> *)(a1 + 32));
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223757674(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  kdebug_trace();
  sub_2237551C4(a1);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80));
  v2 = *(_QWORD **)(a1 + 144);
  v3 = (_QWORD *)(a1 + 152);
  if (v2 != v3)
  {
    do
    {
      sub_223757750((uint64_t)(v2 + 7));
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return kdebug_trace();
}

uint64_t sub_223757740(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

void sub_223757750(uint64_t a1)
{
  std::future<void> *v1;
  uint64_t v2;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    v1 = (std::future<void> *)(a1 + 8);
    if (v2)
      std::future<void>::get(v1);
  }
}

uint64_t sub_223757A34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223757AB4(int64x2_t *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  unint64_t v62;
  int64x2_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  __int128 *v79;
  __int128 *v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t *v86;
  int64_t v87;
  __int128 *v88;
  __int128 v89;
  unint64_t v90;
  int64_t v91;
  unint64_t v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int64x2_t *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  _QWORD *v105;

  v3 = a1[2].u64[0];
  v4 = a1->i64[1];
  v5 = a1[1].i64[0];
  v6 = (uint64_t *)(v4 + 8 * (v3 / 0xAA));
  if (v5 != v4)
  {
    v7 = *v6 + 24 * (v3 % 0xAA);
    v101 = a1;
    if (a3 != v7)
      goto LABEL_3;
LABEL_8:
    v8 = *v6;
    goto LABEL_9;
  }
  v7 = 0;
  v101 = a1;
  if (!a3)
    goto LABEL_8;
LABEL_3:
  v8 = *v6;
  v9 = 170 * (a2 - v6) - 0x5555555555555555 * ((a3 - *a2) >> 3) + 0x5555555555555555 * ((uint64_t)(v7 - *v6) >> 3);
  if (!v9)
  {
LABEL_9:
    v12 = v7;
    v11 = (uint64_t *)(v4 + 8 * (v3 / 0xAA));
    goto LABEL_10;
  }
  v10 = 170 * (a2 - v6) - 0x5555555555555555 * ((a3 - *a2) >> 3);
  if (v10 < 1)
  {
    v36 = 169 - v10;
    v11 = &v6[-(v36 / 0xAA)];
    v8 = *v11;
    v12 = *v11 + 24 * (170 * (v36 / 0xAA) - v36) + 4056;
    v13 = a1[2].i64[1];
    if (v9 > (unint64_t)(v13 - 1) >> 1)
      goto LABEL_40;
  }
  else
  {
    v11 = &v6[v10 / 0xAAuLL];
    v8 = *v11;
    v12 = *v11 + 24 * (v10 % 0xAAuLL);
    v13 = a1[2].i64[1];
    if (v9 > (unint64_t)(v13 - 1) >> 1)
    {
LABEL_40:
      v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v8) >> 3);
      if ((uint64_t)(v12 - v8) < -23)
      {
        v64 = 168 - v37;
        v65 = 168 - v37;
        v39 = v11;
        v40 = &v11[-((168 - v37) / 0xAA)];
        v41 = *v40;
        v42 = *v40 + 24 * (170 * (v65 / 0xAA) - v64) + 4056;
      }
      else
      {
        v38 = v37 + 1;
        v39 = v11;
        v40 = &v11[(v37 + 1) / 0xAA];
        v41 = *v40;
        v42 = *v40 + 24 * (v38 % 0xAA);
      }
      v66 = v13 + v3;
      v67 = (uint64_t *)(v4 + 8 * (v66 / 0xAA));
      if (v5 == v4)
      {
        v100 = 0;
        if (v40 != v67)
          goto LABEL_81;
      }
      else
      {
        v100 = *v67 + 24 * (v66 % 0xAA);
        if (v40 != v67)
        {
LABEL_81:
          v68 = v41 + 4080;
          if (v41 + 4080 != v42)
          {
            while (1)
            {
              v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v12 + 4080) >> 3);
              if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - v42) >> 3)) < v69)
                v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - v42) >> 3);
              if (v69)
              {
                v70 = v42 + 24 * v69;
                do
                {
                  if (*(char *)(v12 + 23) < 0)
                    operator delete(*(void **)v12);
                  v71 = *(_OWORD *)v42;
                  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v42 + 16);
                  *(_OWORD *)v12 = v71;
                  v12 += 24;
                  *(_BYTE *)(v42 + 23) = 0;
                  *(_BYTE *)v42 = 0;
                  v42 += 24;
                }
                while (v42 != v70);
                v42 = v70;
              }
              if (v42 == v68)
                break;
              v72 = v39[1];
              ++v39;
              v8 = v72;
              v12 = v72;
            }
            v8 = *v39;
            if (*v39 + 4080 == v12)
            {
              v73 = v39[1];
              ++v39;
              v8 = v73;
              v12 = v73;
            }
          }
          v74 = v40 + 1;
          if (v40 + 1 != v67)
          {
            v103 = v67;
            do
            {
              while (1)
              {
                v75 = 0;
                v105 = v74;
                v76 = *v74;
                while (1)
                {
                  v77 = v76 + 24 * v75;
                  v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v12 + 4080) >> 3);
                  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((4080 - 24 * v75) >> 3)) < v78)
                    v78 = 0xAAAAAAAAAAAAAAABLL * ((4080 - 24 * v75) >> 3);
                  if (v78)
                  {
                    v79 = (__int128 *)(v77 + 24 * v78);
                    v80 = (__int128 *)(v76 + 24 * v75);
                    do
                    {
                      if (*(char *)(v12 + 23) < 0)
                        operator delete(*(void **)v12);
                      v81 = *v80;
                      *(_QWORD *)(v12 + 16) = *((_QWORD *)v80 + 2);
                      *(_OWORD *)v12 = v81;
                      v12 += 24;
                      *((_BYTE *)v80 + 23) = 0;
                      *(_BYTE *)v80 = 0;
                      v80 = (__int128 *)((char *)v80 + 24);
                    }
                    while (v80 != v79);
                  }
                  else
                  {
                    v79 = (__int128 *)(v76 + 24 * v75);
                  }
                  v75 -= 0x5555555555555555 * (((uint64_t)v79 - v77) >> 3);
                  if (v75 == 170)
                    break;
                  v82 = v39[1];
                  ++v39;
                  v8 = v82;
                  v12 = v82;
                }
                v8 = *v39;
                if (*v39 + 4080 == v12)
                  break;
                v67 = v103;
                v74 = v105 + 1;
                if (v105 + 1 == v103)
                  goto LABEL_110;
              }
              v83 = v39[1];
              ++v39;
              v8 = v83;
              v12 = v83;
              v67 = v103;
              v74 = v105 + 1;
            }
            while (v105 + 1 != v103);
          }
LABEL_110:
          v84 = (__int128 *)*v67;
          if (*v67 == v100)
          {
            v86 = (uint64_t *)v101;
            goto LABEL_139;
          }
          v85 = *v39;
          v86 = (uint64_t *)v101;
          while (1)
          {
            v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - v12 + 4080) >> 3);
            if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - (_QWORD)v84) >> 3)) < v87)
              v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - (_QWORD)v84) >> 3);
            if (v87)
            {
              v88 = (__int128 *)((char *)v84 + 24 * v87);
              do
              {
                if (*(char *)(v12 + 23) < 0)
                  operator delete(*(void **)v12);
                v89 = *v84;
                *(_QWORD *)(v12 + 16) = *((_QWORD *)v84 + 2);
                *(_OWORD *)v12 = v89;
                v12 += 24;
                *((_BYTE *)v84 + 23) = 0;
                *(_BYTE *)v84 = 0;
                v84 = (__int128 *)((char *)v84 + 24);
              }
              while (v84 != v88);
              v84 = v88;
            }
            if (v84 == (__int128 *)v100)
              break;
            v90 = v39[1];
            ++v39;
            v85 = v90;
            v12 = v90;
          }
LABEL_135:
          if (*v39 + 4080 == v12)
          {
            v12 = v39[1];
            if (*(char *)(v12 + 23) < 0)
              goto LABEL_140;
            goto LABEL_141;
          }
LABEL_139:
          if (*(char *)(v12 + 23) < 0)
LABEL_140:
            operator delete(*(void **)v12);
LABEL_141:
          v96 = v86[1];
          v95 = v86[2];
          if (v95 == v96)
            v97 = 0;
          else
            v97 = 170 * ((v95 - v96) >> 3) - 1;
          v99 = v86[4];
          v98 = v86[5];
          v86[5] = v98 - 1;
          if ((unint64_t)(v97 - (v98 + v99) + 1) >= 0x154)
          {
            operator delete(*(void **)(v95 - 8));
            v86[2] -= 8;
          }
          return;
        }
      }
      if (v42 == v100)
      {
        v86 = (uint64_t *)v101;
        if ((*(char *)(v12 + 23) & 0x80000000) == 0)
          goto LABEL_141;
        goto LABEL_140;
      }
      v86 = (uint64_t *)v101;
      while (1)
      {
        v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v12 + 4080) >> 3);
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - v42) >> 3)) < v91)
          v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - v42) >> 3);
        if (v91)
        {
          v92 = v42 + 24 * v91;
          do
          {
            if (*(char *)(v12 + 23) < 0)
              operator delete(*(void **)v12);
            v93 = *(_OWORD *)v42;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v42 + 16);
            *(_OWORD *)v12 = v93;
            v12 += 24;
            *(_BYTE *)(v42 + 23) = 0;
            *(_BYTE *)v42 = 0;
            v42 += 24;
          }
          while (v42 != v92);
          v42 = v92;
        }
        if (v42 == v100)
          break;
        v94 = v39[1];
        ++v39;
        v8 = v94;
        v12 = v94;
      }
      goto LABEL_135;
    }
  }
LABEL_10:
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v8) >> 3);
  if ((uint64_t)(v12 - v8) < -23)
  {
    v28 = 168 - v14;
    v16 = (unint64_t *)&v11[-(v28 / 0xAA)];
    v17 = *v16;
    v18 = *v16 + 24 * (170 * (v28 / 0xAA) - v28) + 4056;
    if (v6 != v11)
      goto LABEL_12;
  }
  else
  {
    v15 = v14 + 1;
    v16 = (unint64_t *)&v11[v15 / 0xAA];
    v17 = *v16;
    v18 = *v16 + 24 * (v15 % 0xAA);
    if (v6 != v11)
    {
LABEL_12:
      v104 = v6;
      if (v8 != v12)
      {
        v19 = v7;
        while (1)
        {
          v20 = v11;
          v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v17) >> 3);
          v22 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v8) >> 3)) >= v21
              ? v21
              : 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v8) >> 3);
          if (v22)
          {
            v23 = v12 - 24;
            v24 = -24 * v22;
            do
            {
              v26 = v18 - 24;
              if (*(char *)(v18 - 1) < 0)
                operator delete(*(void **)v26);
              v25 = *(_OWORD *)v23;
              *(_QWORD *)(v26 + 16) = *(_QWORD *)(v23 + 16);
              *(_OWORD *)v26 = v25;
              *(_BYTE *)(v23 + 23) = 0;
              *(_BYTE *)v23 = 0;
              v23 -= 24;
              v18 = v26;
              v24 += 24;
            }
            while (v24);
          }
          else
          {
            v26 = v18;
          }
          v12 -= 24 * v22;
          if (v12 == v8)
            break;
          v27 = *--v16;
          v17 = v27;
          v18 = v27 + 4080;
          v11 = v20;
        }
        v17 = *v16;
        v11 = v20;
        v7 = v19;
        if (*v16 + 4080 == v26)
        {
          v43 = v16[1];
          ++v16;
          v17 = v43;
          v18 = v43;
        }
        else
        {
          v18 = v26;
        }
        v6 = v104;
      }
      v44 = v11 - 1;
      if (v11 - 1 != v6)
      {
        v102 = v7;
        do
        {
          while (1)
          {
            v46 = *v44;
            v47 = *v44 + 4080;
            while (1)
            {
              v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v17) >> 3);
              v49 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3)) >= v48
                  ? v48
                  : 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3);
              if (v49)
              {
                v50 = v47 - 24;
                v51 = -24 * v49;
                do
                {
                  v53 = v18 - 24;
                  if (*(char *)(v18 - 1) < 0)
                    operator delete(*(void **)v53);
                  v52 = *(_OWORD *)v50;
                  *(_QWORD *)(v53 + 16) = *(_QWORD *)(v50 + 16);
                  *(_OWORD *)v53 = v52;
                  *(_BYTE *)(v50 + 23) = 0;
                  *(_BYTE *)v50 = 0;
                  v50 -= 24;
                  v18 = v53;
                  v51 += 24;
                }
                while (v51);
              }
              else
              {
                v53 = v18;
              }
              v47 -= 24 * v49;
              if (v47 == v46)
                break;
              v54 = *--v16;
              v17 = v54;
              v18 = v54 + 4080;
            }
            v17 = *v16;
            if (*v16 + 4080 == v53)
              break;
            v18 = v53;
            v7 = v102;
            v6 = v104;
            if (--v44 == v104)
              goto LABEL_62;
          }
          v45 = v16[1];
          ++v16;
          v17 = v45;
          v18 = v45;
          v7 = v102;
          v6 = v104;
          --v44;
        }
        while (v44 != v104);
      }
LABEL_62:
      v55 = *v6 + 4080;
      if (v55 != v7)
      {
        while (1)
        {
          v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v17) >> 3);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - v7) >> 3)) >= v56)
            v57 = v56;
          else
            v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - v7) >> 3);
          if (v57)
          {
            v58 = v18 - 24;
            v59 = v55 - 24;
            v60 = -24 * v57;
            do
            {
              if (*(char *)(v58 + 23) < 0)
                operator delete(*(void **)v58);
              v61 = *(_OWORD *)v59;
              *(_QWORD *)(v58 + 16) = *(_QWORD *)(v59 + 16);
              *(_OWORD *)v58 = v61;
              v58 -= 24;
              *(_BYTE *)(v59 + 23) = 0;
              *(_BYTE *)v59 = 0;
              v59 -= 24;
              v60 += 24;
            }
            while (v60);
          }
          v55 -= 24 * v57;
          if (v55 == v7)
            break;
          v62 = *--v16;
          v17 = v62;
          v18 = v62 + 4080;
        }
      }
      goto LABEL_73;
    }
  }
  if (v7 != v12)
  {
    while (1)
    {
      v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v17) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v7) >> 3)) >= v29)
        v30 = v29;
      else
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v7) >> 3);
      if (v30)
      {
        v31 = v18 - 24;
        v32 = v12 - 24;
        v33 = -24 * v30;
        do
        {
          if (*(char *)(v31 + 23) < 0)
            operator delete(*(void **)v31);
          v34 = *(_OWORD *)v32;
          *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
          *(_OWORD *)v31 = v34;
          v31 -= 24;
          *(_BYTE *)(v32 + 23) = 0;
          *(_BYTE *)v32 = 0;
          v32 -= 24;
          v33 += 24;
        }
        while (v33);
      }
      v12 -= 24 * v30;
      if (v12 == v7)
        break;
      v35 = *--v16;
      v17 = v35;
      v18 = v35 + 4080;
    }
  }
LABEL_73:
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v63 = vaddq_s64(v101[2], (int64x2_t)xmmword_22464C790);
  v101[2] = v63;
  if (v63.i64[0] >= 0x154uLL)
  {
    operator delete(*(void **)v101->i64[1]);
    v101->i64[1] += 8;
    v101[2].i64[0] -= 170;
  }
}

double sub_223758478(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 *v11;
  uint64_t v12;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  int v22;
  std::__fs::filesystem::path::__string_view v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  void **v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  std::__fs::filesystem::path::__string_view v32;
  int v33;
  __n128 *v34;
  __n128 *v35;
  __n128 *v36;
  __n128 *v37;
  char v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  __n128 *v42;
  std::__fs::filesystem::path::__string_view v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  std::__fs::filesystem::path::__string_view v50;
  int v51;
  char v52;
  __n128 *v53;
  unint64_t v54;
  unint64_t v55;
  __n128 v56;
  unint64_t v57;
  unint64_t v58;
  const std::__fs::filesystem::path *v59;
  char v60;
  unint64_t v61;
  std::string::size_type size;
  std::__fs::filesystem::path::__string_view v64;
  int v65;
  __n128 *v66;
  char v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  std::__fs::filesystem::path::__string_view v72;
  int v73;
  __n128 *v74;
  __n128 *v75;
  __n128 v76;
  int v77;
  __n128 v78;
  BOOL v79;
  BOOL v80;
  __n128 v81;
  std::string::size_type v82;
  char v83;
  signed __int8 v85;
  std::__fs::filesystem::path::__string_view v86;
  int v87;
  char v88;
  __n128 *v89;
  __n128 *v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  __n128 *v95;
  const std::string_view::value_type *v96;
  const std::string_view::value_type *v97;
  int v98;
  std::__fs::filesystem::path::__string_view v99;
  int v100;
  char v101;
  char v102;
  int v104;
  std::__fs::filesystem::path::__string_view v105;
  int v106;
  __n128 *v107;
  __n128 *v108;
  unint64_t v109;
  unint64_t v110;
  char v111;
  __n128 *v113;
  const std::string_view::value_type *v114;
  const std::string_view::value_type *v115;
  int v116;
  std::__fs::filesystem::path::__string_view v117;
  int v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  __n128 v122;
  unint64_t v123;
  unint64_t v124;
  __n128 *v125;
  unint64_t v126;
  unint64_t v127;
  char v128;
  __n128 *v130;
  const std::string_view::value_type *v131;
  const std::string_view::value_type *v132;
  int v133;
  std::__fs::filesystem::path::__string_view v134;
  int v135;
  char v136;
  __n128 *v137;
  unint64_t v138;
  unint64_t v139;
  char v140;
  __n128 *v142;
  const std::string_view::value_type *v143;
  const std::string_view::value_type *v144;
  int v145;
  std::__fs::filesystem::path::__string_view v146;
  int v147;
  char v148;
  __n128 *v149;
  void **v150;
  __n128 *v151;
  __n128 v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  char v156;
  int v158;
  std::__fs::filesystem::path::__string_view v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  __n128 *v164;
  uint64_t v165;
  __n128 *v166;
  __n128 *v167;
  __n128 *v168;
  unint64_t v169;
  unint64_t v170;
  char v171;
  int v173;
  std::__fs::filesystem::path::__string_view v174;
  int v175;
  uint64_t v176;
  char v177;
  char v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v184;
  const std::string_view::value_type *v185;
  const std::string_view::value_type *v186;
  int v187;
  std::__fs::filesystem::path::__string_view v188;
  int v189;
  char *v190;
  int v191;
  int64_t v192;
  __int128 v193;
  int64_t v194;
  uint64_t v195;
  __n128 *v196;
  char v197;
  int v199;
  std::__fs::filesystem::path::__string_view v200;
  int v201;
  __n128 *v202;
  char v203;
  __n128 *v205;
  int v206;
  __n128 *v207;
  __n128 *v208;
  uint64_t v209;
  std::__fs::filesystem::path::__string_view v210;
  int v211;
  __n128 *v212;
  __n128 v213;
  char v214;
  __n128 *v215;
  void **v216;
  void **v217;
  __n128 v218;
  uint64_t v219;
  char v220;
  int v222;
  std::__fs::filesystem::path::__string_view v223;
  int v224;
  std::__fs::filesystem::path::__string_view v226;
  int v227;
  int v228;
  int64_t v229;
  __n128 *v230;
  uint64_t v232;
  __n128 *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __n128 *v237;
  __n128 *v238;
  uint64_t v239;
  __n128 *v240;
  uint64_t v241;
  char v242;
  int v244;
  std::__fs::filesystem::path::__string_view v245;
  int v246;
  char v247;
  __int8 v248;
  __n128 *v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  __n128 *v253;
  char v254;
  int v256;
  std::__fs::filesystem::path::__string_view v257;
  int v258;
  __n128 v259;
  __n128 *v260;
  void **v261;
  void **v262;
  __n128 v263;
  char v264;
  std::__fs::filesystem::path::__string_view v266;
  int v267;
  int v268;
  __n128 *v269;
  __int8 *v270;
  int v271;
  char *v272;
  __n128 *v273;
  unint64_t v274;
  unint64_t v275;
  char v276;
  int v278;
  std::__fs::filesystem::path::__string_view v279;
  int v280;
  char *v281;
  void **v282;
  char v283;
  int v285;
  std::__fs::filesystem::path::__string_view v286;
  int v287;
  std::__fs::filesystem::path *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  __n128 *v294;
  unint64_t v295;
  unint64_t v297;
  uint64_t v298;
  int64_t v299;
  unsigned __int8 v300;
  signed __int128 v301;
  signed __int128 v302;
  __n128 v303;
  __n128 v304;
  __n128 v305;
  __n128 v306;
  std::__fs::filesystem::path v307;
  _QWORD v308[2];
  unint64_t v309;
  uint64_t v310;

  v310 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v291 = (uint64_t)&a2[-6];
  v293 = (uint64_t)&a2[-3];
  v289 = (std::__fs::filesystem::path *)&a2[-2];
  v290 = (uint64_t)&a2[-9];
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * (a2 - v7);
    switch(v9)
    {
      case 0:
      case 1:
        return v81.n128_f64[0];
      case 2:
        v154 = a2[-3].n128_u64[0];
        v155 = a2[-3].n128_u64[1];
        v156 = -1;
        if ((signed __int128)__PAIR128__(v155, v154) >= *(_OWORD *)v7)
          v156 = 1;
        if (v155 == v7->n128_u64[1] && v154 == v7->n128_u64[0])
        {
          v158 = v7[2].n128_i8[7];
          if (v158 >= 0)
            v159.__data_ = (const std::string_view::value_type *)&v7[1];
          else
            v159.__data_ = (const std::string_view::value_type *)v7[1].n128_u64[0];
          if (v158 >= 0)
            v159.__size_ = v7[2].n128_u8[7];
          else
            v159.__size_ = v7[1].n128_u64[1];
          v160 = std::__fs::filesystem::path::__compare(v289, v159);
          v156 = -1;
          if (v160 >= 0)
            v156 = 1;
          if (!v160)
            v156 = 0;
        }
        if (v156 < 0)
        {
          v161 = v7->n128_u64[0];
          v162 = v7->n128_u64[1];
          *v7 = a2[-3];
          a2[-3].n128_u64[0] = v161;
          a2[-3].n128_u64[1] = v162;
          v81 = v7[1];
          v307.__pn_.__r_.__value_.__r.__words[0] = v7[2].n128_u64[0];
          v163 = a2[-1].n128_u64[0];
          v7[1] = a2[-2];
          v7[2].n128_u64[0] = v163;
          a2[-1].n128_u64[0] = v307.__pn_.__r_.__value_.__r.__words[0];
          a2[-2] = v81;
        }
        return v81.n128_f64[0];
      case 3:
        v81.n128_u64[0] = sub_223759930(v7, v7[3].n128_u64, v293).n128_u64[0];
        return v81.n128_f64[0];
      case 4:
        v81.n128_u64[0] = sub_223759FCC(v7, v7 + 3, (uint64_t)&v7[6], v293).n128_u64[0];
        return v81.n128_f64[0];
      case 5:
        v81.n128_u64[0] = sub_22375A1D4(v7, v7 + 3, (uint64_t)&v7[6], (uint64_t)&v7[9], v293).n128_u64[0];
        return v81.n128_f64[0];
      default:
        if (v8 <= 1151)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != a2)
            {
              v164 = v7 + 3;
              if (&v7[3] != a2)
              {
                v165 = 0;
                v166 = v7;
                do
                {
                  v168 = v164;
                  v170 = v166[3].n128_u64[0];
                  v169 = v166[3].n128_u64[1];
                  if ((signed __int128)__PAIR128__(v169, v170) >= *(_OWORD *)v166)
                    v171 = 1;
                  else
                    v171 = -1;
                  if (v169 == v166->n128_u64[1] && v170 == v166->n128_u64[0])
                  {
                    v173 = v166[2].n128_i8[7];
                    v174.__data_ = v173 >= 0
                                 ? (const std::string_view::value_type *)&v166[1]
                                 : (const std::string_view::value_type *)v166[1].n128_u64[0];
                    v174.__size_ = v173 >= 0 ? v166[2].n128_u8[7] : v166[1].n128_u64[1];
                    v175 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v166[4], v174);
                    v171 = v175 >= 0 ? 1 : -1;
                    if (!v175)
                      v171 = 0;
                  }
                  if (v171 < 0)
                  {
                    v303 = *v168;
                    v307 = *(std::__fs::filesystem::path *)v166[4].n128_u8;
                    v166[4].n128_u64[0] = 0;
                    v166[4].n128_u64[1] = 0;
                    v166[5].n128_u64[0] = 0;
                    v176 = v165;
                    do
                    {
                      v179 = v176;
                      v180 = (char *)v7 + v176;
                      *(__n128 *)((char *)v7 + v176 + 48) = *(__n128 *)((char *)v7 + v176);
                      v181 = (uint64_t)&v7[4] + v176;
                      if (v7[5].n128_i8[v176 + 7] < 0)
                        operator delete(*(void **)v181);
                      *(_OWORD *)v181 = *((_OWORD *)v180 + 1);
                      *(_QWORD *)(v181 + 16) = *((_QWORD *)v180 + 4);
                      v180[39] = 0;
                      v180[16] = 0;
                      if (!v179)
                      {
                        *v7 = v303;
                        goto LABEL_329;
                      }
                      v182 = (char *)v7 + v179;
                      if (*(_OWORD *)&v303 >= *(__int128 *)((char *)&v7[-3] + v179))
                        v178 = 1;
                      else
                        v178 = -1;
                      if (v303.n128_u64[1] == *(_QWORD *)((char *)&v7[-2] + v179 - 8)
                        && v303.n128_u64[0] == *(unint64_t *)((char *)v7[-3].n128_u64 + v179))
                      {
                        v186 = (const std::string_view::value_type *)*((_QWORD *)v182 - 4);
                        v184 = v182 - 32;
                        v185 = v186;
                        v187 = v184[23];
                        if (v187 >= 0)
                          v188.__data_ = v184;
                        else
                          v188.__data_ = v185;
                        if (v187 >= 0)
                          v188.__size_ = v184[23];
                        else
                          v188.__size_ = *((_QWORD *)v184 + 1);
                        v189 = std::__fs::filesystem::path::__compare(&v307, v188);
                        if (v189 >= 0)
                          v177 = 1;
                        else
                          v177 = -1;
                        if (v189)
                          v178 = v177;
                        else
                          v178 = 0;
                      }
                      v176 = v179 - 48;
                    }
                    while (v178 < 0);
                    v190 = (char *)v7 + v176;
                    v191 = v190[87];
                    *((__n128 *)v190 + 3) = v303;
                    if (v191 < 0)
                      operator delete(*((void **)v190 + 8));
LABEL_329:
                    v167 = (__n128 *)((char *)v7 + v179);
                    v81 = *(__n128 *)&v307.__pn_.__r_.__value_.__l.__data_;
                    v167[2].n128_u64[0] = v307.__pn_.__r_.__value_.__r.__words[2];
                    v167[1] = v81;
                  }
                  v164 = v168 + 3;
                  v165 += 48;
                  v166 = v168;
                }
                while (&v168[3] != a2);
              }
            }
          }
          else if (v7 != a2)
          {
            v269 = v7 + 3;
            if (&v7[3] != a2)
            {
              v270 = &v7[5].n128_i8[7];
              do
              {
                v273 = v269;
                v275 = a1[3].n128_u64[0];
                v274 = a1[3].n128_u64[1];
                if ((signed __int128)__PAIR128__(v274, v275) >= *(_OWORD *)a1)
                  v276 = 1;
                else
                  v276 = -1;
                if (v274 == a1->n128_u64[1] && v275 == a1->n128_u64[0])
                {
                  v278 = a1[2].n128_i8[7];
                  v279.__data_ = v278 >= 0
                               ? (const std::string_view::value_type *)&a1[1]
                               : (const std::string_view::value_type *)a1[1].n128_u64[0];
                  v279.__size_ = v278 >= 0 ? a1[2].n128_u8[7] : a1[1].n128_u64[1];
                  v280 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&a1[4], v279);
                  v276 = v280 >= 0 ? 1 : -1;
                  if (!v280)
                    v276 = 0;
                }
                if (v276 < 0)
                {
                  v306 = *v273;
                  v307 = *(std::__fs::filesystem::path *)a1[4].n128_u8;
                  a1[4].n128_u64[0] = 0;
                  a1[4].n128_u64[1] = 0;
                  a1[5].n128_u64[0] = 0;
                  v281 = v270;
                  do
                  {
                    *(_OWORD *)(v281 - 39) = *(_OWORD *)(v281 - 87);
                    v282 = (void **)(v281 - 23);
                    if (*v281 < 0)
                      operator delete(*v282);
                    *(_OWORD *)v282 = *(_OWORD *)(v281 - 71);
                    *(_QWORD *)(v281 - 7) = *(_QWORD *)(v281 - 55);
                    *(v281 - 48) = 0;
                    *(v281 - 71) = 0;
                    if (*(_OWORD *)&v306 >= *(_OWORD *)(v281 - 135))
                      v283 = 1;
                    else
                      v283 = -1;
                    if (v306.n128_u64[1] == *(_QWORD *)(v281 - 127) && v306.n128_u64[0] == *(_QWORD *)(v281 - 135))
                    {
                      v285 = *(v281 - 96);
                      v286.__data_ = v285 >= 0 ? v281 - 119 : *(const std::string_view::value_type **)(v281 - 119);
                      v286.__size_ = v285 >= 0 ? *(v281 - 96) : *(_QWORD *)(v281 - 111);
                      v287 = std::__fs::filesystem::path::__compare(&v307, v286);
                      v283 = v287 >= 0 ? 1 : -1;
                      if (!v287)
                        v283 = 0;
                    }
                    v281 -= 48;
                  }
                  while (v283 < 0);
                  *(__n128 *)(v281 - 39) = v306;
                  v271 = *v281;
                  v272 = v281 - 23;
                  if (v271 < 0)
                    operator delete(*(void **)v272);
                  v81 = *(__n128 *)&v307.__pn_.__r_.__value_.__l.__data_;
                  *((_QWORD *)v272 + 2) = *((_QWORD *)&v307.__pn_.__r_.__value_.__l + 2);
                  *(__n128 *)v272 = v81;
                }
                v269 = v273 + 3;
                v270 += 48;
                a1 = v273;
              }
              while (&v273[3] != a2);
            }
          }
          return v81.n128_f64[0];
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v294 = a2;
            v299 = (unint64_t)(v9 - 2) >> 1;
            v192 = v299;
            do
            {
              v194 = v192;
              if (v299 >= v192)
              {
                v195 = (2 * v192) | 1;
                v196 = &a1[3 * v195];
                if (2 * v192 + 2 < v9)
                {
                  if (*(__int128 *)v196 >= *(_OWORD *)&v196[3])
                    v197 = 1;
                  else
                    v197 = -1;
                  if (v196->n128_u64[1] == v196[3].n128_u64[1] && v196->n128_u64[0] == v196[3].n128_u64[0])
                  {
                    v199 = v196[5].n128_i8[7];
                    v200.__data_ = v199 >= 0
                                 ? (const std::string_view::value_type *)&v196[4]
                                 : (const std::string_view::value_type *)v196[4].n128_u64[0];
                    v200.__size_ = v199 >= 0 ? v196[5].n128_u8[7] : v196[4].n128_u64[1];
                    v201 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&a1[3 * v195 + 1], v200);
                    v197 = v201 >= 0 ? 1 : -1;
                    if (!v201)
                      v197 = 0;
                  }
                  if (v197 < 0)
                  {
                    v196 += 3;
                    v195 = 2 * v194 + 2;
                  }
                }
                v202 = &a1[3 * v194];
                if (*(__int128 *)v196 >= *(_OWORD *)v202)
                  v203 = 1;
                else
                  v203 = -1;
                if (v196->n128_u64[1] == v202->n128_u64[1] && v196->n128_u64[0] == v202->n128_u64[0])
                {
                  v205 = &a1[3 * v194];
                  v206 = v202[2].n128_i8[7];
                  v208 = (__n128 *)v205[1].n128_u64[0];
                  v209 = v205[1].n128_i64[1];
                  v207 = v205 + 1;
                  v210.__data_ = (const std::string_view::value_type *)(v206 >= 0 ? v207 : v208);
                  v210.__size_ = v206 >= 0 ? v202[2].n128_u8[7] : v209;
                  v211 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v196[1], v210);
                  v203 = v211 >= 0 ? 1 : -1;
                  if (!v211)
                    v203 = 0;
                }
                if ((v203 & 0x80) == 0)
                {
                  v304 = *v202;
                  v212 = &a1[3 * v194];
                  v213 = v212[1];
                  v307.__pn_.__r_.__value_.__r.__words[2] = v212[2].n128_u64[0];
                  *(__n128 *)&v307.__pn_.__r_.__value_.__l.__data_ = v213;
                  v212[1].n128_u64[0] = 0;
                  v212[1].n128_u64[1] = 0;
                  v212[2].n128_u64[0] = 0;
                  do
                  {
                    v215 = v196;
                    *v202 = *v196;
                    v216 = (void **)&v202[1];
                    if (v202[2].n128_i8[7] < 0)
                      operator delete(*v216);
                    v217 = (void **)&v196[1];
                    v218 = v196[1];
                    v202[2].n128_u64[0] = v196[2].n128_u64[0];
                    *(__n128 *)v216 = v218;
                    v196[2].n128_u8[7] = 0;
                    v196[1].n128_u8[0] = 0;
                    if (v299 < v195)
                    {
                      *v196 = v304;
                      goto LABEL_382;
                    }
                    v219 = (2 * v195) | 1;
                    v196 = &a1[3 * v219];
                    v195 = 2 * v195 + 2;
                    if (v195 >= v9)
                    {
                      v195 = v219;
                    }
                    else
                    {
                      if (*(__int128 *)v196 >= *(_OWORD *)&v196[3])
                        v220 = 1;
                      else
                        v220 = -1;
                      if (v196->n128_u64[1] == v196[3].n128_u64[1] && v196->n128_u64[0] == v196[3].n128_u64[0])
                      {
                        v222 = v196[5].n128_i8[7];
                        v223.__data_ = v222 >= 0
                                     ? (const std::string_view::value_type *)&v196[4]
                                     : (const std::string_view::value_type *)v196[4].n128_u64[0];
                        v223.__size_ = v222 >= 0 ? v196[5].n128_u8[7] : v196[4].n128_u64[1];
                        v224 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&a1[3 * v219 + 1], v223);
                        v220 = v224 >= 0 ? 1 : -1;
                        if (!v224)
                          v220 = 0;
                      }
                      if (v220 < 0)
                        v196 += 3;
                      else
                        v195 = v219;
                    }
                    if (*(_OWORD *)v196 >= *(_OWORD *)&v304)
                      v214 = 1;
                    else
                      v214 = -1;
                    if (v196->n128_u64[1] == v304.n128_u64[1] && v196->n128_u64[0] == v304.n128_u64[0])
                    {
                      v226.__data_ = (v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                   ? (const std::string_view::value_type *)&v307
                                   : (const std::string_view::value_type *)v307.__pn_.__r_.__value_.__r.__words[0];
                      v226.__size_ = (v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                   ? HIBYTE(v307.__pn_.__r_.__value_.__r.__words[2])
                                   : v307.__pn_.__r_.__value_.__l.__size_;
                      v227 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v196[1], v226);
                      v214 = v227 >= 0 ? 1 : -1;
                      if (!v227)
                        v214 = 0;
                    }
                    v202 = v215;
                  }
                  while ((v214 & 0x80) == 0);
                  v228 = v215[2].n128_i8[7];
                  *v215 = v304;
                  if (v228 < 0)
                    operator delete(*v217);
LABEL_382:
                  v193 = *(_OWORD *)&v307.__pn_.__r_.__value_.__l.__data_;
                  v215[2].n128_u64[0] = v307.__pn_.__r_.__value_.__r.__words[2];
                  *(_OWORD *)v217 = v193;
                }
              }
              v192 = v194 - 1;
            }
            while (v194);
            v229 = v8 / 0x30uLL;
            v230 = v294;
            do
            {
              v232 = 0;
              v233 = v230;
              v295 = a1->n128_u64[0];
              v297 = a1->n128_u64[1];
              v234 = a1[1].n128_u64[0];
              v308[0] = a1[1].n128_u64[1];
              *(_QWORD *)((char *)v308 + 7) = *(unint64_t *)((char *)&a1[1].n128_u64[1] + 7);
              v300 = a1[2].n128_u8[7];
              a1[1].n128_u64[1] = 0;
              a1[2].n128_u64[0] = 0;
              v235 = v229 - 2;
              v292 = v234;
              if (v229 < 2)
                v235 = v229 - 1;
              v236 = v235 >> 1;
              v237 = a1;
              a1[1].n128_u64[0] = 0;
              do
              {
                v239 = v232 + 1;
                v240 = &v237[3 * v232 + 3];
                v241 = (2 * v232) | 1;
                v232 = 2 * v232 + 2;
                if (v232 >= v229)
                {
                  *v237 = *v240;
                  v238 = v237 + 1;
                  v232 = v241;
                }
                else
                {
                  v242 = -1;
                  if (*(__int128 *)v240 >= *(_OWORD *)&v240[3])
                    v242 = 1;
                  if (v240->n128_u64[1] == v240[3].n128_u64[1] && v240->n128_u64[0] == v240[3].n128_u64[0])
                  {
                    v244 = v240[5].n128_i8[7];
                    if (v244 >= 0)
                      v245.__data_ = (const std::string_view::value_type *)&v240[4];
                    else
                      v245.__data_ = (const std::string_view::value_type *)v240[4].n128_u64[0];
                    if (v244 >= 0)
                      v245.__size_ = v240[5].n128_u8[7];
                    else
                      v245.__size_ = v240[4].n128_u64[1];
                    v246 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v237[3 * v239 + 1], v245);
                    v247 = -1;
                    if (v246 >= 0)
                      v247 = 1;
                    if (v246)
                      v242 = v247;
                    else
                      v242 = 0;
                    v248 = v237[2].n128_i8[7];
                  }
                  else
                  {
                    v248 = 0;
                  }
                  if (v242 < 0)
                    v240 += 3;
                  else
                    v232 = v241;
                  *v237 = *v240;
                  v238 = v237 + 1;
                  if (v248 < 0)
                    operator delete((void *)v238->n128_u64[0]);
                }
                v237 = v240;
                v81 = v240[1];
                v238[1].n128_u64[0] = v240[2].n128_u64[0];
                *v238 = v81;
                v240[2].n128_u8[7] = 0;
                v240[1].n128_u8[0] = 0;
              }
              while (v232 <= v236);
              v230 = v233 - 3;
              if (v240 == &v233[-3])
              {
                v240->n128_u64[0] = v295;
                v240->n128_u64[1] = v297;
                v240[1].n128_u64[0] = v292;
                v240[1].n128_u64[1] = v308[0];
                *(unint64_t *)((char *)&v240[1].n128_u64[1] + 7) = *(_QWORD *)((char *)v308 + 7);
                v240[2].n128_u8[7] = v300;
              }
              else
              {
                v249 = v240 + 1;
                *v240 = *v230;
                v81 = v233[-2];
                v240[2].n128_u64[0] = v233[-1].n128_u64[0];
                v240[1] = v81;
                v233[-3].n128_u64[0] = v295;
                v233[-3].n128_u64[1] = v297;
                v233[-2].n128_u64[0] = v292;
                v250 = v308[0];
                *(unint64_t *)((char *)&v233[-2].n128_u64[1] + 7) = *(_QWORD *)((char *)v308 + 7);
                v233[-2].n128_u64[1] = v250;
                v233[-1].n128_u8[7] = v300;
                v251 = (char *)v240 - (char *)a1 + 48;
                if (v251 >= 49)
                {
                  v252 = (v251 / 0x30uLL - 2) >> 1;
                  v253 = &a1[3 * v252];
                  v254 = -1;
                  if (*(__int128 *)v253 >= *(_OWORD *)v240)
                    v254 = 1;
                  if (v253->n128_u64[1] == v240->n128_u64[1] && v253->n128_u64[0] == v240->n128_u64[0])
                  {
                    v256 = v240[2].n128_i8[7];
                    if (v256 >= 0)
                      v257.__data_ = (const std::string_view::value_type *)&v240[1];
                    else
                      v257.__data_ = (const std::string_view::value_type *)v240[1].n128_u64[0];
                    if (v256 >= 0)
                      v257.__size_ = v240[2].n128_u8[7];
                    else
                      v257.__size_ = v240[1].n128_u64[1];
                    v258 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&a1[3 * v252 + 1], v257);
                    v254 = -1;
                    if (v258 >= 0)
                      v254 = 1;
                    if (!v258)
                      v254 = 0;
                  }
                  if (v254 < 0)
                  {
                    v305 = *v240;
                    v259 = *v249;
                    v307.__pn_.__r_.__value_.__r.__words[2] = v240[2].n128_u64[0];
                    *(__n128 *)&v307.__pn_.__r_.__value_.__l.__data_ = v259;
                    v249->n128_u64[0] = 0;
                    v240[1].n128_u64[1] = 0;
                    v240[2].n128_u64[0] = 0;
                    do
                    {
                      v260 = v253;
                      *v237 = *v253;
                      v261 = (void **)&v237[1];
                      if (v237[2].n128_i8[7] < 0)
                        operator delete(*v261);
                      v262 = (void **)&v260[1];
                      v263 = v260[1];
                      v237[2].n128_u64[0] = v260[2].n128_u64[0];
                      *(__n128 *)v261 = v263;
                      v260[2].n128_u8[7] = 0;
                      v260[1].n128_u8[0] = 0;
                      if (!v252)
                      {
                        *v260 = v305;
                        goto LABEL_557;
                      }
                      v252 = (v252 - 1) >> 1;
                      v253 = &a1[3 * v252];
                      v264 = -1;
                      if (*(_OWORD *)v253 >= *(_OWORD *)&v305)
                        v264 = 1;
                      if (v253->n128_u64[1] == v305.n128_u64[1] && v253->n128_u64[0] == v305.n128_u64[0])
                      {
                        if ((v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v266.__data_ = (const std::string_view::value_type *)&v307;
                        else
                          v266.__data_ = (const std::string_view::value_type *)v307.__pn_.__r_.__value_.__r.__words[0];
                        if ((v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v266.__size_ = HIBYTE(v307.__pn_.__r_.__value_.__r.__words[2]);
                        else
                          v266.__size_ = v307.__pn_.__r_.__value_.__l.__size_;
                        v267 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&a1[3 * v252 + 1], v266);
                        v264 = -1;
                        if (v267 >= 0)
                          v264 = 1;
                        if (!v267)
                          v264 = 0;
                      }
                      v237 = v260;
                    }
                    while (v264 < 0);
                    v268 = v260[2].n128_i8[7];
                    *v260 = v305;
                    if (v268 < 0)
                      operator delete(*v262);
LABEL_557:
                    v81 = *(__n128 *)&v307.__pn_.__r_.__value_.__l.__data_;
                    v260[2].n128_u64[0] = v307.__pn_.__r_.__value_.__r.__words[2];
                    *(__n128 *)v262 = v81;
                  }
                }
              }
            }
            while (v229-- > 2);
          }
          return v81.n128_f64[0];
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v7[3 * ((unint64_t)v9 >> 1)];
        if ((unint64_t)v8 < 0x1801)
        {
          sub_223759930(v11, v7->n128_u64, v293);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_30;
        }
        else
        {
          sub_223759930(v7, v11->n128_u64, v293);
          v12 = 3 * v10;
          v13 = &v7[v12];
          sub_223759930(v7 + 3, v7[v12 - 3].n128_u64, v291);
          sub_223759930(v7 + 6, v7[v12 + 3].n128_u64, v290);
          sub_223759930(&v7[v12 - 3], v11->n128_u64, (uint64_t)&v7[v12 + 3]);
          v14 = v7->n128_u64[0];
          v15 = v7->n128_u64[1];
          *v7 = *v11;
          v11->n128_u64[0] = v14;
          v11->n128_u64[1] = v15;
          v16 = v7[1];
          v307.__pn_.__r_.__value_.__r.__words[0] = v7[2].n128_u64[0];
          v17 = v7[v12 + 2].n128_u64[0];
          v7[1] = v7[v12 + 1];
          v7[2].n128_u64[0] = v17;
          v13[2].n128_u64[0] = v307.__pn_.__r_.__value_.__r.__words[0];
          v13[1] = v16;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_30;
        }
        v19 = v7[-3].n128_u64[0];
        v18 = v7[-3].n128_u64[1];
        if ((signed __int128)__PAIR128__(v18, v19) >= *(_OWORD *)v7)
          v20 = 1;
        else
          v20 = -1;
        if (v18 == v7->n128_u64[1] && v19 == v7->n128_u64[0])
        {
          v22 = v7[2].n128_i8[7];
          v23.__data_ = v22 >= 0
                      ? (const std::string_view::value_type *)&v7[1]
                      : (const std::string_view::value_type *)v7[1].n128_u64[0];
          v23.__size_ = v22 >= 0 ? v7[2].n128_u8[7] : v7[1].n128_u64[1];
          v24 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v7[-2], v23);
          v20 = v24 >= 0 ? 1 : -1;
          if (!v24)
            v20 = 0;
        }
        if ((v20 & 0x80) == 0)
        {
          v302 = (signed __int128)*v7;
          v82 = v7[2].n128_u64[0];
          *(__n128 *)&v307.__pn_.__r_.__value_.__l.__data_ = v7[1];
          v307.__pn_.__r_.__value_.__r.__words[2] = v82;
          v7[1].n128_u64[0] = 0;
          v7[1].n128_u64[1] = 0;
          v7[2].n128_u64[0] = 0;
          if (v302 >= *(_OWORD *)v293)
            v83 = 1;
          else
            v83 = -1;
          if (*((_QWORD *)&v302 + 1) == *(_QWORD *)(v293 + 8) && (_QWORD)v302 == *(_QWORD *)v293)
          {
            v85 = a2[-1].n128_i8[7];
            if (v85 >= 0)
              v86.__data_ = (const std::string_view::value_type *)v289;
            else
              v86.__data_ = (const std::string_view::value_type *)a2[-2].n128_u64[0];
            if (v85 >= 0)
              v86.__size_ = a2[-1].n128_u8[7];
            else
              v86.__size_ = a2[-2].n128_u64[1];
            v87 = std::__fs::filesystem::path::__compare(&v307, v86);
            if (v87 >= 0)
              v88 = 1;
            else
              v88 = -1;
            if (v87)
              v83 = v88;
            else
              v83 = 0;
          }
          v89 = v7;
          if (v83 < 0)
          {
            do
            {
              v91 = v89[3].n128_u64[0];
              v92 = v89[3].n128_u64[1];
              v7 = v89 + 3;
              if (v302 >= (__int128)__PAIR128__(v92, v91))
                v93 = 1;
              else
                v93 = -1;
              if (*((_QWORD *)&v302 + 1) == v92 && (_QWORD)v302 == v91)
              {
                v97 = (const std::string_view::value_type *)v89[4].n128_u64[0];
                v95 = v89 + 4;
                v96 = v97;
                v98 = v95[1].n128_i8[7];
                if (v98 >= 0)
                  v99.__data_ = (const std::string_view::value_type *)v95;
                else
                  v99.__data_ = v96;
                if (v98 >= 0)
                  v99.__size_ = v95[1].n128_u8[7];
                else
                  v99.__size_ = v95->n128_u64[1];
                v100 = std::__fs::filesystem::path::__compare(&v307, v99);
                if (v100 >= 0)
                  v101 = 1;
                else
                  v101 = -1;
                if (v100)
                  v93 = v101;
                else
                  v93 = 0;
              }
              v89 = v7;
            }
            while ((v93 & 0x80) == 0);
          }
          else
          {
            v90 = v7 + 3;
            do
            {
              v7 = v90;
              if (v90 >= a2)
                break;
              if (v302 >= *(_OWORD *)v90)
                v102 = 1;
              else
                v102 = -1;
              if (*((_QWORD *)&v302 + 1) == v90->n128_u64[1] && (_QWORD)v302 == v90->n128_u64[0])
              {
                v104 = v90[2].n128_i8[7];
                v105.__data_ = v104 >= 0
                             ? (const std::string_view::value_type *)&v90[1]
                             : (const std::string_view::value_type *)v90[1].n128_u64[0];
                v105.__size_ = v104 >= 0 ? v90[2].n128_u8[7] : v90[1].n128_u64[1];
                v106 = std::__fs::filesystem::path::__compare(&v307, v105);
                v102 = v106 >= 0 ? 1 : -1;
                if (!v106)
                  v102 = 0;
              }
              v90 = v7 + 3;
            }
            while ((v102 & 0x80) == 0);
          }
          v107 = a2;
          if (v7 < a2)
          {
            v108 = a2;
            v107 = a2;
            do
            {
              v109 = v107[-3].n128_u64[0];
              v110 = v107[-3].n128_u64[1];
              v107 -= 3;
              if (v302 >= (__int128)__PAIR128__(v110, v109))
                v111 = 1;
              else
                v111 = -1;
              if (*((_QWORD *)&v302 + 1) == v110 && (_QWORD)v302 == v109)
              {
                v115 = (const std::string_view::value_type *)v108[-2].n128_u64[0];
                v113 = v108 - 2;
                v114 = v115;
                v116 = v113[1].n128_i8[7];
                if (v116 >= 0)
                  v117.__data_ = (const std::string_view::value_type *)v113;
                else
                  v117.__data_ = v114;
                if (v116 >= 0)
                  v117.__size_ = v113[1].n128_u8[7];
                else
                  v117.__size_ = v113->n128_u64[1];
                v118 = std::__fs::filesystem::path::__compare(&v307, v117);
                if (v118 >= 0)
                  v119 = 1;
                else
                  v119 = -1;
                if (v118)
                  v111 = v119;
                else
                  v111 = 0;
              }
              v108 = v107;
            }
            while (v111 < 0);
          }
          while (v7 < v107)
          {
            v120 = v7->n128_u64[0];
            v121 = v7->n128_u64[1];
            *v7 = *v107;
            v107->n128_u64[0] = v120;
            v107->n128_u64[1] = v121;
            v122 = v7[1];
            v309 = v7[2].n128_u64[0];
            v123 = v107[2].n128_u64[0];
            v7[1] = v107[1];
            v7[2].n128_u64[0] = v123;
            v124 = v309;
            v107[1] = v122;
            v107[2].n128_u64[0] = v124;
            v125 = v7;
            do
            {
              v126 = v7[3].n128_u64[0];
              v127 = v7[3].n128_u64[1];
              v7 += 3;
              if (v302 >= (__int128)__PAIR128__(v127, v126))
                v128 = 1;
              else
                v128 = -1;
              if (*((_QWORD *)&v302 + 1) == v127 && (_QWORD)v302 == v126)
              {
                v132 = (const std::string_view::value_type *)v125[4].n128_u64[0];
                v130 = v125 + 4;
                v131 = v132;
                v133 = v130[1].n128_i8[7];
                if (v133 >= 0)
                  v134.__data_ = (const std::string_view::value_type *)v130;
                else
                  v134.__data_ = v131;
                if (v133 >= 0)
                  v134.__size_ = v130[1].n128_u8[7];
                else
                  v134.__size_ = v130->n128_u64[1];
                v135 = std::__fs::filesystem::path::__compare(&v307, v134);
                if (v135 >= 0)
                  v136 = 1;
                else
                  v136 = -1;
                if (v135)
                  v128 = v136;
                else
                  v128 = 0;
              }
              v125 = v7;
            }
            while ((v128 & 0x80) == 0);
            v137 = v107;
            do
            {
              v138 = v107[-3].n128_u64[0];
              v139 = v107[-3].n128_u64[1];
              v107 -= 3;
              if (v302 >= (__int128)__PAIR128__(v139, v138))
                v140 = 1;
              else
                v140 = -1;
              if (*((_QWORD *)&v302 + 1) == v139 && (_QWORD)v302 == v138)
              {
                v144 = (const std::string_view::value_type *)v137[-2].n128_u64[0];
                v142 = v137 - 2;
                v143 = v144;
                v145 = v142[1].n128_i8[7];
                if (v145 >= 0)
                  v146.__data_ = (const std::string_view::value_type *)v142;
                else
                  v146.__data_ = v143;
                if (v145 >= 0)
                  v146.__size_ = v142[1].n128_u8[7];
                else
                  v146.__size_ = v142->n128_u64[1];
                v147 = std::__fs::filesystem::path::__compare(&v307, v146);
                if (v147 >= 0)
                  v148 = 1;
                else
                  v148 = -1;
                if (v147)
                  v140 = v148;
                else
                  v140 = 0;
              }
              v137 = v107;
            }
            while (v140 < 0);
          }
          v149 = v7 - 3;
          if (&v7[-3] == a1)
          {
            v153 = v7[-1].n128_i8[7];
            *a1 = (__n128)v302;
            v151 = v7 - 2;
            if (v153 < 0)
              operator delete((void *)v151->n128_u64[0]);
          }
          else
          {
            v150 = (void **)&a1[1];
            *a1 = *v149;
            if (a1[2].n128_i8[7] < 0)
              operator delete(*v150);
            v151 = v7 - 2;
            v152 = v7[-2];
            a1[2].n128_u64[0] = v7[-1].n128_u64[0];
            *(__n128 *)v150 = v152;
            v7[-1].n128_u8[7] = 0;
            v7[-2].n128_u8[0] = 0;
            *v149 = (__n128)v302;
          }
          a4 = 0;
          v81 = *(__n128 *)&v307.__pn_.__r_.__value_.__l.__data_;
          v151[1].n128_u64[0] = v307.__pn_.__r_.__value_.__r.__words[2];
          *v151 = v81;
          continue;
        }
LABEL_30:
        v25 = 0;
        v26 = v7[1];
        v301 = (signed __int128)*v7;
        v27 = (void **)&v7[1];
        v307.__pn_.__r_.__value_.__r.__words[2] = v7[2].n128_u64[0];
        *(__n128 *)&v307.__pn_.__r_.__value_.__l.__data_ = v26;
        v7[1].n128_u64[1] = 0;
        v7[2].n128_u64[0] = 0;
        v7[1].n128_u64[0] = 0;
        do
        {
          v29 = v7[v25 + 3].n128_u64[0];
          v28 = v7[v25 + 3].n128_u64[1];
          if ((__int128)__PAIR128__(v28, v29) >= v301)
            v30 = 1;
          else
            v30 = -1;
          if (v28 == *((_QWORD *)&v301 + 1) && v29 == (_QWORD)v301)
          {
            v32.__data_ = (v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                        ? (const std::string_view::value_type *)&v307
                        : (const std::string_view::value_type *)v307.__pn_.__r_.__value_.__r.__words[0];
            v32.__size_ = (v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                        ? HIBYTE(v307.__pn_.__r_.__value_.__r.__words[2])
                        : v307.__pn_.__r_.__value_.__l.__size_;
            v33 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v7[v25 + 4], v32);
            v30 = v33 >= 0 ? 1 : -1;
            if (!v33)
              v30 = 0;
          }
          v25 += 3;
        }
        while (v30 < 0);
        v298 = a3;
        v34 = &v7[v25];
        v35 = a2;
        v36 = a2;
        if (v25 == 3)
        {
          v37 = a2;
          while (v34 < v37)
          {
            v46 = v37[-3].n128_u64[0];
            v47 = v37[-3].n128_u64[1];
            v42 = v37 - 3;
            if ((__int128)__PAIR128__(v47, v46) >= v301)
              v48 = 1;
            else
              v48 = -1;
            if (v47 == *((_QWORD *)&v301 + 1) && v46 == (_QWORD)v301)
            {
              if ((v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v50.__data_ = (const std::string_view::value_type *)&v307;
              else
                v50.__data_ = (const std::string_view::value_type *)v307.__pn_.__r_.__value_.__r.__words[0];
              if ((v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v50.__size_ = HIBYTE(v307.__pn_.__r_.__value_.__r.__words[2]);
              else
                v50.__size_ = v307.__pn_.__r_.__value_.__l.__size_;
              v51 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v37[-2], v50);
              if (v51 >= 0)
                v52 = 1;
              else
                v52 = -1;
              if (v51)
                v48 = v52;
              else
                v48 = 0;
            }
            v37 = v42;
            if (v48 < 0)
              goto LABEL_99;
          }
          v42 = v37;
        }
        else
        {
          do
          {
            v40 = v36[-3].n128_u64[0];
            v41 = v36[-3].n128_u64[1];
            v42 = v36 - 3;
            if ((__int128)__PAIR128__(v41, v40) >= v301)
              v39 = 1;
            else
              v39 = -1;
            if (v41 == *((_QWORD *)&v301 + 1) && v40 == (_QWORD)v301)
            {
              if ((v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v44.__data_ = (const std::string_view::value_type *)&v307;
              else
                v44.__data_ = (const std::string_view::value_type *)v307.__pn_.__r_.__value_.__r.__words[0];
              if ((v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v44.__size_ = HIBYTE(v307.__pn_.__r_.__value_.__r.__words[2]);
              else
                v44.__size_ = v307.__pn_.__r_.__value_.__l.__size_;
              v45 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v36[-2], v44);
              if (v45 >= 0)
                v38 = 1;
              else
                v38 = -1;
              if (v45)
                v39 = v38;
              else
                v39 = 0;
            }
            v36 = v42;
          }
          while ((v39 & 0x80) == 0);
        }
LABEL_99:
        v7 = (__n128 *)((char *)v7 + v25 * 16);
        if (v34 < v42)
        {
          v53 = v42;
          do
          {
            v54 = v7->n128_u64[0];
            v55 = v7->n128_u64[1];
            *v7 = *v53;
            v53->n128_u64[0] = v54;
            v53->n128_u64[1] = v55;
            v56 = v7[1];
            v309 = v7[2].n128_u64[0];
            v57 = v53[2].n128_u64[0];
            v7[1] = v53[1];
            v7[2].n128_u64[0] = v57;
            v58 = v309;
            v53[1] = v56;
            v53[2].n128_u64[0] = v58;
            v59 = (const std::__fs::filesystem::path *)&v7[4];
            do
            {
              size = v59[-1].__pn_.__r_.__value_.__l.__size_;
              v61 = v59[-1].__pn_.__r_.__value_.__r.__words[2];
              if ((__int128)__PAIR128__(v61, size) >= v301)
                v60 = 1;
              else
                v60 = -1;
              if (v61 == *((_QWORD *)&v301 + 1) && size == (_QWORD)v301)
              {
                v64.__data_ = (v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                            ? (const std::string_view::value_type *)&v307
                            : (const std::string_view::value_type *)v307.__pn_.__r_.__value_.__r.__words[0];
                v64.__size_ = (v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                            ? HIBYTE(v307.__pn_.__r_.__value_.__r.__words[2])
                            : v307.__pn_.__r_.__value_.__l.__size_;
                v65 = std::__fs::filesystem::path::__compare(v59, v64);
                v60 = v65 >= 0 ? 1 : -1;
                if (!v65)
                  v60 = 0;
              }
              v59 += 2;
            }
            while (v60 < 0);
            v7 = (__n128 *)&v59[-3].__pn_.__r_.__value_.__r.__words[1];
            v66 = v53;
            do
            {
              v69 = v53[-3].n128_u64[0];
              v70 = v53[-3].n128_u64[1];
              v53 -= 3;
              if ((__int128)__PAIR128__(v70, v69) >= v301)
                v68 = 1;
              else
                v68 = -1;
              if (v70 == *((_QWORD *)&v301 + 1) && v69 == (_QWORD)v301)
              {
                if ((v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72.__data_ = (const std::string_view::value_type *)&v307;
                else
                  v72.__data_ = (const std::string_view::value_type *)v307.__pn_.__r_.__value_.__r.__words[0];
                if ((v307.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72.__size_ = HIBYTE(v307.__pn_.__r_.__value_.__r.__words[2]);
                else
                  v72.__size_ = v307.__pn_.__r_.__value_.__l.__size_;
                v73 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v66[-2], v72);
                if (v73 >= 0)
                  v67 = 1;
                else
                  v67 = -1;
                if (v73)
                  v68 = v67;
                else
                  v68 = 0;
              }
              v66 = v53;
            }
            while ((v68 & 0x80) == 0);
          }
          while (v7 < v53);
        }
        v74 = v7 - 3;
        if (&v7[-3] == a1)
        {
          v77 = v7[-1].n128_i8[7];
          *a1 = (__n128)v301;
          v75 = v7 - 2;
          if (v77 < 0)
            operator delete((void *)v75->n128_u64[0]);
        }
        else
        {
          *a1 = *v74;
          if (a1[2].n128_i8[7] < 0)
            operator delete(*v27);
          v75 = v7 - 2;
          v76 = v7[-2];
          a1[2].n128_u64[0] = v7[-1].n128_u64[0];
          *(__n128 *)v27 = v76;
          v7[-1].n128_u8[7] = 0;
          v7[-2].n128_u8[0] = 0;
          *v74 = (__n128)v301;
        }
        v78 = *(__n128 *)&v307.__pn_.__r_.__value_.__l.__data_;
        v75[1].n128_u64[0] = v307.__pn_.__r_.__value_.__r.__words[2];
        *v75 = v78;
        v79 = v34 >= v42;
        a2 = v35;
        a3 = v298;
        if (!v79)
        {
LABEL_157:
          sub_223758478(a1, &v7[-3], v298, a4 & 1);
          a4 = 0;
          continue;
        }
        v80 = sub_223759C50(a1, v7 - 3);
        if (!sub_223759C50(v7, a2))
        {
          if (v80)
            continue;
          goto LABEL_157;
        }
        a2 = v7 - 3;
        if (!v80)
          goto LABEL_2;
        return v81.n128_f64[0];
    }
  }
}

void sub_223759870(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

__n128 sub_223759930(__n128 *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  const std::__fs::filesystem::path *v10;
  int v11;
  std::__fs::filesystem::path::__string_view v12;
  int v13;
  __n128 result;
  char v15;
  char v16;
  BOOL v17;
  int v18;
  std::__fs::filesystem::path::__string_view v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  std::__fs::filesystem::path::__string_view v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  std::__fs::filesystem::path::__string_view v37;
  int v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  __n128 *v42;
  __n128 *v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  int v48;
  std::__fs::filesystem::path::__string_view v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v6 = *a2;
  v7 = a2[1];
  v8 = -1;
  if (*(_OWORD *)a2 >= *(__int128 *)a1)
    v8 = 1;
  if (v7 == a1->n128_u64[1] && v6 == a1->n128_u64[0])
  {
    v10 = (const std::__fs::filesystem::path *)(a2 + 2);
    v11 = a1[2].n128_i8[7];
    if (v11 >= 0)
      v12.__data_ = (const std::string_view::value_type *)&a1[1];
    else
      v12.__data_ = (const std::string_view::value_type *)a1[1].n128_u64[0];
    if (v11 >= 0)
      v12.__size_ = a1[2].n128_u8[7];
    else
      v12.__size_ = a1[1].n128_u64[1];
    v13 = std::__fs::filesystem::path::__compare(v10, v12);
    v15 = -1;
    if (v13 >= 0)
      v15 = 1;
    if (v13)
      v8 = v15;
    else
      v8 = 0;
    v6 = *a2;
    v7 = a2[1];
  }
  v16 = -1;
  if (*(_OWORD *)a3 >= (signed __int128)__PAIR128__(v7, v6))
    v16 = 1;
  v17 = *(_QWORD *)(a3 + 8) == v7 && *(_QWORD *)a3 == v6;
  if (v8 < 0)
  {
    if (v17)
    {
      v36 = *((char *)a2 + 39);
      if (v36 >= 0)
        v37.__data_ = (const std::string_view::value_type *)(a2 + 2);
      else
        v37.__data_ = (const std::string_view::value_type *)a2[2];
      if (v36 >= 0)
        v37.__size_ = *((unsigned __int8 *)a2 + 39);
      else
        v37.__size_ = a2[3];
      v38 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a3 + 16), v37);
      v39 = -1;
      if (v38 >= 0)
        v39 = 1;
      if (v38)
        v16 = v39;
      else
        v16 = 0;
    }
    v40 = a1->n128_u64[0];
    v41 = a1->n128_i64[1];
    v42 = a1 + 1;
    if (v16 < 0)
    {
      *a1 = *(__n128 *)a3;
      *(_QWORD *)a3 = v40;
      *(_QWORD *)(a3 + 8) = v41;
      v55 = a1[2].n128_i64[0];
      result = *v42;
      v56 = *(_QWORD *)(a3 + 32);
      *v42 = *(__n128 *)(a3 + 16);
      a1[2].n128_u64[0] = v56;
      *(__n128 *)(a3 + 16) = result;
      *(_QWORD *)(a3 + 32) = v55;
    }
    else
    {
      *a1 = *(__n128 *)a2;
      *a2 = v40;
      a2[1] = v41;
      v43 = (__n128 *)(a2 + 2);
      v44 = v42[1].n128_u64[0];
      result = *v42;
      v45 = a2[4];
      *v42 = *((__n128 *)a2 + 1);
      v42[1].n128_u64[0] = v45;
      *((__n128 *)a2 + 1) = result;
      a2[4] = v44;
      v46 = -1;
      if (*(_OWORD *)a3 >= *(_OWORD *)a2)
        v46 = 1;
      if (*(_QWORD *)(a3 + 8) == a2[1] && *(_QWORD *)a3 == *a2)
      {
        v48 = *((char *)a2 + 39);
        if (v48 >= 0)
          v49.__data_ = (const std::string_view::value_type *)(a2 + 2);
        else
          v49.__data_ = (const std::string_view::value_type *)a2[2];
        if (v48 >= 0)
          v49.__size_ = *((unsigned __int8 *)a2 + 39);
        else
          v49.__size_ = a2[3];
        v50 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a3 + 16), v49);
        v46 = -1;
        if (v50 >= 0)
          v46 = 1;
        if (!v50)
          v46 = 0;
      }
      if (v46 < 0)
      {
        v51 = *a2;
        v52 = a2[1];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)a3 = v51;
        *(_QWORD *)(a3 + 8) = v52;
        v53 = a2[4];
        result = *v43;
        v54 = *(_QWORD *)(a3 + 32);
        *v43 = *(__n128 *)(a3 + 16);
        a2[4] = v54;
        *(__n128 *)(a3 + 16) = result;
        *(_QWORD *)(a3 + 32) = v53;
      }
    }
  }
  else
  {
    if (v17)
    {
      v18 = *((char *)a2 + 39);
      if (v18 >= 0)
        v19.__data_ = (const std::string_view::value_type *)(a2 + 2);
      else
        v19.__data_ = (const std::string_view::value_type *)a2[2];
      if (v18 >= 0)
        v19.__size_ = *((unsigned __int8 *)a2 + 39);
      else
        v19.__size_ = a2[3];
      v20 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a3 + 16), v19);
      v21 = -1;
      if (v20 >= 0)
        v21 = 1;
      if (v20)
        v16 = v21;
      else
        v16 = 0;
    }
    if (v16 < 0)
    {
      v22 = *a2;
      v23 = a2[1];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v22;
      *(_QWORD *)(a3 + 8) = v23;
      v24 = (__n128 *)(a2 + 2);
      v25 = a2[4];
      result = *((__n128 *)a2 + 1);
      v26 = *(_QWORD *)(a3 + 32);
      *((_OWORD *)a2 + 1) = *(_OWORD *)(a3 + 16);
      a2[4] = v26;
      *(__n128 *)(a3 + 16) = result;
      *(_QWORD *)(a3 + 32) = v25;
      v27 = -1;
      if (*(_OWORD *)a2 >= *(__int128 *)a1)
        v27 = 1;
      if (a2[1] == a1->n128_u64[1] && *a2 == a1->n128_u64[0])
      {
        v29 = a1[2].n128_i8[7];
        if (v29 >= 0)
          v30.__data_ = (const std::string_view::value_type *)&a1[1];
        else
          v30.__data_ = (const std::string_view::value_type *)a1[1].n128_u64[0];
        if (v29 >= 0)
          v30.__size_ = a1[2].n128_u8[7];
        else
          v30.__size_ = a1[1].n128_u64[1];
        v31 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a2 + 2), v30);
        v27 = -1;
        if (v31 >= 0)
          v27 = 1;
        if (!v31)
          v27 = 0;
      }
      if (v27 < 0)
      {
        v32 = a1->n128_u64[0];
        v33 = a1->n128_i64[1];
        *a1 = *(__n128 *)a2;
        *a2 = v32;
        a2[1] = v33;
        v34 = a1[2].n128_i64[0];
        result = a1[1];
        v35 = a2[4];
        a1[1] = *v24;
        a1[2].n128_u64[0] = v35;
        *v24 = result;
        a2[4] = v34;
      }
    }
  }
  return result;
}

BOOL sub_223759C50(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  char v8;
  const std::__fs::filesystem::path *v10;
  int v11;
  std::__fs::filesystem::path::__string_view v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;
  int v22;
  char v23;
  __n128 *v25;
  __n128 *v26;
  unint64_t v27;
  int v28;
  std::__fs::filesystem::path::__string_view v29;
  int v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v39;
  const std::string_view::value_type *v40;
  const std::string_view::value_type *v41;
  int v42;
  std::__fs::filesystem::path::__string_view v43;
  int v44;
  char *v45;
  int v46;
  __n128 v47;
  std::__fs::filesystem::path v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2[-3].n128_u64[0];
      v7 = a2[-3].n128_u64[1];
      v8 = -1;
      if ((signed __int128)__PAIR128__(v7, v6) >= *(_OWORD *)a1)
        v8 = 1;
      if (v7 == a1->n128_u64[1] && v6 == a1->n128_u64[0])
      {
        v10 = (const std::__fs::filesystem::path *)&a2[-2];
        v11 = a1[2].n128_i8[7];
        if (v11 >= 0)
          v12.__data_ = (const std::string_view::value_type *)&a1[1];
        else
          v12.__data_ = (const std::string_view::value_type *)a1[1].n128_u64[0];
        if (v11 >= 0)
          v12.__size_ = a1[2].n128_u8[7];
        else
          v12.__size_ = a1[1].n128_u64[1];
        v13 = std::__fs::filesystem::path::__compare(v10, v12);
        v8 = -1;
        if (v13 >= 0)
          v8 = 1;
        if (!v13)
          v8 = 0;
      }
      if (v8 < 0)
      {
        v14 = a1->n128_u64[0];
        v15 = a1->n128_u64[1];
        *a1 = a2[-3];
        a2[-3].n128_u64[0] = v14;
        a2[-3].n128_u64[1] = v15;
        v16 = a1[2].n128_u64[0];
        v17 = a1[1];
        v18 = a2[-1].n128_u64[0];
        a1[1] = a2[-2];
        a1[2].n128_u64[0] = v18;
        a2[-2] = v17;
        a2[-1].n128_u64[0] = v16;
      }
      return 1;
    case 3uLL:
      sub_223759930(a1, a1[3].n128_u64, (uint64_t)&a2[-3]);
      return 1;
    case 4uLL:
      sub_223759FCC(a1, a1 + 3, (uint64_t)&a1[6], (uint64_t)&a2[-3]);
      return 1;
    case 5uLL:
      sub_22375A1D4(a1, a1 + 3, (uint64_t)&a1[6], (uint64_t)&a1[9], (uint64_t)&a2[-3]);
      return 1;
    default:
      v19 = a1 + 6;
      sub_223759930(a1, a1[3].n128_u64, (uint64_t)&a1[6]);
      v20 = a1 + 9;
      if (&a1[9] == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (1)
  {
    if (*(__int128 *)v20 >= *(_OWORD *)v19)
      v23 = 1;
    else
      v23 = -1;
    if (v20->n128_u64[1] == v19->n128_u64[1] && v20->n128_u64[0] == v19->n128_u64[0])
    {
      v27 = v19[1].n128_u64[0];
      v26 = v19 + 1;
      v25 = (__n128 *)v27;
      v28 = v26[1].n128_i8[7];
      v29.__data_ = (const std::string_view::value_type *)(v28 >= 0 ? v26 : v25);
      v29.__size_ = v28 >= 0 ? v26[1].n128_u8[7] : v26->n128_u64[1];
      v30 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&v20[1], v29);
      v23 = v30 >= 0 ? 1 : -1;
      if (!v30)
        v23 = 0;
    }
    if (v23 < 0)
    {
      v47 = *v20;
      v48 = *(std::__fs::filesystem::path *)v20[1].n128_u8;
      v20[1].n128_u64[0] = 0;
      v20[1].n128_u64[1] = 0;
      v20[2].n128_u64[0] = 0;
      v31 = v21;
      do
      {
        v34 = v31;
        v35 = (char *)a1 + v31;
        *(__n128 *)((char *)a1 + v31 + 144) = *(__n128 *)((char *)a1 + v31 + 96);
        v36 = (uint64_t)&a1[10] + v31;
        if (a1[11].n128_i8[v31 + 7] < 0)
          operator delete(*(void **)v36);
        *(_OWORD *)v36 = *((_OWORD *)v35 + 7);
        *(_QWORD *)(v36 + 16) = *((_QWORD *)v35 + 16);
        v35[135] = 0;
        v35[112] = 0;
        if (v34 == -96)
        {
          *a1 = v47;
          goto LABEL_25;
        }
        v37 = (char *)a1 + v34;
        if (*(_OWORD *)&v47 >= *(__int128 *)((char *)&a1[3] + v34))
          v33 = 1;
        else
          v33 = -1;
        if (v47.n128_u64[1] == *(unint64_t *)((char *)&a1[3].n128_u64[1] + v34)
          && v47.n128_u64[0] == *(unint64_t *)((char *)a1[3].n128_u64 + v34))
        {
          v41 = (const std::string_view::value_type *)*((_QWORD *)v37 + 8);
          v39 = v37 + 64;
          v40 = v41;
          v42 = v39[23];
          if (v42 >= 0)
            v43.__data_ = v39;
          else
            v43.__data_ = v40;
          if (v42 >= 0)
            v43.__size_ = v39[23];
          else
            v43.__size_ = *((_QWORD *)v39 + 1);
          v44 = std::__fs::filesystem::path::__compare(&v48, v43);
          if (v44 >= 0)
            v32 = 1;
          else
            v32 = -1;
          if (v44)
            v33 = v32;
          else
            v33 = 0;
        }
        v31 = v34 - 48;
      }
      while (v33 < 0);
      v45 = (char *)a1 + v31;
      v46 = v45[183];
      *((__n128 *)v45 + 9) = v47;
      if (v46 < 0)
        operator delete(*((void **)v45 + 20));
LABEL_25:
      *(std::__fs::filesystem::path *)((char *)a1[7].n128_u64 + v34) = v48;
      if (++v22 == 8)
        return &v20[3] == a2;
    }
    v19 = v20;
    v21 += 48;
    v20 += 3;
    if (v20 == a2)
      return 1;
  }
}

void sub_223759FB4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

__n128 sub_223759FCC(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  char v9;
  int v11;
  std::__fs::filesystem::path::__string_view v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v21;
  std::__fs::filesystem::path::__string_view v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  __n128 *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  std::__fs::filesystem::path::__string_view v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  result.n128_u64[0] = sub_223759930(a1, a2->n128_u64, a3).n128_u64[0];
  v9 = -1;
  if (*(_OWORD *)a4 >= *(_OWORD *)a3)
    v9 = 1;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)(a3 + 8) && *(_QWORD *)a4 == *(_QWORD *)a3)
  {
    v11 = *(char *)(a3 + 39);
    if (v11 >= 0)
      v12.__data_ = (const std::string_view::value_type *)(a3 + 16);
    else
      v12.__data_ = *(const std::string_view::value_type **)(a3 + 16);
    if (v11 >= 0)
      v12.__size_ = *(unsigned __int8 *)(a3 + 39);
    else
      v12.__size_ = *(_QWORD *)(a3 + 24);
    v13 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a4 + 16), v12);
    v9 = -1;
    if (v13 >= 0)
      v9 = 1;
    if (!v13)
      v9 = 0;
  }
  if (v9 < 0)
  {
    v14 = *(_QWORD *)a3;
    v15 = *(_QWORD *)(a3 + 8);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)a4 = v14;
    *(_QWORD *)(a4 + 8) = v15;
    v16 = a3 + 16;
    v17 = *(_QWORD *)(a3 + 32);
    result = *(__n128 *)(a3 + 16);
    v18 = *(_QWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a3 + 32) = v18;
    *(__n128 *)(a4 + 16) = result;
    *(_QWORD *)(a4 + 32) = v17;
    v19 = -1;
    if (*(_OWORD *)a3 >= *(__int128 *)a2)
      v19 = 1;
    if (*(_QWORD *)(a3 + 8) == a2->n128_u64[1] && *(_QWORD *)a3 == a2->n128_u64[0])
    {
      v21 = a2[2].n128_i8[7];
      if (v21 >= 0)
        v22.__data_ = (const std::string_view::value_type *)&a2[1];
      else
        v22.__data_ = (const std::string_view::value_type *)a2[1].n128_u64[0];
      if (v21 >= 0)
        v22.__size_ = a2[2].n128_u8[7];
      else
        v22.__size_ = a2[1].n128_u64[1];
      v23 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a3 + 16), v22);
      v19 = -1;
      if (v23 >= 0)
        v19 = 1;
      if (!v23)
        v19 = 0;
    }
    if (v19 < 0)
    {
      v24 = a2->n128_u64[0];
      v25 = a2->n128_i64[1];
      *a2 = *(__n128 *)a3;
      *(_QWORD *)a3 = v24;
      *(_QWORD *)(a3 + 8) = v25;
      v26 = a2 + 1;
      v27 = a2[2].n128_i64[0];
      result = a2[1];
      v28 = *(_QWORD *)(v16 + 16);
      a2[1] = *(__n128 *)v16;
      a2[2].n128_u64[0] = v28;
      *(__n128 *)v16 = result;
      *(_QWORD *)(v16 + 16) = v27;
      v29 = -1;
      if (*(__int128 *)a2 >= *(_OWORD *)a1)
        v29 = 1;
      if (a2->n128_u64[1] == a1->n128_u64[1] && a2->n128_u64[0] == a1->n128_u64[0])
      {
        v31 = a1[2].n128_i8[7];
        if (v31 >= 0)
          v32.__data_ = (const std::string_view::value_type *)&a1[1];
        else
          v32.__data_ = (const std::string_view::value_type *)a1[1].n128_u64[0];
        if (v31 >= 0)
          v32.__size_ = a1[2].n128_u8[7];
        else
          v32.__size_ = a1[1].n128_u64[1];
        v33 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&a2[1], v32);
        v29 = -1;
        if (v33 >= 0)
          v29 = 1;
        if (!v33)
          v29 = 0;
      }
      if (v29 < 0)
      {
        v34 = a1->n128_u64[0];
        v35 = a1->n128_u64[1];
        *a1 = *a2;
        a2->n128_u64[0] = v34;
        a2->n128_u64[1] = v35;
        v36 = a1[2].n128_u64[0];
        result = a1[1];
        v37 = a2[2].n128_u64[0];
        a1[1] = *v26;
        a1[2].n128_u64[0] = v37;
        *v26 = result;
        a2[2].n128_u64[0] = v36;
      }
    }
  }
  return result;
}

__n128 sub_22375A1D4(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  char v11;
  int v13;
  std::__fs::filesystem::path::__string_view v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v23;
  std::__fs::filesystem::path::__string_view v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v33;
  std::__fs::filesystem::path::__string_view v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  __n128 *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v43;
  std::__fs::filesystem::path::__string_view v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  result.n128_u64[0] = sub_223759FCC(a1, a2, a3, a4).n128_u64[0];
  v11 = -1;
  if (*(_OWORD *)a5 >= *(_OWORD *)a4)
    v11 = 1;
  if (*(_QWORD *)(a5 + 8) == *(_QWORD *)(a4 + 8) && *(_QWORD *)a5 == *(_QWORD *)a4)
  {
    v13 = *(char *)(a4 + 39);
    if (v13 >= 0)
      v14.__data_ = (const std::string_view::value_type *)(a4 + 16);
    else
      v14.__data_ = *(const std::string_view::value_type **)(a4 + 16);
    if (v13 >= 0)
      v14.__size_ = *(unsigned __int8 *)(a4 + 39);
    else
      v14.__size_ = *(_QWORD *)(a4 + 24);
    v15 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a5 + 16), v14);
    v11 = -1;
    if (v15 >= 0)
      v11 = 1;
    if (!v15)
      v11 = 0;
  }
  if (v11 < 0)
  {
    v16 = *(_QWORD *)a4;
    v17 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)a5 = v16;
    *(_QWORD *)(a5 + 8) = v17;
    v18 = a4 + 16;
    v19 = *(_QWORD *)(a4 + 32);
    result = *(__n128 *)(a4 + 16);
    v20 = *(_QWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
    *(_QWORD *)(a4 + 32) = v20;
    *(__n128 *)(a5 + 16) = result;
    *(_QWORD *)(a5 + 32) = v19;
    v21 = -1;
    if (*(_OWORD *)a4 >= *(_OWORD *)a3)
      v21 = 1;
    if (*(_QWORD *)(a4 + 8) == *(_QWORD *)(a3 + 8) && *(_QWORD *)a4 == *(_QWORD *)a3)
    {
      v23 = *(char *)(a3 + 39);
      if (v23 >= 0)
        v24.__data_ = (const std::string_view::value_type *)(a3 + 16);
      else
        v24.__data_ = *(const std::string_view::value_type **)(a3 + 16);
      if (v23 >= 0)
        v24.__size_ = *(unsigned __int8 *)(a3 + 39);
      else
        v24.__size_ = *(_QWORD *)(a3 + 24);
      v25 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a4 + 16), v24);
      v21 = -1;
      if (v25 >= 0)
        v21 = 1;
      if (!v25)
        v21 = 0;
    }
    if (v21 < 0)
    {
      v26 = *(_QWORD *)a3;
      v27 = *(_QWORD *)(a3 + 8);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)a4 = v26;
      *(_QWORD *)(a4 + 8) = v27;
      v28 = a3 + 16;
      v29 = *(_QWORD *)(a3 + 32);
      result = *(__n128 *)(a3 + 16);
      v30 = *(_QWORD *)(v18 + 16);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v18;
      *(_QWORD *)(a3 + 32) = v30;
      *(__n128 *)v18 = result;
      *(_QWORD *)(v18 + 16) = v29;
      v31 = -1;
      if (*(_OWORD *)a3 >= *(__int128 *)a2)
        v31 = 1;
      if (*(_QWORD *)(a3 + 8) == a2->n128_u64[1] && *(_QWORD *)a3 == a2->n128_u64[0])
      {
        v33 = a2[2].n128_i8[7];
        if (v33 >= 0)
          v34.__data_ = (const std::string_view::value_type *)&a2[1];
        else
          v34.__data_ = (const std::string_view::value_type *)a2[1].n128_u64[0];
        if (v33 >= 0)
          v34.__size_ = a2[2].n128_u8[7];
        else
          v34.__size_ = a2[1].n128_u64[1];
        v35 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(a3 + 16), v34);
        v31 = -1;
        if (v35 >= 0)
          v31 = 1;
        if (!v35)
          v31 = 0;
      }
      if (v31 < 0)
      {
        v36 = a2->n128_u64[0];
        v37 = a2->n128_i64[1];
        *a2 = *(__n128 *)a3;
        *(_QWORD *)a3 = v36;
        *(_QWORD *)(a3 + 8) = v37;
        v38 = a2 + 1;
        v39 = a2[2].n128_i64[0];
        result = a2[1];
        v40 = *(_QWORD *)(v28 + 16);
        a2[1] = *(__n128 *)v28;
        a2[2].n128_u64[0] = v40;
        *(__n128 *)v28 = result;
        *(_QWORD *)(v28 + 16) = v39;
        v41 = -1;
        if (*(__int128 *)a2 >= *(_OWORD *)a1)
          v41 = 1;
        if (a2->n128_u64[1] == a1->n128_u64[1] && a2->n128_u64[0] == a1->n128_u64[0])
        {
          v43 = a1[2].n128_i8[7];
          if (v43 >= 0)
            v44.__data_ = (const std::string_view::value_type *)&a1[1];
          else
            v44.__data_ = (const std::string_view::value_type *)a1[1].n128_u64[0];
          if (v43 >= 0)
            v44.__size_ = a1[2].n128_u8[7];
          else
            v44.__size_ = a1[1].n128_u64[1];
          v45 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)&a2[1], v44);
          v41 = -1;
          if (v45 >= 0)
            v41 = 1;
          if (!v45)
            v41 = 0;
        }
        if (v41 < 0)
        {
          v46 = a1->n128_u64[0];
          v47 = a1->n128_u64[1];
          *a1 = *a2;
          a2->n128_u64[0] = v46;
          a2->n128_u64[1] = v47;
          v48 = a1[2].n128_u64[0];
          result = a1[1];
          v49 = a2[2].n128_u64[0];
          a1[1] = *v38;
          a1[2].n128_u64[0] = v49;
          *v38 = result;
          a2[2].n128_u64[0] = v48;
        }
      }
    }
  }
  return result;
}

void sub_22375A478(std::future<void> *a1)
{
  uint64_t state_low;
  char v3;

  if (a1)
  {
    sub_22375A478(a1->__state_);
    sub_22375A478(a1[1].__state_);
    sub_223757750((uint64_t)&a1[7]);
    state_low = LODWORD(a1[13].__state_);
    if ((_DWORD)state_low != -1)
      ((void (*)(char *, std::future<void> *))off_24EC58218[state_low])(&v3, &a1[10]);
    LODWORD(a1[13].__state_) = -1;
    if (LOBYTE(a1[9].__state_))
      std::future<void>::~future(a1 + 8);
    if (SHIBYTE(a1[6].__state_) < 0)
      operator delete(a1[4].__state_);
    operator delete(a1);
  }
}

void sub_22375A510(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_22375A568(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t *v3;
  unint64_t v4;

  result = *a2;
  if (*a2)
  {
    v3 = (unint64_t *)(result + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

__n128 sub_22375A598(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  return result;
}

void sub_22375A5B0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

uint64_t sub_22375A5C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = off_24EC58248;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22375A64C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24EC58248;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22375A6DC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;

  v2 = operator new(0x38uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = off_24EC58248;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = *(_QWORD *)(a1 + 24);
  v8 = v2 + 4;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_223197FA4(v8, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)(a1 + 32);
    v3[6] = *(_QWORD *)(a1 + 48);
  }
  return v3;
}

void sub_22375A780(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_22375A7CC(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v3 = *((_QWORD *)result + 1);
  v2 = *((_QWORD *)result + 2);
  *(_QWORD *)a2 = off_24EC58248;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  if (result[55] < 0)
    return (char *)sub_223197FA4((_BYTE *)(a2 + 32), *((void **)result + 4), *((_QWORD *)result + 5));
  v6 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)(a2 + 32) = v6;
  return result;
}

void sub_22375A854(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22375A898(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_22375A910(void **__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    v2 = (std::__shared_weak_count *)__p[2];
    if (!v2)
      goto LABEL_3;
  }
  else
  {
    v2 = (std::__shared_weak_count *)__p[2];
    if (!v2)
      goto LABEL_3;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
    return;
  }
LABEL_3:
  operator delete(__p);
}

void sub_22375A990(uint64_t a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  std::exception_ptr v6;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 32) + 328))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), a1 + 32);
  v3 = *v1;
  if (!*v1)
    sub_2233236D4(3u);
  v4 = v2;
  std::mutex::lock((std::mutex *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(v3 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    sub_2233236D4(2u);
  }
  *(_BYTE *)(v3 + 140) = v4;
  *(_DWORD *)(v3 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v3 + 88));
  std::mutex::unlock((std::mutex *)(v3 + 24));
}

void sub_22375AA50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  uint64_t v10;
  std::mutex *v11;
  std::__assoc_sub_state **v13;
  std::__assoc_sub_state *v14;
  std::exception_ptr v15;

  std::mutex::unlock(v11);
  __cxa_begin_catch(a1);
  v13 = *(std::__assoc_sub_state ***)(v10 + 8);
  std::current_exception();
  v14 = *v13;
  if (v14)
  {
    std::exception_ptr::exception_ptr(&a10, (const std::exception_ptr *)&a9);
    v15.__ptr_ = &a10;
    std::__assoc_sub_state::set_exception(v14, v15);
    std::exception_ptr::~exception_ptr(&a10);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x22375AA20);
  }
  sub_2233236D4(3u);
}

void sub_22375AABC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  sub_22316DC48(a1);
}

uint64_t sub_22375AAD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIbZNKS_5recon8kfplanes30LRUCachedPersistence"
                     "Filesystem13IsRegularFileERKNSt3__14__fs10filesystem4pathEE3$_0NS1_11IWorkQueueTINS7_8functionIFvvE"
                     "EEEEEENS7_6futureIT_EERT1_OT0_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIbZNKS_5recon8kfplanes30LRUCached"
                                "PersistenceFilesystem13IsRegularFileERKNSt3__14__fs10filesystem4pathEE3$_0NS1_11IWorkQue"
                                "ueTINS7_8functionIFvvEEEEEEENS7_6futureIT_EERT1_OT0_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIbZNKS_5recon8kfplanes30LRUCachedPersistenceFilesystem13IsRegularFileERKNSt3__14__fs10filesystem4pathEE3$_0NS1_11IWorkQueueTINS7_8functionIFvvEEEEEEENS7_6futureIT_EERT1_OT0_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIbZNKS_5recon8kfplanes30LRUCachedPersistenceFilesystem13IsRegularFileERKNSt3__14__fs10filesystem4pathEE3$_0NS1_11IWorkQueueTINS7_8functionIFvvEEEEEEENS7_6futureIT_EERT1_OT0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22375AB40()
{
  return &unk_24EC582A8;
}

uint64_t sub_22375AB4C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24EC582C8;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_22375ABD8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24EC582C8;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
LABEL_10:
      JUMPOUT(0x227684CE8);
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 16));
  goto LABEL_10;
}

_QWORD *sub_22375AC68(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x40uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_24EC582C8;
  v2[1] = v3;
  v4 = v2 + 2;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_223197FA4(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
    v2[4] = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 48);
  v2[5] = *(_QWORD *)(a1 + 40);
  v2[6] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[7] = *(_QWORD *)(a1 + 56);
  return v2;
}

void sub_22375ACF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_22375AD08(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE *result;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 8);
  *a2 = off_24EC582C8;
  a2[1] = v4;
  result = a2 + 2;
  if (*(char *)(a1 + 39) < 0)
  {
    result = sub_223197FA4(result, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(a1 + 48);
    a2[5] = *(_QWORD *)(a1 + 40);
    a2[6] = v7;
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 16);
    a2[4] = *(_QWORD *)(a1 + 32);
    *(_OWORD *)result = v6;
    v7 = *(_QWORD *)(a1 + 48);
    a2[5] = *(_QWORD *)(a1 + 40);
    a2[6] = v7;
    if (!v7)
      goto LABEL_7;
  }
  v8 = (unint64_t *)(v7 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_7:
  a2[7] = *(_QWORD *)(a1 + 56);
  return result;
}

void sub_22375AD98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(*(void **)(a1 + 16));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 39) < 0)
    goto LABEL_8;
}

void sub_22375AE0C(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((__p[39] & 0x80000000) == 0)
        goto LABEL_6;
LABEL_9:
      operator delete(*((void **)__p + 2));
      operator delete(__p);
      return;
    }
  }
  if (__p[39] < 0)
    goto LABEL_9;
LABEL_6:
  operator delete(__p);
}

_QWORD *sub_22375AE8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  uint64_t v7;
  std::__fs::filesystem::filesystem_error *exception;
  std::string __what_arg;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  std::error_code v13;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  v10[0] = &off_24EC58338;
  v10[1] = v2;
  v10[2] = 0;
  v11 = v10;
  v3 = a1[5];
  v4 = a1[7];
  if (v3)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!sub_2236E51C0(v2, v4, v3, (uint64_t)(a1 + 2)))
  {
    exception = (std::__fs::filesystem::filesystem_error *)__cxa_allocate_exception(0x30uLL);
    sub_22456D250("Failure when writing file of size %zu Bytes", &__what_arg, a1[7]);
    v13.__cat_ = std::generic_category();
    *(_QWORD *)&v13.__val_ = 5;
    sub_2236E6644(exception, &__what_arg, (uint64_t)(a1 + 2), v13);
    __cxa_throw(exception, MEMORY[0x24BEDB708], MEMORY[0x24BEDB268]);
  }
  if (!v11)
    sub_223198474();
  (*(void (**)(_QWORD *))(*v11 + 48))(v11);
  result = v11;
  if (v11 == v10)
  {
    v7 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_22375B020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  void *v20;
  int v21;
  char *v23;
  uint64_t v24;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (!a20)
        sub_223198474();
      (*(void (**)(char *))(*(_QWORD *)a20 + 48))(a20);
      v23 = a20;
      if (a20 == &a17)
      {
        v24 = 4;
        v23 = &a17;
      }
      else
      {
        if (!a20)
          _Unwind_Resume(a1);
        v24 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t sub_22375B0C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes30LRUCachedPersistenceFilesystem13DispatchWriteENSt3__14__fs10filesystem4path"
                     "ERKNS1_11SharedArrayIKcEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes30LRUCachedPersistenceFilesystem13DispatchWriteENSt3__14__fs10file"
                                "system4pathERKNS1_11SharedArrayIKcEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes30LRUCachedPersistenceFilesystem13DispatchWriteENSt3__14__fs10filesystem4pathERKNS1_11SharedArrayIKcEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes30LRUCachedPersistenceFilesystem13DispatchWriteENSt3__14__fs10filesystem4pathERKNS1_11SharedArrayIKcEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22375B134()
{
  return &unk_24EC583A8;
}

void sub_22375B144()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_22375B158(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC58338;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22375B190(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC58338;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22375B1B0(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(*(_QWORD *)(result + 8) + 216);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  return result;
}

uint64_t sub_22375B1CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_5recon8kfplanes30LRUCachedPersistenceFilesystem1"
                     "3DispatchWriteENS3_4__fs10filesystem4pathERKNS6_11SharedArrayIKcEEENK3$_0clEvEUlvE_JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_5recon8kfplanes30LRUCachedPersistence"
                                "Filesystem13DispatchWriteENS3_4__fs10filesystem4pathERKNS6_11SharedArrayIKcEEENK3$_0clEvEUlvE_JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_5recon8kfplanes30LRUCachedPersistenceFilesystem13DispatchWriteENS3_4__fs10filesystem4pathERKNS6_11SharedArrayIKcEEENK3$_0clEvEUlvE_JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_5recon8kfplanes30LRUCachedPersistenceFilesystem13DispatchWriteENS3_4__fs10filesystem4pathERKNS6_11SharedArrayIKcEEENK3$_0clEvEUlvE_JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22375B238()
{
  return &unk_24EC58398;
}

void sub_22375B244(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC583C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22375B254(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC583C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22375B284(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v6;
  std::logic_error *exception;
  std::logic_error *v8;
  std::logic_error v9[2];

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    if ((*(_BYTE *)(result + 136) & 1) == 0)
    {
      v9[0].__vftable = 0;
      v3 = *(_QWORD *)(result + 16);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)v9);
      result = *(_QWORD *)(a1 + 24);
      if (!v3 && *(uint64_t *)(result + 8) >= 1)
      {
        v6 = std::future_category();
        MEMORY[0x2276844A8](v9, 4, v6);
        exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
        v8 = std::logic_error::logic_error(exception, v9);
        v8->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
        v8[1] = v9[1];
        __cxa_throw(v8, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
      }
    }
    v4 = (unint64_t *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_22375B368(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__assoc_sub_state *a9, char a10)
{
  uint64_t v10;
  std::exception_ptr v11;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v11.__ptr_ = (void *)(v10 - 24);
  std::__assoc_sub_state::set_exception(a9, v11);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 - 24));
  MEMORY[0x2276844B4](&a10);
  JUMPOUT(0x22375B2CCLL);
}

void sub_22375B3A8(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_22375B3F4(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22375B454(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t sub_22375B4D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = off_24EC58460;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22375B560(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_24EC58460;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22375B5F0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;

  v2 = operator new(0x38uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = off_24EC58460;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = *(_QWORD *)(a1 + 24);
  v8 = v2 + 4;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_223197FA4(v8, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)(a1 + 32);
    v3[6] = *(_QWORD *)(a1 + 48);
  }
  return v3;
}

void sub_22375B694(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_22375B6E0(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v3 = *((_QWORD *)result + 1);
  v2 = *((_QWORD *)result + 2);
  *(_QWORD *)a2 = off_24EC58460;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = *((_QWORD *)result + 3);
  if (result[55] < 0)
    return (char *)sub_223197FA4((_BYTE *)(a2 + 32), *((void **)result + 4), *((_QWORD *)result + 5));
  v6 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)result + 6);
  *(_OWORD *)(a2 + 32) = v6;
  return result;
}

void sub_22375B768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22375B7AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_22375B824(void **__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    v2 = (std::__shared_weak_count *)__p[2];
    if (!v2)
      goto LABEL_3;
  }
  else
  {
    v2 = (std::__shared_weak_count *)__p[2];
    if (!v2)
      goto LABEL_3;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
    return;
  }
LABEL_3:
  operator delete(__p);
}

void sub_22375B8A4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  std::string::size_type v7;
  std::__shared_weak_count *size;
  unint64_t *v9;
  unint64_t v10;
  std::exception_ptr *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__fs::filesystem::filesystem_error *exception;
  std::string v16;
  char v17;
  std::exception_ptr v18;
  uint64_t v19;
  uint64_t v20;
  std::exception_ptr *v21;
  uint64_t v22;
  std::error_code v23;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v18.__ptr_ = &off_24EC584D0;
  v19 = v3;
  v20 = 0;
  v21 = &v18;
  sub_2236E4F6C(v3, a1 + 32, (uint64_t)&v16);
  if (!v17)
  {
    exception = (std::__fs::filesystem::filesystem_error *)__cxa_allocate_exception(0x30uLL);
    *((_BYTE *)&v16.__r_.__value_.__s + 23) = 19;
    strcpy((char *)&v16, "Failed to load file");
    v23.__cat_ = std::generic_category();
    *(_QWORD *)&v23.__val_ = 2;
    sub_2236E6644(exception, &v16, a1 + 32, v23);
    __cxa_throw(exception, MEMORY[0x24BEDB708], MEMORY[0x24BEDB268]);
  }
  v4 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
  if (v16.__r_.__value_.__l.__size_)
  {
    v5 = (unint64_t *)(v16.__r_.__value_.__l.__size_ + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = v16.__r_.__value_.__r.__words[2];
    if (v17)
    {
      size = (std::__shared_weak_count *)v16.__r_.__value_.__l.__size_;
      if (v16.__r_.__value_.__l.__size_)
      {
        v9 = (unint64_t *)(v16.__r_.__value_.__l.__size_ + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
  }
  else
  {
    v7 = v16.__r_.__value_.__r.__words[2];
  }
  if (!v21)
    sub_223198474();
  (*((void (**)(std::exception_ptr *))v21->__ptr_ + 6))(v21);
  v11 = v21;
  if (v21 == &v18)
  {
    v12 = 4;
    v11 = &v18;
  }
  else
  {
    if (!v21)
      goto LABEL_18;
    v12 = 5;
  }
  (*((void (**)(void))v11->__ptr_ + v12))();
LABEL_18:
  v13 = *v2;
  if (!v13)
    sub_2233236D4(3u);
  std::mutex::lock((std::mutex *)(v13 + 24));
  if ((*(_BYTE *)(v13 + 136) & 1) != 0
    || (v18.__ptr_ = 0, v14 = *(_QWORD *)(v13 + 16), std::exception_ptr::~exception_ptr(&v18), v14))
  {
    sub_2233236D4(2u);
  }
  *(_OWORD *)(v13 + 144) = v4;
  *(_QWORD *)(v13 + 160) = v7;
  *(_DWORD *)(v13 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v13 + 88));
  std::mutex::unlock((std::mutex *)(v13 + 24));
}

void sub_22375BAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::exception_ptr a17, uint64_t a18, uint64_t a19, std::exception_ptr *a20)
{
  uint64_t v20;
  void *v21;
  int v22;
  std::exception_ptr *v24;
  uint64_t v25;
  std::__assoc_sub_state **v26;
  std::__assoc_sub_state *v27;
  std::exception_ptr v28;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v22)
  {
LABEL_7:
    if (!a20)
      sub_223198474();
    (*((void (**)(std::exception_ptr *))a20->__ptr_ + 6))(a20);
    v24 = a20;
    if (a20 == &a17)
    {
      v25 = 4;
      v24 = &a17;
    }
    else
    {
      if (!a20)
        goto LABEL_14;
      v25 = 5;
    }
    (*((void (**)(void))v24->__ptr_ + v25))();
LABEL_14:
    __cxa_begin_catch(exception_object);
    v26 = *(std::__assoc_sub_state ***)(v20 + 8);
    std::current_exception();
    v27 = *v26;
    if (v27)
    {
      std::exception_ptr::exception_ptr(&a17, (const std::exception_ptr *)&__p);
      v28.__ptr_ = &a17;
      std::__assoc_sub_state::set_exception(v27, v28);
      std::exception_ptr::~exception_ptr(&a17);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
      __cxa_end_catch();
      JUMPOUT(0x22375BA0CLL);
    }
    sub_2233236D4(3u);
  }
  __cxa_free_exception(v21);
  goto LABEL_7;
}

void sub_22375BC0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
  if (a2)
  {
    std::exception_ptr::~exception_ptr(&a14);
    JUMPOUT(0x22375BC34);
  }
  JUMPOUT(0x22375BC2CLL);
}

void sub_22375BC20(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

uint64_t sub_22375BC3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureINS_5recon8kfplanes11SharedArrayIKcEEZNKS5_3"
                     "0LRUCachedPersistenceFilesystem12DispatchReadENSt3__14__fs10filesystem4pathEE3$_0NS1_11IWorkQueueTI"
                     "NSA_8functionIFvvEEEEEEENSA_6futureIT_EERT1_OT0_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureINS_5recon8kfplanes11SharedArrayI"
                                "KcEEZNKS5_30LRUCachedPersistenceFilesystem12DispatchReadENSt3__14__fs10filesystem4pathEE"
                                "3$_0NS1_11IWorkQueueTINSA_8functionIFvvEEEEEEENSA_6futureIT_EERT1_OT0_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureINS_5recon8kfplanes11SharedArrayIKcEEZNKS5_30LRUCachedPersistenceFilesystem12DispatchReadENSt3__14__fs10filesystem4pathEE3$_0NS1_11IWorkQueueTINSA_8functionIFvvEEEEEEENSA_6futureIT_EERT1_OT0_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureINS_5recon8kfplanes11SharedArrayIKcEEZNKS5_30LRUCachedPersistenceFilesystem12DispatchReadENSt3__14__fs10filesystem4pathEE3$_0NS1_11IWorkQueueTINSA_8functionIFvvEEEEEEENSA_6futureIT_EERT1_OT0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22375BCA8()
{
  return &unk_24EC58540;
}

void sub_22375BCB8()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_22375BCCC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC584D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22375BD04(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC584D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22375BD24(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(*(_QWORD *)(result + 8) + 216);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  return result;
}

uint64_t sub_22375BD40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNKS_5recon8kfplanes30LRUCachedPersistenceFilesystem"
                     "12DispatchReadENS3_4__fs10filesystem4pathEENK3$_0clEvEUlvE_JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNKS_5recon8kfplanes30LRUCachedPersistenc"
                                "eFilesystem12DispatchReadENS3_4__fs10filesystem4pathEENK3$_0clEvEUlvE_JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNKS_5recon8kfplanes30LRUCachedPersistenceFilesystem12DispatchReadENS3_4__fs10filesystem4pathEENK3$_0clEvEUlvE_JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNKS_5recon8kfplanes30LRUCachedPersistenceFilesystem12DispatchReadENS3_4__fs10filesystem4pathEENK3$_0clEvEUlvE_JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22375BDAC()
{
  return &unk_24EC58530;
}

const std::__fs::filesystem::path **sub_22375BDB8(std::__fs::filesystem::path **a1, std::__fs::filesystem::path *this, const std::__fs::filesystem::path **a3, std::__fs::filesystem::path *a4, uint64_t a5)
{
  const std::__fs::filesystem::path *v7;
  const std::__fs::filesystem::path **v8;
  const std::__fs::filesystem::path **v9;
  std::__fs::filesystem::path *v10;
  int v11;
  std::__fs::filesystem::path::__string_view v12;
  int v13;
  std::__fs::filesystem::path::__string_view v14;
  uint64_t *v15;
  uint64_t v16;
  const std::__fs::filesystem::path **v17;
  uint64_t v18;
  int v19;
  std::__fs::filesystem::path::__string_view v20;
  const std::__fs::filesystem::path *v21;
  int v22;
  std::__fs::filesystem::path::__string_view v23;

  v7 = this;
  v8 = (const std::__fs::filesystem::path **)a1;
  if (a1 == (std::__fs::filesystem::path **)a3)
  {
    if (this != a4)
    {
      while (1)
      {
        v13 = *(char *)(a5 + 23);
        v14.__data_ = v13 >= 0 ? (const std::string_view::value_type *)a5 : *(const std::string_view::value_type **)a5;
        v14.__size_ = v13 >= 0 ? *(unsigned __int8 *)(a5 + 23) : *(_QWORD *)(a5 + 8);
        if (!std::__fs::filesystem::path::__compare(v7, v14))
          break;
        if (++v7 == a4)
        {
          v7 = a4;
          break;
        }
      }
    }
    if (!v8)
      return 0;
    v9 = v8;
    if (&(*v8)[170] == v7)
      return v8 + 1;
  }
  else
  {
    v9 = a3;
    v10 = *a1 + 170;
    if (v10 == this)
      goto LABEL_29;
    while (1)
    {
      v11 = *(char *)(a5 + 23);
      v12.__data_ = v11 >= 0 ? (const std::string_view::value_type *)a5 : *(const std::string_view::value_type **)a5;
      v12.__size_ = v11 >= 0 ? *(unsigned __int8 *)(a5 + 23) : *(_QWORD *)(a5 + 8);
      if (!std::__fs::filesystem::path::__compare(v7, v12))
        break;
      if (++v7 == v10)
        goto LABEL_29;
    }
    if (v7 == v10)
    {
LABEL_29:
      v15 = (uint64_t *)(v8 + 1);
      if (v8 + 1 == v9)
      {
        v21 = *v9;
        if (*v9 != a4)
        {
          while (1)
          {
            v22 = *(char *)(a5 + 23);
            v23.__data_ = v22 >= 0
                        ? (const std::string_view::value_type *)a5
                        : *(const std::string_view::value_type **)a5;
            v23.__size_ = v22 >= 0 ? *(unsigned __int8 *)(a5 + 23) : *(_QWORD *)(a5 + 8);
            if (!std::__fs::filesystem::path::__compare(v21, v23))
              break;
            if (++v21 == a4)
            {
              v21 = a4;
              break;
            }
          }
          if (&(*v9)[170] == v21)
            return v8 + 2;
        }
      }
      else
      {
        v16 = 0;
        v17 = v8++;
        v18 = *v15;
        while (1)
        {
          v19 = *(char *)(a5 + 23);
          v20.__data_ = v19 >= 0 ? (const std::string_view::value_type *)a5 : *(const std::string_view::value_type **)a5;
          v20.__size_ = v19 >= 0 ? *(unsigned __int8 *)(a5 + 23) : *(_QWORD *)(a5 + 8);
          if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v18 + v16), v20))
            break;
          v16 += 24;
          if (v16 == 4080)
            goto LABEL_29;
        }
        v9 = v8;
        if ((const std::__fs::filesystem::path *)(v18 + v16) == &(*v8)[170])
          return v17 + 2;
      }
    }
    else
    {
      v9 = v8;
      if (v7 == &(*v8)[170])
        return v8 + 1;
    }
  }
  return v9;
}

void sub_22375BFCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22375C02C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22375C03C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22375C04C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22375C05C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

void sub_22375C06C(char *a1)
{
  if (a1)
  {
    sub_22375C06C(*(_QWORD *)a1);
    sub_22375C06C(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_22375C0C4(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 / 0xAA];
  v6 = (unint64_t)*v5;
  v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
  v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
  if (v7 == v8)
    goto LABEL_11;
  do
  {
    if (*(char *)(v7 + 23) < 0)
    {
      v9 = *(void **)v7;
      v7 += 24;
      operator delete(v9);
      v6 = (unint64_t)*v5;
      if (v7 - (_QWORD)*v5 != 4080)
        continue;
    }
    else
    {
      v7 += 24;
      if (v7 - v6 != 4080)
        continue;
    }
    v10 = (unint64_t)v5[1];
    ++v5;
    v6 = v10;
    v7 = v10;
  }
  while (v7 != v8);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_11:
  *(_QWORD *)(a1 + 40) = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_13:
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
LABEL_18:
    *(_QWORD *)(a1 + 32) = v13;
  }
  else if (v12 == 2)
  {
    v13 = 170;
    goto LABEL_18;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22375C260(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22375C7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22375C7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22375C80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22375C864(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22375CDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22375CDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22375CE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22375CE68(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, char **a5, const char **a6)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  const char *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  _BYTE v42[24];
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    sub_22375D3E4((uint64_t)v42, *a5, a6);
    v15 = (char *)operator new(0x50uLL);
    v16 = (std::__shared_weak_count *)v15;
    *((_QWORD *)v15 + 1) = 0;
    v17 = (unint64_t *)(v15 + 8);
    *((_QWORD *)v15 + 2) = 0;
    *(_QWORD *)v15 = &off_24EC20730;
    *((_QWORD *)v15 + 3) = off_24EC20780;
    *((_OWORD *)v15 + 2) = *(_OWORD *)&v42[8];
    *((_QWORD *)v15 + 6) = v43;
    *(_OWORD *)(v15 + 56) = v44;
    *((_QWORD *)v15 + 9) = v45;
    *(_QWORD *)&v39 = v12;
    *((_QWORD *)&v39 + 1) = v13;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *(_QWORD *)&v40 = v15 + 24;
    *((_QWORD *)&v40 + 1) = v15;
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
    v41 = v15 + 24;
    do
      v20 = __ldaxr(v17);
    while (__stlxr(v20 - 1, v17));
    if (!v20)
    {
      (*(void (**)(char *))(*(_QWORD *)v15 + 16))(v15);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (v13)
    {
      v21 = (unint64_t *)&v13->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v41[31] >= 0)
      v23 = v41 + 8;
    else
      v23 = (char *)*((_QWORD *)v41 + 1);
    if (v41[55] >= 0)
      v24 = v41 + 32;
    else
      v24 = (char *)*((_QWORD *)v41 + 4);
    v25 = _os_log_pack_fill();
    *(_DWORD *)v25 = 136315394;
    *(_QWORD *)(v25 + 4) = v23;
    *(_WORD *)(v25 + 12) = 2080;
    *(_QWORD *)(v25 + 14) = v24;
    v26 = operator new();
    v27 = *((unsigned __int8 *)a2 + 23);
    if ((v27 & 0x80u) == 0)
      v28 = a2;
    else
      v28 = (uint64_t *)*a2;
    if ((v27 & 0x80u) != 0)
      v27 = a2[1];
    *(_QWORD *)v26 = v12;
    *(_OWORD *)(v26 + 8) = v39;
    *(_OWORD *)(v26 + 24) = v40;
    *(_QWORD *)(v26 + 40) = v28;
    *(_QWORD *)(v26 + 48) = v27;
    *(_BYTE *)(v26 + 56) = type;
    *(_QWORD *)v42 = v26;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v42);
    v29 = *(_QWORD *)v42;
    *(_QWORD *)v42 = 0;
    if (v29)
    {
      v30 = *(std::__shared_weak_count **)(v29 + 32);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = *(std::__shared_weak_count **)(v29 + 16);
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      MEMORY[0x227684CE8](v29, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v36 = *a5;
    v37 = *a6;
    *(_DWORD *)v42 = 136315394;
    *(_QWORD *)&v42[4] = v36;
    *(_WORD *)&v42[12] = 2080;
    *(_QWORD *)&v42[14] = v37;
    v38 = (void *)_os_log_send_and_compose_impl();
    if (v38)
      free(v38);
  }
}

void sub_22375D358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22375D37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22375D390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_2231A87A4((uint64_t)va1);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22375D3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22375D3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

unint64_t sub_22375D3E4(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24EC20780;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_22375D564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22375D580(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a2)
{
  std::mutex *m;
  unsigned int v5;
  uint64_t v6;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8;
  unsigned int v9;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10;
  std::chrono::steady_clock::time_point v11;
  std::chrono::system_clock::time_point v12;
  std::unique_lock<std::mutex> v14;

  m = (std::mutex *)(a1 + 24);
  v14.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v14.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 8) != 0)
  {
    v6 = 2;
    goto LABEL_26;
  }
  if ((v5 & 4) != 0)
  {
    v6 = ((v5 >> 2) & 1) == 0;
    goto LABEL_26;
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
  {
    if (*a2 <= std::chrono::steady_clock::now().__d_.__rep_)
      goto LABEL_10;
    v10 = *a2;
    v11.__d_.__rep_ = v10 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v11.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v12.__d_.__rep_)
      {
        v7 = 0;
        goto LABEL_7;
      }
      if (v12.__d_.__rep_ < 1)
      {
        if ((unint64_t)v12.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v7 = 0x8000000000000000;
          goto LABEL_7;
        }
      }
      else if ((unint64_t)v12.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v7 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v11.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_22:
          v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_8;
        }
LABEL_7:
        v8.__d_.__rep_ = v7 + v11.__d_.__rep_;
LABEL_8:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 88), &v14, v8);
        std::chrono::steady_clock::now();
        goto LABEL_9;
      }
      v7 = 1000 * v12.__d_.__rep_;
      if (1000 * v12.__d_.__rep_ > (v11.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        goto LABEL_22;
      goto LABEL_7;
    }
LABEL_9:
    std::chrono::steady_clock::now();
LABEL_10:
    v9 = *(_DWORD *)(a1 + 136);
    if ((v9 & 4) != 0)
      goto LABEL_24;
  }
  v9 = *(_DWORD *)(a1 + 136);
LABEL_24:
  v6 = ((v9 >> 2) & 1) == 0;
  if (v14.__owns_)
  {
    m = v14.__m_;
LABEL_26:
    std::mutex::unlock(m);
  }
  return v6;
}

void sub_22375D700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a2 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a2 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a2, &__lk);
  v4 = *(_QWORD *)(a2 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a2 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 160);
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_22375D7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_22375D7D0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22375DD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22375DD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22375DD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22375DDD8()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_22375DDEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC585C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22375DE24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC585C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22375DE44()
{
  return kdebug_trace();
}

uint64_t sub_22375DE78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes30LRUCachedPersistenceFilesystem9F"
                     "illCacheEmE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes30LRUCachedPersistenceF"
                                "ilesystem9FillCacheEmE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes30LRUCachedPersistenceFilesystem9FillCacheEmE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes30LRUCachedPersistenceFilesystem9FillCacheEmE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22375DEE4()
{
  return &unk_24EC58620;
}

__n128 sub_22375DEF0(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char v11;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, __n128 *))off_24EC58218[v5])(&v11, v4);
LABEL_10:
    result = *a3;
    *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    v4[1].n128_u32[2] = 0;
    return result;
  }
  result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v8 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  return result;
}

uint64_t sub_22375DFC8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_24EC58218[v5])(&v9, v4);
LABEL_9:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    v7 = (unint64_t *)(result + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t sub_22375E088(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24EC58650;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

void sub_22375E0D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC58650;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22375E120(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_24EC58650;
  v2[1] = v3;
  v4 = v2 + 2;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_223197FA4(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
    v2[4] = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_22375E190(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_22375E1A4(char *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  __int128 v4;

  v2 = *((_QWORD *)result + 1);
  *a2 = off_24EC58650;
  a2[1] = v2;
  v3 = a2 + 2;
  if (result[39] < 0)
    return (char *)sub_223197FA4(v3, *((void **)result + 2), *((_QWORD *)result + 3));
  v4 = *((_OWORD *)result + 1);
  a2[4] = *((_QWORD *)result + 4);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_22375E1E4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_22375E1F8(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 39) < 0)
  {
    operator delete(__p[2]);
    __p = v1;
  }
  operator delete(__p);
}

_QWORD *sub_22375E238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  void **v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  void *v33;
  int v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *shared_owners;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  const char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *result;
  uint64_t v67;
  std::__shared_weak_count_vtbl *v68;
  std::__shared_weak_count *v69;
  const char *v70;
  uint64_t v71;
  int v72;
  void *__dst[2];
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[4];
  _QWORD v77[3];
  _QWORD *v78;
  _BYTE object[24];
  unint64_t v80;
  char v81;
  void *__p[2];
  unint64_t v83;
  char v84;
  void *v85[4];
  const char *v86;
  int v87;
  const char *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v77[0] = &off_24EC586C0;
  v77[1] = v2;
  v77[2] = 0;
  v78 = v77;
  memset(v85, 0, sizeof(v85));
  LODWORD(v86) = 728309800;
  kdebug_trace();
  v3 = a1 + 16;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 32) + 232))(*(_QWORD *)(v2 + 32), a1 + 16);
  kdebug_trace();
  if ((v4 & 1) == 0)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_2540CC4F0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC4F0))
    {
      sub_22455F53C(object);
      HIBYTE(v85[2]) = 19;
      strcpy((char *)v85, "cv3d.recon.kfplanes");
      sub_2232300E0((uint64_t **)object, (uint64_t)v85, &qword_2540CC4E8);
      if (SHIBYTE(v85[2]) < 0)
        operator delete(v85[0]);
      __cxa_guard_release(&qword_2540CC4F0);
      v3 = a1 + 16;
    }
    v75 = qword_2540CC4E8;
    if (**(int **)(qword_2540CC4E8 + 56) <= 3)
    {
      v6 = *(unsigned __int8 *)(qword_2540CC4E8 + 72);
      v7 = sub_22322F254(qword_2540CC4E8, "OSLogSurrogateAppender", 1, 0);
      v8 = v7;
      if (v6 || v7 != 0)
      {
        v85[0] = &v75;
        v85[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        v85[2] = (void *)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v85[3]) = 3;
        v86 = "unknown file";
        v87 = 323;
        v89 = 0;
        v90 = 0;
        v88 = "unknown function";
        v71 = v3;
        if (*(char *)(a1 + 39) < 0)
        {
          sub_223197FA4(__dst, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)v3;
          v74 = *(_QWORD *)(v3 + 16);
        }
        v72 = v6;
        if (v74 >= 0)
          v10 = __dst;
        else
          v10 = (void **)__dst[0];
        v11 = *(_QWORD *)v85[0];
        v12 = (const char *)(*(_QWORD *)v85[0] + 16);
        v70 = v12;
        if (*(char *)(*(_QWORD *)v85[0] + 39) < 0)
        {
          v12 = *(const char **)(v11 + 16);
          v13 = *(_QWORD *)(v11 + 24);
          v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v15 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          v13 = *(unsigned __int8 *)(*(_QWORD *)v85[0] + 39);
          v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v14 & 1) != 0)
            goto LABEL_18;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)object);
          if ((_BYTE)v80)
          {
            xmmword_255788F40 = *(_OWORD *)object;
            unk_255788F50 = *(_QWORD *)&object[16];
          }
          else
          {
            byte_255788F57 = 14;
            strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_18:
        if (byte_255788F57 >= 0)
          v16 = (const char *)&xmmword_255788F40;
        else
          v16 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v17 = byte_255788F57;
        else
          v17 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v16, v12);
        v18 = &object[8];
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v17 >= 0x17)
        {
          v19 = v10;
          v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v20 = v17 | 7;
          v21 = v20 + 1;
          v18 = operator new(v20 + 1);
          *(_QWORD *)&object[16] = v17;
          v80 = v21 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v18;
          v10 = v19;
        }
        else
        {
          HIBYTE(v80) = v17;
          if (!v17)
          {
LABEL_32:
            v18[v17] = 0;
            v81 = 1;
            v22 = __p;
            if (v13 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v13 >= 0x17)
            {
              v23 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v13 | 7) != 0x17)
                v23 = v13 | 7;
              v24 = v23 + 1;
              v22 = operator new(v23 + 1);
              __p[1] = (void *)v13;
              v83 = v24 | 0x8000000000000000;
              __p[0] = v22;
            }
            else
            {
              HIBYTE(v83) = v13;
              if (!v13)
              {
LABEL_40:
                *((_BYTE *)v22 + v13) = 0;
                v84 = 1;
                v25 = *(NSObject **)object;
                if (SHIBYTE(v83) < 0)
                  operator delete(__p[0]);
                if (v81 && SHIBYTE(v80) < 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (!v8 || !*(_QWORD *)(v8 + 24))
                {
                  os_log_type_enabled(v25, OS_LOG_TYPE_INFO);
                  *(_DWORD *)object = 136315138;
                  *(_QWORD *)&object[4] = v10;
                  v33 = (void *)_os_log_send_and_compose_impl();
                  v34 = v72;
                  if (v33)
                    free(v33);
                  goto LABEL_85;
                }
                v26 = _os_log_pack_size();
                v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
                v28 = (std::__shared_weak_count *)operator new();
                v28->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v28->__shared_weak_owners_ = 0;
                v28[1].__vftable = v27;
                v30 = strlen((const char *)v10);
                v69 = v28;
                if (v30 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v31 = v30;
                if (v30 >= 0x17)
                {
                  v35 = v10;
                  v36 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v30 | 7) != 0x17)
                    v36 = v30 | 7;
                  v37 = v36 + 1;
                  v32 = operator new(v36 + 1);
                  *(_QWORD *)&object[8] = v31;
                  *(_QWORD *)&object[16] = v37 | 0x8000000000000000;
                  *(_QWORD *)object = v32;
                  v10 = v35;
                }
                else
                {
                  object[23] = v30;
                  v32 = object;
                  if (!v30)
                  {
LABEL_59:
                    v68 = v27;
                    v32[v31] = 0;
                    v38 = *(_QWORD *)object;
                    v76[0] = *(_QWORD *)&object[8];
                    *(_QWORD *)((char *)v76 + 7) = *(_QWORD *)&object[15];
                    v39 = object[23];
                    v40 = operator new(0x38uLL);
                    v41 = (std::__shared_weak_count *)v40;
                    v40[1] = 0;
                    v42 = v40 + 1;
                    v40[3] = off_24EC1FA48;
                    v43 = (char *)(v40 + 3);
                    v40[2] = 0;
                    v40[4] = v38;
                    v44 = (char *)(v40 + 4);
                    *v40 = &off_24EC1F9F8;
                    v40[5] = v76[0];
                    *(_QWORD *)((char *)v40 + 47) = *(_QWORD *)((char *)v76 + 7);
                    *((_BYTE *)v40 + 55) = v39;
                    do
                      v45 = __ldxr(p_shared_owners);
                    while (__stxr(v45 + 1, p_shared_owners));
                    do
                      v46 = __ldxr(v42);
                    while (__stxr(v46 + 1, v42));
                    do
                      v47 = __ldaxr(v42);
                    while (__stlxr(v47 - 1, v42));
                    if (!v47)
                    {
                      (*(void (**)(_QWORD *))(*v40 + 16))(v40);
                      std::__shared_weak_count::__release_weak(v41);
                    }
                    do
                      v48 = __ldaxr(p_shared_owners);
                    while (__stlxr(v48 - 1, p_shared_owners));
                    if (!v48)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                    if (SHIBYTE(v41[2].__vftable) >= 0)
                      shared_owners = v44;
                    else
                      shared_owners = (char *)v41[1].__shared_owners_;
                    v50 = _os_log_pack_fill();
                    *(_DWORD *)v50 = 136315138;
                    *(_QWORD *)(v50 + 4) = shared_owners;
                    v51 = operator new();
                    v52 = *(unsigned __int8 *)(v11 + 39);
                    v53 = v70;
                    if ((v52 & 0x80u) != 0)
                    {
                      v53 = *(const char **)(v11 + 16);
                      v52 = *(_QWORD *)(v11 + 24);
                    }
                    *(_QWORD *)v51 = v68;
                    *(_QWORD *)(v51 + 8) = v68;
                    *(_QWORD *)(v51 + 16) = v69;
                    *(_QWORD *)(v51 + 24) = v43;
                    *(_QWORD *)(v51 + 32) = v41;
                    *(_QWORD *)(v51 + 40) = v53;
                    *(_QWORD *)(v51 + 48) = v52;
                    *(_BYTE *)(v51 + 56) = 1;
                    *(_QWORD *)object = v51;
                    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), object);
                    v54 = *(_QWORD *)object;
                    *(_QWORD *)object = 0;
                    v34 = v72;
                    if (v54)
                    {
                      v55 = *(std::__shared_weak_count **)(v54 + 32);
                      if (v55)
                      {
                        v56 = (unint64_t *)&v55->__shared_owners_;
                        do
                          v57 = __ldaxr(v56);
                        while (__stlxr(v57 - 1, v56));
                        if (!v57)
                        {
                          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                          std::__shared_weak_count::__release_weak(v55);
                        }
                      }
                      v58 = *(std::__shared_weak_count **)(v54 + 16);
                      if (v58)
                      {
                        v59 = (unint64_t *)&v58->__shared_owners_;
                        do
                          v60 = __ldaxr(v59);
                        while (__stlxr(v60 - 1, v59));
                        if (!v60)
                        {
                          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                          std::__shared_weak_count::__release_weak(v58);
                        }
                      }
                      MEMORY[0x227684CE8](v54, 0x10F0C40B62ED6C6);
                    }
LABEL_85:
                    if (SHIBYTE(v74) < 0)
                      operator delete(__dst[0]);
                    if (v34)
                    {
                      if (*(char *)(a1 + 39) < 0)
                      {
                        sub_223197FA4(object, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
                      }
                      else
                      {
                        *(_OWORD *)object = *(_OWORD *)v71;
                        *(_QWORD *)&object[16] = *(_QWORD *)(v71 + 16);
                      }
                      v61 = object;
                      if (object[23] < 0)
                        v61 = *(const char **)object;
                      sub_22322C138((uint64_t)v85, "File to be removed from persistence does not exist %s", v61);
                      if ((object[23] & 0x80000000) != 0)
                        operator delete(*(void **)object);
                      sub_223182C08((uint64_t)v85);
                    }
                    sub_223182C08((uint64_t)v85);
                    v62 = v90;
                    if (v90)
                    {
                      v63 = (unint64_t *)&v90->__shared_owners_;
                      do
                        v64 = __ldaxr(v63);
                      while (__stlxr(v64 - 1, v63));
                      if (!v64)
                      {
                        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                        std::__shared_weak_count::__release_weak(v62);
                      }
                    }
                    goto LABEL_101;
                  }
                }
                memcpy(v32, v10, v31);
                goto LABEL_59;
              }
            }
            memmove(v22, v12, v13);
            goto LABEL_40;
          }
        }
        memmove(v18, v16, v17);
        goto LABEL_32;
      }
    }
  }
LABEL_101:
  if (!v78)
    sub_223198474();
  (*(void (**)(_QWORD *))(*v78 + 48))(v78);
  result = v78;
  if (v78 == v77)
  {
    v67 = 4;
    result = v77;
  }
  else
  {
    if (!v78)
      return result;
    v67 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v67))(result, v65);
}

#error "22375F4CC: call analysis failed (funcsize=477)"

void sub_22375F608(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_255788F58);
    JUMPOUT(0x22375F7FCLL);
  }
  JUMPOUT(0x22375F7F4);
}

void sub_22375F620(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (a2)
  {
    v4 = *(_QWORD *)(v2 - 176);
    *(_QWORD *)(v2 - 176) = 0;
    if (v4)
    {
      v5 = *(std::__shared_weak_count **)(v4 + 32);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = *(std::__shared_weak_count **)(v4 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      MEMORY[0x227684CE8](v4, 0x10F0C40B62ED6C6);
      sub_22316DC48(a1);
    }
    JUMPOUT(0x22375F7FCLL);
  }
  JUMPOUT(0x22375F7F4);
}

void sub_22375F6C4(void *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v7;
  unint64_t v8;

  if (a2)
  {
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 - 1, v5));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    do
      v8 = __ldaxr(v4);
    while (__stlxr(v8 - 1, v4));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      sub_22316DC48(a1);
    }
    JUMPOUT(0x22375F7FCLL);
  }
  JUMPOUT(0x22375F7F4);
}

void sub_22375F774(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x227684CE8](v2, 0x10D0C40B950D02ALL);
    sub_22316DC48(a1);
  }
  JUMPOUT(0x22375F7F4);
}

void sub_22375F7A4(uint64_t a1, int a2)
{
  uint64_t v2;
  void *v3;

  if (a2)
  {
    if (*(_BYTE *)(v2 - 144) && *(char *)(v2 - 145) < 0)
      operator delete(*(void **)(v2 - 168));
    v3 = *(void **)(v2 - 176);
    if (v3)
      os_release(v3);
    JUMPOUT(0x22375F7FCLL);
  }
  JUMPOUT(0x22375F7F4);
}

void sub_22375F7EC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

uint64_t sub_22375F804(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes30LRUCachedPersistenceFilesystem14DispatchRemoveENSt3__14__fs10filesystem4pathEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes30LRUCachedPersistenceFilesystem14DispatchRemoveENSt3__14__fs10fil"
                                "esystem4pathEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes30LRUCachedPersistenceFilesystem14DispatchRemoveENSt3__14__fs10filesystem4pathEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes30LRUCachedPersistenceFilesystem14DispatchRemoveENSt3__14__fs10filesystem4pathEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22375F870()
{
  return &unk_24EC58730;
}

void sub_22375F880()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_22375F894(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC586C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22375F8CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC586C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22375F8EC(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(*(_QWORD *)(result + 8) + 216);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  return result;
}

uint64_t sub_22375F908(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_5recon8kfplanes30LRUCachedPersistenceFilesystem1"
                     "4DispatchRemoveENS3_4__fs10filesystem4pathEENK3$_0clEvEUlvE_JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_5recon8kfplanes30LRUCachedPersistence"
                                "Filesystem14DispatchRemoveENS3_4__fs10filesystem4pathEENK3$_0clEvEUlvE_JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_5recon8kfplanes30LRUCachedPersistenceFilesystem14DispatchRemoveENS3_4__fs10filesystem4pathEENK3$_0clEvEUlvE_JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZZNS_5recon8kfplanes30LRUCachedPersistenceFilesystem14DispatchRemoveENS3_4__fs10filesystem4pathEENK3$_0clEvEUlvE_JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22375F974()
{
  return &unk_24EC58720;
}

void sub_22375F980(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22375FEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22375FF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22375FF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_22375FF84(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  uint64_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint8x16_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  int32x4_t v73;
  int32x4_t v74;
  uint16x8_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::string *v86;
  __int128 v87;
  uint64_t (**v88)();
  uint64_t (**v89)();
  uint64_t v91;
  std::__shared_weak_count *size;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  std::mutex *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::string::size_type v107;
  std::string *v108;
  std::string::size_type v109;
  std::string::size_type v110;
  int v111;
  unsigned __int8 v114;
  unsigned __int8 v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *p_shared_owners;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  std::string v127;
  __int128 v128;
  double v129;
  double valuePtr[2];
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t (**v135)();
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  __int16 v139;
  __int128 v140;
  __int128 v141;
  int v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  _BYTE __p[24];
  _OWORD v146[2];
  _BYTE v147[50];
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v140 = 0u;
  v141 = 0u;
  v142 = 728309972;
  kdebug_trace();
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 24))
      v10 = 1;
    else
      v10 = a4 == 0;
    if (v10)
      goto LABEL_126;
  }
  else
  {
    v11 = *a5;
    *(_BYTE *)(a1 + 8) = 1;
    *(_QWORD *)a1 = v11;
    if (*(_BYTE *)(a1 + 24))
      v12 = 1;
    else
      v12 = a4 == 0;
    if (v12)
      goto LABEL_126;
  }
  if (!*(_BYTE *)(a3 + 504))
    goto LABEL_126;
  if ((!*(_DWORD *)(a3 + 480) || !*(_DWORD *)(a3 + 484))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v13 = sub_223C3F490(a3 + 448, (uint64_t)v147);
  v14 = *(std::__shared_weak_count **)&v147[16];
  if (*(_QWORD *)&v147[16])
  {
    v15 = (unint64_t *)(*(_QWORD *)&v147[16] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!*(_BYTE *)(a3 + 504))
  {
    v147[0] = 0;
    v148 = 0;
    sub_22324A974();
  }
  if ((!*(_DWORD *)(a3 + 480) || !*(_DWORD *)(a3 + 484))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3F490(a3 + 448, (uint64_t)__p);
  *(_QWORD *)v147 = &off_24EC21420;
  *(_OWORD *)&v147[8] = *(_OWORD *)&__p[8];
  *(_OWORD *)&v147[24] = v146[0];
  *(_OWORD *)&v147[34] = *(_OWORD *)((char *)v146 + 10);
  v148 = 1;
  v135 = &off_24EC21420;
  v17 = *(_OWORD *)&__p[8];
  if (*(_QWORD *)&__p[16])
  {
    v18 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v20 = *(_WORD *)&v147[48];
    do
      v21 = __ldxr(v18);
    while (__stxr(v21 + 1, v18));
    v137 = *(_OWORD *)&v147[24];
    v138 = *(_QWORD *)&v147[40];
    do
      v22 = __ldxr(v18);
    while (__stxr(v22 + 1, v18));
    v136 = v17;
    v139 = v20;
    do
      v23 = __ldaxr(v18);
    while (__stlxr(v23 - 1, v18));
    if (!v23)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
    }
    do
      v24 = __ldaxr(v18);
    while (__stlxr(v24 - 1, v18));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
    }
  }
  else
  {
    v136 = *(unint64_t *)&v147[8];
    v137 = *(_OWORD *)&v147[24];
    v138 = *(_QWORD *)&v147[40];
    v139 = *(_WORD *)&v147[48];
  }
  if (v148)
  {
    v25 = *(std::__shared_weak_count **)&v147[16];
    if (*(_QWORD *)&v147[16])
    {
      v26 = (unint64_t *)(*(_QWORD *)&v147[16] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  *(_QWORD *)&valuePtr[1] = &off_24EC21420;
  if (*((_QWORD *)&v136 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldxr(v28);
    while (__stxr(v30 + 1, v28));
    v132 = v137;
    v133 = v138;
    do
      v31 = __ldxr(v28);
    while (__stxr(v31 + 1, v28));
    v131 = v136;
    v134 = v139;
    do
      v32 = __ldaxr(v28);
    while (__stlxr(v32 - 1, v28));
    if (!v32)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
    }
    do
      v33 = __ldaxr(v28);
    while (__stlxr(v33 - 1, v28));
    if (v33)
    {
      v34 = DWORD2(v132);
      v35 = HIDWORD(v132);
      v36 = v131;
      if (!(_QWORD)v131)
        goto LABEL_77;
    }
    else
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
      v34 = DWORD2(v132);
      v35 = HIDWORD(v132);
      v36 = v131;
      if (!(_QWORD)v131)
        goto LABEL_77;
    }
  }
  else
  {
    v131 = (unint64_t)v136;
    v132 = v137;
    v133 = v138;
    v134 = v139;
    v34 = DWORD2(v137);
    v35 = HIDWORD(v137);
    v36 = v136;
    if (!(_QWORD)v136)
      goto LABEL_77;
  }
  if (*((_QWORD *)&v131 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    do
      v39 = __ldaxr(v37);
    while (__stlxr(v39 - 1, v37));
    if (!v39)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v131 + 1) + 16))(*((_QWORD *)&v131 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v131 + 1));
    }
    v36 = v131;
    v40 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 - 1, v40));
    if (!v42)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v131 + 1) + 16))(*((_QWORD *)&v131 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v131 + 1));
    }
  }
  if (HIBYTE(v134))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v36 + 96))(v147, v36, 0);
    v43 = HIDWORD(v133);
    v45 = *((_QWORD *)&v132 + 1);
    v44 = (unsigned __int8 *)v132;
    if ((_BYTE)v134)
      goto LABEL_78;
    goto LABEL_86;
  }
LABEL_77:
  *(_QWORD *)v147 = 0;
  v43 = HIDWORD(v133);
  v45 = *((_QWORD *)&v132 + 1);
  v44 = (unsigned __int8 *)v132;
  if ((_BYTE)v134)
  {
LABEL_78:
    if (v44)
    {
      if (*((_QWORD *)&v131 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
        if (!v48)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v131 + 1) + 16))(*((_QWORD *)&v131 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v131 + 1));
        }
      }
      (*(void (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)v131 + 88))(v131, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v44 = (unsigned __int8 *)v132;
    }
  }
LABEL_86:
  v49 = (v43 * HIDWORD(v45));
  if (!(_DWORD)v49 || !(_DWORD)v45)
  {
    v77 = 0;
    v78 = *(_QWORD *)v147;
    *(_QWORD *)v147 = 0;
    if (!v78)
      goto LABEL_109;
    goto LABEL_108;
  }
  v50 = 0;
  v51 = &v44[v49];
  v52 = v45 - (unint64_t)(v45 & 0x1F);
  v53 = v45 - (unint64_t)(v45 & 7);
  v54.i64[0] = 0x100000001;
  v54.i64[1] = 0x100000001;
  v55.i64[0] = 0x101010101010101;
  v55.i64[1] = 0x101010101010101;
  do
  {
    if (v45 >= 8uLL)
    {
      if (v45 < 0x20uLL)
      {
        v57 = 0;
LABEL_100:
        v56 = &v44[v53];
        v73 = 0uLL;
        v74 = (int32x4_t)v50;
        do
        {
          v75 = vmovl_u8((uint8x8_t)vceq_s8(*(int8x8_t *)&v44[v57], (int8x8_t)0x101010101010101));
          v73 = vaddq_s32(v73, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v75), v54));
          v74 = vaddq_s32(v74, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v75.i8), v54));
          v57 += 8;
        }
        while (v53 != v57);
        v50 = vaddvq_s32(vaddq_s32(v74, v73));
        if ((v45 & 7) == 0)
          goto LABEL_89;
        goto LABEL_103;
      }
      v58 = 0;
      v59 = 0uLL;
      v60 = (int32x4_t)v50;
      v61 = 0uLL;
      v62 = 0uLL;
      v63 = 0uLL;
      v64 = 0uLL;
      v65 = 0uLL;
      v66 = 0uLL;
      do
      {
        v67 = (uint8x16_t)vceqq_s8(*(int8x16_t *)&v44[v58], v55);
        v68 = vmovl_u8(*(uint8x8_t *)v67.i8);
        v69 = vmovl_high_u8(v67);
        v70 = (uint8x16_t)vceqq_s8(*(int8x16_t *)&v44[v58 + 16], v55);
        v71 = vmovl_u8(*(uint8x8_t *)v70.i8);
        v72 = vmovl_high_u8(v70);
        v62 = vaddq_s32(v62, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v69), v54));
        v61 = vaddq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v69.i8), v54));
        v59 = vaddq_s32(v59, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v68), v54));
        v60 = vaddq_s32(v60, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v68.i8), v54));
        v66 = vaddq_s32(v66, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v72), v54));
        v65 = vaddq_s32(v65, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v72.i8), v54));
        v64 = vaddq_s32(v64, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v71), v54));
        v63 = vaddq_s32(v63, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v71.i8), v54));
        v58 += 32;
      }
      while (v52 != v58);
      v50 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v63, v60), vaddq_s32(v65, v61)), vaddq_s32(vaddq_s32(v64, v59), vaddq_s32(v66, v62))));
      if ((v45 & 0x1F) == 0)
        goto LABEL_89;
      if ((v45 & 0x1Fu) >= 8uLL)
      {
        v57 = v45 - (unint64_t)(v45 & 0x1F);
        goto LABEL_100;
      }
      v56 = &v44[v52];
    }
    else
    {
      v56 = v44;
    }
    do
    {
LABEL_103:
      v76 = *v56++;
      if (v76 == 1)
        ++v50;
    }
    while (v56 != &v44[v45]);
LABEL_89:
    v44 += v43;
  }
  while (v44 != v51);
  v77 = v50;
  v78 = *(_QWORD *)v147;
  *(_QWORD *)v147 = 0;
  if (v78)
LABEL_108:
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
LABEL_109:
  if (v35 >= v34)
    v79 = v34;
  else
    v79 = v35;
  v80 = 2 * (v79 >> 4) * (unint64_t)(v79 >> 4);
  if (*((_QWORD *)&v131 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v131 + 1) + 16))(*((_QWORD *)&v131 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v131 + 1));
    }
  }
  if (v80 < v77)
  {
    v83 = *a5;
    if (!*(_BYTE *)(a1 + 24))
      *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = v83;
  }
  if (*((_QWORD *)&v136 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
    }
  }
LABEL_126:
  v147[23] = 20;
  strcpy(v147, "Stats.KeyframePlanes");
  v86 = std::string::append((std::string *)v147, ".FloorInfo", 0xAuLL);
  v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v86->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v87;
  v86->__r_.__value_.__l.__size_ = 0;
  v86->__r_.__value_.__r.__words[2] = 0;
  v86->__r_.__value_.__r.__words[0] = 0;
  if ((v147[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v147);
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_130;
  }
  else
  {
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_137;
LABEL_130:
    if (*(_BYTE *)(a1 + 24))
    {
      sub_223737E44(a2 + 40, (int64x2_t *)&v135);
      v88 = v135;
      if (v135 == (uint64_t (**)())v136)
      {
LABEL_135:
        if (!v135)
          goto LABEL_137;
      }
      else
      {
        v89 = v135;
        while (*((_BYTE *)*v89 + 48) != 1)
        {
          if (++v89 == (uint64_t (**)())v136)
            goto LABEL_135;
        }
        v91 = *a5;
        if (!*(_BYTE *)(a1 + 40))
          *(_BYTE *)(a1 + 40) = 1;
        *(_QWORD *)(a1 + 32) = v91;
        valuePtr[0] = 0.0;
        if (!*(_BYTE *)(a1 + 8))
          sub_22324A974();
        valuePtr[0] = (double)(v91 - *(_QWORD *)a1) / 1000000000.0;
        v129 = 0.0;
        if (!*(_BYTE *)(a1 + 24))
          sub_22324A974();
        v129 = (double)(v91 - *(_QWORD *)(a1 + 16)) / 1000000000.0;
        *(_OWORD *)&v147[8] = 0uLL;
        *(_QWORD *)v147 = &v147[8];
        sub_2245314F4(v147, &v127);
        v128 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
        sub_22323DF84((uint64_t)v147, *(char **)&v147[8]);
        v147[23] = 16;
        strcpy(v147, "time_first_floor");
        sub_224527BAC((uint64_t)v147, (CFStringRef *)&v127);
        sub_2236772E4((uint64_t)&v128, v127.__r_.__value_.__l.__data_, valuePtr);
        size = (std::__shared_weak_count *)v127.__r_.__value_.__l.__size_;
        if (v127.__r_.__value_.__l.__size_)
        {
          v93 = (unint64_t *)(v127.__r_.__value_.__l.__size_ + 8);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if ((v147[23] & 0x80000000) != 0)
          operator delete(*(void **)v147);
        v147[23] = 16;
        strcpy(v147, "time_delay_floor");
        sub_224527BAC((uint64_t)v147, (CFStringRef *)&v127);
        sub_2236772E4((uint64_t)&v128, v127.__r_.__value_.__l.__data_, &v129);
        v95 = (std::__shared_weak_count *)v127.__r_.__value_.__l.__size_;
        if (v127.__r_.__value_.__l.__size_)
        {
          v96 = (unint64_t *)(v127.__r_.__value_.__l.__size_ + 8);
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        if ((v147[23] & 0x80000000) != 0)
          operator delete(*(void **)v147);
        *(_QWORD *)v147 = "cv3d.recon.";
        *(_QWORD *)&v147[8] = 11;
        v98 = __p[23];
        v99 = __p;
        if (__p[23] < 0)
        {
          v99 = *(_BYTE **)__p;
          v98 = *(_QWORD *)&__p[8];
        }
        *(_QWORD *)&v147[16] = v99;
        *(_QWORD *)&v147[24] = v98;
        sub_2231A9820((uint64_t)v147, (uint64_t)&v147[32], 0, 0, &v127);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v100 = sub_2241471F8();
          v101 = v100[2];
          if (!v101)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v101 = v100[2];
          }
          v102 = *(_QWORD *)(v101 + 64);
          v103 = (std::mutex *)(v102 + 32);
          std::mutex::lock((std::mutex *)(v102 + 32));
          v105 = *(_QWORD *)(v102 + 96);
          v104 = *(_QWORD *)(v102 + 104);
          std::mutex::unlock(v103);
          if (v105 != v104)
          {
            sub_2241471F8();
            v106 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v106 + 24))(v106))
            {
              memset(v147, 0, 32);
              *(_DWORD *)&v147[32] = 728325608;
              kdebug_trace();
              sub_223762E50(v106, (uint64_t)&v128);
              kdebug_trace();
            }
          }
        }
        memset(v147, 0, 32);
        *(_DWORD *)&v147[32] = 728325624;
        kdebug_trace();
        v107 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v107 = v127.__r_.__value_.__l.__size_;
        if (v107 >= 0x11)
        {
          v108 = &v127;
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v108 = (std::string *)v127.__r_.__value_.__r.__words[0];
          v109 = v108->__r_.__value_.__r.__words[0];
          v110 = v108->__r_.__value_.__l.__size_;
          v111 = v108->__r_.__value_.__s.__data_[16];
          if (v109 == 0x6365722E64337663 && v110 == 0x73746174532E6E6FLL && v111 == 46)
            sub_223187510();
        }
        kdebug_trace();
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v127.__r_.__value_.__l.__data_);
        memset(v147, 0, 32);
        *(_DWORD *)&v147[32] = 728325632;
        kdebug_trace();
        mach_absolute_time();
        v114 = atomic_load((unsigned __int8 *)&qword_255795560);
        if ((v114 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
        {
          mach_timebase_info((mach_timebase_info_t)&v127);
          LODWORD(v126) = HIDWORD(v127.__r_.__value_.__r.__words[0]);
          LODWORD(v125) = v127.__r_.__value_.__l.__data_;
          *(double *)&qword_255795558 = (double)v125 / (double)v126;
          __cxa_guard_release(&qword_255795560);
        }
        sub_223677448(&v143, (uint64_t)&v128);
        v115 = atomic_load((unsigned __int8 *)&qword_25578DF68);
        if ((v115 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
        {
          qword_25578BBC8 = (uint64_t)&off_24EC37778;
          sub_223476B20((uint64_t)&qword_25578BBD0);
          __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
          __cxa_guard_release(&qword_25578DF68);
        }
        sub_2231AEC20(&v127, (uint64_t)&v143);
        sub_223762F24((uint64_t)&qword_25578BBD0, (uint64_t)&v127);
        v116 = (std::__shared_weak_count *)v127.__r_.__value_.__l.__size_;
        if (v127.__r_.__value_.__l.__size_)
        {
          v117 = (unint64_t *)(v127.__r_.__value_.__l.__size_ + 8);
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        v119 = v144;
        if (v144)
        {
          p_shared_owners = (unint64_t *)&v144->__shared_owners_;
          do
            v121 = __ldaxr(p_shared_owners);
          while (__stlxr(v121 - 1, p_shared_owners));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        kdebug_trace();
        v122 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        if (*((_QWORD *)&v128 + 1))
        {
          v123 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v88 = v135;
        if (!v135)
          goto LABEL_137;
      }
      *(_QWORD *)&v136 = v88;
      operator delete(v88);
    }
  }
LABEL_137:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return kdebug_trace();
}

void sub_223760E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;

  __cxa_guard_abort(&qword_25578DF68);
  v49 = a41;
  if (a41)
  {
    p_shared_owners = (unint64_t *)&a41->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  sub_2231874DC(v47 - 176);
  sub_223167354((uint64_t)&a16);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a47 < 0)
    operator delete(a42);
  sub_2231874DC((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_2237610CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string *v8;
  __int128 v9;
  void *v10;
  void **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v21;
  std::string::size_type v22;
  int v23;
  __n128 *v26;
  std::string *v27;
  size_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  void *v32;
  void **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  std::mutex *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  int v46;
  __n128 *v49;
  std::string *v50;
  size_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  unsigned __int8 v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  std::string v59;
  void *v60[2];
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  std::string __p;
  _BYTE v66[32];
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a3 + 48);
  v4 = *(_QWORD *)(a3 + 56);
  v63 = (v4 - v3) >> 4;
  v5 = 0;
  if (v4 != v3)
  {
    v6 = (_QWORD *)(a2 + 40);
    do
    {
      v7 = sub_223340F28(v6, v3);
      if (v7 && (*(_BYTE *)(v7[4] + 48) & 0xFD) == 1)
        ++v5;
      v3 += 16;
    }
    while (v3 != v4);
  }
  v62 = v5;
  v66[23] = 20;
  strcpy(v66, "Stats.KeyframePlanes");
  v8 = std::string::append((std::string *)v66, ".GlobalPlanes", 0xDuLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v61 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)v60 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((v66[23] & 0x80000000) != 0)
    operator delete(*(void **)v66);
  *(_QWORD *)v66 = "cv3d.recon.";
  *(_QWORD *)&v66[8] = 11;
  v10 = (void *)HIBYTE(v61);
  v11 = v60;
  if (v61 < 0)
  {
    v11 = (void **)v60[0];
    v10 = v60[1];
  }
  *(_QWORD *)&v66[16] = v11;
  *(_QWORD *)&v66[24] = v10;
  sub_2231A9820((uint64_t)v66, (uint64_t)&v67, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v12 = sub_2241471F8();
    v13 = v12[2];
    if (!v13)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v13 = v12[2];
    }
    v14 = *(_QWORD *)(v13 + 64);
    v15 = (std::mutex *)(v14 + 32);
    std::mutex::lock((std::mutex *)(v14 + 32));
    v17 = *(_QWORD *)(v14 + 96);
    v16 = *(_QWORD *)(v14 + 104);
    std::mutex::unlock(v15);
    if (v17 != v16)
    {
      sub_2241471F8();
      v18 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18))
      {
        memset(v66, 0, sizeof(v66));
        v67 = 728325608;
        kdebug_trace();
        sub_2236DEBE0((double *)&qword_255788F20, v18, &v63, "Removed");
        kdebug_trace();
      }
    }
  }
  memset(v66, 0, sizeof(v66));
  v67 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v21 = p_p->__r_.__value_.__r.__words[0];
    v22 = p_p->__r_.__value_.__l.__size_;
    v23 = p_p->__r_.__value_.__s.__data_[16];
    if (v21 == 0x6365722E64337663 && v22 == 0x73746174532E6E6FLL && v23 == 46)
    {
      v26 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v28 = __p.__r_.__value_.__l.__size_;
      sub_22318760C((uint64_t *)v26, v27, v28, &v63, (uint64_t)"Removed", 7);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(v66, 0, sizeof(v66));
  v67 = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v29 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&__p);
    LODWORD(v56) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    LODWORD(v55) = __p.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v55 / (double)v56;
    __cxa_guard_release(&qword_255795560);
  }
  v30 = v63;
  v31 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C420);
  qword_25578C460 += v30;
  std::mutex::unlock(&stru_25578C420);
  kdebug_trace();
  *(_QWORD *)v66 = "cv3d.recon.";
  *(_QWORD *)&v66[8] = 11;
  v32 = (void *)HIBYTE(v61);
  v33 = v60;
  if (v61 < 0)
  {
    v33 = (void **)v60[0];
    v32 = v60[1];
  }
  *(_QWORD *)&v66[16] = v33;
  *(_QWORD *)&v66[24] = v32;
  sub_2231A9820((uint64_t)v66, (uint64_t)&v67, 0, 0, &v59);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v34 = sub_2241471F8();
    v35 = v34[2];
    if (!v35)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v35 = v34[2];
    }
    v36 = *(_QWORD *)(v35 + 64);
    v37 = (std::mutex *)(v36 + 32);
    std::mutex::lock((std::mutex *)(v36 + 32));
    v39 = *(_QWORD *)(v36 + 96);
    v38 = *(_QWORD *)(v36 + 104);
    std::mutex::unlock(v37);
    if (v39 != v38)
    {
      sub_2241471F8();
      v40 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40))
      {
        memset(v66, 0, sizeof(v66));
        v67 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
          strcpy((char *)&__p, "FloorCeilingDeleted");
          *(_QWORD *)&v64 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v64 + 1) = 2;
          v41 = sub_2241471F8();
          sub_223663E94((uint64_t)v41, v40, &v62, (uint64_t)&__p, &v64);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  memset(v66, 0, sizeof(v66));
  v67 = 728325624;
  kdebug_trace();
  v42 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v42 = v59.__r_.__value_.__l.__size_;
  if (v42 >= 0x11)
  {
    v43 = &v59;
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v43 = (std::string *)v59.__r_.__value_.__r.__words[0];
    v44 = v43->__r_.__value_.__r.__words[0];
    v45 = v43->__r_.__value_.__l.__size_;
    v46 = v43->__r_.__value_.__s.__data_[16];
    if (v44 == 0x6365722E64337663 && v45 == 0x73746174532E6E6FLL && v46 == 46)
    {
      v49 = sub_223187510();
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v59;
      else
        v50 = (std::string *)v59.__r_.__value_.__r.__words[0];
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      else
        v51 = v59.__r_.__value_.__l.__size_;
      sub_22318760C((uint64_t *)v49, v50, v51, &v62, (uint64_t)"FloorCeilingDeleted", 19);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  memset(v66, 0, sizeof(v66));
  v67 = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v52 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&__p);
    LODWORD(v58) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    LODWORD(v57) = __p.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v57 / (double)v58;
    __cxa_guard_release(&qword_255795560);
  }
  v53 = v62;
  v54 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C568);
  qword_25578C5A8 += v53;
  std::mutex::unlock(&stru_25578C568);
  kdebug_trace();
  if (SHIBYTE(v61) < 0)
    operator delete(v60[0]);
}

void sub_2237619B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  __cxa_guard_abort(&qword_25578DF68);
  sub_2231874DC((uint64_t)&a34);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223761AE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  void *v16;
  void **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  std::mutex *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  std::string::size_type size;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  int v30;
  __n128 *v33;
  std::string *v34;
  size_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned __int8 v38;
  void *v39;
  void **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  std::mutex *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  int v54;
  __n128 *v57;
  std::string *v58;
  size_t v59;
  unsigned __int8 v60;
  float v61;
  unsigned __int8 v62;
  double v63;
  void *v64;
  void **v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  std::mutex *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  std::string::size_type v74;
  std::string *v75;
  std::string::size_type v76;
  std::string::size_type v77;
  int v78;
  __n128 *v81;
  std::string *v82;
  size_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  unsigned __int8 v86;
  void *v87;
  void **v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  std::mutex *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  std::string::size_type v97;
  std::string *v98;
  std::string::size_type v99;
  std::string::size_type v100;
  int v101;
  __n128 *v104;
  std::string *v105;
  size_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  unsigned __int8 v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  std::string v118;
  void *v119[2];
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  float v123;
  uint64_t v124;
  int64x2_t v125;
  __int128 v126;
  void *__p[4];
  _BYTE v128[32];
  int v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  sub_223737E44(a2 + 40, &v125);
  v124 = (v125.i64[1] - v125.i64[0]) >> 3;
  if (v125.i64[1] == v125.i64[0])
  {
    v6 = NAN;
    goto LABEL_10;
  }
  v3 = v125.i64[1] - v125.i64[0] - 8;
  if (v3 >= 8)
  {
    v7 = 0;
    v8 = 0;
    v9 = (v3 >> 3) + 1;
    v5 = (uint64_t *)(v125.i64[0] + 8 * (v9 & 0x3FFFFFFFFFFFFFFELL));
    v10 = v125.i64[0] + 8;
    v11 = v9 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v7 += *(_DWORD *)(*(_QWORD *)(v10 - 8) + 208) & 1;
      v8 += *(_DWORD *)(*(_QWORD *)v10 + 208) & 1;
      v10 += 16;
      v11 -= 2;
    }
    while (v11);
    v4 = v8 + v7;
    if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  else
  {
    v4 = 0;
    v5 = (uint64_t *)v125.i64[0];
  }
  do
  {
    v12 = *v5++;
    v4 += *(_DWORD *)(v12 + 208) & 1;
  }
  while (v5 != (uint64_t *)v125.i64[1]);
LABEL_9:
  v6 = (float)v4 / (float)(unint64_t)((v125.i64[1] - v125.i64[0]) >> 3);
LABEL_10:
  v123 = v6;
  v13 = *(_QWORD *)(a2 + 24);
  v121 = *(_QWORD *)(a2 + 104);
  v122 = v13;
  v128[23] = 20;
  strcpy(v128, "Stats.KeyframePlanes");
  v14 = std::string::append((std::string *)v128, ".Storage", 8uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v120 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)v119 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v128[23] & 0x80000000) != 0)
    operator delete(*(void **)v128);
  *(_QWORD *)v128 = "cv3d.recon.";
  *(_QWORD *)&v128[8] = 11;
  v16 = (void *)HIBYTE(v120);
  v17 = v119;
  if (v120 < 0)
  {
    v17 = (void **)v119[0];
    v16 = v119[1];
  }
  *(_QWORD *)&v128[16] = v17;
  *(_QWORD *)&v128[24] = v16;
  sub_2231A9820((uint64_t)v128, (uint64_t)&v129, 0, 0, &v118);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v18 = sub_2241471F8();
    v19 = v18[2];
    if (!v19)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v19 = v18[2];
    }
    v20 = *(_QWORD *)(v19 + 64);
    v21 = (std::mutex *)(v20 + 32);
    std::mutex::lock((std::mutex *)(v20 + 32));
    v23 = *(_QWORD *)(v20 + 96);
    v22 = *(_QWORD *)(v20 + 104);
    std::mutex::unlock(v21);
    if (v23 != v22)
    {
      sub_2241471F8();
      v24 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
      {
        memset(v128, 0, sizeof(v128));
        v129 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
        {
          HIBYTE(__p[2]) = 12;
          *(_QWORD *)&v126 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v126 + 1) = 2;
          strcpy((char *)__p, "GlobalPlanes");
          v25 = sub_2241471F8();
          sub_223663E94((uint64_t)v25, v24, &v124, (uint64_t)__p, &v126);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }
        kdebug_trace();
      }
    }
  }
  memset(v128, 0, sizeof(v128));
  v129 = 728325624;
  kdebug_trace();
  size = HIBYTE(v118.__r_.__value_.__r.__words[2]);
  if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v118.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v27 = &v118;
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v118.__r_.__value_.__r.__words[0];
    v28 = v27->__r_.__value_.__r.__words[0];
    v29 = v27->__r_.__value_.__l.__size_;
    v30 = v27->__r_.__value_.__s.__data_[16];
    if (v28 == 0x6365722E64337663 && v29 == 0x73746174532E6E6FLL && v30 == 46)
    {
      v33 = sub_223187510();
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v118;
      else
        v34 = (std::string *)v118.__r_.__value_.__r.__words[0];
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      else
        v35 = v118.__r_.__value_.__l.__size_;
      sub_22318760C((uint64_t *)v33, v34, v35, &v124, (uint64_t)"GlobalPlanes", 12);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  memset(v128, 0, sizeof(v128));
  v129 = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v36 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v111) = HIDWORD(__p[0]);
    LODWORD(v110) = __p[0];
    *(double *)&qword_255795558 = (double)v110 / (double)v111;
    __cxa_guard_release(&qword_255795560);
  }
  v37 = v124;
  v38 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C338);
  qword_25578C378 = v37;
  byte_25578C380 = 1;
  std::mutex::unlock(&stru_25578C338);
  kdebug_trace();
  *(_QWORD *)v128 = "cv3d.recon.";
  *(_QWORD *)&v128[8] = 11;
  v39 = (void *)HIBYTE(v120);
  v40 = v119;
  if (v120 < 0)
  {
    v40 = (void **)v119[0];
    v39 = v119[1];
  }
  *(_QWORD *)&v128[16] = v40;
  *(_QWORD *)&v128[24] = v39;
  sub_2231A9820((uint64_t)v128, (uint64_t)&v129, 0, 0, &v118);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v41 = sub_2241471F8();
    v42 = v41[2];
    if (!v42)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v42 = v41[2];
    }
    v43 = *(_QWORD *)(v42 + 64);
    v44 = (std::mutex *)(v43 + 32);
    std::mutex::lock((std::mutex *)(v43 + 32));
    v46 = *(_QWORD *)(v43 + 96);
    v45 = *(_QWORD *)(v43 + 104);
    std::mutex::unlock(v44);
    if (v46 != v45)
    {
      sub_2241471F8();
      v47 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
      {
        memset(v128, 0, sizeof(v128));
        v129 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
        {
          v48 = (char *)operator new(0x20uLL);
          *(_OWORD *)&__p[1] = xmmword_2245B9420;
          strcpy(v48, "RestoredGlobalPlaneRatio");
          *(_QWORD *)&v126 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v126 + 1) = 2;
          __p[0] = v48;
          v49 = sub_2241471F8();
          sub_22361FE58((uint64_t)v49, v47, (int *)&v123, (uint64_t)__p, &v126);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }
        kdebug_trace();
      }
    }
  }
  memset(v128, 0, sizeof(v128));
  v129 = 728325624;
  kdebug_trace();
  v50 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
  if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v50 = v118.__r_.__value_.__l.__size_;
  if (v50 >= 0x11)
  {
    v51 = &v118;
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v51 = (std::string *)v118.__r_.__value_.__r.__words[0];
    v52 = v51->__r_.__value_.__r.__words[0];
    v53 = v51->__r_.__value_.__l.__size_;
    v54 = v51->__r_.__value_.__s.__data_[16];
    if (v52 == 0x6365722E64337663 && v53 == 0x73746174532E6E6FLL && v54 == 46)
    {
      v57 = sub_223187510();
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &v118;
      else
        v58 = (std::string *)v118.__r_.__value_.__r.__words[0];
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      else
        v59 = v118.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v57, v58, v59, &v123, (uint64_t)"RestoredGlobalPlaneRatio", 24);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  memset(v128, 0, sizeof(v128));
  v129 = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v60 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v113) = HIDWORD(__p[0]);
    LODWORD(v112) = __p[0];
    *(double *)&qword_255795558 = (double)v112 / (double)v113;
    __cxa_guard_release(&qword_255795560);
  }
  v61 = v123;
  v62 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C3A8);
  v63 = v61;
  if (byte_25578C3F0)
    v63 = *(double *)&qword_25578C3E8 + v63;
  else
    byte_25578C3F0 = 1;
  qword_25578C3E8 = *(_QWORD *)&v63;
  *(double *)&qword_25578C3F8 = *(double *)&qword_25578C3F8 + 1.0;
  std::mutex::unlock(&stru_25578C3A8);
  kdebug_trace();
  *(_QWORD *)v128 = "cv3d.recon.";
  *(_QWORD *)&v128[8] = 11;
  v64 = (void *)HIBYTE(v120);
  v65 = v119;
  if (v120 < 0)
  {
    v65 = (void **)v119[0];
    v64 = v119[1];
  }
  *(_QWORD *)&v128[16] = v65;
  *(_QWORD *)&v128[24] = v64;
  sub_2231A9820((uint64_t)v128, (uint64_t)&v129, 0, 0, &v118);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v66 = sub_2241471F8();
    v67 = v66[2];
    if (!v67)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v67 = v66[2];
    }
    v68 = *(_QWORD *)(v67 + 64);
    v69 = (std::mutex *)(v68 + 32);
    std::mutex::lock((std::mutex *)(v68 + 32));
    v71 = *(_QWORD *)(v68 + 96);
    v70 = *(_QWORD *)(v68 + 104);
    std::mutex::unlock(v69);
    if (v71 != v70)
    {
      sub_2241471F8();
      v72 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72))
      {
        memset(v128, 0, sizeof(v128));
        v129 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72))
        {
          HIBYTE(__p[2]) = 21;
          strcpy((char *)__p, "KeyframeSegmentations");
          *(_QWORD *)&v126 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v126 + 1) = 2;
          v73 = sub_2241471F8();
          sub_223663E94((uint64_t)v73, v72, &v122, (uint64_t)__p, &v126);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }
        kdebug_trace();
      }
    }
  }
  memset(v128, 0, sizeof(v128));
  v129 = 728325624;
  kdebug_trace();
  v74 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
  if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v74 = v118.__r_.__value_.__l.__size_;
  if (v74 >= 0x11)
  {
    v75 = &v118;
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v75 = (std::string *)v118.__r_.__value_.__r.__words[0];
    v76 = v75->__r_.__value_.__r.__words[0];
    v77 = v75->__r_.__value_.__l.__size_;
    v78 = v75->__r_.__value_.__s.__data_[16];
    if (v76 == 0x6365722E64337663 && v77 == 0x73746174532E6E6FLL && v78 == 46)
    {
      v81 = sub_223187510();
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &v118;
      else
        v82 = (std::string *)v118.__r_.__value_.__r.__words[0];
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      else
        v83 = v118.__r_.__value_.__l.__size_;
      sub_22318760C((uint64_t *)v81, v82, v83, &v122, (uint64_t)"KeyframeSegmentations", 21);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  memset(v128, 0, sizeof(v128));
  v129 = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v84 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v115) = HIDWORD(__p[0]);
    LODWORD(v114) = __p[0];
    *(double *)&qword_255795558 = (double)v114 / (double)v115;
    __cxa_guard_release(&qword_255795560);
  }
  v85 = v122;
  v86 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C488);
  qword_25578C4C8 = v85;
  byte_25578C4D0 = 1;
  std::mutex::unlock(&stru_25578C488);
  kdebug_trace();
  *(_QWORD *)v128 = "cv3d.recon.";
  *(_QWORD *)&v128[8] = 11;
  v87 = (void *)HIBYTE(v120);
  v88 = v119;
  if (v120 < 0)
  {
    v88 = (void **)v119[0];
    v87 = v119[1];
  }
  *(_QWORD *)&v128[16] = v88;
  *(_QWORD *)&v128[24] = v87;
  sub_2231A9820((uint64_t)v128, (uint64_t)&v129, 0, 0, &v118);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v89 = sub_2241471F8();
    v90 = v89[2];
    if (!v90)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v90 = v89[2];
    }
    v91 = *(_QWORD *)(v90 + 64);
    v92 = (std::mutex *)(v91 + 32);
    std::mutex::lock((std::mutex *)(v91 + 32));
    v94 = *(_QWORD *)(v91 + 96);
    v93 = *(_QWORD *)(v91 + 104);
    std::mutex::unlock(v92);
    if (v94 != v93)
    {
      sub_2241471F8();
      v95 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v95 + 24))(v95))
      {
        memset(v128, 0, sizeof(v128));
        v129 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v95 + 24))(v95))
        {
          HIBYTE(__p[2]) = 18;
          strcpy((char *)__p, "KeyframePlaneLinks");
          *(_QWORD *)&v126 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v126 + 1) = 2;
          v96 = sub_2241471F8();
          sub_223663E94((uint64_t)v96, v95, &v121, (uint64_t)__p, &v126);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }
        kdebug_trace();
      }
    }
  }
  memset(v128, 0, sizeof(v128));
  v129 = 728325624;
  kdebug_trace();
  v97 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
  if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v97 = v118.__r_.__value_.__l.__size_;
  if (v97 >= 0x11)
  {
    v98 = &v118;
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v98 = (std::string *)v118.__r_.__value_.__r.__words[0];
    v99 = v98->__r_.__value_.__r.__words[0];
    v100 = v98->__r_.__value_.__l.__size_;
    v101 = v98->__r_.__value_.__s.__data_[16];
    if (v99 == 0x6365722E64337663 && v100 == 0x73746174532E6E6FLL && v101 == 46)
    {
      v104 = sub_223187510();
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v105 = &v118;
      else
        v105 = (std::string *)v118.__r_.__value_.__r.__words[0];
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v106 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      else
        v106 = v118.__r_.__value_.__l.__size_;
      sub_22318760C((uint64_t *)v104, v105, v106, &v121, (uint64_t)"KeyframePlaneLinks", 18);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  memset(v128, 0, sizeof(v128));
  v129 = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v107 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v117) = HIDWORD(__p[0]);
    LODWORD(v116) = __p[0];
    *(double *)&qword_255795558 = (double)v116 / (double)v117;
    __cxa_guard_release(&qword_255795560);
  }
  v108 = v121;
  v109 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v109 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578C4F8);
  qword_25578C538 = v108;
  byte_25578C540 = 1;
  std::mutex::unlock(&stru_25578C4F8);
  kdebug_trace();
  if (SHIBYTE(v120) < 0)
    operator delete(v119[0]);
  if (v125.i64[0])
  {
    v125.i64[1] = v125.i64[0];
    operator delete((void *)v125.i64[0]);
  }
}

void sub_223762C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,_Unwind_Exception *exception_object,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  __cxa_guard_abort(&qword_25578DF68);
  sub_2231874DC((uint64_t)&exception_object);
  if (a21 < 0)
    operator delete(__p);
  if (!a26)
    _Unwind_Resume(a1);
  operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_223762E50(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 14;
    strcpy((char *)__p, "TimeFirstFloor");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_22356F5A4((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223762F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223762F24(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  char v8;
  char v9;
  char __p[17];
  char v11;

  v11 = 16;
  strcpy(__p, "time_first_floor");
  v4 = sub_223763054(a2, (uint64_t)__p);
  v6 = v5;
  if (v11 < 0)
    operator delete(*(void **)__p);
  if (v6)
  {
    std::mutex::lock((std::mutex *)(a1 + 2672));
    if (!*(_BYTE *)(a1 + 2744))
    {
      *(_QWORD *)(a1 + 2736) = v4;
      *(_BYTE *)(a1 + 2744) = 1;
    }
    std::mutex::unlock((std::mutex *)(a1 + 2672));
  }
  v11 = 16;
  strcpy(__p, "time_delay_floor");
  v7 = sub_223763054(a2, (uint64_t)__p);
  v9 = v8;
  if (v11 < 0)
    operator delete(*(void **)__p);
  if (v9)
  {
    std::mutex::lock((std::mutex *)(a1 + 2560));
    if (!*(_BYTE *)(a1 + 2632))
    {
      *(_QWORD *)(a1 + 2624) = v7;
      *(_BYTE *)(a1 + 2632) = 1;
    }
    std::mutex::unlock((std::mutex *)(a1 + 2560));
  }
}

void sub_223763034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_223763054(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const __CFNumber *v9;
  CFTypeID TypeID;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *key;
  std::__shared_weak_count *v16;
  void *value;
  uint64_t valuePtr;

  sub_224527BAC(a2, (CFStringRef *)&key);
  v3 = (unint64_t)key;
  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_14:
    v3 = 0;
    v11 = v16;
    if (!v16)
      return v3 & 0xFFFFFFFFFFFFFF00 | v5;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_14;
LABEL_7:
  value = 0;
  if (!v3)
    goto LABEL_17;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, (const void *)v3, (const void **)&value))
  {
    v3 = 0;
LABEL_17:
    LOBYTE(v5) = 0;
    v11 = v16;
    if (!v16)
      return v3 & 0xFFFFFFFFFFFFFF00 | v5;
    goto LABEL_22;
  }
  v9 = (const __CFNumber *)value;
  if (value)
  {
    TypeID = CFNumberGetTypeID();
    if (CFGetTypeID(v9) == TypeID)
    {
      valuePtr = 0;
      CFNumberGetValue(v9, kCFNumberDoubleType, &valuePtr);
      LOBYTE(v5) = valuePtr;
      v3 = valuePtr & 0xFFFFFFFFFFFFFF00;
      v11 = v16;
      if (!v16)
        return v3 & 0xFFFFFFFFFFFFFF00 | v5;
    }
    else
    {
      LOBYTE(v5) = 0;
      v3 = 0;
      v11 = v16;
      if (!v16)
        return v3 & 0xFFFFFFFFFFFFFF00 | v5;
    }
  }
  else
  {
    LOBYTE(v5) = 0;
    v3 = 0;
    v11 = v16;
    if (!v16)
      return v3 & 0xFFFFFFFFFFFFFF00 | v5;
  }
LABEL_22:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v3 & 0xFFFFFFFFFFFFFF00 | v5;
}

void sub_2237631D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2237631EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  __int16 *v26;
  __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v53;
  __int16 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  __int16 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  uint64_t (**v84)();
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int16 v90;

  v83 = 0;
  v84 = &off_24EC24788;
  sub_2236B4564((_DWORD *)(a1 + 56), (void **)&v83, (uint64_t *)&v85);
  v7 = (HIDWORD(v88) - 1);
  if (v7 >= 2)
  {
    v8 = (DWORD2(v88) - 1);
    if (v8 >= 2)
    {
      v9 = v8 - 1;
      v10 = 1;
      do
      {
        v11 = 0;
        v12 = v10;
        v13 = HIDWORD(*(_QWORD *)(a1 + 44));
        v14 = *(_DWORD *)(a1 + 68);
        v15 = *(_QWORD *)(a1 + 24);
        v16 = v15 + 2 * (v14 * (v10 - 1));
        v17 = v15 + 2 * (v14 * v10++);
        v18 = v15 + 2 * (v14 * v10);
        v19 = v89;
        v20 = *((_QWORD *)&v86 + 1) + (HIDWORD(v89) * v12);
        v21 = v89;
        v22 = v9;
        do
        {
          v23 = v11;
          v24 = 2 * v13 + v11;
          v11 += v13;
          v25 = 2 * v11;
          v26 = (__int16 *)(v17 + 2 * v23);
          v27 = (__int16 *)(v17 + 2 * v24);
          v28 = v16 + v25;
          v29 = v18 + v25;
          _H0 = *v26;
          _H1 = *v27;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _Q2.i32[0] = *(_DWORD *)(v26 + 1);
          _Q3.i32[0] = *(_DWORD *)(v27 + 1);
          _Q3 = vcvtq_f32_f16(*(float16x4_t *)_Q3.f32);
          _Q2 = vcvtq_f32_f16(*(float16x4_t *)_Q2.f32);
          _S0 = _S0 * _S1;
          _S1 = vcvt_f16_f32(vmulq_f32(_Q2, _Q3)).u32[0];
          _Q2.i16[0] = *(_WORD *)v28;
          _Q3.i16[0] = *(_WORD *)v29;
          __asm
          {
            FCVT            S3, H3
            FCVT            H0, S0
            FCVT            S2, H2
          }
          _Q2.f32[0] = _Q2.f32[0] * _Q3.f32[0];
          _Q3.i32[0] = *(_DWORD *)(v28 + 2);
          __asm { FCVT            S0, H0 }
          _Q4.i32[0] = *(_DWORD *)(v29 + 2);
          _Q4 = vcvtq_f32_f16(*(float16x4_t *)_Q4.f32);
          _Q3 = vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q3.f32), _Q4);
          __asm { FCVT            S4, H1 }
          _S0 = _S0 + _Q4.f32[0];
          __asm { FCVT            H0, S0 }
          LOWORD(_S1) = HIWORD(_S1);
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
            FCVT            H2, S2
          }
          _S0 = _S0 + _S1;
          _S1 = vcvt_f16_f32(_Q3).u32[0];
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H1
          }
          _Q2.f32[0] = _Q2.f32[0] + _Q3.f32[0];
          __asm
          {
            FCVT            H2, S2
            FCVT            H0, S0
          }
          LOWORD(_S1) = HIWORD(_S1);
          __asm
          {
            FCVT            S2, H2
            FCVT            S1, H1
          }
          _S1 = _Q2.f32[0] + _S1;
          __asm
          {
            FCVT            H1, S1
            FCVT            S0, H0
            FCVT            S1, H1
          }
          _S0 = _S0 + _S1;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          *(_BYTE *)(v20 + v21) = _S0 > 1.9922;
          v21 += v19;
          --v22;
        }
        while (v22);
      }
      while (v10 != v7);
    }
  }
  v53 = v85;
  v85 = 0uLL;
  v79 = v86;
  v80 = v87;
  v81 = v88;
  v82 = v89;
  v54 = v90;
  v56 = *(_QWORD *)(a1 + 8);
  v55 = *(std::__shared_weak_count **)(a1 + 16);
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v58 = __ldxr(p_shared_owners);
    while (__stxr(v58 + 1, p_shared_owners));
    v59 = *(_WORD *)(a1 + 72);
    do
      v60 = __ldxr(p_shared_owners);
    while (__stxr(v60 + 1, p_shared_owners));
    v76 = *(_OWORD *)(a1 + 24);
    v77 = *(_OWORD *)(a1 + 40);
    v78 = *(_OWORD *)(a1 + 56);
    do
      v61 = __ldxr(p_shared_owners);
    while (__stxr(v61 + 1, p_shared_owners));
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      v74 = v53;
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
      v53 = v74;
    }
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      v75 = v53;
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
      v53 = v75;
    }
  }
  else
  {
    v59 = *(_WORD *)(a1 + 72);
    v76 = *(_OWORD *)(a1 + 24);
    v77 = *(_OWORD *)(a1 + 40);
    v78 = *(_OWORD *)(a1 + 56);
  }
  *(_QWORD *)a2 = &off_24EC24788;
  *(_OWORD *)(a2 + 8) = v53;
  *(_OWORD *)(a2 + 24) = v79;
  *(_OWORD *)(a2 + 40) = v80;
  *(_OWORD *)(a2 + 56) = v81;
  *(_QWORD *)(a2 + 72) = v82;
  *(_WORD *)(a2 + 80) = v54;
  *(_QWORD *)(a2 + 88) = &off_24EC25150;
  if (v55)
  {
    v64 = (unint64_t *)&v55->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    do
      v66 = __ldxr(v64);
    while (__stxr(v66 + 1, v64));
    *(_OWORD *)(a2 + 112) = v76;
    *(_OWORD *)(a2 + 128) = v77;
    *(_OWORD *)(a2 + 144) = v78;
    do
      v67 = __ldxr(v64);
    while (__stxr(v67 + 1, v64));
    *(_QWORD *)(a2 + 96) = v56;
    *(_QWORD *)(a2 + 104) = v55;
    *(_WORD *)(a2 + 160) = v59;
    do
      v68 = __ldaxr(v64);
    while (__stlxr(v68 - 1, v64));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
    do
      v69 = __ldaxr(v64);
    while (__stlxr(v69 - 1, v64));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
    do
      v70 = __ldaxr(v64);
    while (__stlxr(v70 - 1, v64));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 96) = v56;
    *(_QWORD *)(a2 + 104) = 0;
    *(_OWORD *)(a2 + 112) = v76;
    *(_OWORD *)(a2 + 128) = v77;
    *(_OWORD *)(a2 + 144) = v78;
    *(_WORD *)(a2 + 160) = v59;
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

uint64_t sub_223763650(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC57960;
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_2237636B4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC57960;
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

void sub_223763718(uint64_t a1@<X0>, std::__fs::filesystem::path *a2@<X1>, uint64_t a3@<X8>)
{
  std::__fs::filesystem::path __p;

  sub_2236E5318(a2, a1, &__p);
  sub_2236E4F6C(a1, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
}

void sub_223763778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_223763794(uint64_t a1, std::__fs::filesystem::path *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  _BOOL8 v8;
  std::__fs::filesystem::path __p;

  sub_2236E5318(a2, a1, &__p);
  result = sub_2236E51C0(a1, a3, a4, (uint64_t)&__p);
  v8 = result;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    return v8;
  }
  return result;
}

void sub_223763814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223763830(uint64_t a1, std::__fs::filesystem::path *a2)
{
  uint64_t result;
  uint64_t v4;
  std::__fs::filesystem::path __p;

  sub_2236E5318(a2, a1, &__p);
  result = (*(uint64_t (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(a1 + 32) + 328))(*(_QWORD *)(a1 + 32), &__p);
  v4 = result;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    return v4;
  }
  return result;
}

uint64_t sub_2237638C8(uint64_t a1, std::__fs::filesystem::path *a2)
{
  uint64_t v3;
  std::__fs::filesystem::path __p;
  __int128 v6;
  __int128 v7;
  int v8;

  sub_2236E5318(a2, a1, &__p);
  v6 = 0u;
  v7 = 0u;
  v8 = 728309800;
  kdebug_trace();
  v3 = (*(uint64_t (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(a1 + 32) + 232))(*(_QWORD *)(a1 + 32), &__p);
  kdebug_trace();
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  return v3;
}

void sub_223763984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_2231874DC((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_2237639AC@<X0>(uint64_t a1@<X0>, const std::__fs::filesystem::path *a2@<X1>, _QWORD *a3@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::exception_ptr v13;

  v4 = sub_2236E5A70(a1, a2);
  v5 = operator new();
  *(_QWORD *)(v5 + 24) = 850045863;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 1018212795;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 124) = 0u;
  *(_QWORD *)v5 = &off_24EC557C0;
  v12 = v5;
  std::mutex::lock((std::mutex *)(v5 + 24));
  if ((*(_BYTE *)(v5 + 136) & 1) != 0
    || (v13.__ptr_ = 0, v6 = *(_QWORD *)(v5 + 16), std::exception_ptr::~exception_ptr(&v13), v6))
  {
    sub_2233236D4(2u);
  }
  *(_BYTE *)(v5 + 140) = v4;
  *(_DWORD *)(v5 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v5 + 88));
  std::mutex::unlock((std::mutex *)(v5 + 24));
  v7 = v12;
  if (!v12)
    sub_2233236D4(3u);
  *a3 = v12;
  std::mutex::lock((std::mutex *)(v7 + 24));
  v8 = *(_DWORD *)(v7 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  v9 = (unint64_t *)(v7 + 8);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  *(_DWORD *)(v7 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v7 + 24));
  return sub_2234AB028(&v12);
}

void sub_223763B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

void sub_223763B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

void sub_223763B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2234AB028(&a9);
  _Unwind_Resume(a1);
}

void sub_223763B54(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *i;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *__p[2];
  char v12;

  v4 = (char *)a2[1];
  for (i = (char *)a2[2]; v4 != i; v4 += 464)
  {
    __p[0] = v4;
    v6 = sub_223763CFC((uint64_t)a1, (uint64_t)v4, (uint64_t)&unk_2245BA939, (_OWORD **)__p);
    sub_223331D64((uint64_t)(v6 + 4), (uint64_t)v4);
  }
  v7 = a2[4];
  v8 = a2[5];
  while (v7 != v8)
  {
    v9 = sub_22342DA5C(a1, v7);
    if (v9)
    {
      sub_2231AFBB8(a1, v9, (uint64_t)__p);
      v10 = __p[0];
      __p[0] = 0;
      if (v10)
      {
        if (v12)
          sub_223523BA4((uint64_t)v10 + 16);
        operator delete(v10);
      }
    }
    v7 += 16;
  }
}

void sub_223763C30(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  _OWORD *v8;
  _OWORD *v9;
  _QWORD *v10;
  _OWORD *v11;

  if (a1[3])
  {
    v4 = (_QWORD *)a1[2];
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        sub_223523BA4((uint64_t)(v4 + 2));
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    a1[2] = 0;
    v6 = a1[1];
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
  v8 = *(_OWORD **)a2;
  v9 = *(_OWORD **)(a2 + 8);
  if (*(_OWORD **)a2 != v9)
  {
    do
    {
      v11 = v8;
      v10 = sub_223763CFC((uint64_t)a1, (uint64_t)v8, (uint64_t)&unk_2245BA939, &v11);
      sub_223331D64((uint64_t)(v10 + 4), (uint64_t)v8);
      v8 += 29;
    }
    while (v8 != v9);
  }
}

_QWORD *sub_223763CFC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *result;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  char *v45;

  v8 = sub_22456636C((unsigned __int8 *)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      result = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = result[1];
            if (v16 == v9)
            {
              if (result[2] == *(_QWORD *)a2 && result[3] == *(_QWORD *)(a2 + 8))
                return result;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = result[1];
          if (v14 == v9)
          {
            if (result[2] == *(_QWORD *)a2 && result[3] == *(_QWORD *)(a2 + 8))
              return result;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_31:
  v18 = (_QWORD *)(a1 + 16);
  v45 = (char *)operator new(0x1F0uLL);
  *(_QWORD *)v45 = 0;
  *((_QWORD *)v45 + 1) = v9;
  *((_OWORD *)v45 + 1) = **a4;
  *((_OWORD *)v45 + 2) = 0u;
  *((_OWORD *)v45 + 3) = 0u;
  *((_OWORD *)v45 + 4) = 0u;
  *((_OWORD *)v45 + 5) = 0u;
  *((_OWORD *)v45 + 6) = 0u;
  *((_OWORD *)v45 + 7) = 0u;
  *((_OWORD *)v45 + 8) = 0u;
  *((_OWORD *)v45 + 9) = 0u;
  *((_OWORD *)v45 + 10) = 0u;
  *((_OWORD *)v45 + 11) = 0u;
  *((_OWORD *)v45 + 12) = 0u;
  *((_OWORD *)v45 + 13) = 0u;
  *((_OWORD *)v45 + 14) = 0u;
  *((_OWORD *)v45 + 15) = 0u;
  *((_OWORD *)v45 + 16) = 0u;
  *((_OWORD *)v45 + 17) = 0u;
  *((_OWORD *)v45 + 18) = 0u;
  *((_OWORD *)v45 + 19) = 0u;
  *((_OWORD *)v45 + 20) = 0u;
  *((_OWORD *)v45 + 21) = 0u;
  *((_OWORD *)v45 + 22) = 0u;
  *((_OWORD *)v45 + 23) = 0u;
  *((_OWORD *)v45 + 24) = 0u;
  *((_OWORD *)v45 + 25) = 0u;
  *((_OWORD *)v45 + 26) = 0u;
  *((_OWORD *)v45 + 27) = 0u;
  *((_OWORD *)v45 + 28) = 0u;
  *((_OWORD *)v45 + 29) = 0u;
  *((_OWORD *)v45 + 30) = 0u;
  *((_DWORD *)v45 + 17) = 1065353216;
  *(_OWORD *)(v45 + 72) = xmmword_22464D558;
  *(_OWORD *)(v45 + 88) = unk_22464D568;
  *(_OWORD *)(v45 + 104) = xmmword_22464D578;
  *(_OWORD *)(v45 + 120) = unk_22464D588;
  v45[248] = 0;
  v45[272] = 0;
  v45[288] = 0;
  v45[352] = 0;
  v45[388] = 0;
  v45[416] = 0;
  v45[448] = 0;
  v45[480] = 0;
  v45[489] = 0;
  *((_QWORD *)v45 + 39) = 0;
  *((_QWORD *)v45 + 40) = 0;
  v45[336] = 0;
  *((_QWORD *)v45 + 41) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v22 = v10 < 3 || (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v19 / v20);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
    {
LABEL_46:
      if (prime >> 61)
        sub_223174E94();
      v26 = operator new(8 * prime);
      v27 = *(void **)a1;
      *(_QWORD *)a1 = v26;
      if (v27)
        operator delete(v27);
      v28 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
      while (prime != v28);
      v29 = (_QWORD *)*v18;
      if (!*v18)
        goto LABEL_78;
      v30 = v29[1];
      v31 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v32 = v30 & v31;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v18;
        for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
        {
          v34 = i[1] & v31;
          if (v34 == v32)
          {
            v29 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
          {
            *v29 = *i;
            v35 = 8 * v34;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v35);
            **(_QWORD **)(*(_QWORD *)a1 + v35) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v29;
            v29 = i;
            v32 = v34;
          }
        }
        goto LABEL_78;
      }
      if (v30 >= prime)
        v30 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v18;
      v39 = (_QWORD *)*v29;
      if (!*v29)
      {
LABEL_78:
        v10 = prime;
        v42 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_79;
        goto LABEL_94;
      }
      while (1)
      {
        v41 = v39[1];
        if (v41 >= prime)
          v41 %= prime;
        if (v41 == v30)
          goto LABEL_72;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v41))
        {
          *v29 = *v39;
          v40 = 8 * v41;
          *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
          **(_QWORD **)(*(_QWORD *)a1 + v40) = v39;
          v39 = v29;
LABEL_72:
          v29 = v39;
          v39 = (_QWORD *)*v39;
          if (!v39)
            goto LABEL_78;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v29;
          v29 = v39;
          v39 = (_QWORD *)*v39;
          v30 = v41;
          if (!v39)
            goto LABEL_78;
        }
      }
    }
    if (prime < v10)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < v10)
      {
        if (!prime)
        {
          v43 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v43)
            operator delete(v43);
          v10 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v42 = -1;
          goto LABEL_94;
        }
        goto LABEL_46;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v42 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_79:
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        result = v45;
        if (v21)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        result = v45;
        if (v21)
          goto LABEL_34;
      }
      goto LABEL_95;
    }
LABEL_94:
    v4 = v42 & v9;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v9));
    result = v45;
    if (v21)
      goto LABEL_34;
    goto LABEL_95;
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  result = v45;
  if (v21)
  {
LABEL_34:
    *result = *v21;
LABEL_101:
    *v21 = result;
    goto LABEL_102;
  }
LABEL_95:
  *result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v18;
  if (*result)
  {
    v44 = *(_QWORD *)(*result + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v44 >= v10)
        v44 %= v10;
    }
    else
    {
      v44 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_101;
  }
LABEL_102:
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_223764284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223764298((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223764298(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_223523BA4((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

char *sub_2237642DC(uint64_t *a1, uint64_t a2)
{
  _QWORD *i;

  sub_223764398(a1 + 1, a1[2], *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4));
  sub_223198B3C((uint64_t)(a1 + 4), a1[5], *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  sub_223198B3C((uint64_t)(a1 + 7), a1[8], *(char **)(a2 + 56), *(char **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
  for (i = *(_QWORD **)(a2 + 96); i; i = (_QWORD *)*i)
    sub_223261444((uint64_t)(a1 + 10), (uint64_t)(i + 2), (uint64_t)(i + 2));
  return sub_223198B3C((uint64_t)(a1 + 17), a1[18], *(char **)(a2 + 136), *(char **)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4);
}

uint64_t sub_223764398(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE *v32;
  _BYTE *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  void *v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  void *v55;
  void *v56;
  void **v57;
  _QWORD *v58;
  int v59;
  void *v60;
  char *v61;
  char *v62;
  void *v63;
  char *v64;
  void *v65;
  void *v66;
  char *v67;
  char *v68;
  void *v69;
  char *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;

  v5 = a2;
  if (a5 < 1)
    return v5;
  v7 = a3;
  v9 = a1[2];
  v10 = a1[1];
  if (0x34F72C234F72C235 * ((uint64_t)(v9 - v10) >> 4) >= a5)
  {
    v16 = v10 - a2;
    if (0x34F72C234F72C235 * ((uint64_t)(v10 - a2) >> 4) >= a5)
    {
      v18 = a3 + 464 * a5;
      v20 = a1[1];
      v21 = 464 * a5;
      v22 = v10 - 464 * a5;
      v23 = v20;
      if (v22 >= v10)
        goto LABEL_22;
    }
    else
    {
      v18 = a3 + 16 * ((uint64_t)(v10 - a2) >> 4);
      if (v18 == a4)
      {
        v20 = a1[1];
        a1[1] = v10;
        if (v16 < 1)
          return v5;
      }
      else
      {
        v19 = 0;
        do
        {
          sub_223249DC0(v10 + v19, v18 + v19);
          v19 += 464;
        }
        while (v18 + v19 != a4);
        v20 = v10 + v19;
        a1[1] = v20;
        if (v16 < 1)
          return v5;
      }
      v21 = 464 * a5;
      v22 = v20 - 464 * a5;
      v23 = v20;
      if (v22 >= v10)
      {
LABEL_22:
        a1[1] = v23;
        if (v20 != v5 + v21)
        {
          v88 = v18;
          while (1)
          {
            v25 = v22 - 464;
            v26 = v20 - 464;
            *(_OWORD *)v26 = *(_OWORD *)(v22 - 464);
            v27 = *(_QWORD *)(v22 - 448);
            *(_DWORD *)(v26 + 24) = *(_DWORD *)(v22 - 440);
            *(_QWORD *)(v26 + 16) = v27;
            v28 = *(_QWORD *)(v22 - 436);
            *(_DWORD *)(v26 + 36) = *(_DWORD *)(v22 - 428);
            *(_QWORD *)(v26 + 28) = v28;
            v29 = *(_OWORD *)(v22 - 424);
            v30 = *(_OWORD *)(v22 - 408);
            v31 = *(_OWORD *)(v22 - 392);
            *(_OWORD *)(v26 + 88) = *(_OWORD *)(v22 - 376);
            *(_OWORD *)(v26 + 72) = v31;
            *(_OWORD *)(v26 + 56) = v30;
            *(_OWORD *)(v26 + 40) = v29;
            *(_QWORD *)(v26 + 104) = *(_QWORD *)(v22 - 360);
            v32 = (_BYTE *)(v20 - 352);
            v33 = (_BYTE *)(v22 - 352);
            if (*(unsigned __int8 *)(v20 - 248) == *(unsigned __int8 *)(v22 - 248))
            {
              if (*(_BYTE *)(v20 - 248))
              {
                *v32 = *v33;
                v34 = *(_OWORD *)(v22 - 344);
                *(_OWORD *)(v20 - 328) = *(_OWORD *)(v22 - 328);
                *(_OWORD *)(v20 - 344) = v34;
                v35 = *(_OWORD *)(v22 - 312);
                v36 = *(_OWORD *)(v22 - 296);
                v37 = *(_OWORD *)(v22 - 280);
                *(_OWORD *)(v20 - 264) = *(_OWORD *)(v22 - 264);
                *(_OWORD *)(v20 - 280) = v37;
                *(_OWORD *)(v20 - 296) = v36;
                *(_OWORD *)(v20 - 312) = v35;
              }
            }
            else if (*(_BYTE *)(v20 - 248))
            {
              *(_BYTE *)(v20 - 248) = 0;
            }
            else
            {
              *v32 = *v33;
              v38 = *(_OWORD *)(v22 - 344);
              *(_OWORD *)(v20 - 328) = *(_OWORD *)(v22 - 328);
              *(_OWORD *)(v20 - 344) = v38;
              v39 = *(_OWORD *)(v22 - 312);
              v40 = *(_OWORD *)(v22 - 296);
              v41 = *(_OWORD *)(v22 - 280);
              *(_OWORD *)(v20 - 264) = *(_OWORD *)(v22 - 264);
              *(_OWORD *)(v20 - 280) = v41;
              *(_OWORD *)(v20 - 296) = v40;
              *(_OWORD *)(v20 - 312) = v39;
              *(_BYTE *)(v20 - 248) = 1;
            }
            v42 = *(_OWORD *)(v22 - 240);
            v43 = *(_OWORD *)(v22 - 224);
            v44 = *(_OWORD *)(v22 - 208);
            v45 = *(void **)(v20 - 184);
            *(_QWORD *)(v20 - 192) = *(_QWORD *)(v22 - 192);
            *(_OWORD *)(v20 - 208) = v44;
            *(_OWORD *)(v20 - 224) = v43;
            *(_OWORD *)(v20 - 240) = v42;
            if (v45)
            {
              *(_QWORD *)(v20 - 176) = v45;
              operator delete(v45);
              *(_QWORD *)(v20 - 184) = 0;
              *(_QWORD *)(v20 - 176) = 0;
              *(_QWORD *)(v20 - 168) = 0;
            }
            v46 = (_QWORD *)(v22 - 184);
            *(_OWORD *)(v20 - 184) = *(_OWORD *)(v22 - 184);
            *(_QWORD *)(v20 - 168) = *(_QWORD *)(v22 - 168);
            *v46 = 0;
            v46[1] = 0;
            v46[2] = 0;
            if (*(unsigned __int8 *)(v20 - 144) == *(unsigned __int8 *)(v22 - 144))
              break;
            if (*(_BYTE *)(v20 - 144))
            {
              *(_BYTE *)(v20 - 144) = 0;
LABEL_40:
              v47 = *(unsigned __int8 *)(v20 - 108);
              if (v47 == *(unsigned __int8 *)(v22 - 108))
                goto LABEL_41;
              goto LABEL_45;
            }
            *(_QWORD *)(v20 - 160) = *(_QWORD *)(v22 - 160);
            *(_QWORD *)(v20 - 152) = *(_QWORD *)(v22 - 152);
            *(_BYTE *)(v20 - 144) = 1;
            v47 = *(unsigned __int8 *)(v20 - 108);
            if (v47 == *(unsigned __int8 *)(v22 - 108))
            {
LABEL_41:
              if (v47)
              {
                *(_QWORD *)(v20 - 140) = *(_QWORD *)(v22 - 140);
                *(_QWORD *)(v20 - 132) = *(_QWORD *)(v22 - 132);
                *(_QWORD *)(v20 - 124) = *(_QWORD *)(v22 - 124);
                *(_QWORD *)(v20 - 116) = *(_QWORD *)(v22 - 116);
                v48 = v20 - 104;
                v49 = (_QWORD *)(v22 - 104);
                v50 = *(unsigned __int8 *)(v20 - 80);
                if (v50 == *(unsigned __int8 *)(v22 - 80))
                  goto LABEL_48;
                goto LABEL_54;
              }
              goto LABEL_47;
            }
LABEL_45:
            if (v47)
            {
              *(_BYTE *)(v20 - 108) = 0;
LABEL_47:
              v48 = v20 - 104;
              v49 = (_QWORD *)(v22 - 104);
              v50 = *(unsigned __int8 *)(v20 - 80);
              if (v50 == *(unsigned __int8 *)(v22 - 80))
                goto LABEL_48;
              goto LABEL_54;
            }
            *(_QWORD *)(v20 - 140) = *(_QWORD *)(v22 - 140);
            *(_QWORD *)(v20 - 132) = *(_QWORD *)(v22 - 132);
            *(_QWORD *)(v20 - 124) = *(_QWORD *)(v22 - 124);
            *(_QWORD *)(v20 - 116) = *(_QWORD *)(v22 - 116);
            *(_BYTE *)(v20 - 108) = 1;
            v48 = v20 - 104;
            v49 = (_QWORD *)(v22 - 104);
            v50 = *(unsigned __int8 *)(v20 - 80);
            if (v50 == *(unsigned __int8 *)(v22 - 80))
            {
LABEL_48:
              if (!v50)
                goto LABEL_58;
              v51 = *(void **)v48;
              if (*(_QWORD *)v48)
              {
                *(_QWORD *)(v20 - 96) = v51;
                operator delete(v51);
                *(_QWORD *)v48 = 0;
                *(_QWORD *)(v48 + 8) = 0;
                *(_QWORD *)(v48 + 16) = 0;
              }
              *(_OWORD *)(v20 - 104) = *(_OWORD *)(v22 - 104);
              *(_QWORD *)(v20 - 88) = *(_QWORD *)(v22 - 88);
              *v49 = 0;
              v49[1] = 0;
              v49[2] = 0;
              v52 = v20 - 72;
              v53 = (_QWORD *)(v22 - 72);
              v54 = *(unsigned __int8 *)(v20 - 48);
              if (v54 == *(unsigned __int8 *)(v22 - 48))
              {
LABEL_59:
                if (!v54)
                  goto LABEL_69;
                v56 = *(void **)v52;
                if (*(_QWORD *)v52)
                {
                  *(_QWORD *)(v20 - 64) = v56;
                  operator delete(v56);
                  *(_QWORD *)v52 = 0;
                  *(_QWORD *)(v52 + 8) = 0;
                  *(_QWORD *)(v52 + 16) = 0;
                }
                *(_OWORD *)(v20 - 72) = *(_OWORD *)(v22 - 72);
                *(_QWORD *)(v20 - 56) = *(_QWORD *)(v22 - 56);
                *v53 = 0;
                v53[1] = 0;
                v53[2] = 0;
                v57 = (void **)(v20 - 40);
                v58 = (_QWORD *)(v22 - 40);
                v59 = *(unsigned __int8 *)(v20 - 16);
                if (v59 != *(unsigned __int8 *)(v22 - 16))
                {
LABEL_78:
                  if (v59)
                  {
                    v67 = (char *)*v57;
                    if (*v57)
                    {
                      v68 = *(char **)(v20 - 32);
                      v69 = *v57;
                      if (v68 != v67)
                      {
                        v70 = *(char **)(v20 - 32);
                        do
                        {
                          v72 = (void *)*((_QWORD *)v70 - 3);
                          v70 -= 24;
                          v71 = v72;
                          if (v72)
                          {
                            *((_QWORD *)v68 - 2) = v71;
                            operator delete(v71);
                          }
                          v68 = v70;
                        }
                        while (v70 != v67);
                        v69 = *v57;
                      }
                      *(_QWORD *)(v20 - 32) = v67;
                      operator delete(v69);
                    }
                    *(_BYTE *)(v20 - 16) = 0;
                  }
                  else
                  {
                    *v57 = 0;
                    v57[1] = 0;
                    v57[2] = 0;
                    *(_OWORD *)(v20 - 40) = *(_OWORD *)(v22 - 40);
                    *(_QWORD *)(v20 - 24) = *(_QWORD *)(v22 - 24);
                    *v58 = 0;
                    v58[1] = 0;
                    v58[2] = 0;
                    *(_BYTE *)(v20 - 16) = 1;
                  }
                  goto LABEL_25;
                }
                goto LABEL_70;
              }
              goto LABEL_65;
            }
LABEL_54:
            if (v50)
            {
              v55 = *(void **)v48;
              if (*(_QWORD *)v48)
              {
                *(_QWORD *)(v20 - 96) = v55;
                operator delete(v55);
              }
              *(_BYTE *)(v20 - 80) = 0;
LABEL_58:
              v52 = v20 - 72;
              v53 = (_QWORD *)(v22 - 72);
              v54 = *(unsigned __int8 *)(v20 - 48);
              if (v54 == *(unsigned __int8 *)(v22 - 48))
                goto LABEL_59;
              goto LABEL_65;
            }
            *(_QWORD *)v48 = 0;
            *(_QWORD *)(v48 + 8) = 0;
            *(_QWORD *)(v48 + 16) = 0;
            *(_OWORD *)(v20 - 104) = *(_OWORD *)(v22 - 104);
            *(_QWORD *)(v20 - 88) = *(_QWORD *)(v22 - 88);
            *v49 = 0;
            v49[1] = 0;
            v49[2] = 0;
            *(_BYTE *)(v20 - 80) = 1;
            v52 = v20 - 72;
            v53 = (_QWORD *)(v22 - 72);
            v54 = *(unsigned __int8 *)(v20 - 48);
            if (v54 == *(unsigned __int8 *)(v22 - 48))
              goto LABEL_59;
LABEL_65:
            if (v54)
            {
              v60 = *(void **)v52;
              if (*(_QWORD *)v52)
              {
                *(_QWORD *)(v20 - 64) = v60;
                operator delete(v60);
              }
              *(_BYTE *)(v20 - 48) = 0;
LABEL_69:
              v57 = (void **)(v20 - 40);
              v58 = (_QWORD *)(v22 - 40);
              v59 = *(unsigned __int8 *)(v20 - 16);
              if (v59 != *(unsigned __int8 *)(v22 - 16))
                goto LABEL_78;
              goto LABEL_70;
            }
            *(_QWORD *)v52 = 0;
            *(_QWORD *)(v52 + 8) = 0;
            *(_QWORD *)(v52 + 16) = 0;
            *(_OWORD *)(v20 - 72) = *(_OWORD *)(v22 - 72);
            *(_QWORD *)(v20 - 56) = *(_QWORD *)(v22 - 56);
            *v53 = 0;
            v53[1] = 0;
            v53[2] = 0;
            *(_BYTE *)(v20 - 48) = 1;
            v57 = (void **)(v20 - 40);
            v58 = (_QWORD *)(v22 - 40);
            v59 = *(unsigned __int8 *)(v20 - 16);
            if (v59 != *(unsigned __int8 *)(v22 - 16))
              goto LABEL_78;
LABEL_70:
            if (v59)
            {
              v61 = (char *)*v57;
              if (*v57)
              {
                v62 = *(char **)(v20 - 32);
                v63 = *v57;
                if (v62 != v61)
                {
                  v64 = *(char **)(v20 - 32);
                  do
                  {
                    v66 = (void *)*((_QWORD *)v64 - 3);
                    v64 -= 24;
                    v65 = v66;
                    if (v66)
                    {
                      *((_QWORD *)v62 - 2) = v65;
                      operator delete(v65);
                    }
                    v62 = v64;
                  }
                  while (v64 != v61);
                  v63 = *v57;
                  v18 = v88;
                }
                *(_QWORD *)(v20 - 32) = v61;
                operator delete(v63);
                *v57 = 0;
                v57[1] = 0;
                v57[2] = 0;
              }
              *(_OWORD *)(v20 - 40) = *(_OWORD *)(v22 - 40);
              *(_QWORD *)(v20 - 24) = *(_QWORD *)(v22 - 24);
              *v58 = 0;
              v58[1] = 0;
              v58[2] = 0;
            }
LABEL_25:
            *(_WORD *)(v20 - 8) = *(_WORD *)(v22 - 8);
            v20 -= 464;
            v22 -= 464;
            if (v25 == v5)
              goto LABEL_91;
          }
          if (*(_BYTE *)(v20 - 144))
          {
            *(_QWORD *)(v20 - 160) = *(_QWORD *)(v22 - 160);
            *(_QWORD *)(v20 - 152) = *(_QWORD *)(v22 - 152);
            v47 = *(unsigned __int8 *)(v20 - 108);
            if (v47 == *(unsigned __int8 *)(v22 - 108))
              goto LABEL_41;
            goto LABEL_45;
          }
          goto LABEL_40;
        }
LABEL_91:
        if (v18 != v7)
        {
          v73 = v5;
          do
          {
            sub_223331D64(v73, v7);
            v7 += 464;
            v73 += 464;
          }
          while (v7 != v18);
        }
        return v5;
      }
    }
    v24 = v22;
    v23 = v20;
    do
    {
      sub_223658658(v23, v24);
      v24 += 464;
      v23 += 464;
    }
    while (v24 < v10);
    goto LABEL_22;
  }
  v11 = *a1;
  v12 = a5 + 0x34F72C234F72C235 * ((uint64_t)(v10 - *a1) >> 4);
  if (v12 > 0x8D3DCB08D3DCB0)
    sub_22324A284();
  v13 = 0x34F72C234F72C235 * ((v9 - v11) >> 4);
  if (2 * v13 > v12)
    v12 = 2 * v13;
  if (v13 >= 0x469EE58469EE58)
    v14 = 0x8D3DCB08D3DCB0;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 > 0x8D3DCB08D3DCB0)
      sub_223174E94();
    v15 = (char *)operator new(464 * v14);
  }
  else
  {
    v15 = 0;
  }
  v75 = (uint64_t)&v15[16 * ((v5 - v11) >> 4)];
  v89 = v75;
  v91 = &v15[464 * v14];
  v76 = 464 * a5;
  v77 = v75 + 464 * a5;
  do
  {
    sub_223249DC0(v75, v7);
    v75 += 464;
    v7 += 464;
    v76 -= 464;
  }
  while (v76);
  v90 = v77;
  v74 = v89;
  v78 = 464;
  v79 = *a1;
  while (1)
  {
    v80 = v5 + v78;
    if (v5 + v78 - 464 == v79)
      break;
    v81 = v89 + v78 - 928;
    v78 -= 464;
    sub_223249DC0(v81, v80 - 928);
  }
  v82 = v89 + v78 - 464;
  v83 = a1[1];
  v84 = v90;
  if (v83 != v5)
  {
    v85 = 0;
    do
    {
      sub_223249DC0(v90 + v85, v5 + v85);
      v85 += 464;
    }
    while (v5 + v85 != v83);
    v5 = a1[1];
    v84 = v90 + v85;
  }
  v86 = (void *)*a1;
  *a1 = v82;
  a1[1] = v84;
  a1[2] = (uint64_t)v91;
  while ((void *)v5 != v86)
  {
    v5 -= 464;
    sub_22324A5A0(v5);
  }
  if (v86)
    operator delete(v86);
  return v74;
}

void sub_223764BFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223764C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  for (; v2; v2 -= 464)
    sub_22324A5A0(v3 - 464 + v2);
  sub_22324A924((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223764C58(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, float32x4_t *a4@<X8>, simd_float3x3 a5@<0:Q0, 16:Q1, 32:Q2>, double a6@<D5>, double a7@<D7>)
{
  float32x2_t v7;
  float32x2_t v8;
  float v10;
  __int128 v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int8x16_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x2_t v25;
  int32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  char v29;
  _BYTE v30[20];
  __int32 v31;
  float32x2_t v32;
  __int32 v33;
  float32x2_t v34;
  __int32 v35;
  uint64_t v36;
  __int32 v37;
  uint64_t v38;
  __int32 v39;
  _BYTE v40[24];
  float32x2_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(float *)v40 = (float)*(unsigned int *)a3;
  v10 = (float)*(unsigned int *)(a3 + 12);
  *(float32x2_t *)&v11 = vcvt_f32_u32(*(uint32x2_t *)(a3 + 4));
  *((_QWORD *)&v11 + 1) = v11;
  *(_OWORD *)&v40[4] = v11;
  *(float *)&v40[20] = v10;
  v41 = (float32x2_t)__PAIR64__(LODWORD(v10), *(unsigned int *)v40);
  LODWORD(v11) = a2[1].i32[0];
  v12 = a2[2];
  LODWORD(a6) = a2[3].i32[0];
  v13 = a2[6];
  LODWORD(a7) = a2[7].i32[0];
  v7.i32[0] = *(_DWORD *)(a1 + 8);
  v14 = *(float32x2_t *)(a1 + 12);
  v8.i32[0] = *(_DWORD *)(a1 + 20);
  v15 = *(float32x2_t *)(a1 + 24);
  v16 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a1, v12.f32[0]), v14, v12, 1);
  v17 = vmla_lane_f32(vmul_f32(v7, v12), v8, v12, 1);
  v12.i32[0] = *(_DWORD *)(a1 + 32);
  v18 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a1, COERCE_FLOAT(*a2)), v14, *a2, 1), v15, *(float *)&v11);
  *(float32x2_t *)v19.i8 = vmla_n_f32(v16, v15, *(float *)&a6);
  v19.u64[1] = (unint64_t)vmla_f32(v17, *(float32x2_t *)&a6, v12);
  *(float32x2_t *)v20.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a1, v13.f32[0]), v14, v13, 1), v15, *(float *)&a7);
  v20.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v7, v13), v8, v13, 1), *(float32x2_t *)&a7, v12);
  *(float32x2_t *)a5.columns[1].f32 = vmla_f32(vmla_lane_f32(vmul_f32(v7, *a2), v8, *a2, 1), *(float32x2_t *)&v11, v12);
  v35 = a5.columns[1].i32[0];
  v34 = v18;
  v37 = v19.i32[2];
  v36 = v19.i64[0];
  v39 = v20.i32[2];
  v38 = v20.i64[0];
  a5.columns[2] = (simd_float3)vextq_s8(vextq_s8(v19, v19, 0xCuLL), v19, 8uLL);
  v21 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)a5.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v20, (int8x16_t)v20, 0xCuLL), (int8x16_t)v20, 8uLL));
  *(float32x2_t *)a5.columns[2].f32 = vmla_lane_f32(vmul_f32(v18, *(float32x2_t *)v21.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1), v18, 1);
  a5.columns[0] = (simd_float3)vextq_s8(v21, v21, 8uLL);
  *(float32x2_t *)a5.columns[2].f32 = vmla_f32(*(float32x2_t *)a5.columns[2].f32, *(float32x2_t *)a5.columns[0].f32, *(float32x2_t *)a5.columns[1].f32);
  if (a5.columns[2].f32[0] == 0.0)
    goto LABEL_6;
  a5.columns[0].f32[0] = 0.0 - a5.columns[2].f32[0];
  if (a5.columns[2].f32[0] >= 0.0)
    a5.columns[0].f32[0] = a5.columns[2].f32[0];
  a5.columns[1].i32[0] = 897988541;
  if (a5.columns[0].f32[0] <= 0.000001)
  {
LABEL_6:
    v29 = 0;
    a4->i8[0] = 0;
  }
  else
  {
    sub_22322BB84((uint64_t)&v34, (uint64_t)v30, a5);
    v22.i32[0] = v31;
    v23.i32[0] = v33;
    *(float32x2_t *)v24.f32 = vadd_f32(v32, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v30, *(float *)v40), *(float32x2_t *)&v30[12], *(float32x2_t *)v40, 1));
    v25 = (float32x2_t)vextq_s8(*(int8x16_t *)v30, *(int8x16_t *)v30, 8uLL).u64[0];
    *(float32x2_t *)v26.i8 = vadd_f32(v23, vmla_lane_f32(vmul_f32(v25, *(float32x2_t *)v40), v22, *(float32x2_t *)v40, 1));
    *(float32x2_t *)v27.f32 = vadd_f32(v32, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v30, *(float *)&v40[16]), *(float32x2_t *)&v30[12], *(float32x2_t *)&v40[16], 1));
    *(float32x2_t *)v28.i8 = vadd_f32(v23, vmla_lane_f32(vmul_f32(v25, *(float32x2_t *)&v40[16]), v22, *(float32x2_t *)&v40[16], 1));
    *(float32x2_t *)&v24.u32[2] = vadd_f32(v32, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v30, *(float *)&v40[8]), *(float32x2_t *)&v30[12], *(float32x2_t *)&v40[8], 1));
    v26.u64[1] = (unint64_t)vadd_f32(v23, vmla_lane_f32(vmul_f32(v25, *(float32x2_t *)&v40[8]), v22, *(float32x2_t *)&v40[8], 1));
    *(float32x2_t *)&v27.u32[2] = vadd_f32(v32, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v30, v41.f32[0]), *(float32x2_t *)&v30[12], v41, 1));
    v28.u64[1] = (unint64_t)vadd_f32(v23, vmla_lane_f32(vmul_f32(v25, v41), v22, v41, 1));
    *a4 = vdivq_f32(v24, (float32x4_t)vtrn1q_s32(v26, v26));
    a4[1] = vdivq_f32(v27, (float32x4_t)vtrn1q_s32(v28, v28));
    v29 = 1;
  }
  a4[2].i8[0] = v29;
}

void sub_223764EA8(uint64_t a1@<X0>, float32x2_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, simd_float3x3 a6@<0:Q0, 16:Q1, 32:Q2>, double a7@<D5>, double a8@<D7>)
{
  float32x2_t v8;
  float32x2_t v9;
  float v12;
  char *v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int8x16_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  float32x2_t v31;
  float v32;
  _BYTE v33[20];
  __int32 v34;
  float32x2_t v35;
  __int32 v36;
  uint64_t v37;
  __int32 v38;
  uint64_t v39;
  __int32 v40;
  uint64_t v41;
  __int32 v42;
  char **v43;
  __int128 v44;

  v12 = a6.columns[0].f32[0];
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_22316E078();
    v16 = (char *)operator new(16 * a3);
    *(_QWORD *)a5 = v16;
    *(_QWORD *)(a5 + 8) = v16;
    *(_QWORD *)(a5 + 16) = &v16[16 * a3];
  }
  a6.columns[2].i32[0] = a2[1].i32[0];
  v17 = a2[2];
  LODWORD(a7) = a2[3].i32[0];
  v18 = a2[6];
  LODWORD(a8) = a2[7].i32[0];
  v8.i32[0] = *(_DWORD *)(a1 + 8);
  v19 = *(float32x2_t *)(a1 + 12);
  v9.i32[0] = *(_DWORD *)(a1 + 20);
  v20 = *(float32x2_t *)(a1 + 24);
  v21 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a1, v17.f32[0]), v19, v17, 1);
  v22 = vmla_lane_f32(vmul_f32(v8, v17), v9, v17, 1);
  v17.i32[0] = *(_DWORD *)(a1 + 32);
  *(float32x2_t *)a6.columns[0].f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a1, COERCE_FLOAT(*a2)), v19, *a2, 1), v20, a6.columns[2].f32[0]);
  *(float32x2_t *)v23.i8 = vmla_n_f32(v21, v20, *(float *)&a7);
  v23.u64[1] = (unint64_t)vmla_f32(v22, *(float32x2_t *)&a7, v17);
  *(float32x2_t *)v24.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a1, v18.f32[0]), v19, v18, 1), v20, *(float *)&a8);
  v24.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v8, v18), v9, v18, 1), *(float32x2_t *)&a8, v17);
  *(float32x2_t *)a6.columns[1].f32 = vmla_f32(vmla_lane_f32(vmul_f32(v8, *a2), v9, *a2, 1), *(float32x2_t *)a6.columns[2].f32, v17);
  v38 = a6.columns[1].i32[0];
  v37 = a6.columns[0].i64[0];
  v40 = v23.i32[2];
  v39 = v23.i64[0];
  v42 = v24.i32[2];
  v41 = v24.i64[0];
  a6.columns[2] = (simd_float3)vextq_s8(vextq_s8(v23, v23, 0xCuLL), v23, 8uLL);
  v25 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)a6.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), v23, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v24, (int8x16_t)v24, 0xCuLL), (int8x16_t)v24, 8uLL));
  *(float32x2_t *)a6.columns[2].f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.columns[0].f32, *(float32x2_t *)v25.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1), *(float32x2_t *)a6.columns[0].f32, 1);
  a6.columns[0] = (simd_float3)vextq_s8(v25, v25, 8uLL);
  *(float32x2_t *)a6.columns[2].f32 = vmla_f32(*(float32x2_t *)a6.columns[2].f32, *(float32x2_t *)a6.columns[0].f32, *(float32x2_t *)a6.columns[1].f32);
  if (a6.columns[2].f32[0] != 0.0)
  {
    a6.columns[0].f32[0] = 0.0 - a6.columns[2].f32[0];
    if (a6.columns[2].f32[0] >= 0.0)
      a6.columns[0].f32[0] = a6.columns[2].f32[0];
    a6.columns[1].i32[0] = 897988541;
    if (a6.columns[0].f32[0] > 0.000001)
    {
      v26 = (float32x2_t)sub_22322BB84((uint64_t)&v37, (uint64_t)v33, a6).n128_u64[0];
      if (a3)
      {
        v30 = 16 * a3;
        do
        {
          v26.f32[0] = (float)*(uint64_t *)(a4 + v30 - 16);
          v27.f32[0] = (float)*(uint64_t *)(a4 + v30 - 8);
          v28.i32[0] = v34;
          v29.i32[0] = v36;
          v31 = vadd_f32(v35, vmla_n_f32(vmul_n_f32(*(float32x2_t *)v33, v26.f32[0]), *(float32x2_t *)&v33[12], v27.f32[0]));
          v32 = vadd_f32(v29, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v33, *(int8x16_t *)v33, 8uLL), v26), v27, v28)).f32[0];
          *(_QWORD *)&v44 = llroundf((float)(v31.f32[0] / v32) * v12);
          *((_QWORD *)&v44 + 1) = llroundf((float)(v31.f32[1] / v32) * v12);
          v43 = (char **)a5;
          sub_223765310(&v43, &v44);
          v30 -= 16;
        }
        while (v30);
      }
    }
  }
}

void sub_2237650BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2237650E0(__int128 *a1@<X0>, simd_float3 *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  __int128 v10;
  simd_float3 v11;
  simd_float3 v12;
  double v13;
  double v14;
  simd_float3x3 v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  _OWORD v20[2];
  int v21;
  _OWORD v22[4];
  float v23;
  void *__p[2];
  uint64_t v25;
  simd_float3 v26;
  simd_float3 v27;
  simd_float3 v28;
  simd_float3 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v10 = a1[1];
  v30 = *a1;
  v31 = v10;
  v32 = *((_DWORD *)a1 + 8);
  v11 = a2[1];
  v26 = *a2;
  v27 = v11;
  v12 = a2[3];
  v28 = a2[2];
  v29 = v12;
  v18 = 0uLL;
  v19 = 0;
  sub_2232EA6AC((uint64_t)&v18, a3);
  v20[0] = v30;
  v20[1] = v31;
  v22[0] = v26;
  v22[1] = v27;
  v15.columns[0] = v28;
  v15.columns[1] = v29;
  v22[2] = v28;
  v21 = v32;
  v22[3] = v29;
  v23 = a6;
  if (a3)
  {
    v16 = &a4[3 * a3];
    do
    {
      v15.columns[0].f32[0] = a6;
      sub_223764EA8((uint64_t)v20, (float32x2_t *)v22, (a4[1] - *a4) >> 4, *a4, (uint64_t)__p, v15, v13, v14);
      v17 = *((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1) < v19)
      {
        **((_QWORD **)&v18 + 1) = 0;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        v15.columns[0] = *(simd_float3 *)__p;
        *(_OWORD *)v17 = *(_OWORD *)__p;
        *(_QWORD *)(v17 + 16) = v25;
        *((_QWORD *)&v18 + 1) = v17 + 24;
      }
      else
      {
        *((_QWORD *)&v18 + 1) = sub_2232EA89C((char **)&v18, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      a4 += 3;
    }
    while (a4 != v16);
  }
  *(_OWORD *)a5 = v18;
  *(_QWORD *)(a5 + 16) = v19;
}

void sub_22376525C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  _QWORD *v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;

  if (__p)
  {
    v29 = a10;
    v30 = __p;
    if (a10 != __p)
    {
      v31 = a10;
      do
      {
        v33 = (void *)*((_QWORD *)v31 - 3);
        v31 -= 24;
        v32 = v33;
        if (v33)
        {
          *(v29 - 2) = v32;
          operator delete(v32);
        }
        v29 = v31;
      }
      while (v31 != __p);
      v30 = __p;
    }
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_223765310(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = (v6 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_22316E078();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_223174E94();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

unint64_t sub_223765420(float32x2_t *a1, uint64_t *a2, int8x16_t a3, int8x16_t a4, int8x16_t a5, int8x16_t a6)
{
  int32x2_t v6;
  int32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  BOOL v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x2_t v61;
  int8x16_t v62;
  float v63;

  v15 = (float32x2_t)vextq_s8(a3, a3, 8uLL).u64[0];
  v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4.i8, 1);
  v17 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a3.i8, *(float32x2_t *)a4.i8), v16, *(float32x2_t *)a3.i8, 1);
  v18 = (float32x2_t)vextq_s8(a4, a4, 8uLL).u64[0];
  v19 = vmla_f32(v17, v18, v15).f32[0];
  v20 = v19 <= 0.0;
  if (v19 == 0.0)
    goto LABEL_17;
  *(float *)v7.i32 = -v19;
  v21 = v19 + 0.0;
  if (v20)
    v21 = *(float *)v7.i32;
  if (v21 <= 0.000001)
    goto LABEL_17;
  v22 = (float32x2_t)vextq_s8(a5, a5, 8uLL).u64[0];
  v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.i8, 1);
  v24 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)a6.i8), v23, *(float32x2_t *)a5.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(a6, a6, 8uLL), v22).f32[0];
  if (v24 == 0.0)
    goto LABEL_17;
  *(float *)v6.i32 = -v24;
  v25 = v24 + 0.0;
  if (v24 <= 0.0)
    v25 = -v24;
  if (v25 <= 0.000001)
LABEL_17:
    sub_22324A974();
  v9.f32[0] = (float)*a2;
  v10.f32[0] = (float)a2[1];
  v27 = a2[2];
  v28 = a2[3];
  v29 = a2[5];
  v30 = a2[4];
  v32 = a1[4];
  v31 = a1[5];
  if (v29 <= 0)
    v8.f32[0] = 0.0;
  else
    v8.f32[0] = 1.0;
  if (v29 <= 0)
    v23.f32[0] = 1.0;
  else
    v23.f32[0] = 1.0 / (float)v29;
  v33 = (int8x16_t)vdivq_f32((float32x4_t)a6, (float32x4_t)vdupq_lane_s32(v6, 0));
  v34 = (float32x4_t)vdupq_lane_s32(v7, 0);
  v35 = (int8x16_t)vdivq_f32((float32x4_t)a4, v34);
  v12.f32[0] = v23.f32[0] * v9.f32[0];
  v9.f32[0] = v23.f32[0] * v10.f32[0];
  v11.f32[0] = v23.f32[0] * (float)v27;
  v13.f32[0] = (float)v28;
  v10.f32[0] = v23.f32[0] * (float)v28;
  v34.f32[0] = (float)v30;
  v36 = vmul_f32(v23, *(float32x2_t *)v13.f32);
  v13.f32[1] = (float)v30;
  v14.f32[0] = v23.f32[0] * (float)v30;
  v13.f32[2] = (float)v29;
  v37 = (int8x16_t)vmulq_n_f32(v13, v23.f32[0]);
  v38 = (int8x16_t)vsubq_f32((float32x4_t)v33, (float32x4_t)v35);
  v39 = (float32x2_t)vextq_s8(v38, v38, 8uLL).u64[0];
  v40 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v38.i8, v32), 0, *(float32x2_t *)v38.i8, 1), 0, v39);
  v41 = (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1);
  v42 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v38.i8, 0), v41, *(float32x2_t *)v38.i8, 1), 0, v39);
  v43 = (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1);
  v44 = vadd_f32(v39, vmla_lane_f32(vmul_f32(*(float32x2_t *)v38.i8, v31), v43, *(float32x2_t *)v38.i8, 1));
  v45 = vmla_f32(vmla_f32(vmul_f32(v40, v12), v11, v42), v10, v44);
  v46 = vmla_f32(vmla_f32(vmul_f32(v40, v11), v9, v42), v14, v44);
  v47 = vmla_f32(vmla_f32(vmul_f32(v40, v10), v14, v42), v8, v44);
  v48 = vmul_f32(v45, 0);
  v49 = vmla_f32(vmla_lane_f32(vmul_f32(vmla_f32(vmla_f32(vmul_f32(v45, v32), 0, v46), v31, v47), *(float32x2_t *)v38.i8), vmla_lane_f32(vmla_lane_f32(v48, v46, v32, 1), v47, v31, 1), *(float32x2_t *)v38.i8, 1), v39, vadd_f32(v47, vmla_f32(v48, 0, v46))).f32[0];
  v50 = (float32x2_t)vextq_s8(v35, v35, 8uLL).u64[0];
  v51 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, v32), 0, *(float32x2_t *)v35.i8, 1), 0, v50);
  v52 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, 0), v41, *(float32x2_t *)v35.i8, 1), 0, v50);
  *(float32x2_t *)v35.i8 = vadd_f32(v50, vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, v31), v43, *(float32x2_t *)v35.i8, 1));
  v53 = vmla_lane_f32(vmul_f32(v51, *(float32x2_t *)v37.i8), v52, *(float32x2_t *)v37.i8, 1);
  v54 = (float32x2_t)vextq_s8(v37, v37, 8uLL).u64[0];
  v55 = vmla_f32(v53, v54, *(float32x2_t *)v35.i8);
  v35.i64[0] = vextq_s8(v33, v33, 8uLL).u64[0];
  *(float *)v33.i32 = 1.0
                    / fabsf(vmul_f32(v55, vmla_f32(vmla_lane_f32(vmul_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.i8, v32), 0, *(float32x2_t *)v33.i8, 1), 0, *(float32x2_t *)v35.i8), *(float32x2_t *)v37.i8), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.i8, 0), v41, *(float32x2_t *)v33.i8, 1), 0, *(float32x2_t *)v35.i8), *(float32x2_t *)v37.i8, 1),
                                v54,
                                vadd_f32(*(float32x2_t *)v35.i8, vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.i8, v31), v43, *(float32x2_t *)v33.i8, 1)))).f32[0]);
  *(float *)v35.i32 = *(float *)v33.i32 * (float)(*(float *)v33.i32 * v49);
  v56.i32[1] = HIDWORD(*(_QWORD *)&a1[4]);
  *(float32x2_t *)v34.f32 = vmul_f32(v23, *(float32x2_t *)v34.f32);
  v57 = vmul_f32(v36, v32);
  v58 = vmul_f32(v36, 0);
  v59 = vmla_lane_f32(v58, *(float32x2_t *)v34.f32, v32, 1);
  v56.i32[0] = 0;
  *(float32x2_t *)v60.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v32.u32[0], *(float *)v37.i32), v56, *(float32x2_t *)v37.i8, 1), v31, (float32x4_t)v37, 2);
  v22.f32[0] = (float)v29;
  v61 = vmul_f32(v23, v22);
  *(float32x2_t *)&v60.u32[2] = vadd_f32(v54, vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.i8, 0), 0, *(float32x2_t *)v37.i8, 1));
  v62 = (int8x16_t)vmulq_n_f32(v60, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(vmla_f32(vmla_f32(v57, 0, *(float32x2_t *)v34.f32), v31, v61), *(float32x2_t *)v60.f32), vmla_lane_f32(v59, v61, v31, 1), *(float32x2_t *)v60.f32, 1), *(float32x2_t *)&v60.u32[2], vadd_f32(v61, vmla_f32(v58, 0, *(float32x2_t *)v34.f32))).f32[0]));
  v63 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)a4.i8), v16, *(float32x2_t *)v62.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), v18).f32[0];
  return COERCE_UNSIGNED_INT((float)((float)-v63 / *(float *)&v62.i32[2])* (float)(*(float *)v35.i32 * (float)((float)-v63 / *(float *)&v62.i32[2]))) | ((unint64_t)COERCE_UNSIGNED_INT(sqrtf(*(float *)v33.i32)) << 32);
}

float32x2_t *sub_2237656E8@<X0>(float32x2_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x2_t *a4@<X3>, uint64_t a5@<X8>, int8x16_t a6@<Q0>, float32x4_t a7@<Q2>, float32x4_t a8@<Q4>, float32x4_t a9@<Q6>, float32x2_t a10@<D7>)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float v17;
  int8x16_t v18;
  float v19;
  BOOL v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  float32x4_t v28;
  int8x16_t v29;
  uint64_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  _BOOL4 v49;
  BOOL v50;
  __int128 v51;
  _BYTE v52[32];
  unsigned __int32 v53;

  a6.i32[0] = *(_DWORD *)(a3 + 20);
  a7.i64[0] = *(_QWORD *)(a3 + 12);
  v15 = a7;
  v15.i32[2] = a6.i32[0];
  v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1);
  v17 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), v16, *(float32x2_t *)a7.f32, 1), *(float32x2_t *)a6.i8, *(float32x2_t *)a6.i8).f32[0];
  v18 = (int8x16_t)v15;
  if (v17 != 1.0)
  {
    v19 = v17 + -1.0;
    if (v17 < 1.0)
      v19 = 1.0 - v17;
    v20 = v19 > 0.000001;
    v18 = (int8x16_t)v15;
    if (v20)
      v18 = (int8x16_t)vmulq_n_f32(v15, 1.0 / sqrtf(v17));
  }
  a10.i32[0] = *(_DWORD *)(a3 + 8);
  v10.i64[0] = *(_QWORD *)a3;
  v21 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *(float32x2_t *)a3, 1);
  v22 = (float32x4_t)vextq_s8(v18, v18, 8uLL);
  if (vmla_f32(v21, *(float32x2_t *)v22.f32, a10).f32[0] > 0.0)
    goto LABEL_15;
  v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.f32, 1);
  v24 = v10;
  v12.i32[0] = a4[1].i32[0];
  *(float32x2_t *)a8.f32 = *a4;
  v13.i32[0] = a4[3].i32[0];
  *(float32x2_t *)v22.f32 = a4[2];
  v14.i32[0] = a4[5].i32[0];
  *(float32x2_t *)a9.f32 = a4[4];
  *(float32x2_t *)v11.f32 = a4[6];
  v11.i32[2] = a4[7].i32[0];
  *(float32x2_t *)v25.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a4, v15.f32[0]), *(float32x2_t *)v22.f32, *(float32x2_t *)v15.f32, 1), *(float32x2_t *)a9.f32, v15, 2);
  *(float32x2_t *)&v25.u32[2] = vmla_f32(vmla_f32(vmul_f32(v12, *(float32x2_t *)a7.f32), v16, v13), *(float32x2_t *)a6.i8, v14);
  v26 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.f32, 1), *(float32x2_t *)v25.f32, 1), *(float32x2_t *)&v25.u32[2], *(float32x2_t *)&v25.u32[2]).f32[0];
  if (v26 != 1.0)
  {
    v27 = v26 >= 1.0 ? v26 + -1.0 : 1.0 - v26;
    if (v27 > 0.000001)
      v25 = vmulq_n_f32(v25, 1.0 / sqrtf(v26));
  }
  v24.i32[2] = *(_DWORD *)(a3 + 8);
  *(float32x2_t *)v28.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a8.f32, v10.f32[0]), *(float32x2_t *)v22.f32, *(float32x2_t *)v10.f32, 1), *(float32x2_t *)a9.f32, v24, 2);
  *(float32x2_t *)&v28.u32[2] = vmla_f32(vmla_f32(vmul_f32(v12, *(float32x2_t *)v10.f32), v23, v13), a10, v14);
  v29 = (int8x16_t)vaddq_f32(v28, v11);
  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v25.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.f32, 1), *(float32x2_t *)v29.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)).f32[0] <= 0.0)
  {
    v30 = 0;
    a8.i32[2] = a4[1].i32[0];
    v22.i32[2] = a4[3].i32[0];
    a9.i32[2] = a4[5].i32[0];
    v31 = result[4];
    v13.i32[0] = result[5].i32[0];
    v12.i32[0] = result[5].i32[1];
    v32 = vmla_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)v10.f32), v23, v16);
    *(float32x2_t *)v33.f32 = vmul_n_f32(*(float32x2_t *)v11.f32, v15.f32[0]);
    v34 = (float32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
    v35 = vmul_f32(v34, *(float32x2_t *)a7.f32);
    v33.i32[2] = v35.i32[0];
    v36 = vmla_f32(v32, a10, *(float32x2_t *)a6.i8);
    *(float32x2_t *)v37.i8 = vmul_lane_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v15.f32, 1);
    v33.i32[3] = v37.i32[0];
    v37.u64[1] = (unint64_t)vmul_lane_f32(v34, *(float32x2_t *)a7.f32, 1);
    *(float32x2_t *)v15.f32 = vmul_laneq_f32(*(float32x2_t *)v11.f32, v15, 2);
    v38 = (float32x4_t)vdupq_lane_s32((int32x2_t)v36, 0);
    *(float32x2_t *)a6.i8 = vdiv_f32(vmul_f32(v34, *(float32x2_t *)a6.i8), v36);
    v39 = vdivq_f32(v33, v38);
    v40 = (int8x16_t)vdivq_f32((float32x4_t)vextq_s8(vextq_s8(v37, v37, 0xCuLL), (int8x16_t)v15, 8uLL), v38);
    v38.i64[0] = *(_QWORD *)(a2 + 48);
    v37.i32[0] = *(_DWORD *)(a2 + 56);
    v41 = *(float32x2_t *)(a2 + 60);
    v11.i32[0] = *(_DWORD *)(a2 + 68);
    v42 = *(float32x2_t *)(a2 + 72);
    v35.i32[0] = *(_DWORD *)(a2 + 80);
    v43 = (float32x4_t)vextq_s8((int8x16_t)v39, v40, 0xCuLL);
    v44 = vaddq_f32(a8, v39);
    v45 = vaddq_f32(v22, v43);
    v46 = vaddq_f32(a9, (float32x4_t)vextq_s8(v40, a6, 8uLL));
    v47 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v38.f32, v44.f32[0]), v41, *(float32x2_t *)v44.f32, 1), v42, v44, 2);
    *(float32x2_t *)v40.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v44.f32), *(float32x2_t *)v11.f32, *(float32x2_t *)v44.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), v35);
    *(float32x2_t *)v44.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v38.f32, v45.f32[0]), v41, *(float32x2_t *)v45.f32, 1), v42, v45, 2);
    v48 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v45.f32), *(float32x2_t *)v11.f32, *(float32x2_t *)v45.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), v35);
    *(float32x2_t *)v38.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v38.f32, v46.f32[0]), v41, *(float32x2_t *)v46.f32, 1), v42, v46, 2);
    *(float32x2_t *)v45.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v46.f32), *(float32x2_t *)v11.f32, *(float32x2_t *)v46.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), v35);
    *(float32x2_t *)v52 = vmla_f32(vmla_f32(vmul_n_f32(v47, v31.f32[0]), 0, *(float32x2_t *)v44.f32), 0, *(float32x2_t *)v38.f32);
    *(_DWORD *)&v52[8] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v40.i8, v31), 0, v48), 0, *(float32x2_t *)v45.f32).u32[0];
    *(float32x2_t *)&v52[12] = vmla_f32(vmla_lane_f32(vmul_f32(v47, 0), *(float32x2_t *)v44.f32, v31, 1), 0, *(float32x2_t *)v38.f32);
    *(_DWORD *)&v52[20] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.i8, 0), v48, v31, 1), 0, *(float32x2_t *)v45.f32).u32[0];
    *(float32x2_t *)&v52[24] = vadd_f32(*(float32x2_t *)v38.f32, vmla_n_f32(vmul_n_f32(v47, v13.f32[0]), *(float32x2_t *)v44.f32, v12.f32[0]));
    v53 = vadd_f32(*(float32x2_t *)v45.f32, vmla_f32(vmul_f32(*(float32x2_t *)v40.i8, v13), v12, v48)).u32[0];
    do
    {
      v49 = (*(_DWORD *)&v52[v30] & 0x7FFFFFFFu) < 0x7F800000;
      if ((*(_DWORD *)&v52[v30] & 0x7FFFFFFFu) > 0x7F7FFFFF)
        break;
      v50 = v30 == 32;
      v30 += 4;
    }
    while (!v50);
    if (v49)
    {
      v51 = *(_OWORD *)&v52[16];
      *(_OWORD *)a5 = *(_OWORD *)v52;
      *(_OWORD *)(a5 + 16) = v51;
      *(_DWORD *)(a5 + 32) = v53;
      *(_BYTE *)(a5 + 36) = 1;
    }
    else
    {
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 36) = 0;
    }
  }
  else
  {
LABEL_15:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 36) = 0;
  }
  return result;
}

uint64_t sub_223765A28@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _BYTE *a3@<X8>)
{
  _BYTE *v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  a3[8] = 0;
  v3 = a3 + 8;
  *a3 = 0;
  a3[20] = 0;
  _D0 = (double)a2;
  a3[12] = 0;
  v5 = *(double *)(result + 72);
  v6 = v5 + v5;
  v7 = *(double *)(result + 88);
  v8 = *(double *)(result + 112);
  v9 = *(double *)(result + 120)
     + *(double *)(result + 120)
     + (v5 + v5) * 0.0
     + (*(double *)(result + 96) + *(double *)(result + 96)) * (double)a2;
  v10 = *(float64x2_t *)(result + 72);
  *(_QWORD *)&v11 = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  v12 = *(float64x2_t *)(result + 96);
  *(_QWORD *)&v13 = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
  v14 = *(double *)(result + 136);
  v15 = *(float64x2_t *)(result + 120);
  *(_QWORD *)&v16 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  _Q22 = vaddq_f64(v15, vmlaq_n_f64(vmulq_f64(v10, (float64x2_t)0), v12, (double)a2));
  __asm { FMLA            D24, D0, V22.D[1] }
  v23 = v14 + v7 * 0.0 + v8 * (double)a2 + _D24;
  v24 = v9 * v9 + v5 * -4.0 * v23;
  if (v24 < 0.0)
  {
    if (v14
       + v15.f64[0] * 0.0
       + _D0 * v16
       + (v7 + v10.f64[0] * 0.0 + _D0 * v11) * 0.0
       + (v8 + v12.f64[0] * 0.0 + _D0 * v13) * _D0 <= 0.0)
      return result;
LABEL_24:
    *(_QWORD *)a3 = (unint64_t)*(unsigned int *)(result + 144) << 32;
    *v3 = 1;
    return result;
  }
  if (v5 == 0.0)
  {
    v25 = -v23 / v9;
    LODWORD(v26) = (int)(v25 + 1.0);
    if (v7 + v10.f64[0] * v25 + v11 * _D0 <= 0.0)
    {
      v34 = *(_DWORD *)(result + 144);
      if (v34 >= (int)v26)
        v26 = v26;
      else
        v26 = v34;
      *(_QWORD *)a3 = v26 << 32;
      *v3 = 1;
    }
    else
    {
      *(_QWORD *)a3 = v26 & ~((int)v26 >> 31) | ((unint64_t)*(unsigned int *)(result + 144) << 32);
      *v3 = 1;
    }
  }
  else
  {
    v27 = sqrt(v24);
    v28 = (-v9 - v27) / v6;
    v29 = (v27 - v9) / v6;
    if (v28 <= v29)
      v30 = v28;
    else
      v30 = v29;
    if (v28 <= v29)
      v28 = v29;
    v31 = (int)(v28 + 1.0);
    if ((v31 & 0x80000000) != 0
      || (v32 = (int)(v30 + 1.0), v33 = *(unsigned int *)(result + 144), (int)v33 <= (int)v32))
    {
      if (v14
         + v15.f64[0] * 0.0
         + _D0 * v16
         + (v7 + v10.f64[0] * 0.0 + _D0 * v11) * 0.0
         + (v8 + v12.f64[0] * 0.0 + _D0 * v13) * _D0 > 0.0)
        goto LABEL_24;
    }
    else if (v7 + v10.f64[0] * v30 + v11 * _D0 <= 0.0)
    {
      if ((v32 & 0x80000000) != 0 || (int)v33 <= (int)v31)
      {
        if ((v32 & 0x80000000) != 0)
        {
          if ((int)v33 > (int)v31)
          {
            *(_QWORD *)a3 = v31 | (v33 << 32);
            *v3 = 1;
          }
        }
        else
        {
          *(_QWORD *)a3 = v32 << 32;
          *v3 = 1;
        }
      }
      else
      {
        *(_QWORD *)a3 = v32 << 32;
        a3[8] = 1;
        *(_QWORD *)(a3 + 12) = v31 | (v33 << 32);
        a3[20] = 1;
      }
    }
    else
    {
      if ((int)v33 >= (int)v31)
        v31 = v31;
      else
        v31 = v33;
      *(_QWORD *)a3 = v32 & ~((int)v32 >> 31) | (unint64_t)(v31 << 32);
      *v3 = 1;
    }
  }
  return result;
}

float sub_223765CA8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  float result;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(a1 + 8);
  v3 = (unint64_t)v2 - *(_QWORD *)a1;
  result = 0.0;
  if (v3 >= 0x30)
  {
    v5 = v2 - 2;
    if ((v3 & 0x10) != 0)
      v2 -= 2;
    if (v1 == v2)
    {
      v7 = 0.0;
      if ((v3 & 0x10) == 0)
        return v7 * 0.5;
    }
    else
    {
      v6 = *v5;
      v7 = 0.0;
      do
      {
        v8 = v1[1];
        v9 = (double)(v8 + v5[1]) * (double)(v6 - *v1);
        v5 = v1 + 2;
        v6 = v1[2];
        v7 = v7 + v9 + (double)(v1[3] + v8) * (double)(*v1 - v6);
        v1 += 4;
      }
      while (v1 != v2);
      v5 = v1 - 2;
      v1 = v2;
      if ((v3 & 0x10) == 0)
        return v7 * 0.5;
    }
    v7 = v7 + (double)(v1[1] + v5[1]) * (double)(*v5 - *v1);
    return v7 * 0.5;
  }
  return result;
}

uint64_t sub_223765D70(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  float64x2_t v14;
  double v15;
  double v22;
  float64_t v23;
  double v24;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  double v32;
  double v33;
  double v37;
  float64_t v38;
  double v39;
  BOOL v40;
  double v42;
  double v43;
  BOOL v44;
  uint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;

  v1 = a1[1] - *a1;
  if ((unint64_t)v1 < 0x40)
    return 0;
  v2 = v1 >> 4;
  v3 = (v1 >> 4) - 2;
  if (v1 >> 4 == 2)
    return 0;
  v5 = 0;
  v6 = v2 - 1;
LABEL_5:
  v7 = v5 + 1;
  v8 = vcvtq_f64_s64(*(int64x2_t *)(*a1 + 16 * (v5 + 1)));
  v50 = vcvtq_f64_s64(*(int64x2_t *)(*a1 + 16 * v5));
  v51 = v8;
  v9 = v5 + 2;
  if (v5)
    v10 = v2;
  else
    v10 = v2 - 1;
  while (1)
  {
    if (v9 >= v10)
    {
      v5 = v7;
      if (v7 == v3)
        return 0;
      goto LABEL_5;
    }
    if (v9 == v6)
      v13 = 0;
    else
      v13 = v9 + 1;
    v14 = vcvtq_f64_s64(*(int64x2_t *)(*a1 + 16 * v13));
    v48 = vcvtq_f64_s64(*(int64x2_t *)(*a1 + 16 * v9));
    v49 = v14;
    if (!sub_223766150(&v50, &v48, (uint64_t)&v47, 0))
      goto LABEL_10;
    v15 = v50.f64[1];
    _Q17 = vsubq_f64(v51, v50);
    _D18 = _Q17.f64[1];
    __asm { FMLA            D5, D18, V17.D[1] }
    v22 = sqrt(_D5);
    v23 = ((v51.f64[0] - v50.f64[0]) * (v50.f64[1] - v48.f64[1]) - (v50.f64[0] - v48.f64[0]) * (v51.f64[1] - v50.f64[1]))
        / v22;
    v24 = 0.0 - v23;
    _ZF = v23 == 0.0;
    if (v23 >= 0.0)
      v24 = ((v51.f64[0] - v50.f64[0]) * (v50.f64[1] - v48.f64[1])
           - (v50.f64[0] - v48.f64[0]) * (v51.f64[1] - v50.f64[1]))
          / v22;
    v12 = v51.f64[1];
    if (_ZF || v24 <= 0.5)
    {
      if (v50.f64[0] == v48.f64[0])
      {
        if (v50.f64[1] + -0.5 <= v48.f64[1] && v48.f64[1] <= v51.f64[1] + 0.5)
          goto LABEL_10;
        v27 = v51.f64[1];
        v28 = v48.f64[1];
        if (v50.f64[1] + 0.5 >= v48.f64[1])
          goto LABEL_32;
      }
      else
      {
        if (v50.f64[0] + -0.5 <= v48.f64[0] && v48.f64[0] <= v51.f64[0] + 0.5)
          goto LABEL_10;
        v27 = v51.f64[0];
        v28 = v48.f64[0];
        if (v50.f64[0] + 0.5 >= v48.f64[0])
        {
LABEL_32:
          if (v28 >= v27 + -0.5)
            goto LABEL_10;
        }
      }
    }
    v29 = ((v50.f64[1] - v49.f64[1]) * _Q17.f64[0] - (v51.f64[1] - v50.f64[1]) * (v50.f64[0] - v49.f64[0])) / v22;
    v30 = v29 == 0.0;
    if (v29 < 0.0)
      v29 = 0.0 - v29;
    if (!v30 && v29 > 0.5)
      goto LABEL_48;
    if (v50.f64[0] == v49.f64[0])
    {
      if (v50.f64[1] + -0.5 <= v49.f64[1] && v49.f64[1] <= v51.f64[1] + 0.5)
        goto LABEL_10;
      v32 = v51.f64[1];
      v33 = v49.f64[1];
      if (v50.f64[1] + 0.5 >= v49.f64[1])
        goto LABEL_47;
    }
    else
    {
      if (v50.f64[0] + -0.5 <= v49.f64[0] && v49.f64[0] <= v51.f64[0] + 0.5)
        goto LABEL_10;
      v32 = v51.f64[0];
      v33 = v49.f64[0];
      if (v50.f64[0] + 0.5 >= v49.f64[0])
      {
LABEL_47:
        if (v33 >= v32 + -0.5)
          goto LABEL_10;
      }
    }
LABEL_48:
    _Q18 = vsubq_f64(v49, v48);
    _D20 = _Q18.f64[1];
    __asm { FMLA            D19, D20, V18.D[1] }
    v37 = sqrt(_D19);
    v38 = ((v48.f64[1] - v50.f64[1]) * (v49.f64[0] - v48.f64[0]) - (v48.f64[0] - v50.f64[0]) * (v49.f64[1] - v48.f64[1]))
        / v37;
    v39 = 0.0 - v38;
    v40 = v38 == 0.0;
    if (v38 >= 0.0)
      v39 = ((v48.f64[1] - v50.f64[1]) * (v49.f64[0] - v48.f64[0])
           - (v48.f64[0] - v50.f64[0]) * (v49.f64[1] - v48.f64[1]))
          / v37;
    v11 = v49.f64[1];
    if (!v40 && v39 > 0.5)
      goto LABEL_63;
    if ((vmovn_s64(vceqq_f64(v48, v50)).u8[0] & 1) != 0)
    {
      if (v48.f64[1] + -0.5 <= v50.f64[1] && v50.f64[1] <= v49.f64[1] + 0.5)
        goto LABEL_10;
      v42 = v49.f64[1];
      if (v48.f64[1] + 0.5 >= v50.f64[1])
        goto LABEL_62;
    }
    else
    {
      if (v48.f64[0] + -0.5 <= v50.f64[0] && v50.f64[0] <= v49.f64[0] + 0.5)
        goto LABEL_10;
      v42 = v49.f64[0];
      v15 = v50.f64[0];
      if (v48.f64[0] + 0.5 >= v50.f64[0])
      {
LABEL_62:
        if (v15 >= v42 + -0.5)
          goto LABEL_10;
      }
    }
LABEL_63:
    v43 = ((v48.f64[1] - v51.f64[1]) * _Q18.f64[0] - (v49.f64[1] - v48.f64[1]) * vsubq_f64(v48, v51).f64[0]) / v37;
    v44 = v43 == 0.0;
    if (v43 < 0.0)
      v43 = 0.0 - v43;
    if (!v44 && v43 > 0.5)
      return 1;
    if ((vmovn_s64(vceqq_f64(v48, v51)).u8[0] & 1) != 0)
    {
      if (v48.f64[1] + -0.5 <= v51.f64[1] && v51.f64[1] <= v49.f64[1] + 0.5)
        goto LABEL_10;
      if (v48.f64[1] + 0.5 < v51.f64[1])
        return 1;
    }
    else
    {
      if (v48.f64[0] + -0.5 <= v51.f64[0] && v51.f64[0] <= v49.f64[0] + 0.5)
        goto LABEL_10;
      v11 = v49.f64[0];
      v12 = v51.f64[0];
      if (v48.f64[0] + 0.5 < v51.f64[0])
        return 1;
    }
    if (v12 < v11 + -0.5)
      return 1;
LABEL_10:
    if (v9 == v6)
      v9 = v2;
    else
      ++v9;
  }
}

uint64_t sub_223766150(float64x2_t *a1, float64x2_t *a2, uint64_t a3, char a4)
{
  double v4;
  double *v5;
  double v6;
  float64x2_t *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  float64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v26;
  double v27;
  BOOL v29;
  double *v31;
  double v32;
  _BOOL4 v33;
  _BOOL4 v34;
  BOOL v35;
  double v36;
  double v37;
  float64x2_t v38;
  double v39;
  double v40;
  double v41;

  v4 = a2[1].f64[1];
  v5 = &a2->f64[1];
  v6 = a2->f64[1];
  v7 = a1 + 1;
  v8 = a1[1].f64[0];
  v9 = a1->f64[0];
  v10 = v8 - a1->f64[0];
  v11 = a2[1].f64[0];
  v12 = a2->f64[0];
  v13 = v11 - a2->f64[0];
  v14 = &a1[1].f64[1];
  v15 = a1[1].f64[1];
  v16 = &a1->f64[1];
  v17 = a1->f64[1];
  v18 = (v4 - v6) * v10 - v13 * (v15 - v17);
  v19 = a1->f64[0] - a2->f64[0];
  v20 = v13 * (v17 - v6) - (v4 - v6) * v19;
  v21 = v10 * (v17 - v6) - v19 * (v15 - v17);
  if (v18 == 0.0)
    goto LABEL_14;
  v22 = 0.0 - v18;
  if (v18 >= 0.0)
    v22 = v18;
  if (v22 <= 0.00000001)
  {
LABEL_14:
    if (v20 == 0.0)
      goto LABEL_19;
    v26 = 0.0 - v20;
    if (v20 >= 0.0)
      v26 = v20;
    if (v26 <= 0.00000001)
    {
LABEL_19:
      if (v21 == 0.0)
        goto LABEL_21;
      v27 = 0.0 - v21;
      if (v21 >= 0.0)
        v27 = v21;
      if (v27 <= 0.00000001)
      {
LABEL_21:
        _ZF = v12 == v9 && v6 == v17;
        if (_ZF || (v11 == v9 ? (v29 = v4 == v17) : (v29 = 0), v29))
        {
          *(float64x2_t *)a3 = *a1;
          return 1;
        }
        else if (v11 == v8 && v4 == v15 || v12 == v8 && v6 == v15)
        {
          *(float64x2_t *)a3 = *v7;
          return 1;
        }
        else if (v12 <= v9 || v11 <= v8 || v11 <= v9 || v12 <= v8)
        {
          if (v6 <= v17 || v4 <= v15 || v6 <= v15 || v4 <= v17)
          {
            if (v12 >= v9 || v11 >= v8 || v11 >= v9 || v12 >= v8)
            {
              if (v6 >= v17 || v4 >= v15 || v6 >= v15 || v4 >= v17)
              {
                if (v9 <= v8 || v11 >= v9 || (v31 = &a1->f64[1], v32 = a1->f64[0], v12 >= v9))
                {
                  if (v6 >= v17 || v4 >= v17 || (v31 = &a1->f64[1], v32 = a1->f64[0], v17 <= v15))
                  {
                    if (v11 >= v8 || v8 <= v9 || (v31 = &a1[1].f64[1], v32 = a1[1].f64[0], v12 >= v8))
                    {
                      if (v6 >= v15 || v4 >= v15 || (v31 = &a1[1].f64[1], v32 = a1[1].f64[0], v15 <= v17))
                      {
                        if (v12 <= v9 || v12 <= v11 || (v31 = &a2->f64[1], v32 = a2->f64[0], v12 <= v8))
                        {
                          v33 = v6 > v17;
                          v34 = v6 > v4;
                          if (v6 <= v15)
                            v34 = 0;
                          v35 = !v34 || !v33;
                          if (v34 && v33)
                            v31 = &a2->f64[1];
                          else
                            v31 = &a2[1].f64[1];
                          if (v35)
                            v32 = a2[1].f64[0];
                          else
                            v32 = a2->f64[0];
                        }
                      }
                    }
                  }
                }
                v36 = *v31;
                if (v32 == v9 && v36 == v17
                  || (v9 >= v8 || v11 <= v9 || v12 <= v9) && (v6 <= v17 || v4 <= v17 || v17 >= v15))
                {
                  if (v32 == v8 && v36 == v15
                    || (v9 <= v8 || v11 <= v8 || v12 <= v8) && (v6 <= v15 || v4 <= v15 || v15 >= v17))
                  {
                    if (v32 == v12 && v36 == v6
                      || (v12 >= v9 || v12 >= v11 || v12 >= v8) && (v6 >= v4 || v6 >= v15 || v6 >= v17))
                    {
                      v5 = &a2[1].f64[1];
                      v12 = a2[1].f64[0];
                    }
                  }
                  else
                  {
                    v5 = &a1[1].f64[1];
                    v12 = a1[1].f64[0];
                  }
                }
                else
                {
                  v5 = &a1->f64[1];
                  v12 = a1->f64[0];
                }
                v37 = *v5;
                *(_QWORD *)a3 = 0;
                *(_QWORD *)(a3 + 8) = 0;
                if (a1->f64[0] != v32 || (v38 = 0uLL, *v16 != v36))
                {
                  if (a1->f64[0] != v12 || (v38 = 0uLL, *v16 != v37))
                  {
                    v38 = vaddq_f64(*a1, (float64x2_t)0);
                    *(float64x2_t *)a3 = v38;
                  }
                }
                if ((v7->f64[0] != v32 || *v14 != v36) && (v7->f64[0] != v12 || *v14 != v37))
                {
                  v38 = vaddq_f64(v38, *v7);
                  *(float64x2_t *)a3 = v38;
                }
                v39 = a2->f64[1];
                if ((a2->f64[0] != v32 || v39 != v36) && (a2->f64[0] != v12 || v39 != v37))
                {
                  v38 = vaddq_f64(v38, *a2);
                  *(float64x2_t *)a3 = v38;
                }
                v41 = a2[1].f64[0];
                v40 = a2[1].f64[1];
                if ((v41 != v32 || v40 != v36) && (v41 != v12 || v40 != v37))
                  v38 = vaddq_f64(v38, a2[1]);
                __asm { FMOV            V0.2D, #0.5 }
                *(float64x2_t *)a3 = vmulq_f64(v38, _Q0);
                return 1;
              }
              else
              {
                return 0;
              }
            }
            else
            {
              return 0;
            }
          }
          else
          {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v23 = v20 / v18;
    if ((a4 & 1) != 0)
      goto LABEL_40;
    if (v23 < 0.0 || v23 > 1.0)
      return 0;
    if (v21 / v18 >= 0.0 && v21 / v18 <= 1.0)
    {
LABEL_40:
      *(double *)a3 = v9 + v10 * v23;
      *(double *)(a3 + 8) = *v16 + v23 * (*v14 - *v16);
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t sub_223766638(uint64_t *a1, _BYTE *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  char *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  char *v40;
  void *v41;
  char *v42;
  char *v43;
  char *v44;
  void *v45;
  void *v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  double v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v96;
  char v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  double v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  __n128 v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  char *v115;
  char *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  char *v124;
  void *v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  int v140;
  _QWORD *v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  BOOL v146;
  BOOL v147;
  uint64_t ***v149;
  uint64_t ***v150;
  char *v151;
  uint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  unint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t **v177;
  uint64_t **v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t **v183;
  uint64_t **v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  char *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  __int128 *v193;
  __int128 *v194;
  __int128 *v195;
  __int128 *v196;
  uint64_t v197;
  __int128 *v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  int64_t v208;
  int64_t v209;
  uint64_t v210;
  uint64_t j;
  char *v212;
  uint64_t *v213;
  int64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  _BYTE *v227;
  unint64_t v228;
  uint64_t *v229;
  unint64_t v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _OWORD *v236;
  char *v237;
  uint64_t v238;
  __int128 v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t *i;
  uint64_t v243;
  uint64_t v244;
  uint64_t v247;
  int v248;
  void **v249;
  void **v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  char v256;
  _BYTE *v257;
  int64_t v258;
  void *__p;
  char *v260;
  char *v261;
  int v262;
  char v263;
  void *v264[2];
  __int128 v265;
  __int128 v266;
  __int16 v267;
  void *v268;
  char *v269;
  uint64_t v270;
  int64x2_t v271;
  int64x2_t v272;
  unint64_t v273;
  __int128 v274;
  uint64_t v275;
  int64x2_t v276;
  int64x2_t v277;
  __int128 v278;
  uint64_t v279;

  v279 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = a1[1];
  v260 = 0;
  v261 = 0;
  __p = 0;
  if (v6 == v5)
    goto LABEL_200;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) > 0x555555555555555)
    sub_22316E078();
  __p = operator new(16 * ((v6 - v5) >> 3));
  v260 = (char *)__p;
  v261 = (char *)__p + 16 * ((v6 - v5) >> 3);
  if (v6 == v5)
    goto LABEL_200;
  v256 = a3;
  v257 = a2;
  do
  {
    v277 = 0u;
    v278 = 0u;
    v276 = 0u;
    v8 = *(const void **)v5;
    v7 = *(_QWORD *)(v5 + 8);
    v9 = v7 - *(_QWORD *)v5;
    if (v7 == *(_QWORD *)v5)
    {
      v11 = 0;
      v13 = 0;
      v10 = 0;
    }
    else
    {
      if (v9 < 0)
        sub_22316E078();
      v10 = (char *)operator new(v7 - *(_QWORD *)v5);
      v11 = &v10[16 * (v9 >> 4)];
      v12 = v9 & 0xFFFFFFFFFFFFFFF0;
      memcpy(v10, v8, v12);
      v13 = &v10[v12];
    }
    v276.i64[0] = (uint64_t)v10;
    v276.i64[1] = (uint64_t)v13;
    v277.i64[0] = (uint64_t)v11;
    v14 = v260;
    if (v260 >= v261)
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * ((v260 - (_BYTE *)__p) >> 4);
      v19 = v18 + 1;
      if (v18 + 1 > 0x555555555555555)
        sub_22316E078();
      if (0x5555555555555556 * ((v261 - (_BYTE *)__p) >> 4) > v19)
        v19 = 0x5555555555555556 * ((v261 - (_BYTE *)__p) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v261 - (_BYTE *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v20 = 0x555555555555555;
      else
        v20 = v19;
      *(_QWORD *)&v266 = &v261;
      if (v20)
      {
        if (v20 > 0x555555555555555)
          sub_223174E94();
        v21 = (char *)operator new(48 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[16 * ((v260 - (_BYTE *)__p) >> 4)];
      v264[0] = v21;
      v264[1] = v22;
      *(_QWORD *)&v265 = v22;
      *((_QWORD *)&v265 + 1) = &v21[48 * v20];
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      *(_QWORD *)v22 = 0;
      v23 = v13 - v10;
      if (v23)
      {
        if (v23 < 0)
          sub_22316E078();
        v24 = (char *)operator new(v23);
        *(_QWORD *)v22 = v24;
        *((_QWORD *)v22 + 2) = &v24[16 * (v23 >> 4)];
        v25 = v23 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v24, v10, v25);
        *((_QWORD *)v22 + 1) = &v24[v25];
      }
      sub_223768FC4(&v21[48 * v18 + 24], &v277.i64[1]);
      v26 = (char *)v264[1];
      v27 = (char *)(v265 + 48);
      v28 = (char *)__p;
      v29 = v260;
      if (v260 == __p)
      {
        __p = v264[1];
        v260 = (char *)(v265 + 48);
        v261 = (char *)*((_QWORD *)&v265 + 1);
      }
      else
      {
        v30 = 0;
        do
        {
          v31 = &v26[v30];
          v32 = &v29[v30];
          *((_QWORD *)v31 - 6) = 0;
          *((_QWORD *)v31 - 5) = 0;
          *((_QWORD *)v31 - 4) = 0;
          *((_OWORD *)v31 - 3) = *(_OWORD *)&v29[v30 - 48];
          *((_QWORD *)v31 - 4) = *(_QWORD *)&v29[v30 - 32];
          *((_QWORD *)v32 - 6) = 0;
          *((_QWORD *)v32 - 5) = 0;
          *((_QWORD *)v32 - 4) = 0;
          *((_QWORD *)v31 - 3) = 0;
          *((_QWORD *)v31 - 2) = 0;
          *((_QWORD *)v31 - 1) = 0;
          *(_OWORD *)(v31 - 24) = *(_OWORD *)&v29[v30 - 24];
          *((_QWORD *)v31 - 1) = *(_QWORD *)&v29[v30 - 8];
          *((_QWORD *)v32 - 3) = 0;
          *((_QWORD *)v32 - 2) = 0;
          *((_QWORD *)v32 - 1) = 0;
          v30 -= 48;
        }
        while (&v29[v30] != v28);
        v29 = (char *)__p;
        v33 = v260;
        __p = &v26[v30];
        v260 = v27;
        v261 = (char *)*((_QWORD *)&v265 + 1);
        if (v33 != v29)
        {
          do
          {
            v34 = *((_QWORD *)v33 - 3);
            if (v34)
            {
              v35 = *((_QWORD *)v33 - 2);
              v36 = (void *)*((_QWORD *)v33 - 3);
              if (v35 != v34)
              {
                v37 = *((_QWORD *)v33 - 2);
                do
                {
                  v39 = *(void **)(v37 - 24);
                  v37 -= 24;
                  v38 = v39;
                  if (v39)
                  {
                    *(_QWORD *)(v35 - 16) = v38;
                    operator delete(v38);
                  }
                  v35 = v37;
                }
                while (v37 != v34);
                v36 = (void *)*((_QWORD *)v33 - 3);
              }
              *((_QWORD *)v33 - 2) = v34;
              operator delete(v36);
            }
            v40 = v33 - 48;
            v41 = (void *)*((_QWORD *)v33 - 6);
            if (v41)
            {
              *((_QWORD *)v33 - 5) = v41;
              operator delete(v41);
            }
            v33 -= 48;
          }
          while (v40 != v29);
        }
      }
      if (v29)
        operator delete(v29);
      v42 = (char *)v277.i64[1];
      v260 = v27;
      if (v277.i64[1])
      {
        v43 = (char *)v278;
        if ((_QWORD)v278 != v277.i64[1])
        {
          v44 = (char *)v278;
          do
          {
            v46 = (void *)*((_QWORD *)v44 - 3);
            v44 -= 24;
            v45 = v46;
            if (v46)
            {
              *((_QWORD *)v43 - 2) = v45;
              operator delete(v45);
            }
            v43 = v44;
          }
          while (v44 != v42);
        }
        operator delete(v42);
      }
    }
    else
    {
      *(_QWORD *)v260 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      v15 = v13 - v10;
      if (v13 != v10)
      {
        if (v15 < 0)
          sub_22316E078();
        v16 = (char *)operator new(v13 - v10);
        *(_QWORD *)v14 = v16;
        *((_QWORD *)v14 + 1) = v16;
        *((_QWORD *)v14 + 2) = &v16[16 * (v15 >> 4)];
        v17 = v15 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v16, v10, v17);
        *((_QWORD *)v14 + 1) = &v16[v17];
      }
      sub_223768FC4((_QWORD *)v14 + 3, &v277.i64[1]);
      v260 = v14 + 48;
    }
    if (v276.i64[0])
      operator delete((void *)v276.i64[0]);
    v5 += 24;
  }
  while (v5 != v6);
  v47 = (uint64_t **)__p;
  a3 = v256;
  a2 = v257;
  if (__p == v260)
  {
LABEL_200:
    v262 = 0;
    v113 = 1;
    goto LABEL_203;
  }
  do
  {
    v262 = 0;
    v48 = *v47;
    v49 = v47[1];
    v50 = (char *)v49 - (char *)*v47;
    if ((unint64_t)v50 <= 0x2F)
      goto LABEL_222;
    v51 = v50 >> 4;
    if (v49 == v48)
      v52 = 0;
    else
      v52 = v51 + 1;
    if (v52 < 2)
      goto LABEL_201;
    v53 = 0;
    v54 = *v47;
    while (1)
    {
      v55 = *v54;
      v56 = v54[1];
      if (*v54 != *v48 || v56 != v48[1])
        break;
      v58 = v53 + 1;
      if (v53 + 1 < v51)
      {
        v54 += 2;
      }
      else
      {
        v54 = v47[1];
        if (v53 < v51)
          v54 = &v48[2 * (v58 % v51)];
      }
      ++v53;
      if (v52 == v58)
        goto LABEL_201;
    }
    if (v52 == v53)
      goto LABEL_201;
    while (1)
    {
      v59 = *v54;
      v60 = v54[1];
      if (*v54 != v55 || v60 != v56)
        break;
      v62 = v53 + 1;
      if (v53 + 1 < v51)
      {
        v54 += 2;
      }
      else
      {
        v54 = v47[1];
        if (v53 < v51)
          v54 = &v48[2 * (v62 % v51)];
      }
      ++v53;
      if (v52 == v62)
        goto LABEL_201;
    }
    if (v52 == v53)
    {
LABEL_201:
      v113 = 0;
      v114 = 11;
LABEL_202:
      v262 = v114;
      goto LABEL_203;
    }
    while (*v54 == v59 && v54[1] == v60)
    {
      v64 = v53 + 1;
      if (v53 + 1 < v51)
      {
        v54 += 2;
      }
      else
      {
        v54 = v47[1];
        if (v53 < v51)
          v54 = &v48[2 * (v64 % v51)];
      }
      ++v53;
      if (v52 == v64)
        goto LABEL_201;
    }
    v65 = sub_22376A0F4(v48, v49, &v262);
    if ((v65 & 1) != 0)
    {
LABEL_238:
      v113 = 0;
      goto LABEL_203;
    }
    v66 = *v47;
    v67 = v47[1];
    v68 = (char *)v67 - (char *)*v47;
    if ((unint64_t)v68 < 0x30)
      goto LABEL_237;
    v69 = v68 >> 4;
    v70 = v67 == v66 ? 0 : v69 + 1;
    v71 = v70 - 1;
    if (v70 >= v69)
    {
      v72 = v47[1];
      if (v71 <= v69)
        v72 = &v66[2 * (v71 % v69)];
    }
    else
    {
      v72 = v67 - 2;
    }
    if (!v71)
      goto LABEL_237;
    v73 = 0.0;
    v74 = v47[1];
    do
    {
      if (v71 + 1 >= v69)
      {
        v75 = v47[1];
        if (v71 <= v69)
          v75 = &v66[2 * (v71 % v69)];
      }
      else
      {
        v75 = v74 - 2;
      }
      v76 = v71 - 1;
      if (v71 >= v69)
      {
        v77 = v47[1];
        if (v76 <= v69)
          v77 = &v66[2 * (v76 % v69)];
      }
      else
      {
        v77 = v72 - 2;
      }
      if (v71 + 1 >= v69)
      {
        v74 = v47[1];
        if (v71 <= v69)
          v74 = &v66[2 * (v71 % v69)];
      }
      else
      {
        v74 -= 2;
      }
      if (v71 >= v69)
      {
        v72 = &v66[2 * (v76 % v69)];
        if (v76 > v69)
          v72 = v47[1];
      }
      else
      {
        v72 -= 2;
      }
      v73 = v73 + ((double)*v75 + (double)*v77) * ((double)v75[1] - (double)v77[1]);
      --v71;
    }
    while (v76);
    if (v73 * 0.5 <= 0.0)
    {
LABEL_237:
      v113 = 0;
      v114 = 22;
      goto LABEL_202;
    }
    v262 = 0;
    v78 = (uint64_t **)v47[3];
    v79 = (uint64_t **)v47[4];
    if (v78 != v79)
    {
      while (1)
      {
        v262 = 0;
        v80 = *v78;
        v81 = v78[1];
        v82 = (char *)v81 - (char *)*v78;
        if ((unint64_t)v82 <= 0x2F)
          break;
        v83 = v82 >> 4;
        if (v81 == v80)
          v84 = 0;
        else
          v84 = v83 + 1;
        if (v84 < 2)
          goto LABEL_201;
        v85 = 0;
        v86 = *v78;
        while (1)
        {
          v87 = *v86;
          v88 = v86[1];
          if (*v86 != *v80 || v88 != v80[1])
            break;
          v90 = v85 + 1;
          if (v85 + 1 < v83)
          {
            v86 += 2;
          }
          else
          {
            v86 = v78[1];
            if (v85 < v83)
              v86 = &v80[2 * (v90 % v83)];
          }
          ++v85;
          if (v84 == v90)
            goto LABEL_201;
        }
        if (v84 == v85)
          goto LABEL_201;
        while (1)
        {
          v91 = *v86;
          v92 = v86[1];
          if (*v86 != v87 || v92 != v88)
            break;
          v94 = v85 + 1;
          if (v85 + 1 < v83)
          {
            v86 += 2;
          }
          else
          {
            v86 = v78[1];
            if (v85 < v83)
              v86 = &v80[2 * (v94 % v83)];
          }
          ++v85;
          if (v84 == v94)
            goto LABEL_201;
        }
        if (v84 == v85)
          goto LABEL_201;
        while (*v86 == v91 && v86[1] == v92)
        {
          v96 = v85 + 1;
          if (v85 + 1 < v83)
          {
            v86 += 2;
          }
          else
          {
            v86 = v78[1];
            if (v85 < v83)
              v86 = &v80[2 * (v96 % v83)];
          }
          ++v85;
          if (v84 == v96)
            goto LABEL_201;
        }
        v97 = sub_22376A0F4(v80, v81, &v262);
        if ((v97 & 1) != 0)
          goto LABEL_238;
        v99 = *v78;
        v98 = v78[1];
        v100 = (char *)v98 - (char *)*v78;
        if ((unint64_t)v100 < 0x30)
          goto LABEL_237;
        v101 = v100 >> 4;
        v102 = v98 == v99 ? 0 : v101 + 1;
        v103 = v102 - 1;
        if (v102 >= v101)
        {
          v104 = v78[1];
          if (v103 <= v101)
            v104 = &v99[2 * (v103 % v101)];
        }
        else
        {
          v104 = v98 - 2;
        }
        if (!v103)
          goto LABEL_237;
        v105 = 0.0;
        v106 = v78[1];
        do
        {
          if (v103 + 1 >= v101)
          {
            v107 = v78[1];
            if (v103 <= v101)
              v107 = &v99[2 * (v103 % v101)];
          }
          else
          {
            v107 = v106 - 2;
          }
          v108 = v103 - 1;
          if (v103 >= v101)
          {
            v109 = v78[1];
            if (v108 <= v101)
              v109 = &v99[2 * (v108 % v101)];
          }
          else
          {
            v109 = v104 - 2;
          }
          if (v103 + 1 >= v101)
          {
            v106 = v78[1];
            if (v103 <= v101)
              v106 = &v99[2 * (v103 % v101)];
          }
          else
          {
            v106 -= 2;
          }
          if (v103 >= v101)
          {
            v104 = &v99[2 * (v108 % v101)];
            if (v108 > v101)
              v104 = v78[1];
          }
          else
          {
            v104 -= 2;
          }
          v105 = v105 + ((double)*v107 + (double)*v109) * ((double)v107[1] - (double)v109[1]);
          --v103;
        }
        while (v108);
        if (v105 * 0.5 >= 0.0)
          goto LABEL_237;
        v262 = 0;
        v78 += 3;
        if (v78 == v79)
          goto LABEL_197;
      }
LABEL_222:
      v113 = 0;
      v114 = 10;
      goto LABEL_202;
    }
LABEL_197:
    v47 += 6;
  }
  while (v47 != (uint64_t **)v260);
  v110 = 0uLL;
  v265 = 0u;
  v266 = 0u;
  *(_OWORD *)v264 = 0u;
  v267 = 0;
  v268 = 0;
  v269 = 0;
  v270 = 0;
  v111 = (uint64_t *)__p;
  if (__p == v260)
  {
    v138 = 0;
    v139 = 0;
  }
  else
  {
    v112 = 0;
    do
    {
      v127 = *v111;
      v128 = v111[1];
      v129 = (v128 - *v111) >> 4;
      if (v128 == *v111)
        v130 = 0;
      else
        v130 = v129 + 1;
      if (v130 >= 2)
      {
        v276.i64[0] = *v111;
        v276.i64[1] = v127;
        v277.i64[0] = v128;
        v277.i64[1] = v129;
        *(_QWORD *)&v278 = 0;
        v271.i64[0] = v128;
        v271.i64[1] = v127;
        v272.i64[0] = v128;
        v272.i64[1] = v129;
        v273 = v130;
        *(_QWORD *)&v274 = 0;
        *((_QWORD *)&v274 + 1) = v112;
        v275 = -1;
        sub_22376A804((uint64_t)&v268, (uint64_t)&v276, (uint64_t)&v271, &v274);
      }
      v132 = (uint64_t *)v111[3];
      v131 = (uint64_t *)v111[4];
      if (v132 != v131)
      {
        v133 = 0;
        do
        {
          v134 = *v132;
          v135 = v132[1];
          v136 = (v135 - *v132) >> 4;
          if (v135 == *v132)
            v137 = 0;
          else
            v137 = v136 + 1;
          if (v137 >= 2)
          {
            v276.i64[0] = *v132;
            v276.i64[1] = v134;
            v277.i64[0] = v135;
            v277.i64[1] = v136;
            *(_QWORD *)&v278 = 0;
            v271.i64[0] = v135;
            v271.i64[1] = v134;
            v272.i64[0] = v135;
            v272.i64[1] = v136;
            v273 = v137;
            *(_QWORD *)&v274 = 0;
            *((_QWORD *)&v274 + 1) = v112;
            v275 = v133;
            sub_22376A804((uint64_t)&v268, (uint64_t)&v276, (uint64_t)&v271, &v274);
            v131 = (uint64_t *)v111[4];
          }
          ++v133;
          v132 += 3;
        }
        while (v132 != v131);
      }
      v111 += 6;
      ++v112;
    }
    while (v111 != (uint64_t *)v260);
    v139 = (char *)v268;
    v138 = v269;
  }
  v276.i64[0] = (uint64_t)&__p;
  v276.i64[1] = (uint64_t)&v263;
  v277.i64[0] = (uint64_t)&v267 + 1;
  v277.i64[1] = (uint64_t)v264;
  *(_QWORD *)&v278 = &v267;
  DWORD2(v278) = 0;
  BYTE12(v278) = 1;
  if (0xEEEEEEEEEEEEEEEFLL * ((v138 - v139) >> 3) <= 0x10)
  {
LABEL_252:
    while (v139 != v138)
    {
      v144 = v139;
      v139 += 120;
      if (v139 != v138)
      {
        v145 = v139;
        while (1)
        {
          if (*((_QWORD *)v144 + 6) >= *((_QWORD *)v145 + 4) && *((_QWORD *)v144 + 4) <= *((_QWORD *)v145 + 6))
          {
            v146 = *((_QWORD *)v144 + 7) >= *((_QWORD *)v145 + 5) && *((_QWORD *)v144 + 5) <= *((_QWORD *)v145 + 7);
            v147 = v146 && v144[96] == 0;
            if (v147 && v145[96] == 0)
            {
              if (!sub_22376DF90(SDWORD2(v278), *(_QWORD *)v276.i64[0], (int *)v144, SDWORD2(v278), *(_QWORD *)v276.i64[0], (int *)v145, BYTE12(v278), v276.i64[1], v277.i64[0], (_QWORD *)v277.i64[1], (_BYTE *)v278))goto LABEL_244;
              v138 = v269;
            }
          }
          v145 += 120;
          if (v145 == v138)
            goto LABEL_252;
        }
      }
    }
  }
  else
  {
    v274 = 0uLL;
    v275 = 0;
    v271 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v272 = vdupq_n_s64(0x8000000000000000);
    sub_22376AE7C(&v268, v271.i64, (char **)&v274);
    sub_22376B104((uint64_t)&v271, &v274, 0, (uint64_t)&v276);
    if ((_QWORD)v274)
      operator delete((void *)v274);
  }
LABEL_244:
  if (v268)
    operator delete(v268);
  if ((_BYTE)v267)
    v140 = 21;
  else
    v140 = 0;
  v262 = v140;
  if ((void *)v265 == v264[1])
  {
    if ((_BYTE)v267)
      goto LABEL_272;
    v142 = 0;
    v143 = 0;
    v141 = (char *)v264[1] + 8 * ((*((_QWORD *)&v266 + 1) + (_QWORD)v266) / 0x14uLL);
LABEL_274:
    v149 = (uint64_t ***)__p;
    v150 = (uint64_t ***)v260;
    if (__p != v260)
    {
      v151 = (char *)v264[1] + 8 * ((unint64_t)v266 / 0x14);
      if (v142 == v143)
      {
        v157 = 0;
        while (1)
        {
          v276.i64[0] = (uint64_t)v151;
          v276.i64[1] = v142;
          v277.i64[0] = v157;
          v277.i64[1] = (uint64_t)v141;
          *(_QWORD *)&v278 = v143;
          v271.i64[0] = (uint64_t)v141;
          v271.i64[1] = v142;
          v272.i64[0] = v157;
          v272.i64[1] = (uint64_t)v141;
          v273 = v143;
          if (!sub_22377385C(v149[3], v149[4], (uint64_t *)v149, (uint64_t)&v276, (uint64_t)&v271, &v262, (uint64_t)&v263, v110))break;
          v149 += 6;
          ++v157;
          if (v149 == v150)
            goto LABEL_292;
        }
      }
      else
      {
        v152 = 0;
        while (1)
        {
          v153 = v151;
          v154 = v142;
          while (*(_QWORD *)(v154 + 56) != v152 || *(_QWORD *)(v154 + 136) != v152)
          {
            v154 += 200;
            if (v154 - *v153 == 4000)
            {
              v156 = v153[1];
              ++v153;
              v154 = v156;
            }
            if (v154 == v143)
            {
              v154 = v143;
              break;
            }
          }
          v276.i64[0] = (uint64_t)v153;
          v276.i64[1] = v154;
          v277.i64[0] = v152;
          v277.i64[1] = (uint64_t)v141;
          *(_QWORD *)&v278 = v143;
          v271.i64[0] = (uint64_t)v141;
          v271.i64[1] = v143;
          v272.i64[0] = v152;
          v272.i64[1] = (uint64_t)v141;
          v273 = v143;
          if (!sub_22377385C(v149[3], v149[4], (uint64_t *)v149, (uint64_t)&v276, (uint64_t)&v271, &v262, (uint64_t)&v263, v110))break;
          v149 += 6;
          ++v152;
          if (v149 == v150)
            goto LABEL_292;
        }
      }
      goto LABEL_340;
    }
LABEL_292:
    v158 = (char *)__p;
    v159 = v260;
    if ((void *)v265 == v264[1])
    {
      v160 = 0;
      v162 = 0;
      v161 = (char *)v264[1] + 8 * ((*((_QWORD *)&v266 + 1) + (_QWORD)v266) / 0x14uLL);
    }
    else
    {
      v160 = *((_QWORD *)v264[1] + (unint64_t)v266 / 0x14) + 200 * ((unint64_t)v266 % 0x14);
      v161 = (char *)v264[1] + 8 * ((*((_QWORD *)&v266 + 1) + (_QWORD)v266) / 0x14uLL);
      v162 = *v161 + 200 * ((*((_QWORD *)&v266 + 1) + (_QWORD)v266) % 0x14uLL);
    }
    if (__p != v260)
    {
      v163 = (char *)v264[1] + 8 * ((unint64_t)v266 / 0x14);
      if (v160 == v162)
      {
        v169 = 0;
        while (1)
        {
          v276.i64[0] = (uint64_t)v163;
          v276.i64[1] = v160;
          v277.i64[0] = v169;
          v277.i64[1] = (uint64_t)v161;
          *(_QWORD *)&v278 = v162;
          v271.i64[0] = (uint64_t)v161;
          v271.i64[1] = v160;
          v272.i64[0] = v169;
          v272.i64[1] = (uint64_t)v161;
          v273 = v162;
          if (!sub_2237894A0(*((_QWORD *)v158 + 3), *((_QWORD *)v158 + 4), (uint64_t)&v276, (uint64_t)&v271, &v262))break;
          v158 += 48;
          ++v169;
          if (v158 == v159)
            goto LABEL_313;
        }
      }
      else
      {
        v164 = 0;
        while (1)
        {
          v165 = v163;
          v166 = v160;
          while (*(_QWORD *)(v166 + 56) != v164 || *(_QWORD *)(v166 + 136) != v164)
          {
            v166 += 200;
            if (v166 - *v165 == 4000)
            {
              v168 = v165[1];
              ++v165;
              v166 = v168;
            }
            if (v166 == v162)
            {
              v166 = v162;
              break;
            }
          }
          v276.i64[0] = (uint64_t)v165;
          v276.i64[1] = v166;
          v277.i64[0] = v164;
          v277.i64[1] = (uint64_t)v161;
          *(_QWORD *)&v278 = v162;
          v271.i64[0] = (uint64_t)v161;
          v271.i64[1] = v162;
          v272.i64[0] = v164;
          v272.i64[1] = (uint64_t)v161;
          v273 = v162;
          if (!sub_2237894A0(*((_QWORD *)v158 + 3), *((_QWORD *)v158 + 4), (uint64_t)&v276, (uint64_t)&v271, &v262))break;
          v158 += 48;
          ++v164;
          if (v158 == v159)
            goto LABEL_313;
        }
      }
LABEL_340:
      v113 = 0;
LABEL_448:
      a3 = v256;
      a2 = v257;
      goto LABEL_449;
    }
LABEL_313:
    v170 = (char *)__p;
    v171 = v260;
    if ((void *)v265 == v264[1])
    {
      *((_QWORD *)&v274 + 1) = 0;
      v275 = 0;
      *(_QWORD *)&v274 = (char *)&v274 + 8;
    }
    else
    {
      v172 = *((_QWORD *)v264[1] + (unint64_t)v266 / 0x14) + 200 * ((unint64_t)v266 % 0x14);
      v173 = *((_QWORD *)v264[1] + (*((_QWORD *)&v266 + 1) + (_QWORD)v266) / 0x14uLL)
           + 200 * ((*((_QWORD *)&v266 + 1) + (_QWORD)v266) % 0x14uLL);
      *((_QWORD *)&v274 + 1) = 0;
      v275 = 0;
      *(_QWORD *)&v274 = (char *)&v274 + 8;
      if (v172 != v173)
      {
        v174 = (char *)v264[1] + 8 * ((unint64_t)v266 / 0x14);
        do
        {
          if (!*(_BYTE *)(v172 + 20))
          {
            v175 = (uint64_t *)*((_QWORD *)&v274 + 1);
            v176 = *(_QWORD *)(v172 + 56);
            v177 = (uint64_t **)&v274 + 1;
            v178 = (uint64_t **)&v274 + 1;
            if (*((_QWORD *)&v274 + 1))
            {
              v179 = (uint64_t *)*((_QWORD *)&v274 + 1);
              while (1)
              {
                while (1)
                {
                  v178 = (uint64_t **)v179;
                  v180 = v179[4];
                  if (v176 >= v180)
                    break;
                  v179 = *v178;
                  v177 = v178;
                  if (!*v178)
                    goto LABEL_325;
                }
                if (v180 >= v176)
                  break;
                v179 = v178[1];
                if (!v179)
                {
                  v177 = v178 + 1;
                  goto LABEL_325;
                }
              }
            }
            else
            {
LABEL_325:
              v181 = (uint64_t *)operator new(0x28uLL);
              v181[4] = v176;
              *v181 = 0;
              v181[1] = 0;
              v181[2] = (uint64_t)v178;
              *v177 = v181;
              if (*(_QWORD *)v274)
              {
                *(_QWORD *)&v274 = *(_QWORD *)v274;
                v181 = *v177;
              }
              sub_2231A9A8C(*((uint64_t **)&v274 + 1), v181);
              v175 = (uint64_t *)*((_QWORD *)&v274 + 1);
              ++v275;
            }
            v182 = *(_QWORD *)(v172 + 136);
            v183 = (uint64_t **)&v274 + 1;
            v184 = (uint64_t **)&v274 + 1;
            if (v175)
            {
              v185 = v175;
              while (1)
              {
                while (1)
                {
                  v184 = (uint64_t **)v185;
                  v186 = v185[4];
                  if (v182 >= v186)
                    break;
                  v185 = *v184;
                  v183 = v184;
                  if (!*v184)
                    goto LABEL_335;
                }
                if (v186 >= v182)
                  break;
                v185 = v184[1];
                if (!v185)
                {
                  v183 = v184 + 1;
                  goto LABEL_335;
                }
              }
            }
            else
            {
LABEL_335:
              v187 = (uint64_t *)operator new(0x28uLL);
              v187[4] = v182;
              *v187 = 0;
              v187[1] = 0;
              v187[2] = (uint64_t)v184;
              *v183 = v187;
              if (*(_QWORD *)v274)
              {
                *(_QWORD *)&v274 = *(_QWORD *)v274;
                v187 = *v183;
              }
              sub_2231A9A8C(*((uint64_t **)&v274 + 1), v187);
              ++v275;
            }
          }
          v172 += 200;
          if (v172 - *v174 == 4000)
          {
            v188 = v174[1];
            ++v174;
            v172 = v188;
          }
        }
        while (v172 != v173);
      }
    }
    if (v170 == v171)
    {
      v190 = 0;
      v191 = 0;
    }
    else
    {
      v189 = 0;
      v190 = 0;
      v191 = 0;
      v192 = 0;
      do
      {
        v193 = (__int128 *)*((_QWORD *)&v274 + 1);
        if (!*((_QWORD *)&v274 + 1))
          goto LABEL_355;
        v194 = (__int128 *)((char *)&v274 + 8);
        do
        {
          v195 = v193;
          v196 = v194;
          v197 = *((_QWORD *)v193 + 4);
          v198 = (__int128 *)((char *)v193 + 8);
          if (v197 >= v192)
          {
            v198 = v195;
            v194 = v195;
          }
          v193 = *(__int128 **)v198;
        }
        while (v193);
        if (v194 == (__int128 *)((char *)&v274 + 8))
          goto LABEL_355;
        if (v197 < v192)
          v195 = v196;
        if (v192 < *((_QWORD *)v195 + 4))
        {
LABEL_355:
          if (v190 < (uint64_t *)v189)
          {
            *v190 = (uint64_t)v170;
            *(int64x2_t *)(v190 + 1) = v276;
            *(int64x2_t *)(v190 + 3) = v271;
            *((_BYTE *)v190 + 40) = 0;
            v190 += 6;
          }
          else
          {
            v199 = 0xAAAAAAAAAAAAAAABLL * (((char *)v190 - (char *)v191) >> 4) + 1;
            if (v199 > 0x555555555555555)
              sub_22316E078();
            if (0x5555555555555556 * ((v189 - (char *)v191) >> 4) > v199)
              v199 = 0x5555555555555556 * ((v189 - (char *)v191) >> 4);
            if (0xAAAAAAAAAAAAAAABLL * ((v189 - (char *)v191) >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v200 = 0x555555555555555;
            else
              v200 = v199;
            if (v200 > 0x555555555555555)
              sub_223174E94();
            v201 = (char *)operator new(48 * v200);
            v202 = &v201[16 * (((char *)v190 - (char *)v191) >> 4)];
            *(_QWORD *)v202 = v170;
            v202[40] = 0;
            if (v190 == v191)
            {
              v205 = &v201[16 * (((char *)v190 - (char *)v191) >> 4)];
            }
            else
            {
              v203 = 0;
              do
              {
                v204 = &v202[v203 * 8];
                *((_QWORD *)v204 - 6) = v190[v203 - 6];
                *(_OWORD *)(v204 - 40) = *(_OWORD *)&v190[v203 - 5];
                *(_OWORD *)(v204 - 24) = *(_OWORD *)&v190[v203 - 3];
                *(v204 - 8) = v190[v203 - 1];
                v203 -= 6;
              }
              while (&v190[v203] != v191);
              v205 = &v202[v203 * 8];
            }
            v189 = &v201[48 * v200];
            v190 = (uint64_t *)(v202 + 48);
            if (v191)
              operator delete(v191);
            v191 = (uint64_t *)v205;
          }
        }
        v170 += 48;
        ++v192;
      }
      while (v170 != v171);
    }
    LOBYTE(v268) = 0;
    v269 = &v263;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v190 - (char *)v191) >> 4) <= 0x10)
    {
      if (v191 != v190)
      {
        v240 = v191;
        do
        {
          v241 = v240;
          v240 += 6;
          if (v240 != v190)
          {
            for (i = v240; i != v190; i += 6)
            {
              v243 = *v241;
              v244 = *i;
              strcpy(v276.i8, "FFFFFFFFF");
              sub_22378DA40(v243, v244, (unsigned __int8 *)&v276, (uint64_t)&v263);
              if (!v276.i8[9])
              {
                if (v276.u8[0] == 84 || v276.u8[0] - 48 < 0xA)
                  goto LABEL_443;
                if (v276.u8[1] == 84 || v276.u8[1] - 48 <= 9)
                  goto LABEL_443;
                v247 = 0;
                v248 = 40;
                if (v276.u8[3] == 84 || v276.u8[3] - 48 < 0xA)
                  goto LABEL_445;
              }
            }
          }
        }
        while (v240 != v190);
      }
    }
    else
    {
      v271 = 0uLL;
      v272.i64[0] = 0;
      v276 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v277 = vdupq_n_s64(0x8000000000000000);
      if (v191 != v190)
      {
        v206 = 0;
        v207 = 0x7FFFFFFFFFFFFFFFLL;
        v208 = 0x8000000000000000;
        v209 = 0x8000000000000000;
        v210 = 0x7FFFFFFFFFFFFFFFLL;
        for (j = (uint64_t)v191; (uint64_t *)j != v190; j += 48)
        {
          v213 = (uint64_t *)sub_22378AC50(j);
          v214 = *v213;
          if (*v213 >= v210)
          {
            if (v214 <= v209)
            {
LABEL_379:
              v215 = v213[1];
              if (v215 < v207)
                goto LABEL_380;
              goto LABEL_389;
            }
          }
          else
          {
            v276.i64[0] = *v213;
            v210 = v214;
            if (v214 <= v209)
              goto LABEL_379;
          }
          v277.i64[0] = v214;
          v209 = v214;
          v215 = v213[1];
          if (v215 < v207)
          {
LABEL_380:
            v276.i64[1] = v215;
            v207 = v215;
            if (v215 <= v208)
              goto LABEL_381;
            goto LABEL_390;
          }
LABEL_389:
          if (v215 <= v208)
          {
LABEL_381:
            v216 = v213[2];
            if (v216 < v210)
              goto LABEL_382;
            goto LABEL_391;
          }
LABEL_390:
          v277.i64[1] = v215;
          v208 = v215;
          v216 = v213[2];
          if (v216 < v210)
          {
LABEL_382:
            v276.i64[0] = v216;
            v210 = v216;
            if (v216 <= v209)
              goto LABEL_383;
            goto LABEL_392;
          }
LABEL_391:
          if (v216 <= v209)
          {
LABEL_383:
            v217 = v213[3];
            if (v217 < v207)
              goto LABEL_384;
            goto LABEL_393;
          }
LABEL_392:
          v277.i64[0] = v216;
          v209 = v216;
          v217 = v213[3];
          if (v217 < v207)
          {
LABEL_384:
            v276.i64[1] = v217;
            v207 = v217;
            if (v217 <= v208)
              goto LABEL_385;
            goto LABEL_394;
          }
LABEL_393:
          if (v217 <= v208)
          {
LABEL_385:
            v218 = v272.i64[0];
            if ((unint64_t)v206 >= v272.i64[0])
              goto LABEL_395;
            goto LABEL_375;
          }
LABEL_394:
          v277.i64[1] = v217;
          v208 = v217;
          v218 = v272.i64[0];
          if ((unint64_t)v206 >= v272.i64[0])
          {
LABEL_395:
            v255 = v210;
            v258 = v209;
            v219 = v208;
            v220 = v207;
            v221 = (char *)v271.i64[0];
            v222 = &v206[-v271.i64[0]];
            v223 = (uint64_t)&v206[-v271.i64[0]] >> 3;
            v224 = v223 + 1;
            if ((unint64_t)(v223 + 1) >> 61)
              sub_22316E078();
            v225 = v218 - v271.i64[0];
            if (v225 >> 2 > v224)
              v224 = v225 >> 2;
            if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF8)
              v226 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v226 = v224;
            if (v226)
            {
              if (v226 >> 61)
                sub_223174E94();
              v227 = operator new(8 * v226);
              v228 = v226;
            }
            else
            {
              v228 = 0;
              v227 = 0;
            }
            v229 = (uint64_t *)&v227[8 * v223];
            *v229 = j;
            v212 = (char *)(v229 + 1);
            if (v206 != v221)
            {
              v230 = v206 - v221 - 8;
              if (v230 < 0x168
                || (v233 = (v206 - 8 - v221) & 0xFFFFFFFFFFFFFFF8,
                    &v222[(_QWORD)v227 - 8 - v233] > &v222[(_QWORD)v227 - 8])
                || &v206[-v233 - 8] > v206 - 8
                || (unint64_t)(v206 - v227 - (_QWORD)v222) < 0x20)
              {
                v231 = v206;
                v207 = v220;
                v208 = v219;
                v209 = v258;
                v210 = v255;
              }
              else
              {
                v234 = (v230 >> 3) + 1;
                v235 = 8 * (v234 & 0x3FFFFFFFFFFFFFFCLL);
                v231 = &v206[-v235];
                v229 = (uint64_t *)((char *)v229 - v235);
                v236 = &v227[8 * v223 - 16];
                v237 = v206 - 16;
                v238 = v234 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v239 = *(_OWORD *)v237;
                  *(v236 - 1) = *((_OWORD *)v237 - 1);
                  *v236 = v239;
                  v236 -= 2;
                  v237 -= 32;
                  v238 -= 4;
                }
                while (v238);
                v207 = v220;
                v208 = v219;
                v209 = v258;
                v210 = v255;
                if (v234 == (v234 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_409:
                  v206 = (char *)v271.i64[0];
                  goto LABEL_411;
                }
              }
              do
              {
                v232 = *((_QWORD *)v231 - 1);
                v231 -= 8;
                *--v229 = v232;
              }
              while (v231 != v221);
              goto LABEL_409;
            }
            v207 = v220;
            v208 = v219;
            v209 = v258;
            v210 = v255;
LABEL_411:
            v271.i64[0] = (uint64_t)v229;
            v272.i64[0] = (uint64_t)&v227[8 * v228];
            if (v206)
              operator delete(v206);
            goto LABEL_376;
          }
LABEL_375:
          *(_QWORD *)v206 = j;
          v212 = v206 + 8;
LABEL_376:
          v271.i64[1] = (uint64_t)v212;
          v206 = v212;
        }
      }
      sub_22378A600((uint64_t)&v276, (uint64_t **)&v271, 0, (uint64_t)&v268);
      if (v271.i64[0])
        operator delete((void *)v271.i64[0]);
      if ((_BYTE)v268)
      {
LABEL_443:
        v247 = 0;
        v248 = 40;
LABEL_445:
        v262 = v248;
        if (v191)
          operator delete(v191);
        sub_223198030((uint64_t)&v274, *((_QWORD **)&v274 + 1));
        v113 = v247;
        goto LABEL_448;
      }
    }
    v248 = 0;
    v247 = 1;
    goto LABEL_445;
  }
  if (!(_BYTE)v267)
  {
    v141 = (char *)v264[1] + 8 * ((*((_QWORD *)&v266 + 1) + (_QWORD)v266) / 0x14uLL);
    v142 = *((_QWORD *)v264[1] + (unint64_t)v266 / 0x14) + 200 * ((unint64_t)v266 % 0x14);
    v143 = *v141 + 200 * ((*((_QWORD *)&v266 + 1) + (_QWORD)v266) % 0x14uLL);
    goto LABEL_274;
  }
LABEL_272:
  v113 = 0;
LABEL_449:
  v249 = (void **)v264[1];
  v250 = (void **)v265;
  *((_QWORD *)&v266 + 1) = 0;
  v251 = v265 - (unint64_t)v264[1];
  if ((unint64_t)v265 - (unint64_t)v264[1] >= 0x11)
  {
    do
    {
      operator delete(*v249);
      v250 = (void **)v265;
      v249 = (void **)((char *)v264[1] + 8);
      v264[1] = v249;
      v251 = v265 - (_QWORD)v249;
    }
    while ((_QWORD)v265 - (_QWORD)v249 > 0x10uLL);
  }
  v252 = v251 >> 3;
  if (v252 == 1)
  {
    v253 = 10;
LABEL_455:
    *(_QWORD *)&v266 = v253;
  }
  else if (v252 == 2)
  {
    v253 = 20;
    goto LABEL_455;
  }
  if (v249 != v250)
  {
    do
    {
      v254 = *v249++;
      operator delete(v254);
    }
    while (v249 != v250);
    if ((void *)v265 != v264[1])
      *(_QWORD *)&v265 = v265 + (((unint64_t)v264[1] - v265 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v264[0])
    operator delete(v264[0]);
LABEL_203:
  if (a3)
    *a2 = v262;
  v115 = (char *)__p;
  if (__p)
  {
    v116 = v260;
    v117 = __p;
    if (v260 != __p)
    {
      do
      {
        v118 = *((_QWORD *)v116 - 3);
        if (v118)
        {
          v119 = *((_QWORD *)v116 - 2);
          v120 = (void *)*((_QWORD *)v116 - 3);
          if (v119 != v118)
          {
            v121 = *((_QWORD *)v116 - 2);
            do
            {
              v123 = *(void **)(v121 - 24);
              v121 -= 24;
              v122 = v123;
              if (v123)
              {
                *(_QWORD *)(v119 - 16) = v122;
                operator delete(v122);
              }
              v119 = v121;
            }
            while (v121 != v118);
            v120 = (void *)*((_QWORD *)v116 - 3);
          }
          *((_QWORD *)v116 - 2) = v118;
          operator delete(v120);
        }
        v124 = v116 - 48;
        v125 = (void *)*((_QWORD *)v116 - 6);
        if (v125)
        {
          *((_QWORD *)v116 - 5) = v125;
          operator delete(v125);
        }
        v116 -= 48;
      }
      while (v124 != v115);
      v117 = __p;
    }
    v260 = v115;
    operator delete(v117);
  }
  return v113;
}

void sub_223767E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  void *v34;
  uint64_t v35;

  if (v34)
    operator delete(v34);
  if (v33)
    operator delete(v33);
  sub_223198030(v35 - 200, *(_QWORD **)(v35 - 192));
  sub_223792138((uint64_t)&a23);
  sub_223723314(&a19);
  _Unwind_Resume(a1);
}

void sub_223767EF8()
{
  JUMPOUT(0x223767F2CLL);
}

void sub_223767F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223723314((void **)va);
  _Unwind_Resume(a1);
}

void sub_223767F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  void *v23;

  v23 = *(void **)v20;
  if (*(_QWORD *)v20)
  {
    *(_QWORD *)(v20 + 8) = v23;
    operator delete(v23);
  }
  a20 = v20;
  sub_223295A74(v21 - 176);
  sub_223723314(&a19);
  _Unwind_Resume(a1);
}

void sub_223767FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19)
{
  uint64_t v19;

  if (__p)
  {
    operator delete(__p);
    sub_223295A74(v19 - 176);
    sub_223723314(&a19);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223768010);
}

void sub_22376800C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_223295A74(v11 - 176);
  sub_223723314((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223768028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t (**v5)();
  uint64_t (**v6)();
  uint64_t (**v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t (**v10)();
  uint64_t (**v11)();
  uint64_t (**v12)();
  uint64_t (**v13)();
  uint64_t (*v14)();
  uint64_t (*v15)();
  unint64_t v16;
  uint64_t (***v17)();
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  void *v33[2];
  void *v34[2];
  __int128 v35;
  _QWORD v36[2];
  int v37;
  uint64_t v38;
  char v39;
  char v40;
  __int128 v41;
  _OWORD v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (**v57)();
  uint64_t (**v58)();
  uint64_t (***v59)();
  uint64_t (***v60)();
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v36[1] = 0;
  v37 = 2;
  v38 = 0;
  v40 = 0;
  v41 = 0u;
  memset(v42, 0, sizeof(v42));
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0;
  v51 = 1;
  v52 = 0;
  v53 = 256;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  v36[0] = &off_24EC587E8;
  v32[0] = &off_24EC58820;
  v32[1] = 0;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  sub_223FC51A4(a1, 0, 0, (char **)&v43, (uint64_t **)v42);
  v39 = 0;
  sub_223FC51A4(a2, 1, 0, (char **)&v43, (uint64_t **)v42);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  if (sub_223FC8B18((uint64_t)v36, 2, 1, 1))
  {
    v6 = v57;
    v5 = v58;
    if (v58 != v57)
    {
      v7 = v58;
      do
      {
        v9 = *(v7 - 3);
        v7 -= 3;
        v8 = v9;
        if (v9)
        {
          *(v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v6);
    }
    v58 = v6;
    (*(void (**)(_QWORD *))(v32[0] + 24))(v32);
    sub_223FCC5A4((uint64_t)v36, (uint64_t)v32, (uint64_t)&v57);
  }
  while ((_QWORD)v41)
  {
    *(_QWORD *)&v41 = *(_QWORD *)(v41 + 80);
    MEMORY[0x227684CE8]();
  }
  if (*((_QWORD *)&v44 + 1))
  {
    *(_QWORD *)&v45 = *((_QWORD *)&v44 + 1);
    operator delete(*((void **)&v44 + 1));
  }
  *((_QWORD *)&v44 + 1) = 0;
  v45 = 0uLL;
  *((_QWORD *)&v46 + 1) = v46;
  sub_223FC5908((uint64_t)v36);
  *(_QWORD *)&v48 = *((_QWORD *)&v47 + 1);
  *((_QWORD *)&v49 + 1) = v49;
  v10 = v57;
  if (v57)
  {
    v11 = v58;
    v12 = v57;
    if (v58 != v57)
    {
      v13 = v58;
      do
      {
        v15 = *(v13 - 3);
        v13 -= 3;
        v14 = v15;
        if (v15)
        {
          *(v11 - 2) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = v57;
    }
    v58 = v10;
    operator delete(v12);
  }
  v16 = ((char *)v33[1] - (char *)v33[0]) >> 3;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_2232EA6AC((uint64_t)a3, v16);
  v57 = &off_24EC588F8;
  v58 = a3;
  v17 = &v57;
  v59 = &v57;
  v60 = &v57;
  v18 = v33[0];
  v19 = v33[1];
  if (v33[0] == v33[1])
  {
    v20 = 4;
  }
  else
  {
    do
    {
      if (!v17)
        sub_223198474();
      ((void (*)(uint64_t (***)(), _QWORD))(*v17)[6])(v17, *v18++);
      v17 = v60;
    }
    while (v18 != v19);
    if (v60 == &v57)
    {
      v20 = 4;
      v17 = &v57;
    }
    else
    {
      if (!v60)
        goto LABEL_29;
      v20 = 5;
    }
  }
  (*v17)[v20]();
LABEL_29:
  v32[0] = &off_24EC58820;
  v21 = v33[0];
  v22 = v33[1];
  if (v33[1] == v33[0])
  {
    v23 = v34[1];
    if (!v34[1])
      goto LABEL_32;
    goto LABEL_31;
  }
  do
  {
    v28 = *--v22;
    v27 = v28;
    *v22 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  while (v22 != v21);
  v33[1] = v21;
  v23 = v34[1];
  if (v34[1])
  {
LABEL_31:
    *(_QWORD *)&v35 = v23;
    operator delete(v23);
  }
LABEL_32:
  v24 = v33[0];
  if (v33[0])
  {
    v25 = v33[1];
    v26 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        v30 = *--v25;
        v29 = v30;
        *v25 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
      while (v25 != v24);
      v26 = v33[0];
    }
    v33[1] = v24;
    operator delete(v26);
  }
  return sub_223FC56E0(v36);
}

void sub_2237683C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_22317C838(v2);
  sub_223768458((uint64_t *)va);
  sub_223FC56E0((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_223768448(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
}

_QWORD *sub_223768458(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = &off_24EC58820;
  v2 = (_QWORD *)a1[2];
  v3 = (_QWORD *)a1[3];
  if (v3 == v2)
  {
    v4 = (void *)a1[5];
    if (!v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  do
  {
    v9 = *--v3;
    v8 = v9;
    *v3 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  while (v3 != v2);
  a1[3] = v2;
  v4 = (void *)a1[5];
  if (v4)
  {
LABEL_3:
    a1[6] = v4;
    operator delete(v4);
  }
LABEL_4:
  v5 = (_QWORD *)a1[2];
  if (v5)
  {
    v6 = (_QWORD *)a1[3];
    v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        v11 = *--v6;
        v10 = v11;
        *v6 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v6 != v5);
      v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_22376852C(float32x2_t ***a1@<X0>, float32x2_t ***a2@<X1>, uint64_t a3@<X8>)
{
  double v10;
  int v11;
  float64x2_t **v12;
  float64x2_t *v13;
  float64x2_t *v14;
  uint64_t v15;
  float32x2_t *v16;
  float32x2_t v17;
  float32x2_t *v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  float32x2_t *v25;
  char *v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  float32x2_t *v30;
  float32x2_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  float32x2_t *v36;
  uint64_t v37;
  __int128 v38;
  _QWORD *v39;
  float64x2_t **v40;
  void *v41;
  float64x2_t **v42;
  float64x2_t *v43;
  float64x2_t *v44;
  char *v45;
  char *v46;
  void *v47;
  char *v48;
  void *v49;
  void *v50;
  char *v51;
  char *v52;
  void *v53;
  char *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  float64x2_t **v58;
  void *v59;
  char *v60;
  void *v61;
  char *v62;
  void *v63;
  float64x2_t **v64;
  uint64_t v65;
  __int128 v66;
  unint64_t v67;
  void *v68[2];
  uint64_t v69;
  void *__p;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;

  sub_223768B7C((uint64_t)&v61, a1);
  sub_223768B7C((uint64_t)&v59, a2);
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v71 = 0u;
  v79 = 0;
  v85 = 0u;
  v72 = 0u;
  DWORD2(v71) = 2;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v84 = 0;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  LOBYTE(v85) = 1;
  BYTE9(v85) = 1;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  __p = &off_24EC588C0;
  __asm { FMOV            V0.2D, #1.0 }
  v89 = _Q0;
  v10 = __exp10(2.0);
  v11 = ilogb(v10);
  *(_QWORD *)&v89 = ldexp(1.0, v11 + 1);
  *((double *)&v89 + 1) = 1.0 / *(double *)&v89;
  sub_223769950((uint64_t)&__p, (char ****)&v61);
  sub_223769A0C((uint64_t)&__p, (char ****)&v59);
  sub_223769AC8((uint64_t)&__p, 1, 1, (uint64_t)&v63);
  sub_223FC56E0(&__p);
  v67 = 0;
  v66 = 0uLL;
  sub_2236ADBC8((uint64_t)&v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (_BYTE *)v63) >> 3));
  v12 = (float64x2_t **)v63;
  v58 = v64;
  if (v63 != v64)
  {
    v57 = a3;
    while (1)
    {
      v13 = *v12;
      v14 = v12[1];
      __p = 0;
      v71 = 0uLL;
      v15 = (char *)v14 - (char *)v13;
      if (v14 != v13)
        break;
      v68[0] = 0;
      v68[1] = 0;
      v69 = 0;
      v39 = (_QWORD *)*((_QWORD *)&v66 + 1);
      if (*((_QWORD *)&v66 + 1) < v67)
        goto LABEL_3;
LABEL_42:
      *((_QWORD *)&v66 + 1) = sub_2236ADCEC((char **)&v66, (uint64_t)v68);
      if (v68[0])
      {
        v68[1] = v68[0];
        operator delete(v68[0]);
      }
LABEL_4:
      v12 += 3;
      if (v12 == v58)
      {
        v12 = (float64x2_t **)v63;
        a3 = v57;
        goto LABEL_45;
      }
    }
    if (v15 < 0)
      sub_22316E078();
    v16 = (float32x2_t *)operator new((unint64_t)v15 >> 1);
    __p = v16;
    *(_QWORD *)&v71 = v16;
    *((_QWORD *)&v71 + 1) = &v16[v15 >> 4];
    while (1)
    {
      while (1)
      {
        v17 = vcvt_f32_f64(*v13);
        if ((unint64_t)v16 >= *((_QWORD *)&v71 + 1))
          break;
        *v16++ = v17;
        *(_QWORD *)&v71 = v16;
        if (++v13 == v14)
          goto LABEL_39;
      }
      v18 = (float32x2_t *)__p;
      v19 = (char *)v16 - (_BYTE *)__p;
      v20 = ((char *)v16 - (_BYTE *)__p) >> 3;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        sub_22316E078();
      v22 = *((_QWORD *)&v71 + 1) - (_QWORD)__p;
      if ((uint64_t)(*((_QWORD *)&v71 + 1) - (_QWORD)__p) >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          sub_223174E94();
        v24 = operator new(8 * v23);
        v25 = (float32x2_t *)&v24[8 * v20];
        v26 = &v24[8 * v23];
        *v25 = v17;
        v27 = (uint64_t)&v25[1];
        v28 = (char *)v16 - (char *)v18;
        if (v16 == v18)
        {
LABEL_26:
          __p = v25;
          *(_QWORD *)&v71 = v27;
          *((_QWORD *)&v71 + 1) = v26;
          goto LABEL_27;
        }
      }
      else
      {
        v24 = 0;
        v25 = (float32x2_t *)(8 * v20);
        v26 = 0;
        *(float32x2_t *)(8 * v20) = v17;
        v27 = 8 * v20 + 8;
        v28 = (char *)v16 - (char *)v18;
        if (v16 == v18)
          goto LABEL_26;
      }
      v29 = v28 - 8;
      if (v29 >= 0x168)
      {
        v32 = ((char *)&v16[-1] - (char *)v18) & 0xFFFFFFFFFFFFFFF8;
        if (&v24[v19 - 8 - v32] > &v24[v19 - 8])
        {
          v30 = v16;
        }
        else if ((float32x2_t *)((char *)&v16[-1] - v32) > &v16[-1])
        {
          v30 = v16;
        }
        else if ((unint64_t)((char *)v16 - v24 - v19) >= 0x20)
        {
          v33 = (v29 >> 3) + 1;
          v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
          v30 = &v16[v34 / 0xFFFFFFFFFFFFFFF8];
          v25 = (float32x2_t *)((char *)v25 - v34);
          v35 = &v24[8 * v20 - 16];
          v36 = v16 - 2;
          v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v38 = *(_OWORD *)v36->f32;
            *(v35 - 1) = *(_OWORD *)v36[-2].f32;
            *v35 = v38;
            v35 -= 2;
            v36 -= 4;
            v37 -= 4;
          }
          while (v37);
          if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_22;
        }
        else
        {
          v30 = v16;
        }
      }
      else
      {
        v30 = v16;
      }
      do
      {
        v31 = v30[-1];
        --v30;
        v25[-1] = v31;
        --v25;
      }
      while (v30 != v18);
LABEL_22:
      v16 = (float32x2_t *)__p;
      __p = v25;
      *(_QWORD *)&v71 = v27;
      *((_QWORD *)&v71 + 1) = v26;
      if (v16)
      {
LABEL_27:
        operator delete(v16);
        v16 = (float32x2_t *)v27;
        *(_QWORD *)&v71 = v27;
        if (++v13 == v14)
        {
LABEL_39:
          v68[0] = __p;
          v68[1] = v16;
          v69 = *((_QWORD *)&v71 + 1);
          v39 = (_QWORD *)*((_QWORD *)&v66 + 1);
          if (*((_QWORD *)&v66 + 1) >= v67)
            goto LABEL_42;
LABEL_3:
          *v39 = 0;
          v39[1] = 0;
          v39[2] = 0;
          *(_OWORD *)v39 = *(_OWORD *)v68;
          v39[2] = v69;
          *((_QWORD *)&v66 + 1) = v39 + 3;
          goto LABEL_4;
        }
      }
      else
      {
        v16 = (float32x2_t *)v27;
        *(_QWORD *)&v71 = v27;
        if (++v13 == v14)
          goto LABEL_39;
      }
    }
  }
LABEL_45:
  *(_OWORD *)a3 = v66;
  *(_QWORD *)(a3 + 16) = v67;
  if (v12)
  {
    v40 = v64;
    v41 = v12;
    if (v64 != v12)
    {
      v42 = v64;
      do
      {
        v44 = *(v42 - 3);
        v42 -= 3;
        v43 = v44;
        if (v44)
        {
          *(v40 - 2) = v43;
          operator delete(v43);
        }
        v40 = v42;
      }
      while (v42 != v12);
      v41 = v63;
    }
    v64 = v12;
    operator delete(v41);
  }
  v45 = (char *)v59;
  if (v59)
  {
    v46 = v60;
    v47 = v59;
    if (v60 != v59)
    {
      v48 = v60;
      do
      {
        v50 = (void *)*((_QWORD *)v48 - 3);
        v48 -= 24;
        v49 = v50;
        if (v50)
        {
          *((_QWORD *)v46 - 2) = v49;
          operator delete(v49);
        }
        v46 = v48;
      }
      while (v48 != v45);
      v47 = v59;
    }
    v60 = v45;
    operator delete(v47);
  }
  v51 = (char *)v61;
  if (v61)
  {
    v52 = v62;
    v53 = v61;
    if (v62 != v61)
    {
      v54 = v62;
      do
      {
        v56 = (void *)*((_QWORD *)v54 - 3);
        v54 -= 24;
        v55 = v56;
        if (v56)
        {
          *((_QWORD *)v52 - 2) = v55;
          operator delete(v55);
        }
        v52 = v54;
      }
      while (v54 != v51);
      v53 = v61;
    }
    v62 = v51;
    operator delete(v53);
  }
}

void sub_223768A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char *__p,char *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  void *v35;
  void *v36;

  v31 = __p;
  if (__p)
  {
    v32 = a22;
    v33 = __p;
    if (a22 != __p)
    {
      v34 = a22;
      do
      {
        v36 = (void *)*((_QWORD *)v34 - 3);
        v34 -= 24;
        v35 = v36;
        if (v36)
        {
          *((_QWORD *)v32 - 2) = v35;
          operator delete(v35);
        }
        v32 = v34;
      }
      while (v34 != v31);
      v33 = __p;
    }
    a22 = v31;
    operator delete(v33);
  }
  sub_22317C838(&a18);
  sub_22317C838(&a12);
  sub_22317C838(&a15);
  _Unwind_Resume(a1);
}

double sub_223768B7C(uint64_t a1, float32x2_t ***a2)
{
  uint64_t v3;
  float32x2_t **v4;
  float32x2_t **v5;
  float32x2_t *v6;
  float32x2_t *v7;
  uint64_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float64x2_t *v17;
  char *v18;
  float64x2_t *v19;
  float64x2_t *v20;
  _QWORD *v21;
  double result;
  float64x2_t v24;
  __int128 v25;
  unint64_t v26;
  void *v27[2];
  float64x2_t *v28;
  void *__p;
  float64x2_t *v30;
  float64x2_t *v31;

  v3 = a2[1] - *a2;
  v26 = 0;
  v25 = 0uLL;
  sub_2232EA6AC((uint64_t)&v25, 0xAAAAAAAAAAAAAAABLL * v3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    while (1)
    {
      v6 = *v4;
      v7 = v4[1];
      __p = 0;
      v30 = 0;
      v31 = 0;
      v8 = (char *)v7 - (char *)v6;
      if (v7 != v6)
        break;
      v27[0] = 0;
      v27[1] = 0;
      v28 = 0;
      v21 = (_QWORD *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1) < v26)
        goto LABEL_3;
LABEL_30:
      *((_QWORD *)&v25 + 1) = sub_2232EA89C((char **)&v25, (uint64_t)v27);
      if (v27[0])
      {
        v27[1] = v27[0];
        operator delete(v27[0]);
      }
LABEL_4:
      v4 += 3;
      if (v4 == v5)
        goto LABEL_32;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF9)
      sub_22316E078();
    v9 = (float64x2_t *)operator new(2 * v8);
    __p = v9;
    v30 = v9;
    v31 = &v9[v8 >> 3];
    while (1)
    {
      while (1)
      {
        v10 = vcvtq_f64_f32(*v6);
        if (v9 >= v31)
          break;
        *v9++ = v10;
        v30 = v9;
        if (++v6 == v7)
          goto LABEL_27;
      }
      v11 = (float64x2_t *)__p;
      v12 = ((char *)v9 - (_BYTE *)__p) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        sub_22316E078();
      v14 = (char *)v31 - (_BYTE *)__p;
      if (((char *)v31 - (_BYTE *)__p) >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v24 = v10;
        if (v15 >> 60)
          sub_223174E94();
        v16 = (char *)operator new(16 * v15);
        v17 = (float64x2_t *)&v16[16 * v12];
        v18 = &v16[16 * v15];
        *v17 = v24;
        v19 = v17 + 1;
        if (v9 == v11)
          goto LABEL_25;
        do
        {
LABEL_21:
          v17[-1] = v9[-1];
          --v17;
          --v9;
        }
        while (v9 != v11);
        v9 = (float64x2_t *)__p;
        __p = v17;
        v30 = v19;
        v31 = (float64x2_t *)v18;
        if (v9)
          goto LABEL_26;
        v9 = v19;
        v30 = v19;
        if (++v6 == v7)
          goto LABEL_27;
      }
      else
      {
        v17 = (float64x2_t *)(16 * v12);
        v18 = 0;
        v20 = (float64x2_t *)(16 * v12);
        *v20 = v10;
        v19 = v20 + 1;
        if (v9 != v11)
          goto LABEL_21;
LABEL_25:
        __p = v17;
        v30 = v19;
        v31 = (float64x2_t *)v18;
LABEL_26:
        operator delete(v9);
        v9 = v19;
        v30 = v19;
        if (++v6 == v7)
        {
LABEL_27:
          v27[0] = __p;
          v27[1] = v9;
          v28 = v31;
          v21 = (_QWORD *)*((_QWORD *)&v25 + 1);
          if (*((_QWORD *)&v25 + 1) >= v26)
            goto LABEL_30;
LABEL_3:
          *v21 = 0;
          v21[1] = 0;
          v21[2] = 0;
          *(_OWORD *)v21 = *(_OWORD *)v27;
          v21[2] = v28;
          *((_QWORD *)&v25 + 1) = v21 + 3;
          goto LABEL_4;
        }
      }
    }
  }
LABEL_32:
  result = *(double *)&v25;
  *(_OWORD *)a1 = v25;
  *(_QWORD *)(a1 + 16) = v26;
  return result;
}

void sub_223768E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;

  if (__p)
  {
    v22 = a14;
    v23 = __p;
    if (a14 != __p)
    {
      v24 = a14;
      do
      {
        v26 = (void *)*((_QWORD *)v24 - 3);
        v24 -= 24;
        v25 = v26;
        if (v26)
        {
          *(v22 - 2) = v25;
          operator delete(v25);
        }
        v22 = v24;
      }
      while (v24 != __p);
      v23 = __p;
    }
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223768F0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 48);
    *(_QWORD *)(a1 + 16) = i - 48;
    v5 = *(_QWORD *)(i - 24);
    if (v5)
    {
      v6 = *(_QWORD *)(i - 16);
      v7 = *(void **)(i - 24);
      if (v6 != v5)
      {
        v8 = *(_QWORD *)(i - 16);
        do
        {
          v10 = *(void **)(v8 - 24);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *(_QWORD *)(v6 - 16) = v9;
            operator delete(v9);
          }
          v6 = v8;
        }
        while (v8 != v5);
        v7 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v5;
      operator delete(v7);
    }
    v11 = *v4;
    if (*v4)
    {
      *(_QWORD *)(i - 40) = v11;
      operator delete(v11);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_223768FC4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    do
    {
      v11 = &v7[v8];
      v12 = v3 + v8;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      v14 = *(_BYTE **)(v3 + v8);
      v13 = *(_BYTE **)(v3 + v8 + 8);
      v15 = v13 - v14;
      if (v13 != v14)
      {
        if (v15 < 0)
          sub_22316E078();
        v9 = (char *)operator new(v13 - v14);
        *(_QWORD *)v11 = v9;
        *((_QWORD *)v11 + 1) = v9;
        *((_QWORD *)v11 + 2) = &v9[16 * (v15 >> 4)];
        v10 = v15 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v9, v14, v10);
        *((_QWORD *)v11 + 1) = &v9[v10];
      }
      v8 += 24;
    }
    while (v12 + 24 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_223769114(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223769198@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  __int128 v26;
  _OWORD v27[2];
  __int128 v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v21[1] = 0;
  v22 = 2;
  v23 = 0;
  v25 = 0;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  v28 = 0u;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v36 = 1;
  v37 = 0;
  v38 = 256;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v21[0] = &off_24EC587E8;
  sub_223FC51A4(a3, 0, 0, (char **)&v28, (uint64_t **)v27);
  v24 = 0;
  sub_223FC51A4(a4, 1, 0, (char **)&v28, (uint64_t **)v27);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v10 = *a5;
  v9 = a5[1];
  if (v9 != *a5)
  {
    v11 = a5[1];
    do
    {
      v13 = *(void **)(v11 - 24);
      v11 -= 24;
      v12 = v13;
      if (v13)
      {
        *(_QWORD *)(v9 - 16) = v12;
        operator delete(v12);
      }
      v9 = v11;
    }
    while (v11 != v10);
  }
  a5[1] = v10;
  v43 = 0;
  if (sub_223FC8B18((uint64_t)v21, a1, a2, 0))
    sub_223FCC37C((uint64_t)v21, (uint64_t)a5, (uint64_t)&v42);
  while ((_QWORD)v26)
  {
    *(_QWORD *)&v26 = *(_QWORD *)(v26 + 80);
    MEMORY[0x227684CE8]();
  }
  if (__p[1])
  {
    *(void **)&v30 = __p[1];
    operator delete(__p[1]);
  }
  __p[1] = 0;
  v30 = 0uLL;
  *((_QWORD *)&v31 + 1) = v31;
  sub_223FC5908((uint64_t)v21);
  *(_QWORD *)&v33 = *((_QWORD *)&v32 + 1);
  *((_QWORD *)&v34 + 1) = v34;
  v14 = v42;
  if (v42)
  {
    v15 = v43;
    v16 = v42;
    if (v43 != v42)
    {
      v17 = v43;
      do
      {
        v19 = (void *)*((_QWORD *)v17 - 3);
        v17 -= 24;
        v18 = v19;
        if (v19)
        {
          *((_QWORD *)v15 - 2) = v18;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = v42;
    }
    v43 = v14;
    operator delete(v16);
  }
  return sub_223FC56E0(v21);
}

void sub_2237693B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  sub_22317C838((void **)(v3 - 88));
  sub_223FC56E0((uint64_t *)va);
  sub_22317C838(v2);
  _Unwind_Resume(a1);
}

void sub_2237693D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  sub_223FC56E0((uint64_t *)va);
  sub_22317C838(v2);
  _Unwind_Resume(a1);
}

void sub_2237693F4(_QWORD *a1)
{
  sub_223FC56E0(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223769418(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = &off_24EC58820;
  v2 = (_QWORD *)a1[2];
  v3 = (_QWORD *)a1[3];
  if (v3 == v2)
  {
    v4 = (void *)a1[5];
    if (!v4)
      goto LABEL_4;
  }
  else
  {
    do
    {
      v9 = *--v3;
      v8 = v9;
      *v3 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    while (v3 != v2);
    a1[3] = v2;
    v4 = (void *)a1[5];
    if (!v4)
    {
LABEL_4:
      v5 = (_QWORD *)a1[2];
      if (v5)
      {
        v6 = (_QWORD *)a1[3];
        v7 = (void *)a1[2];
        if (v6 != v5)
        {
          do
          {
            v11 = *--v6;
            v10 = v11;
            *v6 = 0;
            if (v11)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          }
          while (v6 != v5);
          v7 = (void *)a1[2];
        }
        a1[3] = v5;
        operator delete(v7);
      }
      JUMPOUT(0x227684CE8);
    }
  }
  a1[6] = v4;
  operator delete(v4);
  goto LABEL_4;
}

uint64_t sub_2237694F8(_QWORD *a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24EC58820;
  *(_QWORD *)(v4 + 8) = a1;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  v7 = (uint64_t *)a1[3];
  v6 = a1[4];
  v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *v7 = v4;
    v9 = (uint64_t)(v7 + 1);
    goto LABEL_27;
  }
  v10 = (char *)a1[2];
  v11 = ((char *)v7 - v10) >> 3;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    sub_22316E078();
  v13 = v6 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_223174E94();
    v15 = (char *)operator new(8 * v14);
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v5;
    v9 = (uint64_t)(v16 + 1);
    v18 = (char *)((char *)v7 - v10);
    if (v7 != (uint64_t *)v10)
      goto LABEL_12;
  }
  else
  {
    v15 = 0;
    v16 = (uint64_t *)(8 * v11);
    v17 = 0;
    *(_QWORD *)(8 * v11) = v5;
    v9 = 8 * v11 + 8;
    v18 = (char *)((char *)v7 - v10);
    if (v7 != (uint64_t *)v10)
    {
LABEL_12:
      v19 = (unint64_t)(v18 - 8);
      if (v19 < 0x78
        || (uint64_t *)((char *)v7 - (v19 & 0xFFFFFFFFFFFFFFF8) - 8) < v16
        && &v15[(char *)v7 - v10 - (v19 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v7)
      {
        goto LABEL_34;
      }
      v20 = (v19 >> 3) + 1;
      v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v16 = (uint64_t *)((char *)v16 - v21);
      v8 = &v7[v21 / 0xFFFFFFFFFFFFFFF8];
      v22 = v7 - 2;
      v23 = &v15[8 * v11 - 16];
      v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *((_OWORD *)v22 - 1);
        v25 = *(_OWORD *)v22;
        *((_OWORD *)v22 - 1) = 0uLL;
        *(_OWORD *)v22 = 0uLL;
        *((_OWORD *)v23 - 1) = v26;
        *(_OWORD *)v23 = v25;
        v22 -= 4;
        v23 -= 32;
        v24 -= 4;
      }
      while (v24);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v27 = *--v8;
          *v8 = 0;
          *--v16 = v27;
        }
        while (v8 != (uint64_t *)v10);
      }
      v8 = (uint64_t *)a1[2];
      v28 = (uint64_t *)a1[3];
      a1[2] = v16;
      a1[3] = v9;
      a1[4] = v17;
      while (v28 != v8)
      {
        v30 = *--v28;
        v29 = v30;
        *v28 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
      goto LABEL_25;
    }
  }
  a1[2] = v16;
  a1[3] = v9;
  a1[4] = v17;
LABEL_25:
  if (v8)
    operator delete(v8);
LABEL_27:
  a1[3] = v9;
  v31 = *(_QWORD *)(v9 - 8);
  if ((char **)(v31 + 40) != a2)
    sub_223769794((_QWORD *)(v31 + 40), *a2, a2[1], (a2[1] - *a2) >> 4);
  return v31;
}

void sub_22376971C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223769738(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = (_QWORD *)result[2];
  v2 = (_QWORD *)result[3];
  if (v2 != v1)
  {
    v3 = result;
    do
    {
      v4 = (_QWORD *)*--v2;
      result = v4;
      *v2 = 0;
      if (v4)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
    while (v2 != v1);
    v3[3] = v1;
  }
  return result;
}

_QWORD *sub_223769794(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 4)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 4;
    if (v18 >= __sz)
    {
      v21 = *result;
      if (a2 != a3)
      {
        v22 = (char *)*result;
        do
        {
          if (v6 != v22)
            *(_OWORD *)v22 = *(_OWORD *)v6;
          v6 += 16;
          v22 += 16;
          v21 += 16;
        }
        while (v6 != a3);
      }
      v15 = v21 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[16 * v18];
      if (v17 != v9)
      {
        v20 = 16 * v18;
        do
        {
          if (v6 != v9)
            *(_OWORD *)v9 = *(_OWORD *)v6;
          v6 += 16;
          v9 += 16;
          v20 -= 16;
        }
        while (v20);
        v9 = *v16;
      }
      v23 = v9;
      if (v19 != a3)
      {
        v23 = v9;
        v24 = v9;
        do
        {
          v25 = *(_OWORD *)v19;
          v19 += 16;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v19 != a3);
      }
      v15 = v23 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_31;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_31:
      sub_22316E078();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFF0);
      v14 = &v9[(a3 - v6) & 0xFFFFFFFFFFFFFFF0];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

void sub_223769950(uint64_t a1, char ****a2)
{
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;
  void *__p;
  char *v10;

  sub_223769CCC(a2, (_DWORD *)(a1 + 220), (uint64_t)&__p, *(float64_t *)(a1 + 256), *(float64_t *)(a1 + 256));
  *(_BYTE *)(a1 + 32) = 0;
  sub_223FC51A4((uint64_t)&__p, 0, 0, (char **)(a1 + 88), (uint64_t **)(a1 + 56));
  v3 = (char *)__p;
  if (__p)
  {
    v4 = v10;
    v5 = __p;
    if (v10 != __p)
    {
      v6 = v10;
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = __p;
    }
    v10 = v3;
    operator delete(v5);
  }
}

void sub_2237699F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

void sub_223769A0C(uint64_t a1, char ****a2)
{
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;
  void *__p;
  char *v10;

  sub_223769CCC(a2, (_DWORD *)(a1 + 220), (uint64_t)&__p, *(float64_t *)(a1 + 256), *(float64_t *)(a1 + 256));
  *(_BYTE *)(a1 + 32) = 0;
  sub_223FC51A4((uint64_t)&__p, 1, 0, (char **)(a1 + 88), (uint64_t **)(a1 + 56));
  v3 = (char *)__p;
  if (__p)
  {
    v4 = v10;
    v5 = __p;
    if (v10 != __p)
    {
      v6 = v10;
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = __p;
    }
    v10 = v3;
    operator delete(v5);
  }
}

void sub_223769AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_223769AC8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  int v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  void *v14;
  void *__p;
  char *v17;
  uint64_t v18;

  __p = 0;
  v17 = 0;
  v18 = 0;
  if (sub_223FC8B18(a1, a2, a3, 0))
    sub_223FCCCD4(a1, a4, (uint64_t)&__p);
  while (1)
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (!v6)
      break;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 + 80);
    MEMORY[0x227684CE8]();
  }
  v7 = *(void **)(a1 + 112);
  if (v7)
  {
    *(_QWORD *)(a1 + 120) = v7;
    operator delete(v7);
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  sub_223FC5908(a1);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  v8 = *(unsigned __int8 *)(a1 + 225);
  v9 = (char *)__p;
  if (__p)
  {
    v10 = v17;
    v11 = __p;
    if (v17 != __p)
    {
      v12 = v17;
      do
      {
        v14 = (void *)*((_QWORD *)v12 - 3);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *((_QWORD *)v10 - 2) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = __p;
    }
    v17 = v9;
    operator delete(v11);
  }
  return v8 != 0;
}

void sub_223769BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

void sub_223769BF0(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_24EC58898;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

void sub_223769C3C(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24EC58898;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223769C8C(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_223769CA8(_QWORD *a1)
{
  sub_223FC56E0(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223769CCC(char ****a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>, float64_t a4@<D0>, float64_t a5@<D1>)
{
  char ***v10;
  char ***v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double **v16;
  double *v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char ***i;
  char ***v28;
  _QWORD *v29;
  char *v30;
  void *v31;
  _QWORD *exception;
  char *v33;
  void *__p[2];
  uint64_t v35;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v10 = *a1;
  v11 = a1[1];
  if (*a1 == v11)
  {
    v14 = 1.79769313e308;
    v15 = -1.79769313e308;
    v12 = -1.79769313e308;
    v13 = 1.79769313e308;
  }
  else
  {
    v12 = -1.79769313e308;
    v13 = 1.79769313e308;
    v14 = 1.79769313e308;
    v15 = -1.79769313e308;
    v16 = (double **)*a1;
    v17 = (double *)*v10;
    v18 = (double *)v10[1];
    if (*v10 != (char **)v18)
      goto LABEL_5;
    while (1)
    {
      v16 += 3;
      if (v16 == (double **)v11)
        break;
      v17 = *v16;
      v18 = v16[1];
      if (*v16 != v18)
      {
        do
        {
LABEL_5:
          v19 = *v17;
          v20 = v17[1];
          v17 += 2;
          if (v19 < v13)
            v13 = v19;
          if (v19 > v12)
            v12 = v19;
          if (v20 < v14)
            v14 = v20;
          if (v20 > v15)
            v15 = v20;
        }
        while (v17 != v18);
      }
    }
  }
  v21 = v12 * a4;
  v22 = v14 * a5;
  v23 = v15 * a5;
  if (v13 * a4 < -2.30584301e18 || v21 > 2.30584301e18 || v22 < -2.30584301e18 || v23 > 2.30584301e18)
  {
    *a2 |= 0x40u;
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = off_24EC58898;
    v33 = (char *)operator new(0x20uLL);
    exception[1] = v33;
    *((_OWORD *)exception + 1) = xmmword_2245B8E30;
    strcpy(v33, "Values exceed permitted range");
    __cxa_throw(exception, (struct type_info *)&unk_24EC58870, (void (*)(void *))sub_223769BF0);
  }
  sub_2232EA6AC(a3, 0xAAAAAAAAAAAAAAABLL * (v11 - v10));
  v28 = *a1;
  for (i = a1[1]; v28 != i; v28 += 3)
  {
    while (1)
    {
      sub_223769F90(v28, a2, (uint64_t)__p, a4, a5);
      v29 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v29 >= *(_QWORD *)(a3 + 16))
        break;
      *v29 = 0;
      v29[1] = 0;
      v29[2] = 0;
      *(_OWORD *)v29 = *(_OWORD *)__p;
      v29[2] = v35;
      *(_QWORD *)(a3 + 8) = v29 + 3;
      v28 += 3;
      if (v28 == i)
        return;
    }
    v30 = sub_2232EA89C((char **)a3, (uint64_t)__p);
    v31 = __p[0];
    *(_QWORD *)(a3 + 8) = v30;
    if (v31)
    {
      __p[1] = v31;
      operator delete(v31);
    }
  }
}

void sub_223769F10(_Unwind_Exception *a1)
{
  void **v1;

  sub_22317C838(v1);
  _Unwind_Resume(a1);
}

void sub_223769F24(_Unwind_Exception *a1)
{
  void **v1;
  std::exception *v2;
  void *v4;

  std::exception::~exception(v2);
  __cxa_free_exception(v4);
  sub_22317C838(v1);
  _Unwind_Resume(a1);
}

void sub_223769F44(_Unwind_Exception *a1)
{
  void **v1;

  sub_22317C838(v1);
  _Unwind_Resume(a1);
}

void sub_223769F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void **v10;

  if (__p)
  {
    operator delete(__p);
    sub_22317C838(v10);
    _Unwind_Resume(a1);
  }
  sub_22317C838(v10);
  _Unwind_Resume(a1);
}

char ***sub_223769F90@<X0>(char ***result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>, float64_t a4@<D0>, float64_t a5@<D1>)
{
  float64x2_t *v6;
  float64x2_t *v7;
  uint64_t v8;
  char *v9;
  float64x2_t v10;
  _QWORD *exception;
  char *v12;
  float64x2_t v15;
  int64x2_t v16;
  char **v17;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (a4 == 0.0 || a5 == 0.0)
  {
    *a2 |= 2u;
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = off_24EC58898;
    v12 = (char *)operator new(0x28uLL);
    exception[1] = v12;
    *((_OWORD *)exception + 1) = xmmword_2245B8D20;
    strcpy(v12, "Invalid scale (either 0 or too large)");
    __cxa_throw(exception, (struct type_info *)&unk_24EC58870, (void (*)(void *))sub_223769BF0);
  }
  v7 = (float64x2_t *)*result;
  v6 = (float64x2_t *)result[1];
  v8 = (char *)v6 - (char *)*result;
  if (v6 != (float64x2_t *)*result)
  {
    if (v8 < 0)
      sub_22316E078();
    v9 = (char *)operator new((char *)v6 - (char *)*result);
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = &v9[16 * (v8 >> 4)];
    v17 = (char **)a3;
    v10.f64[0] = a4;
    v10.f64[1] = a5;
    v15 = v10;
    do
    {
      v16 = vcvtq_s64_f64(vmulq_f64(*v7, v15));
      result = sub_223765310(&v17, &v16);
      ++v7;
    }
    while (v7 != v6);
  }
  return result;
}

void sub_22376A0C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;
  void *v4;
  void *v5;

  std::exception::~exception(v2);
  __cxa_free_exception(v4);
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22376A0F4(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v17;
  uint64_t result;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v26;
  _QWORD v27[10];
  double v28;

  v27[0] = a1;
  v27[1] = a1;
  v4 = (char *)a2 - (char *)a1;
  v5 = ((char *)a2 - (char *)a1) >> 4;
  v27[2] = a2;
  v27[3] = v5;
  v27[4] = 0;
  v27[5] = a2;
  v27[6] = a1;
  v27[7] = a2;
  if (a2 == a1)
    v6 = 0;
  else
    v6 = v5 + 1;
  v27[8] = ((char *)a2 - (char *)a1) >> 4;
  v27[9] = v6;
  if (v6)
  {
    v7 = a2;
    if (v4 < 17)
    {
      v9 = a2;
      if (v4 >= 1)
        v9 = &a1[2 * (1 % v5)];
    }
    else
    {
      v9 = a1 + 2;
    }
    v10 = v6 - 1;
    if (v6 == 1)
    {
      v11 = 1;
    }
    else
    {
      v11 = 1;
      while (*v9 == *a1 && v9[1] == a1[1])
      {
        v15 = v11 + 1;
        if (v11 + 1 < v5)
        {
          v9 += 2;
        }
        else
        {
          v9 = a2;
          if (v11 < v5)
            v9 = &a1[2 * (v15 % v5)];
        }
        ++v11;
        if (v6 == v15)
          goto LABEL_40;
      }
    }
    if (v11 != v6)
    {
      v12 = v11 + 1;
      if (v11 + 1 >= v5)
      {
        v13 = a2;
        if (v11 < v5)
          v13 = &a1[2 * (v12 % v5)];
      }
      else
      {
        v13 = v9 + 2;
      }
      if (v12 != v6)
      {
        while (*v13 == *v9 && v13[1] == v9[1])
        {
          v17 = v12 + 1;
          if (v12 + 1 < v5)
          {
            v13 += 2;
          }
          else
          {
            v13 = a2;
            if (v12 < v5)
              v13 = &a1[2 * (v17 % v5)];
          }
          ++v12;
          if (v6 == v17)
            goto LABEL_40;
        }
        if (v6 != v12)
        {
          v19 = a1;
          do
          {
            v28 = 1.0;
            v20 = sub_22376A6D8(*v13, v13[1], *v9, v9[1], *v19, v19[1], &v28);
            if (v20 == 0.0
              || (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v20) <= v28 * 2.22044605e-16)
            {
              if ((v21 = v13[1], v22 = v9[1], *v9 == *v13) && v22 == v21
                || (*v19 - *v9) * (*v9 - *v13) + (v19[1] - v22) * (v22 - v21) <= 0)
              {
                *a3 = 12;
                return 1;
              }
            }
            if (v12 == v6)
              break;
            v23 = v12 + 1;
            if (v12 + 1 >= v5)
            {
              v24 = v7;
              if (v12 < v5)
                v24 = &a1[2 * (v23 % v5)];
            }
            else
            {
              v24 = v13 + 2;
            }
            if (v23 == v6)
              break;
            ++v12;
            while (*v24 == *v13 && v24[1] == v13[1])
            {
              v26 = v12 + 1;
              if (v12 + 1 < v5)
              {
                v24 += 2;
              }
              else
              {
                v24 = v7;
                if (v12 < v5)
                  v24 = &a1[2 * (v26 % v5)];
              }
              ++v12;
              if (v6 == v26)
                goto LABEL_67;
            }
            v19 = v9;
            v9 = v13;
            v13 = v24;
          }
          while (v6 != v12);
LABEL_67:
          if (v6 >= v5)
          {
            if (v10 <= v5)
              v7 = &a1[2 * (v10 % v5)];
          }
          else
          {
            v7 -= 2;
          }
          if (*a1 == *v7 && a1[1] == v7[1])
            return sub_22376A428((uint64_t)v27, a3);
        }
      }
    }
  }
LABEL_40:
  result = 0;
  *a3 = 0;
  return result;
}

uint64_t sub_22376A428(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v30;
  double v31;

  v4 = *(uint64_t **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(uint64_t **)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9 != v7)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v13 = *(uint64_t **)(a1 + 56);
    v10 = *(_QWORD *)(a1 + 64);
    v14 = v9 - 1;
    if (v9 >= v10)
    {
      v15 = *(uint64_t **)(a1 + 56);
      if (v14 <= v10)
        v15 = (uint64_t *)(v11 + 16 * (v14 % v10));
    }
    else
    {
      v15 = v8 - 2;
    }
    if (v14 == v7)
    {
      v14 = *(_QWORD *)(a1 + 32);
      v12 = v15;
      v16 = v7 + 1;
      if (v7 + 1 < v5)
      {
LABEL_31:
        v8 = v4 + 2;
        goto LABEL_35;
      }
    }
    else
    {
      v17 = *v15;
      v18 = v15;
      do
      {
        v12 = v18;
        v20 = v14 - 1;
        if (v14 >= v10)
        {
          if (v20 > v10)
          {
            v19 = *v13 == v17 && v13[1] == v15[1];
            v18 = v13;
            if (!v19)
            {
LABEL_30:
              v16 = v7 + 1;
              if (v7 + 1 >= v5)
                goto LABEL_33;
              goto LABEL_31;
            }
          }
          else
          {
            v18 = (uint64_t *)(v11 + 16 * (v20 % v10));
            if (*v18 != v17 || v18[1] != v15[1])
              goto LABEL_30;
          }
        }
        else
        {
          v21 = *(v18 - 2);
          v22 = *(v18 - 1);
          v18 -= 2;
          if (v21 != v17 || v22 != v15[1])
            goto LABEL_30;
        }
        --v14;
      }
      while (v7 != v20);
      v14 = v7;
      v12 = v18;
      v16 = v7 + 1;
      if (v7 + 1 < v5)
        goto LABEL_31;
    }
LABEL_33:
    v8 = v6;
    if (v7 < v5)
      v8 = (uint64_t *)(v3 + 16 * (v16 % v5));
LABEL_35:
    if (v16 != v9)
    {
      do
      {
        if (*v8 != *v4 || v8[1] != v4[1])
          break;
        v30 = v16 + 1;
        if (v16 + 1 < v5)
        {
          v8 += 2;
        }
        else
        {
          v8 = v6;
          if (v16 < v5)
            v8 = (uint64_t *)(v3 + 16 * (v30 % v5));
        }
        ++v16;
      }
      while (v9 != v30);
    }
    v7 = v14;
    v6 = v13;
    if (v14 >= v10)
      goto LABEL_3;
LABEL_37:
    v6 = v12 - 2;
    goto LABEL_38;
  }
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(uint64_t **)a1;
  if (v7 < v5)
    goto LABEL_37;
LABEL_3:
  if (v7 - 1 <= v10)
    v6 = (uint64_t *)(v11 + 16 * ((v7 - 1) % v10));
LABEL_38:
  v31 = 1.0;
  v25 = sub_22376A6D8(*v8, v8[1], *v4, v4[1], *v6, v6[1], &v31);
  if ((v25 == 0.0
     || (*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v25) <= v31 * 2.22044605e-16)
    && ((v26 = v8[1], v27 = v4[1], *v4 == *v8) && v27 == v26
     || (*v6 - *v4) * (*v4 - *v8) + (v6[1] - v27) * (v27 - v26) <= 0))
  {
    result = 1;
    *a2 = 12;
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  return result;
}

double sub_22376A6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  double v18[2];
  double v19[2];
  double v20[2];
  double v21;
  double v22[2];
  double v23[2];
  double v24[2];
  double v25[2];
  double v26[2];
  double v27[2];

  v20[0] = (double)a1;
  v20[1] = (double)a2;
  v19[0] = (double)a3;
  v19[1] = (double)a4;
  v18[0] = (double)a5;
  v18[1] = (double)a6;
  v7 = (double)a1 - (double)a5;
  v27[0] = v7;
  v8 = (double)a4 - (double)a6;
  v26[0] = v8;
  v9 = (double)a2 - (double)a6;
  v25[0] = v9;
  v10 = (double)a3 - (double)a5;
  v24[0] = v10;
  v11 = vabdd_f64((double)a1, (double)a5);
  v12 = vabdd_f64((double)a4, (double)a6);
  v13 = vabdd_f64((double)a2, (double)a6);
  v14 = vabdd_f64((double)a3, (double)a5);
  if (v11 < v12)
    v11 = v12;
  if (v11 < v13)
    v11 = v13;
  if (v11 < v14)
    v11 = v14;
  if (v11 < 1.0)
    v11 = 1.0;
  *a7 = v11;
  v15 = v7 * v8;
  v23[0] = v7 * v8;
  v16 = v10 * v9;
  result = v7 * v8 - v10 * v9;
  v21 = fabs(v7 * v8) + fabs(v10 * v9);
  v22[0] = v10 * v9;
  if (vabdd_f64(v7 * v8, v10 * v9) < v21 * 3.33066907e-16 && (v15 <= 0.0 || v16 > 0.0) && (v15 >= 0.0 || v16 < 0.0))
    return sub_2233DB8FC(v20, v19, v18, v27, v26, v25, v24, v23, v22, &v21);
  return result;
}

uint64_t sub_22376A804(uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t *v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  int64x2_t v56;
  int64x2_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a3 + 32);
  v46 = v5 - v4;
  if (v5 != v4)
  {
    *((_QWORD *)&v54 + 1) = -1;
    v55 = -1;
    *(_QWORD *)&v58 = -1;
    *((_QWORD *)&v58 + 1) = -1;
    v59 = 0uLL;
    LOBYTE(v60) = 0;
    v61 = -1;
    v62 = 0;
    v56 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v57 = vdupq_n_s64(0x8000000000000000);
    v53 = 0;
    *(_QWORD *)&v54 = -1;
    v6 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
    v7 = *(uint64_t **)a2;
    v41 = *(_QWORD *)(a2 + 8);
    v8 = v4 + 1;
    v9 = *(uint64_t **)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    if (v4 + 1 >= v10)
    {
      v11 = *(uint64_t **)(a2 + 16);
      if (v4 < v10)
        v11 = (uint64_t *)(v41 + 16 * (v8 % v10));
    }
    else
    {
      v11 = v7 + 2;
    }
    if (v8 != v5)
    {
      v40 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = *v7;
      v17 = v7[1];
      v18 = 0x7FFFFFFFFFFFFFFFLL;
      v19 = 0x8000000000000000;
      v20 = 1;
      v21 = 0x8000000000000000;
      v22 = 0x7FFFFFFFFFFFFFFFLL;
      v48 = 1;
      v44 = *(uint64_t **)(a2 + 16);
      v45 = v4;
      v42 = a3;
      v43 = *(_QWORD *)(a2 + 24);
      while (1)
      {
        v23 = v16;
        v24 = v17;
        v16 = *v11;
        v17 = v11[1];
        if (*v11 >= v23)
          v25 = 0;
        else
          v25 = -1;
        if (*v11 > v23)
          v25 = 1;
        if (v17 >= v24)
          v26 = 0;
        else
          v26 = -1;
        if (v17 > v24)
          v26 = 1;
        v27 = v23 == v16 && v24 == v17;
        if (v27)
          v28 = -99;
        else
          v28 = 0;
        if (v27)
          v29 = -99;
        else
          v29 = v26;
        v30 = v27;
        if (v25)
          v31 = v25;
        else
          v31 = v28;
        if (v25)
          v32 = v26;
        else
          v32 = v29;
        if (v25)
          v33 = 0;
        else
          v33 = v30;
        if (v14)
        {
          v35 = (_DWORD)v31 == (_DWORD)v13 && v14 <= 0xA && (_DWORD)v32 == (_DWORD)v12;
          v50 = v33;
          if (v35)
          {
            v31 = v13;
            v32 = v12;
            v23 = v21;
            if (v16 < v22)
            {
              v56.i64[0] = *v11;
              v22 = v16;
            }
            if (v16 > v21)
            {
              v57.i64[0] = v16;
              v23 = v16;
              if (v17 >= v18)
                goto LABEL_55;
            }
            else if (v17 >= v18)
            {
LABEL_55:
              v21 = v23;
              if (v17 <= v19)
                goto LABEL_67;
              goto LABEL_66;
            }
            v56.i64[1] = v17;
            v18 = v17;
            v21 = v23;
            if (v17 <= v19)
              goto LABEL_67;
LABEL_66:
            v57.i64[1] = v17;
            v19 = v17;
            v21 = v23;
            v12 = v32;
            v13 = v31;
            goto LABEL_67;
          }
          v49 = v11;
          if (!(_BYTE)v60)
            v40 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
          v36 = result;
          sub_22376ACC8((void **)result, (uint64_t)&v53);
          *((_QWORD *)&v54 + 1) = -1;
          v55 = -1;
          *(_QWORD *)&v54 = -1;
          *(_QWORD *)&v51 = -1;
          *((_QWORD *)&v51 + 1) = -1;
          LOBYTE(v52) = 0;
          v53 = 0;
          v56 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
          v57 = vdupq_n_s64(0x8000000000000000);
          v58 = v51;
          v59 = 0uLL;
          v60 = v52;
          v61 = -1;
          v62 = 0;
          result = v36;
          a3 = v42;
          v10 = v43;
          v9 = v44;
          v4 = v45;
          v11 = v49;
          v33 = v50;
        }
        v54 = *a4;
        v55 = *((_QWORD *)a4 + 2);
        LOBYTE(v60) = v33;
        v61 = v15;
        *(_QWORD *)&v58 = v20 - 1;
        *((_QWORD *)&v59 + 1) = v46;
        if (v33 & 1 | ((v48 & 1) == 0))
        {
          v53 = __PAIR64__(v32, v31);
          v56.i64[0] = v23;
          v56.i64[1] = v24;
          v22 = v23;
          v57.i64[0] = v23;
          v57.i64[1] = v24;
          if (v16 >= v23)
            goto LABEL_62;
        }
        else
        {
          v48 = 0;
          LOBYTE(v62) = 1;
          v53 = __PAIR64__(v32, v31);
          v56.i64[0] = v23;
          v56.i64[1] = v24;
          v22 = v23;
          v57.i64[0] = v23;
          v57.i64[1] = v24;
          if (v16 >= v23)
          {
LABEL_62:
            if (v16 <= v23)
              goto LABEL_63;
            goto LABEL_72;
          }
        }
        v56.i64[0] = v16;
        v22 = v16;
        if (v16 <= v23)
        {
LABEL_63:
          v18 = v24;
          if (v17 >= v24)
            goto LABEL_65;
LABEL_64:
          v56.i64[1] = v17;
          v18 = v17;
          goto LABEL_65;
        }
LABEL_72:
        v57.i64[0] = v16;
        v23 = v16;
        v18 = v24;
        if (v17 < v24)
          goto LABEL_64;
LABEL_65:
        v14 = 0;
        v19 = v24;
        v21 = v23;
        v12 = v32;
        v13 = v31;
        if (v17 > v24)
          goto LABEL_66;
LABEL_67:
        ++v14;
        *((_QWORD *)&v58 + 1) = v20;
        *(_QWORD *)&v59 = v14;
        v37 = v4 + v20 + 1;
        if (v37 < v10)
        {
          v11 += 2;
        }
        else
        {
          v11 = v9;
          if (v4 + v20 < v10)
            v11 = (uint64_t *)(v41 + 16 * (v37 % v10));
        }
        v15 += v33 ^ 1u;
        ++v20;
        if (v4 + v20 == *(_QWORD *)(a3 + 32))
        {
          if (v14)
          {
            v6 = v40;
            if (!(_BYTE)v60)
              v6 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
            v38 = result;
            sub_22376ACC8((void **)result, (uint64_t)&v53);
            result = v38;
          }
          else
          {
            v6 = v40;
          }
          break;
        }
      }
    }
    v39 = *(_BYTE **)result;
    if (v6 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3)
      && !v39[120 * v6 + 96])
    {
      v39[120 * v6 + 113] = 1;
    }
  }
  return result;
}

void sub_22376ACC8(void **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int16 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *((_OWORD *)v5 + 1) = v6;
    *((_OWORD *)v5 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v5 + 3) = *(_OWORD *)(a2 + 48);
    v7 = *(_OWORD *)(a2 + 64);
    v8 = *(_OWORD *)(a2 + 80);
    v9 = *(_OWORD *)(a2 + 96);
    *((_WORD *)v5 + 56) = *(_WORD *)(a2 + 112);
    *((_OWORD *)v5 + 5) = v8;
    *((_OWORD *)v5 + 6) = v9;
    *((_OWORD *)v5 + 4) = v7;
    v10 = v5 + 120;
LABEL_3:
    a1[1] = v10;
    return;
  }
  v11 = (char *)*a1;
  v12 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - (_BYTE *)*a1) >> 3);
  v13 = v12 + 1;
  if (v12 + 1 > 0x222222222222222)
    sub_22316E078();
  v14 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - (_QWORD)v11) >> 3);
  if (2 * v14 > v13)
    v13 = 2 * v14;
  if (v14 >= 0x111111111111111)
    v15 = 0x222222222222222;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 > 0x222222222222222)
      sub_223174E94();
    v16 = (char *)operator new(120 * v15);
  }
  else
  {
    v16 = 0;
  }
  v17 = *(_OWORD *)(a2 + 16);
  v18 = &v16[120 * v12];
  *(_OWORD *)v18 = *(_OWORD *)a2;
  *((_OWORD *)v18 + 1) = v17;
  v19 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v18 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v18 + 3) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v18 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v18 + 5) = v20;
  *((_OWORD *)v18 + 6) = *(_OWORD *)(a2 + 96);
  v21 = *(_WORD *)(a2 + 112);
  v10 = v18 + 120;
  *((_WORD *)v18 + 56) = v21;
  if (v5 != v11)
  {
    do
    {
      v22 = *(_OWORD *)(v5 - 120);
      *(_OWORD *)(v18 - 104) = *(_OWORD *)(v5 - 104);
      *(_OWORD *)(v18 - 120) = v22;
      *(_OWORD *)(v18 - 88) = *(_OWORD *)(v5 - 88);
      *(_OWORD *)(v18 - 72) = *(_OWORD *)(v5 - 72);
      v23 = *(_OWORD *)(v5 - 56);
      v24 = *(_OWORD *)(v5 - 40);
      v25 = *(_OWORD *)(v5 - 24);
      *((_WORD *)v18 - 4) = *((_WORD *)v5 - 4);
      *(_OWORD *)(v18 - 24) = v25;
      *(_OWORD *)(v18 - 40) = v24;
      *(_OWORD *)(v18 - 56) = v23;
      v18 -= 120;
      v5 -= 120;
    }
    while (v5 != v11);
    v5 = (char *)*a1;
  }
  *a1 = v18;
  a1[1] = v10;
  a1[2] = &v16[120 * v15];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v10;
}

void sub_22376AE7C(_QWORD *a1, uint64_t *a2, char **a3)
{
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  for (i = (_QWORD *)*a1; i != (_QWORD *)a1[1]; i += 15)
  {
    v8 = i[4];
    v9 = *a2;
    if (v8 < *a2)
    {
      *a2 = v8;
      v9 = v8;
      v10 = a2[2];
      if (v8 <= v10)
      {
LABEL_7:
        v11 = i[5];
        v12 = a2[1];
        if (v11 >= v12)
          goto LABEL_8;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = a2[2];
      if (v8 <= v10)
        goto LABEL_7;
    }
    a2[2] = v8;
    v10 = v8;
    v11 = i[5];
    v12 = a2[1];
    if (v11 >= v12)
    {
LABEL_8:
      v13 = a2[3];
      if (v11 <= v13)
        goto LABEL_9;
      goto LABEL_18;
    }
LABEL_17:
    a2[1] = v11;
    v12 = v11;
    v13 = a2[3];
    if (v11 <= v13)
    {
LABEL_9:
      v14 = i[6];
      if (v14 >= v9)
        goto LABEL_10;
      goto LABEL_19;
    }
LABEL_18:
    a2[3] = v11;
    v13 = v11;
    v14 = i[6];
    if (v14 >= v9)
    {
LABEL_10:
      if (v14 <= v10)
        goto LABEL_11;
      goto LABEL_20;
    }
LABEL_19:
    *a2 = v14;
    if (v14 <= v10)
    {
LABEL_11:
      v15 = i[7];
      if (v15 >= v12)
        goto LABEL_12;
      goto LABEL_21;
    }
LABEL_20:
    a2[2] = v14;
    v15 = i[7];
    if (v15 >= v12)
    {
LABEL_12:
      if (v15 <= v13)
        goto LABEL_13;
      goto LABEL_22;
    }
LABEL_21:
    a2[1] = v15;
    if (v15 <= v13)
    {
LABEL_13:
      v17 = a3[1];
      v16 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v16)
        goto LABEL_23;
      goto LABEL_3;
    }
LABEL_22:
    a2[3] = v15;
    v17 = a3[1];
    v16 = (unint64_t)a3[2];
    if ((unint64_t)v17 >= v16)
    {
LABEL_23:
      v18 = *a3;
      v19 = v17 - *a3;
      v20 = v19 >> 3;
      v21 = (v19 >> 3) + 1;
      if (v21 >> 61)
        sub_22316E078();
      v22 = v16 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          sub_223174E94();
        v24 = operator new(8 * v23);
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = i;
        v7 = (uint64_t)(v25 + 8);
        v26 = (char *)(v17 - v18);
        if (v17 == v18)
          goto LABEL_41;
LABEL_34:
        v27 = (unint64_t)(v26 - 8);
        if (v27 < 0x58)
          goto LABEL_48;
        if ((unint64_t)(v17 - v24 - v19) < 0x20)
          goto LABEL_48;
        v28 = (v27 >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = &v17[-v29];
        v25 -= v29;
        v31 = &v24[8 * v20 - 16];
        v32 = v17 - 16;
        v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v17 = v30;
        if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v35 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v25 - 1) = v35;
            v25 -= 8;
          }
          while (v17 != v18);
        }
        v17 = *a3;
      }
      else
      {
        v24 = 0;
        v25 = (char *)(8 * v20);
        *(_QWORD *)(8 * v20) = i;
        v7 = 8 * v20 + 8;
        v26 = (char *)(v17 - v18);
        if (v17 != v18)
          goto LABEL_34;
      }
LABEL_41:
      *a3 = v25;
      a3[1] = (char *)v7;
      a3[2] = &v24[8 * v23];
      if (v17)
        operator delete(v17);
      goto LABEL_4;
    }
LABEL_3:
    *(_QWORD *)v17 = i;
    v7 = (uint64_t)(v17 + 8);
LABEL_4:
    a3[1] = (char *)v7;
  }
}

uint64_t sub_22376B104(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  int64x2_t v56;
  int64x2_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  void *__p;
  char *v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t v66;
  __int128 v67[2];
  __int128 v68;
  __int128 v69;

  v6 = *(_QWORD *)a1;
  v8 = (__int128 *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  if (&v68 != (__int128 *)a1)
  {
    v9 = *v8;
    v68 = *(_OWORD *)a1;
    v69 = v9;
  }
  if (v67 != (__int128 *)a1)
  {
    v10 = *v8;
    v67[0] = *(_OWORD *)a1;
    v67[1] = v10;
  }
  if (v7 >= 0)
    v11 = v7;
  else
    v11 = v7 + 1;
  v12 = v11 >> 1;
  if (v6 >= 0)
    v13 = v6;
  else
    v13 = v6 + 1;
  v14 = v13 >> 1;
  v15 = v7 - 2 * v12 + v6 - 2 * v14;
  *(_QWORD *)&v69 = v12 + v14 + ((v15 + ((v15 & 0x80) >> 7)) << 24 >> 25);
  *(_QWORD *)&v67[0] = v69;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  __p = 0;
  v62 = 0;
  v63 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  sub_22376B6AC(&v68, v67, a2, &v64, (char **)&__p, (char **)&v58);
  v16 = v58;
  v17 = v59;
  if (v58 != v59)
  {
    v18 = 0x7FFFFFFFFFFFFFFFLL;
    v19 = 0x8000000000000000;
    v56 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v57 = vdupq_n_s64(0x8000000000000000);
    v20 = 0x8000000000000000;
    v21 = v58;
    v22 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      v23 = (_QWORD *)*v21;
      v24 = *(_QWORD *)(*v21 + 32);
      if (v24 >= v22)
      {
        if (v24 <= v20)
        {
LABEL_16:
          v25 = v23[5];
          if (v25 < v18)
            goto LABEL_17;
          goto LABEL_25;
        }
      }
      else
      {
        v56.i64[0] = *(_QWORD *)(*v21 + 32);
        v22 = v24;
        if (v24 <= v20)
          goto LABEL_16;
      }
      v57.i64[0] = v24;
      v20 = v24;
      v25 = v23[5];
      if (v25 < v18)
      {
LABEL_17:
        v56.i64[1] = v25;
        v18 = v25;
        if (v25 <= v19)
          goto LABEL_18;
        goto LABEL_26;
      }
LABEL_25:
      if (v25 <= v19)
      {
LABEL_18:
        v26 = v23[6];
        if (v26 < v22)
          goto LABEL_19;
        goto LABEL_27;
      }
LABEL_26:
      v57.i64[1] = v25;
      v19 = v25;
      v26 = v23[6];
      if (v26 < v22)
      {
LABEL_19:
        v56.i64[0] = v26;
        v22 = v26;
        if (v26 <= v20)
          goto LABEL_20;
        goto LABEL_28;
      }
LABEL_27:
      if (v26 <= v20)
      {
LABEL_20:
        v27 = v23[7];
        if (v27 < v18)
          goto LABEL_21;
        goto LABEL_29;
      }
LABEL_28:
      v57.i64[0] = v26;
      v20 = v26;
      v27 = v23[7];
      if (v27 < v18)
      {
LABEL_21:
        v56.i64[1] = v27;
        v18 = v27;
        if (v27 > v19)
          goto LABEL_30;
        goto LABEL_13;
      }
LABEL_29:
      if (v27 > v19)
      {
LABEL_30:
        v57.i64[1] = v27;
        v19 = v27;
      }
LABEL_13:
      if (++v21 == v59)
      {
        v28 = v58;
        if (a3 > 0x63 || (v28 = v58, (unint64_t)((char *)v59 - (char *)v58) < 0x79))
        {
LABEL_41:
          v31 = v28 + 1;
          if (v28 + 1 == v17)
            goto LABEL_34;
          v32 = v28 + 1;
          while (1)
          {
            v33 = *v28;
            v34 = *v32;
            if (*(_QWORD *)(*v28 + 48) >= *(_QWORD *)(*v32 + 32) && *(_QWORD *)(v33 + 32) <= *(_QWORD *)(v34 + 48))
            {
              v35 = *(_QWORD *)(v33 + 56) >= *(_QWORD *)(v34 + 40) && *(_QWORD *)(v33 + 40) <= *(_QWORD *)(v34 + 56);
              v36 = v35 && *(_BYTE *)(v33 + 96) == 0;
              v37 = v36 && *(_BYTE *)(v34 + 96) == 0;
              if (v37
                && !sub_22376DF90(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v33, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v34, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))
              {
                break;
              }
            }
            if (++v32 == v17)
            {
              ++v28;
              if (v31 == v17)
                goto LABEL_34;
              goto LABEL_41;
            }
          }
        }
        else if (sub_22376BD90((__int128 *)v56.i8, &v58, a3 + 1, a4))
        {
LABEL_34:
          if (sub_22376BC20((uint64_t)&v56, &v58, (uint64_t **)&v64, a3, a4)
            && (sub_22376BC20((uint64_t)&v56, &v58, (uint64_t **)&__p, a3, a4) & 1) != 0)
          {
            break;
          }
        }
LABEL_104:
        v40 = 0;
LABEL_105:
        if (v16)
LABEL_106:
          operator delete(v16);
        goto LABEL_107;
      }
    }
  }
  v30 = (char *)v64;
  v29 = v65;
  if (a3 > 0x63 || (unint64_t)(v65 - (_BYTE *)v64) < 0x79)
  {
    if (v64 != v65)
    {
LABEL_65:
      v41 = v30 + 8;
      if (v30 + 8 != v29)
      {
        v42 = v30 + 8;
        while (1)
        {
          v43 = *(_QWORD *)v30;
          v44 = *(_QWORD *)v42;
          if (*(_QWORD *)(*(_QWORD *)v30 + 48) >= *(_QWORD *)(*(_QWORD *)v42 + 32)
            && *(_QWORD *)(v43 + 32) <= *(_QWORD *)(v44 + 48))
          {
            v45 = *(_QWORD *)(v43 + 56) >= *(_QWORD *)(v44 + 40) && *(_QWORD *)(v43 + 40) <= *(_QWORD *)(v44 + 56);
            v46 = v45 && *(_BYTE *)(v43 + 96) == 0;
            v47 = v46 && *(_BYTE *)(v44 + 96) == 0;
            if (v47
              && !sub_22376DF90(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v43, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v44, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))
            {
              goto LABEL_104;
            }
          }
          v42 += 8;
          if (v42 == v29)
          {
            v30 += 8;
            if (v41 == v29)
              break;
            goto LABEL_65;
          }
        }
      }
    }
  }
  else if (!sub_22376BD90(&v68, &v64, a3 + 1, a4))
  {
    goto LABEL_104;
  }
  v39 = (char *)__p;
  v38 = v62;
  if (a3 > 0x63 || (unint64_t)(v62 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v62)
    {
LABEL_87:
      v48 = v39 + 8;
      if (v39 + 8 != v38)
      {
        v49 = v39 + 8;
        while (1)
        {
          v50 = *(_QWORD *)v39;
          v51 = *(_QWORD *)v49;
          if (*(_QWORD *)(*(_QWORD *)v39 + 48) >= *(_QWORD *)(*(_QWORD *)v49 + 32)
            && *(_QWORD *)(v50 + 32) <= *(_QWORD *)(v51 + 48))
          {
            v52 = *(_QWORD *)(v50 + 56) >= *(_QWORD *)(v51 + 40) && *(_QWORD *)(v50 + 40) <= *(_QWORD *)(v51 + 56);
            v53 = v52 && *(_BYTE *)(v50 + 96) == 0;
            v54 = v53 && *(_BYTE *)(v51 + 96) == 0;
            if (v54
              && !sub_22376DF90(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v50, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v51, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))
            {
              goto LABEL_104;
            }
          }
          v49 += 8;
          if (v49 == v38)
          {
            v40 = 1;
            v39 += 8;
            if (v48 == v38)
              goto LABEL_105;
            goto LABEL_87;
          }
        }
      }
    }
    v40 = 1;
    if (v16)
      goto LABEL_106;
  }
  else
  {
    v40 = sub_22376BD90(v67, &__p, a3 + 1, a4);
    if (v16)
      goto LABEL_106;
  }
LABEL_107:
  if (__p)
    operator delete(__p);
  if (v64)
    operator delete(v64);
  return v40;
}

void sub_22376B64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v26;
  void *v27;

  if (v24)
  {
    operator delete(v24);
    v26 = __p;
    if (!__p)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22376B6AC(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4, char **a5, char **a6)
{
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  uint64_t v12;
  _BOOL4 v13;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  BOOL v31;
  unint64_t v32;
  char *v33;
  char **v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char **v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;

  v6 = *a3;
  if (*a3 != a3[1])
  {
    v8 = a4;
    v9 = a3;
    v86 = result;
    do
    {
      v11 = *(_QWORD **)v6;
      v12 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if (result[2] >= v12 && *result <= v11[6])
      {
        v13 = result[3] >= v11[5] && result[1] <= v11[7];
        if (a2[2] < v12)
        {
LABEL_17:
          if (!v13)
            goto LABEL_4;
          goto LABEL_18;
        }
      }
      else
      {
        v13 = 0;
        if (a2[2] < v12)
          goto LABEL_17;
      }
      if (*a2 > v11[6])
        goto LABEL_17;
      v31 = a2[3] < v11[5] || a2[1] > v11[7];
      if (v13 && !v31)
      {
        v33 = a6[1];
        v32 = (unint64_t)a6[2];
        if ((unint64_t)v33 >= v32)
        {
          v47 = *a6;
          v48 = v33 - *a6;
          v49 = v48 >> 3;
          v50 = (v48 >> 3) + 1;
          if (v50 >> 61)
            goto LABEL_98;
          v51 = v32 - (_QWORD)v47;
          if (v51 >> 2 > v50)
            v50 = v51 >> 2;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          v89 = v50;
          if (v50)
          {
            if (v50 >> 61)
              goto LABEL_99;
            v52 = operator new(8 * v50);
            v53 = &v52[8 * v49];
            *(_QWORD *)v53 = v11;
            v54 = (uint64_t)(v53 + 8);
            v55 = (char *)(v33 - v47);
            if (v33 != v47)
            {
LABEL_62:
              v56 = (unint64_t)(v55 - 8);
              if (v56 < 0x58)
              {
                v8 = a4;
                goto LABEL_71;
              }
              v57 = v33 - v52 - v48;
              v8 = a4;
              if (v57 < 0x20)
                goto LABEL_102;
              v58 = (v56 >> 3) + 1;
              v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
              v60 = &v33[-v59];
              v53 -= v59;
              v61 = &v52[8 * v49 - 16];
              v62 = v33 - 16;
              v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v64 = *(_OWORD *)v62;
                *(v61 - 1) = *((_OWORD *)v62 - 1);
                *v61 = v64;
                v61 -= 2;
                v62 -= 32;
                v63 -= 4;
              }
              while (v63);
              v33 = v60;
              if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_102:
                do
                {
LABEL_71:
                  v65 = *((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *((_QWORD *)v53 - 1) = v65;
                  v53 -= 8;
                }
                while (v33 != v47);
              }
              v33 = *a6;
              *a6 = v53;
              a6[1] = (char *)v54;
              a6[2] = &v52[8 * v89];
              if (v33)
LABEL_73:
                operator delete(v33);
LABEL_74:
              result = v86;
              a6[1] = (char *)v54;
              goto LABEL_4;
            }
          }
          else
          {
            v52 = 0;
            v53 = (char *)(8 * v49);
            *(_QWORD *)(8 * v49) = v11;
            v54 = 8 * v49 + 8;
            v55 = (char *)(v33 - v47);
            if (v33 != v47)
              goto LABEL_62;
          }
          v8 = a4;
          *a6 = v53;
          a6[1] = (char *)v54;
          a6[2] = &v52[8 * v89];
          if (v33)
            goto LABEL_73;
          goto LABEL_74;
        }
        *(_QWORD *)v33 = v11;
        a6[1] = v33 + 8;
        goto LABEL_4;
      }
      if (!v13)
      {
        if (!v31)
        {
          v34 = a5;
          v36 = a5[1];
          v35 = (unint64_t)a5[2];
          if ((unint64_t)v36 < v35)
          {
            *(_QWORD *)v36 = v11;
            v37 = (uint64_t)(v36 + 8);
LABEL_96:
            v34[1] = (char *)v37;
            goto LABEL_4;
          }
          v66 = *a5;
          v67 = v36 - *a5;
          v68 = v67 >> 3;
          v69 = (v67 >> 3) + 1;
          if (v69 >> 61)
LABEL_98:
            sub_22316E078();
          v70 = v35 - (_QWORD)v66;
          if (v70 >> 2 > v69)
            v69 = v70 >> 2;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
            v69 = 0x1FFFFFFFFFFFFFFFLL;
          v90 = v69;
          if (v69)
          {
            if (v69 >> 61)
LABEL_99:
              sub_223174E94();
            v71 = operator new(8 * v69);
            v72 = &v71[8 * v68];
            *(_QWORD *)v72 = v11;
            v37 = (uint64_t)(v72 + 8);
            v73 = (char *)(v36 - v66);
            if (v36 != v66)
            {
LABEL_83:
              v74 = (unint64_t)(v73 - 8);
              if (v74 < 0x58)
              {
                v8 = a4;
                goto LABEL_92;
              }
              v76 = v36 - v71 - v67;
              v8 = a4;
              if (v76 < 0x20)
                goto LABEL_103;
              v77 = (v74 >> 3) + 1;
              v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              v79 = &v36[-v78];
              v72 -= v78;
              v80 = &v71[8 * v68 - 16];
              v81 = v36 - 16;
              v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v83 = *(_OWORD *)v81;
                *(v80 - 1) = *((_OWORD *)v81 - 1);
                *v80 = v83;
                v80 -= 2;
                v81 -= 32;
                v82 -= 4;
              }
              while (v82);
              v36 = v79;
              if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_103:
                do
                {
LABEL_92:
                  v84 = *((_QWORD *)v36 - 1);
                  v36 -= 8;
                  *((_QWORD *)v72 - 1) = v84;
                  v72 -= 8;
                }
                while (v36 != v66);
              }
              v75 = a5;
              v36 = *a5;
              *a5 = v72;
              a5[1] = (char *)v37;
              a5[2] = &v71[8 * v90];
              if (v36)
              {
LABEL_94:
                operator delete(v36);
                v34 = a5;
                goto LABEL_95;
              }
LABEL_87:
              v34 = v75;
LABEL_95:
              result = v86;
              goto LABEL_96;
            }
          }
          else
          {
            v71 = 0;
            v72 = (char *)(8 * v68);
            *(_QWORD *)(8 * v68) = v11;
            v37 = 8 * v68 + 8;
            v73 = (char *)(v36 - v66);
            if (v36 != v66)
              goto LABEL_83;
          }
          v75 = a5;
          v8 = a4;
          *a5 = v72;
          a5[1] = (char *)v37;
          a5[2] = &v71[8 * v90];
          if (v36)
            goto LABEL_94;
          goto LABEL_87;
        }
        goto LABEL_4;
      }
LABEL_18:
      v16 = (char *)v8[1];
      v15 = v8[2];
      if ((unint64_t)v16 >= v15)
      {
        v17 = a2;
        v18 = v9;
        v19 = a6;
        v20 = (char *)*v8;
        v21 = (uint64_t)&v16[-*v8];
        v22 = v21 >> 3;
        v23 = (v21 >> 3) + 1;
        if (v23 >> 61)
          goto LABEL_98;
        v24 = v15 - (_QWORD)v20;
        if (v24 >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        v88 = v23;
        if (v23)
        {
          if (v23 >> 61)
            goto LABEL_99;
          v25 = operator new(8 * v23);
          v26 = &v25[8 * v22];
          *v26 = v11;
          v27 = (uint64_t)(v26 + 1);
          v28 = (char *)(v16 - v20);
          if (v16 != v20)
          {
LABEL_27:
            v29 = (unint64_t)(v28 - 8);
            if (v29 < 0x58)
            {
              a6 = v19;
              v9 = v18;
              a2 = v17;
              goto LABEL_50;
            }
            v38 = v16 - v25 - v21;
            a6 = v19;
            v9 = v18;
            a2 = v17;
            if (v38 < 0x20)
              goto LABEL_104;
            v39 = (v29 >> 3) + 1;
            v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
            v41 = &v16[-v40];
            v26 = (_QWORD *)((char *)v26 - v40);
            v42 = &v25[8 * v22 - 16];
            v43 = v16 - 16;
            v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v45 = *(_OWORD *)v43;
              *(v42 - 1) = *((_OWORD *)v43 - 1);
              *v42 = v45;
              v42 -= 2;
              v43 -= 32;
              v44 -= 4;
            }
            while (v44);
            v16 = v41;
            if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_104:
              do
              {
LABEL_50:
                v46 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *--v26 = v46;
              }
              while (v16 != v20);
            }
            v8 = a4;
            v16 = (char *)*a4;
            *a4 = v26;
            a4[1] = v27;
            a4[2] = &v25[8 * v88];
            if (v16)
LABEL_52:
              operator delete(v16);
LABEL_53:
            result = v86;
            v8[1] = v27;
            goto LABEL_4;
          }
        }
        else
        {
          v25 = 0;
          v26 = (_QWORD *)(8 * v22);
          *(_QWORD *)(8 * v22) = v11;
          v27 = 8 * v22 + 8;
          v28 = (char *)(v16 - v20);
          if (v16 != v20)
            goto LABEL_27;
        }
        a6 = v19;
        v9 = v18;
        v8 = a4;
        a2 = v17;
        *a4 = v26;
        a4[1] = v27;
        a4[2] = &v25[8 * v88];
        if (v16)
          goto LABEL_52;
        goto LABEL_53;
      }
      *(_QWORD *)v16 = v11;
      v8[1] = v16 + 8;
LABEL_4:
      v6 += 8;
    }
    while (v6 != v9[1]);
  }
  return result;
}

uint64_t sub_22376BC20(uint64_t a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  v9 = *a2;
  v8 = a2[1];
  if ((unint64_t)((char *)v8 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && (unint64_t)((char *)a3[1] - (char *)*a3) >= 0x79)
  {
    return sub_22376D21C(a1, a2, a3, a4 + 1, a5);
  }
  if (v9 != v8)
  {
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = *a3;
        if (*a3 != v11)
        {
          do
          {
            v13 = *v9;
            v14 = *v12;
            if (*(_QWORD *)(*v9 + 48) >= *(_QWORD *)(*v12 + 32) && *(_QWORD *)(v13 + 32) <= *(_QWORD *)(v14 + 48))
            {
              v15 = *(_QWORD *)(v13 + 56) >= *(_QWORD *)(v14 + 40) && *(_QWORD *)(v13 + 40) <= *(_QWORD *)(v14 + 56);
              v16 = v15 && *(_BYTE *)(v13 + 96) == 0;
              if (v16 && *(_BYTE *)(v14 + 96) == 0)
              {
                result = sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v13, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v14, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32));
                if (!(_DWORD)result)
                  return result;
                v11 = a3[1];
              }
            }
            ++v12;
          }
          while (v12 != v11);
          v8 = a2[1];
        }
        ++v9;
      }
      while (v9 != v8);
    }
  }
  return 1;
}

uint64_t sub_22376BD90(__int128 *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  int64x2_t v53;
  int64x2_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  void *__p;
  char *v59;
  uint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  _QWORD v64[2];
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v6 = *((_QWORD *)a1 + 1);
  v7 = *((_QWORD *)a1 + 3);
  if (&v66 != a1)
  {
    v66 = *a1;
    v67 = *((_QWORD *)a1 + 2);
  }
  if (v64 != (_QWORD *)a1)
  {
    v64[0] = *(_QWORD *)a1;
    v65 = a1[1];
  }
  if (v7 >= 0)
    v8 = v7;
  else
    v8 = v7 + 1;
  v9 = v8 >> 1;
  if (v6 >= 0)
    v10 = v6;
  else
    v10 = v6 + 1;
  v11 = v10 >> 1;
  v12 = v7 - 2 * v9 + v6 - 2 * v11;
  v68 = v9 + v11 + ((v12 + ((v12 & 0x80) >> 7)) << 24 >> 25);
  v64[1] = v68;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  __p = 0;
  v59 = 0;
  v60 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  sub_22376B6AC(&v66, v64, a2, &v61, (char **)&__p, (char **)&v55);
  v13 = v55;
  v14 = v56;
  if (v55 != v56)
  {
    v15 = 0x7FFFFFFFFFFFFFFFLL;
    v16 = 0x8000000000000000;
    v53 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v54 = vdupq_n_s64(0x8000000000000000);
    v17 = 0x8000000000000000;
    v18 = v55;
    v19 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      v20 = (_QWORD *)*v18;
      v21 = *(_QWORD *)(*v18 + 32);
      if (v21 >= v19)
      {
        if (v21 <= v17)
        {
LABEL_16:
          v22 = v20[5];
          if (v22 < v15)
            goto LABEL_17;
          goto LABEL_25;
        }
      }
      else
      {
        v53.i64[0] = *(_QWORD *)(*v18 + 32);
        v19 = v21;
        if (v21 <= v17)
          goto LABEL_16;
      }
      v54.i64[0] = v21;
      v17 = v21;
      v22 = v20[5];
      if (v22 < v15)
      {
LABEL_17:
        v53.i64[1] = v22;
        v15 = v22;
        if (v22 <= v16)
          goto LABEL_18;
        goto LABEL_26;
      }
LABEL_25:
      if (v22 <= v16)
      {
LABEL_18:
        v23 = v20[6];
        if (v23 < v19)
          goto LABEL_19;
        goto LABEL_27;
      }
LABEL_26:
      v54.i64[1] = v22;
      v16 = v22;
      v23 = v20[6];
      if (v23 < v19)
      {
LABEL_19:
        v53.i64[0] = v23;
        v19 = v23;
        if (v23 <= v17)
          goto LABEL_20;
        goto LABEL_28;
      }
LABEL_27:
      if (v23 <= v17)
      {
LABEL_20:
        v24 = v20[7];
        if (v24 < v15)
          goto LABEL_21;
        goto LABEL_29;
      }
LABEL_28:
      v54.i64[0] = v23;
      v17 = v23;
      v24 = v20[7];
      if (v24 < v15)
      {
LABEL_21:
        v53.i64[1] = v24;
        v15 = v24;
        if (v24 > v16)
          goto LABEL_30;
        goto LABEL_13;
      }
LABEL_29:
      if (v24 > v16)
      {
LABEL_30:
        v54.i64[1] = v24;
        v16 = v24;
      }
LABEL_13:
      if (++v18 == v56)
      {
        v25 = v55;
        if (a3 > 0x63 || (v25 = v55, (unint64_t)((char *)v56 - (char *)v55) < 0x79))
        {
LABEL_41:
          v28 = v25 + 1;
          if (v25 + 1 == v14)
            goto LABEL_34;
          v29 = v25 + 1;
          while (1)
          {
            v30 = *v25;
            v31 = *v29;
            if (*(_QWORD *)(*v25 + 48) >= *(_QWORD *)(*v29 + 32) && *(_QWORD *)(v30 + 32) <= *(_QWORD *)(v31 + 48))
            {
              v32 = *(_QWORD *)(v30 + 56) >= *(_QWORD *)(v31 + 40) && *(_QWORD *)(v30 + 40) <= *(_QWORD *)(v31 + 56);
              v33 = v32 && *(_BYTE *)(v30 + 96) == 0;
              v34 = v33 && *(_BYTE *)(v31 + 96) == 0;
              if (v34
                && !sub_22376DF90(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v30, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v31, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))
              {
                break;
              }
            }
            if (++v29 == v14)
            {
              ++v25;
              if (v28 == v14)
                goto LABEL_34;
              goto LABEL_41;
            }
          }
        }
        else if (sub_22376B104(&v53, &v55, a3 + 1, a4))
        {
LABEL_34:
          if (sub_22376C33C((__int128 *)v53.i8, &v55, (uint64_t **)&v61, a3, a4)
            && (sub_22376C33C((__int128 *)v53.i8, &v55, (uint64_t **)&__p, a3, a4) & 1) != 0)
          {
            break;
          }
        }
LABEL_104:
        v37 = 0;
LABEL_105:
        if (v13)
LABEL_106:
          operator delete(v13);
        goto LABEL_107;
      }
    }
  }
  v27 = (char *)v61;
  v26 = v62;
  if (a3 > 0x63 || (unint64_t)(v62 - (_BYTE *)v61) < 0x79)
  {
    if (v61 != v62)
    {
LABEL_65:
      v38 = v27 + 8;
      if (v27 + 8 != v26)
      {
        v39 = v27 + 8;
        while (1)
        {
          v40 = *(_QWORD *)v27;
          v41 = *(_QWORD *)v39;
          if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v39 + 32)
            && *(_QWORD *)(v40 + 32) <= *(_QWORD *)(v41 + 48))
          {
            v42 = *(_QWORD *)(v40 + 56) >= *(_QWORD *)(v41 + 40) && *(_QWORD *)(v40 + 40) <= *(_QWORD *)(v41 + 56);
            v43 = v42 && *(_BYTE *)(v40 + 96) == 0;
            v44 = v43 && *(_BYTE *)(v41 + 96) == 0;
            if (v44
              && !sub_22376DF90(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v40, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v41, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))
            {
              goto LABEL_104;
            }
          }
          v39 += 8;
          if (v39 == v26)
          {
            v27 += 8;
            if (v38 == v26)
              break;
            goto LABEL_65;
          }
        }
      }
    }
  }
  else if (!sub_22376B104(&v66, &v61, a3 + 1, a4))
  {
    goto LABEL_104;
  }
  v36 = (char *)__p;
  v35 = v59;
  if (a3 > 0x63 || (unint64_t)(v59 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v59)
    {
LABEL_87:
      v45 = v36 + 8;
      if (v36 + 8 != v35)
      {
        v46 = v36 + 8;
        while (1)
        {
          v47 = *(_QWORD *)v36;
          v48 = *(_QWORD *)v46;
          if (*(_QWORD *)(*(_QWORD *)v36 + 48) >= *(_QWORD *)(*(_QWORD *)v46 + 32)
            && *(_QWORD *)(v47 + 32) <= *(_QWORD *)(v48 + 48))
          {
            v49 = *(_QWORD *)(v47 + 56) >= *(_QWORD *)(v48 + 40) && *(_QWORD *)(v47 + 40) <= *(_QWORD *)(v48 + 56);
            v50 = v49 && *(_BYTE *)(v47 + 96) == 0;
            v51 = v50 && *(_BYTE *)(v48 + 96) == 0;
            if (v51
              && !sub_22376DF90(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v47, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, (int *)v48, *(unsigned __int8 *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(_BYTE **)(a4 + 32)))
            {
              goto LABEL_104;
            }
          }
          v46 += 8;
          if (v46 == v35)
          {
            v37 = 1;
            v36 += 8;
            if (v45 == v35)
              goto LABEL_105;
            goto LABEL_87;
          }
        }
      }
    }
    v37 = 1;
    if (v13)
      goto LABEL_106;
  }
  else
  {
    v37 = sub_22376B104(v64, &__p, a3 + 1, a4);
    if (v13)
      goto LABEL_106;
  }
LABEL_107:
  if (__p)
    operator delete(__p);
  if (v61)
    operator delete(v61);
  return v37;
}

void sub_22376C2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v26;
  void *v27;

  if (v24)
  {
    operator delete(v24);
    v26 = __p;
    if (!__p)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22376C33C(__int128 *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  v9 = *a2;
  v8 = a2[1];
  if ((unint64_t)((char *)v8 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && (unint64_t)((char *)a3[1] - (char *)*a3) >= 0x79)
  {
    return sub_22376C4AC(a1, a2, a3, a4 + 1, a5);
  }
  if (v9 != v8)
  {
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = *a3;
        if (*a3 != v11)
        {
          do
          {
            v13 = *v9;
            v14 = *v12;
            if (*(_QWORD *)(*v9 + 48) >= *(_QWORD *)(*v12 + 32) && *(_QWORD *)(v13 + 32) <= *(_QWORD *)(v14 + 48))
            {
              v15 = *(_QWORD *)(v13 + 56) >= *(_QWORD *)(v14 + 40) && *(_QWORD *)(v13 + 40) <= *(_QWORD *)(v14 + 56);
              v16 = v15 && *(_BYTE *)(v13 + 96) == 0;
              if (v16 && *(_BYTE *)(v14 + 96) == 0)
              {
                result = sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v13, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v14, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32));
                if (!(_DWORD)result)
                  return result;
                v11 = a3[1];
              }
            }
            ++v12;
          }
          while (v12 != v11);
          v8 = a2[1];
        }
        ++v9;
      }
      while (v9 != v8);
    }
  }
  return 1;
}

uint64_t sub_22376C4AC(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  char *i;
  _QWORD *v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  BOOL v110;
  BOOL v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  char *v122;
  int64x2_t v123;
  int64x2_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  void *__p;
  char *v129;
  uint64_t v130;
  void *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void *v137;
  char *v138;
  uint64_t v139;
  void *v140;
  char *v141;
  uint64_t v142;
  _OWORD v143[2];
  __int128 v144;
  __int128 v145;

  v8 = *(_QWORD *)a1;
  v10 = a1 + 1;
  v9 = *((_QWORD *)a1 + 2);
  if (&v144 != a1)
  {
    v11 = *v10;
    v144 = *a1;
    v145 = v11;
  }
  if (v143 != a1)
  {
    v12 = *v10;
    v143[0] = *a1;
    v143[1] = v12;
  }
  if (v9 >= 0)
    v13 = v9;
  else
    v13 = v9 + 1;
  v14 = v13 >> 1;
  if (v8 >= 0)
    v15 = v8;
  else
    v15 = v8 + 1;
  v16 = v15 >> 1;
  v17 = v9 - 2 * v14 + v8 - 2 * v16;
  *(_QWORD *)&v145 = v14 + v16 + ((v17 + ((v17 & 0x80) >> 7)) << 24 >> 25);
  *(_QWORD *)&v143[0] = v145;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  __p = 0;
  v129 = 0;
  v130 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  sub_22376B6AC(&v144, v143, a2, &v140, (char **)&v137, &v134);
  sub_22376B6AC(&v144, v143, a3, &v131, (char **)&__p, &v125);
  v18 = v134;
  v19 = v135;
  v20 = v125;
  if (v134 == v135)
  {
    v122 = v134;
    v22 = v126;
    v41 = (char *)v140;
    v40 = v141;
    v42 = v141 - (_BYTE *)v140;
    if (v125 == v126)
      goto LABEL_208;
    goto LABEL_55;
  }
  v21 = v135 - v134;
  v22 = v126;
  if ((unint64_t)(v135 - v134) < 0x80 || a4 > 0x63 || (unint64_t)(v126 - v125) < 0x79)
  {
    if (v125 != v126)
    {
      v33 = v134;
      do
      {
        v34 = v20;
        do
        {
          v35 = *(_QWORD *)v33;
          v36 = *(_QWORD *)v34;
          if (*(_QWORD *)(*(_QWORD *)v33 + 48) >= *(_QWORD *)(*(_QWORD *)v34 + 32)
            && *(_QWORD *)(v35 + 32) <= *(_QWORD *)(v36 + 48))
          {
            v37 = *(_QWORD *)(v35 + 56) >= *(_QWORD *)(v36 + 40) && *(_QWORD *)(v35 + 40) <= *(_QWORD *)(v36 + 56);
            v38 = v37 && *(_BYTE *)(v35 + 96) == 0;
            v39 = v38 && *(_BYTE *)(v36 + 96) == 0;
            if (v39
              && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v35, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v36, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
            {
              goto LABEL_212;
            }
          }
          v34 += 8;
        }
        while (v34 != v22);
        v33 += 8;
      }
      while (v33 != v19);
    }
    goto LABEL_119;
  }
  v23 = 0x7FFFFFFFFFFFFFFFLL;
  v24 = 0x8000000000000000;
  v123 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v124 = vdupq_n_s64(0x8000000000000000);
  v25 = 0x8000000000000000;
  v26 = v134;
  v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v28 = *(_QWORD **)v26;
    v29 = *(_QWORD *)(*(_QWORD *)v26 + 32);
    if (v29 >= v27)
    {
      if (v29 <= v25)
      {
LABEL_19:
        v30 = v28[5];
        if (v30 < v23)
          goto LABEL_20;
        goto LABEL_28;
      }
    }
    else
    {
      v123.i64[0] = *(_QWORD *)(*(_QWORD *)v26 + 32);
      v27 = v29;
      if (v29 <= v25)
        goto LABEL_19;
    }
    v124.i64[0] = v29;
    v25 = v29;
    v30 = v28[5];
    if (v30 < v23)
    {
LABEL_20:
      v123.i64[1] = v30;
      v23 = v30;
      if (v30 <= v24)
        goto LABEL_21;
      goto LABEL_29;
    }
LABEL_28:
    if (v30 <= v24)
    {
LABEL_21:
      v31 = v28[6];
      if (v31 < v27)
        goto LABEL_22;
      goto LABEL_30;
    }
LABEL_29:
    v124.i64[1] = v30;
    v24 = v30;
    v31 = v28[6];
    if (v31 < v27)
    {
LABEL_22:
      v123.i64[0] = v31;
      v27 = v31;
      if (v31 <= v25)
        goto LABEL_23;
      goto LABEL_31;
    }
LABEL_30:
    if (v31 <= v25)
    {
LABEL_23:
      v32 = v28[7];
      if (v32 >= v23)
        goto LABEL_32;
      goto LABEL_24;
    }
LABEL_31:
    v124.i64[0] = v31;
    v25 = v31;
    v32 = v28[7];
    if (v32 >= v23)
    {
LABEL_32:
      if (v32 <= v24)
        goto LABEL_16;
      goto LABEL_33;
    }
LABEL_24:
    v123.i64[1] = v32;
    v23 = v32;
    if (v32 <= v24)
      goto LABEL_16;
LABEL_33:
    v124.i64[1] = v32;
    v24 = v32;
LABEL_16:
    v26 += 8;
  }
  while (v26 != v135);
  if (v125 != v126)
  {
    for (i = v125; i != v126; i += 8)
    {
      v61 = *(_QWORD **)i;
      v62 = *(_QWORD *)(*(_QWORD *)i + 32);
      if (v62 >= v27)
      {
        if (v62 <= v25)
        {
LABEL_103:
          v63 = v61[5];
          if (v63 < v23)
            goto LABEL_104;
          goto LABEL_112;
        }
      }
      else
      {
        v123.i64[0] = *(_QWORD *)(*(_QWORD *)i + 32);
        v27 = v62;
        if (v62 <= v25)
          goto LABEL_103;
      }
      v124.i64[0] = v62;
      v25 = v62;
      v63 = v61[5];
      if (v63 < v23)
      {
LABEL_104:
        v123.i64[1] = v63;
        v23 = v63;
        if (v63 <= v24)
          goto LABEL_105;
        goto LABEL_113;
      }
LABEL_112:
      if (v63 <= v24)
      {
LABEL_105:
        v64 = v61[6];
        if (v64 < v27)
          goto LABEL_106;
        goto LABEL_114;
      }
LABEL_113:
      v124.i64[1] = v63;
      v24 = v63;
      v64 = v61[6];
      if (v64 < v27)
      {
LABEL_106:
        v123.i64[0] = v64;
        v27 = v64;
        if (v64 <= v25)
          goto LABEL_107;
        goto LABEL_115;
      }
LABEL_114:
      if (v64 <= v25)
      {
LABEL_107:
        v65 = v61[7];
        if (v65 < v23)
          goto LABEL_108;
        goto LABEL_116;
      }
LABEL_115:
      v124.i64[0] = v64;
      v25 = v64;
      v65 = v61[7];
      if (v65 < v23)
      {
LABEL_108:
        v123.i64[1] = v65;
        v23 = v65;
        if (v65 > v24)
          goto LABEL_117;
        continue;
      }
LABEL_116:
      if (v65 > v24)
      {
LABEL_117:
        v124.i64[1] = v65;
        v24 = v65;
      }
    }
  }
  if ((sub_22376D21C(&v123, &v134, &v125, a4 + 1, a5) & 1) == 0)
    goto LABEL_212;
LABEL_119:
  v67 = (char *)v131;
  v66 = v132;
  if ((unint64_t)(v132 - (_BYTE *)v131) >= 0x80
    && (unint64_t)(v129 - (_BYTE *)__p) >= 0x80
    && a4 <= 0x63
    && v21 >= 0x79)
  {
    v68 = 0x7FFFFFFFFFFFFFFFLL;
    v69 = 0x8000000000000000;
    v123 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v124 = vdupq_n_s64(0x8000000000000000);
    v70 = 0x8000000000000000;
    v71 = v18;
    v72 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      v73 = *(_QWORD **)v71;
      v74 = *(_QWORD *)(*(_QWORD *)v71 + 32);
      if (v74 >= v72)
      {
        if (v74 <= v70)
        {
LABEL_127:
          v75 = v73[5];
          if (v75 < v68)
            goto LABEL_128;
          goto LABEL_136;
        }
      }
      else
      {
        v123.i64[0] = *(_QWORD *)(*(_QWORD *)v71 + 32);
        v72 = v74;
        if (v74 <= v70)
          goto LABEL_127;
      }
      v124.i64[0] = v74;
      v70 = v74;
      v75 = v73[5];
      if (v75 < v68)
      {
LABEL_128:
        v123.i64[1] = v75;
        v68 = v75;
        if (v75 <= v69)
          goto LABEL_129;
        goto LABEL_137;
      }
LABEL_136:
      if (v75 <= v69)
      {
LABEL_129:
        v76 = v73[6];
        if (v76 < v72)
          goto LABEL_130;
        goto LABEL_138;
      }
LABEL_137:
      v124.i64[1] = v75;
      v69 = v75;
      v76 = v73[6];
      if (v76 < v72)
      {
LABEL_130:
        v123.i64[0] = v76;
        v72 = v76;
        if (v76 <= v70)
          goto LABEL_131;
        goto LABEL_139;
      }
LABEL_138:
      if (v76 <= v70)
      {
LABEL_131:
        v77 = v73[7];
        if (v77 < v68)
          goto LABEL_132;
        goto LABEL_140;
      }
LABEL_139:
      v124.i64[0] = v76;
      v70 = v76;
      v77 = v73[7];
      if (v77 < v68)
      {
LABEL_132:
        v123.i64[1] = v77;
        v68 = v77;
        if (v77 > v69)
          goto LABEL_141;
        goto LABEL_124;
      }
LABEL_140:
      if (v77 > v69)
      {
LABEL_141:
        v124.i64[1] = v77;
        v69 = v77;
      }
LABEL_124:
      v71 += 8;
      if (v71 == v19)
      {
        if (sub_22376D21C(&v123, &v134, &v131, a4 + 1, a5)
          && (sub_22376D21C(&v123, &v134, &__p, a4 + 1, a5) & 1) != 0)
        {
          goto LABEL_204;
        }
LABEL_212:
        v104 = 0;
        if (!v20)
          goto LABEL_214;
        goto LABEL_213;
      }
    }
  }
  if (v131 != v132)
  {
    v78 = v18;
    do
    {
      v79 = v67;
      do
      {
        v80 = *(_QWORD *)v78;
        v81 = *(_QWORD *)v79;
        if (*(_QWORD *)(*(_QWORD *)v78 + 48) >= *(_QWORD *)(*(_QWORD *)v79 + 32)
          && *(_QWORD *)(v80 + 32) <= *(_QWORD *)(v81 + 48))
        {
          v82 = *(_QWORD *)(v80 + 56) >= *(_QWORD *)(v81 + 40) && *(_QWORD *)(v80 + 40) <= *(_QWORD *)(v81 + 56);
          v83 = v82 && *(_BYTE *)(v80 + 96) == 0;
          v84 = v83 && *(_BYTE *)(v81 + 96) == 0;
          if (v84
            && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v80, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v81, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
          {
            goto LABEL_212;
          }
        }
        v79 += 8;
      }
      while (v79 != v66);
      v78 += 8;
    }
    while (v78 != v19);
  }
  v85 = (char *)__p;
  v86 = v129;
  if (__p != v129)
  {
    v87 = v18;
    do
    {
      v88 = v85;
      do
      {
        v89 = *(_QWORD *)v87;
        v90 = *(_QWORD *)v88;
        if (*(_QWORD *)(*(_QWORD *)v87 + 48) >= *(_QWORD *)(*(_QWORD *)v88 + 32)
          && *(_QWORD *)(v89 + 32) <= *(_QWORD *)(v90 + 48))
        {
          v91 = *(_QWORD *)(v89 + 56) >= *(_QWORD *)(v90 + 40) && *(_QWORD *)(v89 + 40) <= *(_QWORD *)(v90 + 56);
          v92 = v91 && *(_BYTE *)(v89 + 96) == 0;
          v93 = v92 && *(_BYTE *)(v90 + 96) == 0;
          if (v93
            && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v89, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v90, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
          {
            goto LABEL_212;
          }
        }
        v88 += 8;
      }
      while (v88 != v86);
      v87 += 8;
    }
    while (v87 != v19);
  }
LABEL_204:
  v122 = v18;
  v41 = (char *)v140;
  v40 = v141;
  v42 = v141 - (_BYTE *)v140;
  if (v20 == v22)
    goto LABEL_208;
LABEL_55:
  if (v42 < 0x80
    || (unint64_t)(v138 - (_BYTE *)v137) < 0x80
    || a4 > 0x63
    || (unint64_t)(v22 - v20) < 0x79)
  {
    v18 = v122;
    if (v41 != v40)
    {
      v53 = v41;
      do
      {
        v54 = v20;
        do
        {
          v55 = *(_QWORD *)v53;
          v56 = *(_QWORD *)v54;
          if (*(_QWORD *)(*(_QWORD *)v53 + 48) >= *(_QWORD *)(*(_QWORD *)v54 + 32)
            && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
          {
            v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
            v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
            v59 = v58 && *(_BYTE *)(v56 + 96) == 0;
            if (v59
              && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v55, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v56, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
            {
              goto LABEL_212;
            }
          }
          v54 += 8;
        }
        while (v54 != v22);
        v53 += 8;
      }
      while (v53 != v40);
    }
    v94 = (char *)v137;
    v95 = v138;
    while (1)
    {
      if (v94 == v95)
        goto LABEL_208;
      v96 = v20;
      do
      {
        v97 = *(_QWORD *)v94;
        v98 = *(_QWORD *)v96;
        if (*(_QWORD *)(*(_QWORD *)v94 + 48) >= *(_QWORD *)(*(_QWORD *)v96 + 32)
          && *(_QWORD *)(v97 + 32) <= *(_QWORD *)(v98 + 48))
        {
          v99 = *(_QWORD *)(v97 + 56) >= *(_QWORD *)(v98 + 40) && *(_QWORD *)(v97 + 40) <= *(_QWORD *)(v98 + 56);
          v100 = v99 && *(_BYTE *)(v97 + 96) == 0;
          v101 = v100 && *(_BYTE *)(v98 + 96) == 0;
          if (v101
            && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v97, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v98, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
          {
            goto LABEL_273;
          }
        }
        v96 += 8;
      }
      while (v96 != v22);
      v94 += 8;
    }
  }
  v43 = 0x7FFFFFFFFFFFFFFFLL;
  v44 = 0x8000000000000000;
  v123 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v124 = vdupq_n_s64(0x8000000000000000);
  v45 = 0x8000000000000000;
  v46 = v20;
  v47 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v48 = *(_QWORD **)v46;
    v49 = *(_QWORD *)(*(_QWORD *)v46 + 32);
    if (v49 >= v47)
    {
      if (v49 > v45)
        goto LABEL_71;
LABEL_63:
      v50 = v48[5];
      if (v50 < v43)
        goto LABEL_64;
LABEL_72:
      if (v50 > v44)
        goto LABEL_73;
LABEL_65:
      v51 = v48[6];
      if (v51 < v47)
        goto LABEL_66;
LABEL_74:
      if (v51 > v45)
        goto LABEL_75;
LABEL_67:
      v52 = v48[7];
      if (v52 < v43)
        goto LABEL_68;
LABEL_76:
      if (v52 > v44)
      {
LABEL_77:
        v124.i64[1] = v52;
        v44 = v52;
      }
    }
    else
    {
      v123.i64[0] = *(_QWORD *)(*(_QWORD *)v46 + 32);
      v47 = v49;
      if (v49 <= v45)
        goto LABEL_63;
LABEL_71:
      v124.i64[0] = v49;
      v45 = v49;
      v50 = v48[5];
      if (v50 >= v43)
        goto LABEL_72;
LABEL_64:
      v123.i64[1] = v50;
      v43 = v50;
      if (v50 <= v44)
        goto LABEL_65;
LABEL_73:
      v124.i64[1] = v50;
      v44 = v50;
      v51 = v48[6];
      if (v51 >= v47)
        goto LABEL_74;
LABEL_66:
      v123.i64[0] = v51;
      v47 = v51;
      if (v51 <= v45)
        goto LABEL_67;
LABEL_75:
      v124.i64[0] = v51;
      v45 = v51;
      v52 = v48[7];
      if (v52 >= v43)
        goto LABEL_76;
LABEL_68:
      v123.i64[1] = v52;
      v43 = v52;
      if (v52 > v44)
        goto LABEL_77;
    }
    v46 += 8;
    if (v46 != v22)
      continue;
    break;
  }
  v18 = v122;
  if (!sub_22376D21C(&v123, &v140, &v125, a4 + 1, a5)
    || (sub_22376D21C(&v123, &v137, &v125, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_212;
  }
LABEL_208:
  if (v42 >= 0x80 && a4 <= 0x63 && (unint64_t)(v132 - (_BYTE *)v131) >= 0x79)
  {
    if ((sub_22376D21C(&v144, &v140, &v131, a4 + 1, a5) & 1) != 0)
      goto LABEL_246;
LABEL_273:
    v104 = 0;
    v18 = v122;
    if (!v20)
      goto LABEL_214;
LABEL_213:
    operator delete(v20);
    goto LABEL_214;
  }
  if (v41 != v40)
  {
    v102 = (char *)v131;
    v103 = v132;
    if (v131 != v132)
    {
LABEL_226:
      v106 = v102;
      while (1)
      {
        v107 = *(_QWORD *)v41;
        v108 = *(_QWORD *)v106;
        if (*(_QWORD *)(*(_QWORD *)v41 + 48) >= *(_QWORD *)(*(_QWORD *)v106 + 32)
          && *(_QWORD *)(v107 + 32) <= *(_QWORD *)(v108 + 48))
        {
          v109 = *(_QWORD *)(v107 + 56) >= *(_QWORD *)(v108 + 40) && *(_QWORD *)(v107 + 40) <= *(_QWORD *)(v108 + 56);
          v110 = v109 && *(_BYTE *)(v107 + 96) == 0;
          v111 = v110 && *(_BYTE *)(v108 + 96) == 0;
          if (v111
            && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v107, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v108, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
          {
            goto LABEL_273;
          }
        }
        v106 += 8;
        if (v106 == v103)
        {
          v41 += 8;
          if (v41 == v40)
            break;
          goto LABEL_226;
        }
      }
    }
  }
LABEL_246:
  v113 = (char *)v137;
  v112 = v138;
  if ((unint64_t)(v138 - (_BYTE *)v137) < 0x80 || a4 > 0x63 || (unint64_t)(v129 - (_BYTE *)__p) < 0x79)
  {
    if (v137 != v138)
    {
      v114 = (char *)__p;
      v115 = v129;
      if (__p != v129)
      {
LABEL_251:
        v116 = v114;
        while (1)
        {
          v117 = *(_QWORD *)v113;
          v118 = *(_QWORD *)v116;
          if (*(_QWORD *)(*(_QWORD *)v113 + 48) >= *(_QWORD *)(*(_QWORD *)v116 + 32)
            && *(_QWORD *)(v117 + 32) <= *(_QWORD *)(v118 + 48))
          {
            v119 = *(_QWORD *)(v117 + 56) >= *(_QWORD *)(v118 + 40) && *(_QWORD *)(v117 + 40) <= *(_QWORD *)(v118 + 56);
            v120 = v119 && *(_BYTE *)(v117 + 96) == 0;
            v121 = v120 && *(_BYTE *)(v118 + 96) == 0;
            if (v121
              && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v117, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v118, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
            {
              goto LABEL_273;
            }
          }
          v116 += 8;
          if (v116 == v115)
          {
            v113 += 8;
            if (v113 == v112)
              break;
            goto LABEL_251;
          }
        }
      }
    }
  }
  else if ((sub_22376D21C(v143, &v137, &__p, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_273;
  }
  v104 = 1;
  v18 = v122;
  if (v20)
    goto LABEL_213;
LABEL_214:
  if (__p)
    operator delete(__p);
  if (v131)
    operator delete(v131);
  if (v18)
    operator delete(v18);
  if (v137)
    operator delete(v137);
  if (v140)
    operator delete(v140);
  return v104;
}

void sub_22376D168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (v32)
  {
    operator delete(v32);
    v34 = __p;
    if (!__p)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22376D21C(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  char *i;
  _QWORD *v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  BOOL v97;
  BOOL v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  BOOL v117;
  BOOL v118;
  char *v119;
  int64x2_t v120;
  int64x2_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  void *__p;
  char *v126;
  uint64_t v127;
  void *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void *v134;
  char *v135;
  uint64_t v136;
  void *v137;
  char *v138;
  uint64_t v139;
  __int128 v140[2];
  __int128 v141;
  uint64_t v142;
  uint64_t v143;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 24);
  if (&v141 != (__int128 *)a1)
  {
    v141 = *(_OWORD *)a1;
    v142 = *(_QWORD *)(a1 + 16);
  }
  if (v140 != (__int128 *)a1)
  {
    *(_QWORD *)&v140[0] = *(_QWORD *)a1;
    v140[1] = *(_OWORD *)(a1 + 16);
  }
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = v9 + 1;
  v11 = v10 >> 1;
  if (v8 >= 0)
    v12 = v8;
  else
    v12 = v8 + 1;
  v13 = v12 >> 1;
  v14 = v9 - 2 * v11 + v8 - 2 * v13;
  v143 = v11 + v13 + ((v14 + ((v14 & 0x80) >> 7)) << 24 >> 25);
  *((_QWORD *)&v140[0] + 1) = v143;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  __p = 0;
  v126 = 0;
  v127 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  sub_22376B6AC(&v141, v140, a2, &v137, (char **)&v134, &v131);
  sub_22376B6AC(&v141, v140, a3, &v128, (char **)&__p, &v122);
  v15 = v131;
  v16 = v132;
  v17 = v122;
  if (v131 == v132)
  {
    v119 = v131;
    v19 = v123;
    v38 = (char *)v137;
    v37 = v138;
    v39 = v138 - (_BYTE *)v137;
    if (v122 == v123)
      goto LABEL_208;
    goto LABEL_55;
  }
  v18 = v132 - v131;
  v19 = v123;
  if ((unint64_t)(v132 - v131) < 0x80 || a4 > 0x63 || (unint64_t)(v123 - v122) < 0x79)
  {
    if (v122 != v123)
    {
      v30 = v131;
      do
      {
        v31 = v17;
        do
        {
          v32 = *(_QWORD *)v30;
          v33 = *(_QWORD *)v31;
          if (*(_QWORD *)(*(_QWORD *)v30 + 48) >= *(_QWORD *)(*(_QWORD *)v31 + 32)
            && *(_QWORD *)(v32 + 32) <= *(_QWORD *)(v33 + 48))
          {
            v34 = *(_QWORD *)(v32 + 56) >= *(_QWORD *)(v33 + 40) && *(_QWORD *)(v32 + 40) <= *(_QWORD *)(v33 + 56);
            v35 = v34 && *(_BYTE *)(v32 + 96) == 0;
            v36 = v35 && *(_BYTE *)(v33 + 96) == 0;
            if (v36
              && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v32, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v33, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
            {
              goto LABEL_212;
            }
          }
          v31 += 8;
        }
        while (v31 != v19);
        v30 += 8;
      }
      while (v30 != v16);
    }
    goto LABEL_119;
  }
  v20 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = 0x8000000000000000;
  v120 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v121 = vdupq_n_s64(0x8000000000000000);
  v22 = 0x8000000000000000;
  v23 = v131;
  v24 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v25 = *(_QWORD **)v23;
    v26 = *(_QWORD *)(*(_QWORD *)v23 + 32);
    if (v26 >= v24)
    {
      if (v26 <= v22)
      {
LABEL_19:
        v27 = v25[5];
        if (v27 < v20)
          goto LABEL_20;
        goto LABEL_28;
      }
    }
    else
    {
      v120.i64[0] = *(_QWORD *)(*(_QWORD *)v23 + 32);
      v24 = v26;
      if (v26 <= v22)
        goto LABEL_19;
    }
    v121.i64[0] = v26;
    v22 = v26;
    v27 = v25[5];
    if (v27 < v20)
    {
LABEL_20:
      v120.i64[1] = v27;
      v20 = v27;
      if (v27 <= v21)
        goto LABEL_21;
      goto LABEL_29;
    }
LABEL_28:
    if (v27 <= v21)
    {
LABEL_21:
      v28 = v25[6];
      if (v28 < v24)
        goto LABEL_22;
      goto LABEL_30;
    }
LABEL_29:
    v121.i64[1] = v27;
    v21 = v27;
    v28 = v25[6];
    if (v28 < v24)
    {
LABEL_22:
      v120.i64[0] = v28;
      v24 = v28;
      if (v28 <= v22)
        goto LABEL_23;
      goto LABEL_31;
    }
LABEL_30:
    if (v28 <= v22)
    {
LABEL_23:
      v29 = v25[7];
      if (v29 >= v20)
        goto LABEL_32;
      goto LABEL_24;
    }
LABEL_31:
    v121.i64[0] = v28;
    v22 = v28;
    v29 = v25[7];
    if (v29 >= v20)
    {
LABEL_32:
      if (v29 <= v21)
        goto LABEL_16;
      goto LABEL_33;
    }
LABEL_24:
    v120.i64[1] = v29;
    v20 = v29;
    if (v29 <= v21)
      goto LABEL_16;
LABEL_33:
    v121.i64[1] = v29;
    v21 = v29;
LABEL_16:
    v23 += 8;
  }
  while (v23 != v132);
  if (v122 != v123)
  {
    for (i = v122; i != v123; i += 8)
    {
      v58 = *(_QWORD **)i;
      v59 = *(_QWORD *)(*(_QWORD *)i + 32);
      if (v59 >= v24)
      {
        if (v59 <= v22)
        {
LABEL_103:
          v60 = v58[5];
          if (v60 < v20)
            goto LABEL_104;
          goto LABEL_112;
        }
      }
      else
      {
        v120.i64[0] = *(_QWORD *)(*(_QWORD *)i + 32);
        v24 = v59;
        if (v59 <= v22)
          goto LABEL_103;
      }
      v121.i64[0] = v59;
      v22 = v59;
      v60 = v58[5];
      if (v60 < v20)
      {
LABEL_104:
        v120.i64[1] = v60;
        v20 = v60;
        if (v60 <= v21)
          goto LABEL_105;
        goto LABEL_113;
      }
LABEL_112:
      if (v60 <= v21)
      {
LABEL_105:
        v61 = v58[6];
        if (v61 < v24)
          goto LABEL_106;
        goto LABEL_114;
      }
LABEL_113:
      v121.i64[1] = v60;
      v21 = v60;
      v61 = v58[6];
      if (v61 < v24)
      {
LABEL_106:
        v120.i64[0] = v61;
        v24 = v61;
        if (v61 <= v22)
          goto LABEL_107;
        goto LABEL_115;
      }
LABEL_114:
      if (v61 <= v22)
      {
LABEL_107:
        v62 = v58[7];
        if (v62 < v20)
          goto LABEL_108;
        goto LABEL_116;
      }
LABEL_115:
      v121.i64[0] = v61;
      v22 = v61;
      v62 = v58[7];
      if (v62 < v20)
      {
LABEL_108:
        v120.i64[1] = v62;
        v20 = v62;
        if (v62 > v21)
          goto LABEL_117;
        continue;
      }
LABEL_116:
      if (v62 > v21)
      {
LABEL_117:
        v121.i64[1] = v62;
        v21 = v62;
      }
    }
  }
  if ((sub_22376C4AC((__int128 *)v120.i8, &v131, &v122, a4 + 1, a5) & 1) == 0)
    goto LABEL_212;
LABEL_119:
  v64 = (char *)v128;
  v63 = v129;
  if ((unint64_t)(v129 - (_BYTE *)v128) >= 0x80
    && (unint64_t)(v126 - (_BYTE *)__p) >= 0x80
    && a4 <= 0x63
    && v18 >= 0x79)
  {
    v65 = 0x7FFFFFFFFFFFFFFFLL;
    v66 = 0x8000000000000000;
    v120 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v121 = vdupq_n_s64(0x8000000000000000);
    v67 = 0x8000000000000000;
    v68 = v15;
    v69 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      v70 = *(_QWORD **)v68;
      v71 = *(_QWORD *)(*(_QWORD *)v68 + 32);
      if (v71 >= v69)
      {
        if (v71 <= v67)
        {
LABEL_127:
          v72 = v70[5];
          if (v72 < v65)
            goto LABEL_128;
          goto LABEL_136;
        }
      }
      else
      {
        v120.i64[0] = *(_QWORD *)(*(_QWORD *)v68 + 32);
        v69 = v71;
        if (v71 <= v67)
          goto LABEL_127;
      }
      v121.i64[0] = v71;
      v67 = v71;
      v72 = v70[5];
      if (v72 < v65)
      {
LABEL_128:
        v120.i64[1] = v72;
        v65 = v72;
        if (v72 <= v66)
          goto LABEL_129;
        goto LABEL_137;
      }
LABEL_136:
      if (v72 <= v66)
      {
LABEL_129:
        v73 = v70[6];
        if (v73 < v69)
          goto LABEL_130;
        goto LABEL_138;
      }
LABEL_137:
      v121.i64[1] = v72;
      v66 = v72;
      v73 = v70[6];
      if (v73 < v69)
      {
LABEL_130:
        v120.i64[0] = v73;
        v69 = v73;
        if (v73 <= v67)
          goto LABEL_131;
        goto LABEL_139;
      }
LABEL_138:
      if (v73 <= v67)
      {
LABEL_131:
        v74 = v70[7];
        if (v74 < v65)
          goto LABEL_132;
        goto LABEL_140;
      }
LABEL_139:
      v121.i64[0] = v73;
      v67 = v73;
      v74 = v70[7];
      if (v74 < v65)
      {
LABEL_132:
        v120.i64[1] = v74;
        v65 = v74;
        if (v74 > v66)
          goto LABEL_141;
        goto LABEL_124;
      }
LABEL_140:
      if (v74 > v66)
      {
LABEL_141:
        v121.i64[1] = v74;
        v66 = v74;
      }
LABEL_124:
      v68 += 8;
      if (v68 == v16)
      {
        if (sub_22376C4AC((__int128 *)v120.i8, &v131, &v128, a4 + 1, a5)
          && (sub_22376C4AC((__int128 *)v120.i8, &v131, &__p, a4 + 1, a5) & 1) != 0)
        {
          goto LABEL_204;
        }
LABEL_212:
        v101 = 0;
        if (!v17)
          goto LABEL_214;
        goto LABEL_213;
      }
    }
  }
  if (v128 != v129)
  {
    v75 = v15;
    do
    {
      v76 = v64;
      do
      {
        v77 = *(_QWORD *)v75;
        v78 = *(_QWORD *)v76;
        if (*(_QWORD *)(*(_QWORD *)v75 + 48) >= *(_QWORD *)(*(_QWORD *)v76 + 32)
          && *(_QWORD *)(v77 + 32) <= *(_QWORD *)(v78 + 48))
        {
          v79 = *(_QWORD *)(v77 + 56) >= *(_QWORD *)(v78 + 40) && *(_QWORD *)(v77 + 40) <= *(_QWORD *)(v78 + 56);
          v80 = v79 && *(_BYTE *)(v77 + 96) == 0;
          v81 = v80 && *(_BYTE *)(v78 + 96) == 0;
          if (v81
            && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v77, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v78, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
          {
            goto LABEL_212;
          }
        }
        v76 += 8;
      }
      while (v76 != v63);
      v75 += 8;
    }
    while (v75 != v16);
  }
  v82 = (char *)__p;
  v83 = v126;
  if (__p != v126)
  {
    v84 = v15;
    do
    {
      v85 = v82;
      do
      {
        v86 = *(_QWORD *)v84;
        v87 = *(_QWORD *)v85;
        if (*(_QWORD *)(*(_QWORD *)v84 + 48) >= *(_QWORD *)(*(_QWORD *)v85 + 32)
          && *(_QWORD *)(v86 + 32) <= *(_QWORD *)(v87 + 48))
        {
          v88 = *(_QWORD *)(v86 + 56) >= *(_QWORD *)(v87 + 40) && *(_QWORD *)(v86 + 40) <= *(_QWORD *)(v87 + 56);
          v89 = v88 && *(_BYTE *)(v86 + 96) == 0;
          v90 = v89 && *(_BYTE *)(v87 + 96) == 0;
          if (v90
            && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v86, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v87, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
          {
            goto LABEL_212;
          }
        }
        v85 += 8;
      }
      while (v85 != v83);
      v84 += 8;
    }
    while (v84 != v16);
  }
LABEL_204:
  v119 = v15;
  v38 = (char *)v137;
  v37 = v138;
  v39 = v138 - (_BYTE *)v137;
  if (v17 == v19)
    goto LABEL_208;
LABEL_55:
  if (v39 < 0x80
    || (unint64_t)(v135 - (_BYTE *)v134) < 0x80
    || a4 > 0x63
    || (unint64_t)(v19 - v17) < 0x79)
  {
    v15 = v119;
    if (v38 != v37)
    {
      v50 = v38;
      do
      {
        v51 = v17;
        do
        {
          v52 = *(_QWORD *)v50;
          v53 = *(_QWORD *)v51;
          if (*(_QWORD *)(*(_QWORD *)v50 + 48) >= *(_QWORD *)(*(_QWORD *)v51 + 32)
            && *(_QWORD *)(v52 + 32) <= *(_QWORD *)(v53 + 48))
          {
            v54 = *(_QWORD *)(v52 + 56) >= *(_QWORD *)(v53 + 40) && *(_QWORD *)(v52 + 40) <= *(_QWORD *)(v53 + 56);
            v55 = v54 && *(_BYTE *)(v52 + 96) == 0;
            v56 = v55 && *(_BYTE *)(v53 + 96) == 0;
            if (v56
              && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v52, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v53, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
            {
              goto LABEL_212;
            }
          }
          v51 += 8;
        }
        while (v51 != v19);
        v50 += 8;
      }
      while (v50 != v37);
    }
    v91 = (char *)v134;
    v92 = v135;
    while (1)
    {
      if (v91 == v92)
        goto LABEL_208;
      v93 = v17;
      do
      {
        v94 = *(_QWORD *)v91;
        v95 = *(_QWORD *)v93;
        if (*(_QWORD *)(*(_QWORD *)v91 + 48) >= *(_QWORD *)(*(_QWORD *)v93 + 32)
          && *(_QWORD *)(v94 + 32) <= *(_QWORD *)(v95 + 48))
        {
          v96 = *(_QWORD *)(v94 + 56) >= *(_QWORD *)(v95 + 40) && *(_QWORD *)(v94 + 40) <= *(_QWORD *)(v95 + 56);
          v97 = v96 && *(_BYTE *)(v94 + 96) == 0;
          v98 = v97 && *(_BYTE *)(v95 + 96) == 0;
          if (v98
            && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v94, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v95, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
          {
            goto LABEL_273;
          }
        }
        v93 += 8;
      }
      while (v93 != v19);
      v91 += 8;
    }
  }
  v40 = 0x7FFFFFFFFFFFFFFFLL;
  v41 = 0x8000000000000000;
  v120 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v121 = vdupq_n_s64(0x8000000000000000);
  v42 = 0x8000000000000000;
  v43 = v17;
  v44 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v45 = *(_QWORD **)v43;
    v46 = *(_QWORD *)(*(_QWORD *)v43 + 32);
    if (v46 >= v44)
    {
      if (v46 > v42)
        goto LABEL_71;
LABEL_63:
      v47 = v45[5];
      if (v47 < v40)
        goto LABEL_64;
LABEL_72:
      if (v47 > v41)
        goto LABEL_73;
LABEL_65:
      v48 = v45[6];
      if (v48 < v44)
        goto LABEL_66;
LABEL_74:
      if (v48 > v42)
        goto LABEL_75;
LABEL_67:
      v49 = v45[7];
      if (v49 < v40)
        goto LABEL_68;
LABEL_76:
      if (v49 > v41)
      {
LABEL_77:
        v121.i64[1] = v49;
        v41 = v49;
      }
    }
    else
    {
      v120.i64[0] = *(_QWORD *)(*(_QWORD *)v43 + 32);
      v44 = v46;
      if (v46 <= v42)
        goto LABEL_63;
LABEL_71:
      v121.i64[0] = v46;
      v42 = v46;
      v47 = v45[5];
      if (v47 >= v40)
        goto LABEL_72;
LABEL_64:
      v120.i64[1] = v47;
      v40 = v47;
      if (v47 <= v41)
        goto LABEL_65;
LABEL_73:
      v121.i64[1] = v47;
      v41 = v47;
      v48 = v45[6];
      if (v48 >= v44)
        goto LABEL_74;
LABEL_66:
      v120.i64[0] = v48;
      v44 = v48;
      if (v48 <= v42)
        goto LABEL_67;
LABEL_75:
      v121.i64[0] = v48;
      v42 = v48;
      v49 = v45[7];
      if (v49 >= v40)
        goto LABEL_76;
LABEL_68:
      v120.i64[1] = v49;
      v40 = v49;
      if (v49 > v41)
        goto LABEL_77;
    }
    v43 += 8;
    if (v43 != v19)
      continue;
    break;
  }
  v15 = v119;
  if (!sub_22376C4AC((__int128 *)v120.i8, &v137, &v122, a4 + 1, a5)
    || (sub_22376C4AC((__int128 *)v120.i8, &v134, &v122, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_212;
  }
LABEL_208:
  if (v39 >= 0x80 && a4 <= 0x63 && (unint64_t)(v129 - (_BYTE *)v128) >= 0x79)
  {
    if ((sub_22376C4AC(&v141, &v137, &v128, a4 + 1, a5) & 1) != 0)
      goto LABEL_246;
LABEL_273:
    v101 = 0;
    v15 = v119;
    if (!v17)
      goto LABEL_214;
LABEL_213:
    operator delete(v17);
    goto LABEL_214;
  }
  if (v38 != v37)
  {
    v99 = (char *)v128;
    v100 = v129;
    if (v128 != v129)
    {
LABEL_226:
      v103 = v99;
      while (1)
      {
        v104 = *(_QWORD *)v38;
        v105 = *(_QWORD *)v103;
        if (*(_QWORD *)(*(_QWORD *)v38 + 48) >= *(_QWORD *)(*(_QWORD *)v103 + 32)
          && *(_QWORD *)(v104 + 32) <= *(_QWORD *)(v105 + 48))
        {
          v106 = *(_QWORD *)(v104 + 56) >= *(_QWORD *)(v105 + 40) && *(_QWORD *)(v104 + 40) <= *(_QWORD *)(v105 + 56);
          v107 = v106 && *(_BYTE *)(v104 + 96) == 0;
          v108 = v107 && *(_BYTE *)(v105 + 96) == 0;
          if (v108
            && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v104, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v105, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
          {
            goto LABEL_273;
          }
        }
        v103 += 8;
        if (v103 == v100)
        {
          v38 += 8;
          if (v38 == v37)
            break;
          goto LABEL_226;
        }
      }
    }
  }
LABEL_246:
  v110 = (char *)v134;
  v109 = v135;
  if ((unint64_t)(v135 - (_BYTE *)v134) < 0x80 || a4 > 0x63 || (unint64_t)(v126 - (_BYTE *)__p) < 0x79)
  {
    if (v134 != v135)
    {
      v111 = (char *)__p;
      v112 = v126;
      if (__p != v126)
      {
LABEL_251:
        v113 = v111;
        while (1)
        {
          v114 = *(_QWORD *)v110;
          v115 = *(_QWORD *)v113;
          if (*(_QWORD *)(*(_QWORD *)v110 + 48) >= *(_QWORD *)(*(_QWORD *)v113 + 32)
            && *(_QWORD *)(v114 + 32) <= *(_QWORD *)(v115 + 48))
          {
            v116 = *(_QWORD *)(v114 + 56) >= *(_QWORD *)(v115 + 40) && *(_QWORD *)(v114 + 40) <= *(_QWORD *)(v115 + 56);
            v117 = v116 && *(_BYTE *)(v114 + 96) == 0;
            v118 = v117 && *(_BYTE *)(v115 + 96) == 0;
            if (v118
              && !sub_22376DF90(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v114, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, (int *)v115, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))
            {
              goto LABEL_273;
            }
          }
          v113 += 8;
          if (v113 == v112)
          {
            v110 += 8;
            if (v110 == v109)
              break;
            goto LABEL_251;
          }
        }
      }
    }
  }
  else if ((sub_22376C4AC(v140, &v134, &__p, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_273;
  }
  v101 = 1;
  v15 = v119;
  if (v17)
    goto LABEL_213;
LABEL_214:
  if (__p)
    operator delete(__p);
  if (v128)
    operator delete(v128);
  if (v15)
    operator delete(v15);
  if (v134)
    operator delete(v134);
  if (v137)
    operator delete(v137);
  return v101;
}

void sub_22376DEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (v32)
  {
    operator delete(v32);
    v34 = __p;
    if (!__p)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22376DF90(int a1, uint64_t a2, int *a3, int a4, uint64_t a5, int *a6, int a7, uint64_t a8, uint64_t a9, _QWORD *a10, _BYTE *a11)
{
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _BOOL8 v44;
  _QWORD *v45;
  int v46;
  uint64_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  int v93;
  BOOL v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  int v106;
  int v107;
  double v108;
  int v109;
  double v110;
  double v111;
  double v112;
  int v113;
  double v114;
  int v115;
  double v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  BOOL v128;
  BOOL v129;
  int v130;
  int v131;
  BOOL v132;
  unsigned int v133;
  BOOL v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int16 v162;
  __int16 v163;
  int v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  _OWORD *v168;
  double v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BOOL4 v174;
  unint64_t v175;
  unint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  int64x2_t v190;
  int64x2_t v191;
  unint64_t v192;
  int64x2_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  int64x2_t v198;
  int64x2_t v199;
  unint64_t v200;
  int64x2_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t *v210;
  _OWORD *v211;
  double v212;
  double v213;
  int v214;
  int v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t *v218;
  _OWORD *v219;
  double v220;
  int v221;
  double v222;
  uint64_t v223;
  uint64_t *v224;
  _OWORD *v225;
  uint64_t v226;
  _OWORD *v227;
  double v228;
  int v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t *v232;
  _OWORD *v233;
  double v234;
  int v235;
  int v236;
  double v237;
  int v238;
  int v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t *v242;
  _OWORD *v243;
  double v244;
  int v245;
  double v246;
  int v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t *v250;
  _OWORD *v251;
  double v252;
  int v253;
  double v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  double v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t *v261;
  _OWORD *v262;
  double v263;
  int v264;
  double v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t *v268;
  _OWORD *v269;
  double v270;
  int v271;
  double v272;
  BOOL v273;
  int v274;
  char v275;
  BOOL v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t *v285;
  _OWORD *v286;
  double v287;
  int v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t *v291;
  _OWORD *v292;
  double v293;
  int v294;
  double v295;
  double v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t *v303;
  _OWORD *v304;
  uint64_t v305;
  _OWORD *v306;
  double v307;
  int v308;
  uint64_t v309;
  uint64_t *v310;
  _OWORD *v311;
  uint64_t *v312;
  double v313;
  int v314;
  double v315;
  uint64_t v316;
  uint64_t *v317;
  _OWORD *v318;
  uint64_t *v319;
  double v320;
  int v321;
  double v322;
  int v323;
  int v324;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  double v334;
  int v335;
  int v336;
  uint64_t *v337;
  uint64_t *v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  double v346;
  double v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t *v356;
  _OWORD *v357;
  double v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  int v365;
  int v366;
  int v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t *v373;
  _OWORD *v374;
  double v375;
  int v376;
  double v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t *v380;
  _OWORD *v381;
  double v382;
  int v383;
  double v384;
  int v385;
  int v386;
  int v387;
  int v388;
  BOOL v389;
  int v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  int v399;
  double v400;
  int v401;
  double v402;
  int v403;
  int v404;
  uint64_t v405;
  uint64_t *v406;
  _OWORD *v407;
  uint64_t *v408;
  double v409;
  int v410;
  double v411;
  int v412;
  uint64_t v413;
  uint64_t *v414;
  _OWORD *v415;
  uint64_t *v416;
  double v417;
  int v418;
  double v419;
  uint64_t v420;
  unint64_t v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  uint64_t v431;
  _QWORD *v432;
  _QWORD *v433;
  BOOL v434;
  _QWORD *v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  uint64_t v451;
  int v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  _QWORD *v466;
  int v467;
  int v468;
  _QWORD *v469;
  uint64_t v470;
  int *v471;
  uint64_t v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t *v477;
  uint64_t *v478;
  int *v479;
  int v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t *v486;
  _QWORD *v487;
  uint64_t v488;
  uint64_t *v489;
  uint64_t *v490;
  int v491;
  __int16 v492;
  __int16 v493;
  char v494;
  __int128 v495;
  _QWORD v496[3];
  uint64_t *v497;
  _QWORD v498[15];
  char v499;
  __int128 v500;
  char v501;
  _QWORD v502[2];
  __int128 v503;
  _QWORD v504[15];
  char v505;
  __int128 v506;
  char v507;
  __int128 v508;
  _BYTE v509[184];
  _QWORD *v510;
  _QWORD *v511;
  uint64_t v512;
  _QWORD *v513;
  _QWORD *v514;
  _QWORD *v515;
  _QWORD *v516;
  uint64_t v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  uint64_t v521;
  __int128 v522;
  double v523;
  char v524;
  __int128 v525;
  uint64_t v526;
  __int128 v527;
  double v528;
  char v529;
  __int16 v530;
  __int128 v531;
  _BYTE v532[26];
  uint64_t v533;
  uint64_t v534;
  __int128 v535;
  double v536;
  __int128 v537;
  __int128 v538;
  int v539;
  __int128 v540;
  __int128 v541;
  _OWORD v542[3];
  _BYTE v543[68];
  __int128 v544;
  int v545;
  uint64_t v546;

  v546 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a3 + 96) && (unint64_t)(*((_QWORD *)a3 + 10) + 1) < *((_QWORD *)a3 + 11)
    || *((_BYTE *)a6 + 96) && (unint64_t)(*((_QWORD *)a6 + 10) + 1) < *((_QWORD *)a6 + 11))
  {
    return 1;
  }
  v13 = *((_QWORD *)a3 + 3);
  v14 = (_QWORD *)(a2 + 48 * *((_QWORD *)a3 + 2));
  if (v13 >= 0)
    v14 = (_QWORD *)(v14[3] + 24 * v13);
  v15 = (_QWORD *)*v14;
  v16 = (_QWORD *)v14[1];
  v17 = (uint64_t)v16 - *v14;
  v18 = v17 >> 4;
  if (v17)
    v19 = v18 + 1;
  else
    v19 = 0;
  v20 = *((_QWORD *)a6 + 3);
  v21 = (uint64_t **)(a5 + 48 * *((_QWORD *)a6 + 2));
  if (v20 >= 0)
    v21 = (uint64_t **)&v21[3][3 * v20];
  v22 = *v21;
  v23 = v21[1];
  v24 = (char *)v23 - (char *)*v21;
  v25 = v24 >> 4;
  if (v23 == *v21)
    v26 = 0;
  else
    v26 = v25 + 1;
  v27 = *((_QWORD *)a3 + 8);
  if (v17 >= 1 && v27 < v18)
  {
    v29 = &v15[2 * v27];
    v30 = *((_QWORD *)a3 + 13);
    v31 = *((_QWORD *)a3 + 9);
    v32 = v27 + 1;
    if (v27 + 1 < v18)
    {
LABEL_23:
      v33 = v29 + 2;
      goto LABEL_27;
    }
  }
  else
  {
    v29 = v16;
    if (v27 <= v18)
      v29 = &v15[2 * (v27 % v18)];
    v30 = *((_QWORD *)a3 + 13);
    v31 = *((_QWORD *)a3 + 9);
    v32 = v27 + 1;
    if (v27 + 1 < v18)
      goto LABEL_23;
  }
  v33 = v16;
  if (v27 < v18)
    v33 = &v15[2 * (v32 % v18)];
LABEL_27:
  v34 = *a3;
  if (v27 == v31)
    goto LABEL_48;
  if (v34 != 1)
  {
    if (v34 == -1)
    {
      v35 = *((_QWORD *)a6 + 6);
      if (*v33 > v35)
      {
        v36 = v30 - v27 + v31;
        while (1)
        {
          v29 = v33;
          if (v32 + 1 >= v18)
          {
            v33 = v16;
            if (v32 < v18)
              v33 = &v15[2 * ((v32 + 1) % v18)];
          }
          else
          {
            v33 += 2;
          }
          if (v31 == v32)
            goto LABEL_52;
          ++v30;
          ++v32;
          if (*v33 <= v35)
            goto LABEL_47;
        }
      }
    }
LABEL_48:
    v38 = v27 + 1;
    if (v27 + 1 >= v18)
      goto LABEL_53;
LABEL_49:
    v39 = v29 + 2;
    v40 = v38;
    if (v38 == v19)
      goto LABEL_57;
    goto LABEL_50;
  }
  v37 = *((_QWORD *)a6 + 4);
  if (*v33 >= v37)
    goto LABEL_48;
  v36 = v30 - v27 + v31;
  while (1)
  {
    v29 = v33;
    if (v32 + 1 >= v18)
    {
      v33 = v16;
      if (v32 < v18)
        v33 = &v15[2 * ((v32 + 1) % v18)];
    }
    else
    {
      v33 += 2;
    }
    if (v31 == v32)
      break;
    ++v30;
    ++v32;
    if (*v33 >= v37)
    {
LABEL_47:
      v27 = v32 - 1;
      goto LABEL_48;
    }
  }
LABEL_52:
  v27 = v31;
  v30 = v36;
  v38 = v31 + 1;
  if (v31 + 1 < v18)
    goto LABEL_49;
LABEL_53:
  v39 = v16;
  if (v27 >= v18)
  {
    v40 = v38;
    if (v38 == v19)
      goto LABEL_57;
  }
  else
  {
    v39 = &v15[2 * (v38 % v18)];
    v40 = v38;
    if (v38 == v19)
    {
LABEL_57:
      if (v17 < 17)
      {
        v39 = v16;
        if (v17 >= 1)
          v39 = &v15[2 * (1 - v18)];
      }
      else
      {
        v39 = v15 + 2;
      }
      v40 = v27 != 0;
      if (!v27)
        v39 = v15;
      if (v38 >= v18)
        goto LABEL_64;
LABEL_51:
      v41 = v29 + 2;
      goto LABEL_66;
    }
  }
LABEL_50:
  if (v38 < v18)
    goto LABEL_51;
LABEL_64:
  v41 = v16;
  if (v27 < v18)
    v41 = &v15[2 * (v38 % v18)];
LABEL_66:
  v42 = v40 + 1;
  if (v40 + 1 >= v18)
  {
    v487 = v16;
    if (v40 >= v18)
    {
      if (v42 == v19)
        goto LABEL_74;
    }
    else
    {
      v487 = &v15[2 * (v42 % v18)];
      if (v42 == v19)
        goto LABEL_74;
    }
LABEL_68:
    v488 = v40 + 1;
    result = 1;
    if (v27 == v31)
      return result;
    goto LABEL_82;
  }
  v487 = v39 + 2;
  if (v42 != v19)
    goto LABEL_68;
LABEL_74:
  if (v17 < 17)
  {
    v43 = v16;
    if (v17 >= 1)
      v43 = &v15[2 * (1 - v18)];
  }
  else
  {
    v43 = v15 + 2;
  }
  v44 = v40 != 0;
  if (v40)
    v45 = v43;
  else
    v45 = v15;
  v487 = v45;
  v488 = v44;
  result = 1;
  if (v27 != v31)
  {
LABEL_82:
    v46 = -v34;
    v47 = &v22[2 * (1 - v25)];
    v473 = *a6;
    v480 = -*a6;
    v442 = a1;
    if (v24 <= 0)
      v47 = v23;
    if (v24 > 16)
      v47 = v22 + 2;
    v486 = v47;
    if (v17 <= 0)
      v48 = v16;
    else
      v48 = &v15[2 * (1 - v18)];
    if (v17 <= 16)
      v49 = v48;
    else
      v49 = v15 + 2;
    v449 = v49;
    v441 = a4;
    v50 = v27;
    v471 = a3;
    v447 = v16;
    v448 = v15;
    v445 = v24;
    v446 = v19;
    v444 = v31;
    v51 = v46;
    v443 = v46;
    v479 = a6;
    v467 = a1;
    v468 = a4;
    v477 = v23;
    v478 = v22;
    v476 = v26;
    do
    {
      v474 = v50;
      v52 = *v29;
      if (v51 == 1)
      {
        v53 = v473;
        if (v52 < *((_QWORD *)a6 + 4))
          return 1;
      }
      else
      {
        v53 = v473;
        if (v51 == -1 && v52 > *((_QWORD *)a6 + 6))
          return 1;
      }
      v502[0] = a3;
      v502[1] = v27;
      v466 = v29;
      *(_QWORD *)&v503 = v29;
      *((_QWORD *)&v503 + 1) = v41;
      v504[0] = v487;
      v504[1] = v15;
      v504[2] = v16;
      v504[3] = v18;
      v504[4] = v488;
      v504[5] = v15;
      v504[6] = v15;
      v504[7] = v16;
      v504[8] = v18;
      v504[9] = 0;
      v504[10] = v16;
      v504[11] = v15;
      v504[12] = v16;
      v504[13] = v18;
      v504[14] = v19;
      v505 = 1;
      v507 = 0;
      v54 = *((_QWORD *)a6 + 8);
      if (v24 < 1 || v54 >= v25)
      {
        v490 = v23;
        if (v54 > v25)
          goto LABEL_104;
        v55 = &v22[2 * (v54 % v25)];
      }
      else
      {
        v55 = &v22[2 * v54];
      }
      v490 = v55;
LABEL_104:
      v56 = v54 + 1;
      if (v54 + 1 >= v25)
      {
        v57 = v23;
        if (v54 < v25)
          v57 = &v22[2 * (v56 % v25)];
      }
      else
      {
        v57 = v490 + 2;
      }
      v58 = *((_QWORD *)a6 + 13);
      v59 = *((_QWORD *)a6 + 9);
      if (v54 == v59)
      {
LABEL_129:
        v64 = v54 + 1;
        if (v54 + 1 < v25)
          goto LABEL_130;
        goto LABEL_132;
      }
      if (v53 == 1)
      {
        v63 = *((_QWORD *)a3 + 4);
        if (*v57 >= v63)
          goto LABEL_129;
        v61 = v58 - v54 + v59;
        while (1)
        {
          v62 = v57;
          if (v56 + 1 >= v25)
          {
            v57 = v23;
            if (v56 < v25)
              v57 = &v22[2 * ((v56 + 1) % v25)];
          }
          else
          {
            v57 += 2;
          }
          if (v59 == v56)
            break;
          ++v58;
          ++v56;
          if (*v57 >= v63)
          {
LABEL_128:
            v490 = v62;
            v54 = v56 - 1;
            goto LABEL_129;
          }
        }
      }
      else
      {
        if (v53 != -1)
          goto LABEL_129;
        v60 = *((_QWORD *)a3 + 6);
        if (*v57 <= v60)
          goto LABEL_129;
        v61 = v58 - v54 + v59;
        while (1)
        {
          v62 = v57;
          if (v56 + 1 >= v25)
          {
            v57 = v23;
            if (v56 < v25)
              v57 = &v22[2 * ((v56 + 1) % v25)];
          }
          else
          {
            v57 += 2;
          }
          if (v59 == v56)
            break;
          ++v58;
          ++v56;
          if (*v57 <= v60)
            goto LABEL_128;
        }
      }
      v490 = v62;
      v54 = *((_QWORD *)a6 + 9);
      v58 = v61;
      v64 = v59 + 1;
      if (v59 + 1 < v25)
      {
LABEL_130:
        v65 = v490 + 2;
        goto LABEL_134;
      }
LABEL_132:
      if (v54 < v25)
      {
        v65 = &v22[2 * (v64 % v25)];
LABEL_134:
        v66 = v54 != 0;
        v67 = v486;
        if (!v54)
          v67 = v22;
        v489 = v65;
        if (v64 == v26)
          v65 = v67;
        else
          v66 = v64;
        v68 = v66 + 1;
        if (v66 + 1 < v25)
          goto LABEL_140;
        goto LABEL_149;
      }
      v66 = v54 != 0;
      v70 = v486;
      if (!v54)
        v70 = v22;
      if (v64 == v26)
        v65 = v70;
      else
        v65 = v23;
      if (v64 != v26)
        v66 = v64;
      v489 = v23;
      v68 = v66 + 1;
      if (v66 + 1 < v25)
      {
LABEL_140:
        v69 = v65 + 2;
        goto LABEL_151;
      }
LABEL_149:
      v69 = v23;
      if (v66 < v25)
        v69 = &v22[2 * (v68 % v25)];
LABEL_151:
      if (v54 != v59)
      {
        v92 = v66 == 0;
        v72 = v66 != 0;
        v73 = v486;
        if (v92)
          v73 = v22;
        if (v68 == v26)
          v74 = v72;
        else
          v74 = v68;
        if (v68 == v26)
          v75 = v73;
        else
          v75 = v69;
        v76 = v54;
        v472 = v27;
        v469 = v41;
        v470 = v38;
        v475 = *((_QWORD *)a6 + 9);
        while (2)
        {
          v77 = *v490;
          if (v480 == 1)
          {
            if (v77 < *((_QWORD *)a3 + 4))
              break;
          }
          else if (v480 == -1 && v77 > *((_QWORD *)a3 + 6))
          {
            break;
          }
          if (a1 == a4)
          {
            v78 = *((_QWORD *)a3 + 3);
            v80 = *((_QWORD *)a6 + 2);
            v79 = *((_QWORD *)a6 + 3);
            if (*((_QWORD *)a3 + 2) == v80)
            {
              if (v78 == v79 && a7)
              {
                if (v58 == v30 + 1)
                  goto LABEL_311;
                if (v472)
                {
                  v79 = *((_QWORD *)a3 + 3);
                  v80 = *((_QWORD *)a3 + 2);
                }
                else
                {
                  v79 = *((_QWORD *)a3 + 3);
                  v80 = *((_QWORD *)a3 + 2);
                  if (*((_QWORD *)v471 + 11) - 2 <= v54)
                    goto LABEL_311;
                }
              }
              else
              {
                v80 = *((_QWORD *)a3 + 2);
              }
            }
          }
          else
          {
            v78 = *((_QWORD *)a3 + 3);
            v80 = *((_QWORD *)a6 + 2);
            v79 = *((_QWORD *)a6 + 3);
          }
          v451 = v79;
          v454 = v78;
          v457 = *((_QWORD *)a3 + 2);
          v481 = v76;
          v485 = v64;
          v496[0] = a6;
          v496[1] = v54;
          v496[2] = v490;
          v497 = v489;
          v483 = v75;
          v498[0] = v75;
          v498[1] = v22;
          v498[2] = v23;
          v498[3] = v25;
          v484 = v74;
          v498[4] = v74;
          v498[5] = v22;
          v498[6] = v22;
          v498[7] = v23;
          v498[8] = v25;
          v498[9] = 0;
          v498[10] = v23;
          v498[11] = v22;
          v498[12] = v23;
          v498[13] = v25;
          v498[14] = v26;
          v499 = 0;
          v501 = 0;
          v538 = 0uLL;
          v539 = 0;
          v537 = 0uLL;
          v510 = v502;
          v511 = v496;
          v513 = v502;
          v514 = v496;
          v515 = v496;
          v516 = v502;
          v82 = (uint64_t *)*((_QWORD *)&v503 + 1);
          v544 = v503;
          v81 = (uint64_t *)v503;
          *(_QWORD *)&v535 = v490;
          *((_QWORD *)&v535 + 1) = v489;
          *(_OWORD *)&v509[16] = xmmword_2245F5410;
          *(_QWORD *)&v509[32] = 0;
          *(_QWORD *)&v509[40] = 0;
          *(_QWORD *)&v509[48] = 1;
          *(_QWORD *)&v509[56] = 0;
          v83 = **((_QWORD **)&v503 + 1);
          v84 = *(_QWORD *)v503;
          *(_QWORD *)&v508 = **((_QWORD **)&v503 + 1) - *(_QWORD *)v503;
          v85 = *v489;
          v86 = *v490;
          v87 = *(_QWORD *)(*((_QWORD *)&v503 + 1) + 8);
          v88 = *(_QWORD *)(v503 + 8);
          v89 = *v489 - *v490;
          v92 = *v489 == *v490;
          *((_QWORD *)&v508 + 1) = v87 - v88;
          *(_QWORD *)v509 = v89;
          v90 = v489[1];
          v91 = v490[1];
          v92 = v92 && v90 == v91;
          v93 = v92;
          v94 = v83 == v84 && v87 == v88;
          v95 = v94;
          *(_QWORD *)&v509[8] = v90 - v91;
          v482 = a10[5];
          if (v94 && v93)
            goto LABEL_272;
          v96 = v84 >= v83 ? v83 : v84;
          v97 = v84 <= v83 ? v83 : v84;
          v98 = v86 >= v85 ? v85 : v86;
          v99 = v86 <= v85 ? v85 : v86;
          if (v97 < v98 || v99 < v96)
            goto LABEL_272;
          v100 = v88 >= v87 ? v87 : v88;
          v101 = v88 <= v87 ? v87 : v88;
          v102 = v91 >= v90 ? v90 : v91;
          v103 = v91 <= v90 ? v90 : v91;
          if (v101 < v102 || v103 < v100)
            goto LABEL_272;
          v438 = v95;
          *((_QWORD *)&v540 + 1) = 0;
          *(_QWORD *)v543 = 0x3FF0000000000000;
          v104 = sub_22376A6D8(v86, v91, v85, v90, v84, v88, (double *)v543);
          if (v104 == 0.0)
          {
LABEL_223:
            v439 = 0;
          }
          else if ((*(_QWORD *)&v104 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v104 > 0.0)
              v107 = 1;
            else
              v107 = -1;
            v439 = v107;
          }
          else
          {
            v105 = fabs(v104);
            if (v104 > 0.0)
              v106 = 1;
            else
              v106 = -1;
            v439 = v106;
            if (v105 <= *(double *)v543 * 2.22044605e-16)
              goto LABEL_223;
          }
          *(_QWORD *)v543 = 0x3FF0000000000000;
          v108 = sub_22376A6D8(*v490, v490[1], *v489, v489[1], *v82, v82[1], (double *)v543);
          if (v108 == 0.0)
          {
LABEL_235:
            v109 = 0;
          }
          else if ((*(_QWORD *)&v108 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v108 > 0.0)
              v109 = 1;
            else
              v109 = -1;
          }
          else
          {
            v110 = fabs(v108);
            if (v108 > 0.0)
              v109 = 1;
            else
              v109 = -1;
            if (v110 <= *(double *)v543 * 2.22044605e-16)
              goto LABEL_235;
          }
          *(_QWORD *)&v540 = __PAIR64__(v109, v439);
          if (v109 * v439 == 1)
            goto LABEL_271;
          v436 = v109;
          *(_QWORD *)v543 = 0x3FF0000000000000;
          v111 = sub_22376A6D8(*v81, v81[1], *v82, v82[1], *v490, v490[1], (double *)v543);
          if (v111 == 0.0)
          {
LABEL_247:
            v437 = 0;
          }
          else
          {
            if ((*(_QWORD *)&v111 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              if (v111 > 0.0)
                v113 = 1;
              else
                v113 = -1;
            }
            else
            {
              v112 = fabs(v111);
              if (v111 > 0.0)
                v113 = 1;
              else
                v113 = -1;
              if (v112 <= *(double *)v543 * 2.22044605e-16)
                goto LABEL_247;
            }
            v437 = v113;
          }
          *(_QWORD *)v543 = 0x3FF0000000000000;
          v114 = sub_22376A6D8(*v81, v81[1], *v82, v82[1], *v489, v489[1], (double *)v543);
          if (v114 == 0.0)
          {
LABEL_260:
            v115 = 0;
          }
          else if ((*(_QWORD *)&v114 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v114 > 0.0)
              v115 = 1;
            else
              v115 = -1;
          }
          else
          {
            v116 = fabs(v114);
            if (v114 > 0.0)
              v115 = 1;
            else
              v115 = -1;
            if (v116 <= *(double *)v543 * 2.22044605e-16)
              goto LABEL_260;
          }
          *((_QWORD *)&v540 + 1) = __PAIR64__(v115, v437);
          if (v115 * v437 == 1)
          {
LABEL_271:
            v521 = 0;
            *(_QWORD *)&v522 = 0;
            v526 = 0;
            *(_QWORD *)&v527 = 0;
            memset(&v543[2], 0, 40);
            v517 = 0;
            v520 = xmmword_2245F5410;
            *((_QWORD *)&v522 + 1) = 1;
            v523 = 0.0;
            v524 = 0;
            v525 = xmmword_2245F5410;
            *((_QWORD *)&v527 + 1) = 1;
            v528 = 0.0;
            v529 = 0;
            v530 = 100;
            v531 = *(_OWORD *)v543;
            *(_OWORD *)v532 = *(_OWORD *)&v543[16];
            *(_OWORD *)&v532[10] = *(_OWORD *)&v543[26];
            v533 = a8;
LABEL_272:
            a6 = v479;
            v23 = v477;
            v22 = v478;
            v26 = v476;
            v117 = a10;
            goto LABEL_273;
          }
          v141 = v437 | v115;
          v142 = *v82;
          v143 = v82[1];
          v145 = *v81;
          v144 = v81[1];
          v146 = *v82 - *v81;
          v147 = *v489;
          v148 = v489[1];
          v150 = *v490;
          v149 = v490[1];
          v151 = *v489 - *v490;
          v152 = v143 - v144;
          v153 = v148 - v149;
          if (v436 | v439 | v141)
          {
            v154 = v153 * v146 - v152 * v151;
            if (v154)
            {
              v155 = v152 * v151 - v153 * v146;
              if (v155)
              {
                v156 = (v144 - v149) * v151 + v153 * (v150 - v145);
                *(_QWORD *)&v509[16] = v156;
                *(_QWORD *)&v509[24] = v153 * v146 - v152 * v151;
                if (v154 < 0)
                {
                  v156 = -v156;
                  v154 = v152 * v151 - v153 * v146;
                  *(_QWORD *)&v509[16] = v156;
                  *(_QWORD *)&v509[24] = v154;
                }
                *(double *)&v509[32] = (double)v156 * 1000000.0 / (double)v154;
                v157 = v152 * (v145 - v150) + (v149 - v144) * v146;
                *(_QWORD *)&v509[40] = v157;
                *(_QWORD *)&v509[48] = v152 * v151 - v153 * v146;
                if (v155 < 0)
                {
                  v157 = -v157;
                  v155 = v153 * v146 - v152 * v151;
                  *(_QWORD *)&v509[40] = v157;
                  *(_QWORD *)&v509[48] = v155;
                }
                *(double *)&v509[56] = (double)v157 * 1000000.0 / (double)v155;
LABEL_372:
                sub_223771EF8((uint64_t)&v517, (int *)&v540, (double *)&v508, v81, v490);
                goto LABEL_376;
              }
            }
            v540 = 0uLL;
          }
          if (v146 >= 0)
            v158 = v146;
          else
            v158 = -v146;
          if (v152 >= 0)
            v159 = v143 - v144;
          else
            v159 = v144 - v143;
          if (v151 >= 0)
            v160 = v151;
          else
            v160 = -v151;
          if (v153 >= 0)
            v161 = v148 - v149;
          else
            v161 = v149 - v148;
          if (v438)
          {
            v162 = (v160 >= (unint64_t)v161) | 0x100;
          }
          else
          {
            if (v93)
            {
              v163 = v158 >= v159;
            }
            else
            {
              if (v160 < (uint64_t)v158)
                v158 = v160;
              if (v161 < (uint64_t)v159)
                v159 = v161;
              if (v158 == v159)
              {
                if (v158)
                  v162 = 257;
                else
                  v162 = 1;
                goto LABEL_371;
              }
              v163 = v158 > v159;
            }
            v162 = v163 | 0x100;
          }
LABEL_371:
          if ((v162 & 0x100) == 0)
            goto LABEL_372;
          if ((v162 & 1) != 0)
            sub_223771BA8((uint64_t)&v517, (__int128 **)&v544, (__int128 **)&v535, v145, v142, v150, v147, v438, v93);
          else
            sub_223771BA8((uint64_t)&v517, (__int128 **)&v544, (__int128 **)&v535, v144, v143, v149, v148, v438, v93);
LABEL_376:
          v533 = a8;
          v534 = a9;
          a6 = v479;
          v23 = v477;
          v22 = v478;
          v26 = v476;
          v117 = a10;
          if (v530 == 100)
            goto LABEL_273;
          v508 = v495;
          *(_DWORD *)v509 = 0;
          v509[4] = 0;
          *(_WORD *)&v509[5] = v493;
          v509[7] = v494;
          *(_QWORD *)&v509[8] = -1;
          *(_WORD *)&v509[16] = 0;
          *(_DWORD *)&v509[18] = v491;
          *(_WORD *)&v509[22] = v492;
          *(_DWORD *)&v509[24] = 0;
          *(_QWORD *)&v509[32] = v442;
          *(_QWORD *)&v509[40] = v457;
          *(_QWORD *)&v509[48] = v454;
          *(_QWORD *)&v509[56] = v472;
          *(_OWORD *)&v509[64] = xmmword_2245F5400;
          *(_QWORD *)&v509[80] = 1;
          *(_OWORD *)&v509[88] = v538;
          *(_DWORD *)&v509[104] = v539;
          *(_QWORD *)&v509[112] = v441;
          *(_QWORD *)&v509[120] = v80;
          *(_QWORD *)&v509[128] = v451;
          *(_QWORD *)&v509[136] = v54;
          *(_OWORD *)&v509[144] = xmmword_2245F5400;
          *(_QWORD *)&v509[160] = 1;
          *(_OWORD *)&v509[168] = v537;
          switch((char)v530)
          {
            case 'c':
              if (!HIBYTE(v530))
              {
                if (!*(_DWORD *)&v532[18])
                {
                  sub_223771634((uint64_t)&v508, (uint64_t)&v517, (uint64_t)&v512);
                  *(_DWORD *)v509 = 5;
                  goto LABEL_523;
                }
                if (vabdd_f64(v523, v528) >= 50.0)
                {
                  v207 = v523 < v528;
                  goto LABEL_817;
                }
                *(_OWORD *)v543 = v522;
                sub_2233E5290((int64_t)v543);
                v540 = v527;
                sub_2233E5290((int64_t)&v540);
                v186 = *(_QWORD *)&v543[8];
                v187 = *(_QWORD *)v543 / *(uint64_t *)&v543[8];
                v188 = *(uint64_t *)v543 % *(_QWORD *)&v543[8];
                if (*(uint64_t *)v543 % *(_QWORD *)&v543[8] < 0)
                {
                  v189 = ((unint64_t)(*(_QWORD *)&v543[8] + v188) >> 63)
                       + (((*(_QWORD *)&v543[8] + v188) & ~((*(_QWORD *)&v543[8] + v188) >> 63))
                        - (((unint64_t)(*(_QWORD *)&v543[8] + v188) >> 63)
                         + *(_QWORD *)&v543[8]
                         + v188))
                       / *(_QWORD *)&v543[8]
                       + 1;
                  if (v189 < 4)
                    goto LABEL_988;
                  v188 += (v189 & 0xFFFFFFFFFFFFFFFCLL) * *(_QWORD *)&v543[8];
                  v190 = 0uLL;
                  v191 = (int64x2_t)(unint64_t)(*(_QWORD *)v543 / *(uint64_t *)&v543[8]);
                  v192 = v189 & 0xFFFFFFFFFFFFFFFCLL;
                  v193.i64[0] = -1;
                  v193.i64[1] = -1;
                  do
                  {
                    v191 = vaddq_s64(v191, v193);
                    v190 = vaddq_s64(v190, v193);
                    v192 -= 4;
                  }
                  while (v192);
                  v187 = vaddvq_s64(vaddq_s64(v190, v191));
                  if (v189 != (v189 & 0xFFFFFFFFFFFFFFFCLL))
                  {
LABEL_988:
                    do
                    {
                      v188 += *(_QWORD *)&v543[8];
                      --v187;
                    }
                    while (v188 < 0);
                  }
                }
                v194 = *((_QWORD *)&v540 + 1);
                v195 = (uint64_t)v540 / *((_QWORD *)&v540 + 1);
                v196 = (uint64_t)v540 % *((_QWORD *)&v540 + 1);
                if ((uint64_t)v540 % *((_QWORD *)&v540 + 1) < 0)
                {
                  v197 = ((unint64_t)(*((_QWORD *)&v540 + 1) + v196) >> 63)
                       + (((*((_QWORD *)&v540 + 1) + v196) & ~((*((_QWORD *)&v540 + 1) + v196) >> 63))
                        - (((unint64_t)(*((_QWORD *)&v540 + 1) + v196) >> 63)
                         + *((_QWORD *)&v540 + 1)
                         + v196))
                       / *((_QWORD *)&v540 + 1)
                       + 1;
                  if (v197 < 4)
                    goto LABEL_989;
                  v196 += (v197 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v540 + 1);
                  v198 = 0uLL;
                  v199 = (int64x2_t)(unint64_t)((uint64_t)v540 / *((_QWORD *)&v540 + 1));
                  v200 = v197 & 0xFFFFFFFFFFFFFFFCLL;
                  v201.i64[0] = -1;
                  v201.i64[1] = -1;
                  do
                  {
                    v199 = vaddq_s64(v199, v201);
                    v198 = vaddq_s64(v198, v201);
                    v200 -= 4;
                  }
                  while (v200);
                  v195 = vaddvq_s64(vaddq_s64(v198, v199));
                  if (v197 != (v197 & 0xFFFFFFFFFFFFFFFCLL))
                  {
LABEL_989:
                    do
                    {
                      v196 += *((_QWORD *)&v540 + 1);
                      --v195;
                    }
                    while (v196 < 0);
                  }
                }
                if (v187 != v195)
                {
                  v207 = v187 < v195;
                  goto LABEL_817;
                }
                v202 = 0;
                do
                {
                  v203 = v188;
                  v204 = v196;
                  v202 ^= 1u;
                  if (!v188 || !v196)
                  {
                    if (v188 == v196)
                      v207 = 0;
                    else
                      v207 = (v202 != 0) ^ (v188 != 0);
                    goto LABEL_817;
                  }
                  v205 = v186 / v188;
                  v188 = v186 % v188;
                  v206 = v194 / v196;
                  v196 = v194 % v196;
                  v194 = v204;
                  v186 = v203;
                }
                while (v205 == v206);
                v207 = v205 > v206;
                if (!v202)
                  v207 = v205 <= v206;
LABEL_817:
                *(_DWORD *)v509 = 5;
                v369 = &v517 + 2 * v207 + 1;
                if (v369 != (uint64_t *)&v508)
                  v508 = *(_OWORD *)v369;
                v370 = &v517 + 7 * v207;
                *(_QWORD *)&v509[88] = v370[7];
                *(_OWORD *)&v509[72] = *(_OWORD *)(v370 + 5);
                *(_OWORD *)&v509[152] = *((_OWORD *)v370 + 4);
                *(_QWORD *)&v509[168] = v370[10];
                v464 = *(_DWORD *)&v532[18];
                v371 = (uint64_t)v513;
                v373 = (uint64_t *)v513[2];
                v372 = (uint64_t *)v513[3];
                if (!*((_BYTE *)v513 + 176))
                {
                  sub_2237719C8((uint64_t)v513, *v372, v372[1], (uint64_t)(v513 + 4));
                  v374 = *(_OWORD **)(v371 + 32);
                  if ((_OWORD *)(v371 + 160) != v374)
                    *(_OWORD *)(v371 + 160) = *v374;
                  *(_BYTE *)(v371 + 176) = 1;
                }
                *(_QWORD *)v543 = 0x3FF0000000000000;
                v375 = sub_22376A6D8(*v373, v373[1], *v372, v372[1], *(_QWORD *)(v371 + 160), *(_QWORD *)(v371 + 168), (double *)v543);
                if (v375 == 0.0)
                {
LABEL_824:
                  v376 = 0;
                }
                else if ((*(_QWORD *)&v375 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                {
                  if (v375 > 0.0)
                    v376 = 1;
                  else
                    v376 = -1;
                }
                else
                {
                  v377 = fabs(v375);
                  if (v375 > 0.0)
                    v376 = 1;
                  else
                    v376 = -1;
                  if (v377 <= *(double *)v543 * 2.22044605e-16)
                    goto LABEL_824;
                }
                v378 = (uint64_t)v514;
                v379 = (uint64_t *)v514[2];
                v380 = (uint64_t *)v514[3];
                if (!*((_BYTE *)v514 + 176))
                {
                  sub_2237719C8((uint64_t)v514, *v380, v380[1], (uint64_t)(v514 + 4));
                  v381 = *(_OWORD **)(v378 + 32);
                  if ((_OWORD *)(v378 + 160) != v381)
                    *(_OWORD *)(v378 + 160) = *v381;
                  *(_BYTE *)(v378 + 176) = 1;
                }
                *(_QWORD *)v543 = 0x3FF0000000000000;
                v382 = sub_22376A6D8(*v379, v379[1], *v380, v380[1], *(_QWORD *)(v378 + 160), *(_QWORD *)(v378 + 168), (double *)v543);
                if (v382 == 0.0)
                {
LABEL_839:
                  v383 = 0;
                }
                else if ((*(_QWORD *)&v382 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                {
                  if (v382 > 0.0)
                    v383 = 1;
                  else
                    v383 = -1;
                }
                else
                {
                  v384 = fabs(v382);
                  if (v382 > 0.0)
                    v383 = 1;
                  else
                    v383 = -1;
                  if (v384 <= *(double *)v543 * 2.22044605e-16)
                    goto LABEL_839;
                }
                if (v464 == 1)
                  v385 = v376;
                else
                  v385 = v383;
                v386 = v385 * v464;
                if (v386 == 1)
                  v387 = 1;
                else
                  v387 = 2;
                if (v386 == 1)
                  v388 = 2;
                else
                  v388 = 1;
                v389 = v386 == 0;
                if (v386)
                  v390 = v387;
                else
                  v390 = 4;
                if (v389)
                  v391 = 4;
                else
                  v391 = v388;
                *(_DWORD *)&v509[24] = v390;
                *(_DWORD *)&v509[104] = v391;
                if (v376)
                {
                  v393 = *((_QWORD *)&v508 + 1);
                  v392 = v508;
                  v394 = (v508 - **((_QWORD **)&v503 + 1)) * (v508 - **((_QWORD **)&v503 + 1))
                       + (*((_QWORD *)&v508 + 1) - *(_QWORD *)(*((_QWORD *)&v503 + 1) + 8))
                       * (*((_QWORD *)&v508 + 1) - *(_QWORD *)(*((_QWORD *)&v503 + 1) + 8));
                }
                else
                {
                  if (!v507)
                  {
                    sub_2237719C8((uint64_t)v502, **((_QWORD **)&v503 + 1), *(_QWORD *)(*((_QWORD *)&v503 + 1) + 8), (uint64_t)v504);
                    if (&v506 != (__int128 *)v504[0])
                      v506 = *(_OWORD *)v504[0];
                    v507 = 1;
                  }
                  v393 = *((_QWORD *)&v508 + 1);
                  v392 = v508;
                  v394 = (v508 - v506) * (v508 - v506)
                       + (*((_QWORD *)&v508 + 1) - *((_QWORD *)&v506 + 1))
                       * (*((_QWORD *)&v508 + 1) - *((_QWORD *)&v506 + 1));
                }
                *(_QWORD *)&v509[96] = v394;
                if (v383)
                {
                  v395 = (v392 - *v497) * (v392 - *v497) + (v393 - v497[1]) * (v393 - v497[1]);
                }
                else
                {
                  if (!v501)
                  {
                    sub_2237719C8((uint64_t)v496, *v497, v497[1], (uint64_t)v498);
                    if (&v500 != (__int128 *)v498[0])
                      v500 = *(_OWORD *)v498[0];
                    v501 = 1;
                  }
                  v395 = (v392 - v500) * (v392 - v500)
                       + (v393 - *((_QWORD *)&v500 + 1)) * (v393 - *((_QWORD *)&v500 + 1));
                }
                v117 = a10;
                v255 = a10[1];
                v92 = a10[2] == v255;
                v396 = 20 * ((a10[2] - v255) >> 3) - 1;
                *(_QWORD *)&v509[176] = v395;
                if (v92)
                  v396 = 0;
                v257 = a10[5] + a10[4];
                if (v396 != v257)
                  goto LABEL_964;
                goto LABEL_963;
              }
              v544 = *(_OWORD *)&v509[4];
              v545 = *(_DWORD *)&v509[20];
              *(_OWORD *)&v543[32] = *(_OWORD *)&v509[60];
              *(_OWORD *)&v543[48] = *(_OWORD *)&v509[76];
              *(_DWORD *)&v543[64] = *(_DWORD *)&v509[92];
              *(_OWORD *)v543 = *(_OWORD *)&v509[28];
              *(_OWORD *)&v543[16] = *(_OWORD *)&v509[44];
              LODWORD(v542[2]) = *(_DWORD *)&v509[172];
              v542[0] = *(_OWORD *)&v509[140];
              v542[1] = *(_OWORD *)&v509[156];
              v540 = *(_OWORD *)&v509[108];
              v541 = *(_OWORD *)&v509[124];
              v455 = *(_QWORD *)&v509[96];
              v458 = *(_QWORD *)&v509[176];
              v164 = *(_DWORD *)&v532[22];
              if (*(_DWORD *)&v532[18] == 1)
              {
                v452 = *(_DWORD *)&v532[22];
                v165 = (uint64_t)v513;
                v167 = (uint64_t *)v513[2];
                v166 = (uint64_t *)v513[3];
                if (!*((_BYTE *)v513 + 176))
                {
                  sub_2237719C8((uint64_t)v513, *v166, v166[1], (uint64_t)(v513 + 4));
                  v168 = *(_OWORD **)(v165 + 32);
                  if ((_OWORD *)(v165 + 160) != v168)
                    *(_OWORD *)(v165 + 160) = *v168;
                  *(_BYTE *)(v165 + 176) = 1;
                }
                *(_QWORD *)&v535 = 0x3FF0000000000000;
                v169 = sub_22376A6D8(*v167, v167[1], *v166, v166[1], *(_QWORD *)(v165 + 160), *(_QWORD *)(v165 + 168), (double *)&v535);
                v164 = v452;
                a6 = v479;
                v23 = v477;
                v22 = v478;
                v26 = v476;
                v117 = a10;
                if (v169 != 0.0
                  && ((*(_QWORD *)&v169 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
                   || fabs(v169) > *(double *)&v535 * 2.22044605e-16))
                {
                  if (v169 <= 0.0)
                    v170 = 1;
                  else
                    v170 = 2;
                  v117 = a10;
                  v349 = a10[1];
                  v92 = a10[2] == v349;
                  v350 = 20 * ((a10[2] - v349) >> 3) - 1;
                  v535 = v519;
                  *(_OWORD *)&v543[44] = v525;
                  *(_QWORD *)&v543[60] = v526;
                  *(_OWORD *)((char *)v542 + 12) = v527;
                  *(double *)((char *)&v542[1] + 12) = v528;
                  if (v92)
                    v351 = 0;
                  else
                    v351 = v350;
                  v352 = a10[5] + a10[4];
                  if (v351 == v352)
                  {
                    sub_223773194(a10);
                    v117 = a10;
                    v349 = a10[1];
                    v352 = a10[5] + a10[4];
                    a6 = v479;
                    v23 = v477;
                    v22 = v478;
                    v26 = v476;
                  }
                  v353 = *(_QWORD *)(v349 + 8 * (v352 / 0x14)) + 200 * (v352 % 0x14);
                  *(_OWORD *)v353 = v535;
                  *(_DWORD *)(v353 + 16) = 5;
                  *(_OWORD *)(v353 + 20) = v544;
                  *(_DWORD *)(v353 + 36) = v545;
                  *(_DWORD *)(v353 + 40) = v170;
                  *(_OWORD *)(v353 + 60) = *(_OWORD *)&v543[16];
                  *(_OWORD *)(v353 + 76) = *(_OWORD *)&v543[32];
                  *(_OWORD *)(v353 + 92) = *(_OWORD *)&v543[48];
                  *(_DWORD *)(v353 + 108) = *(_DWORD *)&v543[64];
                  *(_OWORD *)(v353 + 44) = *(_OWORD *)v543;
                  *(_QWORD *)(v353 + 112) = v455;
                  *(_DWORD *)(v353 + 120) = 3;
                  *(_OWORD *)(v353 + 124) = v540;
                  *(_DWORD *)(v353 + 188) = v542[2];
                  *(_OWORD *)(v353 + 172) = v542[1];
                  *(_OWORD *)(v353 + 156) = v542[0];
                  *(_OWORD *)(v353 + 140) = v541;
                  *(_QWORD *)(v353 + 192) = v458;
                  ++v117[5];
                }
              }
              if (v164 == 1)
              {
                v354 = (uint64_t)v514;
                v356 = (uint64_t *)v514[2];
                v355 = (uint64_t *)v514[3];
                if (!*((_BYTE *)v514 + 176))
                {
                  sub_2237719C8((uint64_t)v514, *v355, v355[1], (uint64_t)(v514 + 4));
                  v357 = *(_OWORD **)(v354 + 32);
                  if ((_OWORD *)(v354 + 160) != v357)
                    *(_OWORD *)(v354 + 160) = *v357;
                  *(_BYTE *)(v354 + 176) = 1;
                }
                v536 = 1.0;
                v358 = sub_22376A6D8(*v356, v356[1], *v355, v355[1], *(_QWORD *)(v354 + 160), *(_QWORD *)(v354 + 168), &v536);
                a6 = v479;
                v23 = v477;
                v22 = v478;
                v26 = v476;
                v117 = a10;
                if (v358 != 0.0
                  && ((*(_QWORD *)&v358 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
                   || fabs(v358) > v536 * 2.22044605e-16))
                {
                  if (v358 <= 0.0)
                    v359 = 1;
                  else
                    v359 = 2;
                  v117 = a10;
                  v360 = a10[1];
                  v92 = a10[2] == v360;
                  v361 = 20 * ((a10[2] - v360) >> 3) - 1;
                  v535 = v518;
                  *(_OWORD *)&v543[44] = v520;
                  *(_QWORD *)&v543[60] = v521;
                  *(_OWORD *)((char *)v542 + 12) = v522;
                  *(double *)((char *)&v542[1] + 12) = v523;
                  if (v92)
                    v362 = 0;
                  else
                    v362 = v361;
                  v363 = a10[5] + a10[4];
                  if (v362 == v363)
                  {
                    sub_223773194(a10);
                    v117 = a10;
                    v360 = a10[1];
                    v363 = a10[5] + a10[4];
                    a6 = v479;
                    v23 = v477;
                    v22 = v478;
                    v26 = v476;
                  }
                  v364 = *(_QWORD *)(v360 + 8 * (v363 / 0x14)) + 200 * (v363 % 0x14);
                  *(_OWORD *)v364 = v535;
                  *(_DWORD *)(v364 + 16) = 5;
                  *(_OWORD *)(v364 + 20) = v544;
                  *(_DWORD *)(v364 + 36) = v545;
                  *(_DWORD *)(v364 + 40) = 3;
                  *(_OWORD *)(v364 + 60) = *(_OWORD *)&v543[16];
                  *(_OWORD *)(v364 + 76) = *(_OWORD *)&v543[32];
                  *(_OWORD *)(v364 + 92) = *(_OWORD *)&v543[48];
                  *(_DWORD *)(v364 + 108) = *(_DWORD *)&v543[64];
                  *(_OWORD *)(v364 + 44) = *(_OWORD *)v543;
                  *(_QWORD *)(v364 + 112) = v455;
                  *(_DWORD *)(v364 + 120) = v359;
                  *(_OWORD *)(v364 + 124) = v540;
                  *(_DWORD *)(v364 + 188) = v542[2];
                  *(_OWORD *)(v364 + 172) = v542[1];
                  *(_OWORD *)(v364 + 156) = v542[0];
                  *(_OWORD *)(v364 + 140) = v541;
                  *(_QWORD *)(v364 + 192) = v458;
                  goto LABEL_398;
                }
              }
              goto LABEL_273;
            case 'i':
              v171 = a10[1];
              v92 = a10[2] == v171;
              v172 = 20 * ((a10[2] - v171) >> 3) - 1;
              *(_DWORD *)v509 = 2;
              v508 = v518;
              *(_QWORD *)&v509[88] = v521;
              *(_OWORD *)&v509[72] = v520;
              *(double *)&v509[168] = v523;
              *(_OWORD *)&v509[152] = v522;
              if (v92)
                v173 = 0;
              else
                v173 = v172;
              v174 = *(_DWORD *)&v532[10] == 1;
              *(_DWORD *)&v509[80 * (*(_DWORD *)&v532[10] != 1) + 24] = 1;
              *(_DWORD *)&v509[80 * v174 + 24] = 2;
              v175 = a10[5] + a10[4];
              if (v173 == v175)
              {
                sub_223773194(a10);
                v117 = a10;
                v171 = a10[1];
                v175 = a10[5] + a10[4];
                a6 = v479;
                v23 = v477;
                v22 = v478;
                v26 = v476;
              }
              v176 = *(_QWORD *)(v171 + 8 * (v175 / 0x14)) + 200 * (v175 % 0x14);
              *(_OWORD *)v176 = v508;
              v177 = *(_OWORD *)&v509[112];
              v179 = *(_OWORD *)&v509[64];
              v178 = *(_OWORD *)&v509[80];
              *(_OWORD *)(v176 + 112) = *(_OWORD *)&v509[96];
              *(_OWORD *)(v176 + 128) = v177;
              *(_OWORD *)(v176 + 80) = v179;
              *(_OWORD *)(v176 + 96) = v178;
              v181 = *(_OWORD *)&v509[144];
              v180 = *(_OWORD *)&v509[160];
              v182 = *(_OWORD *)&v509[128];
              *(_QWORD *)(v176 + 192) = *(_QWORD *)&v509[176];
              *(_OWORD *)(v176 + 160) = v181;
              *(_OWORD *)(v176 + 176) = v180;
              *(_OWORD *)(v176 + 144) = v182;
              v183 = *(_OWORD *)v509;
              v184 = *(_OWORD *)&v509[16];
              v185 = *(_OWORD *)&v509[48];
              *(_OWORD *)(v176 + 48) = *(_OWORD *)&v509[32];
              *(_OWORD *)(v176 + 64) = v185;
              *(_OWORD *)(v176 + 16) = v183;
              *(_OWORD *)(v176 + 32) = v184;
LABEL_398:
              ++v117[5];
              goto LABEL_273;
            case 'm':
              *(_DWORD *)v509 = 4;
              v508 = v518;
              if (*(_DWORD *)&v532[22] == 1)
              {
                if (*(_DWORD *)&v532[18] == -1)
                {
                  *(_OWORD *)&v509[72] = xmmword_2245F5410;
                  *(_QWORD *)&v509[88] = 0;
                }
                else if (*(_DWORD *)&v532[18] == 1)
                {
                  *(int64x2_t *)&v509[72] = vdupq_n_s64(1uLL);
                  *(_QWORD *)&v509[88] = 0x412E848000000000;
                }
                else
                {
                  *(_OWORD *)&v509[72] = v520;
                  *(_QWORD *)&v509[88] = v521;
                }
                *(int64x2_t *)&v509[152] = vdupq_n_s64(1uLL);
                *(_QWORD *)&v509[168] = 0x412E848000000000;
                v239 = *(_DWORD *)&v532[10];
                v240 = (uint64_t)v514;
                v242 = (uint64_t *)v513[2];
                v241 = (uint64_t *)v513[3];
                if (!*((_BYTE *)v514 + 176))
                {
                  sub_2237719C8((uint64_t)v514, *(_QWORD *)v514[3], *(_QWORD *)(v514[3] + 8), (uint64_t)(v514 + 4));
                  v243 = *(_OWORD **)(v240 + 32);
                  if ((_OWORD *)(v240 + 160) != v243)
                    *(_OWORD *)(v240 + 160) = *v243;
                  *(_BYTE *)(v240 + 176) = 1;
                }
                *(_QWORD *)v543 = 0x3FF0000000000000;
                v244 = sub_22376A6D8(*v242, v242[1], *v241, v241[1], *(_QWORD *)(v240 + 160), *(_QWORD *)(v240 + 168), (double *)v543);
                if (v244 == 0.0)
                {
LABEL_498:
                  v245 = 0;
                }
                else if ((*(_QWORD *)&v244 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                {
                  if (v244 > 0.0)
                    v245 = 1;
                  else
                    v245 = -1;
                }
                else
                {
                  v246 = fabs(v244);
                  if (v244 > 0.0)
                    v245 = 1;
                  else
                    v245 = -1;
                  if (v246 <= *(double *)v543 * 2.22044605e-16)
                    goto LABEL_498;
                }
                if (!(v239 + v245))
                {
                  *(_DWORD *)&v509[80 * (v245 != -1) + 24] = 1;
                  *(_DWORD *)&v509[80 * (v245 == -1) + 24] = 2;
                  goto LABEL_891;
                }
                v460 = v239;
                v283 = (uint64_t)v514;
                v284 = (uint64_t *)v514[2];
                v285 = (uint64_t *)v514[3];
                if (!*((_BYTE *)v514 + 176))
                {
                  sub_2237719C8((uint64_t)v514, *v285, v285[1], (uint64_t)(v514 + 4));
                  v286 = *(_OWORD **)(v283 + 32);
                  if ((_OWORD *)(v283 + 160) != v286)
                    *(_OWORD *)(v283 + 160) = *v286;
                  *(_BYTE *)(v283 + 176) = 1;
                }
                *(_QWORD *)v543 = 0x3FF0000000000000;
                v287 = sub_22376A6D8(*v284, v284[1], *v285, v285[1], *(_QWORD *)(v283 + 160), *(_QWORD *)(v283 + 168), (double *)v543);
                if (v287 == 0.0)
                {
LABEL_620:
                  v288 = 0;
                }
                else if ((*(_QWORD *)&v287 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                {
                  if (v287 > 0.0)
                    v288 = 1;
                  else
                    v288 = -1;
                }
                else
                {
                  v295 = fabs(v287);
                  if (v287 > 0.0)
                    v288 = 1;
                  else
                    v288 = -1;
                  if (v295 <= *(double *)v543 * 2.22044605e-16)
                    goto LABEL_620;
                }
                v309 = (uint64_t)v514;
                v310 = (uint64_t *)v514[3];
                if (!*((_BYTE *)v514 + 176))
                {
                  sub_2237719C8((uint64_t)v514, *v310, v310[1], (uint64_t)(v514 + 4));
                  v311 = *(_OWORD **)(v309 + 32);
                  if ((_OWORD *)(v309 + 160) != v311)
                    *(_OWORD *)(v309 + 160) = *v311;
                  *(_BYTE *)(v309 + 176) = 1;
                }
                v312 = (uint64_t *)v513[3];
                *(_QWORD *)v543 = 0x3FF0000000000000;
                v313 = sub_22376A6D8(*v310, v310[1], *(_QWORD *)(v309 + 160), *(_QWORD *)(v309 + 168), *v312, v312[1], (double *)v543);
                if (v313 == 0.0)
                {
LABEL_692:
                  v314 = 0;
                }
                else if ((*(_QWORD *)&v313 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                {
                  if (v313 > 0.0)
                    v314 = 1;
                  else
                    v314 = -1;
                }
                else
                {
                  v315 = fabs(v313);
                  if (v313 > 0.0)
                    v314 = 1;
                  else
                    v314 = -1;
                  if (v315 <= *(double *)v543 * 2.22044605e-16)
                    goto LABEL_692;
                }
                if ((v245 & v460) == 0xFFFFFFFF && v288 == 1)
                {
                  *(_DWORD *)&v509[24] = 2;
                  *(_DWORD *)&v509[104] = 2;
                  v509[4] = 1;
                  goto LABEL_891;
                }
                if (v460 == 1 && v245 == 1 && v288 == -1)
                {
                  *(_DWORD *)&v509[24] = 1;
                  if (v314 == -1)
                    v323 = 1;
                  else
                    v323 = 3;
                  *(_DWORD *)&v509[104] = v323;
                  v509[4] = 1;
                  goto LABEL_891;
                }
                if (v460 != v245 || v460 != v288)
                {
                  if (v245)
                  {
                    *(_DWORD *)v509 = 8;
                  }
                  else if (v460 == v288)
                  {
                    *(_DWORD *)&v509[24] = 4;
                    *(_DWORD *)&v509[104] = 4;
                  }
                  else
                  {
                    if (v288 == 1)
                      v397 = 2;
                    else
                      v397 = 1;
                    *(_DWORD *)&v509[24] = v397;
                    *(_DWORD *)&v509[104] = 3;
                  }
LABEL_891:
                  v117 = a10;
                  v255 = a10[1];
                  if (a10[2] == v255)
                    v398 = 0;
                  else
                    v398 = 20 * ((a10[2] - v255) >> 3) - 1;
                  v257 = a10[5] + a10[4];
                  if (v398 != v257)
                    goto LABEL_964;
                  goto LABEL_963;
                }
                v324 = (v288 == 1) ^ (v314 == 0);
                if (v314 * v460 == -1)
                {
                  v326 = (uint64_t *)v513[2];
                  v325 = (uint64_t *)v513[3];
                  v327 = (uint64_t *)v514[3];
                  v328 = *v326;
                  v329 = v326[1];
                  v330 = *v325;
                  v331 = v325[1];
                  v332 = *v327;
                  v333 = v327[1];
                  *(_QWORD *)v543 = 0x3FF0000000000000;
                  v334 = sub_22376A6D8(v328, v329, v330, v331, v332, v333, (double *)v543);
                  if (v334 == 0.0)
                    goto LABEL_731;
                  if ((*(_QWORD *)&v334 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  {
                    if (v334 > 0.0)
                      v404 = 1;
                    else
                      v404 = -1;
                    v462 = v404;
                  }
                  else
                  {
                    v400 = fabs(v334);
                    if (v334 > 0.0)
                      v401 = 1;
                    else
                      v401 = -1;
                    v462 = v401;
                    if (v400 <= *(double *)v543 * 2.22044605e-16)
LABEL_731:
                      v462 = 0;
                  }
                  v405 = (uint64_t)v513;
                  v406 = (uint64_t *)v513[3];
                  if (!*((_BYTE *)v513 + 176))
                  {
                    sub_2237719C8((uint64_t)v513, *v406, v406[1], (uint64_t)(v513 + 4));
                    v407 = *(_OWORD **)(v405 + 32);
                    if ((_OWORD *)(v405 + 160) != v407)
                      *(_OWORD *)(v405 + 160) = *v407;
                    *(_BYTE *)(v405 + 176) = 1;
                  }
                  v408 = (uint64_t *)v514[3];
                  *(_QWORD *)v543 = 0x3FF0000000000000;
                  v409 = sub_22376A6D8(*v406, v406[1], *(_QWORD *)(v405 + 160), *(_QWORD *)(v405 + 168), *v408, v408[1], (double *)v543);
                  if (v409 == 0.0)
                  {
LABEL_921:
                    v410 = 0;
                  }
                  else if ((*(_QWORD *)&v409 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  {
                    if (v409 > 0.0)
                      v410 = 1;
                    else
                      v410 = -1;
                  }
                  else
                  {
                    v411 = fabs(v409);
                    if (v409 > 0.0)
                      v410 = 1;
                    else
                      v410 = -1;
                    if (v411 <= *(double *)v543 * 2.22044605e-16)
                      goto LABEL_921;
                  }
                  if (v410 * v462 == 1
                    && sub_2237730E8(*(_QWORD *)v513[3], *(_QWORD *)(v513[3] + 8), *(_QWORD *)v514[2], *(_QWORD *)(v514[2] + 8), *(_QWORD *)v514[3], *(_QWORD *)(v514[3] + 8))* v314 == -1)
                  {
                    v324 ^= 1u;
                  }
                }
                *(_DWORD *)&v509[80 * v324 + 24] = 1;
                *(_DWORD *)&v509[80 * (v324 ^ 1) + 24] = 2;
                v509[4] = 1;
                goto LABEL_891;
              }
              if (*(_DWORD *)&v532[18] == -1)
              {
                *(_OWORD *)&v509[72] = xmmword_2245F5410;
                *(_QWORD *)&v509[88] = 0;
              }
              else if (*(_DWORD *)&v532[18] == 1)
              {
                *(int64x2_t *)&v509[72] = vdupq_n_s64(1uLL);
                *(_QWORD *)&v509[88] = 0x412E848000000000;
              }
              else
              {
                *(_OWORD *)&v509[72] = v520;
                *(_QWORD *)&v509[88] = v521;
              }
              if (*(_DWORD *)&v532[22] == -1)
              {
                *(_OWORD *)&v509[152] = xmmword_2245F5410;
                *(_QWORD *)&v509[168] = 0;
              }
              else
              {
                *(_OWORD *)&v509[152] = v522;
                *(double *)&v509[168] = v523;
              }
              v247 = *(_DWORD *)&v532[2];
              v248 = (uint64_t)v516;
              v250 = (uint64_t *)v515[2];
              v249 = (uint64_t *)v515[3];
              if (!*((_BYTE *)v516 + 176))
              {
                sub_2237719C8((uint64_t)v516, *(_QWORD *)v516[3], *(_QWORD *)(v516[3] + 8), (uint64_t)(v516 + 4));
                v251 = *(_OWORD **)(v248 + 32);
                if ((_OWORD *)(v248 + 160) != v251)
                  *(_OWORD *)(v248 + 160) = *v251;
                *(_BYTE *)(v248 + 176) = 1;
              }
              *(_QWORD *)v543 = 0x3FF0000000000000;
              v252 = sub_22376A6D8(*v250, v250[1], *v249, v249[1], *(_QWORD *)(v248 + 160), *(_QWORD *)(v248 + 168), (double *)v543);
              v117 = a10;
              if (v252 == 0.0)
                goto LABEL_515;
              if ((*(_QWORD *)&v252 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              {
                if (v252 > 0.0)
                  v253 = 1;
                else
                  v253 = -1;
              }
              else
              {
                v254 = fabs(v252);
                if (v252 > 0.0)
                  v253 = 1;
                else
                  v253 = -1;
                if (v254 <= *(double *)v543 * 2.22044605e-16)
LABEL_515:
                  v253 = 0;
              }
              if (!(v247 + v253))
              {
                *(_DWORD *)&v509[80 * (v253 == -1) + 24] = 1;
                *(_DWORD *)&v509[80 * (v253 != -1) + 24] = 2;
                goto LABEL_959;
              }
              v461 = v247;
              v289 = (uint64_t)v516;
              v290 = (uint64_t *)v516[2];
              v291 = (uint64_t *)v516[3];
              if (!*((_BYTE *)v516 + 176))
              {
                sub_2237719C8((uint64_t)v516, *v291, v291[1], (uint64_t)(v516 + 4));
                v292 = *(_OWORD **)(v289 + 32);
                if ((_OWORD *)(v289 + 160) != v292)
                  *(_OWORD *)(v289 + 160) = *v292;
                *(_BYTE *)(v289 + 176) = 1;
              }
              *(_QWORD *)v543 = 0x3FF0000000000000;
              v293 = sub_22376A6D8(*v290, v290[1], *v291, v291[1], *(_QWORD *)(v289 + 160), *(_QWORD *)(v289 + 168), (double *)v543);
              if (v293 == 0.0)
                goto LABEL_631;
              if ((*(_QWORD *)&v293 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              {
                if (v293 > 0.0)
                  v294 = 1;
                else
                  v294 = -1;
              }
              else
              {
                v296 = fabs(v293);
                if (v293 > 0.0)
                  v294 = 1;
                else
                  v294 = -1;
                if (v296 <= *(double *)v543 * 2.22044605e-16)
LABEL_631:
                  v294 = 0;
              }
              v316 = (uint64_t)v516;
              v317 = (uint64_t *)v516[3];
              if (!*((_BYTE *)v516 + 176))
              {
                sub_2237719C8((uint64_t)v516, *v317, v317[1], (uint64_t)(v516 + 4));
                v318 = *(_OWORD **)(v316 + 32);
                if ((_OWORD *)(v316 + 160) != v318)
                  *(_OWORD *)(v316 + 160) = *v318;
                *(_BYTE *)(v316 + 176) = 1;
              }
              v319 = (uint64_t *)v515[3];
              *(_QWORD *)v543 = 0x3FF0000000000000;
              v320 = sub_22376A6D8(*v317, v317[1], *(_QWORD *)(v316 + 160), *(_QWORD *)(v316 + 168), *v319, v319[1], (double *)v543);
              if (v320 == 0.0)
                goto LABEL_707;
              if ((*(_QWORD *)&v320 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              {
                if (v320 > 0.0)
                  v321 = 1;
                else
                  v321 = -1;
              }
              else
              {
                v322 = fabs(v320);
                if (v320 > 0.0)
                  v321 = 1;
                else
                  v321 = -1;
                if (v322 <= *(double *)v543 * 2.22044605e-16)
LABEL_707:
                  v321 = 0;
              }
              if ((v253 & v461) != 0xFFFFFFFF || v294 != 1)
              {
                if (v461 == 1 && v253 == 1 && v294 == -1)
                {
                  if (v321 == -1)
                    v335 = 1;
                  else
                    v335 = 3;
                  *(_DWORD *)&v509[24] = v335;
                  *(_DWORD *)&v509[104] = 1;
                  v509[4] = 1;
                  goto LABEL_958;
                }
                if (v461 != v253 || v461 != v294)
                {
                  if (v253)
                  {
                    *(_DWORD *)v509 = 8;
                  }
                  else if (v461 == v294)
                  {
                    *(_DWORD *)&v509[24] = 4;
                    *(_DWORD *)&v509[104] = 4;
                  }
                  else
                  {
                    if (v294 == 1)
                      v399 = 2;
                    else
                      v399 = 1;
                    *(_DWORD *)&v509[104] = v399;
                    *(_DWORD *)&v509[24] = 3;
                  }
                  goto LABEL_958;
                }
                v336 = (v294 == 1) ^ (v321 != 0);
                if (v321 * v461 == -1)
                {
                  v338 = (uint64_t *)v515[2];
                  v337 = (uint64_t *)v515[3];
                  v339 = (uint64_t *)v516[3];
                  v340 = *v338;
                  v341 = v338[1];
                  v342 = *v337;
                  v343 = v337[1];
                  v344 = *v339;
                  v345 = v339[1];
                  *(_QWORD *)v543 = 0x3FF0000000000000;
                  v346 = sub_22376A6D8(v340, v341, v342, v343, v344, v345, (double *)v543);
                  if (v346 == 0.0)
                    goto LABEL_749;
                  if ((*(_QWORD *)&v346 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  {
                    if (v346 > 0.0)
                      v412 = 1;
                    else
                      v412 = -1;
                    v463 = v412;
                  }
                  else
                  {
                    v402 = fabs(v346);
                    if (v346 > 0.0)
                      v403 = 1;
                    else
                      v403 = -1;
                    v463 = v403;
                    if (v402 <= *(double *)v543 * 2.22044605e-16)
LABEL_749:
                      v463 = 0;
                  }
                  v413 = (uint64_t)v515;
                  v414 = (uint64_t *)v515[3];
                  if (!*((_BYTE *)v515 + 176))
                  {
                    sub_2237719C8((uint64_t)v515, *v414, v414[1], (uint64_t)(v515 + 4));
                    v415 = *(_OWORD **)(v413 + 32);
                    if ((_OWORD *)(v413 + 160) != v415)
                      *(_OWORD *)(v413 + 160) = *v415;
                    *(_BYTE *)(v413 + 176) = 1;
                  }
                  v416 = (uint64_t *)v516[3];
                  *(_QWORD *)v543 = 0x3FF0000000000000;
                  v417 = sub_22376A6D8(*v414, v414[1], *(_QWORD *)(v413 + 160), *(_QWORD *)(v413 + 168), *v416, v416[1], (double *)v543);
                  if (v417 == 0.0)
                  {
LABEL_937:
                    v418 = 0;
                  }
                  else if ((*(_QWORD *)&v417 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  {
                    if (v417 > 0.0)
                      v418 = 1;
                    else
                      v418 = -1;
                  }
                  else
                  {
                    v419 = fabs(v417);
                    if (v417 > 0.0)
                      v418 = 1;
                    else
                      v418 = -1;
                    if (v419 <= *(double *)v543 * 2.22044605e-16)
                      goto LABEL_937;
                  }
                  if (v418 * v463 == 1
                    && sub_2237730E8(*(_QWORD *)v515[3], *(_QWORD *)(v515[3] + 8), *(_QWORD *)v516[2], *(_QWORD *)(v516[2] + 8), *(_QWORD *)v516[3], *(_QWORD *)(v516[3] + 8))* v321 == -1)
                  {
                    v336 ^= 1u;
                  }
                }
                *(_DWORD *)&v509[80 * v336 + 24] = 1;
                *(_DWORD *)&v509[80 * (v336 ^ 1) + 24] = 2;
                v509[4] = 1;
                goto LABEL_958;
              }
              *(_DWORD *)&v509[24] = 2;
              *(_DWORD *)&v509[104] = 2;
              v509[4] = 1;
LABEL_958:
              v117 = a10;
LABEL_959:
              v255 = v117[1];
              if (v117[2] == v255)
                v420 = 0;
              else
                v420 = 20 * ((v117[2] - v255) >> 3) - 1;
              v257 = v117[5] + v117[4];
              if (v420 != v257)
                goto LABEL_964;
LABEL_963:
              sub_223773194(v117);
              v117 = a10;
              v255 = a10[1];
              v257 = a10[5] + a10[4];
LABEL_964:
              v421 = *(_QWORD *)(v255 + 8 * (v257 / 0x14)) + 200 * (v257 % 0x14);
              *(_OWORD *)v421 = v508;
              v422 = *(_OWORD *)&v509[112];
              v424 = *(_OWORD *)&v509[64];
              v423 = *(_OWORD *)&v509[80];
              *(_OWORD *)(v421 + 112) = *(_OWORD *)&v509[96];
              *(_OWORD *)(v421 + 128) = v422;
              *(_OWORD *)(v421 + 80) = v424;
              *(_OWORD *)(v421 + 96) = v423;
              v426 = *(_OWORD *)&v509[144];
              v425 = *(_OWORD *)&v509[160];
              v427 = *(_OWORD *)&v509[128];
              *(_QWORD *)(v421 + 192) = *(_QWORD *)&v509[176];
              *(_OWORD *)(v421 + 160) = v426;
              *(_OWORD *)(v421 + 176) = v425;
              *(_OWORD *)(v421 + 144) = v427;
              v428 = *(_OWORD *)v509;
              v429 = *(_OWORD *)&v509[16];
              v430 = *(_OWORD *)&v509[48];
              *(_OWORD *)(v421 + 48) = *(_OWORD *)&v509[32];
              *(_OWORD *)(v421 + 64) = v430;
              *(_OWORD *)(v421 + 16) = v428;
              *(_OWORD *)(v421 + 32) = v429;
              ++v117[5];
              a6 = v479;
              v23 = v477;
              v22 = v478;
              v26 = v476;
LABEL_273:
              v118 = v117[4];
              v119 = v117[1];
              v120 = v117[2];
              v121 = (_QWORD *)(v119 + 8 * (v118 / 0x14));
              if (v120 == v119)
              {
                v122 = 0;
                v123 = v482;
                if (!v482)
                {
LABEL_275:
                  if (v120 == v119)
                    goto LABEL_280;
                  goto LABEL_276;
                }
              }
              else
              {
                v122 = *v121 + 200 * (v118 % 0x14);
                v123 = v482;
                if (!v482)
                  goto LABEL_275;
              }
              v125 = v123 - 0x70A3D70A3D70A3D7 * ((uint64_t)(v122 - *v121) >> 3);
              if (v125 < 1)
              {
                v140 = 19 - v125;
                v121 -= v140 / 0x14;
                v122 = *v121 + 200 * (20 * (v140 / 0x14) - v140) + 3800;
                if (v120 == v119)
                {
LABEL_280:
                  v124 = 0;
                  goto LABEL_281;
                }
              }
              else
              {
                v121 += v125 / 0x14uLL;
                v122 = *v121 + 200 * (v125 % 0x14uLL);
                if (v120 == v119)
                  goto LABEL_280;
              }
LABEL_276:
              v124 = *(_QWORD *)(v119 + 8 * ((v117[5] + v118) / 0x14)) + 200 * ((v117[5] + v118) % 0x14);
LABEL_281:
              v59 = v475;
              v64 = v485;
              v74 = v484;
              v75 = v483;
              while (v122 != v124)
              {
                if (*(_QWORD *)(v122 + 56) == *(_QWORD *)(v122 + 136))
                {
                  if (*(_QWORD *)(v122 + 64) == *(_QWORD *)(v122 + 144)
                    || ((v126 = *(_DWORD *)(v122 + 16), v127 = *(_DWORD *)(v122 + 40), v126 == 4)
                      ? (v128 = v127 == 1)
                      : (v128 = 0),
                        !v128 && (v126 == 3 ? (v129 = v127 == 1) : (v129 = 0), !v129))
                    || *(_DWORD *)(v122 + 120) != 1)
                  {
LABEL_985:
                    result = 0;
                    *a11 = 1;
                    return result;
                  }
                }
                else
                {
                  v130 = *(_DWORD *)(v122 + 16);
                  v131 = *(_DWORD *)(v122 + 40);
                  v132 = v130 == 4 && v131 == 2;
                  if (v132 || ((v133 = v130 - 3) == 0 ? (v134 = v131 == 2) : (v134 = 0), v134))
                  {
                    if (*(_DWORD *)(v122 + 120) == 2)
                      goto LABEL_308;
                  }
                  else if (v133 > 1)
                  {
                    goto LABEL_985;
                  }
                  if (!*(_BYTE *)(v122 + 20))
                    goto LABEL_985;
                }
LABEL_308:
                v122 += 200;
                if (v122 - *v121 == 4000)
                {
                  v135 = v121[1];
                  ++v121;
                  v122 = v135;
                }
              }
              *a11 = 0;
              v76 = v481;
LABEL_311:
              v136 = v76 + 1;
              if (v76 + 1 >= v25)
              {
                v490 = v23;
                a1 = v467;
                a4 = v468;
                v38 = v470;
                a3 = v471;
                v41 = v469;
                if (v76 < v25)
                  v490 = &v22[2 * (v136 % v25)];
              }
              else
              {
                v490 += 2;
                a1 = v467;
                a4 = v468;
                v38 = v470;
                a3 = v471;
                v41 = v469;
              }
              if (v64 + 1 >= v25)
              {
                v489 = v23;
                v27 = v472;
                if (v64 < v25)
                  v489 = &v22[2 * ((v64 + 1) % v25)];
              }
              else
              {
                v489 += 2;
                v27 = v472;
              }
              v137 = v74 + 1;
              if (v74 + 1 >= v25)
              {
                v138 = v23;
                if (v74 < v25)
                  v138 = &v22[2 * (v137 % v25)];
              }
              else
              {
                v138 = v75 + 2;
              }
              ++v54;
              v139 = v486;
              if (!v74)
                v139 = v22;
              if (v137 == v26)
                v75 = v139;
              else
                v75 = v138;
              if (v137 == v26)
                v74 = v74 != 0;
              else
                ++v74;
              ++v58;
              v76 = v136;
              v92 = v64++ == v59;
              if (v92)
                break;
              continue;
            case 't':
              *(_DWORD *)v509 = 3;
              v508 = v518;
              if (*(_DWORD *)&v532[18] == -1)
              {
                *(_OWORD *)&v509[72] = xmmword_2245F5410;
                *(_QWORD *)&v509[88] = 0;
              }
              else if (*(_DWORD *)&v532[18] == 1)
              {
                *(int64x2_t *)&v509[72] = vdupq_n_s64(1uLL);
                *(_QWORD *)&v509[88] = 0x412E848000000000;
              }
              else
              {
                *(_OWORD *)&v509[72] = v520;
                *(_QWORD *)&v509[88] = v521;
              }
              if (*(_DWORD *)&v532[22] == 1)
              {
                *(int64x2_t *)&v509[152] = vdupq_n_s64(1uLL);
                *(_QWORD *)&v509[168] = 0x412E848000000000;
              }
              else if (*(_DWORD *)&v532[22] == -1)
              {
                *(_OWORD *)&v509[152] = xmmword_2245F5410;
                *(_QWORD *)&v509[168] = 0;
              }
              else
              {
                *(_OWORD *)&v509[152] = v522;
                *(double *)&v509[168] = v523;
              }
              v208 = (uint64_t)v513;
              v210 = (uint64_t *)v514[2];
              v209 = (uint64_t *)v514[3];
              if (!*((_BYTE *)v513 + 176))
              {
                sub_2237719C8((uint64_t)v513, *(_QWORD *)v513[3], *(_QWORD *)(v513[3] + 8), (uint64_t)(v513 + 4));
                v211 = *(_OWORD **)(v208 + 32);
                if ((_OWORD *)(v208 + 160) != v211)
                  *(_OWORD *)(v208 + 160) = *v211;
                *(_BYTE *)(v208 + 176) = 1;
              }
              *(_QWORD *)v543 = 0x3FF0000000000000;
              v212 = sub_22376A6D8(*v210, v210[1], *v209, v209[1], *(_QWORD *)(v208 + 160), *(_QWORD *)(v208 + 168), (double *)v543);
              if (v212 == 0.0)
                goto LABEL_442;
              if ((*(_QWORD *)&v212 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              {
                if (v212 > 0.0)
                  v214 = 1;
                else
                  v214 = -1;
              }
              else
              {
                v213 = fabs(v212);
                if (v212 > 0.0)
                  v214 = 1;
                else
                  v214 = -1;
                if (v213 <= *(double *)v543 * 2.22044605e-16)
                {
LABEL_442:
                  v456 = 0;
                  goto LABEL_453;
                }
              }
              v456 = v214;
LABEL_453:
              v215 = *(_DWORD *)&v532[10];
              v216 = (uint64_t)v514;
              v218 = (uint64_t *)v513[2];
              v217 = (uint64_t *)v513[3];
              if (!*((_BYTE *)v514 + 176))
              {
                sub_2237719C8((uint64_t)v514, *(_QWORD *)v514[3], *(_QWORD *)(v514[3] + 8), (uint64_t)(v514 + 4));
                v219 = *(_OWORD **)(v216 + 32);
                if ((_OWORD *)(v216 + 160) != v219)
                  *(_OWORD *)(v216 + 160) = *v219;
                *(_BYTE *)(v216 + 176) = 1;
              }
              *(_QWORD *)v543 = 0x3FF0000000000000;
              v220 = sub_22376A6D8(*v218, v218[1], *v217, v217[1], *(_QWORD *)(v216 + 160), *(_QWORD *)(v216 + 168), (double *)v543);
              if (v220 == 0.0)
                goto LABEL_458;
              if ((*(_QWORD *)&v220 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              {
                if (v220 > 0.0)
                  v221 = 1;
                else
                  v221 = -1;
              }
              else
              {
                v222 = fabs(v220);
                if (v220 > 0.0)
                  v221 = 1;
                else
                  v221 = -1;
                if (v222 <= *(double *)v543 * 2.22044605e-16)
LABEL_458:
                  v221 = 0;
              }
              v459 = v221;
              if (v221 * v215 == -1)
              {
                v229 = v215;
                v230 = (uint64_t)v513;
                v232 = (uint64_t *)v513[2];
                v231 = (uint64_t *)v513[3];
                if (!*((_BYTE *)v513 + 176))
                {
                  sub_2237719C8((uint64_t)v513, *v231, v231[1], (uint64_t)(v513 + 4));
                  v233 = *(_OWORD **)(v230 + 32);
                  if ((_OWORD *)(v230 + 160) != v233)
                    *(_OWORD *)(v230 + 160) = *v233;
                  *(_BYTE *)(v230 + 176) = 1;
                }
                *(_QWORD *)v543 = 0x3FF0000000000000;
                v234 = sub_22376A6D8(*v232, v232[1], *v231, v231[1], *(_QWORD *)(v230 + 160), *(_QWORD *)(v230 + 168), (double *)v543);
                v235 = v459;
                if (v234 == 0.0)
                {
LABEL_484:
                  v236 = 0;
                }
                else if ((*(_QWORD *)&v234 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                {
                  if (v234 > 0.0)
                    v236 = 1;
                  else
                    v236 = -1;
                }
                else
                {
                  v258 = fabs(v234);
                  if (v234 > 0.0)
                    v236 = 1;
                  else
                    v236 = -1;
                  if (v258 <= *(double *)v543 * 2.22044605e-16)
                    goto LABEL_484;
                }
                if (v236 != v229)
                  goto LABEL_669;
                if (v456)
                {
                  if (v456 == v459)
                  {
                    if (v459 == 1)
                      v301 = 1;
                    else
                      v301 = 2;
                    *(_DWORD *)&v509[24] = v301;
                    goto LABEL_802;
                  }
LABEL_669:
                  if (v236 == v459)
                  {
                    v302 = (uint64_t)v514;
                    v303 = (uint64_t *)v514[3];
                    if (!*((_BYTE *)v514 + 176))
                    {
                      sub_2237719C8((uint64_t)v514, *v303, v303[1], (uint64_t)(v514 + 4));
                      v304 = *(_OWORD **)(v302 + 32);
                      if ((_OWORD *)(v302 + 160) != v304)
                        *(_OWORD *)(v302 + 160) = *v304;
                      *(_BYTE *)(v302 + 176) = 1;
                    }
                    v305 = (uint64_t)v513;
                    if (!*((_BYTE *)v513 + 176))
                    {
                      sub_2237719C8((uint64_t)v513, *(_QWORD *)v513[3], *(_QWORD *)(v513[3] + 8), (uint64_t)(v513 + 4));
                      v306 = *(_OWORD **)(v305 + 32);
                      if ((_OWORD *)(v305 + 160) != v306)
                        *(_OWORD *)(v305 + 160) = *v306;
                      *(_BYTE *)(v305 + 176) = 1;
                    }
                    *(_QWORD *)v543 = 0x3FF0000000000000;
                    v307 = sub_22376A6D8(*v303, v303[1], *(_QWORD *)(v302 + 160), *(_QWORD *)(v302 + 168), *(_QWORD *)(v305 + 160), *(_QWORD *)(v305 + 168), (double *)v543);
                    if (v307 == 0.0)
                    {
LABEL_679:
                      v308 = 4;
                      *(_DWORD *)&v509[24] = 4;
                      goto LABEL_809;
                    }
                    if ((*(_QWORD *)&v307 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                    {
                      v348 = v307 > 0.0 ? 1 : -1;
                    }
                    else
                    {
                      v347 = fabs(v307);
                      if (v307 > 0.0)
                        v348 = 1;
                      else
                        v348 = -1;
                      if (v347 <= *(double *)v543 * 2.22044605e-16)
                        goto LABEL_679;
                    }
                    v235 = v459;
                    if (v348 == v459)
                    {
                      if (v459 == 1)
                        v366 = 1;
                      else
                        v366 = 2;
                      *(_DWORD *)&v509[24] = v366;
                      if (v459 == 1)
                        v301 = 2;
                      else
                        v301 = 1;
LABEL_802:
                      *(_DWORD *)&v509[104] = v301;
                      v509[4] = 1;
LABEL_810:
                      v117 = a10;
                      goto LABEL_811;
                    }
                  }
                  if (v235 == 1)
                    v367 = 2;
                  else
                    v367 = 1;
                  *(_DWORD *)&v509[24] = v367;
                  if (v235 == 1)
                    v308 = 1;
                  else
                    v308 = 2;
                }
                else
                {
                  *(_DWORD *)&v509[24] = 3;
                  if (v459 == 1)
                    v308 = 1;
                  else
                    v308 = 2;
                }
LABEL_809:
                *(_DWORD *)&v509[104] = v308;
                goto LABEL_810;
              }
              v223 = (uint64_t)v514;
              v224 = (uint64_t *)v514[3];
              if (!*((_BYTE *)v514 + 176))
              {
                sub_2237719C8((uint64_t)v514, *v224, v224[1], (uint64_t)(v514 + 4));
                v225 = *(_OWORD **)(v223 + 32);
                if ((_OWORD *)(v223 + 160) != v225)
                  *(_OWORD *)(v223 + 160) = *v225;
                *(_BYTE *)(v223 + 176) = 1;
              }
              v226 = (uint64_t)v513;
              if (!*((_BYTE *)v513 + 176))
              {
                sub_2237719C8((uint64_t)v513, *(_QWORD *)v513[3], *(_QWORD *)(v513[3] + 8), (uint64_t)(v513 + 4));
                v227 = *(_OWORD **)(v226 + 32);
                if ((_OWORD *)(v226 + 160) != v227)
                  *(_OWORD *)(v226 + 160) = *v227;
                *(_BYTE *)(v226 + 176) = 1;
              }
              *(_QWORD *)v543 = 0x3FF0000000000000;
              v228 = sub_22376A6D8(*v224, v224[1], *(_QWORD *)(v223 + 160), *(_QWORD *)(v223 + 168), *(_QWORD *)(v226 + 160), *(_QWORD *)(v226 + 168), (double *)v543);
              if (v228 == 0.0)
                goto LABEL_478;
              if ((*(_QWORD *)&v228 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              {
                if (v228 > 0.0)
                  v238 = 1;
                else
                  v238 = -1;
              }
              else
              {
                v237 = fabs(v228);
                if (v228 > 0.0)
                  v238 = 1;
                else
                  v238 = -1;
                if (v237 <= *(double *)v543 * 2.22044605e-16)
                {
LABEL_478:
                  v440 = 0;
                  goto LABEL_539;
                }
              }
              v440 = v238;
LABEL_539:
              v259 = (uint64_t)v513;
              v260 = (uint64_t *)v513[2];
              v261 = (uint64_t *)v513[3];
              if (!*((_BYTE *)v513 + 176))
              {
                sub_2237719C8((uint64_t)v513, *v261, v261[1], (uint64_t)(v513 + 4));
                v262 = *(_OWORD **)(v259 + 32);
                if ((_OWORD *)(v259 + 160) != v262)
                  *(_OWORD *)(v259 + 160) = *v262;
                *(_BYTE *)(v259 + 176) = 1;
              }
              *(_QWORD *)v543 = 0x3FF0000000000000;
              v263 = sub_22376A6D8(*v260, v260[1], *v261, v261[1], *(_QWORD *)(v259 + 160), *(_QWORD *)(v259 + 168), (double *)v543);
              v453 = v215;
              if (v263 != 0.0)
              {
                if ((*(_QWORD *)&v263 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                {
                  if (v263 > 0.0)
                    v264 = 1;
                  else
                    v264 = -1;
                  goto LABEL_554;
                }
                v265 = fabs(v263);
                if (v263 > 0.0)
                  v264 = 1;
                else
                  v264 = -1;
                if (v265 > *(double *)v543 * 2.22044605e-16)
                  goto LABEL_554;
              }
              v264 = 0;
LABEL_554:
              v266 = (uint64_t)v514;
              v268 = (uint64_t *)v514[2];
              v267 = (uint64_t *)v514[3];
              if (!*((_BYTE *)v514 + 176))
              {
                sub_2237719C8((uint64_t)v514, *v267, v267[1], (uint64_t)(v514 + 4));
                v269 = *(_OWORD **)(v266 + 32);
                if ((_OWORD *)(v266 + 160) != v269)
                  *(_OWORD *)(v266 + 160) = *v269;
                *(_BYTE *)(v266 + 176) = 1;
              }
              *(_QWORD *)v543 = 0x3FF0000000000000;
              v270 = sub_22376A6D8(*v268, v268[1], *v267, v267[1], *(_QWORD *)(v266 + 160), *(_QWORD *)(v266 + 168), (double *)v543);
              v117 = a10;
              if (v270 == 0.0)
                goto LABEL_559;
              if ((*(_QWORD *)&v270 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              {
                if (v270 > 0.0)
                  v271 = 1;
                else
                  v271 = -1;
                goto LABEL_569;
              }
              v272 = fabs(v270);
              v271 = v270 > 0.0 ? 1 : -1;
              if (v272 <= *(double *)v543 * 2.22044605e-16)
LABEL_559:
                v271 = 0;
LABEL_569:
              if (v459)
                v273 = 1;
              else
                v273 = v271 * v453 == 1;
              v274 = !v273;
              if (v264 != v453 && v264 != v459 && (v459 | v453 || v264 == -1))
              {
                if (v271 == 1)
                  v280 = 2;
                else
                  v280 = 1;
                *(_DWORD *)&v509[24] = v280;
                if (v459 == 1 || v453 == 1)
                  v282 = 1;
                else
                  v282 = 2;
                if (v274)
                  v282 = 3;
                *(_DWORD *)&v509[104] = v282;
                if ((v274 & 1) == 0)
                  v509[4] = 1;
              }
              else
              {
                if (v440)
                  v275 = 1;
                else
                  v275 = v274;
                if ((v275 & 1) == 0)
                {
                  *(_DWORD *)&v509[24] = 4;
                  *(_DWORD *)&v509[104] = 4;
                  goto LABEL_811;
                }
                if (v456)
                {
                  if (v456 != v440 || v271 * v456 == -1)
                  {
                    if (v440 + v271)
                    {
                      if (v456 != -v271)
                        goto LABEL_811;
                      if (v271 == 1)
                        v365 = 2;
                      else
                        v365 = 1;
                      *(_DWORD *)&v509[24] = v365;
                      *(_DWORD *)&v509[104] = v365;
                      if (!v274)
                      {
                        v509[4] = 1;
                        goto LABEL_810;
                      }
                      v308 = 3;
                      goto LABEL_809;
                    }
                    if (v271 == 1)
                      v299 = 2;
                    else
                      v299 = 1;
                    *(_DWORD *)&v509[24] = v299;
                    if (v271 == 1)
                      v300 = 1;
                    else
                      v300 = 2;
                    *(_DWORD *)&v509[104] = v300;
                    v509[4] = 1;
                  }
                  else
                  {
                    v276 = v271 == 1;
                    if (v271 == 1)
                      v277 = 1;
                    else
                      v277 = 2;
                    *(_DWORD *)&v509[24] = v277;
                    if (v276)
                      v278 = 2;
                    else
                      v278 = 1;
                    if (v274)
                      v279 = 3;
                    else
                      v279 = v278;
                    *(_DWORD *)&v509[104] = v279;
                  }
                }
                else
                {
                  *(_DWORD *)&v509[24] = 3;
                  if (v271 == 1)
                    v297 = 2;
                  else
                    v297 = 1;
                  if (v274)
                    v298 = 3;
                  else
                    v298 = v297;
                  *(_DWORD *)&v509[104] = v298;
                }
              }
LABEL_811:
              v255 = v117[1];
              if (v117[2] == v255)
                v368 = 0;
              else
                v368 = 20 * ((v117[2] - v255) >> 3) - 1;
              v257 = v117[5] + v117[4];
              if (v368 != v257)
                goto LABEL_964;
              goto LABEL_963;
            default:
              if (v530 != 101 || HIBYTE(v530))
                goto LABEL_273;
              sub_223771634((uint64_t)&v508, (uint64_t)&v517, (uint64_t)&v512);
LABEL_523:
              v117 = a10;
              v255 = a10[1];
              if (a10[2] == v255)
                v256 = 0;
              else
                v256 = 20 * ((a10[2] - v255) >> 3) - 1;
              v257 = a10[5] + a10[4];
              if (v256 == v257)
                goto LABEL_963;
              goto LABEL_964;
          }
          break;
        }
      }
      v50 = v474 + 1;
      if (v474 + 1 >= v18)
      {
        v16 = v447;
        v15 = v448;
        v29 = v447;
        v24 = v445;
        v19 = v446;
        v71 = v444;
        v51 = v443;
        if (v474 < v18)
          v29 = &v448[2 * (v50 % v18)];
      }
      else
      {
        v29 = v466 + 2;
        v16 = v447;
        v15 = v448;
        v24 = v445;
        v19 = v446;
        v71 = v444;
        v51 = v443;
      }
      if (v38 + 1 >= v18)
      {
        v41 = v16;
        if (v38 < v18)
          v41 = &v15[2 * ((v38 + 1) % v18)];
      }
      else
      {
        v41 += 2;
      }
      v431 = v488 + 1;
      if (v488 + 1 >= v18)
      {
        v432 = v16;
        if (v488 < v18)
          v432 = &v15[2 * (v431 % v18)];
      }
      else
      {
        v432 = v487 + 2;
      }
      ++v27;
      v433 = v449;
      if (!v488)
        v433 = v15;
      v434 = v431 == v19;
      if (v431 == v19)
        v431 = v488 != 0;
      v488 = v431;
      if (v434)
        v435 = v433;
      else
        v435 = v432;
      v487 = v435;
      ++v30;
      result = 1;
      v92 = v38++ == v71;
    }
    while (!v92);
  }
  return result;
}

void sub_223771634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  double v21;
  _OWORD *v22;
  double v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  double v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  double v33;
  int v34;
  double v35;
  int v36;
  BOOL v37;
  int v38;
  double v39;

  v6 = sub_2233E5070((double *)(a2 + 64), (double *)(a2 + 120));
  *(_DWORD *)(a1 + 16) = 6;
  v7 = (_OWORD *)(a2 + 16 * v6 + 8);
  if (v7 != (_OWORD *)a1)
    *(_OWORD *)a1 = *v7;
  v8 = a2 + 56 * v6;
  v9 = *(_OWORD *)(v8 + 40);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v8 + 56);
  *(_OWORD *)(a1 + 88) = v9;
  v10 = *(_OWORD *)(v8 + 64);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(v8 + 80);
  *(_OWORD *)(a1 + 168) = v10;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(uint64_t **)(v11 + 24);
  if (!*(_BYTE *)(v11 + 176))
  {
    sub_2237719C8(*(_QWORD *)(a3 + 16), *v12, v12[1], v11 + 32);
    v14 = *(_OWORD **)(v11 + 32);
    if ((_OWORD *)(v11 + 160) != v14)
      *(_OWORD *)(v11 + 160) = *v14;
    *(_BYTE *)(v11 + 176) = 1;
    v13 = *(_QWORD *)(a3 + 8);
    if (*(_BYTE *)(v13 + 176))
      goto LABEL_12;
    goto LABEL_9;
  }
  v13 = *(_QWORD *)(a3 + 8);
  if (!*(_BYTE *)(v13 + 176))
  {
LABEL_9:
    sub_2237719C8(v13, **(_QWORD **)(v13 + 24), *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8), v13 + 32);
    v15 = *(_OWORD **)(v13 + 32);
    if ((_OWORD *)(v13 + 160) != v15)
      *(_OWORD *)(v13 + 160) = *v15;
    *(_BYTE *)(v13 + 176) = 1;
  }
LABEL_12:
  v39 = 1.0;
  v16 = sub_22376A6D8(*v12, v12[1], *(_QWORD *)(v11 + 160), *(_QWORD *)(v11 + 168), *(_QWORD *)(v13 + 160), *(_QWORD *)(v13 + 168), &v39);
  if (v16 == 0.0)
    goto LABEL_13;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v16 > 0.0)
      v17 = 1;
    else
      v17 = -1;
    v18 = *(_QWORD *)(a3 + 8);
    v19 = *(uint64_t **)(v18 + 16);
    v20 = *(uint64_t **)(v18 + 24);
    if (!*(_BYTE *)(v18 + 176))
      goto LABEL_21;
    goto LABEL_28;
  }
  v21 = fabs(v16);
  v17 = v16 > 0.0 ? 1 : -1;
  if (v21 <= v39 * 2.22044605e-16)
  {
LABEL_13:
    v17 = 0;
    v18 = *(_QWORD *)(a3 + 8);
    v19 = *(uint64_t **)(v18 + 16);
    v20 = *(uint64_t **)(v18 + 24);
    if (!*(_BYTE *)(v18 + 176))
      goto LABEL_21;
  }
  else
  {
    v18 = *(_QWORD *)(a3 + 8);
    v19 = *(uint64_t **)(v18 + 16);
    v20 = *(uint64_t **)(v18 + 24);
    if (!*(_BYTE *)(v18 + 176))
    {
LABEL_21:
      sub_2237719C8(v18, *v20, v20[1], v18 + 32);
      v22 = *(_OWORD **)(v18 + 32);
      if ((_OWORD *)(v18 + 160) != v22)
        *(_OWORD *)(v18 + 160) = *v22;
      *(_BYTE *)(v18 + 176) = 1;
    }
  }
LABEL_28:
  v39 = 1.0;
  v23 = sub_22376A6D8(*v19, v19[1], *v20, v20[1], *(_QWORD *)(v18 + 160), *(_QWORD *)(v18 + 168), &v39);
  if (v23 == 0.0)
    goto LABEL_29;
  if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v23 > 0.0)
      v24 = 1;
    else
      v24 = -1;
    v32 = *(_QWORD *)(a3 + 8);
    v26 = *(_QWORD *)(a3 + 16);
    v28 = *(uint64_t **)(v32 + 16);
    v27 = *(uint64_t **)(v32 + 24);
    if (*(_BYTE *)(v26 + 176))
      goto LABEL_44;
    goto LABEL_37;
  }
  v29 = fabs(v23);
  v24 = v23 > 0.0 ? 1 : -1;
  if (v29 <= v39 * 2.22044605e-16)
  {
LABEL_29:
    v24 = 0;
    v25 = *(_QWORD *)(a3 + 8);
    v26 = *(_QWORD *)(a3 + 16);
    v28 = *(uint64_t **)(v25 + 16);
    v27 = *(uint64_t **)(v25 + 24);
    if (*(_BYTE *)(v26 + 176))
      goto LABEL_44;
  }
  else
  {
    v30 = *(_QWORD *)(a3 + 8);
    v26 = *(_QWORD *)(a3 + 16);
    v28 = *(uint64_t **)(v30 + 16);
    v27 = *(uint64_t **)(v30 + 24);
    if (*(_BYTE *)(v26 + 176))
      goto LABEL_44;
  }
LABEL_37:
  sub_2237719C8(v26, **(_QWORD **)(v26 + 24), *(_QWORD *)(*(_QWORD *)(v26 + 24) + 8), v26 + 32);
  v31 = *(_OWORD **)(v26 + 32);
  if ((_OWORD *)(v26 + 160) != v31)
    *(_OWORD *)(v26 + 160) = *v31;
  *(_BYTE *)(v26 + 176) = 1;
LABEL_44:
  v39 = 1.0;
  v33 = sub_22376A6D8(*v28, v28[1], *v27, v27[1], *(_QWORD *)(v26 + 160), *(_QWORD *)(v26 + 168), &v39);
  if (v33 == 0.0)
  {
LABEL_45:
    v34 = 0;
    goto LABEL_55;
  }
  if ((*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v35 = fabs(v33);
    if (v33 > 0.0)
      v34 = 1;
    else
      v34 = -1;
    if (v35 > v39 * 2.22044605e-16)
      goto LABEL_55;
    goto LABEL_45;
  }
  if (v33 > 0.0)
    v34 = 1;
  else
    v34 = -1;
LABEL_55:
  if (v17 || v24 != v34)
  {
    if (v34 * v24 == -1)
      v37 = v24 == -1;
    else
      v37 = v17 == -1;
    if (v37)
      v38 = 2;
    else
      v38 = 1;
    *(_DWORD *)(a1 + 40) = v38;
    if (v37)
      v36 = 1;
    else
      v36 = 2;
  }
  else
  {
    v36 = 4;
    *(_DWORD *)(a1 + 40) = 4;
  }
  *(_DWORD *)(a1 + 120) = v36;
}

uint64_t sub_2237719C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v4 = *(_QWORD **)a4;
  if (**(_QWORD **)a4 == a2 && *(_QWORD *)(*(_QWORD *)a4 + 8) == a3)
  {
    v6 = *(_QWORD *)(a4 + 112);
    v7 = (_OWORD *)(a4 + 40);
    if (*(_BYTE *)(a4 + 120))
    {
      v8 = -1;
      while (1)
      {
        if ((unint64_t)++v8 >= *(_QWORD *)(*(_QWORD *)result + 88))
          return result;
        v11 = *(_QWORD *)(a4 + 24);
        v10 = *(_QWORD *)(a4 + 32);
        v12 = v10 + 1;
        *(_QWORD *)(a4 + 32) = v10 + 1;
        if (v10 + 1 >= v11)
        {
          if (v10 >= v11)
          {
            v4 = *(_QWORD **)(a4 + 16);
            *(_QWORD *)a4 = v4;
            if (v12 != v6)
              goto LABEL_8;
          }
          else
          {
            v4 = (_QWORD *)(*(_QWORD *)(a4 + 8) + 16 * (v12 % v11));
            *(_QWORD *)a4 = v4;
            if (v12 != v6)
              goto LABEL_8;
          }
        }
        else
        {
          v4 += 2;
          *(_QWORD *)a4 = v4;
          if (v12 != v6)
            goto LABEL_8;
        }
        v13 = *(_OWORD *)(a4 + 56);
        *(_OWORD *)a4 = *v7;
        *(_OWORD *)(a4 + 16) = v13;
        v14 = *(_QWORD *)(a4 + 72);
        *(_QWORD *)(a4 + 32) = v14 + 1;
        v15 = *(_QWORD *)(a4 + 24);
        if (v14 + 1 >= v15)
        {
          if (v14 >= v15)
          {
            v4 = *(_QWORD **)(a4 + 16);
            *(_QWORD *)a4 = v4;
            if (v14 == v10)
            {
LABEL_28:
              v16 = *(_OWORD *)(a4 + 56);
              *(_OWORD *)a4 = *v7;
              *(_OWORD *)(a4 + 16) = v16;
              *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 72);
              v4 = *(_QWORD **)a4;
            }
          }
          else
          {
            v4 = (_QWORD *)(*(_QWORD *)(a4 + 8) + 16 * ((v14 + 1) % v15));
            *(_QWORD *)a4 = v4;
            if (v14 == v10)
              goto LABEL_28;
          }
        }
        else
        {
          v4 = (_QWORD *)(*(_QWORD *)a4 + 16);
          *(_QWORD *)a4 = v4;
          if (v14 == v10)
            goto LABEL_28;
        }
LABEL_8:
        if (*v4 != a2 || v4[1] != a3)
          return result;
      }
    }
    v17 = -1;
    do
    {
      if ((unint64_t)++v17 >= *(_QWORD *)(*(_QWORD *)result + 88))
        return result;
      v19 = *(_QWORD *)(a4 + 24);
      v20 = *(_QWORD *)(a4 + 32);
      v21 = v20 + 1;
      *(_QWORD *)(a4 + 32) = v20 + 1;
      if (v20 + 1 >= v19)
      {
        if (v20 >= v19)
        {
          v4 = *(_QWORD **)(a4 + 16);
          *(_QWORD *)a4 = v4;
          if (v21 == v6)
          {
LABEL_43:
            v22 = *(_OWORD *)(a4 + 56);
            *(_OWORD *)a4 = *v7;
            *(_OWORD *)(a4 + 16) = v22;
            *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 72);
            v4 = *(_QWORD **)a4;
          }
        }
        else
        {
          v4 = (_QWORD *)(*(_QWORD *)(a4 + 8) + 16 * (v21 % v19));
          *(_QWORD *)a4 = v4;
          if (v21 == v6)
            goto LABEL_43;
        }
      }
      else
      {
        v4 += 2;
        *(_QWORD *)a4 = v4;
        if (v21 == v6)
          goto LABEL_43;
      }
    }
    while (*v4 == a2 && v4[1] == a3);
  }
  return result;
}

__n128 sub_223771BA8(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  __n128 result;
  __int128 v16;
  unsigned __int8 v17;
  uint64_t v18;
  __int128 v19;
  unsigned __int8 v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _BYTE v38[42];
  __int128 v39;

  if (!a8)
  {
    if (!a9)
    {
      sub_223772164(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7);
      return result;
    }
    v12 = a6 - a4;
    v13 = a5 - a4;
    if (a5 - a4 < 0)
    {
      v12 = a4 - a6;
      v13 = a4 - a5;
    }
    else if (!v13)
    {
      v14 = 0.0;
      if (v12 < 0)
        goto LABEL_23;
LABEL_19:
      if (v12 <= v13)
      {
        v39 = 0uLL;
        v19 = **a3;
        v20 = atomic_load((unsigned __int8 *)&qword_25578BB30);
        if ((v20 & 1) == 0)
        {
          v36 = a1;
          v30 = v13;
          v32 = v12;
          v34 = v14;
          v28 = **a3;
          v25 = __cxa_guard_acquire(&qword_25578BB30);
          v19 = v28;
          v14 = v34;
          v13 = v30;
          v12 = v32;
          v26 = v25;
          a1 = v36;
          if (v26)
          {
            xmmword_25578BB18 = xmmword_2245F5410;
            qword_25578BB28 = 0;
            __cxa_guard_release(&qword_25578BB30);
            v19 = v28;
            v14 = v34;
            v13 = v30;
            v12 = v32;
            a1 = v36;
          }
        }
        v21 = qword_25578BB28;
        memset(&v38[2], 0, 40);
        *(_QWORD *)a1 = 1;
        *(_OWORD *)(a1 + 8) = v19;
        *(_OWORD *)(a1 + 24) = v37;
        *(_QWORD *)(a1 + 40) = v12;
        *(_QWORD *)(a1 + 48) = v13;
        *(double *)(a1 + 56) = v14;
        *(_OWORD *)(a1 + 64) = xmmword_25578BB18;
        *(_QWORD *)(a1 + 80) = v21;
        *(_BYTE *)(a1 + 88) = 1;
        *(_OWORD *)(a1 + 96) = xmmword_2245F5410;
        *(_OWORD *)(a1 + 112) = v39;
        *(_QWORD *)(a1 + 128) = 1;
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    v14 = (double)v12 * 1000000.0 / (double)v13;
    if (v12 < 0)
      goto LABEL_23;
    goto LABEL_19;
  }
  v9 = a4 - a6;
  v10 = a7 - a6;
  if (a7 - a6 < 0)
  {
    v9 = a6 - a4;
    v10 = a6 - a7;
LABEL_13:
    v11 = (double)v9 * 1000000.0 / (double)v10;
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_14;
LABEL_23:
    memset(&v38[2], 0, 32);
    *(_OWORD *)(a1 + 40) = xmmword_2245F5410;
    *(_OWORD *)(a1 + 96) = xmmword_2245F5410;
    v22 = *(_OWORD *)&v38[16];
    *(_OWORD *)(a1 + 154) = *(_OWORD *)v38;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)&v38[34] = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 72) = 1;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 128) = 1;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_WORD *)(a1 + 152) = 100;
    goto LABEL_24;
  }
  if (v10)
    goto LABEL_13;
  v11 = 0.0;
  if (v9 < 0)
    goto LABEL_23;
LABEL_14:
  if (v9 > v10)
    goto LABEL_23;
  v39 = 0uLL;
  v16 = **a2;
  v17 = atomic_load((unsigned __int8 *)&qword_25578BB30);
  if ((v17 & 1) == 0)
  {
    v35 = a1;
    v29 = v10;
    v31 = v9;
    v33 = v11;
    v27 = **a2;
    v23 = __cxa_guard_acquire(&qword_25578BB30);
    v16 = v27;
    v11 = v33;
    v10 = v29;
    v9 = v31;
    v24 = v23;
    a1 = v35;
    if (v24)
    {
      xmmword_25578BB18 = xmmword_2245F5410;
      qword_25578BB28 = 0;
      __cxa_guard_release(&qword_25578BB30);
      v16 = v27;
      v11 = v33;
      v10 = v29;
      v9 = v31;
      a1 = v35;
    }
  }
  v18 = qword_25578BB28;
  memset(&v38[2], 0, 40);
  *(_QWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = v16;
  *(_OWORD *)(a1 + 24) = v37;
  *(_OWORD *)(a1 + 40) = xmmword_25578BB18;
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(double *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = xmmword_2245F5410;
  *(_OWORD *)(a1 + 112) = v39;
  *(_QWORD *)(a1 + 128) = 1;
LABEL_22:
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 152) = 48;
  v22 = *(_OWORD *)&v38[16];
  *(_OWORD *)(a1 + 154) = *(_OWORD *)v38;
LABEL_24:
  *(_OWORD *)(a1 + 170) = v22;
  result = *(__n128 *)&v38[26];
  *(_OWORD *)(a1 + 180) = *(_OWORD *)&v38[26];
  return result;
}

__n128 sub_223771EF8(uint64_t a1, int *a2, double *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  int v35;
  __n128 result;
  BOOL v37;

  v6 = *a3;
  v5 = *((_QWORD *)a3 + 1);
  v7 = (double)(*(_QWORD *)&v6 * *(_QWORD *)&v6 + v5 * v5);
  v9 = *((_QWORD *)a3 + 2);
  v8 = *((_QWORD *)a3 + 3);
  v10 = v9 * v9 + v8 * v8;
  if (v7 >= (double)v10)
    v11 = (double)(*(_QWORD *)&v6 * *(_QWORD *)&v6 + v5 * v5);
  else
    v11 = (double)v10;
  if (v11 <= 0.0)
  {
    v22 = *((_QWORD *)a3 + 6);
    v12 = a3[9];
    goto LABEL_22;
  }
  v12 = a3[9];
  v13 = vabdd_f64(0.5, v12 / 1000000.0);
  v14 = v13 + v13;
  v15 = vabdd_f64(0.5, a3[6] / 1000000.0);
  v16 = v15 + v15;
  v17 = 1.0 - v7 / v11;
  v18 = 1.0 - (double)v10 / v11;
  if (v16 <= 1.0)
    v19 = v16 * 5.0;
  else
    v19 = 5.0;
  v20 = v17 + v19;
  if (v14 <= 1.0)
    v21 = v14 * 5.0;
  else
    v21 = 5.0;
  v22 = *((_QWORD *)a3 + 6);
  if (v20 > v18 + v21)
  {
LABEL_22:
    v27 = *((_QWORD *)a3 + 4);
    v28 = *((_QWORD *)a3 + 5);
    v25 = v27 * *(_QWORD *)&v6 / v28 + *a4;
    v26 = v27 * v5 / v28 + a4[1];
    v23 = *((_QWORD *)a3 + 7);
    v24 = *((_QWORD *)a3 + 8);
    v29 = *a2;
    v31 = a2[2];
    v30 = a2[3];
    if (!(*a2 | v31))
      goto LABEL_13;
    goto LABEL_23;
  }
  v23 = *((_QWORD *)a3 + 7);
  v24 = *((_QWORD *)a3 + 8);
  v25 = v23 * v9 / v24 + *a5;
  v26 = v23 * v8 / v24 + a5[1];
  v27 = *((_QWORD *)a3 + 4);
  v28 = *((_QWORD *)a3 + 5);
  v29 = *a2;
  v31 = a2[2];
  v30 = a2[3];
  if (!(*a2 | v31))
  {
LABEL_13:
    v31 = -1;
    if (v30 == 1)
      v32 = -1;
    else
      v32 = 1;
    if (v30 == 1)
      v33 = 1;
    else
      v33 = -1;
    v34 = 102;
LABEL_20:
    v29 = -1;
    goto LABEL_54;
  }
LABEL_23:
  v35 = a2[1];
  if (!(v35 | v30))
  {
    if (v31 == 1)
      v32 = -1;
    else
      v32 = 1;
    if (v31 == 1)
      v33 = 1;
    else
      v33 = -1;
    v31 = 1;
    v34 = 116;
    v29 = 1;
    goto LABEL_54;
  }
  if (!(v35 | v31))
  {
    if (v30 == 1)
      v32 = 1;
    else
      v32 = -1;
    v29 = -1;
    v31 = 1;
    goto LABEL_52;
  }
  if (!(v29 | v30))
  {
    if (v31 == 1)
      v32 = 1;
    else
      v32 = -1;
    v29 = 1;
    v31 = -1;
LABEL_52:
    v34 = 97;
    goto LABEL_53;
  }
  if (v31)
  {
    if (v29)
    {
      if (v30)
      {
        if (v35)
        {
          v31 = -1;
          if (v30 == 1)
            v32 = -1;
          else
            v32 = 1;
          if (v30 == 1)
            v33 = 1;
          else
            v33 = -1;
          v34 = 105;
          goto LABEL_20;
        }
        v29 = 0;
        if (v30 == 1)
          v32 = 1;
        else
          v32 = -1;
        v31 = 1;
      }
      else
      {
        v31 = 0;
        if (v35 == 1)
          v32 = 1;
        else
          v32 = -1;
        v29 = 1;
      }
      v34 = 109;
LABEL_53:
      v33 = v32;
      goto LABEL_54;
    }
    v37 = v30 == 1;
    v31 = -1;
    if (v30 == 1)
      v32 = -1;
    else
      v32 = 1;
  }
  else
  {
    v37 = v30 == 1;
    v29 = -1;
    if (v30 == 1)
      v32 = -1;
    else
      v32 = 1;
  }
  if (v37)
    v33 = v30;
  else
    v33 = -1;
  v34 = 115;
LABEL_54:
  *(_QWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = v25;
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 40) = v27;
  *(_QWORD *)(a1 + 48) = v28;
  *(_QWORD *)(a1 + 56) = v22;
  *(_QWORD *)(a1 + 64) = v23;
  *(_QWORD *)(a1 + 72) = v24;
  *(double *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = xmmword_2245F5410;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = v34;
  *(_BYTE *)(a1 + 153) = 0;
  *(_DWORD *)(a1 + 156) = v31;
  *(_DWORD *)(a1 + 160) = v29;
  *(_DWORD *)(a1 + 164) = v32;
  *(_DWORD *)(a1 + 168) = v33;
  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 172) = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 188) = v31;
  *(_DWORD *)(a1 + 192) = v29;
  return result;
}

void sub_223772164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  double *v27;
  uint64_t *v28;
  unsigned int v29;
  __int128 v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  _BYTE *v39;
  uint64_t v40;
  double v41;
  uint64_t *v42;
  unsigned __int8 v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned __int8 v46;
  _BYTE *v47;
  uint64_t v48;
  double v49;
  uint64_t *v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  unint64_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  unint64_t v66;
  unint64_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  unint64_t v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  _BOOL4 v84;
  int v85;
  _BOOL4 v86;
  int v87;
  BOOL v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  _BOOL4 v92;
  BOOL v93;
  _BOOL4 v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v100;
  _BOOL4 v101;
  _BOOL4 v102;
  char v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  double v142;
  double v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  double v178;
  uint64_t v179;
  double v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  _BYTE v184[56];
  __int128 v185;
  __int128 v186;
  char v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  char v191;
  _BYTE v192[40];
  double v193;
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  v8 = a5 - a4;
  v9 = a7 - a6;
  v10 = a4 - a6;
  if (a7 - a6 < 0)
  {
    v10 = a6 - a4;
    v14 = a6 - a7;
    v11 = (double)(a6 - a7);
    v12 = (double)(a6 - a4) * 1000000.0 / v11;
    v13 = a6 - a5;
  }
  else
  {
    if (!v9)
    {
      v14 = 0;
      v13 = a5 - a6;
      v12 = 0.0;
      v15 = 0.0;
      v16 = a6 - a4;
      v181 = a5 - a4;
      if ((v8 & 0x8000000000000000) == 0)
        goto LABEL_6;
LABEL_9:
      v16 = -v16;
      v17 = a4 - a5;
      v181 = a4 - a5;
      goto LABEL_10;
    }
    v11 = (double)v9;
    v12 = (double)v10 * 1000000.0 / (double)v9;
    v13 = a5 - a6;
    v14 = a7 - a6;
  }
  v15 = (double)v13 * 1000000.0 / v11;
  v16 = a6 - a4;
  v181 = a5 - a4;
  if (v8 < 0)
    goto LABEL_9;
LABEL_6:
  if (!v8)
  {
    v179 = 0;
    v180 = 0.0;
    v18 = a7 - a4;
    v178 = 0.0;
    if (a4 == a6)
      goto LABEL_17;
LABEL_26:
    if (a7 == a4)
    {
      v20 = 3;
      if (a5 == a6)
        goto LABEL_28;
LABEL_90:
      if (a5 == a7)
      {
        v21 = 3;
        if (a4 == a6)
          goto LABEL_92;
LABEL_106:
        if (a5 <= a4)
        {
          if (a6 <= a4)
          {
            if (a5 <= a6)
              v22 = 2;
            else
              v22 = 4;
            if (a7 != a4)
              goto LABEL_29;
LABEL_19:
            v23 = 1;
            v24 = v20 - 1;
            if (v20 != 1)
              goto LABEL_20;
LABEL_31:
            v10 = 0;
            v16 = 0;
            v12 = 0.0;
            v25 = 1;
            v181 = 1;
            v180 = 0.0;
            v26 = v21 - 1;
            if (v21 != 1)
              goto LABEL_32;
LABEL_24:
            v13 = 0;
            v27 = &v180;
            v28 = &v181;
            v15 = 0.0;
            v16 = v21;
LABEL_34:
            v14 = 1;
            *v28 = 1;
            *v27 = 1000000.0;
            goto LABEL_35;
          }
        }
        else if (a6 >= a4)
        {
          if (a5 >= a6)
            v22 = 2;
          else
            v22 = 4;
          if (a7 != a4)
            goto LABEL_29;
          goto LABEL_19;
        }
        v22 = 0;
        if (a7 != a4)
          goto LABEL_29;
        goto LABEL_19;
      }
      if (a7 <= a6)
      {
        if (a5 <= a6)
        {
          if (a5 >= a7)
            v21 = 2;
          else
            v21 = 4;
          if (a4 != a6)
            goto LABEL_106;
LABEL_92:
          v22 = 1;
          if (a7 != a4)
            goto LABEL_29;
          goto LABEL_19;
        }
      }
      else if (a5 >= a6)
      {
        if (a5 <= a7)
          v21 = 2;
        else
          v21 = 4;
        if (a4 != a6)
          goto LABEL_106;
        goto LABEL_92;
      }
      v21 = 0;
      if (a4 != a6)
        goto LABEL_106;
      goto LABEL_92;
    }
    if (a7 <= a6)
    {
      if (a4 <= a6)
      {
        if (a7 <= a4)
          v20 = 2;
        else
          v20 = 4;
        if (a5 != a6)
          goto LABEL_90;
LABEL_28:
        v22 = 3;
        v21 = 1;
        if (a7 != a4)
          goto LABEL_29;
        goto LABEL_19;
      }
    }
    else if (a4 >= a6)
    {
      if (a7 >= a4)
        v20 = 2;
      else
        v20 = 4;
      if (a5 != a6)
        goto LABEL_90;
      goto LABEL_28;
    }
    v20 = 0;
    if (a5 != a6)
      goto LABEL_90;
    goto LABEL_28;
  }
  v17 = a5 - a4;
LABEL_10:
  v180 = (double)v16 * 1000000.0 / (double)v17;
  if (v8 >= 0)
    v18 = a7 - a4;
  else
    v18 = a4 - a7;
  if (v8 >= 0)
    v19 = a5 - a4;
  else
    v19 = a4 - a5;
  v179 = v19;
  v178 = (double)v18 * 1000000.0 / (double)v19;
  if (a4 != a6)
    goto LABEL_26;
LABEL_17:
  v20 = 1;
  v21 = 1;
  v22 = 1;
  if (a5 != a4)
    goto LABEL_90;
  if (a7 == a4)
    goto LABEL_19;
LABEL_29:
  if (a7 == a5)
  {
    v23 = 3;
    v24 = v20 - 1;
    if (v20 == 1)
      goto LABEL_31;
    goto LABEL_20;
  }
  if (a5 > a4)
  {
    if (a7 >= a4)
    {
      if (a7 <= a5)
        v23 = 2;
      else
        v23 = 4;
      v24 = v20 - 1;
      if (v20 == 1)
        goto LABEL_31;
      goto LABEL_20;
    }
LABEL_102:
    v23 = 0;
    v24 = v20 - 1;
    if (v20 == 1)
      goto LABEL_31;
    goto LABEL_20;
  }
  if (a7 > a4)
    goto LABEL_102;
  if (a7 >= a5)
    v23 = 2;
  else
    v23 = 4;
  v24 = v20 - 1;
  if (v20 == 1)
    goto LABEL_31;
LABEL_20:
  if (v20 != 3)
  {
    v25 = v14;
    v26 = v21 - 1;
    if (v21 != 1)
      goto LABEL_32;
    goto LABEL_24;
  }
  v18 = 0;
  v10 = 1;
  v12 = 1000000.0;
  v25 = 1;
  v179 = 1;
  v178 = 0.0;
  v26 = v21 - 1;
  if (v21 == 1)
    goto LABEL_24;
LABEL_32:
  if (v21 == 3)
  {
    v27 = &v178;
    v28 = &v179;
    v13 = 1;
    v15 = 1000000.0;
    v18 = 1;
    goto LABEL_34;
  }
  if (!(v21 | v20) || v20 >= 4 && v21 >= 4)
  {
    memset(&v184[2], 0, 32);
    *(_OWORD *)(a1 + 40) = xmmword_2245F5410;
    *(_OWORD *)(a1 + 96) = xmmword_2245F5410;
    v61 = *(_OWORD *)&v184[16];
    *(_OWORD *)(a1 + 154) = *(_OWORD *)v184;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)&v184[34] = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 72) = 1;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 128) = 1;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_WORD *)(a1 + 152) = 100;
    *(_OWORD *)(a1 + 170) = v61;
    *(_OWORD *)(a1 + 180) = *(_OWORD *)&v184[26];
    return;
  }
LABEL_35:
  v29 = 0;
  v30 = xmmword_2245F5410;
  v31 = v8 <= 0;
  *(_OWORD *)&v184[40] = xmmword_2245F5410;
  if (v8)
    v32 = -1;
  else
    v32 = 0;
  if (v31)
    v33 = v32;
  else
    v33 = 1;
  if (v9)
    v34 = -1;
  else
    v34 = 0;
  *(_QWORD *)v184 = 0;
  v185 = 0uLL;
  if (v9 > 0)
    v35 = 1;
  else
    v35 = v34;
  v186 = 1uLL;
  v187 = 0;
  v188 = xmmword_2245F5410;
  v189 = 0uLL;
  v190 = 1uLL;
  v191 = 0;
  *(_OWORD *)v192 = xmmword_2245F5410;
  *(_OWORD *)&v192[16] = 0uLL;
  *(_QWORD *)&v192[32] = 1;
  v193 = 0.0;
  if (v24 > 2)
  {
    if (v22 != 2)
      goto LABEL_51;
  }
  else
  {
    *(_OWORD *)&v184[8] = *(_OWORD *)*(_QWORD *)a2;
    v36 = atomic_load((unsigned __int8 *)&qword_25578BB30);
    if ((v36 & 1) == 0)
    {
      v109 = a3;
      v110 = a2;
      v141 = v15;
      v129 = v12;
      v170 = v20;
      v174 = v22;
      v134 = v23;
      v157 = v33;
      v163 = v26;
      v151 = v35;
      v145 = v18;
      v137 = v13;
      v111 = __cxa_guard_acquire(&qword_25578BB30);
      v30 = xmmword_2245F5410;
      v13 = v137;
      v18 = v145;
      v35 = v151;
      v33 = v157;
      v26 = v163;
      v20 = v170;
      v22 = v174;
      v23 = v134;
      v12 = v129;
      v15 = v141;
      a2 = v110;
      a3 = v109;
      if (v111)
      {
        xmmword_25578BB18 = xmmword_2245F5410;
        qword_25578BB28 = 0;
        __cxa_guard_release(&qword_25578BB30);
        v30 = xmmword_2245F5410;
        v13 = v137;
        v18 = v145;
        v35 = v151;
        v33 = v157;
        v26 = v163;
        v20 = v170;
        v22 = v174;
        v23 = v134;
        v12 = v129;
        v15 = v141;
        a2 = v110;
        a3 = v109;
      }
    }
    *(_OWORD *)&v184[40] = xmmword_25578BB18;
    *(_QWORD *)&v185 = qword_25578BB28;
    v187 = 1;
    *((_QWORD *)&v185 + 1) = v10;
    *(_QWORD *)&v186 = v25;
    *((double *)&v186 + 1) = v12;
    v37 = atomic_load((unsigned __int8 *)&qword_25578BB30);
    if ((v37 & 1) == 0)
    {
      v112 = a3;
      v113 = a2;
      v142 = v15;
      v114 = v20;
      v135 = v23;
      v115 = v22;
      v158 = v33;
      v164 = v26;
      v152 = v35;
      v146 = v18;
      v138 = v13;
      v132 = v30;
      v116 = __cxa_guard_acquire(&qword_25578BB30);
      v30 = v132;
      v13 = v138;
      v18 = v146;
      v35 = v152;
      v33 = v158;
      v26 = v164;
      v22 = v115;
      v23 = v135;
      v20 = v114;
      v15 = v142;
      a2 = v113;
      a3 = v112;
      if (v116)
      {
        xmmword_25578BB18 = v132;
        qword_25578BB28 = 0;
        __cxa_guard_release(&qword_25578BB30);
        v30 = v132;
        v13 = v138;
        v18 = v146;
        v35 = v152;
        v33 = v158;
        v26 = v164;
        v22 = v115;
        v23 = v135;
        v20 = v114;
        v15 = v142;
        a2 = v113;
        a3 = v112;
      }
    }
    *(_OWORD *)v192 = xmmword_25578BB18;
    *(_QWORD *)&v192[16] = qword_25578BB28;
    v29 = 1;
    if (v22 != 2)
    {
LABEL_51:
      if (v26 > 2)
        goto LABEL_60;
      goto LABEL_56;
    }
  }
  *(_OWORD *)&v184[16 * v29 + 8] = *(_OWORD *)*(_QWORD *)a3;
  v38 = atomic_load((unsigned __int8 *)&qword_25578BB30);
  if ((v38 & 1) == 0)
  {
    v128 = a2;
    v130 = a3;
    v143 = v15;
    v171 = v20;
    v175 = v22;
    v136 = v23;
    v159 = v33;
    v165 = v26;
    v153 = v35;
    v147 = v18;
    v139 = v13;
    v133 = v30;
    v117 = __cxa_guard_acquire(&qword_25578BB30);
    v13 = v139;
    v18 = v147;
    v35 = v153;
    v33 = v159;
    v26 = v165;
    v20 = v171;
    v22 = v175;
    v23 = v136;
    v15 = v143;
    a2 = v128;
    a3 = v130;
    if (v117)
    {
      xmmword_25578BB18 = v133;
      qword_25578BB28 = 0;
      __cxa_guard_release(&qword_25578BB30);
      v13 = v139;
      v18 = v147;
      v35 = v153;
      v33 = v159;
      v26 = v165;
      v20 = v171;
      v22 = v175;
      v23 = v136;
      v15 = v143;
      a2 = v128;
      a3 = v130;
    }
  }
  v39 = &v184[56 * v29];
  v39[88] = 1;
  v40 = v181;
  *((_QWORD *)v39 + 5) = v16;
  *((_QWORD *)v39 + 6) = v40;
  v41 = v180;
  *((double *)v39 + 7) = v180;
  *((_OWORD *)v39 + 4) = xmmword_25578BB18;
  *((_QWORD *)v39 + 10) = qword_25578BB28;
  v42 = (uint64_t *)&v192[24 * v29];
  *v42 = v16;
  v42[1] = v40;
  ++v29;
  *((double *)v42 + 2) = v41;
  if (v26 <= 2)
  {
LABEL_56:
    if (v29 <= 1)
    {
      *(_OWORD *)&v184[16 * v29 + 8] = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v43 = atomic_load((unsigned __int8 *)&qword_25578BB50);
      if ((v43 & 1) == 0)
      {
        v131 = a3;
        v144 = v15;
        v172 = v20;
        v176 = v22;
        v118 = v23;
        v160 = v33;
        v166 = v26;
        v154 = v35;
        v148 = v18;
        v140 = v13;
        v119 = __cxa_guard_acquire(&qword_25578BB50);
        v13 = v140;
        v18 = v148;
        v35 = v154;
        v33 = v160;
        v26 = v166;
        v20 = v172;
        v22 = v176;
        v23 = v118;
        v15 = v144;
        a3 = v131;
        if (v119)
        {
          xmmword_25578BB38 = (__int128)vdupq_n_s64(1uLL);
          qword_25578BB48 = 0x412E848000000000;
          __cxa_guard_release(&qword_25578BB50);
          v13 = v140;
          v18 = v148;
          v35 = v154;
          v33 = v160;
          v26 = v166;
          v20 = v172;
          v22 = v176;
          v23 = v118;
          v15 = v144;
          a3 = v131;
        }
      }
      v44 = &v184[56 * v29];
      v44[88] = 1;
      *(_OWORD *)(v44 + 40) = xmmword_25578BB38;
      *((_QWORD *)v44 + 7) = qword_25578BB48;
      *((_QWORD *)v44 + 8) = v13;
      *((_QWORD *)v44 + 9) = v14;
      *((double *)v44 + 10) = v15;
      LOBYTE(v44) = atomic_load((unsigned __int8 *)&qword_25578BB50);
      if ((v44 & 1) == 0)
      {
        v120 = a3;
        v121 = v20;
        v122 = v23;
        v123 = v22;
        v161 = v33;
        v167 = v26;
        v155 = v35;
        v149 = v18;
        v124 = __cxa_guard_acquire(&qword_25578BB50);
        v18 = v149;
        v35 = v155;
        v33 = v161;
        v26 = v167;
        v22 = v123;
        v23 = v122;
        v20 = v121;
        a3 = v120;
        if (v124)
        {
          xmmword_25578BB38 = (__int128)vdupq_n_s64(1uLL);
          qword_25578BB48 = 0x412E848000000000;
          __cxa_guard_release(&qword_25578BB50);
          v18 = v149;
          v35 = v155;
          v33 = v161;
          v26 = v167;
          v22 = v123;
          v23 = v122;
          v20 = v121;
          a3 = v120;
        }
      }
      v45 = &v192[24 * v29];
      *(_OWORD *)v45 = xmmword_25578BB38;
      *((_QWORD *)v45 + 2) = qword_25578BB48;
      ++v29;
    }
  }
LABEL_60:
  if (v23 == 2 && v29 <= 1)
  {
    *(_OWORD *)&v184[16 * v29 + 8] = *(_OWORD *)*(_QWORD *)(a3 + 8);
    v46 = atomic_load((unsigned __int8 *)&qword_25578BB50);
    if ((v46 & 1) == 0)
    {
      v125 = v20;
      v126 = v23;
      v177 = v22;
      v162 = v33;
      v168 = v26;
      v156 = v35;
      v150 = v18;
      v127 = __cxa_guard_acquire(&qword_25578BB50);
      v18 = v150;
      v35 = v156;
      v33 = v162;
      v26 = v168;
      v22 = v177;
      v23 = v126;
      v20 = v125;
      if (v127)
      {
        xmmword_25578BB38 = (__int128)vdupq_n_s64(1uLL);
        qword_25578BB48 = 0x412E848000000000;
        __cxa_guard_release(&qword_25578BB50);
        v18 = v150;
        v35 = v156;
        v33 = v162;
        v26 = v168;
        v22 = v177;
        v23 = v126;
        v20 = v125;
      }
    }
    v47 = &v184[56 * v29];
    v47[88] = 1;
    v48 = v179;
    *((_QWORD *)v47 + 5) = v18;
    *((_QWORD *)v47 + 6) = v48;
    v49 = v178;
    *((double *)v47 + 7) = v178;
    *((_OWORD *)v47 + 4) = xmmword_25578BB38;
    *((_QWORD *)v47 + 10) = qword_25578BB48;
    v50 = (uint64_t *)&v192[24 * v29];
    *v50 = v18;
    v50[1] = v48;
    ++v29;
    *((double *)v50 + 2) = v49;
  }
  if (v29 != 2)
    goto LABEL_139;
  if (vabdd_f64(v193, *(double *)&v192[16]) >= 50.0)
  {
    if (v193 >= *(double *)&v192[16])
      goto LABEL_139;
    goto LABEL_138;
  }
  v51 = v35;
  v52 = v33;
  v53 = v26;
  v169 = v20;
  v173 = v22;
  v54 = v23;
  v183 = *(_OWORD *)&v192[24];
  sub_2233E5290((int64_t)&v183);
  v182 = *(_OWORD *)v192;
  sub_2233E5290((int64_t)&v182);
  v55 = *((_QWORD *)&v183 + 1);
  v56 = (uint64_t)v183 / *((_QWORD *)&v183 + 1);
  v57 = (uint64_t)v183 % *((_QWORD *)&v183 + 1);
  v58 = *((_QWORD *)&v182 + 1);
  v59 = (uint64_t)v182 / *((_QWORD *)&v182 + 1);
  v60 = (uint64_t)v182 % *((_QWORD *)&v182 + 1);
  if ((uint64_t)v183 % *((_QWORD *)&v183 + 1) < 0)
  {
    v62 = ((unint64_t)(*((_QWORD *)&v183 + 1) + v57) >> 63)
        + (((*((_QWORD *)&v183 + 1) + v57) & ~((*((_QWORD *)&v183 + 1) + v57) >> 63))
         - (((unint64_t)(*((_QWORD *)&v183 + 1) + v57) >> 63)
          + *((_QWORD *)&v183 + 1)
          + v57))
        / *((_QWORD *)&v183 + 1)
        + 1;
    v23 = v54;
    v26 = v53;
    v33 = v52;
    v35 = v51;
    if (v62 < 4)
      goto LABEL_231;
    v57 += (v62 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v183 + 1);
    v63 = 0uLL;
    v64 = (int64x2_t)(unint64_t)((uint64_t)v183 / *((_QWORD *)&v183 + 1));
    v65.i64[0] = -1;
    v65.i64[1] = -1;
    v66 = v62 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v64 = vaddq_s64(v64, v65);
      v63 = vaddq_s64(v63, v65);
      v66 -= 4;
    }
    while (v66);
    v56 = vaddvq_s64(vaddq_s64(v63, v64));
    if (v62 != (v62 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_231:
      do
      {
        v57 += *((_QWORD *)&v183 + 1);
        --v56;
      }
      while (v57 < 0);
    }
  }
  else
  {
    v23 = v54;
    v26 = v53;
    v33 = v52;
    v35 = v51;
  }
  if (v60 < 0)
  {
    v67 = ((unint64_t)(*((_QWORD *)&v182 + 1) + v60) >> 63)
        + (((*((_QWORD *)&v182 + 1) + v60) & ~((*((_QWORD *)&v182 + 1) + v60) >> 63))
         - (((unint64_t)(*((_QWORD *)&v182 + 1) + v60) >> 63)
          + *((_QWORD *)&v182 + 1)
          + v60))
        / *((_QWORD *)&v182 + 1)
        + 1;
    if (v67 < 4)
      goto LABEL_232;
    v60 += (v67 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v182 + 1);
    v68 = 0uLL;
    v69 = (int64x2_t)(unint64_t)((uint64_t)v182 / *((_QWORD *)&v182 + 1));
    v70.i64[0] = -1;
    v70.i64[1] = -1;
    v71 = v67 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v69 = vaddq_s64(v69, v70);
      v68 = vaddq_s64(v68, v70);
      v71 -= 4;
    }
    while (v71);
    v59 = vaddvq_s64(vaddq_s64(v68, v69));
    if (v67 != (v67 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_232:
      do
      {
        v60 += *((_QWORD *)&v182 + 1);
        --v59;
      }
      while (v60 < 0);
    }
  }
  v72 = v56 < v59;
  if (v56 == v59)
  {
    v73 = 0;
    while (1)
    {
      v74 = v57;
      v75 = v60;
      v73 ^= 1u;
      if (!v57 || !v60)
        break;
      v76 = v55 / v57;
      v57 = v55 % v57;
      v77 = v58 / v60;
      v60 = v58 % v60;
      v58 = v75;
      v55 = v74;
      if (v76 != v77)
      {
        v72 = v76 <= v77;
        if (!v73)
          goto LABEL_136;
        v20 = v169;
        v22 = v173;
        if (v72)
          goto LABEL_139;
        goto LABEL_138;
      }
    }
    if (v57 == v60)
    {
      v20 = v169;
      v22 = v173;
      goto LABEL_139;
    }
    v20 = v169;
    v22 = v173;
    if ((v73 != 0) != (v57 != 0))
      goto LABEL_138;
    goto LABEL_139;
  }
LABEL_136:
  v20 = v169;
  v22 = v173;
  if (v72)
  {
LABEL_138:
    v78 = v187;
    v80 = v185;
    v79 = v186;
    v81 = *(_OWORD *)&v184[40];
    *(_OWORD *)&v184[40] = v188;
    v185 = v189;
    v186 = v190;
    v187 = v191;
    v188 = v81;
    v189 = v80;
    v190 = v79;
    v191 = v78;
    v183 = *(_OWORD *)&v184[8];
    v82 = *(_OWORD *)&v184[8];
    *(_OWORD *)&v184[8] = *(_OWORD *)&v184[24];
    *(_OWORD *)&v184[24] = v82;
  }
LABEL_139:
  if ((v21 & 0xFFFFFFFD) == 1)
    v83 = 0;
  else
    v83 = -1;
  v84 = v20 - 4 < 0xFFFFFFFD;
  v85 = (v20 & 0xFFFFFFFD) != 1;
  v86 = (v20 & 0xFFFFFFFD) != 1 || v20 - 4 < 0xFFFFFFFD;
  if (v20 - 4 <= 0xFFFFFFFC)
    v85 = 0;
  if (v21 == 2)
    v83 = 1;
  else
    v85 = v20 - 4 < 0xFFFFFFFD;
  v87 = !v86;
  if ((v21 & 0xFFFFFFFD) == 1)
  {
    v85 = !v86;
    v88 = v26 >= 3;
  }
  else
  {
    v88 = 1;
  }
  memset(&v192[2], 0, 32);
  v89 = v23 & 0xFFFFFFFD;
  if (!v88)
    v87 = v85 + 1;
  v90 = v22 & 0xFFFFFFFD;
  v91 = v22 - 4;
  v92 = (v22 - 4) < 0xFFFFFFFD;
  v93 = v90 == 1;
  v94 = v90 != 1;
  v95 = !v93 || v92;
  if (v91 <= 0xFFFFFFFC)
    v94 = 0;
  v96 = v95 ^ 1;
  if (v23 != 2)
    v94 = v92;
  v97 = v23 - 1;
  if (v89 == 1)
    v98 = v96;
  else
    v98 = v94;
  if (v89 != 1 || v97 >= 3)
    v100 = v96;
  else
    v100 = v98 + 1;
  v101 = v85 == 0;
  if (v26 < 3)
    v101 = v84;
  v102 = v98 == 0;
  if (v97 < 3)
    v102 = v92;
  if (v87 == 1 && v100 == 1 && v101 && v102)
  {
    if (v33 == v35)
    {
      v103 = 97;
    }
    else if (v83)
    {
      v103 = 102;
    }
    else
    {
      v103 = 116;
    }
  }
  else
  {
    v103 = 99;
    if (v87 == 2 && v100 == 2)
      v103 = 101;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v184[8];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v184[24];
  v104 = v185;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v184[40];
  *(_OWORD *)(a1 + 56) = v104;
  *(_OWORD *)(a1 + 72) = v186;
  v105 = v190;
  v106 = v188;
  *(_OWORD *)(a1 + 112) = v189;
  *(_OWORD *)(a1 + 128) = v105;
  *(_OWORD *)(a1 + 96) = v106;
  v107 = *(_OWORD *)v192;
  *(_OWORD *)(a1 + 170) = *(_OWORD *)&v192[16];
  if (v89 == 1)
    v108 = 0;
  else
    v108 = -1;
  if (v23 == 2)
    v108 = 1;
  *(_QWORD *)a1 = v29;
  *(_BYTE *)(a1 + 88) = v187;
  *(_BYTE *)(a1 + 144) = v191;
  *(_BYTE *)(a1 + 152) = v103;
  *(_BYTE *)(a1 + 153) = v33 != v35;
  *(_WORD *)(a1 + 186) = *(_WORD *)&v192[32];
  *(_OWORD *)(a1 + 154) = v107;
  *(_DWORD *)(a1 + 188) = v83;
  *(_DWORD *)(a1 + 192) = v108;
}

uint64_t sub_2237730E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v9 = 1.0;
  v6 = sub_22376A6D8(a3, a4, a5, a6, a1, a2, &v9);
  if (v6 == 0.0)
    return 0;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v8 = fabs(v6);
    if (v6 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v8 <= v9 * 2.22044605e-16)
      return 0;
  }
  return result;
}

void sub_223773194(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x14;
  v4 = v2 - 20;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFA0uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_223174E94();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFA0uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_223174E94();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_223174E94();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_2237737FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223773818(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22377382C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223773844(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_22377385C(uint64_t **a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, __n128 a8)
{
  char *v10;
  uint64_t v11;
  char *v12;
  char **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char **v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  char *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t **v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int64_t v77;
  uint64_t **v78;
  int64_t v79;
  uint64_t v80;
  uint64_t *v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t **v86;
  uint64_t **v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t **v94;
  void *v95;
  int64_t v96;
  int64x2_t *v97;
  int64x2_t *v98;
  int8x16_t v99;
  int8x16_t v100;
  int64x2_t *v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int8x16_t v106;
  int8x16_t v107;
  unint64_t v108;
  uint64_t **v109;
  uint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  __int128 *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *i;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  BOOL v124;
  int v125;
  int64x2_t v128;
  int64x2_t v130;
  uint64_t v132;
  int64_t v134;
  int64_t v136;
  char v137[8];
  uint64_t v138;
  uint64_t **v139;
  uint64_t *v140;
  uint64_t v141;
  void *__p[2];
  uint64_t **v143;
  int64x2_t v144;
  int64x2_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  v140 = 0;
  v141 = 0;
  v139 = &v140;
  v10 = *(char **)(a4 + 8);
  if (v10 != *(char **)(a5 + 8))
  {
    v11 = *(_QWORD *)(a4 + 16);
    v12 = *(char **)(a4 + 32);
    v13 = *(char ***)a4;
    do
    {
      v14 = *((_QWORD *)v10 + 8);
      if (v14 == -1)
      {
        v19 = v140;
        v14 = *((_QWORD *)v10 + 18);
        v16 = &v140;
        v17 = &v140;
        if (v140)
        {
          while (1)
          {
            while (1)
            {
              v17 = (uint64_t **)v19;
              v20 = v19[4];
              if (v14 >= v20)
                break;
              v19 = *v17;
              v16 = v17;
              if (!*v17)
                goto LABEL_22;
            }
            if (v20 >= v14)
              goto LABEL_25;
            v19 = v17[1];
            if (!v19)
            {
              v16 = v17 + 1;
              break;
            }
          }
        }
      }
      else
      {
        if (*((_QWORD *)v10 + 18) != -1)
          goto LABEL_25;
        v15 = v140;
        v16 = &v140;
        v17 = &v140;
        if (v140)
        {
          while (1)
          {
            while (1)
            {
              v17 = (uint64_t **)v15;
              v18 = v15[4];
              if (v14 >= v18)
                break;
              v15 = *v17;
              v16 = v17;
              if (!*v17)
                goto LABEL_22;
            }
            if (v18 >= v14)
              goto LABEL_25;
            v15 = v17[1];
            if (!v15)
            {
              v16 = v17 + 1;
              break;
            }
          }
        }
      }
LABEL_22:
      v21 = (uint64_t *)operator new(0x28uLL);
      v21[4] = v14;
      *v21 = 0;
      v21[1] = 0;
      v21[2] = (uint64_t)v17;
      *v16 = v21;
      if (*v139)
      {
        v139 = (uint64_t **)*v139;
        v21 = *v16;
      }
      sub_2231A9A8C(v140, v21);
      ++v141;
LABEL_25:
      v10 += 200;
      v22 = *v13;
      if (v10 - *v13 != 4000)
        goto LABEL_27;
LABEL_26:
      v23 = v13[1];
      ++v13;
      v22 = v23;
      v10 = v23;
LABEL_27:
      while (v10 != v12)
      {
        if (*((_QWORD *)v10 + 7) == v11 && *((_QWORD *)v10 + 17) == v11)
          goto LABEL_4;
        v10 += 200;
        if (v10 - v22 == 4000)
          goto LABEL_26;
      }
      v10 = v12;
LABEL_4:
      ;
    }
    while (v10 != *(char **)(a5 + 8));
  }
  if (a1 == a2)
    goto LABEL_53;
  v25 = 0;
  v26 = a1;
  do
  {
    v27 = v140;
    if (!v140)
      goto LABEL_214;
    v28 = &v140;
    do
    {
      v29 = v27;
      v30 = v28;
      v31 = v27[4];
      v32 = (uint64_t **)(v27 + 1);
      if (v31 >= v25)
      {
        v32 = (uint64_t **)v29;
        v28 = (uint64_t **)v29;
      }
      v27 = *v32;
    }
    while (v27);
    if (v28 == &v140)
      goto LABEL_214;
    if (v31 < v25)
      v29 = (uint64_t *)v30;
    if (v25 < v29[4])
    {
LABEL_214:
      v34 = *a3;
      v33 = a3[1];
      v35 = v33 - *a3;
      if ((unint64_t)v35 < 0x30)
        goto LABEL_51;
      v36 = *v26;
      v37 = v35 >> 4;
      v38 = v33 == v34 ? 0 : v37 + 1;
      v144.i64[0] = a3[1];
      v144.i64[1] = v34;
      v145.i64[0] = v33;
      v145.i64[1] = v37;
      v146 = v38;
      v147 = v34;
      v148 = v34;
      v149 = v33;
      v150 = v37;
      v151 = 0;
      if ((sub_2237743EC(v36, (uint64_t **)&v144) & 0x80000000) != 0)
      {
LABEL_51:
        v39 = 0;
        *a6 = 30;
        goto LABEL_204;
      }
    }
    v26 += 3;
    ++v25;
  }
  while (v26 != a2);
  v10 = *(char **)(a5 + 8);
LABEL_53:
  v40 = *(char **)(a4 + 8);
  if (v40 != v10)
  {
    v41 = *(_QWORD *)(a4 + 16);
    v42 = *(char **)(a4 + 32);
    v43 = *(char ***)a4;
    do
    {
      v44 = v140;
      v45 = *((_QWORD *)v40 + 8);
      v46 = &v140;
      v47 = &v140;
      if (v140)
      {
        v48 = v140;
        while (1)
        {
          while (1)
          {
            v47 = (uint64_t **)v48;
            v49 = v48[4];
            if (v45 >= v49)
              break;
            v48 = *v47;
            v46 = v47;
            if (!*v47)
              goto LABEL_64;
          }
          if (v49 >= v45)
            break;
          v48 = v47[1];
          if (!v48)
          {
            v46 = v47 + 1;
            goto LABEL_64;
          }
        }
      }
      else
      {
LABEL_64:
        v50 = (uint64_t *)operator new(0x28uLL);
        v50[4] = v45;
        *v50 = 0;
        v50[1] = 0;
        v50[2] = (uint64_t)v47;
        *v46 = v50;
        if (*v139)
        {
          v139 = (uint64_t **)*v139;
          v50 = *v46;
        }
        sub_2231A9A8C(v140, v50);
        v44 = v140;
        ++v141;
      }
      v51 = *((_QWORD *)v40 + 18);
      v52 = &v140;
      v53 = &v140;
      if (v44)
      {
        while (1)
        {
          while (1)
          {
            v53 = (uint64_t **)v44;
            v54 = v44[4];
            if (v51 >= v54)
              break;
            v44 = *v53;
            v52 = v53;
            if (!*v53)
              goto LABEL_74;
          }
          if (v54 >= v51)
            break;
          v44 = v53[1];
          if (!v44)
          {
            v52 = v53 + 1;
            goto LABEL_74;
          }
        }
      }
      else
      {
LABEL_74:
        v55 = (uint64_t *)operator new(0x28uLL);
        v55[4] = v51;
        *v55 = 0;
        v55[1] = 0;
        v55[2] = (uint64_t)v53;
        *v52 = v55;
        if (*v139)
        {
          v139 = (uint64_t **)*v139;
          v55 = *v52;
        }
        sub_2231A9A8C(v140, v55);
        ++v141;
      }
      v40 += 200;
      v56 = *v43;
      if (v40 - *v43 != 4000)
        goto LABEL_79;
LABEL_78:
      v57 = v43[1];
      ++v43;
      v56 = v57;
      v40 = v57;
LABEL_79:
      while (v40 != v42)
      {
        if (*((_QWORD *)v40 + 7) == v41 && *((_QWORD *)v40 + 17) == v41)
          goto LABEL_56;
        v40 += 200;
        if (v40 - v56 == 4000)
          goto LABEL_78;
      }
      v40 = v42;
LABEL_56:
      ;
    }
    while (v40 != *(char **)(a5 + 8));
  }
  if (a1 != a2)
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    while (1)
    {
      v63 = v140;
      if (v140)
      {
        v64 = &v140;
        do
        {
          v65 = v63;
          v66 = v64;
          v67 = v63[4];
          v68 = (uint64_t **)(v63 + 1);
          if (v67 >= v62)
          {
            v68 = (uint64_t **)v65;
            v64 = (uint64_t **)v65;
          }
          v63 = *v68;
        }
        while (v63);
        if (v64 != &v140)
        {
          if (v67 < v62)
            v65 = (uint64_t *)v66;
          if (v62 >= v65[4])
            goto LABEL_89;
        }
      }
      if (v60 >= (uint64_t *)v59)
        break;
      *v60 = (uint64_t)a1;
      *(int64x2_t *)(v60 + 1) = v144;
      a8 = *(__n128 *)__p;
      *(_OWORD *)(v60 + 3) = *(_OWORD *)__p;
      *((_BYTE *)v60 + 40) = 0;
      v60 += 6;
LABEL_89:
      a1 += 3;
      ++v62;
      if (a1 == a2)
        goto LABEL_116;
    }
    v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (char *)v61) >> 4) + 1;
    if (v69 > 0x555555555555555)
      sub_22316E078();
    if (0x5555555555555556 * ((v59 - (char *)v61) >> 4) > v69)
      v69 = 0x5555555555555556 * ((v59 - (char *)v61) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v59 - (char *)v61) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v70 = 0x555555555555555;
    else
      v70 = v69;
    if (v70 > 0x555555555555555)
      sub_223174E94();
    v71 = (char *)operator new(48 * v70);
    v72 = &v71[16 * (((char *)v60 - (char *)v61) >> 4)];
    *(_QWORD *)v72 = a1;
    v72[40] = 0;
    if (v60 == v61)
    {
      v75 = &v71[16 * (((char *)v60 - (char *)v61) >> 4)];
      v59 = &v71[48 * v70];
      v60 = (uint64_t *)(v72 + 48);
      if (!v61)
        goto LABEL_112;
    }
    else
    {
      v73 = 0;
      do
      {
        v74 = &v72[v73 * 8];
        *((_QWORD *)v74 - 6) = v60[v73 - 6];
        *(_OWORD *)(v74 - 40) = *(_OWORD *)&v60[v73 - 5];
        a8 = *(__n128 *)&v60[v73 - 3];
        *(__n128 *)(v74 - 24) = a8;
        *(v74 - 8) = v60[v73 - 1];
        v73 -= 6;
      }
      while (&v60[v73] != v61);
      v75 = &v72[v73 * 8];
      v59 = &v71[48 * v70];
      v60 = (uint64_t *)(v72 + 48);
      if (!v61)
        goto LABEL_112;
    }
    operator delete(v61);
LABEL_112:
    v61 = (uint64_t *)v75;
    goto LABEL_89;
  }
  v60 = 0;
  v61 = 0;
LABEL_116:
  v137[0] = 0;
  v138 = a7;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (char *)v61) >> 4) <= 0x10)
  {
    if (v61 != v60)
    {
      v118 = v61;
      do
      {
        v119 = v118;
        v118 += 6;
        if (v118 != v60)
        {
          for (i = v118; i != v60; i += 6)
          {
            v121 = *v119;
            v122 = *i;
            strcpy(v144.i8, "FFFFFFFFF");
            sub_223777F30(v121, v122, (unsigned __int8 *)&v144, a7, a8);
            if (!v144.i8[9])
            {
              v123 = v144.u8[0] != 84 && v144.u8[0] - 48 >= 0xA;
              if (!v123 || (v144.u8[1] != 84 ? (v124 = v144.u8[1] - 48 > 9) : (v124 = 0), !v124))
              {
                v39 = 0;
                goto LABEL_206;
              }
              v39 = 0;
              v125 = 31;
              if (v144.u8[3] == 84 || v144.u8[3] - 48 < 0xA)
                goto LABEL_202;
            }
          }
        }
      }
      while (v118 != v60);
    }
    v39 = 1;
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v143 = 0;
    v76 = 0x7FFFFFFFFFFFFFFFLL;
    v77 = 0x8000000000000000;
    v128 = vdupq_n_s64(0x8000000000000000);
    v130 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v144 = v130;
    v145 = v128;
    if (v61 != v60)
    {
      v78 = 0;
      v79 = 0x8000000000000000;
      v80 = 0x7FFFFFFFFFFFFFFFLL;
      v81 = v61;
      while (*((_BYTE *)v81 + 40))
      {
        v82 = v81[1];
        if (v82 < v80)
          goto LABEL_122;
LABEL_123:
        if (v82 > v79)
        {
          v145.i64[0] = v82;
          v79 = v82;
          v83 = v81[2];
          if (v83 < v76)
            goto LABEL_133;
LABEL_125:
          if (v83 <= v77)
            goto LABEL_126;
LABEL_134:
          v145.i64[1] = v83;
          v77 = v83;
          v84 = v81[3];
          if (v84 < v80)
            goto LABEL_135;
LABEL_127:
          if (v84 <= v79)
            goto LABEL_128;
LABEL_136:
          v145.i64[0] = v84;
          v79 = v84;
          v85 = v81[4];
          if (v85 < v76)
            goto LABEL_137;
LABEL_129:
          if (v85 <= v77)
            goto LABEL_130;
LABEL_138:
          v145.i64[1] = v85;
          v77 = v85;
          v86 = v143;
          if (v78 >= v143)
            goto LABEL_139;
LABEL_119:
          *v78++ = v81;
          __p[1] = v78;
          v81 += 6;
          if (v81 == v60)
            goto LABEL_196;
        }
        else
        {
          v83 = v81[2];
          if (v83 >= v76)
            goto LABEL_125;
LABEL_133:
          v144.i64[1] = v83;
          v76 = v83;
          if (v83 > v77)
            goto LABEL_134;
LABEL_126:
          v84 = v81[3];
          if (v84 >= v80)
            goto LABEL_127;
LABEL_135:
          v144.i64[0] = v84;
          v80 = v84;
          if (v84 > v79)
            goto LABEL_136;
LABEL_128:
          v85 = v81[4];
          if (v85 >= v76)
            goto LABEL_129;
LABEL_137:
          v144.i64[1] = v85;
          v76 = v85;
          if (v85 > v77)
            goto LABEL_138;
LABEL_130:
          v86 = v143;
          if (v78 < v143)
            goto LABEL_119;
LABEL_139:
          v87 = (uint64_t **)__p[0];
          v88 = (char *)v78 - (char *)__p[0];
          v89 = ((char *)v78 - (char *)__p[0]) >> 3;
          v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 61)
            sub_22316E078();
          v91 = (char *)v86 - (char *)__p[0];
          if (v91 >> 2 > v90)
            v90 = v91 >> 2;
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
            v92 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v92 = v90;
          v134 = v79;
          v136 = v77;
          v132 = v80;
          if (v92)
          {
            if (v92 >> 61)
              sub_223174E94();
            v93 = operator new(8 * v92);
            v94 = (uint64_t **)&v93[8 * v89];
            *v94 = v81;
            v95 = v94 + 1;
            v96 = (char *)v78 - (char *)v87;
            if (v78 != v87)
            {
LABEL_158:
              v108 = v96 - 8;
              if (v108 < 0x168)
              {
                v109 = v78;
                goto LABEL_160;
              }
              v111 = ((char *)(v78 - 1) - (char *)v87) & 0xFFFFFFFFFFFFFFF8;
              if (&v93[v88 - 8 - v111] > &v93[v88 - 8])
              {
                v109 = v78;
                goto LABEL_160;
              }
              if ((uint64_t **)((char *)v78 - v111 - 8) > v78 - 1)
              {
                v109 = v78;
                goto LABEL_160;
              }
              if ((unint64_t)((char *)v78 - v93 - v88) < 0x20)
              {
                v109 = v78;
                goto LABEL_160;
              }
              v112 = (v108 >> 3) + 1;
              v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
              v109 = &v78[v113 / 0xFFFFFFFFFFFFFFF8];
              v94 = (uint64_t **)((char *)v94 - v113);
              v114 = &v93[8 * v89 - 16];
              v115 = (__int128 *)(v78 - 2);
              v116 = v112 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v117 = *v115;
                *(v114 - 1) = *(v115 - 1);
                *v114 = v117;
                v114 -= 2;
                v115 -= 2;
                v116 -= 4;
              }
              while (v116);
              if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_160:
                  v110 = *--v109;
                  *--v94 = v110;
                }
                while (v109 != v87);
              }
              v78 = (uint64_t **)__p[0];
              __p[0] = v94;
              v143 = (uint64_t **)&v93[8 * v92];
              if (!v78)
                goto LABEL_150;
LABEL_149:
              operator delete(v78);
              goto LABEL_150;
            }
          }
          else
          {
            v93 = 0;
            v94 = (uint64_t **)(8 * v89);
            *(_QWORD *)(8 * v89) = v81;
            v95 = (void *)(8 * v89 + 8);
            v96 = (char *)v78 - (char *)v87;
            if (v78 != v87)
              goto LABEL_158;
          }
          __p[0] = v94;
          v143 = (uint64_t **)&v93[8 * v92];
          if (v78)
            goto LABEL_149;
LABEL_150:
          v79 = v134;
          v77 = v136;
          v80 = v132;
          __p[1] = v95;
          v81 += 6;
          v78 = (uint64_t **)v95;
          if (v81 == v60)
            goto LABEL_196;
        }
      }
      v97 = *(int64x2_t **)*v81;
      v98 = *(int64x2_t **)(*v81 + 8);
      v100 = (int8x16_t)v128;
      v99 = (int8x16_t)v130;
      if (v97 != v98)
      {
        v102 = *v97;
        v101 = v97 + 1;
        v103 = v102;
        v99 = (int8x16_t)v102;
        if (v101 == v98)
        {
          v100 = (int8x16_t)v103;
        }
        else
        {
          v104 = v103;
          v100 = (int8x16_t)v103;
          do
          {
            v105 = *v101++;
            v106 = (int8x16_t)vcgtq_s64(v103, v105);
            v99 = vbslq_s8(v106, (int8x16_t)v105, v99);
            v103 = (int64x2_t)vbslq_s8(v106, (int8x16_t)v105, (int8x16_t)v103);
            v107 = (int8x16_t)vcgtq_s64(v105, v104);
            v100 = vbslq_s8(v107, (int8x16_t)v105, v100);
            v104 = (int64x2_t)vbslq_s8(v107, (int8x16_t)v105, (int8x16_t)v104);
          }
          while (v101 != v98);
        }
      }
      *(int8x16_t *)(v81 + 1) = v99;
      *(int8x16_t *)(v81 + 3) = v100;
      v82 = v99.i64[0];
      *((_BYTE *)v81 + 40) = 1;
      if (v99.i64[0] >= v80)
        goto LABEL_123;
LABEL_122:
      v144.i64[0] = v82;
      v80 = v82;
      goto LABEL_123;
    }
LABEL_196:
    sub_2237746C8((uint64_t)&v144, (uint64_t **)__p, 0, (uint64_t)v137);
    if (__p[0])
      operator delete(__p[0]);
    v39 = v137[0] == 0;
    if (v137[0])
    {
LABEL_206:
      *a6 = 31;
      if (!v61)
        goto LABEL_204;
      goto LABEL_203;
    }
  }
  v125 = 0;
LABEL_202:
  *a6 = v125;
  if (v61)
LABEL_203:
    operator delete(v61);
LABEL_204:
  sub_223198030((uint64_t)&v139, v140);
  return v39;
}

void sub_22377433C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  void *v25;

  if (v25)
  {
    operator delete(v25);
    if (!v24)
    {
LABEL_3:
      sub_223198030((uint64_t)&a21, a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_3;
  }
  operator delete(v24);
  sub_223198030((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void sub_2237743D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22)
{
  sub_223198030((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

uint64_t sub_2237743EC(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  double v32;
  double v33;
  int v34;
  uint64_t *v36;
  int v37;
  double v38;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = (uint64_t)a2[3];
  v7 = (uint64_t)a2[4];
  v8 = a2[9];
  v9 = v7 - 1;
  if (v7 >= v6)
  {
    v10 = a2[2];
    if (v9 <= v6)
      v10 = &v3[2 * (v9 % v6)];
  }
  else
  {
    v10 = v4 - 2;
  }
  v11 = 1;
  if ((uint64_t *)v9 == v8)
    goto LABEL_6;
  v13 = 0;
  v36 = a2[1];
  while (1)
  {
    if (v9 + 1 >= v6)
    {
      v14 = v5;
      if (v9 <= v6)
        v14 = &v3[2 * (v9 % v6)];
    }
    else
    {
      v14 = v4 - 2;
    }
    v15 = v9 - 1;
    if (v9 >= v6)
    {
      v16 = v5;
      if (v15 <= v6)
        v16 = &v3[2 * (v15 % v6)];
    }
    else
    {
      v16 = v10 - 2;
    }
    v17 = *a1;
    v18 = *v14;
    v19 = *v16;
    if (*v14 == *a1 && v19 == v17)
    {
      v20 = a1[1];
      v21 = v14[1];
      v22 = v16[1];
      if (v21 <= v20 && v22 >= v20 || v21 >= v20 && v22 <= v20)
      {
        v11 = 0;
        if (!v13)
          goto LABEL_6;
LABEL_76:
        v12 = 1;
        goto LABEL_77;
      }
      goto LABEL_66;
    }
    if (v18 == v17)
    {
      if (v19 > v17)
        v23 = 1;
      else
        v23 = -1;
      v24 = a1[1];
      v25 = v14[1];
      v26 = v24 == v25;
      if (v24 >= v25)
        v27 = v23;
      else
        v27 = -v23;
      if (v26)
        goto LABEL_80;
      goto LABEL_62;
    }
    if (v19 == v17)
    {
      if (v18 > v17)
        v23 = -1;
      else
        v23 = 1;
      v28 = v16;
      v29 = a1[1];
      v30 = v28[1];
      v31 = v29 == v30;
      if (v29 >= v30)
        v27 = v23;
      else
        v27 = -v23;
      if (v31)
        goto LABEL_80;
      goto LABEL_62;
    }
    if (v18 < v17 && v19 > v17)
    {
      v37 = v13;
      v23 = 2;
      goto LABEL_51;
    }
    if (v18 > v17 && v19 < v17)
      break;
LABEL_66:
    if (v9 + 1 >= v6)
    {
      v4 = v5;
      if (v9 <= v6)
        v4 = &v3[2 * (v9 % v6)];
    }
    else
    {
      v4 -= 2;
    }
    if (v9 < v6)
    {
      v10 -= 2;
    }
    else
    {
      v10 = v5;
      if (v15 <= v6)
        v10 = &v3[2 * (v15 % v6)];
    }
    --v9;
    if (v8 == (uint64_t *)v15)
    {
      v11 = 1;
      if (!v13)
        goto LABEL_6;
      goto LABEL_76;
    }
  }
  v37 = v13;
  v23 = -2;
LABEL_51:
  v38 = 1.0;
  v32 = sub_22376A6D8(v18, v14[1], v19, v16[1], v17, a1[1], &v38);
  v13 = v37;
  if (v32 == 0.0)
    goto LABEL_80;
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v27 = 1;
    else
      v27 = -1;
LABEL_61:
    v3 = v36;
LABEL_62:
    if (v23 * v27 <= 0)
      v34 = 0;
    else
      v34 = v23;
    v13 += v34;
    goto LABEL_66;
  }
  v33 = fabs(v32);
  if (v32 > 0.0)
    v27 = 1;
  else
    v27 = -1;
  if (v33 > v38 * 2.22044605e-16)
    goto LABEL_61;
LABEL_80:
  v11 = 0;
LABEL_6:
  v12 = -1;
LABEL_77:
  if (v11)
    return v12;
  else
    return 0;
}

uint64_t sub_2237746C8(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 v20;
  int64_t v21;
  int64x2_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t *v31;
  int64x2_t *v32;
  int8x16_t v33;
  int8x16_t v34;
  int64x2_t *v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int8x16_t v40;
  int8x16_t v41;
  __n128 v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t **v56;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t **v63;
  uint64_t **v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  void *__p;
  uint64_t **v78;
  uint64_t v79;
  void *v80;
  uint64_t **v81;
  uint64_t v82;
  __int128 v83[2];
  __int128 v84;
  __int128 v85;
  __n128 v86;
  int64x2_t v87;
  char v88[16];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a1;
  v8 = (__int128 *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  if (&v84 != (__int128 *)a1)
  {
    v9 = *v8;
    v84 = *(_OWORD *)a1;
    v85 = v9;
  }
  if (v83 != (__int128 *)a1)
  {
    v10 = *v8;
    v83[0] = *(_OWORD *)a1;
    v83[1] = v10;
  }
  if (v7 >= 0)
    v11 = v7;
  else
    v11 = v7 + 1;
  v12 = v11 >> 1;
  if (v6 >= 0)
    v13 = v6;
  else
    v13 = v6 + 1;
  v14 = v13 >> 1;
  v15 = v7 - 2 * v12 + v6 - 2 * v14;
  *(_QWORD *)&v85 = v12 + v14 + ((v15 + ((v15 & 0x80) >> 7)) << 24 >> 25);
  v82 = 0;
  *(_QWORD *)&v83[0] = v85;
  v80 = 0;
  v81 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  sub_223774D90(&v84, v83, a2, (char **)&v80, (char **)&__p, (char **)&v74);
  v17 = v74;
  v18 = v75;
  if (v74 == v75)
    goto LABEL_45;
  v19 = 0x7FFFFFFFFFFFFFFFLL;
  v20 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v21 = 0x8000000000000000;
  v22 = vdupq_n_s64(0x8000000000000000);
  v86 = v20;
  v87 = v22;
  v23 = 0x8000000000000000;
  v24 = 0x7FFFFFFFFFFFFFFFLL;
  v25 = v74;
  do
  {
    v26 = *v25;
    if (*(_BYTE *)(*v25 + 40))
    {
      v27 = *(_QWORD *)(v26 + 8);
      if (v27 >= v24)
        goto LABEL_17;
LABEL_16:
      v86.n128_u64[0] = v27;
      v24 = v27;
      goto LABEL_17;
    }
    v31 = **(int64x2_t ***)v26;
    v32 = *(int64x2_t **)(*(_QWORD *)v26 + 8);
    v33 = (int8x16_t)v20;
    v34 = (int8x16_t)v22;
    if (v31 != v32)
    {
      v36 = *v31;
      v35 = v31 + 1;
      v37 = v36;
      v33 = (int8x16_t)v36;
      if (v35 == v32)
      {
        v34 = (int8x16_t)v37;
      }
      else
      {
        v38 = v37;
        v34 = (int8x16_t)v37;
        do
        {
          v39 = *v35++;
          v40 = (int8x16_t)vcgtq_s64(v37, v39);
          v33 = vbslq_s8(v40, (int8x16_t)v39, v33);
          v37 = (int64x2_t)vbslq_s8(v40, (int8x16_t)v39, (int8x16_t)v37);
          v41 = (int8x16_t)vcgtq_s64(v39, v38);
          v34 = vbslq_s8(v41, (int8x16_t)v39, v34);
          v38 = (int64x2_t)vbslq_s8(v41, (int8x16_t)v39, (int8x16_t)v38);
        }
        while (v35 != v32);
      }
    }
    *(int8x16_t *)(v26 + 8) = v33;
    *(int8x16_t *)(v26 + 24) = v34;
    v27 = v33.i64[0];
    *(_BYTE *)(v26 + 40) = 1;
    if (v33.i64[0] < v24)
      goto LABEL_16;
LABEL_17:
    if (v27 <= v23)
    {
      v28 = *(_QWORD *)(v26 + 16);
      if (v28 >= v19)
      {
LABEL_19:
        if (v28 > v21)
          goto LABEL_20;
        goto LABEL_27;
      }
    }
    else
    {
      v87.i64[0] = v27;
      v23 = v27;
      v28 = *(_QWORD *)(v26 + 16);
      if (v28 >= v19)
        goto LABEL_19;
    }
    v86.n128_u64[1] = v28;
    v19 = v28;
    if (v28 > v21)
    {
LABEL_20:
      v87.i64[1] = v28;
      v21 = v28;
      v29 = *(_QWORD *)(v26 + 24);
      if (v29 >= v24)
        goto LABEL_21;
      goto LABEL_28;
    }
LABEL_27:
    v29 = *(_QWORD *)(v26 + 24);
    if (v29 >= v24)
    {
LABEL_21:
      if (v29 > v23)
        goto LABEL_22;
      goto LABEL_29;
    }
LABEL_28:
    v86.n128_u64[0] = v29;
    v24 = v29;
    if (v29 > v23)
    {
LABEL_22:
      v87.i64[0] = v29;
      v23 = v29;
      v30 = *(_QWORD *)(v26 + 32);
      if (v30 < v19)
        goto LABEL_30;
      goto LABEL_23;
    }
LABEL_29:
    v30 = *(_QWORD *)(v26 + 32);
    if (v30 < v19)
    {
LABEL_30:
      v86.n128_u64[1] = v30;
      v19 = v30;
      if (v30 <= v21)
        goto LABEL_13;
      goto LABEL_31;
    }
LABEL_23:
    if (v30 <= v21)
      goto LABEL_13;
LABEL_31:
    v87.i64[1] = v30;
    v21 = v30;
LABEL_13:
    ++v25;
  }
  while (v25 != v18);
  if (a3 > 0x63 || (unint64_t)((char *)v18 - (char *)v17) < 0x79)
  {
    v45 = v17 + 2;
    v46 = (uint64_t **)v17;
    while (1)
    {
      v47 = v46 + 1;
      if (v46 + 1 != (uint64_t **)v18 && *(_BYTE *)a4 == 0)
      {
        v49 = v45;
LABEL_58:
        v50 = **v46;
        v51 = *(_QWORD *)*(v49 - 1);
        v52 = *(_QWORD *)(a4 + 8);
        strcpy(v88, "FFFFFFFFF");
        sub_223777F30(v50, v51, (unsigned __int8 *)v88, v52, v20);
        if (!v88[9])
        {
          v53 = v88[0] != 84 && v88[0] - 48 >= 0xA;
          if (!v53
            || v88[1] == 84
            || v88[1] - 48 <= 9
            || v88[3] == 84
            || v88[3] - 48 < 0xA)
          {
            *(_BYTE *)a4 = 1;
            goto LABEL_71;
          }
        }
        while (v49 != v18)
        {
          ++v49;
          if (!*(_BYTE *)a4)
            goto LABEL_58;
        }
      }
      ++v45;
      ++v46;
      if (v47 == (uint64_t **)v18)
        goto LABEL_43;
    }
  }
  if (!sub_223775618((__int128 *)&v86, &v74, a3 + 1, a4))
    goto LABEL_71;
LABEL_43:
  if (!sub_223775430((uint64_t)&v86, &v74, (uint64_t)&v80, a3, a4, v20)
    || (sub_223775430((uint64_t)&v86, &v74, (uint64_t)&__p, a3, a4, v42) & 1) == 0)
  {
LABEL_71:
    v54 = 0;
    if (v17)
      goto LABEL_123;
    goto LABEL_124;
  }
LABEL_45:
  v44 = (uint64_t **)v80;
  v43 = v81;
  if (a3 > 0x63 || (unint64_t)((char *)v81 - (_BYTE *)v80) < 0x79)
  {
    if (v80 != v81)
    {
      v55 = (uint64_t **)((char *)v80 + 16);
      do
      {
        v56 = v44 + 1;
        if (v44 + 1 != v43 && *(_BYTE *)a4 == 0)
        {
          v58 = v55;
LABEL_83:
          v59 = **v44;
          v60 = **(v58 - 1);
          v61 = *(_QWORD *)(a4 + 8);
          strcpy((char *)&v86, "FFFFFFFFF");
          sub_223777F30(v59, v60, (unsigned __int8 *)&v86, v61, v16);
          if (!v86.n128_u8[9])
          {
            v62 = v86.n128_u8[0] != 84 && v86.n128_u8[0] - 48 >= 0xA;
            if (!v62
              || v86.n128_u8[1] == 84
              || v86.n128_u8[1] - 48 <= 9
              || v86.n128_u8[3] == 84
              || v86.n128_u8[3] - 48 < 0xA)
            {
LABEL_121:
              v54 = 0;
              *(_BYTE *)a4 = 1;
LABEL_122:
              if (v17)
                goto LABEL_123;
              goto LABEL_124;
            }
          }
          while (v58 != v43)
          {
            ++v58;
            if (!*(_BYTE *)a4)
              goto LABEL_83;
          }
        }
        ++v55;
        ++v44;
      }
      while (v56 != v43);
    }
  }
  else if (!sub_223775618(&v84, (uint64_t **)&v80, a3 + 1, a4))
  {
    goto LABEL_71;
  }
  v64 = (uint64_t **)__p;
  v63 = v78;
  if (a3 > 0x63 || (unint64_t)((char *)v78 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v78)
    {
      v65 = (uint64_t **)((char *)__p + 16);
      while (1)
      {
        v66 = v64 + 1;
        if (v64 + 1 != v63 && *(_BYTE *)a4 == 0)
        {
          v68 = v65;
LABEL_109:
          v69 = **v64;
          v70 = **(v68 - 1);
          v71 = *(_QWORD *)(a4 + 8);
          strcpy((char *)&v86, "FFFFFFFFF");
          sub_223777F30(v69, v70, (unsigned __int8 *)&v86, v71, v16);
          if (!v86.n128_u8[9])
          {
            v72 = v86.n128_u8[0] != 84 && v86.n128_u8[0] - 48 >= 0xA;
            if (!v72
              || v86.n128_u8[1] == 84
              || v86.n128_u8[1] - 48 <= 9
              || v86.n128_u8[3] == 84
              || v86.n128_u8[3] - 48 < 0xA)
            {
              goto LABEL_121;
            }
          }
          while (v68 != v63)
          {
            ++v68;
            if (!*(_BYTE *)a4)
              goto LABEL_109;
          }
        }
        ++v65;
        v54 = 1;
        ++v64;
        if (v66 == v63)
          goto LABEL_122;
      }
    }
    v54 = 1;
    if (v17)
LABEL_123:
      operator delete(v17);
  }
  else
  {
    v54 = sub_223775618(v83, (uint64_t **)&__p, a3 + 1, a4);
    if (v17)
      goto LABEL_123;
  }
LABEL_124:
  if (__p)
    operator delete(__p);
  if (v80)
    operator delete(v80);
  return v54;
}

void sub_223774D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v18;
  void *v19;

  if (v16)
  {
    operator delete(v16);
    v18 = __p;
    if (!__p)
    {
LABEL_3:
      v19 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v18 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v18);
  v19 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_223774D90(_QWORD *a1, _QWORD *a2, uint64_t **a3, char **a4, char **a5, char **a6)
{
  uint64_t *v6;
  char **v7;
  int64x2_t v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  int64x2_t *v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int64x2_t *v29;
  int64x2_t *v30;
  int8x16_t v31;
  int8x16_t v32;
  int64x2_t *v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char v55;
  unint64_t v56;
  char *v57;
  char **v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  char *v98;
  char *v99;
  unint64_t v100;
  char **v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  _OWORD *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t **v112;
  int64x2_t v114;
  int64x2_t v115;

  v6 = *a3;
  if (*a3 != a3[1])
  {
    v7 = a6;
    v11 = vdupq_n_s64(0x8000000000000000);
    v12 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v112 = a3;
    v114 = v12;
    v115 = v11;
    do
    {
      v13 = *v6;
      if (*(_BYTE *)(*v6 + 40))
      {
        if (*(_QWORD *)(v13 + 24) < *a1)
          goto LABEL_16;
      }
      else
      {
        v14 = **(int64x2_t ***)v13;
        v15 = *(int64x2_t **)(*(_QWORD *)v13 + 8);
        v16 = (int8x16_t)v12;
        v17 = (int8x16_t)v11;
        if (v14 != v15)
        {
          v19 = *v14;
          v18 = v14 + 1;
          v20 = v19;
          v16 = (int8x16_t)v19;
          if (v18 == v15)
          {
            v17 = (int8x16_t)v20;
          }
          else
          {
            v21 = v20;
            v17 = (int8x16_t)v20;
            do
            {
              v22 = *v18++;
              v23 = (int8x16_t)vcgtq_s64(v20, v22);
              v16 = vbslq_s8(v23, (int8x16_t)v22, v16);
              v20 = (int64x2_t)vbslq_s8(v23, (int8x16_t)v22, (int8x16_t)v20);
              v24 = (int8x16_t)vcgtq_s64(v22, v21);
              v17 = vbslq_s8(v24, (int8x16_t)v22, v17);
              v21 = (int64x2_t)vbslq_s8(v24, (int8x16_t)v22, (int8x16_t)v21);
            }
            while (v18 != v15);
          }
        }
        *(int8x16_t *)(v13 + 8) = v16;
        *(int8x16_t *)(v13 + 24) = v17;
        *(_BYTE *)(v13 + 40) = 1;
        if (v17.i64[0] < *a1)
        {
LABEL_16:
          v25 = 0;
          v26 = *v6;
          if (*(_BYTE *)(*v6 + 40))
            goto LABEL_17;
          goto LABEL_26;
        }
      }
      if (*(_QWORD *)(v13 + 8) > a1[2])
        goto LABEL_16;
      v28 = *(_QWORD *)(v13 + 32) < a1[1];
      v27 = *(_QWORD *)(v13 + 16);
      v28 = !v28 && v27 <= a1[3];
      v25 = v28;
      v26 = *v6;
      if (*(_BYTE *)(*v6 + 40))
      {
LABEL_17:
        if (*(_QWORD *)(v26 + 24) < *a2)
          goto LABEL_34;
        goto LABEL_33;
      }
LABEL_26:
      v29 = **(int64x2_t ***)v26;
      v30 = *(int64x2_t **)(*(_QWORD *)v26 + 8);
      v31 = (int8x16_t)v12;
      v32 = (int8x16_t)v11;
      if (v29 != v30)
      {
        v34 = *v29;
        v33 = v29 + 1;
        v35 = v34;
        v31 = (int8x16_t)v34;
        if (v33 == v30)
        {
          v32 = (int8x16_t)v35;
        }
        else
        {
          v36 = v35;
          v32 = (int8x16_t)v35;
          do
          {
            v37 = *v33++;
            v38 = (int8x16_t)vcgtq_s64(v35, v37);
            v31 = vbslq_s8(v38, (int8x16_t)v37, v31);
            v35 = (int64x2_t)vbslq_s8(v38, (int8x16_t)v37, (int8x16_t)v35);
            v39 = (int8x16_t)vcgtq_s64(v37, v36);
            v32 = vbslq_s8(v39, (int8x16_t)v37, v32);
            v36 = (int64x2_t)vbslq_s8(v39, (int8x16_t)v37, (int8x16_t)v36);
          }
          while (v33 != v30);
        }
      }
      *(int8x16_t *)(v26 + 8) = v31;
      *(int8x16_t *)(v26 + 24) = v32;
      *(_BYTE *)(v26 + 40) = 1;
      if (v32.i64[0] < *a2)
      {
LABEL_34:
        if (!v25)
          goto LABEL_4;
        goto LABEL_35;
      }
LABEL_33:
      if (*(_QWORD *)(v26 + 8) > a2[2])
        goto LABEL_34;
      v28 = *(_QWORD *)(v26 + 32) < a2[1];
      v53 = *(_QWORD *)(v26 + 16);
      v55 = v28 || v53 > a2[3];
      if (v25 && (v55 & 1) == 0)
      {
        v57 = v7[1];
        v56 = (unint64_t)v7[2];
        if ((unint64_t)v57 >= v56)
        {
          v71 = *v7;
          v72 = v57 - *v7;
          v73 = v72 >> 3;
          v74 = (v72 >> 3) + 1;
          if (v74 >> 61)
            goto LABEL_118;
          v75 = v56 - (_QWORD)v71;
          if (v75 >> 2 > v74)
            v74 = v75 >> 2;
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
            v76 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v76 = v74;
          if (v76)
          {
            if (v76 >> 61)
              goto LABEL_119;
            v77 = operator new(8 * v76);
            v12 = v114;
            v11 = v115;
            v78 = &v77[8 * v73];
            *(_QWORD *)v78 = *v6;
            v79 = (uint64_t)(v78 + 8);
            v80 = (char *)(v57 - v71);
            if (v57 != v71)
            {
LABEL_81:
              v81 = (unint64_t)(v80 - 8);
              if (v81 < 0x58)
              {
                v7 = a6;
                goto LABEL_90;
              }
              v82 = v57 - v77 - v72;
              v7 = a6;
              if (v82 < 0x20)
                goto LABEL_122;
              v83 = (v81 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v85 = &v57[-v84];
              v78 -= v84;
              v86 = &v77[8 * v73 - 16];
              v87 = v57 - 16;
              v88 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v89 = *(_OWORD *)v87;
                *(v86 - 1) = *((_OWORD *)v87 - 1);
                *v86 = v89;
                v86 -= 2;
                v87 -= 32;
                v88 -= 4;
              }
              while (v88);
              v57 = v85;
              if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_122:
                do
                {
LABEL_90:
                  v90 = *((_QWORD *)v57 - 1);
                  v57 -= 8;
                  *((_QWORD *)v78 - 1) = v90;
                  v78 -= 8;
                }
                while (v57 != v71);
              }
              v57 = *v7;
              *v7 = v78;
              v7[1] = (char *)v79;
              v7[2] = &v77[8 * v76];
              if (v57)
              {
LABEL_92:
                operator delete(v57);
                v12 = v114;
                v11 = v115;
              }
LABEL_93:
              a3 = v112;
              v7[1] = (char *)v79;
              goto LABEL_4;
            }
          }
          else
          {
            v77 = 0;
            v78 = (char *)(8 * v73);
            *(_QWORD *)(8 * v73) = *v6;
            v79 = 8 * v73 + 8;
            v80 = (char *)(v57 - v71);
            if (v57 != v71)
              goto LABEL_81;
          }
          v7 = a6;
          *a6 = v78;
          a6[1] = (char *)v79;
          a6[2] = &v77[8 * v76];
          if (v57)
            goto LABEL_92;
          goto LABEL_93;
        }
        *(_QWORD *)v57 = *v6;
        v7[1] = v57 + 8;
        goto LABEL_4;
      }
      if ((v25 & 1) == 0)
      {
        if ((v55 & 1) == 0)
        {
          v58 = a5;
          v60 = a5[1];
          v59 = (unint64_t)a5[2];
          if ((unint64_t)v60 < v59)
          {
            *(_QWORD *)v60 = *v6;
            v61 = (uint64_t)(v60 + 8);
LABEL_116:
            v58[1] = (char *)v61;
            goto LABEL_4;
          }
          v91 = *a5;
          v92 = v60 - *a5;
          v93 = v92 >> 3;
          v94 = (v92 >> 3) + 1;
          if (v94 >> 61)
LABEL_118:
            sub_22316E078();
          v95 = v59 - (_QWORD)v91;
          if (v95 >> 2 > v94)
            v94 = v95 >> 2;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
            v96 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            if (v96 >> 61)
LABEL_119:
              sub_223174E94();
            v97 = operator new(8 * v96);
            v12 = v114;
            v11 = v115;
            v98 = &v97[8 * v93];
            *(_QWORD *)v98 = *v6;
            v61 = (uint64_t)(v98 + 8);
            v99 = (char *)(v60 - v91);
            if (v60 != v91)
            {
LABEL_103:
              v100 = (unint64_t)(v99 - 8);
              if (v100 < 0x58)
              {
                v7 = a6;
                goto LABEL_112;
              }
              v102 = v60 - v97 - v92;
              v7 = a6;
              if (v102 < 0x20)
                goto LABEL_123;
              v103 = (v100 >> 3) + 1;
              v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
              v105 = &v60[-v104];
              v98 -= v104;
              v106 = &v97[8 * v93 - 16];
              v107 = v60 - 16;
              v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v109 = *(_OWORD *)v107;
                *(v106 - 1) = *((_OWORD *)v107 - 1);
                *v106 = v109;
                v106 -= 2;
                v107 -= 32;
                v108 -= 4;
              }
              while (v108);
              v60 = v105;
              if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_123:
                do
                {
LABEL_112:
                  v110 = *((_QWORD *)v60 - 1);
                  v60 -= 8;
                  *((_QWORD *)v98 - 1) = v110;
                  v98 -= 8;
                }
                while (v60 != v91);
              }
              v101 = a5;
              v60 = *a5;
              *a5 = v98;
              a5[1] = (char *)v61;
              a5[2] = &v97[8 * v96];
              if (v60)
              {
LABEL_114:
                operator delete(v60);
                v12 = v114;
                v11 = v115;
                v58 = a5;
                goto LABEL_115;
              }
LABEL_107:
              v58 = v101;
LABEL_115:
              a3 = v112;
              goto LABEL_116;
            }
          }
          else
          {
            v97 = 0;
            v98 = (char *)(8 * v93);
            *(_QWORD *)(8 * v93) = *v6;
            v61 = 8 * v93 + 8;
            v99 = (char *)(v60 - v91);
            if (v60 != v91)
              goto LABEL_103;
          }
          v7 = a6;
          v101 = a5;
          *a5 = v98;
          a5[1] = (char *)v61;
          a5[2] = &v97[8 * v96];
          if (v60)
            goto LABEL_114;
          goto LABEL_107;
        }
        goto LABEL_4;
      }
LABEL_35:
      v41 = a4[1];
      v40 = (unint64_t)a4[2];
      if ((unint64_t)v41 >= v40)
      {
        v42 = *a4;
        v43 = v41 - *a4;
        v44 = v43 >> 3;
        v45 = (v43 >> 3) + 1;
        if (v45 >> 61)
          goto LABEL_118;
        v46 = v40 - (_QWORD)v42;
        if (v46 >> 2 > v45)
          v45 = v46 >> 2;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          if (v47 >> 61)
            goto LABEL_119;
          v48 = operator new(8 * v47);
          v12 = v114;
          v11 = v115;
          v49 = &v48[8 * v44];
          *(_QWORD *)v49 = *v6;
          v50 = (uint64_t)(v49 + 8);
          v51 = (char *)(v41 - v42);
          if (v41 != v42)
          {
LABEL_45:
            v52 = (unint64_t)(v51 - 8);
            if (v52 < 0x58)
            {
              v7 = a6;
              goto LABEL_68;
            }
            v62 = v41 - v48 - v43;
            v7 = a6;
            if (v62 < 0x20)
              goto LABEL_124;
            v63 = (v52 >> 3) + 1;
            v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
            v65 = &v41[-v64];
            v49 -= v64;
            v66 = &v48[8 * v44 - 16];
            v67 = v41 - 16;
            v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v69 = *(_OWORD *)v67;
              *(v66 - 1) = *((_OWORD *)v67 - 1);
              *v66 = v69;
              v66 -= 2;
              v67 -= 32;
              v68 -= 4;
            }
            while (v68);
            v41 = v65;
            if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_124:
              do
              {
LABEL_68:
                v70 = *((_QWORD *)v41 - 1);
                v41 -= 8;
                *((_QWORD *)v49 - 1) = v70;
                v49 -= 8;
              }
              while (v41 != v42);
            }
            v41 = *a4;
            *a4 = v49;
            a4[1] = (char *)v50;
            a4[2] = &v48[8 * v47];
            if (v41)
            {
LABEL_70:
              operator delete(v41);
              v12 = v114;
              v11 = v115;
            }
LABEL_71:
            a3 = v112;
            a4[1] = (char *)v50;
            goto LABEL_4;
          }
        }
        else
        {
          v48 = 0;
          v49 = (char *)(8 * v44);
          *(_QWORD *)(8 * v44) = *v6;
          v50 = 8 * v44 + 8;
          v51 = (char *)(v41 - v42);
          if (v41 != v42)
            goto LABEL_45;
        }
        v7 = a6;
        *a4 = v49;
        a4[1] = (char *)v50;
        a4[2] = &v48[8 * v47];
        if (v41)
          goto LABEL_70;
        goto LABEL_71;
      }
      *(_QWORD *)v41 = *v6;
      a4[1] = v41 + 8;
LABEL_4:
      ++v6;
    }
    while (v6 != a3[1]);
  }
}

uint64_t sub_223775430(uint64_t a1, uint64_t **a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;
  char v18[16];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v9 = a2[1];
  if ((unint64_t)((char *)v9 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 >= 0x79uLL)
  {
    return sub_223776EFC(a1, a2, (uint64_t **)a3, a4 + 1, a5);
  }
  if (v10 == v9)
    return 1;
  v11 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v11)
    return 1;
  while (*(_QWORD *)a3 == v11 || *(_BYTE *)a5 != 0)
  {
LABEL_6:
    if (++v10 == v9)
      return 1;
  }
  v11 = *(_QWORD *)a3 + 8;
LABEL_13:
  v13 = *(_QWORD *)*v10;
  v14 = **(_QWORD **)(v11 - 8);
  v15 = *(_QWORD *)(a5 + 8);
  strcpy(v18, "FFFFFFFFF");
  sub_223777F30(v13, v14, (unsigned __int8 *)v18, v15, a6);
  if (v18[9]
    || (v18[0] != 84 ? (v16 = v18[0] - 48 >= 0xA) : (v16 = 0),
        v16
     && v18[1] != 84
     && v18[1] - 48 > 9
     && v18[3] != 84
     && v18[3] - 48 > 9))
  {
    while (v11 != *(_QWORD *)(a3 + 8))
    {
      v11 += 8;
      if (!*(_BYTE *)a5)
        goto LABEL_13;
    }
    v9 = a2[1];
    goto LABEL_6;
  }
  result = 0;
  *(_BYTE *)a5 = 1;
  return result;
}

uint64_t sub_223775618(__int128 *a1, uint64_t **a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __n128 v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  __n128 v17;
  int64_t v18;
  int64x2_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t *v28;
  int64x2_t *v29;
  int8x16_t v30;
  int8x16_t v31;
  int64x2_t *v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  __n128 v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t **v53;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t **v60;
  uint64_t **v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  void *__p;
  uint64_t **v75;
  uint64_t v76;
  void *v77;
  uint64_t **v78;
  uint64_t v79;
  _QWORD v80[2];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  int64x2_t v86;
  char v87[16];
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 1);
  v7 = *((_QWORD *)a1 + 3);
  if (&v82 != a1)
  {
    v82 = *a1;
    v83 = *((_QWORD *)a1 + 2);
  }
  if (v80 != (_QWORD *)a1)
  {
    v80[0] = *(_QWORD *)a1;
    v81 = a1[1];
  }
  if (v7 >= 0)
    v8 = v7;
  else
    v8 = v7 + 1;
  v9 = v8 >> 1;
  if (v6 >= 0)
    v10 = v6;
  else
    v10 = v6 + 1;
  v11 = v10 >> 1;
  v12 = v7 - 2 * v9 + v6 - 2 * v11;
  v84 = v9 + v11 + ((v12 + ((v12 & 0x80) >> 7)) << 24 >> 25);
  v80[1] = v84;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  __p = 0;
  v75 = 0;
  v76 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  sub_223774D90(&v82, v80, a2, (char **)&v77, (char **)&__p, (char **)&v71);
  v14 = v71;
  v15 = v72;
  if (v71 == v72)
    goto LABEL_45;
  v16 = 0x7FFFFFFFFFFFFFFFLL;
  v17 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v18 = 0x8000000000000000;
  v19 = vdupq_n_s64(0x8000000000000000);
  v85 = v17;
  v86 = v19;
  v20 = 0x8000000000000000;
  v21 = 0x7FFFFFFFFFFFFFFFLL;
  v22 = v71;
  do
  {
    v23 = *v22;
    if (*(_BYTE *)(*v22 + 40))
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24 >= v21)
        goto LABEL_17;
LABEL_16:
      v85.n128_u64[0] = v24;
      v21 = v24;
      goto LABEL_17;
    }
    v28 = **(int64x2_t ***)v23;
    v29 = *(int64x2_t **)(*(_QWORD *)v23 + 8);
    v30 = (int8x16_t)v17;
    v31 = (int8x16_t)v19;
    if (v28 != v29)
    {
      v33 = *v28;
      v32 = v28 + 1;
      v34 = v33;
      v30 = (int8x16_t)v33;
      if (v32 == v29)
      {
        v31 = (int8x16_t)v34;
      }
      else
      {
        v35 = v34;
        v31 = (int8x16_t)v34;
        do
        {
          v36 = *v32++;
          v37 = (int8x16_t)vcgtq_s64(v34, v36);
          v30 = vbslq_s8(v37, (int8x16_t)v36, v30);
          v34 = (int64x2_t)vbslq_s8(v37, (int8x16_t)v36, (int8x16_t)v34);
          v38 = (int8x16_t)vcgtq_s64(v36, v35);
          v31 = vbslq_s8(v38, (int8x16_t)v36, v31);
          v35 = (int64x2_t)vbslq_s8(v38, (int8x16_t)v36, (int8x16_t)v35);
        }
        while (v32 != v29);
      }
    }
    *(int8x16_t *)(v23 + 8) = v30;
    *(int8x16_t *)(v23 + 24) = v31;
    v24 = v30.i64[0];
    *(_BYTE *)(v23 + 40) = 1;
    if (v30.i64[0] < v21)
      goto LABEL_16;
LABEL_17:
    if (v24 <= v20)
    {
      v25 = *(_QWORD *)(v23 + 16);
      if (v25 >= v16)
      {
LABEL_19:
        if (v25 > v18)
          goto LABEL_20;
        goto LABEL_27;
      }
    }
    else
    {
      v86.i64[0] = v24;
      v20 = v24;
      v25 = *(_QWORD *)(v23 + 16);
      if (v25 >= v16)
        goto LABEL_19;
    }
    v85.n128_u64[1] = v25;
    v16 = v25;
    if (v25 > v18)
    {
LABEL_20:
      v86.i64[1] = v25;
      v18 = v25;
      v26 = *(_QWORD *)(v23 + 24);
      if (v26 >= v21)
        goto LABEL_21;
      goto LABEL_28;
    }
LABEL_27:
    v26 = *(_QWORD *)(v23 + 24);
    if (v26 >= v21)
    {
LABEL_21:
      if (v26 > v20)
        goto LABEL_22;
      goto LABEL_29;
    }
LABEL_28:
    v85.n128_u64[0] = v26;
    v21 = v26;
    if (v26 > v20)
    {
LABEL_22:
      v86.i64[0] = v26;
      v20 = v26;
      v27 = *(_QWORD *)(v23 + 32);
      if (v27 < v16)
        goto LABEL_30;
      goto LABEL_23;
    }
LABEL_29:
    v27 = *(_QWORD *)(v23 + 32);
    if (v27 < v16)
    {
LABEL_30:
      v85.n128_u64[1] = v27;
      v16 = v27;
      if (v27 <= v18)
        goto LABEL_13;
      goto LABEL_31;
    }
LABEL_23:
    if (v27 <= v18)
      goto LABEL_13;
LABEL_31:
    v86.i64[1] = v27;
    v18 = v27;
LABEL_13:
    ++v22;
  }
  while (v22 != v15);
  if (a3 > 0x63 || (unint64_t)((char *)v15 - (char *)v14) < 0x79)
  {
    v42 = v14 + 2;
    v43 = (uint64_t **)v14;
    while (1)
    {
      v44 = v43 + 1;
      if (v43 + 1 != (uint64_t **)v15 && *(_BYTE *)a4 == 0)
      {
        v46 = v42;
LABEL_58:
        v47 = **v43;
        v48 = *(_QWORD *)*(v46 - 1);
        v49 = *(_QWORD *)(a4 + 8);
        strcpy(v87, "FFFFFFFFF");
        sub_223777F30(v47, v48, (unsigned __int8 *)v87, v49, v17);
        if (!v87[9])
        {
          v50 = v87[0] != 84 && v87[0] - 48 >= 0xA;
          if (!v50
            || v87[1] == 84
            || v87[1] - 48 <= 9
            || v87[3] == 84
            || v87[3] - 48 < 0xA)
          {
            *(_BYTE *)a4 = 1;
            goto LABEL_71;
          }
        }
        while (v46 != v15)
        {
          ++v46;
          if (!*(_BYTE *)a4)
            goto LABEL_58;
        }
      }
      ++v42;
      ++v43;
      if (v44 == (uint64_t **)v15)
        goto LABEL_43;
    }
  }
  if (!sub_2237746C8(&v85, &v71, a3 + 1, a4))
    goto LABEL_71;
LABEL_43:
  if (!sub_223775CE8((__int128 *)&v85, &v71, (uint64_t)&v77, a3, a4, v17)
    || (sub_223775CE8((__int128 *)&v85, &v71, (uint64_t)&__p, a3, a4, v39) & 1) == 0)
  {
LABEL_71:
    v51 = 0;
    if (v14)
      goto LABEL_123;
    goto LABEL_124;
  }
LABEL_45:
  v41 = (uint64_t **)v77;
  v40 = v78;
  if (a3 > 0x63 || (unint64_t)((char *)v78 - (_BYTE *)v77) < 0x79)
  {
    if (v77 != v78)
    {
      v52 = (uint64_t **)((char *)v77 + 16);
      do
      {
        v53 = v41 + 1;
        if (v41 + 1 != v40 && *(_BYTE *)a4 == 0)
        {
          v55 = v52;
LABEL_83:
          v56 = **v41;
          v57 = **(v55 - 1);
          v58 = *(_QWORD *)(a4 + 8);
          strcpy((char *)&v85, "FFFFFFFFF");
          sub_223777F30(v56, v57, (unsigned __int8 *)&v85, v58, v13);
          if (!v85.n128_u8[9])
          {
            v59 = v85.n128_u8[0] != 84 && v85.n128_u8[0] - 48 >= 0xA;
            if (!v59
              || v85.n128_u8[1] == 84
              || v85.n128_u8[1] - 48 <= 9
              || v85.n128_u8[3] == 84
              || v85.n128_u8[3] - 48 < 0xA)
            {
LABEL_121:
              v51 = 0;
              *(_BYTE *)a4 = 1;
LABEL_122:
              if (v14)
                goto LABEL_123;
              goto LABEL_124;
            }
          }
          while (v55 != v40)
          {
            ++v55;
            if (!*(_BYTE *)a4)
              goto LABEL_83;
          }
        }
        ++v52;
        ++v41;
      }
      while (v53 != v40);
    }
  }
  else if (!sub_2237746C8(&v82, &v77, a3 + 1, a4))
  {
    goto LABEL_71;
  }
  v61 = (uint64_t **)__p;
  v60 = v75;
  if (a3 > 0x63 || (unint64_t)((char *)v75 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v75)
    {
      v62 = (uint64_t **)((char *)__p + 16);
      while (1)
      {
        v63 = v61 + 1;
        if (v61 + 1 != v60 && *(_BYTE *)a4 == 0)
        {
          v65 = v62;
LABEL_109:
          v66 = **v61;
          v67 = **(v65 - 1);
          v68 = *(_QWORD *)(a4 + 8);
          strcpy((char *)&v85, "FFFFFFFFF");
          sub_223777F30(v66, v67, (unsigned __int8 *)&v85, v68, v13);
          if (!v85.n128_u8[9])
          {
            v69 = v85.n128_u8[0] != 84 && v85.n128_u8[0] - 48 >= 0xA;
            if (!v69
              || v85.n128_u8[1] == 84
              || v85.n128_u8[1] - 48 <= 9
              || v85.n128_u8[3] == 84
              || v85.n128_u8[3] - 48 < 0xA)
            {
              goto LABEL_121;
            }
          }
          while (v65 != v60)
          {
            ++v65;
            if (!*(_BYTE *)a4)
              goto LABEL_109;
          }
        }
        ++v62;
        v51 = 1;
        ++v61;
        if (v63 == v60)
          goto LABEL_122;
      }
    }
    v51 = 1;
    if (v14)
LABEL_123:
      operator delete(v14);
  }
  else
  {
    v51 = sub_2237746C8(v80, &__p, a3 + 1, a4);
    if (v14)
      goto LABEL_123;
  }
LABEL_124:
  if (__p)
    operator delete(__p);
  if (v77)
    operator delete(v77);
  return v51;
}

void sub_223775C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v18;
  void *v19;

  if (v16)
  {
    operator delete(v16);
    v18 = __p;
    if (!__p)
    {
LABEL_3:
      v19 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v18 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v18);
  v19 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223775CE8(__int128 *a1, uint64_t **a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;
  char v18[16];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v9 = a2[1];
  if ((unint64_t)((char *)v9 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 >= 0x79uLL)
  {
    return sub_223775ED0(a1, a2, (uint64_t **)a3, a4 + 1, a5);
  }
  if (v10 == v9)
    return 1;
  v11 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v11)
    return 1;
  while (*(_QWORD *)a3 == v11 || *(_BYTE *)a5 != 0)
  {
LABEL_6:
    if (++v10 == v9)
      return 1;
  }
  v11 = *(_QWORD *)a3 + 8;
LABEL_13:
  v13 = *(_QWORD *)*v10;
  v14 = **(_QWORD **)(v11 - 8);
  v15 = *(_QWORD *)(a5 + 8);
  strcpy(v18, "FFFFFFFFF");
  sub_223777F30(v13, v14, (unsigned __int8 *)v18, v15, a6);
  if (v18[9]
    || (v18[0] != 84 ? (v16 = v18[0] - 48 >= 0xA) : (v16 = 0),
        v16
     && v18[1] != 84
     && v18[1] - 48 > 9
     && v18[3] != 84
     && v18[3] - 48 > 9))
  {
    while (v11 != *(_QWORD *)(a3 + 8))
    {
      v11 += 8;
      if (!*(_BYTE *)a5)
        goto LABEL_13;
    }
    v9 = a2[1];
    goto LABEL_6;
  }
  result = 0;
  *(_BYTE *)a5 = 1;
  return result;
}

uint64_t sub_223775ED0(__int128 *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __n128 v18;
  uint64_t **v19;
  uint64_t **v20;
  char *v21;
  char *v22;
  uint64_t **v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  int64_t v34;
  int64x2_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64x2_t *v43;
  int64x2_t *v44;
  int8x16_t v45;
  int8x16_t v46;
  int64x2_t *v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint64_t v54;
  int64x2_t v55;
  int64_t v56;
  int64x2_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64x2_t *v66;
  int64x2_t *v67;
  int8x16_t v68;
  int8x16_t v69;
  int64x2_t *v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int8x16_t v75;
  int8x16_t v76;
  uint64_t **v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  int64x2_t v83;
  int64x2_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64x2_t *v91;
  int64x2_t *v92;
  int8x16_t v93;
  int8x16_t v94;
  int64x2_t *v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int8x16_t v100;
  int8x16_t v101;
  char *v102;
  uint64_t v103;
  int64x2_t v104;
  int64_t v105;
  int64x2_t v106;
  int64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  int64x2_t *v114;
  int64x2_t *v115;
  int8x16_t v116;
  int8x16_t v117;
  int64x2_t *v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int8x16_t v123;
  int8x16_t v124;
  uint64_t **v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  uint64_t **v138;
  uint64_t **v139;
  BOOL v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t **v148;
  uint64_t **v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  void *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  BOOL v163;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  unint64_t v168;
  void *__p;
  char *v170;
  uint64_t v171;
  void *v172;
  char *v173;
  uint64_t v174;
  void *v175;
  char *v176;
  uint64_t v177;
  void *v178;
  uint64_t **v179;
  uint64_t v180;
  void *v181;
  uint64_t **v182;
  uint64_t v183;
  void *v184;
  uint64_t **v185;
  uint64_t v186;
  _OWORD v187[2];
  __int128 v188;
  __int128 v189;
  int64x2_t v190;
  int64x2_t v191;
  uint64_t v192;

  v192 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a1;
  v10 = a1 + 1;
  v9 = *((_QWORD *)a1 + 2);
  if (&v188 != a1)
  {
    v11 = *v10;
    v188 = *a1;
    v189 = v11;
  }
  if (v187 != a1)
  {
    v12 = *v10;
    v187[0] = *a1;
    v187[1] = v12;
  }
  if (v9 >= 0)
    v13 = v9;
  else
    v13 = v9 + 1;
  v14 = v13 >> 1;
  if (v8 >= 0)
    v15 = v8;
  else
    v15 = v8 + 1;
  v16 = v15 >> 1;
  v17 = v9 - 2 * v14 + v8 - 2 * v16;
  *(_QWORD *)&v189 = v14 + v16 + ((v17 + ((v17 & 0x80) >> 7)) << 24 >> 25);
  v186 = 0;
  *(_QWORD *)&v187[0] = v189;
  v184 = 0;
  v185 = 0;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  __p = 0;
  v170 = 0;
  v171 = 0;
  sub_223774D90(&v188, v187, a2, (char **)&v184, (char **)&v181, (char **)&v178);
  sub_223774D90(&v188, v187, a3, (char **)&v175, (char **)&v172, (char **)&__p);
  v19 = (uint64_t **)v178;
  v20 = v179;
  v21 = (char *)__p;
  v168 = a4;
  if (v178 == v179)
  {
    v22 = v170;
    goto LABEL_32;
  }
  v22 = v170;
  v165 = (char *)v179 - (_BYTE *)v178;
  if ((unint64_t)((char *)v179 - (_BYTE *)v178) < 0x80
    || a4 > 0x63
    || (unint64_t)(v170 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v170)
    {
      v23 = (uint64_t **)v178;
      do
      {
        if (!*(_BYTE *)a5)
        {
          v24 = v21 + 8;
LABEL_19:
          v25 = **v23;
          v26 = **((_QWORD **)v24 - 1);
          v27 = *(_QWORD *)(a5 + 8);
          strcpy(v190.i8, "FFFFFFFFF");
          sub_223777F30(v25, v26, (unsigned __int8 *)&v190, v27, v18);
          if (!v190.i8[9])
          {
            v28 = v190.u8[0] != 84 && v190.u8[0] - 48 >= 0xA;
            if (!v28
              || v190.u8[1] == 84
              || v190.u8[1] - 48 <= 9
              || v190.u8[3] == 84
              || v190.u8[3] - 48 < 0xA)
            {
LABEL_282:
              v157 = 0;
              *(_BYTE *)a5 = 1;
              v158 = __p;
              if (!__p)
                goto LABEL_284;
              goto LABEL_283;
            }
          }
          while (v24 != v22)
          {
            v24 += 8;
            if (!*(_BYTE *)a5)
              goto LABEL_19;
          }
        }
        ++v23;
      }
      while (v23 != v20);
    }
    goto LABEL_144;
  }
  v54 = 0x7FFFFFFFFFFFFFFFLL;
  v55 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v56 = 0x8000000000000000;
  v57 = vdupq_n_s64(0x8000000000000000);
  v190 = v55;
  v191 = v57;
  v58 = 0x8000000000000000;
  v59 = 0x7FFFFFFFFFFFFFFFLL;
  v60 = (uint64_t **)v178;
  do
  {
    v61 = *v60;
    if (*((_BYTE *)*v60 + 40))
    {
      v62 = v61[1];
      if (v62 >= v59)
        goto LABEL_72;
LABEL_71:
      v190.i64[0] = v62;
      v59 = v62;
      goto LABEL_72;
    }
    v66 = *(int64x2_t **)*v61;
    v67 = *(int64x2_t **)(*v61 + 8);
    v68 = (int8x16_t)v55;
    v69 = (int8x16_t)v57;
    if (v66 != v67)
    {
      v71 = *v66;
      v70 = v66 + 1;
      v72 = v71;
      v68 = (int8x16_t)v71;
      if (v70 == v67)
      {
        v69 = (int8x16_t)v72;
      }
      else
      {
        v73 = v72;
        v69 = (int8x16_t)v72;
        do
        {
          v74 = *v70++;
          v75 = (int8x16_t)vcgtq_s64(v72, v74);
          v68 = vbslq_s8(v75, (int8x16_t)v74, v68);
          v72 = (int64x2_t)vbslq_s8(v75, (int8x16_t)v74, (int8x16_t)v72);
          v76 = (int8x16_t)vcgtq_s64(v74, v73);
          v69 = vbslq_s8(v76, (int8x16_t)v74, v69);
          v73 = (int64x2_t)vbslq_s8(v76, (int8x16_t)v74, (int8x16_t)v73);
        }
        while (v70 != v67);
      }
    }
    *(int8x16_t *)(v61 + 1) = v68;
    *(int8x16_t *)(v61 + 3) = v69;
    v62 = v68.i64[0];
    *((_BYTE *)v61 + 40) = 1;
    if (v68.i64[0] < v59)
      goto LABEL_71;
LABEL_72:
    if (v62 <= v58)
    {
      v63 = v61[2];
      if (v63 >= v54)
      {
LABEL_74:
        if (v63 > v56)
          goto LABEL_75;
        goto LABEL_82;
      }
    }
    else
    {
      v191.i64[0] = v62;
      v58 = v62;
      v63 = v61[2];
      if (v63 >= v54)
        goto LABEL_74;
    }
    v190.i64[1] = v63;
    v54 = v63;
    if (v63 > v56)
    {
LABEL_75:
      v191.i64[1] = v63;
      v56 = v63;
      v64 = v61[3];
      if (v64 >= v59)
        goto LABEL_76;
      goto LABEL_83;
    }
LABEL_82:
    v64 = v61[3];
    if (v64 >= v59)
    {
LABEL_76:
      if (v64 > v58)
        goto LABEL_77;
      goto LABEL_84;
    }
LABEL_83:
    v190.i64[0] = v64;
    v59 = v64;
    if (v64 > v58)
    {
LABEL_77:
      v191.i64[0] = v64;
      v58 = v64;
      v65 = v61[4];
      if (v65 < v54)
        goto LABEL_85;
      goto LABEL_78;
    }
LABEL_84:
    v65 = v61[4];
    if (v65 < v54)
    {
LABEL_85:
      v190.i64[1] = v65;
      v54 = v65;
      if (v65 <= v56)
        goto LABEL_68;
      goto LABEL_86;
    }
LABEL_78:
    if (v65 <= v56)
      goto LABEL_68;
LABEL_86:
    v191.i64[1] = v65;
    v56 = v65;
LABEL_68:
    ++v60;
  }
  while (v60 != v20);
  if (v21 != v22)
  {
    v83 = vdupq_n_s64(0x8000000000000000);
    v84 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v85 = v21;
    while (1)
    {
      v86 = *(_QWORD *)v85;
      if (*(_BYTE *)(*(_QWORD *)v85 + 40))
        break;
      v91 = **(int64x2_t ***)v86;
      v92 = *(int64x2_t **)(*(_QWORD *)v86 + 8);
      v93 = (int8x16_t)v84;
      v94 = (int8x16_t)v83;
      if (v91 != v92)
      {
        v96 = *v91;
        v95 = v91 + 1;
        v97 = v96;
        v93 = (int8x16_t)v96;
        if (v95 == v92)
        {
          v94 = (int8x16_t)v97;
        }
        else
        {
          v98 = v97;
          v94 = (int8x16_t)v97;
          do
          {
            v99 = *v95++;
            v100 = (int8x16_t)vcgtq_s64(v97, v99);
            v93 = vbslq_s8(v100, (int8x16_t)v99, v93);
            v97 = (int64x2_t)vbslq_s8(v100, (int8x16_t)v99, (int8x16_t)v97);
            v101 = (int8x16_t)vcgtq_s64(v99, v98);
            v94 = vbslq_s8(v101, (int8x16_t)v99, v94);
            v98 = (int64x2_t)vbslq_s8(v101, (int8x16_t)v99, (int8x16_t)v98);
          }
          while (v95 != v92);
        }
      }
      *(int8x16_t *)(v86 + 8) = v93;
      *(int8x16_t *)(v86 + 24) = v94;
      v87 = v93.i64[0];
      *(_BYTE *)(v86 + 40) = 1;
      if (v93.i64[0] < v59)
        goto LABEL_119;
LABEL_120:
      if (v87 <= v58)
      {
        v88 = *(_QWORD *)(v86 + 16);
        if (v88 >= v54)
        {
LABEL_122:
          if (v88 > v56)
            goto LABEL_123;
          goto LABEL_130;
        }
      }
      else
      {
        v191.i64[0] = v87;
        v58 = v87;
        v88 = *(_QWORD *)(v86 + 16);
        if (v88 >= v54)
          goto LABEL_122;
      }
      v190.i64[1] = v88;
      v54 = v88;
      if (v88 > v56)
      {
LABEL_123:
        v191.i64[1] = v88;
        v56 = v88;
        v89 = *(_QWORD *)(v86 + 24);
        if (v89 >= v59)
          goto LABEL_124;
        goto LABEL_131;
      }
LABEL_130:
      v89 = *(_QWORD *)(v86 + 24);
      if (v89 >= v59)
      {
LABEL_124:
        if (v89 > v58)
          goto LABEL_125;
        goto LABEL_132;
      }
LABEL_131:
      v190.i64[0] = v89;
      v59 = v89;
      if (v89 > v58)
      {
LABEL_125:
        v191.i64[0] = v89;
        v58 = v89;
        v90 = *(_QWORD *)(v86 + 32);
        if (v90 >= v54)
          goto LABEL_126;
        goto LABEL_133;
      }
LABEL_132:
      v90 = *(_QWORD *)(v86 + 32);
      if (v90 >= v54)
      {
LABEL_126:
        if (v90 > v56)
          goto LABEL_134;
        goto LABEL_116;
      }
LABEL_133:
      v190.i64[1] = v90;
      v54 = v90;
      if (v90 > v56)
      {
LABEL_134:
        v191.i64[1] = v90;
        v56 = v90;
      }
LABEL_116:
      v85 += 8;
      if (v85 == v22)
        goto LABEL_143;
    }
    v87 = *(_QWORD *)(v86 + 8);
    if (v87 >= v59)
      goto LABEL_120;
LABEL_119:
    v190.i64[0] = v87;
    v59 = v87;
    goto LABEL_120;
  }
LABEL_143:
  if ((sub_223776EFC(&v190, &v178, &__p, a4 + 1, a5) & 1) == 0)
    goto LABEL_300;
LABEL_144:
  v102 = v176;
  if ((unint64_t)(v176 - (_BYTE *)v175) < 0x80
    || (unint64_t)(v173 - (_BYTE *)v172) < 0x80
    || v168 > 0x63
    || v165 < 0x79)
  {
    if (v175 == v176)
    {
LABEL_194:
      v131 = v173;
      if (v172 == v173)
        goto LABEL_32;
      v132 = (char *)v172 + 8;
      while (1)
      {
        if (!*(_BYTE *)a5)
        {
          v133 = v132;
LABEL_200:
          v134 = **v19;
          v135 = **((_QWORD **)v133 - 1);
          v136 = *(_QWORD *)(a5 + 8);
          strcpy(v190.i8, "FFFFFFFFF");
          sub_223777F30(v134, v135, (unsigned __int8 *)&v190, v136, v18);
          if (!v190.i8[9])
          {
            v137 = v190.u8[0] != 84 && v190.u8[0] - 48 >= 0xA;
            if (!v137
              || v190.u8[1] == 84
              || v190.u8[1] - 48 <= 9
              || v190.u8[3] == 84
              || v190.u8[3] - 48 < 0xA)
            {
              goto LABEL_282;
            }
          }
          while (v133 != v131)
          {
            v133 += 8;
            if (!*(_BYTE *)a5)
              goto LABEL_200;
          }
        }
        if (++v19 == v20)
          goto LABEL_32;
      }
    }
    v167 = (char *)v175 + 8;
    v125 = v19;
    while (1)
    {
      if (!*(_BYTE *)a5)
      {
        v126 = v167;
LABEL_182:
        v127 = **v125;
        v128 = **((_QWORD **)v126 - 1);
        v129 = *(_QWORD *)(a5 + 8);
        strcpy(v190.i8, "FFFFFFFFF");
        sub_223777F30(v127, v128, (unsigned __int8 *)&v190, v129, v18);
        if (!v190.i8[9])
        {
          v130 = v190.u8[0] != 84 && v190.u8[0] - 48 >= 0xA;
          if (!v130
            || v190.u8[1] == 84
            || v190.u8[1] - 48 <= 9
            || v190.u8[3] == 84
            || v190.u8[3] - 48 < 0xA)
          {
            goto LABEL_282;
          }
        }
        while (v126 != v102)
        {
          v126 += 8;
          if (!*(_BYTE *)a5)
            goto LABEL_182;
        }
      }
      if (++v125 == v20)
        goto LABEL_194;
    }
  }
  v103 = 0x7FFFFFFFFFFFFFFFLL;
  v104 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v105 = 0x8000000000000000;
  v106 = vdupq_n_s64(0x8000000000000000);
  v190 = v104;
  v191 = v106;
  v107 = 0x8000000000000000;
  v108 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v109 = *v19;
    if (*((_BYTE *)*v19 + 40))
    {
      v110 = v109[1];
      if (v110 < v108)
        goto LABEL_152;
    }
    else
    {
      v114 = *(int64x2_t **)*v109;
      v115 = *(int64x2_t **)(*v109 + 8);
      v116 = (int8x16_t)v104;
      v117 = (int8x16_t)v106;
      if (v114 != v115)
      {
        v119 = *v114;
        v118 = v114 + 1;
        v120 = v119;
        v116 = (int8x16_t)v119;
        if (v118 == v115)
        {
          v117 = (int8x16_t)v120;
        }
        else
        {
          v121 = v120;
          v117 = (int8x16_t)v120;
          do
          {
            v122 = *v118++;
            v123 = (int8x16_t)vcgtq_s64(v120, v122);
            v116 = vbslq_s8(v123, (int8x16_t)v122, v116);
            v120 = (int64x2_t)vbslq_s8(v123, (int8x16_t)v122, (int8x16_t)v120);
            v124 = (int8x16_t)vcgtq_s64(v122, v121);
            v117 = vbslq_s8(v124, (int8x16_t)v122, v117);
            v121 = (int64x2_t)vbslq_s8(v124, (int8x16_t)v122, (int8x16_t)v121);
          }
          while (v118 != v115);
        }
      }
      *(int8x16_t *)(v109 + 1) = v116;
      *(int8x16_t *)(v109 + 3) = v117;
      v110 = v116.i64[0];
      *((_BYTE *)v109 + 40) = 1;
      if (v116.i64[0] < v108)
      {
LABEL_152:
        v190.i64[0] = v110;
        v108 = v110;
      }
    }
    if (v110 <= v107)
    {
      v111 = v109[2];
      if (v111 < v103)
        goto LABEL_162;
LABEL_155:
      if (v111 > v105)
        goto LABEL_156;
LABEL_163:
      v112 = v109[3];
      if (v112 < v108)
        goto LABEL_164;
LABEL_157:
      if (v112 > v107)
        goto LABEL_158;
LABEL_165:
      v113 = v109[4];
      if (v113 < v103)
        goto LABEL_166;
LABEL_159:
      if (v113 > v105)
      {
LABEL_167:
        v191.i64[1] = v113;
        v105 = v113;
      }
    }
    else
    {
      v191.i64[0] = v110;
      v107 = v110;
      v111 = v109[2];
      if (v111 >= v103)
        goto LABEL_155;
LABEL_162:
      v190.i64[1] = v111;
      v103 = v111;
      if (v111 <= v105)
        goto LABEL_163;
LABEL_156:
      v191.i64[1] = v111;
      v105 = v111;
      v112 = v109[3];
      if (v112 >= v108)
        goto LABEL_157;
LABEL_164:
      v190.i64[0] = v112;
      v108 = v112;
      if (v112 <= v107)
        goto LABEL_165;
LABEL_158:
      v191.i64[0] = v112;
      v107 = v112;
      v113 = v109[4];
      if (v113 >= v103)
        goto LABEL_159;
LABEL_166:
      v190.i64[1] = v113;
      v103 = v113;
      if (v113 > v105)
        goto LABEL_167;
    }
    if (++v19 != v20)
      continue;
    break;
  }
  if (!sub_223776EFC(&v190, &v178, &v175, v168 + 1, a5)
    || (sub_223776EFC(&v190, &v178, &v172, v168 + 1, a5) & 1) == 0)
  {
LABEL_300:
    v157 = 0;
    v158 = __p;
    if (!__p)
      goto LABEL_284;
LABEL_283:
    operator delete(v158);
    goto LABEL_284;
  }
LABEL_32:
  v29 = (uint64_t **)v184;
  v30 = v185;
  v31 = (char *)v185 - (_BYTE *)v184;
  if (v21 == v22)
    goto LABEL_217;
  if (v31 < 0x80
    || (unint64_t)((char *)v182 - (_BYTE *)v181) < 0x80
    || v168 > 0x63
    || (unint64_t)(v22 - v21) < 0x79)
  {
    v166 = (char *)v185 - (_BYTE *)v184;
    if (v184 == v185)
    {
LABEL_212:
      v138 = (uint64_t **)v181;
      v139 = v182;
      v140 = v181 == v182 || v21 == v22;
      v31 = v166;
      if (v140)
        goto LABEL_217;
      while (1)
      {
        if (v21 != v22 && !*(_BYTE *)a5)
        {
          v159 = v21 + 8;
LABEL_270:
          v160 = **v138;
          v161 = **((_QWORD **)v159 - 1);
          v162 = *(_QWORD *)(a5 + 8);
          strcpy(v190.i8, "FFFFFFFFF");
          sub_223777F30(v160, v161, (unsigned __int8 *)&v190, v162, v18);
          if (!v190.i8[9])
          {
            v163 = v190.u8[0] != 84 && v190.u8[0] - 48 >= 0xA;
            if (!v163
              || v190.u8[1] == 84
              || v190.u8[1] - 48 <= 9
              || v190.u8[3] == 84
              || v190.u8[3] - 48 < 0xA)
            {
              goto LABEL_282;
            }
          }
          while (v159 != v22)
          {
            v159 += 8;
            if (!*(_BYTE *)a5)
              goto LABEL_270;
          }
          v31 = v166;
        }
        if (++v138 == v139)
          goto LABEL_217;
      }
    }
    v77 = (uint64_t **)v184;
    while (1)
    {
      if (v21 != v22 && !*(_BYTE *)a5)
      {
        v78 = v21 + 8;
LABEL_102:
        v79 = **v77;
        v80 = **((_QWORD **)v78 - 1);
        v81 = *(_QWORD *)(a5 + 8);
        strcpy(v190.i8, "FFFFFFFFF");
        sub_223777F30(v79, v80, (unsigned __int8 *)&v190, v81, v18);
        if (!v190.i8[9])
        {
          v82 = v190.u8[0] != 84 && v190.u8[0] - 48 >= 0xA;
          if (!v82
            || v190.u8[1] == 84
            || v190.u8[1] - 48 <= 9
            || v190.u8[3] == 84
            || v190.u8[3] - 48 < 0xA)
          {
            goto LABEL_282;
          }
        }
        while (v78 != v22)
        {
          v78 += 8;
          if (!*(_BYTE *)a5)
            goto LABEL_102;
        }
      }
      if (++v77 == v30)
        goto LABEL_212;
    }
  }
  v32 = 0x7FFFFFFFFFFFFFFFLL;
  v33 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v34 = 0x8000000000000000;
  v35 = vdupq_n_s64(0x8000000000000000);
  v190 = v33;
  v191 = v35;
  v36 = 0x8000000000000000;
  v37 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v38 = *(_QWORD *)v21;
    if (*(_BYTE *)(*(_QWORD *)v21 + 40))
    {
      v39 = *(_QWORD *)(v38 + 8);
      if (v39 < v37)
        goto LABEL_41;
    }
    else
    {
      v43 = **(int64x2_t ***)v38;
      v44 = *(int64x2_t **)(*(_QWORD *)v38 + 8);
      v45 = (int8x16_t)v33;
      v46 = (int8x16_t)v35;
      if (v43 != v44)
      {
        v48 = *v43;
        v47 = v43 + 1;
        v49 = v48;
        v45 = (int8x16_t)v48;
        if (v47 == v44)
        {
          v46 = (int8x16_t)v49;
        }
        else
        {
          v50 = v49;
          v46 = (int8x16_t)v49;
          do
          {
            v51 = *v47++;
            v52 = (int8x16_t)vcgtq_s64(v49, v51);
            v45 = vbslq_s8(v52, (int8x16_t)v51, v45);
            v49 = (int64x2_t)vbslq_s8(v52, (int8x16_t)v51, (int8x16_t)v49);
            v53 = (int8x16_t)vcgtq_s64(v51, v50);
            v46 = vbslq_s8(v53, (int8x16_t)v51, v46);
            v50 = (int64x2_t)vbslq_s8(v53, (int8x16_t)v51, (int8x16_t)v50);
          }
          while (v47 != v44);
        }
      }
      *(int8x16_t *)(v38 + 8) = v45;
      *(int8x16_t *)(v38 + 24) = v46;
      v39 = v45.i64[0];
      *(_BYTE *)(v38 + 40) = 1;
      if (v45.i64[0] < v37)
      {
LABEL_41:
        v190.i64[0] = v39;
        v37 = v39;
      }
    }
    if (v39 <= v36)
    {
      v40 = *(_QWORD *)(v38 + 16);
      if (v40 < v32)
        goto LABEL_51;
LABEL_44:
      if (v40 > v34)
        goto LABEL_45;
LABEL_52:
      v41 = *(_QWORD *)(v38 + 24);
      if (v41 < v37)
        goto LABEL_53;
LABEL_46:
      if (v41 > v36)
        goto LABEL_47;
LABEL_54:
      v42 = *(_QWORD *)(v38 + 32);
      if (v42 < v32)
        goto LABEL_55;
LABEL_48:
      if (v42 > v34)
      {
LABEL_56:
        v191.i64[1] = v42;
        v34 = v42;
      }
    }
    else
    {
      v191.i64[0] = v39;
      v36 = v39;
      v40 = *(_QWORD *)(v38 + 16);
      if (v40 >= v32)
        goto LABEL_44;
LABEL_51:
      v190.i64[1] = v40;
      v32 = v40;
      if (v40 <= v34)
        goto LABEL_52;
LABEL_45:
      v191.i64[1] = v40;
      v34 = v40;
      v41 = *(_QWORD *)(v38 + 24);
      if (v41 >= v37)
        goto LABEL_46;
LABEL_53:
      v190.i64[0] = v41;
      v37 = v41;
      if (v41 <= v36)
        goto LABEL_54;
LABEL_47:
      v191.i64[0] = v41;
      v36 = v41;
      v42 = *(_QWORD *)(v38 + 32);
      if (v42 >= v32)
        goto LABEL_48;
LABEL_55:
      v190.i64[1] = v42;
      v32 = v42;
      if (v42 > v34)
        goto LABEL_56;
    }
    v21 += 8;
    if (v21 != v22)
      continue;
    break;
  }
  if (!sub_223776EFC(&v190, &v184, &__p, v168 + 1, a5)
    || (sub_223776EFC(&v190, &v181, &__p, v168 + 1, a5) & 1) == 0)
  {
    goto LABEL_300;
  }
LABEL_217:
  if (v31 < 0x80 || v168 > 0x63 || (unint64_t)(v176 - (_BYTE *)v175) < 0x79)
  {
    if (v29 != v30)
    {
      v141 = v176;
      if (v175 != v176)
      {
        v142 = (char *)v175 + 8;
        do
        {
          if (!*(_BYTE *)a5)
          {
            v143 = v142;
LABEL_225:
            v144 = **v29;
            v145 = **((_QWORD **)v143 - 1);
            v146 = *(_QWORD *)(a5 + 8);
            strcpy(v190.i8, "FFFFFFFFF");
            sub_223777F30(v144, v145, (unsigned __int8 *)&v190, v146, v18);
            if (!v190.i8[9])
            {
              v147 = v190.u8[0] != 84 && v190.u8[0] - 48 >= 0xA;
              if (!v147
                || v190.u8[1] == 84
                || v190.u8[1] - 48 <= 9
                || v190.u8[3] == 84
                || v190.u8[3] - 48 < 0xA)
              {
                goto LABEL_282;
              }
            }
            while (v143 != v141)
            {
              v143 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_225;
            }
          }
          ++v29;
        }
        while (v29 != v30);
      }
    }
  }
  else if ((sub_223776EFC(&v188, &v184, &v175, v168 + 1, a5) & 1) == 0)
  {
    goto LABEL_300;
  }
  v149 = (uint64_t **)v181;
  v148 = v182;
  if ((unint64_t)((char *)v182 - (_BYTE *)v181) < 0x80
    || v168 > 0x63
    || (unint64_t)(v173 - (_BYTE *)v172) < 0x79)
  {
    if (v181 != v182)
    {
      v150 = v173;
      if (v172 != v173)
      {
        v151 = (char *)v172 + 8;
        do
        {
          if (!*(_BYTE *)a5)
          {
            v152 = v151;
LABEL_248:
            v153 = **v149;
            v154 = **((_QWORD **)v152 - 1);
            v155 = *(_QWORD *)(a5 + 8);
            strcpy(v190.i8, "FFFFFFFFF");
            sub_223777F30(v153, v154, (unsigned __int8 *)&v190, v155, v18);
            if (!v190.i8[9])
            {
              v156 = v190.u8[0] != 84 && v190.u8[0] - 48 >= 0xA;
              if (!v156
                || v190.u8[1] == 84
                || v190.u8[1] - 48 <= 9
                || v190.u8[3] == 84
                || v190.u8[3] - 48 < 0xA)
              {
                goto LABEL_282;
              }
            }
            while (v152 != v150)
            {
              v152 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_248;
            }
          }
          ++v149;
        }
        while (v149 != v148);
      }
    }
  }
  else if ((sub_223776EFC(v187, &v181, &v172, v168 + 1, a5) & 1) == 0)
  {
    goto LABEL_300;
  }
  v157 = 1;
  v158 = __p;
  if (__p)
    goto LABEL_283;
LABEL_284:
  if (v172)
    operator delete(v172);
  if (v175)
    operator delete(v175);
  if (v178)
    operator delete(v178);
  if (v181)
    operator delete(v181);
  if (v184)
    operator delete(v184);
  return v157;
}

void sub_223776E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (__p)
  {
    operator delete(__p);
    v29 = a16;
    if (!a16)
    {
LABEL_3:
      v30 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v29 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = a19;
  if (!a19)
  {
LABEL_4:
    v31 = a22;
    if (!a22)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v30);
  v31 = a22;
  if (!a22)
  {
LABEL_5:
    v32 = a25;
    if (!a25)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v31);
  v32 = a25;
  if (!a25)
  {
LABEL_6:
    v33 = a28;
    if (!a28)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v32);
  v33 = a28;
  if (!a28)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223776EFC(uint64_t a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __n128 v15;
  uint64_t **v16;
  uint64_t **v17;
  char *v18;
  char *v19;
  uint64_t **v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  int64_t v31;
  int64x2_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64x2_t *v40;
  int64x2_t *v41;
  int8x16_t v42;
  int8x16_t v43;
  int64x2_t *v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint64_t v51;
  int64x2_t v52;
  int64_t v53;
  int64x2_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64x2_t *v63;
  int64x2_t *v64;
  int8x16_t v65;
  int8x16_t v66;
  int64x2_t *v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t **v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  int64x2_t v80;
  int64x2_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64x2_t *v88;
  int64x2_t *v89;
  int8x16_t v90;
  int8x16_t v91;
  int64x2_t *v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int8x16_t v97;
  int8x16_t v98;
  char *v99;
  uint64_t v100;
  int64x2_t v101;
  int64_t v102;
  int64x2_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int64_t v110;
  int64x2_t *v111;
  int64x2_t *v112;
  int8x16_t v113;
  int8x16_t v114;
  int64x2_t *v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int8x16_t v120;
  int8x16_t v121;
  uint64_t **v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  uint64_t **v135;
  uint64_t **v136;
  BOOL v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t **v145;
  uint64_t **v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  void *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  void *__p;
  char *v167;
  uint64_t v168;
  void *v169;
  char *v170;
  uint64_t v171;
  void *v172;
  char *v173;
  uint64_t v174;
  void *v175;
  uint64_t **v176;
  uint64_t v177;
  void *v178;
  uint64_t **v179;
  uint64_t v180;
  void *v181;
  uint64_t **v182;
  uint64_t v183;
  __int128 v184[2];
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  int64x2_t v188;
  int64x2_t v189;
  uint64_t v190;

  v190 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 24);
  if (&v185 != (__int128 *)a1)
  {
    v185 = *(_OWORD *)a1;
    v186 = *(_QWORD *)(a1 + 16);
  }
  if (v184 != (__int128 *)a1)
  {
    *(_QWORD *)&v184[0] = *(_QWORD *)a1;
    v184[1] = *(_OWORD *)(a1 + 16);
  }
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = v9 + 1;
  v11 = v10 >> 1;
  if (v8 >= 0)
    v12 = v8;
  else
    v12 = v8 + 1;
  v13 = v12 >> 1;
  v14 = v9 - 2 * v11 + v8 - 2 * v13;
  v187 = v11 + v13 + ((v14 + ((v14 & 0x80) >> 7)) << 24 >> 25);
  *((_QWORD *)&v184[0] + 1) = v187;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  __p = 0;
  v167 = 0;
  v168 = 0;
  sub_223774D90(&v185, v184, a2, (char **)&v181, (char **)&v178, (char **)&v175);
  sub_223774D90(&v185, v184, a3, (char **)&v172, (char **)&v169, (char **)&__p);
  v16 = (uint64_t **)v175;
  v17 = v176;
  v18 = (char *)__p;
  v165 = a4;
  if (v175 == v176)
  {
    v19 = v167;
    goto LABEL_32;
  }
  v19 = v167;
  v162 = (char *)v176 - (_BYTE *)v175;
  if ((unint64_t)((char *)v176 - (_BYTE *)v175) < 0x80
    || a4 > 0x63
    || (unint64_t)(v167 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v167)
    {
      v20 = (uint64_t **)v175;
      do
      {
        if (!*(_BYTE *)a5)
        {
          v21 = v18 + 8;
LABEL_19:
          v22 = **v20;
          v23 = **((_QWORD **)v21 - 1);
          v24 = *(_QWORD *)(a5 + 8);
          strcpy(v188.i8, "FFFFFFFFF");
          sub_223777F30(v22, v23, (unsigned __int8 *)&v188, v24, v15);
          if (!v188.i8[9])
          {
            v25 = v188.u8[0] != 84 && v188.u8[0] - 48 >= 0xA;
            if (!v25
              || v188.u8[1] == 84
              || v188.u8[1] - 48 <= 9
              || v188.u8[3] == 84
              || v188.u8[3] - 48 < 0xA)
            {
LABEL_282:
              v154 = 0;
              *(_BYTE *)a5 = 1;
              v155 = __p;
              if (!__p)
                goto LABEL_284;
              goto LABEL_283;
            }
          }
          while (v21 != v19)
          {
            v21 += 8;
            if (!*(_BYTE *)a5)
              goto LABEL_19;
          }
        }
        ++v20;
      }
      while (v20 != v17);
    }
    goto LABEL_144;
  }
  v51 = 0x7FFFFFFFFFFFFFFFLL;
  v52 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v53 = 0x8000000000000000;
  v54 = vdupq_n_s64(0x8000000000000000);
  v188 = v52;
  v189 = v54;
  v55 = 0x8000000000000000;
  v56 = 0x7FFFFFFFFFFFFFFFLL;
  v57 = (uint64_t **)v175;
  do
  {
    v58 = *v57;
    if (*((_BYTE *)*v57 + 40))
    {
      v59 = v58[1];
      if (v59 >= v56)
        goto LABEL_72;
LABEL_71:
      v188.i64[0] = v59;
      v56 = v59;
      goto LABEL_72;
    }
    v63 = *(int64x2_t **)*v58;
    v64 = *(int64x2_t **)(*v58 + 8);
    v65 = (int8x16_t)v52;
    v66 = (int8x16_t)v54;
    if (v63 != v64)
    {
      v68 = *v63;
      v67 = v63 + 1;
      v69 = v68;
      v65 = (int8x16_t)v68;
      if (v67 == v64)
      {
        v66 = (int8x16_t)v69;
      }
      else
      {
        v70 = v69;
        v66 = (int8x16_t)v69;
        do
        {
          v71 = *v67++;
          v72 = (int8x16_t)vcgtq_s64(v69, v71);
          v65 = vbslq_s8(v72, (int8x16_t)v71, v65);
          v69 = (int64x2_t)vbslq_s8(v72, (int8x16_t)v71, (int8x16_t)v69);
          v73 = (int8x16_t)vcgtq_s64(v71, v70);
          v66 = vbslq_s8(v73, (int8x16_t)v71, v66);
          v70 = (int64x2_t)vbslq_s8(v73, (int8x16_t)v71, (int8x16_t)v70);
        }
        while (v67 != v64);
      }
    }
    *(int8x16_t *)(v58 + 1) = v65;
    *(int8x16_t *)(v58 + 3) = v66;
    v59 = v65.i64[0];
    *((_BYTE *)v58 + 40) = 1;
    if (v65.i64[0] < v56)
      goto LABEL_71;
LABEL_72:
    if (v59 <= v55)
    {
      v60 = v58[2];
      if (v60 >= v51)
      {
LABEL_74:
        if (v60 > v53)
          goto LABEL_75;
        goto LABEL_82;
      }
    }
    else
    {
      v189.i64[0] = v59;
      v55 = v59;
      v60 = v58[2];
      if (v60 >= v51)
        goto LABEL_74;
    }
    v188.i64[1] = v60;
    v51 = v60;
    if (v60 > v53)
    {
LABEL_75:
      v189.i64[1] = v60;
      v53 = v60;
      v61 = v58[3];
      if (v61 >= v56)
        goto LABEL_76;
      goto LABEL_83;
    }
LABEL_82:
    v61 = v58[3];
    if (v61 >= v56)
    {
LABEL_76:
      if (v61 > v55)
        goto LABEL_77;
      goto LABEL_84;
    }
LABEL_83:
    v188.i64[0] = v61;
    v56 = v61;
    if (v61 > v55)
    {
LABEL_77:
      v189.i64[0] = v61;
      v55 = v61;
      v62 = v58[4];
      if (v62 < v51)
        goto LABEL_85;
      goto LABEL_78;
    }
LABEL_84:
    v62 = v58[4];
    if (v62 < v51)
    {
LABEL_85:
      v188.i64[1] = v62;
      v51 = v62;
      if (v62 <= v53)
        goto LABEL_68;
      goto LABEL_86;
    }
LABEL_78:
    if (v62 <= v53)
      goto LABEL_68;
LABEL_86:
    v189.i64[1] = v62;
    v53 = v62;
LABEL_68:
    ++v57;
  }
  while (v57 != v17);
  if (v18 != v19)
  {
    v80 = vdupq_n_s64(0x8000000000000000);
    v81 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v82 = v18;
    while (1)
    {
      v83 = *(_QWORD *)v82;
      if (*(_BYTE *)(*(_QWORD *)v82 + 40))
        break;
      v88 = **(int64x2_t ***)v83;
      v89 = *(int64x2_t **)(*(_QWORD *)v83 + 8);
      v90 = (int8x16_t)v81;
      v91 = (int8x16_t)v80;
      if (v88 != v89)
      {
        v93 = *v88;
        v92 = v88 + 1;
        v94 = v93;
        v90 = (int8x16_t)v93;
        if (v92 == v89)
        {
          v91 = (int8x16_t)v94;
        }
        else
        {
          v95 = v94;
          v91 = (int8x16_t)v94;
          do
          {
            v96 = *v92++;
            v97 = (int8x16_t)vcgtq_s64(v94, v96);
            v90 = vbslq_s8(v97, (int8x16_t)v96, v90);
            v94 = (int64x2_t)vbslq_s8(v97, (int8x16_t)v96, (int8x16_t)v94);
            v98 = (int8x16_t)vcgtq_s64(v96, v95);
            v91 = vbslq_s8(v98, (int8x16_t)v96, v91);
            v95 = (int64x2_t)vbslq_s8(v98, (int8x16_t)v96, (int8x16_t)v95);
          }
          while (v92 != v89);
        }
      }
      *(int8x16_t *)(v83 + 8) = v90;
      *(int8x16_t *)(v83 + 24) = v91;
      v84 = v90.i64[0];
      *(_BYTE *)(v83 + 40) = 1;
      if (v90.i64[0] < v56)
        goto LABEL_119;
LABEL_120:
      if (v84 <= v55)
      {
        v85 = *(_QWORD *)(v83 + 16);
        if (v85 >= v51)
        {
LABEL_122:
          if (v85 > v53)
            goto LABEL_123;
          goto LABEL_130;
        }
      }
      else
      {
        v189.i64[0] = v84;
        v55 = v84;
        v85 = *(_QWORD *)(v83 + 16);
        if (v85 >= v51)
          goto LABEL_122;
      }
      v188.i64[1] = v85;
      v51 = v85;
      if (v85 > v53)
      {
LABEL_123:
        v189.i64[1] = v85;
        v53 = v85;
        v86 = *(_QWORD *)(v83 + 24);
        if (v86 >= v56)
          goto LABEL_124;
        goto LABEL_131;
      }
LABEL_130:
      v86 = *(_QWORD *)(v83 + 24);
      if (v86 >= v56)
      {
LABEL_124:
        if (v86 > v55)
          goto LABEL_125;
        goto LABEL_132;
      }
LABEL_131:
      v188.i64[0] = v86;
      v56 = v86;
      if (v86 > v55)
      {
LABEL_125:
        v189.i64[0] = v86;
        v55 = v86;
        v87 = *(_QWORD *)(v83 + 32);
        if (v87 >= v51)
          goto LABEL_126;
        goto LABEL_133;
      }
LABEL_132:
      v87 = *(_QWORD *)(v83 + 32);
      if (v87 >= v51)
      {
LABEL_126:
        if (v87 > v53)
          goto LABEL_134;
        goto LABEL_116;
      }
LABEL_133:
      v188.i64[1] = v87;
      v51 = v87;
      if (v87 > v53)
      {
LABEL_134:
        v189.i64[1] = v87;
        v53 = v87;
      }
LABEL_116:
      v82 += 8;
      if (v82 == v19)
        goto LABEL_143;
    }
    v84 = *(_QWORD *)(v83 + 8);
    if (v84 >= v56)
      goto LABEL_120;
LABEL_119:
    v188.i64[0] = v84;
    v56 = v84;
    goto LABEL_120;
  }
LABEL_143:
  if ((sub_223775ED0((__int128 *)v188.i8, (uint64_t **)&v175, (uint64_t **)&__p, a4 + 1, a5) & 1) == 0)
    goto LABEL_300;
LABEL_144:
  v99 = v173;
  if ((unint64_t)(v173 - (_BYTE *)v172) < 0x80
    || (unint64_t)(v170 - (_BYTE *)v169) < 0x80
    || v165 > 0x63
    || v162 < 0x79)
  {
    if (v172 == v173)
    {
LABEL_194:
      v128 = v170;
      if (v169 == v170)
        goto LABEL_32;
      v129 = (char *)v169 + 8;
      while (1)
      {
        if (!*(_BYTE *)a5)
        {
          v130 = v129;
LABEL_200:
          v131 = **v16;
          v132 = **((_QWORD **)v130 - 1);
          v133 = *(_QWORD *)(a5 + 8);
          strcpy(v188.i8, "FFFFFFFFF");
          sub_223777F30(v131, v132, (unsigned __int8 *)&v188, v133, v15);
          if (!v188.i8[9])
          {
            v134 = v188.u8[0] != 84 && v188.u8[0] - 48 >= 0xA;
            if (!v134
              || v188.u8[1] == 84
              || v188.u8[1] - 48 <= 9
              || v188.u8[3] == 84
              || v188.u8[3] - 48 < 0xA)
            {
              goto LABEL_282;
            }
          }
          while (v130 != v128)
          {
            v130 += 8;
            if (!*(_BYTE *)a5)
              goto LABEL_200;
          }
        }
        if (++v16 == v17)
          goto LABEL_32;
      }
    }
    v164 = (char *)v172 + 8;
    v122 = v16;
    while (1)
    {
      if (!*(_BYTE *)a5)
      {
        v123 = v164;
LABEL_182:
        v124 = **v122;
        v125 = **((_QWORD **)v123 - 1);
        v126 = *(_QWORD *)(a5 + 8);
        strcpy(v188.i8, "FFFFFFFFF");
        sub_223777F30(v124, v125, (unsigned __int8 *)&v188, v126, v15);
        if (!v188.i8[9])
        {
          v127 = v188.u8[0] != 84 && v188.u8[0] - 48 >= 0xA;
          if (!v127
            || v188.u8[1] == 84
            || v188.u8[1] - 48 <= 9
            || v188.u8[3] == 84
            || v188.u8[3] - 48 < 0xA)
          {
            goto LABEL_282;
          }
        }
        while (v123 != v99)
        {
          v123 += 8;
          if (!*(_BYTE *)a5)
            goto LABEL_182;
        }
      }
      if (++v122 == v17)
        goto LABEL_194;
    }
  }
  v100 = 0x7FFFFFFFFFFFFFFFLL;
  v101 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v102 = 0x8000000000000000;
  v103 = vdupq_n_s64(0x8000000000000000);
  v188 = v101;
  v189 = v103;
  v104 = 0x8000000000000000;
  v105 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v106 = *v16;
    if (*((_BYTE *)*v16 + 40))
    {
      v107 = v106[1];
      if (v107 < v105)
        goto LABEL_152;
    }
    else
    {
      v111 = *(int64x2_t **)*v106;
      v112 = *(int64x2_t **)(*v106 + 8);
      v113 = (int8x16_t)v101;
      v114 = (int8x16_t)v103;
      if (v111 != v112)
      {
        v116 = *v111;
        v115 = v111 + 1;
        v117 = v116;
        v113 = (int8x16_t)v116;
        if (v115 == v112)
        {
          v114 = (int8x16_t)v117;
        }
        else
        {
          v118 = v117;
          v114 = (int8x16_t)v117;
          do
          {
            v119 = *v115++;
            v120 = (int8x16_t)vcgtq_s64(v117, v119);
            v113 = vbslq_s8(v120, (int8x16_t)v119, v113);
            v117 = (int64x2_t)vbslq_s8(v120, (int8x16_t)v119, (int8x16_t)v117);
            v121 = (int8x16_t)vcgtq_s64(v119, v118);
            v114 = vbslq_s8(v121, (int8x16_t)v119, v114);
            v118 = (int64x2_t)vbslq_s8(v121, (int8x16_t)v119, (int8x16_t)v118);
          }
          while (v115 != v112);
        }
      }
      *(int8x16_t *)(v106 + 1) = v113;
      *(int8x16_t *)(v106 + 3) = v114;
      v107 = v113.i64[0];
      *((_BYTE *)v106 + 40) = 1;
      if (v113.i64[0] < v105)
      {
LABEL_152:
        v188.i64[0] = v107;
        v105 = v107;
      }
    }
    if (v107 <= v104)
    {
      v108 = v106[2];
      if (v108 < v100)
        goto LABEL_162;
LABEL_155:
      if (v108 > v102)
        goto LABEL_156;
LABEL_163:
      v109 = v106[3];
      if (v109 < v105)
        goto LABEL_164;
LABEL_157:
      if (v109 > v104)
        goto LABEL_158;
LABEL_165:
      v110 = v106[4];
      if (v110 < v100)
        goto LABEL_166;
LABEL_159:
      if (v110 > v102)
      {
LABEL_167:
        v189.i64[1] = v110;
        v102 = v110;
      }
    }
    else
    {
      v189.i64[0] = v107;
      v104 = v107;
      v108 = v106[2];
      if (v108 >= v100)
        goto LABEL_155;
LABEL_162:
      v188.i64[1] = v108;
      v100 = v108;
      if (v108 <= v102)
        goto LABEL_163;
LABEL_156:
      v189.i64[1] = v108;
      v102 = v108;
      v109 = v106[3];
      if (v109 >= v105)
        goto LABEL_157;
LABEL_164:
      v188.i64[0] = v109;
      v105 = v109;
      if (v109 <= v104)
        goto LABEL_165;
LABEL_158:
      v189.i64[0] = v109;
      v104 = v109;
      v110 = v106[4];
      if (v110 >= v100)
        goto LABEL_159;
LABEL_166:
      v188.i64[1] = v110;
      v100 = v110;
      if (v110 > v102)
        goto LABEL_167;
    }
    if (++v16 != v17)
      continue;
    break;
  }
  if (!sub_223775ED0((__int128 *)v188.i8, (uint64_t **)&v175, (uint64_t **)&v172, v165 + 1, a5)
    || (sub_223775ED0((__int128 *)v188.i8, (uint64_t **)&v175, (uint64_t **)&v169, v165 + 1, a5) & 1) == 0)
  {
LABEL_300:
    v154 = 0;
    v155 = __p;
    if (!__p)
      goto LABEL_284;
LABEL_283:
    operator delete(v155);
    goto LABEL_284;
  }
LABEL_32:
  v26 = (uint64_t **)v181;
  v27 = v182;
  v28 = (char *)v182 - (_BYTE *)v181;
  if (v18 == v19)
    goto LABEL_217;
  if (v28 < 0x80
    || (unint64_t)((char *)v179 - (_BYTE *)v178) < 0x80
    || v165 > 0x63
    || (unint64_t)(v19 - v18) < 0x79)
  {
    v163 = (char *)v182 - (_BYTE *)v181;
    if (v181 == v182)
    {
LABEL_212:
      v135 = (uint64_t **)v178;
      v136 = v179;
      v137 = v178 == v179 || v18 == v19;
      v28 = v163;
      if (v137)
        goto LABEL_217;
      while (1)
      {
        if (v18 != v19 && !*(_BYTE *)a5)
        {
          v156 = v18 + 8;
LABEL_270:
          v157 = **v135;
          v158 = **((_QWORD **)v156 - 1);
          v159 = *(_QWORD *)(a5 + 8);
          strcpy(v188.i8, "FFFFFFFFF");
          sub_223777F30(v157, v158, (unsigned __int8 *)&v188, v159, v15);
          if (!v188.i8[9])
          {
            v160 = v188.u8[0] != 84 && v188.u8[0] - 48 >= 0xA;
            if (!v160
              || v188.u8[1] == 84
              || v188.u8[1] - 48 <= 9
              || v188.u8[3] == 84
              || v188.u8[3] - 48 < 0xA)
            {
              goto LABEL_282;
            }
          }
          while (v156 != v19)
          {
            v156 += 8;
            if (!*(_BYTE *)a5)
              goto LABEL_270;
          }
          v28 = v163;
        }
        if (++v135 == v136)
          goto LABEL_217;
      }
    }
    v74 = (uint64_t **)v181;
    while (1)
    {
      if (v18 != v19 && !*(_BYTE *)a5)
      {
        v75 = v18 + 8;
LABEL_102:
        v76 = **v74;
        v77 = **((_QWORD **)v75 - 1);
        v78 = *(_QWORD *)(a5 + 8);
        strcpy(v188.i8, "FFFFFFFFF");
        sub_223777F30(v76, v77, (unsigned __int8 *)&v188, v78, v15);
        if (!v188.i8[9])
        {
          v79 = v188.u8[0] != 84 && v188.u8[0] - 48 >= 0xA;
          if (!v79
            || v188.u8[1] == 84
            || v188.u8[1] - 48 <= 9
            || v188.u8[3] == 84
            || v188.u8[3] - 48 < 0xA)
          {
            goto LABEL_282;
          }
        }
        while (v75 != v19)
        {
          v75 += 8;
          if (!*(_BYTE *)a5)
            goto LABEL_102;
        }
      }
      if (++v74 == v27)
        goto LABEL_212;
    }
  }
  v29 = 0x7FFFFFFFFFFFFFFFLL;
  v30 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v31 = 0x8000000000000000;
  v32 = vdupq_n_s64(0x8000000000000000);
  v188 = v30;
  v189 = v32;
  v33 = 0x8000000000000000;
  v34 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v35 = *(_QWORD *)v18;
    if (*(_BYTE *)(*(_QWORD *)v18 + 40))
    {
      v36 = *(_QWORD *)(v35 + 8);
      if (v36 < v34)
        goto LABEL_41;
    }
    else
    {
      v40 = **(int64x2_t ***)v35;
      v41 = *(int64x2_t **)(*(_QWORD *)v35 + 8);
      v42 = (int8x16_t)v30;
      v43 = (int8x16_t)v32;
      if (v40 != v41)
      {
        v45 = *v40;
        v44 = v40 + 1;
        v46 = v45;
        v42 = (int8x16_t)v45;
        if (v44 == v41)
        {
          v43 = (int8x16_t)v46;
        }
        else
        {
          v47 = v46;
          v43 = (int8x16_t)v46;
          do
          {
            v48 = *v44++;
            v49 = (int8x16_t)vcgtq_s64(v46, v48);
            v42 = vbslq_s8(v49, (int8x16_t)v48, v42);
            v46 = (int64x2_t)vbslq_s8(v49, (int8x16_t)v48, (int8x16_t)v46);
            v50 = (int8x16_t)vcgtq_s64(v48, v47);
            v43 = vbslq_s8(v50, (int8x16_t)v48, v43);
            v47 = (int64x2_t)vbslq_s8(v50, (int8x16_t)v48, (int8x16_t)v47);
          }
          while (v44 != v41);
        }
      }
      *(int8x16_t *)(v35 + 8) = v42;
      *(int8x16_t *)(v35 + 24) = v43;
      v36 = v42.i64[0];
      *(_BYTE *)(v35 + 40) = 1;
      if (v42.i64[0] < v34)
      {
LABEL_41:
        v188.i64[0] = v36;
        v34 = v36;
      }
    }
    if (v36 <= v33)
    {
      v37 = *(_QWORD *)(v35 + 16);
      if (v37 < v29)
        goto LABEL_51;
LABEL_44:
      if (v37 > v31)
        goto LABEL_45;
LABEL_52:
      v38 = *(_QWORD *)(v35 + 24);
      if (v38 < v34)
        goto LABEL_53;
LABEL_46:
      if (v38 > v33)
        goto LABEL_47;
LABEL_54:
      v39 = *(_QWORD *)(v35 + 32);
      if (v39 < v29)
        goto LABEL_55;
LABEL_48:
      if (v39 > v31)
      {
LABEL_56:
        v189.i64[1] = v39;
        v31 = v39;
      }
    }
    else
    {
      v189.i64[0] = v36;
      v33 = v36;
      v37 = *(_QWORD *)(v35 + 16);
      if (v37 >= v29)
        goto LABEL_44;
LABEL_51:
      v188.i64[1] = v37;
      v29 = v37;
      if (v37 <= v31)
        goto LABEL_52;
LABEL_45:
      v189.i64[1] = v37;
      v31 = v37;
      v38 = *(_QWORD *)(v35 + 24);
      if (v38 >= v34)
        goto LABEL_46;
LABEL_53:
      v188.i64[0] = v38;
      v34 = v38;
      if (v38 <= v33)
        goto LABEL_54;
LABEL_47:
      v189.i64[0] = v38;
      v33 = v38;
      v39 = *(_QWORD *)(v35 + 32);
      if (v39 >= v29)
        goto LABEL_48;
LABEL_55:
      v188.i64[1] = v39;
      v29 = v39;
      if (v39 > v31)
        goto LABEL_56;
    }
    v18 += 8;
    if (v18 != v19)
      continue;
    break;
  }
  if (!sub_223775ED0((__int128 *)v188.i8, (uint64_t **)&v181, (uint64_t **)&__p, v165 + 1, a5)
    || (sub_223775ED0((__int128 *)v188.i8, (uint64_t **)&v178, (uint64_t **)&__p, v165 + 1, a5) & 1) == 0)
  {
    goto LABEL_300;
  }
LABEL_217:
  if (v28 < 0x80 || v165 > 0x63 || (unint64_t)(v173 - (_BYTE *)v172) < 0x79)
  {
    if (v26 != v27)
    {
      v138 = v173;
      if (v172 != v173)
      {
        v139 = (char *)v172 + 8;
        do
        {
          if (!*(_BYTE *)a5)
          {
            v140 = v139;
LABEL_225:
            v141 = **v26;
            v142 = **((_QWORD **)v140 - 1);
            v143 = *(_QWORD *)(a5 + 8);
            strcpy(v188.i8, "FFFFFFFFF");
            sub_223777F30(v141, v142, (unsigned __int8 *)&v188, v143, v15);
            if (!v188.i8[9])
            {
              v144 = v188.u8[0] != 84 && v188.u8[0] - 48 >= 0xA;
              if (!v144
                || v188.u8[1] == 84
                || v188.u8[1] - 48 <= 9
                || v188.u8[3] == 84
                || v188.u8[3] - 48 < 0xA)
              {
                goto LABEL_282;
              }
            }
            while (v140 != v138)
            {
              v140 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_225;
            }
          }
          ++v26;
        }
        while (v26 != v27);
      }
    }
  }
  else if ((sub_223775ED0(&v185, (uint64_t **)&v181, (uint64_t **)&v172, v165 + 1, a5) & 1) == 0)
  {
    goto LABEL_300;
  }
  v146 = (uint64_t **)v178;
  v145 = v179;
  if ((unint64_t)((char *)v179 - (_BYTE *)v178) < 0x80
    || v165 > 0x63
    || (unint64_t)(v170 - (_BYTE *)v169) < 0x79)
  {
    if (v178 != v179)
    {
      v147 = v170;
      if (v169 != v170)
      {
        v148 = (char *)v169 + 8;
        do
        {
          if (!*(_BYTE *)a5)
          {
            v149 = v148;
LABEL_248:
            v150 = **v146;
            v151 = **((_QWORD **)v149 - 1);
            v152 = *(_QWORD *)(a5 + 8);
            strcpy(v188.i8, "FFFFFFFFF");
            sub_223777F30(v150, v151, (unsigned __int8 *)&v188, v152, v15);
            if (!v188.i8[9])
            {
              v153 = v188.u8[0] != 84 && v188.u8[0] - 48 >= 0xA;
              if (!v153
                || v188.u8[1] == 84
                || v188.u8[1] - 48 <= 9
                || v188.u8[3] == 84
                || v188.u8[3] - 48 < 0xA)
              {
                goto LABEL_282;
              }
            }
            while (v149 != v147)
            {
              v149 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_248;
            }
          }
          ++v146;
        }
        while (v146 != v145);
      }
    }
  }
  else if ((sub_223775ED0(v184, (uint64_t **)&v178, (uint64_t **)&v169, v165 + 1, a5) & 1) == 0)
  {
    goto LABEL_300;
  }
  v154 = 1;
  v155 = __p;
  if (__p)
    goto LABEL_283;
LABEL_284:
  if (v169)
    operator delete(v169);
  if (v172)
    operator delete(v172);
  if (v175)
    operator delete(v175);
  if (v178)
    operator delete(v178);
  if (v181)
    operator delete(v181);
  return v154;
}

void sub_223777E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (__p)
  {
    operator delete(__p);
    v29 = a16;
    if (!a16)
    {
LABEL_3:
      v30 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v29 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = a19;
  if (!a19)
  {
LABEL_4:
    v31 = a22;
    if (!a22)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v30);
  v31 = a22;
  if (!a22)
  {
LABEL_5:
    v32 = a25;
    if (!a25)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v31);
  v32 = a25;
  if (!a25)
  {
LABEL_6:
    v33 = a28;
    if (!a28)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v32);
  v33 = a28;
  if (!a28)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_223777F30(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, __n128 a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  __n128 *v26;
  unsigned __int8 **v27;
  unsigned __int8 **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 *v32;
  unsigned __int8 **v33;
  unsigned __int8 **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  int v41;
  _BOOL4 v42;
  int v43;
  int v44;
  char *v45;
  _QWORD *v46;
  char v47;
  int v48;
  int v49;
  int v50;
  _DWORD *v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  _BOOL4 v58;
  int v59;
  unsigned __int8 *v60[3];
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  int64x2_t v71;
  int64x2_t v72;
  uint64_t v73;
  void *__p[3];
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  unsigned __int8 **v81;
  void **v82;
  unsigned __int8 **v83;
  uint64_t v84;
  uint64_t v85;

  if (a3[9])
    return;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v60[0] = a3;
  v60[1] = (unsigned __int8 *)a1;
  v60[2] = (unsigned __int8 *)a2;
  v64 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (v10 - *(_QWORD *)a1) >> 4;
  if (v10 == *(_QWORD *)a1)
    v12 = 0;
  else
    v12 = v11 + 1;
  if (v12 >= 2)
  {
    v77 = *(uint64_t **)(a1 + 8);
    *(_QWORD *)&v78 = v9;
    *((_QWORD *)&v78 + 1) = v10;
    v79 = v11;
    v80 = v12;
    v71.i64[0] = v9;
    v71.i64[1] = v9;
    v72.i64[0] = v10;
    v72.i64[1] = v11;
    v73 = 0;
    *(_QWORD *)&v75 = 0;
    *((_QWORD *)&v75 + 1) = -1;
    v76 = -1;
    sub_223779E14((uint64_t)&v68, (uint64_t *)&v77, (uint64_t)&v71, &v75);
  }
  v13 = 0;
  v66 = 0;
  v14 = *(_QWORD *)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = (v15 - *(_QWORD *)a2) >> 4;
  if (v15 == *(_QWORD *)a2)
    v17 = 0;
  else
    v17 = v16 + 1;
  if (v17 >= 2)
  {
    v77 = *(uint64_t **)(a2 + 8);
    *(_QWORD *)&v78 = v14;
    *((_QWORD *)&v78 + 1) = v15;
    v79 = v16;
    v80 = v17;
    v71.i64[0] = v14;
    v71.i64[1] = v14;
    v72.i64[0] = v15;
    v72.i64[1] = v16;
    v73 = 0;
    *(_QWORD *)&v75 = 1;
    *((_QWORD *)&v75 + 1) = -1;
    v76 = -1;
    sub_223779E14((uint64_t)&v65, (uint64_t *)&v77, (uint64_t)&v71, &v75);
    v13 = v65;
  }
  LODWORD(v77) = 0;
  *(_QWORD *)&v78 = a1;
  DWORD2(v78) = 1;
  v79 = a2;
  v80 = a4;
  v81 = (unsigned __int8 **)&v64;
  v82 = &v61;
  v83 = v60;
  v18 = v68;
  v19 = v69;
  if (0xEEEEEEEEEEEEEEEFLL * (v69 - v68) < 0x11 || 0xEEEEEEEEEEEEEEEFLL * (v66 - v13) < 0x11)
  {
    if (v68 != v69)
    {
      v20 = v66;
      if (v13 != v66)
      {
        v21 = v68;
LABEL_22:
        v22 = v13;
        while (1)
        {
          if (v21[6] >= v22[4] && v21[4] <= v22[6])
          {
            v23 = v21[7] >= v22[5] && v21[5] <= v22[7];
            if (v23
              && !sub_22377BCFC(0, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v21, 1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)v22, a4, (uint64_t)&v64, &v61, v60))
            {
              break;
            }
          }
          v22 += 15;
          if (v22 == v20)
          {
            v21 += 15;
            if (v21 == v19)
              break;
            goto LABEL_22;
          }
        }
      }
    }
  }
  else
  {
    v75 = 0uLL;
    v76 = 0;
    memset(__p, 0, sizeof(__p));
    v71 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v72 = vdupq_n_s64(0x8000000000000000);
    sub_22376AE7C(&v68, v71.i64, (char **)&v75);
    sub_22376AE7C(&v65, v71.i64, (char **)__p);
    sub_22377A2FC((uint64_t)&v71, &v75, __p, 0, (uint64_t)&v77);
    if (__p[0])
      operator delete(__p[0]);
    if ((_QWORD)v75)
      operator delete((void *)v75);
  }
  if (v13)
    operator delete(v13);
  if (v18)
    operator delete(v18);
  v24 = v61;
  if (a3[9])
    goto LABEL_146;
  v25 = v62;
  if (v61 != v62)
    goto LABEL_38;
  v26 = *(__n128 **)a1;
  if (*a3 == 70 || a3[3] == 70)
  {
    if (v26 != *(__n128 **)(a1 + 8))
    {
      a5 = *v26;
      v71 = *(int64x2_t *)v26;
      v28 = *(unsigned __int8 ***)a2;
      v27 = *(unsigned __int8 ***)(a2 + 8);
      v29 = (uint64_t)v27 - *(_QWORD *)a2;
      if ((unint64_t)v29 >= 0x30)
      {
        v30 = v29 >> 4;
        v31 = v27 == v28 ? 0 : v30 + 1;
        v77 = *(uint64_t **)(a2 + 8);
        *(_QWORD *)&v78 = v28;
        *((_QWORD *)&v78 + 1) = v27;
        v79 = v30;
        v80 = v31;
        v81 = v28;
        v82 = (void **)v28;
        v83 = v27;
        v84 = v30;
        v85 = 0;
        if ((int)sub_2237743EC(v71.i64, &v77) >= 1)
        {
          if (*a3 - 58 <= 0xFFFFFFF7)
            *a3 = 50;
          if (a3[3] - 58 <= 0xFFFFFFF6)
            a3[3] = 49;
        }
      }
    }
    v24 = v61;
    if (a3[9])
      goto LABEL_146;
  }
  v25 = v62;
  if (v24 == v62)
  {
    v32 = *(__n128 **)a2;
    if (*a3 == 70 || a3[1] == 70)
    {
      if (v32 != *(__n128 **)(a2 + 8))
      {
        a5 = *v32;
        v71 = *(int64x2_t *)v32;
        v34 = *(unsigned __int8 ***)a1;
        v33 = *(unsigned __int8 ***)(a1 + 8);
        v35 = (uint64_t)v33 - *(_QWORD *)a1;
        if ((unint64_t)v35 >= 0x30)
        {
          v36 = v35 >> 4;
          v37 = v33 == v34 ? 0 : v36 + 1;
          v77 = *(uint64_t **)(a1 + 8);
          *(_QWORD *)&v78 = v34;
          *((_QWORD *)&v78 + 1) = v33;
          v79 = v36;
          v80 = v37;
          v81 = v34;
          v82 = (void **)v34;
          v83 = v33;
          v84 = v36;
          v85 = 0;
          if ((int)sub_2237743EC(v71.i64, &v77) >= 1)
          {
            if (*a3 - 58 <= 0xFFFFFFF7)
              *a3 = 50;
            if (a3[1] - 58 <= 0xFFFFFFF6)
              a3[1] = 49;
          }
        }
      }
      if (a3[9])
        goto LABEL_145;
    }
    v24 = v61;
    v25 = v62;
    if (v61 == v62)
      goto LABEL_145;
  }
  else
  {
LABEL_38:
    if (v24 == v25)
      goto LABEL_145;
  }
  if (*a3 != 70 && a3[3] != 70)
  {
LABEL_70:
    if (a3[1] != 70)
      goto LABEL_145;
    goto LABEL_71;
  }
  a5.n128_f64[0] = sub_223781780((unint64_t)v24, (uint64_t)v25, 126 - 2 * __clz(0x8F5C28F5C28F5C29 * (v25 - v24)), 1, a5);
  v24 = v61;
  v25 = v62;
  v44 = a3[9];
  if (v61 == v62)
  {
    if (!a3[9])
      goto LABEL_137;
    goto LABEL_145;
  }
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = *a3;
  v50 = a3[3];
  v51 = v61;
  do
  {
    v52 = v51[10];
    if ((v52 - 5) < 0xFFFFFFFC)
      goto LABEL_83;
    if (v45 && *((_QWORD *)v51 + 7) == *((_QWORD *)v45 + 1))
    {
      v53 = *((_QWORD *)v51 + 8) != *((_QWORD *)v45 + 2);
      v45 = (char *)(v51 + 12);
      if (!v46)
        goto LABEL_122;
    }
    else
    {
      v53 = 1;
      v45 = (char *)(v51 + 12);
      if (!v46)
        goto LABEL_122;
    }
    if (!v48)
      goto LABEL_105;
    if (!v53)
    {
      if (v46[7] == *((_QWORD *)v51 + 7)
        && v46[8] == *((_QWORD *)v51 + 8)
        && ((v54 = v46[9], v55 = *((_QWORD *)v51 + 9), v54 == v55) || !*((_QWORD *)v51 + 11) && v54 + 1 == v55)
        && v52 == 1
        && *v46 == *(_QWORD *)v51
        && v46[1] == *((_QWORD *)v51 + 1))
      {
        if (!v47)
        {
          v47 = 0;
          v48 = 1;
          goto LABEL_82;
        }
      }
      else
      {
LABEL_105:
        if (!v47)
          goto LABEL_125;
        if (v53 || v46[7] != *((_QWORD *)v51 + 7) || v46[8] != *((_QWORD *)v51 + 8))
        {
LABEL_117:
          v48 = 0;
          goto LABEL_118;
        }
        v48 = 0;
        v54 = v46[9];
        v55 = *((_QWORD *)v51 + 9);
      }
      if ((v54 == v55 || !*((_QWORD *)v51 + 11) && v54 + 1 == v55)
        && *v46 == *(_QWORD *)v51
        && v46[1] == *((_QWORD *)v51 + 1))
      {
        if (v52 == 2)
          goto LABEL_80;
        goto LABEL_121;
      }
LABEL_118:
      if ((v49 - 58) <= 0xFFFFFFF7)
      {
        v49 = 50;
        *a3 = 50;
      }
      if ((v50 - 58) <= 0xFFFFFFF6)
      {
        v47 = 0;
        v50 = 49;
        a3[3] = 49;
        if (v52 == 1)
          goto LABEL_126;
LABEL_123:
        if (v52 == 2)
        {
LABEL_80:
          if (v51[30] != 2)
            v47 = 1;
        }
LABEL_82:
        v46 = v51;
LABEL_83:
        if (v44)
          goto LABEL_145;
        goto LABEL_84;
      }
LABEL_121:
      v47 = 0;
LABEL_122:
      if (v52 != 1)
        goto LABEL_123;
      goto LABEL_126;
    }
    if (v47)
      goto LABEL_117;
LABEL_125:
    v47 = 0;
    v48 = 0;
    if (v52 != 1)
      goto LABEL_123;
LABEL_126:
    v46 = v51;
    v48 = v52;
    if (v44)
      goto LABEL_145;
LABEL_84:
    v51 += 50;
  }
  while (v51 != (_DWORD *)v25);
  if (v47)
  {
    if ((v49 - 58) <= 0xFFFFFFF7)
      *a3 = 50;
    if ((v50 - 58) <= 0xFFFFFFF6)
      a3[3] = 49;
  }
LABEL_137:
  v56 = *a3;
  v57 = a3[3];
  if (v56 != 70 && v57 != 70)
    goto LABEL_70;
  v77 = (uint64_t *)a1;
  *(_QWORD *)&v78 = a2;
  BYTE8(v78) = 0;
  v79 = (uint64_t)a3;
  v80 = a4;
  v58 = v56 != 70;
  if (v57 == 70)
    v59 = 2;
  else
    v59 = 6;
  LODWORD(v81) = v59 | v58;
  sub_223778840((uint64_t)&v77, v24, v25);
  if (a3[9] || *a3 != 70 && a3[1] != 70)
    goto LABEL_145;
  v24 = v61;
  v25 = v62;
LABEL_71:
  sub_2237791F4((unint64_t)v24, (uint64_t)v25, a5);
  v77 = 0;
  *(_QWORD *)&v78 = 0;
  *(_QWORD *)((char *)&v78 + 6) = 0;
  v38 = v61;
  v39 = v62;
  sub_22377922C(a3, (uint64_t *)&v77, (uint64_t)v61, (uint64_t)v62);
  if (!a3[9])
  {
    v40 = *a3;
    v41 = a3[1];
    if (v40 == 70 || v41 == 70)
    {
      v77 = (uint64_t *)a2;
      *(_QWORD *)&v78 = a1;
      BYTE8(v78) = 0;
      v79 = (uint64_t)a3;
      v80 = a4;
      v42 = v40 != 70;
      if (v41 == 70)
        v43 = 2;
      else
        v43 = 6;
      LODWORD(v81) = v43 | v42;
      sub_223779460((uint64_t)&v77, v38, v39);
    }
  }
LABEL_145:
  v24 = v61;
LABEL_146:
  if (v24)
  {
    v62 = v24;
    operator delete(v24);
  }
}

void sub_223778794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223778840(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _QWORD *v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  if (a2 == a3)
    return result;
  v89 = v3;
  v90 = v4;
  v6 = a2;
  v7 = result;
  v8 = a2[8];
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = *(_DWORD *)(result + 40);
    if (v9 != 7)
    {
      v63 = v8 + 1;
      while (1)
      {
        if (v9 == 7)
          goto LABEL_162;
        result = **(_QWORD **)v7;
        if (result == *(_QWORD *)(*(_QWORD *)v7 + 8))
          goto LABEL_162;
        v66 = **(_QWORD **)(v7 + 8);
        v65 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
        if ((unint64_t)(v65 - v66) < 0x30)
          goto LABEL_177;
        v67 = v65 == v66 ? 0 : ((v65 - v66) >> 4) + 1;
        v79 = *(uint64_t **)(*(_QWORD *)(v7 + 8) + 8);
        v80 = v66;
        v81 = v65;
        v82 = (v65 - v66) >> 4;
        v83 = v67;
        v84 = v66;
        v85 = v66;
        v86 = v65;
        v87 = v82;
        v88 = 0;
        result = sub_2237743EC((uint64_t *)result, &v79);
        if ((int)result <= 0)
          break;
        v68 = *(unsigned __int8 **)(v7 + 24);
        if (*v68 - 58 <= 0xFFFFFFF7)
        {
          *v68 = 50;
          v68 = *(unsigned __int8 **)(v7 + 24);
        }
        v69 = *(_DWORD *)(v7 + 40) | 1;
        *(_DWORD *)(v7 + 40) = v69;
        if (v68[3] - 58 <= 0xFFFFFFF6)
        {
          v68[3] = 49;
          v69 = *(_DWORD *)(v7 + 40);
        }
        v9 = v69 | 4;
        *(_DWORD *)(v7 + 40) = v69 | 4;
        if ((v69 | 4) == 7)
        {
LABEL_178:
          v64 = 1;
          goto LABEL_161;
        }
LABEL_160:
        v64 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_161:
        *(_BYTE *)(v7 + 16) = v64;
LABEL_162:
        if (!--v63)
          goto LABEL_4;
      }
      v9 = *(_DWORD *)(v7 + 40);
LABEL_177:
      v9 |= 2u;
      *(_DWORD *)(v7 + 40) = v9;
      if (v9 == 7)
        goto LABEL_178;
      goto LABEL_160;
    }
  }
LABEL_4:
  v10 = v6 + 25;
  if (v6 + 25 == a3)
  {
    v11 = v6;
    v55 = *(_DWORD *)(v7 + 40);
    if ((~v55 & 6) == 0)
      goto LABEL_181;
    goto LABEL_135;
  }
  v11 = v6;
  do
  {
    v6 = v10;
    if (v11[7] != v11[32])
    {
      v22 = *(_DWORD *)(v7 + 40);
      if ((~v22 & 6) == 0)
      {
LABEL_59:
        v30 = v11[8];
        if (v30 <= -2)
        {
          if (v22 == 7)
            goto LABEL_130;
          v31 = v30 + 1;
          v32 = v22;
          while (1)
          {
            if (v32 == 7)
              goto LABEL_64;
            result = **(_QWORD **)v7;
            if (result == *(_QWORD *)(*(_QWORD *)v7 + 8))
              goto LABEL_64;
            v36 = **(_QWORD **)(v7 + 8);
            v35 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
            if ((unint64_t)(v35 - v36) < 0x30)
              goto LABEL_79;
            v37 = v35 == v36 ? 0 : ((v35 - v36) >> 4) + 1;
            v79 = *(uint64_t **)(*(_QWORD *)(v7 + 8) + 8);
            v80 = v36;
            v81 = v35;
            v82 = (v35 - v36) >> 4;
            v83 = v37;
            v84 = v36;
            v85 = v36;
            v86 = v35;
            v87 = v82;
            v88 = 0;
            result = sub_2237743EC((uint64_t *)result, &v79);
            if ((int)result <= 0)
              break;
            v38 = *(unsigned __int8 **)(v7 + 24);
            if (*v38 - 58 <= 0xFFFFFFF7)
            {
              *v38 = 50;
              v38 = *(unsigned __int8 **)(v7 + 24);
            }
            v39 = *(_DWORD *)(v7 + 40) | 1;
            *(_DWORD *)(v7 + 40) = v39;
            if (v38[3] - 58 <= 0xFFFFFFF6)
            {
              v38[3] = 49;
              v39 = *(_DWORD *)(v7 + 40);
            }
            v22 = v39 | 4;
            *(_DWORD *)(v7 + 40) = v39 | 4;
            if ((v39 | 4) == 7)
            {
LABEL_80:
              v33 = 1;
              goto LABEL_63;
            }
LABEL_62:
            v33 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_63:
            *(_BYTE *)(v7 + 16) = v33;
            v32 = v22;
LABEL_64:
            v34 = __CFADD__(v31++, 1);
            if (v34)
              goto LABEL_81;
          }
          v32 = *(_DWORD *)(v7 + 40);
LABEL_79:
          v22 = v32 | 2;
          *(_DWORD *)(v7 + 40) = v32 | 2;
          if ((v32 | 2) == 7)
            goto LABEL_80;
          goto LABEL_62;
        }
LABEL_81:
        v40 = v11[33];
        if (v40 < 0 || v22 == 7)
          goto LABEL_130;
        v41 = v40 + 1;
        while (1)
        {
          if (v22 == 7)
            goto LABEL_86;
          result = **(_QWORD **)v7;
          if (result == *(_QWORD *)(*(_QWORD *)v7 + 8))
            goto LABEL_86;
          v44 = **(_QWORD **)(v7 + 8);
          v43 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
          if ((unint64_t)(v43 - v44) < 0x30)
            goto LABEL_101;
          v45 = v43 == v44 ? 0 : ((v43 - v44) >> 4) + 1;
          v79 = *(uint64_t **)(*(_QWORD *)(v7 + 8) + 8);
          v80 = v44;
          v81 = v43;
          v82 = (v43 - v44) >> 4;
          v83 = v45;
          v84 = v44;
          v85 = v44;
          v86 = v43;
          v87 = v82;
          v88 = 0;
          result = sub_2237743EC((uint64_t *)result, &v79);
          if ((int)result <= 0)
            break;
          v46 = *(unsigned __int8 **)(v7 + 24);
          if (*v46 - 58 <= 0xFFFFFFF7)
          {
            *v46 = 50;
            v46 = *(unsigned __int8 **)(v7 + 24);
          }
          v47 = *(_DWORD *)(v7 + 40) | 1;
          *(_DWORD *)(v7 + 40) = v47;
          if (v46[3] - 58 <= 0xFFFFFFF6)
          {
            v46[3] = 49;
            v47 = *(_DWORD *)(v7 + 40);
          }
          v22 = v47 | 4;
          *(_DWORD *)(v7 + 40) = v47 | 4;
          if ((v47 | 4) == 7)
          {
LABEL_102:
            v42 = 1;
            goto LABEL_85;
          }
LABEL_84:
          v42 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_85:
          *(_BYTE *)(v7 + 16) = v42;
LABEL_86:
          if (!--v41)
            goto LABEL_130;
        }
        v22 = *(_DWORD *)(v7 + 40);
LABEL_101:
        v22 |= 2u;
        *(_DWORD *)(v7 + 40) = v22;
        if (v22 == 7)
          goto LABEL_102;
        goto LABEL_84;
      }
      LOBYTE(v23) = 0;
      LOBYTE(v24) = 0;
      v25 = v11;
      do
      {
        v26 = *((_DWORD *)v25 + 10);
        if (v26 != 1)
        {
          if (v26 != 2 || *((_DWORD *)v25 + 30) != 2)
            goto LABEL_59;
          if (v25 == v11)
            goto LABEL_49;
          v25 += 25;
          while (1)
          {
            v24 = *((_DWORD *)v25 + 10);
            if (v24 != 2)
              break;
            if (*((_DWORD *)v25 + 30) != 2)
              goto LABEL_59;
            v71 = v25 == v11;
            v25 += 25;
            if (v71)
              goto LABEL_49;
          }
          if (v24 != 1)
            goto LABEL_59;
        }
        v23 = *((_DWORD *)v25 + 30);
        if (v23 != 1)
          goto LABEL_59;
        v71 = v25 == v11;
        v25 += 25;
      }
      while (!v71);
      if ((v24 & 1) == 0)
        goto LABEL_56;
      LOBYTE(v23) = 1;
LABEL_49:
      v27 = *(unsigned __int8 **)(v7 + 24);
      if (*v27 - 58 <= 0xFFFFFFF7)
      {
        *v27 = 50;
        v27 = *(unsigned __int8 **)(v7 + 24);
        v28 = *(_DWORD *)(v7 + 40) | 1;
        *(_DWORD *)(v7 + 40) = v28;
        if (v27[3] - 58 > 0xFFFFFFF6)
        {
LABEL_51:
          v22 = v28 | 4;
          if ((v23 & 1) == 0)
            goto LABEL_52;
          goto LABEL_56;
        }
      }
      else
      {
        v28 = v22 | 1;
        *(_DWORD *)(v7 + 40) = v28;
        if (v27[3] - 58 > 0xFFFFFFF6)
          goto LABEL_51;
      }
      v27[3] = 49;
      v22 = *(_DWORD *)(v7 + 40) | 4;
      if ((v23 & 1) == 0)
      {
LABEL_52:
        *(_DWORD *)(v7 + 40) = v22;
        if (v22 == 7)
          goto LABEL_53;
LABEL_57:
        v29 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_58:
        *(_BYTE *)(v7 + 16) = v29;
        goto LABEL_59;
      }
LABEL_56:
      v22 |= 2u;
      *(_DWORD *)(v7 + 40) = v22;
      if (v22 == 7)
      {
LABEL_53:
        v29 = 1;
        goto LABEL_58;
      }
      goto LABEL_57;
    }
    v12 = v11[8];
    v13 = v11[33];
    if (v12 == v13)
      goto LABEL_130;
    v14 = *(_DWORD *)(v7 + 40);
    if ((~v14 & 6) == 0)
      goto LABEL_108;
    LOBYTE(v15) = 0;
    LOBYTE(v16) = 0;
    v17 = v11;
    do
    {
      v18 = *((_DWORD *)v17 + 10);
      if (v18 != 1)
      {
        if (v18 != 2 || *((_DWORD *)v17 + 30) != 2)
          goto LABEL_108;
        if (v17 == v11)
          goto LABEL_26;
        v17 += 25;
        while (1)
        {
          v16 = *((_DWORD *)v17 + 10);
          if (v16 != 2)
            break;
          if (*((_DWORD *)v17 + 30) != 2)
            goto LABEL_108;
          v71 = v17 == v11;
          v17 += 25;
          if (v71)
            goto LABEL_26;
        }
        if (v16 != 1)
          goto LABEL_108;
      }
      v15 = *((_DWORD *)v17 + 30);
      if (v15 != 1)
        goto LABEL_108;
      v71 = v17 == v11;
      v17 += 25;
    }
    while (!v71);
    if ((v16 & 1) == 0)
    {
LABEL_105:
      v14 |= 2u;
      *(_DWORD *)(v7 + 40) = v14;
      if (v14 == 7)
      {
LABEL_30:
        v21 = 1;
        goto LABEL_107;
      }
      goto LABEL_106;
    }
    LOBYTE(v15) = 1;
LABEL_26:
    v19 = *(unsigned __int8 **)(v7 + 24);
    if (*v19 - 58 <= 0xFFFFFFF7)
    {
      *v19 = 50;
      v19 = *(unsigned __int8 **)(v7 + 24);
      v20 = *(_DWORD *)(v7 + 40) | 1;
      *(_DWORD *)(v7 + 40) = v20;
      if (v19[3] - 58 > 0xFFFFFFF6)
      {
LABEL_28:
        v14 = v20 | 4;
        if ((v15 & 1) != 0)
          goto LABEL_105;
        goto LABEL_29;
      }
    }
    else
    {
      v20 = v14 | 1;
      *(_DWORD *)(v7 + 40) = v20;
      if (v19[3] - 58 > 0xFFFFFFF6)
        goto LABEL_28;
    }
    v19[3] = 49;
    v14 = *(_DWORD *)(v7 + 40) | 4;
    if ((v15 & 1) != 0)
      goto LABEL_105;
LABEL_29:
    *(_DWORD *)(v7 + 40) = v14;
    if (v14 == 7)
      goto LABEL_30;
LABEL_106:
    v21 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_107:
    *(_BYTE *)(v7 + 16) = v21;
    v12 = v11[8];
    v13 = v11[33];
LABEL_108:
    if (v12 + 1 < v13 && v14 != 7)
    {
      v48 = ~v12 + v13;
      while (1)
      {
        if (v14 == 7)
          goto LABEL_113;
        result = **(_QWORD **)v7;
        if (result == *(_QWORD *)(*(_QWORD *)v7 + 8))
          goto LABEL_113;
        v51 = **(_QWORD **)(v7 + 8);
        v50 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
        if ((unint64_t)(v50 - v51) < 0x30)
          goto LABEL_128;
        v52 = v50 == v51 ? 0 : ((v50 - v51) >> 4) + 1;
        v79 = *(uint64_t **)(*(_QWORD *)(v7 + 8) + 8);
        v80 = v51;
        v81 = v50;
        v82 = (v50 - v51) >> 4;
        v83 = v52;
        v84 = v51;
        v85 = v51;
        v86 = v50;
        v87 = v82;
        v88 = 0;
        result = sub_2237743EC((uint64_t *)result, &v79);
        if ((int)result <= 0)
          break;
        v53 = *(unsigned __int8 **)(v7 + 24);
        if (*v53 - 58 <= 0xFFFFFFF7)
        {
          *v53 = 50;
          v53 = *(unsigned __int8 **)(v7 + 24);
        }
        v54 = *(_DWORD *)(v7 + 40) | 1;
        *(_DWORD *)(v7 + 40) = v54;
        if (v53[3] - 58 <= 0xFFFFFFF6)
        {
          v53[3] = 49;
          v54 = *(_DWORD *)(v7 + 40);
        }
        v14 = v54 | 4;
        *(_DWORD *)(v7 + 40) = v54 | 4;
        if ((v54 | 4) == 7)
        {
LABEL_129:
          v49 = 1;
          goto LABEL_112;
        }
LABEL_111:
        v49 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_112:
        *(_BYTE *)(v7 + 16) = v49;
LABEL_113:
        if (!--v48)
          goto LABEL_130;
      }
      v14 = *(_DWORD *)(v7 + 40);
LABEL_128:
      v14 |= 2u;
      *(_DWORD *)(v7 + 40) = v14;
      if (v14 == 7)
        goto LABEL_129;
      goto LABEL_111;
    }
LABEL_130:
    if (*(_BYTE *)(v7 + 16))
      return result;
    v11 += 25;
    v10 = v6 + 25;
  }
  while (v6 + 25 != a3);
  v55 = *(_DWORD *)(v7 + 40);
  if ((~v55 & 6) == 0)
    goto LABEL_181;
LABEL_135:
  if (v11 != a3)
  {
    LOBYTE(v56) = 0;
    LOBYTE(v57) = 0;
    v58 = v11;
    do
    {
      v59 = *((_DWORD *)v58 + 10);
      if (v59 != 1)
      {
        if (v59 != 2 || *((_DWORD *)v58 + 30) != 2)
          goto LABEL_181;
        if (v58 == v6)
          goto LABEL_153;
        v58 += 25;
        while (1)
        {
          v57 = *((_DWORD *)v58 + 10);
          if (v57 != 2)
            break;
          if (*((_DWORD *)v58 + 30) != 2)
            goto LABEL_181;
          v71 = v58 == v6;
          v58 += 25;
          if (v71)
            goto LABEL_153;
        }
        if (v57 != 1)
          goto LABEL_181;
      }
      v56 = *((_DWORD *)v58 + 30);
      if (v56 != 1)
        goto LABEL_181;
      v71 = v58 == v6;
      v58 += 25;
    }
    while (!v71);
    if ((v57 & 1) == 0)
      goto LABEL_156;
    LOBYTE(v56) = 1;
LABEL_153:
    v60 = *(unsigned __int8 **)(v7 + 24);
    if (*v60 - 58 <= 0xFFFFFFF7)
    {
      *v60 = 50;
      v60 = *(unsigned __int8 **)(v7 + 24);
      v61 = *(_DWORD *)(v7 + 40) | 1;
      *(_DWORD *)(v7 + 40) = v61;
      if (v60[3] - 58 > 0xFFFFFFF6)
        goto LABEL_155;
    }
    else
    {
      v61 = v55 | 1;
      *(_DWORD *)(v7 + 40) = v61;
      if (v60[3] - 58 > 0xFFFFFFF6)
      {
LABEL_155:
        v55 = v61 | 4;
        *(_DWORD *)(v7 + 40) = v55;
        if ((v56 & 1) == 0)
          goto LABEL_157;
        goto LABEL_156;
      }
    }
    v60[3] = 49;
    v55 = *(_DWORD *)(v7 + 40) | 4;
    *(_DWORD *)(v7 + 40) = v55;
    if ((v56 & 1) != 0)
    {
LABEL_156:
      v55 |= 2u;
      *(_DWORD *)(v7 + 40) = v55;
    }
  }
LABEL_157:
  v62 = v55 == 7 || *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
  *(_BYTE *)(v7 + 16) = v62;
LABEL_181:
  v70 = v11[8];
  v71 = v70 > -2 || v55 == 7;
  if (!v71)
  {
    v72 = v70 + 1;
    while (2)
    {
      if (v55 == 7)
        goto LABEL_189;
      result = **(_QWORD **)v7;
      if (result == *(_QWORD *)(*(_QWORD *)v7 + 8))
        goto LABEL_189;
      v75 = **(_QWORD **)(v7 + 8);
      v74 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
      if ((unint64_t)(v74 - v75) >= 0x30)
      {
        if (v74 == v75)
          v76 = 0;
        else
          v76 = ((v74 - v75) >> 4) + 1;
        v79 = *(uint64_t **)(*(_QWORD *)(v7 + 8) + 8);
        v80 = v75;
        v81 = v74;
        v82 = (v74 - v75) >> 4;
        v83 = v76;
        v84 = v75;
        v85 = v75;
        v86 = v74;
        v87 = v82;
        v88 = 0;
        result = sub_2237743EC((uint64_t *)result, &v79);
        if ((int)result > 0)
        {
          v77 = *(unsigned __int8 **)(v7 + 24);
          if (*v77 - 58 <= 0xFFFFFFF7)
          {
            *v77 = 50;
            v77 = *(unsigned __int8 **)(v7 + 24);
          }
          v78 = *(_DWORD *)(v7 + 40) | 1;
          *(_DWORD *)(v7 + 40) = v78;
          if (v77[3] - 58 <= 0xFFFFFFF6)
          {
            v77[3] = 49;
            v78 = *(_DWORD *)(v7 + 40);
          }
          v55 = v78 | 4;
          *(_DWORD *)(v7 + 40) = v78 | 4;
          if ((v78 | 4) == 7)
          {
LABEL_205:
            v73 = 1;
LABEL_188:
            *(_BYTE *)(v7 + 16) = v73;
LABEL_189:
            v34 = __CFADD__(v72++, 1);
            if (v34)
              return result;
            continue;
          }
LABEL_187:
          v73 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
          goto LABEL_188;
        }
        v55 = *(_DWORD *)(v7 + 40);
      }
      break;
    }
    v55 |= 2u;
    *(_DWORD *)(v7 + 40) = v55;
    if (v55 == 7)
      goto LABEL_205;
    goto LABEL_187;
  }
  return result;
}

double sub_2237791F4(unint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3;
  uint64_t v4;

  v3 = 126 - 2 * __clz(0x8F5C28F5C28F5C29 * ((uint64_t)(a2 - a1) >> 3));
  if (a2 == a1)
    v4 = 0;
  else
    v4 = v3;
  return sub_223785600(a1, a2, v4, 1, a3);
}

unsigned __int8 *sub_22377922C(unsigned __int8 *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 == a4)
    return result;
  v4 = result[9];
  do
  {
    v5 = *(_DWORD *)(a3 + 120);
    if ((v5 - 5) < 0xFFFFFFFC)
      goto LABEL_44;
    v6 = *a2;
    if (!*a2 || *(_QWORD *)(a3 + 136) != *(_QWORD *)(v6 + 8))
    {
      v7 = 1;
      *a2 = a3 + 128;
      v8 = (_QWORD *)a2[1];
      if (!v8)
        goto LABEL_38;
LABEL_9:
      if (*((_BYTE *)a2 + 21))
      {
        if (!v7 && v8[17] == *(_QWORD *)(a3 + 136) && v8[18] == *(_QWORD *)(a3 + 144))
        {
          v9 = v8[19];
          v10 = *(_QWORD *)(a3 + 152);
          if ((v9 == v10 || !*(_QWORD *)(a3 + 168) && v9 + 1 == v10)
            && v5 == 1
            && *v8 == *(_QWORD *)a3
            && v8[1] == *(_QWORD *)(a3 + 8))
          {
            if (!*((_BYTE *)a2 + 20))
              goto LABEL_40;
LABEL_26:
            v11 = v8[19];
            v12 = *(_QWORD *)(a3 + 152);
            if ((v11 == v12 || !*(_QWORD *)(a3 + 168) && v11 + 1 == v12)
              && *v8 == *(_QWORD *)a3
              && v8[1] == *(_QWORD *)(a3 + 8))
            {
              if (v5 == 2)
                goto LABEL_41;
              goto LABEL_37;
            }
LABEL_33:
            if (*result - 58 <= 0xFFFFFFF7)
              *result = 50;
            if (result[1] - 58 <= 0xFFFFFFF6)
              result[1] = 49;
LABEL_37:
            *((_BYTE *)a2 + 20) = 0;
            goto LABEL_38;
          }
        }
        *((_BYTE *)a2 + 21) = 0;
      }
      if (!*((_BYTE *)a2 + 20))
        goto LABEL_38;
      if (v7 || v8[17] != *(_QWORD *)(a3 + 136) || v8[18] != *(_QWORD *)(a3 + 144))
        goto LABEL_33;
      goto LABEL_26;
    }
    v7 = *(_QWORD *)(a3 + 144) != *(_QWORD *)(v6 + 16);
    *a2 = a3 + 128;
    v8 = (_QWORD *)a2[1];
    if (v8)
      goto LABEL_9;
LABEL_38:
    if (v5 == 2)
    {
LABEL_41:
      if (*(_DWORD *)(a3 + 40) != 2)
        *((_BYTE *)a2 + 20) = 1;
      goto LABEL_43;
    }
    if (v5 == 1)
LABEL_40:
      *((_BYTE *)a2 + 21) = 1;
LABEL_43:
    a2[1] = a3;
    *((_DWORD *)a2 + 4) = v5;
LABEL_44:
    if (v4)
      return result;
    a3 += 200;
  }
  while (a3 != a4);
  if (*((_BYTE *)a2 + 21))
    *((_BYTE *)a2 + 21) = 0;
  if (*((_BYTE *)a2 + 20))
  {
    if (*result - 58 <= 0xFFFFFFF7)
      *result = 50;
    if (result[1] - 58 <= 0xFFFFFFF6)
      result[1] = 49;
    *((_BYTE *)a2 + 20) = 0;
  }
  return result;
}

uint64_t sub_223779460(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _QWORD *v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  if (a2 == a3)
    return result;
  v89 = v3;
  v90 = v4;
  v6 = a2;
  v7 = result;
  v8 = a2[18];
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = *(_DWORD *)(result + 40);
    if (v9 != 7)
    {
      v63 = v8 + 1;
      while (1)
      {
        if (v9 == 7)
          goto LABEL_162;
        result = **(_QWORD **)v7;
        if (result == *(_QWORD *)(*(_QWORD *)v7 + 8))
          goto LABEL_162;
        v66 = **(_QWORD **)(v7 + 8);
        v65 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
        if ((unint64_t)(v65 - v66) < 0x30)
          goto LABEL_177;
        v67 = v65 == v66 ? 0 : ((v65 - v66) >> 4) + 1;
        v79 = *(uint64_t **)(*(_QWORD *)(v7 + 8) + 8);
        v80 = v66;
        v81 = v65;
        v82 = (v65 - v66) >> 4;
        v83 = v67;
        v84 = v66;
        v85 = v66;
        v86 = v65;
        v87 = v82;
        v88 = 0;
        result = sub_2237743EC((uint64_t *)result, &v79);
        if ((int)result <= 0)
          break;
        v68 = *(unsigned __int8 **)(v7 + 24);
        if (*v68 - 58 <= 0xFFFFFFF7)
        {
          *v68 = 50;
          v68 = *(unsigned __int8 **)(v7 + 24);
        }
        v69 = *(_DWORD *)(v7 + 40) | 1;
        *(_DWORD *)(v7 + 40) = v69;
        if (v68[1] - 58 <= 0xFFFFFFF6)
        {
          v68[1] = 49;
          v69 = *(_DWORD *)(v7 + 40);
        }
        v9 = v69 | 4;
        *(_DWORD *)(v7 + 40) = v69 | 4;
        if ((v69 | 4) == 7)
        {
LABEL_178:
          v64 = 1;
          goto LABEL_161;
        }
LABEL_160:
        v64 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_161:
        *(_BYTE *)(v7 + 16) = v64;
LABEL_162:
        if (!--v63)
          goto LABEL_4;
      }
      v9 = *(_DWORD *)(v7 + 40);
LABEL_177:
      v9 |= 2u;
      *(_DWORD *)(v7 + 40) = v9;
      if (v9 == 7)
        goto LABEL_178;
      goto LABEL_160;
    }
  }
LABEL_4:
  v10 = v6 + 25;
  if (v6 + 25 == a3)
  {
    v11 = v6;
    v55 = *(_DWORD *)(v7 + 40);
    if ((~v55 & 6) == 0)
      goto LABEL_181;
    goto LABEL_135;
  }
  v11 = v6;
  do
  {
    v6 = v10;
    if (v11[17] != v11[42])
    {
      v22 = *(_DWORD *)(v7 + 40);
      if ((~v22 & 6) == 0)
      {
LABEL_59:
        v30 = v11[18];
        if (v30 <= -2)
        {
          if (v22 == 7)
            goto LABEL_130;
          v31 = v30 + 1;
          v32 = v22;
          while (1)
          {
            if (v32 == 7)
              goto LABEL_64;
            result = **(_QWORD **)v7;
            if (result == *(_QWORD *)(*(_QWORD *)v7 + 8))
              goto LABEL_64;
            v36 = **(_QWORD **)(v7 + 8);
            v35 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
            if ((unint64_t)(v35 - v36) < 0x30)
              goto LABEL_79;
            v37 = v35 == v36 ? 0 : ((v35 - v36) >> 4) + 1;
            v79 = *(uint64_t **)(*(_QWORD *)(v7 + 8) + 8);
            v80 = v36;
            v81 = v35;
            v82 = (v35 - v36) >> 4;
            v83 = v37;
            v84 = v36;
            v85 = v36;
            v86 = v35;
            v87 = v82;
            v88 = 0;
            result = sub_2237743EC((uint64_t *)result, &v79);
            if ((int)result <= 0)
              break;
            v38 = *(unsigned __int8 **)(v7 + 24);
            if (*v38 - 58 <= 0xFFFFFFF7)
            {
              *v38 = 50;
              v38 = *(unsigned __int8 **)(v7 + 24);
            }
            v39 = *(_DWORD *)(v7 + 40) | 1;
            *(_DWORD *)(v7 + 40) = v39;
            if (v38[1] - 58 <= 0xFFFFFFF6)
            {
              v38[1] = 49;
              v39 = *(_DWORD *)(v7 + 40);
            }
            v22 = v39 | 4;
            *(_DWORD *)(v7 + 40) = v39 | 4;
            if ((v39 | 4) == 7)
            {
LABEL_80:
              v33 = 1;
              goto LABEL_63;
            }
LABEL_62:
            v33 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_63:
            *(_BYTE *)(v7 + 16) = v33;
            v32 = v22;
LABEL_64:
            v34 = __CFADD__(v31++, 1);
            if (v34)
              goto LABEL_81;
          }
          v32 = *(_DWORD *)(v7 + 40);
LABEL_79:
          v22 = v32 | 2;
          *(_DWORD *)(v7 + 40) = v32 | 2;
          if ((v32 | 2) == 7)
            goto LABEL_80;
          goto LABEL_62;
        }
LABEL_81:
        v40 = v11[43];
        if (v40 < 0 || v22 == 7)
          goto LABEL_130;
        v41 = v40 + 1;
        while (1)
        {
          if (v22 == 7)
            goto LABEL_86;
          result = **(_QWORD **)v7;
          if (result == *(_QWORD *)(*(_QWORD *)v7 + 8))
            goto LABEL_86;
          v44 = **(_QWORD **)(v7 + 8);
          v43 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
          if ((unint64_t)(v43 - v44) < 0x30)
            goto LABEL_101;
          v45 = v43 == v44 ? 0 : ((v43 - v44) >> 4) + 1;
          v79 = *(uint64_t **)(*(_QWORD *)(v7 + 8) + 8);
          v80 = v44;
          v81 = v43;
          v82 = (v43 - v44) >> 4;
          v83 = v45;
          v84 = v44;
          v85 = v44;
          v86 = v43;
          v87 = v82;
          v88 = 0;
          result = sub_2237743EC((uint64_t *)result, &v79);
          if ((int)result <= 0)
            break;
          v46 = *(unsigned __int8 **)(v7 + 24);
          if (*v46 - 58 <= 0xFFFFFFF7)
          {
            *v46 = 50;
            v46 = *(unsigned __int8 **)(v7 + 24);
          }
          v47 = *(_DWORD *)(v7 + 40) | 1;
          *(_DWORD *)(v7 + 40) = v47;
          if (v46[1] - 58 <= 0xFFFFFFF6)
          {
            v46[1] = 49;
            v47 = *(_DWORD *)(v7 + 40);
          }
          v22 = v47 | 4;
          *(_DWORD *)(v7 + 40) = v47 | 4;
          if ((v47 | 4) == 7)
          {
LABEL_102:
            v42 = 1;
            goto LABEL_85;
          }
LABEL_84:
          v42 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_85:
          *(_BYTE *)(v7 + 16) = v42;
LABEL_86:
          if (!--v41)
            goto LABEL_130;
        }
        v22 = *(_DWORD *)(v7 + 40);
LABEL_101:
        v22 |= 2u;
        *(_DWORD *)(v7 + 40) = v22;
        if (v22 == 7)
          goto LABEL_102;
        goto LABEL_84;
      }
      LOBYTE(v23) = 0;
      LOBYTE(v24) = 0;
      v25 = v11;
      do
      {
        v26 = *((_DWORD *)v25 + 10);
        if (v26 != 1)
        {
          if (v26 != 2 || *((_DWORD *)v25 + 30) != 2)
            goto LABEL_59;
          if (v25 == v11)
            goto LABEL_49;
          v25 += 25;
          while (1)
          {
            v24 = *((_DWORD *)v25 + 10);
            if (v24 != 2)
              break;
            if (*((_DWORD *)v25 + 30) != 2)
              goto LABEL_59;
            v71 = v25 == v11;
            v25 += 25;
            if (v71)
              goto LABEL_49;
          }
          if (v24 != 1)
            goto LABEL_59;
        }
        v23 = *((_DWORD *)v25 + 30);
        if (v23 != 1)
          goto LABEL_59;
        v71 = v25 == v11;
        v25 += 25;
      }
      while (!v71);
      if ((v24 & 1) == 0)
        goto LABEL_56;
      LOBYTE(v23) = 1;
LABEL_49:
      v27 = *(unsigned __int8 **)(v7 + 24);
      if (*v27 - 58 <= 0xFFFFFFF7)
      {
        *v27 = 50;
        v27 = *(unsigned __int8 **)(v7 + 24);
        v28 = *(_DWORD *)(v7 + 40) | 1;
        *(_DWORD *)(v7 + 40) = v28;
        if (v27[1] - 58 > 0xFFFFFFF6)
        {
LABEL_51:
          v22 = v28 | 4;
          if ((v23 & 1) == 0)
            goto LABEL_52;
          goto LABEL_56;
        }
      }
      else
      {
        v28 = v22 | 1;
        *(_DWORD *)(v7 + 40) = v28;
        if (v27[1] - 58 > 0xFFFFFFF6)
          goto LABEL_51;
      }
      v27[1] = 49;
      v22 = *(_DWORD *)(v7 + 40) | 4;
      if ((v23 & 1) == 0)
      {
LABEL_52:
        *(_DWORD *)(v7 + 40) = v22;
        if (v22 == 7)
          goto LABEL_53;
LABEL_57:
        v29 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_58:
        *(_BYTE *)(v7 + 16) = v29;
        goto LABEL_59;
      }
LABEL_56:
      v22 |= 2u;
      *(_DWORD *)(v7 + 40) = v22;
      if (v22 == 7)
      {
LABEL_53:
        v29 = 1;
        goto LABEL_58;
      }
      goto LABEL_57;
    }
    v12 = v11[18];
    v13 = v11[43];
    if (v12 == v13)
      goto LABEL_130;
    v14 = *(_DWORD *)(v7 + 40);
    if ((~v14 & 6) == 0)
      goto LABEL_108;
    LOBYTE(v15) = 0;
    LOBYTE(v16) = 0;
    v17 = v11;
    do
    {
      v18 = *((_DWORD *)v17 + 10);
      if (v18 != 1)
      {
        if (v18 != 2 || *((_DWORD *)v17 + 30) != 2)
          goto LABEL_108;
        if (v17 == v11)
          goto LABEL_26;
        v17 += 25;
        while (1)
        {
          v16 = *((_DWORD *)v17 + 10);
          if (v16 != 2)
            break;
          if (*((_DWORD *)v17 + 30) != 2)
            goto LABEL_108;
          v71 = v17 == v11;
          v17 += 25;
          if (v71)
            goto LABEL_26;
        }
        if (v16 != 1)
          goto LABEL_108;
      }
      v15 = *((_DWORD *)v17 + 30);
      if (v15 != 1)
        goto LABEL_108;
      v71 = v17 == v11;
      v17 += 25;
    }
    while (!v71);
    if ((v16 & 1) == 0)
    {
LABEL_105:
      v14 |= 2u;
      *(_DWORD *)(v7 + 40) = v14;
      if (v14 == 7)
      {
LABEL_30:
        v21 = 1;
        goto LABEL_107;
      }
      goto LABEL_106;
    }
    LOBYTE(v15) = 1;
LABEL_26:
    v19 = *(unsigned __int8 **)(v7 + 24);
    if (*v19 - 58 <= 0xFFFFFFF7)
    {
      *v19 = 50;
      v19 = *(unsigned __int8 **)(v7 + 24);
      v20 = *(_DWORD *)(v7 + 40) | 1;
      *(_DWORD *)(v7 + 40) = v20;
      if (v19[1] - 58 > 0xFFFFFFF6)
      {
LABEL_28:
        v14 = v20 | 4;
        if ((v15 & 1) != 0)
          goto LABEL_105;
        goto LABEL_29;
      }
    }
    else
    {
      v20 = v14 | 1;
      *(_DWORD *)(v7 + 40) = v20;
      if (v19[1] - 58 > 0xFFFFFFF6)
        goto LABEL_28;
    }
    v19[1] = 49;
    v14 = *(_DWORD *)(v7 + 40) | 4;
    if ((v15 & 1) != 0)
      goto LABEL_105;
LABEL_29:
    *(_DWORD *)(v7 + 40) = v14;
    if (v14 == 7)
      goto LABEL_30;
LABEL_106:
    v21 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_107:
    *(_BYTE *)(v7 + 16) = v21;
    v12 = v11[18];
    v13 = v11[43];
LABEL_108:
    if (v12 + 1 < v13 && v14 != 7)
    {
      v48 = ~v12 + v13;
      while (1)
      {
        if (v14 == 7)
          goto LABEL_113;
        result = **(_QWORD **)v7;
        if (result == *(_QWORD *)(*(_QWORD *)v7 + 8))
          goto LABEL_113;
        v51 = **(_QWORD **)(v7 + 8);
        v50 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
        if ((unint64_t)(v50 - v51) < 0x30)
          goto LABEL_128;
        v52 = v50 == v51 ? 0 : ((v50 - v51) >> 4) + 1;
        v79 = *(uint64_t **)(*(_QWORD *)(v7 + 8) + 8);
        v80 = v51;
        v81 = v50;
        v82 = (v50 - v51) >> 4;
        v83 = v52;
        v84 = v51;
        v85 = v51;
        v86 = v50;
        v87 = v82;
        v88 = 0;
        result = sub_2237743EC((uint64_t *)result, &v79);
        if ((int)result <= 0)
          break;
        v53 = *(unsigned __int8 **)(v7 + 24);
        if (*v53 - 58 <= 0xFFFFFFF7)
        {
          *v53 = 50;
          v53 = *(unsigned __int8 **)(v7 + 24);
        }
        v54 = *(_DWORD *)(v7 + 40) | 1;
        *(_DWORD *)(v7 + 40) = v54;
        if (v53[1] - 58 <= 0xFFFFFFF6)
        {
          v53[1] = 49;
          v54 = *(_DWORD *)(v7 + 40);
        }
        v14 = v54 | 4;
        *(_DWORD *)(v7 + 40) = v54 | 4;
        if ((v54 | 4) == 7)
        {
LABEL_129:
          v49 = 1;
          goto LABEL_112;
        }
LABEL_111:
        v49 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
LABEL_112:
        *(_BYTE *)(v7 + 16) = v49;
LABEL_113:
        if (!--v48)
          goto LABEL_130;
      }
      v14 = *(_DWORD *)(v7 + 40);
LABEL_128:
      v14 |= 2u;
      *(_DWORD *)(v7 + 40) = v14;
      if (v14 == 7)
        goto LABEL_129;
      goto LABEL_111;
    }
LABEL_130:
    if (*(_BYTE *)(v7 + 16))
      return result;
    v11 += 25;
    v10 = v6 + 25;
  }
  while (v6 + 25 != a3);
  v55 = *(_DWORD *)(v7 + 40);
  if ((~v55 & 6) == 0)
    goto LABEL_181;
LABEL_135:
  if (v11 != a3)
  {
    LOBYTE(v56) = 0;
    LOBYTE(v57) = 0;
    v58 = v11;
    do
    {
      v59 = *((_DWORD *)v58 + 10);
      if (v59 != 1)
      {
        if (v59 != 2 || *((_DWORD *)v58 + 30) != 2)
          goto LABEL_181;
        if (v58 == v6)
          goto LABEL_153;
        v58 += 25;
        while (1)
        {
          v57 = *((_DWORD *)v58 + 10);
          if (v57 != 2)
            break;
          if (*((_DWORD *)v58 + 30) != 2)
            goto LABEL_181;
          v71 = v58 == v6;
          v58 += 25;
          if (v71)
            goto LABEL_153;
        }
        if (v57 != 1)
          goto LABEL_181;
      }
      v56 = *((_DWORD *)v58 + 30);
      if (v56 != 1)
        goto LABEL_181;
      v71 = v58 == v6;
      v58 += 25;
    }
    while (!v71);
    if ((v57 & 1) == 0)
      goto LABEL_156;
    LOBYTE(v56) = 1;
LABEL_153:
    v60 = *(unsigned __int8 **)(v7 + 24);
    if (*v60 - 58 <= 0xFFFFFFF7)
    {
      *v60 = 50;
      v60 = *(unsigned __int8 **)(v7 + 24);
      v61 = *(_DWORD *)(v7 + 40) | 1;
      *(_DWORD *)(v7 + 40) = v61;
      if (v60[1] - 58 > 0xFFFFFFF6)
        goto LABEL_155;
    }
    else
    {
      v61 = v55 | 1;
      *(_DWORD *)(v7 + 40) = v61;
      if (v60[1] - 58 > 0xFFFFFFF6)
      {
LABEL_155:
        v55 = v61 | 4;
        *(_DWORD *)(v7 + 40) = v55;
        if ((v56 & 1) == 0)
          goto LABEL_157;
        goto LABEL_156;
      }
    }
    v60[1] = 49;
    v55 = *(_DWORD *)(v7 + 40) | 4;
    *(_DWORD *)(v7 + 40) = v55;
    if ((v56 & 1) != 0)
    {
LABEL_156:
      v55 |= 2u;
      *(_DWORD *)(v7 + 40) = v55;
    }
  }
LABEL_157:
  v62 = v55 == 7 || *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
  *(_BYTE *)(v7 + 16) = v62;
LABEL_181:
  v70 = v11[18];
  v71 = v70 > -2 || v55 == 7;
  if (!v71)
  {
    v72 = v70 + 1;
    while (2)
    {
      if (v55 == 7)
        goto LABEL_189;
      result = **(_QWORD **)v7;
      if (result == *(_QWORD *)(*(_QWORD *)v7 + 8))
        goto LABEL_189;
      v75 = **(_QWORD **)(v7 + 8);
      v74 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
      if ((unint64_t)(v74 - v75) >= 0x30)
      {
        if (v74 == v75)
          v76 = 0;
        else
          v76 = ((v74 - v75) >> 4) + 1;
        v79 = *(uint64_t **)(*(_QWORD *)(v7 + 8) + 8);
        v80 = v75;
        v81 = v74;
        v82 = (v74 - v75) >> 4;
        v83 = v76;
        v84 = v75;
        v85 = v75;
        v86 = v74;
        v87 = v82;
        v88 = 0;
        result = sub_2237743EC((uint64_t *)result, &v79);
        if ((int)result > 0)
        {
          v77 = *(unsigned __int8 **)(v7 + 24);
          if (*v77 - 58 <= 0xFFFFFFF7)
          {
            *v77 = 50;
            v77 = *(unsigned __int8 **)(v7 + 24);
          }
          v78 = *(_DWORD *)(v7 + 40) | 1;
          *(_DWORD *)(v7 + 40) = v78;
          if (v77[1] - 58 <= 0xFFFFFFF6)
          {
            v77[1] = 49;
            v78 = *(_DWORD *)(v7 + 40);
          }
          v55 = v78 | 4;
          *(_DWORD *)(v7 + 40) = v78 | 4;
          if ((v78 | 4) == 7)
          {
LABEL_205:
            v73 = 1;
LABEL_188:
            *(_BYTE *)(v7 + 16) = v73;
LABEL_189:
            v34 = __CFADD__(v72++, 1);
            if (v34)
              return result;
            continue;
          }
LABEL_187:
          v73 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 9) != 0;
          goto LABEL_188;
        }
        v55 = *(_DWORD *)(v7 + 40);
      }
      break;
    }
    v55 |= 2u;
    *(_DWORD *)(v7 + 40) = v55;
    if (v55 == 7)
      goto LABEL_205;
    goto LABEL_187;
  }
  return result;
}

uint64_t sub_223779E14(uint64_t result, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  BOOL v35;
  uint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  uint64_t *v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  int64x2_t v54;
  int64x2_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;

  v4 = a2[4];
  v5 = *(_QWORD *)(a3 + 32);
  v44 = v4 - v5;
  if (v4 == v5)
    return result;
  *((_QWORD *)&v52 + 1) = -1;
  v53 = -1;
  *(_QWORD *)&v56 = -1;
  *((_QWORD *)&v56 + 1) = -1;
  v57 = 0uLL;
  LOBYTE(v58) = 0;
  v59 = -1;
  v60 = 0;
  v54 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v55 = vdupq_n_s64(0x8000000000000000);
  v51 = 0;
  *(_QWORD *)&v52 = -1;
  v6 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
  v7 = (uint64_t *)a2[2];
  v43 = a2[1];
  v8 = v4 - 1;
  v9 = a2[3];
  if (v4 >= v9)
  {
    if (v8 <= v9)
    {
      v11 = (uint64_t *)(v43 + 16 * (v8 % v9));
      v12 = v11 + 1;
      if (v8 == v5)
        goto LABEL_72;
    }
    else
    {
      v12 = v7 + 1;
      v11 = (uint64_t *)a2[2];
      if (v8 == v5)
        goto LABEL_72;
    }
  }
  else
  {
    v10 = *a2;
    v11 = (uint64_t *)(*a2 - 16);
    v12 = (uint64_t *)(v10 - 8);
    if (v8 == v5)
      goto LABEL_72;
  }
  v38 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = *v12;
  v18 = *v11;
  v19 = 0x7FFFFFFFFFFFFFFFLL;
  v20 = 0x8000000000000000;
  v21 = 1;
  v22 = 0x8000000000000000;
  v23 = 0x7FFFFFFFFFFFFFFFLL;
  v46 = 1;
  v41 = v7;
  v42 = a3;
  v39 = result;
  v40 = v9;
  do
  {
    v24 = v18;
    v25 = v17;
    v26 = v8 - 1;
    if (v8 >= v9)
    {
      v27 = v7;
      if (v26 <= v9)
        v27 = (uint64_t *)(v43 + 16 * (v26 % v9));
    }
    else
    {
      v27 = v11 - 2;
    }
    v18 = *v27;
    v17 = v27[1];
    v28 = *v27 <= v24;
    if (*v27 >= v24)
      v29 = 0;
    else
      v29 = -1;
    if (v28)
      v30 = v29;
    else
      v30 = 1;
    if (v17 >= v25)
      v31 = 0;
    else
      v31 = -1;
    if (v17 > v25)
      v32 = 1;
    else
      v32 = v31;
    if ((_DWORD)v30)
    {
      v33 = 0;
    }
    else
    {
      v33 = 0;
      if (v24 == v18 && v25 == v17)
      {
        v33 = 1;
        v30 = 4294967197;
        v32 = 4294967197;
      }
    }
    if (!v15)
      goto LABEL_52;
    v35 = (_DWORD)v30 == (_DWORD)v14 && v15 <= 0xA && (_DWORD)v32 == (_DWORD)v13;
    v48 = v33;
    if (!v35)
    {
      v47 = v11;
      if (!(_BYTE)v58)
        v38 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
      sub_22376ACC8((void **)result, (uint64_t)&v51);
      *((_QWORD *)&v52 + 1) = -1;
      v53 = -1;
      *(_QWORD *)&v52 = -1;
      *(_QWORD *)&v49 = -1;
      *((_QWORD *)&v49 + 1) = -1;
      LOBYTE(v50) = 0;
      v51 = 0;
      v54 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v55 = vdupq_n_s64(0x8000000000000000);
      v56 = v49;
      v57 = 0uLL;
      v58 = v50;
      v59 = -1;
      v60 = 0;
      result = v39;
      v9 = v40;
      v7 = v41;
      a3 = v42;
      v26 = v8 - 1;
      v11 = v47;
      v33 = v48;
LABEL_52:
      v52 = *a4;
      v53 = *((_QWORD *)a4 + 2);
      LOBYTE(v58) = v33;
      v59 = v16;
      *(_QWORD *)&v56 = v21 - 1;
      *((_QWORD *)&v57 + 1) = v44;
      if (v33 & 1 | ((v46 & 1) == 0))
      {
        v51 = __PAIR64__(v32, v30);
        v54.i64[0] = v24;
        v54.i64[1] = v25;
        v23 = v24;
        v55.i64[0] = v24;
        v55.i64[1] = v25;
        if (v18 >= v24)
          goto LABEL_54;
      }
      else
      {
        v46 = 0;
        LOBYTE(v60) = 1;
        v51 = __PAIR64__(v32, v30);
        v54.i64[0] = v24;
        v54.i64[1] = v25;
        v23 = v24;
        v55.i64[0] = v24;
        v55.i64[1] = v25;
        if (v18 >= v24)
        {
LABEL_54:
          if (v18 <= v24)
            goto LABEL_55;
          goto LABEL_64;
        }
      }
      v54.i64[0] = v18;
      v23 = v18;
      if (v18 <= v24)
      {
LABEL_55:
        v19 = v25;
        if (v17 >= v25)
          goto LABEL_57;
        goto LABEL_56;
      }
LABEL_64:
      v55.i64[0] = v18;
      v24 = v18;
      v19 = v25;
      if (v17 >= v25)
      {
LABEL_57:
        v15 = 0;
        v20 = v25;
        v22 = v24;
        v13 = v32;
        v14 = v30;
        if (v17 <= v25)
          goto LABEL_59;
LABEL_58:
        v55.i64[1] = v17;
        v20 = v17;
        v22 = v24;
        v13 = v32;
        v14 = v30;
        goto LABEL_59;
      }
LABEL_56:
      v54.i64[1] = v17;
      v19 = v17;
      goto LABEL_57;
    }
    v30 = v14;
    v32 = v13;
    v24 = v22;
    if (v18 < v23)
    {
      v54.i64[0] = v18;
      v23 = v18;
    }
    if (v18 > v22)
    {
      v55.i64[0] = v18;
      v24 = v18;
      if (v17 >= v19)
      {
LABEL_47:
        v22 = v24;
        if (v17 > v20)
          goto LABEL_58;
        goto LABEL_59;
      }
    }
    else if (v17 >= v19)
    {
      goto LABEL_47;
    }
    v54.i64[1] = v17;
    v19 = v17;
    v22 = v24;
    if (v17 > v20)
      goto LABEL_58;
LABEL_59:
    ++v15;
    *((_QWORD *)&v56 + 1) = v21;
    *(_QWORD *)&v57 = v15;
    if (v8 < v9)
    {
      v11 -= 2;
    }
    else
    {
      v11 = v7;
      if (v26 <= v9)
        v11 = (uint64_t *)(v43 + 16 * (v26 % v9));
    }
    v16 += v33 ^ 1u;
    ++v21;
    v8 = v26;
  }
  while (v26 != *(_QWORD *)(a3 + 32));
  v6 = v38;
  if (v15)
  {
    if (!(_BYTE)v58)
      v6 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
    v36 = result;
    sub_22376ACC8((void **)result, (uint64_t)&v51);
    result = v36;
  }
LABEL_72:
  v37 = *(_BYTE **)result;
  if (v6 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3) && !v37[120 * v6 + 96])
    v37[120 * v6 + 113] = 1;
  return result;
}

uint64_t sub_22377A2FC(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  BOOL v55;
  char *i;
  _QWORD *v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  _QWORD *v77;
  BOOL v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  _QWORD *v83;
  _QWORD *v84;
  BOOL v85;
  char *v86;
  char *v87;
  char *v88;
  _QWORD *v89;
  _QWORD *v90;
  BOOL v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  _QWORD *v105;
  _QWORD *v106;
  BOOL v107;
  char *v108;
  int64x2_t v109;
  int64x2_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  void *__p;
  char *v115;
  uint64_t v116;
  void *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  __int128 v129[2];
  __int128 v130;
  __int128 v131;

  v8 = *(_QWORD *)a1;
  v10 = (__int128 *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  if (&v130 != (__int128 *)a1)
  {
    v11 = *v10;
    v130 = *(_OWORD *)a1;
    v131 = v11;
  }
  if (v129 != (__int128 *)a1)
  {
    v12 = *v10;
    v129[0] = *(_OWORD *)a1;
    v129[1] = v12;
  }
  if (v9 >= 0)
    v13 = v9;
  else
    v13 = v9 + 1;
  v14 = v13 >> 1;
  if (v8 >= 0)
    v15 = v8;
  else
    v15 = v8 + 1;
  v16 = v15 >> 1;
  v17 = v9 - 2 * v14 + v8 - 2 * v16;
  *(_QWORD *)&v131 = v14 + v16 + ((v17 + ((v17 & 0x80) >> 7)) << 24 >> 25);
  v128 = 0;
  *(_QWORD *)&v129[0] = v131;
  v126 = 0;
  v127 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  __p = 0;
  v115 = 0;
  v116 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  sub_22376B6AC(&v130, v129, a2, &v126, (char **)&v123, &v120);
  sub_22376B6AC(&v130, v129, a3, &v117, (char **)&__p, &v111);
  v18 = v120;
  v19 = v121;
  v20 = v111;
  if (v120 == v121)
  {
    v108 = v120;
    v22 = v112;
    v39 = v126;
    v38 = v127;
    v40 = v127 - v126;
    if (v111 == v112)
      goto LABEL_178;
    goto LABEL_49;
  }
  v21 = v121 - v120;
  v22 = v112;
  if ((unint64_t)(v121 - v120) < 0x80 || a4 > 0x63 || (unint64_t)(v112 - v111) < 0x79)
  {
    if (v111 != v112)
    {
      v33 = v120;
      do
      {
        v34 = v20;
        do
        {
          v35 = *(_QWORD **)v33;
          v36 = *(_QWORD **)v34;
          if (*(_QWORD *)(*(_QWORD *)v33 + 48) >= *(_QWORD *)(*(_QWORD *)v34 + 32) && v35[4] <= v36[6])
          {
            v37 = v35[7] >= v36[5] && v35[5] <= v36[7];
            if (v37
              && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v35, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v36, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_182;
            }
          }
          v34 += 8;
        }
        while (v34 != v22);
        v33 += 8;
      }
      while (v33 != v19);
    }
    goto LABEL_107;
  }
  v23 = 0x7FFFFFFFFFFFFFFFLL;
  v24 = 0x8000000000000000;
  v109 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v110 = vdupq_n_s64(0x8000000000000000);
  v25 = 0x8000000000000000;
  v26 = v120;
  v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v28 = *(_QWORD **)v26;
    v29 = *(_QWORD *)(*(_QWORD *)v26 + 32);
    if (v29 >= v27)
    {
      if (v29 <= v25)
      {
LABEL_19:
        v30 = v28[5];
        if (v30 < v23)
          goto LABEL_20;
        goto LABEL_28;
      }
    }
    else
    {
      v109.i64[0] = *(_QWORD *)(*(_QWORD *)v26 + 32);
      v27 = v29;
      if (v29 <= v25)
        goto LABEL_19;
    }
    v110.i64[0] = v29;
    v25 = v29;
    v30 = v28[5];
    if (v30 < v23)
    {
LABEL_20:
      v109.i64[1] = v30;
      v23 = v30;
      if (v30 <= v24)
        goto LABEL_21;
      goto LABEL_29;
    }
LABEL_28:
    if (v30 <= v24)
    {
LABEL_21:
      v31 = v28[6];
      if (v31 < v27)
        goto LABEL_22;
      goto LABEL_30;
    }
LABEL_29:
    v110.i64[1] = v30;
    v24 = v30;
    v31 = v28[6];
    if (v31 < v27)
    {
LABEL_22:
      v109.i64[0] = v31;
      v27 = v31;
      if (v31 <= v25)
        goto LABEL_23;
      goto LABEL_31;
    }
LABEL_30:
    if (v31 <= v25)
    {
LABEL_23:
      v32 = v28[7];
      if (v32 >= v23)
        goto LABEL_32;
      goto LABEL_24;
    }
LABEL_31:
    v110.i64[0] = v31;
    v25 = v31;
    v32 = v28[7];
    if (v32 >= v23)
    {
LABEL_32:
      if (v32 <= v24)
        goto LABEL_16;
      goto LABEL_33;
    }
LABEL_24:
    v109.i64[1] = v32;
    v23 = v32;
    if (v32 <= v24)
      goto LABEL_16;
LABEL_33:
    v110.i64[1] = v32;
    v24 = v32;
LABEL_16:
    v26 += 8;
  }
  while (v26 != v121);
  if (v111 != v112)
  {
    for (i = v111; i != v112; i += 8)
    {
      v57 = *(_QWORD **)i;
      v58 = *(_QWORD *)(*(_QWORD *)i + 32);
      if (v58 >= v27)
      {
        if (v58 <= v25)
        {
LABEL_91:
          v59 = v57[5];
          if (v59 < v23)
            goto LABEL_92;
          goto LABEL_100;
        }
      }
      else
      {
        v109.i64[0] = *(_QWORD *)(*(_QWORD *)i + 32);
        v27 = v58;
        if (v58 <= v25)
          goto LABEL_91;
      }
      v110.i64[0] = v58;
      v25 = v58;
      v59 = v57[5];
      if (v59 < v23)
      {
LABEL_92:
        v109.i64[1] = v59;
        v23 = v59;
        if (v59 <= v24)
          goto LABEL_93;
        goto LABEL_101;
      }
LABEL_100:
      if (v59 <= v24)
      {
LABEL_93:
        v60 = v57[6];
        if (v60 < v27)
          goto LABEL_94;
        goto LABEL_102;
      }
LABEL_101:
      v110.i64[1] = v59;
      v24 = v59;
      v60 = v57[6];
      if (v60 < v27)
      {
LABEL_94:
        v109.i64[0] = v60;
        v27 = v60;
        if (v60 <= v25)
          goto LABEL_95;
        goto LABEL_103;
      }
LABEL_102:
      if (v60 <= v25)
      {
LABEL_95:
        v61 = v57[7];
        if (v61 < v23)
          goto LABEL_96;
        goto LABEL_104;
      }
LABEL_103:
      v110.i64[0] = v60;
      v25 = v60;
      v61 = v57[7];
      if (v61 < v23)
      {
LABEL_96:
        v109.i64[1] = v61;
        v23 = v61;
        if (v61 > v24)
          goto LABEL_105;
        continue;
      }
LABEL_104:
      if (v61 > v24)
      {
LABEL_105:
        v110.i64[1] = v61;
        v24 = v61;
      }
    }
  }
  if ((sub_22377AFF8((__int128 *)v109.i8, &v120, &v111, a4 + 1, a5) & 1) == 0)
    goto LABEL_182;
LABEL_107:
  v63 = (char *)v117;
  v62 = v118;
  if ((unint64_t)(v118 - (_BYTE *)v117) >= 0x80
    && (unint64_t)(v115 - (_BYTE *)__p) >= 0x80
    && a4 <= 0x63
    && v21 >= 0x79)
  {
    v64 = 0x7FFFFFFFFFFFFFFFLL;
    v65 = 0x8000000000000000;
    v109 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v110 = vdupq_n_s64(0x8000000000000000);
    v66 = 0x8000000000000000;
    v67 = v18;
    v68 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      v69 = *(_QWORD **)v67;
      v70 = *(_QWORD *)(*(_QWORD *)v67 + 32);
      if (v70 >= v68)
      {
        if (v70 <= v66)
        {
LABEL_115:
          v71 = v69[5];
          if (v71 < v64)
            goto LABEL_116;
          goto LABEL_124;
        }
      }
      else
      {
        v109.i64[0] = *(_QWORD *)(*(_QWORD *)v67 + 32);
        v68 = v70;
        if (v70 <= v66)
          goto LABEL_115;
      }
      v110.i64[0] = v70;
      v66 = v70;
      v71 = v69[5];
      if (v71 < v64)
      {
LABEL_116:
        v109.i64[1] = v71;
        v64 = v71;
        if (v71 <= v65)
          goto LABEL_117;
        goto LABEL_125;
      }
LABEL_124:
      if (v71 <= v65)
      {
LABEL_117:
        v72 = v69[6];
        if (v72 < v68)
          goto LABEL_118;
        goto LABEL_126;
      }
LABEL_125:
      v110.i64[1] = v71;
      v65 = v71;
      v72 = v69[6];
      if (v72 < v68)
      {
LABEL_118:
        v109.i64[0] = v72;
        v68 = v72;
        if (v72 <= v66)
          goto LABEL_119;
        goto LABEL_127;
      }
LABEL_126:
      if (v72 <= v66)
      {
LABEL_119:
        v73 = v69[7];
        if (v73 < v64)
          goto LABEL_120;
        goto LABEL_128;
      }
LABEL_127:
      v110.i64[0] = v72;
      v66 = v72;
      v73 = v69[7];
      if (v73 < v64)
      {
LABEL_120:
        v109.i64[1] = v73;
        v64 = v73;
        if (v73 > v65)
          goto LABEL_129;
        goto LABEL_112;
      }
LABEL_128:
      if (v73 > v65)
      {
LABEL_129:
        v110.i64[1] = v73;
        v65 = v73;
      }
LABEL_112:
      v67 += 8;
      if (v67 == v19)
      {
        if (sub_22377AFF8((__int128 *)v109.i8, &v120, &v117, a4 + 1, a5)
          && (sub_22377AFF8((__int128 *)v109.i8, &v120, &__p, a4 + 1, a5) & 1) != 0)
        {
          goto LABEL_174;
        }
LABEL_182:
        v94 = 0;
        if (!v20)
          goto LABEL_184;
        goto LABEL_183;
      }
    }
  }
  if (v117 != v118)
  {
    v74 = v18;
    do
    {
      v75 = v63;
      do
      {
        v76 = *(_QWORD **)v74;
        v77 = *(_QWORD **)v75;
        if (*(_QWORD *)(*(_QWORD *)v74 + 48) >= *(_QWORD *)(*(_QWORD *)v75 + 32) && v76[4] <= v77[6])
        {
          v78 = v76[7] >= v77[5] && v76[5] <= v77[7];
          if (v78
            && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v76, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v77, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_182;
          }
        }
        v75 += 8;
      }
      while (v75 != v62);
      v74 += 8;
    }
    while (v74 != v19);
  }
  v79 = (char *)__p;
  v80 = v115;
  if (__p != v115)
  {
    v81 = v18;
    do
    {
      v82 = v79;
      do
      {
        v83 = *(_QWORD **)v81;
        v84 = *(_QWORD **)v82;
        if (*(_QWORD *)(*(_QWORD *)v81 + 48) >= *(_QWORD *)(*(_QWORD *)v82 + 32) && v83[4] <= v84[6])
        {
          v85 = v83[7] >= v84[5] && v83[5] <= v84[7];
          if (v85
            && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v83, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v84, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_182;
          }
        }
        v82 += 8;
      }
      while (v82 != v80);
      v81 += 8;
    }
    while (v81 != v19);
  }
LABEL_174:
  v108 = v18;
  v39 = v126;
  v38 = v127;
  v40 = v127 - v126;
  if (v20 == v22)
    goto LABEL_178;
LABEL_49:
  if (v40 < 0x80
    || (unint64_t)(v124 - (_BYTE *)v123) < 0x80
    || a4 > 0x63
    || (unint64_t)(v22 - v20) < 0x79)
  {
    v18 = v108;
    if (v39 != v38)
    {
      v51 = v39;
      do
      {
        v52 = v20;
        do
        {
          v53 = *(_QWORD **)v51;
          v54 = *(_QWORD **)v52;
          if (*(_QWORD *)(*(_QWORD *)v51 + 48) >= *(_QWORD *)(*(_QWORD *)v52 + 32) && v53[4] <= v54[6])
          {
            v55 = v53[7] >= v54[5] && v53[5] <= v54[7];
            if (v55
              && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v53, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v54, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_182;
            }
          }
          v52 += 8;
        }
        while (v52 != v22);
        v51 += 8;
      }
      while (v51 != v38);
    }
    v86 = (char *)v123;
    v87 = v124;
    while (1)
    {
      if (v86 == v87)
        goto LABEL_178;
      v88 = v20;
      do
      {
        v89 = *(_QWORD **)v86;
        v90 = *(_QWORD **)v88;
        if (*(_QWORD *)(*(_QWORD *)v86 + 48) >= *(_QWORD *)(*(_QWORD *)v88 + 32) && v89[4] <= v90[6])
        {
          v91 = v89[7] >= v90[5] && v89[5] <= v90[7];
          if (v91
            && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v89, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v90, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_231;
          }
        }
        v88 += 8;
      }
      while (v88 != v22);
      v86 += 8;
    }
  }
  v41 = 0x7FFFFFFFFFFFFFFFLL;
  v42 = 0x8000000000000000;
  v109 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v110 = vdupq_n_s64(0x8000000000000000);
  v43 = 0x8000000000000000;
  v44 = v20;
  v45 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v46 = *(_QWORD **)v44;
    v47 = *(_QWORD *)(*(_QWORD *)v44 + 32);
    if (v47 >= v45)
    {
      if (v47 > v43)
        goto LABEL_65;
LABEL_57:
      v48 = v46[5];
      if (v48 < v41)
        goto LABEL_58;
LABEL_66:
      if (v48 > v42)
        goto LABEL_67;
LABEL_59:
      v49 = v46[6];
      if (v49 < v45)
        goto LABEL_60;
LABEL_68:
      if (v49 > v43)
        goto LABEL_69;
LABEL_61:
      v50 = v46[7];
      if (v50 < v41)
        goto LABEL_62;
LABEL_70:
      if (v50 > v42)
      {
LABEL_71:
        v110.i64[1] = v50;
        v42 = v50;
      }
    }
    else
    {
      v109.i64[0] = *(_QWORD *)(*(_QWORD *)v44 + 32);
      v45 = v47;
      if (v47 <= v43)
        goto LABEL_57;
LABEL_65:
      v110.i64[0] = v47;
      v43 = v47;
      v48 = v46[5];
      if (v48 >= v41)
        goto LABEL_66;
LABEL_58:
      v109.i64[1] = v48;
      v41 = v48;
      if (v48 <= v42)
        goto LABEL_59;
LABEL_67:
      v110.i64[1] = v48;
      v42 = v48;
      v49 = v46[6];
      if (v49 >= v45)
        goto LABEL_68;
LABEL_60:
      v109.i64[0] = v49;
      v45 = v49;
      if (v49 <= v43)
        goto LABEL_61;
LABEL_69:
      v110.i64[0] = v49;
      v43 = v49;
      v50 = v46[7];
      if (v50 >= v41)
        goto LABEL_70;
LABEL_62:
      v109.i64[1] = v50;
      v41 = v50;
      if (v50 > v42)
        goto LABEL_71;
    }
    v44 += 8;
    if (v44 != v22)
      continue;
    break;
  }
  v18 = v108;
  if (!sub_22377AFF8((__int128 *)v109.i8, &v126, &v111, a4 + 1, a5)
    || (sub_22377AFF8((__int128 *)v109.i8, &v123, &v111, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_182;
  }
LABEL_178:
  if (v40 >= 0x80 && a4 <= 0x63 && (unint64_t)(v118 - (_BYTE *)v117) >= 0x79)
  {
    if ((sub_22377AFF8(&v130, &v126, &v117, a4 + 1, a5) & 1) != 0)
      goto LABEL_210;
LABEL_231:
    v94 = 0;
    v18 = v108;
    if (!v20)
      goto LABEL_184;
LABEL_183:
    operator delete(v20);
    goto LABEL_184;
  }
  if (v39 != v38)
  {
    v92 = (char *)v117;
    v93 = v118;
    if (v117 != v118)
    {
LABEL_196:
      v96 = v92;
      while (1)
      {
        v97 = *(_QWORD **)v39;
        v98 = *(_QWORD **)v96;
        if (*(_QWORD *)(*(_QWORD *)v39 + 48) >= *(_QWORD *)(*(_QWORD *)v96 + 32) && v97[4] <= v98[6])
        {
          v99 = v97[7] >= v98[5] && v97[5] <= v98[7];
          if (v99
            && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v97, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v98, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_231;
          }
        }
        v96 += 8;
        if (v96 == v93)
        {
          v39 += 8;
          if (v39 == v38)
            break;
          goto LABEL_196;
        }
      }
    }
  }
LABEL_210:
  v101 = (char *)v123;
  v100 = v124;
  if ((unint64_t)(v124 - (_BYTE *)v123) < 0x80 || a4 > 0x63 || (unint64_t)(v115 - (_BYTE *)__p) < 0x79)
  {
    if (v123 != v124)
    {
      v102 = (char *)__p;
      v103 = v115;
      if (__p != v115)
      {
LABEL_215:
        v104 = v102;
        while (1)
        {
          v105 = *(_QWORD **)v101;
          v106 = *(_QWORD **)v104;
          if (*(_QWORD *)(*(_QWORD *)v101 + 48) >= *(_QWORD *)(*(_QWORD *)v104 + 32) && v105[4] <= v106[6])
          {
            v107 = v105[7] >= v106[5] && v105[5] <= v106[7];
            if (v107
              && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v105, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v106, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_231;
            }
          }
          v104 += 8;
          if (v104 == v103)
          {
            v101 += 8;
            if (v101 == v100)
              break;
            goto LABEL_215;
          }
        }
      }
    }
  }
  else if ((sub_22377AFF8(v129, &v123, &__p, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_231;
  }
  v94 = 1;
  v18 = v108;
  if (v20)
    goto LABEL_183;
LABEL_184:
  if (__p)
    operator delete(__p);
  if (v117)
    operator delete(v117);
  if (v18)
    operator delete(v18);
  if (v123)
    operator delete(v123);
  if (v126)
    operator delete(v126);
  return v94;
}

void sub_22377AF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  uint64_t v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (v31)
  {
    operator delete(v31);
    v34 = __p;
    if (!__p)
    {
LABEL_3:
      v35 = a25;
      if (!a25)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a25;
  if (!a25)
  {
LABEL_4:
    v36 = a28;
    if (!a28)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a28;
  if (!a28)
  {
LABEL_5:
    v37 = a31;
    if (!a31)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a31;
  if (!a31)
  {
LABEL_6:
    v38 = *(void **)(v32 - 184);
    if (!v38)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = *(void **)(v32 - 184);
  if (!v38)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22377AFF8(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  BOOL v52;
  char *i;
  _QWORD *v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  BOOL v82;
  char *v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  BOOL v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v93;
  _QWORD *v94;
  _QWORD *v95;
  BOOL v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  _QWORD *v102;
  _QWORD *v103;
  BOOL v104;
  char *v105;
  int64x2_t v106;
  int64x2_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  void *__p;
  char *v112;
  uint64_t v113;
  void *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  void *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  _QWORD v126[2];
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;

  v8 = *((_QWORD *)a1 + 1);
  v9 = *((_QWORD *)a1 + 3);
  if (&v128 != a1)
  {
    v128 = *a1;
    v129 = *((_QWORD *)a1 + 2);
  }
  if (v126 != (_QWORD *)a1)
  {
    v126[0] = *(_QWORD *)a1;
    v127 = a1[1];
  }
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = v9 + 1;
  v11 = v10 >> 1;
  if (v8 >= 0)
    v12 = v8;
  else
    v12 = v8 + 1;
  v13 = v12 >> 1;
  v14 = v9 - 2 * v11 + v8 - 2 * v13;
  v130 = v11 + v13 + ((v14 + ((v14 & 0x80) >> 7)) << 24 >> 25);
  v126[1] = v130;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  __p = 0;
  v112 = 0;
  v113 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  sub_22376B6AC(&v128, v126, a2, &v123, (char **)&v120, &v117);
  sub_22376B6AC(&v128, v126, a3, &v114, (char **)&__p, &v108);
  v15 = v117;
  v16 = v118;
  v17 = v108;
  if (v117 == v118)
  {
    v105 = v117;
    v19 = v109;
    v36 = v123;
    v35 = v124;
    v37 = v124 - v123;
    if (v108 == v109)
      goto LABEL_178;
    goto LABEL_49;
  }
  v18 = v118 - v117;
  v19 = v109;
  if ((unint64_t)(v118 - v117) < 0x80 || a4 > 0x63 || (unint64_t)(v109 - v108) < 0x79)
  {
    if (v108 != v109)
    {
      v30 = v117;
      do
      {
        v31 = v17;
        do
        {
          v32 = *(_QWORD **)v30;
          v33 = *(_QWORD **)v31;
          if (*(_QWORD *)(*(_QWORD *)v30 + 48) >= *(_QWORD *)(*(_QWORD *)v31 + 32) && v32[4] <= v33[6])
          {
            v34 = v32[7] >= v33[5] && v32[5] <= v33[7];
            if (v34
              && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v32, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v33, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_182;
            }
          }
          v31 += 8;
        }
        while (v31 != v19);
        v30 += 8;
      }
      while (v30 != v16);
    }
    goto LABEL_107;
  }
  v20 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = 0x8000000000000000;
  v106 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v107 = vdupq_n_s64(0x8000000000000000);
  v22 = 0x8000000000000000;
  v23 = v117;
  v24 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v25 = *(_QWORD **)v23;
    v26 = *(_QWORD *)(*(_QWORD *)v23 + 32);
    if (v26 >= v24)
    {
      if (v26 <= v22)
      {
LABEL_19:
        v27 = v25[5];
        if (v27 < v20)
          goto LABEL_20;
        goto LABEL_28;
      }
    }
    else
    {
      v106.i64[0] = *(_QWORD *)(*(_QWORD *)v23 + 32);
      v24 = v26;
      if (v26 <= v22)
        goto LABEL_19;
    }
    v107.i64[0] = v26;
    v22 = v26;
    v27 = v25[5];
    if (v27 < v20)
    {
LABEL_20:
      v106.i64[1] = v27;
      v20 = v27;
      if (v27 <= v21)
        goto LABEL_21;
      goto LABEL_29;
    }
LABEL_28:
    if (v27 <= v21)
    {
LABEL_21:
      v28 = v25[6];
      if (v28 < v24)
        goto LABEL_22;
      goto LABEL_30;
    }
LABEL_29:
    v107.i64[1] = v27;
    v21 = v27;
    v28 = v25[6];
    if (v28 < v24)
    {
LABEL_22:
      v106.i64[0] = v28;
      v24 = v28;
      if (v28 <= v22)
        goto LABEL_23;
      goto LABEL_31;
    }
LABEL_30:
    if (v28 <= v22)
    {
LABEL_23:
      v29 = v25[7];
      if (v29 >= v20)
        goto LABEL_32;
      goto LABEL_24;
    }
LABEL_31:
    v107.i64[0] = v28;
    v22 = v28;
    v29 = v25[7];
    if (v29 >= v20)
    {
LABEL_32:
      if (v29 <= v21)
        goto LABEL_16;
      goto LABEL_33;
    }
LABEL_24:
    v106.i64[1] = v29;
    v20 = v29;
    if (v29 <= v21)
      goto LABEL_16;
LABEL_33:
    v107.i64[1] = v29;
    v21 = v29;
LABEL_16:
    v23 += 8;
  }
  while (v23 != v118);
  if (v108 != v109)
  {
    for (i = v108; i != v109; i += 8)
    {
      v54 = *(_QWORD **)i;
      v55 = *(_QWORD *)(*(_QWORD *)i + 32);
      if (v55 >= v24)
      {
        if (v55 <= v22)
        {
LABEL_91:
          v56 = v54[5];
          if (v56 < v20)
            goto LABEL_92;
          goto LABEL_100;
        }
      }
      else
      {
        v106.i64[0] = *(_QWORD *)(*(_QWORD *)i + 32);
        v24 = v55;
        if (v55 <= v22)
          goto LABEL_91;
      }
      v107.i64[0] = v55;
      v22 = v55;
      v56 = v54[5];
      if (v56 < v20)
      {
LABEL_92:
        v106.i64[1] = v56;
        v20 = v56;
        if (v56 <= v21)
          goto LABEL_93;
        goto LABEL_101;
      }
LABEL_100:
      if (v56 <= v21)
      {
LABEL_93:
        v57 = v54[6];
        if (v57 < v24)
          goto LABEL_94;
        goto LABEL_102;
      }
LABEL_101:
      v107.i64[1] = v56;
      v21 = v56;
      v57 = v54[6];
      if (v57 < v24)
      {
LABEL_94:
        v106.i64[0] = v57;
        v24 = v57;
        if (v57 <= v22)
          goto LABEL_95;
        goto LABEL_103;
      }
LABEL_102:
      if (v57 <= v22)
      {
LABEL_95:
        v58 = v54[7];
        if (v58 < v20)
          goto LABEL_96;
        goto LABEL_104;
      }
LABEL_103:
      v107.i64[0] = v57;
      v22 = v57;
      v58 = v54[7];
      if (v58 < v20)
      {
LABEL_96:
        v106.i64[1] = v58;
        v20 = v58;
        if (v58 > v21)
          goto LABEL_105;
        continue;
      }
LABEL_104:
      if (v58 > v21)
      {
LABEL_105:
        v107.i64[1] = v58;
        v21 = v58;
      }
    }
  }
  if ((sub_22377A2FC(&v106, &v117, &v108, a4 + 1, a5) & 1) == 0)
    goto LABEL_182;
LABEL_107:
  v60 = (char *)v114;
  v59 = v115;
  if ((unint64_t)(v115 - (_BYTE *)v114) >= 0x80
    && (unint64_t)(v112 - (_BYTE *)__p) >= 0x80
    && a4 <= 0x63
    && v18 >= 0x79)
  {
    v61 = 0x7FFFFFFFFFFFFFFFLL;
    v62 = 0x8000000000000000;
    v106 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v107 = vdupq_n_s64(0x8000000000000000);
    v63 = 0x8000000000000000;
    v64 = v15;
    v65 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      v66 = *(_QWORD **)v64;
      v67 = *(_QWORD *)(*(_QWORD *)v64 + 32);
      if (v67 >= v65)
      {
        if (v67 <= v63)
        {
LABEL_115:
          v68 = v66[5];
          if (v68 < v61)
            goto LABEL_116;
          goto LABEL_124;
        }
      }
      else
      {
        v106.i64[0] = *(_QWORD *)(*(_QWORD *)v64 + 32);
        v65 = v67;
        if (v67 <= v63)
          goto LABEL_115;
      }
      v107.i64[0] = v67;
      v63 = v67;
      v68 = v66[5];
      if (v68 < v61)
      {
LABEL_116:
        v106.i64[1] = v68;
        v61 = v68;
        if (v68 <= v62)
          goto LABEL_117;
        goto LABEL_125;
      }
LABEL_124:
      if (v68 <= v62)
      {
LABEL_117:
        v69 = v66[6];
        if (v69 < v65)
          goto LABEL_118;
        goto LABEL_126;
      }
LABEL_125:
      v107.i64[1] = v68;
      v62 = v68;
      v69 = v66[6];
      if (v69 < v65)
      {
LABEL_118:
        v106.i64[0] = v69;
        v65 = v69;
        if (v69 <= v63)
          goto LABEL_119;
        goto LABEL_127;
      }
LABEL_126:
      if (v69 <= v63)
      {
LABEL_119:
        v70 = v66[7];
        if (v70 < v61)
          goto LABEL_120;
        goto LABEL_128;
      }
LABEL_127:
      v107.i64[0] = v69;
      v63 = v69;
      v70 = v66[7];
      if (v70 < v61)
      {
LABEL_120:
        v106.i64[1] = v70;
        v61 = v70;
        if (v70 > v62)
          goto LABEL_129;
        goto LABEL_112;
      }
LABEL_128:
      if (v70 > v62)
      {
LABEL_129:
        v107.i64[1] = v70;
        v62 = v70;
      }
LABEL_112:
      v64 += 8;
      if (v64 == v16)
      {
        if (sub_22377A2FC(&v106, &v117, &v114, a4 + 1, a5)
          && (sub_22377A2FC(&v106, &v117, &__p, a4 + 1, a5) & 1) != 0)
        {
          goto LABEL_174;
        }
LABEL_182:
        v91 = 0;
        if (!v17)
          goto LABEL_184;
        goto LABEL_183;
      }
    }
  }
  if (v114 != v115)
  {
    v71 = v15;
    do
    {
      v72 = v60;
      do
      {
        v73 = *(_QWORD **)v71;
        v74 = *(_QWORD **)v72;
        if (*(_QWORD *)(*(_QWORD *)v71 + 48) >= *(_QWORD *)(*(_QWORD *)v72 + 32) && v73[4] <= v74[6])
        {
          v75 = v73[7] >= v74[5] && v73[5] <= v74[7];
          if (v75
            && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v73, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v74, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_182;
          }
        }
        v72 += 8;
      }
      while (v72 != v59);
      v71 += 8;
    }
    while (v71 != v16);
  }
  v76 = (char *)__p;
  v77 = v112;
  if (__p != v112)
  {
    v78 = v15;
    do
    {
      v79 = v76;
      do
      {
        v80 = *(_QWORD **)v78;
        v81 = *(_QWORD **)v79;
        if (*(_QWORD *)(*(_QWORD *)v78 + 48) >= *(_QWORD *)(*(_QWORD *)v79 + 32) && v80[4] <= v81[6])
        {
          v82 = v80[7] >= v81[5] && v80[5] <= v81[7];
          if (v82
            && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v80, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v81, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_182;
          }
        }
        v79 += 8;
      }
      while (v79 != v77);
      v78 += 8;
    }
    while (v78 != v16);
  }
LABEL_174:
  v105 = v15;
  v36 = v123;
  v35 = v124;
  v37 = v124 - v123;
  if (v17 == v19)
    goto LABEL_178;
LABEL_49:
  if (v37 < 0x80
    || (unint64_t)(v121 - (_BYTE *)v120) < 0x80
    || a4 > 0x63
    || (unint64_t)(v19 - v17) < 0x79)
  {
    v15 = v105;
    if (v36 != v35)
    {
      v48 = v36;
      do
      {
        v49 = v17;
        do
        {
          v50 = *(_QWORD **)v48;
          v51 = *(_QWORD **)v49;
          if (*(_QWORD *)(*(_QWORD *)v48 + 48) >= *(_QWORD *)(*(_QWORD *)v49 + 32) && v50[4] <= v51[6])
          {
            v52 = v50[7] >= v51[5] && v50[5] <= v51[7];
            if (v52
              && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v50, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v51, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_182;
            }
          }
          v49 += 8;
        }
        while (v49 != v19);
        v48 += 8;
      }
      while (v48 != v35);
    }
    v83 = (char *)v120;
    v84 = v121;
    while (1)
    {
      if (v83 == v84)
        goto LABEL_178;
      v85 = v17;
      do
      {
        v86 = *(_QWORD **)v83;
        v87 = *(_QWORD **)v85;
        if (*(_QWORD *)(*(_QWORD *)v83 + 48) >= *(_QWORD *)(*(_QWORD *)v85 + 32) && v86[4] <= v87[6])
        {
          v88 = v86[7] >= v87[5] && v86[5] <= v87[7];
          if (v88
            && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v86, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v87, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_231;
          }
        }
        v85 += 8;
      }
      while (v85 != v19);
      v83 += 8;
    }
  }
  v38 = 0x7FFFFFFFFFFFFFFFLL;
  v39 = 0x8000000000000000;
  v106 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v107 = vdupq_n_s64(0x8000000000000000);
  v40 = 0x8000000000000000;
  v41 = v17;
  v42 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v43 = *(_QWORD **)v41;
    v44 = *(_QWORD *)(*(_QWORD *)v41 + 32);
    if (v44 >= v42)
    {
      if (v44 > v40)
        goto LABEL_65;
LABEL_57:
      v45 = v43[5];
      if (v45 < v38)
        goto LABEL_58;
LABEL_66:
      if (v45 > v39)
        goto LABEL_67;
LABEL_59:
      v46 = v43[6];
      if (v46 < v42)
        goto LABEL_60;
LABEL_68:
      if (v46 > v40)
        goto LABEL_69;
LABEL_61:
      v47 = v43[7];
      if (v47 < v38)
        goto LABEL_62;
LABEL_70:
      if (v47 > v39)
      {
LABEL_71:
        v107.i64[1] = v47;
        v39 = v47;
      }
    }
    else
    {
      v106.i64[0] = *(_QWORD *)(*(_QWORD *)v41 + 32);
      v42 = v44;
      if (v44 <= v40)
        goto LABEL_57;
LABEL_65:
      v107.i64[0] = v44;
      v40 = v44;
      v45 = v43[5];
      if (v45 >= v38)
        goto LABEL_66;
LABEL_58:
      v106.i64[1] = v45;
      v38 = v45;
      if (v45 <= v39)
        goto LABEL_59;
LABEL_67:
      v107.i64[1] = v45;
      v39 = v45;
      v46 = v43[6];
      if (v46 >= v42)
        goto LABEL_68;
LABEL_60:
      v106.i64[0] = v46;
      v42 = v46;
      if (v46 <= v40)
        goto LABEL_61;
LABEL_69:
      v107.i64[0] = v46;
      v40 = v46;
      v47 = v43[7];
      if (v47 >= v38)
        goto LABEL_70;
LABEL_62:
      v106.i64[1] = v47;
      v38 = v47;
      if (v47 > v39)
        goto LABEL_71;
    }
    v41 += 8;
    if (v41 != v19)
      continue;
    break;
  }
  v15 = v105;
  if (!sub_22377A2FC(&v106, &v123, &v108, a4 + 1, a5)
    || (sub_22377A2FC(&v106, &v120, &v108, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_182;
  }
LABEL_178:
  if (v37 >= 0x80 && a4 <= 0x63 && (unint64_t)(v115 - (_BYTE *)v114) >= 0x79)
  {
    if ((sub_22377A2FC(&v128, &v123, &v114, a4 + 1, a5) & 1) != 0)
      goto LABEL_210;
LABEL_231:
    v91 = 0;
    v15 = v105;
    if (!v17)
      goto LABEL_184;
LABEL_183:
    operator delete(v17);
    goto LABEL_184;
  }
  if (v36 != v35)
  {
    v89 = (char *)v114;
    v90 = v115;
    if (v114 != v115)
    {
LABEL_196:
      v93 = v89;
      while (1)
      {
        v94 = *(_QWORD **)v36;
        v95 = *(_QWORD **)v93;
        if (*(_QWORD *)(*(_QWORD *)v36 + 48) >= *(_QWORD *)(*(_QWORD *)v93 + 32) && v94[4] <= v95[6])
        {
          v96 = v94[7] >= v95[5] && v94[5] <= v95[7];
          if (v96
            && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v94, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v95, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_231;
          }
        }
        v93 += 8;
        if (v93 == v90)
        {
          v36 += 8;
          if (v36 == v35)
            break;
          goto LABEL_196;
        }
      }
    }
  }
LABEL_210:
  v98 = (char *)v120;
  v97 = v121;
  if ((unint64_t)(v121 - (_BYTE *)v120) < 0x80 || a4 > 0x63 || (unint64_t)(v112 - (_BYTE *)__p) < 0x79)
  {
    if (v120 != v121)
    {
      v99 = (char *)__p;
      v100 = v112;
      if (__p != v112)
      {
LABEL_215:
        v101 = v99;
        while (1)
        {
          v102 = *(_QWORD **)v98;
          v103 = *(_QWORD **)v101;
          if (*(_QWORD *)(*(_QWORD *)v98 + 48) >= *(_QWORD *)(*(_QWORD *)v101 + 32) && v102[4] <= v103[6])
          {
            v104 = v102[7] >= v103[5] && v102[5] <= v103[7];
            if (v104
              && !sub_22377BCFC(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v102, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v103, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_231;
            }
          }
          v101 += 8;
          if (v101 == v100)
          {
            v98 += 8;
            if (v98 == v97)
              break;
            goto LABEL_215;
          }
        }
      }
    }
  }
  else if ((sub_22377A2FC(v126, &v120, &__p, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_231;
  }
  v91 = 1;
  v15 = v105;
  if (v17)
    goto LABEL_183;
LABEL_184:
  if (__p)
    operator delete(__p);
  if (v114)
    operator delete(v114);
  if (v15)
    operator delete(v15);
  if (v120)
    operator delete(v120);
  if (v123)
    operator delete(v123);
  return v91;
}

void sub_22377BC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  uint64_t v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (v31)
  {
    operator delete(v31);
    v34 = __p;
    if (!__p)
    {
LABEL_3:
      v35 = a25;
      if (!a25)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a25;
  if (!a25)
  {
LABEL_4:
    v36 = a28;
    if (!a28)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a28;
  if (!a28)
  {
LABEL_5:
    v37 = a31;
    if (!a31)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a31;
  if (!a31)
  {
LABEL_6:
    v38 = *(void **)(v32 - 184);
    if (!v38)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = *(void **)(v32 - 184);
  if (!v38)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22377BCFC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, unsigned __int8 **a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136[16];
  int v137;
  char v138;
  uint64_t v139;
  __int16 v140;
  int v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157[19];
  char v158;
  char v159;
  uint64_t v160[19];
  char v161;
  char v162;

  if (*(_BYTE *)(a4 + 96) && (unint64_t)(*(_QWORD *)(a4 + 80) + 1) < *(_QWORD *)(a4 + 88)
    || *(_BYTE *)(a8 + 96) && (unint64_t)(*(_QWORD *)(a8 + 80) + 1) < *(_QWORD *)(a8 + 88))
  {
    return 1;
  }
  v13 = (a3 - a2) >> 4;
  if (a3 == a2)
    v14 = 0;
  else
    v14 = v13 + 1;
  v15 = (a7 - a6) >> 4;
  if (a7 == a6)
    v16 = 0;
  else
    v16 = v15 + 1;
  v131 = v16;
  v17 = *(_QWORD *)(a4 + 64);
  v18 = v14 - v17;
  if (v14 >= v13 || v18 >= v13)
  {
    v19 = a3;
    if (v18 <= v13)
      v19 = a2 + 16 * (v18 % v13);
  }
  else
  {
    v19 = a3 - 16 * v17;
  }
  v20 = *(_QWORD *)(a4 + 72);
  if (v18 >= v13)
  {
    v21 = a3;
    if (v18 - 1 <= v13)
      v21 = a2 + 16 * ((v18 - 1) % v13);
  }
  else
  {
    v21 = v19 - 16;
  }
  v22 = v14 - v20;
  v23 = *(_DWORD *)a4;
  if (v20 == v17)
  {
LABEL_38:
    v31 = v18 - 1;
    if (v18 >= v13)
      goto LABEL_43;
LABEL_39:
    v32 = v19 - 16;
    v33 = v31;
    v34 = v31;
    if (v31)
      goto LABEL_45;
    goto LABEL_40;
  }
  v24 = v14 - v17;
  v25 = v19;
  v26 = *(_QWORD *)(a4 + 64);
  do
  {
    v27 = v21;
    v28 = v24 - 2;
    if (v24 - 1 >= v13)
    {
      v29 = (uint64_t *)a3;
      if (v28 <= v13)
        v29 = (uint64_t *)(a2 + 16 * (v28 % v13));
    }
    else
    {
      v29 = (uint64_t *)(v21 - 16);
    }
    v30 = *v29;
    if (v23 == 1)
    {
      if (v30 >= *(_QWORD *)(a8 + 32))
        goto LABEL_37;
    }
    else
    {
      if (v23 != -1)
        goto LABEL_38;
      if (v30 <= *(_QWORD *)(a8 + 48))
      {
LABEL_37:
        v18 = v24;
        v19 = v25;
        v17 = v26;
        goto LABEL_38;
      }
    }
    if (v24 - 1 < v13)
    {
      v21 = v27 - 16;
    }
    else
    {
      v21 = a3;
      if (v28 <= v13)
        v21 = a2 + 16 * (v28 % v13);
    }
    ++v26;
    --v24;
    v25 = v27;
  }
  while (v20 != v26);
  v18 = v14 - v20;
  v19 = v27;
  v17 = *(_QWORD *)(a4 + 72);
  v31 = v22 - 1;
  if (v22 < v13)
    goto LABEL_39;
LABEL_43:
  v32 = a3;
  if (v31 > v13)
  {
    v33 = v31;
    v34 = v31;
    if (v31)
      goto LABEL_45;
LABEL_40:
    v33 = v14 - 1;
    if (v14 >= v13)
    {
      v32 = a3;
      if (v33 <= v13)
        v32 = a2 + 16 * (v33 % v13);
    }
    else
    {
      v32 = a3 - 16;
    }
    if (v14 == v18)
    {
      v33 = v14;
      v32 = a3;
    }
    if (v18 < v13)
      goto LABEL_46;
    goto LABEL_54;
  }
  v32 = a2 + 16 * (v31 % v13);
  v33 = v31;
  v34 = v31;
  if (!v31)
    goto LABEL_40;
LABEL_45:
  if (v18 < v13)
  {
LABEL_46:
    v35 = v19 - 16;
    goto LABEL_56;
  }
LABEL_54:
  v120 = a3;
  if (v34 > v13)
    goto LABEL_57;
  v35 = a2 + 16 * (v34 % v13);
LABEL_56:
  v120 = v35;
LABEL_57:
  v36 = v33 - 1;
  if (v33 >= v13)
  {
    v37 = a3;
    if (v36 <= v13)
    {
      v37 = a2 + 16 * (v36 % v13);
      v38 = v33 - 1;
      if (v33 != 1)
        goto LABEL_63;
    }
    else
    {
      v38 = v33 - 1;
      if (v33 != 1)
        goto LABEL_63;
    }
LABEL_59:
    v39 = v14 - 1;
    if (v14 >= v13)
    {
      v40 = a3;
      if (v39 <= v13)
        v40 = a2 + 16 * (v39 % v13);
    }
    else
    {
      v40 = a3 - 16;
    }
    if (v14 == v33)
      v38 = v14;
    else
      v38 = v14 - 1;
    if (v14 == v33)
      v37 = a3;
    else
      v37 = v40;
    v12 = 1;
    if (v18 == v22)
      return v12;
    goto LABEL_76;
  }
  v37 = v32 - 16;
  v38 = v33 - 1;
  if (v33 == 1)
    goto LABEL_59;
LABEL_63:
  v12 = 1;
  if (v18 == v22)
    return v12;
LABEL_76:
  v111 = -v23;
  v41 = *(_DWORD *)a8;
  v42 = -*(_DWORD *)a8;
  v43 = v131 < v15;
  if (v131 >= v15)
    v44 = 0;
  else
    v44 = -1;
  v123 = v131 - 1;
  if (v131 - 1 > v15)
    v43 = 1;
  v122 = v43;
  v45 = v14 < v13;
  v128 = a1;
  v127 = a5;
  if (v14 >= v13)
    v46 = 0;
  else
    v46 = -1;
  v104 = v14 - 1;
  if (v14 - 1 > v13)
    v45 = 1;
  v103 = v45;
  v121 = a7 + 16 * v44;
  v102 = a3 + 16 * v46;
  v108 = (a3 - a2) >> 4;
  v109 = a2;
  v106 = v22;
  v107 = v14;
  v105 = *(_DWORD *)a8;
  v124 = -*(_DWORD *)a8;
  v125 = a7;
  v126 = a6;
  v110 = a3;
  while (1)
  {
    v48 = v18 - 1;
    if (v18 >= v13)
    {
      v49 = (uint64_t *)a3;
      v50 = v111;
      if (v48 <= v13)
        v49 = (uint64_t *)(a2 + 16 * (v48 % v13));
    }
    else
    {
      v49 = (uint64_t *)(v19 - 16);
      v50 = v111;
    }
    v51 = *v49;
    if (v50 == 1)
    {
      if (v51 < *(_QWORD *)(a8 + 32))
        return 1;
    }
    else if (v50 == -1 && v51 > *(_QWORD *)(a8 + 48))
    {
      return 1;
    }
    if (v18 >= v13)
    {
      v52 = a3;
      if (v48 <= v13)
        v52 = a2 + 16 * (v48 % v13);
    }
    else
    {
      v52 = v19 - 16;
    }
    v53 = v34 - 1;
    v117 = v34;
    v114 = v18 - 1;
    if (v34 >= v13)
    {
      v54 = a3;
      if (v53 <= v13)
        v54 = a2 + 16 * (v53 % v13);
    }
    else
    {
      v54 = v120 - 16;
    }
    v113 = v34 - 1;
    v160[0] = a4;
    v160[1] = v17;
    v160[2] = v52;
    v160[3] = v54;
    v115 = v37;
    v116 = v38;
    v160[4] = v37;
    v160[5] = a2;
    v160[6] = a3;
    v160[7] = v13;
    v160[8] = v38;
    v160[9] = a3;
    v160[10] = a2;
    v160[11] = a3;
    v160[12] = v13;
    v160[13] = v14;
    v160[14] = a2;
    v160[15] = a2;
    v160[16] = a3;
    v160[17] = v13;
    v160[18] = 0;
    v161 = 1;
    v55 = *(_QWORD *)(a8 + 64);
    v56 = v131 - v55;
    v162 = 0;
    if (v131 >= v15 || v56 >= v15)
    {
      v57 = a7;
      if (v56 <= v15)
        v57 = a6 + 16 * (v56 % v15);
    }
    else
    {
      v57 = a7 - 16 * v55;
    }
    if (v56 >= v15)
    {
      v58 = a7;
      if (v56 - 1 <= v15)
      {
        v58 = a6 + 16 * ((v56 - 1) % v15);
        v59 = *(_QWORD *)(a8 + 72);
        v129 = v131 - v59;
        if (v59 == v55)
        {
LABEL_132:
          v67 = v56 - 1;
          if (v56 >= v15)
            goto LABEL_159;
LABEL_133:
          v68 = v57 - 16;
          v69 = v67;
          v119 = v123 / v15;
          if (!v67)
            goto LABEL_134;
LABEL_161:
          v118 = v18;
          if (v56 >= v15)
            goto LABEL_142;
LABEL_162:
          v71 = v57 - 16;
          v72 = v69 - 1;
          if (v69 < v15)
            goto LABEL_145;
          goto LABEL_163;
        }
      }
      else
      {
        v59 = *(_QWORD *)(a8 + 72);
        v129 = v131 - v59;
        if (v59 == v55)
          goto LABEL_132;
      }
    }
    else
    {
      v58 = v57 - 16;
      v59 = *(_QWORD *)(a8 + 72);
      v129 = v131 - v59;
      if (v59 == v55)
        goto LABEL_132;
    }
    v60 = v131 - v55;
    v61 = v57;
    v62 = v55;
    while (1)
    {
      v63 = v58;
      v64 = v60 - 2;
      if (v60 - 1 >= v15)
      {
        v65 = (uint64_t *)a7;
        if (v64 <= v15)
          v65 = (uint64_t *)(a6 + 16 * (v64 % v15));
      }
      else
      {
        v65 = (uint64_t *)(v58 - 16);
      }
      v66 = *v65;
      if (v41 == 1)
      {
        if (v66 >= *(_QWORD *)(a4 + 32))
        {
LABEL_158:
          v56 = v60;
          v55 = v62;
          v67 = v60 - 1;
          if (v60 < v15)
            goto LABEL_133;
          goto LABEL_159;
        }
        goto LABEL_127;
      }
      if (v41 != -1)
        break;
      if (v66 <= *(_QWORD *)(a4 + 48))
        goto LABEL_158;
LABEL_127:
      if (v60 - 1 < v15)
      {
        v58 = v63 - 16;
      }
      else
      {
        v58 = a7;
        if (v64 <= v15)
          v58 = a6 + 16 * (v64 % v15);
      }
      ++v62;
      --v60;
      v57 = v63;
      if (v59 == v62)
      {
        v56 = v129;
        v57 = v63;
        v55 = v59;
        v67 = v129 - 1;
        if (v129 < v15)
          goto LABEL_133;
        goto LABEL_159;
      }
    }
    v57 = v61;
    v67 = v56 - 1;
    if (v56 < v15)
      goto LABEL_133;
LABEL_159:
    v68 = a7;
    if (v67 <= v15)
    {
      v68 = a6 + 16 * (v67 % v15);
      v69 = v67;
      v119 = v123 / v15;
      if (!v67)
        goto LABEL_134;
      goto LABEL_161;
    }
    v69 = v67;
    v119 = v123 / v15;
    if (v67)
      goto LABEL_161;
LABEL_134:
    v70 = v121;
    if (!v122)
      v70 = a6 + 16 * (v123 - v119 * v15);
    if (v131 == v56)
      v68 = a7;
    else
      v68 = v70;
    v69 = v131 - 1;
    if (v131 == v56)
      v69 = v131;
    v118 = v18;
    if (v56 < v15)
      goto LABEL_162;
LABEL_142:
    v71 = a7;
    if (v67 <= v15)
      v71 = a6 + 16 * (v67 % v15);
    v72 = v69 - 1;
    if (v69 < v15)
    {
LABEL_145:
      v73 = v68 - 16;
      v112 = v19;
      if (!v72)
        goto LABEL_146;
LABEL_165:
      if (v56 != v129)
        goto LABEL_174;
      goto LABEL_166;
    }
LABEL_163:
    v73 = a7;
    if (v72 <= v15)
    {
      v73 = a6 + 16 * (v72 % v15);
      v112 = v19;
      if (v72)
        goto LABEL_165;
    }
    else
    {
      v112 = v19;
      if (v72)
        goto LABEL_165;
    }
LABEL_146:
    v74 = v121;
    if (!v122)
      v74 = a6 + 16 * (v123 - v119 * v15);
    v73 = v131 == v69 ? a7 : v74;
    v72 = v131 == v69 ? v131 : v131 - 1;
    if (v56 != v129)
      break;
LABEL_166:
    v13 = v108;
    if (v118 >= v108)
    {
      a2 = v109;
      a3 = v110;
      v19 = v110;
      v18 = v114;
      v79 = v115;
      v76 = v106;
      v14 = v107;
      v78 = v116;
      v77 = v117;
      v41 = v105;
      v75 = v113;
      if (v114 <= v108)
        v19 = v109 + 16 * (v114 % v108);
    }
    else
    {
      v75 = v113;
      v19 = v112 - 16;
      a2 = v109;
      a3 = v110;
      v76 = v106;
      v14 = v107;
      v78 = v116;
      v77 = v117;
      v18 = v114;
      v79 = v115;
      v41 = v105;
    }
    if (v77 < v108)
    {
      v99 = v120 - 16;
      goto LABEL_221;
    }
    v120 = a3;
    if (v75 <= v108)
    {
      v99 = a2 + 16 * (v75 % v108);
LABEL_221:
      v120 = v99;
    }
    v47 = v78 - 1;
    if (v78 >= v108)
    {
      v37 = a3;
      if (v47 <= v108)
      {
        v37 = a2 + 16 * (v47 % v108);
        if (v78 == 1)
          goto LABEL_233;
      }
      else if (v78 == 1)
      {
LABEL_233:
        v100 = v102;
        if (!v103)
          v100 = a2 + 16 * (v104 % v108);
        v47 = v104;
        if (v14 == v78)
        {
          v47 = v14;
          v37 = a3;
        }
        else
        {
          v37 = v100;
        }
      }
    }
    else
    {
      v37 = v79 - 16;
      if (v78 == 1)
        goto LABEL_233;
    }
    ++v17;
    v38 = v47;
    v34 = v75;
    if (v77 == v76)
      return 1;
  }
  while (1)
  {
LABEL_174:
    v82 = v56 - 1;
    if (v56 >= v15)
    {
      v83 = (uint64_t *)a7;
      if (v82 <= v15)
        v83 = (uint64_t *)(a6 + 16 * (v82 % v15));
    }
    else
    {
      v83 = (uint64_t *)(v57 - 16);
    }
    v84 = *v83;
    if (v42 == 1)
    {
      if (v84 < *(_QWORD *)(a4 + 32))
        goto LABEL_166;
    }
    else if (v42 == -1 && v84 > *(_QWORD *)(a4 + 48))
    {
      goto LABEL_166;
    }
    if (v56 >= v15)
    {
      v85 = a7;
      if (v82 <= v15)
        v85 = a6 + 16 * (v82 % v15);
    }
    else
    {
      v85 = v57 - 16;
    }
    v86 = v67 - 1;
    v130 = v57;
    v133 = v71;
    v134 = v56;
    v135 = v56 - 1;
    if (v67 >= v15)
    {
      v87 = a7;
      if (v86 <= v15)
        v87 = a6 + 16 * (v86 % v15);
    }
    else
    {
      v87 = v71 - 16;
    }
    v132 = v73;
    v157[0] = a8;
    v157[1] = v55;
    v157[2] = v85;
    v157[3] = v87;
    v157[4] = v73;
    v157[5] = a6;
    v157[6] = a7;
    v157[7] = v15;
    v157[8] = v72;
    v157[9] = a7;
    v157[10] = a6;
    v157[11] = a7;
    v157[12] = v15;
    v157[13] = v131;
    v157[14] = a6;
    v157[15] = a6;
    v157[16] = a7;
    v157[17] = v15;
    v157[18] = 0;
    v158 = 0;
    v159 = 0;
    v137 = 0;
    v138 = 0;
    v139 = -1;
    v140 = 0;
    v141 = 0;
    v147 = 0;
    v148 = 0;
    v149 = 0;
    v154 = 1;
    v155 = 0;
    v156 = 0;
    v142 = v128;
    v88 = a4;
    v143 = *(_OWORD *)(a4 + 16);
    v144 = v17;
    v145 = xmmword_2245F5400;
    v146 = 1;
    v150 = v127;
    v89 = a8;
    v151 = *(_OWORD *)(a8 + 16);
    v90 = v55;
    v152 = v55;
    v91 = a11[1] - *a11;
    v153 = xmmword_2245F5400;
    sub_22377C994(v160, v157, (uint64_t)v136, a9, a10, (uint64_t)a11);
    v92 = a11[1];
    for (i = *a11 + v91; i != v92; i += 200)
    {
      if (*(_DWORD *)(i + 40) == 4 && **a12 - 58 <= 0xFFFFFFF7)
        **a12 = 50;
      if (*(_DWORD *)(i + 120) == 4 && **a12 - 58 <= 0xFFFFFFF7)
        **a12 = 50;
    }
    if ((*a12)[9])
      return 0;
    if (v134 >= v15)
    {
      a7 = v125;
      a6 = v126;
      v57 = v125;
      a8 = v89;
      a4 = v88;
      v42 = v124;
      v94 = v90;
      v96 = v132;
      v95 = v133;
      v97 = v67 - 1;
      if (v135 <= v15)
        v57 = v126 + 16 * (v135 % v15);
    }
    else
    {
      v57 = v130 - 16;
      a8 = v89;
      a7 = v125;
      a6 = v126;
      a4 = v88;
      v42 = v124;
      v94 = v90;
      v96 = v132;
      v95 = v133;
      v97 = v67 - 1;
    }
    if (v67 >= v15)
    {
      v71 = a7;
      if (v97 <= v15)
        v71 = a6 + 16 * (v97 % v15);
    }
    else
    {
      v71 = v95 - 16;
    }
    v80 = v72 - 1;
    if (v72 >= v15)
    {
      v73 = a7;
      if (v80 <= v15)
        v73 = a6 + 16 * (v80 % v15);
    }
    else
    {
      v73 = v96 - 16;
    }
    if (v72 == 1)
    {
      v98 = v121;
      if (!v122)
        v98 = a6 + 16 * (v123 - v119 * v15);
      if (v131 == 1)
        v73 = a7;
      else
        v73 = v98;
      v80 = v131 - 1;
      if (v131 == 1)
        v80 = 1;
    }
    v55 = v94 + 1;
    v72 = v80;
    v56 = v135;
    v81 = v67 == v129;
    v67 = v97;
    if (v81)
      goto LABEL_166;
  }
}

uint64_t sub_22377C994(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  int v37;
  int v38;
  double v39;
  int v40;
  double v41;
  double v42;
  double v43;
  int v44;
  double v45;
  int v46;
  double v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  unint64_t v108;
  unint64_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  __int128 v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  int v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  int v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  uint64_t *v174;
  double v175;
  int v176;
  double v177;
  int v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v194;
  uint64_t v195;
  _OWORD *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  uint64_t *v209;
  double v210;
  int v211;
  double v212;
  int v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v239;
  uint64_t v240;
  _OWORD *v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  __int128 v253;
  uint64_t *v254;
  double v255;
  int v256;
  double v257;
  uint64_t *v258;
  uint64_t *v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v272;
  uint64_t v273;
  _OWORD *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  uint64_t *v287;
  double v288;
  int v289;
  double v290;
  BOOL v291;
  int v292;
  char v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v299;
  int v300;
  int v301;
  BOOL v302;
  int v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  _OWORD *v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v315;
  uint64_t v316;
  __int128 v317;
  uint64_t v318;
  uint64_t v319;
  __int128 v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  _OWORD *v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v332;
  uint64_t v333;
  __int128 v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  uint64_t *v338;
  double v339;
  int v340;
  double v341;
  _BOOL4 v342;
  _BOOL4 v343;
  uint64_t *v344;
  uint64_t *v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  double v355;
  int v356;
  double v357;
  uint64_t *v358;
  uint64_t *v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v373;
  uint64_t v374;
  _OWORD *v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v383;
  __int128 v384;
  uint64_t v385;
  uint64_t v386;
  __int128 v387;
  uint64_t *v388;
  double v389;
  int v390;
  double v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  unsigned int v398;
  uint64_t *v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t *v404;
  uint64_t *v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  _OWORD *v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v425;
  uint64_t v426;
  __int128 v427;
  uint64_t v428;
  uint64_t v429;
  __int128 v430;
  uint64_t *v431;
  double v432;
  int v433;
  uint64_t *v434;
  uint64_t *v435;
  uint64_t *v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v448;
  uint64_t v449;
  _OWORD *v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v458;
  __int128 v459;
  uint64_t v460;
  uint64_t v461;
  __int128 v462;
  uint64_t *v463;
  double v464;
  int v465;
  char ***v466;
  __int128 *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v471;
  uint64_t v472;
  _OWORD *v473;
  int v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v481;
  __int128 v482;
  uint64_t v483;
  uint64_t v484;
  __int128 v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v490;
  uint64_t v491;
  _OWORD *v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v500;
  __int128 v501;
  uint64_t v502;
  uint64_t v503;
  __int128 v504;
  uint64_t *v505;
  double v506;
  int v507;
  double v508;
  uint64_t *v509;
  uint64_t *v510;
  uint64_t v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t *v518;
  double v519;
  int v520;
  double v521;
  uint64_t *v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v535;
  uint64_t v536;
  _OWORD *v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v545;
  __int128 v546;
  uint64_t v547;
  uint64_t v548;
  __int128 v549;
  uint64_t *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v554;
  uint64_t v555;
  _OWORD *v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v564;
  __int128 v565;
  uint64_t v566;
  uint64_t v567;
  __int128 v568;
  uint64_t *v569;
  uint64_t *v570;
  double v571;
  int v572;
  double v573;
  int v574;
  int v575;
  uint64_t *v576;
  uint64_t *v577;
  uint64_t *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  double v585;
  int v586;
  uint64_t *v587;
  double v588;
  int v589;
  double v590;
  int v591;
  uint64_t *v592;
  uint64_t *v593;
  uint64_t *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  double v601;
  int v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v606;
  uint64_t v607;
  _OWORD *v608;
  int v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v616;
  __int128 v617;
  uint64_t v618;
  uint64_t v619;
  __int128 v620;
  uint64_t *v621;
  double v622;
  int v623;
  double v624;
  uint64_t *v625;
  uint64_t *v626;
  uint64_t *v627;
  uint64_t v628;
  uint64_t *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  _QWORD *v634;
  uint64_t v635;
  uint64_t v636;
  _OWORD *v637;
  int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v645;
  uint64_t v646;
  __int128 v647;
  uint64_t v648;
  uint64_t v649;
  __int128 v650;
  uint64_t *v651;
  double v652;
  int v653;
  double v654;
  int v655;
  int v656;
  int v657;
  int v658;
  int v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t *v663;
  uint64_t *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  _QWORD *v670;
  uint64_t v671;
  uint64_t v672;
  _OWORD *v673;
  int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v681;
  uint64_t v682;
  __int128 v683;
  uint64_t v684;
  uint64_t v685;
  __int128 v686;
  uint64_t *v687;
  uint64_t *v688;
  uint64_t *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  _QWORD *v695;
  uint64_t v696;
  uint64_t v697;
  _OWORD *v698;
  int v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v706;
  uint64_t v707;
  __int128 v708;
  uint64_t v709;
  uint64_t v710;
  __int128 v711;
  uint64_t *v712;
  int v713;
  double v714;
  double v715;
  int v716;
  int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  uint64_t v723;
  uint64_t *v724;
  uint64_t *v725;
  uint64_t v726;
  uint64_t *v727;
  uint64_t *v728;
  uint64_t v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  uint64_t v733;
  __int128 v734;
  double v735;
  char v736;
  __int128 v737;
  uint64_t v738;
  __int128 v739;
  double v740;
  char v741;
  __int16 v742;
  __int128 v743;
  _BYTE v744[26];
  uint64_t v745;
  uint64_t v746;
  __int128 *v747[2];
  __int128 *v748[2];
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  _BYTE v754[32];
  __int128 v755;
  __int128 v756;
  __int128 v757;
  _BYTE v758[32];
  uint64_t v759;
  __int128 v760;
  _BYTE v761[48];
  __int128 v762;
  __int128 v763;
  _BYTE v764[32];
  __int128 v765;
  __int128 v766;
  __int128 v767;
  _BYTE v768[32];
  uint64_t v769;
  uint64_t v770;

  v770 = *MEMORY[0x24BDAC8D0];
  v724 = a1;
  v725 = a2;
  v727 = a2;
  v728 = a1;
  v12 = a1[3];
  v14 = a2[2];
  v13 = a2[3];
  v748[0] = (__int128 *)a1[2];
  v748[1] = (__int128 *)v12;
  v747[0] = (__int128 *)v14;
  v747[1] = (__int128 *)v13;
  v751 = xmmword_2245F5410;
  v752 = 0uLL;
  v753 = 1uLL;
  v16 = *(_QWORD *)v12;
  v15 = *(_QWORD *)(v12 + 8);
  v17 = *(_QWORD *)v748[0];
  v18 = *((_QWORD *)v748[0] + 1);
  v19 = *(_QWORD *)(v13 + 8);
  v20 = *(_QWORD *)(v14 + 8);
  v23 = *(_QWORD *)v12 == *(_QWORD *)v748[0];
  *(_QWORD *)&v749 = *(_QWORD *)v12 - *(_QWORD *)v748[0];
  v21 = *(_QWORD *)v13;
  v22 = *(_QWORD *)v14;
  v23 = v23 && v15 == v18;
  v24 = v23;
  *((_QWORD *)&v749 + 1) = v15 - v18;
  *(_QWORD *)&v750 = v21 - v22;
  *((_QWORD *)&v750 + 1) = v19 - v20;
  v26 = v21 == v22 && v19 == v20;
  if (v24 == 1 && v26)
    return a6;
  v27 = v17 >= v16 ? v16 : v17;
  v28 = v17 <= v16 ? v16 : v17;
  v29 = v22 >= v21 ? v21 : v22;
  v30 = v22 <= v21 ? v21 : v22;
  if (v28 < v29 || v30 < v27)
    return a6;
  v31 = v18 >= v15 ? v15 : v18;
  v32 = v18 <= v15 ? v15 : v18;
  v33 = v20 >= v19 ? v19 : v20;
  v34 = v20 <= v19 ? v19 : v20;
  if (v32 < v33 || v34 < v31)
    return a6;
  v720 = a4;
  v721 = a5;
  *((_QWORD *)&v760 + 1) = 0;
  *(_QWORD *)v761 = 0x3FF0000000000000;
  v35 = sub_22376A6D8(v22, v20, v21, v19, v17, v18, (double *)v761);
  v719 = a6;
  if (v35 == 0.0)
    goto LABEL_44;
  if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v35 > 0.0)
      v38 = 1;
    else
      v38 = -1;
    v722 = v38;
  }
  else
  {
    v36 = fabs(v35);
    if (v35 > 0.0)
      v37 = 1;
    else
      v37 = -1;
    v722 = v37;
    if (v36 <= *(double *)v761 * 2.22044605e-16)
LABEL_44:
      v722 = 0;
  }
  *(_QWORD *)v761 = 0x3FF0000000000000;
  v39 = sub_22376A6D8(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)v12, *(_QWORD *)(v12 + 8), (double *)v761);
  if (v39 == 0.0)
  {
LABEL_56:
    v40 = 0;
    goto LABEL_66;
  }
  if ((*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v39 > 0.0)
      v40 = 1;
    else
      v40 = -1;
  }
  else
  {
    v41 = fabs(v39);
    if (v39 > 0.0)
      v40 = 1;
    else
      v40 = -1;
    if (v41 <= *(double *)v761 * 2.22044605e-16)
      goto LABEL_56;
  }
LABEL_66:
  *(_QWORD *)&v760 = __PAIR64__(v40, v722);
  if (v40 * v722 == 1)
  {
LABEL_67:
    v733 = 0;
    *(_QWORD *)&v734 = 0;
    v738 = 0;
    *(_QWORD *)&v739 = 0;
    memset(&v761[2], 0, 40);
    v729 = 0;
    v732 = xmmword_2245F5410;
    *((_QWORD *)&v734 + 1) = 1;
    v735 = 0.0;
    v736 = 0;
    v737 = xmmword_2245F5410;
    *((_QWORD *)&v739 + 1) = 1;
    v740 = 0.0;
    v741 = 0;
    v742 = 100;
    *(_OWORD *)&v744[10] = 0uLL;
    *(_OWORD *)v744 = *(_OWORD *)&v761[16];
    v743 = *(_OWORD *)v761;
    a6 = v719;
    goto LABEL_132;
  }
  *(_QWORD *)v761 = 0x3FF0000000000000;
  v42 = sub_22376A6D8(*(_QWORD *)v748[0], *((_QWORD *)v748[0] + 1), *(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_QWORD *)v14, *(_QWORD *)(v14 + 8), (double *)v761);
  if (v42 == 0.0)
    goto LABEL_69;
  if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v42 > 0.0)
      v44 = 1;
    else
      v44 = -1;
  }
  else
  {
    v43 = fabs(v42);
    if (v42 > 0.0)
      v44 = 1;
    else
      v44 = -1;
    if (v43 <= *(double *)v761 * 2.22044605e-16)
    {
LABEL_69:
      v718 = 0;
      goto LABEL_80;
    }
  }
  v718 = v44;
LABEL_80:
  *(_QWORD *)v761 = 0x3FF0000000000000;
  v45 = sub_22376A6D8(*(_QWORD *)v748[0], *((_QWORD *)v748[0] + 1), *(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_QWORD *)v13, *(_QWORD *)(v13 + 8), (double *)v761);
  if (v45 == 0.0)
  {
LABEL_81:
    v46 = 0;
    goto LABEL_91;
  }
  if ((*(_QWORD *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v45 > 0.0)
      v46 = 1;
    else
      v46 = -1;
  }
  else
  {
    v47 = fabs(v45);
    if (v45 > 0.0)
      v46 = 1;
    else
      v46 = -1;
    if (v47 <= *(double *)v761 * 2.22044605e-16)
      goto LABEL_81;
  }
LABEL_91:
  *((_QWORD *)&v760 + 1) = __PAIR64__(v46, v718);
  if (v46 * v718 == 1)
    goto LABEL_67;
  v48 = v718 | v46;
  v49 = *(_QWORD *)v12;
  v50 = *(_QWORD *)(v12 + 8);
  v52 = *(_QWORD *)v748[0];
  v51 = *((_QWORD *)v748[0] + 1);
  v53 = *(_QWORD *)v12 - *(_QWORD *)v748[0];
  v54 = *(_QWORD *)v13;
  v55 = *(_QWORD *)(v13 + 8);
  v57 = *(_QWORD *)v14;
  v56 = *(_QWORD *)(v14 + 8);
  v58 = *(_QWORD *)v13 - *(_QWORD *)v14;
  v59 = v50 - v51;
  v60 = v55 - v56;
  if (v40 | v722 | v48)
  {
    v61 = v60 * v53 - v59 * v58;
    if (v61)
    {
      v62 = v59 * v58 - v60 * v53;
      if (v62)
      {
        v63 = (v51 - v56) * v58 + v60 * (v57 - v52);
        v64 = v59 * (v52 - v57) + (v56 - v51) * v53;
        *(_QWORD *)&v751 = v63;
        *((_QWORD *)&v751 + 1) = v60 * v53 - v59 * v58;
        if (v61 < 0)
        {
          v63 = -v63;
          v61 = v59 * v58 - v60 * v53;
          *(_QWORD *)&v751 = v63;
          *((_QWORD *)&v751 + 1) = v61;
        }
        *(double *)&v752 = (double)v63 * 1000000.0 / (double)v61;
        *((_QWORD *)&v752 + 1) = v64;
        *(_QWORD *)&v753 = v59 * v58 - v60 * v53;
        a6 = v719;
        if (v62 < 0)
        {
          v64 = -v64;
          v62 = v60 * v53 - v59 * v58;
          *((_QWORD *)&v752 + 1) = v64;
          *(_QWORD *)&v753 = v62;
        }
        *((double *)&v753 + 1) = (double)v64 * 1000000.0 / (double)v62;
        goto LABEL_128;
      }
    }
    v760 = 0uLL;
  }
  if (v53 >= 0)
    v65 = v53;
  else
    v65 = -v53;
  if (v59 >= 0)
    v66 = v50 - v51;
  else
    v66 = v51 - v50;
  if (v58 >= 0)
    v67 = v58;
  else
    v67 = -v58;
  if (v60 >= 0)
    v68 = v55 - v56;
  else
    v68 = v56 - v55;
  if (v24)
  {
    v69 = (v67 >= (unint64_t)v68) | 0x100;
    a6 = v719;
    goto LABEL_127;
  }
  a6 = v719;
  if (v26)
  {
    v70 = v65 >= v66;
LABEL_126:
    v69 = v70 | 0x100;
    goto LABEL_127;
  }
  if (v67 < (uint64_t)v65)
    v65 = v67;
  if (v68 < (uint64_t)v66)
    v66 = v68;
  if (v65 != v66)
  {
    v70 = v65 > v66;
    goto LABEL_126;
  }
  if (v65)
    v69 = 257;
  else
    v69 = 1;
LABEL_127:
  if ((v69 & 0x100) == 0)
  {
LABEL_128:
    sub_223771EF8((uint64_t)&v729, (int *)&v760, (double *)&v749, (_QWORD *)v748[0], (_QWORD *)v14);
    goto LABEL_132;
  }
  if ((v69 & 1) != 0)
    sub_223771BA8((uint64_t)&v729, v748, v747, v52, v49, v57, v54, v24, v26);
  else
    sub_223771BA8((uint64_t)&v729, v748, v747, v51, v50, v56, v55, v24, v26);
LABEL_132:
  v745 = v720;
  v746 = v721;
  if (v742 == 100)
    return a6;
  v71 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)v768 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v768[16] = v71;
  v769 = *(_QWORD *)(a3 + 192);
  v72 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)&v764[16] = *(_OWORD *)(a3 + 96);
  v765 = v72;
  v73 = *(_OWORD *)(a3 + 144);
  v766 = *(_OWORD *)(a3 + 128);
  v767 = v73;
  v74 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v761 = *(_OWORD *)a3;
  *(_OWORD *)&v761[16] = v74;
  v75 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v761[32] = *(_OWORD *)(a3 + 32);
  v762 = v75;
  v76 = *(_OWORD *)(a3 + 80);
  v763 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)v764 = v76;
  switch((char)v742)
  {
    case 'c':
      if (!HIBYTE(v742))
      {
        if (!*(_DWORD *)&v744[18])
        {
          sub_2237806BC((uint64_t)v761, (uint64_t)&v729, (uint64_t)&v723);
          v157 = 5;
          goto LABEL_1071;
        }
        if (vabdd_f64(v735, v740) >= 50.0)
        {
          v119 = v735 < v740;
          goto LABEL_703;
        }
        v749 = v734;
        sub_2233E5290((int64_t)&v749);
        v760 = v739;
        sub_2233E5290((int64_t)&v760);
        v98 = *((_QWORD *)&v749 + 1);
        v99 = (uint64_t)v749 / *((_QWORD *)&v749 + 1);
        v100 = (uint64_t)v749 % *((_QWORD *)&v749 + 1);
        v101 = *((_QWORD *)&v760 + 1);
        v102 = (uint64_t)v760 / *((_QWORD *)&v760 + 1);
        v103 = (uint64_t)v760 % *((_QWORD *)&v760 + 1);
        if ((uint64_t)v749 % *((_QWORD *)&v749 + 1) < 0)
        {
          v104 = ((unint64_t)(*((_QWORD *)&v749 + 1) + v100) >> 63)
               + (((*((_QWORD *)&v749 + 1) + v100) & ~((*((_QWORD *)&v749 + 1) + v100) >> 63))
                - (((unint64_t)(*((_QWORD *)&v749 + 1) + v100) >> 63)
                 + *((_QWORD *)&v749 + 1)
                 + v100))
               / *((_QWORD *)&v749 + 1)
               + 1;
          if (v104 < 4)
            goto LABEL_1325;
          v100 += (v104 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v749 + 1);
          v105 = 0uLL;
          v106 = (int64x2_t)(unint64_t)((uint64_t)v749 / *((_QWORD *)&v749 + 1));
          v107.i64[0] = -1;
          v107.i64[1] = -1;
          v108 = v104 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v106 = vaddq_s64(v106, v107);
            v105 = vaddq_s64(v105, v107);
            v108 -= 4;
          }
          while (v108);
          v99 = vaddvq_s64(vaddq_s64(v105, v106));
          if (v104 != (v104 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_1325:
            do
            {
              v100 += *((_QWORD *)&v749 + 1);
              --v99;
            }
            while (v100 < 0);
          }
        }
        if (v103 < 0)
        {
          v109 = ((unint64_t)(*((_QWORD *)&v760 + 1) + v103) >> 63)
               + (((*((_QWORD *)&v760 + 1) + v103) & ~((*((_QWORD *)&v760 + 1) + v103) >> 63))
                - (((unint64_t)(*((_QWORD *)&v760 + 1) + v103) >> 63)
                 + *((_QWORD *)&v760 + 1)
                 + v103))
               / *((_QWORD *)&v760 + 1)
               + 1;
          if (v109 < 4)
            goto LABEL_1326;
          v103 += (v109 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v760 + 1);
          v110 = 0uLL;
          v111 = (int64x2_t)(unint64_t)((uint64_t)v760 / *((_QWORD *)&v760 + 1));
          v112.i64[0] = -1;
          v112.i64[1] = -1;
          v113 = v109 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v111 = vaddq_s64(v111, v112);
            v110 = vaddq_s64(v110, v112);
            v113 -= 4;
          }
          while (v113);
          v102 = vaddvq_s64(vaddq_s64(v110, v111));
          if (v109 != (v109 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_1326:
            do
            {
              v103 += *((_QWORD *)&v760 + 1);
              --v102;
            }
            while (v103 < 0);
          }
        }
        if (v99 != v102)
        {
          v119 = v99 < v102;
          goto LABEL_703;
        }
        v114 = 0;
        while (1)
        {
          v115 = v100;
          v116 = v103;
          v114 ^= 1u;
          if (!v100 || !v103)
            break;
          v117 = v98 / v100;
          v100 = v98 % v100;
          v118 = v101 / v103;
          v103 = v101 % v103;
          v101 = v116;
          v98 = v115;
          if (v117 != v118)
          {
            v119 = v117 > v118;
            if (!v114)
              v119 = v117 < v118;
            goto LABEL_703;
          }
        }
        v119 = (v114 != 0) ^ (v100 != 0);
        if (v100 == v103)
          v119 = 0;
LABEL_703:
        *(_DWORD *)&v761[16] = 5;
        v398 = v119;
        v399 = &v729 + 2 * v119 + 1;
        if (v399 != (uint64_t *)v761)
          *(_OWORD *)v761 = *(_OWORD *)v399;
        v400 = &v729 + 7 * v398;
        v401 = v400[7];
        *(_OWORD *)&v764[8] = *(_OWORD *)(v400 + 5);
        *(_OWORD *)&v768[8] = *((_OWORD *)v400 + 4);
        v402 = v400[10];
        *(_QWORD *)&v764[24] = v401;
        *(_QWORD *)&v768[24] = v402;
        v403 = *(_DWORD *)&v744[18];
        v404 = v724;
        v405 = (uint64_t *)v724[2];
        v406 = (uint64_t *)v724[3];
        v407 = *v406;
        if (!*((_BYTE *)v724 + 176))
        {
          v408 = v724 + 4;
          v409 = v406[1];
          v410 = v724[5];
          v411 = v724[7];
          v412 = v724[8];
          v413 = v412 - 1;
          if (v412 >= v411)
          {
            if (v413 <= v411)
              v414 = (uint64_t *)(v410 + 16 * (v413 % v411));
            else
              v414 = (uint64_t *)v724[6];
          }
          else
          {
            v414 = (uint64_t *)(*v408 - 16);
          }
          v604 = *v414;
          v603 = v414[1];
          if (v604 == v407 && v603 == v409)
          {
            v607 = v724[18];
            v608 = v724 + 9;
            v609 = *((unsigned __int8 *)v724 + 152);
            v610 = -1;
            v611 = *v724;
            while (1)
            {
              v606 = v412;
              if ((unint64_t)++v610 >= *(_QWORD *)(v611 + 88))
                break;
              --v412;
              v404[8] = v606 - 1;
              if (v606 >= v411)
              {
                if (v412 <= v411)
                  v616 = v410 + 16 * (v412 % v411);
                else
                  v616 = v404[6];
              }
              else
              {
                v616 = *v408 - 16;
              }
              *v408 = v616;
              if (v412 == v607)
              {
                v404[8] = v404[13];
                v617 = *(_OWORD *)(v404 + 11);
                *(_OWORD *)v408 = *v608;
                *((_OWORD *)v404 + 3) = v617;
                v411 = v404[7];
                v618 = v404[8];
                if (v609)
                {
                  v412 = v618 - 1;
                  v404[8] = v618 - 1;
                  if (v618 >= v411)
                  {
                    if (v412 <= v411)
                      v619 = v404[5] + 16 * (v412 % v411);
                    else
                      v619 = v404[6];
                  }
                  else
                  {
                    v619 = *v408 - 16;
                  }
                  *v408 = v619;
                  if (v618 == v606)
                  {
                    v404[8] = v404[13];
                    v620 = *(_OWORD *)(v404 + 11);
                    *(_OWORD *)v408 = *v608;
                    *((_OWORD *)v404 + 3) = v620;
                    v411 = v404[7];
                    v412 = v404[8];
                  }
                }
                else
                {
                  v412 = v404[8];
                }
              }
              v410 = v404[5];
              v413 = v412 - 1;
              if (v412 < v411)
              {
                v612 = (uint64_t *)(*v408 - 16);
              }
              else if (v413 <= v411)
              {
                v612 = (uint64_t *)(v410 + 16 * (v413 % v411));
              }
              else
              {
                v612 = (uint64_t *)v404[6];
              }
              v614 = *v612;
              v613 = v612[1];
              if (v614 != v407 || v613 != v409)
                goto LABEL_1077;
            }
            v413 = v412 - 1;
          }
          else
          {
LABEL_1077:
            v606 = v412;
          }
          if (v606 >= v411)
          {
            if (v413 <= v411)
              v621 = (uint64_t *)(v410 + 16 * (v413 % v411));
            else
              v621 = (uint64_t *)v404[6];
          }
          else
          {
            v621 = (uint64_t *)(*v408 - 16);
          }
          if (v404 + 20 != v621)
            *((_OWORD *)v404 + 10) = *(_OWORD *)v621;
          *((_BYTE *)v404 + 176) = 1;
          v407 = *v406;
        }
        *(_QWORD *)&v749 = 0x3FF0000000000000;
        v622 = sub_22376A6D8(*v405, v405[1], v407, v406[1], v404[20], v404[21], (double *)&v749);
        if (v622 != 0.0)
        {
          if ((*(_QWORD *)&v622 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v622 > 0.0)
              v623 = 1;
            else
              v623 = -1;
            goto LABEL_1125;
          }
          v624 = fabs(v622);
          if (v622 > 0.0)
            v623 = 1;
          else
            v623 = -1;
          if (v624 > *(double *)&v749 * 2.22044605e-16)
            goto LABEL_1125;
        }
        v623 = 0;
LABEL_1125:
        v625 = v725;
        v626 = (uint64_t *)v725[2];
        v627 = (uint64_t *)v725[3];
        v628 = *v627;
        if (!*((_BYTE *)v725 + 176))
        {
          v629 = v725 + 4;
          v630 = v725[5];
          v631 = v725[7];
          v632 = v725[8];
          v633 = v632 - 1;
          if (v632 >= v631)
          {
            if (v633 <= v631)
              v634 = (_QWORD *)(v630 + 16 * (v633 % v631));
            else
              v634 = (_QWORD *)v725[6];
          }
          else
          {
            v634 = (_QWORD *)(*v629 - 16);
          }
          if (*v634 == v628 && (v635 = v627[1], v634[1] == v635))
          {
            v636 = v725[18];
            v637 = v725 + 9;
            v638 = *((unsigned __int8 *)v725 + 152);
            v639 = -1;
            v640 = *v725;
            while (1)
            {
              v645 = v632;
              if ((unint64_t)++v639 >= *(_QWORD *)(v640 + 88))
                break;
              --v632;
              v625[8] = v645 - 1;
              if (v645 >= v631)
              {
                if (v632 <= v631)
                  v646 = v630 + 16 * (v632 % v631);
                else
                  v646 = v625[6];
              }
              else
              {
                v646 = *v629 - 16;
              }
              *v629 = v646;
              if (v632 == v636)
              {
                v625[8] = v625[13];
                v647 = *(_OWORD *)(v625 + 11);
                *(_OWORD *)v629 = *v637;
                *((_OWORD *)v625 + 3) = v647;
                v631 = v625[7];
                v648 = v625[8];
                if (v638)
                {
                  v632 = v648 - 1;
                  v625[8] = v648 - 1;
                  if (v648 >= v631)
                  {
                    if (v632 <= v631)
                      v649 = v625[5] + 16 * (v632 % v631);
                    else
                      v649 = v625[6];
                  }
                  else
                  {
                    v649 = *v629 - 16;
                  }
                  *v629 = v649;
                  if (v648 == v645)
                  {
                    v625[8] = v625[13];
                    v650 = *(_OWORD *)(v625 + 11);
                    *(_OWORD *)v629 = *v637;
                    *((_OWORD *)v625 + 3) = v650;
                    v631 = v625[7];
                    v632 = v625[8];
                  }
                }
                else
                {
                  v632 = v625[8];
                }
              }
              v630 = v625[5];
              v633 = v632 - 1;
              if (v632 < v631)
              {
                v641 = (uint64_t *)(*v629 - 16);
              }
              else if (v633 <= v631)
              {
                v641 = (uint64_t *)(v630 + 16 * (v633 % v631));
              }
              else
              {
                v641 = (uint64_t *)v625[6];
              }
              v643 = *v641;
              v642 = v641[1];
              if (v643 != v628 || v642 != v635)
                goto LABEL_1160;
            }
            v633 = v632 - 1;
          }
          else
          {
LABEL_1160:
            v645 = v632;
          }
          if (v645 >= v631)
          {
            if (v633 <= v631)
              v651 = (uint64_t *)(v630 + 16 * (v633 % v631));
            else
              v651 = (uint64_t *)v625[6];
          }
          else
          {
            v651 = (uint64_t *)(*v629 - 16);
          }
          if (v625 + 20 != v651)
            *((_OWORD *)v625 + 10) = *(_OWORD *)v651;
          *((_BYTE *)v625 + 176) = 1;
          v628 = *v627;
        }
        *(_QWORD *)&v749 = 0x3FF0000000000000;
        v652 = sub_22376A6D8(*v626, v626[1], v628, v627[1], v625[20], v625[21], (double *)&v749);
        if (v652 == 0.0)
          goto LABEL_1171;
        if ((*(_QWORD *)&v652 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v652 > 0.0)
            v653 = 1;
          else
            v653 = -1;
          goto LABEL_1181;
        }
        v654 = fabs(v652);
        v653 = v652 > 0.0 ? 1 : -1;
        if (v654 <= *(double *)&v749 * 2.22044605e-16)
LABEL_1171:
          v653 = 0;
LABEL_1181:
        if (v403 == 1)
          v655 = v623;
        else
          v655 = v653;
        v656 = v655 * v403;
        if (v656 == 1)
          v657 = 1;
        else
          v657 = 2;
        if (v656 == 1)
          v658 = 2;
        else
          v658 = 1;
        if (v656)
        {
          v659 = v658;
        }
        else
        {
          v657 = 4;
          v659 = 4;
        }
        *(_DWORD *)&v761[40] = v657;
        DWORD2(v765) = v659;
        if (v623)
        {
          v660 = *(_QWORD *)v761;
          v661 = *(_QWORD *)&v761[8];
          v662 = (*(_QWORD *)v761 - *(_QWORD *)a1[3]) * (*(_QWORD *)v761 - *(_QWORD *)a1[3])
               + (*(_QWORD *)&v761[8] - *(_QWORD *)(a1[3] + 8)) * (*(_QWORD *)&v761[8] - *(_QWORD *)(a1[3] + 8));
        }
        else
        {
          if (!*((_BYTE *)a1 + 176))
          {
            v663 = (uint64_t *)a1[3];
            v664 = a1 + 4;
            v665 = *v663;
            v666 = a1[5];
            v667 = a1[7];
            v668 = a1[8];
            v669 = v668 - 1;
            if (v668 >= v667)
            {
              if (v669 <= v667)
                v670 = (_QWORD *)(v666 + 16 * (v669 % v667));
              else
                v670 = (_QWORD *)a1[6];
            }
            else
            {
              v670 = (_QWORD *)(*v664 - 16);
            }
            if (*v670 == v665 && (v671 = v663[1], v670[1] == v671))
            {
              v672 = a1[18];
              v673 = a1 + 9;
              v674 = *((unsigned __int8 *)a1 + 152);
              v675 = -1;
              v676 = *a1;
              while (1)
              {
                v681 = v668;
                if ((unint64_t)++v675 >= *(_QWORD *)(v676 + 88))
                  break;
                --v668;
                a1[8] = v681 - 1;
                if (v681 >= v667)
                {
                  if (v668 <= v667)
                    v682 = v666 + 16 * (v668 % v667);
                  else
                    v682 = a1[6];
                }
                else
                {
                  v682 = *v664 - 16;
                }
                *v664 = v682;
                if (v668 == v672)
                {
                  a1[8] = a1[13];
                  v683 = *(_OWORD *)(a1 + 11);
                  *(_OWORD *)v664 = *v673;
                  *((_OWORD *)a1 + 3) = v683;
                  v667 = a1[7];
                  v684 = a1[8];
                  if (v674)
                  {
                    v668 = v684 - 1;
                    a1[8] = v684 - 1;
                    if (v684 >= v667)
                    {
                      if (v668 <= v667)
                        v685 = a1[5] + 16 * (v668 % v667);
                      else
                        v685 = a1[6];
                    }
                    else
                    {
                      v685 = *v664 - 16;
                    }
                    *v664 = v685;
                    if (v684 == v681)
                    {
                      a1[8] = a1[13];
                      v686 = *(_OWORD *)(a1 + 11);
                      *(_OWORD *)v664 = *v673;
                      *((_OWORD *)a1 + 3) = v686;
                      v667 = a1[7];
                      v668 = a1[8];
                    }
                  }
                  else
                  {
                    v668 = a1[8];
                  }
                }
                v666 = a1[5];
                v669 = v668 - 1;
                if (v668 < v667)
                {
                  v677 = (uint64_t *)(*v664 - 16);
                }
                else if (v669 <= v667)
                {
                  v677 = (uint64_t *)(v666 + 16 * (v669 % v667));
                }
                else
                {
                  v677 = (uint64_t *)a1[6];
                }
                v679 = *v677;
                v678 = v677[1];
                if (v679 != v665 || v678 != v671)
                  goto LABEL_1232;
              }
              v669 = v668 - 1;
            }
            else
            {
LABEL_1232:
              v681 = v668;
            }
            if (v681 >= v667)
            {
              if (v669 <= v667)
                v687 = (uint64_t *)(v666 + 16 * (v669 % v667));
              else
                v687 = (uint64_t *)a1[6];
            }
            else
            {
              v687 = (uint64_t *)(*v664 - 16);
            }
            if (a1 + 20 != v687)
              *((_OWORD *)a1 + 10) = *(_OWORD *)v687;
            *((_BYTE *)a1 + 176) = 1;
          }
          v660 = *(_QWORD *)v761;
          v661 = *(_QWORD *)&v761[8];
          v662 = (*(_QWORD *)v761 - a1[20]) * (*(_QWORD *)v761 - a1[20])
               + (*(_QWORD *)&v761[8] - a1[21]) * (*(_QWORD *)&v761[8] - a1[21]);
        }
        *(_QWORD *)&v765 = v662;
        if (v653)
        {
          v769 = (v660 - *(_QWORD *)a2[3]) * (v660 - *(_QWORD *)a2[3])
               + (v661 - *(_QWORD *)(a2[3] + 8)) * (v661 - *(_QWORD *)(a2[3] + 8));
          goto LABEL_1320;
        }
        if (!*((_BYTE *)a2 + 176))
        {
          v688 = (uint64_t *)a2[3];
          v689 = a2 + 4;
          v690 = *v688;
          v691 = a2[5];
          v692 = a2[7];
          v693 = a2[8];
          v694 = v693 - 1;
          if (v693 >= v692)
          {
            if (v694 <= v692)
              v695 = (_QWORD *)(v691 + 16 * (v694 % v692));
            else
              v695 = (_QWORD *)a2[6];
          }
          else
          {
            v695 = (_QWORD *)(*v689 - 16);
          }
          if (*v695 == v690 && (v696 = v688[1], v695[1] == v696))
          {
            v697 = a2[18];
            v698 = a2 + 9;
            v699 = *((unsigned __int8 *)a2 + 152);
            v700 = -1;
            v701 = *a2;
            while (1)
            {
              v706 = v693;
              if ((unint64_t)++v700 >= *(_QWORD *)(v701 + 88))
                break;
              --v693;
              a2[8] = v706 - 1;
              if (v706 >= v692)
              {
                if (v693 <= v692)
                  v707 = v691 + 16 * (v693 % v692);
                else
                  v707 = a2[6];
              }
              else
              {
                v707 = *v689 - 16;
              }
              *v689 = v707;
              if (v693 == v697)
              {
                a2[8] = a2[13];
                v708 = *(_OWORD *)(a2 + 11);
                *(_OWORD *)v689 = *v698;
                *((_OWORD *)a2 + 3) = v708;
                v692 = a2[7];
                v709 = a2[8];
                if (v699)
                {
                  v693 = v709 - 1;
                  a2[8] = v709 - 1;
                  if (v709 >= v692)
                  {
                    if (v693 <= v692)
                      v710 = a2[5] + 16 * (v693 % v692);
                    else
                      v710 = a2[6];
                  }
                  else
                  {
                    v710 = *v689 - 16;
                  }
                  *v689 = v710;
                  if (v709 == v706)
                  {
                    a2[8] = a2[13];
                    v711 = *(_OWORD *)(a2 + 11);
                    *(_OWORD *)v689 = *v698;
                    *((_OWORD *)a2 + 3) = v711;
                    v692 = a2[7];
                    v693 = a2[8];
                  }
                }
                else
                {
                  v693 = a2[8];
                }
              }
              v691 = a2[5];
              v694 = v693 - 1;
              if (v693 < v692)
              {
                v702 = (uint64_t *)(*v689 - 16);
              }
              else if (v694 <= v692)
              {
                v702 = (uint64_t *)(v691 + 16 * (v694 % v692));
              }
              else
              {
                v702 = (uint64_t *)a2[6];
              }
              v704 = *v702;
              v703 = v702[1];
              if (v704 != v690 || v703 != v696)
                goto LABEL_1280;
            }
            v694 = v693 - 1;
          }
          else
          {
LABEL_1280:
            v706 = v693;
          }
          if (v706 >= v692)
          {
            if (v694 <= v692)
              v712 = (uint64_t *)(v691 + 16 * (v694 % v692));
            else
              v712 = (uint64_t *)a2[6];
          }
          else
          {
            v712 = (uint64_t *)(*v689 - 16);
          }
          if (a2 + 20 != v712)
            *((_OWORD *)a2 + 10) = *(_OWORD *)v712;
          *((_BYTE *)a2 + 176) = 1;
        }
        v769 = (v660 - a2[20]) * (v660 - a2[20]) + (v661 - a2[21]) * (v661 - a2[21]);
        goto LABEL_1320;
      }
      v77 = *(_OWORD *)(a3 + 160);
      v757 = *(_OWORD *)(a3 + 144);
      *(_OWORD *)v758 = v77;
      *(_OWORD *)&v758[16] = *(_OWORD *)(a3 + 176);
      v759 = *(_QWORD *)(a3 + 192);
      v78 = *(_OWORD *)(a3 + 96);
      *(_OWORD *)v754 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)&v754[16] = v78;
      v79 = *(_OWORD *)(a3 + 128);
      v755 = *(_OWORD *)(a3 + 112);
      v756 = v79;
      v80 = *(_OWORD *)(a3 + 32);
      v750 = *(_OWORD *)(a3 + 16);
      v751 = v80;
      v81 = *(_OWORD *)(a3 + 64);
      v752 = *(_OWORD *)(a3 + 48);
      v753 = v81;
      v82 = *(_DWORD *)&v744[22];
      if (*(_DWORD *)&v744[18] == 1)
      {
        v83 = v724;
        v84 = (uint64_t *)v724[2];
        v85 = (uint64_t *)v724[3];
        v86 = *v85;
        if (!*((_BYTE *)v724 + 176))
        {
          v87 = v724 + 4;
          v88 = v724[5];
          v89 = v724[7];
          v90 = v724[8];
          v91 = v90 - 1;
          if (v90 >= v89)
          {
            if (v91 <= v89)
              v92 = (_QWORD *)(v88 + 16 * (v91 % v89));
            else
              v92 = (_QWORD *)v724[6];
          }
          else
          {
            v92 = (_QWORD *)(*v87 - 16);
          }
          if (*v92 == v86 && (v415 = v85[1], v92[1] == v415))
          {
            v416 = v724[18];
            v417 = v724 + 9;
            v418 = *((unsigned __int8 *)v724 + 152);
            v419 = -1;
            v420 = *v724;
            while (1)
            {
              v425 = v90;
              if ((unint64_t)++v419 >= *(_QWORD *)(v420 + 88))
                break;
              --v90;
              v83[8] = v425 - 1;
              if (v425 >= v89)
              {
                if (v90 <= v89)
                  v426 = v88 + 16 * (v90 % v89);
                else
                  v426 = v83[6];
              }
              else
              {
                v426 = *v87 - 16;
              }
              *v87 = v426;
              if (v90 == v416)
              {
                v83[8] = v83[13];
                v427 = *(_OWORD *)(v83 + 11);
                *(_OWORD *)v87 = *v417;
                *((_OWORD *)v83 + 3) = v427;
                v89 = v83[7];
                v428 = v83[8];
                if (v418)
                {
                  v90 = v428 - 1;
                  v83[8] = v428 - 1;
                  if (v428 >= v89)
                  {
                    if (v90 <= v89)
                      v429 = v83[5] + 16 * (v90 % v89);
                    else
                      v429 = v83[6];
                  }
                  else
                  {
                    v429 = *v87 - 16;
                  }
                  *v87 = v429;
                  if (v428 == v425)
                  {
                    v83[8] = v83[13];
                    v430 = *(_OWORD *)(v83 + 11);
                    *(_OWORD *)v87 = *v417;
                    *((_OWORD *)v83 + 3) = v430;
                    v89 = v83[7];
                    v90 = v83[8];
                  }
                }
                else
                {
                  v90 = v83[8];
                }
              }
              v88 = v83[5];
              v91 = v90 - 1;
              if (v90 < v89)
              {
                v421 = (uint64_t *)(*v87 - 16);
              }
              else if (v91 <= v89)
              {
                v421 = (uint64_t *)(v88 + 16 * (v91 % v89));
              }
              else
              {
                v421 = (uint64_t *)v83[6];
              }
              v423 = *v421;
              v422 = v421[1];
              if (v423 != v86 || v422 != v415)
                goto LABEL_740;
            }
            v91 = v90 - 1;
          }
          else
          {
LABEL_740:
            v425 = v90;
          }
          if (v425 >= v89)
          {
            if (v91 <= v89)
              v431 = (uint64_t *)(v88 + 16 * (v91 % v89));
            else
              v431 = (uint64_t *)v83[6];
          }
          else
          {
            v431 = (uint64_t *)(*v87 - 16);
          }
          if (v83 + 20 != v431)
            *((_OWORD *)v83 + 10) = *(_OWORD *)v431;
          *((_BYTE *)v83 + 176) = 1;
          v86 = *v85;
        }
        *(_QWORD *)&v760 = 0x3FF0000000000000;
        v432 = sub_22376A6D8(*v84, v84[1], v86, v85[1], v83[20], v83[21], (double *)&v760);
        if (v432 != 0.0
          && ((*(_QWORD *)&v432 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
           || fabs(v432) > *(double *)&v760 * 2.22044605e-16))
        {
          if (v432 <= 0.0)
            v433 = 1;
          else
            v433 = 2;
          DWORD2(v755) = 3;
          DWORD2(v751) = v433;
          LODWORD(v750) = 5;
          *(_QWORD *)&v754[24] = v738;
          v749 = v731;
          *(_OWORD *)&v754[8] = v737;
          *(_OWORD *)&v758[8] = v739;
          *(double *)&v758[24] = v740;
          *(_QWORD *)&v760 = a6;
          sub_2237804AC((char ***)&v760, (uint64_t)&v749);
        }
      }
      if (v82 == 1)
      {
        v434 = v725;
        v435 = (uint64_t *)v725[2];
        v436 = (uint64_t *)v725[3];
        v437 = *v436;
        if (!*((_BYTE *)v725 + 176))
        {
          v438 = v725 + 4;
          v439 = v436[1];
          v440 = v725[5];
          v441 = v725[7];
          v442 = v725[8];
          v443 = v442 - 1;
          if (v442 >= v441)
          {
            if (v443 <= v441)
              v444 = (uint64_t *)(v440 + 16 * (v443 % v441));
            else
              v444 = (uint64_t *)v725[6];
          }
          else
          {
            v444 = (uint64_t *)(*v438 - 16);
          }
          v446 = *v444;
          v445 = v444[1];
          if (v446 == v437 && v445 == v439)
          {
            v449 = v725[18];
            v450 = v725 + 9;
            v451 = *((unsigned __int8 *)v725 + 152);
            v452 = -1;
            v453 = *v725;
            while (1)
            {
              v448 = v442;
              if ((unint64_t)++v452 >= *(_QWORD *)(v453 + 88))
                break;
              --v442;
              v434[8] = v448 - 1;
              if (v448 >= v441)
              {
                if (v442 <= v441)
                  v458 = v440 + 16 * (v442 % v441);
                else
                  v458 = v434[6];
              }
              else
              {
                v458 = *v438 - 16;
              }
              *v438 = v458;
              if (v442 == v449)
              {
                v434[8] = v434[13];
                v459 = *(_OWORD *)(v434 + 11);
                *(_OWORD *)v438 = *v450;
                *((_OWORD *)v434 + 3) = v459;
                v441 = v434[7];
                v460 = v434[8];
                if (v451)
                {
                  v442 = v460 - 1;
                  v434[8] = v460 - 1;
                  if (v460 >= v441)
                  {
                    if (v442 <= v441)
                      v461 = v434[5] + 16 * (v442 % v441);
                    else
                      v461 = v434[6];
                  }
                  else
                  {
                    v461 = *v438 - 16;
                  }
                  *v438 = v461;
                  if (v460 == v448)
                  {
                    v434[8] = v434[13];
                    v462 = *(_OWORD *)(v434 + 11);
                    *(_OWORD *)v438 = *v450;
                    *((_OWORD *)v434 + 3) = v462;
                    v441 = v434[7];
                    v442 = v434[8];
                  }
                }
                else
                {
                  v442 = v434[8];
                }
              }
              v440 = v434[5];
              v443 = v442 - 1;
              if (v442 < v441)
              {
                v454 = (uint64_t *)(*v438 - 16);
              }
              else if (v443 <= v441)
              {
                v454 = (uint64_t *)(v440 + 16 * (v443 % v441));
              }
              else
              {
                v454 = (uint64_t *)v434[6];
              }
              v456 = *v454;
              v455 = v454[1];
              if (v456 != v437 || v455 != v439)
                goto LABEL_768;
            }
            v443 = v442 - 1;
          }
          else
          {
LABEL_768:
            v448 = v442;
          }
          if (v448 >= v441)
          {
            if (v443 <= v441)
              v463 = (uint64_t *)(v440 + 16 * (v443 % v441));
            else
              v463 = (uint64_t *)v434[6];
          }
          else
          {
            v463 = (uint64_t *)(*v438 - 16);
          }
          if (v434 + 20 != v463)
            *((_OWORD *)v434 + 10) = *(_OWORD *)v463;
          *((_BYTE *)v434 + 176) = 1;
          v437 = *v436;
        }
        *(_QWORD *)&v760 = 0x3FF0000000000000;
        v464 = sub_22376A6D8(*v435, v435[1], v437, v436[1], v434[20], v434[21], (double *)&v760);
        if (v464 != 0.0
          && ((*(_QWORD *)&v464 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
           || fabs(v464) > *(double *)&v760 * 2.22044605e-16))
        {
          if (v464 <= 0.0)
            v465 = 1;
          else
            v465 = 2;
          DWORD2(v755) = v465;
          DWORD2(v751) = 3;
          LODWORD(v750) = 5;
          v749 = v730;
          *(_OWORD *)&v754[8] = v732;
          *(_QWORD *)&v754[24] = v733;
          *(_OWORD *)&v758[8] = v734;
          *(double *)&v758[24] = v735;
          *(_QWORD *)&v760 = a6;
          v466 = (char ***)&v760;
          v467 = &v749;
          goto LABEL_1321;
        }
      }
      return a6;
    case 'i':
      *(_DWORD *)&v761[16] = 2;
      *(_OWORD *)v761 = v730;
      *(_OWORD *)&v764[8] = v732;
      *(_OWORD *)&v768[8] = v734;
      *(_QWORD *)&v764[24] = v733;
      *(double *)&v768[24] = v735;
      v93 = *(_DWORD *)&v744[10] == 1;
      *(_DWORD *)&v761[80 * (*(_DWORD *)&v744[10] != 1) + 40] = 1;
      *(_DWORD *)&v761[80 * v93 + 40] = 2;
      goto LABEL_1320;
    case 'm':
      *(_DWORD *)&v761[16] = 4;
      *(_OWORD *)v761 = v730;
      if (*(_DWORD *)&v744[22] == 1)
      {
        if (*(_DWORD *)&v744[18] == -1)
        {
          *(_OWORD *)&v764[8] = xmmword_2245F5410;
          *(_QWORD *)&v764[24] = 0;
        }
        else
        {
          if (*(_DWORD *)&v744[18] == 1)
          {
            *(int64x2_t *)&v764[8] = vdupq_n_s64(1uLL);
            v94 = 0x412E848000000000;
          }
          else
          {
            *(_OWORD *)&v764[8] = v732;
            v94 = v733;
          }
          *(_QWORD *)&v764[24] = v94;
        }
        *(int64x2_t *)&v768[8] = vdupq_n_s64(1uLL);
        *(_QWORD *)&v768[24] = 0x412E848000000000;
        v133 = *(_DWORD *)&v744[10];
        v134 = v725;
        v136 = (uint64_t *)v724[2];
        v135 = (uint64_t *)v724[3];
        if (!*((_BYTE *)v725 + 176))
        {
          v137 = (uint64_t *)v725[3];
          v138 = v725 + 4;
          v139 = *v137;
          v140 = v725[5];
          v141 = v725[7];
          v142 = v725[8];
          v143 = v142 - 1;
          if (v142 >= v141)
          {
            if (v143 <= v141)
              v144 = (_QWORD *)(v140 + 16 * (v143 % v141));
            else
              v144 = (_QWORD *)v725[6];
          }
          else
          {
            v144 = (_QWORD *)(*v138 - 16);
          }
          if (*v144 == v139 && (v305 = v137[1], v144[1] == v305))
          {
            v306 = v725[18];
            v307 = v725 + 9;
            v308 = *((unsigned __int8 *)v725 + 152);
            v309 = -1;
            v310 = *v725;
            while (1)
            {
              v315 = v142;
              if ((unint64_t)++v309 >= *(_QWORD *)(v310 + 88))
                break;
              --v142;
              v134[8] = v315 - 1;
              if (v315 >= v141)
              {
                if (v142 <= v141)
                  v316 = v140 + 16 * (v142 % v141);
                else
                  v316 = v134[6];
              }
              else
              {
                v316 = *v138 - 16;
              }
              *v138 = v316;
              if (v142 == v306)
              {
                v134[8] = v134[13];
                v317 = *(_OWORD *)(v134 + 11);
                *(_OWORD *)v138 = *v307;
                *((_OWORD *)v134 + 3) = v317;
                v141 = v134[7];
                v318 = v134[8];
                if (v308)
                {
                  v142 = v318 - 1;
                  v134[8] = v318 - 1;
                  if (v318 >= v141)
                  {
                    if (v142 <= v141)
                      v319 = v134[5] + 16 * (v142 % v141);
                    else
                      v319 = v134[6];
                  }
                  else
                  {
                    v319 = *v138 - 16;
                  }
                  *v138 = v319;
                  if (v318 == v315)
                  {
                    v134[8] = v134[13];
                    v320 = *(_OWORD *)(v134 + 11);
                    *(_OWORD *)v138 = *v307;
                    *((_OWORD *)v134 + 3) = v320;
                    v141 = v134[7];
                    v142 = v134[8];
                  }
                }
                else
                {
                  v142 = v134[8];
                }
              }
              v140 = v134[5];
              v143 = v142 - 1;
              if (v142 < v141)
              {
                v311 = (uint64_t *)(*v138 - 16);
              }
              else if (v143 <= v141)
              {
                v311 = (uint64_t *)(v140 + 16 * (v143 % v141));
              }
              else
              {
                v311 = (uint64_t *)v134[6];
              }
              v313 = *v311;
              v312 = v311[1];
              if (v313 != v139 || v312 != v305)
                goto LABEL_527;
            }
            v143 = v142 - 1;
          }
          else
          {
LABEL_527:
            v315 = v142;
          }
          if (v315 >= v141)
          {
            if (v143 <= v141)
              v321 = (uint64_t *)(v140 + 16 * (v143 % v141));
            else
              v321 = (uint64_t *)v134[6];
          }
          else
          {
            v321 = (uint64_t *)(*v138 - 16);
          }
          if (v134 + 20 != v321)
            *((_OWORD *)v134 + 10) = *(_OWORD *)v321;
          *((_BYTE *)v134 + 176) = 1;
        }
        *(_QWORD *)&v749 = 0x3FF0000000000000;
        v339 = sub_22376A6D8(*v136, v136[1], *v135, v135[1], v134[20], v134[21], (double *)&v749);
        if (v339 == 0.0)
          goto LABEL_574;
        if ((*(_QWORD *)&v339 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v339 > 0.0)
            v340 = 1;
          else
            v340 = -1;
        }
        else
        {
          v341 = fabs(v339);
          if (v339 > 0.0)
            v340 = 1;
          else
            v340 = -1;
          if (v341 <= *(double *)&v749 * 2.22044605e-16)
LABEL_574:
            v340 = 0;
        }
        if (!(v133 + v340))
        {
          v342 = v340 == -1;
          v343 = v340 != -1;
LABEL_606:
          *(_DWORD *)&v761[80 * v343 + 40] = 1;
          *(_DWORD *)&v761[80 * v342 + 40] = 2;
          goto LABEL_1320;
        }
        v344 = v725;
        v345 = (uint64_t *)v725[2];
        v346 = (uint64_t *)v725[3];
        v347 = *v346;
        if (!*((_BYTE *)v725 + 176))
        {
          v348 = v725 + 4;
          v349 = v346[1];
          v350 = v725[5];
          v351 = v725[7];
          v352 = v725[8];
          v353 = v352 - 1;
          if (v352 >= v351)
          {
            if (v353 <= v351)
              v354 = (uint64_t *)(v350 + 16 * (v353 % v351));
            else
              v354 = (uint64_t *)v725[6];
          }
          else
          {
            v354 = (uint64_t *)(*v348 - 16);
          }
          v469 = *v354;
          v468 = v354[1];
          if (v469 == v347 && v468 == v349)
          {
            v472 = v725[18];
            v473 = v725 + 9;
            v474 = *((unsigned __int8 *)v725 + 152);
            v475 = -1;
            v476 = *v725;
            while (1)
            {
              v471 = v352;
              if ((unint64_t)++v475 >= *(_QWORD *)(v476 + 88))
                break;
              --v352;
              v344[8] = v471 - 1;
              if (v471 >= v351)
              {
                if (v352 <= v351)
                  v481 = v350 + 16 * (v352 % v351);
                else
                  v481 = v344[6];
              }
              else
              {
                v481 = *v348 - 16;
              }
              *v348 = v481;
              if (v352 == v472)
              {
                v344[8] = v344[13];
                v482 = *(_OWORD *)(v344 + 11);
                *(_OWORD *)v348 = *v473;
                *((_OWORD *)v344 + 3) = v482;
                v351 = v344[7];
                v483 = v344[8];
                if (v474)
                {
                  v352 = v483 - 1;
                  v344[8] = v483 - 1;
                  if (v483 >= v351)
                  {
                    if (v352 <= v351)
                      v484 = v344[5] + 16 * (v352 % v351);
                    else
                      v484 = v344[6];
                  }
                  else
                  {
                    v484 = *v348 - 16;
                  }
                  *v348 = v484;
                  if (v483 == v471)
                  {
                    v344[8] = v344[13];
                    v485 = *(_OWORD *)(v344 + 11);
                    *(_OWORD *)v348 = *v473;
                    *((_OWORD *)v344 + 3) = v485;
                    v351 = v344[7];
                    v352 = v344[8];
                  }
                }
                else
                {
                  v352 = v344[8];
                }
              }
              v350 = v344[5];
              v353 = v352 - 1;
              if (v352 < v351)
              {
                v477 = (uint64_t *)(*v348 - 16);
              }
              else if (v353 <= v351)
              {
                v477 = (uint64_t *)(v350 + 16 * (v353 % v351));
              }
              else
              {
                v477 = (uint64_t *)v344[6];
              }
              v479 = *v477;
              v478 = v477[1];
              if (v479 != v347 || v478 != v349)
                goto LABEL_817;
            }
            v353 = v352 - 1;
          }
          else
          {
LABEL_817:
            v471 = v352;
          }
          if (v471 >= v351)
          {
            if (v353 <= v351)
              v486 = (uint64_t *)(v350 + 16 * (v353 % v351));
            else
              v486 = (uint64_t *)v344[6];
          }
          else
          {
            v486 = (uint64_t *)(*v348 - 16);
          }
          if (v344 + 20 != v486)
            *((_OWORD *)v344 + 10) = *(_OWORD *)v486;
          *((_BYTE *)v344 + 176) = 1;
          v347 = *v346;
        }
        *(_QWORD *)&v749 = 0x3FF0000000000000;
        v506 = sub_22376A6D8(*v345, v345[1], v347, v346[1], v344[20], v344[21], (double *)&v749);
        if (v506 == 0.0)
          goto LABEL_893;
        if ((*(_QWORD *)&v506 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v506 > 0.0)
            v507 = 1;
          else
            v507 = -1;
        }
        else
        {
          v508 = fabs(v506);
          if (v506 > 0.0)
            v507 = 1;
          else
            v507 = -1;
          if (v508 <= *(double *)&v749 * 2.22044605e-16)
LABEL_893:
            v507 = 0;
        }
        v509 = v725;
        v510 = (uint64_t *)v725[3];
        v511 = *v510;
        if (!*((_BYTE *)v725 + 176))
        {
          v512 = v725 + 4;
          v513 = v510[1];
          v514 = v725[5];
          v515 = v725[7];
          v516 = v725[8];
          v517 = v516 - 1;
          if (v516 >= v515)
          {
            if (v517 <= v515)
              v518 = (uint64_t *)(v514 + 16 * (v517 % v515));
            else
              v518 = (uint64_t *)v725[6];
          }
          else
          {
            v518 = (uint64_t *)(*v512 - 16);
          }
          v533 = *v518;
          v532 = v518[1];
          if (v533 == v511 && v532 == v513)
          {
            v536 = v725[18];
            v537 = v725 + 9;
            v538 = *((unsigned __int8 *)v725 + 152);
            v539 = -1;
            v540 = *v725;
            while (1)
            {
              v535 = v516;
              if ((unint64_t)++v539 >= *(_QWORD *)(v540 + 88))
                break;
              --v516;
              v509[8] = v535 - 1;
              if (v535 >= v515)
              {
                if (v516 <= v515)
                  v545 = v514 + 16 * (v516 % v515);
                else
                  v545 = v509[6];
              }
              else
              {
                v545 = *v512 - 16;
              }
              *v512 = v545;
              if (v516 == v536)
              {
                v509[8] = v509[13];
                v546 = *(_OWORD *)(v509 + 11);
                *(_OWORD *)v512 = *v537;
                *((_OWORD *)v509 + 3) = v546;
                v515 = v509[7];
                v547 = v509[8];
                if (v538)
                {
                  v516 = v547 - 1;
                  v509[8] = v547 - 1;
                  if (v547 >= v515)
                  {
                    if (v516 <= v515)
                      v548 = v509[5] + 16 * (v516 % v515);
                    else
                      v548 = v509[6];
                  }
                  else
                  {
                    v548 = *v512 - 16;
                  }
                  *v512 = v548;
                  if (v547 == v535)
                  {
                    v509[8] = v509[13];
                    v549 = *(_OWORD *)(v509 + 11);
                    *(_OWORD *)v512 = *v537;
                    *((_OWORD *)v509 + 3) = v549;
                    v515 = v509[7];
                    v516 = v509[8];
                  }
                }
                else
                {
                  v516 = v509[8];
                }
              }
              v514 = v509[5];
              v517 = v516 - 1;
              if (v516 < v515)
              {
                v541 = (uint64_t *)(*v512 - 16);
              }
              else if (v517 <= v515)
              {
                v541 = (uint64_t *)(v514 + 16 * (v517 % v515));
              }
              else
              {
                v541 = (uint64_t *)v509[6];
              }
              v543 = *v541;
              v542 = v541[1];
              if (v543 != v511 || v542 != v513)
                goto LABEL_933;
            }
            v517 = v516 - 1;
          }
          else
          {
LABEL_933:
            v535 = v516;
          }
          if (v535 >= v515)
          {
            if (v517 <= v515)
              v550 = (uint64_t *)(v514 + 16 * (v517 % v515));
            else
              v550 = (uint64_t *)v509[6];
          }
          else
          {
            v550 = (uint64_t *)(*v512 - 16);
          }
          if (v509 + 20 != v550)
            *((_OWORD *)v509 + 10) = *(_OWORD *)v550;
          *((_BYTE *)v509 + 176) = 1;
          v511 = *v510;
        }
        v570 = (uint64_t *)v724[3];
        *(_QWORD *)&v749 = 0x3FF0000000000000;
        v571 = sub_22376A6D8(v511, v510[1], v509[20], v509[21], *v570, v570[1], (double *)&v749);
        if (v571 == 0.0)
          goto LABEL_1009;
        if ((*(_QWORD *)&v571 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v571 > 0.0)
            v572 = 1;
          else
            v572 = -1;
        }
        else
        {
          v573 = fabs(v571);
          if (v571 > 0.0)
            v572 = 1;
          else
            v572 = -1;
          if (v573 <= *(double *)&v749 * 2.22044605e-16)
LABEL_1009:
            v572 = 0;
        }
        if ((v340 & v133) != 0xFFFFFFFF || v507 != 1)
        {
          if (v133 == 1 && v340 == 1 && v507 == -1)
          {
            if (v572 == -1)
              v574 = 1;
            else
              v574 = 3;
            *(_DWORD *)&v761[40] = 1;
            DWORD2(v765) = v574;
            v761[20] = 1;
            goto LABEL_1320;
          }
          if (v133 == v340 && v133 == v507)
          {
            v575 = (v507 == 1) ^ (v572 == 0);
            if (v572 * v133 != -1)
              goto LABEL_1319;
            v577 = (uint64_t *)v724[2];
            v576 = (uint64_t *)v724[3];
            v578 = (uint64_t *)v725[3];
            v579 = *v577;
            v580 = v577[1];
            v581 = *v576;
            v582 = v576[1];
            v583 = *v578;
            v584 = v578[1];
            *(_QWORD *)&v749 = 0x3FF0000000000000;
            v585 = sub_22376A6D8(v579, v580, v581, v582, v583, v584, (double *)&v749);
            if (v585 == 0.0)
              goto LABEL_1032;
            if ((*(_QWORD *)&v585 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              if (v585 > 0.0)
                v586 = 1;
              else
                v586 = -1;
            }
            else
            {
              v714 = fabs(v585);
              if (v585 > 0.0)
                v586 = 1;
              else
                v586 = -1;
              if (v714 <= *(double *)&v749 * 2.22044605e-16)
LABEL_1032:
                v586 = 0;
            }
            if (sub_223780D80((uint64_t)&v723) * v586 == 1)
            {
              v716 = sub_2237730E8(*(_QWORD *)v724[3], *(_QWORD *)(v724[3] + 8), *(_QWORD *)v725[2], *(_QWORD *)(v725[2] + 8), *(_QWORD *)v725[3], *(_QWORD *)(v725[3] + 8))* v572;
              goto LABEL_1317;
            }
            goto LABEL_1319;
          }
          if (!v340)
          {
            if (v133 != v507)
            {
              if (v507 == 1)
                v396 = 2;
              else
                v396 = 1;
              v397 = 3;
              goto LABEL_700;
            }
LABEL_1201:
            *(_DWORD *)&v761[40] = 4;
            DWORD2(v765) = 4;
            goto LABEL_1320;
          }
LABEL_1070:
          v157 = 8;
LABEL_1071:
          *(_DWORD *)&v761[16] = v157;
          goto LABEL_1320;
        }
LABEL_1056:
        *(_DWORD *)&v761[40] = 2;
        DWORD2(v765) = 2;
        v761[20] = 1;
        goto LABEL_1320;
      }
      v96 = xmmword_2245F5410;
      if (*(_DWORD *)&v744[18] == -1)
      {
        *(_OWORD *)&v764[8] = xmmword_2245F5410;
        *(_QWORD *)&v764[24] = 0;
      }
      else
      {
        if (*(_DWORD *)&v744[18] == 1)
        {
          *(int64x2_t *)&v764[8] = vdupq_n_s64(1uLL);
          v97 = 0x412E848000000000;
        }
        else
        {
          *(_OWORD *)&v764[8] = v732;
          v97 = v733;
        }
        *(_QWORD *)&v764[24] = v97;
        v96 = xmmword_2245F5410;
      }
      if (*(_DWORD *)&v744[22] == -1)
      {
        *(_OWORD *)&v768[8] = v96;
        *(_QWORD *)&v768[24] = 0;
      }
      else
      {
        *(_OWORD *)&v768[8] = v734;
        *(double *)&v768[24] = v735;
      }
      v145 = *(_DWORD *)&v744[2];
      v146 = v728;
      v148 = (uint64_t *)v727[2];
      v147 = (uint64_t *)v727[3];
      if (!*((_BYTE *)v728 + 176))
      {
        v149 = (uint64_t *)v728[3];
        v150 = v728 + 4;
        v151 = *v149;
        v152 = v728[5];
        v153 = v728[7];
        v154 = v728[8];
        v155 = v154 - 1;
        if (v154 >= v153)
        {
          if (v155 <= v153)
            v156 = (_QWORD *)(v152 + 16 * (v155 % v153));
          else
            v156 = (_QWORD *)v728[6];
        }
        else
        {
          v156 = (_QWORD *)(*v150 - 16);
        }
        if (*v156 == v151 && (v322 = v149[1], v156[1] == v322))
        {
          v323 = v728[18];
          v324 = v728 + 9;
          v325 = *((unsigned __int8 *)v728 + 152);
          v326 = -1;
          v327 = *v728;
          while (1)
          {
            v332 = v154;
            if ((unint64_t)++v326 >= *(_QWORD *)(v327 + 88))
              break;
            --v154;
            v146[8] = v332 - 1;
            if (v332 >= v153)
            {
              if (v154 <= v153)
                v333 = v152 + 16 * (v154 % v153);
              else
                v333 = v146[6];
            }
            else
            {
              v333 = *v150 - 16;
            }
            *v150 = v333;
            if (v154 == v323)
            {
              v146[8] = v146[13];
              v334 = *(_OWORD *)(v146 + 11);
              *(_OWORD *)v150 = *v324;
              *((_OWORD *)v146 + 3) = v334;
              v153 = v146[7];
              v335 = v146[8];
              if (v325)
              {
                v154 = v335 - 1;
                v146[8] = v335 - 1;
                if (v335 >= v153)
                {
                  if (v154 <= v153)
                    v336 = v146[5] + 16 * (v154 % v153);
                  else
                    v336 = v146[6];
                }
                else
                {
                  v336 = *v150 - 16;
                }
                *v150 = v336;
                if (v335 == v332)
                {
                  v146[8] = v146[13];
                  v337 = *(_OWORD *)(v146 + 11);
                  *(_OWORD *)v150 = *v324;
                  *((_OWORD *)v146 + 3) = v337;
                  v153 = v146[7];
                  v154 = v146[8];
                }
              }
              else
              {
                v154 = v146[8];
              }
            }
            v152 = v146[5];
            v155 = v154 - 1;
            if (v154 < v153)
            {
              v328 = (uint64_t *)(*v150 - 16);
            }
            else if (v155 <= v153)
            {
              v328 = (uint64_t *)(v152 + 16 * (v155 % v153));
            }
            else
            {
              v328 = (uint64_t *)v146[6];
            }
            v330 = *v328;
            v329 = v328[1];
            if (v330 != v151 || v329 != v322)
              goto LABEL_563;
          }
          v155 = v154 - 1;
        }
        else
        {
LABEL_563:
          v332 = v154;
        }
        if (v332 >= v153)
        {
          if (v155 <= v153)
            v338 = (uint64_t *)(v152 + 16 * (v155 % v153));
          else
            v338 = (uint64_t *)v146[6];
        }
        else
        {
          v338 = (uint64_t *)(*v150 - 16);
        }
        if (v146 + 20 != v338)
          *((_OWORD *)v146 + 10) = *(_OWORD *)v338;
        *((_BYTE *)v146 + 176) = 1;
      }
      *(_QWORD *)&v749 = 0x3FF0000000000000;
      v355 = sub_22376A6D8(*v148, v148[1], *v147, v147[1], v146[20], v146[21], (double *)&v749);
      if (v355 == 0.0)
        goto LABEL_594;
      if ((*(_QWORD *)&v355 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v355 > 0.0)
          v356 = 1;
        else
          v356 = -1;
      }
      else
      {
        v357 = fabs(v355);
        if (v355 > 0.0)
          v356 = 1;
        else
          v356 = -1;
        if (v357 <= *(double *)&v749 * 2.22044605e-16)
LABEL_594:
          v356 = 0;
      }
      if (!(v145 + v356))
      {
        v342 = v356 != -1;
        v343 = v356 == -1;
        goto LABEL_606;
      }
      v358 = v728;
      v359 = (uint64_t *)v728[2];
      v360 = (uint64_t *)v728[3];
      v361 = *v360;
      if (!*((_BYTE *)v728 + 176))
      {
        v362 = v728 + 4;
        v363 = v360[1];
        v364 = v728[5];
        v365 = v728[7];
        v366 = v728[8];
        v367 = v366 - 1;
        if (v366 >= v365)
        {
          if (v367 <= v365)
            v368 = (uint64_t *)(v364 + 16 * (v367 % v365));
          else
            v368 = (uint64_t *)v728[6];
        }
        else
        {
          v368 = (uint64_t *)(*v362 - 16);
        }
        v488 = *v368;
        v487 = v368[1];
        if (v488 == v361 && v487 == v363)
        {
          v491 = v728[18];
          v492 = v728 + 9;
          v493 = *((unsigned __int8 *)v728 + 152);
          v494 = -1;
          v495 = *v728;
          while (1)
          {
            v490 = v366;
            if ((unint64_t)++v494 >= *(_QWORD *)(v495 + 88))
              break;
            --v366;
            v358[8] = v490 - 1;
            if (v490 >= v365)
            {
              if (v366 <= v365)
                v500 = v364 + 16 * (v366 % v365);
              else
                v500 = v358[6];
            }
            else
            {
              v500 = *v362 - 16;
            }
            *v362 = v500;
            if (v366 == v491)
            {
              v358[8] = v358[13];
              v501 = *(_OWORD *)(v358 + 11);
              *(_OWORD *)v362 = *v492;
              *((_OWORD *)v358 + 3) = v501;
              v365 = v358[7];
              v502 = v358[8];
              if (v493)
              {
                v366 = v502 - 1;
                v358[8] = v502 - 1;
                if (v502 >= v365)
                {
                  if (v366 <= v365)
                    v503 = v358[5] + 16 * (v366 % v365);
                  else
                    v503 = v358[6];
                }
                else
                {
                  v503 = *v362 - 16;
                }
                *v362 = v503;
                if (v502 == v490)
                {
                  v358[8] = v358[13];
                  v504 = *(_OWORD *)(v358 + 11);
                  *(_OWORD *)v362 = *v492;
                  *((_OWORD *)v358 + 3) = v504;
                  v365 = v358[7];
                  v366 = v358[8];
                }
              }
              else
              {
                v366 = v358[8];
              }
            }
            v364 = v358[5];
            v367 = v366 - 1;
            if (v366 < v365)
            {
              v496 = (uint64_t *)(*v362 - 16);
            }
            else if (v367 <= v365)
            {
              v496 = (uint64_t *)(v364 + 16 * (v367 % v365));
            }
            else
            {
              v496 = (uint64_t *)v358[6];
            }
            v498 = *v496;
            v497 = v496[1];
            if (v498 != v361 || v497 != v363)
              goto LABEL_855;
          }
          v367 = v366 - 1;
        }
        else
        {
LABEL_855:
          v490 = v366;
        }
        if (v490 >= v365)
        {
          if (v367 <= v365)
            v505 = (uint64_t *)(v364 + 16 * (v367 % v365));
          else
            v505 = (uint64_t *)v358[6];
        }
        else
        {
          v505 = (uint64_t *)(*v362 - 16);
        }
        if (v358 + 20 != v505)
          *((_OWORD *)v358 + 10) = *(_OWORD *)v505;
        *((_BYTE *)v358 + 176) = 1;
        v361 = *v360;
      }
      *(_QWORD *)&v749 = 0x3FF0000000000000;
      v519 = sub_22376A6D8(*v359, v359[1], v361, v360[1], v358[20], v358[21], (double *)&v749);
      if (v519 == 0.0)
        goto LABEL_913;
      if ((*(_QWORD *)&v519 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v519 > 0.0)
          v520 = 1;
        else
          v520 = -1;
      }
      else
      {
        v521 = fabs(v519);
        if (v519 > 0.0)
          v520 = 1;
        else
          v520 = -1;
        if (v521 <= *(double *)&v749 * 2.22044605e-16)
LABEL_913:
          v520 = 0;
      }
      v522 = v728;
      v523 = (uint64_t *)v728[3];
      v524 = *v523;
      if (!*((_BYTE *)v728 + 176))
      {
        v525 = v728 + 4;
        v526 = v523[1];
        v527 = v728[5];
        v528 = v728[7];
        v529 = v728[8];
        v530 = v529 - 1;
        if (v529 >= v528)
        {
          if (v530 <= v528)
            v531 = (uint64_t *)(v527 + 16 * (v530 % v528));
          else
            v531 = (uint64_t *)v728[6];
        }
        else
        {
          v531 = (uint64_t *)(*v525 - 16);
        }
        v552 = *v531;
        v551 = v531[1];
        if (v552 == v524 && v551 == v526)
        {
          v555 = v728[18];
          v556 = v728 + 9;
          v557 = *((unsigned __int8 *)v728 + 152);
          v558 = -1;
          v559 = *v728;
          while (1)
          {
            v554 = v529;
            if ((unint64_t)++v558 >= *(_QWORD *)(v559 + 88))
              break;
            --v529;
            v522[8] = v554 - 1;
            if (v554 >= v528)
            {
              if (v529 <= v528)
                v564 = v527 + 16 * (v529 % v528);
              else
                v564 = v522[6];
            }
            else
            {
              v564 = *v525 - 16;
            }
            *v525 = v564;
            if (v529 == v555)
            {
              v522[8] = v522[13];
              v565 = *(_OWORD *)(v522 + 11);
              *(_OWORD *)v525 = *v556;
              *((_OWORD *)v522 + 3) = v565;
              v528 = v522[7];
              v566 = v522[8];
              if (v557)
              {
                v529 = v566 - 1;
                v522[8] = v566 - 1;
                if (v566 >= v528)
                {
                  if (v529 <= v528)
                    v567 = v522[5] + 16 * (v529 % v528);
                  else
                    v567 = v522[6];
                }
                else
                {
                  v567 = *v525 - 16;
                }
                *v525 = v567;
                if (v566 == v554)
                {
                  v522[8] = v522[13];
                  v568 = *(_OWORD *)(v522 + 11);
                  *(_OWORD *)v525 = *v556;
                  *((_OWORD *)v522 + 3) = v568;
                  v528 = v522[7];
                  v529 = v522[8];
                }
              }
              else
              {
                v529 = v522[8];
              }
            }
            v527 = v522[5];
            v530 = v529 - 1;
            if (v529 < v528)
            {
              v560 = (uint64_t *)(*v525 - 16);
            }
            else if (v530 <= v528)
            {
              v560 = (uint64_t *)(v527 + 16 * (v530 % v528));
            }
            else
            {
              v560 = (uint64_t *)v522[6];
            }
            v562 = *v560;
            v561 = v560[1];
            if (v562 != v524 || v561 != v526)
              goto LABEL_971;
          }
          v530 = v529 - 1;
        }
        else
        {
LABEL_971:
          v554 = v529;
        }
        if (v554 >= v528)
        {
          if (v530 <= v528)
            v569 = (uint64_t *)(v527 + 16 * (v530 % v528));
          else
            v569 = (uint64_t *)v522[6];
        }
        else
        {
          v569 = (uint64_t *)(*v525 - 16);
        }
        if (v522 + 20 != v569)
          *((_OWORD *)v522 + 10) = *(_OWORD *)v569;
        *((_BYTE *)v522 + 176) = 1;
        v524 = *v523;
      }
      v587 = (uint64_t *)v727[3];
      *(_QWORD *)&v749 = 0x3FF0000000000000;
      v588 = sub_22376A6D8(v524, v523[1], v522[20], v522[21], *v587, v587[1], (double *)&v749);
      if (v588 == 0.0)
        goto LABEL_1044;
      if ((*(_QWORD *)&v588 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v588 > 0.0)
          v589 = 1;
        else
          v589 = -1;
      }
      else
      {
        v590 = fabs(v588);
        if (v588 > 0.0)
          v589 = 1;
        else
          v589 = -1;
        if (v590 <= *(double *)&v749 * 2.22044605e-16)
LABEL_1044:
          v589 = 0;
      }
      if ((v356 & v145) == 0xFFFFFFFF && v520 == 1)
        goto LABEL_1056;
      if (v145 == 1 && v356 == 1 && v520 == -1)
      {
        if (v589 == -1)
          v591 = 1;
        else
          v591 = 3;
        *(_DWORD *)&v761[40] = v591;
        DWORD2(v765) = 1;
        v761[20] = 1;
        goto LABEL_1320;
      }
      if (v145 != v356 || v145 != v520)
      {
        if (!v356)
        {
          if (v145 != v520)
          {
            if (v520 == 1)
              v713 = 2;
            else
              v713 = 1;
            DWORD2(v765) = v713;
            *(_DWORD *)&v761[40] = 3;
            goto LABEL_1320;
          }
          goto LABEL_1201;
        }
        goto LABEL_1070;
      }
      v575 = (v520 == 1) ^ (v589 != 0);
      if (v589 * v145 != -1)
        goto LABEL_1319;
      v593 = (uint64_t *)v727[2];
      v592 = (uint64_t *)v727[3];
      v594 = (uint64_t *)v728[3];
      v595 = *v593;
      v596 = v593[1];
      v597 = *v592;
      v598 = v592[1];
      v599 = *v594;
      v600 = v594[1];
      *(_QWORD *)&v749 = 0x3FF0000000000000;
      v601 = sub_22376A6D8(v595, v596, v597, v598, v599, v600, (double *)&v749);
      if (v601 == 0.0)
        goto LABEL_1068;
      if ((*(_QWORD *)&v601 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v601 > 0.0)
          v602 = 1;
        else
          v602 = -1;
      }
      else
      {
        v715 = fabs(v601);
        if (v601 > 0.0)
          v602 = 1;
        else
          v602 = -1;
        if (v715 <= *(double *)&v749 * 2.22044605e-16)
LABEL_1068:
          v602 = 0;
      }
      if (sub_223780D80((uint64_t)&v726) * v602 == 1)
      {
        v716 = sub_2237730E8(*(_QWORD *)v727[3], *(_QWORD *)(v727[3] + 8), *(_QWORD *)v728[2], *(_QWORD *)(v728[2] + 8), *(_QWORD *)v728[3], *(_QWORD *)(v728[3] + 8))* v589;
LABEL_1317:
        if (v716 == -1)
          v575 ^= 1u;
      }
LABEL_1319:
      *(_DWORD *)&v761[80 * v575 + 40] = 1;
      *(_DWORD *)&v761[80 * (v575 ^ 1) + 40] = 2;
      v761[20] = 1;
      goto LABEL_1320;
    case 't':
      *(_DWORD *)&v761[16] = 3;
      *(_OWORD *)v761 = v730;
      if (*(_DWORD *)&v744[18] == -1)
      {
        v120 = xmmword_2245F5410;
        *(_OWORD *)&v764[8] = xmmword_2245F5410;
        *(_QWORD *)&v764[24] = 0;
      }
      else
      {
        if (*(_DWORD *)&v744[18] == 1)
        {
          *(int64x2_t *)&v764[8] = vdupq_n_s64(1uLL);
          v95 = 0x412E848000000000;
        }
        else
        {
          *(_OWORD *)&v764[8] = v732;
          v95 = v733;
        }
        *(_QWORD *)&v764[24] = v95;
        v120 = xmmword_2245F5410;
      }
      if (*(_DWORD *)&v744[22] == 1)
      {
        *(int64x2_t *)&v768[8] = vdupq_n_s64(1uLL);
        v121 = 0x412E848000000000;
      }
      else
      {
        if (*(_DWORD *)&v744[22] == -1)
        {
          *(_OWORD *)&v768[8] = v120;
          *(_QWORD *)&v768[24] = 0;
          goto LABEL_183;
        }
        *(_OWORD *)&v768[8] = v734;
        v121 = *(_QWORD *)&v735;
      }
      *(_QWORD *)&v768[24] = v121;
LABEL_183:
      v122 = v724;
      v124 = (uint64_t *)v725[2];
      v123 = (uint64_t *)v725[3];
      if (*((_BYTE *)v724 + 176))
        goto LABEL_249;
      v125 = (uint64_t *)v724[3];
      v126 = v724 + 4;
      v127 = *v125;
      v128 = v724[5];
      v129 = v724[7];
      v130 = v724[8];
      v131 = v130 - 1;
      if (v130 >= v129)
      {
        if (v131 <= v129)
          v132 = (_QWORD *)(v128 + 16 * (v131 % v129));
        else
          v132 = (_QWORD *)v724[6];
      }
      else
      {
        v132 = (_QWORD *)(*v126 - 16);
      }
      if (*v132 != v127)
        goto LABEL_235;
      v158 = v125[1];
      if (v132[1] != v158)
        goto LABEL_235;
      v159 = v724[18];
      v160 = v724 + 9;
      v161 = *((unsigned __int8 *)v724 + 152);
      v162 = -1;
      v163 = *v724;
      while (1)
      {
        v168 = v130;
        if ((unint64_t)++v162 >= *(_QWORD *)(v163 + 88))
          break;
        --v130;
        v122[8] = v168 - 1;
        if (v168 >= v129)
        {
          if (v130 <= v129)
            v169 = v128 + 16 * (v130 % v129);
          else
            v169 = v122[6];
        }
        else
        {
          v169 = *v126 - 16;
        }
        *v126 = v169;
        if (v130 == v159)
        {
          v122[8] = v122[13];
          v170 = *(_OWORD *)(v122 + 11);
          *(_OWORD *)v126 = *v160;
          *((_OWORD *)v122 + 3) = v170;
          v129 = v122[7];
          v171 = v122[8];
          if (v161)
          {
            v130 = v171 - 1;
            v122[8] = v171 - 1;
            if (v171 >= v129)
            {
              if (v130 <= v129)
                v172 = v122[5] + 16 * (v130 % v129);
              else
                v172 = v122[6];
            }
            else
            {
              v172 = *v126 - 16;
            }
            *v126 = v172;
            if (v171 == v168)
            {
              v122[8] = v122[13];
              v173 = *(_OWORD *)(v122 + 11);
              *(_OWORD *)v126 = *v160;
              *((_OWORD *)v122 + 3) = v173;
              v129 = v122[7];
              v130 = v122[8];
            }
          }
          else
          {
            v130 = v122[8];
          }
        }
        v128 = v122[5];
        v131 = v130 - 1;
        if (v130 < v129)
        {
          v164 = (uint64_t *)(*v126 - 16);
        }
        else if (v131 <= v129)
        {
          v164 = (uint64_t *)(v128 + 16 * (v131 % v129));
        }
        else
        {
          v164 = (uint64_t *)v122[6];
        }
        v166 = *v164;
        v165 = v164[1];
        if (v166 != v127 || v165 != v158)
        {
LABEL_235:
          v168 = v130;
          goto LABEL_237;
        }
      }
      v131 = v130 - 1;
LABEL_237:
      if (v168 >= v129)
      {
        if (v131 <= v129)
          v174 = (uint64_t *)(v128 + 16 * (v131 % v129));
        else
          v174 = (uint64_t *)v122[6];
      }
      else
      {
        v174 = (uint64_t *)(*v126 - 16);
      }
      if (v122 + 20 != v174)
        *((_OWORD *)v122 + 10) = *(_OWORD *)v174;
      *((_BYTE *)v122 + 176) = 1;
LABEL_249:
      *(_QWORD *)&v749 = 0x3FF0000000000000;
      v175 = sub_22376A6D8(*v124, v124[1], *v123, v123[1], v122[20], v122[21], (double *)&v749);
      if (v175 == 0.0)
        goto LABEL_250;
      if ((*(_QWORD *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v175 > 0.0)
          v176 = 1;
        else
          v176 = -1;
      }
      else
      {
        v177 = fabs(v175);
        if (v175 > 0.0)
          v176 = 1;
        else
          v176 = -1;
        if (v177 <= *(double *)&v749 * 2.22044605e-16)
LABEL_250:
          v176 = 0;
      }
      v178 = *(_DWORD *)&v744[10];
      v179 = v725;
      v181 = (uint64_t *)v724[2];
      v180 = (uint64_t *)v724[3];
      if (!*((_BYTE *)v725 + 176))
      {
        v182 = (uint64_t *)v725[3];
        v183 = v725 + 4;
        v184 = *v182;
        v185 = v182[1];
        v186 = v725[5];
        v187 = v725[7];
        v188 = v725[8];
        v189 = v188 - 1;
        if (v188 >= v187)
        {
          if (v189 <= v187)
            v190 = (uint64_t *)(v186 + 16 * (v189 % v187));
          else
            v190 = (uint64_t *)v725[6];
        }
        else
        {
          v190 = (uint64_t *)(*v183 - 16);
        }
        v192 = *v190;
        v191 = v190[1];
        if (v192 == v184 && v191 == v185)
        {
          v195 = v725[18];
          v196 = v725 + 9;
          v197 = *((unsigned __int8 *)v725 + 152);
          v198 = -1;
          v199 = *v725;
          while (1)
          {
            v194 = v188;
            if ((unint64_t)++v198 >= *(_QWORD *)(v199 + 88))
              break;
            --v188;
            v179[8] = v194 - 1;
            if (v194 >= v187)
            {
              if (v188 <= v187)
                v204 = v186 + 16 * (v188 % v187);
              else
                v204 = v179[6];
            }
            else
            {
              v204 = *v183 - 16;
            }
            *v183 = v204;
            if (v188 == v195)
            {
              v179[8] = v179[13];
              v205 = *(_OWORD *)(v179 + 11);
              *(_OWORD *)v183 = *v196;
              *((_OWORD *)v179 + 3) = v205;
              v187 = v179[7];
              v206 = v179[8];
              if (v197)
              {
                v188 = v206 - 1;
                v179[8] = v206 - 1;
                if (v206 >= v187)
                {
                  if (v188 <= v187)
                    v207 = v179[5] + 16 * (v188 % v187);
                  else
                    v207 = v179[6];
                }
                else
                {
                  v207 = *v183 - 16;
                }
                *v183 = v207;
                if (v206 == v194)
                {
                  v179[8] = v179[13];
                  v208 = *(_OWORD *)(v179 + 11);
                  *(_OWORD *)v183 = *v196;
                  *((_OWORD *)v179 + 3) = v208;
                  v187 = v179[7];
                  v188 = v179[8];
                }
              }
              else
              {
                v188 = v179[8];
              }
            }
            v186 = v179[5];
            v189 = v188 - 1;
            if (v188 < v187)
            {
              v200 = (uint64_t *)(*v183 - 16);
            }
            else if (v189 <= v187)
            {
              v200 = (uint64_t *)(v186 + 16 * (v189 % v187));
            }
            else
            {
              v200 = (uint64_t *)v179[6];
            }
            v202 = *v200;
            v201 = v200[1];
            if (v202 != v184 || v201 != v185)
              goto LABEL_270;
          }
          v189 = v188 - 1;
        }
        else
        {
LABEL_270:
          v194 = v188;
        }
        if (v194 >= v187)
        {
          if (v189 <= v187)
            v209 = (uint64_t *)(v186 + 16 * (v189 % v187));
          else
            v209 = (uint64_t *)v179[6];
        }
        else
        {
          v209 = (uint64_t *)(*v183 - 16);
        }
        if (v179 + 20 != v209)
          *((_OWORD *)v179 + 10) = *(_OWORD *)v209;
        *((_BYTE *)v179 + 176) = 1;
      }
      *(_QWORD *)&v749 = 0x3FF0000000000000;
      v210 = sub_22376A6D8(*v181, v181[1], *v180, v180[1], v179[20], v179[21], (double *)&v749);
      if (v210 == 0.0)
        goto LABEL_308;
      if ((*(_QWORD *)&v210 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v210 > 0.0)
          v211 = 1;
        else
          v211 = -1;
      }
      else
      {
        v212 = fabs(v210);
        if (v210 > 0.0)
          v211 = 1;
        else
          v211 = -1;
        if (v212 <= *(double *)&v749 * 2.22044605e-16)
LABEL_308:
          v211 = 0;
      }
      if (v211 * v178 != -1)
      {
        v213 = sub_223781154((uint64_t)&v723);
        v214 = v724;
        v215 = (uint64_t *)v724[2];
        v216 = (uint64_t *)v724[3];
        v217 = *v216;
        if (!*((_BYTE *)v724 + 176))
        {
          v218 = v724 + 4;
          v219 = v216[1];
          v220 = v724[5];
          v221 = v724[7];
          v222 = v724[8];
          v223 = v222 - 1;
          if (v222 >= v221)
          {
            if (v223 <= v221)
              v224 = (uint64_t *)(v220 + 16 * (v223 % v221));
            else
              v224 = (uint64_t *)v724[6];
          }
          else
          {
            v224 = (uint64_t *)(*v218 - 16);
          }
          v237 = *v224;
          v236 = v224[1];
          if (v237 == v217 && v236 == v219)
          {
            v240 = v724[18];
            v241 = v724 + 9;
            v242 = *((unsigned __int8 *)v724 + 152);
            v243 = -1;
            v244 = *v724;
            while (1)
            {
              v239 = v222;
              if ((unint64_t)++v243 >= *(_QWORD *)(v244 + 88))
                break;
              --v222;
              v214[8] = v239 - 1;
              if (v239 >= v221)
              {
                if (v222 <= v221)
                  v249 = v220 + 16 * (v222 % v221);
                else
                  v249 = v214[6];
              }
              else
              {
                v249 = *v218 - 16;
              }
              *v218 = v249;
              if (v222 == v240)
              {
                v214[8] = v214[13];
                v250 = *(_OWORD *)(v214 + 11);
                *(_OWORD *)v218 = *v241;
                *((_OWORD *)v214 + 3) = v250;
                v221 = v214[7];
                v251 = v214[8];
                if (v242)
                {
                  v222 = v251 - 1;
                  v214[8] = v251 - 1;
                  if (v251 >= v221)
                  {
                    if (v222 <= v221)
                      v252 = v214[5] + 16 * (v222 % v221);
                    else
                      v252 = v214[6];
                  }
                  else
                  {
                    v252 = *v218 - 16;
                  }
                  *v218 = v252;
                  if (v251 == v239)
                  {
                    v214[8] = v214[13];
                    v253 = *(_OWORD *)(v214 + 11);
                    *(_OWORD *)v218 = *v241;
                    *((_OWORD *)v214 + 3) = v253;
                    v221 = v214[7];
                    v222 = v214[8];
                  }
                }
                else
                {
                  v222 = v214[8];
                }
              }
              v220 = v214[5];
              v223 = v222 - 1;
              if (v222 < v221)
              {
                v245 = (uint64_t *)(*v218 - 16);
              }
              else if (v223 <= v221)
              {
                v245 = (uint64_t *)(v220 + 16 * (v223 % v221));
              }
              else
              {
                v245 = (uint64_t *)v214[6];
              }
              v247 = *v245;
              v246 = v245[1];
              if (v247 != v217 || v246 != v219)
                goto LABEL_337;
            }
            v223 = v222 - 1;
          }
          else
          {
LABEL_337:
            v239 = v222;
          }
          if (v239 >= v221)
          {
            if (v223 <= v221)
              v254 = (uint64_t *)(v220 + 16 * (v223 % v221));
            else
              v254 = (uint64_t *)v214[6];
          }
          else
          {
            v254 = (uint64_t *)(*v218 - 16);
          }
          if (v214 + 20 != v254)
            *((_OWORD *)v214 + 10) = *(_OWORD *)v254;
          *((_BYTE *)v214 + 176) = 1;
          v217 = *v216;
        }
        *(_QWORD *)&v749 = 0x3FF0000000000000;
        v255 = sub_22376A6D8(*v215, v215[1], v217, v216[1], v214[20], v214[21], (double *)&v749);
        if (v255 != 0.0)
        {
          if ((*(_QWORD *)&v255 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v255 > 0.0)
              v256 = 1;
            else
              v256 = -1;
            goto LABEL_385;
          }
          v257 = fabs(v255);
          if (v255 > 0.0)
            v256 = 1;
          else
            v256 = -1;
          if (v257 > *(double *)&v749 * 2.22044605e-16)
            goto LABEL_385;
        }
        v256 = 0;
LABEL_385:
        v258 = v725;
        v259 = (uint64_t *)v725[2];
        v260 = (uint64_t *)v725[3];
        v261 = *v260;
        if (!*((_BYTE *)v725 + 176))
        {
          v262 = v725 + 4;
          v263 = v260[1];
          v264 = v725[5];
          v265 = v725[7];
          v266 = v725[8];
          v267 = v266 - 1;
          if (v266 >= v265)
          {
            if (v267 <= v265)
              v268 = (uint64_t *)(v264 + 16 * (v267 % v265));
            else
              v268 = (uint64_t *)v725[6];
          }
          else
          {
            v268 = (uint64_t *)(*v262 - 16);
          }
          v270 = *v268;
          v269 = v268[1];
          if (v270 == v261 && v269 == v263)
          {
            v273 = v725[18];
            v274 = v725 + 9;
            v275 = *((unsigned __int8 *)v725 + 152);
            v276 = -1;
            v277 = *v725;
            while (1)
            {
              v272 = v266;
              if ((unint64_t)++v276 >= *(_QWORD *)(v277 + 88))
                break;
              --v266;
              v258[8] = v272 - 1;
              if (v272 >= v265)
              {
                if (v266 <= v265)
                  v282 = v264 + 16 * (v266 % v265);
                else
                  v282 = v258[6];
              }
              else
              {
                v282 = *v262 - 16;
              }
              *v262 = v282;
              if (v266 == v273)
              {
                v258[8] = v258[13];
                v283 = *(_OWORD *)(v258 + 11);
                *(_OWORD *)v262 = *v274;
                *((_OWORD *)v258 + 3) = v283;
                v265 = v258[7];
                v284 = v258[8];
                if (v275)
                {
                  v266 = v284 - 1;
                  v258[8] = v284 - 1;
                  if (v284 >= v265)
                  {
                    if (v266 <= v265)
                      v285 = v258[5] + 16 * (v266 % v265);
                    else
                      v285 = v258[6];
                  }
                  else
                  {
                    v285 = *v262 - 16;
                  }
                  *v262 = v285;
                  if (v284 == v272)
                  {
                    v258[8] = v258[13];
                    v286 = *(_OWORD *)(v258 + 11);
                    *(_OWORD *)v262 = *v274;
                    *((_OWORD *)v258 + 3) = v286;
                    v265 = v258[7];
                    v266 = v258[8];
                  }
                }
                else
                {
                  v266 = v258[8];
                }
              }
              v264 = v258[5];
              v267 = v266 - 1;
              if (v266 < v265)
              {
                v278 = (uint64_t *)(*v262 - 16);
              }
              else if (v267 <= v265)
              {
                v278 = (uint64_t *)(v264 + 16 * (v267 % v265));
              }
              else
              {
                v278 = (uint64_t *)v258[6];
              }
              v280 = *v278;
              v279 = v278[1];
              if (v280 != v261 || v279 != v263)
                goto LABEL_395;
            }
            v267 = v266 - 1;
          }
          else
          {
LABEL_395:
            v272 = v266;
          }
          if (v272 >= v265)
          {
            if (v267 <= v265)
              v287 = (uint64_t *)(v264 + 16 * (v267 % v265));
            else
              v287 = (uint64_t *)v258[6];
          }
          else
          {
            v287 = (uint64_t *)(*v262 - 16);
          }
          if (v258 + 20 != v287)
            *((_OWORD *)v258 + 10) = *(_OWORD *)v287;
          *((_BYTE *)v258 + 176) = 1;
          v261 = *v260;
        }
        *(_QWORD *)&v749 = 0x3FF0000000000000;
        v288 = sub_22376A6D8(*v259, v259[1], v261, v260[1], v258[20], v258[21], (double *)&v749);
        if (v288 == 0.0)
          goto LABEL_433;
        if ((*(_QWORD *)&v288 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v288 > 0.0)
            v289 = 1;
          else
            v289 = -1;
          goto LABEL_443;
        }
        v290 = fabs(v288);
        v289 = v288 > 0.0 ? 1 : -1;
        if (v290 <= *(double *)&v749 * 2.22044605e-16)
LABEL_433:
          v289 = 0;
LABEL_443:
        if (v211)
          v291 = 1;
        else
          v291 = v289 * v178 == 1;
        v292 = !v291;
        if (v256 != v178 && v256 != v211 && (v211 | v178 || v256 == -1))
        {
          if (v289 == 1)
            v297 = 2;
          else
            v297 = 1;
          if (v211 == 1 || v178 == 1)
            v299 = 1;
          else
            v299 = 2;
          if (v292)
            v299 = 3;
          *(_DWORD *)&v761[40] = v297;
          DWORD2(v765) = v299;
          if ((v292 & 1) != 0)
            goto LABEL_1320;
        }
        else
        {
          if (v213)
            v293 = 1;
          else
            v293 = v292;
          if ((v293 & 1) == 0)
            goto LABEL_1201;
          if (!v176)
          {
            if (v289 == 1)
              v300 = 2;
            else
              v300 = 1;
            if (v292)
              v301 = 3;
            else
              v301 = v300;
            *(_DWORD *)&v761[40] = 3;
            DWORD2(v765) = v301;
            goto LABEL_1320;
          }
          if (v176 == v213 && v289 * v176 != -1)
          {
            if (v289 == 1)
              v294 = 1;
            else
              v294 = 2;
            if (v289 == 1)
              v295 = 2;
            else
              v295 = 1;
            if (v292)
              v296 = 3;
            else
              v296 = v295;
            *(_DWORD *)&v761[40] = v294;
            DWORD2(v765) = v296;
            goto LABEL_1320;
          }
          if (!(v213 + v289))
          {
            v302 = v289 == 1;
            if (v289 == 1)
              v303 = 2;
            else
              v303 = 1;
            if (v302)
              v304 = 1;
            else
              v304 = 2;
LABEL_689:
            *(_DWORD *)&v761[40] = v303;
            DWORD2(v765) = v304;
            v761[20] = 1;
            goto LABEL_1320;
          }
          if (v176 != -v289)
          {
LABEL_1320:
            *(_QWORD *)&v749 = a6;
            v466 = (char ***)&v749;
            v467 = (__int128 *)v761;
LABEL_1321:
            sub_2237804AC(v466, (uint64_t)v467);
            return a6;
          }
          if (v289 == 1)
            v369 = 2;
          else
            v369 = 1;
          *(_DWORD *)&v761[40] = v369;
          DWORD2(v765) = v369;
          if (v292)
          {
            DWORD2(v765) = 3;
            goto LABEL_1320;
          }
        }
        v761[20] = 1;
        goto LABEL_1320;
      }
      v225 = v724;
      v226 = (uint64_t *)v724[2];
      v227 = (uint64_t *)v724[3];
      v228 = *v227;
      if (!*((_BYTE *)v724 + 176))
      {
        v229 = v724 + 4;
        v230 = v227[1];
        v231 = v724[5];
        v232 = v724[7];
        v233 = v724[8];
        v234 = v233 - 1;
        if (v233 >= v232)
        {
          if (v234 <= v232)
            v235 = (uint64_t *)(v231 + 16 * (v234 % v232));
          else
            v235 = (uint64_t *)v724[6];
        }
        else
        {
          v235 = (uint64_t *)(*v229 - 16);
        }
        v371 = *v235;
        v370 = v235[1];
        if (v371 == v228 && v370 == v230)
        {
          v374 = v724[18];
          v375 = v724 + 9;
          v376 = *((unsigned __int8 *)v724 + 152);
          v377 = -1;
          v378 = *v724;
          while (1)
          {
            v373 = v233;
            if ((unint64_t)++v377 >= *(_QWORD *)(v378 + 88))
              break;
            --v233;
            v225[8] = v373 - 1;
            if (v373 >= v232)
            {
              if (v233 <= v232)
                v383 = v231 + 16 * (v233 % v232);
              else
                v383 = v225[6];
            }
            else
            {
              v383 = *v229 - 16;
            }
            *v229 = v383;
            if (v233 == v374)
            {
              v225[8] = v225[13];
              v384 = *(_OWORD *)(v225 + 11);
              *(_OWORD *)v229 = *v375;
              *((_OWORD *)v225 + 3) = v384;
              v232 = v225[7];
              v385 = v225[8];
              if (v376)
              {
                v233 = v385 - 1;
                v225[8] = v385 - 1;
                if (v385 >= v232)
                {
                  if (v233 <= v232)
                    v386 = v225[5] + 16 * (v233 % v232);
                  else
                    v386 = v225[6];
                }
                else
                {
                  v386 = *v229 - 16;
                }
                *v229 = v386;
                if (v385 == v373)
                {
                  v225[8] = v225[13];
                  v387 = *(_OWORD *)(v225 + 11);
                  *(_OWORD *)v229 = *v375;
                  *((_OWORD *)v225 + 3) = v387;
                  v232 = v225[7];
                  v233 = v225[8];
                }
              }
              else
              {
                v233 = v225[8];
              }
            }
            v231 = v225[5];
            v234 = v233 - 1;
            if (v233 < v232)
            {
              v379 = (uint64_t *)(*v229 - 16);
            }
            else if (v234 <= v232)
            {
              v379 = (uint64_t *)(v231 + 16 * (v234 % v232));
            }
            else
            {
              v379 = (uint64_t *)v225[6];
            }
            v381 = *v379;
            v380 = v379[1];
            if (v381 != v228 || v380 != v230)
              goto LABEL_625;
          }
          v234 = v233 - 1;
        }
        else
        {
LABEL_625:
          v373 = v233;
        }
        if (v373 >= v232)
        {
          if (v234 <= v232)
            v388 = (uint64_t *)(v231 + 16 * (v234 % v232));
          else
            v388 = (uint64_t *)v225[6];
        }
        else
        {
          v388 = (uint64_t *)(*v229 - 16);
        }
        if (v225 + 20 != v388)
          *((_OWORD *)v225 + 10) = *(_OWORD *)v388;
        *((_BYTE *)v225 + 176) = 1;
        v228 = *v227;
      }
      *(_QWORD *)&v749 = 0x3FF0000000000000;
      v389 = sub_22376A6D8(*v226, v226[1], v228, v227[1], v225[20], v225[21], (double *)&v749);
      if (v389 == 0.0)
        goto LABEL_663;
      if ((*(_QWORD *)&v389 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v389 > 0.0)
          v390 = 1;
        else
          v390 = -1;
      }
      else
      {
        v391 = fabs(v389);
        if (v389 > 0.0)
          v390 = 1;
        else
          v390 = -1;
        if (v391 <= *(double *)&v749 * 2.22044605e-16)
LABEL_663:
          v390 = 0;
      }
      if (v390 == v178)
      {
        if (!v176)
        {
          v396 = 3;
          if (v211 == 1)
            v397 = 1;
          else
            v397 = 2;
LABEL_700:
          *(_DWORD *)&v761[40] = v396;
          DWORD2(v765) = v397;
          goto LABEL_1320;
        }
        if (v176 == v211)
        {
          if (v211 == 1)
            v392 = 1;
          else
            v392 = 2;
          *(_DWORD *)&v761[40] = v392;
          DWORD2(v765) = v392;
          v761[20] = 1;
          goto LABEL_1320;
        }
      }
      if (v390 != v211)
        goto LABEL_690;
      v393 = sub_223781154((uint64_t)&v723);
      if (!v393)
        goto LABEL_1201;
      if (v393 != v211)
      {
LABEL_690:
        if (v211 == 1)
          v394 = 2;
        else
          v394 = 1;
        if (v211 == 1)
          v395 = 1;
        else
          v395 = 2;
        *(_DWORD *)&v761[40] = v394;
        DWORD2(v765) = v395;
        goto LABEL_1320;
      }
      if (v211 == 1)
        v303 = 1;
      else
        v303 = 2;
      if (v211 == 1)
        v304 = 2;
      else
        v304 = 1;
      goto LABEL_689;
    default:
      if (v742 != 101 || HIBYTE(v742))
        return a6;
      sub_2237806BC((uint64_t)v761, (uint64_t)&v729, (uint64_t)&v723);
      goto LABEL_1320;
  }
}

char ***sub_2237804AC(char ***a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v17 = *v4;
    v18 = 0x8F5C28F5C28F5C29 * ((v6 - *v4) >> 3);
    v19 = v18 + 1;
    if (v18 + 1 > 0x147AE147AE147AELL)
      sub_22316E078();
    v20 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v5 - (_QWORD)v17) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0xA3D70A3D70A3D7)
      v21 = 0x147AE147AE147AELL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 > 0x147AE147AE147AELL)
        sub_223174E94();
      v22 = (char *)operator new(200 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = *(_OWORD *)(a2 + 176);
    v24 = &v22[200 * v18];
    *((_OWORD *)v24 + 10) = *(_OWORD *)(a2 + 160);
    *((_OWORD *)v24 + 11) = v23;
    *((_QWORD *)v24 + 24) = *(_QWORD *)(a2 + 192);
    v25 = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v24 + 6) = *(_OWORD *)(a2 + 96);
    *((_OWORD *)v24 + 7) = v25;
    v26 = *(_OWORD *)(a2 + 144);
    *((_OWORD *)v24 + 8) = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v24 + 9) = v26;
    v27 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v24 = *(_OWORD *)a2;
    *((_OWORD *)v24 + 1) = v27;
    v28 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v24 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v24 + 3) = v28;
    v30 = *(_OWORD *)(a2 + 64);
    v29 = *(_OWORD *)(a2 + 80);
    v16 = v24 + 200;
    *((_OWORD *)v24 + 4) = v30;
    *((_OWORD *)v24 + 5) = v29;
    if (v6 != v17)
    {
      do
      {
        *(_OWORD *)(v24 - 200) = *(_OWORD *)(v6 - 200);
        v31 = *(_OWORD *)(v6 - 104);
        v32 = *(_OWORD *)(v6 - 88);
        v33 = *(_OWORD *)(v6 - 72);
        *(_OWORD *)(v24 - 120) = *(_OWORD *)(v6 - 120);
        *(_OWORD *)(v24 - 72) = v33;
        *(_OWORD *)(v24 - 88) = v32;
        *(_OWORD *)(v24 - 104) = v31;
        v34 = *(_OWORD *)(v6 - 40);
        v35 = *(_OWORD *)(v6 - 24);
        v36 = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v24 - 56) = *(_OWORD *)(v6 - 56);
        *((_QWORD *)v24 - 1) = v36;
        *(_OWORD *)(v24 - 24) = v35;
        *(_OWORD *)(v24 - 40) = v34;
        v37 = *(_OWORD *)(v6 - 184);
        v38 = *(_OWORD *)(v6 - 168);
        v39 = *(_OWORD *)(v6 - 152);
        *(_OWORD *)(v24 - 136) = *(_OWORD *)(v6 - 136);
        *(_OWORD *)(v24 - 152) = v39;
        *(_OWORD *)(v24 - 168) = v38;
        *(_OWORD *)(v24 - 184) = v37;
        v24 -= 200;
        v6 -= 200;
      }
      while (v6 != v17);
      v6 = *v4;
    }
    *v4 = v24;
    v4[1] = v16;
    v4[2] = &v22[200 * v21];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a2;
    v7 = *(_OWORD *)(a2 + 128);
    v9 = *(_OWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 96);
    *((_OWORD *)v6 + 7) = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v6 + 8) = v7;
    *((_OWORD *)v6 + 5) = v9;
    *((_OWORD *)v6 + 6) = v8;
    v11 = *(_OWORD *)(a2 + 160);
    v10 = *(_OWORD *)(a2 + 176);
    v12 = *(_OWORD *)(a2 + 144);
    *((_QWORD *)v6 + 24) = *(_QWORD *)(a2 + 192);
    *((_OWORD *)v6 + 10) = v11;
    *((_OWORD *)v6 + 11) = v10;
    *((_OWORD *)v6 + 9) = v12;
    v13 = *(_OWORD *)(a2 + 16);
    v14 = *(_OWORD *)(a2 + 32);
    v15 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v6 + 3) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v6 + 4) = v15;
    *((_OWORD *)v6 + 1) = v13;
    *((_OWORD *)v6 + 2) = v14;
    v16 = v6 + 200;
  }
  v4[1] = v16;
  return a1;
}

void sub_2237806BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v31;
  _OWORD *v32;
  uint64_t v33;
  _OWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  double v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  double v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t *v77;
  _OWORD *v78;
  double v79;
  int v80;
  double v81;
  BOOL v82;
  int v83;
  int v84;
  double v85;

  v6 = sub_2233E5070((double *)(a2 + 64), (double *)(a2 + 120));
  *(_DWORD *)(a1 + 16) = 6;
  v7 = (_OWORD *)(a2 + 16 * v6 + 8);
  if (v7 != (_OWORD *)a1)
    *(_OWORD *)a1 = *v7;
  v8 = a2 + 56 * v6;
  v9 = *(_OWORD *)(v8 + 40);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v8 + 56);
  *(_OWORD *)(a1 + 88) = v9;
  v10 = *(_OWORD *)(v8 + 64);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(v8 + 80);
  *(_OWORD *)(a1 + 168) = v10;
  v11 = sub_223781154(a3);
  v12 = *(uint64_t **)(a3 + 8);
  v13 = (uint64_t *)v12[2];
  v14 = (uint64_t *)v12[3];
  v15 = *v14;
  if (!*((_BYTE *)v12 + 176))
  {
    v16 = v12 + 4;
    v17 = v14[1];
    v18 = v12[5];
    v19 = v12[7];
    v20 = v12[8];
    v21 = v20 - 1;
    if (v20 < v19)
    {
      if (*(_QWORD *)(*v16 - 16) != v15 || *(_QWORD *)(*v16 - 8) != v17)
        goto LABEL_22;
      goto LABEL_25;
    }
    if (v21 <= v19)
    {
      v27 = (uint64_t *)(v18 + 16 * (v21 % v19));
      v29 = *v27;
      v28 = v27[1];
      if (v29 != v15 || v28 != v17)
      {
LABEL_22:
        if (v20 >= v19)
          goto LABEL_55;
        goto LABEL_23;
      }
    }
    else
    {
      v23 = (uint64_t *)v12[6];
      v25 = *v23;
      v24 = v23[1];
      if (v25 != v15 || v24 != v17)
        goto LABEL_22;
    }
LABEL_25:
    v33 = v12[18];
    v34 = v12 + 9;
    v35 = *((unsigned __int8 *)v12 + 152);
    v36 = -1;
    v37 = *v12;
    while (1)
    {
      v42 = v20;
      if ((unint64_t)++v36 >= *(_QWORD *)(v37 + 88))
      {
        v21 = v20 - 1;
        if (v20 >= v19)
        {
LABEL_55:
          if (v21 <= v19)
          {
            v31 = (uint64_t *)(v18 + 16 * (v21 % v19));
            v32 = v12 + 20;
            if (v12 + 20 == v31)
              goto LABEL_60;
          }
          else
          {
            v31 = (uint64_t *)v12[6];
            v32 = v12 + 20;
            if (v12 + 20 == v31)
            {
LABEL_60:
              *((_BYTE *)v12 + 176) = 1;
              v15 = *v14;
              break;
            }
          }
LABEL_59:
          *v32 = *(_OWORD *)v31;
          goto LABEL_60;
        }
LABEL_23:
        v31 = (uint64_t *)(*v16 - 16);
        v32 = v12 + 20;
        if (v12 + 20 == v31)
          goto LABEL_60;
        goto LABEL_59;
      }
      --v20;
      v12[8] = v42 - 1;
      if (v42 >= v19)
      {
        if (v20 <= v19)
        {
          *v16 = v18 + 16 * (v20 % v19);
          if (v20 != v33)
            goto LABEL_50;
        }
        else
        {
          *v16 = v12[6];
          if (v20 != v33)
            goto LABEL_50;
        }
      }
      else
      {
        *v16 -= 16;
        if (v20 != v33)
          goto LABEL_50;
      }
      v12[8] = v12[13];
      v43 = *(_OWORD *)(v12 + 11);
      *(_OWORD *)v16 = *v34;
      *((_OWORD *)v12 + 3) = v43;
      v19 = v12[7];
      v44 = v12[8];
      if (v35)
      {
        v20 = v44 - 1;
        v12[8] = v44 - 1;
        if (v44 < v19)
        {
          *v16 -= 16;
          if (v44 != v42)
            goto LABEL_50;
          goto LABEL_49;
        }
        if (v20 > v19)
        {
          *v16 = v12[6];
          if (v44 != v42)
            goto LABEL_50;
LABEL_49:
          v12[8] = v12[13];
          v45 = *(_OWORD *)(v12 + 11);
          *(_OWORD *)v16 = *v34;
          *((_OWORD *)v12 + 3) = v45;
          v19 = v12[7];
          v20 = v12[8];
          goto LABEL_50;
        }
        *v16 = v12[5] + 16 * (v20 % v19);
        if (v44 == v42)
          goto LABEL_49;
      }
      else
      {
        v20 = v12[8];
      }
LABEL_50:
      v18 = v12[5];
      v21 = v20 - 1;
      if (v20 < v19)
      {
        v38 = (uint64_t *)(*v16 - 16);
      }
      else if (v21 <= v19)
      {
        v38 = (uint64_t *)(v18 + 16 * (v21 % v19));
      }
      else
      {
        v38 = (uint64_t *)v12[6];
      }
      v40 = *v38;
      v39 = v38[1];
      if (v40 != v15 || v39 != v17)
        goto LABEL_22;
    }
  }
  v85 = 1.0;
  v46 = sub_22376A6D8(*v13, v13[1], v15, v14[1], v12[20], v12[21], &v85);
  if (v46 == 0.0)
  {
LABEL_62:
    v47 = 0;
    v49 = *(_QWORD *)(a3 + 8);
    v48 = *(uint64_t **)(a3 + 16);
    v51 = *(uint64_t **)(v49 + 16);
    v50 = *(uint64_t **)(v49 + 24);
    if (*((_BYTE *)v48 + 176))
      goto LABEL_122;
    goto LABEL_70;
  }
  if ((*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v52 = fabs(v46);
    if (v46 > 0.0)
      v47 = 1;
    else
      v47 = -1;
    if (v52 > v85 * 2.22044605e-16)
    {
      v53 = *(_QWORD *)(a3 + 8);
      v48 = *(uint64_t **)(a3 + 16);
      v51 = *(uint64_t **)(v53 + 16);
      v50 = *(uint64_t **)(v53 + 24);
      if (*((_BYTE *)v48 + 176))
        goto LABEL_122;
      goto LABEL_70;
    }
    goto LABEL_62;
  }
  if (v46 > 0.0)
    v47 = 1;
  else
    v47 = -1;
  v62 = *(_QWORD *)(a3 + 8);
  v48 = *(uint64_t **)(a3 + 16);
  v51 = *(uint64_t **)(v62 + 16);
  v50 = *(uint64_t **)(v62 + 24);
  if (!*((_BYTE *)v48 + 176))
  {
LABEL_70:
    v54 = (uint64_t *)v48[3];
    v55 = v48 + 4;
    v56 = *v54;
    v57 = v48[5];
    v58 = v48[7];
    v59 = v48[8];
    v60 = v59 - 1;
    if (v59 >= v58)
    {
      if (v60 <= v58)
      {
        v61 = (_QWORD *)(v57 + 16 * (v60 % v58));
        if (*v61 != v56)
          goto LABEL_112;
      }
      else
      {
        v61 = (_QWORD *)v48[6];
        if (*v61 != v56)
        {
LABEL_112:
          if (v59 >= v58)
            goto LABEL_116;
          goto LABEL_113;
        }
      }
    }
    else
    {
      v61 = (_QWORD *)(*v55 - 16);
      if (*v61 != v56)
        goto LABEL_112;
    }
    v63 = v54[1];
    if (v61[1] != v63)
      goto LABEL_112;
    v64 = v48[18];
    v65 = v48 + 9;
    v66 = *((unsigned __int8 *)v48 + 152);
    v67 = -1;
    v68 = *v48;
    while (1)
    {
      v73 = v59;
      if ((unint64_t)++v67 >= *(_QWORD *)(v68 + 88))
      {
        v60 = v59 - 1;
        if (v59 >= v58)
        {
LABEL_116:
          if (v60 <= v58)
          {
            v77 = (uint64_t *)(v57 + 16 * (v60 % v58));
            v78 = v48 + 20;
            if (v48 + 20 == v77)
              goto LABEL_121;
          }
          else
          {
            v77 = (uint64_t *)v48[6];
            v78 = v48 + 20;
            if (v48 + 20 == v77)
            {
LABEL_121:
              *((_BYTE *)v48 + 176) = 1;
              break;
            }
          }
LABEL_120:
          *v78 = *(_OWORD *)v77;
          goto LABEL_121;
        }
LABEL_113:
        v77 = (uint64_t *)(*v55 - 16);
        v78 = v48 + 20;
        if (v48 + 20 == v77)
          goto LABEL_121;
        goto LABEL_120;
      }
      --v59;
      v48[8] = v73 - 1;
      if (v73 >= v58)
      {
        if (v59 <= v58)
        {
          *v55 = v57 + 16 * (v59 % v58);
          if (v59 != v64)
            goto LABEL_108;
        }
        else
        {
          *v55 = v48[6];
          if (v59 != v64)
            goto LABEL_108;
        }
      }
      else
      {
        *v55 -= 16;
        if (v59 != v64)
          goto LABEL_108;
      }
      v48[8] = v48[13];
      v74 = *(_OWORD *)(v48 + 11);
      *(_OWORD *)v55 = *v65;
      *((_OWORD *)v48 + 3) = v74;
      v58 = v48[7];
      v75 = v48[8];
      if (v66)
      {
        v59 = v75 - 1;
        v48[8] = v75 - 1;
        if (v75 < v58)
        {
          *v55 -= 16;
          if (v75 != v73)
            goto LABEL_108;
          goto LABEL_107;
        }
        if (v59 > v58)
        {
          *v55 = v48[6];
          if (v75 != v73)
            goto LABEL_108;
LABEL_107:
          v48[8] = v48[13];
          v76 = *(_OWORD *)(v48 + 11);
          *(_OWORD *)v55 = *v65;
          *((_OWORD *)v48 + 3) = v76;
          v58 = v48[7];
          v59 = v48[8];
          goto LABEL_108;
        }
        *v55 = v48[5] + 16 * (v59 % v58);
        if (v75 == v73)
          goto LABEL_107;
      }
      else
      {
        v59 = v48[8];
      }
LABEL_108:
      v57 = v48[5];
      v60 = v59 - 1;
      if (v59 < v58)
      {
        v69 = (uint64_t *)(*v55 - 16);
      }
      else if (v60 <= v58)
      {
        v69 = (uint64_t *)(v57 + 16 * (v60 % v58));
      }
      else
      {
        v69 = (uint64_t *)v48[6];
      }
      v71 = *v69;
      v70 = v69[1];
      if (v71 != v56 || v70 != v63)
        goto LABEL_112;
    }
  }
LABEL_122:
  v85 = 1.0;
  v79 = sub_22376A6D8(*v51, v51[1], *v50, v50[1], v48[20], v48[21], &v85);
  if (v79 == 0.0)
  {
LABEL_123:
    v80 = 0;
    goto LABEL_133;
  }
  if ((*(_QWORD *)&v79 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v81 = fabs(v79);
    if (v79 > 0.0)
      v80 = 1;
    else
      v80 = -1;
    if (v81 > v85 * 2.22044605e-16)
      goto LABEL_133;
    goto LABEL_123;
  }
  if (v79 > 0.0)
    v80 = 1;
  else
    v80 = -1;
LABEL_133:
  if (v11 || v47 != v80)
  {
    if (v80 * v47 == -1)
      v82 = v47 == -1;
    else
      v82 = v11 == -1;
    if (v82)
      v83 = 2;
    else
      v83 = 1;
    *(_DWORD *)(a1 + 40) = v83;
    if (v82)
      v84 = 1;
    else
      v84 = 2;
    *(_DWORD *)(a1 + 120) = v84;
  }
  else
  {
    *(_DWORD *)(a1 + 40) = 4;
    *(_DWORD *)(a1 + 120) = 4;
  }
}

uint64_t sub_223780D80(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  __int128 v36;
  uint64_t *v37;
  _OWORD *v38;
  uint64_t *v39;
  double v40;
  uint64_t result;
  double v42;
  double v43;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)v1[3];
  v3 = *v2;
  if (!*((_BYTE *)v1 + 176))
  {
    v4 = v1 + 4;
    v5 = v2[1];
    v6 = v1[5];
    v7 = v1[7];
    v8 = v1[8];
    if (v8 < v7)
    {
      if (*(_QWORD *)(*v4 - 16) != v3 || *(_QWORD *)(*v4 - 8) != v5)
        goto LABEL_67;
      goto LABEL_19;
    }
    if (v8 - 1 <= v7)
    {
      v14 = (uint64_t *)(v6 + 16 * ((v8 - 1) % v7));
      v16 = *v14;
      v15 = v14[1];
      if (v16 != v3 || v15 != v5)
      {
LABEL_67:
        if (v8 >= v7)
        {
          if (v8 - 1 <= v7)
          {
            v37 = (uint64_t *)(v6 + 16 * ((v8 - 1) % v7));
            v38 = v1 + 20;
            if (v1 + 20 == v37)
            {
LABEL_75:
              *((_BYTE *)v1 + 176) = 1;
              v3 = *v2;
              goto LABEL_76;
            }
          }
          else
          {
            v37 = (uint64_t *)v1[6];
            v38 = v1 + 20;
            if (v1 + 20 == v37)
              goto LABEL_75;
          }
        }
        else
        {
          v37 = (uint64_t *)(*v4 - 16);
          v38 = v1 + 20;
          if (v1 + 20 == v37)
            goto LABEL_75;
        }
        *v38 = *(_OWORD *)v37;
        goto LABEL_75;
      }
    }
    else
    {
      v10 = (uint64_t *)v1[6];
      v12 = *v10;
      v11 = v10[1];
      if (v12 != v3 || v11 != v5)
        goto LABEL_67;
    }
LABEL_19:
    v18 = v1[18];
    v19 = v1 + 9;
    v20 = *v1;
    if (*((_BYTE *)v1 + 152))
    {
      v21 = -1;
      while (1)
      {
        v26 = v8;
        if ((unint64_t)++v21 >= *(_QWORD *)(v20 + 88))
          goto LABEL_67;
        --v8;
        v1[8] = v26 - 1;
        if (v26 >= v7)
        {
          if (v8 <= v7)
          {
            *v4 = v6 + 16 * (v8 % v7);
            if (v8 != v18)
              goto LABEL_43;
          }
          else
          {
            *v4 = v1[6];
            if (v8 != v18)
              goto LABEL_43;
          }
        }
        else
        {
          *v4 -= 16;
          if (v8 != v18)
            goto LABEL_43;
        }
        v1[8] = v1[13];
        v27 = *(_OWORD *)(v1 + 11);
        *(_OWORD *)v4 = *v19;
        *((_OWORD *)v1 + 3) = v27;
        v7 = v1[7];
        v28 = v1[8];
        v8 = v28 - 1;
        v1[8] = v28 - 1;
        if (v28 < v7)
        {
          *v4 -= 16;
          if (v28 != v26)
            goto LABEL_43;
          goto LABEL_42;
        }
        if (v8 > v7)
        {
          *v4 = v1[6];
          if (v28 != v26)
            goto LABEL_43;
LABEL_42:
          v1[8] = v1[13];
          v29 = *(_OWORD *)(v1 + 11);
          *(_OWORD *)v4 = *v19;
          *((_OWORD *)v1 + 3) = v29;
          v7 = v1[7];
          v8 = v1[8];
          goto LABEL_43;
        }
        *v4 = v1[5] + 16 * (v8 % v7);
        if (v28 == v26)
          goto LABEL_42;
LABEL_43:
        v6 = v1[5];
        if (v8 < v7)
        {
          v22 = (uint64_t *)(*v4 - 16);
        }
        else if (v8 - 1 <= v7)
        {
          v22 = (uint64_t *)(v6 + 16 * ((v8 - 1) % v7));
        }
        else
        {
          v22 = (uint64_t *)v1[6];
        }
        v24 = *v22;
        v23 = v22[1];
        if (v24 != v3 || v23 != v5)
          goto LABEL_67;
      }
    }
    v30 = -1;
    while (1)
    {
      if ((unint64_t)++v30 >= *(_QWORD *)(v20 + 88))
        goto LABEL_67;
      v35 = v8 - 1;
      v1[8] = v8 - 1;
      if (v8 < v7)
        break;
      if (v35 > v7)
      {
        *v4 = v1[6];
        --v8;
        if (v35 != v18)
          goto LABEL_63;
LABEL_62:
        v1[8] = v1[13];
        v36 = *(_OWORD *)(v1 + 11);
        *(_OWORD *)v4 = *v19;
        *((_OWORD *)v1 + 3) = v36;
        v7 = v1[7];
        v8 = v1[8];
        v6 = v1[5];
        goto LABEL_63;
      }
      *v4 = v6 + 16 * (v35 % v7);
      --v8;
      if (v35 == v18)
        goto LABEL_62;
LABEL_63:
      if (v8 < v7)
      {
        v31 = (uint64_t *)(*v4 - 16);
      }
      else if (v8 - 1 <= v7)
      {
        v31 = (uint64_t *)(v6 + 16 * ((v8 - 1) % v7));
      }
      else
      {
        v31 = (uint64_t *)v1[6];
      }
      v33 = *v31;
      v32 = v31[1];
      if (v33 != v3 || v32 != v5)
        goto LABEL_67;
    }
    *v4 -= 16;
    --v8;
    if (v35 != v18)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_76:
  v39 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 24);
  v43 = 1.0;
  v40 = sub_22376A6D8(v3, v2[1], v1[20], v1[21], *v39, v39[1], &v43);
  if (v40 == 0.0)
    return 0;
  if ((*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v40 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v42 = fabs(v40);
    if (v40 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v42 <= v43 * 2.22044605e-16)
      return 0;
  }
  return result;
}

uint64_t sub_223781154(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  __int128 v37;
  uint64_t *v38;
  _OWORD *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v57;
  _OWORD *v58;
  uint64_t v59;
  _OWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  double v72;
  uint64_t result;
  double v74;
  double v75;

  v1 = *(uint64_t **)(a1 + 16);
  v2 = (uint64_t *)v1[3];
  if (*((_BYTE *)v1 + 176))
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (*((_BYTE *)v3 + 176))
      goto LABEL_135;
    goto LABEL_78;
  }
  v4 = v1 + 4;
  v5 = *v2;
  v6 = v2[1];
  v7 = v1[5];
  v8 = v1[7];
  v9 = v1[8];
  if (v9 < v8)
  {
    if (*(_QWORD *)(*v4 - 16) != v5 || *(_QWORD *)(*v4 - 8) != v6)
      goto LABEL_69;
    goto LABEL_21;
  }
  if (v9 - 1 > v8)
  {
    v11 = (uint64_t *)v1[6];
    v13 = *v11;
    v12 = v11[1];
    if (v13 != v5 || v12 != v6)
      goto LABEL_69;
LABEL_21:
    v19 = v1[18];
    v20 = v1 + 9;
    v21 = *v1;
    if (*((_BYTE *)v1 + 152))
    {
      v22 = -1;
      while (1)
      {
        v27 = v9;
        if ((unint64_t)++v22 >= *(_QWORD *)(v21 + 88))
          goto LABEL_69;
        --v9;
        v1[8] = v27 - 1;
        if (v27 >= v8)
        {
          if (v9 <= v8)
          {
            *v4 = v7 + 16 * (v9 % v8);
            if (v9 != v19)
              goto LABEL_45;
          }
          else
          {
            *v4 = v1[6];
            if (v9 != v19)
              goto LABEL_45;
          }
        }
        else
        {
          *v4 -= 16;
          if (v9 != v19)
            goto LABEL_45;
        }
        v1[8] = v1[13];
        v28 = *(_OWORD *)(v1 + 11);
        *(_OWORD *)v4 = *v20;
        *((_OWORD *)v1 + 3) = v28;
        v8 = v1[7];
        v29 = v1[8];
        v9 = v29 - 1;
        v1[8] = v29 - 1;
        if (v29 < v8)
        {
          *v4 -= 16;
          if (v29 != v27)
            goto LABEL_45;
          goto LABEL_44;
        }
        if (v9 > v8)
        {
          *v4 = v1[6];
          if (v29 != v27)
            goto LABEL_45;
LABEL_44:
          v1[8] = v1[13];
          v30 = *(_OWORD *)(v1 + 11);
          *(_OWORD *)v4 = *v20;
          *((_OWORD *)v1 + 3) = v30;
          v8 = v1[7];
          v9 = v1[8];
          goto LABEL_45;
        }
        *v4 = v1[5] + 16 * (v9 % v8);
        if (v29 == v27)
          goto LABEL_44;
LABEL_45:
        v7 = v1[5];
        if (v9 < v8)
        {
          v23 = (uint64_t *)(*v4 - 16);
        }
        else if (v9 - 1 <= v8)
        {
          v23 = (uint64_t *)(v7 + 16 * ((v9 - 1) % v8));
        }
        else
        {
          v23 = (uint64_t *)v1[6];
        }
        v25 = *v23;
        v24 = v23[1];
        if (v25 != v5 || v24 != v6)
          goto LABEL_69;
      }
    }
    v31 = -1;
    while (1)
    {
      if ((unint64_t)++v31 >= *(_QWORD *)(v21 + 88))
        goto LABEL_69;
      v36 = v9 - 1;
      v1[8] = v9 - 1;
      if (v9 < v8)
        break;
      if (v36 > v8)
      {
        *v4 = v1[6];
        --v9;
        if (v36 != v19)
          goto LABEL_65;
LABEL_64:
        v1[8] = v1[13];
        v37 = *(_OWORD *)(v1 + 11);
        *(_OWORD *)v4 = *v20;
        *((_OWORD *)v1 + 3) = v37;
        v8 = v1[7];
        v9 = v1[8];
        v7 = v1[5];
        goto LABEL_65;
      }
      *v4 = v7 + 16 * (v36 % v8);
      --v9;
      if (v36 == v19)
        goto LABEL_64;
LABEL_65:
      if (v9 < v8)
      {
        v32 = (uint64_t *)(*v4 - 16);
      }
      else if (v9 - 1 <= v8)
      {
        v32 = (uint64_t *)(v7 + 16 * ((v9 - 1) % v8));
      }
      else
      {
        v32 = (uint64_t *)v1[6];
      }
      v34 = *v32;
      v33 = v32[1];
      if (v34 != v5 || v33 != v6)
        goto LABEL_69;
    }
    *v4 -= 16;
    --v9;
    if (v36 != v19)
      goto LABEL_65;
    goto LABEL_64;
  }
  v15 = (uint64_t *)(v7 + 16 * ((v9 - 1) % v8));
  v17 = *v15;
  v16 = v15[1];
  if (v17 == v5 && v16 == v6)
    goto LABEL_21;
LABEL_69:
  if (v9 < v8)
  {
    v38 = (uint64_t *)(*v4 - 16);
    v39 = v1 + 20;
    if (v1 + 20 == v38)
      goto LABEL_77;
    goto LABEL_76;
  }
  if (v9 - 1 <= v8)
  {
    v38 = (uint64_t *)(v7 + 16 * ((v9 - 1) % v8));
    v39 = v1 + 20;
    if (v1 + 20 == v38)
      goto LABEL_77;
    goto LABEL_76;
  }
  v38 = (uint64_t *)v1[6];
  v39 = v1 + 20;
  if (v1 + 20 != v38)
LABEL_76:
    *v39 = *(_OWORD *)v38;
LABEL_77:
  *((_BYTE *)v1 + 176) = 1;
  v3 = *(uint64_t **)(a1 + 8);
  if (*((_BYTE *)v3 + 176))
    goto LABEL_135;
LABEL_78:
  v40 = (uint64_t *)v3[3];
  v41 = v3 + 4;
  v42 = *v40;
  v43 = v40[1];
  v44 = v3[5];
  v45 = v3[7];
  v46 = v3[8];
  v47 = v46 - 1;
  if (v46 < v45)
  {
    if (*(_QWORD *)(*v41 - 16) != v42 || *(_QWORD *)(*v41 - 8) != v43)
      goto LABEL_96;
    goto LABEL_99;
  }
  if (v47 <= v45)
  {
    v53 = (uint64_t *)(v44 + 16 * (v47 % v45));
    v55 = *v53;
    v54 = v53[1];
    if (v55 != v42 || v54 != v43)
    {
LABEL_96:
      if (v46 >= v45)
        goto LABEL_129;
LABEL_97:
      v57 = (uint64_t *)(*v41 - 16);
      v58 = v3 + 20;
      if (v3 + 20 == v57)
        goto LABEL_134;
      goto LABEL_133;
    }
  }
  else
  {
    v49 = (uint64_t *)v3[6];
    v51 = *v49;
    v50 = v49[1];
    if (v51 != v42 || v50 != v43)
      goto LABEL_96;
  }
LABEL_99:
  v59 = v3[18];
  v60 = v3 + 9;
  v61 = *((unsigned __int8 *)v3 + 152);
  v62 = -1;
  v63 = *v3;
  while (1)
  {
    v68 = v46;
    if ((unint64_t)++v62 >= *(_QWORD *)(v63 + 88))
      break;
    --v46;
    v3[8] = v68 - 1;
    if (v68 >= v45)
    {
      if (v46 <= v45)
      {
        *v41 = v44 + 16 * (v46 % v45);
        if (v46 != v59)
          goto LABEL_124;
      }
      else
      {
        *v41 = v3[6];
        if (v46 != v59)
          goto LABEL_124;
      }
    }
    else
    {
      *v41 -= 16;
      if (v46 != v59)
        goto LABEL_124;
    }
    v3[8] = v3[13];
    v69 = *(_OWORD *)(v3 + 11);
    *(_OWORD *)v41 = *v60;
    *((_OWORD *)v3 + 3) = v69;
    v45 = v3[7];
    v70 = v3[8];
    if (v61)
    {
      v46 = v70 - 1;
      v3[8] = v70 - 1;
      if (v70 < v45)
      {
        *v41 -= 16;
        if (v70 != v68)
          goto LABEL_124;
        goto LABEL_123;
      }
      if (v46 > v45)
      {
        *v41 = v3[6];
        if (v70 != v68)
          goto LABEL_124;
LABEL_123:
        v3[8] = v3[13];
        v71 = *(_OWORD *)(v3 + 11);
        *(_OWORD *)v41 = *v60;
        *((_OWORD *)v3 + 3) = v71;
        v45 = v3[7];
        v46 = v3[8];
        goto LABEL_124;
      }
      *v41 = v3[5] + 16 * (v46 % v45);
      if (v70 == v68)
        goto LABEL_123;
    }
    else
    {
      v46 = v3[8];
    }
LABEL_124:
    v44 = v3[5];
    v47 = v46 - 1;
    if (v46 < v45)
    {
      v64 = (uint64_t *)(*v41 - 16);
    }
    else if (v47 <= v45)
    {
      v64 = (uint64_t *)(v44 + 16 * (v47 % v45));
    }
    else
    {
      v64 = (uint64_t *)v3[6];
    }
    v66 = *v64;
    v65 = v64[1];
    if (v66 != v42 || v65 != v43)
      goto LABEL_96;
  }
  v47 = v46 - 1;
  if (v46 < v45)
    goto LABEL_97;
LABEL_129:
  if (v47 <= v45)
  {
    v57 = (uint64_t *)(v44 + 16 * (v47 % v45));
    v58 = v3 + 20;
    if (v3 + 20 == v57)
      goto LABEL_134;
    goto LABEL_133;
  }
  v57 = (uint64_t *)v3[6];
  v58 = v3 + 20;
  if (v3 + 20 != v57)
LABEL_133:
    *v58 = *(_OWORD *)v57;
LABEL_134:
  *((_BYTE *)v3 + 176) = 1;
LABEL_135:
  v75 = 1.0;
  v72 = sub_22376A6D8(*v2, v2[1], v1[20], v1[21], v3[20], v3[21], &v75);
  if (v72 == 0.0)
    return 0;
  if ((*(_QWORD *)&v72 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v72 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v74 = fabs(v72);
    if (v72 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v74 <= v75 * 2.22044605e-16)
      return 0;
  }
  return result;
}

double sub_223781780(unint64_t a1, uint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  __n128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64x2_t v61;
  unint64_t v62;
  int64x2_t v63;
  int64x2_t v64;
  unint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64x2_t v70;
  int64x2_t v71;
  unint64_t v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int64x2_t v81;
  __n128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __n128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __n128 v106;
  __n128 v107;
  __int128 v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  int64_t v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  double v125;
  int64_t v126;
  uint64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  int64_t v137;
  unint64_t v138;
  int64x2_t v139;
  int64x2_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int64x2_t v145;
  int64x2_t v146;
  unint64_t v147;
  BOOL v148;
  int v149;
  int64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  char v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int64x2_t v165;
  int64x2_t v166;
  unint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int64x2_t v172;
  int64x2_t v173;
  unint64_t v174;
  BOOL v175;
  int v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  int8x16_t *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __n128 v197;
  __int128 v198;
  __int128 v199;
  BOOL v200;
  __n128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  unint64_t v210;
  int v211;
  unint64_t v212;
  __n128 v213;
  __n128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __n128 v237;
  __n128 v238;
  __int128 v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  BOOL v243;
  uint64_t v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int64x2_t v249;
  unint64_t v250;
  int64x2_t v251;
  int64x2_t v252;
  unint64_t v253;
  const char *imp;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  int64x2_t v258;
  int64x2_t v259;
  unint64_t v260;
  BOOL v261;
  int v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  BOOL v270;
  uint64_t v271;
  double v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int64x2_t v276;
  unint64_t v277;
  int64x2_t v278;
  int64x2_t v279;
  unint64_t v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  int64x2_t v285;
  int64x2_t v286;
  unint64_t v287;
  BOOL v288;
  int v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  int8x16_t *v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __n128 v312;
  __int128 v313;
  __int128 v314;
  __n128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  __n128 v337;
  __int128 v338;
  int8x16_t *v339;
  int8x16_t *v340;
  int8x16_t v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __n128 v347;
  __n128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  __n128 v366;
  __n128 v367;
  __int128 v368;
  __n128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __n128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __n128 v389;
  __int128 v390;
  __n128 v391;
  __int128 v392;
  __int128 v393;
  __n128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __n128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  uint64_t v418;
  uint64_t v419;
  int64_t v420;
  int64_t v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __n128 v428;
  __int128 v429;
  int64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __n128 v441;
  __n128 v442;
  __int128 v443;
  uint64_t v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __n128 v463;
  __int128 v464;
  uint64_t v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __n128 v471;
  uint64_t v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  uint64_t v486;
  BOOL v487;
  uint64_t v488;
  BOOL v489;
  uint64_t v490;
  double v491;
  double v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int64x2_t v496;
  unint64_t v497;
  int64x2_t v498;
  int64x2_t v499;
  unint64_t v500;
  const char *v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  int64x2_t v505;
  int64x2_t v506;
  unint64_t v507;
  int v508;
  uint64_t v509;
  const char *v510;
  uint64_t v511;
  uint64_t v512;
  int64_t v513;
  unint64_t v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  uint64_t v523;
  __int128 v524;
  __int128 v525;
  __n128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  unint64_t v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  __n128 *v546;
  int8x16_t *v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __n128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  uint64_t v562;
  __int128 v563;
  __int128 v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __n128 v574;
  __n128 v575;
  __int128 v576;
  uint64_t v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __n128 v593;
  __int128 v594;
  uint64_t v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __n128 v602;
  __int128 v603;
  int8x16_t *v604;
  __n128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  unint64_t v612;
  unint64_t v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  uint64_t v620;
  uint64_t v621;
  BOOL v622;
  uint64_t v623;
  double v624;
  double v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  int64x2_t v629;
  unint64_t v630;
  int64x2_t v631;
  int64x2_t v632;
  unint64_t v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  int64x2_t v638;
  int64x2_t v639;
  unint64_t v640;
  BOOL v641;
  int v642;
  uint64_t v643;
  const char *v644;
  uint64_t v645;
  uint64_t v646;
  std::logic_error *v647;
  std::logic_error *v648;
  std::logic_error *v649;
  std::logic_error *v650;
  std::logic_error *v651;
  std::logic_error *v652;
  std::logic_error *v653;
  std::logic_error *v654;
  int8x16_t *v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v661;
  int8x16_t v662;
  __n128 v663;
  __int128 v664;
  _BYTE v665[64];
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  uint64_t v671;
  int8x16_t v672;
  __n128 v673;
  __n128 v674;
  __int128 v675;
  __int128 v676;
  _BYTE v677[32];
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  uint64_t v683;
  __int128 v684;
  int64_t v685;
  uint64_t v686;
  std::logic_error v687;

uint64_t sub_2237843D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v15;
  __int128 v16;
  __int128 v17;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a2 + 48);
  if (v2 != v3)
    return v2 < v3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  v9 = __OFSUB__(v6, v7);
  v8 = v6 - v7 < 0;
  if (v6 != v7)
    goto LABEL_9;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a2 + 64);
  v9 = __OFSUB__(v10, v11);
  v8 = v10 - v11 < 0;
  if (v10 != v11
    || (v12 = *(_QWORD *)(a1 + 80), v13 = *(_QWORD *)(a2 + 80), v9 = __OFSUB__(v12, v13), v8 = v12 - v13 < 0, v12 != v13))
  {
LABEL_9:
    if (v8 == v9)
      goto LABEL_12;
    return 1;
  }
  if (*(_QWORD *)(a1 + 72) < *(_QWORD *)(a2 + 72))
    return 1;
LABEL_12:
  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72)
    || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64)
    || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80)
    || v6 != v7)
  {
    return 0;
  }
  v15 = (__int128 *)(a2 + 88);
  if (vabdd_f64(*(double *)(a1 + 104), *(double *)(a2 + 104)) < 50.0
    && (v17 = *(_OWORD *)(a1 + 88),
        sub_2233E5290((int64_t)&v17),
        v16 = *v15,
        sub_2233E5290((int64_t)&v16),
        v17 == v16)
    && *(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    return sub_223784F00(a1, a2);
  }
  else
  {
    return sub_2233E5070((double *)(a1 + 88), (double *)(a2 + 88));
  }
}

__n128 sub_223784580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  int v7;
  __n128 result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __n128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v6 = sub_2237843D8(a2, a1);
  v7 = sub_2237843D8(a3, a2);
  if ((v6 & 1) != 0)
  {
    v9 = a1 + 16;
    if (v7)
    {
      v90 = *(_OWORD *)(a1 + 160);
      v94 = *(_OWORD *)(a1 + 176);
      v74 = *(_OWORD *)(a1 + 96);
      v78 = *(_OWORD *)(a1 + 112);
      v98 = *(_QWORD *)(a1 + 192);
      v82 = *(_OWORD *)(a1 + 128);
      v86 = *(_OWORD *)(a1 + 144);
      v51 = *(_OWORD *)a1;
      v55 = *(_OWORD *)v9;
      v59 = *(_OWORD *)(a1 + 32);
      v63 = *(_OWORD *)(a1 + 48);
      v67 = *(_OWORD *)(a1 + 64);
      v71 = *(__n128 *)(a1 + 80);
      *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_10:
      v42 = *(_OWORD *)(a3 + 128);
      v44 = *(_OWORD *)(a3 + 80);
      v43 = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(v9 + 96) = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(v9 + 112) = v42;
      *(_OWORD *)(v9 + 64) = v44;
      *(_OWORD *)(v9 + 80) = v43;
      v46 = *(_OWORD *)(a3 + 160);
      v45 = *(_OWORD *)(a3 + 176);
      v47 = *(_OWORD *)(a3 + 144);
      *(_QWORD *)(v9 + 176) = *(_QWORD *)(a3 + 192);
      *(_OWORD *)(v9 + 144) = v46;
      *(_OWORD *)(v9 + 160) = v45;
      *(_OWORD *)(v9 + 128) = v47;
      v48 = *(_OWORD *)(a3 + 16);
      v49 = *(_OWORD *)(a3 + 32);
      v50 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v9 + 48) = v50;
      *(_OWORD *)v9 = v48;
      *(_OWORD *)(v9 + 16) = v49;
      *(_OWORD *)(a3 + 160) = v90;
      *(_OWORD *)(a3 + 176) = v94;
      *(_QWORD *)(a3 + 192) = v98;
      *(_OWORD *)(a3 + 96) = v74;
      *(_OWORD *)(a3 + 112) = v78;
      *(_OWORD *)(a3 + 128) = v82;
      *(_OWORD *)(a3 + 144) = v86;
      *(_OWORD *)a3 = v51;
      *(_OWORD *)(a3 + 16) = v55;
      *(_OWORD *)(a3 + 32) = v59;
      *(_OWORD *)(a3 + 48) = v63;
      result = v71;
      *(_OWORD *)(a3 + 64) = v67;
      *(__n128 *)(a3 + 80) = v71;
      return result;
    }
    v93 = *(_OWORD *)(a1 + 160);
    v97 = *(_OWORD *)(a1 + 176);
    v77 = *(_OWORD *)(a1 + 96);
    v81 = *(_OWORD *)(a1 + 112);
    v100 = *(_QWORD *)(a1 + 192);
    v85 = *(_OWORD *)(a1 + 128);
    v89 = *(_OWORD *)(a1 + 144);
    v54 = *(_OWORD *)a1;
    v58 = *(_OWORD *)v9;
    v62 = *(_OWORD *)(a1 + 32);
    v66 = *(_OWORD *)(a1 + 48);
    v70 = *(_OWORD *)(a1 + 64);
    v73 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v33 = *(_OWORD *)(a2 + 128);
    v35 = *(_OWORD *)(a2 + 80);
    v34 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v33;
    *(_OWORD *)(a1 + 80) = v35;
    *(_OWORD *)(a1 + 96) = v34;
    v37 = *(_OWORD *)(a2 + 160);
    v36 = *(_OWORD *)(a2 + 176);
    v38 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v37;
    *(_OWORD *)(a1 + 176) = v36;
    *(_OWORD *)(a1 + 144) = v38;
    v39 = *(_OWORD *)(a2 + 16);
    v40 = *(_OWORD *)(a2 + 32);
    v41 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v41;
    *(_OWORD *)v9 = v39;
    *(_OWORD *)(a1 + 32) = v40;
    *(_OWORD *)(a2 + 160) = v93;
    *(_OWORD *)(a2 + 176) = v97;
    *(_QWORD *)(a2 + 192) = v100;
    *(_OWORD *)(a2 + 96) = v77;
    *(_OWORD *)(a2 + 112) = v81;
    *(_OWORD *)(a2 + 128) = v85;
    *(_OWORD *)(a2 + 144) = v89;
    *(_OWORD *)a2 = v54;
    *(_OWORD *)(a2 + 16) = v58;
    *(_OWORD *)(a2 + 32) = v62;
    *(_OWORD *)(a2 + 48) = v66;
    *(_OWORD *)(a2 + 64) = v70;
    *(_OWORD *)(a2 + 80) = v73;
    if (sub_2237843D8(a3, a2))
    {
      v9 = a2 + 16;
      v90 = *(_OWORD *)(a2 + 160);
      v94 = *(_OWORD *)(a2 + 176);
      v74 = *(_OWORD *)(a2 + 96);
      v78 = *(_OWORD *)(a2 + 112);
      v98 = *(_QWORD *)(a2 + 192);
      v82 = *(_OWORD *)(a2 + 128);
      v86 = *(_OWORD *)(a2 + 144);
      v51 = *(_OWORD *)a2;
      v55 = *(_OWORD *)(a2 + 16);
      v59 = *(_OWORD *)(a2 + 32);
      v63 = *(_OWORD *)(a2 + 48);
      v67 = *(_OWORD *)(a2 + 64);
      v71 = *(__n128 *)(a2 + 80);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_10;
    }
  }
  else if (v7)
  {
    v91 = *(_OWORD *)(a2 + 160);
    v95 = *(_OWORD *)(a2 + 176);
    v99 = *(_QWORD *)(a2 + 192);
    v75 = *(_OWORD *)(a2 + 96);
    v79 = *(_OWORD *)(a2 + 112);
    v83 = *(_OWORD *)(a2 + 128);
    v87 = *(_OWORD *)(a2 + 144);
    v52 = *(_OWORD *)a2;
    v56 = *(_OWORD *)(a2 + 16);
    v60 = *(_OWORD *)(a2 + 32);
    v64 = *(_OWORD *)(a2 + 48);
    v68 = *(_OWORD *)(a2 + 64);
    v72 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v10 = *(_OWORD *)(a3 + 128);
    v12 = *(_OWORD *)(a3 + 80);
    v11 = *(_OWORD *)(a3 + 96);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v10;
    *(_OWORD *)(a2 + 80) = v12;
    *(_OWORD *)(a2 + 96) = v11;
    v14 = *(_OWORD *)(a3 + 160);
    v13 = *(_OWORD *)(a3 + 176);
    v15 = *(_OWORD *)(a3 + 144);
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v14;
    *(_OWORD *)(a2 + 176) = v13;
    *(_OWORD *)(a2 + 144) = v15;
    v16 = *(_OWORD *)(a3 + 16);
    v17 = *(_OWORD *)(a3 + 32);
    v18 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v18;
    *(_OWORD *)(a2 + 16) = v16;
    *(_OWORD *)(a2 + 32) = v17;
    *(_OWORD *)(a3 + 160) = v91;
    *(_OWORD *)(a3 + 176) = v95;
    *(_QWORD *)(a3 + 192) = v99;
    *(_OWORD *)(a3 + 96) = v75;
    *(_OWORD *)(a3 + 112) = v79;
    *(_OWORD *)(a3 + 128) = v83;
    *(_OWORD *)(a3 + 144) = v87;
    *(_OWORD *)a3 = v52;
    *(_OWORD *)(a3 + 16) = v56;
    *(_OWORD *)(a3 + 32) = v60;
    *(_OWORD *)(a3 + 48) = v64;
    *(_OWORD *)(a3 + 64) = v68;
    *(_OWORD *)(a3 + 80) = v72;
    if (sub_2237843D8(a2, a1))
    {
      v92 = *(_OWORD *)(a1 + 160);
      v96 = *(_OWORD *)(a1 + 176);
      v19 = *(_QWORD *)(a1 + 192);
      v76 = *(_OWORD *)(a1 + 96);
      v80 = *(_OWORD *)(a1 + 112);
      v84 = *(_OWORD *)(a1 + 128);
      v88 = *(_OWORD *)(a1 + 144);
      v20 = *(_OWORD *)a1;
      v21 = *(_OWORD *)(a1 + 16);
      v23 = *(_OWORD *)(a1 + 64);
      v22 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v24 = *(_OWORD *)(a2 + 128);
      v26 = *(_OWORD *)(a2 + 80);
      v25 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v24;
      *(_OWORD *)(a1 + 80) = v26;
      *(_OWORD *)(a1 + 96) = v25;
      v28 = *(_OWORD *)(a2 + 160);
      v27 = *(_OWORD *)(a2 + 176);
      v29 = *(_OWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      v53 = v20;
      v57 = v21;
      v61 = *(__n128 *)(a1 + 32);
      v65 = *(_OWORD *)(a1 + 48);
      v69 = v23;
      *(_OWORD *)(a1 + 160) = v28;
      *(_OWORD *)(a1 + 176) = v27;
      *(_OWORD *)(a1 + 144) = v29;
      v30 = *(_OWORD *)(a2 + 16);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v32;
      *(_OWORD *)(a1 + 16) = v30;
      *(_OWORD *)(a1 + 32) = v31;
      *(_OWORD *)a2 = v53;
      *(_OWORD *)(a2 + 144) = v88;
      *(_OWORD *)(a2 + 160) = v92;
      *(_OWORD *)(a2 + 176) = v96;
      *(_OWORD *)(a2 + 80) = v22;
      *(_OWORD *)(a2 + 96) = v76;
      *(_QWORD *)(a2 + 192) = v19;
      *(_OWORD *)(a2 + 112) = v80;
      *(_OWORD *)(a2 + 128) = v84;
      result = v61;
      *(_OWORD *)(a2 + 16) = v57;
      *(__n128 *)(a2 + 32) = v61;
      *(_OWORD *)(a2 + 48) = v65;
      *(_OWORD *)(a2 + 64) = v69;
    }
  }
  return result;
}

BOOL sub_223784938(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;

  v4 = 0x8F5C28F5C28F5C29 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 200);
      if (!sub_2237843D8(a2 - 200, a1))
        return 1;
      v7 = *(_OWORD *)(a1 + 176);
      v148 = *(_OWORD *)(a1 + 160);
      v149 = v7;
      v8 = *(_QWORD *)(a1 + 192);
      v9 = *(_OWORD *)(a1 + 112);
      v144 = *(_OWORD *)(a1 + 96);
      v145 = v9;
      v10 = *(_OWORD *)(a1 + 144);
      v146 = *(_OWORD *)(a1 + 128);
      v147 = v10;
      v11 = *(_OWORD *)(a1 + 16);
      v138 = *(_OWORD *)a1;
      v139 = v11;
      v12 = *(_OWORD *)(a1 + 48);
      v140 = *(_OWORD *)(a1 + 32);
      v141 = v12;
      v14 = *(_OWORD *)(a1 + 64);
      v13 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)a1 = *v6;
      v15 = *(_OWORD *)(a2 - 104);
      v16 = *(_OWORD *)(a2 - 72);
      v17 = *(_OWORD *)(a2 - 120);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 88);
      *(_OWORD *)(a1 + 128) = v16;
      *(_OWORD *)(a1 + 80) = v17;
      *(_OWORD *)(a1 + 96) = v15;
      v18 = *(_OWORD *)(a2 - 40);
      v19 = *(_OWORD *)(a2 - 24);
      v20 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 - 8);
      v142 = v14;
      v143 = v13;
      *(_OWORD *)(a1 + 160) = v18;
      *(_OWORD *)(a1 + 176) = v19;
      *(_OWORD *)(a1 + 144) = v20;
      v21 = *(_OWORD *)(a2 - 184);
      v22 = *(_OWORD *)(a2 - 168);
      v23 = *(_OWORD *)(a2 - 136);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 152);
      *(_OWORD *)(a1 + 64) = v23;
      *(_OWORD *)(a1 + 16) = v21;
      *(_OWORD *)(a1 + 32) = v22;
      v24 = v139;
      *v6 = v138;
      v25 = v146;
      *(_OWORD *)(a2 - 56) = v147;
      v26 = v149;
      *(_OWORD *)(a2 - 40) = v148;
      *(_OWORD *)(a2 - 24) = v26;
      v27 = v142;
      *(_OWORD *)(a2 - 120) = v143;
      v28 = v145;
      *(_OWORD *)(a2 - 104) = v144;
      v150 = v8;
      *(_QWORD *)(a2 - 8) = v8;
      *(_OWORD *)(a2 - 88) = v28;
      *(_OWORD *)(a2 - 72) = v25;
      *(_OWORD *)(a2 - 184) = v24;
      v29 = v141;
      *(_OWORD *)(a2 - 168) = v140;
      *(_OWORD *)(a2 - 152) = v29;
      result = 1;
      *(_OWORD *)(a2 - 136) = v27;
      return result;
    case 3uLL:
      sub_223784580(a1, a1 + 200, a2 - 200);
      return 1;
    case 4uLL:
      v62 = (__int128 *)(a1 + 200);
      v63 = (__int128 *)(a1 + 400);
      v64 = (__int128 *)(a2 - 200);
      sub_223784580(a1, a1 + 200, a1 + 400);
      if (!sub_2237843D8(a2 - 200, a1 + 400))
        return 1;
      v65 = *v63;
      v66 = *(_OWORD *)(a1 + 544);
      v67 = *(_OWORD *)(a1 + 576);
      v148 = *(_OWORD *)(a1 + 560);
      v149 = v67;
      v68 = *(_QWORD *)(a1 + 592);
      v69 = *(_OWORD *)(a1 + 480);
      v70 = *(_OWORD *)(a1 + 512);
      v71 = *(_OWORD *)(a1 + 528);
      v144 = *(_OWORD *)(a1 + 496);
      v145 = v70;
      v146 = v71;
      v147 = v66;
      v72 = *(_OWORD *)(a1 + 416);
      v73 = *(_OWORD *)(a1 + 432);
      v138 = v65;
      v139 = v72;
      v74 = *(_OWORD *)(a1 + 448);
      v75 = *(_OWORD *)(a1 + 464);
      v140 = v73;
      v141 = v74;
      *v63 = *v64;
      v76 = *(_OWORD *)(a2 - 104);
      v77 = *(_OWORD *)(a2 - 72);
      v78 = *(_OWORD *)(a2 - 120);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 - 88);
      *(_OWORD *)(a1 + 528) = v77;
      *(_OWORD *)(a1 + 480) = v78;
      *(_OWORD *)(a1 + 496) = v76;
      v79 = *(_OWORD *)(a2 - 40);
      v80 = *(_OWORD *)(a2 - 24);
      v81 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 - 8);
      v142 = v75;
      v143 = v69;
      *(_OWORD *)(a1 + 560) = v79;
      *(_OWORD *)(a1 + 576) = v80;
      *(_OWORD *)(a1 + 544) = v81;
      v82 = *(_OWORD *)(a2 - 184);
      v83 = *(_OWORD *)(a2 - 168);
      v84 = *(_OWORD *)(a2 - 136);
      *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 - 152);
      *(_OWORD *)(a1 + 464) = v84;
      *(_OWORD *)(a1 + 416) = v82;
      *(_OWORD *)(a1 + 432) = v83;
      v85 = v139;
      *v64 = v138;
      v86 = v146;
      *(_OWORD *)(a2 - 56) = v147;
      v87 = v149;
      *(_OWORD *)(a2 - 40) = v148;
      *(_OWORD *)(a2 - 24) = v87;
      v88 = v142;
      *(_OWORD *)(a2 - 120) = v143;
      v89 = v145;
      *(_OWORD *)(a2 - 104) = v144;
      v150 = v68;
      *(_QWORD *)(a2 - 8) = v68;
      *(_OWORD *)(a2 - 88) = v89;
      *(_OWORD *)(a2 - 72) = v86;
      *(_OWORD *)(a2 - 184) = v85;
      v90 = v141;
      *(_OWORD *)(a2 - 168) = v140;
      *(_OWORD *)(a2 - 152) = v90;
      *(_OWORD *)(a2 - 136) = v88;
      if (!sub_2237843D8(a1 + 400, a1 + 200))
        return 1;
      v91 = *(_OWORD *)(a1 + 216);
      v138 = *v62;
      v139 = v91;
      v92 = *(_OWORD *)(a1 + 248);
      v140 = *(_OWORD *)(a1 + 232);
      v141 = v92;
      v93 = *(_OWORD *)(a1 + 376);
      v148 = *(_OWORD *)(a1 + 360);
      v149 = v93;
      v94 = *(_OWORD *)(a1 + 312);
      v144 = *(_OWORD *)(a1 + 296);
      v145 = v94;
      v95 = *(_OWORD *)(a1 + 344);
      v146 = *(_OWORD *)(a1 + 328);
      v147 = v95;
      v96 = *(_OWORD *)(a1 + 280);
      v142 = *(_OWORD *)(a1 + 264);
      v143 = v96;
      *v62 = *v63;
      v97 = *(_OWORD *)(a1 + 544);
      v98 = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 376) = v98;
      v99 = *(_OWORD *)(a1 + 480);
      v100 = *(_OWORD *)(a1 + 512);
      v101 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 312) = v100;
      *(_OWORD *)(a1 + 328) = v101;
      *(_OWORD *)(a1 + 344) = v97;
      v102 = *(_OWORD *)(a1 + 432);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 232) = v102;
      v103 = *(_OWORD *)(a1 + 464);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 448);
      *(_OWORD *)(a1 + 264) = v103;
      *(_OWORD *)(a1 + 280) = v99;
      v104 = v139;
      *v63 = v138;
      v105 = v148;
      v106 = v149;
      v107 = v146;
      *(_OWORD *)(a1 + 544) = v147;
      *(_OWORD *)(a1 + 560) = v105;
      *(_OWORD *)(a1 + 576) = v106;
      v108 = v144;
      v109 = v145;
      v110 = v142;
      *(_OWORD *)(a1 + 480) = v143;
      *(_OWORD *)(a1 + 496) = v108;
      *(_OWORD *)(a1 + 512) = v109;
      *(_OWORD *)(a1 + 528) = v107;
      v111 = v140;
      v112 = v141;
      *(_OWORD *)(a1 + 416) = v104;
      *(_OWORD *)(a1 + 432) = v111;
      v150 = *(_QWORD *)(a1 + 392);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 592);
      *(_QWORD *)(a1 + 592) = v150;
      *(_OWORD *)(a1 + 448) = v112;
      *(_OWORD *)(a1 + 464) = v110;
      if (!sub_2237843D8(a1 + 200, a1))
        return 1;
      v113 = *(_OWORD *)(a1 + 176);
      v148 = *(_OWORD *)(a1 + 160);
      v149 = v113;
      v114 = *(_OWORD *)(a1 + 112);
      v144 = *(_OWORD *)(a1 + 96);
      v145 = v114;
      v115 = *(_OWORD *)(a1 + 144);
      v146 = *(_OWORD *)(a1 + 128);
      v147 = v115;
      v116 = *(_OWORD *)(a1 + 16);
      v138 = *(_OWORD *)a1;
      v139 = v116;
      v117 = *(_OWORD *)(a1 + 48);
      v140 = *(_OWORD *)(a1 + 32);
      v141 = v117;
      v118 = *(_OWORD *)(a1 + 80);
      v142 = *(_OWORD *)(a1 + 64);
      v143 = v118;
      v119 = *v62;
      v120 = *(_OWORD *)(a1 + 344);
      v121 = *(_OWORD *)(a1 + 376);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 360);
      *(_OWORD *)(a1 + 176) = v121;
      v122 = *(_OWORD *)(a1 + 280);
      v123 = *(_OWORD *)(a1 + 312);
      v124 = *(_OWORD *)(a1 + 328);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 296);
      *(_OWORD *)(a1 + 112) = v123;
      *(_OWORD *)(a1 + 128) = v124;
      *(_OWORD *)(a1 + 144) = v120;
      v125 = *(_OWORD *)(a1 + 216);
      v126 = *(_OWORD *)(a1 + 232);
      *(_OWORD *)a1 = v119;
      *(_OWORD *)(a1 + 16) = v125;
      v127 = *(_OWORD *)(a1 + 248);
      v128 = *(_OWORD *)(a1 + 264);
      *(_OWORD *)(a1 + 32) = v126;
      *(_OWORD *)(a1 + 48) = v127;
      *(_OWORD *)(a1 + 64) = v128;
      *(_OWORD *)(a1 + 80) = v122;
      v129 = v139;
      *v62 = v138;
      v130 = v148;
      v131 = v149;
      v132 = v146;
      *(_OWORD *)(a1 + 344) = v147;
      *(_OWORD *)(a1 + 360) = v130;
      *(_OWORD *)(a1 + 376) = v131;
      v133 = v144;
      v134 = v145;
      v135 = v142;
      *(_OWORD *)(a1 + 280) = v143;
      *(_OWORD *)(a1 + 296) = v133;
      *(_OWORD *)(a1 + 312) = v134;
      *(_OWORD *)(a1 + 328) = v132;
      v136 = v140;
      v137 = v141;
      *(_OWORD *)(a1 + 216) = v129;
      *(_OWORD *)(a1 + 232) = v136;
      v150 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 392);
      *(_QWORD *)(a1 + 392) = v150;
      result = 1;
      *(_OWORD *)(a1 + 248) = v137;
      *(_OWORD *)(a1 + 264) = v135;
      return result;
    case 5uLL:
      sub_223785064(a1, a1 + 200, a1 + 400, a1 + 600, a2 - 200);
      return 1;
    default:
      v30 = a1 + 400;
      sub_223784580(a1, a1 + 200, a1 + 400);
      v31 = a1 + 600;
      if (a1 + 600 == a2)
        return 1;
      v32 = 0;
      v33 = 0;
      break;
  }
  while (1)
  {
    if (sub_2237843D8(v31, v30))
    {
      v41 = *(_OWORD *)(v31 + 16);
      v138 = *(_OWORD *)v31;
      v42 = *(_OWORD *)(v31 + 160);
      v43 = *(_OWORD *)(v31 + 176);
      v44 = *(_OWORD *)(v31 + 128);
      v147 = *(_OWORD *)(v31 + 144);
      v148 = v42;
      v149 = v43;
      v45 = *(_OWORD *)(v31 + 96);
      v46 = *(_OWORD *)(v31 + 112);
      v47 = *(_OWORD *)(v31 + 64);
      v143 = *(_OWORD *)(v31 + 80);
      v144 = v45;
      v145 = v46;
      v146 = v44;
      v48 = *(_OWORD *)(v31 + 32);
      v49 = *(_OWORD *)(v31 + 48);
      v139 = v41;
      v140 = v48;
      v150 = *(_QWORD *)(v31 + 192);
      v50 = v32;
      v141 = v49;
      v142 = v47;
      do
      {
        v51 = a1 + v50;
        v52 = *(_OWORD *)(a1 + v50 + 416);
        *(_OWORD *)(a1 + v50 + 600) = *(_OWORD *)(a1 + v50 + 400);
        v53 = (_OWORD *)(a1 + v50 + 616);
        v54 = *(_OWORD *)(a1 + v50 + 560);
        v55 = *(_OWORD *)(a1 + v50 + 576);
        v56 = *(_OWORD *)(a1 + v50 + 528);
        v53[8] = *(_OWORD *)(a1 + v50 + 544);
        v53[9] = v54;
        v53[10] = v55;
        v57 = *(_OWORD *)(a1 + v50 + 496);
        v58 = *(_OWORD *)(a1 + v50 + 512);
        v59 = *(_OWORD *)(a1 + v50 + 464);
        v53[4] = *(_OWORD *)(a1 + v50 + 480);
        v53[5] = v57;
        v53[6] = v58;
        v53[7] = v56;
        v60 = *(_OWORD *)(a1 + v50 + 432);
        v61 = *(_OWORD *)(a1 + v50 + 448);
        *v53 = v52;
        v53[1] = v60;
        *(_QWORD *)(a1 + v50 + 792) = *(_QWORD *)(a1 + v50 + 592);
        v53[2] = v61;
        v53[3] = v59;
        if (v50 == -400)
        {
          v34 = (_OWORD *)a1;
          goto LABEL_7;
        }
        v50 -= 200;
      }
      while ((sub_2237843D8((uint64_t)&v138, v51 + 200) & 1) != 0);
      v34 = (_OWORD *)(a1 + v50 + 600);
LABEL_7:
      *v34 = v138;
      *(_QWORD *)(v51 + 592) = v150;
      v35 = v149;
      v36 = v147;
      *(_OWORD *)(v51 + 560) = v148;
      *(_OWORD *)(v51 + 576) = v35;
      v37 = v145;
      *(_OWORD *)(v51 + 528) = v146;
      *(_OWORD *)(v51 + 544) = v36;
      v38 = v143;
      *(_OWORD *)(v51 + 496) = v144;
      *(_OWORD *)(v51 + 512) = v37;
      v39 = v141;
      *(_OWORD *)(v51 + 464) = v142;
      *(_OWORD *)(v51 + 480) = v38;
      v40 = v140;
      ++v33;
      *(_OWORD *)(v51 + 416) = v139;
      *(_OWORD *)(v51 + 432) = v40;
      *(_OWORD *)(v51 + 448) = v39;
      if (v33 == 8)
        return v31 + 200 == a2;
    }
    v30 = v31;
    v32 += 200;
    v31 += 200;
    if (v31 == a2)
      return 1;
  }
}

uint64_t sub_223784F00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;

  if (*(_QWORD *)(a1 + 136) != *(_QWORD *)(a2 + 136))
  {
    v8 = *(int *)(a1 + 40);
    v9 = dword_22464D880;
    if (v8 > 5)
    {
      v10 = -1;
      v11 = *(int *)(a2 + 40);
      if (v11 <= 5)
        return v10 < v9[v11];
    }
    else
    {
      v10 = dword_22464D880[v8];
      v11 = *(int *)(a2 + 40);
      if (v11 <= 5)
        return v10 < v9[v11];
    }
    return v10 < -1;
  }
  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a2 + 144);
  if (v2 != v3)
  {
    if (v2 == -1)
    {
      v12 = *(_DWORD *)(a1 + 40);
      if (v12 == 1)
        return 0;
      if (v12 != 2)
      {
LABEL_18:
        v9 = dword_22464D868;
        if (v12 > 5)
        {
          v10 = -1;
          v11 = *(int *)(a2 + 40);
          if (v11 > 5)
            return v10 < -1;
        }
        else
        {
          v10 = dword_22464D868[v12];
          v11 = *(int *)(a2 + 40);
          if (v11 > 5)
            return v10 < -1;
        }
        return v10 < v9[v11];
      }
    }
    else
    {
      if (v3 != -1)
      {
LABEL_11:
        v12 = *(_DWORD *)(a1 + 40);
        goto LABEL_18;
      }
      v13 = *(_DWORD *)(a2 + 40);
      if (v13 != 1)
      {
        if (v13 != 2)
          goto LABEL_11;
        return 0;
      }
    }
    return 1;
  }
  v4 = *(int *)(a1 + 40);
  if (v4 > 5)
  {
    v5 = -1;
    v6 = *(int *)(a2 + 40);
    if (v6 > 5)
      return v5 < -1;
  }
  else
  {
    v5 = dword_22464D880[v4];
    v6 = *(int *)(a2 + 40);
    if (v6 > 5)
      return v5 < -1;
  }
  return v5 < dword_22464D880[v6];
}

__n128 sub_223785064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __n128 result;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __n128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;

  sub_223784580(a1, a2, a3);
  if (sub_2237843D8(a4, a3))
  {
    v164 = *(_OWORD *)(a3 + 160);
    v171 = *(_OWORD *)(a3 + 176);
    v178 = *(_QWORD *)(a3 + 192);
    v136 = *(_OWORD *)(a3 + 96);
    v143 = *(_OWORD *)(a3 + 112);
    v150 = *(_OWORD *)(a3 + 128);
    v157 = *(_OWORD *)(a3 + 144);
    v99 = *(_OWORD *)a3;
    v106 = *(_OWORD *)(a3 + 16);
    v113 = *(_OWORD *)(a3 + 32);
    v120 = *(_OWORD *)(a3 + 48);
    v127 = *(_OWORD *)(a3 + 64);
    v134 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v10 = *(_OWORD *)(a4 + 128);
    v12 = *(_OWORD *)(a4 + 80);
    v11 = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v10;
    *(_OWORD *)(a3 + 80) = v12;
    *(_OWORD *)(a3 + 96) = v11;
    v14 = *(_OWORD *)(a4 + 160);
    v13 = *(_OWORD *)(a4 + 176);
    v15 = *(_OWORD *)(a4 + 144);
    *(_QWORD *)(a3 + 192) = *(_QWORD *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v14;
    *(_OWORD *)(a3 + 176) = v13;
    *(_OWORD *)(a3 + 144) = v15;
    v16 = *(_OWORD *)(a4 + 16);
    v17 = *(_OWORD *)(a4 + 32);
    v18 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v18;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v17;
    *(_OWORD *)(a4 + 160) = v164;
    *(_OWORD *)(a4 + 176) = v171;
    *(_QWORD *)(a4 + 192) = v178;
    *(_OWORD *)(a4 + 96) = v136;
    *(_OWORD *)(a4 + 112) = v143;
    *(_OWORD *)(a4 + 128) = v150;
    *(_OWORD *)(a4 + 144) = v157;
    *(_OWORD *)a4 = v99;
    *(_OWORD *)(a4 + 16) = v106;
    *(_OWORD *)(a4 + 32) = v113;
    *(_OWORD *)(a4 + 48) = v120;
    *(_OWORD *)(a4 + 64) = v127;
    *(_OWORD *)(a4 + 80) = v134;
    if (sub_2237843D8(a3, a2))
    {
      v165 = *(_OWORD *)(a2 + 160);
      v172 = *(_OWORD *)(a2 + 176);
      v19 = *(_QWORD *)(a2 + 192);
      v137 = *(_OWORD *)(a2 + 96);
      v144 = *(_OWORD *)(a2 + 112);
      v151 = *(_OWORD *)(a2 + 128);
      v158 = *(_OWORD *)(a2 + 144);
      v20 = *(_OWORD *)a2;
      v21 = *(_OWORD *)(a2 + 16);
      v23 = *(_OWORD *)(a2 + 64);
      v22 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v24 = *(_OWORD *)(a3 + 128);
      v26 = *(_OWORD *)(a3 + 80);
      v25 = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(a2 + 128) = v24;
      *(_OWORD *)(a2 + 80) = v26;
      *(_OWORD *)(a2 + 96) = v25;
      v28 = *(_OWORD *)(a3 + 160);
      v27 = *(_OWORD *)(a3 + 176);
      v29 = *(_OWORD *)(a3 + 144);
      *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
      v100 = v20;
      v107 = v21;
      v114 = *(_OWORD *)(a2 + 32);
      v121 = *(_OWORD *)(a2 + 48);
      v128 = v23;
      *(_OWORD *)(a2 + 160) = v28;
      *(_OWORD *)(a2 + 176) = v27;
      *(_OWORD *)(a2 + 144) = v29;
      v30 = *(_OWORD *)(a3 + 16);
      v31 = *(_OWORD *)(a3 + 32);
      v32 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v32;
      *(_OWORD *)(a2 + 16) = v30;
      *(_OWORD *)(a2 + 32) = v31;
      *(_OWORD *)a3 = v100;
      *(_OWORD *)(a3 + 144) = v158;
      *(_OWORD *)(a3 + 160) = v165;
      *(_OWORD *)(a3 + 176) = v172;
      *(_OWORD *)(a3 + 80) = v22;
      *(_OWORD *)(a3 + 96) = v137;
      *(_QWORD *)(a3 + 192) = v19;
      *(_OWORD *)(a3 + 112) = v144;
      *(_OWORD *)(a3 + 128) = v151;
      *(_OWORD *)(a3 + 16) = v107;
      *(_OWORD *)(a3 + 32) = v114;
      *(_OWORD *)(a3 + 48) = v121;
      *(_OWORD *)(a3 + 64) = v128;
      if (sub_2237843D8(a2, a1))
      {
        v166 = *(_OWORD *)(a1 + 160);
        v173 = *(_OWORD *)(a1 + 176);
        v33 = *(_QWORD *)(a1 + 192);
        v138 = *(_OWORD *)(a1 + 96);
        v145 = *(_OWORD *)(a1 + 112);
        v152 = *(_OWORD *)(a1 + 128);
        v159 = *(_OWORD *)(a1 + 144);
        v34 = *(_OWORD *)a1;
        v35 = *(_OWORD *)(a1 + 16);
        v37 = *(_OWORD *)(a1 + 64);
        v36 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v38 = *(_OWORD *)(a2 + 128);
        v40 = *(_OWORD *)(a2 + 80);
        v39 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 128) = v38;
        *(_OWORD *)(a1 + 80) = v40;
        *(_OWORD *)(a1 + 96) = v39;
        v42 = *(_OWORD *)(a2 + 160);
        v41 = *(_OWORD *)(a2 + 176);
        v43 = *(_OWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        v101 = v34;
        v108 = v35;
        v115 = *(_OWORD *)(a1 + 32);
        v122 = *(_OWORD *)(a1 + 48);
        v129 = v37;
        *(_OWORD *)(a1 + 160) = v42;
        *(_OWORD *)(a1 + 176) = v41;
        *(_OWORD *)(a1 + 144) = v43;
        v44 = *(_OWORD *)(a2 + 16);
        v45 = *(_OWORD *)(a2 + 32);
        v46 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v46;
        *(_OWORD *)(a1 + 16) = v44;
        *(_OWORD *)(a1 + 32) = v45;
        *(_OWORD *)a2 = v101;
        *(_OWORD *)(a2 + 144) = v159;
        *(_OWORD *)(a2 + 160) = v166;
        *(_OWORD *)(a2 + 176) = v173;
        *(_OWORD *)(a2 + 80) = v36;
        *(_OWORD *)(a2 + 96) = v138;
        *(_QWORD *)(a2 + 192) = v33;
        *(_OWORD *)(a2 + 112) = v145;
        *(_OWORD *)(a2 + 128) = v152;
        *(_OWORD *)(a2 + 16) = v108;
        *(_OWORD *)(a2 + 32) = v115;
        *(_OWORD *)(a2 + 48) = v122;
        *(_OWORD *)(a2 + 64) = v129;
      }
    }
  }
  if (sub_2237843D8(a5, a4))
  {
    v167 = *(_OWORD *)(a4 + 160);
    v174 = *(_OWORD *)(a4 + 176);
    v179 = *(_QWORD *)(a4 + 192);
    v139 = *(_OWORD *)(a4 + 96);
    v146 = *(_OWORD *)(a4 + 112);
    v153 = *(_OWORD *)(a4 + 128);
    v160 = *(_OWORD *)(a4 + 144);
    v102 = *(_OWORD *)a4;
    v109 = *(_OWORD *)(a4 + 16);
    v116 = *(_OWORD *)(a4 + 32);
    v123 = *(_OWORD *)(a4 + 48);
    v130 = *(_OWORD *)(a4 + 64);
    v135 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    v48 = *(_OWORD *)(a5 + 128);
    v50 = *(_OWORD *)(a5 + 80);
    v49 = *(_OWORD *)(a5 + 96);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(a4 + 128) = v48;
    *(_OWORD *)(a4 + 80) = v50;
    *(_OWORD *)(a4 + 96) = v49;
    v52 = *(_OWORD *)(a5 + 160);
    v51 = *(_OWORD *)(a5 + 176);
    v53 = *(_OWORD *)(a5 + 144);
    *(_QWORD *)(a4 + 192) = *(_QWORD *)(a5 + 192);
    *(_OWORD *)(a4 + 160) = v52;
    *(_OWORD *)(a4 + 176) = v51;
    *(_OWORD *)(a4 + 144) = v53;
    v54 = *(_OWORD *)(a5 + 16);
    v55 = *(_OWORD *)(a5 + 32);
    v56 = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = v56;
    *(_OWORD *)(a4 + 16) = v54;
    *(_OWORD *)(a4 + 32) = v55;
    *(_OWORD *)(a5 + 160) = v167;
    *(_OWORD *)(a5 + 176) = v174;
    *(_QWORD *)(a5 + 192) = v179;
    *(_OWORD *)(a5 + 96) = v139;
    *(_OWORD *)(a5 + 112) = v146;
    *(_OWORD *)(a5 + 128) = v153;
    *(_OWORD *)(a5 + 144) = v160;
    *(_OWORD *)a5 = v102;
    *(_OWORD *)(a5 + 16) = v109;
    *(_OWORD *)(a5 + 32) = v116;
    *(_OWORD *)(a5 + 48) = v123;
    *(_OWORD *)(a5 + 64) = v130;
    *(_OWORD *)(a5 + 80) = v135;
    if (sub_2237843D8(a4, a3))
    {
      v168 = *(_OWORD *)(a3 + 160);
      v175 = *(_OWORD *)(a3 + 176);
      v57 = *(_QWORD *)(a3 + 192);
      v140 = *(_OWORD *)(a3 + 96);
      v147 = *(_OWORD *)(a3 + 112);
      v154 = *(_OWORD *)(a3 + 128);
      v161 = *(_OWORD *)(a3 + 144);
      v58 = *(_OWORD *)a3;
      v59 = *(_OWORD *)(a3 + 16);
      v61 = *(_OWORD *)(a3 + 64);
      v60 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      v62 = *(_OWORD *)(a4 + 128);
      v64 = *(_OWORD *)(a4 + 80);
      v63 = *(_OWORD *)(a4 + 96);
      *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
      *(_OWORD *)(a3 + 128) = v62;
      *(_OWORD *)(a3 + 80) = v64;
      *(_OWORD *)(a3 + 96) = v63;
      v66 = *(_OWORD *)(a4 + 160);
      v65 = *(_OWORD *)(a4 + 176);
      v67 = *(_OWORD *)(a4 + 144);
      *(_QWORD *)(a3 + 192) = *(_QWORD *)(a4 + 192);
      v103 = v58;
      v110 = v59;
      v117 = *(_OWORD *)(a3 + 32);
      v124 = *(_OWORD *)(a3 + 48);
      v131 = v61;
      *(_OWORD *)(a3 + 160) = v66;
      *(_OWORD *)(a3 + 176) = v65;
      *(_OWORD *)(a3 + 144) = v67;
      v68 = *(_OWORD *)(a4 + 16);
      v69 = *(_OWORD *)(a4 + 32);
      v70 = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 64) = v70;
      *(_OWORD *)(a3 + 16) = v68;
      *(_OWORD *)(a3 + 32) = v69;
      *(_OWORD *)a4 = v103;
      *(_OWORD *)(a4 + 144) = v161;
      *(_OWORD *)(a4 + 160) = v168;
      *(_OWORD *)(a4 + 176) = v175;
      *(_OWORD *)(a4 + 80) = v60;
      *(_OWORD *)(a4 + 96) = v140;
      *(_QWORD *)(a4 + 192) = v57;
      *(_OWORD *)(a4 + 112) = v147;
      *(_OWORD *)(a4 + 128) = v154;
      *(_OWORD *)(a4 + 16) = v110;
      *(_OWORD *)(a4 + 32) = v117;
      *(_OWORD *)(a4 + 48) = v124;
      *(_OWORD *)(a4 + 64) = v131;
      if (sub_2237843D8(a3, a2))
      {
        v169 = *(_OWORD *)(a2 + 160);
        v176 = *(_OWORD *)(a2 + 176);
        v71 = *(_QWORD *)(a2 + 192);
        v141 = *(_OWORD *)(a2 + 96);
        v148 = *(_OWORD *)(a2 + 112);
        v155 = *(_OWORD *)(a2 + 128);
        v162 = *(_OWORD *)(a2 + 144);
        v72 = *(_OWORD *)a2;
        v73 = *(_OWORD *)(a2 + 16);
        v75 = *(_OWORD *)(a2 + 64);
        v74 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        v76 = *(_OWORD *)(a3 + 128);
        v78 = *(_OWORD *)(a3 + 80);
        v77 = *(_OWORD *)(a3 + 96);
        *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
        *(_OWORD *)(a2 + 128) = v76;
        *(_OWORD *)(a2 + 80) = v78;
        *(_OWORD *)(a2 + 96) = v77;
        v80 = *(_OWORD *)(a3 + 160);
        v79 = *(_OWORD *)(a3 + 176);
        v81 = *(_OWORD *)(a3 + 144);
        *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
        v104 = v72;
        v111 = v73;
        v118 = *(_OWORD *)(a2 + 32);
        v125 = *(_OWORD *)(a2 + 48);
        v132 = v75;
        *(_OWORD *)(a2 + 160) = v80;
        *(_OWORD *)(a2 + 176) = v79;
        *(_OWORD *)(a2 + 144) = v81;
        v82 = *(_OWORD *)(a3 + 16);
        v83 = *(_OWORD *)(a3 + 32);
        v84 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 64) = v84;
        *(_OWORD *)(a2 + 16) = v82;
        *(_OWORD *)(a2 + 32) = v83;
        *(_OWORD *)a3 = v104;
        *(_OWORD *)(a3 + 144) = v162;
        *(_OWORD *)(a3 + 160) = v169;
        *(_OWORD *)(a3 + 176) = v176;
        *(_OWORD *)(a3 + 80) = v74;
        *(_OWORD *)(a3 + 96) = v141;
        *(_QWORD *)(a3 + 192) = v71;
        *(_OWORD *)(a3 + 112) = v148;
        *(_OWORD *)(a3 + 128) = v155;
        *(_OWORD *)(a3 + 16) = v111;
        *(_OWORD *)(a3 + 32) = v118;
        *(_OWORD *)(a3 + 48) = v125;
        *(_OWORD *)(a3 + 64) = v132;
        if (sub_2237843D8(a2, a1))
        {
          v170 = *(_OWORD *)(a1 + 160);
          v177 = *(_OWORD *)(a1 + 176);
          v85 = *(_QWORD *)(a1 + 192);
          v142 = *(_OWORD *)(a1 + 96);
          v149 = *(_OWORD *)(a1 + 112);
          v156 = *(_OWORD *)(a1 + 128);
          v163 = *(_OWORD *)(a1 + 144);
          v86 = *(_OWORD *)a1;
          v87 = *(_OWORD *)(a1 + 16);
          v89 = *(_OWORD *)(a1 + 64);
          v88 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v90 = *(_OWORD *)(a2 + 128);
          v92 = *(_OWORD *)(a2 + 80);
          v91 = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 128) = v90;
          *(_OWORD *)(a1 + 80) = v92;
          *(_OWORD *)(a1 + 96) = v91;
          v94 = *(_OWORD *)(a2 + 160);
          v93 = *(_OWORD *)(a2 + 176);
          v95 = *(_OWORD *)(a2 + 144);
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
          v105 = v86;
          v112 = v87;
          v119 = *(__n128 *)(a1 + 32);
          v126 = *(_OWORD *)(a1 + 48);
          v133 = v89;
          *(_OWORD *)(a1 + 160) = v94;
          *(_OWORD *)(a1 + 176) = v93;
          *(_OWORD *)(a1 + 144) = v95;
          v96 = *(_OWORD *)(a2 + 16);
          v97 = *(_OWORD *)(a2 + 32);
          v98 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 64) = v98;
          *(_OWORD *)(a1 + 16) = v96;
          *(_OWORD *)(a1 + 32) = v97;
          *(_OWORD *)a2 = v105;
          *(_OWORD *)(a2 + 144) = v163;
          *(_OWORD *)(a2 + 160) = v170;
          *(_OWORD *)(a2 + 176) = v177;
          *(_OWORD *)(a2 + 80) = v88;
          *(_OWORD *)(a2 + 96) = v142;
          *(_QWORD *)(a2 + 192) = v85;
          *(_OWORD *)(a2 + 112) = v149;
          *(_OWORD *)(a2 + 128) = v156;
          result = v119;
          *(_OWORD *)(a2 + 16) = v112;
          *(__n128 *)(a2 + 32) = v119;
          *(_OWORD *)(a2 + 48) = v126;
          *(_OWORD *)(a2 + 64) = v133;
        }
      }
    }
  }
  return result;
}

double sub_223785600(unint64_t a1, uint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  __n128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64x2_t v61;
  unint64_t v62;
  int64x2_t v63;
  int64x2_t v64;
  unint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64x2_t v70;
  int64x2_t v71;
  unint64_t v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int64x2_t v81;
  __n128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __n128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __n128 v106;
  __n128 v107;
  __int128 v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  int64_t v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  int64_t v122;
  uint64_t v123;
  char v124;
  double v125;
  int64_t v126;
  uint64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  uint64_t v131;
  int64_t v132;
  int64_t v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  int64_t v137;
  unint64_t v138;
  int64x2_t v139;
  int64x2_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int64x2_t v145;
  int64x2_t v146;
  unint64_t v147;
  BOOL v148;
  int v149;
  int64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  char v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int64x2_t v165;
  int64x2_t v166;
  unint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int64x2_t v172;
  int64x2_t v173;
  unint64_t v174;
  BOOL v175;
  int v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  int8x16_t *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __n128 v197;
  __int128 v198;
  __int128 v199;
  BOOL v200;
  __n128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  unint64_t v210;
  int v211;
  unint64_t v212;
  __n128 v213;
  __n128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __n128 v237;
  __n128 v238;
  __int128 v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  BOOL v243;
  uint64_t v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int64x2_t v249;
  unint64_t v250;
  int64x2_t v251;
  int64x2_t v252;
  unint64_t v253;
  const char *imp;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  int64x2_t v258;
  int64x2_t v259;
  unint64_t v260;
  BOOL v261;
  int v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  BOOL v270;
  uint64_t v271;
  double v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int64x2_t v276;
  unint64_t v277;
  int64x2_t v278;
  int64x2_t v279;
  unint64_t v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  int64x2_t v285;
  int64x2_t v286;
  unint64_t v287;
  BOOL v288;
  int v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  int8x16_t *v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __n128 v312;
  __int128 v313;
  __int128 v314;
  __n128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  __n128 v337;
  __int128 v338;
  int8x16_t *v339;
  int8x16_t *v340;
  int8x16_t v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __n128 v347;
  __n128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  __n128 v366;
  __n128 v367;
  __int128 v368;
  __n128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __n128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __n128 v389;
  __int128 v390;
  __n128 v391;
  __int128 v392;
  __int128 v393;
  __n128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __n128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  uint64_t v418;
  uint64_t v419;
  int64_t v420;
  int64_t v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __n128 v428;
  __int128 v429;
  int64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __n128 v441;
  __n128 v442;
  __int128 v443;
  uint64_t v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __n128 v463;
  __int128 v464;
  uint64_t v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __n128 v471;
  uint64_t v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  uint64_t v486;
  BOOL v487;
  uint64_t v488;
  BOOL v489;
  uint64_t v490;
  double v491;
  double v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int64x2_t v496;
  unint64_t v497;
  int64x2_t v498;
  int64x2_t v499;
  unint64_t v500;
  const char *v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  int64x2_t v505;
  int64x2_t v506;
  unint64_t v507;
  int v508;
  uint64_t v509;
  const char *v510;
  uint64_t v511;
  uint64_t v512;
  int64_t v513;
  unint64_t v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  uint64_t v523;
  __int128 v524;
  __int128 v525;
  __n128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  unint64_t v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  __n128 *v546;
  int8x16_t *v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __n128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  uint64_t v562;
  __int128 v563;
  __int128 v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __n128 v574;
  __n128 v575;
  __int128 v576;
  uint64_t v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __n128 v593;
  __int128 v594;
  uint64_t v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __n128 v602;
  __int128 v603;
  int8x16_t *v604;
  __n128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  unint64_t v612;
  unint64_t v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  uint64_t v620;
  uint64_t v621;
  BOOL v622;
  uint64_t v623;
  double v624;
  double v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  int64x2_t v629;
  unint64_t v630;
  int64x2_t v631;
  int64x2_t v632;
  unint64_t v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  int64x2_t v638;
  int64x2_t v639;
  unint64_t v640;
  BOOL v641;
  int v642;
  uint64_t v643;
  const char *v644;
  uint64_t v645;
  uint64_t v646;
  std::logic_error *v647;
  std::logic_error *v648;
  std::logic_error *v649;
  std::logic_error *v650;
  std::logic_error *v651;
  std::logic_error *v652;
  std::logic_error *v653;
  std::logic_error *v654;
  int8x16_t *v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v661;
  int8x16_t v662;
  __n128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  _BYTE v670[64];
  uint64_t v671;
  int8x16_t v672;
  __n128 v673;
  __n128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  _BYTE v682[32];
  uint64_t v683;
  int64_t v684;
  uint64_t v685;
  int64_t v686;
  uint64_t v687;
  std::logic_error v688;

uint64_t sub_223788278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v15;
  __int128 v16;
  __int128 v17;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a2 + 128);
  if (v2 != v3)
    return v2 < v3;
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a2 + 136);
  v9 = __OFSUB__(v6, v7);
  v8 = v6 - v7 < 0;
  if (v6 != v7)
    goto LABEL_9;
  v10 = *(_QWORD *)(a1 + 144);
  v11 = *(_QWORD *)(a2 + 144);
  v9 = __OFSUB__(v10, v11);
  v8 = v10 - v11 < 0;
  if (v10 != v11
    || (v12 = *(_QWORD *)(a1 + 160),
        v13 = *(_QWORD *)(a2 + 160),
        v9 = __OFSUB__(v12, v13),
        v8 = v12 - v13 < 0,
        v12 != v13))
  {
LABEL_9:
    if (v8 == v9)
      goto LABEL_12;
    return 1;
  }
  if (*(_QWORD *)(a1 + 152) < *(_QWORD *)(a2 + 152))
    return 1;
LABEL_12:
  if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a2 + 152)
    || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a2 + 144)
    || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a2 + 160)
    || v6 != v7)
  {
    return 0;
  }
  v15 = (__int128 *)(a2 + 168);
  if (vabdd_f64(*(double *)(a1 + 184), *(double *)(a2 + 184)) < 50.0
    && (v17 = *(_OWORD *)(a1 + 168),
        sub_2233E5290((int64_t)&v17),
        v16 = *v15,
        sub_2233E5290((int64_t)&v16),
        v17 == v16)
    && *(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    return sub_223788DA0(a1, a2);
  }
  else
  {
    return sub_2233E5070((double *)(a1 + 168), (double *)(a2 + 168));
  }
}

__n128 sub_223788420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  int v7;
  __n128 result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __n128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v6 = sub_223788278(a2, a1);
  v7 = sub_223788278(a3, a2);
  if ((v6 & 1) != 0)
  {
    v9 = a1 + 16;
    if (v7)
    {
      v90 = *(_OWORD *)(a1 + 160);
      v94 = *(_OWORD *)(a1 + 176);
      v74 = *(_OWORD *)(a1 + 96);
      v78 = *(_OWORD *)(a1 + 112);
      v98 = *(_QWORD *)(a1 + 192);
      v82 = *(_OWORD *)(a1 + 128);
      v86 = *(_OWORD *)(a1 + 144);
      v51 = *(_OWORD *)a1;
      v55 = *(_OWORD *)v9;
      v59 = *(_OWORD *)(a1 + 32);
      v63 = *(_OWORD *)(a1 + 48);
      v67 = *(_OWORD *)(a1 + 64);
      v71 = *(__n128 *)(a1 + 80);
      *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_10:
      v42 = *(_OWORD *)(a3 + 128);
      v44 = *(_OWORD *)(a3 + 80);
      v43 = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(v9 + 96) = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(v9 + 112) = v42;
      *(_OWORD *)(v9 + 64) = v44;
      *(_OWORD *)(v9 + 80) = v43;
      v46 = *(_OWORD *)(a3 + 160);
      v45 = *(_OWORD *)(a3 + 176);
      v47 = *(_OWORD *)(a3 + 144);
      *(_QWORD *)(v9 + 176) = *(_QWORD *)(a3 + 192);
      *(_OWORD *)(v9 + 144) = v46;
      *(_OWORD *)(v9 + 160) = v45;
      *(_OWORD *)(v9 + 128) = v47;
      v48 = *(_OWORD *)(a3 + 16);
      v49 = *(_OWORD *)(a3 + 32);
      v50 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v9 + 48) = v50;
      *(_OWORD *)v9 = v48;
      *(_OWORD *)(v9 + 16) = v49;
      *(_OWORD *)(a3 + 160) = v90;
      *(_OWORD *)(a3 + 176) = v94;
      *(_QWORD *)(a3 + 192) = v98;
      *(_OWORD *)(a3 + 96) = v74;
      *(_OWORD *)(a3 + 112) = v78;
      *(_OWORD *)(a3 + 128) = v82;
      *(_OWORD *)(a3 + 144) = v86;
      *(_OWORD *)a3 = v51;
      *(_OWORD *)(a3 + 16) = v55;
      *(_OWORD *)(a3 + 32) = v59;
      *(_OWORD *)(a3 + 48) = v63;
      result = v71;
      *(_OWORD *)(a3 + 64) = v67;
      *(__n128 *)(a3 + 80) = v71;
      return result;
    }
    v93 = *(_OWORD *)(a1 + 160);
    v97 = *(_OWORD *)(a1 + 176);
    v77 = *(_OWORD *)(a1 + 96);
    v81 = *(_OWORD *)(a1 + 112);
    v100 = *(_QWORD *)(a1 + 192);
    v85 = *(_OWORD *)(a1 + 128);
    v89 = *(_OWORD *)(a1 + 144);
    v54 = *(_OWORD *)a1;
    v58 = *(_OWORD *)v9;
    v62 = *(_OWORD *)(a1 + 32);
    v66 = *(_OWORD *)(a1 + 48);
    v70 = *(_OWORD *)(a1 + 64);
    v73 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v33 = *(_OWORD *)(a2 + 128);
    v35 = *(_OWORD *)(a2 + 80);
    v34 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v33;
    *(_OWORD *)(a1 + 80) = v35;
    *(_OWORD *)(a1 + 96) = v34;
    v37 = *(_OWORD *)(a2 + 160);
    v36 = *(_OWORD *)(a2 + 176);
    v38 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v37;
    *(_OWORD *)(a1 + 176) = v36;
    *(_OWORD *)(a1 + 144) = v38;
    v39 = *(_OWORD *)(a2 + 16);
    v40 = *(_OWORD *)(a2 + 32);
    v41 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v41;
    *(_OWORD *)v9 = v39;
    *(_OWORD *)(a1 + 32) = v40;
    *(_OWORD *)(a2 + 160) = v93;
    *(_OWORD *)(a2 + 176) = v97;
    *(_QWORD *)(a2 + 192) = v100;
    *(_OWORD *)(a2 + 96) = v77;
    *(_OWORD *)(a2 + 112) = v81;
    *(_OWORD *)(a2 + 128) = v85;
    *(_OWORD *)(a2 + 144) = v89;
    *(_OWORD *)a2 = v54;
    *(_OWORD *)(a2 + 16) = v58;
    *(_OWORD *)(a2 + 32) = v62;
    *(_OWORD *)(a2 + 48) = v66;
    *(_OWORD *)(a2 + 64) = v70;
    *(_OWORD *)(a2 + 80) = v73;
    if (sub_223788278(a3, a2))
    {
      v9 = a2 + 16;
      v90 = *(_OWORD *)(a2 + 160);
      v94 = *(_OWORD *)(a2 + 176);
      v74 = *(_OWORD *)(a2 + 96);
      v78 = *(_OWORD *)(a2 + 112);
      v98 = *(_QWORD *)(a2 + 192);
      v82 = *(_OWORD *)(a2 + 128);
      v86 = *(_OWORD *)(a2 + 144);
      v51 = *(_OWORD *)a2;
      v55 = *(_OWORD *)(a2 + 16);
      v59 = *(_OWORD *)(a2 + 32);
      v63 = *(_OWORD *)(a2 + 48);
      v67 = *(_OWORD *)(a2 + 64);
      v71 = *(__n128 *)(a2 + 80);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_10;
    }
  }
  else if (v7)
  {
    v91 = *(_OWORD *)(a2 + 160);
    v95 = *(_OWORD *)(a2 + 176);
    v99 = *(_QWORD *)(a2 + 192);
    v75 = *(_OWORD *)(a2 + 96);
    v79 = *(_OWORD *)(a2 + 112);
    v83 = *(_OWORD *)(a2 + 128);
    v87 = *(_OWORD *)(a2 + 144);
    v52 = *(_OWORD *)a2;
    v56 = *(_OWORD *)(a2 + 16);
    v60 = *(_OWORD *)(a2 + 32);
    v64 = *(_OWORD *)(a2 + 48);
    v68 = *(_OWORD *)(a2 + 64);
    v72 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v10 = *(_OWORD *)(a3 + 128);
    v12 = *(_OWORD *)(a3 + 80);
    v11 = *(_OWORD *)(a3 + 96);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v10;
    *(_OWORD *)(a2 + 80) = v12;
    *(_OWORD *)(a2 + 96) = v11;
    v14 = *(_OWORD *)(a3 + 160);
    v13 = *(_OWORD *)(a3 + 176);
    v15 = *(_OWORD *)(a3 + 144);
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v14;
    *(_OWORD *)(a2 + 176) = v13;
    *(_OWORD *)(a2 + 144) = v15;
    v16 = *(_OWORD *)(a3 + 16);
    v17 = *(_OWORD *)(a3 + 32);
    v18 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v18;
    *(_OWORD *)(a2 + 16) = v16;
    *(_OWORD *)(a2 + 32) = v17;
    *(_OWORD *)(a3 + 160) = v91;
    *(_OWORD *)(a3 + 176) = v95;
    *(_QWORD *)(a3 + 192) = v99;
    *(_OWORD *)(a3 + 96) = v75;
    *(_OWORD *)(a3 + 112) = v79;
    *(_OWORD *)(a3 + 128) = v83;
    *(_OWORD *)(a3 + 144) = v87;
    *(_OWORD *)a3 = v52;
    *(_OWORD *)(a3 + 16) = v56;
    *(_OWORD *)(a3 + 32) = v60;
    *(_OWORD *)(a3 + 48) = v64;
    *(_OWORD *)(a3 + 64) = v68;
    *(_OWORD *)(a3 + 80) = v72;
    if (sub_223788278(a2, a1))
    {
      v92 = *(_OWORD *)(a1 + 160);
      v96 = *(_OWORD *)(a1 + 176);
      v19 = *(_QWORD *)(a1 + 192);
      v76 = *(_OWORD *)(a1 + 96);
      v80 = *(_OWORD *)(a1 + 112);
      v84 = *(_OWORD *)(a1 + 128);
      v88 = *(_OWORD *)(a1 + 144);
      v20 = *(_OWORD *)a1;
      v21 = *(_OWORD *)(a1 + 16);
      v23 = *(_OWORD *)(a1 + 64);
      v22 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v24 = *(_OWORD *)(a2 + 128);
      v26 = *(_OWORD *)(a2 + 80);
      v25 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v24;
      *(_OWORD *)(a1 + 80) = v26;
      *(_OWORD *)(a1 + 96) = v25;
      v28 = *(_OWORD *)(a2 + 160);
      v27 = *(_OWORD *)(a2 + 176);
      v29 = *(_OWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      v53 = v20;
      v57 = v21;
      v61 = *(__n128 *)(a1 + 32);
      v65 = *(_OWORD *)(a1 + 48);
      v69 = v23;
      *(_OWORD *)(a1 + 160) = v28;
      *(_OWORD *)(a1 + 176) = v27;
      *(_OWORD *)(a1 + 144) = v29;
      v30 = *(_OWORD *)(a2 + 16);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v32;
      *(_OWORD *)(a1 + 16) = v30;
      *(_OWORD *)(a1 + 32) = v31;
      *(_OWORD *)a2 = v53;
      *(_OWORD *)(a2 + 144) = v88;
      *(_OWORD *)(a2 + 160) = v92;
      *(_OWORD *)(a2 + 176) = v96;
      *(_OWORD *)(a2 + 80) = v22;
      *(_OWORD *)(a2 + 96) = v76;
      *(_QWORD *)(a2 + 192) = v19;
      *(_OWORD *)(a2 + 112) = v80;
      *(_OWORD *)(a2 + 128) = v84;
      result = v61;
      *(_OWORD *)(a2 + 16) = v57;
      *(__n128 *)(a2 + 32) = v61;
      *(_OWORD *)(a2 + 48) = v65;
      *(_OWORD *)(a2 + 64) = v69;
    }
  }
  return result;
}

BOOL sub_2237887D8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;

  v4 = 0x8F5C28F5C28F5C29 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 200);
      if (!sub_223788278(a2 - 200, a1))
        return 1;
      v7 = *(_OWORD *)(a1 + 176);
      v148 = *(_OWORD *)(a1 + 160);
      v149 = v7;
      v8 = *(_QWORD *)(a1 + 192);
      v9 = *(_OWORD *)(a1 + 112);
      v144 = *(_OWORD *)(a1 + 96);
      v145 = v9;
      v10 = *(_OWORD *)(a1 + 144);
      v146 = *(_OWORD *)(a1 + 128);
      v147 = v10;
      v11 = *(_OWORD *)(a1 + 16);
      v138 = *(_OWORD *)a1;
      v139 = v11;
      v12 = *(_OWORD *)(a1 + 48);
      v140 = *(_OWORD *)(a1 + 32);
      v141 = v12;
      v14 = *(_OWORD *)(a1 + 64);
      v13 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)a1 = *v6;
      v15 = *(_OWORD *)(a2 - 104);
      v16 = *(_OWORD *)(a2 - 72);
      v17 = *(_OWORD *)(a2 - 120);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 88);
      *(_OWORD *)(a1 + 128) = v16;
      *(_OWORD *)(a1 + 80) = v17;
      *(_OWORD *)(a1 + 96) = v15;
      v18 = *(_OWORD *)(a2 - 40);
      v19 = *(_OWORD *)(a2 - 24);
      v20 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 - 8);
      v142 = v14;
      v143 = v13;
      *(_OWORD *)(a1 + 160) = v18;
      *(_OWORD *)(a1 + 176) = v19;
      *(_OWORD *)(a1 + 144) = v20;
      v21 = *(_OWORD *)(a2 - 184);
      v22 = *(_OWORD *)(a2 - 168);
      v23 = *(_OWORD *)(a2 - 136);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 152);
      *(_OWORD *)(a1 + 64) = v23;
      *(_OWORD *)(a1 + 16) = v21;
      *(_OWORD *)(a1 + 32) = v22;
      v24 = v139;
      *v6 = v138;
      v25 = v146;
      *(_OWORD *)(a2 - 56) = v147;
      v26 = v149;
      *(_OWORD *)(a2 - 40) = v148;
      *(_OWORD *)(a2 - 24) = v26;
      v27 = v142;
      *(_OWORD *)(a2 - 120) = v143;
      v28 = v145;
      *(_OWORD *)(a2 - 104) = v144;
      v150 = v8;
      *(_QWORD *)(a2 - 8) = v8;
      *(_OWORD *)(a2 - 88) = v28;
      *(_OWORD *)(a2 - 72) = v25;
      *(_OWORD *)(a2 - 184) = v24;
      v29 = v141;
      *(_OWORD *)(a2 - 168) = v140;
      *(_OWORD *)(a2 - 152) = v29;
      result = 1;
      *(_OWORD *)(a2 - 136) = v27;
      return result;
    case 3uLL:
      sub_223788420(a1, a1 + 200, a2 - 200);
      return 1;
    case 4uLL:
      v62 = (__int128 *)(a1 + 200);
      v63 = (__int128 *)(a1 + 400);
      v64 = (__int128 *)(a2 - 200);
      sub_223788420(a1, a1 + 200, a1 + 400);
      if (!sub_223788278(a2 - 200, a1 + 400))
        return 1;
      v65 = *v63;
      v66 = *(_OWORD *)(a1 + 544);
      v67 = *(_OWORD *)(a1 + 576);
      v148 = *(_OWORD *)(a1 + 560);
      v149 = v67;
      v68 = *(_QWORD *)(a1 + 592);
      v69 = *(_OWORD *)(a1 + 480);
      v70 = *(_OWORD *)(a1 + 512);
      v71 = *(_OWORD *)(a1 + 528);
      v144 = *(_OWORD *)(a1 + 496);
      v145 = v70;
      v146 = v71;
      v147 = v66;
      v72 = *(_OWORD *)(a1 + 416);
      v73 = *(_OWORD *)(a1 + 432);
      v138 = v65;
      v139 = v72;
      v74 = *(_OWORD *)(a1 + 448);
      v75 = *(_OWORD *)(a1 + 464);
      v140 = v73;
      v141 = v74;
      *v63 = *v64;
      v76 = *(_OWORD *)(a2 - 104);
      v77 = *(_OWORD *)(a2 - 72);
      v78 = *(_OWORD *)(a2 - 120);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 - 88);
      *(_OWORD *)(a1 + 528) = v77;
      *(_OWORD *)(a1 + 480) = v78;
      *(_OWORD *)(a1 + 496) = v76;
      v79 = *(_OWORD *)(a2 - 40);
      v80 = *(_OWORD *)(a2 - 24);
      v81 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 - 8);
      v142 = v75;
      v143 = v69;
      *(_OWORD *)(a1 + 560) = v79;
      *(_OWORD *)(a1 + 576) = v80;
      *(_OWORD *)(a1 + 544) = v81;
      v82 = *(_OWORD *)(a2 - 184);
      v83 = *(_OWORD *)(a2 - 168);
      v84 = *(_OWORD *)(a2 - 136);
      *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 - 152);
      *(_OWORD *)(a1 + 464) = v84;
      *(_OWORD *)(a1 + 416) = v82;
      *(_OWORD *)(a1 + 432) = v83;
      v85 = v139;
      *v64 = v138;
      v86 = v146;
      *(_OWORD *)(a2 - 56) = v147;
      v87 = v149;
      *(_OWORD *)(a2 - 40) = v148;
      *(_OWORD *)(a2 - 24) = v87;
      v88 = v142;
      *(_OWORD *)(a2 - 120) = v143;
      v89 = v145;
      *(_OWORD *)(a2 - 104) = v144;
      v150 = v68;
      *(_QWORD *)(a2 - 8) = v68;
      *(_OWORD *)(a2 - 88) = v89;
      *(_OWORD *)(a2 - 72) = v86;
      *(_OWORD *)(a2 - 184) = v85;
      v90 = v141;
      *(_OWORD *)(a2 - 168) = v140;
      *(_OWORD *)(a2 - 152) = v90;
      *(_OWORD *)(a2 - 136) = v88;
      if (!sub_223788278(a1 + 400, a1 + 200))
        return 1;
      v91 = *(_OWORD *)(a1 + 216);
      v138 = *v62;
      v139 = v91;
      v92 = *(_OWORD *)(a1 + 248);
      v140 = *(_OWORD *)(a1 + 232);
      v141 = v92;
      v93 = *(_OWORD *)(a1 + 376);
      v148 = *(_OWORD *)(a1 + 360);
      v149 = v93;
      v94 = *(_OWORD *)(a1 + 312);
      v144 = *(_OWORD *)(a1 + 296);
      v145 = v94;
      v95 = *(_OWORD *)(a1 + 344);
      v146 = *(_OWORD *)(a1 + 328);
      v147 = v95;
      v96 = *(_OWORD *)(a1 + 280);
      v142 = *(_OWORD *)(a1 + 264);
      v143 = v96;
      *v62 = *v63;
      v97 = *(_OWORD *)(a1 + 544);
      v98 = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 376) = v98;
      v99 = *(_OWORD *)(a1 + 480);
      v100 = *(_OWORD *)(a1 + 512);
      v101 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 312) = v100;
      *(_OWORD *)(a1 + 328) = v101;
      *(_OWORD *)(a1 + 344) = v97;
      v102 = *(_OWORD *)(a1 + 432);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 232) = v102;
      v103 = *(_OWORD *)(a1 + 464);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 448);
      *(_OWORD *)(a1 + 264) = v103;
      *(_OWORD *)(a1 + 280) = v99;
      v104 = v139;
      *v63 = v138;
      v105 = v148;
      v106 = v149;
      v107 = v146;
      *(_OWORD *)(a1 + 544) = v147;
      *(_OWORD *)(a1 + 560) = v105;
      *(_OWORD *)(a1 + 576) = v106;
      v108 = v144;
      v109 = v145;
      v110 = v142;
      *(_OWORD *)(a1 + 480) = v143;
      *(_OWORD *)(a1 + 496) = v108;
      *(_OWORD *)(a1 + 512) = v109;
      *(_OWORD *)(a1 + 528) = v107;
      v111 = v140;
      v112 = v141;
      *(_OWORD *)(a1 + 416) = v104;
      *(_OWORD *)(a1 + 432) = v111;
      v150 = *(_QWORD *)(a1 + 392);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 592);
      *(_QWORD *)(a1 + 592) = v150;
      *(_OWORD *)(a1 + 448) = v112;
      *(_OWORD *)(a1 + 464) = v110;
      if (!sub_223788278(a1 + 200, a1))
        return 1;
      v113 = *(_OWORD *)(a1 + 176);
      v148 = *(_OWORD *)(a1 + 160);
      v149 = v113;
      v114 = *(_OWORD *)(a1 + 112);
      v144 = *(_OWORD *)(a1 + 96);
      v145 = v114;
      v115 = *(_OWORD *)(a1 + 144);
      v146 = *(_OWORD *)(a1 + 128);
      v147 = v115;
      v116 = *(_OWORD *)(a1 + 16);
      v138 = *(_OWORD *)a1;
      v139 = v116;
      v117 = *(_OWORD *)(a1 + 48);
      v140 = *(_OWORD *)(a1 + 32);
      v141 = v117;
      v118 = *(_OWORD *)(a1 + 80);
      v142 = *(_OWORD *)(a1 + 64);
      v143 = v118;
      v119 = *v62;
      v120 = *(_OWORD *)(a1 + 344);
      v121 = *(_OWORD *)(a1 + 376);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 360);
      *(_OWORD *)(a1 + 176) = v121;
      v122 = *(_OWORD *)(a1 + 280);
      v123 = *(_OWORD *)(a1 + 312);
      v124 = *(_OWORD *)(a1 + 328);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 296);
      *(_OWORD *)(a1 + 112) = v123;
      *(_OWORD *)(a1 + 128) = v124;
      *(_OWORD *)(a1 + 144) = v120;
      v125 = *(_OWORD *)(a1 + 216);
      v126 = *(_OWORD *)(a1 + 232);
      *(_OWORD *)a1 = v119;
      *(_OWORD *)(a1 + 16) = v125;
      v127 = *(_OWORD *)(a1 + 248);
      v128 = *(_OWORD *)(a1 + 264);
      *(_OWORD *)(a1 + 32) = v126;
      *(_OWORD *)(a1 + 48) = v127;
      *(_OWORD *)(a1 + 64) = v128;
      *(_OWORD *)(a1 + 80) = v122;
      v129 = v139;
      *v62 = v138;
      v130 = v148;
      v131 = v149;
      v132 = v146;
      *(_OWORD *)(a1 + 344) = v147;
      *(_OWORD *)(a1 + 360) = v130;
      *(_OWORD *)(a1 + 376) = v131;
      v133 = v144;
      v134 = v145;
      v135 = v142;
      *(_OWORD *)(a1 + 280) = v143;
      *(_OWORD *)(a1 + 296) = v133;
      *(_OWORD *)(a1 + 312) = v134;
      *(_OWORD *)(a1 + 328) = v132;
      v136 = v140;
      v137 = v141;
      *(_OWORD *)(a1 + 216) = v129;
      *(_OWORD *)(a1 + 232) = v136;
      v150 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 392);
      *(_QWORD *)(a1 + 392) = v150;
      result = 1;
      *(_OWORD *)(a1 + 248) = v137;
      *(_OWORD *)(a1 + 264) = v135;
      return result;
    case 5uLL:
      sub_223788F04(a1, a1 + 200, a1 + 400, a1 + 600, a2 - 200);
      return 1;
    default:
      v30 = a1 + 400;
      sub_223788420(a1, a1 + 200, a1 + 400);
      v31 = a1 + 600;
      if (a1 + 600 == a2)
        return 1;
      v32 = 0;
      v33 = 0;
      break;
  }
  while (1)
  {
    if (sub_223788278(v31, v30))
    {
      v41 = *(_OWORD *)(v31 + 16);
      v138 = *(_OWORD *)v31;
      v42 = *(_OWORD *)(v31 + 160);
      v43 = *(_OWORD *)(v31 + 176);
      v44 = *(_OWORD *)(v31 + 128);
      v147 = *(_OWORD *)(v31 + 144);
      v148 = v42;
      v149 = v43;
      v45 = *(_OWORD *)(v31 + 96);
      v46 = *(_OWORD *)(v31 + 112);
      v47 = *(_OWORD *)(v31 + 64);
      v143 = *(_OWORD *)(v31 + 80);
      v144 = v45;
      v145 = v46;
      v146 = v44;
      v48 = *(_OWORD *)(v31 + 32);
      v49 = *(_OWORD *)(v31 + 48);
      v139 = v41;
      v140 = v48;
      v150 = *(_QWORD *)(v31 + 192);
      v50 = v32;
      v141 = v49;
      v142 = v47;
      do
      {
        v51 = a1 + v50;
        v52 = *(_OWORD *)(a1 + v50 + 416);
        *(_OWORD *)(a1 + v50 + 600) = *(_OWORD *)(a1 + v50 + 400);
        v53 = (_OWORD *)(a1 + v50 + 616);
        v54 = *(_OWORD *)(a1 + v50 + 560);
        v55 = *(_OWORD *)(a1 + v50 + 576);
        v56 = *(_OWORD *)(a1 + v50 + 528);
        v53[8] = *(_OWORD *)(a1 + v50 + 544);
        v53[9] = v54;
        v53[10] = v55;
        v57 = *(_OWORD *)(a1 + v50 + 496);
        v58 = *(_OWORD *)(a1 + v50 + 512);
        v59 = *(_OWORD *)(a1 + v50 + 464);
        v53[4] = *(_OWORD *)(a1 + v50 + 480);
        v53[5] = v57;
        v53[6] = v58;
        v53[7] = v56;
        v60 = *(_OWORD *)(a1 + v50 + 432);
        v61 = *(_OWORD *)(a1 + v50 + 448);
        *v53 = v52;
        v53[1] = v60;
        *(_QWORD *)(a1 + v50 + 792) = *(_QWORD *)(a1 + v50 + 592);
        v53[2] = v61;
        v53[3] = v59;
        if (v50 == -400)
        {
          v34 = (_OWORD *)a1;
          goto LABEL_7;
        }
        v50 -= 200;
      }
      while ((sub_223788278((uint64_t)&v138, v51 + 200) & 1) != 0);
      v34 = (_OWORD *)(a1 + v50 + 600);
LABEL_7:
      *v34 = v138;
      *(_QWORD *)(v51 + 592) = v150;
      v35 = v149;
      v36 = v147;
      *(_OWORD *)(v51 + 560) = v148;
      *(_OWORD *)(v51 + 576) = v35;
      v37 = v145;
      *(_OWORD *)(v51 + 528) = v146;
      *(_OWORD *)(v51 + 544) = v36;
      v38 = v143;
      *(_OWORD *)(v51 + 496) = v144;
      *(_OWORD *)(v51 + 512) = v37;
      v39 = v141;
      *(_OWORD *)(v51 + 464) = v142;
      *(_OWORD *)(v51 + 480) = v38;
      v40 = v140;
      ++v33;
      *(_OWORD *)(v51 + 416) = v139;
      *(_OWORD *)(v51 + 432) = v40;
      *(_OWORD *)(v51 + 448) = v39;
      if (v33 == 8)
        return v31 + 200 == a2;
    }
    v30 = v31;
    v32 += 200;
    v31 += 200;
    if (v31 == a2)
      return 1;
  }
}

uint64_t sub_223788DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;

  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
  {
    v8 = *(int *)(a1 + 120);
    v9 = dword_22464D880;
    if (v8 > 5)
    {
      v10 = -1;
      v11 = *(int *)(a2 + 120);
      if (v11 <= 5)
        return v10 < v9[v11];
    }
    else
    {
      v10 = dword_22464D880[v8];
      v11 = *(int *)(a2 + 120);
      if (v11 <= 5)
        return v10 < v9[v11];
    }
    return v10 < -1;
  }
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a2 + 64);
  if (v2 != v3)
  {
    if (v2 == -1)
    {
      v12 = *(_DWORD *)(a1 + 120);
      if (v12 == 1)
        return 0;
      if (v12 != 2)
      {
LABEL_18:
        v9 = dword_22464D868;
        if (v12 > 5)
        {
          v10 = -1;
          v11 = *(int *)(a2 + 120);
          if (v11 > 5)
            return v10 < -1;
        }
        else
        {
          v10 = dword_22464D868[v12];
          v11 = *(int *)(a2 + 120);
          if (v11 > 5)
            return v10 < -1;
        }
        return v10 < v9[v11];
      }
    }
    else
    {
      if (v3 != -1)
      {
LABEL_11:
        v12 = *(_DWORD *)(a1 + 120);
        goto LABEL_18;
      }
      v13 = *(_DWORD *)(a2 + 120);
      if (v13 != 1)
      {
        if (v13 != 2)
          goto LABEL_11;
        return 0;
      }
    }
    return 1;
  }
  v4 = *(int *)(a1 + 120);
  if (v4 > 5)
  {
    v5 = -1;
    v6 = *(int *)(a2 + 120);
    if (v6 > 5)
      return v5 < -1;
  }
  else
  {
    v5 = dword_22464D880[v4];
    v6 = *(int *)(a2 + 120);
    if (v6 > 5)
      return v5 < -1;
  }
  return v5 < dword_22464D880[v6];
}

__n128 sub_223788F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __n128 result;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __n128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;

  sub_223788420(a1, a2, a3);
  if (sub_223788278(a4, a3))
  {
    v164 = *(_OWORD *)(a3 + 160);
    v171 = *(_OWORD *)(a3 + 176);
    v178 = *(_QWORD *)(a3 + 192);
    v136 = *(_OWORD *)(a3 + 96);
    v143 = *(_OWORD *)(a3 + 112);
    v150 = *(_OWORD *)(a3 + 128);
    v157 = *(_OWORD *)(a3 + 144);
    v99 = *(_OWORD *)a3;
    v106 = *(_OWORD *)(a3 + 16);
    v113 = *(_OWORD *)(a3 + 32);
    v120 = *(_OWORD *)(a3 + 48);
    v127 = *(_OWORD *)(a3 + 64);
    v134 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v10 = *(_OWORD *)(a4 + 128);
    v12 = *(_OWORD *)(a4 + 80);
    v11 = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v10;
    *(_OWORD *)(a3 + 80) = v12;
    *(_OWORD *)(a3 + 96) = v11;
    v14 = *(_OWORD *)(a4 + 160);
    v13 = *(_OWORD *)(a4 + 176);
    v15 = *(_OWORD *)(a4 + 144);
    *(_QWORD *)(a3 + 192) = *(_QWORD *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v14;
    *(_OWORD *)(a3 + 176) = v13;
    *(_OWORD *)(a3 + 144) = v15;
    v16 = *(_OWORD *)(a4 + 16);
    v17 = *(_OWORD *)(a4 + 32);
    v18 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v18;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v17;
    *(_OWORD *)(a4 + 160) = v164;
    *(_OWORD *)(a4 + 176) = v171;
    *(_QWORD *)(a4 + 192) = v178;
    *(_OWORD *)(a4 + 96) = v136;
    *(_OWORD *)(a4 + 112) = v143;
    *(_OWORD *)(a4 + 128) = v150;
    *(_OWORD *)(a4 + 144) = v157;
    *(_OWORD *)a4 = v99;
    *(_OWORD *)(a4 + 16) = v106;
    *(_OWORD *)(a4 + 32) = v113;
    *(_OWORD *)(a4 + 48) = v120;
    *(_OWORD *)(a4 + 64) = v127;
    *(_OWORD *)(a4 + 80) = v134;
    if (sub_223788278(a3, a2))
    {
      v165 = *(_OWORD *)(a2 + 160);
      v172 = *(_OWORD *)(a2 + 176);
      v19 = *(_QWORD *)(a2 + 192);
      v137 = *(_OWORD *)(a2 + 96);
      v144 = *(_OWORD *)(a2 + 112);
      v151 = *(_OWORD *)(a2 + 128);
      v158 = *(_OWORD *)(a2 + 144);
      v20 = *(_OWORD *)a2;
      v21 = *(_OWORD *)(a2 + 16);
      v23 = *(_OWORD *)(a2 + 64);
      v22 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v24 = *(_OWORD *)(a3 + 128);
      v26 = *(_OWORD *)(a3 + 80);
      v25 = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(a2 + 128) = v24;
      *(_OWORD *)(a2 + 80) = v26;
      *(_OWORD *)(a2 + 96) = v25;
      v28 = *(_OWORD *)(a3 + 160);
      v27 = *(_OWORD *)(a3 + 176);
      v29 = *(_OWORD *)(a3 + 144);
      *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
      v100 = v20;
      v107 = v21;
      v114 = *(_OWORD *)(a2 + 32);
      v121 = *(_OWORD *)(a2 + 48);
      v128 = v23;
      *(_OWORD *)(a2 + 160) = v28;
      *(_OWORD *)(a2 + 176) = v27;
      *(_OWORD *)(a2 + 144) = v29;
      v30 = *(_OWORD *)(a3 + 16);
      v31 = *(_OWORD *)(a3 + 32);
      v32 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v32;
      *(_OWORD *)(a2 + 16) = v30;
      *(_OWORD *)(a2 + 32) = v31;
      *(_OWORD *)a3 = v100;
      *(_OWORD *)(a3 + 144) = v158;
      *(_OWORD *)(a3 + 160) = v165;
      *(_OWORD *)(a3 + 176) = v172;
      *(_OWORD *)(a3 + 80) = v22;
      *(_OWORD *)(a3 + 96) = v137;
      *(_QWORD *)(a3 + 192) = v19;
      *(_OWORD *)(a3 + 112) = v144;
      *(_OWORD *)(a3 + 128) = v151;
      *(_OWORD *)(a3 + 16) = v107;
      *(_OWORD *)(a3 + 32) = v114;
      *(_OWORD *)(a3 + 48) = v121;
      *(_OWORD *)(a3 + 64) = v128;
      if (sub_223788278(a2, a1))
      {
        v166 = *(_OWORD *)(a1 + 160);
        v173 = *(_OWORD *)(a1 + 176);
        v33 = *(_QWORD *)(a1 + 192);
        v138 = *(_OWORD *)(a1 + 96);
        v145 = *(_OWORD *)(a1 + 112);
        v152 = *(_OWORD *)(a1 + 128);
        v159 = *(_OWORD *)(a1 + 144);
        v34 = *(_OWORD *)a1;
        v35 = *(_OWORD *)(a1 + 16);
        v37 = *(_OWORD *)(a1 + 64);
        v36 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v38 = *(_OWORD *)(a2 + 128);
        v40 = *(_OWORD *)(a2 + 80);
        v39 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 128) = v38;
        *(_OWORD *)(a1 + 80) = v40;
        *(_OWORD *)(a1 + 96) = v39;
        v42 = *(_OWORD *)(a2 + 160);
        v41 = *(_OWORD *)(a2 + 176);
        v43 = *(_OWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        v101 = v34;
        v108 = v35;
        v115 = *(_OWORD *)(a1 + 32);
        v122 = *(_OWORD *)(a1 + 48);
        v129 = v37;
        *(_OWORD *)(a1 + 160) = v42;
        *(_OWORD *)(a1 + 176) = v41;
        *(_OWORD *)(a1 + 144) = v43;
        v44 = *(_OWORD *)(a2 + 16);
        v45 = *(_OWORD *)(a2 + 32);
        v46 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v46;
        *(_OWORD *)(a1 + 16) = v44;
        *(_OWORD *)(a1 + 32) = v45;
        *(_OWORD *)a2 = v101;
        *(_OWORD *)(a2 + 144) = v159;
        *(_OWORD *)(a2 + 160) = v166;
        *(_OWORD *)(a2 + 176) = v173;
        *(_OWORD *)(a2 + 80) = v36;
        *(_OWORD *)(a2 + 96) = v138;
        *(_QWORD *)(a2 + 192) = v33;
        *(_OWORD *)(a2 + 112) = v145;
        *(_OWORD *)(a2 + 128) = v152;
        *(_OWORD *)(a2 + 16) = v108;
        *(_OWORD *)(a2 + 32) = v115;
        *(_OWORD *)(a2 + 48) = v122;
        *(_OWORD *)(a2 + 64) = v129;
      }
    }
  }
  if (sub_223788278(a5, a4))
  {
    v167 = *(_OWORD *)(a4 + 160);
    v174 = *(_OWORD *)(a4 + 176);
    v179 = *(_QWORD *)(a4 + 192);
    v139 = *(_OWORD *)(a4 + 96);
    v146 = *(_OWORD *)(a4 + 112);
    v153 = *(_OWORD *)(a4 + 128);
    v160 = *(_OWORD *)(a4 + 144);
    v102 = *(_OWORD *)a4;
    v109 = *(_OWORD *)(a4 + 16);
    v116 = *(_OWORD *)(a4 + 32);
    v123 = *(_OWORD *)(a4 + 48);
    v130 = *(_OWORD *)(a4 + 64);
    v135 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    v48 = *(_OWORD *)(a5 + 128);
    v50 = *(_OWORD *)(a5 + 80);
    v49 = *(_OWORD *)(a5 + 96);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(a4 + 128) = v48;
    *(_OWORD *)(a4 + 80) = v50;
    *(_OWORD *)(a4 + 96) = v49;
    v52 = *(_OWORD *)(a5 + 160);
    v51 = *(_OWORD *)(a5 + 176);
    v53 = *(_OWORD *)(a5 + 144);
    *(_QWORD *)(a4 + 192) = *(_QWORD *)(a5 + 192);
    *(_OWORD *)(a4 + 160) = v52;
    *(_OWORD *)(a4 + 176) = v51;
    *(_OWORD *)(a4 + 144) = v53;
    v54 = *(_OWORD *)(a5 + 16);
    v55 = *(_OWORD *)(a5 + 32);
    v56 = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = v56;
    *(_OWORD *)(a4 + 16) = v54;
    *(_OWORD *)(a4 + 32) = v55;
    *(_OWORD *)(a5 + 160) = v167;
    *(_OWORD *)(a5 + 176) = v174;
    *(_QWORD *)(a5 + 192) = v179;
    *(_OWORD *)(a5 + 96) = v139;
    *(_OWORD *)(a5 + 112) = v146;
    *(_OWORD *)(a5 + 128) = v153;
    *(_OWORD *)(a5 + 144) = v160;
    *(_OWORD *)a5 = v102;
    *(_OWORD *)(a5 + 16) = v109;
    *(_OWORD *)(a5 + 32) = v116;
    *(_OWORD *)(a5 + 48) = v123;
    *(_OWORD *)(a5 + 64) = v130;
    *(_OWORD *)(a5 + 80) = v135;
    if (sub_223788278(a4, a3))
    {
      v168 = *(_OWORD *)(a3 + 160);
      v175 = *(_OWORD *)(a3 + 176);
      v57 = *(_QWORD *)(a3 + 192);
      v140 = *(_OWORD *)(a3 + 96);
      v147 = *(_OWORD *)(a3 + 112);
      v154 = *(_OWORD *)(a3 + 128);
      v161 = *(_OWORD *)(a3 + 144);
      v58 = *(_OWORD *)a3;
      v59 = *(_OWORD *)(a3 + 16);
      v61 = *(_OWORD *)(a3 + 64);
      v60 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      v62 = *(_OWORD *)(a4 + 128);
      v64 = *(_OWORD *)(a4 + 80);
      v63 = *(_OWORD *)(a4 + 96);
      *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
      *(_OWORD *)(a3 + 128) = v62;
      *(_OWORD *)(a3 + 80) = v64;
      *(_OWORD *)(a3 + 96) = v63;
      v66 = *(_OWORD *)(a4 + 160);
      v65 = *(_OWORD *)(a4 + 176);
      v67 = *(_OWORD *)(a4 + 144);
      *(_QWORD *)(a3 + 192) = *(_QWORD *)(a4 + 192);
      v103 = v58;
      v110 = v59;
      v117 = *(_OWORD *)(a3 + 32);
      v124 = *(_OWORD *)(a3 + 48);
      v131 = v61;
      *(_OWORD *)(a3 + 160) = v66;
      *(_OWORD *)(a3 + 176) = v65;
      *(_OWORD *)(a3 + 144) = v67;
      v68 = *(_OWORD *)(a4 + 16);
      v69 = *(_OWORD *)(a4 + 32);
      v70 = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 64) = v70;
      *(_OWORD *)(a3 + 16) = v68;
      *(_OWORD *)(a3 + 32) = v69;
      *(_OWORD *)a4 = v103;
      *(_OWORD *)(a4 + 144) = v161;
      *(_OWORD *)(a4 + 160) = v168;
      *(_OWORD *)(a4 + 176) = v175;
      *(_OWORD *)(a4 + 80) = v60;
      *(_OWORD *)(a4 + 96) = v140;
      *(_QWORD *)(a4 + 192) = v57;
      *(_OWORD *)(a4 + 112) = v147;
      *(_OWORD *)(a4 + 128) = v154;
      *(_OWORD *)(a4 + 16) = v110;
      *(_OWORD *)(a4 + 32) = v117;
      *(_OWORD *)(a4 + 48) = v124;
      *(_OWORD *)(a4 + 64) = v131;
      if (sub_223788278(a3, a2))
      {
        v169 = *(_OWORD *)(a2 + 160);
        v176 = *(_OWORD *)(a2 + 176);
        v71 = *(_QWORD *)(a2 + 192);
        v141 = *(_OWORD *)(a2 + 96);
        v148 = *(_OWORD *)(a2 + 112);
        v155 = *(_OWORD *)(a2 + 128);
        v162 = *(_OWORD *)(a2 + 144);
        v72 = *(_OWORD *)a2;
        v73 = *(_OWORD *)(a2 + 16);
        v75 = *(_OWORD *)(a2 + 64);
        v74 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        v76 = *(_OWORD *)(a3 + 128);
        v78 = *(_OWORD *)(a3 + 80);
        v77 = *(_OWORD *)(a3 + 96);
        *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
        *(_OWORD *)(a2 + 128) = v76;
        *(_OWORD *)(a2 + 80) = v78;
        *(_OWORD *)(a2 + 96) = v77;
        v80 = *(_OWORD *)(a3 + 160);
        v79 = *(_OWORD *)(a3 + 176);
        v81 = *(_OWORD *)(a3 + 144);
        *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
        v104 = v72;
        v111 = v73;
        v118 = *(_OWORD *)(a2 + 32);
        v125 = *(_OWORD *)(a2 + 48);
        v132 = v75;
        *(_OWORD *)(a2 + 160) = v80;
        *(_OWORD *)(a2 + 176) = v79;
        *(_OWORD *)(a2 + 144) = v81;
        v82 = *(_OWORD *)(a3 + 16);
        v83 = *(_OWORD *)(a3 + 32);
        v84 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 64) = v84;
        *(_OWORD *)(a2 + 16) = v82;
        *(_OWORD *)(a2 + 32) = v83;
        *(_OWORD *)a3 = v104;
        *(_OWORD *)(a3 + 144) = v162;
        *(_OWORD *)(a3 + 160) = v169;
        *(_OWORD *)(a3 + 176) = v176;
        *(_OWORD *)(a3 + 80) = v74;
        *(_OWORD *)(a3 + 96) = v141;
        *(_QWORD *)(a3 + 192) = v71;
        *(_OWORD *)(a3 + 112) = v148;
        *(_OWORD *)(a3 + 128) = v155;
        *(_OWORD *)(a3 + 16) = v111;
        *(_OWORD *)(a3 + 32) = v118;
        *(_OWORD *)(a3 + 48) = v125;
        *(_OWORD *)(a3 + 64) = v132;
        if (sub_223788278(a2, a1))
        {
          v170 = *(_OWORD *)(a1 + 160);
          v177 = *(_OWORD *)(a1 + 176);
          v85 = *(_QWORD *)(a1 + 192);
          v142 = *(_OWORD *)(a1 + 96);
          v149 = *(_OWORD *)(a1 + 112);
          v156 = *(_OWORD *)(a1 + 128);
          v163 = *(_OWORD *)(a1 + 144);
          v86 = *(_OWORD *)a1;
          v87 = *(_OWORD *)(a1 + 16);
          v89 = *(_OWORD *)(a1 + 64);
          v88 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v90 = *(_OWORD *)(a2 + 128);
          v92 = *(_OWORD *)(a2 + 80);
          v91 = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 128) = v90;
          *(_OWORD *)(a1 + 80) = v92;
          *(_OWORD *)(a1 + 96) = v91;
          v94 = *(_OWORD *)(a2 + 160);
          v93 = *(_OWORD *)(a2 + 176);
          v95 = *(_OWORD *)(a2 + 144);
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
          v105 = v86;
          v112 = v87;
          v119 = *(__n128 *)(a1 + 32);
          v126 = *(_OWORD *)(a1 + 48);
          v133 = v89;
          *(_OWORD *)(a1 + 160) = v94;
          *(_OWORD *)(a1 + 176) = v93;
          *(_OWORD *)(a1 + 144) = v95;
          v96 = *(_OWORD *)(a2 + 16);
          v97 = *(_OWORD *)(a2 + 32);
          v98 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 64) = v98;
          *(_OWORD *)(a1 + 16) = v96;
          *(_OWORD *)(a1 + 32) = v97;
          *(_OWORD *)a2 = v105;
          *(_OWORD *)(a2 + 144) = v163;
          *(_OWORD *)(a2 + 160) = v170;
          *(_OWORD *)(a2 + 176) = v177;
          *(_OWORD *)(a2 + 80) = v88;
          *(_OWORD *)(a2 + 96) = v142;
          *(_QWORD *)(a2 + 192) = v85;
          *(_OWORD *)(a2 + 112) = v149;
          *(_OWORD *)(a2 + 128) = v156;
          result = v119;
          *(_OWORD *)(a2 + 16) = v112;
          *(__n128 *)(a2 + 32) = v119;
          *(_OWORD *)(a2 + 48) = v126;
          *(_OWORD *)(a2 + 64) = v133;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2237894A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t **v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  BOOL v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  size_t v48;
  char *v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  void **v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  uint64_t *v74;
  uint64_t *v75;
  int v76;
  int v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  _QWORD *v81;
  int *v83;
  uint64_t **v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v89[2];
  void *v90;
  _QWORD *v91;
  char *v92;
  void *__p;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v89[1] = 0;
  v90 = 0;
  v88 = (uint64_t *)v89;
  v89[0] = 0;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v91 = 0;
  v92 = 0;
  v8 = v7 + 1;
  v86 = v7 + 1;
  v87 = 0;
  if (v7 != -1)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v9 = operator new(a2 - a1 + 24);
    v90 = v9;
    v92 = (char *)&v9[3 * v8];
    v10 = 24 * v7 + 24;
    v11 = v9 + 1;
    do
    {
      *v11 = 0;
      v11[1] = 0;
      *(v11 - 1) = v11;
      v11 += 3;
      v10 -= 24;
    }
    while (v10);
    v91 = &v9[3 * v8];
  }
  v12 = *(uint64_t **)(a3 + 8);
  v13 = a4;
  if (v12 != *(uint64_t **)(a4 + 8))
  {
    v83 = a5;
    v14 = *(_QWORD *)(a3 + 16);
    v15 = *(uint64_t **)(a3 + 32);
    v16 = *(uint64_t ***)a3;
    while (1)
    {
      v17 = v12[8] + 1;
      v99 = v17;
      v85 = sub_223789DDC(&v88, v17, 0, &v99);
      v18 = v12[18] + 1;
      v99 = v18;
      v19 = sub_223789DDC(&v88, v18, 0, &v99);
      *(_QWORD *)&v99 = v87 + v86;
      *((_QWORD *)&v99 + 1) = v12;
      v20 = sub_223789DDC(&v88, v87 + v86, v12, &v99);
      if ((v21 & 1) == 0)
        goto LABEL_36;
      *((_QWORD *)&v99 + 1) = 0;
      *(_QWORD *)&v100 = 0;
      *(_QWORD *)&v99 = (char *)&v99 + 8;
      v22 = v91;
      if (v91 < (_QWORD *)v92)
      {
        *v91 = (char *)&v99 + 8;
        v23 = *((_QWORD *)&v99 + 1);
        v22[1] = *((_QWORD *)&v99 + 1);
        v24 = v22 + 1;
        v25 = v100;
        v22[2] = v100;
        if (v25)
        {
          *(_QWORD *)(v23 + 16) = v24;
          *(_QWORD *)&v99 = (char *)&v99 + 8;
          *((_QWORD *)&v99 + 1) = 0;
          *(_QWORD *)&v100 = 0;
        }
        else
        {
          *v22 = v24;
        }
        v26 = v22 + 3;
        goto LABEL_35;
      }
      v27 = v90;
      v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (_BYTE *)v90) >> 3);
      v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      if (0x5555555555555556 * ((v92 - (_BYTE *)v90) >> 3) > v29)
        v29 = 0x5555555555555556 * ((v92 - (_BYTE *)v90) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v92 - (_BYTE *)v90) >> 3) >= 0x555555555555555)
        v30 = 0xAAAAAAAAAAAAAAALL;
      else
        v30 = v29;
      if (v30)
      {
        if (v30 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v31 = (char *)operator new(24 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[24 * v28];
      *((_QWORD *)v32 + 2) = 0;
      *((_QWORD *)v32 + 1) = 0;
      *(_QWORD *)v32 = v32 + 8;
      v26 = v32 + 24;
      if (v22 == v27)
      {
        v90 = v32;
        v91 = v32 + 24;
        v92 = &v31[24 * v30];
        v13 = a4;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v33 = 0;
        do
        {
          while (1)
          {
            v34 = &v32[v33 * 8];
            *((_QWORD *)v34 - 3) = v22[v33 - 3];
            v35 = &v22[v33 - 2];
            v36 = *v35;
            *(_QWORD *)&v32[v33 * 8 - 16] = *v35;
            v37 = (uint64_t)&v32[v33 * 8 - 16];
            v38 = v22[v33 - 1];
            *((_QWORD *)v34 - 1) = v38;
            if (!v38)
              break;
            *(_QWORD *)(v36 + 16) = v37;
            v22[v33 - 3] = v35;
            *v35 = 0;
            v22[v33 - 1] = 0;
            v33 -= 3;
            if (&v22[v33] == v27)
              goto LABEL_31;
          }
          *((_QWORD *)v34 - 3) = v37;
          v33 -= 3;
        }
        while (&v22[v33] != v27);
LABEL_31:
        v22 = v90;
        v39 = v91;
        v90 = &v32[v33 * 8];
        v91 = v32 + 24;
        v92 = &v31[24 * v30];
        if (v39 != v22)
        {
          do
          {
            v40 = v39 - 3;
            sub_2233FADDC((_QWORD *)*(v39 - 2));
            v39 = v40;
          }
          while (v40 != v22);
        }
        v13 = a4;
        if (!v22)
          goto LABEL_35;
      }
      operator delete(v22);
LABEL_35:
      v91 = v26;
      sub_2233FADDC(*((_QWORD **)&v99 + 1));
      ++v87;
LABEL_36:
      sub_2233FABEC((uint64_t *)&v86, (uint64_t)v85, (uint64_t)v20);
      sub_2233FABEC((uint64_t *)&v86, (uint64_t)v19, (uint64_t)v20);
      v12 += 25;
      v41 = *v16;
      if ((char *)v12 - (char *)*v16 != 4000)
        goto LABEL_38;
LABEL_37:
      v42 = v16[1];
      ++v16;
      v41 = v42;
      v12 = v42;
LABEL_38:
      while (v12 != v15)
      {
        v43 = v12[7] == v14 && v12[17] == v14;
        if (v43)
          goto LABEL_9;
        v12 += 25;
        if ((char *)v12 - (char *)v41 == 4000)
          goto LABEL_37;
      }
      v12 = v15;
LABEL_9:
      if (v12 == *(uint64_t **)(v13 + 8))
      {
        a5 = v83;
        __p = 0;
        v94 = 0;
        v95 = 0;
        v8 = v87 + v86;
        if (v87 + v86)
          goto LABEL_48;
LABEL_102:
        v49 = 0;
        v96 = 0;
        v97 = 0;
        v98 = 0;
        v51 = v88;
        if (v88 != (uint64_t *)v89)
          goto LABEL_60;
        goto LABEL_103;
      }
    }
  }
  __p = 0;
  v94 = 0;
  v95 = 0;
  if (!v8)
    goto LABEL_102;
LABEL_48:
  if ((v8 & 0x8000000000000000) != 0)
    sub_2233DCD38();
  v44 = (v8 - 1) >> 6;
  v45 = operator new(8 * (v44 + 1));
  v46 = v45;
  v94 = v8;
  v95 = v44 + 1;
  __p = v45;
  if (v8 >= 0x41)
    v47 = (v8 - 1) >> 6;
  else
    v47 = 0;
  v45[v47] = 0;
  if (v8 >= 0x40)
    bzero(v45, 8 * (v8 >> 6));
  if ((v8 & 0x3F) != 0)
    v46[v8 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v8 & 0x3F));
  v96 = 0;
  v97 = 0;
  v98 = 0;
  if (v8 >> 61)
    sub_2233DCD38();
  v48 = 8 * v8;
  v49 = (char *)operator new(8 * v8);
  v50 = &v49[8 * v8];
  v96 = v49;
  v98 = v50;
  memset(v49, 255, v48);
  v97 = v50;
  v51 = v88;
  if (v88 == (uint64_t *)v89)
  {
LABEL_103:
    v76 = 0;
    if (v49)
      goto LABEL_107;
    goto LABEL_108;
  }
LABEL_60:
  while (2)
  {
    if (((*(_QWORD *)((char *)__p + (((unint64_t)v51[4] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v51[4]) & 1) != 0)
      goto LABEL_94;
    v100 = 0u;
    v101 = 0u;
    v99 = 0u;
    sub_223789F38(&v99);
    v52 = *((_QWORD *)&v101 + 1);
    v53 = v101;
    v54 = (void **)*((_QWORD *)&v99 + 1);
    v55 = (void **)v100;
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v99 + 1)
                          + (((*((_QWORD *)&v101 + 1) + (_QWORD)v101) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((*((_QWORD *)&v101 + 1) + v101) & 0x1FF)) = v51;
    v56 = v52 + 1;
    if (v52 == -1)
    {
LABEL_62:
      v57 = 0;
      v58 = (char *)v55 - (char *)v54;
      if ((unint64_t)((char *)v55 - (char *)v54) >= 0x11)
        goto LABEL_87;
      goto LABEL_90;
    }
    while (1)
    {
      v59 = (((char *)v55 - (char *)v54) << 6) - 1;
      if (v55 == v54)
        v59 = 0;
      v60 = v53 + v56--;
      v61 = (*(_QWORD **)((char *)v54 + (((unint64_t)(v56 + v53) >> 6) & 0x3FFFFFFFFFFFFF8)))[(v56 + v53) & 0x1FF];
      *((_QWORD *)&v101 + 1) = v56;
      if ((unint64_t)(v59 - v60 + 1) >= 0x400)
      {
        v62 = *--v55;
        operator delete(v62);
        *(_QWORD *)&v100 = v55;
      }
      *(_QWORD *)((char *)__p + ((*(_QWORD *)(v61 + 32) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_QWORD *)(v61 + 32);
      v63 = *(_QWORD *)(v61 + 32);
      v64 = (char *)v90 + 24 * v63;
      v65 = (_QWORD *)*v64;
      if ((_QWORD *)*v64 != v64 + 1)
        break;
LABEL_64:
      if (!v56)
        goto LABEL_62;
    }
    while (1)
    {
      v66 = v65[4];
      v67 = *(_QWORD *)(v66 + 32);
      if (v67 != *(_QWORD *)&v96[8 * v63])
        break;
LABEL_80:
      v70 = (_QWORD *)v65[1];
      if (v70)
      {
        do
        {
          v71 = v70;
          v70 = (_QWORD *)*v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          v71 = (_QWORD *)v65[2];
          v43 = *v71 == (_QWORD)v65;
          v65 = v71;
        }
        while (!v43);
      }
      v63 = *(_QWORD *)(v61 + 32);
      v65 = v71;
      if (v71 == (_QWORD *)((char *)v90 + 24 * v63 + 8))
        goto LABEL_64;
    }
    if (((*(_QWORD *)((char *)__p + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v67) & 1) == 0)
    {
      *(_QWORD *)&v96[8 * v67] = v63;
      if (v55 == v54)
        v68 = 0;
      else
        v68 = (((char *)v55 - (char *)v54) << 6) - 1;
      v69 = v53 + v56;
      if (v68 == v53 + v56)
      {
        sub_223789F38(&v99);
        v54 = (void **)*((_QWORD *)&v99 + 1);
        v55 = (void **)v100;
        v56 = *((_QWORD *)&v101 + 1);
        v53 = v101;
        v69 = v101 + *((_QWORD *)&v101 + 1);
        v66 = v65[4];
      }
      (*(_QWORD **)((char *)v54 + ((v69 >> 6) & 0x3FFFFFFFFFFFFF8)))[v69 & 0x1FF] = v66;
      *((_QWORD *)&v101 + 1) = ++v56;
      goto LABEL_80;
    }
    v57 = 1;
    v58 = (char *)v55 - (char *)v54;
    if ((unint64_t)((char *)v55 - (char *)v54) >= 0x11)
    {
      do
      {
LABEL_87:
        v72 = *v54++;
        operator delete(v72);
        *((_QWORD *)&v99 + 1) = v54;
        v58 -= 8;
      }
      while (v58 > 0x10);
    }
LABEL_90:
    while (v54 != v55)
    {
      v73 = *v54++;
      operator delete(v73);
    }
    if ((_QWORD)v99)
      operator delete((void *)v99);
    if ((v57 & 1) != 0)
    {
      v76 = 1;
    }
    else
    {
LABEL_94:
      v74 = (uint64_t *)v51[1];
      if (v74)
      {
        do
        {
          v75 = v74;
          v74 = (uint64_t *)*v74;
        }
        while (v74);
      }
      else
      {
        do
        {
          v75 = (uint64_t *)v51[2];
          v43 = *v75 == (_QWORD)v51;
          v51 = v75;
        }
        while (!v43);
      }
      v51 = v75;
      if (v75 != (uint64_t *)v89)
        continue;
      v76 = 0;
    }
    break;
  }
  v49 = v96;
  if (v96)
LABEL_107:
    operator delete(v49);
LABEL_108:
  if (__p)
    operator delete(__p);
  if (v76)
    v77 = 32;
  else
    v77 = 0;
  *a5 = v77;
  v78 = v90;
  if (v90)
  {
    v79 = v91;
    v80 = v90;
    if (v91 != v90)
    {
      do
      {
        v81 = v79 - 3;
        sub_2233FADDC((_QWORD *)*(v79 - 2));
        v79 = v81;
      }
      while (v81 != v78);
      v80 = v90;
    }
    v91 = v78;
    operator delete(v80);
  }
  sub_2233FADDC(v89[0]);
  return v76 ^ 1u;
}

void sub_223789C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18, uint64_t a19, char *__p,char *a21)
{
  char *v22;
  void *v23;
  char *v24;

  if (__p)
  {
    v22 = a21;
    v23 = __p;
    if (a21 != __p)
    {
      do
      {
        v24 = v22 - 24;
        sub_2233FADDC(*((_QWORD **)v22 - 2));
        v22 = v24;
      }
      while (v24 != __p);
      v23 = __p;
    }
    operator delete(v23);
  }
  sub_2233FADDC(a18);
  _Unwind_Resume(a1);
}

void sub_223789CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v28;

  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
    v28 = a23;
    if (!a23)
    {
LABEL_3:
      sub_2233FAD70((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v28 = a23;
    if (!a23)
      goto LABEL_3;
  }
  operator delete(v28);
  sub_2233FAD70((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223789D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2233FAD70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223789D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2233FADDC(0);
  sub_2233FAD70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223789D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22323FBC0(v7 - 144);
  sub_2233FAE14((uint64_t)va1);
  sub_2233FAD70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223789DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2233FAD70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_223789DDC(uint64_t **a1, unint64_t a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t **v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t *v21;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    if (!a3)
    {
      while (1)
      {
        while (1)
        {
          v8 = (uint64_t **)v6;
          if (!v6[5])
          {
            v9 = v6[4];
            if (v9 <= a2)
              break;
          }
          v6 = *v8;
          v7 = v8;
          if (!*v8)
            goto LABEL_22;
        }
        if (v9 >= a2)
          return v8;
        v6 = v8[1];
        if (!v6)
          goto LABEL_9;
      }
    }
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v12 = (uint64_t *)v6[5];
        if (v12)
          break;
LABEL_14:
        v6 = v8[1];
        if (!v6)
        {
LABEL_9:
          v7 = v8 + 1;
          goto LABEL_22;
        }
      }
      v13 = *a3;
      v14 = a3[1];
      v15 = *v12;
      v16 = v12[1];
      v17 = v14 < v16;
      if (*a3 != v15)
        v17 = *a3 < v15;
      if (!v17)
      {
        v10 = v16 < v14;
        if (v13 == v15)
          v11 = v10;
        else
          v11 = v15 < v13;
        if (!v11)
          return v8;
        goto LABEL_14;
      }
      v6 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_22;
    }
  }
  v8 = a1 + 1;
LABEL_22:
  v18 = v8;
  v19 = operator new(0x30uLL);
  v19[2] = *a4;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = v18;
  *v7 = (uint64_t *)v19;
  v20 = (uint64_t *)**a1;
  v21 = (uint64_t *)v19;
  if (v20)
  {
    *a1 = v20;
    v21 = *v7;
  }
  sub_2231A9A8C(a1[1], v21);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v19;
}

void sub_223789F38(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_223174E94();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_223174E94();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_223174E94();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_22378A5A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22378A5BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22378A5D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22378A5E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22378A600(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t **v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t **v51;
  uint64_t **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  void *__p;
  uint64_t **v63;
  uint64_t v64;
  void *v65;
  uint64_t **v66;
  uint64_t v67;
  __int128 v68[2];
  __int128 v69;
  __int128 v70;
  int64x2_t v71;
  int64x2_t v72;
  char v73[16];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a1;
  v8 = (__int128 *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  if (&v69 != (__int128 *)a1)
  {
    v9 = *v8;
    v69 = *(_OWORD *)a1;
    v70 = v9;
  }
  if (v68 != (__int128 *)a1)
  {
    v10 = *v8;
    v68[0] = *(_OWORD *)a1;
    v68[1] = v10;
  }
  if (v7 >= 0)
    v11 = v7;
  else
    v11 = v7 + 1;
  v12 = v11 >> 1;
  if (v6 >= 0)
    v13 = v6;
  else
    v13 = v6 + 1;
  v14 = v13 >> 1;
  v15 = v7 - 2 * v12 + v6 - 2 * v14;
  *(_QWORD *)&v70 = v12 + v14 + ((v15 + ((v15 & 0x80) >> 7)) << 24 >> 25);
  v67 = 0;
  *(_QWORD *)&v68[0] = v70;
  v65 = 0;
  v66 = 0;
  __p = 0;
  v63 = 0;
  v64 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  sub_22378ADE8(&v69, v68, a2, (uint64_t **)&v65, (char **)&__p, (char **)&v59);
  v16 = v59;
  v17 = v60;
  if (v59 == v60)
    goto LABEL_36;
  v18 = 0x7FFFFFFFFFFFFFFFLL;
  v19 = 0x8000000000000000;
  v71 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v72 = vdupq_n_s64(0x8000000000000000);
  v20 = 0x8000000000000000;
  v21 = 0x7FFFFFFFFFFFFFFFLL;
  v22 = v59;
  do
  {
    v23 = (uint64_t *)sub_22378AC50(*v22);
    v24 = *v23;
    if (*v23 >= v21)
    {
      if (v24 <= v20)
      {
LABEL_16:
        v25 = v23[1];
        if (v25 < v18)
          goto LABEL_17;
        goto LABEL_25;
      }
    }
    else
    {
      v71.i64[0] = *v23;
      v21 = v24;
      if (v24 <= v20)
        goto LABEL_16;
    }
    v72.i64[0] = v24;
    v20 = v24;
    v25 = v23[1];
    if (v25 < v18)
    {
LABEL_17:
      v71.i64[1] = v25;
      v18 = v25;
      if (v25 <= v19)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    if (v25 <= v19)
    {
LABEL_18:
      v26 = v23[2];
      if (v26 < v21)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    v72.i64[1] = v25;
    v19 = v25;
    v26 = v23[2];
    if (v26 < v21)
    {
LABEL_19:
      v71.i64[0] = v26;
      v21 = v26;
      if (v26 <= v20)
        goto LABEL_20;
      goto LABEL_28;
    }
LABEL_27:
    if (v26 <= v20)
    {
LABEL_20:
      v27 = v23[3];
      if (v27 >= v18)
        goto LABEL_29;
      goto LABEL_21;
    }
LABEL_28:
    v72.i64[0] = v26;
    v20 = v26;
    v27 = v23[3];
    if (v27 >= v18)
    {
LABEL_29:
      if (v27 <= v19)
        goto LABEL_13;
      goto LABEL_30;
    }
LABEL_21:
    v71.i64[1] = v27;
    v18 = v27;
    if (v27 <= v19)
      goto LABEL_13;
LABEL_30:
    v72.i64[1] = v27;
    v19 = v27;
LABEL_13:
    ++v22;
  }
  while (v22 != v17);
  if (a3 > 0x63 || (unint64_t)((char *)v17 - (char *)v16) < 0x79)
  {
    v30 = v16 + 2;
    v31 = (uint64_t **)v16;
    while (1)
    {
      v32 = v31 + 1;
      if (v31 + 1 != (uint64_t **)v17 && *(_BYTE *)a4 == 0)
      {
        v34 = v30;
LABEL_49:
        v35 = **v31;
        v36 = *(_QWORD *)*(v34 - 1);
        v37 = *(_QWORD *)(a4 + 8);
        strcpy(v73, "FFFFFFFFF");
        sub_22378DA40(v35, v36, (unsigned __int8 *)v73, v37);
        if (!v73[9])
        {
          v38 = v73[0] != 84 && v73[0] - 48 >= 0xA;
          if (!v38
            || v73[1] == 84
            || v73[1] - 48 <= 9
            || v73[3] == 84
            || v73[3] - 48 < 0xA)
          {
            *(_BYTE *)a4 = 1;
            goto LABEL_62;
          }
        }
        while (v34 != v17)
        {
          ++v34;
          if (!*(_BYTE *)a4)
            goto LABEL_49;
        }
      }
      ++v30;
      ++v31;
      if (v32 == (uint64_t **)v17)
        goto LABEL_34;
    }
  }
  if (!sub_22378B560((__int128 *)v71.i8, &v59, a3 + 1, a4))
    goto LABEL_62;
LABEL_34:
  if (!sub_22378B378((uint64_t)&v71, &v59, (uint64_t)&v65, a3, a4)
    || (sub_22378B378((uint64_t)&v71, &v59, (uint64_t)&__p, a3, a4) & 1) == 0)
  {
LABEL_62:
    v39 = 0;
    if (v16)
      goto LABEL_114;
    goto LABEL_115;
  }
LABEL_36:
  v29 = (uint64_t **)v65;
  v28 = v66;
  if (a3 > 0x63 || (unint64_t)((char *)v66 - (_BYTE *)v65) < 0x79)
  {
    if (v65 != v66)
    {
      v40 = (uint64_t **)((char *)v65 + 16);
      do
      {
        v41 = v29 + 1;
        if (v29 + 1 != v28 && *(_BYTE *)a4 == 0)
        {
          v43 = v40;
LABEL_74:
          v44 = **v29;
          v45 = **(v43 - 1);
          v46 = *(_QWORD *)(a4 + 8);
          strcpy(v71.i8, "FFFFFFFFF");
          sub_22378DA40(v44, v45, (unsigned __int8 *)&v71, v46);
          if (!v71.i8[9])
          {
            v47 = v71.u8[0] != 84 && v71.u8[0] - 48 >= 0xA;
            if (!v47
              || v71.u8[1] == 84
              || v71.u8[1] - 48 <= 9
              || v71.u8[3] == 84
              || v71.u8[3] - 48 < 0xA)
            {
LABEL_112:
              v39 = 0;
              *(_BYTE *)a4 = 1;
LABEL_113:
              if (v16)
                goto LABEL_114;
              goto LABEL_115;
            }
          }
          while (v43 != v28)
          {
            ++v43;
            if (!*(_BYTE *)a4)
              goto LABEL_74;
          }
        }
        ++v40;
        ++v29;
      }
      while (v41 != v28);
    }
  }
  else if (!sub_22378B560(&v69, (uint64_t **)&v65, a3 + 1, a4))
  {
    goto LABEL_62;
  }
  v49 = (uint64_t **)__p;
  v48 = v63;
  if (a3 > 0x63 || (unint64_t)((char *)v63 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v63)
    {
      v50 = (uint64_t **)((char *)__p + 16);
      while (1)
      {
        v51 = v49 + 1;
        if (v49 + 1 != v48 && *(_BYTE *)a4 == 0)
        {
          v53 = v50;
LABEL_100:
          v54 = **v49;
          v55 = **(v53 - 1);
          v56 = *(_QWORD *)(a4 + 8);
          strcpy(v71.i8, "FFFFFFFFF");
          sub_22378DA40(v54, v55, (unsigned __int8 *)&v71, v56);
          if (!v71.i8[9])
          {
            v57 = v71.u8[0] != 84 && v71.u8[0] - 48 >= 0xA;
            if (!v57
              || v71.u8[1] == 84
              || v71.u8[1] - 48 <= 9
              || v71.u8[3] == 84
              || v71.u8[3] - 48 < 0xA)
            {
              goto LABEL_112;
            }
          }
          while (v53 != v48)
          {
            ++v53;
            if (!*(_BYTE *)a4)
              goto LABEL_100;
          }
        }
        ++v50;
        v39 = 1;
        ++v49;
        if (v51 == v48)
          goto LABEL_113;
      }
    }
    v39 = 1;
    if (v16)
LABEL_114:
      operator delete(v16);
  }
  else
  {
    v39 = sub_22378B560(v68, (uint64_t **)&__p, a3 + 1, a4);
    if (v16)
      goto LABEL_114;
  }
LABEL_115:
  if (__p)
    operator delete(__p);
  if (v65)
    operator delete(v65);
  return v39;
}

void sub_22378ABF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v18;
  void *v19;

  if (v16)
  {
    operator delete(v16);
    v18 = __p;
    if (!__p)
    {
LABEL_3:
      v19 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v18 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v18);
  v19 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22378AC50(uint64_t a1)
{
  int64x2_t **v2;
  int64x2_t *v3;
  int64x2_t *v4;
  int64x2_t *v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t **v14;
  int64x2_t *v15;
  int64x2_t **v16;
  int64x2_t *v17;
  int64x2_t *v18;
  int64x2_t **v19;
  int64x2_t *v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t *v30;
  int64x2_t *v31;
  int64x2_t *v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;

  if (*(_BYTE *)(a1 + 40))
    return a1 + 8;
  v2 = *(int64x2_t ***)a1;
  v3 = **(int64x2_t ***)a1;
  v4 = *(int64x2_t **)(*(_QWORD *)a1 + 8);
  if (v3 == v4)
  {
    v15 = v2[3];
    v14 = (int64x2_t **)v2[4];
    v10 = vdupq_n_s64(0x8000000000000000);
    v8 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    if (v15 != (int64x2_t *)v14)
    {
      v16 = (int64x2_t **)&v15[1].i64[1];
      while (1)
      {
        v17 = *(v16 - 3);
        v18 = *(v16 - 2);
        v19 = v16 - 3;
        if (v17 != v18)
          break;
        v16 += 3;
        if (v19 + 3 == v14)
          goto LABEL_7;
      }
      v21 = *v17;
      v20 = v17 + 1;
      v22 = v21;
      v8 = v21;
      if (v20 == v18)
      {
        v10 = v22;
      }
      else
      {
        v23 = v22;
        v10 = v22;
        do
        {
          v24 = *v20++;
          v25 = (int8x16_t)vcgtq_s64(v22, v24);
          v8 = (int64x2_t)vbslq_s8(v25, (int8x16_t)v24, (int8x16_t)v8);
          v22 = (int64x2_t)vbslq_s8(v25, (int8x16_t)v24, (int8x16_t)v22);
          v26 = (int8x16_t)vcgtq_s64(v24, v23);
          v10 = (int64x2_t)vbslq_s8(v26, (int8x16_t)v24, (int8x16_t)v10);
          v23 = (int64x2_t)vbslq_s8(v26, (int8x16_t)v24, (int8x16_t)v23);
        }
        while (v20 != v18);
      }
      while (v16 != v14)
      {
        v30 = *v16;
        v31 = v16[1];
        if (*v16 != v31)
        {
          v33 = *v30;
          v32 = v30 + 1;
          v34 = v33;
          v35 = v33;
          if (v32 == v31)
          {
            v27 = v34;
          }
          else
          {
            v36 = v34;
            v27 = v34;
            do
            {
              v37 = *v32++;
              v38 = (int8x16_t)vcgtq_s64(v36, v37);
              v39 = (int8x16_t)vcgtq_s64(v37, v34);
              v27 = (int64x2_t)vbslq_s8(v38, (int8x16_t)v37, (int8x16_t)v27);
              v36 = (int64x2_t)vbslq_s8(v38, (int8x16_t)v37, (int8x16_t)v36);
              v35 = (int64x2_t)vbslq_s8(v39, (int8x16_t)v37, (int8x16_t)v35);
              v34 = (int64x2_t)vbslq_s8(v39, (int8x16_t)v37, (int8x16_t)v34);
            }
            while (v32 != v31);
          }
          v28 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, v27), (int8x16_t)v27, (int8x16_t)v8);
          v29 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v27, v10), (int8x16_t)v27, (int8x16_t)v10);
          v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v28, v35), (int8x16_t)v35, (int8x16_t)v28);
          v10 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v35, v29), (int8x16_t)v35, (int8x16_t)v29);
        }
        v16 += 3;
      }
    }
    goto LABEL_7;
  }
  v6 = *v3;
  v5 = v3 + 1;
  v7 = v6;
  v8 = v6;
  if (v5 != v4)
  {
    v9 = v7;
    v10 = v7;
    do
    {
      v11 = *v5++;
      v12 = (int8x16_t)vcgtq_s64(v7, v11);
      v8 = (int64x2_t)vbslq_s8(v12, (int8x16_t)v11, (int8x16_t)v8);
      v7 = (int64x2_t)vbslq_s8(v12, (int8x16_t)v11, (int8x16_t)v7);
      v13 = (int8x16_t)vcgtq_s64(v11, v9);
      v10 = (int64x2_t)vbslq_s8(v13, (int8x16_t)v11, (int8x16_t)v10);
      v9 = (int64x2_t)vbslq_s8(v13, (int8x16_t)v11, (int8x16_t)v9);
    }
    while (v5 != v4);
LABEL_7:
    *(int64x2_t *)(a1 + 8) = v8;
    *(int64x2_t *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 40) = 1;
    return a1 + 8;
  }
  *(int64x2_t *)(a1 + 8) = v8;
  *(int64x2_t *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 40) = 1;
  return a1 + 8;
}

void sub_22378ADE8(_QWORD *a1, _QWORD *a2, uint64_t **a3, uint64_t **a4, char **a5, char **a6)
{
  uint64_t *v6;
  char **v8;
  _QWORD *v12;
  _BOOL4 v13;
  _QWORD *v14;
  unint64_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  BOOL v28;
  unint64_t v29;
  char *v30;
  char **v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char **v78;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;

  v6 = *a3;
  if (*a3 != a3[1])
  {
    v8 = (char **)a4;
    do
    {
      v12 = (_QWORD *)sub_22378AC50(*v6);
      if (v12[2] >= *a1 && *v12 <= a1[2])
      {
        v13 = v12[3] >= a1[1] && v12[1] <= a1[3];
        v14 = (_QWORD *)sub_22378AC50(*v6);
        if (v14[2] < *a2)
        {
LABEL_17:
          if (!v13)
            goto LABEL_4;
          goto LABEL_18;
        }
      }
      else
      {
        v13 = 0;
        v14 = (_QWORD *)sub_22378AC50(*v6);
        if (v14[2] < *a2)
          goto LABEL_17;
      }
      if (*v14 > a2[2])
        goto LABEL_17;
      v28 = v14[3] < a2[1] || v14[1] > a2[3];
      if (v13 && !v28)
      {
        v30 = a6[1];
        v29 = (unint64_t)a6[2];
        if ((unint64_t)v30 >= v29)
        {
          v43 = *a6;
          v44 = v30 - *a6;
          v45 = v44 >> 3;
          v46 = (v44 >> 3) + 1;
          if (v46 >> 61)
            goto LABEL_95;
          v47 = v29 - (_QWORD)v43;
          if (v47 >> 2 > v46)
            v46 = v47 >> 2;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
            v46 = 0x1FFFFFFFFFFFFFFFLL;
          v82 = v46;
          if (v46)
          {
            if (v46 >> 61)
              goto LABEL_96;
            v48 = operator new(8 * v46);
            v49 = (uint64_t *)&v48[8 * v45];
            *v49 = *v6;
            v50 = (uint64_t)(v49 + 1);
            v51 = (char *)(v30 - v43);
            if (v30 == v43)
              goto LABEL_71;
LABEL_64:
            v52 = (unint64_t)(v51 - 8);
            if (v52 < 0x58)
              goto LABEL_99;
            if ((unint64_t)(v30 - v48 - v44) < 0x20)
              goto LABEL_99;
            v53 = (v52 >> 3) + 1;
            v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
            v55 = &v30[-v54];
            v49 = (uint64_t *)((char *)v49 - v54);
            v56 = &v48[8 * v45 - 16];
            v57 = v30 - 16;
            v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v59 = *(_OWORD *)v57;
              *(v56 - 1) = *((_OWORD *)v57 - 1);
              *v56 = v59;
              v56 -= 2;
              v57 -= 32;
              v58 -= 4;
            }
            while (v58);
            v30 = v55;
            if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_99:
              do
              {
                v60 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *--v49 = v60;
              }
              while (v30 != v43);
            }
            v30 = *a6;
          }
          else
          {
            v48 = 0;
            v49 = (uint64_t *)(8 * v45);
            *(_QWORD *)(8 * v45) = *v6;
            v50 = 8 * v45 + 8;
            v51 = (char *)(v30 - v43);
            if (v30 != v43)
              goto LABEL_64;
          }
LABEL_71:
          v8 = (char **)a4;
          *a6 = (char *)v49;
          a6[1] = (char *)v50;
          a6[2] = &v48[8 * v82];
          if (v30)
            operator delete(v30);
          a6[1] = (char *)v50;
          goto LABEL_4;
        }
        *(_QWORD *)v30 = *v6;
        a6[1] = v30 + 8;
        goto LABEL_4;
      }
      if (!v13)
      {
        if (!v28)
        {
          v31 = a5;
          v33 = a5[1];
          v32 = (unint64_t)a5[2];
          if ((unint64_t)v33 < v32)
          {
            *(_QWORD *)v33 = *v6;
            v34 = (uint64_t)(v33 + 8);
LABEL_93:
            v31[1] = (char *)v34;
            goto LABEL_4;
          }
          v61 = *a5;
          v62 = v33 - *a5;
          v63 = v62 >> 3;
          v64 = (v62 >> 3) + 1;
          if (v64 >> 61)
LABEL_95:
            sub_22316E078();
          v65 = v32 - (_QWORD)v61;
          if (v65 >> 2 > v64)
            v64 = v65 >> 2;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
            v64 = 0x1FFFFFFFFFFFFFFFLL;
          v83 = v64;
          if (v64)
          {
            if (v64 >> 61)
LABEL_96:
              sub_223174E94();
            v66 = operator new(8 * v64);
            v67 = (uint64_t *)&v66[8 * v63];
            *v67 = *v6;
            v34 = (uint64_t)(v67 + 1);
            v68 = (char *)(v33 - v61);
            if (v33 != v61)
            {
LABEL_82:
              v69 = (unint64_t)(v68 - 8);
              if (v69 < 0x58)
                goto LABEL_100;
              if ((unint64_t)(v33 - v66 - v62) < 0x20)
                goto LABEL_100;
              v70 = (v69 >> 3) + 1;
              v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
              v72 = &v33[-v71];
              v67 = (uint64_t *)((char *)v67 - v71);
              v73 = &v66[8 * v63 - 16];
              v74 = v33 - 16;
              v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v76 = *(_OWORD *)v74;
                *(v73 - 1) = *((_OWORD *)v74 - 1);
                *v73 = v76;
                v73 -= 2;
                v74 -= 32;
                v75 -= 4;
              }
              while (v75);
              v33 = v72;
              if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_100:
                do
                {
                  v77 = *((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *--v67 = v77;
                }
                while (v33 != v61);
              }
              v78 = a5;
              v8 = (char **)a4;
              v33 = *a5;
              *a5 = (char *)v67;
              a5[1] = (char *)v34;
              a5[2] = &v66[8 * v83];
              if (v33)
                goto LABEL_89;
              goto LABEL_92;
            }
          }
          else
          {
            v66 = 0;
            v67 = (uint64_t *)(8 * v63);
            *(_QWORD *)(8 * v63) = *v6;
            v34 = 8 * v63 + 8;
            v68 = (char *)(v33 - v61);
            if (v33 != v61)
              goto LABEL_82;
          }
          v78 = a5;
          v8 = (char **)a4;
          *a5 = (char *)v67;
          a5[1] = (char *)v34;
          a5[2] = &v66[8 * v83];
          if (v33)
          {
LABEL_89:
            operator delete(v33);
            v31 = a5;
            goto LABEL_93;
          }
LABEL_92:
          v31 = v78;
          goto LABEL_93;
        }
        goto LABEL_4;
      }
LABEL_18:
      v17 = (uint64_t *)v8[1];
      v16 = (unint64_t)v8[2];
      if ((unint64_t)v17 >= v16)
      {
        v18 = *v8;
        v19 = ((char *)v17 - v18) >> 3;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          goto LABEL_95;
        v21 = v16 - (_QWORD)v18;
        if (v21 >> 2 > v20)
          v20 = v21 >> 2;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        v81 = v20;
        if (v20)
        {
          if (v20 >> 61)
            goto LABEL_96;
          v22 = (char *)operator new(8 * v20);
          v23 = (uint64_t *)&v22[8 * v19];
          *v23 = *v6;
          v24 = (uint64_t)(v23 + 1);
          v25 = (char *)((char *)v17 - v18);
          if (v17 != (uint64_t *)v18)
          {
LABEL_27:
            v26 = (unint64_t)(v25 - 8);
            if (v26 < 0x58)
              goto LABEL_101;
            if ((unint64_t)(v18 - v22) < 0x20)
              goto LABEL_101;
            v35 = (v26 >> 3) + 1;
            v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
            v37 = &v17[v36 / 0xFFFFFFFFFFFFFFF8];
            v23 = (uint64_t *)((char *)v23 - v36);
            v38 = &v22[8 * v19 - 16];
            v39 = v17 - 2;
            v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v41 = *(_OWORD *)v39;
              *((_OWORD *)v38 - 1) = *((_OWORD *)v39 - 1);
              *(_OWORD *)v38 = v41;
              v38 -= 32;
              v39 -= 4;
              v40 -= 4;
            }
            while (v40);
            v17 = v37;
            if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_101:
              do
              {
                v42 = *--v17;
                *--v23 = v42;
              }
              while (v17 != (uint64_t *)v18);
            }
            v8 = (char **)a4;
            v17 = *a4;
            *a4 = v23;
            a4[1] = (uint64_t *)v24;
            a4[2] = (uint64_t *)&v22[8 * v81];
            if (v17)
LABEL_52:
              operator delete(v17);
LABEL_53:
            v8[1] = (char *)v24;
            goto LABEL_4;
          }
        }
        else
        {
          v22 = 0;
          v23 = (uint64_t *)(8 * v19);
          *(_QWORD *)(8 * v19) = *v6;
          v24 = 8 * v19 + 8;
          v25 = (char *)((char *)v17 - v18);
          if (v17 != (uint64_t *)v18)
            goto LABEL_27;
        }
        v8 = (char **)a4;
        *a4 = v23;
        a4[1] = (uint64_t *)v24;
        a4[2] = (uint64_t *)&v22[8 * v81];
        if (v17)
          goto LABEL_52;
        goto LABEL_53;
      }
      *v17 = *v6;
      v8[1] = (char *)(v17 + 1);
LABEL_4:
      ++v6;
    }
    while (v6 != a3[1]);
  }
}

uint64_t sub_22378B378(uint64_t a1, uint64_t **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  char v17[16];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v8 = a2[1];
  if ((unint64_t)((char *)v8 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 >= 0x79uLL)
  {
    return sub_22378CBEC(a1, a2, (uint64_t **)a3, a4 + 1, a5);
  }
  if (v9 == v8)
    return 1;
  v10 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v10)
    return 1;
  while (*(_QWORD *)a3 == v10 || *(_BYTE *)a5 != 0)
  {
LABEL_6:
    if (++v9 == v8)
      return 1;
  }
  v10 = *(_QWORD *)a3 + 8;
LABEL_13:
  v12 = *(_QWORD *)*v9;
  v13 = **(_QWORD **)(v10 - 8);
  v14 = *(_QWORD *)(a5 + 8);
  strcpy(v17, "FFFFFFFFF");
  sub_22378DA40(v12, v13, (unsigned __int8 *)v17, v14);
  if (v17[9]
    || (v17[0] != 84 ? (v15 = v17[0] - 48 >= 0xA) : (v15 = 0),
        v15
     && v17[1] != 84
     && v17[1] - 48 > 9
     && v17[3] != 84
     && v17[3] - 48 > 9))
  {
    while (v10 != *(_QWORD *)(a3 + 8))
    {
      v10 += 8;
      if (!*(_BYTE *)a5)
        goto LABEL_13;
    }
    v8 = a2[1];
    goto LABEL_6;
  }
  result = 0;
  *(_BYTE *)a5 = 1;
  return result;
}

uint64_t sub_22378B560(__int128 *a1, uint64_t **a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  void *__p;
  uint64_t **v60;
  uint64_t v61;
  void *v62;
  uint64_t **v63;
  uint64_t v64;
  _QWORD v65[2];
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  int64x2_t v70;
  int64x2_t v71;
  char v72[16];
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 1);
  v7 = *((_QWORD *)a1 + 3);
  if (&v67 != a1)
  {
    v67 = *a1;
    v68 = *((_QWORD *)a1 + 2);
  }
  if (v65 != (_QWORD *)a1)
  {
    v65[0] = *(_QWORD *)a1;
    v66 = a1[1];
  }
  if (v7 >= 0)
    v8 = v7;
  else
    v8 = v7 + 1;
  v9 = v8 >> 1;
  if (v6 >= 0)
    v10 = v6;
  else
    v10 = v6 + 1;
  v11 = v10 >> 1;
  v12 = v7 - 2 * v9 + v6 - 2 * v11;
  v69 = v9 + v11 + ((v12 + ((v12 & 0x80) >> 7)) << 24 >> 25);
  v65[1] = v69;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  __p = 0;
  v60 = 0;
  v61 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  sub_22378ADE8(&v67, v65, a2, (uint64_t **)&v62, (char **)&__p, (char **)&v56);
  v13 = v56;
  v14 = v57;
  if (v56 == v57)
    goto LABEL_36;
  v15 = 0x7FFFFFFFFFFFFFFFLL;
  v16 = 0x8000000000000000;
  v70 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v71 = vdupq_n_s64(0x8000000000000000);
  v17 = 0x8000000000000000;
  v18 = 0x7FFFFFFFFFFFFFFFLL;
  v19 = v56;
  do
  {
    v20 = (uint64_t *)sub_22378AC50(*v19);
    v21 = *v20;
    if (*v20 >= v18)
    {
      if (v21 <= v17)
      {
LABEL_16:
        v22 = v20[1];
        if (v22 < v15)
          goto LABEL_17;
        goto LABEL_25;
      }
    }
    else
    {
      v70.i64[0] = *v20;
      v18 = v21;
      if (v21 <= v17)
        goto LABEL_16;
    }
    v71.i64[0] = v21;
    v17 = v21;
    v22 = v20[1];
    if (v22 < v15)
    {
LABEL_17:
      v70.i64[1] = v22;
      v15 = v22;
      if (v22 <= v16)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    if (v22 <= v16)
    {
LABEL_18:
      v23 = v20[2];
      if (v23 < v18)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    v71.i64[1] = v22;
    v16 = v22;
    v23 = v20[2];
    if (v23 < v18)
    {
LABEL_19:
      v70.i64[0] = v23;
      v18 = v23;
      if (v23 <= v17)
        goto LABEL_20;
      goto LABEL_28;
    }
LABEL_27:
    if (v23 <= v17)
    {
LABEL_20:
      v24 = v20[3];
      if (v24 >= v15)
        goto LABEL_29;
      goto LABEL_21;
    }
LABEL_28:
    v71.i64[0] = v23;
    v17 = v23;
    v24 = v20[3];
    if (v24 >= v15)
    {
LABEL_29:
      if (v24 <= v16)
        goto LABEL_13;
      goto LABEL_30;
    }
LABEL_21:
    v70.i64[1] = v24;
    v15 = v24;
    if (v24 <= v16)
      goto LABEL_13;
LABEL_30:
    v71.i64[1] = v24;
    v16 = v24;
LABEL_13:
    ++v19;
  }
  while (v19 != v14);
  if (a3 > 0x63 || (unint64_t)((char *)v14 - (char *)v13) < 0x79)
  {
    v27 = v13 + 2;
    v28 = (uint64_t **)v13;
    while (1)
    {
      v29 = v28 + 1;
      if (v28 + 1 != (uint64_t **)v14 && *(_BYTE *)a4 == 0)
      {
        v31 = v27;
LABEL_49:
        v32 = **v28;
        v33 = *(_QWORD *)*(v31 - 1);
        v34 = *(_QWORD *)(a4 + 8);
        strcpy(v72, "FFFFFFFFF");
        sub_22378DA40(v32, v33, (unsigned __int8 *)v72, v34);
        if (!v72[9])
        {
          v35 = v72[0] != 84 && v72[0] - 48 >= 0xA;
          if (!v35
            || v72[1] == 84
            || v72[1] - 48 <= 9
            || v72[3] == 84
            || v72[3] - 48 < 0xA)
          {
            *(_BYTE *)a4 = 1;
            goto LABEL_62;
          }
        }
        while (v31 != v14)
        {
          ++v31;
          if (!*(_BYTE *)a4)
            goto LABEL_49;
        }
      }
      ++v27;
      ++v28;
      if (v29 == (uint64_t **)v14)
        goto LABEL_34;
    }
  }
  if (!sub_22378A600(&v70, &v56, a3 + 1, a4))
    goto LABEL_62;
LABEL_34:
  if (!sub_22378BBB8((__int128 *)v70.i8, &v56, (uint64_t)&v62, a3, a4)
    || (sub_22378BBB8((__int128 *)v70.i8, &v56, (uint64_t)&__p, a3, a4) & 1) == 0)
  {
LABEL_62:
    v36 = 0;
    if (v13)
      goto LABEL_114;
    goto LABEL_115;
  }
LABEL_36:
  v26 = (uint64_t **)v62;
  v25 = v63;
  if (a3 > 0x63 || (unint64_t)((char *)v63 - (_BYTE *)v62) < 0x79)
  {
    if (v62 != v63)
    {
      v37 = (uint64_t **)((char *)v62 + 16);
      do
      {
        v38 = v26 + 1;
        if (v26 + 1 != v25 && *(_BYTE *)a4 == 0)
        {
          v40 = v37;
LABEL_74:
          v41 = **v26;
          v42 = **(v40 - 1);
          v43 = *(_QWORD *)(a4 + 8);
          strcpy(v70.i8, "FFFFFFFFF");
          sub_22378DA40(v41, v42, (unsigned __int8 *)&v70, v43);
          if (!v70.i8[9])
          {
            v44 = v70.u8[0] != 84 && v70.u8[0] - 48 >= 0xA;
            if (!v44
              || v70.u8[1] == 84
              || v70.u8[1] - 48 <= 9
              || v70.u8[3] == 84
              || v70.u8[3] - 48 < 0xA)
            {
LABEL_112:
              v36 = 0;
              *(_BYTE *)a4 = 1;
LABEL_113:
              if (v13)
                goto LABEL_114;
              goto LABEL_115;
            }
          }
          while (v40 != v25)
          {
            ++v40;
            if (!*(_BYTE *)a4)
              goto LABEL_74;
          }
        }
        ++v37;
        ++v26;
      }
      while (v38 != v25);
    }
  }
  else if (!sub_22378A600(&v67, &v62, a3 + 1, a4))
  {
    goto LABEL_62;
  }
  v46 = (uint64_t **)__p;
  v45 = v60;
  if (a3 > 0x63 || (unint64_t)((char *)v60 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v60)
    {
      v47 = (uint64_t **)((char *)__p + 16);
      while (1)
      {
        v48 = v46 + 1;
        if (v46 + 1 != v45 && *(_BYTE *)a4 == 0)
        {
          v50 = v47;
LABEL_100:
          v51 = **v46;
          v52 = **(v50 - 1);
          v53 = *(_QWORD *)(a4 + 8);
          strcpy(v70.i8, "FFFFFFFFF");
          sub_22378DA40(v51, v52, (unsigned __int8 *)&v70, v53);
          if (!v70.i8[9])
          {
            v54 = v70.u8[0] != 84 && v70.u8[0] - 48 >= 0xA;
            if (!v54
              || v70.u8[1] == 84
              || v70.u8[1] - 48 <= 9
              || v70.u8[3] == 84
              || v70.u8[3] - 48 < 0xA)
            {
              goto LABEL_112;
            }
          }
          while (v50 != v45)
          {
            ++v50;
            if (!*(_BYTE *)a4)
              goto LABEL_100;
          }
        }
        ++v47;
        v36 = 1;
        ++v46;
        if (v48 == v45)
          goto LABEL_113;
      }
    }
    v36 = 1;
    if (v13)
LABEL_114:
      operator delete(v13);
  }
  else
  {
    v36 = sub_22378A600(v65, &__p, a3 + 1, a4);
    if (v13)
      goto LABEL_114;
  }
LABEL_115:
  if (__p)
    operator delete(__p);
  if (v62)
    operator delete(v62);
  return v36;
}

void sub_22378BB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v18;
  void *v19;

  if (v16)
  {
    operator delete(v16);
    v18 = __p;
    if (!__p)
    {
LABEL_3:
      v19 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v18 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v18);
  v19 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22378BBB8(__int128 *a1, uint64_t **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  char v17[16];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v8 = a2[1];
  if ((unint64_t)((char *)v8 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 >= 0x79uLL)
  {
    return sub_22378BDA0(a1, a2, (uint64_t **)a3, a4 + 1, a5);
  }
  if (v9 == v8)
    return 1;
  v10 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v10)
    return 1;
  while (*(_QWORD *)a3 == v10 || *(_BYTE *)a5 != 0)
  {
LABEL_6:
    if (++v9 == v8)
      return 1;
  }
  v10 = *(_QWORD *)a3 + 8;
LABEL_13:
  v12 = *(_QWORD *)*v9;
  v13 = **(_QWORD **)(v10 - 8);
  v14 = *(_QWORD *)(a5 + 8);
  strcpy(v17, "FFFFFFFFF");
  sub_22378DA40(v12, v13, (unsigned __int8 *)v17, v14);
  if (v17[9]
    || (v17[0] != 84 ? (v15 = v17[0] - 48 >= 0xA) : (v15 = 0),
        v15
     && v17[1] != 84
     && v17[1] - 48 > 9
     && v17[3] != 84
     && v17[3] - 48 > 9))
  {
    while (v10 != *(_QWORD *)(a3 + 8))
    {
      v10 += 8;
      if (!*(_BYTE *)a5)
        goto LABEL_13;
    }
    v8 = a2[1];
    goto LABEL_6;
  }
  result = 0;
  *(_BYTE *)a5 = 1;
  return result;
}

uint64_t sub_22378BDA0(__int128 *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t **v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t *i;
  uint64_t *v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  char *v75;
  uint64_t **v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t **v89;
  uint64_t **v90;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t **v99;
  uint64_t **v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  void *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  unint64_t v116;
  uint64_t *v117;
  void *__p;
  uint64_t *v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  char *v125;
  uint64_t v126;
  void *v127;
  uint64_t **v128;
  uint64_t v129;
  void *v130;
  uint64_t **v131;
  uint64_t v132;
  void *v133;
  uint64_t **v134;
  uint64_t v135;
  _OWORD v136[2];
  __int128 v137;
  __int128 v138;
  int64x2_t v139;
  int64x2_t v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a1;
  v10 = a1 + 1;
  v9 = *((_QWORD *)a1 + 2);
  if (&v137 != a1)
  {
    v11 = *v10;
    v137 = *a1;
    v138 = v11;
  }
  if (v136 != a1)
  {
    v12 = *v10;
    v136[0] = *a1;
    v136[1] = v12;
  }
  if (v9 >= 0)
    v13 = v9;
  else
    v13 = v9 + 1;
  v14 = v13 >> 1;
  if (v8 >= 0)
    v15 = v8;
  else
    v15 = v8 + 1;
  v16 = v15 >> 1;
  v17 = v9 - 2 * v14 + v8 - 2 * v16;
  *(_QWORD *)&v138 = v14 + v16 + ((v17 + ((v17 & 0x80) >> 7)) << 24 >> 25);
  v135 = 0;
  *(_QWORD *)&v136[0] = v138;
  v133 = 0;
  v134 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  __p = 0;
  v119 = 0;
  v120 = 0;
  sub_22378ADE8(&v137, v136, a2, (uint64_t **)&v133, (char **)&v130, (char **)&v127);
  sub_22378ADE8(&v137, v136, a3, (uint64_t **)&v124, (char **)&v121, (char **)&__p);
  v18 = (uint64_t *)v127;
  v19 = v128;
  v20 = (uint64_t *)__p;
  v116 = a4;
  v117 = (uint64_t *)__p;
  if (v127 == v128)
  {
    v22 = v119;
    goto LABEL_32;
  }
  v21 = (char *)v128 - (_BYTE *)v127;
  v22 = v119;
  if ((unint64_t)((char *)v128 - (_BYTE *)v127) < 0x80
    || a4 > 0x63
    || (unint64_t)((char *)v119 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v119)
    {
      v23 = (char *)__p + 8;
      v24 = (uint64_t **)v127;
      do
      {
        if (!*(_BYTE *)a5)
        {
          v25 = (uint64_t *)v23;
LABEL_19:
          v26 = **v24;
          v27 = *(_QWORD *)*(v25 - 1);
          v28 = *(_QWORD *)(a5 + 8);
          strcpy(v139.i8, "FFFFFFFFF");
          sub_22378DA40(v26, v27, (unsigned __int8 *)&v139, v28);
          if (!v139.i8[9])
          {
            v29 = v139.u8[0] != 84 && v139.u8[0] - 48 >= 0xA;
            if (!v29
              || v139.u8[1] == 84
              || v139.u8[1] - 48 <= 9
              || v139.u8[3] == 84
              || v139.u8[3] - 48 < 0xA)
            {
LABEL_246:
              v108 = 0;
              *(_BYTE *)a5 = 1;
              v109 = __p;
              if (!__p)
                goto LABEL_248;
              goto LABEL_247;
            }
          }
          while (v25 != v22)
          {
            ++v25;
            if (!*(_BYTE *)a5)
              goto LABEL_19;
          }
        }
        ++v24;
      }
      while (v24 != v19);
    }
    goto LABEL_117;
  }
  v43 = 0x7FFFFFFFFFFFFFFFLL;
  v44 = 0x8000000000000000;
  v139 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v140 = vdupq_n_s64(0x8000000000000000);
  v45 = 0x8000000000000000;
  v46 = 0x7FFFFFFFFFFFFFFFLL;
  v47 = (uint64_t *)v127;
  do
  {
    v48 = (uint64_t *)sub_22378AC50(*v47);
    v49 = *v48;
    if (*v48 >= v46)
    {
      if (v49 <= v45)
      {
LABEL_62:
        v50 = v48[1];
        if (v50 < v43)
          goto LABEL_63;
        goto LABEL_71;
      }
    }
    else
    {
      v139.i64[0] = *v48;
      v46 = v49;
      if (v49 <= v45)
        goto LABEL_62;
    }
    v140.i64[0] = v49;
    v45 = v49;
    v50 = v48[1];
    if (v50 < v43)
    {
LABEL_63:
      v139.i64[1] = v50;
      v43 = v50;
      if (v50 <= v44)
        goto LABEL_64;
      goto LABEL_72;
    }
LABEL_71:
    if (v50 <= v44)
    {
LABEL_64:
      v51 = v48[2];
      if (v51 < v46)
        goto LABEL_65;
      goto LABEL_73;
    }
LABEL_72:
    v140.i64[1] = v50;
    v44 = v50;
    v51 = v48[2];
    if (v51 < v46)
    {
LABEL_65:
      v139.i64[0] = v51;
      v46 = v51;
      if (v51 <= v45)
        goto LABEL_66;
      goto LABEL_74;
    }
LABEL_73:
    if (v51 <= v45)
    {
LABEL_66:
      v52 = v48[3];
      if (v52 >= v43)
        goto LABEL_75;
      goto LABEL_67;
    }
LABEL_74:
    v140.i64[0] = v51;
    v45 = v51;
    v52 = v48[3];
    if (v52 >= v43)
    {
LABEL_75:
      if (v52 <= v44)
        goto LABEL_59;
      goto LABEL_76;
    }
LABEL_67:
    v139.i64[1] = v52;
    v43 = v52;
    if (v52 <= v44)
      goto LABEL_59;
LABEL_76:
    v140.i64[1] = v52;
    v44 = v52;
LABEL_59:
    ++v47;
  }
  while (v47 != (uint64_t *)v19);
  if (v117 != v22)
  {
    for (i = v117; i != v22; ++i)
    {
      v60 = (uint64_t *)sub_22378AC50(*i);
      v61 = *v60;
      if (*v60 >= v46)
      {
        if (v61 <= v45)
        {
LABEL_101:
          v62 = v60[1];
          if (v62 < v43)
            goto LABEL_102;
          goto LABEL_110;
        }
      }
      else
      {
        v139.i64[0] = *v60;
        v46 = v61;
        if (v61 <= v45)
          goto LABEL_101;
      }
      v140.i64[0] = v61;
      v45 = v61;
      v62 = v60[1];
      if (v62 < v43)
      {
LABEL_102:
        v139.i64[1] = v62;
        v43 = v62;
        if (v62 <= v44)
          goto LABEL_103;
        goto LABEL_111;
      }
LABEL_110:
      if (v62 <= v44)
      {
LABEL_103:
        v63 = v60[2];
        if (v63 < v46)
          goto LABEL_104;
        goto LABEL_112;
      }
LABEL_111:
      v140.i64[1] = v62;
      v44 = v62;
      v63 = v60[2];
      if (v63 < v46)
      {
LABEL_104:
        v139.i64[0] = v63;
        v46 = v63;
        if (v63 <= v45)
          goto LABEL_105;
        goto LABEL_113;
      }
LABEL_112:
      if (v63 <= v45)
      {
LABEL_105:
        v64 = v60[3];
        if (v64 < v43)
          goto LABEL_106;
        goto LABEL_114;
      }
LABEL_113:
      v140.i64[0] = v63;
      v45 = v63;
      v64 = v60[3];
      if (v64 < v43)
      {
LABEL_106:
        v139.i64[1] = v64;
        v43 = v64;
        if (v64 > v44)
          goto LABEL_115;
        continue;
      }
LABEL_114:
      if (v64 > v44)
      {
LABEL_115:
        v140.i64[1] = v64;
        v44 = v64;
      }
    }
  }
  if ((sub_22378CBEC(&v139, &v127, &__p, v116 + 1, a5) & 1) == 0)
    goto LABEL_265;
LABEL_117:
  v65 = v125;
  if ((unint64_t)(v125 - (_BYTE *)v124) < 0x80
    || (unint64_t)(v122 - (_BYTE *)v121) < 0x80
    || v116 > 0x63
    || v21 < 0x79)
  {
    if (v124 == v125)
    {
LABEL_158:
      v82 = v122;
      if (v121 == v122)
      {
        v20 = v117;
        goto LABEL_32;
      }
      v83 = (char *)v121 + 8;
      v20 = v117;
      while (1)
      {
        if (!*(_BYTE *)a5)
        {
          v84 = v83;
LABEL_164:
          v85 = *(_QWORD *)*v18;
          v86 = **((_QWORD **)v84 - 1);
          v87 = *(_QWORD *)(a5 + 8);
          strcpy(v139.i8, "FFFFFFFFF");
          sub_22378DA40(v85, v86, (unsigned __int8 *)&v139, v87);
          if (!v139.i8[9])
          {
            v88 = v139.u8[0] != 84 && v139.u8[0] - 48 >= 0xA;
            if (!v88
              || v139.u8[1] == 84
              || v139.u8[1] - 48 <= 9
              || v139.u8[3] == 84
              || v139.u8[3] - 48 < 0xA)
            {
              goto LABEL_246;
            }
          }
          while (v84 != v82)
          {
            v84 += 8;
            if (!*(_BYTE *)a5)
              goto LABEL_164;
          }
        }
        if (++v18 == (uint64_t *)v19)
          goto LABEL_32;
      }
    }
    v75 = (char *)v124 + 8;
    v76 = (uint64_t **)v18;
    while (1)
    {
      if (!*(_BYTE *)a5)
      {
        v77 = v75;
LABEL_146:
        v78 = **v76;
        v79 = **((_QWORD **)v77 - 1);
        v80 = *(_QWORD *)(a5 + 8);
        strcpy(v139.i8, "FFFFFFFFF");
        sub_22378DA40(v78, v79, (unsigned __int8 *)&v139, v80);
        if (!v139.i8[9])
        {
          v81 = v139.u8[0] != 84 && v139.u8[0] - 48 >= 0xA;
          if (!v81
            || v139.u8[1] == 84
            || v139.u8[1] - 48 <= 9
            || v139.u8[3] == 84
            || v139.u8[3] - 48 < 0xA)
          {
            goto LABEL_246;
          }
        }
        while (v77 != v65)
        {
          v77 += 8;
          if (!*(_BYTE *)a5)
            goto LABEL_146;
        }
      }
      if (++v76 == v19)
        goto LABEL_158;
    }
  }
  v66 = 0x7FFFFFFFFFFFFFFFLL;
  v67 = 0x8000000000000000;
  v139 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v140 = vdupq_n_s64(0x8000000000000000);
  v68 = 0x8000000000000000;
  v69 = 0x7FFFFFFFFFFFFFFFLL;
  v20 = v117;
  while (2)
  {
    v70 = (uint64_t *)sub_22378AC50(*v18);
    v71 = *v70;
    if (*v70 >= v69)
    {
      if (v71 > v68)
        goto LABEL_133;
LABEL_125:
      v72 = v70[1];
      if (v72 < v66)
        goto LABEL_126;
LABEL_134:
      if (v72 > v67)
        goto LABEL_135;
LABEL_127:
      v73 = v70[2];
      if (v73 < v69)
        goto LABEL_128;
LABEL_136:
      if (v73 > v68)
        goto LABEL_137;
LABEL_129:
      v74 = v70[3];
      if (v74 < v66)
        goto LABEL_130;
LABEL_138:
      if (v74 > v67)
      {
LABEL_139:
        v140.i64[1] = v74;
        v67 = v74;
      }
    }
    else
    {
      v139.i64[0] = *v70;
      v69 = v71;
      if (v71 <= v68)
        goto LABEL_125;
LABEL_133:
      v140.i64[0] = v71;
      v68 = v71;
      v72 = v70[1];
      if (v72 >= v66)
        goto LABEL_134;
LABEL_126:
      v139.i64[1] = v72;
      v66 = v72;
      if (v72 <= v67)
        goto LABEL_127;
LABEL_135:
      v140.i64[1] = v72;
      v67 = v72;
      v73 = v70[2];
      if (v73 >= v69)
        goto LABEL_136;
LABEL_128:
      v139.i64[0] = v73;
      v69 = v73;
      if (v73 <= v68)
        goto LABEL_129;
LABEL_137:
      v140.i64[0] = v73;
      v68 = v73;
      v74 = v70[3];
      if (v74 >= v66)
        goto LABEL_138;
LABEL_130:
      v139.i64[1] = v74;
      v66 = v74;
      if (v74 > v67)
        goto LABEL_139;
    }
    if (++v18 != (uint64_t *)v19)
      continue;
    break;
  }
  if (!sub_22378CBEC(&v139, &v127, &v124, v116 + 1, a5)
    || (sub_22378CBEC(&v139, &v127, &v121, v116 + 1, a5) & 1) == 0)
  {
LABEL_265:
    v108 = 0;
    v109 = __p;
    if (!__p)
      goto LABEL_248;
LABEL_247:
    operator delete(v109);
    goto LABEL_248;
  }
LABEL_32:
  v31 = (uint64_t **)v133;
  v30 = v134;
  v32 = (char *)v134 - (_BYTE *)v133;
  if (v20 == v22)
    goto LABEL_181;
  v33 = v117;
  if (v32 < 0x80
    || (unint64_t)((char *)v131 - (_BYTE *)v130) < 0x80
    || v116 > 0x63
    || (unint64_t)((char *)v22 - (char *)v117) < 0x79)
  {
    if (v133 == v134)
    {
LABEL_176:
      v89 = (uint64_t **)v130;
      v90 = v131;
      if (v130 == v131 || v33 == v22)
        goto LABEL_181;
      while (1)
      {
        if (v117 != v22 && !*(_BYTE *)a5)
        {
          v110 = v117 + 1;
LABEL_234:
          v111 = **v89;
          v112 = *(_QWORD *)*(v110 - 1);
          v113 = *(_QWORD *)(a5 + 8);
          strcpy(v139.i8, "FFFFFFFFF");
          sub_22378DA40(v111, v112, (unsigned __int8 *)&v139, v113);
          if (!v139.i8[9])
          {
            v114 = v139.u8[0] != 84 && v139.u8[0] - 48 >= 0xA;
            if (!v114
              || v139.u8[1] == 84
              || v139.u8[1] - 48 <= 9
              || v139.u8[3] == 84
              || v139.u8[3] - 48 < 0xA)
            {
              goto LABEL_246;
            }
          }
          while (v110 != v22)
          {
            ++v110;
            if (!*(_BYTE *)a5)
              goto LABEL_234;
          }
        }
        if (++v89 == v90)
          goto LABEL_181;
      }
    }
    v53 = (uint64_t **)v133;
    while (1)
    {
      if (v33 != v22 && !*(_BYTE *)a5)
      {
        v54 = v117 + 1;
LABEL_84:
        v55 = **v53;
        v56 = *(_QWORD *)*(v54 - 1);
        v57 = *(_QWORD *)(a5 + 8);
        strcpy(v139.i8, "FFFFFFFFF");
        sub_22378DA40(v55, v56, (unsigned __int8 *)&v139, v57);
        if (!v139.i8[9])
        {
          v58 = v139.u8[0] != 84 && v139.u8[0] - 48 >= 0xA;
          if (!v58
            || v139.u8[1] == 84
            || v139.u8[1] - 48 <= 9
            || v139.u8[3] == 84
            || v139.u8[3] - 48 < 0xA)
          {
            goto LABEL_246;
          }
        }
        while (v54 != v22)
        {
          ++v54;
          if (!*(_BYTE *)a5)
            goto LABEL_84;
        }
        v33 = v117;
      }
      if (++v53 == v30)
        goto LABEL_176;
    }
  }
  v34 = 0x7FFFFFFFFFFFFFFFLL;
  v35 = 0x8000000000000000;
  v139 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v140 = vdupq_n_s64(0x8000000000000000);
  v36 = 0x8000000000000000;
  v37 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v38 = (uint64_t *)sub_22378AC50(*v33);
    v39 = *v38;
    if (*v38 >= v37)
    {
      if (v39 > v36)
        goto LABEL_49;
LABEL_41:
      v40 = v38[1];
      if (v40 < v34)
        goto LABEL_42;
LABEL_50:
      if (v40 > v35)
        goto LABEL_51;
LABEL_43:
      v41 = v38[2];
      if (v41 < v37)
        goto LABEL_44;
LABEL_52:
      if (v41 > v36)
        goto LABEL_53;
LABEL_45:
      v42 = v38[3];
      if (v42 < v34)
        goto LABEL_46;
LABEL_54:
      if (v42 > v35)
      {
LABEL_55:
        v140.i64[1] = v42;
        v35 = v42;
      }
    }
    else
    {
      v139.i64[0] = *v38;
      v37 = v39;
      if (v39 <= v36)
        goto LABEL_41;
LABEL_49:
      v140.i64[0] = v39;
      v36 = v39;
      v40 = v38[1];
      if (v40 >= v34)
        goto LABEL_50;
LABEL_42:
      v139.i64[1] = v40;
      v34 = v40;
      if (v40 <= v35)
        goto LABEL_43;
LABEL_51:
      v140.i64[1] = v40;
      v35 = v40;
      v41 = v38[2];
      if (v41 >= v37)
        goto LABEL_52;
LABEL_44:
      v139.i64[0] = v41;
      v37 = v41;
      if (v41 <= v36)
        goto LABEL_45;
LABEL_53:
      v140.i64[0] = v41;
      v36 = v41;
      v42 = v38[3];
      if (v42 >= v34)
        goto LABEL_54;
LABEL_46:
      v139.i64[1] = v42;
      v34 = v42;
      if (v42 > v35)
        goto LABEL_55;
    }
    if (++v33 != v22)
      continue;
    break;
  }
  if (!sub_22378CBEC(&v139, &v133, &__p, v116 + 1, a5)
    || (sub_22378CBEC(&v139, &v130, &__p, v116 + 1, a5) & 1) == 0)
  {
    goto LABEL_265;
  }
LABEL_181:
  if (v32 < 0x80 || v116 > 0x63 || (unint64_t)(v125 - (_BYTE *)v124) < 0x79)
  {
    if (v31 != v30)
    {
      v92 = v125;
      if (v124 != v125)
      {
        v93 = (char *)v124 + 8;
        do
        {
          if (!*(_BYTE *)a5)
          {
            v94 = v93;
LABEL_189:
            v95 = **v31;
            v96 = **((_QWORD **)v94 - 1);
            v97 = *(_QWORD *)(a5 + 8);
            strcpy(v139.i8, "FFFFFFFFF");
            sub_22378DA40(v95, v96, (unsigned __int8 *)&v139, v97);
            if (!v139.i8[9])
            {
              v98 = v139.u8[0] != 84 && v139.u8[0] - 48 >= 0xA;
              if (!v98
                || v139.u8[1] == 84
                || v139.u8[1] - 48 <= 9
                || v139.u8[3] == 84
                || v139.u8[3] - 48 < 0xA)
              {
                goto LABEL_246;
              }
            }
            while (v94 != v92)
            {
              v94 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_189;
            }
          }
          ++v31;
        }
        while (v31 != v30);
      }
    }
  }
  else if ((sub_22378CBEC(&v137, &v133, &v124, v116 + 1, a5) & 1) == 0)
  {
    goto LABEL_265;
  }
  v100 = (uint64_t **)v130;
  v99 = v131;
  if ((unint64_t)((char *)v131 - (_BYTE *)v130) < 0x80
    || v116 > 0x63
    || (unint64_t)(v122 - (_BYTE *)v121) < 0x79)
  {
    if (v130 != v131)
    {
      v101 = v122;
      if (v121 != v122)
      {
        v102 = (char *)v121 + 8;
        do
        {
          if (!*(_BYTE *)a5)
          {
            v103 = v102;
LABEL_212:
            v104 = **v100;
            v105 = **((_QWORD **)v103 - 1);
            v106 = *(_QWORD *)(a5 + 8);
            strcpy(v139.i8, "FFFFFFFFF");
            sub_22378DA40(v104, v105, (unsigned __int8 *)&v139, v106);
            if (!v139.i8[9])
            {
              v107 = v139.u8[0] != 84 && v139.u8[0] - 48 >= 0xA;
              if (!v107
                || v139.u8[1] == 84
                || v139.u8[1] - 48 <= 9
                || v139.u8[3] == 84
                || v139.u8[3] - 48 < 0xA)
              {
                goto LABEL_246;
              }
            }
            while (v103 != v101)
            {
              v103 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_212;
            }
          }
          ++v100;
        }
        while (v100 != v99);
      }
    }
  }
  else if ((sub_22378CBEC(v136, &v130, &v121, v116 + 1, a5) & 1) == 0)
  {
    goto LABEL_265;
  }
  v108 = 1;
  v109 = __p;
  if (__p)
    goto LABEL_247;
LABEL_248:
  if (v121)
    operator delete(v121);
  if (v124)
    operator delete(v124);
  if (v127)
    operator delete(v127);
  if (v130)
    operator delete(v130);
  if (v133)
    operator delete(v133);
  return v108;
}

void sub_22378CB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (__p)
  {
    operator delete(__p);
    v29 = a16;
    if (!a16)
    {
LABEL_3:
      v30 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v29 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = a19;
  if (!a19)
  {
LABEL_4:
    v31 = a22;
    if (!a22)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v30);
  v31 = a22;
  if (!a22)
  {
LABEL_5:
    v32 = a25;
    if (!a25)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v31);
  v32 = a25;
  if (!a25)
  {
LABEL_6:
    v33 = a28;
    if (!a28)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v32);
  v33 = a28;
  if (!a28)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22378CBEC(uint64_t a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t **v27;
  uint64_t **v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t *i;
  uint64_t *v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t *v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  char *v72;
  uint64_t **v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t **v86;
  uint64_t **v87;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t **v96;
  uint64_t **v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  void *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  unint64_t v113;
  uint64_t *v114;
  void *__p;
  uint64_t *v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  uint64_t **v125;
  uint64_t v126;
  void *v127;
  uint64_t **v128;
  uint64_t v129;
  void *v130;
  uint64_t **v131;
  uint64_t v132;
  __int128 v133[2];
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  int64x2_t v137;
  int64x2_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 24);
  if (&v134 != (__int128 *)a1)
  {
    v134 = *(_OWORD *)a1;
    v135 = *(_QWORD *)(a1 + 16);
  }
  if (v133 != (__int128 *)a1)
  {
    *(_QWORD *)&v133[0] = *(_QWORD *)a1;
    v133[1] = *(_OWORD *)(a1 + 16);
  }
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = v9 + 1;
  v11 = v10 >> 1;
  if (v8 >= 0)
    v12 = v8;
  else
    v12 = v8 + 1;
  v13 = v12 >> 1;
  v14 = v9 - 2 * v11 + v8 - 2 * v13;
  v136 = v11 + v13 + ((v14 + ((v14 & 0x80) >> 7)) << 24 >> 25);
  *((_QWORD *)&v133[0] + 1) = v136;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  __p = 0;
  v116 = 0;
  v117 = 0;
  sub_22378ADE8(&v134, v133, a2, (uint64_t **)&v130, (char **)&v127, (char **)&v124);
  sub_22378ADE8(&v134, v133, a3, (uint64_t **)&v121, (char **)&v118, (char **)&__p);
  v15 = (uint64_t *)v124;
  v16 = v125;
  v17 = (uint64_t *)__p;
  v113 = a4;
  v114 = (uint64_t *)__p;
  if (v124 == v125)
  {
    v19 = v116;
    goto LABEL_32;
  }
  v18 = (char *)v125 - (_BYTE *)v124;
  v19 = v116;
  if ((unint64_t)((char *)v125 - (_BYTE *)v124) < 0x80
    || a4 > 0x63
    || (unint64_t)((char *)v116 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v116)
    {
      v20 = (char *)__p + 8;
      v21 = (uint64_t **)v124;
      do
      {
        if (!*(_BYTE *)a5)
        {
          v22 = (uint64_t *)v20;
LABEL_19:
          v23 = **v21;
          v24 = *(_QWORD *)*(v22 - 1);
          v25 = *(_QWORD *)(a5 + 8);
          strcpy(v137.i8, "FFFFFFFFF");
          sub_22378DA40(v23, v24, (unsigned __int8 *)&v137, v25);
          if (!v137.i8[9])
          {
            v26 = v137.u8[0] != 84 && v137.u8[0] - 48 >= 0xA;
            if (!v26
              || v137.u8[1] == 84
              || v137.u8[1] - 48 <= 9
              || v137.u8[3] == 84
              || v137.u8[3] - 48 < 0xA)
            {
LABEL_246:
              v105 = 0;
              *(_BYTE *)a5 = 1;
              v106 = __p;
              if (!__p)
                goto LABEL_248;
              goto LABEL_247;
            }
          }
          while (v22 != v19)
          {
            ++v22;
            if (!*(_BYTE *)a5)
              goto LABEL_19;
          }
        }
        ++v21;
      }
      while (v21 != v16);
    }
    goto LABEL_117;
  }
  v40 = 0x7FFFFFFFFFFFFFFFLL;
  v41 = 0x8000000000000000;
  v137 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v138 = vdupq_n_s64(0x8000000000000000);
  v42 = 0x8000000000000000;
  v43 = 0x7FFFFFFFFFFFFFFFLL;
  v44 = (uint64_t *)v124;
  do
  {
    v45 = (uint64_t *)sub_22378AC50(*v44);
    v46 = *v45;
    if (*v45 >= v43)
    {
      if (v46 <= v42)
      {
LABEL_62:
        v47 = v45[1];
        if (v47 < v40)
          goto LABEL_63;
        goto LABEL_71;
      }
    }
    else
    {
      v137.i64[0] = *v45;
      v43 = v46;
      if (v46 <= v42)
        goto LABEL_62;
    }
    v138.i64[0] = v46;
    v42 = v46;
    v47 = v45[1];
    if (v47 < v40)
    {
LABEL_63:
      v137.i64[1] = v47;
      v40 = v47;
      if (v47 <= v41)
        goto LABEL_64;
      goto LABEL_72;
    }
LABEL_71:
    if (v47 <= v41)
    {
LABEL_64:
      v48 = v45[2];
      if (v48 < v43)
        goto LABEL_65;
      goto LABEL_73;
    }
LABEL_72:
    v138.i64[1] = v47;
    v41 = v47;
    v48 = v45[2];
    if (v48 < v43)
    {
LABEL_65:
      v137.i64[0] = v48;
      v43 = v48;
      if (v48 <= v42)
        goto LABEL_66;
      goto LABEL_74;
    }
LABEL_73:
    if (v48 <= v42)
    {
LABEL_66:
      v49 = v45[3];
      if (v49 >= v40)
        goto LABEL_75;
      goto LABEL_67;
    }
LABEL_74:
    v138.i64[0] = v48;
    v42 = v48;
    v49 = v45[3];
    if (v49 >= v40)
    {
LABEL_75:
      if (v49 <= v41)
        goto LABEL_59;
      goto LABEL_76;
    }
LABEL_67:
    v137.i64[1] = v49;
    v40 = v49;
    if (v49 <= v41)
      goto LABEL_59;
LABEL_76:
    v138.i64[1] = v49;
    v41 = v49;
LABEL_59:
    ++v44;
  }
  while (v44 != (uint64_t *)v16);
  if (v114 != v19)
  {
    for (i = v114; i != v19; ++i)
    {
      v57 = (uint64_t *)sub_22378AC50(*i);
      v58 = *v57;
      if (*v57 >= v43)
      {
        if (v58 <= v42)
        {
LABEL_101:
          v59 = v57[1];
          if (v59 < v40)
            goto LABEL_102;
          goto LABEL_110;
        }
      }
      else
      {
        v137.i64[0] = *v57;
        v43 = v58;
        if (v58 <= v42)
          goto LABEL_101;
      }
      v138.i64[0] = v58;
      v42 = v58;
      v59 = v57[1];
      if (v59 < v40)
      {
LABEL_102:
        v137.i64[1] = v59;
        v40 = v59;
        if (v59 <= v41)
          goto LABEL_103;
        goto LABEL_111;
      }
LABEL_110:
      if (v59 <= v41)
      {
LABEL_103:
        v60 = v57[2];
        if (v60 < v43)
          goto LABEL_104;
        goto LABEL_112;
      }
LABEL_111:
      v138.i64[1] = v59;
      v41 = v59;
      v60 = v57[2];
      if (v60 < v43)
      {
LABEL_104:
        v137.i64[0] = v60;
        v43 = v60;
        if (v60 <= v42)
          goto LABEL_105;
        goto LABEL_113;
      }
LABEL_112:
      if (v60 <= v42)
      {
LABEL_105:
        v61 = v57[3];
        if (v61 < v40)
          goto LABEL_106;
        goto LABEL_114;
      }
LABEL_113:
      v138.i64[0] = v60;
      v42 = v60;
      v61 = v57[3];
      if (v61 < v40)
      {
LABEL_106:
        v137.i64[1] = v61;
        v40 = v61;
        if (v61 > v41)
          goto LABEL_115;
        continue;
      }
LABEL_114:
      if (v61 > v41)
      {
LABEL_115:
        v138.i64[1] = v61;
        v41 = v61;
      }
    }
  }
  if ((sub_22378BDA0((__int128 *)v137.i8, (uint64_t **)&v124, (uint64_t **)&__p, v113 + 1, a5) & 1) == 0)
    goto LABEL_265;
LABEL_117:
  v62 = v122;
  if ((unint64_t)(v122 - (_BYTE *)v121) < 0x80
    || (unint64_t)(v119 - (_BYTE *)v118) < 0x80
    || v113 > 0x63
    || v18 < 0x79)
  {
    if (v121 == v122)
    {
LABEL_158:
      v79 = v119;
      if (v118 == v119)
      {
        v17 = v114;
        goto LABEL_32;
      }
      v80 = (char *)v118 + 8;
      v17 = v114;
      while (1)
      {
        if (!*(_BYTE *)a5)
        {
          v81 = v80;
LABEL_164:
          v82 = *(_QWORD *)*v15;
          v83 = **((_QWORD **)v81 - 1);
          v84 = *(_QWORD *)(a5 + 8);
          strcpy(v137.i8, "FFFFFFFFF");
          sub_22378DA40(v82, v83, (unsigned __int8 *)&v137, v84);
          if (!v137.i8[9])
          {
            v85 = v137.u8[0] != 84 && v137.u8[0] - 48 >= 0xA;
            if (!v85
              || v137.u8[1] == 84
              || v137.u8[1] - 48 <= 9
              || v137.u8[3] == 84
              || v137.u8[3] - 48 < 0xA)
            {
              goto LABEL_246;
            }
          }
          while (v81 != v79)
          {
            v81 += 8;
            if (!*(_BYTE *)a5)
              goto LABEL_164;
          }
        }
        if (++v15 == (uint64_t *)v16)
          goto LABEL_32;
      }
    }
    v72 = (char *)v121 + 8;
    v73 = (uint64_t **)v15;
    while (1)
    {
      if (!*(_BYTE *)a5)
      {
        v74 = v72;
LABEL_146:
        v75 = **v73;
        v76 = **((_QWORD **)v74 - 1);
        v77 = *(_QWORD *)(a5 + 8);
        strcpy(v137.i8, "FFFFFFFFF");
        sub_22378DA40(v75, v76, (unsigned __int8 *)&v137, v77);
        if (!v137.i8[9])
        {
          v78 = v137.u8[0] != 84 && v137.u8[0] - 48 >= 0xA;
          if (!v78
            || v137.u8[1] == 84
            || v137.u8[1] - 48 <= 9
            || v137.u8[3] == 84
            || v137.u8[3] - 48 < 0xA)
          {
            goto LABEL_246;
          }
        }
        while (v74 != v62)
        {
          v74 += 8;
          if (!*(_BYTE *)a5)
            goto LABEL_146;
        }
      }
      if (++v73 == v16)
        goto LABEL_158;
    }
  }
  v63 = 0x7FFFFFFFFFFFFFFFLL;
  v64 = 0x8000000000000000;
  v137 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v138 = vdupq_n_s64(0x8000000000000000);
  v65 = 0x8000000000000000;
  v66 = 0x7FFFFFFFFFFFFFFFLL;
  v17 = v114;
  while (2)
  {
    v67 = (uint64_t *)sub_22378AC50(*v15);
    v68 = *v67;
    if (*v67 >= v66)
    {
      if (v68 > v65)
        goto LABEL_133;
LABEL_125:
      v69 = v67[1];
      if (v69 < v63)
        goto LABEL_126;
LABEL_134:
      if (v69 > v64)
        goto LABEL_135;
LABEL_127:
      v70 = v67[2];
      if (v70 < v66)
        goto LABEL_128;
LABEL_136:
      if (v70 > v65)
        goto LABEL_137;
LABEL_129:
      v71 = v67[3];
      if (v71 < v63)
        goto LABEL_130;
LABEL_138:
      if (v71 > v64)
      {
LABEL_139:
        v138.i64[1] = v71;
        v64 = v71;
      }
    }
    else
    {
      v137.i64[0] = *v67;
      v66 = v68;
      if (v68 <= v65)
        goto LABEL_125;
LABEL_133:
      v138.i64[0] = v68;
      v65 = v68;
      v69 = v67[1];
      if (v69 >= v63)
        goto LABEL_134;
LABEL_126:
      v137.i64[1] = v69;
      v63 = v69;
      if (v69 <= v64)
        goto LABEL_127;
LABEL_135:
      v138.i64[1] = v69;
      v64 = v69;
      v70 = v67[2];
      if (v70 >= v66)
        goto LABEL_136;
LABEL_128:
      v137.i64[0] = v70;
      v66 = v70;
      if (v70 <= v65)
        goto LABEL_129;
LABEL_137:
      v138.i64[0] = v70;
      v65 = v70;
      v71 = v67[3];
      if (v71 >= v63)
        goto LABEL_138;
LABEL_130:
      v137.i64[1] = v71;
      v63 = v71;
      if (v71 > v64)
        goto LABEL_139;
    }
    if (++v15 != (uint64_t *)v16)
      continue;
    break;
  }
  if (!sub_22378BDA0((__int128 *)v137.i8, (uint64_t **)&v124, (uint64_t **)&v121, v113 + 1, a5)
    || (sub_22378BDA0((__int128 *)v137.i8, (uint64_t **)&v124, (uint64_t **)&v118, v113 + 1, a5) & 1) == 0)
  {
LABEL_265:
    v105 = 0;
    v106 = __p;
    if (!__p)
      goto LABEL_248;
LABEL_247:
    operator delete(v106);
    goto LABEL_248;
  }
LABEL_32:
  v28 = (uint64_t **)v130;
  v27 = v131;
  v29 = (char *)v131 - (_BYTE *)v130;
  if (v17 == v19)
    goto LABEL_181;
  v30 = v114;
  if (v29 < 0x80
    || (unint64_t)((char *)v128 - (_BYTE *)v127) < 0x80
    || v113 > 0x63
    || (unint64_t)((char *)v19 - (char *)v114) < 0x79)
  {
    if (v130 == v131)
    {
LABEL_176:
      v86 = (uint64_t **)v127;
      v87 = v128;
      if (v127 == v128 || v30 == v19)
        goto LABEL_181;
      while (1)
      {
        if (v114 != v19 && !*(_BYTE *)a5)
        {
          v107 = v114 + 1;
LABEL_234:
          v108 = **v86;
          v109 = *(_QWORD *)*(v107 - 1);
          v110 = *(_QWORD *)(a5 + 8);
          strcpy(v137.i8, "FFFFFFFFF");
          sub_22378DA40(v108, v109, (unsigned __int8 *)&v137, v110);
          if (!v137.i8[9])
          {
            v111 = v137.u8[0] != 84 && v137.u8[0] - 48 >= 0xA;
            if (!v111
              || v137.u8[1] == 84
              || v137.u8[1] - 48 <= 9
              || v137.u8[3] == 84
              || v137.u8[3] - 48 < 0xA)
            {
              goto LABEL_246;
            }
          }
          while (v107 != v19)
          {
            ++v107;
            if (!*(_BYTE *)a5)
              goto LABEL_234;
          }
        }
        if (++v86 == v87)
          goto LABEL_181;
      }
    }
    v50 = (uint64_t **)v130;
    while (1)
    {
      if (v30 != v19 && !*(_BYTE *)a5)
      {
        v51 = v114 + 1;
LABEL_84:
        v52 = **v50;
        v53 = *(_QWORD *)*(v51 - 1);
        v54 = *(_QWORD *)(a5 + 8);
        strcpy(v137.i8, "FFFFFFFFF");
        sub_22378DA40(v52, v53, (unsigned __int8 *)&v137, v54);
        if (!v137.i8[9])
        {
          v55 = v137.u8[0] != 84 && v137.u8[0] - 48 >= 0xA;
          if (!v55
            || v137.u8[1] == 84
            || v137.u8[1] - 48 <= 9
            || v137.u8[3] == 84
            || v137.u8[3] - 48 < 0xA)
          {
            goto LABEL_246;
          }
        }
        while (v51 != v19)
        {
          ++v51;
          if (!*(_BYTE *)a5)
            goto LABEL_84;
        }
        v30 = v114;
      }
      if (++v50 == v27)
        goto LABEL_176;
    }
  }
  v31 = 0x7FFFFFFFFFFFFFFFLL;
  v32 = 0x8000000000000000;
  v137 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v138 = vdupq_n_s64(0x8000000000000000);
  v33 = 0x8000000000000000;
  v34 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v35 = (uint64_t *)sub_22378AC50(*v30);
    v36 = *v35;
    if (*v35 >= v34)
    {
      if (v36 > v33)
        goto LABEL_49;
LABEL_41:
      v37 = v35[1];
      if (v37 < v31)
        goto LABEL_42;
LABEL_50:
      if (v37 > v32)
        goto LABEL_51;
LABEL_43:
      v38 = v35[2];
      if (v38 < v34)
        goto LABEL_44;
LABEL_52:
      if (v38 > v33)
        goto LABEL_53;
LABEL_45:
      v39 = v35[3];
      if (v39 < v31)
        goto LABEL_46;
LABEL_54:
      if (v39 > v32)
      {
LABEL_55:
        v138.i64[1] = v39;
        v32 = v39;
      }
    }
    else
    {
      v137.i64[0] = *v35;
      v34 = v36;
      if (v36 <= v33)
        goto LABEL_41;
LABEL_49:
      v138.i64[0] = v36;
      v33 = v36;
      v37 = v35[1];
      if (v37 >= v31)
        goto LABEL_50;
LABEL_42:
      v137.i64[1] = v37;
      v31 = v37;
      if (v37 <= v32)
        goto LABEL_43;
LABEL_51:
      v138.i64[1] = v37;
      v32 = v37;
      v38 = v35[2];
      if (v38 >= v34)
        goto LABEL_52;
LABEL_44:
      v137.i64[0] = v38;
      v34 = v38;
      if (v38 <= v33)
        goto LABEL_45;
LABEL_53:
      v138.i64[0] = v38;
      v33 = v38;
      v39 = v35[3];
      if (v39 >= v31)
        goto LABEL_54;
LABEL_46:
      v137.i64[1] = v39;
      v31 = v39;
      if (v39 > v32)
        goto LABEL_55;
    }
    if (++v30 != v19)
      continue;
    break;
  }
  if (!sub_22378BDA0((__int128 *)v137.i8, (uint64_t **)&v130, (uint64_t **)&__p, v113 + 1, a5)
    || (sub_22378BDA0((__int128 *)v137.i8, (uint64_t **)&v127, (uint64_t **)&__p, v113 + 1, a5) & 1) == 0)
  {
    goto LABEL_265;
  }
LABEL_181:
  if (v29 < 0x80 || v113 > 0x63 || (unint64_t)(v122 - (_BYTE *)v121) < 0x79)
  {
    if (v28 != v27)
    {
      v89 = v122;
      if (v121 != v122)
      {
        v90 = (char *)v121 + 8;
        do
        {
          if (!*(_BYTE *)a5)
          {
            v91 = v90;
LABEL_189:
            v92 = **v28;
            v93 = **((_QWORD **)v91 - 1);
            v94 = *(_QWORD *)(a5 + 8);
            strcpy(v137.i8, "FFFFFFFFF");
            sub_22378DA40(v92, v93, (unsigned __int8 *)&v137, v94);
            if (!v137.i8[9])
            {
              v95 = v137.u8[0] != 84 && v137.u8[0] - 48 >= 0xA;
              if (!v95
                || v137.u8[1] == 84
                || v137.u8[1] - 48 <= 9
                || v137.u8[3] == 84
                || v137.u8[3] - 48 < 0xA)
              {
                goto LABEL_246;
              }
            }
            while (v91 != v89)
            {
              v91 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_189;
            }
          }
          ++v28;
        }
        while (v28 != v27);
      }
    }
  }
  else if ((sub_22378BDA0(&v134, (uint64_t **)&v130, (uint64_t **)&v121, v113 + 1, a5) & 1) == 0)
  {
    goto LABEL_265;
  }
  v97 = (uint64_t **)v127;
  v96 = v128;
  if ((unint64_t)((char *)v128 - (_BYTE *)v127) < 0x80
    || v113 > 0x63
    || (unint64_t)(v119 - (_BYTE *)v118) < 0x79)
  {
    if (v127 != v128)
    {
      v98 = v119;
      if (v118 != v119)
      {
        v99 = (char *)v118 + 8;
        do
        {
          if (!*(_BYTE *)a5)
          {
            v100 = v99;
LABEL_212:
            v101 = **v97;
            v102 = **((_QWORD **)v100 - 1);
            v103 = *(_QWORD *)(a5 + 8);
            strcpy(v137.i8, "FFFFFFFFF");
            sub_22378DA40(v101, v102, (unsigned __int8 *)&v137, v103);
            if (!v137.i8[9])
            {
              v104 = v137.u8[0] != 84 && v137.u8[0] - 48 >= 0xA;
              if (!v104
                || v137.u8[1] == 84
                || v137.u8[1] - 48 <= 9
                || v137.u8[3] == 84
                || v137.u8[3] - 48 < 0xA)
              {
                goto LABEL_246;
              }
            }
            while (v100 != v98)
            {
              v100 += 8;
              if (!*(_BYTE *)a5)
                goto LABEL_212;
            }
          }
          ++v97;
        }
        while (v97 != v96);
      }
    }
  }
  else if ((sub_22378BDA0(v133, (uint64_t **)&v127, (uint64_t **)&v118, v113 + 1, a5) & 1) == 0)
  {
    goto LABEL_265;
  }
  v105 = 1;
  v106 = __p;
  if (__p)
    goto LABEL_247;
LABEL_248:
  if (v118)
    operator delete(v118);
  if (v121)
    operator delete(v121);
  if (v124)
    operator delete(v124);
  if (v127)
    operator delete(v127);
  if (v130)
    operator delete(v130);
  return v105;
}

void sub_22378D994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (__p)
  {
    operator delete(__p);
    v29 = a16;
    if (!a16)
    {
LABEL_3:
      v30 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v29 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = a19;
  if (!a19)
  {
LABEL_4:
    v31 = a22;
    if (!a22)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v30);
  v31 = a22;
  if (!a22)
  {
LABEL_5:
    v32 = a25;
    if (!a25)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v31);
  v32 = a25;
  if (!a25)
  {
LABEL_6:
    v33 = a28;
    if (!a28)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v32);
  v33 = a28;
  if (!a28)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_22378DA40(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  __n128 v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  _QWORD *v17;
  __n128 *v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 ***v24;
  unsigned __int8 ***v25;
  unsigned __int8 *i;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 **v29;
  unsigned __int8 **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned __int8 **v40;
  unsigned __int8 **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 ***v45;
  unsigned __int8 ***v46;
  unsigned __int8 **v47;
  unsigned __int8 **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 *v52;
  unsigned __int8 **v53;
  __n128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 ***v58;
  unsigned __int8 ***v59;
  unsigned __int8 **v60;
  unsigned __int8 **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unsigned __int8 **v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 ***v76;
  unsigned __int8 ***v77;
  unsigned __int8 **v78;
  unsigned __int8 **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unsigned __int8 **v87;
  unsigned __int8 **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned __int8 ***v93;
  unsigned __int8 ***v94;
  unsigned __int8 **v95;
  unsigned __int8 **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  unsigned __int8 **v108;
  __n128 *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned __int8 ***v114;
  unsigned __int8 ***v115;
  unsigned __int8 **v116;
  unsigned __int8 **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  _QWORD *v124;
  _QWORD *v125;
  int v126;
  int v127;
  _BOOL4 v128;
  int v129;
  int v130;
  char *v131;
  _QWORD *v132;
  char v133;
  int v134;
  int v135;
  int v136;
  _DWORD *v137;
  int v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  _BOOL4 v144;
  int v145;
  uint64_t v147;
  unsigned __int8 *v148[3];
  void *v149;
  _QWORD *v150;
  uint64_t v151;
  char v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  _OWORD v159[2];
  void *__p[3];
  char *v161[3];
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  void **v167;
  unsigned __int8 **v168;
  uint64_t v169;
  uint64_t v170;

  if (a3[9])
    return;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v148[0] = a3;
  v148[1] = (unsigned __int8 *)a1;
  v148[2] = (unsigned __int8 *)a2;
  v152 = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v153 = 0;
  v155 = 0;
  *(_QWORD *)&v163 = -1;
  *((_QWORD *)&v163 + 1) = -1;
  v162 = 0;
  sub_22378F718((_QWORD *)a1, (uint64_t)&v156, (uint64_t)&v162);
  v154 = 0;
  *(_QWORD *)&v163 = -1;
  *((_QWORD *)&v163 + 1) = -1;
  v162 = 1;
  sub_22378F718((_QWORD *)a2, (uint64_t)&v153, (uint64_t)&v162);
  LODWORD(v162) = 0;
  *(_QWORD *)&v163 = a1;
  DWORD2(v163) = 1;
  v164 = a2;
  v165 = a4;
  v147 = a4;
  v166 = &v152;
  v167 = &v149;
  v168 = v148;
  v8 = v156;
  v9 = v157;
  v10 = v153;
  if (0xEEEEEEEEEEEEEEEFLL * (v157 - v156) < 0x11 || 0xEEEEEEEEEEEEEEEFLL * (v154 - v153) < 0x11)
  {
    if (v156 != v157)
    {
      v11 = v154;
      if (v153 != v154)
      {
        v12 = v156;
LABEL_12:
        v13 = v10;
        while (1)
        {
          if (v12[6] >= v13[4] && v12[4] <= v13[6])
          {
            v14 = v12[7] >= v13[5] && v12[5] <= v13[7];
            if (v14
              && !sub_223791190(0, (uint64_t *)a1, (uint64_t)v12, 1, (uint64_t *)a2, (uint64_t)v13, v147, (uint64_t)&v152, &v149, v148))
            {
              break;
            }
          }
          v13 += 15;
          if (v13 == v11)
          {
            v12 += 15;
            if (v12 == v9)
              break;
            goto LABEL_12;
          }
        }
      }
    }
  }
  else
  {
    memset(v161, 0, sizeof(v161));
    memset(__p, 0, sizeof(__p));
    v159[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v159[1] = vdupq_n_s64(0x8000000000000000);
    sub_22376AE7C(&v156, (uint64_t *)v159, v161);
    sub_22376AE7C(&v153, (uint64_t *)v159, (char **)__p);
    sub_22378F834((uint64_t)v159, v161, __p, 0, (uint64_t)&v162);
    if (__p[0])
      operator delete(__p[0]);
    if (v161[0])
      operator delete(v161[0]);
  }
  if (v10)
    operator delete(v10);
  if (v8)
    operator delete(v8);
  v15 = a3;
  v16 = v149;
  if (a3[9])
    goto LABEL_251;
  v17 = v150;
  if (v149 != v150)
    goto LABEL_28;
  if (*a3 != 70 && a3[3] != 70)
    goto LABEL_75;
  v18 = *(__n128 **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    goto LABEL_74;
  v7 = *v18;
  v159[0] = *v18;
  v20 = *(unsigned __int8 ***)a2;
  v19 = *(unsigned __int8 ***)(a2 + 8);
  v21 = (uint64_t)v19 - *(_QWORD *)a2;
  if ((unint64_t)v21 < 0x30)
    goto LABEL_50;
  v22 = v21 >> 4;
  v23 = v19 == v20 ? 0 : v22 + 1;
  v162 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v163 = v20;
  *((_QWORD *)&v163 + 1) = v19;
  v164 = v22;
  v165 = v23;
  v166 = (char *)v20;
  v167 = (void **)v20;
  v168 = v19;
  v169 = v22;
  v170 = 0;
  if (sub_2237743EC((uint64_t *)v159, (uint64_t **)&v162) != 1)
  {
LABEL_50:
    v34 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
    if (!v34)
      goto LABEL_74;
    v35 = 0;
    v36 = v34 / 24;
    if (v36 <= 1)
      v37 = 1;
    else
      v37 = v36;
    while (1)
    {
      v38 = *(_QWORD *)(a1 + 24) + 24 * v35;
      v39 = *(uint64_t **)v38;
      if (*(_QWORD *)v38 != *(_QWORD *)(v38 + 8))
      {
        v41 = *(unsigned __int8 ***)a2;
        v40 = *(unsigned __int8 ***)(a2 + 8);
        v42 = (uint64_t)v40 - *(_QWORD *)a2;
        if ((unint64_t)v42 >= 0x30)
        {
          v43 = v42 >> 4;
          v44 = v40 == v41 ? 0 : v43 + 1;
          v162 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)&v163 = v41;
          *((_QWORD *)&v163 + 1) = v40;
          v164 = v43;
          v165 = v44;
          v166 = (char *)v41;
          v167 = (void **)v41;
          v168 = v40;
          v169 = v43;
          v170 = 0;
          if (sub_2237743EC(v39, (uint64_t **)&v162) == 1)
            break;
        }
      }
LABEL_54:
      if (++v35 == v37)
        goto LABEL_74;
    }
    v46 = *(unsigned __int8 ****)(a2 + 24);
    v45 = *(unsigned __int8 ****)(a2 + 32);
    while (1)
    {
      if (v46 == v45)
      {
        if (*a3 - 58 <= 0xFFFFFFF7)
          *a3 = 50;
        if (a3[3] - 58 <= 0xFFFFFFF6)
          a3[3] = 49;
        goto LABEL_74;
      }
      v48 = *v46;
      v47 = v46[1];
      v49 = (char *)v47 - (char *)*v46;
      if ((unint64_t)v49 >= 0x30)
      {
        v50 = v49 >> 4;
        if (v47 == v48)
          v51 = 0;
        else
          v51 = v50 + 1;
        v162 = (uint64_t)v46[1];
        *(_QWORD *)&v163 = v48;
        *((_QWORD *)&v163 + 1) = v47;
        v164 = v50;
        v165 = v51;
        v166 = (char *)v48;
        v167 = (void **)v48;
        v168 = v47;
        v169 = v50;
        v170 = 0;
        if (sub_2237743EC(v39, (uint64_t **)&v162) != -1)
          goto LABEL_54;
        v45 = *(unsigned __int8 ****)(a2 + 32);
      }
      v46 += 3;
    }
  }
  v25 = *(unsigned __int8 ****)(a2 + 24);
  v24 = *(unsigned __int8 ****)(a2 + 32);
  for (i = a3; v25 != v24; v25 += 3)
  {
    v30 = *v25;
    v29 = v25[1];
    v31 = (char *)v29 - (char *)*v25;
    if ((unint64_t)v31 >= 0x30)
    {
      v32 = v31 >> 4;
      if (v29 == v30)
        v33 = 0;
      else
        v33 = v32 + 1;
      v162 = (uint64_t)v25[1];
      *(_QWORD *)&v163 = v30;
      *((_QWORD *)&v163 + 1) = v29;
      v164 = v32;
      v165 = v33;
      v166 = (char *)v30;
      v167 = (void **)v30;
      v168 = v29;
      v169 = v32;
      v170 = 0;
      if (sub_2237743EC((uint64_t *)v159, (uint64_t **)&v162) != -1)
        goto LABEL_50;
      v24 = *(unsigned __int8 ****)(a2 + 32);
      i = a3;
    }
  }
  if (*i - 58 <= 0xFFFFFFF7)
  {
    *i = 50;
    if (i[3] - 58 > 0xFFFFFFF6)
      goto LABEL_41;
LABEL_118:
    i[3] = 49;
    v27 = *(_QWORD *)(a1 + 24);
    v28 = *(_QWORD *)(a1 + 32) - v27;
    if (!v28)
      goto LABEL_74;
    goto LABEL_119;
  }
  if (i[3] - 58 <= 0xFFFFFFF6)
    goto LABEL_118;
LABEL_41:
  v27 = *(_QWORD *)(a1 + 24);
  v28 = *(_QWORD *)(a1 + 32) - v27;
  if (!v28)
    goto LABEL_74;
LABEL_119:
  v83 = 0;
  v84 = v28 / 24;
  if (v84 <= 1)
    v85 = 1;
  else
    v85 = v84;
  v86 = *(uint64_t **)v27;
  if (*(_QWORD *)v27 == *(_QWORD *)(v27 + 8))
  {
    do
    {
LABEL_139:
      if (++v83 == v85)
        goto LABEL_74;
      v101 = *(_QWORD *)(a1 + 24) + 24 * v83;
      v86 = *(uint64_t **)v101;
    }
    while (*(_QWORD *)v101 == *(_QWORD *)(v101 + 8));
  }
  v88 = *(unsigned __int8 ***)a2;
  v87 = *(unsigned __int8 ***)(a2 + 8);
  v89 = (uint64_t)v87 - *(_QWORD *)a2;
  if ((unint64_t)v89 >= 0x30)
  {
    v90 = v89 >> 4;
    if (v87 == v88)
      v91 = 0;
    else
      v91 = v90 + 1;
    v162 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v163 = v88;
    *((_QWORD *)&v163 + 1) = v87;
    v164 = v90;
    v165 = v91;
    v166 = (char *)v88;
    v167 = (void **)v88;
    v168 = v87;
    v169 = v90;
    v170 = 0;
    v92 = sub_2237743EC(v86, (uint64_t **)&v162);
    if (v92 != 1)
      goto LABEL_138;
    v94 = *(unsigned __int8 ****)(a2 + 24);
    v93 = *(unsigned __int8 ****)(a2 + 32);
    while (1)
    {
      if (v94 == v93)
        goto LABEL_139;
      v96 = *v94;
      v95 = v94[1];
      v97 = (char *)v95 - (char *)*v94;
      if ((unint64_t)v97 >= 0x30)
      {
        v98 = v97 >> 4;
        if (v95 == v96)
          v99 = 0;
        else
          v99 = v98 + 1;
        v162 = (uint64_t)v94[1];
        *(_QWORD *)&v163 = v96;
        *((_QWORD *)&v163 + 1) = v95;
        v164 = v98;
        v165 = v99;
        v166 = (char *)v96;
        v167 = (void **)v96;
        v168 = v95;
        v169 = v98;
        v170 = 0;
        v100 = sub_2237743EC(v86, (uint64_t **)&v162);
        if (v100 != -1)
        {
          v92 = -v100;
LABEL_138:
          if ((v92 & 0x80000000) == 0)
            goto LABEL_139;
          break;
        }
        v93 = *(unsigned __int8 ****)(a2 + 32);
      }
      v94 += 3;
    }
  }
LABEL_74:
  v15 = a3;
  v16 = v149;
  if (a3[9])
    goto LABEL_251;
LABEL_75:
  v17 = v150;
  if (v16 != v150)
  {
LABEL_28:
    if (v16 == v17)
      goto LABEL_250;
    goto LABEL_173;
  }
  if (*v15 == 70 || a3[1] == 70)
  {
    v52 = *(__n128 **)a2;
    if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
      goto LABEL_171;
    v7 = *v52;
    v159[0] = *v52;
    v54 = *(__n128 **)a1;
    v53 = *(unsigned __int8 ***)(a1 + 8);
    v55 = (uint64_t)v53 - *(_QWORD *)a1;
    if ((unint64_t)v55 < 0x30)
      goto LABEL_93;
    v56 = v55 >> 4;
    v57 = v53 == (unsigned __int8 **)v54 ? 0 : v56 + 1;
    v162 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v163 = v54;
    *((_QWORD *)&v163 + 1) = v53;
    v164 = v56;
    v165 = v57;
    v166 = (char *)v54;
    v167 = (void **)v54;
    v168 = v53;
    v169 = v56;
    v170 = 0;
    if (sub_2237743EC((uint64_t *)v159, (uint64_t **)&v162) != 1)
    {
LABEL_93:
      v65 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24);
      if (v65)
      {
        v66 = 0;
        v67 = v65 / 24;
        if (v67 <= 1)
          v68 = 1;
        else
          v68 = v67;
        while (1)
        {
          v69 = *(_QWORD *)(a2 + 24) + 24 * v66;
          v70 = *(uint64_t **)v69;
          if (*(_QWORD *)v69 != *(_QWORD *)(v69 + 8))
          {
            v72 = *(__n128 **)a1;
            v71 = *(unsigned __int8 ***)(a1 + 8);
            v73 = (uint64_t)v71 - *(_QWORD *)a1;
            if ((unint64_t)v73 >= 0x30)
            {
              v74 = v73 >> 4;
              v75 = v71 == (unsigned __int8 **)v72 ? 0 : v74 + 1;
              v162 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v163 = v72;
              *((_QWORD *)&v163 + 1) = v71;
              v164 = v74;
              v165 = v75;
              v166 = (char *)v72;
              v167 = (void **)v72;
              v168 = v71;
              v169 = v74;
              v170 = 0;
              if (sub_2237743EC(v70, (uint64_t **)&v162) == 1)
                break;
            }
          }
LABEL_97:
          if (++v66 == v68)
            goto LABEL_171;
        }
        v77 = *(unsigned __int8 ****)(a1 + 24);
        v76 = *(unsigned __int8 ****)(a1 + 32);
        while (v77 != v76)
        {
          v79 = *v77;
          v78 = v77[1];
          v80 = (char *)v78 - (char *)*v77;
          if ((unint64_t)v80 >= 0x30)
          {
            v81 = v80 >> 4;
            if (v78 == v79)
              v82 = 0;
            else
              v82 = v81 + 1;
            v162 = (uint64_t)v77[1];
            *(_QWORD *)&v163 = v79;
            *((_QWORD *)&v163 + 1) = v78;
            v164 = v81;
            v165 = v82;
            v166 = (char *)v79;
            v167 = (void **)v79;
            v168 = v78;
            v169 = v81;
            v170 = 0;
            if (sub_2237743EC(v70, (uint64_t **)&v162) != -1)
              goto LABEL_97;
            v76 = *(unsigned __int8 ****)(a1 + 32);
          }
          v77 += 3;
        }
        if (*a3 - 58 <= 0xFFFFFFF7)
          *a3 = 50;
        if (a3[1] - 58 <= 0xFFFFFFF6)
          a3[1] = 49;
      }
      goto LABEL_171;
    }
    v59 = *(unsigned __int8 ****)(a1 + 24);
    v58 = *(unsigned __int8 ****)(a1 + 32);
    while (v59 != v58)
    {
      v61 = *v59;
      v60 = v59[1];
      v62 = (char *)v60 - (char *)*v59;
      if ((unint64_t)v62 >= 0x30)
      {
        v63 = v62 >> 4;
        if (v60 == v61)
          v64 = 0;
        else
          v64 = v63 + 1;
        v162 = (uint64_t)v59[1];
        *(_QWORD *)&v163 = v61;
        *((_QWORD *)&v163 + 1) = v60;
        v164 = v63;
        v165 = v64;
        v166 = (char *)v61;
        v167 = (void **)v61;
        v168 = v60;
        v169 = v63;
        v170 = 0;
        if (sub_2237743EC((uint64_t *)v159, (uint64_t **)&v162) != -1)
          goto LABEL_93;
        v58 = *(unsigned __int8 ****)(a1 + 32);
      }
      v59 += 3;
    }
    if (*a3 - 58 > 0xFFFFFFF7)
    {
      if (a3[1] - 58 > 0xFFFFFFF6)
      {
LABEL_144:
        v102 = *(_QWORD *)(a2 + 24);
        v103 = *(_QWORD *)(a2 + 32) - v102;
        if (!v103)
          goto LABEL_171;
LABEL_148:
        v104 = 0;
        v105 = v103 / 24;
        if (v105 <= 1)
          v106 = 1;
        else
          v106 = v105;
        v107 = *(uint64_t **)v102;
        if (*(_QWORD *)v102 == *(_QWORD *)(v102 + 8))
        {
          do
          {
LABEL_168:
            if (++v104 == v106)
              goto LABEL_171;
            v122 = *(_QWORD *)(a2 + 24) + 24 * v104;
            v107 = *(uint64_t **)v122;
          }
          while (*(_QWORD *)v122 == *(_QWORD *)(v122 + 8));
        }
        v109 = *(__n128 **)a1;
        v108 = *(unsigned __int8 ***)(a1 + 8);
        v110 = (uint64_t)v108 - *(_QWORD *)a1;
        if ((unint64_t)v110 >= 0x30)
        {
          v111 = v110 >> 4;
          if (v108 == (unsigned __int8 **)v109)
            v112 = 0;
          else
            v112 = v111 + 1;
          v162 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v163 = v109;
          *((_QWORD *)&v163 + 1) = v108;
          v164 = v111;
          v165 = v112;
          v166 = (char *)v109;
          v167 = (void **)v109;
          v168 = v108;
          v169 = v111;
          v170 = 0;
          v113 = sub_2237743EC(v107, (uint64_t **)&v162);
          if (v113 != 1)
            goto LABEL_167;
          v115 = *(unsigned __int8 ****)(a1 + 24);
          v114 = *(unsigned __int8 ****)(a1 + 32);
          while (1)
          {
            if (v115 == v114)
              goto LABEL_168;
            v117 = *v115;
            v116 = v115[1];
            v118 = (char *)v116 - (char *)*v115;
            if ((unint64_t)v118 >= 0x30)
            {
              v119 = v118 >> 4;
              if (v116 == v117)
                v120 = 0;
              else
                v120 = v119 + 1;
              v162 = (uint64_t)v115[1];
              *(_QWORD *)&v163 = v117;
              *((_QWORD *)&v163 + 1) = v116;
              v164 = v119;
              v165 = v120;
              v166 = (char *)v117;
              v167 = (void **)v117;
              v168 = v116;
              v169 = v119;
              v170 = 0;
              v121 = sub_2237743EC(v107, (uint64_t **)&v162);
              if (v121 != -1)
              {
                v113 = -v121;
LABEL_167:
                if ((v113 & 0x80000000) == 0)
                  goto LABEL_168;
                break;
              }
              v114 = *(unsigned __int8 ****)(a1 + 32);
            }
            v115 += 3;
          }
        }
LABEL_171:
        if (a3[9])
          goto LABEL_250;
        goto LABEL_172;
      }
    }
    else
    {
      *a3 = 50;
      if (a3[1] - 58 > 0xFFFFFFF6)
        goto LABEL_144;
    }
    a3[1] = 49;
    v102 = *(_QWORD *)(a2 + 24);
    v103 = *(_QWORD *)(a2 + 32) - v102;
    if (!v103)
      goto LABEL_171;
    goto LABEL_148;
  }
LABEL_172:
  v16 = v149;
  v17 = v150;
  if (v149 == v150)
    goto LABEL_250;
LABEL_173:
  v123 = a3;
  if (*a3 != 70 && a3[3] != 70)
    goto LABEL_175;
  v7.n128_f64[0] = sub_223781780((unint64_t)v16, (uint64_t)v17, 126 - 2 * __clz(0x8F5C28F5C28F5C29 * (v17 - v16)), 1, v7);
  v16 = v149;
  v17 = v150;
  v130 = a3[9];
  if (v149 == v150)
  {
    if (!a3[9])
      goto LABEL_242;
    goto LABEL_250;
  }
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = *a3;
  v136 = a3[3];
  v137 = v149;
  do
  {
    v138 = v137[10];
    if ((v138 - 5) < 0xFFFFFFFC)
      goto LABEL_188;
    if (v131 && *((_QWORD *)v137 + 7) == *((_QWORD *)v131 + 1))
    {
      v139 = *((_QWORD *)v137 + 8) != *((_QWORD *)v131 + 2);
      v131 = (char *)(v137 + 12);
      if (!v132)
        goto LABEL_227;
    }
    else
    {
      v139 = 1;
      v131 = (char *)(v137 + 12);
      if (!v132)
        goto LABEL_227;
    }
    if (!v134)
      goto LABEL_210;
    if (!v139)
    {
      if (v132[7] == *((_QWORD *)v137 + 7)
        && v132[8] == *((_QWORD *)v137 + 8)
        && ((v140 = v132[9], v141 = *((_QWORD *)v137 + 9), v140 == v141) || !*((_QWORD *)v137 + 11) && v140 + 1 == v141)
        && v138 == 1
        && *v132 == *(_QWORD *)v137
        && v132[1] == *((_QWORD *)v137 + 1))
      {
        if (!v133)
        {
          v133 = 0;
          v134 = 1;
          goto LABEL_187;
        }
      }
      else
      {
LABEL_210:
        if (!v133)
          goto LABEL_230;
        if (v139 || v132[7] != *((_QWORD *)v137 + 7) || v132[8] != *((_QWORD *)v137 + 8))
        {
LABEL_222:
          v134 = 0;
          goto LABEL_223;
        }
        v134 = 0;
        v140 = v132[9];
        v141 = *((_QWORD *)v137 + 9);
      }
      if ((v140 == v141 || !*((_QWORD *)v137 + 11) && v140 + 1 == v141)
        && *v132 == *(_QWORD *)v137
        && v132[1] == *((_QWORD *)v137 + 1))
      {
        if (v138 == 2)
          goto LABEL_185;
        goto LABEL_226;
      }
LABEL_223:
      if ((v135 - 58) <= 0xFFFFFFF7)
      {
        v135 = 50;
        *v123 = 50;
      }
      if ((v136 - 58) <= 0xFFFFFFF6)
      {
        v133 = 0;
        v136 = 49;
        v123[3] = 49;
        if (v138 == 1)
          goto LABEL_231;
LABEL_228:
        if (v138 == 2)
        {
LABEL_185:
          if (v137[30] != 2)
            v133 = 1;
        }
LABEL_187:
        v132 = v137;
LABEL_188:
        if (v130)
          goto LABEL_250;
        goto LABEL_189;
      }
LABEL_226:
      v133 = 0;
LABEL_227:
      if (v138 != 1)
        goto LABEL_228;
      goto LABEL_231;
    }
    if (v133)
      goto LABEL_222;
LABEL_230:
    v133 = 0;
    v134 = 0;
    if (v138 != 1)
      goto LABEL_228;
LABEL_231:
    v132 = v137;
    v134 = v138;
    if (v130)
      goto LABEL_250;
LABEL_189:
    v137 += 50;
    v123 = a3;
  }
  while (v137 != (_DWORD *)v17);
  if (v133)
  {
    if ((v135 - 58) <= 0xFFFFFFF7)
      *a3 = 50;
    if ((v136 - 58) <= 0xFFFFFFF6)
      a3[3] = 49;
  }
LABEL_242:
  v123 = a3;
  v142 = *a3;
  v143 = a3[3];
  if (v142 != 70 && v143 != 70)
  {
LABEL_175:
    if (v123[1] != 70)
      goto LABEL_250;
    goto LABEL_176;
  }
  v162 = a1;
  *(_QWORD *)&v163 = a2;
  BYTE8(v163) = 0;
  v164 = (uint64_t)a3;
  v165 = v147;
  v144 = v142 != 70;
  if (v143 == 70)
    v145 = 2;
  else
    v145 = 6;
  LODWORD(v166) = v145 | v144;
  sub_22378E8A8((uint64_t)&v162, v16, v17);
  if (a3[9] || *a3 != 70 && a3[1] != 70)
    goto LABEL_250;
  v16 = v149;
  v17 = v150;
LABEL_176:
  sub_2237791F4((unint64_t)v16, (uint64_t)v17, v7);
  v162 = 0;
  *(_QWORD *)&v163 = 0;
  *(_QWORD *)((char *)&v163 + 6) = 0;
  v124 = v149;
  v125 = v150;
  sub_22377922C(a3, &v162, (uint64_t)v149, (uint64_t)v150);
  if (!a3[9])
  {
    v126 = *a3;
    v127 = a3[1];
    if (v126 == 70 || v127 == 70)
    {
      v162 = a2;
      *(_QWORD *)&v163 = a1;
      BYTE8(v163) = 0;
      v164 = (uint64_t)a3;
      v165 = v147;
      v128 = v126 != 70;
      if (v127 == 70)
        v129 = 2;
      else
        v129 = 6;
      LODWORD(v166) = v129 | v128;
      sub_22378EFE0((uint64_t)&v162, v124, v125);
    }
  }
LABEL_250:
  v16 = v149;
LABEL_251:
  if (v16)
  {
    v150 = v16;
    operator delete(v16);
  }
}

void sub_22378E7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22378E8A8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned __int8 *v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  _QWORD *v59;
  int v60;
  unsigned __int8 *v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::bad_cast *exception;
  std::bad_cast *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (a2 == a3)
    return result;
  v4 = a2;
  v5 = result;
  v6 = a2[8];
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = -1;
    do
      result = sub_223791E28(v5, v7++);
    while (v6 != v7);
  }
  v8 = v4 + 25;
  if (v4 + 25 == a3)
  {
    v9 = v4;
    v56 = *(_DWORD *)(v5 + 40);
    if ((~v56 & 6) == 0)
      goto LABEL_134;
    goto LABEL_108;
  }
  v9 = v4;
  do
  {
    v4 = v8;
    if (v9[7] == v9[32])
    {
      v10 = v9[8];
      v11 = v9[33];
      if (v10 == v11)
        goto LABEL_103;
      v12 = *(_DWORD *)(v5 + 40);
      if ((~v12 & 6) == 0)
        goto LABEL_101;
      LOBYTE(v13) = 0;
      LOBYTE(v14) = 0;
      v15 = v9;
      do
      {
        v16 = *((_DWORD *)v15 + 10);
        if (v16 != 1)
        {
          if (v16 != 2 || *((_DWORD *)v15 + 30) != 2)
            goto LABEL_101;
          if (v15 == v9)
            goto LABEL_27;
          v15 += 25;
          while (1)
          {
            v14 = *((_DWORD *)v15 + 10);
            if (v14 != 2)
              break;
            if (*((_DWORD *)v15 + 30) != 2)
              goto LABEL_101;
            v17 = v15 == v9;
            v15 += 25;
            if (v17)
              goto LABEL_27;
          }
          if (v14 != 1)
            goto LABEL_101;
        }
        v13 = *((_DWORD *)v15 + 30);
        if (v13 != 1)
          goto LABEL_101;
        v17 = v15 == v9;
        v15 += 25;
      }
      while (!v17);
      if ((v14 & 1) == 0)
        goto LABEL_98;
      LOBYTE(v13) = 1;
LABEL_27:
      v18 = *(unsigned __int8 **)(v5 + 24);
      if (*v18 - 58 <= 0xFFFFFFF7)
      {
        *v18 = 50;
        v18 = *(unsigned __int8 **)(v5 + 24);
        v19 = *(_DWORD *)(v5 + 40) | 1;
        *(_DWORD *)(v5 + 40) = v19;
        if (v18[3] - 58 > 0xFFFFFFF6)
        {
LABEL_29:
          v12 = v19 | 4;
          if ((v13 & 1) == 0)
            goto LABEL_30;
          goto LABEL_98;
        }
      }
      else
      {
        v19 = v12 | 1;
        *(_DWORD *)(v5 + 40) = v19;
        if (v18[3] - 58 > 0xFFFFFFF6)
          goto LABEL_29;
      }
      v18[3] = 49;
      v12 = *(_DWORD *)(v5 + 40) | 4;
      if ((v13 & 1) == 0)
      {
LABEL_30:
        *(_DWORD *)(v5 + 40) = v12;
        if (v12 == 7)
          goto LABEL_31;
LABEL_99:
        v20 = *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
LABEL_100:
        *(_BYTE *)(v5 + 16) = v20;
        v10 = v9[8];
        v11 = v9[33];
LABEL_101:
        v55 = v10 + 1;
        if (v10 + 1 < v11)
        {
          do
            result = sub_223791E28(v5, v55++);
          while (v11 != v55);
        }
        goto LABEL_103;
      }
LABEL_98:
      v54 = v12 | 2;
      *(_DWORD *)(v5 + 40) = v54;
      if (v54 == 7)
      {
LABEL_31:
        v20 = 1;
        goto LABEL_100;
      }
      goto LABEL_99;
    }
    v21 = *(_DWORD *)(v5 + 40);
    if ((~v21 & 6) != 0)
    {
      LOBYTE(v22) = 0;
      LOBYTE(v23) = 0;
      v24 = v9;
      do
      {
        v25 = *((_DWORD *)v24 + 10);
        if (v25 != 1)
        {
          if (v25 != 2 || *((_DWORD *)v24 + 30) != 2)
            goto LABEL_60;
          if (v24 == v9)
            goto LABEL_50;
          v24 += 25;
          while (1)
          {
            v23 = *((_DWORD *)v24 + 10);
            if (v23 != 2)
              break;
            if (*((_DWORD *)v24 + 30) != 2)
              goto LABEL_60;
            v17 = v24 == v9;
            v24 += 25;
            if (v17)
              goto LABEL_50;
          }
          if (v23 != 1)
            goto LABEL_60;
        }
        v22 = *((_DWORD *)v24 + 30);
        if (v22 != 1)
          goto LABEL_60;
        v17 = v24 == v9;
        v24 += 25;
      }
      while (!v17);
      if ((v23 & 1) == 0)
        goto LABEL_57;
      LOBYTE(v22) = 1;
LABEL_50:
      v26 = *(unsigned __int8 **)(v5 + 24);
      if (*v26 - 58 <= 0xFFFFFFF7)
      {
        *v26 = 50;
        v26 = *(unsigned __int8 **)(v5 + 24);
        v27 = *(_DWORD *)(v5 + 40) | 1;
        *(_DWORD *)(v5 + 40) = v27;
        if (v26[3] - 58 > 0xFFFFFFF6)
        {
LABEL_52:
          v21 = v27 | 4;
          if ((v22 & 1) == 0)
            goto LABEL_53;
          goto LABEL_57;
        }
      }
      else
      {
        v27 = v21 | 1;
        *(_DWORD *)(v5 + 40) = v27;
        if (v26[3] - 58 > 0xFFFFFFF6)
          goto LABEL_52;
      }
      v26[3] = 49;
      v21 = *(_DWORD *)(v5 + 40) | 4;
      if ((v22 & 1) == 0)
      {
LABEL_53:
        *(_DWORD *)(v5 + 40) = v21;
        if (v21 == 7)
          goto LABEL_54;
LABEL_58:
        v28 = *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
LABEL_59:
        *(_BYTE *)(v5 + 16) = v28;
        goto LABEL_60;
      }
LABEL_57:
      v29 = v21 | 2;
      *(_DWORD *)(v5 + 40) = v29;
      if (v29 == 7)
      {
LABEL_54:
        v28 = 1;
        goto LABEL_59;
      }
      goto LABEL_58;
    }
LABEL_60:
    v30 = *(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24);
    if (v30 <= -24)
      goto LABEL_141;
    v31 = v30 / 24;
    v32 = v9[8] + 1;
    if (v32 < v30 / 24)
    {
      do
        result = sub_223791E28(v5, v32++);
      while (v31 != v32);
    }
    v33 = v9[33];
    if ((v33 & 0x8000000000000000) == 0)
    {
      v34 = *(_DWORD *)(v5 + 40);
      if (v34 != 7)
      {
        v35 = -1;
        while (1)
        {
          if (v34 == 7)
            goto LABEL_68;
          v37 = *(_QWORD *)v5;
          if (v35 >= 0)
            v37 = *(_QWORD *)(*(_QWORD *)v5 + 24) + 24 * v35;
          v38 = *(uint64_t **)v37;
          if (*(_QWORD *)v37 == *(_QWORD *)(v37 + 8))
            goto LABEL_68;
          v39 = *(uint64_t **)(v5 + 8);
          v41 = *v39;
          v40 = v39[1];
          v42 = v40 - *v39;
          if ((unint64_t)v42 < 0x30)
            goto LABEL_88;
          v43 = v42 >> 4;
          v44 = v40 == v41 ? 0 : v43 + 1;
          v69 = (uint64_t *)v39[1];
          v70 = v41;
          v71 = v40;
          v72 = v43;
          v73 = v44;
          v74 = v41;
          v75 = v41;
          v76 = v40;
          v77 = v43;
          v78 = 0;
          result = sub_2237743EC(v38, &v69);
          if ((_DWORD)result != 1)
            break;
          v46 = (uint64_t *)v39[3];
          v45 = (uint64_t *)v39[4];
          while (v46 != v45)
          {
            v48 = *v46;
            v47 = v46[1];
            v49 = v47 - *v46;
            if ((unint64_t)v49 >= 0x30)
            {
              v50 = v49 >> 4;
              if (v47 == v48)
                v51 = 0;
              else
                v51 = v50 + 1;
              v69 = (uint64_t *)v46[1];
              v70 = v48;
              v71 = v47;
              v72 = v50;
              v73 = v51;
              v74 = v48;
              v75 = v48;
              v76 = v47;
              v77 = v50;
              v78 = 0;
              result = sub_2237743EC(v38, &v69);
              if ((_DWORD)result != -1)
                goto LABEL_87;
              v45 = (uint64_t *)v39[4];
            }
            v46 += 3;
          }
          v52 = *(unsigned __int8 **)(v5 + 24);
          if (*v52 - 58 <= 0xFFFFFFF7)
          {
            *v52 = 50;
            v52 = *(unsigned __int8 **)(v5 + 24);
          }
          v53 = *(_DWORD *)(v5 + 40) | 1;
          *(_DWORD *)(v5 + 40) = v53;
          if (v52[3] - 58 <= 0xFFFFFFF6)
          {
            v52[3] = 49;
            v53 = *(_DWORD *)(v5 + 40);
          }
          v34 = v53 | 4;
          *(_DWORD *)(v5 + 40) = v53 | 4;
          if ((v53 | 4) == 7)
          {
LABEL_89:
            v36 = 1;
            goto LABEL_67;
          }
LABEL_66:
          v36 = *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
LABEL_67:
          *(_BYTE *)(v5 + 16) = v36;
LABEL_68:
          if (++v35 == v33)
            goto LABEL_103;
        }
LABEL_87:
        v34 = *(_DWORD *)(v5 + 40);
LABEL_88:
        v34 |= 2u;
        *(_DWORD *)(v5 + 40) = v34;
        if (v34 == 7)
          goto LABEL_89;
        goto LABEL_66;
      }
    }
LABEL_103:
    if (*(_BYTE *)(v5 + 16))
      return result;
    v9 += 25;
    v8 = v4 + 25;
  }
  while (v4 + 25 != a3);
  v56 = *(_DWORD *)(v5 + 40);
  if ((~v56 & 6) == 0)
    goto LABEL_134;
LABEL_108:
  if (v9 != a3)
  {
    LOBYTE(v57) = 0;
    LOBYTE(v58) = 0;
    v59 = v9;
    do
    {
      v60 = *((_DWORD *)v59 + 10);
      if (v60 != 1)
      {
        if (v60 != 2 || *((_DWORD *)v59 + 30) != 2)
          goto LABEL_134;
        if (v59 == v4)
          goto LABEL_126;
        v59 += 25;
        while (1)
        {
          v58 = *((_DWORD *)v59 + 10);
          if (v58 != 2)
            break;
          if (*((_DWORD *)v59 + 30) != 2)
            goto LABEL_134;
          v17 = v59 == v4;
          v59 += 25;
          if (v17)
            goto LABEL_126;
        }
        if (v58 != 1)
          goto LABEL_134;
      }
      v57 = *((_DWORD *)v59 + 30);
      if (v57 != 1)
        goto LABEL_134;
      v17 = v59 == v4;
      v59 += 25;
    }
    while (!v17);
    if ((v58 & 1) == 0)
      goto LABEL_129;
    LOBYTE(v57) = 1;
LABEL_126:
    v61 = *(unsigned __int8 **)(v5 + 24);
    if (*v61 - 58 <= 0xFFFFFFF7)
    {
      *v61 = 50;
      v61 = *(unsigned __int8 **)(v5 + 24);
      v62 = *(_DWORD *)(v5 + 40) | 1;
      *(_DWORD *)(v5 + 40) = v62;
      if (v61[3] - 58 > 0xFFFFFFF6)
        goto LABEL_128;
    }
    else
    {
      v62 = v56 | 1;
      *(_DWORD *)(v5 + 40) = v62;
      if (v61[3] - 58 > 0xFFFFFFF6)
      {
LABEL_128:
        v56 = v62 | 4;
        *(_DWORD *)(v5 + 40) = v56;
        if ((v57 & 1) == 0)
          goto LABEL_130;
        goto LABEL_129;
      }
    }
    v61[3] = 49;
    v56 = *(_DWORD *)(v5 + 40) | 4;
    *(_DWORD *)(v5 + 40) = v56;
    if ((v57 & 1) != 0)
    {
LABEL_129:
      v56 |= 2u;
      *(_DWORD *)(v5 + 40) = v56;
    }
  }
LABEL_130:
  v63 = v56 == 7 || *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
  *(_BYTE *)(v5 + 16) = v63;
LABEL_134:
  v64 = *(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24);
  if (v64 <= -24)
  {
LABEL_141:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v68 = sub_2233DC3C4(exception);
    __cxa_throw(v68, (struct type_info *)&unk_24EC363D8, (void (*)(void *))std::exception::~exception);
  }
  v65 = v64 / 24;
  v66 = v9[8] + 1;
  if (v66 < v64 / 24)
  {
    do
      result = sub_223791E28(v5, v66++);
    while (v65 != v66);
  }
  return result;
}

uint64_t sub_22378EFE0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned __int8 *v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  _QWORD *v59;
  int v60;
  unsigned __int8 *v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::bad_cast *exception;
  std::bad_cast *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (a2 == a3)
    return result;
  v4 = a2;
  v5 = result;
  v6 = a2[18];
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = -1;
    do
      result = sub_223791FB0(v5, v7++);
    while (v6 != v7);
  }
  v8 = v4 + 25;
  if (v4 + 25 == a3)
  {
    v9 = v4;
    v56 = *(_DWORD *)(v5 + 40);
    if ((~v56 & 6) == 0)
      goto LABEL_134;
    goto LABEL_108;
  }
  v9 = v4;
  do
  {
    v4 = v8;
    if (v9[17] == v9[42])
    {
      v10 = v9[18];
      v11 = v9[43];
      if (v10 == v11)
        goto LABEL_103;
      v12 = *(_DWORD *)(v5 + 40);
      if ((~v12 & 6) == 0)
        goto LABEL_101;
      LOBYTE(v13) = 0;
      LOBYTE(v14) = 0;
      v15 = v9;
      do
      {
        v16 = *((_DWORD *)v15 + 10);
        if (v16 != 1)
        {
          if (v16 != 2 || *((_DWORD *)v15 + 30) != 2)
            goto LABEL_101;
          if (v15 == v9)
            goto LABEL_27;
          v15 += 25;
          while (1)
          {
            v14 = *((_DWORD *)v15 + 10);
            if (v14 != 2)
              break;
            if (*((_DWORD *)v15 + 30) != 2)
              goto LABEL_101;
            v17 = v15 == v9;
            v15 += 25;
            if (v17)
              goto LABEL_27;
          }
          if (v14 != 1)
            goto LABEL_101;
        }
        v13 = *((_DWORD *)v15 + 30);
        if (v13 != 1)
          goto LABEL_101;
        v17 = v15 == v9;
        v15 += 25;
      }
      while (!v17);
      if ((v14 & 1) == 0)
        goto LABEL_98;
      LOBYTE(v13) = 1;
LABEL_27:
      v18 = *(unsigned __int8 **)(v5 + 24);
      if (*v18 - 58 <= 0xFFFFFFF7)
      {
        *v18 = 50;
        v18 = *(unsigned __int8 **)(v5 + 24);
        v19 = *(_DWORD *)(v5 + 40) | 1;
        *(_DWORD *)(v5 + 40) = v19;
        if (v18[1] - 58 > 0xFFFFFFF6)
        {
LABEL_29:
          v12 = v19 | 4;
          if ((v13 & 1) == 0)
            goto LABEL_30;
          goto LABEL_98;
        }
      }
      else
      {
        v19 = v12 | 1;
        *(_DWORD *)(v5 + 40) = v19;
        if (v18[1] - 58 > 0xFFFFFFF6)
          goto LABEL_29;
      }
      v18[1] = 49;
      v12 = *(_DWORD *)(v5 + 40) | 4;
      if ((v13 & 1) == 0)
      {
LABEL_30:
        *(_DWORD *)(v5 + 40) = v12;
        if (v12 == 7)
          goto LABEL_31;
LABEL_99:
        v20 = *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
LABEL_100:
        *(_BYTE *)(v5 + 16) = v20;
        v10 = v9[18];
        v11 = v9[43];
LABEL_101:
        v55 = v10 + 1;
        if (v10 + 1 < v11)
        {
          do
            result = sub_223791FB0(v5, v55++);
          while (v11 != v55);
        }
        goto LABEL_103;
      }
LABEL_98:
      v54 = v12 | 2;
      *(_DWORD *)(v5 + 40) = v54;
      if (v54 == 7)
      {
LABEL_31:
        v20 = 1;
        goto LABEL_100;
      }
      goto LABEL_99;
    }
    v21 = *(_DWORD *)(v5 + 40);
    if ((~v21 & 6) != 0)
    {
      LOBYTE(v22) = 0;
      LOBYTE(v23) = 0;
      v24 = v9;
      do
      {
        v25 = *((_DWORD *)v24 + 10);
        if (v25 != 1)
        {
          if (v25 != 2 || *((_DWORD *)v24 + 30) != 2)
            goto LABEL_60;
          if (v24 == v9)
            goto LABEL_50;
          v24 += 25;
          while (1)
          {
            v23 = *((_DWORD *)v24 + 10);
            if (v23 != 2)
              break;
            if (*((_DWORD *)v24 + 30) != 2)
              goto LABEL_60;
            v17 = v24 == v9;
            v24 += 25;
            if (v17)
              goto LABEL_50;
          }
          if (v23 != 1)
            goto LABEL_60;
        }
        v22 = *((_DWORD *)v24 + 30);
        if (v22 != 1)
          goto LABEL_60;
        v17 = v24 == v9;
        v24 += 25;
      }
      while (!v17);
      if ((v23 & 1) == 0)
        goto LABEL_57;
      LOBYTE(v22) = 1;
LABEL_50:
      v26 = *(unsigned __int8 **)(v5 + 24);
      if (*v26 - 58 <= 0xFFFFFFF7)
      {
        *v26 = 50;
        v26 = *(unsigned __int8 **)(v5 + 24);
        v27 = *(_DWORD *)(v5 + 40) | 1;
        *(_DWORD *)(v5 + 40) = v27;
        if (v26[1] - 58 > 0xFFFFFFF6)
        {
LABEL_52:
          v21 = v27 | 4;
          if ((v22 & 1) == 0)
            goto LABEL_53;
          goto LABEL_57;
        }
      }
      else
      {
        v27 = v21 | 1;
        *(_DWORD *)(v5 + 40) = v27;
        if (v26[1] - 58 > 0xFFFFFFF6)
          goto LABEL_52;
      }
      v26[1] = 49;
      v21 = *(_DWORD *)(v5 + 40) | 4;
      if ((v22 & 1) == 0)
      {
LABEL_53:
        *(_DWORD *)(v5 + 40) = v21;
        if (v21 == 7)
          goto LABEL_54;
LABEL_58:
        v28 = *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
LABEL_59:
        *(_BYTE *)(v5 + 16) = v28;
        goto LABEL_60;
      }
LABEL_57:
      v29 = v21 | 2;
      *(_DWORD *)(v5 + 40) = v29;
      if (v29 == 7)
      {
LABEL_54:
        v28 = 1;
        goto LABEL_59;
      }
      goto LABEL_58;
    }
LABEL_60:
    v30 = *(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24);
    if (v30 <= -24)
      goto LABEL_141;
    v31 = v30 / 24;
    v32 = v9[18] + 1;
    if (v32 < v30 / 24)
    {
      do
        result = sub_223791FB0(v5, v32++);
      while (v31 != v32);
    }
    v33 = v9[43];
    if ((v33 & 0x8000000000000000) == 0)
    {
      v34 = *(_DWORD *)(v5 + 40);
      if (v34 != 7)
      {
        v35 = -1;
        while (1)
        {
          if (v34 == 7)
            goto LABEL_68;
          v37 = *(_QWORD *)v5;
          if (v35 >= 0)
            v37 = *(_QWORD *)(*(_QWORD *)v5 + 24) + 24 * v35;
          v38 = *(uint64_t **)v37;
          if (*(_QWORD *)v37 == *(_QWORD *)(v37 + 8))
            goto LABEL_68;
          v39 = *(uint64_t **)(v5 + 8);
          v41 = *v39;
          v40 = v39[1];
          v42 = v40 - *v39;
          if ((unint64_t)v42 < 0x30)
            goto LABEL_88;
          v43 = v42 >> 4;
          v44 = v40 == v41 ? 0 : v43 + 1;
          v69 = (uint64_t *)v39[1];
          v70 = v41;
          v71 = v40;
          v72 = v43;
          v73 = v44;
          v74 = v41;
          v75 = v41;
          v76 = v40;
          v77 = v43;
          v78 = 0;
          result = sub_2237743EC(v38, &v69);
          if ((_DWORD)result != 1)
            break;
          v46 = (uint64_t *)v39[3];
          v45 = (uint64_t *)v39[4];
          while (v46 != v45)
          {
            v48 = *v46;
            v47 = v46[1];
            v49 = v47 - *v46;
            if ((unint64_t)v49 >= 0x30)
            {
              v50 = v49 >> 4;
              if (v47 == v48)
                v51 = 0;
              else
                v51 = v50 + 1;
              v69 = (uint64_t *)v46[1];
              v70 = v48;
              v71 = v47;
              v72 = v50;
              v73 = v51;
              v74 = v48;
              v75 = v48;
              v76 = v47;
              v77 = v50;
              v78 = 0;
              result = sub_2237743EC(v38, &v69);
              if ((_DWORD)result != -1)
                goto LABEL_87;
              v45 = (uint64_t *)v39[4];
            }
            v46 += 3;
          }
          v52 = *(unsigned __int8 **)(v5 + 24);
          if (*v52 - 58 <= 0xFFFFFFF7)
          {
            *v52 = 50;
            v52 = *(unsigned __int8 **)(v5 + 24);
          }
          v53 = *(_DWORD *)(v5 + 40) | 1;
          *(_DWORD *)(v5 + 40) = v53;
          if (v52[1] - 58 <= 0xFFFFFFF6)
          {
            v52[1] = 49;
            v53 = *(_DWORD *)(v5 + 40);
          }
          v34 = v53 | 4;
          *(_DWORD *)(v5 + 40) = v53 | 4;
          if ((v53 | 4) == 7)
          {
LABEL_89:
            v36 = 1;
            goto LABEL_67;
          }
LABEL_66:
          v36 = *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
LABEL_67:
          *(_BYTE *)(v5 + 16) = v36;
LABEL_68:
          if (++v35 == v33)
            goto LABEL_103;
        }
LABEL_87:
        v34 = *(_DWORD *)(v5 + 40);
LABEL_88:
        v34 |= 2u;
        *(_DWORD *)(v5 + 40) = v34;
        if (v34 == 7)
          goto LABEL_89;
        goto LABEL_66;
      }
    }
LABEL_103:
    if (*(_BYTE *)(v5 + 16))
      return result;
    v9 += 25;
    v8 = v4 + 25;
  }
  while (v4 + 25 != a3);
  v56 = *(_DWORD *)(v5 + 40);
  if ((~v56 & 6) == 0)
    goto LABEL_134;
LABEL_108:
  if (v9 != a3)
  {
    LOBYTE(v57) = 0;
    LOBYTE(v58) = 0;
    v59 = v9;
    do
    {
      v60 = *((_DWORD *)v59 + 10);
      if (v60 != 1)
      {
        if (v60 != 2 || *((_DWORD *)v59 + 30) != 2)
          goto LABEL_134;
        if (v59 == v4)
          goto LABEL_126;
        v59 += 25;
        while (1)
        {
          v58 = *((_DWORD *)v59 + 10);
          if (v58 != 2)
            break;
          if (*((_DWORD *)v59 + 30) != 2)
            goto LABEL_134;
          v17 = v59 == v4;
          v59 += 25;
          if (v17)
            goto LABEL_126;
        }
        if (v58 != 1)
          goto LABEL_134;
      }
      v57 = *((_DWORD *)v59 + 30);
      if (v57 != 1)
        goto LABEL_134;
      v17 = v59 == v4;
      v59 += 25;
    }
    while (!v17);
    if ((v58 & 1) == 0)
      goto LABEL_129;
    LOBYTE(v57) = 1;
LABEL_126:
    v61 = *(unsigned __int8 **)(v5 + 24);
    if (*v61 - 58 <= 0xFFFFFFF7)
    {
      *v61 = 50;
      v61 = *(unsigned __int8 **)(v5 + 24);
      v62 = *(_DWORD *)(v5 + 40) | 1;
      *(_DWORD *)(v5 + 40) = v62;
      if (v61[1] - 58 > 0xFFFFFFF6)
        goto LABEL_128;
    }
    else
    {
      v62 = v56 | 1;
      *(_DWORD *)(v5 + 40) = v62;
      if (v61[1] - 58 > 0xFFFFFFF6)
      {
LABEL_128:
        v56 = v62 | 4;
        *(_DWORD *)(v5 + 40) = v56;
        if ((v57 & 1) == 0)
          goto LABEL_130;
        goto LABEL_129;
      }
    }
    v61[1] = 49;
    v56 = *(_DWORD *)(v5 + 40) | 4;
    *(_DWORD *)(v5 + 40) = v56;
    if ((v57 & 1) != 0)
    {
LABEL_129:
      v56 |= 2u;
      *(_DWORD *)(v5 + 40) = v56;
    }
  }
LABEL_130:
  v63 = v56 == 7 || *(_BYTE *)(*(_QWORD *)(v5 + 24) + 9) != 0;
  *(_BYTE *)(v5 + 16) = v63;
LABEL_134:
  v64 = *(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24);
  if (v64 <= -24)
  {
LABEL_141:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v68 = sub_2233DC3C4(exception);
    __cxa_throw(v68, (struct type_info *)&unk_24EC363D8, (void (*)(void *))std::exception::~exception);
  }
  v65 = v64 / 24;
  v66 = v9[18] + 1;
  if (v66 < v64 / 24)
  {
    do
      result = sub_223791FB0(v5, v66++);
    while (v65 != v66);
  }
  return result;
}

_QWORD *sub_22378F718(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v5 = result;
  v6 = 0;
  *(_QWORD *)(a3 + 16) = -1;
  v7 = *result;
  v8 = result[1];
  v9 = (v8 - *result) >> 4;
  if (v8 == *result)
    v10 = 0;
  else
    v10 = v9 + 1;
  if (v10 >= 2)
  {
    v24 = result[1];
    v25 = v7;
    v26 = v8;
    v27 = v9;
    v28 = v10;
    v19 = v7;
    v20 = v7;
    v21 = v8;
    v22 = v9;
    v23 = 0;
    v17 = *(_OWORD *)a3;
    v18 = *(_QWORD *)(a3 + 16);
    result = (_QWORD *)sub_223779E14(a2, &v24, (uint64_t)&v19, &v17);
    v6 = *(_QWORD *)(a3 + 16) + 1;
  }
  *(_QWORD *)(a3 + 16) = v6;
  v12 = (uint64_t *)v5[3];
  v11 = (uint64_t *)v5[4];
  while (v12 != v11)
  {
    v13 = *v12;
    v14 = v12[1];
    v15 = (v14 - *v12) >> 4;
    if (v14 == *v12)
      v16 = 0;
    else
      v16 = v15 + 1;
    if (v16 >= 2)
    {
      v24 = v12[1];
      v25 = v13;
      v26 = v14;
      v27 = v15;
      v28 = v16;
      v19 = v13;
      v20 = v13;
      v21 = v14;
      v22 = v15;
      v23 = 0;
      v17 = *(_OWORD *)a3;
      v18 = *(_QWORD *)(a3 + 16);
      result = (_QWORD *)sub_223779E14(a2, &v24, (uint64_t)&v19, &v17);
      v6 = *(_QWORD *)(a3 + 16);
      v11 = (uint64_t *)v5[4];
    }
    *(_QWORD *)(a3 + 16) = ++v6;
    v12 += 3;
  }
  return result;
}

uint64_t sub_22378F834(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  BOOL v55;
  char *i;
  _QWORD *v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  _QWORD *v77;
  BOOL v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  _QWORD *v83;
  _QWORD *v84;
  BOOL v85;
  char *v86;
  char *v87;
  char *v88;
  _QWORD *v89;
  _QWORD *v90;
  BOOL v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  _QWORD *v105;
  _QWORD *v106;
  BOOL v107;
  char *v108;
  int64x2_t v109;
  int64x2_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  void *__p;
  char *v115;
  uint64_t v116;
  void *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  char *v124;
  uint64_t v125;
  void *v126;
  char *v127;
  uint64_t v128;
  __int128 v129[2];
  __int128 v130;
  __int128 v131;

  v8 = *(_QWORD *)a1;
  v10 = (__int128 *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  if (&v130 != (__int128 *)a1)
  {
    v11 = *v10;
    v130 = *(_OWORD *)a1;
    v131 = v11;
  }
  if (v129 != (__int128 *)a1)
  {
    v12 = *v10;
    v129[0] = *(_OWORD *)a1;
    v129[1] = v12;
  }
  if (v9 >= 0)
    v13 = v9;
  else
    v13 = v9 + 1;
  v14 = v13 >> 1;
  if (v8 >= 0)
    v15 = v8;
  else
    v15 = v8 + 1;
  v16 = v15 >> 1;
  v17 = v9 - 2 * v14 + v8 - 2 * v16;
  *(_QWORD *)&v131 = v14 + v16 + ((v17 + ((v17 & 0x80) >> 7)) << 24 >> 25);
  *(_QWORD *)&v129[0] = v131;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  __p = 0;
  v115 = 0;
  v116 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  sub_22376B6AC(&v130, v129, a2, &v126, (char **)&v123, &v120);
  sub_22376B6AC(&v130, v129, a3, &v117, (char **)&__p, &v111);
  v18 = v120;
  v19 = v121;
  v20 = v111;
  if (v120 == v121)
  {
    v108 = v120;
    v22 = v112;
    v39 = (char *)v126;
    v38 = v127;
    v40 = v127 - (_BYTE *)v126;
    if (v111 == v112)
      goto LABEL_178;
    goto LABEL_49;
  }
  v21 = v121 - v120;
  v22 = v112;
  if ((unint64_t)(v121 - v120) < 0x80 || a4 > 0x63 || (unint64_t)(v112 - v111) < 0x79)
  {
    if (v111 != v112)
    {
      v33 = v120;
      do
      {
        v34 = v20;
        do
        {
          v35 = *(_QWORD **)v33;
          v36 = *(_QWORD **)v34;
          if (*(_QWORD *)(*(_QWORD *)v33 + 48) >= *(_QWORD *)(*(_QWORD *)v34 + 32) && v35[4] <= v36[6])
          {
            v37 = v35[7] >= v36[5] && v35[5] <= v36[7];
            if (v37
              && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v35, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v36, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_182;
            }
          }
          v34 += 8;
        }
        while (v34 != v22);
        v33 += 8;
      }
      while (v33 != v19);
    }
    goto LABEL_107;
  }
  v23 = 0x7FFFFFFFFFFFFFFFLL;
  v24 = 0x8000000000000000;
  v109 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v110 = vdupq_n_s64(0x8000000000000000);
  v25 = 0x8000000000000000;
  v26 = v120;
  v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v28 = *(_QWORD **)v26;
    v29 = *(_QWORD *)(*(_QWORD *)v26 + 32);
    if (v29 >= v27)
    {
      if (v29 <= v25)
      {
LABEL_19:
        v30 = v28[5];
        if (v30 < v23)
          goto LABEL_20;
        goto LABEL_28;
      }
    }
    else
    {
      v109.i64[0] = *(_QWORD *)(*(_QWORD *)v26 + 32);
      v27 = v29;
      if (v29 <= v25)
        goto LABEL_19;
    }
    v110.i64[0] = v29;
    v25 = v29;
    v30 = v28[5];
    if (v30 < v23)
    {
LABEL_20:
      v109.i64[1] = v30;
      v23 = v30;
      if (v30 <= v24)
        goto LABEL_21;
      goto LABEL_29;
    }
LABEL_28:
    if (v30 <= v24)
    {
LABEL_21:
      v31 = v28[6];
      if (v31 < v27)
        goto LABEL_22;
      goto LABEL_30;
    }
LABEL_29:
    v110.i64[1] = v30;
    v24 = v30;
    v31 = v28[6];
    if (v31 < v27)
    {
LABEL_22:
      v109.i64[0] = v31;
      v27 = v31;
      if (v31 <= v25)
        goto LABEL_23;
      goto LABEL_31;
    }
LABEL_30:
    if (v31 <= v25)
    {
LABEL_23:
      v32 = v28[7];
      if (v32 >= v23)
        goto LABEL_32;
      goto LABEL_24;
    }
LABEL_31:
    v110.i64[0] = v31;
    v25 = v31;
    v32 = v28[7];
    if (v32 >= v23)
    {
LABEL_32:
      if (v32 <= v24)
        goto LABEL_16;
      goto LABEL_33;
    }
LABEL_24:
    v109.i64[1] = v32;
    v23 = v32;
    if (v32 <= v24)
      goto LABEL_16;
LABEL_33:
    v110.i64[1] = v32;
    v24 = v32;
LABEL_16:
    v26 += 8;
  }
  while (v26 != v121);
  if (v111 != v112)
  {
    for (i = v111; i != v112; i += 8)
    {
      v57 = *(_QWORD **)i;
      v58 = *(_QWORD *)(*(_QWORD *)i + 32);
      if (v58 >= v27)
      {
        if (v58 <= v25)
        {
LABEL_91:
          v59 = v57[5];
          if (v59 < v23)
            goto LABEL_92;
          goto LABEL_100;
        }
      }
      else
      {
        v109.i64[0] = *(_QWORD *)(*(_QWORD *)i + 32);
        v27 = v58;
        if (v58 <= v25)
          goto LABEL_91;
      }
      v110.i64[0] = v58;
      v25 = v58;
      v59 = v57[5];
      if (v59 < v23)
      {
LABEL_92:
        v109.i64[1] = v59;
        v23 = v59;
        if (v59 <= v24)
          goto LABEL_93;
        goto LABEL_101;
      }
LABEL_100:
      if (v59 <= v24)
      {
LABEL_93:
        v60 = v57[6];
        if (v60 < v27)
          goto LABEL_94;
        goto LABEL_102;
      }
LABEL_101:
      v110.i64[1] = v59;
      v24 = v59;
      v60 = v57[6];
      if (v60 < v27)
      {
LABEL_94:
        v109.i64[0] = v60;
        v27 = v60;
        if (v60 <= v25)
          goto LABEL_95;
        goto LABEL_103;
      }
LABEL_102:
      if (v60 <= v25)
      {
LABEL_95:
        v61 = v57[7];
        if (v61 < v23)
          goto LABEL_96;
        goto LABEL_104;
      }
LABEL_103:
      v110.i64[0] = v60;
      v25 = v60;
      v61 = v57[7];
      if (v61 < v23)
      {
LABEL_96:
        v109.i64[1] = v61;
        v23 = v61;
        if (v61 > v24)
          goto LABEL_105;
        continue;
      }
LABEL_104:
      if (v61 > v24)
      {
LABEL_105:
        v110.i64[1] = v61;
        v24 = v61;
      }
    }
  }
  if ((sub_2237904E0((__int128 *)v109.i8, &v120, &v111, a4 + 1, a5) & 1) == 0)
    goto LABEL_182;
LABEL_107:
  v63 = (char *)v117;
  v62 = v118;
  if ((unint64_t)(v118 - (_BYTE *)v117) >= 0x80
    && (unint64_t)(v115 - (_BYTE *)__p) >= 0x80
    && a4 <= 0x63
    && v21 >= 0x79)
  {
    v64 = 0x7FFFFFFFFFFFFFFFLL;
    v65 = 0x8000000000000000;
    v109 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v110 = vdupq_n_s64(0x8000000000000000);
    v66 = 0x8000000000000000;
    v67 = v18;
    v68 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      v69 = *(_QWORD **)v67;
      v70 = *(_QWORD *)(*(_QWORD *)v67 + 32);
      if (v70 >= v68)
      {
        if (v70 <= v66)
        {
LABEL_115:
          v71 = v69[5];
          if (v71 < v64)
            goto LABEL_116;
          goto LABEL_124;
        }
      }
      else
      {
        v109.i64[0] = *(_QWORD *)(*(_QWORD *)v67 + 32);
        v68 = v70;
        if (v70 <= v66)
          goto LABEL_115;
      }
      v110.i64[0] = v70;
      v66 = v70;
      v71 = v69[5];
      if (v71 < v64)
      {
LABEL_116:
        v109.i64[1] = v71;
        v64 = v71;
        if (v71 <= v65)
          goto LABEL_117;
        goto LABEL_125;
      }
LABEL_124:
      if (v71 <= v65)
      {
LABEL_117:
        v72 = v69[6];
        if (v72 < v68)
          goto LABEL_118;
        goto LABEL_126;
      }
LABEL_125:
      v110.i64[1] = v71;
      v65 = v71;
      v72 = v69[6];
      if (v72 < v68)
      {
LABEL_118:
        v109.i64[0] = v72;
        v68 = v72;
        if (v72 <= v66)
          goto LABEL_119;
        goto LABEL_127;
      }
LABEL_126:
      if (v72 <= v66)
      {
LABEL_119:
        v73 = v69[7];
        if (v73 < v64)
          goto LABEL_120;
        goto LABEL_128;
      }
LABEL_127:
      v110.i64[0] = v72;
      v66 = v72;
      v73 = v69[7];
      if (v73 < v64)
      {
LABEL_120:
        v109.i64[1] = v73;
        v64 = v73;
        if (v73 > v65)
          goto LABEL_129;
        goto LABEL_112;
      }
LABEL_128:
      if (v73 > v65)
      {
LABEL_129:
        v110.i64[1] = v73;
        v65 = v73;
      }
LABEL_112:
      v67 += 8;
      if (v67 == v19)
      {
        if (sub_2237904E0((__int128 *)v109.i8, &v120, &v117, a4 + 1, a5)
          && (sub_2237904E0((__int128 *)v109.i8, &v120, &__p, a4 + 1, a5) & 1) != 0)
        {
          goto LABEL_174;
        }
LABEL_182:
        v94 = 0;
        if (!v20)
          goto LABEL_184;
        goto LABEL_183;
      }
    }
  }
  if (v117 != v118)
  {
    v74 = v18;
    do
    {
      v75 = v63;
      do
      {
        v76 = *(_QWORD **)v74;
        v77 = *(_QWORD **)v75;
        if (*(_QWORD *)(*(_QWORD *)v74 + 48) >= *(_QWORD *)(*(_QWORD *)v75 + 32) && v76[4] <= v77[6])
        {
          v78 = v76[7] >= v77[5] && v76[5] <= v77[7];
          if (v78
            && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v76, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v77, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_182;
          }
        }
        v75 += 8;
      }
      while (v75 != v62);
      v74 += 8;
    }
    while (v74 != v19);
  }
  v79 = (char *)__p;
  v80 = v115;
  if (__p != v115)
  {
    v81 = v18;
    do
    {
      v82 = v79;
      do
      {
        v83 = *(_QWORD **)v81;
        v84 = *(_QWORD **)v82;
        if (*(_QWORD *)(*(_QWORD *)v81 + 48) >= *(_QWORD *)(*(_QWORD *)v82 + 32) && v83[4] <= v84[6])
        {
          v85 = v83[7] >= v84[5] && v83[5] <= v84[7];
          if (v85
            && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v83, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v84, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_182;
          }
        }
        v82 += 8;
      }
      while (v82 != v80);
      v81 += 8;
    }
    while (v81 != v19);
  }
LABEL_174:
  v108 = v18;
  v39 = (char *)v126;
  v38 = v127;
  v40 = v127 - (_BYTE *)v126;
  if (v20 == v22)
    goto LABEL_178;
LABEL_49:
  if (v40 < 0x80
    || (unint64_t)(v124 - (_BYTE *)v123) < 0x80
    || a4 > 0x63
    || (unint64_t)(v22 - v20) < 0x79)
  {
    v18 = v108;
    if (v39 != v38)
    {
      v51 = v39;
      do
      {
        v52 = v20;
        do
        {
          v53 = *(_QWORD **)v51;
          v54 = *(_QWORD **)v52;
          if (*(_QWORD *)(*(_QWORD *)v51 + 48) >= *(_QWORD *)(*(_QWORD *)v52 + 32) && v53[4] <= v54[6])
          {
            v55 = v53[7] >= v54[5] && v53[5] <= v54[7];
            if (v55
              && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v53, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v54, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_182;
            }
          }
          v52 += 8;
        }
        while (v52 != v22);
        v51 += 8;
      }
      while (v51 != v38);
    }
    v86 = (char *)v123;
    v87 = v124;
    while (1)
    {
      if (v86 == v87)
        goto LABEL_178;
      v88 = v20;
      do
      {
        v89 = *(_QWORD **)v86;
        v90 = *(_QWORD **)v88;
        if (*(_QWORD *)(*(_QWORD *)v86 + 48) >= *(_QWORD *)(*(_QWORD *)v88 + 32) && v89[4] <= v90[6])
        {
          v91 = v89[7] >= v90[5] && v89[5] <= v90[7];
          if (v91
            && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v89, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v90, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_231;
          }
        }
        v88 += 8;
      }
      while (v88 != v22);
      v86 += 8;
    }
  }
  v41 = 0x7FFFFFFFFFFFFFFFLL;
  v42 = 0x8000000000000000;
  v109 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v110 = vdupq_n_s64(0x8000000000000000);
  v43 = 0x8000000000000000;
  v44 = v20;
  v45 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v46 = *(_QWORD **)v44;
    v47 = *(_QWORD *)(*(_QWORD *)v44 + 32);
    if (v47 >= v45)
    {
      if (v47 > v43)
        goto LABEL_65;
LABEL_57:
      v48 = v46[5];
      if (v48 < v41)
        goto LABEL_58;
LABEL_66:
      if (v48 > v42)
        goto LABEL_67;
LABEL_59:
      v49 = v46[6];
      if (v49 < v45)
        goto LABEL_60;
LABEL_68:
      if (v49 > v43)
        goto LABEL_69;
LABEL_61:
      v50 = v46[7];
      if (v50 < v41)
        goto LABEL_62;
LABEL_70:
      if (v50 > v42)
      {
LABEL_71:
        v110.i64[1] = v50;
        v42 = v50;
      }
    }
    else
    {
      v109.i64[0] = *(_QWORD *)(*(_QWORD *)v44 + 32);
      v45 = v47;
      if (v47 <= v43)
        goto LABEL_57;
LABEL_65:
      v110.i64[0] = v47;
      v43 = v47;
      v48 = v46[5];
      if (v48 >= v41)
        goto LABEL_66;
LABEL_58:
      v109.i64[1] = v48;
      v41 = v48;
      if (v48 <= v42)
        goto LABEL_59;
LABEL_67:
      v110.i64[1] = v48;
      v42 = v48;
      v49 = v46[6];
      if (v49 >= v45)
        goto LABEL_68;
LABEL_60:
      v109.i64[0] = v49;
      v45 = v49;
      if (v49 <= v43)
        goto LABEL_61;
LABEL_69:
      v110.i64[0] = v49;
      v43 = v49;
      v50 = v46[7];
      if (v50 >= v41)
        goto LABEL_70;
LABEL_62:
      v109.i64[1] = v50;
      v41 = v50;
      if (v50 > v42)
        goto LABEL_71;
    }
    v44 += 8;
    if (v44 != v22)
      continue;
    break;
  }
  v18 = v108;
  if (!sub_2237904E0((__int128 *)v109.i8, &v126, &v111, a4 + 1, a5)
    || (sub_2237904E0((__int128 *)v109.i8, &v123, &v111, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_182;
  }
LABEL_178:
  if (v40 >= 0x80 && a4 <= 0x63 && (unint64_t)(v118 - (_BYTE *)v117) >= 0x79)
  {
    if ((sub_2237904E0(&v130, &v126, &v117, a4 + 1, a5) & 1) != 0)
      goto LABEL_210;
LABEL_231:
    v94 = 0;
    v18 = v108;
    if (!v20)
      goto LABEL_184;
LABEL_183:
    operator delete(v20);
    goto LABEL_184;
  }
  if (v39 != v38)
  {
    v92 = (char *)v117;
    v93 = v118;
    if (v117 != v118)
    {
LABEL_196:
      v96 = v92;
      while (1)
      {
        v97 = *(_QWORD **)v39;
        v98 = *(_QWORD **)v96;
        if (*(_QWORD *)(*(_QWORD *)v39 + 48) >= *(_QWORD *)(*(_QWORD *)v96 + 32) && v97[4] <= v98[6])
        {
          v99 = v97[7] >= v98[5] && v97[5] <= v98[7];
          if (v99
            && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v97, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v98, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_231;
          }
        }
        v96 += 8;
        if (v96 == v93)
        {
          v39 += 8;
          if (v39 == v38)
            break;
          goto LABEL_196;
        }
      }
    }
  }
LABEL_210:
  v101 = (char *)v123;
  v100 = v124;
  if ((unint64_t)(v124 - (_BYTE *)v123) < 0x80 || a4 > 0x63 || (unint64_t)(v115 - (_BYTE *)__p) < 0x79)
  {
    if (v123 != v124)
    {
      v102 = (char *)__p;
      v103 = v115;
      if (__p != v115)
      {
LABEL_215:
        v104 = v102;
        while (1)
        {
          v105 = *(_QWORD **)v101;
          v106 = *(_QWORD **)v104;
          if (*(_QWORD *)(*(_QWORD *)v101 + 48) >= *(_QWORD *)(*(_QWORD *)v104 + 32) && v105[4] <= v106[6])
          {
            v107 = v105[7] >= v106[5] && v105[5] <= v106[7];
            if (v107
              && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v105, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v106, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_231;
            }
          }
          v104 += 8;
          if (v104 == v103)
          {
            v101 += 8;
            if (v101 == v100)
              break;
            goto LABEL_215;
          }
        }
      }
    }
  }
  else if ((sub_2237904E0(v129, &v123, &__p, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_231;
  }
  v94 = 1;
  v18 = v108;
  if (v20)
    goto LABEL_183;
LABEL_184:
  if (__p)
    operator delete(__p);
  if (v117)
    operator delete(v117);
  if (v18)
    operator delete(v18);
  if (v123)
    operator delete(v123);
  if (v126)
    operator delete(v126);
  return v94;
}

void sub_22379042C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (v32)
  {
    operator delete(v32);
    v34 = __p;
    if (!__p)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2237904E0(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  BOOL v52;
  char *i;
  _QWORD *v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  BOOL v82;
  char *v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  BOOL v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v93;
  _QWORD *v94;
  _QWORD *v95;
  BOOL v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  _QWORD *v102;
  _QWORD *v103;
  BOOL v104;
  char *v105;
  int64x2_t v106;
  int64x2_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  void *__p;
  char *v112;
  uint64_t v113;
  void *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  void *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  char *v124;
  uint64_t v125;
  _QWORD v126[2];
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;

  v8 = *((_QWORD *)a1 + 1);
  v9 = *((_QWORD *)a1 + 3);
  if (&v128 != a1)
  {
    v128 = *a1;
    v129 = *((_QWORD *)a1 + 2);
  }
  if (v126 != (_QWORD *)a1)
  {
    v126[0] = *(_QWORD *)a1;
    v127 = a1[1];
  }
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = v9 + 1;
  v11 = v10 >> 1;
  if (v8 >= 0)
    v12 = v8;
  else
    v12 = v8 + 1;
  v13 = v12 >> 1;
  v14 = v9 - 2 * v11 + v8 - 2 * v13;
  v130 = v11 + v13 + ((v14 + ((v14 & 0x80) >> 7)) << 24 >> 25);
  v126[1] = v130;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  __p = 0;
  v112 = 0;
  v113 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  sub_22376B6AC(&v128, v126, a2, &v123, (char **)&v120, &v117);
  sub_22376B6AC(&v128, v126, a3, &v114, (char **)&__p, &v108);
  v15 = v117;
  v16 = v118;
  v17 = v108;
  if (v117 == v118)
  {
    v105 = v117;
    v19 = v109;
    v36 = (char *)v123;
    v35 = v124;
    v37 = v124 - (_BYTE *)v123;
    if (v108 == v109)
      goto LABEL_178;
    goto LABEL_49;
  }
  v18 = v118 - v117;
  v19 = v109;
  if ((unint64_t)(v118 - v117) < 0x80 || a4 > 0x63 || (unint64_t)(v109 - v108) < 0x79)
  {
    if (v108 != v109)
    {
      v30 = v117;
      do
      {
        v31 = v17;
        do
        {
          v32 = *(_QWORD **)v30;
          v33 = *(_QWORD **)v31;
          if (*(_QWORD *)(*(_QWORD *)v30 + 48) >= *(_QWORD *)(*(_QWORD *)v31 + 32) && v32[4] <= v33[6])
          {
            v34 = v32[7] >= v33[5] && v32[5] <= v33[7];
            if (v34
              && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v32, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v33, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_182;
            }
          }
          v31 += 8;
        }
        while (v31 != v19);
        v30 += 8;
      }
      while (v30 != v16);
    }
    goto LABEL_107;
  }
  v20 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = 0x8000000000000000;
  v106 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v107 = vdupq_n_s64(0x8000000000000000);
  v22 = 0x8000000000000000;
  v23 = v117;
  v24 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v25 = *(_QWORD **)v23;
    v26 = *(_QWORD *)(*(_QWORD *)v23 + 32);
    if (v26 >= v24)
    {
      if (v26 <= v22)
      {
LABEL_19:
        v27 = v25[5];
        if (v27 < v20)
          goto LABEL_20;
        goto LABEL_28;
      }
    }
    else
    {
      v106.i64[0] = *(_QWORD *)(*(_QWORD *)v23 + 32);
      v24 = v26;
      if (v26 <= v22)
        goto LABEL_19;
    }
    v107.i64[0] = v26;
    v22 = v26;
    v27 = v25[5];
    if (v27 < v20)
    {
LABEL_20:
      v106.i64[1] = v27;
      v20 = v27;
      if (v27 <= v21)
        goto LABEL_21;
      goto LABEL_29;
    }
LABEL_28:
    if (v27 <= v21)
    {
LABEL_21:
      v28 = v25[6];
      if (v28 < v24)
        goto LABEL_22;
      goto LABEL_30;
    }
LABEL_29:
    v107.i64[1] = v27;
    v21 = v27;
    v28 = v25[6];
    if (v28 < v24)
    {
LABEL_22:
      v106.i64[0] = v28;
      v24 = v28;
      if (v28 <= v22)
        goto LABEL_23;
      goto LABEL_31;
    }
LABEL_30:
    if (v28 <= v22)
    {
LABEL_23:
      v29 = v25[7];
      if (v29 >= v20)
        goto LABEL_32;
      goto LABEL_24;
    }
LABEL_31:
    v107.i64[0] = v28;
    v22 = v28;
    v29 = v25[7];
    if (v29 >= v20)
    {
LABEL_32:
      if (v29 <= v21)
        goto LABEL_16;
      goto LABEL_33;
    }
LABEL_24:
    v106.i64[1] = v29;
    v20 = v29;
    if (v29 <= v21)
      goto LABEL_16;
LABEL_33:
    v107.i64[1] = v29;
    v21 = v29;
LABEL_16:
    v23 += 8;
  }
  while (v23 != v118);
  if (v108 != v109)
  {
    for (i = v108; i != v109; i += 8)
    {
      v54 = *(_QWORD **)i;
      v55 = *(_QWORD *)(*(_QWORD *)i + 32);
      if (v55 >= v24)
      {
        if (v55 <= v22)
        {
LABEL_91:
          v56 = v54[5];
          if (v56 < v20)
            goto LABEL_92;
          goto LABEL_100;
        }
      }
      else
      {
        v106.i64[0] = *(_QWORD *)(*(_QWORD *)i + 32);
        v24 = v55;
        if (v55 <= v22)
          goto LABEL_91;
      }
      v107.i64[0] = v55;
      v22 = v55;
      v56 = v54[5];
      if (v56 < v20)
      {
LABEL_92:
        v106.i64[1] = v56;
        v20 = v56;
        if (v56 <= v21)
          goto LABEL_93;
        goto LABEL_101;
      }
LABEL_100:
      if (v56 <= v21)
      {
LABEL_93:
        v57 = v54[6];
        if (v57 < v24)
          goto LABEL_94;
        goto LABEL_102;
      }
LABEL_101:
      v107.i64[1] = v56;
      v21 = v56;
      v57 = v54[6];
      if (v57 < v24)
      {
LABEL_94:
        v106.i64[0] = v57;
        v24 = v57;
        if (v57 <= v22)
          goto LABEL_95;
        goto LABEL_103;
      }
LABEL_102:
      if (v57 <= v22)
      {
LABEL_95:
        v58 = v54[7];
        if (v58 < v20)
          goto LABEL_96;
        goto LABEL_104;
      }
LABEL_103:
      v107.i64[0] = v57;
      v22 = v57;
      v58 = v54[7];
      if (v58 < v20)
      {
LABEL_96:
        v106.i64[1] = v58;
        v20 = v58;
        if (v58 > v21)
          goto LABEL_105;
        continue;
      }
LABEL_104:
      if (v58 > v21)
      {
LABEL_105:
        v107.i64[1] = v58;
        v21 = v58;
      }
    }
  }
  if ((sub_22378F834(&v106, &v117, &v108, a4 + 1, a5) & 1) == 0)
    goto LABEL_182;
LABEL_107:
  v60 = (char *)v114;
  v59 = v115;
  if ((unint64_t)(v115 - (_BYTE *)v114) >= 0x80
    && (unint64_t)(v112 - (_BYTE *)__p) >= 0x80
    && a4 <= 0x63
    && v18 >= 0x79)
  {
    v61 = 0x7FFFFFFFFFFFFFFFLL;
    v62 = 0x8000000000000000;
    v106 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v107 = vdupq_n_s64(0x8000000000000000);
    v63 = 0x8000000000000000;
    v64 = v15;
    v65 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      v66 = *(_QWORD **)v64;
      v67 = *(_QWORD *)(*(_QWORD *)v64 + 32);
      if (v67 >= v65)
      {
        if (v67 <= v63)
        {
LABEL_115:
          v68 = v66[5];
          if (v68 < v61)
            goto LABEL_116;
          goto LABEL_124;
        }
      }
      else
      {
        v106.i64[0] = *(_QWORD *)(*(_QWORD *)v64 + 32);
        v65 = v67;
        if (v67 <= v63)
          goto LABEL_115;
      }
      v107.i64[0] = v67;
      v63 = v67;
      v68 = v66[5];
      if (v68 < v61)
      {
LABEL_116:
        v106.i64[1] = v68;
        v61 = v68;
        if (v68 <= v62)
          goto LABEL_117;
        goto LABEL_125;
      }
LABEL_124:
      if (v68 <= v62)
      {
LABEL_117:
        v69 = v66[6];
        if (v69 < v65)
          goto LABEL_118;
        goto LABEL_126;
      }
LABEL_125:
      v107.i64[1] = v68;
      v62 = v68;
      v69 = v66[6];
      if (v69 < v65)
      {
LABEL_118:
        v106.i64[0] = v69;
        v65 = v69;
        if (v69 <= v63)
          goto LABEL_119;
        goto LABEL_127;
      }
LABEL_126:
      if (v69 <= v63)
      {
LABEL_119:
        v70 = v66[7];
        if (v70 < v61)
          goto LABEL_120;
        goto LABEL_128;
      }
LABEL_127:
      v107.i64[0] = v69;
      v63 = v69;
      v70 = v66[7];
      if (v70 < v61)
      {
LABEL_120:
        v106.i64[1] = v70;
        v61 = v70;
        if (v70 > v62)
          goto LABEL_129;
        goto LABEL_112;
      }
LABEL_128:
      if (v70 > v62)
      {
LABEL_129:
        v107.i64[1] = v70;
        v62 = v70;
      }
LABEL_112:
      v64 += 8;
      if (v64 == v16)
      {
        if (sub_22378F834(&v106, &v117, &v114, a4 + 1, a5)
          && (sub_22378F834(&v106, &v117, &__p, a4 + 1, a5) & 1) != 0)
        {
          goto LABEL_174;
        }
LABEL_182:
        v91 = 0;
        if (!v17)
          goto LABEL_184;
        goto LABEL_183;
      }
    }
  }
  if (v114 != v115)
  {
    v71 = v15;
    do
    {
      v72 = v60;
      do
      {
        v73 = *(_QWORD **)v71;
        v74 = *(_QWORD **)v72;
        if (*(_QWORD *)(*(_QWORD *)v71 + 48) >= *(_QWORD *)(*(_QWORD *)v72 + 32) && v73[4] <= v74[6])
        {
          v75 = v73[7] >= v74[5] && v73[5] <= v74[7];
          if (v75
            && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v73, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v74, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_182;
          }
        }
        v72 += 8;
      }
      while (v72 != v59);
      v71 += 8;
    }
    while (v71 != v16);
  }
  v76 = (char *)__p;
  v77 = v112;
  if (__p != v112)
  {
    v78 = v15;
    do
    {
      v79 = v76;
      do
      {
        v80 = *(_QWORD **)v78;
        v81 = *(_QWORD **)v79;
        if (*(_QWORD *)(*(_QWORD *)v78 + 48) >= *(_QWORD *)(*(_QWORD *)v79 + 32) && v80[4] <= v81[6])
        {
          v82 = v80[7] >= v81[5] && v80[5] <= v81[7];
          if (v82
            && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v80, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v81, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_182;
          }
        }
        v79 += 8;
      }
      while (v79 != v77);
      v78 += 8;
    }
    while (v78 != v16);
  }
LABEL_174:
  v105 = v15;
  v36 = (char *)v123;
  v35 = v124;
  v37 = v124 - (_BYTE *)v123;
  if (v17 == v19)
    goto LABEL_178;
LABEL_49:
  if (v37 < 0x80
    || (unint64_t)(v121 - (_BYTE *)v120) < 0x80
    || a4 > 0x63
    || (unint64_t)(v19 - v17) < 0x79)
  {
    v15 = v105;
    if (v36 != v35)
    {
      v48 = v36;
      do
      {
        v49 = v17;
        do
        {
          v50 = *(_QWORD **)v48;
          v51 = *(_QWORD **)v49;
          if (*(_QWORD *)(*(_QWORD *)v48 + 48) >= *(_QWORD *)(*(_QWORD *)v49 + 32) && v50[4] <= v51[6])
          {
            v52 = v50[7] >= v51[5] && v50[5] <= v51[7];
            if (v52
              && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v50, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v51, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_182;
            }
          }
          v49 += 8;
        }
        while (v49 != v19);
        v48 += 8;
      }
      while (v48 != v35);
    }
    v83 = (char *)v120;
    v84 = v121;
    while (1)
    {
      if (v83 == v84)
        goto LABEL_178;
      v85 = v17;
      do
      {
        v86 = *(_QWORD **)v83;
        v87 = *(_QWORD **)v85;
        if (*(_QWORD *)(*(_QWORD *)v83 + 48) >= *(_QWORD *)(*(_QWORD *)v85 + 32) && v86[4] <= v87[6])
        {
          v88 = v86[7] >= v87[5] && v86[5] <= v87[7];
          if (v88
            && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v86, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v87, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_231;
          }
        }
        v85 += 8;
      }
      while (v85 != v19);
      v83 += 8;
    }
  }
  v38 = 0x7FFFFFFFFFFFFFFFLL;
  v39 = 0x8000000000000000;
  v106 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v107 = vdupq_n_s64(0x8000000000000000);
  v40 = 0x8000000000000000;
  v41 = v17;
  v42 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v43 = *(_QWORD **)v41;
    v44 = *(_QWORD *)(*(_QWORD *)v41 + 32);
    if (v44 >= v42)
    {
      if (v44 > v40)
        goto LABEL_65;
LABEL_57:
      v45 = v43[5];
      if (v45 < v38)
        goto LABEL_58;
LABEL_66:
      if (v45 > v39)
        goto LABEL_67;
LABEL_59:
      v46 = v43[6];
      if (v46 < v42)
        goto LABEL_60;
LABEL_68:
      if (v46 > v40)
        goto LABEL_69;
LABEL_61:
      v47 = v43[7];
      if (v47 < v38)
        goto LABEL_62;
LABEL_70:
      if (v47 > v39)
      {
LABEL_71:
        v107.i64[1] = v47;
        v39 = v47;
      }
    }
    else
    {
      v106.i64[0] = *(_QWORD *)(*(_QWORD *)v41 + 32);
      v42 = v44;
      if (v44 <= v40)
        goto LABEL_57;
LABEL_65:
      v107.i64[0] = v44;
      v40 = v44;
      v45 = v43[5];
      if (v45 >= v38)
        goto LABEL_66;
LABEL_58:
      v106.i64[1] = v45;
      v38 = v45;
      if (v45 <= v39)
        goto LABEL_59;
LABEL_67:
      v107.i64[1] = v45;
      v39 = v45;
      v46 = v43[6];
      if (v46 >= v42)
        goto LABEL_68;
LABEL_60:
      v106.i64[0] = v46;
      v42 = v46;
      if (v46 <= v40)
        goto LABEL_61;
LABEL_69:
      v107.i64[0] = v46;
      v40 = v46;
      v47 = v43[7];
      if (v47 >= v38)
        goto LABEL_70;
LABEL_62:
      v106.i64[1] = v47;
      v38 = v47;
      if (v47 > v39)
        goto LABEL_71;
    }
    v41 += 8;
    if (v41 != v19)
      continue;
    break;
  }
  v15 = v105;
  if (!sub_22378F834(&v106, &v123, &v108, a4 + 1, a5)
    || (sub_22378F834(&v106, &v120, &v108, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_182;
  }
LABEL_178:
  if (v37 >= 0x80 && a4 <= 0x63 && (unint64_t)(v115 - (_BYTE *)v114) >= 0x79)
  {
    if ((sub_22378F834(&v128, &v123, &v114, a4 + 1, a5) & 1) != 0)
      goto LABEL_210;
LABEL_231:
    v91 = 0;
    v15 = v105;
    if (!v17)
      goto LABEL_184;
LABEL_183:
    operator delete(v17);
    goto LABEL_184;
  }
  if (v36 != v35)
  {
    v89 = (char *)v114;
    v90 = v115;
    if (v114 != v115)
    {
LABEL_196:
      v93 = v89;
      while (1)
      {
        v94 = *(_QWORD **)v36;
        v95 = *(_QWORD **)v93;
        if (*(_QWORD *)(*(_QWORD *)v36 + 48) >= *(_QWORD *)(*(_QWORD *)v93 + 32) && v94[4] <= v95[6])
        {
          v96 = v94[7] >= v95[5] && v94[5] <= v95[7];
          if (v96
            && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v94, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v95, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
          {
            goto LABEL_231;
          }
        }
        v93 += 8;
        if (v93 == v90)
        {
          v36 += 8;
          if (v36 == v35)
            break;
          goto LABEL_196;
        }
      }
    }
  }
LABEL_210:
  v98 = (char *)v120;
  v97 = v121;
  if ((unint64_t)(v121 - (_BYTE *)v120) < 0x80 || a4 > 0x63 || (unint64_t)(v112 - (_BYTE *)__p) < 0x79)
  {
    if (v120 != v121)
    {
      v99 = (char *)__p;
      v100 = v112;
      if (__p != v112)
      {
LABEL_215:
        v101 = v99;
        while (1)
        {
          v102 = *(_QWORD **)v98;
          v103 = *(_QWORD **)v101;
          if (*(_QWORD *)(*(_QWORD *)v98 + 48) >= *(_QWORD *)(*(_QWORD *)v101 + 32) && v102[4] <= v103[6])
          {
            v104 = v102[7] >= v103[5] && v102[5] <= v103[7];
            if (v104
              && !sub_223791190(*(_DWORD *)a5, *(uint64_t **)(a5 + 8), (uint64_t)v102, *(_DWORD *)(a5 + 16), *(uint64_t **)(a5 + 24), (uint64_t)v103, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD **)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))
            {
              goto LABEL_231;
            }
          }
          v101 += 8;
          if (v101 == v100)
          {
            v98 += 8;
            if (v98 == v97)
              break;
            goto LABEL_215;
          }
        }
      }
    }
  }
  else if ((sub_22378F834(v126, &v120, &__p, a4 + 1, a5) & 1) == 0)
  {
    goto LABEL_231;
  }
  v91 = 1;
  v15 = v105;
  if (v17)
    goto LABEL_183;
LABEL_184:
  if (__p)
    operator delete(__p);
  if (v114)
    operator delete(v114);
  if (v15)
    operator delete(v15);
  if (v120)
    operator delete(v120);
  if (v123)
    operator delete(v123);
  return v91;
}

void sub_2237910DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (v32)
  {
    operator delete(v32);
    v34 = __p;
    if (!__p)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223791190(int a1, uint64_t *a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, unsigned __int8 **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t i;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144[16];
  int v145;
  char v146;
  uint64_t v147;
  __int16 v148;
  int v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165[19];
  char v166;
  char v167;
  uint64_t v168[19];
  char v169;
  char v170;

  if (*(_BYTE *)(a3 + 96) && (unint64_t)(*(_QWORD *)(a3 + 80) + 1) < *(_QWORD *)(a3 + 88)
    || *(_BYTE *)(a6 + 96) && (unint64_t)(*(_QWORD *)(a6 + 80) + 1) < *(_QWORD *)(a6 + 88))
  {
    return 1;
  }
  v11 = *(_QWORD *)(a3 + 24);
  if (v11 >= 0)
    v12 = (uint64_t *)(a2[3] + 24 * v11);
  else
    v12 = a2;
  v13 = *v12;
  v14 = v12[1];
  v15 = v14 - *v12;
  v16 = v15 >> 4;
  if (v15)
    v17 = v16 + 1;
  else
    v17 = 0;
  v18 = *(_QWORD *)(a6 + 24);
  if (v18 >= 0)
    v19 = (uint64_t *)(a5[3] + 24 * v18);
  else
    v19 = a5;
  v20 = *v19;
  v21 = v19[1];
  v22 = v21 - *v19;
  v23 = v22 >> 4;
  if (v22)
    v24 = v23 + 1;
  else
    v24 = 0;
  v139 = v24;
  v25 = *(_QWORD *)(a3 + 64);
  v26 = v17 - v25;
  if (v17 < v16 && v26 < v16)
  {
    v28 = v14 - 16 * v25;
    v29 = *(_QWORD *)(a3 + 72);
    if (v26 < v16)
    {
LABEL_25:
      v30 = v28 - 16;
      goto LABEL_29;
    }
  }
  else
  {
    v28 = v14;
    if (v26 <= v16)
      v28 = v13 + 16 * (v26 % v16);
    v29 = *(_QWORD *)(a3 + 72);
    if (v26 < v16)
      goto LABEL_25;
  }
  v30 = v14;
  if (v26 - 1 <= v16)
    v30 = v13 + 16 * ((v26 - 1) % v16);
LABEL_29:
  v31 = v17 - v29;
  v32 = *(_DWORD *)a3;
  if (v29 == v25)
  {
LABEL_46:
    v40 = v26 - 1;
    if (v26 >= v16)
      goto LABEL_51;
LABEL_47:
    v41 = v28 - 16;
    v42 = v40;
    if (v40)
      goto LABEL_53;
    goto LABEL_48;
  }
  v33 = v17 - v25;
  v34 = v28;
  v35 = *(_QWORD *)(a3 + 64);
  do
  {
    v36 = v30;
    v37 = v33 - 2;
    if (v33 - 1 >= v16)
    {
      v38 = (uint64_t *)v14;
      if (v37 <= v16)
        v38 = (uint64_t *)(v13 + 16 * (v37 % v16));
    }
    else
    {
      v38 = (uint64_t *)(v30 - 16);
    }
    v39 = *v38;
    if (v32 == 1)
    {
      if (v39 >= *(_QWORD *)(a6 + 32))
        goto LABEL_45;
    }
    else
    {
      if (v32 != -1)
        goto LABEL_46;
      if (v39 <= *(_QWORD *)(a6 + 48))
      {
LABEL_45:
        v26 = v33;
        v28 = v34;
        v25 = v35;
        goto LABEL_46;
      }
    }
    if (v33 - 1 < v16)
    {
      v30 = v36 - 16;
    }
    else
    {
      v30 = v14;
      if (v37 <= v16)
        v30 = v13 + 16 * (v37 % v16);
    }
    ++v35;
    --v33;
    v34 = v36;
  }
  while (v29 != v35);
  v26 = v17 - v29;
  v28 = v36;
  v25 = v29;
  v40 = v31 - 1;
  if (v31 < v16)
    goto LABEL_47;
LABEL_51:
  v41 = v14;
  if (v40 > v16)
  {
    v42 = v40;
    if (v40)
      goto LABEL_53;
LABEL_48:
    v42 = v17 - 1;
    if (v17 >= v16)
    {
      v41 = v14;
      if (v42 <= v16)
        v41 = v13 + 16 * (v42 % v16);
    }
    else
    {
      v41 = v14 - 16;
    }
    if (v17 == v26)
    {
      v42 = v17;
      v41 = v14;
    }
    if (v26 < v16)
      goto LABEL_54;
    goto LABEL_62;
  }
  v41 = v13 + 16 * (v40 % v16);
  v42 = v40;
  if (!v40)
    goto LABEL_48;
LABEL_53:
  if (v26 < v16)
  {
LABEL_54:
    v43 = v28 - 16;
    goto LABEL_64;
  }
LABEL_62:
  v43 = v14;
  if (v40 <= v16)
    v43 = v13 + 16 * (v40 % v16);
LABEL_64:
  v44 = v42 - 1;
  if (v42 >= v16)
  {
    v45 = v14;
    if (v44 <= v16)
    {
      v45 = v13 + 16 * (v44 % v16);
      if (v42 != 1)
        goto LABEL_70;
    }
    else if (v42 != 1)
    {
      goto LABEL_70;
    }
LABEL_66:
    v46 = v17 - 1;
    if (v17 >= v16)
    {
      v47 = v14;
      if (v46 <= v16)
        v47 = v13 + 16 * (v46 % v16);
    }
    else
    {
      v47 = v14 - 16;
    }
    if (v17 == v42)
      v44 = v17;
    else
      v44 = v17 - 1;
    if (v17 == v42)
      v45 = v14;
    else
      v45 = v47;
    v10 = 1;
    if (v26 == v31)
      return v10;
    goto LABEL_83;
  }
  v45 = v41 - 16;
  if (v42 == 1)
    goto LABEL_66;
LABEL_70:
  v10 = 1;
  if (v26 == v31)
    return v10;
LABEL_83:
  v48 = -v32;
  v49 = *(_DWORD *)a6;
  v50 = v139 < v23;
  if (v139 >= v23)
    v51 = 0;
  else
    v51 = -1;
  v129 = v139 - 1;
  if (v139 - 1 > v23)
    v50 = 1;
  v128 = v50;
  v52 = v17 < v16;
  v134 = a1;
  v133 = a4;
  v53 = -v49;
  if (v17 >= v16)
    v54 = 0;
  else
    v54 = -1;
  v111 = v17 - 1;
  if (v17 - 1 > v16)
    v52 = 1;
  v110 = v52;
  v127 = v21 + 16 * v51;
  v109 = v14 + 16 * v54;
  v117 = v14;
  v118 = v13;
  v115 = v17;
  v116 = v16;
  v114 = v31;
  v112 = *(_DWORD *)a6;
  v113 = v48;
  v130 = -*(_DWORD *)a6;
  v131 = v21;
  v132 = v20;
  while (1)
  {
    v56 = v26 - 1;
    if (v26 >= v16)
    {
      v57 = (uint64_t *)v14;
      if (v56 <= v16)
        v57 = (uint64_t *)(v13 + 16 * (v56 % v16));
    }
    else
    {
      v57 = (uint64_t *)(v28 - 16);
    }
    v58 = *v57;
    if (v48 == 1)
    {
      if (v58 < *(_QWORD *)(a6 + 32))
        return 1;
    }
    else if (v48 == -1 && v58 > *(_QWORD *)(a6 + 48))
    {
      return 1;
    }
    if (v26 >= v16)
    {
      v59 = v14;
      if (v56 <= v16)
        v59 = v13 + 16 * (v56 % v16);
    }
    else
    {
      v59 = v28 - 16;
    }
    v60 = v40 - 1;
    v125 = v40;
    v124 = v43;
    if (v40 >= v16)
    {
      v61 = v14;
      if (v60 <= v16)
        v61 = v13 + 16 * (v60 % v16);
    }
    else
    {
      v61 = v43 - 16;
    }
    v120 = v40 - 1;
    v168[0] = a3;
    v168[1] = v25;
    v168[2] = v59;
    v168[3] = v61;
    v122 = v45;
    v123 = v44;
    v168[4] = v45;
    v168[5] = v13;
    v168[6] = v14;
    v168[7] = v16;
    v168[8] = v44;
    v168[9] = v14;
    v168[10] = v13;
    v168[11] = v14;
    v168[12] = v16;
    v168[13] = v17;
    v168[14] = v13;
    v168[15] = v13;
    v168[16] = v14;
    v168[17] = v16;
    v168[18] = 0;
    v169 = 1;
    v62 = *(_QWORD *)(a6 + 64);
    v63 = v139 - v62;
    v170 = 0;
    if (v139 >= v23 || v63 >= v23)
    {
      v64 = v21;
      if (v63 <= v23)
        v64 = v20 + 16 * (v63 % v23);
    }
    else
    {
      v64 = v21 - 16 * v62;
    }
    if (v63 >= v23)
    {
      v65 = v21;
      if (v63 - 1 <= v23)
      {
        v65 = v20 + 16 * ((v63 - 1) % v23);
        v66 = *(_QWORD *)(a6 + 72);
        v137 = v139 - v66;
        if (v66 == v62)
        {
LABEL_139:
          v74 = v63 - 1;
          if (v63 >= v23)
            goto LABEL_166;
LABEL_140:
          v75 = v64 - 16;
          v76 = v74;
          v126 = v129 / v23;
          if (!v74)
            goto LABEL_141;
LABEL_168:
          v121 = v26 - 1;
          if (v63 >= v23)
            goto LABEL_149;
LABEL_169:
          v78 = v64 - 16;
          v79 = v76 - 1;
          if (v76 < v23)
            goto LABEL_152;
          goto LABEL_170;
        }
      }
      else
      {
        v66 = *(_QWORD *)(a6 + 72);
        v137 = v139 - v66;
        if (v66 == v62)
          goto LABEL_139;
      }
    }
    else
    {
      v65 = v64 - 16;
      v66 = *(_QWORD *)(a6 + 72);
      v137 = v139 - v66;
      if (v66 == v62)
        goto LABEL_139;
    }
    v67 = v139 - v62;
    v68 = v64;
    v69 = v62;
    while (1)
    {
      v70 = v65;
      v71 = v67 - 2;
      if (v67 - 1 >= v23)
      {
        v72 = (uint64_t *)v21;
        if (v71 <= v23)
          v72 = (uint64_t *)(v20 + 16 * (v71 % v23));
      }
      else
      {
        v72 = (uint64_t *)(v65 - 16);
      }
      v73 = *v72;
      if (v49 == 1)
      {
        if (v73 >= *(_QWORD *)(a3 + 32))
        {
LABEL_165:
          v63 = v67;
          v62 = v69;
          v74 = v67 - 1;
          if (v67 < v23)
            goto LABEL_140;
          goto LABEL_166;
        }
        goto LABEL_134;
      }
      if (v49 != -1)
        break;
      if (v73 <= *(_QWORD *)(a3 + 48))
        goto LABEL_165;
LABEL_134:
      if (v67 - 1 < v23)
      {
        v65 = v70 - 16;
      }
      else
      {
        v65 = v21;
        if (v71 <= v23)
          v65 = v20 + 16 * (v71 % v23);
      }
      ++v69;
      --v67;
      v64 = v70;
      if (v66 == v69)
      {
        v63 = v137;
        v64 = v70;
        v62 = v66;
        v74 = v137 - 1;
        if (v137 < v23)
          goto LABEL_140;
        goto LABEL_166;
      }
    }
    v64 = v68;
    v74 = v63 - 1;
    if (v63 < v23)
      goto LABEL_140;
LABEL_166:
    v75 = v21;
    if (v74 <= v23)
    {
      v75 = v20 + 16 * (v74 % v23);
      v76 = v74;
      v126 = v129 / v23;
      if (!v74)
        goto LABEL_141;
      goto LABEL_168;
    }
    v76 = v74;
    v126 = v129 / v23;
    if (v74)
      goto LABEL_168;
LABEL_141:
    v77 = v127;
    if (!v128)
      v77 = v20 + 16 * (v129 - v126 * v23);
    if (v139 == v63)
      v75 = v21;
    else
      v75 = v77;
    v76 = v139 - 1;
    if (v139 == v63)
      v76 = v139;
    v121 = v26 - 1;
    if (v63 < v23)
      goto LABEL_169;
LABEL_149:
    v78 = v21;
    if (v74 <= v23)
      v78 = v20 + 16 * (v74 % v23);
    v79 = v76 - 1;
    if (v76 < v23)
    {
LABEL_152:
      v80 = v75 - 16;
      v119 = v28;
      if (!v79)
        goto LABEL_153;
LABEL_172:
      if (v63 != v137)
        goto LABEL_181;
      goto LABEL_173;
    }
LABEL_170:
    v80 = v21;
    if (v79 <= v23)
    {
      v80 = v20 + 16 * (v79 % v23);
      v119 = v28;
      if (v79)
        goto LABEL_172;
    }
    else
    {
      v119 = v28;
      if (v79)
        goto LABEL_172;
    }
LABEL_153:
    v81 = v127;
    if (!v128)
      v81 = v20 + 16 * (v129 - v126 * v23);
    v80 = v139 == v76 ? v21 : v81;
    v79 = v139 == v76 ? v139 : v139 - 1;
    if (v63 != v137)
      break;
LABEL_173:
    v16 = v116;
    if (v26 >= v116)
    {
      v14 = v117;
      v13 = v118;
      v28 = v117;
      v26 = v121;
      v86 = v122;
      v82 = v114;
      v17 = v115;
      v84 = v124;
      v83 = v125;
      v85 = v123;
      v49 = v112;
      v48 = v113;
      v87 = v120;
      if (v121 <= v116)
        v28 = v118 + 16 * (v121 % v116);
    }
    else
    {
      v13 = v118;
      v28 = v119 - 16;
      v14 = v117;
      v82 = v114;
      v17 = v115;
      v84 = v124;
      v83 = v125;
      v86 = v122;
      v85 = v123;
      v49 = v112;
      v48 = v113;
      v87 = v120;
      v26 = v121;
    }
    if (v83 >= v116)
    {
      v43 = v14;
      if (v87 <= v116)
        v43 = v13 + 16 * (v87 % v116);
    }
    else
    {
      v43 = v84 - 16;
    }
    v55 = v85 - 1;
    if (v85 >= v116)
    {
      v45 = v14;
      if (v55 <= v116)
      {
        v45 = v13 + 16 * (v55 % v116);
        if (v85 == 1)
          goto LABEL_239;
      }
      else if (v85 == 1)
      {
LABEL_239:
        v107 = v109;
        if (!v110)
          v107 = v13 + 16 * (v111 % v116);
        v55 = v111;
        if (v17 == v85)
        {
          v55 = v17;
          v45 = v14;
        }
        else
        {
          v45 = v107;
        }
      }
    }
    else
    {
      v45 = v86 - 16;
      if (v85 == 1)
        goto LABEL_239;
    }
    ++v25;
    v44 = v55;
    v40 = v87;
    if (v83 == v82)
      return 1;
  }
  while (1)
  {
LABEL_181:
    v90 = v63 - 1;
    if (v63 >= v23)
    {
      v91 = (uint64_t *)v21;
      if (v90 <= v23)
        v91 = (uint64_t *)(v20 + 16 * (v90 % v23));
    }
    else
    {
      v91 = (uint64_t *)(v64 - 16);
    }
    v92 = *v91;
    if (v53 == 1)
    {
      if (v92 < *(_QWORD *)(a3 + 32))
        goto LABEL_173;
    }
    else if (v53 == -1 && v92 > *(_QWORD *)(a3 + 48))
    {
      goto LABEL_173;
    }
    if (v63 >= v23)
    {
      v93 = v21;
      if (v90 <= v23)
        v93 = v20 + 16 * (v90 % v23);
    }
    else
    {
      v93 = v64 - 16;
    }
    v94 = v74 - 1;
    v138 = v64;
    v141 = v78;
    v142 = v63;
    v143 = v63 - 1;
    if (v74 >= v23)
    {
      v95 = v21;
      if (v94 <= v23)
        v95 = v20 + 16 * (v94 % v23);
    }
    else
    {
      v95 = v78 - 16;
    }
    v140 = v80;
    v165[0] = a6;
    v165[1] = v62;
    v165[2] = v93;
    v165[3] = v95;
    v165[4] = v80;
    v165[5] = v20;
    v165[6] = v21;
    v165[7] = v23;
    v165[8] = v79;
    v165[9] = v21;
    v165[10] = v20;
    v165[11] = v21;
    v165[12] = v23;
    v165[13] = v139;
    v165[14] = v20;
    v165[15] = v20;
    v165[16] = v21;
    v165[17] = v23;
    v165[18] = 0;
    v166 = 0;
    v167 = 0;
    v145 = 0;
    v146 = 0;
    v147 = -1;
    v148 = 0;
    v149 = 0;
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v162 = 1;
    v163 = 0;
    v164 = 0;
    v150 = v134;
    v96 = a3;
    v151 = *(_OWORD *)(a3 + 16);
    v152 = v25;
    v153 = xmmword_2245F5400;
    v154 = 1;
    v158 = v133;
    v97 = a6;
    v159 = *(_OWORD *)(a6 + 16);
    v98 = v62;
    v160 = v62;
    v99 = a9[1] - *a9;
    v161 = xmmword_2245F5400;
    sub_22377C994(v168, v165, (uint64_t)v144, a7, a8, (uint64_t)a9);
    v100 = a9[1];
    for (i = *a9 + v99; i != v100; i += 200)
    {
      if (*(_DWORD *)(i + 40) == 4 && **a10 - 58 <= 0xFFFFFFF7)
        **a10 = 50;
      if (*(_DWORD *)(i + 120) == 4 && **a10 - 58 <= 0xFFFFFFF7)
        **a10 = 50;
    }
    if ((*a10)[9])
      return 0;
    if (v142 >= v23)
    {
      v21 = v131;
      v20 = v132;
      v64 = v131;
      a6 = v97;
      a3 = v96;
      v53 = v130;
      v102 = v98;
      v104 = v140;
      v103 = v141;
      v105 = v74 - 1;
      if (v143 <= v23)
        v64 = v132 + 16 * (v143 % v23);
    }
    else
    {
      v64 = v138 - 16;
      a6 = v97;
      a3 = v96;
      v21 = v131;
      v20 = v132;
      v53 = v130;
      v102 = v98;
      v104 = v140;
      v103 = v141;
      v105 = v74 - 1;
    }
    if (v74 >= v23)
    {
      v78 = v21;
      if (v105 <= v23)
        v78 = v20 + 16 * (v105 % v23);
    }
    else
    {
      v78 = v103 - 16;
    }
    v88 = v79 - 1;
    if (v79 >= v23)
    {
      v80 = v21;
      if (v88 <= v23)
        v80 = v20 + 16 * (v88 % v23);
    }
    else
    {
      v80 = v104 - 16;
    }
    if (v79 == 1)
    {
      v106 = v127;
      if (!v128)
        v106 = v20 + 16 * (v129 - v126 * v23);
      if (v139 == 1)
        v80 = v21;
      else
        v80 = v106;
      v88 = v139 - 1;
      if (v139 == 1)
        v88 = 1;
    }
    v62 = v102 + 1;
    v79 = v88;
    v63 = v143;
    v89 = v74 == v137;
    v74 = v105;
    if (v89)
      goto LABEL_173;
  }
}

uint64_t sub_223791E28(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_DWORD *)(result + 40);
  if (v2 != 7)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    if (a2 >= 0)
      v4 = *(_QWORD *)(*(_QWORD *)result + 24) + 24 * a2;
    v5 = *(uint64_t **)v4;
    if (*(_QWORD *)v4 != *(_QWORD *)(v4 + 8))
    {
      v6 = *(uint64_t **)(result + 8);
      v8 = *v6;
      v7 = v6[1];
      v9 = v7 - *v6;
      if ((unint64_t)v9 >= 0x30)
      {
        v10 = v9 >> 4;
        if (v7 == v8)
          v11 = 0;
        else
          v11 = v10 + 1;
        v23 = (uint64_t *)v6[1];
        v24 = v8;
        v25 = v7;
        v26 = v10;
        v27 = v11;
        v28 = v8;
        v29 = v8;
        v30 = v7;
        v31 = v10;
        v32 = 0;
        result = sub_2237743EC(v5, &v23);
        if ((_DWORD)result == 1)
        {
          v13 = (uint64_t *)v6[3];
          v12 = (uint64_t *)v6[4];
          while (v13 != v12)
          {
            v15 = *v13;
            v14 = v13[1];
            v16 = v14 - *v13;
            if ((unint64_t)v16 >= 0x30)
            {
              v17 = v16 >> 4;
              if (v14 == v15)
                v18 = 0;
              else
                v18 = v17 + 1;
              v23 = (uint64_t *)v13[1];
              v24 = v15;
              v25 = v14;
              v26 = v17;
              v27 = v18;
              v28 = v15;
              v29 = v15;
              v30 = v14;
              v31 = v17;
              v32 = 0;
              result = sub_2237743EC(v5, &v23);
              if ((_DWORD)result != -1)
                goto LABEL_19;
              v12 = (uint64_t *)v6[4];
            }
            v13 += 3;
          }
          v21 = *(unsigned __int8 **)(v3 + 24);
          if (*v21 - 58 <= 0xFFFFFFF7)
          {
            *v21 = 50;
            v21 = *(unsigned __int8 **)(v3 + 24);
          }
          v22 = *(_DWORD *)(v3 + 40) | 1;
          *(_DWORD *)(v3 + 40) = v22;
          if (v21[3] - 58 <= 0xFFFFFFF6)
          {
            v21[3] = 49;
            v22 = *(_DWORD *)(v3 + 40);
          }
          *(_DWORD *)(v3 + 40) = v22 | 4;
          if ((v22 | 4) != 7)
            goto LABEL_27;
          goto LABEL_21;
        }
LABEL_19:
        v2 = *(_DWORD *)(v3 + 40);
      }
      v19 = v2 | 2;
      *(_DWORD *)(v3 + 40) = v19;
      if (v19 != 7)
      {
LABEL_27:
        v20 = *(_BYTE *)(*(_QWORD *)(v3 + 24) + 9) != 0;
        goto LABEL_28;
      }
LABEL_21:
      v20 = 1;
LABEL_28:
      *(_BYTE *)(v3 + 16) = v20;
    }
  }
  return result;
}

uint64_t sub_223791FB0(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_DWORD *)(result + 40);
  if (v2 != 7)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    if (a2 >= 0)
      v4 = *(_QWORD *)(*(_QWORD *)result + 24) + 24 * a2;
    v5 = *(uint64_t **)v4;
    if (*(_QWORD *)v4 != *(_QWORD *)(v4 + 8))
    {
      v6 = *(uint64_t **)(result + 8);
      v8 = *v6;
      v7 = v6[1];
      v9 = v7 - *v6;
      if ((unint64_t)v9 >= 0x30)
      {
        v10 = v9 >> 4;
        if (v7 == v8)
          v11 = 0;
        else
          v11 = v10 + 1;
        v23 = (uint64_t *)v6[1];
        v24 = v8;
        v25 = v7;
        v26 = v10;
        v27 = v11;
        v28 = v8;
        v29 = v8;
        v30 = v7;
        v31 = v10;
        v32 = 0;
        result = sub_2237743EC(v5, &v23);
        if ((_DWORD)result == 1)
        {
          v13 = (uint64_t *)v6[3];
          v12 = (uint64_t *)v6[4];
          while (v13 != v12)
          {
            v15 = *v13;
            v14 = v13[1];
            v16 = v14 - *v13;
            if ((unint64_t)v16 >= 0x30)
            {
              v17 = v16 >> 4;
              if (v14 == v15)
                v18 = 0;
              else
                v18 = v17 + 1;
              v23 = (uint64_t *)v13[1];
              v24 = v15;
              v25 = v14;
              v26 = v17;
              v27 = v18;
              v28 = v15;
              v29 = v15;
              v30 = v14;
              v31 = v17;
              v32 = 0;
              result = sub_2237743EC(v5, &v23);
              if ((_DWORD)result != -1)
                goto LABEL_19;
              v12 = (uint64_t *)v6[4];
            }
            v13 += 3;
          }
          v21 = *(unsigned __int8 **)(v3 + 24);
          if (*v21 - 58 <= 0xFFFFFFF7)
          {
            *v21 = 50;
            v21 = *(unsigned __int8 **)(v3 + 24);
          }
          v22 = *(_DWORD *)(v3 + 40) | 1;
          *(_DWORD *)(v3 + 40) = v22;
          if (v21[1] - 58 <= 0xFFFFFFF6)
          {
            v21[1] = 49;
            v22 = *(_DWORD *)(v3 + 40);
          }
          *(_DWORD *)(v3 + 40) = v22 | 4;
          if ((v22 | 4) != 7)
            goto LABEL_27;
          goto LABEL_21;
        }
LABEL_19:
        v2 = *(_DWORD *)(v3 + 40);
      }
      v19 = v2 | 2;
      *(_DWORD *)(v3 + 40) = v19;
      if (v19 != 7)
      {
LABEL_27:
        v20 = *(_BYTE *)(*(_QWORD *)(v3 + 24) + 9) != 0;
        goto LABEL_28;
      }
LABEL_21:
      v20 = 1;
LABEL_28:
      *(_BYTE *)(v3 + 16) = v20;
    }
  }
  return result;
}

uint64_t sub_223792138(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 10;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 20;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_223792200()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223792214(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC588F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22379224C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC588F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

char *sub_22379226C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  char *result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(v2 + 8);
  if ((unint64_t)v3 >= *(_QWORD *)(v2 + 16))
  {
    result = sub_2237923C4(*(char ***)(a1 + 8), a2 + 40);
    *(_QWORD *)(v2 + 8) = result;
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    v5 = *(_BYTE **)(a2 + 40);
    v4 = *(_BYTE **)(a2 + 48);
    v6 = v4 - v5;
    if (v4 != v5)
    {
      if (v6 < 0)
        sub_22316E078();
      v7 = (char *)operator new(v4 - v5);
      *v3 = v7;
      v3[1] = v7;
      v3[2] = &v7[16 * (v6 >> 4)];
      v8 = v6 & 0xFFFFFFFFFFFFFFF0;
      memcpy(v7, v5, v8);
      v3[1] = &v7[v8];
    }
    result = (char *)(v3 + 3);
    *(_QWORD *)(v2 + 8) = v3 + 3;
    *(_QWORD *)(v2 + 8) = v3 + 3;
  }
  return result;
}

void sub_22379232C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_22379234C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes8polygons5UnionIxEENSt3__16vectorINS5_IN3cva6MatrixIT_Lj2ELj1EXclsr6detailE7I"
                     "sSmallIS8_XLj2EEXLj1EEEEEEENS4_9allocatorIS9_EEEENSA_ISC_EEEERKSE_SG_EUlRKN11Clipper2Lib10PolyPath64EE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes8polygons5UnionIxEENSt3__16vectorINS5_IN3cva6MatrixIT_Lj2ELj1EXcls"
                                "r6detailE7IsSmallIS8_XLj2EEXLj1EEEEEEENS4_9allocatorIS9_EEEENSA_ISC_EEEERKSE_SG_EUlRKN11"
                                "Clipper2Lib10PolyPath64EE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes8polygons5UnionIxEENSt3__16vectorINS5_IN3cva6MatrixIT_Lj2ELj1EXclsr6detailE7IsSmallIS8_XLj2EEXLj1EEEEEEENS4_9allocatorIS9_EEEENSA_ISC_EEEERKSE_SG_EUlRKN11Clipper2Lib10PolyPath64EE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes8polygons5UnionIxEENSt3__16vectorINS5_IN3cva6MatrixIT_Lj2ELj1EXclsr6detailE7IsSmallIS8_XLj2EEXLj1EEEEEEENS4_9allocatorIS9_EEEENSA_ISC_EEEERKSE_SG_EUlRKN11Clipper2Lib10PolyPath64EE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2237923B8()
{
  return &unk_24EC58968;
}

char *sub_2237923C4(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  const void *v13;
  int64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)&v25 + 1) = v11;
  *((_QWORD *)v10 + 1) = 0;
  v12 = v10 + 8;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_22316E078();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    *((_QWORD *)v10 + 2) = &v15[16 * (v14 >> 4)];
    v16 = v14 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v15, v13, v16);
    *v12 = &v15[v16];
  }
  v17 = v10 + 24;
  *(_QWORD *)&v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v20 = a1[1];
    *a1 = v10;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v3)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_2237925A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_223452E9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2237925CC@<X0>(__int16 ***a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  __n128 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  __n128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  int32x4_t *v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  int v32;
  __n128 *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  __int16 **v40;
  __int16 **v41;
  __int16 *v42;
  __int16 *v43;
  __int128 v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  __n128 *v50;
  uint64_t v51;
  unint64_t v52;
  int32x4_t *v53;
  unint64_t v54;
  unint64_t v55;
  int32x4_t *v56;
  int32x4_t v57;
  int32x4_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __n128 *v62;
  unint64_t v63;
  __n128 *v64;
  unint64_t v65;
  int32x4_t v66;
  __n128 v67;
  __n128 v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  char v72;
  _QWORD v73[3];
  _DWORD v74[7];
  unint64_t v75[2];
  __n128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v76 = 0uLL;
  *(_QWORD *)a4 = &off_24EC24BA0;
  v7 = (_QWORD *)(a4 + 8);
  sub_223203A34(a3, (_WORD *)(a4 + 8));
  v9 = *v7;
  v10 = *(std::__shared_weak_count **)(a4 + 16);
  if (!v10)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
    {
LABEL_11:
      v69 = 0;
      v14 = v76;
      v70 = v76;
      if (*(_DWORD *)(a4 + 100) != 1)
        goto LABEL_52;
      goto LABEL_12;
    }
  }
  else
  {
LABEL_6:
    if (!v9)
      goto LABEL_11;
  }
  if (!*(_BYTE *)(a4 + 129))
    goto LABEL_11;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a4 + 8) + 96))(&v69, *(_QWORD *)(a4 + 8), 1);
  v14 = v76;
  v70 = v76;
  if (*(_DWORD *)(a4 + 100) != 1)
    goto LABEL_52;
LABEL_12:
  v15 = *(_DWORD *)(a4 + 104);
  v16 = *(unsigned int *)(a4 + 88);
  if (v15 != (_DWORD)v16)
  {
    v72 = 0;
    v71 = v16;
    v8.n128_u32[0] = v70.n128_u32[1];
    v14.n128_u32[0] = v70.n128_u32[0];
    v24 = v70.n128_f32[1] == v70.n128_f32[0];
    if (v70.n128_f32[1] == v70.n128_f32[0])
    {
      v8.n128_u32[0] = v70.n128_u32[2];
      v24 = v70.n128_f32[2] == v70.n128_f32[0];
      if (v70.n128_f32[2] == v70.n128_f32[0])
      {
        v8.n128_u32[0] = v70.n128_u32[3];
        v24 = v70.n128_f32[3] == v70.n128_f32[0];
      }
    }
    if (v24)
    {
      v73[0] = &v72;
      v73[1] = &v71;
      v73[2] = &v70;
      if ((_DWORD)v16)
      {
        v25 = *(_DWORD *)(a4 + 92);
        if (v25)
        {
          v26 = *(_DWORD *)(a4 + 96);
          if (v26)
          {
            v74[0] = 0;
            v74[1] = v16 - 1;
            v74[2] = 1;
            v74[3] = v25 - 1;
            v27 = v26 - 1;
            v74[4] = v15;
            v74[5] = v26 - 1;
            v28 = *(unsigned int *)(a4 + 108);
            v74[6] = *(_DWORD *)(a4 + 108);
            v29 = *(_QWORD *)(a4 + 32);
            if (*(_BYTE *)(a4 + 128) && v29)
            {
              (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)*v7 + 88))(*v7, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
              v29 = *(_QWORD *)(a4 + 32);
            }
            v75[0] = 0;
            v75[1] = 0;
            if (v27)
            {
              v30 = 4 * v28;
              do
              {
                sub_223794024((uint64_t)v74, v75, (uint64_t)v73, v29);
                v29 += v30;
                --v27;
              }
              while (v27);
            }
            sub_223794024((uint64_t)v74, v75, (uint64_t)v73, v29);
          }
        }
      }
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  v17 = *(unsigned int *)(a4 + 108);
  v18 = *(_DWORD *)(a4 + 92);
  v19 = (v18 * v15);
  if ((_DWORD)v17 == (_DWORD)v19)
  {
    v8.n128_u32[0] = v70.n128_u32[0];
    v67 = v8;
    v14.n128_u32[0] = v70.n128_u32[1];
    v20 = v70.n128_f32[1] == v70.n128_f32[0];
    if (v70.n128_f32[1] == v70.n128_f32[0])
    {
      v14.n128_u32[0] = v70.n128_u32[2];
      v20 = v70.n128_f32[2] == v70.n128_f32[0];
      if (v70.n128_f32[2] == v70.n128_f32[0])
      {
        v14.n128_u32[0] = v70.n128_u32[3];
        v20 = v70.n128_f32[3] == v70.n128_f32[0];
      }
    }
    if (v20)
    {
      v21 = *(_DWORD *)(a4 + 96);
      v22 = *(int32x4_t **)(a4 + 32);
      if (*(_BYTE *)(a4 + 128) && v22)
      {
        (*(void (**)(_QWORD, uint64_t, const char *, __n128))(*(_QWORD *)*v7 + 88))(*v7, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190", v14);
        v22 = *(int32x4_t **)(a4 + 32);
      }
      v23 = (v21 * v17);
      if (!(_DWORD)v23 || v22)
      {
        if (!(_DWORD)v23)
          goto LABEL_53;
      }
      else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_94;
      }
      v55 = v23 - ((_DWORD)v23 != 0) + 1;
      if (v55 < 8)
      {
        v56 = v22;
        v14 = v67;
LABEL_88:
        v60 = v23 + 1;
        do
        {
          v56->i32[0] = v14.n128_u32[0];
          v56 = (int32x4_t *)((char *)v56 + 4);
          --v60;
        }
        while (v60 > 1);
        goto LABEL_53;
      }
      v56 = (int32x4_t *)((char *)v22 + 4 * (v55 & 0xFFFFFFFFFFFFFFF8));
      v23 -= v55 & 0xFFFFFFFFFFFFFFF8;
      v57 = vdupq_lane_s32((int32x2_t)v67.n128_u64[0], 0);
      v58 = v22 + 1;
      v59 = v55 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v58[-1] = v57;
        *v58 = v57;
        v58 += 2;
        v59 -= 8;
      }
      while (v59);
      v14 = v67;
      if (v55 != (v55 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_88;
      goto LABEL_53;
    }
LABEL_52:
    v14.n128_f32[0] = sub_223793E94(a4, (float *)&v70);
    goto LABEL_53;
  }
  v8.n128_u32[0] = v70.n128_u32[0];
  v68 = v8;
  v14.n128_u32[0] = v70.n128_u32[1];
  v31 = v70.n128_f32[1] == v70.n128_f32[0];
  if (v70.n128_f32[1] == v70.n128_f32[0])
  {
    v14.n128_u32[0] = v70.n128_u32[2];
    v31 = v70.n128_f32[2] == v70.n128_f32[0];
    if (v70.n128_f32[2] == v70.n128_f32[0])
    {
      v14.n128_u32[0] = v70.n128_u32[3];
      v31 = v70.n128_f32[3] == v70.n128_f32[0];
    }
  }
  if (!v31)
    goto LABEL_52;
  if (v15)
  {
    if (v18)
    {
      v32 = *(_DWORD *)(a4 + 96);
      if (v32)
      {
        v33 = *(__n128 **)(a4 + 32);
        if (*(_BYTE *)(a4 + 128) && v33)
        {
          (*(void (**)(_QWORD, uint64_t, const char *, __n128))(*(_QWORD *)*v7 + 88))(*v7, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190", v14);
          v33 = *(__n128 **)(a4 + 32);
        }
        v34 = v32 - 1;
        if (!v34)
        {
LABEL_91:
          if (!(_DWORD)v19 || v33)
          {
            if (!(_DWORD)v19)
              goto LABEL_53;
          }
          else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_94;
          }
          v61 = v19 - ((_DWORD)v19 != 0) + 1;
          if (v61 >= 0x10 && (v33 >= (__n128 *)&v70.n128_u8[4] || &v70 >= (__n128 *)((char *)v33 + 4 * v19)))
          {
            v62 = (__n128 *)((char *)v33 + 4 * (v61 & 0xFFFFFFFFFFFFFFF8));
            v19 -= v61 & 0xFFFFFFFFFFFFFFF8;
            v64 = v33 + 1;
            v65 = v61 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v14 = (__n128)vdupq_lane_s32((int32x2_t)v70.n128_u64[0], 0);
              v64[-1] = v14;
              *v64 = v14;
              v64 += 2;
              v65 -= 8;
            }
            while (v65);
            if (v61 == (v61 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_53;
          }
          else
          {
            v62 = v33;
          }
          v63 = v19 + 1;
          do
          {
            v14.n128_u32[0] = v70.n128_u32[0];
            v62->n128_u32[0] = v70.n128_u32[0];
            v62 = (__n128 *)((char *)v62 + 4);
            --v63;
          }
          while (v63 > 1);
          goto LABEL_53;
        }
        if ((_DWORD)v19)
        {
          v35 = 0;
          v66 = vdupq_lane_s32((int32x2_t)v68.n128_u64[0], 0);
          v36 = 4 * v17;
          while (v33
               || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            v50 = v33;
            v51 = v19;
            v14 = v68;
            if (v19 < 8)
              goto LABEL_78;
            v52 = 0;
            v50 = (__n128 *)((char *)v33 + 4 * (v19 & 0xFFFFFFF8));
            do
            {
              v53 = (int32x4_t *)&v33[v52 / 0x10];
              *v53 = v66;
              v53[1] = v66;
              v52 += 32;
            }
            while (((4 * v19) & 0x3FFFFFFE0) != v52);
            v51 = v19 & 7;
            v14 = v68;
            if ((v19 & 0xFFFFFFF8) != v19)
            {
LABEL_78:
              v54 = v51 + 1;
              do
              {
                v50->n128_u32[0] = v14.n128_u32[0];
                v50 = (__n128 *)((char *)v50 + 4);
                --v54;
              }
              while (v54 > 1);
            }
            v33 = (__n128 *)((char *)v33 + v36);
            if (++v35 == v34)
              goto LABEL_91;
          }
LABEL_94:
          abort();
        }
      }
    }
  }
LABEL_53:
  result = v69;
  v69 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)result + 8))(result, v14, v8);
  v38 = *a2;
  v39 = a2[1];
  if (*a2 != v39)
  {
    v40 = *a1;
    v41 = a1[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 2) != 0x2E8BA2E8BA2E8BA3 * (v41 - *a1))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/SegmentImageProcessing.cpp", 43, (uint64_t)"label_normals.size() == plane_regions.size()", 44, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v40 = *a1;
      v41 = a1[1];
      v38 = *a2;
      v39 = a2[1];
    }
    while (v40 != v41 || v38 != v39)
    {
      v42 = *v40;
      v43 = v40[1];
      if (*v40 != v43)
      {
        *(_QWORD *)&v44 = *(_QWORD *)v38;
        *((_QWORD *)&v44 + 1) = *(unsigned int *)(v38 + 8);
        do
        {
          v45 = (unsigned __int16)v42[2];
          v46 = (unsigned __int16)v42[1];
          if (v46 != (unsigned __int16)(v45 + 1))
          {
            v47 = *(_DWORD *)(a4 + 104);
            v48 = *(_QWORD *)(a4 + 32) + 4 * (*(_DWORD *)(a4 + 124) * *v42);
            do
            {
              result = 4 * (v47 * (__int16)v46);
              *(_OWORD *)(v48 + result) = v44;
            }
            while (v45 != (unsigned __int16)v46++);
          }
          v42 += 4;
        }
        while (v42 != v43);
      }
      v40 += 11;
      v38 += 12;
    }
  }
  return result;
}

void sub_223792D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  sub_223167354(v18);
  _Unwind_Resume(a1);
}

void sub_223792D7C(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t (**v18)();
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;

  v18 = &off_24EC21420;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_WORD *)(a1 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v21 = *(_OWORD *)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 40);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v19 = v5;
    v20 = v6;
    v23 = v9;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v14 = *(_WORD *)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 8);
    v20 = 0;
    v21 = *(_OWORD *)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 40);
    v23 = v14;
  }
  sub_223ECF32C((uint64_t)&v18, a2, a3);
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_223792EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231BEEB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223792EFC(int32x2_t *a1@<X0>, unint64_t a2@<X1>, float32x2_t *a3@<X2>, float32x2_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  int v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int16 v15;
  int v16;
  unsigned int v17;
  int v18;
  float32x2_t v19;
  unint64_t v20;
  float32x2_t v21;
  double v22;
  int32x2_t v25;
  unsigned __int32 v26;
  uint64_t v27;
  int32x2_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  int v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  void *__p[2];
  char *v45;
  int v46;
  void *v47[2];
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  unint64_t v55;

  if (a3[2].f32[0] == a4[2].f32[0]
    && a3[2].f32[1] == a4[2].f32[1]
    && a3[3].f32[0] == a4[3].f32[0]
    && a3[3].f32[1] == a4[3].f32[1]
    && a3[11].i32[0] == a4[11].i32[0]
    && a3[11].i32[1] == a4[11].i32[1])
  {
    sub_223792D7C((uint64_t)a1, a2, a5);
  }
  else
  {
    v10 = a4[11].i32[0];
    v9 = a4[11].u32[1];
    v54 = 0uLL;
    v55 = 0;
    sub_2232EA6AC((uint64_t)&v54, a2);
    if (a2)
    {
      v12 = a2;
      do
      {
        __p[0] = 0;
        __p[1] = 0;
        v45 = 0;
        if ((_DWORD)v9)
        {
          __p[0] = operator new(8 * v9);
          __p[1] = __p[0];
          v45 = (char *)__p[0] + 8 * v9;
        }
        v13 = *((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1) < v55)
        {
          **((_QWORD **)&v54 + 1) = 0;
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v13 + 16) = 0;
          *(_OWORD *)v13 = *(_OWORD *)__p;
          *(_QWORD *)(v13 + 16) = v45;
          *((_QWORD *)&v54 + 1) = v13 + 24;
        }
        else
        {
          *((_QWORD *)&v54 + 1) = sub_223793D38((char **)&v54, (uint64_t)__p);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        --v12;
      }
      while (v12);
    }
    v14 = v54;
    if ((int)v9 >= 1)
    {
      if (v10 < 1)
      {
        if (a2 >= 0x100)
        {
          v29 = 0;
          v30 = v54 + 24 * a2;
          do
          {
            LODWORD(__p[0]) = (unsigned __int16)v29;
            WORD2(__p[0]) = v10 - 1;
            sub_223ECBBF0(v30, (__int16 *)__p);
            ++v29;
          }
          while ((_DWORD)v9 != v29);
        }
      }
      else
      {
        v15 = 0;
        v16 = 0;
        v17 = a2;
        v40 = v9;
        do
        {
          v18 = 0;
          *(float *)&v11 = (float)v16;
          v41 = v11;
          do
          {
            v19.f32[0] = (float)v18;
            v19.i32[1] = v11;
            v20 = (unint64_t)a3[2];
            v21 = vadd_f32(a3[3], vmul_f32(vadd_f32(vmul_f32(a4[4], v19), a4[5]), (float32x2_t)v20));
            LODWORD(v20) = a3[11].i32[0];
            v22 = (double)v20 + -0.5;
            *(float *)&v22 = v22;
            if (v21.f32[0] >= -0.5 && v21.f32[0] < *(float *)&v22)
            {
              LODWORD(v22) = a3[11].i32[1];
              *(float *)&v22 = (double)*(unint64_t *)&v22 + -0.5;
              if (v21.f32[1] >= -0.5 && v21.f32[1] < *(float *)&v22)
              {
                v25 = vmul_s32(a1[5], (int32x2_t)vcvt_u32_f32(vrndm_f32(vadd_f32(v21, (float32x2_t)0x3F0000003F000000))));
                v26 = vadd_s32(vdup_lane_s32(v25, 1), v25).u32[0];
                v27 = v26;
                v28 = a1[3];
                if (*(unsigned __int8 *)(*(_QWORD *)&v28 + v26) != v17)
                {
                  if (v17 >= a2)
                  {
                    v15 = v18;
                    v17 = *(unsigned __int8 *)(*(_QWORD *)&v28 + v26);
                  }
                  else
                  {
                    LOWORD(__p[0]) = v16;
                    WORD1(__p[0]) = v15;
                    WORD2(__p[0]) = v18 - 1;
                    sub_223ECBBF0(v14 + 24 * v17, (__int16 *)__p);
                    v17 = *(unsigned __int8 *)(*(_QWORD *)&v28 + v27);
                    v15 = v18;
                    v11 = v41;
                  }
                }
              }
            }
            ++v18;
          }
          while (v10 != v18);
          if (v17 < a2)
          {
            LOWORD(__p[0]) = v16;
            WORD1(__p[0]) = v15;
            WORD2(__p[0]) = v10 - 1;
            sub_223ECBBF0(v14 + 24 * v17, (__int16 *)__p);
            v17 = a2;
          }
          ++v16;
        }
        while (v16 != v40);
      }
    }
    v31 = *((_QWORD *)&v14 + 1);
    v42 = 0uLL;
    v43 = 0;
    sub_223720F0C((uint64_t)&v42, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v14 + 1) - v14) >> 3));
    if ((_QWORD)v14 != *((_QWORD *)&v14 + 1))
    {
      v32 = (__int128 *)v14;
      do
      {
        v33 = *v32;
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        v54 = v33;
        v34 = *((_QWORD *)v32 + 2);
        *((_QWORD *)v32 + 2) = 0;
        v55 = v34;
        sub_223ECB71C((__int16 **)__p, (uint64_t)&v54);
        if ((_QWORD)v54)
        {
          *((_QWORD *)&v54 + 1) = v54;
          operator delete((void *)v54);
        }
        v35 = *((_QWORD *)&v42 + 1);
        if (*((_QWORD *)&v42 + 1) >= v43)
        {
          *((_QWORD *)&v42 + 1) = sub_223721094((void **)&v42, (uint64_t)__p);
          if (v47[0])
          {
            v47[1] = v47[0];
            operator delete(v47[0]);
          }
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8) = 0;
          *(_QWORD *)(v35 + 16) = 0;
          *(_QWORD *)v35 = 0;
          *(_OWORD *)v35 = *(_OWORD *)__p;
          *(_QWORD *)(v35 + 16) = v45;
          __p[0] = 0;
          __p[1] = 0;
          v45 = 0;
          *(_DWORD *)(v35 + 24) = v46;
          *(_QWORD *)(v35 + 40) = 0;
          *(_QWORD *)(v35 + 48) = 0;
          *(_QWORD *)(v35 + 32) = 0;
          *(_OWORD *)(v35 + 32) = *(_OWORD *)v47;
          *(_QWORD *)(v35 + 48) = v48;
          v47[0] = 0;
          v47[1] = 0;
          v48 = 0;
          *(_QWORD *)(v35 + 56) = v49;
          *(_DWORD *)(v35 + 64) = v50;
          *(_DWORD *)(v35 + 68) = v51;
          *(_BYTE *)(v35 + 72) = 0;
          *(_BYTE *)(v35 + 80) = 0;
          if (v53)
          {
            *(_QWORD *)(v35 + 72) = v52;
            *(_BYTE *)(v35 + 80) = 1;
          }
          *((_QWORD *)&v42 + 1) = v35 + 88;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v32 = (__int128 *)((char *)v32 + 24);
      }
      while (v32 != *((__int128 **)&v14 + 1));
    }
    *(_OWORD *)a5 = v42;
    a5[2] = v43;
    if ((_QWORD)v14)
    {
      if ((_QWORD)v14 != *((_QWORD *)&v14 + 1))
      {
        v36 = *((_QWORD *)&v14 + 1);
        do
        {
          v38 = *(void **)(v36 - 24);
          v36 -= 24;
          v37 = v38;
          if (v38)
          {
            *(_QWORD *)(v31 - 16) = v37;
            operator delete(v37);
          }
          v31 = v36;
        }
        while (v36 != (_QWORD)v14);
      }
      operator delete((void *)v14);
    }
  }
}

void sub_223793410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, void *);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_2237073E0((void **)va1);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

void sub_22379342C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;

  sub_22317C838((void **)(v32 - 160));
  _Unwind_Resume(a1);
}

void sub_2237934B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 160);
  if (v1)
  {
    *(_QWORD *)(v0 - 152) = v1;
    JUMPOUT(0x2237934C4);
  }
  JUMPOUT(0x2237934C8);
}

void sub_2237934E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2237934F4(uint64_t *a1, uint64_t a2, float32x2_t *a3, uint64_t a4, uint64_t a5, float32x2_t *a6, int8x16_t a7, int32x4_t a8, float32x4_t a9, int32x4_t a10, float32x4_t a11, float32x2_t a12, float32x4_t a13, double a14)
{
  unint64_t v14;
  unint64_t v16;
  float v17;
  float32x2_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float64x2_t v32;
  uint32x2_t v33;
  int v34;
  int v35;
  unint64_t v36;
  float v37;
  float32x2_t v38;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  int8x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  double v67;
  int8x16_t v68;
  int8x16_t v69;
  float64x2_t v70;
  double v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  unint64_t v76;
  int8x16_t v77;
  float64x2_t v78;
  float64x2_t v79;
  int8x16_t v80;
  float64x2_t v81;
  unint64_t v82;
  float64x2_t v83;
  float64x2_t v84;
  int8x16_t v85;
  unint64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  double v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int8x16_t v94;
  int8x16_t v95;
  unsigned int v96;
  unsigned int v97;
  BOOL v98;
  double v100;
  double v101;
  double v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  double v106;
  double v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  double v112;
  int v113;
  char v114;
  unsigned int v115;
  unsigned int v116;
  float64x2_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int8x16_t v122;
  unint64_t v123;
  uint64_t v124;
  float64x2_t v125;
  float64x2_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  signed int v131;
  uint64_t v132;
  __int16 *v133;
  uint64_t v134;
  uint64_t v135;
  float32x2_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  int32x4_t v141;
  uint64_t v142;
  unsigned __int32 v143;
  int v144;
  uint64_t v145;
  __int32 v146;
  float32x2_t v147;
  unsigned __int32 v148;

  v14 = a1[7];
  if (!v14)
    return 0;
  v16 = *(_QWORD *)(a2 + 56);
  if (!v16)
    return 0;
  v17 = *(float *)a7.i32;
  if (v14 > v16)
  {
    a11.i32[0] = a6[1].i32[0];
    *(float32x2_t *)a8.i8 = *a6;
    a8.i32[2] = a11.i32[0];
    a12.i32[0] = a6[3].i32[0];
    *(float32x2_t *)a10.i8 = a6[2];
    a10.i32[2] = a12.i32[0];
    v20 = a6[4];
    a7.i32[0] = a6[5].i32[0];
    LODWORD(a14) = *(_DWORD *)(a5 + 8);
    *(float32x2_t *)v21.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a6, COERCE_FLOAT(*(_QWORD *)a5)), *(float32x2_t *)a10.i8, *(float32x2_t *)a5, 1), v20, *(float *)&a14);
    v22 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a11.f32, *(float32x2_t *)a5), a12, *(float32x2_t *)a5, 1), *(float32x2_t *)&a14, *(float32x2_t *)a7.i8);
    *(float32x2_t *)&v21.u32[2] = v22;
    *(float32x2_t *)a13.f32 = a6[6];
    a13.i32[2] = a6[7].i32[0];
    v23 = vaddq_f32(v21, a13);
    v21.i64[0] = *(_QWORD *)(a5 + 12);
    v22.i32[0] = *(_DWORD *)(a5 + 20);
    v24 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a6, v21.f32[0]), *(float32x2_t *)a10.i8, *(float32x2_t *)v21.f32, 1), v20, v22.f32[0]);
    v146 = v23.i32[2];
    v145 = v23.i64[0];
    v148 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a11.f32, *(float32x2_t *)v21.f32), a12, *(float32x2_t *)v21.f32, 1), v22, *(float32x2_t *)a7.i8).u32[0];
    v25.i64[0] = vzip1q_s32(a8, a10).u64[0];
    v26 = (int8x16_t)vnegq_f32(a13);
    v25.i64[1] = v20.u32[0];
    v27 = (int8x16_t)vtrn2q_s32(a8, a10);
    v27.i32[2] = v20.i32[1];
    v28 = vzip2q_s32(a8, a10);
    *(float32x2_t *)v23.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v25.f32, *(float *)v26.i32), *(float32x2_t *)v27.i8, *(float32x2_t *)a13.f32, 1), *(float32x2_t *)v28.i8, a13, 2);
    v28.i32[2] = a7.i32[0];
    v147 = v24;
    v29 = vmls_lane_f32(vmul_f32(v20, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1), *(float32x2_t *)a13.f32, 1);
    v30.i32[3] = 0;
    v30.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v27, 0).i32[3];
    *(uint64_t *)((char *)v30.i64 + 4) = vextq_s8(v27, a7, 4uLL).u64[0];
    v28.i64[1] = vdupq_laneq_s32(v28, 2).u32[0];
    v139 = v25;
    v140 = v30;
    v141 = v28;
    v142 = v23.i64[0];
    v143 = vmla_f32(v29, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), *(float32x2_t *)a7.i8).u32[0];
    v144 = 1065353216;
    return sub_2237934F4(a2, a1, a4, a3, &v145, &v139, v17);
  }
  sub_2237656E8(a3, a4, a5, a6, (uint64_t)&v139, a7, a9, a11, a13, *(float32x2_t *)&a14);
  if (!v141.i8[4])
    return 0;
  v33 = *(uint32x2_t *)(a4 + 88);
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
  {
    v36 = 0;
    v37 = 4295000000.0;
LABEL_16:
    v38.i32[0] = 1333788672;
    goto LABEL_17;
  }
  v34 = *(__int16 *)(a2 + 64);
  if (v34 < 0 || (v35 = *(__int16 *)(a2 + 66), v35 < 0))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_116;
    }
    LOWORD(v34) = *(_WORD *)(a2 + 64);
    LOWORD(v35) = *(_WORD *)(a2 + 66);
  }
  v36 = 0;
  v37 = 4295000000.0;
  if (*(_WORD *)(a2 + 68) - (_WORD)v34 == 0xFFFF)
    goto LABEL_16;
  v38.i32[0] = 1333788672;
  if (*(_WORD *)(a2 + 70) - (_WORD)v35 != 0xFFFF)
  {
    v36 = ((__int16)v34 + (__int16)(*(_WORD *)(a2 + 68) - v34)) | ((unint64_t)((__int16)v35 + (__int16)(*(_WORD *)(a2 + 70) - v35)) << 32);
    v38.f32[0] = (float)(__int16)v34;
    v37 = (float)(__int16)v35;
  }
LABEL_17:
  __asm { FMOV            V3.2S, #-1.0 }
  v43.f32[0] = (float)v36;
  v38.f32[1] = v37;
  v43.f32[1] = (float)HIDWORD(v36);
  v44 = vadd_f32(vadd_f32(vcvt_f32_u32(v33), _D3), (float32x2_t)vdup_n_s32(0x3EFFF2E5u));
  v45 = vadd_f32(v38, (float32x2_t)0xBF000000BF000000);
  v46 = vadd_f32(v43, (float32x2_t)0x3F0000003F000000);
  v47 = (float32x2_t)vdup_n_s32(0xBEFFF2E5);
  v48 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v47, v45), (int8x8_t)v47, (int8x8_t)v45);
  v49 = (float32x2_t)vcgt_f32(v46, v44);
  v50 = (float32x2_t)vbsl_s8((int8x8_t)v49, (int8x8_t)v44, (int8x8_t)v46);
  v51 = vmvn_s8((int8x8_t)vcge_f32(v50, v48));
  if (((v51.i32[0] | v51.i32[1]) & 1) != 0)
    sub_22324A974();
  v49.i32[0] = v141.i32[0];
  v53 = v139;
  v52 = v140;
  if (a1[1] == *a1)
  {
    v56 = 0;
    v57 = -1;
    v58 = -1;
    goto LABEL_29;
  }
  v54 = *((__int16 *)a1 + 32);
  if (v54 < 0 || (v55 = *((__int16 *)a1 + 33), v55 < 0))
  {
    v136 = v49;
    v137 = v140;
    v138 = v139;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
    {
      LOWORD(v54) = *((_WORD *)a1 + 32);
      LOWORD(v55) = *((_WORD *)a1 + 33);
      v52 = v137;
      v53 = v138;
      v49 = v136;
      goto LABEL_23;
    }
LABEL_116:
    abort();
  }
LABEL_23:
  v56 = 0;
  v57 = -1;
  if (*((_WORD *)a1 + 34) - (_WORD)v54 == 0xFFFF)
  {
    v58 = -1;
    v59 = vcvtps_u32_f32((float)v14 * v17);
    v61 = *a1;
    v135 = a1[1];
    v62 = v135 - *a1;
    if (v135 != *a1)
      goto LABEL_30;
    goto LABEL_26;
  }
  v58 = -1;
  if (*((_WORD *)a1 + 35) - (_WORD)v55 != 0xFFFF)
  {
    v57 = (__int16)v55;
    v58 = (__int16)v54;
    v56 = (__int16)v54 + (__int16)(*((_WORD *)a1 + 34) - v54);
    v59 = vcvtps_u32_f32((float)v14 * v17);
    v61 = *a1;
    v60 = a1[1];
    v62 = v60 - *a1;
    if (v60 == *a1)
      goto LABEL_26;
LABEL_30:
    v63 = 0;
    v65 = 0;
    LODWORD(v66) = 0;
    v67 = vcvtq_f64_f32(v49).f64[0];
    v77 = (int8x16_t)vcvt_hight_f64_f32(v52);
    v68 = (int8x16_t)vcvt_hight_f64_f32(v53);
    v69 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v52.f32);
    *(_QWORD *)&v79.f64[0] = vextq_s8(v68, v68, 8uLL).u64[0];
    v95 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v53.f32);
    v70 = (float64x2_t)vextq_s8(v69, v69, 8uLL);
    v94 = vextq_s8(v68, v69, 8uLL);
    v71 = (double)v58;
    v72 = vcvtq_f64_f32(vneg_f32(v48));
    v73 = vcvtq_f64_f32(v50);
    v74 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, *(double *)&v68.i64[1]), (float64x2_t)xmmword_224649980, *(double *)v69.i64), v72, v70.f64[0]);
    v75 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, *(double *)&v68.i64[1]), (float64x2_t)xmmword_2246499A0, *(double *)v69.i64), v73, v70.f64[0]);
    v76 = v62 >> 3;
    v77.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
    *(_QWORD *)&v78.f64[0] = v95.i64[0];
    *(_QWORD *)&v78.f64[1] = vextq_s8(v95, v95, 8uLL).u64[0];
    *(_QWORD *)&v79.f64[1] = v69.i64[0];
    v81 = vmlaq_n_f64(vmulq_n_f64(v78, (double)v58), v79, (double)v57);
    v80 = (int8x16_t)vaddq_f64((float64x2_t)v77, v81);
    v81.f64[0] = v67 + *(double *)v68.i64 * (double)v58 + v70.f64[0] * (double)v57;
    v82 = vextq_s8(v80, v80, 8uLL).u64[0];
    v83 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, *(double *)v80.i64), (float64x2_t)xmmword_224649980, (float64x2_t)v80, 1), v72, v81.f64[0]);
    v84 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, *(double *)v80.i64), (float64x2_t)xmmword_2246499A0, (float64x2_t)v80, 1), v73, v81.f64[0]);
    v85 = (int8x16_t)vaddq_f64((float64x2_t)v77, vmlaq_n_f64(vmulq_n_f64(v78, (double)v56), v79, (double)v57));
    v32.f64[0] = v67 + *(double *)v68.i64 * (double)v56 + v70.f64[0] * (double)v57;
    v86 = vextq_s8(v85, v85, 8uLL).u64[0];
    v87 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, *(double *)v85.i64), (float64x2_t)xmmword_224649980, (float64x2_t)v85, 1), v72, v32.f64[0]);
    v88 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, *(double *)v85.i64), (float64x2_t)xmmword_2246499A0, (float64x2_t)v85, 1), v73, v32.f64[0]);
    v89 = (double)(v56 - v58);
    v90 = *(__int16 *)(a2 + 24);
    v91 = *(_QWORD *)(a2 + 32);
    v92 = (*(_QWORD *)(a2 + 40) - v91) >> 4;
    v93 = *(_QWORD *)a2 + 4;
    v94.i64[1] = vextq_s8(v94, v94, 8uLL).u64[0];
    v95.i64[1] = *(_QWORD *)&v78.f64[1];
    while (1)
    {
      v96 = *(__int16 *)(v61 + 8 * v65);
      v97 = v96 - v57;
      if (v96 > v57)
      {
        do
        {
          v80.i64[1] = v82;
          v80 = (int8x16_t)vaddq_f64((float64x2_t)v94, (float64x2_t)v80);
          v82 = vextq_s8(v80, v80, 8uLL).u64[0];
          v81 = vaddq_f64(v70, v81);
          v85.i64[1] = v86;
          v85 = (int8x16_t)vaddq_f64((float64x2_t)v94, (float64x2_t)v85);
          v86 = vextq_s8(v85, v85, 8uLL).u64[0];
          v32 = vaddq_f64(v70, v32);
          v83 = vaddq_f64(v74, v83);
          v84 = vaddq_f64(v75, v84);
          v87 = vaddq_f64(v74, v87);
          v88 = vaddq_f64(v75, v88);
          --v97;
        }
        while (v97);
        v57 = v96;
      }
      if (v83.f64[0] < 0.0 && v87.f64[0] < 0.0)
        goto LABEL_86;
      v98 = v84.f64[0] < 0.0;
      if (v88.f64[0] >= 0.0)
        v98 = 0;
      _NF = v87.f64[1] < 0.0 && v83.f64[1] < 0.0;
      if (_NF || v98 || v84.f64[1] < 0.0 && v88.f64[1] < 0.0)
        goto LABEL_86;
      v100 = 0.0;
      v101 = 1.0;
      if (v81.f64[0] * v32.f64[0] < 0.0)
      {
        v102 = v81.f64[0] / (v81.f64[0] - v32.f64[0]);
        if (v81.f64[0] >= 0.0)
          v101 = fmin(v102, 1.0);
        else
          v100 = fmax(v102, 0.0);
      }
      v103 = vsubq_f64(v83, v87);
      v104 = vdivq_f64(v83, v103);
      v105 = vnegq_f64(v103);
      if (v104.f64[0] >= v101)
        v106 = v101;
      else
        v106 = v104.f64[0];
      if (v105.f64[0] >= 0.0)
        v106 = v101;
      v107 = v100 >= v104.f64[0] ? v100 : v104.f64[0];
      if (v105.f64[0] > 0.0)
        v100 = v107;
      else
        v101 = v106;
      if (v105.f64[1] <= 0.0)
      {
        if (v105.f64[1] < 0.0 && v104.f64[1] < v101)
          v101 = v104.f64[1];
      }
      else if (v100 < v104.f64[1])
      {
        v100 = v104.f64[1];
      }
      v108 = vsubq_f64(v84, v88);
      v109 = vdivq_f64(v84, v108);
      v110 = vnegq_f64(v108);
      if (v100 >= v109.f64[0])
        v111 = v100;
      else
        v111 = v109.f64[0];
      if (v109.f64[0] >= v101)
        v112 = v101;
      else
        v112 = v109.f64[0];
      if (v110.f64[0] >= 0.0)
        v112 = v101;
      if (v110.f64[0] > 0.0)
        v100 = v111;
      else
        v101 = v112;
      if (v110.f64[1] <= 0.0)
      {
        if (v110.f64[1] < 0.0 && v109.f64[1] < v101)
          v101 = v109.f64[1];
      }
      else if (v100 < v109.f64[1])
      {
        v100 = v109.f64[1];
      }
      if (v100 > v101)
      {
LABEL_86:
        v113 = v66;
      }
      else
      {
        v114 = 0;
        v115 = vcvtpd_u64_f64(v100 * v89 + v71);
        v116 = vcvtmd_u64_f64(v101 * v89 + v71);
        v117 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v96), 0);
        do
        {
          v113 = v66;
          v118 = v61 + 8 * v66;
          v119 = *(__int16 *)(v118 + 4);
          if (v115 <= *(__int16 *)(v118 + 2))
            v120 = *(__int16 *)(v118 + 2);
          else
            v120 = v115;
          if (v119 >= v116)
            v121 = v116;
          else
            v121 = v119;
          if (v120 <= v121)
          {
            v122 = (int8x16_t)vaddq_f64((float64x2_t)v77, vmlaq_f64(vmulq_n_f64(v78, (double)v120), v117, v79));
            v110.f64[0] = v67 + *(double *)v68.i64 * (double)v120 + v70.f64[0] * (double)v96;
            v123 = vextq_s8(v122, v122, 8uLL).u64[0];
            v124 = *(uint64_t *)&v110.f64[0];
            do
            {
              *(_QWORD *)&v125.f64[0] = v122.i64[0];
              *(_QWORD *)&v125.f64[1] = v123;
              v126 = vdivq_f64(v125, (float64x2_t)vdupq_lane_s64(v124, 0));
              v127 = llround(v126.f64[1]) - v90;
              if ((v127 & 0x80000000) == 0 && v92 > v127)
              {
                v128 = (uint64_t *)(v91 + 16 * v127);
                v129 = *v128;
                v130 = v128[1];
                if (*v128 != v130)
                {
                  v131 = llround(v126.f64[0]);
                  v132 = 8 * v129;
                  v133 = (__int16 *)(v93 + 8 * v129);
                  v134 = 8 * v130 - v132;
                  while (*(v133 - 1) <= v131)
                  {
                    if (*v133 >= v131)
                    {
                      ++v63;
                      break;
                    }
                    v133 += 4;
                    v134 -= 8;
                    if (!v134)
                      break;
                  }
                }
              }
              v122.i64[1] = v123;
              ++v120;
              v122 = (int8x16_t)vaddq_f64((float64x2_t)v95, (float64x2_t)v122);
              v123 = vextq_s8(v122, v122, 8uLL).u64[0];
              v110 = vaddq_f64((float64x2_t)v68, v110);
              v124 = *(uint64_t *)&v110.f64[0];
            }
            while (v120 <= v121);
          }
          v114 |= v63 >= v59;
          v66 = (v113 + 1);
        }
        while (v76 > v66 && *(unsigned __int16 *)(v61 + 8 * v66) == (unsigned __int16)v96);
        if ((v114 & 1) != 0)
          return v63 >= v59;
      }
      v65 = (v113 + 1);
      LODWORD(v66) = v113 + 1;
      if (v76 <= v65)
        return v63 >= v59;
    }
  }
LABEL_29:
  v59 = vcvtps_u32_f32((float)v14 * v17);
  v61 = *a1;
  v64 = a1[1];
  v62 = v64 - *a1;
  if (v64 != *a1)
    goto LABEL_30;
LABEL_26:
  v63 = 0;
  return v63 >= v59;
}

char *sub_223793D38(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = v8 + 24;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = v8;
      *((_QWORD *)v8 - 2) = 0;
      *((_QWORD *)v8 - 1) = 0;
      v14 = *(_OWORD *)(v12 - 24);
      v12 -= 24;
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 24;
      *((_QWORD *)v13 - 1) = *((_QWORD *)v12 + 2);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
    while (v12 != v11);
    v12 = *a1;
    v15 = a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v15 != v12)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v12);
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

float sub_223793E94(uint64_t a1, float *a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  BOOL v12;
  int v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  float result;

  v2 = *(_DWORD *)(a1 + 92);
  v3 = *(_DWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 88))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a1 + 104);
    v10 = *(unsigned int *)(a1 + 108);
    v11 = *(float **)(a1 + 32);
    if (*(_BYTE *)(a1 + 128))
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v11 = *(float **)(a1 + 32);
    }
    v13 = v2 - 1;
    if (v8)
    {
      if (v2 == 1)
      {
        do
        {
          *v11 = *a2;
          v11[1] = a2[1];
          v11[2] = a2[2];
          v11[3] = a2[3];
          v11 += v10;
          --v8;
        }
        while (v8);
LABEL_23:
        *v11 = *a2;
        v11[1] = a2[1];
        v11[2] = a2[2];
        result = a2[3];
        v11[3] = result;
        return result;
      }
      v14 = 0;
      v15 = v11 + 2;
      do
      {
        v16 = v15;
        v17 = v2 - 1;
        do
        {
          *(v16 - 2) = *(_DWORD *)a2;
          *(v16 - 1) = *((_DWORD *)a2 + 1);
          *v16 = *((_DWORD *)a2 + 2);
          v16[1] = *((_DWORD *)a2 + 3);
          v16 += v9;
          --v17;
        }
        while (v17);
        *(v16 - 2) = *(_DWORD *)a2;
        *(v16 - 1) = *((_DWORD *)a2 + 1);
        *v16 = *((_DWORD *)a2 + 2);
        v16[1] = *((_DWORD *)a2 + 3);
        v11 += v10;
        ++v14;
        v15 += v10;
      }
      while (v14 != v8);
    }
    if (v2 != 1)
    {
      do
      {
        *v11 = *a2;
        v11[1] = a2[1];
        v11[2] = a2[2];
        v11[3] = a2[3];
        v11 += v9;
        --v13;
      }
      while (v13);
    }
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_223794024(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unsigned int i;
  const float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  const float *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  unint64_t v30;

  v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    v7 = result;
    for (i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      v9 = *(const float **)(a3 + 16);
      v10 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v10 >= 1)
      {
        v11 = v10 & 0x3FFFFFFFFFFFFFFFLL;
        v12 = (v10 & 0x3FFFFFFFFFFFFFFFLL) - ((v10 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v12 >= 0x10)
        {
          v14 = -4;
          if (!v11)
            v14 = 0;
          if (v4 >= (unint64_t)(v9 + 1)
            || (v15 = v4 + v14 + 4 * v10 + 4, v13 = (_DWORD *)v4, (unint64_t)v9 >= v15))
          {
            v13 = (_DWORD *)(v4 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
            v11 -= v12 & 0xFFFFFFFFFFFFFFF8;
            v16 = vld1q_dup_f32(v9);
            v17 = (float32x4_t *)(v4 + 16);
            v18 = v12 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v17[-1] = v16;
              *v17 = v16;
              v17 += 2;
              v18 -= 8;
            }
            while (v18);
            if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (_DWORD *)v4;
        }
        v19 = v11 + 1;
        do
        {
          *v13++ = *(_DWORD *)v9;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const float **)(a3 + 16);
  v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v22 >= 1)
  {
    v23 = v22 & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (v22 & 0x3FFFFFFFFFFFFFFFLL) - ((v22 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v24 < 0x10)
      goto LABEL_29;
    v25 = 4 * v22;
    if (!v23)
      v25 = 4;
    if (v4 < (unint64_t)(v21 + 1) && (unint64_t)v21 < v4 + v25)
    {
LABEL_29:
      v26 = (_DWORD *)v4;
LABEL_30:
      v27 = v23 + 1;
      do
      {
        *v26++ = *(_DWORD *)v21;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    v26 = (_DWORD *)(v4 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
    v28 = vld1q_dup_f32(v21);
    v29 = (float32x4_t *)(v4 + 16);
    v30 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v29[-1] = v28;
      *v29 = v28;
      v29 += 2;
      v30 -= 8;
    }
    while (v30);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_223794270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  _QWORD v50[3];

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    goto LABEL_17;
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v5)
    goto LABEL_63;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v4 = *(_QWORD *)(a2 + 8);
  v9 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v9)
    goto LABEL_63;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_63:
    if (*(_BYTE *)(a2 + 49))
      goto LABEL_14;
LABEL_17:
    v44 = 0;
    v13 = *(_QWORD *)(a1 + 8);
    if (!v13)
      goto LABEL_33;
LABEL_18:
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v14)
      goto LABEL_29;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v18 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v18)
      goto LABEL_29;
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a1 + 73))
        goto LABEL_33;
    }
    else
    {
LABEL_29:
      if (!*(_BYTE *)(a1 + 73))
        goto LABEL_33;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v43, v13, 0);
    v22 = *(_DWORD *)(a2 + 32);
    if (!v22)
      goto LABEL_57;
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v44, v4, 1);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
    goto LABEL_18;
LABEL_33:
  v43 = 0;
  v22 = *(_DWORD *)(a2 + 32);
  if (!v22)
    goto LABEL_57;
LABEL_34:
  v23 = *(_DWORD *)(a2 + 36);
  if (v23)
  {
    v24 = *(unsigned int *)(a1 + 48);
    v45 = (unint64_t)*(unsigned int *)(a1 + 44) << 32;
    v46 = v22 - 1;
    v25 = *(unsigned int *)(a2 + 44);
    v47 = *(unsigned int *)(a2 + 40) | (unint64_t)(v24 << 32);
    v48 = v23 - 1;
    v49 = v25 | ((unint64_t)*(unsigned int *)(a1 + 52) << 32);
    v26 = *(_BYTE **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v26)
    {
      v27 = *(_QWORD *)(a2 + 8);
      v28 = *(std::__shared_weak_count **)(a2 + 16);
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v27 + 88))(v27, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v26 = *(_BYTE **)(a2 + 24);
    }
    v32 = *(uint64_t **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v32)
    {
      v33 = *(_QWORD *)(a1 + 8);
      v34 = *(std::__shared_weak_count **)(a1 + 16);
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v33 + 88))(v33, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v32 = *(uint64_t **)(a1 + 24);
    }
    memset(v50, 0, sizeof(v50));
    v38 = v48;
    if (v48)
    {
      v39 = v49;
      v40 = 2 * HIDWORD(v49);
      do
      {
        sub_223796DEC((_BOOL8)&v45, v50, v26, v32);
        v26 += v39;
        v32 = (uint64_t *)((char *)v32 + v40);
        --v38;
      }
      while (v38);
    }
    sub_223796DEC((_BOOL8)&v45, v50, v26, v32);
  }
LABEL_57:
  v41 = v43;
  v43 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  result = v44;
  v44 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2237945FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_223794664(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, float *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v11;
  int v12;
  float32x2_t v13;
  int v16;
  float v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  const char *v52;
  unsigned __int8 v53;
  __int16 v54;
  uint64_t v55;
  unint64_t v56;
  float v57;
  float v58;
  double v59;
  unint64_t v60;
  float v61;
  double v62;
  BOOL v63;
  char v64;
  int v65;
  int v66;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  float v83;
  float v84;
  uint64_t v85;
  int v86;
  float32_t v87;
  char v88;
  int8x16_t v95;
  __int16 *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  char v104;
  unsigned int v107;
  uint64_t v108;
  char v109;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unsigned __int8 v119;
  const char *v120;
  size_t v121;
  void *v122;
  unint64_t v123;
  const char *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *p_p;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  size_t v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count *v137;
  unint64_t *p_shared_owners;
  unint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v171;
  unint64_t v174;
  __int128 v175;
  __int128 v176;
  const char *v177;
  int v178;
  const char *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  void *object;
  void *v184[2];
  __int128 v185;
  void *__p;
  size_t v187;
  unint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;

  if (!*(_BYTE *)(a3 + 56))
  {
    v44 = atomic_load((unsigned __int8 *)&qword_2540CC500);
    if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC500))
    {
      sub_22455F53C(&v175);
      sub_223174DE4(&object, "cv3dapi.recon3d.kfplanes");
      sub_2232300E0((uint64_t **)&v175, (uint64_t)&object, &qword_2540CC4F8);
      if (SHIBYTE(v184[1]) < 0)
        operator delete(object);
      __cxa_guard_release(&qword_2540CC500);
    }
    v182 = qword_2540CC4F8;
    if (**(int **)(qword_2540CC4F8 + 56) > 4)
      goto LABEL_198;
    v45 = *(unsigned __int8 *)(qword_2540CC4F8 + 72);
    v46 = sub_22322F254(qword_2540CC4F8, "OSLogSurrogateAppender", 1, 0);
    v47 = v46;
    if (!v45 && v46 == 0)
      goto LABEL_198;
    *(_QWORD *)&v175 = &v182;
    *((std::chrono::steady_clock::time_point *)&v175 + 1) = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v176 = std::chrono::system_clock::now();
    DWORD2(v176) = 4;
    v177 = "unknown file";
    v178 = 119;
    v180 = 0;
    v181 = 0;
    v179 = "unknown function";
    v49 = *(_QWORD *)v175;
    v50 = *(_QWORD *)v175 + 16;
    if (*(char *)(*(_QWORD *)v175 + 39) < 0)
    {
      v52 = *(const char **)(v49 + 16);
      v51 = *(_QWORD *)(v49 + 24);
      v119 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v119 & 1) != 0)
        goto LABEL_114;
    }
    else
    {
      v51 = *(unsigned __int8 *)(*(_QWORD *)v175 + 39);
      v52 = (const char *)(*(_QWORD *)v175 + 16);
      v53 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v53 & 1) != 0)
        goto LABEL_114;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v185 && SHIBYTE(v184[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_114:
    if (byte_255788F57 >= 0)
      v120 = (const char *)&xmmword_255788F40;
    else
      v120 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v121 = byte_255788F57;
    else
      v121 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v120, v52);
    v122 = v184;
    if (v121 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v121 >= 0x17)
    {
      v123 = v47;
      v124 = v52;
      v125 = v49;
      v126 = v45;
      v127 = v50;
      v128 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v121 | 7) != 0x17)
        v128 = v121 | 7;
      v129 = v128 + 1;
      v122 = operator new(v128 + 1);
      v184[1] = (void *)v121;
      *(_QWORD *)&v185 = v129 | 0x8000000000000000;
      v184[0] = v122;
      v50 = v127;
      v45 = v126;
      v49 = v125;
      v52 = v124;
      v47 = v123;
    }
    else
    {
      BYTE7(v185) = v121;
      if (!v121)
      {
LABEL_128:
        *((_BYTE *)v122 + v121) = 0;
        BYTE8(v185) = 1;
        p_p = &__p;
        if (v51 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v51 >= 0x17)
        {
          v131 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v51 | 7) != 0x17)
            v131 = v51 | 7;
          v132 = v131 + 1;
          p_p = operator new(v131 + 1);
          v187 = v51;
          v188 = v132 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v188) = v51;
          if (!v51)
            goto LABEL_136;
        }
        memmove(p_p, v52, v51);
LABEL_136:
        *((_BYTE *)p_p + v51) = 0;
        v189 = 1;
        v133 = object;
        if (SHIBYTE(v188) < 0)
          operator delete(__p);
        if (BYTE8(v185) && SBYTE7(v185) < 0)
          operator delete(v184[0]);
        if (object)
          os_release(object);
        if (v47 && *(_QWORD *)(v47 + 24))
        {
          v134 = _os_log_pack_size();
          v135 = (std::__shared_weak_count_vtbl *)operator new(v134, (std::align_val_t)8uLL);
          v136 = (std::__shared_weak_count *)operator new();
          v137 = v136;
          v136->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v136->__shared_owners_;
          v136->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v136->__shared_weak_owners_ = 0;
          v136[1].__vftable = v135;
          object = v135;
          v184[0] = v135;
          v184[1] = v136;
          do
            v139 = __ldxr(p_shared_owners);
          while (__stxr(v139 + 1, p_shared_owners));
          v185 = 0uLL;
          __p = 0;
          do
            v140 = __ldaxr(p_shared_owners);
          while (__stlxr(v140 - 1, p_shared_owners));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v137);
          }
          v141 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v142 = operator new();
          v143 = *(unsigned __int8 *)(v49 + 39);
          if ((v143 & 0x80u) == 0)
            v144 = v50;
          else
            v144 = *(_QWORD *)(v49 + 16);
          if ((v143 & 0x80u) != 0)
            v143 = *(_QWORD *)(v49 + 24);
          *(_QWORD *)v142 = v141;
          *(_OWORD *)(v142 + 8) = *(_OWORD *)v184;
          v184[0] = 0;
          v184[1] = 0;
          *(_OWORD *)(v142 + 24) = v185;
          v185 = 0uLL;
          *(_QWORD *)(v142 + 40) = v144;
          *(_QWORD *)(v142 + 48) = v143;
          *(_BYTE *)(v142 + 56) = 16;
          v190 = 0;
          v191 = v142;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v47 + 24) + 40))(*(_QWORD *)(v47 + 24), &v191);
          v145 = v191;
          v191 = 0;
          if (v145)
          {
            v146 = *(std::__shared_weak_count **)(v145 + 32);
            if (v146)
            {
              v147 = (unint64_t *)&v146->__shared_owners_;
              do
                v148 = __ldaxr(v147);
              while (__stlxr(v148 - 1, v147));
              if (!v148)
              {
                ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                std::__shared_weak_count::__release_weak(v146);
              }
            }
            v149 = *(std::__shared_weak_count **)(v145 + 16);
            if (v149)
            {
              v150 = (unint64_t *)&v149->__shared_owners_;
              do
                v151 = __ldaxr(v150);
              while (__stlxr(v151 - 1, v150));
              if (!v151)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
              }
            }
            MEMORY[0x227684CE8](v145, 0x10F0C40B62ED6C6);
            v152 = v190;
            v190 = 0;
            if (v152)
            {
              v153 = *(std::__shared_weak_count **)(v152 + 32);
              if (v153)
              {
                v154 = (unint64_t *)&v153->__shared_owners_;
                do
                  v155 = __ldaxr(v154);
                while (__stlxr(v155 - 1, v154));
                if (!v155)
                {
                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                  std::__shared_weak_count::__release_weak(v153);
                }
              }
              v156 = *(std::__shared_weak_count **)(v152 + 16);
              if (v156)
              {
                v157 = (unint64_t *)&v156->__shared_owners_;
                do
                  v158 = __ldaxr(v157);
                while (__stlxr(v158 - 1, v157));
                if (!v158)
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                }
              }
              MEMORY[0x227684CE8](v152, 0x10F0C40B62ED6C6);
            }
          }
          v159 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
          if (*((_QWORD *)&v185 + 1))
          {
            v160 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          v162 = (std::__shared_weak_count *)v184[1];
          if (v184[1])
          {
            v163 = (unint64_t *)((char *)v184[1] + 8);
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
        }
        else
        {
          os_log_type_enabled(v133, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v165 = (void *)_os_log_send_and_compose_impl();
          if (v165)
            free(v165);
        }
        if (v45)
        {
          sub_22322C138((uint64_t)&v175, "No confidence");
          sub_223182C08((uint64_t)&v175);
        }
        sub_223182C08((uint64_t)&v175);
        v166 = v181;
        if (v181)
        {
          v167 = (unint64_t *)&v181->__shared_owners_;
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v166);
          }
        }
LABEL_198:
        *(_QWORD *)a7 = &off_24EC24788;
        sub_2236B4564((_DWORD *)(a2 + 32), (void **)&unk_22464D8C2, (uint64_t *)(a7 + 8));
        return;
      }
    }
    memmove(v122, v120, v121);
    goto LABEL_128;
  }
  v175 = 0u;
  v176 = 0u;
  LODWORD(v177) = 728309916;
  kdebug_trace();
  v11 = (uint64_t *)(a2 + 32);
  *(_QWORD *)a7 = &off_24EC24788;
  sub_2231F8D1C((_DWORD *)(a2 + 32), (_WORD *)(a7 + 8));
  if (!*(_BYTE *)(a3 + 56))
    sub_22324A974();
  v16 = *(unsigned __int8 *)(a4 + 56);
  v17 = a6[6];
  object = &off_24EC200A8;
  v18 = *(void **)(a3 + 8);
  v19 = *(std::__shared_weak_count **)(a3 + 16);
  if (!v19)
  {
    v54 = *(_WORD *)(a3 + 48);
    v184[0] = *(void **)(a3 + 8);
    v184[1] = 0;
    v185 = *(_OWORD *)(a3 + 24);
    __p = *(void **)(a3 + 40);
    LOWORD(v187) = v54;
    if (v16)
      goto LABEL_18;
LABEL_43:
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v31 = 0;
    v169 = 0;
    goto LABEL_44;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v22 = *(_WORD *)(a3 + 48);
  do
    v23 = __ldxr(v20);
  while (__stxr(v23 + 1, v20));
  v185 = *(_OWORD *)(a3 + 24);
  __p = *(void **)(a3 + 40);
  do
    v24 = __ldxr(v20);
  while (__stxr(v24 + 1, v20));
  v184[0] = v18;
  v184[1] = v19;
  LOWORD(v187) = v22;
  do
    v25 = __ldaxr(v20);
  while (__stlxr(v25 - 1, v20));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  do
    v26 = __ldaxr(v20);
  while (__stlxr(v26 - 1, v20));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (!v16)
    goto LABEL_43;
LABEL_18:
  if (!*(_BYTE *)(a4 + 56))
    sub_22324A974();
  v27 = *(std::__shared_weak_count **)(a4 + 16);
  if (!v27)
  {
    v169 = 0;
    v31 = *(_QWORD *)(a4 + 24);
    v16 = *(_DWORD *)(a4 + 32);
    v32 = *(_DWORD *)(a4 + 36);
    v34 = *(_DWORD *)(a4 + 40);
    v33 = *(_DWORD *)(a4 + 44);
    v42 = *v11;
    v43 = HIDWORD(*v11);
    if (!v43)
      goto LABEL_102;
LABEL_45:
    v55 = v42;
    if ((_DWORD)v42)
    {
      v56 = 0;
      v57 = a1[8];
      v58 = a1[9];
      v59 = v58;
      v60 = (v42 - 1);
      v61 = a1[10];
      v62 = (float)(a1[11] - v58);
      if (v16)
        v63 = v32 == 0;
      else
        v63 = 1;
      v64 = v63;
      v66 = (int)__p;
      v65 = HIDWORD(__p);
      v171 = v185;
      __asm { FMOV            V5.4S, #1.0 }
      do
      {
        v70 = *(_DWORD *)(a2 + 40);
        v71 = *(_QWORD *)(a2 + 24) + 2 * (*(_DWORD *)(a2 + 44) * v56);
        v72 = *(_DWORD *)(a7 + 72);
        v73 = *(_QWORD *)(a7 + 32) + (*(_DWORD *)(a7 + 76) * v56);
        v74 = v171 + 2 * (v65 * v56);
        v75 = v174 & 0xFFFFFFFFFFFFFF00;
        if ((v64 & 1) == 0)
        {
          v12 = v34;
          v75 = v31 + 4 * (v33 * v56);
        }
        v174 = v75;
        v62 = v62 + v59;
        if (v56 < (v43 - 1) && v56 > 1)
        {
          v77 = 0;
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = v62 * v62;
          v84 = v83 + 1.0;
          v85 = *(_QWORD *)a5 + 2 * (*(_DWORD *)(a5 + 44) * v56);
          v86 = *(_DWORD *)(a5 + 24);
          do
          {
            _H17 = *(_WORD *)(v74 + 2 * v77);
            __asm { FCVT            S17, H17 }
            if (v17 > _S17)
            {
              v88 = 0;
            }
            else
            {
              _H17 = *(_WORD *)(v71 + 2 * v78);
              __asm { FCVT            S17, H17 }
              if (a6[8] >= _S17 && a6[7] <= _S17)
              {
                if (v60 <= v82)
                  goto LABEL_74;
                if (v82 < 2)
                  goto LABEL_74;
                _Q18.i64[1] = *((_QWORD *)&_Q5 + 1);
                _Q18.f32[0] = v61 + (float)(v57 * (float)v82);
                v87 = v62;
                _Q18.f32[1] = v87;
                v13.f32[0] = sqrtf(v84 + (float)(_Q18.f32[0] * _Q18.f32[0]));
                v95 = (int8x16_t)vdivq_f32(_Q18, (float32x4_t)vdupq_lane_s32((int32x2_t)v13, 0));
                v96 = (__int16 *)(v85 + 2 * v81);
                _Q18.i16[0] = *v96;
                __asm { FCVT            S18, H18 }
                _D19.i16[0] = v96[1];
                __asm { FCVT            S19, H19 }
                _D20.i16[0] = v96[2];
                __asm { FCVT            S20, H20 }
                *(float32x2_t *)_Q18.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q18.f32, *(float32x2_t *)v95.i8), _D19, *(float32x2_t *)v95.i8, 1);
                v13 = (float32x2_t)vextq_s8(v95, v95, 8uLL).u64[0];
                if (vmla_f32(*(float32x2_t *)_Q18.f32, v13, _D20).f32[0] >= -0.25882)
                {
                  v88 = 63;
                }
                else
                {
LABEL_74:
                  if ((v64 & 1) != 0 || *(float *)(v31 + 4 * (v33 * v56) + 4 * v79) <= 15.0)
                    v88 = -1;
                  else
                    v88 = 127;
                }
              }
              else
              {
                v88 = 31;
              }
            }
            *(_BYTE *)(v73 + v80) = v88;
            ++v82;
            v81 += v86;
            v80 += v72;
            v79 += v34;
            v78 += v70;
            v77 += v66;
          }
          while (v55 != v82);
        }
        else
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          if ((v64 & 1) != 0)
          {
            v100 = v55;
            do
            {
              _H7 = *(_WORD *)(v74 + 2 * v97);
              __asm { FCVT            S7, H7 }
              if (v17 <= _S7)
              {
                _H7 = *(_WORD *)(v71 + 2 * v98);
                __asm { FCVT            S7, H7 }
                if (a6[7] > _S7 || a6[8] < _S7)
                  v104 = 31;
                else
                  v104 = -1;
              }
              else
              {
                v104 = 0;
              }
              *(_BYTE *)(v73 + v99) = v104;
              v99 += v72;
              v98 += v70;
              v97 += v66;
              --v100;
            }
            while (v100);
          }
          else
          {
            v107 = 0;
            v108 = v55;
            do
            {
              _H7 = *(_WORD *)(v74 + 2 * v97);
              __asm { FCVT            S7, H7 }
              if (v17 > _S7)
              {
                v109 = 0;
              }
              else
              {
                _H7 = *(_WORD *)(v71 + 2 * v98);
                __asm { FCVT            S7, H7 }
                if (a6[8] >= _S7 && a6[7] <= _S7)
                {
                  if (*(float *)(v174 + 4 * v99) <= 15.0)
                    v109 = -1;
                  else
                    v109 = 127;
                }
                else
                {
                  v109 = 31;
                }
              }
              *(_BYTE *)(v73 + v107) = v109;
              v107 += v72;
              v99 += v12;
              v98 += v70;
              v97 += v66;
              --v108;
            }
            while (v108);
          }
        }
        ++v56;
      }
      while (v56 != v43);
    }
    goto LABEL_102;
  }
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  v169 = v27;
  do
    v30 = __ldxr(v28);
  while (__stxr(v30 + 1, v28));
  v31 = *(_QWORD *)(a4 + 24);
  v16 = *(_DWORD *)(a4 + 32);
  v32 = *(_DWORD *)(a4 + 36);
  v34 = *(_DWORD *)(a4 + 40);
  v33 = *(_DWORD *)(a4 + 44);
  do
    v35 = __ldxr(v28);
  while (__stxr(v35 + 1, v28));
  do
    v36 = __ldaxr(v28);
  while (__stlxr(v36 - 1, v28));
  if (!v36)
  {
    v37 = v31;
    v38 = v33;
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v169);
    v33 = v38;
    v31 = v37;
  }
  do
    v39 = __ldaxr(v28);
  while (__stlxr(v39 - 1, v28));
  if (v39)
  {
LABEL_44:
    v42 = *v11;
    v43 = HIDWORD(*v11);
    if (!v43)
      goto LABEL_102;
    goto LABEL_45;
  }
  v40 = v31;
  v41 = v33;
  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
  std::__shared_weak_count::__release_weak(v169);
  v33 = v41;
  v31 = v40;
  v42 = *v11;
  v43 = HIDWORD(*v11);
  if (v43)
    goto LABEL_45;
LABEL_102:
  if (v169)
  {
    v115 = (unint64_t *)&v169->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  if (v184[1])
  {
    v117 = (unint64_t *)((char *)v184[1] + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      (*(void (**)(void *))(*(_QWORD *)v184[1] + 16))(v184[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v184[1]);
    }
  }
  kdebug_trace();
}

void sub_2237953EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_22379542C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC500);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC500);
  _Unwind_Resume(a1);
}

void sub_223795470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_22319A054((uint64_t *)(v27 - 112));
  sub_22319A054((uint64_t *)(v27 - 120));
  sub_223199DE8((uint64_t)&a27);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2237954A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x227684CE8](v9, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237954D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237954EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223795500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a34 && a33 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223795548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_22319EF60((uint64_t)&a27);
  sub_223167354(v27);
  sub_2231874DC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223795578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223795590@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x2_t *a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  std::__shared_weak_count *v6;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  int v55;
  BOOL v56;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  int v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  float *v72;
  int32x2_t *v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  __int16 v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  float *v84;
  unint64_t v85;
  float *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  char *v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x4_t v113;
  int8x16_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x2_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  int v135;
  BOOL v136;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  _QWORD *result;
  uint64_t v142;
  float32x2_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t (**v151)();
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  __int16 v157;
  _BYTE v158[1824];
  _QWORD v159[2];
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  void *v167[3];
  void *v168;
  void *v169;
  std::__shared_weak_count *v170;
  void *v171;
  void *v172;
  void *__p;
  void *v174;
  uint64_t (**v175)();
  uint64_t v176;
  std::__shared_weak_count *v177;
  _DWORD v178[2];
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t (**v184)();
  __int128 v185;
  _BYTE v186[32];
  __int128 v187;
  uint64_t v188;
  __int16 v189;
  _BYTE v190[56];
  _BYTE v191[24];
  uint64_t v192;
  char v193;
  __int128 v194;
  _BYTE v195[24];
  char v196;
  _BYTE v197[7];
  uint64_t (**v198)();
  uint64_t v199;
  std::__shared_weak_count *v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int16 v204;
  __int128 v205;
  uint64_t v206;
  double v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  _QWORD v212[2];
  char v213;
  _OWORD v214[2];
  uint64_t v215;
  char v216;
  _BYTE v217[7];
  _QWORD v218[2];
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t (**v224)();
  __int128 v225;
  _BYTE v226[26];
  char v227;
  uint64_t (**v228)();
  __int128 v229;
  _BYTE v230[26];
  char v231;
  uint64_t (**v232)();
  __int128 v233;
  _OWORD v234[2];
  _BYTE v235[80];
  uint64_t v236;
  _BYTE v237[24];
  _BYTE *v238;
  _BYTE v239[24];
  _BYTE v240[26];
  char v241;
  uint64_t v242;

  v242 = *MEMORY[0x24BDAC8D0];
  v212[1] = 0;
  v212[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v213 = 1;
  v13 = *(_QWORD *)(a2 + 1232);
  v14 = operator new(0x20uLL);
  *v14 = &off_24EC58988;
  v14[1] = v212;
  v14[2] = v13;
  v238 = v14;
  v15 = *(unsigned __int8 *)(a2 + 208);
  if (*(_BYTE *)(a2 + 208))
  {
    if ((!*(_DWORD *)(a2 + 184) || !*(_DWORD *)(a2 + 188))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3D9D0(a2 + 128, (uint64_t)v190);
    v6 = *(std::__shared_weak_count **)&v190[16];
    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  v207 = (double)v13 / 1000000000.0;
  v210 = 0;
  v208 = v16;
  v209 = 0;
  v211 = 728309584;
  kdebug_trace();
  if (!v15)
    goto LABEL_12;
  if (!v6)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (v18)
  {
LABEL_12:
    v144 = a1;
    v19 = *(unsigned __int8 *)(a2 + 56);
    if (*(_BYTE *)(a2 + 56))
      goto LABEL_13;
LABEL_19:
    v190[0] = 0;
    v191[0] = 0;
    if (!v190[48])
      goto LABEL_28;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  v144 = a1;
  v19 = *(unsigned __int8 *)(a2 + 56);
  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_19;
LABEL_13:
  if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78(a2, (uint64_t)&v184);
  *(_QWORD *)v190 = &off_24EC200A8;
  *(_OWORD *)&v190[8] = v185;
  *(_OWORD *)&v190[24] = *(_OWORD *)v186;
  *(_OWORD *)&v190[34] = *(_OWORD *)&v186[10];
  v19 = 1;
  v191[0] = 1;
  if (v186[24])
  {
LABEL_20:
    if (*(_QWORD *)&v190[24])
    {
      v20 = *(_QWORD *)&v190[8];
      v21 = *(std::__shared_weak_count **)&v190[16];
      if (*(_QWORD *)&v190[16])
      {
        v22 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        do
          v24 = __ldaxr(v22);
        while (__stlxr(v24 - 1, v22));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v20 + 88))(v20, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1287");
      v19 = v191[0];
    }
  }
LABEL_28:
  v205 = *(_OWORD *)&v190[24];
  v206 = *(_QWORD *)&v190[40];
  if (v19)
  {
    v25 = *(std::__shared_weak_count **)&v190[16];
    if (*(_QWORD *)&v190[16])
    {
      v26 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  sub_223C41A24(a2, (uint64_t)v190);
  v198 = &off_24EC204C0;
  v28 = *(_QWORD *)&v190[8];
  v29 = *(std::__shared_weak_count **)&v190[16];
  if (*(_QWORD *)&v190[16])
  {
    v30 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v32 = *(_WORD *)&v191[16];
    do
      v33 = __ldxr(v30);
    while (__stxr(v33 + 1, v30));
    v201 = *(_OWORD *)&v190[24];
    v202 = *(_OWORD *)&v190[40];
    v203 = *(_OWORD *)v191;
    do
      v34 = __ldxr(v30);
    while (__stxr(v34 + 1, v30));
    v199 = v28;
    v200 = v29;
    v204 = v32;
    do
      v35 = __ldaxr(v30);
    while (__stlxr(v35 - 1, v30));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    do
      v36 = __ldaxr(v30);
    while (__stlxr(v36 - 1, v30));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  else
  {
    v199 = *(_QWORD *)&v190[8];
    v200 = 0;
    v201 = *(_OWORD *)&v190[24];
    v202 = *(_OWORD *)&v190[40];
    v203 = *(_OWORD *)v191;
    v204 = *(_WORD *)&v191[16];
  }
  if ((_BYTE)v192)
  {
    v37 = *(std::__shared_weak_count **)&v190[16];
    if (*(_QWORD *)&v190[16])
    {
      v38 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  v40 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v195 = *(_QWORD *)a3;
  LODWORD(v194) = 1036831949;
  *((_QWORD *)&v194 + 1) = 2;
  *(_DWORD *)&v195[20] = 1065098332;
  *(_QWORD *)&v195[12] = v40;
  v196 = *(_BYTE *)(a3 + 72);
  *(float *)&v197[3] = a6;
  *(_DWORD *)&v195[8] = *(_DWORD *)(a3 + 76);
  v190[0] = 0;
  v193 = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    if ((!*(_DWORD *)(a2 + 184) || !*(_DWORD *)(a2 + 188))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3D9D0(a2 + 128, (uint64_t)v235);
    v185 = *(_OWORD *)&v235[8];
    *(_OWORD *)v186 = *(_OWORD *)&v235[24];
    *(_OWORD *)&v186[16] = *(_OWORD *)&v235[40];
    v184 = &off_24EC25150;
    LOWORD(v188) = *(_WORD *)&v235[72];
    v187 = *(_OWORD *)&v235[56];
    LOBYTE(v189) = 1;
    v41 = *(_QWORD *)&v235[24];
    if (v235[72] && *(_QWORD *)v186)
    {
      v42 = v185;
      if (*((_QWORD *)&v185 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        do
          v45 = __ldaxr(v43);
        while (__stlxr(v45 - 1, v43));
        if (!v45)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v42 + 1) + 16))(*((_QWORD *)&v42 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v42 + 1));
        }
      }
      (*(void (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)v42 + 88))(v42, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v41 = *(_QWORD *)v186;
    }
    if (DWORD1(v187))
      v46 = (_DWORD)v187 == 0;
    else
      v46 = 1;
    v47 = v187;
    if (v46)
      v47 = 0;
    *(_QWORD *)&v235[4] = v47;
    *(_DWORD *)v235 = 3;
    v48 = *(_QWORD *)v235;
    v146 = v47;
    *(_DWORD *)v235 = 1;
    *(_QWORD *)&v235[4] = *((_QWORD *)&v187 + 1);
    v148 = *(_QWORD *)v235;
    v145 = *((_QWORD *)&v187 + 1);
    v149 = HIDWORD(v47);
    v150 = v48;
    v147 = HIDWORD(*((_QWORD *)&v187 + 1));
    if (HIDWORD(v187) * HIDWORD(v47) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    goto LABEL_125;
  }
  LOBYTE(v184) = 0;
  LOBYTE(v189) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a2, (uint64_t)&v228);
    *(_QWORD *)v239 = &off_24EC200A8;
    *(_OWORD *)&v239[8] = v229;
    *(_OWORD *)v240 = *(_OWORD *)v230;
    *(_OWORD *)&v240[10] = *(_OWORD *)&v230[10];
    v241 = 1;
    if (!v230[24])
      goto LABEL_91;
    goto LABEL_83;
  }
  v239[0] = 0;
  v241 = 0;
  if (v240[24])
  {
LABEL_83:
    if (*(_QWORD *)v240)
    {
      v49 = *(_QWORD *)&v239[8];
      v50 = *(std::__shared_weak_count **)&v239[16];
      if (*(_QWORD *)&v239[16])
      {
        v51 = (unint64_t *)(*(_QWORD *)&v239[16] + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        do
          v53 = __ldaxr(v51);
        while (__stlxr(v53 - 1, v51));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v49 + 88))(v49, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1287");
    }
  }
LABEL_91:
  v182 = *(_OWORD *)v240;
  v183 = *(_QWORD *)&v240[16];
  sub_223FB92EC((uint64_t)&v182, a2 + 1288, 7u, (uint64_t)v235);
  *(_OWORD *)v190 = *(_OWORD *)v235;
  *(_OWORD *)&v190[16] = *(_OWORD *)&v235[16];
  *(_QWORD *)&v190[32] = *(_QWORD *)&v235[32];
  if (v193)
  {
    *(_OWORD *)&v191[8] = *(_OWORD *)&v235[64];
    v192 = v236;
    v54 = *(void **)&v190[48];
    if (*(_QWORD *)&v190[48])
    {
      v55 = *(_DWORD *)&v191[16];
      if (*(_DWORD *)&v191[16])
        v56 = *(_DWORD *)&v191[12] == 0;
      else
        v56 = 1;
      if (v56 || *(_DWORD *)&v191[8] == 0)
        v55 = 0;
      if (v55 * (HIDWORD(v192) >> 1) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      *(_QWORD *)&v190[40] = *(_QWORD *)&v235[40];
      free(v54);
    }
    else
    {
      *(_QWORD *)&v190[40] = *(_QWORD *)&v235[40];
    }
    *(_QWORD *)&v190[48] = *(_QWORD *)&v235[48];
    *(_QWORD *)v191 = *(_QWORD *)&v235[56];
    *(_QWORD *)&v235[40] = 0;
    *(_QWORD *)&v235[48] = 0;
  }
  else
  {
    *(_OWORD *)&v190[40] = *(_OWORD *)&v235[40];
    *(_QWORD *)&v235[48] = 0;
    *(_QWORD *)&v235[40] = 0;
    *(_OWORD *)&v191[8] = *(_OWORD *)&v235[64];
    *(_QWORD *)v191 = *(_QWORD *)&v235[56];
    v192 = v236;
    v193 = 1;
  }
  *(_QWORD *)&v235[48] = 0;
  if (v241)
  {
    v58 = *(std::__shared_weak_count **)&v239[16];
    if (*(_QWORD *)&v239[16])
    {
      v59 = (unint64_t *)(*(_QWORD *)&v239[16] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  v41 = *(_QWORD *)&v190[48];
  if (*(_DWORD *)v190)
    v61 = *(_DWORD *)&v190[4] == 0;
  else
    v61 = 1;
  v62 = v61 || *(_DWORD *)&v190[8] == 0;
  v63 = *(_QWORD *)v190;
  if (v62)
  {
    v63 = 0;
    v64 = 0;
  }
  else
  {
    v64 = *(_DWORD *)&v190[8];
  }
  v149 = v64;
  v150 = v63;
  *(_QWORD *)v235 = v63;
  *(_DWORD *)&v235[8] = v64;
  LODWORD(v147) = *(_DWORD *)&v190[20];
  v148 = *(_QWORD *)&v190[12];
  *(_QWORD *)v239 = *(_QWORD *)&v190[12];
  *(_DWORD *)&v239[8] = *(_DWORD *)&v190[20];
  if (v64 * *(_DWORD *)&v190[20] == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v145 = *(_QWORD *)&v239[4];
  v146 = *(_QWORD *)&v235[4];
LABEL_125:
  if ((_BYTE)v189)
  {
    v65 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
    if (*((_QWORD *)&v185 + 1))
    {
      v66 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  v179 = v194;
  v180 = *(_OWORD *)v195;
  v181 = *(_QWORD *)&v195[16];
  v68 = v196;
  v178[0] = *(_DWORD *)v197;
  *(_DWORD *)((char *)v178 + 3) = *(_DWORD *)&v197[3];
  v235[0] = 0;
  v235[56] = 0;
  if (v196 && (v69 = *(_QWORD *)(a2 + 216)) != 0)
  {
    *(_QWORD *)v239 = &off_24EC21230;
    sub_2231BE6D4(v69 + 56, (uint64_t *)&v239[8]);
    v70 = 0;
    *(_QWORD *)v235 = &off_24EC21230;
    v71 = *(_OWORD *)&v239[8];
    *(_QWORD *)&v239[8] = 0;
    *(_QWORD *)&v239[16] = 0;
    *(_OWORD *)&v235[8] = v71;
    *(_OWORD *)&v235[24] = *(_OWORD *)v240;
    *(_OWORD *)&v235[34] = *(_OWORD *)&v240[10];
    v235[56] = 1;
    if (!*(_BYTE *)(a2 + 56))
      goto LABEL_134;
  }
  else
  {
    v70 = 1;
    if (!*(_BYTE *)(a2 + 56))
    {
LABEL_134:
      v239[0] = 0;
      v241 = 0;
      sub_22324A974();
    }
  }
  if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78(a2, (uint64_t)&v228);
  *(_OWORD *)&v240[10] = *(_OWORD *)&v230[10];
  *(_OWORD *)v240 = *(_OWORD *)v230;
  v241 = 1;
  v232 = &off_24EC200A8;
  v233 = v229;
  *(_QWORD *)&v239[8] = 0;
  *(_QWORD *)&v239[16] = 0;
  *(_QWORD *)v239 = &off_24EC200A8;
  *(_OWORD *)((char *)v234 + 10) = *(_OWORD *)&v240[10];
  v234[0] = *(_OWORD *)v230;
  if (!*(_BYTE *)(a2 + 120))
  {
    LOBYTE(v228) = 0;
    v231 = 0;
    v72 = (float *)(a2 + 1240);
    LOBYTE(v224) = 0;
    v227 = 0;
    if ((v70 & 1) != 0)
      goto LABEL_162;
    goto LABEL_146;
  }
  if ((!*(_DWORD *)(a2 + 96) || !*(_DWORD *)(a2 + 100))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78(a2 + 64, (uint64_t)&v224);
  v228 = &off_24EC200A8;
  v229 = v225;
  *(_OWORD *)v230 = *(_OWORD *)v226;
  *(_OWORD *)&v230[10] = *(_OWORD *)&v226[10];
  v231 = 1;
  v72 = (float *)(a2 + 1240);
  LOBYTE(v224) = 0;
  v227 = 0;
  if ((v70 & 1) == 0)
  {
LABEL_146:
    v73 = a4;
    v74 = v41;
    v224 = &off_24EC21230;
    v75 = *(_QWORD *)&v235[8];
    v76 = *(std::__shared_weak_count **)&v235[16];
    if (*(_QWORD *)&v235[16])
    {
      v77 = a5;
      v78 = (unint64_t *)(*(_QWORD *)&v235[16] + 8);
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
      v80 = *(_WORD *)&v235[48];
      do
        v81 = __ldxr(v78);
      while (__stxr(v81 + 1, v78));
      *(_OWORD *)v226 = *(_OWORD *)&v235[24];
      *(_QWORD *)&v226[16] = *(_QWORD *)&v235[40];
      do
        v82 = __ldxr(v78);
      while (__stxr(v82 + 1, v78));
      *(_QWORD *)&v225 = v75;
      *((_QWORD *)&v225 + 1) = v76;
      *(_WORD *)&v226[24] = v80;
      do
        v83 = __ldaxr(v78);
      while (__stlxr(v83 - 1, v78));
      if (!v83)
      {
        v84 = v72;
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
        v72 = v84;
      }
      do
        v85 = __ldaxr(v78);
      while (__stlxr(v85 - 1, v78));
      a5 = v77;
      if (!v85)
      {
        v86 = v72;
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
        v72 = v86;
      }
    }
    else
    {
      v225 = *(unint64_t *)&v235[8];
      *(_OWORD *)v226 = *(_OWORD *)&v235[24];
      *(_QWORD *)&v226[16] = *(_QWORD *)&v235[40];
      *(_WORD *)&v226[24] = *(_WORD *)&v235[48];
    }
    v227 = 1;
    v41 = v74;
    a4 = v73;
  }
LABEL_162:
  v87 = v41;
  v218[0] = v41;
  v218[1] = v150;
  v220 = v148;
  v219 = v149;
  v221 = v147;
  v222 = v146;
  v223 = v145;
  v214[0] = v179;
  v214[1] = v180;
  v215 = v181;
  v216 = v68;
  *(_DWORD *)v217 = v178[0];
  *(_DWORD *)&v217[3] = *(_DWORD *)((char *)v178 + 3);
  v143 = (float32x2_t *)v72;
  sub_223794664(v72, (uint64_t)&v232, (uint64_t)&v228, (uint64_t)&v224, (uint64_t)v218, (float *)v214, (uint64_t)&v184);
  if ((v70 & 1) == 0)
  {
    v88 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
    if (*((_QWORD *)&v225 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
  }
  if (v231)
  {
    v91 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
    if (*((_QWORD *)&v229 + 1))
    {
      v92 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v241)
  {
    v97 = *(std::__shared_weak_count **)&v239[16];
    if (*(_QWORD *)&v239[16])
    {
      v98 = (unint64_t *)(*(_QWORD *)&v239[16] + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
  if (v235[56])
  {
    v100 = *(std::__shared_weak_count **)&v235[16];
    if (*(_QWORD *)&v235[16])
    {
      v101 = (unint64_t *)(*(_QWORD *)&v235[16] + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
  }
  v175 = &off_24EC22138;
  sub_2236B487C((uint64_t)&v184, &v176);
  sub_223794270((uint64_t)&v198, (uint64_t)&v175);
  v103 = v177;
  if (v177)
  {
    v104 = (unint64_t *)&v177->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v106 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  *(double *)&qword_25578BAF0 = (double)*(uint64_t *)(a2 + 1232) / 1000000000.0;
  v107 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v107 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  v108 = (char *)operator new(0x20uLL);
  strcpy(v108, "cv3d.recon.KeyframePlanes");
  if (byte_25578BAF8[23] < 0)
    sub_22319C4B8((void **)byte_25578BAF8, v108, 0x19uLL);
  else
    sub_22319C3F4(byte_25578BAF8, v108, 0x19uLL);
  operator delete(v108);
  v109.i32[0] = a4[1].i32[0];
  v110 = (float32x2_t)a4[2];
  v111 = (float32x2_t)a4[4];
  v112.i32[0] = a4[5].i32[0];
  *(int32x2_t *)v113.f32 = a4[6];
  v113.i32[2] = a4[7].i32[0];
  v114 = (int8x16_t)vnegq_f32(v113);
  v115 = *(float32x4_t *)(a2 + 1352);
  v116 = vmulq_n_f32(*(float32x4_t *)(a2 + 1336), v109.f32[0]);
  v109.i32[1] = a4[3].i32[0];
  v117 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*a4, (int32x2_t)v110), *(float *)v114.i32), (float32x2_t)vzip2_s32(*a4, (int32x2_t)v110), *(float32x2_t *)v113.f32, 1), v109, v113, 2);
  v109.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v111, *(float32x2_t *)v114.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v111, 1), *(float32x2_t *)v113.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), v112).u32[0];
  v118 = *(float32x4_t *)(a2 + 1368);
  v119 = *(float32x4_t *)(a2 + 1384);
  v120 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*(float32x4_t *)(a2 + 1336), (float32x2_t)*a4, 1), v115, v110, 1), v118, v111, 1), (float32x4_t)0, v119);
  v121 = vaddq_f32(v119, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(a2 + 1336), v117.f32[0]), v115, v117, 1), v118, v109.f32[0]));
  *(float32x4_t *)v235 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(a2 + 1336), COERCE_FLOAT(*a4)), v115, v110.f32[0]), v118, v111.f32[0]), (float32x4_t)0, v119);
  *(float32x4_t *)&v235[16] = v120;
  *(float32x4_t *)&v235[32] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v116, v115, v109.f32[1]), v118, v112.f32[0]), (float32x4_t)0, v119);
  *(float32x4_t *)&v235[48] = v121;
  v165 = v205;
  v166 = v206;
  v122 = *(_QWORD *)&v186[8];
  if ((_BYTE)v189 && *(_QWORD *)&v186[8])
  {
    (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v185 + 88))(v185, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1305");
    v122 = *(_QWORD *)&v186[8];
  }
  *(_OWORD *)&v239[8] = *(_OWORD *)&v186[16];
  v159[0] = v87;
  v159[1] = v150;
  v161 = v148;
  v160 = v149;
  v162 = v147;
  v163 = v146;
  v164 = v145;
  v123 = *v144;
  *(_QWORD *)v239 = v122;
  sub_223EE6F04(v123, (uint64_t)&v165, (uint64_t)v239, (uint64_t)v159, v143, (uint64_t)v235, (float *)&v194, (uint64_t)v167);
  sub_223257000((uint64_t)v158, a2);
  v151 = &off_24EC24788;
  v124 = v185;
  v185 = 0uLL;
  v152 = v124;
  v153 = *(_OWORD *)v186;
  v154 = *(_OWORD *)&v186[16];
  v155 = v187;
  v156 = v188;
  v157 = v189;
  sub_223797470(a5, (uint64_t)v167, (uint64_t)v158, (uint64_t)&v151);
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  sub_2232555B8((uint64_t)v158);
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  v128 = v170;
  if (v170)
  {
    v129 = (unint64_t *)&v170->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v167[0])
  {
    v167[1] = v167[0];
    operator delete(v167[0]);
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (!*((_QWORD *)&v185 + 1))
    goto LABEL_226;
  v132 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
  do
    v133 = __ldaxr(v132);
  while (__stlxr(v133 - 1, v132));
  if (!v133)
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
    if (!v193)
      goto LABEL_239;
  }
  else
  {
LABEL_226:
    if (!v193)
      goto LABEL_239;
  }
  v134 = *(void **)&v190[48];
  if (*(_QWORD *)&v190[48])
  {
    v135 = *(_DWORD *)&v191[16];
    if (*(_DWORD *)&v191[16])
      v136 = *(_DWORD *)&v191[12] == 0;
    else
      v136 = 1;
    if (v136 || *(_DWORD *)&v191[8] == 0)
      v135 = 0;
    if (v135 * (HIDWORD(v192) >> 1) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    free(v134);
  }
LABEL_239:
  v138 = v200;
  if (v200)
  {
    v139 = (unint64_t *)&v200->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  kdebug_trace();
  if (!v238)
    sub_223198474();
  (*(void (**)(_BYTE *))(*(_QWORD *)v238 + 48))(v238);
  result = v238;
  if (v238 == v237)
  {
    v142 = 4;
    result = v237;
  }
  else
  {
    if (!v238)
      return result;
    v142 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v142))();
}

void sub_223796A68(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_223796BF8(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 72) || *(_DWORD *)(a1 + 68) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 64) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 72);
    if (v5 * (*(_DWORD *)(a1 + 84) >> 1) != -1)
      goto LABEL_14;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = *(void **)(a1 + 48);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_223796C9C(uint64_t a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_9:
    v7 = *(void **)(a1 + 24);
    if (!v7)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
LABEL_10:
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
LABEL_11:
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_223796D40(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      v3 = !*(_DWORD *)(a1 + 72) || *(_DWORD *)(a1 + 68) == 0;
      v4 = v3 || *(_DWORD *)(a1 + 64) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(a1 + 72);
      if (v5 * (*(_DWORD *)(a1 + 84) >> 1) != -1)
        goto LABEL_15;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v2 = *(void **)(a1 + 48);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(a1 + 48) = 0;
  }
  return a1;
}

BOOL sub_223796DEC(_BOOL8 result, _QWORD *a2, _BYTE *a3, uint64_t *a4)
{
  uint64_t *v4;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a4;
  a2[1] = a4;
  if (*(_DWORD *)(result + 8))
  {
    v7 = (_DWORD *)result;
    v8 = 0;
    while (1)
    {
      *a2 = a3;
      a2[1] = v4;
      if (!v4)
      {
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        if (result)
          break;
      }
      v9 = *v4;
      if (*v4 <= BYTE6(*v4))
        v9 = HIWORD(*v4);
      if (BYTE1(v9) <= 0x29u && byte_22464D898[BYTE1(v9)])
        *a3 = 0;
      a3 += v7[3];
      v4 = (uint64_t *)((char *)v4 + 2 * v7[4]);
      if (++v8 >= v7[2])
        goto LABEL_11;
    }
LABEL_19:
    abort();
  }
LABEL_11:
  *a2 = a3;
  a2[1] = v4;
  if (!v4)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if (result)
      goto LABEL_19;
  }
  v10 = *v4;
  if (*v4 <= BYTE6(*v4))
    v10 = HIWORD(*v4);
  if (BYTE1(v10) <= 0x29u)
  {
    if (byte_22464D898[BYTE1(v10)])
      *a3 = 0;
  }
  return result;
}

void sub_223796F60()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223796F74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24EC58988;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_223796FB4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC58988;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_223796FDC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __n128 *v20;
  void *v21;
  size_t v22;
  uint64_t v23;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24;
  float v25;
  void *v26;
  unint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  char __p[22];
  char v31;

  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC589E8);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v2 = sub_2241471F8();
    v3 = v2[2];
    if (!v3)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = v2[2];
    }
    v4 = *(_QWORD *)(v3 + 64);
    v5 = (std::mutex *)(v4 + 32);
    std::mutex::lock((std::mutex *)(v4 + 32));
    v7 = *(_QWORD *)(v4 + 96);
    v6 = *(_QWORD *)(v4 + 104);
    std::mutex::unlock(v5);
    if (v7 != v6)
    {
      sub_2241471F8();
      v8 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
      {
        kdebug_trace();
        v9 = *(_QWORD *)(a1 + 8);
        if (*(_BYTE *)(v9 + 16))
          v10 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v9 + *(_QWORD *)(v9 + 8);
        else
          v10 = *(_QWORD *)(v9 + 8);
        v25 = (float)v10 / 1000000.0;
        v11 = *(_QWORD *)(a1 + 16);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
        {
          v31 = 21;
          strcpy(__p, "Single shot detection");
          *(_QWORD *)&v29 = (uint64_t)((double)v11 / 1000000000.0 * 1000000000.0);
          *((_QWORD *)&v29 + 1) = 2;
          v12 = sub_2241471F8();
          sub_2231FBBA8((uint64_t)v12, v8, &v25, (uint64_t)__p, &v29);
          if (v31 < 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  kdebug_trace();
  v13 = v28;
  if ((v28 & 0x80u) != 0)
    v13 = v27;
  if (v13 >= 0x11)
  {
    v14 = (uint64_t *)&v26;
    if ((v28 & 0x80u) != 0)
      v14 = (uint64_t *)v26;
    v15 = *v14;
    v16 = v14[1];
    v17 = *((unsigned __int8 *)v14 + 16);
    if (v15 == 0x6365722E64337663 && v16 == 0x73746174532E6E6FLL && v17 == 46)
    {
      v20 = sub_223187510();
      if ((v28 & 0x80u) == 0)
        v21 = &v26;
      else
        v21 = v26;
      if ((v28 & 0x80u) == 0)
        v22 = v28;
      else
        v22 = v27;
      v23 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v23 + 16))
        v24 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v23 + *(_QWORD *)(v23 + 8);
      else
        v24 = *(_QWORD *)(v23 + 8);
      *(float *)__p = (float)v24 / 1000000.0;
      sub_2231897A8((uint64_t *)v20, v21, v22, (float *)__p, (uint64_t)"Single shot detection", 21);
    }
  }
  kdebug_trace();
  if ((char)v28 < 0)
    operator delete(v26);
}

void sub_223797360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  kdebug_trace();
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2237973F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes18SingleShotDetector13ComputePlane"
                     "sERKNS5_5frame11FrameBundleERKNS5_20PlaneDetectionConfigERKNS5_21CoordinateTransformerEfE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes18SingleShotDetector13C"
                                "omputePlanesERKNS5_5frame11FrameBundleERKNS5_20PlaneDetectionConfigERKNS5_21CoordinateTr"
                                "ansformerEfE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes18SingleShotDetector13ComputePlanesERKNS5_5frame11FrameBundleERKNS5_20PlaneDetectionConfigERKNS5_21CoordinateTransformerEfE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes18SingleShotDetector13ComputePlanesERKNS5_5frame11FrameBundleERKNS5_20PlaneDetectionConfigERKNS5_21CoordinateTransformerEfE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223797464()
{
  return &unk_24EC589F0;
}

uint64_t sub_223797470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char **v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 1232);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &off_24EC24788;
  v6 = a1 + 56;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 128);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v10 = (char **)(a1 + 192);
  *(_QWORD *)(a1 + 208) = 0;
  sub_2232568B4(a1 + 216, a3);
  v10[231] = (char *)&off_24EC24788;
  *((_OWORD *)v10 + 116) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v11 = *(_OWORD *)(a4 + 24);
  v12 = *(_OWORD *)(a4 + 40);
  v13 = *(_OWORD *)(a4 + 56);
  v10[240] = *(char **)(a4 + 72);
  *((_OWORD *)v10 + 119) = v13;
  *((_OWORD *)v10 + 118) = v12;
  *((_OWORD *)v10 + 117) = v11;
  *((_WORD *)v10 + 964) = *(_WORD *)(a4 + 80);
  v23 = &off_24EC21420;
  sub_2231FBAA0(v6, &v24);
  sub_223ECF32C((uint64_t)&v23, (-85 * ((*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 8)) >> 3)), &v26);
  v14 = *v10;
  if (*v10)
  {
    v15 = *(char **)(a1 + 200);
    v16 = *v10;
    if (v15 != v14)
    {
      do
      {
        v17 = (void *)*((_QWORD *)v15 - 7);
        if (v17)
        {
          *((_QWORD *)v15 - 6) = v17;
          operator delete(v17);
        }
        v18 = (void *)*((_QWORD *)v15 - 11);
        if (v18)
        {
          *((_QWORD *)v15 - 10) = v18;
          operator delete(v18);
        }
        v15 -= 88;
      }
      while (v15 != v14);
      v16 = *v10;
    }
    *(_QWORD *)(a1 + 200) = v14;
    operator delete(v16);
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
  }
  *(_OWORD *)(a1 + 192) = v26;
  *(_QWORD *)(a1 + 208) = v27;
  v27 = 0;
  v26 = 0uLL;
  v19 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_2237976CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  sub_2231BEEB4((uint64_t)va);
  sub_223167354((uint64_t)(v3 + 232));
  sub_2232555B8(v4);
  sub_2237073E0(v3);
  sub_223796C9C(v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_223797708(uint64_t a1, const void **a2)
{
  uint64_t **v4;
  void *exception;
  char *v7;
  std::string v8;
  std::string v9;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v7 = (char *)sub_223799B6C((char *)a1);
      sub_223174DE4(&v8, v7);
      sub_223799B10("cannot use operator[] with a string argument with ", &v8, &v9);
      sub_22379985C(305, (uint64_t)&v9, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24EC58AD0, (void (*)(void *))sub_2237999D4);
    }
    v4 = *(uint64_t ***)(a1 + 8);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *v4 = (uint64_t *)(v4 + 1);
    *(_QWORD *)(a1 + 8) = v4;
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  return sub_22379A654(v4, a2, (uint64_t)&unk_2245BA939, (__int128 **)&v9) + 7;
}

void sub_2237977FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

char *sub_22379785C@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0xC0uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24EC58A50;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *((_QWORD *)v2 + 23) = 0;
  *((_QWORD *)v2 + 4) = 850045863;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 13) = 0;
  *((_QWORD *)v2 + 11) = 0;
  *((_QWORD *)v2 + 12) = v2 + 104;
  a1[1] = v2;
  *((_QWORD *)v2 + 3) = off_24EC58A10;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t **sub_2237978E4(uint64_t a1, const char *a2)
{
  uint64_t **v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  void *exception;
  char *v13;
  std::string v14;
  std::string __dst;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = (char *)sub_223799B6C((char *)a1);
      sub_223174DE4(&v14, v13);
      sub_223799B10("cannot use operator[] with a string argument with ", &v14, &__dst);
      sub_22379985C(305, (uint64_t)&__dst, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24EC58AD0, (void (*)(void *))sub_2237999D4);
    }
    v4 = *(uint64_t ***)(a1 + 8);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *v4 = (uint64_t *)(v4 + 1);
    *(_QWORD *)(a1 + 8) = v4;
  }
  v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_12:
    memcpy(p_dst, a2, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v10 = sub_22379A834(v4, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_2245BA939, &v14);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v10 + 7;
}

void sub_223797A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223797AF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  _BYTE *v12;
  _QWORD *v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  double *v22;
  double v23;
  double v24;
  char *v25;
  _QWORD *v26;
  double *v27;
  double v28;
  double v29;
  char *v30;
  _QWORD *v31;
  double *v32;
  double v33;
  double v34;
  int v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t **v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unsigned __int8 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  size_t v50;
  const char *v51;
  unsigned __int8 v52;
  const char *v53;
  size_t v54;
  _BYTE *v55;
  unint64_t v56;
  const char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  size_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t **v102;
  int v103;
  uint64_t *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v115;
  std::mutex *v116;
  uint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  void *v120;
  char v121;
  void *v122[2];
  char v123;
  __int128 v124;
  char v125[8];
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t *v128;
  char v129[8];
  uint64_t *v130;
  unsigned __int8 v131[8];
  uint64_t v132[2];
  char v133;
  char v134[8];
  uint64_t v135[2];
  char v136;
  char v137[8];
  uint64_t v138[2];
  char v139;
  _BYTE __p[24];
  int v141;
  const char *v142;
  _QWORD *v143;
  const char **v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unsigned __int8 v147[8];
  uint64_t v148[2];
  char v149;
  unsigned __int8 v150;
  uint64_t v151[2];
  char v152;
  unsigned __int8 v153[8];
  uint64_t v154[2];
  char v155;
  unsigned __int8 v156;
  uint64_t v157[2];
  char v158;
  uint64_t v159;
  uint64_t v160[2];
  char v161;
  unsigned __int8 v162;
  uint64_t v163[2];
  char v164;
  uint64_t v165;
  uint64_t v166[2];
  char v167;
  unsigned __int8 v168;
  uint64_t v169[2];
  char v170;
  uint64_t v171;
  uint64_t v172[2];
  char v173;
  unsigned __int8 v174;
  uint64_t v175[2];
  char v176;
  _BYTE object[40];
  void *v178;
  _BYTE *v179;
  unint64_t v180;
  unsigned __int8 v181[8];
  uint64_t v182[2];
  char v183;
  char v184[8];
  uint64_t v185[2];
  char v186;
  char v187[8];
  uint64_t v188[2];
  char v189;
  char v190[8];
  uint64_t v191[2];
  char v192;
  uint64_t v193;

  v193 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&object[16] = 0;
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)object = &object[8];
  sub_2245312C0(object, __p);
  v124 = *(_OWORD *)__p;
  sub_22323DF84((uint64_t)object, *(char **)&object[8]);
  v123 = 10;
  strcpy((char *)v122, "plane_data");
  std::mutex::lock((std::mutex *)(a1 + 8));
  v116 = (std::mutex *)(a1 + 8);
  v131[0] = 3;
  v3 = (char *)operator new(0x18uLL);
  v115 = a1;
  v3[23] = 6;
  strcpy(v3, "planes");
  v132[0] = (uint64_t)v3;
  v132[1] = (uint64_t)v131;
  v133 = 1;
  v134[0] = 0;
  v135[0] = 0;
  v4 = *(_QWORD **)(a1 + 72);
  if (v4 == (_QWORD *)(a1 + 80))
    goto LABEL_105;
  v5 = 0;
  while (v5 != 230)
  {
    v127 = 0;
    v128 = 0;
    __p[0] = 3;
    v6 = operator new(0x18uLL);
    v6[23] = 1;
    *(_WORD *)v6 = 111;
    *(_QWORD *)&__p[8] = v6;
    *(_QWORD *)&__p[16] = __p;
    LOBYTE(v141) = 1;
    v143 = 0;
    LOBYTE(v142) = 2;
    v7 = operator new(0x18uLL);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    v8 = (double *)operator new(0x30uLL);
    *v7 = v8;
    v7[2] = v8 + 6;
    v9 = *((float *)v4 + 12);
    *(_BYTE *)v8 = 7;
    v8[1] = v9;
    v10 = *((float *)v4 + 13);
    *((_BYTE *)v8 + 16) = 7;
    v8[3] = v10;
    v11 = *((float *)v4 + 14);
    *((_BYTE *)v8 + 32) = 7;
    v8[5] = v11;
    v7[1] = v8 + 6;
    v143 = v7;
    v144 = &v142;
    LOBYTE(v145) = 1;
    sub_2237995F8((uint64_t)object, (uint64_t)__p, 2, 1, 2);
    *(_QWORD *)&object[16] = object;
    object[24] = 1;
    LOBYTE(v171) = 3;
    v12 = operator new(0x18uLL);
    v12[23] = 1;
    *(_WORD *)v12 = 110;
    v172[0] = (uint64_t)v12;
    v172[1] = (uint64_t)&v171;
    v173 = 1;
    v175[0] = 0;
    v174 = 2;
    v13 = operator new(0x18uLL);
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    v14 = (double *)operator new(0x30uLL);
    *v13 = v14;
    v13[2] = v14 + 6;
    v15 = *((float *)v4 + 15);
    *(_BYTE *)v14 = 7;
    v14[1] = v15;
    v16 = *((float *)v4 + 16);
    *((_BYTE *)v14 + 16) = 7;
    v14[3] = v16;
    v17 = *((float *)v4 + 17);
    *((_BYTE *)v14 + 32) = 7;
    v14[5] = v17;
    v13[1] = v14 + 6;
    v175[0] = (uint64_t)v13;
    v175[1] = (uint64_t)&v174;
    v176 = 1;
    sub_2237995F8((uint64_t)&object[32], (uint64_t)&v171, 2, 1, 2);
    v179 = &object[32];
    LOBYTE(v180) = 1;
    LOBYTE(v165) = 3;
    v18 = operator new(0x18uLL);
    v18[23] = 1;
    *(_WORD *)v18 = 108;
    v166[0] = (uint64_t)v18;
    v166[1] = (uint64_t)&v165;
    v167 = 1;
    v19 = *((unsigned __int8 *)v4 + 44);
    v168 = 6;
    v169[0] = v19;
    v169[1] = (uint64_t)&v168;
    v170 = 1;
    sub_2237995F8((uint64_t)v181, (uint64_t)&v165, 2, 1, 2);
    v182[1] = (uint64_t)v181;
    v183 = 1;
    LOBYTE(v159) = 3;
    v20 = (char *)operator new(0x18uLL);
    v20[23] = 5;
    strcpy(v20, "obb_0");
    v160[0] = (uint64_t)v20;
    v160[1] = (uint64_t)&v159;
    v161 = 1;
    v163[0] = 0;
    v162 = 2;
    v21 = operator new(0x18uLL);
    *v21 = 0;
    v21[1] = 0;
    v21[2] = 0;
    v22 = (double *)operator new(0x20uLL);
    *v21 = v22;
    v21[2] = v22 + 4;
    v23 = *((float *)v4 + 18);
    *(_BYTE *)v22 = 7;
    v22[1] = v23;
    v24 = *((float *)v4 + 19);
    *((_BYTE *)v22 + 16) = 7;
    v22[3] = v24;
    v21[1] = v22 + 4;
    v163[0] = (uint64_t)v21;
    v163[1] = (uint64_t)&v162;
    v164 = 1;
    v185[1] = sub_2237995F8((uint64_t)v184, (uint64_t)&v159, 2, 1, 2);
    v186 = 1;
    v153[0] = 3;
    v25 = (char *)operator new(0x18uLL);
    v25[23] = 5;
    strcpy(v25, "obb_1");
    v154[0] = (uint64_t)v25;
    v154[1] = (uint64_t)v153;
    v155 = 1;
    v157[0] = 0;
    v156 = 2;
    v26 = operator new(0x18uLL);
    *v26 = 0;
    v26[1] = 0;
    v26[2] = 0;
    v27 = (double *)operator new(0x20uLL);
    *v26 = v27;
    v26[2] = v27 + 4;
    v28 = *((float *)v4 + 20);
    *(_BYTE *)v27 = 7;
    v27[1] = v28;
    v29 = *((float *)v4 + 21);
    *((_BYTE *)v27 + 16) = 7;
    v27[3] = v29;
    v26[1] = v27 + 4;
    v157[0] = (uint64_t)v26;
    v157[1] = (uint64_t)&v156;
    v158 = 1;
    v188[1] = sub_2237995F8((uint64_t)v187, (uint64_t)v153, 2, 1, 2);
    v189 = 1;
    v147[0] = 3;
    v30 = (char *)operator new(0x18uLL);
    v30[23] = 5;
    strcpy(v30, "obb_2");
    v148[0] = (uint64_t)v30;
    v148[1] = (uint64_t)v147;
    v149 = 1;
    v151[0] = 0;
    v150 = 2;
    v31 = operator new(0x18uLL);
    *v31 = 0;
    v31[1] = 0;
    v31[2] = 0;
    v32 = (double *)operator new(0x20uLL);
    *v31 = v32;
    v31[2] = v32 + 4;
    v33 = *((float *)v4 + 22);
    *(_BYTE *)v32 = 7;
    v32[1] = v33;
    v34 = *((float *)v4 + 23);
    *((_BYTE *)v32 + 16) = 7;
    v32[3] = v34;
    v31[1] = v32 + 4;
    v151[0] = (uint64_t)v31;
    v151[1] = (uint64_t)&v150;
    v152 = 1;
    v191[1] = sub_2237995F8((uint64_t)v190, (uint64_t)v147, 2, 1, 2);
    v192 = 1;
    sub_2237995F8((uint64_t)v129, (uint64_t)object, 6, 1, 2);
    v35 = v127;
    v127 = v129[0];
    v129[0] = v35;
    v36 = (uint64_t)v128;
    v128 = v130;
    v130 = (uint64_t *)v36;
    sub_223454278((uint64_t *)&v130, v35);
    sub_223454278(v191, v190[0]);
    sub_223454278(v188, v187[0]);
    sub_223454278(v185, v184[0]);
    sub_223454278(v182, v181[0]);
    sub_223454278((uint64_t *)&v178, object[32]);
    sub_223454278((uint64_t *)&object[8], object[0]);
    sub_223454278(v151, v150);
    sub_223454278(v148, v147[0]);
    sub_223454278(v157, v156);
    sub_223454278(v154, v153[0]);
    sub_223454278(v163, v162);
    sub_223454278(v160, v159);
    sub_223454278(v169, v168);
    sub_223454278(v166, v165);
    sub_223454278(v175, v174);
    sub_223454278(v172, v171);
    sub_223454278((uint64_t *)&v143, v142);
    sub_223454278((uint64_t *)&__p[8], __p[0]);
    sub_2245664AC((unsigned __int8 *)v4 + 28, object);
    v37 = operator new(0x28uLL);
    v38 = *(_OWORD *)&object[16];
    *v37 = *(_OWORD *)object;
    v37[1] = v38;
    *((_DWORD *)v37 + 8) = *(_DWORD *)&object[32];
    *((_BYTE *)v37 + 36) = 0;
    *(_QWORD *)__p = v37;
    *(_OWORD *)&__p[8] = xmmword_22464DA90;
    *((_BYTE *)v37 + 13) = 0;
    v39 = sub_223797708((uint64_t)v134, (const void **)__p);
    v40 = *(unsigned __int8 *)v39;
    *(_BYTE *)v39 = v127;
    v127 = v40;
    v41 = (uint64_t)v39[1];
    v39[1] = v128;
    v128 = (uint64_t *)v41;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      sub_223454278((uint64_t *)&v128, v127);
      v42 = (_QWORD *)v4[1];
      if (v42)
      {
        do
        {
LABEL_9:
          v43 = v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
        goto LABEL_3;
      }
    }
    else
    {
      sub_223454278((uint64_t *)&v128, v40);
      v42 = (_QWORD *)v4[1];
      if (v42)
        goto LABEL_9;
    }
    do
    {
      v43 = (_QWORD *)v4[2];
      v48 = *v43 == (_QWORD)v4;
      v4 = v43;
    }
    while (!v48);
LABEL_3:
    ++v5;
    v4 = v43;
    if (v43 == (_QWORD *)(a1 + 80))
      goto LABEL_105;
  }
  v44 = atomic_load((unsigned __int8 *)&qword_2540CC510);
  if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC510))
  {
    sub_22455F53C(__p);
    sub_223174DE4(object, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0((uint64_t **)__p, (uint64_t)object, &qword_2540CC508);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(&qword_2540CC510);
  }
  v159 = qword_2540CC508;
  if (**(int **)(qword_2540CC508 + 56) <= 4)
  {
    v45 = *(unsigned __int8 *)(qword_2540CC508 + 72);
    v46 = sub_22322F254(qword_2540CC508, "OSLogSurrogateAppender", 1, 0);
    v47 = v46;
    v48 = !v45 && v46 == 0;
    if (!v48)
    {
      *(_QWORD *)__p = &v159;
      *(std::chrono::steady_clock::time_point *)&__p[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&__p[16] = std::chrono::system_clock::now();
      v141 = 4;
      v142 = "unknown file";
      LODWORD(v143) = 41;
      v146 = 0;
      v144 = (const char **)"unknown function";
      v145 = 0;
      v49 = **(_QWORD **)__p;
      if (*(char *)(**(_QWORD **)__p + 39) < 0)
      {
        v51 = *(const char **)(v49 + 16);
        v50 = *(_QWORD *)(v49 + 24);
      }
      else
      {
        v50 = *(unsigned __int8 *)(**(_QWORD **)__p + 39);
        v51 = (const char *)(**(_QWORD **)__p + 16);
      }
      v117 = **(_QWORD **)__p + 16;
      v52 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v53 = (const char *)&xmmword_255788F40;
      else
        v53 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v54 = byte_255788F57;
      else
        v54 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v53, v51);
      v55 = &object[8];
      if (v54 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v54 >= 0x17)
      {
        v56 = v47;
        v57 = v51;
        v58 = v49;
        v59 = v45;
        v60 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17)
          v60 = v54 | 7;
        v61 = v60 + 1;
        v55 = operator new(v60 + 1);
        *(_QWORD *)&object[24] = v61 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v55;
        *(_QWORD *)&object[16] = v54;
        v45 = v59;
        v49 = v58;
        v51 = v57;
        v47 = v56;
      }
      else
      {
        object[31] = v54;
        if (!v54)
        {
LABEL_38:
          v55[v54] = 0;
          object[32] = 1;
          v62 = &v178;
          if (v50 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v50 >= 0x17)
          {
            v63 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v50 | 7) != 0x17)
              v63 = v50 | 7;
            v64 = v63 + 1;
            v62 = operator new(v63 + 1);
            v180 = v64 | 0x8000000000000000;
            v178 = v62;
            v179 = (_BYTE *)v50;
          }
          else
          {
            HIBYTE(v180) = v50;
            if (!v50)
            {
LABEL_46:
              *((_BYTE *)v62 + v50) = 0;
              v181[0] = 1;
              v65 = *(NSObject **)object;
              if (SHIBYTE(v180) < 0)
                operator delete(v178);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v47 && *(_QWORD *)(v47 + 24))
              {
                v66 = _os_log_pack_size();
                v67 = (std::__shared_weak_count_vtbl *)operator new(v66, (std::align_val_t)8uLL);
                v68 = (std::__shared_weak_count *)operator new();
                v69 = v68;
                v68->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                v68->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v68->__shared_weak_owners_ = 0;
                v68[1].__vftable = v67;
                *(_QWORD *)object = v67;
                *(_QWORD *)&object[8] = v67;
                *(_QWORD *)&object[16] = v68;
                do
                  v71 = __ldxr(p_shared_owners);
                while (__stxr(v71 + 1, p_shared_owners));
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)&object[24] = 0;
                v178 = 0;
                do
                  v72 = __ldaxr(p_shared_owners);
                while (__stlxr(v72 - 1, p_shared_owners));
                if (!v72)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v69);
                }
                v73 = *(_QWORD *)object;
                v74 = (_DWORD *)_os_log_pack_fill();
                *v74 = 67109120;
                v74[1] = 230;
                v75 = operator new();
                v76 = *(unsigned __int8 *)(v49 + 39);
                v77 = v117;
                if ((v76 & 0x80u) != 0)
                {
                  v77 = *(_QWORD *)(v49 + 16);
                  v76 = *(_QWORD *)(v49 + 24);
                }
                *(_QWORD *)v75 = v73;
                *(_OWORD *)(v75 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v75 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v75 + 40) = v77;
                *(_QWORD *)(v75 + 48) = v76;
                *(_BYTE *)(v75 + 56) = 16;
                v165 = 0;
                v171 = v75;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v47 + 24) + 40))(*(_QWORD *)(v47 + 24), &v171);
                v78 = v171;
                v171 = 0;
                if (v78)
                {
                  v79 = *(std::__shared_weak_count **)(v78 + 32);
                  if (v79)
                  {
                    v80 = (unint64_t *)&v79->__shared_owners_;
                    do
                      v81 = __ldaxr(v80);
                    while (__stlxr(v81 - 1, v80));
                    if (!v81)
                    {
                      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                      std::__shared_weak_count::__release_weak(v79);
                    }
                  }
                  v82 = *(std::__shared_weak_count **)(v78 + 16);
                  if (v82)
                  {
                    v83 = (unint64_t *)&v82->__shared_owners_;
                    do
                      v84 = __ldaxr(v83);
                    while (__stlxr(v84 - 1, v83));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  MEMORY[0x227684CE8](v78, 0x10F0C40B62ED6C6);
                  v85 = v165;
                  v165 = 0;
                  if (v85)
                  {
                    v86 = *(std::__shared_weak_count **)(v85 + 32);
                    if (v86)
                    {
                      v87 = (unint64_t *)&v86->__shared_owners_;
                      do
                        v88 = __ldaxr(v87);
                      while (__stlxr(v88 - 1, v87));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                    v89 = *(std::__shared_weak_count **)(v85 + 16);
                    if (v89)
                    {
                      v90 = (unint64_t *)&v89->__shared_owners_;
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                    MEMORY[0x227684CE8](v85, 0x10F0C40B62ED6C6);
                  }
                }
                v92 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v93 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 - 1, v93));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v92);
                  }
                }
                v95 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v96 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v97 = __ldaxr(v96);
                  while (__stlxr(v97 - 1, v96));
                  if (!v97)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
                *(_QWORD *)object = 0xE604000100;
                v98 = (void *)_os_log_send_and_compose_impl();
                if (v98)
                  free(v98);
              }
              if (v45)
              {
                sub_22322C138((uint64_t)__p, "Only adding the first %d planes in state capture", 230);
                sub_223182C08((uint64_t)__p);
              }
              sub_223182C08((uint64_t)__p);
              v99 = v146;
              if (v146)
              {
                v100 = (unint64_t *)&v146->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                  std::__shared_weak_count::__release_weak(v99);
                }
              }
              goto LABEL_105;
            }
          }
          memmove(v62, v51, v50);
          goto LABEL_46;
        }
      }
      memmove(v55, v53, v54);
      goto LABEL_38;
    }
  }
LABEL_105:
  v135[1] = (uint64_t)v134;
  v136 = 1;
  sub_2237995F8((uint64_t)v137, (uint64_t)v131, 2, 1, 2);
  v138[1] = (uint64_t)v137;
  v139 = 1;
  sub_2237995F8((uint64_t)v125, (uint64_t)v137, 1, 1, 2);
  sub_223454278(v138, v137[0]);
  sub_223454278(v135, v134[0]);
  sub_223454278(v132, v131[0]);
  if (*(_BYTE *)(v115 + 160))
  {
    object[0] = 0;
    *(_QWORD *)&object[8] = 0;
    sub_22379A9A0((uint64_t)object, (float *)(v115 + 96));
    v102 = sub_2237978E4((uint64_t)v125, "camera_to_world");
    v103 = *(unsigned __int8 *)v102;
    *(_BYTE *)v102 = object[0];
    object[0] = v103;
    v104 = v102[1];
    v102[1] = *(uint64_t **)&object[8];
    *(_QWORD *)&object[8] = v104;
    sub_223454278((uint64_t *)&object[8], v103);
  }
  sub_224533660((uint64_t)v125);
  sub_223454278(&v126, v125[0]);
  std::mutex::unlock(v116);
  sub_224527E14((uint64_t)v122, (CFStringRef *)object);
  sub_22379AAF4((uint64_t)&v124, *(void **)object, (uint64_t)&v120);
  v105 = *(std::__shared_weak_count **)&object[8];
  if (!*(_QWORD *)&object[8])
    goto LABEL_111;
  v106 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
    if (v121 < 0)
      goto LABEL_125;
LABEL_112:
    if (v123 < 0)
LABEL_126:
      operator delete(v122[0]);
  }
  else
  {
LABEL_111:
    if ((v121 & 0x80000000) == 0)
      goto LABEL_112;
LABEL_125:
    operator delete(v120);
    if (v123 < 0)
      goto LABEL_126;
  }
  sub_2232EEEDC(&v118, (uint64_t)&v124);
  sub_223229F0C((uint64_t)"com.apple.Recon3D.Planes", 24, &v118, a2);
  v108 = v119;
  if (v119)
  {
    v109 = (unint64_t *)&v119->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
}

void sub_223798CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;

  if (LOBYTE(STACK[0x3A8]) && SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x200]);
  sub_223454278(a13, a64);
  std::mutex::unlock(a14);
  if (a55 < 0)
    operator delete(a50);
  sub_223167354((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void sub_223799130()
{
  JUMPOUT(0x223799138);
}

void sub_223799144()
{
  JUMPOUT(0x2237990B8);
}

void sub_223799154()
{
  JUMPOUT(0x22379915CLL);
}

void sub_22379916C()
{
  JUMPOUT(0x2237990A0);
}

void sub_223799178()
{
  JUMPOUT(0x223799084);
}

void sub_223799184(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *i;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  std::mutex *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _OWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v20 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = (unsigned __int8 *)a2[4];
  for (i = (unsigned __int8 *)a2[5]; v5 != i; v5 += 16)
    sub_22379AC6C((_QWORD *)(a1 + 72), v5);
  v6 = a2[1];
  v7 = a2[2];
  if (v6 != v7)
  {
    v8 = (uint64_t **)(a1 + 72);
    do
    {
      if (*(_BYTE *)(v6 + 457))
        v9 = *(_BYTE *)(v6 + 456);
      else
        v9 = -1;
      v28 = *(_QWORD *)(v6 + 16);
      v29 = *(_DWORD *)(v6 + 24);
      v10 = *(_QWORD *)(v6 + 28);
      v24 = 0;
      v25 = v10;
      v26 = *(_DWORD *)(v6 + 36);
      v22 = 0;
      v23 = 0;
      v21 = 0;
      v11 = &v24;
      if (*(_BYTE *)(v6 + 356))
        v11 = (uint64_t *)(v6 + 324);
      v12 = (uint64_t *)(v6 + 348);
      if (!*(_BYTE *)(v6 + 356))
        v12 = &v21;
      v13 = *v12;
      v14 = (uint64_t *)(v6 + 340);
      if (!*(_BYTE *)(v6 + 356))
        v14 = &v22;
      v15 = *v14;
      v16 = (uint64_t *)(v6 + 332);
      if (!*(_BYTE *)(v6 + 356))
        v16 = &v23;
      v17 = *v16;
      v18 = *v11;
      v27 = (_OWORD *)v6;
      v19 = sub_22379AD58(v8, (unsigned __int8 *)v6, &v27);
      *((_BYTE *)v19 + 44) = v9;
      v19[6] = v28;
      *((_DWORD *)v19 + 14) = v29;
      *(uint64_t *)((char *)v19 + 60) = v25;
      *((_DWORD *)v19 + 17) = v26;
      v19[9] = v18;
      v19[10] = v17;
      v6 += 464;
      v19[11] = v15;
      v19[12] = v13;
    }
    while (v6 != v7);
  }
  std::mutex::unlock(v20);
}

void sub_223799318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void sub_22379932C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void sub_223799340(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *i;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  std::mutex *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _OWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v19 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = (unsigned __int8 *)a2[4];
  for (i = (unsigned __int8 *)a2[5]; v5 != i; v5 += 16)
    sub_22379AC6C((_QWORD *)(a1 + 72), v5);
  v6 = a2[1];
  v7 = a2[2];
  if (v6 != v7)
  {
    v8 = (uint64_t **)(a1 + 72);
    do
    {
      if (*(_BYTE *)(v6 + 457) && *(_BYTE *)(v6 + 456) == 1)
      {
        v27 = *(_QWORD *)(v6 + 16);
        v28 = *(_DWORD *)(v6 + 24);
        v9 = *(_QWORD *)(v6 + 28);
        v23 = 0;
        v24 = v9;
        v25 = *(_DWORD *)(v6 + 36);
        v21 = 0;
        v22 = 0;
        v20 = 0;
        v10 = &v23;
        if (*(_BYTE *)(v6 + 356))
          v10 = (uint64_t *)(v6 + 324);
        v11 = (uint64_t *)(v6 + 348);
        if (!*(_BYTE *)(v6 + 356))
          v11 = &v20;
        v12 = *v11;
        v13 = (uint64_t *)(v6 + 340);
        if (!*(_BYTE *)(v6 + 356))
          v13 = &v21;
        v14 = *v13;
        v15 = (uint64_t *)(v6 + 332);
        if (!*(_BYTE *)(v6 + 356))
          v15 = &v22;
        v16 = *v15;
        v17 = *v10;
        v26 = (_OWORD *)v6;
        v18 = sub_22379AD58(v8, (unsigned __int8 *)v6, &v26);
        *((_BYTE *)v18 + 44) = 1;
        v18[6] = v27;
        *((_DWORD *)v18 + 14) = v28;
        *(uint64_t *)((char *)v18 + 60) = v24;
        *((_DWORD *)v18 + 17) = v25;
        v18[9] = v17;
        v18[10] = v16;
        v18[11] = v14;
        v18[12] = v12;
      }
      v6 += 464;
    }
    while (v6 != v7);
  }
  std::mutex::unlock(v19);
}

void sub_2237994E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void sub_2237994F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223799508(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC58A10;
  sub_223198030(a1 + 72, *(_QWORD **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return nullsub_30(a1);
}

void sub_223799544(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC58A10;
  sub_223198030(a1 + 72, *(_QWORD **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223799594(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(uint64_t ***)(a1 + 16);
    v3 = **(uint64_t ***)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 1;
      do
      {
        v5 = v4 - 1;
        sub_223454278(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

uint64_t sub_2237995F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  _BYTE **v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  void *exception;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v10 = (_BYTE **)(a2 + 16);
    v11 = 32 * a3;
    while (1)
    {
      v12 = *v10;
      if (**v10 != 2
        || *(_QWORD *)(*((_QWORD *)v12 + 1) + 8) - **((_QWORD **)v12 + 1) != 32
        || *(_BYTE *)sub_223799A04((uint64_t)v12, 0) != 3)
      {
        break;
      }
      v10 += 4;
      v11 -= 32;
      if (!v11)
        goto LABEL_7;
    }
    v13 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_17:
      if (a5 == 2)
        v19 = 0;
      else
        v19 = v13;
      if (a5 != 1)
        LOBYTE(v13) = 1;
      if ((v13 & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_223174DE4(&v24, "cannot create object from initializer list");
        sub_22379985C(301, (uint64_t)&v24, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24EC58AD0, (void (*)(void *))sub_2237999D4);
      }
      if (!v19)
        goto LABEL_24;
      goto LABEL_9;
    }
  }
  else
  {
LABEL_7:
    v13 = 1;
    if ((a4 & 1) == 0)
      goto LABEL_17;
  }
  if (!v13)
  {
LABEL_24:
    v20 = a2 + 32 * a3;
    *(_BYTE *)a1 = 2;
    v21 = operator new(0x18uLL);
    v21[1] = 0;
    v21[2] = 0;
    *v21 = 0;
    sub_22379A514(v21, a2, v20, (v20 - a2) >> 5);
    *(_QWORD *)(a1 + 8) = v21;
    return a1;
  }
LABEL_9:
  *(_BYTE *)a1 = 1;
  v14 = operator new(0x18uLL);
  v14[2] = 0;
  v14[1] = 0;
  *v14 = v14 + 1;
  *(_QWORD *)(a1 + 8) = v14;
  if (a3)
  {
    v15 = 32 * a3;
    v16 = (_BYTE *)(a2 + 24);
    do
    {
      v17 = *((_QWORD *)v16 - 1);
      if (*v16)
      {
        LOBYTE(v24) = *(_BYTE *)v17;
        v18 = *(_QWORD *)(v17 + 8);
        v25 = v18;
        *(_BYTE *)v17 = 0;
        *(_QWORD *)(v17 + 8) = 0;
      }
      else
      {
        sub_223799EE8((uint64_t)&v24, (unsigned __int8 *)v17);
        v18 = v25;
      }
      sub_22379A390(*(uint64_t ***)(a1 + 8), *(const void ***)(*(_QWORD *)v18 + 8), *(_QWORD *)(*(_QWORD *)v18 + 8), *(_QWORD *)v18 + 16);
      sub_223454278(&v25, v24);
      v16 += 32;
      v15 -= 32;
    }
    while (v15);
  }
  return a1;
}

void sub_2237997F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22379980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223799824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_22379985C(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 10;
  strcpy((char *)__p, "type_error");
  sub_223799B94((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &off_24EC58AB8;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &off_24EC58AF8;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_223799984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2237999D4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC58AB8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_223799A04(uint64_t a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_223799B6C((char *)a1);
    sub_223174DE4(&v6, v5);
    sub_223799B10("cannot use operator[] with a numeric argument with ", &v6, &v7);
    sub_22379985C(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24EC58AD0, (void (*)(void *))sub_2237999D4);
  }
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_223799AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

__n128 sub_223799B10@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

const char *sub_223799B6C(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_24EC58B10[v1];
}

void sub_223799B94(const void **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v4;
  size_t v5;
  unint64_t v6;
  std::string::value_type *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  const void *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  v6 = v5 + 16;
  if (v5 + 16 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    v9 = (std::string::value_type *)(v12 + 1);
    v22.__r_.__value_.__l.__size_ = v5 + 16;
    v22.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    *v12 = *(_OWORD *)"[json.exception.";
  }
  else
  {
    v9 = &v22.__r_.__value_.__s.__data_[16];
    v22.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v22.__r_.__value_.__s + 23) = v5 + 16;
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)"[json.exception.";
    if (!v5)
      goto LABEL_15;
  }
  if (v4 >= 0)
    v13 = a1;
  else
    v13 = *a1;
  memmove(v9, v13, v5);
LABEL_15:
  v9[v5] = 0;
  v14 = std::string::append(&v22, ".", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, a2);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v21;
  else
    v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v23, (const std::string::value_type *)v16, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v24, "] ", 2uLL);
  *a3 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
LABEL_28:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_29;
}

void sub_223799D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_223799E28(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC58AB8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

const char *sub_223799E6C(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_223799E74(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC58AB8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_223799EA4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_24EC58AB8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223799EE8(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;
  const void ***v14;
  const void ***v15;
  const void **v16;
  const void **v17;
  const void **v18;
  const void ***v19;
  BOOL v20;
  uint64_t *v21;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v14 = (const void ***)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = v4 + 1;
      v17 = *v14;
      v15 = v14 + 1;
      v16 = v17;
      if (v17 != (const void **)v15)
      {
        do
        {
          sub_22379A110((uint64_t **)v4, v4 + 1, v16 + 4, (uint64_t)(v16 + 4));
          v18 = (const void **)v16[1];
          if (v18)
          {
            do
            {
              v19 = (const void ***)v18;
              v18 = (const void **)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (const void ***)v16[2];
              v20 = *v19 == v16;
              v16 = (const void **)v19;
            }
            while (!v20);
          }
          v16 = (const void **)v19;
        }
        while (v19 != v15);
      }
      goto LABEL_21;
    case 2:
      v21 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_22379A290(v4, *v21, v21[1], (v21[1] - *v21) >> 4);
      goto LABEL_21;
    case 3:
      v5 = (__int128 *)*((_QWORD *)a2 + 1);
      v6 = operator new(0x18uLL);
      v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_223197FA4(v6, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v5 + 2);
        *v6 = v7;
      }
      goto LABEL_21;
    case 4:
      v4 = (_QWORD *)a2[8];
      goto LABEL_21;
    case 5:
    case 6:
    case 7:
      v4 = (_QWORD *)*((_QWORD *)a2 + 1);
      goto LABEL_21;
    case 8:
      v8 = *((_QWORD *)a2 + 1);
      v4 = operator new(0x20uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v10 = *(const void **)v8;
      v9 = *(_QWORD *)(v8 + 8);
      v11 = v9 - *(_QWORD *)v8;
      if (v9 != *(_QWORD *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0)
          sub_22316E078();
        v12 = (char *)operator new(v9 - *(_QWORD *)v8);
        *v4 = v12;
        v13 = &v12[v11];
        v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_21:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_22379A0A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22379A0B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22379A0CC(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_22379A110(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_223453BB8(a1, a2, &v15, &v14, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v9 = (uint64_t *)operator new(0x48uLL);
    v7 = v9;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_223197FA4((_BYTE *)v9 + 32, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      v9[6] = *(_QWORD *)(a4 + 16);
    }
    sub_223799EE8(v7 + 7, a4 + 24);
    v10 = v15;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    *v8 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    sub_2231A9A8C(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_22379A200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22379A238((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22379A214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  sub_22379A238((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_22379A238(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_223454278((uint64_t *)(v2 + 64), *(unsigned __int8 *)(v2 + 56));
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *sub_22379A290(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *i;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_223452694();
    result = operator new(16 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (i = result; a2 != a3; i += 2)
    {
      sub_223799EE8(result, a2);
      a2 += 16;
      result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_22379A35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_223454170(&a9);
  _Unwind_Resume(a1);
}

void sub_22379A370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_223799594((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_223454170(&a9);
  _Unwind_Resume(a1);
}

uint64_t **sub_22379A390(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  const void *v10;
  const void *v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  const void *v18;
  size_t v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v8 = a1 + 1;
  v7 = a1[1];
  if (!v7)
  {
    v12 = a1 + 1;
    goto LABEL_29;
  }
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v11 = a2[1];
  do
  {
    while (1)
    {
      v12 = (uint64_t **)v7;
      v15 = v7[4];
      v13 = v7 + 4;
      v14 = (_QWORD *)v15;
      v16 = *((char *)v13 + 23);
      v17 = v16 >= 0 ? v13 : v14;
      v18 = v16 >= 0 ? (const void *)*((unsigned __int8 *)v13 + 23) : (const void *)v13[1];
      v19 = (size_t)(v18 >= v11 ? v11 : v18);
      v20 = memcmp(v10, v17, v19);
      if (v20)
        break;
      if (v11 >= v18)
        goto LABEL_22;
LABEL_8:
      v7 = *v12;
      v8 = v12;
      if (!*v12)
        goto LABEL_29;
    }
    if (v20 < 0)
      goto LABEL_8;
LABEL_22:
    v21 = memcmp(v17, v10, v19);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
        return v12;
    }
    else if (v18 >= v11)
    {
      return v12;
    }
    v7 = v12[1];
  }
  while (v7);
  v8 = v12 + 1;
LABEL_29:
  v22 = (uint64_t *)v12;
  v12 = (uint64_t **)operator new(0x48uLL);
  *((_OWORD *)v12 + 2) = *(_OWORD *)a3;
  v12[6] = *(uint64_t **)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *((_BYTE *)v12 + 56) = *(_BYTE *)a4;
  v12[8] = *(uint64_t **)(a4 + 8);
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *v12 = 0;
  v12[1] = 0;
  v12[2] = v22;
  *v8 = (uint64_t *)v12;
  v23 = (uint64_t *)**a1;
  v24 = (uint64_t *)v12;
  if (v23)
  {
    *a1 = v23;
    v24 = *v8;
  }
  sub_2231A9A8C(a1[1], v24);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v12;
}

void sub_22379A514(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14[8];
  uint64_t v15;

  if (a4)
  {
    if (a4 >> 60)
      sub_223452694();
    v8 = (char *)operator new(16 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[16 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v13 = *(_QWORD *)(a2 + 16);
        if (*(_BYTE *)(a2 + 24))
        {
          v10 = *(_BYTE *)v13;
          v11 = *(_QWORD *)(v13 + 8);
          *(_BYTE *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
        }
        else
        {
          sub_223799EE8((uint64_t)v14, (unsigned __int8 *)v13);
          v10 = v14[0];
          v11 = v15;
        }
        v12 = (unsigned __int8 *)&v8[v9];
        *v12 = v10;
        *((_QWORD *)v12 + 1) = v11;
        v14[0] = 0;
        v15 = 0;
        sub_223454278(&v15, 0);
        a2 += 32;
        v9 += 16;
      }
      while (a2 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_22379A60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_223454170(&a9);
  _Unwind_Resume(a1);
}

void sub_22379A620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 16)
    sub_223454278((uint64_t *)(v10 + v11 - 8), *(unsigned __int8 *)(v10 + v11 - 16));
  *(_QWORD *)(v9 + 8) = v10;
  sub_223454170(&a9);
  _Unwind_Resume(a1);
}

uint64_t **sub_22379A654(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  char *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = (char *)operator new(0x48uLL);
  v22 = v21 + 32;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_223197FA4(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    *((_QWORD *)v21 + 6) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[56] = 0;
  *((_QWORD *)v21 + 8) = 0;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v11;
  *v7 = (uint64_t *)v21;
  v25 = (uint64_t *)**a1;
  v26 = (uint64_t *)v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_2231A9A8C(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_22379A7D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22379A7E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC58A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22379A7F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC58A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22379A824(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t **sub_22379A834(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  const void *v17;
  size_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v11 = a1 + 1;
    goto LABEL_29;
  }
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v10 = a2[1];
  do
  {
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = v6[4];
      v12 = v6 + 4;
      v13 = (_QWORD *)v14;
      v15 = *((char *)v12 + 23);
      v16 = v15 >= 0 ? v12 : v13;
      v17 = v15 >= 0 ? (const void *)*((unsigned __int8 *)v12 + 23) : (const void *)v12[1];
      v18 = (size_t)(v17 >= v10 ? v10 : v17);
      v19 = memcmp(v9, v16, v18);
      if (v19)
        break;
      if (v10 >= v17)
        goto LABEL_22;
LABEL_8:
      v6 = *v11;
      v7 = v11;
      if (!*v11)
        goto LABEL_29;
    }
    if (v19 < 0)
      goto LABEL_8;
LABEL_22:
    v20 = memcmp(v16, v9, v18);
    if (v20)
    {
      if ((v20 & 0x80000000) == 0)
        return v11;
    }
    else if (v17 >= v10)
    {
      return v11;
    }
    v6 = v11[1];
  }
  while (v6);
  v7 = v11 + 1;
LABEL_29:
  v21 = (uint64_t *)v11;
  v11 = (uint64_t **)operator new(0x48uLL);
  v22 = *a4;
  v23 = (uint64_t *)*((_QWORD *)*a4 + 2);
  *((_OWORD *)v11 + 2) = **a4;
  v11[6] = v23;
  *v22 = 0;
  v22[1] = 0;
  v22[2] = 0;
  *((_BYTE *)v11 + 56) = 0;
  v11[8] = 0;
  *v11 = 0;
  v11[1] = 0;
  v11[2] = v21;
  *v7 = (uint64_t *)v11;
  v24 = (uint64_t *)**a1;
  v25 = (uint64_t *)v11;
  if (v24)
  {
    *a1 = v24;
    v25 = *v7;
  }
  sub_2231A9A8C(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v11;
}

double sub_22379A9A0(uint64_t a1, float *a2)
{
  _QWORD *v4;
  double *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double result;

  *(_BYTE *)a1 = 2;
  v4 = operator new(0x18uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  v5 = (double *)operator new(0x100uLL);
  v6 = a2[1];
  v5[1] = *a2;
  v5[3] = v6;
  v7 = a2[3];
  v5[5] = a2[2];
  v5[7] = v7;
  v8 = a2[5];
  v5[9] = a2[4];
  v5[11] = v8;
  v9 = a2[7];
  v5[13] = a2[6];
  v5[15] = v9;
  v10 = a2[9];
  v5[17] = a2[8];
  v5[19] = v10;
  v11 = a2[11];
  v5[21] = a2[10];
  v5[23] = v11;
  v12 = a2[13];
  v5[25] = a2[12];
  v5[27] = v12;
  v13 = a2[15];
  v5[29] = a2[14];
  v4[2] = v5 + 32;
  *(_BYTE *)v5 = 7;
  *((_BYTE *)v5 + 16) = 7;
  *((_BYTE *)v5 + 32) = 7;
  *((_BYTE *)v5 + 48) = 7;
  *((_BYTE *)v5 + 64) = 7;
  *((_BYTE *)v5 + 80) = 7;
  *((_BYTE *)v5 + 96) = 7;
  *((_BYTE *)v5 + 112) = 7;
  *((_BYTE *)v5 + 128) = 7;
  *((_BYTE *)v5 + 144) = 7;
  *((_BYTE *)v5 + 160) = 7;
  *((_BYTE *)v5 + 176) = 7;
  *((_BYTE *)v5 + 192) = 7;
  *((_BYTE *)v5 + 208) = 7;
  *((_BYTE *)v5 + 224) = 7;
  result = v13;
  *((_BYTE *)v5 + 240) = 7;
  v5[31] = v13;
  *v4 = v5;
  v4[1] = v5 + 32;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

void sub_22379AAE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_22379AAF4(uint64_t a1, void *key, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_224527E14(a3, (CFStringRef *)&value);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_22379AC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22379AC6C(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;
  char v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;

  v2 = a1 + 1;
  v3 = a1[1];
  if (v3)
  {
    v6 = a1 + 1;
    do
    {
      v7 = sub_22319835C((unsigned __int8 *)(v3 + 28), a2);
      if (v7 >= 0)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7 >= 0)
        v6 = (_QWORD *)v3;
      v3 = *v8;
    }
    while (*v8);
    if (v6 != v2 && (sub_22319835C(a2, (unsigned __int8 *)v6 + 28) & 0x80) == 0)
    {
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        v11 = v6;
        do
        {
          v10 = (_QWORD *)v11[2];
          v12 = *v10 == (_QWORD)v11;
          v11 = v10;
        }
        while (!v12);
      }
      if ((_QWORD *)*a1 == v6)
        *a1 = v10;
      v13 = (uint64_t *)a1[1];
      --a1[2];
      sub_2231AFE60(v13, v6);
      operator delete(v6);
    }
  }
}

uint64_t *sub_22379AD58(uint64_t **a1, unsigned __int8 *a2, _OWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x68uLL);
    *(_OWORD *)((char *)v10 + 28) = **a3;
    *(_OWORD *)((char *)v10 + 60) = 0u;
    *(_OWORD *)(v10 + 11) = 0u;
    *(_OWORD *)((char *)v10 + 76) = 0u;
    *(_OWORD *)((char *)v10 + 44) = 0u;
    *((_DWORD *)v10 + 17) = 1065353216;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v11 = (uint64_t *)**a1;
    v12 = v10;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_2231A9A8C(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (unsigned __int8 *)v5 + 28;
      if ((sub_22319835C(a2, (unsigned __int8 *)v5 + 28) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((sub_22319835C(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

void sub_22379AE60(uint64_t a1, uint64_t a2)
{
  void *v2;
  CFStringRef v5;
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  CFTypeID TypeID;
  unint64_t Count;
  unint64_t v14;
  CFIndex v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  const char *v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  const char *v32;
  unsigned __int8 v33;
  uint64_t v34;
  unint64_t v35;
  const void *ValueAtIndex;
  int v37;
  char *v38;
  _BYTE *v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _DWORD *v47;
  int64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  unsigned __int8 v59;
  const char *v60;
  size_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  size_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  CFStringRef v83;
  std::__shared_weak_count *isa;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *data;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unsigned __int8 v107;
  const char *v108;
  size_t v109;
  void *v110;
  const char *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  size_t v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  CFStringRef v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 __p;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v160;
  const char *v161;
  int v162;
  const char *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t valuePtr;
  void *object;
  void *v168[2];
  __int128 v169;
  void *v170;
  size_t v171;
  unint64_t v172;
  char v173;
  CFStringRef v174;
  std::__shared_weak_count *v175;
  void *value;

  HIBYTE(rep) = 11;
  strcpy((char *)&__p, "translation");
  sub_224527BAC((uint64_t)&__p, &v174);
  v5 = v174;
  v7 = *(CFDictionaryRef *)a2;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_6:
    if (v7)
      goto LABEL_7;
LABEL_16:
    v16 = 0;
    v11 = 0;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    goto LABEL_16;
LABEL_7:
  value = 0;
  if (!v5 || !CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a2, v5, (const void **)&value))
    goto LABEL_16;
  v11 = value;
  if (!value)
  {
    v16 = 0;
    goto LABEL_17;
  }
  TypeID = CFArrayGetTypeID();
  if (CFGetTypeID(v11) != TypeID)
    goto LABEL_16;
  Count = CFArrayGetCount((CFArrayRef)v11);
  v14 = Count;
  if ((Count & 0x8000000000000000) != 0)
    goto LABEL_16;
  object = 0;
  v168[0] = 0;
  v168[1] = 0;
  if (!Count)
  {
    v2 = 0;
    v11 = 0;
    v16 = 1;
    goto LABEL_17;
  }
  if (Count >> 62)
    sub_22316E078();
  v15 = 0;
  object = operator new(4 * Count);
  v168[0] = object;
  v168[1] = (char *)object + 4 * v14;
  while (1)
  {
    v34 = a1;
    v35 = v14;
    if (CFArrayGetCount((CFArrayRef)v11) <= v15)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v11, v15);
    if (!ValueAtIndex)
      break;
    v2 = (void *)CFNumberGetTypeID();
    if ((void *)CFGetTypeID(ValueAtIndex) != v2)
      break;
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberFloatType, &valuePtr);
    v37 = valuePtr;
    v38 = (char *)v168[0];
    if (v168[0] >= v168[1])
    {
      v39 = object;
      v40 = (char *)v168[0] - (char *)object;
      v41 = ((char *)v168[0] - (char *)object) >> 2;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62)
        sub_22316E078();
      v43 = (char *)v168[1] - (char *)object;
      if (((char *)v168[1] - (char *)object) >> 1 > v42)
        v42 = v43 >> 1;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 >> 62)
          sub_223174E94();
        v45 = v44;
        v46 = operator new(4 * v44);
        v44 = v45;
        v47 = &v46[4 * v41];
        *v47 = v37;
        v2 = v47 + 1;
        v48 = v38 - v39;
        if (v38 != v39)
        {
LABEL_53:
          v49 = v48 - 4;
          if (v49 < 0x2C)
          {
            v14 = v35;
            goto LABEL_61;
          }
          v50 = v38 - v46 - v40;
          v14 = v35;
          if (v50 < 0x20)
            goto LABEL_258;
          v51 = (v49 >> 2) + 1;
          v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
          v53 = &v38[-v52];
          v47 = (_DWORD *)((char *)v47 - v52);
          v54 = &v46[4 * v41 - 16];
          v55 = v38 - 16;
          v56 = v51 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v57 = *(_OWORD *)v55;
            *(v54 - 1) = *((_OWORD *)v55 - 1);
            *v54 = v57;
            v54 -= 2;
            v55 -= 32;
            v56 -= 8;
          }
          while (v56);
          v38 = v53;
          if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_258:
            do
            {
LABEL_61:
              v58 = *((_DWORD *)v38 - 1);
              v38 -= 4;
              *--v47 = v58;
            }
            while (v38 != v39);
          }
LABEL_62:
          object = v47;
          v168[0] = v2;
          v168[1] = &v46[4 * v44];
          if (v39)
            operator delete(v39);
          goto LABEL_39;
        }
      }
      else
      {
        v46 = 0;
        v47 = (_DWORD *)(4 * v41);
        *(_DWORD *)(4 * v41) = valuePtr;
        v2 = (void *)(4 * v41 + 4);
        v48 = v38 - v39;
        if (v38 != v39)
          goto LABEL_53;
      }
      v14 = v35;
      goto LABEL_62;
    }
    *(_DWORD *)v168[0] = valuePtr;
    v2 = v38 + 4;
LABEL_39:
    a1 = v34;
    v168[0] = v2;
    if (++v15 == v14)
    {
      v16 = 1;
      v11 = object;
      goto LABEL_17;
    }
  }
  if (object)
  {
    v168[0] = object;
    operator delete(object);
  }
  v16 = 0;
  v11 = 0;
  a1 = v34;
LABEL_17:
  v17 = v175;
  if (v175)
  {
    v18 = (unint64_t *)&v175->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (SHIBYTE(rep) < 0)
        goto LABEL_31;
LABEL_22:
      if (v16)
        goto LABEL_23;
LABEL_32:
      sub_22379C1D8(&valuePtr);
      if (**(int **)(valuePtr + 56) > 4)
        goto LABEL_147;
      v27 = *(unsigned __int8 *)(valuePtr + 72);
      v28 = sub_22322F254(valuePtr, "OSLogSurrogateAppender", 1, 0);
      v29 = v28;
      if (!v27 && !v28)
        goto LABEL_147;
      *(_QWORD *)&__p = &valuePtr;
      *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v160 = 4;
      v161 = "unknown file";
      v162 = 42;
      v164 = 0;
      v165 = 0;
      v163 = "unknown function";
      v30 = *(_QWORD *)__p;
      if (*(char *)(*(_QWORD *)__p + 39) < 0)
      {
        v32 = *(const char **)(v30 + 16);
        v31 = *(_QWORD *)(v30 + 24);
        v156 = *(_QWORD *)__p + 16;
        v59 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v59 & 1) != 0)
          goto LABEL_66;
      }
      else
      {
        v31 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
        v32 = (const char *)(*(_QWORD *)__p + 16);
        v156 = (uint64_t)v32;
        v33 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v33 & 1) != 0)
          goto LABEL_66;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
        if ((_BYTE)v169 && SHIBYTE(v168[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_66:
      if (byte_255788F57 >= 0)
        v60 = (const char *)&xmmword_255788F40;
      else
        v60 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v61 = byte_255788F57;
      else
        v61 = *((_QWORD *)&xmmword_255788F40 + 1);
      object = os_log_create(v60, v32);
      v62 = v168;
      if (v61 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v61 >= 0x17)
      {
        v63 = v32;
        v64 = v30;
        v65 = v27;
        v66 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v61 | 7) != 0x17)
          v66 = v61 | 7;
        v67 = v66 + 1;
        v62 = operator new(v66 + 1);
        v168[1] = (void *)v61;
        *(_QWORD *)&v169 = v67 | 0x8000000000000000;
        v168[0] = v62;
        v27 = v65;
        v30 = v64;
        v32 = v63;
      }
      else
      {
        BYTE7(v169) = v61;
        if (!v61)
        {
LABEL_80:
          *((_BYTE *)v62 + v61) = 0;
          BYTE8(v169) = 1;
          v68 = &v170;
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v31 >= 0x17)
          {
            v69 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v69 = v31 | 7;
            v70 = v69 + 1;
            v68 = operator new(v69 + 1);
            v171 = v31;
            v172 = v70 | 0x8000000000000000;
            v170 = v68;
          }
          else
          {
            HIBYTE(v172) = v31;
            if (!v31)
              goto LABEL_88;
          }
          memmove(v68, v32, v31);
LABEL_88:
          *((_BYTE *)v68 + v31) = 0;
          v173 = 1;
          v71 = object;
          if (SHIBYTE(v172) < 0)
            operator delete(v170);
          if (BYTE8(v169) && SBYTE7(v169) < 0)
            operator delete(v168[0]);
          if (object)
            os_release(object);
          if (v29 && *(_QWORD *)(v29 + 24))
          {
            v72 = _os_log_pack_size();
            v73 = (std::__shared_weak_count_vtbl *)operator new(v72, (std::align_val_t)8uLL);
            v74 = (std::__shared_weak_count *)operator new();
            v75 = v74;
            v74->__shared_owners_ = 0;
            v76 = (unint64_t *)&v74->__shared_owners_;
            v74->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v74->__shared_weak_owners_ = 0;
            v74[1].__vftable = v73;
            object = v73;
            v168[0] = v73;
            v168[1] = v74;
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
            v169 = 0uLL;
            v170 = 0;
            do
              v78 = __ldaxr(v76);
            while (__stlxr(v78 - 1, v76));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v75);
            }
            v79 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v80 = operator new();
            v81 = *(unsigned __int8 *)(v30 + 39);
            v82 = v156;
            if ((v81 & 0x80u) != 0)
            {
              v82 = *(_QWORD *)(v30 + 16);
              v81 = *(_QWORD *)(v30 + 24);
            }
            *(_QWORD *)v80 = v79;
            *(_OWORD *)(v80 + 8) = *(_OWORD *)v168;
            v168[0] = 0;
            v168[1] = 0;
            *(_OWORD *)(v80 + 24) = v169;
            v169 = 0uLL;
            *(_QWORD *)(v80 + 40) = v82;
            *(_QWORD *)(v80 + 48) = v81;
            *(_BYTE *)(v80 + 56) = 16;
            value = 0;
            v174 = (CFStringRef)v80;
            (*(void (**)(_QWORD, CFStringRef *))(**(_QWORD **)(v29 + 24) + 40))(*(_QWORD *)(v29 + 24), &v174);
            v83 = v174;
            v174 = 0;
            if (v83)
            {
              isa = (std::__shared_weak_count *)v83[1].isa;
              if (isa)
              {
                v85 = (unint64_t *)&isa->__shared_owners_;
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 - 1, v85));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))isa->__on_zero_shared)(isa);
                  std::__shared_weak_count::__release_weak(isa);
                }
              }
              data = (std::__shared_weak_count *)v83->data;
              if (data)
              {
                v88 = (unint64_t *)&data->__shared_owners_;
                do
                  v89 = __ldaxr(v88);
                while (__stlxr(v89 - 1, v88));
                if (!v89)
                {
                  ((void (*)(std::__shared_weak_count *))data->__on_zero_shared)(data);
                  std::__shared_weak_count::__release_weak(data);
                }
              }
              MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
              v90 = value;
              value = 0;
              if (v90)
              {
                v91 = (std::__shared_weak_count *)*((_QWORD *)v90 + 4);
                if (v91)
                {
                  v92 = (unint64_t *)&v91->__shared_owners_;
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
                v94 = (std::__shared_weak_count *)*((_QWORD *)v90 + 2);
                if (v94)
                {
                  v95 = (unint64_t *)&v94->__shared_owners_;
                  do
                    v96 = __ldaxr(v95);
                  while (__stlxr(v96 - 1, v95));
                  if (!v96)
                  {
                    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                    std::__shared_weak_count::__release_weak(v94);
                  }
                }
                MEMORY[0x227684CE8](v90, 0x10F0C40B62ED6C6);
              }
            }
            v97 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
            if (*((_QWORD *)&v169 + 1))
            {
              v98 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
            v100 = (std::__shared_weak_count *)v168[1];
            if (v168[1])
            {
              v101 = (unint64_t *)((char *)v168[1] + 8);
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
          }
          else
          {
            os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
            LOWORD(object) = 0;
            v103 = (void *)_os_log_send_and_compose_impl();
            if (v103)
              free(v103);
          }
          if (v27)
          {
            sub_22322C138((uint64_t)&__p, "UnwrapPose: Received a dictionary that does not contain a translation vector");
            sub_223182C08((uint64_t)&__p);
          }
          sub_223182C08((uint64_t)&__p);
          v104 = v165;
          if (v165)
          {
            v105 = (unint64_t *)&v165->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
LABEL_147:
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 64) = 0;
          return;
        }
      }
      memmove(v62, v60, v61);
      goto LABEL_80;
    }
  }
  if ((SHIBYTE(rep) & 0x80000000) == 0)
    goto LABEL_22;
LABEL_31:
  operator delete((void *)__p);
  if (!v16)
    goto LABEL_32;
LABEL_23:
  if ((unint64_t)((_BYTE *)v2 - (_BYTE *)v11) > 0xB)
  {
    v157 = *(_QWORD *)v11;
    v26 = v11[2];
    operator delete(v11);
    *(_OWORD *)a1 = xmmword_22464DB6C;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_22464DB7C;
    *(_OWORD *)(a1 + 32) = xmmword_22464DB8C;
    *(_DWORD *)(a1 + 56) = v26;
    *(_QWORD *)(a1 + 48) = v157;
    *(_DWORD *)(a1 + 60) = 1065353216;
    *(_BYTE *)(a1 + 64) = 1;
    return;
  }
  sub_22379C1D8(&valuePtr);
  if (**(int **)(valuePtr + 56) > 4)
    goto LABEL_231;
  v20 = *(unsigned __int8 *)(valuePtr + 72);
  v21 = sub_22322F254(valuePtr, "OSLogSurrogateAppender", 1, 0);
  v22 = v21;
  if (!v20 && !v21)
    goto LABEL_231;
  *(_QWORD *)&__p = &valuePtr;
  *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v160 = 4;
  v161 = "unknown file";
  v162 = 36;
  v164 = 0;
  v165 = 0;
  v163 = "unknown function";
  v23 = *(_QWORD *)__p;
  v155 = *(_QWORD *)__p;
  if (*(char *)(*(_QWORD *)__p + 39) < 0)
  {
    v25 = *(const char **)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
  }
  else
  {
    v24 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
    v25 = (const char *)(*(_QWORD *)__p + 16);
  }
  v154 = *(_QWORD *)__p + 16;
  v107 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v169 && SHIBYTE(v168[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v108 = (const char *)&xmmword_255788F40;
  else
    v108 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v109 = byte_255788F57;
  else
    v109 = *((_QWORD *)&xmmword_255788F40 + 1);
  object = os_log_create(v108, v25);
  v110 = v168;
  if (v109 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v109 >= 0x17)
  {
    v111 = v25;
    v112 = v20;
    v113 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v109 | 7) != 0x17)
      v113 = v109 | 7;
    v114 = v113 + 1;
    v110 = operator new(v113 + 1);
    v168[1] = (void *)v109;
    *(_QWORD *)&v169 = v114 | 0x8000000000000000;
    v168[0] = v110;
    v20 = v112;
    v25 = v111;
    goto LABEL_163;
  }
  BYTE7(v169) = v109;
  if (v109)
LABEL_163:
    memmove(v110, v108, v109);
  *((_BYTE *)v110 + v109) = 0;
  BYTE8(v169) = 1;
  v115 = &v170;
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v24 >= 0x17)
  {
    v116 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v116 = v24 | 7;
    v117 = v116 + 1;
    v115 = operator new(v116 + 1);
    v171 = v24;
    v172 = v117 | 0x8000000000000000;
    v170 = v115;
    goto LABEL_171;
  }
  HIBYTE(v172) = v24;
  if (v24)
LABEL_171:
    memmove(v115, v25, v24);
  *((_BYTE *)v115 + v24) = 0;
  v173 = 1;
  v118 = object;
  if (SHIBYTE(v172) < 0)
    operator delete(v170);
  if (BYTE8(v169) && SBYTE7(v169) < 0)
    operator delete(v168[0]);
  if (object)
    os_release(object);
  if (v22 && *(_QWORD *)(v22 + 24))
  {
    v119 = _os_log_pack_size();
    v120 = (std::__shared_weak_count_vtbl *)operator new(v119, (std::align_val_t)8uLL);
    v121 = (std::__shared_weak_count *)operator new();
    v122 = v121;
    v121->__shared_owners_ = 0;
    v123 = (unint64_t *)&v121->__shared_owners_;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v120;
    object = v120;
    v168[0] = v120;
    v168[1] = v121;
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
    v169 = 0uLL;
    v170 = 0;
    do
      v125 = __ldaxr(v123);
    while (__stlxr(v125 - 1, v123));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v122);
    }
    v126 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v127 = operator new();
    v128 = *(unsigned __int8 *)(v155 + 39);
    v129 = v154;
    if ((v128 & 0x80u) != 0)
    {
      v129 = *(_QWORD *)(v155 + 16);
      v128 = *(_QWORD *)(v155 + 24);
    }
    *(_QWORD *)v127 = v126;
    *(_OWORD *)(v127 + 8) = *(_OWORD *)v168;
    v168[0] = 0;
    v168[1] = 0;
    *(_OWORD *)(v127 + 24) = v169;
    v169 = 0uLL;
    *(_QWORD *)(v127 + 40) = v129;
    *(_QWORD *)(v127 + 48) = v128;
    *(_BYTE *)(v127 + 56) = 16;
    value = 0;
    v174 = (CFStringRef)v127;
    (*(void (**)(_QWORD, CFStringRef *))(**(_QWORD **)(v22 + 24) + 40))(*(_QWORD *)(v22 + 24), &v174);
    v130 = v174;
    v174 = 0;
    if (v130)
    {
      v131 = (std::__shared_weak_count *)v130[1].isa;
      if (v131)
      {
        v132 = (unint64_t *)&v131->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      v134 = (std::__shared_weak_count *)v130->data;
      if (v134)
      {
        v135 = (unint64_t *)&v134->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      MEMORY[0x227684CE8](v130, 0x10F0C40B62ED6C6);
      v137 = value;
      value = 0;
      if (v137)
      {
        v138 = (std::__shared_weak_count *)*((_QWORD *)v137 + 4);
        if (v138)
        {
          v139 = (unint64_t *)&v138->__shared_owners_;
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
        v141 = (std::__shared_weak_count *)*((_QWORD *)v137 + 2);
        if (v141)
        {
          v142 = (unint64_t *)&v141->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        MEMORY[0x227684CE8](v137, 0x10F0C40B62ED6C6);
      }
    }
    v144 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    if (*((_QWORD *)&v169 + 1))
    {
      v145 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v147 = (std::__shared_weak_count *)v168[1];
    if (v168[1])
    {
      v148 = (unint64_t *)((char *)v168[1] + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
  }
  else
  {
    os_log_type_enabled(v118, OS_LOG_TYPE_ERROR);
    LOWORD(object) = 0;
    v150 = (void *)_os_log_send_and_compose_impl();
    if (v150)
      free(v150);
  }
  if (v20)
  {
    sub_22322C138((uint64_t)&__p, "UnwrapPose: Received an invalid translation vector");
    sub_223182C08((uint64_t)&__p);
  }
  sub_223182C08((uint64_t)&__p);
  v151 = v165;
  if (v165)
  {
    v152 = (unint64_t *)&v165->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
LABEL_231:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (v11)
    operator delete(v11);
}

void sub_22379BF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,void *a29,int a30,__int16 a31,char a32,char a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;

  if (a34 && a33 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  if (v38)
    operator delete(v38);
  _Unwind_Resume(a1);
}

void sub_22379C1D8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC520);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC520))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC518);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC520);
  }
  *a1 = qword_2540CC518;
}

void sub_22379C274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC520);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC520);
  _Unwind_Resume(a1);
}

void sub_22379C2CC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  int v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  const char *v72;
  size_t v73;
  unsigned __int8 v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  const char *v80;
  size_t v81;
  unsigned __int8 v82;
  const char *v83;
  size_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  size_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  int v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unsigned __int8 v128;
  const char *v129;
  size_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  size_t v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  int v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  unint64_t *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  char v175;
  unint64_t v176;
  char v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  const char *v182;
  size_t v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  const char *v186;
  size_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  size_t v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  int v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unsigned __int16 v231;
  unsigned __int16 v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  const char *v237;
  size_t v238;
  unsigned __int8 v239;
  unsigned __int8 v240;
  const char *v241;
  size_t v242;
  _BYTE *v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  NSObject *v249;
  size_t v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  int v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  void *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  const char *v289;
  const char *v290;
  const char *v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  int v299;
  int v300;
  int v301;
  uint64_t v302;
  char v303;
  char v304;
  char v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  uint64_t *v313;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v315;
  int v316;
  const char *v317;
  int v318;
  const char *v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  uint64_t v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  _BYTE v325[64];
  char v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  char v329;
  _BYTE __p[24];
  __int128 v331;
  void *v332;
  size_t v333;
  unint64_t v334;
  char v335;
  uint64_t v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  _OWORD v344[2];
  uint64_t v345;

  v345 = *MEMORY[0x24BDAC8D0];
  v338 = xmmword_22464DB6C;
  v339 = *(_OWORD *)algn_22464DB7C;
  v340 = xmmword_22464DB8C;
  v341 = unk_22464DB9C;
  __p[23] = 10;
  strcpy(__p, "plane_pose");
  sub_22379EC6C(&v327, a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v329)
      goto LABEL_3;
LABEL_11:
    v8 = 0;
    v7 = 0;
    v9 = 1;
    goto LABEL_110;
  }
  if (!v329)
    goto LABEL_11;
LABEL_3:
  sub_22319ED0C(&v323, (uint64_t)&v327);
  sub_22379AE60((uint64_t)v325, (uint64_t)&v323);
  v4 = v324;
  if (!v324)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v324->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v326)
    {
LABEL_8:
      v7 = v325[0];
      v342 = *(_OWORD *)&v325[1];
      v343 = *(_OWORD *)&v325[17];
      v344[0] = *(_OWORD *)&v325[33];
      *(_OWORD *)((char *)v344 + 15) = *(_OWORD *)&v325[48];
      v8 = 1;
      if (!v329)
        goto LABEL_109;
LABEL_104:
      v62 = v328;
      if (v328)
      {
        v63 = (unint64_t *)&v328->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      goto LABEL_109;
    }
  }
  else
  {
LABEL_7:
    if (v326)
      goto LABEL_8;
  }
  sub_22379C1D8(&v322);
  if (**(int **)(v322 + 56) <= 4)
  {
    v10 = *(unsigned __int8 *)(v322 + 72);
    v11 = sub_22322F254(v322, "OSLogSurrogateAppender", 1, 0);
    v12 = v11;
    if (v10 || v11 != 0)
    {
      v306 = v10;
      v313 = &v322;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v315 = std::chrono::system_clock::now().__d_.__rep_;
      v316 = 4;
      v317 = "unknown file";
      v318 = 67;
      v320 = 0;
      v321 = 0;
      v319 = "unknown function";
      v14 = (const char *)(v322 + 16);
      v297 = v322 + 16;
      v302 = v322;
      if (*(char *)(v322 + 39) < 0)
      {
        v14 = *(const char **)(v322 + 16);
        v15 = *(_QWORD *)(v322 + 24);
      }
      else
      {
        v15 = *(unsigned __int8 *)(v322 + 39);
      }
      v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
        if ((_BYTE)v331 && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v17 = (const char *)&xmmword_255788F40;
      else
        v17 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v18 = byte_255788F57;
      else
        v18 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)__p = os_log_create(v17, v14);
      v19 = &__p[8];
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v18 >= 0x17)
      {
        v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v20 = v18 | 7;
        v21 = v20 + 1;
        v19 = operator new(v20 + 1);
        *(_QWORD *)&__p[16] = v18;
        *(_QWORD *)&v331 = v21 | 0x8000000000000000;
        *(_QWORD *)&__p[8] = v19;
      }
      else
      {
        BYTE7(v331) = v18;
        if (!v18)
        {
LABEL_36:
          v19[v18] = 0;
          BYTE8(v331) = 1;
          v22 = &v332;
          if (v15 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v15 >= 0x17)
          {
            v23 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v15 | 7) != 0x17)
              v23 = v15 | 7;
            v24 = v23 + 1;
            v22 = operator new(v23 + 1);
            v333 = v15;
            v334 = v24 | 0x8000000000000000;
            v332 = v22;
          }
          else
          {
            HIBYTE(v334) = v15;
            if (!v15)
              goto LABEL_44;
          }
          memmove(v22, v14, v15);
LABEL_44:
          *((_BYTE *)v22 + v15) = 0;
          v335 = 1;
          v25 = *(NSObject **)__p;
          if (SHIBYTE(v334) < 0)
            operator delete(v332);
          if (BYTE8(v331) && SBYTE7(v331) < 0)
            operator delete(*(void **)&__p[8]);
          if (*(_QWORD *)__p)
            os_release(*(void **)__p);
          if (v12 && *(_QWORD *)(v12 + 24))
          {
            v26 = _os_log_pack_size();
            v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
            v28 = (std::__shared_weak_count *)operator new();
            v29 = v28;
            v28->__shared_owners_ = 0;
            v30 = (unint64_t *)&v28->__shared_owners_;
            v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v28->__shared_weak_owners_ = 0;
            v28[1].__vftable = v27;
            *(_QWORD *)__p = v27;
            *(_QWORD *)&__p[8] = v27;
            *(_QWORD *)&__p[16] = v28;
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
            v331 = 0uLL;
            v332 = 0;
            do
              v32 = __ldaxr(v30);
            while (__stlxr(v32 - 1, v30));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v29);
            }
            v33 = *(_QWORD *)__p;
            *(_WORD *)_os_log_pack_fill() = 0;
            v34 = operator new();
            v35 = *(unsigned __int8 *)(v302 + 39);
            v36 = v297;
            if ((v35 & 0x80u) != 0)
            {
              v36 = *(_QWORD *)(v302 + 16);
              v35 = *(_QWORD *)(v302 + 24);
            }
            *(_QWORD *)v34 = v33;
            *(_OWORD *)(v34 + 8) = *(_OWORD *)&__p[8];
            *(_QWORD *)&__p[8] = 0;
            *(_QWORD *)&__p[16] = 0;
            *(_OWORD *)(v34 + 24) = v331;
            v331 = 0uLL;
            *(_QWORD *)(v34 + 40) = v36;
            *(_QWORD *)(v34 + 48) = v35;
            *(_BYTE *)(v34 + 56) = 16;
            v336 = 0;
            v337 = v34;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v337);
            v37 = v337;
            v337 = 0;
            if (v37)
            {
              v38 = *(std::__shared_weak_count **)(v37 + 32);
              if (v38)
              {
                v39 = (unint64_t *)&v38->__shared_owners_;
                do
                  v40 = __ldaxr(v39);
                while (__stlxr(v40 - 1, v39));
                if (!v40)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              v41 = *(std::__shared_weak_count **)(v37 + 16);
              if (v41)
              {
                v42 = (unint64_t *)&v41->__shared_owners_;
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 - 1, v42));
                if (!v43)
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
              MEMORY[0x227684CE8](v37, 0x10F0C40B62ED6C6);
              v44 = v336;
              v336 = 0;
              if (v44)
              {
                v45 = *(std::__shared_weak_count **)(v44 + 32);
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldaxr(v46);
                  while (__stlxr(v47 - 1, v46));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                  }
                }
                v48 = *(std::__shared_weak_count **)(v44 + 16);
                if (v48)
                {
                  v49 = (unint64_t *)&v48->__shared_owners_;
                  do
                    v50 = __ldaxr(v49);
                  while (__stlxr(v50 - 1, v49));
                  if (!v50)
                  {
                    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                    std::__shared_weak_count::__release_weak(v48);
                  }
                }
                MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
              }
            }
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v331 + 1);
            v52 = v306;
            if (*((_QWORD *)&v331 + 1))
            {
              v53 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v55 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v56 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
          }
          else
          {
            os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
            *(_WORD *)__p = 0;
            v58 = (void *)_os_log_send_and_compose_impl();
            v52 = v306;
            if (v58)
              free(v58);
          }
          if (v52)
          {
            sub_22322C138((uint64_t)&v313, "Logged best floor dictionary contains an invalid plane pose");
            sub_223182C08((uint64_t)&v313);
          }
          sub_223182C08((uint64_t)&v313);
          v59 = v321;
          if (v321)
          {
            v60 = (unint64_t *)&v321->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          goto LABEL_103;
        }
      }
      memmove(v19, v17, v18);
      goto LABEL_36;
    }
  }
LABEL_103:
  v8 = 0;
  v7 = 0;
  if (v329)
    goto LABEL_104;
LABEL_109:
  v9 = v8;
LABEL_110:
  __p[23] = 11;
  strcpy(__p, "device_pose");
  sub_22379EC6C(&v327, a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v329)
      goto LABEL_112;
  }
  else if (v329)
  {
LABEL_112:
    sub_22319ED0C(&v311, (uint64_t)&v327);
    sub_22379AE60((uint64_t)v325, (uint64_t)&v311);
    v65 = v312;
    if (!v312)
      goto LABEL_116;
    v66 = (unint64_t *)&v312->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
      if (v326)
      {
LABEL_117:
        v338 = *(_OWORD *)v325;
        v339 = *(_OWORD *)&v325[16];
        v340 = *(_OWORD *)&v325[32];
        v341 = *(_OWORD *)&v325[48];
        if (!v329)
          goto LABEL_304;
        goto LABEL_299;
      }
    }
    else
    {
LABEL_116:
      if (v326)
        goto LABEL_117;
    }
    sub_22379C1D8(&v322);
    if (**(int **)(v322 + 56) > 4)
      goto LABEL_298;
    v75 = *(unsigned __int8 *)(v322 + 72);
    v76 = sub_22322F254(v322, "OSLogSurrogateAppender", 1, 0);
    v77 = v76;
    if (!v75 && v76 == 0)
      goto LABEL_298;
    v299 = v75;
    v313 = &v322;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v315 = std::chrono::system_clock::now().__d_.__rep_;
    v316 = 4;
    v317 = "unknown file";
    v318 = 76;
    v320 = 0;
    v321 = 0;
    v319 = "unknown function";
    v79 = *v313;
    v80 = (const char *)(*v313 + 16);
    v290 = v80;
    v294 = *v313;
    if (*(char *)(*v313 + 39) < 0)
    {
      v80 = *(const char **)(v79 + 16);
      v81 = *(_QWORD *)(v79 + 24);
    }
    else
    {
      v81 = *(unsigned __int8 *)(*v313 + 39);
    }
    v308 = v8;
    v128 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v128 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)__p);
      sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
      if ((_BYTE)v331 && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v129 = (const char *)&xmmword_255788F40;
    else
      v129 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v130 = byte_255788F57;
    else
      v130 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)__p = os_log_create(v129, v80);
    v131 = &__p[8];
    if (v130 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v130 >= 0x17)
    {
      v132 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v130 | 7) != 0x17)
        v132 = v130 | 7;
      v133 = v132 + 1;
      v131 = operator new(v132 + 1);
      *(_QWORD *)&__p[16] = v130;
      *(_QWORD *)&v331 = v133 | 0x8000000000000000;
      *(_QWORD *)&__p[8] = v131;
    }
    else
    {
      BYTE7(v331) = v130;
      if (!v130)
      {
LABEL_231:
        v131[v130] = 0;
        BYTE8(v331) = 1;
        v134 = &v332;
        if (v81 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v81 >= 0x17)
        {
          v135 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v81 | 7) != 0x17)
            v135 = v81 | 7;
          v136 = v135 + 1;
          v134 = operator new(v135 + 1);
          v333 = v81;
          v334 = v136 | 0x8000000000000000;
          v332 = v134;
          v8 = v308;
        }
        else
        {
          HIBYTE(v334) = v81;
          v8 = v308;
          if (!v81)
          {
LABEL_239:
            *((_BYTE *)v134 + v81) = 0;
            v335 = 1;
            v137 = *(NSObject **)__p;
            if (SHIBYTE(v334) < 0)
              operator delete(v332);
            if (BYTE8(v331) && SBYTE7(v331) < 0)
              operator delete(*(void **)&__p[8]);
            if (*(_QWORD *)__p)
              os_release(*(void **)__p);
            if (v77 && *(_QWORD *)(v77 + 24))
            {
              v138 = _os_log_pack_size();
              v139 = (std::__shared_weak_count_vtbl *)operator new(v138, (std::align_val_t)8uLL);
              v140 = (std::__shared_weak_count *)operator new();
              v141 = v140;
              v140->__shared_owners_ = 0;
              v142 = (unint64_t *)&v140->__shared_owners_;
              v140->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v140->__shared_weak_owners_ = 0;
              v140[1].__vftable = v139;
              *(_QWORD *)__p = v139;
              *(_QWORD *)&__p[8] = v139;
              *(_QWORD *)&__p[16] = v140;
              do
                v143 = __ldxr(v142);
              while (__stxr(v143 + 1, v142));
              v331 = 0uLL;
              v332 = 0;
              do
                v144 = __ldaxr(v142);
              while (__stlxr(v144 - 1, v142));
              if (!v144)
              {
                ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                std::__shared_weak_count::__release_weak(v141);
              }
              v145 = *(_QWORD *)__p;
              *(_WORD *)_os_log_pack_fill() = 0;
              v146 = operator new();
              v147 = *(unsigned __int8 *)(v294 + 39);
              v148 = v290;
              if ((v147 & 0x80u) != 0)
              {
                v148 = *(const char **)(v294 + 16);
                v147 = *(_QWORD *)(v294 + 24);
              }
              *(_QWORD *)v146 = v145;
              *(_OWORD *)(v146 + 8) = *(_OWORD *)&__p[8];
              *(_QWORD *)&__p[8] = 0;
              *(_QWORD *)&__p[16] = 0;
              *(_OWORD *)(v146 + 24) = v331;
              v331 = 0uLL;
              *(_QWORD *)(v146 + 40) = v148;
              *(_QWORD *)(v146 + 48) = v147;
              *(_BYTE *)(v146 + 56) = 16;
              v336 = 0;
              v337 = v146;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v77 + 24) + 40))(*(_QWORD *)(v77 + 24), &v337);
              v149 = v337;
              v337 = 0;
              v8 = v308;
              if (v149)
              {
                v150 = *(std::__shared_weak_count **)(v149 + 32);
                if (v150)
                {
                  v151 = (unint64_t *)&v150->__shared_owners_;
                  do
                    v152 = __ldaxr(v151);
                  while (__stlxr(v152 - 1, v151));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v150);
                  }
                }
                v153 = *(std::__shared_weak_count **)(v149 + 16);
                if (v153)
                {
                  v154 = (unint64_t *)&v153->__shared_owners_;
                  do
                    v155 = __ldaxr(v154);
                  while (__stlxr(v155 - 1, v154));
                  if (!v155)
                  {
                    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                    std::__shared_weak_count::__release_weak(v153);
                  }
                }
                MEMORY[0x227684CE8](v149, 0x10F0C40B62ED6C6);
                v156 = v336;
                v336 = 0;
                if (v156)
                {
                  v157 = *(std::__shared_weak_count **)(v156 + 32);
                  if (v157)
                  {
                    v158 = (unint64_t *)&v157->__shared_owners_;
                    do
                      v159 = __ldaxr(v158);
                    while (__stlxr(v159 - 1, v158));
                    if (!v159)
                    {
                      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                      std::__shared_weak_count::__release_weak(v157);
                    }
                  }
                  v160 = *(std::__shared_weak_count **)(v156 + 16);
                  if (v160)
                  {
                    v161 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }
                  MEMORY[0x227684CE8](v156, 0x10F0C40B62ED6C6);
                }
              }
              v163 = (std::__shared_weak_count *)*((_QWORD *)&v331 + 1);
              v164 = v299;
              if (*((_QWORD *)&v331 + 1))
              {
                v165 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
                do
                  v166 = __ldaxr(v165);
                while (__stlxr(v166 - 1, v165));
                if (!v166)
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
              }
              v167 = *(std::__shared_weak_count **)&__p[16];
              if (*(_QWORD *)&__p[16])
              {
                v168 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                do
                  v169 = __ldaxr(v168);
                while (__stlxr(v169 - 1, v168));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                  std::__shared_weak_count::__release_weak(v167);
                }
              }
            }
            else
            {
              os_log_type_enabled(v137, OS_LOG_TYPE_ERROR);
              *(_WORD *)__p = 0;
              v170 = (void *)_os_log_send_and_compose_impl();
              v164 = v299;
              if (v170)
                free(v170);
            }
            if (v164)
            {
              sub_22322C138((uint64_t)&v313, "Logged best floor dictionary contains an invalid device pose");
              sub_223182C08((uint64_t)&v313);
            }
            sub_223182C08((uint64_t)&v313);
            v125 = v321;
            if (v321)
            {
              v171 = (unint64_t *)&v321->__shared_owners_;
              do
                v127 = __ldaxr(v171);
              while (__stlxr(v127 - 1, v171));
              goto LABEL_296;
            }
            goto LABEL_298;
          }
        }
        memmove(v134, v80, v81);
        goto LABEL_239;
      }
    }
    memmove(v131, v129, v130);
    goto LABEL_231;
  }
  sub_22379C1D8(&v336);
  if (**(int **)(v336 + 56) > 4)
    goto LABEL_298;
  v68 = *(unsigned __int8 *)(v336 + 72);
  v69 = sub_22322F254(v336, "OSLogSurrogateAppender", 1, 0);
  v70 = v69;
  if (!v68 && !v69)
    goto LABEL_298;
  v298 = v68;
  v313 = &v336;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v315 = std::chrono::system_clock::now().__d_.__rep_;
  v316 = 4;
  v317 = "unknown file";
  v318 = 80;
  v320 = 0;
  v321 = 0;
  v319 = "unknown function";
  v71 = *v313;
  v72 = (const char *)(*v313 + 16);
  v289 = v72;
  v293 = *v313;
  if (*(char *)(*v313 + 39) < 0)
  {
    v72 = *(const char **)(v71 + 16);
    v73 = *(_QWORD *)(v71 + 24);
    v307 = v8;
    v303 = v7;
    v82 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v82 & 1) != 0)
      goto LABEL_135;
  }
  else
  {
    v73 = *(unsigned __int8 *)(*v313 + 39);
    v307 = v8;
    v303 = v7;
    v74 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v74 & 1) != 0)
      goto LABEL_135;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)__p);
    sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
    if ((_BYTE)v331 && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_135:
  if (byte_255788F57 >= 0)
    v83 = (const char *)&xmmword_255788F40;
  else
    v83 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v84 = byte_255788F57;
  else
    v84 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)__p = os_log_create(v83, v72);
  v85 = &__p[8];
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v84 >= 0x17)
  {
    v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v86 = v84 | 7;
    v87 = v86 + 1;
    v85 = operator new(v86 + 1);
    *(_QWORD *)&__p[16] = v84;
    *(_QWORD *)&v331 = v87 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v85;
    goto LABEL_148;
  }
  BYTE7(v331) = v84;
  if (v84)
LABEL_148:
    memmove(v85, v83, v84);
  v85[v84] = 0;
  BYTE8(v331) = 1;
  v88 = &v332;
  if (v73 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v303;
  if (v73 >= 0x17)
  {
    v89 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v73 | 7) != 0x17)
      v89 = v73 | 7;
    v90 = v89 + 1;
    v88 = operator new(v89 + 1);
    v333 = v73;
    v334 = v90 | 0x8000000000000000;
    v332 = v88;
    v8 = v307;
    goto LABEL_156;
  }
  HIBYTE(v334) = v73;
  v8 = v307;
  if (v73)
LABEL_156:
    memmove(v88, v72, v73);
  *((_BYTE *)v88 + v73) = 0;
  v335 = 1;
  v91 = *(NSObject **)__p;
  if (SHIBYTE(v334) < 0)
    operator delete(v332);
  if (BYTE8(v331) && SBYTE7(v331) < 0)
    operator delete(*(void **)&__p[8]);
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v70 && *(_QWORD *)(v70 + 24))
  {
    v92 = _os_log_pack_size();
    v93 = (std::__shared_weak_count_vtbl *)operator new(v92, (std::align_val_t)8uLL);
    v94 = (std::__shared_weak_count *)operator new();
    v95 = v94;
    v94->__shared_owners_ = 0;
    v96 = (unint64_t *)&v94->__shared_owners_;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v93;
    *(_QWORD *)__p = v93;
    *(_QWORD *)&__p[8] = v93;
    *(_QWORD *)&__p[16] = v94;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
    v331 = 0uLL;
    v332 = 0;
    do
      v98 = __ldaxr(v96);
    while (__stlxr(v98 - 1, v96));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v95);
    }
    v99 = *(_QWORD *)__p;
    *(_WORD *)_os_log_pack_fill() = 0;
    v100 = operator new();
    v101 = *(unsigned __int8 *)(v293 + 39);
    v102 = v289;
    if ((v101 & 0x80u) != 0)
    {
      v102 = *(const char **)(v293 + 16);
      v101 = *(_QWORD *)(v293 + 24);
    }
    *(_QWORD *)v100 = v99;
    *(_OWORD *)(v100 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v100 + 24) = v331;
    v331 = 0uLL;
    *(_QWORD *)(v100 + 40) = v102;
    *(_QWORD *)(v100 + 48) = v101;
    *(_BYTE *)(v100 + 56) = 16;
    v337 = 0;
    *(_QWORD *)v325 = v100;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v70 + 24) + 40))(*(_QWORD *)(v70 + 24), v325);
    v103 = *(_QWORD *)v325;
    *(_QWORD *)v325 = 0;
    v8 = v307;
    if (v103)
    {
      v104 = *(std::__shared_weak_count **)(v103 + 32);
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = *(std::__shared_weak_count **)(v103 + 16);
      if (v107)
      {
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      MEMORY[0x227684CE8](v103, 0x10F0C40B62ED6C6);
      v110 = v337;
      v337 = 0;
      if (v110)
      {
        v111 = *(std::__shared_weak_count **)(v110 + 32);
        if (v111)
        {
          v112 = (unint64_t *)&v111->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        v114 = *(std::__shared_weak_count **)(v110 + 16);
        if (v114)
        {
          v115 = (unint64_t *)&v114->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        MEMORY[0x227684CE8](v110, 0x10F0C40B62ED6C6);
      }
    }
    v117 = (std::__shared_weak_count *)*((_QWORD *)&v331 + 1);
    v118 = v298;
    if (*((_QWORD *)&v331 + 1))
    {
      v119 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v121 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v122 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
  }
  else
  {
    os_log_type_enabled(v91, OS_LOG_TYPE_ERROR);
    *(_WORD *)__p = 0;
    v124 = (void *)_os_log_send_and_compose_impl();
    v118 = v298;
    if (v124)
      free(v124);
  }
  if (v118)
  {
    sub_22322C138((uint64_t)&v313, "Logged best floor dictionary does not contain a device pose");
    sub_223182C08((uint64_t)&v313);
  }
  sub_223182C08((uint64_t)&v313);
  v125 = v321;
  if (v321)
  {
    v126 = (unint64_t *)&v321->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
LABEL_296:
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
LABEL_298:
  v9 = 0;
  if (!v329)
    goto LABEL_304;
LABEL_299:
  v172 = v328;
  if (v328)
  {
    v173 = (unint64_t *)&v328->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
LABEL_304:
  __p[23] = 9;
  strcpy(__p, "timestamp");
  v176 = sub_223763054(a2, (uint64_t)__p);
  v177 = v175;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v177)
      goto LABEL_397;
  }
  else if (v175)
  {
    goto LABEL_397;
  }
  sub_22379C1D8(&v337);
  if (**(int **)(v337 + 56) <= 4)
  {
    v178 = *(unsigned __int8 *)(v337 + 72);
    v179 = sub_22322F254(v337, "OSLogSurrogateAppender", 1, 0);
    v180 = v179;
    if (v178 || v179)
    {
      v300 = v178;
      v313 = &v337;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v315 = std::chrono::system_clock::now().__d_.__rep_;
      v316 = 4;
      v317 = "unknown file";
      v318 = 87;
      v320 = 0;
      v321 = 0;
      v319 = "unknown function";
      v181 = *v313;
      v182 = (const char *)(*v313 + 16);
      v291 = v182;
      v295 = *v313;
      if (*(char *)(*v313 + 39) < 0)
      {
        v182 = *(const char **)(v181 + 16);
        v183 = *(_QWORD *)(v181 + 24);
        v309 = v8;
        v304 = v7;
        v185 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v185 & 1) != 0)
          goto LABEL_315;
      }
      else
      {
        v183 = *(unsigned __int8 *)(*v313 + 39);
        v309 = v8;
        v304 = v7;
        v184 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v184 & 1) != 0)
          goto LABEL_315;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
        if ((_BYTE)v331 && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_315:
      if (byte_255788F57 >= 0)
        v186 = (const char *)&xmmword_255788F40;
      else
        v186 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v187 = byte_255788F57;
      else
        v187 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)__p = os_log_create(v186, v182);
      v188 = &__p[8];
      if (v187 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v187 >= 0x17)
      {
        v189 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v187 | 7) != 0x17)
          v189 = v187 | 7;
        v190 = v189 + 1;
        v188 = operator new(v189 + 1);
        *(_QWORD *)&__p[16] = v187;
        *(_QWORD *)&v331 = v190 | 0x8000000000000000;
        *(_QWORD *)&__p[8] = v188;
      }
      else
      {
        BYTE7(v331) = v187;
        if (!v187)
        {
LABEL_329:
          v188[v187] = 0;
          BYTE8(v331) = 1;
          v191 = &v332;
          if (v183 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v7 = v304;
          if (v183 >= 0x17)
          {
            v192 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v183 | 7) != 0x17)
              v192 = v183 | 7;
            v193 = v192 + 1;
            v191 = operator new(v192 + 1);
            v333 = v183;
            v334 = v193 | 0x8000000000000000;
            v332 = v191;
            v8 = v309;
          }
          else
          {
            HIBYTE(v334) = v183;
            v8 = v309;
            if (!v183)
              goto LABEL_337;
          }
          memmove(v191, v182, v183);
LABEL_337:
          *((_BYTE *)v191 + v183) = 0;
          v335 = 1;
          v194 = *(NSObject **)__p;
          if (SHIBYTE(v334) < 0)
            operator delete(v332);
          if (BYTE8(v331) && SBYTE7(v331) < 0)
            operator delete(*(void **)&__p[8]);
          if (*(_QWORD *)__p)
            os_release(*(void **)__p);
          if (v180 && *(_QWORD *)(v180 + 24))
          {
            v195 = _os_log_pack_size();
            v196 = (std::__shared_weak_count_vtbl *)operator new(v195, (std::align_val_t)8uLL);
            v197 = (std::__shared_weak_count *)operator new();
            v198 = v197;
            v197->__shared_owners_ = 0;
            v199 = (unint64_t *)&v197->__shared_owners_;
            v197->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v197->__shared_weak_owners_ = 0;
            v197[1].__vftable = v196;
            *(_QWORD *)__p = v196;
            *(_QWORD *)&__p[8] = v196;
            *(_QWORD *)&__p[16] = v197;
            do
              v200 = __ldxr(v199);
            while (__stxr(v200 + 1, v199));
            v331 = 0uLL;
            v332 = 0;
            do
              v201 = __ldaxr(v199);
            while (__stlxr(v201 - 1, v199));
            if (!v201)
            {
              ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
              std::__shared_weak_count::__release_weak(v198);
            }
            v202 = *(_QWORD *)__p;
            *(_WORD *)_os_log_pack_fill() = 0;
            v203 = operator new();
            v204 = *(unsigned __int8 *)(v295 + 39);
            v205 = v291;
            if ((v204 & 0x80u) != 0)
            {
              v205 = *(const char **)(v295 + 16);
              v204 = *(_QWORD *)(v295 + 24);
            }
            *(_QWORD *)v203 = v202;
            *(_OWORD *)(v203 + 8) = *(_OWORD *)&__p[8];
            *(_QWORD *)&__p[8] = 0;
            *(_QWORD *)&__p[16] = 0;
            *(_OWORD *)(v203 + 24) = v331;
            v331 = 0uLL;
            *(_QWORD *)(v203 + 40) = v205;
            *(_QWORD *)(v203 + 48) = v204;
            *(_BYTE *)(v203 + 56) = 16;
            v327 = 0;
            *(_QWORD *)v325 = v203;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v180 + 24) + 40))(*(_QWORD *)(v180 + 24), v325);
            v206 = *(_QWORD *)v325;
            *(_QWORD *)v325 = 0;
            v8 = v309;
            if (v206)
            {
              v207 = *(std::__shared_weak_count **)(v206 + 32);
              if (v207)
              {
                v208 = (unint64_t *)&v207->__shared_owners_;
                do
                  v209 = __ldaxr(v208);
                while (__stlxr(v209 - 1, v208));
                if (!v209)
                {
                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                  std::__shared_weak_count::__release_weak(v207);
                }
              }
              v210 = *(std::__shared_weak_count **)(v206 + 16);
              if (v210)
              {
                v211 = (unint64_t *)&v210->__shared_owners_;
                do
                  v212 = __ldaxr(v211);
                while (__stlxr(v212 - 1, v211));
                if (!v212)
                {
                  ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                  std::__shared_weak_count::__release_weak(v210);
                }
              }
              MEMORY[0x227684CE8](v206, 0x10F0C40B62ED6C6);
              v213 = v327;
              v327 = 0;
              if (v213)
              {
                v214 = *(std::__shared_weak_count **)(v213 + 32);
                if (v214)
                {
                  v215 = (unint64_t *)&v214->__shared_owners_;
                  do
                    v216 = __ldaxr(v215);
                  while (__stlxr(v216 - 1, v215));
                  if (!v216)
                  {
                    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                    std::__shared_weak_count::__release_weak(v214);
                  }
                }
                v217 = *(std::__shared_weak_count **)(v213 + 16);
                if (v217)
                {
                  v218 = (unint64_t *)&v217->__shared_owners_;
                  do
                    v219 = __ldaxr(v218);
                  while (__stlxr(v219 - 1, v218));
                  if (!v219)
                  {
                    ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                    std::__shared_weak_count::__release_weak(v217);
                  }
                }
                MEMORY[0x227684CE8](v213, 0x10F0C40B62ED6C6);
              }
            }
            v220 = (std::__shared_weak_count *)*((_QWORD *)&v331 + 1);
            v221 = v300;
            if (*((_QWORD *)&v331 + 1))
            {
              v222 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
              do
                v223 = __ldaxr(v222);
              while (__stlxr(v223 - 1, v222));
              if (!v223)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            v224 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v225 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                std::__shared_weak_count::__release_weak(v224);
              }
            }
          }
          else
          {
            os_log_type_enabled(v194, OS_LOG_TYPE_ERROR);
            *(_WORD *)__p = 0;
            v227 = (void *)_os_log_send_and_compose_impl();
            v221 = v300;
            if (v227)
              free(v227);
          }
          if (v221)
          {
            sub_22322C138((uint64_t)&v313, "Logged best floor dictionary does not contain a timestamp");
            sub_223182C08((uint64_t)&v313);
          }
          sub_223182C08((uint64_t)&v313);
          v228 = v321;
          if (v321)
          {
            v229 = (unint64_t *)&v321->__shared_owners_;
            do
              v230 = __ldaxr(v229);
            while (__stlxr(v230 - 1, v229));
            if (!v230)
            {
              ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
              std::__shared_weak_count::__release_weak(v228);
            }
          }
          goto LABEL_396;
        }
      }
      memmove(v188, v186, v187);
      goto LABEL_329;
    }
  }
LABEL_396:
  v9 = 0;
  v176 = 0;
LABEL_397:
  __p[23] = 9;
  strcpy(__p, "is_cached");
  v231 = sub_22379EDA0(a2, (uint64_t)__p);
  v232 = v231;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v232 >= 0x100u)
      goto LABEL_490;
LABEL_401:
    sub_22379C1D8(&v337);
    if (**(int **)(v337 + 56) > 4
      || (v233 = *(unsigned __int8 *)(v337 + 72),
          v234 = sub_22322F254(v337, "OSLogSurrogateAppender", 1, 0),
          v235 = v234,
          !v233)
      && !v234)
    {
LABEL_489:
      v9 = 0;
      LOBYTE(v232) = 0;
      goto LABEL_490;
    }
    v301 = v233;
    v313 = &v337;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v315 = std::chrono::system_clock::now().__d_.__rep_;
    v316 = 4;
    v317 = "unknown file";
    v318 = 94;
    v320 = 0;
    v321 = 0;
    v319 = "unknown function";
    v236 = *v313;
    v237 = (const char *)(*v313 + 16);
    v292 = v237;
    v296 = *v313;
    if (*(char *)(*v313 + 39) < 0)
    {
      v237 = *(const char **)(v236 + 16);
      v238 = *(_QWORD *)(v236 + 24);
      v310 = v8;
      v305 = v7;
      v240 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v240 & 1) != 0)
        goto LABEL_408;
    }
    else
    {
      v238 = *(unsigned __int8 *)(*v313 + 39);
      v310 = v8;
      v305 = v7;
      v239 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v239 & 1) != 0)
        goto LABEL_408;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)__p);
      sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
      if ((_BYTE)v331 && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_408:
    if (byte_255788F57 >= 0)
      v241 = (const char *)&xmmword_255788F40;
    else
      v241 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v242 = byte_255788F57;
    else
      v242 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)__p = os_log_create(v241, v237);
    v243 = &__p[8];
    if (v242 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v242 >= 0x17)
    {
      v244 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v242 | 7) != 0x17)
        v244 = v242 | 7;
      v245 = v244 + 1;
      v243 = operator new(v244 + 1);
      *(_QWORD *)&__p[16] = v242;
      *(_QWORD *)&v331 = v245 | 0x8000000000000000;
      *(_QWORD *)&__p[8] = v243;
    }
    else
    {
      BYTE7(v331) = v242;
      if (!v242)
      {
LABEL_422:
        v243[v242] = 0;
        BYTE8(v331) = 1;
        v246 = &v332;
        if (v238 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v7 = v305;
        if (v238 >= 0x17)
        {
          v247 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v238 | 7) != 0x17)
            v247 = v238 | 7;
          v248 = v247 + 1;
          v246 = operator new(v247 + 1);
          v333 = v238;
          v334 = v248 | 0x8000000000000000;
          v332 = v246;
          v8 = v310;
        }
        else
        {
          HIBYTE(v334) = v238;
          v8 = v310;
          if (!v238)
            goto LABEL_430;
        }
        memmove(v246, v237, v238);
LABEL_430:
        *((_BYTE *)v246 + v238) = 0;
        v335 = 1;
        v249 = *(NSObject **)__p;
        if (SHIBYTE(v334) < 0)
          operator delete(v332);
        if (BYTE8(v331) && SBYTE7(v331) < 0)
          operator delete(*(void **)&__p[8]);
        if (*(_QWORD *)__p)
          os_release(*(void **)__p);
        if (v235 && *(_QWORD *)(v235 + 24))
        {
          v250 = _os_log_pack_size();
          v251 = (std::__shared_weak_count_vtbl *)operator new(v250, (std::align_val_t)8uLL);
          v252 = (std::__shared_weak_count *)operator new();
          v253 = v252;
          v252->__shared_owners_ = 0;
          v254 = (unint64_t *)&v252->__shared_owners_;
          v252->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v252->__shared_weak_owners_ = 0;
          v252[1].__vftable = v251;
          *(_QWORD *)__p = v251;
          *(_QWORD *)&__p[8] = v251;
          *(_QWORD *)&__p[16] = v252;
          do
            v255 = __ldxr(v254);
          while (__stxr(v255 + 1, v254));
          v331 = 0uLL;
          v332 = 0;
          do
            v256 = __ldaxr(v254);
          while (__stlxr(v256 - 1, v254));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
            std::__shared_weak_count::__release_weak(v253);
          }
          v257 = *(_QWORD *)__p;
          *(_WORD *)_os_log_pack_fill() = 0;
          v258 = operator new();
          v259 = *(unsigned __int8 *)(v296 + 39);
          v260 = v292;
          if ((v259 & 0x80u) != 0)
          {
            v260 = *(const char **)(v296 + 16);
            v259 = *(_QWORD *)(v296 + 24);
          }
          *(_QWORD *)v258 = v257;
          *(_OWORD *)(v258 + 8) = *(_OWORD *)&__p[8];
          *(_QWORD *)&__p[8] = 0;
          *(_QWORD *)&__p[16] = 0;
          *(_OWORD *)(v258 + 24) = v331;
          v331 = 0uLL;
          *(_QWORD *)(v258 + 40) = v260;
          *(_QWORD *)(v258 + 48) = v259;
          *(_BYTE *)(v258 + 56) = 16;
          v327 = 0;
          *(_QWORD *)v325 = v258;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v235 + 24) + 40))(*(_QWORD *)(v235 + 24), v325);
          v261 = *(_QWORD *)v325;
          *(_QWORD *)v325 = 0;
          v8 = v310;
          if (v261)
          {
            v262 = *(std::__shared_weak_count **)(v261 + 32);
            if (v262)
            {
              v263 = (unint64_t *)&v262->__shared_owners_;
              do
                v264 = __ldaxr(v263);
              while (__stlxr(v264 - 1, v263));
              if (!v264)
              {
                ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                std::__shared_weak_count::__release_weak(v262);
              }
            }
            v265 = *(std::__shared_weak_count **)(v261 + 16);
            if (v265)
            {
              v266 = (unint64_t *)&v265->__shared_owners_;
              do
                v267 = __ldaxr(v266);
              while (__stlxr(v267 - 1, v266));
              if (!v267)
              {
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
              }
            }
            MEMORY[0x227684CE8](v261, 0x10F0C40B62ED6C6);
            v268 = v327;
            v327 = 0;
            if (v268)
            {
              v269 = *(std::__shared_weak_count **)(v268 + 32);
              if (v269)
              {
                v270 = (unint64_t *)&v269->__shared_owners_;
                do
                  v271 = __ldaxr(v270);
                while (__stlxr(v271 - 1, v270));
                if (!v271)
                {
                  ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                  std::__shared_weak_count::__release_weak(v269);
                }
              }
              v272 = *(std::__shared_weak_count **)(v268 + 16);
              if (v272)
              {
                v273 = (unint64_t *)&v272->__shared_owners_;
                do
                  v274 = __ldaxr(v273);
                while (__stlxr(v274 - 1, v273));
                if (!v274)
                {
                  ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                  std::__shared_weak_count::__release_weak(v272);
                }
              }
              MEMORY[0x227684CE8](v268, 0x10F0C40B62ED6C6);
            }
          }
          v275 = (std::__shared_weak_count *)*((_QWORD *)&v331 + 1);
          v276 = v301;
          if (*((_QWORD *)&v331 + 1))
          {
            v277 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
            do
              v278 = __ldaxr(v277);
            while (__stlxr(v278 - 1, v277));
            if (!v278)
            {
              ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
              std::__shared_weak_count::__release_weak(v275);
            }
          }
          v279 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v280 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v281 = __ldaxr(v280);
            while (__stlxr(v281 - 1, v280));
            if (!v281)
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
          }
        }
        else
        {
          os_log_type_enabled(v249, OS_LOG_TYPE_ERROR);
          *(_WORD *)__p = 0;
          v282 = (void *)_os_log_send_and_compose_impl();
          v276 = v301;
          if (v282)
            free(v282);
        }
        if (v276)
        {
          sub_22322C138((uint64_t)&v313, "Logged best floor dictionary does not contain is_cached");
          sub_223182C08((uint64_t)&v313);
        }
        sub_223182C08((uint64_t)&v313);
        v283 = v321;
        if (v321)
        {
          v284 = (unint64_t *)&v321->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
          }
        }
        goto LABEL_489;
      }
    }
    memmove(v243, v241, v242);
    goto LABEL_422;
  }
  if (v231 < 0x100u)
    goto LABEL_401;
LABEL_490:
  v286 = v339;
  *(_OWORD *)a1 = v338;
  *(_OWORD *)(a1 + 16) = v286;
  v287 = v341;
  *(_OWORD *)(a1 + 32) = v340;
  *(_OWORD *)(a1 + 48) = v287;
  *(_QWORD *)(a1 + 64) = v176;
  *(_BYTE *)(a1 + 72) = v232;
  *(_BYTE *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  if (v8)
  {
    *(_BYTE *)(a1 + 76) = v7;
    v288 = v343;
    *(_OWORD *)(a1 + 77) = v342;
    *(_OWORD *)(a1 + 93) = v288;
    *(_OWORD *)(a1 + 109) = v344[0];
    *(_OWORD *)(a1 + 124) = *(_OWORD *)((char *)v344 + 15);
    *(_BYTE *)(a1 + 140) = 1;
  }
  *(_BYTE *)(a1 + 144) = v9;
}

void sub_22379E740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  if (a49)
  {
    if (a48 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a19);
  sub_223224234((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_22379E7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  sub_22319A054((uint64_t *)(v43 - 248));
  sub_22319A054((uint64_t *)(v43 - 256));
  sub_223199DE8((uint64_t)&a43);
  sub_223182DAC((uint64_t)&a19);
  sub_223224234((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_22379E8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_223182DAC((uint64_t)&a19);
  sub_223224234((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_22379E96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22379E990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_223182DAC((uint64_t)&a19);
  sub_223224234((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_22379E9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_223182DAC((uint64_t)&a19);
  sub_223224234((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_22379E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *object,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a50 && a49 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a19);
  sub_223224234((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_22379EB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22379EB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *object,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a50 && a49 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_22379EB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22379EC6C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *key;
  std::__shared_weak_count *v15;
  void *value;

  sub_224527BAC(a3, (CFStringRef *)&key);
  v5 = key;
  v7 = *(CFDictionaryRef *)a2;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      goto LABEL_12;
  }
  else
  {
LABEL_6:
    if (!v7)
      goto LABEL_12;
  }
  value = 0;
  if (!v5 || !CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a2, v5, (const void **)&value))
  {
LABEL_12:
    *a1 = 0;
    a1[16] = 0;
    v11 = v15;
    if (!v15)
      return;
    goto LABEL_13;
  }
  sub_22379F288(value, (uint64_t)a1);
  v11 = v15;
  if (!v15)
    return;
LABEL_13:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_22379ED8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22379EDA0(uint64_t a1, uint64_t a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  CFTypeID TypeID;
  _BOOL4 v11;
  std::__shared_weak_count *v12;
  unint64_t *v14;
  unint64_t v15;
  void *key;
  std::__shared_weak_count *v17;
  void *value;

  sub_224527BAC(a2, (CFStringRef *)&key);
  v3 = key;
  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_14;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_14;
  }
  value = 0;
  if (!v3)
  {
    v11 = 0;
    v12 = v17;
    if (v17)
      goto LABEL_17;
    return v11 | ((_DWORD)v3 << 8);
  }
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, v3, (const void **)&value)
    || (v9 = value) == 0
    || (TypeID = CFBooleanGetTypeID(), CFGetTypeID(v9) != TypeID))
  {
LABEL_14:
    LODWORD(v3) = 0;
    v11 = 0;
    v12 = v17;
    if (v17)
      goto LABEL_17;
    return v11 | ((_DWORD)v3 << 8);
  }
  v11 = CFBooleanGetValue((CFBooleanRef)v9) != 0;
  LODWORD(v3) = 1;
  v12 = v17;
  if (!v17)
    return v11 | ((_DWORD)v3 << 8);
LABEL_17:
  v14 = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return v11 | ((_DWORD)v3 << 8);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return v11 | ((_DWORD)v3 << 8);
}

void sub_22379EEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22379EF04(uint64_t *a1, uint64_t a2)
{
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  int v7;
  int v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD v16[4];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  char v28;
  std::string v29;
  char v30;

  v21 = 4;
  strcpy((char *)__p, "type");
  sub_22379F0FC(a2, (uint64_t)__p, &v29);
  if (v21 < 0)
  {
    operator delete(__p[0]);
    if (!v30)
    {
LABEL_18:
      LOBYTE(a1) = 0;
      return a1 & 1;
    }
  }
  else if (!v30)
  {
    goto LABEL_18;
  }
  size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v29.__r_.__value_.__l.__size_;
  if (size != 10)
    goto LABEL_14;
  v5 = &v29;
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v29.__r_.__value_.__r.__words[0];
  v6 = v5->__r_.__value_.__r.__words[0];
  v7 = LOWORD(v5->__r_.__value_.__r.__words[1]);
  if (v6 != 0x6F6C665F74736562 || v7 != 29295)
    goto LABEL_14;
  sub_22319ED0C(&v18, a2);
  sub_22379C2CC((uint64_t)__p, (uint64_t)&v18);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!v28)
  {
LABEL_14:
    v9 = 1;
    if (!v30)
      goto LABEL_17;
    goto LABEL_15;
  }
  v14 = *a1;
  LOBYTE(v16[0]) = 0;
  v17 = 0;
  if (v27)
  {
    v16[0] = v23;
    v16[1] = v24;
    v16[2] = v25;
    v16[3] = v26;
    v17 = 1;
  }
  sub_22367670C(v14, (uint64_t)__p, (uint64_t)v16, v22);
  LOBYTE(a1) = v15;
  v9 = 0;
  if (v30)
  {
LABEL_15:
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
LABEL_17:
  if (v9)
    goto LABEL_18;
  return a1 & 1;
}

void sub_22379F0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (*(_BYTE *)(v25 - 40))
  {
    if (*(char *)(v25 - 41) < 0)
      operator delete(*(void **)(v25 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_22379F0FC(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  void *v5;
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *key;
  std::__shared_weak_count *v15;
  void *value;

  sub_224527BAC(a2, (CFStringRef *)&key);
  v5 = key;
  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      goto LABEL_12;
  }
  else
  {
LABEL_6:
    if (!v7)
      goto LABEL_12;
  }
  value = 0;
  if (!v5 || !CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, v5, (const void **)&value))
  {
LABEL_12:
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[1].__r_.__value_.__s.__data_[0] = 0;
    v11 = v15;
    if (!v15)
      return;
    goto LABEL_13;
  }
  sub_224527CB8((CFIndex)value, a3);
  v11 = v15;
  if (!v15)
    return;
LABEL_13:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_22379F21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_22379F230(_QWORD *result)
{
  _QWORD *v1;
  void *v2;
  void *v3;

  if (result)
  {
    v1 = result;
    v2 = (void *)result[10];
    if (v2)
    {
      v1[11] = v2;
      operator delete(v2);
    }
    v3 = (void *)v1[3];
    if (v3)
    {
      v1[4] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x227684CE8);
  }
  return result;
}

void sub_22379F288(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  const void *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  const void *v25;
  std::__shared_weak_count *v26;

  if (a1 && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(a1) == TypeID))
  {
    sub_22319EE1C(&v25, a1);
    v5 = v25;
    v6 = v26;
    v24 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    sub_22319EE1C(&v25, v5);
    v10 = v25;
    v9 = v26;
    if (v26)
    {
      v11 = (unint64_t *)&v26->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = v26;
      if (v26)
      {
        v14 = (unint64_t *)&v26->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      do
        v16 = __ldxr(v11);
      while (__stxr(v16 + 1, v11));
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v9;
      do
        v17 = __ldxr(v11);
      while (__stxr(v17 + 1, v11));
      do
        v18 = __ldaxr(v11);
      while (__stlxr(v18 - 1, v11));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      do
        v19 = __ldaxr(v11);
      while (__stlxr(v19 - 1, v11));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      *(_QWORD *)a2 = v25;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_BYTE *)(a2 + 16) = 1;
    if (v6)
    {
      v20 = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v24)
    {
      v22 = (unint64_t *)&v24->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

void sub_22379F490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223224234((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22379F4AC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC530);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC530))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC528);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC530);
  }
  *a1 = qword_2540CC528;
}

void sub_22379F548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC530);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC530);
  _Unwind_Resume(a1);
}

_QWORD *sub_22379F5A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::locale *v12;
  std::locale *v13;
  _QWORD *v14;
  size_t v15;
  std::locale::__imp *p_dst;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  std::locale __dst;
  size_t v26;
  int64_t v27;
  std::locale __loc;
  std::locale v29;
  uint64_t v30;
  _QWORD v31[2];
  const void *v32;
  uint64_t v33;
  const void *v34;
  unint64_t v35;
  void *__p[2];
  __int128 v37;
  int v38;
  uint64_t v39[19];
  std::locale v40;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  v4 = (uint64_t *)MEMORY[0x24BEDB800];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v39[0] = MEMORY[0x24BEDB870] + 64;
  v30 = v5;
  *(_QWORD *)((char *)&v31[-1] + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v31[-1] + *(_QWORD *)(v30 - 24));
  std::ios_base::init(v7, v31);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v30 = v2 + 24;
  v39[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x24BEDB848];
  v31[0] = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v37 = 0u;
  v38 = 16;
  v9 = v30;
  v10 = *a1;
  *(_DWORD *)((char *)v31 + *(_QWORD *)(v30 - 24)) = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v11 = *(_QWORD *)(v9 - 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v10 - 24)));
  std::ios_base::getloc((const std::ios_base *)((char *)&v31[-1] + v11));
  std::ios_base::imbue((std::ios_base *)((char *)&v31[-1] + v11), &__loc);
  std::locale::~locale(&__dst);
  v12 = *(std::locale **)((char *)&v33 + v11);
  if (v12)
  {
    (*((void (**)(std::locale *, std::locale *))v12->__locale_ + 2))(v12, &__loc);
    v13 = v12 + 1;
    std::locale::locale(&v40, v13);
    std::locale::operator=(v13, &__loc);
    std::locale::~locale(&v40);
  }
  std::locale::~locale(&v29);
  std::locale::~locale(&__loc);
  *(_QWORD *)((char *)&v31[1] + *(_QWORD *)(v30 - 24)) = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 16);
  v14 = (_QWORD *)std::ostream::operator<<();
  sub_2231813E8(v14, (uint64_t)"ns", 2);
  if ((v38 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) < v35)
    {
      *((_QWORD *)&v37 + 1) = v35;
      v17 = v35;
    }
    v18 = v34;
    v15 = v17 - (_QWORD)v34;
    if (v17 - (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      v15 = 0;
      HIBYTE(v27) = 0;
      p_dst = (std::locale::__imp *)&__dst;
      goto LABEL_16;
    }
    v18 = v32;
    v15 = v33 - (_QWORD)v32;
    if ((unint64_t)(v33 - (_QWORD)v32) >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_22316DBC0();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (std::locale::__imp *)operator new(v19 + 1);
    v26 = v15;
    v27 = v20 | 0x8000000000000000;
    __dst.__locale_ = p_dst;
    goto LABEL_15;
  }
  HIBYTE(v27) = v15;
  p_dst = (std::locale::__imp *)&__dst;
  if (v15)
LABEL_15:
    memmove(p_dst, v18, v15);
LABEL_16:
  *((_BYTE *)p_dst + v15) = 0;
  if (v27 >= 0)
    locale = &__dst;
  else
    locale = __dst.__locale_;
  if (v27 >= 0)
    v22 = HIBYTE(v27);
  else
    v22 = v26;
  v23 = sub_2231813E8(a1, (uint64_t)locale, v22);
  if (SHIBYTE(v27) < 0)
    operator delete(__dst.__locale_);
  v30 = *v4;
  *(_QWORD *)((char *)&v31[-1] + *(_QWORD *)(v30 - 24)) = v4[3];
  v31[0] = v8 + 16;
  if (SBYTE7(v37) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227684BE0](v39);
  return v23;
}

void sub_22379F8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, std::locale a17, char a18)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_2232BBE74((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_2232BBE74((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_22379F984(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t result;
  int v9;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  size_t v17;
  void **p_dst;
  unint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  const char *v25;
  size_t v26;
  int v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  const char *v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  const char *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  size_t v44;
  size_t v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  char *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  const char *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t *v105;
  _QWORD *v106;
  uint64_t *v107;
  _QWORD *v108;
  size_t v109;
  void **v110;
  unint64_t v111;
  const void **v112;
  const void *v113;
  uint64_t v114;
  uint64_t v115;
  void **v116;
  uint64_t v117;
  const char *v118;
  size_t v119;
  uint64_t v120;
  unsigned __int8 v121;
  const char *v122;
  size_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  size_t v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  size_t v136;
  size_t v137;
  _QWORD *v138;
  void *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char v144;
  _QWORD *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  char *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  const char *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  char v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v203;
  int v204;
  const char *v205;
  int v206;
  const char *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  void **__dst;
  size_t v211;
  int64_t v212;
  _QWORD v213[2];
  uint64_t v214;
  uint64_t v215;
  const void *v216;
  unint64_t v217;
  const void *v218;
  unint64_t v219;
  void *__p;
  char v221;
  unint64_t v222;
  int v223;
  _BYTE v224[152];
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  std::__shared_weak_count *v228;
  char *v229;
  std::__shared_weak_count *v230;
  _QWORD *v231;
  __int128 v232;
  _BYTE v233[24];
  __int128 v234;
  char *v235;
  size_t v236;
  unint64_t v237;
  char v238;
  _QWORD v239[5];

  v6 = a2;
  v239[2] = *MEMORY[0x24BDAC8D0];
  v200 = a2;
  sub_22379F4AC(&v226);
  result = v226;
  if (**(int **)(v226 + 56) > 3)
    goto LABEL_145;
  v9 = *(unsigned __int8 *)(v226 + 72);
  result = sub_22322F254(v226, "OSLogSurrogateAppender", 1, 0);
  if (!v9 && result == 0)
    goto LABEL_145;
  v11 = result;
  sub_223195210((uint64_t)v213);
  v12 = sub_2231813E8(&v214, (uint64_t)"Processing frame with timestamp ", 32);
  v13 = sub_22379F5A0(v12);
  v14 = sub_2231813E8(v13, (uint64_t)"(Δ=", 4);
  v15 = (uint64_t *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 16))
    v15 = &v200;
  *(_QWORD *)v233 = v6 - *v15;
  v16 = sub_22379F5A0(v14);
  sub_2231813E8(v16, (uint64_t)")", 1);
  v195 = a3;
  v197 = a4;
  v199 = a1;
  if ((v223 & 0x10) != 0)
  {
    v19 = v222;
    if (v222 < v219)
    {
      v222 = v219;
      v19 = v219;
    }
    v20 = v218;
    v17 = v19 - (_QWORD)v218;
    if (v19 - (unint64_t)v218 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_66;
  }
  else
  {
    if ((v223 & 8) == 0)
    {
      v17 = 0;
      HIBYTE(v212) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_21;
    }
    v20 = v216;
    v17 = v217 - (_QWORD)v216;
    if (v217 - (unint64_t)v216 > 0x7FFFFFFFFFFFFFF7)
LABEL_66:
      sub_22316DBC0();
  }
  if (v17 >= 0x17)
  {
    v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v21 = v17 | 7;
    v22 = v21 + 1;
    p_dst = (void **)operator new(v21 + 1);
    v211 = v17;
    v212 = v22 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_20;
  }
  HIBYTE(v212) = v17;
  p_dst = (void **)&__dst;
  if (v17)
LABEL_20:
    memmove(p_dst, v20, v17);
LABEL_21:
  *((_BYTE *)p_dst + v17) = 0;
  v201 = &v226;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v203 = std::chrono::system_clock::now().__d_.__rep_;
  v204 = 3;
  v205 = "unknown file";
  v206 = 44;
  v208 = 0;
  v209 = 0;
  v207 = "unknown function";
  if (v212 >= 0)
    v23 = (void **)&__dst;
  else
    v23 = __dst;
  v24 = *v201;
  v25 = (const char *)(*v201 + 16);
  v193 = v25;
  if (*(char *)(*v201 + 39) < 0)
  {
    v25 = *(const char **)(v24 + 16);
    v26 = *(_QWORD *)(v24 + 24);
    v27 = v9;
    v29 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v29 & 1) != 0)
      goto LABEL_28;
  }
  else
  {
    v26 = *(unsigned __int8 *)(*v201 + 39);
    v27 = v9;
    v28 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v28 & 1) != 0)
      goto LABEL_28;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v233);
    sub_223199C58("com.apple.cv3d", (unint64_t)v233, &xmmword_255788F40);
    if ((_BYTE)v234 && (v233[23] & 0x80000000) != 0)
      operator delete(*(void **)v233);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_28:
  if (byte_255788F57 >= 0)
    v30 = (const char *)&xmmword_255788F40;
  else
    v30 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v31 = byte_255788F57;
  else
    v31 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v233 = os_log_create(v30, v25);
  v32 = &v233[8];
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v31 >= 0x17)
  {
    v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v33 = v31 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    *(_QWORD *)&v233[16] = v31;
    *(_QWORD *)&v234 = v34 | 0x8000000000000000;
    *(_QWORD *)&v233[8] = v32;
    goto LABEL_41;
  }
  BYTE7(v234) = v31;
  if (v31)
LABEL_41:
    memmove(v32, v30, v31);
  v32[v31] = 0;
  BYTE8(v234) = 1;
  v35 = (char *)&v235;
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v36 = v27;
  if (v26 >= 0x17)
  {
    v39 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v39 = v26 | 7;
    v40 = v39 + 1;
    v35 = (char *)operator new(v39 + 1);
    v37 = (const char *)v23;
    v236 = v26;
    v237 = v40 | 0x8000000000000000;
    v235 = v35;
    a1 = v199;
  }
  else
  {
    HIBYTE(v237) = v26;
    v37 = (const char *)v23;
    a1 = v199;
    if (!v26)
    {
      LOBYTE(v235) = 0;
      v238 = 1;
      v38 = *(NSObject **)v233;
      if ((SHIBYTE(v237) & 0x80000000) == 0)
        goto LABEL_46;
      goto LABEL_52;
    }
  }
  memmove(v35, v25, v26);
  v35[v26] = 0;
  v238 = 1;
  v38 = *(NSObject **)v233;
  if ((SHIBYTE(v237) & 0x80000000) == 0)
  {
LABEL_46:
    if (!BYTE8(v234))
      goto LABEL_55;
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v235);
  if (!BYTE8(v234))
    goto LABEL_55;
LABEL_53:
  if (SBYTE7(v234) < 0)
    operator delete(*(void **)&v233[8]);
LABEL_55:
  if (*(_QWORD *)v233)
    os_release(*(void **)v233);
  if (!v11 || !*(_QWORD *)(v11 + 24))
  {
    os_log_type_enabled(v38, OS_LOG_TYPE_INFO);
    *(_DWORD *)v233 = 136315138;
    *(_QWORD *)&v233[4] = v37;
    v47 = (void *)_os_log_send_and_compose_impl();
    a4 = v197;
    if (v47)
      free(v47);
    goto LABEL_131;
  }
  v41 = _os_log_pack_size();
  v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
  v43 = (std::__shared_weak_count *)operator new();
  v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v43->__shared_owners_ = 0;
  v43->__shared_weak_owners_ = 0;
  v43[1].__vftable = v42;
  *(_QWORD *)&v227 = v42;
  *((_QWORD *)&v227 + 1) = v42;
  v229 = 0;
  v230 = 0;
  v228 = v43;
  v44 = strlen(v37);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v48 = v44 | 7;
    v49 = v48 + 1;
    v46 = operator new(v48 + 1);
    *(_QWORD *)&v232 = v45;
    *((_QWORD *)&v232 + 1) = v49 | 0x8000000000000000;
    v231 = v46;
    goto LABEL_70;
  }
  HIBYTE(v232) = v44;
  v46 = &v231;
  if (v44)
LABEL_70:
    memcpy(v46, v37, v45);
  *((_BYTE *)v46 + v45) = 0;
  v50 = v231;
  v239[0] = v232;
  *(_QWORD *)((char *)v239 + 7) = *(_QWORD *)((char *)&v232 + 7);
  v51 = HIBYTE(v232);
  v52 = operator new(0x38uLL);
  v52[1] = 0;
  v52[2] = 0;
  v52[3] = off_24EC1FA48;
  *v52 = &off_24EC1F9F8;
  v53 = v239[0];
  v52[4] = v50;
  v52[5] = v53;
  *(_QWORD *)((char *)v52 + 47) = *(_QWORD *)((char *)v239 + 7);
  *((_BYTE *)v52 + 55) = v51;
  v239[0] = 0;
  *(_QWORD *)((char *)v239 + 7) = 0;
  v54 = v230;
  v229 = (char *)(v52 + 3);
  v230 = (std::__shared_weak_count *)v52;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  *(_OWORD *)v233 = v227;
  v57 = v229;
  *(_QWORD *)&v233[16] = v228;
  if (v228)
  {
    v58 = (unint64_t *)&v228->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = v230;
  *(_QWORD *)&v234 = v57;
  *((_QWORD *)&v234 + 1) = v230;
  if (v230)
  {
    v61 = (unint64_t *)&v230->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v235 = v57;
    do
      v63 = __ldaxr(v61);
    while (__stlxr(v63 - 1, v61));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  else
  {
    v235 = v57;
  }
  v64 = v228;
  if (v228)
  {
    v65 = (unint64_t *)&v228->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = *(_QWORD *)v233;
  if (v235[31] >= 0)
    v68 = v235 + 8;
  else
    v68 = (char *)*((_QWORD *)v235 + 1);
  v69 = _os_log_pack_fill();
  *(_DWORD *)v69 = 136315138;
  *(_QWORD *)(v69 + 4) = v68;
  v70 = operator new();
  v71 = *(unsigned __int8 *)(v24 + 39);
  v72 = *(const char **)(v24 + 16);
  v73 = *(_QWORD *)(v24 + 24);
  v74 = v234;
  *(_OWORD *)(v70 + 8) = *(_OWORD *)&v233[8];
  if ((v71 & 0x80u) != 0)
    v71 = v73;
  else
    v72 = v193;
  *(_QWORD *)v70 = v67;
  *(_QWORD *)&v233[8] = 0;
  *(_QWORD *)&v233[16] = 0;
  *(_OWORD *)(v70 + 24) = v74;
  v234 = 0uLL;
  *(_QWORD *)(v70 + 40) = v72;
  *(_QWORD *)(v70 + 48) = v71;
  *(_BYTE *)(v70 + 56) = 1;
  v231 = 0;
  *(_QWORD *)&v227 = v70;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v227);
  a4 = v197;
  v75 = v227;
  *(_QWORD *)&v227 = 0;
  if (v75)
  {
    v76 = *(std::__shared_weak_count **)(v75 + 32);
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = *(std::__shared_weak_count **)(v75 + 16);
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    MEMORY[0x227684CE8](v75, 0x10F0C40B62ED6C6);
    v82 = v231;
    v231 = 0;
    if (v82)
    {
      v83 = (std::__shared_weak_count *)v82[4];
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v86 = (std::__shared_weak_count *)v82[2];
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      MEMORY[0x227684CE8](v82, 0x10F0C40B62ED6C6);
    }
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = *(std::__shared_weak_count **)&v233[16];
  if (*(_QWORD *)&v233[16])
  {
    v93 = (unint64_t *)(*(_QWORD *)&v233[16] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
LABEL_131:
  if (v36)
  {
    v95 = (const char *)&__dst;
    if (v212 < 0)
      v95 = (const char *)__dst;
    sub_22322C138((uint64_t)&v201, "%s", v95);
    sub_223182C08((uint64_t)&v201);
  }
  sub_223182C08((uint64_t)&v201);
  v96 = v209;
  if (v209)
  {
    v97 = (unint64_t *)&v209->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (SHIBYTE(v212) < 0)
    operator delete(__dst);
  v213[0] = *MEMORY[0x24BEDB7F0];
  v99 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v213 + *(_QWORD *)(v213[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v214 = v99;
  v215 = MEMORY[0x24BEDB848] + 16;
  if (v221 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  result = MEMORY[0x227684BE0](v224);
  v6 = v200;
  a3 = v195;
LABEL_145:
  if (a4)
  {
    if (*(_QWORD *)(a3 + 1232) != v6)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/FrameTimer.cpp", 45, (uint64_t)"!frame || frame->timestamp == frame_timestamp", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
  }
  if (!*(_BYTE *)(a1 + 16))
  {
    v100 = (uint64_t *)(a1 + 8);
LABEL_295:
    *(_BYTE *)(a1 + 16) = 1;
    goto LABEL_296;
  }
  v100 = (uint64_t *)(a1 + 8);
  if (*(_QWORD *)(a1 + 8) >= v6)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/FrameTimer.cpp", 47, (uint64_t)"!current_frame_timestamp_ || *current_frame_timestamp_ < frame_timestamp", 72, (uint64_t)"Non-monotonic frame timestamp", 29, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
    v101 = *(unsigned __int8 *)(a1 + 16);
    v226 = v6;
    if (!v101)
      goto LABEL_295;
  }
  else
  {
    v226 = v6;
  }
  if (*v100 > v6)
  {
    sub_22379F4AC(&v225);
    result = v225;
    if (**(int **)(v225 + 56) > 5)
      goto LABEL_294;
    v102 = *(unsigned __int8 *)(v225 + 72);
    v103 = *(_BYTE *)(v225 + 72) != 0;
    result = sub_22322F254(v225, "OSLogSurrogateAppender", 1, 0);
    v104 = result;
    if (((result == 0) & ~v103) != 0)
      goto LABEL_294;
    sub_223195210((uint64_t)v213);
    v105 = sub_2231813E8(&v214, (uint64_t)"Timestamp update ", 17);
    v106 = sub_22379F5A0(v105);
    v107 = sub_2231813E8(v106, (uint64_t)" -> ", 4);
    v108 = sub_22379F5A0(v107);
    sub_2231813E8(v108, (uint64_t)" is non-monotonic", 17);
    v198 = v102;
    if ((v223 & 0x10) != 0)
    {
      v111 = v222;
      if (v222 < v219)
      {
        v222 = v219;
        v111 = v219;
      }
      v112 = &v218;
    }
    else
    {
      if ((v223 & 8) == 0)
      {
        v109 = 0;
        HIBYTE(v212) = 0;
        v110 = (void **)&__dst;
        goto LABEL_172;
      }
      v112 = &v216;
      v111 = v217;
    }
    v113 = *v112;
    v109 = v111 - (_QWORD)*v112;
    if (v109 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v109 >= 0x17)
    {
      v114 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v109 | 7) != 0x17)
        v114 = v109 | 7;
      v115 = v114 + 1;
      v110 = (void **)operator new(v114 + 1);
      v211 = v109;
      v212 = v115 | 0x8000000000000000;
      __dst = v110;
    }
    else
    {
      HIBYTE(v212) = v111 - *(_BYTE *)v112;
      v110 = (void **)&__dst;
      if (!v109)
      {
LABEL_172:
        *((_BYTE *)v110 + v109) = 0;
        v201 = &v225;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v203 = std::chrono::system_clock::now().__d_.__rep_;
        v204 = 5;
        v205 = "unknown file";
        v206 = 35;
        v208 = 0;
        v209 = 0;
        v207 = "unknown function";
        if (v212 >= 0)
          v116 = (void **)&__dst;
        else
          v116 = __dst;
        v117 = *v201;
        v118 = (const char *)(*v201 + 16);
        v194 = *v201;
        v196 = v118;
        if (*(char *)(*v201 + 39) < 0)
        {
          v118 = *(const char **)(v117 + 16);
          v119 = *(_QWORD *)(v117 + 24);
        }
        else
        {
          v119 = *(unsigned __int8 *)(*v201 + 39);
        }
        v120 = v104;
        v121 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v121 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v233);
          sub_223199C58("com.apple.cv3d", (unint64_t)v233, &xmmword_255788F40);
          if ((_BYTE)v234 && (v233[23] & 0x80000000) != 0)
            operator delete(*(void **)v233);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v122 = (const char *)&xmmword_255788F40;
        else
          v122 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v123 = byte_255788F57;
        else
          v123 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v233 = os_log_create(v122, v118);
        v124 = &v233[8];
        if (v123 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v123 >= 0x17)
        {
          v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v123 | 7) != 0x17)
            v125 = v123 | 7;
          v126 = v125 + 1;
          v124 = operator new(v125 + 1);
          *(_QWORD *)&v233[16] = v123;
          *(_QWORD *)&v234 = v126 | 0x8000000000000000;
          *(_QWORD *)&v233[8] = v124;
        }
        else
        {
          BYTE7(v234) = v123;
          if (!v123)
          {
LABEL_193:
            v124[v123] = 0;
            BYTE8(v234) = 1;
            v127 = (char *)&v235;
            if (v119 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v128 = v120;
            if (v119 >= 0x17)
            {
              v130 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v119 | 7) != 0x17)
                v130 = v119 | 7;
              v131 = v130 + 1;
              v127 = (char *)operator new(v130 + 1);
              v129 = (const char *)v116;
              v236 = v119;
              v237 = v131 | 0x8000000000000000;
              v235 = v127;
            }
            else
            {
              HIBYTE(v237) = v119;
              v129 = (const char *)v116;
              if (!v119)
              {
LABEL_201:
                v127[v119] = 0;
                v238 = 1;
                v132 = *(NSObject **)v233;
                if (SHIBYTE(v237) < 0)
                  operator delete(v235);
                if (BYTE8(v234) && SBYTE7(v234) < 0)
                  operator delete(*(void **)&v233[8]);
                if (*(_QWORD *)v233)
                  os_release(*(void **)v233);
                if (!v128 || !*(_QWORD *)(v128 + 24))
                {
                  os_log_type_enabled(v132, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v233 = 136315138;
                  *(_QWORD *)&v233[4] = v129;
                  v139 = (void *)_os_log_send_and_compose_impl();
                  v140 = v198;
                  if (v139)
                    free(v139);
                  goto LABEL_280;
                }
                v133 = _os_log_pack_size();
                v134 = (std::__shared_weak_count_vtbl *)operator new(v133, (std::align_val_t)8uLL);
                v135 = (std::__shared_weak_count *)operator new();
                v135->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v135->__shared_owners_ = 0;
                v135->__shared_weak_owners_ = 0;
                v135[1].__vftable = v134;
                *(_QWORD *)&v227 = v134;
                *((_QWORD *)&v227 + 1) = v134;
                v229 = 0;
                v230 = 0;
                v228 = v135;
                v136 = strlen(v129);
                if (v136 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v137 = v136;
                if (v136 >= 0x17)
                {
                  v141 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v136 | 7) != 0x17)
                    v141 = v136 | 7;
                  v142 = v141 + 1;
                  v138 = operator new(v141 + 1);
                  *(_QWORD *)&v232 = v137;
                  *((_QWORD *)&v232 + 1) = v142 | 0x8000000000000000;
                  v231 = v138;
                }
                else
                {
                  HIBYTE(v232) = v136;
                  v138 = &v231;
                  if (!v136)
                  {
LABEL_220:
                    *((_BYTE *)v138 + v137) = 0;
                    v143 = v231;
                    v239[0] = v232;
                    *(_QWORD *)((char *)v239 + 7) = *(_QWORD *)((char *)&v232 + 7);
                    v144 = HIBYTE(v232);
                    v145 = operator new(0x38uLL);
                    v145[1] = 0;
                    v145[2] = 0;
                    v145[3] = off_24EC1FA48;
                    *v145 = &off_24EC1F9F8;
                    v146 = v239[0];
                    v145[4] = v143;
                    v145[5] = v146;
                    *(_QWORD *)((char *)v145 + 47) = *(_QWORD *)((char *)v239 + 7);
                    *((_BYTE *)v145 + 55) = v144;
                    v239[0] = 0;
                    *(_QWORD *)((char *)v239 + 7) = 0;
                    v147 = v230;
                    v229 = (char *)(v145 + 3);
                    v230 = (std::__shared_weak_count *)v145;
                    if (v147)
                    {
                      v148 = (unint64_t *)&v147->__shared_owners_;
                      do
                        v149 = __ldaxr(v148);
                      while (__stlxr(v149 - 1, v148));
                      if (!v149)
                      {
                        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                        std::__shared_weak_count::__release_weak(v147);
                      }
                    }
                    *(_OWORD *)v233 = v227;
                    v150 = v229;
                    *(_QWORD *)&v233[16] = v228;
                    if (v228)
                    {
                      v151 = (unint64_t *)&v228->__shared_owners_;
                      do
                        v152 = __ldxr(v151);
                      while (__stxr(v152 + 1, v151));
                    }
                    v153 = v230;
                    *(_QWORD *)&v234 = v150;
                    *((_QWORD *)&v234 + 1) = v230;
                    if (v230)
                    {
                      v154 = (unint64_t *)&v230->__shared_owners_;
                      do
                        v155 = __ldxr(v154);
                      while (__stxr(v155 + 1, v154));
                      v235 = v150;
                      do
                        v156 = __ldaxr(v154);
                      while (__stlxr(v156 - 1, v154));
                      if (!v156)
                      {
                        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                        std::__shared_weak_count::__release_weak(v153);
                      }
                    }
                    else
                    {
                      v235 = v150;
                    }
                    v157 = v228;
                    if (v228)
                    {
                      v158 = (unint64_t *)&v228->__shared_owners_;
                      do
                        v159 = __ldaxr(v158);
                      while (__stlxr(v159 - 1, v158));
                      if (!v159)
                      {
                        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                        std::__shared_weak_count::__release_weak(v157);
                      }
                    }
                    v160 = *(_QWORD *)v233;
                    if (v235[31] >= 0)
                      v161 = v235 + 8;
                    else
                      v161 = (char *)*((_QWORD *)v235 + 1);
                    v162 = _os_log_pack_fill();
                    *(_DWORD *)v162 = 136315138;
                    *(_QWORD *)(v162 + 4) = v161;
                    v163 = operator new();
                    v164 = *(unsigned __int8 *)(v194 + 39);
                    v165 = *(const char **)(v194 + 16);
                    v166 = *(_QWORD *)(v194 + 24);
                    v167 = v234;
                    *(_OWORD *)(v163 + 8) = *(_OWORD *)&v233[8];
                    if ((v164 & 0x80u) != 0)
                      v164 = v166;
                    else
                      v165 = v196;
                    *(_QWORD *)v163 = v160;
                    *(_QWORD *)&v233[8] = 0;
                    *(_QWORD *)&v233[16] = 0;
                    *(_OWORD *)(v163 + 24) = v167;
                    v234 = 0uLL;
                    *(_QWORD *)(v163 + 40) = v165;
                    *(_QWORD *)(v163 + 48) = v164;
                    *(_BYTE *)(v163 + 56) = 16;
                    v231 = 0;
                    *(_QWORD *)&v227 = v163;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v128 + 24) + 40))(*(_QWORD *)(v128 + 24), &v227);
                    v168 = v227;
                    *(_QWORD *)&v227 = 0;
                    if (v168)
                    {
                      v169 = *(std::__shared_weak_count **)(v168 + 32);
                      if (v169)
                      {
                        v170 = (unint64_t *)&v169->__shared_owners_;
                        do
                          v171 = __ldaxr(v170);
                        while (__stlxr(v171 - 1, v170));
                        if (!v171)
                        {
                          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                          std::__shared_weak_count::__release_weak(v169);
                        }
                      }
                      v172 = *(std::__shared_weak_count **)(v168 + 16);
                      if (v172)
                      {
                        v173 = (unint64_t *)&v172->__shared_owners_;
                        do
                          v174 = __ldaxr(v173);
                        while (__stlxr(v174 - 1, v173));
                        if (!v174)
                        {
                          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                          std::__shared_weak_count::__release_weak(v172);
                        }
                      }
                      MEMORY[0x227684CE8](v168, 0x10F0C40B62ED6C6);
                      v175 = v231;
                      v231 = 0;
                      if (v175)
                      {
                        v176 = (std::__shared_weak_count *)v175[4];
                        if (v176)
                        {
                          v177 = (unint64_t *)&v176->__shared_owners_;
                          do
                            v178 = __ldaxr(v177);
                          while (__stlxr(v178 - 1, v177));
                          if (!v178)
                          {
                            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                            std::__shared_weak_count::__release_weak(v176);
                          }
                        }
                        v179 = (std::__shared_weak_count *)v175[2];
                        if (v179)
                        {
                          v180 = (unint64_t *)&v179->__shared_owners_;
                          do
                            v181 = __ldaxr(v180);
                          while (__stlxr(v181 - 1, v180));
                          if (!v181)
                          {
                            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                            std::__shared_weak_count::__release_weak(v179);
                          }
                        }
                        MEMORY[0x227684CE8](v175, 0x10F0C40B62ED6C6);
                      }
                    }
                    v182 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
                    v140 = v198;
                    if (*((_QWORD *)&v234 + 1))
                    {
                      v183 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
                      do
                        v184 = __ldaxr(v183);
                      while (__stlxr(v184 - 1, v183));
                      if (!v184)
                      {
                        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                        std::__shared_weak_count::__release_weak(v182);
                      }
                    }
                    v185 = *(std::__shared_weak_count **)&v233[16];
                    if (*(_QWORD *)&v233[16])
                    {
                      v186 = (unint64_t *)(*(_QWORD *)&v233[16] + 8);
                      do
                        v187 = __ldaxr(v186);
                      while (__stlxr(v187 - 1, v186));
                      if (!v187)
                      {
                        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                        std::__shared_weak_count::__release_weak(v185);
                      }
                    }
LABEL_280:
                    if (v140)
                    {
                      v188 = (const char *)&__dst;
                      if (v212 < 0)
                        v188 = (const char *)__dst;
                      sub_22322C138((uint64_t)&v201, "%s", v188);
                      sub_223182C08((uint64_t)&v201);
                    }
                    sub_223182C08((uint64_t)&v201);
                    v189 = v209;
                    if (v209)
                    {
                      v190 = (unint64_t *)&v209->__shared_owners_;
                      do
                        v191 = __ldaxr(v190);
                      while (__stlxr(v191 - 1, v190));
                      if (!v191)
                      {
                        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                        std::__shared_weak_count::__release_weak(v189);
                      }
                    }
                    if (SHIBYTE(v212) < 0)
                      operator delete(__dst);
                    v213[0] = *MEMORY[0x24BEDB7F0];
                    v192 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v213 + *(_QWORD *)(v213[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v214 = v192;
                    v215 = MEMORY[0x24BEDB848] + 16;
                    if (v221 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    result = MEMORY[0x227684BE0](v224);
                    v6 = v226;
LABEL_294:
                    if (!*(_BYTE *)(a1 + 16))
                      goto LABEL_295;
                    goto LABEL_296;
                  }
                }
                memcpy(v138, v129, v137);
                goto LABEL_220;
              }
            }
            memmove(v127, v118, v119);
            goto LABEL_201;
          }
        }
        memmove(v124, v122, v123);
        goto LABEL_193;
      }
    }
    memmove(v110, v113, v109);
    goto LABEL_172;
  }
LABEL_296:
  *v100 = v6;
  return result;
}

void sub_2237A0F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  if (*(_BYTE *)(v31 - 168) && *(char *)(v31 - 169) < 0)
    operator delete(*(void **)(v31 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a16);
  if (a30 < 0)
  {
    operator delete(__p);
    sub_223195348((uint64_t)&a31);
    _Unwind_Resume(a1);
  }
  sub_223195348((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_2237A111C()
{
  JUMPOUT(0x227684CE8);
}

void sub_2237A1130(uint64_t a1, unint64_t a2, char **a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,__int128 __p,uint64_t a34,int a35,int a36,int a37,int a38,int a39,int a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,__int128 a51,uint64_t a52,int a53,int a54,int a55,int a56,int a57,int a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;
  _QWORD *v68;
  char **v69;
  char *v70;
  char *v71;
  uint64_t v72;
  __n128 *v73;
  unint64_t v74;
  unint64_t v75;
  __n128 *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  __n128 *v82;
  char *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  _QWORD *v96;
  __int128 v97;
  _QWORD *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char **v114;
  char *v115;
  char *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t v120;
  char *v121;
  _QWORD *v122;
  double v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  const std::nothrow_t *v130;
  unint64_t v131;
  double *v132;
  BOOL v133;
  unint64_t v134;
  size_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  double *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *i;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  int v160;
  __int128 v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  int v166;
  _BYTE *v167;
  _BYTE *v168;
  uint64_t v169;
  char *v170;
  size_t v171;
  char *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  _OWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void **v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  void *v228;
  void *v229;
  void **v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _OWORD *v240;
  unint64_t v242;
  char **v243;
  _QWORD *v244;
  uint64_t v245;
  unint64_t vars0;
  uint64_t vars8;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  __int128 v251;
  uint64_t v252;

  a67 = *MEMORY[0x24BDAC8D0];
  a22 = 0uLL;
  *(_QWORD *)&a23 = 0;
  v245 = a1;
  vars0 = a2;
  if (!a2)
  {
    v102 = 0;
    v68 = 0;
    v101 = 0;
    goto LABEL_52;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v67 = 3 * a2;
  v68 = operator new(24 * a2);
  v69 = a3;
  v243 = &a3[v67];
  *(_QWORD *)&a22 = v68;
  *((_QWORD *)&a22 + 1) = v68;
  *(_QWORD *)&a23 = &v68[v67];
  do
  {
LABEL_5:
    v70 = *v69;
    v71 = v69[1];
    a32 = 0;
    __p = 0uLL;
    v72 = v71 - v70;
    if (v71 == v70)
    {
      v86 = 0;
      v73 = 0;
      v85 = 0;
      v87 = a23;
      if ((unint64_t)v68 >= (unint64_t)a23)
        goto LABEL_30;
      goto LABEL_4;
    }
    if (v72 < 0)
      sub_22316E078();
    v73 = (__n128 *)operator new((unint64_t)v72 >> 1);
    a32 = v73;
    *(_QWORD *)&__p = v73;
    *((_QWORD *)&__p + 1) = &v73[v72 >> 5];
    do
    {
      while (1)
      {
        while (1)
        {
          v75 = *(_QWORD *)v70;
          v74 = *((_QWORD *)v70 + 1);
          if ((unint64_t)v73 >= *((_QWORD *)&__p + 1))
            break;
          v73->n128_u64[0] = v75;
          v73->n128_u64[1] = v74;
          *(_QWORD *)&__p = ++v73;
          v70 += 32;
          if (v70 == v71)
            goto LABEL_27;
        }
        v76 = (__n128 *)a32;
        v77 = ((char *)v73 - (_BYTE *)a32) >> 4;
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 60)
          sub_22316E078();
        v79 = *((_QWORD *)&__p + 1) - (_QWORD)a32;
        if ((uint64_t)(*((_QWORD *)&__p + 1) - (_QWORD)a32) >> 3 > v78)
          v78 = v79 >> 3;
        v80 = (unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v78;
        if (v80)
        {
          if (v80 >> 60)
            sub_223174E94();
          v81 = (char *)operator new(16 * v80);
          v82 = (__n128 *)&v81[16 * v77];
          v83 = &v81[16 * v80];
          v82->n128_u64[0] = v75;
          v82->n128_u64[1] = v74;
          v84 = (uint64_t)&v82[1];
          if (v73 == v76)
          {
LABEL_25:
            a32 = v82;
            *((_QWORD *)&__p + 1) = v83;
            v76 = v73;
            break;
          }
        }
        else
        {
          v82 = (__n128 *)(16 * v77);
          v83 = 0;
          v82->n128_u64[0] = v75;
          v82->n128_u64[1] = v74;
          v84 = 16 * v77 + 16;
          if (v73 == v76)
            goto LABEL_25;
        }
        do
        {
          a4 = v73[-1];
          v82[-1] = a4;
          --v82;
          --v73;
        }
        while (v73 != v76);
        a32 = v82;
        *((_QWORD *)&__p + 1) = v83;
        if (v76)
          break;
        v73 = (__n128 *)v84;
        *(_QWORD *)&__p = v84;
        v70 += 32;
        if (v70 == v71)
          goto LABEL_27;
      }
      operator delete(v76);
      v73 = (__n128 *)v84;
      *(_QWORD *)&__p = v84;
      v70 += 32;
    }
    while (v70 != v71);
LABEL_27:
    v85 = a32;
    v86 = *((_QWORD *)&__p + 1);
    v68 = (_QWORD *)*((_QWORD *)&a22 + 1);
    v87 = a23;
    if (*((_QWORD *)&a22 + 1) < (unint64_t)a23)
    {
LABEL_4:
      *v68 = v85;
      v68[1] = v73;
      v68[2] = v86;
      v68 += 3;
      *((_QWORD *)&a22 + 1) = v68;
      v69 += 3;
      if (v69 == v243)
        break;
      goto LABEL_5;
    }
LABEL_30:
    v88 = (_QWORD *)a22;
    v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v68 - a22) >> 3);
    v90 = v89 + 1;
    if (v89 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v91 = 0xAAAAAAAAAAAAAAABLL * ((v87 - (uint64_t)a22) >> 3);
    if (2 * v91 > v90)
      v90 = 2 * v91;
    if (v91 >= 0x555555555555555)
      v92 = 0xAAAAAAAAAAAAAAALL;
    else
      v92 = v90;
    if (v92 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v93 = (char *)operator new(24 * v92);
    v94 = &v93[24 * v89];
    *(_QWORD *)v94 = v85;
    *((_QWORD *)v94 + 1) = v73;
    *((_QWORD *)v94 + 2) = v86;
    v95 = v94 + 24;
    if (v68 == v88)
    {
      *(_QWORD *)&a22 = &v93[24 * v89];
      *(_QWORD *)&a23 = &v93[24 * v92];
      if (v68)
        goto LABEL_45;
    }
    else
    {
      v96 = v68;
      do
      {
        v97 = *(_OWORD *)(v96 - 3);
        v96 -= 3;
        a4.n128_u64[0] = v97;
        *(_OWORD *)(v94 - 24) = v97;
        v94 -= 24;
        *((_QWORD *)v94 + 2) = v96[2];
        *v96 = 0;
        v96[1] = 0;
        v96[2] = 0;
      }
      while (v96 != v88);
      *(_QWORD *)&a22 = v94;
      *((_QWORD *)&a22 + 1) = v95;
      v98 = v68;
      *(_QWORD *)&a23 = &v93[24 * v92];
      do
      {
        v100 = (void *)*(v98 - 3);
        v98 -= 3;
        v99 = v100;
        if (v100)
        {
          *(v68 - 2) = v99;
          operator delete(v99);
        }
        v68 = v98;
      }
      while (v98 != v88);
      v68 = v88;
      if (v88)
LABEL_45:
        operator delete(v68);
    }
    v68 = v95;
    *((_QWORD *)&a22 + 1) = v95;
    v69 += 3;
  }
  while (v69 != v243);
  v101 = a22;
  v102 = a23;
  a1 = v245;
  a2 = vars0;
LABEL_52:
  *(_QWORD *)&v251 = v101;
  *((_QWORD *)&v251 + 1) = v68;
  v252 = v102;
  v104 = *(_QWORD *)(a1 + 232);
  v105 = *(_QWORD *)(a1 + 240);
  v103 = (_QWORD *)(a1 + 232);
  a32 = 0;
  __p = 0uLL;
  v106 = 0xAAAAAAAAAAAAAAABLL * ((v105 - v104) >> 3);
  v244 = (_QWORD *)(a1 + 232);
  v237 = v105;
  v239 = v104;
  if (v105 != v104 && a2)
  {
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v242 = 0xAAAAAAAAAAAAAAABLL * ((v105 - v104) >> 3);
    while (*(_QWORD *)(*v103 + 24 * v110) == *(_QWORD *)(*v103 + 24 * v110 + 8))
    {
LABEL_55:
      ++v110;
      v106 = v242;
      if (v110 == v242)
        goto LABEL_93;
    }
    v112 = 0;
    v113 = v111;
    while (2)
    {
      v114 = (char **)(*v103 + 24 * v110);
      v115 = *v114;
      v116 = v114[1];
      if (v115 == v116)
        goto LABEL_59;
      v117 = (_QWORD *)(v251 + 24 * v112);
      v118 = (_QWORD *)*v117;
      v119 = (_QWORD *)v117[1];
      if (v118 == v119)
        goto LABEL_59;
      v120 = 0;
      v121 = v115;
      do
      {
        v122 = v118;
        while (*v122 != *(_QWORD *)v121 || v122[1] != *((_QWORD *)v121 + 1))
        {
          v122 += 2;
          if (v122 == v119)
          {
            v122 = v119;
            break;
          }
        }
        if (v122 != v119)
          ++v120;
        v121 += 16;
      }
      while (v121 != v116);
      a4.n128_f64[0] = (double)v120;
      v124 = (double)v120 / (double)((((char *)v119 - (char *)v118) >> 4) + ((v116 - v115) >> 4) - v120);
      if (v124 <= 0.0)
        goto LABEL_59;
      if (v108 < v109)
      {
        *(_QWORD *)v108 = v110;
        *((_QWORD *)v108 + 1) = v112;
        *((double *)v108 + 2) = v124;
        v107 = v108 + 24;
        v108 += 24;
        goto LABEL_59;
      }
      v125 = 0xAAAAAAAAAAAAAAABLL * ((v108 - v113) >> 3) + 1;
      if (v125 > 0xAAAAAAAAAAAAAAALL)
      {
        *(_QWORD *)&__p = v107;
        sub_22316E078();
      }
      if (0x5555555555555556 * ((v109 - v113) >> 3) > v125)
        v125 = 0x5555555555555556 * ((v109 - v113) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v109 - v113) >> 3) >= 0x555555555555555)
        v126 = 0xAAAAAAAAAAAAAAALL;
      else
        v126 = v125;
      if (v126)
      {
        if (v126 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v127 = (char *)operator new(24 * v126);
        v103 = v244;
        v128 = &v127[8 * ((v108 - v113) >> 3)];
        *(_QWORD *)v128 = v110;
        *((_QWORD *)v128 + 1) = v112;
        *((double *)v128 + 2) = v124;
        if (v108 != v113)
        {
LABEL_84:
          v129 = v128;
          do
          {
            v111 = v129 - 24;
            a4 = *(__n128 *)(v108 - 24);
            *((_QWORD *)v129 - 1) = *((_QWORD *)v108 - 1);
            *(__n128 *)(v129 - 24) = a4;
            v108 -= 24;
            v129 -= 24;
          }
          while (v108 != v113);
          v109 = &v127[24 * v126];
          v107 = v128 + 24;
          a32 = v111;
          *((_QWORD *)&__p + 1) = v109;
          if (v113)
          {
LABEL_87:
            operator delete(v113);
            v103 = v244;
          }
LABEL_88:
          v108 = v107;
          v113 = v111;
LABEL_59:
          if (++v112 == vars0)
            goto LABEL_55;
          continue;
        }
      }
      else
      {
        v127 = 0;
        v128 = (char *)(8 * ((v108 - v113) >> 3));
        *(_QWORD *)v128 = v110;
        *((_QWORD *)v128 + 1) = v112;
        *((double *)v128 + 2) = v124;
        if (v108 != v113)
          goto LABEL_84;
      }
      break;
    }
    v111 = v128;
    v109 = &v127[24 * v126];
    v107 = v128 + 24;
    a32 = v128;
    *((_QWORD *)&__p + 1) = v109;
    if (v113)
      goto LABEL_87;
    goto LABEL_88;
  }
  v108 = 0;
  v111 = 0;
LABEL_93:
  if (v108 - v111 < 1)
  {
LABEL_97:
    sub_2237A4ED4((uint64_t)v111, (double *)v108, 0xAAAAAAAAAAAAAAABLL * ((v108 - v111) >> 3), 0, 0, (__n64)a4.n128_u64[0]);
    v248 = 0;
    v249 = 0;
    v134 = vars0;
    if (v237 == v239)
      goto LABEL_104;
  }
  else
  {
    v130 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v131 = 0xAAAAAAAAAAAAAAABLL * ((v108 - v111) >> 3);
    while (1)
    {
      v132 = (double *)operator new(24 * v131, v130);
      if (v132)
        break;
      v133 = v131 > 1;
      v131 >>= 1;
      if (!v133)
        goto LABEL_97;
    }
    v139 = v132;
    sub_2237A4ED4((uint64_t)v111, (double *)v108, 0xAAAAAAAAAAAAAAABLL * ((v108 - v111) >> 3), v132, v131, (__n64)a4.n128_u64[0]);
    operator delete(v139);
    v248 = 0;
    v249 = 0;
    v134 = vars0;
    if (v237 == v239)
    {
LABEL_104:
      v137 = 0;
      v136 = 0;
      v250 = 0;
      if (!v134)
        goto LABEL_105;
LABEL_100:
      if (v134 >> 61)
        sub_22367C394();
      v138 = operator new(8 * v134);
      v250 = v138;
      memset(v138, 255, 8 * v134);
      if (v111 == v108)
        goto LABEL_111;
LABEL_106:
      v140 = v111;
      do
      {
        v141 = *(_QWORD *)v140;
        if (v136[*(_QWORD *)v140] == -1)
        {
          v142 = *((_QWORD *)v140 + 1);
          if (v138[v142] == -1)
          {
            v136[v141] = v142;
            v138[v142] = v141;
          }
        }
        v140 += 24;
      }
      while (v140 != v108);
      goto LABEL_111;
    }
  }
  if (v106 >> 61)
    sub_22367C394();
  v135 = 8 * v106;
  v136 = operator new(8 * v106);
  v137 = &v136[v106];
  v248 = v136;
  memset(v136, 255, v135);
  v249 = (uint64_t)v137;
  v134 = vars0;
  v250 = 0;
  if (vars0)
    goto LABEL_100;
LABEL_105:
  v138 = 0;
  if (v111 != v108)
    goto LABEL_106;
LABEL_111:
  if (v111)
    operator delete(v111);
  i = (_QWORD *)v245;
  v144 = *(_QWORD *)(v245 + 16);
  if (v144)
  {
    v145 = *(_QWORD *)(v245 + 8);
    v146 = 24 * v144;
    do
    {
      v147 = *(unsigned int *)(v145 + 16);
      if ((_DWORD)v147 == -1)
        sub_22316DD70();
      a32 = &a22;
      ((void (*)(void **, uint64_t))off_24EC58CF8[v147])(&a32, v145);
      v145 += 24;
      v146 -= 24;
    }
    while (v146);
    v136 = v248;
    v137 = (_QWORD *)v249;
  }
  a26 = 0;
  a24 = 0u;
  a25 = 0u;
  a22 = 0u;
  a23 = 0u;
  if (v136 != v137)
  {
    v148 = 0;
    while (*v136 != -1)
    {
      ++v136;
      ++v148;
      if (v136 == v137)
        goto LABEL_135;
    }
    while (v136 != v137)
    {
      v149 = i[32];
      if (v148 >= (i[33] - v149) >> 7)
        sub_2236C5448();
      v150 = i;
      v151 = v149 + (v148 << 7);
      v152 = v150[2];
      if (v152)
      {
        v153 = *(_QWORD *)(v245 + 8);
        v154 = 24 * v152;
        do
        {
          a50 = v151;
          v155 = *(unsigned int *)(v153 + 16);
          if ((_DWORD)v155 == -1)
            sub_22316DD70();
          a32 = &a50;
          ((void (*)(void **, uint64_t))off_24EC58D08[v155])(&a32, v153);
          v153 += 24;
          v154 -= 24;
        }
        while (v154);
      }
      sub_2237A2550(&a22, (_OWORD *)(v151 + 56));
      ++v136;
      i = (_QWORD *)v245;
      if (v136 == v137)
        break;
      ++v148;
      while (*v136 != -1)
      {
        ++v136;
        ++v148;
        if (v136 == v137)
          goto LABEL_135;
      }
    }
  }
LABEL_135:
  a27 = 0;
  a28 = 0;
  a29 = 0;
  if (vars0)
  {
    if (vars0 >> 57)
      sub_22316E078();
    v156 = 0;
    a27 = (uint64_t)operator new(vars0 << 7, (std::align_val_t)0x40uLL);
    a28 = a27;
    a29 = a27 + (vars0 << 7);
    v157 = (unint64_t)&a32 | 0x20;
    v158 = (unint64_t)&a32 | 0x2C;
    v236 = (_QWORD *)((unint64_t)&a50 | 0x2C);
    v238 = (_QWORD *)((unint64_t)&a50 | 0x20);
    v240 = (_OWORD *)((unint64_t)&a32 | 0x38);
    while (1)
    {
      v162 = v158;
      v163 = v157;
      v164 = v250[v156];
      if (v164 == -1)
      {
        v173 = *(_QWORD **)(v245 + 224);
        sub_2237A2688((uint64_t)&a50, &a3[3 * v156]);
        v174 = v173[4];
        if (!v174)
          sub_223198474();
        v175 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 48))(v174);
        i = (_QWORD *)v245;
        if (!*(_BYTE *)(*v173 + 16))
          sub_22324A974();
        v158 = v162;
        v177 = *(_QWORD *)(*v173 + 8);
        v178 = a50;
        v179 = a52;
        *(_QWORD *)v157 = *v238;
        *(_DWORD *)(v157 + 8) = *(_DWORD *)(((unint64_t)&a50 | 0x20) + 8);
        LOBYTE(a32) = v178;
        __p = a51;
        *(_QWORD *)v162 = *v236;
        *(_DWORD *)(v162 + 8) = *(_DWORD *)(((unint64_t)&a50 | 0x2C) + 8);
        a34 = v179;
        a41 = v175;
        a42 = v176;
        a43 = v177;
        a44 = v177;
        v180 = *(_QWORD *)(v245 + 16);
        v181 = (_OWORD *)((unint64_t)&a32 | 0x38);
        if (v180)
        {
          v182 = *(_QWORD *)(v245 + 8);
          v183 = 24 * v180;
          do
          {
            a31 = (uint64_t)&a32;
            v184 = *(unsigned int *)(v182 + 16);
            if ((_DWORD)v184 == -1)
              sub_22316DD70();
            a50 = (uint64_t)&a31;
            ((void (*)(uint64_t *, uint64_t))off_24EC58CC8[v184])(&a50, v182);
            v182 += 24;
            v183 -= 24;
          }
          while (v183);
        }
        sub_2237A460C((char **)&a22, v240);
        goto LABEL_177;
      }
      v165 = (unsigned __int8 *)(*(_QWORD *)(v245 + 256) + (v164 << 7));
      v166 = *v165;
      LOBYTE(a32) = *v165;
      a34 = 0;
      __p = 0uLL;
      v168 = (_BYTE *)*((_QWORD *)v165 + 1);
      v167 = (_BYTE *)*((_QWORD *)v165 + 2);
      v169 = v167 - v168;
      if (v167 == v168)
      {
        v172 = 0;
        v170 = 0;
      }
      else
      {
        if (v169 < 0)
          sub_22316E078();
        v170 = (char *)operator new(v167 - v168);
        *(_QWORD *)&__p = v170;
        a34 = (uint64_t)&v170[16 * (v169 >> 4)];
        v171 = v169 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v170, v168, v171);
        v172 = &v170[v171];
        *((_QWORD *)&__p + 1) = &v170[v171];
      }
      v185 = *((_QWORD *)v165 + 4);
      v157 = v163;
      *(_DWORD *)(v163 + 8) = *((_DWORD *)v165 + 10);
      *(_QWORD *)v163 = v185;
      v186 = *(_QWORD *)(v165 + 44);
      v158 = v162;
      *(_DWORD *)(v162 + 8) = *((_DWORD *)v165 + 13);
      *(_QWORD *)v162 = v186;
      v187 = *(_OWORD *)(v165 + 72);
      v181 = (_OWORD *)((unint64_t)&a32 | 0x38);
      *v240 = *(_OWORD *)(v165 + 56);
      *(_OWORD *)(((unint64_t)&a32 | 0x38) + 0x10) = v187;
      sub_2237A2688((uint64_t)&a50, &a3[3 * v156]);
      i = (_QWORD *)v245;
      if (a50 == v166 && *((_QWORD *)&a51 + 1) - (_QWORD)a51 == v172 - v170)
      {
        if ((_QWORD)a51 == *((_QWORD *)&a51 + 1))
        {
LABEL_162:
          if (*(float *)&a53 == *(float *)&a35
            && *(float *)&a54 == *(float *)&a36
            && *(float *)&a55 == *(float *)&a37
            && *(float *)&a56 == *(float *)&a38
            && *(float *)&a57 == *(float *)&a39
            && *(float *)&a58 == *(float *)&a40)
          {
            if ((_QWORD)a51)
              operator delete((void *)a51);
            goto LABEL_177;
          }
        }
        else
        {
          v188 = v170;
          v189 = (_QWORD *)a51;
          while (*v189 == *v188 && v189[1] == v188[1])
          {
            v189 += 2;
            v188 += 2;
            if (v189 == *((_QWORD **)&a51 + 1))
              goto LABEL_162;
          }
        }
      }
      LOBYTE(a32) = a50;
      if (v170)
        operator delete(v170);
      __p = a51;
      a34 = a52;
      *(_QWORD *)v157 = *v238;
      *(_DWORD *)(v157 + 8) = *(_DWORD *)(((unint64_t)&a50 | 0x20) + 8);
      *(_QWORD *)v158 = *v236;
      *(_DWORD *)(v158 + 8) = *(_DWORD *)(((unint64_t)&a50 | 0x2C) + 8);
      v191 = *(_QWORD *)(v245 + 16);
      if (v191)
      {
        v192 = *(_QWORD *)(v245 + 8);
        v193 = 24 * v191;
        do
        {
          a30 = (uint64_t)&a32;
          v194 = *(unsigned int *)(v192 + 16);
          if ((_DWORD)v194 == -1)
            sub_22316DD70();
          a31 = (uint64_t)&a30;
          ((void (*)(uint64_t *, uint64_t))off_24EC58CD8[v194])(&a31, v192);
          v192 += 24;
          v193 -= 24;
        }
        while (v193);
      }
      sub_2237A4710(&a22, v240);
LABEL_177:
      v195 = a28;
      if (a28 < (unint64_t)a29)
      {
        *(_BYTE *)a28 = (_BYTE)a32;
        *(_QWORD *)(v195 + 16) = 0;
        *(_QWORD *)(v195 + 24) = 0;
        *(_QWORD *)(v195 + 8) = 0;
        *(_OWORD *)(v195 + 8) = __p;
        *(_QWORD *)(v195 + 24) = a34;
        __p = 0uLL;
        a34 = 0;
        v159 = *(_DWORD *)(v157 + 8);
        *(_QWORD *)(v195 + 32) = *(_QWORD *)v157;
        *(_DWORD *)(v195 + 40) = v159;
        v160 = *(_DWORD *)(v158 + 8);
        *(_QWORD *)(v195 + 44) = *(_QWORD *)v158;
        *(_DWORD *)(v195 + 52) = v160;
        v161 = v181[1];
        *(_OWORD *)(v195 + 56) = *v181;
        *(_OWORD *)(v195 + 72) = v161;
        a28 = v195 + 128;
      }
      else
      {
        v196 = a27;
        v197 = (a28 - a27) >> 7;
        v198 = v197 + 1;
        if ((unint64_t)(v197 + 1) >> 57)
          sub_22316E078();
        v199 = a29 - a27;
        if ((a29 - a27) >> 6 > v198)
          v198 = v199 >> 6;
        if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFF80)
          v200 = 0x1FFFFFFFFFFFFFFLL;
        else
          v200 = v198;
        if (v200)
        {
          if (v200 >> 57)
            sub_223174E94();
          v201 = (char *)operator new(v200 << 7, (std::align_val_t)0x40uLL);
        }
        else
        {
          v201 = 0;
        }
        v202 = &v201[128 * v197];
        *v202 = (char)a32;
        *(_OWORD *)(v202 + 8) = __p;
        v203 = (uint64_t)&v201[128 * v200];
        v204 = a34;
        a34 = 0;
        __p = 0uLL;
        v205 = *(_QWORD *)v157;
        *((_QWORD *)v202 + 3) = v204;
        *((_QWORD *)v202 + 4) = v205;
        *((_DWORD *)v202 + 10) = *(_DWORD *)(v157 + 8);
        *(_QWORD *)(v202 + 44) = *(_QWORD *)v158;
        *((_DWORD *)v202 + 13) = *(_DWORD *)(v158 + 8);
        v206 = *v181;
        *(_OWORD *)(v202 + 72) = v181[1];
        v207 = (uint64_t)(v202 + 128);
        *(_OWORD *)(v202 + 56) = v206;
        if (v195 == v196)
        {
          a27 = (uint64_t)&v201[128 * v197];
          a28 = (uint64_t)(v202 + 128);
          a29 = v203;
          i = (_QWORD *)v245;
        }
        else
        {
          v208 = 0;
          do
          {
            v209 = &v202[v208];
            v210 = v195 + v208;
            *(v209 - 128) = *(_BYTE *)(v195 + v208 - 128);
            *((_QWORD *)v209 - 14) = 0;
            *((_QWORD *)v209 - 13) = 0;
            *((_QWORD *)v209 - 15) = 0;
            *(_OWORD *)(v209 - 120) = *(_OWORD *)(v195 + v208 - 120);
            *((_QWORD *)v209 - 13) = *(_QWORD *)(v195 + v208 - 104);
            *(_QWORD *)(v210 - 120) = 0;
            *(_QWORD *)(v210 - 112) = 0;
            *(_QWORD *)(v210 - 104) = 0;
            v211 = *(_QWORD *)(v195 + v208 - 96);
            *((_DWORD *)v209 - 22) = *(_DWORD *)(v195 + v208 - 88);
            *((_QWORD *)v209 - 12) = v211;
            v212 = *(_QWORD *)(v195 + v208 - 84);
            *((_DWORD *)v209 - 19) = *(_DWORD *)(v195 + v208 - 76);
            *(_QWORD *)(v209 - 84) = v212;
            v213 = *(_OWORD *)(v195 + v208 - 72);
            *(_OWORD *)(v209 - 56) = *(_OWORD *)(v195 + v208 - 56);
            *(_OWORD *)(v209 - 72) = v213;
            v208 -= 128;
          }
          while (v195 + v208 != v196);
          v195 = a27;
          v214 = a28;
          a27 = (uint64_t)&v202[v208];
          a28 = (uint64_t)(v202 + 128);
          a29 = v203;
          for (i = (_QWORD *)v245; v214 != v195; v214 -= 128)
          {
            v215 = *(void **)(v214 - 120);
            if (v215)
            {
              *(_QWORD *)(v214 - 112) = v215;
              operator delete(v215);
            }
          }
        }
        if (v195)
          MEMORY[0x227684CDC](v195, 64);
        a28 = v207;
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
      }
      if (++v156 == vars0)
      {
        v217 = a27;
        v216 = a28;
        v218 = a29;
        goto LABEL_203;
      }
    }
  }
  v218 = 0;
  v216 = 0;
  v217 = 0;
LABEL_203:
  vars8 = v217;
  sub_2237A5D54((uint64_t)&a32, (uint64_t)&a22, (_QWORD *)&a23 + 1, &a25);
  if ((_QWORD)a22)
  {
    *((_QWORD *)&a22 + 1) = a22;
    operator delete((void *)a22);
  }
  a22 = 0uLL;
  *(_QWORD *)&a23 = 0;
  if (*((_QWORD *)&a23 + 1))
  {
    *(_QWORD *)&a24 = *((_QWORD *)&a23 + 1);
    operator delete(*((void **)&a23 + 1));
  }
  *((_QWORD *)&a23 + 1) = 0;
  a24 = 0uLL;
  if ((_QWORD)a25)
  {
    *((_QWORD *)&a25 + 1) = a25;
    operator delete((void *)a25);
  }
  a25 = 0uLL;
  a26 = 0;
  v219 = i[2];
  if (v219)
  {
    v220 = *(_QWORD *)(v245 + 8);
    v221 = 24 * v219;
    do
    {
      a27 = (uint64_t)&a32;
      v222 = *(unsigned int *)(v220 + 16);
      if ((_DWORD)v222 == -1)
        sub_22316DD70();
      a50 = (uint64_t)&a27;
      ((void (*)(uint64_t *, uint64_t))off_24EC58D18[v222])(&a50, v220);
      v220 += 24;
      v221 -= 24;
    }
    while (v221);
  }
  if (a32)
  {
    *(_QWORD *)&__p = a32;
    operator delete(a32);
  }
  if ((_QWORD)a25)
  {
    *((_QWORD *)&a25 + 1) = a25;
    operator delete((void *)a25);
  }
  if (*((_QWORD *)&a23 + 1))
  {
    *(_QWORD *)&a24 = *((_QWORD *)&a23 + 1);
    operator delete(*((void **)&a23 + 1));
  }
  if ((_QWORD)a22)
  {
    *((_QWORD *)&a22 + 1) = a22;
    operator delete((void *)a22);
  }
  v223 = (void **)v244;
  v224 = *v244;
  if (*v244)
  {
    v225 = *(_QWORD *)(v245 + 240);
    v226 = (void *)*v244;
    if (v225 != v224)
    {
      v227 = *(_QWORD *)(v245 + 240);
      do
      {
        v229 = *(void **)(v227 - 24);
        v227 -= 24;
        v228 = v229;
        if (v229)
        {
          *(_QWORD *)(v225 - 16) = v228;
          operator delete(v228);
          v223 = (void **)v244;
        }
        v225 = v227;
      }
      while (v227 != v224);
      v226 = *v223;
    }
    *(_QWORD *)(v245 + 240) = v224;
    v230 = v223;
    operator delete(v226);
    *v230 = 0;
    v230[1] = 0;
    v230[2] = 0;
  }
  *(_OWORD *)(v245 + 232) = v251;
  *(_QWORD *)(v245 + 248) = v252;
  v231 = *(_QWORD *)(v245 + 256);
  if (v231)
  {
    v232 = (uint64_t *)(v245 + 256);
    v233 = *(_QWORD *)(v245 + 264);
    v234 = *(_QWORD *)(v245 + 256);
    if (v233 != v231)
    {
      do
      {
        v235 = *(void **)(v233 - 120);
        if (v235)
        {
          *(_QWORD *)(v233 - 112) = v235;
          operator delete(v235);
        }
        v233 -= 128;
      }
      while (v233 != v231);
      v234 = *v232;
    }
    *(_QWORD *)(v245 + 264) = v231;
    MEMORY[0x227684CDC](v234, 64);
    *v232 = 0;
    *(_QWORD *)(v245 + 264) = 0;
    *(_QWORD *)(v245 + 272) = 0;
  }
  *(_QWORD *)(v245 + 256) = v217;
  *(_QWORD *)(v245 + 264) = v216;
  *(_QWORD *)(v245 + 272) = v218;
  if (v250)
    operator delete(v250);
  if (v248)
    operator delete(v248);
}

void sub_2237A22EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_2234791DC((uint64_t)&a35);
  sub_2233400F8((uint64_t)&a25);
  sub_22317C838(&a31);
  _Unwind_Resume(a1);
}

void sub_2237A24B4()
{
  JUMPOUT(0x2237A24BCLL);
}

uint64_t *sub_2237A24DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 120);
        if (v5)
        {
          *(_QWORD *)(v3 - 112) = v5;
          operator delete(v5);
        }
        v3 -= 128;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    MEMORY[0x227684CDC](v4, 64);
  }
  return a1;
}

_OWORD *sub_2237A2550(_QWORD *a1, _OWORD *a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD **v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v5 = (_OWORD *)a1[7];
  v4 = a1[8];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_OWORD **)(a1 + 6);
    v8 = (_OWORD *)a1[6];
    v9 = v5 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_22316E078();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_223174E94();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v6 = v14 + 16;
    if (v5 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *(v5 - 1);
        v14 -= 16;
        --v5;
      }
      while (v5 != v8);
      v5 = *v7;
    }
    a1[6] = v14;
    a1[7] = v6;
    a1[8] = &v13[16 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[7] = v6;
  return v6 - 1;
}

void sub_2237A2664(_QWORD *a1)
{
  sub_2237A4D30(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2237A2688(uint64_t a1, char **a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  float32x4_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int128 *v32;
  const double *v33;
  const double *v34;
  unsigned __int128 v35;
  unsigned __int128 v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  char *v41;
  float32x4_t v43;
  float32x4_t v44;
  char *v45;
  _QWORD *v46;
  void *v47;
  char *v48;
  void *v49;
  void *v50;
  char *i;
  uint64_t v52;
  float32x4_t *v53;
  int v54;
  int v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  simd_float3x3 v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  float v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t *v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  const char *v85;
  size_t v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  const char *v89;
  size_t v90;
  void **v91;
  uint64_t v92;
  uint64_t v93;
  __int8 *v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  size_t v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  const char *v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  uint64_t *v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  double v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  float32x4_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  float32x4_t v140;
  void **v141;
  uint64_t v142;
  _QWORD *v143;
  size_t v144;
  void *v145;
  unint64_t v146;
  const void *v147;
  uint64_t v148;
  uint64_t v149;
  void **v150;
  uint64_t v151;
  const char *v152;
  size_t v153;
  unsigned __int8 v154;
  unsigned __int8 v155;
  const char *v156;
  size_t v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  size_t v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  size_t v168;
  size_t v169;
  void ***v170;
  void *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  _QWORD *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  char *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  void **v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  void *v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  void *v229;
  void *v230;
  char *v231;
  _QWORD *v232;
  void *v233;
  char *v234;
  void *v235;
  void *v236;
  uint64_t v237;
  const char *v238;
  uint64_t v239;
  int v240;
  const char *v241;
  uint64_t v242;
  int v243;
  void *v244[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v246;
  const char *v247;
  int v248;
  const char *v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  void *v252[2];
  int64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  int v258;
  void *v259[3];
  uint64_t v260;
  int v261;
  uint64_t v262;
  int v263;
  char v264;
  void *v265;
  char *v266;
  char *v267;
  __int128 v268;
  void *v269;
  float32x4_t v270;
  std::__shared_weak_count *v271;
  char *v272;
  std::__shared_weak_count *v273;
  void **v274;
  __int128 v275;
  void *object[4];
  float32x4_t v277;
  simd_float3 v278;
  const void *v279;
  unint64_t v280;
  void *v281;
  char v282;
  unint64_t v283;
  int v284;
  uint64_t v285;
  _BYTE v286[48];
  float32x4_t v287;
  std::__shared_weak_count *v288;
  _QWORD v289[5];

  v289[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/GlobalPlaneBruteForceBuilder.cpp", 46, (uint64_t)"!Empty(cluster)", 15, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *a2;
    v3 = a2[1];
    v5 = v3 - *a2;
    v237 = a1;
    if (v3 == *a2)
    {
      v40 = 0;
      v41 = 0;
      v7 = 0;
      v10 = 0;
      v24 = 0;
      v265 = 0;
      v266 = 0;
      v267 = 0;
      v39 = 1;
      goto LABEL_52;
    }
  }
  else
  {
    v5 = v3 - v4;
    v237 = a1;
  }
  if (v5 < 0)
    sub_22316E078();
  v6 = v5 >> 5;
  v7 = (char *)operator new((unint64_t)v5 >> 1);
  v9 = &v7[16 * v6];
  v10 = v7;
  do
  {
    while (1)
    {
      v11 = *((_QWORD *)v4 + 2);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 160);
        v13 = *(_QWORD **)(v11 + 168);
        if ((_QWORD *)v12 != v13)
          goto LABEL_11;
      }
      else
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframePlaneGraphUtils.cpp", 79, (uint64_t)"vertex.kf_seg_ref != nullptr", 28, (uint64_t)&unk_224593479, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v11 = *((_QWORD *)v4 + 2);
        v12 = *(_QWORD *)(v11 + 160);
        v13 = *(_QWORD **)(v11 + 168);
        if ((_QWORD *)v12 != v13)
        {
LABEL_11:
          while (1)
          {
            v14 = *(_QWORD *)v12 == *(_QWORD *)v4 && *(_QWORD *)(v12 + 8) == *((_QWORD *)v4 + 1);
            if (v14)
              break;
            v12 += 424;
            if ((_QWORD *)v12 == v13)
            {
              v15 = 0;
              if (v10 < v9)
                goto LABEL_5;
              goto LABEL_21;
            }
          }
        }
      }
      v14 = v12 == (_QWORD)v13;
      v16 = v12 & 0xFFFFFFFFFFFFFF00;
      v12 = v12;
      if (v14)
      {
        v12 = 0;
        v16 = 0;
      }
      v15 = v16 | v12;
      if (v10 >= v9)
        break;
LABEL_5:
      *(_QWORD *)v10 = v15;
      *((_QWORD *)v10 + 1) = v11;
      v10 += 16;
      v4 += 32;
      if (v4 == v3)
        goto LABEL_36;
    }
LABEL_21:
    v17 = (v10 - v7) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      sub_22316E078();
    if ((v9 - v7) >> 3 > v18)
      v18 = (v9 - v7) >> 3;
    if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
    {
      if (v19 >> 60)
        sub_223174E94();
      v20 = (char *)operator new(16 * v19);
      v21 = (unint64_t *)&v20[16 * v17];
      v9 = &v20[16 * v19];
      *v21 = v15;
      v21[1] = v11;
      v22 = (char *)(v21 + 2);
      if (v10 == v7)
      {
LABEL_34:
        operator delete(v7);
        goto LABEL_35;
      }
    }
    else
    {
      v21 = (unint64_t *)(16 * v17);
      v9 = 0;
      *v21 = v15;
      v21[1] = v11;
      v22 = (char *)(v21 + 2);
      if (v10 == v7)
        goto LABEL_34;
    }
    do
    {
      *((_OWORD *)v21 - 1) = *((_OWORD *)v10 - 1);
      v21 -= 2;
      v10 -= 16;
    }
    while (v10 != v7);
    if (v7)
      goto LABEL_34;
LABEL_35:
    v7 = (char *)v21;
    v10 = v22;
    v4 += 32;
  }
  while (v4 != v3);
LABEL_36:
  v265 = 0;
  v266 = 0;
  v267 = 0;
  if (v7 == v10)
  {
    v5 = 0;
    v24 = 0;
    v39 = 1;
    v40 = v10;
    v41 = v7;
    v10 = v7;
  }
  else
  {
    if ((unint64_t)-((v7 - v10) >> 4) >> 61)
      sub_22316E078();
    v23 = (char *)operator new(-8 * ((v7 - v10) >> 4));
    v24 = (uint64_t *)v23;
    v265 = v23;
    v267 = &v23[-8 * ((v7 - v10) >> 4)];
    v25 = v10 - v7 - 16;
    v26 = v7;
    v27 = v23;
    if (v25 >= 0x100)
    {
      v28 = v25 >> 4;
      if (v23 >= &v7[(v25 & 0xFFFFFFFFFFFFFFF0) + 8] || (v26 = v7, v27 = v23, v7 >= &v23[8 * v28 + 8]))
      {
        v29 = v28 + 1;
        v30 = (v28 + 1) & 3;
        if (!v30)
          v30 = 4;
        v31 = v29 - v30;
        v26 = &v7[16 * (v29 - v30)];
        v27 = &v23[8 * v31];
        v32 = (unsigned __int128 *)(v23 + 16);
        v33 = (const double *)(v7 + 32);
        do
        {
          v34 = v33 - 4;
          *(float64x2x2_t *)(&v8 - 1) = vld2q_f64(v34);
          v35 = (unsigned __int128)vld2q_f64(v33);
          *(v32 - 1) = v36;
          *v32 = v35;
          v32 += 2;
          v33 += 8;
          v31 -= 4;
        }
        while (v31);
      }
    }
    v37 = v27 - v23;
    do
    {
      v38 = *(_QWORD *)v26;
      v26 += 16;
      *(_QWORD *)v27 = v38;
      v27 += 8;
      v37 += 8;
    }
    while (v26 != v10);
    v39 = 0;
    v5 = (uint64_t)&v23[v37];
    v266 = &v23[v37];
    v40 = v10;
    v41 = v7;
  }
LABEL_52:
  sub_2236A576C((v5 - (uint64_t)v24) >> 3, v24, (uint64_t)&v260, v8);
  v257 = v260;
  v258 = v261;
  v255 = v262;
  v256 = v263;
  v268 = 0uLL;
  v269 = 0;
  sub_2232EA6AC((uint64_t)&v268, (v40 - v41) >> 4);
  v274 = (void **)v257;
  *(_QWORD *)((char *)&v275 + 4) = v255;
  LODWORD(v275) = v258;
  HIDWORD(v275) = v256;
  if ((v39 & 1) == 0)
  {
    v43.i32[1] = 0;
    for (i = v7; i != v10; i += 16)
    {
      v52 = *(_QWORD *)i;
      if (!*(_BYTE *)(*(_QWORD *)i + 416))
        goto LABEL_374;
      v53 = (float32x4_t *)*((_QWORD *)i + 1);
      if (*(_QWORD *)(v52 + 392) == *(_QWORD *)(v52 + 400)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/GlobalPlaneBruteForceBuilder.cpp", 59, (uint64_t)"!Empty(kp.polygons.value())", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v43.f32[0] = fabsf(*((float *)&v275 + 3));
      v54 = v43.f32[0] <= 0.052336 ? 2 : 4;
      v44.i32[0] = 1065330231;
      v55 = v43.f32[0] >= 0.99863 ? 1 : v54;
      sub_223F2B7AC((uint64_t)&v274, v55, (float32x4_t *)v286, v43, v44);
      v56 = v53[6];
      v61.columns[1] = (simd_float3)v53[7];
      v61.columns[2] = (simd_float3)v53[8];
      v57 = v53[9];
      v58 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, *(float *)v286), (float32x4_t)v61.columns[1], *(float32x2_t *)v286, 1), (float32x4_t)v61.columns[2], *(float32x4_t *)v286, 2), v57, *(float32x4_t *)v286, 3);
      v59 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, *(float *)&v286[16]), (float32x4_t)v61.columns[1], *(float32x2_t *)&v286[16], 1), (float32x4_t)v61.columns[2], *(float32x4_t *)&v286[16], 2), v57, *(float32x4_t *)&v286[16], 3);
      v60 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, *(float *)&v286[32]), (float32x4_t)v61.columns[1], *(float32x2_t *)&v286[32], 1), (float32x4_t)v61.columns[2], *(float32x4_t *)&v286[32], 2), v57, *(float32x4_t *)&v286[32], 3);
      v61.columns[0] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v287.f32[0]), (float32x4_t)v61.columns[1], *(float32x2_t *)v287.f32, 1), (float32x4_t)v61.columns[2], v287, 2), v57, v287, 3);
      *(float32x4_t *)object = v58;
      *(float32x4_t *)&object[2] = v59;
      v277 = v60;
      v278 = v61.columns[0];
      if (!*(_BYTE *)(v52 + 416))
LABEL_374:
        sub_22324A974();
      v61.columns[0].i32[0] = 1149239296;
      sub_223764EA8((uint64_t)&v53[3], (float32x2_t *)object, (uint64_t)(*(_QWORD *)(*(_QWORD *)(v52 + 392) + 8) - **(_QWORD **)(v52 + 392)) >> 4, **(_QWORD **)(v52 + 392), (uint64_t)&v270, v61, *(double *)v60.i64, *(double *)v287.i64);
      v63 = v270.i64[1];
      v62 = (_QWORD *)v270.i64[0];
      if (v270.i64[1] - v270.i64[0] < 0x30uLL)
        goto LABEL_81;
      v64 = (uint64_t *)(v270.i64[1] - 16);
      if (((v270.i8[8] - v270.i8[0]) & 0x10) != 0)
        v63 = v270.i64[1] - 16;
      if (v270.i64[0] == v63)
      {
        v66 = 0.0;
        if (((v270.i8[8] - v270.i8[0]) & 0x10) != 0)
          goto LABEL_79;
      }
      else
      {
        v65 = *v64;
        v66 = 0.0;
        do
        {
          v67 = v62[1];
          v68 = (double)(v67 + v64[1]) * (double)(v65 - *v62);
          v64 = v62 + 2;
          v65 = v62[2];
          v69 = v66 + v68;
          *(double *)v44.i64 = (double)(v62[3] + v67) * (double)(*v62 - v65);
          v66 = v69 + *(double *)v44.i64;
          v62 += 4;
        }
        while (v62 != (_QWORD *)v63);
        v64 = v62 - 2;
        v62 = (_QWORD *)v63;
        if (((v270.i8[8] - v270.i8[0]) & 0x10) != 0)
        {
LABEL_79:
          *(double *)v44.i64 = (double)(v62[1] + v64[1]) * (double)(*v64 - *v62);
          v66 = v66 + *(double *)v44.i64;
        }
      }
      v70 = v66 * 0.5;
      if (v70 > 0.0)
        goto LABEL_168;
LABEL_81:
      sub_2237A4820(v252);
      if (**((int **)v252[0] + 7) > 5
        || ((v71 = *((unsigned __int8 *)v252[0] + 72),
             v72 = sub_22322F254((uint64_t)v252[0], "OSLogSurrogateAppender", 1, 0),
             v73 = v72,
             !v71)
          ? (v74 = v72 == 0)
          : (v74 = 0),
            v74))
      {
LABEL_168:
        v129 = (float32x4_t *)*((_QWORD *)&v268 + 1);
        if (*((_QWORD *)&v268 + 1) >= (unint64_t)v269)
          goto LABEL_169;
        goto LABEL_60;
      }
      *(_QWORD *)v286 = v252;
      *(std::chrono::steady_clock::time_point *)&v286[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v286[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v286[24] = 5;
      *(_QWORD *)&v286[32] = "unknown file";
      *(_DWORD *)&v286[40] = 67;
      v287.i64[0] = (uint64_t)"unknown function";
      v287.i64[1] = 0;
      v288 = 0;
      v76 = v270.i64[1];
      v75 = (_QWORD *)v270.i64[0];
      v77 = v270.i64[1] - v270.i64[0];
      v78 = 0.0;
      if (v270.i64[1] - v270.i64[0] >= 0x30uLL)
      {
        v79 = (uint64_t *)(v270.i64[1] - 16);
        if ((v77 & 0x10) != 0)
          v76 = v270.i64[1] - 16;
        if (v270.i64[0] == v76)
        {
          v81 = 0.0;
          if ((v77 & 0x10) != 0)
            goto LABEL_93;
        }
        else
        {
          v80 = *v79;
          v81 = 0.0;
          do
          {
            v82 = v75[1];
            v83 = (double)(v82 + v79[1]) * (double)(v80 - *v75);
            v79 = v75 + 2;
            v80 = v75[2];
            v81 = v81 + v83 + (double)(v75[3] + v82) * (double)(*v75 - v80);
            v75 += 4;
          }
          while (v75 != (_QWORD *)v76);
          v79 = v75 - 2;
          v75 = (_QWORD *)v76;
          if ((v77 & 0x10) != 0)
LABEL_93:
            v81 = v81 + (double)(v75[1] + v79[1]) * (double)(*v79 - *v75);
        }
        v78 = v81 * 0.5;
      }
      v240 = v71;
      v84 = **(_QWORD **)v286;
      v85 = (const char *)(**(_QWORD **)v286 + 16);
      v238 = v85;
      v239 = **(_QWORD **)v286;
      if (*(char *)(**(_QWORD **)v286 + 39) < 0)
      {
        v85 = *(const char **)(v84 + 16);
        v86 = *(_QWORD *)(v84 + 24);
        v88 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v88 & 1) != 0)
          goto LABEL_101;
      }
      else
      {
        v86 = *(unsigned __int8 *)(**(_QWORD **)v286 + 39);
        v87 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v87 & 1) != 0)
          goto LABEL_101;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v244);
        if ((_BYTE)v246)
        {
          xmmword_255788F40 = *(_OWORD *)v244;
          unk_255788F50 = rep;
        }
        else
        {
          byte_255788F57 = 14;
          strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_101:
      if (byte_255788F57 >= 0)
        v89 = (const char *)&xmmword_255788F40;
      else
        v89 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v90 = byte_255788F57;
      else
        v90 = *((_QWORD *)&xmmword_255788F40 + 1);
      object[0] = os_log_create(v89, v85);
      if (v90 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v242 = v77;
      if (v90 >= 0x17)
      {
        v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v90 | 7) != 0x17)
          v92 = v90 | 7;
        v93 = v92 + 1;
        v91 = (void **)operator new(v92 + 1);
        object[2] = (void *)v90;
        object[3] = (void *)(v93 | 0x8000000000000000);
        object[1] = v91;
LABEL_114:
        memmove(v91, v89, v90);
        goto LABEL_115;
      }
      HIBYTE(object[3]) = v90;
      v91 = &object[1];
      if (v90)
        goto LABEL_114;
LABEL_115:
      *((_BYTE *)v91 + v90) = 0;
      v277.i8[0] = 1;
      if (v86 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v86 >= 0x17)
      {
        v96 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v86 | 7) != 0x17)
          v96 = v86 | 7;
        v97 = v96 + 1;
        v94 = (__int8 *)operator new(v96 + 1);
        v278.i64[0] = v86;
        v278.i64[1] = v97 | 0x8000000000000000;
        v277.i64[1] = (uint64_t)v94;
      }
      else
      {
        v278.i8[15] = v86;
        v94 = &v277.i8[8];
        if (!v86)
        {
          v277.i8[8] = 0;
          LOBYTE(v279) = 1;
          v95 = object[0];
          if ((v278.i8[15] & 0x80000000) == 0)
            goto LABEL_119;
          goto LABEL_125;
        }
      }
      memmove(v94, v85, v86);
      v94[v86] = 0;
      LOBYTE(v279) = 1;
      v95 = object[0];
      if ((v278.i8[15] & 0x80000000) == 0)
      {
LABEL_119:
        if (!v277.i8[0])
          goto LABEL_128;
        goto LABEL_126;
      }
LABEL_125:
      operator delete((void *)v277.i64[1]);
      if (!v277.i8[0])
        goto LABEL_128;
LABEL_126:
      if (SHIBYTE(object[3]) < 0)
        operator delete(object[1]);
LABEL_128:
      if (object[0])
        os_release(object[0]);
      if (v73 && *(_QWORD *)(v73 + 24))
      {
        v98 = _os_log_pack_size();
        v99 = (std::__shared_weak_count_vtbl *)operator new(v98, (std::align_val_t)8uLL);
        v100 = (std::__shared_weak_count *)operator new();
        v101 = v100;
        v100->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v100->__shared_owners_;
        v100->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v100->__shared_weak_owners_ = 0;
        v100[1].__vftable = v99;
        do
          v103 = __ldxr(p_shared_owners);
        while (__stxr(v103 + 1, p_shared_owners));
        do
          v104 = __ldaxr(p_shared_owners);
        while (__stlxr(v104 - 1, p_shared_owners));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v101);
        }
        v105 = _os_log_pack_fill();
        *(_DWORD *)v105 = 134218240;
        *(double *)(v105 + 4) = v78;
        *(_WORD *)(v105 + 12) = 2048;
        *(_QWORD *)(v105 + 14) = v242 >> 4;
        v106 = (_QWORD *)operator new();
        v107 = *(unsigned __int8 *)(v239 + 39);
        v108 = v238;
        if ((v107 & 0x80u) != 0)
        {
          v108 = *(const char **)(v239 + 16);
          v107 = *(_QWORD *)(v239 + 24);
        }
        *v106 = v99;
        v106[1] = v99;
        v106[2] = v101;
        v106[3] = 0;
        v106[4] = 0;
        v106[5] = v108;
        v106[6] = v107;
        *((_BYTE *)v106 + 56) = 16;
        object[0] = v106;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v73 + 24) + 40))(*(_QWORD *)(v73 + 24), object);
        v109 = object[0];
        object[0] = 0;
        if (v109)
        {
          v110 = (std::__shared_weak_count *)*((_QWORD *)v109 + 4);
          if (v110)
          {
            v111 = (unint64_t *)&v110->__shared_owners_;
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          v113 = (std::__shared_weak_count *)*((_QWORD *)v109 + 2);
          if (v113)
          {
            v114 = (unint64_t *)&v113->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          MEMORY[0x227684CE8](v109, 0x10F0C40B62ED6C6);
        }
      }
      else
      {
        os_log_type_enabled(v95, OS_LOG_TYPE_ERROR);
        LODWORD(object[0]) = 134218240;
        *(double *)((char *)object + 4) = v78;
        WORD2(object[1]) = 2048;
        *(void **)((char *)&object[1] + 6) = (void *)(v242 >> 4);
        v116 = (void *)_os_log_send_and_compose_impl();
        if (v116)
          free(v116);
      }
      if (v240)
      {
        v118 = v270.i64[1];
        v117 = (_QWORD *)v270.i64[0];
        v119 = v270.i64[1] - v270.i64[0];
        v120 = 0.0;
        if (v270.i64[1] - v270.i64[0] >= 0x30uLL)
        {
          v121 = (uint64_t *)(v270.i64[1] - 16);
          if ((v119 & 0x10) != 0)
            v118 = v270.i64[1] - 16;
          if (v270.i64[0] == v118)
          {
            v123 = 0.0;
            if ((v119 & 0x10) != 0)
              goto LABEL_161;
          }
          else
          {
            v122 = *v121;
            v123 = 0.0;
            do
            {
              v124 = v117[1];
              v125 = (double)(v124 + v121[1]) * (double)(v122 - *v117);
              v121 = v117 + 2;
              v122 = v117[2];
              v123 = v123 + v125 + (double)(v117[3] + v124) * (double)(*v117 - v122);
              v117 += 4;
            }
            while (v117 != (_QWORD *)v118);
            v121 = v117 - 2;
            v117 = (_QWORD *)v118;
            if ((v119 & 0x10) != 0)
LABEL_161:
              v123 = v123 + (double)(v117[1] + v121[1]) * (double)(*v121 - *v117);
          }
          v120 = v123 * 0.5;
        }
        sub_22322C138((uint64_t)v286, "Polygon has wrong winding: area %f / #vertices %zu.", v120, v119 >> 4);
        sub_223182C08((uint64_t)v286);
      }
      sub_223182C08((uint64_t)v286);
      v126 = v288;
      if (!v288)
        goto LABEL_168;
      v127 = (unint64_t *)&v288->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (v128)
        goto LABEL_168;
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
      v129 = (float32x4_t *)*((_QWORD *)&v268 + 1);
      if (*((_QWORD *)&v268 + 1) >= (unint64_t)v269)
      {
LABEL_169:
        *((_QWORD *)&v268 + 1) = sub_2232EA89C((char **)&v268, (uint64_t)&v270);
        if (v270.i64[0])
        {
          v270.i64[1] = v270.i64[0];
          operator delete((void *)v270.i64[0]);
        }
        continue;
      }
LABEL_60:
      v129->i64[0] = 0;
      v129->i64[1] = 0;
      v129[1].i64[0] = 0;
      v43 = v270;
      *v129 = v270;
      v129[1].i64[0] = (uint64_t)v271;
      *((_QWORD *)&v268 + 1) = (char *)v129 + 24;
    }
  }
  *(_OWORD *)v259 = v268;
  v259[2] = v269;
  memset(object, 0, 24);
  sub_223768028((uint64_t)v259, (uint64_t)object, (uint64_t (**)())&v268);
  v45 = (char *)object[0];
  if (object[0])
  {
    v46 = object[1];
    v47 = object[0];
    if (object[1] != object[0])
    {
      v48 = (char *)object[1];
      do
      {
        v50 = (void *)*((_QWORD *)v48 - 3);
        v48 -= 24;
        v49 = v50;
        if (v50)
        {
          *(v46 - 2) = v49;
          operator delete(v49);
        }
        v46 = v48;
      }
      while (v48 != v45);
      v47 = object[0];
    }
    object[1] = v45;
    operator delete(v47);
  }
  v131 = (uint64_t *)*((_QWORD *)&v268 + 1);
  v130 = (uint64_t *)v268;
  if ((_QWORD)v268 == *((_QWORD *)&v268 + 1))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/GlobalPlaneBruteForceBuilder.cpp", 77, (uint64_t)"!Empty(union_polygons)", 22, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v131 = (uint64_t *)*((_QWORD *)&v268 + 1);
    v130 = (uint64_t *)v268;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v131 - v130) < 2)
    goto LABEL_347;
  sub_2237A4820(&v254);
  if (**(int **)(v254 + 56) > 4)
    goto LABEL_346;
  v132 = *(unsigned __int8 *)(v254 + 72);
  v133 = sub_22322F254(v254, "OSLogSurrogateAppender", 1, 0);
  v134 = v133;
  if (!v132 && !v133)
    goto LABEL_346;
  sub_223195210((uint64_t)object);
  v135 = sub_2231813E8(&object[2], (uint64_t)"Polygon unioning resulted in multiple fragments with ", 53);
  v137 = (_QWORD *)*((_QWORD *)&v268 + 1);
  v136 = (_QWORD *)v268;
  memset(v286, 0, 24);
  v138 = *((_QWORD *)&v268 + 1) - v268;
  if (*((_QWORD *)&v268 + 1) == (_QWORD)v268)
  {
    v140 = 0uLL;
  }
  else
  {
    v139 = 0xAAAAAAAAAAAAAAABLL * (v138 >> 3);
    if (v139 >> 61)
      sub_22367C394();
    *(_QWORD *)v286 = operator new(0x5555555555555558 * (v138 >> 3));
    *(_QWORD *)&v286[8] = *(_QWORD *)v286;
    *(_QWORD *)&v286[16] = *(_QWORD *)v286 + 8 * v139;
    v274 = (void **)v286;
    do
    {
      v252[0] = (void *)((uint64_t)(v136[1] - *v136) >> 4);
      sub_2237A4B60((uint64_t *)&v274, v252);
      v136 += 3;
    }
    while (v136 != v137);
    v140 = *(float32x4_t *)v286;
    v138 = *(_QWORD *)&v286[16];
  }
  v270 = v140;
  v271 = (std::__shared_weak_count *)v138;
  *(_DWORD *)&v286[24] = 0;
  sub_2237A4914((uint64_t)&v274, (uint64_t)v286, (unint64_t **)&v270);
  if (*(_DWORD *)&v286[24] == -1)
    sub_22316DD70();
  v274 = v252;
  ((void (*)(void **__return_ptr, void ***, _BYTE *))off_24EC58CB0[*(unsigned int *)&v286[24]])(v244, &v274, v286);
  if (*(_DWORD *)&v286[24] != -1)
    ((void (*)(void ***, _BYTE *))off_24EC58C68[*(unsigned int *)&v286[24]])(&v274, v286);
  if (rep >= 0)
    v141 = v244;
  else
    v141 = (void **)v244[0];
  if (rep >= 0)
    v142 = HIBYTE(rep);
  else
    v142 = (uint64_t)v244[1];
  v143 = sub_2231813E8(v135, (uint64_t)v141, v142);
  sub_2231813E8(v143, (uint64_t)" points each", 12);
  if (SHIBYTE(rep) < 0)
    operator delete(v244[0]);
  if (v270.i64[0])
  {
    v270.i64[1] = v270.i64[0];
    operator delete((void *)v270.i64[0]);
  }
  v243 = v132;
  if ((v284 & 0x10) != 0)
  {
    v146 = v283;
    if (v283 < v280)
    {
      v283 = v280;
      v146 = v280;
    }
    v147 = v279;
    v144 = v146 - (_QWORD)v279;
    if (v146 - (unint64_t)v279 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_268;
  }
  else
  {
    if ((v284 & 8) == 0)
    {
      v144 = 0;
      HIBYTE(v253) = 0;
      v145 = v252;
      goto LABEL_223;
    }
    v147 = (const void *)v277.i64[1];
    v144 = v278.i64[1] - v277.i64[1];
    if (v278.i64[1] - v277.i64[1] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_268:
      sub_22316DBC0();
  }
  if (v144 >= 0x17)
  {
    v148 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v144 | 7) != 0x17)
      v148 = v144 | 7;
    v149 = v148 + 1;
    v145 = operator new(v148 + 1);
    v252[1] = (void *)v144;
    v253 = v149 | 0x8000000000000000;
    v252[0] = v145;
    goto LABEL_222;
  }
  HIBYTE(v253) = v144;
  v145 = v252;
  if (v144)
LABEL_222:
    memmove(v145, v147, v144);
LABEL_223:
  *((_BYTE *)v145 + v144) = 0;
  v244[0] = &v254;
  v244[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v246 = 4;
  v247 = "unknown file";
  v248 = 84;
  v250 = 0;
  v251 = 0;
  v249 = "unknown function";
  if (v253 >= 0)
    v150 = v252;
  else
    v150 = (void **)v252[0];
  v151 = *(_QWORD *)v244[0];
  v152 = (const char *)(*(_QWORD *)v244[0] + 16);
  v241 = v152;
  if (*(char *)(*(_QWORD *)v244[0] + 39) < 0)
  {
    v152 = *(const char **)(v151 + 16);
    v153 = *(_QWORD *)(v151 + 24);
    v155 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v155 & 1) == 0)
    {
LABEL_386:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v286);
        sub_223199C58("com.apple.cv3d", (unint64_t)v286, &xmmword_255788F40);
        if (v286[24] && (v286[23] & 0x80000000) != 0)
          operator delete(*(void **)v286);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v153 = *(unsigned __int8 *)(*(_QWORD *)v244[0] + 39);
    v154 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v154 & 1) == 0)
      goto LABEL_386;
  }
  if (byte_255788F57 >= 0)
    v156 = (const char *)&xmmword_255788F40;
  else
    v156 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v157 = byte_255788F57;
  else
    v157 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v286 = os_log_create(v156, v152);
  v158 = &v286[8];
  if (v157 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v157 >= 0x17)
  {
    v159 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v157 | 7) != 0x17)
      v159 = v157 | 7;
    v160 = v159 + 1;
    v158 = operator new(v159 + 1);
    *(_QWORD *)&v286[16] = v157;
    *(_QWORD *)&v286[24] = v160 | 0x8000000000000000;
    *(_QWORD *)&v286[8] = v158;
    goto LABEL_243;
  }
  v286[31] = v157;
  if (v157)
LABEL_243:
    memmove(v158, v156, v157);
  v158[v157] = 0;
  v286[32] = 1;
  v161 = &v286[40];
  if (v153 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v153 >= 0x17)
  {
    v162 = (v153 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v153 | 7) != 0x17)
      v162 = v153 | 7;
    v163 = v162 + 1;
    v161 = operator new(v162 + 1);
    v287.i64[0] = v153;
    v287.i64[1] = v163 | 0x8000000000000000;
    *(_QWORD *)&v286[40] = v161;
    goto LABEL_251;
  }
  v287.i8[15] = v153;
  if (v153)
LABEL_251:
    memmove(v161, v152, v153);
  v161[v153] = 0;
  LOBYTE(v288) = 1;
  v164 = *(NSObject **)v286;
  if (v287.i8[15] < 0)
    operator delete(*(void **)&v286[40]);
  if (v286[32] && (v286[31] & 0x80000000) != 0)
    operator delete(*(void **)&v286[8]);
  if (*(_QWORD *)v286)
    os_release(*(void **)v286);
  if (v134 && *(_QWORD *)(v134 + 24))
  {
    v165 = _os_log_pack_size();
    v166 = (std::__shared_weak_count_vtbl *)operator new(v165, (std::align_val_t)8uLL);
    v167 = (std::__shared_weak_count *)operator new();
    v167->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v166;
    v270.i64[0] = (uint64_t)v166;
    v270.i64[1] = (uint64_t)v166;
    v272 = 0;
    v273 = 0;
    v271 = v167;
    v168 = strlen((const char *)v150);
    if (v168 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v169 = v168;
    if (v168 >= 0x17)
    {
      v173 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v168 | 7) != 0x17)
        v173 = v168 | 7;
      v174 = v173 + 1;
      v170 = (void ***)operator new(v173 + 1);
      *(_QWORD *)&v275 = v169;
      *((_QWORD *)&v275 + 1) = v174 | 0x8000000000000000;
      v274 = (void **)v170;
    }
    else
    {
      HIBYTE(v275) = v168;
      v170 = &v274;
      if (!v168)
        goto LABEL_273;
    }
    memcpy(v170, v150, v169);
LABEL_273:
    *((_BYTE *)v170 + v169) = 0;
    v175 = (uint64_t)v274;
    v289[0] = v275;
    *(_QWORD *)((char *)v289 + 7) = *(_QWORD *)((char *)&v275 + 7);
    v176 = HIBYTE(v275);
    v177 = operator new(0x38uLL);
    v177[1] = 0;
    v177[2] = 0;
    v177[3] = off_24EC1FA48;
    *v177 = &off_24EC1F9F8;
    v178 = v289[0];
    v177[4] = v175;
    v177[5] = v178;
    *(_QWORD *)((char *)v177 + 47) = *(_QWORD *)((char *)v289 + 7);
    *((_BYTE *)v177 + 55) = v176;
    v289[0] = 0;
    *(_QWORD *)((char *)v289 + 7) = 0;
    v179 = v273;
    v272 = (char *)(v177 + 3);
    v273 = (std::__shared_weak_count *)v177;
    if (v179)
    {
      v180 = (unint64_t *)&v179->__shared_owners_;
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    *(float32x4_t *)v286 = v270;
    v182 = v272;
    *(_QWORD *)&v286[16] = v271;
    if (v271)
    {
      v183 = (unint64_t *)&v271->__shared_owners_;
      do
        v184 = __ldxr(v183);
      while (__stxr(v184 + 1, v183));
    }
    v185 = v273;
    *(_QWORD *)&v286[24] = v182;
    *(_QWORD *)&v286[32] = v273;
    if (v273)
    {
      v186 = (unint64_t *)&v273->__shared_owners_;
      do
        v187 = __ldxr(v186);
      while (__stxr(v187 + 1, v186));
      *(_QWORD *)&v286[40] = v182;
      do
        v188 = __ldaxr(v186);
      while (__stlxr(v188 - 1, v186));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    else
    {
      *(_QWORD *)&v286[40] = v182;
    }
    v189 = v271;
    if (v271)
    {
      v190 = (unint64_t *)&v271->__shared_owners_;
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 - 1, v190));
      if (!v191)
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
      }
    }
    v192 = *(_QWORD *)v286;
    if (*(char *)(*(_QWORD *)&v286[40] + 31) >= 0)
      v193 = *(_QWORD *)&v286[40] + 8;
    else
      v193 = *(_QWORD *)(*(_QWORD *)&v286[40] + 8);
    v194 = _os_log_pack_fill();
    *(_DWORD *)v194 = 136315138;
    *(_QWORD *)(v194 + 4) = v193;
    v195 = operator new();
    v196 = *(unsigned __int8 *)(v151 + 39);
    v197 = v241;
    if ((v196 & 0x80u) != 0)
    {
      v197 = *(const char **)(v151 + 16);
      v196 = *(_QWORD *)(v151 + 24);
    }
    *(_QWORD *)v195 = v192;
    *(_OWORD *)(v195 + 8) = *(_OWORD *)&v286[8];
    *(_QWORD *)&v286[8] = 0;
    *(_QWORD *)&v286[16] = 0;
    *(_OWORD *)(v195 + 24) = *(_OWORD *)&v286[24];
    *(_QWORD *)&v286[24] = 0;
    *(_QWORD *)&v286[32] = 0;
    *(_QWORD *)(v195 + 40) = v197;
    *(_QWORD *)(v195 + 48) = v196;
    *(_BYTE *)(v195 + 56) = 16;
    v274 = 0;
    v270.i64[0] = v195;
    (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(v134 + 24) + 40))(*(_QWORD *)(v134 + 24), &v270);
    v198 = v270.i64[0];
    v270.i64[0] = 0;
    v172 = v243;
    if (v198)
    {
      v199 = *(std::__shared_weak_count **)(v198 + 32);
      if (v199)
      {
        v200 = (unint64_t *)&v199->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      v202 = *(std::__shared_weak_count **)(v198 + 16);
      if (v202)
      {
        v203 = (unint64_t *)&v202->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
        }
      }
      MEMORY[0x227684CE8](v198, 0x10F0C40B62ED6C6);
      v205 = (uint64_t)v274;
      v274 = 0;
      if (v205)
      {
        v206 = *(std::__shared_weak_count **)(v205 + 32);
        if (v206)
        {
          v207 = (unint64_t *)&v206->__shared_owners_;
          do
            v208 = __ldaxr(v207);
          while (__stlxr(v208 - 1, v207));
          if (!v208)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        v209 = *(std::__shared_weak_count **)(v205 + 16);
        if (v209)
        {
          v210 = (unint64_t *)&v209->__shared_owners_;
          do
            v211 = __ldaxr(v210);
          while (__stlxr(v211 - 1, v210));
          if (!v211)
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v209);
          }
        }
        MEMORY[0x227684CE8](v205, 0x10F0C40B62ED6C6);
      }
    }
    v212 = *(std::__shared_weak_count **)&v286[32];
    if (*(_QWORD *)&v286[32])
    {
      v213 = (unint64_t *)(*(_QWORD *)&v286[32] + 8);
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    v215 = *(std::__shared_weak_count **)&v286[16];
    if (*(_QWORD *)&v286[16])
    {
      v216 = (unint64_t *)(*(_QWORD *)&v286[16] + 8);
      do
        v217 = __ldaxr(v216);
      while (__stlxr(v217 - 1, v216));
      if (!v217)
      {
        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
        std::__shared_weak_count::__release_weak(v215);
      }
    }
  }
  else
  {
    os_log_type_enabled(v164, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v286 = 136315138;
    *(_QWORD *)&v286[4] = v150;
    v171 = (void *)_os_log_send_and_compose_impl();
    v172 = v243;
    if (v171)
      free(v171);
  }
  if (v172)
  {
    v218 = v252;
    if (v253 < 0)
      v218 = (void **)v252[0];
    sub_22322C138((uint64_t)v244, "%s", (const char *)v218);
    sub_223182C08((uint64_t)v244);
  }
  sub_223182C08((uint64_t)v244);
  v219 = v251;
  if (v251)
  {
    v220 = (unint64_t *)&v251->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  if (SHIBYTE(v253) < 0)
    operator delete(v252[0]);
  object[0] = *(void **)MEMORY[0x24BEDB7F0];
  v222 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)object + *((_QWORD *)object[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  object[2] = v222;
  object[3] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (v282 < 0)
    operator delete(v281);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v285);
LABEL_346:
  v131 = (uint64_t *)*((_QWORD *)&v268 + 1);
  v130 = (uint64_t *)v268;
LABEL_347:
  if (v130 != v131)
  {
    v223 = v130 + 3;
    if (v130 + 3 != v131)
    {
      v224 = *v130;
      do
      {
        if (v130[1] - v224 < (unint64_t)(v223[1] - *v223))
        {
          v224 = *v223;
          v130 = v223;
        }
        v223 += 3;
      }
      while (v223 != v131);
    }
  }
  *(_BYTE *)v237 = v264;
  *(_QWORD *)(v237 + 16) = 0;
  *(_QWORD *)(v237 + 24) = 0;
  *(_QWORD *)(v237 + 8) = 0;
  *(_OWORD *)(v237 + 8) = *(_OWORD *)v130;
  *(_QWORD *)(v237 + 24) = v130[2];
  *v130 = 0;
  v130[1] = 0;
  v130[2] = 0;
  *(_QWORD *)(v237 + 32) = v260;
  *(_DWORD *)(v237 + 40) = v261;
  *(_QWORD *)(v237 + 44) = v262;
  *(_DWORD *)(v237 + 52) = v263;
  v225 = v268;
  if ((_QWORD)v268)
  {
    v226 = *((_QWORD *)&v268 + 1);
    v227 = (void *)v268;
    if (*((_QWORD *)&v268 + 1) != (_QWORD)v268)
    {
      v228 = *((_QWORD *)&v268 + 1);
      do
      {
        v230 = *(void **)(v228 - 24);
        v228 -= 24;
        v229 = v230;
        if (v230)
        {
          *(_QWORD *)(v226 - 16) = v229;
          operator delete(v229);
        }
        v226 = v228;
      }
      while (v228 != v225);
      v227 = (void *)v268;
    }
    *((_QWORD *)&v268 + 1) = v225;
    operator delete(v227);
  }
  v231 = (char *)v259[0];
  if (v259[0])
  {
    v232 = v259[1];
    v233 = v259[0];
    if (v259[1] != v259[0])
    {
      v234 = (char *)v259[1];
      do
      {
        v236 = (void *)*((_QWORD *)v234 - 3);
        v234 -= 24;
        v235 = v236;
        if (v236)
        {
          *(v232 - 2) = v235;
          operator delete(v235);
        }
        v232 = v234;
      }
      while (v234 != v231);
      v233 = v259[0];
    }
    v259[1] = v231;
    operator delete(v233);
  }
  if (v265)
  {
    v266 = (char *)v265;
    operator delete(v265);
  }
  if (v7)
    operator delete(v7);
}

void sub_2237A421C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *object;
  void *v64;
  uint64_t v65;

  if (*(_BYTE *)(v65 - 184) && *(char *)(v65 - 185) < 0)
    operator delete(*(void **)(v65 - 208));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a22);
  if (a36 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&object);
  sub_22317C838(&a52);
  sub_22317C838(&a42);
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (!v64)
    _Unwind_Resume(a1);
  operator delete(v64);
  _Unwind_Resume(a1);
}

char *sub_2237A460C(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_22316E078();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_223174E94();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
  return v6 - 16;
}

_OWORD *sub_2237A4710(_QWORD *a1, _OWORD *a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD **v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v5 = (_OWORD *)a1[4];
  v4 = a1[5];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_OWORD **)(a1 + 3);
    v8 = (_OWORD *)a1[3];
    v9 = v5 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_22316E078();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_223174E94();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v6 = v14 + 16;
    if (v5 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *(v5 - 1);
        v14 -= 16;
        --v5;
      }
      while (v5 != v8);
      v5 = *v7;
    }
    a1[3] = v14;
    a1[4] = v6;
    a1[5] = &v13[16 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[4] = v6;
  return v6 - 1;
}

void sub_2237A4820(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC540);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC540))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC538);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC540);
  }
  *a1 = qword_2540CC538;
}

void sub_2237A48BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC540);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC540);
  _Unwind_Resume(a1);
}

uint64_t sub_2237A4914(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t *v21;

  if ((char *)a3[1] - (char *)*a3 <= 7)
  {
    v16 = a2;
    v17 = (std::string *)"{}";
    v18 = a2;
    v19 = (std::string *)"{}";
    v20 = (std::string *)"{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
      return ((uint64_t (*)(std::string *, uint64_t))off_24EC58C50[v4])(&v15, a2);
    }
LABEL_19:
    sub_22316DD70();
  }
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = a2;
  v19 = (std::string *)"{";
  v20 = (std::string *)"{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, uint64_t))off_24EC58C80[v6])(&v15, a2);
  v8 = *a3;
  std::to_string(&v15, **a3);
  v16 = a2;
  v17 = &v15;
  v18 = a2;
  v19 = &v15;
  v20 = &v15;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    sub_22316DD70();
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24EC58C98[v9])(&v21, a2);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    v10 = a3[1];
    v11 = v8 + 1;
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v16 = a2;
        v17 = (std::string *)",";
        v18 = a2;
        v19 = (std::string *)",";
        v20 = (std::string *)",";
        v12 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_19;
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
        ((void (*)(std::string *, uint64_t))off_24EC58C80[v12])(&v15, a2);
        std::to_string(&v15, *v11);
        v16 = a2;
        v17 = &v15;
        v18 = a2;
        v19 = &v15;
        v20 = &v15;
        v13 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v13 == -1)
          sub_22316DD70();
        v21 = &v16;
        ((void (*)(uint64_t **, uint64_t))off_24EC58C98[v13])(&v21, a2);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        ++v11;
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = a3[1];
    v11 = v8 + 1;
    if (v11 != v10)
      goto LABEL_12;
  }
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = a2;
  v19 = (std::string *)"}";
  v20 = (std::string *)"}";
  v14 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v14 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  return ((uint64_t (*)(std::string *, uint64_t))off_24EC58C80[v14])(&v15, a2);
}

void sub_2237A4B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2237A4B60(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_22367C394();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_223174E94();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

uint64_t sub_2237A4CD0(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1);
}

uint64_t sub_2237A4CE8(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 8))(*a2, **a1);
}

uint64_t sub_2237A4D00(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **a1);
}

uint64_t sub_2237A4D18(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, **a1);
}

_QWORD *sub_2237A4D30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v17;

  *a1 = &off_24EC58BF0;
  v2 = a1[32];
  if (v2)
  {
    v3 = a1[33];
    v4 = a1[32];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 120);
        if (v5)
        {
          *(_QWORD *)(v3 - 112) = v5;
          operator delete(v5);
        }
        v3 -= 128;
      }
      while (v3 != v2);
      v4 = a1[32];
    }
    a1[33] = v2;
    MEMORY[0x227684CDC](v4, 64);
  }
  v6 = a1[29];
  if (v6)
  {
    v7 = a1[30];
    v8 = (void *)a1[29];
    if (v7 != v6)
    {
      v9 = a1[30];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v7 - 16) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = (void *)a1[29];
    }
    a1[30] = v6;
    operator delete(v8);
  }
  v12 = a1[2];
  if (v12)
  {
    v13 = a1[1];
    do
    {
      v14 = *(unsigned int *)(v13 + 16);
      if ((_DWORD)v14 != -1)
        ((void (*)(char *, uint64_t))off_24EC58CE8[v14])(&v17, v13);
      *(_DWORD *)(v13 + 16) = -1;
      v13 += 24;
      --v12;
    }
    while (v12);
  }
  if (a1[3])
  {
    v15 = (_QWORD *)a1[1];
    if (a1 + 4 != v15)
      operator delete(v15);
  }
  return a1;
}

void sub_2237A4E7C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

__n64 sub_2237A4ED4(uint64_t a1, double *a2, unint64_t a3, double *a4, uint64_t a5, __n64 result)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v14;
  double *v15;
  unint64_t v16;
  __n128 v17;
  __n64 *v18;
  uint64_t v19;
  __n64 *v20;
  uint64_t v21;
  double v22;
  __int128 v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  __n64 *v28;
  uint64_t v29;
  __n64 *v30;
  unint64_t v31;
  _QWORD *n64_u64;
  double v33;
  unint64_t v34;
  unint64_t v35;
  __n64 *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const double *v47;
  double *v48;
  double *v49;
  unint64_t v50;
  BOOL v51;
  BOOL v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n64 *v57;
  uint64_t v58;
  const double *n64_f64;
  double *v60;
  double *v61;
  float64x2x3_t v62;
  float64x2x3_t v63;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      result.n64_u64[0] = *(_QWORD *)(a2 - 1);
      v8 = *(double *)(a1 + 16);
      if (result.n64_f64[0] > v8)
      {
        v9 = *(_QWORD *)a1;
        *(double *)a1 = *(a2 - 3);
        *((_QWORD *)a2 - 3) = v9;
        v10 = *(_QWORD *)(a1 + 8);
        *(double *)(a1 + 8) = *(a2 - 2);
        *((_QWORD *)a2 - 2) = v10;
        *(double *)(a1 + 16) = result.n64_f64[0];
        *(a2 - 1) = v8;
      }
      return result;
    }
    if ((uint64_t)a3 <= 0)
    {
      if ((double *)a1 != a2)
      {
        v18 = (__n64 *)(a1 + 24);
        if ((double *)(a1 + 24) != a2)
        {
          v19 = 0;
          v20 = (__n64 *)a1;
          do
          {
            result.n64_u64[0] = v20[5].n64_u64[0];
            v22 = v20[2].n64_f64[0];
            v20 = v18;
            if (result.n64_f64[0] > v22)
            {
              v23 = *(_OWORD *)v18->n64_u64;
              v24 = v19;
              do
              {
                v25 = (double *)(a1 + v24);
                v26 = *(_QWORD *)(a1 + v24 + 8);
                v25[3] = *(double *)(a1 + v24);
                *((_QWORD *)v25 + 4) = v26;
                v25[5] = *(double *)(a1 + v24 + 16);
                if (!v24)
                {
                  v21 = a1;
                  goto LABEL_13;
                }
                v24 -= 24;
              }
              while (result.n64_f64[0] > *(v25 - 1));
              v21 = a1 + v24 + 24;
LABEL_13:
              *(_OWORD *)v21 = v23;
              *(double *)(v21 + 16) = result.n64_f64[0];
            }
            v18 = v20 + 3;
            v19 += 24;
          }
          while (&v20[3] != (__n64 *)a2);
        }
      }
    }
    else
    {
      v14 = a3 >> 1;
      v15 = (double *)(a1 + 24 * (a3 >> 1));
      v16 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        sub_2237A4ED4(a1, v15, v16, a4, a5);
        sub_2237A4ED4(a1 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
        result.n64_f64[0] = sub_2237A55FC((char *)a1, (double *)(a1 + 24 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5, v17);
        return result;
      }
      sub_2237A5344(a1, v15, v16, (uint64_t)a4);
      v27 = (uint64_t)&a4[3 * v14];
      sub_2237A5344(a1 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v27);
      v28 = (__n64 *)&a4[3 * a3];
      v29 = a1 + 24;
      v30 = (__n64 *)v27;
      v31 = (unint64_t)a4;
      do
      {
        if (v30 == v28)
        {
          if (v31 == v27)
            return result;
          v34 = v29 - 24;
          v35 = (unint64_t)&a4[3 * v14 - 3] - v31;
          if (v35 >= 0x198)
          {
            v39 = 24 * (((unint64_t)&a4[3 * v14 - 3] - v31) / 0x18);
            v41 = v29 - 8 < v39 + v31 + 24 && v31 + 16 < v29 + v39;
            if (v31 >= v29 + v39 - 8 || v34 >= v31 + 16 + v39)
            {
              if (v41)
              {
                v36 = (__n64 *)v31;
              }
              else
              {
                v43 = 0;
                v44 = v35 / 0x18 + 1;
                v45 = 24 * (v44 & 0x1FFFFFFFFFFFFFFCLL);
                v36 = (__n64 *)(v31 + v45);
                v34 = v29 + v45 - 24;
                v46 = v44 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  v47 = (const double *)(v31 + v43);
                  v48 = (double *)(v29 + v43 - 24);
                  v49 = (double *)(v29 + v43 + 24);
                  *(float64x2x3_t *)result.n64_u64 = vld3q_f64(v47);
                  v47 += 6;
                  v62 = vld3q_f64(v47);
                  vst3q_f64(v48, *(float64x2x3_t *)result.n64_u64);
                  vst3q_f64(v49, v62);
                  v43 += 96;
                  v46 -= 4;
                }
                while (v46);
                if (v44 == (v44 & 0x1FFFFFFFFFFFFFFCLL))
                  return result;
              }
            }
            else
            {
              v36 = (__n64 *)v31;
            }
          }
          else
          {
            v36 = (__n64 *)v31;
          }
          do
          {
            *(__n64 *)v34 = (__n64)v36->n64_u64[0];
            *(__n64 *)(v34 + 8) = v36[1];
            result.n64_u64[0] = v36[2].n64_u64[0];
            *(double *)(v34 + 16) = result.n64_f64[0];
            v36 += 3;
            v34 += 24;
          }
          while (v36 != (__n64 *)v27);
          return result;
        }
        result.n64_u64[0] = v30[2].n64_u64[0];
        v33 = *(double *)(v31 + 16);
        if (result.n64_f64[0] <= v33)
        {
          n64_u64 = (_QWORD *)v31;
          v31 += 24;
          result.n64_f64[0] = v33;
        }
        else
        {
          n64_u64 = v30->n64_u64;
          v30 += 3;
        }
        *(_QWORD *)(v29 - 24) = *n64_u64;
        *(_QWORD *)(v29 - 16) = n64_u64[1];
        *(double *)(v29 - 8) = result.n64_f64[0];
        v29 += 24;
      }
      while (v31 != v27);
      if (v30 != v28)
      {
        v37 = v29 - 24;
        v38 = (char *)&a4[3 * a3] - (char *)v30 - 24;
        if (v38 < 0x198)
          goto LABEL_69;
        v50 = 3 * (((char *)&a4[3 * a3 - 3] - (char *)v30) / 0x18uLL);
        v51 = v29 - 8 >= (unint64_t)v30[v50 + 3].n64_u64 || (unint64_t)v30[2].n64_u64 >= v29 + v50 * 8;
        v52 = !v51;
        if ((unint64_t)v30 < v29 + v50 * 8 - 8 && v37 < (unint64_t)v30[v50 + 2].n64_u64)
          goto LABEL_69;
        if (v52)
          goto LABEL_69;
        v54 = 0;
        v55 = v38 / 0x18 + 1;
        v56 = 3 * (v55 & 0x1FFFFFFFFFFFFFFCLL);
        v57 = &v30[v56];
        v37 = v29 + v56 * 8 - 24;
        v58 = v55 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          n64_f64 = v30[v54].n64_f64;
          v60 = (double *)(v29 + v54 * 8 - 24);
          v61 = (double *)(v29 + v54 * 8 + 24);
          *(float64x2x3_t *)result.n64_u64 = vld3q_f64(n64_f64);
          n64_f64 += 6;
          v63 = vld3q_f64(n64_f64);
          vst3q_f64(v60, *(float64x2x3_t *)result.n64_u64);
          vst3q_f64(v61, v63);
          v54 += 12;
          v58 -= 4;
        }
        while (v58);
        v30 = v57;
        if (v55 != (v55 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_69:
          do
          {
            *(__n64 *)v37 = (__n64)v30->n64_u64[0];
            *(__n64 *)(v37 + 8) = v30[1];
            result.n64_u64[0] = v30[2].n64_u64[0];
            *(double *)(v37 + 16) = result.n64_f64[0];
            v30 += 3;
            v37 += 24;
          }
          while (v30 != v28);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2237A5344(uint64_t result, double *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double *v7;
  __int128 v8;
  double *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  if (a3)
  {
    v4 = a4;
    v7 = (double *)result;
    if (a3 == 2)
    {
      v9 = a2 - 3;
      if (*(a2 - 1) <= *(double *)(result + 16))
      {
        v23 = *(_OWORD *)result;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
        *(_OWORD *)a4 = v23;
        v11 = *(_OWORD *)v9;
        v12 = *((_QWORD *)a2 - 1);
      }
      else
      {
        v10 = *(_OWORD *)v9;
        *(double *)(a4 + 16) = *(a2 - 1);
        *(_OWORD *)a4 = v10;
        v11 = *(_OWORD *)result;
        v12 = *(_QWORD *)(result + 16);
      }
      *(_QWORD *)(a4 + 40) = v12;
      *(_OWORD *)(a4 + 24) = v11;
    }
    else if (a3 == 1)
    {
      v8 = *(_OWORD *)result;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
      *(_OWORD *)a4 = v8;
    }
    else if ((uint64_t)a3 > 8)
    {
      v24 = a3 >> 1;
      v25 = 24 * (a3 >> 1);
      v26 = result + v25;
      sub_2237A4ED4(result, result + v25, a3 >> 1, a4, a3 >> 1);
      result = sub_2237A4ED4(&v7[(unint64_t)v25 / 8], a2, a3 - v24, v4 + v25, a3 - v24);
      v27 = &v7[(unint64_t)v25 / 8];
      while (v27 != a2)
      {
        if (v27[2] <= v7[2])
        {
          v28 = *(_OWORD *)v7;
          *(double *)(v4 + 16) = v7[2];
          *(_OWORD *)v4 = v28;
          v4 += 24;
          v7 += 3;
          if (v7 == (double *)v26)
            goto LABEL_28;
        }
        else
        {
          v29 = *(_OWORD *)v27;
          *(double *)(v4 + 16) = v27[2];
          *(_OWORD *)v4 = v29;
          v4 += 24;
          v27 += 3;
          if (v7 == (double *)v26)
          {
LABEL_28:
            if (v27 != a2)
            {
              v30 = 0;
              do
              {
                v31 = v4 + v30 * 8;
                v32 = *(_OWORD *)&v27[v30];
                *(double *)(v31 + 16) = v27[v30 + 2];
                *(_OWORD *)v31 = v32;
                v30 += 3;
              }
              while (&v27[v30] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != (double *)v26)
      {
        v33 = 0;
        do
        {
          v34 = v4 + v33 * 8;
          v35 = *(_OWORD *)&v7[v33];
          *(double *)(v34 + 16) = v7[v33 + 2];
          *(_OWORD *)v34 = v35;
          v33 += 3;
        }
        while (&v7[v33] != (double *)v26);
      }
    }
    else if ((double *)result != a2)
    {
      v13 = *(_OWORD *)result;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
      *(_OWORD *)a4 = v13;
      v14 = (_QWORD *)(result + 24);
      if ((double *)(result + 24) != a2)
      {
        v15 = 0;
        v16 = (_OWORD *)a4;
        do
        {
          v18 = v14;
          v19 = (_OWORD *)((char *)v16 + 24);
          if (v7[5] <= *((double *)v16 + 2))
          {
            v17 = *(_OWORD *)v14;
            *((_QWORD *)v16 + 5) = v14[2];
            *v19 = v17;
          }
          else
          {
            *v19 = *v16;
            *((_QWORD *)v16 + 5) = *((_QWORD *)v16 + 2);
            v20 = a4;
            if (v16 != (_OWORD *)a4)
            {
              v21 = v15;
              while (1)
              {
                v20 = a4 + v21;
                v22 = *(double *)(a4 + v21 - 8);
                if (v7[5] <= v22)
                  break;
                *(_OWORD *)v20 = *(_OWORD *)(v20 - 24);
                *(double *)(v20 + 16) = v22;
                v21 -= 24;
                if (!v21)
                {
                  v20 = a4;
                  break;
                }
              }
            }
            *(_QWORD *)v20 = *v18;
            *(double *)(v20 + 8) = v7[4];
            *(double *)(v20 + 16) = v7[5];
          }
          v14 = v18 + 3;
          v15 += 24;
          v16 = v19;
          v7 = (double *)v18;
        }
        while (v18 + 3 != (_QWORD *)a2);
      }
    }
  }
  return result;
}

double sub_2237A55FC(char *a1, double *a2, double *a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7, __n128 a8)
{
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  double v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double *i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double *v44;
  double v45;
  double *v46;
  uint64_t v47;
  char *v48;
  double *v49;
  double *v50;
  double *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 *v54;
  uint64_t v55;
  double *v56;
  double *v57;
  double v58;
  BOOL v59;
  double *v60;
  double *v61;
  uint64_t v62;
  __n128 *v63;
  double *v64;
  uint64_t v65;
  _QWORD *v66;
  double *v67;
  double *v68;
  double *v69;
  double v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  double *v75;
  double *v76;
  double *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  double *v82;
  unint64_t v83;
  unint64_t v84;
  double *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const double *v98;
  double *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v104;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double *v110;
  double *v111;
  const double *v112;
  BOOL v113;
  float64x2x3_t v115;

  if (!a5)
    return a8.n128_f64[0];
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return a8.n128_f64[0];
    v10 = 0;
    a8.n128_f64[0] = a2[2];
    v11 = -a4;
    while (1)
    {
      v12 = (char *)v10 + (_QWORD)a1;
      v13 = *(double *)((char *)v10 + (_QWORD)a1 + 16);
      if (a8.n128_f64[0] > v13)
        break;
      v10 += 3;
      v91 = __CFADD__(v11++, 1);
      if (v91)
        return a8.n128_f64[0];
    }
    v14 = -v11;
    if (-v11 >= a5)
    {
      if (v11 == -1)
      {
        v71 = (_QWORD *)((char *)v10 + (_QWORD)a1);
        v72 = *v71;
        *v71 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v72;
        v73 = v71[1];
        v71[1] = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v73;
        v71[2] = a8.n128_u64[0];
        a2[2] = v13;
        return a8.n128_f64[0];
      }
      if (v11 > 0)
        v14 = 1 - v11;
      v24 = v14 >> 1;
      v18 = &a1[24 * (v14 >> 1) + (_QWORD)v10];
      v17 = a2;
      if (a2 != a3)
      {
        v42 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
        v17 = a2;
        do
        {
          v43 = v42 >> 1;
          v44 = &v17[3 * (v42 >> 1)];
          v45 = v44[2];
          v46 = v44 + 3;
          v42 += ~(v42 >> 1);
          if (v45 > *((double *)v18 + 2))
            v17 = v46;
          else
            v42 = v43;
        }
        while (v42);
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (v17 - a2);
      if (v18 != (char *)a2)
      {
LABEL_21:
        if (v17 == a2)
        {
          v28 = (double *)v18;
        }
        else
        {
          v25 = *(double *)v18;
          *(double *)v18 = *a2;
          *a2 = v25;
          v26 = *((_QWORD *)v18 + 1);
          *((double *)v18 + 1) = a2[1];
          *((_QWORD *)a2 + 1) = v26;
          v27 = *((_QWORD *)v18 + 2);
          *((_QWORD *)v18 + 2) = a8.n128_u64[0];
          *((_QWORD *)a2 + 2) = v27;
          v28 = (double *)(v18 + 24);
          for (i = a2 + 3; i != v17; i += 3)
          {
            if (v28 == a2)
              a2 = i;
            v30 = *(_QWORD *)v28;
            *v28 = *i;
            *(_QWORD *)i = v30;
            v31 = *((_QWORD *)v28 + 1);
            v28[1] = i[1];
            *((_QWORD *)i + 1) = v31;
            v32 = *((_QWORD *)v28 + 2);
            v28[2] = i[2];
            *((_QWORD *)i + 2) = v32;
            v28 += 3;
          }
          if (v28 != a2)
          {
            v33 = v28;
            v34 = a2;
            while (1)
            {
              v35 = *(_QWORD *)v33;
              *v33 = *v34;
              *(_QWORD *)v34 = v35;
              v36 = *((_QWORD *)v33 + 1);
              v33[1] = v34[1];
              *((_QWORD *)v34 + 1) = v36;
              v37 = *((_QWORD *)v33 + 2);
              v33[2] = v34[2];
              *((_QWORD *)v34 + 2) = v37;
              v33 += 3;
              v34 += 3;
              v38 = v33 == a2;
              if (v34 == v17)
              {
                if (v33 == a2)
                  goto LABEL_48;
                v34 = a2 + 3;
                while (1)
                {
                  v39 = *(_QWORD *)v33;
                  *v33 = *a2;
                  *(_QWORD *)a2 = v39;
                  v40 = *((_QWORD *)v33 + 1);
                  v33[1] = a2[1];
                  *((_QWORD *)a2 + 1) = v40;
                  v41 = *((_QWORD *)v33 + 2);
                  v33[2] = a2[2];
                  *((_QWORD *)a2 + 2) = v41;
                  v33 += 3;
                  v38 = v33 == a2;
                  if (v34 != v17)
                    break;
                  if (v33 == a2)
                    goto LABEL_48;
                }
              }
              if (v38)
                a2 = v34;
            }
          }
        }
        goto LABEL_48;
      }
    }
    else
    {
      if (a5 >= 0)
        v15 = a5;
      else
        v15 = a5 + 1;
      v16 = v15 >> 1;
      v17 = &a2[3 * (v15 >> 1)];
      v18 = (char *)a2;
      if ((_QWORD *)((char *)a2 - a1) != v10)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - a1 - (uint64_t)v10) >> 3);
        v18 = (char *)v10 + (_QWORD)a1;
        do
        {
          v20 = v19 >> 1;
          v21 = &v18[24 * (v19 >> 1)];
          v22 = *((double *)v21 + 2);
          v23 = v21 + 24;
          v19 += ~(v19 >> 1);
          if (v22 < v17[2])
            v19 = v20;
          else
            v18 = v23;
        }
        while (v19);
      }
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v18 - a1 - (uint64_t)v10) >> 3);
      if (v18 != (char *)a2)
        goto LABEL_21;
    }
    v28 = v17;
LABEL_48:
    a4 = -v24 - v11;
    v47 = a5 - v16;
    if (v24 + v16 >= a5 - (v24 + v16) - v11)
    {
      v51 = v17;
      v52 = v24;
      v50 = a6;
      sub_2237A55FC(v28, v51, a3, a4, a5 - v16, a6, a7);
      a2 = (double *)v18;
      v47 = v16;
      a4 = v52;
      a3 = v28;
    }
    else
    {
      v48 = v18;
      v49 = a3;
      v50 = a6;
      sub_2237A55FC((char *)v10 + (_QWORD)a1, v48, v28, v24, v16, a6, a7);
      a3 = v49;
      v12 = (char *)v28;
      a2 = v17;
    }
    a5 = v47;
    a1 = v12;
    a6 = v50;
    if (!v47)
      return a8.n128_f64[0];
  }
  if (a4 <= a5)
  {
    if (a1 != (char *)a2)
    {
      v62 = 0;
      do
      {
        v63 = (__n128 *)&a6[v62];
        a8 = *(__n128 *)&a1[v62 * 8];
        v63[1].n128_u64[0] = *(_QWORD *)&a1[v62 * 8 + 16];
        *v63 = a8;
        v62 += 3;
      }
      while (&a1[v62 * 8] != (char *)a2);
      if (v62 * 8)
      {
        v64 = &a6[v62];
        v65 = (uint64_t)&a6[v62 - 3];
        v66 = a1 + 24;
        v67 = a6;
        v68 = a2;
        while (v68 != a3)
        {
          a8.n128_f64[0] = v68[2];
          v70 = v67[2];
          if (a8.n128_f64[0] <= v70)
          {
            v69 = v67;
            v67 += 3;
            a8.n128_f64[0] = v70;
          }
          else
          {
            v69 = v68;
            v68 += 3;
          }
          *(v66 - 3) = *(_QWORD *)v69;
          *(v66 - 2) = *((_QWORD *)v69 + 1);
          *(v66 - 1) = a8.n128_u64[0];
          v66 += 3;
          if (v64 == v67)
            return a8.n128_f64[0];
        }
        v79 = (char *)a2 - a1 - 24;
        v80 = (char *)a6 + v79 - ((char *)v67 + v79 % 0x18);
        v81 = v66 - 3;
        if (v80 >= 0x228)
        {
          v100 = 3 * (((char *)a6 - (char *)v67 - -24 * (v79 / 0x18)) / 0x18);
          v101 = (unint64_t)&v66[v100 - 1];
          v102 = (unint64_t)&v67[v100 + 2];
          v104 = v66 - 1 < (_QWORD *)&v67[v100 + 3] && v67 + 2 < (double *)&v66[v100];
          if ((unint64_t)v67 >= v101 || (unint64_t)v81 >= v102)
          {
            if (v104)
            {
              v82 = v67;
            }
            else
            {
              v106 = 0;
              v107 = v80 / 0x18 + 1;
              v108 = 3 * (v107 & 0x1FFFFFFFFFFFFFFCLL);
              v81 = &v66[v108 - 3];
              v82 = &v67[v108];
              v109 = v107 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                v110 = (double *)&v66[v106 - 3];
                v111 = (double *)&v66[v106 + 3];
                v112 = &v67[v106];
                *(float64x2x3_t *)a8.n128_u64 = vld3q_f64(v112);
                v112 += 6;
                v115 = vld3q_f64(v112);
                vst3q_f64(v110, *(float64x2x3_t *)a8.n128_u64);
                vst3q_f64(v111, v115);
                v106 += 12;
                v109 -= 4;
              }
              while (v109);
              if (v107 == (v107 & 0x1FFFFFFFFFFFFFFCLL))
                return a8.n128_f64[0];
            }
          }
          else
          {
            v82 = v67;
          }
        }
        else
        {
          v82 = v67;
        }
        do
        {
          *v81 = *(_QWORD *)v82;
          v81[1] = *((_QWORD *)v82 + 1);
          a8.n128_f64[0] = v82[2];
          v81[2] = a8.n128_u64[0];
          v81 += 3;
          v113 = v65 == (_QWORD)v82;
          v82 += 3;
        }
        while (!v113);
      }
    }
  }
  else if (a3 != a2)
  {
    v53 = 0;
    do
    {
      v54 = (__n128 *)&a6[v53];
      a8 = *(__n128 *)&a2[v53];
      v54[1].n128_f64[0] = a2[v53 + 2];
      *v54 = a8;
      v53 += 3;
    }
    while (&a2[v53] != a3);
    if (v53 * 8)
    {
      v55 = 0;
      v56 = &a6[v53];
      v57 = a3;
      while (a2 != (double *)a1)
      {
        a8.n128_f64[0] = *(a2 - 1);
        v58 = *(v56 - 1);
        v59 = v58 <= a8.n128_f64[0];
        if (v58 > a8.n128_f64[0])
          v60 = a2 - 3;
        else
          v60 = v56 - 3;
        if (v58 > a8.n128_f64[0])
          v61 = a2;
        else
          v61 = v56;
        if (v58 <= a8.n128_f64[0])
          a8.n128_f64[0] = *(v56 - 1);
        *(v57 - 3) = *v60;
        *(v57 - 2) = *(v61 - 2);
        *(v57 - 1) = a8.n128_f64[0];
        v57 -= 3;
        if (v59)
          v56 -= 3;
        else
          a2 -= 3;
        ++v55;
        if (v56 == a6)
          return a8.n128_f64[0];
      }
      v74 = (char *)v56 - (char *)a6 - 24;
      if (v74 < 0x168)
        goto LABEL_85;
      v83 = v74 / 0x18;
      v84 = v74 % 0x18 - v74;
      v85 = &a3[-3 * v55];
      v86 = (unint64_t)v85 + v84 - 24;
      v87 = (unint64_t)(v85 - 1);
      v88 = (unint64_t)v56 + v84 - 24;
      v89 = (unint64_t)v85 + v84 - 8;
      v90 = (unint64_t)v56 + v84 - 8;
      v91 = v89 >= (unint64_t)v56 || v90 >= (unint64_t)v57;
      v92 = !v91;
      v93 = v88 >= v87 || v86 >= (unint64_t)(v56 - 1);
      if (!v93 || v92)
      {
LABEL_85:
        v75 = v57;
        v76 = v56;
      }
      else
      {
        v94 = v83 + 1;
        v95 = (v83 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v75 = &v57[-3 * v95];
        v76 = &v56[-3 * v95];
        v96 = 0x1FFFFFFFFFFFFFFALL;
        v97 = v95;
        do
        {
          v98 = &v56[v96];
          *(float64x2x3_t *)a8.n128_u64 = vld3q_f64(v98);
          v99 = &v57[v96];
          vst3q_f64(v99, *(float64x2x3_t *)a8.n128_u64);
          v96 -= 6;
          v97 -= 2;
        }
        while (v97);
        if (v94 == v95)
          return a8.n128_f64[0];
      }
      v77 = v75 - 1;
      do
      {
        v78 = *((_QWORD *)v76 - 3);
        v76 -= 3;
        *((_QWORD *)v77 - 2) = v78;
        *(v77 - 1) = v76[1];
        a8.n128_f64[0] = v76[2];
        *v77 = a8.n128_f64[0];
        v77 -= 3;
      }
      while (v76 != a6);
    }
  }
  return a8.n128_f64[0];
}

uint64_t sub_2237A5D04(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD))*a2)(*a2);
}

uint64_t sub_2237A5D14(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD))*a2)(*a2);
}

uint64_t sub_2237A5D24(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, **a1);
}

uint64_t sub_2237A5D3C(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, **a1);
}

uint64_t sub_2237A5D54(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char **i;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v7 = *(_OWORD **)a2;
  v8 = *(_OWORD **)(a2 + 8);
  v9 = ((uint64_t)v8 - *(_QWORD *)a2) >> 4;
  v10 = a4[1] - *a4;
  v11 = v9 + ((uint64_t)(a3[1] - *a3) >> 4);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v11;
  v12 = v11 + (v10 >> 4);
  if (v12)
  {
    if (v12 >> 60)
      sub_22316E078();
    v14 = (char *)operator new(16 * v12);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = &v14[16 * v12];
    v7 = *(_OWORD **)a2;
    v8 = *(_OWORD **)(a2 + 8);
  }
  for (i = (char **)a1; v7 != v8; ++v7)
    sub_2232E9564(&i, v7);
  v16 = (_OWORD *)*a3;
  v15 = (_OWORD *)a3[1];
  for (i = (char **)a1; v16 != v15; ++v16)
    sub_2232E9564(&i, v16);
  v18 = (_OWORD *)*a4;
  v17 = (_OWORD *)a4[1];
  for (i = (char **)a1; v18 != v17; ++v18)
    sub_2232E9564(&i, v18);
  v19 = *(_QWORD *)(a1 + 24);
  v20 = 126 - 2 * __clz(v19);
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  sub_2237A5F44(*(unsigned __int8 **)a1, (unsigned __int8 *)(*(_QWORD *)a1 + 16 * v19), (uint64_t)&i, v21, 1);
  v22 = *(_QWORD *)(a1 + 24);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = 126 - 2 * __clz(v23 - v22);
  if (v23 == v22)
    v25 = 0;
  else
    v25 = v24;
  sub_2237A5F44((unsigned __int8 *)(*(_QWORD *)a1 + 16 * v22), (unsigned __int8 *)(*(_QWORD *)a1 + 16 * v23), (uint64_t)&i, v25, 1);
  v26 = *(_QWORD *)(a1 + 32);
  v27 = *(unsigned __int8 **)(a1 + 8);
  v28 = (uint64_t)&v27[-*(_QWORD *)a1] >> 4;
  v29 = 126 - 2 * __clz(v28 - v26);
  if (v28 == v26)
    v30 = 0;
  else
    v30 = v29;
  sub_2237A5F44((unsigned __int8 *)(*(_QWORD *)a1 + 16 * v26), v27, (uint64_t)&i, v30, 1);
  return a1;
}

void sub_2237A5F10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2237A5F44(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  char v20;
  BOOL v21;
  __int128 *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

uint64_t sub_2237A63C8(uint64_t result, unsigned __int8 *a2)
{
  _BYTE *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;

  if ((unsigned __int8 *)result != a2)
  {
    v3 = (_BYTE *)result;
    v4 = (unsigned __int8 *)(result + 16);
    if ((unsigned __int8 *)(result + 16) != a2)
    {
      v5 = 0;
      v6 = (unsigned __int8 *)result;
      do
      {
        v8 = v4;
        result = sub_22319835C(v4, v6);
        if ((result & 0x80) != 0)
        {
          v9 = *v8;
          v10 = v6[17];
          v11 = v6[18];
          v12 = v6[19];
          v13 = v6[20];
          v14 = v6[21];
          v15 = v6[22];
          v16 = v6[23];
          v17 = v6[24];
          v18 = v6[25];
          result = v6[26];
          v19 = v6[27];
          v20 = v6[28];
          v21 = v6[29];
          v22 = v6[30];
          v23 = v5;
          v24 = v6[31];
          do
          {
            *(_OWORD *)&v3[v23 + 16] = *(_OWORD *)&v3[v23];
            if (!v23)
            {
              v7 = v3;
              goto LABEL_5;
            }
            v25 = v23;
            v26 = v3[v23 - 16];
            v27 = v9;
            if (v9 == v26)
            {
              v26 = v3[v23 - 15];
              v27 = v10;
              if (v10 == v26)
              {
                v26 = v3[v23 - 14];
                v27 = v11;
                if (v11 == v26)
                {
                  v26 = v3[v23 - 13];
                  v27 = v12;
                  if (v12 == v26)
                  {
                    v26 = v3[v23 - 12];
                    v27 = v13;
                    if (v13 == v26)
                    {
                      v26 = v3[v23 - 11];
                      v27 = v14;
                      if (v14 == v26)
                      {
                        v26 = v3[v23 - 10];
                        v27 = v15;
                        if (v15 == v26)
                        {
                          v26 = v3[v23 - 9];
                          v27 = v16;
                          if (v16 == v26)
                          {
                            v26 = v3[v23 - 8];
                            v27 = v17;
                            if (v17 == v26)
                            {
                              v26 = v3[v23 - 7];
                              v27 = v18;
                              if (v18 == v26)
                              {
                                v26 = v3[v23 - 6];
                                v27 = result;
                                if ((_DWORD)result == v26)
                                {
                                  v26 = v3[v23 - 5];
                                  v27 = v19;
                                  if (v19 == v26)
                                  {
                                    v26 = v3[v23 - 4];
                                    v27 = v20;
                                    if (v20 == v26)
                                    {
                                      v26 = v3[v23 - 3];
                                      v27 = v21;
                                      if (v21 == v26)
                                      {
                                        v26 = v3[v23 - 2];
                                        v27 = v22;
                                        if (v22 == v26)
                                        {
                                          v26 = v3[v23 - 1];
                                          v27 = v24;
                                          if (v24 == v26)
                                            break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v23 -= 16;
          }
          while (v27 < v26);
          v7 = &v3[v25];
LABEL_5:
          *v7 = v9;
          v7[1] = v10;
          v7[2] = v11;
          v7[3] = v12;
          v7[4] = v13;
          v7[5] = v14;
          v7[6] = v15;
          v7[7] = v16;
          v7[8] = v17;
          v7[9] = v18;
          v7[10] = result;
          v7[11] = v19;
          v7[12] = v20;
          v7[13] = v21;
          v7[14] = v22;
          v7[15] = v24;
        }
        v4 = v8 + 16;
        v5 += 16;
        v6 = v8;
      }
      while (v8 + 16 != a2);
    }
  }
  return result;
}

uint64_t sub_2237A6614(uint64_t result, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  if ((unsigned __int8 *)result != a2)
  {
    v3 = (unsigned __int8 *)result;
    v4 = (unsigned __int8 *)(result + 16);
    while (v4 != a2)
    {
      v5 = v4;
      result = sub_22319835C(v4, v3);
      if ((result & 0x80) != 0)
      {
        v6 = *v5;
        v7 = v3[17];
        v8 = v3[18];
        v9 = v3[19];
        v10 = v3[20];
        v11 = v3[21];
        v12 = v3[22];
        v13 = v3[23];
        v14 = v3[24];
        v15 = v3[25];
        result = v3[26];
        v16 = v3[27];
        v17 = v3[28];
        v18 = v3[29];
        v19 = v3[30];
        v20 = v3[31];
        do
        {
          v21 = v3;
          *((_OWORD *)v3 + 1) = *(_OWORD *)v3;
          v23 = *(v3 - 16);
          v3 -= 16;
          v22 = v23;
          v24 = v6;
          if (v6 == v23)
          {
            v22 = *(v21 - 15);
            v24 = v7;
            if (v7 == v22)
            {
              v22 = *(v21 - 14);
              v24 = v8;
              if (v8 == v22)
              {
                v22 = *(v21 - 13);
                v24 = v9;
                if (v9 == v22)
                {
                  v22 = *(v21 - 12);
                  v24 = v10;
                  if (v10 == v22)
                  {
                    v22 = *(v21 - 11);
                    v24 = v11;
                    if (v11 == v22)
                    {
                      v22 = *(v21 - 10);
                      v24 = v12;
                      if (v12 == v22)
                      {
                        v22 = *(v21 - 9);
                        v24 = v13;
                        if (v13 == v22)
                        {
                          v22 = *(v21 - 8);
                          v24 = v14;
                          if (v14 == v22)
                          {
                            v22 = *(v21 - 7);
                            v24 = v15;
                            if (v15 == v22)
                            {
                              v22 = *(v21 - 6);
                              v24 = result;
                              if ((_DWORD)result == v22)
                              {
                                v22 = *(v21 - 5);
                                v24 = v16;
                                if (v16 == v22)
                                {
                                  v22 = *(v21 - 4);
                                  v24 = v17;
                                  if (v17 == v22)
                                  {
                                    v22 = *(v21 - 3);
                                    v24 = v18;
                                    if (v18 == v22)
                                    {
                                      v22 = *(v21 - 2);
                                      v24 = v19;
                                      if (v19 == v22)
                                      {
                                        v22 = *(v21 - 1);
                                        v24 = v20;
                                        if (v20 == v22)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        while (v24 < v22);
        *v21 = v6;
        v21[1] = v7;
        v21[2] = v8;
        v21[3] = v9;
        v21[4] = v10;
        v21[5] = v11;
        v21[6] = v12;
        v21[7] = v13;
        v21[8] = v14;
        v21[9] = v15;
        v21[10] = result;
        v21[11] = v16;
        v21[12] = v17;
        v21[13] = v18;
        v21[14] = v19;
        v21[15] = v20;
      }
      v4 = v5 + 16;
      v3 = v5;
    }
  }
  return result;
}

uint64_t sub_2237A680C(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char v6;
  int v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = sub_22319835C(a2, a1);
  v7 = (char)sub_22319835C(a3, a2);
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      v12 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      return 1;
    }
    v9 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v9;
    if ((sub_22319835C(a3, a2) & 0x80) == 0)
      return 1;
    v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
  }
  else
  {
    if ((v7 & 0x80000000) == 0)
      return 0;
    v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v11;
    if ((sub_22319835C(a2, a1) & 0x80) == 0)
      return 1;
    v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
  }
  return 2;
}

unsigned __int8 *sub_2237A6928(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *i;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  __int128 v36;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v12 = a1[10];
  v13 = a1[11];
  v14 = a1[12];
  v15 = a1[13];
  v16 = a1[14];
  v17 = a1[15];
  v18 = *(a2 - 16);
  v19 = v2;
  if (v2 == v18)
  {
    v18 = *(a2 - 15);
    v19 = a1[1];
    if (v3 == v18)
    {
      v18 = *(a2 - 14);
      v19 = a1[2];
      if (v4 == v18)
      {
        v18 = *(a2 - 13);
        v19 = a1[3];
        if (v5 == v18)
        {
          v18 = *(a2 - 12);
          v19 = a1[4];
          if (v6 == v18)
          {
            v18 = *(a2 - 11);
            v19 = a1[5];
            if (v7 == v18)
            {
              v18 = *(a2 - 10);
              v19 = a1[6];
              if (v8 == v18)
              {
                v18 = *(a2 - 9);
                v19 = a1[7];
                if (v9 == v18)
                {
                  v18 = *(a2 - 8);
                  v19 = a1[8];
                  if (v10 == v18)
                  {
                    v18 = *(a2 - 7);
                    v19 = a1[9];
                    if (v11 == v18)
                    {
                      v18 = *(a2 - 6);
                      v19 = a1[10];
                      if (v12 == v18)
                      {
                        v18 = *(a2 - 5);
                        v19 = a1[11];
                        if (v13 == v18)
                        {
                          v18 = *(a2 - 4);
                          v19 = a1[12];
                          if (v14 == v18)
                          {
                            v18 = *(a2 - 3);
                            v19 = a1[13];
                            if (v15 == v18)
                            {
                              v18 = *(a2 - 2);
                              v19 = a1[14];
                              if (v16 == v18)
                              {
                                v18 = *(a2 - 1);
                                v19 = a1[15];
                                if (v17 == v18)
                                  goto LABEL_37;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v19 >= v18)
  {
LABEL_37:
    for (i = a1 + 16; i < a2; i += 16)
    {
      v24 = *i;
      v25 = *a1;
      if (v2 != v24)
        goto LABEL_54;
      v24 = i[1];
      v25 = a1[1];
      if (v3 != v24)
        goto LABEL_54;
      v24 = i[2];
      v25 = a1[2];
      if (v4 != v24)
        goto LABEL_54;
      v24 = i[3];
      v25 = a1[3];
      if (v5 != v24)
        goto LABEL_54;
      v24 = i[4];
      v25 = a1[4];
      if (v6 != v24)
        goto LABEL_54;
      v24 = i[5];
      v25 = a1[5];
      if (v7 != v24)
        goto LABEL_54;
      v24 = i[6];
      v25 = a1[6];
      if (v8 != v24)
        goto LABEL_54;
      v24 = i[7];
      v25 = a1[7];
      if (v9 != v24)
        goto LABEL_54;
      v24 = i[8];
      v25 = a1[8];
      if (v10 != v24)
        goto LABEL_54;
      v24 = i[9];
      v25 = a1[9];
      if (v11 != v24)
        goto LABEL_54;
      v24 = i[10];
      v25 = a1[10];
      if (v12 != v24)
        goto LABEL_54;
      v24 = i[11];
      v25 = a1[11];
      if (v13 != v24)
        goto LABEL_54;
      v24 = i[12];
      v25 = a1[12];
      if (v14 == v24)
      {
        v24 = i[13];
        v25 = a1[13];
        if (v15 == v24)
        {
          v24 = i[14];
          v25 = a1[14];
          if (v16 == v24)
          {
            v24 = i[15];
            v25 = a1[15];
            if (v17 == v24)
              continue;
          }
        }
      }
LABEL_54:
      if (v25 < v24)
        break;
    }
  }
  else
  {
    i = a1 + 16;
    v21 = a1[16];
    v22 = *a1;
    if (v2 == v21)
      goto LABEL_19;
LABEL_34:
    while (v22 >= v21)
    {
      while (1)
      {
        v23 = i[16];
        i += 16;
        v21 = v23;
        v22 = *a1;
        if (v2 != v23)
          break;
LABEL_19:
        v21 = i[1];
        v22 = a1[1];
        if (v3 == v21)
        {
          v21 = i[2];
          v22 = a1[2];
          if (v4 == v21)
          {
            v21 = i[3];
            v22 = a1[3];
            if (v5 == v21)
            {
              v21 = i[4];
              v22 = a1[4];
              if (v6 == v21)
              {
                v21 = i[5];
                v22 = a1[5];
                if (v7 == v21)
                {
                  v21 = i[6];
                  v22 = a1[6];
                  if (v8 == v21)
                  {
                    v21 = i[7];
                    v22 = a1[7];
                    if (v9 == v21)
                    {
                      v21 = i[8];
                      v22 = a1[8];
                      if (v10 == v21)
                      {
                        v21 = i[9];
                        v22 = a1[9];
                        if (v11 == v21)
                        {
                          v21 = i[10];
                          v22 = a1[10];
                          if (v12 == v21)
                          {
                            v21 = i[11];
                            v22 = a1[11];
                            if (v13 == v21)
                            {
                              v21 = i[12];
                              v22 = a1[12];
                              if (v14 == v21)
                              {
                                v21 = i[13];
                                v22 = a1[13];
                                if (v15 == v21)
                                {
                                  v21 = i[14];
                                  v22 = a1[14];
                                  if (v16 == v21)
                                  {
                                    v21 = i[15];
                                    v22 = a1[15];
                                    if (v17 == v21)
                                      continue;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_34;
      }
    }
  }
  if (i < a2)
  {
    v26 = a2 - 16;
    do
    {
      a2 = v26;
      v27 = *v26;
      v28 = *a1;
      if (v2 == v27)
      {
        v27 = v26[1];
        v28 = a1[1];
        if (v3 == v27)
        {
          v27 = v26[2];
          v28 = a1[2];
          if (v4 == v27)
          {
            v27 = v26[3];
            v28 = a1[3];
            if (v5 == v27)
            {
              v27 = v26[4];
              v28 = a1[4];
              if (v6 == v27)
              {
                v27 = v26[5];
                v28 = a1[5];
                if (v7 == v27)
                {
                  v27 = v26[6];
                  v28 = a1[6];
                  if (v8 == v27)
                  {
                    v27 = v26[7];
                    v28 = a1[7];
                    if (v9 == v27)
                    {
                      v27 = v26[8];
                      v28 = a1[8];
                      if (v10 == v27)
                      {
                        v27 = v26[9];
                        v28 = a1[9];
                        if (v11 == v27)
                        {
                          v27 = v26[10];
                          v28 = a1[10];
                          if (v12 == v27)
                          {
                            v27 = v26[11];
                            v28 = a1[11];
                            if (v13 == v27)
                            {
                              v27 = v26[12];
                              v28 = a1[12];
                              if (v14 == v27)
                              {
                                v27 = v26[13];
                                v28 = a1[13];
                                if (v15 == v27)
                                {
                                  v27 = v26[14];
                                  v28 = a1[14];
                                  if (v16 == v27)
                                  {
                                    v27 = v26[15];
                                    v28 = a1[15];
                                    if (v17 == v27)
                                      break;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v26 -= 16;
    }
    while (v28 < v27);
  }
  while (i < a2)
  {
    v36 = *(_OWORD *)i;
    *(_OWORD *)i = *(_OWORD *)a2;
    *(_OWORD *)a2 = v36;
    do
    {
      do
      {
        v30 = i[16];
        i += 16;
        v29 = v30;
        v31 = v2;
        if (v2 != v30)
          break;
        v29 = i[1];
        v31 = v3;
        if (v3 != v29)
          break;
        v29 = i[2];
        v31 = v4;
        if (v4 != v29)
          break;
        v29 = i[3];
        v31 = v5;
        if (v5 != v29)
          break;
        v29 = i[4];
        v31 = v6;
        if (v6 != v29)
          break;
        v29 = i[5];
        v31 = v7;
        if (v7 != v29)
          break;
        v29 = i[6];
        v31 = v8;
        if (v8 != v29)
          break;
        v29 = i[7];
        v31 = v9;
        if (v9 != v29)
          break;
        v29 = i[8];
        v31 = v10;
        if (v10 != v29)
          break;
        v29 = i[9];
        v31 = v11;
        if (v11 != v29)
          break;
        v29 = i[10];
        v31 = v12;
        if (v12 != v29)
          break;
        v29 = i[11];
        v31 = v13;
        if (v13 != v29)
          break;
        v29 = i[12];
        v31 = v14;
        if (v14 != v29)
          break;
        v29 = i[13];
        v31 = v15;
        if (v15 != v29)
          break;
        v29 = i[14];
        v31 = v16;
        if (v16 != v29)
          break;
        v29 = i[15];
        v31 = v17;
      }
      while (v17 == v29);
    }
    while (v31 >= v29);
    v32 = a2 - 16;
    do
    {
      a2 = v32;
      v33 = *v32;
      v34 = v2;
      if (v2 == v33)
      {
        v33 = v32[1];
        v34 = v3;
        if (v3 == v33)
        {
          v33 = v32[2];
          v34 = v4;
          if (v4 == v33)
          {
            v33 = v32[3];
            v34 = v5;
            if (v5 == v33)
            {
              v33 = v32[4];
              v34 = v6;
              if (v6 == v33)
              {
                v33 = v32[5];
                v34 = v7;
                if (v7 == v33)
                {
                  v33 = v32[6];
                  v34 = v8;
                  if (v8 == v33)
                  {
                    v33 = v32[7];
                    v34 = v9;
                    if (v9 == v33)
                    {
                      v33 = v32[8];
                      v34 = v10;
                      if (v10 == v33)
                      {
                        v33 = v32[9];
                        v34 = v11;
                        if (v11 == v33)
                        {
                          v33 = v32[10];
                          v34 = v12;
                          if (v12 == v33)
                          {
                            v33 = v32[11];
                            v34 = v13;
                            if (v13 == v33)
                            {
                              v33 = v32[12];
                              v34 = v14;
                              if (v14 == v33)
                              {
                                v33 = v32[13];
                                v34 = v15;
                                if (v15 == v33)
                                {
                                  v33 = v32[14];
                                  v34 = v16;
                                  if (v16 == v33)
                                  {
                                    v33 = v32[15];
                                    v34 = v17;
                                    if (v17 == v33)
                                      break;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v32 -= 16;
    }
    while (v34 < v33);
  }
  if (i - 16 != a1)
    *(_OWORD *)a1 = *((_OWORD *)i - 1);
  *(i - 16) = v2;
  *(i - 15) = v3;
  *(i - 14) = v4;
  *(i - 13) = v5;
  *(i - 12) = v6;
  *(i - 11) = v7;
  *(i - 10) = v8;
  *(i - 9) = v9;
  *(i - 8) = v10;
  *(i - 7) = v11;
  *(i - 6) = v12;
  *(i - 5) = v13;
  *(i - 4) = v14;
  *(i - 3) = v15;
  *(i - 2) = v16;
  *(i - 1) = v17;
  return i;
}

unsigned __int8 *sub_2237A70C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  __int128 v38;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v12 = a1[10];
  v13 = a1[11];
  v14 = a1[12];
  v15 = a1[13];
  v16 = a1[14];
  v17 = 16;
  v18 = a1[15];
  do
  {
    v19 = v17;
    v20 = a1[v17];
    v21 = *a1;
    if (v20 == v2)
    {
      v20 = a1[v17 + 1];
      v21 = a1[1];
      if (v20 == v3)
      {
        v20 = a1[v17 + 2];
        v21 = a1[2];
        if (v20 == v4)
        {
          v20 = a1[v17 + 3];
          v21 = a1[3];
          if (v20 == v5)
          {
            v20 = a1[v17 + 4];
            v21 = a1[4];
            if (v20 == v6)
            {
              v20 = a1[v17 + 5];
              v21 = a1[5];
              if (v20 == v7)
              {
                v20 = a1[v17 + 6];
                v21 = a1[6];
                if (v20 == v8)
                {
                  v20 = a1[v17 + 7];
                  v21 = a1[7];
                  if (v20 == v9)
                  {
                    v20 = a1[v17 + 8];
                    v21 = a1[8];
                    if (v20 == v10)
                    {
                      v20 = a1[v17 + 9];
                      v21 = a1[9];
                      if (v20 == v11)
                      {
                        v20 = a1[v17 + 10];
                        v21 = a1[10];
                        if (v20 == v12)
                        {
                          v20 = a1[v17 + 11];
                          v21 = a1[11];
                          if (v20 == v13)
                          {
                            v20 = a1[v17 + 12];
                            v21 = a1[12];
                            if (v20 == v14)
                            {
                              v20 = a1[v17 + 13];
                              v21 = a1[13];
                              if (v20 == v15)
                              {
                                v20 = a1[v17 + 14];
                                v21 = a1[14];
                                if (v20 == v16)
                                {
                                  v20 = a1[v17 + 15];
                                  v21 = a1[15];
                                  if (v20 == v18)
                                    break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v17 += 16;
  }
  while (v20 < v21);
  v22 = &a1[v19];
  if (v19 == 16)
  {
    while (v22 < a2)
    {
      while (1)
      {
        v27 = *(a2 - 16);
        a2 -= 16;
        v26 = v27;
        v28 = *a1;
        if (v27 == v2)
        {
          v26 = a2[1];
          v28 = a1[1];
          if (v26 == v3)
          {
            v26 = a2[2];
            v28 = a1[2];
            if (v26 == v4)
            {
              v26 = a2[3];
              v28 = a1[3];
              if (v26 == v5)
              {
                v26 = a2[4];
                v28 = a1[4];
                if (v26 == v6)
                {
                  v26 = a2[5];
                  v28 = a1[5];
                  if (v26 == v7)
                  {
                    v26 = a2[6];
                    v28 = a1[6];
                    if (v26 == v8)
                    {
                      v26 = a2[7];
                      v28 = a1[7];
                      if (v26 == v9)
                      {
                        v26 = a2[8];
                        v28 = a1[8];
                        if (v26 == v10)
                        {
                          v26 = a2[9];
                          v28 = a1[9];
                          if (v26 == v11)
                          {
                            v26 = a2[10];
                            v28 = a1[10];
                            if (v26 == v12)
                            {
                              v26 = a2[11];
                              v28 = a1[11];
                              if (v26 == v13)
                              {
                                v26 = a2[12];
                                v28 = a1[12];
                                if (v26 == v14)
                                {
                                  v26 = a2[13];
                                  v28 = a1[13];
                                  if (v26 == v15)
                                  {
                                    v26 = a2[14];
                                    v28 = a1[14];
                                    if (v26 == v16)
                                    {
                                      v26 = a2[15];
                                      v28 = a1[15];
                                      if (v26 == v18)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v22 >= a2 || v26 < v28)
          goto LABEL_59;
      }
    }
  }
  else
  {
    do
    {
      do
      {
        v24 = *(a2 - 16);
        a2 -= 16;
        v23 = v24;
        v25 = *a1;
        if (v24 != v2)
          break;
        v23 = a2[1];
        v25 = a1[1];
        if (v23 != v3)
          break;
        v23 = a2[2];
        v25 = a1[2];
        if (v23 != v4)
          break;
        v23 = a2[3];
        v25 = a1[3];
        if (v23 != v5)
          break;
        v23 = a2[4];
        v25 = a1[4];
        if (v23 != v6)
          break;
        v23 = a2[5];
        v25 = a1[5];
        if (v23 != v7)
          break;
        v23 = a2[6];
        v25 = a1[6];
        if (v23 != v8)
          break;
        v23 = a2[7];
        v25 = a1[7];
        if (v23 != v9)
          break;
        v23 = a2[8];
        v25 = a1[8];
        if (v23 != v10)
          break;
        v23 = a2[9];
        v25 = a1[9];
        if (v23 != v11)
          break;
        v23 = a2[10];
        v25 = a1[10];
        if (v23 != v12)
          break;
        v23 = a2[11];
        v25 = a1[11];
        if (v23 != v13)
          break;
        v23 = a2[12];
        v25 = a1[12];
        if (v23 != v14)
          break;
        v23 = a2[13];
        v25 = a1[13];
        if (v23 != v15)
          break;
        v23 = a2[14];
        v25 = a1[14];
        if (v23 != v16)
          break;
        v23 = a2[15];
        v25 = a1[15];
      }
      while (v23 == v18);
    }
    while (v23 >= v25);
  }
LABEL_59:
  v29 = v22;
  if (v22 < a2)
  {
    v30 = a2;
    do
    {
      v38 = *(_OWORD *)v29;
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *(_OWORD *)v30 = v38;
      v31 = v29 + 16;
      do
      {
        v29 = v31;
        v32 = *v31;
        v33 = v2;
        if (v32 == v2)
        {
          v32 = v31[1];
          v33 = v3;
          if (v32 == v3)
          {
            v32 = v31[2];
            v33 = v4;
            if (v32 == v4)
            {
              v32 = v31[3];
              v33 = v5;
              if (v32 == v5)
              {
                v32 = v31[4];
                v33 = v6;
                if (v32 == v6)
                {
                  v32 = v31[5];
                  v33 = v7;
                  if (v32 == v7)
                  {
                    v32 = v31[6];
                    v33 = v8;
                    if (v32 == v8)
                    {
                      v32 = v31[7];
                      v33 = v9;
                      if (v32 == v9)
                      {
                        v32 = v31[8];
                        v33 = v10;
                        if (v32 == v10)
                        {
                          v32 = v31[9];
                          v33 = v11;
                          if (v32 == v11)
                          {
                            v32 = v31[10];
                            v33 = v12;
                            if (v32 == v12)
                            {
                              v32 = v31[11];
                              v33 = v13;
                              if (v32 == v13)
                              {
                                v32 = v31[12];
                                v33 = v14;
                                if (v32 == v14)
                                {
                                  v32 = v31[13];
                                  v33 = v15;
                                  if (v32 == v15)
                                  {
                                    v32 = v31[14];
                                    v33 = v16;
                                    if (v32 == v16)
                                    {
                                      v32 = v31[15];
                                      v33 = v18;
                                      if (v32 == v18)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v31 += 16;
      }
      while (v32 < v33);
      do
      {
        do
        {
          v35 = *(v30 - 16);
          v30 -= 16;
          v34 = v35;
          v36 = v2;
          if (v35 != v2)
            break;
          v34 = v30[1];
          v36 = v3;
          if (v34 != v3)
            break;
          v34 = v30[2];
          v36 = v4;
          if (v34 != v4)
            break;
          v34 = v30[3];
          v36 = v5;
          if (v34 != v5)
            break;
          v34 = v30[4];
          v36 = v6;
          if (v34 != v6)
            break;
          v34 = v30[5];
          v36 = v7;
          if (v34 != v7)
            break;
          v34 = v30[6];
          v36 = v8;
          if (v34 != v8)
            break;
          v34 = v30[7];
          v36 = v9;
          if (v34 != v9)
            break;
          v34 = v30[8];
          v36 = v10;
          if (v34 != v10)
            break;
          v34 = v30[9];
          v36 = v11;
          if (v34 != v11)
            break;
          v34 = v30[10];
          v36 = v12;
          if (v34 != v12)
            break;
          v34 = v30[11];
          v36 = v13;
          if (v34 != v13)
            break;
          v34 = v30[12];
          v36 = v14;
          if (v34 != v14)
            break;
          v34 = v30[13];
          v36 = v15;
          if (v34 != v15)
            break;
          v34 = v30[14];
          v36 = v16;
          if (v34 != v16)
            break;
          v34 = v30[15];
          v36 = v18;
        }
        while (v34 == v18);
      }
      while (v34 >= v36);
    }
    while (v29 < v30);
  }
  if (v29 - 16 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v29 - 1);
  *(v29 - 16) = v2;
  *(v29 - 15) = v3;
  *(v29 - 14) = v4;
  *(v29 - 13) = v5;
  *(v29 - 12) = v6;
  *(v29 - 11) = v7;
  *(v29 - 10) = v8;
  *(v29 - 9) = v9;
  *(v29 - 8) = v10;
  *(v29 - 7) = v11;
  *(v29 - 6) = v12;
  *(v29 - 5) = v13;
  *(v29 - 4) = v14;
  *(v29 - 3) = v15;
  *(v29 - 2) = v16;
  *(v29 - 1) = v18;
  return v29 - 16;
}

BOOL sub_2237A7790(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned __int8 *v6;
  __int128 v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  __int128 *v33;
  __int128 *v34;
  unsigned __int8 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 16;
      if ((sub_22319835C(a2 - 16, a1) & 0x80) != 0)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)v6 = v7;
      }
      return 1;
    case 3:
      sub_2237A680C(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      v33 = (__int128 *)(a1 + 16);
      v34 = (__int128 *)(a1 + 32);
      v35 = a2 - 16;
      sub_2237A680C(a1, a1 + 16, a1 + 32);
      if ((sub_22319835C(v35, a1 + 32) & 0x80) != 0)
      {
        v36 = *v34;
        *v34 = *(_OWORD *)v35;
        *(_OWORD *)v35 = v36;
        if ((sub_22319835C(a1 + 32, a1 + 16) & 0x80) != 0)
        {
          v37 = *v33;
          *v33 = *v34;
          *v34 = v37;
          if ((sub_22319835C(a1 + 16, a1) & 0x80) != 0)
          {
            v38 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v33;
            *v33 = v38;
          }
        }
      }
      return 1;
    case 5:
      sub_2237A7B70(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v8 = a1 + 32;
      sub_2237A680C(a1, a1 + 16, a1 + 32);
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if ((sub_22319835C(v9, v8) & 0x80) != 0)
    {
      v13 = *v9;
      v14 = v9[1];
      v15 = v9[2];
      v16 = v9[3];
      v17 = v9[4];
      v18 = v9[5];
      v19 = v9[6];
      v20 = v9[7];
      v21 = v9[8];
      v22 = v9[9];
      v23 = v9[10];
      v24 = v9[11];
      v25 = v9[12];
      v26 = v9[13];
      v27 = v9[14];
      v28 = v10;
      v29 = v9[15];
      do
      {
        *(_OWORD *)&a1[v28 + 48] = *(_OWORD *)&a1[v28 + 32];
        if (v28 == -32)
        {
          v12 = a1;
          goto LABEL_7;
        }
        v30 = v28;
        v31 = a1[v28 + 16];
        v32 = v13;
        if (v13 == v31)
        {
          v31 = a1[v28 + 17];
          v32 = v14;
          if (v14 == v31)
          {
            v31 = a1[v28 + 18];
            v32 = v15;
            if (v15 == v31)
            {
              v31 = a1[v28 + 19];
              v32 = v16;
              if (v16 == v31)
              {
                v31 = a1[v28 + 20];
                v32 = v17;
                if (v17 == v31)
                {
                  v31 = a1[v28 + 21];
                  v32 = v18;
                  if (v18 == v31)
                  {
                    v31 = a1[v28 + 22];
                    v32 = v19;
                    if (v19 == v31)
                    {
                      v31 = a1[v28 + 23];
                      v32 = v20;
                      if (v20 == v31)
                      {
                        v31 = a1[v28 + 24];
                        v32 = v21;
                        if (v21 == v31)
                        {
                          v31 = a1[v28 + 25];
                          v32 = v22;
                          if (v22 == v31)
                          {
                            v31 = a1[v28 + 26];
                            v32 = v23;
                            if (v23 == v31)
                            {
                              v31 = a1[v28 + 27];
                              v32 = v24;
                              if (v24 == v31)
                              {
                                v31 = a1[v28 + 28];
                                v32 = v25;
                                if (v25 == v31)
                                {
                                  v31 = a1[v28 + 29];
                                  v32 = v26;
                                  if (v26 == v31)
                                  {
                                    v31 = a1[v28 + 30];
                                    v32 = v27;
                                    if (v27 == v31)
                                    {
                                      v31 = a1[v28 + 31];
                                      v32 = v29;
                                      if (v29 == v31)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v28 -= 16;
      }
      while (v32 < v31);
      v12 = &a1[v30 + 32];
LABEL_7:
      *v12 = v13;
      v12[1] = v14;
      v12[2] = v15;
      v12[3] = v16;
      v12[4] = v17;
      v12[5] = v18;
      v12[6] = v19;
      v12[7] = v20;
      v12[8] = v21;
      v12[9] = v22;
      v12[10] = v23;
      v12[11] = v24;
      v12[12] = v25;
      v12[13] = v26;
      v12[14] = v27;
      ++v11;
      v12[15] = v29;
      if (v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

__n128 sub_2237A7B70(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  sub_2237A680C(a1, a2, a3);
  if ((sub_22319835C(a4, a3) & 0x80) != 0)
  {
    v10 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v10;
    if ((sub_22319835C(a3, a2) & 0x80) != 0)
    {
      v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v11;
      if ((sub_22319835C(a2, a1) & 0x80) != 0)
      {
        v12 = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = v12;
      }
    }
  }
  if ((sub_22319835C(a5, a4) & 0x80) != 0)
  {
    v14 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v14;
    if ((sub_22319835C(a4, a3) & 0x80) != 0)
    {
      v15 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v15;
      if ((sub_22319835C(a3, a2) & 0x80) != 0)
      {
        v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if ((sub_22319835C(a2, a1) & 0x80) != 0)
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2237A7CC8(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)&a4[-result] >> 4)
    {
      v9 = (uint64_t)&a4[-result] >> 3;
      v10 = v9 + 1;
      v11 = (unsigned __int8 *)(result + 16 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3 && (sub_22319835C((unsigned __int8 *)(result + 16 * (v9 + 1)), v11 + 16) & 0x80u) != 0)
      {
        v11 += 16;
        v10 = v12;
      }
      result = sub_22319835C(v11, a4);
      if ((result & 0x80) == 0)
      {
        v13 = *a4;
        v14 = a4[1];
        v32 = a4[3];
        v33 = a4[2];
        v30 = a4[5];
        v31 = a4[4];
        v28 = a4[7];
        v29 = a4[6];
        v26 = a4[9];
        v27 = a4[8];
        v24 = a4[11];
        v25 = a4[10];
        v22 = a4[13];
        v23 = a4[12];
        v20 = a4[15];
        v21 = a4[14];
        *(_OWORD *)a4 = *(_OWORD *)v11;
        if (v7 >= v10)
        {
          while (1)
          {
            v16 = 2 * v10;
            v10 = (2 * v10) | 1;
            v15 = (unsigned __int8 *)(v6 + 16 * v10);
            v17 = v16 + 2;
            if (v16 + 2 < a3)
            {
              result = sub_22319835C((unsigned __int8 *)(v6 + 16 * v10), v15 + 16);
              if ((result & 0x80u) != 0)
              {
                v15 += 16;
                v10 = v17;
              }
            }
            v18 = *v15;
            v19 = v13;
            if (v18 != v13)
              goto LABEL_28;
            v18 = v15[1];
            v19 = v14;
            if (v18 != v14)
              goto LABEL_28;
            v18 = v15[2];
            v19 = v33;
            if (v18 != v33)
              goto LABEL_28;
            v18 = v15[3];
            v19 = v32;
            if (v18 != v32)
              goto LABEL_28;
            v18 = v15[4];
            v19 = v31;
            if (v18 != v31)
              goto LABEL_28;
            v18 = v15[5];
            v19 = v30;
            if (v18 != v30)
              goto LABEL_28;
            v18 = v15[6];
            v19 = v29;
            if (v18 != v29)
              goto LABEL_28;
            v18 = v15[7];
            v19 = v28;
            if (v18 != v28)
              goto LABEL_28;
            v18 = v15[8];
            v19 = v27;
            if (v18 != v27)
              goto LABEL_28;
            v18 = v15[9];
            v19 = v26;
            if (v18 != v26)
              goto LABEL_28;
            v18 = v15[10];
            v19 = v25;
            if (v18 != v25)
              goto LABEL_28;
            v18 = v15[11];
            v19 = v24;
            if (v18 != v24)
              goto LABEL_28;
            v18 = v15[12];
            v19 = v23;
            if (v18 != v23
              || (v18 = v15[13], v19 = v22, v18 != v22)
              || (v18 = v15[14], v19 = v21, v18 != v21)
              || (v18 = v15[15], v19 = v20, v18 != v20))
            {
LABEL_28:
              if (v18 < v19)
                break;
            }
            *(_OWORD *)v11 = *(_OWORD *)v15;
            v11 = v15;
            if (v7 < v10)
              goto LABEL_30;
          }
        }
        v15 = v11;
LABEL_30:
        *v15 = v13;
        v15[1] = v14;
        v15[2] = v33;
        v15[3] = v32;
        v15[4] = v31;
        v15[5] = v30;
        v15[6] = v29;
        v15[7] = v28;
        v15[8] = v27;
        v15[9] = v26;
        v15[10] = v25;
        v15[11] = v24;
        v15[12] = v23;
        v15[13] = v22;
        v15[14] = v21;
        v15[15] = v20;
      }
    }
  }
  return result;
}

uint64_t sub_2237A7FF4(uint64_t result, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;

  if ((uint64_t)a2 - result >= 17)
  {
    v4 = a2;
    v5 = (unsigned __int8 *)result;
    v6 = ((unint64_t)a2 - result) >> 4;
    do
    {
      while (1)
      {
        v8 = 0;
        v14 = *(_OWORD *)v5;
        v9 = v5;
        do
        {
          v10 = v9;
          v9 += 16 * v8 + 16;
          v11 = 2 * v8;
          v8 = (2 * v8) | 1;
          if (v11 + 2 < v6)
          {
            v12 = v9[16];
            v13 = *v9;
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[1];
            v12 = v9[17];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[2];
            v12 = v9[18];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[3];
            v12 = v9[19];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[4];
            v12 = v9[20];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[5];
            v12 = v9[21];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[6];
            v12 = v9[22];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[7];
            v12 = v9[23];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[8];
            v12 = v9[24];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[9];
            v12 = v9[25];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[10];
            v12 = v9[26];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[11];
            v12 = v9[27];
            if (v13 != v12)
              goto LABEL_9;
            v13 = v9[12];
            v12 = v9[28];
            if (v13 != v12
              || (v13 = v9[13], v12 = v9[29], v13 != v12)
              || (v13 = v9[14], v12 = v9[30], v13 != v12)
              || (v13 = v9[15], v12 = v9[31], v13 != v12))
            {
LABEL_9:
              if (v13 < v12)
              {
                v9 += 16;
                v8 = v11 + 2;
              }
            }
          }
          *(_OWORD *)v10 = *(_OWORD *)v9;
        }
        while (v8 <= (uint64_t)((unint64_t)(v6 - 2) >> 1));
        if (v9 == (unsigned __int8 *)--v4)
          break;
        *(_OWORD *)v9 = *v4;
        *v4 = v14;
        result = sub_2237A8238((uint64_t)v5, (uint64_t)(v9 + 16), a3, (v9 + 16 - v5) >> 4);
        v7 = v6-- <= 2;
        if (v7)
          return result;
      }
      *(_OWORD *)v9 = v14;
      v7 = v6-- <= 2;
    }
    while (!v7);
  }
  return result;
}

uint64_t sub_2237A8238(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (unsigned __int8 *)(result + 16 * (v4 >> 1));
    v9 = (unsigned __int8 *)(a2 - 16);
    result = sub_22319835C(v8, (unsigned __int8 *)(a2 - 16));
    if ((result & 0x80) != 0)
    {
      v10 = *(unsigned __int8 *)(a2 - 16);
      v11 = *(unsigned __int8 *)(a2 - 15);
      v12 = *(unsigned __int8 *)(a2 - 14);
      v13 = *(unsigned __int8 *)(a2 - 13);
      v14 = *(unsigned __int8 *)(a2 - 12);
      v15 = *(unsigned __int8 *)(a2 - 11);
      v16 = *(unsigned __int8 *)(a2 - 10);
      v17 = *(unsigned __int8 *)(a2 - 9);
      v18 = *(unsigned __int8 *)(a2 - 8);
      v19 = *(unsigned __int8 *)(a2 - 7);
      result = *(unsigned __int8 *)(a2 - 6);
      v20 = *(unsigned __int8 *)(a2 - 5);
      v21 = *(unsigned __int8 *)(a2 - 4);
      v22 = *(unsigned __int8 *)(a2 - 3);
      v23 = *(unsigned __int8 *)(a2 - 2);
      v24 = *(unsigned __int8 *)(a2 - 1);
      do
      {
        v25 = v9;
        v9 = v8;
        *(_OWORD *)v25 = *(_OWORD *)v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (unsigned __int8 *)(v6 + 16 * v7);
        v26 = *v8;
        v27 = v10;
        if (v26 == v10)
        {
          v26 = v8[1];
          v27 = v11;
          if (v26 == v11)
          {
            v26 = v8[2];
            v27 = v12;
            if (v26 == v12)
            {
              v26 = v8[3];
              v27 = v13;
              if (v26 == v13)
              {
                v26 = v8[4];
                v27 = v14;
                if (v26 == v14)
                {
                  v26 = v8[5];
                  v27 = v15;
                  if (v26 == v15)
                  {
                    v26 = v8[6];
                    v27 = v16;
                    if (v26 == v16)
                    {
                      v26 = v8[7];
                      v27 = v17;
                      if (v26 == v17)
                      {
                        v26 = v8[8];
                        v27 = v18;
                        if (v26 == v18)
                        {
                          v26 = v8[9];
                          v27 = v19;
                          if (v26 == v19)
                          {
                            v26 = v8[10];
                            v27 = result;
                            if (v26 == (_DWORD)result)
                            {
                              v26 = v8[11];
                              v27 = v20;
                              if (v26 == v20)
                              {
                                v26 = v8[12];
                                v27 = v21;
                                if (v26 == v21)
                                {
                                  v26 = v8[13];
                                  v27 = v22;
                                  if (v26 == v22)
                                  {
                                    v26 = v8[14];
                                    v27 = v23;
                                    if (v26 == v23)
                                    {
                                      v26 = v8[15];
                                      v27 = v24;
                                      if (v26 == v24)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      while (v26 < v27);
      *v9 = v10;
      v9[1] = v11;
      v9[2] = v12;
      v9[3] = v13;
      v9[4] = v14;
      v9[5] = v15;
      v9[6] = v16;
      v9[7] = v17;
      v9[8] = v18;
      v9[9] = v19;
      v9[10] = result;
      v9[11] = v20;
      v9[12] = v21;
      v9[13] = v22;
      v9[14] = v23;
      v9[15] = v24;
    }
  }
  return result;
}

uint64_t sub_2237A8438(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **a1);
}

uint64_t sub_2237A8450(_QWORD **a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, **a1);
}

void sub_2237A8468(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  size_t v27;
  size_t v28;
  _QWORD *p_dst;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  int v81;
  const char *v82;
  int v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  char *v90;
  std::__shared_weak_count *v91;
  _QWORD *__dst;
  __int128 v93;
  char __s[37];
  _BYTE v95[24];
  __int128 v96;
  void *v97[2];
  unint64_t v98;
  char v99;
  _QWORD v100[5];

  v100[2] = *MEMORY[0x24BDAC8D0];
  sub_2237A8EA8(&v87);
  if (**(int **)(v87 + 56) > 3)
    return;
  v3 = *(unsigned __int8 *)(v87 + 72);
  v4 = sub_22322F254(v87, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v80[0] = &v87;
  v80[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v80[2] = std::chrono::system_clock::now().__d_.__rep_;
  v81 = 3;
  v82 = "unknown file";
  v83 = 30;
  v85 = 0;
  v86 = 0;
  v7 = (unsigned __int8 *)(a2 + 56);
  v84 = "unknown function";
  sub_2245664AC((unsigned __int8 *)(a2 + 56), __s);
  v8 = v87;
  v9 = (const char *)(v87 + 16);
  v79 = v87 + 16;
  if (*(char *)(v87 + 39) < 0)
  {
    v9 = *(const char **)(v87 + 16);
    v10 = *(_QWORD *)(v87 + 24);
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v87 + 39);
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v95);
    sub_223199C58("com.apple.cv3d", (unint64_t)v95, &xmmword_255788F40);
    if ((_BYTE)v96 && (v95[23] & 0x80000000) != 0)
      operator delete(*(void **)v95);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v13 = (const char *)&xmmword_255788F40;
  else
    v13 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v14 = byte_255788F57;
  else
    v14 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v95 = os_log_create(v13, v9);
  v15 = &v95[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = v3;
    v17 = v7;
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v15 = operator new(v18 + 1);
    *(_QWORD *)&v95[16] = v14;
    *(_QWORD *)&v96 = v19 | 0x8000000000000000;
    *(_QWORD *)&v95[8] = v15;
    v7 = v17;
    v3 = v16;
    goto LABEL_23;
  }
  BYTE7(v96) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v96) = 1;
  v20 = v97;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v10 >= 0x17)
  {
    v22 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v22 = v10 | 7;
    v23 = v22 + 1;
    v20 = (void **)operator new(v22 + 1);
    v97[1] = (void *)v10;
    v98 = v23 | 0x8000000000000000;
    v97[0] = v20;
  }
  else
  {
    HIBYTE(v98) = v10;
    if (!v10)
    {
      LOBYTE(v97[0]) = 0;
      v99 = 1;
      v21 = *(NSObject **)v95;
      if ((SHIBYTE(v98) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v9, v10);
  *((_BYTE *)v20 + v10) = 0;
  v99 = 1;
  v21 = *(NSObject **)v95;
  if ((SHIBYTE(v98) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v96))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v97[0]);
  if (!BYTE8(v96))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v96) < 0)
    operator delete(*(void **)&v95[8]);
LABEL_37:
  if (*(_QWORD *)v95)
    os_release(*(void **)v95);
  if (!v6 || !*(_QWORD *)(v6 + 24))
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    *(_QWORD *)v95 = 0xD04100202;
    *(_WORD *)&v95[8] = 2080;
    *(_QWORD *)&v95[10] = __s;
    v30 = (void *)_os_log_send_and_compose_impl();
    if (v30)
      free(v30);
    goto LABEL_110;
  }
  v24 = _os_log_pack_size();
  v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
  v26 = (std::__shared_weak_count *)operator new();
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v25;
  *(_QWORD *)&v88 = v25;
  *((_QWORD *)&v88 + 1) = v25;
  v90 = 0;
  v91 = 0;
  v89 = v26;
  v27 = strlen(__s);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = operator new(v31 + 1);
    *(_QWORD *)&v93 = v28;
    *((_QWORD *)&v93 + 1) = v32 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v93) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_50:
    memcpy(p_dst, __s, v28);
  *((_BYTE *)p_dst + v28) = 0;
  v33 = __dst;
  v100[0] = v93;
  *(_QWORD *)((char *)v100 + 7) = *(_QWORD *)((char *)&v93 + 7);
  v34 = HIBYTE(v93);
  v35 = operator new(0x38uLL);
  v35[1] = 0;
  v35[2] = 0;
  v35[3] = off_24EC1FA48;
  *v35 = &off_24EC1F9F8;
  v36 = v100[0];
  v35[4] = v33;
  v35[5] = v36;
  *(_QWORD *)((char *)v35 + 47) = *(_QWORD *)((char *)v100 + 7);
  *((_BYTE *)v35 + 55) = v34;
  v100[0] = 0;
  *(_QWORD *)((char *)v100 + 7) = 0;
  v37 = v91;
  v90 = (char *)(v35 + 3);
  v91 = (std::__shared_weak_count *)v35;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  *(_OWORD *)v95 = v88;
  v40 = v90;
  *(_QWORD *)&v95[16] = v89;
  if (v89)
  {
    v41 = (unint64_t *)&v89->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = v91;
  *(_QWORD *)&v96 = v40;
  *((_QWORD *)&v96 + 1) = v91;
  if (v91)
  {
    v44 = (unint64_t *)&v91->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v97[0] = v40;
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  else
  {
    v97[0] = v40;
  }
  v47 = v89;
  if (v89)
  {
    v48 = (unint64_t *)&v89->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *(_QWORD *)v95;
  if (*((char *)v97[0] + 31) >= 0)
    v51 = (char *)v97[0] + 8;
  else
    v51 = (char *)*((_QWORD *)v97[0] + 1);
  v52 = _os_log_pack_fill();
  *(_DWORD *)v52 = 68157954;
  *(_DWORD *)(v52 + 4) = 13;
  *(_WORD *)(v52 + 8) = 2080;
  *(_QWORD *)(v52 + 10) = v51;
  v53 = operator new();
  v54 = *(unsigned __int8 *)(v8 + 39);
  v55 = v79;
  if ((v54 & 0x80u) != 0)
  {
    v55 = *(_QWORD *)(v8 + 16);
    v54 = *(_QWORD *)(v8 + 24);
  }
  *(_QWORD *)v53 = v50;
  *(_OWORD *)(v53 + 8) = *(_OWORD *)&v95[8];
  *(_QWORD *)&v95[8] = 0;
  *(_QWORD *)&v95[16] = 0;
  *(_OWORD *)(v53 + 24) = v96;
  v96 = 0uLL;
  *(_QWORD *)(v53 + 40) = v55;
  *(_QWORD *)(v53 + 48) = v54;
  *(_BYTE *)(v53 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v88 = v53;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v88);
  v56 = v88;
  *(_QWORD *)&v88 = 0;
  if (v56)
  {
    v57 = *(std::__shared_weak_count **)(v56 + 32);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = *(std::__shared_weak_count **)(v56 + 16);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
    v63 = __dst;
    __dst = 0;
    if (v63)
    {
      v64 = (std::__shared_weak_count *)v63[4];
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v63[2];
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      MEMORY[0x227684CE8](v63, 0x10F0C40B62ED6C6);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(std::__shared_weak_count **)&v95[16];
  if (*(_QWORD *)&v95[16])
  {
    v74 = (unint64_t *)(*(_QWORD *)&v95[16] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
LABEL_110:
  if (v3)
  {
    sub_2245664AC(v7, v95);
    sub_22322C138((uint64_t)v80, "GP %.13s added", v95);
    sub_223182C08((uint64_t)v80);
  }
  sub_223182C08((uint64_t)v80);
  v76 = v86;
  if (v86)
  {
    v77 = (unint64_t *)&v86->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

void sub_2237A8D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237A8D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237A8DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237A8E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237A8E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 160) && *(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  v7 = *(void **)(v5 - 192);
  if (v7)
    os_release(v7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237A8EA8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC550);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC550))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC548);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC550);
  }
  *a1 = qword_2540CC548;
}

void sub_2237A8F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC550);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC550);
  _Unwind_Resume(a1);
}

void sub_2237A8F9C(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  size_t v27;
  size_t v28;
  _QWORD *p_dst;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  int v81;
  const char *v82;
  int v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  char *v90;
  std::__shared_weak_count *v91;
  _QWORD *__dst;
  __int128 v93;
  char __s[37];
  _BYTE v95[24];
  __int128 v96;
  void *v97[2];
  unint64_t v98;
  char v99;
  _QWORD v100[5];

  v100[2] = *MEMORY[0x24BDAC8D0];
  sub_2237A8EA8(&v87);
  if (**(int **)(v87 + 56) > 3)
    return;
  v3 = *(unsigned __int8 *)(v87 + 72);
  v4 = sub_22322F254(v87, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v80[0] = &v87;
  v80[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v80[2] = std::chrono::system_clock::now().__d_.__rep_;
  v81 = 3;
  v82 = "unknown file";
  v83 = 34;
  v85 = 0;
  v86 = 0;
  v7 = (unsigned __int8 *)(a2 + 56);
  v84 = "unknown function";
  sub_2245664AC((unsigned __int8 *)(a2 + 56), __s);
  v8 = v87;
  v9 = (const char *)(v87 + 16);
  v79 = v87 + 16;
  if (*(char *)(v87 + 39) < 0)
  {
    v9 = *(const char **)(v87 + 16);
    v10 = *(_QWORD *)(v87 + 24);
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v87 + 39);
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v95);
    sub_223199C58("com.apple.cv3d", (unint64_t)v95, &xmmword_255788F40);
    if ((_BYTE)v96 && (v95[23] & 0x80000000) != 0)
      operator delete(*(void **)v95);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v13 = (const char *)&xmmword_255788F40;
  else
    v13 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v14 = byte_255788F57;
  else
    v14 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v95 = os_log_create(v13, v9);
  v15 = &v95[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = v3;
    v17 = v7;
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v15 = operator new(v18 + 1);
    *(_QWORD *)&v95[16] = v14;
    *(_QWORD *)&v96 = v19 | 0x8000000000000000;
    *(_QWORD *)&v95[8] = v15;
    v7 = v17;
    v3 = v16;
    goto LABEL_23;
  }
  BYTE7(v96) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v96) = 1;
  v20 = v97;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v10 >= 0x17)
  {
    v22 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v22 = v10 | 7;
    v23 = v22 + 1;
    v20 = (void **)operator new(v22 + 1);
    v97[1] = (void *)v10;
    v98 = v23 | 0x8000000000000000;
    v97[0] = v20;
  }
  else
  {
    HIBYTE(v98) = v10;
    if (!v10)
    {
      LOBYTE(v97[0]) = 0;
      v99 = 1;
      v21 = *(NSObject **)v95;
      if ((SHIBYTE(v98) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v9, v10);
  *((_BYTE *)v20 + v10) = 0;
  v99 = 1;
  v21 = *(NSObject **)v95;
  if ((SHIBYTE(v98) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v96))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v97[0]);
  if (!BYTE8(v96))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v96) < 0)
    operator delete(*(void **)&v95[8]);
LABEL_37:
  if (*(_QWORD *)v95)
    os_release(*(void **)v95);
  if (!v6 || !*(_QWORD *)(v6 + 24))
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    *(_QWORD *)v95 = 0xD04100202;
    *(_WORD *)&v95[8] = 2080;
    *(_QWORD *)&v95[10] = __s;
    v30 = (void *)_os_log_send_and_compose_impl();
    if (v30)
      free(v30);
    goto LABEL_110;
  }
  v24 = _os_log_pack_size();
  v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
  v26 = (std::__shared_weak_count *)operator new();
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v25;
  *(_QWORD *)&v88 = v25;
  *((_QWORD *)&v88 + 1) = v25;
  v90 = 0;
  v91 = 0;
  v89 = v26;
  v27 = strlen(__s);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = operator new(v31 + 1);
    *(_QWORD *)&v93 = v28;
    *((_QWORD *)&v93 + 1) = v32 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v93) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_50:
    memcpy(p_dst, __s, v28);
  *((_BYTE *)p_dst + v28) = 0;
  v33 = __dst;
  v100[0] = v93;
  *(_QWORD *)((char *)v100 + 7) = *(_QWORD *)((char *)&v93 + 7);
  v34 = HIBYTE(v93);
  v35 = operator new(0x38uLL);
  v35[1] = 0;
  v35[2] = 0;
  v35[3] = off_24EC1FA48;
  *v35 = &off_24EC1F9F8;
  v36 = v100[0];
  v35[4] = v33;
  v35[5] = v36;
  *(_QWORD *)((char *)v35 + 47) = *(_QWORD *)((char *)v100 + 7);
  *((_BYTE *)v35 + 55) = v34;
  v100[0] = 0;
  *(_QWORD *)((char *)v100 + 7) = 0;
  v37 = v91;
  v90 = (char *)(v35 + 3);
  v91 = (std::__shared_weak_count *)v35;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  *(_OWORD *)v95 = v88;
  v40 = v90;
  *(_QWORD *)&v95[16] = v89;
  if (v89)
  {
    v41 = (unint64_t *)&v89->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = v91;
  *(_QWORD *)&v96 = v40;
  *((_QWORD *)&v96 + 1) = v91;
  if (v91)
  {
    v44 = (unint64_t *)&v91->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v97[0] = v40;
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  else
  {
    v97[0] = v40;
  }
  v47 = v89;
  if (v89)
  {
    v48 = (unint64_t *)&v89->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *(_QWORD *)v95;
  if (*((char *)v97[0] + 31) >= 0)
    v51 = (char *)v97[0] + 8;
  else
    v51 = (char *)*((_QWORD *)v97[0] + 1);
  v52 = _os_log_pack_fill();
  *(_DWORD *)v52 = 68157954;
  *(_DWORD *)(v52 + 4) = 13;
  *(_WORD *)(v52 + 8) = 2080;
  *(_QWORD *)(v52 + 10) = v51;
  v53 = operator new();
  v54 = *(unsigned __int8 *)(v8 + 39);
  v55 = v79;
  if ((v54 & 0x80u) != 0)
  {
    v55 = *(_QWORD *)(v8 + 16);
    v54 = *(_QWORD *)(v8 + 24);
  }
  *(_QWORD *)v53 = v50;
  *(_OWORD *)(v53 + 8) = *(_OWORD *)&v95[8];
  *(_QWORD *)&v95[8] = 0;
  *(_QWORD *)&v95[16] = 0;
  *(_OWORD *)(v53 + 24) = v96;
  v96 = 0uLL;
  *(_QWORD *)(v53 + 40) = v55;
  *(_QWORD *)(v53 + 48) = v54;
  *(_BYTE *)(v53 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v88 = v53;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v88);
  v56 = v88;
  *(_QWORD *)&v88 = 0;
  if (v56)
  {
    v57 = *(std::__shared_weak_count **)(v56 + 32);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = *(std::__shared_weak_count **)(v56 + 16);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
    v63 = __dst;
    __dst = 0;
    if (v63)
    {
      v64 = (std::__shared_weak_count *)v63[4];
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v63[2];
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      MEMORY[0x227684CE8](v63, 0x10F0C40B62ED6C6);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(std::__shared_weak_count **)&v95[16];
  if (*(_QWORD *)&v95[16])
  {
    v74 = (unint64_t *)(*(_QWORD *)&v95[16] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
LABEL_110:
  if (v3)
  {
    sub_2245664AC(v7, v95);
    sub_22322C138((uint64_t)v80, "GP %.13s will be removed", v95);
    sub_223182C08((uint64_t)v80);
  }
  sub_223182C08((uint64_t)v80);
  v76 = v86;
  if (v86)
  {
    v77 = (unint64_t *)&v86->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

void sub_2237A988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237A98CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237A9900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237A995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237A9980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 160) && *(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  v7 = *(void **)(v5 - 192);
  if (v7)
    os_release(v7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237A99DC(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  size_t v27;
  size_t v28;
  _QWORD *p_dst;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  int v81;
  const char *v82;
  int v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  char *v90;
  std::__shared_weak_count *v91;
  _QWORD *__dst;
  __int128 v93;
  char __s[37];
  _BYTE v95[24];
  __int128 v96;
  void *v97[2];
  unint64_t v98;
  char v99;
  _QWORD v100[5];

  v100[2] = *MEMORY[0x24BDAC8D0];
  sub_2237A8EA8(&v87);
  if (**(int **)(v87 + 56) > 3)
    return;
  v3 = *(unsigned __int8 *)(v87 + 72);
  v4 = sub_22322F254(v87, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v80[0] = &v87;
  v80[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v80[2] = std::chrono::system_clock::now().__d_.__rep_;
  v81 = 3;
  v82 = "unknown file";
  v83 = 38;
  v85 = 0;
  v86 = 0;
  v7 = (unsigned __int8 *)(a2 + 56);
  v84 = "unknown function";
  sub_2245664AC((unsigned __int8 *)(a2 + 56), __s);
  v8 = v87;
  v9 = (const char *)(v87 + 16);
  v79 = v87 + 16;
  if (*(char *)(v87 + 39) < 0)
  {
    v9 = *(const char **)(v87 + 16);
    v10 = *(_QWORD *)(v87 + 24);
    v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v87 + 39);
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v95);
    sub_223199C58("com.apple.cv3d", (unint64_t)v95, &xmmword_255788F40);
    if ((_BYTE)v96 && (v95[23] & 0x80000000) != 0)
      operator delete(*(void **)v95);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v13 = (const char *)&xmmword_255788F40;
  else
    v13 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v14 = byte_255788F57;
  else
    v14 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v95 = os_log_create(v13, v9);
  v15 = &v95[8];
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = v3;
    v17 = v7;
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v15 = operator new(v18 + 1);
    *(_QWORD *)&v95[16] = v14;
    *(_QWORD *)&v96 = v19 | 0x8000000000000000;
    *(_QWORD *)&v95[8] = v15;
    v7 = v17;
    v3 = v16;
    goto LABEL_23;
  }
  BYTE7(v96) = v14;
  if (v14)
LABEL_23:
    memmove(v15, v13, v14);
  v15[v14] = 0;
  BYTE8(v96) = 1;
  v20 = v97;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v10 >= 0x17)
  {
    v22 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v22 = v10 | 7;
    v23 = v22 + 1;
    v20 = (void **)operator new(v22 + 1);
    v97[1] = (void *)v10;
    v98 = v23 | 0x8000000000000000;
    v97[0] = v20;
  }
  else
  {
    HIBYTE(v98) = v10;
    if (!v10)
    {
      LOBYTE(v97[0]) = 0;
      v99 = 1;
      v21 = *(NSObject **)v95;
      if ((SHIBYTE(v98) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v20, v9, v10);
  *((_BYTE *)v20 + v10) = 0;
  v99 = 1;
  v21 = *(NSObject **)v95;
  if ((SHIBYTE(v98) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v96))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v97[0]);
  if (!BYTE8(v96))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v96) < 0)
    operator delete(*(void **)&v95[8]);
LABEL_37:
  if (*(_QWORD *)v95)
    os_release(*(void **)v95);
  if (!v6 || !*(_QWORD *)(v6 + 24))
  {
    os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    *(_QWORD *)v95 = 0xD04100202;
    *(_WORD *)&v95[8] = 2080;
    *(_QWORD *)&v95[10] = __s;
    v30 = (void *)_os_log_send_and_compose_impl();
    if (v30)
      free(v30);
    goto LABEL_110;
  }
  v24 = _os_log_pack_size();
  v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
  v26 = (std::__shared_weak_count *)operator new();
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v25;
  *(_QWORD *)&v88 = v25;
  *((_QWORD *)&v88 + 1) = v25;
  v90 = 0;
  v91 = 0;
  v89 = v26;
  v27 = strlen(__s);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = operator new(v31 + 1);
    *(_QWORD *)&v93 = v28;
    *((_QWORD *)&v93 + 1) = v32 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v93) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_50:
    memcpy(p_dst, __s, v28);
  *((_BYTE *)p_dst + v28) = 0;
  v33 = __dst;
  v100[0] = v93;
  *(_QWORD *)((char *)v100 + 7) = *(_QWORD *)((char *)&v93 + 7);
  v34 = HIBYTE(v93);
  v35 = operator new(0x38uLL);
  v35[1] = 0;
  v35[2] = 0;
  v35[3] = off_24EC1FA48;
  *v35 = &off_24EC1F9F8;
  v36 = v100[0];
  v35[4] = v33;
  v35[5] = v36;
  *(_QWORD *)((char *)v35 + 47) = *(_QWORD *)((char *)v100 + 7);
  *((_BYTE *)v35 + 55) = v34;
  v100[0] = 0;
  *(_QWORD *)((char *)v100 + 7) = 0;
  v37 = v91;
  v90 = (char *)(v35 + 3);
  v91 = (std::__shared_weak_count *)v35;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  *(_OWORD *)v95 = v88;
  v40 = v90;
  *(_QWORD *)&v95[16] = v89;
  if (v89)
  {
    v41 = (unint64_t *)&v89->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = v91;
  *(_QWORD *)&v96 = v40;
  *((_QWORD *)&v96 + 1) = v91;
  if (v91)
  {
    v44 = (unint64_t *)&v91->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v97[0] = v40;
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  else
  {
    v97[0] = v40;
  }
  v47 = v89;
  if (v89)
  {
    v48 = (unint64_t *)&v89->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *(_QWORD *)v95;
  if (*((char *)v97[0] + 31) >= 0)
    v51 = (char *)v97[0] + 8;
  else
    v51 = (char *)*((_QWORD *)v97[0] + 1);
  v52 = _os_log_pack_fill();
  *(_DWORD *)v52 = 68157954;
  *(_DWORD *)(v52 + 4) = 13;
  *(_WORD *)(v52 + 8) = 2080;
  *(_QWORD *)(v52 + 10) = v51;
  v53 = operator new();
  v54 = *(unsigned __int8 *)(v8 + 39);
  v55 = v79;
  if ((v54 & 0x80u) != 0)
  {
    v55 = *(_QWORD *)(v8 + 16);
    v54 = *(_QWORD *)(v8 + 24);
  }
  *(_QWORD *)v53 = v50;
  *(_OWORD *)(v53 + 8) = *(_OWORD *)&v95[8];
  *(_QWORD *)&v95[8] = 0;
  *(_QWORD *)&v95[16] = 0;
  *(_OWORD *)(v53 + 24) = v96;
  v96 = 0uLL;
  *(_QWORD *)(v53 + 40) = v55;
  *(_QWORD *)(v53 + 48) = v54;
  *(_BYTE *)(v53 + 56) = 1;
  __dst = 0;
  *(_QWORD *)&v88 = v53;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v88);
  v56 = v88;
  *(_QWORD *)&v88 = 0;
  if (v56)
  {
    v57 = *(std::__shared_weak_count **)(v56 + 32);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = *(std::__shared_weak_count **)(v56 + 16);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
    v63 = __dst;
    __dst = 0;
    if (v63)
    {
      v64 = (std::__shared_weak_count *)v63[4];
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v63[2];
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      MEMORY[0x227684CE8](v63, 0x10F0C40B62ED6C6);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(std::__shared_weak_count **)&v95[16];
  if (*(_QWORD *)&v95[16])
  {
    v74 = (unint64_t *)(*(_QWORD *)&v95[16] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
LABEL_110:
  if (v3)
  {
    sub_2245664AC(v7, v95);
    sub_22322C138((uint64_t)v80, "GP %.13s modified", v95);
    sub_223182C08((uint64_t)v80);
  }
  sub_223182C08((uint64_t)v80);
  v76 = v86;
  if (v86)
  {
    v77 = (unint64_t *)&v86->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

void sub_2237AA2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 168))
  {
    if (*(char *)(v5 - 169) < 0)
      operator delete(*(void **)(v5 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AA30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_22319A054(&a23);
  sub_22319A054(&a29);
  sub_223199DE8(v29 - 192);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237AA340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  sub_223199DE8((uint64_t)&a23);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2237AA39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AA3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v5 - 160) && *(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  v7 = *(void **)(v5 - 192);
  if (v7)
    os_release(v7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2237AA420()
{
  JUMPOUT(0x227684CE8);
}

void sub_2237AA43C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unsigned __int8 v18;
  int v19;
  size_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;
  int32x2_t v30;
  float32x2_t v31;
  void **v32;
  float32x2_t v33;
  void *v34;
  void *v35;
  float v36;
  float v37;
  float v38;
  void *v39;
  float32x2_t v40;
  const void *v41[3];
  _DWORD v42[3];
  void *__p[3];
  float32x4_t v44[4];
  void *v45;
  __int128 v46;
  void *__src[129];

  __src[128] = *(void **)MEMORY[0x24BDAC8D0];
  v3 = a2 + 56;
  sub_2245664AC(a2 + 56, __src);
  v4 = (float32x4_t *)operator new(0x28uLL);
  v5 = *(float32x4_t *)&__src[2];
  *v4 = *(float32x4_t *)__src;
  v4[1] = v5;
  v4[2].i32[0] = (__int32)__src[4];
  v4[2].i8[4] = 0;
  v45 = v4;
  v6 = (float32x4_t)xmmword_22464DCC0;
  v46 = xmmword_22464DCC0;
  v4->i8[8] = 0;
  v6.f32[0] = fabsf(*((float *)a2 + 13));
  if (v6.f32[0] <= 0.052336)
    v7 = 2;
  else
    v7 = 4;
  v5.i32[0] = 1065330231;
  if (v6.f32[0] >= 0.99863)
    v8 = 1;
  else
    v8 = v7;
  sub_223F2B7AC((uint64_t)(a2 + 32), v8, v44, v6, v5);
  sub_2236ADE38((void ***)a2 + 1, (uint64_t)__p, 0.00097656);
  v10 = sub_22456636C(v3) % 0xFFuLL;
  v18 = atomic_load((unsigned __int8 *)&qword_255795018);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_255795018))
  {
    bzero(__src, 0x3FCuLL);
    v29 = 0;
    v30 = (int32x2_t)0x100000000;
    v31 = (float32x2_t)vdup_n_s32(0x3E924745u);
    do
    {
      v32 = &__src[v29];
      v33 = vmul_f32(vcvt_f32_s32(v30), v31);
      v36 = v33.f32[0];
      v40 = vmul_f32(vcvt_f32_s32(vadd_s32(v30, (int32x2_t)0x200000002)), v31);
      v38 = fmodf(v33.f32[1], 1.0);
      *(float *)&v34 = fmodf(v36, 1.0);
      *((float *)&v34 + 1) = v38;
      v39 = v34;
      v37 = fmodf(v40.f32[1], 1.0);
      *(float *)&v35 = fmodf(v40.f32[0], 1.0);
      *((float *)&v35 + 1) = v37;
      *v32 = v39;
      v32[1] = v35;
      v30 = vadd_s32(v30, (int32x2_t)0x400000004);
      v29 += 2;
    }
    while (v29 != 126);
    __src[126] = (void *)0x3E906F003F7F1400;
    LODWORD(__src[127]) = 1058102016;
    memcpy(dword_255794C18, __src, 0x3FCuLL);
    __cxa_guard_release(&qword_255795018);
  }
  LODWORD(v11) = dword_255794C18[(unsigned __int16)(2 * v10 + 85) % 0xFFu];
  LODWORD(v12) = dword_255794C18[(unsigned __int16)(3 * v10 + 170) % 0xFFu];
  v42[0] = dword_255794C18[v10];
  v42[1] = LODWORD(v11);
  v42[2] = LODWORD(v12);
  v19 = SHIBYTE(v46);
  if (v46 >= 0)
    v20 = HIBYTE(v46);
  else
    v20 = v46;
  v21 = v20 + 3;
  if (v20 + 3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v21 >= 0x17)
  {
    v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v23 = v21 | 7;
    v24 = v23 + 1;
    v25 = (char *)operator new(v23 + 1);
    __src[1] = (void *)(v20 + 3);
    __src[2] = (void *)(v24 | 0x8000000000000000);
    __src[0] = v25;
    *(_WORD *)v25 = 28775;
    v22 = v25 + 3;
    v25[2] = 95;
  }
  else
  {
    __src[1] = 0;
    __src[2] = 0;
    __src[0] = (void *)6254695;
    HIBYTE(__src[2]) = v20 + 3;
    v22 = (char *)__src + 3;
    if (!v20)
      goto LABEL_22;
  }
  if (v19 >= 0)
    v26 = &v45;
  else
    v26 = v45;
  memmove(v22, v26, v20);
LABEL_22:
  v22[v20] = 0;
  v27 = *a2;
  HIBYTE(v41[2]) = 19;
  strcpy((char *)v41, "KeyframePlanesV2.GP");
  sub_223739E78(1, (uint64_t)__p, (float32x2_t *)v44, (uint64_t)__src, v27, (uint64_t)v42, v41, v9, *(double *)"KeyframePlanesV2.GP", v11, v12, v13, v14, v15, v16, v17, 0.0, 0);
  if (SHIBYTE(v41[2]) < 0)
  {
    operator delete((void *)v41[0]);
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
    {
LABEL_24:
      v28 = __p[0];
      if (!__p[0])
        goto LABEL_26;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__src[0]);
  v28 = __p[0];
  if (__p[0])
  {
LABEL_25:
    __p[1] = v28;
    operator delete(v28);
  }
LABEL_26:
  if (v19 < 0)
    operator delete(v45);
}

void sub_2237AA848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v48;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a47 & 0x80000000) == 0)
    {
LABEL_3:
      v48 = a25;
      if (!a25)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a47 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a42);
  v48 = a25;
  if (!a25)
  {
LABEL_4:
    if ((a41 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v48);
  if ((a41 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a36);
  _Unwind_Resume(exception_object);
}

void sub_2237AA8F8(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  __int128 v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  void **v17;
  void *v18;
  void *v19;
  int v20;
  BOOL v21;
  int v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  const void *v31;
  void *v32[2];
  unsigned __int8 v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  void *__p;
  __int128 v38;
  uint64_t v39;
  int v40;
  _OWORD v41[2];
  unsigned int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC((unsigned __int8 *)(a2 + 56), v41);
  v2 = (unsigned int *)operator new(0x28uLL);
  v3 = v41[1];
  *(_OWORD *)v2 = v41[0];
  *((_OWORD *)v2 + 1) = v3;
  v2[8] = v42;
  *((_BYTE *)v2 + 36) = 0;
  v34 = v2;
  v35 = xmmword_22464DCC0;
  *((_BYTE *)v2 + 8) = 0;
  sub_22328CE6C("cv3d.recon.", (const char *)&off_24EC58D98);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v4[2];
    }
    v6 = *(_QWORD *)(v5 + 64);
    v7 = (std::mutex *)(v6 + 32);
    std::mutex::lock((std::mutex *)(v6 + 32));
    v9 = *(_QWORD *)(v6 + 96);
    v8 = *(_QWORD *)(v6 + 104);
    std::mutex::unlock(v7);
    if (v9 != v8)
    {
      sub_2241471F8();
      v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        kdebug_trace();
        sub_2241498F4((uint64_t)v41, 0);
        v40 = 0;
        v39 = 0;
        v11 = *((unsigned __int8 *)v2 + 4);
        v12 = *v2;
        v13 = *((unsigned __int8 *)v2 + 7);
        v14 = *(unsigned __int16 *)((char *)v2 + 5);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
        {
          __p = (void *)((v12 << 24) | (v11 << 56) | 0x5F7067);
          LOWORD(v38) = v14;
          BYTE2(v38) = (v14 | (v13 << 16)) >> 16;
          *(_QWORD *)((char *)&v38 + 3) = v39;
          *(_DWORD *)((char *)&v38 + 11) = v40;
          HIBYTE(v38) = 11;
          *(_QWORD *)&v36 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v36 + 1) = 2;
          v15 = sub_2241471F8();
          sub_223452794((uint64_t)v15, v10, (uint64_t)v41, (uint64_t)&__p, &v36);
          if (SHIBYTE(v38) < 0)
            operator delete(__p);
        }
        sub_22316F8F4((uint64_t *)v41);
        kdebug_trace();
      }
    }
  }
  kdebug_trace();
  v16 = v33;
  if ((v33 & 0x80u) != 0)
    v16 = (unint64_t)v32[1];
  if (v16 >= 0x11)
  {
    v17 = v32;
    if ((v33 & 0x80u) != 0)
      v17 = (void **)v32[0];
    v18 = *v17;
    v19 = v17[1];
    v20 = *((unsigned __int8 *)v17 + 16);
    v21 = v18 == (void *)0x6365722E64337663 && v19 == (void *)0x73746174532E6E6FLL;
    if (v21 && v20 == 46)
    {
      sub_223187510();
      sub_2241498F4((uint64_t)v41, 0);
      v23 = SHIBYTE(v35);
      if (v35 >= 0)
        v24 = HIBYTE(v35);
      else
        v24 = v35;
      v25 = v24 + 3;
      if (v24 + 3 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      if (v25 >= 0x17)
      {
        v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        v28 = v25 | 7;
        if (v28 == 23)
          v28 = v27;
        v29 = v28 + 1;
        v30 = (char *)operator new(v28 + 1);
        *((_QWORD *)&v38 + 1) = v29 | 0x8000000000000000;
        __p = v30;
        *(_WORD *)v30 = 28775;
        v30[2] = 95;
        v26 = v30 + 3;
      }
      else
      {
        v38 = 0uLL;
        __p = (void *)6254695;
        HIBYTE(v38) = v24 + 3;
        v26 = (char *)&__p + 3;
        if (!v24)
        {
          BYTE3(__p) = 0;
          if ((SHIBYTE(v38) & 0x80000000) == 0)
          {
LABEL_31:
            sub_22316F8F4((uint64_t *)v41);
            goto LABEL_32;
          }
LABEL_44:
          operator delete(__p);
          goto LABEL_31;
        }
      }
      if (v23 >= 0)
        v31 = &v34;
      else
        v31 = v34;
      memmove(v26, v31, v24);
      v26[v24] = 0;
      if ((SHIBYTE(v38) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_44;
    }
  }
LABEL_32:
  kdebug_trace();
  if (((char)v33 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35) & 0x80000000) == 0)
      return;
LABEL_36:
    operator delete(v34);
    return;
  }
  operator delete(v32[0]);
  if (SHIBYTE(v35) < 0)
    goto LABEL_36;
}

void sub_2237AADA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2237AAE38()
{
  JUMPOUT(0x227684CE8);
}

void sub_2237AAE4C(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  _BYTE *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  int v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  void *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _BYTE *v103;
  const char *v104;
  uint64_t v105;
  int v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  const char *__src;
  uint64_t *__srca;
  uint64_t *v114;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v116;
  int v117;
  const char *v118;
  int v119;
  const char *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  void *v124;
  _BYTE *v125;
  void *v126;
  _BYTE *v127;
  void *__p;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  _BYTE *v133;
  _BYTE v134[48];
  size_t v135;
  unint64_t v136;
  char v137;
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  sub_223705CA8((_QWORD *)(a2 + 1872), &v130);
  sub_223705990((_QWORD *)a2, &v124);
  v4 = atomic_load((unsigned __int8 *)&qword_2540CC560);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC560))
  {
    sub_22455F53C(&v114);
    sub_223174DE4(v134, "cv3d.recon.kfplanes");
    sub_2232300E0(&v114, (uint64_t)v134, &qword_2540CC558);
    if ((v134[23] & 0x80000000) != 0)
      operator delete(*(void **)v134);
    __cxa_guard_release(&qword_2540CC560);
  }
  v123 = qword_2540CC558;
  if (**(int **)(qword_2540CC558 + 56) <= 3)
  {
    v5 = *(unsigned __int8 *)(qword_2540CC558 + 72);
    v6 = sub_22322F254(qword_2540CC558, "OSLogSurrogateAppender", 1, 0);
    v7 = v6;
    if (v5 || v6 != 0)
    {
      v106 = v5;
      v114 = &v123;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v116 = std::chrono::system_clock::now().__d_.__rep_;
      v117 = 3;
      v118 = "unknown file";
      v119 = 73;
      v121 = 0;
      v122 = 0;
      v120 = "unknown function";
      v9 = *v114;
      v10 = (const char *)(*v114 + 16);
      v104 = v10;
      v105 = *v114;
      if (*(char *)(*v114 + 39) < 0)
      {
        v10 = *(const char **)(v9 + 16);
        v11 = *(_QWORD *)(v9 + 24);
      }
      else
      {
        v11 = *(unsigned __int8 *)(*v114 + 39);
      }
      v108 = v127;
      v109 = v130;
      v107 = v126;
      v12 = v124;
      v13 = v125;
      v14 = v129;
      v110 = __p;
      v111 = v131;
      v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v134);
        sub_223199C58("com.apple.cv3d", (unint64_t)v134, &xmmword_255788F40);
        if (v134[24] && (v134[23] & 0x80000000) != 0)
          operator delete(*(void **)v134);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v16 = (const char *)&xmmword_255788F40;
      else
        v16 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v17 = byte_255788F57;
      else
        v17 = *((_QWORD *)&xmmword_255788F40 + 1);
      __src = v10;
      *(_QWORD *)v134 = os_log_create(v16, v10);
      v18 = &v134[8];
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v17 >= 0x17)
      {
        v103 = v14;
        v19 = v7;
        v20 = v12;
        v21 = v13;
        v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v22 = v17 | 7;
        v23 = v22 + 1;
        v18 = operator new(v22 + 1);
        *(_QWORD *)&v134[16] = v17;
        *(_QWORD *)&v134[24] = v23 | 0x8000000000000000;
        *(_QWORD *)&v134[8] = v18;
        v13 = v21;
        v12 = v20;
        v7 = v19;
        v14 = v103;
      }
      else
      {
        v134[31] = v17;
        if (!v17)
        {
LABEL_25:
          v18[v17] = 0;
          v134[32] = 1;
          v24 = &v134[40];
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v11 >= 0x17)
          {
            v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v26 = v11 | 7;
            v27 = v26 + 1;
            v24 = operator new(v26 + 1);
            v135 = v11;
            v136 = v27 | 0x8000000000000000;
            *(_QWORD *)&v134[40] = v24;
          }
          else
          {
            HIBYTE(v136) = v11;
            if (!v11)
            {
              v134[40] = 0;
              v137 = 1;
              v25 = *(NSObject **)v134;
              if ((SHIBYTE(v136) & 0x80000000) == 0)
                goto LABEL_29;
              goto LABEL_35;
            }
          }
          memmove(v24, __src, v11);
          v24[v11] = 0;
          v137 = 1;
          v25 = *(NSObject **)v134;
          if ((SHIBYTE(v136) & 0x80000000) == 0)
          {
LABEL_29:
            if (!v134[32])
              goto LABEL_38;
            goto LABEL_36;
          }
LABEL_35:
          operator delete(*(void **)&v134[40]);
          if (!v134[32])
          {
LABEL_38:
            if (*(_QWORD *)v134)
              os_release(*(void **)v134);
            v28 = (v13 - (_BYTE *)v12) >> 4;
            if (v7 && *(_QWORD *)(v7 + 24))
            {
              v29 = _os_log_pack_size();
              v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
              v31 = (std::__shared_weak_count *)operator new();
              v32 = v31;
              v31->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v31->__shared_owners_;
              v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v31->__shared_weak_owners_ = 0;
              v31[1].__vftable = v30;
              *(_QWORD *)v134 = v30;
              *(_QWORD *)&v134[8] = v30;
              *(_QWORD *)&v134[16] = v31;
              do
                v34 = __ldxr(p_shared_owners);
              while (__stxr(v34 + 1, p_shared_owners));
              memset(&v134[24], 0, 24);
              do
                v35 = __ldaxr(p_shared_owners);
              while (__stlxr(v35 - 1, p_shared_owners));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v32);
              }
              v36 = *(_QWORD *)v134;
              v37 = _os_log_pack_fill();
              *(_DWORD *)v37 = 134218752;
              *(_QWORD *)(v37 + 4) = 0xEF7BDEF7BDEF7BDFLL * ((v111 - v109) >> 3);
              *(_WORD *)(v37 + 12) = 2048;
              *(_QWORD *)(v37 + 14) = 0xCF3CF3CF3CF3CF3DLL * ((v108 - v107) >> 2);
              *(_WORD *)(v37 + 22) = 2048;
              *(_QWORD *)(v37 + 24) = v28;
              *(_WORD *)(v37 + 32) = 2048;
              *(_QWORD *)(v37 + 34) = (v14 - v110) >> 4;
              v38 = operator new();
              v39 = *(unsigned __int8 *)(v105 + 39);
              v40 = v104;
              if ((v39 & 0x80u) != 0)
              {
                v40 = *(const char **)(v105 + 16);
                v39 = *(_QWORD *)(v105 + 24);
              }
              *(_QWORD *)v38 = v36;
              *(_OWORD *)(v38 + 8) = *(_OWORD *)&v134[8];
              *(_QWORD *)&v134[8] = 0;
              *(_QWORD *)&v134[16] = 0;
              *(_OWORD *)(v38 + 24) = *(_OWORD *)&v134[24];
              *(_QWORD *)&v134[24] = 0;
              *(_QWORD *)&v134[32] = 0;
              *(_QWORD *)(v38 + 40) = v40;
              *(_QWORD *)(v38 + 48) = v39;
              *(_BYTE *)(v38 + 56) = 1;
              v132 = 0;
              v133 = (_BYTE *)v38;
              (*(void (**)(_QWORD, _BYTE **))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v133);
              v41 = v133;
              v133 = 0;
              if (v41)
              {
                v42 = (std::__shared_weak_count *)*((_QWORD *)v41 + 4);
                if (v42)
                {
                  v43 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                }
                v45 = (std::__shared_weak_count *)*((_QWORD *)v41 + 2);
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldaxr(v46);
                  while (__stlxr(v47 - 1, v46));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                  }
                }
                MEMORY[0x227684CE8](v41, 0x10F0C40B62ED6C6);
                v48 = v132;
                v132 = 0;
                if (v48)
                {
                  v49 = *(std::__shared_weak_count **)(v48 + 32);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  v52 = *(std::__shared_weak_count **)(v48 + 16);
                  if (v52)
                  {
                    v53 = (unint64_t *)&v52->__shared_owners_;
                    do
                      v54 = __ldaxr(v53);
                    while (__stlxr(v54 - 1, v53));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  MEMORY[0x227684CE8](v48, 0x10F0C40B62ED6C6);
                }
              }
              v55 = *(std::__shared_weak_count **)&v134[32];
              v56 = v106;
              if (*(_QWORD *)&v134[32])
              {
                v57 = (unint64_t *)(*(_QWORD *)&v134[32] + 8);
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v59 = *(std::__shared_weak_count **)&v134[16];
              if (*(_QWORD *)&v134[16])
              {
                v60 = (unint64_t *)(*(_QWORD *)&v134[16] + 8);
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
            }
            else
            {
              os_log_type_enabled(v25, OS_LOG_TYPE_INFO);
              *(_DWORD *)v134 = 134218752;
              *(_QWORD *)&v134[4] = 0xEF7BDEF7BDEF7BDFLL * ((v111 - v109) >> 3);
              *(_WORD *)&v134[12] = 2048;
              *(_QWORD *)&v134[14] = 0xCF3CF3CF3CF3CF3DLL * ((v108 - v107) >> 2);
              *(_WORD *)&v134[22] = 2048;
              *(_QWORD *)&v134[24] = v28;
              *(_WORD *)&v134[32] = 2048;
              *(_QWORD *)&v134[34] = (v14 - v110) >> 4;
              v62 = (void *)_os_log_send_and_compose_impl();
              v56 = v106;
              if (v62)
                free(v62);
            }
            if (v56)
            {
              sub_22322C138((uint64_t)&v114, "Processing %zu keyframe updates. %zu updates pending updates, %zu integration candidates, %zu overlapping candidates.", 0xEF7BDEF7BDEF7BDFLL * ((v131 - v130) >> 3), 0xCF3CF3CF3CF3CF3DLL * ((v127 - (_BYTE *)v126) >> 2), (v125 - (_BYTE *)v124) >> 4, (v129 - (_BYTE *)__p) >> 4);
              sub_223182C08((uint64_t)&v114);
            }
            sub_223182C08((uint64_t)&v114);
            v63 = v122;
            if (v122)
            {
              v64 = (unint64_t *)&v122->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            goto LABEL_92;
          }
LABEL_36:
          if ((v134[31] & 0x80000000) != 0)
            operator delete(*(void **)&v134[8]);
          goto LABEL_38;
        }
      }
      memmove(v18, v16, v17);
      goto LABEL_25;
    }
  }
LABEL_92:
  kdebug_trace();
  if (*(_BYTE *)(a2 + 1832))
  {
    v114 = (uint64_t *)(a2 + 8);
    LOBYTE(rep) = 1;
    v66 = a1[1];
    if (!v66)
      goto LABEL_99;
  }
  else
  {
    LOBYTE(v114) = 0;
    LOBYTE(rep) = 0;
    v66 = a1[1];
    if (!v66)
      goto LABEL_99;
  }
  v67 = *a1;
  v68 = 24 * v66;
  do
  {
    *(_QWORD *)v134 = a2;
    *(_QWORD *)&v134[8] = &v114;
    v69 = *(unsigned int *)(v67 + 16);
    if ((_DWORD)v69 == -1)
      sub_22316DD70();
    v133 = v134;
    ((void (*)(_BYTE **, uint64_t))off_24EC58E00[v69])(&v133, v67);
    v67 += 24;
    v68 -= 24;
  }
  while (v68);
LABEL_99:
  v70 = a1;
  v71 = (uint64_t *)v130;
  __srca = (uint64_t *)v131;
  if (v130 != v131)
  {
    do
    {
      v72 = *((_BYTE *)v71 + 240);
      if ((v72 & 1) != 0)
      {
        if ((v71[30] & 0x32) != 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeEngineAdapter.cpp", 95, (uint64_t)"!relocalized && !external && !deleted", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v72 & 0xC) != 8&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeEngineAdapter.cpp", 96, (uint64_t)"content_updated && !pose_updated", 32, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
LABEL_171:
          abort();
        }
        v77 = v70[1];
        if (v77)
        {
          v78 = *v70;
          v79 = 24 * v77;
          while (1)
          {
            v114 = v71;
            v80 = *(unsigned int *)(v78 + 16);
            if ((_DWORD)v80 == -1)
              break;
            *(_QWORD *)v134 = &v114;
            ((void (*)(_BYTE *, uint64_t))off_24EC58E10[v80])(v134, v78);
            v78 += 24;
            v79 -= 24;
            if (!v79)
              goto LABEL_101;
          }
LABEL_166:
          sub_22316DD70();
        }
      }
      else if ((v71[30] & 2) != 0)
      {
        if ((v71[30] & 0x30) != 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeEngineAdapter.cpp", 99, (uint64_t)"!created && !external && !deleted", 33, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v72 & 4) == 0&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeEngineAdapter.cpp", 100, (uint64_t)"pose_updated", 12, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_171;
        }
        LOBYTE(v133) = (v72 & 4) >> 2;
        BYTE1(v133) = (v72 & 8) != 0;
        v81 = v70[1];
        if (v81)
        {
          v82 = *v70;
          v83 = 24 * v81;
          do
          {
            *(_QWORD *)v134 = v71;
            *(_QWORD *)&v134[8] = &v133;
            v84 = *(unsigned int *)(v82 + 16);
            if ((_DWORD)v84 == -1)
              sub_22316DD70();
            v114 = (uint64_t *)v134;
            ((void (*)(uint64_t **, uint64_t))off_24EC58E20[v84])(&v114, v82);
            v82 += 24;
            v83 -= 24;
          }
          while (v83);
        }
      }
      else if ((v71[30] & 0xC) != 0)
      {
        if ((v71[30] & 0x30) != 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeEngineAdapter.cpp", 105, (uint64_t)"!created && !external && !deleted", 33, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_171;
        }
        LOBYTE(v133) = (v72 & 4) >> 2;
        BYTE1(v133) = (v72 & 8) != 0;
        v73 = v70[1];
        if (v73)
        {
          v74 = *v70;
          v75 = 24 * v73;
          do
          {
            *(_QWORD *)v134 = v71;
            *(_QWORD *)&v134[8] = &v133;
            v76 = *(unsigned int *)(v74 + 16);
            if ((_DWORD)v76 == -1)
              sub_22316DD70();
            v114 = (uint64_t *)v134;
            ((void (*)(uint64_t **, uint64_t))off_24EC58E30[v76])(&v114, v74);
            v74 += 24;
            v75 -= 24;
          }
          while (v75);
        }
      }
      else if ((v71[30] & 0x10) != 0)
      {
        if ((v71[30] & 0x20) != 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/v2/KeyframeEngineAdapter.cpp", 110, (uint64_t)"!created && !deleted && !pose_updated && !content_updated", 57, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_171;
        }
        v89 = v70[1];
        if (v89)
        {
          v90 = *v70;
          v91 = 24 * v89;
          do
          {
            v114 = v71;
            v92 = *(unsigned int *)(v90 + 16);
            if ((_DWORD)v92 == -1)
              goto LABEL_166;
            *(_QWORD *)v134 = &v114;
            ((void (*)(_BYTE *, uint64_t))off_24EC58E40[v92])(v134, v90);
            v90 += 24;
            v91 -= 24;
          }
          while (v91);
        }
      }
      else if ((v71[30] & 0x20) != 0)
      {
        v85 = v70[1];
        if (v85)
        {
          v86 = *v70;
          v87 = 24 * v85;
          do
          {
            v114 = v71;
            v88 = *(unsigned int *)(v86 + 16);
            if ((_DWORD)v88 == -1)
              goto LABEL_166;
            *(_QWORD *)v134 = &v114;
            ((void (*)(_BYTE *, uint64_t))off_24EC58E50[v88])(v134, v86);
            v86 += 24;
            v87 -= 24;
          }
          while (v87);
        }
      }
LABEL_101:
      v71 += 31;
    }
    while (v71 != __srca);
  }
  v93 = v70[1];
  if (v93)
  {
    v94 = *v70;
    v95 = 24 * v93;
    do
    {
      v96 = *(unsigned int *)(v94 + 16);
      if ((_DWORD)v96 == -1)
        sub_22316DD70();
      *(_QWORD *)v134 = &v114;
      ((void (*)(_BYTE *, uint64_t))off_24EC58E60[v96])(v134, v94);
      v94 += 24;
      v95 -= 24;
    }
    while (v95);
  }
  kdebug_trace();
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  v97 = v130;
  if (v130)
  {
    v98 = v131;
    v99 = v130;
    if (v131 != v130)
    {
      do
      {
        v100 = (std::__shared_weak_count *)*((_QWORD *)v98 - 28);
        if (v100)
        {
          v101 = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        v98 -= 248;
      }
      while (v98 != v97);
      v99 = v130;
    }
    v131 = v97;
    operator delete(v99);
  }
}

