void sub_223EC103C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (__p)
  {
    operator delete(__p);
    v32 = a20;
    if (!a20)
    {
LABEL_3:
      v33 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v32 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v32);
  v33 = a23;
  if (!a23)
  {
LABEL_4:
    v34 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v33);
  v34 = a26;
  if (!a26)
  {
LABEL_5:
    v35 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v34);
  v35 = a29;
  if (!a29)
  {
LABEL_6:
    v36 = *(void **)(v30 - 152);
    if (!v36)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v35);
  v36 = *(void **)(v30 - 152);
  if (!v36)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v30 - 144) = v36;
  operator delete(v36);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EC1100(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __n128 v21;
  __n128 v22;
  char *v23;
  char *v24;
  char *v25;
  int64x2_t **v26;
  __n128 v27;
  __n128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int64x2_t v40;
  int8x16_t v41;
  int64x2_t *v42;
  int64x2_t v43;
  int64x2_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int64x2_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int64x2_t v51;
  int8x16_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  char *v65;
  _QWORD *v66;
  _QWORD *v67;
  __n128 v69;
  __n128 v70;
  int8x16_t v71;
  int8x16_t v72;
  int64x2_t *v73;
  int64x2_t v74;
  int64x2_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int64x2_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int64x2_t v82;
  int8x16_t v83;
  __n128 v84;
  __n128 v85;
  char *v86;
  int64x2_t **v87;
  char *v88;
  char *v89;
  __n128 v90;
  __n128 v91;
  int8x16_t v92;
  int8x16_t v93;
  int64x2_t *v94;
  int64x2_t v95;
  int64x2_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int64x2_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int64x2_t v103;
  int8x16_t v104;
  __n128 v105;
  __n128 v106;
  char *v107;
  char *v108;
  char *v110;
  _QWORD *v111;
  _QWORD *v112;
  char *v115;
  char *v116;
  char *v117;
  _QWORD *v118;
  _QWORD *v119;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  _QWORD *v125;
  _QWORD *v126;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  _QWORD *v133;
  int8x16_t v136;
  int8x16_t v137;
  void *__p;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  void *v144;
  char *v145;
  uint64_t v146;
  void *v147;
  char *v148;
  uint64_t v149;
  void *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  _QWORD v156[2];
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;

  v13 = *((_QWORD *)a1 + 2);
  v12 = *((_QWORD *)a1 + 3);
  v14 = *((_QWORD *)a1 + 1);
  if (v14 >= 0)
    v15 = *((_QWORD *)a1 + 1);
  else
    v15 = v14 + 1;
  v16 = v15 >> 1;
  v17 = *a1;
  v157 = a1[1];
  v158 = v17;
  if (v12 >= 0)
    v18 = v12;
  else
    v18 = v12 + 1;
  v19 = v18 >> 1;
  v156[0] = v17;
  v20 = v12 - 2 * v19 + v14 - 2 * v16;
  v159 = v13;
  v160 = v19 + v16 + ((v20 + ((v20 & 0x80) >> 7)) << 24 >> 25);
  v156[1] = v160;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  __p = 0;
  v139 = 0;
  v140 = 0;
  sub_2233DD4BC(&v158, v156, a2, &v153, (char **)&v150, (char **)&v147);
  sub_2233DD4BC(&v158, v156, a3, &v144, (char **)&v141, (char **)&__p);
  v24 = (char *)v147;
  v23 = v148;
  if (v147 == v148)
    goto LABEL_80;
  v26 = (int64x2_t **)__p;
  v25 = v139;
  if ((unint64_t)(v148 - (_BYTE *)v147) < 0x80 || a4 > 0x63 || (unint64_t)(v139 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v139)
    {
      do
      {
        v56 = (char *)__p;
        if (__p != v25)
        {
          do
          {
            v57 = *(_QWORD **)v24;
            v58 = *(_QWORD **)v56;
            if (*(_QWORD *)(*(_QWORD *)v24 + 48) >= *(_QWORD *)(*(_QWORD *)v56 + 32)
              && v57[4] <= v58[6]
              && v57[7] >= v58[5]
              && v57[5] <= v58[7])
            {
              if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v57, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v58, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v25 = v139;
            }
            v56 += 8;
          }
          while (v56 != v25);
          v23 = v148;
        }
        v24 += 8;
      }
      while (v24 != v23);
    }
  }
  else
  {
    v27 = (__n128)vdupq_n_s64(0x8000000000000000);
    v28 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v29 = (int8x16_t)v28;
    v30 = (int8x16_t)v27;
    do
    {
      v31 = *(int64x2_t **)v24;
      v24 += 8;
      v32 = v31[2];
      v33 = v31[3];
      v34 = (int8x16_t)vcgtq_s64((int64x2_t)v28, v32);
      v35 = vbslq_s8(v34, (int8x16_t)v32, v29);
      v36 = (int64x2_t)vbslq_s8(v34, (int8x16_t)v32, (int8x16_t)v28);
      v37 = (int8x16_t)vcgtq_s64(v36, v33);
      v29 = vbslq_s8(v37, (int8x16_t)v33, v35);
      v28 = (__n128)vbslq_s8(v37, (int8x16_t)v33, (int8x16_t)v36);
      v38 = (int8x16_t)vcgtq_s64(v32, (int64x2_t)v27);
      v39 = vbslq_s8(v38, (int8x16_t)v32, v30);
      v40 = (int64x2_t)vbslq_s8(v38, (int8x16_t)v32, (int8x16_t)v27);
      v41 = (int8x16_t)vcgtq_s64(v33, v40);
      v30 = vbslq_s8(v41, (int8x16_t)v33, v39);
      v27 = (__n128)vbslq_s8(v41, (int8x16_t)v33, (int8x16_t)v40);
    }
    while (v24 != v148);
    v136 = v29;
    v137 = v30;
    if (__p != v139)
    {
      do
      {
        v42 = *v26++;
        v43 = v42[2];
        v44 = v42[3];
        v45 = (int8x16_t)vcgtq_s64((int64x2_t)v28, v43);
        v46 = vbslq_s8(v45, (int8x16_t)v43, v29);
        v47 = (int64x2_t)vbslq_s8(v45, (int8x16_t)v43, (int8x16_t)v28);
        v48 = (int8x16_t)vcgtq_s64(v47, v44);
        v29 = vbslq_s8(v48, (int8x16_t)v44, v46);
        v28 = (__n128)vbslq_s8(v48, (int8x16_t)v44, (int8x16_t)v47);
        v49 = (int8x16_t)vcgtq_s64(v43, (int64x2_t)v27);
        v50 = vbslq_s8(v49, (int8x16_t)v43, v30);
        v51 = (int64x2_t)vbslq_s8(v49, (int8x16_t)v43, (int8x16_t)v27);
        v52 = (int8x16_t)vcgtq_s64(v44, v51);
        v30 = vbslq_s8(v52, (int8x16_t)v44, v50);
        v27 = (__n128)vbslq_s8(v52, (int8x16_t)v44, (int8x16_t)v51);
      }
      while (v26 != (int64x2_t **)v139);
      v136 = v29;
      v137 = v30;
    }
    if ((sub_223EC060C(&v136, &v147, &__p, a4 + 1, a5, a6, a7, v28, v27) & 1) == 0)
    {
LABEL_175:
      v129 = 0;
      v130 = (char *)__p;
      if (!__p)
        goto LABEL_177;
      goto LABEL_176;
    }
  }
  v53 = v145;
  if ((unint64_t)(v145 - (_BYTE *)v144) > 0x7F)
  {
    v55 = (char *)v147;
    v54 = v148;
    if ((unint64_t)(v142 - (_BYTE *)v141) >= 0x80
      && a4 <= 0x63
      && (unint64_t)(v148 - (_BYTE *)v147) >= 0x79)
    {
      v69 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v70 = (__n128)vdupq_n_s64(0x8000000000000000);
      v136 = (int8x16_t)v69;
      v137 = (int8x16_t)v70;
      if (v147 != v148)
      {
        v71 = (int8x16_t)v69;
        v72 = (int8x16_t)v70;
        do
        {
          v73 = *(int64x2_t **)v55;
          v55 += 8;
          v74 = v73[2];
          v75 = v73[3];
          v76 = (int8x16_t)vcgtq_s64((int64x2_t)v69, v74);
          v77 = vbslq_s8(v76, (int8x16_t)v74, v71);
          v78 = (int64x2_t)vbslq_s8(v76, (int8x16_t)v74, (int8x16_t)v69);
          v79 = (int8x16_t)vcgtq_s64(v78, v75);
          v71 = vbslq_s8(v79, (int8x16_t)v75, v77);
          v69 = (__n128)vbslq_s8(v79, (int8x16_t)v75, (int8x16_t)v78);
          v80 = (int8x16_t)vcgtq_s64(v74, (int64x2_t)v70);
          v81 = vbslq_s8(v80, (int8x16_t)v74, v72);
          v82 = (int64x2_t)vbslq_s8(v80, (int8x16_t)v74, (int8x16_t)v70);
          v83 = (int8x16_t)vcgtq_s64(v75, v82);
          v72 = vbslq_s8(v83, (int8x16_t)v75, v81);
          v70 = (__n128)vbslq_s8(v83, (int8x16_t)v75, (int8x16_t)v82);
        }
        while (v55 != v148);
        v136 = v71;
        v137 = v72;
      }
      if (!sub_223EC060C(&v136, &v147, &v144, a4 + 1, a5, a6, a7, v69, v70)
        || (sub_223EC060C(&v136, &v147, &v141, a4 + 1, a5, a6, a7, v84, v85) & 1) == 0)
      {
        goto LABEL_175;
      }
      goto LABEL_80;
    }
  }
  else
  {
    v55 = (char *)v147;
    v54 = v148;
  }
  if (v144 == v145 || v55 == v54)
  {
    if (v55 == v54)
      goto LABEL_80;
    goto LABEL_39;
  }
  do
  {
    v61 = (char *)v144;
    if (v144 != v53)
    {
      do
      {
        v62 = *(_QWORD **)v55;
        v63 = *(_QWORD **)v61;
        if (*(_QWORD *)(*(_QWORD *)v55 + 48) >= *(_QWORD *)(*(_QWORD *)v61 + 32)
          && v62[4] <= v63[6]
          && v62[7] >= v63[5]
          && v62[5] <= v63[7])
        {
          if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v62, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v63, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
          v53 = v145;
        }
        v61 += 8;
      }
      while (v61 != v53);
      v54 = v148;
    }
    v55 += 8;
  }
  while (v55 != v54);
  v55 = (char *)v147;
  if (v147 != v54)
  {
LABEL_39:
    v60 = v142;
    if (v141 != v142)
    {
      do
      {
        v65 = (char *)v141;
        if (v141 != v60)
        {
          do
          {
            v66 = *(_QWORD **)v55;
            v67 = *(_QWORD **)v65;
            if (*(_QWORD *)(*(_QWORD *)v55 + 48) >= *(_QWORD *)(*(_QWORD *)v65 + 32)
              && v66[4] <= v67[6]
              && v66[7] >= v67[5]
              && v66[5] <= v67[7])
            {
              if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v66, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v67, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v60 = v142;
            }
            v65 += 8;
          }
          while (v65 != v60);
          v54 = v148;
        }
        v55 += 8;
      }
      while (v55 != v54);
    }
  }
LABEL_80:
  v87 = (int64x2_t **)__p;
  v86 = v139;
  if (__p == v139)
    goto LABEL_117;
  v89 = v153;
  v88 = v154;
  if ((unint64_t)(v154 - v153) < 0x80
    || (unint64_t)(v151 - (_BYTE *)v150) < 0x80
    || a4 > 0x63
    || (unint64_t)(v139 - (_BYTE *)__p) < 0x79)
  {
    if (v153 == v154)
    {
      v108 = (char *)v150;
      v107 = v151;
      if (v150 == v151 || __p == v139)
        goto LABEL_117;
    }
    else
    {
      do
      {
        v110 = (char *)__p;
        if (__p != v86)
        {
          do
          {
            v111 = *(_QWORD **)v89;
            v112 = *(_QWORD **)v110;
            if (*(_QWORD *)(*(_QWORD *)v89 + 48) >= *(_QWORD *)(*(_QWORD *)v110 + 32)
              && v111[4] <= v112[6]
              && v111[7] >= v112[5]
              && v111[5] <= v112[7])
            {
              if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v111, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v112, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
              v86 = v139;
            }
            v110 += 8;
          }
          while (v110 != v86);
          v88 = v154;
        }
        v89 += 8;
      }
      while (v89 != v88);
      v108 = (char *)v150;
      v107 = v151;
      if (v150 == v151 || __p == v86)
        goto LABEL_117;
    }
    do
    {
      v117 = (char *)__p;
      if (__p != v86)
      {
        do
        {
          v118 = *(_QWORD **)v108;
          v119 = *(_QWORD **)v117;
          if (*(_QWORD *)(*(_QWORD *)v108 + 48) >= *(_QWORD *)(*(_QWORD *)v117 + 32)
            && v118[4] <= v119[6]
            && v118[7] >= v119[5]
            && v118[5] <= v119[7])
          {
            if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v118, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v119, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
            v86 = v139;
          }
          v117 += 8;
        }
        while (v117 != v86);
        v107 = v151;
      }
      v108 += 8;
    }
    while (v108 != v107);
    goto LABEL_117;
  }
  v90 = (__n128)vdupq_n_s64(0x8000000000000000);
  v91 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v92 = (int8x16_t)v91;
  v93 = (int8x16_t)v90;
  do
  {
    v94 = *v87++;
    v95 = v94[2];
    v96 = v94[3];
    v97 = (int8x16_t)vcgtq_s64((int64x2_t)v91, v95);
    v98 = vbslq_s8(v97, (int8x16_t)v95, v92);
    v99 = (int64x2_t)vbslq_s8(v97, (int8x16_t)v95, (int8x16_t)v91);
    v100 = (int8x16_t)vcgtq_s64(v99, v96);
    v92 = vbslq_s8(v100, (int8x16_t)v96, v98);
    v91 = (__n128)vbslq_s8(v100, (int8x16_t)v96, (int8x16_t)v99);
    v101 = (int8x16_t)vcgtq_s64(v95, (int64x2_t)v90);
    v102 = vbslq_s8(v101, (int8x16_t)v95, v93);
    v103 = (int64x2_t)vbslq_s8(v101, (int8x16_t)v95, (int8x16_t)v90);
    v104 = (int8x16_t)vcgtq_s64(v96, v103);
    v93 = vbslq_s8(v104, (int8x16_t)v96, v102);
    v90 = (__n128)vbslq_s8(v104, (int8x16_t)v96, (int8x16_t)v103);
  }
  while (v87 != (int64x2_t **)v139);
  v136 = v92;
  v137 = v93;
  if (!sub_223EC060C(&v136, &v153, &__p, a4 + 1, a5, a6, a7, v90, v91)
    || (sub_223EC060C(&v136, &v150, &__p, a4 + 1, a5, a6, a7, v105, v106) & 1) == 0)
  {
    goto LABEL_175;
  }
LABEL_117:
  v116 = v153;
  v115 = v154;
  if ((unint64_t)(v154 - v153) < 0x80 || a4 > 0x63 || (unint64_t)(v145 - (_BYTE *)v144) < 0x79)
  {
    if (v153 != v154)
    {
      v121 = v145;
      if (v144 != v145)
      {
        do
        {
          v124 = (char *)v144;
          if (v144 != v121)
          {
            do
            {
              v125 = *(_QWORD **)v116;
              v126 = *(_QWORD **)v124;
              if (*(_QWORD *)(*(_QWORD *)v116 + 48) >= *(_QWORD *)(*(_QWORD *)v124 + 32)
                && v125[4] <= v126[6]
                && v125[7] >= v126[5]
                && v125[5] <= v126[7])
              {
                if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v125, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v126, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
                v121 = v145;
              }
              v124 += 8;
            }
            while (v124 != v121);
            v115 = v154;
          }
          v116 += 8;
        }
        while (v116 != v115);
      }
    }
  }
  else if ((sub_223EC060C(&v158, &v153, &v144, a4 + 1, a5, a6, a7, v21, v22) & 1) == 0)
  {
    goto LABEL_175;
  }
  v123 = (char *)v150;
  v122 = v151;
  if ((unint64_t)(v151 - (_BYTE *)v150) < 0x80 || a4 > 0x63 || (unint64_t)(v142 - (_BYTE *)v141) < 0x79)
  {
    if (v150 != v151)
    {
      v128 = v142;
      if (v141 != v142)
      {
        do
        {
          v131 = (char *)v141;
          if (v141 != v128)
          {
            do
            {
              v132 = *(_QWORD **)v123;
              v133 = *(_QWORD **)v131;
              if (*(_QWORD *)(*(_QWORD *)v123 + 48) >= *(_QWORD *)(*(_QWORD *)v131 + 32)
                && v132[4] <= v133[6]
                && v132[7] >= v133[5]
                && v132[5] <= v133[7])
              {
                if (!sub_223EC1BF8(*(_DWORD *)a5, **(_QWORD **)(a5 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8), (uint64_t)v132, *(_DWORD *)(a5 + 16), **(_QWORD **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), (uint64_t)v133, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *(_QWORD *)(a5 + 48), *(unsigned __int8 ***)(a5 + 56)))goto LABEL_175;
                v128 = v142;
              }
              v131 += 8;
            }
            while (v131 != v128);
            v122 = v151;
          }
          v123 += 8;
        }
        while (v123 != v122);
      }
    }
  }
  else if ((sub_223EC060C(v156, &v150, &v141, a4 + 1, a5, a6, a7, v21, v22) & 1) == 0)
  {
    goto LABEL_175;
  }
  v129 = 1;
  v130 = (char *)__p;
  if (__p)
  {
LABEL_176:
    v139 = v130;
    operator delete(v130);
  }
LABEL_177:
  if (v141)
  {
    v142 = (char *)v141;
    operator delete(v141);
  }
  if (v144)
  {
    v145 = (char *)v144;
    operator delete(v144);
  }
  if (v147)
  {
    v148 = (char *)v147;
    operator delete(v147);
  }
  if (v150)
  {
    v151 = (char *)v150;
    operator delete(v150);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  return v129;
}

void sub_223EC1B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (__p)
  {
    operator delete(__p);
    v32 = a20;
    if (!a20)
    {
LABEL_3:
      v33 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v32 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v32);
  v33 = a23;
  if (!a23)
  {
LABEL_4:
    v34 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v33);
  v34 = a26;
  if (!a26)
  {
LABEL_5:
    v35 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v34);
  v35 = a29;
  if (!a29)
  {
LABEL_6:
    v36 = *(void **)(v30 - 152);
    if (!v36)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v35);
  v36 = *(void **)(v30 - 152);
  if (!v36)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v30 - 144) = v36;
  operator delete(v36);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EC1BF8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 **a12)
{
  _QWORD *v12;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  BOOL v103;
  uint64_t *v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _QWORD *v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  char v129[8];
  int v130;
  char v131;
  uint64_t v132;
  __int16 v133;
  int v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  unsigned __int128 v163;
  uint64_t v164;
  char v165;
  char v166;
  uint64_t v167;
  __int128 v168;
  int v169;
  _OWORD v170[2];
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  unsigned __int128 v193;
  uint64_t v194;
  char v195;
  char v196;
  uint64_t v197;
  __int128 v198;
  int v199;
  _OWORD v200[2];
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  unsigned __int128 v211;
  __int128 v212;
  unsigned __int128 v213;
  _QWORD v214[3];
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  unsigned __int128 v218;
  uint64_t v219;
  _QWORD v220[3];
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  unsigned __int128 v224;
  uint64_t v225;

  v12 = (_QWORD *)a8;
  v14 = a4;
  if (*(_BYTE *)(a4 + 96) && (unint64_t)(*(_QWORD *)(a4 + 80) + 1) < *(_QWORD *)(a4 + 88)
    || *(_BYTE *)(a8 + 96) && (unint64_t)(*(_QWORD *)(a8 + 80) + 1) < *(_QWORD *)(a8 + 88))
  {
    return 1;
  }
  v19 = (a3 - a2) >> 3;
  if (a3 == a2)
    v20 = 0;
  else
    v20 = v19 + 1;
  v220[0] = a3;
  v220[1] = a2;
  v220[2] = a3;
  v221 = (a3 - a2) >> 3;
  v111 = v20;
  v222 = v20;
  *(_QWORD *)&v223 = a2;
  *((_QWORD *)&v223 + 1) = a2;
  v224 = __PAIR128__(v221, a3);
  v225 = 0;
  if (a7 == a6)
    v21 = 0;
  else
    v21 = ((a7 - a6) >> 3) + 1;
  v214[0] = a7;
  v214[1] = a6;
  v214[2] = a7;
  v215 = (a7 - a6) >> 3;
  v123 = v21;
  v216 = v21;
  *(_QWORD *)&v217 = a6;
  *((_QWORD *)&v217 + 1) = a6;
  v218 = __PAIR128__(v215, a7);
  v127 = v215;
  v219 = 0;
  v212 = v223;
  v213 = v224;
  v210 = v217;
  v211 = __PAIR128__(v215, a7);
  v22 = *(_DWORD *)a4;
  v107 = *(_DWORD *)a8;
  v209 = *(_QWORD *)(a4 + 64);
  v208 = *(_QWORD *)(a4 + 104);
  v207 = 0;
  v206 = 0u;
  v205 = 0u;
  v204 = 0;
  v203 = 0u;
  v202 = 0u;
  v201 = 0;
  memset(v200, 0, sizeof(v200));
  v104 = (uint64_t *)(a8 + 32);
  sub_2233EE968(a4, v220, (uint64_t *)&v205, (uint64_t)&v202, (uint64_t *)v200, &v209, &v208, v22, (uint64_t *)(a8 + 32), a10);
  v23 = v203;
  v24 = v204;
  v25 = v204 - 1;
  if (v204 >= *((uint64_t *)&v203 + 1))
  {
    v26 = v203;
    if (v25 <= *((uint64_t *)&v203 + 1))
      v26 = *((_QWORD *)&v202 + 1) + 8 * (v25 % *((_QWORD *)&v203 + 1));
  }
  else
  {
    v26 = v202 - 8;
  }
  if (v204 == 1)
  {
    v27 = v111 - 1;
    if (v111 >= v19)
    {
      v26 = a3;
      if (v27 <= v19)
        v26 = a2 + 8 * (v27 % v19);
    }
    else
    {
      v26 = a3 - 8;
    }
    if (v111 == v204)
    {
      v27 = v111;
      v26 = a3;
    }
    v28 = (a3 - a2) >> 3;
    v110 = a3;
    v108 = a2;
  }
  else
  {
    v27 = v204 - 1;
    v28 = *((_QWORD *)&v203 + 1);
    v110 = v203;
    v108 = *((_QWORD *)&v202 + 1);
  }
  v180 = v202;
  v181 = v203;
  v182 = v204--;
  if (v24 >= *((uint64_t *)&v203 + 1))
  {
    if (v25 <= *((uint64_t *)&v203 + 1))
      v23 = *((_QWORD *)&v202 + 1) + 8 * (v25 % *((_QWORD *)&v203 + 1));
  }
  else
  {
    v23 = v202 - 8;
  }
  *(_QWORD *)&v202 = v23;
  v205 = v180;
  v206 = v181;
  v207 = v182;
  v29 = v27 - 1;
  if (v27 < v28)
  {
    v116 = v26 - 8;
    if (v27 == 1)
      goto LABEL_31;
LABEL_35:
    v18 = 1;
    if (v25 == v201)
      return v18;
    goto LABEL_45;
  }
  v116 = v110;
  if (v29 <= v28)
  {
    v116 = v108 + 8 * (v29 % v28);
    if (v27 != 1)
      goto LABEL_35;
  }
  else if (v27 != 1)
  {
    goto LABEL_35;
  }
LABEL_31:
  v30 = v111 - 1;
  if (v111 >= v19)
  {
    v31 = a3;
    if (v30 <= v19)
      v31 = a2 + 8 * (v30 % v19);
  }
  else
  {
    v31 = a3 - 8;
  }
  v29 = v111;
  if (v111 == v27)
  {
    v32 = a3;
  }
  else
  {
    v29 = v111 - 1;
    v32 = v31;
  }
  v116 = v32;
  v28 = (a3 - a2) >> 3;
  v110 = a3;
  v108 = a2;
  v18 = 1;
  if (v25 != v201)
  {
LABEL_45:
    v112 = v29;
    v109 = v28;
    v115 = (uint64_t *)(v14 + 32);
    v105 = -v22;
    v121 = (__int128 *)(a10 + 8);
    v119 = -v107;
    v33 = v123 < v127;
    if (v123 >= v127)
      v34 = 0;
    else
      v34 = -1;
    v117 = v123 - 1;
    v118 = a5;
    if (v123 - 1 > v127)
      v33 = 1;
    v114 = v33;
    if (v111 >= v19)
      v35 = 0;
    else
      v35 = -1;
    v106 = a3;
    v36 = *((_QWORD *)&v206 + 1);
    v37 = v207;
    v113 = a7 + 8 * v34;
    v38 = v111 - 1 > v19 || v111 < v19;
    v103 = v38;
    v102 = a3 + 8 * v35;
    v120 = v12;
    v122 = v14;
    while (1)
    {
      if (v37 >= v36)
      {
        v42 = v37 - 1;
        if (v42 <= v36)
          v41 = (float *)(*((_QWORD *)&v205 + 1) + 8 * (v42 % v36));
        else
          v41 = (float *)v206;
      }
      else
      {
        v41 = (float *)(v205 - 8);
      }
      v43 = (float)((float)(v41[1] - *(float *)(a10 + 4)) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 16);
      if (v43 >= 0.0)
        v44 = 0.5;
      else
        v44 = -0.5;
      sub_2233DC31C(v43 + v44);
      v45 = (float)((float)(*v41 - *(float *)a10) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 8);
      if (v45 >= 0.0)
        v46 = 0.5;
      else
        v46 = -0.5;
      v47 = v45 + v46;
      sub_2233DC31C(v45 + v46);
      v48 = ceilf(v47);
      v49 = floorf(v47);
      if (v47 >= 0.0)
        v48 = v49;
      v50 = (uint64_t)v48;
      if (v105 == 1)
      {
        if (*v104 > v50)
          return 1;
      }
      else if (v105 == -1 && v12[6] < v50)
      {
        return 1;
      }
      if (v207 >= *((uint64_t *)&v206 + 1))
      {
        if (v207 - 1 <= *((uint64_t *)&v206 + 1))
        {
          v51 = *((_QWORD *)&v205 + 1) + 8 * ((v207 - 1) % *((_QWORD *)&v206 + 1));
          v52 = *((_QWORD *)&v203 + 1);
          v53 = v204;
          if (v204 < *((uint64_t *)&v203 + 1))
          {
LABEL_82:
            v54 = v202 - 8;
            goto LABEL_90;
          }
        }
        else
        {
          v51 = v206;
          v52 = *((_QWORD *)&v203 + 1);
          v53 = v204;
          if (v204 < *((uint64_t *)&v203 + 1))
            goto LABEL_82;
        }
      }
      else
      {
        v51 = v205 - 8;
        v52 = *((_QWORD *)&v203 + 1);
        v53 = v204;
        if (v204 < *((uint64_t *)&v203 + 1))
          goto LABEL_82;
      }
      v55 = v53 - 1;
      if (v55 <= v52)
        v54 = *((_QWORD *)&v202 + 1) + 8 * (v55 % v52);
      else
        v54 = v203;
LABEL_90:
      *(_QWORD *)&v180 = v14;
      *((_QWORD *)&v180 + 1) = v209;
      *(_QWORD *)&v181 = v51;
      *((_QWORD *)&v181 + 1) = v54;
      v182 = v116;
      v183 = v108;
      v184 = v110;
      v185 = v109;
      v186 = v112;
      v187 = v106;
      v188 = a2;
      v189 = v106;
      v190 = v19;
      v191 = v111;
      v192 = v212;
      v193 = v213;
      v194 = 0;
      v195 = 1;
      v196 = 0;
      v197 = *(_QWORD *)a10;
      v198 = *v121;
      v199 = *(_DWORD *)(a10 + 24);
      v179 = v12[8];
      v178 = v12[13];
      v177 = 0;
      v175 = 0u;
      v176 = 0u;
      v174 = 0;
      v172 = 0u;
      v173 = 0u;
      v171 = 0;
      memset(v170, 0, sizeof(v170));
      sub_2233EE968((uint64_t)v12, v214, (uint64_t *)&v175, (uint64_t)&v172, (uint64_t *)v170, &v179, &v178, v107, v115, a10);
      v56 = v173;
      v57 = v174;
      v58 = v174 - 1;
      if (v174 >= *((uint64_t *)&v173 + 1))
      {
        v59 = v173;
        if (v58 <= *((uint64_t *)&v173 + 1))
          v59 = *((_QWORD *)&v172 + 1) + 8 * (v58 % *((_QWORD *)&v173 + 1));
      }
      else
      {
        v59 = v172 - 8;
      }
      if (v174 == 1)
      {
        v59 = v113;
        if (!v114)
          v59 = a6 + 8 * (v117 % v127);
        v61 = v123;
        if (v123 == v174)
          v59 = a7;
        else
          v61 = v123 - 1;
        v60 = v127;
        v125 = a6;
        v128 = a7;
      }
      else
      {
        v125 = *((_QWORD *)&v172 + 1);
        v60 = *((_QWORD *)&v173 + 1);
        v128 = v173;
        v61 = v174 - 1;
      }
      v150 = v172;
      v151 = v173;
      v152 = v174--;
      if (v57 >= *((uint64_t *)&v173 + 1))
      {
        if (v58 <= *((uint64_t *)&v173 + 1))
          v56 = *((_QWORD *)&v172 + 1) + 8 * (v58 % *((_QWORD *)&v173 + 1));
      }
      else
      {
        v56 = v172 - 8;
      }
      *(_QWORD *)&v172 = v56;
      v175 = v150;
      v176 = v151;
      v177 = v152;
      v62 = v61 - 1;
      if (v61 >= v60)
      {
        v63 = v128;
        if (v62 <= v60)
        {
          v63 = v125 + 8 * (v62 % v60);
          if (v61 == 1)
          {
LABEL_108:
            v64 = v113;
            if (!v114)
              v64 = a6 + 8 * (v117 % v127);
            if (v123 == v61)
              v62 = v123;
            else
              v62 = v123 - 1;
            if (v123 == v61)
              v63 = a7;
            else
              v63 = v64;
            v60 = v127;
            v125 = a6;
            v128 = a7;
            if (v58 == v171)
              goto LABEL_121;
LABEL_123:
            v67 = *((_QWORD *)&v176 + 1);
            v68 = v177;
            while (2)
            {
              if (v68 >= v67)
              {
                v71 = v68 - 1;
                if (v71 <= v67)
                  v70 = (float *)(*((_QWORD *)&v175 + 1) + 8 * (v71 % v67));
                else
                  v70 = (float *)v176;
              }
              else
              {
                v70 = (float *)(v175 - 8);
              }
              v72 = (float)((float)(v70[1] - *(float *)(a10 + 4)) * *(float *)(a10 + 24))
                  + (float)*(uint64_t *)(a10 + 16);
              if (v72 >= 0.0)
                v73 = 0.5;
              else
                v73 = -0.5;
              sub_2233DC31C(v72 + v73);
              v74 = (float)((float)(*v70 - *(float *)a10) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 8);
              if (v74 >= 0.0)
                v75 = 0.5;
              else
                v75 = -0.5;
              v76 = v74 + v75;
              sub_2233DC31C(v74 + v75);
              v77 = ceilf(v76);
              v78 = floorf(v76);
              if (v76 >= 0.0)
                v77 = v78;
              v79 = (uint64_t)v77;
              if (v119 == 1)
              {
                if (*v115 > v79)
                  goto LABEL_121;
              }
              else if (v119 == -1 && *(_QWORD *)(v122 + 48) < v79)
              {
                goto LABEL_121;
              }
              if (v177 >= *((uint64_t *)&v176 + 1))
              {
                if (v177 - 1 <= *((uint64_t *)&v176 + 1))
                {
                  v80 = *((_QWORD *)&v175 + 1) + 8 * ((v177 - 1) % *((_QWORD *)&v176 + 1));
                  v81 = *((_QWORD *)&v173 + 1);
                  v82 = v174;
                  if (v174 >= *((uint64_t *)&v173 + 1))
                    goto LABEL_154;
                }
                else
                {
                  v80 = v176;
                  v81 = *((_QWORD *)&v173 + 1);
                  v82 = v174;
                  if (v174 >= *((uint64_t *)&v173 + 1))
                    goto LABEL_154;
                }
LABEL_149:
                v83 = v172 - 8;
              }
              else
              {
                v80 = v175 - 8;
                v81 = *((_QWORD *)&v173 + 1);
                v82 = v174;
                if (v174 < *((uint64_t *)&v173 + 1))
                  goto LABEL_149;
LABEL_154:
                v84 = v82 - 1;
                if (v84 <= v81)
                  v83 = *((_QWORD *)&v172 + 1) + 8 * (v84 % v81);
                else
                  v83 = v173;
              }
              *(_QWORD *)&v150 = v120;
              *((_QWORD *)&v150 + 1) = v179;
              *(_QWORD *)&v151 = v80;
              *((_QWORD *)&v151 + 1) = v83;
              v152 = v63;
              v153 = v125;
              v154 = v128;
              v155 = v60;
              v156 = v62;
              v157 = a7;
              v158 = a6;
              v159 = a7;
              v160 = v127;
              v161 = v123;
              v162 = v210;
              v163 = v211;
              v164 = 0;
              v165 = 0;
              v166 = 0;
              v167 = *(_QWORD *)a10;
              v168 = *v121;
              v169 = *(_DWORD *)(a10 + 24);
              v130 = 0;
              v131 = 0;
              v132 = -1;
              v133 = 0;
              v134 = 0;
              v139 = 1;
              v140 = 0;
              v141 = 0;
              v142 = 0;
              v147 = 1;
              v148 = 0;
              v149 = 0;
              v135 = a1;
              v136 = *(_OWORD *)(v122 + 16);
              v137 = v209;
              v138 = xmmword_2245F5400;
              v143 = v118;
              v144 = *((_OWORD *)v120 + 1);
              v145 = v179;
              v85 = *(_QWORD *)(a11 + 8) - *(_QWORD *)a11;
              v146 = xmmword_2245F5400;
              sub_2233EEC98((uint64_t)&v180, (uint64_t)&v150, (uint64_t)v129, a9, a10, (char **)a11);
              v86 = *(_QWORD *)(a11 + 8);
              for (i = *(_QWORD *)a11 + v85; i != v86; i += 192)
              {
                switch(*(_DWORD *)(i + 32))
                {
                  case 1:
                  case 2:
                    if ((*a12)[4] - 58 <= 0xFFFFFFF5)
                      (*a12)[4] = 48;
                    break;
                  case 3:
                    v90 = *a12;
                    if ((*a12)[4] - 58 <= 0xFFFFFFF6)
                    {
                      v90[4] = 49;
                      v90 = *a12;
                    }
                    v90[9] = 1;
                    break;
                  case 4:
                    v91 = *a12;
                    if ((*a12)[4] - 58 <= 0xFFFFFFF6)
                    {
                      v91[4] = 49;
                      v91 = *a12;
                    }
                    if (*v91 - 58 <= 0xFFFFFFF7)
                      *v91 = 50;
                    break;
                  default:
                    break;
                }
                switch(*(_DWORD *)(i + 112))
                {
                  case 1:
                  case 2:
                    if ((*a12)[4] - 58 <= 0xFFFFFFF5)
                      (*a12)[4] = 48;
                    break;
                  case 3:
                    if ((*a12)[4] - 58 <= 0xFFFFFFF6)
                      (*a12)[4] = 49;
                    break;
                  case 4:
                    v92 = *a12;
                    if ((*a12)[4] - 58 <= 0xFFFFFFF6)
                    {
                      v92[4] = 49;
                      v92 = *a12;
                    }
                    if (*v92 - 58 <= 0xFFFFFFF7)
                      *v92 = 50;
                    break;
                  default:
                    continue;
                }
              }
              if ((*a12)[9])
                return 0;
              v88 = v177;
              v67 = *((_QWORD *)&v176 + 1);
              v68 = --v177;
              if (v88 >= *((uint64_t *)&v176 + 1))
              {
                if (v68 <= *((uint64_t *)&v176 + 1))
                  v89 = *((_QWORD *)&v175 + 1) + 8 * (v68 % *((_QWORD *)&v176 + 1));
                else
                  v89 = v176;
              }
              else
              {
                v89 = v175 - 8;
              }
              *(_QWORD *)&v175 = v89;
              v93 = v174;
              v94 = --v174;
              if (v93 >= *((uint64_t *)&v173 + 1))
              {
                if (v94 <= *((uint64_t *)&v173 + 1))
                  v95 = *((_QWORD *)&v172 + 1) + 8 * (v94 % *((_QWORD *)&v173 + 1));
                else
                  v95 = v173;
              }
              else
              {
                v95 = v172 - 8;
              }
              *(_QWORD *)&v172 = v95;
              ++v179;
              v69 = v62 - 1;
              if (v62 >= v60)
              {
                v63 = v128;
                if (v69 <= v60)
                  v63 = v125 + 8 * (v69 % v60);
              }
              else
              {
                v63 -= 8;
              }
              if (v62 == 1)
              {
                v96 = v113;
                if (!v114)
                  v96 = a6 + 8 * (v117 % v127);
                v69 = v123;
                if (v123 == 1)
                {
                  v63 = a7;
                }
                else
                {
                  v69 = v123 - 1;
                  v63 = v96;
                }
                v60 = v127;
                v125 = a6;
                v128 = a7;
              }
              ++v178;
              v62 = v69;
              if (v94 == v171)
                goto LABEL_121;
              continue;
            }
          }
        }
        else if (v61 == 1)
        {
          goto LABEL_108;
        }
      }
      else
      {
        v63 = v59 - 8;
        if (v61 == 1)
          goto LABEL_108;
      }
      if (v58 != v171)
        goto LABEL_123;
LABEL_121:
      v65 = v207;
      v36 = *((_QWORD *)&v206 + 1);
      v37 = --v207;
      if (v65 >= *((uint64_t *)&v206 + 1))
      {
        v12 = v120;
        v14 = v122;
        if (v37 <= *((uint64_t *)&v206 + 1))
          v66 = *((_QWORD *)&v205 + 1) + 8 * (v37 % *((_QWORD *)&v206 + 1));
        else
          v66 = v206;
      }
      else
      {
        v66 = v205 - 8;
        v12 = v120;
        v14 = v122;
      }
      *(_QWORD *)&v205 = v66;
      v97 = v204;
      v98 = --v204;
      if (v97 >= *((uint64_t *)&v203 + 1))
      {
        if (v98 <= *((uint64_t *)&v203 + 1))
          v99 = *((_QWORD *)&v202 + 1) + 8 * (v98 % *((_QWORD *)&v203 + 1));
        else
          v99 = v203;
      }
      else
      {
        v99 = v202 - 8;
      }
      *(_QWORD *)&v202 = v99;
      ++v209;
      v39 = v112 - 1;
      if (v112 < v109)
      {
        v100 = v116 - 8;
LABEL_210:
        v116 = v100;
        goto LABEL_211;
      }
      v116 = v110;
      if (v39 <= v109)
      {
        v100 = v108 + 8 * (v39 % v109);
        goto LABEL_210;
      }
LABEL_211:
      if (v112 == 1)
      {
        v40 = v102;
        if (!v103)
          v40 = a2 + 8 * ((v111 - 1) % v19);
        v39 = v111;
        if (v111 == 1)
          v40 = v106;
        else
          v39 = v111 - 1;
        v116 = v40;
        v109 = v19;
        v110 = v106;
        v108 = a2;
      }
      ++v208;
      v112 = v39;
      if (v98 == v201)
        return 1;
    }
  }
  return v18;
}

uint64_t sub_223EC2B18(uint64_t result)
{
  uint64_t v1;
  float *v2;
  float **v3;
  float *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  float *v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  char v20;

  if (*(_DWORD *)(result + 40) != 7)
  {
    v1 = result;
    v2 = **(float ***)result;
    if (v2 != *(float **)(*(_QWORD *)result + 8))
    {
      v3 = *(float ***)(result + 8);
      v5 = *v3;
      v4 = v3[1];
      v6 = (char *)v4 - (char *)*v3;
      if ((unint64_t)v6 < 0x18)
        goto LABEL_32;
      v7 = v6 >> 3;
      v8 = v4 == v5 ? 0 : v7 + 1;
      v19 = 0;
      v20 = 0;
      v9 = v8 - 1;
      if (v8 >= v7)
      {
        v10 = v4;
        if (v9 <= v7)
          v10 = &v5[2 * (v9 % v7)];
      }
      else
      {
        v10 = v4 - 2;
      }
      if (v8 == 1)
        goto LABEL_32;
      v11 = v4;
      do
      {
        if (v9 + 1 >= v7)
        {
          v12 = v4;
          if (v9 <= v7)
            v12 = &v5[2 * (v9 % v7)];
        }
        else
        {
          v12 = v11 - 2;
        }
        v13 = v9 - 1;
        if (v9 >= v7)
        {
          v14 = v4;
          if (v13 <= v7)
            v14 = &v5[2 * (v13 % v7)];
        }
        else
        {
          v14 = v10 - 2;
        }
        result = sub_2233E62E4(v2, v12, v14, (uint64_t)&v19);
        if (!(_DWORD)result)
          break;
        if (v9 + 1 >= v7)
        {
          v11 = v4;
          if (v9 <= v7)
            v11 = &v5[2 * (v9 % v7)];
        }
        else
        {
          v11 -= 2;
        }
        if (v9 < v7)
        {
          v10 -= 2;
        }
        else
        {
          v10 = v4;
          if (v13 <= v7)
            v10 = &v5[2 * (v13 % v7)];
        }
        --v9;
      }
      while (v13);
      if (v20 || !v19)
      {
LABEL_32:
        *(_BYTE *)(*(_QWORD *)(v1 + 24) + 9) = 1;
        v15 = *(_DWORD *)(v1 + 40) | 2;
        *(_DWORD *)(v1 + 40) = v15;
        if (v15 != 7)
        {
LABEL_40:
          v16 = *(_BYTE *)(*(_QWORD *)(v1 + 24) + 9) != 0;
          goto LABEL_41;
        }
      }
      else
      {
        v17 = *(unsigned __int8 **)(v1 + 24);
        if (*v17 - 58 <= 0xFFFFFFF7)
        {
          *v17 = 50;
          v17 = *(unsigned __int8 **)(v1 + 24);
        }
        v18 = *(_DWORD *)(v1 + 40) | 1;
        *(_DWORD *)(v1 + 40) = v18;
        if (v17[3] - 58 <= 0xFFFFFFF6)
        {
          v17[3] = 49;
          v18 = *(_DWORD *)(v1 + 40);
        }
        *(_DWORD *)(v1 + 40) = v18 | 4;
        if ((v18 | 4) != 7)
          goto LABEL_40;
      }
      v16 = 1;
LABEL_41:
      *(_BYTE *)(v1 + 16) = v16;
    }
  }
  return result;
}

uint64_t sub_223EC2D3C(uint64_t result)
{
  uint64_t v1;
  float *v2;
  float **v3;
  float *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  float *v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  char v20;

  if (*(_DWORD *)(result + 40) != 7)
  {
    v1 = result;
    v2 = **(float ***)result;
    if (v2 != *(float **)(*(_QWORD *)result + 8))
    {
      v3 = *(float ***)(result + 8);
      v5 = *v3;
      v4 = v3[1];
      v6 = (char *)v4 - (char *)*v3;
      if ((unint64_t)v6 < 0x18)
        goto LABEL_32;
      v7 = v6 >> 3;
      v8 = v4 == v5 ? 0 : v7 + 1;
      v19 = 0;
      v20 = 0;
      v9 = v8 - 1;
      if (v8 >= v7)
      {
        v10 = v4;
        if (v9 <= v7)
          v10 = &v5[2 * (v9 % v7)];
      }
      else
      {
        v10 = v4 - 2;
      }
      if (v8 == 1)
        goto LABEL_32;
      v11 = v4;
      do
      {
        if (v9 + 1 >= v7)
        {
          v12 = v4;
          if (v9 <= v7)
            v12 = &v5[2 * (v9 % v7)];
        }
        else
        {
          v12 = v11 - 2;
        }
        v13 = v9 - 1;
        if (v9 >= v7)
        {
          v14 = v4;
          if (v13 <= v7)
            v14 = &v5[2 * (v13 % v7)];
        }
        else
        {
          v14 = v10 - 2;
        }
        result = sub_2233E62E4(v2, v12, v14, (uint64_t)&v19);
        if (!(_DWORD)result)
          break;
        if (v9 + 1 >= v7)
        {
          v11 = v4;
          if (v9 <= v7)
            v11 = &v5[2 * (v9 % v7)];
        }
        else
        {
          v11 -= 2;
        }
        if (v9 < v7)
        {
          v10 -= 2;
        }
        else
        {
          v10 = v4;
          if (v13 <= v7)
            v10 = &v5[2 * (v13 % v7)];
        }
        --v9;
      }
      while (v13);
      if (v20 || !v19)
      {
LABEL_32:
        v15 = *(_DWORD *)(v1 + 40) | 2;
        *(_DWORD *)(v1 + 40) = v15;
        if (v15 != 7)
        {
LABEL_40:
          v16 = *(_BYTE *)(*(_QWORD *)(v1 + 24) + 9) != 0;
          goto LABEL_41;
        }
      }
      else
      {
        v17 = *(unsigned __int8 **)(v1 + 24);
        if (*v17 - 58 <= 0xFFFFFFF7)
        {
          *v17 = 50;
          v17 = *(unsigned __int8 **)(v1 + 24);
        }
        v18 = *(_DWORD *)(v1 + 40) | 1;
        *(_DWORD *)(v1 + 40) = v18;
        if (v17[1] - 58 <= 0xFFFFFFF6)
        {
          v17[1] = 49;
          v17 = *(unsigned __int8 **)(v1 + 24);
          v18 = *(_DWORD *)(v1 + 40);
        }
        v17[9] = 1;
        *(_DWORD *)(v1 + 40) = v18 | 4;
        if ((v18 | 4) != 7)
          goto LABEL_40;
      }
      v16 = 1;
LABEL_41:
      *(_BYTE *)(v1 + 16) = v16;
    }
  }
  return result;
}

uint64_t sub_223EC2F60(uint64_t result, unsigned __int8 **a2, _DWORD *a3, unsigned __int8 **a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float v13;
  int v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float *v31;
  double v32;
  double v33;
  double v34;

  *(_QWORD *)result = a3;
  v4 = *a4;
  *(_QWORD *)(result + 16) = *a4;
  if (**a2 == *v4)
  {
    v5 = a2[2];
    v6 = (uint64_t *)*((_QWORD *)v5 + 1);
    v7 = *(_DWORD *)(*(_QWORD *)v5 + 12);
    v8 = **(_QWORD **)v5;
    v9 = *(float *)(v8 + 4 * (v7 * *a3));
    v10 = *(unsigned int *)(result + 8);
    v11 = *((_DWORD *)v6 + 3);
    v12 = *v6;
    v13 = *(float *)(v12 + 4 * (v11 * *a3));
    v14 = a3[(2 * v10)];
    v15 = *(float *)(v8 + 4 * (v14 * v7));
    v16 = *(float *)(v12 + 4 * (v14 * v11));
    v17 = *((_QWORD *)v5 + 3);
    if (**((_BYTE **)v5 + 2))
      v18 = v15;
    else
      v18 = *(float *)(v8 + 4 * (v7 * *a3));
    if (**((_BYTE **)v5 + 2))
      v19 = v16;
    else
      v19 = *(float *)(v12 + 4 * (v11 * *a3));
    if (!**((_BYTE **)v5 + 2))
    {
      v13 = v16;
      v9 = v15;
    }
    if (!*(_BYTE *)(v17 + 8))
    {
      v20 = a3[v10];
      v21 = v18;
      v22 = v9;
      v23 = v18 + v22;
      v24 = v19;
      v25 = v13;
      v26 = (v24 - v13) * v23;
      v27 = *(float *)(v8 + 4 * (v20 * v7));
      v28 = *(float *)(v12 + 4 * (v20 * v11));
      v29 = (v25 - v28) * (v27 + v22);
      v30 = (v27 + v21) * (v28 - v24);
      if ((v30 + v29 + v26 + 0.0) * 0.5 > 0.0)
      {
        v31 = (float *)*((_QWORD *)v5 + 4);
        v32 = *v31;
        v33 = v21 + v32;
        v34 = v31[1];
        if ((v30 + (v27 + v32) * (v34 - v28) + v33 * (v24 - v34) + 0.0) * 0.5 >= 0.0
          && (v29 + (v22 + v32) * (v34 - v25) + (v27 + v32) * (v28 - v34) + 0.0) * 0.5 >= 0.0
          && (v26 + v33 * (v34 - v24) + (v22 + v32) * (v25 - v34) + 0.0) * 0.5 >= 0.0)
        {
          *(_QWORD *)v17 = **((_QWORD **)v5 + 5);
          *(_BYTE *)(v17 + 8) = 1;
        }
      }
    }
    ++**((_QWORD **)v5 + 5);
  }
  else
  {
    ++*(_QWORD *)a2[1];
  }
  return result;
}

uint64_t **sub_223EC313C(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  float **v6;
  unint64_t v7;
  unint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  unint64_t v12;
  unint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float *v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int64x2_t v22;
  int32x4_t v23;
  unint64_t v24;
  int32x4_t v25;
  float *v26;
  int32x4_t v27;
  int v28;
  float *v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  float *v45;
  size_t v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float64x2_t v57;
  float v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  float *v69;
  float *v70;
  BOOL v71;
  _QWORD *v73;
  float **v74;
  float32x4x2_t v75;

  *a1 = a2;
  v5 = *a2;
  v4 = a2[1];
  a1[1] = 0;
  v6 = (float **)(a1 + 1);
  v7 = (unint64_t)(v4 - v5) >> 3;
  v8 = v7;
  a1[2] = 0;
  a1[3] = 0;
  v9 = (float *)operator new(8 * v7);
  v74 = v6;
  *v6 = v9;
  v10 = &v9[2 * v7];
  a1[3] = (uint64_t *)v10;
  bzero(v9, 8 * v7);
  a1[2] = (uint64_t *)v10;
  *((_DWORD *)a1 + 8) = 0;
  *((_DWORD *)a1 + 9) = v7;
  v11 = (float *)(a1 + 4);
  if (v7 >= 2)
  {
    v12 = v7 - 1;
    if (v12 < 8)
    {
      v13 = 1;
LABEL_7:
      v28 = v13 - 1;
      v29 = &v9[2 * v13 + 1];
      v30 = v13 - v7;
      do
      {
        *((_DWORD *)v29 - 1) = v28 + 2;
        *(_DWORD *)v29 = v28++;
        v29 += 2;
      }
      while (!__CFADD__(v30++, 1));
      goto LABEL_10;
    }
    v13 = v12 & 0xFFFFFFFFFFFFFFF8 | 1;
    v14 = (int32x4_t)xmmword_2246903F0;
    v15 = (int32x4_t)xmmword_22465F3D0;
    v16 = (int32x4_t)xmmword_224660CA0;
    v17 = v9 + 10;
    v18.i64[0] = 0x100000001;
    v18.i64[1] = 0x100000001;
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    v20.i64[0] = 0x500000005;
    v20.i64[1] = 0x500000005;
    v21.i64[0] = 0x300000003;
    v21.i64[1] = 0x300000003;
    v22 = vdupq_n_s64(8uLL);
    v23.i64[0] = 0x800000008;
    v23.i64[1] = 0x800000008;
    v24 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v25 = vuzp1q_s32(v15, v14);
      v75.val[0] = (float32x4_t)vaddq_s32(v25, v18);
      v75.val[1] = (float32x4_t)vaddq_s32(v16, v19);
      v26 = v17 - 8;
      vst2q_f32(v26, v75);
      v27 = vaddq_s32(v25, v20);
      v75.val[0] = (float32x4_t)vaddq_s32(v16, v21);
      vst2q_f32(v17, v75);
      v14 = (int32x4_t)vaddq_s64((int64x2_t)v14, v22);
      v15 = (int32x4_t)vaddq_s64((int64x2_t)v15, v22);
      v16 = vaddq_s32(v16, v23);
      v17 += 16;
      v24 -= 8;
    }
    while (v24);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_7;
  }
LABEL_10:
  *(_DWORD *)v9 = 1;
  *((_DWORD *)v9 + 1) = v7 - 1;
  *(v10 - 2) = 0.0;
  v33 = *a2;
  v32 = a2[1];
  a1[5] = 0;
  a1[6] = 0;
  v73 = a1 + 5;
  a1[7] = 0;
  v34 = v32 - v33;
  if (v32 == v33)
  {
    v37 = 0;
    v49 = *a2;
    v48 = a2[1];
    a1[8] = 0;
    a1[9] = 0;
    v43 = a1 + 8;
    a1[10] = 0;
    v44 = v48 - v49;
    if (v48 != v49)
    {
LABEL_20:
      if (v44 < 0)
        sub_22316E078();
      v45 = (float *)operator new((unint64_t)v44 >> 1);
      a1[8] = (uint64_t *)v45;
      v46 = v44 >> 3;
      v47 = &v45[v46];
      a1[10] = (uint64_t *)&v45[v46];
      bzero(v45, v46 * 4);
      a1[9] = (uint64_t *)v47;
      goto LABEL_24;
    }
  }
  else
  {
    if (v34 < 0)
      sub_2233DCD38();
    v35 = (unint64_t)((v34 >> 3) - 1) >> 6;
    v36 = operator new(8 * (v35 + 1));
    v37 = v36;
    a1[6] = (uint64_t *)(v34 >> 3);
    a1[7] = (uint64_t *)(v35 + 1);
    a1[5] = v36;
    if ((unint64_t)v34 >= 0x208)
      v38 = (unint64_t)((v34 >> 3) - 1) >> 6;
    else
      v38 = 0;
    v36[v38] = 0;
    v39 = (unint64_t)(v34 >> 3) >> 6;
    if ((unint64_t)v34 >= 0x200)
      bzero(v36, v39 * 8);
    v40 = ((unint64_t)v34 >> 3) & 0x3F;
    if (v40)
      v37[v39] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v40);
    v42 = *a2;
    v41 = a2[1];
    a1[8] = 0;
    a1[9] = 0;
    v43 = a1 + 8;
    a1[10] = 0;
    v44 = v41 - v42;
    if (v41 != v42)
      goto LABEL_20;
  }
  v45 = 0;
LABEL_24:
  v50 = 0;
  v51 = *a2;
  do
  {
    v52 = 8 * v50;
    v53 = &v9[2 * v50];
    v50 = *(unsigned int *)v53;
    v54 = *(float32x2_t *)(v51 + 8 * *((unsigned int *)v53 + 1));
    v55 = *(float32x2_t *)(v51 + v52);
    v56 = *(float32x2_t *)(v51 + 8 * v50);
    v57 = vcvtq_f64_f32((float32x2_t)vzip2_s32((int32x2_t)v55, (int32x2_t)v54));
    v58 = -1.0;
    if (((v54.f32[0] + v55.f32[0]) * (v57.f64[0] - v57.f64[1])
        + (v55.f32[0] + v56.f32[0]) * (v56.f32[1] - v57.f64[0])
        + (v54.f32[0] + v56.f32[0]) * (v57.f64[1] - v56.f32[1])
        + 0.0)
       * 0.5 >= 0.0)
    {
      v59 = vsub_f32(v54, v55);
      v60 = (float32x2_t)vdup_lane_s32((int32x2_t)v59, 1);
      v60.f32[0] = 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v59, v59), v60, v59, 1).f32[0]);
      v61 = vsub_f32(v56, v55);
      v62 = vmul_n_f32(v61, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v61, v61), (float32x2_t)vdup_lane_s32((int32x2_t)v61, 1), v61, 1).f32[0]));
      v58 = fmaxf(acosf(vmla_lane_f32(vmul_f32(vmul_f32(v59, v60), v62), vmul_lane_f32(v60, v59, 1), v62, 1).f32[0]), 0.0);
    }
    *v45++ = v58;
    --v8;
  }
  while (v8);
  do
  {
    while (1)
    {
      v63 = *(unsigned int *)v11;
      if (*(float *)(*v43 + 4 * v63) >= 0.0)
        break;
LABEL_29:
      *(_QWORD *)((char *)v37 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v8);
      v11 = &v9[2 * v63];
      if (++v8 >= *((unsigned int *)a1 + 9))
        return a1;
    }
    v64 = LODWORD(v9[2 * v63 + 1]);
    v65 = 2 * LODWORD(v9[2 * v63]);
    v66 = LODWORD(v9[v65]);
    if (v66 != v64)
    {
      v67 = **a1;
      v68 = (float *)(v67 + 8 * v64);
      v69 = (float *)(v67 + 8 * v63);
      v70 = (float *)(v67 + v65 * 4);
      do
      {
        if (*(float *)(*v43 + 4 * v66) <= 0.0)
        {
          v71 = sub_223ED160C(v68, v69, v70, (float *)(**a1 + 8 * v66));
          v9 = *v74;
          if (v71)
          {
            v37 = (_QWORD *)*v73;
            goto LABEL_29;
          }
        }
        v66 = LODWORD(v9[2 * v66]);
      }
      while (v66 != v64);
      v37 = (_QWORD *)*v73;
    }
    *(_QWORD *)((char *)v37 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    v11 = &v9[2 * v63];
    ++v8;
  }
  while (v8 < *((unsigned int *)a1 + 9));
  return a1;
}

void sub_223EC35CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;
  void *v15;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 72) = v13;
    operator delete(v13);
    v14 = *a9;
    if (!*a9)
    {
LABEL_3:
      v15 = *a10;
      if (!*a10)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v14 = *a9;
    if (!*a9)
      goto LABEL_3;
  }
  operator delete(v14);
  v15 = *a10;
  if (!*a10)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v10 + 16) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_223EC3644(uint64_t **a1, unsigned int a2)
{
  uint64_t *v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float32x2_t v15;
  float32x2_t *v16;
  float64x2_t v17;
  float v18;
  float v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t *v24;
  float32x2_t v25;
  unint64_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float64x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  int32x2_t *v46;
  uint64_t v47;
  unint64_t v48;

  v3 = a1[1];
  v4 = (unsigned int *)&v3[a2];
  v5 = *v4;
  v6 = v4[1];
  v7 = &v3[v5];
  *((_DWORD *)v7 + 1) = v6;
  v8 = (unsigned int *)v7 + 1;
  v9 = v6;
  v48 = v5;
  LODWORD(v3[v6]) = v5;
  *(_QWORD *)v4 = -1;
  LODWORD(v5) = *((_DWORD *)a1 + 8);
  --*((_DWORD *)a1 + 9);
  v10 = LODWORD(v3[v6]);
  if ((_DWORD)v5 == a2)
    *((_DWORD *)a1 + 8) = v10;
  v11 = a1[5];
  *(uint64_t *)((char *)v11 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) &= ~(1 << a2);
  v12 = HIDWORD(v3[v9]);
  v13 = **a1;
  v46 = (int32x2_t *)(v13 + 8 * v12);
  v47 = v10;
  v14 = (float *)(v13 + v9 * 8);
  v15 = *(float32x2_t *)(v13 + 8 * v6);
  v16 = (float32x2_t *)(v13 + 8 * v10);
  v17 = vcvtq_f64_f32((float32x2_t)vzip2_s32((int32x2_t)v15, *v46));
  v18 = -1.0;
  v19 = -1.0;
  if (((COERCE_FLOAT(*v46) + v15.f32[0]) * (v17.f64[0] - v17.f64[1])
      + (v15.f32[0] + COERCE_FLOAT(*v16)) * (COERCE_FLOAT(HIDWORD(*(unint64_t *)v16)) - v17.f64[0])
      + (COERCE_FLOAT(*v46) + COERCE_FLOAT(*v16)) * (v17.f64[1] - COERCE_FLOAT(HIDWORD(*(unint64_t *)v16)))
      + 0.0)
     * 0.5 >= 0.0)
  {
    v20 = vsub_f32((float32x2_t)*v46, v15);
    v21 = (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1);
    v21.f32[0] = 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v20, v20), v21, v20, 1).f32[0]);
    v22 = vsub_f32(*v16, v15);
    v23 = vmul_n_f32(v22, 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v22, v22), (float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), v22, 1).f32[0]));
    v19 = fmaxf(acosf(vmla_lane_f32(vmul_f32(vmul_f32(v20, v21), v23), vmul_lane_f32(v21, v20, 1), v23, 1).f32[0]), 0.0);
  }
  v24 = a1[8];
  *((float *)v24 + v6) = v19;
  v25 = *(float32x2_t *)(v13 + 8 * *v8);
  v26 = v48;
  v27 = *(float32x2_t *)(v13 + 8 * v48);
  v28 = *(float32x2_t *)(v13 + 8 * LODWORD(v3[v48]));
  v29 = vcvtq_f64_f32((float32x2_t)vzip2_s32((int32x2_t)v27, (int32x2_t)v25));
  if (((v25.f32[0] + v27.f32[0]) * (v29.f64[0] - v29.f64[1])
      + (v27.f32[0] + v28.f32[0]) * (v28.f32[1] - v29.f64[0])
      + (v25.f32[0] + v28.f32[0]) * (v29.f64[1] - v28.f32[1])
      + 0.0)
     * 0.5 >= 0.0)
  {
    v30 = vsub_f32(v25, v27);
    v31 = (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1);
    v31.f32[0] = 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v30, v30), v31, v30, 1).f32[0]);
    v32 = vsub_f32(v28, v27);
    v33 = vmul_n_f32(v32, 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v32, v32), (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1), v32, 1).f32[0]));
    v18 = fmaxf(acosf(vmla_lane_f32(vmul_f32(vmul_f32(v30, v31), v33), vmul_lane_f32(v31, v30, 1), v33, 1).f32[0]), 0.0);
  }
  *((float *)v24 + v48) = v18;
  if (*((float *)v24 + v6) >= 0.0)
  {
    v35 = LODWORD(v3[v47]);
    if (v35 != v12)
    {
      while (1)
      {
        if (*((float *)a1[8] + v35) <= 0.0)
        {
          if (sub_223ED160C((float *)v46, v14, (float *)v16, (float *)(**a1 + 8 * v35)))
          {
            v11 = a1[5];
            v26 = v48;
            goto LABEL_8;
          }
          v3 = a1[1];
        }
        v35 = LODWORD(v3[v35]);
        if (v35 == v12)
        {
          v11 = a1[5];
          break;
        }
      }
    }
    *(uint64_t *)((char *)v11 + ((v6 >> 3) & 0x1FFFFFF8)) |= 1 << v6;
    v34 = v48;
    v26 = v48;
    if (*((float *)a1[8] + v48) < 0.0)
      goto LABEL_28;
  }
  else
  {
LABEL_8:
    *(uint64_t *)((char *)v11 + ((v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    v34 = v48;
    if (*((float *)a1[8] + v26) < 0.0)
    {
LABEL_28:
      v44 = (v26 >> 3) & 0x1FFFFFF8;
      v45 = *(uint64_t *)((char *)v11 + v44) & ~(1 << v26);
      goto LABEL_29;
    }
  }
  v36 = a1[1];
  v37 = HIDWORD(v36[v34]);
  v38 = LODWORD(v36[v34]);
  v39 = LODWORD(v36[v38]);
  if (v39 != v37)
  {
    v40 = **a1;
    v41 = (float *)(v40 + 8 * v37);
    v42 = (float *)(v40 + v34 * 8);
    v43 = (float *)(v40 + v38 * 8);
    while (1)
    {
      if (*((float *)a1[8] + v39) <= 0.0)
      {
        if (sub_223ED160C(v41, v42, v43, (float *)(**a1 + 8 * v39)))
        {
          v11 = a1[5];
          v26 = v48;
          goto LABEL_28;
        }
        v36 = a1[1];
      }
      v39 = LODWORD(v36[v39]);
      if (v39 == v37)
      {
        v11 = a1[5];
        v26 = v48;
        break;
      }
    }
  }
  v44 = (v26 >> 3) & 0x1FFFFFF8;
  v45 = *(uint64_t *)((char *)v11 + v44) | (1 << v26);
LABEL_29:
  *(uint64_t *)((char *)v11 + v44) = v45;
}

uint64_t sub_223EC3A70(uint64_t a1)
{
  int v2;
  unsigned int *v3;
  uint64_t result;
  float v5;
  unint64_t v6;
  std::runtime_error *exception;

  v2 = *(_DWORD *)(a1 + 36);
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/PolygonTriangulationImpl.cpp", 115, (uint64_t)"!chain_.empty()", 15, (uint64_t)"Polygon must not be empty", 25, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = *(_DWORD *)(a1 + 36);
    if (!v2)
      goto LABEL_10;
  }
  v3 = (unsigned int *)(a1 + 32);
  result = 0xFFFFFFFFLL;
  v5 = 3.4028e38;
  do
  {
    v6 = *v3;
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 40) + ((v6 >> 3) & 0x1FFFFFF8)) >> v6) & 1) != 0
      && *(float *)(*(_QWORD *)(a1 + 64) + 4 * v6) < v5)
    {
      v5 = *(float *)(*(_QWORD *)(a1 + 64) + 4 * v6);
      result = v6;
    }
    v3 = (unsigned int *)(*(_QWORD *)(a1 + 8) + 8 * v6);
    --v2;
  }
  while (v2);
  if ((_DWORD)result == -1)
  {
LABEL_10:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No ear found!");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_223EC3B68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223EC3B7C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  const double *v4;
  const double *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const double *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  const double *v17;
  const double *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  float **v53;
  float **v54;
  float *v55;
  float *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  float v60;
  float *v61;
  float v62;
  float v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned int v67;
  int32x4_t *v68;
  unint64_t v69;
  unsigned int *v70;
  int32x4_t v71;
  int32x4_t *v72;
  int32x4_t v73;
  int32x4_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  int32x4_t *v83;
  int32x4_t *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unsigned int v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 v110;
  char *v111;
  unint64_t *v112;
  unsigned int *i;
  float *v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  float *v120;
  unint64_t v121;
  unint64_t v122;
  float v123;
  unsigned int v124;
  BOOL v125;
  double v126;
  double v127;
  float *v128;
  unsigned int v129;
  unsigned int v130;
  BOOL v132;
  float v133;
  float *v134;
  float v135;
  uint64_t v136;
  uint64_t v137;
  float *v138;
  float v139;
  float v140;
  uint64_t v141;
  float *v142;
  float v143;
  float v144;
  float *v145;
  float *v146;
  float v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  int v167;
  int v168;
  float *v169;
  float *v170;
  uint64_t v171;
  float *v172;
  float v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  int v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  size_t v194;
  const char *v195;
  unsigned __int8 v196;
  unsigned __int8 v197;
  const char *v198;
  size_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  void **v203;
  NSObject *v204;
  uint64_t v205;
  uint64_t v206;
  size_t v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  unint64_t *p_shared_owners;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  void *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  void *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  _BYTE *v246;
  uint64_t v247;
  uint64_t *v248;
  size_t v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  _BOOL4 v259;
  uint64_t *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _BYTE *v270;
  char *v271;
  int64_t v272;
  unint64_t v273;
  char *v274;
  uint64_t v275;
  float *v276;
  char *v277;
  char *v278;
  int64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  _BYTE *v284;
  char *v285;
  char *v286;
  unint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  _OWORD *v291;
  char *v292;
  uint64_t v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  _OWORD *v297;
  __int128 *v298;
  uint64_t v299;
  __int128 v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  _BYTE *v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  unint64_t v317;
  char *v318;
  char *v319;
  unint64_t v320;
  uint64_t v321;
  char *v322;
  char *v323;
  char *v324;
  unint64_t v325;
  uint64_t v326;
  char *v327;
  __int128 *v328;
  _OWORD *v329;
  uint64_t v330;
  __int128 v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t *v335;
  unint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  _OWORD *v339;
  __int128 *v340;
  uint64_t v341;
  __int128 v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _OWORD *v347;
  __int128 *v348;
  uint64_t v349;
  __int128 v350;
  uint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  _OWORD *v355;
  __int128 *v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  char *v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t *v364;
  char *v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _OWORD *v371;
  __int128 *v372;
  uint64_t v373;
  __int128 v374;
  uint64_t v375;
  char *v376;
  char *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  __int128 *v383;
  _OWORD *v384;
  uint64_t v385;
  __int128 v386;
  uint64_t v387;
  char **v388;
  char *v389;
  __int128 *v390;
  char *v391;
  unint64_t v392;
  __int128 v393;
  uint64_t v394;
  char *v395;
  void *v396;
  char *v397;
  char *v398;
  char *v399;
  char *v400;
  void *v401;
  void *v402;
  std::logic_error *v403;
  std::logic_error *exception;
  int32x4_t *v405;
  uint64_t v406;
  int v407;
  unsigned int *v408;
  uint64_t v409;
  _QWORD *v410;
  void *v413[2];
  uint64_t v414;
  void *__p;
  char *v416;
  char *v417;
  uint64_t v418[3];
  int v419;
  const char *v420;
  int v421;
  const char *v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  uint64_t v425;
  void *v426[2];
  uint64_t v427;
  char *v428;
  char *v429;
  unint64_t v430;
  void *v431[2];
  char v432;
  char v433;
  uint64_t v434;
  _BYTE v435[24];
  __int128 v436;
  void *v437[2];
  unint64_t v438;
  char v439;
  uint64_t v440;
  float64x2x3_t v441;
  float64x2x3_t v442;

  v440 = *MEMORY[0x24BDAC8D0];
  v4 = *(const double **)(a1 + 24);
  v410 = (_QWORD *)(a1 + 24);
  v5 = *(const double **)(a1 + 32);
  v7 = *(char **)a1;
  v6 = *(char **)(a1 + 8);
  v8 = (uint64_t)&v6[-*(_QWORD *)a1] >> 3;
  v9 = v8 + 0x5555555555555556 * (v5 - v4);
  if (v5 != v4)
  {
    v10 = (char *)v5 - (char *)v4 - 24;
    if (v10 >= 0x60)
    {
      v12 = v10 / 0x18 + 1;
      v13 = v12 & 3;
      if ((v12 & 3) == 0)
        v13 = 4;
      v14 = v12 - v13;
      v11 = &v4[3 * v14];
      v15 = 0uLL;
      v16 = (int64x2_t)(unint64_t)(v8 + 0x5555555555555556 * (v5 - v4));
      do
      {
        v17 = v4 + 12;
        v441 = vld3q_f64(v4);
        v18 = v4 + 6;
        v16 = vsraq_n_s64(v16, vsubq_s64((int64x2_t)v441.val[1], (int64x2_t)v441.val[0]), 3uLL);
        v442 = vld3q_f64(v18);
        v15 = vsraq_n_s64(v15, vsubq_s64((int64x2_t)v442.val[1], (int64x2_t)v442.val[0]), 3uLL);
        v4 = v17;
        v14 -= 4;
      }
      while (v14);
      v9 = vaddvq_s64(vaddq_s64(v15, v16));
    }
    else
    {
      v11 = *(const double **)(a1 + 24);
    }
    do
    {
      v20 = *(_QWORD *)v11;
      v19 = *((_QWORD *)v11 + 1);
      v11 += 3;
      v9 += (v19 - v20) >> 3;
    }
    while (v11 != v5);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v9)
  {
    if (v9 >> 61)
      sub_22316E078();
    v21 = (char *)operator new(8 * v9);
    v22 = a3;
    *a3 = (unint64_t)v21;
    a3[1] = (unint64_t)v21;
    a3[2] = (unint64_t)&v21[8 * v9];
  }
  else
  {
    v21 = 0;
    v22 = a3;
  }
  sub_22367C3A8(v22, (uint64_t)v21, v7, v6, v8);
  v428 = 0;
  v429 = 0;
  v430 = 0;
  if (!a2)
    goto LABEL_50;
  sub_2232EA6AC((uint64_t)&v428, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3) + 1);
  v23 = v429;
  v24 = 0xAAAAAAAAAAAAAAABLL * ((v429 - v428) >> 3);
  if (v429 == v428)
  {
    sub_2232C7FD8((uint64_t)&v428, 1 - v24);
  }
  else if (v24 >= 2)
  {
    v25 = v428 + 24;
    if (v429 != v428 + 24)
    {
      v26 = v429;
      do
      {
        v28 = (void *)*((_QWORD *)v26 - 3);
        v26 -= 24;
        v27 = v28;
        if (v28)
        {
          *((_QWORD *)v23 - 2) = v27;
          operator delete(v27);
        }
        v23 = v26;
      }
      while (v26 != v25);
    }
    v429 = v25;
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
      goto LABEL_26;
    goto LABEL_50;
  }
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
LABEL_26:
    v29 = 0;
    v30 = 0;
    do
    {
      v32 = v428;
      v34 = (char *)*((_QWORD *)v428 + 1);
      v33 = *((_QWORD *)v428 + 2);
      if ((unint64_t)v34 < v33)
      {
        *(_QWORD *)v34 = (v29 << 32) | 0xFFFFFFFFLL;
        v31 = (uint64_t)(v34 + 8);
      }
      else
      {
        v35 = *(char **)v428;
        v36 = (uint64_t)&v34[-*(_QWORD *)v428];
        v37 = v36 >> 3;
        v38 = (v36 >> 3) + 1;
        if (v38 >> 61)
          sub_2236B43DC();
        v39 = v33 - (_QWORD)v35;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          if (v40 >> 61)
            sub_223174E94();
          v41 = operator new(8 * v40);
          v42 = (uint64_t *)&v41[8 * v37];
          *v42 = (v29 << 32) | 0xFFFFFFFFLL;
          v31 = (uint64_t)(v42 + 1);
          v43 = (char *)(v34 - v35);
          if (v34 != v35)
          {
LABEL_39:
            v44 = (unint64_t)(v43 - 8);
            if (v44 < 0x58)
              goto LABEL_449;
            if ((unint64_t)(v34 - &v41[v36]) < 0x20)
              goto LABEL_449;
            v45 = (v44 >> 3) + 1;
            v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
            v47 = &v34[-v46];
            v42 = (uint64_t *)((char *)v42 - v46);
            v48 = &v41[8 * v37 - 16];
            v49 = v34 - 16;
            v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 4;
            }
            while (v50);
            v34 = v47;
            if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_449:
              do
              {
                v52 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *--v42 = v52;
              }
              while (v34 != v35);
            }
            v34 = *(char **)v32;
            *(_QWORD *)v32 = v42;
            *((_QWORD *)v32 + 1) = v31;
            *((_QWORD *)v32 + 2) = &v41[8 * v40];
            if (!v34)
              goto LABEL_28;
LABEL_49:
            operator delete(v34);
            goto LABEL_28;
          }
        }
        else
        {
          v41 = 0;
          v42 = (uint64_t *)(8 * v37);
          *(_QWORD *)(8 * v37) = (v29 << 32) | 0xFFFFFFFFLL;
          v31 = 8 * v37 + 8;
          v43 = (char *)(v34 - v35);
          if (v34 != v35)
            goto LABEL_39;
        }
        *(_QWORD *)v32 = v42;
        *((_QWORD *)v32 + 1) = v31;
        *((_QWORD *)v32 + 2) = &v41[8 * v40];
        if (v34)
          goto LABEL_49;
      }
LABEL_28:
      *((_QWORD *)v32 + 1) = v31;
      v29 = ++v30;
    }
    while (v30 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  }
LABEL_50:
  v54 = *(float ***)(a1 + 24);
  v53 = *(float ***)(a1 + 32);
  if (v53 == v54)
    goto LABEL_421;
  memset(v435, 0, sizeof(v435));
  if ((0xAAAAAAAAAAAAAAABLL * (v53 - v54)) >> 62)
    sub_22316E078();
  *(_QWORD *)v435 = operator new(0xAAAAAAAAAAAAAAACLL * (v53 - v54));
  *(_QWORD *)&v435[8] = *(_QWORD *)v435;
  *(_QWORD *)&v435[16] = *(_QWORD *)v435 - 0x5555555555555554 * (v53 - v54);
  v418[0] = (uint64_t)v435;
  do
  {
    v55 = *v54;
    v56 = v54[1];
    v57 = (uint64_t)(*v54 + 2);
    v58 = *v54 == v56 || v57 == (_QWORD)v56;
    v59 = (uint64_t)*v54;
    if (!v58)
    {
      v60 = *v55;
      v59 = (uint64_t)*v54;
      v61 = *v54 + 2;
      do
      {
        v62 = *v61;
        v61 += 2;
        v63 = v62;
        if (v60 < v62)
        {
          v60 = v63;
          v59 = v57;
        }
        v57 = (uint64_t)v61;
      }
      while (v61 != v56);
    }
    LODWORD(v431[0]) = (unint64_t)(v59 - (_QWORD)v55) >> 3;
    sub_223EC83A8(v418, v431);
    v54 += 3;
  }
  while (v54 != v53);
  v64 = *(_QWORD **)(a1 + 24);
  v65 = *(_QWORD **)(a1 + 32);
  *(_OWORD *)v426 = *(_OWORD *)v435;
  v427 = *(_QWORD *)&v435[16];
  if (v64 != v65)
  {
    v66 = v64;
    do
    {
      if (v66[1] == *v66)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Empty inner boundary, invalid polygon.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
      }
      v66 += 3;
    }
    while (v66 != v65);
  }
  v67 = -1431655765 * (v65 - v64);
  if (v67)
  {
    v68 = (int32x4_t *)operator new(4 * v67);
    if (v67 >= 8uLL)
    {
      v69 = v67 - (unint64_t)(v67 & 7);
      v70 = (unsigned int *)v68 + v69;
      v71 = (int32x4_t)xmmword_2246499B0;
      v72 = v68 + 1;
      v73.i64[0] = 0x400000004;
      v73.i64[1] = 0x400000004;
      v74.i64[0] = 0x800000008;
      v74.i64[1] = 0x800000008;
      v75 = v69;
      do
      {
        v72[-1] = v71;
        *v72 = vaddq_s32(v71, v73);
        v71 = vaddq_s32(v71, v74);
        v72 += 2;
        v75 -= 8;
      }
      while (v75);
      if ((v67 & 7) == 0)
        goto LABEL_74;
    }
    else
    {
      LODWORD(v69) = 0;
      v70 = (unsigned int *)v68;
    }
    do
    {
      *v70++ = v69;
      LODWORD(v69) = v69 + 1;
    }
    while (v67 != (_DWORD)v69);
  }
  else
  {
    v68 = 0;
    v70 = 0;
  }
LABEL_74:
  v76 = 126 - 2 * __clz(((char *)v70 - (char *)v68) >> 2);
  *(_QWORD *)v435 = v410;
  *(_QWORD *)&v435[8] = v426;
  if (v70 == (unsigned int *)v68)
    v77 = 0;
  else
    v77 = v76;
  v405 = v68;
  v408 = v70;
  sub_223EC8518((uint64_t)v68, v70, (uint64_t **)v435, v77, 1);
  v82 = a2;
  if (a2)
  {
    v83 = v405;
    if (v408 != (unsigned int *)v405)
    {
      v84 = v405;
      while (1)
      {
        v85 = v84->u32[0];
        v86 = (_QWORD *)(*v410 + 24 * v85);
        memset(v435, 0, sizeof(v435));
        v87 = v86[1];
        v88 = v87 - *v86;
        if (v87 != *v86)
        {
          if (v88 < 0)
            sub_2236B43DC();
          v89 = operator new(v87 - *v86);
          *(_QWORD *)v435 = v89;
          *(_QWORD *)&v435[8] = v89;
          *(_QWORD *)&v435[16] = &v89[v88 >> 3];
          if (v86[1] != *v86)
            break;
        }
LABEL_114:
        v111 = v429;
        if ((unint64_t)v429 < v430)
        {
          *(_QWORD *)v429 = 0;
          *((_QWORD *)v111 + 1) = 0;
          *((_QWORD *)v111 + 2) = 0;
          *(_OWORD *)v111 = *(_OWORD *)v435;
          *((_QWORD *)v111 + 2) = *(_QWORD *)&v435[16];
          v429 = v111 + 24;
        }
        else
        {
          v429 = sub_2232EA89C(&v428, (uint64_t)v435);
          if (*(_QWORD *)v435)
          {
            *(_QWORD *)&v435[8] = *(_QWORD *)v435;
            operator delete(*(void **)v435);
          }
        }
        v84 = (int32x4_t *)((char *)v84 + 4);
        if (v84 == (int32x4_t *)v408)
          goto LABEL_117;
      }
      v90 = 0;
      v91 = 0;
      while ((unint64_t)v89 < *(_QWORD *)&v435[16])
      {
        *v89 = v85 | (v90 << 32);
        v92 = v89 + 1;
LABEL_87:
        *(_QWORD *)&v435[8] = v92;
        v89 = v92;
        v90 = ++v91;
        if (v91 >= (unint64_t)((uint64_t)(v86[1] - *v86) >> 3))
          goto LABEL_114;
      }
      v93 = *(char **)v435;
      v94 = ((uint64_t)v89 - *(_QWORD *)v435) >> 3;
      v95 = v94 + 1;
      if ((unint64_t)(v94 + 1) >> 61)
        sub_2236B43DC();
      v96 = *(_QWORD *)&v435[16] - *(_QWORD *)v435;
      if ((uint64_t)(*(_QWORD *)&v435[16] - *(_QWORD *)v435) >> 2 > v95)
        v95 = v96 >> 2;
      if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
        v97 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v97 = v95;
      if (v97)
      {
        if (v97 >> 61)
          sub_223174E94();
        v98 = (char *)operator new(8 * v97);
      }
      else
      {
        v98 = 0;
      }
      v99 = &v98[8 * v94];
      v100 = &v98[8 * v97];
      *(_QWORD *)v99 = v85 | (v90 << 32);
      v92 = v99 + 8;
      if (v89 == (_QWORD *)v93)
      {
        *(_QWORD *)v435 = &v98[8 * v94];
        *(_QWORD *)&v435[8] = v99 + 8;
        *(_QWORD *)&v435[16] = v100;
        v82 = a2;
LABEL_106:
        operator delete(v89);
        goto LABEL_87;
      }
      v101 = (char *)v89 - v93 - 8;
      if (v101 < 0x168
        || (v104 = ((char *)(v89 - 1) - v93) & 0xFFFFFFFFFFFFFFF8,
            &v98[(char *)v89 - v93 - 8 - v104] > &v98[(char *)v89 - v93 - 8])
        || (_QWORD *)((char *)v89 - v104 - 8) > v89 - 1
        || (unint64_t)(v93 - v98) < 0x20)
      {
        v102 = (char *)v89;
        v82 = a2;
      }
      else
      {
        v105 = (v101 >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = (char *)&v89[v106 / 0xFFFFFFFFFFFFFFF8];
        v99 -= v106;
        v107 = &v98[8 * v94 - 16];
        v108 = (__int128 *)(v89 - 2);
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110 = *v108;
          *((_OWORD *)v107 - 1) = *(v108 - 1);
          *(_OWORD *)v107 = v110;
          v107 -= 32;
          v108 -= 2;
          v109 -= 4;
        }
        while (v109);
        v82 = a2;
        if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_103:
          v89 = *(_QWORD **)v435;
          *(_QWORD *)v435 = v99;
          *(_QWORD *)&v435[8] = v92;
          *(_QWORD *)&v435[16] = v100;
          if (!v89)
            goto LABEL_87;
          goto LABEL_106;
        }
      }
      do
      {
        v103 = *((_QWORD *)v102 - 1);
        v102 -= 8;
        *((_QWORD *)v99 - 1) = v103;
        v99 -= 8;
      }
      while (v102 != v93);
      goto LABEL_103;
    }
    goto LABEL_414;
  }
LABEL_117:
  v112 = a3;
  if (v408 != (unsigned int *)v405)
  {
    for (i = (unsigned int *)v405; i != v408; ++i)
    {
      v114 = (float *)*v112;
      v115 = v112[1];
      v116 = v115 - *v112;
      if (v115 == *v112)
        goto LABEL_432;
      v117 = 0;
      v118 = *i;
      v119 = *((unsigned int *)v426[0] + v118);
      v120 = (float *)(*(_QWORD *)(*v410 + 24 * v118) + 8 * v119);
      v121 = (uint64_t)v116 >> 3;
      v122 = v116 >> 3;
      v123 = v120[1];
      v124 = (v116 >> 3) - 1;
      v125 = v114[2 * v124 + 1] >= v123;
      v126 = *v120;
      v127 = v123;
      v128 = v114 + 1;
      v129 = -1;
      v130 = 1;
      do
      {
        v132 = v125;
        v133 = *v128;
        v125 = *v128 >= v123;
        if (!v132 && *v128 >= v123)
        {
          v134 = &v114[2 * v124];
          v135 = *(v128 - 1);
          if (((v133 - v134[1]) * (*v134 + v135)
              + (v127 - v133) * (v126 + v135)
              + (v126 + *v134) * (v134[1] - v127)
              + 0.0)
             * 0.5 >= 0.0
            && (v129 == -1
             || ((v81 + v79) * (v80 - v78) + (v133 - v80) * (v81 + v135) + (v78 - v133) * (v79 + v135) + 0.0) * 0.5 >= 0.0))
          {
            v78 = v134[1];
            v79 = *v134;
            v80 = *v128;
            v81 = *(v128 - 1);
            v129 = v124;
          }
        }
        v124 = v117++;
        v128 += 2;
      }
      while (v121 > v130++);
      if (v129 == -1)
      {
LABEL_432:
        v403 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v403, "Could not find a polygon segment to the right of ray_start. Polygon may be invalid.");
        v403->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v403, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
      }
      v136 = v129;
      v137 = v129 + 1;
      v138 = &v114[2 * v129];
      v140 = *v138;
      v139 = v138[1];
      if (v121 - 1 == v136)
        v141 = 0;
      else
        v141 = v137;
      v142 = &v114[2 * v141];
      v144 = *v142;
      v143 = v142[1];
      if (v121 - 1 == v136)
      {
        LODWORD(v137) = 0;
        if (v116 < 9)
          goto LABEL_165;
      }
      else
      {
        v145 = &v114[2 * (v122 - 1)];
        v146 = &v114[2 * (v121 != 1)];
        v147 = v114[1];
        v148 = *v145;
        v149 = *v146;
        v150 = v145[1];
        v151 = v146[1];
        v152 = (v148 + v149) * (v150 - v151) + 0.0;
        v153 = *v114;
        v154 = v153 + v149;
        v155 = v147;
        if (((v148 + v153) * (v147 - v150) + v154 * (v151 - v147) + v152) * 0.5 >= 0.0)
          goto LABEL_145;
        v156 = v143;
        v157 = (v127 - v143) * (v126 + v144);
        v158 = v139;
        v159 = (v143 - v139) * (v144 + v140);
        v160 = (v139 - v127) * (v126 + v140);
        if ((v160 + v157 + 0.0 + v159) * 0.5 <= 0.0)
          goto LABEL_145;
        v161 = v126 + v153;
        v162 = v140 + v153;
        if ((v160 + v162 * (v155 - v158) + (v126 + v153) * (v127 - v155) + 0.0) * 0.5 < 0.0)
          goto LABEL_145;
        v163 = v144 + v153;
        if ((v159 + v163 * (v155 - v156) + v162 * (v158 - v155) + 0.0) * 0.5 < 0.0
          || (v157 + v161 * (v155 - v127) + v163 * (v156 - v155) + 0.0) * 0.5 < 0.0)
        {
          goto LABEL_145;
        }
        if (v147 < v123)
        {
          v139 = v114[1];
          v140 = *v114;
LABEL_145:
          if (v116 < 9)
            goto LABEL_165;
          goto LABEL_146;
        }
        LODWORD(v137) = 0;
        v143 = v114[1];
        v144 = *v114;
        if (v116 < 9)
          goto LABEL_165;
      }
LABEL_146:
      v164 = 1;
      v165 = 1;
      do
      {
        if (v165 == (_DWORD)v137)
        {
          v166 = (v137 + 1);
        }
        else
        {
          if (v165)
            v167 = v165;
          else
            v167 = v122;
          v168 = v167 - 1;
          v166 = (v165 + 1);
          v169 = &v114[2 * v168];
          v170 = &v114[2 * v164];
          if (v121 - 1 == v164)
            v171 = 0;
          else
            v171 = (v165 + 1);
          v172 = &v114[2 * v171];
          v173 = v170[1];
          v174 = *v169;
          v175 = *v172;
          v176 = v169[1];
          v177 = v172[1];
          v178 = (v174 + v175) * (v176 - v177) + 0.0;
          v179 = *v170;
          v180 = v179 + v175;
          v181 = v173;
          if (((v174 + v179) * (v173 - v176) + v180 * (v177 - v173) + v178) * 0.5 < 0.0)
          {
            v182 = v143;
            v183 = (v126 + v144) * (v127 - v143);
            v184 = v139;
            v185 = (v144 + v140) * (v143 - v139);
            v186 = (v126 + v140) * (v139 - v127);
            if ((v186 + v183 + 0.0 + v185) * 0.5 > 0.0)
            {
              v187 = v126 + v179;
              v188 = v140 + v179;
              if ((v186 + v188 * (v181 - v184) + (v126 + v179) * (v127 - v181) + 0.0) * 0.5 >= 0.0)
              {
                v189 = v144 + v179;
                if ((v185 + v189 * (v181 - v182) + v188 * (v184 - v181) + 0.0) * 0.5 >= 0.0
                  && (v183 + v187 * (v181 - v127) + v189 * (v182 - v181) + 0.0) * 0.5 >= 0.0)
                {
                  if (v173 >= v123)
                  {
                    v143 = v170[1];
                    v144 = *v170;
                    LODWORD(v137) = v165;
                  }
                  else
                  {
                    v139 = v170[1];
                    v140 = *v170;
                  }
                }
              }
            }
          }
        }
        v164 = v166;
        v165 = v166;
      }
      while (v121 > v166);
LABEL_165:
      sub_223EC79B0(&v425);
      v409 = v119;
      if (**(int **)(v425 + 56) > 2)
        goto LABEL_253;
      v190 = *(unsigned __int8 *)(v425 + 72);
      v191 = sub_22322F254(v425, "OSLogSurrogateAppender", 1, 0);
      v192 = v191;
      if (!v190 && !v191)
        goto LABEL_253;
      v407 = v190;
      v418[0] = (uint64_t)&v425;
      v418[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v418[2] = std::chrono::system_clock::now().__d_.__rep_;
      v419 = 2;
      v420 = "unknown file";
      v421 = 274;
      v422 = "unknown function";
      v423 = 0;
      v424 = 0;
      v193 = *(_QWORD *)v418[0];
      if (*(char *)(*(_QWORD *)v418[0] + 39) < 0)
      {
        v195 = *(const char **)(v193 + 16);
        v194 = *(_QWORD *)(v193 + 24);
        v406 = *(_QWORD *)v418[0] + 16;
        v197 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v197 & 1) != 0)
          goto LABEL_172;
      }
      else
      {
        v194 = *(unsigned __int8 *)(*(_QWORD *)v418[0] + 39);
        v195 = (const char *)(*(_QWORD *)v418[0] + 16);
        v406 = (uint64_t)v195;
        v196 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v196 & 1) != 0)
          goto LABEL_172;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v431);
        sub_223199C58("com.apple.cv3d", (unint64_t)v431, &xmmword_255788F40);
        if (v433 && v432 < 0)
          operator delete(v431[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        v112 = a3;
      }
LABEL_172:
      if (byte_255788F57 >= 0)
        v198 = (const char *)&xmmword_255788F40;
      else
        v198 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v199 = byte_255788F57;
      else
        v199 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v435 = os_log_create(v198, v195);
      if (v199 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v199 >= 0x17)
      {
        v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v199 | 7) != 0x17)
          v201 = v199 | 7;
        v202 = v201 + 1;
        v200 = operator new(v201 + 1);
        *(_QWORD *)&v435[16] = v199;
        *(_QWORD *)&v436 = v202 | 0x8000000000000000;
        *(_QWORD *)&v435[8] = v200;
        v112 = a3;
LABEL_185:
        memmove(v200, v198, v199);
        goto LABEL_186;
      }
      BYTE7(v436) = v199;
      v200 = &v435[8];
      if (v199)
        goto LABEL_185;
LABEL_186:
      v200[v199] = 0;
      BYTE8(v436) = 1;
      if (v194 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v194 >= 0x17)
      {
        v205 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v194 | 7) != 0x17)
          v205 = v194 | 7;
        v206 = v205 + 1;
        v203 = (void **)operator new(v205 + 1);
        v437[1] = (void *)v194;
        v438 = v206 | 0x8000000000000000;
        v437[0] = v203;
      }
      else
      {
        HIBYTE(v438) = v194;
        v203 = v437;
        if (!v194)
        {
          LOBYTE(v437[0]) = 0;
          v439 = 1;
          v204 = *(NSObject **)v435;
          if ((SHIBYTE(v438) & 0x80000000) == 0)
            goto LABEL_190;
          goto LABEL_196;
        }
      }
      memmove(v203, v195, v194);
      *((_BYTE *)v203 + v194) = 0;
      v439 = 1;
      v204 = *(NSObject **)v435;
      if ((SHIBYTE(v438) & 0x80000000) == 0)
      {
LABEL_190:
        if (BYTE8(v436))
          goto LABEL_197;
        goto LABEL_199;
      }
LABEL_196:
      operator delete(v437[0]);
      if (BYTE8(v436))
      {
LABEL_197:
        if (SBYTE7(v436) < 0)
          operator delete(*(void **)&v435[8]);
      }
LABEL_199:
      if (*(_QWORD *)v435)
        os_release(*(void **)v435);
      if (v192 && *(_QWORD *)(v192 + 24))
      {
        v207 = _os_log_pack_size();
        v208 = (std::__shared_weak_count_vtbl *)operator new(v207, (std::align_val_t)8uLL);
        v209 = (std::__shared_weak_count *)operator new();
        v210 = v209;
        v209->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v209->__shared_owners_;
        v209->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v209->__shared_weak_owners_ = 0;
        v209[1].__vftable = v208;
        *(_QWORD *)v435 = v208;
        *(_QWORD *)&v435[8] = v208;
        *(_QWORD *)&v435[16] = v209;
        do
          v212 = __ldxr(p_shared_owners);
        while (__stxr(v212 + 1, p_shared_owners));
        v436 = 0uLL;
        v437[0] = 0;
        do
          v213 = __ldaxr(p_shared_owners);
        while (__stlxr(v213 - 1, p_shared_owners));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v210);
        }
        v214 = *(_QWORD *)v435;
        v215 = _os_log_pack_fill();
        *(_DWORD *)v215 = 67109376;
        *(_DWORD *)(v215 + 4) = v137;
        *(_WORD *)(v215 + 8) = 1024;
        *(_DWORD *)(v215 + 10) = v409;
        v216 = (char *)operator new();
        v217 = *(unsigned __int8 *)(v193 + 39);
        v218 = v406;
        if ((v217 & 0x80u) != 0)
        {
          v218 = *(_QWORD *)(v193 + 16);
          v217 = *(_QWORD *)(v193 + 24);
        }
        *(_QWORD *)v216 = v214;
        *(_OWORD *)(v216 + 8) = *(_OWORD *)&v435[8];
        *(_QWORD *)&v435[8] = 0;
        *(_QWORD *)&v435[16] = 0;
        *(_OWORD *)(v216 + 24) = v436;
        v436 = 0uLL;
        *((_QWORD *)v216 + 5) = v218;
        *((_QWORD *)v216 + 6) = v217;
        v216[56] = 2;
        v434 = 0;
        v431[0] = v216;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v192 + 24) + 40))(*(_QWORD *)(v192 + 24), v431);
        v219 = v407;
        v220 = v431[0];
        v431[0] = 0;
        v119 = v409;
        if (v220)
        {
          v221 = (std::__shared_weak_count *)*((_QWORD *)v220 + 4);
          if (v221)
          {
            v222 = (unint64_t *)&v221->__shared_owners_;
            do
              v223 = __ldaxr(v222);
            while (__stlxr(v223 - 1, v222));
            if (!v223)
            {
              ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
              std::__shared_weak_count::__release_weak(v221);
            }
          }
          v224 = (std::__shared_weak_count *)*((_QWORD *)v220 + 2);
          if (v224)
          {
            v225 = (unint64_t *)&v224->__shared_owners_;
            do
              v226 = __ldaxr(v225);
            while (__stlxr(v226 - 1, v225));
            if (!v226)
            {
              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
              std::__shared_weak_count::__release_weak(v224);
            }
          }
          MEMORY[0x227684CE8](v220, 0x10F0C40B62ED6C6);
          v227 = v434;
          v434 = 0;
          if (v227)
          {
            v228 = *(std::__shared_weak_count **)(v227 + 32);
            if (v228)
            {
              v229 = (unint64_t *)&v228->__shared_owners_;
              do
                v230 = __ldaxr(v229);
              while (__stlxr(v230 - 1, v229));
              if (!v230)
              {
                ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                std::__shared_weak_count::__release_weak(v228);
              }
            }
            v231 = *(std::__shared_weak_count **)(v227 + 16);
            if (v231)
            {
              v232 = (unint64_t *)&v231->__shared_owners_;
              do
                v233 = __ldaxr(v232);
              while (__stlxr(v233 - 1, v232));
              if (!v233)
              {
                ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                std::__shared_weak_count::__release_weak(v231);
              }
            }
            MEMORY[0x227684CE8](v227, 0x10F0C40B62ED6C6);
          }
        }
        v234 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
        if (*((_QWORD *)&v436 + 1))
        {
          v235 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
          do
            v236 = __ldaxr(v235);
          while (__stlxr(v236 - 1, v235));
          if (!v236)
          {
            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
            std::__shared_weak_count::__release_weak(v234);
          }
        }
        v237 = *(std::__shared_weak_count **)&v435[16];
        if (*(_QWORD *)&v435[16])
        {
          v238 = (unint64_t *)(*(_QWORD *)&v435[16] + 8);
          do
            v239 = __ldaxr(v238);
          while (__stlxr(v239 - 1, v238));
          if (!v239)
          {
            ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
            std::__shared_weak_count::__release_weak(v237);
          }
        }
      }
      else
      {
        os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)v435 = 67109376;
        *(_DWORD *)&v435[4] = v137;
        *(_WORD *)&v435[8] = 1024;
        v119 = v409;
        *(_DWORD *)&v435[10] = v409;
        v240 = (void *)_os_log_send_and_compose_impl();
        v219 = v407;
        if (v240)
          free(v240);
      }
      if (v219)
      {
        sub_22322C138((uint64_t)v418, "bridging with indices:  poly_splice_index: %d, hole_splice_index: %d", v137, v119);
        sub_223182C08((uint64_t)v418);
      }
      sub_223182C08((uint64_t)v418);
      v241 = v424;
      if (v424)
      {
        v242 = (unint64_t *)&v424->__shared_owners_;
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
LABEL_253:
      v244 = *v410 + 24 * *i;
      v416 = 0;
      v417 = 0;
      __p = 0;
      v246 = *(_BYTE **)v244;
      v245 = *(_BYTE **)(v244 + 8);
      v247 = v245 - v246;
      if (v245 == v246)
      {
        v250 = 0;
        v248 = 0;
        if (!(_DWORD)v119)
          goto LABEL_274;
      }
      else
      {
        if (v247 < 0)
          sub_22316E078();
        v248 = (uint64_t *)operator new(v245 - v246);
        __p = v248;
        v416 = (char *)v248;
        v417 = (char *)&v248[v247 >> 3];
        v249 = v247 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v248, v246, v249);
        v250 = (uint64_t *)((char *)v248 + v249);
        v416 = (char *)v248 + v249;
        if (!(_DWORD)v119)
          goto LABEL_274;
      }
      v251 = &v248[v119];
      if (v251 != v250)
      {
        v252 = *v248;
        *v248 = *v251;
        v253 = v248 + 1;
        *v251 = v252;
        if (v251 + 1 != v250)
        {
          v254 = v119;
          do
          {
            v255 = &v253[v254];
            if (v253 == v251)
              v251 = &v253[v254];
            v256 = *v253;
            *v253++ = *v255;
            *v255 = v256;
          }
          while (&v253[v254] != v250);
        }
        if (v253 != v251)
        {
          v257 = v251;
          while (1)
          {
            v258 = *v253;
            *v253++ = *v257;
            *v257++ = v258;
            v259 = v253 == v251;
            if (v257 == v250)
            {
              if (v253 == v251)
                break;
              v257 = v251 + 1;
              v260 = v253;
              while (1)
              {
                v261 = *v253;
                *v260++ = *v251;
                *v251 = v261;
                v259 = v260 == v251;
                if (v257 != v250)
                  break;
                v253 = v260;
                if (v260 == v251)
                  goto LABEL_274;
              }
              ++v253;
            }
            if (v259)
              v251 = v257;
          }
        }
      }
LABEL_274:
      if (*v112 == v112[1])
      {
        v112 = a3;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/PolygonUtil.hpp", 188, (uint64_t)"!ring1.empty()", 14, (uint64_t)"ring1 must be nonempty", 22, (void (*)(void **))sub_22457406C))
        {
LABEL_435:
          abort();
        }
      }
      v262 = (char *)__p;
      v263 = v416;
      if (__p == v416)
      {
        v112 = a3;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/PolygonUtil.hpp", 189, (uint64_t)"!ring2.empty()", 14, (uint64_t)"ring2 must be nonempty", 22, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_435;
        }
        v262 = (char *)__p;
        v263 = v416;
        v264 = v417;
        if (v416 < v417)
        {
LABEL_278:
          *(_QWORD *)v263 = *(_QWORD *)v262;
          v265 = v263 + 8;
          goto LABEL_296;
        }
      }
      else
      {
        v264 = v417;
        if (v416 < v417)
          goto LABEL_278;
      }
      v266 = (v263 - v262) >> 3;
      v267 = v266 + 1;
      if ((unint64_t)(v266 + 1) >> 61)
        goto LABEL_434;
      v268 = v264 - v262;
      if (v268 >> 2 > v267)
        v267 = v268 >> 2;
      if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8)
        v269 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v269 = v267;
      if (v269)
      {
        if (v269 >> 61)
          goto LABEL_437;
        v270 = operator new(8 * v269);
        v271 = &v270[8 * v266];
        *(_QWORD *)v271 = *(_QWORD *)v262;
        v265 = v271 + 8;
        v272 = v263 - v262;
        if (v263 != v262)
        {
LABEL_290:
          v273 = v272 - 8;
          if (v273 < 0x58 || (unint64_t)(v262 - v270) < 0x20)
          {
            v274 = v263;
            v112 = a3;
            goto LABEL_293;
          }
          v289 = (v273 >> 3) + 1;
          v290 = 8 * (v289 & 0x3FFFFFFFFFFFFFFCLL);
          v274 = &v263[-v290];
          v271 -= v290;
          v291 = &v270[8 * v266 - 16];
          v292 = v263 - 16;
          v293 = v289 & 0x3FFFFFFFFFFFFFFCLL;
          v112 = a3;
          do
          {
            v294 = *(_OWORD *)v292;
            *(v291 - 1) = *((_OWORD *)v292 - 1);
            *v291 = v294;
            v291 -= 2;
            v292 -= 32;
            v293 -= 4;
          }
          while (v293);
          if (v289 != (v289 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_293:
              v275 = *((_QWORD *)v274 - 1);
              v274 -= 8;
              *((_QWORD *)v271 - 1) = v275;
              v271 -= 8;
            }
            while (v274 != v262);
          }
          v263 = (char *)__p;
          __p = v271;
          v416 = v265;
          v417 = &v270[8 * v269];
          if (!v263)
            goto LABEL_296;
LABEL_295:
          operator delete(v263);
          goto LABEL_296;
        }
      }
      else
      {
        v270 = 0;
        v271 = (char *)(8 * v266);
        *(_QWORD *)(8 * v266) = *(_QWORD *)v262;
        v265 = (char *)(8 * v266 + 8);
        v272 = v263 - v262;
        if (v263 != v262)
          goto LABEL_290;
      }
      v112 = a3;
      __p = v271;
      v416 = v265;
      v417 = &v270[8 * v269];
      if (v263)
        goto LABEL_295;
LABEL_296:
      v416 = v265;
      v276 = (float *)*v112;
      if (v265 < v417)
      {
        *(_QWORD *)v265 = *(_QWORD *)&v276[2 * v137];
        v277 = v265 + 8;
        goto LABEL_327;
      }
      v278 = (char *)__p;
      v279 = v265 - (_BYTE *)__p;
      v280 = (v265 - (_BYTE *)__p) >> 3;
      v281 = v280 + 1;
      if ((unint64_t)(v280 + 1) >> 61)
LABEL_434:
        sub_22316E078();
      v282 = v417 - (_BYTE *)__p;
      if ((v417 - (_BYTE *)__p) >> 2 > v281)
        v281 = v282 >> 2;
      if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF8)
        v283 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v283 = v281;
      if (v283)
      {
        if (v283 >> 61)
LABEL_437:
          sub_223174E94();
        v284 = operator new(8 * v283);
      }
      else
      {
        v284 = 0;
      }
      v285 = &v284[8 * v280];
      v286 = &v284[8 * v283];
      *(_QWORD *)v285 = *(_QWORD *)&v276[2 * v137];
      v277 = v285 + 8;
      if (v265 != v278)
      {
        v287 = v265 - v278 - 8;
        if (v287 < 0x58)
        {
          v288 = v265;
          goto LABEL_324;
        }
        if ((unint64_t)(v265 - &v284[v279]) < 0x20)
        {
          v288 = v265;
          goto LABEL_324;
        }
        v295 = (v287 >> 3) + 1;
        v296 = 8 * (v295 & 0x3FFFFFFFFFFFFFFCLL);
        v288 = &v265[-v296];
        v285 -= v296;
        v297 = &v284[8 * v280 - 16];
        v298 = (__int128 *)(v265 - 16);
        v299 = v295 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v300 = *v298;
          *(v297 - 1) = *(v298 - 1);
          *v297 = v300;
          v297 -= 2;
          v298 -= 2;
          v299 -= 4;
        }
        while (v299);
        if (v295 != (v295 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_324:
            v301 = *((_QWORD *)v288 - 1);
            v288 -= 8;
            *((_QWORD *)v285 - 1) = v301;
            v285 -= 8;
          }
          while (v288 != v278);
        }
        v265 = (char *)__p;
        __p = v285;
        v416 = v277;
        v417 = v286;
        if (!v265)
          goto LABEL_327;
        goto LABEL_326;
      }
      __p = &v284[8 * v280];
      v416 = v285 + 8;
      v417 = v286;
LABEL_326:
      operator delete(v265);
LABEL_327:
      v416 = v277;
      v302 = (char *)__p;
      v303 = v277 - (_BYTE *)__p;
      if (v277 - (_BYTE *)__p < 1)
        goto LABEL_399;
      v304 = *a3;
      v305 = a3[1];
      v306 = *a3 + 8 * v137;
      v307 = (uint64_t *)(v306 + 8);
      v308 = v303 >> 3;
      v309 = a3[2];
      if (v303 >> 3 > (uint64_t)(v309 - v305) >> 3)
      {
        v310 = v308 + ((uint64_t)(v305 - v304) >> 3);
        if (v310 >> 61)
          sub_22316E078();
        v311 = v309 - v304;
        if (v311 >> 2 > v310)
          v310 = v311 >> 2;
        if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFF8)
          v312 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v312 = v310;
        if (v312)
        {
          if (v312 >> 61)
            sub_223174E94();
          v313 = operator new(8 * v312);
        }
        else
        {
          v313 = 0;
        }
        v320 = (unint64_t)v307 - v304;
        v321 = (uint64_t)((uint64_t)v307 - v304) >> 3;
        v322 = &v313[8 * v321];
        v323 = &v322[8 * v308];
        if ((unint64_t)(v303 - 8) < 0x38)
        {
          v324 = &v313[8 * v321];
          goto LABEL_350;
        }
        v324 = &v313[8 * v321];
        if ((unint64_t)(&v313[v320 & 0xFFFFFFFFFFFFFFF8] - v302) < 0x20)
          goto LABEL_450;
        v325 = ((unint64_t)(v303 - 8) >> 3) + 1;
        v326 = 8 * (v325 & 0x3FFFFFFFFFFFFFFCLL);
        v324 = &v322[v326];
        v327 = &v302[v326];
        v328 = (__int128 *)(v302 + 16);
        v329 = &v313[8 * v321 + 16];
        v330 = v325 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v331 = *v328;
          *(v329 - 1) = *(v328 - 1);
          *v329 = v331;
          v328 += 2;
          v329 += 2;
          v330 -= 4;
        }
        while (v330);
        v302 = v327;
        if (v325 != (v325 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_450:
          do
          {
LABEL_350:
            v332 = *(_QWORD *)v302;
            v302 += 8;
            *(_QWORD *)v324 = v332;
            v324 += 8;
          }
          while (v324 != v323);
        }
        v333 = *a3;
        if ((uint64_t *)*a3 != v307)
        {
          v334 = 8 * v137 + v304 - v333;
          if (v334 < 0x68)
          {
            v335 = v307;
            v336 = a3;
            goto LABEL_358;
          }
          v335 = v307;
          v336 = a3;
          if (v304 + 8 * v137 - (unint64_t)&v313[v320 & 0xFFFFFFFFFFFFFFF8] + 8 < 0x20)
            goto LABEL_451;
          v337 = (v334 >> 3) + 1;
          v338 = 8 * (v337 & 0x3FFFFFFFFFFFFFFCLL);
          v335 = &v307[v338 / 0xFFFFFFFFFFFFFFF8];
          v322 -= v338;
          v339 = &v313[8 * v321 - 16];
          v340 = (__int128 *)(v304 + 8 * v137 - 8);
          v341 = v337 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v342 = *v340;
            *(v339 - 1) = *(v340 - 1);
            *v339 = v342;
            v339 -= 2;
            v340 -= 2;
            v341 -= 4;
          }
          while (v341);
          if (v337 != (v337 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_451:
            do
            {
LABEL_358:
              v343 = *--v335;
              *((_QWORD *)v322 - 1) = v343;
              v322 -= 8;
            }
            while (v335 != (uint64_t *)v333);
          }
          v305 = v336[1];
        }
        if ((uint64_t *)v305 != v307)
        {
          v344 = v305 - (8 * v137 + v304) - 16;
          if (v344 < 0x58)
            goto LABEL_452;
          if ((unint64_t)(&v313[(v320 & 0xFFFFFFFFFFFFFFF8) + (v303 & 0xFFFFFFFFFFFFFFF8)] - (_BYTE *)v307) < 0x20)
            goto LABEL_452;
          v345 = (v344 >> 3) + 1;
          v346 = 8 * (v345 & 0x3FFFFFFFFFFFFFFCLL);
          v307 = (uint64_t *)((char *)v307 + v346);
          v323 += v346;
          v347 = &v313[8 * v308 + 16 + 8 * v321];
          v348 = (__int128 *)(v304 + 8 * v137 + 24);
          v349 = v345 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v350 = *v348;
            *(v347 - 1) = *(v348 - 1);
            *v347 = v350;
            v347 += 2;
            v348 += 2;
            v349 -= 4;
          }
          while (v349);
          if (v345 != (v345 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_452:
            do
            {
              v351 = *v307++;
              *(_QWORD *)v323 = v351;
              v323 += 8;
            }
            while (v307 != (uint64_t *)v305);
          }
        }
        v352 = (void *)*a3;
        *a3 = (unint64_t)v322;
        a3[1] = (unint64_t)v323;
        a3[2] = (unint64_t)&v313[8 * v312];
        if (v352)
          operator delete(v352);
        goto LABEL_399;
      }
      v314 = v305 - (_QWORD)v307;
      v315 = (uint64_t)(v305 - (_QWORD)v307) >> 3;
      if (v315 >= v308)
      {
        v316 = (char *)__p + 8 * v308;
        v319 = (char *)a3[1];
LABEL_376:
        v360 = (char *)&v307[v308];
        v361 = v319 - v360;
        v362 = (v319 - v360) >> 3;
        v363 = v362 + 1;
        v364 = (uint64_t *)(v306 + 8 * (v362 + 1));
        v365 = v319;
        if ((unint64_t)v364 < v305)
        {
          v366 = v361 + v304 + 8 * v137;
          v367 = v366 + 16;
          if (v305 > v366 + 16)
            v367 = v305;
          v368 = v367 - v366 - 9;
          if (v368 < 0x68)
          {
            v365 = v319;
            goto LABEL_385;
          }
          v365 = v319;
          if ((unint64_t)(-(uint64_t)(v304 - (_QWORD)v360 + 8 * v137) - 8) < 0x20)
            goto LABEL_453;
          v369 = (v368 >> 3) + 1;
          v370 = 8 * (v369 & 0x3FFFFFFFFFFFFFFCLL);
          v364 = (uint64_t *)((char *)v364 + v370);
          v365 = &v319[v370];
          v371 = v319 + 16;
          v372 = (__int128 *)(v304 + 8 * v137 + 8 * v362 + 24);
          v373 = v369 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v374 = *v372;
            *(v371 - 1) = *(v372 - 1);
            *v371 = v374;
            v371 += 2;
            v372 += 2;
            v373 -= 4;
          }
          while (v373);
          if (v369 != (v369 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_453:
            do
            {
LABEL_385:
              v375 = *v364++;
              *(_QWORD *)v365 = v375;
              v365 += 8;
            }
            while ((unint64_t)v364 < v305);
          }
        }
        a3[1] = (unint64_t)v365;
        if (v319 != v360)
        {
          if (v361 < 0x60 || v304 - (unint64_t)v360 + 8 * v137 + 8 < 0x20)
          {
            v376 = v319;
            goto LABEL_390;
          }
          v376 = &v319[-8 * (v362 & 0xFFFFFFFFFFFFFFFCLL)];
          v363 -= v362 & 0xFFFFFFFFFFFFFFFCLL;
          v390 = (__int128 *)(v304 + 8 * v137 + 8 * v362 - 8);
          v391 = v319 - 16;
          v392 = v362 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v393 = *v390;
            *((_OWORD *)v391 - 1) = *(v390 - 1);
            *(_OWORD *)v391 = v393;
            v390 -= 2;
            v391 -= 32;
            v392 -= 4;
          }
          while (v392);
          if (v362 != (v362 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_390:
            v377 = v376 - 8;
            v378 = v363 - 1;
            do
            {
              *(_QWORD *)v377 = *(_QWORD *)(v306 + 8 * v378);
              v377 -= 8;
              --v378;
            }
            while (v378);
          }
        }
        if (v316 != v302)
        {
          v379 = v316 - v302 - 8;
          if (v379 < 0x18)
            goto LABEL_454;
          if ((unint64_t)((char *)v307 - v302) < 0x20)
            goto LABEL_454;
          v380 = (v379 >> 3) + 1;
          v381 = 8 * (v380 & 0x3FFFFFFFFFFFFFFCLL);
          v307 = (uint64_t *)((char *)v307 + v381);
          v382 = &v302[v381];
          v383 = (__int128 *)(v302 + 16);
          v384 = (_OWORD *)(v304 + 8 * v137 + 24);
          v385 = v380 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v386 = *v383;
            *(v384 - 1) = *(v383 - 1);
            *v384 = v386;
            v383 += 2;
            v384 += 2;
            v385 -= 4;
          }
          while (v385);
          v302 = v382;
          if (v380 != (v380 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_454:
            do
            {
              v387 = *(_QWORD *)v302;
              v302 += 8;
              *v307++ = v387;
            }
            while (v302 != v316);
          }
        }
        goto LABEL_399;
      }
      v316 = (char *)__p + 8 * v315;
      if (v316 == v277)
      {
        v319 = (char *)a3[1];
        goto LABEL_375;
      }
      v317 = v277 - (_BYTE *)__p - v314 - 8;
      if (v317 < 0x38)
      {
        v318 = (char *)__p + 8 * v315;
        v319 = (char *)a3[1];
        do
        {
LABEL_374:
          v359 = *(_QWORD *)v318;
          v318 += 8;
          *(_QWORD *)v319 = v359;
          v319 += 8;
        }
        while (v318 != v277);
        goto LABEL_375;
      }
      v318 = (char *)__p + 8 * v315;
      v319 = (char *)a3[1];
      if ((unint64_t)((char *)v307 - (_BYTE *)__p) < 0x20)
        goto LABEL_374;
      v353 = (v317 >> 3) + 1;
      v354 = 8 * (v353 & 0x3FFFFFFFFFFFFFFCLL);
      v318 = &v316[v354];
      v319 = (char *)(v305 + v354);
      v355 = (_OWORD *)(v305 + 16);
      v356 = (__int128 *)((char *)__p + 8 * v315 + 16);
      v357 = v353 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v358 = *v356;
        *(v355 - 1) = *(v356 - 1);
        *v355 = v358;
        v355 += 2;
        v356 += 2;
        v357 -= 4;
      }
      while (v357);
      if (v353 != (v353 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_374;
LABEL_375:
      a3[1] = (unint64_t)v319;
      if (v314 >= 1)
        goto LABEL_376;
LABEL_399:
      if (__p)
      {
        v416 = (char *)__p;
        operator delete(__p);
      }
      v112 = a3;
      v82 = a2;
      if (a2)
      {
        v388 = (char **)v428;
        v389 = &v428[24 * *i + 24];
        v413[1] = 0;
        v414 = 0;
        v413[0] = 0;
        *(_OWORD *)v413 = *(_OWORD *)v389;
        v414 = *((_QWORD *)v389 + 2);
        *(_QWORD *)v389 = 0;
        *((_QWORD *)v389 + 1) = 0;
        *((_QWORD *)v389 + 2) = 0;
        sub_223EC7AA4(v388, (uint64_t)v413, v137, v409);
        if (v413[0])
        {
          v413[1] = v413[0];
          operator delete(v413[0]);
        }
      }
    }
  }
  v83 = v405;
  if (v82)
  {
LABEL_414:
    v394 = v82;
    v395 = v428;
    v396 = *(void **)v394;
    if (*(_QWORD *)v394)
    {
      *(_QWORD *)(v394 + 8) = v396;
      operator delete(v396);
      *(_QWORD *)v394 = 0;
      *(_QWORD *)(v394 + 8) = 0;
      *(_QWORD *)(v394 + 16) = 0;
    }
    *(_OWORD *)v394 = *(_OWORD *)v395;
    *(_QWORD *)(v394 + 16) = *((_QWORD *)v395 + 2);
    *(_QWORD *)v395 = 0;
    *((_QWORD *)v395 + 1) = 0;
    *((_QWORD *)v395 + 2) = 0;
  }
  if (v83)
    operator delete(v83);
  if (v426[0])
  {
    v426[1] = v426[0];
    operator delete(v426[0]);
  }
LABEL_421:
  v397 = v428;
  if (v428)
  {
    v398 = v429;
    v399 = v428;
    if (v429 != v428)
    {
      v400 = v429;
      do
      {
        v402 = (void *)*((_QWORD *)v400 - 3);
        v400 -= 24;
        v401 = v402;
        if (v402)
        {
          *((_QWORD *)v398 - 2) = v401;
          operator delete(v401);
        }
        v398 = v400;
      }
      while (v400 != v397);
      v399 = v428;
    }
    v429 = v397;
    operator delete(v399);
  }
}

void sub_223EC5B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  uint64_t v40;
  void *v42;

  if (*(_BYTE *)(v40 - 208) && *(char *)(v40 - 209) < 0)
    operator delete(*(void **)(v40 - 232));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a29);
  if (__p)
    operator delete(__p);
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  sub_22317C838((void **)(v40 - 256));
  v42 = *(void **)a21;
  if (*(_QWORD *)a21)
  {
    *(_QWORD *)(a21 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

void sub_223EC5D30(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  const double *v4;
  const double *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const double *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  const double *v17;
  const double *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char **v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char **v53;
  char **v54;
  char *v55;
  char *v56;
  uint64_t v57;
  BOOL v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  unsigned int v68;
  int32x4_t *v69;
  unint64_t v70;
  unsigned int *v71;
  int32x4_t v72;
  int32x4_t *v73;
  int32x4_t v74;
  int32x4_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  char *v109;
  char *v110;
  char **v111;
  uint64_t v112;
  unsigned int *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  BOOL v125;
  double v126;
  double v127;
  uint64_t *v128;
  unsigned int v129;
  unsigned int v130;
  BOOL v131;
  uint64_t v132;
  uint64_t **v133;
  double v134;
  unint64_t v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  unsigned int v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  int v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  size_t v171;
  const char *v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  const char *v175;
  size_t v176;
  _BYTE *v177;
  uint64_t v178;
  uint64_t v179;
  void **v180;
  NSObject *v181;
  uint64_t v182;
  uint64_t v183;
  size_t v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count *v187;
  unint64_t *p_shared_owners;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  int v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  void *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  _BYTE *v222;
  _BYTE *v223;
  uint64_t v224;
  __int128 *v225;
  size_t v226;
  __int128 *v227;
  __int128 *v228;
  __int128 v229;
  __int128 *v230;
  uint64_t v231;
  __int128 *v232;
  __int128 *v233;
  _BOOL4 v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  char *v266;
  uint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  __int128 v272;
  char *v273;
  uint64_t v274;
  char *v275;
  char *i;
  __int128 v277;
  uint64_t v278;
  char *v279;
  char *v280;
  __int128 v281;
  char *v282;
  uint64_t v283;
  char *v284;
  char *v285;
  __int128 v286;
  char *v287;
  char *v288;
  __int128 v289;
  char *v290;
  char **v291;
  char *v292;
  char *v293;
  void *v294;
  char *v295;
  char *v296;
  char *v297;
  char *v298;
  void *v299;
  void *v300;
  std::logic_error *v301;
  std::logic_error *exception;
  unsigned int *v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  unsigned int *v308;
  _QWORD *v309;
  void *v311[2];
  uint64_t v312;
  void *__p;
  char *v314;
  char *v315;
  uint64_t v316[3];
  int v317;
  const char *v318;
  int v319;
  const char *v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  uint64_t v323;
  void *v324[2];
  uint64_t v325;
  char *v326;
  char *v327;
  unint64_t v328;
  void *v329[2];
  char v330;
  char v331;
  uint64_t v332;
  _BYTE v333[24];
  __int128 v334;
  void *v335[2];
  unint64_t v336;
  char v337;
  uint64_t v338;
  float64x2x3_t v339;
  float64x2x3_t v340;

  v338 = *MEMORY[0x24BDAC8D0];
  v4 = *(const double **)(a1 + 24);
  v309 = (_QWORD *)(a1 + 24);
  v5 = *(const double **)(a1 + 32);
  v7 = *(__int128 **)a1;
  v6 = *(__int128 **)(a1 + 8);
  v8 = ((uint64_t)v6 - *(_QWORD *)a1) >> 4;
  v9 = v8 + 0x5555555555555556 * (v5 - v4);
  if (v5 != v4)
  {
    v10 = (char *)v5 - (char *)v4 - 24;
    if (v10 >= 0x60)
    {
      v12 = v10 / 0x18 + 1;
      v13 = v12 & 3;
      if ((v12 & 3) == 0)
        v13 = 4;
      v14 = v12 - v13;
      v11 = &v4[3 * v14];
      v15 = 0uLL;
      v16 = (int64x2_t)(unint64_t)(v8 + 0x5555555555555556 * (v5 - v4));
      do
      {
        v17 = v4 + 12;
        v339 = vld3q_f64(v4);
        v18 = v4 + 6;
        v16 = vsraq_n_s64(v16, vsubq_s64((int64x2_t)v339.val[1], (int64x2_t)v339.val[0]), 4uLL);
        v340 = vld3q_f64(v18);
        v15 = vsraq_n_s64(v15, vsubq_s64((int64x2_t)v340.val[1], (int64x2_t)v340.val[0]), 4uLL);
        v4 = v17;
        v14 -= 4;
      }
      while (v14);
      v9 = vaddvq_s64(vaddq_s64(v15, v16));
    }
    else
    {
      v11 = *(const double **)(a1 + 24);
    }
    do
    {
      v20 = *(_QWORD *)v11;
      v19 = *((_QWORD *)v11 + 1);
      v11 += 3;
      v9 += (v19 - v20) >> 4;
    }
    while (v11 != v5);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v9)
  {
    if (v9 >> 60)
      sub_22316E078();
    v21 = (char *)operator new(16 * v9);
    v22 = a3;
    *a3 = v21;
    a3[1] = v21;
    a3[2] = &v21[16 * v9];
  }
  else
  {
    v21 = 0;
    v22 = a3;
  }
  sub_223EC9B40(v22, (uint64_t)v21, v7, v6, v8);
  v326 = 0;
  v327 = 0;
  v328 = 0;
  if (!a2)
    goto LABEL_50;
  sub_2232EA6AC((uint64_t)&v326, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3) + 1);
  v23 = v327;
  v24 = 0xAAAAAAAAAAAAAAABLL * ((v327 - v326) >> 3);
  if (v327 == v326)
  {
    sub_2232C7FD8((uint64_t)&v326, 1 - v24);
  }
  else if (v24 >= 2)
  {
    v25 = v326 + 24;
    if (v327 != v326 + 24)
    {
      v26 = v327;
      do
      {
        v28 = (void *)*((_QWORD *)v26 - 3);
        v26 -= 24;
        v27 = v28;
        if (v28)
        {
          *((_QWORD *)v23 - 2) = v27;
          operator delete(v27);
        }
        v23 = v26;
      }
      while (v26 != v25);
    }
    v327 = v25;
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
      goto LABEL_26;
    goto LABEL_50;
  }
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
LABEL_26:
    v29 = 0;
    v30 = 0;
    do
    {
      v32 = v326;
      v34 = (char *)*((_QWORD *)v326 + 1);
      v33 = *((_QWORD *)v326 + 2);
      if ((unint64_t)v34 < v33)
      {
        *(_QWORD *)v34 = (v29 << 32) | 0xFFFFFFFFLL;
        v31 = (uint64_t)(v34 + 8);
      }
      else
      {
        v35 = *(char **)v326;
        v36 = (uint64_t)&v34[-*(_QWORD *)v326];
        v37 = v36 >> 3;
        v38 = (v36 >> 3) + 1;
        if (v38 >> 61)
          sub_2236B43DC();
        v39 = v33 - (_QWORD)v35;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          if (v40 >> 61)
            sub_223174E94();
          v41 = operator new(8 * v40);
          v42 = (uint64_t *)&v41[8 * v37];
          *v42 = (v29 << 32) | 0xFFFFFFFFLL;
          v31 = (uint64_t)(v42 + 1);
          v43 = (char *)(v34 - v35);
          if (v34 != v35)
          {
LABEL_39:
            v44 = (unint64_t)(v43 - 8);
            if (v44 < 0x58)
              goto LABEL_393;
            if ((unint64_t)(v34 - &v41[v36]) < 0x20)
              goto LABEL_393;
            v45 = (v44 >> 3) + 1;
            v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
            v47 = &v34[-v46];
            v42 = (uint64_t *)((char *)v42 - v46);
            v48 = &v41[8 * v37 - 16];
            v49 = v34 - 16;
            v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 4;
            }
            while (v50);
            v34 = v47;
            if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_393:
              do
              {
                v52 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *--v42 = v52;
              }
              while (v34 != v35);
            }
            v34 = *(char **)v32;
            *(_QWORD *)v32 = v42;
            *((_QWORD *)v32 + 1) = v31;
            *((_QWORD *)v32 + 2) = &v41[8 * v40];
            if (!v34)
              goto LABEL_28;
LABEL_49:
            operator delete(v34);
            goto LABEL_28;
          }
        }
        else
        {
          v41 = 0;
          v42 = (uint64_t *)(8 * v37);
          *(_QWORD *)(8 * v37) = (v29 << 32) | 0xFFFFFFFFLL;
          v31 = 8 * v37 + 8;
          v43 = (char *)(v34 - v35);
          if (v34 != v35)
            goto LABEL_39;
        }
        *(_QWORD *)v32 = v42;
        *((_QWORD *)v32 + 1) = v31;
        *((_QWORD *)v32 + 2) = &v41[8 * v40];
        if (v34)
          goto LABEL_49;
      }
LABEL_28:
      *((_QWORD *)v32 + 1) = v31;
      v29 = ++v30;
    }
    while (v30 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4));
  }
LABEL_50:
  v54 = *(char ***)(a1 + 24);
  v53 = *(char ***)(a1 + 32);
  if (v53 == v54)
    goto LABEL_365;
  memset(v333, 0, sizeof(v333));
  if ((0xAAAAAAAAAAAAAAABLL * (v53 - v54)) >> 62)
    sub_22316E078();
  *(_QWORD *)v333 = operator new(0xAAAAAAAAAAAAAAACLL * (v53 - v54));
  *(_QWORD *)&v333[8] = *(_QWORD *)v333;
  *(_QWORD *)&v333[16] = *(_QWORD *)v333 - 0x5555555555555554 * (v53 - v54);
  v316[0] = (uint64_t)v333;
  do
  {
    v55 = *v54;
    v56 = v54[1];
    v57 = (uint64_t)(*v54 + 16);
    v58 = *v54 == v56 || v57 == (_QWORD)v56;
    v59 = *v54;
    if (!v58)
    {
      v60 = *(_QWORD *)v55;
      v59 = *v54;
      v61 = (uint64_t *)(*v54 + 16);
      do
      {
        v63 = *v61;
        v61 += 2;
        v62 = v63;
        v64 = v60 < v63;
        if (v60 <= v63)
          v60 = v62;
        if (v64)
          v59 = (char *)v57;
        v57 = (uint64_t)v61;
      }
      while (v61 != (uint64_t *)v56);
    }
    LODWORD(v329[0]) = (unint64_t)(v59 - v55) >> 4;
    sub_223EC83A8(v316, v329);
    v54 += 3;
  }
  while (v54 != v53);
  v65 = *(_QWORD **)(a1 + 24);
  v66 = *(_QWORD **)(a1 + 32);
  *(_OWORD *)v324 = *(_OWORD *)v333;
  v325 = *(_QWORD *)&v333[16];
  if (v65 != v66)
  {
    v67 = v65;
    do
    {
      if (v67[1] == *v67)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Empty inner boundary, invalid polygon.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
      }
      v67 += 3;
    }
    while (v67 != v66);
  }
  v68 = -1431655765 * (v66 - v65);
  if (v68)
  {
    v69 = (int32x4_t *)operator new(4 * v68);
    if (v68 >= 8uLL)
    {
      v70 = v68 - (unint64_t)(v68 & 7);
      v71 = (unsigned int *)v69 + v70;
      v72 = (int32x4_t)xmmword_2246499B0;
      v73 = v69 + 1;
      v74.i64[0] = 0x400000004;
      v74.i64[1] = 0x400000004;
      v75.i64[0] = 0x800000008;
      v75.i64[1] = 0x800000008;
      v76 = v70;
      do
      {
        v73[-1] = v72;
        *v73 = vaddq_s32(v72, v74);
        v72 = vaddq_s32(v72, v75);
        v73 += 2;
        v76 -= 8;
      }
      while (v76);
      if ((v68 & 7) == 0)
        goto LABEL_76;
    }
    else
    {
      LODWORD(v70) = 0;
      v71 = (unsigned int *)v69;
    }
    do
    {
      *v71++ = v70;
      LODWORD(v70) = v70 + 1;
    }
    while (v68 != (_DWORD)v70);
  }
  else
  {
    v69 = 0;
    v71 = 0;
  }
LABEL_76:
  v77 = 126 - 2 * __clz(((char *)v71 - (char *)v69) >> 2);
  *(_QWORD *)v333 = v309;
  *(_QWORD *)&v333[8] = v324;
  if (v71 == (unsigned int *)v69)
    v78 = 0;
  else
    v78 = v77;
  v303 = (unsigned int *)v69;
  v79 = (uint64_t *)sub_223EC9D94((uint64_t)v69, v71, (uint64_t **)v333, v78, 1);
  v308 = v71;
  if (a2)
  {
    v83 = v303;
    if (v71 == v303)
      goto LABEL_358;
    while (1)
    {
      v84 = *v83;
      v85 = (_QWORD *)(*v309 + 24 * v84);
      memset(v333, 0, sizeof(v333));
      v86 = v85[1];
      v87 = v86 - *v85;
      if (v86 != *v85)
      {
        if (v87 < 0)
          sub_2236B43DC();
        v79 = (uint64_t *)operator new((unint64_t)v87 >> 1);
        v88 = v79;
        *(_QWORD *)v333 = v79;
        *(_QWORD *)&v333[8] = v79;
        *(_QWORD *)&v333[16] = &v79[v87 >> 4];
        if (v85[1] != *v85)
          break;
      }
LABEL_119:
      v109 = v327;
      if ((unint64_t)v327 < v328)
      {
        *(_QWORD *)v327 = 0;
        *((_QWORD *)v109 + 1) = 0;
        *((_QWORD *)v109 + 2) = 0;
        *(_OWORD *)v109 = *(_OWORD *)v333;
        *((_QWORD *)v109 + 2) = *(_QWORD *)&v333[16];
        v327 = v109 + 24;
      }
      else
      {
        v110 = sub_2232EA89C(&v326, (uint64_t)v333);
        v79 = *(uint64_t **)v333;
        v327 = v110;
        if (*(_QWORD *)v333)
        {
          *(_QWORD *)&v333[8] = *(_QWORD *)v333;
          operator delete(*(void **)v333);
        }
      }
      ++v83;
      v71 = v308;
      if (v83 == v308)
        goto LABEL_122;
    }
    v89 = 0;
    v90 = 0;
    while ((unint64_t)v88 < *(_QWORD *)&v333[16])
    {
      *v88 = v84 | (v89 << 32);
      v91 = v88 + 1;
LABEL_89:
      *(_QWORD *)&v333[8] = v91;
      v88 = v91;
      v89 = ++v90;
      if (v90 >= (unint64_t)((uint64_t)(v85[1] - *v85) >> 4))
        goto LABEL_119;
    }
    v92 = *(char **)v333;
    v93 = ((uint64_t)v88 - *(_QWORD *)v333) >> 3;
    v94 = v93 + 1;
    if ((unint64_t)(v93 + 1) >> 61)
      sub_2236B43DC();
    v95 = *(_QWORD *)&v333[16] - *(_QWORD *)v333;
    if ((uint64_t)(*(_QWORD *)&v333[16] - *(_QWORD *)v333) >> 2 > v94)
      v94 = v95 >> 2;
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
      v96 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v96 = v94;
    if (v96)
    {
      if (v96 >> 61)
        sub_223174E94();
      v79 = (uint64_t *)operator new(8 * v96);
    }
    else
    {
      v79 = 0;
    }
    v97 = &v79[v93];
    v98 = (char *)&v79[v96];
    *v97 = v84 | (v89 << 32);
    v91 = v97 + 1;
    if (v88 == (uint64_t *)v92)
    {
      *(_QWORD *)v333 = &v79[v93];
      *(_QWORD *)&v333[8] = v97 + 1;
      *(_QWORD *)&v333[16] = v98;
LABEL_108:
      operator delete(v88);
      goto LABEL_89;
    }
    v99 = (char *)v88 - v92 - 8;
    if (v99 >= 0x168)
    {
      v102 = ((char *)(v88 - 1) - v92) & 0xFFFFFFFFFFFFFFF8;
      if ((char *)v79 + (char *)v88 - v92 - v102 - 8 > (char *)v79 + (char *)v88 - v92 - 8)
      {
        v100 = (char *)v88;
      }
      else if ((uint64_t *)((char *)v88 - v102 - 8) > v88 - 1)
      {
        v100 = (char *)v88;
      }
      else if ((unint64_t)(v92 - (char *)v79) >= 0x20)
      {
        v103 = (v99 >> 3) + 1;
        v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
        v100 = (char *)&v88[v104 / 0xFFFFFFFFFFFFFFF8];
        v97 = (uint64_t *)((char *)v97 - v104);
        v105 = &v79[v93 - 2];
        v106 = (__int128 *)(v88 - 2);
        v107 = v103 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v108 = *v106;
          *((_OWORD *)v105 - 1) = *(v106 - 1);
          *(_OWORD *)v105 = v108;
          v105 -= 4;
          v106 -= 2;
          v107 -= 4;
        }
        while (v107);
        if (v103 == (v103 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_105:
          v88 = *(uint64_t **)v333;
          *(_QWORD *)v333 = v97;
          *(_QWORD *)&v333[8] = v91;
          *(_QWORD *)&v333[16] = v98;
          if (!v88)
            goto LABEL_89;
          goto LABEL_108;
        }
      }
      else
      {
        v100 = (char *)v88;
      }
    }
    else
    {
      v100 = (char *)v88;
    }
    do
    {
      v101 = *((_QWORD *)v100 - 1);
      v100 -= 8;
      *--v97 = v101;
    }
    while (v100 != v92);
    goto LABEL_105;
  }
LABEL_122:
  v111 = a3;
  v112 = a2;
  if (v71 != v303)
  {
    v113 = v303;
    while (1)
    {
      v114 = *v111;
      v115 = v111[1];
      v116 = v115 - *v111;
      if (v115 == *v111)
        goto LABEL_376;
      v117 = 0;
      v118 = *v113;
      v119 = *((unsigned int *)v324[0] + v118);
      v120 = (uint64_t *)(*(_QWORD *)(*v309 + 24 * v118) + 16 * v119);
      v121 = v120[1];
      v122 = v116 >> 4;
      v123 = (unint64_t)v116 >> 4;
      v124 = v123 - 1;
      v125 = *(_QWORD *)&v114[16 * (v123 - 1) + 8] >= v121;
      v126 = (double)*v120;
      v127 = (double)v121;
      v128 = (uint64_t *)(v114 + 8);
      v129 = -1;
      v130 = 1;
      do
      {
        v131 = v125;
        v132 = *v128;
        v125 = *v128 >= v121;
        if (!v131 && *v128 >= v121)
        {
          v133 = (uint64_t **)&v114[16 * v124];
          v134 = (double)*(v128 - 1);
          if ((((double)v132 - (double)(uint64_t)v133[1]) * ((double)(uint64_t)*v133 + v134)
              + (v127 - (double)v132) * (v126 + v134)
              + (v126 + (double)(uint64_t)*v133) * ((double)(uint64_t)v133[1] - v127)
              + 0.0)
             * 0.5 >= 0.0
            && (v129 == -1
             || (((double)v80 - (double)v82) * ((double)(uint64_t)v79 + (double)v81)
               + ((double)v132 - (double)v80) * ((double)v81 + v134)
               + ((double)v82 - (double)v132) * ((double)(uint64_t)v79 + v134)
               + 0.0)
              * 0.5 >= 0.0))
          {
            v82 = (uint64_t)v133[1];
            v79 = *v133;
            v80 = *v128;
            v81 = *(v128 - 1);
            v129 = v124;
          }
        }
        v124 = v117++;
        v128 += 2;
        v64 = v122 > v130++;
      }
      while (v64);
      if (v129 == -1)
      {
LABEL_376:
        v301 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v301, "Could not find a polygon segment to the right of ray_start. Polygon may be invalid.");
        v301->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v301, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
      }
      v135 = 0;
      v136 = 0;
      v137 = v122 - 1 == v129 ? 0 : v129 + 1;
      v139 = *(_QWORD *)&v114[16 * v137];
      v138 = *(_QWORD *)&v114[16 * v137 + 8];
      v141 = *(_QWORD *)&v114[16 * v129];
      v140 = *(_QWORD *)&v114[16 * v129 + 8];
      do
      {
        if (v136 == v137)
        {
          v142 = v137 + 1;
        }
        else
        {
          if (v136)
            v143 = v136;
          else
            v143 = v123;
          v144 = v143 - 1;
          v142 = v136 + 1;
          v145 = (uint64_t *)&v114[16 * v144];
          v146 = (uint64_t *)&v114[16 * v135];
          if (v122 - 1 == v135)
            v147 = 0;
          else
            v147 = v136 + 1;
          v148 = (uint64_t *)&v114[16 * v147];
          v149 = *v146;
          v150 = v146[1];
          v151 = (double)*v145;
          v152 = (double)*v148;
          v153 = (double)v145[1];
          v154 = (double)v148[1];
          v155 = (v151 + v152) * (v153 - v154) + 0.0;
          v156 = (double)v149;
          v157 = (double)v149 + v152;
          v158 = (double)v150;
          if (((v151 + (double)v149) * ((double)v150 - v153) + v157 * (v154 - (double)v150) + v155) * 0.5 < 0.0)
          {
            v159 = (double)v138;
            v160 = (v127 - (double)v138) * (v126 + (double)v139);
            v161 = (double)v140;
            v162 = ((double)v138 - (double)v140) * ((double)v141 + (double)v139);
            v163 = ((double)v140 - v127) * (v126 + (double)v141);
            if ((v163 + v162 + v160 + 0.0) * 0.5 > 0.0)
            {
              v164 = v126 + v156;
              v165 = (double)v141 + v156;
              if ((v163 + v165 * (v158 - v161) + (v126 + v156) * (v127 - v158) + 0.0) * 0.5 >= 0.0)
              {
                v166 = (double)v139 + v156;
                if ((v162 + v166 * (v158 - v159) + v165 * (v161 - v158) + 0.0) * 0.5 >= 0.0
                  && (v160 + v164 * (v158 - v127) + v166 * (v159 - v158) + 0.0) * 0.5 >= 0.0)
                {
                  if (v150 >= v121)
                  {
                    v138 = v150;
                    v139 = v149;
                    v137 = v136;
                  }
                  else
                  {
                    v140 = v150;
                    v141 = v149;
                  }
                }
              }
            }
          }
        }
        v135 = v142;
        v136 = v142;
      }
      while (v122 > v142);
      sub_223EC79B0(&v323);
      if (**(int **)(v323 + 56) <= 2)
      {
        v167 = *(unsigned __int8 *)(v323 + 72);
        v168 = sub_22322F254(v323, "OSLogSurrogateAppender", 1, 0);
        v169 = v168;
        if (v167 || v168)
          break;
      }
LABEL_246:
      v221 = *v309 + 24 * *v113;
      v314 = 0;
      v315 = 0;
      __p = 0;
      v223 = *(_BYTE **)v221;
      v222 = *(_BYTE **)(v221 + 8);
      v224 = v222 - v223;
      if (v222 == v223)
      {
        v227 = 0;
        v225 = 0;
        if (!(_DWORD)v119)
          goto LABEL_266;
      }
      else
      {
        if (v224 < 0)
          sub_22316E078();
        v225 = (__int128 *)operator new(v222 - v223);
        __p = v225;
        v314 = (char *)v225;
        v315 = (char *)&v225[v224 >> 4];
        v226 = v224 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v225, v223, v226);
        v227 = (__int128 *)((char *)v225 + v226);
        v314 = (char *)v225 + v226;
        if (!(_DWORD)v119)
          goto LABEL_266;
      }
      v228 = &v225[v119];
      if (v228 != v227)
      {
        v229 = *v225;
        *v225 = *v228;
        *v228 = v229;
        v230 = v225 + 1;
        if (v228 + 1 != v227)
        {
          v231 = v119;
          do
          {
            v232 = &v230[v231];
            if (v230 == v228)
              v228 = &v230[v231];
            *(_OWORD *)v333 = *v230;
            *v230++ = *v232;
            *v232 = *(_OWORD *)v333;
          }
          while (&v230[v231] != v227);
        }
        if (v230 != v228)
        {
          v233 = v228;
          while (1)
          {
            *(_OWORD *)v333 = *v230;
            *v230++ = *v233;
            *v233++ = *(_OWORD *)v333;
            v234 = v230 == v228;
            if (v233 == v227)
            {
              if (v230 == v228)
                break;
              v233 = v228 + 1;
              while (1)
              {
                *(_OWORD *)v333 = *v230;
                *v230++ = *v228;
                *v228 = *(_OWORD *)v333;
                v234 = v230 == v228;
                if (v233 != v227)
                  break;
                if (v230 == v228)
                  goto LABEL_266;
              }
            }
            if (v234)
              v228 = v233;
          }
        }
      }
LABEL_266:
      if (*v111 == v111[1])
      {
        v111 = a3;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/PolygonUtil.hpp", 188, (uint64_t)"!ring1.empty()", 14, (uint64_t)"ring1 must be nonempty", 22, (void (*)(void **))sub_22457406C))
        {
LABEL_379:
          abort();
        }
      }
      v235 = (char *)__p;
      v236 = v314;
      if (__p == v314)
      {
        v111 = a3;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/PolygonUtil.hpp", 189, (uint64_t)"!ring2.empty()", 14, (uint64_t)"ring2 must be nonempty", 22, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_379;
        }
        v235 = (char *)__p;
        v236 = v314;
        v237 = v315;
        if (v314 < v315)
        {
LABEL_270:
          *(_OWORD *)v236 = *(_OWORD *)v235;
          v238 = v236 + 16;
          goto LABEL_289;
        }
      }
      else
      {
        v237 = v315;
        if (v314 < v315)
          goto LABEL_270;
      }
      v239 = (v236 - v235) >> 4;
      v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 60)
        goto LABEL_378;
      v241 = v237 - v235;
      if (v241 >> 3 > v240)
        v240 = v241 >> 3;
      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF0)
        v242 = 0xFFFFFFFFFFFFFFFLL;
      else
        v242 = v240;
      if (v242)
      {
        if (v242 >> 60)
          goto LABEL_381;
        v243 = (char *)operator new(16 * v242);
        v244 = &v243[16 * v239];
        *(_OWORD *)v244 = *(_OWORD *)v235;
        v245 = v244;
        if (v236 == v235)
        {
LABEL_287:
          v111 = a3;
          v238 = v244 + 16;
          __p = v245;
          v314 = v244 + 16;
          v315 = &v243[16 * v242];
          if (!v236)
            goto LABEL_289;
LABEL_288:
          operator delete(v236);
          goto LABEL_289;
        }
      }
      else
      {
        v243 = 0;
        v244 = (char *)(16 * v239);
        *(_OWORD *)(16 * v239) = *(_OWORD *)v235;
        v245 = (char *)(16 * v239);
        if (v236 == v235)
          goto LABEL_287;
      }
      do
      {
        *((_OWORD *)v245 - 1) = *((_OWORD *)v236 - 1);
        v245 -= 16;
        v236 -= 16;
      }
      while (v236 != v235);
      v236 = (char *)__p;
      v111 = a3;
      v238 = v244 + 16;
      __p = v245;
      v314 = v244 + 16;
      v315 = &v243[16 * v242];
      if (v236)
        goto LABEL_288;
LABEL_289:
      v314 = v238;
      v246 = &(*v111)[16 * v137];
      if (v238 >= v315)
      {
        v250 = (char *)__p;
        v251 = (v238 - (_BYTE *)__p) >> 4;
        v252 = v251 + 1;
        if ((unint64_t)(v251 + 1) >> 60)
LABEL_378:
          sub_22316E078();
        v253 = v315 - (_BYTE *)__p;
        if ((v315 - (_BYTE *)__p) >> 3 > v252)
          v252 = v253 >> 3;
        if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF0)
          v254 = 0xFFFFFFFFFFFFFFFLL;
        else
          v254 = v252;
        if (v254)
        {
          if (v254 >> 60)
LABEL_381:
            sub_223174E94();
          v255 = (char *)operator new(16 * v254);
        }
        else
        {
          v255 = 0;
        }
        v256 = &v255[16 * v251];
        *(_OWORD *)v256 = *(_OWORD *)v246;
        v247 = v256 + 16;
        if (v238 == v250)
        {
          __p = &v255[16 * v251];
          v314 = v256 + 16;
          v315 = &v255[16 * v254];
LABEL_308:
          operator delete(v238);
          v314 = v247;
          v248 = (char *)__p;
          v249 = v247 - (_BYTE *)__p;
          if (v247 - (_BYTE *)__p < 1)
            goto LABEL_347;
          goto LABEL_309;
        }
        do
        {
          *((_OWORD *)v256 - 1) = *((_OWORD *)v238 - 1);
          v256 -= 16;
          v238 -= 16;
        }
        while (v238 != v250);
        v238 = (char *)__p;
        __p = v256;
        v314 = v247;
        v315 = &v255[16 * v254];
        if (v238)
          goto LABEL_308;
        v314 = v247;
        v248 = (char *)__p;
        v249 = v247 - (_BYTE *)__p;
        if (v247 - (_BYTE *)__p < 1)
          goto LABEL_347;
      }
      else
      {
        *(_OWORD *)v238 = *(_OWORD *)v246;
        v247 = v238 + 16;
        v314 = v238 + 16;
        v248 = (char *)__p;
        v249 = v238 + 16 - (_BYTE *)__p;
        if (v249 < 1)
          goto LABEL_347;
      }
LABEL_309:
      v258 = *a3;
      v257 = a3[1];
      v259 = (uint64_t)&(*a3)[16 * v137];
      v260 = (char *)(v259 + 16);
      v261 = v249 >> 4;
      v262 = a3[2];
      if (v261 <= (v262 - v257) >> 4)
      {
        v267 = (v257 - v260) >> 4;
        if (v267 >= v261)
        {
          v268 = &v248[16 * v261];
          v269 = a3[1];
        }
        else
        {
          v268 = &v248[16 * v267];
          v269 = a3[1];
          if (v268 != v247)
          {
            v270 = v268;
            v271 = a3[1];
            do
            {
              v272 = *(_OWORD *)v270;
              v270 += 16;
              *(_OWORD *)v271 = v272;
              v271 += 16;
              v269 += 16;
            }
            while (v270 != v247);
          }
          a3[1] = v269;
          if (v257 - v260 < 1)
            goto LABEL_347;
        }
        v273 = &v260[16 * v261];
        v274 = v269 - v273;
        v275 = (char *)(v269 - v273 + v259 + 16);
        for (i = v269; v275 < v257; i += 16)
        {
          v277 = *(_OWORD *)v275;
          v275 += 16;
          *(_OWORD *)i = v277;
        }
        a3[1] = i;
        if (v269 != v273)
        {
          v278 = v274 >> 4;
          v279 = v269 - 16;
          v280 = &v258[16 * (v274 >> 4) + 16 * v137];
          do
          {
            v281 = *(_OWORD *)v280;
            v280 -= 16;
            *(_OWORD *)v279 = v281;
            v279 -= 16;
            --v278;
          }
          while (v278);
        }
        for (; v248 != v268; v260 += 16)
        {
          if (v248 != v260)
            *(_OWORD *)v260 = *(_OWORD *)v248;
          v248 += 16;
        }
      }
      else
      {
        v263 = v261 + ((v257 - v258) >> 4);
        if (v263 >> 60)
          sub_22316E078();
        v264 = v262 - v258;
        if (v264 >> 3 > v263)
          v263 = v264 >> 3;
        if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFF0)
          v265 = 0xFFFFFFFFFFFFFFFLL;
        else
          v265 = v263;
        if (v265)
        {
          if (v265 >> 60)
            sub_223174E94();
          v266 = (char *)operator new(16 * v265);
        }
        else
        {
          v266 = 0;
        }
        v282 = &v266[16 * ((v260 - v258) >> 4)];
        v283 = 16 * v261;
        v284 = &v282[16 * v261];
        v285 = v282;
        do
        {
          v286 = *(_OWORD *)v248;
          v248 += 16;
          *(_OWORD *)v285 = v286;
          v285 += 16;
          v283 -= 16;
        }
        while (v283);
        v287 = *a3;
        if (*a3 != v260)
        {
          v288 = v260;
          do
          {
            *((_OWORD *)v282 - 1) = *((_OWORD *)v288 - 1);
            v282 -= 16;
            v288 -= 16;
          }
          while (v288 != v287);
          v257 = a3[1];
        }
        for (; v260 != v257; v284 += 16)
        {
          v289 = *(_OWORD *)v260;
          v260 += 16;
          *(_OWORD *)v284 = v289;
        }
        v290 = *a3;
        *a3 = v282;
        a3[1] = v284;
        a3[2] = &v266[16 * v265];
        if (v290)
          operator delete(v290);
      }
LABEL_347:
      v79 = (uint64_t *)__p;
      if (__p)
      {
        v314 = (char *)__p;
        operator delete(__p);
      }
      v111 = a3;
      v112 = a2;
      if (a2)
      {
        v291 = (char **)v326;
        v292 = &v326[24 * *v113 + 24];
        v311[1] = 0;
        v312 = 0;
        v311[0] = 0;
        *(_OWORD *)v311 = *(_OWORD *)v292;
        v312 = *((_QWORD *)v292 + 2);
        *(_QWORD *)v292 = 0;
        *((_QWORD *)v292 + 1) = 0;
        *((_QWORD *)v292 + 2) = 0;
        sub_223EC7AA4(v291, (uint64_t)v311, v137, v119);
        v79 = (uint64_t *)v311[0];
        if (v311[0])
        {
          v311[1] = v311[0];
          operator delete(v311[0]);
        }
      }
      if (++v113 == v308)
        goto LABEL_357;
    }
    v305 = v167;
    v306 = v119;
    v316[0] = (uint64_t)&v323;
    v316[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v316[2] = std::chrono::system_clock::now().__d_.__rep_;
    v317 = 2;
    v318 = "unknown file";
    v319 = 274;
    v320 = "unknown function";
    v321 = 0;
    v322 = 0;
    v170 = *(_QWORD *)v316[0];
    if (*(char *)(*(_QWORD *)v316[0] + 39) < 0)
    {
      v172 = *(const char **)(v170 + 16);
      v171 = *(_QWORD *)(v170 + 24);
      v304 = *(_QWORD *)v316[0] + 16;
      v174 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v174 & 1) != 0)
        goto LABEL_165;
    }
    else
    {
      v171 = *(unsigned __int8 *)(*(_QWORD *)v316[0] + 39);
      v172 = (const char *)(*(_QWORD *)v316[0] + 16);
      v304 = (uint64_t)v172;
      v173 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v173 & 1) != 0)
        goto LABEL_165;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v329);
      sub_223199C58("com.apple.cv3d", (unint64_t)v329, &xmmword_255788F40);
      if (v331 && v330 < 0)
        operator delete(v329[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v111 = a3;
    }
LABEL_165:
    if (byte_255788F57 >= 0)
      v175 = (const char *)&xmmword_255788F40;
    else
      v175 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v176 = byte_255788F57;
    else
      v176 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v333 = os_log_create(v175, v172);
    if (v176 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v176 >= 0x17)
    {
      v178 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v176 | 7) != 0x17)
        v178 = v176 | 7;
      v179 = v178 + 1;
      v177 = operator new(v178 + 1);
      *(_QWORD *)&v333[16] = v176;
      *(_QWORD *)&v334 = v179 | 0x8000000000000000;
      *(_QWORD *)&v333[8] = v177;
      v111 = a3;
    }
    else
    {
      BYTE7(v334) = v176;
      v177 = &v333[8];
      if (!v176)
      {
LABEL_179:
        v177[v176] = 0;
        BYTE8(v334) = 1;
        if (v171 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v171 >= 0x17)
        {
          v182 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v171 | 7) != 0x17)
            v182 = v171 | 7;
          v183 = v182 + 1;
          v180 = (void **)operator new(v182 + 1);
          v335[1] = (void *)v171;
          v336 = v183 | 0x8000000000000000;
          v335[0] = v180;
        }
        else
        {
          HIBYTE(v336) = v171;
          v180 = v335;
          if (!v171)
          {
            LOBYTE(v335[0]) = 0;
            v337 = 1;
            v181 = *(NSObject **)v333;
            if ((SHIBYTE(v336) & 0x80000000) == 0)
              goto LABEL_183;
            goto LABEL_189;
          }
        }
        memmove(v180, v172, v171);
        *((_BYTE *)v180 + v171) = 0;
        v337 = 1;
        v181 = *(NSObject **)v333;
        if ((SHIBYTE(v336) & 0x80000000) == 0)
        {
LABEL_183:
          if (!BYTE8(v334))
            goto LABEL_192;
          goto LABEL_190;
        }
LABEL_189:
        operator delete(v335[0]);
        if (!BYTE8(v334))
        {
LABEL_192:
          if (*(_QWORD *)v333)
            os_release(*(void **)v333);
          if (v169 && *(_QWORD *)(v169 + 24))
          {
            v184 = _os_log_pack_size();
            v185 = (std::__shared_weak_count_vtbl *)operator new(v184, (std::align_val_t)8uLL);
            v186 = (std::__shared_weak_count *)operator new();
            v187 = v186;
            v186->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v186->__shared_owners_;
            v186->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v186->__shared_weak_owners_ = 0;
            v186[1].__vftable = v185;
            *(_QWORD *)v333 = v185;
            *(_QWORD *)&v333[8] = v185;
            *(_QWORD *)&v333[16] = v186;
            do
              v189 = __ldxr(p_shared_owners);
            while (__stxr(v189 + 1, p_shared_owners));
            v334 = 0uLL;
            v335[0] = 0;
            do
              v190 = __ldaxr(p_shared_owners);
            while (__stlxr(v190 - 1, p_shared_owners));
            if (!v190)
            {
              ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
              std::__shared_weak_count::__release_weak(v187);
            }
            v191 = *(_QWORD *)v333;
            v192 = _os_log_pack_fill();
            *(_DWORD *)v192 = 67109376;
            *(_DWORD *)(v192 + 4) = v137;
            *(_WORD *)(v192 + 8) = 1024;
            *(_DWORD *)(v192 + 10) = v306;
            v193 = (char *)operator new();
            v194 = *(unsigned __int8 *)(v170 + 39);
            v195 = v304;
            if ((v194 & 0x80u) != 0)
            {
              v195 = *(_QWORD *)(v170 + 16);
              v194 = *(_QWORD *)(v170 + 24);
            }
            *(_QWORD *)v193 = v191;
            *(_OWORD *)(v193 + 8) = *(_OWORD *)&v333[8];
            *(_QWORD *)&v333[8] = 0;
            *(_QWORD *)&v333[16] = 0;
            *(_OWORD *)(v193 + 24) = v334;
            v334 = 0uLL;
            *((_QWORD *)v193 + 5) = v195;
            *((_QWORD *)v193 + 6) = v194;
            v193[56] = 2;
            v332 = 0;
            v329[0] = v193;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v169 + 24) + 40))(*(_QWORD *)(v169 + 24), v329);
            v196 = v329[0];
            v329[0] = 0;
            v119 = v306;
            v197 = v305;
            if (v196)
            {
              v198 = (std::__shared_weak_count *)*((_QWORD *)v196 + 4);
              if (v198)
              {
                v199 = (unint64_t *)&v198->__shared_owners_;
                do
                  v200 = __ldaxr(v199);
                while (__stlxr(v200 - 1, v199));
                if (!v200)
                {
                  ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                  std::__shared_weak_count::__release_weak(v198);
                }
              }
              v201 = (std::__shared_weak_count *)*((_QWORD *)v196 + 2);
              if (v201)
              {
                v202 = (unint64_t *)&v201->__shared_owners_;
                do
                  v203 = __ldaxr(v202);
                while (__stlxr(v203 - 1, v202));
                if (!v203)
                {
                  ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                  std::__shared_weak_count::__release_weak(v201);
                }
              }
              MEMORY[0x227684CE8](v196, 0x10F0C40B62ED6C6);
              v204 = v332;
              v332 = 0;
              if (v204)
              {
                v205 = *(std::__shared_weak_count **)(v204 + 32);
                if (v205)
                {
                  v206 = (unint64_t *)&v205->__shared_owners_;
                  do
                    v207 = __ldaxr(v206);
                  while (__stlxr(v207 - 1, v206));
                  if (!v207)
                  {
                    ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                    std::__shared_weak_count::__release_weak(v205);
                  }
                }
                v208 = *(std::__shared_weak_count **)(v204 + 16);
                if (v208)
                {
                  v209 = (unint64_t *)&v208->__shared_owners_;
                  do
                    v210 = __ldaxr(v209);
                  while (__stlxr(v210 - 1, v209));
                  if (!v210)
                  {
                    ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                    std::__shared_weak_count::__release_weak(v208);
                  }
                }
                MEMORY[0x227684CE8](v204, 0x10F0C40B62ED6C6);
              }
            }
            v211 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
            if (*((_QWORD *)&v334 + 1))
            {
              v212 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
              do
                v213 = __ldaxr(v212);
              while (__stlxr(v213 - 1, v212));
              if (!v213)
              {
                ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                std::__shared_weak_count::__release_weak(v211);
              }
            }
            v214 = *(std::__shared_weak_count **)&v333[16];
            if (*(_QWORD *)&v333[16])
            {
              v215 = (unint64_t *)(*(_QWORD *)&v333[16] + 8);
              do
                v216 = __ldaxr(v215);
              while (__stlxr(v216 - 1, v215));
              if (!v216)
              {
                ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                std::__shared_weak_count::__release_weak(v214);
              }
            }
          }
          else
          {
            os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG);
            *(_DWORD *)v333 = 67109376;
            *(_DWORD *)&v333[4] = v137;
            *(_WORD *)&v333[8] = 1024;
            v119 = v306;
            *(_DWORD *)&v333[10] = v306;
            v217 = (void *)_os_log_send_and_compose_impl();
            v197 = v305;
            if (v217)
              free(v217);
          }
          if (v197)
          {
            sub_22322C138((uint64_t)v316, "bridging with indices:  poly_splice_index: %d, hole_splice_index: %d", v137, v119);
            sub_223182C08((uint64_t)v316);
          }
          sub_223182C08((uint64_t)v316);
          v218 = v322;
          if (v322)
          {
            v219 = (unint64_t *)&v322->__shared_owners_;
            do
              v220 = __ldaxr(v219);
            while (__stlxr(v220 - 1, v219));
            if (!v220)
            {
              ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
              std::__shared_weak_count::__release_weak(v218);
            }
          }
          goto LABEL_246;
        }
LABEL_190:
        if (SBYTE7(v334) < 0)
          operator delete(*(void **)&v333[8]);
        goto LABEL_192;
      }
    }
    memmove(v177, v175, v176);
    goto LABEL_179;
  }
LABEL_357:
  v83 = v303;
  if (v112)
  {
LABEL_358:
    v293 = v326;
    v294 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v294;
      operator delete(v294);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)v293;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)v293 + 2);
    *(_QWORD *)v293 = 0;
    *((_QWORD *)v293 + 1) = 0;
    *((_QWORD *)v293 + 2) = 0;
  }
  if (v83)
    operator delete(v83);
  if (v324[0])
  {
    v324[1] = v324[0];
    operator delete(v324[0]);
  }
LABEL_365:
  v295 = v326;
  if (v326)
  {
    v296 = v327;
    v297 = v326;
    if (v327 != v326)
    {
      v298 = v327;
      do
      {
        v300 = (void *)*((_QWORD *)v298 - 3);
        v298 -= 24;
        v299 = v300;
        if (v300)
        {
          *((_QWORD *)v296 - 2) = v299;
          operator delete(v299);
        }
        v296 = v298;
      }
      while (v298 != v295);
      v297 = v326;
    }
    v327 = v295;
    operator delete(v297);
  }
}

void sub_223EC7790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  uint64_t v42;
  void *v44;

  if (*(_BYTE *)(v42 - 208) && *(char *)(v42 - 209) < 0)
    operator delete(*(void **)(v42 - 232));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a31);
  if (__p)
    operator delete(__p);
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  sub_22317C838((void **)(v42 - 256));
  v44 = *(void **)a24;
  if (*(_QWORD *)a24)
  {
    *(_QWORD *)(a24 + 8) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

void sub_223EC79B0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CDFC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDFC8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.geometry");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CDFC0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CDFC8);
  }
  *a1 = qword_2540CDFC0;
}

void sub_223EC7A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDFC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDFC8);
  _Unwind_Resume(a1);
}

void sub_223EC7AA4(char **a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BOOL4 v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  char *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  __int128 *v138;
  char *v139;
  unint64_t v140;
  __int128 v141;

  if (a4)
  {
    v8 = *(char **)a2;
    v7 = *(_QWORD **)(a2 + 8);
    v9 = (_QWORD *)(*(_QWORD *)a2 + 8 * a4);
    if (v9 != v7)
    {
      v10 = *(_QWORD *)v8;
      *(_QWORD *)v8 = *v9;
      v11 = v8 + 8;
      *v9 = v10;
      if (v9 + 1 != v7)
      {
        v12 = a4;
        do
        {
          v13 = &v11[v12];
          if (v11 == v9)
            v9 = &v11[v12];
          v14 = *v11;
          *v11++ = *v13;
          *v13 = v14;
        }
        while (&v11[v12] != v7);
      }
      if (v11 != v9)
      {
        v15 = v9;
        while (1)
        {
          v16 = *v11;
          *v11++ = *v15;
          *v15++ = v16;
          v17 = v11 == v9;
          if (v15 == v7)
          {
            if (v11 == v9)
              break;
            v15 = v9 + 1;
            v18 = v11;
            while (1)
            {
              v19 = *v11;
              *v18++ = *v9;
              *v9 = v19;
              v17 = v18 == v9;
              if (v15 != v7)
                break;
              v11 = v18;
              if (v18 == v9)
                goto LABEL_18;
            }
            ++v11;
          }
          if (v17)
            v9 = v15;
        }
      }
    }
  }
LABEL_18:
  if (*a1 == a1[1]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/PolygonUtil.hpp", 188, (uint64_t)"!ring1.empty()", 14, (uint64_t)"ring1 must be nonempty", 22, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_147;
  }
  v21 = *(char **)a2;
  v20 = *(char **)(a2 + 8);
  if (*(char **)a2 == v20)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/PolygonUtil.hpp", 189, (uint64_t)"!ring2.empty()", 14, (uint64_t)"ring2 must be nonempty", 22, (void (*)(void **))sub_22457406C))
    {
      v21 = *(char **)a2;
      v20 = *(char **)(a2 + 8);
      v22 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v20 < v22)
        goto LABEL_22;
      goto LABEL_25;
    }
LABEL_147:
    abort();
  }
  v22 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v20 < v22)
  {
LABEL_22:
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v23 = v20 + 8;
    goto LABEL_47;
  }
LABEL_25:
  v24 = (v20 - v21) >> 3;
  v25 = v24 + 1;
  if ((unint64_t)(v24 + 1) >> 61)
    goto LABEL_145;
  v26 = v22 - (_QWORD)v21;
  if (v26 >> 2 > v25)
    v25 = v26 >> 2;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
    v27 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v27 = v25;
  if (v27)
  {
    if (v27 >> 61)
      goto LABEL_146;
    v28 = operator new(8 * v27);
  }
  else
  {
    v28 = 0;
  }
  v29 = &v28[8 * v24];
  v30 = &v28[8 * v27];
  *v29 = *(_QWORD *)v21;
  v23 = (char *)(v29 + 1);
  if (v20 == v21)
    goto LABEL_45;
  v31 = v20 - v21 - 8;
  if (v31 >= 0x58)
  {
    if ((unint64_t)(v21 - v28) >= 0x20)
    {
      v33 = (v31 >> 3) + 1;
      v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
      v32 = &v20[-v34];
      v29 = (_QWORD *)((char *)v29 - v34);
      v35 = &v28[8 * v24 - 16];
      v36 = v20 - 16;
      v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *(_OWORD *)v36;
        *(v35 - 1) = *((_OWORD *)v36 - 1);
        *v35 = v38;
        v35 -= 2;
        v36 -= 32;
        v37 -= 4;
      }
      while (v37);
      if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_44;
    }
    else
    {
      v32 = v20;
    }
  }
  else
  {
    v32 = v20;
  }
  do
  {
    v39 = *((_QWORD *)v32 - 1);
    v32 -= 8;
    *--v29 = v39;
  }
  while (v32 != v21);
LABEL_44:
  v20 = *(char **)a2;
LABEL_45:
  *(_QWORD *)a2 = v29;
  *(_QWORD *)(a2 + 8) = v23;
  *(_QWORD *)(a2 + 16) = v30;
  if (v20)
    operator delete(v20);
LABEL_47:
  *(_QWORD *)(a2 + 8) = v23;
  v40 = *a1;
  v41 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v23 < v41)
  {
    *(_QWORD *)v23 = *(_QWORD *)&v40[8 * a3];
    v42 = v23 + 8;
    goto LABEL_71;
  }
  v43 = *(char **)a2;
  v44 = (uint64_t)&v23[-*(_QWORD *)a2];
  v45 = v44 >> 3;
  v46 = (v44 >> 3) + 1;
  if (v46 >> 61)
LABEL_145:
    sub_2236B43DC();
  v47 = v41 - (_QWORD)v43;
  if (v47 >> 2 > v46)
    v46 = v47 >> 2;
  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
    v48 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v48 = v46;
  if (v48)
  {
    if (v48 >> 61)
      goto LABEL_146;
    v49 = operator new(8 * v48);
  }
  else
  {
    v49 = 0;
  }
  v50 = &v49[8 * v45];
  v51 = &v49[8 * v48];
  *v50 = *(_QWORD *)&v40[8 * a3];
  v42 = (char *)(v50 + 1);
  if (v23 != v43)
  {
    v52 = v23 - v43 - 8;
    if (v52 >= 0x58)
    {
      if ((unint64_t)(v23 - &v49[v44]) >= 0x20)
      {
        v54 = (v52 >> 3) + 1;
        v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        v53 = &v23[-v55];
        v50 = (_QWORD *)((char *)v50 - v55);
        v56 = &v49[8 * v45 - 16];
        v57 = v23 - 16;
        v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          *v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_69:
          v23 = *(char **)a2;
          *(_QWORD *)a2 = v50;
          *(_QWORD *)(a2 + 8) = v42;
          *(_QWORD *)(a2 + 16) = v51;
          if (!v23)
            goto LABEL_71;
          goto LABEL_70;
        }
      }
      else
      {
        v53 = v23;
      }
    }
    else
    {
      v53 = v23;
    }
    do
    {
      v60 = *((_QWORD *)v53 - 1);
      v53 -= 8;
      *--v50 = v60;
    }
    while (v53 != v43);
    goto LABEL_69;
  }
  *(_QWORD *)a2 = v50;
  *(_QWORD *)(a2 + 8) = v42;
  *(_QWORD *)(a2 + 16) = v51;
LABEL_70:
  operator delete(v23);
LABEL_71:
  *(_QWORD *)(a2 + 8) = v42;
  v61 = *(char **)a2;
  v62 = (uint64_t)&v42[-*(_QWORD *)a2];
  if (v62 < 1)
    return;
  v63 = *a1;
  v64 = (unint64_t)a1[1];
  v65 = (uint64_t)&(*a1)[8 * a3];
  v66 = (char *)(v65 + 8);
  v67 = v62 >> 3;
  v68 = a1[2];
  if (v62 >> 3 > (uint64_t)&v68[-v64] >> 3)
  {
    v69 = v67 + ((uint64_t)(v64 - (_QWORD)v63) >> 3);
    if (v69 >> 61)
      sub_2236B43DC();
    v70 = v68 - v63;
    if (v70 >> 2 > v69)
      v69 = v70 >> 2;
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
      v71 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v71 = v69;
    if (!v71)
    {
      v72 = 0;
LABEL_88:
      v79 = v66 - v63;
      v80 = (v66 - v63) >> 3;
      v81 = &v72[8 * v80];
      v82 = &v81[8 * v67];
      if ((unint64_t)(v62 - 8) >= 0x38)
      {
        v83 = &v72[8 * v80];
        if ((unint64_t)(&v72[v79 & 0xFFFFFFFFFFFFFFF8] - v61) >= 0x20)
        {
          v84 = ((unint64_t)(v62 - 8) >> 3) + 1;
          v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
          v83 = &v81[v85];
          v86 = &v61[v85];
          v87 = (__int128 *)(v61 + 16);
          v88 = &v72[8 * v80 + 16];
          v89 = v84 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v90 = *v87;
            *(v88 - 1) = *(v87 - 1);
            *v88 = v90;
            v87 += 2;
            v88 += 2;
            v89 -= 4;
          }
          while (v89);
          v61 = v86;
          if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_95:
            v92 = *a1;
            if (*a1 == v66)
              goto LABEL_104;
            v93 = &v63[8 * a3] - v92;
            if (v93 >= 0x68)
            {
              v94 = v66;
              if ((unint64_t)(&v63[8 * a3] - &v72[v79 & 0xFFFFFFFFFFFFFFF8] + 8) >= 0x20)
              {
                v95 = (v93 >> 3) + 1;
                v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
                v94 = &v66[-v96];
                v81 -= v96;
                v97 = &v72[8 * v80 - 16];
                v98 = (__int128 *)&v63[8 * a3 - 8];
                v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v100 = *v98;
                  *(v97 - 1) = *(v98 - 1);
                  *v97 = v100;
                  v97 -= 2;
                  v98 -= 2;
                  v99 -= 4;
                }
                while (v99);
                if (v95 == (v95 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_103;
              }
            }
            else
            {
              v94 = v66;
            }
            do
            {
              v101 = *((_QWORD *)v94 - 1);
              v94 -= 8;
              *((_QWORD *)v81 - 1) = v101;
              v81 -= 8;
            }
            while (v94 != v92);
LABEL_103:
            v64 = (unint64_t)a1[1];
LABEL_104:
            v102 = &v72[8 * v71];
            if ((char *)v64 != v66)
            {
              v103 = v64 - (_QWORD)&v63[8 * a3] - 16;
              if (v103 < 0x58)
                goto LABEL_151;
              if ((unint64_t)(&v72[(v79 & 0xFFFFFFFFFFFFFFF8) + (v62 & 0xFFFFFFFFFFFFFFF8)] - v66) < 0x20)
                goto LABEL_151;
              v104 = (v103 >> 3) + 1;
              v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
              v66 += v105;
              v82 += v105;
              v106 = &v72[8 * v67 + 16 + 8 * v80];
              v107 = (__int128 *)&v63[8 * a3 + 24];
              v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v109 = *v107;
                *(v106 - 1) = *(v107 - 1);
                *v106 = v109;
                v106 += 2;
                v107 += 2;
                v108 -= 4;
              }
              while (v108);
              if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_151:
                do
                {
                  v110 = *(_QWORD *)v66;
                  v66 += 8;
                  *(_QWORD *)v82 = v110;
                  v82 += 8;
                }
                while (v66 != (char *)v64);
              }
            }
            v111 = *a1;
            *a1 = v81;
            a1[1] = v82;
            a1[2] = v102;
            if (v111)
              operator delete(v111);
            return;
          }
        }
      }
      else
      {
        v83 = &v72[8 * v80];
      }
      do
      {
        v91 = *(_QWORD *)v61;
        v61 += 8;
        *(_QWORD *)v83 = v91;
        v83 += 8;
      }
      while (v83 != v82);
      goto LABEL_95;
    }
    if (!(v71 >> 61))
    {
      v72 = operator new(8 * v71);
      goto LABEL_88;
    }
LABEL_146:
    sub_223174E94();
  }
  v73 = v64 - (_QWORD)v66;
  v74 = (uint64_t)(v64 - (_QWORD)v66) >> 3;
  if (v74 >= v67)
  {
    v75 = &v61[8 * v67];
    v78 = a1[1];
    goto LABEL_120;
  }
  v75 = &v61[8 * v74];
  if (v75 == v42)
  {
    v78 = a1[1];
    goto LABEL_119;
  }
  v76 = v42 - v61 - v73 - 8;
  if (v76 < 0x38)
  {
    v77 = &v61[8 * v74];
    v78 = a1[1];
    do
    {
LABEL_118:
      v118 = *(_QWORD *)v77;
      v77 += 8;
      *(_QWORD *)v78 = v118;
      v78 += 8;
    }
    while (v77 != v42);
    goto LABEL_119;
  }
  v77 = &v61[8 * v74];
  v78 = a1[1];
  if ((unint64_t)(v66 - v61) < 0x20)
    goto LABEL_118;
  v112 = (v76 >> 3) + 1;
  v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
  v77 = &v75[v113];
  v78 = (char *)(v64 + v113);
  v114 = (_OWORD *)(v64 + 16);
  v115 = &v61[8 * v74 + 16];
  v116 = v112 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v117 = *(_OWORD *)v115;
    *(v114 - 1) = *((_OWORD *)v115 - 1);
    *v114 = v117;
    v114 += 2;
    v115 += 32;
    v116 -= 4;
  }
  while (v116);
  if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_118;
LABEL_119:
  a1[1] = v78;
  if (v73 < 1)
    return;
LABEL_120:
  v119 = &v66[8 * v67];
  v120 = v78 - v119;
  v121 = (v78 - v119) >> 3;
  v122 = v121 + 1;
  v123 = (uint64_t *)(v65 + 8 * (v121 + 1));
  v124 = v78;
  if ((unint64_t)v123 >= v64)
    goto LABEL_130;
  v125 = (uint64_t)&v63[8 * a3 + v120];
  v126 = v125 + 16;
  if (v64 > v125 + 16)
    v126 = v64;
  v127 = v126 - v125 - 9;
  if (v127 < 0x68)
  {
    v124 = v78;
    do
    {
LABEL_129:
      v134 = *v123++;
      *(_QWORD *)v124 = v134;
      v124 += 8;
    }
    while ((unint64_t)v123 < v64);
    goto LABEL_130;
  }
  v124 = v78;
  if ((unint64_t)(-(v63 - v119 + 8 * a3) - 8) < 0x20)
    goto LABEL_129;
  v128 = (v127 >> 3) + 1;
  v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
  v123 = (uint64_t *)((char *)v123 + v129);
  v124 = &v78[v129];
  v130 = v78 + 16;
  v131 = (__int128 *)&v63[8 * a3 + 24 + 8 * v121];
  v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v133 = *v131;
    *(v130 - 1) = *(v131 - 1);
    *v130 = v133;
    v130 += 2;
    v131 += 2;
    v132 -= 4;
  }
  while (v132);
  if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_129;
LABEL_130:
  a1[1] = v124;
  if (v78 == v119)
    goto LABEL_136;
  if (v120 < 0x60 || v63 - v119 + 8 * (unint64_t)a3 + 8 < 0x20)
  {
    v135 = v78;
LABEL_134:
    v136 = v135 - 8;
    v137 = v122 - 1;
    do
    {
      *(_QWORD *)v136 = *(_QWORD *)(v65 + 8 * v137);
      v136 -= 8;
      --v137;
    }
    while (v137);
    goto LABEL_136;
  }
  v135 = &v78[-8 * (v121 & 0xFFFFFFFFFFFFFFFCLL)];
  v122 -= v121 & 0xFFFFFFFFFFFFFFFCLL;
  v138 = (__int128 *)&v63[8 * a3 - 8 + 8 * v121];
  v139 = v78 - 16;
  v140 = v121 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v141 = *v138;
    *((_OWORD *)v139 - 1) = *(v138 - 1);
    *(_OWORD *)v139 = v141;
    v138 -= 2;
    v139 -= 32;
    v140 -= 4;
  }
  while (v140);
  if (v121 != (v121 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_134;
LABEL_136:
  while (v61 != v75)
  {
    if (v61 != v66)
      *(_QWORD *)v66 = *(_QWORD *)v61;
    v61 += 8;
    v66 += 8;
  }
}

uint64_t *sub_223EC83A8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_22316E078();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_223174E94();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v7 = &v6[-v19];
      v16 = (_DWORD *)((char *)v16 - v19);
      v20 = &v15[4 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v6 = *a2;
    v8 = v6 + 4;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

uint64_t sub_223EC8518(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  float v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  BOOL v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  float v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  int64_t v115;
  int64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  uint64_t v137;
  int64_t v138;
  unsigned int *v139;
  uint64_t v140;
  unint64_t v141;
  unsigned int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  uint64_t v157;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v101 = *(a2 - 1);
        v102 = *v10;
        if (*(float *)(*(_QWORD *)(**a3 + 24 * v101) + 8 * *(unsigned int *)(*a3[1] + 4 * v101)) > *(float *)(*(_QWORD *)(**a3 + 24 * v102) + 8 * *(unsigned int *)(*a3[1] + 4 * v102)))
        {
          *v10 = v101;
          *(a2 - 1) = v102;
        }
        return result;
      case 3:
        v93 = **a3;
        v94 = *a3[1];
        v95 = *v10;
        v96 = v10[1];
        v97 = *(float *)(*(_QWORD *)(v93 + 24 * v96) + 8 * *(unsigned int *)(v94 + 4 * v96));
        v98 = *(_QWORD *)(v93 + 24 * v95);
        v99 = *(a2 - 1);
        v100 = *(float *)(*(_QWORD *)(v93 + 24 * v99) + 8 * *(unsigned int *)(v94 + 4 * v99));
        if (v97 <= *(float *)(v98 + 8 * *(unsigned int *)(v94 + 4 * v95)))
        {
          if (v100 > v97)
          {
            v10[1] = v99;
            *(a2 - 1) = v96;
            v149 = *v10;
            v148 = v10[1];
            if (*(float *)(*(_QWORD *)(v93 + 24 * v148) + 8 * *(unsigned int *)(v94 + 4 * v148)) > *(float *)(*(_QWORD *)(v93 + 24 * v149) + 8 * *(unsigned int *)(v94 + 4 * v149)))
            {
              *v10 = v148;
              v10[1] = v149;
            }
          }
        }
        else if (v100 <= v97)
        {
          *v10 = v96;
          v10[1] = v95;
          v157 = *(a2 - 1);
          if (*(float *)(*(_QWORD *)(v93 + 24 * v157) + 8 * *(unsigned int *)(v94 + 4 * v157)) > *(float *)(v98 + 8 * *(unsigned int *)(v94 + 4 * v95)))
          {
            v10[1] = v157;
            *(a2 - 1) = v95;
          }
        }
        else
        {
          *v10 = v99;
          *(a2 - 1) = v95;
        }
        return result;
      case 4:
        return (uint64_t)sub_223EC97E8(v10, v10 + 1, v10 + 2, a2 - 1, **a3, *a3[1]);
      case 5:
        return (uint64_t)sub_223EC99D4(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v114 = (unint64_t)(v12 - 2) >> 1;
              v115 = v114;
              do
              {
                v116 = v115;
                if (v114 >= v115)
                {
                  v117 = a3[1];
                  v118 = (2 * v115) | 1;
                  v119 = &v10[v118];
                  v120 = 2 * v115 + 2;
                  v121 = **a3;
                  if (v120 >= v12)
                  {
                    v122 = *v117;
                  }
                  else
                  {
                    v122 = *v117;
                    if (*(float *)(*(_QWORD *)(v121 + 24 * *v119) + 8 * *(unsigned int *)(v122 + 4 * *v119)) > *(float *)(*(_QWORD *)(v121 + 24 * v119[1]) + 8 * *(unsigned int *)(v122 + 4 * v119[1])))
                    {
                      ++v119;
                      v118 = 2 * v116 + 2;
                    }
                  }
                  v123 = *v119;
                  v124 = &v10[v116];
                  v125 = *v124;
                  result = *(_QWORD *)(v121 + 24 * v125);
                  if (*(float *)(*(_QWORD *)(v121 + 24 * v123)
                                + 8 * *(unsigned int *)(v122 + 4 * v123)) <= *(float *)(result
                                                                                        + 8
                                                                                        * *(unsigned int *)(v122 + 4 * v125)))
                  {
                    do
                    {
                      v126 = v119;
                      *v124 = v123;
                      if (v114 < v118)
                        break;
                      v127 = 2 * v118;
                      v118 = (2 * v118) | 1;
                      v119 = &v10[v118];
                      v128 = v127 + 2;
                      if (v128 < v12
                        && *(float *)(*(_QWORD *)(v121 + 24 * *v119) + 8 * *(unsigned int *)(v122 + 4 * *v119)) > *(float *)(*(_QWORD *)(v121 + 24 * v119[1]) + 8 * *(unsigned int *)(v122 + 4 * v119[1])))
                      {
                        ++v119;
                        v118 = v128;
                      }
                      v123 = *v119;
                      v124 = v126;
                    }
                    while (*(float *)(*(_QWORD *)(v121 + 24 * v123)
                                     + 8 * *(unsigned int *)(v122 + 4 * v123)) <= *(float *)(result
                                                                                             + 8
                                                                                             * *(unsigned int *)(v122 + 4 * v125)));
                    *v126 = v125;
                  }
                }
                v115 = v116 - 1;
              }
              while (v116);
              v129 = (unint64_t)v11 >> 2;
              do
              {
                if (v129 >= 2)
                {
                  v131 = 0;
                  v132 = *a3;
                  v133 = a3[1];
                  v134 = v10;
                  v135 = *v10;
                  do
                  {
                    v136 = v134;
                    v134 += v131 + 1;
                    v137 = 2 * v131;
                    result = (2 * v131) | 1;
                    v131 = result;
                    v138 = v137 + 2;
                    if (v138 < v129)
                    {
                      result = (uint64_t)(v134 + 1);
                      if (*(float *)(*(_QWORD *)(*v132 + 24 * *v134) + 8 * *(unsigned int *)(*v133 + 4 * *v134)) > *(float *)(*(_QWORD *)(*v132 + 24 * v134[1]) + 8 * *(unsigned int *)(*v133 + 4 * v134[1])))
                      {
                        ++v134;
                        v131 = v138;
                      }
                    }
                    *v136 = *v134;
                  }
                  while (v131 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                  v139 = a2 - 1;
                  if (v134 == a2 - 1)
                  {
                    *v134 = v135;
                  }
                  else
                  {
                    *v134 = *v139;
                    *v139 = v135;
                    v140 = (char *)v134 - (char *)v10 + 4;
                    if (v140 >= 5)
                    {
                      v141 = (((unint64_t)v140 >> 2) - 2) >> 1;
                      v142 = &v10[v141];
                      v143 = *v142;
                      v144 = *v133;
                      v145 = *v134;
                      v146 = *v132;
                      v147 = *(_QWORD *)(v146 + 24 * v145);
                      result = 8 * *(unsigned int *)(v144 + 4 * v145);
                      if (*(float *)(*(_QWORD *)(v146 + 24 * v143)
                                    + 8 * *(unsigned int *)(v144 + 4 * v143)) > *(float *)(v147 + result))
                      {
                        do
                        {
                          result = (uint64_t)v142;
                          *v134 = v143;
                          if (!v141)
                            break;
                          v141 = (v141 - 1) >> 1;
                          v142 = &v10[v141];
                          v143 = *v142;
                          v134 = (unsigned int *)result;
                        }
                        while (*(float *)(*(_QWORD *)(v146 + 24 * v143)
                                         + 8 * *(unsigned int *)(v144 + 4 * v143)) > *(float *)(v147
                                                                                                + 8
                                                                                                * *(unsigned int *)(v144 + 4 * v145)));
                        *(_DWORD *)result = v145;
                      }
                    }
                  }
                }
                --a2;
              }
              while ((unint64_t)v129-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *a3[1];
          v17 = *(a2 - 1);
          v18 = *(float *)(*(_QWORD *)(v15 + 24 * v17) + 8 * *(unsigned int *)(v16 + 4 * v17));
          if ((unint64_t)v11 < 0x201)
          {
            v23 = *v10;
            v24 = *v14;
            v25 = *(float *)(*(_QWORD *)(v15 + 24 * v23) + 8 * *(unsigned int *)(v16 + 4 * v23));
            v26 = *(_QWORD *)(v15 + 24 * v24);
            if (v25 <= *(float *)(v26 + 8 * *(unsigned int *)(v16 + 4 * v24)))
            {
              if (v18 > v25)
              {
                *v10 = v17;
                *(a2 - 1) = v23;
                v29 = *v10;
                v30 = *v14;
                if (*(float *)(*(_QWORD *)(v15 + 24 * v29) + 8 * *(unsigned int *)(v16 + 4 * v29)) > *(float *)(*(_QWORD *)(v15 + 24 * v30) + 8 * *(unsigned int *)(v16 + 4 * v30)))
                {
                  *v14 = v29;
                  *v10 = v30;
                  --a4;
                  v31 = v30;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v18 <= v25)
              {
                *v14 = v23;
                *v10 = v24;
                v44 = *(a2 - 1);
                if (*(float *)(*(_QWORD *)(v15 + 24 * v44) + 8 * *(unsigned int *)(v16 + 4 * v44)) <= *(float *)(v26 + 8 * *(unsigned int *)(v16 + 4 * v24)))
                  goto LABEL_32;
                *v10 = v44;
              }
              else
              {
                *v14 = v17;
              }
              *(a2 - 1) = v24;
            }
LABEL_32:
            --a4;
            v31 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_54:
            v45 = *(_QWORD *)(v15 + 24 * v31);
            v46 = *(float *)(v45 + 8 * *(unsigned int *)(v16 + 4 * v31));
            if (*(float *)(*(_QWORD *)(v15 + 24 * *(v10 - 1)) + 8 * *(unsigned int *)(v16 + 4 * *(v10 - 1))) > v46)
              goto LABEL_55;
            if (v46 <= *(float *)(*(_QWORD *)(v15 + 24 * *(a2 - 1)) + 8 * *(unsigned int *)(v16 + 4 * *(a2 - 1))))
            {
              v84 = v10 + 1;
              do
              {
                v10 = v84;
                if (v84 >= a2)
                  break;
                ++v84;
              }
              while (v46 <= *(float *)(*(_QWORD *)(v15 + 24 * *v10) + 8 * *(unsigned int *)(v16 + 4 * *v10)));
            }
            else
            {
              do
              {
                v83 = v10[1];
                ++v10;
              }
              while (v46 <= *(float *)(*(_QWORD *)(v15 + 24 * v83) + 8 * *(unsigned int *)(v16 + 4 * v83)));
            }
            v85 = a2;
            if (v10 < a2)
            {
              v85 = a2;
              do
                v86 = *--v85;
              while (v46 > *(float *)(*(_QWORD *)(v15 + 24 * v86) + 8 * *(unsigned int *)(v16 + 4 * v86)));
            }
            if (v10 < v85)
            {
              v87 = *v10;
              v88 = *v85;
              do
              {
                *v10 = v88;
                *v85 = v87;
                v89 = *(float *)(v45 + 8 * *(unsigned int *)(v16 + 4 * v31));
                do
                {
                  v90 = v10[1];
                  ++v10;
                  v87 = v90;
                }
                while (v89 <= *(float *)(*(_QWORD *)(v15 + 24 * v90) + 8 * *(unsigned int *)(v16 + 4 * v90)));
                do
                {
                  v91 = *--v85;
                  v88 = v91;
                }
                while (v89 > *(float *)(*(_QWORD *)(v15 + 24 * v91) + 8 * *(unsigned int *)(v16 + 4 * v91)));
              }
              while (v10 < v85);
            }
            v92 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v92;
            a5 = 0;
            *v92 = v31;
            continue;
          }
          v19 = *v14;
          v20 = *v10;
          v21 = *(float *)(*(_QWORD *)(v15 + 24 * v19) + 8 * *(unsigned int *)(v16 + 4 * v19));
          v22 = *(_QWORD *)(v15 + 24 * v20);
          if (v21 <= *(float *)(v22 + 8 * *(unsigned int *)(v16 + 4 * v20)))
          {
            if (v18 > v21)
            {
              *v14 = v17;
              *(a2 - 1) = v19;
              v27 = *v14;
              v28 = *v10;
              if (*(float *)(*(_QWORD *)(v15 + 24 * v27) + 8 * *(unsigned int *)(v16 + 4 * v27)) > *(float *)(*(_QWORD *)(v15 + 24 * v28) + 8 * *(unsigned int *)(v16 + 4 * v28)))
              {
                *v10 = v27;
                *v14 = v28;
              }
            }
          }
          else
          {
            if (v18 <= v21)
            {
              *v10 = v19;
              *v14 = v20;
              v32 = *(a2 - 1);
              if (*(float *)(*(_QWORD *)(v15 + 24 * v32) + 8 * *(unsigned int *)(v16 + 4 * v32)) <= *(float *)(v22 + 8 * *(unsigned int *)(v16 + 4 * v20)))
                goto LABEL_23;
              *v14 = v32;
            }
            else
            {
              *v10 = v17;
            }
            *(a2 - 1) = v20;
          }
LABEL_23:
          v33 = &v10[v13];
          v36 = *(v33 - 1);
          v34 = v33 - 1;
          v35 = v36;
          v37 = v10[1];
          v38 = *(float *)(*(_QWORD *)(v15 + 24 * v36) + 8 * *(unsigned int *)(v16 + 4 * v36));
          v39 = *(_QWORD *)(v15 + 24 * v37);
          v40 = *(a2 - 2);
          v41 = *(float *)(*(_QWORD *)(v15 + 24 * v40) + 8 * *(unsigned int *)(v16 + 4 * v40));
          if (v38 <= *(float *)(v39 + 8 * *(unsigned int *)(v16 + 4 * v37)))
          {
            if (v41 > v38)
            {
              *v34 = v40;
              *(a2 - 2) = v35;
              v42 = *v34;
              v43 = v10[1];
              if (*(float *)(*(_QWORD *)(v15 + 24 * v42) + 8 * *(unsigned int *)(v16 + 4 * v42)) > *(float *)(*(_QWORD *)(v15 + 24 * v43) + 8 * *(unsigned int *)(v16 + 4 * v43)))
              {
                v10[1] = v42;
                *v34 = v43;
              }
            }
          }
          else
          {
            if (v41 <= v38)
            {
              v10[1] = v35;
              *v34 = v37;
              v47 = *(a2 - 2);
              if (*(float *)(*(_QWORD *)(v15 + 24 * v47) + 8 * *(unsigned int *)(v16 + 4 * v47)) <= *(float *)(v39 + 8 * *(unsigned int *)(v16 + 4 * v37)))
                goto LABEL_37;
              *v34 = v47;
            }
            else
            {
              v10[1] = v40;
            }
            *(a2 - 2) = v37;
          }
LABEL_37:
          v48 = &v10[v13];
          v51 = v48[1];
          v49 = v48 + 1;
          v50 = v51;
          v52 = v10[2];
          v53 = *(float *)(*(_QWORD *)(v15 + 24 * v51) + 8 * *(unsigned int *)(v16 + 4 * v51));
          v54 = *(_QWORD *)(v15 + 24 * v52);
          v55 = *(a2 - 3);
          v56 = *(float *)(*(_QWORD *)(v15 + 24 * v55) + 8 * *(unsigned int *)(v16 + 4 * v55));
          if (v53 <= *(float *)(v54 + 8 * *(unsigned int *)(v16 + 4 * v52)))
          {
            if (v56 > v53)
            {
              *v49 = v55;
              *(a2 - 3) = v50;
              v57 = *v49;
              v58 = v10[2];
              if (*(float *)(*(_QWORD *)(v15 + 24 * v57) + 8 * *(unsigned int *)(v16 + 4 * v57)) > *(float *)(*(_QWORD *)(v15 + 24 * v58) + 8 * *(unsigned int *)(v16 + 4 * v58)))
              {
                v10[2] = v57;
                *v49 = v58;
              }
            }
          }
          else
          {
            if (v56 <= v53)
            {
              v10[2] = v50;
              *v49 = v52;
              v59 = *(a2 - 3);
              if (*(float *)(*(_QWORD *)(v15 + 24 * v59) + 8 * *(unsigned int *)(v16 + 4 * v59)) <= *(float *)(v54 + 8 * *(unsigned int *)(v16 + 4 * v52)))
                goto LABEL_46;
              *v49 = v59;
            }
            else
            {
              v10[2] = v55;
            }
            *(a2 - 3) = v52;
          }
LABEL_46:
          v60 = *v14;
          v61 = *v34;
          v62 = *(float *)(*(_QWORD *)(v15 + 24 * v60) + 8 * *(unsigned int *)(v16 + 4 * v60));
          v63 = *(_QWORD *)(v15 + 24 * v61);
          v64 = *v49;
          v65 = *(_QWORD *)(v15 + 24 * v64);
          result = 8 * *(unsigned int *)(v16 + 4 * v64);
          v66 = *(float *)(v65 + result);
          if (v62 > *(float *)(v63 + 8 * *(unsigned int *)(v16 + 4 * v61)))
          {
            if (v66 <= v62)
            {
              *v34 = v60;
              *v14 = v61;
              v34 = v14;
              LODWORD(v60) = v64;
              if (*(float *)(v65 + 8 * *(unsigned int *)(v16 + 4 * v64)) <= *(float *)(v63
                                                                                        + 8
                                                                                        * *(unsigned int *)(v16 + 4 * v61)))
              {
                LODWORD(v60) = v61;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v34 = v64;
            *v49 = v61;
            goto LABEL_53;
          }
          if (v66 <= v62)
            goto LABEL_53;
          *v14 = v64;
          *v49 = v60;
          v49 = v14;
          LODWORD(v60) = v61;
          if (*(float *)(v65 + 8 * *(unsigned int *)(v16 + 4 * v64)) > *(float *)(v63
                                                                                   + 8
                                                                                   * *(unsigned int *)(v16 + 4 * v61)))
            goto LABEL_52;
          LODWORD(v60) = v64;
LABEL_53:
          v67 = *v10;
          *v10 = v60;
          *v14 = v67;
          --a4;
          v31 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_54;
LABEL_33:
          v45 = *(_QWORD *)(v15 + 24 * v31);
          v46 = *(float *)(v45 + 8 * *(unsigned int *)(v16 + 4 * v31));
LABEL_55:
          v68 = 0;
          do
            v69 = v10[++v68];
          while (*(float *)(*(_QWORD *)(v15 + 24 * v69) + 8 * *(unsigned int *)(v16 + 4 * v69)) > v46);
          v70 = &v10[v68];
          v71 = a2;
          if (v68 == 1)
          {
            v71 = a2;
            do
            {
              if (v70 >= v71)
                break;
              v73 = *--v71;
            }
            while (*(float *)(*(_QWORD *)(v15 + 24 * v73) + 8 * *(unsigned int *)(v16 + 4 * v73)) <= v46);
          }
          else
          {
            do
              v72 = *--v71;
            while (*(float *)(*(_QWORD *)(v15 + 24 * v72) + 8 * *(unsigned int *)(v16 + 4 * v72)) <= v46);
          }
          if (v70 < v71)
          {
            v74 = *v71;
            v75 = v69;
            v76 = &v10[v68];
            v77 = v71;
            do
            {
              *v76 = v74;
              *v77 = v75;
              v78 = *(float *)(v45 + 8 * *(unsigned int *)(v16 + 4 * v31));
              do
              {
                v79 = v76[1];
                ++v76;
                v75 = v79;
              }
              while (*(float *)(*(_QWORD *)(v15 + 24 * v79) + 8 * *(unsigned int *)(v16 + 4 * v79)) > v78);
              do
              {
                v80 = *--v77;
                v74 = v80;
              }
              while (*(float *)(*(_QWORD *)(v15 + 24 * v80) + 8 * *(unsigned int *)(v16 + 4 * v80)) <= v78);
            }
            while (v76 < v77);
            v81 = v76 - 1;
            if (v76 - 1 == v10)
              goto LABEL_73;
LABEL_72:
            *v10 = *v81;
            goto LABEL_73;
          }
          v81 = v70 - 1;
          if (v70 - 1 != v10)
            goto LABEL_72;
LABEL_73:
          *v81 = v31;
          if (v70 < v71)
            goto LABEL_76;
          v82 = sub_223EC93E8(v10, v81, a3);
          v10 = v81 + 1;
          result = sub_223EC93E8(v81 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v82)
              continue;
LABEL_76:
            result = sub_223EC8518(v9, v81, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v81 + 1;
            continue;
          }
          a2 = v81;
          if (v82)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v103 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v104 = **a3;
              v105 = *a3[1];
              v106 = 4;
              v107 = v10;
              do
              {
                v110 = *v107;
                v109 = v107[1];
                v107 = v103;
                v111 = *(_QWORD *)(v104 + 24 * v109);
                if (*(float *)(v111 + 8 * *(unsigned int *)(v105 + 4 * v109)) > *(float *)(*(_QWORD *)(v104 + 24 * v110) + 8 * *(unsigned int *)(v105 + 4 * v110)))
                {
                  v112 = v106;
                  do
                  {
                    *(unsigned int *)((char *)v10 + v112) = v110;
                    v113 = v112 - 4;
                    if (v112 == 4)
                    {
                      v108 = v10;
                      goto LABEL_112;
                    }
                    v110 = *(unsigned int *)((char *)v10 + v112 - 8);
                    result = 8 * *(unsigned int *)(v105 + 4 * v110);
                    v112 -= 4;
                  }
                  while (*(float *)(v111 + 8 * *(unsigned int *)(v105 + 4 * v109)) > *(float *)(*(_QWORD *)(v104 + 24 * v110)
                                                                                                 + result));
                  v108 = (unsigned int *)((char *)v10 + v113);
LABEL_112:
                  *v108 = v109;
                }
                v103 = v107 + 1;
                v106 += 4;
              }
              while (v107 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v150 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v151 = **a3;
            v152 = *a3[1];
            do
            {
              v154 = *v9;
              v153 = v9[1];
              v9 = v150;
              v155 = *(_QWORD *)(v151 + 24 * v153);
              if (*(float *)(v155 + 8 * *(unsigned int *)(v152 + 4 * v153)) > *(float *)(*(_QWORD *)(v151 + 24 * v154) + 8 * *(unsigned int *)(v152 + 4 * v154)))
              {
                v156 = v9;
                do
                {
                  *v156 = v154;
                  v154 = *(v156 - 2);
                  --v156;
                }
                while (*(float *)(v155 + 8 * *(unsigned int *)(v152 + 4 * v153)) > *(float *)(*(_QWORD *)(v151 + 24 * v154)
                                                                                               + 8
                                                                                               * *(unsigned int *)(v152 + 4 * v154)));
                *v156 = v153;
              }
              v150 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_223EC93E8(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  unsigned int *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  int v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v24 = *(a2 - 1);
      v25 = *a1;
      if (*(float *)(*(_QWORD *)(**a3 + 24 * v24) + 8 * *(unsigned int *)(*a3[1] + 4 * v24)) <= *(float *)(*(_QWORD *)(**a3 + 24 * v25) + 8 * *(unsigned int *)(*a3[1] + 4 * v25)))
        return 1;
      *a1 = v24;
      *(a2 - 1) = v25;
      return 1;
    case 3:
      v4 = **a3;
      v5 = *a3[1];
      v6 = *a1;
      v7 = a1[1];
      v8 = *(float *)(*(_QWORD *)(v4 + 24 * v7) + 8 * *(unsigned int *)(v5 + 4 * v7));
      v9 = *(_QWORD *)(v4 + 24 * v6);
      v10 = *(a2 - 1);
      v11 = *(float *)(*(_QWORD *)(v4 + 24 * v10) + 8 * *(unsigned int *)(v5 + 4 * v10));
      if (v8 <= *(float *)(v9 + 8 * *(unsigned int *)(v5 + 4 * v6)))
      {
        if (v11 <= v8)
          return 1;
        a1[1] = v10;
        *(a2 - 1) = v7;
        v27 = *a1;
        v26 = a1[1];
        if (*(float *)(*(_QWORD *)(v4 + 24 * v26) + 8 * *(unsigned int *)(v5 + 4 * v26)) <= *(float *)(*(_QWORD *)(v4 + 24 * v27) + 8 * *(unsigned int *)(v5 + 4 * v27)))
          return 1;
        *a1 = v26;
        a1[1] = v27;
        return 1;
      }
      else
      {
        if (v11 > v8)
        {
          *a1 = v10;
          *(a2 - 1) = v6;
          return 1;
        }
        *a1 = v7;
        a1[1] = v6;
        v36 = *(a2 - 1);
        if (*(float *)(*(_QWORD *)(v4 + 24 * v36) + 8 * *(unsigned int *)(v5 + 4 * v36)) <= *(float *)(v9 + 8 * *(unsigned int *)(v5 + 4 * v6)))
          return 1;
        a1[1] = v36;
        *(a2 - 1) = v6;
        return 1;
      }
    case 4:
      sub_223EC97E8(a1, a1 + 1, a1 + 2, a2 - 1, **a3, *a3[1]);
      return 1;
    case 5:
      sub_223EC99D4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v12 = a1 + 2;
      v13 = a1[2];
      v14 = a1[1];
      v15 = **a3;
      v16 = *a3[1];
      v17 = *(float *)(*(_QWORD *)(v15 + 24 * v14) + 8 * *(unsigned int *)(v16 + 4 * v14));
      v18 = *a1;
      v19 = *(_QWORD *)(v15 + 24 * v18);
      v20 = *(_QWORD *)(v15 + 24 * v13);
      v21 = *(float *)(v20 + 8 * *(unsigned int *)(v16 + 4 * v13));
      if (v17 > *(float *)(v19 + 8 * *(unsigned int *)(v16 + 4 * v18)))
      {
        v22 = a1;
        v23 = a1 + 2;
        if (v21 <= v17)
        {
          *a1 = v14;
          a1[1] = v18;
          v22 = a1 + 1;
          v23 = a1 + 2;
          if (*(float *)(v20 + 8 * *(unsigned int *)(v16 + 4 * v13)) <= *(float *)(v19
                                                                                    + 8
                                                                                    * *(unsigned int *)(v16 + 4 * v18)))
            goto LABEL_21;
        }
LABEL_20:
        *v22 = v13;
        *v23 = v18;
        goto LABEL_21;
      }
      if (v21 > v17)
      {
        a1[1] = v13;
        *v12 = v14;
        v22 = a1;
        v23 = a1 + 1;
        if (*(float *)(v20 + 8 * *(unsigned int *)(v16 + 4 * v13)) > *(float *)(v19
                                                                                 + 8
                                                                                 * *(unsigned int *)(v16 + 4 * v18)))
          goto LABEL_20;
      }
LABEL_21:
      v28 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v29 = 0;
      for (i = 12; ; i += 4)
      {
        v31 = *v28;
        v32 = *v12;
        v33 = *(_QWORD *)(v15 + 24 * v31);
        if (*(float *)(v33 + 8 * *(unsigned int *)(v16 + 4 * v31)) > *(float *)(*(_QWORD *)(v15 + 24 * v32)
                                                                                                 + 8
                                                                                                 * *(unsigned int *)(v16 + 4 * v32)))
          break;
LABEL_30:
        v12 = v28++;
        if (v28 == a2)
          return 1;
      }
      v34 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v34) = v32;
        v35 = v34 - 4;
        if (v34 == 4)
        {
          *a1 = v31;
          if (++v29 != 8)
            goto LABEL_30;
          return v28 + 1 == a2;
        }
        v32 = *(unsigned int *)((char *)a1 + v34 - 8);
        v34 -= 4;
      }
      while (*(float *)(v33 + 8 * *(unsigned int *)(v16 + 4 * v31)) > *(float *)(*(_QWORD *)(v15
                                                                                              + 24 * v32)
                                                                                  + 8
                                                                                  * *(unsigned int *)(v16 + 4 * v32)));
      *(unsigned int *)((char *)a1 + v35) = v31;
      if (++v29 != 8)
        goto LABEL_30;
      return v28 + 1 == a2;
  }
}

unsigned int *sub_223EC97E8(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  unsigned int v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a2;
  v7 = *result;
  v8 = *(float *)(*(_QWORD *)(a5 + 24 * v6) + 8 * *(unsigned int *)(a6 + 4 * v6));
  v9 = *(_QWORD *)(a5 + 24 * v7);
  v10 = *a3;
  v11 = *(float *)(*(_QWORD *)(a5 + 24 * v10) + 8 * *(unsigned int *)(a6 + 4 * v10));
  if (v8 <= *(float *)(v9 + 8 * *(unsigned int *)(a6 + 4 * v7)))
  {
    if (v11 <= v8)
    {
      v7 = *a3;
      goto LABEL_14;
    }
    *a2 = v10;
    *a3 = v6;
    v12 = *a2;
    v13 = *result;
    if (*(float *)(*(_QWORD *)(a5 + 24 * v12) + 8 * *(unsigned int *)(a6 + 4 * v12)) <= *(float *)(*(_QWORD *)(a5 + 24 * v13) + 8 * *(unsigned int *)(a6 + 4 * v13)))
    {
      v7 = v6;
      v10 = v6;
      goto LABEL_14;
    }
    *result = v12;
    *a2 = v13;
    v7 = *a3;
  }
  else
  {
    if (v11 <= v8)
    {
      *result = v6;
      *a2 = v7;
      v10 = *a3;
      if (*(float *)(*(_QWORD *)(a5 + 24 * v10) + 8 * *(unsigned int *)(a6 + 4 * v10)) <= *(float *)(v9 + 8 * *(unsigned int *)(a6 + 4 * v7)))
      {
        v7 = *a3;
        goto LABEL_14;
      }
      *a2 = v10;
    }
    else
    {
      *result = v10;
    }
    *a3 = v7;
  }
  v10 = v7;
LABEL_14:
  v14 = *a4;
  if (*(float *)(*(_QWORD *)(a5 + 24 * v14) + 8 * *(unsigned int *)(a6 + 4 * v14)) > *(float *)(*(_QWORD *)(a5 + 24 * v7) + 8 * *(unsigned int *)(a6 + 4 * v7)))
  {
    *a3 = v14;
    *a4 = v10;
    v15 = *a3;
    v16 = *a2;
    if (*(float *)(*(_QWORD *)(a5 + 24 * v15) + 8 * *(unsigned int *)(a6 + 4 * v15)) > *(float *)(*(_QWORD *)(a5 + 24 * v16) + 8 * *(unsigned int *)(a6 + 4 * v16)))
    {
      *a2 = v15;
      *a3 = v16;
      v17 = *a2;
      v18 = *result;
      if (*(float *)(*(_QWORD *)(a5 + 24 * v17) + 8 * *(unsigned int *)(a6 + 4 * v17)) > *(float *)(*(_QWORD *)(a5 + 24 * v18) + 8 * *(unsigned int *)(a6 + 4 * v18)))
      {
        *result = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

unsigned int *sub_223EC99D4(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _DWORD *a5, uint64_t **a6)
{
  unsigned int *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = sub_223EC97E8(a1, a2, a3, a4, **a6, *a6[1]);
  v13 = *a5;
  v14 = *a4;
  v15 = **a6;
  v16 = *a6[1];
  if (*(float *)(*(_QWORD *)(v15 + 24 * v13) + 8 * *(unsigned int *)(v16 + 4 * v13)) > *(float *)(*(_QWORD *)(v15 + 24 * v14) + 8 * *(unsigned int *)(v16 + 4 * v14)))
  {
    *a4 = v13;
    *a5 = v14;
    v17 = *a4;
    v18 = *a3;
    if (*(float *)(*(_QWORD *)(v15 + 24 * v17) + 8 * *(unsigned int *)(v16 + 4 * v17)) > *(float *)(*(_QWORD *)(v15 + 24 * v18) + 8 * *(unsigned int *)(v16 + 4 * v18)))
    {
      *a3 = v17;
      *a4 = v18;
      v19 = *a3;
      v20 = *a2;
      if (*(float *)(*(_QWORD *)(v15 + 24 * v19) + 8 * *(unsigned int *)(v16 + 4 * v19)) > *(float *)(*(_QWORD *)(v15 + 24 * v20) + 8 * *(unsigned int *)(v16 + 4 * v20)))
      {
        *a2 = v19;
        *a3 = v20;
        v21 = *a2;
        v22 = *a1;
        if (*(float *)(*(_QWORD *)(v15 + 24 * v21) + 8 * *(unsigned int *)(v16 + 4 * v21)) > *(float *)(*(_QWORD *)(v15 + 24 * v22) + 8 * *(unsigned int *)(v16 + 4 * v22)))
        {
          *a1 = v21;
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

char *sub_223EC9B40(char **a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  __int128 *v9;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;
  char *v21;
  __int128 *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  char *v39;
  char *v40;
  char *v41;
  char *i;
  __int128 v43;
  char *v44;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF0];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = v6 >> 4;
  v13 = a1[1];
  v12 = a1[2];
  if (a5 <= (v12 - v13) >> 4)
  {
    v19 = (v13 - v7) >> 4;
    if (v19 >= a5)
    {
      v20 = &a3[a5];
      v21 = a1[1];
      v25 = &v7[16 * a5];
      v26 = &v13[-16 * a5];
      v27 = v21;
      if (v26 >= v13)
      {
LABEL_22:
        a1[1] = v27;
        if (v21 != v25)
        {
          v29 = (v21 - v25) >> 4;
          v30 = v21 - 16;
          v31 = 16 * v29;
          v32 = (uint64_t)&v5[16 * v11 - 16];
          do
          {
            *(_OWORD *)v30 = *(_OWORD *)(v32 + v31);
            v30 -= 16;
            v31 -= 16;
          }
          while (v31);
        }
        if (v20 != a3)
        {
          v33 = v7;
          do
          {
            if (v9 != (__int128 *)v33)
              *(_OWORD *)v33 = *v9;
            ++v9;
            v33 += 16;
          }
          while (v9 != v20);
        }
        return v7;
      }
    }
    else
    {
      v20 = &a3[v19];
      v21 = a1[1];
      if (v20 != a4)
      {
        v22 = v20;
        v23 = a1[1];
        do
        {
          v24 = *v22++;
          *(_OWORD *)v23 = v24;
          v23 += 16;
          v21 += 16;
        }
        while (v22 != a4);
      }
      a1[1] = v21;
      if (v13 - v7 < 1)
        return v7;
      v25 = &v7[16 * a5];
      v26 = &v21[-16 * a5];
      v27 = v21;
      if (v26 >= v13)
        goto LABEL_22;
    }
    v27 = v21;
    do
    {
      v28 = *(_OWORD *)v26;
      v26 += 16;
      *(_OWORD *)v27 = v28;
      v27 += 16;
    }
    while (v26 < v13);
    goto LABEL_22;
  }
  v14 = a5 + ((v13 - v5) >> 4);
  if (v14 >> 60)
    sub_22316E078();
  v15 = v12 - v5;
  v16 = v15 >> 3;
  if (v15 >> 3 <= v14)
    v16 = v14;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
    v17 = 0xFFFFFFFFFFFFFFFLL;
  else
    v17 = v16;
  if (v17)
  {
    if (v17 >> 60)
      sub_223174E94();
    v18 = (char *)operator new(16 * v17);
  }
  else
  {
    v18 = 0;
  }
  v34 = &v18[16 * v11];
  v35 = 16 * a5;
  v36 = &v34[16 * a5];
  v37 = v34;
  do
  {
    v38 = *v9++;
    *(_OWORD *)v37 = v38;
    v37 += 16;
    v35 -= 16;
  }
  while (v35);
  v39 = *a1;
  v40 = v34;
  if (*a1 != v7)
  {
    v41 = v7;
    v40 = v34;
    do
    {
      *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
      v40 -= 16;
      v41 -= 16;
    }
    while (v41 != v39);
    v13 = a1[1];
  }
  for (i = &v18[16 * v17]; v7 != v13; v36 += 16)
  {
    v43 = *(_OWORD *)v7;
    v7 += 16;
    *(_OWORD *)v36 = v43;
  }
  v44 = *a1;
  *a1 = v40;
  a1[1] = v36;
  a1[2] = i;
  if (v44)
    operator delete(v44);
  return v34;
}

uint64_t sub_223EC9D94(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  BOOL v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  uint64_t *v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  int64_t v132;
  unsigned int *v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  uint64_t v140;
  unint64_t v141;
  unsigned int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  uint64_t v157;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v100 = *(a2 - 1);
        v101 = *v10;
        if (*(_QWORD *)(*(_QWORD *)(**a3 + 24 * v100) + 16 * *(unsigned int *)(*a3[1] + 4 * v100)) > *(_QWORD *)(*(_QWORD *)(**a3 + 24 * v101) + 16 * *(unsigned int *)(*a3[1] + 4 * v101)))
        {
          *v10 = v100;
          *(a2 - 1) = v101;
        }
        return result;
      case 3:
        v92 = **a3;
        v93 = *a3[1];
        v94 = *v10;
        v95 = v10[1];
        v96 = *(_QWORD *)(*(_QWORD *)(v92 + 24 * v95) + 16 * *(unsigned int *)(v93 + 4 * v95));
        v97 = *(_QWORD *)(v92 + 24 * v94);
        v98 = *(a2 - 1);
        v99 = *(_QWORD *)(*(_QWORD *)(v92 + 24 * v98) + 16 * *(unsigned int *)(v93 + 4 * v98));
        if (v96 <= *(_QWORD *)(v97 + 16 * *(unsigned int *)(v93 + 4 * v94)))
        {
          if (v99 > v96)
          {
            v10[1] = v98;
            *(a2 - 1) = v95;
            v149 = *v10;
            v148 = v10[1];
            if (*(_QWORD *)(*(_QWORD *)(v92 + 24 * v148) + 16 * *(unsigned int *)(v93 + 4 * v148)) > *(_QWORD *)(*(_QWORD *)(v92 + 24 * v149) + 16 * *(unsigned int *)(v93 + 4 * v149)))
            {
              *v10 = v148;
              v10[1] = v149;
            }
          }
        }
        else if (v99 <= v96)
        {
          *v10 = v95;
          v10[1] = v94;
          v157 = *(a2 - 1);
          if (*(_QWORD *)(*(_QWORD *)(v92 + 24 * v157) + 16 * *(unsigned int *)(v93 + 4 * v157)) > *(_QWORD *)(v97 + 16 * *(unsigned int *)(v93 + 4 * v94)))
          {
            v10[1] = v157;
            *(a2 - 1) = v94;
          }
        }
        else
        {
          *v10 = v98;
          *(a2 - 1) = v94;
        }
        return result;
      case 4:
        return (uint64_t)sub_223ECB064(v10, v10 + 1, v10 + 2, a2 - 1, **a3, *a3[1]);
      case 5:
        return (uint64_t)sub_223ECB250(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v113 = (unint64_t)(v12 - 2) >> 1;
              result = (uint64_t)*a3;
              v114 = v113;
              do
              {
                v115 = v114;
                if (v113 >= v114)
                {
                  v116 = a3[1];
                  v117 = (2 * v114) | 1;
                  v118 = &v10[v117];
                  v119 = *v118;
                  if (2 * v115 + 2 >= v12)
                  {
                    v120 = *(_QWORD *)result;
                    v121 = *v116;
                  }
                  else
                  {
                    v120 = *(_QWORD *)result;
                    v121 = *v116;
                    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 24 * v119)
                                   + 16 * *(unsigned int *)(v121 + 4 * v119)) > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 24 * v118[1])
                                                                                            + 16
                                                                                            * *(unsigned int *)(v121 + 4 * v118[1])))
                    {
                      LODWORD(v119) = v118[1];
                      ++v118;
                      v117 = 2 * v115 + 2;
                    }
                  }
                  v122 = &v10[v115];
                  v123 = *v122;
                  v124 = *(_QWORD *)(v120 + 24 * v123);
                  if (*(_QWORD *)(*(_QWORD *)(v120 + 24 * v119)
                                 + 16 * *(unsigned int *)(v121 + 4 * v119)) <= *(_QWORD *)(v124 + 16 * *(unsigned int *)(v121 + 4 * v123)))
                  {
                    do
                    {
                      v125 = v118;
                      *v122 = v119;
                      if (v113 < v117)
                        break;
                      v126 = (2 * v117) | 1;
                      v118 = &v10[v126];
                      v117 = 2 * v117 + 2;
                      v119 = *v118;
                      if (v117 < v12)
                      {
                        if (*(_QWORD *)(*(_QWORD *)(v120 + 24 * v119)
                                       + 16 * *(unsigned int *)(v121 + 4 * v119)) <= *(_QWORD *)(*(_QWORD *)(v120 + 24 * v118[1])
                                                                                                 + 16
                                                                                                 * *(unsigned int *)(v121 + 4 * v118[1])))
                        {
                          v117 = v126;
                        }
                        else
                        {
                          LODWORD(v119) = v118[1];
                          ++v118;
                        }
                      }
                      else
                      {
                        v117 = v126;
                      }
                      v122 = v125;
                    }
                    while (*(_QWORD *)(*(_QWORD *)(v120 + 24 * v119)
                                      + 16 * *(unsigned int *)(v121 + 4 * v119)) <= *(_QWORD *)(v124 + 16 * *(unsigned int *)(v121 + 4 * v123)));
                    *v125 = v123;
                    result = (uint64_t)*a3;
                  }
                }
                v114 = v115 - 1;
              }
              while (v115);
              v127 = (unint64_t)v11 >> 2;
              do
              {
                if (v127 >= 2)
                {
                  v129 = 0;
                  v130 = *a3;
                  v131 = a3[1];
                  v132 = (unint64_t)(v127 - 2) >> 1;
                  v133 = v10;
                  v134 = *v10;
                  do
                  {
                    while (1)
                    {
                      v137 = &v133[v129];
                      v138 = v137[1];
                      v136 = v137 + 1;
                      v135 = v138;
                      result = (2 * v129) | 1;
                      v129 = 2 * v129 + 2;
                      if (v129 < v127)
                        break;
                      v129 = result;
                      *v133 = v135;
                      v133 = v136;
                      if (result > v132)
                        goto LABEL_150;
                    }
                    if (*(_QWORD *)(*(_QWORD *)(*v130 + 24 * v135)
                                   + 16 * *(unsigned int *)(*v131 + 4 * v135)) <= *(_QWORD *)(*(_QWORD *)(*v130 + 24 * v136[1])
                                                                                              + 16
                                                                                              * *(unsigned int *)(*v131 + 4 * v136[1])))
                    {
                      v129 = result;
                    }
                    else
                    {
                      LODWORD(v135) = v136[1];
                      ++v136;
                    }
                    *v133 = v135;
                    v133 = v136;
                  }
                  while (v129 <= v132);
LABEL_150:
                  v139 = a2 - 1;
                  if (v136 == a2 - 1)
                  {
                    *v136 = v134;
                  }
                  else
                  {
                    *v136 = *v139;
                    *v139 = v134;
                    v140 = (char *)v136 - (char *)v10 + 4;
                    if (v140 >= 5)
                    {
                      v141 = (((unint64_t)v140 >> 2) - 2) >> 1;
                      v142 = &v10[v141];
                      v143 = *v142;
                      v144 = *v131;
                      v145 = *v136;
                      v146 = *v130;
                      result = *(_QWORD *)(*(_QWORD *)(v146 + 24 * v143)
                                         + 16 * *(unsigned int *)(v144 + 4 * v143));
                      v147 = *(_QWORD *)(v146 + 24 * v145);
                      if (result > *(_QWORD *)(v147 + 16 * *(unsigned int *)(v144 + 4 * v145)))
                      {
                        do
                        {
                          result = (uint64_t)v142;
                          *v136 = v143;
                          if (!v141)
                            break;
                          v141 = (v141 - 1) >> 1;
                          v142 = &v10[v141];
                          v143 = *v142;
                          v136 = (unsigned int *)result;
                        }
                        while (*(_QWORD *)(*(_QWORD *)(v146 + 24 * v143)
                                          + 16 * *(unsigned int *)(v144 + 4 * v143)) > *(_QWORD *)(v147 + 16 * *(unsigned int *)(v144 + 4 * v145)));
                        *(_DWORD *)result = v145;
                      }
                    }
                  }
                }
                --a2;
              }
              while ((unint64_t)v127-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *a3[1];
          v17 = *(a2 - 1);
          v18 = *(_QWORD *)(*(_QWORD *)(v15 + 24 * v17) + 16 * *(unsigned int *)(v16 + 4 * v17));
          if ((unint64_t)v11 < 0x201)
          {
            v23 = *v10;
            v24 = *v14;
            v25 = *(_QWORD *)(*(_QWORD *)(v15 + 24 * v23) + 16 * *(unsigned int *)(v16 + 4 * v23));
            v26 = *(_QWORD *)(v15 + 24 * v24);
            if (v25 <= *(_QWORD *)(v26 + 16 * *(unsigned int *)(v16 + 4 * v24)))
            {
              if (v18 > v25)
              {
                *v10 = v17;
                *(a2 - 1) = v23;
                v29 = *v10;
                v30 = *v14;
                if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v29) + 16 * *(unsigned int *)(v16 + 4 * v29)) > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v30) + 16 * *(unsigned int *)(v16 + 4 * v30)))
                {
                  *v14 = v29;
                  *v10 = v30;
                  --a4;
                  v31 = v30;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v18 <= v25)
              {
                *v14 = v23;
                *v10 = v24;
                v44 = *(a2 - 1);
                if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v44) + 16 * *(unsigned int *)(v16 + 4 * v44)) <= *(_QWORD *)(v26 + 16 * *(unsigned int *)(v16 + 4 * v24)))
                  goto LABEL_32;
                *v10 = v44;
              }
              else
              {
                *v14 = v17;
              }
              *(a2 - 1) = v24;
            }
LABEL_32:
            --a4;
            v31 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_54:
            v45 = *(_QWORD *)(v15 + 24 * v31);
            v46 = *(_QWORD *)(v45 + 16 * *(unsigned int *)(v16 + 4 * v31));
            if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * *(v10 - 1)) + 16 * *(unsigned int *)(v16 + 4 * *(v10 - 1))) > v46)
              goto LABEL_55;
            if (v46 <= *(_QWORD *)(*(_QWORD *)(v15 + 24 * *(a2 - 1)) + 16
                                                                        * *(unsigned int *)(v16 + 4 * *(a2 - 1))))
            {
              v83 = v10 + 1;
              do
              {
                v10 = v83;
                if (v83 >= a2)
                  break;
                ++v83;
              }
              while (v46 <= *(_QWORD *)(*(_QWORD *)(v15 + 24 * *v10) + 16 * *(unsigned int *)(v16 + 4 * *v10)));
            }
            else
            {
              do
              {
                v82 = v10[1];
                ++v10;
              }
              while (v46 <= *(_QWORD *)(*(_QWORD *)(v15 + 24 * v82) + 16 * *(unsigned int *)(v16 + 4 * v82)));
            }
            v84 = a2;
            if (v10 < a2)
            {
              v84 = a2;
              do
                v85 = *--v84;
              while (v46 > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v85) + 16 * *(unsigned int *)(v16 + 4 * v85)));
            }
            if (v10 < v84)
            {
              v86 = *v10;
              v87 = *v84;
              do
              {
                *v10 = v87;
                *v84 = v86;
                v88 = *(_QWORD *)(v45 + 16 * *(unsigned int *)(v16 + 4 * v31));
                do
                {
                  v89 = v10[1];
                  ++v10;
                  v86 = v89;
                }
                while (v88 <= *(_QWORD *)(*(_QWORD *)(v15 + 24 * v89) + 16 * *(unsigned int *)(v16 + 4 * v89)));
                do
                {
                  v90 = *--v84;
                  v87 = v90;
                }
                while (v88 > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v90) + 16 * *(unsigned int *)(v16 + 4 * v90)));
              }
              while (v10 < v84);
            }
            v91 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v91;
            a5 = 0;
            *v91 = v31;
            continue;
          }
          v19 = *v14;
          v20 = *v10;
          v21 = *(_QWORD *)(*(_QWORD *)(v15 + 24 * v19) + 16 * *(unsigned int *)(v16 + 4 * v19));
          v22 = *(_QWORD *)(v15 + 24 * v20);
          if (v21 <= *(_QWORD *)(v22 + 16 * *(unsigned int *)(v16 + 4 * v20)))
          {
            if (v18 > v21)
            {
              *v14 = v17;
              *(a2 - 1) = v19;
              v27 = *v14;
              v28 = *v10;
              if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v27) + 16 * *(unsigned int *)(v16 + 4 * v27)) > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v28) + 16 * *(unsigned int *)(v16 + 4 * v28)))
              {
                *v10 = v27;
                *v14 = v28;
              }
            }
          }
          else
          {
            if (v18 <= v21)
            {
              *v10 = v19;
              *v14 = v20;
              v32 = *(a2 - 1);
              if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v32) + 16 * *(unsigned int *)(v16 + 4 * v32)) <= *(_QWORD *)(v22 + 16 * *(unsigned int *)(v16 + 4 * v20)))
                goto LABEL_23;
              *v14 = v32;
            }
            else
            {
              *v10 = v17;
            }
            *(a2 - 1) = v20;
          }
LABEL_23:
          v33 = &v10[v13];
          v36 = *(v33 - 1);
          v34 = v33 - 1;
          v35 = v36;
          v37 = v10[1];
          v38 = *(_QWORD *)(*(_QWORD *)(v15 + 24 * v36) + 16 * *(unsigned int *)(v16 + 4 * v36));
          v39 = *(_QWORD *)(v15 + 24 * v37);
          v40 = *(a2 - 2);
          v41 = *(_QWORD *)(*(_QWORD *)(v15 + 24 * v40) + 16 * *(unsigned int *)(v16 + 4 * v40));
          if (v38 <= *(_QWORD *)(v39 + 16 * *(unsigned int *)(v16 + 4 * v37)))
          {
            if (v41 > v38)
            {
              *v34 = v40;
              *(a2 - 2) = v35;
              v42 = *v34;
              v43 = v10[1];
              if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v42) + 16 * *(unsigned int *)(v16 + 4 * v42)) > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v43) + 16 * *(unsigned int *)(v16 + 4 * v43)))
              {
                v10[1] = v42;
                *v34 = v43;
              }
            }
          }
          else
          {
            if (v41 <= v38)
            {
              v10[1] = v35;
              *v34 = v37;
              v47 = *(a2 - 2);
              if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v47) + 16 * *(unsigned int *)(v16 + 4 * v47)) <= *(_QWORD *)(v39 + 16 * *(unsigned int *)(v16 + 4 * v37)))
                goto LABEL_37;
              *v34 = v47;
            }
            else
            {
              v10[1] = v40;
            }
            *(a2 - 2) = v37;
          }
LABEL_37:
          v48 = &v10[v13];
          v51 = v48[1];
          v49 = v48 + 1;
          v50 = v51;
          v52 = v10[2];
          v53 = *(_QWORD *)(*(_QWORD *)(v15 + 24 * v51) + 16 * *(unsigned int *)(v16 + 4 * v51));
          v54 = *(_QWORD *)(v15 + 24 * v52);
          v55 = *(a2 - 3);
          v56 = *(_QWORD *)(*(_QWORD *)(v15 + 24 * v55) + 16 * *(unsigned int *)(v16 + 4 * v55));
          if (v53 <= *(_QWORD *)(v54 + 16 * *(unsigned int *)(v16 + 4 * v52)))
          {
            if (v56 > v53)
            {
              *v49 = v55;
              *(a2 - 3) = v50;
              v57 = *v49;
              v58 = v10[2];
              if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v57) + 16 * *(unsigned int *)(v16 + 4 * v57)) > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v58) + 16 * *(unsigned int *)(v16 + 4 * v58)))
              {
                v10[2] = v57;
                *v49 = v58;
              }
            }
          }
          else
          {
            if (v56 <= v53)
            {
              v10[2] = v50;
              *v49 = v52;
              v59 = *(a2 - 3);
              if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v59) + 16 * *(unsigned int *)(v16 + 4 * v59)) <= *(_QWORD *)(v54 + 16 * *(unsigned int *)(v16 + 4 * v52)))
                goto LABEL_46;
              *v49 = v59;
            }
            else
            {
              v10[2] = v55;
            }
            *(a2 - 3) = v52;
          }
LABEL_46:
          v60 = *v14;
          v61 = *v34;
          result = *(_QWORD *)(*(_QWORD *)(v15 + 24 * v60) + 16 * *(unsigned int *)(v16 + 4 * v60));
          v62 = *(_QWORD *)(v15 + 24 * v61);
          v63 = *v49;
          v64 = *(_QWORD *)(v15 + 24 * v63);
          v65 = *(_QWORD *)(v64 + 16 * *(unsigned int *)(v16 + 4 * v63));
          if (result > *(_QWORD *)(v62 + 16 * *(unsigned int *)(v16 + 4 * v61)))
          {
            if (v65 <= result)
            {
              *v34 = v60;
              *v14 = v61;
              v34 = v14;
              LODWORD(v60) = v63;
              if (*(_QWORD *)(v64 + 16 * *(unsigned int *)(v16 + 4 * v63)) <= *(_QWORD *)(v62
                                                                                           + 16
                                                                                           * *(unsigned int *)(v16 + 4 * v61)))
              {
                LODWORD(v60) = v61;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v34 = v63;
            *v49 = v61;
            goto LABEL_53;
          }
          if (v65 <= result)
            goto LABEL_53;
          *v14 = v63;
          *v49 = v60;
          v49 = v14;
          LODWORD(v60) = v61;
          if (*(_QWORD *)(v64 + 16 * *(unsigned int *)(v16 + 4 * v63)) > *(_QWORD *)(v62
                                                                                      + 16
                                                                                      * *(unsigned int *)(v16 + 4 * v61)))
            goto LABEL_52;
          LODWORD(v60) = v63;
LABEL_53:
          v66 = *v10;
          *v10 = v60;
          *v14 = v66;
          --a4;
          v31 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_54;
LABEL_33:
          v45 = *(_QWORD *)(v15 + 24 * v31);
          v46 = *(_QWORD *)(v45 + 16 * *(unsigned int *)(v16 + 4 * v31));
LABEL_55:
          v67 = 0;
          do
            v68 = v10[++v67];
          while (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v68) + 16 * *(unsigned int *)(v16 + 4 * v68)) > v46);
          v69 = &v10[v67];
          v70 = a2;
          if (v67 == 1)
          {
            v70 = a2;
            do
            {
              if (v69 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v72) + 16 * *(unsigned int *)(v16 + 4 * v72)) <= v46);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v71) + 16 * *(unsigned int *)(v16 + 4 * v71)) <= v46);
          }
          if (v69 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = v69;
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              v77 = *(_QWORD *)(v45 + 16 * *(unsigned int *)(v16 + 4 * v31));
              do
              {
                v78 = v75[1];
                ++v75;
                v74 = v78;
              }
              while (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v78) + 16 * *(unsigned int *)(v16 + 4 * v78)) > v77);
              do
              {
                v79 = *--v76;
                v73 = v79;
              }
              while (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v79) + 16 * *(unsigned int *)(v16 + 4 * v79)) <= v77);
            }
            while (v75 < v76);
            v80 = v75 - 1;
            if (v75 - 1 == v10)
              goto LABEL_73;
LABEL_72:
            *v10 = *v80;
            goto LABEL_73;
          }
          v80 = v69 - 1;
          if (v69 - 1 != v10)
            goto LABEL_72;
LABEL_73:
          *v80 = v31;
          if (v69 < v70)
            goto LABEL_76;
          v81 = sub_223ECAC6C(v10, v80, a3);
          v10 = v80 + 1;
          result = sub_223ECAC6C(v80 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v81)
              continue;
LABEL_76:
            result = sub_223EC9D94(v9, v80, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v80 + 1;
            continue;
          }
          a2 = v80;
          if (v81)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v102 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v103 = **a3;
              v104 = *a3[1];
              v105 = 4;
              v106 = v10;
              do
              {
                v109 = *v106;
                v108 = v106[1];
                v106 = v102;
                v110 = *(_QWORD *)(v103 + 24 * v108);
                result = *(_QWORD *)(v103 + 24 * v109);
                if (*(_QWORD *)(v110 + 16 * *(unsigned int *)(v104 + 4 * v108)) > *(_QWORD *)(result + 16 * *(unsigned int *)(v104 + 4 * v109)))
                {
                  v111 = v105;
                  do
                  {
                    *(unsigned int *)((char *)v10 + v111) = v109;
                    v112 = v111 - 4;
                    if (v111 == 4)
                    {
                      v107 = v10;
                      goto LABEL_112;
                    }
                    result = *(_QWORD *)(v110 + 16 * *(unsigned int *)(v104 + 4 * v108));
                    v109 = *(unsigned int *)((char *)v10 + v111 - 8);
                    v111 -= 4;
                  }
                  while (result > *(_QWORD *)(*(_QWORD *)(v103 + 24 * v109)
                                             + 16 * *(unsigned int *)(v104 + 4 * v109)));
                  v107 = (unsigned int *)((char *)v10 + v112);
LABEL_112:
                  *v107 = v108;
                }
                v102 = v106 + 1;
                v105 += 4;
              }
              while (v106 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v150 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v151 = **a3;
            v152 = *a3[1];
            do
            {
              v154 = *v9;
              v153 = v9[1];
              v9 = v150;
              v155 = *(_QWORD *)(v151 + 24 * v153);
              if (*(_QWORD *)(v155 + 16 * *(unsigned int *)(v152 + 4 * v153)) > *(_QWORD *)(*(_QWORD *)(v151 + 24 * v154) + 16 * *(unsigned int *)(v152 + 4 * v154)))
              {
                v156 = v9;
                do
                {
                  *v156 = v154;
                  v154 = *(v156 - 2);
                  --v156;
                }
                while (*(_QWORD *)(v155 + 16 * *(unsigned int *)(v152 + 4 * v153)) > *(_QWORD *)(*(_QWORD *)(v151 + 24 * v154)
                                                                                                  + 16 * *(unsigned int *)(v152 + 4 * v154)));
                *v156 = v153;
              }
              v150 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_223ECAC6C(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v26 = *(a2 - 1);
      v27 = *a1;
      if (*(_QWORD *)(*(_QWORD *)(**a3 + 24 * v26) + 16 * *(unsigned int *)(*a3[1] + 4 * v26)) <= *(_QWORD *)(*(_QWORD *)(**a3 + 24 * v27) + 16 * *(unsigned int *)(*a3[1] + 4 * v27)))
        return 1;
      *a1 = v26;
      *(a2 - 1) = v27;
      return 1;
    case 3:
      v4 = **a3;
      v5 = *a3[1];
      v6 = *a1;
      v7 = a1[1];
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 24 * v7) + 16 * *(unsigned int *)(v5 + 4 * v7));
      v9 = *(_QWORD *)(v4 + 24 * v6);
      v10 = *(a2 - 1);
      v11 = *(_QWORD *)(*(_QWORD *)(v4 + 24 * v10) + 16 * *(unsigned int *)(v5 + 4 * v10));
      if (v8 <= *(_QWORD *)(v9 + 16 * *(unsigned int *)(v5 + 4 * v6)))
      {
        if (v11 <= v8)
          return 1;
        a1[1] = v10;
        *(a2 - 1) = v7;
        v29 = *a1;
        v28 = a1[1];
        if (*(_QWORD *)(*(_QWORD *)(v4 + 24 * v28) + 16 * *(unsigned int *)(v5 + 4 * v28)) <= *(_QWORD *)(*(_QWORD *)(v4 + 24 * v29) + 16 * *(unsigned int *)(v5 + 4 * v29)))
          return 1;
        *a1 = v28;
        a1[1] = v29;
        return 1;
      }
      else
      {
        if (v11 > v8)
        {
          *a1 = v10;
          *(a2 - 1) = v6;
          return 1;
        }
        *a1 = v7;
        a1[1] = v6;
        v38 = *(a2 - 1);
        if (*(_QWORD *)(*(_QWORD *)(v4 + 24 * v38) + 16 * *(unsigned int *)(v5 + 4 * v38)) <= *(_QWORD *)(v9 + 16 * *(unsigned int *)(v5 + 4 * v6)))
          return 1;
        a1[1] = v38;
        *(a2 - 1) = v6;
        return 1;
      }
    case 4:
      sub_223ECB064(a1, a1 + 1, a1 + 2, a2 - 1, **a3, *a3[1]);
      return 1;
    case 5:
      sub_223ECB250(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v12 = a1 + 2;
      v13 = a1[2];
      v14 = a1[1];
      v15 = **a3;
      v16 = *a3[1];
      v17 = *(_QWORD *)(*(_QWORD *)(v15 + 24 * v14) + 16 * *(unsigned int *)(v16 + 4 * v14));
      v18 = *a1;
      v19 = *(_QWORD *)(v15 + 24 * v18);
      v20 = *(_QWORD *)(v15 + 24 * v13);
      v21 = *(_QWORD *)(v20 + 16 * *(unsigned int *)(v16 + 4 * v13));
      if (v17 <= *(_QWORD *)(v19 + 16 * *(unsigned int *)(v16 + 4 * v18)))
      {
        if (v21 <= v17)
          goto LABEL_21;
        a1[1] = v13;
        *v12 = v14;
        v24 = *(_QWORD *)(v20 + 16 * *(unsigned int *)(v16 + 4 * v13));
        v25 = *(_QWORD *)(v19 + 16 * *(unsigned int *)(v16 + 4 * v18));
        v22 = a1;
        v23 = a1 + 1;
      }
      else
      {
        v22 = a1;
        v23 = a1 + 2;
        if (v21 > v17)
          goto LABEL_20;
        *a1 = v14;
        a1[1] = v18;
        v24 = *(_QWORD *)(v20 + 16 * *(unsigned int *)(v16 + 4 * v13));
        v25 = *(_QWORD *)(v19 + 16 * *(unsigned int *)(v16 + 4 * v18));
        v22 = a1 + 1;
        v23 = a1 + 2;
      }
      if (v24 <= v25)
        goto LABEL_21;
LABEL_20:
      *v22 = v13;
      *v23 = v18;
LABEL_21:
      v30 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v31 = 0;
      for (i = 12; ; i += 4)
      {
        v33 = *v30;
        v34 = *v12;
        v35 = *(_QWORD *)(v15 + 24 * v33);
        if (*(_QWORD *)(v35 + 16 * *(unsigned int *)(v16 + 4 * v33)) > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v34) + 16 * *(unsigned int *)(v16 + 4 * v34)))
          break;
LABEL_30:
        v12 = v30++;
        if (v30 == a2)
          return 1;
      }
      v36 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v36) = v34;
        v37 = v36 - 4;
        if (v36 == 4)
        {
          *a1 = v33;
          if (++v31 != 8)
            goto LABEL_30;
          return v30 + 1 == a2;
        }
        v34 = *(unsigned int *)((char *)a1 + v36 - 8);
        v36 -= 4;
      }
      while (*(_QWORD *)(v35 + 16 * *(unsigned int *)(v16 + 4 * v33)) > *(_QWORD *)(*(_QWORD *)(v15
                                                                                                 + 24
                                                                                                 * v34)
                                                                                     + 16
                                                                                     * *(unsigned int *)(v16 + 4 * v34)));
      *(unsigned int *)((char *)a1 + v37) = v33;
      if (++v31 != 8)
        goto LABEL_30;
      return v30 + 1 == a2;
  }
}

unsigned int *sub_223ECB064(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a2;
  v7 = *result;
  v8 = *(_QWORD *)(*(_QWORD *)(a5 + 24 * v6) + 16 * *(unsigned int *)(a6 + 4 * v6));
  v9 = *(_QWORD *)(a5 + 24 * v7);
  v10 = *a3;
  v11 = *(_QWORD *)(*(_QWORD *)(a5 + 24 * v10) + 16 * *(unsigned int *)(a6 + 4 * v10));
  if (v8 <= *(_QWORD *)(v9 + 16 * *(unsigned int *)(a6 + 4 * v7)))
  {
    if (v11 <= v8)
    {
      v7 = *a3;
      goto LABEL_14;
    }
    *a2 = v10;
    *a3 = v6;
    v12 = *a2;
    v13 = *result;
    if (*(_QWORD *)(*(_QWORD *)(a5 + 24 * v12) + 16 * *(unsigned int *)(a6 + 4 * v12)) <= *(_QWORD *)(*(_QWORD *)(a5 + 24 * v13) + 16 * *(unsigned int *)(a6 + 4 * v13)))
    {
      v7 = v6;
      v10 = v6;
      goto LABEL_14;
    }
    *result = v12;
    *a2 = v13;
    v7 = *a3;
  }
  else
  {
    if (v11 <= v8)
    {
      *result = v6;
      *a2 = v7;
      v10 = *a3;
      if (*(_QWORD *)(*(_QWORD *)(a5 + 24 * v10) + 16 * *(unsigned int *)(a6 + 4 * v10)) <= *(_QWORD *)(v9 + 16 * *(unsigned int *)(a6 + 4 * v7)))
      {
        v7 = *a3;
        goto LABEL_14;
      }
      *a2 = v10;
    }
    else
    {
      *result = v10;
    }
    *a3 = v7;
  }
  v10 = v7;
LABEL_14:
  v14 = *a4;
  if (*(_QWORD *)(*(_QWORD *)(a5 + 24 * v14) + 16 * *(unsigned int *)(a6 + 4 * v14)) > *(_QWORD *)(*(_QWORD *)(a5 + 24 * v7) + 16 * *(unsigned int *)(a6 + 4 * v7)))
  {
    *a3 = v14;
    *a4 = v10;
    v15 = *a3;
    v16 = *a2;
    if (*(_QWORD *)(*(_QWORD *)(a5 + 24 * v15) + 16 * *(unsigned int *)(a6 + 4 * v15)) > *(_QWORD *)(*(_QWORD *)(a5 + 24 * v16) + 16 * *(unsigned int *)(a6 + 4 * v16)))
    {
      *a2 = v15;
      *a3 = v16;
      v17 = *a2;
      v18 = *result;
      if (*(_QWORD *)(*(_QWORD *)(a5 + 24 * v17) + 16 * *(unsigned int *)(a6 + 4 * v17)) > *(_QWORD *)(*(_QWORD *)(a5 + 24 * v18) + 16 * *(unsigned int *)(a6 + 4 * v18)))
      {
        *result = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

unsigned int *sub_223ECB250(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _DWORD *a5, uint64_t **a6)
{
  unsigned int *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = sub_223ECB064(a1, a2, a3, a4, **a6, *a6[1]);
  v13 = *a5;
  v14 = *a4;
  v15 = **a6;
  v16 = *a6[1];
  if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v13) + 16 * *(unsigned int *)(v16 + 4 * v13)) > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v14) + 16 * *(unsigned int *)(v16 + 4 * v14)))
  {
    *a4 = v13;
    *a5 = v14;
    v17 = *a4;
    v18 = *a3;
    if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v17) + 16 * *(unsigned int *)(v16 + 4 * v17)) > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v18) + 16 * *(unsigned int *)(v16 + 4 * v18)))
    {
      *a3 = v17;
      *a4 = v18;
      v19 = *a3;
      v20 = *a2;
      if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v19) + 16 * *(unsigned int *)(v16 + 4 * v19)) > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v20) + 16 * *(unsigned int *)(v16 + 4 * v20)))
      {
        *a2 = v19;
        *a3 = v20;
        v21 = *a2;
        v22 = *a1;
        if (*(_QWORD *)(*(_QWORD *)(v15 + 24 * v21) + 16 * *(unsigned int *)(v16 + 4 * v21)) > *(_QWORD *)(*(_QWORD *)(v15 + 24 * v22) + 16 * *(unsigned int *)(v16 + 4 * v22)))
        {
          *a1 = v21;
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

void sub_223ECB3BC(double **a1, uint64_t a2, unint64_t a3, double *a4)
{
  double *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  double *v23;
  double *v24;
  double *v25;
  __int128 v26;
  int64_t v27;
  unint64_t v28;
  char *v29;
  double *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  const double *v34;
  unint64_t v35;
  const double *v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v40;
  int64x2_t *v42;
  unint64_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  char *v48;
  uint64_t v49;
  double *v50;
  char *v51;
  double *v52;
  double *v53;
  char *i;
  __int128 v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  uint64_t v61;
  const double *v62;
  double *v63;
  float64x2x2_t v64;
  float64x2x2_t v65;

  if (!a3)
    return;
  v7 = *a1;
  v8 = a1[1];
  v9 = a2 - (_QWORD)*a1;
  v10 = v9 >> 4;
  v11 = (double *)((char *)*a1 + (v9 & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[2];
  if (a3 <= ((char *)v12 - (char *)v8) >> 4)
  {
    v18 = ((char *)v8 - (char *)v11) >> 4;
    v19 = 16 * a3;
    if (a3 <= v18)
    {
      v21 = (char *)a1[1];
      v18 = a3;
      v22 = (char *)&v11[(unint64_t)v19 / 8];
      v23 = &v8[v19 / 0xFFFFFFFFFFFFFFF8];
      v24 = (double *)v21;
      if (v23 >= v8)
        goto LABEL_21;
    }
    else
    {
      v20 = 0;
      v21 = (char *)&v8[2 * (a3 - v18)];
      do
      {
        *(_OWORD *)&v8[v20 / 8] = *(_OWORD *)a4;
        v20 += 16;
      }
      while (v19 - 16 * v18 != v20);
      a1[1] = (double *)v21;
      if (v8 == v11)
        return;
      v22 = (char *)&v11[(unint64_t)v19 / 8];
      v23 = (double *)&v21[-v19];
      v24 = &v8[2 * (a3 - v18)];
      if (v23 >= v8)
      {
LABEL_21:
        a1[1] = v24;
        if (v21 != v22)
        {
          v27 = v21 - v22;
          v28 = v21 - v22 - 16;
          if (v28 >= 0xD0
            && (&v21[-(v27 & 0xFFFFFFFFFFFFFFF0)] >= (char *)v23
             || (char *)v7 + v27 + (v9 & 0xFFFFFFFFFFFFFFF0) - (v27 & 0xFFFFFFFFFFFFFFF0) >= v21))
          {
            v57 = (v28 >> 4) + 1;
            v58 = 16 * (v57 & 0x1FFFFFFFFFFFFFFCLL);
            v29 = &v21[-v58];
            v30 = &v23[v58 / 0xFFFFFFFFFFFFFFF8];
            v59 = v23 - 4;
            v60 = (double *)(v21 - 32);
            v61 = v57 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v64 = vld2q_f64(v59);
              v62 = v59 - 4;
              v65 = vld2q_f64(v62);
              vst2q_f64(v60, v64);
              v63 = v60 - 4;
              vst2q_f64(v63, v65);
              v59 -= 8;
              v60 -= 8;
              v61 -= 4;
            }
            while (v61);
            if (v57 == (v57 & 0x1FFFFFFFFFFFFFFCLL))
              goto LABEL_28;
          }
          else
          {
            v29 = v21;
            v30 = v23;
          }
          v31 = v29 - 8;
          do
          {
            v32 = *((_QWORD *)v30 - 2);
            v30 -= 2;
            *((_QWORD *)v31 - 1) = v32;
            *(double *)v31 = v30[1];
            v31 -= 16;
          }
          while (v30 != v11);
        }
LABEL_28:
        if (v24 <= a4)
          v33 = 0;
        else
          v33 = a3;
        if (v11 > a4)
          v33 = 0;
        v34 = &a4[2 * v33];
        if (v18 >= 0xE)
        {
          v36 = v34 + 1;
          v37 = v9 & 0xFFFFFFFFFFFFFFF0;
          v38 = (unint64_t)&v7[2 * v18] + v37;
          v40 = (double *)((char *)v7 + v37 + 8) < v34 + 2 && (unint64_t)v36 < v38;
          if ((unint64_t)v34 >= v38 - 8 || v11 >= v36)
          {
            if (v40)
            {
              v35 = v18;
            }
            else
            {
              v11 += 2 * (v18 & 0xFFFFFFFFFFFFFFFCLL);
              v35 = v18 & 3;
              v42 = (int64x2_t *)&v7[2 * v10 + 4];
              v43 = v18 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v44 = (int64x2_t)vld1q_dup_f64(v34);
                v45 = (int64x2_t)vld1q_dup_f64(v36);
                v46 = vzip1q_s64(v44, v45);
                v47 = vzip2q_s64(v44, v45);
                v42[-2] = v46;
                v42[-1] = v47;
                *v42 = v46;
                v42[1] = v47;
                v42 += 4;
                v43 -= 4;
              }
              while (v43);
              if (v18 == (v18 & 0xFFFFFFFFFFFFFFFCLL))
                return;
            }
          }
          else
          {
            v35 = v18;
          }
        }
        else
        {
          v35 = v18;
        }
        do
        {
          *(_OWORD *)v11 = *(_OWORD *)v34;
          v11 += 2;
          --v35;
        }
        while (v35);
        return;
      }
    }
    v25 = v23;
    v24 = (double *)v21;
    do
    {
      v26 = *(_OWORD *)v25;
      v25 += 2;
      *(_OWORD *)v24 = v26;
      v24 += 2;
    }
    while (v25 < v8);
    goto LABEL_21;
  }
  v13 = a3 + (((char *)v8 - (char *)v7) >> 4);
  if (v13 >> 60)
    sub_2236EA0B4();
  v14 = (char *)v12 - (char *)v7;
  v15 = v14 >> 3;
  if (v14 >> 3 <= v13)
    v15 = v13;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
    v16 = 0xFFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 >> 60)
      sub_223174E94();
    v17 = (char *)operator new(16 * v16);
  }
  else
  {
    v17 = 0;
  }
  v48 = &v17[16 * v10];
  v49 = 16 * a3;
  v50 = (double *)&v48[16 * a3];
  v51 = v48;
  do
  {
    *(_OWORD *)v51 = *(_OWORD *)a4;
    v51 += 16;
    v49 -= 16;
  }
  while (v49);
  v52 = *a1;
  if (*a1 != v11)
  {
    v53 = v11;
    do
    {
      *((_OWORD *)v48 - 1) = *((_OWORD *)v53 - 1);
      v48 -= 16;
      v53 -= 2;
    }
    while (v53 != v52);
    v8 = a1[1];
  }
  for (i = &v17[16 * v16]; v11 != v8; v50 += 2)
  {
    v55 = *(_OWORD *)v11;
    v11 += 2;
    *(_OWORD *)v50 = v55;
  }
  v56 = *a1;
  *a1 = (double *)v48;
  a1[1] = v50;
  a1[2] = (double *)i;
  if (v56)
    operator delete(v56);
}

__int16 **sub_223ECB71C(__int16 **a1, uint64_t a2)
{
  __int16 *v3;
  __int16 *v4;
  __int16 v5;
  __int16 v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint64_t v18;
  __int16 *v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int v28;
  int v29;
  int v30;
  float v31;
  int v32;
  int v33;
  __int16 v34;
  __int16 v35;
  int v36;
  int16x8x4_t v38;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(__int16 **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = *v4;
    v6 = *(v3 - 4) + 1;
  }
  a1[4] = 0;
  *((_WORD *)a1 + 12) = v5;
  *((_WORD *)a1 + 13) = v6;
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  *((_BYTE *)a1 + 72) = 0;
  *((_BYTE *)a1 + 80) = 0;
  a1[8] = (__int16 *)0x800080007FFF7FFFLL;
  if (v4 != v3)
  {
    v7 = (char *)v3 - (char *)v4 - 8;
    if (v7 >= 0x40)
    {
      v13 = (v7 >> 3) + 1;
      v14 = v13 & 7;
      if ((v13 & 7) == 0)
        v14 = 8;
      v15 = 0uLL;
      v16.i64[0] = 0x8000800080008000;
      v16.i64[1] = 0x8000800080008000;
      v17.i64[0] = 0x8000800080008000;
      v17.i64[1] = 0x8000800080008000;
      v18 = v13 - v14;
      v19 = &v4[4 * v18];
      v20.i64[0] = 0x100000001;
      v20.i64[1] = 0x100000001;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      do
      {
        v38 = vld4q_s16(v4);
        v4 += 32;
        v26 = vaddq_s32(vsubl_s16(*(int16x4_t *)v38.val[2].i8, *(int16x4_t *)v38.val[1].i8), v20);
        v27 = vaddq_s32(vsubl_high_s16(v38.val[2], v38.val[1]), v20);
        v25 = vaddq_s32(v27, v25);
        v24 = vaddq_s32(v26, v24);
        v21 = vmlaq_s32(v21, v27, vmovl_high_s16(v38.val[0]));
        v15 = vmlaq_s32(v15, v26, vmovl_s16(*(int16x4_t *)v38.val[0].i8));
        v23 = vmlaq_s32(v23, v27, vaddl_high_s16(v38.val[2], v38.val[1]));
        v22 = vmlaq_s32(v22, v26, vaddl_s16(*(int16x4_t *)v38.val[2].i8, *(int16x4_t *)v38.val[1].i8));
        v17 = vminq_s16(v38.val[1], v17);
        v16 = vmaxq_s16(v16, v38.val[2]);
        v18 -= 8;
      }
      while (v18);
      v11 = vmaxvq_s16(v16);
      v12 = vminvq_s16(v17);
      v10 = vaddvq_s32(vaddq_s32(v24, v25));
      v9 = vaddvq_s32(vaddq_s32(v22, v23));
      v8 = vaddvq_s32(vaddq_s32(v15, v21));
      v4 = v19;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0x8000;
      v12 = 0x7FFF;
    }
    do
    {
      v28 = v4[1];
      v29 = v4[2];
      v30 = v29 - v28 + 1;
      v10 += v30;
      v8 += v30 * *v4;
      v9 += v30 * (v29 + v28);
      if (v28 < v12)
        v12 = v4[1];
      if (v11 <= v29)
        v11 = v4[2];
      v4 += 4;
    }
    while (v4 != v3);
    a1[7] = (__int16 *)v10;
    v31 = (float)v10 + (float)v10;
    if (!v10)
      v31 = 1.0;
    if (v10 <= 1)
      v32 = 1;
    else
      v32 = v10;
    *((_BYTE *)a1 + 80) = 1;
    *((float *)a1 + 18) = (float)v9 / v31;
    *((float *)a1 + 19) = (float)v8 / (float)v32;
    v33 = (__int16)(v6 - 1);
    if (v33 >= v5)
      v34 = v5;
    else
      v34 = v33;
    if (v5 <= v33)
      v5 = v33;
    v35 = v12;
    v36 = v11;
    if (v11 >= v12)
      v11 = v12;
    *((_WORD *)a1 + 32) = v11;
    if (v12 <= v36)
      v35 = v36;
    *((_WORD *)a1 + 34) = v35;
    *((_WORD *)a1 + 33) = v34;
    *((_WORD *)a1 + 35) = v5;
  }
  sub_223ECB9B8((unsigned __int16 **)a1);
  return a1;
}

void sub_223ECB978(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
    v6 = *(void **)v1;
    if (!*(_QWORD *)v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 8) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void sub_223ECB9B8(unsigned __int16 **a1)
{
  __int16 **v1;
  double **v2;
  unsigned __int16 *v3;
  unint64_t v4;
  double **v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  char *v11;
  __int16 *v12;
  unsigned __int16 *v13;
  __int16 *v14;
  int v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  double *v19;
  uint64_t v20;
  double **v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  __int16 **v32;
  double v33[2];

  v1 = (__int16 **)a1;
  v2 = (double **)(a1 + 4);
  v3 = a1[4];
  v4 = (*((__int16 *)a1 + 13) - *((__int16 *)a1 + 12));
  if (v4 > ((char *)a1[6] - (char *)v3) >> 4)
  {
    v5 = (double **)(a1 + 4);
    v6 = a1[5];
    v7 = 16 * v4;
    v8 = (char *)operator new(16 * v4);
    v9 = (unsigned __int16 *)&v8[((char *)v6 - (char *)v3) & 0xFFFFFFFFFFFFFFF0];
    v10 = v9;
    if (v6 != v3)
    {
      v11 = &v8[((char *)v6 - (char *)v3) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v10 = (unsigned __int16 *)(v11 - 16);
        *((_OWORD *)v11 - 1) = *((_OWORD *)v6 - 1);
        v6 -= 8;
        v11 -= 16;
      }
      while (v6 != v3);
    }
    v1[4] = (__int16 *)v10;
    v1[5] = (__int16 *)v9;
    v1[6] = (__int16 *)&v8[v7];
    v2 = v5;
    if (v3)
      operator delete(v3);
  }
  v12 = *v1;
  v13 = (unsigned __int16 *)v1[1];
  if (*v1 != (__int16 *)v13)
  {
    v14 = *v1;
    v32 = v1;
    while (1)
    {
      v15 = (unsigned __int16)*v12;
      while ((unsigned __int16)*v14 == v15)
      {
        v14 += 4;
        if (v14 == (__int16 *)v13)
        {
          v14 = (__int16 *)v13;
          break;
        }
      }
      v16 = ((char *)v12 - (char *)*v1) >> 3;
      *(_QWORD *)&v17 = ((char *)v14 - (char *)*v1) >> 3;
      v19 = (double *)v1[5];
      v18 = (unint64_t)v1[6];
      if ((unint64_t)v19 < v18)
      {
        *(_QWORD *)v19 = v16;
        v19[1] = v17;
        v20 = (uint64_t)(v19 + 2);
        goto LABEL_30;
      }
      v21 = v2;
      v22 = *v2;
      v23 = ((char *)v19 - (char *)*v2) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        sub_2236EA0B4();
      v25 = v18 - (_QWORD)v22;
      if (v25 >> 3 > v24)
        v24 = v25 >> 3;
      v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v24;
      if (v26)
        break;
      v27 = 0;
      v28 = (uint64_t *)(16 * v23);
      *v28 = v16;
      *((double *)v28 + 1) = v17;
      v29 = 16 * v23;
      v2 = v21;
      if (v19 != v22)
        goto LABEL_26;
LABEL_28:
      v30 = &v27[16 * v26];
      v20 = (uint64_t)(v28 + 2);
      v1 = v32;
      v32[4] = (__int16 *)v29;
      v32[5] = (__int16 *)(v28 + 2);
      v32[6] = (__int16 *)v30;
      if (v19)
        operator delete(v19);
LABEL_30:
      v1[5] = (__int16 *)v20;
      if (v14 == (__int16 *)v13)
        return;
      v31 = *v14 + (uint64_t)(__int16)~(_WORD)v15;
      v33[0] = v17;
      v33[1] = v17;
      sub_223ECB3BC(v2, v20, v31, v33);
      v12 = v14;
    }
    if (v26 >> 60)
      sub_223174E94();
    v27 = (char *)operator new(16 * v26);
    v28 = (uint64_t *)&v27[16 * v23];
    *v28 = v16;
    *((double *)v28 + 1) = v17;
    v29 = (uint64_t)v28;
    v2 = v21;
    if (v19 == v22)
      goto LABEL_28;
    do
    {
LABEL_26:
      *(_OWORD *)(v29 - 16) = *((_OWORD *)v19 - 1);
      v29 -= 16;
      v19 -= 2;
    }
    while (v19 != v22);
    v19 = *v2;
    goto LABEL_28;
  }
}

void sub_223ECBBF0(uint64_t a1, __int16 *a2)
{
  char *v4;
  char *v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  __int16 v29;
  char *v30;
  char *v31;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5 || (v6 = *a2, v7 = *((__int16 *)v5 - 4), v6 > v7))
  {
    v8 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v5 < v8)
    {
      *(_QWORD *)v5 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5 + 8;
      return;
    }
    v9 = (v5 - v4) >> 3;
    v10 = v9 + 1;
    if (!((unint64_t)(v9 + 1) >> 61))
    {
      v11 = v8 - (_QWORD)v4;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (!v12)
      {
        v13 = 0;
        goto LABEL_21;
      }
      if (!(v12 >> 61))
      {
        v13 = (char *)operator new(8 * v12);
LABEL_21:
        v17 = &v13[8 * v9];
        *(_QWORD *)v17 = *(_QWORD *)a2;
        v18 = v17 + 8;
        if (v4 != v5)
        {
          do
          {
            v19 = *((_DWORD *)v5 - 2);
            v5 -= 8;
            v20 = *((_WORD *)v5 + 2);
            *((_DWORD *)v17 - 2) = v19;
            v17 -= 8;
            *((_WORD *)v17 + 2) = v20;
          }
          while (v5 != v4);
          v4 = *(char **)a1;
        }
        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = &v13[8 * v12];
        if (v4)
          operator delete(v4);
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
LABEL_45:
      sub_223174E94();
    }
LABEL_44:
    sub_2236EA0B4();
  }
  if (v6 != v7)
    return;
  v14 = *((__int16 *)v5 - 2);
  if (v14 + 1 < a2[1])
  {
    v15 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v5 >= v15)
    {
      v21 = (v5 - v4) >> 3;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61)
        goto LABEL_44;
      v23 = v15 - (_QWORD)v4;
      if (v23 >> 2 > v22)
        v22 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 61)
          goto LABEL_45;
        v25 = (char *)operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * v21];
      *(_QWORD *)v26 = *(_QWORD *)a2;
      v27 = v26;
      do
      {
        v28 = *((_DWORD *)v5 - 2);
        v5 -= 8;
        v29 = *((_WORD *)v5 + 2);
        *((_DWORD *)v27 - 2) = v28;
        v27 -= 8;
        *((_WORD *)v27 + 2) = v29;
      }
      while (v5 != v4);
      v30 = &v25[8 * v24];
      v31 = *(char **)a1;
      v16 = v26 + 8;
      *(_QWORD *)a1 = v27;
      *(_QWORD *)(a1 + 8) = v26 + 8;
      *(_QWORD *)(a1 + 16) = v30;
      if (v31)
      {
        operator delete(v31);
        *(_QWORD *)(a1 + 8) = v16;
        return;
      }
    }
    else
    {
      *(_QWORD *)v5 = *(_QWORD *)a2;
      v16 = v5 + 8;
    }
    *(_QWORD *)(a1 + 8) = v16;
    return;
  }
  if ((__int16)v14 <= a2[2])
    LOWORD(v14) = a2[2];
  *((_WORD *)v5 - 2) = v14;
}

uint64_t sub_223ECBE34(uint64_t *a1)
{
  uint64_t v2;
  __int16 *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  _WORD *v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = *a1;
  v3 = (__int16 *)a1[1];
  v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (__int16 *)v2)
    v5 = 0;
  else
    v5 = v4;
  result = sub_223ECCF40(v2, v3, (uint64_t)&v25, v5, 1);
  v7 = a1[1] - *a1;
  if ((unint64_t)v7 >= 0x10)
  {
    v8 = 0;
    v9 = 0;
    v10 = v7 >> 3;
    v11 = 1;
    do
    {
      v13 = *a1;
      v14 = *a1 + v8;
      v16 = *(unsigned __int16 *)(v14 + 8);
      v15 = (int *)(v14 + 8);
      if (*(unsigned __int16 *)(*a1 + 8 * v9) == v16
        && (v17 = v13 + 8 * v9,
            v20 = *(__int16 *)(v17 + 4),
            v18 = (_WORD *)(v17 + 4),
            v19 = v20,
            v20 + 1 >= *(__int16 *)(*a1 + v8 + 10)))
      {
        v12 = *(__int16 *)(v13 + v8 + 12);
        if (v19 > v12)
          LOWORD(v12) = v19;
        *v18 = v12;
      }
      else
      {
        v21 = v9 + 1;
        v9 = v11;
        if (v11 != v21)
        {
          v22 = *v15;
          v23 = v13 + 8 * v21;
          *(_WORD *)(v23 + 4) = *((_WORD *)v15 + 2);
          *(_DWORD *)v23 = v22;
          v9 = v21;
        }
      }
      ++v11;
      v8 += 8;
    }
    while (v10 != v11);
    v24 = *a1 + 8 * v9 + 8;
    if (v24 != a1[1])
      a1[1] = v24;
  }
  return result;
}

void sub_223ECBF68(__int16 **a1@<X0>, unsigned __int16 **a2@<X1>, __int16 **a3@<X8>)
{
  __int16 *v5;
  __int16 *v6;
  unsigned __int16 *v7;
  __int16 *v8;
  unint64_t v9;
  int v10;
  char v11;
  int v12;
  int v13;
  int v14;
  char v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  _WORD *v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  int v29;
  char *v30;
  void *__p;
  void *v32;
  char *v33;
  void *v34;
  char *v35;
  char *v36;
  char **v37;
  char **i;

  if (a1 == (__int16 **)a2)
    goto LABEL_27;
  v5 = *a1;
  v6 = a1[1];
  if (v6 == *a1)
  {
    v16 = (uint64_t)a3;
    goto LABEL_28;
  }
  v7 = *a2;
  v8 = (__int16 *)a2[1];
  if (v8 == (__int16 *)*a2)
  {
LABEL_27:
    v16 = (uint64_t)a3;
    a2 = (unsigned __int16 **)a1;
LABEL_28:
    sub_2236EA2D0(v16, (uint64_t)a2);
    return;
  }
  v9 = (((char *)v6 - (char *)*a1) >> 3) + (((char *)v8 - (char *)*a2) >> 3);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  if (v9)
  {
    if (v9 >> 61)
      sub_2236EA0B4();
    v34 = operator new(8 * v9);
    v35 = (char *)v34;
    v36 = (char *)v34 + 8 * v9;
  }
  v37 = (char **)&v34;
  do
  {
    if (v7 == (unsigned __int16 *)v8)
    {
      i = v37;
      do
      {
        sub_223ECE778(&i, v5);
        v5 += 4;
      }
      while (v5 != v6);
      goto LABEL_32;
    }
    v10 = *v5;
    if ((__int16)*v7 >= v10)
      v11 = 1;
    else
      v11 = -1;
    if (*v7 == (unsigned __int16)v10)
    {
      v12 = v5[1];
      v11 = (__int16)v7[1] >= v12 ? 1 : -1;
      if (v7[1] == (unsigned __int16)v12)
      {
        v13 = v7[2];
        v14 = (unsigned __int16)v5[2];
        if ((__int16)v13 >= (__int16)v14)
          v15 = 1;
        else
          v15 = -1;
        if (v13 == v14)
          v11 = 0;
        else
          v11 = v15;
      }
    }
    if (v11 < 0)
    {
      sub_223ECE778(&v37, v7);
      v7 += 4;
    }
    else
    {
      sub_223ECE778(&v37, v5);
      v5 += 4;
    }
  }
  while (v5 != v6);
  for (i = v37; v7 != (unsigned __int16 *)v8; v7 += 4)
    sub_223ECE778(&i, v7);
LABEL_32:
  v18 = v34;
  v17 = v35;
  if ((unint64_t)(v35 - (_BYTE *)v34) >= 0x10)
  {
    v19 = 0;
    v20 = 0;
    v21 = (v35 - (_BYTE *)v34) >> 3;
    v22 = 1;
    do
    {
      if (*((unsigned __int16 *)v34 + 4 * v20) == *(unsigned __int16 *)((char *)v34 + v19 + 8)
        && (v24 = (char *)v34 + 8 * v20,
            v27 = *((__int16 *)v24 + 2),
            v25 = v24 + 4,
            v26 = v27,
            v27 + 1 >= *(__int16 *)((char *)v34 + v19 + 10)))
      {
        v23 = *(__int16 *)((char *)v34 + v19 + 12);
        if (v26 > v23)
          LOWORD(v23) = v26;
        *v25 = v23;
      }
      else
      {
        v28 = v20 + 1;
        v20 = v22;
        if (v22 != v28)
        {
          v29 = *(_DWORD *)((char *)v34 + v19 + 8);
          v30 = (char *)v34 + 8 * v28;
          *((_WORD *)v30 + 2) = *(_WORD *)((char *)v34 + v19 + 12);
          *(_DWORD *)v30 = v29;
          v20 = v28;
        }
      }
      ++v22;
      v19 += 8;
    }
    while (v21 != v22);
    v18 = v34;
    v17 = v35;
    if ((char *)v34 + 8 * v20 + 8 != v35)
    {
      v35 = (char *)v34 + 8 * v20 + 8;
      v17 = v35;
    }
  }
  __p = v18;
  v32 = v17;
  v33 = v36;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  sub_223ECB71C(a3, (uint64_t)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  if (v34)
  {
    v35 = (char *)v34;
    operator delete(v34);
  }
}

void sub_223ECC248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223ECC288(uint64_t result, uint64_t *a2, _QWORD **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = v4 - *(_QWORD *)result;
  if (v4 != *(_QWORD *)result)
  {
    v6 = *a2;
    if (a2[1] != *a2
      && *((__int16 *)a2 + 34) >= *(__int16 *)(result + 64)
      && *((__int16 *)a2 + 32) <= *(__int16 *)(result + 68)
      && *((__int16 *)a2 + 35) >= *(__int16 *)(result + 66)
      && *((__int16 *)a2 + 33) <= *(__int16 *)(result + 70))
    {
      v7 = *(_DWORD *)(result + 24);
      v8 = (__int16)v7;
      v9 = v7 >> 16;
      v10 = *((__int16 *)a2 + 12);
      if (v10 <= v8)
        v11 = v8;
      else
        v11 = *((__int16 *)a2 + 12);
      if (*((__int16 *)a2 + 13) < v9)
        v9 = *((__int16 *)a2 + 13);
      if (v11 != v9)
      {
        v12 = *(_QWORD *)(result + 32);
        v13 = (*(_QWORD *)(result + 40) - v12) >> 4;
        v14 = v5 >> 3;
        v15 = a2[4];
        v16 = (a2[5] - v15) >> 4;
        while (1)
        {
          v17 = (__int16)v11;
          v18 = ((__int16)v11 - v8);
          if (v17 - v8 >= 0)
            break;
          v19 = 0;
          v20 = 0;
          v22 = (v17 - v10);
          if (v17 - v10 >= 0)
            goto LABEL_22;
LABEL_15:
          LOWORD(v11) = v17 + 1;
          result = (unsigned __int16)(v17 + 1);
          if ((_DWORD)result == (unsigned __int16)v9)
            return result;
        }
        v19 = v14;
        v20 = v14;
        if (v13 > v18)
        {
          v21 = (uint64_t *)(v12 + 16 * v18);
          v19 = *v21;
          v20 = v21[1];
        }
        v22 = (v17 - v10);
        if (v17 - v10 < 0)
          goto LABEL_15;
LABEL_22:
        if (v16 > v22 && v19 != v20)
        {
          v23 = (uint64_t *)(v15 + 16 * v22);
          v25 = *v23;
          v24 = v23[1];
          if (*v23 != v24)
          {
            v26 = v3 + 8 * v19;
            v27 = v3 + 8 * v20;
            v28 = v6 + 8 * v24;
            v29 = *a3;
            v30 = v6 + 8 * v25;
            do
            {
              v31 = *(__int16 *)(v26 + 4);
              v32 = *(__int16 *)(v30 + 2);
              if (v31 >= v32)
              {
                v33 = *(__int16 *)(v30 + 4);
                v34 = *(__int16 *)(v26 + 2);
                if (v33 >= v34)
                {
                  if (v33 >= v31)
                    v35 = *(__int16 *)(v26 + 4);
                  else
                    v35 = *(__int16 *)(v30 + 4);
                  if (v34 > v32)
                    v32 = *(__int16 *)(v26 + 2);
                  *v29 = *v29 - v32 + v35 + 1;
                  v36 = v26 + 8;
                  if (v33 >= v31)
                    v26 += 8;
                  if (v31 < v33)
                    v26 = v36;
                  else
                    v30 += 8;
                }
                else
                {
                  v30 += 8;
                }
              }
              else
              {
                v26 += 8;
              }
            }
            while (v26 != v27 && v30 != v28);
          }
        }
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_223ECC454(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  _WORD *v37;
  void *v38;
  int v39;
  int v40;
  _WORD *v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v50;
  unsigned __int16 v51;
  int v52;
  unsigned __int16 v53;
  _WORD *v54;
  void *v55;
  uint64_t v56;
  _WORD *v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  __int16 v65;
  int v66;
  int v67;
  __int16 v68;
  _WORD *v69;
  void *v70;
  _WORD *v71;
  int64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int v78;
  __int16 v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  int v89;
  __int16 v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int16 v96;
  uint64_t v97;
  unsigned __int16 v98;
  void *__p[2];
  char *v100;
  void *v101[2];
  char *v102;
  char **i;

  v3 = a1;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (!v5)
    goto LABEL_6;
  v6 = a2;
  if (a2 == a1 || (v7 = *(_QWORD **)a1, (v8 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1) == 0))
  {
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_QWORD *)(a3 + 64) = 0x800080007FFF7FFFLL;
    return;
  }
  if (*(__int16 *)(a2 + 68) < *(__int16 *)(a1 + 64)
    || *(__int16 *)(a2 + 64) > *(__int16 *)(a1 + 68)
    || *(__int16 *)(a2 + 70) < *(__int16 *)(a1 + 66)
    || *(__int16 *)(a2 + 66) > *(__int16 *)(a1 + 70))
  {
LABEL_6:
    sub_2236EA2D0(a3, a1);
    return;
  }
  v9 = *(_DWORD *)(a1 + 24);
  if (*(__int16 *)(a2 + 24) <= (__int16)v9)
    v10 = *(_DWORD *)(a1 + 24);
  else
    v10 = *(_WORD *)(a2 + 24);
  if (*(__int16 *)(a2 + 26) >= v9 >> 16)
    v11 = v9 >> 16;
  else
    LOWORD(v11) = *(_WORD *)(a2 + 26);
  v96 = v11;
  v12 = v8 >> 3;
  v13 = (v8 >> 3) + (v5 >> 3);
  v101[0] = 0;
  v101[1] = 0;
  v102 = 0;
  if (v13)
  {
    if (v13 >> 61)
      sub_2236EA0B4();
    v101[0] = operator new(8 * v13);
    v101[1] = v101[0];
    v102 = (char *)v101[0] + 8 * v13;
  }
  v14 = ((__int16)v10 - (__int16)v9);
  if ((__int16)v10 - (__int16)v9 >= 0)
  {
    v15 = *(_QWORD *)(v3 + 32);
    if (v14 < (*(_QWORD *)(v3 + 40) - v15) >> 4)
      v12 = *(_QWORD *)(v15 + 16 * v14);
    i = (char **)v101;
    if (v12)
    {
      v16 = 8 * v12;
      do
      {
        sub_223ECE778(&i, v7++);
        v16 -= 8;
      }
      while (v16);
    }
  }
  if (v10 != v96)
  {
    v94 = v3;
    v95 = v6;
    v93 = a3;
    while (1)
    {
      v98 = v10;
      v21 = ((__int16)v10 - *(__int16 *)(v3 + 24));
      if ((v21 & 0x80000000) != 0)
      {
        v24 = 0;
        v25 = 0;
      }
      else
      {
        v22 = *(_QWORD *)(v3 + 32);
        if (v21 >= (*(_QWORD *)(v3 + 40) - v22) >> 4)
        {
          v24 = (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 3;
          v25 = v24;
        }
        else
        {
          v23 = (uint64_t *)(v22 + 16 * v21);
          v24 = *v23;
          v25 = v23[1];
        }
      }
      v26 = *(_QWORD *)v3 + 8 * v24;
      v27 = *(_QWORD *)v3 + 8 * v25;
      v28 = ((__int16)v10 - *(__int16 *)(v6 + 24));
      if ((v28 & 0x80000000) == 0)
      {
        v29 = *(_QWORD *)(v6 + 32);
        if (v28 < (*(_QWORD *)(v6 + 40) - v29) >> 4 && v24 != v25)
        {
          v30 = (uint64_t *)(v29 + 16 * v28);
          v31 = *v30;
          v32 = v30[1];
          if (v31 != v32)
          {
            v33 = *(_QWORD *)v6 + 8 * v32;
            v34 = *(_QWORD *)v6 + 8 * v31;
            v97 = v27;
            while (1)
            {
              v35 = *(__int16 *)(v26 + 4);
              v36 = *(__int16 *)(v34 + 2);
              if (v35 < v36)
                break;
              v39 = *(__int16 *)(v26 + 2);
              v40 = *(__int16 *)(v34 + 4);
              if (v40 >= v39)
              {
                v48 = *(unsigned __int16 *)(v26 + 4);
                if (v36 > v39 || v40 < (__int16)v35)
                {
                  v50 = v33;
                  v51 = *(_WORD *)(v26 + 2);
                  if (v34 != v33)
                  {
                    while (1)
                    {
                      v52 = *(__int16 *)(v34 + 2);
                      if (v52 > (__int16)v48)
                        break;
                      if (v52 > (__int16)v39)
                      {
                        v53 = v52 - 1;
                        v54 = v101[1];
                        if (v101[1] >= v102)
                        {
                          v56 = v33;
                          v57 = v101[0];
                          v58 = ((char *)v101[1] - (char *)v101[0]) >> 3;
                          v59 = v58 + 1;
                          if ((unint64_t)(v58 + 1) >> 61)
                            sub_2236EA0B4();
                          v60 = v102 - (char *)v101[0];
                          if ((v102 - (char *)v101[0]) >> 2 > v59)
                            v59 = v60 >> 2;
                          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
                            v61 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v61 = v59;
                          if (v61)
                          {
                            if (v61 >> 61)
                              sub_223174E94();
                            v62 = (char *)operator new(8 * v61);
                          }
                          else
                          {
                            v62 = 0;
                          }
                          v63 = &v62[8 * v58];
                          *(_QWORD *)v63 = ((unint64_t)(unsigned __int16)v39 << 16) | ((unint64_t)v53 << 32) | v98;
                          v55 = v63 + 8;
                          v33 = v56;
                          if (v54 != v57)
                          {
                            do
                            {
                              v64 = *((_DWORD *)v54 - 2);
                              v54 -= 4;
                              v65 = v54[2];
                              *((_DWORD *)v63 - 2) = v64;
                              v63 -= 8;
                              *((_WORD *)v63 + 2) = v65;
                            }
                            while (v54 != v57);
                            v54 = v101[0];
                          }
                          v27 = v97;
                          v101[0] = v63;
                          v101[1] = v55;
                          v102 = &v62[8 * v61];
                          if (v54)
                            operator delete(v54);
                        }
                        else
                        {
                          *(_QWORD *)v101[1] = ((unint64_t)(unsigned __int16)v39 << 16) | ((unint64_t)(unsigned __int16)(v52 - 1) << 32) | v98;
                          v55 = v54 + 4;
                        }
                        v101[1] = v55;
                      }
                      v66 = *(__int16 *)(v34 + 4);
                      LOWORD(v39) = v66 + 1;
                      if (v66 > (__int16)v48)
                        break;
                      v34 += 8;
                      if (v34 == v33)
                      {
                        v50 = v33;
                        goto LABEL_98;
                      }
                    }
                    v50 = v34;
LABEL_98:
                    v51 = v39;
                  }
                  if ((__int16)v51 <= (__int16)v48)
                  {
                    v69 = v101[1];
                    if (v101[1] >= v102)
                    {
                      v71 = v101[0];
                      v72 = ((char *)v101[1] - (char *)v101[0]) >> 3;
                      v73 = v72 + 1;
                      if ((unint64_t)(v72 + 1) >> 61)
                        sub_2236EA0B4();
                      v74 = v102 - (char *)v101[0];
                      if ((v102 - (char *)v101[0]) >> 2 > v73)
                        v73 = v74 >> 2;
                      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
                        v75 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v75 = v73;
                      if (v75)
                      {
                        if (v75 >> 61)
                          sub_223174E94();
                        v76 = (char *)operator new(8 * v75);
                      }
                      else
                      {
                        v76 = 0;
                      }
                      v77 = &v76[8 * v72];
                      *(_QWORD *)v77 = (v48 << 32) | ((unint64_t)v51 << 16) | v98;
                      v70 = v77 + 8;
                      if (v69 != v71)
                      {
                        do
                        {
                          v78 = *((_DWORD *)v69 - 2);
                          v69 -= 4;
                          v79 = v69[2];
                          *((_DWORD *)v77 - 2) = v78;
                          v77 -= 8;
                          *((_WORD *)v77 + 2) = v79;
                        }
                        while (v69 != v71);
                        v69 = v101[0];
                      }
                      v101[0] = v77;
                      v101[1] = v70;
                      v102 = &v76[8 * v75];
                      if (v69)
                        operator delete(v69);
                    }
                    else
                    {
                      *(_QWORD *)v101[1] = (v48 << 32) | ((unint64_t)v51 << 16) | v98;
                      v70 = v69 + 4;
                    }
                    v101[1] = v70;
                  }
                  v26 += 8;
                  v34 = v50;
                  a3 = v93;
                  if (v26 == v27)
                    goto LABEL_119;
                }
                else
                {
                  v26 += 8;
                  if (v26 == v27)
                    goto LABEL_119;
                }
              }
              else
              {
                v34 += 8;
                if (v26 == v27)
                  goto LABEL_119;
              }
LABEL_91:
              if (v34 == v33)
                goto LABEL_119;
            }
            v37 = v101[1];
            if (v101[1] < v102)
            {
              *(_QWORD *)v101[1] = *(_QWORD *)v26;
              v38 = v37 + 4;
              goto LABEL_59;
            }
            v41 = v101[0];
            v42 = ((char *)v101[1] - (char *)v101[0]) >> 3;
            v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 61)
              sub_2236EA0B4();
            v44 = v102 - (char *)v101[0];
            if ((v102 - (char *)v101[0]) >> 2 > v43)
              v43 = v44 >> 2;
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
              v45 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v45 = v43;
            if (v45)
            {
              if (v45 >> 61)
                sub_223174E94();
              v46 = (char *)operator new(8 * v45);
              v47 = &v46[8 * v42];
              *(_QWORD *)v47 = *(_QWORD *)v26;
              v38 = v47 + 8;
              if (v37 == v41)
              {
LABEL_57:
                v101[0] = v47;
                v101[1] = v38;
                v102 = &v46[8 * v45];
                if (!v37)
                  goto LABEL_59;
                goto LABEL_58;
              }
            }
            else
            {
              v46 = 0;
              v47 = (char *)(8 * v42);
              *(_QWORD *)(8 * v42) = *(_QWORD *)v26;
              v38 = (void *)(8 * v42 + 8);
              if (v37 == v41)
                goto LABEL_57;
            }
            do
            {
              v67 = *((_DWORD *)v37 - 2);
              v37 -= 4;
              v68 = v37[2];
              *((_DWORD *)v47 - 2) = v67;
              v47 -= 8;
              *((_WORD *)v47 + 2) = v68;
            }
            while (v37 != v41);
            v37 = v101[0];
            v101[0] = v47;
            v101[1] = v38;
            v102 = &v46[8 * v45];
            if (!v37)
            {
LABEL_59:
              v101[1] = v38;
              v26 += 8;
              if (v26 == v27)
                goto LABEL_119;
              goto LABEL_91;
            }
LABEL_58:
            operator delete(v37);
            goto LABEL_59;
          }
        }
      }
LABEL_119:
      v6 = v95;
      if (v26 != v27)
        break;
LABEL_31:
      v10 = v98 + 1;
      v3 = v94;
      if ((unsigned __int16)(v98 + 1) == v96)
        goto LABEL_27;
    }
    v80 = (char *)v101[1];
    while (v80 < v102)
    {
      *(_QWORD *)v80 = *(_QWORD *)v26;
      v81 = v80 + 8;
LABEL_122:
      v101[1] = v81;
      v26 += 8;
      v80 = v81;
      if (v26 == v27)
        goto LABEL_31;
    }
    v82 = (char *)v101[0];
    v83 = (v80 - (char *)v101[0]) >> 3;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 61)
      sub_2236EA0B4();
    v85 = v102 - (char *)v101[0];
    if ((v102 - (char *)v101[0]) >> 2 > v84)
      v84 = v85 >> 2;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
      v86 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v86 = v84;
    if (v86)
    {
      if (v86 >> 61)
        sub_223174E94();
      v87 = (char *)operator new(8 * v86);
      v88 = &v87[8 * v83];
      *(_QWORD *)v88 = *(_QWORD *)v26;
      v81 = v88 + 8;
      if (v80 == v82)
      {
LABEL_133:
        v101[0] = v88;
        v101[1] = v81;
        v102 = &v87[8 * v86];
        if (!v80)
          goto LABEL_122;
        goto LABEL_138;
      }
    }
    else
    {
      v87 = 0;
      v88 = (char *)(8 * v83);
      *(_QWORD *)(8 * v83) = *(_QWORD *)v26;
      v81 = (char *)(8 * v83 + 8);
      if (v80 == v82)
        goto LABEL_133;
    }
    do
    {
      v89 = *((_DWORD *)v80 - 2);
      v80 -= 8;
      v90 = *((_WORD *)v80 + 2);
      *((_DWORD *)v88 - 2) = v89;
      v88 -= 8;
      *((_WORD *)v88 + 2) = v90;
    }
    while (v80 != v82);
    v80 = (char *)v101[0];
    v101[0] = v88;
    v101[1] = v81;
    v102 = &v87[8 * v86];
    if (!v80)
      goto LABEL_122;
LABEL_138:
    operator delete(v80);
    goto LABEL_122;
  }
LABEL_27:
  v17 = *(__int16 *)(v3 + 24);
  v18 = ((__int16)v96 - v17);
  if ((__int16)v96 - v17 < 0)
  {
    v20 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v3 + 32);
    if (v18 >= (*(_QWORD *)(v3 + 40) - v19) >> 4)
      v20 = (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 3;
    else
      v20 = *(_QWORD *)(v19 + 16 * v18);
  }
  v91 = *(_QWORD **)(v3 + 8);
  v92 = (_QWORD *)(*(_QWORD *)v3 + 8 * v20);
  for (i = (char **)v101; v92 != v91; ++v92)
    sub_223ECE778(&i, v92);
  *(_OWORD *)__p = *(_OWORD *)v101;
  v100 = v102;
  v101[0] = 0;
  v101[1] = 0;
  v102 = 0;
  sub_223ECB71C((__int16 **)a3, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v101[0])
  {
    v101[1] = v101[0];
    operator delete(v101[0]);
  }
}

void sub_223ECCC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223ECCCF0(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _BOOL4 v38;
  _BOOL4 v39;

  if (!a3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 462, (uint64_t)"min_overlap > 0u", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[7] < (unint64_t)a3 || a2[7] < (unint64_t)a3)
    return 0;
  if (a1 == a2)
    return 1;
  if (*((__int16 *)a2 + 34) < *((__int16 *)a1 + 32) || *((__int16 *)a2 + 32) > *((__int16 *)a1 + 34))
    return 0;
  result = 0;
  if (*((__int16 *)a2 + 35) >= *((__int16 *)a1 + 33) && *((__int16 *)a2 + 33) <= *((__int16 *)a1 + 35))
  {
    v8 = *((_DWORD *)a1 + 6);
    v9 = (__int16)v8;
    v10 = v8 >> 16;
    v11 = *((__int16 *)a2 + 12);
    if (v11 <= v9)
      v12 = v9;
    else
      v12 = *((__int16 *)a2 + 12);
    if (*((__int16 *)a2 + 13) < v10)
      v10 = *((__int16 *)a2 + 13);
    if (v12 == v10)
      return 0;
    v13 = 0;
    v14 = a1[4];
    v15 = (a1[5] - v14) >> 4;
    v16 = *a1;
    v17 = (a1[1] - *a1) >> 3;
    v18 = a2[4];
    v19 = (a2[5] - v18) >> 4;
    v20 = *a2;
    do
    {
      v21 = ((__int16)v12 - v9);
      if ((__int16)v12 - v9 < 0)
      {
        v22 = 0;
        v23 = 0;
        v25 = ((__int16)v12 - v11);
        if ((__int16)v12 - v11 >= 0)
          goto LABEL_29;
      }
      else
      {
        v22 = v17;
        v23 = v17;
        if (v15 > v21)
        {
          v24 = (uint64_t *)(v14 + 16 * v21);
          v22 = *v24;
          v23 = v24[1];
        }
        v25 = ((__int16)v12 - v11);
        if ((__int16)v12 - v11 >= 0)
        {
LABEL_29:
          if (v19 > v25 && v22 != v23)
          {
            v26 = (uint64_t *)(v18 + 16 * v25);
            v28 = *v26;
            v27 = v26[1];
            if (v28 != v27)
            {
              v29 = v16 + 8 * v22;
              v30 = v16 + 8 * v23;
              v31 = v20 + 8 * v27;
              v32 = v20 + 8 * v28;
              do
              {
                v33 = *(__int16 *)(v29 + 4);
                v34 = *(__int16 *)(v32 + 2);
                if (v33 >= v34)
                {
                  v35 = *(__int16 *)(v32 + 4);
                  v36 = *(__int16 *)(v29 + 2);
                  if (v35 >= v36)
                  {
                    if (v36 <= v34)
                      v37 = *(__int16 *)(v32 + 2);
                    else
                      v37 = *(__int16 *)(v29 + 2);
                    v38 = v33 >= v35;
                    v39 = v33 < v35;
                    if (v33 >= v35)
                      v33 = *(__int16 *)(v32 + 4);
                    v13 = v13 - v37 + v33 + 1;
                    if (v13 >= a3)
                      return 1;
                    v29 += 8 * v39;
                    v32 += 8 * v38;
                  }
                  else
                  {
                    v32 += 8;
                  }
                }
                else
                {
                  v29 += 8;
                }
              }
              while (v29 != v30 && v32 != v31);
            }
          }
        }
      }
      result = 0;
      LOWORD(v12) = v12 + 1;
    }
    while ((unsigned __int16)v12 != (unsigned __int16)v10);
  }
  return result;
}

uint64_t sub_223ECCF40(uint64_t result, __int16 *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  int v31;
  char v32;
  __int16 *v33;
  __int16 *v34;
  __int16 *v35;
  __int16 *v36;
  int v37;
  char v38;
  int v39;
  int v40;
  int v41;
  char v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unsigned __int16 *v48;
  int v49;
  int v50;
  char v51;
  int v52;
  int v53;
  char v54;
  unint64_t v55;
  int v56;
  int v57;
  char v58;
  int v59;
  int v60;
  char v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  int v66;
  int v67;
  char v68;
  int v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  char v74;
  int v75;
  int v76;
  int v77;
  char v78;
  int v79;
  int v80;
  char v81;
  __int16 *v82;
  __int16 *v83;
  int v84;
  int v85;
  char v86;
  int v87;
  int v88;
  unint64_t v89;
  int v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  char v94;
  int v95;
  int v96;
  char v97;
  __int16 *v98;
  int v99;
  int v100;
  char v101;
  int v102;
  int v103;
  char v104;
  int v105;
  __int16 *v106;
  int v107;
  char v108;
  int v109;
  int v110;
  int v111;
  char v112;
  unint64_t v113;
  int v114;
  __int16 *v115;
  BOOL v117;
  uint64_t v118;
  unsigned __int16 *v119;
  unsigned __int16 *v120;
  __int16 *v121;
  int v122;
  char v123;
  int v124;
  int v125;
  int v126;
  char v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  char *v131;
  int v132;
  int v133;
  char v134;
  int v135;
  char v136;
  int64_t v137;
  int64_t v138;
  int64_t v139;
  uint64_t v140;
  __int16 *v141;
  int v142;
  char v143;
  __int16 *v144;
  int v145;
  int v146;
  int v147;
  char v148;
  __int16 *v149;
  char v150;
  __int16 *v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  char v160;
  __int16 *v161;
  int v162;
  int v163;
  int v164;
  char v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  char *v180;
  int v181;
  int v182;
  int v183;
  __int16 *v184;
  int v185;
  uint64_t v186;
  unint64_t v187;
  unsigned __int16 *v188;
  int v189;
  char v190;
  int v191;
  int v192;
  int v193;
  char v194;
  unint64_t v195;
  int v196;
  char *v197;
  int v198;
  char v199;
  int v200;
  char v201;
  __int16 *v202;
  int v203;
  char v204;
  int v205;
  int v206;
  int v207;
  char v208;
  uint64_t v209;
  int v210;
  _QWORD *v211;
  char v212;
  int v213;
  char v214;

  v8 = (unsigned __int16 *)result;
LABEL_2:
  v9 = v8;
  while (2)
  {
    v8 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v106 = a2 - 4;
        v107 = (__int16)*v9;
        v108 = -1;
        if (*(a2 - 4) >= v107)
          v108 = 1;
        if ((unsigned __int16)*(a2 - 4) == (unsigned __int16)v107)
        {
          v109 = (__int16)v9[1];
          v108 = -1;
          if (*(a2 - 3) >= v109)
            v108 = 1;
          if ((unsigned __int16)*(a2 - 3) == (unsigned __int16)v109)
          {
            v110 = (unsigned __int16)*(a2 - 2);
            v111 = v9[2];
            v112 = -1;
            if ((__int16)v110 >= (__int16)v111)
              v112 = 1;
            if (v110 == v111)
              v108 = 0;
            else
              v108 = v112;
          }
        }
        if (v108 < 0)
        {
          v113 = *(_QWORD *)v9;
          v114 = *(_DWORD *)v106;
          v9[2] = *(a2 - 2);
          *(_DWORD *)v9 = v114;
          *(_DWORD *)v106 = v113;
          *(a2 - 2) = WORD2(v113);
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_223ECDE18(v9, v9 + 4, (unsigned __int16 *)a2 - 4);
      case 4uLL:
        return (uint64_t)sub_223ECE368(v9, v9 + 4, v9 + 8, (unsigned __int16 *)a2 - 4);
      case 5uLL:
        return (uint64_t)sub_223ECE528(v9, v9 + 4, v9 + 8, v9 + 12, (unsigned __int16 *)a2 - 4);
      default:
        if (v10 <= 191)
        {
          v115 = (__int16 *)(v9 + 4);
          v117 = v9 == (unsigned __int16 *)a2 || v115 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v117)
            {
              v118 = 0;
              v119 = v9;
              do
              {
                v121 = v115;
                v122 = (__int16)*v119;
                if ((__int16)v119[4] >= v122)
                  v123 = 1;
                else
                  v123 = -1;
                if (v119[4] == (unsigned __int16)v122)
                {
                  v124 = (__int16)v119[1];
                  v123 = (__int16)v119[5] >= v124 ? 1 : -1;
                  if (v119[5] == (unsigned __int16)v124)
                  {
                    v125 = v119[6];
                    v126 = v119[2];
                    if ((__int16)v125 >= (__int16)v126)
                      v127 = 1;
                    else
                      v127 = -1;
                    if (v125 == v126)
                      v123 = 0;
                    else
                      v123 = v127;
                  }
                }
                if (v123 < 0)
                {
                  v128 = *(_QWORD *)v121;
                  v129 = (__int16)*(_QWORD *)v121;
                  v130 = v118;
                  do
                  {
                    v131 = (char *)v9 + v130;
                    *((_DWORD *)v131 + 2) = *(_DWORD *)((char *)v9 + v130);
                    *((_WORD *)v131 + 6) = *(unsigned __int16 *)((char *)v9 + v130 + 4);
                    if (!v130)
                    {
                      v120 = v9;
                      goto LABEL_243;
                    }
                    v132 = *((__int16 *)v131 - 4);
                    v133 = (unsigned __int16)v132;
                    if (v132 <= v129)
                      v134 = 1;
                    else
                      v134 = -1;
                    if (v133 == (unsigned __int16)v129)
                    {
                      v134 = *(__int16 *)((char *)v9 + v130 - 6) <= SWORD1(v128) ? 1 : -1;
                      if (*(unsigned __int16 *)((char *)v9 + v130 - 6) == WORD1(v128))
                      {
                        v135 = *(unsigned __int16 *)((char *)v9 + v130 - 4);
                        if ((__int16)v135 <= SWORD2(v128))
                          v136 = 1;
                        else
                          v136 = -1;
                        if (v135 == WORD2(v128))
                          v134 = 0;
                        else
                          v134 = v136;
                      }
                    }
                    v130 -= 8;
                  }
                  while (v134 < 0);
                  v120 = (unsigned __int16 *)((char *)v9 + v130 + 8);
LABEL_243:
                  *v120 = v129;
                  v120[1] = WORD1(v128);
                  v120[2] = WORD2(v128);
                }
                v115 = v121 + 4;
                v118 += 8;
                v119 = (unsigned __int16 *)v121;
              }
              while (v121 + 4 != a2);
            }
          }
          else if (!v117)
          {
            do
            {
              v202 = v115;
              v203 = (__int16)*v8;
              if ((__int16)v8[4] >= v203)
                v204 = 1;
              else
                v204 = -1;
              if (v8[4] == (unsigned __int16)v203)
              {
                v205 = (__int16)v8[1];
                v204 = (__int16)v8[5] >= v205 ? 1 : -1;
                if (v8[5] == (unsigned __int16)v205)
                {
                  v206 = v8[6];
                  v207 = v8[2];
                  if ((__int16)v206 >= (__int16)v207)
                    v208 = 1;
                  else
                    v208 = -1;
                  if (v206 == v207)
                    v204 = 0;
                  else
                    v204 = v208;
                }
              }
              if (v204 < 0)
              {
                v209 = *(_QWORD *)v202;
                v210 = (__int16)*(_QWORD *)v202;
                v211 = v202;
                do
                {
                  *(_DWORD *)v211 = *((_DWORD *)v211 - 2);
                  *((_WORD *)v211 + 2) = *((_WORD *)v211 - 2);
                  if (*((__int16 *)v211 - 8) <= v210)
                    v212 = 1;
                  else
                    v212 = -1;
                  if (*((unsigned __int16 *)v211 - 8) == (unsigned __int16)v210)
                  {
                    v212 = *((__int16 *)v211 - 7) <= SWORD1(v209) ? 1 : -1;
                    if (*((unsigned __int16 *)v211 - 7) == WORD1(v209))
                    {
                      v213 = *((unsigned __int16 *)v211 - 6);
                      if ((__int16)v213 <= SWORD2(v209))
                        v214 = 1;
                      else
                        v214 = -1;
                      if (v213 == WORD2(v209))
                        v212 = 0;
                      else
                        v212 = v214;
                    }
                  }
                  --v211;
                }
                while (v212 < 0);
                *(_WORD *)v211 = v210;
                *((_WORD *)v211 + 1) = WORD1(v209);
                *((_WORD *)v211 + 2) = WORD2(v209);
              }
              v115 = v202 + 4;
              v8 = (unsigned __int16 *)v202;
            }
            while (v202 + 4 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 == (unsigned __int16 *)a2)
            return result;
          v137 = (v11 - 2) >> 1;
          v138 = v137;
          while (2)
          {
            v139 = v138;
            if (v137 >= v138)
            {
              v140 = (2 * v138) | 1;
              v141 = (__int16 *)&v9[4 * v140];
              if (2 * v139 + 2 < (uint64_t)v11)
              {
                v142 = v141[4];
                if (*v141 >= v142)
                  v143 = 1;
                else
                  v143 = -1;
                if ((unsigned __int16)*v141 == (unsigned __int16)v142)
                {
                  v144 = (__int16 *)&v9[4 * v140];
                  v145 = v141[5];
                  v143 = v144[1] >= v145 ? 1 : -1;
                  if ((unsigned __int16)v144[1] == (unsigned __int16)v145)
                  {
                    v146 = (unsigned __int16)v144[2];
                    v147 = (unsigned __int16)v141[6];
                    if ((__int16)v146 >= (__int16)v147)
                      v148 = 1;
                    else
                      v148 = -1;
                    if (v146 == v147)
                      v143 = 0;
                    else
                      v143 = v148;
                  }
                }
                if (v143 < 0)
                {
                  v141 += 4;
                  v140 = 2 * v139 + 2;
                }
              }
              v149 = (__int16 *)&v9[4 * v139];
              result = *v149;
              if (*v141 >= (int)result)
                v150 = 1;
              else
                v150 = -1;
              if (*v141 == *v149)
              {
                result = (unsigned __int16)v141[1];
                v151 = (__int16 *)&v9[4 * v139];
                v152 = v151[1];
                v150 = v141[1] >= v152 ? 1 : -1;
                if ((_DWORD)result == (unsigned __int16)v152)
                {
                  v153 = (unsigned __int16)v141[2];
                  v154 = (unsigned __int16)v151[2];
                  if ((__int16)v153 >= (__int16)v154)
                    result = 1;
                  else
                    result = 255;
                  if (v153 == v154)
                    v150 = 0;
                  else
                    v150 = result;
                }
              }
              if ((v150 & 0x80) == 0)
              {
                v155 = *(_QWORD *)v149;
                v156 = (__int16)*(_QWORD *)v149;
                while (1)
                {
                  result = (uint64_t)v149;
                  v149 = v141;
                  v157 = *(_DWORD *)v141;
                  *(_WORD *)(result + 4) = v149[2];
                  *(_DWORD *)result = v157;
                  if (v137 < v140)
                  {
LABEL_280:
                    *v149 = v156;
                    v149[1] = WORD1(v155);
                    v149[2] = WORD2(v155);
                    goto LABEL_281;
                  }
                  v158 = (2 * v140) | 1;
                  v141 = (__int16 *)&v9[4 * v158];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v11)
                    break;
                  v140 = v158;
                  if (*v141 >= v156)
                    result = 1;
                  else
                    result = 255;
                  if ((unsigned __int16)*v141 == (unsigned __int16)v156)
                    goto LABEL_345;
LABEL_316:
                  if ((result & 0x80) != 0)
                    goto LABEL_280;
                }
                v159 = v141[4];
                if (*v141 >= v159)
                  v160 = 1;
                else
                  v160 = -1;
                if ((unsigned __int16)*v141 == (unsigned __int16)v159)
                {
                  v161 = (__int16 *)&v9[4 * v158];
                  v162 = v141[5];
                  v160 = v161[1] >= v162 ? 1 : -1;
                  if ((unsigned __int16)v161[1] == (unsigned __int16)v162)
                  {
                    v163 = (unsigned __int16)v161[2];
                    v164 = (unsigned __int16)v141[6];
                    if ((__int16)v163 >= (__int16)v164)
                      v165 = 1;
                    else
                      v165 = -1;
                    if (v163 == v164)
                      v160 = 0;
                    else
                      v160 = v165;
                  }
                }
                if (v160 < 0)
                  v141 += 4;
                else
                  v140 = v158;
                if (*v141 >= v156)
                  result = 1;
                else
                  result = 255;
                if ((unsigned __int16)*v141 != (unsigned __int16)v156)
                  goto LABEL_316;
LABEL_345:
                if (v141[1] >= SWORD1(v155))
                  result = 1;
                else
                  result = 255;
                if ((unsigned __int16)v141[1] == WORD1(v155))
                {
                  v166 = (unsigned __int16)v141[2];
                  if ((__int16)v166 >= SWORD2(v155))
                    v167 = 1;
                  else
                    v167 = 255;
                  if (v166 == WORD2(v155))
                    result = 0;
                  else
                    result = v167;
                }
                goto LABEL_316;
              }
            }
LABEL_281:
            v138 = v139 - 1;
            if (v139)
              continue;
            break;
          }
          v168 = (unint64_t)v10 >> 3;
          while (2)
          {
            if (v168 >= 2)
            {
              v171 = 0;
              v172 = *(_QWORD *)v9;
              v173 = (char *)v9;
              do
              {
                v177 = v171 + 1;
                v174 = &v173[8 * v171 + 8];
                v175 = (2 * v171) | 1;
                v178 = 2 * v171 + 2;
                if (v178 < v168)
                {
                  v179 = *((__int16 *)v174 + 4);
                  if (*(__int16 *)v174 >= v179)
                    result = 1;
                  else
                    result = 255;
                  if (*(unsigned __int16 *)v174 == (unsigned __int16)v179)
                  {
                    v180 = &v173[8 * v177];
                    v181 = *((__int16 *)v174 + 5);
                    result = *((__int16 *)v180 + 1) >= v181 ? 1 : 255;
                    if (*((unsigned __int16 *)v180 + 1) == (unsigned __int16)v181)
                    {
                      v182 = *((unsigned __int16 *)v180 + 2);
                      v183 = *((unsigned __int16 *)v174 + 6);
                      result = (__int16)v182 >= (__int16)v183 ? 1 : 255;
                      if (v182 == v183)
                        result = 0;
                    }
                  }
                  if ((result & 0x80) != 0)
                  {
                    v174 += 8;
                    v175 = v178;
                  }
                }
                v176 = *(_DWORD *)v174;
                *((_WORD *)v173 + 2) = *((_WORD *)v174 + 2);
                *(_DWORD *)v173 = v176;
                v173 = v174;
                v171 = v175;
              }
              while (v175 <= (uint64_t)((unint64_t)(v168 - 2) >> 1));
              v184 = a2 - 4;
              if (v174 == (char *)(a2 - 4))
              {
                *(_DWORD *)v174 = v172;
                v169 = HIDWORD(v172);
                goto LABEL_357;
              }
              v185 = *(_DWORD *)v184;
              *((_WORD *)v174 + 2) = *(a2 - 2);
              *(_DWORD *)v174 = v185;
              *(a2 - 2) = WORD2(v172);
              *(_DWORD *)v184 = v172;
              v186 = v174 - (char *)v9 + 8;
              if (v186 >= 9)
              {
                v187 = (((unint64_t)v186 >> 3) - 2) >> 1;
                v188 = &v9[4 * v187];
                v189 = *(__int16 *)v174;
                if ((__int16)*v188 >= v189)
                  v190 = 1;
                else
                  v190 = -1;
                if (*v188 == (unsigned __int16)v189)
                {
                  v191 = *((__int16 *)v174 + 1);
                  v190 = (__int16)v188[1] >= v191 ? 1 : -1;
                  if (v188[1] == (unsigned __int16)v191)
                  {
                    v192 = v9[4 * v187 + 2];
                    v193 = *((unsigned __int16 *)v174 + 2);
                    if ((__int16)v192 >= (__int16)v193)
                      v194 = 1;
                    else
                      v194 = -1;
                    if (v192 == v193)
                      v190 = 0;
                    else
                      v190 = v194;
                  }
                }
                if (v190 < 0)
                {
                  v195 = *(_QWORD *)v174;
                  v196 = (__int16)*(_QWORD *)v174;
                  do
                  {
                    v197 = v174;
                    v174 = (char *)v188;
                    v198 = *(_DWORD *)v188;
                    *((_WORD *)v197 + 2) = *((_WORD *)v174 + 2);
                    *(_DWORD *)v197 = v198;
                    if (!v187)
                      break;
                    v187 = (v187 - 1) >> 1;
                    v188 = &v9[4 * v187];
                    if ((__int16)*v188 >= v196)
                      v199 = 1;
                    else
                      v199 = -1;
                    if (*v188 == (unsigned __int16)v196)
                    {
                      v199 = (__int16)v188[1] >= SWORD1(v195) ? 1 : -1;
                      if (v188[1] == WORD1(v195))
                      {
                        v200 = v9[4 * v187 + 2];
                        if ((__int16)v200 >= SWORD2(v195))
                          v201 = 1;
                        else
                          v201 = -1;
                        if (v200 == WORD2(v195))
                          v199 = 0;
                        else
                          v199 = v201;
                      }
                    }
                  }
                  while (v199 < 0);
                  v169 = HIDWORD(v195);
                  *(_WORD *)v174 = v196;
                  *((_WORD *)v174 + 1) = WORD1(v195);
LABEL_357:
                  *((_WORD *)v174 + 2) = v169;
                }
              }
            }
            a2 -= 4;
            if ((unint64_t)v168-- <= 2)
              return result;
            continue;
          }
        }
        v12 = v11 >> 1;
        v13 = &v9[4 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x401)
        {
          result = (uint64_t)sub_223ECDE18(&v8[4 * (v11 >> 1)], v8, (unsigned __int16 *)a2 - 4);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_25;
        }
        else
        {
          sub_223ECDE18(v8, &v8[4 * (v11 >> 1)], (unsigned __int16 *)a2 - 4);
          v14 = 4 * v12;
          v15 = &v8[4 * v12 - 4];
          sub_223ECDE18(v8 + 4, v15, (unsigned __int16 *)a2 - 8);
          sub_223ECDE18(v8 + 8, &v8[v14 + 4], (unsigned __int16 *)a2 - 12);
          result = (uint64_t)sub_223ECDE18(v15, v13, &v8[v14 + 4]);
          v16 = *(_QWORD *)v8;
          v17 = *(_DWORD *)v13;
          v8[2] = v13[2];
          *(_DWORD *)v8 = v17;
          *(_DWORD *)v13 = v16;
          v13[2] = WORD2(v16);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_25;
        }
        v18 = (__int16)*v8;
        if ((__int16)*(v8 - 4) >= v18)
          v19 = 1;
        else
          v19 = -1;
        if (*(v8 - 4) == (unsigned __int16)v18)
        {
          v20 = (__int16)v8[1];
          v19 = (__int16)*(v8 - 3) >= v20 ? 1 : -1;
          if (*(v8 - 3) == (unsigned __int16)v20)
          {
            v21 = *(v8 - 2);
            v22 = v8[2];
            if ((__int16)v21 >= (__int16)v22)
              v23 = 1;
            else
              v23 = -1;
            if (v21 == v22)
              v19 = 0;
            else
              v19 = v23;
          }
        }
        if ((v19 & 0x80) == 0)
        {
          v64 = v8[2];
          v65 = (unsigned __int16)*(_DWORD *)v8;
          v66 = HIWORD(*(_DWORD *)v8);
          v67 = (unsigned __int16)*(a2 - 4);
          if ((__int16)v67 <= (__int16)*(_DWORD *)v8)
            v68 = 1;
          else
            v68 = -1;
          if (v67 == v65)
          {
            v69 = (unsigned __int16)*(a2 - 3);
            v68 = (__int16)v69 <= (__int16)v66 ? 1 : -1;
            if (v69 == v66)
            {
              v70 = (unsigned __int16)*(a2 - 2);
              v68 = (__int16)v70 <= (__int16)v64 ? 1 : -1;
              if (v70 == v64)
                v68 = 0;
            }
          }
          v71 = v8;
          if (v68 < 0)
          {
            do
            {
              v9 = v71 + 4;
              v73 = v71[4];
              if ((__int16)v73 <= (__int16)v65)
                v74 = 1;
              else
                v74 = -1;
              if (v73 == v65)
              {
                v75 = v71[5];
                v74 = (__int16)v75 <= (__int16)v66 ? 1 : -1;
                if (v75 == v66)
                {
                  v76 = v71[6];
                  v74 = (__int16)v76 <= (__int16)v64 ? 1 : -1;
                  if (v76 == v64)
                    v74 = 0;
                }
              }
              v71 = v9;
            }
            while ((v74 & 0x80) == 0);
          }
          else
          {
            v72 = v8 + 4;
            do
            {
              v9 = v72;
              if (v72 >= (unsigned __int16 *)a2)
                break;
              v77 = *v72;
              if ((__int16)v77 <= (__int16)v65)
                v78 = 1;
              else
                v78 = -1;
              if (v77 == v65)
              {
                v79 = v9[1];
                v78 = (__int16)v79 <= (__int16)v66 ? 1 : -1;
                if (v79 == v66)
                {
                  v80 = v9[2];
                  if ((__int16)v80 <= (__int16)v64)
                    v81 = 1;
                  else
                    v81 = -1;
                  if (v80 == v64)
                    v78 = 0;
                  else
                    v78 = v81;
                }
              }
              v72 = v9 + 4;
            }
            while ((v78 & 0x80) == 0);
          }
          v82 = a2;
          if (v9 < (unsigned __int16 *)a2)
          {
            v83 = a2;
            v82 = a2;
            do
            {
              v85 = (unsigned __int16)*(v82 - 4);
              v82 -= 4;
              v84 = v85;
              if ((__int16)v85 <= (__int16)v65)
                v86 = 1;
              else
                v86 = -1;
              if (v84 == v65)
              {
                v87 = (unsigned __int16)*(v83 - 3);
                v86 = (__int16)v87 <= (__int16)v66 ? 1 : -1;
                if (v87 == v66)
                {
                  v88 = (unsigned __int16)*(v83 - 2);
                  v86 = (__int16)v88 <= (__int16)v64 ? 1 : -1;
                  if (v88 == v64)
                    v86 = 0;
                }
              }
              v83 = v82;
            }
            while (v86 < 0);
          }
          while (v9 < (unsigned __int16 *)v82)
          {
            v89 = *(_QWORD *)v9;
            v90 = *(_DWORD *)v82;
            v9[2] = v82[2];
            *(_DWORD *)v9 = v90;
            *(_DWORD *)v82 = v89;
            v82[2] = WORD2(v89);
            do
            {
              v91 = v9;
              v93 = v9[4];
              v9 += 4;
              v92 = v93;
              if ((__int16)v93 <= (__int16)v65)
                v94 = 1;
              else
                v94 = -1;
              if (v92 == v65)
              {
                v95 = v91[5];
                v94 = (__int16)v95 <= (__int16)v66 ? 1 : -1;
                if (v95 == v66)
                {
                  v96 = v91[6];
                  if ((__int16)v96 <= (__int16)v64)
                    v97 = 1;
                  else
                    v97 = -1;
                  if (v96 == v64)
                    v94 = 0;
                  else
                    v94 = v97;
                }
              }
            }
            while ((v94 & 0x80) == 0);
            do
            {
              v98 = v82;
              v100 = (unsigned __int16)*(v82 - 4);
              v82 -= 4;
              v99 = v100;
              if ((__int16)v100 <= (__int16)v65)
                v101 = 1;
              else
                v101 = -1;
              if (v99 == v65)
              {
                v102 = (unsigned __int16)*(v98 - 3);
                v101 = (__int16)v102 <= (__int16)v66 ? 1 : -1;
                if (v102 == v66)
                {
                  v103 = (unsigned __int16)*(v98 - 2);
                  if ((__int16)v103 <= (__int16)v64)
                    v104 = 1;
                  else
                    v104 = -1;
                  if (v103 == v64)
                    v101 = 0;
                  else
                    v101 = v104;
                }
              }
            }
            while (v101 < 0);
          }
          if (v9 - 4 != v8)
          {
            v105 = *((_DWORD *)v9 - 2);
            v8[2] = *(v9 - 2);
            *(_DWORD *)v8 = v105;
          }
          a5 = 0;
          *(v9 - 4) = v65;
          *(v9 - 3) = v66;
          *(v9 - 2) = v64;
          continue;
        }
LABEL_25:
        v24 = 0;
        v25 = v8[2];
        v26 = (unsigned __int16)*(_DWORD *)v8;
        v27 = HIWORD(*(_DWORD *)v8);
        do
        {
          v28 = v8[v24 + 4];
          if ((__int16)v28 >= (__int16)v26)
            v29 = 1;
          else
            v29 = -1;
          if (v28 == v26)
          {
            v30 = v8[v24 + 5];
            v29 = (__int16)v30 >= (__int16)v27 ? 1 : -1;
            if (v30 == v27)
            {
              v31 = v8[v24 + 6];
              if ((__int16)v31 >= (__int16)v25)
                v32 = 1;
              else
                v32 = -1;
              if (v31 == v25)
                v29 = 0;
              else
                v29 = v32;
            }
          }
          v24 += 4;
        }
        while (v29 < 0);
        v33 = (__int16 *)&v8[v24];
        v34 = a2;
        if (v24 == 4)
        {
          v35 = a2;
          while (v33 < v35)
          {
            v36 = v35 - 4;
            v41 = (unsigned __int16)*(v35 - 4);
            if ((__int16)v41 >= (__int16)v26)
              v42 = 1;
            else
              v42 = -1;
            if (v41 == v26)
            {
              v43 = (unsigned __int16)*(v35 - 3);
              v42 = (__int16)v43 >= (__int16)v27 ? 1 : -1;
              if (v43 == v27)
              {
                v44 = (unsigned __int16)*(v35 - 2);
                v42 = (__int16)v44 >= (__int16)v25 ? 1 : -1;
                if (v44 == v25)
                  v42 = 0;
              }
            }
            v35 = v36;
            if (v42 < 0)
              goto LABEL_75;
          }
          v36 = v35;
        }
        else
        {
          do
          {
            v36 = v34 - 4;
            v37 = (unsigned __int16)*(v34 - 4);
            if ((__int16)v37 >= (__int16)v26)
              v38 = 1;
            else
              v38 = -1;
            if (v37 == v26)
            {
              v39 = (unsigned __int16)*(v34 - 3);
              v38 = (__int16)v39 >= (__int16)v27 ? 1 : -1;
              if (v39 == v27)
              {
                v40 = (unsigned __int16)*(v34 - 2);
                v38 = (__int16)v40 >= (__int16)v25 ? 1 : -1;
                if (v40 == v25)
                  v38 = 0;
              }
            }
            v34 = v36;
          }
          while ((v38 & 0x80) == 0);
        }
LABEL_75:
        v9 = (unsigned __int16 *)v33;
        if (v33 < v36)
        {
          v45 = (unint64_t)v36;
          do
          {
            v46 = *(_QWORD *)v9;
            v47 = *(_DWORD *)v45;
            v9[2] = *(_WORD *)(v45 + 4);
            *(_DWORD *)v9 = v47;
            *(_DWORD *)v45 = v46;
            *(_WORD *)(v45 + 4) = WORD2(v46);
            do
            {
              v48 = v9;
              v50 = v9[4];
              v9 += 4;
              v49 = v50;
              if ((__int16)v50 >= (__int16)v26)
                v51 = 1;
              else
                v51 = -1;
              if (v49 == v26)
              {
                v52 = v48[5];
                v51 = (__int16)v52 >= (__int16)v27 ? 1 : -1;
                if (v52 == v27)
                {
                  v53 = v48[6];
                  if ((__int16)v53 >= (__int16)v25)
                    v54 = 1;
                  else
                    v54 = -1;
                  if (v53 == v25)
                    v51 = 0;
                  else
                    v51 = v54;
                }
              }
            }
            while (v51 < 0);
            do
            {
              v55 = v45;
              v57 = *(unsigned __int16 *)(v45 - 8);
              v45 -= 8;
              v56 = v57;
              if ((__int16)v57 >= (__int16)v26)
                v58 = 1;
              else
                v58 = -1;
              if (v56 == v26)
              {
                v59 = *(unsigned __int16 *)(v55 - 6);
                v58 = (__int16)v59 >= (__int16)v27 ? 1 : -1;
                if (v59 == v27)
                {
                  v60 = *(unsigned __int16 *)(v55 - 4);
                  if ((__int16)v60 >= (__int16)v25)
                    v61 = 1;
                  else
                    v61 = -1;
                  if (v60 == v25)
                    v58 = 0;
                  else
                    v58 = v61;
                }
              }
            }
            while ((v58 & 0x80) == 0);
          }
          while ((unint64_t)v9 < v45);
        }
        if (v9 - 4 != v8)
        {
          v62 = *((_DWORD *)v9 - 2);
          v8[2] = *(v9 - 2);
          *(_DWORD *)v8 = v62;
        }
        *(v9 - 4) = v26;
        *(v9 - 3) = v27;
        *(v9 - 2) = v25;
        if (v33 < v36)
        {
LABEL_114:
          result = sub_223ECCF40(v8, v9 - 4, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v63 = sub_223ECE08C(v8, (__int16 *)v9 - 4);
        result = sub_223ECE08C(v9, a2);
        if (!(_DWORD)result)
        {
          if (v63)
            continue;
          goto LABEL_114;
        }
        a2 = (__int16 *)(v9 - 4);
        if (!v63)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned __int16 *sub_223ECDE18(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  int v3;
  int v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;

  v3 = *a2;
  v4 = *result;
  if ((__int16)v3 >= (__int16)v4)
    v5 = 1;
  else
    v5 = -1;
  if (v3 == v4)
  {
    v6 = (__int16)result[1];
    v5 = (__int16)a2[1] >= v6 ? 1 : -1;
    if (a2[1] == (unsigned __int16)v6)
    {
      v7 = a2[2];
      v8 = result[2];
      v5 = -1;
      if ((__int16)v7 >= (__int16)v8)
        v5 = 1;
      if (v7 == v8)
        v5 = 0;
    }
  }
  v9 = *a3;
  v10 = -1;
  if ((__int16)v9 >= (__int16)v3)
    v10 = 1;
  if (v5 < 0)
  {
    if (v9 == v3)
    {
      v24 = (__int16)a2[1];
      v10 = (__int16)a3[1] >= v24 ? 1 : -1;
      if (a3[1] == (unsigned __int16)v24)
      {
        v25 = a3[2];
        v26 = a2[2];
        v10 = -1;
        if ((__int16)v25 >= (__int16)v26)
          v10 = 1;
        if (v25 == v26)
          v10 = 0;
      }
    }
    v27 = *(_QWORD *)result;
    if (v10 < 0)
    {
      v35 = *(_DWORD *)a3;
      result[2] = a3[2];
      *(_DWORD *)result = v35;
      a3[2] = WORD2(v27);
      *(_DWORD *)a3 = v27;
    }
    else
    {
      v28 = *(_DWORD *)a2;
      result[2] = a2[2];
      *(_DWORD *)result = v28;
      *(_DWORD *)a2 = v27;
      v29 = HIDWORD(v27);
      a2[2] = WORD2(v27);
      v30 = -1;
      if ((__int16)*a3 >= (__int16)v27)
        v30 = 1;
      if (*a3 == (unsigned __int16)v27)
      {
        v31 = v27 >> 16;
        v30 = -1;
        if ((__int16)a3[1] >= (__int16)v31)
          v30 = 1;
        if (a3[1] == (unsigned __int16)v31)
        {
          v32 = a3[2];
          v30 = -1;
          if ((__int16)v32 >= (__int16)v29)
            v30 = 1;
          if (v32 == (unsigned __int16)v29)
            v30 = 0;
        }
      }
      if (v30 < 0)
      {
        v33 = *(_QWORD *)a2;
        v34 = *(_DWORD *)a3;
        a2[2] = a3[2];
        *(_DWORD *)a2 = v34;
        *(_DWORD *)a3 = v33;
        a3[2] = WORD2(v33);
      }
    }
  }
  else
  {
    if (v9 == v3)
    {
      v11 = (__int16)a2[1];
      v10 = (__int16)a3[1] >= v11 ? 1 : -1;
      if (a3[1] == (unsigned __int16)v11)
      {
        v12 = a3[2];
        v13 = a2[2];
        v10 = -1;
        if ((__int16)v12 >= (__int16)v13)
          v10 = 1;
        if (v12 == v13)
          v10 = 0;
      }
    }
    if (v10 < 0)
    {
      v14 = *(_QWORD *)a2;
      v15 = *(_DWORD *)a3;
      a2[2] = a3[2];
      *(_DWORD *)a2 = v15;
      *(_DWORD *)a3 = v14;
      a3[2] = WORD2(v14);
      v16 = (__int16)*result;
      v17 = -1;
      if ((__int16)*a2 >= v16)
        v17 = 1;
      if (*a2 == (unsigned __int16)v16)
      {
        v18 = (__int16)result[1];
        v17 = -1;
        if ((__int16)a2[1] >= v18)
          v17 = 1;
        if (a2[1] == (unsigned __int16)v18)
        {
          v19 = a2[2];
          v20 = result[2];
          v21 = -1;
          if ((__int16)v19 >= (__int16)v20)
            v21 = 1;
          if (v19 == v20)
            v17 = 0;
          else
            v17 = v21;
        }
      }
      if (v17 < 0)
      {
        v22 = *(_QWORD *)result;
        v23 = *(_DWORD *)a2;
        result[2] = a2[2];
        *(_DWORD *)result = v23;
        *(_DWORD *)a2 = v22;
        a2[2] = WORD2(v22);
      }
    }
  }
  return result;
}

BOOL sub_223ECE08C(unsigned __int16 *a1, __int16 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  __int16 *v26;
  int v27;
  char v28;
  int v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v26 = a2 - 4;
      v27 = (__int16)*a1;
      v28 = -1;
      if (*(a2 - 4) >= v27)
        v28 = 1;
      if ((unsigned __int16)*(a2 - 4) == (unsigned __int16)v27)
      {
        v29 = (__int16)a1[1];
        v28 = -1;
        if (*(a2 - 3) >= v29)
          v28 = 1;
        if ((unsigned __int16)*(a2 - 3) == (unsigned __int16)v29)
        {
          v30 = (unsigned __int16)*(a2 - 2);
          v31 = a1[2];
          v32 = -1;
          if ((__int16)v30 >= (__int16)v31)
            v32 = 1;
          if (v30 == v31)
            v28 = 0;
          else
            v28 = v32;
        }
      }
      if (v28 < 0)
      {
        v33 = *(_QWORD *)a1;
        v34 = *(_DWORD *)v26;
        a1[2] = *(a2 - 2);
        *(_DWORD *)a1 = v34;
        *(_DWORD *)v26 = v33;
        *(a2 - 2) = WORD2(v33);
      }
      return result;
    case 3:
      sub_223ECDE18(a1, a1 + 4, (unsigned __int16 *)a2 - 4);
      return 1;
    case 4:
      sub_223ECE368(a1, a1 + 4, a1 + 8, (unsigned __int16 *)a2 - 4);
      return 1;
    case 5:
      sub_223ECE528(a1, a1 + 4, a1 + 8, a1 + 12, (unsigned __int16 *)a2 - 4);
      return 1;
    default:
      v6 = a1 + 8;
      sub_223ECDE18(a1, a1 + 4, a1 + 8);
      v7 = a1 + 12;
      if (a1 + 12 == (unsigned __int16 *)a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = (__int16)*v6;
    if ((__int16)*v7 >= v11)
      v12 = 1;
    else
      v12 = -1;
    if (*v7 == (unsigned __int16)v11)
    {
      v13 = (__int16)v6[1];
      v12 = (__int16)v7[1] >= v13 ? 1 : -1;
      if (v7[1] == (unsigned __int16)v13)
      {
        v14 = v7[2];
        v15 = v6[2];
        if ((__int16)v14 >= (__int16)v15)
          v16 = 1;
        else
          v16 = -1;
        if (v14 == v15)
          v12 = 0;
        else
          v12 = v16;
      }
    }
    if (v12 < 0)
    {
      v17 = *(_QWORD *)v7;
      v18 = (__int16)*(_QWORD *)v7;
      v19 = v8;
      do
      {
        v20 = (char *)a1 + v19;
        *((_DWORD *)v20 + 6) = *(_DWORD *)((char *)a1 + v19 + 16);
        *((_WORD *)v20 + 14) = *(unsigned __int16 *)((char *)a1 + v19 + 20);
        if (v19 == -16)
        {
          v10 = a1;
          goto LABEL_6;
        }
        v21 = *((__int16 *)v20 + 4);
        v22 = (unsigned __int16)v21;
        if (v21 <= v18)
          v23 = 1;
        else
          v23 = -1;
        if (v22 == (unsigned __int16)v18)
        {
          v23 = *(__int16 *)((char *)a1 + v19 + 10) <= SWORD1(v17) ? 1 : -1;
          if (*(unsigned __int16 *)((char *)a1 + v19 + 10) == WORD1(v17))
          {
            v24 = *(unsigned __int16 *)((char *)a1 + v19 + 12);
            if ((__int16)v24 <= SWORD2(v17))
              v25 = 1;
            else
              v25 = -1;
            if (v24 == WORD2(v17))
              v23 = 0;
            else
              v23 = v25;
          }
        }
        v19 -= 8;
      }
      while (v23 < 0);
      v10 = (unsigned __int16 *)((char *)a1 + v19 + 24);
LABEL_6:
      *v10 = v18;
      v10[1] = WORD1(v17);
      v10[2] = WORD2(v17);
      if (++v9 == 8)
        return v7 + 4 == (unsigned __int16 *)a2;
    }
    v6 = v7;
    v8 += 8;
    v7 += 4;
    if (v7 == (unsigned __int16 *)a2)
      return 1;
  }
}

unsigned __int16 *sub_223ECE368(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unsigned __int16 *result;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  int v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;

  result = sub_223ECDE18(a1, a2, a3);
  v9 = (__int16)*a3;
  v10 = -1;
  if ((__int16)*a4 >= v9)
    v10 = 1;
  if (*a4 == (unsigned __int16)v9)
  {
    v11 = (__int16)a3[1];
    v10 = -1;
    if ((__int16)a4[1] >= v11)
      v10 = 1;
    if (a4[1] == (unsigned __int16)v11)
    {
      v12 = a4[2];
      v13 = a3[2];
      v14 = -1;
      if ((__int16)v12 >= (__int16)v13)
        v14 = 1;
      if (v12 == v13)
        v10 = 0;
      else
        v10 = v14;
    }
  }
  if (v10 < 0)
  {
    v15 = *(_QWORD *)a3;
    v16 = *(_DWORD *)a4;
    a3[2] = a4[2];
    *(_DWORD *)a3 = v16;
    *(_DWORD *)a4 = v15;
    a4[2] = WORD2(v15);
    v17 = (__int16)*a2;
    v18 = -1;
    if ((__int16)*a3 >= v17)
      v18 = 1;
    if (*a3 == (unsigned __int16)v17)
    {
      v19 = (__int16)a2[1];
      v18 = -1;
      if ((__int16)a3[1] >= v19)
        v18 = 1;
      if (a3[1] == (unsigned __int16)v19)
      {
        v20 = a3[2];
        v21 = a2[2];
        v22 = -1;
        if ((__int16)v20 >= (__int16)v21)
          v22 = 1;
        if (v20 == v21)
          v18 = 0;
        else
          v18 = v22;
      }
    }
    if (v18 < 0)
    {
      v23 = *(_QWORD *)a2;
      v24 = *(_DWORD *)a3;
      a2[2] = a3[2];
      *(_DWORD *)a2 = v24;
      *(_DWORD *)a3 = v23;
      a3[2] = WORD2(v23);
      v25 = (__int16)*a1;
      v26 = -1;
      if ((__int16)*a2 >= v25)
        v26 = 1;
      if (*a2 == (unsigned __int16)v25)
      {
        v27 = (__int16)a1[1];
        v26 = -1;
        if ((__int16)a2[1] >= v27)
          v26 = 1;
        if (a2[1] == (unsigned __int16)v27)
        {
          v28 = a2[2];
          v29 = a1[2];
          v30 = -1;
          if ((__int16)v28 >= (__int16)v29)
            v30 = 1;
          if (v28 == v29)
            v26 = 0;
          else
            v26 = v30;
        }
      }
      if (v26 < 0)
      {
        v31 = *(_QWORD *)a1;
        v32 = *(_DWORD *)a2;
        a1[2] = a2[2];
        *(_DWORD *)a1 = v32;
        *(_DWORD *)a2 = v31;
        a2[2] = WORD2(v31);
      }
    }
  }
  return result;
}

unsigned __int16 *sub_223ECE528(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  unsigned __int16 *result;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  int v37;
  int v38;
  int v39;
  char v40;
  uint64_t v41;
  int v42;

  result = sub_223ECE368(a1, a2, a3, a4);
  v11 = (__int16)*a4;
  v12 = -1;
  if ((__int16)*a5 >= v11)
    v12 = 1;
  if (*a5 == (unsigned __int16)v11)
  {
    v13 = (__int16)a4[1];
    v12 = -1;
    if ((__int16)a5[1] >= v13)
      v12 = 1;
    if (a5[1] == (unsigned __int16)v13)
    {
      v14 = a5[2];
      v15 = a4[2];
      v16 = -1;
      if ((__int16)v14 >= (__int16)v15)
        v16 = 1;
      if (v14 == v15)
        v12 = 0;
      else
        v12 = v16;
    }
  }
  if (v12 < 0)
  {
    v17 = *(_QWORD *)a4;
    v18 = *(_DWORD *)a5;
    a4[2] = a5[2];
    *(_DWORD *)a4 = v18;
    *(_DWORD *)a5 = v17;
    a5[2] = WORD2(v17);
    v19 = (__int16)*a3;
    v20 = -1;
    if ((__int16)*a4 >= v19)
      v20 = 1;
    if (*a4 == (unsigned __int16)v19)
    {
      v21 = (__int16)a3[1];
      v20 = -1;
      if ((__int16)a4[1] >= v21)
        v20 = 1;
      if (a4[1] == (unsigned __int16)v21)
      {
        v22 = a4[2];
        v23 = a3[2];
        v24 = -1;
        if ((__int16)v22 >= (__int16)v23)
          v24 = 1;
        if (v22 == v23)
          v20 = 0;
        else
          v20 = v24;
      }
    }
    if (v20 < 0)
    {
      v25 = *(_QWORD *)a3;
      v26 = *(_DWORD *)a4;
      a3[2] = a4[2];
      *(_DWORD *)a3 = v26;
      *(_DWORD *)a4 = v25;
      a4[2] = WORD2(v25);
      v27 = (__int16)*a2;
      v28 = -1;
      if ((__int16)*a3 >= v27)
        v28 = 1;
      if (*a3 == (unsigned __int16)v27)
      {
        v29 = (__int16)a2[1];
        v28 = -1;
        if ((__int16)a3[1] >= v29)
          v28 = 1;
        if (a3[1] == (unsigned __int16)v29)
        {
          v30 = a3[2];
          v31 = a2[2];
          v32 = -1;
          if ((__int16)v30 >= (__int16)v31)
            v32 = 1;
          if (v30 == v31)
            v28 = 0;
          else
            v28 = v32;
        }
      }
      if (v28 < 0)
      {
        v33 = *(_QWORD *)a2;
        v34 = *(_DWORD *)a3;
        a2[2] = a3[2];
        *(_DWORD *)a2 = v34;
        *(_DWORD *)a3 = v33;
        a3[2] = WORD2(v33);
        v35 = (__int16)*a1;
        v36 = -1;
        if ((__int16)*a2 >= v35)
          v36 = 1;
        if (*a2 == (unsigned __int16)v35)
        {
          v37 = (__int16)a1[1];
          v36 = -1;
          if ((__int16)a2[1] >= v37)
            v36 = 1;
          if (a2[1] == (unsigned __int16)v37)
          {
            v38 = a2[2];
            v39 = a1[2];
            v40 = -1;
            if ((__int16)v38 >= (__int16)v39)
              v40 = 1;
            if (v38 == v39)
              v36 = 0;
            else
              v36 = v40;
          }
        }
        if (v36 < 0)
        {
          v41 = *(_QWORD *)a1;
          v42 = *(_DWORD *)a2;
          a1[2] = a2[2];
          *(_DWORD *)a1 = v42;
          *(_DWORD *)a2 = v41;
          a2[2] = WORD2(v41);
        }
      }
    }
  }
  return result;
}

char ***sub_223ECE778(char ***a1, _QWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  __int16 v16;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = (v6 - *v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_2236EA0B4();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_223174E94();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        v15 = *((_DWORD *)v6 - 2);
        v6 -= 8;
        v16 = *((_WORD *)v6 + 2);
        *((_DWORD *)v14 - 2) = v15;
        v14 -= 8;
        *((_WORD *)v14 + 2) = v16;
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v7 = v6 + 8;
  }
  v4[1] = v7;
  return a1;
}

void sub_223ECE884(unsigned __int16 **a1@<X0>, int8x16_t **a2@<X8>)
{
  char *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int *v9;
  int v11;
  int v12;
  int8x16_t *v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  _BOOL8 v29;
  char *v30;
  __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int8x16_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  int8x16_t *v43;
  unint64_t v44;
  int8x16_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  int8x16_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t *v60;
  int32x4_t *v61;
  uint64_t v62;
  int8x16_t v63;
  int8x16_t v64;
  __int32 v65;
  uint64_t v66;
  uint64_t v67;
  int32x4_t *v68;
  int8x16_t *v69;
  uint64_t v70;
  int8x16_t v71;
  int8x16_t v72;
  char *v73;
  int v74;
  int8x16_t *v75;
  char *v76;
  unint64_t v77;
  int8x16_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 v85;
  __int32 v86;
  char *v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  __int32 v96;
  int8x16_t *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  int8x16_t *v101;
  int8x16_t *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  int8x16_t *v106;
  uint64_t v107;
  uint64_t v108;
  int8x16_t *v109;
  int8x16_t *v110;
  uint64_t v111;
  int8x16_t v112;
  __int32 v113;
  int8x16_t *v114;
  __int32 *v115;
  __int32 v116;
  int8x16_t *v117;
  BOOL v118;
  unint64_t v119;
  uint64_t v120;
  int8x16_t *v121;
  int8x16_t *v122;
  uint64_t v123;
  int8x16_t v124;
  int v125;
  int v126;
  void *__p;
  int8x16_t *v128;
  __int8 *v129;
  void *v130;
  char *v131;
  char *v132;

  v3 = (char *)*a1;
  v4 = ((char *)a1[1] - (char *)*a1) >> 3;
  if (v4 == 1)
  {
    v5 = *((unsigned __int16 *)v3 + 1);
    v6 = *((unsigned __int16 *)v3 + 2);
    v7 = *(unsigned __int16 *)v3;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v8 = v7 << 16;
    if (v5 == v6)
    {
      v9 = (int *)operator new(4uLL);
      *a2 = (int8x16_t *)v9;
      *v9++ = v8 | v5;
      a2[1] = (int8x16_t *)v9;
      a2[2] = (int8x16_t *)v9;
    }
    else
    {
      v17 = operator new(8uLL);
      a2[1] = (int8x16_t *)(v17 + 2);
      a2[2] = (int8x16_t *)(v17 + 2);
      *v17 = v8 | v5;
      v17[1] = v8 | v6;
      *a2 = (int8x16_t *)v17;
    }
    return;
  }
  if (!v4)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v11 = *((unsigned __int16 *)a1 + 13);
  v12 = *((__int16 *)a1 + 12);
  v130 = 0;
  v131 = 0;
  v132 = 0;
  if (v11 == (unsigned __int16)v12)
  {
    v13 = 0;
    v14 = 0;
    __p = 0;
    v128 = 0;
    v129 = 0;
    v15 = *((_DWORD *)a1 + 6);
    if ((unsigned __int16)v15 == HIWORD(v15))
      goto LABEL_8;
LABEL_14:
    v19 = v15;
    do
    {
      v20 = *((__int16 *)a1 + 12);
      v21 = ((__int16)v19 - v20);
      if ((__int16)v19 - v20 >= 0)
      {
        v22 = a1[4];
        if (v21 < ((char *)a1[5] - (char *)v22) >> 4)
        {
          v23 = &v22[8 * v21];
          v24 = *((_QWORD *)v23 + 1);
          if (*(_QWORD *)v23 != v24)
          {
            v25 = (char *)*a1;
            v126 = (*a1)[4 * *(_QWORD *)v23 + 1] | ((unsigned __int16)v19 << 16);
            sub_223ECF108((uint64_t)&v130, &v126, 1);
            v125 = (v19 << 16) | *(unsigned __int16 *)&v25[8 * v24 - 4];
            sub_223ECF108((uint64_t)&__p, &v125, 0);
          }
        }
      }
      ++v19;
    }
    while ((unsigned __int16)v19 != HIWORD(v15));
    v14 = v131;
    v13 = v128;
    if (v128[-1].u16[6] == *((unsigned __int16 *)v131 - 2))
      goto LABEL_9;
    goto LABEL_21;
  }
  v18 = ((__int16)v11 - v12);
  v14 = (char *)operator new(4 * v18);
  v130 = v14;
  v131 = v14;
  v132 = &v14[4 * v18];
  v13 = (int8x16_t *)operator new(4 * v18);
  __p = v13;
  v128 = v13;
  v129 = &v13->i8[4 * v18];
  v15 = *((_DWORD *)a1 + 6);
  if ((unsigned __int16)v15 != HIWORD(v15))
    goto LABEL_14;
LABEL_8:
  if (v13[-1].u16[6] == *((unsigned __int16 *)v14 - 2))
  {
LABEL_9:
    if (v13[-1].u16[7] == *((unsigned __int16 *)v14 - 1))
      v16 = -1;
    else
      v16 = 0;
    goto LABEL_22;
  }
LABEL_21:
  v16 = 0;
LABEL_22:
  v26 = &v14[4 * v16];
  v27 = (char *)v130;
  v28 = (unint64_t)__p;
  v29 = *(unsigned __int16 *)__p == *(unsigned __int16 *)v130
     && *((unsigned __int16 *)__p + 1) == *((unsigned __int16 *)v130 + 1);
  v30 = (char *)v130 + 4 * v29;
  *a2 = (int8x16_t *)__p;
  a2[1] = v13;
  v31 = v129;
  a2[2] = (int8x16_t *)v129;
  v128 = 0;
  v129 = 0;
  __p = 0;
  v32 = v26 - v30;
  if (v26 - v30 >= 1)
  {
    v33 = v32 >> 2;
    v34 = (int64_t)v13->i64 - v28;
    v35 = (uint64_t)((uint64_t)v13->i64 - v28) >> 2;
    v36 = (int8x16_t *)(v28 + (((unint64_t)v13 - v28) & 0xFFFFFFFFFFFFFFFCLL));
    if (v32 >> 2 > (v31 - (__int8 *)v13) >> 2)
    {
      v37 = v33 + v35;
      if ((unint64_t)(v33 + v35) >> 62)
        sub_2236EA0B4();
      v38 = (uint64_t)&v31[-v28];
      if (v38 >> 1 > v37)
        v37 = v38 >> 1;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
        v39 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        if (v39 >> 62)
          sub_223174E94();
        v40 = v39;
        v41 = (char *)operator new(4 * v39);
        v33 = v32 >> 2;
        v26 = &v14[4 * v16];
        v39 = v40;
        v42 = (unint64_t)&v41[4 * v35];
        v43 = (int8x16_t *)(v42 + 4 * (v32 >> 2));
        v44 = v32 - 4;
        if ((unint64_t)(v32 - 4) < 0x6C)
          goto LABEL_36;
      }
      else
      {
        v41 = 0;
        v42 = 4 * v35;
        v43 = (int8x16_t *)(4 * v35 + 4 * v33);
        v44 = v32 - 4;
        if ((unint64_t)(v32 - 4) < 0x6C)
        {
LABEL_36:
          v45 = (int8x16_t *)v42;
          goto LABEL_54;
        }
      }
      if (v42 >= (unint64_t)v26
        || (v45 = (int8x16_t *)v42,
            &v14[4 * v16 - (v32 & 0xFFFFFFFFFFFFFFFCLL)] >= &v41[(v34 & 0xFFFFFFFFFFFFFFFCLL)
                                                               + (v32 & 0xFFFFFFFFFFFFFFFCLL)]))
      {
        v66 = (v44 >> 2) + 1;
        v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
        v45 = (int8x16_t *)(v42 + v67);
        v26 -= v67;
        v68 = (int32x4_t *)&v14[4 * v16 - 16];
        v69 = (int8x16_t *)&v41[4 * v35 + 16];
        v70 = v66 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v71 = (int8x16_t)vrev64q_s32(*v68);
          v72 = (int8x16_t)vrev64q_s32(v68[-1]);
          v69[-1] = vextq_s8(v71, v71, 8uLL);
          *v69 = vextq_s8(v72, v72, 8uLL);
          v68 -= 2;
          v69 += 2;
          v70 -= 8;
        }
        while (v70);
        if (v66 == (v66 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_56:
          v75 = *a2;
          if (*a2 == v36)
            goto LABEL_65;
          v76 = (char *)((v34 & 0xFFFFFFFFFFFFFFFCLL) + v28);
          v77 = v76 - (char *)v75 - 4;
          if (v77 >= 0x3C)
          {
            v78 = (int8x16_t *)(v28 + (((unint64_t)v13 - v28) & 0xFFFFFFFFFFFFFFFCLL));
            if ((unint64_t)(v76 - &v41[v34 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
            {
              v79 = (v77 >> 2) + 1;
              v80 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
              v78 = (int8x16_t *)((char *)v36 - v80);
              v42 -= v80;
              v81 = 4 * v35 - 16;
              v82 = &v41[v81];
              v83 = (__int128 *)(v28 + v81);
              v84 = v79 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v85 = *v83;
                *((_OWORD *)v82 - 1) = *(v83 - 1);
                *(_OWORD *)v82 = v85;
                v82 -= 32;
                v83 -= 2;
                v84 -= 8;
              }
              while (v84);
              if (v79 == (v79 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_64;
            }
          }
          else
          {
            v78 = (int8x16_t *)(v28 + (((unint64_t)v13 - v28) & 0xFFFFFFFFFFFFFFFCLL));
          }
          do
          {
            v86 = v78[-1].i32[3];
            v78 = (int8x16_t *)((char *)v78 - 4);
            *(_DWORD *)(v42 - 4) = v86;
            v42 -= 4;
          }
          while (v78 != v75);
LABEL_64:
          v13 = a2[1];
LABEL_65:
          v87 = &v41[4 * v39];
          if (v13 != v36)
          {
            v88 = (char *)((v34 & 0xFFFFFFFFFFFFFFFCLL) + v28);
            v89 = (char *)v13 - v88 - 4;
            if (v89 < 0x3C)
              goto LABEL_109;
            if ((unint64_t)(&v41[(v34 & 0xFFFFFFFFFFFFFFFCLL) + (v32 & 0xFFFFFFFFFFFFFFFCLL)] - v88) < 0x20)
              goto LABEL_109;
            v90 = (v89 >> 2) + 1;
            v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
            v36 = (int8x16_t *)((char *)v36 + v91);
            v43 = (int8x16_t *)((char *)v43 + v91);
            v92 = &v41[4 * v35 + 16 + 4 * v33];
            v93 = (__int128 *)(4 * v35 + v28 + 16);
            v94 = v90 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v95 = *v93;
              *((_OWORD *)v92 - 1) = *(v93 - 1);
              *(_OWORD *)v92 = v95;
              v92 += 32;
              v93 += 2;
              v94 -= 8;
            }
            while (v94);
            if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_109:
              do
              {
                v96 = v36->i32[0];
                v36 = (int8x16_t *)((char *)v36 + 4);
                v43->i32[0] = v96;
                v43 = (int8x16_t *)((char *)v43 + 4);
              }
              while (v36 != v13);
            }
          }
          v97 = *a2;
          *a2 = (int8x16_t *)v42;
          a2[1] = v43;
          a2[2] = (int8x16_t *)v87;
          if (v97)
            operator delete(v97);
          goto LABEL_96;
        }
      }
LABEL_54:
      v73 = v26 - 4;
      do
      {
        v74 = *(_DWORD *)v73;
        v73 -= 4;
        v45->i32[0] = v74;
        v45 = (int8x16_t *)((char *)v45 + 4);
      }
      while (v45 != v43);
      goto LABEL_56;
    }
    v46 = (char *)v13 - (char *)v36;
    v47 = ((char *)v13 - (char *)v36) >> 2;
    if (v47 >= v33)
    {
      v48 = &v26[-4 * v33];
      v54 = v13;
    }
    else
    {
      v48 = &v26[-4 * v47];
      if (v48 == v30)
      {
        v54 = v13;
      }
      else
      {
        v49 = 4 * v16;
        v50 = &v14[4 * v16];
        v51 = &v27[4 * v29];
        v52 = v50 - v51 - v46 - 4;
        v53 = &v26[-4 * v47];
        v54 = v13;
        if (v52 < 0x8C)
          goto LABEL_110;
        if (v13 < (int8x16_t *)v48)
        {
          v55 = (v50 - &v51[v46] - 4) & 0xFFFFFFFFFFFFFFFCLL;
          v56 = (unint64_t)v13->u64 + v55 + 4;
          v57 = (unint64_t)&v14[v49 - (v46 + v55) - 4];
          v53 = &v26[-4 * v47];
          v54 = v13;
          if (v57 < v56)
            goto LABEL_110;
        }
        v58 = (v52 >> 2) + 1;
        v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
        v53 = &v48[-v59];
        v54 = (int8x16_t *)((char *)v13 + v59);
        v60 = v13 + 1;
        v61 = (int32x4_t *)&v14[v49 - 4 * v47 - 16];
        v62 = v58 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v63 = (int8x16_t)vrev64q_s32(*v61);
          v64 = (int8x16_t)vrev64q_s32(v61[-1]);
          v60[-1] = vextq_s8(v63, v63, 8uLL);
          *v60 = vextq_s8(v64, v64, 8uLL);
          v60 += 2;
          v61 -= 2;
          v62 -= 8;
        }
        while (v62);
        if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_110:
          do
          {
            v65 = *((_DWORD *)v53 - 1);
            v53 -= 4;
            v54->i32[0] = v65;
            v54 = (int8x16_t *)((char *)v54 + 4);
          }
          while (v53 != v30);
        }
      }
      a2[1] = v54;
      if (v46 < 1)
        goto LABEL_96;
    }
    v98 = &v36->i8[4 * v33];
    v99 = (char *)((char *)v54 - v98);
    v100 = ((char *)v54 - v98) >> 2;
    v101 = (int8x16_t *)((char *)v54 - 4 * v33);
    v102 = v54;
    if (v101 < v13)
    {
      v103 = &v99[v34 & 0xFFFFFFFFFFFFFFFCLL];
      v104 = (unint64_t)&v103[v28 + 4];
      if ((unint64_t)v13 > v104)
        v104 = (unint64_t)v13;
      v105 = v104 + ~v28 - (_QWORD)v103;
      v106 = (int8x16_t *)((char *)v54 - 4 * v33);
      v102 = v54;
      if (v105 < 0x2C)
        goto LABEL_111;
      v106 = (int8x16_t *)((char *)v54 - 4 * v33);
      v102 = v54;
      if ((unint64_t)&v98[-(v34 & 0xFFFFFFFFFFFFFFFCLL) - v28] < 0x20)
        goto LABEL_111;
      v107 = (v105 >> 2) + 1;
      v108 = 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
      v106 = (int8x16_t *)((char *)v101 + v108);
      v102 = (int8x16_t *)((char *)v54 + v108);
      v109 = v54 + 1;
      v110 = (int8x16_t *)(4 * v100 + 4 * v35 + v28 + 16);
      v111 = v107 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v112 = *v110;
        v109[-1] = v110[-1];
        *v109 = v112;
        v109 += 2;
        v110 += 2;
        v111 -= 8;
      }
      while (v111);
      if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_111:
        do
        {
          v113 = v106->i32[0];
          v106 = (int8x16_t *)((char *)v106 + 4);
          v102->i32[0] = v113;
          v102 = (int8x16_t *)((char *)v102 + 4);
        }
        while (v106 < v13);
      }
    }
    a2[1] = v102;
    if (v54 != (int8x16_t *)v98)
    {
      if ((unint64_t)(v99 - 4) < 0x3C || (v34 & 0xFFFFFFFFFFFFFFFCLL) + v28 - (unint64_t)v98 < 0x20)
      {
        v114 = v54;
LABEL_89:
        v115 = &v114[-1].i32[3];
        do
        {
          v116 = v101[-1].i32[3];
          v101 = (int8x16_t *)((char *)v101 - 4);
          *v115-- = v116;
        }
        while (v101 != v36);
        goto LABEL_91;
      }
      v119 = ((unint64_t)(v99 - 4) >> 2) + 1;
      v120 = 4 * (v119 & 0x7FFFFFFFFFFFFFF8);
      v114 = (int8x16_t *)((char *)v54 - v120);
      v101 = (int8x16_t *)((char *)v101 - v120);
      v121 = (int8x16_t *)(4 * v100 + 4 * v35 + v28 - 16);
      v122 = v54 - 1;
      v123 = v119 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v124 = *v121;
        v122[-1] = v121[-1];
        *v122 = v124;
        v121 -= 2;
        v122 -= 2;
        v123 -= 8;
      }
      while (v123);
      if (v119 != (v119 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_89;
    }
LABEL_91:
    if (v48 != v26)
    {
      v117 = (int8x16_t *)&v14[4 * v16 - 4];
      do
      {
        if (v117 != v36)
          v36->i32[0] = v117->i32[0];
        v36 = (int8x16_t *)((char *)v36 + 4);
        v118 = v117 == (int8x16_t *)v48;
        v117 = (int8x16_t *)((char *)v117 - 4);
      }
      while (!v118);
    }
  }
LABEL_96:
  if (__p)
  {
    v128 = (int8x16_t *)__p;
    operator delete(__p);
  }
  if (v130)
  {
    v131 = (char *)v130;
    operator delete(v130);
  }
}

void sub_223ECF084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223ECF108(uint64_t a1, _WORD *a2, int a3)
{
  _BYTE *v5;
  _DWORD *v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  int v12;
  _WORD *v13;
  unint64_t v14;
  _WORD *v15;
  BOOL v16;
  __int16 v17;
  __int16 v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _DWORD *v29;
  unint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;

  v5 = *(_BYTE **)a1;
  v6 = *(_DWORD **)(a1 + 8);
  v7 = (uint64_t)v6 - *(_QWORD *)a1;
  if ((unint64_t)v7 >= 5)
  {
    v8 = a2[1];
    v9 = *((_WORD *)v6 - 1);
    v10 = *((_WORD *)v6 - 3) - v9;
    v11 = v8 - v9;
    v12 = (unsigned __int16)(v11 * (*((_WORD *)v6 - 2) - *((_WORD *)v6 - 4)) + v10 * (*a2 - *((_WORD *)v6 - 2))) >> 15;
    if (!(v11 * (*((_WORD *)v6 - 2) - *((_WORD *)v6 - 4)) + v10 * (*a2 - *((_WORD *)v6 - 2))))
      v12 = 2;
    if (v12 != a3)
    {
      v13 = (_WORD *)v6 - 3;
      v14 = v7 - 4;
      do
      {
        v15 = v13;
        v7 = v14;
        v16 = v14 > 4;
        v14 -= 4;
        if (!v16)
          break;
        v17 = *(v13 - 1);
        v18 = *v13;
        v13 -= 2;
        v20 = (unsigned __int16)((v8 - v18) * (v17 - *(v15 - 3)) + (*(v15 - 2) - v18) * (*a2 - v17));
        v19 = v20 == 0;
        v21 = v20 >> 15;
        if (v19)
          v21 = 2;
      }
      while (v21 != a3);
      v6 = v15 + 1;
      *(_QWORD *)(a1 + 8) = v15 + 1;
    }
  }
  v22 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 < v22)
  {
    *v6 = *(_DWORD *)a2;
    v23 = v6 + 1;
    goto LABEL_36;
  }
  v24 = v7 >> 2;
  v25 = (v7 >> 2) + 1;
  if (v25 >> 62)
    sub_2236EA0B4();
  v26 = v22 - (_QWORD)v5;
  if (v26 >> 1 > v25)
    v25 = v26 >> 1;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
    v27 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v27 = v25;
  if (v27)
  {
    if (v27 >> 62)
      sub_223174E94();
    v28 = operator new(4 * v27);
  }
  else
  {
    v28 = 0;
  }
  v29 = &v28[4 * v24];
  *v29 = *(_DWORD *)a2;
  v23 = v29 + 1;
  if (v6 != (_DWORD *)v5)
  {
    v30 = (char *)v6 - v5 - 4;
    if (v30 >= 0x2C)
    {
      if ((char *)v6 - v28 - (v7 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v32 = (v30 >> 2) + 1;
        v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
        v31 = &v6[v33 / 0xFFFFFFFFFFFFFFFCLL];
        v29 = (_DWORD *)((char *)v29 - v33);
        v34 = &v28[4 * v24 - 16];
        v35 = (__int128 *)(v6 - 4);
        v36 = v32 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v37 = *v35;
          *(v34 - 1) = *(v35 - 1);
          *v34 = v37;
          v34 -= 2;
          v35 -= 2;
          v36 -= 8;
        }
        while (v36);
        if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_33;
      }
      else
      {
        v31 = v6;
      }
    }
    else
    {
      v31 = v6;
    }
    do
    {
      v38 = *--v31;
      *--v29 = v38;
    }
    while (v31 != (_DWORD *)v5);
LABEL_33:
    v5 = *(_BYTE **)a1;
  }
  *(_QWORD *)a1 = v29;
  *(_QWORD *)(a1 + 8) = v23;
  *(_QWORD *)(a1 + 16) = &v28[4 * v27];
  if (v5)
    operator delete(v5);
LABEL_36:
  *(_QWORD *)(a1 + 8) = v23;
}

void sub_223ECF32C(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  __int16 v20;
  unsigned int v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  void *__p[2];
  char *v35;
  int v36;
  void *v37[2];
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  unint64_t v45;

  if (a2)
  {
    v5 = a1;
    v6 = *(unsigned int *)(a1 + 36);
    v44 = 0uLL;
    v45 = 0;
    sub_2232EA6AC((uint64_t)&v44, a2);
    if ((_DWORD)v6)
    {
      v7 = 0;
      do
      {
        __p[0] = 0;
        __p[1] = 0;
        v35 = 0;
        __p[0] = operator new(8 * v6);
        __p[1] = __p[0];
        v35 = (char *)__p[0] + 8 * v6;
        v8 = *((_QWORD *)&v44 + 1);
        if (*((_QWORD *)&v44 + 1) < v45)
        {
          **((_QWORD **)&v44 + 1) = 0;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          *(_OWORD *)v8 = *(_OWORD *)__p;
          *(_QWORD *)(v8 + 16) = v35;
          *((_QWORD *)&v44 + 1) = v8 + 24;
        }
        else
        {
          *((_QWORD *)&v44 + 1) = sub_223793D38((char **)&v44, (uint64_t)__p);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        ++v7;
      }
      while (v7 != a2);
    }
    else
    {
      v9 = 0;
      do
      {
        __p[0] = 0;
        __p[1] = 0;
        v35 = 0;
        v10 = *((_QWORD *)&v44 + 1);
        if (*((_QWORD *)&v44 + 1) < v45)
        {
          **((_QWORD **)&v44 + 1) = 0;
          *(_QWORD *)(v10 + 8) = 0;
          *(_QWORD *)(v10 + 16) = 0;
          *(_OWORD *)v10 = *(_OWORD *)__p;
          *(_QWORD *)(v10 + 16) = v35;
          *((_QWORD *)&v44 + 1) = v10 + 24;
        }
        else
        {
          *((_QWORD *)&v44 + 1) = sub_223793D38((char **)&v44, (uint64_t)__p);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        ++v9;
      }
      while (v9 != a2);
    }
    v11 = v44;
    v12 = *(_DWORD *)(v5 + 32);
    v13 = *(_DWORD *)(v5 + 36);
    if (v12 <= v13)
      v12 = *(_DWORD *)(v5 + 36);
    if (v12 >> 15)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/RLRegionUtil.cpp", 234, (uint64_t)"static_cast<size_t>(std::numeric_limits<T>::max()) >= *range::max_element(image.Size())", 87, (uint64_t)&unk_2245AAA31, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v13 = *(_DWORD *)(v5 + 36);
    }
    v30 = a3;
    if ((_WORD)v13)
    {
      v14 = *(_DWORD *)(v5 + 32);
      if (v14 << 16)
      {
        v15 = 0;
        v31 = (__int16)v14;
        do
        {
          v16 = v5;
          v17 = (unsigned __int8 *)(*(_QWORD *)(v5 + 24) + (*(_DWORD *)(v5 + 44) * (__int16)v15));
          v18 = &v17[v31];
          v19 = v17;
          do
          {
            v20 = (__int16)v19;
            v21 = *v19;
            while (*v19 == v21)
            {
              if (++v19 == v18)
              {
                v19 = &v17[v31];
                break;
              }
            }
            if (v21 < a2)
            {
              LOWORD(__p[0]) = v15;
              WORD1(__p[0]) = v20 - (_WORD)v17;
              WORD2(__p[0]) = (_WORD)v19 + ~(_WORD)v17;
              sub_223ECBBF0(v11 + 24 * v21, (__int16 *)__p);
            }
          }
          while (v19 != v18);
          ++v15;
          v5 = v16;
        }
        while (v15 != (unsigned __int16)v13);
      }
    }
    v22 = *((_QWORD *)&v11 + 1);
    v32 = 0uLL;
    v33 = 0;
    sub_223720F0C((uint64_t)&v32, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v11 + 1) - v11) >> 3));
    if ((_QWORD)v11 != *((_QWORD *)&v11 + 1))
    {
      v23 = (__int128 *)v11;
      do
      {
        v24 = *v23;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
        v44 = v24;
        v25 = *((_QWORD *)v23 + 2);
        *((_QWORD *)v23 + 2) = 0;
        v45 = v25;
        sub_223ECB71C((__int16 **)__p, (uint64_t)&v44);
        if ((_QWORD)v44)
        {
          *((_QWORD *)&v44 + 1) = v44;
          operator delete((void *)v44);
        }
        v26 = *((_QWORD *)&v32 + 1);
        if (*((_QWORD *)&v32 + 1) >= v33)
        {
          *((_QWORD *)&v32 + 1) = sub_223721094((void **)&v32, (uint64_t)__p);
          if (v37[0])
          {
            v37[1] = v37[0];
            operator delete(v37[0]);
          }
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8) = 0;
          *(_QWORD *)(v26 + 16) = 0;
          *(_QWORD *)v26 = 0;
          *(_OWORD *)v26 = *(_OWORD *)__p;
          *(_QWORD *)(v26 + 16) = v35;
          __p[0] = 0;
          __p[1] = 0;
          v35 = 0;
          *(_DWORD *)(v26 + 24) = v36;
          *(_QWORD *)(v26 + 40) = 0;
          *(_QWORD *)(v26 + 48) = 0;
          *(_QWORD *)(v26 + 32) = 0;
          *(_OWORD *)(v26 + 32) = *(_OWORD *)v37;
          *(_QWORD *)(v26 + 48) = v38;
          v37[0] = 0;
          v37[1] = 0;
          v38 = 0;
          *(_QWORD *)(v26 + 56) = v39;
          *(_DWORD *)(v26 + 64) = v40;
          *(_DWORD *)(v26 + 68) = v41;
          *(_BYTE *)(v26 + 72) = 0;
          *(_BYTE *)(v26 + 80) = 0;
          if (v43)
          {
            *(_QWORD *)(v26 + 72) = v42;
            *(_BYTE *)(v26 + 80) = 1;
          }
          *((_QWORD *)&v32 + 1) = v26 + 88;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v23 = (__int128 *)((char *)v23 + 24);
      }
      while (v23 != *((__int128 **)&v11 + 1));
    }
    *(_OWORD *)v30 = v32;
    v30[2] = v33;
    if ((_QWORD)v11)
    {
      if ((_QWORD)v11 != *((_QWORD *)&v11 + 1))
      {
        v27 = *((_QWORD *)&v11 + 1);
        do
        {
          v29 = *(void **)(v27 - 24);
          v27 -= 24;
          v28 = v29;
          if (v29)
          {
            *(_QWORD *)(v22 - 16) = v28;
            operator delete(v28);
          }
          v22 = v27;
        }
        while (v27 != (_QWORD)v11);
      }
      operator delete((void *)v11);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_223ECF778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2237073E0((void **)va1);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

void sub_223ECF794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

void sub_223ECF7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  sub_22317C838((void **)(v22 - 128));
  _Unwind_Resume(a1);
}

void sub_223ECF838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223ECF84C(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t *v3;
  __int16 v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int16 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 *v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t *v54;
  int v55;
  int v56;

  v3 = *(uint64_t **)a2;
  v54 = *(uint64_t **)(a2 + 8);
  if (*(uint64_t **)a2 != v54)
  {
    v4 = a3;
    v5 = result;
    v6 = *(_QWORD *)(result + 56);
    v53 = (int)(((v6 >> 16) & 0xFFFF0000) - 0x10000) >> 16;
    v56 = (__int16)(v6 - 1);
    v7 = HIWORD(a3);
    do
    {
      v8 = *v3;
      v9 = HIDWORD(*v3);
      v10 = (unint64_t)*v3 >> 16;
      if ((unsigned __int16)(v9 + 1) != (unsigned __int16)v10)
      {
        v11 = (__int16)v8;
        if ((unsigned __int16)*v3)
        {
          if (v53 == (__int16)v8)
          {
            while (1)
            {
              v50 = *(_DWORD *)(v5 + 64);
              v49 = *(_DWORD *)(v5 + 68);
              v51 = *(_QWORD *)(v5 + 24);
              if (!v51)
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2245AAA31, 0, (void (*)(void **))sub_22457406C);
                if ((result & 1) != 0)
                  break;
              }
              v48 = v51 + (v50 * (__int16)v10 + v49 * v11);
              *(_BYTE *)(v48 + 2) = v7;
              *(_WORD *)v48 = v4;
              LODWORD(v48) = (unsigned __int16)v10;
              LODWORD(v10) = v10 + 1;
              if ((_DWORD)v48 == (unsigned __int16)v9)
                goto LABEL_3;
            }
          }
          else
          {
            v55 = (__int16)(v8 - 1);
            v52 = (__int16)(v8 + 1);
            while (1)
            {
              v12 = (__int16)v10;
              if ((_WORD)v10)
              {
                if (v56 != (__int16)v10)
                {
                  v13 = *(__int16 *)(a2 + 24);
                  v14 = (v55 - v13);
                  if (v55 - v13 >= 0)
                  {
                    v15 = *(_QWORD *)(a2 + 32);
                    v16 = (*(_QWORD *)(a2 + 40) - v15) >> 4;
                    if (v16 > v14)
                    {
                      v17 = (uint64_t *)(v15 + 16 * v14);
                      v18 = *v17;
                      v19 = v17[1];
                      if (*v17 != v19)
                      {
                        v20 = *(uint64_t **)a2;
                        v21 = 8 * v18;
                        v22 = (__int16 *)(*(_QWORD *)a2 + 8 * v18 + 4);
                        v23 = 8 * v19 - v21;
                        while (*(v22 - 1) <= (__int16)v10)
                        {
                          if (*v22 >= (__int16)v10)
                          {
                            v24 = (v11 - v13);
                            if (v11 - v13 >= 0 && v16 > v24)
                            {
                              v25 = (uint64_t *)(v15 + 16 * v24);
                              v26 = *v25;
                              v27 = v25[1];
                              if (v26 != v27)
                              {
                                v28 = (__int16)(v10 - 1);
                                v29 = 8 * v26;
                                v30 = (__int16 *)&v20[v26] + 2;
                                v31 = 8 * v27 - v29;
                                v32 = v31;
                                v33 = v30;
                                while (*(v33 - 1) <= v28)
                                {
                                  if (*v33 >= v28)
                                  {
                                    LODWORD(v10) = (__int16)(v10 + 1);
                                    while (*(v30 - 1) <= (int)v10)
                                    {
                                      if (*v30 >= (int)v10)
                                      {
                                        v34 = (v52 - v13);
                                        if ((v34 & 0x80000000) == 0 && v16 > v34)
                                        {
                                          v35 = (uint64_t *)(v15 + 16 * v34);
                                          v36 = *v35;
                                          v37 = v35[1];
                                          if (v36 != v37)
                                          {
                                            v38 = 8 * v36;
                                            v39 = (__int16 *)&v20[v36] + 2;
                                            v40 = 8 * v37 - v38;
                                            do
                                            {
                                              if (*(v39 - 1) > v12)
                                                break;
                                              if (*v39 >= v12)
                                                goto LABEL_41;
                                              v39 += 4;
                                              v40 -= 8;
                                            }
                                            while (v40);
                                          }
                                        }
                                        goto LABEL_38;
                                      }
                                      v30 += 4;
                                      v31 -= 8;
                                      if (!v31)
                                        goto LABEL_38;
                                    }
                                    goto LABEL_38;
                                  }
                                  v33 += 4;
                                  v32 -= 8;
                                  if (!v32)
                                    goto LABEL_38;
                                }
                              }
                            }
                            break;
                          }
                          v22 += 4;
                          v23 -= 8;
                          if (!v23)
                            break;
                        }
                      }
                    }
                  }
                }
              }
LABEL_38:
              v41 = *(_DWORD *)(v5 + 64);
              v42 = *(_DWORD *)(v5 + 68);
              v10 = *(_QWORD *)(v5 + 24);
              if (!v10)
              {
                result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2245AAA31, 0, (void (*)(void **))sub_22457406C);
                if ((_DWORD)result)
                  break;
              }
              v43 = v10 + (v41 * v12 + v42 * v11);
              *(_BYTE *)(v43 + 2) = v7;
              *(_WORD *)v43 = v4;
              LOWORD(v10) = v12 + 1;
LABEL_41:
              if ((unsigned __int16)v12 == (unsigned __int16)v9)
                goto LABEL_3;
            }
          }
        }
        else
        {
          while (1)
          {
            v45 = *(_DWORD *)(v5 + 64);
            v46 = *(_DWORD *)(v5 + 68);
            v47 = *(_QWORD *)(v5 + 24);
            if (!v47)
            {
              result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2245AAA31, 0, (void (*)(void **))sub_22457406C);
              if ((result & 1) != 0)
                break;
            }
            v44 = v47 + (v45 * (__int16)v10 + v46 * v11);
            *(_BYTE *)(v44 + 2) = v7;
            *(_WORD *)v44 = v4;
            LODWORD(v44) = (unsigned __int16)v10;
            LODWORD(v10) = v10 + 1;
            if ((_DWORD)v44 == (unsigned __int16)v9)
              goto LABEL_3;
          }
        }
        abort();
      }
LABEL_3:
      ++v3;
    }
    while (v3 != v54);
  }
  return result;
}

uint64_t sub_223ECFC08(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[5];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_223ECFC88(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float32x4_t a5@<Q1>)
{
  unint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x2_t v25;
  char *v26;
  char *v27;
  size_t prime;
  void *v29;
  BOOL v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t **v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  size_t v45;
  int8x8_t v46;
  BOOL v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  unsigned int *i;
  float v52;
  _BOOL8 v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  void *v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t v60;
  void **v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  void *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  void **v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int64_t v89;
  size_t v90;
  uint64_t v91;
  size_t v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  _QWORD *v99;
  void *v100;
  int8x16_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x2_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  void *v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  float32x4_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  int v135;
  double v136;
  int v137;
  double v138;
  int v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  char *v146;
  char *v147;
  void *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  void *v154;
  void **v155;
  void *v156;
  unint64_t v157;
  void *__p[2];
  void *v159[2];
  float v160;
  void *v161;
  char *v162;
  void *v163;
  _OWORD v164[2];
  unsigned int v165;

  v11 = *a1;
  v10 = a1[1];
  v12 = v10 - *a1;
  if (v12 != a2[1] - *a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/RobustPointCloudAlignment.cpp", 79, (uint64_t)"src.size() == dst.size()", 24, (uint64_t)"number of elements mismatch", 27, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_188;
    }
    v11 = *a1;
    v10 = a1[1];
    v12 = v10 - *a1;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) > 2)
    goto LABEL_7;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/RobustPointCloudAlignment.cpp", 80, (uint64_t)"src.size() >= 3", 15, (uint64_t)"at least 3 point pairs are required", 35, (void (*)(void **))sub_22457406C))
  {
LABEL_188:
    abort();
  }
  v11 = *a1;
  v10 = a1[1];
LABEL_7:
  v13 = 0uLL;
  memset(v164, 0, sizeof(v164));
  v165 = 1065353216;
  v14 = (v10 - v11) >> 2;
  v143 = a3;
  v144 = 0xAAAAAAAAAAAAAAABLL * v14 - 1;
  if (0xAAAAAAAAAAAAAAABLL * v14 == 1)
  {
    prime = 0;
    *(_OWORD *)__p = 0uLL;
    *(_OWORD *)v159 = 0uLL;
    v160 = 1.0;
  }
  else
  {
    v15 = 0;
    v16 = 12;
    do
    {
      v17 = v15++;
      v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
      if (v15 != v5)
      {
        v18 = *a1 + 12 * v17;
        v19 = *a2 + 12 * v17;
        v20 = v16;
        v21 = v15;
        do
        {
          v22 = *a1 + v20;
          v13.i64[0] = *(_QWORD *)v22;
          v13.i32[2] = *(_DWORD *)(v22 + 8);
          a5.i64[0] = *(_QWORD *)v18;
          a5.i32[2] = *(_DWORD *)(v18 + 8);
          v13 = vsubq_f32(v13, a5);
          v23 = *a2 + v20;
          v24 = (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
          v13.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.f32, 1), *(float32x2_t *)v13.f32, 1), *(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32).f32[0]);
          a5.i64[0] = *(_QWORD *)v23;
          a5.i32[2] = *(_DWORD *)(v23 + 8);
          v24.i64[0] = *(_QWORD *)v19;
          v24.i32[2] = *(_DWORD *)(v19 + 8);
          a5 = vsubq_f32(a5, v24);
          v25 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
          if (vabds_f32(sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a5.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 1), *(float32x2_t *)a5.f32, 1), v25, v25).f32[0]), v13.f32[0]) < (float)(a4 + a4))
          {
            LODWORD(v161) = v17;
            v26 = sub_223ED0F94((uint64_t)v164, v17, &v161);
            LODWORD(__p[0]) = v21;
            sub_223ED130C((uint64_t)(v26 + 24), (unsigned int *)__p, __p);
            LODWORD(v161) = v21;
            v27 = sub_223ED0F94((uint64_t)v164, v21, &v161);
            LODWORD(__p[0]) = v17;
            sub_223ED130C((uint64_t)(v27 + 24), (unsigned int *)__p, __p);
          }
          ++v21;
          v20 += 12;
        }
        while (v5 != v21);
      }
      v16 += 12;
    }
    while (v15 != v144);
    prime = *((_QWORD *)&v164[0] + 1);
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v159 = 0u;
    v160 = *(float *)&v165;
    if (*((_QWORD *)&v164[0] + 1) == 1)
    {
      prime = 2;
LABEL_32:
      sub_2231B0668((uint64_t)__p, prime);
      goto LABEL_33;
    }
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v29 = __p[1];
    v30 = (void *)prime >= __p[1];
    if ((void *)prime > __p[1])
      goto LABEL_32;
  }
  else
  {
    v29 = 0;
    v30 = 1;
    if (prime)
      goto LABEL_32;
  }
  if (!v30)
  {
    v31 = vcvtps_u32_f32((float)(unint64_t)v159[1] / v160);
    if ((unint64_t)v29 < 3
      || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
    {
      v31 = std::__next_prime(v31);
    }
    else
    {
      v33 = 1 << -(char)__clz(v31 - 1);
      if (v31 >= 2)
        v31 = v33;
    }
    if (prime <= v31)
      prime = v31;
    if (prime < (unint64_t)v29)
      goto LABEL_32;
  }
LABEL_33:
  v34 = *(uint64_t **)&v164[1];
  if (*(_QWORD *)&v164[1])
  {
    while (1)
    {
      v35 = *((unsigned int *)v34 + 4);
      v36 = (unint64_t)__p[1];
      if (__p[1])
      {
        v37 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v37.i16[0] = vaddlv_u8(v37);
        if (v37.u32[0] > 1uLL)
        {
          v5 = *((unsigned int *)v34 + 4);
          if (__p[1] <= (void *)v35)
            v5 = v35 % (unint64_t)__p[1];
        }
        else
        {
          v5 = (LODWORD(__p[1]) - 1) & v35;
        }
        v38 = (uint64_t **)*((_QWORD *)__p[0] + v5);
        if (v38)
        {
          v39 = *v38;
          if (v39)
          {
            if (v37.u32[0] < 2uLL)
            {
              while (1)
              {
                v41 = v39[1];
                if (v41 == v35)
                {
                  if (*((_DWORD *)v39 + 4) == (_DWORD)v35)
                    goto LABEL_111;
                }
                else if ((v41 & ((unint64_t)__p[1] - 1)) != v5)
                {
                  goto LABEL_54;
                }
                v39 = (uint64_t *)*v39;
                if (!v39)
                  goto LABEL_54;
              }
            }
            do
            {
              v40 = v39[1];
              if (v40 == v35)
              {
                if (*((_DWORD *)v39 + 4) == (_DWORD)v35)
                  goto LABEL_111;
              }
              else
              {
                if ((void *)v40 >= __p[1])
                  v40 %= (unint64_t)__p[1];
                if (v40 != v5)
                  break;
              }
              v39 = (uint64_t *)*v39;
            }
            while (v39);
          }
        }
      }
LABEL_54:
      v42 = operator new(0x40uLL);
      v154 = v42;
      v155 = v159;
      LOBYTE(v156) = 0;
      *v42 = 0;
      v42[1] = v35;
      v43 = *((_DWORD *)v34 + 4);
      *(_OWORD *)(v42 + 3) = 0u;
      v44 = (uint64_t)(v42 + 3);
      *((_DWORD *)v42 + 4) = v43;
      *(_OWORD *)(v42 + 5) = 0u;
      *((_DWORD *)v42 + 14) = *((_DWORD *)v34 + 14);
      v45 = v34[4];
      if (v45 == 1)
        break;
      if ((v45 & (v45 - 1)) != 0)
      {
        v45 = std::__next_prime(v34[4]);
        v46 = (int8x8_t)v42[4];
        v47 = v45 >= *(_QWORD *)&v46;
        if (v45 > *(_QWORD *)&v46)
          goto LABEL_70;
      }
      else
      {
        v46 = 0;
        v47 = 1;
        if (v45)
          goto LABEL_70;
      }
      if (!v47)
      {
        v48 = vcvtps_u32_f32((float)(unint64_t)v42[6] / *((float *)v42 + 14));
        if (*(_QWORD *)&v46 < 3uLL || (v49 = (uint8x8_t)vcnt_s8(v46), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
        {
          v48 = std::__next_prime(v48);
        }
        else
        {
          v50 = 1 << -(char)__clz(v48 - 1);
          if (v48 >= 2)
            v48 = v50;
        }
        if (v45 <= v48)
          v45 = v48;
        if (v45 < *(_QWORD *)&v46)
          goto LABEL_70;
      }
LABEL_71:
      for (i = (unsigned int *)v34[5]; i; i = *(unsigned int **)i)
        sub_223A1AA44(v44, i + 4, i + 4);
      LOBYTE(v156) = 1;
      v52 = (float)((unint64_t)v159[1] + 1);
      if (v36 && (float)(v160 * (float)v36) >= v52)
        goto LABEL_101;
      v53 = (v36 & (v36 - 1)) != 0;
      if (v36 < 3)
        v53 = 1;
      v54 = v53 | (2 * v36);
      v55 = vcvtps_u32_f32(v52 / v160);
      if (v54 <= v55)
        v56 = v55;
      else
        v56 = v54;
      if (v56 == 1)
      {
        v56 = 2;
      }
      else if ((v56 & (v56 - 1)) != 0)
      {
        v56 = std::__next_prime(v56);
      }
      v57 = __p[1];
      if ((void *)v56 > __p[1])
        goto LABEL_85;
      if ((void *)v56 < __p[1])
      {
        v58 = vcvtps_u32_f32((float)(unint64_t)v159[1] / v160);
        if (__p[1] < (void *)3
          || (v59 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
        {
          v58 = std::__next_prime(v58);
        }
        else
        {
          v60 = 1 << -(char)__clz(v58 - 1);
          if (v58 >= 2)
            v58 = v60;
        }
        if (v56 <= v58)
          v56 = v58;
        if (v56 < (unint64_t)v57)
LABEL_85:
          sub_2231B0668((uint64_t)__p, v56);
      }
      v36 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) == 0)
      {
        v5 = (LODWORD(__p[1]) - 1) & v35;
        v61 = (void **)*((_QWORD *)__p[0] + v5);
        v62 = v154;
        if (v61)
          goto LABEL_102;
        goto LABEL_104;
      }
      if (__p[1] > (void *)v35)
      {
        v5 = v35;
LABEL_101:
        v61 = (void **)*((_QWORD *)__p[0] + v5);
        v62 = v154;
        if (v61)
          goto LABEL_102;
        goto LABEL_104;
      }
      v5 = v35 % (unint64_t)__p[1];
      v61 = (void **)*((_QWORD *)__p[0] + v35 % (unint64_t)__p[1]);
      v62 = v154;
      if (v61)
      {
LABEL_102:
        *v62 = *v61;
        *v61 = v154;
        goto LABEL_110;
      }
LABEL_104:
      *v62 = v159[0];
      v159[0] = v154;
      *((_QWORD *)__p[0] + v5) = v159;
      if (*(_QWORD *)v154)
      {
        v63 = *(_QWORD *)(*(_QWORD *)v154 + 8);
        if ((v36 & (v36 - 1)) != 0)
        {
          if (v63 >= v36)
            v63 %= v36;
        }
        else
        {
          v63 &= v36 - 1;
        }
        *((_QWORD *)__p[0] + v63) = v154;
      }
LABEL_110:
      ++v159[1];
LABEL_111:
      v34 = (uint64_t *)*v34;
      if (!v34)
        goto LABEL_112;
    }
    v45 = 2;
LABEL_70:
    sub_2231B0668(v44, v45);
    goto LABEL_71;
  }
LABEL_112:
  sub_223FD0AAC((uint64_t *)__p, (uint64_t)&v161);
  v64 = v159[0];
  if (v159[0])
  {
    do
    {
      v75 = (_QWORD *)*v64;
      v76 = (_QWORD *)v64[5];
      if (v76)
      {
        do
        {
          v77 = (_QWORD *)*v76;
          operator delete(v76);
          v76 = v77;
        }
        while (v77);
      }
      v78 = (void *)v64[3];
      v64[3] = 0;
      if (v78)
        operator delete(v78);
      operator delete(v64);
      v64 = v75;
    }
    while (v75);
  }
  v65 = __p[0];
  __p[0] = 0;
  if (v65)
    operator delete(v65);
  sub_223FD1234(v164, &v161, (uint64_t)&v154);
  v69 = v157;
  v152 = 0;
  v153 = 0;
  v151 = 0;
  if (!v157)
  {
    v73 = 0;
    v72 = 0;
    v71 = 0;
    v74 = (void **)v156;
    goto LABEL_125;
  }
  if (v157 > 0x1555555555555555)
    sub_22316E078();
  v70 = 12 * v157;
  v71 = (char *)operator new(12 * v157);
  v151 = v71;
  v153 = &v71[12 * v69];
  v69 = (unint64_t)operator new(12 * v69);
  v72 = &v71[v70];
  v73 = (char *)(v69 + v70);
  v74 = (void **)v156;
  if (v71 == v72)
  {
LABEL_125:
    if ((char *)v69 == v73 && !v74)
      goto LABEL_131;
  }
  v79 = *a1;
  v80 = *a2;
  v81 = (char *)(v69 + 12);
  v82 = v71 + 12;
  do
  {
    do
    {
      v83 = v81;
      v84 = v82;
      v85 = (uint64_t *)(v79 + 12 * *((unsigned int *)v74 + 4));
      v86 = *v85;
      *((_DWORD *)v84 - 1) = *((_DWORD *)v85 + 2);
      *(_QWORD *)(v84 - 12) = v86;
      v87 = (uint64_t *)(v80 + 12 * *((unsigned int *)v74 + 4));
      v88 = *v87;
      *((_DWORD *)v83 - 1) = *((_DWORD *)v87 + 2);
      *(_QWORD *)(v83 - 12) = v88;
      v74 = (void **)*v74;
      v81 = v83 + 12;
      v82 = v84 + 12;
    }
    while (v84 != v72);
  }
  while (v83 != v73 || v74);
LABEL_131:
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v89 = v72 - v71;
  if (v72 != v71)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v89 >> 2) > 0x1555555555555555)
      sub_22316E078();
    v145 = operator new(v89);
    v147 = (char *)v145 + 4 * (v89 >> 2);
    v90 = 12 * ((v89 - 12) / 0xCuLL) + 12;
    memcpy(v145, v71, v90);
    v146 = (char *)v145 + v90;
  }
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v91 = (uint64_t)&v73[-v69];
  if (v73 != (char *)v69)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v91 >> 2) > 0x1555555555555555)
      sub_22316E078();
    v148 = operator new((size_t)&v73[-v69]);
    v150 = (char *)v148 + 4 * (v91 >> 2);
    v92 = 12 * ((v91 - 12) / 0xCuLL) + 12;
    memcpy(v148, (const void *)v69, v92);
    v149 = (char *)v148 + v92;
  }
  if (v69)
    operator delete((void *)v69);
  if (v71)
    operator delete(v71);
  v93 = v156;
  if (v156)
  {
    do
    {
      v94 = (_QWORD *)*v93;
      operator delete(v93);
      v93 = v94;
    }
    while (v94);
  }
  v95 = v154;
  v154 = 0;
  if (v95)
    operator delete(v95);
  v96 = v163;
  if (v163)
  {
    do
    {
      v97 = (_QWORD *)*v96;
      operator delete(v96);
      v96 = v97;
    }
    while (v97);
  }
  v98 = v161;
  v161 = 0;
  if (v98)
    operator delete(v98);
  v99 = *(_QWORD **)&v164[1];
  if (*(_QWORD *)&v164[1])
  {
    do
    {
      v117 = (_QWORD *)*v99;
      v118 = (_QWORD *)v99[5];
      if (v118)
      {
        do
        {
          v119 = (_QWORD *)*v118;
          operator delete(v118);
          v118 = v119;
        }
        while (v119);
      }
      v120 = (void *)v99[3];
      v99[3] = 0;
      if (v120)
        operator delete(v120);
      operator delete(v99);
      v99 = v117;
    }
    while (v117);
  }
  v100 = *(void **)&v164[0];
  *(_QWORD *)&v164[0] = 0;
  if (v100)
    operator delete(v100);
  v66.f32[0] = a4 + a4;
  sub_223ED2C74((uint64_t *)&v145, (uint64_t **)&v148, (uint64_t)v164, v66, v67, v68);
  v107 = (char *)v145;
  v106 = v146;
  v162 = 0;
  v163 = 0;
  v161 = 0;
  v108 = v146 - (_BYTE *)v145;
  if (v146 == v145)
  {
    v113 = 0;
    v111 = 0;
    v114 = 0;
    v112 = 0;
    v110 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v159[0] = 0;
    v154 = 0;
    v155 = 0;
    v156 = 0;
    v116 = (char *)v148;
    v115 = v149;
    goto LABEL_162;
  }
  v109 = 0xAAAAAAAAAAAAAAABLL * (v108 >> 2);
  if (v109 >> 62)
    sub_22316E078();
  v110 = (char *)operator new(0xAAAAAAAAAAAAAAACLL * (v108 >> 2));
  v161 = v110;
  v163 = &v110[4 * v109];
  bzero(v110, 4 * v109);
  v111 = &v110[4 * v109];
  v162 = v111;
  v112 = (char *)operator new(4 * v109);
  __p[0] = v112;
  v159[0] = &v112[4 * v109];
  bzero(v112, 4 * v109);
  v113 = &v112[4 * v109];
  __p[1] = v113;
  v114 = (char *)operator new(4 * v109);
  v154 = v114;
  v156 = &v114[4 * v109];
  bzero(v114, 4 * v109);
  v108 = (uint64_t)&v114[4 * v109];
  v155 = (void **)v108;
  v116 = (char *)v148;
  v115 = v149;
  if (v107 == v106)
  {
LABEL_162:
    if (v116 == v115 && v110 == v111 && v112 == v113 && v114 == (char *)v108)
      goto LABEL_177;
  }
  v121 = 0;
  v101 = (int8x16_t)v164[0];
  v122 = *(float32x2_t *)((char *)v164 + 12);
  v102.i32[0] = DWORD1(v164[1]);
  v123 = *(float32x2_t *)((char *)&v164[1] + 8);
  v103.i32[0] = v165;
  v124 = (float32x2_t)vextq_s8(v101, v101, 8uLL).u64[0];
  v125 = v116 + 12;
  v126 = v107 + 12;
  while (1)
  {
    do
    {
      v127 = v125;
      v128 = v126;
      v104.i64[0] = *(_QWORD *)(v126 - 12);
      v105.i32[0] = *((_DWORD *)v126 - 1);
      *(float32x2_t *)v129.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v101.i8, v104.f32[0]), v122, *(float32x2_t *)v104.f32, 1), v123, v105.f32[0]);
      *(float32x2_t *)&v129.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v124, *(float32x2_t *)v104.f32), v102, *(float32x2_t *)v104.f32, 1), v105, v103);
      v104.i64[0] = *(_QWORD *)(v125 - 12);
      v104.i32[2] = *((_DWORD *)v125 - 1);
      v104 = vsubq_f32(v104, v129);
      *(_DWORD *)&v110[v121] = v104.i32[0];
      v130 = (uint64_t)&v110[v121 + 4];
      *(_DWORD *)&v112[v121] = v104.i32[1];
      v131 = (uint64_t)&v112[v121 + 4];
      *(_DWORD *)&v114[v121] = v104.i32[2];
      v132 = (uint64_t)&v114[v121 + 4];
      v121 += 4;
      v125 += 12;
      v126 += 12;
    }
    while (v128 != v106);
    if (v127 == v115)
    {
      v133 = (char *)v130 == v111 && v131 == (_QWORD)v113;
      if (v133 && v132 == v108)
        break;
    }
  }
LABEL_177:
  *(float *)v101.i32 = a4;
  v135 = sub_223ED0B38((unint64_t *)&v161, *(double *)v101.i64);
  *(float *)&v136 = a4;
  v137 = sub_223ED0B38((unint64_t *)__p, v136);
  *(float *)&v138 = a4;
  v139 = sub_223ED0B38((unint64_t *)&v154, v138);
  v140 = v164[0];
  HIDWORD(v141) = 0;
  LODWORD(v141) = HIDWORD(v164[0]);
  *(_QWORD *)&v142 = *((_QWORD *)&v164[1] + 1);
  *(_QWORD *)((char *)&v141 + 4) = *(_QWORD *)&v164[1];
  HIDWORD(v140) = 0;
  *((_QWORD *)&v142 + 1) = v165;
  *(_OWORD *)(v143 + 16) = v141;
  *(_OWORD *)(v143 + 32) = v142;
  *(_OWORD *)v143 = v140;
  *(_DWORD *)(v143 + 48) = v135;
  *(_DWORD *)(v143 + 52) = v137;
  *(_DWORD *)(v143 + 56) = v139;
  *(_DWORD *)(v143 + 60) = 1065353216;
  if (v114)
  {
    v155 = (void **)v114;
    operator delete(v114);
  }
  if (v112)
  {
    __p[1] = v112;
    operator delete(v112);
  }
  if (v110)
    operator delete(v110);
  if (v148)
  {
    v149 = (char *)v148;
    operator delete(v148);
  }
  if (v145)
  {
    v146 = (char *)v145;
    operator delete(v145);
  }
}

void sub_223ED0980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  void *v31;

  operator delete(v31);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2233400F8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223ED0A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,...)
{
  void *v22;
  void *v23;
  uint64_t v24;
  va_list va;

  va_start(va, a22);
  if (__p)
    operator delete(__p);
  if (a4)
  {
    operator delete(a4);
    if (!v23)
    {
LABEL_5:
      if (!v22)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if (!v23)
  {
    goto LABEL_5;
  }
  operator delete(v23);
  if (!v22)
  {
LABEL_7:
    sub_22322E828((uint64_t)&a13);
    sub_22322E828((uint64_t)va);
    sub_223ECFC08(v24 - 144);
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(v22);
  goto LABEL_7;
}

void sub_223ED0AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  if (a17)
    operator delete(a17);
  sub_22322E828(&a20);
  sub_22322E828(&a30);
  sub_223ECFC08(v30 - 144);
  _Unwind_Resume(a1);
}

void sub_223ED0AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_223ED12A0((uint64_t)va);
  sub_223ECFC08((uint64_t)va1);
  sub_223ECFC08(v12 - 144);
  _Unwind_Resume(a1);
}

void sub_223ED0AE8()
{
  uint64_t v0;

  sub_22322E828(v0);
  JUMPOUT(0x223ED0B18);
}

unint64_t sub_223ED0B38(unint64_t *a1, double a2)
{
  float *v3;
  unint64_t v4;
  unint64_t v5;
  float *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  float *v12;
  float32x4_t v13;
  float *v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float *v19;
  float v20;
  float *v21;
  float v22;
  char *v23;
  unint64_t v24;
  const void *v25;
  int64_t v26;
  float32x4_t *v27;
  float32x4_t *v28;
  int32x2_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  unsigned __int32 v35;
  float v36;
  float32x4_t *v37;
  float v38;
  unint64_t v39;
  unint64_t v40;
  float *v41;
  float *v42;
  float v43;
  float v44;
  unint64_t v45;
  float *v46;
  unint64_t v47;
  float *v48;
  float *v49;
  float v50;
  float v51;
  float *v52;
  float v53;
  unint64_t v54;
  float v55;
  unint64_t v56;
  float v57;
  float *v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float v67;
  float v68;
  float32x4x2_t v71;

  v4 = *a1;
  v3 = (float *)a1[1];
  v5 = (unint64_t)v3 - *a1;
  if (v3 != (float *)*a1)
  {
    if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
      sub_22316E078();
    v6 = (float *)operator new(2 * v5);
    bzero(v6, 2 * v5);
    v7 = v5 - 4;
    if (v5 - 4 >= 0x2C
      && ((v8 = v7 >> 2, (unint64_t)v6 < (v7 & 0xFFFFFFFFFFFFFFFCLL) + v4 + 4)
        ? (v9 = v4 >= (unint64_t)&v6[2 * (v7 >> 2) + 2])
        : (v9 = 1),
          v9))
    {
      v10 = v8 + 1;
      v11 = (v8 + 1) & 0x7FFFFFFFFFFFFFF8;
      v12 = (float *)(v4 + 4 * v11);
      v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
      v14 = v6 + 8;
      v15 = (float32x4_t *)(v4 + 16);
      v16 = v11;
      do
      {
        v17 = v15[-1];
        v18 = *v15;
        v71.val[0] = vsubq_f32(v17, v13);
        v71.val[1] = vaddq_f32(v17, v13);
        v19 = v14 - 8;
        vst2q_f32(v19, v71);
        v71.val[0] = vsubq_f32(v18, v13);
        v71.val[1] = vaddq_f32(v18, v13);
        vst2q_f32(v14, v71);
        v14 += 16;
        v15 += 2;
        v16 -= 8;
      }
      while (v16);
      v20 = *(float *)&a2;
      if (v10 == v11)
        goto LABEL_16;
    }
    else
    {
      v11 = 0;
      v12 = (float *)v4;
      v20 = *(float *)&a2;
    }
    v21 = &v6[2 * v11 + 1];
    do
    {
      v22 = *v12++;
      *(v21 - 1) = v22 - v20;
      *v21 = v22 + v20;
      v21 += 2;
    }
    while (v12 != v3);
LABEL_16:
    v23 = (char *)v6 + 2 * v5;
    goto LABEL_18;
  }
  v6 = 0;
  v23 = 0;
LABEL_18:
  std::__sort<std::__less<float,float> &,float *>();
  v25 = (const void *)*a1;
  v24 = a1[1];
  v26 = v24 - *a1;
  if (v24 == *a1)
  {
    v28 = 0;
    v27 = 0;
  }
  else
  {
    if (v26 < 0)
      sub_22316E078();
    v27 = (float32x4_t *)operator new(v24 - (_QWORD)v25);
    v28 = (float32x4_t *)((char *)v27 + 4 * (v26 >> 2));
    memmove(v27, v25, v26);
  }
  std::__sort<std::__less<float,float> &,float *>();
  v30 = (v23 - (char *)v6) >> 2;
  v31 = 0;
  v32 = v30 - 1;
  if (v32)
  {
    v33 = 0;
    v34 = *v6;
    v35 = 0;
    v36 = INFINITY;
    v37 = v27;
    do
    {
      *(float *)v29.i32 = v34;
      v34 = v6[++v33];
      if (v28 == v37)
      {
        v37 = v28;
      }
      else
      {
        v38 = (float)(*(float *)v29.i32 + v34) * 0.5;
        v39 = ((char *)v28 - (char *)v37) >> 2;
        do
        {
          v40 = v39 >> 1;
          v41 = &v37->f32[v39 >> 1];
          v43 = *v41;
          v42 = v41 + 1;
          v39 += ~(v39 >> 1);
          if (v43 < (float)(v38 - *(float *)&a2))
            v37 = (float32x4_t *)v42;
          else
            v39 = v40;
        }
        while (v39);
        if (v28 == v37)
        {
          v37 = v28;
        }
        else
        {
          v44 = v38 + *(float *)&a2;
          v45 = ((char *)v28 - (char *)v37) >> 2;
          v46 = (float *)v37;
          do
          {
            v47 = v45 >> 1;
            v48 = &v46[v45 >> 1];
            v50 = *v48;
            v49 = v48 + 1;
            v45 += ~(v45 >> 1);
            if (v44 < v50)
              v45 = v47;
            else
              v46 = v49;
          }
          while (v45);
          if (v37 != (float32x4_t *)v46)
          {
            v51 = 0.0;
            v52 = (float *)v37;
            do
            {
              v53 = *v52++;
              v51 = v51 + v53;
            }
            while (v52 != v46);
            v54 = (unint64_t)((char *)v46 - (char *)v37) >> 2;
            v55 = v51 / (float)v54;
            if (v55 > *(float *)v29.i32)
              *(float *)v29.i32 = v55;
            if (v55 > v34)
              *(float *)v29.i32 = v6[v33];
            v56 = (char *)v46 - (char *)v37 - 4;
            v57 = 0.0;
            v58 = (float *)v37;
            if (v56 < 0x1C)
              goto LABEL_64;
            v59 = (v56 >> 2) + 1;
            v58 = &v37->f32[v59 & 0x7FFFFFFFFFFFFFF8];
            v60 = (float32x4_t)vdupq_lane_s32(v29, 0);
            v61 = v37 + 1;
            v62 = v59 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v63 = vsubq_f32(v61[-1], v60);
              v64 = vsubq_f32(*v61, v60);
              v65 = vmulq_f32(v63, v63);
              v66 = vmulq_f32(v64, v64);
              v57 = (float)((float)((float)((float)((float)((float)((float)(v57 + v65.f32[0]) + v65.f32[1]) + v65.f32[2])
                                                  + v65.f32[3])
                                          + v66.f32[0])
                                  + v66.f32[1])
                          + v66.f32[2])
                  + v66.f32[3];
              v61 += 2;
              v62 -= 8;
            }
            while (v62);
            if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_64:
              do
              {
                v67 = *v58++;
                v57 = v57 + (float)((float)(v67 - *(float *)v29.i32) * (float)(v67 - *(float *)v29.i32));
              }
              while (v58 != v46);
            }
            v68 = (float)((float)(*(float *)&a2 * *(float *)&a2)
                        * (float)(((unint64_t)((char *)v28 - (char *)v27) >> 2) - v54))
                + v57;
            if (v68 < v36)
            {
              v31 = 1;
              v35 = v29.i32[0];
              v36 = v68;
            }
          }
        }
      }
    }
    while (v33 != v32);
  }
  else
  {
    v35 = 0;
  }
  if (v27)
    operator delete(v27);
  if (v6)
    operator delete(v6);
  return v35 | ((unint64_t)v31 << 32);
}

void sub_223ED0F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  void *v17;

  if (v17)
    operator delete(v17);
  if (v16)
    operator delete(v16);
  _Unwind_Resume(exception_object);
}

char *sub_223ED0F94(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *(_QWORD *)v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v6) = v13;
  if (*(_QWORD *)v10)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_223ED128C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223ED12A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223ED12A0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_223ED130C(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_223ED15F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_223ED160C(float *a1, float *a2, float *a3, float *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = *a1;
  v5 = *a3;
  v6 = a1[1];
  v7 = a3[1];
  v8 = (v4 + v5) * (v6 - v7);
  v9 = *a2;
  v10 = a2[1];
  v11 = (v9 + v5) * (v7 - v10);
  v12 = (v4 + v9) * (v10 - v6);
  if ((v12 + v11 + v8 + 0.0) * 0.5 > 0.0
    && (v13 = *a4, v14 = v4 + v13, v15 = a4[1], (v12 + (v9 + v13) * (v15 - v10) + v14 * (v6 - v15) + 0.0) * 0.5 >= 0.0)
    && (v11 + (v5 + v13) * (v15 - v7) + (v9 + v13) * (v10 - v15) + 0.0) * 0.5 >= 0.0)
  {
    return (v8 + v14 * (v15 - v6) + (v5 + v13) * (v7 - v15) + 0.0) * 0.5 >= 0.0;
  }
  else
  {
    return 0;
  }
}

void sub_223ED1718(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
LABEL_3:
    a1[1] = v6;
    return;
  }
  v7 = *a1;
  v8 = (v5 - *a1) >> 4;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 60)
    sub_22316E078();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 3 > v9)
    v9 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 60)
      sub_223174E94();
    v12 = (char *)operator new(16 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[16 * v8];
  *(_OWORD *)v13 = *a2;
  v6 = v13 + 16;
  if (v5 != v7)
  {
    do
    {
      *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
      v13 -= 16;
      v5 -= 16;
    }
    while (v5 != v7);
    v5 = *a1;
  }
  *a1 = v13;
  a1[1] = v6;
  a1[2] = &v12[16 * v11];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v6;
}

void sub_223ED182C(char **a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  char *v14;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unsigned int i;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  float64x2_t v31;
  uint64_t v32;
  unint64_t v33;
  float64x2_t v34;
  _QWORD *v40;
  unint64_t v41;
  double v42;
  BOOL v43;
  uint64_t v44;
  float64x2_t v45;
  double v48;
  float64x2_t v49;
  unint64_t v52;
  unint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t j;
  unsigned __int8 v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t k;
  unsigned __int8 v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t m;
  unsigned __int8 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t n;
  unsigned __int8 v72;
  int64x2_t *v73;
  int64x2_t *v74;
  int64_t v75;
  uint64_t v76;
  int64x2_t *v77;
  int64x2_t *v78;
  int64x2_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  int64x2_t *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  unsigned int v89;
  int64x2_t *v90;
  int64x2_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  int64x2_t *v97;
  char *v98;
  unint64_t v99;
  int64x2_t *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  int64x2_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int64x2_t *v111;
  double v112;
  int64x2_t *v113;
  uint64_t *i64;
  uint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  float64x2_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  float64x2_t v122;
  int64x2_t *v123;
  int64x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  int64x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  int v130;
  float64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  float64x2_t v142;
  float64_t v143;
  float64_t v144;
  float64_t v145;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  int64x2_t *__p;
  char *v151;
  float64x2_t v152[2];
  char v153[16];
  float64x2_t v154;
  float64x2_t v155;

  v7 = *a2;
  v8 = a2[1];
  v9 = *a2;
  if (*a2 != v8)
  {
    v10 = v7 + 1;
    do
    {
      if (v10 == v8)
        goto LABEL_9;
      v12 = *(v10 - 1);
      v11 = *v10++;
    }
    while (v11 >= v12);
    v9 = v10 - 1;
  }
  if (v9 != v8)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/Simplification.cpp", 128, (uint64_t)"range::is_sorted(fixed_vertices)", 32, (uint64_t)"fixed_vertices must be sorted.", 30, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_237;
    }
    v7 = *a2;
    v8 = a2[1];
  }
LABEL_9:
  v13 = *a1;
  if (v7 == v8)
  {
LABEL_12:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (a1[1] == v13)
      return;
    goto LABEL_16;
  }
  while ((a1[1] - v13) >> 4 > (unint64_t)*v7)
  {
    if (++v7 == v8)
      goto LABEL_12;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/Simplification.cpp", 130, (uint64_t)"range::all_of(fixed_vertices, [&](uint32_t x) { return x < polygon.size(); }) && \"fixed_vertices cont"
                  "ains an invalid index.\"",
         124,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_22457406C))
  {
LABEL_237:
    abort();
  }
  v13 = *a1;
  v14 = a1[1];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (v14 == v13)
    return;
LABEL_16:
  sub_223ED1718((char **)a3, v13);
  v17 = *a2;
  v18 = a2[1];
  if (*a2 == v18)
  {
    v19 = 0;
    v20 = *a1;
    v21 = a1[1] - *a1;
    if ((unint64_t)v21 < 0x11)
      goto LABEL_217;
    goto LABEL_20;
  }
  v19 = *v17 == 0;
  v20 = *a1;
  v21 = a1[1] - *a1;
  if ((unint64_t)v21 >= 0x11)
  {
LABEL_20:
    v22 = 0;
    v23 = v21 >> 4;
    LODWORD(v24) = 1;
    v25 = (float)(a4 * a4);
    do
    {
      v147 = v19;
      i = v24;
      if (v23 <= v24)
        goto LABEL_47;
      v27 = &v20[16 * v24];
      v28 = v18 - v17;
      v29 = *(_QWORD *)&v20[16 * v22 + 8];
      v30 = v24 - 1;
      v31 = vcvtq_f64_s64(*(int64x2_t *)&v20[16 * v22]);
      v32 = *(_QWORD *)&v20[16 * v22];
      v33 = v24;
      for (i = v24; ; ++i)
      {
        if (v24 < i)
        {
          v34 = vcvtq_f64_s64(*(int64x2_t *)&v20[16 * v33]);
          _Q2 = (int8x16_t)vsubq_f64(v34, v31);
          _D4 = _Q2.i64[1];
          __asm { FMLA            D3, D4, V2.D[1] }
          if (_D3 >= 0.000000999999997)
          {
            _D4 = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
            v43 = 1;
            v44 = v24;
            do
            {
              v45 = vcvtq_f64_s64(*(int64x2_t *)&v20[16 * v44]);
              _Q6 = vsubq_f64(v45, v31);
              __asm { FMLA            D7, D4, V6.D[1] }
              v48 = _D7 / _D3;
              _NF = _D7 / _D3 < 0.0;
              v49 = v31;
              if (!_NF)
              {
                v49 = v34;
                if (v48 <= 1.0)
                  v49 = vmlaq_n_f64(v31, (float64x2_t)_Q2, v48);
              }
              _D7 = vsubq_f64(v49, v45).f64[1];
              __asm { FMLA            D6, D7, V5.D[1] }
              if (_D6 > v25)
                break;
              v43 = ++v44 < (unint64_t)i;
            }
            while (i != v44);
            if (v43)
              goto LABEL_47;
          }
          else
          {
            if ((double)((*(_QWORD *)v27 - v32) * (*(_QWORD *)v27 - v32)
                        + (*((_QWORD *)v27 + 1) - v29) * (*((_QWORD *)v27 + 1) - v29)) > v25)
              goto LABEL_47;
            v40 = v27 + 24;
            v41 = v24;
            while (v30 != v41)
            {
              ++v41;
              v42 = (double)((*(v40 - 1) - v32) * (*(v40 - 1) - v32) + (*v40 - v29) * (*v40 - v29));
              v40 += 2;
              if (v42 > v25)
              {
                if (v41 >= i)
                  goto LABEL_43;
                goto LABEL_47;
              }
            }
            if ((unint64_t)v30 + 1 < i)
              goto LABEL_47;
          }
        }
LABEL_43:
        v33 = i + 1;
        if (v28 > v147)
          break;
        if (v23 <= v33)
          goto LABEL_46;
LABEL_25:
        ++v30;
      }
      if (v23 > v33 && v17[v147] != i)
        goto LABEL_25;
LABEL_46:
      ++i;
LABEL_47:
      __p = 0;
      v151 = 0;
      v52 = i - 1;
      if (v52 > v24)
      {
        v148 = v24;
        v149 = v22;
        while (2)
        {
          if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/Simplification.cpp", 38, (uint64_t)"!out.empty()", 12, (uint64_t)"The out polygon should already contain the start vertex", 55, (void (*)(void **))sub_22457406C))
          {
LABEL_236:
            abort();
          }
          v53 = (a1[1] - *a1) >> 4;
          if (v53 <= v149)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/Simplification.cpp", 39, (uint64_t)"start < in.size()", 17, (uint64_t)"The start index is invalid", 26, (void (*)(void **))sub_22457406C);
            v54 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v55 = qword_255795648;
              for (j = qword_255795650; v55 != j; v55 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v55)(*(_QWORD *)(v55 + 8), "start < in.size()", 17, "The start index is invalid", 26);
            }
            v57 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              goto LABEL_236;
            qword_255795660(*(_QWORD *)algn_255795668, "start < in.size()", 17, "The start index is invalid", 26);
            v53 = (a1[1] - *a1) >> 4;
          }
          if (v53 <= v52)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/Simplification.cpp", 40, (uint64_t)"end < in.size()", 15, (uint64_t)"The end index is invalid", 24, (void (*)(void **))sub_22457406C);
            v58 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v59 = qword_255795648;
              for (k = qword_255795650; v59 != k; v59 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v59)(*(_QWORD *)(v59 + 8), "end < in.size()", 15, "The end index is invalid", 24);
            }
            v61 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              goto LABEL_236;
            qword_255795660(*(_QWORD *)algn_255795668, "end < in.size()", 15, "The end index is invalid", 24);
          }
          if (v52 <= v149)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/Simplification.cpp", 41, (uint64_t)"start < end", 11, (uint64_t)"Invalid range", 13, (void (*)(void **))sub_22457406C);
            v62 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v63 = qword_255795648;
              for (m = qword_255795650; v63 != m; v63 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v63)(*(_QWORD *)(v63 + 8), "start < end", 11, "Invalid range", 13);
            }
            v65 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              goto LABEL_236;
            qword_255795660(*(_QWORD *)algn_255795668, "start < end", 11, "Invalid range", 13);
          }
          v66 = *a1;
          v67 = &(*a1)[16 * v149];
          v68 = *(_QWORD *)(a3 + 8);
          if (*(_QWORD *)v67 != *(_QWORD *)(v68 - 16) || *((_QWORD *)v67 + 1) != *(_QWORD *)(v68 - 8))
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/Simplification.cpp", 42, (uint64_t)"in[start] == out.points().back()", 32, (uint64_t)"The start vertex should already be in out", 41, (void (*)(void **))sub_22457406C);
            v69 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v70 = qword_255795648;
              for (n = qword_255795650; v70 != n; v70 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v70)(*(_QWORD *)(v70 + 8), "in[start] == out.points().back()", 32, "The start vertex should already be in out", 41);
            }
            v72 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              goto LABEL_236;
            qword_255795660(*(_QWORD *)algn_255795668, "in[start] == out.points().back()", 32, "The start vertex should already be in out", 41);
            v66 = *a1;
          }
          v73 = __p;
          v74 = (int64x2_t *)v151;
          v75 = a1[1] - v66;
          v76 = v75 >> 4;
          if (v75 >> 4 <= (unint64_t)((v151 - (char *)__p) >> 4))
          {
            v77 = __p;
            v78 = (int64x2_t *)&v66[16 * v149];
            if (__p < (int64x2_t *)v151)
              goto LABEL_94;
          }
          else
          {
            if (v75 < 0)
              goto LABEL_234;
            v77 = (int64x2_t *)operator new(v75);
            v74 = &v77[v76];
            __p = v77;
            v151 = (char *)v74;
            if (v73)
            {
              operator delete(v73);
              v66 = *a1;
              v74 = &v77[v76];
            }
            v78 = (int64x2_t *)&v66[16 * v149];
            if (v77 < v74)
            {
LABEL_94:
              *v77 = *v78;
              v79 = v77 + 1;
              goto LABEL_112;
            }
          }
          v80 = v77 - __p;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 60)
LABEL_234:
            sub_22316E078();
          v82 = (char *)v74 - (char *)__p;
          if (v82 >> 3 > v81)
            v81 = v82 >> 3;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
            v83 = 0xFFFFFFFFFFFFFFFLL;
          else
            v83 = v81;
          if (v83)
          {
            if (v83 >> 60)
LABEL_235:
              sub_223174E94();
            v84 = (char *)operator new(16 * v83);
            v85 = (int64x2_t *)&v84[16 * v80];
            *v85 = *v78;
            v86 = (uint64_t)v85;
            if (v77 == __p)
            {
LABEL_110:
              v79 = v85 + 1;
              __p = (int64x2_t *)v86;
              v151 = &v84[16 * v83];
              if (v77)
                goto LABEL_111;
              goto LABEL_112;
            }
          }
          else
          {
            v84 = 0;
            v85 = (int64x2_t *)(16 * v80);
            *(int64x2_t *)(16 * v80) = *v78;
            v86 = 16 * v80;
            if (v77 == __p)
              goto LABEL_110;
          }
          do
          {
            *(int64x2_t *)(v86 - 16) = v77[-1];
            v86 -= 16;
            --v77;
          }
          while (v77 != __p);
          v77 = __p;
          v79 = v85 + 1;
          __p = (int64x2_t *)v86;
          v151 = &v84[16 * v83];
          if (v77)
LABEL_111:
            operator delete(v77);
LABEL_112:
          v87 = *a1;
          if (v52 < (a1[1] - *a1) >> 4)
          {
            v88 = v52;
            v89 = v52;
            while (1)
            {
              v91 = (int64x2_t *)&v87[16 * v88];
              if (v79 < (int64x2_t *)v151)
              {
                *v79 = *v91;
                v90 = v79 + 1;
              }
              else
              {
                v92 = v79 - __p;
                v93 = v92 + 1;
                if ((unint64_t)(v92 + 1) >> 60)
                  goto LABEL_234;
                v94 = v151 - (char *)__p;
                if ((v151 - (char *)__p) >> 3 > v93)
                  v93 = v94 >> 3;
                if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
                  v95 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v95 = v93;
                if (v95)
                {
                  if (v95 >> 60)
                    goto LABEL_235;
                  v96 = (char *)operator new(16 * v95);
                }
                else
                {
                  v96 = 0;
                }
                v97 = (int64x2_t *)&v96[16 * v92];
                *v97 = *v91;
                v90 = v97 + 1;
                if (v79 == __p)
                {
                  __p = (int64x2_t *)&v96[16 * v92];
                  v151 = &v96[16 * v95];
                }
                else
                {
                  do
                  {
                    v97[-1] = v79[-1];
                    --v97;
                    --v79;
                  }
                  while (v79 != __p);
                  v79 = __p;
                  __p = v97;
                  v151 = &v96[16 * v95];
                  if (!v79)
                    goto LABEL_115;
                }
                operator delete(v79);
              }
LABEL_115:
              v87 = *a1;
              v79 = v90;
              v88 = ++v89;
              if (v89 >= (unint64_t)((a1[1] - *a1) >> 4))
                goto LABEL_134;
            }
          }
          v90 = v79;
LABEL_134:
          v98 = *(char **)a3;
          if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 >= 0x11uLL)
          {
            LODWORD(v99) = 1;
            while (1)
            {
              v101 = &v98[16 * (v99 - 1)];
              if (v90 < (int64x2_t *)v151)
              {
                *v90 = *(int64x2_t *)v101;
                v100 = v90 + 1;
              }
              else
              {
                v102 = v90 - __p;
                v103 = v102 + 1;
                if ((unint64_t)(v102 + 1) >> 60)
                  goto LABEL_234;
                v104 = v151 - (char *)__p;
                if ((v151 - (char *)__p) >> 3 > v103)
                  v103 = v104 >> 3;
                if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0)
                  v105 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v105 = v103;
                if (v105)
                {
                  if (v105 >> 60)
                    goto LABEL_235;
                  v106 = (char *)operator new(16 * v105);
                }
                else
                {
                  v106 = 0;
                }
                v107 = (int64x2_t *)&v106[16 * v102];
                *v107 = *(int64x2_t *)v101;
                v100 = v107 + 1;
                if (v90 == __p)
                {
                  __p = (int64x2_t *)&v106[16 * v102];
                  v151 = &v106[16 * v105];
                }
                else
                {
                  do
                  {
                    v107[-1] = v90[-1];
                    --v107;
                    --v90;
                  }
                  while (v90 != __p);
                  v90 = __p;
                  __p = v107;
                  v151 = &v106[16 * v105];
                  if (!v90)
                    goto LABEL_137;
                }
                operator delete(v90);
              }
LABEL_137:
              v99 = (v99 + 1);
              v98 = *(char **)a3;
              v90 = v100;
              if (v99 >= (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4)
                goto LABEL_156;
            }
          }
          v100 = v90;
LABEL_156:
          v108 = v100 - __p;
          if (v108 >= 3)
          {
            if ((unint64_t)((char *)v100 - (char *)__p) < 0x30)
              goto LABEL_185;
            v109 = v100 == __p ? 0 : v108 + 1;
            v110 = v109 - 1;
            if (v109 >= v108)
            {
              v111 = v100;
              if (v110 <= v108)
                v111 = &__p[v110 % v108];
            }
            else
            {
              v111 = v100 - 1;
            }
            if (!v110)
              goto LABEL_185;
            v112 = 0.0;
            v113 = v100;
            do
            {
              if (v110 + 1 >= v108)
              {
                i64 = (uint64_t *)v100;
                if (v110 <= v108)
                  i64 = __p[v110 % v108].i64;
              }
              else
              {
                i64 = v113[-1].i64;
              }
              v115 = v110 - 1;
              if (v110 >= v108)
              {
                v116 = (uint64_t *)v100;
                if (v115 <= v108)
                  v116 = __p[v115 % v108].i64;
              }
              else
              {
                v116 = v111[-1].i64;
              }
              if (v110 + 1 >= v108)
              {
                v113 = v100;
                if (v110 <= v108)
                  v113 = &__p[v110 % v108];
              }
              else
              {
                --v113;
              }
              if (v110 >= v108)
              {
                v111 = &__p[v115 % v108];
                if (v115 > v108)
                  v111 = v100;
              }
              else
              {
                --v111;
              }
              _D4 = v116[1];
              _D3 = (double)_D4;
              v112 = v112 + ((double)*i64 + (double)*v116) * ((double)i64[1] - (double)_D4);
              --v110;
            }
            while (v115);
            if (v112 * 0.5 >= 0.0)
            {
LABEL_185:
              v117 = 0;
              v118 = vcvtq_f64_s64(__p[1]);
              v154 = vcvtq_f64_s64(*__p);
              v155 = v118;
              v119 = v108 - 1;
              v120 = (v108 - 1) <= 2 ? 2 : v108 - 1;
              v121 = 16 * v120 - 32;
              while (v121 != v117)
              {
                v122 = vcvtq_f64_s64(__p[v117 / 0x10 + 3]);
                v152[0] = vcvtq_f64_s64(__p[v117 / 0x10 + 2]);
                v152[1] = v122;
                v117 += 16;
                if ((sub_223766150(&v154, v152, (uint64_t)v153, 0) & 1) != 0)
                  goto LABEL_49;
              }
              v123 = __p;
              v124 = __p[1];
              v127 = vsubq_s64(v124, *__p);
              *(float *)v127.i32 = (float)v127.i64[0];
              *(float *)&_D3 = (float)v127.i64[1];
              *(float *)&_D4 = *(float *)v127.i32 * *(float *)v127.i32;
              _D4 = (uint64_t)vmla_f32((float32x2_t)_D4, *(float32x2_t *)&_D3, *(float32x2_t *)&_D3);
              v126 = vcvt_f32_f64(vcvtq_f64_s64(vsubq_s64(__p[2], v124)));
              *(float *)&_D4 = 1.0 / sqrtf(*(float *)&_D4);
              v125 = vmul_n_f32(v126, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v126, v126), (float32x2_t)vdup_lane_s32((int32x2_t)v126, 1), v126, 1).f32[0]));
              v126.f32[0] = *(float *)&_D4 * *(float *)v127.i32;
              *(float *)v127.i32 = *(float *)&_D4 * (float)v127.i64[1];
              _D3 = COERCE_DOUBLE(vmla_lane_f32(vmul_f32(v126, v125), *(float32x2_t *)v127.i8, v125, 1));
              if (*(float *)&_D3 >= -0.999)
              {
                v128 = vcvt_f32_f64(vcvtq_f64_s64(vsubq_s64(*__p, __p[v119])));
                _D4 = (uint64_t)vdup_lane_s32((int32x2_t)v128, 1);
                _D3 = COERCE_DOUBLE(vmla_lane_f32(vmul_f32(v128, v128), (float32x2_t)_D4, v128, 1));
                v129 = vmul_n_f32(v128, 1.0 / sqrtf(*(float *)&_D3));
                if (vmla_lane_f32(vmul_f32(v126, v129), *(float32x2_t *)v127.i8, v129, 1).f32[0] >= -0.999)
                {
                  v130 = v52;
                  goto LABEL_212;
                }
              }
            }
          }
LABEL_49:
          if (v148 < --v52)
            continue;
          break;
        }
        v123 = __p;
        v130 = v148;
        LODWORD(v52) = v148;
        if (__p)
        {
LABEL_212:
          operator delete(v123);
          LODWORD(v52) = v130;
        }
      }
      sub_223ED1718((char **)a3, &(*a1)[16 * v52]);
      v19 = v147;
      v17 = *a2;
      v18 = a2[1];
      if (v147 < (unint64_t)(v18 - *a2) && v17[v147] == (_DWORD)v52)
        v19 = v147 + 1;
      v24 = (v52 + 1);
      v20 = *a1;
      v23 = (a1[1] - *a1) >> 4;
      v22 = v52;
    }
    while (v23 > v24);
  }
LABEL_217:
  v131 = *(double *)a3;
  v132 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  v154 = 0uLL;
  v155.f64[0] = 0.0;
  v133 = (v132 >> 4);
  if ((v132 >> 4))
  {
    v134 = (char *)operator new(16 * v133);
    v135 = &v134[16 * v133];
    *(_QWORD *)&v154.f64[0] = v134;
    *(_QWORD *)&v154.f64[1] = v134;
    *(_QWORD *)&v155.f64[0] = v135;
    if ((v132 & 0xFFFFFFFF0) != 0)
    {
LABEL_219:
      v136 = 0;
      v137 = 0;
      do
      {
        v138 = v137 + 1;
        v139 = *(_QWORD *)a3 + v136;
        if (v133 - 1 == v137)
          v140 = 0;
        else
          v140 = (v137 + 1);
        v141 = (_QWORD *)(*(_QWORD *)a3 + 16 * v140);
        if (*(_QWORD *)v139 != *v141 || *(_QWORD *)(v139 + 8) != v141[1])
          sub_223ED1718((char **)&v154, (_OWORD *)v139);
        v136 += 16;
        v137 = v138;
      }
      while (v133 != v138);
      v142 = v154;
      v143 = v155.f64[0];
      v144 = *(double *)(a3 + 16);
      v154.f64[0] = *(float64_t *)a3;
      v131 = v154.f64[0];
      v155.f64[0] = v144;
      *(float64x2_t *)a3 = v142;
      *(float64_t *)(a3 + 16) = v143;
      if (v131 != 0.0)
        goto LABEL_229;
      return;
    }
  }
  else
  {
    v135 = 0;
    v134 = 0;
    if ((v132 & 0xFFFFFFFF0) != 0)
      goto LABEL_219;
  }
  v145 = *(double *)(a3 + 16);
  v154.f64[0] = v131;
  v155.f64[0] = v145;
  *(int64x2_t *)a3 = vdupq_n_s64((unint64_t)v134);
  *(_QWORD *)(a3 + 16) = v135;
  if (v131 != 0.0)
  {
LABEL_229:
    v154.f64[1] = v131;
    operator delete(*(void **)&v131);
  }
}

void sub_223ED2968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)v24;
  if (*(_QWORD *)v24)
  {
    *(_QWORD *)(v24 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_223ED29D8(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, float32x4_t a8, float32x4_t a9, double a10, float32x2_t a11, double a12, float32x4_t a13, int8x16_t a14, float32x4_t a15)
{
  float32x2_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  float v24;
  float v25;
  float32x4_t v29;
  float32x2_t v30;
  float v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  __int32 v55;
  uint64_t v56;
  __int32 v57;

  a13.i64[0] = *(_QWORD *)a1;
  a13.i32[2] = *(_DWORD *)(a1 + 8);
  a11.i32[0] = a4[1].i32[0];
  *(float32x2_t *)a14.i8 = *a4;
  v15 = *a4;
  a9.i64[0] = *(_QWORD *)a6;
  a9.i32[2] = *(_DWORD *)(a6 + 8);
  a8.i64[0] = *(_QWORD *)a5;
  a8.i32[2] = *(_DWORD *)(a5 + 8);
  a15.i64[0] = *(_QWORD *)a2;
  a15.i32[2] = *(_DWORD *)(a2 + 8);
  v16 = vsubq_f32(a9, a8);
  v17 = (int8x16_t)vsubq_f32(a15, a13);
  v57 = v17.i32[2];
  v56 = v17.i64[0];
  a15.i64[0] = *(_QWORD *)a3;
  a15.i32[2] = *(_DWORD *)(a3 + 8);
  v18 = (int8x16_t)vsubq_f32(a15, a13);
  v55 = v18.i32[2];
  v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.f32, 1);
  v54 = v18.i64[0];
  v20 = (float32x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), v19, *(float32x2_t *)v16.f32, 1), v20, v20).f32[0] == 0.0)return 0;
  v21 = (float32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), *(float32x2_t *)v17.i8, 1), v21, v21).f32[0] == 0.0)return 0;
  v22 = (float32x2_t)vextq_s8(v18, v18, 8uLL).u64[0];
  if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *(float32x2_t *)v18.i8, 1), v22, v22).f32[0] == 0.0)return 0;
  a14.i32[2] = a11.i32[0];
  v23 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(v15, *(float32x2_t *)a8.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.f32, 1), v15, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL), a11), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a14.i8, *(float32x2_t *)a13.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.f32, 1), *(float32x2_t *)a14.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a13, (int8x16_t)a13, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(a14, a14, 8uLL))).f32[0];
  v24 = -v23;
  v25 = vmla_f32(vmla_lane_f32(vmul_f32(v15, *(float32x2_t *)v16.f32), v19, v15, 1), v20, a11).f32[0];
  if (v25 >= 0.0)
  {
    if (v25 == 0.0)
      return 0;
    if (v23 > 0.0 || v25 < v24)
      return 0;
  }
  else if (v23 < 0.0 || v25 > v24)
  {
    return 0;
  }
  v29 = vmlaq_n_f32(a8, v16, v24 / v25);
  *(_DWORD *)(a7 + 8) = v29.i32[2];
  *(_QWORD *)a7 = v29.i64[0];
  v30 = vabs_f32(*(float32x2_t *)v17.i8);
  v31 = fabsf(*(float *)&v17.i32[2]);
  if (v30.f32[0] >= v30.f32[1])
  {
    if (v30.f32[0] >= v31)
      v32 = 0;
    else
      v32 = 2;
  }
  else if (v30.f32[1] >= v31)
  {
    v32 = 1;
  }
  else
  {
    v32 = 2;
  }
  if (v32 == 2)
    v33 = 0;
  else
    v33 = v32 + 1;
  v34 = 4 * v33;
  v35 = *(float *)((char *)&v54 + v34);
  v36 = 4 * v32;
  v37 = *(float *)((char *)&v56 + v36);
  v38 = *(float *)((char *)&v54 + v36);
  v39 = *(float *)((char *)&v56 + v34);
  v40 = v32 - 1;
  if (!v32)
    v40 = 2;
  v41 = 4 * v40;
  v42 = v35 * v37;
  v43 = v38 * v39;
  v44 = v42 - v43;
  v45 = v37 * *(float *)((char *)&v54 + v41);
  v46 = v38 * *(float *)((char *)&v56 + v41);
  v47 = v45 - v46;
  v48 = vabds_f32(v42, v43);
  v49 = vabds_f32(v45, v46);
  if (v48 >= v49)
    v50 = v44;
  else
    v50 = v47;
  if (v50 == 0.0)
    return 0;
  if (v48 < v49)
    v33 = v40;
  v51 = *(float *)(a7 + 4 * v32) - *(float *)(a1 + 4 * v32);
  v52 = (float)((float)(v37 * (float)(*(float *)(a7 + 4 * v33) - *(float *)(a1 + 4 * v33)))
              - (float)(v51 * *((float *)&v56 + v33)))
      / v50;
  if (v52 < 0.0)
    return 0;
  v53 = (float)(v51 - (float)(v38 * v52)) / v37;
  if (v53 < 0.0)
    return 0;
  return (float)(v52 + v53) <= 1.0;
}

void sub_223ED2C74(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>)
{
  float v6;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  float32x4_t v24;
  uint64_t v25;
  _QWORD *v26;
  float32x4_t v27;
  uint64_t *v28;
  char *v29;
  float32x4_t v30;
  unint64_t v31;
  size_t v32;
  float *v33;
  float *v34;
  int v35;
  float v36;
  BOOL v37;
  char v38;
  float v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t *v46;
  _DWORD *v47;
  float32x2_t v48;
  float *v49;
  float32x4_t v50;
  float32x4_t *v51;
  float32x4_t *v52;
  unint64_t v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t *v58;
  uint64_t v59;
  float32x4_t *v60;
  float v61;
  float v62;
  float v63;
  float *v64;
  float v65;
  float *v66;
  float *v67;
  float v68;
  float v69;
  float32x4_t *v70;
  float *v71;
  float *v72;
  float v73;
  float v74;
  char *v75;
  _OWORD v76[2];
  int v77;
  void *__p;
  float32x4_t *v79;
  float32x4_t *v80;
  void *v81;
  char *v82;
  char *v83;
  void *v84;
  float32x2_t *v85;
  char *v86;

  v6 = a4.f32[0];
  v11 = *a1;
  v10 = a1[1];
  v12 = v10 - *a1;
  if (v12 != (char *)a2[1] - (char *)*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/TruncatedLeastSquares.cpp", 52, (uint64_t)"src.size() == dst.size()", 24, (uint64_t)"number of elements mismatch", 27, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_71;
    }
    v11 = *a1;
    v10 = a1[1];
    v12 = v10 - *a1;
  }
  v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 2);
  if (v13 <= 2)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/TruncatedLeastSquares.cpp", 53, (uint64_t)"src.size() >= 3", 15, (uint64_t)"at least 3 point pairs are required", 35, (void (*)(void **))sub_22457406C))
    {
      v11 = *a1;
      v10 = a1[1];
      v12 = v10 - *a1;
      v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 2);
      goto LABEL_7;
    }
LABEL_71:
    abort();
  }
LABEL_7:
  v84 = 0;
  v85 = 0;
  v86 = 0;
  if (v10 == v11)
  {
    v14 = 0;
    v16 = 0;
  }
  else
  {
    if (v13 > 0x1555555555555555)
      sub_22316E078();
    v14 = (char *)operator new(v12);
    v15 = &v14[12 * v13];
    v16 = &v14[v12];
    v84 = v14;
    v85 = (float32x2_t *)&v14[v12];
    v86 = v15;
  }
  v18 = *a2;
  v17 = a2[1];
  v82 = 0;
  v83 = 0;
  v81 = 0;
  v19 = (char *)v17 - (char *)v18;
  if (v17 != v18)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v19 >> 2) > 0x1555555555555555)
      sub_22316E078();
    v81 = operator new(v19);
    v82 = (char *)v81 + v19;
    v83 = (char *)v81 + 4 * (v19 >> 2);
  }
  v20 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v14) >> 2) - 1;
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v14) >> 2) != 1)
  {
    v21 = 0;
    do
    {
      v22 = *a1 + v21;
      a4.i64[0] = *(_QWORD *)(v22 + 12);
      a4.i32[2] = *(_DWORD *)(v22 + 20);
      v23 = (char *)v84 + v21;
      a5.i64[0] = *(_QWORD *)v22;
      a5.i32[2] = *(_DWORD *)(v22 + 8);
      v24 = vsubq_f32(a4, a5);
      *(_DWORD *)((char *)v84 + v21 + 8) = v24.i32[2];
      *v23 = v24.i64[0];
      v25 = (uint64_t)*a2 + v21;
      v24.i64[0] = *(_QWORD *)(v25 + 12);
      v24.i32[2] = *(_DWORD *)(v25 + 20);
      v26 = (char *)v81 + v21;
      a5.i64[0] = *(_QWORD *)v25;
      a5.i32[2] = *(_DWORD *)(v25 + 8);
      a4 = vsubq_f32(v24, a5);
      *(_DWORD *)((char *)v81 + v21 + 8) = a4.i32[2];
      *v26 = a4.i64[0];
      v21 += 12;
      --v20;
    }
    while (v20);
    v11 = *a1;
    v10 = a1[1];
    v16 = (char *)v85;
  }
  a4.i64[0] = *(_QWORD *)v11;
  a4.i32[2] = *(_DWORD *)(v11 + 8);
  a5.i64[0] = *(_QWORD *)(v10 - 12);
  a5.i32[2] = *(_DWORD *)(v10 - 4);
  v27 = vsubq_f32(a4, a5);
  *((_DWORD *)v16 - 1) = v27.i32[2];
  *(_QWORD *)(v16 - 12) = v27.i64[0];
  v28 = a2[1];
  v27.i64[0] = **a2;
  v27.i32[2] = *((_DWORD *)*a2 + 2);
  a5.i64[0] = *(uint64_t *)((char *)v28 - 12);
  a5.i32[2] = *((_DWORD *)v28 - 1);
  v29 = v82;
  v30 = vsubq_f32(v27, a5);
  *((_DWORD *)v82 - 1) = v30.i32[2];
  *(_QWORD *)(v29 - 12) = v30.i64[0];
  v79 = 0;
  v80 = 0;
  __p = 0;
  if (v85 == v84)
  {
    v33 = 0;
    v34 = 0;
  }
  else
  {
    v31 = ((char *)v85 - (_BYTE *)v84) / 12;
    if (v31 >> 62)
      sub_22316E078();
    v32 = v31;
    __p = operator new(4 * v31);
    v80 = (float32x4_t *)((char *)__p + 4 * v31);
    memset_pattern16(__p, &unk_224656670, 4 * v31);
    v79 = v80;
    v33 = (float *)operator new(4 * v31);
    bzero(v33, v32 * 4);
    v34 = &v33[v32];
  }
  v35 = 0;
  v36 = v6 * v6;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 20) = 0;
  *(_QWORD *)(a3 + 28) = 0x3F80000000000000;
  *(_DWORD *)a3 = 1065353216;
  *(_DWORD *)(a3 + 16) = 1065353216;
  v37 = v33 == v34 || v33 + 1 == v34;
  v38 = v37;
  v39 = 0.0;
  v40 = INFINITY;
  do
  {
    sub_223EA7054((uint64_t *)&v84, (uint64_t *)&v81, (uint64_t *)&__p, 1, (uint64_t)v76, v30, a5, a6);
    v30 = (float32x4_t)v76[0];
    a5 = (float32x4_t)v76[1];
    *(_OWORD *)a3 = v76[0];
    *(float32x4_t *)(a3 + 16) = a5;
    *(_DWORD *)(a3 + 32) = v77;
    v45 = (float32x2_t *)v84;
    v46 = v85;
    if (v84 != v85)
    {
      v47 = v81;
      v30.i64[0] = *(_QWORD *)a3;
      a5.i32[0] = *(_DWORD *)(a3 + 8);
      a6.i64[0] = *(_QWORD *)(a3 + 12);
      v41.i32[0] = *(_DWORD *)(a3 + 20);
      v48 = *(float32x2_t *)(a3 + 24);
      v42.i32[0] = *(_DWORD *)(a3 + 32);
      v49 = v33;
      do
      {
        v44.i32[0] = v45[1].i32[0];
        *(float32x2_t *)v50.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v30.f32, COERCE_FLOAT(*v45)), *(float32x2_t *)a6.f32, *v45, 1), v48, v44.f32[0]);
        *(float32x2_t *)&v50.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.f32, *v45), v41, *v45, 1), v44, v42);
        v43.i64[0] = *(_QWORD *)v47;
        v43.i32[2] = v47[2];
        v43 = vsubq_f32(v43, v50);
        v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 1);
        v50.i64[0] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
        *(_DWORD *)v49++ = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32), v44, *(float32x2_t *)v43.f32, 1), *(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32).u32[0];
        v45 = (float32x2_t *)((char *)v45 + 12);
        v47 += 3;
      }
      while (v45 != v46);
    }
    if (v35)
    {
      v51 = (float32x4_t *)__p;
      v52 = v79;
      if (__p == v79)
        goto LABEL_51;
    }
    else
    {
      v64 = v33;
      if ((v38 & 1) == 0)
      {
        v65 = *v33;
        v66 = v33 + 1;
        v64 = v33;
        v67 = v33 + 1;
        do
        {
          v68 = *v67++;
          v69 = v68;
          if (v65 < v68)
          {
            v65 = v69;
            v64 = v66;
          }
          v66 = v67;
        }
        while (v67 != v34);
      }
      if ((float)(v36 / (float)((float)(*v64 + *v64) - v36)) <= 0.0)
        v39 = 1.0;
      else
        v39 = v36 / (float)((float)(*v64 + *v64) - v36);
      v51 = (float32x4_t *)__p;
      v52 = v79;
      if (__p == v79)
      {
LABEL_51:
        v30.i32[0] = 0;
        *(double *)a5.i64 = vabds_f32(0.0, v40);
        if (*(double *)a5.i64 < 0.00000001)
          break;
        goto LABEL_52;
      }
    }
    v53 = (char *)v52 - (char *)v51 - 4;
    v30.i32[0] = 0;
    v54 = (float *)v51;
    v55 = v33;
    if (v53 < 0x1C)
      goto LABEL_77;
    v56 = (v53 >> 2) + 1;
    v57 = v56 & 0x7FFFFFFFFFFFFFF8;
    v54 = &v51->f32[v57];
    v55 = &v33[v57];
    v58 = v51 + 1;
    v59 = v56 & 0x7FFFFFFFFFFFFFF8;
    v60 = (float32x4_t *)(v33 + 4);
    do
    {
      a5 = vmulq_f32(v58[-1], v60[-1]);
      a6 = vmulq_f32(*v58, *v60);
      v30.f32[0] = (float)((float)((float)((float)((float)((float)((float)(v30.f32[0] + a5.f32[0]) + a5.f32[1])
                                                         + a5.f32[2])
                                                 + a5.f32[3])
                                         + a6.f32[0])
                                 + a6.f32[1])
                         + a6.f32[2])
                 + a6.f32[3];
      v60 += 2;
      v58 += 2;
      v59 -= 8;
    }
    while (v59);
    if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_77:
      do
      {
        v61 = *v54++;
        v62 = v61;
        v63 = *v55++;
        a6.f32[0] = v63;
        v30.f32[0] = v30.f32[0] + (float)(v62 * v63);
      }
      while (v54 != (float *)v52);
    }
    *(double *)a5.i64 = vabds_f32(v30.f32[0], v40);
    if (*(double *)a5.i64 < 0.00000001)
      break;
LABEL_52:
    if (v51 != v52 || v33 != v34)
    {
      a6.f32[0] = v36 * (float)(v39 / (float)(v39 + 1.0));
      v70 = (float32x4_t *)&v51->i32[1];
      v71 = v33 + 1;
      while (1)
      {
        v72 = v71;
        v73 = *(v71 - 1);
        v74 = 0.0;
        if (v73 < (float)(v36 * (float)((float)(v39 + 1.0) / v39)))
        {
          v74 = 1.0;
          if (v73 > a6.f32[0])
            v74 = sqrtf((float)((float)(v36 * v39) * (float)(v39 + 1.0)) / v73) - v39;
        }
        v70[-1].f32[3] = v74;
        ++v71;
        v75 = &v70->i8[4];
        v37 = v70 == v52;
        v70 = (float32x4_t *)((char *)v70 + 4);
        if (v37)
        {
          v70 = (float32x4_t *)v75;
          if (v72 == v34)
            break;
        }
      }
    }
    a5.i32[0] = 1068708659;
    v39 = v39 * 1.4;
    ++v35;
    v40 = v30.f32[0];
  }
  while (v35 != 40);
  if (v33)
  {
    operator delete(v33);
    v51 = (float32x4_t *)__p;
  }
  if (v51)
  {
    v79 = v51;
    operator delete(v51);
  }
  if (v81)
  {
    v82 = (char *)v81;
    operator delete(v81);
  }
  if (v84)
  {
    v85 = (float32x2_t *)v84;
    operator delete(v84);
  }
}

void sub_223ED3310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v23;
  void *v24;

  if (a15)
  {
    operator delete(a15);
    v23 = a18;
    if (!a18)
    {
LABEL_3:
      v24 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v23 = a18;
    if (!a18)
      goto LABEL_3;
  }
  operator delete(v23);
  v24 = __p;
  if (!__p)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v24);
  goto LABEL_5;
}

void sub_223ED33A8(int32x2_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, int64x2_t **a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  unint64_t v12;
  uint64_t v13;
  float32x2_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x2_t v17;
  int8x16_t v18;
  float32x2_t v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  size_t v24;
  int32x4_t *v25;
  uint64_t v26;
  int32x4_t *v27;
  unint64_t v28;
  int32x4_t v29;
  int32x4_t *v30;
  int32x4_t v31;
  int32x4_t v32;
  uint64_t v33;
  char *v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float v38;
  int8x16_t v39;
  float32x2_t v40;
  BOOL v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int64x2_t **v46;
  void *v47;
  uint64_t v48;
  int64x2_t *v49;
  float *v50;
  uint64_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float v55;
  int v56;
  float32x2_t *v57;
  int8x16_t v58;
  float32x2_t v59;
  int v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  int32x2_t *v64;
  float32x2_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  float *v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float v74;
  int v75;
  float32x2_t *v76;
  int8x16_t v77;
  float32x2_t v78;
  int v79;
  int v80;
  char v81;
  int v82;
  int v83;
  int v84;
  int v85;
  float *v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float v90;
  int v91;
  int v92;
  int32x2_t *v93;
  int8x16_t v94;
  float32x2_t v95;
  int v96;
  int v97;
  int v98;
  int32x2_t *v99;
  float32x4_t v100;
  float32x2_t v101;
  float v102;
  int32x2_t *v103;
  int8x16_t v104;
  float32x2_t v105;
  int v106;
  float32x2_t v107;
  int v109;
  int v110;
  float32x2_t *v111;
  int32x2_t *v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t *v116;
  float32x2_t v117;
  unint64_t v118;
  unsigned int v119;
  unsigned int v120;
  _DWORD *v121;
  unsigned int v122;
  unsigned int v123;
  BOOL v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int v129;
  _DWORD *v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  int32x2_t *v138;
  float32x4_t v139;
  float32x2_t v140;
  float v141;
  int32x2_t *v142;
  int8x16_t v143;
  float32x2_t v144;
  int v145;
  float32x2_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  char *v154;
  char *v155;
  unint64_t v156;
  int64x2_t *v157;
  int64x2_t *v158;
  int64x2_t *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  int64x2_t *v165;
  int64x2_t *v166;
  int64x2_t v167;
  int64x2_t *v168;
  int64x2_t *v169;
  void *v170;
  void *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t *v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _BYTE *v182;
  uint64_t *v183;
  int64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  _OWORD *v190;
  uint64_t *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  int64x2_t **v197;
  unint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  void *v204;
  int v205;
  int v207;
  unsigned int v208;
  void *v209;
  __int8 *v210;
  __int8 *v211;
  unsigned int v212;
  void *__p;
  unint64_t v214;
  unint64_t v215;

  v12 = *(_QWORD *)(a2 + 8);
  v198 = HIDWORD(v12);
  v13 = (HIDWORD(v12) * v12);
  v20 = cosf(a6 * 0.017453);
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v203 = v12;
  if ((_DWORD)v13)
  {
    v24 = 4 * (HIDWORD(v12) * v12);
    v25 = (int32x4_t *)operator new(v24);
    v209 = v25;
    v211 = &v25->i8[v24];
    bzero(v25, v24);
    v210 = &v25->i8[v24];
    v212 = HIDWORD(v12) * v12;
    if (v24 - 4 >= 0x1C)
    {
      v28 = ((v24 - 4) >> 2) + 1;
      v26 = v28 & 0x7FFFFFFFFFFFFFF8;
      v27 = (int32x4_t *)((char *)v25 + 4 * (v28 & 0x7FFFFFFFFFFFFFF8));
      v29 = (int32x4_t)xmmword_2246499B0;
      v30 = v25 + 1;
      v31.i64[0] = 0x400000004;
      v31.i64[1] = 0x400000004;
      v32.i64[0] = 0x800000008;
      v32.i64[1] = 0x800000008;
      v33 = v28 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v30[-1] = v29;
        *v30 = vaddq_s32(v29, v31);
        v29 = vaddq_s32(v29, v32);
        v30 += 2;
        v33 -= 8;
      }
      while (v33);
      if (v28 == v26)
      {
LABEL_10:
        v34 = (char *)operator new(4 * (HIDWORD(v12) * v12));
        v12 = (unint64_t)&v34[4 * v13];
        __p = v34;
        v215 = v12;
        memset_pattern16(v34, &unk_224690430, 4 * v13);
        v214 = v12;
        LODWORD(v12) = v203;
        v199 = v13;
        if (**(float **)a2 < 0.5)
          goto LABEL_15;
        goto LABEL_11;
      }
    }
    else
    {
      LODWORD(v26) = 0;
      v27 = v25;
    }
    do
    {
      v27->i32[0] = v26;
      v27 = (int32x4_t *)((char *)v27 + 4);
      LODWORD(v26) = v26 + 1;
    }
    while (v27 != (int32x4_t *)&v25->i8[v24]);
    goto LABEL_10;
  }
  v212 = 0;
  v214 = 0;
  v215 = 0;
  __p = 0;
  v199 = (HIDWORD(v12) * v12);
  if (**(float **)a2 < 0.5)
    goto LABEL_15;
LABEL_11:
  if (*(float *)a1[1].i32 >= 0.05)
  {
    v14.i32[0] = a1[1].i32[0];
    *(int32x2_t *)v15.f32 = *a1;
    v35 = v15;
    v35.i32[2] = v14.i32[0];
    v36 = (float32x2_t)vdup_lane_s32(*a1, 1);
    v37 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), v36, (float32x2_t)*a1, 1), v14, v14);
    v38 = sqrtf(v37.f32[0]);
    v15.i32[0] = **(_DWORD **)a3;
    v36.i32[0] = *(_DWORD *)(*(_QWORD *)a3 + 4);
    v37.i32[0] = *(_DWORD *)(*(_QWORD *)a3 + 8);
    v39 = (int8x16_t)vmulq_n_f32(v35, 1.0 / v38);
    v40 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v39.i8), v36, *(float32x2_t *)v39.i8, 1);
    v14 = (float32x2_t)vextq_s8(v39, v39, 8uLL).u64[0];
    if (fabsf(vmla_f32(v40, v14, v37).f32[0]) > 0.25882)
    {
      v41 = **(_BYTE **)a4 == 9;
      v197 = a5;
      v42 = v12 - 1;
      if (!v42)
        goto LABEL_16;
      goto LABEL_21;
    }
  }
LABEL_15:
  v41 = 1;
  v197 = a5;
  v42 = v12 - 1;
  if (!v42)
    goto LABEL_16;
LABEL_21:
  v50 = (float *)&a1[2] + 1;
  v51 = 1;
  do
  {
    if (*(float *)(*(_QWORD *)a2 + 4 * (*(_DWORD *)(a2 + 16) * v51)) < 0.5)
      goto LABEL_22;
    if (*v50 < 0.05)
      goto LABEL_22;
    v14.f32[0] = *v50;
    v16.i64[0] = *((_QWORD *)v50 - 1);
    v52 = (float32x4_t)v16;
    v52.f32[2] = *v50;
    v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1);
    v54 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32), v53, *(float32x2_t *)v16.i8, 1), v14, v14);
    v55 = sqrtf(v54.f32[0]);
    v56 = *(_DWORD *)(a3 + 24);
    v57 = (float32x2_t *)(*(_QWORD *)a3 + 4 * (v56 * v51));
    v54.i32[0] = v57->i32[0];
    v17.i32[0] = v57->i32[1];
    v18.i32[0] = v57[1].i32[0];
    v58 = (int8x16_t)vmulq_n_f32(v52, 1.0 / v55);
    v59 = vmla_lane_f32(vmul_f32(v54, *(float32x2_t *)v58.i8), v17, *(float32x2_t *)v58.i8, 1);
    v16 = vextq_s8(v58, v58, 8uLL);
    if (fabsf(vmla_f32(v59, *(float32x2_t *)v16.i8, *(float32x2_t *)v18.i8).f32[0]) <= 0.25882)
    {
LABEL_22:
      v41 = 1;
    }
    else
    {
      v60 = *(_DWORD *)(a4 + 16);
      v61 = *(unsigned __int8 *)(*(_QWORD *)a4 + (v60 * v51));
      v62 = v61 == 9 || v41;
      v41 = v61 == 9;
      if (!v62)
      {
        v63 = (v51 - 1);
        if (v61 == *(unsigned __int8 *)(*(_QWORD *)a4 + (v60 * v63)))
        {
          v64 = (int32x2_t *)(*(_QWORD *)a3 + 4 * (v56 * v63));
          v17.i32[0] = v57[1].i32[0];
          v19 = *v57;
          v16.i32[0] = v64[1].i32[0];
          *(int32x2_t *)v18.i8 = vdup_lane_s32(*v64, 1);
          v21 = vmla_f32(vmla_lane_f32(vmul_f32(*v57, (float32x2_t)*v64), *(float32x2_t *)v18.i8, *v57, 1), *(float32x2_t *)v16.i8, v17);
          if (fabsf(v21.f32[0]) >= v20)
          {
            v21 = (float32x2_t)vdup_lane_s32((int32x2_t)v19, 1);
            v65 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v52.f32, v19), v21, v53), v17, v14);
            v53.f32[0] = *(v50 - 3);
            v14 = vsub_f32(v65, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v50 - 5), (float32x2_t)*v64), *(float32x2_t *)v18.i8, *(float32x2_t *)(v50 - 5), 1), *(float32x2_t *)v16.i8, v53));
            if (fabsf(v14.f32[0]) <= a7)
              sub_223ED4414((uint64_t)&v209, v51, v63);
          }
        }
        v41 = 0;
      }
    }
    v51 = (v51 + 1);
    v50 += 3;
  }
  while (v203 != (_DWORD)v51);
LABEL_16:
  v43 = v198;
  v44 = v203;
  if ((_DWORD)v198 != 1)
  {
    v66 = 0;
    v67 = 1;
    v68 = v203;
    v208 = v203;
    while (1)
    {
      v69 = *(_DWORD *)(a2 + 20);
      if (*(float *)(*(_QWORD *)a2 + 4 * (v69 * v67)) < 0.5)
        goto LABEL_39;
      v70 = (float *)a1 + 3 * v67 * v44;
      if (v70[2] < 0.05)
        goto LABEL_39;
      v14.f32[0] = v70[2];
      v16.i64[0] = *(_QWORD *)v70;
      v71 = (float32x4_t)v16;
      v71.i32[2] = v14.i32[0];
      v72 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70, 1);
      v73 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), v72, *(float32x2_t *)v70, 1), v14, v14);
      v74 = sqrtf(v73.f32[0]);
      v75 = *(_DWORD *)(a3 + 28);
      v76 = (float32x2_t *)(*(_QWORD *)a3 + 4 * (v75 * v67));
      v73.i32[0] = v76->i32[0];
      v17.i32[0] = v76->i32[1];
      v18.i32[0] = v76[1].i32[0];
      v77 = (int8x16_t)vmulq_n_f32(v71, 1.0 / v74);
      v78 = vmla_lane_f32(vmul_f32(v73, *(float32x2_t *)v77.i8), v17, *(float32x2_t *)v77.i8, 1);
      v16 = vextq_s8(v77, v77, 8uLL);
      if (fabsf(vmla_f32(v78, *(float32x2_t *)v16.i8, *(float32x2_t *)v18.i8).f32[0]) <= 0.25882
        || (v79 = *(_DWORD *)(a4 + 20), v80 = *(unsigned __int8 *)(*(_QWORD *)a4 + (v79 * v67)), v80 == 9))
      {
LABEL_39:
        v81 = 1;
      }
      else
      {
        v137 = v67 - 1;
        if (*(float *)(*(_QWORD *)a2 + 4 * (v69 * (v67 - 1))) >= 0.5)
        {
          v138 = (int32x2_t *)((char *)a1 + 12 * v137 * v44);
          if (*(float *)v138[1].i32 >= 0.05)
          {
            v16.i32[0] = v138[1].i32[0];
            *(int32x2_t *)v18.i8 = *v138;
            v139 = (float32x4_t)v18;
            v139.i32[2] = v16.i32[0];
            v17 = (float32x2_t)vdup_lane_s32(*v138, 1);
            v140 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32), v17, (float32x2_t)*v138, 1), *(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8);
            v141 = sqrtf(v140.f32[0]);
            v142 = (int32x2_t *)(*(_QWORD *)a3 + 4 * (v75 * v137));
            v140.i32[0] = v142->i32[0];
            v21.i32[0] = v142->i32[1];
            v22.i32[0] = v142[1].i32[0];
            v143 = (int8x16_t)vmulq_n_f32(v139, 1.0 / v141);
            v144 = vmla_lane_f32(vmul_f32(v140, *(float32x2_t *)v143.i8), v21, *(float32x2_t *)v143.i8, 1);
            v18 = vextq_s8(v143, v143, 8uLL);
            v19 = vmla_f32(v144, *(float32x2_t *)v18.i8, v22);
            v81 = 0;
            if (fabsf(v19.f32[0]) <= 0.25882)
              goto LABEL_40;
            v145 = *(unsigned __int8 *)(*(_QWORD *)a4 + (v79 * v137));
            if (v145 == 9 || v80 != v145)
              goto LABEL_40;
            v19.i32[0] = v76[1].i32[0];
            v22 = *v76;
            v18.i32[0] = v142[1].i32[0];
            v21 = (float32x2_t)*v142;
            v146 = (float32x2_t)vdup_lane_s32(*v142, 1);
            if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*v76, (float32x2_t)*v142), v146, *v76, 1), *(float32x2_t *)v18.i8, v19).f32[0]) >= v20)
            {
              v14 = vsub_f32(vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v71.f32, v22), (float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), v72), v19, v14), vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v139.f32, v21), v146, v17), *(float32x2_t *)v18.i8, *(float32x2_t *)v16.i8));
              if (fabsf(v14.f32[0]) <= a7)
                sub_223ED4414((uint64_t)&v209, v208, v208 - v44);
            }
          }
        }
        v81 = 0;
      }
LABEL_40:
      if (v44 == 1)
      {
        ++v208;
        ++v67;
        ++v68;
        ++v66;
        if ((_DWORD)v67 == v43)
          break;
      }
      else
      {
        v202 = v66;
        v82 = 0;
        v205 = v67 - 1;
        do
        {
          v83 = v82 + 1;
          v84 = *(_DWORD *)(a2 + 20);
          v85 = *(_DWORD *)(a2 + 16) * (v82 + 1);
          if (*(float *)(*(_QWORD *)a2 + 4 * (v85 + v84 * v67)) < 0.5)
            goto LABEL_46;
          v86 = (float *)&a1[1] + 3 * v68 + 3 * v82 + 1;
          if (v86[2] < 0.05)
            goto LABEL_46;
          v14.f32[0] = v86[2];
          v16.i64[0] = *(_QWORD *)v86;
          v87 = (float32x4_t)v16;
          v87.i32[2] = v14.i32[0];
          v88 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v86, 1);
          v89 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), v88, *(float32x2_t *)v86, 1), v14, v14);
          v90 = sqrtf(v89.f32[0]);
          v91 = *(_DWORD *)(a3 + 28);
          v92 = *(_DWORD *)(a3 + 24) * v83;
          v93 = (int32x2_t *)(*(_QWORD *)a3 + 4 * (v92 + v91 * v67));
          v89.i32[0] = v93->i32[0];
          v17.i32[0] = v93->i32[1];
          v18.i32[0] = v93[1].i32[0];
          v94 = (int8x16_t)vmulq_n_f32(v87, 1.0 / v90);
          v95 = vmla_lane_f32(vmul_f32(v89, *(float32x2_t *)v94.i8), v17, *(float32x2_t *)v94.i8, 1);
          v16 = vextq_s8(v94, v94, 8uLL);
          if (fabsf(vmla_f32(v95, *(float32x2_t *)v16.i8, *(float32x2_t *)v18.i8).f32[0]) <= 0.25882
            || (v96 = *(_DWORD *)(a4 + 20),
                v97 = *(_DWORD *)(a4 + 16) * v83,
                v98 = *(unsigned __int8 *)(*(_QWORD *)a4 + (v97 + v96 * v67)),
                v98 == 9))
          {
LABEL_46:
            v81 = 1;
          }
          else
          {
            v200 = v208 + v82;
            v201 = v208 + v82 + 1;
            if (*(float *)(*(_QWORD *)a2 + 4 * (v85 + v84 * v205)) >= 0.5)
            {
              v99 = (int32x2_t *)((char *)a1 + 12 * (v202 + v82 + 1));
              if (*(float *)v99[1].i32 >= 0.05)
              {
                v16.i32[0] = v99[1].i32[0];
                *(int32x2_t *)v18.i8 = *v99;
                v100 = (float32x4_t)v18;
                v100.i32[2] = v16.i32[0];
                v17 = (float32x2_t)vdup_lane_s32(*v99, 1);
                v101 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32), v17, (float32x2_t)*v99, 1), *(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8);
                v102 = sqrtf(v101.f32[0]);
                v103 = (int32x2_t *)(*(_QWORD *)a3 + 4 * (v92 + v91 * v205));
                v101.i32[0] = v103->i32[0];
                v21.i32[0] = v103->i32[1];
                v22.i32[0] = v103[1].i32[0];
                v104 = (int8x16_t)vmulq_n_f32(v100, 1.0 / v102);
                v105 = vmla_lane_f32(vmul_f32(v101, *(float32x2_t *)v104.i8), v21, *(float32x2_t *)v104.i8, 1);
                v18 = vextq_s8(v104, v104, 8uLL);
                v19 = vmla_f32(v105, *(float32x2_t *)v18.i8, v22);
                if (fabsf(v19.f32[0]) > 0.25882)
                {
                  v106 = *(unsigned __int8 *)(*(_QWORD *)a4 + (v97 + v96 * v205));
                  if (v106 != 9 && v98 == v106)
                  {
                    v18.i32[0] = v93[1].i32[0];
                    v19 = (float32x2_t)*v93;
                    v21 = (float32x2_t)vdup_lane_s32(*v93, 1);
                    v22 = (float32x2_t)*v103;
                    v107 = (float32x2_t)vdup_lane_s32(*v103, 1);
                    v23.i32[0] = v103[1].i32[0];
                    v14 = vsub_f32(vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v87.f32, (float32x2_t)*v93), v21, v88), *(float32x2_t *)v18.i8, v14), vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v100.f32, (float32x2_t)*v103), v107, v17), v23, *(float32x2_t *)v16.i8));
                    v14.f32[0] = fabsf(v14.f32[0]);
                    if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*v93, (float32x2_t)*v103), v107, (float32x2_t)*v93, 1), v23, *(float32x2_t *)v18.i8).f32[0]) >= v20&& v14.f32[0] <= a7)
                    {
                      v196 = 1 - v203 + v208 + v82;
                      v128 = (unint64_t)(v210 - (_BYTE *)v209) >> 2;
                      if ((v201 >= v128 || v196 >= v128)
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                      {
LABEL_163:
                        abort();
                      }
                      v195 = sub_223ED44F8((uint64_t *)&v209, v201);
                      v129 = sub_223ED44F8((uint64_t *)&v209, v196);
                      if (v195 != v129)
                      {
                        v130 = __p;
                        v131 = *((_DWORD *)__p + v195);
                        v132 = *((_DWORD *)__p + v129);
                        v133 = v131 >= v132;
                        if (v131 >= v132)
                          v134 = v195;
                        else
                          v134 = v129;
                        if (v133)
                          v135 = v129;
                        else
                          v135 = v195;
                        v136 = v135;
                        *(_DWORD *)((char *)v209 + v136 * 4) = v134;
                        v130[v134] += v130[v136];
                        --v212;
                      }
                    }
                  }
                }
              }
            }
            if ((v81 & 1) != 0)
              goto LABEL_66;
            if (*(unsigned __int8 *)(*(_QWORD *)a4
                                    + (*(_DWORD *)(a4 + 20) * v67 + *(_DWORD *)(a4 + 16) * v83)) != *(unsigned __int8 *)(*(_QWORD *)a4 + (*(_DWORD *)(a4 + 20) * v67 + *(_DWORD *)(a4 + 16) * v82)))
              goto LABEL_66;
            v109 = *(_DWORD *)(a3 + 24);
            v110 = *(_DWORD *)(a3 + 28) * v67;
            v111 = (float32x2_t *)(*(_QWORD *)a3 + 4 * (v110 + v109 * v83));
            v112 = (int32x2_t *)(*(_QWORD *)a3 + 4 * (v110 + v109 * v82));
            v88.i32[0] = v111[1].i32[0];
            v113 = *v111;
            v14.i32[0] = v112[1].i32[0];
            v114 = (float32x2_t)*v112;
            v115 = (float32x2_t)vdup_lane_s32(*v112, 1);
            v17 = vmla_f32(vmla_lane_f32(vmul_f32(*v111, (float32x2_t)*v112), v115, *v111, 1), v14, v88);
            if (fabsf(v17.f32[0]) < v20)
              goto LABEL_66;
            v17 = (float32x2_t)vdup_lane_s32((int32x2_t)v113, 1);
            v116 = (float32x2_t *)((char *)a1 + 12 * v68 + 12 * v82);
            v18.i64[0] = *(_QWORD *)v86;
            v19.f32[0] = v86[2];
            v117 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v86, v113), v17, *(float32x2_t *)v86, 1), v88, v19);
            v17.i32[0] = v116[1].i32[0];
            v14 = vsub_f32(v117, vmla_f32(vmla_lane_f32(vmul_f32(*v116, v114), v115, *v116, 1), v14, v17));
            if (fabsf(v14.f32[0]) > a7)
              goto LABEL_66;
            v118 = (unint64_t)(v210 - (_BYTE *)v209) >> 2;
            if ((v201 >= v118 || v200 >= v118)
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_163;
            }
            v119 = sub_223ED44F8((uint64_t *)&v209, v201);
            v120 = sub_223ED44F8((uint64_t *)&v209, v200);
            if (v119 == v120)
            {
LABEL_66:
              v81 = 0;
            }
            else
            {
              v81 = 0;
              v121 = __p;
              v122 = *((_DWORD *)__p + v119);
              v123 = *((_DWORD *)__p + v120);
              v124 = v122 >= v123;
              if (v122 >= v123)
                v125 = v119;
              else
                v125 = v120;
              if (v124)
                v126 = v120;
              else
                v126 = v119;
              v127 = v126;
              *(_DWORD *)((char *)v209 + v127 * 4) = v125;
              v121[v125] += v121[v127];
              --v212;
            }
          }
          v82 = v83;
        }
        while (v42 != v83);
        v208 += v83 + 1;
        v44 = v203;
        v43 = v198;
        ++v67;
        v68 += v203;
        v66 = v202 + v203;
        if ((_DWORD)v67 == (_DWORD)v198)
          break;
      }
    }
  }
  v45 = v199;
  if ((_DWORD)v199)
  {
    v46 = v197;
    v47 = operator new(4 * v199);
    memset(v47, 255, 4 * v199);
    v48 = v212;
    v197[1] = 0;
    v197[2] = 0;
    *v197 = 0;
    v204 = v47;
    if ((_DWORD)v48)
      goto LABEL_19;
LABEL_97:
    if (!(_DWORD)v199)
      goto LABEL_151;
    goto LABEL_98;
  }
  v47 = 0;
  v46 = v197;
  v48 = v212;
  v197[1] = 0;
  v197[2] = 0;
  *v197 = 0;
  v204 = 0;
  if (!(_DWORD)v48)
    goto LABEL_97;
LABEL_19:
  v49 = (int64x2_t *)operator new(24 * v48);
  *v46 = v49;
  v46[1] = v49;
  v46[2] = (int64x2_t *)((char *)v49 + 24 * v48);
  if ((_DWORD)v199)
  {
LABEL_98:
    v147 = 0;
    v207 = 0;
    while (1)
    {
      v149 = sub_223ED44F8((uint64_t *)&v209, v147);
      v150 = v149;
      if (v149 >= (unint64_t)((v210 - (_BYTE *)v209) >> 2)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 328, (uint64_t)"idx < this->m_parentIndices.size()", 34, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v151 = sub_223ED44F8((uint64_t *)&v209, v149);
      v152 = *((unsigned int *)__p + v151);
      if (v152 < v199 >> 5)
        goto LABEL_101;
      v153 = *((_DWORD *)v47 + v149);
      if (v153 == -1)
        break;
LABEL_129:
      v172 = (uint64_t)&(*v46)->i64[3 * v153];
      v174 = (uint64_t *)(v172 + 8);
      v173 = *(uint64_t **)(v172 + 8);
      v175 = *(_QWORD *)(v172 + 16);
      if ((unint64_t)v173 >= v175)
      {
        v176 = *(uint64_t **)v172;
        v177 = (uint64_t)v173 - *(_QWORD *)v172;
        v178 = v177 >> 3;
        v179 = (v177 >> 3) + 1;
        if (v179 >> 61)
          sub_22367C394();
        v180 = v175 - (_QWORD)v176;
        if (v180 >> 2 > v179)
          v179 = v180 >> 2;
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v179;
        if (v181)
        {
          if (v181 >> 61)
            sub_223174E94();
          v182 = operator new(8 * v181);
          v183 = (uint64_t *)&v182[8 * v178];
          *v183 = v147;
          v148 = (uint64_t)(v183 + 1);
          v184 = (char *)v173 - (char *)v176;
          if (v173 != v176)
          {
LABEL_139:
            v185 = v184 - 8;
            if (v185 < 0x58)
            {
              v46 = v197;
              goto LABEL_147;
            }
            v186 = (char *)v173 - v182 - v177;
            v46 = v197;
            if (v186 < 0x20)
              goto LABEL_166;
            v187 = (v185 >> 3) + 1;
            v188 = 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
            v189 = &v173[v188 / 0xFFFFFFFFFFFFFFF8];
            v183 = (uint64_t *)((char *)v183 - v188);
            v190 = &v182[8 * v178 - 16];
            v191 = v173 - 2;
            v192 = v187 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v193 = *(_OWORD *)v191;
              *(v190 - 1) = *((_OWORD *)v191 - 1);
              *v190 = v193;
              v190 -= 2;
              v191 -= 4;
              v192 -= 4;
            }
            while (v192);
            v173 = v189;
            if (v187 != (v187 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_147:
                v194 = *--v173;
                *--v183 = v194;
              }
              while (v173 != v176);
            }
LABEL_148:
            *(_QWORD *)v172 = v183;
            *v174 = v148;
            *(_QWORD *)(v172 + 16) = &v182[8 * v181];
            if (v176)
              operator delete(v176);
            v45 = v199;
            v47 = v204;
            goto LABEL_100;
          }
        }
        else
        {
          v182 = 0;
          v183 = (uint64_t *)(8 * v178);
          *(_QWORD *)(8 * v178) = v147;
          v148 = 8 * v178 + 8;
          v184 = (char *)v173 - (char *)v176;
          if (v173 != v176)
            goto LABEL_139;
        }
        v46 = v197;
        goto LABEL_148;
      }
      *v173 = v147;
      v148 = (uint64_t)(v173 + 1);
LABEL_100:
      *v174 = v148;
LABEL_101:
      if (++v147 == v45)
        goto LABEL_151;
    }
    *((_DWORD *)v47 + v149) = v207;
    if ((_DWORD)v152)
    {
      v154 = (char *)operator new(8 * v152);
      v155 = &v154[8 * v152];
      v157 = v46[1];
      v156 = (unint64_t)v46[2];
      if ((unint64_t)v157 < v156)
      {
LABEL_108:
        v157->i64[0] = (uint64_t)v154;
        v157->i64[1] = (uint64_t)v154;
        v158 = (int64x2_t *)((char *)v157 + 24);
        v157[1].i64[0] = (uint64_t)v155;
        v45 = v199;
        v47 = v204;
LABEL_128:
        ++v207;
        v46[1] = v158;
        v153 = *((_DWORD *)v47 + v150);
        goto LABEL_129;
      }
    }
    else
    {
      v154 = 0;
      v155 = 0;
      v157 = v46[1];
      v156 = (unint64_t)v46[2];
      if ((unint64_t)v157 < v156)
        goto LABEL_108;
    }
    v159 = *v46;
    v160 = 0xAAAAAAAAAAAAAAABLL * (((char *)v157 - (char *)*v46) >> 3);
    v161 = v160 + 1;
    if (v160 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v162 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v156 - (_QWORD)v159) >> 3);
    if (2 * v162 > v161)
      v161 = 2 * v162;
    if (v162 >= 0x555555555555555)
      v163 = 0xAAAAAAAAAAAAAAALL;
    else
      v163 = v161;
    if (v163 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v164 = (char *)operator new(24 * v163);
    v165 = (int64x2_t *)&v164[24 * v160];
    v166 = (int64x2_t *)&v164[24 * v163];
    *v165 = vdupq_n_s64((unint64_t)v154);
    v165[1].i64[0] = (uint64_t)v155;
    v158 = (int64x2_t *)((char *)v165 + 24);
    if (v157 == v159)
    {
      *v46 = v165;
      v46[1] = v158;
      v46[2] = v166;
      v45 = v199;
      v47 = v204;
    }
    else
    {
      v45 = v199;
      v47 = v204;
      do
      {
        v167 = *(int64x2_t *)((char *)v157 - 24);
        v157 = (int64x2_t *)((char *)v157 - 24);
        *(int64x2_t *)((char *)v165 - 24) = v167;
        v165 = (int64x2_t *)((char *)v165 - 24);
        v165[1].i64[0] = v157[1].i64[0];
        v157->i64[0] = 0;
        v157->i64[1] = 0;
        v157[1].i64[0] = 0;
      }
      while (v157 != v159);
      v157 = *v46;
      v168 = v46[1];
      *v46 = v165;
      v46[1] = v158;
      v46[2] = v166;
      if (v168 != v157)
      {
        v169 = v168;
        do
        {
          v171 = (void *)v169[-2].i64[1];
          v169 = (int64x2_t *)((char *)v169 - 24);
          v170 = v171;
          if (v171)
          {
            v168[-1].i64[0] = (uint64_t)v170;
            operator delete(v170);
          }
          v168 = v169;
        }
        while (v169 != v157);
      }
    }
    if (v157)
      operator delete(v157);
    goto LABEL_128;
  }
LABEL_151:
  if (v47)
    operator delete(v47);
  if (__p)
  {
    v214 = (unint64_t)__p;
    operator delete(__p);
  }
  if (v209)
  {
    v210 = (__int8 *)v209;
    operator delete(v209);
  }
}

void sub_223ED4338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v27 = a21;
    if (!a21)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v27 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

void sub_223ED43D4()
{
  JUMPOUT(0x223ED43ECLL);
}

void sub_223ED43E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_22317C838(v13);
  if (a11)
    operator delete(a11);
  sub_2236B3F2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223ED4414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v6 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  v7 = v6 > a2 && v6 > a3;
  if (!v7
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 310, (uint64_t)"idx1 < numElements && idx2 < numElements", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v8 = sub_223ED44F8((uint64_t *)a1, a2);
  result = sub_223ED44F8((uint64_t *)a1, a3);
  if (v8 != (_DWORD)result)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_DWORD *)(v10 + 4 * v8);
    v12 = *(_DWORD *)(v10 + 4 * result);
    v13 = v11 >= v12;
    if (v11 >= v12)
      v14 = v8;
    else
      v14 = result;
    if (v13)
      v15 = result;
    else
      v15 = v8;
    v16 = 4 * v15;
    *(_DWORD *)(*(_QWORD *)a1 + v16) = v14;
    *(_DWORD *)(v10 + 4 * v14) += *(_DWORD *)(v10 + v16);
    --*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t sub_223ED44F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = a2;
  v5 = *a1;
  if (a2 >= (unint64_t)((a1[1] - *a1) >> 2))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/Common/include/ACV/Types/UnionFind.h", 293, (uint64_t)"idx < m_parentIndices.size()", 28, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *a1;
  }
  if (*(_DWORD *)(v5 + 4 * v4) != (_DWORD)v2)
  {
    v2 = sub_223ED44F8(a1);
    *(_DWORD *)(*a1 + 4 * v4) = v2;
  }
  return v2;
}

void sub_223ED4594(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _OWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int8x16_t *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void ***v38;
  void ***v39;
  uint64_t v40;
  _BYTE *v41;
  BOOL v42;
  void *v43;
  void *v44;
  int8x16_t *v45;
  void *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  uint64_t v49;
  int8x16_t *v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x2_t v55;
  int64x2_t v56;
  int8x16_t v57;
  int32x2_t v58;
  int8x16_t v59;
  int8x16_t *v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int8 *v72;
  char *v73;
  BOOL v74;
  BOOL v75;
  int8x16_t *v77;
  char *i8;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  const double *i64;
  double *v96;
  uint64_t v97;
  const double *v98;
  double *v99;
  void *v100;
  int8x16_t *v101;
  void *v102;
  unint64_t v103;
  char **v104;
  char *v105;
  char *v106;
  uint64_t v107;
  int8x16_t *v108;
  uint64_t v109;
  int8x16_t *v110;
  int64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  uint64_t *v117;
  int8x16_t *v118;
  int8x16_t *v119;
  int64_t v120;
  unint64_t v121;
  int8x16_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int8x16_t *v127;
  int8x16_t *v128;
  uint64_t v129;
  int8x16_t v130;
  char *v131;
  char *v132;
  void **v133;
  unint64_t v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  int8x16_t v145;
  char **v146;
  void **v147;
  char *v148;
  unint64_t v149;
  void *__p[2];
  int8x16_t *v151;
  void *v152[2];
  int8x16_t *v153;
  uint64_t v154;
  float64x2x2_t v155;
  float64x2x2_t v156;

  v3 = a1;
  v4 = a2;
  v154 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  *(_DWORD *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  *(_BYTE *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 320) = 0;
  *(_BYTE *)(a2 + 324) = 0;
  *(_BYTE *)(a2 + 356) = 0;
  *(_BYTE *)(a2 + 360) = 0;
  *(_BYTE *)(a2 + 384) = 0;
  *(_BYTE *)(a2 + 392) = 0;
  *(_BYTE *)(a2 + 416) = 0;
  *(_BYTE *)(a2 + 424) = 0;
  *(_BYTE *)(a2 + 448) = 0;
  *(_WORD *)(a2 + 456) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 36);
  v7 = *(_QWORD *)(a1 + 28);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 28) = v7;
  *(_DWORD *)(a2 + 36) = v6;
  v8 = *(_OWORD *)(a1 + 56);
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = v10;
  *(_OWORD *)(a2 + 40) = v9;
  *(_OWORD *)(a2 + 56) = v8;
  *(_BYTE *)(a2 + 104) = *(_BYTE *)(a1 + 104);
  *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 108);
  if (*(_BYTE *)(a1 + 216))
  {
    v11 = *(float64x2_t *)(a1 + 200);
    v12 = *(float64x2_t *)(a1 + 184);
    v13 = *(float64x2_t *)(a1 + 168);
    v14 = *(float64x2_t *)(a1 + 152);
    v15 = *(float64x2_t *)(a1 + 136);
    v16 = *(float64x2_t *)(a1 + 120);
    v17 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)(a1 + 208)+ v11.f64[0]+ *(double *)(a1 + 192)+ v12.f64[0]+ *(double *)(a1 + 176)+ v13.f64[0]+ *(double *)(a1 + 160)+ v14.f64[0]+ *(double *)(a1 + 144)+ v15.f64[0]+ vaddvq_f64(v16)), 0);
    *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 112);
    *(float64x2_t *)(a2 + 200) = vdivq_f64(v11, v17);
    *(float64x2_t *)(a2 + 184) = vdivq_f64(v12, v17);
    *(float64x2_t *)(a2 + 168) = vdivq_f64(v13, v17);
    *(float64x2_t *)(a2 + 152) = vdivq_f64(v14, v17);
    *(float64x2_t *)(a2 + 136) = vdivq_f64(v15, v17);
    *(float64x2_t *)(a2 + 120) = vdivq_f64(v16, v17);
    *(_BYTE *)(a2 + 216) = 1;
  }
  *(_DWORD *)(a2 + 224) = *(_DWORD *)(a1 + 224);
  v18 = *(unsigned __int8 *)(a1 + 248);
  v19 = *(_DWORD *)(a1 + 256);
  if (*(_BYTE *)(a1 + 280))
  {
    v20 = *(_QWORD *)(a1 + 264);
    v2 = *(unsigned __int8 *)(a1 + 272);
    v21 = v20 & 0xFFFFFFFFFFFFFF00;
    v22 = 1;
  }
  else
  {
    v22 = 0;
    LOBYTE(v20) = 0;
    v21 = 0;
  }
  v23 = (_OWORD *)(v4 + 280);
  *(_QWORD *)(v4 + 232) = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(v4 + 240) = v18;
  *(_DWORD *)(v4 + 248) = v19;
  *(_QWORD *)(v4 + 256) = v21 | v20;
  *(_QWORD *)(v4 + 264) = v2;
  *(_BYTE *)(v4 + 272) = v22;
  v24 = *(char **)(a1 + 288);
  v25 = *(char **)(a1 + 296);
  __p[0] = 0;
  __p[1] = 0;
  v151 = 0;
  v26 = v25 - v24;
  if (v25 == v24)
  {
    *v23 = 0u;
    *(_QWORD *)(v4 + 296) = 0;
    if (*(_BYTE *)(a1 + 328))
      goto LABEL_13;
LABEL_21:
    if (!*(_BYTE *)(v3 + 364))
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v26 < 0)
    sub_22316E078();
  __p[0] = operator new(v25 - v24);
  __p[1] = __p[0];
  v151 = (int8x16_t *)((char *)__p[0] + 16 * (v26 >> 4));
  v147 = __p;
  do
  {
    *(_OWORD *)v152 = *(_OWORD *)v24;
    sub_2232E9564((char ***)&v147, v152);
    v24 += 16;
  }
  while (v24 != v25);
  v27 = *(_OWORD *)__p;
  v28 = v151;
  v29 = *(void **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)(v4 + 288) = v29;
    v144 = v27;
    operator delete(v29);
    v27 = v144;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)(v4 + 288) = 0;
    *(_QWORD *)(v4 + 296) = 0;
  }
  *v23 = v27;
  *(_QWORD *)(v4 + 296) = v28;
  if (!*(_BYTE *)(v3 + 328))
    goto LABEL_21;
LABEL_13:
  v30 = *(_QWORD *)(v3 + 312) & 0xFFFFFFFF00000000 | *(_QWORD *)(v3 + 320);
  v31 = *(_QWORD *)(v3 + 320) & 0xFFFFFFFF00000000 | *(_QWORD *)(v3 + 312);
  if (COERCE_FLOAT(*(_QWORD *)(v3 + 312)) <= COERCE_FLOAT(*(_QWORD *)(v3 + 320)))
  {
    v31 = *(_QWORD *)(v3 + 320);
    v30 = *(_QWORD *)(v3 + 312);
  }
  v32 = *(_QWORD *)(v3 + 320) & 0xFFFFFFFF00000000 | v30;
  v33 = *(_QWORD *)(v3 + 312) & 0xFFFFFFFF00000000 | v31;
  if (COERCE_FLOAT(HIDWORD(*(_QWORD *)(v3 + 312))) <= COERCE_FLOAT(HIDWORD(*(_QWORD *)(v3 + 320))))
  {
    v33 = v31;
    v32 = v30;
  }
  v34 = *(unsigned __int8 *)(v4 + 320);
  *(_QWORD *)(v4 + 304) = v32;
  if (v34)
  {
    *(_QWORD *)(v4 + 312) = v33;
    if (!*(_BYTE *)(v3 + 364))
      goto LABEL_23;
  }
  else
  {
    *(_BYTE *)(v4 + 320) = 1;
    *(_QWORD *)(v4 + 312) = v33;
    if (!*(_BYTE *)(v3 + 364))
    {
LABEL_23:
      if (!*(_BYTE *)(v3 + 392))
        goto LABEL_45;
      goto LABEL_24;
    }
  }
LABEL_22:
  v35 = *(_QWORD *)(v3 + 348);
  v36 = *(_QWORD *)(v3 + 356);
  v37 = *(unsigned __int8 *)(v4 + 356);
  *(_OWORD *)(v4 + 324) = *(_OWORD *)(v3 + 332);
  *(_QWORD *)(v4 + 340) = v35;
  *(_QWORD *)(v4 + 348) = v36;
  if (v37)
    goto LABEL_23;
  *(_BYTE *)(v4 + 356) = 1;
  if (!*(_BYTE *)(v3 + 392))
    goto LABEL_45;
LABEL_24:
  v38 = *(void ****)(v3 + 368);
  v39 = *(void ****)(v3 + 376);
  __p[0] = 0;
  __p[1] = 0;
  v151 = 0;
  v40 = (char *)v39 - (char *)v38;
  if (v39 == v38)
  {
    v41 = 0;
  }
  else
  {
    if (v40 < 0)
      sub_22316E078();
    __p[0] = operator new((char *)v39 - (char *)v38);
    __p[1] = __p[0];
    v151 = (int8x16_t *)((char *)__p[0] + 8 * (v40 >> 3));
    v152[0] = __p;
    do
    {
      v147 = *v38;
      sub_2232EA538((void ***)v152, &v147);
      ++v38;
    }
    while (v38 != v39);
    v40 = (uint64_t)__p[0];
    v41 = __p[1];
    if (__p[0])
      v42 = 1;
    else
      v42 = __p[1] == 0;
    if (!v42)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v40 = 0;
    }
  }
  sub_223FBEADC((uint64_t)&v41[-v40] >> 3, (float32x2_t *)v40, (uint64_t)__p);
  v44 = __p[0];
  v43 = __p[1];
  v45 = v151;
  if (v40)
    operator delete((void *)v40);
  if (*(_BYTE *)(v4 + 384))
  {
    v46 = *(void **)(v4 + 360);
    if (v46)
    {
      *(_QWORD *)(v4 + 368) = v46;
      operator delete(v46);
      *(_QWORD *)(v4 + 360) = 0;
      *(_QWORD *)(v4 + 368) = 0;
      *(_QWORD *)(v4 + 376) = 0;
    }
    *(_QWORD *)(v4 + 360) = v44;
    *(_QWORD *)(v4 + 368) = v43;
    *(_QWORD *)(v4 + 376) = v45;
LABEL_45:
    v142 = v3;
    v143 = v4;
    if (!*(_BYTE *)(v3 + 424))
      goto LABEL_123;
    goto LABEL_46;
  }
  *(_QWORD *)(v4 + 360) = v44;
  *(_QWORD *)(v4 + 368) = v43;
  *(_QWORD *)(v4 + 376) = v45;
  *(_BYTE *)(v4 + 384) = 1;
  v142 = v3;
  v143 = v4;
  if (!*(_BYTE *)(v3 + 424))
    goto LABEL_123;
LABEL_46:
  v47 = *(int8x16_t **)(v3 + 400);
  v48 = *(int8x16_t **)(v3 + 408);
  __p[0] = 0;
  __p[1] = 0;
  v151 = 0;
  v49 = (char *)v48 - (char *)v47;
  if (v48 != v47)
  {
    if (v49 < 0)
      sub_22324A284();
    v50 = (int8x16_t *)operator new((char *)v48 - (char *)v47);
    __p[0] = v50;
    __p[1] = v50;
    v151 = &v50[v49 >> 4];
    v51.i64[0] = 0xFFFFFFFFLL;
    v51.i64[1] = 0xFFFFFFFFLL;
    v52.i64[0] = 0xFFFFFFFF00000000;
    v52.i64[1] = 0xFFFFFFFF00000000;
    while (1)
    {
      while (1)
      {
        v53 = vandq_s8(*v47, v51);
        v54 = vandq_s8(*v47, v52);
        v55 = vdup_n_s32(COERCE_FLOAT(*v47) > COERCE_FLOAT(v47->i64[1]));
        v56.i64[0] = v55.u32[0];
        v56.i64[1] = v55.u32[1];
        v57 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v56, 0x3FuLL)), vorrq_s8(v54, vextq_s8(v53, v53, 8uLL)), *v47);
        v58 = vdup_n_s32(COERCE_FLOAT(HIDWORD(v47->i64[0])) > COERCE_FLOAT(HIDWORD(v47->i64[1])));
        v56.i64[0] = v58.u32[0];
        v56.i64[1] = v58.u32[1];
        v59 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v56, 0x3FuLL)), vorrq_s8(vandq_s8(v57, v51), vextq_s8(v54, v54, 8uLL)), v57);
        if (v50 >= v151)
          break;
        *v50++ = v59;
        __p[1] = v50;
        if (++v47 == v48)
          goto LABEL_116;
      }
      v60 = (int8x16_t *)__p[0];
      v61 = (char *)v50 - (char *)__p[0];
      v62 = ((char *)v50 - (char *)__p[0]) >> 4;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 60)
        sub_22324A284();
      v145 = v59;
      v64 = (char *)v151 - (char *)__p[0];
      if (((char *)v151 - (char *)__p[0]) >> 3 > v63)
        v63 = v64 >> 3;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
        v65 = 0xFFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65 >> 60)
        sub_223174E94();
      v66 = (char *)operator new(16 * v65);
      v67 = (int8x16_t *)&v66[16 * v62];
      *v67 = v145;
      v68 = v67 + 1;
      if (v50 == v60)
      {
        __p[0] = &v66[16 * v62];
        __p[1] = &v67[1];
        v151 = (int8x16_t *)&v66[16 * v65];
        if (!v60)
          goto LABEL_75;
LABEL_74:
        operator delete(v60);
        goto LABEL_75;
      }
      v69 = (char *)v50 - (char *)v60 - 16;
      if (v69 < 0x3F0)
        break;
      v70 = ((char *)&v50[-1] - (char *)v60) & 0xFFFFFFFFFFFFFFF0;
      v71 = (unint64_t)&v50[-1] - v70;
      v72 = &v50[-1].i8[8];
      v73 = &v50[-1].i8[-v70 + 8];
      v74 = &v66[v61 - 16 - v70] > &v66[v61 - 16] || &v66[v61 - 8 - v70] > &v66[v61 - 8];
      v75 = v74 || v71 > (unint64_t)&v50[-1];
      if (v75 || v73 > v72)
        break;
      v80 = v61 - v70;
      v81 = (unint64_t)&v66[v80 - 16];
      v82 = &v66[v61 - 8];
      v83 = &v66[v80 - 8];
      v84 = v81 >= (unint64_t)v72 || v71 >= (unint64_t)v82;
      v85 = !v84;
      v86 = v81 >= (unint64_t)v50 || v73 >= v82;
      v87 = !v86;
      v88 = v83 >= v72 || v71 >= (unint64_t)v67;
      v89 = !v88;
      v90 = v83 >= (char *)v50 || v73 >= (char *)v67;
      v91 = !v90;
      v92 = v83 >= v82 || v81 >= (unint64_t)v67;
      if (!v92 || v85 || v87 || v89 || v91)
        break;
      v93 = (v69 >> 4) + 1;
      v94 = 16 * (v93 & 0x1FFFFFFFFFFFFFFCLL);
      v77 = &v50[v94 / 0xFFFFFFFFFFFFFFF0];
      i8 = v67[v94 / 0xFFFFFFFFFFFFFFF0].i8;
      i64 = (const double *)v50[-2].i64;
      v96 = (double *)v67[-2].i64;
      v97 = v93 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v155 = vld2q_f64(i64);
        v98 = i64 - 4;
        v156 = vld2q_f64(v98);
        vst2q_f64(v96, v155);
        v99 = v96 - 4;
        vst2q_f64(v99, v156);
        v96 -= 8;
        i64 -= 8;
        v97 -= 4;
      }
      while (v97);
      if (v93 != (v93 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_72;
LABEL_73:
      __p[0] = i8;
      __p[1] = v68;
      v151 = (int8x16_t *)&v66[16 * v65];
      if (v60)
        goto LABEL_74;
LABEL_75:
      v50 = v68;
      v51.i64[0] = 0xFFFFFFFFLL;
      v51.i64[1] = 0xFFFFFFFFLL;
      v52.i64[0] = 0xFFFFFFFF00000000;
      v52.i64[1] = 0xFFFFFFFF00000000;
      __p[1] = v68;
      if (++v47 == v48)
      {
LABEL_116:
        v100 = __p[0];
        v101 = v151;
        v3 = v142;
        v4 = v143;
        if (*(_BYTE *)(v143 + 416))
          goto LABEL_117;
LABEL_121:
        *(_QWORD *)(v4 + 392) = v100;
        *(_QWORD *)(v4 + 400) = v50;
        *(_QWORD *)(v4 + 408) = v101;
        *(_BYTE *)(v4 + 416) = 1;
        goto LABEL_123;
      }
    }
    v77 = v50;
    i8 = &v66[16 * v62];
    do
    {
LABEL_72:
      v79 = v77[-1].i64[0];
      --v77;
      *((_QWORD *)i8 - 2) = v79;
      i8 -= 16;
      *((_QWORD *)i8 + 1) = v77->i64[1];
    }
    while (v77 != v60);
    goto LABEL_73;
  }
  v101 = 0;
  v50 = 0;
  v100 = 0;
  if (!*(_BYTE *)(v4 + 416))
    goto LABEL_121;
LABEL_117:
  v102 = *(void **)(v4 + 392);
  if (v102)
  {
    *(_QWORD *)(v4 + 400) = v102;
    operator delete(v102);
    *(_QWORD *)(v4 + 392) = 0;
    *(_QWORD *)(v4 + 400) = 0;
    *(_QWORD *)(v4 + 408) = 0;
  }
  *(_QWORD *)(v4 + 392) = v100;
  *(_QWORD *)(v4 + 400) = v50;
  *(_QWORD *)(v4 + 408) = v101;
LABEL_123:
  if (*(_BYTE *)(v3 + 456))
  {
    v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 440) - *(_QWORD *)(v3 + 432)) >> 3);
    v148 = 0;
    v149 = 0;
    v147 = 0;
    sub_2236ADBC8((uint64_t)&v147, v103);
    v104 = *(char ***)(v3 + 432);
    v146 = *(char ***)(v3 + 440);
    if (v104 != v146)
    {
      while (1)
      {
        v105 = *v104;
        v106 = v104[1];
        __p[0] = 0;
        __p[1] = 0;
        v151 = 0;
        v107 = v106 - v105;
        if (v106 != v105)
          break;
        v152[0] = 0;
        v152[1] = 0;
        v153 = 0;
        v131 = v148;
        if ((unint64_t)v148 < v149)
          goto LABEL_126;
LABEL_165:
        v148 = sub_2236ADCEC((char **)&v147, (uint64_t)v152);
        if (v152[0])
        {
          v152[1] = v152[0];
          operator delete(v152[0]);
        }
LABEL_127:
        v104 += 3;
        if (v104 == v146)
          goto LABEL_167;
      }
      if (v107 < 0)
        sub_22316E078();
      v108 = (int8x16_t *)operator new(v106 - v105);
      __p[0] = v108;
      __p[1] = v108;
      v151 = (int8x16_t *)((char *)v108 + 8 * (v107 >> 3));
      while (1)
      {
        while (1)
        {
          v109 = *(_QWORD *)v105;
          if (v108 >= v151)
            break;
          v108->i64[0] = v109;
          v108 = (int8x16_t *)((char *)v108 + 8);
          __p[1] = v108;
          v105 += 8;
          if (v105 == v106)
            goto LABEL_162;
        }
        v110 = (int8x16_t *)__p[0];
        v111 = (char *)v108 - (char *)__p[0];
        v112 = ((char *)v108 - (char *)__p[0]) >> 3;
        v113 = v112 + 1;
        if ((unint64_t)(v112 + 1) >> 61)
          sub_22316E078();
        v114 = (char *)v151 - (char *)__p[0];
        if (((char *)v151 - (char *)__p[0]) >> 2 > v113)
          v113 = v114 >> 2;
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v113;
        if (v115)
        {
          if (v115 >> 61)
            sub_223174E94();
          v116 = operator new(8 * v115);
          v117 = (uint64_t *)&v116[8 * v112];
          v118 = (int8x16_t *)&v116[8 * v115];
          *v117 = v109;
          v119 = (int8x16_t *)(v117 + 1);
          v120 = (char *)v108 - (char *)v110;
          if (v108 == v110)
          {
LABEL_149:
            __p[0] = v117;
            __p[1] = v119;
            v151 = v118;
            goto LABEL_150;
          }
        }
        else
        {
          v116 = 0;
          v117 = (uint64_t *)(8 * v112);
          v118 = 0;
          *(_QWORD *)(8 * v112) = v109;
          v119 = (int8x16_t *)(8 * v112 + 8);
          v120 = (char *)v108 - (char *)v110;
          if (v108 == v110)
            goto LABEL_149;
        }
        v121 = v120 - 8;
        if (v121 >= 0x168)
        {
          v124 = ((char *)&v108[-1].u64[1] - (char *)v110) & 0xFFFFFFFFFFFFFFF8;
          if (&v116[v111 - 8 - v124] > &v116[v111 - 8])
          {
            v122 = v108;
          }
          else if ((unint64_t *)((char *)&v108[-1].u64[1] - v124) > &v108[-1].u64[1])
          {
            v122 = v108;
          }
          else if ((unint64_t)((char *)v108 - v116 - v111) >= 0x20)
          {
            v125 = (v121 >> 3) + 1;
            v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
            v122 = (int8x16_t *)((char *)v108 - v126);
            v117 = (uint64_t *)((char *)v117 - v126);
            v127 = (int8x16_t *)&v116[8 * v112 - 16];
            v128 = v108 - 1;
            v129 = v125 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v130 = *v128;
              v127[-1] = v128[-1];
              *v127 = v130;
              v127 -= 2;
              v128 -= 2;
              v129 -= 4;
            }
            while (v129);
            if (v125 == (v125 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_145;
          }
          else
          {
            v122 = v108;
          }
        }
        else
        {
          v122 = v108;
        }
        do
        {
          v123 = v122[-1].i64[1];
          v122 = (int8x16_t *)((char *)v122 - 8);
          *--v117 = v123;
        }
        while (v122 != v110);
LABEL_145:
        v108 = (int8x16_t *)__p[0];
        __p[0] = v117;
        __p[1] = v119;
        v151 = v118;
        if (v108)
        {
LABEL_150:
          operator delete(v108);
          v108 = v119;
          __p[1] = v119;
          v105 += 8;
          if (v105 == v106)
          {
LABEL_162:
            v152[0] = __p[0];
            v152[1] = v108;
            v153 = v151;
            v131 = v148;
            if ((unint64_t)v148 >= v149)
              goto LABEL_165;
LABEL_126:
            *(_QWORD *)v131 = 0;
            *((_QWORD *)v131 + 1) = 0;
            *((_QWORD *)v131 + 2) = 0;
            *(_OWORD *)v131 = *(_OWORD *)v152;
            *((_QWORD *)v131 + 2) = v153;
            v148 = v131 + 24;
            goto LABEL_127;
          }
        }
        else
        {
          v108 = v119;
          __p[1] = v119;
          v105 += 8;
          if (v105 == v106)
            goto LABEL_162;
        }
      }
    }
LABEL_167:
    v133 = v147;
    v132 = v148;
    v134 = v149;
    v4 = v143;
    if (*(_BYTE *)(v143 + 448))
    {
      v135 = (void **)(v143 + 424);
      v136 = *(_QWORD *)(v143 + 424);
      v3 = v142;
      if (v136)
      {
        v137 = *(_QWORD *)(v143 + 432);
        v138 = *(void **)(v143 + 424);
        if (v137 != v136)
        {
          v139 = *(_QWORD *)(v143 + 432);
          do
          {
            v141 = *(void **)(v139 - 24);
            v139 -= 24;
            v140 = v141;
            if (v141)
            {
              *(_QWORD *)(v137 - 16) = v140;
              operator delete(v140);
            }
            v137 = v139;
          }
          while (v139 != v136);
          v138 = *v135;
        }
        *(_QWORD *)(v143 + 432) = v136;
        operator delete(v138);
        *v135 = 0;
        *(_QWORD *)(v143 + 432) = 0;
        *(_QWORD *)(v143 + 440) = 0;
      }
      *(_QWORD *)(v143 + 424) = v133;
      *(_QWORD *)(v143 + 432) = v132;
      *(_QWORD *)(v143 + 440) = v134;
    }
    else
    {
      *(_QWORD *)(v143 + 424) = v147;
      *(_QWORD *)(v143 + 432) = v132;
      *(_QWORD *)(v143 + 440) = v134;
      *(_BYTE *)(v143 + 448) = 1;
      v3 = v142;
    }
  }
  *(_WORD *)(v4 + 456) = *(_WORD *)(v3 + 464);
}

void sub_223ED5124(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223248D8C(v1);
  _Unwind_Resume(a1);
}

void sub_223ED5138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22317C838((void **)va);
  sub_223248D8C(a3);
  _Unwind_Resume(a1);
}

void sub_223ED5158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;
  uint64_t v23;

  if (v22)
  {
    operator delete(v22);
    sub_223248D8C(v23);
    _Unwind_Resume(a1);
  }
  sub_223248D8C(v23);
  _Unwind_Resume(a1);
}

void sub_223ED5278(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  uint64_t i;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t v18;
  unint64_t v19;
  int64x2_t *v20;
  int64x2_t *v21;
  uint64_t v22;
  int64x2_t *v23;
  unint64_t v24;
  int64x2_t *v25;
  int64x2_t v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  unint64_t v49;
  int64x2_t *v50;
  int64x2_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  __int8 *v57;
  int64x2_t *v58;
  uint64_t v59;
  double v60;
  char v61;
  double v62;
  char v63;
  char v64;
  unint64_t v65;
  char *v66;
  _BYTE *v67;
  int64x2_t *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  __int16 v77;
  char v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  int64x2_t *v83;
  int64x2_t *v84;
  void *__p[2];
  char *v86;
  int64x2_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  _DWORD v90[624];
  uint64_t v91;
  uint64_t (**v92)();
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  _QWORD v95[3];

  v3 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1)
  {
    if (a1 >= 0x5555555555555556)
      sub_22316E078();
    v4 = 3 * a1;
    v5 = (char *)operator new(3 * a1);
    *v3 = v5;
    v3[1] = v5;
    v3[2] = &v5[v4];
  }
  v6 = 5489;
  v90[0] = 5489;
  for (i = 1; i != 624; ++i)
  {
    v6 = i + 1812433253 * (v6 ^ (v6 >> 30));
    v90[i] = v6;
  }
  v91 = 0;
  v8 = (std::__shared_weak_count *)operator new(0x28uLL);
  v9 = v8;
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A710;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A760;
  LODWORD(v8[1].__shared_owners_) = 5489;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v92 = &off_24EC7A6B0;
  v93 = v8 + 1;
  v94 = v8;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  v15 = pow((double)a1, 0.333333333);
  v16 = vcvtpd_u64_f64(v15);
  if (v16 <= 2)
    v17 = 2;
  else
    v17 = v16;
  *(double *)v18.i64 = pow((double)v17, 3.0);
  v19 = (unint64_t)*(double *)v18.i64;
  if ((unint64_t)*(double *)v18.i64 < a1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 214, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v82 = v3;
  if (!v19)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_30;
  }
  if (v19 >> 61)
    sub_22367C394();
  v20 = (int64x2_t *)operator new(8 * v19);
  v87 = v20;
  v89 = &v20->i64[v19];
  bzero(v20, 8 * v19);
  v21 = (int64x2_t *)v89;
  v88 = v89;
  if (8 * v19 - 8 < 0x18)
  {
    v22 = 0;
    v23 = v20;
    do
    {
LABEL_29:
      v23->i64[0] = v22;
      v23 = (int64x2_t *)((char *)v23 + 8);
      ++v22;
    }
    while (v23 != v21);
    goto LABEL_30;
  }
  v24 = ((8 * v19 - 8) >> 3) + 1;
  v22 = v24 & 0x3FFFFFFFFFFFFFFCLL;
  v23 = (int64x2_t *)((char *)v20 + 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL));
  v18 = (int64x2_t)xmmword_2245F5410;
  v25 = v20 + 1;
  v26 = vdupq_n_s64(2uLL);
  v27 = vdupq_n_s64(4uLL);
  v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v25[-1] = v18;
    *v25 = vaddq_s64(v18, v26);
    v18 = vaddq_s64(v18, v27);
    v25 += 2;
    v28 -= 4;
  }
  while (v28);
  if (v24 != v22)
    goto LABEL_29;
LABEL_30:
  if ((char *)v21 - (char *)v20 >= 9)
  {
    v18.i64[0] = 0;
    *(_OWORD *)__p = xmmword_22466ED00;
    if (&v21[-1].u64[1] > (unint64_t *)v20)
    {
      v29 = ((unint64_t)((char *)v21 - (char *)v20) >> 3) - 1;
      v30 = (uint64_t *)v20;
      do
      {
        v95[0] = 0;
        v95[1] = v29;
        v31 = sub_223CD081C((uint64_t)__p, (uint64_t)v90, v95);
        if (v31)
        {
          v32 = *v30;
          *v30 = v30[v31];
          v30[v31] = v32;
        }
        ++v30;
        --v29;
      }
      while (v30 < &v21[-1].i64[1]);
    }
  }
  if ((int64x2_t *)((char *)v20 + 8 * a1) != v21)
  {
    v88 = &v20->i64[a1];
    v21 = (int64x2_t *)v88;
  }
  if (v20 != v21)
  {
    v33 = ceil(v15);
    v83 = v21;
    while (1)
    {
      v84 = v20;
      __p[0] = 0;
      v34 = v20->i64[0];
      __p[1] = 0;
      v86 = 0;
      if (!v34)
      {
        v59 = 0;
        v58 = v83;
LABEL_82:
        LOBYTE(v95[0]) = 0;
        sub_2232E92B0((unint64_t *)__p, 3 - v59, (const char *)v95);
        v57 = (__int8 *)__p[0];
        goto LABEL_83;
      }
      v35 = 0;
      v36 = 0;
      v37 = 0;
      do
      {
        while (1)
        {
          v39 = v34 % v17;
          if (v37 >= v36)
            break;
          *v37++ = v39;
          __p[1] = v37;
          v38 = v34 >= v17;
          v34 /= v17;
          if (!v38)
            goto LABEL_79;
        }
        v40 = v37 - v35;
        v41 = v37 - v35 + 1;
        if (v41 < 0)
          sub_22316E078();
        if (2 * (v36 - v35) > (unint64_t)v41)
          v41 = 2 * (v36 - v35);
        if ((unint64_t)(v36 - v35) >= 0x3FFFFFFFFFFFFFFFLL)
          v42 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)operator new(v42);
          v44 = &v43[v40];
          v43[v40] = v39;
          v45 = &v43[v40 + 1];
          if (v37 == v35)
            goto LABEL_61;
        }
        else
        {
          v43 = 0;
          v44 = (char *)(v37 - v35);
          *(_BYTE *)v40 = v39;
          v45 = (char *)(v40 + 1);
          if (v37 == v35)
          {
LABEL_61:
            v36 = &v43[v42];
            __p[0] = v44;
            v86 = v36;
            if (!v35)
              goto LABEL_63;
LABEL_62:
            operator delete(v35);
            goto LABEL_63;
          }
        }
        if (v40 < 8 || v43 > &v43[v37 - v35 - 1] || v35 > v37 - 1 || (unint64_t)(v35 - v43) < 0x20)
        {
          v46 = v37;
          goto LABEL_56;
        }
        if (v40 >= 0x20)
        {
          v49 = v40 & 0xFFFFFFFFFFFFFFE0;
          v50 = (int64x2_t *)&v43[v40 - 16];
          v51 = (int64x2_t *)(v37 - 16);
          v52 = v40 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v18 = *v51;
            v50[-1] = v51[-1];
            *v50 = v18;
            v50 -= 2;
            v51 -= 2;
            v52 -= 32;
          }
          while (v52);
          if (v40 == v49)
            goto LABEL_58;
          if ((v40 & 0x18) == 0)
          {
            v44 -= v49;
            v46 = &v37[-v49];
LABEL_56:
            v47 = v44 - 1;
            do
            {
              v48 = *--v46;
              *v47-- = v48;
            }
            while (v46 != v35);
            goto LABEL_58;
          }
        }
        else
        {
          v49 = 0;
        }
        v46 = &v37[-(v40 & 0xFFFFFFFFFFFFFFF8)];
        v44 -= v40 & 0xFFFFFFFFFFFFFFF8;
        v53 = (uint64_t *)&v43[&v37[-v49] - v35 - 8];
        v54 = (uint64_t *)&v37[-v49 - 8];
        v55 = v49 - (v40 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v56 = *v54--;
          v18.i64[0] = v56;
          *v53-- = v56;
          v55 += 8;
        }
        while (v55);
        if (v40 != (v40 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_56;
LABEL_58:
        v44 = v43;
        v36 = &v43[v42];
        __p[0] = v43;
        v86 = v36;
        if (v35)
          goto LABEL_62;
LABEL_63:
        v35 = v44;
        v37 = v45;
        __p[1] = v45;
        v38 = v34 >= v17;
        v34 /= v17;
      }
      while (v38);
LABEL_79:
      v57 = (__int8 *)__p[0];
      v3 = v82;
      v58 = v83;
      v59 = v37 - (char *)__p[0];
      if ((unint64_t)(v37 - (char *)__p[0]) <= 2)
        goto LABEL_82;
LABEL_83:
      v18.i8[0] = *v57;
      v60 = (double)v18.u64[0] / v33 * 255.0;
      v61 = llround(v60);
      LOBYTE(v60) = v57[1];
      v62 = (double)*(unint64_t *)&v60 / v33 * 255.0;
      v63 = llround(v62);
      LOBYTE(v62) = v57[2];
      *(double *)v18.i64 = (double)*(unint64_t *)&v62 / v33 * 255.0;
      v64 = llround(*(double *)v18.i64);
      v66 = (char *)v3[1];
      v65 = v3[2];
      if ((unint64_t)v66 < v65)
      {
        *v66 = v61;
        v66[1] = v63;
        v67 = v66 + 3;
        v66[2] = v64;
        v68 = v84;
        goto LABEL_100;
      }
      v69 = (char *)*v3;
      v70 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)&v66[-*v3];
      v71 = v70 + 1;
      if (v70 + 1 >= 0x5555555555555556)
        sub_22316E078();
      v72 = 0xAAAAAAAAAAAAAAABLL * (v65 - (_QWORD)v69);
      if (2 * v72 > v71)
        v71 = 2 * v72;
      if (v72 >= 0x2AAAAAAAAAAAAAAALL)
        v73 = 0x5555555555555555;
      else
        v73 = v71;
      if (v73)
      {
        if (v73 >= 0x5555555555555556)
          sub_223174E94();
        v74 = (char *)operator new(3 * v73);
      }
      else
      {
        v74 = 0;
      }
      v75 = &v74[3 * v70];
      *v75 = v61;
      v75[1] = v63;
      v75[2] = v64;
      v76 = v75;
      if (v66 == v69)
      {
        v68 = v84;
        v67 = v75 + 3;
        *v3 = v75;
        v3[1] = v75 + 3;
        v3[2] = &v74[3 * v73];
        if (v66)
          goto LABEL_99;
      }
      else
      {
        v68 = v84;
        do
        {
          v77 = *(_WORD *)(v66 - 3);
          v66 -= 3;
          v78 = v66[2];
          *(_WORD *)(v76 - 3) = v77;
          v76 -= 3;
          v76[2] = v78;
        }
        while (v66 != v69);
        v66 = (char *)*v3;
        v67 = v75 + 3;
        *v3 = v76;
        v3[1] = v75 + 3;
        v3[2] = &v74[3 * v73];
        if (v66)
LABEL_99:
          operator delete(v66);
      }
LABEL_100:
      v3[1] = v67;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v20 = (int64x2_t *)&v68->u64[1];
      if (v20 == v58)
      {
        v20 = v87;
        break;
      }
    }
  }
  if (v20)
  {
    v88 = (uint64_t *)v20;
    operator delete(v20);
  }
  v79 = v94;
  if (v94)
  {
    v80 = (unint64_t *)&v94->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_223ED5A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  sub_2245658A0(a9);
  v20 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v18 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_223ED5AC0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CDFD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDFD8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.surfacedetection");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CDFD0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CDFD8);
  }
  *a1 = qword_2540CDFD0;
}

void sub_223ED5B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDFD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDFD8);
  _Unwind_Resume(a1);
}

uint64_t sub_223ED5BB4(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_DWORD **)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(_DWORD **)(a1 + 8);
      v4 = *(_DWORD **)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((_BYTE *)v3 - 8))
          {
            v5 = *(v3 - 4);
            if ((_DWORD)v5 != -1)
              ((void (*)(char *, _DWORD *))off_24EC63F88[v5])(&v7, v3 - 12);
            *(v3 - 4) = -1;
          }
          *((_QWORD *)v3 - 102) = &off_24EC6A160;
          sub_223FF896C((uint64_t)(v3 - 200));
          v3 -= 204;
        }
        while (v3 != v2);
        v4 = *(_DWORD **)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_223ED5C84(std::string *__s, uint64_t a2, uint64_t a3)
{
  size_t size;
  std::string *v7;
  _BYTE *v8;
  BOOL v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  const char *v14;
  size_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  size_t v21;
  const char *v22;
  uint64_t v23;
  unsigned __int8 v24;
  const char *v25;
  size_t v26;
  std::string::size_type *p_size;
  uint64_t v28;
  uint64_t v29;
  void *p_p;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  size_t v34;
  void *v35;
  _QWORD *v36;
  size_t v37;
  size_t v38;
  _BYTE *v39;
  void *v40;
  int v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  std::string::size_type *v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  size_t v56;
  void *v57;
  _QWORD *v58;
  size_t v59;
  size_t v60;
  _BYTE *v61;
  int v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::string::size_type v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  std::string::size_type v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  const char *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::string *v124;
  std::string *v125;
  int v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  std::string::size_type v131;
  uint64_t v132;
  std::__fs::filesystem::path::__string_view v133;
  int v134;
  std::string::size_type v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  unint64_t *v144;
  unint64_t v145;
  _BOOL4 v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::string::size_type v153;
  std::string::size_type v154;
  void *v155;
  uint64_t v156;
  unint64_t *v158;
  unint64_t v159;
  std::string::size_type v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  std::string::size_type v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  const char *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  int v190;
  char *v191;
  uint64_t v192;
  std::string *v193;
  __int128 v194;
  BOOL v195;
  std::string *v196;
  unsigned __int16 v197;
  void **v198;
  size_t v199;
  void *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  std::__shared_weak_count *v205;
  std::string::size_type v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  int v211;
  unint64_t v212;
  unint64_t v213;
  void **v214;
  std::string *v215;
  uint64_t v216;
  size_t v217;
  const char *v218;
  unsigned __int8 v219;
  const char *v220;
  size_t v221;
  _BYTE *v222;
  const char *v223;
  unint64_t v224;
  void **v225;
  std::string *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE *v230;
  uint64_t v231;
  uint64_t v232;
  NSObject *v233;
  size_t v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  size_t v237;
  size_t v238;
  _BYTE *v239;
  void *v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  size_t v244;
  size_t v245;
  std::exception_vtbl *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  char *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  void **v292;
  int v293;
  const char *v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  int v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  unint64_t v307;
  unint64_t v308;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  size_t v314;
  const char *v315;
  unsigned __int8 v316;
  unsigned __int8 v317;
  const char *v318;
  size_t v319;
  std::string::size_type *v320;
  uint64_t v321;
  uint64_t v322;
  void *v323;
  NSObject *v324;
  uint64_t v325;
  uint64_t v326;
  size_t v327;
  void *v328;
  _QWORD *v329;
  size_t v330;
  size_t v331;
  _BYTE *v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char v337;
  _QWORD *v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  void *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::string::size_type v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  std::string::size_type v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  const char *v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  uint64_t *v383;
  const char *v384;
  size_t v385;
  uint64_t v386;
  int v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  size_t v392;
  const char *v393;
  unsigned __int8 v394;
  const char *v395;
  size_t v396;
  std::string::size_type *v397;
  unint64_t v398;
  const char *v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  NSObject *v408;
  size_t v409;
  std::__shared_weak_count_vtbl *v410;
  std::__shared_weak_count *v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  unint64_t v415;
  std::string::size_type v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  std::string::size_type v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  uint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  void *v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  void *v448;
  _QWORD *exception;
  _QWORD *v450;
  uint64_t v451;
  const char *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int __src;
  const char *__srca;
  _QWORD *__srcb;
  _QWORD *__srcc;
  char *__sa;
  char *__sb;
  int __sc;
  char *__sd;
  void *v464[2];
  int64_t v465;
  void *v466[2];
  uint64_t v467;
  void *v468;
  std::string *v469;
  std::string v470;
  std::string v471;
  __int128 v472;
  int v473;
  const char *v474;
  uint64_t v475;
  std::__shared_weak_count *v476;
  uint64_t v477;
  _QWORD v478[3];
  uint64_t v479;
  std::string::size_type v480;
  unsigned __int16 v481;
  _BYTE __dst[24];
  __int128 v483;
  char *v484;
  std::exception v485;
  __int128 v486;
  std::string object;
  __int128 v488;
  void *__p;
  void *v490;
  unint64_t v491;
  char v492;
  char v493;
  void *v494;
  char v495;
  char v496;
  char v497;
  char v498;
  __int128 v499;
  std::__shared_weak_count *v500;
  char *v501;
  std::__shared_weak_count *v502;
  _BYTE v503[24];
  _BYTE v504[56];
  unint64_t v505;
  std::__shared_weak_count *v506;
  uint64_t v507;

  v507 = *MEMORY[0x24BDAC8D0];
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s->__r_.__value_.__l.__size_;
    if (!size)
      return 0;
    v7 = (std::string *)__s->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&__s->__r_.__value_.__s + 23))
      return 0;
    v7 = __s;
  }
  v8 = memchr(v7, 58, size);
  if (v8)
    v9 = v8 - (_BYTE *)v7 == -1;
  else
    v9 = 1;
  if (v9)
  {
    sub_223ED5AC0(v503);
    if (**(int **)(*(_QWORD *)v503 + 56) > 3)
      goto LABEL_197;
    v10 = *(unsigned __int8 *)(*(_QWORD *)v503 + 72);
    v11 = sub_22322F254(*(uint64_t *)v503, "OSLogSurrogateAppender", 1, 0);
    v12 = v11;
    if (!v10 && !v11)
      goto LABEL_197;
    __src = v10;
    *(_QWORD *)v504 = v503;
    *(std::chrono::steady_clock::time_point *)&v504[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v504[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v504[24] = 3;
    *(_QWORD *)&v504[32] = "unknown file";
    *(_DWORD *)&v504[40] = 99;
    v505 = 0;
    v506 = 0;
    *(_QWORD *)&v504[48] = "unknown function";
    if ((__s->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = (char *)__s;
    else
      v13 = (char *)__s->__r_.__value_.__r.__words[0];
    v14 = (const char *)(**(_QWORD **)v504 + 16);
    v453 = **(_QWORD **)v504;
    v452 = v14;
    __sa = v13;
    if (*(char *)(**(_QWORD **)v504 + 39) < 0)
    {
      v14 = *(const char **)(v453 + 16);
      v15 = *(_QWORD *)(v453 + 24);
    }
    else
    {
      v15 = *(unsigned __int8 *)(**(_QWORD **)v504 + 39);
    }
    v23 = a2;
    v24 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v488 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v25 = (const char *)&xmmword_255788F40;
    else
      v25 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v26 = byte_255788F57;
    else
      v26 = *((_QWORD *)&xmmword_255788F40 + 1);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v25, v14);
    p_size = &object.__r_.__value_.__l.__size_;
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v26 >= 0x17)
    {
      v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v28 = v26 | 7;
      v29 = v28 + 1;
      p_size = (std::string::size_type *)operator new(v28 + 1);
      object.__r_.__value_.__r.__words[2] = v26;
      *(_QWORD *)&v488 = v29 | 0x8000000000000000;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    }
    else
    {
      BYTE7(v488) = v26;
      if (!v26)
      {
LABEL_43:
        *((_BYTE *)p_size + v26) = 0;
        BYTE8(v488) = 1;
        p_p = &__p;
        if (v15 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        a2 = v23;
        if (v15 >= 0x17)
        {
          v31 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v31 = v15 | 7;
          v32 = v31 + 1;
          p_p = operator new(v31 + 1);
          v490 = (void *)v15;
          v491 = v32 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v491) = v15;
          if (!v15)
          {
LABEL_51:
            *((_BYTE *)p_p + v15) = 0;
            v492 = 1;
            v33 = object.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v491) < 0)
              operator delete(__p);
            if (BYTE8(v488) && SBYTE7(v488) < 0)
              operator delete((void *)object.__r_.__value_.__l.__size_);
            if (object.__r_.__value_.__r.__words[0])
              os_release(object.__r_.__value_.__l.__data_);
            if (!v12 || !*(_QWORD *)(v12 + 24))
            {
              os_log_type_enabled(v33, OS_LOG_TYPE_INFO);
              LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)__sa;
              v40 = (void *)_os_log_send_and_compose_impl();
              v41 = __src;
              if (v40)
                free(v40);
              goto LABEL_187;
            }
            v34 = _os_log_pack_size();
            v35 = operator new(v34, (std::align_val_t)8uLL);
            v36 = (_QWORD *)operator new();
            *v36 = &off_24EC1F7F0;
            v36[1] = 0;
            v36[2] = 0;
            v36[3] = v35;
            v471.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
            v471.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
            v472 = 0uLL;
            v471.__r_.__value_.__r.__words[2] = (std::string::size_type)v36;
            v37 = strlen(__sa);
            if (v37 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v38 = v37;
            if (v37 >= 0x17)
            {
              v64 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v64 = v37 | 7;
              v65 = v64 + 1;
              v39 = operator new(v64 + 1);
              *(_QWORD *)&__dst[8] = v38;
              *(_QWORD *)&__dst[16] = v65 | 0x8000000000000000;
              *(_QWORD *)__dst = v39;
            }
            else
            {
              __dst[23] = v37;
              v39 = __dst;
              if (!v37)
              {
LABEL_109:
                v39[v38] = 0;
                v66 = *(_QWORD *)__dst;
                *(_QWORD *)&v499 = *(_QWORD *)&__dst[8];
                *(_QWORD *)((char *)&v499 + 7) = *(_QWORD *)&__dst[15];
                v67 = __dst[23];
                v68 = operator new(0x38uLL);
                v68[1] = 0;
                v68[2] = 0;
                v68[3] = off_24EC1FA48;
                *v68 = &off_24EC1F9F8;
                v69 = v499;
                v68[4] = v66;
                v68[5] = v69;
                *(_QWORD *)((char *)v68 + 47) = *(_QWORD *)((char *)&v499 + 7);
                *((_BYTE *)v68 + 55) = v67;
                *(_QWORD *)&v499 = 0;
                *(_QWORD *)((char *)&v499 + 7) = 0;
                v70 = (std::__shared_weak_count *)*((_QWORD *)&v472 + 1);
                *(_QWORD *)&v472 = v68 + 3;
                *((_QWORD *)&v472 + 1) = v68;
                if (v70)
                {
                  p_shared_owners = (unint64_t *)&v70->__shared_owners_;
                  do
                    v72 = __ldaxr(p_shared_owners);
                  while (__stlxr(v72 - 1, p_shared_owners));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                object = v471;
                if (v471.__r_.__value_.__r.__words[2])
                {
                  v73 = (unint64_t *)(v471.__r_.__value_.__r.__words[2] + 8);
                  do
                    v74 = __ldxr(v73);
                  while (__stxr(v74 + 1, v73));
                }
                v488 = v472;
                if (*((_QWORD *)&v472 + 1))
                {
                  v75 = (unint64_t *)(*((_QWORD *)&v472 + 1) + 8);
                  do
                    v76 = __ldxr(v75);
                  while (__stxr(v76 + 1, v75));
                  __p = (void *)v472;
                  do
                    v77 = __ldaxr(v75);
                  while (__stlxr(v77 - 1, v75));
                  if (!v77)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v472 + 1) + 16))(*((_QWORD *)&v472 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v472 + 1));
                  }
                }
                else
                {
                  __p = (void *)v472;
                }
                if (v471.__r_.__value_.__r.__words[2])
                {
                  v92 = (unint64_t *)(v471.__r_.__value_.__r.__words[2] + 8);
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    (*(void (**)(std::string::size_type))(*(_QWORD *)v471.__r_.__value_.__r.__words[2] + 16))(v471.__r_.__value_.__r.__words[2]);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v471.__r_.__value_.__r.__words[2]);
                  }
                }
                v94 = object.__r_.__value_.__r.__words[0];
                if (*((char *)__p + 31) >= 0)
                  v95 = (char *)__p + 8;
                else
                  v95 = (char *)*((_QWORD *)__p + 1);
                v96 = _os_log_pack_fill();
                *(_DWORD *)v96 = 136315138;
                *(_QWORD *)(v96 + 4) = v95;
                v97 = operator new();
                v98 = *(unsigned __int8 *)(v453 + 39);
                v99 = v452;
                if ((v98 & 0x80u) != 0)
                {
                  v99 = *(const char **)(v453 + 16);
                  v98 = *(_QWORD *)(v453 + 24);
                }
                *(_QWORD *)v97 = v94;
                *(_OWORD *)(v97 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v97 + 24) = v488;
                v488 = 0uLL;
                *(_QWORD *)(v97 + 40) = v99;
                *(_QWORD *)(v97 + 48) = v98;
                *(_BYTE *)(v97 + 56) = 1;
                *(_QWORD *)__dst = 0;
                v471.__r_.__value_.__r.__words[0] = v97;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v471);
                v41 = __src;
                v100 = v471.__r_.__value_.__r.__words[0];
                v471.__r_.__value_.__r.__words[0] = 0;
                if (v100)
                {
                  v101 = *(std::__shared_weak_count **)(v100 + 32);
                  if (v101)
                  {
                    v102 = (unint64_t *)&v101->__shared_owners_;
                    do
                      v103 = __ldaxr(v102);
                    while (__stlxr(v103 - 1, v102));
                    if (!v103)
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                  }
                  v104 = *(std::__shared_weak_count **)(v100 + 16);
                  if (v104)
                  {
                    v105 = (unint64_t *)&v104->__shared_owners_;
                    do
                      v106 = __ldaxr(v105);
                    while (__stlxr(v106 - 1, v105));
                    if (!v106)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                  MEMORY[0x227684CE8](v100, 0x10F0C40B62ED6C6);
                  v107 = *(_QWORD *)__dst;
                  *(_QWORD *)__dst = 0;
                  if (v107)
                  {
                    v108 = *(std::__shared_weak_count **)(v107 + 32);
                    if (v108)
                    {
                      v109 = (unint64_t *)&v108->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    v111 = *(std::__shared_weak_count **)(v107 + 16);
                    if (v111)
                    {
                      v112 = (unint64_t *)&v111->__shared_owners_;
                      do
                        v113 = __ldaxr(v112);
                      while (__stlxr(v113 - 1, v112));
                      if (!v113)
                      {
                        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                        std::__shared_weak_count::__release_weak(v111);
                      }
                    }
                    MEMORY[0x227684CE8](v107, 0x10F0C40B62ED6C6);
                  }
                }
                v114 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
                if (*((_QWORD *)&v488 + 1))
                {
                  v115 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
                  do
                    v116 = __ldaxr(v115);
                  while (__stlxr(v116 - 1, v115));
                  if (!v116)
                  {
                    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                    std::__shared_weak_count::__release_weak(v114);
                  }
                }
                v117 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                if (object.__r_.__value_.__r.__words[2])
                {
                  v118 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                  do
                    v119 = __ldaxr(v118);
                  while (__stlxr(v119 - 1, v118));
                  if (!v119)
                  {
                    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                    std::__shared_weak_count::__release_weak(v117);
                  }
                }
LABEL_187:
                if (v41)
                {
                  if ((__s->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v120 = (const char *)__s;
                  else
                    v120 = (const char *)__s->__r_.__value_.__r.__words[0];
                  sub_22322C138((uint64_t)v504, "Initializing FileLogger %s", v120);
                  sub_223182C08((uint64_t)v504);
                }
                sub_223182C08((uint64_t)v504);
                v121 = v506;
                if (v506)
                {
                  v122 = (unint64_t *)&v506->__shared_owners_;
                  do
                    v123 = __ldaxr(v122);
                  while (__stlxr(v123 - 1, v122));
                  if (!v123)
                  {
                    ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                    std::__shared_weak_count::__release_weak(v121);
                  }
                }
LABEL_197:
                if ((__s->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v124 = __s;
                else
                  v124 = (std::string *)__s->__r_.__value_.__r.__words[0];
                memset(&v471, 0, sizeof(v471));
                v125 = (std::string *)((char *)v124 - 1);
                do
                {
                  v126 = v125->__r_.__value_.__s.__data_[1];
                  v125 = (std::string *)((char *)v125 + 1);
                }
                while (v126);
                sub_2231816F0(&v471, v124, v125);
                v127 = sub_2241471F8();
                v128 = v127[2];
                if (!v128)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v128 = v127[2];
                }
                v129 = *(_QWORD *)(v128 + 64);
                std::mutex::lock((std::mutex *)(v129 + 32));
                sub_2241054D4(&object, v129 + 96);
                std::mutex::unlock((std::mutex *)(v129 + 32));
                v131 = object.__r_.__value_.__l.__size_;
                v130 = (uint64_t *)object.__r_.__value_.__r.__words[0];
                if (object.__r_.__value_.__r.__words[0] == object.__r_.__value_.__l.__size_)
                {
                  v134 = 1;
                  if (object.__r_.__value_.__r.__words[0])
                  {
LABEL_220:
                    v135 = object.__r_.__value_.__l.__size_;
                    if ((uint64_t *)object.__r_.__value_.__l.__size_ == v130)
                    {
                      object.__r_.__value_.__l.__size_ = (std::string::size_type)v130;
                      operator delete(v130);
                      if (v134)
                        goto LABEL_233;
                    }
                    else
                    {
                      do
                      {
                        v136 = *(std::__shared_weak_count **)(v135 - 8);
                        if (v136)
                        {
                          v137 = (unint64_t *)&v136->__shared_owners_;
                          do
                            v138 = __ldaxr(v137);
                          while (__stlxr(v138 - 1, v137));
                          if (!v138)
                          {
                            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                            std::__shared_weak_count::__release_weak(v136);
                          }
                        }
                        v135 -= 16;
                      }
                      while ((uint64_t *)v135 != v130);
                      object.__r_.__value_.__l.__size_ = (std::string::size_type)v130;
                      operator delete(object.__r_.__value_.__l.__data_);
                      if (v134)
                      {
LABEL_233:
                        object.__r_.__value_.__s.__data_[0] = 0;
                        LOBYTE(v488) = 0;
                        BYTE8(v488) = 0;
                        LOBYTE(v490) = 0;
                        v491 = 0;
                        *(_QWORD *)&v504[24] = v504;
                        *(_QWORD *)v504 = &off_24EC69B68;
                        *(_DWORD *)&v504[8] = 2;
                        v504[32] = 1;
                        v139 = operator new(0x30uLL);
                        v139[1] = 0;
                        v139[2] = 0;
                        *v139 = &off_24EC63FA8;
                        sub_223EDA1C0(v139 + 3, (uint64_t)&v471, (uint64_t)&object, (uint64_t)v504, a3);
                        *(_QWORD *)__dst = v139 + 3;
                        *(_QWORD *)&__dst[8] = v139;
                        if (!v504[32])
                          goto LABEL_239;
                        v141 = *(_QWORD **)&v504[24];
                        if (*(_BYTE **)&v504[24] == v504)
                        {
                          v142 = 4;
                          v141 = v504;
                        }
                        else
                        {
                          if (!*(_QWORD *)&v504[24])
                            goto LABEL_239;
                          v142 = 5;
                        }
                        (*(void (**)(_QWORD *, uint64_t))(*v141 + 8 * v142))(v141, v140);
LABEL_239:
                        v143 = sub_2241471F8();
                        *(_QWORD *)v503 = *(_QWORD *)__dst;
                        *(_QWORD *)&v503[8] = *(_QWORD *)&__dst[8];
                        if (*(_QWORD *)&__dst[8])
                        {
                          v144 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
                          do
                            v145 = __ldxr(v144);
                          while (__stxr(v145 + 1, v144));
                        }
                        v146 = sub_224148408((uint64_t)v143, (uint64_t *)v503);
                        v147 = *(std::__shared_weak_count **)&v503[8];
                        if (*(_QWORD *)&v503[8])
                        {
                          v148 = (unint64_t *)(*(_QWORD *)&v503[8] + 8);
                          do
                            v149 = __ldaxr(v148);
                          while (__stlxr(v149 - 1, v148));
                          if (!v149)
                          {
                            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                            std::__shared_weak_count::__release_weak(v147);
                          }
                        }
                        v150 = *(std::__shared_weak_count **)&__dst[8];
                        if (*(_QWORD *)&__dst[8])
                        {
                          v151 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
                          do
                            v152 = __ldaxr(v151);
                          while (__stlxr(v152 - 1, v151));
                          if (!v152)
                          {
                            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                            std::__shared_weak_count::__release_weak(v150);
                          }
                        }
                        if ((_BYTE)v488)
                        {
                          v153 = object.__r_.__value_.__r.__words[0];
                          if (object.__r_.__value_.__r.__words[0])
                          {
                            v154 = object.__r_.__value_.__l.__size_;
                            v155 = (void *)object.__r_.__value_.__r.__words[0];
                            if (object.__r_.__value_.__l.__size_ != object.__r_.__value_.__r.__words[0])
                            {
                              do
                              {
                                if (*(_BYTE *)(v154 - 8))
                                {
                                  v156 = *(unsigned int *)(v154 - 16);
                                  if ((_DWORD)v156 != -1)
                                    ((void (*)(_BYTE *, std::string::size_type))off_24EC63F88[v156])(v504, v154 - 48);
                                  *(_DWORD *)(v154 - 16) = -1;
                                }
                                *(_QWORD *)(v154 - 816) = &off_24EC6A160;
                                sub_223FF896C(v154 - 800);
                                v154 -= 816;
                              }
                              while (v154 != v153);
                              v155 = (void *)object.__r_.__value_.__r.__words[0];
                            }
                            object.__r_.__value_.__l.__size_ = v153;
                            operator delete(v155);
                          }
                        }
                        if ((SHIBYTE(v471.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_264:
                          if (v146)
                            goto LABEL_522;
                          return 0;
                        }
LABEL_812:
                        operator delete(v471.__r_.__value_.__l.__data_);
                        if (!v146)
                          return 0;
                        goto LABEL_522;
                      }
                    }
LABEL_811:
                    v146 = 0;
                    if ((SHIBYTE(v471.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_264;
                    goto LABEL_812;
                  }
                }
                else
                {
                  do
                  {
                    v132 = *v130;
                    if (*v130 && *(uint64_t (***)())v132 == &off_24EC698B0)
                    {
                      v133.__data_ = (v471.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                   ? (const std::string_view::value_type *)&v471
                                   : (const std::string_view::value_type *)v471.__r_.__value_.__r.__words[0];
                      v133.__size_ = (v471.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                   ? HIBYTE(v471.__r_.__value_.__r.__words[2])
                                   : v471.__r_.__value_.__l.__size_;
                      if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(*(_QWORD *)(v132 + 8) + 32), v133))
                      {
                        v134 = 0;
                        v130 = (uint64_t *)object.__r_.__value_.__r.__words[0];
                        if (object.__r_.__value_.__r.__words[0])
                          goto LABEL_220;
                        goto LABEL_232;
                      }
                    }
                    v130 += 2;
                  }
                  while (v130 != (uint64_t *)v131);
                  v134 = 1;
                  v130 = (uint64_t *)object.__r_.__value_.__r.__words[0];
                  if (object.__r_.__value_.__r.__words[0])
                    goto LABEL_220;
                }
LABEL_232:
                if (v134)
                  goto LABEL_233;
                goto LABEL_811;
              }
            }
            memcpy(v39, __sa, v38);
            goto LABEL_109;
          }
        }
        memmove(p_p, v14, v15);
        goto LABEL_51;
      }
    }
    memmove(p_size, v25, v26);
    goto LABEL_43;
  }
  sub_223ED5AC0(v503);
  if (**(int **)(*(_QWORD *)v503 + 56) > 3)
    goto LABEL_320;
  v16 = *(unsigned __int8 *)(*(_QWORD *)v503 + 72);
  v17 = sub_22322F254(*(uint64_t *)v503, "OSLogSurrogateAppender", 1, 0);
  v18 = v17;
  if (!v16 && !v17)
    goto LABEL_320;
  *(_QWORD *)v504 = v503;
  *(std::chrono::steady_clock::time_point *)&v504[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v504[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v504[24] = 3;
  *(_QWORD *)&v504[32] = "unknown file";
  *(_DWORD *)&v504[40] = 90;
  v505 = 0;
  v506 = 0;
  *(_QWORD *)&v504[48] = "unknown function";
  if ((__s->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = (char *)__s;
  else
    v19 = (char *)__s->__r_.__value_.__r.__words[0];
  __sb = v19;
  v20 = **(_QWORD **)v504;
  if (*(char *)(**(_QWORD **)v504 + 39) < 0)
  {
    v22 = *(const char **)(v20 + 16);
    v21 = *(_QWORD *)(v20 + 24);
  }
  else
  {
    v21 = *(unsigned __int8 *)(**(_QWORD **)v504 + 39);
    v22 = (const char *)(v20 + 16);
  }
  v454 = v20 + 16;
  v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v488 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v43 = (const char *)&xmmword_255788F40;
  else
    v43 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v44 = byte_255788F57;
  else
    v44 = *((_QWORD *)&xmmword_255788F40 + 1);
  __srca = v22;
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v43, v22);
  v45 = &object.__r_.__value_.__l.__size_;
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v44 >= 0x17)
  {
    v46 = v18;
    v47 = v20;
    v48 = v16;
    v49 = a2;
    v50 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v50 = v44 | 7;
    v51 = v50 + 1;
    v45 = (std::string::size_type *)operator new(v50 + 1);
    object.__r_.__value_.__r.__words[2] = v44;
    *(_QWORD *)&v488 = v51 | 0x8000000000000000;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
    a2 = v49;
    v16 = v48;
    v20 = v47;
    v18 = v46;
    goto LABEL_81;
  }
  BYTE7(v488) = v44;
  if (v44)
LABEL_81:
    memmove(v45, v43, v44);
  *((_BYTE *)v45 + v44) = 0;
  BYTE8(v488) = 1;
  v52 = &__p;
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v21 >= 0x17)
  {
    v53 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v53 = v21 | 7;
    v54 = v53 + 1;
    v52 = operator new(v53 + 1);
    v490 = (void *)v21;
    v491 = v54 | 0x8000000000000000;
    __p = v52;
    goto LABEL_89;
  }
  HIBYTE(v491) = v21;
  if (v21)
LABEL_89:
    memmove(v52, __srca, v21);
  *((_BYTE *)v52 + v21) = 0;
  v492 = 1;
  v55 = object.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v491) < 0)
    operator delete(__p);
  if (BYTE8(v488) && SBYTE7(v488) < 0)
    operator delete((void *)object.__r_.__value_.__l.__size_);
  if (object.__r_.__value_.__r.__words[0])
    os_release(object.__r_.__value_.__l.__data_);
  if (!v18 || !*(_QWORD *)(v18 + 24))
  {
    os_log_type_enabled(v55, OS_LOG_TYPE_INFO);
    LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)__sb;
    v63 = (void *)_os_log_send_and_compose_impl();
    if (v63)
      free(v63);
    goto LABEL_310;
  }
  v56 = _os_log_pack_size();
  v57 = operator new(v56, (std::align_val_t)8uLL);
  v58 = (_QWORD *)operator new();
  *v58 = &off_24EC1F7F0;
  v58[1] = 0;
  v58[2] = 0;
  v58[3] = v57;
  v471.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  v471.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
  v472 = 0uLL;
  v471.__r_.__value_.__r.__words[2] = (std::string::size_type)v58;
  v59 = strlen(__sb);
  if (v59 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v60 = v59;
  if (v59 >= 0x17)
  {
    v78 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v78 = v59 | 7;
    v79 = v78 + 1;
    v61 = operator new(v78 + 1);
    *(_QWORD *)&__dst[8] = v60;
    *(_QWORD *)&__dst[16] = v79 | 0x8000000000000000;
    *(_QWORD *)__dst = v61;
  }
  else
  {
    __dst[23] = v59;
    v61 = __dst;
    if (!v59)
    {
      v62 = v16;
      goto LABEL_128;
    }
  }
  v62 = v16;
  memcpy(v61, __sb, v60);
LABEL_128:
  v61[v60] = 0;
  v80 = *(_QWORD *)__dst;
  *(_QWORD *)&v499 = *(_QWORD *)&__dst[8];
  *(_QWORD *)((char *)&v499 + 7) = *(_QWORD *)&__dst[15];
  v81 = __dst[23];
  v82 = operator new(0x38uLL);
  v82[1] = 0;
  v82[2] = 0;
  v82[3] = off_24EC1FA48;
  *v82 = &off_24EC1F9F8;
  v83 = v499;
  v82[4] = v80;
  v82[5] = v83;
  *(_QWORD *)((char *)v82 + 47) = *(_QWORD *)((char *)&v499 + 7);
  *((_BYTE *)v82 + 55) = v81;
  *(_QWORD *)&v499 = 0;
  *(_QWORD *)((char *)&v499 + 7) = 0;
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v472 + 1);
  *(_QWORD *)&v472 = v82 + 3;
  *((_QWORD *)&v472 + 1) = v82;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  object = v471;
  if (v471.__r_.__value_.__r.__words[2])
  {
    v87 = (unint64_t *)(v471.__r_.__value_.__r.__words[2] + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v488 = v472;
  if (*((_QWORD *)&v472 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v472 + 1) + 8);
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
    __p = (void *)v472;
    do
      v91 = __ldaxr(v89);
    while (__stlxr(v91 - 1, v89));
    if (!v91)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v472 + 1) + 16))(*((_QWORD *)&v472 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v472 + 1));
    }
  }
  else
  {
    __p = (void *)v472;
  }
  if (v471.__r_.__value_.__r.__words[2])
  {
    v158 = (unint64_t *)(v471.__r_.__value_.__r.__words[2] + 8);
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v471.__r_.__value_.__r.__words[2] + 16))(v471.__r_.__value_.__r.__words[2]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v471.__r_.__value_.__r.__words[2]);
    }
  }
  v160 = object.__r_.__value_.__r.__words[0];
  if (*((char *)__p + 31) >= 0)
    v161 = (char *)__p + 8;
  else
    v161 = (char *)*((_QWORD *)__p + 1);
  v162 = _os_log_pack_fill();
  *(_DWORD *)v162 = 136315138;
  *(_QWORD *)(v162 + 4) = v161;
  v163 = operator new();
  v164 = *(unsigned __int8 *)(v20 + 39);
  v165 = v454;
  if ((v164 & 0x80u) != 0)
  {
    v165 = *(_QWORD *)(v20 + 16);
    v164 = *(_QWORD *)(v20 + 24);
  }
  *(_QWORD *)v163 = v160;
  *(_OWORD *)(v163 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
  *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v163 + 24) = v488;
  v488 = 0uLL;
  *(_QWORD *)(v163 + 40) = v165;
  *(_QWORD *)(v163 + 48) = v164;
  *(_BYTE *)(v163 + 56) = 1;
  *(_QWORD *)__dst = 0;
  v471.__r_.__value_.__r.__words[0] = v163;
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), &v471);
  v166 = v471.__r_.__value_.__r.__words[0];
  v471.__r_.__value_.__r.__words[0] = 0;
  if (v166)
  {
    v167 = *(std::__shared_weak_count **)(v166 + 32);
    if (v167)
    {
      v168 = (unint64_t *)&v167->__shared_owners_;
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
    v170 = *(std::__shared_weak_count **)(v166 + 16);
    if (v170)
    {
      v171 = (unint64_t *)&v170->__shared_owners_;
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
    MEMORY[0x227684CE8](v166, 0x10F0C40B62ED6C6);
    v173 = *(_QWORD *)__dst;
    *(_QWORD *)__dst = 0;
    if (v173)
    {
      v174 = *(std::__shared_weak_count **)(v173 + 32);
      if (v174)
      {
        v175 = (unint64_t *)&v174->__shared_owners_;
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v177 = *(std::__shared_weak_count **)(v173 + 16);
      if (v177)
      {
        v178 = (unint64_t *)&v177->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      MEMORY[0x227684CE8](v173, 0x10F0C40B62ED6C6);
    }
  }
  v180 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
  v16 = v62;
  if (*((_QWORD *)&v488 + 1))
  {
    v181 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
  if (object.__r_.__value_.__r.__words[2])
  {
    v184 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
LABEL_310:
  if (v16)
  {
    if ((__s->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v186 = (const char *)__s;
    else
      v186 = (const char *)__s->__r_.__value_.__r.__words[0];
    sub_22322C138((uint64_t)v504, "Connecting to VisualLogger %s", v186);
    sub_223182C08((uint64_t)v504);
  }
  sub_223182C08((uint64_t)v504);
  v187 = v506;
  if (v506)
  {
    v188 = (unint64_t *)&v506->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
LABEL_320:
  v190 = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (v190 >= 0)
    v191 = (char *)__s;
  else
    v191 = (char *)__s->__r_.__value_.__r.__words[0];
  if (v190 >= 0)
    v192 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  else
    v192 = __s->__r_.__value_.__l.__size_;
  sub_2231AD150(v191, v192, ":", 1, 0, (uint64_t)&v468);
  v193 = (std::string *)v468;
  if ((char *)v469 - (_BYTE *)v468 == 48)
  {
    if (*((char *)v468 + 23) < 0)
    {
      sub_223197FA4(v466, *(void **)v468, *((_QWORD *)v468 + 1));
      v193 = (std::string *)v468;
    }
    else
    {
      v194 = *(_OWORD *)v468;
      v467 = *((_QWORD *)v468 + 2);
      *(_OWORD *)v466 = v194;
    }
    v197 = std::stoi(v193 + 1, 0, 10);
    if (v467 >= 0)
      v198 = v466;
    else
      v198 = (void **)v466[0];
    v199 = strlen((const char *)v198);
    if (v199 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v200 = (void *)v199;
    if (v199 >= 0x17)
    {
      v202 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v199 | 7) != 0x17)
        v202 = v199 | 7;
      v203 = v202 + 1;
      v201 = operator new(v202 + 1);
      v464[1] = v200;
      v465 = v203 | 0x8000000000000000;
      v464[0] = v201;
    }
    else
    {
      HIBYTE(v465) = v199;
      v201 = v464;
      if (!v199)
      {
LABEL_350:
        *((_BYTE *)v200 + (_QWORD)v201) = 0;
        v481 = v197;
        v479 = 0;
        v480 = 0;
        v478[0] = v464;
        v478[1] = &v481;
        v478[2] = &v479;
        *(_QWORD *)v504 = &off_24EC63F08;
        *(_QWORD *)&v504[8] = v478;
        sub_22456BD10((uint64_t)v504, (uint64_t)&object);
        if (v498)
        {
          v204 = sub_2241471F8();
          v205 = (std::__shared_weak_count *)v480;
          if (v479)
            v206 = v479 + 8;
          else
            v206 = 0;
          object.__r_.__value_.__r.__words[0] = v206;
          object.__r_.__value_.__l.__size_ = v480;
          if (v480)
          {
            v207 = (unint64_t *)(v480 + 8);
            do
              v208 = __ldxr(v207);
            while (__stxr(v208 + 1, v207));
          }
          v195 = sub_224148408((uint64_t)v204, (uint64_t *)&object);
          if (v205)
          {
            v209 = (unint64_t *)&v205->__shared_owners_;
            do
              v210 = __ldaxr(v209);
            while (__stlxr(v210 - 1, v209));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
              std::__shared_weak_count::__release_weak(v205);
            }
          }
          goto LABEL_511;
        }
        sub_223ED5AC0(&v477);
        if (**(int **)(v477 + 56) > 5
          || (v211 = *(unsigned __int8 *)(v477 + 72),
              v212 = sub_22322F254(v477, "OSLogSurrogateAppender", 1, 0),
              v213 = v212,
              !v211)
          && !v212)
        {
LABEL_509:
          if (!v498 && v497)
          {
            if (v496)
            {
              if (v495 < 0)
                operator delete(v494);
              if (v493 < 0)
                operator delete(v490);
            }
            if ((_BYTE)__p && SHIBYTE(v488) < 0)
              operator delete((void *)object.__r_.__value_.__r.__words[2]);
          }
          v195 = 0;
LABEL_511:
          v298 = (std::__shared_weak_count *)v480;
          if (v480)
          {
            v299 = (unint64_t *)(v480 + 8);
            do
              v300 = __ldaxr(v299);
            while (__stlxr(v300 - 1, v299));
            if (!v300)
            {
              ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
              std::__shared_weak_count::__release_weak(v298);
            }
          }
          if (SHIBYTE(v465) < 0)
            operator delete(v464[0]);
          if (SHIBYTE(v467) < 0)
            operator delete(v466[0]);
          v193 = (std::string *)v468;
          if (!v468)
          {
LABEL_521:
            if (v195)
              goto LABEL_522;
            return 0;
          }
          goto LABEL_330;
        }
        v471.__r_.__value_.__r.__words[0] = (std::string::size_type)&v477;
        v471.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v471.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v472) = 5;
        *((_QWORD *)&v472 + 1) = "unknown file";
        v473 = 51;
        v475 = 0;
        v476 = 0;
        v474 = "unknown function";
        if (v465 >= 0)
          v214 = v464;
        else
          v214 = (void **)v464[0];
        if (v498)
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = &off_24EC1FCC0;
          __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
        }
        v215 = &v470;
        sub_22456A158((uint64_t)&object, &v470);
        if ((v470.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v215 = (std::string *)v470.__r_.__value_.__r.__words[0];
        v216 = *(_QWORD *)v471.__r_.__value_.__l.__data_;
        __srcb = *(_QWORD **)v471.__r_.__value_.__l.__data_;
        if (*(char *)(*(_QWORD *)v471.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v218 = *(const char **)(v216 + 16);
          v217 = *(_QWORD *)(v216 + 24);
        }
        else
        {
          v217 = *(unsigned __int8 *)(*(_QWORD *)v471.__r_.__value_.__l.__data_ + 39);
          v218 = (const char *)(*(_QWORD *)v471.__r_.__value_.__l.__data_ + 16);
        }
        v455 = *(_QWORD *)v471.__r_.__value_.__l.__data_ + 16;
        __sc = v211;
        v219 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v219 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v504);
          sub_223199C58("com.apple.cv3d", (unint64_t)v504, &xmmword_255788F40);
          if (v504[24] && (v504[23] & 0x80000000) != 0)
            operator delete(*(void **)v504);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v220 = (const char *)&xmmword_255788F40;
        else
          v220 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v221 = byte_255788F57;
        else
          v221 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v504 = os_log_create(v220, v218);
        v222 = &v504[8];
        if (v221 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v221 >= 0x17)
        {
          v223 = v218;
          v224 = v213;
          v225 = v214;
          v226 = v215;
          v227 = a2;
          v228 = (v221 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v221 | 7) != 0x17)
            v228 = v221 | 7;
          v229 = v228 + 1;
          v222 = operator new(v228 + 1);
          *(_QWORD *)&v504[16] = v221;
          *(_QWORD *)&v504[24] = v229 | 0x8000000000000000;
          *(_QWORD *)&v504[8] = v222;
          a2 = v227;
          v215 = v226;
          v214 = v225;
          v213 = v224;
          v218 = v223;
        }
        else
        {
          v504[31] = v221;
          if (!v221)
          {
LABEL_389:
            v222[v221] = 0;
            v504[32] = 1;
            v230 = &v504[40];
            if (v217 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v217 >= 0x17)
            {
              v231 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v217 | 7) != 0x17)
                v231 = v217 | 7;
              v232 = v231 + 1;
              v230 = operator new(v231 + 1);
              *(_QWORD *)&v504[48] = v217;
              v505 = v232 | 0x8000000000000000;
              *(_QWORD *)&v504[40] = v230;
            }
            else
            {
              HIBYTE(v505) = v217;
              if (!v217)
              {
LABEL_397:
                v230[v217] = 0;
                LOBYTE(v506) = 1;
                v233 = *(NSObject **)v504;
                if (SHIBYTE(v505) < 0)
                  operator delete(*(void **)&v504[40]);
                if (v504[32] && (v504[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v504[8]);
                if (*(_QWORD *)v504)
                  os_release(*(void **)v504);
                if (!v213 || !*(_QWORD *)(v213 + 24))
                {
                  os_log_type_enabled(v233, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v504 = 136315650;
                  *(_QWORD *)&v504[4] = v214;
                  *(_WORD *)&v504[12] = 1024;
                  *(_DWORD *)&v504[14] = v481;
                  *(_WORD *)&v504[18] = 2080;
                  *(_QWORD *)&v504[20] = v215;
                  v240 = (void *)_os_log_send_and_compose_impl();
                  v241 = __sc;
                  if (v240)
                    free(v240);
                  goto LABEL_491;
                }
                v234 = _os_log_pack_size();
                v235 = (std::__shared_weak_count_vtbl *)operator new(v234, (std::align_val_t)8uLL);
                v236 = (std::__shared_weak_count *)operator new();
                v236->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v236->__shared_owners_ = 0;
                v236->__shared_weak_owners_ = 0;
                v236[1].__vftable = v235;
                *(_QWORD *)&v499 = v235;
                *((_QWORD *)&v499 + 1) = v235;
                v501 = 0;
                v502 = 0;
                v500 = v236;
                v237 = strlen((const char *)v214);
                if (v237 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v238 = v237;
                if (v237 >= 0x17)
                {
                  v242 = (v237 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v237 | 7) != 0x17)
                    v242 = v237 | 7;
                  v243 = v242 + 1;
                  v239 = operator new(v242 + 1);
                  *(_QWORD *)&v503[8] = v238;
                  *(_QWORD *)&v503[16] = v243 | 0x8000000000000000;
                  *(_QWORD *)v503 = v239;
                }
                else
                {
                  v503[23] = v237;
                  v239 = v503;
                  if (!v237)
                  {
LABEL_416:
                    v239[v238] = 0;
                    v244 = strlen((const char *)v215);
                    if (v244 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v245 = v244;
                    if (v244 >= 0x17)
                    {
                      v247 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v244 | 7) != 0x17)
                        v247 = v244 | 7;
                      v248 = v247 + 1;
                      v246 = (std::exception_vtbl *)operator new(v247 + 1);
                      *(_QWORD *)&v486 = v245;
                      *((_QWORD *)&v486 + 1) = v248 | 0x8000000000000000;
                      v485.__vftable = v246;
                    }
                    else
                    {
                      HIBYTE(v486) = v244;
                      v246 = (std::exception_vtbl *)&v485;
                      if (!v244)
                        goto LABEL_424;
                    }
                    memcpy(v246, v215, v245);
LABEL_424:
                    *((_BYTE *)&v246->~exception + v245) = 0;
                    *(_QWORD *)&v504[8] = *(_QWORD *)v503;
                    *(_QWORD *)&v504[16] = *(_QWORD *)&v503[8];
                    *(_QWORD *)&v504[23] = *(_QWORD *)&v503[15];
                    *(std::exception *)&v504[32] = v485;
                    *(_QWORD *)&v504[40] = v486;
                    *(_QWORD *)&v504[47] = *(_QWORD *)((char *)&v486 + 7);
                    *(_QWORD *)v504 = off_24EC580F8;
                    v504[31] = v503[23];
                    v504[55] = HIBYTE(v486);
                    v249 = (char *)operator new(0x50uLL);
                    *((_QWORD *)v249 + 3) = off_24EC580F8;
                    *((_QWORD *)v249 + 1) = 0;
                    *((_QWORD *)v249 + 2) = 0;
                    *(_QWORD *)v249 = &off_24EC580A8;
                    *((_OWORD *)v249 + 2) = *(_OWORD *)&v504[8];
                    *((_QWORD *)v249 + 6) = *(_QWORD *)&v504[24];
                    memset(&v504[8], 0, 24);
                    *(_OWORD *)(v249 + 56) = *(_OWORD *)&v504[32];
                    *((_QWORD *)v249 + 9) = *(_QWORD *)&v504[48];
                    memset(&v504[32], 0, 24);
                    v250 = v502;
                    v501 = v249 + 24;
                    v502 = (std::__shared_weak_count *)v249;
                    if (v250)
                    {
                      v251 = (unint64_t *)&v250->__shared_owners_;
                      do
                        v252 = __ldaxr(v251);
                      while (__stlxr(v252 - 1, v251));
                      if (!v252)
                      {
                        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                        std::__shared_weak_count::__release_weak(v250);
                      }
                    }
                    if ((v504[55] & 0x80000000) != 0)
                    {
                      operator delete(*(void **)&v504[32]);
                      if ((v504[31] & 0x80000000) == 0)
                      {
LABEL_431:
                        *(_OWORD *)__dst = v499;
                        v254 = v500;
                        v253 = v501;
                        *(_QWORD *)&__dst[16] = v500;
                        if (!v500)
                          goto LABEL_437;
                        goto LABEL_435;
                      }
                    }
                    else if ((v504[31] & 0x80000000) == 0)
                    {
                      goto LABEL_431;
                    }
                    operator delete(*(void **)&v504[8]);
                    *(_OWORD *)__dst = v499;
                    v254 = v500;
                    v253 = v501;
                    *(_QWORD *)&__dst[16] = v500;
                    if (!v500)
                    {
LABEL_437:
                      v257 = v502;
                      *(_QWORD *)&v483 = v253;
                      *((_QWORD *)&v483 + 1) = v502;
                      if (v502)
                      {
                        v258 = (unint64_t *)&v502->__shared_owners_;
                        do
                          v259 = __ldxr(v258);
                        while (__stxr(v259 + 1, v258));
                        v484 = v253;
                        do
                          v260 = __ldaxr(v258);
                        while (__stlxr(v260 - 1, v258));
                        if (!v260)
                        {
                          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                          std::__shared_weak_count::__release_weak(v257);
                        }
                      }
                      else
                      {
                        v484 = v253;
                      }
                      v261 = v500;
                      if (v500)
                      {
                        v262 = (unint64_t *)&v500->__shared_owners_;
                        do
                          v263 = __ldaxr(v262);
                        while (__stlxr(v263 - 1, v262));
                        if (!v263)
                        {
                          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                          std::__shared_weak_count::__release_weak(v261);
                        }
                      }
                      v264 = *(_QWORD *)__dst;
                      if (v484[31] >= 0)
                        v265 = v484 + 8;
                      else
                        v265 = (char *)*((_QWORD *)v484 + 1);
                      if (v484[55] >= 0)
                        v266 = v484 + 32;
                      else
                        v266 = (char *)*((_QWORD *)v484 + 4);
                      v267 = _os_log_pack_fill();
                      v268 = v481;
                      *(_DWORD *)v267 = 136315650;
                      *(_QWORD *)(v267 + 4) = v265;
                      *(_WORD *)(v267 + 12) = 1024;
                      *(_DWORD *)(v267 + 14) = v268;
                      *(_WORD *)(v267 + 18) = 2080;
                      *(_QWORD *)(v267 + 20) = v266;
                      v269 = operator new();
                      v270 = *((unsigned __int8 *)__srcb + 39);
                      v271 = v455;
                      if ((v270 & 0x80u) != 0)
                      {
                        v271 = __srcb[2];
                        v270 = __srcb[3];
                      }
                      *(_QWORD *)v269 = v264;
                      *(_OWORD *)(v269 + 8) = *(_OWORD *)&__dst[8];
                      *(_QWORD *)&__dst[8] = 0;
                      *(_QWORD *)&__dst[16] = 0;
                      *(_OWORD *)(v269 + 24) = v483;
                      v483 = 0uLL;
                      *(_QWORD *)(v269 + 40) = v271;
                      *(_QWORD *)(v269 + 48) = v270;
                      *(_BYTE *)(v269 + 56) = 16;
                      *(_QWORD *)&v499 = 0;
                      *(_QWORD *)v504 = v269;
                      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v213 + 24) + 40))(*(_QWORD *)(v213 + 24), v504);
                      v272 = *(_QWORD *)v504;
                      *(_QWORD *)v504 = 0;
                      v241 = __sc;
                      if (v272)
                      {
                        v273 = *(std::__shared_weak_count **)(v272 + 32);
                        if (v273)
                        {
                          v274 = (unint64_t *)&v273->__shared_owners_;
                          do
                            v275 = __ldaxr(v274);
                          while (__stlxr(v275 - 1, v274));
                          if (!v275)
                          {
                            ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                            std::__shared_weak_count::__release_weak(v273);
                          }
                        }
                        v276 = *(std::__shared_weak_count **)(v272 + 16);
                        if (v276)
                        {
                          v277 = (unint64_t *)&v276->__shared_owners_;
                          do
                            v278 = __ldaxr(v277);
                          while (__stlxr(v278 - 1, v277));
                          if (!v278)
                          {
                            ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                            std::__shared_weak_count::__release_weak(v276);
                          }
                        }
                        MEMORY[0x227684CE8](v272, 0x10F0C40B62ED6C6);
                        v279 = v499;
                        *(_QWORD *)&v499 = 0;
                        if (v279)
                        {
                          v280 = *(std::__shared_weak_count **)(v279 + 32);
                          if (v280)
                          {
                            v281 = (unint64_t *)&v280->__shared_owners_;
                            do
                              v282 = __ldaxr(v281);
                            while (__stlxr(v282 - 1, v281));
                            if (!v282)
                            {
                              ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                              std::__shared_weak_count::__release_weak(v280);
                            }
                          }
                          v283 = *(std::__shared_weak_count **)(v279 + 16);
                          if (v283)
                          {
                            v284 = (unint64_t *)&v283->__shared_owners_;
                            do
                              v285 = __ldaxr(v284);
                            while (__stlxr(v285 - 1, v284));
                            if (!v285)
                            {
                              ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                              std::__shared_weak_count::__release_weak(v283);
                            }
                          }
                          MEMORY[0x227684CE8](v279, 0x10F0C40B62ED6C6);
                        }
                      }
                      v286 = (std::__shared_weak_count *)*((_QWORD *)&v483 + 1);
                      if (*((_QWORD *)&v483 + 1))
                      {
                        v287 = (unint64_t *)(*((_QWORD *)&v483 + 1) + 8);
                        do
                          v288 = __ldaxr(v287);
                        while (__stlxr(v288 - 1, v287));
                        if (!v288)
                        {
                          ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                          std::__shared_weak_count::__release_weak(v286);
                        }
                      }
                      v289 = *(std::__shared_weak_count **)&__dst[16];
                      if (*(_QWORD *)&__dst[16])
                      {
                        v290 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                        do
                          v291 = __ldaxr(v290);
                        while (__stlxr(v291 - 1, v290));
                        if (!v291)
                        {
                          ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                          std::__shared_weak_count::__release_weak(v289);
                        }
                      }
LABEL_491:
                      if (SHIBYTE(v470.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v470.__r_.__value_.__l.__data_);
                      if (v241)
                      {
                        if (v465 >= 0)
                          v292 = v464;
                        else
                          v292 = (void **)v464[0];
                        if (v498)
                        {
                          v450 = __cxa_allocate_exception(8uLL);
                          *v450 = &off_24EC1FCC0;
                          __cxa_throw(v450, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
                        }
                        v293 = v481;
                        sub_22456A158((uint64_t)&object, (std::string *)v504);
                        if (v504[23] >= 0)
                          v294 = v504;
                        else
                          v294 = *(const char **)v504;
                        sub_22322C138((uint64_t)&v471, "VisualLoggerServer %s:%d not running: %s", (const char *)v292, v293, v294);
                        if ((v504[23] & 0x80000000) != 0)
                          operator delete(*(void **)v504);
                        sub_223182C08((uint64_t)&v471);
                      }
                      sub_223182C08((uint64_t)&v471);
                      v295 = v476;
                      if (v476)
                      {
                        v296 = (unint64_t *)&v476->__shared_owners_;
                        do
                          v297 = __ldaxr(v296);
                        while (__stlxr(v297 - 1, v296));
                        if (!v297)
                        {
                          ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                          std::__shared_weak_count::__release_weak(v295);
                        }
                      }
                      goto LABEL_509;
                    }
LABEL_435:
                    v255 = (unint64_t *)&v254->__shared_owners_;
                    do
                      v256 = __ldxr(v255);
                    while (__stxr(v256 + 1, v255));
                    goto LABEL_437;
                  }
                }
                memcpy(v239, v214, v238);
                goto LABEL_416;
              }
            }
            memmove(v230, v218, v217);
            goto LABEL_397;
          }
        }
        memmove(v222, v220, v221);
        goto LABEL_389;
      }
    }
    memmove(v201, v198, (size_t)v200);
    goto LABEL_350;
  }
  v195 = 0;
  if (!v468)
    goto LABEL_521;
LABEL_330:
  v196 = v469;
  if (v469 == v193)
  {
    v469 = v193;
    operator delete(v193);
    if (v195)
      goto LABEL_522;
    return 0;
  }
  do
  {
    if (SHIBYTE(v196[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v196[-1].__r_.__value_.__l.__data_);
    --v196;
  }
  while (v196 != v193);
  v469 = v193;
  operator delete(v468);
  if (!v195)
    return 0;
LABEL_522:
  v301 = *(char *)(a2 + 23);
  if (v301 >= 0)
    v302 = (char *)a2;
  else
    v302 = *(char **)a2;
  if (v301 >= 0)
    v303 = *(unsigned __int8 *)(a2 + 23);
  else
    v303 = *(_QWORD *)(a2 + 8);
  sub_2231AD150(v302, v303, ",", 1, 0, (uint64_t)&v499);
  v304 = *((_QWORD *)&v499 + 1);
  v305 = v499;
  if ((_QWORD)v499 != *((_QWORD *)&v499 + 1))
  {
    v451 = *((_QWORD *)&v499 + 1);
    while (1)
    {
      sub_223ED5AC0(&v485);
      if (*(int *)v485.__vftable[2].~exception_0 <= 3)
      {
        v306 = LOBYTE(v485.__vftable[3].~exception);
        v307 = sub_22322F254((uint64_t)v485.__vftable, "OSLogSurrogateAppender", 1, 0);
        v308 = v307;
        if (v306 || v307 != 0)
          break;
      }
LABEL_649:
      v383 = sub_2241471F8();
      v384 = (const char *)v305;
      if (*(char *)(v305 + 23) < 0)
        v384 = *(const char **)v305;
      v385 = strlen(v384);
      v386 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(v383[1] + 48))(v383 + 1, v384, v385);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v386 + 40))(v386, 1);
      v305 += 24;
      if (v305 == v304)
        goto LABEL_763;
    }
    *(_QWORD *)v504 = &v485;
    *(std::chrono::steady_clock::time_point *)&v504[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v504[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v504[24] = 3;
    *(_QWORD *)&v504[32] = "unknown file";
    *(_DWORD *)&v504[40] = 113;
    *(_QWORD *)&v504[48] = "unknown function";
    v505 = 0;
    v506 = 0;
    v310 = (const char *)v305;
    if (*(char *)(v305 + 23) < 0)
    {
      v310 = *(const char **)v305;
      v311 = **(_QWORD **)v504;
      v312 = **(_QWORD **)v504 + 16;
      v313 = *(char *)(**(_QWORD **)v504 + 39);
      __srcc = **(_QWORD ***)v504;
      if ((v313 & 0x80000000) == 0)
      {
LABEL_537:
        v314 = v313;
        v315 = (const char *)v312;
        __sd = (char *)v312;
        v316 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v316 & 1) != 0)
          goto LABEL_541;
LABEL_657:
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&v471);
          sub_223199C58("com.apple.cv3d", (unint64_t)&v471, &xmmword_255788F40);
          if ((_BYTE)v472 && SHIBYTE(v471.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v471.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_541:
        if (byte_255788F57 >= 0)
          v318 = (const char *)&xmmword_255788F40;
        else
          v318 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v319 = byte_255788F57;
        else
          v319 = *((_QWORD *)&xmmword_255788F40 + 1);
        object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v318, v315);
        if (v319 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v319 >= 0x17)
        {
          v321 = (v319 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v319 | 7) != 0x17)
            v321 = v319 | 7;
          v322 = v321 + 1;
          v320 = (std::string::size_type *)operator new(v321 + 1);
          object.__r_.__value_.__r.__words[2] = v319;
          *(_QWORD *)&v488 = v322 | 0x8000000000000000;
          object.__r_.__value_.__l.__size_ = (std::string::size_type)v320;
        }
        else
        {
          BYTE7(v488) = v319;
          v320 = &object.__r_.__value_.__l.__size_;
          if (!v319)
          {
LABEL_555:
            *((_BYTE *)v320 + v319) = 0;
            BYTE8(v488) = 1;
            if (v314 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v314 >= 0x17)
            {
              v325 = (v314 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v314 | 7) != 0x17)
                v325 = v314 | 7;
              v326 = v325 + 1;
              v323 = operator new(v325 + 1);
              v490 = (void *)v314;
              v491 = v326 | 0x8000000000000000;
              __p = v323;
            }
            else
            {
              HIBYTE(v491) = v314;
              v323 = &__p;
              if (!v314)
              {
                LOBYTE(__p) = 0;
                v492 = 1;
                v324 = object.__r_.__value_.__r.__words[0];
                if ((SHIBYTE(v491) & 0x80000000) == 0)
                  goto LABEL_559;
                goto LABEL_565;
              }
            }
            memmove(v323, v315, v314);
            *((_BYTE *)v323 + v314) = 0;
            v492 = 1;
            v324 = object.__r_.__value_.__r.__words[0];
            if ((SHIBYTE(v491) & 0x80000000) == 0)
            {
LABEL_559:
              if (!BYTE8(v488))
                goto LABEL_568;
              goto LABEL_566;
            }
LABEL_565:
            operator delete(__p);
            if (!BYTE8(v488))
              goto LABEL_568;
LABEL_566:
            if (SBYTE7(v488) < 0)
              operator delete((void *)object.__r_.__value_.__l.__size_);
LABEL_568:
            if (object.__r_.__value_.__r.__words[0])
              os_release(object.__r_.__value_.__l.__data_);
            if (!v308 || !*(_QWORD *)(v308 + 24))
            {
              os_log_type_enabled(v324, OS_LOG_TYPE_INFO);
              LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v310;
              v333 = (void *)_os_log_send_and_compose_impl();
              v304 = v451;
              if (v333)
              {
                free(v333);
                if (v306)
                {
LABEL_641:
                  v379 = (const char *)v305;
                  if (*(char *)(v305 + 23) < 0)
                    v379 = *(const char **)v305;
                  sub_22322C138((uint64_t)v504, "Enabling logging context: %s", v379);
                  sub_223182C08((uint64_t)v504);
                }
LABEL_644:
                sub_223182C08((uint64_t)v504);
                v380 = v506;
                if (v506)
                {
                  v381 = (unint64_t *)&v506->__shared_owners_;
                  do
                    v382 = __ldaxr(v381);
                  while (__stlxr(v382 - 1, v381));
                  if (!v382)
                  {
                    ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                    std::__shared_weak_count::__release_weak(v380);
                  }
                }
                goto LABEL_649;
              }
              goto LABEL_640;
            }
            v327 = _os_log_pack_size();
            v328 = operator new(v327, (std::align_val_t)8uLL);
            v329 = (_QWORD *)operator new();
            *v329 = &off_24EC1F7F0;
            v329[1] = 0;
            v329[2] = 0;
            v329[3] = v328;
            v471.__r_.__value_.__r.__words[0] = (std::string::size_type)v328;
            v471.__r_.__value_.__l.__size_ = (std::string::size_type)v328;
            v471.__r_.__value_.__r.__words[2] = (std::string::size_type)v329;
            v472 = 0uLL;
            v330 = strlen(v310);
            if (v330 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v331 = v330;
            if (v330 >= 0x17)
            {
              v334 = (v330 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v330 | 7) != 0x17)
                v334 = v330 | 7;
              v335 = v334 + 1;
              v332 = operator new(v334 + 1);
              *(_QWORD *)&__dst[8] = v331;
              *(_QWORD *)&__dst[16] = v335 | 0x8000000000000000;
              *(_QWORD *)__dst = v332;
            }
            else
            {
              __dst[23] = v330;
              v332 = __dst;
              if (!v330)
                goto LABEL_583;
            }
            memcpy(v332, v310, v331);
LABEL_583:
            v332[v331] = 0;
            v336 = *(_QWORD *)__dst;
            *(_QWORD *)v503 = *(_QWORD *)&__dst[8];
            *(_QWORD *)&v503[7] = *(_QWORD *)&__dst[15];
            v337 = __dst[23];
            v338 = operator new(0x38uLL);
            v338[1] = 0;
            v338[2] = 0;
            v338[3] = off_24EC1FA48;
            *v338 = &off_24EC1F9F8;
            v339 = *(_QWORD *)v503;
            v338[4] = v336;
            v338[5] = v339;
            *(_QWORD *)((char *)v338 + 47) = *(_QWORD *)&v503[7];
            *((_BYTE *)v338 + 55) = v337;
            *(_QWORD *)v503 = 0;
            *(_QWORD *)&v503[7] = 0;
            v340 = (std::__shared_weak_count *)*((_QWORD *)&v472 + 1);
            *(_QWORD *)&v472 = v338 + 3;
            *((_QWORD *)&v472 + 1) = v338;
            if (v340)
            {
              v341 = (unint64_t *)&v340->__shared_owners_;
              do
                v342 = __ldaxr(v341);
              while (__stlxr(v342 - 1, v341));
              if (!v342)
              {
                ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                std::__shared_weak_count::__release_weak(v340);
              }
            }
            object = v471;
            v343 = (void *)v472;
            if (v471.__r_.__value_.__r.__words[2])
            {
              v344 = (unint64_t *)(v471.__r_.__value_.__r.__words[2] + 8);
              do
                v345 = __ldxr(v344);
              while (__stxr(v345 + 1, v344));
            }
            v346 = (std::__shared_weak_count *)*((_QWORD *)&v472 + 1);
            *(_QWORD *)&v488 = v343;
            *((_QWORD *)&v488 + 1) = *((_QWORD *)&v472 + 1);
            if (*((_QWORD *)&v472 + 1))
            {
              v347 = (unint64_t *)(*((_QWORD *)&v472 + 1) + 8);
              do
                v348 = __ldxr(v347);
              while (__stxr(v348 + 1, v347));
              __p = v343;
              do
                v349 = __ldaxr(v347);
              while (__stlxr(v349 - 1, v347));
              if (!v349)
              {
                ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                std::__shared_weak_count::__release_weak(v346);
              }
            }
            else
            {
              __p = v343;
            }
            v350 = (std::__shared_weak_count *)v471.__r_.__value_.__r.__words[2];
            if (v471.__r_.__value_.__r.__words[2])
            {
              v351 = (unint64_t *)(v471.__r_.__value_.__r.__words[2] + 8);
              do
                v352 = __ldaxr(v351);
              while (__stlxr(v352 - 1, v351));
              if (!v352)
              {
                ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                std::__shared_weak_count::__release_weak(v350);
              }
            }
            v353 = object.__r_.__value_.__r.__words[0];
            if (*((char *)__p + 31) >= 0)
              v354 = (char *)__p + 8;
            else
              v354 = (char *)*((_QWORD *)__p + 1);
            v355 = _os_log_pack_fill();
            *(_DWORD *)v355 = 136315138;
            *(_QWORD *)(v355 + 4) = v354;
            v356 = operator new();
            v357 = *((unsigned __int8 *)__srcc + 39);
            v358 = __sd;
            if ((v357 & 0x80u) != 0)
            {
              v358 = (char *)__srcc[2];
              v357 = __srcc[3];
            }
            *(_QWORD *)v356 = v353;
            *(_OWORD *)(v356 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
            *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v356 + 24) = v488;
            v488 = 0uLL;
            *(_QWORD *)(v356 + 40) = v358;
            *(_QWORD *)(v356 + 48) = v357;
            *(_BYTE *)(v356 + 56) = 1;
            *(_QWORD *)__dst = 0;
            v471.__r_.__value_.__r.__words[0] = v356;
            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v308 + 24) + 40))(*(_QWORD *)(v308 + 24), &v471);
            v359 = v471.__r_.__value_.__r.__words[0];
            v471.__r_.__value_.__r.__words[0] = 0;
            v304 = v451;
            if (v359)
            {
              v360 = *(std::__shared_weak_count **)(v359 + 32);
              if (v360)
              {
                v361 = (unint64_t *)&v360->__shared_owners_;
                do
                  v362 = __ldaxr(v361);
                while (__stlxr(v362 - 1, v361));
                if (!v362)
                {
                  ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                  std::__shared_weak_count::__release_weak(v360);
                }
              }
              v363 = *(std::__shared_weak_count **)(v359 + 16);
              if (v363)
              {
                v364 = (unint64_t *)&v363->__shared_owners_;
                do
                  v365 = __ldaxr(v364);
                while (__stlxr(v365 - 1, v364));
                if (!v365)
                {
                  ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                  std::__shared_weak_count::__release_weak(v363);
                }
              }
              MEMORY[0x227684CE8](v359, 0x10F0C40B62ED6C6);
              v366 = *(_QWORD *)__dst;
              *(_QWORD *)__dst = 0;
              if (v366)
              {
                v367 = *(std::__shared_weak_count **)(v366 + 32);
                if (v367)
                {
                  v368 = (unint64_t *)&v367->__shared_owners_;
                  do
                    v369 = __ldaxr(v368);
                  while (__stlxr(v369 - 1, v368));
                  if (!v369)
                  {
                    ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                    std::__shared_weak_count::__release_weak(v367);
                  }
                }
                v370 = *(std::__shared_weak_count **)(v366 + 16);
                if (v370)
                {
                  v371 = (unint64_t *)&v370->__shared_owners_;
                  do
                    v372 = __ldaxr(v371);
                  while (__stlxr(v372 - 1, v371));
                  if (!v372)
                  {
                    ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                    std::__shared_weak_count::__release_weak(v370);
                  }
                }
                MEMORY[0x227684CE8](v366, 0x10F0C40B62ED6C6);
              }
            }
            v373 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
            if (!*((_QWORD *)&v488 + 1))
              goto LABEL_636;
            v374 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
            do
              v375 = __ldaxr(v374);
            while (__stlxr(v375 - 1, v374));
            if (!v375)
            {
              ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
              std::__shared_weak_count::__release_weak(v373);
              v376 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
              if (object.__r_.__value_.__r.__words[2])
                goto LABEL_637;
            }
            else
            {
LABEL_636:
              v376 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
              if (object.__r_.__value_.__r.__words[2])
              {
LABEL_637:
                v377 = (unint64_t *)&v376->__shared_owners_;
                do
                  v378 = __ldaxr(v377);
                while (__stlxr(v378 - 1, v377));
                if (!v378)
                {
                  ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                  std::__shared_weak_count::__release_weak(v376);
                  if (v306)
                    goto LABEL_641;
                  goto LABEL_644;
                }
              }
            }
LABEL_640:
            if (v306)
              goto LABEL_641;
            goto LABEL_644;
          }
        }
        memmove(v320, v318, v319);
        goto LABEL_555;
      }
    }
    else
    {
      v311 = **(_QWORD **)v504;
      v312 = **(_QWORD **)v504 + 16;
      v313 = *(char *)(**(_QWORD **)v504 + 39);
      __srcc = **(_QWORD ***)v504;
      if ((v313 & 0x80000000) == 0)
        goto LABEL_537;
    }
    v315 = *(const char **)(v311 + 16);
    v314 = *(_QWORD *)(v311 + 24);
    __sd = (char *)v312;
    v317 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v317 & 1) != 0)
      goto LABEL_541;
    goto LABEL_657;
  }
  sub_223ED5AC0(v503);
  if (**(int **)(*(_QWORD *)v503 + 56) > 3)
    goto LABEL_762;
  v387 = *(unsigned __int8 *)(*(_QWORD *)v503 + 72);
  v388 = sub_22322F254(*(uint64_t *)v503, "OSLogSurrogateAppender", 1, 0);
  v389 = v388;
  if (!v387 && !v388)
    goto LABEL_762;
  *(_QWORD *)v504 = v503;
  *(std::chrono::steady_clock::time_point *)&v504[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v504[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v504[24] = 3;
  *(_QWORD *)&v504[32] = "unknown file";
  *(_DWORD *)&v504[40] = 108;
  v505 = 0;
  v506 = 0;
  *(_QWORD *)&v504[48] = "unknown function";
  v390 = **(_QWORD **)v504;
  v391 = **(_QWORD **)v504 + 16;
  if (*(char *)(**(_QWORD **)v504 + 39) < 0)
  {
    v393 = *(const char **)(v390 + 16);
    v392 = *(_QWORD *)(v390 + 24);
  }
  else
  {
    v392 = *(unsigned __int8 *)(**(_QWORD **)v504 + 39);
    v393 = (const char *)(v390 + 16);
  }
  v394 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v394 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v488 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v395 = (const char *)&xmmword_255788F40;
  else
    v395 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v396 = byte_255788F57;
  else
    v396 = *((_QWORD *)&xmmword_255788F40 + 1);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v395, v393);
  v397 = &object.__r_.__value_.__l.__size_;
  if (v396 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v396 >= 0x17)
  {
    v398 = v389;
    v399 = v393;
    v400 = v390;
    v401 = v387;
    v402 = v391;
    v403 = (v396 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v396 | 7) != 0x17)
      v403 = v396 | 7;
    v404 = v403 + 1;
    v397 = (std::string::size_type *)operator new(v403 + 1);
    object.__r_.__value_.__r.__words[2] = v396;
    *(_QWORD *)&v488 = v404 | 0x8000000000000000;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)v397;
    v391 = v402;
    v387 = v401;
    v390 = v400;
    v393 = v399;
    v389 = v398;
    goto LABEL_691;
  }
  BYTE7(v488) = v396;
  if (v396)
LABEL_691:
    memmove(v397, v395, v396);
  *((_BYTE *)v397 + v396) = 0;
  BYTE8(v488) = 1;
  v405 = &__p;
  if (v392 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v392 >= 0x17)
  {
    v406 = (v392 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v392 | 7) != 0x17)
      v406 = v392 | 7;
    v407 = v406 + 1;
    v405 = operator new(v406 + 1);
    v490 = (void *)v392;
    v491 = v407 | 0x8000000000000000;
    __p = v405;
  }
  else
  {
    HIBYTE(v491) = v392;
    if (!v392)
      goto LABEL_700;
  }
  memmove(v405, v393, v392);
LABEL_700:
  *((_BYTE *)v405 + v392) = 0;
  v492 = 1;
  v408 = object.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v491) < 0)
    operator delete(__p);
  if (BYTE8(v488) && SBYTE7(v488) < 0)
    operator delete((void *)object.__r_.__value_.__l.__size_);
  if (object.__r_.__value_.__r.__words[0])
    os_release(object.__r_.__value_.__l.__data_);
  if (v389 && *(_QWORD *)(v389 + 24))
  {
    v409 = _os_log_pack_size();
    v410 = (std::__shared_weak_count_vtbl *)operator new(v409, (std::align_val_t)8uLL);
    v411 = (std::__shared_weak_count *)operator new();
    v412 = v411;
    v411->__shared_owners_ = 0;
    v413 = (unint64_t *)&v411->__shared_owners_;
    v411->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v411->__shared_weak_owners_ = 0;
    v411[1].__vftable = v410;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v410;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)v410;
    object.__r_.__value_.__r.__words[2] = (std::string::size_type)v411;
    do
      v414 = __ldxr(v413);
    while (__stxr(v414 + 1, v413));
    v488 = 0uLL;
    __p = 0;
    do
      v415 = __ldaxr(v413);
    while (__stlxr(v415 - 1, v413));
    if (!v415)
    {
      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
      std::__shared_weak_count::__release_weak(v412);
    }
    v416 = object.__r_.__value_.__r.__words[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v417 = operator new();
    v418 = *(unsigned __int8 *)(v390 + 39);
    if ((v418 & 0x80u) == 0)
      v419 = v391;
    else
      v419 = *(_QWORD *)(v390 + 16);
    if ((v418 & 0x80u) != 0)
      v418 = *(_QWORD *)(v390 + 24);
    *(_QWORD *)v417 = v416;
    *(_OWORD *)(v417 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
    *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v417 + 24) = v488;
    v488 = 0uLL;
    *(_QWORD *)(v417 + 40) = v419;
    *(_QWORD *)(v417 + 48) = v418;
    *(_BYTE *)(v417 + 56) = 1;
    *(_QWORD *)__dst = 0;
    v471.__r_.__value_.__r.__words[0] = v417;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v389 + 24) + 40))(*(_QWORD *)(v389 + 24), &v471);
    v420 = v471.__r_.__value_.__r.__words[0];
    v471.__r_.__value_.__r.__words[0] = 0;
    if (v420)
    {
      v421 = *(std::__shared_weak_count **)(v420 + 32);
      if (v421)
      {
        v422 = (unint64_t *)&v421->__shared_owners_;
        do
          v423 = __ldaxr(v422);
        while (__stlxr(v423 - 1, v422));
        if (!v423)
        {
          ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
          std::__shared_weak_count::__release_weak(v421);
        }
      }
      v424 = *(std::__shared_weak_count **)(v420 + 16);
      if (v424)
      {
        v425 = (unint64_t *)&v424->__shared_owners_;
        do
          v426 = __ldaxr(v425);
        while (__stlxr(v426 - 1, v425));
        if (!v426)
        {
          ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
          std::__shared_weak_count::__release_weak(v424);
        }
      }
      MEMORY[0x227684CE8](v420, 0x10F0C40B62ED6C6);
      v427 = *(_QWORD *)__dst;
      *(_QWORD *)__dst = 0;
      if (v427)
      {
        v428 = *(std::__shared_weak_count **)(v427 + 32);
        if (v428)
        {
          v429 = (unint64_t *)&v428->__shared_owners_;
          do
            v430 = __ldaxr(v429);
          while (__stlxr(v430 - 1, v429));
          if (!v430)
          {
            ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
            std::__shared_weak_count::__release_weak(v428);
          }
        }
        v431 = *(std::__shared_weak_count **)(v427 + 16);
        if (v431)
        {
          v432 = (unint64_t *)&v431->__shared_owners_;
          do
            v433 = __ldaxr(v432);
          while (__stlxr(v433 - 1, v432));
          if (!v433)
          {
            ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
            std::__shared_weak_count::__release_weak(v431);
          }
        }
        MEMORY[0x227684CE8](v427, 0x10F0C40B62ED6C6);
      }
    }
    v434 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
    if (*((_QWORD *)&v488 + 1))
    {
      v435 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
      do
        v436 = __ldaxr(v435);
      while (__stlxr(v436 - 1, v435));
      if (!v436)
      {
        ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
        std::__shared_weak_count::__release_weak(v434);
      }
    }
    v437 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
    if (object.__r_.__value_.__r.__words[2])
    {
      v438 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
      do
        v439 = __ldaxr(v438);
      while (__stlxr(v439 - 1, v438));
      if (!v439)
      {
        ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
        std::__shared_weak_count::__release_weak(v437);
      }
    }
  }
  else
  {
    os_log_type_enabled(v408, OS_LOG_TYPE_INFO);
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    v440 = (void *)_os_log_send_and_compose_impl();
    if (v440)
      free(v440);
  }
  if (v387)
  {
    sub_22322C138((uint64_t)v504, "Enabling root logging context");
    sub_223182C08((uint64_t)v504);
  }
  sub_223182C08((uint64_t)v504);
  v441 = v506;
  if (v506)
  {
    v442 = (unint64_t *)&v506->__shared_owners_;
    do
      v443 = __ldaxr(v442);
    while (__stlxr(v443 - 1, v442));
    if (!v443)
    {
      ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
      std::__shared_weak_count::__release_weak(v441);
    }
  }
LABEL_762:
  v444 = sub_2241471F8();
  v445 = (*(uint64_t (**)(uint64_t *, const char *, _QWORD))(v444[1] + 48))(v444 + 1, "", 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v445 + 40))(v445, 1);
LABEL_763:
  v446 = v499;
  if ((_QWORD)v499)
  {
    v447 = *((_QWORD *)&v499 + 1);
    v448 = (void *)v499;
    if (*((_QWORD *)&v499 + 1) != (_QWORD)v499)
    {
      do
      {
        if (*(char *)(v447 - 1) < 0)
          operator delete(*(void **)(v447 - 24));
        v447 -= 24;
      }
      while (v447 != v446);
      v448 = (void *)v499;
    }
    *((_QWORD *)&v499 + 1) = v446;
    operator delete(v448);
  }
  return 1;
}

void sub_223ED96C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::exception a63)
{
  void *__p;
  char a71;
  char a72;
  uint64_t v72;

  if (a72 && a71 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC(v72 - 176);
  std::exception::~exception(&a63);
  __cxa_end_catch();
  if (a42 < 0)
  {
    operator delete(a37);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223ED97A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if ((a32 & 0x80000000) == 0)
    JUMPOUT(0x223ED97C0);
  JUMPOUT(0x223ED9790);
}

void sub_223ED97D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_223199DE8((uint64_t)&a37);
  sub_223182DAC(v37 - 176);
  sub_22319BB48((void **)(v37 - 240));
  _Unwind_Resume(a1);
}

void sub_223ED98B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *object)
{
  void *__p;
  char a69;

  if (a69 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x223ED9940);
}

void sub_223ED98BC()
{
  JUMPOUT(0x223ED991CLL);
}

void sub_223ED98F0()
{
  JUMPOUT(0x223ED991CLL);
}

void sub_223ED98F8()
{
  JUMPOUT(0x223ED9908);
}

void sub_223ED992C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223ED993C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 176);
  sub_22319BB48((void **)(v1 - 240));
  _Unwind_Resume(a1);
}

void sub_223ED9958(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319BB48((void **)(v1 - 240));
  _Unwind_Resume(a1);
}

void sub_223ED996C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319BB48((void **)(v1 - 240));
  _Unwind_Resume(a1);
}

void sub_223ED9980()
{
  uint64_t v0;

  sub_22319BB48((void **)(v0 - 240));
  JUMPOUT(0x223ED998CLL);
}

void sub_223ED9998()
{
  JUMPOUT(0x227684CE8);
}

void sub_223ED99AC(uint64_t a1)
{
  __int128 **v1;
  _QWORD *v2;
  __int128 *v3;
  __int128 v4;
  __int16 v5;
  int v6;
  uint64_t *v7;
  _QWORD *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  __int16 v21;
  int v22;
  char v23;
  __int16 v24;
  char v25;
  char v26;
  char v27;
  _BYTE v28[24];
  _BYTE *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v1 = *(__int128 ***)(a1 + 8);
  LOBYTE(__p[0]) = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v2 = v28;
  v28[0] = 0;
  v30 = 0;
  LOBYTE(v31) = 0;
  v33 = 0;
  v3 = *v1;
  if ((*((char *)*v1 + 23) & 0x80000000) == 0)
  {
    v4 = *v3;
    *(_QWORD *)&v17 = *((_QWORD *)v3 + 2);
    v16 = v4;
    v5 = *(_WORD *)v1[1];
LABEL_3:
    *(_OWORD *)__p = v16;
    v20 = v17;
    v21 = v5;
    v22 = 0;
    v23 = 1;
    goto LABEL_9;
  }
  sub_223197FA4(&v16, *(void **)v3, *((_QWORD *)v3 + 1));
  v5 = *(_WORD *)v1[1];
  WORD4(v17) = v5;
  LODWORD(v18) = 0;
  if (!v23)
    goto LABEL_3;
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p[0]);
    v5 = WORD4(v17);
    v6 = v18;
  }
  else
  {
    v6 = 0;
  }
  *(_OWORD *)__p = v16;
  v20 = v17;
  v21 = v5;
  v22 = v6;
LABEL_9:
  v31 = 0;
  v32 = 0;
  v33 = 1;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v7 = sub_2241471F8();
  v8 = operator new(0x38uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC63F48;
  sub_223ED9D8C((uint64_t)(v8 + 3), (uint64_t)__p, (uint64_t)&v16, (uint64_t)&unk_224690515, (uint64_t)v7);
  v9 = v1[2];
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v8 + 3;
  *((_QWORD *)v9 + 1) = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if ((_BYTE)v18)
  {
    v13 = (__int128 *)*((_QWORD *)&v17 + 1);
    if (*((__int128 **)&v17 + 1) == &v16)
    {
      v14 = 4;
      v13 = &v16;
    }
    else
    {
      if (!*((_QWORD *)&v17 + 1))
        goto LABEL_20;
      v14 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
  }
LABEL_20:
  if (!v30)
    goto LABEL_26;
  if (v29 == v28)
  {
    v15 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_26;
    v15 = 5;
    v2 = v29;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v15))(v2);
LABEL_26:
  if (v23)
  {
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
  }
}

void sub_223ED9C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,char a31)
{
  _QWORD *v31;
  uint64_t v33;

  if (a31)
  {
    if (a30 == v31)
    {
      v33 = 4;
    }
    else
    {
      if (!a30)
        goto LABEL_7;
      v33 = 5;
      v31 = a30;
    }
    (*(void (**)(_QWORD *))(*v31 + 8 * v33))(v31);
  }
LABEL_7:
  if (a23)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223ED9CBC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 104))
  {
    v2 = *(_QWORD **)(a1 + 96);
    if (v2 == (_QWORD *)(a1 + 72))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 72);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

void sub_223ED9D3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC63F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223ED9D4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC63F48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223ED9D7C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_223ED9D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];
  _BYTE *v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  char v23;
  void *__p[2];
  uint64_t v25;
  __int16 v26;
  int v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE *v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  LOBYTE(__p[0]) = 0;
  v28 = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v25 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v26 = *(_WORD *)(a2 + 24);
    v27 = *(_DWORD *)(a2 + 32);
    v28 = 1;
  }
  v29 = *(_OWORD *)(a2 + 48);
  v30 = *(_QWORD *)(a2 + 64);
  v9 = v31;
  v31[0] = 0;
  v33 = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    v10 = *(_QWORD *)(a2 + 96);
    if (v10)
    {
      if (v10 == a2 + 72)
      {
        v32 = v31;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a2 + 72) + 24))(a2 + 72, v31);
      }
      else
      {
        v32 = *(_BYTE **)(a2 + 96);
        *(_QWORD *)(a2 + 96) = 0;
      }
    }
    else
    {
      v32 = 0;
    }
    v33 = 1;
  }
  v34 = *(_OWORD *)(a2 + 112);
  v35 = *(_QWORD *)(a2 + 128);
  v21[0] = 0;
  v23 = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    v11 = *(_QWORD *)(a3 + 24);
    if (v11)
    {
      if (v11 == a3)
      {
        v22 = v21;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a3 + 24))(a3, v21);
      }
      else
      {
        v22 = *(_BYTE **)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
      }
    }
    else
    {
      v22 = 0;
    }
    v23 = 1;
  }
  v18[0] = 0;
  v20 = 0;
  sub_224010F5C(a1, (uint64_t)__p, (uint64_t)v21, (uint64_t)v18, a5, 1);
  if (v20)
  {
    v12 = v19;
    if (v19 == v18)
    {
      v13 = 4;
      v12 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_23;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
LABEL_23:
  if (!v23)
    goto LABEL_29;
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_29;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_29:
  if (v33)
  {
    if (v32 == v31)
    {
      v16 = 4;
      goto LABEL_34;
    }
    if (v32)
    {
      v16 = 5;
      v9 = v32;
LABEL_34:
      (*(void (**)(_QWORD *))(*v9 + 8 * v16))(v9);
    }
  }
  if (v28 && SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_223EDA004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EDA0A0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*v2 + 40))(a2[3]);
  return result;
}

void sub_223EDA0E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC63FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223EDA0F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC63FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223EDA120(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 112))
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 288) + 8));
    if (*(_BYTE *)(v2 + 456))
      sub_22410F644(v2 + 416, 0, 0);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_223EDA1C0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  void *v16;
  uint64_t v17;
  void *__p;
  _DWORD *v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  _BYTE v25[24];
  _BYTE *v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_223EDA3FC((uint64_t)&__p, a3);
  v10 = *(_OWORD *)(a3 + 48);
  v22 = *(_OWORD *)(a3 + 32);
  v23 = v10;
  v25[0] = 0;
  v27 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v11 = *(_QWORD *)(a4 + 24);
    if (v11)
    {
      if (v11 == a4)
      {
        v26 = v25;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v25);
      }
      else
      {
        v26 = *(_BYTE **)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = 1;
  }
  sub_22410C258(a1, a2, (uint64_t)&__p, (uint64_t)v25, a5);
  if (v27)
  {
    v12 = v26;
    if (v26 == v25)
    {
      v13 = 4;
      v12 = v25;
      goto LABEL_13;
    }
    if (v26)
    {
      v13 = 5;
LABEL_13:
      (*(void (**)(void))(*v12 + 8 * v13))();
    }
  }
  if (v21)
  {
    v14 = __p;
    if (__p)
    {
      v15 = v20;
      v16 = __p;
      if (v20 != __p)
      {
        do
        {
          if (*((_BYTE *)v15 - 8))
          {
            v17 = *(v15 - 4);
            if ((_DWORD)v17 != -1)
              ((void (*)(char *, _DWORD *))off_24EC63F88[v17])(&v24, v15 - 12);
            *(v15 - 4) = -1;
          }
          *((_QWORD *)v15 - 102) = &off_24EC6A160;
          sub_223FF896C((uint64_t)(v15 - 200));
          v15 -= 204;
        }
        while (v15 != v14);
        v16 = __p;
      }
      v20 = v14;
      operator delete(v16);
    }
  }
  return a1;
}

void sub_223EDA390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

uint64_t sub_223EDA3FC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    sub_223EDA4F8((_QWORD *)a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_223EDA45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(_DWORD **)v13;
    if (*(_QWORD *)v13)
    {
      v16 = *(_DWORD **)(v13 + 8);
      v17 = *(_DWORD **)v13;
      if (v16 != v15)
      {
        do
        {
          if (*((_BYTE *)v16 - 8))
          {
            v18 = *(v16 - 4);
            if ((_DWORD)v18 != -1)
              ((void (*)(char *, _DWORD *))off_24EC63F88[v18])(&a13, v16 - 12);
            *(v16 - 4) = -1;
          }
          *((_QWORD *)v16 - 102) = &off_24EC6A160;
          sub_223FF896C((uint64_t)(v16 - 200));
          v16 -= 204;
        }
        while (v16 != v15);
        v17 = *(_DWORD **)v13;
      }
      *(_QWORD *)(v13 + 8) = v15;
      operator delete(v17);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223EDA4F8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xFAFAFAFAFAFAFAFBLL * (v6 >> 4);
    if (v7 >= 0x50505050505051)
      sub_22316E078();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[816 * v7];
    a1[1] = sub_223EDA65C(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_223EDA5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  void *v14;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;

  v13[1] = v14;
  v16 = *v13;
  if (*v13)
  {
    v17 = v13[1];
    v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        if (*((_BYTE *)v17 - 8))
        {
          v19 = *(v17 - 4);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, _DWORD *))off_24EC63F88[v19])(&a13, v17 - 12);
          *(v17 - 4) = -1;
        }
        *((_QWORD *)v17 - 102) = &off_24EC6A160;
        sub_223FF896C((uint64_t)(v17 - 200));
        v17 -= 204;
      }
      while (v17 != v16);
      v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EDA65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[2];

  v4 = a4;
  v10 = a4;
  if (a2 != a3)
  {
    v6 = a2 + 768;
    do
    {
      *(_QWORD *)v4 = &off_24EC6A160;
      sub_223EDA884(v4 + 16, v6 - 752);
      *(_BYTE *)(v4 + 768) = 0;
      *(_BYTE *)(v4 + 808) = 0;
      if (*(_BYTE *)(v6 + 40))
      {
        *(_BYTE *)(v4 + 768) = 0;
        *(_DWORD *)(v4 + 800) = -1;
        v8 = *(unsigned int *)(v6 + 32);
        if ((_DWORD)v8 != -1)
        {
          ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC64088[v8])(v11, v4 + 768, v6);
          *(_DWORD *)(v4 + 800) = v8;
        }
        *(_BYTE *)(v4 + 808) = 1;
      }
      v4 = v10 + 816;
      v10 += 816;
      v7 = v6 + 48;
      v6 += 816;
    }
    while (v7 != a3);
  }
  return v4;
}

void sub_223EDA760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v24 = *(unsigned int *)(v19 + 800);
  if ((_DWORD)v24 != -1)
    ((void (*)(char *, uint64_t))off_24EC63F88[v24])(&a19, v21);
  *(_DWORD *)(v19 + 800) = -1;
  *(_QWORD *)v19 = v22;
  sub_223FF896C(v20);
  sub_223EDA7C4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_223EDA7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223EDA7C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223EDA7C4(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(uint64_t **)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    for (i = *v4; v5 != i; v5 -= 816)
    {
      if (*(_BYTE *)(v5 - 8))
      {
        v7 = *(unsigned int *)(v5 - 16);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t))off_24EC63F88[v7])(&v8, v5 - 48);
        *(_DWORD *)(v5 - 16) = -1;
      }
      *(_QWORD *)(v5 - 816) = &off_24EC6A160;
      sub_223FF896C(v5 - 800);
    }
  }
  return a1;
}

uint64_t sub_223EDA884(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v20[2];
  _BYTE v21[2];
  _BYTE v22[2];
  _BYTE v23[2];
  _BYTE v24[2];
  _BYTE v25[2];
  _BYTE v26[2];

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    v4 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC63FF8[v4])(v20, a1 + 8, a2 + 8);
      *(_DWORD *)(a1 + 40) = v4;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v5 = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  sub_223EDB168((_BYTE *)(a1 + 72), (__int128 *)(a2 + 72));
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_BYTE *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 144) = -1;
    v6 = *(unsigned int *)(a2 + 144);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC64018[v6])(v21, a1 + 120, a2 + 120);
      *(_DWORD *)(a1 + 144) = v6;
    }
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    *(_BYTE *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 216) = -1;
    v7 = *(unsigned int *)(a2 + 216);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC64038[v7])(v22, a1 + 160, a2 + 160);
      *(_DWORD *)(a1 + 216) = v7;
    }
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    v9 = *(_QWORD *)(a2 + 240);
    v8 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 232) = &off_24EC6A3B8;
    *(_QWORD *)(a1 + 240) = v9;
    *(_QWORD *)(a1 + 248) = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *(_BYTE *)(a1 + 256) = 1;
  }
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    *(_BYTE *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 304) = -1;
    v12 = *(unsigned int *)(a2 + 304);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC63FF8[v12])(v23, a1 + 272, a2 + 272);
      *(_DWORD *)(a1 + 304) = v12;
    }
    *(_BYTE *)(a1 + 312) = 1;
  }
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    *(_BYTE *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 400) = -1;
    v13 = *(unsigned int *)(a2 + 400);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC64058[v13])(v24, a1 + 336, a2 + 336);
      *(_DWORD *)(a1 + 400) = v13;
    }
    *(_BYTE *)(a1 + 416) = 1;
  }
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  if (*(_BYTE *)(a2 + 576))
  {
    *(_BYTE *)(a1 + 448) = 0;
    *(_DWORD *)(a1 + 560) = -1;
    v14 = *(unsigned int *)(a2 + 560);
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC64078[v14])(v25, a1 + 448, a2 + 448);
      *(_DWORD *)(a1 + 560) = v14;
    }
    *(_BYTE *)(a1 + 576) = 1;
  }
  sub_223EDB650((_BYTE *)(a1 + 592), a2 + 592);
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  if (*(_BYTE *)(a2 + 680))
  {
    *(_BYTE *)(a1 + 640) = 0;
    *(_DWORD *)(a1 + 672) = -1;
    v15 = *(unsigned int *)(a2 + 672);
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC63FF8[v15])(v26, a1 + 640, a2 + 640);
      *(_DWORD *)(a1 + 672) = v15;
    }
    *(_BYTE *)(a1 + 680) = 1;
  }
  v16 = *(_OWORD *)(a2 + 688);
  v17 = *(_OWORD *)(a2 + 704);
  v18 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
  *(_OWORD *)(a1 + 704) = v17;
  *(_OWORD *)(a1 + 720) = v18;
  *(_OWORD *)(a1 + 688) = v16;
  return a1;
}

void sub_223EDABB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = *(unsigned int *)(v13 + 672);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t))off_24EC63FE8[v21])(&a13, v19);
  *(_DWORD *)(v13 + 672) = -1;
  sub_223EDADB0(v18);
  sub_223EDAE5C(v13 + 432);
  sub_223EDAEBC(v13 + 320);
  sub_223EDAF1C(v13 + 264);
  if (*(_BYTE *)(v13 + 256))
    sub_2241231D8(v17);
  sub_223EDAF7C(v16);
  sub_223EDAFDC(v15);
  sub_223EDB03C(v14);
  sub_223EDAF1C(v13);
  _Unwind_Resume(a1);
}

void sub_223EDAD9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223EDAF1C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223EDADB0(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v2 = *(void ***)a1;
      if (*(_QWORD *)a1)
      {
        v3 = *(void ***)(a1 + 8);
        v4 = *(void ***)a1;
        if (v3 == v2)
        {
LABEL_15:
          *(_QWORD *)(a1 + 8) = v2;
          operator delete(v4);
          return a1;
        }
        while (1)
        {
          if (*((_BYTE *)v3 - 16) && *((char *)v3 - 41) < 0)
          {
            operator delete(*(v3 - 8));
            if (*((_BYTE *)v3 - 72))
            {
LABEL_10:
              if (*((char *)v3 - 73) < 0)
                operator delete(*(v3 - 12));
            }
          }
          else if (*((_BYTE *)v3 - 72))
          {
            goto LABEL_10;
          }
          v3 -= 12;
          if (v3 == v2)
          {
            v4 = *(void ***)a1;
            goto LABEL_15;
          }
        }
      }
    }
  }
  return a1;
}

uint64_t sub_223EDAE5C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 144))
  {
    v2 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC64068[v2])(&v4, a1 + 16);
    *(_DWORD *)(a1 + 128) = -1;
  }
  return a1;
}

uint64_t sub_223EDAEBC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC64048[v2])(&v4, a1 + 16);
    *(_DWORD *)(a1 + 80) = -1;
  }
  return a1;
}

uint64_t sub_223EDAF1C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC63FE8[v2])(&v4, a1 + 8);
    *(_DWORD *)(a1 + 40) = -1;
  }
  return a1;
}

uint64_t sub_223EDAF7C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC64028[v2])(&v4, a1);
    *(_DWORD *)(a1 + 56) = -1;
  }
  return a1;
}

uint64_t sub_223EDAFDC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24EC64008[v2])(&v4, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t sub_223EDB03C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 40) && *(_BYTE *)(result + 32) && *(char *)(result + 23) < 0)
  {
    operator delete(*(void **)result);
    return v1;
  }
  return result;
}

void sub_223EDB08C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
  }
}

void sub_223EDB0A8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_223EDB0BC(int a1, _BYTE *__dst, __int128 *a3)
{
  __int128 v4;
  void *result;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a3 + 24))
  {
    if (*((char *)a3 + 23) < 0)
    {
      result = sub_223197FA4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v4 = *a3;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  return result;
}

void sub_223EDB118(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_223EDB13C(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_223197FA4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

_BYTE *sub_223EDB168(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[40] = 0;
  if (*((_BYTE *)a2 + 40))
  {
    *__dst = 0;
    __dst[32] = 0;
    if (*((_BYTE *)a2 + 32))
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v4 = *a2;
        *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)__dst = v4;
      }
      *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
      __dst[32] = 1;
    }
    __dst[40] = 1;
  }
  return __dst;
}

void sub_223EDB1EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32) && *(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  if (*(_BYTE *)(v1 + 40) && *(_BYTE *)(v1 + 32) && *(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_223EDB230(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_223EDB244(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_223EDB258(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_223197FA4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void *sub_223EDB284(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_223197FA4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_223EDB2B0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_223EDB2FC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_BYTE *sub_223EDB310(int a1, _BYTE *__dst, __int128 *a3)
{
  return sub_223EDB348(__dst, a3);
}

void *sub_223EDB31C(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_223197FA4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

_BYTE *sub_223EDB348(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[24] = 0;
    v5 = __dst + 24;
    __dst[48] = 0;
    if (!*((_BYTE *)a2 + 48))
      return __dst;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[24] = 0;
    v5 = __dst + 24;
    __dst[48] = 0;
    if (!*((_BYTE *)a2 + 48))
      return __dst;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_223197FA4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v7;
  }
  __dst[48] = 1;
  return __dst;
}

void sub_223EDB408(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_223EDB43C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
  }
}

void sub_223EDB458(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_223EDB46C(int a1, _BYTE *__dst, __int128 *a3)
{
  __int128 v5;
  void *result;
  unsigned __int128 *v7;
  unsigned __int128 v8;

  *__dst = 0;
  __dst[48] = 0;
  if (*((_BYTE *)a3 + 48))
  {
    if (*((char *)a3 + 23) < 0)
    {
      result = sub_223197FA4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v5 = *a3;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)__dst = v5;
    }
    v7 = (unsigned __int128 *)(a3 + 2);
    do
      v8 = __ldaxp(v7);
    while (__stlxp(v8, v7));
    *((_OWORD *)__dst + 2) = v8;
    __dst[48] = 1;
  }
  return result;
}

void sub_223EDB4E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_223EDB504(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_223197FA4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_223EDB530(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 96))
  {
    if (*(_BYTE *)(a2 + 80) && *(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
    }
  }
}

void sub_223EDB58C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_BYTE *sub_223EDB5A0(int a1, _BYTE *__dst, uint64_t a3)
{
  _BYTE *result;

  *__dst = 0;
  __dst[96] = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    result = sub_2231AB4E0(__dst, (__int128 *)a3);
    __dst[96] = 1;
  }
  return result;
}

void sub_223EDB5E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 96))
  {
    if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(_BYTE *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_223EDB624(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_223197FA4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

_BYTE *sub_223EDB650(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    sub_2231AB2A8((uint64_t)a1, a2);
    a1[32] = 1;
  }
  return a1;
}

void sub_223EDB698(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v3;
  void **v4;
  void **v5;

  if (*(_BYTE *)(v1 + 32))
  {
    if (*(_BYTE *)(v1 + 24))
    {
      v3 = *(void ***)v1;
      if (*(_QWORD *)v1)
      {
        v4 = *(void ***)(v1 + 8);
        v5 = *(void ***)v1;
        if (v4 != v3)
        {
          do
          {
            if (*((_BYTE *)v4 - 16) && *((char *)v4 - 41) < 0)
              operator delete(*(v4 - 8));
            if (*((_BYTE *)v4 - 72))
            {
              if (*((char *)v4 - 73) < 0)
                operator delete(*(v4 - 12));
            }
            v4 -= 12;
          }
          while (v4 != v3);
          v5 = *(void ***)v1;
        }
        *(_QWORD *)(v1 + 8) = v3;
        operator delete(v5);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223EDB71C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t sub_223EDB728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a3 + 24);
  if (result)
  {
    if (result == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a2);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a2 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

void sub_223EDB794(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223EDBD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223EDBD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223EDBD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

__n128 sub_223EDBD98(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  __n128 result;
  void **v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  void **v28;
  __int128 v29;
  void *__p[2];
  void *v31;
  void **v32[6];

  if (a1 != (void **)a2)
    sub_22333045C(a1, *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  if (a1 + 3 != (void **)(a2 + 72))
    sub_223330660(a1 + 3, *(char **)(a2 + 72), *(char **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  v27 = 0;
  v26 = 0uLL;
  v24 = a1;
  if (v5 != v4)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3)) > 0x555555555555555)
      sub_223323BA8();
    __p[1] = &v27;
    v28 = (void **)operator new(0x9249249249249250 * ((v5 - v4) >> 3));
    *(_QWORD *)&v29 = v28;
    *((_QWORD *)&v29 + 1) = v28;
    __p[0] = &v28[0xF24924924924924ALL * ((v5 - v4) >> 3)];
    sub_223EDCD28((uint64_t *)&v26, &v28);
    sub_223EDCE78((uint64_t)&v28);
    v4 = *(_QWORD *)(a2 + 48);
    v5 = *(_QWORD *)(a2 + 56);
  }
  for (; v4 != v5; v4 += 56)
  {
    v8 = *(void ***)v4;
    LODWORD(v29) = *(_DWORD *)(v4 + 8);
    v28 = v8;
    LODWORD(v8) = *(_DWORD *)(v4 + 20);
    *(_QWORD *)((char *)&v29 + 4) = *(_QWORD *)(v4 + 12);
    HIDWORD(v29) = (_DWORD)v8;
    sub_2233309B8(__p, (uint64_t *)(v4 + 32));
    v9 = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1) < (unint64_t)v27)
    {
      v6 = v28;
      *(_DWORD *)(*((_QWORD *)&v26 + 1) + 8) = v29;
      *(_QWORD *)v9 = v6;
      v7 = *(_QWORD *)((char *)&v29 + 4);
      *(_DWORD *)(v9 + 20) = HIDWORD(v29);
      *(_QWORD *)(v9 + 12) = v7;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_OWORD *)(v9 + 24) = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 40) = v31;
      *((_QWORD *)&v26 + 1) = v9 + 48;
    }
    else
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v26 + 1) - v26) >> 4);
      v11 = v10 + 1;
      if (v10 + 1 > 0x555555555555555)
        sub_223323BA8();
      if (0x5555555555555556 * (((uint64_t)v27 - (uint64_t)v26) >> 4) > v11)
        v11 = 0x5555555555555556 * (((uint64_t)v27 - (uint64_t)v26) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v27 - (uint64_t)v26) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v12 = 0x555555555555555;
      else
        v12 = v11;
      v32[4] = &v27;
      if (v12 > 0x555555555555555)
        sub_223174E94();
      v13 = (void **)operator new(48 * v12);
      v14 = &v13[6 * v10];
      *v14 = v28;
      v32[0] = v13;
      v32[1] = v14;
      *(_OWORD *)(v14 + 1) = v29;
      *(_OWORD *)(v14 + 3) = *(_OWORD *)__p;
      v14[5] = v31;
      __p[1] = 0;
      v31 = 0;
      __p[0] = 0;
      v32[2] = v14 + 6;
      v32[3] = &v13[6 * v12];
      sub_223EDCD28((uint64_t *)&v26, v32);
      v15 = *((_QWORD *)&v26 + 1);
      sub_223EDCE78((uint64_t)v32);
      v16 = (char *)__p[0];
      *((_QWORD *)&v26 + 1) = v15;
      if (__p[0])
      {
        v17 = (char *)__p[1];
        v18 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*(v17 - 8))
            {
              v19 = (_QWORD *)*((_QWORD *)v17 - 5);
              if (v19)
              {
                do
                {
                  v20 = (_QWORD *)*v19;
                  operator delete(v19);
                  v19 = v20;
                }
                while (v20);
              }
              v21 = (void *)*((_QWORD *)v17 - 7);
              *((_QWORD *)v17 - 7) = 0;
              if (v21)
                operator delete(v21);
            }
            v17 -= 80;
          }
          while (v17 != v16);
          v18 = __p[0];
        }
        __p[1] = v16;
        operator delete(v18);
      }
    }
  }
  v22 = v27;
  v25 = v26;
  v27 = 0;
  v26 = 0uLL;
  v28 = (void **)&v26;
  sub_223330370(&v28);
  sub_2233307D8(v24 + 6);
  *((_OWORD *)v24 + 3) = v25;
  v24[8] = v22;
  v29 = 0uLL;
  v28 = 0;
  v32[0] = (void **)&v28;
  sub_223330370(v32);
  return result;
}

void sub_223EDC10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  sub_223EDCE78((uint64_t)&a16);
  a23 = (void **)&a13;
  sub_223330370(&a23);
  _Unwind_Resume(a1);
}

void sub_223EDC138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *__p, char *a20,uint64_t a21,char *a22,char a23)
{
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;

  v24 = __p;
  if (__p)
  {
    v25 = a20;
    v26 = __p;
    if (a20 != __p)
    {
      do
      {
        if (*(v25 - 8))
        {
          v27 = (_QWORD *)*((_QWORD *)v25 - 5);
          if (v27)
          {
            do
            {
              v28 = (_QWORD *)*v27;
              operator delete(v27);
              v27 = v28;
            }
            while (v28);
          }
          v29 = (void *)*((_QWORD *)v25 - 7);
          *((_QWORD *)v25 - 7) = 0;
          if (v29)
            operator delete(v29);
        }
        v25 -= 80;
      }
      while (v25 != v24);
      v26 = __p;
    }
    a20 = v24;
    operator delete(v26);
  }
  a22 = &a13;
  sub_223330370((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_223EDC1EC(uint64_t a1, uint64_t a2, int a3)
{
  char v4;
  int *v6;
  int v7;
  void *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  size_t *v15;
  int v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[28];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  char v24;
  unint64_t v25;
  uint64_t v26;

  if (a3)
  {
    v4 = a3;
    v6 = (int *)(a1 + 232);
    if (*(_BYTE *)(a1 + 304))
    {
      v7 = *(_DWORD *)(a2 + 8);
      if (*v6 == v7)
      {
        v7 = *v6;
        if (*(_DWORD *)(a1 + 236) == *(_DWORD *)(a2 + 12))
        {
LABEL_32:
          *(_QWORD *)v19 = a2;
          *(_QWORD *)&v19[8] = a1 + 232;
          sub_223EE49B8((size_t *)v19);
          *(_BYTE *)(a1 + 488) = v4;
          return;
        }
      }
    }
    else
    {
      v7 = *(_DWORD *)(a2 + 8);
    }
    v24 = 0;
    if (*(_DWORD *)(a2 + 12))
      v9 = v7 == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a2 + 8);
    if (v9)
      v10 = 0;
    v11 = v10 << 32;
    if (!HIDWORD(v10))
      v11 = 0;
    v12 = v10 != 0;
    if ((_DWORD)v10)
      v13 = HIDWORD(v10) == 0;
    else
      v13 = 1;
    *(_QWORD *)v19 = v10;
    *(_QWORD *)&v19[8] = v11 | v12;
    v19[16] = 0;
    v19[24] = 0;
    if (v13)
      v10 = 0;
    v25 = v10;
    v26 = v11 | v12;
    if ((HIDWORD(v11) & (HIDWORD(v11) - 1)) != 0)
      v14 = 1;
    else
      v14 = HIDWORD(v11);
    v15 = sub_223316930((size_t *)&v20, &v25, (void **)&v26, 1, (void **)&v24, 1, v14);
    v23 = 1;
    v16 = *(unsigned __int8 *)(a1 + 304);
    *(_OWORD *)v6 = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 244) = *(_OWORD *)&v19[12];
    if (v16)
    {
      *(_OWORD *)(a1 + 288) = v22;
      *(_QWORD *)(a1 + 264) = v20;
      v17 = *(void **)(a1 + 272);
      if (v17)
        free(v17);
      v18 = v21;
      *(_QWORD *)(a1 + 272) = *((_QWORD *)&v20 + 1);
      *(_QWORD *)(a1 + 280) = v18;
    }
    else
    {
      *(_OWORD *)(a1 + 264) = v20;
      *(_QWORD *)(a1 + 280) = v21;
      *v15 = 0;
      v15[1] = 0;
      *(_OWORD *)(a1 + 288) = v22;
      *(_BYTE *)(a1 + 304) = 1;
    }
    goto LABEL_32;
  }
  if (*(_BYTE *)(a1 + 304))
  {
    v8 = *(void **)(a1 + 272);
    if (v8)
      free(v8);
    *(_QWORD *)(a1 + 272) = 0;
    *(_BYTE *)(a1 + 304) = 0;
  }
}

void sub_223EDC390(uint64_t *a1@<X0>, void (*a2)(__int128 *__return_ptr, uint64_t)@<X1>, int64x2_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  void *v24;
  int64x2_t v25;
  int64x2_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *__p[2];
  uint64_t v34;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5 - *a1;
  if (v5 == *a1)
  {
    v8 = 0;
LABEL_29:
    v25 = vdupq_n_s64((unint64_t)v8);
    goto LABEL_30;
  }
  v7 = 0x8F5C28F5C28F5C29 * (v6 >> 3);
  if (v7 > 0x2E8BA2E8BA2E8BALL)
    sub_223323BA8();
  v8 = operator new(0x47AE147AE147AE18 * (v6 >> 3));
  v6 = (uint64_t)v8 + 88 * v7;
  v27.i64[0] = (uint64_t)v8;
  v27.i64[1] = (uint64_t)v8;
  v28 = (char *)v6;
  if (v5 == v4)
    goto LABEL_29;
  do
  {
    a2(&v29, v4);
    v12 = (char *)v27.i64[1];
    if (v27.i64[1] < (unint64_t)v28)
    {
      v9 = v29;
      v10 = v30;
      v11 = v32;
      *(_OWORD *)(v27.i64[1] + 32) = v31;
      *(_OWORD *)(v27.i64[1] + 48) = v11;
      *(_OWORD *)v27.i64[1] = v9;
      *(_OWORD *)(v27.i64[1] + 16) = v10;
      *(_OWORD *)(v27.i64[1] + 72) = 0uLL;
      *(_QWORD *)(v27.i64[1] + 64) = 0;
      *(_OWORD *)(v27.i64[1] + 64) = *(_OWORD *)__p;
      *(_QWORD *)(v27.i64[1] + 80) = v34;
      v27.i64[1] += 88;
    }
    else
    {
      v13 = 0x2E8BA2E8BA2E8BA3 * ((v27.i64[1] - v27.i64[0]) >> 3) + 1;
      if (v13 > 0x2E8BA2E8BA2E8BALL)
        sub_223323BA8();
      if (0x5D1745D1745D1746 * ((uint64_t)&v28[-v27.i64[0]] >> 3) > v13)
        v13 = 0x5D1745D1745D1746 * ((uint64_t)&v28[-v27.i64[0]] >> 3);
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v28[-v27.i64[0]] >> 3)) >= 0x1745D1745D1745DLL)
        v14 = 0x2E8BA2E8BA2E8BALL;
      else
        v14 = v13;
      if (v14 > 0x2E8BA2E8BA2E8BALL)
        sub_223174E94();
      v15 = (char *)operator new(88 * v14);
      v16 = v30;
      v17 = &v15[8 * ((v27.i64[1] - v27.i64[0]) >> 3)];
      *(_OWORD *)v17 = v29;
      *((_OWORD *)v17 + 1) = v16;
      v18 = v32;
      *((_OWORD *)v17 + 2) = v31;
      *((_OWORD *)v17 + 3) = v18;
      *((_OWORD *)v17 + 4) = *(_OWORD *)__p;
      *((_QWORD *)v17 + 10) = v34;
      __p[1] = 0;
      v34 = 0;
      v19 = v17 + 88;
      __p[0] = 0;
      if (v27.i64[1] == v27.i64[0])
      {
        v27.i64[0] = (uint64_t)&v15[8 * ((v27.i64[1] - v27.i64[0]) >> 3)];
        v28 = &v15[88 * v14];
      }
      else
      {
        do
        {
          v20 = *(_OWORD *)(v12 - 88);
          v21 = *(_OWORD *)(v12 - 72);
          v22 = *(_OWORD *)(v12 - 56);
          *(_OWORD *)(v17 - 40) = *(_OWORD *)(v12 - 40);
          *(_OWORD *)(v17 - 56) = v22;
          *(_OWORD *)(v17 - 72) = v21;
          *(_OWORD *)(v17 - 88) = v20;
          *(_OWORD *)(v17 - 24) = *(_OWORD *)(v12 - 24);
          *((_QWORD *)v17 - 1) = *((_QWORD *)v12 - 1);
          v17 -= 88;
          *((_QWORD *)v12 - 3) = 0;
          *((_QWORD *)v12 - 2) = 0;
          *((_QWORD *)v12 - 1) = 0;
          v12 -= 88;
        }
        while (v12 != (char *)v27.i64[0]);
        v23 = (char *)v27.i64[1];
        v12 = (char *)v27.i64[0];
        v27.i64[0] = (uint64_t)v17;
        v28 = &v15[88 * v14];
        while (v23 != v12)
        {
          v24 = (void *)*((_QWORD *)v23 - 3);
          if (v24)
          {
            *((_QWORD *)v23 - 2) = v24;
            operator delete(v24);
          }
          v23 -= 88;
        }
      }
      if (v12)
        operator delete(v12);
      v27.i64[1] = (uint64_t)v19;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v4 += 200;
  }
  while (v4 != v5);
  v25 = v27;
  v6 = (uint64_t)v28;
LABEL_30:
  *a3 = v25;
  a3[1].i64[0] = v6;
}

void sub_223EDC668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_223EDC8F4(&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_223EDC6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *__p;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  LODWORD(v24) = 1022739087;
  v25 = 0;
  v26 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  v27 = v4;
  v5 = 0.0;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  if (v6 == v7)
  {
    v8 = 0;
    v20 = 0uLL;
    v21 = 0;
  }
  else
  {
    do
    {
      sub_223EDCF60(&__p, (uint64_t)&v24, (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3, *(float32x2_t **)v6, v5);
      v10 = (char *)__p;
      if (__p)
      {
        v11 = v23;
        v9 = __p;
        if (v23 != __p)
        {
          do
          {
            v12 = *((_QWORD *)v11 - 1);
            if (v12)
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
            v11 -= 16;
          }
          while (v11 != v10);
          v9 = __p;
        }
        v23 = v10;
        operator delete(v9);
      }
      v6 += 24;
    }
    while (v6 != v7);
    v8 = v25;
    v13 = v26;
    v20 = 0uLL;
    v21 = 0;
    if (v26)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      v18 = v8;
      v19 = v13;
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v14 = 0;
      goto LABEL_15;
    }
  }
  v13 = 0;
  v18 = v8;
  v19 = 0;
  v14 = 1;
LABEL_15:
  sub_223EDF6C4(&v18, (unint64_t *)&v20);
  if ((v14 & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  }
  v15 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 32)), *(float64x2_t *)(a1 + 48));
  *(float32x4_t *)a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a1), *(float64x2_t *)(a1 + 16));
  *(float32x4_t *)(a2 + 16) = v15;
  v16 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 96)), *(float64x2_t *)(a1 + 112));
  *(float32x4_t *)(a2 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 64)), *(float64x2_t *)(a1 + 80));
  *(float32x4_t *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 80) = v21;
  return sub_223EDFA64(&v24);
}

void sub_223EDC874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  if (__p)
  {
    operator delete(__p);
    sub_223EDFA64(&a17);
    _Unwind_Resume(a1);
  }
  sub_223EDFA64(&a17);
  _Unwind_Resume(a1);
}

void **sub_223EDC8F4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223EDC964(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  int v7;
  _QWORD *v8;
  __n128 v9;
  float32x2_t v10;
  float32x2_t v11;
  __n128 v12;
  __n128 v13;
  char *v14;
  char *v15;
  unsigned int i;
  unsigned int v17;
  float32x2_t v18;
  float32x4_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  float32x4_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  int v37;
  __n128 v38;
  __n128 v39;
  float32x2_t v40;
  char *__p;
  char *v42;
  _BYTE v43[20];
  __int32 v44;
  float32x2_t v45;
  __int32 v46;
  _BYTE v47[48];
  __int128 v48;
  uint64_t v49;
  simd_float3x3 v50;

  v49 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(a2 + 8);
  v37 = *(_DWORD *)(a2 + 12);
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  *(_QWORD *)&v47[4] = 0;
  *(_QWORD *)&v47[20] = 0;
  *(_QWORD *)&v47[28] = 0x3F80000000000000;
  v50.columns[1].i64[0] = v8[6];
  *(_QWORD *)v47 = v8[5];
  *(_QWORD *)&v47[12] = v50.columns[1].i64[0];
  *(_QWORD *)&v47[24] = v8[7];
  v50.columns[0].i64[0] = *(_QWORD *)&v47[24];
  v9 = sub_22322BB84((uint64_t)v47, (uint64_t)v43, v50);
  __p = 0;
  v42 = 0;
  if (v37 * v7)
  {
    v14 = (char *)operator new(12 * (v37 * v7));
    v15 = &v14[12 * v37 * v7];
    __p = v14;
    v42 = v15;
    if (!v37)
      goto LABEL_30;
  }
  else
  {
    v15 = 0;
    v14 = 0;
    if (!v37)
    {
LABEL_30:
      v30 = v14;
      goto LABEL_32;
    }
  }
  if (!v7)
    goto LABEL_30;
  v36 = a4;
  for (i = 0; i != v37; ++i)
  {
    v17 = 0;
    v9.n128_f32[0] = (float)i;
    v40 = (float32x2_t)v9.n128_u64[0];
    v18 = (float32x2_t)vdup_lane_s32((int32x2_t)v9.n128_u64[0], 0);
    do
    {
      while (1)
      {
        v13.n128_f32[0] = (float)v17;
        v12.n128_u32[0] = *(_DWORD *)(*(_QWORD *)a2 + 4 * (*(_DWORD *)(a2 + 16) * v17 + *(_DWORD *)(a2 + 20) * i));
        if (v14 >= v42)
          break;
        v10.i32[0] = v44;
        v11.i32[0] = v46;
        *(float32x2_t *)v19.f32 = vadd_f32(v45, vmla_f32(vmul_n_f32(*(float32x2_t *)v43, v13.n128_f32[0]), v18, *(float32x2_t *)&v43[12]));
        *(float32x2_t *)&v19.u32[2] = vadd_f32(v11, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v43, *(int8x16_t *)v43, 8uLL), (float32x2_t)v13.n128_u64[0]), v40, v10));
        v9 = (__n128)vmulq_n_f32(v19, v12.n128_f32[0]);
        *((_DWORD *)v14 + 2) = v9.n128_u32[2];
        *(_QWORD *)v14 = v9.n128_u64[0];
        v14 += 12;
        if (++v17 == v7)
          goto LABEL_7;
      }
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v14 - __p) >> 2);
      v21 = v20 + 1;
      if (v20 + 1 > 0x1555555555555555)
        sub_22316E078();
      if (0x5555555555555556 * ((v42 - __p) >> 2) > v21)
        v21 = 0x5555555555555556 * ((v42 - __p) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v42 - __p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v22 = 0x1555555555555555;
      else
        v22 = v21;
      if (v22)
      {
        v38 = v13;
        v39 = v12;
        if (v22 > 0x1555555555555555)
          sub_223174E94();
        v23 = (char *)operator new(12 * v22);
        v13 = v38;
        v12 = v39;
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[4 * ((v14 - __p) >> 2)];
      v10.i32[0] = v44;
      v11.i32[0] = v46;
      *(float32x2_t *)v25.f32 = vadd_f32(v45, vmla_f32(vmul_n_f32(*(float32x2_t *)v43, v13.n128_f32[0]), v18, *(float32x2_t *)&v43[12]));
      *(float32x2_t *)&v25.u32[2] = vadd_f32(v11, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v43, *(int8x16_t *)v43, 8uLL), (float32x2_t)v13.n128_u64[0]), v40, v10));
      v9 = (__n128)vmulq_n_f32(v25, v12.n128_f32[0]);
      *((_DWORD *)v24 + 2) = v9.n128_u32[2];
      *(_QWORD *)v24 = v9.n128_u64[0];
      if (v14 == __p)
      {
        v29 = v14;
        v14 = v24 + 12;
        __p = &v23[12 * v20];
        v42 = &v23[12 * v22];
        if (v29)
          goto LABEL_25;
      }
      else
      {
        v26 = &v23[4 * ((v14 - __p) >> 2)];
        do
        {
          v27 = *(_QWORD *)(v14 - 12);
          v14 -= 12;
          v28 = *((_DWORD *)v14 + 2);
          *(_QWORD *)(v26 - 12) = v27;
          v26 -= 12;
          *((_DWORD *)v26 + 2) = v28;
        }
        while (v14 != __p);
        v29 = __p;
        v14 = v24 + 12;
        __p = v26;
        v42 = &v23[12 * v22];
        if (v29)
LABEL_25:
          operator delete(v29);
      }
      ++v17;
    }
    while (v17 != v7);
LABEL_7:
    ;
  }
  v30 = __p;
  v15 = v42;
  a4 = v36;
LABEL_32:
  v31 = a4[1];
  *(_OWORD *)v47 = *a4;
  *(_OWORD *)&v47[16] = v31;
  v32 = a4[3];
  *(_OWORD *)&v47[32] = a4[2];
  v48 = v32;
  v33 = *(void **)(a1 + 144);
  if (v33)
  {
    *(_QWORD *)(a1 + 152) = v33;
    operator delete(v33);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_QWORD *)(a1 + 144) = v30;
  *(_QWORD *)(a1 + 152) = v14;
  *(_QWORD *)(a1 + 160) = v15;
  v34 = *(_OWORD *)&v47[16];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)v47;
  *(_OWORD *)(a1 + 184) = v34;
  v35 = v48;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v47[32];
  *(_OWORD *)(a1 + 216) = v35;
}

void sub_223EDCCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;

  if (v21)
  {
    operator delete(v21);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223EDCD28(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = *(_QWORD *)(v4 + v7 - 48);
      *(_DWORD *)(v8 - 40) = *(_DWORD *)(v4 + v7 - 40);
      *(_QWORD *)(v8 - 48) = v9;
      v10 = *(_QWORD *)(v4 + v7 - 36);
      *(_DWORD *)(v8 - 28) = *(_DWORD *)(v4 + v7 - 28);
      *(_QWORD *)(v8 - 36) = v10;
      result = sub_2233309B8((_QWORD *)(v6 + v7 - 24), (uint64_t *)(v4 + v7 - 24));
      v7 -= 48;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v11 = *v3;
  *v3 = v6;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_223EDCDF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  if (v3)
  {
    do
    {
      v6 = *(_QWORD *)(v2 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v2 + 32);
        v5 = *(void **)(v2 + 24);
        if (v7 != v6)
        {
          do
          {
            if (*(_BYTE *)(v7 - 8))
            {
              v8 = *(_QWORD **)(v7 - 40);
              if (v8)
              {
                do
                {
                  v9 = (_QWORD *)*v8;
                  operator delete(v8);
                  v8 = v9;
                }
                while (v9);
              }
              v10 = *(void **)(v7 - 56);
              *(_QWORD *)(v7 - 56) = 0;
              if (v10)
                operator delete(v10);
            }
            v7 -= 80;
          }
          while (v7 != v6);
          v5 = *(void **)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v6;
        operator delete(v5);
      }
      v2 += 48;
    }
    while (v2 != v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EDCE78(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      while (1)
      {
        v4 = i - 48;
        *(_QWORD *)(a1 + 16) = i - 48;
        v5 = *(_QWORD *)(i - 24);
        if (v5)
          break;
        i -= 48;
        if (v4 == v2)
          goto LABEL_15;
      }
      v6 = *(_QWORD *)(i - 16);
      v7 = *(void **)(i - 24);
      if (v6 != v5)
        break;
      *(_QWORD *)(i - 16) = v5;
      operator delete(v7);
      i = *(_QWORD *)(a1 + 16);
      if (i == v2)
        goto LABEL_15;
    }
    do
    {
      if (*(_BYTE *)(v6 - 8))
      {
        v8 = *(_QWORD **)(v6 - 40);
        if (v8)
        {
          do
          {
            v9 = (_QWORD *)*v8;
            operator delete(v8);
            v8 = v9;
          }
          while (v9);
        }
        v10 = *(void **)(v6 - 56);
        *(_QWORD *)(v6 - 56) = 0;
        if (v10)
          operator delete(v10);
      }
      v6 -= 80;
    }
    while (v6 != v5);
    v11 = *(void **)(i - 24);
    *(_QWORD *)(i - 16) = v5;
    operator delete(v11);
  }
LABEL_15:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_223EDCF60(_QWORD *a1, uint64_t a2, unint64_t a3, float32x2_t *a4, double a5)
{
  float v9;
  float v10;
  float *v11;
  float v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void **v23;
  float32x2_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  void **v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  __int16 v35;
  const void *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  void **v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  void *v67;
  double v68;
  double v69;
  __n128 v70;
  char v71;
  void *v72;
  __n128 v73;
  __n128 v74;
  float v75;
  float *v76;
  float v77;
  uint64_t v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float *v83;
  BOOL v86;
  void **v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  int64_t v104;
  char *v105;
  void *v106;
  void *v107;
  float v108;
  BOOL v109;
  float v110;
  float v111;
  unint64_t v112;
  char *v113;
  void *v114;
  void *v115;
  char *v116;
  char *v117;
  char *v118;
  unint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  unint64_t v122;
  char *v123;
  int64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  unint64_t v128;
  char *v129;
  void *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  unint64_t v138;
  int64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  __int128 *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  char *v165;
  uint64_t *v166;
  uint64_t v167;
  void *v168;
  int64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  int64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 *v178;
  _OWORD *v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  void **v186;
  uint64_t v187;
  unint64_t v188;
  _BYTE *v189;
  unint64_t v190;
  char *v191;
  int64_t v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  __int128 *v200;
  _OWORD *v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t *v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void **v224;
  _QWORD *v225;
  void **v226;
  __int128 v227;
  unint64_t v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  __int128 *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  void *v262;
  char v263;
  float32x2_t v264;
  float32x2_t v265;
  float32x2_t v266;
  int8x8_t v267;
  int8x8_t v268;
  BOOL v269;
  BOOL v270;
  BOOL v271;
  uint64_t *v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void **v277;
  void **v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void **v282;
  void *v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void **v288;
  int64_t v289;
  void **v290;
  unint64_t v291;
  void **v292;
  void *v293;
  void *v294;
  unint64_t v295;
  void **v296;
  void *v297;
  void **v298;
  void **v299;
  void *v300;
  unint64_t v301;
  void **v302;
  void *v303;
  unint64_t v304;
  _BYTE *v305;
  unint64_t v306;
  void **v307;
  int64_t v308;
  unint64_t v309;
  void **v310;
  void **v311;
  unint64_t v312;
  void **v313;
  void **v314;
  void **v315;
  void *v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  void **v320;
  unint64_t v321;
  int64_t v322;
  unint64_t v323;
  char *v324;
  void **v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  __int128 *v329;
  char *v330;
  uint64_t v331;
  __int128 v332;
  uint64_t v333;
  unint64_t v334;
  char *v335;
  unint64_t v336;
  void **v337;
  char *v338;
  void **v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  __int128 *v343;
  char *v344;
  uint64_t v345;
  __int128 v346;
  uint64_t v347;
  void **v348;
  char *v349;
  void *v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void **v355;
  int64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  __int128 *v361;
  _OWORD *v362;
  uint64_t v363;
  __int128 v364;
  void *v365;
  char *v366;
  unint64_t v367;
  char *v368;
  char *v369;
  unint64_t v370;
  _BYTE *v371;
  unint64_t v372;
  char *v373;
  int64_t v374;
  unint64_t v375;
  char *v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void **v381;
  __int128 *v382;
  _OWORD *v383;
  uint64_t v384;
  __int128 v385;
  uint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  float *v400;
  uint64_t v401;
  __n128 v402;
  char v403;
  uint64_t *v404;
  uint64_t v405;
  void *v406[2];
  char *v407;
  __int128 v408;
  uint64_t v409;
  uint64_t *v410;
  uint64_t *v411;
  uint64_t v412;
  void *__p;
  __n128 v414;
  _BYTE v415[24];
  float32x2_t v416;
  void **v417;
  __int128 v418;
  __int128 v419;
  _OWORD v420[2];
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  void **v424;
  void **v425;
  __int128 v426;
  char *v427;
  uint64_t v428;

  v428 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    goto LABEL_7;
  LODWORD(a5) = *(_DWORD *)a2;
  v9 = 0.0;
  v10 = (float)(*(float *)&a5 * *(float *)&a5) * 0.0;
  if (a3 >= 3)
  {
    v11 = (float *)&a4[1] + 1;
    v12 = 0.0;
    v13 = a3 - 1;
    v14 = a4->f32[1];
    v15 = a4->f32[0];
    do
    {
      v16 = *v11;
      v17 = v12 - (float)(v15 * *v11);
      v15 = *(v11 - 1);
      v12 = v17 + (float)(v14 * v15);
      v11 += 2;
      v14 = v16;
      --v13;
    }
    while (v13);
    v9 = (float)((float)(v12 - (float)(a4->f32[1] * a4[a3 - 1].f32[0])) + (float)(a4->f32[0] * a4[a3 - 1].f32[1])) * 0.5;
  }
  if (fabsf(v9) < v10)
  {
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  if (sub_223F35794(a3, a4, *(int32x2_t *)&a5))
  {
    sub_223EDFBD4((uint64_t **)&v419, a2, (float *)a4, *(int32x2_t *)&v18);
    sub_223EE078C(a1, (uint64_t)&v419, 1uLL);
    if (*((_QWORD *)&v419 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v419 + 1) + 40))(*((_QWORD *)&v419 + 1));
    return;
  }
  v400 = (float *)a2;
  v397 = a1;
  if (a3 != 2)
  {
    v27 = *(_QWORD *)(a2 + 16);
    if (v27)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v27 + 24))(*(_QWORD *)(a2 + 16));
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27) == 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    }
    else
    {
      v28 = 1;
    }
    sub_223EE08D8(a2, a3, (uint64_t *)a4, v18, v19, v20, v21, v22);
    *v397 = 0;
    v397[1] = 0;
    v397[2] = 0;
    v410 = 0;
    v411 = 0;
    v412 = 0;
    v31 = *(void ***)(a2 + 16);
    v423 = *(_QWORD *)(a2 + 8);
    v424 = v31;
    if (v31)
      (*((void (**)(void **))*v31 + 3))(v31);
    LOWORD(v425) = !v28;
    v427 = 0;
    v426 = 0uLL;
    if (((8 * a3) & 0x8000000000000000) != 0)
      sub_22316E078();
    *(_QWORD *)&v426 = operator new(8 * a3);
    v427 = (char *)(v426 + 8 * ((uint64_t)(8 * a3) >> 3));
    memcpy((void *)v426, a4, 8 * a3);
    *((_QWORD *)&v426 + 1) = v426 + 8 * a3;
    v420[1] = 0u;
    v32 = operator new(8uLL);
    v33 = operator new(0xFF0uLL);
    *v32 = v33;
    *(_QWORD *)&v419 = v32;
    *((_QWORD *)&v419 + 1) = v32;
    *(_QWORD *)&v420[0] = v32 + 1;
    *((_QWORD *)&v420[0] + 1) = v32 + 1;
    v34 = v424;
    *v33 = v423;
    v33[1] = v34;
    if (v34)
      (*((void (**)(void **))*v34 + 3))(v34);
    v35 = (__int16)v425;
    v33[3] = 0;
    *((_WORD *)v33 + 8) = v35;
    v33[4] = 0;
    v33[5] = 0;
    v36 = (const void *)v426;
    v37 = *((_QWORD *)&v426 + 1) - v426;
    if (*((_QWORD *)&v426 + 1) != (_QWORD)v426)
    {
      if (v37 < 0)
        sub_22316E078();
      v38 = (char *)operator new(*((_QWORD *)&v426 + 1) - v426);
      v33[3] = v38;
      v33[4] = v38;
      v33[5] = &v38[8 * (v37 >> 3)];
      memcpy(v38, v36, v37 & 0xFFFFFFFFFFFFFFF8);
      v33[4] = &v38[v37 & 0xFFFFFFFFFFFFFFF8];
    }
    *(_OWORD *)v406 = v419;
    v407 = *(char **)&v420[0];
    v39 = *(_OWORD *)((char *)v420 + 8);
    v419 = 0u;
    memset(v420, 0, sizeof(v420));
    v408 = v39;
    v409 = *((_QWORD *)&v420[1] + 1);
    sub_223EE10A4((uint64_t)&v419);
    if ((_QWORD)v426)
    {
      *((_QWORD *)&v426 + 1) = v426;
      operator delete((void *)v426);
    }
    if (v424)
      (*((void (**)(void **))*v424 + 5))(v424);
    if (!v409)
    {
      v216 = 0;
      v215 = 0;
      v220 = 1;
      goto LABEL_255;
    }
    v40 = *((_QWORD *)&v408 + 1);
LABEL_37:
    v41 = *((_QWORD *)v406[1] + v40 / 0x55);
    v42 = v40 % 0x55;
    v43 = (unint64_t *)(v41 + 48 * (v40 % 0x55));
    v45 = *v43;
    v44 = (void **)v43[1];
    v423 = *v43;
    v424 = v44;
    if (v44)
      (*((void (**)(void **))*v44 + 3))(v44);
    v46 = v41 + 48 * v42;
    LOWORD(v425) = *(_WORD *)(v46 + 16);
    v427 = 0;
    v426 = 0uLL;
    v48 = *(_BYTE **)(v46 + 24);
    v47 = *(_BYTE **)(v46 + 32);
    v49 = v47 - v48;
    if (v47 != v48)
    {
      if (v49 < 0)
        sub_22316E078();
      v50 = (char *)operator new(v47 - v48);
      *(_QWORD *)&v426 = v50;
      v427 = &v50[8 * (v49 >> 3)];
      v51 = v49 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v50, v48, v51);
      *((_QWORD *)&v426 + 1) = &v50[v51];
    }
    v52 = (_QWORD *)(**(_QWORD **)(v45 + 8) + 112 * *(_QWORD *)v45);
    v53 = v52[3];
    if (!v53 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 48))(v53))
    {
      v54 = v52[5];
      if (!v54 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 48))(v54))
      {
        v55 = v52[7];
        if (!v55 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 48))(v55))
        {
          v56 = v52[9];
          if (!v56 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 48))(v56))
          {
            if ((_BYTE)v425
              || (v57 = **(_QWORD **)(v423 + 8) + 112 * *(_QWORD *)v423,
                  (float)(*(float *)(v57 + 88) - *(float *)(v57 + 80)) < (float)(*v400 * 1.25)))
            {
              sub_223EE31B4((uint64_t)v397, v423, (uint64_t)v424);
              goto LABEL_234;
            }
          }
        }
      }
    }
    v58 = **(_QWORD **)(v423 + 8) + 112 * *(_QWORD *)v423;
    v60 = *(_QWORD *)(v58 + 16);
    v59 = *(_QWORD *)(v58 + 24);
    v61 = (_QWORD *)(v58 + 16);
    *(_QWORD *)&v419 = v60;
    *((_QWORD *)&v419 + 1) = v59;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
    v62 = v61[3];
    *(_QWORD *)&v420[0] = v61[2];
    *((_QWORD *)&v420[0] + 1) = v62;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62);
    v63 = v61[5];
    *(_QWORD *)&v420[1] = v61[4];
    *((_QWORD *)&v420[1] + 1) = v63;
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63);
    v64 = v61[7];
    v421 = v61[6];
    v422 = v64;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
    v65 = 0;
    v66 = (void **)&v419;
    while (1)
    {
      v67 = v66[1];
      if (v67 && (*(uint64_t (**)(void *))(*(_QWORD *)v67 + 48))(v67))
      {
        v418 = *(_OWORD *)(**((_QWORD **)*v66 + 1) + 112 * *(_QWORD *)*v66 + 80);
        v71 = 1;
        if (BYTE1(v425))
          goto LABEL_81;
      }
      else
      {
        sub_223F35620((float32x2_t *)(**(_QWORD **)(v423 + 8) + 112 * *(_QWORD *)v423 + 80), v65, (float32x2_t *)&v418);
        v71 = 0;
        if (BYTE1(v425))
        {
LABEL_81:
          v72 = 0;
          v74 = 0uLL;
LABEL_82:
          v86 = 1;
          goto LABEL_83;
        }
      }
      sub_223F274F4((uint64_t)(*((_QWORD *)&v426 + 1) - v426) >> 3, (char *)v426, (float32x2_t *)&v418, (uint64_t *)&__p, v68, v69, v70);
      v72 = __p;
      v73 = v414;
      v74 = v414;
      v75 = 0.0;
      if (v414.n128_u64[0] - (unint64_t)__p >= 0x18)
      {
        v76 = (float *)((char *)__p + 12);
        v77 = 0.0;
        v78 = ((uint64_t)(v414.n128_u64[0] - (_QWORD)__p) >> 3) - 1;
        v79 = *((float *)__p + 1);
        v80 = *(float *)__p;
        do
        {
          v81 = *v76;
          v82 = v77 - (float)(v80 * *v76);
          v80 = *(v76 - 1);
          v77 = v82 + (float)(v79 * v80);
          v76 += 2;
          v79 = v81;
          --v78;
        }
        while (v78);
        v83 = (float *)((char *)__p + 8 * ((uint64_t)(v414.n128_u64[0] - (_QWORD)__p) >> 3) - 8);
        v75 = (float)((float)(v77 - (float)(*((float *)__p + 1) * *v83)) + (float)(*(float *)__p * v83[1])) * 0.5;
      }
      v73.n128_f32[0] = fabsf(v75);
      if (v75 == 0.0 || v73.n128_f32[0] <= 0.000001 || v73.n128_f32[0] < v10)
      {
        if (__p)
          operator delete(__p);
        goto LABEL_62;
      }
      v108 = (float)(*((float *)&v418 + 2) - *(float *)&v418) * (float)(*((float *)&v418 + 3) - *((float *)&v418 + 1));
      v109 = v108 < v73.n128_f32[0];
      if (v108 == v73.n128_f32[0])
        goto LABEL_82;
      v110 = v108 - v73.n128_f32[0];
      v111 = v73.n128_f32[0] - v108;
      if (!v109)
        v111 = v110;
      v86 = v111 <= 0.000001;
LABEL_83:
      v402 = v74;
      if (BYTE1(v425) == (v72 != (void *)v74.n128_u64[0])
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/include_private/ACV/SurfaceDetection/Geometry/QuadTree.h", 815, (uint64_t)"!intersection.empty() ^ fullyContained", 38, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      if ((v71 & 1) == 0)
      {
        v87 = v424;
        v416 = (float32x2_t)v423;
        v417 = v424;
        if (v424)
          (*((void (**)(void **))*v424 + 3))(v424);
        sub_223EE1D0C((uint64_t **)&__p, (uint64_t)v400, (uint64_t **)&v416, &v418, v65);
        v89 = __p;
        v88 = (void *)v414.n128_u64[0];
        if (v414.n128_u64[0])
          (*(void (**)(unint64_t))(*(_QWORD *)v414.n128_u64[0] + 24))(v414.n128_u64[0]);
        v90 = v66[1];
        *v66 = v89;
        v66[1] = v88;
        if (v90)
          (*(void (**)(void *))(*(_QWORD *)v90 + 40))(v90);
        if (v88)
          (*(void (**)(void *))(*(_QWORD *)v88 + 40))(v88);
        if (v87)
          (*((void (**)(void **))*v87 + 5))(v87);
      }
      v91 = v66[1];
      __p = *v66;
      v414.n128_u64[0] = (unint64_t)v91;
      if (v91)
        (*(void (**)(void *))(*(_QWORD *)v91 + 24))(v91);
      v93 = (char *)v406[1];
      v92 = v407;
      v94 = v407 - (char *)v406[1];
      v95 = (v407 - (char *)v406[1]) >> 3;
      v414.n128_u8[8] = v71;
      v414.n128_u8[9] = v86;
      *(_QWORD *)v415 = v72;
      *(__n128 *)&v415[8] = v402;
      if (v407 == v406[1])
        v96 = 0;
      else
        v96 = 85 * v95 - 1;
      if (v96 != v409 + *((_QWORD *)&v408 + 1))
        goto LABEL_199;
      if (*((_QWORD *)&v408 + 1) >= 0x55uLL)
      {
        *((_QWORD *)&v408 + 1) -= 85;
        v98 = (char *)v406[1] + 8;
        v97 = *(_QWORD *)v406[1];
        v406[1] = (char *)v406[1] + 8;
        if (v407 != (char *)v408)
        {
LABEL_197:
          *(_QWORD *)v92 = v97;
          goto LABEL_198;
        }
        v99 = v406[0];
        if (v98 > v406[0])
        {
          v100 = (v98 - (char *)v406[0]) >> 3;
          if (v100 >= -1)
            v101 = v100 + 1;
          else
            v101 = v100 + 2;
          v102 = v101 >> 1;
          v103 = &v98[-8 * (v101 >> 1)];
          v104 = v407 - v98;
          if (v407 != v98)
          {
            memmove(&v98[-8 * (v101 >> 1)], v98, v407 - v98);
            v92 = (char *)v406[1];
          }
          v105 = &v92[-8 * v102];
          v92 = &v103[v104];
          v406[1] = v105;
          v407 = &v103[v104];
          goto LABEL_197;
        }
        if (v407 == v406[0])
          v120 = 1;
        else
          v120 = (v407 - (char *)v406[0]) >> 2;
        if (v120 >> 61)
          goto LABEL_488;
        v121 = operator new(8 * v120);
        v122 = v120 >> 2;
        v123 = &v121[8 * (v120 >> 2)];
        v124 = v407 - v98;
        v92 = v123;
        if (v407 != v98)
        {
          v92 = &v123[v124 & 0xFFFFFFFFFFFFFFF8];
          v125 = v124 - 8;
          if (v125 < 0x38)
          {
            v126 = &v121[8 * (v120 >> 2)];
            goto LABEL_194;
          }
          v174 = 8 * v122;
          v175 = &v121[8 * v122] - v98;
          v126 = &v121[8 * (v120 >> 2)];
          if (v175 < 0x20)
            goto LABEL_498;
          v176 = (v125 >> 3) + 1;
          v177 = 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
          v126 = &v123[v177];
          v98 += v177;
          v178 = (__int128 *)(v93 + 24);
          v179 = &v121[v174 + 16];
          v180 = v176 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v181 = *v178;
            *(v179 - 1) = *(v178 - 1);
            *v179 = v181;
            v178 += 2;
            v179 += 2;
            v180 -= 4;
          }
          while (v180);
          if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_498:
            do
            {
LABEL_194:
              v182 = *(_QWORD *)v98;
              v98 += 8;
              *(_QWORD *)v126 = v182;
              v126 += 8;
            }
            while (v126 != v92);
          }
        }
        v406[0] = v121;
        v406[1] = &v121[8 * (v120 >> 2)];
        v407 = v92;
        *(_QWORD *)&v408 = &v121[8 * v120];
        if (v99)
        {
          operator delete(v99);
          v92 = v407;
        }
        goto LABEL_197;
      }
      if (v95 >= (unint64_t)((uint64_t)(v408 - (unint64_t)v406[0]) >> 3))
      {
        if ((void *)v408 == v406[0])
          v112 = 1;
        else
          v112 = (uint64_t)(v408 - (unint64_t)v406[0]) >> 2;
        if (v112 >> 61)
LABEL_488:
          sub_223174E94();
        v113 = (char *)operator new(8 * v112);
        v114 = operator new(0xFF0uLL);
        v115 = v114;
        v116 = &v113[8 * v95];
        v117 = &v113[8 * v112];
        if (v95 == v112)
        {
          if (v94 < 1)
          {
            if (v407 == v406[1])
              v128 = 1;
            else
              v128 = v94 >> 2;
            if (v128 >> 61)
              sub_223174E94();
            v116 = (char *)operator new(8 * v128);
            v117 = &v116[8 * v128];
            operator delete(v113);
            v129 = (char *)v406[1];
            v92 = v407;
            v113 = v116;
            *(_QWORD *)v116 = v115;
            v118 = v116 + 8;
            if (v92 == v129)
              goto LABEL_144;
          }
          else
          {
            v119 = v95 + 2;
            if (v95 >= -1)
              v119 = v95 + 1;
            v116 -= 8 * (v119 >> 1);
            *(_QWORD *)v116 = v114;
            v118 = v116 + 8;
            if (v92 == v93)
              goto LABEL_144;
          }
        }
        else
        {
          *(_QWORD *)v116 = v114;
          v118 = v116 + 8;
          if (v92 == v93)
          {
LABEL_144:
            v130 = v406[0];
            v406[0] = v113;
            v406[1] = v116;
            v407 = v118;
            *(_QWORD *)&v408 = v117;
            if (v130)
              operator delete(v130);
            goto LABEL_199;
          }
        }
        do
        {
          if (v116 == v113)
          {
            if (v118 >= v117)
            {
              if (v117 == v116)
                v136 = 1;
              else
                v136 = (v117 - v116) >> 2;
              if (v136 >> 61)
                sub_223174E94();
              v137 = (char *)operator new(8 * v136);
              v113 = v137;
              v138 = (v136 + 3) >> 2;
              v131 = &v137[8 * v138];
              v132 = v131;
              v139 = v118 - v116;
              if (v118 != v116)
              {
                v132 = &v131[v139 & 0xFFFFFFFFFFFFFFF8];
                v140 = v139 - 8;
                v141 = &v137[8 * v138];
                v142 = v116;
                if (v140 < 0x38)
                  goto LABEL_499;
                v143 = 8 * v138;
                v141 = &v137[8 * v138];
                v142 = v116;
                if ((unint64_t)(v141 - v116) < 0x20)
                  goto LABEL_499;
                v144 = (v140 >> 3) + 1;
                v145 = 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
                v141 = &v131[v145];
                v142 = &v116[v145];
                v146 = (__int128 *)(v116 + 16);
                v147 = &v137[v143 + 16];
                v148 = v144 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v149 = *v146;
                  *((_OWORD *)v147 - 1) = *(v146 - 1);
                  *(_OWORD *)v147 = v149;
                  v146 += 2;
                  v147 += 32;
                  v148 -= 4;
                }
                while (v148);
                if (v144 != (v144 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_499:
                  do
                  {
                    v150 = *(_QWORD *)v142;
                    v142 += 8;
                    *(_QWORD *)v141 = v150;
                    v141 += 8;
                  }
                  while (v141 != v132);
                }
              }
              v117 = &v137[8 * v136];
              operator delete(v116);
            }
            else
            {
              v134 = (v117 - v118) >> 3;
              if (v134 >= -1)
                v135 = v134 + 1;
              else
                v135 = v134 + 2;
              v132 = &v118[8 * (v135 >> 1)];
              v131 = &v116[8 * (v135 >> 1)];
              if (v118 == v116)
              {
                v113 = v118;
              }
              else
              {
                memmove(&v116[8 * (v135 >> 1)], v116, v118 - v116);
                v113 = v116;
              }
            }
          }
          else
          {
            v131 = v116;
            v132 = v118;
          }
          v133 = *((_QWORD *)v92 - 1);
          v92 -= 8;
          *((_QWORD *)v131 - 1) = v133;
          v116 = v131 - 8;
          v118 = v132;
        }
        while (v92 != v406[1]);
        goto LABEL_144;
      }
      v106 = operator new(0xFF0uLL);
      v107 = v106;
      if ((char *)v408 == v407)
      {
        if (v406[1] == v406[0])
        {
          if (v407 == v406[1])
            v151 = 1;
          else
            v151 = (uint64_t)(v408 - (unint64_t)v406[1]) >> 2;
          if (v151 >> 61)
            goto LABEL_488;
          v152 = (char *)operator new(8 * v151);
          v153 = (v151 + 3) >> 2;
          v127 = &v152[8 * v153];
          v154 = v127;
          if (v407 != v406[1])
          {
            v154 = &v127[8 * v95];
            v155 = &v152[8 * v153];
            v156 = (uint64_t *)v406[1];
            if ((unint64_t)(v94 - 8) < 0x38)
              goto LABEL_500;
            v157 = 8 * v153;
            v155 = &v152[8 * v153];
            v156 = (uint64_t *)v406[1];
            if ((unint64_t)(v155 - (char *)v406[1]) < 0x20)
              goto LABEL_500;
            v158 = ((unint64_t)(v94 - 8) >> 3) + 1;
            v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
            v155 = &v127[v159];
            v156 = (uint64_t *)((char *)v406[1] + v159);
            v160 = (__int128 *)((char *)v406[1] + 16);
            v161 = &v152[v157 + 16];
            v162 = v158 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v163 = *v160;
              *((_OWORD *)v161 - 1) = *(v160 - 1);
              *(_OWORD *)v161 = v163;
              v160 += 2;
              v161 += 32;
              v162 -= 4;
            }
            while (v162);
            if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_500:
              do
              {
                v164 = *v156++;
                *(_QWORD *)v155 = v164;
                v155 += 8;
              }
              while (v155 != v154);
            }
          }
          v406[0] = v152;
          v406[1] = v127;
          v407 = v154;
          *(_QWORD *)&v408 = &v152[8 * v151];
          if (v93)
          {
            operator delete(v93);
            v127 = (char *)v406[1];
          }
        }
        else
        {
          v127 = (char *)v406[1];
        }
        *((_QWORD *)v127 - 1) = v107;
        v166 = (uint64_t *)v406[1];
        v165 = v407;
        v167 = *((_QWORD *)v406[1] - 1);
        if (v407 != (char *)v408)
          goto LABEL_182;
        v168 = v406[0];
        if (v406[1] > v406[0])
        {
          v169 = ((char *)v406[1] - (char *)v406[0]) >> 3;
          if (v169 >= -1)
            v170 = v169 + 1;
          else
            v170 = v169 + 2;
          v171 = v170 >> 1;
          v172 = (char *)v406[1] - 8 * (v170 >> 1);
          v173 = v407 - (char *)v406[1];
          if (v407 != v406[1])
          {
            memmove((char *)v406[1] - 8 * (v170 >> 1), v406[1], v407 - (char *)v406[1]);
            v166 = (uint64_t *)v406[1];
          }
          v406[1] = &v166[-v171];
          v407 = &v172[v173];
          *(_QWORD *)&v172[v173] = v167;
          goto LABEL_198;
        }
        if (v407 == v406[0])
          v188 = 1;
        else
          v188 = (v407 - (char *)v406[0]) >> 2;
        if (v188 >> 61)
          goto LABEL_488;
        v189 = operator new(8 * v188);
        v190 = v188 >> 2;
        v191 = &v189[8 * (v188 >> 2)];
        v192 = v407 - (char *)v406[1];
        v165 = v191;
        if (v407 != v406[1])
        {
          v165 = &v191[v192 & 0xFFFFFFFFFFFFFFF8];
          v193 = v192 - 8;
          if (v193 < 0x38)
          {
            v194 = &v189[8 * (v188 >> 2)];
            goto LABEL_214;
          }
          v195 = 8 * v190;
          v196 = &v189[8 * v190] - (char *)v406[1];
          v194 = &v189[8 * (v188 >> 2)];
          if (v196 < 0x20)
            goto LABEL_501;
          v197 = (v193 >> 3) + 1;
          v198 = 8 * (v197 & 0x3FFFFFFFFFFFFFFCLL);
          v194 = &v191[v198];
          v199 = (char *)v406[1] + v198;
          v200 = (__int128 *)((char *)v406[1] + 16);
          v201 = &v189[v195 + 16];
          v202 = v197 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v203 = *v200;
            *(v201 - 1) = *(v200 - 1);
            *v201 = v203;
            v200 += 2;
            v201 += 2;
            v202 -= 4;
          }
          while (v202);
          v166 = (uint64_t *)v199;
          if (v197 != (v197 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_501:
            do
            {
LABEL_214:
              v204 = *v166++;
              *(_QWORD *)v194 = v204;
              v194 += 8;
            }
            while (v194 != v165);
          }
        }
        v406[0] = v189;
        v406[1] = &v189[8 * (v188 >> 2)];
        v407 = v165;
        *(_QWORD *)&v408 = &v189[8 * v188];
        if (v168)
        {
          operator delete(v168);
          v165 = v407;
        }
LABEL_182:
        *(_QWORD *)v165 = v167;
        goto LABEL_198;
      }
      *(_QWORD *)v407 = v106;
LABEL_198:
      v407 += 8;
LABEL_199:
      v183 = *((_QWORD *)v406[1] + (v409 + *((_QWORD *)&v408 + 1)) / 0x55uLL);
      v184 = (v409 + *((_QWORD *)&v408 + 1)) % 0x55uLL;
      v185 = (void *)v414.n128_u64[0];
      v186 = (void **)(v183 + 48 * v184);
      *v186 = __p;
      v186[1] = v185;
      if (v185)
        (*(void (**)(void *))(*(_QWORD *)v185 + 24))(v185);
      v187 = v183 + 48 * v184;
      *(_WORD *)(v187 + 16) = v414.n128_u16[4];
      *(_QWORD *)(v187 + 32) = 0;
      *(_QWORD *)(v187 + 40) = 0;
      v73 = *(__n128 *)v415;
      *(_OWORD *)(v187 + 24) = *(_OWORD *)v415;
      *(_QWORD *)(v187 + 40) = *(_QWORD *)&v415[16];
      memset(v415, 0, sizeof(v415));
      ++v409;
      if (v185)
        (*(void (**)(void *))(*(_QWORD *)v185 + 40))(v185);
LABEL_62:
      v66 = (void **)&v420[v65++];
      if (v65 == 4)
      {
        v205 = (_QWORD *)(**(_QWORD **)(v423 + 8) + 112 * *(_QWORD *)v423);
        v206 = v205[3];
        if (!v206 || !(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v206 + 48))(v206, v73))
        {
          v207 = v205[5];
          if (!v207 || !(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v207 + 48))(v207, v73))
          {
            v208 = v205[7];
            if (!v208 || !(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v208 + 48))(v208, v73))
            {
              v209 = v205[9];
              if (!v209 || !(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v209 + 48))(v209, v73))
                sub_223EE31B4((uint64_t)&v410, v423, (uint64_t)v424);
            }
          }
        }
        if (v422)
          (*(void (**)(uint64_t))(*(_QWORD *)v422 + 40))(v422);
        if (*((_QWORD *)&v420[1] + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v420[1] + 1) + 40))(*((_QWORD *)&v420[1] + 1));
        if (*((_QWORD *)&v420[0] + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v420[0] + 1) + 40))(*((_QWORD *)&v420[0] + 1));
        if (*((_QWORD *)&v419 + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v419 + 1) + 40))(*((_QWORD *)&v419 + 1));
LABEL_234:
        if ((_QWORD)v426)
        {
          *((_QWORD *)&v426 + 1) = v426;
          operator delete((void *)v426);
        }
        if (v424)
          (*((void (**)(void **))*v424 + 5))(v424);
        v210 = *((_QWORD *)v406[1] + *((_QWORD *)&v408 + 1) / 0x55uLL);
        v211 = *((_QWORD *)&v408 + 1) % 0x55uLL;
        v212 = *(void **)(v210 + 48 * (*((_QWORD *)&v408 + 1) % 0x55uLL) + 24);
        if (v212)
        {
          *(_QWORD *)(v210 + 48 * v211 + 32) = v212;
          operator delete(v212);
        }
        v213 = *(_QWORD *)(v210 + 48 * v211 + 8);
        if (v213)
          (*(void (**)(uint64_t))(*(_QWORD *)v213 + 40))(v213);
        v214 = v409 - 1;
        v40 = *((_QWORD *)&v408 + 1) + 1;
        *((_QWORD *)&v408 + 1) = v40;
        --v409;
        if (v40 >= 0xAA)
        {
          operator delete(*(void **)v406[1]);
          v40 = *((_QWORD *)&v408 + 1) - 85;
          v406[1] = (char *)v406[1] + 8;
          *((_QWORD *)&v408 + 1) -= 85;
          v214 = v409;
        }
        if (v214)
          goto LABEL_37;
        v216 = v410;
        v215 = v411;
        if (v410 == v411)
        {
          v220 = 1;
          v215 = v410;
        }
        else
        {
          v217 = v410;
          do
          {
            v219 = (uint64_t *)*v217;
            v218 = v217[1];
            if (v218)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v218 + 24))(v217[1]);
              v404 = v219;
              v405 = v218;
              (*(void (**)(uint64_t))(*(_QWORD *)v218 + 24))(v218);
            }
            else
            {
              v404 = (uint64_t *)*v217;
              v405 = 0;
            }
            sub_223EE1230((uint64_t)v400, &v404);
            if (v218)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v218 + 40))(v218);
              (*(void (**)(uint64_t))(*(_QWORD *)v218 + 40))(v218);
            }
            v217 += 2;
          }
          while (v217 != v215);
          v220 = 0;
        }
LABEL_255:
        sub_223EE1680((uint64_t)v400);
        sub_223EE10A4((uint64_t)v406);
        if (!v216)
          return;
        if ((v220 & 1) == 0)
        {
          do
          {
            v221 = *(v215 - 1);
            if (v221)
              (*(void (**)(uint64_t))(*(_QWORD *)v221 + 40))(v221);
            v215 -= 2;
          }
          while (v215 != v216);
        }
        v411 = v216;
LABEL_258:
        operator delete(v216);
        return;
      }
    }
  }
  v24 = *a4;
  v23 = (void **)a4[1];
  LODWORD(v18) = *(_DWORD *)a2;
  v25 = vcvtms_s32_f32(v24.f32[0] / *(float *)a2);
  v416 = v24;
  v417 = v23;
  *(float *)&v19 = *(float *)&v23 / *(float *)&v18;
  if (v25 == vcvtms_s32_f32(*(float *)&v23 / *(float *)&v18))
  {
    v26 = vcvtms_s32_f32(v24.f32[1] / *(float *)&v18);
    LODWORD(v19) = HIDWORD(v23);
    *(float *)&v18 = *((float *)&v23 + 1) / *(float *)&v18;
    if (v26 == vcvtms_s32_f32(*(float *)&v18))
    {
      sub_223EDFBD4((uint64_t **)&v419, a2, (float *)&v416, *(int32x2_t *)&v18);
      sub_223EE078C(a1, (uint64_t)&v419, 1uLL);
      if (*((_QWORD *)&v419 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v419 + 1) + 40))(*((_QWORD *)&v419 + 1));
      return;
    }
  }
  v29 = *(_QWORD *)(a2 + 16);
  if (v29)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v29 + 24))(*(_QWORD *)(a2 + 16));
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 48))(v29) == 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  }
  else
  {
    v30 = 1;
  }
  *(float32x2_t *)&v419 = v24;
  *((_QWORD *)&v419 + 1) = v23;
  sub_223EE08D8(a2, 2, (uint64_t *)&v419, v18, v19, v20, v21, v22);
  *v397 = 0;
  v397[1] = 0;
  v397[2] = 0;
  __p = 0;
  v414 = 0uLL;
  v223 = *(_QWORD *)(a2 + 8);
  v222 = *(_QWORD *)(a2 + 16);
  if (v222)
    (*(void (**)(_QWORD))(*(_QWORD *)v222 + 24))(*(_QWORD *)(a2 + 16));
  memset(v420, 0, sizeof(v420));
  v419 = 0u;
  v224 = (void **)operator new(8uLL);
  v225 = operator new(0xFF0uLL);
  *v224 = v225;
  v226 = v224 + 1;
  *(_QWORD *)&v419 = v224;
  *((_QWORD *)&v419 + 1) = v224;
  *(_QWORD *)&v420[0] = v224 + 1;
  *((_QWORD *)&v420[0] + 1) = v224 + 1;
  v227 = 0uLL;
  *v225 = v223;
  v225[1] = v222;
  if (v222)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v222 + 24))(v222);
    v224 = (void **)*((_QWORD *)&v419 + 1);
    v228 = v419;
    v229 = *((_QWORD *)&v420[1] + 1);
    v226 = *(void ***)&v420[0];
    v230 = *(_OWORD *)((char *)v420 + 8);
    v227 = 0uLL;
  }
  else
  {
    v229 = 0;
    v230 = (unint64_t)(v224 + 1);
    v228 = (unint64_t)v224;
  }
  *((_BYTE *)v225 + 16) = !v30;
  *((_BYTE *)v225 + 17) = 0;
  v423 = v228;
  v424 = v224;
  v419 = v227;
  v420[0] = v227;
  v426 = v230;
  v425 = v226;
  v427 = (char *)(v229 + 1);
  v420[1] = 0uLL;
  sub_223EE3034((uint64_t)&v419);
  if (v222)
    (*(void (**)(uint64_t))(*(_QWORD *)v222 + 40))(v222);
  if (!v427)
  {
    sub_223EE3034((uint64_t)&v423);
    return;
  }
  __asm { FMOV            V9.2S, #1.0 }
  while (2)
  {
    v235 = *((_QWORD *)&v426 + 1);
    v236 = (char *)v424[*((_QWORD *)&v426 + 1) / 0xAAuLL];
    v237 = *((_QWORD *)&v426 + 1) % 0xAAuLL;
    v238 = (uint64_t *)&v236[24 * (*((_QWORD *)&v426 + 1) % 0xAAuLL)];
    v239 = *v238;
    v240 = v238[1];
    if (v240)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v240 + 24))(v238[1]);
      v235 = *((_QWORD *)&v426 + 1);
      v241 = v236[24 * v237 + 16];
      v242 = *((_QWORD *)v424[*((_QWORD *)&v426 + 1) / 0xAAuLL] + 3 * (*((_QWORD *)&v426 + 1) % 0xAAuLL) + 1);
      if (v242)
        goto LABEL_275;
    }
    else
    {
      v241 = v236[24 * v237 + 16];
      v242 = *((_QWORD *)v424[*((_QWORD *)&v426 + 1) / 0xAAuLL] + 3 * v237 + 1);
      if (v242)
      {
LABEL_275:
        (*(void (**)(uint64_t))(*(_QWORD *)v242 + 40))(v242);
        ++*((_QWORD *)&v426 + 1);
        --v427;
        if (*((_QWORD *)&v426 + 1) < 0x154uLL)
          goto LABEL_280;
        goto LABEL_279;
      }
    }
    *((_QWORD *)&v426 + 1) = v235 + 1;
    --v427;
    if ((unint64_t)(v235 + 1) >= 0x154)
    {
LABEL_279:
      operator delete(*v424++);
      *((_QWORD *)&v426 + 1) -= 170;
    }
LABEL_280:
    v243 = (_QWORD *)(**(_QWORD **)(v239 + 8) + 112 * *(_QWORD *)v239);
    v244 = v243[3];
    v398 = v240;
    if (!v244 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v244 + 48))(v244))
    {
      v245 = v243[5];
      if (!v245 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v245 + 48))(v245))
      {
        v246 = v243[7];
        if (!v246 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v246 + 48))(v246))
        {
          v247 = v243[9];
          if (!v247 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v247 + 48))(v247))
          {
            if (v241
              || (v248 = **(_QWORD **)(v239 + 8) + 112 * *(_QWORD *)v239,
                  (float)(*(float *)(v248 + 88) - *(float *)(v248 + 80)) < (float)(*v400 * 1.25)))
            {
              sub_223EE31B4((uint64_t)v397, v239, v240);
              goto LABEL_468;
            }
          }
        }
      }
    }
    v249 = **(_QWORD **)(v239 + 8) + 112 * *(_QWORD *)v239;
    v251 = *(_QWORD *)(v249 + 16);
    v250 = *(_QWORD *)(v249 + 24);
    v252 = (_QWORD *)(v249 + 16);
    *(_QWORD *)&v419 = v251;
    *((_QWORD *)&v419 + 1) = v250;
    if (v250)
      (*(void (**)(uint64_t))(*(_QWORD *)v250 + 24))(v250);
    v253 = v252[3];
    *(_QWORD *)&v420[0] = v252[2];
    *((_QWORD *)&v420[0] + 1) = v253;
    if (v253)
      (*(void (**)(uint64_t))(*(_QWORD *)v253 + 24))(v253);
    v254 = v252[5];
    *(_QWORD *)&v420[1] = v252[4];
    *((_QWORD *)&v420[1] + 1) = v254;
    if (v254)
      (*(void (**)(uint64_t))(*(_QWORD *)v254 + 24))(v254);
    v255 = v252[7];
    v421 = v252[6];
    v422 = v255;
    if (v255)
      (*(void (**)(uint64_t))(*(_QWORD *)v255 + 24))(v255);
    v256 = 0;
    v257 = &v419;
    v399 = v239;
    do
    {
      v259 = *((_QWORD *)v257 + 1);
      if (v259 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v259 + 48))(v259))
      {
        v260 = **(_QWORD **)(*(_QWORD *)v257 + 8) + 112 * **(_QWORD **)v257;
        v406[0] = *(void **)(v260 + 80);
        v261 = v406[0];
        v406[1] = *(void **)(v260 + 88);
        v262 = v406[1];
        v263 = 1;
      }
      else
      {
        sub_223F35620((float32x2_t *)(**(_QWORD **)(v239 + 8) + 112 * *(_QWORD *)v239 + 80), v256, (float32x2_t *)v406);
        v263 = 0;
        v261 = v406[0];
        v262 = v406[1];
      }
      v264 = vdiv_f32(_D9, vsub_f32((float32x2_t)v417, v416));
      v265 = vmul_f32(vsub_f32((float32x2_t)v261, v416), v264);
      v266 = vmul_f32(vsub_f32((float32x2_t)v262, v416), v264);
      v267 = vbsl_s8((int8x8_t)vcgt_f32(v265, v266), (int8x8_t)v266, (int8x8_t)v265);
      if (*(float *)v267.i32 < *(float *)&v267.i32[1])
        v267.i32[0] = v267.i32[1];
      v268 = vbsl_s8((int8x8_t)vcgt_f32(v266, v265), (int8x8_t)v266, (int8x8_t)v265);
      if (*(float *)&v268.i32[1] < *(float *)v268.i32)
        v268.i32[0] = v268.i32[1];
      if (*(float *)v267.i32 <= *(float *)v268.i32)
      {
        v269 = *(float *)v267.i32 < 0.0 || *(float *)v267.i32 > 1.0;
        if (!v269
          || (*(float *)v268.i32 >= 0.0 ? (v270 = *(float *)v268.i32 > 1.0) : (v270 = 1),
              !v270 || (*(float *)v267.i32 <= 0.0 ? (v271 = *(float *)v268.i32 < 1.0) : (v271 = 1), !v271)))
        {
          if ((v263 & 1) == 0)
          {
            *(_QWORD *)&v418 = v239;
            *((_QWORD *)&v418 + 1) = v240;
            if (v240)
              (*(void (**)(uint64_t))(*(_QWORD *)v240 + 24))(v240);
            sub_223EE1D0C(&v410, (uint64_t)v400, (uint64_t **)&v418, (__int128 *)v406, v256);
            v273 = v410;
            v272 = v411;
            if (v411)
              (*(void (**)(uint64_t *))(*v411 + 24))(v411);
            v274 = *((_QWORD *)v257 + 1);
            *(_QWORD *)v257 = v273;
            *((_QWORD *)v257 + 1) = v272;
            if (v274)
              (*(void (**)(uint64_t))(*(_QWORD *)v274 + 40))(v274);
            if (v272)
              (*(void (**)(uint64_t *))(*v272 + 40))(v272);
            if (v240)
              (*(void (**)(uint64_t))(*(_QWORD *)v240 + 40))(v240);
          }
          v403 = v263;
          v275 = *(_QWORD *)v257;
          v276 = *((_QWORD *)v257 + 1);
          if (v276)
            (*(void (**)(_QWORD))(*(_QWORD *)v276 + 24))(*((_QWORD *)v257 + 1));
          v401 = v275;
          v278 = v424;
          v277 = v425;
          v279 = (char *)v425 - (char *)v424;
          v280 = v425 - v424;
          if (v425 == v424)
            v281 = 0;
          else
            v281 = 170 * v280 - 1;
          if ((char *)v281 != &v427[*((_QWORD *)&v426 + 1)])
            goto LABEL_435;
          if (*((_QWORD *)&v426 + 1) >= 0xAAuLL)
          {
            *((_QWORD *)&v426 + 1) -= 170;
            v282 = v424 + 1;
            v283 = *v424++;
            if (v425 != (void **)v426)
            {
LABEL_433:
              *v277 = v283;
              goto LABEL_434;
            }
            v284 = (void *)v423;
            if ((unint64_t)v282 > v423)
            {
              v285 = (uint64_t)((uint64_t)v282 - v423) >> 3;
              if (v285 >= -1)
                v286 = v285 + 1;
              else
                v286 = v285 + 2;
              v287 = v286 >> 1;
              v288 = &v282[-(v286 >> 1)];
              v289 = (char *)v425 - (char *)v282;
              if (v425 != v282)
              {
                memmove(&v282[-(v286 >> 1)], v282, (char *)v425 - (char *)v282);
                v277 = v424;
              }
              v290 = &v277[-v287];
              v277 = (void **)((char *)v288 + v289);
              v424 = v290;
              v425 = (void **)((char *)v288 + v289);
              goto LABEL_433;
            }
            if (v425 == (void **)v423)
              v304 = 1;
            else
              v304 = (uint64_t)((uint64_t)v425 - v423) >> 2;
            if (v304 >> 61)
              goto LABEL_490;
            v305 = operator new(8 * v304);
            v306 = v304 >> 2;
            v307 = (void **)&v305[8 * (v304 >> 2)];
            v308 = (char *)v277 - (char *)v282;
            _ZF = v277 == v282;
            v277 = v307;
            if (!_ZF)
            {
              v277 = (void **)((char *)v307 + (v308 & 0xFFFFFFFFFFFFFFF8));
              v309 = v308 - 8;
              if (v309 < 0x38)
              {
                v310 = (void **)&v305[8 * (v304 >> 2)];
                do
                {
LABEL_430:
                  v365 = *v282++;
                  *v310++ = v365;
                }
                while (v310 != v277);
                goto LABEL_431;
              }
              v357 = 8 * v306;
              v358 = &v305[8 * v306] - (_BYTE *)v282;
              v310 = (void **)&v305[8 * (v304 >> 2)];
              if (v358 < 0x20)
                goto LABEL_430;
              v359 = (v309 >> 3) + 1;
              v360 = v359 & 0x3FFFFFFFFFFFFFFCLL;
              v310 = &v307[v360];
              v282 = (void **)((char *)v282 + v360 * 8);
              v361 = (__int128 *)(v278 + 3);
              v362 = &v305[v357 + 16];
              v363 = v359 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v364 = *v361;
                *(v362 - 1) = *(v361 - 1);
                *v362 = v364;
                v361 += 2;
                v362 += 2;
                v363 -= 4;
              }
              while (v363);
              if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_430;
            }
LABEL_431:
            v423 = (unint64_t)v305;
            v424 = (void **)&v305[8 * (v304 >> 2)];
            v425 = v277;
            *(_QWORD *)&v426 = &v305[8 * v304];
            if (v284)
            {
              operator delete(v284);
              v277 = v425;
            }
            goto LABEL_433;
          }
          v291 = v423;
          v292 = (void **)v426;
          if (v280 < (unint64_t)((uint64_t)(v426 - v423) >> 3))
          {
            v293 = operator new(0xFF0uLL);
            v294 = v293;
            if (v292 != v277)
            {
              *v277 = v293;
LABEL_434:
              ++v425;
              v240 = v398;
LABEL_435:
              v366 = (char *)v424[(unint64_t)&v427[*((_QWORD *)&v426 + 1)] / 0xAA];
              v367 = (unint64_t)&v427[*((_QWORD *)&v426 + 1)] % 0xAA;
              v368 = &v366[24 * v367];
              *(_QWORD *)v368 = v401;
              *((_QWORD *)v368 + 1) = v276;
              if (v276)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v276 + 24))(v276);
                v239 = v399;
                v369 = &v366[24 * v367];
                v369[16] = v403;
                v369[17] = 0;
                ++v427;
                (*(void (**)(uint64_t))(*(_QWORD *)v276 + 40))(v276);
              }
              else
              {
                v258 = &v366[24 * v367];
                v258[16] = v403;
                v258[17] = 0;
                ++v427;
                v239 = v399;
              }
              goto LABEL_301;
            }
            if (v278 == (void **)v291)
            {
              if (v277 == v278)
                v334 = 1;
              else
                v334 = ((char *)v292 - (char *)v278) >> 2;
              if (v334 >> 61)
                goto LABEL_490;
              v335 = (char *)operator new(8 * v334);
              v336 = (v334 + 3) >> 2;
              v311 = (void **)&v335[8 * v336];
              v337 = v311;
              if (v277 != v278)
              {
                v337 = &v311[v280];
                v338 = &v335[8 * v336];
                v339 = v278;
                if ((unint64_t)(v279 - 8) < 0x38)
                  goto LABEL_502;
                v340 = 8 * v336;
                v338 = &v335[8 * v336];
                v339 = v278;
                if ((unint64_t)(v338 - (char *)v278) < 0x20)
                  goto LABEL_502;
                v341 = ((unint64_t)(v279 - 8) >> 3) + 1;
                v342 = v341 & 0x3FFFFFFFFFFFFFFCLL;
                v338 = (char *)&v311[v342];
                v339 = &v278[v342];
                v343 = (__int128 *)(v278 + 2);
                v344 = &v335[v340 + 16];
                v345 = v341 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v346 = *v343;
                  *((_OWORD *)v344 - 1) = *(v343 - 1);
                  *(_OWORD *)v344 = v346;
                  v343 += 2;
                  v344 += 32;
                  v345 -= 4;
                }
                while (v345);
                if (v341 != (v341 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_502:
                  do
                  {
                    v347 = (uint64_t)*v339++;
                    *(_QWORD *)v338 = v347;
                    v338 += 8;
                  }
                  while (v338 != (char *)v337);
                }
              }
              v423 = (unint64_t)v335;
              v424 = v311;
              v425 = v337;
              *(_QWORD *)&v426 = &v335[8 * v334];
              if (v278)
              {
                operator delete(v278);
                v311 = v424;
              }
            }
            else
            {
              v311 = v278;
            }
            *(v311 - 1) = v294;
            v348 = v424;
            v349 = (char *)v425;
            v350 = *--v424;
            v424 = v348;
            if (v425 != (void **)v426)
            {
LABEL_418:
              *(_QWORD *)v349 = v350;
              goto LABEL_434;
            }
            v351 = (void *)v423;
            if ((unint64_t)v348 > v423)
            {
              v352 = (uint64_t)((uint64_t)v348 - v423) >> 3;
              if (v352 >= -1)
                v353 = v352 + 1;
              else
                v353 = v352 + 2;
              v354 = v353 >> 1;
              v355 = &v348[-(v353 >> 1)];
              v356 = (char *)v425 - (char *)v348;
              if (v425 != v348)
              {
                memmove(&v348[-(v353 >> 1)], v348, (char *)v425 - (char *)v348);
                v348 = v424;
              }
              v424 = &v348[-v354];
              v425 = (void **)((char *)v355 + v356);
              *(void **)((char *)v355 + v356) = v350;
              goto LABEL_434;
            }
            if (v425 == (void **)v423)
              v370 = 1;
            else
              v370 = (uint64_t)((uint64_t)v425 - v423) >> 2;
            if (v370 >> 61)
              goto LABEL_490;
            v371 = operator new(8 * v370);
            v372 = v370 >> 2;
            v373 = &v371[8 * (v370 >> 2)];
            v374 = v349 - (char *)v348;
            _ZF = v349 == (char *)v348;
            v349 = v373;
            if (!_ZF)
            {
              v349 = &v373[v374 & 0xFFFFFFFFFFFFFFF8];
              v375 = v374 - 8;
              if (v375 < 0x38)
              {
                v376 = &v371[8 * (v370 >> 2)];
                do
                {
LABEL_448:
                  v386 = (uint64_t)*v348++;
                  *(_QWORD *)v376 = v386;
                  v376 += 8;
                }
                while (v376 != v349);
                goto LABEL_449;
              }
              v377 = 8 * v372;
              v378 = &v371[8 * v372] - (_BYTE *)v348;
              v376 = &v371[8 * (v370 >> 2)];
              if (v378 < 0x20)
                goto LABEL_448;
              v379 = (v375 >> 3) + 1;
              v380 = v379 & 0x3FFFFFFFFFFFFFFCLL;
              v376 = &v373[v380 * 8];
              v381 = &v348[v380];
              v382 = (__int128 *)(v348 + 2);
              v383 = &v371[v377 + 16];
              v384 = v379 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v385 = *v382;
                *(v383 - 1) = *(v382 - 1);
                *v383 = v385;
                v382 += 2;
                v383 += 2;
                v384 -= 4;
              }
              while (v384);
              v348 = v381;
              if (v379 != (v379 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_448;
            }
LABEL_449:
            v423 = (unint64_t)v371;
            v424 = (void **)&v371[8 * (v370 >> 2)];
            v425 = (void **)v349;
            *(_QWORD *)&v426 = &v371[8 * v370];
            if (v351)
            {
              operator delete(v351);
              v349 = (char *)v425;
            }
            goto LABEL_418;
          }
          if ((_QWORD)v426 == v423)
            v295 = 1;
          else
            v295 = (uint64_t)(v426 - v423) >> 2;
          if (v295 >> 61)
LABEL_490:
            sub_223174E94();
          v296 = (void **)operator new(8 * v295);
          v297 = operator new(0xFF0uLL);
          v298 = &v296[v280];
          v299 = &v296[v295];
          if (v280 == v295)
          {
            v300 = v297;
            if (v279 < 1)
            {
              if (v277 == v278)
                v312 = 1;
              else
                v312 = v279 >> 2;
              if (v312 >> 61)
                sub_223174E94();
              v298 = (void **)operator new(8 * v312);
              v299 = &v298[v312];
              operator delete(v296);
              v313 = v424;
              v277 = v425;
              v296 = v298;
              *v298 = v300;
              v302 = v298 + 1;
              if (v277 == v313)
                goto LABEL_365;
            }
            else
            {
              v301 = v280 + 2;
              if (v280 >= -1)
                v301 = v280 + 1;
              v298 -= v301 >> 1;
              *v298 = v297;
              v302 = v298 + 1;
              if (v277 == v278)
                goto LABEL_365;
            }
          }
          else
          {
            *v298 = v297;
            v302 = v298 + 1;
            if (v277 == v278)
            {
LABEL_365:
              v303 = (void *)v423;
              v423 = (unint64_t)v296;
              v424 = v298;
              v425 = v302;
              *(_QWORD *)&v426 = v299;
              v240 = v398;
              if (v303)
                operator delete(v303);
              goto LABEL_435;
            }
          }
          do
          {
            if (v298 == v296)
            {
              if (v302 >= v299)
              {
                if (v299 == v298)
                  v319 = 1;
                else
                  v319 = ((char *)v299 - (char *)v298) >> 2;
                if (v319 >> 61)
                  sub_223174E94();
                v320 = (void **)operator new(8 * v319);
                v296 = v320;
                v321 = (v319 + 3) >> 2;
                v314 = &v320[v321];
                v315 = v314;
                v322 = (char *)v302 - (char *)v298;
                if (v302 != v298)
                {
                  v315 = (void **)((char *)v314 + (v322 & 0xFFFFFFFFFFFFFFF8));
                  v323 = v322 - 8;
                  v324 = (char *)&v320[v321];
                  v325 = v298;
                  if (v323 < 0x38)
                    goto LABEL_503;
                  v326 = v321;
                  v324 = (char *)&v320[v321];
                  v325 = v298;
                  if ((unint64_t)(v324 - (char *)v298) < 0x20)
                    goto LABEL_503;
                  v327 = (v323 >> 3) + 1;
                  v328 = v327 & 0x3FFFFFFFFFFFFFFCLL;
                  v324 = (char *)&v314[v328];
                  v325 = &v298[v328];
                  v329 = (__int128 *)(v298 + 2);
                  v330 = (char *)&v320[v326 + 2];
                  v331 = v327 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v332 = *v329;
                    *((_OWORD *)v330 - 1) = *(v329 - 1);
                    *(_OWORD *)v330 = v332;
                    v329 += 2;
                    v330 += 32;
                    v331 -= 4;
                  }
                  while (v331);
                  if (v327 != (v327 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_503:
                    do
                    {
                      v333 = (uint64_t)*v325++;
                      *(_QWORD *)v324 = v333;
                      v324 += 8;
                    }
                    while (v324 != (char *)v315);
                  }
                }
                v299 = &v320[v319];
                operator delete(v298);
              }
              else
              {
                v317 = v299 - v302;
                if (v317 >= -1)
                  v318 = v317 + 1;
                else
                  v318 = v317 + 2;
                v315 = &v302[v318 >> 1];
                v314 = &v298[v318 >> 1];
                if (v302 == v298)
                {
                  v296 = v302;
                }
                else
                {
                  memmove(&v298[v318 >> 1], v298, (char *)v302 - (char *)v298);
                  v296 = v298;
                }
              }
            }
            else
            {
              v314 = v298;
              v315 = v302;
            }
            v316 = *--v277;
            *(v314 - 1) = v316;
            v298 = v314 - 1;
            v302 = v315;
          }
          while (v277 != v424);
          goto LABEL_365;
        }
      }
LABEL_301:
      v257 = &v420[v256++];
    }
    while (v256 != 4);
    v387 = (_QWORD *)(**(_QWORD **)(v239 + 8) + 112 * *(_QWORD *)v239);
    v388 = v387[3];
    if (!v388 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v388 + 48))(v388))
    {
      v389 = v387[5];
      if (!v389 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v389 + 48))(v389))
      {
        v390 = v387[7];
        if (!v390 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v390 + 48))(v390))
        {
          v391 = v387[9];
          if (!v391 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v391 + 48))(v391))
            sub_223EE31B4((uint64_t)&__p, v239, v240);
        }
      }
    }
    if (v422)
      (*(void (**)(uint64_t))(*(_QWORD *)v422 + 40))(v422);
    if (*((_QWORD *)&v420[1] + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v420[1] + 1) + 40))(*((_QWORD *)&v420[1] + 1));
    if (*((_QWORD *)&v420[0] + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v420[0] + 1) + 40))(*((_QWORD *)&v420[0] + 1));
    if (*((_QWORD *)&v419 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v419 + 1) + 40))(*((_QWORD *)&v419 + 1));
LABEL_468:
    if (v240)
      (*(void (**)(uint64_t))(*(_QWORD *)v240 + 40))(v240);
    if (v427)
      continue;
    break;
  }
  v216 = (uint64_t *)__p;
  v392 = (uint64_t *)v414.n128_u64[0];
  if (__p == (void *)v414.n128_u64[0])
  {
    sub_223EE3034((uint64_t)&v423);
    if (!v216)
      return;
    goto LABEL_258;
  }
  v393 = (uint64_t *)__p;
  do
  {
    v395 = *v393;
    v394 = v393[1];
    if (v394)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v394 + 24))(v393[1]);
      *(_QWORD *)&v419 = v395;
      *((_QWORD *)&v419 + 1) = v394;
      (*(void (**)(uint64_t))(*(_QWORD *)v394 + 24))(v394);
    }
    else
    {
      v419 = v395;
    }
    sub_223EE1230((uint64_t)v400, (uint64_t **)&v419);
    if (v394)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v394 + 40))(v394);
      (*(void (**)(uint64_t))(*(_QWORD *)v394 + 40))(v394);
    }
    v393 += 2;
  }
  while (v393 != v392);
  sub_223EE3034((uint64_t)&v423);
  if (v216)
  {
    do
    {
      v396 = *(v392 - 1);
      if (v396)
        (*(void (**)(uint64_t))(*(_QWORD *)v396 + 40))(v396);
      v392 -= 2;
    }
    while (v392 != v216);
    goto LABEL_258;
  }
}

void sub_223EDEFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  v36 = *(_QWORD *)(v34 - 248);
  v35 = *(_QWORD *)(v34 - 240);
  if (v35 == v36)
  {
    v37 = *(void **)(v34 - 256);
    if (!v37)
      goto LABEL_3;
  }
  else
  {
    *(_QWORD *)(v34 - 240) = v35 + ((v36 - v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    v37 = *(void **)(v34 - 256);
    if (!v37)
    {
LABEL_3:
      if (!v33)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  operator delete(v37);
  if (!v33)
  {
LABEL_8:
    sub_223EDF64C(&a33);
    JUMPOUT(0x223EDF640);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
  goto LABEL_8;
}

void sub_223EDF0B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 248);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  JUMPOUT(0x223EDF644);
}

void sub_223EDF0E0()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *v0;
  if (*v0)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(v1 + 8);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v6 = *(_QWORD *)(v2 - 248);
  v5 = *(_QWORD *)(v2 - 240);
  if (v5 != v6)
    *(_QWORD *)(v2 - 240) = v5 + ((v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v7 = *(void **)(v2 - 256);
  if (v7)
    operator delete(v7);
  sub_223EE105C((_QWORD *)(v2 - 184));
  JUMPOUT(0x223EDF634);
}

void sub_223EDF118()
{
  JUMPOUT(0x223EDF634);
}

void sub_223EDF124()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x223EDF644);
}

void sub_223EDF148(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x223EDF644);
}

void sub_223EDF160()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  __cxa_end_catch();
  operator delete(v0);
  v3 = *(_QWORD *)(v1 - 248);
  v2 = *(_QWORD *)(v1 - 240);
  if (v2 != v3)
    *(_QWORD *)(v1 - 240) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)(v1 - 256);
  if (v4)
    operator delete(v4);
  sub_223EE105C((_QWORD *)(v1 - 184));
  JUMPOUT(0x223EDF634);
}

void sub_223EDF1C4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 - 160);
  if (v1)
  {
    *(_QWORD *)(v0 - 152) = v1;
    operator delete(v1);
  }
  v2 = *(_QWORD *)(v0 - 176);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  JUMPOUT(0x223EDF634);
}

void sub_223EDF1F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 248);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  JUMPOUT(0x223EDF644);
}

void sub_223EDF21C()
{
  JUMPOUT(0x223EDF624);
}

void sub_223EDF22C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;

  operator delete(v16);
  operator delete(v15);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  sub_223EE2B80((_QWORD *)(v17 - 256));
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 40))(a14);
  sub_223EE3034(v17 - 184);
  JUMPOUT(0x223EDF574);
}

void sub_223EDF24C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x223EDF56CLL);
}

void sub_223EDF254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 40))(a14);
  sub_223EE3034(v15 - 184);
  JUMPOUT(0x223EDF574);
}

void sub_223EDF260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  while (1)
  {
    v14 = *(_QWORD *)(a12 - 8);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    a12 -= 16;
    if (a12 == v12 - 256)
      JUMPOUT(0x223EDF504);
  }
}

void sub_223EDF2B4()
{
  uint64_t v0;

  if (v0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
    JUMPOUT(0x223EDF2CCLL);
  }
  JUMPOUT(0x223EDF56CLL);
}

void sub_223EDF2EC()
{
  JUMPOUT(0x223EDF56CLL);
}

void sub_223EDF308()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x223EDF62CLL);
}

void sub_223EDF3D4()
{
  JUMPOUT(0x223EDF62CLL);
}

void sub_223EDF3E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 176);
  if (!v1)
    JUMPOUT(0x223EDF404);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  JUMPOUT(0x223EDF62CLL);
}

void sub_223EDF42C()
{
  uint64_t v0;
  void *v1;

  operator delete(v1);
  if (!v0)
    JUMPOUT(0x223EDF4FCLL);
  JUMPOUT(0x223EDF4ECLL);
}

void sub_223EDF43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  sub_223EE2B80((_QWORD *)(v15 - 256));
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 40))(a14);
  sub_223EE3034(v15 - 184);
  JUMPOUT(0x223EDF574);
}

void sub_223EDF484()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x223EDF600);
}

void sub_223EDF48C()
{
  JUMPOUT(0x223EDF498);
}

void sub_223EDF524()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  JUMPOUT(0x223EDF60CLL);
}

void sub_223EDF540()
{
  JUMPOUT(0x223EDF60CLL);
}

void sub_223EDF54C()
{
  uint64_t v0;
  uint64_t v1;

  sub_223EE2B80((_QWORD *)(v1 - 256));
  if (v0)
    JUMPOUT(0x223EDF55CLL);
  JUMPOUT(0x223EDF56CLL);
}

void sub_223EDF58C()
{
  JUMPOUT(0x223EDF598);
}

void sub_223EDF5C4()
{
  JUMPOUT(0x223EDF60CLL);
}

void sub_223EDF5CC()
{
  JUMPOUT(0x223EDF60CLL);
}

void sub_223EDF5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void **sub_223EDF64C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223EDF6C4(_QWORD *a1, unint64_t *a2)
{
  uint64_t v3;
  float32x2_t *v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  unint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int32 v24;
  __int32 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float32x2_t v32;
  unint64_t v33;
  float32x2_t v34;
  unint64_t v35;

  v3 = a1[1];
  if (v3 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3))
  {
    v5 = (float32x2_t *)(**(_QWORD **)(*a1 + 8) + 112 * *(_QWORD *)*a1);
    v6 = v5[3];
    if (*(_QWORD *)&v6 && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v6 + 48))(v6)
      || (v7 = v5[5], *(_QWORD *)&v7) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v7 + 48))(v7)
      || (v8 = v5[7], *(_QWORD *)&v8) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v8 + 48))(v8)
      || (v9 = v5[9], *(_QWORD *)&v9) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v9 + 48))(v9))
    {
      v10 = (unint64_t)v5[3];
      v28 = (unint64_t)v5[2];
      v29 = v10;
      if (v10)
        (*(void (**)(unint64_t))(*(_QWORD *)v10 + 24))(v10);
      v11 = v5[5];
      v30 = (unint64_t)v5[4];
      v31 = (unint64_t)v11;
      if (v11)
        (*(void (**)(float32x2_t))(**(_QWORD **)&v11 + 24))(v11);
      v12 = v5[7];
      v32 = v5[6];
      v33 = (unint64_t)v12;
      if (v12)
        (*(void (**)(float32x2_t))(**(_QWORD **)&v12 + 24))(v12);
      v13 = v5[9];
      v34 = v5[8];
      v35 = (unint64_t)v13;
      if (v13)
        (*(void (**)(float32x2_t))(**(_QWORD **)&v13 + 24))(v13);
      v14 = v29;
      v26 = v28;
      v27 = v29;
      if (v29)
        (*(void (**)(unint64_t))(*(_QWORD *)v29 + 24))(v29);
      sub_223EDF6C4(&v26, a2);
      if (v14)
        (*(void (**)(unint64_t))(*(_QWORD *)v14 + 40))(v14);
      v15 = v31;
      v26 = v30;
      v27 = v31;
      if (v31)
        (*(void (**)(unint64_t))(*(_QWORD *)v31 + 24))(v31);
      sub_223EDF6C4(&v26, a2);
      if (v15)
        (*(void (**)(unint64_t))(*(_QWORD *)v15 + 40))(v15);
      v16 = v33;
      v26 = (unint64_t)v32;
      v27 = v33;
      if (v33)
        (*(void (**)(unint64_t))(*(_QWORD *)v33 + 24))(v33);
      sub_223EDF6C4(&v26, a2);
      if (v16)
        (*(void (**)(unint64_t))(*(_QWORD *)v16 + 40))(v16);
      v17 = v35;
      v26 = (unint64_t)v34;
      v27 = v35;
      if (v35)
        (*(void (**)(unint64_t))(*(_QWORD *)v35 + 24))(v35);
      sub_223EDF6C4(&v26, a2);
      if (v17)
        (*(void (**)(unint64_t))(*(_QWORD *)v17 + 40))(v17);
      if (v35)
        (*(void (**)(unint64_t))(*(_QWORD *)v35 + 40))(v35);
      if (v33)
        (*(void (**)(unint64_t))(*(_QWORD *)v33 + 40))(v33);
      if (v31)
        (*(void (**)(unint64_t))(*(_QWORD *)v31 + 40))(v31);
      if (v29)
        (*(void (**)(unint64_t))(*(_QWORD *)v29 + 40))(v29);
    }
    else
    {
      v18 = v5[11];
      v19 = vmul_f32(vadd_f32(v5[10], v18), (float32x2_t)0x3F0000003F000000);
      v20 = vsub_f32(v19, v18);
      v21 = vadd_f32(v19, v20);
      v24 = vsub_f32(v19, v20).u32[0];
      v25 = v21.i32[0];
      *(float *)&v22 = v19.f32[1] + v20.f32[1];
      v28 = (unint64_t)v21;
      LODWORD(v29) = v24;
      *((float *)&v29 + 1) = v19.f32[1] + v20.f32[1];
      *(float *)&v23 = v19.f32[1] - v20.f32[1];
      LODWORD(v30) = v21.i32[0];
      *((float *)&v30 + 1) = v19.f32[1] - v20.f32[1];
      sub_223EE47D8(a2, (uint64_t)&v28);
      v28 = __PAIR64__(v22, v24);
      v29 = __PAIR64__(v23, v24);
      v30 = __PAIR64__(v23, v25);
      sub_223EE47D8(a2, (uint64_t)&v28);
    }
  }
}

void sub_223EDF9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  char *v15;
  uint64_t v17;

  while (1)
  {
    v17 = *((_QWORD *)v15 - 1);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    v15 -= 16;
    if (v15 == &a15)
      _Unwind_Resume(exception_object);
  }
}

void sub_223EDFA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223EE4764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223EDFA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  char v8;
  va_list va;

  va_start(va, a7);
  if ((v8 & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  sub_223EE4764((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223EDFA64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void **v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[7];
  if (v2)
  {
    v3 = a1[8];
    v4 = (void *)a1[7];
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[7];
    }
    a1[8] = v2;
    operator delete(v4);
  }
  v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  v7 = (void **)a1[3];
  a1[3] = 0;
  if (v7)
  {
    v8 = (char *)*v7;
    if (*v7)
    {
      v9 = (char *)v7[1];
      v10 = *v7;
      if (v9 != v8)
      {
        do
        {
          if (*(v9 - 8))
          {
            v11 = *((_QWORD *)v9 - 5);
            if (v11)
              (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
            v12 = *((_QWORD *)v9 - 7);
            if (v12)
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
            v13 = *((_QWORD *)v9 - 9);
            if (v13)
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
            v14 = *((_QWORD *)v9 - 11);
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
            v15 = *((_QWORD *)v9 - 13);
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          }
          v9 -= 112;
        }
        while (v9 != v8);
        v10 = *v7;
      }
      v7[1] = v8;
      operator delete(v10);
    }
    MEMORY[0x227684CE8](v7, 0x20C40960023A9);
  }
  v16 = a1[2];
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  return a1;
}

uint64_t sub_223EDFBD4(uint64_t **a1, uint64_t a2, float *a3, int32x2_t a4)
{
  uint64_t v7;
  float v8;
  float v9;
  float32x2_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  BOOL v44;
  BOOL v45;
  float32x2_t v47;
  int v48;
  float v49;
  float v50;
  int v51;
  int v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  uint64_t v56;
  float v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  __n128 v74;
  int v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  float32x2_t v81;
  __int32 v82;
  uint64_t v83;
  __int32 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  char v90;
  uint64_t *v91[2];
  uint64_t *v92;
  uint64_t *v93;
  __n128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  unint64_t v99;
  unint64_t v100;

  v7 = *(_QWORD *)(a2 + 16);
  if (!v7 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
  {
    a4.i32[0] = *(_DWORD *)a2;
    v8 = *(float *)a2 * (float)(int)floorf(*a3 / *(float *)a2);
    v9 = *(float *)a2 * (float)(int)floorf(a3[1] / *(float *)a2);
    v10 = vadd_f32((float32x2_t)vdup_lane_s32(a4, 0), (float32x2_t)(LODWORD(v8) | ((unint64_t)LODWORD(v9) << 32)));
    v11 = *(_QWORD *)&v10 & 0xFFFFFFFF00000000 | LODWORD(v8);
    if (v8 <= v10.f32[0])
      v11 = (unint64_t)v10;
    v12 = ((unint64_t)LODWORD(v9) << 32) | v10.u32[0];
    if (v8 <= v10.f32[0])
      v12 = LODWORD(v8) | ((unint64_t)LODWORD(v9) << 32);
    if (v9 > v10.f32[1])
      v13 = v12 | ((unint64_t)v10.u32[1] << 32);
    else
      v13 = v12;
    if (v9 > v10.f32[1])
      v14 = v11 | ((unint64_t)LODWORD(v9) << 32);
    else
      v14 = v11;
    v15 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) == v15)
    {
      v22 = *(uint64_t **)(a2 + 24);
      v23 = v22[1];
      v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v23 - *v22) >> 4);
      v24 = v22[2];
      if (v23 >= v24)
      {
        if ((unint64_t)(v16 + 1) > 0x249249249249249)
          sub_22316E078();
        v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v24 - *v22) >> 4);
        v27 = 2 * v26;
        if (2 * v26 <= v16 + 1)
          v27 = v16 + 1;
        if (v26 >= 0x124924924924924)
          v28 = 0x249249249249249;
        else
          v28 = v27;
        *(_QWORD *)&v96 = v22 + 2;
        if (v28)
        {
          if (v28 > 0x249249249249249)
            sub_223174E94();
          v29 = (char *)operator new(112 * v28);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[112 * v16];
        v94.n128_u64[0] = (unint64_t)v29;
        v94.n128_u64[1] = (unint64_t)v30;
        *(_OWORD *)v30 = 0u;
        *((_OWORD *)v30 + 1) = 0u;
        *((_OWORD *)v30 + 2) = 0u;
        *((_OWORD *)v30 + 3) = 0u;
        *((_OWORD *)v30 + 4) = 0u;
        *((_QWORD *)v30 + 10) = v13;
        *((_QWORD *)v30 + 11) = v14;
        v30[104] = 1;
        *(_QWORD *)&v95 = v30 + 112;
        *((_QWORD *)&v95 + 1) = &v29[112 * v28];
        sub_223EE277C(v22, &v94);
        v25 = v22[1];
        sub_223EE29F4((uint64_t)&v94);
      }
      else
      {
        *(_OWORD *)(v23 + 48) = 0u;
        *(_OWORD *)(v23 + 64) = 0u;
        *(_OWORD *)(v23 + 16) = 0u;
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)v23 = 0u;
        *(_QWORD *)(v23 + 80) = v13;
        *(_QWORD *)(v23 + 88) = v14;
        *(_BYTE *)(v23 + 104) = 1;
        v25 = v23 + 112;
        v22[1] = v23 + 112;
      }
      v22[1] = v25;
      v31 = *(_QWORD *)(a2 + 24);
      v32 = (_QWORD *)operator new();
      *v32 = v16;
      v32[1] = v31;
      v94.n128_u64[0] = (unint64_t)v32;
      v33 = operator new();
      *(_QWORD *)v33 = &off_24EC640A8;
      *(int64x2_t *)(v33 + 8) = vdupq_n_s64(1uLL);
      *(_QWORD *)(v33 + 24) = v32;
      v94.n128_u64[1] = v33;
      sub_223EE22D0((void **)(a2 + 56), (uint64_t)&v94);
      if (v94.n128_u64[1])
        (*(void (**)(unint64_t))(*(_QWORD *)v94.n128_u64[1] + 32))(v94.n128_u64[1]);
    }
    else
    {
      v16 = *(_QWORD *)(v15 - 8);
      *(_QWORD *)(a2 + 40) = v15 - 8;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v94 = 0u;
      v99 = v13;
      v100 = v14;
      sub_223EE24AC(**(_QWORD **)(a2 + 24) + 112 * v16, (uint64_t *)&v94);
      v17 = *(_QWORD *)(a2 + 24);
      v18 = (_QWORD *)operator new();
      *v18 = v16;
      v18[1] = v17;
      v19 = operator new();
      *(_QWORD *)v19 = &off_24EC640A8;
      *(int64x2_t *)(v19 + 8) = vdupq_n_s64(1uLL);
      *(_QWORD *)(v19 + 24) = v18;
      v20 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v16);
      v21 = v20[1];
      *v20 = v18;
      v20[1] = v19;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    }
    v34 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v16);
    v36 = *v34;
    v35 = v34[1];
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
    v37 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = v36;
    *(_QWORD *)(a2 + 16) = v35;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
  }
  v94 = *(__n128 *)(**(_QWORD **)(*(_QWORD *)(a2 + 8) + 8) + 112 * **(_QWORD **)(a2 + 8) + 80);
  v39 = v94.n128_f32[1];
  v38 = v94.n128_f32[0];
  v41 = v94.n128_f32[3];
  v40 = v94.n128_f32[2];
  while (1)
  {
    v42 = *a3;
    v43 = a3[1];
    v44 = v38 > *a3 || v39 > v43;
    v45 = v44 || v40 <= v42;
    if (!v45 && v41 > v43)
      break;
    v47 = (float32x2_t)v94.n128_u64[0];
    if (v94.n128_f32[0] <= v42)
    {
      if (v94.n128_f32[2] <= v42)
      {
        v48 = 1;
        v49 = v94.n128_f32[3];
        v50 = v94.n128_f32[1];
        if (v94.n128_f32[1] > v43)
        {
LABEL_55:
          v51 = 0;
          v52 = -1;
          v53 = vsub_f32(*(float32x2_t *)&v94.n128_i8[8], (float32x2_t)v94.n128_u64[0]);
          if (v48 != 1)
            goto LABEL_56;
          goto LABEL_63;
        }
      }
      else
      {
        v48 = 0;
        v49 = v94.n128_f32[3];
        v50 = v94.n128_f32[1];
        if (v94.n128_f32[1] > v43)
          goto LABEL_55;
      }
    }
    else
    {
      v48 = -1;
      v49 = v94.n128_f32[3];
      v50 = v94.n128_f32[1];
      if (v94.n128_f32[1] > v43)
        goto LABEL_55;
    }
    if (v49 <= v43)
    {
      v51 = 1;
      v52 = 1;
      v53 = vsub_f32(*(float32x2_t *)&v94.n128_i8[8], (float32x2_t)v94.n128_u64[0]);
      if (v48 != 1)
      {
LABEL_56:
        if (v48)
        {
          if ((v52 + 1) <= 1)
            goto LABEL_61;
          if (v51)
          {
            v54.i32[0] = vsub_f32((float32x2_t)v94.n128_u64[0], v53).u32[0];
            v55.i32[0] = v94.n128_i32[2];
            v54.i32[1] = v94.n128_i32[1];
            v55.i32[1] = vadd_f32(*(float32x2_t *)(&v94 + 8), v53).i32[1];
            v47 = v54;
            v56 = 1;
            goto LABEL_66;
          }
        }
        else if (v50 > v43)
        {
LABEL_61:
          v47 = vsub_f32((float32x2_t)v94.n128_u64[0], v53);
          v55 = *(float32x2_t *)&v94.n128_i8[8];
          v56 = 3;
          goto LABEL_66;
        }
        goto LABEL_65;
      }
    }
    else
    {
      v51 = 0;
      v52 = 0;
      v53 = vsub_f32(*(float32x2_t *)&v94.n128_i8[8], (float32x2_t)v94.n128_u64[0]);
      if (v48 != 1)
        goto LABEL_56;
    }
LABEL_63:
    if (v50 > v43)
    {
      v55.i32[0] = vadd_f32(*(float32x2_t *)&v94.n128_i8[8], v53).u32[0];
      v55.i32[1] = v94.n128_i32[3];
      v47.i32[1] = vsub_f32(*(float32x2_t *)&v94, v53).i32[1];
      v56 = 2;
      goto LABEL_66;
    }
LABEL_65:
    v56 = 0;
    v55 = vadd_f32(*(float32x2_t *)&v94.n128_i8[8], v53);
LABEL_66:
    v94.n128_u64[0] = (unint64_t)v47;
    v38 = v47.f32[0];
    if ((vcgt_f32(v47, *(float32x2_t *)&v94.n128_i8[8]).u8[0] & 1) != 0)
    {
      v94.n128_u32[0] = v94.n128_u32[2];
      v38 = v94.n128_f32[2];
      v39 = v47.f32[1];
      if (v49 >= v47.f32[1])
      {
LABEL_68:
        *(float32x2_t *)&v94.n128_i8[8] = v55;
        if (v38 > v55.f32[0])
          goto LABEL_69;
        goto LABEL_73;
      }
    }
    else
    {
      v39 = v47.f32[1];
      if (v49 >= v47.f32[1])
        goto LABEL_68;
    }
    v94.n128_f32[1] = v49;
    v39 = v49;
    *(float32x2_t *)&v94.n128_i8[8] = v55;
    if (v38 > v55.f32[0])
    {
LABEL_69:
      v94.n128_u32[0] = v55.i32[0];
      v94.n128_f32[2] = v38;
      v40 = v38;
      v57 = v55.f32[1];
      v38 = v55.f32[0];
      if (v39 <= v55.f32[1])
        goto LABEL_70;
      goto LABEL_74;
    }
LABEL_73:
    v57 = v55.f32[1];
    v40 = v55.f32[0];
    if (v39 <= v55.f32[1])
    {
LABEL_70:
      v41 = v55.f32[1];
      goto LABEL_75;
    }
LABEL_74:
    v94.n128_u32[1] = v55.u32[1];
    v94.n128_f32[3] = v39;
    v41 = v39;
    v39 = v57;
LABEL_75:
    sub_223EE1F5C(&v92, (uint64_t **)(a2 + 24), (__int128 *)&v94);
    v58 = *(uint64_t **)(a2 + 8);
    v59 = *v58;
    v60 = *(_QWORD *)v58[1];
    v62 = v92;
    v61 = v93;
    if (v93)
    {
      (*(void (**)(uint64_t *))(*v93 + 24))(v93);
      (*(void (**)(uint64_t *))(*v61 + 24))(v61);
    }
    v63 = (uint64_t **)(v60 + 112 * v59);
    v64 = v63[1];
    *v63 = v62;
    v63[1] = v61;
    if (v64)
      (*(void (**)(uint64_t *))(*v64 + 40))(v64);
    if (v61)
      (*(void (**)(uint64_t *))(*v61 + 40))(v61);
    v65 = *v62;
    v66 = *(_QWORD *)v62[1];
    v68 = *(_QWORD *)(a2 + 8);
    v67 = *(_QWORD *)(a2 + 16);
    if (v67)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v67 + 24))(*(_QWORD *)(a2 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
    }
    v69 = v66 + 112 * v65 + 16 * v56;
    v70 = *(_QWORD *)(v69 + 24);
    *(_QWORD *)(v69 + 16) = v68;
    *(_QWORD *)(v69 + 24) = v67;
    if (v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
    if (v67)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
    if (v61)
      (*(void (**)(uint64_t *))(*v61 + 24))(v61);
    v71 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = v62;
    *(_QWORD *)(a2 + 16) = v61;
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71);
    if (v61)
      (*(void (**)(uint64_t *))(*v61 + 40))(v61);
  }
  v73 = *(uint64_t **)(a2 + 8);
  v72 = *(uint64_t **)(a2 + 16);
  v74 = *(__n128 *)(*(_QWORD *)v73[1] + 112 * *v73 + 80);
  v94 = v74;
  *a1 = v73;
  a1[1] = v72;
  if (v72)
    (*(void (**)(uint64_t *))(*v72 + 24))(v72);
  v75 = 1;
  while (2)
  {
    v76 = (_QWORD *)(*(_QWORD *)v73[1] + 112 * *v73);
    v77 = v76[3];
    if (v77 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 48))(v77)
      || (v78 = v76[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 48))(v78)
      || (v79 = v76[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 48))(v79)
      || (result = v76[9]) != 0
      && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result)) != 0
      || !v75 && (float)(v94.n128_f32[2] - v94.n128_f32[0]) >= (float)(*(float *)a2 * 1.25))
    {
      v74.n128_u32[1] = v94.n128_u32[1];
      v81 = vmul_f32(vadd_f32((float32x2_t)v94.n128_u64[0], *(float32x2_t *)&v94.n128_i8[8]), (float32x2_t)0x3F0000003F000000);
      v82 = v81.i32[0];
      if (*a3 < v81.f32[0])
      {
        v83 = 0;
        v94.n128_u32[2] = v81.i32[0];
        if ((vcgt_f32((float32x2_t)v94.n128_u64[0], v81).u32[0] & 1) != 0)
        {
          v84 = v81.i32[0];
          v82 = v94.n128_u32[0];
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      v94.n128_u32[0] = v81.i32[0];
      if ((vcgt_f32(v81, *(float32x2_t *)&v94.n128_i8[8]).u32[0] & 1) != 0)
      {
        v84 = v94.n128_i32[2];
        v83 = 1;
LABEL_111:
        v94.n128_u32[0] = v84;
        v94.n128_u32[2] = v82;
LABEL_112:
        v81.i32[0] = v81.i32[1];
        if (a3[1] < v81.f32[1])
        {
LABEL_113:
          v74.n128_u32[0] = v94.n128_u32[1];
          v94.n128_u32[3] = v81.i32[0];
          if (v94.n128_f32[1] > v81.f32[0])
          {
            v94.n128_u32[1] = v81.i32[0];
            v94.n128_u32[3] = v74.n128_u32[1];
          }
          v85 = *(_QWORD *)v73[1] + 112 * *v73 + 16 * v83;
          v86 = *(uint64_t **)(v85 + 24);
          if (!v86)
            goto LABEL_123;
LABEL_121:
          v87 = *(uint64_t **)(v85 + 16);
          (*(void (**)(uint64_t *, __n128))(*v86 + 24))(v86, v74);
          if (!(*(uint64_t (**)(uint64_t *))(*v86 + 48))(v86))
            goto LABEL_123;
          v75 = 1;
          v73 = v87;
LABEL_135:
          (*(void (**)(uint64_t *))(*v86 + 24))(v86);
          v90 = 0;
          v88 = a1[1];
          *a1 = v73;
          a1[1] = v86;
          if (!v88)
            goto LABEL_139;
          goto LABEL_138;
        }
      }
      else
      {
        v83 = 1;
        v81.i32[0] = v81.i32[1];
        if (a3[1] < v81.f32[1])
          goto LABEL_113;
      }
      v74.n128_u32[0] = v94.n128_u32[3];
      v94.n128_u32[1] = v81.i32[0];
      if (v81.f32[0] > v94.n128_f32[3])
      {
        v94.n128_u32[1] = v94.n128_u32[3];
        v94.n128_u32[3] = v81.i32[0];
      }
      v83 |= 2uLL;
      v85 = *(_QWORD *)v73[1] + 112 * *v73 + 16 * v83;
      v86 = *(uint64_t **)(v85 + 24);
      if (v86)
        goto LABEL_121;
LABEL_123:
      v88 = a1[1];
      v91[0] = v73;
      v91[1] = v88;
      if (v88)
        (*(void (**)(uint64_t *, __n128))(*v88 + 24))(v88, v74);
      sub_223EE1D0C(&v92, a2, v91, (__int128 *)&v94, v83);
      v73 = v92;
      v89 = v93;
      if (v93)
        (*(void (**)(uint64_t *))(*v93 + 24))(v93);
      if (v86)
        (*(void (**)(uint64_t *))(*v86 + 40))(v86);
      if (v89)
        (*(void (**)(uint64_t *))(*v89 + 40))(v89);
      if (v88)
        (*(void (**)(uint64_t *))(*v88 + 40))(v88);
      v75 = 0;
      if (v89)
      {
        v86 = v89;
        goto LABEL_135;
      }
      v86 = 0;
      v90 = 1;
      *a1 = v73;
      a1[1] = 0;
      if (!v88)
      {
LABEL_139:
        if ((v90 & 1) == 0)
        {
          (*(void (**)(uint64_t *))(*v86 + 40))(v86);
          v73 = *a1;
        }
        continue;
      }
LABEL_138:
      (*(void (**)(uint64_t *))(*v88 + 40))(v88);
      goto LABEL_139;
    }
    return result;
  }
}

void sub_223EE05DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223EE29F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223EE05F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 32))(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223EE078C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_22316E078();
    v5 = 16 * a3;
    v6 = (char *)operator new(16 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v8 = a2 + v5;
    do
    {
      v9 = &v6[v7];
      v10 = a2 + v7;
      v11 = *(_QWORD *)(a2 + v7 + 8);
      *(_QWORD *)v9 = *(_QWORD *)(a2 + v7);
      *((_QWORD *)v9 + 1) = v11;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v7 += 16;
    }
    while (v10 + 16 != v8);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_223EE0840(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  uint64_t v6;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 1);
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223EE08D8(uint64_t a1, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v11;
  __int128 v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  float32x2_t *v19;
  float v20;
  BOOL v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  int v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  float v29;
  int v30;
  int v31;
  float32x2_t v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  float32x2_t v53;
  uint64_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float v58;
  int32x2_t v59;
  float32x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  float v68;
  __int128 v69;
  float32x2_t v70;
  uint64_t *v71;
  uint64_t *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 __p;
  __int128 v77;
  __int128 v78;

  if (!a2)
    return;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11))
  {
    LODWORD(a8) = *(_DWORD *)a1;
    v53 = (float32x2_t)*a3;
    v54 = 8 * a2;
    v55 = (float32x2_t)*a3;
    do
    {
      v56 = (float32x2_t)*a3++;
      v53 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v53, v56), (int8x8_t)v56, (int8x8_t)v53);
      v55 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v56, v55), (int8x8_t)v56, (int8x8_t)v55);
      v54 -= 8;
    }
    while (v54);
    v68 = *(float *)a1;
    v70 = vmul_n_f32(vcvt_f32_s32(vcvt_s32_f32(vrndm_f32(vdiv_f32(v53, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0))))), *(float *)&a8);
    v57 = vsub_f32(v55, v70);
    if (v57.f32[0] < v57.f32[1])
      v57.f32[0] = v57.f32[1];
    v58 = log2f(floorf(v57.f32[0] / *(float *)&a8) + 1.0);
    *(float *)v59.i32 = v68 * exp2f(ceilf(v58));
    v60 = vadd_f32(v70, (float32x2_t)vdup_lane_s32(v59, 0));
    *(float32x2_t *)&__p = v70;
    *((float32x2_t *)&__p + 1) = v60;
    if (v70.f32[0] > v60.f32[0])
    {
      LODWORD(__p) = v60.i32[0];
      DWORD2(__p) = v70.i32[0];
      if (v70.f32[1] <= v60.f32[1])
      {
LABEL_74:
        sub_223EE2CC0(&v73, (uint64_t **)(a1 + 24), &__p);
        v61 = *((_QWORD *)&v73 + 1);
        v62 = v73;
        if (!*((_QWORD *)&v73 + 1))
          goto LABEL_79;
        goto LABEL_78;
      }
    }
    else if (v70.f32[1] <= v60.f32[1])
    {
      goto LABEL_74;
    }
    DWORD1(__p) = v60.i32[1];
    HIDWORD(__p) = v70.i32[1];
    sub_223EE2CC0(&v73, (uint64_t **)(a1 + 24), &__p);
    v61 = *((_QWORD *)&v73 + 1);
    v62 = v73;
    if (!*((_QWORD *)&v73 + 1))
    {
LABEL_79:
      v63 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v62;
      *(_QWORD *)(a1 + 16) = v61;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
      if (v61)
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
      return;
    }
LABEL_78:
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61);
    goto LABEL_79;
  }
  v74 = 0u;
  v75 = 0u;
  v73 = 0u;
  sub_223EE33E0(&v73, a3, (8 * a2) >> 3);
  v13 = (void **)*((_QWORD *)&v73 + 1);
  __p = v73;
  v14 = (void **)v74;
  v77 = v74;
  v15 = *((_QWORD *)&v75 + 1);
  v78 = v75;
  if (!*((_QWORD *)&v75 + 1))
    goto LABEL_84;
  do
  {
    *(_QWORD *)&v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&__p + 1)
                                            + (((unint64_t)v78 >> 6) & 0x3FFFFFFFFFFFFF8))
                                + 8 * (v78 & 0x1FF));
    v69 = v12;
    *(_QWORD *)&v78 = v78 + 1;
    *((_QWORD *)&v78 + 1) = v15 - 1;
    if ((unint64_t)v78 >= 0x400)
    {
      operator delete(**((void ***)&__p + 1));
      *((_QWORD *)&__p + 1) += 8;
      *(_QWORD *)&v78 = v78 - 512;
    }
    v16 = **(_QWORD **)(a1 + 8);
    v17 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v18 = (float32x2_t *)(v17 + 112 * v16);
    v20 = v18[10].f32[0];
    v19 = v18 + 10;
    if (v20 > *(float *)&v69
      || (v19->f32[1] <= *((float *)&v69 + 1) ? (v21 = *(float *)(v17 + 112 * v16 + 88) <= *(float *)&v69) : (v21 = 1),
          v21 || *(float *)(v17 + 112 * v16 + 92) <= *((float *)&v69 + 1)))
    {
      v22 = *v19;
      v23 = *(float32x2_t *)(v17 + 112 * v16 + 88);
      v24 = v22.f32[0];
      if (*(float *)&v69 >= v22.f32[0])
      {
        if (*(float *)&v69 >= v23.f32[0])
        {
          v25 = 1;
          v26 = v22;
          v27 = v23;
          v28 = v23.f32[1];
          v29 = v22.f32[1];
          if (v22.f32[1] > *((float *)&v69 + 1))
            goto LABEL_24;
        }
        else
        {
          v25 = 0;
          v26 = v22;
          v27 = v23;
          v28 = v23.f32[1];
          v29 = v22.f32[1];
          if (v22.f32[1] > *((float *)&v69 + 1))
            goto LABEL_24;
        }
      }
      else
      {
        v25 = -1;
        v26 = v22;
        v27 = v23;
        v28 = v23.f32[1];
        v29 = v22.f32[1];
        if (v22.f32[1] > *((float *)&v69 + 1))
        {
LABEL_24:
          v30 = 0;
          v31 = -1;
          v32 = vsub_f32(v27, v26);
          if (v25 != 1)
            goto LABEL_25;
          goto LABEL_31;
        }
      }
      if (v28 <= *((float *)&v69 + 1))
      {
        v30 = 1;
        v31 = 1;
        v32 = vsub_f32(v27, v26);
        if (v25 != 1)
          goto LABEL_25;
      }
      else
      {
        v30 = 0;
        v31 = 0;
        v32 = vsub_f32(v27, v26);
        if (v25 != 1)
        {
LABEL_25:
          if (v25)
          {
            if ((v31 + 1) > 1)
            {
              if (v30)
              {
                v26.f32[0] = v24 - v32.f32[0];
                v27.i32[1] = vadd_f32(v32, v27).i32[1];
                v33 = 1;
                *(float32x2_t *)&v73 = v26;
                v34 = v24 - v32.f32[0];
                if ((float)(v24 - v32.f32[0]) <= v23.f32[0])
                  goto LABEL_39;
LABEL_38:
                LODWORD(v73) = v23.i32[0];
                v34 = v23.f32[0];
                goto LABEL_39;
              }
LABEL_37:
              v33 = 0;
              v27 = vadd_f32(v32, v27);
              *(float32x2_t *)&v73 = v26;
              v34 = v26.f32[0];
              if (v26.f32[0] <= v23.f32[0])
                goto LABEL_39;
              goto LABEL_38;
            }
          }
          else if (v29 <= *((float *)&v69 + 1))
          {
            goto LABEL_37;
          }
          v26 = vsub_f32(v26, v32);
          v33 = 3;
          *(float32x2_t *)&v73 = v26;
          v34 = v26.f32[0];
          if (v26.f32[0] > v23.f32[0])
            goto LABEL_38;
LABEL_39:
          v35 = v26.f32[1];
          if (v28 < v26.f32[1])
          {
            *((float *)&v73 + 1) = v28;
            v35 = v28;
            *((float32x2_t *)&v73 + 1) = v27;
            if (v34 <= v27.f32[0])
            {
LABEL_41:
              if (v35 <= v27.f32[1])
              {
LABEL_43:
                sub_223EE1F5C(&v71, (uint64_t **)(a1 + 24), &v73);
                v36 = *(uint64_t **)(a1 + 8);
                v37 = *v36;
                v38 = *(_QWORD *)v36[1];
                v40 = v71;
                v39 = v72;
                if (v72)
                {
                  (*(void (**)(uint64_t *))(*v72 + 24))(v72);
                  (*(void (**)(uint64_t *))(*v39 + 24))(v39);
                }
                v41 = (uint64_t **)(v38 + 112 * v37);
                v42 = v41[1];
                *v41 = v40;
                v41[1] = v39;
                if (v42)
                  (*(void (**)(uint64_t *))(*v42 + 40))(v42);
                if (v39)
                  (*(void (**)(uint64_t *))(*v39 + 40))(v39);
                v43 = *v40;
                v44 = *(_QWORD *)v40[1];
                v46 = *(_QWORD *)(a1 + 8);
                v45 = *(_QWORD *)(a1 + 16);
                if (v45)
                {
                  (*(void (**)(_QWORD))(*(_QWORD *)v45 + 24))(*(_QWORD *)(a1 + 16));
                  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
                }
                v47 = v44 + 112 * v43 + 16 * v33;
                v48 = *(_QWORD *)(v47 + 24);
                *(_QWORD *)(v47 + 16) = v46;
                *(_QWORD *)(v47 + 24) = v45;
                if (v48)
                  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
                if (v45)
                  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
                if (v39)
                  (*(void (**)(uint64_t *))(*v39 + 24))(v39);
                v49 = *(_QWORD *)(a1 + 16);
                *(_QWORD *)(a1 + 8) = v40;
                *(_QWORD *)(a1 + 16) = v39;
                if (v49)
                  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
                v50 = *((_QWORD *)&__p + 1);
                v51 = (((_QWORD)v77 - *((_QWORD *)&__p + 1)) << 6) - 1;
                if ((_QWORD)v77 == *((_QWORD *)&__p + 1))
                  v51 = 0;
                v52 = *((_QWORD *)&v78 + 1) + v78;
                if (v51 == *((_QWORD *)&v78 + 1) + (_QWORD)v78)
                {
                  sub_223EE3EF8((uint64_t)&__p);
                  v50 = *((_QWORD *)&__p + 1);
                  v52 = *((_QWORD *)&v78 + 1) + v78;
                }
                *((_QWORD *)&v12 + 1) = *((_QWORD *)&v69 + 1);
                *(_QWORD *)(*(_QWORD *)(v50 + ((v52 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v52 & 0x1FF)) = v69;
                ++*((_QWORD *)&v78 + 1);
                if (v39)
                  (*(void (**)(uint64_t *))(*v39 + 40))(v39);
                goto LABEL_6;
              }
LABEL_42:
              DWORD1(v73) = v27.i32[1];
              *((float *)&v73 + 3) = v35;
              goto LABEL_43;
            }
          }
          else
          {
            *((float32x2_t *)&v73 + 1) = v27;
            if (v34 <= v27.f32[0])
              goto LABEL_41;
          }
          LODWORD(v73) = v27.i32[0];
          *((float *)&v73 + 2) = v34;
          if (v35 <= v27.f32[1])
            goto LABEL_43;
          goto LABEL_42;
        }
      }
LABEL_31:
      if (v29 <= *((float *)&v69 + 1))
        goto LABEL_37;
      v27.f32[0] = v32.f32[0] + v23.f32[0];
      v26.i32[1] = vsub_f32(v26, v32).i32[1];
      v33 = 2;
      *(float32x2_t *)&v73 = v26;
      v34 = v26.f32[0];
      if (v26.f32[0] > v23.f32[0])
        goto LABEL_38;
      goto LABEL_39;
    }
LABEL_6:
    v15 = *((_QWORD *)&v78 + 1);
  }
  while (*((_QWORD *)&v78 + 1));
  v13 = (void **)*((_QWORD *)&__p + 1);
  v14 = (void **)v77;
LABEL_84:
  *((_QWORD *)&v78 + 1) = 0;
  v64 = (char *)v14 - (char *)v13;
  if ((unint64_t)((char *)v14 - (char *)v13) >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v14 = (void **)v77;
      v13 = (void **)(*((_QWORD *)&__p + 1) + 8);
      *((_QWORD *)&__p + 1) = v13;
      v64 = v77 - (_QWORD)v13;
    }
    while ((_QWORD)v77 - (_QWORD)v13 > 0x10uLL);
  }
  v65 = v64 >> 3;
  if (v65 == 1)
  {
    v66 = 256;
LABEL_90:
    *(_QWORD *)&v78 = v66;
  }
  else if (v65 == 2)
  {
    v66 = 512;
    goto LABEL_90;
  }
  if (v13 != v14)
  {
    do
    {
      v67 = *v13++;
      operator delete(v67);
    }
    while (v13 != v14);
    if ((_QWORD)v77 != *((_QWORD *)&__p + 1))
      *(_QWORD *)&v77 = v77 + ((*((_QWORD *)&__p + 1) - v77 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)__p)
    operator delete((void *)__p);
}

void sub_223EE0F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  _Unwind_Resume(a1);
}

void sub_223EE0FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  sub_22323FBC0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223EE105C(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

uint64_t sub_223EE10A4(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x55];
    v6 = (char *)*v5 + 48 * (v4 % 0x55);
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x55] + 48 * ((*(_QWORD *)(a1 + 40) + v4) % 0x55);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 3);
        if (v8)
        {
          *((_QWORD *)v6 + 4) = v8;
          operator delete(v8);
        }
        v9 = *((_QWORD *)v6 + 1);
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        v6 += 48;
        if (v6 - (_BYTE *)*v5 == 4080)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 42;
    goto LABEL_19;
  }
  if (v12 == 2)
  {
    v13 = 85;
LABEL_19:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223EE1230(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  result = (uint64_t)a2[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    if (result)
    {
      v5 = (_QWORD *)(*(_QWORD *)(*a2)[1] + 112 * **a2);
      v6 = v5[3];
      if (v6 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6)
        || (v7 = v5[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7)
        || (v8 = v5[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8)
        || (v9 = v5[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9))
      {
        v10 = *(_QWORD *)(*a2)[1] + 112 * **a2;
        v12 = *(uint64_t **)(v10 + 16);
        v11 = *(_QWORD *)(v10 + 24);
        v13 = (_QWORD *)(v10 + 16);
        v29 = v12;
        v30 = v11;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        sub_223EE4498(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
        v14 = v13[3];
        v29 = (uint64_t *)v13[2];
        v30 = v14;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        sub_223EE4498(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
        v15 = v13[5];
        v29 = (uint64_t *)v13[4];
        v30 = v15;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
        sub_223EE4498(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
        v16 = v13[7];
        v29 = (uint64_t *)v13[6];
        v30 = v16;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        sub_223EE4498(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(*a2)[1] + 112 * **a2 + 8);
      if (v17 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17))
      {
        v19 = *a2;
        v18 = a2[1];
        if (v18)
          (*(void (**)(uint64_t *))(*v18 + 24))(a2[1]);
        while (1)
        {
          if (v18)
            (*(void (**)(uint64_t *))(*v18 + 24))(v18);
          v20 = (uint64_t *)(*(_QWORD *)v19[1] + 112 * *v19);
          v22 = *v20;
          v21 = (uint64_t *)v20[1];
          if (v21)
          {
            (*(void (**)(uint64_t *))(*v21 + 24))(v21);
            (*(void (**)(uint64_t *))(*v21 + 24))(v21);
          }
          if (v18)
            (*(void (**)(uint64_t *))(*v18 + 40))(v18);
          if (v21)
            (*(void (**)(uint64_t *))(*v21 + 40))(v21);
          sub_223EE4548(a1 + 24, *v19);
          if (v18)
            (*(void (**)(uint64_t *))(*v18 + 40))(v18);
          if (!v21)
            break;
          if (!(*(uint64_t (**)(uint64_t *))(*v21 + 48))(v21))
            break;
          v19 = (uint64_t *)v22;
          v23 = (_QWORD *)(**(_QWORD **)(v22 + 8) + 112 * *(_QWORD *)v22);
          v24 = v23[3];
          if (v24)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24))
              break;
          }
          v25 = v23[5];
          if (v25)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25))
              break;
          }
          v26 = v23[7];
          if (v26)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26))
              break;
          }
          v27 = v23[9];
          v18 = v21;
          if (v27)
          {
            v18 = v21;
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27))
              break;
          }
        }
        result = sub_223EE1680(a1);
        if (v21)
          return (*(uint64_t (**)(uint64_t *))(*v21 + 40))(v21);
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
        return sub_223EE4548(a1 + 24, **a2);
      }
    }
  }
  return result;
}

void sub_223EE15C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EE1680(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = a1 + 24;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) - **(_QWORD **)(a1 + 24)) >> 4) != (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3)
  {
    while (1)
    {
      v4 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 112 * **(_QWORD **)(a1 + 8));
      v5 = v4[3];
      if (!v5 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5))
      {
        v6 = v4[5];
        if (!v6 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6))
        {
          v7 = v4[7];
          if (!v7 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
          {
            result = v4[9];
            if (!result)
              return result;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
            if (!result)
              return result;
          }
        }
      }
      v9 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 16);
      if (v8)
        (*(void (**)(_QWORD))(*(_QWORD *)v8 + 24))(*(_QWORD *)(a1 + 16));
      v10 = (_QWORD *)(**(_QWORD **)(v9 + 8) + 112 * *(_QWORD *)v9);
      v11 = v10[3];
      v35 = v11;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v12 = v10[5];
      v38 = v12;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = v10[7];
      v41 = v13;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v14 = v10[9];
      v44 = v14;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
      if (v35)
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
        v16 = v15 == 0;
        v17 = v15 != 0;
        v18 = v38;
        if (!v38)
          goto LABEL_33;
      }
      else
      {
        v17 = 0;
        v16 = 1;
        v18 = v38;
        if (!v38)
          goto LABEL_33;
      }
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
      if (v19)
        v20 = v16;
      else
        v20 = 1;
      if (v19)
        v17 = 1;
      if (v20 != 1)
      {
LABEL_40:
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
        result = v35;
        if (v35)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
        v22 = 0;
        if (v8)
          goto LABEL_58;
        goto LABEL_59;
      }
LABEL_33:
      if (v41 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41))
      {
        if (v17)
          goto LABEL_40;
        v17 = 1;
      }
      if (v44)
      {
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
        if (v17 && v21)
          goto LABEL_40;
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
      }
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
      result = v35;
      if (v35)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
      v22 = 1;
      if (v8)
LABEL_58:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
LABEL_59:
      if (!v22)
        return result;
      v23 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 112 * **(_QWORD **)(a1 + 8);
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      v26 = (_QWORD *)(v23 + 16);
      v34 = v25;
      v36 = v24;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
      v27 = v26[3];
      v37 = v26[2];
      v39 = v27;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      v28 = v26[5];
      v40 = v26[4];
      v42 = v28;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      v29 = v26[7];
      v43 = v26[6];
      v45 = v29;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
      if (v36
        && (v30 = v34,
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36),
            (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 48))(v36)))
      {
        v31 = v36;
      }
      else
      {
        v30 = v37;
        v31 = v39;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
        if (!v39 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39))
        {
          v30 = v40;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
          if (v42 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42))
          {
            v31 = v42;
          }
          else
          {
            v30 = v43;
            v31 = v45;
            if (v45)
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
          }
        }
      }
      v32 = *(_QWORD *)(**(_QWORD **)(v30 + 8) + 112 * *(_QWORD *)v30 + 8);
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
      }
      sub_223EE4548(v2, **(_QWORD **)(a1 + 8));
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
      v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v30;
      *(_QWORD *)(a1 + 16) = v31;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    }
  }
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_223EE1BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  sub_223EE2B80(&a9);
  _Unwind_Resume(a1);
}

void sub_223EE1CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223EE4764(&a9);
  JUMPOUT(0x223EE1CE8);
}

uint64_t sub_223EE1D0C(uint64_t **a1, uint64_t a2, uint64_t **a3, __int128 *a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t **v24;

  v9 = a5;
  v10 = *(_QWORD *)(*(_QWORD *)(*a3)[1] + 112 * **a3 + 16 * a5 + 24);
  if (v10
    && ((*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10),
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10),
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10),
        v11))
  {
    v12 = *(_QWORD *)(*a3)[1] + 112 * **a3 + 16 * v9;
    result = *(_QWORD *)(v12 + 24);
    *a1 = *(uint64_t **)(v12 + 16);
    a1[1] = (uint64_t *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  else
  {
    sub_223EE2CC0(a1, (uint64_t **)(a2 + 24), a4);
    v14 = **a3;
    v15 = *(_QWORD *)(*a3)[1];
    v17 = *a1;
    v16 = a1[1];
    if (v16)
    {
      (*(void (**)(uint64_t *))(*v16 + 24))(v16);
      (*(void (**)(uint64_t *))(*v16 + 24))(v16);
    }
    v18 = v15 + 112 * v14 + 16 * v9;
    v19 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = v16;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    if (v16)
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
    v20 = *v17;
    v21 = *(_QWORD *)v17[1];
    v23 = *a3;
    v22 = a3[1];
    if (v22)
    {
      (*(void (**)(uint64_t *))(*v22 + 24))(v22);
      (*(void (**)(uint64_t *))(*v22 + 24))(v22);
    }
    v24 = (uint64_t **)(v21 + 112 * v20);
    result = (uint64_t)v24[1];
    *v24 = v23;
    v24[1] = v22;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    if (v22)
      return (*(uint64_t (**)(uint64_t *))(*v22 + 40))(v22);
  }
  return result;
}

void sub_223EE1ED4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223EE1F5C(_QWORD *a1, uint64_t **a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v6 = a2[2];
  if (a2[1] == v6)
  {
    v14 = *a2;
    v16 = **a2;
    v15 = (*a2)[1];
    v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - v16) >> 4);
    v17 = (*a2)[2];
    if (v15 >= v17)
    {
      if ((unint64_t)(v7 + 1) > 0x249249249249249)
        sub_22316E078();
      v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17 - v16) >> 4);
      v20 = 2 * v19;
      if (2 * v19 <= v7 + 1)
        v20 = v7 + 1;
      if (v19 >= 0x124924924924924)
        v21 = 0x249249249249249;
      else
        v21 = v20;
      *(_QWORD *)&v34 = *a2 + 2;
      if (v21)
      {
        if (v21 > 0x249249249249249)
          sub_223174E94();
        v22 = (char *)operator new(112 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[112 * v7];
      *(_QWORD *)&v32 = v22;
      *((_QWORD *)&v32 + 1) = v23;
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      *((_OWORD *)v23 + 2) = 0u;
      *((_OWORD *)v23 + 3) = 0u;
      v24 = *a3;
      *((_OWORD *)v23 + 4) = 0u;
      *((_OWORD *)v23 + 5) = v24;
      v23[104] = 1;
      *(_QWORD *)&v33 = v23 + 112;
      *((_QWORD *)&v33 + 1) = &v22[112 * v21];
      sub_223EE277C(v14, &v32);
      v18 = v14[1];
      sub_223EE29F4((uint64_t)&v32);
    }
    else
    {
      *(_OWORD *)(v15 + 48) = 0u;
      *(_OWORD *)(v15 + 64) = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)v15 = 0u;
      *(_QWORD *)(v15 + 80) = *(_QWORD *)a3;
      *(_QWORD *)(v15 + 88) = *((_QWORD *)a3 + 1);
      *(_BYTE *)(v15 + 104) = 1;
      v18 = v15 + 112;
      v14[1] = v15 + 112;
    }
    v14[1] = v18;
    v25 = *a2;
    v26 = (_QWORD *)operator new();
    *v26 = v7;
    v26[1] = v25;
    *(_QWORD *)&v32 = v26;
    v27 = operator new();
    *(_QWORD *)v27 = &off_24EC640A8;
    *(int64x2_t *)(v27 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v27 + 24) = v26;
    *((_QWORD *)&v32 + 1) = v27;
    sub_223EE22D0((void **)a2 + 4, (uint64_t)&v32);
    if (*((_QWORD *)&v32 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 32))(*((_QWORD *)&v32 + 1));
  }
  else
  {
    v7 = *(v6 - 1);
    a2[2] = v6 - 1;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v8 = *a3;
    v36 = 0u;
    v37 = v8;
    sub_223EE24AC(**a2 + 112 * v7, (uint64_t *)&v32);
    v9 = *a2;
    v10 = (_QWORD *)operator new();
    *v10 = v7;
    v10[1] = v9;
    v11 = operator new();
    *(_QWORD *)v11 = &off_24EC640A8;
    *(int64x2_t *)(v11 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v11 + 24) = v10;
    v12 = &a2[4][2 * v7];
    v13 = v12[1];
    *v12 = (uint64_t)v10;
    v12[1] = v11;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  }
  v28 = &a2[4][2 * v7];
  v30 = *v28;
  v29 = v28[1];
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  *a1 = v30;
  a1[1] = v29;
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
}

void sub_223EE225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223EE29F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223EE2274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  _Unwind_Resume(exception_object);
}

void sub_223EE22D0(void **a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v7 = ((char *)v4 - (_BYTE *)*a1) >> 4;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60)
      sub_22316E078();
    v9 = v5 - (_QWORD)*a1;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v8 = 0xFFFFFFFFFFFFFFFLL;
    if (v8 >> 60)
      sub_223174E94();
    v10 = 16 * v8;
    v11 = (char *)operator new(16 * v8);
    v12 = &v11[16 * v7];
    *(_OWORD *)v12 = *(_OWORD *)a2;
    v6 = v12 + 16;
    v13 = &v11[v10];
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 == *a1)
    {
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = &v12[v16];
        v18 = *(_QWORD *)&v14[v16 - 8];
        *((_QWORD *)v17 - 2) = *(_QWORD *)&v14[v16 - 16];
        *((_QWORD *)v17 - 1) = v18;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v16 -= 16;
      }
      while (&v14[v16] != v15);
      v14 = (char *)*a1;
      v19 = (char *)a1[1];
      *a1 = &v12[v16];
      a1[1] = v6;
      a1[2] = v13;
      while (v19 != v14)
      {
        v20 = *((_QWORD *)v19 - 1);
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
        v19 -= 16;
      }
    }
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v4 = *(_QWORD *)a2;
    v4[1] = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = v4 + 2;
    a1[1] = v4 + 2;
  }
  a1[1] = v6;
}

uint64_t sub_223EE24AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *a2;
  v4 = a2[1];
  if (*(_BYTE *)(a1 + 104))
  {
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(a2[1]);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v8 = a2[2];
    v7 = a2[3];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(a2[3]);
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    v11 = a2[4];
    v10 = a2[5];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(a2[5]);
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v10;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v14 = a2[6];
    v13 = a2[7];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(a2[7]);
    v15 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v13;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    v17 = a2[8];
    v16 = a2[9];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(a2[9]);
    v18 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = v17;
    *(_QWORD *)(a1 + 72) = v16;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = a2[11];
    return a1;
  }
  else
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v20 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v20;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
    v21 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v21;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v22 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v22;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
    v23 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v23;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_BYTE *)(a1 + 104) = 1;
    return a1;
  }
}

void sub_223EE2694(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

void sub_223EE26BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    v1 -= 16;
    if (v1 == v0)
      JUMPOUT(0x223EE2698);
  }
}

_QWORD *sub_223EE26F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[9];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[7];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = a1[5];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v6 = a1[1];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  return a1;
}

uint64_t sub_223EE277C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  char i;
  __int128 v18;
  __int128 v19;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  *(_QWORD *)&v19 = v6;
  *((_QWORD *)&v19 + 1) = v6;
  v18 = v19;
  v16[0] = a1 + 2;
  v16[1] = &v18;
  v16[2] = &v19;
  for (i = 0; v4 != v5; *((_QWORD *)&v19 + 1) -= 112)
  {
    *(_BYTE *)(v6 - 112) = 0;
    *(_BYTE *)(v6 - 8) = 0;
    if (*(_BYTE *)(v4 - 8))
    {
      v7 = *(_QWORD *)(v4 - 104);
      *(_QWORD *)(v6 - 112) = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v6 - 104) = v7;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v8 = *(_QWORD *)(v4 - 88);
      *(_QWORD *)(v6 - 96) = *(_QWORD *)(v4 - 96);
      *(_QWORD *)(v6 - 88) = v8;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      v9 = *(_QWORD *)(v4 - 72);
      *(_QWORD *)(v6 - 80) = *(_QWORD *)(v4 - 80);
      *(_QWORD *)(v6 - 72) = v9;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v10 = *(_QWORD *)(v4 - 56);
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v4 - 64);
      *(_QWORD *)(v6 - 56) = v10;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      v11 = *(_QWORD *)(v4 - 40);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v4 - 48);
      *(_QWORD *)(v6 - 40) = v11;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v4 - 32);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v4 - 24);
      *(_BYTE *)(v6 - 8) = 1;
    }
    v4 -= 112;
    v6 = *((_QWORD *)&v19 + 1) - 112;
  }
  i = 1;
  result = sub_223EE2ABC((uint64_t)v16);
  a2[1] = v6;
  v13 = *a1;
  *a1 = v6;
  a2[1] = v13;
  v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

void sub_223EE28F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = v9 - 48;
  while (1)
  {
    v12 = *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v11 -= 16;
    if (v11 == v9 - 96)
    {
      v13 = *(_QWORD *)(v9 - 104);
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      if (*(_BYTE *)(v9 - 8))
      {
        v14 = *(_QWORD *)(v9 - 40);
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        v15 = *(_QWORD *)(v9 - 56);
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
        v16 = *(_QWORD *)(v9 - 72);
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
        v17 = *(_QWORD *)(v9 - 88);
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
        v18 = *(_QWORD *)(v9 - 104);
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      }
      sub_223EE2ABC((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_223EE29F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    if (*(_BYTE *)(i - 8))
    {
      v4 = *(_QWORD *)(i - 40);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      v5 = *(_QWORD *)(i - 56);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v6 = *(_QWORD *)(i - 72);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      v7 = *(_QWORD *)(i - 88);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      v8 = *(_QWORD *)(i - 104);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223EE2ABC(uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8); i != v3; i += 112)
    {
      if (*(_BYTE *)(i + 104))
      {
        v5 = *(_QWORD *)(i + 72);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v6 = *(_QWORD *)(i + 56);
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        v7 = *(_QWORD *)(i + 40);
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        v8 = *(_QWORD *)(i + 24);
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        v9 = *(_QWORD *)(i + 8);
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      }
    }
  }
  return a1;
}

_QWORD *sub_223EE2B80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[7];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = a1[3];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

void sub_223EE2BF8()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223EE2C0C(uint64_t result)
{
  ++*(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_223EE2C1C(uint64_t result)
{
  ++*(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_223EE2C2C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8) - 1;
  *(_QWORD *)(result + 8) = v1;
  if (!v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
      MEMORY[0x227684CE8](v3, 0x1020C405730B0C9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  }
  return result;
}

_QWORD *sub_223EE2C8C(_QWORD *result)
{
  uint64_t v1;

  v1 = result[2] - 1;
  result[2] = v1;
  if (result)
  {
    if (!v1)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t sub_223EE2CB0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_223EE2CB8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_223EE2CC0(_QWORD *a1, uint64_t **a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v6 = a2[2];
  if (a2[1] == v6)
  {
    v14 = *a2;
    v16 = **a2;
    v15 = (*a2)[1];
    v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - v16) >> 4);
    v17 = (*a2)[2];
    if (v15 >= v17)
    {
      if ((unint64_t)(v7 + 1) > 0x249249249249249)
        sub_22316E078();
      v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17 - v16) >> 4);
      v20 = 2 * v19;
      if (2 * v19 <= v7 + 1)
        v20 = v7 + 1;
      if (v19 >= 0x124924924924924)
        v21 = 0x249249249249249;
      else
        v21 = v20;
      *(_QWORD *)&v34 = *a2 + 2;
      if (v21)
      {
        if (v21 > 0x249249249249249)
          sub_223174E94();
        v22 = (char *)operator new(112 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[112 * v7];
      *(_QWORD *)&v32 = v22;
      *((_QWORD *)&v32 + 1) = v23;
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      *((_OWORD *)v23 + 2) = 0u;
      *((_OWORD *)v23 + 3) = 0u;
      v24 = *a3;
      *((_OWORD *)v23 + 4) = 0u;
      *((_OWORD *)v23 + 5) = v24;
      v23[104] = 1;
      *(_QWORD *)&v33 = v23 + 112;
      *((_QWORD *)&v33 + 1) = &v22[112 * v21];
      sub_223EE277C(v14, &v32);
      v18 = v14[1];
      sub_223EE29F4((uint64_t)&v32);
    }
    else
    {
      *(_OWORD *)(v15 + 48) = 0u;
      *(_OWORD *)(v15 + 64) = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)v15 = 0u;
      *(_QWORD *)(v15 + 80) = *(_QWORD *)a3;
      *(_QWORD *)(v15 + 88) = *((_QWORD *)a3 + 1);
      *(_BYTE *)(v15 + 104) = 1;
      v18 = v15 + 112;
      v14[1] = v15 + 112;
    }
    v14[1] = v18;
    v25 = *a2;
    v26 = (_QWORD *)operator new();
    *v26 = v7;
    v26[1] = v25;
    *(_QWORD *)&v32 = v26;
    v27 = operator new();
    *(_QWORD *)v27 = &off_24EC640A8;
    *(int64x2_t *)(v27 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v27 + 24) = v26;
    *((_QWORD *)&v32 + 1) = v27;
    sub_223EE22D0((void **)a2 + 4, (uint64_t)&v32);
    if (*((_QWORD *)&v32 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 32))(*((_QWORD *)&v32 + 1));
  }
  else
  {
    v7 = *(v6 - 1);
    a2[2] = v6 - 1;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v8 = *a3;
    v36 = 0u;
    v37 = v8;
    sub_223EE24AC(**a2 + 112 * v7, (uint64_t *)&v32);
    v9 = *a2;
    v10 = (_QWORD *)operator new();
    *v10 = v7;
    v10[1] = v9;
    v11 = operator new();
    *(_QWORD *)v11 = &off_24EC640A8;
    *(int64x2_t *)(v11 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v11 + 24) = v10;
    v12 = &a2[4][2 * v7];
    v13 = v12[1];
    *v12 = (uint64_t)v10;
    v12[1] = v11;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  }
  v28 = &a2[4][2 * v7];
  v30 = *v28;
  v29 = v28[1];
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  *a1 = v30;
  a1[1] = v29;
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
}

void sub_223EE2FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223EE29F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223EE2FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EE3034(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0xAA];
    v6 = (unint64_t)*v5;
    v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        v9 = *(_QWORD *)(v7 + 8);
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          v6 = (unint64_t)*v5;
        }
        v7 += 24;
        if (v7 - v6 == 4080)
        {
          v10 = (unint64_t)v5[1];
          ++v5;
          v6 = v10;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_223EE31B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v7 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    *v7 = a2;
    v7[1] = a3;
    if (a3)
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    v8 = v7 + 2;
    *(_QWORD *)(a1 + 8) = v7 + 2;
    goto LABEL_29;
  }
  v9 = *(_QWORD **)a1;
  v10 = ((uint64_t)v7 - *(_QWORD *)a1) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_22316E078();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      sub_223174E94();
    v14 = (char *)operator new(16 * v13);
    v15 = &v14[16 * v10];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    if (!a3)
    {
LABEL_14:
      v16 = &v14[16 * v13];
      v8 = v15 + 16;
      if (v7 != v9)
        goto LABEL_15;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = 0;
    v15 = (char *)(16 * v10);
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    if (!a3)
      goto LABEL_14;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v9 = *(_QWORD **)a1;
  v7 = *(_QWORD **)(a1 + 8);
  v16 = &v14[16 * v13];
  v8 = v15 + 16;
  if (v7 != *(_QWORD **)a1)
  {
LABEL_15:
    v17 = 0;
    do
    {
      v18 = &v15[v17 * 8];
      v19 = v7[v17 - 1];
      *((_QWORD *)v18 - 2) = v7[v17 - 2];
      *((_QWORD *)v18 - 1) = v19;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v17 -= 2;
    }
    while (&v7[v17] != v9);
    v9 = *(_QWORD **)a1;
    v20 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = &v15[v17 * 8];
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v16;
    while (v20 != v9)
    {
      v21 = *(v20 - 1);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      v20 -= 2;
    }
    goto LABEL_27;
  }
LABEL_26:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v16;
LABEL_27:
  if (v9)
    operator delete(v9);
LABEL_29:
  *(_QWORD *)(a1 + 8) = v8;
}

void sub_223EE335C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223EE3370(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223EE337C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  for (; v2; v2 += 16)
  {
    v6 = *(_QWORD *)((char *)&v1[2 * v3 + 1] + v2);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  v5 = v1[2 * v3 + 1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223EE33E0(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a1[1];
  v7 = a1[2];
  v8 = ((v7 - v6) << 6) - 1;
  if (v7 == v6)
    v8 = 0;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  if (a3 > v11)
  {
    sub_223EE35A0((uint64_t)a1, a3 - v11);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v12 = (_QWORD *)(v6 + 8 * (v10 >> 9));
  if (v7 == v6)
  {
    v13 = 0;
    if (a3)
      goto LABEL_7;
LABEL_10:
    v16 = v13;
    v15 = v12;
    goto LABEL_28;
  }
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (!a3)
    goto LABEL_10;
LABEL_7:
  v14 = a3 + ((v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v17 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    v15 = &v12[-(v17 >> 9)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 9];
  }
  v16 = *v15 + 8 * (v14 & 0x1FF);
LABEL_28:
  while (v13 != v16)
  {
    v18 = v16;
    if (v12 != v15)
      v18 = *v12 + 4096;
    if (v13 == v18)
    {
      a1[5] = v9;
      if (v12 == v15)
        return;
      goto LABEL_27;
    }
    v19 = v18 - v13 - 8;
    if (v19 < 0x18 || (unint64_t)(v13 - (_QWORD)a2) < 0x20)
    {
      v22 = a2;
      v23 = (_QWORD *)v13;
      do
      {
LABEL_25:
        v28 = *v22++;
        *v23++ = v28;
      }
      while (v23 != (_QWORD *)v18);
      goto LABEL_26;
    }
    v20 = (v19 >> 3) + 1;
    v21 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    v22 = &a2[v21];
    v23 = (_QWORD *)(v13 + v21 * 8);
    v24 = (_OWORD *)(v13 + 16);
    v25 = (__int128 *)(a2 + 2);
    v26 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *v24 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_25;
LABEL_26:
    a2 = v22;
    v9 = a1[5] + ((v18 - v13) >> 3);
    a1[5] = v9;
    if (v12 == v15)
      return;
LABEL_27:
    v29 = v12[1];
    ++v12;
    v13 = v29;
  }
}

void sub_223EE35A0(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        sub_22323CCA0((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        sub_22323CE2C((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 511;
        else
          v116 = 512;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 9);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 9;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_223174E94();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 9;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_223174E94();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_223174E94();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_223174E94();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_223EE3E8C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_223EE3ED8()
{
  __cxa_end_catch();
  JUMPOUT(0x223EE3EE0);
}

void sub_223EE3EF8(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1000uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1000uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_223EE4438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223EE4454(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223EE4468(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223EE4480(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223EE4498(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t v5;

  result = (uint64_t)a2[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    if (result)
    {
      v5 = *(_QWORD *)(*a2)[1] + 112 * **a2;
      sub_223EE4498(a1, v5 + 16);
      sub_223EE4498(a1, v5 + 32);
      sub_223EE4498(a1, v5 + 48);
      sub_223EE4498(a1, v5 + 64);
      sub_223EE4548(a1 + 24, **a2);
      result = (uint64_t)a2[1];
      *a2 = 0;
      a2[1] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    }
  }
  return result;
}

uint64_t sub_223EE4548(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(char **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = *(char **)(a1 + 8);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    sub_22367C394();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      sub_223174E94();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_41;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_41;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  *(_QWORD *)(a1 + 16) = v7;
  v25 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * a2);
  result = v25[1];
  *v25 = 0;
  v25[1] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  v27 = **(_QWORD **)a1 + 112 * a2;
  if (*(_BYTE *)(v27 + 104))
  {
    v28 = *(_QWORD *)(v27 + 72);
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
    v29 = *(_QWORD *)(v27 + 56);
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
    v30 = *(_QWORD *)(v27 + 40);
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v31 = *(_QWORD *)(v27 + 24);
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
    result = *(_QWORD *)(v27 + 8);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_BYTE *)(v27 + 104) = 0;
  }
  return result;
}

_QWORD *sub_223EE4764(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[7];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = a1[3];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

void sub_223EE47D8(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const double *v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  float64x2x3_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = (uint64_t)&v5[-*a1];
    v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3) + 1;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_223323BA8();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (unint64_t)&v13[8 * (v9 >> 3)];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(a2 + 16);
    v7 = (_QWORD *)(v14 + 24);
    if (v5 != v8)
    {
      v15 = v5 - v8 - 24;
      if (v15 < 0x138)
        goto LABEL_23;
      v16 = v15 / 0x18;
      if (&v13[v9 - 24 * v16 - 24] < v5 && (unint64_t)&v5[-24 * v16 - 24] < v14)
        goto LABEL_23;
      v18 = v16 + 1;
      v19 = (v16 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v6 = &v5[-24 * v19];
      v20 = v14 - 24 * v19;
      v21 = (const double *)(v5 - 48);
      v22 = (double *)(v14 - 48);
      v23 = v19;
      do
      {
        v25 = vld3q_f64(v21);
        vst3q_f64(v22, v25);
        v22 -= 6;
        v21 -= 6;
        v23 -= 2;
      }
      while (v23);
      v14 = v20;
      if (v18 != v19)
      {
LABEL_23:
        v20 = v14;
        do
        {
          v24 = *((_QWORD *)v6 - 3);
          v6 -= 24;
          *(_QWORD *)(v20 - 24) = v24;
          v20 -= 24;
          *(_QWORD *)(v20 + 8) = *((_QWORD *)v6 + 1);
          *(_QWORD *)(v20 + 16) = *((_QWORD *)v6 + 2);
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
      v14 = v20;
    }
    *a1 = v14;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v13[24 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = *(_QWORD *)(a2 + 8);
    *((_QWORD *)v5 + 2) = *(_QWORD *)(a2 + 16);
    v7 = v5 + 24;
  }
  a1[1] = (unint64_t)v7;
}

size_t *sub_223EE49B8(size_t *result)
{
  size_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int i;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  size_t v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  size_t v24;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 16);
  v4 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v18 = *(_DWORD *)(v1 + 20);
    if (v18 == *(_DWORD *)(v2 + 12))
    {
      v19 = *(_DWORD *)(v1 + 8);
      if (v18 == v19)
      {
        v20 = (*(_DWORD *)(v1 + 12) * v18);
        v21 = *(char **)v1;
        if ((_DWORD)v20)
          v22 = v21 == 0;
        else
          v22 = 0;
        if (v22)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
        else if (!(_DWORD)v20)
        {
          return result;
        }
        return (size_t *)memmove(*(void **)(v2 + 40), v21, v20);
      }
    }
    else
    {
      v19 = *(_DWORD *)(v1 + 8);
    }
    v24 = v19;
    if (v19)
      v23 = *(_DWORD *)(v1 + 12) == 0;
    else
      v23 = 1;
    if (!v23)
      return sub_223EE4B7C(&v24, (char **)v1, v2);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 8);
    v7 = *(_DWORD *)(v1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)v1;
      v11 = *(char **)(v2 + 40);
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(v2 + 12);
        v14 = *(unsigned int *)(v1 + 20);
        if (v9)
        {
          for (i = 0; i != v12; ++i)
          {
            v16 = v9;
            v17 = v10;
            result = (size_t *)v11;
            do
            {
              *(_BYTE *)result = *v17;
              v17 += v3;
              result = (size_t *)((char *)result + v4);
              --v16;
            }
            while (v16);
            *(_BYTE *)result = *v17;
            v10 += v14;
            v11 += v13;
          }
        }
        else
        {
          do
          {
            *v11 = *v10;
            v10 += v14;
            v11 += v13;
            --v12;
          }
          while (v12);
        }
      }
      for (; v9; --v9)
      {
        *v11 = *v10;
        v10 += v3;
        v11 += v4;
      }
      *v11 = *v10;
    }
  }
  return result;
}

size_t *sub_223EE4B7C(size_t *result, char **a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  size_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *(char **)(a3 + 40);
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = *(unsigned int *)(a3 + 12);
      v10 = *((unsigned int *)a2 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_19:
        abort();
      }
      return (size_t *)memmove(v7, v6, v12);
    }
    if (v12)
      return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

void sub_223EE4CC8(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, uint64_t a6@<X8>)
{
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  float *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  float *v38;
  float *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  char *v45;
  float *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int *v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  signed int v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  int v68;
  int v69;
  signed int v70;
  int v71;
  int v72;
  BOOL v73;
  int v74;
  float v75;
  int v76;
  float *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  float *v85;
  unint64_t v86;
  uint64_t v87;
  int *v88;
  int *v89;
  int v90;
  int v91;
  int *v92;
  int v93;
  uint64_t v94;
  BOOL v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int *v100;
  int v103;
  int v104;
  int i;
  unint64_t v106;
  float *v107;
  unint64_t v108;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  float v113;
  float v114;
  float v115;
  int v116;
  int v117;
  int v118;
  int v119;
  std::__shared_weak_count *v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  float *__p;
  void *v142[3];
  uint64_t (**v143)();
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  int v147;
  int v148;
  float v149;
  float v150;
  float *v151;
  float *v152;
  unint64_t v153;

  v126 = a5[23];
  v127 = a5[22];
  v151 = (float *)__PAIR64__(v126, v127);
  v143 = &off_24EC24788;
  sub_2236B4564(&v151, (void **)&unk_224690648, &v144);
  sub_223ED5278(a1, v142);
  if (!a1)
    goto LABEL_179;
  v128 = 0;
  v124 = a2 + 88 * a1;
  v130 = a1;
  while (2)
  {
    v125 = *(_DWORD *)(a2 + 48) - 1;
    if (*(_DWORD *)(a2 + 48) == 1)
      goto LABEL_3;
    v135 = *(_DWORD *)(a2 + 52) - 1;
    if (*(_DWORD *)(a2 + 52) == 1)
      goto LABEL_3;
    v8 = 0;
    v131 = a2;
    while (2)
    {
      v9 = 0;
      v10 = v8 + 1;
      v132 = v8 + 1;
      v133 = v8;
      while (2)
      {
        v11 = *(_DWORD *)(a2 + 48);
        v12 = (v11 * v9 + v8);
        v13 = *(_QWORD *)(a2 + 56);
        v14 = (*(_QWORD *)(a2 + 64) - v13) >> 3;
        if (v14 <= v12
          || (v15 = (v11 * v9 + v10), v14 <= v15)
          || (++v9, v16 = v11 * v9, v17 = (v11 * v9 + v10), v14 <= v17)
          || (v18 = (v16 + v8), v14 <= v18))
        {
          sub_2236C5448();
        }
        v19 = *(_QWORD *)(v13 + 8 * v12);
        v20 = *(_QWORD *)(v13 + 8 * v15);
        v21 = *(_QWORD *)(v13 + 8 * v17);
        v22 = *(_QWORD *)(v13 + 8 * v18);
        v24 = v21 >= a3 || v22 >= a3;
        if (v20 >= a3)
          v24 = 1;
        if (v19 >= a3)
          v24 = 1;
        if (v24)
          goto LABEL_9;
        v25 = operator new(0x20uLL);
        v136 = v9;
        v151 = (float *)v25;
        v153 = (unint64_t)(v25 + 4);
        v26 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a5 + 16))(a5);
        v27 = (*(uint64_t (**)(uint64_t, unint64_t, float *))(*(_QWORD *)v26 + 72))(v26, a4 + 12 * v19, &v149);
        *v25 = (int)v149 | ((unint64_t)(int)v150 << 32);
        v28 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a5 + 16))(a5);
        v137 = (*(uint64_t (**)(uint64_t, unint64_t, float *))(*(_QWORD *)v28 + 72))(v28, a4 + 12 * v20, &v149);
        v25[1] = (int)v149 | ((unint64_t)(int)v150 << 32);
        v152 = (float *)(v25 + 2);
        v29 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a5 + 16))(a5);
        v30 = (*(uint64_t (**)(uint64_t, unint64_t, float *))(*(_QWORD *)v29 + 72))(v29, a4 + 12 * v21, &v149);
        v25[2] = (int)v149 | ((unint64_t)(int)v150 << 32);
        v31 = (float *)(v25 + 3);
        v152 = (float *)(v25 + 3);
        v32 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a5 + 16))(a5);
        v33 = (*(uint64_t (**)(uint64_t, unint64_t, float *))(*(_QWORD *)v32 + 72))(v32, a4 + 12 * v22, &v149);
        v34 = (int)v149;
        v35 = (int)v150;
        if ((unint64_t)(v25 + 3) < v153)
        {
          v36 = v30;
          v37 = v27;
          v25[3] = v34 | (v35 << 32);
          v38 = (float *)(v25 + 4);
          goto LABEL_48;
        }
        v39 = v151;
        v40 = ((char *)v31 - (char *)v151) >> 3;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61)
          sub_2236B43DC();
        v42 = v153 - (_QWORD)v151;
        if ((uint64_t)(v153 - (_QWORD)v151) >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          if (v43 >> 61)
            sub_223174E94();
          v44 = v33;
          v45 = (char *)operator new(8 * v43);
          v33 = v44;
        }
        else
        {
          v45 = 0;
        }
        v46 = (float *)&v45[8 * v40];
        *(_QWORD *)v46 = v34 | (v35 << 32);
        v38 = v46 + 2;
        if (v31 == v39)
        {
          v36 = v30;
          v37 = v27;
          v151 = (float *)&v45[8 * v40];
          v152 = v46 + 2;
          v153 = (unint64_t)&v45[8 * v43];
LABEL_47:
          v55 = v33;
          operator delete(v31);
          v33 = v55;
LABEL_48:
          a2 = v131;
          v10 = v132;
          v8 = v133;
          __p = v151;
          v9 = v136;
          if ((v37 & v137 & v36 & v33 & 1) == 0)
            goto LABEL_141;
          goto LABEL_49;
        }
        v47 = (char *)v25 - (char *)v39 + 16;
        if (v47 < 0x18)
          goto LABEL_195;
        v48 = (v47 >> 3) + 1;
        v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = (float *)((char *)v31 - v49);
        v46 = (float *)((char *)v46 - v49);
        v50 = &v45[8 * v40 - 16];
        v51 = (__int128 *)(v25 + 1);
        v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v53 = *v51;
          *((_OWORD *)v50 - 1) = *(v51 - 1);
          *(_OWORD *)v50 = v53;
          v50 -= 32;
          v51 -= 2;
          v52 -= 4;
        }
        while (v52);
        if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_195:
          do
          {
            v54 = *((_QWORD *)v31 - 1);
            v31 -= 2;
            *((_QWORD *)v46 - 1) = v54;
            v46 -= 2;
          }
          while (v31 != v39);
        }
        v36 = v30;
        v37 = v27;
        v31 = v151;
        v151 = v46;
        v152 = v38;
        v153 = (unint64_t)&v45[8 * v43];
        if (v31)
          goto LABEL_47;
        __p = v46;
        a2 = v131;
        v10 = v132;
        v8 = v133;
        v9 = v136;
        if ((v37 & v137 & v36 & v33 & 1) == 0)
          goto LABEL_141;
LABEL_49:
        v56 = (char *)v38 - (char *)__p;
        if (v38 == __p)
          goto LABEL_141;
        v151 = 0;
        v152 = 0;
        v153 = 0;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF9)
          sub_2236B43DC();
        v57 = (int *)__p;
        v58 = (float *)operator new(2 * v56);
        v59 = 0;
        v129 = (char *)v38 - (char *)__p;
        v60 = v56 >> 3;
        v151 = v58;
        v152 = v58;
        v153 = (unint64_t)&v58[4 * v60];
        v61 = 0x7FFFFFFF;
        v62 = 0x80000000;
        v138 = v60;
        do
        {
          v63 = &v57[2 * v59];
          v64 = v59 + 1;
          if (v59 + 1 == v60)
            v65 = 0;
          else
            v65 = v59 + 1;
          v66 = &v57[2 * v65];
          v67 = v66[1];
          v68 = v63[1];
          if (v67 >= v68)
            v69 = v63[1];
          else
            v69 = v66[1];
          if (v68 <= v67)
            v70 = v66[1];
          else
            v70 = v63[1];
          if (v69 < v61)
            v61 = v69;
          if (v62 <= v70)
            v62 = v70;
          if (v69 != v70)
          {
            v71 = *v66;
            v72 = *v63;
            v73 = __OFSUB__(v67, v68);
            v74 = v67 - v68;
            v75 = (float)(v71 - v72) / (float)v74;
            if (v74 < 0 != v73)
              v76 = v71;
            else
              v76 = v72;
            if ((unint64_t)v58 < v153)
            {
              *(_DWORD *)v58 = v69;
              *((_DWORD *)v58 + 1) = v70;
              v58[2] = (float)v76;
              v58[3] = v75;
              v58 += 4;
LABEL_53:
              v152 = v58;
              goto LABEL_54;
            }
            v77 = v151;
            v78 = ((char *)v58 - (char *)v151) >> 4;
            v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 60)
              sub_2236B43DC();
            v80 = v153 - (_QWORD)v151;
            if ((uint64_t)(v153 - (_QWORD)v151) >> 3 > v79)
              v79 = v80 >> 3;
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
              v81 = 0xFFFFFFFFFFFFFFFLL;
            else
              v81 = v79;
            if (v81 >> 60)
              sub_223174E94();
            v82 = (char *)operator new(16 * v81);
            v83 = &v82[16 * v78];
            *(_DWORD *)v83 = v69;
            *((_DWORD *)v83 + 1) = v70;
            *((float *)v83 + 2) = (float)v76;
            *((float *)v83 + 3) = v75;
            if (v58 == v77)
            {
              v58 = (float *)(v83 + 16);
              v151 = (float *)&v82[16 * v78];
              v152 = (float *)(v83 + 16);
              v153 = (unint64_t)&v82[16 * v81];
              v57 = (int *)__p;
              if (!v77)
                goto LABEL_85;
            }
            else
            {
              v84 = &v82[16 * v78];
              do
              {
                v85 = (float *)(v84 - 16);
                *((_OWORD *)v84 - 1) = *((_OWORD *)v58 - 1);
                v58 -= 4;
                v84 -= 16;
              }
              while (v58 != v77);
              v58 = (float *)(v83 + 16);
              v151 = v85;
              v152 = (float *)(v83 + 16);
              v153 = (unint64_t)&v82[16 * v81];
              v57 = (int *)__p;
              if (!v77)
                goto LABEL_85;
            }
            operator delete(v77);
LABEL_85:
            v60 = v138;
            goto LABEL_53;
          }
LABEL_54:
          v59 = v64;
        }
        while (v64 != v60);
        v86 = 126 - 2 * __clz(((char *)v58 - (char *)v151) >> 4);
        if (v58 == v151)
          v87 = 0;
        else
          v87 = v86;
        sub_223EE5B1C(v151, v58, v87, 1);
        if (v61 == v62)
        {
          v88 = v57;
          v89 = v57;
          v9 = v136;
          if (v129 < 0x10)
            goto LABEL_121;
          v89 = v57 + 2;
          v90 = v57[2];
          v91 = *v57;
          if (v90 >= *v57)
            v88 = v57;
          else
            v88 = v57 + 2;
          if (v90 < v91)
            v89 = v57;
          if (v129 == 16)
          {
LABEL_121:
            if (&v57[2 * v60] == v88)
              goto LABEL_138;
            goto LABEL_122;
          }
          v92 = v57 + 4;
          if (v90 <= v91)
            v93 = *v57;
          else
            v93 = v57[2];
          if (v90 < v91)
            v91 = v57[2];
          v94 = 8 * v60 - 24;
          while (v94)
          {
            v96 = v92[2];
            v97 = *v92;
            if (v96 >= *v92)
            {
              if (v97 < v91)
              {
                v91 = *v92;
                v88 = v92;
              }
              v95 = v96 < v93;
              if (v96 > v93)
                v93 = v92[2];
              if (!v95)
                v89 = v92 + 2;
              v92 += 4;
              v94 -= 16;
              if (v94 == -8)
                goto LABEL_121;
            }
            else
            {
              v91 = *v88;
              if (v96 < *v88)
              {
                v91 = v92[2];
                v88 = v92 + 2;
              }
              v93 = *v89;
              if (v97 > *v89)
                v93 = *v92;
              if (v97 >= *v89)
                v89 = v92;
              v92 += 4;
              v94 -= 16;
              if (v94 == -8)
                goto LABEL_121;
            }
          }
          if (*v92 >= *v88)
          {
            if (*v92 >= *v89)
              v89 = v92;
            if (&v57[2 * v60] != v88)
              goto LABEL_122;
          }
          else
          {
            v88 = v92;
            if (&v57[2 * v60] == v92)
              goto LABEL_138;
LABEL_122:
            v100 = v88;
            v98 = *v88;
            v99 = v100[1];
            if (v99 >= 1 && v126 > v99 && v127 > v98)
            {
              v103 = *v89;
              if (v103 >= 1)
                v104 = v103 + 1;
              else
                v104 = 1;
              if (v104 >= v127)
                v104 = v127;
              for (i = v98 & ~(v98 >> 31); v104 != i; ++i)
                *(_BYTE *)(v146 + (v147 * i + v148 * v99)) = v128;
            }
          }
        }
        else
        {
          v9 = v136;
          if (v61 != v62 + 1)
          {
            v106 = 0;
            v107 = v151;
            v108 = 1;
            do
            {
              if (v106 <= v108)
                v110 = v108;
              else
                v110 = v106;
              if (LODWORD(v107[4 * v106 + 1]) == v61 && v61 < v62)
                v106 = v110 + 1;
              if (v106 <= v108)
                v111 = v108;
              else
                v111 = v106;
              if (LODWORD(v107[4 * v108 + 1]) == v61 && v61 < v62)
                v112 = v111 + 1;
              else
                v112 = v108;
              v113 = v107[4 * v106 + 2];
              v114 = v107[4 * v112 + 2];
              if (v113 <= v114)
                v108 = v112;
              else
                v108 = v106;
              if (v113 > v114)
                v106 = v112;
              v115 = v107[4 * v106 + 2];
              if (v61 >= 1 && v126 > v61)
              {
                v116 = llroundf(v115);
                if (v127 > v116)
                {
                  v117 = llroundf(v107[4 * v108 + 2]);
                  if (v117 >= 1)
                    v118 = v117 + 1;
                  else
                    v118 = 1;
                  if (v118 >= v127)
                    v118 = v127;
                  v119 = v116 & ~(v116 >> 31);
                  if (v119 != v118)
                  {
                    do
                      *(_BYTE *)(v146 + (v147 * v119++ + v148 * v61)) = v128;
                    while (v118 != v119);
                    v107 = v151;
                    v115 = v151[4 * v106 + 2];
                  }
                }
              }
              v107[4 * v106 + 2] = v115 + v107[4 * v106 + 3];
              v107[4 * v108 + 2] = v107[4 * v108 + 3] + v107[4 * v108 + 2];
            }
            while (v61++ != v62);
          }
        }
LABEL_138:
        if (v151)
        {
          v152 = v151;
          operator delete(v151);
        }
        a2 = v131;
        v10 = v132;
        v8 = v133;
LABEL_141:
        a1 = v130;
        if (__p)
          operator delete(__p);
LABEL_9:
        if (v9 != v135)
          continue;
        break;
      }
      v8 = v10;
      if (v10 != v125)
        continue;
      break;
    }
LABEL_3:
    a2 += 88;
    ++v128;
    if (a2 != v124)
      continue;
    break;
  }
LABEL_179:
  sub_223EE5770((uint64_t)&v143, a1, a6);
  if (v142[0])
  {
    v142[1] = v142[0];
    operator delete(v142[0]);
  }
  v120 = v145;
  if (v145)
  {
    p_shared_owners = (unint64_t *)&v145->__shared_owners_;
    do
      v122 = __ldaxr(p_shared_owners);
    while (__stlxr(v122 - 1, p_shared_owners));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
}

void sub_223EE56A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  unint64_t *p_shared_owners;
  unint64_t v33;

  if (__p)
    operator delete(__p);
  if (a31)
  {
    p_shared_owners = (unint64_t *)&a31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
      std::__shared_weak_count::__release_weak(a31);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223EE5770(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t i;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p;
  std::__shared_weak_count *v30;
  char *v31;
  _DWORD v32[624];
  uint64_t v33;
  uint64_t (**v34)();
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;

  v6 = 5489;
  v32[0] = 5489;
  for (i = 1; i != 624; ++i)
  {
    v6 = i + 1812433253 * (v6 ^ (v6 >> 30));
    v32[i] = v6;
  }
  v33 = 0;
  v8 = (std::__shared_weak_count *)operator new(0x28uLL);
  v9 = v8;
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A710;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A760;
  LODWORD(v8[1].__shared_owners_) = 5489;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v34 = &off_24EC7A6B0;
  v35 = v8 + 1;
  v36 = v8;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __p = v32;
  v15 = (std::__shared_weak_count *)operator new();
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64110;
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v32;
  v30 = v15;
  LOWORD(v31) = -256;
  if (!a2)
  {
    v18 = 0;
    v17 = 0;
LABEL_20:
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_24;
  }
  v16 = 3 * a2;
  if (3 * a2 < 0)
    sub_22316E078();
  v17 = (char *)operator new(3 * a2);
  v18 = &v17[v16];
  bzero(v17, 3 * a2);
  v19 = 0;
  v20 = __p;
  do
    v17[v19++] = sub_223EE69B0((uint64_t)&v31, (uint64_t)v20, (unsigned __int8 *)&v31);
  while (v16 != v19);
  v15 = v30;
  if (v30)
    goto LABEL_20;
LABEL_24:
  __p = *(void **)(a1 + 64);
  *(_QWORD *)a3 = &off_24EC21B18;
  sub_2231C5C38(&__p, (_WORD *)(a3 + 8));
  __p = 0;
  v30 = 0;
  v31 = 0;
  if (a2)
  {
    v23 = v18 - v17;
    if (v18 - v17 < 0)
      sub_22316E078();
    v24 = (char *)operator new(v18 - v17);
    v25 = (std::__shared_weak_count *)&v24[v23];
    __p = v24;
    v31 = &v24[v23];
    memcpy(v24, v17, v18 - v17);
    v30 = v25;
  }
  sub_223EE6764(a1, a3, (_BOOL8)&__p);
  if (__p)
  {
    v30 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  if (v17)
    operator delete(v17);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_223EE5A88()
{
  JUMPOUT(0x223EE5AC8);
}

void sub_223EE5A90(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_223EE5A9C()
{
  __cxa_end_catch();
  JUMPOUT(0x223EE5B0CLL);
}

void sub_223EE5AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v14;
  uint64_t v15;

  if (__p)
    operator delete(__p);
  sub_223167354(v15);
  if (v14)
  {
    operator delete(v14);
    sub_2245658A0(v13);
    _Unwind_Resume(a1);
  }
  sub_2245658A0(v13);
  _Unwind_Resume(a1);
}

void sub_223EE5B1C(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float *i;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  int v31;
  float v32;
  float *v34;
  unint64_t v35;
  float *v37;
  int v38;
  BOOL v39;
  float *v41;
  int v42;
  float v43;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  int v51;
  BOOL v52;
  BOOL v54;
  float *v55;
  float v56;
  float v57;
  float *v59;
  int v60;
  BOOL v61;
  __int128 *v62;
  __int128 *v63;
  float *v64;
  int v65;
  int v66;
  BOOL v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  float *v73;
  BOOL v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float *v79;
  int v80;
  float v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  int v86;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float *v92;
  int v93;
  BOOL v94;
  float *v95;
  int v96;
  float v97;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  float *v118;
  int v119;
  float v120;
  BOOL v121;
  uint64_t v122;
  unint64_t v123;
  float *v124;
  float *v126;
  int v127;
  float v128;
  BOOL v129;
  uint64_t v130;
  float *j;
  int v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

BOOL sub_223EE6478(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  float *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float *v18;
  int v19;
  BOOL v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  float *v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = a2 - 4;
      v19 = *((_DWORD *)a2 - 4);
      if (v19 < *(_DWORD *)a1 || (v19 == *(_DWORD *)a1 ? (v20 = *(a2 - 1) < a1[3]) : (v20 = 0), v20))
      {
        v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)v18 = v21;
      }
      return result;
    case 3:
      sub_2236B6494(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      v22 = (__int128 *)(a1 + 4);
      v23 = (__int128 *)(a1 + 8);
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v24 = a2 - 4;
      v25 = *((_DWORD *)a2 - 4);
      v26 = *((_DWORD *)a1 + 8);
      if (v25 < v26 || (result = 1, v25 == v26) && *(a2 - 1) < a1[11])
      {
        v27 = *v23;
        *v23 = *(_OWORD *)v24;
        *(_OWORD *)v24 = v27;
        v28 = *((_DWORD *)a1 + 8);
        v29 = *((_DWORD *)a1 + 4);
        if (v28 < v29 || (result = 1, v28 == v29) && a1[11] < a1[7])
        {
          v30 = *v22;
          *v22 = *v23;
          *v23 = v30;
          v31 = *((_DWORD *)a1 + 4);
          if (v31 < *(_DWORD *)a1 || (result = 1, v31 == *(_DWORD *)a1) && a1[7] < a1[3])
          {
            v32 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v22;
            *v22 = v32;
            return 1;
          }
        }
      }
      return result;
    case 5:
      sub_2236B62E8((uint64_t)a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      v6 = a1 + 8;
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v7 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)v7;
    v12 = v7[3];
    if (*(_DWORD *)v7 < *(_DWORD *)v6 || (v11 == *(_DWORD *)v6 ? (v13 = v12 < v6[3]) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)(v7 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v10 = (uint64_t)a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(_DWORD *)((char *)a1 + v15 + 16);
          if (v11 >= v16 && (v11 != v16 || v12 >= *(float *)((char *)a1 + v15 + 28)))
            break;
          *(_OWORD *)((char *)a1 + v15 + 32) = *(_OWORD *)((char *)a1 + v15 + 16);
          v15 -= 16;
          if (v15 == -32)
          {
            v10 = (uint64_t)a1;
            goto LABEL_6;
          }
        }
        v10 = (uint64_t)a1 + v15 + 32;
      }
LABEL_6:
      *(_DWORD *)v10 = v11;
      *(_QWORD *)(v10 + 4) = v14;
      *(float *)(v10 + 12) = v12;
      if (++v9 == 8)
        return v7 + 4 == a2;
    }
    v6 = v7;
    v8 += 16;
    v7 += 4;
    if (v7 == a2)
      return 1;
  }
}

uint64_t sub_223EE6764(uint64_t a1, uint64_t a2, _BOOL8 a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
      if (!v6)
        goto LABEL_20;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v6)
        goto LABEL_20;
    }
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!*(_BYTE *)(a1 + 81))
          goto LABEL_20;
LABEL_17:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v23, v6, 0);
        v16 = *(_QWORD *)(a2 + 8);
        v15 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v15)
          goto LABEL_25;
        goto LABEL_21;
      }
    }
LABEL_16:
    if (!*(_BYTE *)(a1 + 81))
      goto LABEL_20;
    goto LABEL_17;
  }
  if (v6)
    goto LABEL_16;
LABEL_20:
  v23 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_25;
LABEL_21:
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v16)
      goto LABEL_30;
    goto LABEL_26;
  }
LABEL_25:
  if (!v16)
    goto LABEL_30;
LABEL_26:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 64))
      goto LABEL_33;
    goto LABEL_31;
  }
LABEL_30:
  v22 = 0;
  if (!*(_DWORD *)(a1 + 64))
    goto LABEL_33;
LABEL_31:
  if (*(_DWORD *)(a1 + 68))
    sub_223EE6BF8(a3, a1, a2);
LABEL_33:
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223EE694C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EE69B0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v3 = a3[1];
  v4 = *a3;
  if (v3 == v4)
    return v3;
  v5 = v3 - v4 + 1;
  if (v3 - v4 != -1)
  {
    v6 = __clz(v5);
    v7 = 31;
    if (((v5 << v6) & 0x7FFFFFFF) != 0)
      v7 = 32;
    v8 = v7 - v6;
    v9 = v8 >> 5;
    if ((v8 & 0x1F) != 0)
      ++v9;
    if (v9 <= v8)
      v10 = 0xFFFFFFFF >> -(v8 / v9);
    else
      v10 = 0;
    v11 = *(_QWORD *)(a2 + 2496);
    do
    {
      v12 = 4 * v11;
      v13 = v11 + 397;
      v11 = (v11 + 1) % 0x270;
      v14 = *(_DWORD *)(a2 + 4 * (v13 % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v11) & 0x7FFFFFFE | *(_DWORD *)(a2 + v12) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v11) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v12) = v14;
      v15 = ((v14 ^ (v14 >> 11)) << 7) & 0x9D2C5680 ^ v14 ^ (v14 >> 11);
      v16 = ((v15 << 15) & 0xEFC60000 ^ v15 ^ (((v15 << 15) & 0xEFC60000 ^ v15) >> 18)) & v10;
    }
    while (v16 >= v5);
    *(_QWORD *)(a2 + 2496) = v11;
    LOBYTE(v3) = v4 + v16;
    return v3;
  }
  v18 = *(_QWORD *)(a2 + 2496);
  v19 = (v18 + 1) % 0x270uLL;
  v20 = *(_DWORD *)(a2 + 4 * ((v18 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v19) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v18) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v19) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + 4 * v18) = v20;
  *(_QWORD *)(a2 + 2496) = v19;
  v21 = ((v20 ^ (v20 >> 11)) << 7) & 0x9D2C5680 ^ v20 ^ (v20 >> 11);
  return (v21 ^ (((v21 << 15) & 0x3C40000 ^ v21) >> 18));
}

void sub_223EE6B60(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223EE6B88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm39"
                     "7ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_"
                     "24uniform_int_distributionIhEEEC1IJhhEEERS7_DpT_EUlOT_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32"
                                "ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18"
                                "ELj1812433253EEEEENS4_24uniform_int_distributionIhEEEC1IJhhEEERS7_DpT_EUlOT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_24uniform_int_distributionIhEEEC1IJhhEEERS7_DpT_EUlOT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6random17DistributedRandomINS1_6RandomINSt3__123mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENS4_24uniform_int_distributionIhEEEC1IJhhEEERS7_DpT_EUlOT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

BOOL sub_223EE6BF8(_BOOL8 result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int i;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  _QWORD v24[3];

  v4 = *(_DWORD *)(a2 + 64);
  v3 = *(_DWORD *)(a2 + 68);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = (_QWORD *)result;
    v9 = *(unsigned int *)(a3 + 104);
    v19 = (unint64_t)*(unsigned int *)(a3 + 100) << 32;
    v20 = v4 - 1;
    v10 = *(unsigned int *)(a2 + 76);
    v21 = *(unsigned int *)(a2 + 72) | (unint64_t)(v9 << 32);
    v22 = v3 - 1;
    v23 = v10 | ((unint64_t)*(unsigned int *)(a3 + 108) << 32);
    v11 = *(unsigned __int8 **)(a2 + 56);
    if (*(_BYTE *)(a2 + 80) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
      v11 = *(unsigned __int8 **)(a2 + 56);
    }
    v17 = *(char **)(a3 + 32);
    if (*(_BYTE *)(a3 + 128) && v17)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v17 = *(char **)(a3 + 32);
    }
    memset(v24, 0, sizeof(v24));
    if (v22)
    {
      for (i = 0; i < v22; ++i)
      {
        sub_223EE6D80((_BOOL8)&v19, v24, v8, v11, v17);
        v11 += v23;
        v17 += HIDWORD(v23);
      }
    }
    return sub_223EE6D80((_BOOL8)&v19, v24, v8, v11, v17);
  }
  return result;
}

BOOL sub_223EE6D80(_BOOL8 result, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, char *a5)
{
  char *v5;
  _DWORD *v9;
  unsigned int i;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  char v20;

  v5 = a5;
  a2[1] = a5;
  if (*(_DWORD *)(result + 8))
  {
    v9 = (_DWORD *)result;
    for (i = 0; i < v9[2]; ++i)
    {
      *a2 = a4;
      a2[1] = v5;
      v11 = *a4;
      if (v11 == 255)
      {
        v14 = 0;
        v15 = 0;
        v13 = 0x80;
        if (v5)
          goto LABEL_3;
      }
      else
      {
        v12 = (char *)(*a3 + 3 * v11);
        v13 = *v12;
        v14 = v12[1];
        v15 = v12[2];
        if (v5)
          goto LABEL_3;
      }
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_9;
LABEL_3:
      *v5 = v13;
      v5[1] = v14;
      v5[2] = v15;
      a4 += v9[3];
      v5 += v9[4];
    }
  }
  *a2 = a4;
  a2[1] = v5;
  v16 = *a4;
  if (v16 == 255)
  {
    v19 = 0;
    v20 = 0;
    v18 = 0x80;
    if (v5)
      goto LABEL_15;
  }
  else
  {
    v17 = (char *)(*a3 + 3 * v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    if (v5)
      goto LABEL_15;
  }
  result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
  if (result)
LABEL_9:
    abort();
LABEL_15:
  *v5 = v18;
  v5[1] = v19;
  v5[2] = v20;
  return result;
}

void sub_223EE6F04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float32x2_t *a5@<X4>, uint64_t a6@<X5>, float *a7@<X6>, uint64_t a8@<X8>)
{
  _DWORD *v14;
  int32x2_t v15;
  float32x2_t v16;
  float32x2_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t (*v33)();
  const char *v34;
  size_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  unsigned int *v49;
  void *v50;
  unsigned int *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  size_t v92;
  unsigned int v93;
  unsigned int v94;
  void *v95;
  __int128 v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  void *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unsigned __int8 v116;
  const char *v117;
  size_t v118;
  void **v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  __int128 *p_p;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  size_t v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count *v130;
  unint64_t *p_shared_owners;
  unint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  __int128 v140;
  uint64_t (**v141)();
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  __int128 v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t (**v183)();
  uint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t (*v192)();
  int v193;
  const char *v194;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  void *__dst;
  unsigned int v201;
  char v202;
  char v203;
  uint64_t (**v204)();
  _OWORD v205[4];
  uint64_t v206;
  __int16 v207;
  uint64_t (**v208)();
  uint64_t (**rep)(_QWORD);
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  int v214;
  uint64_t v215;
  _QWORD v216[2];
  int v217;
  void *v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD v222[3];
  _QWORD v223[3];
  _QWORD v224[2];
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *object[3];
  __int128 v229;
  __int128 __p;
  __int128 v231;
  int v232;
  void *__src;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  char v237;
  char v238;
  void *v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;

  v243 = *MEMORY[0x24BDAC8D0];
  v14 = (_DWORD *)(a2 + 8);
  v15 = *(int32x2_t *)(a2 + 8);
  v16 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v15, (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
  __asm { FMOV            V6.2S, #1.0 }
  v21 = vsub_f32(vadd_f32(a5[5], vmul_f32(a5[4], vadd_f32(v16, _D6))), vadd_f32(vmul_f32(v16, a5[4]), a5[5]));
  v22 = vcvtas_u32_f32(*a7 / v21.f32[0]);
  v23 = vcvtas_u32_f32(*a7 / v21.f32[1]);
  if (v23 >= v22)
    v24 = v22;
  else
    v24 = v23;
  if (v15.i32[1] >= (unsigned __int32)v15.i32[0])
    v25 = *(_QWORD *)(a2 + 8);
  else
    v25 = HIDWORD(*(_QWORD *)(a2 + 8));
  if (v24 <= 2)
    v24 = 2;
  if (v25 <= v24)
  {
    v27 = v15.u32[0];
    v28 = v15.u32[1];
    if (v15.i32[0] < 2u)
      goto LABEL_19;
  }
  else
  {
    v26 = 0;
    do
    {
      ++v26;
      v25 >>= 1;
    }
    while (v25 > v24);
    v27 = (-1 << v26) & v15.i32[0];
    v28 = (-1 << v26) & v15.i32[1];
    if (v27 < 2)
    {
LABEL_19:
      v29 = atomic_load((unsigned __int8 *)&qword_2540CDFE8);
      if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDFE8))
      {
        sub_22455F53C(&v208);
        sub_223174DE4(object, "cv3d.acv.surfacedetection");
        sub_2232300E0((uint64_t **)&v208, (uint64_t)object, &qword_2540CDFE0);
        if (SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_guard_release(&qword_2540CDFE8);
      }
      v216[0] = qword_2540CDFE0;
      if (**(int **)(qword_2540CDFE0 + 56) > 5)
        goto LABEL_218;
      v30 = *(unsigned __int8 *)(qword_2540CDFE0 + 72);
      v31 = sub_22322F254(qword_2540CDFE0, "OSLogSurrogateAppender", 1, 0);
      v32 = v31;
      if (!v30 && !v31)
        goto LABEL_218;
      v208 = (uint64_t (**)())v216;
      rep = (uint64_t (**)(_QWORD))std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&v210 = std::chrono::system_clock::now();
      DWORD2(v210) = 5;
      *(_QWORD *)&v211 = "unknown file";
      DWORD2(v211) = 233;
      *((_QWORD *)&v212 + 1) = 0;
      *(_QWORD *)&v213 = 0;
      *(_QWORD *)&v212 = "unknown function";
      v33 = *v208;
      v34 = (char *)*v208 + 16;
      v193 = v27;
      v194 = v34;
      v192 = *v208;
      if (*((char *)*v208 + 39) < 0)
      {
        v34 = (const char *)*((_QWORD *)v33 + 2);
        v35 = *((_QWORD *)v33 + 3);
        v196 = a8;
        v116 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v116 & 1) != 0)
          goto LABEL_147;
      }
      else
      {
        v35 = *((unsigned __int8 *)*v208 + 39);
        v196 = a8;
        v36 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v36 & 1) != 0)
          goto LABEL_147;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if ((_BYTE)v229 && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_147:
      if (byte_255788F57 >= 0)
        v117 = (const char *)&xmmword_255788F40;
      else
        v117 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v118 = byte_255788F57;
      else
        v118 = *((_QWORD *)&xmmword_255788F40 + 1);
      object[0] = os_log_create(v117, v34);
      v119 = &object[1];
      if (v118 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v118 >= 0x17)
      {
        v120 = v30;
        v121 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v118 | 7) != 0x17)
          v121 = v118 | 7;
        v122 = v121 + 1;
        v119 = (void **)operator new(v121 + 1);
        object[2] = (void *)v118;
        *(_QWORD *)&v229 = v122 | 0x8000000000000000;
        object[1] = v119;
        v30 = v120;
      }
      else
      {
        BYTE7(v229) = v118;
        if (!v118)
        {
LABEL_161:
          *((_BYTE *)v119 + v118) = 0;
          BYTE8(v229) = 1;
          p_p = &__p;
          if (v35 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v35 >= 0x17)
          {
            v124 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17)
              v124 = v35 | 7;
            v125 = v124 + 1;
            p_p = (__int128 *)operator new(v124 + 1);
            *((_QWORD *)&__p + 1) = v35;
            *(_QWORD *)&v231 = v125 | 0x8000000000000000;
            *(_QWORD *)&__p = p_p;
          }
          else
          {
            BYTE7(v231) = v35;
            if (!v35)
              goto LABEL_169;
          }
          memmove(p_p, v34, v35);
LABEL_169:
          *((_BYTE *)p_p + v35) = 0;
          BYTE8(v231) = 1;
          v126 = object[0];
          if (SBYTE7(v231) < 0)
            operator delete((void *)__p);
          if (BYTE8(v229) && SBYTE7(v229) < 0)
            operator delete(object[1]);
          if (object[0])
            os_release(object[0]);
          if (v32 && *(_QWORD *)(v32 + 24))
          {
            v127 = _os_log_pack_size();
            v128 = (std::__shared_weak_count_vtbl *)operator new(v127, (std::align_val_t)8uLL);
            v129 = (std::__shared_weak_count *)operator new();
            v130 = v129;
            v129->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v129->__shared_owners_;
            v129->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v129->__shared_weak_owners_ = 0;
            v129[1].__vftable = v128;
            object[0] = v128;
            object[1] = v128;
            object[2] = v129;
            do
              v132 = __ldxr(p_shared_owners);
            while (__stxr(v132 + 1, p_shared_owners));
            v229 = 0uLL;
            *(_QWORD *)&__p = 0;
            do
              v133 = __ldaxr(p_shared_owners);
            while (__stlxr(v133 - 1, p_shared_owners));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v130);
            }
            v134 = object[0];
            v135 = _os_log_pack_fill();
            *(_DWORD *)v135 = 67109376;
            *(_DWORD *)(v135 + 4) = v193;
            *(_WORD *)(v135 + 8) = 1024;
            *(_DWORD *)(v135 + 10) = v28;
            v136 = operator new();
            v137 = *((unsigned __int8 *)v192 + 39);
            v138 = (const char *)*((_QWORD *)v192 + 2);
            v139 = *((_QWORD *)v192 + 3);
            v140 = v229;
            *(_OWORD *)(v136 + 8) = *(_OWORD *)&object[1];
            if ((v137 & 0x80u) != 0)
              v137 = v139;
            else
              v138 = v194;
            *(_QWORD *)v136 = v134;
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v136 + 24) = v140;
            v229 = 0uLL;
            *(_QWORD *)(v136 + 40) = v138;
            *(_QWORD *)(v136 + 48) = v137;
            *(_BYTE *)(v136 + 56) = 16;
            v204 = (uint64_t (**)())v136;
            (*(void (**)(_QWORD, uint64_t (***)()))(**(_QWORD **)(v32 + 24) + 40))(*(_QWORD *)(v32 + 24), &v204);
            v141 = v204;
            v204 = 0;
            a8 = v196;
            if (v141)
            {
              v142 = (std::__shared_weak_count *)v141[4];
              if (v142)
              {
                v143 = (unint64_t *)&v142->__shared_owners_;
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              v145 = (std::__shared_weak_count *)v141[2];
              if (v145)
              {
                v146 = (unint64_t *)&v145->__shared_owners_;
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
              MEMORY[0x227684CE8](v141, 0x10F0C40B62ED6C6);
            }
            v148 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
            if (*((_QWORD *)&v229 + 1))
            {
              v149 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
              do
                v150 = __ldaxr(v149);
              while (__stlxr(v150 - 1, v149));
              if (!v150)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
            }
            v151 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v152 = (unint64_t *)((char *)object[2] + 8);
              do
                v153 = __ldaxr(v152);
              while (__stlxr(v153 - 1, v152));
              if (!v153)
              {
                ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                std::__shared_weak_count::__release_weak(v151);
              }
            }
          }
          else
          {
            os_log_type_enabled(v126, OS_LOG_TYPE_ERROR);
            LODWORD(object[0]) = 67109376;
            HIDWORD(object[0]) = v193;
            LOWORD(object[1]) = 1024;
            *(_DWORD *)((char *)&object[1] + 2) = v28;
            v154 = (void *)_os_log_send_and_compose_impl();
            a8 = v196;
            if (v154)
              free(v154);
          }
          if (v30)
          {
            sub_22322C138((uint64_t)&v208, "Cropped image size (%d, %d) too small. Require at least 2 x 2", v193, v28);
            sub_223182C08((uint64_t)&v208);
          }
          sub_223182C08((uint64_t)&v208);
          v155 = (std::__shared_weak_count *)v213;
          if ((_QWORD)v213)
          {
            v156 = (unint64_t *)(v213 + 8);
            do
              v157 = __ldaxr(v156);
            while (__stlxr(v157 - 1, v156));
            if (!v157)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }
LABEL_218:
          *(_OWORD *)(a8 + 16) = 0u;
          *(_OWORD *)(a8 + 32) = 0u;
          *(_OWORD *)a8 = 0u;
          *(_QWORD *)(a8 + 48) = &off_24EC24788;
          sub_223484C70((uint64_t *)(a8 + 56));
          *(_OWORD *)(a8 + 168) = 0u;
          *(_OWORD *)(a8 + 152) = 0u;
          *(_OWORD *)(a8 + 136) = 0u;
          return;
        }
      }
      memmove(v119, v117, v118);
      goto LABEL_161;
    }
  }
  if (v28 <= 1)
    goto LABEL_19;
  if (v15.i32[0] == (_DWORD)v27 && v15.i32[1] == (_DWORD)v28)
  {
    sub_223EE8890(a8, a1, a2, a3, a4, a5, a6, a7);
    return;
  }
  v197 = a8;
  v37 = (v15.i32[0] - v27) >> 1;
  v38 = v27;
  v39 = (v15.i32[1] - v28) >> 1;
  v40 = v38 | (v28 << 32);
  v224[0] = v37 | (v39 << 32);
  v224[1] = v40;
  v41 = *(_QWORD *)(a2 + 16);
  v223[0] = *(_QWORD *)a2 + 2 * (*(_DWORD *)(a2 + 16) * v37 + *(_DWORD *)(a2 + 20) * v39);
  v223[1] = v40;
  v223[2] = v41;
  if ((_DWORD)v28 * HIDWORD(v41) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_310;
  }
  v42 = *(_QWORD *)(a3 + 16);
  v222[0] = *(_QWORD *)a3 + (*(_DWORD *)(a3 + 16) * v37 + *(_DWORD *)(a3 + 20) * v39);
  v222[1] = v40;
  v222[2] = v42;
  if ((_DWORD)v28 * HIDWORD(v42) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_310;
  }
  v43 = *(_QWORD *)a4 + 2 * (*(_DWORD *)(a4 + 40) * v37 + *(_DWORD *)(a4 + 44) * v39);
  HIDWORD(object[0]) = v40;
  LODWORD(object[0]) = 3;
  LODWORD(object[1]) = v28;
  v44 = *(uint64_t *)((char *)object + 4);
  v45 = object[0];
  LODWORD(object[0]) = 1;
  *(void **)((char *)object + 4) = *(void **)(a4 + 40);
  v216[0] = v43;
  v216[1] = v45;
  v218 = object[0];
  v217 = HIDWORD(v44);
  v219 = (int)object[1];
  v220 = v44;
  v221 = *(uint64_t *)((char *)object + 4);
  if (LODWORD(object[1]) * HIDWORD(v44) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
LABEL_310:
    abort();
  }
  *(float *)&v46 = a5[3].f32[0] - (float)v37;
  *(float *)&v47 = a5[3].f32[1] - (float)v39;
  v204 = (uint64_t (**)())a5[2];
  *(_QWORD *)&v205[0] = __PAIR64__(v47, v46);
  sub_223207E58(object, (int *)&v204);
  v214 = v232;
  v210 = *(_OWORD *)&object[1];
  v211 = v229;
  v212 = __p;
  v213 = v231;
  v215 = v40;
  v208 = &off_24EC207B8;
  rep = &off_24EC20868;
  sub_223EE8890((uint64_t)object, a1, (uint64_t)v223, (uint64_t)v222, (uint64_t)v216, (float32x2_t *)&v208, a6, a7);
  *(_QWORD *)(v197 + 48) = &off_24EC24788;
  *(_OWORD *)(v197 + 16) = 0u;
  *(_OWORD *)(v197 + 32) = 0u;
  *(_OWORD *)v197 = 0u;
  sub_223484C70((uint64_t *)(v197 + 56));
  *(_OWORD *)(v197 + 136) = 0u;
  *(_OWORD *)(v197 + 168) = 0u;
  *(_OWORD *)(v197 + 152) = 0u;
  v48 = *(void **)v197;
  if (*(_QWORD *)v197)
  {
    *(_QWORD *)(v197 + 8) = v48;
    operator delete(v48);
    *(_QWORD *)v197 = 0;
    *(_QWORD *)(v197 + 8) = 0;
    *(_QWORD *)(v197 + 16) = 0;
    v48 = *(void **)(v197 + 136);
  }
  *(_OWORD *)v197 = *(_OWORD *)object;
  *(void **)(v197 + 16) = object[2];
  memset(object, 0, sizeof(object));
  if (v48)
  {
    *(_QWORD *)(v197 + 144) = v48;
    operator delete(v48);
    *(_QWORD *)(v197 + 136) = 0;
    *(_QWORD *)(v197 + 144) = 0;
    *(_QWORD *)(v197 + 152) = 0;
  }
  v49 = (unsigned int *)v239;
  v50 = *(void **)(v197 + 160);
  *(_QWORD *)(v197 + 136) = v239;
  v51 = (unsigned int *)v240;
  *(_OWORD *)(v197 + 144) = v240;
  v240 = 0uLL;
  v239 = 0;
  if (v50)
  {
    *(_QWORD *)(v197 + 168) = v50;
    operator delete(v50);
    *(_QWORD *)(v197 + 160) = 0;
    *(_QWORD *)(v197 + 168) = 0;
    *(_QWORD *)(v197 + 176) = 0;
    v49 = *(unsigned int **)(v197 + 136);
    v52 = *(unsigned int **)(v197 + 144);
  }
  else
  {
    v52 = v51;
  }
  *(_OWORD *)(v197 + 160) = v241;
  *(_QWORD *)(v197 + 176) = v242;
  v242 = 0;
  v241 = 0uLL;
  while (v49 != v52)
  {
    v57 = v49[2];
    v58 = v49[3];
    v59 = v49[1];
    _CF = v57 >= *v49;
    v60 = v57 - *v49;
    if (_CF)
      v61 = v60 + 1;
    else
      v61 = 0;
    if (v58 >= v59)
      v62 = v58 - v59 + 1;
    else
      v62 = 0;
    if (v61)
      _ZF = v62 == 0;
    else
      _ZF = 1;
    if (_ZF)
    {
      v55 = 0;
      v56 = -1;
    }
    else
    {
      v53 = v39 + v49[1];
      v54 = v37 + *v49;
      v55 = (v61 + v54 - 1) | ((unint64_t)(v62 + v53 - 1) << 32);
      v56 = v54 | (v53 << 32);
    }
    *(_QWORD *)v49 = v56;
    *((_QWORD *)v49 + 1) = v55;
    v49 += 4;
  }
  v204 = &off_24EC24788;
  sub_2236B4564(v14, (void **)&unk_2246908B2, (uint64_t *)v205);
  v64 = v205[0];
  v205[0] = 0uLL;
  v65 = *(std::__shared_weak_count **)(v197 + 64);
  *(_OWORD *)(v197 + 56) = v64;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  *(_OWORD *)(v197 + 72) = v205[1];
  *(_OWORD *)(v197 + 88) = v205[2];
  *(_OWORD *)(v197 + 104) = v205[3];
  *(_QWORD *)(v197 + 120) = v206;
  *(_WORD *)(v197 + 128) = v207;
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v205[0] + 1);
  if (*((_QWORD *)&v205[0] + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v205[0] + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v204 = &off_24EC22138;
  sub_2236B487C(v197 + 48, (uint64_t *)v205);
  sub_2236B4984((uint64_t)&v204, v224, (uint64_t)&v198);
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v205[0] + 1);
  if (!*((_QWORD *)&v205[0] + 1))
    goto LABEL_68;
  v72 = (unint64_t *)(*((_QWORD *)&v205[0] + 1) + 8);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
    v74 = v231;
    if (*((_QWORD *)&v231 + 1))
    {
LABEL_69:
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
      do
        v78 = __ldaxr(v76);
      while (__stlxr(v78 - 1, v76));
      if (v78)
      {
        if (!v74)
          goto LABEL_88;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
        if (!v74)
          goto LABEL_88;
      }
      v79 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
      v74 = v231;
      if (*((_QWORD *)&v231 + 1))
      {
        v80 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
        do
          v82 = __ldaxr(v80);
        while (__stlxr(v82 - 1, v80));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      goto LABEL_85;
    }
  }
  else
  {
LABEL_68:
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
    v74 = v231;
    if (*((_QWORD *)&v231 + 1))
      goto LABEL_69;
  }
  if (!v74)
  {
LABEL_88:
    v226 = 0;
    v83 = v198;
    if (!v198)
      goto LABEL_104;
    goto LABEL_89;
  }
LABEL_85:
  if (!v238)
    goto LABEL_88;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v74 + 96))(&v226, v74, 0);
  v83 = v198;
  if (!v198)
    goto LABEL_104;
LABEL_89:
  v84 = v199;
  if (v199)
  {
    v85 = (unint64_t *)&v199->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    do
      v87 = __ldaxr(v85);
    while (__stlxr(v87 - 1, v85));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
    v83 = v198;
    v88 = v199;
    if (v199)
    {
      v89 = (unint64_t *)&v199->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
      do
        v91 = __ldaxr(v89);
      while (__stlxr(v91 - 1, v89));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
  }
  if (!v203)
  {
LABEL_104:
    v225 = 0;
    v92 = v234;
    v93 = v236;
    if (v236 != v234)
      goto LABEL_131;
    goto LABEL_105;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v83 + 96))(&v225, v83, 1);
  v92 = v234;
  v93 = v236;
  if (v236 != v234)
  {
LABEL_131:
    v108 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
    v107 = v231;
    if (*((_QWORD *)&v231 + 1))
    {
      v109 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
      do
        v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
      do
        v111 = __ldaxr(v109);
      while (__stlxr(v111 - 1, v109));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
      if (!v107)
        goto LABEL_223;
      v112 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
      v107 = v231;
      if (*((_QWORD *)&v231 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
        do
          v115 = __ldaxr(v113);
        while (__stlxr(v115 - 1, v113));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
    }
    else if (!(_QWORD)v231)
    {
      goto LABEL_223;
    }
    if (v238)
    {
      (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, _QWORD))(*(_QWORD *)v107 + 96))(&v204, v107, 0);
      v158 = v198;
      if (!v198)
        goto LABEL_239;
      goto LABEL_224;
    }
LABEL_223:
    v204 = 0;
    v158 = v198;
    if (!v198)
      goto LABEL_239;
LABEL_224:
    v159 = v199;
    if (v199)
    {
      v160 = (unint64_t *)&v199->__shared_owners_;
      do
        v161 = __ldxr(v160);
      while (__stxr(v161 + 1, v160));
      do
        v162 = __ldaxr(v160);
      while (__stlxr(v162 - 1, v160));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
      v158 = v198;
      v163 = v199;
      if (v199)
      {
        v164 = (unint64_t *)&v199->__shared_owners_;
        do
          v165 = __ldxr(v164);
        while (__stxr(v165 + 1, v164));
        do
          v166 = __ldaxr(v164);
        while (__stlxr(v166 - 1, v164));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
    }
    if (v203)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v158 + 96))(&v227, v158, 1);
      if (!v234)
        goto LABEL_279;
LABEL_240:
      v167 = v235;
      if (v235)
      {
        v168 = v236;
        v169 = v201;
        v170 = (char *)__src;
        if (v237 && __src)
        {
          v171 = v231;
          if (*((_QWORD *)&v231 + 1))
          {
            v172 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
            do
              v173 = __ldxr(v172);
            while (__stxr(v173 + 1, v172));
            do
              v174 = __ldaxr(v172);
            while (__stlxr(v174 - 1, v172));
            if (!v174)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v171 + 1) + 16))(*((_QWORD *)&v171 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v171 + 1));
            }
          }
          (*(void (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)v171 + 88))(v171, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
          v170 = (char *)__src;
        }
        v175 = (char *)__dst;
        if (v202 && __dst)
        {
          v176 = v198;
          v177 = v199;
          if (v199)
          {
            v178 = (unint64_t *)&v199->__shared_owners_;
            do
              v179 = __ldxr(v178);
            while (__stxr(v179 + 1, v178));
            do
              v180 = __ldaxr(v178);
            while (__stlxr(v180 - 1, v178));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
          (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v176 + 88))(v176, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v175 = (char *)__dst;
        }
        v181 = v167 - 1;
        if (v181)
        {
          if ((_DWORD)v92)
          {
            while ((v170
                  || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))&& (v175|| !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)))
            {
              memmove(v175, v170, v92);
              v170 += v168;
              v175 += v169;
              if (!--v181)
                goto LABEL_268;
            }
LABEL_267:
            abort();
          }
          goto LABEL_279;
        }
LABEL_268:
        if ((_DWORD)v92 && !v170)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_267;
          }
          if (!v175)
            goto LABEL_275;
          goto LABEL_278;
        }
        if ((_DWORD)v92 && !v175)
        {
LABEL_275:
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_267;
          }
          v175 = 0;
          goto LABEL_278;
        }
        if ((_DWORD)v92)
LABEL_278:
          memmove(v175, v170, v92);
      }
LABEL_279:
      v182 = v227;
      v227 = 0;
      if (v182)
        (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
      v183 = v204;
      v204 = 0;
      if (v183)
        (*((void (**)(uint64_t (**)()))*v183 + 1))(v183);
      goto LABEL_283;
    }
LABEL_239:
    v227 = 0;
    if (!v234)
      goto LABEL_279;
    goto LABEL_240;
  }
LABEL_105:
  if (v93 != v201)
    goto LABEL_131;
  v94 = v235;
  v95 = __src;
  if (v237 && __src)
  {
    v96 = v231;
    if (*((_QWORD *)&v231 + 1))
    {
      v97 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
      do
        v99 = __ldaxr(v97);
      while (__stlxr(v99 - 1, v97));
      if (!v99)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v96 + 1) + 16))(*((_QWORD *)&v96 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v96 + 1));
      }
    }
    (*(void (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)v96 + 88))(v96, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
    v95 = __src;
  }
  v100 = v94 * (unint64_t)v92;
  if (v100
    && !v95
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_130:
    abort();
  }
  v101 = __dst;
  if (v202 && __dst)
  {
    v102 = v198;
    v103 = v199;
    if (v199)
    {
      v104 = (unint64_t *)&v199->__shared_owners_;
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
      do
        v106 = __ldaxr(v104);
      while (__stlxr(v106 - 1, v104));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v102 + 88))(v102, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v101 = __dst;
  }
  if (v100 && !v101)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_130;
    }
    goto LABEL_145;
  }
  if (v100)
LABEL_145:
    memmove(v101, v95, v100);
LABEL_283:
  v184 = v225;
  v225 = 0;
  if (v184)
    (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
  v185 = v226;
  v226 = 0;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  v186 = v199;
  if (v199)
  {
    v187 = (unint64_t *)&v199->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  if ((_QWORD)v241)
  {
    *((_QWORD *)&v241 + 1) = v241;
    operator delete((void *)v241);
  }
  if (v239)
  {
    *(_QWORD *)&v240 = v239;
    operator delete(v239);
  }
  v189 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
  if (*((_QWORD *)&v231 + 1))
  {
    v190 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  if ((_QWORD)v229)
  {
    *((_QWORD *)&v229 + 1) = v229;
    operator delete((void *)v229);
  }
  if (object[0])
  {
    object[1] = object[0];
    operator delete(object[0]);
  }
}

void sub_223EE8510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  char a69;

  if (a69)
  {
    if (a68 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_223EE8550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;

  if (a68 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDFE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDFE8);
  _Unwind_Resume(a1);
}

void sub_223EE8594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *object)
{
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v64 = a23;
  a23 = 0;
  if (v64)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    v65 = a60;
    a60 = 0;
    if (!v65)
    {
LABEL_3:
      v66 = a61;
      a61 = 0;
      if (!v66)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v65 = a60;
    a60 = 0;
    if (!v65)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = a61;
  a61 = 0;
  if (!v66)
  {
LABEL_5:
    sub_2231DE1B4((uint64_t)&a16);
    sub_223796C9C(a15);
    sub_223796C9C((uint64_t)&object);
    _Unwind_Resume(a1);
  }
LABEL_4:
  (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  goto LABEL_5;
}

uint64_t sub_223EE8890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, float *a8)
{
  _QWORD *v15;
  _QWORD *v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  int64x2_t v36;
  float64x2_t *v37;
  int64x2_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  float64x2_t v46;
  double v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  _DWORD *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int *v81;
  _DWORD *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  const float *v94;
  const float *v95;
  float *v96;
  float *v97;
  char *v98;
  unsigned int **v99;
  unsigned int *v100;
  unsigned int *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  _DWORD *v106;
  _DWORD *v107;
  unint64_t v108;
  unsigned int *v109;
  _DWORD *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  char *v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  float *v120;
  char *v121;
  float v122;
  uint64_t v123;
  float v124;
  unint64_t v125;
  char *v126;
  _DWORD *v128;
  unint64_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  const float *v134;
  const float *v135;
  char *v136;
  float *v137;
  float64x2_t *v138;
  float64x2_t *v139;
  float v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64_t v144;
  float64_t v145;
  float v146;
  char *v147;
  uint64_t v148;
  float *v149;
  char *v150;
  unint64_t v151;
  unint64_t v152;
  float *v153;
  char *v154;
  float v155;
  float *v156;
  float *v157;
  int v158;
  int v159;
  uint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int *v164;
  _DWORD *v165;
  unsigned int v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned int *v176;
  _DWORD *v177;
  unsigned int v178;
  uint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unsigned int *v184;
  _DWORD *v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  float v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int *v196;
  char *v197;
  unsigned int v198;
  char *v199;
  uint64_t v200;
  float v201;
  char *v202;
  char *v203;
  unint64_t v204;
  unint64_t v205;
  float *v206;
  char *v207;
  float v208;
  uint64_t v209;
  float v210;
  unint64_t v211;
  char *v212;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  unint64_t v218;
  unint64_t v219;
  unsigned int *v220;
  char *v221;
  unsigned int v222;
  char *v223;
  float64x2_t *v224;
  float64x2_t *v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64_t v229;
  float64_t v230;
  float v231;
  char *v232;
  uint64_t v233;
  float *v234;
  char *v235;
  unint64_t v236;
  unint64_t v237;
  float *v238;
  char *v239;
  float v240;
  float *v241;
  float *v242;
  int v243;
  int v244;
  _DWORD *v245;
  unint64_t v246;
  char *v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  const float *v251;
  const float *v252;
  char *v253;
  float *v254;
  float v255;
  float v256;
  float64x2_t *v257;
  float64x2_t *v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64_t v262;
  float64_t v263;
  float v264;
  float v265;
  char *v266;
  uint64_t v267;
  float *v268;
  char *v269;
  unint64_t v270;
  unint64_t v271;
  float *v272;
  char *v273;
  float v274;
  float *v275;
  float *v276;
  int v277;
  int v278;
  unsigned int **v279;
  unsigned int *v280;
  unsigned int *v281;
  uint64_t v282;
  char *v283;
  unint64_t v284;
  char *v285;
  float *v286;
  float v287;
  int v288;
  float v289;
  char *v290;
  char *v291;
  unint64_t v292;
  unint64_t v293;
  float *v294;
  float *v295;
  float v296;
  uint64_t v297;
  float v298;
  unint64_t v299;
  char *v300;
  _DWORD *v302;
  unint64_t v303;
  char *v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  const float *v308;
  const float *v309;
  char *v310;
  float *v311;
  uint64_t v312;
  uint64_t v313;
  _DWORD *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unsigned int *v318;
  _DWORD *v319;
  unsigned int v320;
  unint64_t v321;
  size_t v322;
  void **v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  void **v328;
  unint64_t v329;
  unint64_t v330;
  void **v331;
  void **v332;
  unint64_t v333;
  void **v334;
  size_t v335;
  char *v336;
  char *v337;
  void *v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  unint64_t v345;
  void *v346;
  unint64_t v347;
  _BYTE *v348;
  char *v349;
  int64_t v350;
  unint64_t v351;
  char *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  _OWORD *v357;
  __int128 *v358;
  uint64_t v359;
  __int128 v360;
  uint64_t *v361;
  uint64_t v362;
  _QWORD *v363;
  _QWORD *v364;
  unint64_t *i;
  uint64_t v366;
  char *v367;
  unint64_t v368;
  char *v369;
  unint64_t v370;
  unint64_t v371;
  char *v372;
  char *v373;
  unint64_t v374;
  uint64_t v375;
  std::string::size_type v376;
  unint64_t v377;
  _BYTE *v378;
  std::string::size_type v379;
  char **v380;
  _BYTE *v381;
  _BYTE *v382;
  char *v383;
  uint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  char *v390;
  char *v391;
  __int128 *v392;
  uint64_t v393;
  __int128 v394;
  uint64_t v395;
  unint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t (**v399)();
  unint64_t v400;
  char *v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t (**v404)();
  uint64_t (**v405)();
  uint64_t (*v406)();
  std::string::size_type v407;
  char *v408;
  uint64_t *v409;
  unint64_t v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  _BYTE *v418;
  _QWORD *v419;
  int64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  _OWORD *v425;
  char *v426;
  uint64_t v427;
  __int128 v428;
  uint64_t v429;
  unint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  _BYTE *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t *v437;
  int64_t v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  char *v442;
  char *v443;
  char *v444;
  uint64_t v445;
  unint64_t v446;
  char *v447;
  uint64_t v448;
  std::string::size_type v449;
  __int128 v450;
  uint64_t v451;
  uint64_t v452;
  void *v453;
  _QWORD *v454;
  void *v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  char *v459;
  char *v460;
  uint64_t v461;
  __int128 v462;
  std::string::size_type v463;
  std::string::size_type size;
  void *v465;
  std::string::size_type v466;
  void *v467;
  void *v468;
  unint64_t **v469;
  unint64_t **v470;
  unint64_t **v471;
  unint64_t v472;
  unint64_t **v473;
  unint64_t **v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t **v477;
  unint64_t **v478;
  uint64_t v479;
  uint64_t v480;
  _QWORD *v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  char *v485;
  char *v486;
  uint64_t v487;
  _QWORD *v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  char *v493;
  int64x2_t *v494;
  uint64_t *v495;
  int64x2_t v496;
  _QWORD *v497;
  _QWORD *v498;
  void *v499;
  void *v500;
  unint64_t **v501;
  std::string::size_type v502;
  __int128 *v503;
  __int128 *v504;
  unint64_t v505;
  uint64_t v506;
  int32x4_t *v507;
  int32x4_t *v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  char *v512;
  unint64_t v513;
  int32x4_t v514;
  int32x4_t *v515;
  uint64_t v516;
  int v517;
  char *v518;
  char *v519;
  unint64_t v520;
  char *v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  char *v527;
  char *v528;
  char *v529;
  __int128 v530;
  unint64_t v531;
  char *v532;
  char *v533;
  __int128 v534;
  int v535;
  unint64_t v536;
  unint64_t v537;
  char *v538;
  char *v539;
  char *v540;
  __int128 v541;
  char *v542;
  unsigned int **v543;
  unint64_t v544;
  unsigned int *v545;
  int v546;
  unsigned int *v547;
  uint64_t v548;
  unint64_t v549;
  char *v550;
  char *v551;
  uint64_t v552;
  char *v553;
  unint64_t v554;
  unint64_t v555;
  unsigned int *v556;
  char *v557;
  unsigned int v558;
  char *v559;
  char *v560;
  char *v561;
  uint64_t v562;
  char *v563;
  unint64_t v564;
  unint64_t v565;
  unsigned int *v566;
  char *v567;
  unsigned int v568;
  char *v569;
  _DWORD *v570;
  _DWORD *v571;
  float v572;
  void **v573;
  void *v574;
  _BYTE *v575;
  unint64_t *v576;
  unint64_t v577;
  unint64_t *v578;
  unint64_t v579;
  unint64_t *v580;
  char v581;
  unsigned int v582;
  BOOL v583;
  unint64_t *v584;
  char v585;
  unsigned int v586;
  BOOL v587;
  unint64_t *v588;
  unint64_t v589;
  unint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  const float *v593;
  uint64_t v594;
  float *v595;
  _DWORD *v596;
  int v597;
  int64x2_t *v598;
  unint64_t v599;
  uint64_t *v600;
  int64x2_t v601;
  int64x2_t *v602;
  int64x2_t v603;
  int64x2_t v604;
  unint64_t v605;
  _QWORD *v606;
  void *v607;
  void **v608;
  unint64_t v609;
  _DWORD *v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unsigned int v614;
  uint64_t v615;
  unsigned int v616;
  unsigned int v617;
  char *v618;
  char *v619;
  uint64_t v620;
  _DWORD *v621;
  uint64_t v622;
  unint64_t v623;
  unint64_t v624;
  unsigned int *v625;
  _DWORD *v626;
  unsigned int v627;
  char *v628;
  uint64_t v629;
  _DWORD *v630;
  uint64_t v631;
  unint64_t v632;
  unint64_t v633;
  unsigned int *v634;
  _DWORD *v635;
  unsigned int v636;
  void *v637;
  void **v638;
  char *v639;
  char *v640;
  char *v641;
  unint64_t v642;
  char *v643;
  unint64_t v644;
  uint64_t v645;
  __int128 *v646;
  uint64_t v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  char *v651;
  char *v652;
  uint64_t v653;
  unsigned int *v654;
  uint64_t v655;
  float *v656;
  unsigned int v657;
  char *v658;
  unint64_t v659;
  _DWORD *v660;
  _DWORD *v661;
  unint64_t v662;
  unsigned int *v663;
  _DWORD *v664;
  unsigned int v665;
  uint64_t v666;
  uint64_t v667;
  void **v668;
  void *v669;
  uint64_t v670;
  _DWORD *v671;
  unint64_t v672;
  _DWORD *v673;
  unint64_t v674;
  _DWORD *v675;
  char v676;
  unsigned int v677;
  BOOL v678;
  char v679;
  unsigned int v680;
  BOOL v681;
  _DWORD *v682;
  unint64_t v683;
  uint64_t v684;
  uint64_t v685;
  _DWORD *v686;
  __int128 *v687;
  uint64_t v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  _DWORD *v692;
  _DWORD *v693;
  float v694;
  void **v695;
  void *v696;
  _BYTE *v697;
  uint64_t *v698;
  unint64_t v699;
  uint64_t *v700;
  unint64_t v701;
  uint64_t *v702;
  char v703;
  unsigned int v704;
  BOOL v705;
  uint64_t *v706;
  BOOL v707;
  char v708;
  unsigned int v709;
  BOOL v710;
  char v711;
  uint64_t *v712;
  unint64_t v713;
  uint64_t *v714;
  uint64_t v715;
  uint64_t v716;
  const float *v717;
  uint64_t v718;
  float *v719;
  _DWORD *v720;
  int v721;
  char *v722;
  unint64_t v723;
  uint64_t v724;
  unint64_t v725;
  unsigned int *v726;
  float *v727;
  unsigned int v728;
  uint64_t *v729;
  uint64_t v730;
  uint64_t v731;
  unsigned int v732;
  uint64_t *v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  unint64_t v737;
  unsigned int *v738;
  _DWORD *v739;
  unsigned int v740;
  uint64_t *v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unint64_t v745;
  unsigned int *v746;
  _DWORD *v747;
  unsigned int v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  int v752;
  char *v753;
  char *v754;
  uint64_t v755;
  uint64_t (**v756)();
  unint64_t v757;
  unint64_t v758;
  unsigned int *v759;
  uint64_t (**v760)();
  unsigned int v761;
  char *v762;
  void **v763;
  void *v764;
  uint64_t v765;
  _DWORD *v766;
  unint64_t v767;
  _DWORD *v768;
  unint64_t v769;
  _DWORD *v770;
  char v771;
  unsigned int v772;
  BOOL v773;
  char v774;
  unsigned int v775;
  BOOL v776;
  _DWORD *v777;
  unint64_t v778;
  uint64_t v779;
  uint64_t v780;
  _DWORD *v781;
  __int128 *v782;
  uint64_t v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  float v787;
  float v788;
  _DWORD *v789;
  _DWORD *v790;
  float v791;
  void **v792;
  void *v793;
  _BYTE *v794;
  uint64_t *v795;
  unint64_t v796;
  uint64_t *v797;
  unint64_t v798;
  uint64_t *v799;
  char v800;
  unsigned int v801;
  BOOL v802;
  uint64_t *v803;
  char v804;
  unsigned int v805;
  BOOL v806;
  uint64_t *v807;
  unint64_t v808;
  uint64_t *v809;
  uint64_t v810;
  uint64_t v811;
  const float *v812;
  uint64_t v813;
  float *v814;
  _DWORD *v815;
  int v816;
  char *v817;
  char *v818;
  uint64_t v819;
  uint64_t (**v820)();
  unint64_t v821;
  unint64_t v822;
  unsigned int *v823;
  uint64_t (**v824)();
  unsigned int v825;
  char *v826;
  _DWORD *v827;
  _DWORD *v828;
  float v829;
  void **v830;
  void *v831;
  _BYTE *v832;
  uint64_t *v833;
  unint64_t v834;
  uint64_t *v835;
  unint64_t v836;
  uint64_t *v837;
  char v838;
  unsigned int v839;
  BOOL v840;
  uint64_t *v841;
  char v842;
  unsigned int v843;
  BOOL v844;
  uint64_t *v845;
  unint64_t v846;
  uint64_t *v847;
  uint64_t v848;
  uint64_t v849;
  const float *v850;
  uint64_t v851;
  float *v852;
  _DWORD *v853;
  int v854;
  char *v855;
  uint64_t v856;
  unsigned int *v857;
  uint64_t v858;
  int *v859;
  unsigned int v860;
  unsigned int v861;
  void **v862;
  void *v863;
  uint64_t v864;
  unsigned int *v865;
  unint64_t v866;
  unsigned int *v867;
  unint64_t v868;
  unsigned int *v869;
  char v870;
  unsigned int v871;
  BOOL v872;
  BOOL v873;
  char v874;
  unsigned int v875;
  BOOL v876;
  char v877;
  unsigned int *v878;
  unint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unsigned int *v882;
  __int128 *v883;
  uint64_t v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  char *v888;
  uint64_t v889;
  _DWORD *v890;
  uint64_t v891;
  unint64_t v892;
  unint64_t v893;
  unsigned int *v894;
  _DWORD *v895;
  unsigned int v896;
  char *v897;
  char *v898;
  _QWORD *v899;
  _QWORD *v900;
  uint64_t v901;
  uint64_t v902;
  char *v903;
  char *v904;
  uint64_t v905;
  unint64_t v906;
  unint64_t v907;
  _BYTE *v908;
  char *v909;
  int64_t v910;
  unint64_t v911;
  char *v912;
  uint64_t v913;
  unint64_t v914;
  uint64_t v915;
  uint64_t v916;
  _OWORD *v917;
  char *v918;
  uint64_t v919;
  __int128 v920;
  char *v921;
  _OWORD *v922;
  _OWORD *v923;
  unint64_t v924;
  char **v925;
  char *v926;
  _QWORD *v927;
  unint64_t v928;
  _QWORD *v929;
  uint64_t v930;
  char *v931;
  uint64_t v932;
  unint64_t v933;
  uint64_t v934;
  unint64_t v935;
  unint64_t v936;
  char *v937;
  char *v938;
  char *v939;
  void **v940;
  void **v941;
  void *v942;
  void *v943;
  std::string::size_type v944;
  std::string::size_type v945;
  void *v946;
  void *v947;
  unsigned __int8 v948;
  std::string *v949;
  __int128 v950;
  std::string *v951;
  __int128 v952;
  void **v953;
  uint64_t v954;
  uint64_t v955;
  unsigned __int8 v956;
  uint64_t *v957;
  std::string::size_type v958;
  char *v959;
  _DWORD *v960;
  _DWORD *v961;
  unsigned int v962;
  unsigned int v963;
  uint64_t v964;
  unsigned int v965;
  unsigned int v967;
  uint64_t v968;
  std::string::size_type v969;
  std::__shared_weak_count *v970;
  unint64_t *v971;
  unint64_t v972;
  unint64_t v973;
  unint64_t v974;
  unint64_t v975;
  unint64_t v976;
  uint64_t v977;
  __int128 v978;
  unint64_t *v979;
  unint64_t v980;
  unint64_t v981;
  uint64_t v982;
  unsigned __int8 v983;
  __int16 v984;
  unint64_t *p_shared_owners;
  unint64_t v986;
  unint64_t v987;
  std::__shared_weak_count *v988;
  unint64_t *v989;
  unint64_t v990;
  std::__shared_weak_count *v991;
  unint64_t *v992;
  unint64_t v993;
  std::__shared_weak_count *v994;
  unint64_t *v995;
  unint64_t v996;
  std::__shared_weak_count *v997;
  unint64_t *v998;
  unint64_t v999;
  uint64_t v1000;
  void *v1001;
  std::__shared_weak_count *v1002;
  unint64_t *v1003;
  unint64_t v1004;
  __int128 v1005;
  unint64_t *v1006;
  unint64_t v1007;
  unint64_t *v1008;
  unint64_t v1009;
  std::__shared_weak_count *v1010;
  unint64_t *v1011;
  unint64_t v1012;
  std::__shared_weak_count *v1013;
  unint64_t *v1014;
  unint64_t v1015;
  std::__shared_weak_count *v1016;
  unint64_t *v1017;
  unint64_t v1018;
  unint64_t *v1019;
  unint64_t v1020;
  std::__shared_weak_count *v1021;
  unint64_t *v1022;
  unint64_t v1023;
  char v1024;
  unsigned int v1025;
  unsigned int v1026;
  __int32 v1027;
  int32x4_t v1028;
  double v1029;
  double v1030;
  int32x4_t v1031;
  __n128 v1032;
  float32x4_t v1033;
  double v1034;
  float32x4_t v1035;
  __int128 v1036;
  std::__shared_weak_count *v1037;
  unint64_t *v1038;
  unint64_t v1039;
  std::__shared_weak_count *v1040;
  unint64_t *v1041;
  unint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  char *v1045;
  char *v1046;
  unint64_t v1047;
  float32x4_t v1048;
  int8x16_t v1049;
  int32x4_t v1050;
  int32x4_t v1051;
  unint64_t v1052;
  unint64_t v1053;
  unsigned int v1054;
  unsigned int v1055;
  __int128 v1056;
  std::__shared_weak_count *v1057;
  unint64_t *v1058;
  unint64_t v1059;
  __int128 v1060;
  std::__shared_weak_count *v1061;
  unint64_t *v1062;
  unint64_t v1063;
  std::__shared_weak_count *v1064;
  unint64_t *v1065;
  unint64_t v1066;
  __int128 v1067;
  std::__shared_weak_count *v1068;
  unint64_t *v1069;
  unint64_t v1070;
  std::__shared_weak_count *v1071;
  unint64_t *v1072;
  unint64_t v1073;
  uint64_t v1074;
  std::__shared_weak_count *v1075;
  unint64_t *v1076;
  unint64_t v1077;
  unint64_t v1078;
  std::__shared_weak_count *v1079;
  unint64_t *v1080;
  unint64_t v1081;
  std::__shared_weak_count *v1082;
  unint64_t *v1083;
  unint64_t v1084;
  std::__shared_weak_count *v1085;
  unint64_t *v1086;
  unint64_t v1087;
  uint64_t v1088;
  std::__shared_weak_count *v1089;
  unint64_t *v1090;
  unint64_t v1091;
  std::__shared_weak_count *v1092;
  unint64_t *v1093;
  unint64_t v1094;
  std::__shared_weak_count *v1095;
  unint64_t *v1096;
  unint64_t v1097;
  std::__shared_weak_count *v1098;
  unint64_t *v1099;
  unint64_t v1100;
  __int128 v1101;
  std::__shared_weak_count *v1102;
  unint64_t *v1103;
  unint64_t v1104;
  std::__shared_weak_count *v1105;
  unint64_t *v1106;
  unint64_t v1107;
  int v1108;
  int v1109;
  int v1110;
  uint64_t v1111;
  uint64_t v1112;
  BOOL *v1113;
  _BYTE *v1114;
  int v1115;
  uint64_t v1116;
  uint64_t v1117;
  int j;
  int v1119;
  BOOL *v1120;
  _BYTE *v1121;
  unint64_t **v1122;
  unint64_t **v1123;
  uint64_t v1124;
  void *v1125;
  unint64_t **v1126;
  uint64_t v1127;
  uint64_t v1128;
  float32x2_t v1129;
  float64x2_t **v1130;
  int32x4_t v1131;
  int32x4_t v1132;
  float64x2_t **v1133;
  int8x16_t v1134;
  float32x4_t v1135;
  float32x2_t v1136;
  int8x16_t v1137;
  int8x16_t v1138;
  float32x4_t v1139;
  float32x2_t v1140;
  float32x2_t v1141;
  uint64_t v1142;
  float32x2_t v1143;
  float32x4_t v1144;
  char *v1145;
  double v1146;
  double v1147;
  float32x4_t v1148;
  float32x4_t v1149;
  double v1150;
  float v1156;
  int8x16_t v1157;
  int8x16_t v1158;
  float32x2_t v1159;
  int8x16_t v1160;
  int8x16_t v1161;
  int8x16_t v1162;
  float32x4_t v1163;
  int8x16_t v1164;
  int8x16_t v1165;
  float32x4_t v1166;
  uint64_t v1167;
  std::__shared_weak_count *v1168;
  unint64_t *v1169;
  unint64_t v1170;
  unint64_t v1171;
  std::__shared_weak_count *v1172;
  unint64_t *v1173;
  unint64_t v1174;
  unint64_t v1175;
  uint64_t (**v1176)();
  std::string::size_type v1177;
  std::string::size_type v1178;
  _DWORD *v1179;
  _DWORD *v1180;
  uint64_t v1181;
  std::__shared_weak_count *v1182;
  uint64_t v1183;
  unint64_t *v1184;
  unint64_t v1185;
  __int16 v1186;
  unint64_t v1187;
  uint64_t v1188;
  unint64_t v1189;
  unint64_t v1190;
  unint64_t v1191;
  unsigned int v1192;
  unsigned int v1193;
  uint64_t v1194;
  unsigned int v1195;
  unsigned int v1196;
  uint64_t v1197;
  uint64_t v1198;
  std::__shared_weak_count *v1199;
  unint64_t *v1200;
  unint64_t v1201;
  unint64_t v1202;
  std::__shared_weak_count *v1203;
  unint64_t *v1204;
  unint64_t v1205;
  unint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  size_t v1209;
  int v1210;
  void *v1211;
  uint64_t v1212;
  std::__shared_weak_count *v1213;
  unint64_t *v1214;
  unint64_t v1215;
  unint64_t v1216;
  size_t v1217;
  int v1218;
  char *v1219;
  uint64_t v1220;
  std::__shared_weak_count *v1221;
  unint64_t *v1222;
  unint64_t v1223;
  unint64_t v1224;
  int v1225;
  int v1226;
  int v1227;
  uint64_t v1228;
  _BYTE *v1229;
  uint64_t v1230;
  std::__shared_weak_count *v1231;
  unint64_t *v1232;
  unint64_t v1233;
  unint64_t v1234;
  int v1235;
  int v1236;
  int v1237;
  int v1238;
  _BYTE *v1239;
  uint64_t (**v1240)();
  std::__shared_weak_count *v1241;
  unint64_t *v1242;
  unint64_t v1243;
  __int16 v1244;
  uint64_t v1245;
  int8x16_t v1246;
  int32x4_t v1247;
  int32x4_t v1248;
  double v1249;
  double v1250;
  double v1251;
  int8x16_t v1252;
  std::__shared_weak_count *v1253;
  unint64_t *v1254;
  unint64_t v1255;
  int *k;
  std::string::size_type v1257;
  int v1258;
  int v1259;
  float32x4_t v1260;
  __int128 v1261;
  char *v1262;
  char *v1263;
  unint64_t v1264;
  unint64_t v1265;
  unint64_t v1266;
  char *v1267;
  char *v1268;
  char *v1269;
  uint64_t v1270;
  int v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  void *v1275;
  _QWORD *v1276;
  _QWORD *v1277;
  _QWORD *v1278;
  uint64_t *v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t *v1282;
  std::__shared_weak_count *v1283;
  unint64_t *v1284;
  unint64_t v1285;
  std::string::size_type v1286;
  std::string::size_type v1287;
  void *v1288;
  std::string::size_type v1289;
  void *v1290;
  void *v1291;
  void **v1292;
  void **v1293;
  void *v1294;
  uint64_t v1296;
  __int128 v1297;
  __int128 v1298;
  uint64_t v1299;
  _QWORD *v1300;
  float32x4_t v1301;
  __int128 v1302;
  char *v1303;
  float32x4_t v1304;
  float32x2_t v1305;
  float32x4_t v1306;
  float32x2_t v1307;
  float32x2_t v1308;
  float32x2_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  _OWORD *v1312;
  uint64_t v1313;
  int v1314;
  unint64_t v1315;
  int v1316;
  uint64_t v1317;
  float32x2_t *v1318;
  void *v1319;
  uint64_t v1320;
  uint64_t v1321;
  int v1322;
  uint64_t v1323;
  uint64_t v1324;
  unint64_t v1325;
  unint64_t v1326;
  uint64_t v1327;
  uint64_t v1329;
  unint64_t **v1330;
  unint64_t v1331;
  uint64_t *v1332;
  uint64_t v1333;
  size_t v1334;
  uint64_t v1335;
  unsigned int **v1336;
  uint64_t v1337;
  float64x2_t **v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  __int128 v1344;
  std::string::size_type v1345;
  uint64_t v1346;
  unsigned int v1347;
  uint64_t v1348;
  char *v1349;
  unsigned int **v1350;
  _QWORD *v1351;
  char *v1352;
  char *v1353;
  _BYTE v1354[20];
  __int32 v1355;
  float32x2_t v1356;
  int v1357;
  std::string v1358;
  void *__dst;
  unint64_t **v1360;
  char *v1361;
  void *v1362;
  unsigned int **v1363;
  char *v1364;
  uint64_t v1365;
  _BYTE v1366[44];
  unsigned int v1367;
  unsigned int v1368;
  int v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  char *v1374;
  uint64_t v1375;
  uint64_t v1376;
  __int128 *v1377;
  __int128 *v1378;
  void *v1379[2];
  uint64_t v1380;
  void *v1381;
  __int128 v1382;
  void *v1383;
  char *v1384;
  char *v1385;
  uint64_t v1386;
  void *v1387;
  __int128 v1388;
  __int128 v1389;
  uint64_t v1390;
  _BYTE __src[56];
  int32x4_t v1392;
  uint64_t v1393;
  __int16 v1394;
  uint64_t v1395;
  _QWORD v1396[2];
  float32x4_t v1397[4];
  void *__p[9];
  __int128 v1399;
  __int128 v1400;
  __int128 v1401;
  uint64_t v1402;
  uint64_t (**v1403)();
  std::string::size_type v1404;
  std::__shared_weak_count *v1405;
  _BYTE v1406[48];
  std::string v1407;
  _BYTE v1408[26];
  uint64_t v1409;
  float32x4x2_t v1410;
  float32x4x2_t v1411;
  float32x4x2_t v1412;
  float32x4x2_t v1413;

  v1409 = *MEMORY[0x24BDAC8D0];
  v15 = (_QWORD *)operator new();
  *v15 = &off_24EC64170;
  v1318 = a6;
  v1300 = v15;
  sub_223EFC160((uint64_t)v1366, a3, a6, (uint64_t)v15, *a8, a8[4] * a8[4]);
  v1299 = a1;
  v1323 = (uint64_t)a8;
  v1324 = a3;
  v1320 = a5;
  v1313 = a4;
  v1317 = a7;
  v16 = (_QWORD *)sub_223EFD368((uint64_t)v1366, a3, a5, a4, a7, a8[11], a8[5] * a8[5]);
  v1363 = 0;
  v1362 = 0;
  v1364 = 0;
  v21 = v16[3];
  v22 = v16[4];
  __p[0] = &v1362;
  LOBYTE(__p[1]) = 0;
  v23 = v22 - v21;
  if (v22 != v21)
  {
    v24 = 0xAAAAAAAAAAAAAAABLL * (v23 >> 3);
    if (v24 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v25 = (char *)operator new(v23);
    v26 = 0;
    v1362 = v25;
    v1363 = (unsigned int **)v25;
    v1364 = &v25[24 * v24];
    do
    {
      v27 = v21 + v26;
      v28 = *(_QWORD *)(v21 + v26 + 8);
      v29 = &v25[v26];
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = v28;
      *((_QWORD *)v29 + 2) = 0;
      if (v28)
      {
        if (v28 > 0xAAAAAAAAAAAAAAALL)
          sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
        v30 = operator new(12 * v28);
        *(_QWORD *)v29 = v30;
        *((_QWORD *)v29 + 2) = v28;
        v31 = *(_QWORD *)(v27 + 8);
        if (v31)
          memmove(v30, *(const void **)v27, 12 * v31);
      }
      v26 += 24;
    }
    while (v21 + v26 != v22);
    v1363 = (unsigned int **)&v25[v26];
  }
  v1365 = v16[6];
  memset(v1397, 0, 24);
  v32 = (v1371 - v1370) / 224;
  if (v1371 != v1370)
  {
    if (v32 >> 61)
      sub_22367C394();
    v33 = (char *)operator new(8 * v32);
    v1397[0].i64[0] = (uint64_t)v33;
    v1397[1].i64[0] = (uint64_t)&v33[8 * v32];
    if (v32 >= 4)
    {
      v34 = v32 & 0xFFFFFFFFFFFFFFFCLL;
      v35 = &v33[8 * (v32 & 0xFFFFFFFFFFFFFFFCLL)];
      v36 = (int64x2_t)xmmword_2245F5410;
      v37 = (float64x2_t *)(v33 + 16);
      v17 = vdupq_n_s64(2uLL);
      v38 = vdupq_n_s64(4uLL);
      v39 = v32 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v18 = (float64x2_t)vaddq_s64(v36, v17);
        v37[-1] = (float64x2_t)v36;
        *v37 = v18;
        v36 = vaddq_s64(v36, v38);
        v37 += 2;
        v39 -= 4;
      }
      while (v39);
      goto LABEL_21;
    }
    v34 = 0;
    v35 = v33;
    do
    {
      *(_QWORD *)v35 = v34;
      v35 += 8;
      ++v34;
LABEL_21:
      ;
    }
    while (v32 != v34);
    v1397[0].i64[1] = (uint64_t)v35;
  }
  if (v1373)
  {
LABEL_27:
    if (*(float *)v1374 > 0.0001)
      goto LABEL_300;
    v1325 = v32;
    v41 = *(_QWORD *)(v1374 + 4);
    v42 = HIDWORD(v41);
    v43 = v41;
    v44 = v1370 + 224 * v41;
    v45 = v1370 + 224 * HIDWORD(v41);
    v17.i64[0] = *(_QWORD *)(v44 + 176);
    v18.f64[0] = *(float64_t *)(v45 + 176);
    *(float64x2_t *)(v44 + 160) = vaddq_f64(*(float64x2_t *)(v44 + 160), *(float64x2_t *)(v45 + 160));
    v46 = *(float64x2_t *)(v44 + 80);
    *(_QWORD *)(v44 + 176) = *(_OWORD *)&vaddq_f64((float64x2_t)v17, v18);
    v19.f64[0] = *(float64_t *)(v45 + 144);
    v47 = *(double *)(v45 + 152);
    v20.f64[0] = *(float64_t *)(v44 + 144);
    v48 = *(double *)(v44 + 152);
    v49 = vaddq_f64(*(float64x2_t *)(v44 + 128), *(float64x2_t *)(v45 + 128));
    v50 = vaddq_f64(*(float64x2_t *)(v44 + 112), *(float64x2_t *)(v45 + 112));
    v51 = vaddq_f64(*(float64x2_t *)(v44 + 96), *(float64x2_t *)(v45 + 96));
    *(float64x2_t *)(v44 + 80) = vaddq_f64(v46, *(float64x2_t *)(v45 + 80));
    *(float64x2_t *)(v44 + 96) = v51;
    *(float64x2_t *)(v44 + 112) = v50;
    *(float64x2_t *)(v44 + 128) = v49;
    *(_QWORD *)(v44 + 144) = *(_OWORD *)&vaddq_f64(v20, v19);
    *(double *)(v44 + 152) = v47 + v48;
    LODWORD(v52) = *(_DWORD *)(v44 + 64);
    LODWORD(v53) = *(_DWORD *)(v44 + 68);
    v54 = *(_DWORD *)(v45 + 64);
    v55 = *(_DWORD *)(v45 + 68);
    if (v54 >= v52)
      v52 = v52;
    else
      v52 = v54;
    if (v55 >= v53)
      v53 = v53;
    else
      v53 = v55;
    LODWORD(v56) = *(_DWORD *)(v44 + 72);
    LODWORD(v57) = *(_DWORD *)(v44 + 76);
    v58 = *(_DWORD *)(v45 + 72);
    v59 = *(_DWORD *)(v45 + 76);
    if (v56 <= v58)
      v56 = v58;
    else
      v56 = v56;
    if (v57 <= v59)
      v57 = v59;
    else
      v57 = v57;
    *(_QWORD *)(v44 + 64) = v52 | (v53 << 32);
    *(_QWORD *)(v44 + 72) = v56 | (v57 << 32);
    v60 = *(_QWORD *)(v44 + 8);
    v61 = *(_QWORD *)v45 + *(_QWORD *)v44;
    *(float64x2_t *)(v44 + 184) = vdivq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v44 + 184), (double)*(unint64_t *)v44), vmulq_n_f64(*(float64x2_t *)(v45 + 184), (double)*(unint64_t *)v45)), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v61), 0));
    *(_QWORD *)v44 = v61;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v60 + 16))(__p);
    *(void **)(v44 + 24) = __p[0];
    v64 = *(_OWORD *)&__p[1];
    *(void **)(v44 + 48) = __p[3];
    *(_OWORD *)(v44 + 32) = v64;
    *(void **)(v44 + 56) = __p[4];
    *(_QWORD *)(v1397[0].i64[0] + 8 * v42) = v41;
    v65 = v1372;
    v66 = v1372 + 24 * v41;
    v67 = *(_QWORD *)(v66 + 8);
    if (v67)
    {
      v68 = *(_DWORD **)v66;
      v69 = *(_QWORD *)v66 + 12 * v67;
      v70 = *(_QWORD *)(v66 + 8);
      do
      {
        v71 = v70 >> 1;
        v72 = &v68[3 * (v70 >> 1)];
        v74 = *v72;
        v73 = v72 + 3;
        v70 += ~(v70 >> 1);
        if (v74 >= HIDWORD(v41))
          v70 = v71;
        else
          v68 = v73;
      }
      while (v70);
      if (v68 != (_DWORD *)v69 && *v68 <= HIDWORD(v41))
      {
        if (v68 + 3 != (_DWORD *)v69)
        {
          memmove(v68, v68 + 3, v69 - (_QWORD)(v68 + 3));
          v67 = *(_QWORD *)(v66 + 8);
          v65 = v1372;
        }
        *(_QWORD *)(v66 + 8) = v67 - 1;
      }
    }
    v75 = v65 + 24 * HIDWORD(v41);
    v76 = *(_QWORD *)(v75 + 8);
    if (v76)
    {
      v77 = *(_DWORD **)v75;
      v78 = *(_QWORD *)v75 + 12 * v76;
      v79 = *(_QWORD *)(v75 + 8);
      do
      {
        v80 = v79 >> 1;
        v81 = &v77[3 * (v79 >> 1)];
        v83 = *v81;
        v82 = v81 + 3;
        v79 += ~(v79 >> 1);
        if (v83 >= v41)
          v79 = v80;
        else
          v77 = v82;
      }
      while (v79);
      if (v77 != (_DWORD *)v78 && *v77 <= v41)
      {
        if (v77 + 3 != (_DWORD *)v78)
        {
          memmove(v77, v77 + 3, v78 - (_QWORD)(v77 + 3));
          v76 = *(_QWORD *)(v75 + 8);
        }
        *(_QWORD *)(v75 + 8) = v76 - 1;
      }
    }
    v84 = v1375;
    --v1373;
    v85 = v1375 - 1;
    if (v1375 == 1)
      goto LABEL_70;
    v86 = v1374;
    v87 = v1374 + 12;
    v88 = 12 * v1375 - 24;
    if (v88 >= 0x54)
    {
      v90 = v88 / 0xC + 1;
      v91 = 12 * (v90 & 0x3FFFFFFFFFFFFFF8);
      v89 = &v1374[v91];
      v87 += v91;
      v92 = v90 & 0x3FFFFFFFFFFFFFF8;
      v93 = (float *)v1374;
      do
      {
        v94 = v93 + 3;
        v95 = v93 + 15;
        *(float32x4x3_t *)(&v17 - 1) = vld3q_f32(v94);
        *(float32x4x3_t *)v18.f64 = vld3q_f32(v95);
        v96 = v93 + 24;
        vst3q_f32(v93, *(float32x4x3_t *)(&v17 - 1));
        v97 = v93 + 12;
        vst3q_f32(v97, *(float32x4x3_t *)v18.f64);
        v93 = v96;
        v92 -= 8;
      }
      while (v92);
      if (v90 == (v90 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_70;
    }
    else
    {
      v89 = v1374;
    }
    v98 = &v86[12 * v84];
    do
    {
      *(_DWORD *)v89 = *(_DWORD *)v87;
      *((_DWORD *)v89 + 1) = *((_DWORD *)v87 + 1);
      *((_DWORD *)v89 + 2) = *((_DWORD *)v87 + 2);
      v87 += 12;
      v89 += 12;
    }
    while (v87 != v98);
LABEL_70:
    v1375 = v85;
    v40 = v1372;
    v99 = (unsigned int **)(v1372 + 24 * v41);
    v100 = v99[1];
    if (v100)
    {
      v101 = *v99;
      v1339 = (uint64_t)&(*v99)[3 * (_QWORD)v100];
      do
      {
        v103 = *v101;
        v104 = v40 + 24 * *v101;
        v105 = *(_QWORD *)(v104 + 8);
        if (!v105)
          goto LABEL_83;
        v106 = *(_DWORD **)v104;
        v107 = &v106[3 * v105];
        do
        {
          v108 = v105 >> 1;
          v109 = &v106[3 * (v105 >> 1)];
          v111 = *v109;
          v110 = v109 + 3;
          v105 += ~(v105 >> 1);
          if (v111 >= HIDWORD(v41))
            v105 = v108;
          else
            v106 = v110;
        }
        while (v105);
        if (v106 == v107 || *v106 > HIDWORD(v41))
        {
LABEL_83:
          if (v41 >= v103)
            v112 = v103;
          else
            v112 = v41;
          if (v41 <= v103)
            v113 = v103;
          else
            v113 = v41;
          v114 = v1375;
          if (v1375)
          {
            v115 = *((float *)v101 + 2);
            v116 = &v1374[12 * v1375];
            v117 = v1374;
            v118 = v1375;
            do
            {
              v119 = v118 >> 1;
              v120 = (float *)&v117[12 * (v118 >> 1)];
              v122 = *v120;
              v121 = (char *)(v120 + 3);
              v118 += ~(v118 >> 1);
              if (v122 >= (float)(v115 + -0.00000011921))
                v118 = v119;
              else
                v117 = v121;
            }
            while (v118);
            if (v117 != v116)
            {
              v123 = 0;
              v124 = v115 + 0.00000011921;
              v125 = &v1374[12 * v1375] - v117 - 24;
              v126 = v117;
              while (1)
              {
                if (*(float *)v126 > v124)
                  goto LABEL_112;
                if (*((_DWORD *)v126 + 1) == (_DWORD)v112 && *((_DWORD *)v126 + 2) == (_DWORD)v113)
                  break;
                v126 += 12;
                ++v123;
                v125 -= 12;
                if (v126 == v116)
                  goto LABEL_112;
              }
              v128 = v126 + 12;
              if (v126 + 12 != v116)
              {
                v129 = &v1374[12 * v1375] - v117 - 12 * v123 - 24;
                if (v129 < 0x54)
                {
                  v130 = v126;
                  goto LABEL_110;
                }
                v131 = v129 / 0xC + 1;
                v132 = 12 * (v131 & 0x3FFFFFFFFFFFFFF8);
                v130 = &v126[v132];
                v128 = (_DWORD *)((char *)v128 + v132);
                v133 = (v125 / 0xC + 1) & 0x3FFFFFFFFFFFFFF8;
                do
                {
                  v134 = (const float *)(v126 + 12);
                  v135 = (const float *)(v126 + 60);
                  *(float32x4x3_t *)(&v17 - 1) = vld3q_f32(v134);
                  *(float32x4x3_t *)v18.f64 = vld3q_f32(v135);
                  v136 = v126 + 96;
                  vst3q_f32((float *)v126, *(float32x4x3_t *)(&v17 - 1));
                  v137 = (float *)(v126 + 48);
                  vst3q_f32(v137, *(float32x4x3_t *)v18.f64);
                  v126 = v136;
                  v133 -= 8;
                }
                while (v133);
                if (v131 != (v131 & 0x3FFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_110:
                    *(_DWORD *)v130 = *v128;
                    *((_DWORD *)v130 + 1) = v128[1];
                    *((_DWORD *)v130 + 2) = v128[2];
                    v128 += 3;
                    v130 += 12;
                  }
                  while (v128 != (_DWORD *)v116);
                }
              }
              v1375 = v114 - 1;
            }
          }
LABEL_112:
          v138 = (float64x2_t *)(v1370 + 224 * v43);
          v1347 = v103;
          v139 = (float64x2_t *)(v1370 + 224 * v103);
          v140 = *((float *)v101 + 1);
          v17.i64[0] = *(_QWORD *)&v138[11].f64[0];
          v18.f64[0] = v139[11].f64[0];
          *(float64x2_t *)&v1407.__r_.__value_.__l.__data_ = vaddq_f64(v138[10], v139[10]);
          v1407.__r_.__value_.__r.__words[2] = *(_OWORD *)&vaddq_f64((float64x2_t)v17, v18);
          v62.f64[0] = v138[9].f64[0];
          v63.f64[0] = v139[9].f64[0];
          v141 = vaddq_f64(v138[5], v139[5]);
          v142 = vaddq_f64(v138[8], v139[8]);
          v143 = vaddq_f64(v138[6], v139[6]);
          *(float64x2_t *)&__p[4] = vaddq_f64(v138[7], v139[7]);
          *(float64x2_t *)&__p[6] = v142;
          *(float64x2_t *)&__p[2] = v143;
          *(float64x2_t *)__p = v141;
          __p[8] = (void *)*(_OWORD *)&vaddq_f64(v62, v63);
          v144 = v139->f64[0];
          v145 = v138->f64[0];
          (*(void (**)(_BYTE *__return_ptr, uint64_t, void **, std::string *, float64_t))(**(_QWORD **)&v138->f64[1]
                                                                                                  + 16))(__src, *(_QWORD *)&v138->f64[1], __p, &v1407, v138[9].f64[1] + v139[9].f64[1]);
          if (*(double *)&__src[32] / (double)(unint64_t)(*(_QWORD *)&v144 + *(_QWORD *)&v145) >= v138[1].f64[0])
            v146 = INFINITY;
          else
            v146 = (*(double *)&__src[32] - (v138[3].f64[1] + v139[3].f64[1]) + 0.00000000999999994) / v140;
          *(float *)__p = v146;
          *(void **)((char *)__p + 4) = (void *)((v113 << 32) | v112);
          v147 = v1374;
          v148 = v1375;
          v149 = (float *)&v1374[12 * v1375];
          v150 = (char *)v149;
          if (v1375)
          {
            v150 = v1374;
            v151 = v1375;
            do
            {
              v152 = v151 >> 1;
              v153 = (float *)&v150[12 * (v151 >> 1)];
              v155 = *v153;
              v154 = (char *)(v153 + 3);
              v151 += ~(v151 >> 1);
              if (v146 < v155)
                v151 = v152;
              else
                v150 = v154;
            }
            while (v151);
          }
          if (v1376 == v1375)
          {
            sub_223EEFDE0(&v1374, v150, 1, (uint64_t)__p, __src);
          }
          else if (v149 == (float *)v150)
          {
            *v149 = v146;
            *(void **)&v147[12 * v148 + 4] = *(void **)((char *)__p + 4);
            ++v1375;
          }
          else
          {
            v156 = v149 - 3;
            *v149 = *(v149 - 3);
            *(_QWORD *)&v147[12 * v148 + 4] = *((_QWORD *)v149 - 1);
            ++v1375;
            if (v149 - 3 != (float *)v150)
            {
              v157 = v149 - 3;
              do
              {
                v158 = *((_DWORD *)v157 - 3);
                v157 -= 3;
                *(_DWORD *)v156 = v158;
                v159 = *((_DWORD *)v156 - 1);
                v156[1] = *(v156 - 2);
                *((_DWORD *)v156 + 2) = v159;
                v156 = v157;
              }
              while (v157 != (float *)v150);
            }
            *(void **)v150 = __p[0];
            *((_DWORD *)v150 + 2) = __p[1];
          }
          *((float *)v101 + 2) = v146;
          v40 = v1372;
          v160 = (uint64_t *)(v1372 + 24 * v1347);
          v102 = *v160;
          v161 = v160[1];
          v162 = *v160 + 12 * v161;
          v43 = v41;
          if (!v161)
            goto LABEL_72;
          do
          {
            v163 = v161 >> 1;
            v164 = (unsigned int *)(v102 + 12 * (v161 >> 1));
            v166 = *v164;
            v165 = v164 + 3;
            v161 += ~(v161 >> 1);
            if (v166 >= v41)
              v161 = v163;
            else
              v102 = (uint64_t)v165;
          }
          while (v161);
          if (v102 == v162 || *(_DWORD *)v102 > v41)
LABEL_72:
            v102 = v162;
          *(float *)(v102 + 8) = v146;
        }
        v101 += 3;
      }
      while (v101 != (unsigned int *)v1339);
    }
    v167 = (uint64_t *)(v40 + 24 * HIDWORD(v41));
    v168 = v167[1];
    if (!v168)
      goto LABEL_26;
    v169 = *v167;
    v1329 = *v167 + 12 * v168;
    while (1)
    {
      v170 = *(_DWORD *)v169;
      v171 = (uint64_t *)(v1372 + 24 * v43);
      v173 = *v171;
      v172 = v171[1];
      v174 = *v171 + 12 * v172;
      if (!v172)
        goto LABEL_149;
      do
      {
        v175 = v172 >> 1;
        v176 = (unsigned int *)(v173 + 12 * (v172 >> 1));
        v178 = *v176;
        v177 = v176 + 3;
        v172 += ~(v172 >> 1);
        if (v178 >= v170)
          v172 = v175;
        else
          v173 = (uint64_t)v177;
      }
      while (v172);
      if (v173 == v174 || *(_DWORD *)v173 > v170)
LABEL_149:
        v173 = v174;
      v179 = (uint64_t *)(v1372 + 24 * v170);
      v181 = *v179;
      v180 = v179[1];
      v182 = *v179 + 12 * v180;
      if (!v180)
        goto LABEL_157;
      do
      {
        v183 = v180 >> 1;
        v184 = (unsigned int *)(v181 + 12 * (v180 >> 1));
        v186 = *v184;
        v185 = v184 + 3;
        v180 += ~(v180 >> 1);
        if (v186 >= v41)
          v180 = v183;
        else
          v181 = (uint64_t)v185;
      }
      while (v180);
      if (v181 == v182 || *(_DWORD *)v181 > v41)
LABEL_157:
        v181 = v182;
      if (v41 >= v170)
        v187 = v170;
      else
        v187 = v41;
      if (v41 <= v170)
        v188 = v170;
      else
        v188 = v41;
      v1348 = v188 << 32;
      v1340 = v169;
      if (v173 != v174 || v181 != v182)
      {
        v200 = v1375;
        if (v1375)
        {
          v201 = *(float *)(v173 + 8);
          v202 = &v1374[12 * v1375];
          v203 = v1374;
          v204 = v1375;
          do
          {
            v205 = v204 >> 1;
            v206 = (float *)&v203[12 * (v204 >> 1)];
            v208 = *v206;
            v207 = (char *)(v206 + 3);
            v204 += ~(v204 >> 1);
            if (v208 >= (float)(v201 + -0.00000011921))
              v204 = v205;
            else
              v203 = v207;
          }
          while (v204);
          if (v203 != v202)
          {
            v209 = 0;
            v210 = v201 + 0.00000011921;
            v211 = &v1374[12 * v1375] - v203 - 24;
            v212 = v203;
            while (1)
            {
              if (*(float *)v212 > v210)
                goto LABEL_235;
              if (*((_DWORD *)v212 + 1) == (_DWORD)v187 && *((_DWORD *)v212 + 2) == (_DWORD)v188)
                break;
              v212 += 12;
              ++v209;
              v211 -= 12;
              if (v212 == v202)
                goto LABEL_235;
            }
            v245 = v212 + 12;
            if (v212 + 12 != v202)
            {
              v246 = &v1374[12 * v1375] - v203 - 12 * v209 - 24;
              if (v246 < 0x54)
              {
                v247 = v212;
                goto LABEL_233;
              }
              v248 = v246 / 0xC + 1;
              v249 = 12 * (v248 & 0x3FFFFFFFFFFFFFF8);
              v247 = &v212[v249];
              v245 = (_DWORD *)((char *)v245 + v249);
              v250 = (v211 / 0xC + 1) & 0x3FFFFFFFFFFFFFF8;
              do
              {
                v251 = (const float *)(v212 + 12);
                v252 = (const float *)(v212 + 60);
                *(float32x4x3_t *)(&v17 - 1) = vld3q_f32(v251);
                *(float32x4x3_t *)v18.f64 = vld3q_f32(v252);
                v253 = v212 + 96;
                vst3q_f32((float *)v212, *(float32x4x3_t *)(&v17 - 1));
                v254 = (float *)(v212 + 48);
                vst3q_f32(v254, *(float32x4x3_t *)v18.f64);
                v212 = v253;
                v250 -= 8;
              }
              while (v250);
              if (v248 != (v248 & 0x3FFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_233:
                  *(_DWORD *)v247 = *v245;
                  *((_DWORD *)v247 + 1) = v245[1];
                  *((_DWORD *)v247 + 2) = v245[2];
                  v245 += 3;
                  v247 += 12;
                }
                while (v245 != (_DWORD *)v202);
              }
            }
            v1375 = v200 - 1;
          }
        }
LABEL_235:
        v255 = *(float *)(v173 + 4);
        v256 = *(float *)(v169 + 4);
        v257 = (float64x2_t *)(v1370 + 224 * v43);
        v258 = (float64x2_t *)(v1370 + 224 * v170);
        v17.i64[0] = *(_QWORD *)&v257[11].f64[0];
        v18.f64[0] = v258[11].f64[0];
        *(float64x2_t *)&v1407.__r_.__value_.__l.__data_ = vaddq_f64(v257[10], v258[10]);
        v1407.__r_.__value_.__r.__words[2] = *(_OWORD *)&vaddq_f64((float64x2_t)v17, v18);
        v62.f64[0] = v257[9].f64[0];
        v63.f64[0] = v258[9].f64[0];
        v259 = vaddq_f64(v257[5], v258[5]);
        v260 = vaddq_f64(v257[8], v258[8]);
        v261 = vaddq_f64(v257[6], v258[6]);
        *(float64x2_t *)&__p[4] = vaddq_f64(v257[7], v258[7]);
        *(float64x2_t *)&__p[6] = v260;
        *(float64x2_t *)&__p[2] = v261;
        *(float64x2_t *)__p = v259;
        __p[8] = (void *)*(_OWORD *)&vaddq_f64(v62, v63);
        v262 = v258->f64[0];
        v263 = v257->f64[0];
        (*(void (**)(_BYTE *__return_ptr, uint64_t, void **, std::string *, float64_t))(**(_QWORD **)&v257->f64[1]
                                                                                                + 16))(__src, *(_QWORD *)&v257->f64[1], __p, &v1407, v257[9].f64[1] + v258[9].f64[1]);
        v264 = v255 + v256;
        if (*(double *)&__src[32] / (double)(unint64_t)(*(_QWORD *)&v262 + *(_QWORD *)&v263) >= v257[1].f64[0])
          v265 = INFINITY;
        else
          v265 = (*(double *)&__src[32] - (v257[3].f64[1] + v258[3].f64[1]) + 0.00000000999999994) / v264;
        *(float *)__p = v265;
        *(void **)((char *)__p + 4) = (void *)(v1348 | v187);
        v266 = v1374;
        v267 = v1375;
        v268 = (float *)&v1374[12 * v1375];
        v269 = (char *)v268;
        if (v1375)
        {
          v269 = v1374;
          v270 = v1375;
          do
          {
            v271 = v270 >> 1;
            v272 = (float *)&v269[12 * (v270 >> 1)];
            v274 = *v272;
            v273 = (char *)(v272 + 3);
            v270 += ~(v270 >> 1);
            if (v265 < v274)
              v270 = v271;
            else
              v269 = v273;
          }
          while (v270);
        }
        if (v1376 == v1375)
        {
          sub_223EEFDE0(&v1374, v269, 1, (uint64_t)__p, __src);
        }
        else if (v268 == (float *)v269)
        {
          *v268 = v265;
          *(void **)&v266[12 * v267 + 4] = *(void **)((char *)__p + 4);
          ++v1375;
        }
        else
        {
          v275 = v268 - 3;
          *v268 = *(v268 - 3);
          *(_QWORD *)&v266[12 * v267 + 4] = *((_QWORD *)v268 - 1);
          ++v1375;
          if (v268 - 3 != (float *)v269)
          {
            v276 = v268 - 3;
            do
            {
              v277 = *((_DWORD *)v276 - 3);
              v276 -= 3;
              *(_DWORD *)v275 = v277;
              v278 = *((_DWORD *)v275 - 1);
              v275[1] = *(v275 - 2);
              *((_DWORD *)v275 + 2) = v278;
              v275 = v276;
            }
            while (v276 != (float *)v269);
          }
          *(void **)v269 = __p[0];
          *((_DWORD *)v269 + 2) = __p[1];
        }
        *(float *)(v181 + 4) = v264;
        *(float *)(v181 + 8) = v265;
        *(_QWORD *)(v173 + 4) = *(_QWORD *)(v181 + 4);
        goto LABEL_141;
      }
      v189 = *(float *)(v169 + 4);
      ++v1373;
      v190 = v1372 + 24 * v187;
      LODWORD(__p[1]) = 0;
      __p[0] = (void *)v188;
      v191 = *(char **)v190;
      v192 = *(_QWORD *)(v190 + 8);
      if (!v192)
        break;
      v193 = *(char **)v190;
      v194 = *(_QWORD *)(v190 + 8);
      do
      {
        v195 = v194 >> 1;
        v196 = (unsigned int *)&v193[12 * (v194 >> 1)];
        v198 = *v196;
        v197 = (char *)(v196 + 3);
        v194 += ~(v194 >> 1);
        if (v198 >= v188)
          v194 = v195;
        else
          v193 = v197;
      }
      while (v194);
      v199 = &v191[12 * v192];
      if (v193 == v199)
        goto LABEL_194;
      if (v188 >= *(_DWORD *)v193)
        goto LABEL_196;
      if (*(_QWORD *)(v190 + 16) == v192)
        goto LABEL_252;
      *(_DWORD *)v199 = *((_DWORD *)v199 - 3);
      *(_QWORD *)&v191[12 * v192 + 4] = *((_QWORD *)v199 - 1);
      ++*(_QWORD *)(v190 + 8);
      if (v199 - 12 != v193)
        memmove(v193 + 12, v193, v199 - 12 - v193);
      *(_DWORD *)v193 = __p[0];
      *(void **)(v193 + 4) = *(void **)((char *)__p + 4);
LABEL_196:
      v214 = v1372 + 24 * v188;
      LODWORD(__p[1]) = 0;
      __p[0] = (void *)v187;
      v215 = *(char **)v214;
      v216 = *(_QWORD *)(v214 + 8);
      if (!v216)
      {
        v217 = *(char **)v214;
        v223 = *(char **)v214;
LABEL_209:
        if (*(_QWORD *)(v214 + 16) == v216)
          goto LABEL_253;
        *(_DWORD *)v223 = v187;
        *(void **)&v215[12 * v216 + 4] = *(void **)((char *)__p + 4);
        ++*(_QWORD *)(v214 + 8);
        v217 = v223;
        goto LABEL_211;
      }
      v217 = *(char **)v214;
      v218 = *(_QWORD *)(v214 + 8);
      do
      {
        v219 = v218 >> 1;
        v220 = (unsigned int *)&v217[12 * (v218 >> 1)];
        v222 = *v220;
        v221 = (char *)(v220 + 3);
        v218 += ~(v218 >> 1);
        if (v222 >= v187)
          v218 = v219;
        else
          v217 = v221;
      }
      while (v218);
      v223 = &v215[12 * v216];
      if (v217 == v223)
        goto LABEL_209;
      if (v187 < *(_DWORD *)v217)
      {
        if (*(_QWORD *)(v214 + 16) != v216)
        {
          *(_DWORD *)v223 = *((_DWORD *)v223 - 3);
          *(_QWORD *)&v215[12 * v216 + 4] = *((_QWORD *)v223 - 1);
          ++*(_QWORD *)(v214 + 8);
          if (v223 - 12 != v217)
            memmove(v217 + 12, v217, v223 - 12 - v217);
          *(_DWORD *)v217 = __p[0];
          *(void **)(v217 + 4) = *(void **)((char *)__p + 4);
          goto LABEL_211;
        }
LABEL_253:
        sub_223EF00F4((char **)v214, v217, 1, (uint64_t)__p, __src);
        v217 = *(char **)__src;
      }
LABEL_211:
      v224 = (float64x2_t *)(v1370 + 224 * v187);
      v225 = (float64x2_t *)(v1370 + 224 * v188);
      v17.i64[0] = *(_QWORD *)&v224[11].f64[0];
      v18.f64[0] = v225[11].f64[0];
      *(float64x2_t *)&v1407.__r_.__value_.__l.__data_ = vaddq_f64(v224[10], v225[10]);
      v1407.__r_.__value_.__r.__words[2] = *(_OWORD *)&vaddq_f64((float64x2_t)v17, v18);
      v62.f64[0] = v224[9].f64[0];
      v63.f64[0] = v225[9].f64[0];
      v226 = vaddq_f64(v224[5], v225[5]);
      v227 = vaddq_f64(v224[8], v225[8]);
      v228 = vaddq_f64(v224[6], v225[6]);
      *(float64x2_t *)&__p[4] = vaddq_f64(v224[7], v225[7]);
      *(float64x2_t *)&__p[6] = v227;
      *(float64x2_t *)&__p[2] = v228;
      *(float64x2_t *)__p = v226;
      __p[8] = (void *)*(_OWORD *)&vaddq_f64(v62, v63);
      v229 = v225->f64[0];
      v230 = v224->f64[0];
      (*(void (**)(_BYTE *__return_ptr, uint64_t, void **, std::string *, float64_t))(**(_QWORD **)&v224->f64[1]
                                                                                              + 16))(__src, *(_QWORD *)&v224->f64[1], __p, &v1407, v224[9].f64[1] + v225[9].f64[1]);
      if (*(double *)&__src[32] / (double)(unint64_t)(*(_QWORD *)&v229 + *(_QWORD *)&v230) >= v224[1].f64[0])
        v231 = INFINITY;
      else
        v231 = (*(double *)&__src[32] - (v224[3].f64[1] + v225[3].f64[1]) + 0.00000000999999994) / v189;
      *((float *)v217 + 1) = v189;
      *((float *)v217 + 2) = v231;
      *(_QWORD *)(v193 + 4) = *(_QWORD *)(v217 + 4);
      *(float *)__p = v231;
      *(void **)((char *)__p + 4) = (void *)(v1348 | v187);
      v232 = v1374;
      v233 = v1375;
      v234 = (float *)&v1374[12 * v1375];
      v235 = (char *)v234;
      if (v1375)
      {
        v235 = v1374;
        v236 = v1375;
        do
        {
          v237 = v236 >> 1;
          v238 = (float *)&v235[12 * (v236 >> 1)];
          v240 = *v238;
          v239 = (char *)(v238 + 3);
          v236 += ~(v236 >> 1);
          if (v231 < v240)
            v236 = v237;
          else
            v235 = v239;
        }
        while (v236);
      }
      if (v1376 == v1375)
      {
        sub_223EEFDE0(&v1374, v235, 1, (uint64_t)__p, __src);
      }
      else if (v234 == (float *)v235)
      {
        *v234 = v231;
        *(void **)&v232[12 * v233 + 4] = *(void **)((char *)__p + 4);
        ++v1375;
      }
      else
      {
        v241 = v234 - 3;
        *v234 = *(v234 - 3);
        *(_QWORD *)&v232[12 * v233 + 4] = *((_QWORD *)v234 - 1);
        ++v1375;
        if (v234 - 3 != (float *)v235)
        {
          v242 = v234 - 3;
          do
          {
            v243 = *((_DWORD *)v242 - 3);
            v242 -= 3;
            *(_DWORD *)v241 = v243;
            v244 = *((_DWORD *)v241 - 1);
            v241[1] = *(v241 - 2);
            *((_DWORD *)v241 + 2) = v244;
            v241 = v242;
          }
          while (v242 != (float *)v235);
        }
        *(void **)v235 = __p[0];
        *((_DWORD *)v235 + 2) = __p[1];
      }
LABEL_141:
      v43 = v41;
      v169 = v1340 + 12;
      if (v1340 + 12 == v1329)
      {
        v40 = v1372;
        v279 = (unsigned int **)(v1372 + 24 * HIDWORD(v41));
        v280 = v279[1];
        if (!v280)
          goto LABEL_26;
        v281 = *v279;
        v282 = (uint64_t)&(*v279)[3 * (_QWORD)v280];
        v283 = v1374;
        v284 = v1375;
        v285 = v1374 - 24;
        v286 = (float *)v281;
        while (2)
        {
          if (HIDWORD(v41) >= *(_DWORD *)v286)
            v287 = *v286;
          else
            v287 = *((float *)&v41 + 1);
          if (HIDWORD(v41) <= *(_DWORD *)v286)
            v288 = *(_DWORD *)v286;
          else
            v288 = HIDWORD(v41);
          if (v284)
          {
            v289 = v286[2];
            v290 = &v283[12 * v284];
            v291 = v283;
            v292 = v284;
            do
            {
              v293 = v292 >> 1;
              v294 = (float *)&v291[12 * (v292 >> 1)];
              v296 = *v294;
              v295 = v294 + 3;
              v292 += ~(v292 >> 1);
              if (v296 >= (float)(v289 + -0.00000011921))
                v292 = v293;
              else
                v291 = (char *)v295;
            }
            while (v292);
            if (v291 != v290)
            {
              v297 = 0;
              v298 = v289 + 0.00000011921;
              v299 = &v285[12 * v284] - v291;
              v300 = v291;
              while (1)
              {
                if (*(float *)v300 > v298)
                  goto LABEL_257;
                if (*((_DWORD *)v300 + 1) == LODWORD(v287) && *((_DWORD *)v300 + 2) == v288)
                  break;
                v300 += 12;
                ++v297;
                v299 -= 12;
                if (v300 == v290)
                  goto LABEL_257;
              }
              v302 = v300 + 12;
              if (v300 + 12 != v290)
              {
                v303 = &v285[12 * v284] - v291 - 12 * v297;
                if (v303 < 0x54)
                {
                  v304 = v300;
                  goto LABEL_285;
                }
                v305 = v303 / 0xC + 1;
                v306 = 12 * (v305 & 0x3FFFFFFFFFFFFFF8);
                v304 = &v300[v306];
                v302 = (_DWORD *)((char *)v302 + v306);
                v307 = (v299 / 0xC + 1) & 0x3FFFFFFFFFFFFFF8;
                do
                {
                  v308 = (const float *)(v300 + 12);
                  v309 = (const float *)(v300 + 60);
                  *(float32x4x3_t *)(&v17 - 1) = vld3q_f32(v308);
                  *(float32x4x3_t *)v18.f64 = vld3q_f32(v309);
                  v310 = v300 + 96;
                  vst3q_f32((float *)v300, *(float32x4x3_t *)(&v17 - 1));
                  v311 = (float *)(v300 + 48);
                  vst3q_f32(v311, *(float32x4x3_t *)v18.f64);
                  v300 = v310;
                  v307 -= 8;
                }
                while (v307);
                if (v305 != (v305 & 0x3FFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_285:
                    *(_DWORD *)v304 = *v302;
                    *((_DWORD *)v304 + 1) = v302[1];
                    *((_DWORD *)v304 + 2) = v302[2];
                    v302 += 3;
                    v304 += 12;
                  }
                  while (v302 != (_DWORD *)v290);
                }
              }
              v1375 = --v284;
            }
          }
LABEL_257:
          v286 += 3;
          if (v286 != (float *)v282)
            continue;
          break;
        }
        v1373 -= (uint64_t)v280;
        do
        {
          v312 = v1372 + 24 * *v281;
          v313 = *(_QWORD *)(v312 + 8);
          if (v313)
          {
            v314 = *(_DWORD **)v312;
            v315 = *(_QWORD *)v312 + 12 * v313;
            v316 = *(_QWORD *)(v312 + 8);
            do
            {
              v317 = v316 >> 1;
              v318 = &v314[3 * (v316 >> 1)];
              v320 = *v318;
              v319 = v318 + 3;
              v316 += ~(v316 >> 1);
              if (v320 >= HIDWORD(v41))
                v316 = v317;
              else
                v314 = v319;
            }
            while (v316);
            if (v314 != (_DWORD *)v315 && *v314 <= HIDWORD(v41))
            {
              if (v314 + 3 != (_DWORD *)v315)
              {
                memmove(v314, v314 + 3, v315 - (_QWORD)(v314 + 3));
                v313 = *(_QWORD *)(v312 + 8);
              }
              *(_QWORD *)(v312 + 8) = v313 - 1;
            }
          }
          v281 += 3;
        }
        while (v281 != (unsigned int *)v282);
        v40 = v1372;
LABEL_26:
        v32 = v1325 - 1;
        *(_QWORD *)(v40 + 24 * v42 + 8) = 0;
        if (!v1373)
          goto LABEL_300;
        goto LABEL_27;
      }
    }
    v193 = *(char **)v190;
    v199 = *(char **)v190;
LABEL_194:
    if (*(_QWORD *)(v190 + 16) != v192)
    {
      *(_DWORD *)v199 = v188;
      *(void **)&v191[12 * v192 + 4] = *(void **)((char *)__p + 4);
      ++*(_QWORD *)(v190 + 8);
      v193 = v199;
      goto LABEL_196;
    }
LABEL_252:
    sub_223EF00F4((char **)v190, v193, 1, (uint64_t)__p, __src);
    v193 = *(char **)__src;
    goto LABEL_196;
  }
LABEL_300:
  v1360 = 0;
  __dst = 0;
  v321 = v32 >> 61;
  v322 = 8 * v32;
  v1361 = 0;
  if (v32)
  {
    if (v321)
      sub_22316E078();
    __dst = operator new(8 * v32);
    v1360 = (unint64_t **)__dst;
    v1330 = (unint64_t **)__dst;
    v1349 = (char *)__dst + 8 * v32;
    v1361 = v1349;
    memset(__src, 0, 24);
    if (v32 >> 59)
      sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
    *(_QWORD *)__src = operator new(16 * v32);
    *(_QWORD *)&__src[16] = v32;
    v324 = v1397[0].i64[1];
    v323 = (void **)v1397[0].i64[0];
    if (v1397[0].i64[0] == v1397[0].i64[1])
      goto LABEL_324;
    goto LABEL_306;
  }
  v1349 = 0;
  v1330 = 0;
  memset(__src, 0, 24);
  v324 = v1397[0].i64[1];
  v323 = (void **)v1397[0].i64[0];
  if (v1397[0].i64[0] != v1397[0].i64[1])
  {
LABEL_306:
    v325 = 0;
    do
    {
      if (v325 == *v323)
      {
        v326 = *(_QWORD *)&__src[8];
        v327 = *(_QWORD *)__src;
        __p[0] = v325;
        __p[1] = *(void **)&__src[8];
        v328 = *(void ***)__src;
        if (*(_QWORD *)&__src[8])
        {
          v329 = *(_QWORD *)&__src[8];
          do
          {
            v330 = v329 >> 1;
            v331 = &v328[2 * (v329 >> 1)];
            v333 = (unint64_t)*v331;
            v332 = v331 + 2;
            v329 += ~(v329 >> 1);
            if (v333 >= (unint64_t)v325)
              v329 = v330;
            else
              v328 = v332;
          }
          while (v329);
        }
        v334 = (void **)(*(_QWORD *)__src + 16 * *(_QWORD *)&__src[8]);
        if (v328 == v334)
        {
          if (*(_QWORD *)&__src[16] != *(_QWORD *)&__src[8])
          {
            *v334 = v325;
            *(void **)(v327 + 16 * v326 + 8) = __p[1];
            *(_QWORD *)&__src[8] = v326 + 1;
            goto LABEL_308;
          }
        }
        else
        {
          if (v325 >= *v328)
            goto LABEL_308;
          if (*(_QWORD *)&__src[16] != *(_QWORD *)&__src[8])
          {
            *(_OWORD *)v334 = *((_OWORD *)v334 - 1);
            *(_QWORD *)&__src[8] = v326 + 1;
            if (v334 - 2 != v328)
              memmove(v328 + 2, v328, (char *)(v334 - 2) - (char *)v328);
            *v328 = __p[0];
            v328[1] = __p[1];
            goto LABEL_308;
          }
        }
        sub_223EF0288(&v1407, (uint64_t)__src, v328, __p);
      }
LABEL_308:
      ++v323;
      ++v325;
    }
    while (v323 != (void **)v324);
  }
LABEL_324:
  memset(__p, 0, 24);
  if (v1371 == v1370)
    goto LABEL_371;
  v335 = 0x6DB6DB6DB6DB6DB7 * ((v1371 - v1370) >> 5);
  if (v335 >> 61)
    sub_22367C394();
  v336 = (char *)operator new(0x6DB6DB6DB6DB6DB8 * ((v1371 - v1370) >> 5));
  v1315 = v32 >> 61;
  v1321 = 8 * v32;
  __p[0] = v336;
  v337 = &v336[8 * v335];
  __p[2] = v337;
  v338 = operator new(v335);
  bzero(v338, v335);
  v339 = 0;
  v340 = v336;
  v341 = v336;
  v1326 = v32;
  v1334 = v335;
  while (2)
  {
    if (*((_BYTE *)v338 + v339))
      goto LABEL_328;
    v342 = v1397[0].i64[0];
    v1341 = v339;
    if (*(_QWORD *)(v1397[0].i64[0] + 8 * v339) == v339)
    {
      v340 = v341;
      v343 = v337;
      goto LABEL_365;
    }
    v336 = v340;
    v343 = v337;
    while (!*((_BYTE *)v338 + v339))
    {
      if (v341 < v343)
      {
        *(_QWORD *)v341 = v339;
        v341 += 8;
        v340 = v341;
        *((_BYTE *)v338 + v339) = -1;
        v339 = *(_QWORD *)(v342 + 8 * v339);
        if (*(_QWORD *)(v342 + 8 * v339) == v339)
          goto LABEL_365;
      }
      else
      {
        v344 = (v341 - v336) >> 3;
        v345 = v344 + 1;
        if ((unint64_t)(v344 + 1) >> 61)
        {
          __p[2] = v343;
          __p[0] = v336;
          __p[1] = v340;
          sub_22367C394();
        }
        v346 = v343;
        if ((v343 - v336) >> 2 > v345)
          v345 = (v343 - v336) >> 2;
        if ((unint64_t)(v343 - v336) >= 0x7FFFFFFFFFFFFFF8)
          v347 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v347 = v345;
        if (v347)
        {
          if (v347 >> 61)
          {
            __p[2] = v346;
            __p[0] = v336;
            __p[1] = v340;
            sub_223174E94();
          }
          v348 = operator new(8 * v347);
          v349 = &v348[8 * v344];
          *(_QWORD *)v349 = v339;
          v340 = v349 + 8;
          v350 = v341 - v336;
          if (v341 == v336)
            goto LABEL_350;
        }
        else
        {
          v348 = 0;
          v349 = (char *)(8 * v344);
          *(_QWORD *)(8 * v344) = v339;
          v340 = (char *)(8 * v344 + 8);
          v350 = v341 - v336;
          if (v341 == v336)
            goto LABEL_350;
        }
        v351 = v350 - 8;
        if (v351 >= 0x168)
        {
          v354 = (v341 - 8 - v336) & 0xFFFFFFFFFFFFFFF8;
          if (&v348[v341 - v336 - 8 - v354] > &v348[v341 - v336 - 8])
          {
            v352 = v341;
          }
          else if (&v341[-v354 - 8] > v341 - 8)
          {
            v352 = v341;
          }
          else if ((unint64_t)(v336 - v348) >= 0x20)
          {
            v355 = (v351 >> 3) + 1;
            v356 = 8 * (v355 & 0x3FFFFFFFFFFFFFFCLL);
            v352 = &v341[-v356];
            v349 -= v356;
            v357 = &v348[8 * v344 - 16];
            v358 = (__int128 *)(v341 - 16);
            v359 = v355 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v360 = *v358;
              *(v357 - 1) = *(v358 - 1);
              *v357 = v360;
              v357 -= 2;
              v358 -= 2;
              v359 -= 4;
            }
            while (v359);
            if (v355 == (v355 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_350;
          }
          else
          {
            v352 = v341;
          }
        }
        else
        {
          v352 = v341;
        }
        do
        {
          v353 = *((_QWORD *)v352 - 1);
          v352 -= 8;
          *((_QWORD *)v349 - 1) = v353;
          v349 -= 8;
        }
        while (v352 != v336);
LABEL_350:
        v343 = &v348[8 * v347];
        if (v336)
        {
          operator delete(v336);
          v342 = v1397[0].i64[0];
        }
        v336 = v349;
        *((_BYTE *)v338 + v339) = -1;
        v339 = *(_QWORD *)(v342 + 8 * v339);
        v341 = v340;
        if (*(_QWORD *)(v342 + 8 * v339) == v339)
          goto LABEL_365;
      }
    }
    v340 = v341;
LABEL_365:
    v337 = v343;
    if (v336 != v340)
    {
      v361 = (uint64_t *)v336;
      do
      {
        v362 = *v361++;
        *(_QWORD *)(v342 + 8 * v362) = *(_QWORD *)(v342 + 8 * v339);
      }
      while (v361 != (uint64_t *)v340);
    }
    v340 = v336;
    v341 = v336;
    v32 = v1326;
    v335 = v1334;
    v339 = v1341;
LABEL_328:
    if (++v339 != v335)
      continue;
    break;
  }
  __p[0] = v336;
  operator delete(v338);
  v322 = v1321;
  v321 = v1315;
  if (v336)
    operator delete(v336);
LABEL_371:
  memset(__p, 0, 24);
  if (v32)
  {
    if (v321)
      sub_22367C394();
    v363 = operator new(v322);
    v364 = &v363[v32];
    __p[0] = v363;
    __p[2] = v364;
    bzero(v363, v322);
    __p[1] = v364;
  }
  else
  {
    v364 = 0;
    v363 = 0;
  }
  v366 = v1397[0].i64[1];
  for (i = (unint64_t *)v1397[0].i64[0]; i != (unint64_t *)v366; ++i)
  {
    v367 = *(char **)__src;
    v368 = *(_QWORD *)&__src[8];
    v369 = (char *)(*(_QWORD *)__src + 16 * *(_QWORD *)&__src[8]);
    v370 = *i;
    if (!*(_QWORD *)&__src[8])
      goto LABEL_385;
    do
    {
      v371 = v368 >> 1;
      v372 = &v367[16 * (v368 >> 1)];
      v374 = *(_QWORD *)v372;
      v373 = v372 + 16;
      v368 += ~(v368 >> 1);
      if (v374 >= v370)
        v368 = v371;
      else
        v367 = v373;
    }
    while (v368);
    if (v367 == v369 || (v369 = v367, v370 < *(_QWORD *)v367))
    {
LABEL_385:
      *(_OWORD *)&v1407.__r_.__value_.__l.__data_ = v370;
      sub_223EF03D0((char **)v1406, (char **)__src, v369, (unint64_t *)&v1407);
      v367 = *(char **)v1406;
    }
    ++v363[*((_QWORD *)v367 + 1)];
  }
  sub_2236C4184(&v1407, v32);
  if (v363 != v364)
  {
    v375 = 0;
    while (1)
    {
      v376 = v1407.__r_.__value_.__r.__words[0] + 24 * v375;
      v377 = *v363;
      v378 = *(_BYTE **)v376;
      if (*v363 > (unint64_t)((uint64_t)(*(_QWORD *)(v376 + 16) - *(_QWORD *)v376) >> 3))
        break;
LABEL_388:
      ++v363;
      ++v375;
      if (v363 == v364)
        goto LABEL_401;
    }
    if (v377 >> 61)
      sub_22367C394();
    v379 = v1407.__r_.__value_.__r.__words[0] + 24 * v375;
    v382 = *(_BYTE **)(v379 + 8);
    v380 = (char **)(v379 + 8);
    v381 = v382;
    v383 = (char *)operator new(8 * v377);
    v384 = v382 - v378;
    v385 = &v383[(v382 - v378) & 0xFFFFFFFFFFFFFFF8];
    v386 = v385;
    if (v382 != v378)
    {
      if ((unint64_t)(v384 - 8) < 0x58)
      {
        v386 = &v383[(v381 - v378) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_398:
          v395 = *((_QWORD *)v381 - 1);
          v381 -= 8;
          *((_QWORD *)v386 - 1) = v395;
          v386 -= 8;
        }
        while (v381 != v378);
        goto LABEL_399;
      }
      v386 = &v383[(v381 - v378) & 0xFFFFFFFFFFFFFFF8];
      if (v381 - v383 - (v384 & 0xFFFFFFFFFFFFFFF8) < 0x20)
        goto LABEL_398;
      v387 = v384 >> 3;
      v388 = ((unint64_t)(v384 - 8) >> 3) + 1;
      v389 = 8 * (v388 & 0x3FFFFFFFFFFFFFFCLL);
      v390 = &v381[-v389];
      v386 = &v385[-v389];
      v391 = &v383[8 * v387 - 16];
      v392 = (__int128 *)(v381 - 16);
      v393 = v388 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v394 = *v392;
        *((_OWORD *)v391 - 1) = *(v392 - 1);
        *(_OWORD *)v391 = v394;
        v391 -= 32;
        v392 -= 2;
        v393 -= 4;
      }
      while (v393);
      v381 = v390;
      if (v388 != (v388 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_398;
    }
LABEL_399:
    *(_QWORD *)v376 = v386;
    *v380 = v385;
    *(_QWORD *)(v376 + 16) = &v383[8 * v377];
    if (v378)
      operator delete(v378);
    goto LABEL_388;
  }
LABEL_401:
  v1342 = v1397[0].i64[1];
  v396 = (unint64_t *)v1397[0].i64[0];
  if (v1397[0].i64[0] != v1397[0].i64[1])
  {
    v397 = 0;
    while (1)
    {
      v399 = *(uint64_t (***)())__src;
      v400 = *(_QWORD *)&__src[8];
      v401 = (char *)(*(_QWORD *)__src + 16 * *(_QWORD *)&__src[8]);
      v402 = *v396;
      if (!*(_QWORD *)&__src[8])
        goto LABEL_412;
      do
      {
        v403 = v400 >> 1;
        v404 = &v399[2 * (v400 >> 1)];
        v406 = *v404;
        v405 = v404 + 2;
        v400 += ~(v400 >> 1);
        if ((unint64_t)v406 >= v402)
          v400 = v403;
        else
          v399 = v405;
      }
      while (v400);
      if (v399 == (uint64_t (**)())v401 || (v401 = (char *)v399, v402 < (unint64_t)*v399))
      {
LABEL_412:
        *(_QWORD *)v1406 = *v396;
        *(_QWORD *)&v1406[8] = 0;
        sub_223EF03D0((char **)&v1403, (char **)__src, v401, (unint64_t *)v1406);
        v399 = v1403;
      }
      v407 = v1407.__r_.__value_.__r.__words[0] + 24 * (_QWORD)v399[1];
      v409 = (uint64_t *)(v407 + 8);
      v408 = *(char **)(v407 + 8);
      v410 = *(_QWORD *)(v407 + 16);
      if ((unint64_t)v408 >= v410)
        break;
      *(_QWORD *)v408 = v397;
      v398 = (uint64_t)(v408 + 8);
LABEL_404:
      *v409 = v398;
      ++v396;
      ++v397;
      if (v396 == (unint64_t *)v1342)
        goto LABEL_433;
    }
    v411 = *(char **)v407;
    v412 = (uint64_t)&v408[-*(_QWORD *)v407];
    v413 = v412 >> 3;
    v414 = (v412 >> 3) + 1;
    if (v414 >> 61)
      sub_22367C394();
    v415 = v410 - (_QWORD)v411;
    if (v415 >> 2 > v414)
      v414 = v415 >> 2;
    if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFF8)
      v416 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v416 = v414;
    if (v416)
    {
      if (v416 >> 61)
        sub_223174E94();
      v417 = v416;
      v418 = operator new(8 * v416);
      v416 = v417;
      v419 = &v418[8 * v413];
      *v419 = v397;
      v398 = (uint64_t)(v419 + 1);
      v420 = v408 - v411;
      if (v408 == v411)
        goto LABEL_431;
    }
    else
    {
      v418 = 0;
      v419 = (_QWORD *)(8 * v413);
      *(_QWORD *)(8 * v413) = v397;
      v398 = 8 * v413 + 8;
      v420 = v408 - v411;
      if (v408 == v411)
      {
LABEL_431:
        *(_QWORD *)v407 = v419;
        *v409 = v398;
        *(_QWORD *)(v407 + 16) = &v418[8 * v416];
        if (v411)
          operator delete(v411);
        goto LABEL_404;
      }
    }
    v421 = v420 - 8;
    if (v421 < 0x58)
      goto LABEL_1662;
    if ((unint64_t)(v408 - v418 - v412) < 0x20)
      goto LABEL_1662;
    v422 = (v421 >> 3) + 1;
    v423 = 8 * (v422 & 0x3FFFFFFFFFFFFFFCLL);
    v424 = &v408[-v423];
    v419 = (_QWORD *)((char *)v419 - v423);
    v425 = &v418[8 * v413 - 16];
    v426 = v408 - 16;
    v427 = v422 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v428 = *(_OWORD *)v426;
      *(v425 - 1) = *((_OWORD *)v426 - 1);
      *v425 = v428;
      v425 -= 2;
      v426 -= 32;
      v427 -= 4;
    }
    while (v427);
    v408 = v424;
    if (v422 != (v422 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1662:
      do
      {
        v429 = *((_QWORD *)v408 - 1);
        v408 -= 8;
        *--v419 = v429;
      }
      while (v408 != v411);
    }
    goto LABEL_431;
  }
LABEL_433:
  v430 = v1330;
  if (*(_QWORD *)&__src[8])
  {
    v431 = *(uint64_t **)__src;
    v432 = *(_QWORD *)__src + 16 * *(_QWORD *)&__src[8];
    v433 = __dst;
    v1335 = v432;
    while (1)
    {
      v435 = *v431;
      v434 = v431[1];
      v436 = v1370;
      v437 = (unint64_t *)(v1370 + 224 * *v431);
      if (v430 >= (unint64_t **)v1349)
        break;
      *v430++ = v437;
LABEL_455:
      v1360 = v430;
      v449 = v1407.__r_.__value_.__r.__words[0] + 24 * v434;
      v450 = *(_OWORD *)v449;
      v451 = *(_QWORD *)(v449 + 16);
      *(_QWORD *)(v449 + 8) = 0;
      *(_QWORD *)(v449 + 16) = 0;
      *(_QWORD *)v449 = 0;
      v452 = v436 + 224 * v435;
      v455 = *(void **)(v452 + 200);
      v454 = (_QWORD *)(v452 + 200);
      v453 = v455;
      if (v455)
      {
        *(_QWORD *)(v436 + 224 * v435 + 208) = v453;
        v1344 = v450;
        operator delete(v453);
        v450 = v1344;
        *v454 = 0;
        v454[1] = 0;
        v454[2] = 0;
      }
      *(_OWORD *)v454 = v450;
      *(_QWORD *)(v436 + 224 * v435 + 216) = v451;
      v431 += 2;
      if (v431 == (uint64_t *)v432)
        goto LABEL_467;
    }
    v438 = (char *)v430 - v433;
    v439 = ((char *)v430 - v433) >> 3;
    v440 = v439 + 1;
    if ((unint64_t)(v439 + 1) >> 61)
      sub_22316E078();
    if ((v1349 - v433) >> 2 > v440)
      v440 = (v1349 - v433) >> 2;
    if ((unint64_t)(v1349 - v433) >= 0x7FFFFFFFFFFFFFF8)
      v441 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v441 = v440;
    v1343 = v431[1];
    if (v441)
    {
      if (v441 >> 61)
        sub_223174E94();
      v442 = (char *)operator new(8 * v441);
      v443 = (char *)v430;
      v444 = &v442[8 * v439];
      *(_QWORD *)v444 = v437;
      v430 = (unint64_t **)(v444 + 8);
      v445 = v443 - v433;
      if (v443 == v433)
        goto LABEL_452;
    }
    else
    {
      v443 = (char *)v430;
      v442 = 0;
      v444 = (char *)(8 * v439);
      *(_QWORD *)(8 * v439) = v437;
      v430 = (unint64_t **)(8 * v439 + 8);
      v445 = v443 - v433;
      if (v443 == v433)
        goto LABEL_452;
    }
    v446 = v445 - 8;
    if (v446 >= 0x168)
    {
      v456 = (v443 - 8 - v433) & 0xFFFFFFFFFFFFFFF8;
      if (&v442[v438 - 8 - v456] > &v442[v438 - 8])
      {
        v447 = v443;
      }
      else if (&v443[-v456 - 8] > v443 - 8)
      {
        v447 = v443;
      }
      else if ((unint64_t)(v443 - v442 - v438) >= 0x20)
      {
        v457 = (v446 >> 3) + 1;
        v458 = 8 * (v457 & 0x3FFFFFFFFFFFFFFCLL);
        v447 = &v443[-v458];
        v444 -= v458;
        v459 = &v442[8 * v439 - 16];
        v460 = v443 - 16;
        v461 = v457 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v462 = *(_OWORD *)v460;
          *((_OWORD *)v459 - 1) = *((_OWORD *)v460 - 1);
          *(_OWORD *)v459 = v462;
          v459 -= 32;
          v460 -= 32;
          v461 -= 4;
        }
        while (v461);
        if (v457 == (v457 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_452;
      }
      else
      {
        v447 = v443;
      }
    }
    else
    {
      v447 = v443;
    }
    do
    {
      v448 = *((_QWORD *)v447 - 1);
      v447 -= 8;
      *((_QWORD *)v444 - 1) = v448;
      v444 -= 8;
    }
    while (v447 != v433);
LABEL_452:
    __dst = v444;
    v1349 = &v442[8 * v441];
    v1361 = v1349;
    if (v433)
      operator delete(v433);
    v433 = v444;
    v432 = v1335;
    v434 = v1343;
    goto LABEL_455;
  }
LABEL_467:
  v463 = v1407.__r_.__value_.__r.__words[0];
  if (v1407.__r_.__value_.__r.__words[0])
  {
    size = v1407.__r_.__value_.__l.__size_;
    v465 = (void *)v1407.__r_.__value_.__r.__words[0];
    if (v1407.__r_.__value_.__l.__size_ != v1407.__r_.__value_.__r.__words[0])
    {
      v466 = v1407.__r_.__value_.__l.__size_;
      do
      {
        v468 = *(void **)(v466 - 24);
        v466 -= 24;
        v467 = v468;
        if (v468)
        {
          *(_QWORD *)(size - 16) = v467;
          operator delete(v467);
        }
        size = v466;
      }
      while (v466 != v463);
      v465 = (void *)v1407.__r_.__value_.__r.__words[0];
    }
    v1407.__r_.__value_.__l.__size_ = v463;
    operator delete(v465);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (*(_QWORD *)&__src[16])
    operator delete(*(void **)__src);
  if (v1397[0].i64[0])
    operator delete((void *)v1397[0].i64[0]);
  v469 = (unint64_t **)__dst;
  v470 = v1360;
  v471 = (unint64_t **)__dst;
  if (__dst == v1360)
  {
LABEL_494:
    v470 = v471;
    goto LABEL_495;
  }
  v472 = *(_QWORD *)(v1323 + 8) * (v1368 >> v1369) * (v1367 >> v1369);
  v473 = (unint64_t **)__dst;
  while (**v473 >= v472)
  {
    if (++v473 == v1360)
      goto LABEL_493;
  }
  if (v473 == v1360)
  {
LABEL_493:
    v471 = v1360;
    goto LABEL_494;
  }
  v474 = v473 + 1;
  if (v473 + 1 == v1360)
  {
    if (v473 == v1360)
      goto LABEL_495;
    goto LABEL_677;
  }
  do
  {
    if (**v474 >= v472)
      *v473++ = *v474;
    ++v474;
  }
  while (v474 != v470);
  v470 = v1360;
  v469 = (unint64_t **)__dst;
  if (v473 != v1360)
  {
LABEL_677:
    v470 = v473;
    v1360 = v473;
  }
LABEL_495:
  v475 = 126 - 2 * __clz(v470 - v469);
  if (v470 == v469)
    v476 = 0;
  else
    v476 = v475;
  sub_223EF0590((unint64_t)v469, v470, v476, 1);
  v477 = v1360;
  v478 = (unint64_t **)__dst;
  memset(__src, 0, 24);
  v479 = (char *)v1360 - (_BYTE *)__dst;
  if (v1360 == __dst)
  {
    v481 = 0;
  }
  else
  {
    if ((unint64_t)v479 > 0x5555555555555550)
      sub_22316E078();
    v480 = v479 >> 3;
    v481 = operator new(24 * (v479 >> 3));
    v479 = (uint64_t)&v481[3 * v480];
    *(_QWORD *)__src = v481;
    *(_QWORD *)&__src[8] = v481;
    *(_QWORD *)&__src[16] = v479;
    if (v1360 != __dst)
    {
      while (1)
      {
        v483 = (*v478)[25];
        v482 = (*v478)[26];
        memset(__p, 0, 24);
        v484 = v482 - v483;
        if (v482 == v483)
        {
          v486 = 0;
          v485 = 0;
          v487 = *(_QWORD *)&__src[16];
          if ((unint64_t)v481 < *(_QWORD *)&__src[16])
            goto LABEL_502;
LABEL_508:
          v488 = *(_QWORD **)__src;
          v489 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v481 - *(_QWORD *)__src) >> 3);
          v490 = v489 + 1;
          if (v489 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_22316E078();
          v491 = 0xAAAAAAAAAAAAAAABLL * ((v487 - *(_QWORD *)__src) >> 3);
          if (2 * v491 > v490)
            v490 = 2 * v491;
          if (v491 >= 0x555555555555555)
            v492 = 0xAAAAAAAAAAAAAAALL;
          else
            v492 = v490;
          if (v492 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v493 = (char *)operator new(24 * v492);
          v494 = (int64x2_t *)&v493[24 * v489];
          *v494 = vdupq_n_s64((unint64_t)v485);
          v494[1].i64[0] = (uint64_t)v486;
          memset(__p, 0, 24);
          v495 = &v494[1].i64[1];
          if (v481 == v488)
          {
            *(_QWORD *)__src = &v493[24 * v489];
            *(_QWORD *)&__src[8] = (char *)v494 + 24;
            *(_QWORD *)&__src[16] = &v493[24 * v492];
          }
          else
          {
            do
            {
              v496 = *(int64x2_t *)(v481 - 3);
              v481 -= 3;
              *(int64x2_t *)((char *)v494 - 24) = v496;
              v494 = (int64x2_t *)((char *)v494 - 24);
              v494[1].i64[0] = v481[2];
              *v481 = 0;
              v481[1] = 0;
              v481[2] = 0;
            }
            while (v481 != v488);
            v481 = *(_QWORD **)__src;
            v497 = *(_QWORD **)&__src[8];
            *(_QWORD *)__src = v494;
            *(_QWORD *)&__src[8] = v495;
            *(_QWORD *)&__src[16] = &v493[24 * v492];
            if (v497 != v481)
            {
              v498 = v497;
              do
              {
                v500 = (void *)*(v498 - 3);
                v498 -= 3;
                v499 = v500;
                if (v500)
                {
                  *(v497 - 2) = v499;
                  operator delete(v499);
                }
                v497 = v498;
              }
              while (v498 != v481);
            }
          }
          if (v481)
            operator delete(v481);
          v481 = v495;
          *(_QWORD *)&__src[8] = v495;
          if (++v478 == v477)
          {
LABEL_526:
            v501 = v1360;
            v477 = (unint64_t **)__dst;
            v502 = *(_QWORD *)__src;
            v479 = *(_QWORD *)&__src[16];
            goto LABEL_529;
          }
        }
        else
        {
          if ((unint64_t)v484 >= 0x7FFFFFFFFFFFFFF9)
            sub_22316E078();
          v485 = (char *)operator new(2 * v484);
          v486 = &v485[16 * (v484 >> 3)];
          v487 = *(_QWORD *)&__src[16];
          if ((unint64_t)v481 >= *(_QWORD *)&__src[16])
            goto LABEL_508;
LABEL_502:
          *v481 = v485;
          v481[1] = v485;
          v481[2] = v486;
          v481 += 3;
          *(_QWORD *)&__src[8] = v481;
          if (++v478 == v477)
            goto LABEL_526;
        }
      }
    }
  }
  v501 = v1360;
  v502 = (std::string::size_type)v481;
LABEL_529:
  v1407.__r_.__value_.__r.__words[0] = v502;
  v1407.__r_.__value_.__l.__size_ = (std::string::size_type)v481;
  v1407.__r_.__value_.__r.__words[2] = v479;
  v503 = v1378;
  v504 = v1377;
  memset(v1397, 0, 24);
  v505 = (char *)v1378 - (char *)v1377;
  v506 = v1378 - v1377;
  if (v1378 == v1377)
  {
    v510 = 0;
    v508 = 0;
    if (v477 == v501)
      goto LABEL_548;
    goto LABEL_539;
  }
  if ((v505 & 0x8000000000000000) != 0)
    sub_22316E078();
  v507 = (int32x4_t *)operator new(v505 >> 2);
  v508 = v507;
  v509 = (unint64_t)((char *)v501 - (char *)v477) >> 3;
  v510 = (uint64_t)v507->i64 + 4 * v506;
  v1397[0].i64[0] = (uint64_t)v507;
  v1397[1].i64[0] = v510;
  v511 = (v506 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v512 = (char *)v507;
  if (v511 < 7)
    goto LABEL_1663;
  v513 = v511 + 1;
  v512 = &v507->i8[4 * (v513 & 0x7FFFFFFFFFFFFFF8)];
  v514 = vdupq_n_s32(v509);
  v515 = v507 + 1;
  v516 = v513 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v515[-1] = v514;
    *v515 = v514;
    v515 += 2;
    v516 -= 8;
  }
  while (v516);
  if (v513 != (v513 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_1663:
    do
    {
      *(_DWORD *)v512 = v509;
      v512 += 4;
    }
    while (v512 != (char *)v510);
  }
  v1397[0].i64[1] = (uint64_t)v507->i64 + 4 * v506;
  if (v477 != v501)
  {
LABEL_539:
    v517 = 0;
    do
    {
      v519 = (char *)(*v477)[25];
      v518 = (char *)(*v477)[26];
      if (v519 != v518)
      {
        v520 = v518 - v519 - 8;
        v521 = (char *)(*v477)[25];
        if (v520 < 8)
          goto LABEL_1664;
        v522 = (v520 >> 3) + 1;
        v521 = &v519[8 * (v522 & 0x3FFFFFFFFFFFFFFELL)];
        v523 = (uint64_t *)(v519 + 8);
        v524 = v522 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          v525 = *v523;
          v508->i32[*(v523 - 1)] = v517;
          v508->i32[v525] = v517;
          v523 += 2;
          v524 -= 2;
        }
        while (v524);
        if (v522 != (v522 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_1664:
          do
          {
            v526 = *(_QWORD *)v521;
            v521 += 8;
            v508->i32[v526] = v517;
          }
          while (v521 != v518);
        }
      }
      ++v477;
      ++v517;
    }
    while (v477 != v501);
  }
LABEL_548:
  if (v503 == v504)
  {
    v528 = 0;
    v527 = 0;
  }
  else
  {
    if ((v505 & 0x8000000000000000) != 0)
      sub_22316E078();
    v527 = (char *)operator new(20 * v506);
    v528 = &v527[20 * v506];
    if (v504 != v503)
      goto LABEL_558;
  }
  if (v508 != (int32x4_t *)v510)
  {
LABEL_558:
    v529 = v527;
    while (1)
    {
      while (1)
      {
        v535 = v508->i32[0];
        *(_OWORD *)__p = *v504;
        if (v529 >= v528)
          break;
        v534 = *v504++;
        *(_OWORD *)v529 = v534;
        *((_DWORD *)v529 + 4) = v535;
        v529 += 20;
        v508 = (int32x4_t *)((char *)v508 + 4);
        if (v504 == v503)
        {
LABEL_560:
          if (v508 == (int32x4_t *)v510)
            goto LABEL_555;
        }
      }
      v536 = 0xCCCCCCCCCCCCCCCDLL * ((v529 - v527) >> 2) + 1;
      if (v536 > 0xCCCCCCCCCCCCCCCLL)
        sub_22316E078();
      if (0x999999999999999ALL * ((v528 - v527) >> 2) > v536)
        v536 = 0x999999999999999ALL * ((v528 - v527) >> 2);
      if (0xCCCCCCCCCCCCCCCDLL * ((v528 - v527) >> 2) >= 0x666666666666666)
        v537 = 0xCCCCCCCCCCCCCCCLL;
      else
        v537 = v536;
      if (v537)
      {
        if (v537 > 0xCCCCCCCCCCCCCCCLL)
          sub_223174E94();
        v538 = (char *)operator new(20 * v537);
      }
      else
      {
        v538 = 0;
      }
      v539 = &v538[4 * ((v529 - v527) >> 2)];
      *(_OWORD *)v539 = *(_OWORD *)__p;
      *((_DWORD *)v539 + 4) = v535;
      if (v529 == v527)
      {
        v542 = &v538[4 * ((v529 - v527) >> 2)];
        v528 = &v538[20 * v537];
        v529 = v539 + 20;
        if (!v527)
          goto LABEL_577;
      }
      else
      {
        v540 = &v538[4 * ((v529 - v527) >> 2)];
        do
        {
          v541 = *(_OWORD *)(v529 - 20);
          v542 = v540 - 20;
          *((_DWORD *)v540 - 1) = *((_DWORD *)v529 - 1);
          *(_OWORD *)(v540 - 20) = v541;
          v529 -= 20;
          v540 -= 20;
        }
        while (v529 != v527);
        v528 = &v538[20 * v537];
        v529 = v539 + 20;
        if (!v527)
          goto LABEL_577;
      }
      operator delete(v527);
LABEL_577:
      v527 = v542;
      ++v504;
      v508 = (int32x4_t *)((char *)v508 + 4);
      if (v504 == v503)
        goto LABEL_560;
    }
  }
  v529 = v527;
LABEL_555:
  __p[0] = v527;
  __p[1] = v529;
  __p[2] = v528;
  v530 = 0uLL;
  memset(&__p[3], 0, 32);
  memset(__src, 0, 24);
  *(_QWORD *)v1406 = __src;
  v1406[8] = 0;
  v531 = 0xCCCCCCCCCCCCCCCDLL * ((v529 - v527) >> 2);
  if (v529 == v527)
  {
    v533 = 0;
    v532 = 0;
  }
  else
  {
    if (v531 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v532 = (char *)operator new(0x3333333333333338 * ((v529 - v527) >> 2));
    v533 = &v532[0x3333333333333338 * ((v529 - v527) >> 2)];
    bzero(v532, 24 * ((0x3333333333333338 * ((v529 - v527) >> 2) - 24) / 0x18uLL) + 24);
    v530 = 0uLL;
  }
  __p[3] = v532;
  __p[4] = v533;
  *(_OWORD *)&__p[7] = v530;
  v1399 = v530;
  v1400 = v530;
  v1401 = v530;
  __p[5] = v533;
  v1402 = 0;
  v543 = (unsigned int **)v1362;
  v1336 = v1363;
  if (v1362 != v1363)
  {
    v544 = 0;
    while (1)
    {
      v1350 = v543;
      v545 = v543[1];
      if (v545)
        break;
LABEL_584:
      v543 = v1350 + 3;
      ++v544;
      if (v1350 + 3 == v1336)
      {
        v527 = (char *)__p[0];
        v529 = (char *)__p[1];
        v531 = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 2);
        goto LABEL_669;
      }
    }
    v546 = *(_DWORD *)(v1397[0].i64[0] + 4 * v544);
    v547 = *v1350;
    v548 = (uint64_t)&(*v1350)[3 * (_QWORD)v545];
    while (1)
    {
      v549 = *v547;
      if (v544 > v549 || v546 != *(_DWORD *)(v1397[0].i64[0] + 4 * v549))
        goto LABEL_588;
      ++__p[6];
      v550 = (char *)__p[3] + 24 * v544;
      *(_DWORD *)&__src[8] = 0;
      *(_QWORD *)__src = v549;
      v551 = *(char **)v550;
      v552 = *((_QWORD *)v550 + 1);
      if (!v552)
        break;
      v553 = *(char **)v550;
      v554 = *((_QWORD *)v550 + 1);
      do
      {
        v555 = v554 >> 1;
        v556 = (unsigned int *)&v553[12 * (v554 >> 1)];
        v558 = *v556;
        v557 = (char *)(v556 + 3);
        v554 += ~(v554 >> 1);
        if (v558 >= v549)
          v554 = v555;
        else
          v553 = v557;
      }
      while (v554);
      v559 = &v551[12 * v552];
      if (v553 == v559)
        goto LABEL_604;
      if (v549 >= *(_DWORD *)v553)
        goto LABEL_606;
      if (*((_QWORD *)v550 + 2) == v552)
        goto LABEL_665;
      *(_DWORD *)v559 = *((_DWORD *)v559 - 3);
      *(_QWORD *)&v551[12 * v552 + 4] = *((_QWORD *)v559 - 1);
      ++*((_QWORD *)v550 + 1);
      if (v559 - 12 != v553)
        memmove(v553 + 12, v553, v559 - 12 - v553);
      *(_DWORD *)v553 = *(_DWORD *)__src;
      *(_QWORD *)(v553 + 4) = *(_QWORD *)&__src[4];
LABEL_606:
      v560 = (char *)__p[3] + 24 * v549;
      *(_DWORD *)&__src[8] = 0;
      *(_QWORD *)__src = v544;
      v561 = *(char **)v560;
      v562 = *((_QWORD *)v560 + 1);
      if (!v562)
      {
        v563 = *(char **)v560;
        v569 = *(char **)v560;
LABEL_619:
        if (*((_QWORD *)v560 + 2) != v562)
        {
          *(_DWORD *)v569 = v544;
          *(_QWORD *)&v561[12 * v562 + 4] = *(_QWORD *)&__src[4];
          ++*((_QWORD *)v560 + 1);
          v563 = v569;
          goto LABEL_621;
        }
LABEL_666:
        sub_223EF00F4((char **)v560, v563, 1, (uint64_t)__src, v1406);
        v563 = *(char **)v1406;
        goto LABEL_621;
      }
      v563 = *(char **)v560;
      v564 = *((_QWORD *)v560 + 1);
      do
      {
        v565 = v564 >> 1;
        v566 = (unsigned int *)&v563[12 * (v564 >> 1)];
        v568 = *v566;
        v567 = (char *)(v566 + 3);
        v564 += ~(v564 >> 1);
        if (v568 >= v544)
          v564 = v565;
        else
          v563 = v567;
      }
      while (v564);
      v569 = &v561[12 * v562];
      if (v563 == v569)
        goto LABEL_619;
      if (*(_DWORD *)v563 <= v544)
        goto LABEL_621;
      if (*((_QWORD *)v560 + 2) == v562)
        goto LABEL_666;
      *(_DWORD *)v569 = *((_DWORD *)v569 - 3);
      *(_QWORD *)&v561[12 * v562 + 4] = *((_QWORD *)v569 - 1);
      ++*((_QWORD *)v560 + 1);
      if (v569 - 12 != v563)
        memmove(v563 + 12, v563, v569 - 12 - v563);
      *(_DWORD *)v563 = *(_DWORD *)__src;
      *(_QWORD *)(v563 + 4) = *(_QWORD *)&__src[4];
LABEL_621:
      v570 = (char *)__p[0] + 20 * v544;
      v571 = (char *)__p[0] + 20 * v549;
      if (v570[1] != v571[1] || (v572 = 0.0, v570[3] != v571[3]))
      {
        if (*v570 != *v571 || (v572 = 1.0, v570[2] != v571[2]))
          v572 = 2.0;
      }
      *((_DWORD *)v563 + 1) = 0;
      *((float *)v563 + 2) = v572;
      *(_QWORD *)(v553 + 4) = *(_QWORD *)(v563 + 4);
      v573 = &__p[3 * vcvtas_u32_f32(v572) + 7];
      v1406[0] = v544;
      v1406[1] = BYTE1(v544);
      v1406[2] = BYTE2(v544);
      v1406[3] = BYTE3(v544);
      v1406[4] = v549;
      v1406[5] = BYTE1(v549);
      v1406[6] = BYTE2(v549);
      v1406[7] = BYTE3(v549);
      v575 = *v573;
      v574 = v573[1];
      if (v574)
      {
        v576 = (unint64_t *)*v573;
        v577 = (unint64_t)v573[1];
        do
        {
          v579 = v577 >> 1;
          v580 = &v576[v577 >> 1];
          if (*(_DWORD *)v580 >= v544)
            v581 = 1;
          else
            v581 = -1;
          if (*(_DWORD *)v580 == (_DWORD)v544)
          {
            v582 = *((_DWORD *)v580 + 1);
            v583 = v582 == (_DWORD)v549;
            v581 = v582 >= v549 ? 1 : -1;
            if (v583)
              v581 = 0;
          }
          v578 = v580 + 1;
          v577 += ~v579;
          if (v581 < 0)
            v576 = v578;
          else
            v577 = v579;
        }
        while (v577);
      }
      else
      {
        v576 = (unint64_t *)*v573;
      }
      v584 = (unint64_t *)&v575[8 * (_QWORD)v574];
      if (v576 != v584)
      {
        if (*(_DWORD *)v576 <= v544)
          v585 = 1;
        else
          v585 = -1;
        if (*(_DWORD *)v576 == (_DWORD)v544)
        {
          v586 = *((_DWORD *)v576 + 1);
          v587 = (_DWORD)v549 == v586;
          v585 = v549 >= v586 ? 1 : -1;
          if (v587)
            v585 = 0;
        }
        if ((v585 & 0x80) == 0)
          goto LABEL_588;
        if (v573[2] != v574)
        {
          v588 = v584 - 1;
          *v584 = *(v584 - 1);
          v573[1] = (char *)v573[1] + 1;
          if (v584 - 1 != v576)
          {
            v589 = &v575[8 * (_QWORD)v574] - (_BYTE *)v576 - 16;
            v590 = v584 - 1;
            if (v589 < 0x18)
              goto LABEL_660;
            v591 = (v589 >> 3) + 1;
            v592 = 8 * (v591 & 0x3FFFFFFFFFFFFFFCLL);
            v584 = (unint64_t *)((char *)v584 - v592);
            v590 = &v588[v592 / 0xFFFFFFFFFFFFFFF8];
            v593 = (const float *)(v588 - 4);
            v594 = v591 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1410 = vld2q_f32(v593);
              v595 = (float *)(v593 + 2);
              vst2q_f32(v595, v1410);
              v593 -= 8;
              v594 -= 4;
            }
            while (v594);
            if (v591 != (v591 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_660:
              v596 = (_DWORD *)v584 - 1;
              do
              {
                v597 = *((_DWORD *)v590-- - 2);
                *(v596 - 1) = v597;
                *v596 = *((_DWORD *)v590 + 1);
                v596 -= 2;
              }
              while (v590 != v576);
            }
          }
          *v576 = *(_QWORD *)v1406;
          goto LABEL_588;
        }
LABEL_667:
        sub_223EF15B8(__src, (uint64_t)v573, v576, v1406);
        goto LABEL_588;
      }
      if (v573[2] == v574)
        goto LABEL_667;
      *v584 = v544 | (v549 << 32);
      v573[1] = (char *)v573[1] + 1;
LABEL_588:
      v547 += 3;
      if (v547 == (unsigned int *)v548)
        goto LABEL_584;
    }
    v553 = *(char **)v550;
    v559 = *(char **)v550;
LABEL_604:
    if (*((_QWORD *)v550 + 2) != v552)
    {
      *(_DWORD *)v559 = v549;
      *(_QWORD *)&v551[12 * v552 + 4] = *(_QWORD *)&__src[4];
      ++*((_QWORD *)v550 + 1);
      v553 = v559;
      goto LABEL_606;
    }
LABEL_665:
    sub_223EF00F4((char **)v550, v553, 1, (uint64_t)__src, v1406);
    v553 = *(char **)v1406;
    goto LABEL_606;
  }
LABEL_669:
  memset(__src, 0, 24);
  if (v529 != v527)
  {
    if (v531 >> 61)
      sub_22367C394();
    v598 = (int64x2_t *)operator new(8 * v531);
    *(_QWORD *)__src = v598;
    *(_QWORD *)&__src[16] = (char *)v598 + 8 * v531;
    if (v531 >= 4)
    {
      v599 = v531 & 0xFFFFFFFFFFFFFFFCLL;
      v600 = &v598->i64[v531 & 0xFFFFFFFFFFFFFFFCLL];
      v601 = (int64x2_t)xmmword_2245F5410;
      v602 = v598 + 1;
      v603 = vdupq_n_s64(2uLL);
      v604 = vdupq_n_s64(4uLL);
      v605 = v531 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v602[-1] = v601;
        *v602 = vaddq_s64(v601, v603);
        v601 = vaddq_s64(v601, v604);
        v602 += 2;
        v605 -= 4;
      }
      while (v605);
      goto LABEL_700;
    }
    v599 = 0;
    v600 = (uint64_t *)v598;
    do
    {
      *v600++ = v599++;
LABEL_700:
      ;
    }
    while (v531 != v599);
    *(_QWORD *)&__src[8] = v600;
  }
  if (__p[6])
  {
LABEL_706:
    v608 = &__p[7];
    if (!__p[8])
    {
      v608 = (void **)&v1399 + 1;
      if (!(_QWORD)v1400)
      {
        if (!*((_QWORD *)&v1401 + 1))
        {
          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Detector/DepthMapPlaneDetector.cpp", 60, (uint64_t)"", 0, (uint64_t)"No edges left when grouping regions", 35, (void (*)(void **))sub_22457406C);
          abort();
        }
        v608 = (void **)&v1401;
      }
    }
    if ((char *)v608 - (char *)&__p[7] > 24)
      goto LABEL_1111;
    v609 = *(_QWORD *)*v608;
    v610 = (char *)__p[0] + 20 * v609;
    v611 = (unint64_t)__p[0] + 20 * HIDWORD(v609);
    LODWORD(v612) = *v610;
    LODWORD(v613) = v610[1];
    v614 = *(_DWORD *)(v611 + 4);
    if (*(_DWORD *)v611 >= *v610)
      v612 = v612;
    else
      v612 = *(unsigned int *)v611;
    if (v614 >= v613)
      v613 = v613;
    else
      v613 = v614;
    LODWORD(v615) = v610[2];
    v616 = v610[3];
    v617 = *(_DWORD *)(v611 + 8);
    LODWORD(v611) = *(_DWORD *)(v611 + 12);
    if (v615 <= v617)
      v615 = v617;
    else
      v615 = v615;
    if (v616 <= v611)
      v611 = v611;
    else
      v611 = v616;
    *(_QWORD *)v610 = v612 | (v613 << 32);
    *((_QWORD *)v610 + 1) = v615 | (v611 << 32);
    *(_QWORD *)(*(_QWORD *)__src + 8 * HIDWORD(v609)) = v609;
    v618 = (char *)__p[3];
    v619 = (char *)__p[3] + 24 * v609;
    v620 = *((_QWORD *)v619 + 1);
    if (v620)
    {
      v621 = *(_DWORD **)v619;
      v622 = *(_QWORD *)v619 + 12 * v620;
      v623 = *((_QWORD *)v619 + 1);
      do
      {
        v624 = v623 >> 1;
        v625 = &v621[3 * (v623 >> 1)];
        v627 = *v625;
        v626 = v625 + 3;
        v623 += ~(v623 >> 1);
        if (v627 >= HIDWORD(v609))
          v623 = v624;
        else
          v621 = v626;
      }
      while (v623);
      if (v621 != (_DWORD *)v622 && *v621 <= HIDWORD(v609))
      {
        if (v621 + 3 != (_DWORD *)v622)
        {
          memmove(v621, v621 + 3, v622 - (_QWORD)(v621 + 3));
          v620 = *((_QWORD *)v619 + 1);
          v618 = (char *)__p[3];
        }
        *((_QWORD *)v619 + 1) = v620 - 1;
      }
    }
    v628 = &v618[24 * HIDWORD(v609)];
    v629 = *((_QWORD *)v628 + 1);
    if (v629)
    {
      v630 = *(_DWORD **)v628;
      v631 = *(_QWORD *)v628 + 12 * v629;
      v632 = *((_QWORD *)v628 + 1);
      do
      {
        v633 = v632 >> 1;
        v634 = &v630[3 * (v632 >> 1)];
        v636 = *v634;
        v635 = v634 + 3;
        v632 += ~(v632 >> 1);
        if (v636 >= v609)
          v632 = v633;
        else
          v630 = v635;
      }
      while (v632);
      if (v630 != (_DWORD *)v631 && *v630 <= v609)
      {
        if (v630 + 3 != (_DWORD *)v631)
        {
          memmove(v630, v630 + 3, v631 - (_QWORD)(v630 + 3));
          v629 = *((_QWORD *)v628 + 1);
        }
        *((_QWORD *)v628 + 1) = v629 - 1;
      }
    }
    v637 = __p[8];
    --__p[6];
    v638 = &__p[7];
    if (!__p[8])
    {
      v637 = (void *)v1400;
      v638 = (void **)&v1399 + 1;
      if (!(_QWORD)v1400)
      {
        v637 = (void *)*((_QWORD *)&v1401 + 1);
        v638 = (void **)&v1401;
        if (!*((_QWORD *)&v1401 + 1))
          goto LABEL_758;
      }
    }
    v639 = (char *)v637 - 1;
    if (v637 != (void *)1)
    {
      v640 = (char *)*v638;
      v641 = (char *)*v638 + 8;
      v642 = ((unint64_t)v637 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
      if (v642 >= 7)
      {
        v644 = v642 + 1;
        v645 = (v642 + 1) & 0x3FFFFFFFFFFFFFF8;
        v643 = &v640[8 * v645];
        v641 += 8 * v645;
        v646 = (__int128 *)(v640 + 40);
        v647 = v645;
        do
        {
          v648 = *(v646 - 1);
          v650 = *v646;
          v649 = v646[1];
          *(__int128 *)((char *)v646 - 40) = *(v646 - 2);
          *(__int128 *)((char *)v646 - 24) = v648;
          *(__int128 *)((char *)v646 - 8) = v650;
          *(__int128 *)((char *)v646 + 8) = v649;
          v646 += 4;
          v647 -= 8;
        }
        while (v647);
        if (v644 == v645)
          goto LABEL_757;
      }
      else
      {
        v643 = (char *)*v638;
      }
      v651 = &v640[8 * (_QWORD)v637];
      do
      {
        *(_DWORD *)v643 = *(_DWORD *)v641;
        *((_DWORD *)v643 + 1) = *((_DWORD *)v641 + 1);
        v641 += 8;
        v643 += 8;
      }
      while (v641 != v651);
    }
LABEL_757:
    v638[1] = v639;
LABEL_758:
    v606 = __p[3];
    v652 = (char *)__p[3] + 24 * v609;
    v653 = *((_QWORD *)v652 + 1);
    if (v653)
    {
      v654 = *(unsigned int **)v652;
      v655 = *(_QWORD *)v652 + 12 * v653;
      while (1)
      {
        v657 = *v654;
        v658 = (char *)&v606[3 * *v654];
        v659 = *((_QWORD *)v658 + 1);
        if (!v659)
          break;
        v660 = *(_DWORD **)v658;
        v661 = &v660[3 * v659];
        do
        {
          v662 = v659 >> 1;
          v663 = &v660[3 * (v659 >> 1)];
          v665 = *v663;
          v664 = v663 + 3;
          v659 += ~(v659 >> 1);
          if (v665 >= HIDWORD(v609))
            v659 = v662;
          else
            v660 = v664;
        }
        while (v659);
        if (v660 == v661 || *v660 > HIDWORD(v609))
          break;
LABEL_762:
        v654 += 3;
        if (v654 == (unsigned int *)v655)
          goto LABEL_866;
      }
      if (v609 >= v657)
        v666 = v657;
      else
        v666 = v609;
      if (v609 <= v657)
        v667 = v657;
      else
        v667 = v609;
      v668 = &__p[3 * vcvtas_u32_f32(*((float *)v654 + 2)) + 7];
      v669 = v668[1];
      if (v669)
      {
        v670 = (uint64_t)*v668 + 8 * (_QWORD)v669;
        v671 = *v668;
        v672 = (unint64_t)v668[1];
        do
        {
          v674 = v672 >> 1;
          v675 = &v671[2 * (v672 >> 1)];
          if (*v675 >= v666)
            v676 = 1;
          else
            v676 = -1;
          if (*v675 == (_DWORD)v666)
          {
            v677 = v675[1];
            v678 = v677 == (_DWORD)v667;
            v676 = v677 >= v667 ? 1 : -1;
            if (v678)
              v676 = 0;
          }
          v673 = v675 + 2;
          v672 += ~v674;
          if (v676 < 0)
            v671 = v673;
          else
            v672 = v674;
        }
        while (v672);
        if (v671 != (_DWORD *)v670)
        {
          if (*v671 <= v666)
            v679 = 1;
          else
            v679 = -1;
          if (*v671 == (_DWORD)v666)
          {
            v680 = v671[1];
            v681 = v680 == (_DWORD)v667;
            v679 = v680 <= v667 ? 1 : -1;
            if (v681)
              v679 = 0;
          }
          if ((v679 & 0x80) == 0)
          {
            v682 = v671 + 2;
            if (v671 + 2 != (_DWORD *)v670)
            {
              v683 = (_BYTE *)*v668 + 8 * (_QWORD)v669 - (_BYTE *)v671 - 16;
              if (v683 < 0x38)
                goto LABEL_1665;
              v684 = (v683 >> 3) + 1;
              v685 = 2 * (v684 & 0x3FFFFFFFFFFFFFF8);
              v686 = &v671[v685];
              v682 = (_DWORD *)((char *)v682 + v685 * 4);
              v687 = (__int128 *)(v671 + 10);
              v688 = v684 & 0x3FFFFFFFFFFFFFF8;
              do
              {
                v689 = *(v687 - 1);
                v691 = *v687;
                v690 = v687[1];
                *(__int128 *)((char *)v687 - 40) = *(v687 - 2);
                *(__int128 *)((char *)v687 - 24) = v689;
                *(__int128 *)((char *)v687 - 8) = v691;
                *(__int128 *)((char *)v687 + 8) = v690;
                v687 += 4;
                v688 -= 8;
              }
              while (v688);
              v671 = v686;
              if (v684 != (v684 & 0x3FFFFFFFFFFFFFF8))
              {
LABEL_1665:
                do
                {
                  *v671 = *v682;
                  v671[1] = v682[1];
                  v682 += 2;
                  v671 += 2;
                }
                while (v682 != (_DWORD *)v670);
              }
            }
            v668[1] = (char *)v669 - 1;
          }
        }
      }
      v692 = (char *)__p[0] + 20 * v609;
      v693 = (char *)__p[0] + 20 * v657;
      if (v692[1] != v693[1] || (v694 = 0.0, v692[3] != v693[3]))
      {
        if (*v692 != *v693 || (v694 = 1.0, v692[2] != v693[2]))
          v694 = 2.0;
      }
      v695 = &__p[3 * vcvtas_u32_f32(v694) + 7];
      v1403 = (uint64_t (**)())((v667 << 32) | v666);
      v697 = *v695;
      v696 = v695[1];
      if (v696)
      {
        v698 = (uint64_t *)*v695;
        v699 = (unint64_t)v695[1];
        do
        {
          v701 = v699 >> 1;
          v702 = &v698[v699 >> 1];
          if (*(_DWORD *)v702 >= v666)
            v703 = 1;
          else
            v703 = -1;
          if (*(_DWORD *)v702 == (_DWORD)v666)
          {
            v704 = *((_DWORD *)v702 + 1);
            v705 = v704 == (_DWORD)v667;
            v703 = v704 >= v667 ? 1 : -1;
            if (v705)
              v703 = 0;
          }
          v700 = v702 + 1;
          v699 += ~v701;
          if (v703 < 0)
            v698 = v700;
          else
            v699 = v701;
        }
        while (v699);
      }
      else
      {
        v698 = (uint64_t *)*v695;
      }
      v706 = (uint64_t *)&v697[8 * (_QWORD)v696];
      if (v698 == v706)
      {
        if (v695[2] != v696)
        {
          *v706 = (v667 << 32) | v666;
          v695[1] = (char *)v695[1] + 1;
          goto LABEL_857;
        }
      }
      else
      {
        v707 = (_DWORD)v666 == *(_DWORD *)v698;
        if (v666 >= *(_DWORD *)v698)
          v708 = 1;
        else
          v708 = -1;
        if (v707)
        {
          v709 = *((_DWORD *)v698 + 1);
          v710 = (_DWORD)v667 == v709;
          if (v667 >= v709)
            v711 = 1;
          else
            v711 = -1;
          if (v710)
            v708 = 0;
          else
            v708 = v711;
        }
        if ((v708 & 0x80) == 0)
          goto LABEL_857;
        if (v695[2] != v696)
        {
          v712 = v706 - 1;
          *v706 = *(v706 - 1);
          v695[1] = (char *)v695[1] + 1;
          if (v706 - 1 != v698)
          {
            v713 = &v697[8 * (_QWORD)v696] - (_BYTE *)v698 - 16;
            v714 = v706 - 1;
            if (v713 < 0x18)
              goto LABEL_852;
            v715 = (v713 >> 3) + 1;
            v716 = 8 * (v715 & 0x3FFFFFFFFFFFFFFCLL);
            v706 = (uint64_t *)((char *)v706 - v716);
            v714 = &v712[v716 / 0xFFFFFFFFFFFFFFF8];
            v717 = (const float *)(v712 - 4);
            v718 = v715 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1411 = vld2q_f32(v717);
              v719 = (float *)(v717 + 2);
              vst2q_f32(v719, v1411);
              v717 -= 8;
              v718 -= 4;
            }
            while (v718);
            if (v715 != (v715 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_852:
              v720 = (_DWORD *)v706 - 1;
              do
              {
                v721 = *((_DWORD *)v714-- - 2);
                *(v720 - 1) = v721;
                *v720 = *((_DWORD *)v714 + 1);
                v720 -= 2;
              }
              while (v714 != v698);
            }
          }
          *v698 = (uint64_t)v1403;
          goto LABEL_857;
        }
      }
      sub_223EF15B8(v1406, (uint64_t)v695, v698, &v1403);
LABEL_857:
      *((float *)v654 + 2) = v694;
      v606 = __p[3];
      v722 = (char *)__p[3] + 24 * v657;
      v656 = *(float **)v722;
      v723 = *((_QWORD *)v722 + 1);
      v724 = *(_QWORD *)v722 + 12 * v723;
      if (!v723)
        goto LABEL_760;
      do
      {
        v725 = v723 >> 1;
        v726 = (unsigned int *)&v656[3 * (v723 >> 1)];
        v728 = *v726;
        v727 = (float *)(v726 + 3);
        v723 += ~(v723 >> 1);
        if (v728 >= v609)
          v723 = v725;
        else
          v656 = v727;
      }
      while (v723);
      if (v656 == (float *)v724 || *(_DWORD *)v656 > v609)
LABEL_760:
        v656 = (float *)v724;
      v656[2] = v694;
      goto LABEL_762;
    }
LABEL_866:
    v729 = &v606[3 * HIDWORD(v609)];
    v730 = v729[1];
    if (!v730)
      goto LABEL_705;
    v731 = *v729;
    v1331 = v531;
    v1337 = *v729 + 12 * v730;
    while (1)
    {
      v732 = *(_DWORD *)v731;
      v733 = (uint64_t *)((char *)__p[3] + 24 * v609);
      v735 = *v733;
      v734 = v733[1];
      v736 = *v733 + 12 * v734;
      if (!v734)
        goto LABEL_878;
      do
      {
        v737 = v734 >> 1;
        v738 = (unsigned int *)(v735 + 12 * (v734 >> 1));
        v740 = *v738;
        v739 = v738 + 3;
        v734 += ~(v734 >> 1);
        if (v740 >= v732)
          v734 = v737;
        else
          v735 = (uint64_t)v739;
      }
      while (v734);
      if (v735 == v736 || *(_DWORD *)v735 > v732)
LABEL_878:
        v735 = v736;
      v741 = (uint64_t *)((char *)__p[3] + 24 * v732);
      v743 = *v741;
      v742 = v741[1];
      v744 = *v741 + 12 * v742;
      if (!v742)
        goto LABEL_886;
      do
      {
        v745 = v742 >> 1;
        v746 = (unsigned int *)(v743 + 12 * (v742 >> 1));
        v748 = *v746;
        v747 = v746 + 3;
        v742 += ~(v742 >> 1);
        if (v748 >= v609)
          v742 = v745;
        else
          v743 = (uint64_t)v747;
      }
      while (v742);
      if (v743 == v744 || *(_DWORD *)v743 > v609)
LABEL_886:
        v743 = v744;
      if (v609 >= v732)
        v749 = v732;
      else
        v749 = v609;
      if (v609 <= v732)
        v750 = v732;
      else
        v750 = v609;
      v751 = v750 << 32;
      if (v735 != v736 || v743 != v744)
      {
        v763 = &__p[3 * vcvtas_u32_f32(*(float *)(v735 + 8)) + 7];
        v764 = v763[1];
        if (v764)
        {
          v765 = (uint64_t)*v763 + 8 * (_QWORD)v764;
          v766 = *v763;
          v767 = (unint64_t)v763[1];
          do
          {
            v769 = v767 >> 1;
            v770 = &v766[2 * (v767 >> 1)];
            if (*v770 >= v749)
              v771 = 1;
            else
              v771 = -1;
            if (*v770 == (_DWORD)v749)
            {
              v772 = v770[1];
              v773 = v772 == (_DWORD)v750;
              v771 = v772 >= v750 ? 1 : -1;
              if (v773)
                v771 = 0;
            }
            v768 = v770 + 2;
            v767 += ~v769;
            if (v771 < 0)
              v766 = v768;
            else
              v767 = v769;
          }
          while (v767);
          if (v766 != (_DWORD *)v765)
          {
            if (*v766 <= v749)
              v774 = 1;
            else
              v774 = -1;
            if (*v766 == (_DWORD)v749)
            {
              v775 = v766[1];
              v776 = v775 == (_DWORD)v750;
              v774 = v775 <= v750 ? 1 : -1;
              if (v776)
                v774 = 0;
            }
            if ((v774 & 0x80) == 0)
            {
              v777 = v766 + 2;
              if (v766 + 2 != (_DWORD *)v765)
              {
                v778 = (_BYTE *)*v763 + 8 * (_QWORD)v764 - (_BYTE *)v766 - 16;
                if (v778 < 0x38)
                  goto LABEL_1666;
                v779 = (v778 >> 3) + 1;
                v780 = 2 * (v779 & 0x3FFFFFFFFFFFFFF8);
                v781 = &v766[v780];
                v777 = (_DWORD *)((char *)v777 + v780 * 4);
                v782 = (__int128 *)(v766 + 10);
                v783 = v779 & 0x3FFFFFFFFFFFFFF8;
                do
                {
                  v784 = *(v782 - 1);
                  v786 = *v782;
                  v785 = v782[1];
                  *(__int128 *)((char *)v782 - 40) = *(v782 - 2);
                  *(__int128 *)((char *)v782 - 24) = v784;
                  *(__int128 *)((char *)v782 - 8) = v786;
                  *(__int128 *)((char *)v782 + 8) = v785;
                  v782 += 4;
                  v783 -= 8;
                }
                while (v783);
                v766 = v781;
                if (v779 != (v779 & 0x3FFFFFFFFFFFFFF8))
                {
LABEL_1666:
                  do
                  {
                    *v766 = *v777;
                    v766[1] = v777[1];
                    v777 += 2;
                    v766 += 2;
                  }
                  while (v777 != (_DWORD *)v765);
                }
              }
              v763[1] = (char *)v764 - 1;
            }
          }
        }
        v787 = *(float *)(v735 + 4);
        v788 = *(float *)(v731 + 4);
        v789 = (char *)__p[0] + 20 * v609;
        v790 = (char *)__p[0] + 20 * v732;
        if (v789[1] != v790[1] || (v791 = 0.0, v789[3] != v790[3]))
        {
          if (*v789 != *v790 || (v791 = 1.0, v789[2] != v790[2]))
            v791 = 2.0;
        }
        v792 = &__p[3 * vcvtas_u32_f32(v791) + 7];
        v1403 = (uint64_t (**)())(v751 | v749);
        v794 = *v792;
        v793 = v792[1];
        if (v793)
        {
          v795 = (uint64_t *)*v792;
          v796 = (unint64_t)v792[1];
          do
          {
            v798 = v796 >> 1;
            v799 = &v795[v796 >> 1];
            if (*(_DWORD *)v799 >= v749)
              v800 = 1;
            else
              v800 = -1;
            if (*(_DWORD *)v799 == (_DWORD)v749)
            {
              v801 = *((_DWORD *)v799 + 1);
              v802 = v801 == (_DWORD)v750;
              v800 = v801 >= v750 ? 1 : -1;
              if (v802)
                v800 = 0;
            }
            v797 = v799 + 1;
            v796 += ~v798;
            if (v800 < 0)
              v795 = v797;
            else
              v796 = v798;
          }
          while (v796);
        }
        else
        {
          v795 = (uint64_t *)*v792;
        }
        v803 = (uint64_t *)&v794[8 * (_QWORD)v793];
        if (v795 == v803)
        {
          if (v792[2] == v793)
            goto LABEL_1047;
          *v803 = v751 | v749;
          v792[1] = (char *)v792[1] + 1;
        }
        else
        {
          if (v749 >= *(_DWORD *)v795)
            v804 = 1;
          else
            v804 = -1;
          if ((_DWORD)v749 == *(_DWORD *)v795)
          {
            v805 = *((_DWORD *)v795 + 1);
            v806 = (_DWORD)v750 == v805;
            v804 = v750 >= v805 ? 1 : -1;
            if (v806)
              v804 = 0;
          }
          if ((v804 & 0x80) == 0)
            goto LABEL_869;
          if (v792[2] != v793)
          {
            v807 = v803 - 1;
            *v803 = *(v803 - 1);
            v792[1] = (char *)v792[1] + 1;
            if (v803 - 1 != v795)
            {
              v808 = &v794[8 * (_QWORD)v793] - (_BYTE *)v795 - 16;
              v809 = v803 - 1;
              if (v808 < 0x18)
                goto LABEL_980;
              v810 = (v808 >> 3) + 1;
              v811 = 8 * (v810 & 0x3FFFFFFFFFFFFFFCLL);
              v803 = (uint64_t *)((char *)v803 - v811);
              v809 = &v807[v811 / 0xFFFFFFFFFFFFFFF8];
              v812 = (const float *)(v807 - 4);
              v813 = v810 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v1412 = vld2q_f32(v812);
                v814 = (float *)(v812 + 2);
                vst2q_f32(v814, v1412);
                v812 -= 8;
                v813 -= 4;
              }
              while (v813);
              if (v810 != (v810 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_980:
                v815 = (_DWORD *)v803 - 1;
                do
                {
                  v816 = *((_DWORD *)v809-- - 2);
                  *(v815 - 1) = v816;
                  *v815 = *((_DWORD *)v809 + 1);
                  v815 -= 2;
                }
                while (v809 != v795);
              }
            }
            *v795 = (uint64_t)v1403;
            goto LABEL_869;
          }
LABEL_1047:
          sub_223EF15B8(v1406, (uint64_t)v792, v795, &v1403);
        }
LABEL_869:
        *(float *)(v743 + 4) = v787 + v788;
        *(float *)(v743 + 8) = v791;
        *(_QWORD *)(v735 + 4) = *(_QWORD *)(v743 + 4);
        goto LABEL_870;
      }
      v752 = *(_DWORD *)(v731 + 4);
      ++__p[6];
      v753 = (char *)__p[3] + 24 * v749;
      *(_DWORD *)&v1406[8] = 0;
      *(_QWORD *)v1406 = v750;
      v754 = *(char **)v753;
      v755 = *((_QWORD *)v753 + 1);
      if (!v755)
        break;
      v756 = *(uint64_t (***)())v753;
      v757 = *((_QWORD *)v753 + 1);
      do
      {
        v758 = v757 >> 1;
        v759 = (unsigned int *)v756 + 3 * (v757 >> 1);
        v761 = *v759;
        v760 = (uint64_t (**)())(v759 + 3);
        v757 += ~(v757 >> 1);
        if (v761 >= v750)
          v757 = v758;
        else
          v756 = v760;
      }
      while (v757);
      v762 = &v754[12 * v755];
      if (v756 == (uint64_t (**)())v762)
        goto LABEL_986;
      if (v750 >= *(_DWORD *)v756)
        goto LABEL_988;
      if (*((_QWORD *)v753 + 2) == v755)
        goto LABEL_1048;
      *(_DWORD *)v762 = *((_DWORD *)v762 - 3);
      *(_QWORD *)&v754[12 * v755 + 4] = *((_QWORD *)v762 - 1);
      ++*((_QWORD *)v753 + 1);
      if (v762 - 12 != (char *)v756)
        memmove((char *)v756 + 12, v756, v762 - 12 - (char *)v756);
      *(_DWORD *)v756 = *(_DWORD *)v1406;
      *(uint64_t (**)())((char *)v756 + 4) = *(uint64_t (**)())&v1406[4];
LABEL_988:
      v817 = (char *)__p[3] + 24 * v750;
      *(_DWORD *)&v1406[8] = 0;
      *(_QWORD *)v1406 = v749;
      v818 = *(char **)v817;
      v819 = *((_QWORD *)v817 + 1);
      if (!v819)
      {
        v820 = *(uint64_t (***)())v817;
        v826 = *(char **)v817;
LABEL_1001:
        if (*((_QWORD *)v817 + 2) == v819)
          goto LABEL_1049;
        *(_DWORD *)v826 = v749;
        *(_QWORD *)&v818[12 * v819 + 4] = *(_QWORD *)&v1406[4];
        ++*((_QWORD *)v817 + 1);
        v820 = (uint64_t (**)())v826;
        goto LABEL_1003;
      }
      v820 = *(uint64_t (***)())v817;
      v821 = *((_QWORD *)v817 + 1);
      do
      {
        v822 = v821 >> 1;
        v823 = (unsigned int *)v820 + 3 * (v821 >> 1);
        v825 = *v823;
        v824 = (uint64_t (**)())(v823 + 3);
        v821 += ~(v821 >> 1);
        if (v825 >= v749)
          v821 = v822;
        else
          v820 = v824;
      }
      while (v821);
      v826 = &v818[12 * v819];
      if (v820 == (uint64_t (**)())v826)
        goto LABEL_1001;
      if (v749 < *(_DWORD *)v820)
      {
        if (*((_QWORD *)v817 + 2) != v819)
        {
          *(_DWORD *)v826 = *((_DWORD *)v826 - 3);
          *(_QWORD *)&v818[12 * v819 + 4] = *((_QWORD *)v826 - 1);
          ++*((_QWORD *)v817 + 1);
          if (v826 - 12 != (char *)v820)
            memmove((char *)v820 + 12, v820, v826 - 12 - (char *)v820);
          *(_DWORD *)v820 = *(_DWORD *)v1406;
          *(uint64_t (**)())((char *)v820 + 4) = *(uint64_t (**)())&v1406[4];
          goto LABEL_1003;
        }
LABEL_1049:
        sub_223EF00F4((char **)v817, (char *)v820, 1, (uint64_t)v1406, &v1403);
        v820 = v1403;
      }
LABEL_1003:
      v827 = (char *)__p[0] + 20 * v749;
      v828 = (char *)__p[0] + 20 * v750;
      if (v827[1] != v828[1] || (v829 = 0.0, v827[3] != v828[3]))
      {
        if (*v827 != *v828 || (v829 = 1.0, v827[2] != v828[2]))
          v829 = 2.0;
      }
      *((_DWORD *)v820 + 1) = v752;
      *((float *)v820 + 2) = v829;
      *(uint64_t (**)())((char *)v756 + 4) = *(uint64_t (**)())((char *)v820 + 4);
      v830 = &__p[3 * vcvtas_u32_f32(v829) + 7];
      v1403 = (uint64_t (**)())(v751 | v749);
      v832 = *v830;
      v831 = v830[1];
      if (v831)
      {
        v833 = (uint64_t *)*v830;
        v834 = (unint64_t)v830[1];
        do
        {
          v836 = v834 >> 1;
          v837 = &v833[v834 >> 1];
          if (*(_DWORD *)v837 >= v749)
            v838 = 1;
          else
            v838 = -1;
          if (*(_DWORD *)v837 == (_DWORD)v749)
          {
            v839 = *((_DWORD *)v837 + 1);
            v840 = v839 == (_DWORD)v750;
            v838 = v839 >= v750 ? 1 : -1;
            if (v840)
              v838 = 0;
          }
          v835 = v837 + 1;
          v834 += ~v836;
          if (v838 < 0)
            v833 = v835;
          else
            v834 = v836;
        }
        while (v834);
      }
      else
      {
        v833 = (uint64_t *)*v830;
      }
      v841 = (uint64_t *)&v832[8 * (_QWORD)v831];
      if (v833 != v841)
      {
        if (v749 >= *(_DWORD *)v833)
          v842 = 1;
        else
          v842 = -1;
        if ((_DWORD)v749 == *(_DWORD *)v833)
        {
          v843 = *((_DWORD *)v833 + 1);
          v844 = (_DWORD)v750 == v843;
          v842 = v750 >= v843 ? 1 : -1;
          if (v844)
            v842 = 0;
        }
        if ((v842 & 0x80) == 0)
          goto LABEL_870;
        if (v830[2] != v831)
        {
          v845 = v841 - 1;
          *v841 = *(v841 - 1);
          v830[1] = (char *)v830[1] + 1;
          if (v841 - 1 != v833)
          {
            v846 = &v832[8 * (_QWORD)v831] - (_BYTE *)v833 - 16;
            v847 = v841 - 1;
            if (v846 < 0x18)
              goto LABEL_1042;
            v848 = (v846 >> 3) + 1;
            v849 = 8 * (v848 & 0x3FFFFFFFFFFFFFFCLL);
            v841 = (uint64_t *)((char *)v841 - v849);
            v847 = &v845[v849 / 0xFFFFFFFFFFFFFFF8];
            v850 = (const float *)(v845 - 4);
            v851 = v848 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1413 = vld2q_f32(v850);
              v852 = (float *)(v850 + 2);
              vst2q_f32(v852, v1413);
              v850 -= 8;
              v851 -= 4;
            }
            while (v851);
            if (v848 != (v848 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1042:
              v853 = (_DWORD *)v841 - 1;
              do
              {
                v854 = *((_DWORD *)v847-- - 2);
                *(v853 - 1) = v854;
                *v853 = *((_DWORD *)v847 + 1);
                v853 -= 2;
              }
              while (v847 != v833);
            }
          }
          *v833 = (uint64_t)v1403;
          goto LABEL_870;
        }
LABEL_1050:
        sub_223EF15B8(v1406, (uint64_t)v830, v833, &v1403);
        goto LABEL_870;
      }
      if (v830[2] == v831)
        goto LABEL_1050;
      *v841 = v751 | v749;
      v830[1] = (char *)v830[1] + 1;
LABEL_870:
      v731 += 12;
      if (v731 == v1337)
      {
        v606 = __p[3];
        v855 = (char *)__p[3] + 24 * HIDWORD(v609);
        v856 = *((_QWORD *)v855 + 1);
        if (v856)
        {
          v857 = *(unsigned int **)v855;
          v858 = *(_QWORD *)v855 + 12 * v856;
          v859 = *(int **)v855;
          do
          {
            if (HIDWORD(v609) >= *v859)
              v860 = *v859;
            else
              v860 = HIDWORD(v609);
            if (HIDWORD(v609) <= *v859)
              v861 = *v859;
            else
              v861 = HIDWORD(v609);
            v862 = &__p[3 * vcvtas_u32_f32(*((float *)v859 + 2)) + 7];
            v863 = v862[1];
            if (v863)
            {
              v864 = (uint64_t)*v862 + 8 * (_QWORD)v863;
              v865 = (unsigned int *)*v862;
              v866 = (unint64_t)v862[1];
              do
              {
                v868 = v866 >> 1;
                v869 = &v865[2 * (v866 >> 1)];
                if (*v869 >= v860)
                  v870 = 1;
                else
                  v870 = -1;
                if (*v869 == v860)
                {
                  v871 = v869[1];
                  v872 = v871 == v861;
                  v870 = v871 >= v861 ? 1 : -1;
                  if (v872)
                    v870 = 0;
                }
                v867 = v869 + 2;
                v866 += ~v868;
                if (v870 < 0)
                  v865 = v867;
                else
                  v866 = v868;
              }
              while (v866);
              if (v865 != (unsigned int *)v864)
              {
                v873 = *v865 == v860;
                if (*v865 <= v860)
                  v874 = 1;
                else
                  v874 = -1;
                if (v873)
                {
                  v875 = v865[1];
                  v876 = v875 == v861;
                  if (v875 <= v861)
                    v877 = 1;
                  else
                    v877 = -1;
                  if (v876)
                    v874 = 0;
                  else
                    v874 = v877;
                }
                if ((v874 & 0x80) == 0)
                {
                  v878 = v865 + 2;
                  if (v865 + 2 != (unsigned int *)v864)
                  {
                    v879 = (_BYTE *)*v862 + 8 * (_QWORD)v863 - (_BYTE *)v865 - 16;
                    if (v879 < 0x38)
                      goto LABEL_1667;
                    v880 = (v879 >> 3) + 1;
                    v881 = 2 * (v880 & 0x3FFFFFFFFFFFFFF8);
                    v882 = &v865[v881];
                    v878 = (unsigned int *)((char *)v878 + v881 * 4);
                    v883 = (__int128 *)(v865 + 10);
                    v884 = v880 & 0x3FFFFFFFFFFFFFF8;
                    do
                    {
                      v885 = *(v883 - 1);
                      v887 = *v883;
                      v886 = v883[1];
                      *(__int128 *)((char *)v883 - 40) = *(v883 - 2);
                      *(__int128 *)((char *)v883 - 24) = v885;
                      *(__int128 *)((char *)v883 - 8) = v887;
                      *(__int128 *)((char *)v883 + 8) = v886;
                      v883 += 4;
                      v884 -= 8;
                    }
                    while (v884);
                    v865 = v882;
                    if (v880 != (v880 & 0x3FFFFFFFFFFFFFF8))
                    {
LABEL_1667:
                      do
                      {
                        *v865 = *v878;
                        v865[1] = v878[1];
                        v878 += 2;
                        v865 += 2;
                      }
                      while (v878 != (unsigned int *)v864);
                    }
                  }
                  v862[1] = (char *)v863 - 1;
                }
              }
            }
            v859 += 3;
          }
          while (v859 != (int *)v858);
          __p[6] = (char *)__p[6] - v856;
          v531 = v1331;
          do
          {
            v888 = (char *)__p[3] + 24 * *v857;
            v889 = *((_QWORD *)v888 + 1);
            if (v889)
            {
              v890 = *(_DWORD **)v888;
              v891 = *(_QWORD *)v888 + 12 * v889;
              v892 = *((_QWORD *)v888 + 1);
              do
              {
                v893 = v892 >> 1;
                v894 = &v890[3 * (v892 >> 1)];
                v896 = *v894;
                v895 = v894 + 3;
                v892 += ~(v892 >> 1);
                if (v896 >= HIDWORD(v609))
                  v892 = v893;
                else
                  v890 = v895;
              }
              while (v892);
              if (v890 != (_DWORD *)v891 && *v890 <= HIDWORD(v609))
              {
                if (v890 + 3 != (_DWORD *)v891)
                {
                  memmove(v890, v890 + 3, v891 - (_QWORD)(v890 + 3));
                  v889 = *((_QWORD *)v888 + 1);
                }
                *((_QWORD *)v888 + 1) = v889 - 1;
              }
            }
            v857 += 3;
          }
          while (v857 != (unsigned int *)v858);
          v606 = __p[3];
        }
        else
        {
          v531 = v1331;
        }
LABEL_705:
        --v531;
        v607 = __p[6];
        v606[3 * HIDWORD(v609) + 1] = 0;
        if (!v607)
          goto LABEL_1111;
        goto LABEL_706;
      }
    }
    v756 = *(uint64_t (***)())v753;
    v762 = *(char **)v753;
LABEL_986:
    if (*((_QWORD *)v753 + 2) != v755)
    {
      *(_DWORD *)v762 = v750;
      *(_QWORD *)&v754[12 * v755 + 4] = *(_QWORD *)&v1406[4];
      ++*((_QWORD *)v753 + 1);
      v756 = (uint64_t (**)())v762;
      goto LABEL_988;
    }
LABEL_1048:
    sub_223EF00F4((char **)v753, (char *)v756, 1, (uint64_t)v1406, &v1403);
    v756 = v1403;
    goto LABEL_988;
  }
LABEL_1111:
  if (v531)
  {
    if (v531 >> 61)
      sub_22316E078();
    v897 = (char *)operator new(8 * v531);
    v898 = &v897[8 * v531];
    v899 = *(_QWORD **)__src;
    v900 = *(_QWORD **)&__src[8];
    if (*(_QWORD *)__src != *(_QWORD *)&__src[8])
      goto LABEL_1114;
  }
  else
  {
    v897 = 0;
    v898 = 0;
    v899 = *(_QWORD **)__src;
    v900 = *(_QWORD **)&__src[8];
    if (*(_QWORD *)__src != *(_QWORD *)&__src[8])
    {
LABEL_1114:
      v901 = 0;
      v902 = (uint64_t)v897;
      v903 = v897;
      v1351 = v900;
      while (1)
      {
        if (v901 == *v899)
        {
          v904 = (char *)__p[0] + 20 * v901;
          if (v903 >= v898)
          {
            v905 = (v903 - v897) >> 3;
            v906 = v905 + 1;
            if ((unint64_t)(v905 + 1) >> 61)
              sub_22316E078();
            if ((v898 - v897) >> 2 > v906)
              v906 = (v898 - v897) >> 2;
            if ((unint64_t)(v898 - v897) >= 0x7FFFFFFFFFFFFFF8)
              v907 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v907 = v906;
            if (v907)
            {
              if (v907 >> 61)
                sub_223174E94();
              v908 = operator new(8 * v907);
              v909 = &v908[8 * v905];
              *(_QWORD *)v909 = v904;
              v902 = (uint64_t)(v909 + 8);
              v910 = v903 - v897;
              if (v903 == v897)
                goto LABEL_1133;
LABEL_1130:
              v911 = v910 - 8;
              if (v911 < 0x168)
              {
                v912 = v903;
                goto LABEL_1132;
              }
              v914 = (v903 - 8 - v897) & 0xFFFFFFFFFFFFFFF8;
              if (&v908[v903 - v897 - 8 - v914] > &v908[v903 - v897 - 8])
              {
                v912 = v903;
                goto LABEL_1132;
              }
              if (&v903[-v914 - 8] > v903 - 8)
              {
                v912 = v903;
                goto LABEL_1132;
              }
              if ((unint64_t)(v897 - v908) < 0x20)
              {
                v912 = v903;
                goto LABEL_1132;
              }
              v915 = (v911 >> 3) + 1;
              v916 = 8 * (v915 & 0x3FFFFFFFFFFFFFFCLL);
              v912 = &v903[-v916];
              v909 -= v916;
              v917 = &v908[8 * v905 - 16];
              v918 = v903 - 16;
              v919 = v915 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v920 = *(_OWORD *)v918;
                *(v917 - 1) = *((_OWORD *)v918 - 1);
                *v917 = v920;
                v917 -= 2;
                v918 -= 32;
                v919 -= 4;
              }
              while (v919);
              if (v915 != (v915 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_1132:
                  v913 = *((_QWORD *)v912 - 1);
                  v912 -= 8;
                  *((_QWORD *)v909 - 1) = v913;
                  v909 -= 8;
                }
                while (v912 != v897);
              }
            }
            else
            {
              v908 = 0;
              v909 = (char *)(8 * v905);
              *(_QWORD *)(8 * v905) = v904;
              v902 = 8 * v905 + 8;
              v910 = v903 - v897;
              if (v903 != v897)
                goto LABEL_1130;
            }
LABEL_1133:
            v898 = &v908[8 * v907];
            if (v897)
              operator delete(v897);
            v897 = v909;
            v903 = (char *)v902;
            v900 = v1351;
            goto LABEL_1116;
          }
          *(_QWORD *)v903 = v904;
          v903 += 8;
          v902 = (uint64_t)v903;
        }
LABEL_1116:
        ++v899;
        ++v901;
        if (v899 == v900)
        {
          v899 = *(_QWORD **)__src;
          if (*(_QWORD *)__src)
            goto LABEL_1147;
          goto LABEL_1148;
        }
      }
    }
  }
  v902 = (uint64_t)v897;
  if (v899)
LABEL_1147:
    operator delete(v899);
LABEL_1148:
  if (v897 != (char *)v902)
  {
    v921 = v897;
    v1352 = v897;
    do
    {
      v923 = *(_OWORD **)v921;
      v924 = *(unsigned int *)(*(_QWORD *)v921 + 16);
      if (v924 < ((char *)v1360 - (_BYTE *)__dst) >> 3)
      {
        v925 = (char **)(v1407.__r_.__value_.__r.__words[0] + 24 * v924);
        v927 = v925 + 1;
        v926 = v925[1];
        v929 = v925 + 2;
        v928 = (unint64_t)v925[2];
        if ((unint64_t)v926 < v928)
        {
          *(_OWORD *)v926 = *v923;
          v922 = v926 + 16;
        }
        else
        {
          v930 = v902;
          v931 = *v925;
          v932 = (v926 - *v925) >> 4;
          v933 = v932 + 1;
          if ((unint64_t)(v932 + 1) >> 60)
            sub_22316E078();
          v934 = v928 - (_QWORD)v931;
          if (v934 >> 3 > v933)
            v933 = v934 >> 3;
          if ((unint64_t)v934 >= 0x7FFFFFFFFFFFFFF0)
            v935 = 0xFFFFFFFFFFFFFFFLL;
          else
            v935 = v933;
          if (v935)
          {
            if (v935 >> 60)
              sub_223174E94();
            v936 = v935;
            v937 = (char *)operator new(16 * v935);
            v935 = v936;
            v897 = v1352;
          }
          else
          {
            v937 = 0;
          }
          v938 = &v937[16 * v932];
          *(_OWORD *)v938 = *v923;
          v939 = v938;
          v902 = v930;
          if (v926 != v931)
          {
            do
            {
              *((_OWORD *)v939 - 1) = *((_OWORD *)v926 - 1);
              v939 -= 16;
              v926 -= 16;
            }
            while (v926 != v931);
            v926 = *v925;
          }
          *v925 = v939;
          v922 = v938 + 16;
          *v927 = v938 + 16;
          *v929 = &v937[16 * v935];
          if (v926)
            operator delete(v926);
        }
        *v927 = v922;
      }
      v921 += 8;
    }
    while (v921 != (char *)v902);
  }
  v1358 = v1407;
  memset(&v1407, 0, sizeof(v1407));
  if (v897)
    operator delete(v897);
  if (v1402)
    operator delete((void *)v1401);
  if (*((_QWORD *)&v1400 + 1))
    operator delete(*((void **)&v1399 + 1));
  if ((_QWORD)v1399)
    operator delete(__p[7]);
  v940 = (void **)__p[3];
  if (__p[3])
  {
    v941 = (void **)__p[4];
    v942 = __p[3];
    if (__p[4] != __p[3])
    {
      do
      {
        if (*(v941 - 1))
          operator delete(*(v941 - 3));
        v941 -= 3;
      }
      while (v941 != v940);
      v942 = __p[3];
    }
    __p[4] = v940;
    operator delete(v942);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v1397[0].i64[0])
    operator delete((void *)v1397[0].i64[0]);
  v943 = (void *)v1407.__r_.__value_.__r.__words[0];
  if (v1407.__r_.__value_.__r.__words[0])
  {
    v944 = v1407.__r_.__value_.__l.__size_;
    if (v1407.__r_.__value_.__l.__size_ != v1407.__r_.__value_.__r.__words[0])
    {
      v945 = v1407.__r_.__value_.__l.__size_;
      do
      {
        v947 = *(void **)(v945 - 24);
        v945 -= 24;
        v946 = v947;
        if (v947)
        {
          *(_QWORD *)(v944 - 16) = v946;
          operator delete(v946);
        }
        v944 = v945;
      }
      while ((void *)v945 != v943);
    }
    operator delete(v943);
  }
  v948 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v948 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&v1407, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    v1407 = *(std::string *)byte_25578BAF8;
  v949 = std::string::append(&v1407, ".", 1uLL);
  v950 = *(_OWORD *)&v949->__r_.__value_.__l.__data_;
  *(_QWORD *)&__src[16] = *((_QWORD *)&v949->__r_.__value_.__l + 2);
  *(_OWORD *)__src = v950;
  v949->__r_.__value_.__l.__size_ = 0;
  v949->__r_.__value_.__r.__words[2] = 0;
  v949->__r_.__value_.__r.__words[0] = 0;
  v951 = std::string::append((std::string *)__src, "SingleShot.DepthMapPlaneDetector", 0x20uLL);
  v952 = *(_OWORD *)&v951->__r_.__value_.__l.__data_;
  __p[2] = (void *)v951->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v952;
  v951->__r_.__value_.__l.__size_ = 0;
  v951->__r_.__value_.__r.__words[2] = 0;
  v951->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v953 = __p;
  else
    v953 = (void **)__p[0];
  strlen((const char *)v953);
  sub_2241471F8();
  v954 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    v955 = a2;
    if ((__src[23] & 0x80000000) == 0)
      goto LABEL_1210;
LABEL_1267:
    operator delete(*(void **)__src);
    if ((SHIBYTE(v1407.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_1211;
    goto LABEL_1268;
  }
  operator delete(__p[0]);
  v955 = a2;
  if ((__src[23] & 0x80000000) != 0)
    goto LABEL_1267;
LABEL_1210:
  if ((SHIBYTE(v1407.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_1211;
LABEL_1268:
  operator delete(v1407.__r_.__value_.__l.__data_);
LABEL_1211:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v954 + 24))(v954))
  {
    v956 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v956 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v954 + 24))(v954))
    {
      v1379[0] = (void *)(uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      v1379[1] = (void *)2;
      v957 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v954 + 24))(v954))
      {
        v1332 = v957;
        LOWORD(v1407.__r_.__value_.__l.__data_) = -1;
        *(_QWORD *)__src = &off_24EC5ABE8;
        sub_22380A870((_DWORD *)(v1324 + 8), &v1407, (uint64_t *)&__src[8]);
        v1345 = v1358.__r_.__value_.__l.__size_;
        v958 = v1358.__r_.__value_.__r.__words[0];
        if (v1358.__r_.__value_.__r.__words[0] != v1358.__r_.__value_.__l.__size_)
        {
          v959 = 0;
          do
          {
            v1353 = v959;
            v1403 = (uint64_t (**)())v959;
            v1404 = v958;
            v960 = *(_DWORD **)v958;
            v961 = *(_DWORD **)(v958 + 8);
            while (v960 != v961)
            {
              v962 = v960[1];
              v963 = v960[2];
              if (v963 >= *v960)
                v964 = v963 - *v960 + 1;
              else
                v964 = 0;
              v965 = v960[3];
              _CF = v965 >= v962;
              v967 = v965 - v962;
              if (_CF)
                v968 = v967 + 1;
              else
                v968 = 0;
              v1386 = *(_QWORD *)v960;
              v1387 = (void *)(v964 | (v968 << 32));
              v1407.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC22278;
              v969 = *(_QWORD *)&__src[8];
              v970 = *(std::__shared_weak_count **)&__src[16];
              if (*(_QWORD *)&__src[16])
              {
                v971 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
                do
                  v972 = __ldxr(v971);
                while (__stxr(v972 + 1, v971));
                do
                  v973 = __ldxr(v971);
                while (__stxr(v973 + 1, v971));
                do
                  v974 = __ldxr(v971);
                while (__stxr(v974 + 1, v971));
                v1407.__r_.__value_.__l.__size_ = v969;
                v1407.__r_.__value_.__r.__words[2] = (std::string::size_type)v970;
                do
                  v975 = __ldxr(v971);
                while (__stxr(v975 + 1, v971));
                do
                  v976 = __ldaxr(v971);
                while (__stlxr(v976 - 1, v971));
                if (!v976)
                {
                  ((void (*)(std::__shared_weak_count *))v970->__on_zero_shared)(v970);
                  std::__shared_weak_count::__release_weak(v970);
                }
              }
              else
              {
                *(_OWORD *)&v1407.__r_.__value_.__r.__words[1] = *(unint64_t *)&__src[8];
              }
              (*(void (**)(_BYTE *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v969 + 64))(v1354, v969, 2);
              v977 = *(_QWORD *)(*(_QWORD *)v1354 + 16);
              *(_OWORD *)v1408 = **(_OWORD **)v1354;
              *(_QWORD *)&v1408[16] = v977;
              *(_QWORD *)v1354 = 0;
              MEMORY[0x227684CE8]();
              v978 = *(_OWORD *)&v1407.__r_.__value_.__r.__words[1];
              if (v1407.__r_.__value_.__r.__words[2])
              {
                v979 = (unint64_t *)(v1407.__r_.__value_.__r.__words[2] + 8);
                do
                  v980 = __ldxr(v979);
                while (__stxr(v980 + 1, v979));
                do
                  v981 = __ldaxr(v979);
                while (__stlxr(v981 - 1, v979));
                if (!v981)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v978 + 1) + 16))(*((_QWORD *)&v978 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v978 + 1));
                }
              }
              v982 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v978 + 104))(v978);
              v983 = v982;
              if ((v982 & 0xFFFFFF) <= 0x10000)
                v983 = 0;
              v984 = v982 & 0xFF00;
              if ((v982 & 0xFF0000) == 0)
                v984 = 0;
              *(_WORD *)&v1408[24] = v984 & 0xFF00 | v983;
              if (v970)
              {
                p_shared_owners = (unint64_t *)&v970->__shared_owners_;
                do
                  v986 = __ldaxr(p_shared_owners);
                while (__stlxr(v986 - 1, p_shared_owners));
                if (!v986)
                {
                  ((void (*)(std::__shared_weak_count *))v970->__on_zero_shared)(v970);
                  std::__shared_weak_count::__release_weak(v970);
                }
                do
                  v987 = __ldaxr(p_shared_owners);
                while (__stlxr(v987 - 1, p_shared_owners));
                if (!v987)
                {
                  ((void (*)(std::__shared_weak_count *))v970->__on_zero_shared)(v970);
                  std::__shared_weak_count::__release_weak(v970);
                }
              }
              v1397[0].i64[0] = (uint64_t)&off_24EC22278;
              sub_223EF2644((uint64_t)&v1407, &v1386, (uint64_t)&v1397[0].i64[1]);
              v988 = (std::__shared_weak_count *)v1407.__r_.__value_.__r.__words[2];
              if (v1407.__r_.__value_.__r.__words[2])
              {
                v989 = (unint64_t *)(v1407.__r_.__value_.__r.__words[2] + 8);
                do
                  v990 = __ldaxr(v989);
                while (__stlxr(v990 - 1, v989));
                if (!v990)
                {
                  ((void (*)(std::__shared_weak_count *))v988->__on_zero_shared)(v988);
                  std::__shared_weak_count::__release_weak(v988);
                }
              }
              sub_223EF1B54((uint64_t)v1397, (unsigned __int16 *)&v1403);
              v991 = (std::__shared_weak_count *)v1397[1].i64[0];
              if (v1397[1].i64[0])
              {
                v992 = (unint64_t *)(v1397[1].i64[0] + 8);
                do
                  v993 = __ldaxr(v992);
                while (__stlxr(v993 - 1, v992));
                if (!v993)
                {
                  ((void (*)(std::__shared_weak_count *))v991->__on_zero_shared)(v991);
                  std::__shared_weak_count::__release_weak(v991);
                }
              }
              v960 += 4;
            }
            v958 += 24;
            v959 = v1353 + 1;
          }
          while (v958 != v1345);
        }
        sub_223EF1D10((uint64_t)__src, ((char *)v1360 - (_BYTE *)__dst) >> 3, (uint64_t)__p);
        v994 = *(std::__shared_weak_count **)&__src[16];
        if (*(_QWORD *)&__src[16])
        {
          v995 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
          do
            v996 = __ldaxr(v995);
          while (__stlxr(v996 - 1, v995));
          if (!v996)
          {
            ((void (*)(std::__shared_weak_count *))v994->__on_zero_shared)(v994);
            std::__shared_weak_count::__release_weak(v994);
          }
        }
        strcpy(__src, "Clusters");
        __src[9] = 0;
        *(_WORD *)&__src[10] = 0;
        *(_DWORD *)&__src[12] = 0;
        *(_DWORD *)&__src[16] = (_DWORD)v1383;
        *(_DWORD *)&__src[19] = *(_DWORD *)((char *)&v1383 + 3);
        *(_WORD *)&__src[23] = 264;
        sub_2231C6C30(__p, (__int128 *)__src, (__int128 *)v1379, v1406);
        v955 = a2;
        if (__src[24] && (__src[23] & 0x80000000) != 0)
          operator delete(*(void **)__src);
        v997 = (std::__shared_weak_count *)__p[2];
        if (__p[2])
        {
          v998 = (unint64_t *)((char *)__p[2] + 8);
          do
            v999 = __ldaxr(v998);
          while (__stlxr(v999 - 1, v998));
          if (!v999)
          {
            ((void (*)(std::__shared_weak_count *))v997->__on_zero_shared)(v997);
            std::__shared_weak_count::__release_weak(v997);
          }
        }
        v1000 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v954 + 56))(v954);
        v1001 = *(void **)v1000;
        v1002 = *(std::__shared_weak_count **)(v1000 + 8);
        if (v1002)
        {
          v1003 = (unint64_t *)&v1002->__shared_owners_;
          do
            v1004 = __ldxr(v1003);
          while (__stxr(v1004 + 1, v1003));
        }
        v1005 = *(_OWORD *)&v1406[8];
        v1407.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v1407.__r_.__value_.__r.__words[1] = *(_OWORD *)&v1406[8];
        *(_OWORD *)&v1406[8] = 0uLL;
        __p[0] = v1001;
        __p[1] = v1002;
        if (v1002)
        {
          v1006 = (unint64_t *)&v1002->__shared_owners_;
          do
            v1007 = __ldxr(v1006);
          while (__stxr(v1007 + 1, v1006));
        }
        __p[2] = &off_24EC6A3B8;
        *(_OWORD *)&__p[3] = v1005;
        if (*((_QWORD *)&v1005 + 1))
        {
          v1008 = (unint64_t *)(*((_QWORD *)&v1005 + 1) + 8);
          do
            v1009 = __ldxr(v1008);
          while (__stxr(v1009 + 1, v1008));
        }
        (*(void (**)(uint64_t *, void **))(*v1332 + 16))(v1332, __p);
        v1010 = (std::__shared_weak_count *)__p[4];
        if (__p[4])
        {
          v1011 = (unint64_t *)((char *)__p[4] + 8);
          do
            v1012 = __ldaxr(v1011);
          while (__stlxr(v1012 - 1, v1011));
          if (!v1012)
          {
            ((void (*)(std::__shared_weak_count *))v1010->__on_zero_shared)(v1010);
            std::__shared_weak_count::__release_weak(v1010);
          }
        }
        v1013 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v1014 = (unint64_t *)((char *)__p[1] + 8);
          do
            v1015 = __ldaxr(v1014);
          while (__stlxr(v1015 - 1, v1014));
          if (!v1015)
          {
            ((void (*)(std::__shared_weak_count *))v1013->__on_zero_shared)(v1013);
            std::__shared_weak_count::__release_weak(v1013);
          }
        }
        v1016 = (std::__shared_weak_count *)v1407.__r_.__value_.__r.__words[2];
        if (v1407.__r_.__value_.__r.__words[2])
        {
          v1017 = (unint64_t *)(v1407.__r_.__value_.__r.__words[2] + 8);
          do
            v1018 = __ldaxr(v1017);
          while (__stlxr(v1018 - 1, v1017));
          if (!v1018)
          {
            ((void (*)(std::__shared_weak_count *))v1016->__on_zero_shared)(v1016);
            std::__shared_weak_count::__release_weak(v1016);
          }
        }
        if (v1002)
        {
          v1019 = (unint64_t *)&v1002->__shared_owners_;
          do
            v1020 = __ldaxr(v1019);
          while (__stlxr(v1020 - 1, v1019));
          if (!v1020)
          {
            ((void (*)(std::__shared_weak_count *))v1002->__on_zero_shared)(v1002);
            std::__shared_weak_count::__release_weak(v1002);
          }
        }
        v1021 = *(std::__shared_weak_count **)&v1406[16];
        if (*(_QWORD *)&v1406[16])
        {
          v1022 = (unint64_t *)(*(_QWORD *)&v1406[16] + 8);
          do
            v1023 = __ldaxr(v1022);
          while (__stlxr(v1023 - 1, v1022));
          if (!v1023)
          {
            ((void (*)(std::__shared_weak_count *))v1021->__on_zero_shared)(v1021);
            std::__shared_weak_count::__release_weak(v1021);
          }
        }
      }
    }
  }
  v1024 = v1369;
  v1025 = v1367;
  v1026 = v1368;
  v1027 = v1318[4].i32[1];
  *(_OWORD *)v1354 = v1318[4].u32[0];
  *(_DWORD *)&v1354[16] = v1027;
  v1355 = 0;
  v1356 = v1318[5];
  v1357 = 1065353216;
  v1395 = *(_QWORD *)(v1324 + 8);
  __p[0] = &off_24EC24788;
  sub_2236B4564(&v1395, (void **)&unk_2246908B2, (uint64_t *)&__p[1]);
  if (__dst == v1360)
  {
    *(_OWORD *)(v1299 + 16) = 0u;
    *(_OWORD *)(v1299 + 32) = 0u;
    *(_OWORD *)v1299 = 0u;
    *(_QWORD *)(v1299 + 48) = &off_24EC24788;
    *(_OWORD *)(v1299 + 56) = *(_OWORD *)&__p[1];
    *(_OWORD *)(v1299 + 72) = *(_OWORD *)&__p[3];
    *(_OWORD *)(v1299 + 88) = *(_OWORD *)&__p[5];
    *(_OWORD *)(v1299 + 104) = *(_OWORD *)&__p[7];
    *(_QWORD *)(v1299 + 120) = v1399;
    *(_WORD *)(v1299 + 128) = WORD4(v1399);
    *(_OWORD *)(v1299 + 168) = 0u;
    *(_OWORD *)(v1299 + 152) = 0u;
    *(_OWORD *)(v1299 + 136) = 0u;
    goto LABEL_1624;
  }
  if (*(_QWORD *)(v955 + 64) == v1395)
  {
    *(_DWORD *)__src = 2139095040;
    sub_2238A4954(v955, (uint64_t)__src);
  }
  else
  {
    LODWORD(v1407.__r_.__value_.__l.__data_) = 2139095040;
    *(_QWORD *)__src = &off_24EC216B8;
    sub_22321B00C(&v1395, &v1407, &__src[8]);
    v1036 = *(_OWORD *)&__src[8];
    *(_QWORD *)&__src[8] = 0;
    *(_QWORD *)&__src[16] = 0;
    v1037 = *(std::__shared_weak_count **)(v955 + 16);
    *(_OWORD *)(v955 + 8) = v1036;
    if (v1037)
    {
      v1038 = (unint64_t *)&v1037->__shared_owners_;
      do
        v1039 = __ldaxr(v1038);
      while (__stlxr(v1039 - 1, v1038));
      if (!v1039)
      {
        ((void (*)(std::__shared_weak_count *))v1037->__on_zero_shared)(v1037);
        std::__shared_weak_count::__release_weak(v1037);
      }
    }
    *(_OWORD *)(v955 + 24) = *(_OWORD *)&__src[24];
    *(_OWORD *)(v955 + 40) = *(_OWORD *)&__src[40];
    v1028 = v1392;
    *(int32x4_t *)(v955 + 56) = v1392;
    v1040 = *(std::__shared_weak_count **)&__src[16];
    *(_QWORD *)(v955 + 72) = v1393;
    *(_WORD *)(v955 + 80) = v1394;
    if (v1040)
    {
      v1041 = (unint64_t *)&v1040->__shared_owners_;
      do
        v1042 = __ldaxr(v1041);
      while (__stlxr(v1042 - 1, v1041));
      if (!v1042)
      {
        ((void (*)(std::__shared_weak_count *))v1040->__on_zero_shared)(v1040);
        std::__shared_weak_count::__release_weak(v1040);
      }
    }
  }
  sub_223EF3C68((uint64_t *)v1324, (float64x2_t ***)&__dst, &v1358, (uint64_t)v1354, (uint64_t)__p, v955, v1028, v1029, v1030, v1031, v1032, v1033, v1034, v1035);
  v1386 = (uint64_t)&v1386;
  v1387 = &v1386;
  v1388 = 0u;
  v1389 = 0u;
  v1043 = (char *)v1360 - (_BYTE *)__dst;
  if (v1360 != __dst)
  {
    if ((unint64_t)v1043 >= 0x2492492492492491)
      sub_22316E078();
    v1044 = v1043 >> 3;
    v1045 = (char *)operator new(56 * (v1043 >> 3));
    v1046 = &v1045[56 * v1044];
    *((_QWORD *)&v1388 + 1) = v1045;
    *((_QWORD *)&v1389 + 1) = v1046;
    do
    {
      *v1045 = 0;
      *(_OWORD *)(v1045 + 8) = xmmword_224690890;
      *((_DWORD *)v1045 + 6) = 1065353216;
      *((_QWORD *)v1045 + 4) = 0;
      *((_QWORD *)v1045 + 5) = 0;
      v1045 += 56;
    }
    while (v1045 != v1046);
    *(_QWORD *)&v1389 = v1046;
  }
  v1390 = operator new();
  v1385 = 0;
  v1383 = 0;
  v1384 = 0;
  v1047 = ((char *)v1360 - (_BYTE *)__dst) >> 3;
  if (v1360 != __dst)
  {
    if ((unint64_t)((char *)v1360 - (_BYTE *)__dst) > 0x5555555555555550)
      sub_22316E078();
    v1383 = operator new(24 * v1047);
    v1384 = (char *)v1383;
    v1385 = (char *)v1383 + 24 * v1047;
  }
  sub_223EF19B8((uint64_t)v1379, v1047);
  v1052 = *(_QWORD *)(v1324 + 8);
  v1053 = HIDWORD(v1052);
  v1333 = v955 + 88;
  v1327 = v1052;
  v1054 = v1052 + 2;
  v1322 = v1053;
  v1055 = v1053 + 2;
  if (*(_DWORD *)(v955 + 152) == v1054 && *(_DWORD *)(v955 + 156) == v1055)
    goto LABEL_1403;
  v1407.__r_.__value_.__r.__words[0] = __PAIR64__(v1055, v1054);
  *(_QWORD *)__src = &off_24EC24788;
  sub_2231F8D1C(&v1407, &__src[8]);
  v1056 = *(_OWORD *)&__src[8];
  *(_QWORD *)&__src[8] = 0;
  *(_QWORD *)&__src[16] = 0;
  v1057 = *(std::__shared_weak_count **)(v955 + 104);
  *(_OWORD *)(v955 + 96) = v1056;
  if (v1057)
  {
    v1058 = (unint64_t *)&v1057->__shared_owners_;
    do
      v1059 = __ldaxr(v1058);
    while (__stlxr(v1059 - 1, v1058));
    if (!v1059)
    {
      ((void (*)(std::__shared_weak_count *))v1057->__on_zero_shared)(v1057);
      std::__shared_weak_count::__release_weak(v1057);
    }
  }
  v1060 = *(_OWORD *)&__src[40];
  *(_OWORD *)(v955 + 112) = *(_OWORD *)&__src[24];
  *(_OWORD *)(v955 + 128) = v1060;
  *(int32x4_t *)(v955 + 144) = v1392;
  v1061 = *(std::__shared_weak_count **)&__src[16];
  *(_QWORD *)(v955 + 160) = v1393;
  *(_WORD *)(v955 + 168) = v1394;
  if (v1061)
  {
    v1062 = (unint64_t *)&v1061->__shared_owners_;
    do
      v1063 = __ldaxr(v1062);
    while (__stlxr(v1063 - 1, v1062));
    if (!v1063)
    {
      ((void (*)(std::__shared_weak_count *))v1061->__on_zero_shared)(v1061);
      std::__shared_weak_count::__release_weak(v1061);
    }
  }
  v1397[0].i64[0] = 0x100000001;
  v1397[0].i64[1] = v1327;
  *(_QWORD *)__src = &off_24EC22138;
  sub_2236B487C(v1333, (uint64_t *)&__src[8]);
  v1407.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC22138;
  sub_2236B4984((uint64_t)__src, v1397, (uint64_t)&v1407.__r_.__value_.__l.__size_);
  v1064 = *(std::__shared_weak_count **)&__src[16];
  if (*(_QWORD *)&__src[16])
  {
    v1065 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
    do
      v1066 = __ldaxr(v1065);
    while (__stlxr(v1066 - 1, v1065));
    if (!v1066)
    {
      ((void (*)(std::__shared_weak_count *))v1064->__on_zero_shared)(v1064);
      std::__shared_weak_count::__release_weak(v1064);
    }
  }
  v1067 = *(_OWORD *)&v1407.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v1407.__r_.__value_.__r.__words[1] = 0uLL;
  v1068 = *(std::__shared_weak_count **)(a2 + 192);
  *(_OWORD *)(a2 + 184) = v1067;
  if (v1068)
  {
    v1069 = (unint64_t *)&v1068->__shared_owners_;
    do
      v1070 = __ldaxr(v1069);
    while (__stlxr(v1070 - 1, v1069));
    if (!v1070)
    {
      ((void (*)(std::__shared_weak_count *))v1068->__on_zero_shared)(v1068);
      std::__shared_weak_count::__release_weak(v1068);
    }
  }
  *(_OWORD *)(a2 + 200) = *(_OWORD *)v1408;
  *(_OWORD *)(a2 + 210) = *(_OWORD *)&v1408[10];
  v1071 = (std::__shared_weak_count *)v1407.__r_.__value_.__r.__words[2];
  if (v1407.__r_.__value_.__r.__words[2])
  {
    v1072 = (unint64_t *)(v1407.__r_.__value_.__r.__words[2] + 8);
    do
      v1073 = __ldaxr(v1072);
    while (__stlxr(v1073 - 1, v1072));
    if (!v1073)
    {
      ((void (*)(std::__shared_weak_count *))v1071->__on_zero_shared)(v1071);
      std::__shared_weak_count::__release_weak(v1071);
    }
  }
  v1074 = *(_QWORD *)(a2 + 152);
  v1397[0].i64[0] = 0;
  v1397[0].i64[1] = v1074 | 0x100000000;
  *(_QWORD *)__src = &off_24EC22138;
  sub_2236B487C(v1333, (uint64_t *)&__src[8]);
  v1407.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC22138;
  sub_2236B4984((uint64_t)__src, v1397, (uint64_t)&v1407.__r_.__value_.__l.__size_);
  v1075 = *(std::__shared_weak_count **)&__src[16];
  if (*(_QWORD *)&__src[16])
  {
    v1076 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
    do
      v1077 = __ldaxr(v1076);
    while (__stlxr(v1077 - 1, v1076));
    if (!v1077)
    {
      ((void (*)(std::__shared_weak_count *))v1075->__on_zero_shared)(v1075);
      std::__shared_weak_count::__release_weak(v1075);
    }
  }
  sub_223EEF8C4((uint64_t)&v1407, (uint64_t)&unk_2246908B3);
  v1078 = v1074 & 0xFFFFFFFF00000000;
  v1079 = (std::__shared_weak_count *)v1407.__r_.__value_.__r.__words[2];
  if (v1407.__r_.__value_.__r.__words[2])
  {
    v1080 = (unint64_t *)(v1407.__r_.__value_.__r.__words[2] + 8);
    do
      v1081 = __ldaxr(v1080);
    while (__stlxr(v1081 - 1, v1080));
    if (!v1081)
    {
      ((void (*)(std::__shared_weak_count *))v1079->__on_zero_shared)(v1079);
      std::__shared_weak_count::__release_weak(v1079);
    }
  }
  *(_QWORD *)v1406 = v1078 - 0x100000000;
  *(_QWORD *)&v1406[8] = v1074 | 0x100000000;
  *(_QWORD *)__src = &off_24EC22138;
  sub_2236B487C(v1333, (uint64_t *)&__src[8]);
  v1397[0].i64[0] = (uint64_t)&off_24EC22138;
  sub_2236B4984((uint64_t)__src, v1406, (uint64_t)&v1397[0].i64[1]);
  v1082 = *(std::__shared_weak_count **)&__src[16];
  if (*(_QWORD *)&__src[16])
  {
    v1083 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
    do
      v1084 = __ldaxr(v1083);
    while (__stlxr(v1084 - 1, v1083));
    if (!v1084)
    {
      ((void (*)(std::__shared_weak_count *))v1082->__on_zero_shared)(v1082);
      std::__shared_weak_count::__release_weak(v1082);
    }
  }
  sub_223EEF8C4((uint64_t)v1397, (uint64_t)&unk_2246908B3);
  v1085 = (std::__shared_weak_count *)v1397[1].i64[0];
  if (v1397[1].i64[0])
  {
    v1086 = (unint64_t *)(v1397[1].i64[0] + 8);
    do
      v1087 = __ldaxr(v1086);
    while (__stlxr(v1087 - 1, v1086));
    if (!v1087)
    {
      ((void (*)(std::__shared_weak_count *))v1085->__on_zero_shared)(v1085);
      std::__shared_weak_count::__release_weak(v1085);
    }
  }
  v1088 = v1078 | 1;
  v1403 = 0;
  v1404 = v1088;
  *(_QWORD *)__src = &off_24EC22138;
  sub_2236B487C(v1333, (uint64_t *)&__src[8]);
  *(_QWORD *)v1406 = &off_24EC22138;
  sub_2236B4984((uint64_t)__src, &v1403, (uint64_t)&v1406[8]);
  v1089 = *(std::__shared_weak_count **)&__src[16];
  if (*(_QWORD *)&__src[16])
  {
    v1090 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
    do
      v1091 = __ldaxr(v1090);
    while (__stlxr(v1091 - 1, v1090));
    if (!v1091)
    {
      ((void (*)(std::__shared_weak_count *))v1089->__on_zero_shared)(v1089);
      std::__shared_weak_count::__release_weak(v1089);
    }
  }
  sub_223EEF8C4((uint64_t)v1406, (uint64_t)&unk_2246908B3);
  v1092 = *(std::__shared_weak_count **)&v1406[16];
  if (*(_QWORD *)&v1406[16])
  {
    v1093 = (unint64_t *)(*(_QWORD *)&v1406[16] + 8);
    do
      v1094 = __ldaxr(v1093);
    while (__stlxr(v1094 - 1, v1093));
    if (!v1094)
    {
      ((void (*)(std::__shared_weak_count *))v1092->__on_zero_shared)(v1092);
      std::__shared_weak_count::__release_weak(v1092);
    }
  }
  v1396[0] = (v1074 - 1);
  v1396[1] = v1088;
  *(_QWORD *)__src = &off_24EC22138;
  sub_2236B487C(v1333, (uint64_t *)&__src[8]);
  v1403 = &off_24EC22138;
  sub_2236B4984((uint64_t)__src, v1396, (uint64_t)&v1404);
  v1095 = *(std::__shared_weak_count **)&__src[16];
  v955 = a2;
  if (*(_QWORD *)&__src[16])
  {
    v1096 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
    do
      v1097 = __ldaxr(v1096);
    while (__stlxr(v1097 - 1, v1096));
    if (!v1097)
    {
      ((void (*)(std::__shared_weak_count *))v1095->__on_zero_shared)(v1095);
      std::__shared_weak_count::__release_weak(v1095);
    }
  }
  sub_223EEF8C4((uint64_t)&v1403, (uint64_t)&unk_2246908B3);
  v1098 = v1405;
  if (!v1405)
    goto LABEL_1403;
  v1099 = (unint64_t *)&v1405->__shared_owners_;
  do
    v1100 = __ldaxr(v1099);
  while (__stlxr(v1100 - 1, v1099));
  if (v1100)
  {
LABEL_1403:
    if (*(_DWORD *)(v955 + 296) == (_DWORD)v1395)
      goto LABEL_1404;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1098->__on_zero_shared)(v1098);
    std::__shared_weak_count::__release_weak(v1098);
    if (*(_DWORD *)(a2 + 296) == (_DWORD)v1395)
    {
LABEL_1404:
      if (*(_DWORD *)(v955 + 300) == HIDWORD(v1395))
        goto LABEL_1417;
    }
  }
  v1407.__r_.__value_.__r.__words[0] = __PAIR64__(v1322, v1327);
  *(_QWORD *)__src = &off_24EC24788;
  sub_2231F8D1C(&v1407, &__src[8]);
  v1101 = *(_OWORD *)&__src[8];
  *(_QWORD *)&__src[8] = 0;
  *(_QWORD *)&__src[16] = 0;
  v1102 = *(std::__shared_weak_count **)(v955 + 248);
  *(_OWORD *)(v955 + 240) = v1101;
  if (v1102)
  {
    v1103 = (unint64_t *)&v1102->__shared_owners_;
    do
      v1104 = __ldaxr(v1103);
    while (__stlxr(v1104 - 1, v1103));
    if (!v1104)
    {
      ((void (*)(std::__shared_weak_count *))v1102->__on_zero_shared)(v1102);
      std::__shared_weak_count::__release_weak(v1102);
    }
  }
  v1048 = *(float32x4_t *)&__src[40];
  *(_OWORD *)(v955 + 256) = *(_OWORD *)&__src[24];
  *(float32x4_t *)(v955 + 272) = v1048;
  *(int32x4_t *)(v955 + 288) = v1392;
  v1105 = *(std::__shared_weak_count **)&__src[16];
  *(_QWORD *)(v955 + 304) = v1393;
  *(_WORD *)(v955 + 312) = v1394;
  if (v1105)
  {
    v1106 = (unint64_t *)&v1105->__shared_owners_;
    do
      v1107 = __ldaxr(v1106);
    while (__stlxr(v1107 - 1, v1106));
    if (!v1107)
    {
      ((void (*)(std::__shared_weak_count *))v1105->__on_zero_shared)(v1105);
      std::__shared_weak_count::__release_weak(v1105);
      if (__dst == v1360)
        goto LABEL_1434;
      goto LABEL_1418;
    }
  }
LABEL_1417:
  if (__dst == v1360)
    goto LABEL_1434;
LABEL_1418:
  if (*(_BYTE *)(v955 + 312) && *(_QWORD *)(a2 + 264))
    (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 240) + 88))(*(_QWORD *)(a2 + 240), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1305");
  v1108 = *(_DWORD *)(a2 + 272);
  if (v1108)
  {
    v1109 = *(_DWORD *)(a2 + 276);
    if (v1109)
    {
      v1110 = v1108 - 1;
      v1111 = *(unsigned int *)(a2 + 280);
      v1112 = *(unsigned int *)(v1313 + 16);
      v1113 = *(BOOL **)(a2 + 264);
      v1114 = *(_BYTE **)v1313;
      v1115 = v1109 - 1;
      if (v1115)
      {
        v1116 = *(unsigned int *)(v1313 + 20);
        v1117 = *(unsigned int *)(a2 + 284);
        if (v1110)
        {
          for (j = 0; j != v1115; ++j)
          {
            v1119 = v1110;
            v1120 = v1113;
            v1121 = v1114;
            do
            {
              *v1120 = *v1121 == 0;
              v1120 += v1111;
              v1121 += v1112;
              --v1119;
            }
            while (v1119);
            *v1120 = *v1121 == 0;
            v1113 += v1117;
            v1114 += v1116;
          }
        }
        else
        {
          do
          {
            *v1113 = *v1114 == 0;
            v1113 += v1117;
            v1114 += v1116;
            --v1115;
          }
          while (v1115);
        }
      }
      for (; v1110; --v1110)
      {
        *v1113 = *v1114 == 0;
        v1113 += v1111;
        v1114 += v1112;
      }
      *v1113 = *v1114 == 0;
    }
  }
LABEL_1434:
  v1122 = (unint64_t **)__dst;
  v1123 = v1360;
  memset(__src, 0, 24);
  v1124 = (char *)v1360 - (_BYTE *)__dst;
  if (v1360 == __dst)
  {
    v1125 = 0;
    v1298 = 0u;
  }
  else
  {
    if (v1124 < 0)
      sub_22316E078();
    *(_QWORD *)__src = operator new((unint64_t)v1124 >> 1);
    *(_QWORD *)&__src[8] = *(_QWORD *)__src;
    *(_QWORD *)&__src[16] = *(_QWORD *)__src + 4 * (v1124 >> 3);
    v1407.__r_.__value_.__r.__words[0] = (std::string::size_type)__src;
    do
    {
      v1397[0].i32[0] = **v1122;
      sub_223EC83A8((uint64_t *)&v1407, v1397);
      ++v1122;
    }
    while (v1122 != v1123);
    v1125 = *(void **)__src;
    v1298 = *(_OWORD *)&__src[8];
    v1122 = (unint64_t **)__dst;
    v1126 = v1360;
    memset(__src, 0, 24);
    v1127 = (char *)v1360 - (_BYTE *)__dst;
    if (v1360 != __dst)
    {
      if ((unint64_t)v1127 >= 0x7FFFFFFFFFFFFFF9)
        sub_22316E078();
      *(_QWORD *)__src = operator new(2 * v1127);
      *(_QWORD *)&__src[8] = *(_QWORD *)__src;
      *(_QWORD *)&__src[16] = *(_QWORD *)__src + 16 * (v1127 >> 3);
      v1397[0].i64[0] = (uint64_t)__src;
      v1128 = a2;
      do
      {
        *(_OWORD *)&v1407.__r_.__value_.__l.__data_ = *((_OWORD *)*v1122 + 4);
        sub_2232E9564((char ***)v1397, &v1407);
        ++v1122;
      }
      while (v1122 != v1126);
      v1129.i32[1] = *(_DWORD *)&__src[4];
      v1297 = *(_OWORD *)__src;
      v1296 = *(_QWORD *)&__src[16];
      v1130 = (float64x2_t **)__dst;
      v1122 = v1360;
      goto LABEL_1445;
    }
  }
  v1296 = 0;
  v1129.i32[1] = 0;
  v1297 = 0u;
  v1130 = (float64x2_t **)v1122;
  v1128 = a2;
LABEL_1445:
  v1050.i64[0] = *(_QWORD *)v1317;
  v1131 = v1050;
  v1131.i32[2] = *(_DWORD *)(v1317 + 8);
  v1051.i64[0] = *(_QWORD *)(v1317 + 16);
  v1132 = v1051;
  v1132.i32[2] = *(_DWORD *)(v1317 + 24);
  v1129.i32[0] = *(_DWORD *)(v1317 + 40);
  v1049.i64[0] = *(_QWORD *)(v1317 + 32);
  v1048.i64[0] = *(_QWORD *)(v1317 + 48);
  v1048.i32[2] = *(_DWORD *)(v1317 + 56);
  memset(&v1407, 0, sizeof(v1407));
  if (v1130 != (float64x2_t **)v1122)
  {
    v1133 = v1130;
    v1346 = 0;
    v1316 = v1025 >> v1024;
    v1314 = v1026 >> v1024;
    v1311 = v1128 + 232;
    v1134 = v1049;
    v1134.i32[2] = v1129.i32[0];
    v1308 = (float32x2_t)vzip1q_s32(v1050, v1051).u64[0];
    v1135 = (float32x4_t)vtrn2q_s32(v1131, v1132);
    v1136 = (float32x2_t)vzip2q_s32(v1131, v1132).u64[0];
    v1137 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1135.f32, 0);
    v1138 = (int8x16_t)vnegq_f32(v1048);
    *(float32x2_t *)v1139.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v1050.i8, *(int32x2_t *)v1051.i8), *(float *)v1138.i32), *(float32x2_t *)v1135.f32, *(float32x2_t *)v1048.f32, 1), v1136, v1048, 2);
    v1140 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1049.i8, 1);
    v1141 = vmls_lane_f32(vmul_f32(*(float32x2_t *)v1049.i8, *(float32x2_t *)v1138.i8), v1140, *(float32x2_t *)v1048.f32, 1);
    v1048 = (float32x4_t)vextq_s8(v1138, v1138, 8uLL);
    *(float32x2_t *)&v1139.u32[2] = vmla_f32(v1141, *(float32x2_t *)v1048.f32, v1129);
    v1306 = v1139;
    v1307 = v1136;
    v1305 = (float32x2_t)vextq_s8(v1137, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1135.f32, 1), 0xCuLL).u64[0];
    v1142 = v1128 + 176;
    v1312 = (_OWORD *)(v1128 + 208);
    v1310 = (uint64_t)(v1298 - (_QWORD)v1125) >> 2;
    v1143 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1134.i8, 1);
    v1309 = *(float32x2_t *)v1134.i8;
    v1144 = (float32x4_t)vextq_s8(v1134, v1134, 8uLL);
    v1304 = v1144;
    v1319 = v1125;
    v1303 = (char *)v1122;
    while (1)
    {
      v1338 = v1133;
      v1146 = (*v1133)[11].f64[1];
      v1147 = (*v1133)[12].f64[0];
      *(float *)&v1146 = v1146;
      v1137.i32[0] = v1355;
      v1048.i64[0] = *(_QWORD *)&v1354[12];
      v1048.i32[2] = v1355;
      v1140.i32[0] = v1357;
      *(float32x2_t *)v1135.f32 = v1356;
      v1148 = (float32x4_t)vzip1q_s32(*(int32x4_t *)v1354, (int32x4_t)v1048);
      v1148.i32[2] = v1356.i32[0];
      v1149 = (float32x4_t)vtrn2q_s32(*(int32x4_t *)v1354, (int32x4_t)v1048);
      v1149.i32[2] = v1356.i32[1];
      v1135.i32[2] = v1357;
      *(float *)&v1147 = v1147;
      v1150 = (*v1133)[3].f64[0];
      _Q20 = (*v1133)[2];
      _D18 = vcvtq_f64_f32(vadd_f32(v1356, vmla_n_f32(vmul_n_f32(*(float32x2_t *)v1354, *(float *)&v1146), *(float32x2_t *)(v1354 + 12), *(float *)&v1147))).f64[1];
      __asm { FMLA            D21, D18, V20.D[1] }
      v1156 = (*v1133)[1].f64[1]
            / vmlad_n_f64(_D21, v1150, vcvtq_f64_f32(vadd_f32(v1140, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v1354, *(int8x16_t *)v1354, 8uLL), *(float32x2_t *)&v1146), *(float32x2_t *)&v1147, *(float32x2_t *)v1137.i8))).f64[0]);
      v1157 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)v1354, v1156);
      v1158 = (int8x16_t)vmulq_n_f32(v1048, v1156);
      v1159 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v1157.i8, *(float *)&v1146), *(float32x2_t *)v1158.i8, *(float *)&v1147);
      *(float32x2_t *)v1157.i8 = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v1157, v1157, 8uLL), *(float32x2_t *)&v1146), *(float32x2_t *)&v1147, (float32x2_t)*(_OWORD *)&vextq_s8(v1158, v1158, 8uLL));
      v1160 = (int8x16_t)vmulq_n_f32(v1135, v1156);
      *(float32x2_t *)v1158.i8 = vadd_f32(*(float32x2_t *)v1160.i8, v1159);
      *(float32x2_t *)v1160.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v1160, v1160, 8uLL), *(float32x2_t *)v1157.i8);
      v1161 = (int8x16_t)vmulq_n_f32(v1148, v1156);
      v1162 = (int8x16_t)vmulq_n_f32(v1149, v1156);
      *(float32x2_t *)v1161.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v1161, v1161, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)&v1146, *(float32x2_t *)v1161.i8), *(float32x2_t *)&v1147, *(float32x2_t *)v1161.i8, 1));
      *(float32x2_t *)v1149.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v1161.i8, *(float32x2_t *)v1158.i8), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v1162, v1162, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)&v1146, *(float32x2_t *)v1162.i8), *(float32x2_t *)&v1147, *(float32x2_t *)v1162.i8, 1)), *(float32x2_t *)v1158.i8, 1);
      v1158.i64[1] = v1160.i64[0];
      *(float *)v1161.i32 = v1150;
      v1397[0].i64[0] = v1158.i64[0];
      *(float32x2_t *)((char *)&v1397[0].u64[1] + 4) = vcvt_f32_f64(_Q20);
      v1397[0].i32[2] = v1160.i32[0];
      v1397[1].i32[1] = v1161.i32[0];
      v1163 = (float32x4_t)vzip2q_s32(*(int32x4_t *)v1354, (int32x4_t)v1048);
      v1163.i32[2] = v1357;
      v1164 = (int8x16_t)vmulq_n_f32(v1163, v1156);
      v1165 = (int8x16_t)vmulq_n_f32((float32x4_t)v1158, 1.0/ sqrtf(vmla_f32(*(float32x2_t *)v1149.f32, *(float32x2_t *)v1160.i8, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v1164, v1164, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)&v1146, *(float32x2_t *)v1164.i8), *(float32x2_t *)&v1147, *(float32x2_t *)v1164.i8, 1))).f32[0]));
      v1144.i64[0] = *(uint64_t *)((char *)&v1397[0].i64[1] + 4);
      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)((char *)&v1397[0].u64[1] + 4), *(float32x2_t *)v1165.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1165.i8, 1), *(float32x2_t *)((char *)&v1397[0].u64[1] + 4), 1), (float32x2_t)*(_OWORD *)&vextq_s8(v1165, v1165, 8uLL), *(float32x2_t *)v1161.i8).f32[0] > 0.0)
      {
        v1144.f32[2] = v1150;
        v1166 = vnegq_f32(v1144);
        v1397[1].i32[1] = v1166.i32[2];
        *(uint64_t *)((char *)&v1397[0].i64[1] + 4) = v1166.i64[0];
      }
      LODWORD(v1396[0]) = 0;
      v1167 = *(_QWORD *)(v1128 + 184);
      if (!v1167)
        goto LABEL_1468;
      v1168 = *(std::__shared_weak_count **)(v1128 + 192);
      if (!v1168)
        break;
      v1169 = (unint64_t *)&v1168->__shared_owners_;
      do
        v1170 = __ldxr(v1169);
      while (__stxr(v1170 + 1, v1169));
      do
        v1171 = __ldaxr(v1169);
      while (__stlxr(v1171 - 1, v1169));
      if (v1171)
      {
        v1167 = *(_QWORD *)(v1128 + 184);
        v1172 = *(std::__shared_weak_count **)(v1128 + 192);
        if (!v1172)
          break;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v1168->__on_zero_shared)(v1168);
        std::__shared_weak_count::__release_weak(v1168);
        v1167 = *(_QWORD *)(v1128 + 184);
        v1172 = *(std::__shared_weak_count **)(v1128 + 192);
        if (!v1172)
          break;
      }
      v1173 = (unint64_t *)&v1172->__shared_owners_;
      do
        v1174 = __ldxr(v1173);
      while (__stxr(v1174 + 1, v1173));
      do
        v1175 = __ldaxr(v1173);
      while (__stlxr(v1175 - 1, v1173));
      if (v1175)
        break;
      ((void (*)(std::__shared_weak_count *))v1172->__on_zero_shared)(v1172);
      std::__shared_weak_count::__release_weak(v1172);
      if (*(_BYTE *)(v1128 + 225))
      {
LABEL_1465:
        (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)v1167 + 96))(&v1403, v1167, 1);
        *(_QWORD *)__src = v1142;
        *(_QWORD *)&__src[8] = v1396;
        if (*(_DWORD *)(v1128 + 216) == 1)
          goto LABEL_1466;
        goto LABEL_1469;
      }
LABEL_1468:
      v1403 = 0;
      *(_QWORD *)__src = v1142;
      *(_QWORD *)&__src[8] = v1396;
      if (*(_DWORD *)(v1128 + 216) == 1)
      {
LABEL_1466:
        sub_223EF3060(__src);
        goto LABEL_1472;
      }
LABEL_1469:
      *(_QWORD *)v1406 = v1396;
      if (*(_DWORD *)(v1128 + 208) && *(_DWORD *)(v1128 + 212))
        sub_223EF321C((uint64_t)v1406, v1142);
LABEL_1472:
      v1176 = v1403;
      v1403 = 0;
      if (v1176)
        (*((void (**)(uint64_t (**)()))*v1176 + 1))(v1176);
      v1177 = v1358.__r_.__value_.__r.__words[0];
      v1178 = v1358.__r_.__value_.__r.__words[0] + 24 * v1346;
      v1180 = *(_DWORD **)v1178;
      v1179 = *(_DWORD **)(v1178 + 8);
      if (*(_DWORD **)v1178 == v1179)
      {
        *(_QWORD *)__src = &off_24EC21420;
        v1181 = *(_QWORD *)(v1128 + 184);
        v1182 = *(std::__shared_weak_count **)(v1128 + 192);
        v1183 = v1297;
        v1125 = v1319;
        if (!v1182)
          goto LABEL_1569;
        goto LABEL_1476;
      }
      do
      {
        v1192 = v1180[1];
        v1193 = v1180[2];
        if (v1193 >= *v1180)
          v1194 = v1193 - *v1180 + 1;
        else
          v1194 = 0;
        v1195 = v1180[3];
        _CF = v1195 >= v1192;
        v1196 = v1195 - v1192;
        if (_CF)
          v1197 = v1196 + 1;
        else
          v1197 = 0;
        *(_QWORD *)v1406 = *(_QWORD *)v1180;
        *(_QWORD *)&v1406[8] = v1194 | (v1197 << 32);
        *(_QWORD *)__src = &off_24EC22138;
        sub_2236B4984(v1142, v1406, (uint64_t)&__src[8]);
        v1198 = *(_QWORD *)&__src[8];
        if (!*(_QWORD *)&__src[8])
          goto LABEL_1538;
        v1199 = *(std::__shared_weak_count **)&__src[16];
        if (!*(_QWORD *)&__src[16])
          goto LABEL_1509;
        v1200 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
        do
          v1201 = __ldxr(v1200);
        while (__stxr(v1201 + 1, v1200));
        do
          v1202 = __ldaxr(v1200);
        while (__stlxr(v1202 - 1, v1200));
        if (v1202)
        {
          v1203 = *(std::__shared_weak_count **)&__src[16];
          v1198 = *(_QWORD *)&__src[8];
          if (!*(_QWORD *)&__src[16])
            goto LABEL_1509;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v1199->__on_zero_shared)(v1199);
          std::__shared_weak_count::__release_weak(v1199);
          v1203 = *(std::__shared_weak_count **)&__src[16];
          v1198 = *(_QWORD *)&__src[8];
          if (!*(_QWORD *)&__src[16])
            goto LABEL_1509;
        }
        v1204 = (unint64_t *)&v1203->__shared_owners_;
        do
          v1205 = __ldxr(v1204);
        while (__stxr(v1205 + 1, v1204));
        do
          v1206 = __ldaxr(v1204);
        while (__stlxr(v1206 - 1, v1204));
        if (v1206)
        {
LABEL_1509:
          if (__src[49])
            goto LABEL_1510;
          goto LABEL_1538;
        }
        ((void (*)(std::__shared_weak_count *))v1203->__on_zero_shared)(v1203);
        std::__shared_weak_count::__release_weak(v1203);
        if (__src[49])
        {
LABEL_1510:
          (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)v1198 + 96))(&v1403, v1198, 1);
          v1207 = *(unsigned int *)&__src[40];
          if (*(_DWORD *)&__src[40] != 1)
            goto LABEL_1539;
          goto LABEL_1511;
        }
LABEL_1538:
        v1403 = 0;
        v1207 = *(unsigned int *)&__src[40];
        if (*(_DWORD *)&__src[40] != 1)
        {
LABEL_1539:
          v1226 = *(_DWORD *)&__src[32];
          if (*(_DWORD *)&__src[32])
          {
            v1227 = *(_DWORD *)&__src[36];
            if (*(_DWORD *)&__src[36])
            {
              v1228 = *(unsigned int *)&__src[44];
              v1229 = *(_BYTE **)&__src[24];
              if (__src[48] && *(_QWORD *)&__src[24])
              {
                v1230 = *(_QWORD *)&__src[8];
                v1231 = *(std::__shared_weak_count **)&__src[16];
                if (*(_QWORD *)&__src[16])
                {
                  v1232 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
                  do
                    v1233 = __ldxr(v1232);
                  while (__stxr(v1233 + 1, v1232));
                  do
                    v1234 = __ldaxr(v1232);
                  while (__stlxr(v1234 - 1, v1232));
                  if (!v1234)
                  {
                    ((void (*)(std::__shared_weak_count *))v1231->__on_zero_shared)(v1231);
                    std::__shared_weak_count::__release_weak(v1231);
                  }
                }
                (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v1230 + 88))(v1230, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                v1229 = *(_BYTE **)&__src[24];
                v1128 = a2;
              }
              v1235 = v1226 - 1;
              v1236 = v1227 - 1;
              if (v1227 != 1)
              {
                if (v1226 == 1)
                {
                  do
                  {
                    *v1229 = -1;
                    v1229 += v1228;
                    --v1236;
                  }
                  while (v1236);
                }
                else
                {
                  v1237 = 0;
                  do
                  {
                    v1238 = v1226 - 1;
                    v1239 = v1229;
                    do
                    {
                      *v1239 = -1;
                      v1239 += v1207;
                      --v1238;
                    }
                    while (v1238);
                    *v1239 = -1;
                    v1229 += v1228;
                    ++v1237;
                  }
                  while (v1237 != v1236);
                }
              }
              if (v1226 != 1)
              {
                do
                {
                  *v1229 = -1;
                  v1229 += v1207;
                  --v1235;
                }
                while (v1235);
              }
              *v1229 = -1;
            }
          }
          goto LABEL_1561;
        }
LABEL_1511:
        v1208 = *(unsigned int *)&__src[44];
        v1209 = *(unsigned int *)&__src[32];
        if (*(_DWORD *)&__src[44] == *(_DWORD *)&__src[32])
        {
          v1210 = *(_DWORD *)&__src[36];
          v1211 = *(void **)&__src[24];
          if (__src[48] && *(_QWORD *)&__src[24])
          {
            v1212 = *(_QWORD *)&__src[8];
            v1213 = *(std::__shared_weak_count **)&__src[16];
            if (*(_QWORD *)&__src[16])
            {
              v1214 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
              do
                v1215 = __ldxr(v1214);
              while (__stxr(v1215 + 1, v1214));
              do
                v1216 = __ldaxr(v1214);
              while (__stlxr(v1216 - 1, v1214));
              if (!v1216)
              {
                ((void (*)(std::__shared_weak_count *))v1213->__on_zero_shared)(v1213);
                std::__shared_weak_count::__release_weak(v1213);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v1212 + 88))(v1212, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v1211 = *(void **)&__src[24];
          }
          v1217 = (v1210 * v1208);
LABEL_1536:
          memset(v1211, 255, v1217);
          v1128 = a2;
          goto LABEL_1561;
        }
        if (*(_DWORD *)&__src[32])
        {
          v1218 = *(_DWORD *)&__src[36];
          if (*(_DWORD *)&__src[36])
          {
            v1219 = *(char **)&__src[24];
            if (__src[48] && *(_QWORD *)&__src[24])
            {
              v1220 = *(_QWORD *)&__src[8];
              v1221 = *(std::__shared_weak_count **)&__src[16];
              if (*(_QWORD *)&__src[16])
              {
                v1222 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
                do
                  v1223 = __ldxr(v1222);
                while (__stxr(v1223 + 1, v1222));
                do
                  v1224 = __ldaxr(v1222);
                while (__stlxr(v1224 - 1, v1222));
                if (!v1224)
                {
                  ((void (*)(std::__shared_weak_count *))v1221->__on_zero_shared)(v1221);
                  std::__shared_weak_count::__release_weak(v1221);
                }
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v1220 + 88))(v1220, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v1219 = *(char **)&__src[24];
            }
            v1225 = v1218 - 1;
            if (v1218 != 1)
            {
              do
              {
                memset(v1219, 255, v1209);
                v1219 += v1208;
                --v1225;
              }
              while (v1225);
            }
            v1211 = v1219;
            v1217 = v1209;
            goto LABEL_1536;
          }
        }
LABEL_1561:
        v1240 = v1403;
        v1403 = 0;
        if (v1240)
          (*((void (**)(uint64_t (**)()))*v1240 + 1))(v1240);
        v1241 = *(std::__shared_weak_count **)&__src[16];
        if (*(_QWORD *)&__src[16])
        {
          v1242 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
          do
            v1243 = __ldaxr(v1242);
          while (__stlxr(v1243 - 1, v1242));
          if (!v1243)
          {
            ((void (*)(std::__shared_weak_count *))v1241->__on_zero_shared)(v1241);
            std::__shared_weak_count::__release_weak(v1241);
          }
        }
        v1180 += 4;
      }
      while (v1180 != v1179);
      v1177 = v1358.__r_.__value_.__r.__words[0];
      *(_QWORD *)__src = &off_24EC21420;
      v1181 = *(_QWORD *)(v1128 + 184);
      v1182 = *(std::__shared_weak_count **)(v1128 + 192);
      v1183 = v1297;
      v1125 = v1319;
      if (!v1182)
      {
LABEL_1569:
        v1244 = *(_WORD *)(v1128 + 224);
        v1245 = *(_QWORD *)(v1128 + 200);
        *(_QWORD *)&__src[8] = v1181;
        *(_QWORD *)&__src[16] = 0;
        *(_QWORD *)&__src[24] = v1245;
        *(_OWORD *)&__src[32] = *v1312;
        *(_WORD *)&__src[48] = v1244;
        goto LABEL_1570;
      }
LABEL_1476:
      v1184 = (unint64_t *)&v1182->__shared_owners_;
      do
        v1185 = __ldxr(v1184);
      while (__stxr(v1185 + 1, v1184));
      v1186 = *(_WORD *)(a2 + 224);
      do
        v1187 = __ldxr(v1184);
      while (__stxr(v1187 + 1, v1184));
      v1188 = *(_QWORD *)(a2 + 200);
      *(_OWORD *)&__src[32] = *v1312;
      do
        v1189 = __ldxr(v1184);
      while (__stxr(v1189 + 1, v1184));
      *(_QWORD *)&__src[8] = v1181;
      *(_QWORD *)&__src[16] = v1182;
      *(_QWORD *)&__src[24] = v1188;
      *(_WORD *)&__src[48] = v1186;
      do
        v1190 = __ldaxr(v1184);
      while (__stlxr(v1190 - 1, v1184));
      if (!v1190)
      {
        ((void (*)(std::__shared_weak_count *))v1182->__on_zero_shared)(v1182);
        std::__shared_weak_count::__release_weak(v1182);
      }
      do
        v1191 = __ldaxr(v1184);
      while (__stlxr(v1191 - 1, v1184));
      v1128 = a2;
      if (!v1191)
      {
        ((void (*)(std::__shared_weak_count *))v1182->__on_zero_shared)(v1182);
        std::__shared_weak_count::__release_weak(v1182);
      }
LABEL_1570:
      sub_223EF35E0((unsigned int **)(v1177 + 24 * v1346), (int *)__src, v1327, v1322, v1316, v1314, (int8x16_t **)&v1407);
      v1253 = *(std::__shared_weak_count **)&__src[16];
      if (*(_QWORD *)&__src[16])
      {
        v1254 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
        do
          v1255 = __ldaxr(v1254);
        while (__stlxr(v1255 - 1, v1254));
        if (!v1255)
        {
          ((void (*)(std::__shared_weak_count *))v1253->__on_zero_shared)(v1253);
          std::__shared_weak_count::__release_weak(v1253);
        }
      }
      v1257 = v1407.__r_.__value_.__l.__size_;
      for (k = (int *)v1407.__r_.__value_.__r.__words[0];
            k != (int *)v1257;
            *(_BYTE *)(*(_QWORD *)(v1128 + 200)
                     + (*(_DWORD *)(v1128 + 216) * v1258 + *(_DWORD *)(v1128 + 220) * v1259)) = -1)
      {
        v1258 = *k;
        v1259 = k[1];
        k += 2;
      }
      sub_223EF51BC(v1324, v1320, (uint64_t)v1397, (uint64_t)v1354, v1346, &v1386, &v1407, (uint64_t)__p, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1128, v1333, v1311, v1310,
        (uint64_t)v1125,
        (int *)(v1183 + 16 * v1346),
        v1323);
      v1135.i32[3] = v1304.i32[3];
      v1137.i32[1] = v1305.i32[1];
      *(float32x2_t *)v1048.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v1308, v1397[0].f32[0]), v1305, *(float32x2_t *)v1397[0].f32, 1), v1307, v1397[0], 2);
      v1140.i32[1] = v1309.i32[1];
      *(float32x2_t *)&v1048.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v1309, *(float32x2_t *)v1397[0].f32), v1143, *(float32x2_t *)v1397[0].f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v1397[0], (int8x16_t)v1397[0], 8uLL), *(float32x2_t *)v1304.f32);
      v1144.i32[3] = v1306.i32[3];
      v1260 = vaddq_f32(v1048, v1306);
      v1048.i32[0] = v1397[1].i32[1];
      *(float32x2_t *)&v1261 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v1308, v1397[0].f32[3]), v1305, *(float32x2_t *)((char *)&v1397[0].u64[1] + 4), 1), v1307, v1397[1].f32[1]);
      *(float32x2_t *)v1049.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v1309, *(float32x2_t *)((char *)&v1397[0].u64[1] + 4)), v1143, *(float32x2_t *)((char *)&v1397[0].u64[1] + 4), 1), *(float32x2_t *)v1048.f32, *(float32x2_t *)v1304.f32);
      *((_QWORD *)&v1261 + 1) = v1049.i64[0];
      v1262 = v1384;
      if (v1384 < v1385)
      {
        *((_DWORD *)v1384 + 2) = v1260.i32[2];
        *(_QWORD *)v1262 = v1260.i64[0];
        *((_DWORD *)v1262 + 5) = v1049.i32[0];
        *(_QWORD *)(v1262 + 12) = v1261;
        v1145 = v1262 + 24;
      }
      else
      {
        v1263 = (char *)v1383;
        v1264 = 0xAAAAAAAAAAAAAAABLL * ((v1384 - (_BYTE *)v1383) >> 3);
        v1265 = v1264 + 1;
        if (v1264 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_22316E078();
        v1301 = v1260;
        v1302 = v1261;
        if (0x5555555555555556 * ((v1385 - (_BYTE *)v1383) >> 3) > v1265)
          v1265 = 0x5555555555555556 * ((v1385 - (_BYTE *)v1383) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v1385 - (_BYTE *)v1383) >> 3) >= 0x555555555555555)
          v1266 = 0xAAAAAAAAAAAAAAALL;
        else
          v1266 = v1265;
        if (v1266 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v1267 = (char *)operator new(24 * v1266);
        v1268 = &v1267[24 * v1264];
        *((_DWORD *)v1268 + 2) = v1301.i32[2];
        *(_QWORD *)v1268 = v1301.i64[0];
        v1144.i32[3] = HIDWORD(v1302);
        *(_QWORD *)(v1268 + 12) = v1302;
        *((_DWORD *)v1268 + 5) = DWORD2(v1302);
        v1269 = v1268;
        if (v1262 != v1263)
        {
          do
          {
            v1270 = *((_QWORD *)v1262 - 3);
            v1262 -= 24;
            v1271 = *((_DWORD *)v1262 + 2);
            *((_QWORD *)v1269 - 3) = v1270;
            v1269 -= 24;
            *((_DWORD *)v1269 + 2) = v1271;
            v1272 = *(_QWORD *)(v1262 + 12);
            *((_DWORD *)v1269 + 5) = *((_DWORD *)v1262 + 5);
            *(_QWORD *)(v1269 + 12) = v1272;
          }
          while (v1262 != v1263);
          v1262 = v1263;
        }
        v1145 = v1268 + 24;
        v1383 = v1269;
        v1384 = v1268 + 24;
        v1385 = &v1267[24 * v1266];
        if (v1262)
          operator delete(v1262);
        v1128 = a2;
      }
      v1384 = v1145;
      v1133 = v1338 + 1;
      ++v1346;
      if (v1338 + 1 == (float64x2_t **)v1303)
        goto LABEL_1591;
    }
    if (*(_BYTE *)(v1128 + 225))
      goto LABEL_1465;
    goto LABEL_1468;
  }
LABEL_1591:
  if (v1379[0])
  {
    v1379[1] = v1379[0];
    operator delete(v1379[0]);
  }
  *(_OWORD *)v1379 = v1297;
  v1380 = v1296;
  if (v1381)
  {
    *(_QWORD *)&v1382 = v1381;
    operator delete(v1381);
  }
  v1381 = v1125;
  v1382 = v1298;
  sub_223EF619C(&__dst, *(double *)&v1298, *(double *)v1048.i64, *(double *)v1049.i64, (uint64_t)v1354, &v1386);
  sub_223EF6610((uint64_t)&v1386, (uint64_t *)&__dst, &v1383, (uint64_t)__p, v1379, v1299);
  if (v1407.__r_.__value_.__r.__words[0])
  {
    v1407.__r_.__value_.__l.__size_ = v1407.__r_.__value_.__r.__words[0];
    operator delete(v1407.__r_.__value_.__l.__data_);
  }
  if (v1381)
  {
    *(_QWORD *)&v1382 = v1381;
    operator delete(v1381);
  }
  if (v1379[0])
  {
    v1379[1] = v1379[0];
    operator delete(v1379[0]);
  }
  if (v1383)
  {
    v1384 = (char *)v1383;
    operator delete(v1383);
  }
  if (v1390)
    MEMORY[0x227684CE8](v1390, 0xC400A2AC0F1);
  v1273 = *((_QWORD *)&v1388 + 1);
  if (*((_QWORD *)&v1388 + 1))
  {
    v1274 = v1389;
    v1275 = (void *)*((_QWORD *)&v1388 + 1);
    if ((_QWORD)v1389 != *((_QWORD *)&v1388 + 1))
    {
      do
      {
        v1276 = *(_QWORD **)(v1274 - 16);
        if (v1276)
        {
          v1277 = (_QWORD *)v1276[*(_QWORD *)(v1274 - 48)];
          if (v1277)
          {
            do
            {
              v1278 = (_QWORD *)*v1277;
              operator delete(v1277);
              v1277 = v1278;
            }
            while (v1278);
            v1276 = *(_QWORD **)(v1274 - 16);
          }
          operator delete(v1276);
          *(_QWORD *)(v1274 - 40) = 0;
          *(_QWORD *)(v1274 - 24) = 0;
          *(_QWORD *)(v1274 - 16) = 0;
        }
        v1274 -= 56;
      }
      while (v1274 != v1273);
      v1275 = (void *)*((_QWORD *)&v1388 + 1);
    }
    *(_QWORD *)&v1389 = v1273;
    operator delete(v1275);
  }
  if ((_QWORD)v1388)
  {
    v1279 = (uint64_t *)v1387;
    v1280 = v1386;
    v1281 = *(_QWORD *)v1387;
    *(_QWORD *)(v1281 + 8) = *(_QWORD *)(v1386 + 8);
    **(_QWORD **)(v1280 + 8) = v1281;
    *(_QWORD *)&v1388 = 0;
    if (v1279 != &v1386)
    {
      do
      {
        v1282 = (uint64_t *)v1279[1];
        operator delete(v1279);
        v1279 = v1282;
      }
      while (v1282 != &v1386);
    }
  }
  v1283 = (std::__shared_weak_count *)__p[2];
  if (__p[2])
  {
    v1284 = (unint64_t *)((char *)__p[2] + 8);
    do
      v1285 = __ldaxr(v1284);
    while (__stlxr(v1285 - 1, v1284));
    if (!v1285)
    {
      ((void (*)(std::__shared_weak_count *))v1283->__on_zero_shared)(v1283);
      std::__shared_weak_count::__release_weak(v1283);
    }
  }
LABEL_1624:
  v1286 = v1358.__r_.__value_.__r.__words[0];
  if (v1358.__r_.__value_.__r.__words[0])
  {
    v1287 = v1358.__r_.__value_.__l.__size_;
    v1288 = (void *)v1358.__r_.__value_.__r.__words[0];
    if (v1358.__r_.__value_.__l.__size_ != v1358.__r_.__value_.__r.__words[0])
    {
      v1289 = v1358.__r_.__value_.__l.__size_;
      do
      {
        v1291 = *(void **)(v1289 - 24);
        v1289 -= 24;
        v1290 = v1291;
        if (v1291)
        {
          *(_QWORD *)(v1287 - 16) = v1290;
          operator delete(v1290);
        }
        v1287 = v1289;
      }
      while (v1289 != v1286);
      v1288 = (void *)v1358.__r_.__value_.__r.__words[0];
    }
    v1358.__r_.__value_.__l.__size_ = v1286;
    operator delete(v1288);
  }
  if (__dst)
  {
    v1360 = (unint64_t **)__dst;
    operator delete(__dst);
  }
  v1292 = (void **)v1362;
  if (v1362)
  {
    v1293 = (void **)v1363;
    v1294 = v1362;
    if (v1363 != v1362)
    {
      do
      {
        if (*(v1293 - 1))
          operator delete(*(v1293 - 3));
        v1293 -= 3;
      }
      while (v1293 != v1292);
      v1294 = v1362;
    }
    v1363 = (unsigned int **)v1292;
    operator delete(v1294);
  }
  sub_223EF16F8((uint64_t)v1366);
  return (*(uint64_t (**)(_QWORD *))(*v1300 + 8))(v1300);
}

void sub_223EEF064()
{
  void *v0;
  uint64_t v1;

  if (STACK[0x3C0])
    operator delete((void *)STACK[0x3C0]);
  sub_223EF1508((uint64_t)&v1);
  if (v0)
    operator delete(v0);
  JUMPOUT(0x223EEF760);
}

void sub_223EEF574()
{
  unint64_t v0;

  v0 = STACK[0x500];
  STACK[0x500] = 0;
  if (v0)
    (*(void (**)(unint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x223EEF71CLL);
}

void sub_223EEF598()
{
  sub_2231BEEB4((uint64_t)&STACK[0x3C0]);
  JUMPOUT(0x223EEF5ACLL);
}

void sub_223EEF5B4()
{
  void *v0;

  v0 = (void *)STACK[0x3C0];
  if (STACK[0x3C0])
  {
    STACK[0x3C8] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x223EEF734);
}

void sub_223EEF5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;

  v58 = *(std::__shared_weak_count **)(v57 - 192);
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  sub_223167354(a57);
  JUMPOUT(0x223EEF760);
}

void **sub_223EEF7B8(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 1))
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_223EEF828(_QWORD *a1)
{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  v2[13] = 0u;
  v2[14] = 0u;
  v2[15] = 0u;
  v2[16] = 0u;
  v2[17] = 0u;
  v2[18] = 0u;
  v2[19] = 0u;
  sub_223EF3378((uint64_t)v2);
  *a1 = v2;
  a1[1] = sub_223EF34C8;
  return a1;
}

void sub_223EEF8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F0C40324C8FB7);
  _Unwind_Resume(a1);
}

uint64_t sub_223EEF8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_19;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_25;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_25;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_25:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_19:
    v14 = 0;
    v15 = a1;
    v16 = a2;
    if (*(_DWORD *)(a1 + 40) != 1)
      goto LABEL_15;
LABEL_20:
    sub_223EEFA40(&v15);
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_19;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v14, v4, 1);
  v15 = a1;
  v16 = a2;
  if (*(_DWORD *)(a1 + 40) == 1)
    goto LABEL_20;
LABEL_15:
  v17 = a2;
  if (*(_DWORD *)(a1 + 32) && *(_DWORD *)(a1 + 36))
    sub_223CCE7C8((uint64_t)&v17, a1);
LABEL_21:
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223EEFA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223EEFA40(_QWORD *result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;

  v2 = *result;
  v1 = (unsigned __int8 *)result[1];
  v3 = *(unsigned int *)(*result + 32);
  v4 = *(unsigned int *)(*result + 44);
  if ((_DWORD)v4 == *(_DWORD *)(*result + 40) * (_DWORD)v3)
  {
    v5 = *(_DWORD *)(v2 + 36);
    v6 = *(void **)(v2 + 24);
    if (*(_BYTE *)(v2 + 48))
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = *(_QWORD *)(v2 + 8);
      v9 = *(std::__shared_weak_count **)(v2 + 16);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v8 + 88))(v8, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v6 = *(void **)(v2 + 24);
    }
    return memset(v6, *v1, (v5 * v3));
  }
  else
  {
    v13 = *(_DWORD *)(v2 + 36);
    if ((_DWORD)v3)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14)
    {
      v15 = v13 - 1;
      v16 = *(char **)(v2 + 24);
      if (*(_BYTE *)(v2 + 48))
        v17 = v16 == 0;
      else
        v17 = 1;
      if (!v17)
      {
        v18 = *(_QWORD *)(v2 + 8);
        v19 = *(std::__shared_weak_count **)(v2 + 16);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v18 + 88))(v18, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v16 = *(char **)(v2 + 24);
      }
      for (; v15; --v15)
      {
        memset(v16, *v1, v3);
        v16 += v4;
      }
      return memset(v16, *v1, v3);
    }
  }
  return result;
}

void ***sub_223EEFBFC(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*(v4 - 1))
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_223EEFC90(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  char *v18;

  v5 = *(char **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (char *)(*(_QWORD *)a1 + 12 * v6);
  v8 = v7;
  if (v6)
  {
    v8 = *(char **)a1;
    v9 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = v9 >> 1;
      v11 = (float *)&v8[12 * (v9 >> 1)];
      v13 = *v11;
      v12 = v11 + 3;
      v9 += ~(v9 >> 1);
      if (*(float *)a2 < v13)
        v9 = v10;
      else
        v8 = (char *)v12;
    }
    while (v9);
  }
  *a3 = v8;
  if (*(_QWORD *)(a1 + 16) == v6)
  {
    sub_223EEFDE0((char **)a1, v8, 1, a2, &v18);
    *a3 = v18;
  }
  else if (v7 == v8)
  {
    *(_DWORD *)v7 = *(_DWORD *)a2;
    *(_QWORD *)&v5[12 * v6 + 4] = *(_QWORD *)(a2 + 4);
    ++*(_QWORD *)(a1 + 8);
    *a3 = v7;
  }
  else
  {
    v14 = v7 - 12;
    *(_DWORD *)v7 = *((_DWORD *)v7 - 3);
    *(_QWORD *)&v5[12 * v6 + 4] = *((_QWORD *)v7 - 1);
    ++*(_QWORD *)(a1 + 8);
    if (v7 - 12 != v8)
    {
      v15 = v7 - 12;
      do
      {
        v16 = *((_DWORD *)v15 - 3);
        v15 -= 12;
        *(_DWORD *)v14 = v16;
        v17 = *((_DWORD *)v14 - 1);
        *((_DWORD *)v14 + 1) = *((_DWORD *)v14 - 2);
        *((_DWORD *)v14 + 2) = v17;
        v14 = v15;
      }
      while (v15 != v8);
    }
    *(_DWORD *)v8 = *(_DWORD *)a2;
    *((_DWORD *)v8 + 1) = *(_DWORD *)(a2 + 4);
    *((_DWORD *)v8 + 2) = *(_DWORD *)(a2 + 8);
    *a3 = v8;
  }
}

void sub_223EEFDE0(char **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;

  v6 = a1[1];
  v7 = (unint64_t)a1[2];
  if (0xAAAAAAAAAAAAAAALL - v7 < (unint64_t)&v6[a3 - v7])
    goto LABEL_22;
  v9 = v7 >> 61;
  v10 = 8 * v7;
  if (v9 > 4)
    v11 = -1;
  else
    v11 = v10;
  v12 = v10 / 5;
  if (v9)
    v12 = v11;
  v13 = (unint64_t)&v6[a3];
  if (v12 >= 0xAAAAAAAAAAAAAAALL)
    v12 = 0xAAAAAAAAAAAAAAALL;
  v14 = v13 <= v12 ? v12 : v13;
  if (v14 > 0xAAAAAAAAAAAAAAALL)
LABEL_22:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v18 = *a1;
  v19 = (char *)operator new(12 * v14);
  v20 = v19;
  v22 = *a1;
  v21 = a1[1];
  v23 = v19;
  if (*a1)
  {
    v23 = v19;
    if (v22 != a2)
    {
      v25 = a1[1];
      memmove(v19, v22, a2 - v22);
      v23 = &v20[a2 - v22];
      v21 = v25;
    }
  }
  *(_DWORD *)v23 = *(_DWORD *)a4;
  *(_QWORD *)(v23 + 4) = *(_QWORD *)(a4 + 4);
  if (a2)
  {
    v24 = &v22[12 * (_QWORD)v21];
    if (v24 != a2)
      memmove(&v23[12 * a3], a2, v24 - a2);
  }
  if (v22)
  {
    operator delete(v22);
    v21 = a1[1];
  }
  *a1 = v20;
  a1[1] = &v21[a3];
  a1[2] = (char *)v14;
  *a5 = &v20[a2 - v18];
}

void sub_223EEFF74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;

  *(_QWORD *)a3 = 0;
  v5 = *(char **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (char *)(*(_QWORD *)a1 + 12 * v6);
  if (v6)
  {
    v8 = *(char **)a1;
    v9 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = v9 >> 1;
      v11 = &v8[12 * (v9 >> 1)];
      v13 = *(_DWORD *)v11;
      v12 = v11 + 12;
      v9 += ~(v9 >> 1);
      if (v13 >= *(_DWORD *)a2)
        v9 = v10;
      else
        v8 = v12;
    }
    while (v9);
    if (v8 != v7)
      goto LABEL_8;
  }
  else
  {
    v8 = *(char **)a1;
    if (v5 != v7)
    {
LABEL_8:
      v14 = *(_DWORD *)a2 >= *(_DWORD *)v8;
      *(_BYTE *)(a3 + 8) = *(_DWORD *)a2 < *(_DWORD *)v8;
      if (v14)
      {
LABEL_13:
        *(_QWORD *)a3 = v8;
        return;
      }
      if (*(_QWORD *)(a1 + 16) != v6)
      {
        *(_DWORD *)v7 = *((_DWORD *)v7 - 3);
        *(_QWORD *)&v5[12 * v6 + 4] = *((_QWORD *)v7 - 1);
        ++*(_QWORD *)(a1 + 8);
        if (v7 - 12 != v8)
          memmove(v8 + 12, v8, v7 - 12 - v8);
        *(_DWORD *)v8 = *(_DWORD *)a2;
        *(_QWORD *)(v8 + 4) = *(_QWORD *)(a2 + 4);
        goto LABEL_13;
      }
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a3 + 8) = 1;
  if (*(_QWORD *)(a1 + 16) != v6)
  {
    *(_DWORD *)v7 = *(_DWORD *)a2;
    *(_QWORD *)&v5[12 * v6 + 4] = *(_QWORD *)(a2 + 4);
    ++*(_QWORD *)(a1 + 8);
    *(_QWORD *)a3 = v7;
    return;
  }
LABEL_17:
  sub_223EF00F4((char **)a1, v8, 1, a2, &v15);
  *(_QWORD *)a3 = v15;
}

void sub_223EF00F4(char **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;

  v6 = a1[1];
  v7 = (unint64_t)a1[2];
  if (0xAAAAAAAAAAAAAAALL - v7 < (unint64_t)&v6[a3 - v7])
    goto LABEL_22;
  v9 = v7 >> 61;
  v10 = 8 * v7;
  if (v9 > 4)
    v11 = -1;
  else
    v11 = v10;
  v12 = v10 / 5;
  if (v9)
    v12 = v11;
  v13 = (unint64_t)&v6[a3];
  if (v12 >= 0xAAAAAAAAAAAAAAALL)
    v12 = 0xAAAAAAAAAAAAAAALL;
  v14 = v13 <= v12 ? v12 : v13;
  if (v14 > 0xAAAAAAAAAAAAAAALL)
LABEL_22:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v18 = *a1;
  v19 = (char *)operator new(12 * v14);
  v20 = v19;
  v22 = *a1;
  v21 = a1[1];
  v23 = v19;
  if (*a1)
  {
    v23 = v19;
    if (v22 != a2)
    {
      v25 = a1[1];
      memmove(v19, v22, a2 - v22);
      v23 = &v20[a2 - v22];
      v21 = v25;
    }
  }
  *(_DWORD *)v23 = *(_DWORD *)a4;
  *(_QWORD *)(v23 + 4) = *(_QWORD *)(a4 + 4);
  if (a2)
  {
    v24 = &v22[12 * (_QWORD)v21];
    if (v24 != a2)
      memmove(&v23[12 * a3], a2, v24 - a2);
  }
  if (v22)
  {
    operator delete(v22);
    v21 = a1[1];
  }
  *a1 = v20;
  a1[1] = &v21[a3];
  a1[2] = (char *)v14;
  *a5 = &v20[a2 - v18];
}

void sub_223EF0288(_QWORD *a1, uint64_t a2, _BYTE *a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;

  v4 = 0x7FFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (0x7FFFFFFFFFFFFFFLL - v6 < v5 - v6 + 1)
    goto LABEL_22;
  v7 = v6 >> 61;
  v8 = 8 * v6;
  if (v7 > 4)
    v9 = -1;
  else
    v9 = v8;
  v10 = v8 / 5;
  if (v7)
    v10 = v9;
  if (v10 < 0x7FFFFFFFFFFFFFFLL)
    v4 = v10;
  v11 = v5 + 1 > v4 ? v5 + 1 : v4;
  if (v11 >> 59)
LABEL_22:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v16 = *(_BYTE **)a2;
  v17 = operator new(16 * v11);
  v18 = v17;
  v19 = *(_BYTE **)a2;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = v17;
  if (*(_QWORD *)a2)
  {
    v21 = v17;
    if (v19 != a3)
    {
      memmove(v17, *(const void **)a2, a3 - v19);
      v21 = (_QWORD *)((char *)v18 + a3 - v19);
    }
  }
  *v21 = *a4;
  v21[1] = a4[1];
  if (a3)
  {
    v22 = &v19[16 * v20];
    if (v22 != a3)
      memmove(v21 + 2, a3, v22 - a3);
  }
  if (v19)
  {
    operator delete(v19);
    v20 = *(_QWORD *)(a2 + 8);
  }
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v20 + 1;
  *(_QWORD *)(a2 + 16) = v11;
  *a1 = (char *)v18 + a3 - v16;
}

void sub_223EF03D0(char **a1, char **a2, char *__src, unint64_t *a4)
{
  char *v5;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;

  v5 = __src;
  v8 = *a2;
  v7 = a2[1];
  v9 = &(*a2)[16 * (_QWORD)v7];
  if (v9 != __src)
  {
    v10 = *a4;
    if (*a4 >= *(_QWORD *)__src)
    {
      v19 = (v9 - __src) >> 4;
      v14 = __src;
      do
      {
        v20 = v19 >> 1;
        v21 = &v14[16 * (v19 >> 1)];
        v23 = *(_QWORD *)v21;
        v22 = v21 + 16;
        v19 += ~(v19 >> 1);
        if (v23 >= v10)
          v19 = v20;
        else
          v14 = v22;
      }
      while (v19);
      v5 = &(*a2)[16 * (_QWORD)v7];
      if (v14 == v9)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  if (v8 != __src)
  {
    v12 = __src - 16;
    v11 = *((_QWORD *)__src - 2);
    v10 = *a4;
    if (v11 >= *a4)
    {
      v5 = __src - 16;
      if (v10 >= v11)
      {
        v14 = __src - 16;
        goto LABEL_28;
      }
      if (v12 == v8)
        goto LABEL_21;
      v13 = (v12 - v8) >> 4;
      v14 = *a2;
      do
      {
        v15 = v13 >> 1;
        v16 = &v14[16 * (v13 >> 1)];
        v18 = *(_QWORD *)v16;
        v17 = v16 + 16;
        v13 += ~(v13 >> 1);
        if (v18 >= v10)
          v13 = v15;
        else
          v14 = v17;
      }
      while (v13);
      if (v14 == v12)
        goto LABEL_21;
LABEL_20:
      v5 = v14;
      if (v10 < *(_QWORD *)v14)
        goto LABEL_21;
LABEL_28:
      *a1 = v14;
      return;
    }
  }
LABEL_21:
  if (a2[2] == v7)
  {
    sub_223EF0288(a1, (uint64_t)a2, v5, a4);
  }
  else if (v9 == v5)
  {
    *(_QWORD *)v9 = *a4;
    *(_QWORD *)&v8[16 * (_QWORD)v7 + 8] = a4[1];
    a2[1] = v7 + 1;
    *a1 = v5;
  }
  else
  {
    *(_OWORD *)v9 = *((_OWORD *)v9 - 1);
    a2[1] = v7 + 1;
    if (v9 - 16 != v5)
      memmove(v5 + 16, v5, v9 - 16 - v5);
    *(_QWORD *)v5 = *a4;
    *((_QWORD *)v5 + 1) = a4[1];
    *a1 = v5;
  }
}

unint64_t sub_223EF0590(unint64_t result, unint64_t **a2, uint64_t a3, char a4)
{
  unint64_t **v7;
  unint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t **v28;
  unint64_t **v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t **v40;
  unint64_t **v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t **v60;
  unint64_t **v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t **v65;
  unint64_t **v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t **v69;
  BOOL v70;
  unint64_t *v71;
  unint64_t **v72;
  unint64_t **v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t *v78;
  unint64_t **v79;
  unint64_t *v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t **v88;
  unint64_t *v89;
  unint64_t **v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t **v96;
  unint64_t **v97;
  unint64_t **v98;
  BOOL v100;
  uint64_t v101;
  unint64_t **v102;
  unint64_t **v103;
  unint64_t *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  int64_t v110;
  uint64_t v111;
  unint64_t **v112;
  unint64_t *v113;
  unint64_t *v114;
  BOOL v115;
  unint64_t **v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  int64_t v125;
  unint64_t **v126;
  unint64_t *v127;
  unint64_t **v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t **v132;
  unint64_t *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t *v137;
  unint64_t *v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t *v146;

  v7 = (unint64_t **)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v80 = *(a2 - 1);
        v81 = *v8;
        if (*v80 > **v8)
        {
          *v8 = v80;
          *(a2 - 1) = v81;
        }
        return result;
      case 3:
        v82 = *v8;
        v83 = v8[1];
        v84 = *v83;
        v85 = **v8;
        v86 = *(a2 - 1);
        v87 = *v86;
        if (*v83 <= v85)
        {
          if (v87 > v84)
          {
            v8[1] = v86;
            *(a2 - 1) = v83;
            v137 = *v8;
            v136 = v8[1];
            if (*v136 > **v8)
            {
              *v8 = v136;
              v8[1] = v137;
            }
          }
        }
        else
        {
          if (v87 <= v84)
          {
            *v8 = v83;
            v8[1] = v82;
            v146 = *(a2 - 1);
            if (*v146 <= v85)
              return result;
            v8[1] = v146;
          }
          else
          {
            *v8 = v86;
          }
          *(a2 - 1) = v82;
        }
        return result;
      case 4:
        v88 = v8 + 1;
        v89 = v8[1];
        v90 = v8 + 2;
        v91 = v8[2];
        v92 = *v8;
        v93 = *v89;
        v94 = **v8;
        v95 = *v91;
        if (*v89 <= v94)
        {
          if (v95 <= v93)
          {
LABEL_180:
            v89 = v91;
            v138 = *(a2 - 1);
            if (*v138 <= *v89)
              return result;
LABEL_181:
            *v90 = v138;
            *(a2 - 1) = v89;
            v142 = *v90;
            v143 = *v88;
            v144 = *v142;
            if (*v142 > *v143)
            {
              v8[1] = v142;
              v8[2] = v143;
              v145 = *v8;
              if (v144 > **v8)
              {
                *v8 = v142;
                v8[1] = v145;
              }
            }
            return result;
          }
          *v88 = v91;
          *v90 = v89;
          v96 = v8;
          v97 = v8 + 1;
          result = (unint64_t)v89;
          if (v95 <= v94)
          {
LABEL_172:
            v138 = *(a2 - 1);
            if (*v138 <= *v89)
              return result;
            goto LABEL_181;
          }
        }
        else
        {
          v96 = v8;
          v97 = v8 + 2;
          result = (unint64_t)*v8;
          if (v95 <= v93)
          {
            *v8 = v89;
            v8[1] = v92;
            v96 = v8 + 1;
            v97 = v8 + 2;
            result = (unint64_t)v92;
            if (v95 <= v94)
              goto LABEL_180;
          }
        }
        *v96 = v91;
        *v97 = v92;
        v89 = (unint64_t *)result;
        goto LABEL_172;
      case 5:
        return (unint64_t)sub_223EF1008(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v109 = (unint64_t)(v10 - 2) >> 1;
              v110 = v109;
              do
              {
                if (v109 >= v110)
                {
                  v111 = (2 * v110) | 1;
                  v112 = &v8[v111];
                  if (2 * v110 + 2 >= v10)
                  {
                    v113 = *v112;
                    result = **v112;
                    v116 = &v8[v110];
                    v117 = *v116;
                    v118 = **v116;
                    if (result <= v118)
                      goto LABEL_146;
                  }
                  else
                  {
                    v113 = *v112;
                    v114 = v112[1];
                    result = **v112;
                    v115 = result > *v114;
                    if (result >= *v114)
                      result = *v114;
                    if (v115)
                    {
                      v113 = v112[1];
                      ++v112;
                      v111 = 2 * v110 + 2;
                    }
                    v116 = &v8[v110];
                    v117 = *v116;
                    v118 = **v116;
                    if (result <= v118)
                    {
LABEL_146:
                      while (1)
                      {
                        *v116 = v113;
                        v116 = v112;
                        if (v109 < v111)
                          break;
                        result = (2 * v111) | 1;
                        v112 = &v8[result];
                        v111 = 2 * v111 + 2;
                        if (v111 < v10)
                        {
                          v113 = *v112;
                          v119 = v112[1];
                          v120 = **v112;
                          v121 = v120 > *v119;
                          if (v120 >= *v119)
                            v120 = *v119;
                          if (v121)
                          {
                            v113 = v112[1];
                            ++v112;
                          }
                          else
                          {
                            v111 = result;
                          }
                          if (v120 > v118)
                            break;
                        }
                        else
                        {
                          v113 = *v112;
                          v111 = result;
                          if (**v112 > v118)
                            break;
                        }
                      }
                      *v116 = v117;
                    }
                  }
                }
                v115 = v110-- <= 0;
              }
              while (!v115);
              v122 = (unint64_t)v9 >> 3;
              do
              {
                v123 = 0;
                v124 = *v8;
                v125 = (unint64_t)(v122 - 2) >> 1;
                v126 = v8;
                do
                {
                  while (1)
                  {
                    v128 = &v126[v123 + 1];
                    v129 = (2 * v123) | 1;
                    v123 = 2 * v123 + 2;
                    if (v123 < v122)
                      break;
                    v123 = v129;
                    *v126 = *v128;
                    v126 = v128;
                    if (v129 > v125)
                      goto LABEL_160;
                  }
                  v127 = *v128;
                  result = **v128;
                  if (result <= *v128[1])
                  {
                    v123 = v129;
                  }
                  else
                  {
                    v127 = v128[1];
                    ++v128;
                  }
                  *v126 = v127;
                  v126 = v128;
                }
                while (v123 <= v125);
LABEL_160:
                if (v128 == --a2)
                {
                  *v128 = v124;
                }
                else
                {
                  *v128 = *a2;
                  *a2 = v124;
                  v130 = (char *)v128 - (char *)v8 + 8;
                  if (v130 >= 9)
                  {
                    v131 = (((unint64_t)v130 >> 3) - 2) >> 1;
                    v132 = &v8[v131];
                    v133 = *v132;
                    v134 = *v128;
                    v135 = **v128;
                    if (**v132 > v135)
                    {
                      do
                      {
                        *v128 = v133;
                        v128 = v132;
                        if (!v131)
                          break;
                        v131 = (v131 - 1) >> 1;
                        v132 = &v8[v131];
                        v133 = *v132;
                      }
                      while (**v132 > v135);
                      *v128 = v134;
                    }
                  }
                }
                v115 = v122-- <= 2;
              }
              while (!v115);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          v14 = *v13;
          if ((unint64_t)v9 < 0x401)
          {
            v19 = *v8;
            v20 = *v12;
            v21 = **v8;
            v22 = **v12;
            if (v21 <= v22)
            {
              if (v14 > v21)
              {
                *v8 = v13;
                *(a2 - 1) = v19;
                v24 = *v12;
                if (**v8 > **v12)
                {
                  *v12 = *v8;
                  *v8 = v24;
                  --a3;
                  v25 = v24;
                  v26 = *v24;
                  if ((a4 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v14 <= v21)
            {
              *v12 = v19;
              *v8 = v20;
              v38 = *(a2 - 1);
              if (*v38 <= v22)
                goto LABEL_32;
              *v8 = v38;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v20;
LABEL_32:
            --a3;
            v25 = *v8;
            v26 = **v8;
            if ((a4 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v15 = *v12;
          v16 = *v8;
          v17 = **v12;
          v18 = **v8;
          if (v17 <= v18)
          {
            if (v14 > v17)
            {
              *v12 = v13;
              *(a2 - 1) = v15;
              v23 = *v8;
              if (**v12 > **v8)
              {
                *v8 = *v12;
                *v12 = v23;
              }
            }
          }
          else
          {
            if (v14 <= v17)
            {
              *v8 = v15;
              *v12 = v16;
              v27 = *(a2 - 1);
              if (*v27 <= v18)
                goto LABEL_23;
              *v12 = v27;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v16;
          }
LABEL_23:
          v28 = &v8[v11];
          v31 = *(v28 - 1);
          v29 = v28 - 1;
          v30 = v31;
          v32 = v8[1];
          v33 = *v31;
          v34 = *v32;
          v35 = *(a2 - 2);
          v36 = *v35;
          if (*v31 <= *v32)
          {
            if (v36 > v33)
            {
              *v29 = v35;
              *(a2 - 2) = v30;
              v37 = v8[1];
              if (**v29 > *v37)
              {
                v8[1] = *v29;
                *v29 = v37;
              }
            }
          }
          else
          {
            if (v36 <= v33)
            {
              v8[1] = v30;
              *v29 = v32;
              v39 = *(a2 - 2);
              if (*v39 <= v34)
                goto LABEL_37;
              *v29 = v39;
            }
            else
            {
              v8[1] = v35;
            }
            *(a2 - 2) = v32;
          }
LABEL_37:
          v40 = &v8[v11];
          v43 = v40[1];
          v41 = v40 + 1;
          v42 = v43;
          v44 = v8[2];
          v45 = *v43;
          v46 = *v44;
          v47 = *(a2 - 3);
          v48 = *v47;
          if (*v43 <= *v44)
          {
            if (v48 > v45)
            {
              *v41 = v47;
              *(a2 - 3) = v42;
              v49 = v8[2];
              if (**v41 > *v49)
              {
                v8[2] = *v41;
                *v41 = v49;
              }
            }
          }
          else
          {
            if (v48 <= v45)
            {
              v8[2] = v42;
              *v41 = v44;
              v50 = *(a2 - 3);
              if (*v50 <= v46)
                goto LABEL_46;
              *v41 = v50;
            }
            else
            {
              v8[2] = v47;
            }
            *(a2 - 3) = v44;
          }
LABEL_46:
          v51 = *v12;
          v52 = *v29;
          v53 = **v12;
          v54 = **v29;
          v55 = *v41;
          v56 = **v41;
          if (v53 > v54)
          {
            if (v56 <= v53)
            {
              *v29 = v51;
              *v12 = v52;
              v29 = v12;
              v51 = v55;
              if (v56 <= v54)
              {
                v51 = v52;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v29 = v55;
            *v41 = v52;
            goto LABEL_53;
          }
          if (v56 <= v53)
            goto LABEL_53;
          *v12 = v55;
          *v41 = v51;
          v41 = v12;
          v51 = v52;
          if (v56 > v54)
            goto LABEL_52;
          v51 = v55;
LABEL_53:
          v57 = *v8;
          *v8 = v51;
          *v12 = v57;
          --a3;
          v25 = *v8;
          v26 = **v8;
          if ((a4 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (**(v8 - 1) <= v26)
          {
            if (v26 <= **(a2 - 1))
            {
              v72 = v8 + 1;
              do
              {
                v8 = v72;
                if (v72 >= a2)
                  break;
                ++v72;
              }
              while (v26 <= **v8);
            }
            else
            {
              do
              {
                v71 = v8[1];
                ++v8;
              }
              while (v26 <= *v71);
            }
            v73 = a2;
            if (v8 < a2)
            {
              v73 = a2;
              do
                v74 = *--v73;
              while (v26 > *v74);
            }
            if (v8 < v73)
            {
              v75 = *v8;
              v76 = *v73;
              do
              {
                *v8 = v76;
                *v73 = v75;
                do
                {
                  v77 = v8[1];
                  ++v8;
                  v75 = v77;
                }
                while (v26 <= *v77);
                do
                {
                  v78 = *--v73;
                  v76 = v78;
                }
                while (v26 > *v78);
              }
              while (v8 < v73);
            }
            v79 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v79;
            a4 = 0;
            *v79 = v25;
            continue;
          }
LABEL_55:
          v58 = 0;
          do
            v59 = v8[++v58];
          while (*v59 > v26);
          v60 = &v8[v58];
          v61 = a2;
          if (v58 == 1)
          {
            v61 = a2;
            do
            {
              if (v60 >= v61)
                break;
              v63 = *--v61;
            }
            while (*v63 <= v26);
          }
          else
          {
            do
              v62 = *--v61;
            while (*v62 <= v26);
          }
          if (v60 < v61)
          {
            v64 = *v61;
            v65 = &v8[v58];
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*v67 > v26);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*v68 <= v26);
            }
            while (v65 < v66);
            v69 = v65 - 1;
            if (v65 - 1 == v8)
              goto LABEL_73;
LABEL_72:
            *v8 = *v69;
            goto LABEL_73;
          }
          v69 = v60 - 1;
          if (v60 - 1 != v8)
            goto LABEL_72;
LABEL_73:
          *v69 = v25;
          if (v60 < v61)
            goto LABEL_76;
          v70 = sub_223EF11A4(v8, v69);
          v8 = v69 + 1;
          result = sub_223EF11A4(v69 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v70)
              continue;
LABEL_76:
            result = sub_223EF0590(v7, v69, a3, a4 & 1);
            a4 = 0;
            v8 = v69 + 1;
            continue;
          }
          a2 = v69;
          if (v70)
            return result;
          goto LABEL_2;
        }
        v98 = v8 + 1;
        v100 = v8 == a2 || v98 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v100)
          {
            v101 = 8;
            v102 = v8;
            do
            {
              v105 = *v102;
              v104 = v102[1];
              v102 = v98;
              v106 = *v104;
              if (*v104 > *v105)
              {
                v107 = v101;
                do
                {
                  *(unint64_t **)((char *)v8 + v107) = v105;
                  v108 = v107 - 8;
                  if (v107 == 8)
                  {
                    v103 = v8;
                    goto LABEL_119;
                  }
                  v105 = *(unint64_t **)((char *)v8 + v107 - 16);
                  v107 -= 8;
                }
                while (v106 > *v105);
                v103 = (unint64_t **)((char *)v8 + v108);
LABEL_119:
                *v103 = v104;
              }
              v98 = v102 + 1;
              v101 += 8;
            }
            while (v102 + 1 != a2);
          }
        }
        else if (!v100)
        {
          do
          {
            v140 = *v7;
            v139 = v7[1];
            v7 = v98;
            v141 = *v139;
            if (*v139 > *v140)
            {
              do
              {
                *v98 = v140;
                v140 = *(v98 - 2);
                --v98;
              }
              while (v141 > *v140);
              *v98 = v139;
            }
            v98 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

unint64_t **sub_223EF1008(unint64_t **result, unint64_t **a2, unint64_t **a3, unint64_t **a4, unint64_t **a5)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;

  v5 = *a2;
  v6 = *result;
  v7 = **a2;
  v8 = **result;
  v9 = *a3;
  v10 = **a3;
  if (v7 <= v8)
  {
    if (v10 <= v7)
    {
      v5 = *a3;
      v12 = *a4;
      if (**a4 <= *v9)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    v11 = *result;
    if (**a2 > **result)
    {
      *result = *a2;
      *a2 = v11;
      v5 = *a3;
      v12 = *a4;
      if (**a4 <= **a3)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v10 <= v7)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (**a3 <= v8)
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v9;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v12 = *a4;
  if (**a4 <= *v5)
    goto LABEL_17;
LABEL_14:
  *a3 = v12;
  *a4 = v5;
  v13 = *a2;
  if (**a3 > **a2)
  {
    *a2 = *a3;
    *a3 = v13;
    v14 = *result;
    if (**a2 > **result)
    {
      *result = *a2;
      *a2 = v14;
    }
  }
LABEL_17:
  v15 = *a4;
  if (**a5 > **a4)
  {
    *a4 = *a5;
    *a5 = v15;
    v16 = *a3;
    if (**a4 > **a3)
    {
      *a3 = *a4;
      *a4 = v16;
      v17 = *a2;
      if (**a3 > **a2)
      {
        *a2 = *a3;
        *a3 = v17;
        v18 = *result;
        if (**a2 > **result)
        {
          *result = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL sub_223EF11A4(unint64_t **a1, unint64_t **a2)
{
  unint64_t *v3;
  unint64_t **v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t **v10;
  unint64_t **v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t **v20;
  unint64_t *v21;
  unint64_t **v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t **v28;
  unint64_t **v29;
  unint64_t *v30;
  unint64_t **v31;
  int v32;
  uint64_t i;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v12 = *(a2 - 1);
      v13 = *a1;
      if (*v12 <= **a1)
        return 1;
      *a1 = v12;
      *(a2 - 1) = v13;
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *v15;
      v17 = **a1;
      v18 = *(a2 - 1);
      v19 = *v18;
      if (*v15 <= v17)
      {
        if (v19 <= v16)
          return 1;
        a1[1] = v18;
        *(a2 - 1) = v15;
        v40 = *a1;
        v39 = a1[1];
        if (*v39 <= **a1)
          return 1;
        *a1 = v39;
        a1[1] = v40;
        return 1;
      }
      else if (v19 <= v16)
      {
        *a1 = v15;
        a1[1] = v14;
        v46 = *(a2 - 1);
        if (*v46 <= v17)
          return 1;
        a1[1] = v46;
        *(a2 - 1) = v14;
        return 1;
      }
      else
      {
        *a1 = v18;
        *(a2 - 1) = v14;
        return 1;
      }
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *v21;
      v26 = **a1;
      v27 = *v23;
      if (*v21 > v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 <= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 <= v26)
            goto LABEL_38;
        }
LABEL_35:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
LABEL_36:
        v41 = *(a2 - 1);
        if (*v41 <= *v21)
          return 1;
        goto LABEL_39;
      }
      if (v27 > v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 <= v26)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v21 = v23;
      v41 = *(a2 - 1);
      if (*v41 <= *v21)
        return 1;
LABEL_39:
      *v22 = v41;
      *(a2 - 1) = v21;
      v42 = *v22;
      v43 = *v20;
      v44 = *v42;
      if (*v42 <= *v43)
        return 1;
      a1[1] = v42;
      a1[2] = v43;
      v45 = *a1;
      if (v44 <= **a1)
        return 1;
      *a1 = v42;
      a1[1] = v45;
      return 1;
    case 5:
      sub_223EF1008(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      v7 = *v5;
      v8 = **a1;
      v9 = *v3;
      if (*v5 <= v8)
      {
        if (v9 <= v7)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v10 = a1;
        v11 = a1 + 1;
      }
      else
      {
        v10 = a1;
        v11 = a1 + 2;
        if (v9 > v7)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v10 = a1 + 1;
        v11 = a1 + 2;
      }
      if (v9 <= v8)
        goto LABEL_20;
LABEL_19:
      *v10 = v3;
      *v11 = v6;
LABEL_20:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v34 = *v31;
        v35 = *v4;
        v36 = **v31;
        if (v36 > *v35)
          break;
LABEL_23:
        v4 = v31++;
        if (v31 == a2)
          return 1;
      }
      v37 = i;
      do
      {
        *(unint64_t **)((char *)a1 + v37) = v35;
        v38 = v37 - 8;
        if (v37 == 8)
        {
          *a1 = v34;
          if (++v32 != 8)
            goto LABEL_23;
          return v31 + 1 == a2;
        }
        v35 = *(unint64_t **)((char *)a1 + v37 - 16);
        v37 -= 8;
      }
      while (v36 > *v35);
      *(unint64_t **)((char *)a1 + v38) = v34;
      if (++v32 != 8)
        goto LABEL_23;
      return v31 + 1 == a2;
  }
}

uint64_t sub_223EF1508(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  if (*(_QWORD *)(a1 + 120))
    operator delete(*(void **)(a1 + 104));
  if (*(_QWORD *)(a1 + 96))
    operator delete(*(void **)(a1 + 80));
  if (*(_QWORD *)(a1 + 72))
    operator delete(*(void **)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(_QWORD *)(v3 - 8))
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_223EF15B8(_QWORD *a1, uint64_t a2, _BYTE *a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;

  v4 = 0xFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (0xFFFFFFFFFFFFFFFLL - v6 < v5 - v6 + 1)
    goto LABEL_22;
  v7 = v6 >> 61;
  v8 = 8 * v6;
  if (v7 > 4)
    v9 = -1;
  else
    v9 = v8;
  v10 = v8 / 5;
  if (v7)
    v10 = v9;
  if (v10 < 0xFFFFFFFFFFFFFFFLL)
    v4 = v10;
  v11 = v5 + 1 > v4 ? v5 + 1 : v4;
  if (v11 >> 60)
LABEL_22:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v16 = *(_BYTE **)a2;
  v17 = operator new(8 * v11);
  v18 = v17;
  v19 = *(_BYTE **)a2;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = v17;
  if (*(_QWORD *)a2)
  {
    v21 = v17;
    if (v19 != a3)
    {
      memmove(v17, *(const void **)a2, a3 - v19);
      v21 = (_QWORD *)((char *)v18 + a3 - v19);
    }
  }
  *v21 = *a4;
  if (a3)
  {
    v22 = &v19[8 * v20];
    if (v22 != a3)
      memmove(v21 + 1, a3, v22 - a3);
  }
  if (v19)
  {
    operator delete(v19);
    v20 = *(_QWORD *)(a2 + 8);
  }
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v20 + 1;
  *(_QWORD *)(a2 + 16) = v11;
  *a1 = (char *)v18 + a3 - v16;
}

uint64_t sub_223EF16F8(uint64_t a1)
{
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;

  v3 = (void **)(a1 + 224);
  v2 = *(void ***)(a1 + 224);
  if (v2)
  {
    sub_223EF18CC(a1 + 224, v2);
    operator delete(*v3);
  }
  v4 = *(_QWORD *)(a1 + 200);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 208);
    v6 = *(void **)(a1 + 200);
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 72);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 88;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 200);
    }
    *(_QWORD *)(a1 + 208) = v4;
    operator delete(v6);
  }
  v10 = *(_QWORD *)(a1 + 176);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 184);
    v12 = *(void **)(a1 + 176);
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 72);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 88;
      }
      while (v11 != v10);
      v12 = *(void **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 184) = v10;
    operator delete(v12);
  }
  v16 = *(void **)(a1 + 152);
  if (v16)
  {
    *(_QWORD *)(a1 + 160) = v16;
    operator delete(v16);
  }
  if (*(_QWORD *)(a1 + 144))
    operator delete(*(void **)(a1 + 128));
  v17 = *(_QWORD *)(a1 + 96);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 104);
    v19 = *(void **)(a1 + 96);
    if (v18 != v17)
    {
      do
      {
        if (*(_QWORD *)(v18 - 8))
          operator delete(*(void **)(v18 - 24));
        v18 -= 24;
      }
      while (v18 != v17);
      v19 = *(void **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v17;
    operator delete(v19);
  }
  v20 = *(_QWORD *)(a1 + 72);
  if (v20)
  {
    v21 = *(_QWORD *)(a1 + 80);
    v22 = *(void **)(a1 + 72);
    if (v21 != v20)
    {
      do
      {
        v23 = *(void **)(v21 - 24);
        if (v23)
        {
          *(_QWORD *)(v21 - 16) = v23;
          operator delete(v23);
        }
        v21 -= 224;
      }
      while (v21 != v20);
      v22 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v20;
    operator delete(v22);
  }
  return a1;
}

void sub_223EF18CC(uint64_t a1, void **a2)
{
  void **v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void **v10;
  char *v11;
  char *v12;
  void *v13;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      v6 = (std::__shared_weak_count *)*(v4 - 9);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
          break;
      }
      v9 = *(v4 - 14);
      if (v9)
        goto LABEL_11;
LABEL_12:
      v10 = v4 - 17;
      v11 = (char *)*(v4 - 17);
      if (v11)
      {
        v12 = (char *)*(v4 - 16);
        v5 = *(v4 - 17);
        if (v12 != v11)
        {
          do
          {
            v13 = (void *)*((_QWORD *)v12 - 3);
            if (v13)
            {
              *((_QWORD *)v12 - 2) = v13;
              operator delete(v13);
            }
            v12 -= 224;
          }
          while (v12 != v11);
          v5 = *v10;
        }
        *(v4 - 16) = v11;
        operator delete(v5);
      }
      v4 -= 17;
      if (v10 == a2)
        goto LABEL_2;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = *(v4 - 14);
    if (!v9)
      goto LABEL_12;
LABEL_11:
    *(v4 - 13) = v9;
    operator delete(v9);
    goto LABEL_12;
  }
LABEL_2:
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_223EF19B8(uint64_t a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2)
  {
    if (a2 >> 60)
      sub_22316E078();
    v4 = (char *)operator new(16 * a2);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = &v4[16 * a2];
    v5 = (char *)operator new(4 * a2);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = &v5[4 * a2];
  }
  return a1;
}

void sub_223EF1A28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
    v4 = *(void **)v1;
    if (!*(_QWORD *)v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 8) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223EF1A64(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = a1[6];
  if (v2)
    MEMORY[0x227684CE8](v2, 0xC400A2AC0F1);
  v3 = a1[3];
  if (v3)
  {
    v4 = a1[4];
    v5 = (void *)a1[3];
    if (v4 != v3)
    {
      do
      {
        v6 = *(_QWORD **)(v4 - 16);
        if (v6)
        {
          v7 = (_QWORD *)v6[*(_QWORD *)(v4 - 48)];
          if (v7)
          {
            do
            {
              v8 = (_QWORD *)*v7;
              operator delete(v7);
              v7 = v8;
            }
            while (v8);
            v6 = *(_QWORD **)(v4 - 16);
          }
          operator delete(v6);
          *(_QWORD *)(v4 - 40) = 0;
          *(_QWORD *)(v4 - 24) = 0;
          *(_QWORD *)(v4 - 16) = 0;
        }
        v4 -= 56;
      }
      while (v4 != v3);
      v5 = (void *)a1[3];
    }
    a1[4] = v3;
    operator delete(v5);
  }
  if (a1[2])
  {
    v10 = *a1;
    v9 = (uint64_t *)a1[1];
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    a1[2] = 0;
    if (v9 != a1)
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != a1);
    }
  }
  return a1;
}

uint64_t sub_223EF1B54(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[3];

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_19;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_29;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_29:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_19:
    v15 = 0;
    if (*(_DWORD *)(a1 + 40) != 1)
      goto LABEL_15;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_19;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v15, v4, 1);
  if (*(_DWORD *)(a1 + 40) != 1)
  {
LABEL_15:
    v18[0] = a2;
    if (*(_DWORD *)(a1 + 32) && *(_DWORD *)(a1 + 36))
      sub_223EF24E8((uint64_t)v18, a1);
    goto LABEL_25;
  }
LABEL_20:
  v13 = *(unsigned int *)(a1 + 32);
  if (*(_DWORD *)(a1 + 44) == (_DWORD)v13)
  {
    sub_223EF20BC(a1, a2);
  }
  else
  {
    v17 = 0;
    v16 = v13;
    v18[0] = &v17;
    v18[1] = &v16;
    v18[2] = a2;
    if ((_DWORD)v13 && *(_DWORD *)(a1 + 36))
      sub_223EF2224((uint64_t)v18, a1);
  }
LABEL_25:
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223EF1CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void sub_223EF1D10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t i;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p;
  std::__shared_weak_count *v30;
  char *v31;
  _DWORD v32[624];
  uint64_t v33;
  uint64_t (**v34)();
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;

  v6 = 5489;
  v32[0] = 5489;
  for (i = 1; i != 624; ++i)
  {
    v6 = i + 1812433253 * (v6 ^ (v6 >> 30));
    v32[i] = v6;
  }
  v33 = 0;
  v8 = (std::__shared_weak_count *)operator new(0x28uLL);
  v9 = v8;
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A710;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A760;
  LODWORD(v8[1].__shared_owners_) = 5489;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v34 = &off_24EC7A6B0;
  v35 = v8 + 1;
  v36 = v8;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __p = v32;
  v15 = (std::__shared_weak_count *)operator new();
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC64110;
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v32;
  v30 = v15;
  LOWORD(v31) = -256;
  if (!a2)
  {
    v18 = 0;
    v17 = 0;
LABEL_20:
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_24;
  }
  v16 = 3 * a2;
  if (3 * a2 < 0)
    sub_22316E078();
  v17 = (char *)operator new(3 * a2);
  v18 = &v17[v16];
  bzero(v17, 3 * a2);
  v19 = 0;
  v20 = __p;
  do
    v17[v19++] = sub_223EE69B0((uint64_t)&v31, (uint64_t)v20, (unsigned __int8 *)&v31);
  while (v16 != v19);
  v15 = v30;
  if (v30)
    goto LABEL_20;
LABEL_24:
  __p = *(void **)(a1 + 64);
  *(_QWORD *)a3 = &off_24EC21B18;
  sub_2231C5C38(&__p, (_WORD *)(a3 + 8));
  __p = 0;
  v30 = 0;
  v31 = 0;
  if (a2)
  {
    v23 = v18 - v17;
    if (v18 - v17 < 0)
      sub_22316E078();
    v24 = (char *)operator new(v18 - v17);
    v25 = (std::__shared_weak_count *)&v24[v23];
    __p = v24;
    v31 = &v24[v23];
    memcpy(v24, v17, v18 - v17);
    v30 = v25;
  }
  sub_223EF2B04(a1, a3, (_BOOL8)&__p);
  if (__p)
  {
    v30 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  if (v17)
    operator delete(v17);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_223EF2028()
{
  JUMPOUT(0x223EF2068);
}

void sub_223EF2030(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_223EF203C()
{
  __cxa_end_catch();
  JUMPOUT(0x223EF20ACLL);
}

void sub_223EF204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v14;
  uint64_t v15;

  if (__p)
    operator delete(__p);
  sub_223167354(v15);
  if (v14)
  {
    operator delete(v14);
    sub_2245658A0(v13);
    _Unwind_Resume(a1);
  }
  sub_2245658A0(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_223EF20BC(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v3;
  int16x8_t *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  int16x8_t *v15;
  int16x8_t v16;
  int16x8_t *v17;
  unint64_t v18;
  unint64_t v19;

  v3 = (*(_DWORD *)(result + 36) * *(_DWORD *)(result + 32));
  v4 = *(int16x8_t **)(result + 24);
  if (*(_BYTE *)(result + 48))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 8);
    v8 = *(std::__shared_weak_count **)(result + 16);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v7 + 88))(v7, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v4 = *(int16x8_t **)(v6 + 24);
  }
  v12 = *a2;
  if ((_DWORD)v3)
    v13 = v4 == 0;
  else
    v13 = 0;
  if (v13)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  else if (!(_DWORD)v3)
  {
    return result;
  }
  v14 = v3 - ((_DWORD)v3 != 0) + 1;
  if (v14 < 0x10)
  {
    v15 = v4;
LABEL_24:
    v19 = v3 + 1;
    do
    {
      v15->i16[0] = v12;
      v15 = (int16x8_t *)((char *)v15 + 2);
      --v19;
    }
    while (v19 > 1);
    return result;
  }
  v15 = (int16x8_t *)((char *)v4 + 2 * (v14 & 0xFFFFFFFFFFFFFFF0));
  v3 -= v14 & 0xFFFFFFFFFFFFFFF0;
  v16 = vdupq_n_s16(v12);
  v17 = v4 + 1;
  v18 = v14 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v17[-1] = v16;
    *v17 = v16;
    v17 += 2;
    v18 -= 16;
  }
  while (v18);
  if (v14 != (v14 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_24;
  return result;
}

uint64_t sub_223EF2224(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v6;
  int v7;
  int16x8_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  _DWORD v14[5];
  _QWORD v15[2];

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = result;
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(a2 + 44);
    v14[2] = *(_DWORD *)(a2 + 40);
    v14[3] = v2 - 1;
    v14[4] = v7;
    v8 = *(int16x8_t **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v8)
    {
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(std::__shared_weak_count **)(a2 + 16);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v9 + 88))(v9, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v8 = *(int16x8_t **)(a2 + 24);
    }
    v15[0] = 0;
    v15[1] = 0;
    return sub_223EF2308((uint64_t)v14, (uint64_t)v15, v6, v8);
  }
  return result;
}

uint64_t sub_223EF2308(uint64_t result, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  int16x8_t *v4;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int16x8_t *v12;
  int16x8_t v13;
  int16x8_t *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int16x8_t *v20;
  uint64_t v21;
  int16x8_t v22;
  int16x8_t *v23;
  unint64_t v24;
  unint64_t v25;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    v9 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v4;
      v10 = **(_QWORD **)(a3 + 8);
      v11 = **(unsigned __int16 **)(a3 + 16);
      if (!v4)
      {
        if (v10)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            break;
        }
      }
      if (v10 >= 1)
      {
        v12 = v4;
        if ((unint64_t)v10 < 0x10)
          goto LABEL_12;
        v12 = (int16x8_t *)((char *)v4 + 2 * (v10 & 0xFFFFFFFFFFFFFFF0));
        v13 = vdupq_n_s16(v11);
        v14 = v4 + 1;
        v15 = v10 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v14[-1] = v13;
          *v14 = v13;
          v14 += 2;
          v15 -= 16;
        }
        while (v15);
        v16 = v10 == (v10 & 0x7FFFFFFFFFFFFFF0);
        v10 &= 0xFu;
        if (!v16)
        {
LABEL_12:
          v17 = v10 + 1;
          do
          {
            v12->i16[0] = v11;
            v12 = (int16x8_t *)((char *)v12 + 2);
            --v17;
          }
          while (v17 > 1);
        }
      }
      v4 = (int16x8_t *)((char *)v4 + 2 * *(unsigned int *)(v8 + 16));
      if (++v9 >= *(_DWORD *)(v8 + 12))
        goto LABEL_15;
    }
LABEL_27:
    abort();
  }
LABEL_15:
  *(_QWORD *)a2 = v4;
  v18 = **(_QWORD **)(a3 + 8);
  v19 = **(unsigned __int16 **)(a3 + 16);
  if (!v4)
  {
    if (v18)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        goto LABEL_27;
    }
  }
  if (v18 >= 1)
  {
    if ((unint64_t)v18 < 0x10)
    {
      v20 = v4;
      v21 = v18;
LABEL_24:
      v25 = v21 + 1;
      do
      {
        v20->i16[0] = v19;
        v20 = (int16x8_t *)((char *)v20 + 2);
        --v25;
      }
      while (v25 > 1);
      return result;
    }
    v20 = (int16x8_t *)((char *)v4 + 2 * (v18 & 0xFFFFFFFFFFFFFFF0));
    v21 = v18 & 0xF;
    v22 = vdupq_n_s16(v19);
    v23 = v4 + 1;
    v24 = v18 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v23[-1] = v22;
      *v23 = v22;
      v23 += 2;
      v24 -= 16;
    }
    while (v24);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_24;
  }
  return result;
}

uint64_t sub_223EF24E8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  __int16 **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  __int16 v18;
  int i;
  _WORD *v20;
  int v21;

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = (__int16 **)result;
    v7 = v2 - 1;
    v8 = *(unsigned int *)(a2 + 40);
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(_WORD **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v10 = *(_WORD **)(a2 + 24);
    }
    v17 = v3 - 1;
    if (v7)
    {
      v18 = **v6;
      if (v3 == 1)
      {
        do
        {
          *v10 = v18;
          v10 += v9;
          --v7;
        }
        while (v7);
        goto LABEL_27;
      }
      for (i = 0; i != v7; ++i)
      {
        v20 = v10;
        v21 = v3 - 1;
        do
        {
          *v20 = v18;
          v20 += v8;
          --v21;
        }
        while (v21);
        *v20 = v18;
        v10 += v9;
      }
    }
    else
    {
      v18 = **v6;
      if (v3 == 1)
      {
LABEL_27:
        *v10 = v18;
        return result;
      }
    }
    do
    {
      *v10 = v18;
      v10 += v8;
      --v17;
    }
    while (v17);
    goto LABEL_27;
  }
  return result;
}

void sub_223EF2644(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v7)
      goto LABEL_55;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (*(_BYTE *)(a1 + 49))
      {
LABEL_8:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v42, v6, 0);
        v11 = *(std::__shared_weak_count **)(a1 + 16);
        v37 = *(_QWORD *)(a1 + 8);
        v40 = v37;
        v41 = v11;
        if (!v11)
          goto LABEL_26;
LABEL_24:
        v18 = (unint64_t *)&v11->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
LABEL_26:
        v20 = *(_DWORD *)(a1 + 40);
        v21 = *(_DWORD *)(a1 + 44);
        v22 = *a2;
        v23 = a2[1];
        v24 = *(_QWORD *)(a1 + 24);
        if (a2[3])
          v25 = a2[2] == 0;
        else
          v25 = 1;
        if (v25)
          v26 = 0;
        else
          v26 = *((_QWORD *)a2 + 1);
        v27 = *(_QWORD *)(a1 + 40);
        if (HIDWORD(v26) * HIDWORD(v27) == -1
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v28 = v24 + 2 * (v22 * v20 + v23 * v21);
        v29 = *(_WORD *)(a1 + 48);
        if (v11)
        {
          v30 = (unint64_t *)&v11->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          do
            v32 = __ldxr(v30);
          while (__stxr(v32 + 1, v30));
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = v11;
          *(_QWORD *)(a3 + 16) = v28;
          *(_QWORD *)(a3 + 24) = v26;
          *(_QWORD *)(a3 + 32) = v27;
          *(_WORD *)(a3 + 40) = v29;
          do
            v33 = __ldaxr(v30);
          while (__stlxr(v33 - 1, v30));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        else
        {
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = v28;
          *(_QWORD *)(a3 + 24) = v26;
          *(_QWORD *)(a3 + 32) = v27;
          *(_WORD *)(a3 + 40) = v29;
        }
        if (v41)
        {
          v34 = &v41->__shared_owners_;
          do
            v35 = __ldaxr((unint64_t *)v34);
          while (__stlxr(v35 - 1, (unint64_t *)v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v36 = v42;
        v42 = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        return;
      }
    }
    else
    {
LABEL_55:
      if (*(_BYTE *)(a1 + 49))
        goto LABEL_8;
    }
    v42 = 0;
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    v37 = *(_QWORD *)(a1 + 8);
    v40 = v37;
    v41 = v11;
    if (!v11)
      goto LABEL_26;
    goto LABEL_24;
  }
  v40 = 0;
  v41 = 0;
  if (a2[3])
    v12 = a2[2] == 0;
  else
    v12 = 1;
  v13 = *((_QWORD *)a2 + 1);
  if (v12)
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v38 = *(_QWORD *)(a1 + 24)
                  + 2 * (*a2 * *(_DWORD *)(a1 + 40) + a2[1] * *(_DWORD *)(a1 + 44));
  *((_QWORD *)&v38 + 1) = v13;
  v39 = v14;
  if (HIDWORD(v13) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223EF29B4(a3, &v40, &v38);
  v15 = v41;
  if (v41)
  {
    v16 = &v41->__shared_owners_;
    do
      v17 = __ldaxr((unint64_t *)v16);
    while (__stlxr(v17 - 1, (unint64_t *)v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_223EF2974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  sub_223167354((uint64_t)&a14);
  v17 = a16;
  a16 = 0;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223EF29B4(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_223EF2AC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EF2B04(uint64_t a1, uint64_t a2, _BOOL8 a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
      if (!v6)
        goto LABEL_20;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v6)
        goto LABEL_20;
    }
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!*(_BYTE *)(a1 + 81))
          goto LABEL_20;
LABEL_17:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v23, v6, 0);
        v16 = *(_QWORD *)(a2 + 8);
        v15 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v15)
          goto LABEL_25;
        goto LABEL_21;
      }
    }
LABEL_16:
    if (!*(_BYTE *)(a1 + 81))
      goto LABEL_20;
    goto LABEL_17;
  }
  if (v6)
    goto LABEL_16;
LABEL_20:
  v23 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_25;
LABEL_21:
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v16)
      goto LABEL_30;
    goto LABEL_26;
  }
LABEL_25:
  if (!v16)
    goto LABEL_30;
LABEL_26:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 64))
      goto LABEL_33;
    goto LABEL_31;
  }
LABEL_30:
  v22 = 0;
  if (!*(_DWORD *)(a1 + 64))
    goto LABEL_33;
LABEL_31:
  if (*(_DWORD *)(a1 + 68))
    sub_223EF2D50(a3, a1, a2);
LABEL_33:
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223EF2CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_223EF2D50(_BOOL8 result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int i;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  _QWORD v24[3];

  v4 = *(_DWORD *)(a2 + 64);
  v3 = *(_DWORD *)(a2 + 68);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = (_QWORD *)result;
    v9 = *(unsigned int *)(a3 + 104);
    v19 = (unint64_t)*(unsigned int *)(a3 + 100) << 32;
    v20 = v4 - 1;
    v10 = *(unsigned int *)(a2 + 76);
    v21 = *(unsigned int *)(a2 + 72) | (unint64_t)(v9 << 32);
    v22 = v3 - 1;
    v23 = v10 | ((unint64_t)*(unsigned int *)(a3 + 108) << 32);
    v11 = *(unsigned __int16 **)(a2 + 56);
    if (*(_BYTE *)(a2 + 80) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
      v11 = *(unsigned __int16 **)(a2 + 56);
    }
    v17 = *(char **)(a3 + 32);
    if (*(_BYTE *)(a3 + 128) && v17)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v17 = *(char **)(a3 + 32);
    }
    memset(v24, 0, sizeof(v24));
    if (v22)
    {
      for (i = 0; i < v22; ++i)
      {
        sub_223EF2ED8((_BOOL8)&v19, v24, v8, v11, v17);
        v11 += v23;
        v17 += HIDWORD(v23);
      }
    }
    return sub_223EF2ED8((_BOOL8)&v19, v24, v8, v11, v17);
  }
  return result;
}

BOOL sub_223EF2ED8(_BOOL8 result, _QWORD *a2, _QWORD *a3, unsigned __int16 *a4, char *a5)
{
  char *v5;
  _DWORD *v9;
  unsigned int i;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  char v20;

  v5 = a5;
  a2[1] = a5;
  if (*(_DWORD *)(result + 8))
  {
    v9 = (_DWORD *)result;
    for (i = 0; i < v9[2]; ++i)
    {
      *a2 = a4;
      a2[1] = v5;
      v11 = *a4;
      if (v11 == 0xFFFF)
      {
        v14 = 0;
        v15 = 0;
        v13 = 0x80;
        if (v5)
          goto LABEL_3;
      }
      else
      {
        v12 = (char *)(*a3 + 3 * v11);
        v13 = *v12;
        v14 = v12[1];
        v15 = v12[2];
        if (v5)
          goto LABEL_3;
      }
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_9;
LABEL_3:
      *v5 = v13;
      v5[1] = v14;
      v5[2] = v15;
      a4 += v9[3];
      v5 += v9[4];
    }
  }
  *a2 = a4;
  a2[1] = v5;
  v16 = *a4;
  if (v16 == 0xFFFF)
  {
    v19 = 0;
    v20 = 0;
    v18 = 0x80;
    if (v5)
      goto LABEL_15;
  }
  else
  {
    v17 = (char *)(*a3 + 3 * v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    if (v5)
      goto LABEL_15;
  }
  result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
  if (result)
LABEL_9:
    abort();
LABEL_15:
  *v5 = v18;
  v5[1] = v19;
  v5[2] = v20;
  return result;
}

_QWORD *sub_223EF3060(_QWORD *result)
{
  int *v1;
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;

  v2 = *result;
  v1 = (int *)result[1];
  v3 = *(unsigned int *)(*result + 32);
  v4 = *(unsigned int *)(*result + 44);
  if ((_DWORD)v4 == *(_DWORD *)(*result + 40) * (_DWORD)v3)
  {
    v5 = *(_DWORD *)(v2 + 36);
    v6 = *(void **)(v2 + 24);
    if (*(_BYTE *)(v2 + 48))
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = *(_QWORD *)(v2 + 8);
      v9 = *(std::__shared_weak_count **)(v2 + 16);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v8 + 88))(v8, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v6 = *(void **)(v2 + 24);
    }
    return memset(v6, *v1, (v5 * v3));
  }
  else
  {
    v13 = *(_DWORD *)(v2 + 36);
    if ((_DWORD)v3)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14)
    {
      v15 = v13 - 1;
      v16 = *(char **)(v2 + 24);
      if (*(_BYTE *)(v2 + 48))
        v17 = v16 == 0;
      else
        v17 = 1;
      if (!v17)
      {
        v18 = *(_QWORD *)(v2 + 8);
        v19 = *(std::__shared_weak_count **)(v2 + 16);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v18 + 88))(v18, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v16 = *(char **)(v2 + 24);
      }
      for (; v15; --v15)
      {
        memset(v16, *v1, v3);
        v16 += v4;
      }
      return memset(v16, *v1, v3);
    }
  }
  return result;
}

uint64_t sub_223EF321C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _DWORD **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  int v19;
  _BYTE *v20;

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = (_DWORD **)result;
    v7 = v2 - 1;
    v8 = *(unsigned int *)(a2 + 40);
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(_BYTE **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v10 = *(_BYTE **)(a2 + 24);
    }
    v17 = v3 - 1;
    if (v7)
    {
      if (v3 == 1)
      {
        do
        {
          *v10 = **v6;
          v10 += v9;
          --v7;
        }
        while (v7);
      }
      else
      {
        for (i = 0; i != v7; ++i)
        {
          v19 = v3 - 1;
          v20 = v10;
          do
          {
            *v20 = **v6;
            v20 += v8;
            --v19;
          }
          while (v19);
          *v20 = **v6;
          v10 += v9;
        }
      }
    }
    if (v3 != 1)
    {
      do
      {
        *v10 = **v6;
        v10 += v8;
        --v17;
      }
      while (v17);
    }
    *v10 = **v6;
  }
  return result;
}

uint64_t sub_223EF3378(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)a1 = &off_24EC216B8;
  sub_2231C1D58((_WORD *)(a1 + 8));
  *(_QWORD *)(a1 + 88) = &off_24EC24788;
  sub_223484C70((uint64_t *)(a1 + 96));
  *(_QWORD *)(a1 + 176) = &off_24EC22138;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v6 = 0uLL;
  sub_2236B4CF4(a1 + 184, &v8, &v6);
  v2 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)(a1 + 232) = &off_24EC24788;
  sub_223484C70((uint64_t *)(a1 + 240));
  return a1;
}

void sub_223EF3450(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_2231DE1B4(v3);
  sub_223167354(v2);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223EF34B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223EF34C8(uint64_t result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(std::__shared_weak_count **)(result + 248);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)v1[24];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)v1[13];
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)v1[2];
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223EF35E0(unsigned int **a1, int *a2, int a3, int a4, int a5, int a6, int8x16_t **a7)
{
  int8x16_t *v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int8x16_t *v21;
  int8x16_t *v22;
  __int32 *v23;
  uint64_t v24;
  __int32 v25;
  int8x16_t *v27;
  int8x16_t *v28;
  int64_t v30;
  __int8 *v31;
  uint64_t v32;
  int8x16_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int *v43[3];
  int *v44[3];
  int v45;
  int v46;

  v46 = a5;
  v45 = a6;
  v9 = *a7;
  a7[1] = *a7;
  v44[0] = &v46;
  v44[1] = a2;
  v44[2] = (int *)a7;
  v43[0] = &v45;
  v43[1] = a2;
  v43[2] = (int *)a7;
  v10 = *a1;
  v11 = a1[1];
  if (*a1 == v11)
  {
    v17 = (uint64_t)v9;
  }
  else
  {
    v12 = a3 - 1;
    v13 = a4 - 1;
    do
    {
      v14 = v10[1];
      if (v14)
        sub_223EF3860(v44, v14 - 1, *v10, v10[2]);
      v15 = v10[3];
      if (v15 != v13)
        sub_223EF3860(v44, v15 + 1, *v10, v10[2]);
      if (*v10)
        sub_223EF3A68(v43, *v10 - 1, v10[1], v10[3]);
      v16 = v10[2];
      if (v16 != v12)
        sub_223EF3A68(v43, v16 + 1, v10[1], v10[3]);
      v10 += 4;
    }
    while (v10 != v11);
    v17 = (uint64_t)*a7;
    v9 = a7[1];
  }
  v18 = 126 - 2 * __clz(((uint64_t)v9->i64 - v17) >> 3);
  if (v9 == (int8x16_t *)v17)
    v19 = 0;
  else
    v19 = v18;
  result = sub_223EF7CBC(v17, v9, v19, 1);
  v22 = *a7;
  v21 = a7[1];
  if (*a7 != v21)
  {
    v23 = &v22[-1].i32[2];
    do
    {
      if (v23 + 4 == (__int32 *)v21)
        return result;
      v25 = v23[2];
      v23 += 2;
      LODWORD(v24) = v25;
    }
    while (v25 != v23[2] || v23[1] != v23[3]);
    v27 = (int8x16_t *)(v23 + 4);
    if (v23 + 4 == (__int32 *)v21)
    {
      v28 = (int8x16_t *)(v23 + 2);
      if (v28 == v21)
        return result;
LABEL_35:
      v30 = (char *)v28 - (char *)v22;
      v31 = &v22->i8[((char *)v28 - (char *)v22) & 0xFFFFFFFFFFFFFFF8];
      v32 = (char *)v21 - (char *)v28;
      v33 = (int8x16_t *)&v31[(char *)v21 - (char *)v28];
      if (v33 == v21)
      {
        v38 = (int8x16_t *)v31;
      }
      else
      {
        v34 = (char *)v21 - &v22->i8[v32 + (v30 & 0xFFFFFFFFFFFFFFF8)] - 8;
        if (v34 < 0x58)
        {
          v38 = (int8x16_t *)v31;
        }
        else if ((unint64_t)(v32 + 31) < 0x20)
        {
          v38 = (int8x16_t *)v31;
        }
        else
        {
          v35 = v32 >> 3;
          v36 = (v34 >> 3) + 1;
          v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
          v38 = (int8x16_t *)&v31[v37];
          v33 = (int8x16_t *)((char *)v33 + v37);
          v39 = 8 * v35;
          v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v41 = *(_OWORD *)&v31[v39 + 16];
            *(_OWORD *)v31 = *(_OWORD *)&v31[v39];
            *((_OWORD *)v31 + 1) = v41;
            v31 += 32;
            v40 -= 4;
          }
          while (v40);
          if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_46;
        }
        do
        {
          v42 = v33->i64[0];
          v33 = (int8x16_t *)((char *)v33 + 8);
          v38->i64[0] = v42;
          v38 = (int8x16_t *)((char *)v38 + 8);
        }
        while (v33 != v21);
      }
LABEL_46:
      a7[1] = v38;
      return result;
    }
    do
    {
      if ((_DWORD)v24 != v27->i32[0] || v23[1] != v27->i32[1])
      {
        v24 = v27->i64[0];
        *((_QWORD *)v23 + 1) = v27->i64[0];
        v23 += 2;
      }
      v27 = (int8x16_t *)((char *)v27 + 8);
    }
    while (v27 != v21);
    v22 = *a7;
    v21 = a7[1];
    v28 = (int8x16_t *)(v23 + 2);
    if (v28 != v21)
      goto LABEL_35;
  }
  return result;
}

int **sub_223EF3860(int **result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int **v35;
  uint64_t v36;

  if (a3 <= a4)
  {
    v4 = a3;
    v5 = a2 << 32;
    v6 = **result;
    v35 = result;
    v36 = a2 << 32;
    v34 = a4;
    v33 = a2;
    while (1)
    {
      LODWORD(v7) = v6 + v4;
      if (!*(_BYTE *)(*((_QWORD *)result[1] + 3) + result[1][10] * v4 + result[1][11] * (_DWORD)a2)
        && v4 < v7)
      {
        break;
      }
LABEL_5:
      v4 = v7;
      if (v7 > a4)
        return result;
    }
    v9 = v4;
    while (1)
    {
      v11 = (char **)result[2];
      v12 = v9 | v5;
      v14 = v11[1];
      v13 = (unint64_t)v11[2];
      if ((unint64_t)v14 >= v13)
        break;
      *(_QWORD *)v14 = v12;
      v10 = (uint64_t)(v14 + 8);
LABEL_12:
      v11[1] = (char *)v10;
      ++v9;
      v6 = **result;
      v7 = v6 + v4;
      if (v9 >= v7)
      {
        a4 = v34;
        LODWORD(a2) = v33;
        goto LABEL_5;
      }
    }
    v15 = *v11;
    v16 = v14 - *v11;
    v17 = v16 >> 3;
    v18 = (v16 >> 3) + 1;
    if (v18 >> 61)
      sub_22316E078();
    v19 = v13 - (_QWORD)v15;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        sub_223174E94();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v17];
      *(_QWORD *)v22 = v12;
      v10 = (uint64_t)(v22 + 8);
      v23 = (char *)(v14 - v15);
      if (v14 == v15)
        goto LABEL_32;
    }
    else
    {
      v21 = 0;
      v22 = (char *)(8 * v17);
      *(_QWORD *)(8 * v17) = v12;
      v10 = 8 * v17 + 8;
      v23 = (char *)(v14 - v15);
      if (v14 == v15)
      {
LABEL_32:
        *v11 = v22;
        v11[1] = (char *)v10;
        v11[2] = &v21[8 * v20];
        if (v14)
          operator delete(v14);
        result = v35;
        v5 = v36;
        goto LABEL_12;
      }
    }
    v24 = (unint64_t)(v23 - 8);
    if (v24 < 0x58)
      goto LABEL_39;
    if ((unint64_t)(v14 - v21 - v16) < 0x20)
      goto LABEL_39;
    v25 = (v24 >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v14[-v26];
    v22 -= v26;
    v28 = &v21[8 * v17 - 16];
    v29 = v14 - 16;
    v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    v14 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        v32 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v22 - 1) = v32;
        v22 -= 8;
      }
      while (v14 != v15);
    }
    v14 = *v11;
    goto LABEL_32;
  }
  return result;
}

int **sub_223EF3A68(int **result, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int **v35;
  uint64_t v36;

  if (a3 <= a4)
  {
    v4 = a3;
    v5 = a2;
    v6 = **result;
    v35 = result;
    v36 = a2;
    v33 = a2;
    v34 = a4;
    while (1)
    {
      LODWORD(v7) = v6 + v4;
      if (!*(_BYTE *)(*((_QWORD *)result[1] + 3) + result[1][10] * a2 + result[1][11] * v4) && v4 < v7)
        break;
LABEL_5:
      v4 = v7;
      if (v7 > a4)
        return result;
    }
    v9 = v4;
    while (1)
    {
      v11 = (char **)result[2];
      v12 = v5 | (v9 << 32);
      v14 = v11[1];
      v13 = (unint64_t)v11[2];
      if ((unint64_t)v14 >= v13)
        break;
      *(_QWORD *)v14 = v12;
      v10 = (uint64_t)(v14 + 8);
LABEL_12:
      v11[1] = (char *)v10;
      ++v9;
      v6 = **result;
      v7 = v6 + v4;
      if (v9 >= v7)
      {
        a2 = v33;
        a4 = v34;
        goto LABEL_5;
      }
    }
    v15 = *v11;
    v16 = v14 - *v11;
    v17 = v16 >> 3;
    v18 = (v16 >> 3) + 1;
    if (v18 >> 61)
      sub_22316E078();
    v19 = v13 - (_QWORD)v15;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        sub_223174E94();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v17];
      *(_QWORD *)v22 = v12;
      v10 = (uint64_t)(v22 + 8);
      v23 = (char *)(v14 - v15);
      if (v14 == v15)
        goto LABEL_32;
    }
    else
    {
      v21 = 0;
      v22 = (char *)(8 * v17);
      *(_QWORD *)(8 * v17) = v12;
      v10 = 8 * v17 + 8;
      v23 = (char *)(v14 - v15);
      if (v14 == v15)
      {
LABEL_32:
        *v11 = v22;
        v11[1] = (char *)v10;
        v11[2] = &v21[8 * v20];
        if (v14)
          operator delete(v14);
        result = v35;
        v5 = v36;
        goto LABEL_12;
      }
    }
    v24 = (unint64_t)(v23 - 8);
    if (v24 < 0x58)
      goto LABEL_39;
    if ((unint64_t)(v14 - v21 - v16) < 0x20)
      goto LABEL_39;
    v25 = (v24 >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v14[-v26];
    v22 -= v26;
    v28 = &v21[8 * v17 - 16];
    v29 = v14 - 16;
    v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    v14 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        v32 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v22 - 1) = v32;
        v22 -= 8;
      }
      while (v14 != v15);
    }
    v14 = *v11;
    goto LABEL_32;
  }
  return result;
}

void sub_223EF3C68(uint64_t *a1, float64x2_t ***a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int32x4_t a7, double a8, double a9, int32x4_t a10, __n128 a11, float32x4_t a12, double a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t i;
  uint64_t v16;
  unsigned int *v17;
  double v18;
  float32x4_t v20;
  int8x16_t v21;
  double v22;
  double v23;
  float32x2_t v24;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int128 *v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  __int16 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  int v92;
  void *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  char *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  int j;
  int v107;
  int v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  _BYTE *v120;
  uint64_t (**v121)();
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int32x2_t v148;
  unsigned __int8 v149;
  __int16 v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  size_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  int v173;
  int v174;
  BOOL v175;
  size_t v176;
  uint64_t v177;
  unsigned __int8 v178;
  uint64_t k;
  uint64_t v180;
  unsigned __int8 v181;
  __int16 v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  BOOL v200;
  uint64_t v202;
  unsigned int v203;
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t m;
  unsigned __int8 v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  __n128 *v217;
  unsigned int v218;
  size_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;
  BOOL v227;
  uint64_t (**v228)();
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  __n128 *v236;
  unsigned int v237;
  unsigned int v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  _BOOL4 v244;
  __n128 *v245;
  int v246;
  float *v247;
  unsigned int v248;
  unsigned int v249;
  float v250;
  float32x4_t v253;
  unsigned int v254;
  uint64_t v255;
  __n128 *v256;
  int32x4_t v257;
  float32x4_t v258;
  float64x2_t **v261;
  float64x2_t **v263;
  unsigned int *v267;
  int v268;
  int v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  float32x4_t v274;
  double v275;
  float32x4_t v276;
  _QWORD v277[2];
  uint64_t (**v278)();
  uint64_t v279;
  std::__shared_weak_count *v280;
  void *__b;
  size_t __len;
  uint64_t v283;
  __int16 v284;
  uint64_t (**v285)();
  uint64_t v286;
  std::__shared_weak_count *v287;
  __int128 v288;
  uint64_t v289;
  __int16 v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  __int128 *v293;
  uint64_t v294;
  std::__shared_weak_count *v295;

  v263 = *a2;
  v261 = a2[1];
  if (*a2 != v261)
  {
    for (i = 0; ; ++i)
    {
      v16 = *a3 + 24 * i;
      v17 = *(unsigned int **)v16;
      v267 = *(unsigned int **)(v16 + 8);
      if (*(unsigned int **)v16 != v267)
        break;
LABEL_3:
      if (++v263 == v261)
        return;
    }
    v18 = (*v263)[3].f64[0];
    _Q2 = (*v263)[2];
    LODWORD(a13) = *(_DWORD *)(a4 + 8);
    a10.i64[0] = *(_QWORD *)a4;
    a10.i32[2] = LODWORD(a13);
    *(float32x2_t *)a7.i8 = vcvt_f32_f64(_Q2);
    a14.i32[0] = *(_DWORD *)(a4 + 20);
    a11.n128_u64[0] = *(_QWORD *)(a4 + 12);
    a11.n128_u32[2] = a14.i32[0];
    a12.i32[0] = *(_DWORD *)(a4 + 32);
    v14.i64[0] = *(_QWORD *)(a4 + 24);
    v20 = (float32x4_t)vzip1q_s32(a10, (int32x4_t)a11);
    v20.i32[2] = v14.i32[0];
    v21 = (int8x16_t)vtrn2q_s32(a10, (int32x4_t)a11);
    v21.i32[2] = v14.i32[1];
    v14.i32[2] = a12.i32[0];
    v22 = (*v263)[11].f64[1];
    v23 = (*v263)[12].f64[0];
    *(float *)&v22 = v22;
    *(float *)&v23 = v23;
    v24 = vadd_f32(*(float32x2_t *)a12.f32, vmla_f32(vmul_f32(*(float32x2_t *)&a13, *(float32x2_t *)&v22), *(float32x2_t *)&v23, *(float32x2_t *)a14.f32));
    _D7 = vcvtq_f64_f32(vadd_f32(*(float32x2_t *)&v14, vmla_n_f32(vmul_n_f32(*(float32x2_t *)a4, *(float *)&v22), *(float32x2_t *)&a11, *(float *)&v23))).f64[1];
    __asm { FMLA            D22, D7, V2.D[1] }
    v24.f32[0] = (*v263)[1].f64[1] / vmlad_n_f64(_D22, v18, vcvtq_f64_f32(v24).f64[0]);
    v29 = (int8x16_t)vmulq_n_f32((float32x4_t)a10, v24.f32[0]);
    v30 = (int8x16_t)vmulq_n_f32((float32x4_t)a11, v24.f32[0]);
    v31 = (int8x16_t)vmulq_n_f32(v14, v24.f32[0]);
    v32 = vadd_f32(*(float32x2_t *)v31.i8, vmla_n_f32(vmul_n_f32(*(float32x2_t *)v29.i8, *(float *)&v22), *(float32x2_t *)v30.i8, *(float *)&v23));
    *(float32x2_t *)v30.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(float32x2_t *)&v22), *(float32x2_t *)&v23, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)));
    *(float32x2_t *)v31.i8 = v32;
    v31.i64[1] = v30.i64[0];
    v33 = (int8x16_t)vzip2q_s32(a10, (int32x4_t)a11);
    v33.i32[2] = a12.i32[0];
    *(float *)&v18 = v18;
    v34 = (int8x16_t)vmulq_n_f32(v20, v24.f32[0]);
    v35 = (int8x16_t)vmulq_n_f32((float32x4_t)v21, v24.f32[0]);
    v36 = (int8x16_t)vmulq_n_f32((float32x4_t)v33, v24.f32[0]);
    v37 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v22, *(float32x2_t *)v35.i8), *(float32x2_t *)&v23, *(float32x2_t *)v35.i8, 1);
    v38 = (float32x4_t)vextq_s8(v35, v35, 8uLL);
    v39 = (int8x16_t)vmulq_n_f32((float32x4_t)v31, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)&v22, *(float32x2_t *)v34.i8), *(float32x2_t *)&v23, *(float32x2_t *)v34.i8, 1)), v32), vadd_f32(*(float32x2_t *)v38.f32, v37), v32, 1), *(float32x2_t *)v30.i8, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL),
                                 vmla_lane_f32(vmul_f32(*(float32x2_t *)&v22, *(float32x2_t *)v36.i8), *(float32x2_t *)&v23, *(float32x2_t *)v36.i8, 1))).f32[0]));
    v40 = (int8x16_t)a7;
    v40.i32[2] = LODWORD(v18);
    *(float32x2_t *)v38.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)v39.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1), *(float32x2_t *)a7.i8, 1);
    v41 = (float32x4_t)vextq_s8(v39, v39, 8uLL);
    *(float32x2_t *)v38.f32 = vmla_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v41.f32, *(float32x2_t *)&v18);
    v41.i32[0] = 0;
    v42 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v38, v41), 0), (int8x16_t)vnegq_f32((float32x4_t)v40), v40);
    v20.i32[3] = v21.i32[0];
    v38.i64[0] = vextq_s8(v42, v42, 8uLL).u64[0];
    *(float32x2_t *)v40.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v42.i8, v32), (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1), *(float32x2_t *)v42.i8, 1), *(float32x2_t *)v30.i8, *(float32x2_t *)v38.f32);
    v43 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.i8, 0);
    v44 = (int8x16_t)vdivq_f32((float32x4_t)vextq_s8(vextq_s8(v21, v21, 0xCuLL), v33, 8uLL), v43);
    v45 = (int8x16_t)vdivq_f32(v20, v43);
    *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v45.i8, *(float *)v42.i32), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v44, 0xCuLL), *(float32x2_t *)v42.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), (float32x4_t)v42, 2);
    v275 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), *(float32x2_t *)v42.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), *(float32x2_t *)v44.i8, 1), *(float32x2_t *)v38.f32, vdiv_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), *(float32x2_t *)v40.i8)));
    v276 = v20;
    v46 = v20.f32[1];
    v274 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v275, 0);
    while (1)
    {
      v47 = v17[1];
      v48 = v17[2];
      if (v48 >= *v17)
        v49 = v48 - *v17 + 1;
      else
        v49 = 0;
      v50 = v17[3];
      _CF = v50 >= v47;
      v51 = v50 - v47;
      if (_CF)
        v52 = v51 + 1;
      else
        v52 = 0;
      v277[0] = *(_QWORD *)v17;
      v277[1] = v49 | (v52 << 32);
      v285 = &off_24EC22138;
      v53 = *(_QWORD *)(a5 + 8);
      v54 = *(std::__shared_weak_count **)(a5 + 16);
      v294 = v53;
      v295 = v54;
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldxr(p_shared_owners);
        while (__stxr(v56 + 1, p_shared_owners));
        v291 = v53;
        v292 = v54;
        do
          v57 = __ldxr(p_shared_owners);
        while (__stxr(v57 + 1, p_shared_owners));
        do
          v58 = __ldxr(p_shared_owners);
        while (__stxr(v58 + 1, p_shared_owners));
        v286 = v53;
        v287 = v54;
        do
          v59 = __ldxr(p_shared_owners);
        while (__stxr(v59 + 1, p_shared_owners));
        do
          v60 = __ldaxr(p_shared_owners);
        while (__stlxr(v60 - 1, p_shared_owners));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      else
      {
        v291 = v53;
        v292 = 0;
        v286 = v53;
        v287 = 0;
      }
      (*(void (**)(__int128 **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v53 + 64))(&v293, v53, 1);
      v61 = v293;
      v62 = *((_QWORD *)v293 + 2);
      v288 = *v293;
      v289 = v62;
      v293 = 0;
      MEMORY[0x227684CE8](v61);
      v63 = v286;
      v64 = v287;
      if (v287)
      {
        v65 = (unint64_t *)&v287->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
        do
          v67 = __ldaxr(v65);
        while (__stlxr(v67 - 1, v65));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 104))(v63);
      v69 = v68;
      if ((v68 & 0xFFFFFF) <= 0x10000)
        v69 = 0;
      v70 = v68 & 0xFF00;
      if ((v68 & 0xFF0000) == 0)
        v70 = 0;
      v290 = v70 & 0xFF00 | v69;
      v71 = v292;
      if (!v292)
        goto LABEL_39;
      v72 = (unint64_t *)&v292->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
        v74 = v295;
        if (v295)
        {
LABEL_40:
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
      }
      else
      {
LABEL_39:
        v74 = v295;
        if (v295)
          goto LABEL_40;
      }
      v278 = &off_24EC22138;
      sub_2236B4984((uint64_t)&v285, v277, (uint64_t)&v279);
      v77 = v287;
      if (!v287)
        goto LABEL_49;
      v78 = (unint64_t *)&v287->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
        v80 = v279;
        if (!v279)
          goto LABEL_92;
      }
      else
      {
LABEL_49:
        v80 = v279;
        if (!v279)
          goto LABEL_92;
      }
      v81 = v280;
      if (!v280)
        goto LABEL_64;
      v82 = (unint64_t *)&v280->__shared_owners_;
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
      do
        v84 = __ldaxr(v82);
      while (__stlxr(v84 - 1, v82));
      if (v84)
      {
        v80 = v279;
        v85 = v280;
        if (!v280)
          goto LABEL_64;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
        v80 = v279;
        v85 = v280;
        if (!v280)
          goto LABEL_64;
      }
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
      do
        v88 = __ldaxr(v86);
      while (__stlxr(v88 - 1, v86));
      if (v88)
      {
LABEL_64:
        if (HIBYTE(v284))
          goto LABEL_65;
        goto LABEL_92;
      }
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
      if (HIBYTE(v284))
      {
LABEL_65:
        (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)v80 + 96))(&v285, v80, 1);
        v89 = v283;
        if ((_DWORD)v283 == 1)
          goto LABEL_66;
        goto LABEL_93;
      }
LABEL_92:
      v285 = 0;
      v89 = v283;
      if ((_DWORD)v283 == 1)
      {
LABEL_66:
        v90 = HIDWORD(v283);
        v91 = __len;
        if (HIDWORD(v283) == (_DWORD)__len)
        {
          v92 = HIDWORD(__len);
          v93 = __b;
          if ((_BYTE)v284 && __b)
          {
            v94 = v279;
            v95 = v280;
            if (v280)
            {
              v96 = (unint64_t *)&v280->__shared_owners_;
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
              do
                v98 = __ldaxr(v96);
              while (__stlxr(v98 - 1, v96));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v94 + 88))(v94, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v93 = __b;
          }
          memset(v93, i, (v92 * v90));
        }
        else if ((_DWORD)__len)
        {
          v99 = HIDWORD(__len);
          if (HIDWORD(__len))
          {
            v100 = (char *)__b;
            if ((_BYTE)v284 && __b)
            {
              v101 = v279;
              v102 = v280;
              if (v280)
              {
                v103 = (unint64_t *)&v280->__shared_owners_;
                do
                  v104 = __ldxr(v103);
                while (__stxr(v104 + 1, v103));
                do
                  v105 = __ldaxr(v103);
                while (__stlxr(v105 - 1, v103));
                if (!v105)
                {
                  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                  std::__shared_weak_count::__release_weak(v102);
                }
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v101 + 88))(v101, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v100 = (char *)__b;
            }
            for (j = v99 - 1; j; --j)
            {
              memset(v100, i, v91);
              v100 += v90;
            }
            memset(v100, i, v91);
          }
        }
        goto LABEL_115;
      }
LABEL_93:
      v107 = __len;
      if ((_DWORD)__len)
      {
        v108 = HIDWORD(__len);
        if (HIDWORD(__len))
        {
          v109 = HIDWORD(v283);
          v110 = __b;
          if ((_BYTE)v284 && __b)
          {
            v111 = v279;
            v112 = v280;
            if (v280)
            {
              v113 = (unint64_t *)&v280->__shared_owners_;
              do
                v114 = __ldxr(v113);
              while (__stxr(v114 + 1, v113));
              do
                v115 = __ldaxr(v113);
              while (__stlxr(v115 - 1, v113));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v111 + 88))(v111, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v110 = __b;
          }
          v116 = v107 - 1;
          v117 = v108 - 1;
          if (v108 != 1)
          {
            if (v107 == 1)
            {
              do
              {
                *v110 = i;
                v110 += v109;
                --v117;
              }
              while (v117);
            }
            else
            {
              v118 = 0;
              do
              {
                v119 = v107 - 1;
                v120 = v110;
                do
                {
                  *v120 = i;
                  v120 += v89;
                  --v119;
                }
                while (v119);
                *v120 = i;
                v110 += v109;
                ++v118;
              }
              while (v118 != v117);
            }
          }
          if (v107 != 1)
          {
            do
            {
              *v110 = i;
              v110 += v89;
              --v116;
            }
            while (v116);
          }
          *v110 = i;
        }
      }
LABEL_115:
      v121 = v285;
      v285 = 0;
      if (v121)
        (*((void (**)(uint64_t (**)()))*v121 + 1))(v121);
      v122 = v280;
      if (v280)
      {
        v123 = (unint64_t *)&v280->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v125 = v17[1];
      v126 = v17[2];
      if (v126 >= *v17)
        v127 = v126 - *v17 + 1;
      else
        v127 = 0;
      v128 = v17[3];
      _CF = v128 >= v125;
      v129 = v128 - v125;
      if (_CF)
        v130 = v129 + 1;
      else
        v130 = 0;
      v131 = *(_QWORD *)v17;
      v285 = &off_24EC21FE8;
      v132 = *(_QWORD *)(a6 + 8);
      v133 = *(std::__shared_weak_count **)(a6 + 16);
      v294 = v132;
      v295 = v133;
      if (v133)
      {
        v134 = (unint64_t *)&v133->__shared_owners_;
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
        v291 = v132;
        v292 = v133;
        do
          v136 = __ldxr(v134);
        while (__stxr(v136 + 1, v134));
        do
          v137 = __ldxr(v134);
        while (__stxr(v137 + 1, v134));
        v286 = v132;
        v287 = v133;
        do
          v138 = __ldxr(v134);
        while (__stxr(v138 + 1, v134));
        do
          v139 = __ldaxr(v134);
        while (__stlxr(v139 - 1, v134));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      else
      {
        v291 = v132;
        v292 = 0;
        v286 = v132;
        v287 = 0;
      }
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v132 + 64))(v277, v132, 4);
      v140 = v277[0];
      v141 = *(_QWORD *)(v277[0] + 16);
      v288 = *(_OWORD *)v277[0];
      v289 = v141;
      v277[0] = 0;
      MEMORY[0x227684CE8](v140);
      v142 = v286;
      v143 = v287;
      if (v287)
      {
        v144 = (unint64_t *)&v287->__shared_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
        do
          v146 = __ldaxr(v144);
        while (__stlxr(v146 - 1, v144));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 104))(v142);
      v149 = v147;
      if ((v147 & 0xFFFFFF) <= 0x10000)
        v149 = 0;
      v150 = v147 & 0xFF00;
      if ((v147 & 0xFF0000) == 0)
        v150 = 0;
      v290 = v150 & 0xFF00 | v149;
      v151 = v292;
      if (!v292)
        goto LABEL_154;
      v152 = (unint64_t *)&v292->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
        v154 = v295;
        if (!v295)
          goto LABEL_160;
      }
      else
      {
LABEL_154:
        v154 = v295;
        if (!v295)
          goto LABEL_160;
      }
      v155 = (unint64_t *)&v154->__shared_owners_;
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
LABEL_160:
      v278 = &off_24EC21FE8;
      v157 = v286;
      if (!v286)
      {
        v164 = v131;
        v294 = 0;
        v295 = 0;
        v166 = v289;
        v165 = HIDWORD(v289);
        v167 = v288;
        if ((_DWORD)v130)
          _ZF = (_DWORD)v127 == 0;
        else
          _ZF = 1;
        if (_ZF)
          v169 = 0;
        else
          v169 = v127 | (v130 << 32);
        v170 = v289;
        if (HIDWORD(v289) * HIDWORD(v169) == -1
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v279 = 0;
        v280 = 0;
        __b = (void *)(v167 + 4 * (v166 * v164 + v165 * HIDWORD(v164)));
        __len = v169;
        v283 = v170;
        v284 = 0;
        goto LABEL_213;
      }
      v158 = v287;
      if (!v287)
        goto LABEL_166;
      v159 = (unint64_t *)&v287->__shared_owners_;
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
      do
        v161 = __ldaxr(v159);
      while (__stlxr(v161 - 1, v159));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
        if (HIBYTE(v290))
        {
LABEL_167:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v157 + 96))(&v291, v157, 0);
          v272 = v131;
          v163 = v286;
          v162 = v287;
          v294 = v286;
          v295 = v287;
          if (v287)
            goto LABEL_180;
          goto LABEL_182;
        }
      }
      else
      {
LABEL_166:
        if (HIBYTE(v290))
          goto LABEL_167;
      }
      v291 = 0;
      v272 = v131;
      v163 = v286;
      v162 = v287;
      v294 = v286;
      v295 = v287;
      if (v287)
      {
LABEL_180:
        v171 = (unint64_t *)&v162->__shared_owners_;
        do
          v172 = __ldxr(v171);
        while (__stxr(v172 + 1, v171));
      }
LABEL_182:
      v173 = v289;
      v174 = HIDWORD(v289);
      v270 = v288;
      if ((_DWORD)v130)
        v175 = (_DWORD)v127 == 0;
      else
        v175 = 1;
      if (v175)
        v176 = 0;
      else
        v176 = v127 | (v130 << 32);
      v177 = v289;
      if (HIDWORD(v289) * HIDWORD(v176) == -1)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C);
        v268 = v174;
        v178 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v178 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v180 = qword_255795648;
          for (k = qword_255795650; v180 != k; v180 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v180)(*(_QWORD *)(v180 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
        }
        v181 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v181 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v174 = v268;
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
      }
      v182 = v290;
      if (v162)
      {
        v183 = (unint64_t *)&v162->__shared_owners_;
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
        do
          v185 = __ldxr(v183);
        while (__stxr(v185 + 1, v183));
        v279 = v163;
        v280 = v162;
        __b = (void *)(v270 + 4 * (v173 * v272 + v174 * HIDWORD(v272)));
        __len = v176;
        v283 = v177;
        v284 = v182;
        do
          v186 = __ldaxr(v183);
        while (__stlxr(v186 - 1, v183));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
        v187 = v295;
        if (!v295)
        {
LABEL_211:
          v190 = v291;
          v291 = 0;
          if (!v190)
            goto LABEL_213;
LABEL_212:
          (*(void (**)(uint64_t))(*(_QWORD *)v190 + 8))(v190);
          goto LABEL_213;
        }
      }
      else
      {
        v279 = v163;
        v280 = 0;
        __b = (void *)(v270 + 4 * (v173 * v272 + v174 * HIDWORD(v272)));
        __len = v176;
        v283 = v177;
        v284 = v290;
        v187 = v295;
        if (!v295)
          goto LABEL_211;
      }
      v188 = (unint64_t *)&v187->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (v189)
        goto LABEL_211;
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
      v190 = v291;
      v291 = 0;
      if (v190)
        goto LABEL_212;
LABEL_213:
      v191 = v287;
      if (v287)
      {
        v192 = (unint64_t *)&v287->__shared_owners_;
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      v194 = v17[2];
      v195 = v17[3];
      v196 = *v17;
      v197 = v17[1];
      _CF = v195 >= v197;
      v198 = v195 - v197;
      if (_CF)
        v199 = v198 + 1;
      else
        v199 = 0;
      if (v199)
        v200 = v194 + 1 == v196;
      else
        v200 = 1;
      _CF = !v200 && v194 >= v196;
      v269 = *((_DWORD *)a1 + 5);
      v271 = *((_DWORD *)a1 + 4);
      v273 = *a1;
      v202 = a1[2];
      if (_CF)
        v203 = v199;
      else
        v203 = 0;
      if (v203 * HIDWORD(v202) == -1)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C);
        v204 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v205 = qword_255795648;
          for (m = qword_255795650; v205 != m; v205 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v205)(*(_QWORD *)(v205 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
        }
        v207 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v207 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
      }
      v208 = v279;
      if (!v279)
        goto LABEL_258;
      v209 = v280;
      if (!v280)
        goto LABEL_254;
      v210 = (unint64_t *)&v280->__shared_owners_;
      do
        v211 = __ldxr(v210);
      while (__stxr(v211 + 1, v210));
      do
        v212 = __ldaxr(v210);
      while (__stlxr(v212 - 1, v210));
      if (v212)
      {
        v208 = v279;
        v213 = v280;
        if (!v280)
          goto LABEL_254;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
        std::__shared_weak_count::__release_weak(v209);
        v208 = v279;
        v213 = v280;
        if (!v280)
          goto LABEL_254;
      }
      v214 = (unint64_t *)&v213->__shared_owners_;
      do
        v215 = __ldxr(v214);
      while (__stxr(v215 + 1, v214));
      do
        v216 = __ldaxr(v214);
      while (__stlxr(v216 - 1, v214));
      if (v216)
      {
LABEL_254:
        if (HIBYTE(v284))
          goto LABEL_255;
        goto LABEL_258;
      }
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
      if (HIBYTE(v284))
      {
LABEL_255:
        (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)v208 + 96))(&v285, v208, 1);
        v217 = (__n128 *)__b;
        v218 = __len;
        v219 = HIDWORD(__len);
        if (!(_BYTE)v284)
          goto LABEL_267;
        goto LABEL_259;
      }
LABEL_258:
      v285 = 0;
      v217 = (__n128 *)__b;
      v218 = __len;
      v219 = HIDWORD(__len);
      if (!(_BYTE)v284)
        goto LABEL_267;
LABEL_259:
      if (v217)
      {
        v220 = v279;
        v221 = v280;
        if (v280)
        {
          v222 = (unint64_t *)&v280->__shared_owners_;
          do
            v223 = __ldxr(v222);
          while (__stxr(v223 + 1, v222));
          do
            v224 = __ldaxr(v222);
          while (__stlxr(v224 - 1, v222));
          if (!v224)
          {
            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
            std::__shared_weak_count::__release_weak(v221);
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v220 + 88))(v220, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v217 = (__n128 *)__b;
        LODWORD(v219) = HIDWORD(__len);
      }
LABEL_267:
      v225 = HIDWORD(v283) * v219;
      v226 = v218;
      if (v225)
        v227 = v218 == 0;
      else
        v227 = 1;
      if (!v227)
      {
        v232 = 0;
        v233 = 0;
        v234 = v271 * v196 + v269 * v197;
        v235 = v273 + 2 * v234;
        v236 = (__n128 *)((char *)v217 + 4 * v225);
        v237 = *v17;
        v238 = v17[1];
        v239 = (v218 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        v240 = 4 * HIDWORD(v283);
        v241 = v273 + 2 * (v239 + v234) + 2;
        v242 = v239 + 1;
        v244 = v239 > 2 && v202 == 1;
        a7 = vdupq_n_s32(v237);
        v245 = v217;
        while (1)
        {
          *(float *)v148.i32 = v46 * (float)(v233 + v238);
          if (!v244
            || (unint64_t)v245 < v241 && v235 < (unint64_t)v217->n128_u64 + 4 * v226 + v240 * v233)
          {
            break;
          }
          v247 = (float *)v245 + (v242 & 0x7FFFFFFFFFFFFFFCLL);
          v253 = (float32x4_t)vdupq_lane_s32(v148, 0);
          a10 = (int32x4_t)xmmword_2246499B0;
          v254 = v232;
          v255 = v242 & 0x7FFFFFFFFFFFFFFCLL;
          v256 = v245;
          v257.i64[0] = 0x400000004;
          v257.i64[1] = 0x400000004;
          v14 = v276;
          do
          {
            v258 = vaddq_f32(v274, vaddq_f32(v253, vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(a7, a10)), v276.f32[0])));
            a14 = (float32x4_t)vdupq_n_s32(0x358637BDu);
            __asm { FMOV            V6.4S, #1.0 }
            a12 = vcvtq_f32_f16(*(float16x4_t *)(v235 + 2 * v254));
            a11 = (__n128)vabdq_f32((float32x4_t)vandq_s8((int8x16_t)vdivq_f32(_Q6, v258), vbicq_s8(vmvnq_s8((int8x16_t)vceqzq_f32(v258)), (int8x16_t)vcgeq_f32(a14, vabsq_f32(v258)))), a12);
            *v256++ = a11;
            a10 = vaddq_s32(a10, v257);
            v254 += 4 * v202;
            v255 -= 4;
          }
          while (v255);
          v246 = v242 & 0xFFFFFFFC;
          a13 = v275;
          if (v242 != (v242 & 0x7FFFFFFFFFFFFFFCLL))
            goto LABEL_291;
LABEL_286:
          v245 = (__n128 *)((char *)v245 + v240);
          ++v233;
          v232 += HIDWORD(v202);
          if (v245 == v236)
            goto LABEL_272;
        }
        v246 = 0;
        v247 = (float *)v245;
        a13 = v275;
        v14 = v276;
LABEL_291:
        v248 = v232 + v202 * v246;
        v249 = v237 + v246;
        do
        {
          v250 = 1.0 / (float)(*(float *)&a13 + (float)(*(float *)v148.i32 + (float)(v14.f32[0] * (float)v249)));
          _H3 = *(_WORD *)(v235 + 2 * v248);
          __asm { FCVT            S3, H3 }
          if (_ZF)
            v250 = 0.0;
          *v247++ = vabds_f32(v250, _S3);
          v248 += v202;
          ++v249;
        }
        while (v247 != (float *)((char *)v245 + 4 * v226));
        goto LABEL_286;
      }
LABEL_272:
      v228 = v285;
      v285 = 0;
      if (v228)
        (*((void (**)(uint64_t (**)()))*v228 + 1))(v228);
      v229 = v280;
      if (v280)
      {
        v230 = (unint64_t *)&v280->__shared_owners_;
        do
          v231 = __ldaxr(v230);
        while (__stlxr(v231 - 1, v230));
        if (!v231)
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v229);
        }
      }
      v17 += 4;
      if (v17 == v267)
        goto LABEL_3;
    }
  }
}

void sub_223EF505C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  sub_223167354(v1 - 120);
  v3 = *(std::__shared_weak_count **)(v1 - 184);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(a1);
}

unint64_t sub_223EF51BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6, _QWORD *a7, uint64_t a8, int8x16_t a9, int32x4_t a10, int32x4_t a11, double a12, double a13, double a14, int8x16_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int *a21,uint64_t a22)
{
  uint64_t v22;
  __int32 v23;
  char *v24;
  uint64_t v25;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x2_t v41;
  float32x2_t v42;
  unint64_t v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 *v51;
  float v56;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _QWORD *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int8x16_t *v91;
  int8x16_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  unint64_t *v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  int8x16_t *v118;
  int8x16_t *v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  unint64_t *v136;
  char *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  int8x16_t *v143;
  int8x16_t *v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  unint64_t *v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  int8x16_t *v168;
  int8x16_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  char *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  char *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char v225;
  uint64_t v226;
  float v228;
  __int32 v229;
  float32x2_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  int64x2_t v235;
  int64x2_t v236;
  __int128 v237;

  a15.i64[0] = *(_QWORD *)(a3 + 12);
  a15.i32[2] = *(_DWORD *)(a3 + 20);
  a9.i64[0] = *(_QWORD *)a3;
  a9.i32[2] = *(_DWORD *)(a3 + 8);
  a10.i64[0] = *(_QWORD *)a4;
  a10.i32[2] = *(_DWORD *)(a4 + 8);
  a11.i64[0] = *(_QWORD *)(a4 + 12);
  a11.i32[2] = *(_DWORD *)(a4 + 20);
  v22 = *(_QWORD *)(a4 + 24);
  v23 = *(_DWORD *)(a4 + 32);
  v235 = 0u;
  v236 = 0u;
  v24 = (char *)*a7;
  if (a7[1] == *a7)
    return 0;
  v25 = a8;
  v28 = a2;
  v29 = 0;
  v30 = a22;
  v31 = a17;
  v32 = a16;
  v33.i64[0] = vzip1q_s32(a10, a11).u64[0];
  v33.i32[2] = v22;
  v34 = (int8x16_t)vtrn2q_s32(a10, a11);
  v34.i32[2] = HIDWORD(v22);
  _Q1 = (int8x16_t)vzip2q_s32(a10, a11);
  _Q1.i32[2] = v23;
  v33.i32[3] = v34.i32[0];
  v36 = (float32x4_t)vextq_s8(vextq_s8(v34, v34, 0xCuLL), _Q1, 8uLL);
  v37 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a15.i8, 1);
  v38 = (float32x2_t)vextq_s8(a15, a15, 8uLL).u64[0];
  *(float32x2_t *)v34.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a15.i8, *(float32x2_t *)a9.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.i8, 1), *(float32x2_t *)a15.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(a9, a9, 8uLL), v38);
  v39 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 0);
  _Q2 = (int8x16_t)vdivq_f32(v36, v39);
  _Q0 = (int8x16_t)vdivq_f32(v33, v39);
  v41 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)_Q0.i8, *(float *)a15.i32), (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q2, 0xCuLL), *(float32x2_t *)a15.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(_Q2, _Q2, 8uLL), (float32x4_t)a15, 2);
  v42 = vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL), *(float32x2_t *)a15.i8), v37, *(float32x2_t *)_Q2.i8, 1);
  *(float32x2_t *)_Q0.i8 = vdiv_f32((float32x2_t)*(_OWORD *)&vextq_s8(_Q1, _Q1, 8uLL), *(float32x2_t *)v34.i8);
  v225 = a5;
  v44 = a5;
  LODWORD(v45) = vmla_f32(v42, v38, *(float32x2_t *)_Q0.i8).u32[0];
  v46 = v41.f32[1];
  v233 = a5;
  v226 = a1;
  v231 = a15.i64[0];
  v229 = v41.i32[0];
  v230 = v38;
  v228 = v45;
  do
  {
    v48 = *(_QWORD *)&v24[8 * v29];
    v49 = (*(_DWORD *)(a18 + 72) * v48 + *(_DWORD *)(a18 + 76) * HIDWORD(v48));
    v50 = *(_QWORD *)(a18 + 32);
    if (*(_BYTE *)(v50 + v49))
      goto LABEL_5;
    v51 = (__int16 *)(*(_QWORD *)v28
                    + 2 * (*(_DWORD *)(v28 + 40) * v48 + *(_DWORD *)(v28 + 44) * HIDWORD(v48)));
    _Q0.i16[0] = *v51;
    __asm { FCVT            S0, H0 }
    _Q1.i16[0] = v51[1];
    __asm { FCVT            S1, H1 }
    _Q2.i16[0] = v51[2];
    __asm { FCVT            S2, H2 }
    *(float32x2_t *)_Q0.i8 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)_Q0.i8, *(float32x2_t *)a15.i8), v37, *(float32x2_t *)_Q1.i8), v38, *(float32x2_t *)_Q2.i8);
    if (*(float *)_Q0.i32 < *(float *)(v30 + 36))
      goto LABEL_5;
    _H0 = *(_WORD *)(*(_QWORD *)a1
                   + 2 * (*(_DWORD *)(a1 + 16) * v48 + *(_DWORD *)(a1 + 20) * HIDWORD(v48)));
    __asm { FCVT            S1, H0 }
    v56 = v45 + (float)((float)(v41.f32[0] * (float)v48) + (float)(v46 * (float)HIDWORD(v48)));
    _ZF = fabsf(v56) <= 0.000001 || v56 == 0.0;
    v58 = 1.0 / v56;
    if (_ZF)
      v58 = 0.0;
    v59 = vabds_f32(v58, _S1);
    v60 = (float)(_S1 * 0.01) + 0.0;
    if (v60 > 0.05)
      v60 = 0.05;
    if (v60 < 0.005)
      v60 = 0.005;
    if (v59 > v60)
      goto LABEL_5;
    v61 = (float)(_S1 * 0.004) + 0.0;
    if (v61 > 0.02)
      v61 = 0.02;
    if (v61 < 0.002)
      v61 = 0.002;
    if (v59 <= v61)
      *(_BYTE *)(v50 + v49) = -1;
    v62 = *(_QWORD *)(v25 + 32);
    v63 = *(unsigned __int8 *)(v62 + (*(_DWORD *)(v25 + 72) * v48 + *(_DWORD *)(v25 + 76) * HIDWORD(v48)));
    v64 = *(_QWORD *)(v32 + 32);
    if (v63 != 255)
    {
      *(uint64_t *)((char *)v235.i64 + ((v63 >> 3) & 0x18)) |= 1 << v63;
      if (v59 >= *(float *)(v64
                           + 4 * (*(_DWORD *)(v32 + 72) * v48 + *(_DWORD *)(v32 + 76) * HIDWORD(v48))))
        goto LABEL_5;
      --*(_DWORD *)(a20 + 4 * v63);
    }
    ++*(_DWORD *)(a20 + 4 * v44);
    v65 = *a21;
    v66 = a21[1];
    if (*a21 >= v48)
      v65 = v48;
    if (v66 >= HIDWORD(v48))
      v66 = HIDWORD(v48);
    *a21 = v65;
    a21[1] = v66;
    v67 = a21[2];
    v68 = a21[3];
    if (v67 <= v48)
      v67 = v48;
    if (v68 <= HIDWORD(v48))
      v68 = HIDWORD(v48);
    a21[2] = v67;
    a21[3] = v68;
    *(float *)(v64 + 4 * (*(_DWORD *)(v32 + 72) * v48 + *(_DWORD *)(v32 + 76) * HIDWORD(v48))) = v59;
    *(_BYTE *)(v62 + (*(_DWORD *)(v25 + 72) * v48 + *(_DWORD *)(v25 + 76) * HIDWORD(v48))) = v225;
    v69 = (v48 + 1);
    v70 = *(_DWORD *)(v31 + 72);
    v71 = *(_DWORD *)(v31 + 76);
    v72 = (v70 * v69 + v71 * HIDWORD(v48));
    v73 = *(_QWORD *)(v31 + 32);
    if (*(unsigned __int8 *)(v73 + v72) != 255)
    {
      v74 = v48 - 0x100000000;
      v76 = (char *)a7[1];
      v75 = a7[2];
      if ((unint64_t)v76 < v75)
      {
        *(_QWORD *)v76 = v74;
        v77 = (uint64_t)(v76 + 8);
        v44 = v233;
LABEL_60:
        a7[1] = v77;
        *(_BYTE *)(v73 + v72) = -1;
        v70 = *(_DWORD *)(v31 + 72);
        v71 = *(_DWORD *)(v31 + 76);
        v73 = *(_QWORD *)(v31 + 32);
        goto LABEL_61;
      }
      v78 = (char *)*a7;
      v79 = (uint64_t)&v76[-*a7];
      v80 = v79 >> 3;
      v81 = (v79 >> 3) + 1;
      if (v81 >> 61)
        goto LABEL_188;
      v82 = v75 - (_QWORD)v78;
      if (v82 >> 2 > v81)
        v81 = v82 >> 2;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
        v81 = 0x1FFFFFFFFFFFFFFFLL;
      v215 = v81;
      if (v81)
      {
        v214 = v72;
        v217 = *(_QWORD *)(v31 + 32);
        if (v81 >> 61)
          goto LABEL_189;
        v83 = operator new(8 * v81);
        a15.i64[0] = v231;
        v32 = a16;
        v31 = a17;
        v41.i32[0] = v229;
        v38 = v230;
        v45 = v228;
        v73 = v217;
        v69 = (v48 + 1);
        v72 = v214;
        v84 = &v83[8 * v80];
        *v84 = v48 - 0x100000000;
        v77 = (uint64_t)(v84 + 1);
        v85 = (char *)(v76 - v78);
        if (v76 != v78)
        {
LABEL_47:
          v86 = (unint64_t)(v85 - 8);
          if (v86 >= 0x58)
          {
            v87 = v76 - v83 - v79;
            v25 = a8;
            if (v87 >= 0x20)
            {
              v88 = (v86 >> 3) + 1;
              v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
              v90 = &v76[-v89];
              v84 = (_QWORD *)((char *)v84 - v89);
              v91 = (int8x16_t *)&v83[8 * v80 - 16];
              v92 = (int8x16_t *)(v76 - 16);
              v93 = v88 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                _Q1 = v92[-1];
                _Q0 = *v92;
                v91[-1] = _Q1;
                *v91 = _Q0;
                v91 -= 2;
                v92 -= 2;
                v93 -= 4;
              }
              while (v93);
              v76 = v90;
              if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_56;
            }
          }
          else
          {
            v25 = a8;
          }
          do
          {
            v94 = *((_QWORD *)v76 - 1);
            v76 -= 8;
            *--v84 = v94;
          }
          while (v76 != v78);
LABEL_56:
          v76 = (char *)*a7;
          goto LABEL_57;
        }
      }
      else
      {
        v83 = 0;
        v84 = (_QWORD *)(8 * v80);
        *(_QWORD *)(8 * v80) = v74;
        v77 = 8 * v80 + 8;
        v85 = (char *)(v76 - v78);
        if (v76 != v78)
          goto LABEL_47;
      }
      v25 = a8;
LABEL_57:
      *a7 = v84;
      a7[1] = v77;
      a7[2] = &v83[8 * v215];
      v28 = a2;
      v30 = a22;
      if (v76)
      {
        v95 = v76;
        v96 = v73;
        v97 = v72;
        operator delete(v95);
        v72 = v97;
        v69 = (v48 + 1);
        v25 = a8;
        v73 = v96;
        v45 = v228;
        v41.i32[0] = v229;
        v38 = v230;
        v32 = a16;
        v31 = a17;
        a15.i64[0] = v231;
      }
      v44 = v233;
      a1 = v226;
      goto LABEL_60;
    }
LABEL_61:
    v98 = HIDWORD(v48) + 1;
    v99 = v71 * (HIDWORD(v48) + 1);
    v100 = (v99 + v70 * v48);
    if (*(unsigned __int8 *)(v73 + v100) == 255)
      goto LABEL_86;
    v101 = (v48 - 1) | v48 & 0xFFFFFFFF00000000;
    v103 = (char *)a7[1];
    v102 = a7[2];
    if ((unint64_t)v103 >= v102)
    {
      v105 = (char *)*a7;
      v106 = (uint64_t)&v103[-*a7];
      v107 = v106 >> 3;
      v108 = (v106 >> 3) + 1;
      if (v108 >> 61)
        goto LABEL_188;
      v109 = v102 - (_QWORD)v105;
      if (v109 >> 2 > v108)
        v108 = v109 >> 2;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
        v108 = 0x1FFFFFFFFFFFFFFFLL;
      v212 = v108;
      if (v108)
      {
        v218 = v73;
        if (v108 >> 61)
          goto LABEL_189;
        v110 = operator new(8 * v108);
        a15.i64[0] = v231;
        v32 = a16;
        v31 = a17;
        v41.i32[0] = v229;
        v38 = v230;
        v45 = v228;
        v98 = HIDWORD(v48) + 1;
        v73 = v218;
        v69 = (v48 + 1);
        v111 = (unint64_t *)&v110[8 * v107];
        *v111 = (v48 - 1) | v48 & 0xFFFFFFFF00000000;
        v104 = (uint64_t)(v111 + 1);
        v112 = (char *)(v103 - v105);
        if (v103 != v105)
        {
LABEL_72:
          v113 = (unint64_t)(v112 - 8);
          if (v113 >= 0x58)
          {
            v114 = v103 - v110 - v106;
            v25 = a8;
            if (v114 >= 0x20)
            {
              v219 = v104;
              v115 = (v113 >> 3) + 1;
              v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
              v117 = &v103[-v116];
              v111 = (unint64_t *)((char *)v111 - v116);
              v118 = (int8x16_t *)&v110[8 * v107 - 16];
              v119 = (int8x16_t *)(v103 - 16);
              v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                _Q1 = v119[-1];
                _Q0 = *v119;
                v118[-1] = _Q1;
                *v118 = _Q0;
                v118 -= 2;
                v119 -= 2;
                v120 -= 4;
              }
              while (v120);
              v103 = v117;
              v104 = v219;
              if (v115 == (v115 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_81;
            }
          }
          else
          {
            v25 = a8;
          }
          do
          {
            v121 = *((_QWORD *)v103 - 1);
            v103 -= 8;
            *--v111 = v121;
          }
          while (v103 != v105);
LABEL_81:
          v103 = (char *)*a7;
          goto LABEL_82;
        }
      }
      else
      {
        v110 = 0;
        v111 = (unint64_t *)(8 * v107);
        *(_QWORD *)(8 * v107) = v101;
        v104 = 8 * v107 + 8;
        v112 = (char *)(v103 - v105);
        if (v103 != v105)
          goto LABEL_72;
      }
      v25 = a8;
LABEL_82:
      *a7 = v111;
      a7[1] = v104;
      a7[2] = &v110[8 * v212];
      v28 = a2;
      v30 = a22;
      if (v103)
      {
        v122 = v103;
        v123 = v73;
        v124 = v98;
        v220 = v104;
        operator delete(v122);
        v104 = v220;
        v98 = v124;
        v69 = (v48 + 1);
        v25 = a8;
        v73 = v123;
        v45 = v228;
        v41.i32[0] = v229;
        v38 = v230;
        v32 = a16;
        v31 = a17;
        a15.i64[0] = v231;
      }
      a1 = v226;
      goto LABEL_85;
    }
    *(_QWORD *)v103 = v101;
    v104 = (uint64_t)(v103 + 8);
LABEL_85:
    a7[1] = v104;
    *(_BYTE *)(v73 + v100) = -1;
    v70 = *(_DWORD *)(v31 + 72);
    v71 = *(_DWORD *)(v31 + 76);
    v73 = *(_QWORD *)(v31 + 32);
    v99 = v71 * v98;
    v44 = v233;
LABEL_86:
    v125 = (v99 + v70 * (v48 + 2));
    if (*(unsigned __int8 *)(v73 + v125) == 255)
      goto LABEL_111;
    v126 = v48 & 0xFFFFFFFF00000000 | v69;
    v128 = (char *)a7[1];
    v127 = a7[2];
    if ((unint64_t)v128 >= v127)
    {
      v130 = (char *)*a7;
      v131 = (uint64_t)&v128[-*a7];
      v132 = v131 >> 3;
      v133 = (v131 >> 3) + 1;
      if (v133 >> 61)
        goto LABEL_188;
      v134 = v127 - (_QWORD)v130;
      if (v134 >> 2 > v133)
        v133 = v134 >> 2;
      if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
        v133 = 0x1FFFFFFFFFFFFFFFLL;
      v213 = v133;
      if (v133)
      {
        v211 = v48 & 0xFFFFFFFF00000000 | v69;
        v216 = v98;
        v221 = v73;
        if (v133 >> 61)
          goto LABEL_189;
        v135 = operator new(8 * v133);
        a15.i64[0] = v231;
        v32 = a16;
        v31 = a17;
        v41.i32[0] = v229;
        v38 = v230;
        v45 = v228;
        v98 = v216;
        v73 = v221;
        LODWORD(v69) = v48 + 1;
        v136 = (unint64_t *)&v135[8 * v132];
        *v136 = v211;
        v129 = (uint64_t)(v136 + 1);
        v137 = (char *)(v128 - v130);
        if (v128 != v130)
        {
LABEL_97:
          v138 = (unint64_t)(v137 - 8);
          if (v138 >= 0x58)
          {
            v139 = v128 - &v135[v131];
            v25 = a8;
            if (v139 >= 0x20)
            {
              v222 = v129;
              v140 = (v138 >> 3) + 1;
              v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
              v142 = &v128[-v141];
              v136 = (unint64_t *)((char *)v136 - v141);
              v143 = (int8x16_t *)&v135[8 * v132 - 16];
              v144 = (int8x16_t *)(v128 - 16);
              v145 = v140 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                _Q1 = v144[-1];
                _Q0 = *v144;
                v143[-1] = _Q1;
                *v143 = _Q0;
                v143 -= 2;
                v144 -= 2;
                v145 -= 4;
              }
              while (v145);
              v128 = v142;
              v129 = v222;
              if (v140 == (v140 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_106;
            }
          }
          else
          {
            v25 = a8;
          }
          do
          {
            v146 = *((_QWORD *)v128 - 1);
            v128 -= 8;
            *--v136 = v146;
          }
          while (v128 != v130);
LABEL_106:
          v128 = (char *)*a7;
          goto LABEL_107;
        }
      }
      else
      {
        v135 = 0;
        v136 = (unint64_t *)(8 * v132);
        *(_QWORD *)(8 * v132) = v126;
        v129 = 8 * v132 + 8;
        v137 = (char *)(v128 - v130);
        if (v128 != v130)
          goto LABEL_97;
      }
      v25 = a8;
LABEL_107:
      *a7 = v136;
      a7[1] = v129;
      a7[2] = &v135[8 * v213];
      v28 = a2;
      v30 = a22;
      if (v128)
      {
        v147 = v128;
        v148 = v73;
        v149 = v98;
        v223 = v129;
        operator delete(v147);
        v129 = v223;
        v98 = v149;
        LODWORD(v69) = v48 + 1;
        v25 = a8;
        v73 = v148;
        v45 = v228;
        v41.i32[0] = v229;
        v38 = v230;
        v32 = a16;
        v31 = a17;
        a15.i64[0] = v231;
      }
      v44 = v233;
      a1 = v226;
      goto LABEL_110;
    }
    *(_QWORD *)v128 = v126;
    v129 = (uint64_t)(v128 + 8);
    v44 = v233;
LABEL_110:
    a7[1] = v129;
    *(_BYTE *)(v73 + v125) = -1;
    v70 = *(_DWORD *)(v31 + 72);
    v71 = *(_DWORD *)(v31 + 76);
    v73 = *(_QWORD *)(v31 + 32);
LABEL_111:
    v150 = (v71 * (HIDWORD(v48) + 2) + v70 * v69);
    if (*(unsigned __int8 *)(v73 + v150) != 255)
    {
      v151 = v48 | ((unint64_t)v98 << 32);
      v153 = (char *)a7[1];
      v152 = a7[2];
      if ((unint64_t)v153 >= v152)
      {
        v232 = v150;
        v154 = (char *)*a7;
        v155 = (uint64_t)&v153[-*a7];
        v156 = v155 >> 3;
        v157 = (v155 >> 3) + 1;
        if (v157 >> 61)
LABEL_188:
          sub_22316E078();
        v158 = v152 - (_QWORD)v154;
        if (v158 >> 2 > v157)
          v157 = v158 >> 2;
        if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
          v157 = 0x1FFFFFFFFFFFFFFFLL;
        v224 = v157;
        if (v157)
        {
          if (v157 >> 61)
LABEL_189:
            sub_223174E94();
          v159 = v73;
          v160 = operator new(8 * v157);
          a15.i64[0] = v231;
          v32 = a16;
          v31 = a17;
          v41.i32[0] = v229;
          v38 = v230;
          v45 = v228;
          v73 = v159;
          v161 = (unint64_t *)&v160[8 * v156];
          *v161 = v151;
          v47 = (uint64_t)(v161 + 1);
          v162 = (char *)(v153 - v154);
          if (v153 != v154)
          {
LABEL_121:
            v163 = (unint64_t)(v162 - 8);
            if (v163 < 0x58)
            {
              v25 = a8;
              goto LABEL_129;
            }
            v164 = v153 - v160 - v155;
            v25 = a8;
            if (v164 < 0x20)
              goto LABEL_193;
            v165 = (v163 >> 3) + 1;
            v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
            v167 = &v153[-v166];
            v161 = (unint64_t *)((char *)v161 - v166);
            v168 = (int8x16_t *)&v160[8 * v156 - 16];
            v169 = (int8x16_t *)(v153 - 16);
            v170 = v165 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              _Q1 = v169[-1];
              _Q0 = *v169;
              v168[-1] = _Q1;
              *v168 = _Q0;
              v168 -= 2;
              v169 -= 2;
              v170 -= 4;
            }
            while (v170);
            v153 = v167;
            if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_193:
              do
              {
LABEL_129:
                v171 = *((_QWORD *)v153 - 1);
                v153 -= 8;
                *--v161 = v171;
              }
              while (v153 != v154);
            }
            v153 = (char *)*a7;
LABEL_131:
            *a7 = v161;
            a7[1] = v47;
            a7[2] = &v160[8 * v224];
            v28 = a2;
            v30 = a22;
            if (v153)
            {
              v172 = v73;
              operator delete(v153);
              v73 = v172;
              v45 = v228;
              v41.i32[0] = v229;
              v38 = v230;
              v32 = a16;
              v31 = a17;
              a15.i64[0] = v231;
            }
            v150 = v232;
            v44 = v233;
            a1 = v226;
LABEL_4:
            a7[1] = v47;
            *(_BYTE *)(v73 + v150) = -1;
            goto LABEL_5;
          }
        }
        else
        {
          v160 = 0;
          v161 = (unint64_t *)(8 * v156);
          *(_QWORD *)(8 * v156) = v151;
          v47 = 8 * v156 + 8;
          v162 = (char *)(v153 - v154);
          if (v153 != v154)
            goto LABEL_121;
        }
        v25 = a8;
        goto LABEL_131;
      }
      *(_QWORD *)v153 = v151;
      v47 = (uint64_t)(v153 + 8);
      v44 = v233;
      goto LABEL_4;
    }
LABEL_5:
    ++v29;
    v24 = (char *)*a7;
  }
  while (v29 < (uint64_t)(a7[1] - *a7) >> 3);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v235), (int32x4_t)vceqzq_s64(v236))))) & 1) != 0)
  {
    v173 = a6[4] - a6[3];
    if (v173)
    {
      v174 = 0;
      v175 = 0x6DB6DB6DB6DB6DB7 * (v173 >> 3);
      v176 = xmmword_224690890;
      do
      {
        if (((*(unint64_t *)((char *)v235.i64 + ((v174 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v174) & 1) != 0)
        {
          if (v174 <= v44)
            v178 = v44;
          else
            v178 = v174;
          v180 = (char *)a6[3];
          v179 = (char *)a6[4];
          v181 = 0x6DB6DB6DB6DB6DB7 * ((v179 - v180) >> 3);
          if (v178 >= v181)
          {
            v182 = v178 + 1;
            _CF = v178 + 1 >= v181;
            v184 = v178 + 1 - v181;
            if (v184 != 0 && _CF)
            {
              v185 = a6[5];
              if (0x6DB6DB6DB6DB6DB7 * ((v185 - (uint64_t)v179) >> 3) >= v184)
              {
                v205 = &v179[56 * v184];
                do
                {
                  *v179 = 0;
                  *(_OWORD *)(v179 + 8) = v176;
                  *((_DWORD *)v179 + 6) = 1065353216;
                  *((_QWORD *)v179 + 4) = 0;
                  *((_QWORD *)v179 + 5) = 0;
                  v179 += 56;
                }
                while (v179 != v205);
                a6[4] = (uint64_t)v205;
              }
              else
              {
                if (v182 > 0x492492492492492)
                  sub_22316E078();
                v186 = 0x6DB6DB6DB6DB6DB7 * ((v185 - (uint64_t)v180) >> 3);
                v187 = 0xDB6DB6DB6DB6DB6ELL * ((v185 - (uint64_t)v180) >> 3);
                if (v187 <= v182)
                  v187 = v182;
                if (v186 >= 0x249249249249249)
                  v188 = 0x492492492492492;
                else
                  v188 = v187;
                if (v188 > 0x492492492492492)
                  goto LABEL_189;
                v189 = (char *)operator new(56 * v188);
                v190 = &v189[8 * ((v179 - v180) >> 3)];
                v191 = &v189[56 * v182];
                v192 = v190;
                do
                {
                  *v192 = 0;
                  *(_OWORD *)(v192 + 8) = xmmword_224690890;
                  *((_DWORD *)v192 + 6) = 1065353216;
                  *((_QWORD *)v192 + 4) = 0;
                  *((_QWORD *)v192 + 5) = 0;
                  v192 += 56;
                }
                while (v192 != v191);
                v193 = &v189[56 * v188];
                if (v179 == v180)
                {
                  a6[3] = (uint64_t)v190;
                  a6[4] = (uint64_t)v191;
                  a6[5] = (uint64_t)v193;
                  v44 = v233;
                }
                else
                {
                  v194 = 0;
                  v44 = v233;
                  do
                  {
                    v195 = &v190[v194];
                    *(v195 - 56) = 0;
                    v196 = &v179[v194];
                    *((_OWORD *)v195 - 3) = *(_OWORD *)&v179[v194 - 48];
                    *((_DWORD *)v195 - 8) = *(_DWORD *)&v179[v194 - 32];
                    *((_QWORD *)v195 - 3) = *(_QWORD *)&v179[v194 - 24];
                    *((_QWORD *)v195 - 2) = *(_QWORD *)&v179[v194 - 16];
                    *((_QWORD *)v196 - 5) = 0;
                    *((_QWORD *)v196 - 3) = 0;
                    *((_QWORD *)v196 - 2) = 0;
                    v194 -= 56;
                  }
                  while (&v179[v194] != v180);
                  v179 = (char *)a6[3];
                  v197 = (char *)a6[4];
                  a6[3] = (uint64_t)&v190[v194];
                  a6[4] = (uint64_t)v191;
                  a6[5] = (uint64_t)v193;
                  while (v197 != v179)
                  {
                    v198 = (_QWORD *)*((_QWORD *)v197 - 2);
                    if (v198)
                    {
                      v199 = (_QWORD *)v198[*((_QWORD *)v197 - 6)];
                      if (v199)
                      {
                        do
                        {
                          v200 = (_QWORD *)*v199;
                          operator delete(v199);
                          v199 = v200;
                        }
                        while (v200);
                        v198 = (_QWORD *)*((_QWORD *)v197 - 2);
                      }
                      operator delete(v198);
                      *((_QWORD *)v197 - 5) = 0;
                      *((_QWORD *)v197 - 3) = 0;
                      *((_QWORD *)v197 - 2) = 0;
                    }
                    v197 -= 56;
                  }
                }
                if (v179)
                  operator delete(v179);
              }
            }
            else if (!_CF)
            {
              v201 = &v180[56 * v182];
              while (v179 != v201)
              {
                v202 = (_QWORD *)*((_QWORD *)v179 - 2);
                if (v202)
                {
                  v203 = (_QWORD *)v202[*((_QWORD *)v179 - 6)];
                  if (v203)
                  {
                    do
                    {
                      v204 = (_QWORD *)*v203;
                      operator delete(v203);
                      v203 = v204;
                    }
                    while (v204);
                    v202 = (_QWORD *)*((_QWORD *)v179 - 2);
                  }
                  operator delete(v202);
                  *((_QWORD *)v179 - 5) = 0;
                  *((_QWORD *)v179 - 3) = 0;
                  *((_QWORD *)v179 - 2) = 0;
                }
                v179 -= 56;
              }
              a6[4] = (uint64_t)v201;
            }
          }
          v206 = (uint64_t *)operator new(0x28uLL);
          v206[2] = v174;
          v206[3] = v44;
          v207 = *a6;
          *v206 = *a6;
          v206[1] = (uint64_t)a6;
          *(_QWORD *)(v207 + 8) = v206;
          v208 = a6[3];
          ++a6[2];
          *a6 = (uint64_t)v206;
          *(_QWORD *)&v237 = v44;
          *((_QWORD *)&v237 + 1) = v206;
          if (sub_223EFA108(v208 + 56 * v174, v44, &v237))
          {
            v209 = a6[3] + 56 * v44;
            *(_QWORD *)&v237 = v174;
            *((_QWORD *)&v237 + 1) = v206;
            sub_223EFA108(v209, v174, &v237);
          }
          else
          {
            v177 = *v206;
            *(_QWORD *)(v177 + 8) = v206[1];
            *(_QWORD *)v206[1] = v177;
            --a6[2];
            operator delete(v206);
          }
          v176 = xmmword_224690890;
        }
        ++v174;
      }
      while (v174 != v175);
    }
  }
  return v29;
}

void sub_223EF619C(_QWORD *a1, double a2, double a3, double a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  float v19;
  double v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *i;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;

  v6 = (_QWORD *)a6[1];
  if (v6 == a6)
    return;
  v7 = a6;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  do
  {
    v13 = v6[2];
    v12 = v6[3];
    v14 = *(double **)(*a1 + 8 * v13);
    v15 = v14[6];
    *(float *)&a4 = v14[4];
    v16 = v14[5];
    *(float *)&v16 = v16;
    *(float *)&v15 = v15;
    v17 = *(double **)(*a1 + 8 * v12);
    v18 = v17[6];
    v19 = v17[4];
    v20 = v17[5];
    *(float *)&v20 = v20;
    *(float *)&v18 = v18;
    *(float *)&a4 = *(float *)&a4 * v19;
    a4 = COERCE_DOUBLE(vmla_f32(vmla_f32(*(float32x2_t *)&a4, *(float32x2_t *)&v20, *(float32x2_t *)&v16), *(float32x2_t *)&v18, *(float32x2_t *)&v15));
    if (fabsf(*(float *)&a4) >= 0.95)
      goto LABEL_4;
    v21 = v6 + 4;
    if (v11 < v9)
    {
      *(_QWORD *)v11 = v13;
      *((_QWORD *)v11 + 1) = v12;
      *((_QWORD *)v11 + 2) = v21;
      v11 += 24;
      goto LABEL_4;
    }
    v22 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 3) + 1;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    if (0x5555555555555556 * ((v9 - v10) >> 3) > v22)
      v22 = 0x5555555555555556 * ((v9 - v10) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3) >= 0x555555555555555)
      v23 = 0xAAAAAAAAAAAAAAALL;
    else
      v23 = v22;
    if (v23)
    {
      if (v23 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v24 = (char *)operator new(24 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[8 * ((v11 - v10) >> 3)];
    *(_QWORD *)v25 = v13;
    *((_QWORD *)v25 + 1) = v12;
    *((_QWORD *)v25 + 2) = v21;
    if (v11 == v10)
    {
      v28 = &v24[8 * ((v11 - v10) >> 3)];
      v9 = &v24[24 * v23];
      v11 = v25 + 24;
      if (!v10)
        goto LABEL_22;
    }
    else
    {
      v26 = &v24[8 * ((v11 - v10) >> 3)];
      do
      {
        v27 = *(_OWORD *)(v11 - 24);
        v28 = v26 - 24;
        *((_QWORD *)v26 - 1) = *((_QWORD *)v11 - 1);
        *(_OWORD *)(v26 - 24) = v27;
        v11 -= 24;
        v26 -= 24;
      }
      while (v11 != v10);
      v9 = &v24[24 * v23];
      v11 = v25 + 24;
      if (!v10)
        goto LABEL_22;
    }
    operator delete(v10);
LABEL_22:
    v10 = v28;
    v7 = a6;
LABEL_4:
    v6 = (_QWORD *)v6[1];
  }
  while (v6 != v7);
  if (v10 != v11)
  {
    for (i = v10; i != v11; i += 24)
    {
      v31 = *((_QWORD *)i + 1);
      v32 = (uint64_t *)*((_QWORD *)i + 2);
      v33 = v7[3];
      v34 = (_QWORD *)(v33 + 56 * *(_QWORD *)i);
      if (!v34[2])
      {
        v37 = 0;
        v39 = (_QWORD *)(v33 + 56 * v31);
        if (v39[2])
          goto LABEL_48;
        goto LABEL_27;
      }
      v35 = v34[5];
      v36 = *(_QWORD **)(v35 + 8 * v34[1]);
      if (!v36)
      {
LABEL_32:
        v37 = 0;
        v39 = (_QWORD *)(v33 + 56 * v31);
        if (v39[2])
          goto LABEL_48;
        goto LABEL_27;
      }
      while (1)
      {
        v37 = (uint64_t *)v36[3];
        v38 = (_QWORD *)*v36;
        if (v37 + 4 == v32)
          break;
        v36 = (_QWORD *)*v36;
        if (!v38)
          goto LABEL_32;
      }
      v57 = *((_QWORD *)i + 1);
      v40 = v36[1];
      v41 = v40 & 0x7FFFFFFFFFFFFFFFLL;
      v42 = *(_QWORD **)(v35 + 8 * v40);
      do
      {
        v43 = v42;
        v42 = (_QWORD *)*v42;
      }
      while (v42 != v36);
      *v43 = v38;
      do
      {
        v45 = v36;
        v36 = (_QWORD *)*v36;
        operator delete(v45);
        --v34[2];
        if (!v36)
        {
          v46 = v34[5];
          v44 = v41;
          if (*(_QWORD **)(v46 + 8 * v41) != v43)
            goto LABEL_40;
LABEL_46:
          *(_QWORD *)(v46 + 8 * v41) = 0;
          goto LABEL_40;
        }
        v44 = v36[1] & 0x7FFFFFFFFFFFFFFFLL;
        if (v44 == v41)
        {
          v44 = v41;
          goto LABEL_40;
        }
        v46 = v34[5];
        *(_QWORD *)(v46 + 8 * v36[1]) = v43;
        if (*(_QWORD **)(v46 + 8 * v41) == v43)
          goto LABEL_46;
LABEL_40:
        v41 = v44;
      }
      while (v36 != v38);
      v39 = (_QWORD *)(a6[3] + 56 * v57);
      if (v39[2])
      {
LABEL_48:
        v47 = v39[5];
        v48 = *(_QWORD **)(v47 + 8 * v39[1]);
        if (v48)
        {
          while (1)
          {
            v49 = (_QWORD *)*v48;
            if ((uint64_t *)(v48[3] + 32) == v32)
              break;
            v48 = (_QWORD *)*v48;
            if (!v49)
              goto LABEL_27;
          }
          v50 = v48[1];
          v51 = v50 & 0x7FFFFFFFFFFFFFFFLL;
          v52 = *(_QWORD **)(v47 + 8 * v50);
          do
          {
            v53 = v52;
            v52 = (_QWORD *)*v52;
          }
          while (v52 != v48);
          *v53 = v49;
          while (2)
          {
            v55 = v48;
            v48 = (_QWORD *)*v48;
            operator delete(v55);
            --v39[2];
            if (v48)
            {
              v54 = v48[1] & 0x7FFFFFFFFFFFFFFFLL;
              if (v54 == v51)
              {
                v54 = v51;
              }
              else
              {
                v56 = v39[5];
                *(_QWORD *)(v56 + 8 * v48[1]) = v53;
                if (*(_QWORD **)(v56 + 8 * v51) == v53)
LABEL_62:
                  *(_QWORD *)(v56 + 8 * v51) = 0;
              }
            }
            else
            {
              v56 = v39[5];
              v54 = v51;
              if (*(_QWORD **)(v56 + 8 * v51) == v53)
                goto LABEL_62;
            }
            v51 = v54;
            if (v48 == v49)
              break;
            continue;
          }
        }
      }
LABEL_27:
      v30 = *v37;
      *(_QWORD *)(v30 + 8) = v37[1];
      *(_QWORD *)v37[1] = v30;
      v7 = a6;
      --a6[2];
      operator delete(v37);
    }
  }
  if (v10)
    operator delete(v10);
}

void sub_223EF65F4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_223EF6610(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string::size_type size;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  std::string::size_type v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __n128 v45;
  __n128 *v46;
  __n128 *v47;
  __n128 v48;
  _QWORD *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  std::string::size_type v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned __int8 v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  void **v69;
  uint64_t v70;
  unsigned __int8 v71;
  char *v72;
  uint64_t *v73;
  uint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  void *v81;
  std::string::size_type v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  std::string::size_type v102;
  char *v103;
  uint64_t *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  _QWORD *v114;
  uint64_t v115;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  std::string::size_type v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  std::string::size_type v138;
  std::string::size_type v139;
  uint64_t v140;
  unint64_t v141;
  int64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  _QWORD *v175;
  void *v176;
  _QWORD *v177;
  int64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  _BYTE *v185;
  _BYTE *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  int64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  __int128 *v200;
  uint64_t v201;
  __int128 v202;
  int v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  BOOL v213;
  uint64_t *v214;
  void **v215;
  void *v216;
  _QWORD *v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  std::string::size_type v221;
  std::string::size_type v222;
  void *v223;
  std::string::size_type v224;
  void *v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  std::string::size_type v231;
  char *v232;
  int64_t v233;
  float v234;
  __int128 v235;
  std::__shared_weak_count *v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v241;
  uint64_t v242;
  unsigned int *v243;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unint64_t v252;
  std::string::size_type v253;
  _QWORD *v254;
  std::string::size_type v255;
  __int128 v256;
  char *v257;
  void *__p[2];
  std::__shared_weak_count *v259;
  __int128 v260;
  char *v261;
  _QWORD *v262;
  _QWORD *v263;
  char *v264;
  uint64_t *v265;
  std::string v266;
  char v267;
  std::string __dst;

  v6 = a4;
  v8 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v263 = 0;
  v264 = 0;
  v262 = 0;
  v9 = v7 - v8;
  if (v9)
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 3);
    if (v10 >> 61)
      sub_22367C394();
    v11 = operator new(0x6DB6DB6DB6DB6DB8 * (v9 >> 3));
    v262 = v11;
    v264 = (char *)&v11[v10];
    bzero(v11, 8 * v10);
    v263 = v264;
    LODWORD(__p[0]) = 0;
    v12.n128_f64[0] = sub_223EFA57C((uint64_t *)&__dst);
    v13 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v249 = v11;
      v14 = v13 / 56;
      bzero(__dst.__r_.__value_.__l.__data_, 4 * (v13 / 56));
      v15 = 0;
      v16 = -1;
      v241 = v14;
      do
      {
        v17 = __dst.__r_.__value_.__r.__words[0];
        if (!*(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 4 * v15))
        {
          size = __dst.__r_.__value_.__l.__size_;
          *(_OWORD *)&v266.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          if (__dst.__r_.__value_.__l.__size_)
          {
            v19 = (unsigned int *)(__dst.__r_.__value_.__l.__size_ + 8);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          __p[0] = 0;
          __p[1] = 0;
          v259 = 0;
          *(_DWORD *)(v17 + 4 * v15) = 1;
          v21 = v16 + 1;
          v249[v15] = v16 + 1;
          v22 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 56 * v15);
          if (v22[2])
            v23 = *(_QWORD *)(v22[5] + 8 * v22[1]);
          else
            v23 = 0;
          v243 = (unsigned int *)size;
          v24 = (char *)operator new(0x48uLL);
          v25 = v24 + 72;
          *(_QWORD *)v24 = v15;
          v24[8] = 0;
          *((_QWORD *)v24 + 5) = v23;
          *((_QWORD *)v24 + 6) = v15;
          *((_QWORD *)v24 + 7) = 0;
          *((_QWORD *)v24 + 8) = v15;
          v242 = v15;
          __p[1] = v24 + 72;
          v259 = (std::__shared_weak_count *)(v24 + 72);
          __p[0] = v24;
          v26 = v249;
          v248 = v21;
          do
          {
            v253 = v17;
            v28 = v25 - 72;
            v27 = *((_QWORD *)v25 - 9);
            v29 = (_QWORD *)*((_QWORD *)v25 - 4);
            v30 = *((_QWORD *)v25 - 3);
            v32 = (_QWORD *)*((_QWORD *)v25 - 2);
            v31 = *((_QWORD *)v25 - 1);
            if (*(v25 - 64))
              *(v25 - 64) = 0;
            __p[1] = v25 - 72;
            if (v29 == v32)
            {
              v25 -= 72;
            }
            else
            {
              v33 = v24;
              while (1)
              {
                while (1)
                {
                  v34 = v29[2];
                  if (!*(_DWORD *)(v253 + 4 * v34))
                    break;
                  v25 = v28;
                  v29 = (_QWORD *)*v29;
                  if (v29 == v32)
                    goto LABEL_15;
                }
                v35 = v29[3] + 32;
                v36 = (_QWORD *)*v29;
                if (v28 >= (char *)v259)
                {
                  v38 = 0x8E38E38E38E38E39 * ((v28 - v33) >> 3) + 1;
                  if (v38 > 0x38E38E38E38E38ELL)
                    sub_22316E078();
                  if (0x1C71C71C71C71C72 * (((char *)v259 - v33) >> 3) > v38)
                    v38 = 0x1C71C71C71C71C72 * (((char *)v259 - v33) >> 3);
                  if (0x8E38E38E38E38E39 * (((char *)v259 - v33) >> 3) >= 0x1C71C71C71C71C7)
                    v39 = 0x38E38E38E38E38ELL;
                  else
                    v39 = v38;
                  if (v39 > 0x38E38E38E38E38ELL)
                    sub_223174E94();
                  v40 = v30;
                  v41 = v32;
                  v250 = v31;
                  v42 = v27;
                  v43 = (char *)operator new(72 * v39);
                  v24 = &v43[8 * ((v28 - v33) >> 3)];
                  *(_QWORD *)v24 = v42;
                  *((_QWORD *)v24 + 2) = v40;
                  *((_QWORD *)v24 + 3) = v34;
                  v24[8] = 1;
                  *((_QWORD *)v24 + 4) = v35;
                  *((_QWORD *)v24 + 5) = v36;
                  *((_QWORD *)v24 + 6) = v40;
                  *((_QWORD *)v24 + 7) = v41;
                  *((_QWORD *)v24 + 8) = v250;
                  v25 = v24 + 72;
                  if (v28 == v33)
                  {
                    __p[0] = &v43[8 * ((v28 - v33) >> 3)];
                    v259 = (std::__shared_weak_count *)&v43[72 * v39];
                    v21 = v248;
                    v26 = v249;
                    v37 = v253;
                  }
                  else
                  {
                    v44 = 0;
                    v37 = v253;
                    do
                    {
                      v46 = (__n128 *)&v24[v44];
                      v47 = (__n128 *)&v28[v44];
                      v46[-5].n128_u64[1] = *(_QWORD *)&v28[v44 - 72];
                      v46[-4].n128_u8[0] = 0;
                      if (v28[v44 - 64])
                      {
                        v48 = *(__n128 *)((char *)v47 - 56);
                        v46[-3].n128_u64[1] = v47[-3].n128_u64[1];
                        *(__n128 *)((char *)v46 - 56) = v48;
                        v46[-4].n128_u8[0] = 1;
                      }
                      v12 = v47[-2];
                      v45 = v47[-1];
                      v46[-2] = v12;
                      v46[-1] = v45;
                      v44 -= 72;
                    }
                    while (&v28[v44] != v33);
                    v24 += v44;
                    __p[0] = v24;
                    __p[1] = v25;
                    v259 = (std::__shared_weak_count *)&v43[72 * v39];
                    v21 = v248;
                    v26 = v249;
                    do
                    {
                      if (*(v28 - 64))
                        *(v28 - 64) = 0;
                      v28 -= 72;
                    }
                    while (v28 != v33);
                  }
                  if (v33)
                  {
                    operator delete(v33);
                    v37 = v266.__r_.__value_.__r.__words[0];
                  }
                  v33 = v24;
                }
                else
                {
                  *(_QWORD *)v28 = v27;
                  *((_QWORD *)v28 + 2) = v30;
                  *((_QWORD *)v28 + 3) = v34;
                  v28[8] = 1;
                  *((_QWORD *)v28 + 4) = v35;
                  *((_QWORD *)v28 + 5) = v36;
                  *((_QWORD *)v28 + 6) = v30;
                  *((_QWORD *)v28 + 7) = v32;
                  v25 = v28 + 72;
                  *((_QWORD *)v28 + 8) = v31;
                  v37 = v253;
                }
                __p[1] = v25;
                v253 = v37;
                *(_DWORD *)(v37 + 4 * v34) = 1;
                v26[v34] = v21;
                v49 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 56 * v34);
                if (!v49[2])
                  break;
                v32 = 0;
                v31 = v34;
                v27 = v34;
                v28 = v25;
                v30 = v34;
                v29 = *(_QWORD **)(v49[5] + 8 * v49[1]);
                if (!v29)
                  goto LABEL_15;
              }
              v27 = v34;
            }
LABEL_15:
            v17 = v253;
            *(_DWORD *)(v253 + 4 * v27) = 4;
          }
          while (v24 != v25);
          v16 = v21;
          if (v24)
            operator delete(v24);
          v6 = a4;
          v14 = v241;
          v15 = v242;
          if (v243)
          {
            v50 = v243 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v243 + 16))(v243);
              v53 = v243 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v243 + 24))(v243);
            }
          }
        }
        ++v15;
      }
      while (v15 != v14);
    }
    else
    {
      v16 = -1;
    }
    v57 = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v58 = (unsigned int *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        (*(void (**)(std::string::size_type, __n128))(*(_QWORD *)v57 + 16))(v57, v12);
        v61 = (unsigned int *)(v57 + 12);
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v57 + 24))(v57);
      }
    }
    v56 = v16 + 1;
  }
  else
  {
    v56 = 0;
  }
  v64 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v64 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    __dst = *(std::string *)byte_25578BAF8;
  v65 = std::string::append(&__dst, ".", 1uLL);
  v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v266.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v266.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&v266, "SingleShot.DepthMapPlaneDetector", 0x20uLL);
  v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v259 = (std::__shared_weak_count *)v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v259) >= 0)
    v69 = __p;
  else
    v69 = (void **)__p[0];
  strlen((const char *)v69);
  sub_2241471F8();
  v70 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((SHIBYTE(v259) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v266.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_78;
LABEL_99:
    operator delete(v266.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
LABEL_100:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_79;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
LABEL_78:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_100;
LABEL_79:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
  {
    v71 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v71 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    sub_223EE5770(v6, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a3[1] - (_BYTE *)*a3) >> 3), (uint64_t)__p);
    v72 = (char *)operator new(0x20uLL);
    strcpy(v72, "BeforeConflictResolution");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
    {
      *(_QWORD *)&v256 = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      *((_QWORD *)&v256 + 1) = 2;
      v73 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
      {
        v74 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 56))(v70);
        sub_223197FA4(&v266, v72, 0x18uLL);
        v267 = 1;
        sub_2231C6C30(__p, (__int128 *)&v266, &v256, &__dst);
        sub_2231AA5A4((uint64_t)v73, v74, (uint64_t)&__dst);
        v75 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
        if (__dst.__r_.__value_.__r.__words[2])
        {
          v76 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        if (v267 && SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v266.__r_.__value_.__l.__data_);
      }
    }
    operator delete(v72);
    v78 = v259;
    if (v259)
    {
      p_shared_owners = (unint64_t *)&v259->__shared_owners_;
      do
        v80 = __ldaxr(p_shared_owners);
      while (__stlxr(v80 - 1, p_shared_owners));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
        memset(&v266, 0, sizeof(v266));
        if (v56)
          goto LABEL_96;
LABEL_102:
        v82 = 0;
        v81 = 0;
        goto LABEL_103;
      }
    }
  }
  memset(&v266, 0, sizeof(v266));
  if (!v56)
    goto LABEL_102;
LABEL_96:
  if (v56 >> 61)
    sub_22316E078();
  v81 = operator new(8 * v56);
  v82 = (std::string::size_type)v81 + 8 * v56;
  v266.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
  v266.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
  v266.__r_.__value_.__r.__words[2] = v82;
LABEL_103:
  if (v56 != 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a3[1] - (_BYTE *)*a3) >> 3))
  {
    v252 = v56;
    sub_2236C4184(&__dst, v56);
    v100 = v262;
    v99 = v263;
    if (v262 != v263)
    {
      v101 = 0;
      v254 = v263;
      while (1)
      {
        while (1)
        {
          v102 = __dst.__r_.__value_.__r.__words[0] + 24 * *v100;
          v104 = (uint64_t *)(v102 + 8);
          v103 = *(char **)(v102 + 8);
          v105 = *(_QWORD *)(v102 + 16);
          if ((unint64_t)v103 >= v105)
            break;
          *(_QWORD *)v103 = v101;
          *v104 = (uint64_t)(v103 + 8);
          ++v100;
          ++v101;
          if (v100 == v99)
            goto LABEL_142;
        }
        v106 = *(char **)v102;
        v107 = (uint64_t)&v103[-*(_QWORD *)v102];
        v108 = v107 >> 3;
        v109 = (v107 >> 3) + 1;
        if (v109 >> 61)
          sub_22367C394();
        v110 = v105 - (_QWORD)v106;
        if (v110 >> 2 > v109)
          v109 = v110 >> 2;
        v111 = (unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v109;
        if (v111)
          break;
        v113 = 0;
        v114 = (_QWORD *)(8 * v108);
        *(_QWORD *)(8 * v108) = v101;
        v115 = 8 * v108 + 8;
        v116 = v103 - v106;
        if (v103 != v106)
          goto LABEL_133;
LABEL_139:
        *(_QWORD *)v102 = v114;
        *v104 = v115;
        *(_QWORD *)(v102 + 16) = &v113[8 * v111];
        if (v106)
          operator delete(v106);
        v99 = v254;
        *v104 = v115;
        ++v100;
        ++v101;
        if (v100 == v254)
          goto LABEL_142;
      }
      if (v111 >> 61)
        sub_223174E94();
      v112 = v111;
      v113 = operator new(8 * v111);
      v111 = v112;
      v114 = &v113[8 * v108];
      *v114 = v101;
      v115 = (uint64_t)(v114 + 1);
      v116 = v103 - v106;
      if (v103 == v106)
        goto LABEL_139;
LABEL_133:
      v117 = v116 - 8;
      if (v117 < 0x58)
        goto LABEL_308;
      if ((unint64_t)(v103 - v113 - v107) < 0x20)
        goto LABEL_308;
      v118 = (v117 >> 3) + 1;
      v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
      v120 = &v103[-v119];
      v114 = (_QWORD *)((char *)v114 - v119);
      v121 = &v113[8 * v108 - 16];
      v122 = v103 - 16;
      v123 = v118 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v124 = *(_OWORD *)v122;
        *(v121 - 1) = *((_OWORD *)v122 - 1);
        *v121 = v124;
        v121 -= 2;
        v122 -= 32;
        v123 -= 4;
      }
      while (v123);
      v103 = v120;
      if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_308:
        do
        {
          v125 = *((_QWORD *)v103 - 1);
          v103 -= 8;
          *--v114 = v125;
        }
        while (v103 != v106);
      }
      goto LABEL_139;
    }
LABEL_142:
    v256 = 0uLL;
    v257 = 0;
    if (v252)
    {
      v6 = a4;
      if (v252 >= 0xAAAAAAAAAAAAAABLL)
        sub_22316E078();
      v126 = operator new(24 * v252);
      *(_QWORD *)&v256 = v126;
      v257 = (char *)&v126[3 * v252];
      v127 = v126;
      do
      {
        *v127 = 0;
        v127[1] = 0;
        v127[2] = 0x3F80000000000000;
        v127 += 3;
      }
      while (v127 != &v126[3 * v252]);
      *((_QWORD *)&v256 + 1) = &v126[3 * v252];
    }
    else
    {
      v6 = a4;
    }
    sub_223EF19B8((uint64_t)__p, v252);
    v255 = __dst.__r_.__value_.__l.__size_;
    v128 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0] != __dst.__r_.__value_.__l.__size_)
    {
      v129 = 0;
      do
      {
        v131 = *(uint64_t **)v128;
        v132 = *(uint64_t **)(v128 + 8);
        v133 = 126 - 2 * __clz(((uint64_t)v132 - *(_QWORD *)v128) >> 3);
        v213 = v132 == *(uint64_t **)v128;
        v265 = a2;
        if (v213)
          v134 = 0;
        else
          v134 = v133;
        sub_223EF9010((unint64_t)v131, v132, &v265, v134, 1);
        v135 = **(_QWORD **)v128;
        v136 = *a2;
        v137 = (char *)v266.__r_.__value_.__l.__size_;
        if (v266.__r_.__value_.__l.__size_ < v266.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)v266.__r_.__value_.__l.__size_ = *(_QWORD *)(v136 + 8 * v135);
          v138 = (std::string::size_type)(v137 + 8);
          goto LABEL_177;
        }
        v139 = v266.__r_.__value_.__r.__words[0];
        v140 = (uint64_t)(v266.__r_.__value_.__l.__size_ - v266.__r_.__value_.__r.__words[0]) >> 3;
        v141 = v140 + 1;
        if ((unint64_t)(v140 + 1) >> 61)
          sub_22316E078();
        v142 = v266.__r_.__value_.__r.__words[2] - v266.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v266.__r_.__value_.__r.__words[2] - v266.__r_.__value_.__r.__words[0]) >> 2 > v141)
          v141 = v142 >> 2;
        if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
          v143 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v143 = v141;
        if (v143)
        {
          if (v143 >> 61)
            sub_223174E94();
          v144 = (char *)operator new(8 * v143);
          v145 = &v144[8 * v140];
          *(_QWORD *)v145 = *(_QWORD *)(v136 + 8 * v135);
          v138 = (std::string::size_type)(v145 + 8);
          v146 = &v137[-v139];
          if (v137 == (char *)v139)
          {
LABEL_175:
            v266.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
            v266.__r_.__value_.__l.__size_ = v138;
            v266.__r_.__value_.__r.__words[2] = (std::string::size_type)&v144[8 * v143];
            if (!v137)
              goto LABEL_177;
LABEL_176:
            operator delete(v137);
            goto LABEL_177;
          }
        }
        else
        {
          v144 = 0;
          v145 = (char *)(8 * v140);
          *(_QWORD *)(8 * v140) = *(_QWORD *)(v136 + 8 * v135);
          v138 = 8 * v140 + 8;
          v146 = &v137[-v139];
          if (v137 == (char *)v139)
            goto LABEL_175;
        }
        v147 = (unint64_t)(v146 - 8);
        if (v147 < 0x58)
          goto LABEL_309;
        if (v139 - (unint64_t)v144 < 0x20)
          goto LABEL_309;
        v148 = (v147 >> 3) + 1;
        v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
        v150 = &v137[-v149];
        v145 -= v149;
        v151 = &v144[8 * v140 - 16];
        v152 = v137 - 16;
        v153 = v148 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v154 = *(_OWORD *)v152;
          *((_OWORD *)v151 - 1) = *((_OWORD *)v152 - 1);
          *(_OWORD *)v151 = v154;
          v151 -= 32;
          v152 -= 32;
          v153 -= 4;
        }
        while (v153);
        v137 = v150;
        if (v148 != (v148 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_309:
          do
          {
            v155 = *((_QWORD *)v137 - 1);
            v137 -= 8;
            *((_QWORD *)v145 - 1) = v155;
            v145 -= 8;
          }
          while (v137 != (char *)v139);
        }
        v137 = (char *)v266.__r_.__value_.__r.__words[0];
        v266.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
        v266.__r_.__value_.__l.__size_ = v138;
        v266.__r_.__value_.__r.__words[2] = (std::string::size_type)&v144[8 * v143];
        if (v137)
          goto LABEL_176;
LABEL_177:
        v266.__r_.__value_.__l.__size_ = v138;
        v156 = (uint64_t)*a3 + 24 * **(_QWORD **)v128;
        v157 = v256 + 24 * v129;
        v158 = *(_QWORD *)v156;
        *(_DWORD *)(v157 + 8) = *(_DWORD *)(v156 + 8);
        *(_QWORD *)v157 = v158;
        v159 = *(_QWORD *)(v156 + 12);
        *(_DWORD *)(v157 + 20) = *(_DWORD *)(v156 + 20);
        *(_QWORD *)(v157 + 12) = v159;
        v160 = **(_QWORD **)v128;
        v161 = *a5 + 16 * v160;
        v163 = *(_DWORD *)v161;
        v162 = *(unsigned int *)(v161 + 4);
        v164 = *(_QWORD *)(v161 + 8);
        v165 = a5[3];
        v166 = *(_DWORD *)(v165 + 4 * v160);
        v167 = *(_QWORD *)(v128 + 8) - *(_QWORD *)v128;
        if (v167 != 8)
        {
          v168 = (v167 >> 3) - 1;
          v169 = (uint64_t *)(*(_QWORD *)v128 + 8);
          do
          {
            v171 = *v169++;
            v170 = v171;
            v172 = *a5 + 16 * v171;
            v173 = *(_DWORD *)(v172 + 4);
            if (*(_DWORD *)v172 < v163)
              v163 = *(_DWORD *)v172;
            if (v173 >= v162)
              v162 = v162;
            else
              v162 = v173;
            LODWORD(v174) = *(_DWORD *)(v172 + 8);
            LODWORD(v172) = *(_DWORD *)(v172 + 12);
            if (v164 <= v174)
              v174 = v174;
            else
              v174 = v164;
            if (HIDWORD(v164) <= v172)
              v172 = v172;
            else
              v172 = HIDWORD(v164);
            v164 = v174 | (v172 << 32);
            v166 += *(_DWORD *)(v165 + 4 * v170);
            --v168;
          }
          while (v168);
        }
        v175 = __p[1];
        if (__p[1] >= v259)
        {
          v177 = __p[0];
          v178 = ((char *)__p[1] - (char *)__p[0]) >> 4;
          v179 = v178 + 1;
          if ((unint64_t)(v178 + 1) >> 60)
            sub_22316E078();
          v180 = (char *)v259 - (char *)__p[0];
          if (((char *)v259 - (char *)__p[0]) >> 3 > v179)
            v179 = v180 >> 3;
          if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF0)
            v181 = 0xFFFFFFFFFFFFFFFLL;
          else
            v181 = v179;
          if (v181)
          {
            if (v181 >> 60)
              goto LABEL_290;
            v182 = (char *)operator new(16 * v181);
          }
          else
          {
            v182 = 0;
          }
          v183 = &v182[16 * v178];
          *(_QWORD *)v183 = v163 | (unint64_t)(v162 << 32);
          *((_QWORD *)v183 + 1) = v164;
          v184 = v183;
          if (v175 != v177)
          {
            do
            {
              *((_OWORD *)v184 - 1) = *((_OWORD *)v175 - 1);
              v184 -= 16;
              v175 -= 2;
            }
            while (v175 != v177);
            v175 = __p[0];
          }
          v176 = v183 + 16;
          __p[0] = v184;
          __p[1] = v183 + 16;
          v259 = (std::__shared_weak_count *)&v182[16 * v181];
          if (v175)
            operator delete(v175);
        }
        else
        {
          *(_QWORD *)__p[1] = v163 | (unint64_t)(v162 << 32);
          v175[1] = v164;
          v176 = v175 + 2;
        }
        __p[1] = v176;
        v185 = (_BYTE *)*((_QWORD *)&v260 + 1);
        if (*((_QWORD *)&v260 + 1) >= (unint64_t)v261)
        {
          v186 = (_BYTE *)v260;
          v187 = *((_QWORD *)&v260 + 1) - v260;
          v188 = (uint64_t)(*((_QWORD *)&v260 + 1) - v260) >> 2;
          v189 = v188 + 1;
          if ((unint64_t)(v188 + 1) >> 62)
            sub_22316E078();
          v190 = (uint64_t)&v261[-v260];
          if ((uint64_t)&v261[-v260] >> 1 > v189)
            v189 = v190 >> 1;
          if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL)
            v191 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v191 = v189;
          if (v191)
          {
            if (v191 >> 62)
LABEL_290:
              sub_223174E94();
            v192 = (char *)operator new(4 * v191);
            v193 = &v192[4 * v188];
            *(_DWORD *)v193 = v166;
            v130 = (uint64_t)(v193 + 4);
            v194 = v185 - v186;
            if (v185 == v186)
              goto LABEL_226;
LABEL_220:
            v195 = v194 - 4;
            if (v195 < 0x2C)
              goto LABEL_310;
            if ((unint64_t)(v185 - &v192[v187]) < 0x20)
              goto LABEL_310;
            v196 = (v195 >> 2) + 1;
            v197 = 4 * (v196 & 0x7FFFFFFFFFFFFFF8);
            v198 = &v185[-v197];
            v193 -= v197;
            v199 = &v192[4 * v188 - 16];
            v200 = (__int128 *)(v185 - 16);
            v201 = v196 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v202 = *v200;
              *((_OWORD *)v199 - 1) = *(v200 - 1);
              *(_OWORD *)v199 = v202;
              v199 -= 32;
              v200 -= 2;
              v201 -= 8;
            }
            while (v201);
            v185 = v198;
            if (v196 != (v196 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_310:
              do
              {
                v203 = *((_DWORD *)v185 - 1);
                v185 -= 4;
                *((_DWORD *)v193 - 1) = v203;
                v193 -= 4;
              }
              while (v185 != v186);
            }
          }
          else
          {
            v192 = 0;
            v193 = (char *)(4 * v188);
            *(_DWORD *)(4 * v188) = v166;
            v130 = 4 * v188 + 4;
            v194 = v185 - v186;
            if (v185 != v186)
              goto LABEL_220;
          }
LABEL_226:
          *(_QWORD *)&v260 = v193;
          *((_QWORD *)&v260 + 1) = v130;
          v261 = &v192[4 * v191];
          if (v186)
            operator delete(v186);
          goto LABEL_151;
        }
        **((_DWORD **)&v260 + 1) = v166;
        v130 = (uint64_t)(v185 + 4);
LABEL_151:
        v6 = a4;
        *((_QWORD *)&v260 + 1) = v130;
        v128 += 24;
        ++v129;
      }
      while (v128 != v255);
    }
    v204 = *(_QWORD *)(v6 + 8);
    v205 = *(std::__shared_weak_count **)(v6 + 16);
    if (!v205)
      goto LABEL_233;
    v206 = (unint64_t *)&v205->__shared_owners_;
    do
      v207 = __ldxr(v206);
    while (__stxr(v207 + 1, v206));
    do
      v208 = __ldaxr(v206);
    while (__stlxr(v208 - 1, v206));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
      if (!v204)
        goto LABEL_241;
    }
    else
    {
LABEL_233:
      if (!v204)
        goto LABEL_241;
    }
    if (*(_BYTE *)(v6 + 81))
    {
      (*(void (**)(uint64_t **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v6 + 8) + 96))(&v265, *(_QWORD *)(v6 + 8), 1);
      v209 = *(unsigned int *)(v6 + 76);
      v210 = *(_QWORD *)(v6 + 64);
      v211 = *(_QWORD *)(v6 + 32);
      if (!*(_BYTE *)(v6 + 80))
        goto LABEL_244;
      goto LABEL_242;
    }
LABEL_241:
    v265 = 0;
    v209 = *(unsigned int *)(v6 + 76);
    v210 = *(_QWORD *)(v6 + 64);
    v211 = *(_QWORD *)(v6 + 32);
    if (!*(_BYTE *)(v6 + 80))
      goto LABEL_244;
LABEL_242:
    if (v211)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v6 + 8) + 88))(*(_QWORD *)(v6 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v211 = *(_QWORD *)(v6 + 32);
    }
LABEL_244:
    v212 = (v209 * HIDWORD(v210));
    if ((_DWORD)v212)
      v213 = v210 == 0;
    else
      v213 = 1;
    if (!v213)
    {
      v227 = v211 + v212;
      do
      {
        v228 = 0;
        do
        {
          v229 = *(unsigned __int8 *)(v211 + v228);
          if (v229 != 255)
            *(_BYTE *)(v211 + v228) = v262[v229];
          ++v228;
        }
        while (v210 != v228);
        v211 += v209;
      }
      while (v211 != v227);
    }
    v214 = v265;
    v265 = 0;
    if (v214)
      (*(void (**)(uint64_t *))(*v214 + 8))(v214);
    v215 = a3;
    v216 = *a3;
    if (*a3)
    {
      a3[1] = v216;
      operator delete(v216);
      v215 = a3;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    *(_OWORD *)v215 = v256;
    v215[2] = v257;
    v257 = 0;
    v256 = 0uLL;
    v217 = a5;
    v218 = (void *)*a5;
    if (*a5)
    {
      a5[1] = v218;
      operator delete(v218);
      v217 = a5;
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    *(_OWORD *)v217 = *(_OWORD *)__p;
    v217[2] = v259;
    __p[1] = 0;
    v259 = 0;
    __p[0] = 0;
    v220 = v217 + 3;
    v219 = (void *)v217[3];
    if (v219)
    {
      v217[4] = v219;
      operator delete(v219);
      v217 = a5;
      *v220 = 0;
      v220[1] = 0;
      v220[2] = 0;
      v219 = __p[0];
    }
    *(_OWORD *)(v217 + 3) = v260;
    v217[5] = v261;
    v261 = 0;
    v260 = 0uLL;
    if (v219)
    {
      __p[1] = v219;
      operator delete(v219);
    }
    v221 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      v222 = __dst.__r_.__value_.__l.__size_;
      v223 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        v224 = __dst.__r_.__value_.__l.__size_;
        do
        {
          v226 = *(void **)(v224 - 24);
          v224 -= 24;
          v225 = v226;
          if (v226)
          {
            *(_QWORD *)(v222 - 16) = v225;
            operator delete(v225);
          }
          v222 = v224;
        }
        while (v224 != v221);
        v223 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v221;
LABEL_276:
      operator delete(v223);
      goto LABEL_277;
    }
    goto LABEL_277;
  }
  v84 = (uint64_t *)*a2;
  v83 = (uint64_t *)a2[1];
  v85 = (uint64_t)v83 - *a2;
  if (v85 < 1)
    goto LABEL_277;
  v86 = v85 >> 3;
  v87 = v82 - (_QWORD)v81;
  if (v85 >> 3 > v87 >> 3)
  {
    v88 = v87 >> 2;
    if (v87 >> 2 <= v86)
      v88 = v85 >> 3;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v89 = v88;
    if (v89 >> 61)
      sub_223174E94();
    v90 = (char *)operator new(8 * v89);
    if ((unint64_t)(v85 - 8) < 0x18)
    {
      v91 = v90;
    }
    else
    {
      v91 = v90;
      if ((unint64_t)(v90 - (char *)v84) >= 0x20)
      {
        v92 = ((unint64_t)(v85 - 8) >> 3) + 1;
        v93 = v92 & 0x3FFFFFFFFFFFFFFCLL;
        v91 = &v90[v93 * 8];
        v94 = &v84[v93];
        v95 = (__int128 *)(v84 + 2);
        v96 = v90 + 16;
        v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v98 = *v95;
          *(v96 - 1) = *(v95 - 1);
          *v96 = v98;
          v95 += 2;
          v96 += 2;
          v97 -= 4;
        }
        while (v97);
        v84 = v94;
        if (v92 == (v92 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_274;
      }
    }
    do
    {
      v230 = *v84++;
      *(_QWORD *)v91 = v230;
      v91 += 8;
    }
    while (v91 != &v90[8 * v86]);
LABEL_274:
    v266.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
    v266.__r_.__value_.__l.__size_ = (std::string::size_type)&v90[8 * v86];
    v266.__r_.__value_.__r.__words[2] = (std::string::size_type)&v90[8 * v89];
    if (!v81)
      goto LABEL_277;
    v223 = v81;
    goto LABEL_276;
  }
  if (v84 != v83)
    memmove(v81, (const void *)*a2, (size_t)v83 - *a2);
  v266.__r_.__value_.__l.__size_ = (std::string::size_type)v81 + 8 * v86;
LABEL_277:
  v231 = v266.__r_.__value_.__l.__size_;
  v232 = (char *)v266.__r_.__value_.__r.__words[0];
  __p[0] = 0;
  __p[1] = 0;
  v259 = 0;
  v233 = v266.__r_.__value_.__l.__size_ - v266.__r_.__value_.__r.__words[0];
  if (v266.__r_.__value_.__l.__size_ == v266.__r_.__value_.__r.__words[0])
  {
    v236 = 0;
    v235 = 0uLL;
  }
  else
  {
    if (v233 < 0)
      sub_22316E078();
    __p[0] = operator new((unint64_t)v233 >> 1);
    __p[1] = __p[0];
    v259 = (std::__shared_weak_count *)((char *)__p[0] + 4 * (v233 >> 3));
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    do
    {
      v234 = sqrt(*(double *)(*(_QWORD *)v232 + 56) / (double)**(unint64_t **)v232);
      *(float *)&v256 = v234;
      sub_2233D7140((uint64_t *)&__dst, &v256);
      v232 += 8;
    }
    while (v232 != (char *)v231);
    v235 = *(_OWORD *)__p;
    v236 = v259;
    v232 = (char *)v266.__r_.__value_.__r.__words[0];
  }
  *(_OWORD *)a6 = *(_OWORD *)a3;
  *(_QWORD *)(a6 + 16) = a3[2];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *(_OWORD *)(a6 + 24) = v235;
  *(_QWORD *)(a6 + 40) = v236;
  *(_QWORD *)(a6 + 48) = &off_24EC24788;
  *(_OWORD *)(a6 + 56) = *(_OWORD *)(v6 + 8);
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v237 = *(_OWORD *)(v6 + 24);
  v238 = *(_OWORD *)(v6 + 40);
  v239 = *(_OWORD *)(v6 + 56);
  *(_QWORD *)(a6 + 120) = *(_QWORD *)(v6 + 72);
  *(_OWORD *)(a6 + 104) = v239;
  *(_OWORD *)(a6 + 88) = v238;
  *(_OWORD *)(a6 + 72) = v237;
  *(_WORD *)(a6 + 128) = *(_WORD *)(v6 + 80);
  *(_OWORD *)(a6 + 136) = *(_OWORD *)a5;
  *(_QWORD *)(a6 + 152) = a5[2];
  *a5 = 0;
  a5[1] = 0;
  *(_OWORD *)(a6 + 160) = *(_OWORD *)(a5 + 3);
  *(_QWORD *)(a6 + 176) = a5[5];
  a5[2] = 0;
  a5[3] = 0;
  a5[4] = 0;
  a5[5] = 0;
  if (v232)
  {
    v266.__r_.__value_.__l.__size_ = (std::string::size_type)v232;
    operator delete(v232);
  }
  if (v262)
    operator delete(v262);
}

void sub_223EF7ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  uint64_t v33;
  void *v35;

  sub_2241231D8(v33 - 112);
  if (*(_BYTE *)(v33 - 120) && *(char *)(v33 - 121) < 0)
    operator delete(*(void **)(v33 - 144));
  operator delete(v32);
  sub_223167354((uint64_t)&a28);
  v35 = *(void **)(v33 - 176);
  if (v35)
    operator delete(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_223EF7CBC(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int32 *v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  unsigned __int32 v16;
  BOOL v17;
  BOOL v18;
  _BOOL4 v19;
  uint64_t v20;
  unsigned __int32 v21;
  unsigned __int32 v22;
  BOOL v23;
  BOOL v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int32 v28;
  unsigned __int32 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int32 v34;
  unsigned __int32 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  uint64_t v38;
  unsigned __int32 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  __int8 *v42;
  unsigned int *v43;
  unsigned __int32 v44;
  unsigned __int32 v45;
  unsigned __int32 v46;
  BOOL v47;
  BOOL v48;
  unsigned __int32 v49;
  _BOOL4 v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int32 v54;
  unsigned __int32 v55;
  _BOOL4 v56;
  _BOOL4 v57;
  uint64_t v58;
  unsigned __int32 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned __int32 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  __int8 *v66;
  unsigned int *v67;
  unsigned __int32 v68;
  unsigned __int32 v69;
  unsigned __int32 v70;
  BOOL v71;
  BOOL v72;
  unsigned __int32 v73;
  _BOOL4 v74;
  _BOOL4 v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int32 v78;
  unsigned __int32 v79;
  _BOOL4 v80;
  _BOOL4 v81;
  uint64_t v82;
  unsigned __int32 v83;
  _BOOL4 v84;
  _BOOL4 v85;
  unsigned __int32 v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BOOL4 v96;
  uint64_t v97;
  uint64_t v98;
  _BOOL4 v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int32 v102;
  unsigned __int32 v103;
  BOOL v104;
  uint64_t v105;
  unsigned __int32 v106;
  BOOL v107;
  char *v108;
  int8x16_t *v109;
  unsigned int v110;
  unsigned __int32 v111;
  _BOOL4 v112;
  _BOOL4 v113;
  unsigned int v114;
  unsigned __int32 v115;
  BOOL v116;
  BOOL v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  unsigned int v125;
  unsigned int v126;
  _BOOL4 v127;
  _BOOL4 v128;
  char *v129;
  BOOL v130;
  uint64_t v131;
  unsigned __int32 v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned __int32 v136;
  BOOL v137;
  BOOL v138;
  int8x16_t *v139;
  unsigned __int32 v140;
  _BOOL4 v141;
  _BOOL4 v142;
  int8x16_t *v143;
  unsigned int v144;
  unsigned __int32 v145;
  BOOL v146;
  BOOL v147;
  uint64_t v148;
  unsigned int v149;
  unsigned __int32 v150;
  _BOOL4 v151;
  _BOOL4 v152;
  unsigned int v153;
  unsigned __int32 v154;
  BOOL v155;
  BOOL v156;
  uint64_t *v157;
  unsigned __int32 v158;
  unsigned __int32 v159;
  _BOOL4 v160;
  _BOOL4 v161;
  uint64_t v162;
  unsigned __int32 v163;
  unsigned __int32 v164;
  unsigned __int32 v165;
  BOOL v166;
  BOOL v167;
  unsigned __int32 v168;
  _BOOL4 v169;
  _BOOL4 v170;
  unsigned __int32 v171;
  unsigned __int32 v172;
  _BOOL4 v173;
  _BOOL4 v174;
  uint64_t v175;
  unsigned __int32 v176;
  unsigned __int32 v177;
  _BOOL4 v178;
  _BOOL4 v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int32 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  uint64_t v185;
  unsigned __int32 v186;
  _BOOL4 v187;
  uint64_t v188;
  int8x16_t *v189;
  BOOL v190;
  char v191;
  uint64_t v192;
  int8x16_t *v193;
  uint64_t *v194;
  unsigned __int32 v195;
  unsigned __int32 v196;
  unsigned __int32 v197;
  unsigned __int32 v198;
  _BOOL4 v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  __int8 *v203;
  unsigned int v204;
  unsigned int v205;
  BOOL v206;
  BOOL v207;
  int64_t v208;
  int64_t v209;
  int64_t v210;
  uint64_t v211;
  __int32 *v212;
  unsigned __int32 v213;
  unsigned __int32 v214;
  unsigned __int32 v215;
  _BOOL4 v216;
  __int32 *v217;
  unsigned int v218;
  BOOL v219;
  BOOL v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  unsigned __int32 v224;
  unsigned __int32 v225;
  _BOOL4 v226;
  unsigned int v227;
  _BOOL4 v228;
  __int32 *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  int8x16_t *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int32 v239;
  unsigned __int32 v240;
  _BOOL4 v241;
  _BOOL4 v242;
  uint64_t v243;
  unint64_t v244;
  __int32 *v245;
  unsigned __int32 v246;
  unsigned __int32 v247;
  _BOOL4 v248;
  _BOOL4 v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t *v252;
  unsigned int v253;
  BOOL v254;
  BOOL v255;
  uint64_t v256;
  unsigned __int32 v257;
  unsigned __int32 v258;
  _BOOL4 v259;
  _BOOL4 v260;
  unsigned __int32 v261;
  unsigned __int32 v262;
  unsigned __int32 v263;
  unsigned __int32 v264;
  _BOOL4 v265;
  _BOOL4 v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  unsigned int v271;
  BOOL v272;
  BOOL v273;
  unsigned __int32 v274;
  _BOOL4 v275;
  _BOOL4 v276;

  v7 = (int8x16_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v158 = a2[-1].u32[3];
        v159 = v8->u32[1];
        v160 = a2[-1].i32[2] < (unsigned __int32)v8->i32[0];
        v190 = v158 == v159;
        v161 = v158 < v159;
        if (!v190)
          v160 = v161;
        if (v160)
        {
          v162 = v8->i64[0];
          goto LABEL_177;
        }
        return result;
      case 3:
        v163 = v8->u32[2];
        v164 = v8->u32[3];
        v165 = v8->u32[1];
        v166 = v163 < v8->i32[0];
        v190 = v164 == v165;
        v167 = v164 < v165;
        if (!v190)
          v166 = v167;
        v168 = a2[-1].u32[3];
        v169 = a2[-1].i32[2] < v163;
        v190 = v168 == v164;
        v170 = v168 < v164;
        if (v190)
          v170 = v169;
        if (v166)
        {
          v162 = v8->i64[0];
          if (v170)
          {
LABEL_177:
            v8->i64[0] = a2[-1].i64[1];
LABEL_178:
            a2[-1].i64[1] = v162;
            return result;
          }
          v8->i64[0] = v8->i64[1];
          v8->i64[1] = v162;
          v274 = a2[-1].u32[3];
          v275 = a2[-1].i32[2] < v162;
          v190 = v274 == HIDWORD(v162);
          v276 = v274 < HIDWORD(v162);
          if (!v190)
            v275 = v276;
          if (v275)
          {
            v8->i64[1] = a2[-1].i64[1];
            goto LABEL_178;
          }
        }
        else if (v170)
        {
          v256 = v8->i64[1];
          v8->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v256;
          v257 = v8->u32[3];
          v258 = v8->u32[1];
          v259 = v8->i32[2] < (unsigned __int32)v8->i32[0];
          v190 = v257 == v258;
          v260 = v257 < v258;
          if (!v190)
            v259 = v260;
          if (v259)
            *v8 = vextq_s8(*v8, *v8, 8uLL);
        }
        return result;
      case 4:
        return (uint64_t)sub_223EF8E84(v8, &v8->i32[2], (int8x16_t *)v8[1].i32, &a2[-1].i32[2]);
      case 5:
        result = (uint64_t)sub_223EF8E84(v8, &v8->i32[2], (int8x16_t *)v8[1].i32, &v8[1].i32[2]);
        v171 = a2[-1].u32[3];
        v172 = v8[1].u32[3];
        v173 = a2[-1].i32[2] < (unsigned __int32)v8[1].i32[2];
        v190 = v171 == v172;
        v174 = v171 < v172;
        if (!v190)
          v173 = v174;
        if (v173)
        {
          v175 = v8[1].i64[1];
          v8[1].i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v175;
          v176 = v8[1].u32[3];
          v177 = v8[1].u32[1];
          v178 = v8[1].i32[2] < (unsigned __int32)v8[1].i32[0];
          v190 = v176 == v177;
          v179 = v176 < v177;
          if (!v190)
            v178 = v179;
          if (v178)
          {
            v181 = v8[1].i64[0];
            v180 = v8[1].i64[1];
            v8[1].i64[0] = v180;
            v8[1].i64[1] = v181;
            v182 = v8->u32[3];
            v183 = v8->i32[2] > v180;
            v190 = v182 == HIDWORD(v180);
            v184 = v182 > HIDWORD(v180);
            if (!v190)
              v183 = v184;
            if (v183)
            {
              v185 = v8->i64[1];
              v8->i64[1] = v180;
              v8[1].i64[0] = v185;
              v186 = v8->u32[1];
              v187 = v186 > HIDWORD(v180);
              if (v186 == HIDWORD(v180))
                v187 = v8->i32[0] > v180;
              if (v187)
              {
                v188 = v8->i64[0];
                v8->i64[0] = v180;
                v8->i64[1] = v188;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v208 = (unint64_t)(v10 - 2) >> 1;
              v209 = v208;
              do
              {
                v210 = v209;
                if (v208 >= v209)
                {
                  v211 = (2 * v209) | 1;
                  v212 = &v8->i32[2 * v211];
                  if (2 * v210 + 2 >= v10)
                  {
                    v213 = *v212;
                  }
                  else
                  {
                    v213 = *v212;
                    v214 = v212[1];
                    v215 = v212[3];
                    v190 = v214 == v215;
                    v216 = v214 < v215;
                    if (v190)
                      v216 = *v212 < v212[2];
                    if (v216)
                    {
                      v213 = v212[2];
                      v212 += 2;
                      v211 = 2 * v210 + 2;
                    }
                  }
                  v217 = &v8->i32[2 * v210];
                  v218 = v212[1];
                  result = v217[1];
                  v219 = v213 < *v217;
                  v190 = v218 == (_DWORD)result;
                  v220 = v218 < result;
                  if (!v190)
                    v219 = v220;
                  if (!v219)
                  {
                    v221 = *(_QWORD *)v217;
                    v222 = HIDWORD(*(_QWORD *)v217);
                    do
                    {
                      v229 = v217;
                      v217 = v212;
                      *(_QWORD *)v229 = *(_QWORD *)v212;
                      if (v208 < v211)
                        break;
                      v230 = (2 * v211) | 1;
                      v212 = &v8->i32[2 * v230];
                      v211 = 2 * v211 + 2;
                      if (v211 < v10)
                      {
                        v223 = *v212;
                        v224 = v212[1];
                        v225 = v212[3];
                        v190 = v224 == v225;
                        v226 = v224 < v225;
                        if (v190)
                          v226 = *v212 < v212[2];
                        if (v226)
                        {
                          v223 = v212[2];
                          v212 += 2;
                        }
                        else
                        {
                          v211 = v230;
                        }
                      }
                      else
                      {
                        v223 = *v212;
                        v211 = v230;
                      }
                      v227 = v212[1];
                      result = v223 < v221;
                      v190 = v227 == (_DWORD)v222;
                      v228 = v227 < v222;
                      if (v190)
                        v228 = result;
                    }
                    while (!v228);
                    *(_QWORD *)v217 = v221;
                  }
                }
                v209 = v210 - 1;
              }
              while (v210);
              v231 = (unint64_t)v9 >> 3;
              do
              {
                v233 = 0;
                v234 = v8->i64[0];
                v235 = (uint64_t *)v8;
                do
                {
                  v236 = (int8x16_t *)&v235[v233 + 1];
                  v237 = (2 * v233) | 1;
                  v238 = 2 * v233 + 2;
                  if (v238 < v231)
                  {
                    v239 = v236->u32[1];
                    result = v236->u32[2];
                    v240 = v236->u32[3];
                    v241 = v236->i32[0] < result;
                    v190 = v239 == v240;
                    v242 = v239 < v240;
                    if (!v190)
                      v241 = v242;
                    if (v241)
                    {
                      v236 = (int8x16_t *)((char *)v236 + 8);
                      v237 = v238;
                    }
                  }
                  *v235 = v236->i64[0];
                  v235 = (uint64_t *)v236;
                  v233 = v237;
                }
                while (v237 <= (uint64_t)((unint64_t)(v231 - 2) >> 1));
                a2 = (int8x16_t *)((char *)a2 - 8);
                if (v236 == a2)
                {
                  v236->i64[0] = v234;
                }
                else
                {
                  v236->i64[0] = a2->i64[0];
                  a2->i64[0] = v234;
                  v243 = (char *)v236 - (char *)v8 + 8;
                  if (v243 >= 9)
                  {
                    v244 = (((unint64_t)v243 >> 3) - 2) >> 1;
                    v245 = &v8->i32[2 * v244];
                    v246 = v245[1];
                    v247 = v236->u32[1];
                    v248 = *v245 < v236->i32[0];
                    v190 = v246 == v247;
                    v249 = v246 < v247;
                    if (!v190)
                      v248 = v249;
                    if (v248)
                    {
                      v250 = v236->i64[0];
                      v251 = HIDWORD(v236->i64[0]);
                      do
                      {
                        v252 = (uint64_t *)v236;
                        v236 = (int8x16_t *)v245;
                        *v252 = *(_QWORD *)v245;
                        if (!v244)
                          break;
                        v244 = (v244 - 1) >> 1;
                        v245 = &v8->i32[2 * v244];
                        v253 = v245[1];
                        v254 = *v245 < v250;
                        v190 = v253 == (_DWORD)v251;
                        v255 = v253 < v251;
                        if (!v190)
                          v254 = v255;
                      }
                      while (v254);
                      v236->i64[0] = v250;
                    }
                  }
                }
              }
              while (v231-- > 2);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8->i32[2 * ((unint64_t)v10 >> 1)];
          v14 = a2[-1].u32[2];
          v13 = a2[-1].u32[3];
          if ((unint64_t)v9 < 0x401)
          {
            v21 = v8->u32[1];
            v22 = v12[1];
            v23 = v8->i32[0] < *v12;
            v190 = v21 == v22;
            v24 = v21 < v22;
            if (!v190)
              v23 = v24;
            v190 = v13 == v21;
            v25 = v13 < v21;
            if (v190)
              v25 = v14 < v8->i32[0];
            if (!v23)
            {
              if (v25)
              {
                v33 = v8->i64[0];
                v8->i64[0] = a2[-1].i64[1];
                a2[-1].i64[1] = v33;
                v34 = v8->u32[1];
                v35 = v12[1];
                v36 = v8->i32[0] < *v12;
                v190 = v34 == v35;
                v37 = v34 < v35;
                if (!v190)
                  v36 = v37;
                if (v36)
                {
                  v38 = *(_QWORD *)v12;
                  *(_QWORD *)v12 = v8->i64[0];
                  v8->i64[0] = v38;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_98;
                }
              }
              goto LABEL_54;
            }
            v26 = *(_QWORD *)v12;
            if (v25)
            {
              *(_QWORD *)v12 = a2[-1].i64[1];
            }
            else
            {
              *(_QWORD *)v12 = v8->i64[0];
              v8->i64[0] = v26;
              v59 = a2[-1].u32[3];
              v60 = a2[-1].i32[2] < v26;
              v190 = v59 == HIDWORD(v26);
              v61 = v59 < HIDWORD(v26);
              if (!v190)
                v60 = v61;
              if (!v60)
              {
LABEL_54:
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_98;
              }
              v8->i64[0] = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v26;
            goto LABEL_54;
          }
          v15 = v12[1];
          v16 = v8->u32[1];
          v17 = *v12 < v8->i32[0];
          v190 = v15 == v16;
          v18 = v15 < v16;
          if (!v190)
            v17 = v18;
          v190 = v13 == v15;
          v19 = v13 < v15;
          if (v190)
            v19 = v14 < *v12;
          if (v17)
          {
            v20 = v8->i64[0];
            if (v19)
            {
              v8->i64[0] = a2[-1].i64[1];
LABEL_36:
              a2[-1].i64[1] = v20;
              goto LABEL_37;
            }
            v8->i64[0] = *(_QWORD *)v12;
            *(_QWORD *)v12 = v20;
            v39 = a2[-1].u32[3];
            v40 = a2[-1].i32[2] < v20;
            v190 = v39 == HIDWORD(v20);
            v41 = v39 < HIDWORD(v20);
            if (!v190)
              v40 = v41;
            if (v40)
            {
              *(_QWORD *)v12 = a2[-1].i64[1];
              goto LABEL_36;
            }
          }
          else if (v19)
          {
            v27 = *(_QWORD *)v12;
            *(_QWORD *)v12 = a2[-1].i64[1];
            a2[-1].i64[1] = v27;
            v28 = v12[1];
            v29 = v8->u32[1];
            v30 = *v12 < v8->i32[0];
            v190 = v28 == v29;
            v31 = v28 < v29;
            if (!v190)
              v30 = v31;
            if (v30)
            {
              v32 = v8->i64[0];
              v8->i64[0] = *(_QWORD *)v12;
              *(_QWORD *)v12 = v32;
            }
          }
LABEL_37:
          v42 = &v8->i8[8 * v11];
          v44 = *((_DWORD *)v42 - 2);
          v45 = *((_DWORD *)v42 - 1);
          v43 = (unsigned int *)(v42 - 8);
          v46 = v8->u32[3];
          v47 = v44 < v8->i32[2];
          v190 = v45 == v46;
          v48 = v45 < v46;
          if (!v190)
            v47 = v48;
          v49 = a2[-1].u32[1];
          v50 = a2[-1].i32[0] < v44;
          v190 = v49 == v45;
          v51 = v49 < v45;
          if (v190)
            v51 = v50;
          if (v47)
          {
            v52 = v8->i64[1];
            if (v51)
            {
              v8->i64[1] = a2[-1].i64[0];
LABEL_60:
              a2[-1].i64[0] = v52;
              goto LABEL_61;
            }
            v8->i64[1] = *(_QWORD *)v43;
            *(_QWORD *)v43 = v52;
            v63 = a2[-1].u32[1];
            v64 = a2[-1].i32[0] < v52;
            v190 = v63 == HIDWORD(v52);
            v65 = v63 < HIDWORD(v52);
            if (!v190)
              v64 = v65;
            if (v64)
            {
              *(_QWORD *)v43 = a2[-1].i64[0];
              goto LABEL_60;
            }
          }
          else if (v51)
          {
            v53 = *(_QWORD *)v43;
            *(_QWORD *)v43 = a2[-1].i64[0];
            a2[-1].i64[0] = v53;
            v54 = v43[1];
            v55 = v8->u32[3];
            v56 = *v43 < v8->i32[2];
            v190 = v54 == v55;
            v57 = v54 < v55;
            if (!v190)
              v56 = v57;
            if (v56)
            {
              v58 = v8->i64[1];
              v8->i64[1] = *(_QWORD *)v43;
              *(_QWORD *)v43 = v58;
            }
          }
LABEL_61:
          v66 = &v8->i8[8 * v11];
          v68 = *((_DWORD *)v66 + 2);
          v69 = *((_DWORD *)v66 + 3);
          v67 = (unsigned int *)(v66 + 8);
          v70 = v8[1].u32[1];
          v71 = v68 < v8[1].i32[0];
          v190 = v69 == v70;
          v72 = v69 < v70;
          if (!v190)
            v71 = v72;
          v73 = a2[-2].u32[3];
          v74 = a2[-2].i32[2] < v68;
          v190 = v73 == v69;
          v75 = v73 < v69;
          if (v190)
            v75 = v74;
          if (v71)
          {
            v76 = v8[1].i64[0];
            if (v75)
            {
              v8[1].i64[0] = a2[-2].i64[1];
LABEL_77:
              a2[-2].i64[1] = v76;
              goto LABEL_78;
            }
            v8[1].i64[0] = *(_QWORD *)v67;
            *(_QWORD *)v67 = v76;
            v83 = a2[-2].u32[3];
            v84 = a2[-2].i32[2] < v76;
            v190 = v83 == HIDWORD(v76);
            v85 = v83 < HIDWORD(v76);
            if (!v190)
              v84 = v85;
            if (v84)
            {
              *(_QWORD *)v67 = a2[-2].i64[1];
              goto LABEL_77;
            }
          }
          else if (v75)
          {
            v77 = *(_QWORD *)v67;
            *(_QWORD *)v67 = a2[-2].i64[1];
            a2[-2].i64[1] = v77;
            v78 = v67[1];
            v79 = v8[1].u32[1];
            v80 = *v67 < v8[1].i32[0];
            v190 = v78 == v79;
            v81 = v78 < v79;
            if (!v190)
              v80 = v81;
            if (v80)
            {
              v82 = v8[1].i64[0];
              v8[1].i64[0] = *(_QWORD *)v67;
              *(_QWORD *)v67 = v82;
            }
          }
LABEL_78:
          v86 = v12[1];
          v88 = *v43;
          v87 = v43[1];
          if (v86 == v87)
            v89 = *v12 < *v43;
          else
            v89 = v86 < v87;
          v91 = *v67;
          v90 = v67[1];
          v190 = v90 == v86;
          v92 = v90 < v86;
          if (v190)
            v92 = *v67 < *v12;
          if (v89)
          {
            v93 = *(_QWORD *)v43;
            if (v92)
            {
              *(_QWORD *)v43 = *(_QWORD *)v67;
              *(_QWORD *)v67 = v93;
              v94 = v8->i64[0];
              v8->i64[0] = *(_QWORD *)v12;
              *(_QWORD *)v12 = v94;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_55;
              goto LABEL_98;
            }
            *(_QWORD *)v43 = *(_QWORD *)v12;
            *(_QWORD *)v12 = v93;
            v99 = v90 < HIDWORD(v93);
            if (v90 == HIDWORD(v93))
              v99 = v91 < v93;
            if (v99)
            {
              v100 = *(_QWORD *)v67;
              *(_QWORD *)v12 = *(_QWORD *)v67;
              *(_QWORD *)v67 = v93;
              v93 = v100;
            }
            goto LABEL_97;
          }
          v93 = *(_QWORD *)v12;
          if (!v92)
          {
LABEL_97:
            v101 = v8->i64[0];
            v8->i64[0] = v93;
            *(_QWORD *)v12 = v101;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_98:
            v102 = v8[-1].u32[3];
            v103 = v8->u32[1];
            v190 = v102 == v103;
            v104 = v102 < v103;
            if (v190)
              v104 = v8[-1].i32[2] < (unsigned __int32)v8->i32[0];
            v62 = v8->i64[0];
            if (v104)
              goto LABEL_101;
            v132 = a2[-1].u32[3];
            v133 = a2[-1].i32[2] > v62;
            v190 = v132 == HIDWORD(v62);
            v134 = v132 > HIDWORD(v62);
            if (!v190)
              v133 = v134;
            if (v133)
            {
              do
              {
                v135 = v8->u32[2];
                v136 = v8->u32[3];
                v8 = (int8x16_t *)((char *)v8 + 8);
                v137 = v135 > v62;
                v190 = v136 == HIDWORD(v62);
                v138 = v136 > HIDWORD(v62);
                if (!v190)
                  v137 = v138;
              }
              while (!v137);
            }
            else
            {
              v139 = (int8x16_t *)&v8->u64[1];
              do
              {
                v8 = v139;
                if (v139 >= a2)
                  break;
                v140 = v139->u32[1];
                v141 = v139->i32[0] > v62;
                v190 = v140 == HIDWORD(v62);
                v142 = v140 > HIDWORD(v62);
                if (v190)
                  v142 = v141;
                v139 = (int8x16_t *)&v8->u64[1];
              }
              while (!v142);
            }
            v143 = a2;
            if (v8 < a2)
            {
              v143 = a2;
              do
              {
                v144 = v143[-1].u32[2];
                v145 = v143[-1].u32[3];
                v143 = (int8x16_t *)((char *)v143 - 8);
                v146 = v144 > v62;
                v190 = v145 == HIDWORD(v62);
                v147 = v145 > HIDWORD(v62);
                if (!v190)
                  v146 = v147;
              }
              while (v146);
            }
            while (v8 < v143)
            {
              v148 = v8->i64[0];
              v8->i64[0] = v143->i64[0];
              v143->i64[0] = v148;
              do
              {
                v149 = v8->u32[2];
                v150 = v8->u32[3];
                v8 = (int8x16_t *)((char *)v8 + 8);
                v151 = v149 > v62;
                v190 = v150 == HIDWORD(v62);
                v152 = v150 > HIDWORD(v62);
                if (!v190)
                  v151 = v152;
              }
              while (!v151);
              do
              {
                v153 = v143[-1].u32[2];
                v154 = v143[-1].u32[3];
                v143 = (int8x16_t *)((char *)v143 - 8);
                v155 = v153 > v62;
                v190 = v154 == HIDWORD(v62);
                v156 = v154 > HIDWORD(v62);
                if (!v190)
                  v155 = v156;
              }
              while (v155);
            }
            v157 = &v8[-1].i64[1];
            if (&v8[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v157;
            a4 = 0;
            *v157 = v62;
            continue;
          }
          v95 = *(_QWORD *)v67;
          *(_QWORD *)v12 = *(_QWORD *)v67;
          *(_QWORD *)v67 = v93;
          v96 = v87 > HIDWORD(v95);
          if (v87 == HIDWORD(v95))
            v96 = v88 > v95;
          if (v96)
          {
            v97 = *(_QWORD *)v43;
            *(_QWORD *)v43 = v95;
            *(_QWORD *)v12 = v97;
            v98 = v8->i64[0];
            v8->i64[0] = v97;
            *(_QWORD *)v12 = v98;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_55;
            goto LABEL_98;
          }
          v131 = v8->i64[0];
          v8->i64[0] = v95;
          *(_QWORD *)v12 = v131;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_98;
LABEL_55:
          v62 = v8->i64[0];
LABEL_101:
          v105 = 0;
          do
          {
            v106 = v8->u32[v105 + 3];
            v190 = v106 == HIDWORD(v62);
            v107 = v106 < HIDWORD(v62);
            if (v190)
              v107 = v8->i32[v105 + 2] < v62;
            v105 += 2;
          }
          while (v107);
          v108 = &v8->i8[v105 * 4];
          v109 = a2;
          if (v105 == 2)
          {
            v109 = a2;
            do
            {
              if (v108 >= (char *)v109)
                break;
              v114 = v109[-1].u32[2];
              v115 = v109[-1].u32[3];
              v109 = (int8x16_t *)((char *)v109 - 8);
              v116 = v114 < v62;
              v190 = v115 == HIDWORD(v62);
              v117 = v115 < HIDWORD(v62);
              if (!v190)
                v116 = v117;
            }
            while (!v116);
          }
          else
          {
            do
            {
              v110 = v109[-1].u32[2];
              v111 = v109[-1].u32[3];
              v109 = (int8x16_t *)((char *)v109 - 8);
              v112 = v110 < v62;
              v190 = v111 == HIDWORD(v62);
              v113 = v111 < HIDWORD(v62);
              if (!v190)
                v112 = v113;
            }
            while (!v112);
          }
          if (v108 >= (char *)v109)
          {
            v129 = v108 - 8;
            if (v108 - 8 != (char *)v8)
              goto LABEL_128;
          }
          else
          {
            v118 = (unint64_t)v108;
            v119 = (uint64_t *)v109;
            do
            {
              v120 = *(_QWORD *)v118;
              *(_QWORD *)v118 = *v119;
              *v119 = v120;
              do
              {
                v121 = *(_DWORD *)(v118 + 8);
                v122 = *(_DWORD *)(v118 + 12);
                v118 += 8;
                v123 = v121 < v62;
                v190 = v122 == HIDWORD(v62);
                v124 = v122 < HIDWORD(v62);
                if (!v190)
                  v123 = v124;
              }
              while (v123);
              do
              {
                v125 = *((_DWORD *)v119 - 2);
                v126 = *((_DWORD *)v119-- - 1);
                v127 = v125 < v62;
                v190 = v126 == HIDWORD(v62);
                v128 = v126 < HIDWORD(v62);
                if (!v190)
                  v127 = v128;
              }
              while (!v127);
            }
            while (v118 < (unint64_t)v119);
            v129 = (char *)(v118 - 8);
            if ((int8x16_t *)(v118 - 8) == v8)
              goto LABEL_129;
LABEL_128:
            v8->i64[0] = *(_QWORD *)v129;
          }
LABEL_129:
          *(_QWORD *)v129 = v62;
          if (v108 < (char *)v109)
            goto LABEL_132;
          v130 = sub_223EF8A74(v8, (int8x16_t *)v129);
          v8 = (int8x16_t *)(v129 + 8);
          result = sub_223EF8A74((int8x16_t *)(v129 + 8), a2);
          if (!(_DWORD)result)
          {
            if (v130)
              continue;
LABEL_132:
            result = sub_223EF7CBC(v7, v129, a3, a4 & 1);
            a4 = 0;
            v8 = (int8x16_t *)(v129 + 8);
            continue;
          }
          a2 = (int8x16_t *)v129;
          if (v130)
            return result;
          goto LABEL_2;
        }
        v189 = (int8x16_t *)&v8->u64[1];
        v190 = v8 == a2 || v189 == a2;
        v191 = v190;
        if ((a4 & 1) != 0)
        {
          if ((v191 & 1) == 0)
          {
            v192 = 0;
            v193 = v8;
            do
            {
              v195 = v193->u32[2];
              v196 = v193->u32[3];
              v197 = v193->i32[0];
              v198 = v193->u32[1];
              v193 = v189;
              v199 = v195 < v197;
              if (v196 != v198)
                v199 = v196 < v198;
              if (v199)
              {
                v200 = v193->i64[0];
                v201 = HIDWORD(v193->i64[0]);
                v202 = v192;
                do
                {
                  v203 = &v8->i8[v202];
                  *(uint64_t *)((char *)&v8->i64[1] + v202) = *(uint64_t *)((char *)v8->i64 + v202);
                  if (!v202)
                  {
                    v194 = (uint64_t *)v8;
                    goto LABEL_203;
                  }
                  v205 = *((_DWORD *)v203 - 2);
                  v204 = *((_DWORD *)v203 - 1);
                  v206 = v205 > v200;
                  v190 = v204 == (_DWORD)v201;
                  v207 = v204 > v201;
                  if (v190)
                    v207 = v206;
                  v202 -= 8;
                }
                while (v207);
                v194 = (uint64_t *)((char *)&v8->i64[1] + v202);
LABEL_203:
                *v194 = v200;
              }
              v189 = (int8x16_t *)&v193->u64[1];
              v192 += 8;
            }
            while (&v193->u64[1] != (unint64_t *)a2);
          }
        }
        else if ((v191 & 1) == 0)
        {
          do
          {
            v261 = v7->u32[2];
            v262 = v7->u32[3];
            v263 = v7->i32[0];
            v264 = v7->u32[1];
            v7 = v189;
            v265 = v261 < v263;
            v190 = v262 == v264;
            v266 = v262 < v264;
            if (!v190)
              v265 = v266;
            if (v265)
            {
              v267 = v189->i64[0];
              v268 = HIDWORD(v189->i64[0]);
              do
              {
                v269 = (uint64_t *)v189;
                v270 = v189[-1].i64[1];
                v189 = (int8x16_t *)((char *)v189 - 8);
                *v269 = v270;
                v271 = *((_DWORD *)v269 - 4);
                LODWORD(v269) = *((_DWORD *)v269 - 3);
                v272 = v271 > v267;
                v190 = (_DWORD)v269 == (_DWORD)v268;
                v273 = v269 > v268;
                if (v190)
                  v273 = v272;
              }
              while (v273);
              v189->i64[0] = v267;
            }
            v189 = (int8x16_t *)&v7->u64[1];
          }
          while (&v7->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_223EF8A74(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned __int32 v6;
  unsigned __int32 v7;
  _BOOL4 v8;
  BOOL v9;
  _BOOL4 v10;
  uint64_t v11;
  unsigned __int32 v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  BOOL v15;
  BOOL v16;
  unsigned __int32 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v20;
  int8x16_t *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int32 v24;
  unsigned __int32 v25;
  unsigned int v26;
  BOOL v27;
  unsigned __int32 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;
  unsigned __int32 v32;
  unsigned __int32 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  uint64_t v36;
  unsigned __int32 v37;
  unsigned __int32 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int32 v43;
  _BOOL4 v44;
  _BOOL4 v45;
  uint64_t v46;
  unsigned __int32 v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int32 v51;
  unsigned __int32 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  _BOOL4 v58;
  uint64_t v59;
  unsigned __int32 v60;
  _BOOL4 v61;
  _BOOL4 v62;
  _BOOL4 v63;
  __int32 *v64;
  uint64_t v65;
  int v66;
  unsigned __int32 v67;
  unsigned __int32 v68;
  unsigned int v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int8 *v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  BOOL v78;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].u32[3];
      v7 = a1->u32[1];
      v8 = a2[-1].i32[2] < (unsigned __int32)a1->i32[0];
      v9 = v6 == v7;
      v10 = v6 < v7;
      if (!v9)
        v8 = v10;
      if (v8)
      {
        v11 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v11;
      }
      return result;
    case 3:
      v12 = a1->u32[2];
      v13 = a1->u32[3];
      v14 = a1->u32[1];
      v15 = v12 < a1->i32[0];
      v9 = v13 == v14;
      v16 = v13 < v14;
      if (!v9)
        v15 = v16;
      v17 = a2[-1].u32[3];
      v18 = a2[-1].i32[2] < v12;
      v9 = v17 == v13;
      v19 = v17 < v13;
      if (v9)
        v19 = v18;
      if (v15)
      {
        v20 = a1->i64[0];
        if (v19)
        {
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v20;
        }
        else
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v20;
          v60 = a2[-1].u32[3];
          v61 = a2[-1].i32[2] < v20;
          v9 = v60 == HIDWORD(v20);
          v62 = v60 < HIDWORD(v20);
          if (!v9)
            v61 = v62;
          if (v61)
          {
            a1->i64[1] = a2[-1].i64[1];
            a2[-1].i64[1] = v20;
          }
        }
      }
      else if (v19)
      {
        v50 = a1->i64[1];
        a1->i64[1] = a2[-1].i64[1];
        a2[-1].i64[1] = v50;
        v51 = a1->u32[3];
        v52 = a1->u32[1];
        v53 = a1->i32[2] < (unsigned __int32)a1->i32[0];
        v9 = v51 == v52;
        v54 = v51 < v52;
        if (!v9)
          v53 = v54;
        if (v53)
          *a1 = vextq_s8(*a1, *a1, 8uLL);
      }
      return result;
    case 4:
      sub_223EF8E84(a1, &a1->i32[2], (int8x16_t *)a1[1].i32, &a2[-1].i32[2]);
      return 1;
    case 5:
      sub_223EF8E84(a1, &a1->i32[2], (int8x16_t *)a1[1].i32, &a1[1].i32[2]);
      v32 = a2[-1].u32[3];
      v33 = a1[1].u32[3];
      v34 = a2[-1].i32[2] < (unsigned __int32)a1[1].i32[2];
      v9 = v32 == v33;
      v35 = v32 < v33;
      if (!v9)
        v34 = v35;
      if (!v34)
        return 1;
      v36 = a1[1].i64[1];
      a1[1].i64[1] = a2[-1].i64[1];
      a2[-1].i64[1] = v36;
      v37 = a1[1].u32[3];
      v38 = a1[1].u32[1];
      v39 = a1[1].i32[2] < (unsigned __int32)a1[1].i32[0];
      v9 = v37 == v38;
      v40 = v37 < v38;
      if (!v9)
        v39 = v40;
      if (!v39)
        return 1;
      v42 = a1[1].i64[0];
      v41 = a1[1].i64[1];
      a1[1].i64[0] = v41;
      a1[1].i64[1] = v42;
      v43 = a1->u32[3];
      v44 = a1->i32[2] > v41;
      v9 = v43 == HIDWORD(v41);
      v45 = v43 > HIDWORD(v41);
      if (!v9)
        v44 = v45;
      if (!v44)
        return 1;
      v46 = a1->i64[1];
      a1->i64[1] = v41;
      a1[1].i64[0] = v46;
      v47 = a1->u32[1];
      v48 = v47 > HIDWORD(v41);
      if (v47 == HIDWORD(v41))
        v48 = a1->i32[0] > v41;
      if (!v48)
        return 1;
      v49 = a1->i64[0];
      a1->i64[0] = v41;
      a1->i64[1] = v49;
      return 1;
    default:
      v21 = a1 + 1;
      v22 = a1[1].u32[0];
      v23 = a1->u32[2];
      v24 = a1->u32[3];
      v26 = a1->i32[0];
      v25 = a1->u32[1];
      v27 = __PAIR64__(v24, v23) < a1->i64[0];
      v28 = a1[1].u32[1];
      v29 = v22 < v23;
      v9 = v28 == v24;
      v30 = v28 < v24;
      if (!v9)
        v29 = v30;
      if (v27)
      {
        v31 = a1->i64[0];
        if (v29)
        {
          a1->i64[0] = a1[1].i64[0];
LABEL_52:
          a1[1].i64[0] = v31;
          goto LABEL_53;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v31;
        v63 = v22 < v31;
        if (v28 != HIDWORD(v31))
          v63 = v28 < HIDWORD(v31);
        if (v63)
        {
          a1->i64[1] = a1[1].i64[0];
          goto LABEL_52;
        }
      }
      else if (v29)
      {
        v56 = a1->i64[1];
        v55 = a1[1].i64[0];
        a1->i64[1] = v55;
        a1[1].i64[0] = v56;
        v57 = v26 > v55;
        v9 = v25 == HIDWORD(v55);
        v58 = v25 > HIDWORD(v55);
        if (v9)
          v58 = v57;
        if (v58)
        {
          v59 = a1->i64[0];
          a1->i64[0] = v55;
          a1->i64[1] = v59;
        }
      }
LABEL_53:
      v64 = &a1[1].i32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v65 = 0;
      v66 = 0;
      while (1)
      {
        v67 = v64[1];
        v69 = v21->i32[0];
        v68 = v21->u32[1];
        v9 = v67 == v68;
        v70 = v67 < v68;
        if (v9)
          v70 = *v64 < v69;
        if (v70)
          break;
LABEL_66:
        v21 = (int8x16_t *)v64;
        v65 += 8;
        v64 += 2;
        if (v64 == (__int32 *)a2)
          return 1;
      }
      v71 = *(_QWORD *)v64;
      v72 = HIDWORD(*(_QWORD *)v64);
      v73 = v65;
      do
      {
        v74 = &a1->i8[v73];
        *(uint64_t *)((char *)&a1[1].i64[1] + v73) = *(uint64_t *)((char *)a1[1].i64 + v73);
        if (v73 == -16)
        {
          a1->i64[0] = v71;
          if (++v66 != 8)
            goto LABEL_66;
          return v64 + 2 == (__int32 *)a2;
        }
        v76 = *((_DWORD *)v74 + 2);
        v75 = *((_DWORD *)v74 + 3);
        v77 = v76 > v71;
        v9 = v75 == (_DWORD)v72;
        v78 = v75 > v72;
        if (v9)
          v78 = v77;
        v73 -= 8;
      }
      while (v78);
      *(uint64_t *)((char *)&a1[1].i64[1] + v73) = v71;
      if (++v66 != 8)
        goto LABEL_66;
      return v64 + 2 == (__int32 *)a2;
  }
}

_DWORD *sub_223EF8E84(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  _BOOL4 v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  unsigned int v17;
  _BOOL4 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;

  v4 = a2[1];
  v5 = result[1];
  v6 = v4 == v5;
  v7 = v4 < v5;
  if (v6)
    v7 = *a2 < *result;
  LODWORD(v8) = a3[1];
  v6 = (_DWORD)v8 == v4;
  v9 = v8 < v4;
  if (v6)
    v9 = *a3 < *a2;
  if (v7)
  {
    v10 = *(_QWORD *)result;
    if (v9)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      v8 = HIDWORD(v10);
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v10;
      LODWORD(v8) = a3[1];
      v16 = *a3 < v10;
      if ((_DWORD)v8 != HIDWORD(v10))
        v16 = v8 < HIDWORD(v10);
      if (v16)
      {
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v10;
        v8 = HIDWORD(v10);
      }
    }
  }
  else if (v9)
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v11;
    v12 = a2[1];
    v13 = result[1];
    v14 = *a2 < *result;
    v6 = v12 == v13;
    v15 = v12 < v13;
    if (!v6)
      v14 = v15;
    if (v14)
    {
      v8 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v8;
      LODWORD(v8) = a3[1];
    }
    else
    {
      v8 = HIDWORD(v11);
    }
  }
  v17 = a4[1];
  v6 = v17 == (_DWORD)v8;
  v18 = v17 < v8;
  if (v6)
    v18 = *a4 < *a3;
  if (v18)
  {
    v19 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v19;
    v20 = a3[1];
    v21 = a2[1];
    v22 = *a3 < *a2;
    v6 = v20 == v21;
    v23 = v20 < v21;
    if (!v6)
      v22 = v23;
    if (v22)
    {
      v24 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v24;
      v25 = a2[1];
      v26 = result[1];
      v27 = *a2 < *result;
      v6 = v25 == v26;
      v28 = v25 < v26;
      if (!v6)
        v27 = v28;
      if (v27)
      {
        v29 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v29;
      }
    }
  }
  return result;
}

unint64_t sub_223EF9010(unint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t *v122;
  int64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  int64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v91 = *(a2 - 1);
        v92 = *v10;
        if (**(_QWORD **)(**a3 + 8 * v91) > **(_QWORD **)(**a3 + 8 * *v10))
        {
          *v10 = v91;
          goto LABEL_172;
        }
        return result;
      case 3:
        v93 = **a3;
        v92 = *v10;
        v94 = v10[1];
        v95 = **(_QWORD **)(v93 + 8 * v94);
        v96 = *(unint64_t **)(v93 + 8 * *v10);
        v97 = *(a2 - 1);
        v98 = **(_QWORD **)(v93 + 8 * v97);
        if (v95 <= *v96)
        {
          if (v98 > v95)
          {
            v10[1] = v97;
            *(a2 - 1) = v94;
            v149 = *v10;
            v148 = v10[1];
            if (**(_QWORD **)(v93 + 8 * v148) > **(_QWORD **)(v93 + 8 * *v10))
            {
              *v10 = v148;
              v10[1] = v149;
            }
          }
        }
        else
        {
          if (v98 <= v95)
          {
            *v10 = v94;
            v10[1] = v92;
            v155 = *(a2 - 1);
            if (**(_QWORD **)(v93 + 8 * v155) <= *v96)
              return result;
            v10[1] = v155;
          }
          else
          {
            *v10 = v97;
          }
LABEL_172:
          *(a2 - 1) = v92;
        }
        return result;
      case 4:
        return (unint64_t)sub_223EF9FE0(v10, v10 + 1, v10 + 2, a2 - 1, **a3);
      case 5:
        v99 = v10 + 1;
        v100 = v10 + 2;
        v101 = v10 + 3;
        result = (unint64_t)sub_223EF9FE0(v9, v9 + 1, v9 + 2, v9 + 3, **a3);
        v102 = *(a2 - 1);
        v103 = **a3;
        v104 = v9[3];
        if (**(_QWORD **)(v103 + 8 * v102) > **(_QWORD **)(v103 + 8 * v104))
        {
          *v101 = v102;
          *(a2 - 1) = v104;
          v105 = *v101;
          v106 = *(_QWORD **)(v103 + 8 * *v101);
          v107 = *v100;
          if (*v106 > **(_QWORD **)(v103 + 8 * *v100))
          {
            *v100 = v105;
            *v101 = v107;
            v108 = *v99;
            if (*v106 > **(_QWORD **)(v103 + 8 * *v99))
            {
              v9[1] = v105;
              v9[2] = v108;
              v109 = *v9;
              if (*v106 > **(_QWORD **)(v103 + 8 * *v9))
              {
                *v9 = v105;
                v9[1] = v109;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v121 = (unint64_t)(v12 - 2) >> 1;
              v122 = *a3;
              v123 = v121;
              do
              {
                if (v121 >= v123)
                {
                  v125 = (2 * v123) | 1;
                  v126 = &v10[v125];
                  if (2 * v123 + 2 >= v12)
                  {
                    v127 = *v126;
                    v128 = *v122;
                  }
                  else
                  {
                    v127 = v126[1];
                    v128 = *v122;
                    if (**(_QWORD **)(*v122 + 8 * *v126) > **(_QWORD **)(*v122 + 8 * v127))
                    {
                      ++v126;
                      v125 = 2 * v123 + 2;
                    }
                    else
                    {
                      v127 = *v126;
                    }
                  }
                  result = (unint64_t)&v10[v123];
                  v129 = *(_QWORD *)result;
                  v130 = *(_QWORD **)(v128 + 8 * *(_QWORD *)result);
                  if (**(_QWORD **)(v128 + 8 * v127) <= *v130)
                  {
                    while (1)
                    {
                      *(_QWORD *)result = v127;
                      result = (unint64_t)v126;
                      if (v121 < v125)
                        break;
                      v131 = (2 * v125) | 1;
                      v126 = &v10[v131];
                      v125 = 2 * v125 + 2;
                      if (v125 < v12)
                      {
                        v127 = *v126;
                        if (**(_QWORD **)(v128 + 8 * *v126) <= **(_QWORD **)(v128 + 8 * v126[1]))
                        {
                          v125 = v131;
                        }
                        else
                        {
                          v127 = v126[1];
                          ++v126;
                        }
                        if (**(_QWORD **)(v128 + 8 * v127) > *v130)
                          break;
                      }
                      else
                      {
                        v127 = *v126;
                        v125 = v131;
                        if (**(_QWORD **)(v128 + 8 * *v126) > *v130)
                          break;
                      }
                    }
                    *(_QWORD *)result = v129;
                    v122 = *a3;
                  }
                }
                v124 = v123-- <= 0;
              }
              while (!v124);
              v132 = (unint64_t)v11 >> 3;
              do
              {
                v133 = 0;
                v134 = *v10;
                v135 = *a3;
                v136 = (unint64_t)(v132 - 2) >> 1;
                v137 = v10;
                do
                {
                  while (1)
                  {
                    v139 = &v137[v133 + 1];
                    v140 = (2 * v133) | 1;
                    v133 = 2 * v133 + 2;
                    if (v133 < v132)
                      break;
                    v133 = v140;
                    *v137 = *v139;
                    v137 = v139;
                    if (v140 > v136)
                      goto LABEL_154;
                  }
                  v138 = v139[1];
                  result = *v139;
                  if (**(_QWORD **)(*v135 + 8 * *v139) > **(_QWORD **)(*v135 + 8 * v138))
                  {
                    ++v139;
                  }
                  else
                  {
                    v138 = *v139;
                    v133 = v140;
                  }
                  *v137 = v138;
                  v137 = v139;
                }
                while (v133 <= v136);
LABEL_154:
                if (v139 == --a2)
                {
                  *v139 = v134;
                }
                else
                {
                  *v139 = *a2;
                  *a2 = v134;
                  v141 = (char *)v139 - (char *)v10 + 8;
                  if (v141 >= 9)
                  {
                    v142 = (((unint64_t)v141 >> 3) - 2) >> 1;
                    v143 = &v10[v142];
                    v144 = *v143;
                    v145 = **a3;
                    v146 = *v139;
                    v147 = *(_QWORD **)(v145 + 8 * *v139);
                    if (**(_QWORD **)(v145 + 8 * *v143) > *v147)
                    {
                      do
                      {
                        *v139 = v144;
                        v139 = v143;
                        if (!v142)
                          break;
                        v142 = (v142 - 1) >> 1;
                        v143 = &v10[v142];
                        v144 = *v143;
                      }
                      while (**(_QWORD **)(v145 + 8 * *v143) > *v147);
                      *v139 = v146;
                    }
                  }
                }
                v124 = v132-- <= 2;
              }
              while (!v124);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = **(_QWORD **)(v15 + 8 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = **(_QWORD **)(v15 + 8 * *v10);
            v25 = *(unint64_t **)(v15 + 8 * *v14);
            if (v24 <= *v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (**(_QWORD **)(v15 + 8 * *v10) > **(_QWORD **)(v15 + 8 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (**(_QWORD **)(v15 + 8 * v40) <= *v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = **(_QWORD **)(v15 + 8 * *v14);
          v21 = *(unint64_t **)(v15 + 8 * *v10);
          if (v20 <= *v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (**(_QWORD **)(v15 + 8 * *v14) > **(_QWORD **)(v15 + 8 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (**(_QWORD **)(v15 + 8 * v29) <= *v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = **(_QWORD **)(v15 + 8 * v33);
          v36 = *(unint64_t **)(v15 + 8 * v34);
          v37 = *(a2 - 2);
          v38 = **(_QWORD **)(v15 + 8 * v37);
          if (v35 <= *v36)
          {
            if (v38 > v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (**(_QWORD **)(v15 + 8 * *v31) > **(_QWORD **)(v15 + 8 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v41 = *(a2 - 2);
              if (**(_QWORD **)(v15 + 8 * v41) <= *v36)
                goto LABEL_37;
              *v31 = v41;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v42 = &v10[v13];
          v45 = v42[1];
          v43 = v42 + 1;
          v44 = v45;
          v46 = v10[2];
          v47 = **(_QWORD **)(v15 + 8 * v45);
          v48 = *(unint64_t **)(v15 + 8 * v46);
          v49 = *(a2 - 3);
          v50 = **(_QWORD **)(v15 + 8 * v49);
          if (v47 <= *v48)
          {
            if (v50 > v47)
            {
              *v43 = v49;
              *(a2 - 3) = v44;
              v51 = v10[2];
              if (**(_QWORD **)(v15 + 8 * *v43) > **(_QWORD **)(v15 + 8 * v51))
              {
                v10[2] = *v43;
                *v43 = v51;
              }
            }
          }
          else
          {
            if (v50 <= v47)
            {
              v10[2] = v44;
              *v43 = v46;
              v52 = *(a2 - 3);
              if (**(_QWORD **)(v15 + 8 * v52) <= *v48)
                goto LABEL_46;
              *v43 = v52;
            }
            else
            {
              v10[2] = v49;
            }
            *(a2 - 3) = v46;
          }
LABEL_46:
          v53 = *v14;
          v54 = *v31;
          v55 = **(_QWORD **)(v15 + 8 * *v14);
          v56 = *(unint64_t **)(v15 + 8 * *v31);
          v57 = *v43;
          v58 = *(uint64_t ***)(v15 + 8 * *v43);
          result = (unint64_t)*v58;
          if (v55 > *v56)
          {
            if (result <= v55)
            {
              *v31 = v53;
              *v14 = v54;
              v31 = v14;
              v53 = v57;
              if ((unint64_t)*v58 <= *v56)
              {
                v59 = *v10;
                *v10 = v54;
                *v14 = v59;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (result <= v55)
            goto LABEL_54;
          *v14 = v57;
          *v43 = v53;
          v43 = v14;
          v53 = v54;
          if ((unint64_t)*v58 > *v56)
          {
LABEL_53:
            *v31 = v57;
            *v43 = v54;
LABEL_54:
            v60 = *v10;
            *v10 = v53;
            *v14 = v60;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v61 = *(unint64_t **)(v15 + 8 * v28);
            v62 = *v61;
            if (**(_QWORD **)(v15 + 8 * *(v10 - 1)) > *v61)
              goto LABEL_56;
            if (v62 <= **(_QWORD **)(v15 + 8 * *(a2 - 1)))
            {
              v82 = v10 + 1;
              do
              {
                v10 = v82;
                if (v82 >= a2)
                  break;
                ++v82;
              }
              while (v62 <= **(_QWORD **)(v15 + 8 * *v10));
            }
            else
            {
              do
              {
                v81 = v10[1];
                ++v10;
              }
              while (v62 <= **(_QWORD **)(v15 + 8 * v81));
            }
            v83 = a2;
            if (v10 < a2)
            {
              v83 = a2;
              do
                v84 = *--v83;
              while (v62 > **(_QWORD **)(v15 + 8 * v84));
            }
            if (v10 < v83)
            {
              v85 = *v10;
              v86 = *v83;
              do
              {
                *v10 = v86;
                *v83 = v85;
                v87 = *v61;
                do
                {
                  v88 = v10[1];
                  ++v10;
                  v85 = v88;
                }
                while (v87 <= **(_QWORD **)(v15 + 8 * v88));
                do
                {
                  v89 = *--v83;
                  v86 = v89;
                }
                while (v87 > **(_QWORD **)(v15 + 8 * v89));
              }
              while (v10 < v83);
            }
            v90 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v90;
            a5 = 0;
            *v90 = v28;
            continue;
          }
          v80 = *v10;
          *v10 = v57;
          *v14 = v80;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v63 = 0;
          v64 = **a3;
          v65 = *(unint64_t **)(v64 + 8 * v28);
          v66 = *v65;
          do
            v67 = v10[++v63];
          while (**(_QWORD **)(v64 + 8 * v67) > v66);
          v68 = &v10[v63];
          v69 = a2;
          if (v63 == 1)
          {
            v69 = a2;
            do
            {
              if (v68 >= v69)
                break;
              v71 = *--v69;
            }
            while (**(_QWORD **)(v64 + 8 * v71) <= v66);
          }
          else
          {
            do
              v70 = *--v69;
            while (**(_QWORD **)(v64 + 8 * v70) <= v66);
          }
          if (v68 >= v69)
          {
            v78 = v68 - 1;
            if (v68 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v72 = *v69;
            v73 = &v10[v63];
            v74 = v69;
            do
            {
              *v73 = v72;
              *v74 = v67;
              v75 = *v65;
              do
              {
                v76 = v73[1];
                ++v73;
                v67 = v76;
              }
              while (**(_QWORD **)(v64 + 8 * v76) > v75);
              do
              {
                v77 = *--v74;
                v72 = v77;
              }
              while (**(_QWORD **)(v64 + 8 * v77) <= v75);
            }
            while (v73 < v74);
            v78 = v73 - 1;
            if (v73 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v78;
          }
LABEL_74:
          *v78 = v28;
          if (v68 < v69)
            goto LABEL_77;
          v79 = sub_223EF9C04(v10, v78, a3);
          v10 = v78 + 1;
          result = sub_223EF9C04(v78 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_77:
            result = sub_223EF9010(v9, v78, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v78 + 1;
            continue;
          }
          a2 = v78;
          if (v79)
            return result;
          goto LABEL_2;
        }
        v110 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v111 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v112 = *v110;
              v113 = 8;
              v114 = v10;
              do
              {
                v117 = *v114;
                v116 = v114[1];
                v118 = *(_QWORD **)(v112 + 8 * v116);
                v114 = v111;
                if (*v118 > **(_QWORD **)(v112 + 8 * v117))
                {
                  v119 = v113;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v119) = v117;
                    v120 = v119 - 8;
                    if (v119 == 8)
                    {
                      v115 = v10;
                      goto LABEL_117;
                    }
                    v117 = *(uint64_t *)((char *)v10 + v119 - 16);
                    v119 -= 8;
                  }
                  while (*v118 > **(_QWORD **)(v112 + 8 * v117));
                  v115 = (uint64_t *)((char *)v10 + v120);
LABEL_117:
                  *v115 = v116;
                }
                v111 = v114 + 1;
                v113 += 8;
              }
              while (v114 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v150 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v151 = *v110;
            do
            {
              v153 = *v9;
              v152 = v9[1];
              v154 = *(_QWORD **)(v151 + 8 * v152);
              v9 = v150;
              if (*v154 > **(_QWORD **)(v151 + 8 * v153))
              {
                do
                {
                  *v150 = v153;
                  v153 = *(v150 - 2);
                  --v150;
                }
                while (*v154 > **(_QWORD **)(v151 + 8 * v153));
                *v150 = v152;
              }
              v150 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_223EF9C04(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (**(_QWORD **)(**a3 + 8 * v8) > **(_QWORD **)(**a3 + 8 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = **a3;
      v11 = *a1;
      v12 = a1[1];
      v13 = **(_QWORD **)(v10 + 8 * v12);
      v14 = *(unint64_t **)(v10 + 8 * *a1);
      v15 = *(a2 - 1);
      v16 = **(_QWORD **)(v10 + 8 * v15);
      if (v13 <= *v14)
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          v42 = *a1;
          v41 = a1[1];
          if (**(_QWORD **)(v10 + 8 * v41) > **(_QWORD **)(v10 + 8 * *a1))
          {
            *a1 = v41;
            a1[1] = v42;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        v51 = *(a2 - 1);
        if (**(_QWORD **)(v10 + 8 * v51) > *v14)
        {
          a1[1] = v51;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      sub_223EF9FE0(a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      v30 = a1 + 1;
      v31 = a1 + 2;
      v32 = a1 + 3;
      sub_223EF9FE0(a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      v33 = *(a2 - 1);
      v34 = **a3;
      v35 = a1[3];
      if (**(_QWORD **)(v34 + 8 * v33) <= **(_QWORD **)(v34 + 8 * v35))
        return 1;
      *v32 = v33;
      *(a2 - 1) = v35;
      v36 = *v32;
      v37 = *(_QWORD **)(v34 + 8 * *v32);
      v38 = *v31;
      if (*v37 <= **(_QWORD **)(v34 + 8 * *v31))
        return 1;
      *v31 = v36;
      *v32 = v38;
      v39 = *v30;
      if (*v37 <= **(_QWORD **)(v34 + 8 * *v30))
        return 1;
      a1[1] = v36;
      a1[2] = v39;
      v40 = *a1;
      if (*v37 <= **(_QWORD **)(v34 + 8 * *a1))
        return 1;
      *a1 = v36;
      a1[1] = v40;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = **a3;
      v21 = *a1;
      v22 = *(unint64_t **)(v20 + 8 * *a1);
      v23 = **(_QWORD **)(v20 + 8 * v19);
      v24 = *(unint64_t **)(v20 + 8 * v17);
      v25 = *v24;
      if (v23 <= *v22)
      {
        if (v25 <= v23)
          goto LABEL_25;
        a1[1] = v17;
        *v18 = v19;
        v28 = *v24;
        v29 = *v22;
        v26 = a1;
        v27 = a1 + 1;
      }
      else
      {
        v26 = a1;
        v27 = a1 + 2;
        if (v25 > v23)
          goto LABEL_24;
        *a1 = v19;
        a1[1] = v21;
        v28 = *v24;
        v29 = *v22;
        v26 = a1 + 1;
        v27 = a1 + 2;
      }
      if (v28 <= v29)
        goto LABEL_25;
LABEL_24:
      *v26 = v17;
      *v27 = v21;
LABEL_25:
      v43 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v44 = 0;
      v45 = 24;
      break;
  }
  while (1)
  {
    v46 = *v43;
    v47 = *(_QWORD **)(v20 + 8 * *v43);
    v48 = *v18;
    if (*v47 > **(_QWORD **)(v20 + 8 * v48))
      break;
LABEL_34:
    v18 = v43;
    v45 += 8;
    if (++v43 == a2)
      return 1;
  }
  v49 = v45;
  do
  {
    *(uint64_t *)((char *)a1 + v49) = v48;
    v50 = v49 - 8;
    if (v49 == 8)
    {
      *a1 = v46;
      if (++v44 != 8)
        goto LABEL_34;
      return v43 + 1 == a2;
    }
    v48 = *(uint64_t *)((char *)a1 + v49 - 16);
    v49 -= 8;
  }
  while (*v47 > **(_QWORD **)(v20 + 8 * v48));
  *(uint64_t *)((char *)a1 + v50) = v46;
  if (++v44 != 8)
    goto LABEL_34;
  return v43 + 1 == a2;
}

uint64_t *sub_223EF9FE0(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = *result;
  v7 = **(_QWORD **)(a5 + 8 * *a2);
  v8 = *(unint64_t **)(a5 + 8 * *result);
  v9 = *a3;
  v10 = **(_QWORD **)(a5 + 8 * *a3);
  if (v7 <= *v8)
  {
    if (v10 <= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (**(_QWORD **)(a5 + 8 * *a2) > **(_QWORD **)(a5 + 8 * *result))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 > v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (**(_QWORD **)(a5 + 8 * *a3) > *v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (**(_QWORD **)(a5 + 8 * *a4) > **(_QWORD **)(a5 + 8 * v5))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (**(_QWORD **)(a5 + 8 * *a3) > **(_QWORD **)(a5 + 8 * *a2))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (**(_QWORD **)(a5 + 8 * *a2) > **(_QWORD **)(a5 + 8 * *result))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_223EFA108(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v5 = 265 * ((~a2 + (a2 << 21)) ^ ((unint64_t)(~a2 + (a2 << 21)) >> 24));
  v6 = 2147483649u * ((21 * (v5 ^ (v5 >> 14))) ^ ((21 * (v5 ^ (v5 >> 14))) >> 28));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = (v7 - 1) & v6;
    v10 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v11[2] == a2)
          return 0;
        v13 = v11[1];
LABEL_7:
        if ((v13 & 0x7FFFFFFFFFFFFFFFLL) == v9)
        {
          while (1)
          {
            v11 = (_QWORD *)*v11;
            if (!v11)
              break;
            v13 = v11[1];
            if ((v13 & 0x8000000000000000) == 0)
            {
              result = 0;
              if (v11[2] != a2)
                goto LABEL_7;
              return result;
            }
          }
        }
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = 0;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = v8 + 1;
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
  {
    if (*(_QWORD *)(a1 + 32) < v15)
    {
      if (v8 + (v8 >> 1) > v15)
        v15 = v8 + (v8 >> 1);
      v17 = floor((double)v15 / *(float *)(a1 + 24)) + 1.0;
      v18 = (unint64_t)v17;
      if (v17 >= 1.84467441e19)
        v18 = -1;
      if (v18 >= 5)
      {
        v29 = (v18 - 1) | ((v18 - 1) >> 1) | (((v18 - 1) | ((v18 - 1) >> 1)) >> 2);
        v30 = v29 | (v29 >> 4) | ((v29 | (v29 >> 4)) >> 8);
        v19 = (v30 | (v30 >> 16) | ((v30 | (v30 >> 16)) >> 32)) + 1;
        if (v19 != v7)
          goto LABEL_37;
      }
      else
      {
        v19 = 4;
        if (v7 != 4)
        {
LABEL_37:
          sub_223EFA440(a1, v19);
          v7 = *(_QWORD *)(a1 + 8);
          v16 = *(_QWORD *)(a1 + 40);
          v31 = (_QWORD *)(v16 + 8 * v7);
          v32 = (_QWORD *)*v31;
          if (*v31)
          {
            do
            {
              while (1)
              {
                v34 = ~v32[2] + (v32[2] << 21);
                v35 = 21 * ((265 * (v34 ^ (v34 >> 24))) ^ ((265 * (v34 ^ (v34 >> 24))) >> 14));
                v36 = (2147483649u * (v35 ^ (v35 >> 28))) & (v7 - 1);
                v32[1] = v36 & 0x7FFFFFFFFFFFFFFFLL;
                v37 = (_QWORD *)*v32;
                if (*v32 && (v37[1] & 0x8000000000000000) != 0)
                {
                  do
                  {
                    v32 = v37;
                    v37[1] = v36 | 0x8000000000000000;
                    v37 = (_QWORD *)*v37;
                  }
                  while (v37 && (v37[1] & 0x8000000000000000) != 0);
                }
                v33 = *(_QWORD **)(v16 + 8 * v36);
                if (!v33)
                  break;
                *v32 = *v33;
                **(_QWORD **)(v16 + 8 * v36) = *v31;
                *v31 = v37;
                v32 = v37;
                if (!v37)
                  goto LABEL_30;
              }
              *(_QWORD *)(v16 + 8 * v36) = v31;
              v31 = v32;
              v32 = (_QWORD *)*v32;
            }
            while (v32);
          }
        }
      }
    }
  }
  else
  {
    v20 = floor((double)v15 / *(float *)(a1 + 24)) + 1.0;
    v21 = (unint64_t)v20;
    if (v20 >= 1.84467441e19)
      v21 = -1;
    if (v21 >= 5)
    {
      v23 = (v21 - 1) | ((v21 - 1) >> 1) | (((v21 - 1) | ((v21 - 1) >> 1)) >> 2);
      v24 = v23 | (v23 >> 4) | ((v23 | (v23 >> 4)) >> 8);
      v22 = (v24 | (v24 >> 16) | ((v24 | (v24 >> 16)) >> 32)) + 1;
    }
    else
    {
      v22 = 4;
    }
    if (v7 <= v22)
      v25 = v22;
    else
      v25 = v7;
    sub_223EFA440(a1, v25);
    v7 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 40);
  }
LABEL_30:
  v26 = (v7 - 1) & v6;
  v14[1] = v26 & 0x7FFFFFFFFFFFFFFFLL;
  v27 = *(_QWORD **)(v16 + 8 * v26);
  if (v27)
  {
    *v14 = *v27;
    v28 = *(_QWORD *)(v16 + 8 * v26);
  }
  else
  {
    v28 = v16 + 8 * v7;
    if (*(_QWORD *)v28)
      *(_QWORD *)(v16 + 8 * *(_QWORD *)(*(_QWORD *)v28 + 8)) = v14;
    *(_QWORD *)(v16 + 8 * v26) = v28;
    *v14 = *(_QWORD *)v28;
  }
  *(_QWORD *)v28 = v14;
  ++*(_QWORD *)(a1 + 16);
  return 1;
}

void sub_223EFA42C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223EFA440(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  unint64_t v10;

  v4 = *(_QWORD **)(a1 + 40);
  v5 = a2 + 1;
  v6 = (a2 + 1) >> 61;
  if (v4)
  {
    if (!v6)
    {
      v7 = v4[*(_QWORD *)(a1 + 8)];
      v8 = operator new(8 * v5);
      operator delete(v4);
      goto LABEL_6;
    }
LABEL_11:
    sub_223174E94();
  }
  if (v6)
    goto LABEL_11;
  v8 = operator new(8 * v5);
  v7 = 0;
LABEL_6:
  *(_QWORD *)(a1 + 8) = a2;
  v9 = (double)a2 * *(float *)(a1 + 24);
  v10 = vcvtpd_u64_f64(v9);
  if (ceil(v9) >= 1.84467441e19)
    v10 = -1;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v8;
  if (a2)
    bzero(v8, 8 * a2);
  *((_QWORD *)v8 + a2) = v7;
}

uint64_t sub_223EFA500(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

double sub_223EFA57C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  double result;

  v2 = operator new[]();
  *a1 = v2;
  a1[1] = 0;
  v3 = (_QWORD *)operator new();
  *(_QWORD *)&result = 0x100000001;
  v3[1] = 0x100000001;
  *v3 = &off_24EC57500;
  v3[2] = v2;
  a1[1] = (uint64_t)v3;
  return result;
}

void sub_223EFA5F8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x227684CB8](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_223EFA61C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_223EFA630(uint64_t a1, std::string **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  unsigned __int8 v15;
  std::string *v16;
  std::string *v17;
  __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string *v32;
  int32x2_t v33;
  uint64_t v34;
  unsigned int **v35;
  unsigned int **v36;
  uint64_t v37;
  uint32x2_t v38;
  int v39;
  int8x8_t v40;
  unsigned int *v41;
  unsigned int *v42;
  uint64_t v43;
  float32x2_t v44;
  int64x2_t v45;
  float32x2_t v46;
  uint64_t v47;
  int32x2_t *v48;
  float32x2_t v49;
  int64x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  int32x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  double v63;
  float32x2_t v64;
  BOOL v65;
  float32x2_t v66;
  uint64_t v67;
  double v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __int16 *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  __int16 v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  int v120;
  int v121;
  _BYTE *v122;
  _BYTE *v123;
  int v124;
  _BOOL4 v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  __int128 v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unsigned __int8 v160;
  std::string *v161;
  __int128 v162;
  std::string *v163;
  __int128 v164;
  void **v165;
  uint64_t v166;
  unsigned __int8 v167;
  uint64_t *v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  void *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  _BYTE *v198;
  int v199;
  int v200;
  int v201;
  int v202;
  _BYTE *v203;
  _BYTE *v204;
  uint64_t (**v205)();
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  void *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  __int128 v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unsigned int v243;
  uint64_t *v244;
  unint64_t v245;
  _BYTE v246[7];
  __int128 v247;
  void *__p[2];
  uint64_t (**v249)();
  __int128 v250;
  unsigned int v251;
  unsigned int v252;
  char v253;
  char v254;
  int v255;
  int32x2_t v256;
  char v257;
  uint64_t v258;
  __int128 v259;
  uint64_t (**v260)();
  __int128 v261;
  uint64_t v262;
  unsigned int v263;
  int v264;
  int v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  char v269;
  char v270;
  unint64_t v271;
  uint64_t v272;
  __int128 v273;
  _BYTE v274[9];
  uint64_t v275;
  __int16 v276;
  char v277;
  std::string __dst;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int16 v282;
  uint64_t v283;
  char v284;
  __int16 *v285;
  std::string *p_dst;
  char v287;

  v9 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v9 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    __dst = *(std::string *)byte_25578BAF8;
  v10 = std::string::append(&__dst, ".", 1uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(_QWORD *)v274 = *((_QWORD *)&v10->__r_.__value_.__l + 2);
  v273 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append((std::string *)&v273, "SingleShot.DepthMapPlaneDetector", 0x20uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v249 = (uint64_t (**)())v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v249) >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  strlen((const char *)v14);
  sub_2241471F8();
  v239 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if (SHIBYTE(v249) < 0)
  {
    operator delete(__p[0]);
    if ((v274[7] & 0x80000000) == 0)
    {
LABEL_10:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_11;
LABEL_15:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239))
        goto LABEL_237;
      goto LABEL_16;
    }
  }
  else if ((v274[7] & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete((void *)v273);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
LABEL_11:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239))
    goto LABEL_237;
LABEL_16:
  v15 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v15 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239))
  {
    *(_QWORD *)&v247 = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
    *((_QWORD *)&v247 + 1) = 2;
    v235 = sub_2241471F8();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239))
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = -1;
      *(_QWORD *)&v273 = &off_24EC5ABE8;
      v234 = a5;
      sub_22380A870((_DWORD *)(a1 + 8), &__dst, (uint64_t *)&v273 + 1);
      v16 = *a2;
      v17 = a2[1];
      if (*a2 == v17)
      {
        v32 = *a2;
      }
      else
      {
        v18 = 0;
        do
        {
          v285 = v18;
          p_dst = v16;
          v19 = HIDWORD(v16->__r_.__value_.__r.__words[0]);
          v20 = v16->__r_.__value_.__r.__words[1];
          if (v20 >= LODWORD(v16->__r_.__value_.__l.__data_))
            v21 = v20 - LODWORD(v16->__r_.__value_.__l.__data_) + 1;
          else
            v21 = 0;
          v22 = HIDWORD(v16->__r_.__value_.__r.__words[1]);
          v23 = v22 >= v19;
          v24 = v22 - v19;
          if (v23)
            v25 = v24 + 1;
          else
            v25 = 0;
          v271 = v16->__r_.__value_.__r.__words[0];
          v272 = v21 | (v25 << 32);
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC22278;
          sub_22380B3A8((uint64_t)&v273, (uint64_t *)&__dst.__r_.__value_.__l.__size_);
          v260 = &off_24EC22278;
          sub_223EF2644((uint64_t)&__dst, &v271, (uint64_t)&v261);
          v26 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
          if (__dst.__r_.__value_.__r.__words[2])
          {
            v27 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          sub_223EF1B54((uint64_t)&v260, (unsigned __int16 *)&v285);
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
          if (*((_QWORD *)&v261 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v16 = (std::string *)((char *)v16 + 16);
          v18 = (__int16 *)((char *)v18 + 1);
        }
        while (v16 != v17);
        v16 = *a2;
        v32 = a2[1];
      }
      sub_223EF1D10((uint64_t)&v273, ((char *)v32 - (char *)v16) >> 4, (uint64_t)__p);
      v34 = *((_QWORD *)&v250 + 1);
      if (v257 && *((_QWORD *)&v250 + 1))
      {
        (*(void (**)(void *, uint64_t, const char *))(*(_QWORD *)__p[1] + 88))(__p[1], 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v34 = *((_QWORD *)&v250 + 1);
      }
      v35 = *(unsigned int ***)(a3 + 24);
      v36 = *(unsigned int ***)(a3 + 32);
      if (v35 != v36)
      {
        v37 = 0;
        v38 = (uint32x2_t)v256;
        v39 = v255;
        v40 = (int8x8_t)vcvt_f32_u32((uint32x2_t)vadd_s32(v256, (int32x2_t)-1));
        do
        {
          v41 = v35[1];
          if (v41)
          {
            v42 = *v35;
            v43 = (uint64_t)&(*v35)[3 * (_QWORD)v41];
            v44 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32((int32x2_t)(*a2)->__r_.__value_.__r.__words[2 * v37 + 1], (int32x2_t)*(&(*a2)->__r_.__value_.__l.__data_ + 2 * v37))), (float32x2_t)0x3F0000003F000000);
            v45 = (int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32((float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_u32(v38, vcvt_u32_f32(v44)), (int8x8_t)v44, v40), (int8x8_t)vcltz_f32(v44))));
            v46 = vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v45));
            v47 = v34 + (3 * v45.i32[0] + v39 * v45.i32[2]);
            do
            {
              v48 = (int32x2_t *)((char *)*a2 + 16 * *v42);
              v49 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v48[1], *v48)), (float32x2_t)0x3F0000003F000000);
              v50 = (int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32((float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_u32(v38, vcvt_u32_f32(v49)), (int8x8_t)v49, v40), (int8x8_t)vcltz_f32(v49))));
              v51 = vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v50));
              v52 = vabd_f32(v51, v46);
              if (v52.f32[0] >= v52.f32[1])
                *(float *)v33.i32 = v52.f32[0];
              else
                *(float *)v33.i32 = v52.f32[1];
              if (*(float *)v33.i32 < 1.0)
                *(float *)v33.i32 = 1.0;
              v53 = vdiv_f32(vsub_f32(v51, v46), (float32x2_t)vdup_lane_s32(v33, 0));
              v54.i32[1] = 0;
              v33.i32[0] = 0;
              *(float *)&v33.i32[1] = vmuls_lane_f32(0.5, v53, 1) + 0.0;
              if (v52.f32[0] > v52.f32[1])
              {
                v55 = (float32x2_t)v33;
              }
              else
              {
                v54.f32[0] = (float)(0.5 * v53.f32[0]) + 0.0;
                v55 = v54;
              }
              *(_WORD *)v47 = -1;
              *(_BYTE *)(v47 + 2) = -1;
              v56 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(v45, v50)));
              if (((v56.i32[0] | v56.i32[1]) & 1) != 0)
              {
                v57 = v50.i64[0];
                v58 = v45.i64[1];
                v59 = v45.i64[0];
                do
                {
                  v60 = COERCE_DOUBLE(vadd_f32(v53, v55));
                  HIDWORD(v61) = HIDWORD(v60);
                  v62 = v59 - 1;
                  if (*(float *)&v60 <= -1.0)
                  {
                    *(float *)&v61 = *(float *)&v60 + 1.0;
                    v63 = v61;
                  }
                  else
                  {
                    v63 = v60;
                  }
                  if (*(float *)&v60 > -1.0)
                    v62 = v59;
                  v64.i32[1] = HIDWORD(v60);
                  v65 = *(float *)&v60 < 1.0;
                  if (*(float *)&v60 >= 1.0)
                  {
                    v64.f32[0] = *(float *)&v60 + -1.0;
                    v66 = v64;
                  }
                  else
                  {
                    *(double *)&v66 = v63;
                  }
                  if (v65)
                    v59 = v62;
                  else
                    ++v59;
                  v33.i32[0] = v66.i32[0];
                  *(float *)&v33.i32[1] = v66.f32[1] + 1.0;
                  v67 = v58 - 1;
                  if (v66.f32[1] <= -1.0)
                    v68 = *(double *)&v33;
                  else
                    v68 = *(double *)&v66;
                  if (v66.f32[1] > -1.0)
                    v67 = v58;
                  v69 = v66.f32[1] < 1.0;
                  if (v66.f32[1] >= 1.0)
                  {
                    v66.f32[1] = v66.f32[1] + -1.0;
                    v55 = v66;
                  }
                  else
                  {
                    *(double *)&v55 = v68;
                  }
                  if (v69)
                    v58 = v67;
                  else
                    ++v58;
                  v70 = v34 + (3 * v59 + v39 * v58);
                  *(_WORD *)v70 = -1;
                  *(_BYTE *)(v70 + 2) = -1;
                }
                while (v59 != v57 || v58 != v50.i64[1]);
              }
              v42 += 3;
            }
            while (v42 != (unsigned int *)v43);
          }
          v35 += 3;
          ++v37;
        }
        while (v35 != v36);
      }
      v71 = *(_QWORD *)(a4 + 32);
      v237 = HIDWORD(v71);
      if (HIDWORD(v71) && (_DWORD)v71)
      {
        v72 = 0;
        v236 = (*(_DWORD *)(a1 + 12) / HIDWORD(v71));
        v242 = (*(_DWORD *)(a1 + 8) / v71) | (unint64_t)(v236 << 32);
        v243 = *(_DWORD *)(a1 + 8) / v71;
        v73 = *(_QWORD *)(a4 + 32);
        v241 = v73;
        do
        {
          v74 = 0;
          v75 = *(_DWORD *)(a4 + 40);
          v76 = *(_QWORD *)(a4 + 24) + (*(_DWORD *)(a4 + 44) * v72);
          v240 = v72;
          v245 = (unint64_t)(v236 * v72) << 32;
          do
          {
            if (*(_BYTE *)(v76 + (v75 * v74)) != 3)
              goto LABEL_89;
            v271 = v245 | (v243 * v74);
            v272 = v242;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC232F0;
            v77 = __p[1];
            v78 = (std::__shared_weak_count *)v249;
            if (v249)
            {
              v79 = (unint64_t *)(v249 + 1);
              do
                v80 = __ldxr(v79);
              while (__stxr(v80 + 1, v79));
              do
                v81 = __ldxr(v79);
              while (__stxr(v81 + 1, v79));
              do
                v82 = __ldxr(v79);
              while (__stxr(v82 + 1, v79));
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v77;
              __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v78;
              do
                v83 = __ldxr(v79);
              while (__stxr(v83 + 1, v79));
              do
                v84 = __ldaxr(v79);
              while (__stlxr(v84 - 1, v79));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            else
            {
              *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = (unint64_t)__p[1];
            }
            (*(void (**)(__int16 **__return_ptr, void *, uint64_t))(*(_QWORD *)v77 + 64))(&v285, v77, 21);
            v85 = v285;
            v87 = *((_OWORD *)v285 + 1);
            v86 = *((_OWORD *)v285 + 2);
            v279 = *(_OWORD *)v285;
            v280 = v87;
            v281 = v86;
            v285 = 0;
            MEMORY[0x227684CE8](v85);
            v88 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
            if (__dst.__r_.__value_.__r.__words[2])
            {
              v89 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
              do
                v90 = __ldxr(v89);
              while (__stxr(v90 + 1, v89));
              do
                v91 = __ldaxr(v89);
              while (__stlxr(v91 - 1, v89));
              if (!v91)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v88 + 1) + 16))(*((_QWORD *)&v88 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v88 + 1));
              }
            }
            v92 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v88 + 104))(v88);
            v93 = v92;
            if ((v92 & 0xFFFFFF) <= 0x10000)
              v93 = 0;
            v94 = v92 & 0xFF00;
            if ((v92 & 0xFF0000) == 0)
              v94 = 0;
            v282 = v94 & 0xFF00 | v93;
            if (v78)
            {
              p_shared_owners = (unint64_t *)&v78->__shared_owners_;
              do
                v96 = __ldaxr(p_shared_owners);
              while (__stlxr(v96 - 1, p_shared_owners));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
              do
                v97 = __ldaxr(p_shared_owners);
              while (__stlxr(v97 - 1, p_shared_owners));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v260 = &off_24EC232F0;
            sub_2237467C8((uint64_t)&__dst, &v271, (uint64_t)&v261);
            v98 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
            if (!__dst.__r_.__value_.__r.__words[2])
              goto LABEL_124;
            v99 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
              v101 = v261;
              if (!(_QWORD)v261)
                goto LABEL_142;
            }
            else
            {
LABEL_124:
              v101 = v261;
              if (!(_QWORD)v261)
                goto LABEL_142;
            }
            v102 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
            if (!*((_QWORD *)&v261 + 1))
              goto LABEL_139;
            v103 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
            do
              v104 = __ldxr(v103);
            while (__stxr(v104 + 1, v103));
            do
              v105 = __ldaxr(v103);
            while (__stlxr(v105 - 1, v103));
            if (v105)
            {
              v106 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
              v101 = v261;
              if (!*((_QWORD *)&v261 + 1))
                goto LABEL_139;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
              v106 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
              v101 = v261;
              if (!*((_QWORD *)&v261 + 1))
                goto LABEL_139;
            }
            v107 = (unint64_t *)&v106->__shared_owners_;
            do
              v108 = __ldxr(v107);
            while (__stxr(v108 + 1, v107));
            do
              v109 = __ldaxr(v107);
            while (__stlxr(v109 - 1, v107));
            if (v109)
            {
LABEL_139:
              if (!v270)
                goto LABEL_142;
              goto LABEL_140;
            }
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
            if (!v270)
            {
LABEL_142:
              v275 = 0;
              goto LABEL_143;
            }
LABEL_140:
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v101 + 96))(&v275, v101, 1);
LABEL_143:
            v276 = 80;
            v277 = 0;
            if (v266 == 1)
            {
              if (v267 == v263)
              {
                if (v268 == v264 * v267)
                  sub_223703C84(&v260, (unsigned __int8 *)&v276);
                else
                  sub_223703F84((unsigned int *)&v260, (unsigned __int8 *)&v276);
              }
              else
              {
                v284 = 0;
                v283 = v263;
                v125 = v276 == 80;
                if (v276 == 80)
                {
                  v125 = HIBYTE(v276) == 80;
                  if (HIBYTE(v276) == 80)
                    v125 = v277 == 80;
                }
                if (v125)
                {
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v284;
                  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&v283;
                  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v276;
                  if (v263 && v264 && v265)
                    sub_223704104(&__dst, (uint64_t)&v260);
                }
                else
                {
                  v287 = 0;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v260;
                  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&v287;
                  v285 = &v276;
                  p_dst = &__dst;
                  if (v263 && v264 && v265)
                    sub_223703DC8((uint64_t)&v285, (uint64_t)&v260);
                }
              }
            }
            else if (v263)
            {
              v110 = v264;
              if (v264)
              {
                v111 = v265;
                if (v265)
                {
                  v112 = v267;
                  v113 = v268;
                  v114 = v262;
                  if (v269 && v262)
                  {
                    v115 = v261;
                    if (*((_QWORD *)&v261 + 1))
                    {
                      v116 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
                      do
                        v117 = __ldxr(v116);
                      while (__stxr(v117 + 1, v116));
                      do
                        v118 = __ldaxr(v116);
                      while (__stlxr(v118 - 1, v116));
                      if (!v118)
                      {
                        (*(void (**)(_QWORD))(**((_QWORD **)&v115 + 1) + 16))(*((_QWORD *)&v115 + 1));
                        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115 + 1));
                      }
                    }
                    (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v115 + 88))(v115, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                    v114 = v262;
                  }
                  v119 = v110 - 1;
                  v120 = v111 - 1;
                  if (v111 != 1)
                  {
                    if (v110 == 1)
                    {
                      do
                      {
                        *(_WORD *)v114 = v276;
                        *(_BYTE *)(v114 + 2) = v277;
                        v114 += v113;
                        --v120;
                      }
                      while (v120);
                    }
                    else
                    {
                      v121 = 0;
                      v122 = (_BYTE *)(v114 + 2);
                      do
                      {
                        v123 = v122;
                        v124 = v110 - 1;
                        do
                        {
                          *((_WORD *)v123 - 1) = v276;
                          *v123 = v277;
                          v123 += v112;
                          --v124;
                        }
                        while (v124);
                        *((_WORD *)v123 - 1) = v276;
                        *v123 = v277;
                        v114 += v113;
                        ++v121;
                        v122 += v113;
                      }
                      while (v121 != v120);
                    }
                  }
                  if (v110 != 1)
                  {
                    do
                    {
                      *(_WORD *)v114 = v276;
                      *(_BYTE *)(v114 + 2) = v277;
                      v114 += v112;
                      --v119;
                    }
                    while (v119);
                  }
                  *(_WORD *)v114 = v276;
                  *(_BYTE *)(v114 + 2) = v277;
                }
              }
            }
            v126 = v275;
            v275 = 0;
            if (v126)
              (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
            v127 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
            v73 = v241;
            if (*((_QWORD *)&v261 + 1))
            {
              v128 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
LABEL_89:
            ++v74;
          }
          while (v74 != v73);
          v72 = v240 + 1;
        }
        while (v240 + 1 != v237);
      }
      v130 = *(std::__shared_weak_count **)v274;
      a5 = v234;
      if (*(_QWORD *)v274)
      {
        v131 = (unint64_t *)(*(_QWORD *)v274 + 8);
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      *(_QWORD *)&v273 = 0x72476E6F69676552;
      *((_QWORD *)&v273 + 1) = 6844513;
      *(_DWORD *)v274 = *(_DWORD *)v246;
      *(_DWORD *)&v274[3] = *(_DWORD *)&v246[3];
      *(_WORD *)&v274[7] = 267;
      sub_2231C6C30(__p, &v273, &v247, &v258);
      if (v274[8] && (v274[7] & 0x80000000) != 0)
        operator delete((void *)v273);
      v133 = (std::__shared_weak_count *)v249;
      if (v249)
      {
        v134 = (unint64_t *)(v249 + 1);
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 56))(v239);
      v137 = *(void **)v136;
      v138 = *(std::__shared_weak_count **)(v136 + 8);
      if (v138)
      {
        v139 = (unint64_t *)&v138->__shared_owners_;
        do
          v140 = __ldxr(v139);
        while (__stxr(v140 + 1, v139));
      }
      v141 = v259;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
      *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = v259;
      v259 = 0uLL;
      __p[0] = v137;
      __p[1] = v138;
      if (v138)
      {
        v142 = (unint64_t *)&v138->__shared_owners_;
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
      }
      v249 = &off_24EC6A3B8;
      v250 = v141;
      if (*((_QWORD *)&v141 + 1))
      {
        v144 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
      }
      (*(void (**)(uint64_t *, void **))(*v235 + 16))(v235, __p);
      v146 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
      if (*((_QWORD *)&v250 + 1))
      {
        v147 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      v149 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v150 = (unint64_t *)((char *)__p[1] + 8);
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      v152 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (__dst.__r_.__value_.__r.__words[2])
      {
        v153 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
      if (v138)
      {
        v155 = (unint64_t *)&v138->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      v157 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
      if (*((_QWORD *)&v259 + 1))
      {
        v158 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
    }
  }
LABEL_237:
  if (!*(_BYTE *)(a5 + 56))
    return;
  v160 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v160 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    __dst = *(std::string *)byte_25578BAF8;
  v161 = std::string::append(&__dst, ".", 1uLL);
  v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  *(_QWORD *)v274 = *((_QWORD *)&v161->__r_.__value_.__l + 2);
  v273 = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  v163 = std::string::append((std::string *)&v273, "SingleShot.DepthMapPlaneDetector.Valid", 0x26uLL);
  v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
  v249 = (uint64_t (**)())v163->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v164;
  v163->__r_.__value_.__l.__size_ = 0;
  v163->__r_.__value_.__r.__words[2] = 0;
  v163->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v249) >= 0)
    v165 = __p;
  else
    v165 = (void **)__p[0];
  strlen((const char *)v165);
  sub_2241471F8();
  v166 = (*(uint64_t (**)(uint64_t *))(qword_2557952E0 + 48))(&qword_2557952E0);
  if (SHIBYTE(v249) < 0)
  {
    operator delete(__p[0]);
    if ((v274[7] & 0x80000000) == 0)
    {
LABEL_247:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_248;
      goto LABEL_252;
    }
  }
  else if ((v274[7] & 0x80000000) == 0)
  {
    goto LABEL_247;
  }
  operator delete((void *)v273);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_248:
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v166 + 24))(v166))
      return;
    goto LABEL_253;
  }
LABEL_252:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v166 + 24))(v166))
    return;
LABEL_253:
  v167 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v167 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v166 + 24))(v166))
  {
    v258 = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
    *(_QWORD *)&v259 = 2;
    v168 = sub_2241471F8();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v166 + 24))(v166))
    {
      if (!*(_BYTE *)(a5 + 56))
        sub_22324A974();
      __p[0] = &off_24EC24788;
      sub_2231F8D1C((_DWORD *)(a5 + 32), &__p[1]);
      v169 = *(_QWORD *)(a5 + 8);
      if (!v169)
        goto LABEL_273;
      v170 = *(std::__shared_weak_count **)(a5 + 16);
      if (v170)
      {
        v171 = (unint64_t *)&v170->__shared_owners_;
        do
          v172 = __ldxr(v171);
        while (__stxr(v172 + 1, v171));
        do
          v173 = __ldaxr(v171);
        while (__stlxr(v173 - 1, v171));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
        }
        v169 = *(_QWORD *)(a5 + 8);
        v174 = *(std::__shared_weak_count **)(a5 + 16);
        if (v174)
        {
          v175 = (unint64_t *)&v174->__shared_owners_;
          do
            v176 = __ldxr(v175);
          while (__stxr(v176 + 1, v175));
          do
            v177 = __ldaxr(v175);
          while (__stlxr(v177 - 1, v175));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
      }
      if (*(_BYTE *)(a5 + 49))
      {
        v178 = a5;
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v169 + 96))(&v273, v169, 0);
        v179 = __p[1];
        v180 = (std::__shared_weak_count *)v249;
        if (!v249)
        {
LABEL_279:
          if (v179 && v254)
          {
            (*(void (**)(uint64_t (***__return_ptr)(), void *, uint64_t))(*(_QWORD *)__p[1] + 96))(&v260, __p[1], 1);
            v184 = v178;
          }
          else
          {
            v260 = 0;
            v184 = v178;
          }
          v185 = *(_DWORD *)(v184 + 32);
          if (v185)
          {
            v186 = *(_DWORD *)(v184 + 36);
            if (v186)
            {
              v244 = v168;
              v187 = *(unsigned int *)(v184 + 40);
              v188 = *(unsigned int *)(v184 + 44);
              v189 = v251;
              v190 = v252;
              v191 = *(_BYTE **)(v184 + 24);
              if (*(_BYTE *)(v184 + 48) && v191)
              {
                v192 = v184;
                v193 = *(_QWORD *)(v184 + 8);
                v194 = *(std::__shared_weak_count **)(v184 + 16);
                if (v194)
                {
                  v195 = (unint64_t *)&v194->__shared_owners_;
                  do
                    v196 = __ldxr(v195);
                  while (__stxr(v196 + 1, v195));
                  do
                    v197 = __ldaxr(v195);
                  while (__stlxr(v197 - 1, v195));
                  if (!v197)
                  {
                    ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                    std::__shared_weak_count::__release_weak(v194);
                  }
                }
                (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v193 + 88))(v193, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                v191 = *(_BYTE **)(v192 + 24);
              }
              v198 = (_BYTE *)*((_QWORD *)&v250 + 1);
              if (v253 && *((_QWORD *)&v250 + 1))
              {
                (*(void (**)(void *, uint64_t, const char *))(*(_QWORD *)__p[1] + 88))(__p[1], 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
                v198 = (_BYTE *)*((_QWORD *)&v250 + 1);
              }
              v199 = v185 - 1;
              v200 = v186 - 1;
              if (v186 != 1)
              {
                if (v185 == 1)
                {
                  do
                  {
                    *v198 = -*v191;
                    v191 += v188;
                    v198 += v190;
                    --v200;
                  }
                  while (v200);
                }
                else
                {
                  v201 = 0;
                  do
                  {
                    v202 = v185 - 1;
                    v203 = v191;
                    v204 = v198;
                    do
                    {
                      *v204 = -*v203;
                      v203 += v187;
                      v204 += v189;
                      --v202;
                    }
                    while (v202);
                    *v204 = -*v203;
                    v191 += v188;
                    v198 += v190;
                    ++v201;
                  }
                  while (v201 != v200);
                }
              }
              if (v185 == 1)
              {
                v168 = v244;
              }
              else
              {
                v168 = v244;
                do
                {
                  *v198 = -*v191;
                  v191 += v187;
                  v198 += v189;
                  --v199;
                }
                while (v199);
              }
              *v198 = -*v191;
            }
          }
          v205 = v260;
          v260 = 0;
          if (v205)
            (*((void (**)(uint64_t (**)()))*v205 + 1))(v205);
          v206 = v273;
          *(_QWORD *)&v273 = 0;
          if (v206)
            (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
          LOBYTE(v273) = 0;
          v274[8] = 0;
          sub_2233B3528((uint64_t)__p, &v273, (__int128 *)&v258, &__dst);
          if (v274[8] && (v274[7] & 0x80000000) != 0)
            operator delete((void *)v273);
          v207 = (std::__shared_weak_count *)v249;
          if (v249)
          {
            v208 = (unint64_t *)(v249 + 1);
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
            }
          }
          v210 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v166 + 56))(v166);
          v211 = *(void **)v210;
          v212 = *(std::__shared_weak_count **)(v210 + 8);
          if (v212)
          {
            v213 = (unint64_t *)&v212->__shared_owners_;
            do
              v214 = __ldxr(v213);
            while (__stxr(v214 + 1, v213));
          }
          v215 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
          v260 = &off_24EC6A3B8;
          v261 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
          *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
          __p[0] = v211;
          __p[1] = v212;
          if (v212)
          {
            v216 = (unint64_t *)&v212->__shared_owners_;
            do
              v217 = __ldxr(v216);
            while (__stxr(v217 + 1, v216));
          }
          v249 = &off_24EC6A3B8;
          v250 = v215;
          if (*((_QWORD *)&v215 + 1))
          {
            v218 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
            do
              v219 = __ldxr(v218);
            while (__stxr(v219 + 1, v218));
          }
          (*(void (**)(uint64_t *, void **))(*v168 + 16))(v168, __p);
          v220 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
          if (*((_QWORD *)&v250 + 1))
          {
            v221 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
              std::__shared_weak_count::__release_weak(v220);
            }
          }
          v223 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v224 = (unint64_t *)((char *)__p[1] + 8);
            do
              v225 = __ldaxr(v224);
            while (__stlxr(v225 - 1, v224));
            if (!v225)
            {
              ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
              std::__shared_weak_count::__release_weak(v223);
            }
          }
          v226 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
          if (*((_QWORD *)&v261 + 1))
          {
            v227 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
            do
              v228 = __ldaxr(v227);
            while (__stlxr(v228 - 1, v227));
            if (!v228)
            {
              ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
              std::__shared_weak_count::__release_weak(v226);
            }
          }
          if (v212)
          {
            v229 = (unint64_t *)&v212->__shared_owners_;
            do
              v230 = __ldaxr(v229);
            while (__stlxr(v230 - 1, v229));
            if (!v230)
            {
              ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
              std::__shared_weak_count::__release_weak(v212);
            }
          }
          v231 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
          if (__dst.__r_.__value_.__r.__words[2])
          {
            v232 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
            do
              v233 = __ldaxr(v232);
            while (__stlxr(v233 - 1, v232));
            if (!v233)
            {
              ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
              std::__shared_weak_count::__release_weak(v231);
            }
          }
          return;
        }
      }
      else
      {
LABEL_273:
        v178 = a5;
        *(_QWORD *)&v273 = 0;
        v179 = __p[1];
        v180 = (std::__shared_weak_count *)v249;
        if (!v249)
          goto LABEL_279;
      }
      v181 = (unint64_t *)&v180->__shared_owners_;
      do
        v182 = __ldxr(v181);
      while (__stxr(v182 + 1, v181));
      do
        v183 = __ldaxr(v181);
      while (__stlxr(v183 - 1, v181));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
      goto LABEL_279;
    }
  }
}

void sub_223EFBCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    sub_223167354(a21);
    _Unwind_Resume(a1);
  }
  sub_223167354(a21);
  _Unwind_Resume(a1);
}

void sub_223EFBE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;

  sub_2241231D8(v43);
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
      std::__shared_weak_count::__release_weak(a26);
    }
  }
  sub_2241231D8(v44 - 224);
  if (v42)
  {
    v48 = (unint64_t *)&v42->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      sub_2241231D8((uint64_t)&a42);
      _Unwind_Resume(a1);
    }
  }
  sub_2241231D8((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223EFBEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  if (a63)
  {
    if (a62 < 0)
      operator delete(__p);
  }
  sub_223167354((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223EFBEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354(a9);
  _Unwind_Resume(a1);
}

void sub_223EFBF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (a62 < 0)
  {
    operator delete(__p);
    if (*(char *)(v62 - 201) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v62 - 224));
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v62 - 201) < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(a1);
}

void sub_223EFBFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47)
{
  unint64_t *p_shared_owners;
  unint64_t v49;

  if (a47)
  {
    p_shared_owners = (unint64_t *)&a47->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))a47->__on_zero_shared)(a47);
      std::__shared_weak_count::__release_weak(a47);
      sub_223167354(a9);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x223EFC150);
}

void sub_223EFC014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354(a9);
  _Unwind_Resume(a1);
}

void sub_223EFC028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47)
{
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;

  v48 = a47;
  if (a47)
  {
    p_shared_owners = (unint64_t *)&a47->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  sub_223167354((uint64_t)&a26);
  sub_223167354(a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_223EFC160(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, float a5, float a6)
{
  _QWORD *v6;
  int v7;
  __int32 v8;
  unsigned int v9;
  unsigned int v10;
  float32x2_t v11;
  float32x2_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t (**v39)();
  uint64_t (**v40)();
  __int128 v41;
  uint64_t (**v42)();
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t (**v65)();
  uint64_t (**v66)();
  __int128 v67;
  uint64_t (**v68)();
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t (**v89)();
  uint64_t v90;
  uint64_t (**v91)();
  uint64_t v92;
  char *v93;
  char *v94;
  void *v95;
  _BYTE *v96;
  _BYTE *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t (**v102)();
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  uint64_t (**v108)();
  unint64_t v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  uint64_t (**v113)();
  uint64_t (**v114)();
  uint64_t (**v115)();
  uint64_t (*v116)();
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char *v120;
  uint64_t (**v121)();
  uint64_t v122;
  uint64_t (**v123)();
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)();
  uint64_t (**v127)();
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t (*v131)();
  uint64_t (*v132)();
  uint64_t (*v133)();
  void *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t (***v141)();
  void **v142;
  void **v143;
  int v144;
  _QWORD *v145;
  _BYTE __p[56];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t (*v151)();
  __int16 v152;
  __int16 v153;
  int v154;
  int v155;
  uint64_t (**v156)();
  _BYTE v157[32];
  __int128 v158;
  __int128 v159;
  uint64_t (*v160)();
  __int16 v161;

  v6 = (_QWORD *)a1;
  v7 = 0;
  *(_QWORD *)a1 = a2;
  v8 = a3[4].i32[1];
  *(_DWORD *)(a1 + 8) = a3[4].i32[0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 28) = 0;
  *(float32x2_t *)(a1 + 32) = a3[5];
  *(_DWORD *)(a1 + 40) = 1065353216;
  v9 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 44) = v9;
  v10 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 48) = v10;
  v11 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v10, v9), (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
  __asm { FMOV            V6.2S, #1.0 }
  v17 = vsub_f32(vadd_f32(a3[5], vmul_f32(vadd_f32(v11, _D6), a3[4])), vadd_f32(vmul_f32(v11, a3[4]), a3[5]));
  v18 = vcvtas_u32_f32(a5 / v17.f32[0]);
  v19 = vcvtas_u32_f32(a5 / v17.f32[1]);
  if (v19 < v18)
    v18 = v19;
  if (v10 < v9)
    v9 = v10;
  if (v18 <= 2)
    v20 = 2;
  else
    v20 = v18;
  if (v9 > v20)
  {
    v7 = 0;
    do
    {
      ++v7;
      v9 >>= 1;
    }
    while (v9 > v20);
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 52) = v7;
  *(_QWORD *)(a1 + 56) = a4;
  *(double *)(a1 + 64) = a6;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  v21 = (v7 + 1);
  if (v7 != -1)
  {
    v141 = (uint64_t (***)())(a1 + 224);
    v142 = (void **)(a1 + 200);
    v143 = (void **)(a1 + 176);
    v23 = (char *)operator new(88 * v21);
    v6[24] = &v23[88 * v21];
    v6[22] = v23;
    v6[23] = v23;
    v140 = v6 + 24;
    v24 = (char *)operator new(88 * v21);
    v6[27] = &v24[88 * v21];
    v6[25] = v24;
    v6[26] = v24;
    v139 = v6 + 27;
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    v25 = (char *)operator new(136 * v21);
    v26 = 0;
    v6[30] = &v25[136 * v21];
    v6[28] = v25;
    v6[29] = v25;
    v138 = v6 + 30;
    v145 = v6;
    v144 = v7;
    while (1)
    {
      v27 = 1 << v26;
      v154 = 1 << v26;
      v155 = 1 << v26;
      sub_2236B4564(&v154, (void **)&unk_2246908D8, (uint64_t *)&__p[8]);
      v29 = (char *)v6[23];
      v28 = v6[24];
      if ((unint64_t)v29 < v28)
      {
        *(_QWORD *)v29 = &off_24EC24788;
        *(_OWORD *)(v29 + 8) = *(_OWORD *)&__p[8];
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        v31 = *(_OWORD *)&__p[40];
        v30 = v147;
        v32 = v148;
        *(_OWORD *)(v29 + 24) = *(_OWORD *)&__p[24];
        *((_QWORD *)v29 + 9) = v32;
        *(_OWORD *)(v29 + 56) = v30;
        *(_OWORD *)(v29 + 40) = v31;
        *((_WORD *)v29 + 40) = WORD4(v148);
        v6[23] = v29 + 88;
        goto LABEL_46;
      }
      v33 = (char *)*v143;
      v34 = 0x2E8BA2E8BA2E8BA3 * ((v29 - (_BYTE *)*v143) >> 3);
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) > 0x2E8BA2E8BA2E8BALL)
        sub_22316E078();
      v36 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v28 - (_QWORD)v33) >> 3);
      if (2 * v36 > v35)
        v35 = 2 * v36;
      if (v36 >= 0x1745D1745D1745DLL)
        v37 = 0x2E8BA2E8BA2E8BALL;
      else
        v37 = v35;
      *(_QWORD *)&v157[24] = v140;
      if (v37 > 0x2E8BA2E8BA2E8BALL)
        sub_223174E94();
      v38 = v26;
      v39 = (uint64_t (**)())operator new(88 * v37);
      v40 = &v39[11 * v34];
      *(_OWORD *)(v40 + 1) = *(_OWORD *)&__p[8];
      v41 = *(_OWORD *)&__p[40];
      *(_OWORD *)(v40 + 3) = *(_OWORD *)&__p[24];
      v156 = v39;
      *(_QWORD *)v157 = v40;
      v42 = &v39[11 * v37];
      *v40 = (uint64_t (*)())&off_24EC24788;
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_OWORD *)(v40 + 5) = v41;
      *(_OWORD *)(v40 + 7) = v147;
      v40[9] = (uint64_t (*)())v148;
      *((_WORD *)v40 + 40) = WORD4(v148);
      v43 = (char *)(v40 + 11);
      *(_QWORD *)&v157[8] = v40 + 11;
      *(_QWORD *)&v157[16] = v42;
      if (v29 == v33)
      {
        v145[22] = v40;
        v145[23] = v43;
        v145[24] = v42;
      }
      else
      {
        v44 = 0;
        do
        {
          v40[v44 - 10] = 0;
          v45 = (uint64_t)&v40[v44 - 10];
          *(_QWORD *)(v45 - 8) = &off_24EC24788;
          *(_BYTE *)(v45 + 20) = 0;
          *(_QWORD *)(v45 + 8) = 0;
          *(_BYTE *)(v45 + 16) = 0;
          *(_OWORD *)(v45 + 24) = 0u;
          *(_OWORD *)(v45 + 40) = 0u;
          *(_OWORD *)(v45 + 56) = 0u;
          sub_22449B750((_QWORD *)v45, (uint64_t)&v29[v44 * 8 - 80]);
          LOWORD(v40[v44 - 1]) = *(_WORD *)&v29[v44 * 8 - 8];
          v44 -= 11;
        }
        while (&v29[v44 * 8] != v33);
        v29 = (char *)v145[22];
        v46 = (char *)v145[23];
        v145[22] = &v40[v44];
        v47 = *(char **)&v157[8];
        *(_OWORD *)(v145 + 23) = *(_OWORD *)&v157[8];
        v43 = v47;
        if (v46 != v29)
        {
          v7 = v144;
          v26 = v38;
          do
          {
            v48 = (std::__shared_weak_count *)*((_QWORD *)v46 - 9);
            if (v48)
            {
              p_shared_owners = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(p_shared_owners);
              while (__stlxr(v50 - 1, p_shared_owners));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v46 -= 88;
          }
          while (v46 != v29);
          goto LABEL_39;
        }
        v7 = v144;
      }
      v26 = v38;
LABEL_39:
      if (v29)
        operator delete(v29);
      v51 = *(std::__shared_weak_count **)&__p[16];
      v6 = v145;
      v145[23] = v43;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
LABEL_46:
      v154 = v27;
      v155 = v27;
      v153 = -1;
      sub_22380A870(&v154, &v153, (uint64_t *)&__p[8]);
      v55 = (char *)v6[26];
      v54 = v6[27];
      if ((unint64_t)v55 < v54)
      {
        *(_QWORD *)v55 = &off_24EC5ABE8;
        *(_OWORD *)(v55 + 8) = *(_OWORD *)&__p[8];
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        v57 = *(_OWORD *)&__p[40];
        v56 = v147;
        v58 = v148;
        *(_OWORD *)(v55 + 24) = *(_OWORD *)&__p[24];
        *((_QWORD *)v55 + 9) = v58;
        *(_OWORD *)(v55 + 56) = v56;
        *(_OWORD *)(v55 + 40) = v57;
        *((_WORD *)v55 + 40) = WORD4(v148);
        v6[26] = v55 + 88;
        goto LABEL_76;
      }
      v59 = (char *)*v142;
      v60 = 0x2E8BA2E8BA2E8BA3 * ((v55 - (_BYTE *)*v142) >> 3);
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) > 0x2E8BA2E8BA2E8BALL)
        sub_22316E078();
      v62 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v54 - (_QWORD)v59) >> 3);
      if (2 * v62 > v61)
        v61 = 2 * v62;
      if (v62 >= 0x1745D1745D1745DLL)
        v63 = 0x2E8BA2E8BA2E8BALL;
      else
        v63 = v61;
      *(_QWORD *)&v157[24] = v139;
      if (v63 > 0x2E8BA2E8BA2E8BALL)
        sub_223174E94();
      v64 = v26;
      v65 = (uint64_t (**)())operator new(88 * v63);
      v66 = &v65[11 * v60];
      *(_OWORD *)(v66 + 1) = *(_OWORD *)&__p[8];
      v67 = *(_OWORD *)&__p[40];
      *(_OWORD *)(v66 + 3) = *(_OWORD *)&__p[24];
      v156 = v65;
      *(_QWORD *)v157 = v66;
      v68 = &v65[11 * v63];
      *v66 = (uint64_t (*)())&off_24EC5ABE8;
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_OWORD *)(v66 + 5) = v67;
      *(_OWORD *)(v66 + 7) = v147;
      v66[9] = (uint64_t (*)())v148;
      *((_WORD *)v66 + 40) = WORD4(v148);
      v69 = (char *)(v66 + 11);
      *(_QWORD *)&v157[8] = v66 + 11;
      *(_QWORD *)&v157[16] = v68;
      if (v55 == v59)
      {
        v145[25] = v66;
        v145[26] = v69;
        v145[27] = v68;
      }
      else
      {
        v70 = 0;
        do
        {
          v66[v70 - 10] = 0;
          v71 = (uint64_t)&v66[v70 - 10];
          *(_QWORD *)(v71 - 8) = &off_24EC5ABE8;
          *(_BYTE *)(v71 + 20) = 0;
          *(_QWORD *)(v71 + 8) = 0;
          *(_BYTE *)(v71 + 16) = 0;
          *(_OWORD *)(v71 + 24) = 0u;
          *(_OWORD *)(v71 + 40) = 0u;
          *(_OWORD *)(v71 + 56) = 0u;
          sub_22449B9E8((_QWORD *)v71, (uint64_t)&v55[v70 * 8 - 80]);
          LOWORD(v66[v70 - 1]) = *(_WORD *)&v55[v70 * 8 - 8];
          v70 -= 11;
        }
        while (&v55[v70 * 8] != v59);
        v55 = (char *)v145[25];
        v72 = (char *)v145[26];
        v145[25] = &v66[v70];
        v73 = *(char **)&v157[8];
        *((_OWORD *)v145 + 13) = *(_OWORD *)&v157[8];
        v69 = v73;
        if (v72 != v55)
        {
          v7 = v144;
          v26 = v64;
          do
          {
            v74 = (std::__shared_weak_count *)*((_QWORD *)v72 - 9);
            if (v74)
            {
              v75 = (unint64_t *)&v74->__shared_owners_;
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v72 -= 88;
          }
          while (v72 != v55);
          goto LABEL_69;
        }
        v7 = v144;
      }
      v26 = v64;
LABEL_69:
      if (v55)
        operator delete(v55);
      v77 = *(std::__shared_weak_count **)&__p[16];
      v6 = v145;
      v145[26] = v69;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
LABEL_76:
      memset(__p, 0, 48);
      *(_QWORD *)&__p[48] = &off_24EC5ABE8;
      sub_2238178E8((uint64_t *)&v147);
      v154 = v27;
      v155 = v27;
      v153 = -1;
      v156 = &off_24EC5ABE8;
      sub_22380A870(&v154, &v153, (uint64_t *)v157);
      v80 = *(_OWORD *)v157;
      *(_QWORD *)v157 = 0;
      *(_QWORD *)&v157[8] = 0;
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
      v147 = v80;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v148 = *(_OWORD *)&v157[16];
      v149 = v158;
      v150 = v159;
      v151 = v160;
      v152 = v161;
      v84 = *(std::__shared_weak_count **)&v157[8];
      if (*(_QWORD *)&v157[8])
      {
        v85 = (unint64_t *)(*(_QWORD *)&v157[8] + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = (v27 << v26) / 5uLL;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 5) < v87)
      {
        v88 = *(_QWORD *)&__p[8];
        *(_QWORD *)&v157[24] = &__p[16];
        v89 = (uint64_t (**)())operator new(224 * v87);
        v90 = (uint64_t)v89 + v88 - *(_QWORD *)__p;
        v156 = v89;
        *(_QWORD *)v157 = v90;
        v91 = &v89[28 * v87];
        *(_QWORD *)&v157[8] = v90;
        *(_QWORD *)&v157[16] = v91;
        v92 = sub_223EFEB24((uint64_t)&__p[16], v88, v88, *(uint64_t *)__p, *(uint64_t *)__p, v90, v90);
        v94 = *(char **)__p;
        v93 = *(char **)&__p[8];
        *(_QWORD *)__p = v92;
        *(_QWORD *)&__p[8] = v90;
        *(_QWORD *)&__p[16] = v91;
        while (v93 != v94)
        {
          v95 = (void *)*((_QWORD *)v93 - 3);
          if (v95)
          {
            *((_QWORD *)v93 - 2) = v95;
            operator delete(v95);
          }
          v93 -= 224;
        }
        if (v94)
          operator delete(v94);
      }
      v96 = *(_BYTE **)&__p[24];
      if (v87 > (uint64_t)(*(_QWORD *)&__p[40] - *(_QWORD *)&__p[24]) >> 4)
      {
        v97 = *(_BYTE **)&__p[32];
        v98 = (char *)operator new(16 * v87);
        v99 = &v98[(v97 - v96) & 0xFFFFFFFFFFFFFFF0];
        v100 = v99;
        if (v97 != v96)
        {
          v101 = &v98[(v97 - v96) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v100 = v101 - 16;
            *((_OWORD *)v101 - 1) = *((_OWORD *)v97 - 1);
            v97 -= 16;
            v101 -= 16;
          }
          while (v97 != v96);
        }
        *(_QWORD *)&__p[24] = v100;
        *(_QWORD *)&__p[32] = v99;
        *(_QWORD *)&__p[40] = &v98[16 * v87];
        if (v96)
          operator delete(v96);
      }
      v102 = (uint64_t (**)())v6[29];
      v103 = v6[30];
      if ((unint64_t)v102 < v103)
      {
        v102[2] = 0;
        v102[3] = 0;
        *v102 = 0;
        v102[1] = 0;
        *(_OWORD *)v102 = *(_OWORD *)__p;
        v102[2] = *(uint64_t (**)())&__p[16];
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        v102[4] = 0;
        v102[5] = 0;
        *(_OWORD *)(v102 + 3) = *(_OWORD *)&__p[24];
        *(_QWORD *)&__p[24] = 0;
        *(_QWORD *)&__p[32] = 0;
        v102[5] = *(uint64_t (**)())&__p[40];
        *(_QWORD *)&__p[40] = 0;
        v102[6] = (uint64_t (*)())&off_24EC5ABE8;
        *(_OWORD *)(v102 + 7) = v147;
        v147 = 0uLL;
        v104 = v148;
        v105 = v149;
        v106 = v150;
        v102[15] = v151;
        *(_OWORD *)(v102 + 13) = v106;
        *(_OWORD *)(v102 + 11) = v105;
        *(_OWORD *)(v102 + 9) = v104;
        *((_WORD *)v102 + 64) = v152;
        v6[29] = v102 + 17;
        v107 = *(void **)&__p[24];
        if (*(_QWORD *)&__p[24])
          goto LABEL_141;
        goto LABEL_15;
      }
      v108 = *v141;
      v109 = 0xF0F0F0F0F0F0F0F1 * (v102 - *v141);
      v110 = v109 + 1;
      if (v109 + 1 > 0x1E1E1E1E1E1E1E1)
        sub_22316E078();
      v111 = v26;
      if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v103 - (_QWORD)v108) >> 3) > v110)
        v110 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v103 - (_QWORD)v108) >> 3);
      if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v103 - (_QWORD)v108) >> 3) >= 0xF0F0F0F0F0F0F0)
        v112 = 0x1E1E1E1E1E1E1E1;
      else
        v112 = v110;
      *(_QWORD *)&v157[24] = v138;
      if (v112 > 0x1E1E1E1E1E1E1E1)
        sub_223174E94();
      v113 = (uint64_t (**)())operator new(136 * v112);
      v114 = &v113[17 * v109];
      v156 = v113;
      *(_QWORD *)v157 = v114;
      *(_OWORD *)v114 = *(_OWORD *)__p;
      v115 = &v113[17 * v112];
      v114[2] = *(uint64_t (**)())&__p[16];
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_OWORD *)(v114 + 3) = *(_OWORD *)&__p[24];
      v116 = *(uint64_t (**)())&__p[40];
      memset(&__p[24], 0, 24);
      v114[5] = v116;
      v114[6] = (uint64_t (*)())&off_24EC5ABE8;
      *(_OWORD *)(v114 + 7) = v147;
      v147 = 0uLL;
      v117 = v148;
      v118 = v149;
      v119 = v150;
      v114[15] = v151;
      *(_OWORD *)(v114 + 13) = v119;
      *(_OWORD *)(v114 + 11) = v118;
      *(_OWORD *)(v114 + 9) = v117;
      *((_WORD *)v114 + 64) = v152;
      v120 = (char *)(v114 + 17);
      *(_QWORD *)&v157[8] = v114 + 17;
      *(_QWORD *)&v157[16] = v115;
      if (v102 == v108)
      {
        v26 = v111;
        v6 = v145;
        v145[28] = v114;
        v145[29] = v120;
        v145[30] = v115;
        *(_QWORD *)&v157[16] = v103;
        v156 = v102;
        *(_QWORD *)v157 = v102;
        goto LABEL_134;
      }
      v121 = &v113[17 * v109];
      v122 = (uint64_t)v121;
      v26 = v111;
      v6 = v145;
      do
      {
        v102 -= 17;
        v122 = sub_223EFE5F0(v122 - 136, v102);
        v121 -= 17;
      }
      while (v102 != v108);
      v123 = (uint64_t (**)())v145[28];
      v102 = (uint64_t (**)())v145[29];
      v120 = *(char **)&v157[8];
      v124 = *(_QWORD *)&v157[16];
      v125 = v145[30];
      v145[28] = v122;
      v145[29] = v120;
      v145[30] = v124;
      *(_QWORD *)&v157[16] = v125;
      v156 = v123;
      *(_QWORD *)v157 = v123;
      if (v102 != v123)
      {
        while (1)
        {
          v127 = v102 - 17;
          *(_QWORD *)&v157[8] = v102 - 17;
          v128 = (std::__shared_weak_count *)*(v102 - 9);
          if (v128)
          {
            v129 = (unint64_t *)&v128->__shared_owners_;
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
              break;
          }
          v131 = *(v102 - 14);
          if (v131)
            goto LABEL_124;
LABEL_125:
          v132 = *v127;
          if (*v127)
          {
            v133 = *(v102 - 16);
            v126 = *v127;
            if (v133 != v132)
            {
              do
              {
                v134 = (void *)*((_QWORD *)v133 - 3);
                if (v134)
                {
                  *((_QWORD *)v133 - 2) = v134;
                  operator delete(v134);
                }
                v133 = (uint64_t (*)())((char *)v133 - 224);
              }
              while (v133 != v132);
              v126 = *v127;
            }
            *(v102 - 16) = v132;
            operator delete(v126);
          }
          v102 = *(uint64_t (***)())&v157[8];
          if (*(uint64_t (***)())&v157[8] == v123)
          {
            v102 = v156;
            goto LABEL_134;
          }
        }
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
        v131 = *(v102 - 14);
        if (!v131)
          goto LABEL_125;
LABEL_124:
        *(v102 - 13) = v131;
        operator delete(v131);
        goto LABEL_125;
      }
LABEL_134:
      if (v102)
        operator delete(v102);
      v135 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
      v6[29] = v120;
      if (v135)
      {
        v136 = (unint64_t *)&v135->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
          v107 = *(void **)&__p[24];
          if (!*(_QWORD *)&__p[24])
            goto LABEL_15;
LABEL_141:
          *(_QWORD *)&__p[32] = v107;
          operator delete(v107);
          goto LABEL_15;
        }
      }
      v107 = *(void **)&__p[24];
      if (*(_QWORD *)&__p[24])
        goto LABEL_141;
LABEL_15:
      if (v26++ == v7)
        return v6;
    }
  }
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return v6;
}

void sub_223EFCF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, uint64_t a11, uint64_t a12, void ***a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  sub_223EFD1A4(&a25);
  sub_223EFD1A4(a13);
  sub_223EFD10C(a14);
  sub_223EFD10C(a15);
  v31 = *(void **)(v29 + 152);
  if (v31)
  {
    *(_QWORD *)(v29 + 160) = v31;
    operator delete(v31);
  }
  sub_223EFD2A0(a9);
  _Unwind_Resume(a1);
}

void **sub_223EFD10C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 9);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_223EFD1A4(void ***a1)
{
  if (*a1)
  {
    sub_223EF18CC((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void **sub_223EFD1DC(void **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1[3];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1[3];
  if (v5)
  {
LABEL_6:
    a1[4] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (char *)*a1;
  if (*a1)
  {
    v7 = (char *)a1[1];
    v8 = *a1;
    if (v7 != v6)
    {
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        if (v9)
        {
          *((_QWORD *)v7 - 2) = v9;
          operator delete(v9);
        }
        v7 -= 224;
      }
      while (v7 != v6);
      v8 = *a1;
    }
    a1[1] = v6;
    operator delete(v8);
  }
  return a1;
}

char **sub_223EFD2A0(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;

  if (a1[9])
    operator delete(a1[7]);
  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        if (*((_QWORD *)v3 - 1))
          operator delete(*((void **)v3 - 3));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v5 = *a1;
  if (*a1)
  {
    v6 = a1[1];
    v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        if (v8)
        {
          *((_QWORD *)v6 - 2) = v8;
          operator delete(v8);
        }
        v6 -= 224;
      }
      while (v6 != v5);
      v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_223EFD368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, float a7)
{
  double v9;
  __n128 v10;
  __n128 v11;
  float64x2_t v12;
  double v13;
  double v14;
  float64x2_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE v24[16];
  std::__shared_weak_count *v25;
  char v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  sub_223EFD4C4(a1, a2, a4, a3, (float32x4_t *)(a1 + 8), a5, a6, a7);
  sub_223EFDA70(a1, v9, v10, v11, v12, v13, v14, v15);
  sub_223EFE094(a1, 0, 0, *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), 0);
  v16 = *(_QWORD *)(a1 + 184) - 88;
  v27 = &off_24EC22138;
  sub_2236B487C(v16, &v28);
  v24[0] = 0;
  v26 = 0;
  sub_223EFA630(a2, (std::string **)(a1 + 152), a1 + 72, (uint64_t)&v27, (uint64_t)v24);
  if (v26)
  {
    v17 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v20 = v29;
  if (!v29)
    return a1 + 72;
  v21 = (unint64_t *)&v29->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return a1 + 72;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1 + 72;
}

void sub_223EFD4A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_223C73144((uint64_t)va);
  sub_2231DE1B4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223EFD4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float a7, float a8)
{
  float32x2_t v8;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  float v21;
  __n128 v22;
  __int128 v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  float32x2_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  float32x2_t v42;
  float32x2_t v43;
  BOOL v44;
  double v45;
  float v46;
  uint64_t v47;
  float32x4_t *v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  unint64_t v52;
  _OWORD *v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v77;
  uint64_t v78;
  float32x2_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  double v89;
  double v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __n128 __p;
  uint64_t v102;
  __int128 v103;
  uint64_t (**v104)();
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  int v110;

  v16 = *(_QWORD *)(a1 + 184) - 88;
  v104 = &off_24EC22138;
  sub_2236B487C(v16, &v105);
  v17 = *(_QWORD *)(a1 + 232);
  sub_223EEF8C4((uint64_t)&v104, (uint64_t)&unk_2246908D9);
  v19 = *(_DWORD *)(a4 + 12);
  v18 = *(_DWORD *)(a4 + 16);
  v20 = v108;
  v21 = cosf(a7 * 0.017453);
  v22.n128_f32[0] = cosf((float)(90.0 - a7) * 0.017453);
  v75 = HIDWORD(v20);
  if (HIDWORD(v20) && (_DWORD)v20)
  {
    v24 = v22.n128_f32[0];
    v25 = v19 / v20;
    v22.n128_u64[0] = *(_QWORD *)(a6 + 32);
    v8.i32[0] = *(_DWORD *)(a6 + 40);
    v74 = v18 - 1;
    v26 = v19 - 1;
    v79 = (float32x2_t)v22.n128_u64[0];
    v27 = (float32x2_t)vdup_lane_s32((int32x2_t)v22.n128_u64[0], 1);
    v28 = a8;
    v82 = v20;
    v29 = 0;
    v73 = v18 / v75;
    v77 = a2;
    do
    {
      v30 = 0;
      v31 = v73 * v29;
      v32 = v31 + v73;
      if (v31 <= 1)
        v33 = 1;
      else
        v33 = v31;
      v84 = v33;
      if (v32 >= v74)
        v34 = v74;
      else
        v34 = v32;
      v83 = v34;
      v80 = (unint64_t)(v32 - 1) << 32;
      v81 = v31 << 32;
      v78 = v29;
      do
      {
        v35 = v25 * v30;
        v36 = v35 + v25;
        if (v35 <= 1)
          v37 = 1;
        else
          v37 = v25 * v30;
        if (v36 >= v26)
          v38 = v26;
        else
          v38 = v35 + v25;
        if (v84 < v83 && v37 < v38)
        {
          v39 = 0;
          v40 = v84;
LABEL_22:
          v41 = v37;
          while (*(unsigned __int8 *)(*(_QWORD *)a3
                                     + (*(_DWORD *)(a3 + 20) * v40)
                                     + *(_DWORD *)(a3 + 16) * v41) == 255)
          {
            if (++v41 == v38)
            {
              v39 = ++v40 >= v83;
              if (v40 != v83)
                goto LABEL_22;
              goto LABEL_28;
            }
          }
          if (!v39)
            goto LABEL_12;
        }
LABEL_28:
        *(_QWORD *)&v103 = v81 | v35;
        *((_QWORD *)&v103 + 1) = v80 | (v36 - 1);
        sub_223F00D80((uint64_t)&v85, (int32x2_t *)&v103, a5, a2, *(_QWORD *)(a1 + 56), *(double *)(a1 + 64), *(float32x2_t *)&v23);
        v22.n128_u32[1] = DWORD1(v88);
        v42.i32[1] = HIDWORD(v88);
        v22.n128_f32[0] = *(double *)&v88;
        v42.f32[0] = *((double *)&v88 + 1);
        v43.i32[1] = HIDWORD(v89);
        v43.f32[0] = v89;
        v22.n128_f32[0] = fabsf(vmla_f32(vmla_f32(vmul_f32(v79, (float32x2_t)v22.n128_u64[0]), v42, v27), v43, v8).f32[0]);
        v44 = v22.n128_f32[0] < v21 && v22.n128_f32[0] > v24;
        v45 = v28;
        if (!v44)
          v45 = *(double *)(a1 + 64);
        v46 = v45;
        v22.n128_f64[0] = v46;
        *(double *)&v23 = v90 / (double)(unint64_t)v85;
        v47 = (v109 * v30 + v110 * v29);
        if (*(double *)&v23 >= v22.n128_f64[0])
        {
          *(_BYTE *)(v107 + v47) = 3;
          v54 = (void *)__p.n128_u64[0];
          if (__p.n128_u64[0])
            goto LABEL_53;
          goto LABEL_12;
        }
        v48 = a5;
        *(_BYTE *)(v107 + v47) = 4;
        v49 = *(_OWORD **)(v17 - 112);
        v50 = *(_OWORD **)(v17 - 104);
        v51 = v50 - v49;
        *(_WORD *)(*(_QWORD *)(v17 - 56)
                 + 2 * (*(_DWORD *)(v17 - 16) * v30 + *(_DWORD *)(v17 - 12) * v29)) = v51;
        v52 = *(_QWORD *)(v17 - 96);
        if ((unint64_t)v50 < v52)
        {
          *v50 = v103;
          v53 = v50 + 1;
          goto LABEL_49;
        }
        v55 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 60)
          sub_22316E078();
        v56 = v52 - (_QWORD)v49;
        if (v56 >> 3 > v55)
          v55 = v56 >> 3;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
          v57 = 0xFFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          if (v57 >> 60)
            sub_223174E94();
          v58 = (char *)operator new(16 * v57);
          v59 = &v58[16 * v51];
          *(_OWORD *)v59 = v103;
          v60 = (uint64_t)v59;
          if (v50 == v49)
          {
LABEL_47:
            v61 = &v58[16 * v57];
            v53 = v59 + 16;
            *(_QWORD *)(v17 - 112) = v60;
            *(_QWORD *)(v17 - 104) = v59 + 16;
            *(_QWORD *)(v17 - 96) = v61;
            if (!v50)
              goto LABEL_49;
LABEL_48:
            operator delete(v50);
            goto LABEL_49;
          }
        }
        else
        {
          v58 = 0;
          v59 = (char *)(16 * v51);
          *(_OWORD *)(16 * v51) = v103;
          v60 = 16 * v51;
          if (v50 == v49)
            goto LABEL_47;
        }
        do
        {
          *(_OWORD *)(v60 - 16) = *(v50 - 1);
          v60 -= 16;
          --v50;
        }
        while (v50 != v49);
        v50 = *(_OWORD **)(v17 - 112);
        v69 = &v58[16 * v57];
        v53 = v59 + 16;
        *(_QWORD *)(v17 - 112) = v60;
        *(_QWORD *)(v17 - 104) = v59 + 16;
        *(_QWORD *)(v17 - 96) = v69;
        if (v50)
          goto LABEL_48;
LABEL_49:
        *(_QWORD *)(v17 - 104) = v53;
        v62 = *(_QWORD *)(v17 - 128);
        if (v62 >= *(_QWORD *)(v17 - 120))
        {
          v68 = sub_223EFECFC((uint64_t *)(v17 - 136), (uint64_t)&v85);
        }
        else
        {
          v63 = v85;
          *(_QWORD *)(v62 + 16) = v86;
          *(_OWORD *)v62 = v63;
          *(_QWORD *)(v62 + 24) = v87;
          v64 = v88;
          *(double *)(v62 + 48) = v89;
          *(_OWORD *)(v62 + 32) = v64;
          *(double *)(v62 + 56) = v90;
          *(_OWORD *)(v62 + 64) = v91;
          *(_OWORD *)(v62 + 80) = v92;
          v65 = v93;
          v23 = v94;
          v66 = v95;
          *(_QWORD *)(v62 + 144) = v96;
          *(_OWORD *)(v62 + 112) = v23;
          *(_OWORD *)(v62 + 128) = v66;
          *(_OWORD *)(v62 + 96) = v65;
          *(_QWORD *)(v62 + 152) = v97;
          v67 = v98;
          *(_QWORD *)(v62 + 176) = v99;
          *(_OWORD *)(v62 + 160) = v67;
          *(_OWORD *)(v62 + 184) = v100;
          *(_QWORD *)(v62 + 200) = 0;
          *(_QWORD *)(v62 + 208) = 0;
          *(_QWORD *)(v62 + 216) = 0;
          v22 = __p;
          *(__n128 *)(v62 + 200) = __p;
          *(_QWORD *)(v62 + 216) = v102;
          __p = 0uLL;
          v102 = 0;
          v68 = v62 + 224;
        }
        a5 = v48;
        *(_QWORD *)(v17 - 128) = v68;
        a2 = v77;
        v29 = v78;
        v54 = (void *)__p.n128_u64[0];
        if (__p.n128_u64[0])
        {
LABEL_53:
          __p.n128_u64[1] = (unint64_t)v54;
          operator delete(v54);
        }
LABEL_12:
        ++v30;
      }
      while (v30 != v82);
      ++v29;
    }
    while (v29 != v75);
  }
  v70 = v106;
  if (v106)
  {
    p_shared_owners = (unint64_t *)&v106->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v22);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_223EFDA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57)
{
  uint64_t v57;

  sub_2231DE1B4(v57 - 192);
  _Unwind_Resume(a1);
}

uint64_t sub_223EFDA70(uint64_t result, double a2, __n128 a3, __n128 a4, float64x2_t a5, double a6, double a7, float64x2_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t *v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  _DWORD *v39;
  uint64_t *v40;
  _DWORD *v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unsigned int v68;
  _DWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD **v72;
  _DWORD *v73;
  uint64_t *v74;
  _DWORD *v75;
  uint64_t *v76;
  _DWORD *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  double v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __n128 v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 __p;
  uint64_t v95;

  v8 = *(unsigned int *)(result + 52);
  if ((_DWORD)v8)
  {
    v71 = result;
    while (1)
    {
      v9 = *(_QWORD *)(result + 176);
      v57 = v8 - 1;
      v58 = (v8 - 1);
      v10 = v9 + 88 * v8;
      v64 = *(_DWORD *)(v10 + 68);
      if (v64)
      {
        v11 = *(_DWORD *)(v10 + 64);
        if (v11)
          break;
      }
LABEL_3:
      v8 = v57;
      result = v71;
      if (!v58)
        return result;
    }
    v12 = 0;
    v13 = *(_QWORD *)(v71 + 224);
    v70 = (_QWORD *)(v13 + 136 * v8);
    v65 = v13 + 136 * v58;
    v14 = v9 + 88 * v8;
    v15 = (_DWORD *)(v14 + 72);
    v16 = (uint64_t *)(v14 + 32);
    v17 = (_DWORD *)(v14 + 76);
    v18 = v9 + 88 * v58;
    v77 = (_DWORD *)(v18 + 72);
    v76 = (uint64_t *)(v18 + 32);
    v19 = (_DWORD *)(v18 + 76);
    v20 = v70 + 15;
    v21 = v70 + 10;
    v22 = (_DWORD *)v70 + 31;
    v72 = (_QWORD **)(v65 + 32);
    v73 = (_DWORD *)(v14 + 76);
    v63 = v70 + 3;
    v66 = (_QWORD *)(v65 + 40);
    v67 = (_QWORD *)(v65 + 24);
    v68 = v11;
    v74 = (uint64_t *)(v14 + 32);
    v75 = (_DWORD *)(v18 + 76);
    v69 = (_DWORD *)(v14 + 72);
LABEL_8:
    v23 = 0;
    v24 = v12 | 1;
    v25 = v12 >> 1;
    while (1)
    {
      while (1)
      {
        v26 = *v15 * v23;
        v27 = *v17 * v12;
        v28 = *v16;
        if (*(_BYTE *)(*v16 + (v27 + v26)) == 4)
        {
          v29 = v23 | 1;
          v30 = *v15 * (v23 | 1);
          if (*(_BYTE *)(v28 + (v27 + v30)) == 4)
          {
            v31 = *v17 * v24;
            if (*(_BYTE *)(v28 + (v31 + v26)) == 4 && *(_BYTE *)(v28 + (v31 + v30)) == 4)
              break;
          }
        }
        *(_BYTE *)(*v76 + *v77 * (v23 >> 1) + *v19 * v25) = 1;
        v23 += 2;
        if (v23 >= v11)
          goto LABEL_7;
      }
      sub_223F01128((uint64_t)&v78, *v70 + 224 * *(unsigned __int16 *)(*v21 + 2 * (*v22 * v12 + *v20 * v23)), *v70 + 224 * *(unsigned __int16 *)(*v21 + 2 * (*v22 * v12 + *v20 * v29)), *v70 + 224 * *(unsigned __int16 *)(*v21 + 2 * (*v22 * v24 + *v20 * v23)), *v70 + 224 * *(unsigned __int16 *)(*v21 + 2 * (*v22 * v24 + *v20 * v29)), *(_QWORD *)(v71 + 56), *(double *)(v71 + 64), a3.n128_f64[0], a4.n128_f64[0], a5, a6, a7, a8);
      a4.n128_f64[0] = (double)(unint64_t)v78;
      a3.n128_f64[0] = v83 / (double)(unint64_t)v78;
      if (a3.n128_f64[0] < *(double *)(v71 + 64))
        break;
      v29 = v23 >> 1;
      v38 = 1;
      v40 = v76;
      v39 = v77;
      v19 = v75;
      v41 = v75;
      v42 = v12 >> 1;
      v15 = v69;
LABEL_39:
      *(_BYTE *)(*v40 + *v39 * v29 + *v41 * v42) = v38;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v11 = v68;
      v17 = v73;
      v16 = v74;
      v23 += 2;
      if (v23 >= v68)
      {
LABEL_7:
        v12 += 2;
        if (v12 >= v64)
          goto LABEL_3;
        goto LABEL_8;
      }
    }
    v32 = *(_QWORD *)(*v63 + 16 * *(unsigned __int16 *)(*v21 + 2 * (*v22 * v12 + *v20 * v23)));
    v33 = *(_QWORD *)(*v63 + 16 * *(unsigned __int16 *)(*v21 + 2 * (*v22 * v24 + *v20 * v29)) + 8);
    *(_BYTE *)(*v76 + *v77 * (v23 >> 1) + *v75 * v25) = 4;
    v34 = *v72;
    v35 = (_QWORD *)*v67;
    v36 = ((uint64_t)*v72 - *v67) >> 4;
    *(_WORD *)(*(_QWORD *)(v65 + 80) + 2 * (*(_DWORD *)(v65 + 120) * (v23 >> 1) + *(_DWORD *)(v65 + 124) * v25)) = v36;
    if ((unint64_t)v34 < *v66)
    {
      *v34 = v32;
      v34[1] = v33;
      v37 = v34 + 2;
LABEL_35:
      v50 = v65;
      v19 = v75;
      *v72 = v37;
      v51 = *(_QWORD *)(v65 + 8);
      if (v51 >= *(_QWORD *)(v65 + 16))
      {
        v56 = sub_223EFECFC((uint64_t *)v65, (uint64_t)&v78);
        v50 = v65;
        v19 = v75;
      }
      else
      {
        v52 = v78;
        *(_QWORD *)(v51 + 16) = v79;
        *(_OWORD *)v51 = v52;
        *(_QWORD *)(v51 + 24) = v80;
        v53 = v81;
        *(_QWORD *)(v51 + 48) = v82;
        *(_OWORD *)(v51 + 32) = v53;
        *(double *)(v51 + 56) = v83;
        *(_OWORD *)(v51 + 64) = v84;
        *(_OWORD *)(v51 + 80) = v85;
        v54 = v86;
        a3 = v87;
        a4 = v88;
        *(_QWORD *)(v51 + 144) = v89;
        *(__n128 *)(v51 + 112) = a3;
        *(__n128 *)(v51 + 128) = a4;
        *(_OWORD *)(v51 + 96) = v54;
        *(_QWORD *)(v51 + 152) = v90;
        v55 = v91;
        *(_QWORD *)(v51 + 176) = v92;
        *(_OWORD *)(v51 + 160) = v55;
        *(_OWORD *)(v51 + 184) = v93;
        *(_QWORD *)(v51 + 200) = 0;
        *(_QWORD *)(v51 + 208) = 0;
        *(_QWORD *)(v51 + 216) = 0;
        *(_OWORD *)(v51 + 200) = __p;
        *(_QWORD *)(v51 + 216) = v95;
        __p = 0uLL;
        v95 = 0;
        v56 = v51 + 224;
      }
      v38 = 0;
      *(_QWORD *)(v50 + 8) = v56;
      v15 = v69;
      v40 = v74;
      *(_BYTE *)(*v74 + *v69 * v23 + *v73 * v12) = 0;
      *(_BYTE *)(*v74 + *v69 * v29 + *v73 * v12) = 0;
      v42 = v12 | 1;
      *(_BYTE *)(*v74 + *v69 * v23 + *v73 * v24) = 0;
      v39 = v69;
      v41 = v73;
      goto LABEL_39;
    }
    v43 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      sub_22316E078();
    v44 = *v66 - (_QWORD)v35;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    if (v45)
    {
      v60 = v36;
      v61 = v32;
      v62 = v33;
      if (v45 >> 60)
        sub_223174E94();
      v59 = v45;
      v46 = (char *)operator new(16 * v45);
      v45 = v59;
      v47 = &v46[16 * v60];
      *(_QWORD *)v47 = v61;
      *((_QWORD *)v47 + 1) = v62;
      v48 = (uint64_t)v47;
      if (v34 == v35)
        goto LABEL_32;
    }
    else
    {
      v46 = 0;
      v47 = (char *)(16 * v36);
      *(_QWORD *)v47 = v32;
      *((_QWORD *)v47 + 1) = v33;
      v48 = 16 * v36;
      if (v34 == v35)
      {
LABEL_32:
        v49 = (uint64_t *)(v65 + 24);
        goto LABEL_33;
      }
    }
    do
    {
      *(_OWORD *)(v48 - 16) = *((_OWORD *)v34 - 1);
      v48 -= 16;
      v34 -= 2;
    }
    while (v34 != v35);
    v49 = (uint64_t *)(v65 + 24);
    v34 = (_QWORD *)*v67;
LABEL_33:
    *v49 = v48;
    v37 = v47 + 16;
    *v72 = v47 + 16;
    *v66 = &v46[16 * v45];
    if (v34)
      operator delete(v34);
    goto LABEL_35;
  }
  return result;
}

void sub_223EFE074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223EFE094(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  unsigned int v28;
  _OWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 __p;
  uint64_t v58;

  v7 = a5;
  v8 = a4;
  v12 = *(_QWORD *)(a1 + 176) + 88 * a6;
  if (*(_BYTE *)(*(_QWORD *)(v12 + 32) + *(_DWORD *)(v12 + 72) * a2 + *(_DWORD *)(v12 + 76) * a3) == 4)
  {
    v13 = a6;
    v14 = *(_QWORD *)(a1 + 224) + 136 * a6;
    v15 = *(unsigned __int16 *)(*(_QWORD *)(v14 + 80) + 2
                                                      * (*(_DWORD *)(v14 + 120) * a2 + *(_DWORD *)(v14 + 124) * a3));
    v16 = *(_QWORD *)(v14 + 24);
    v17 = *(_QWORD *)v14 + 224 * v15;
    v41 = *(_OWORD *)v17;
    v42 = *(_QWORD *)(v17 + 16);
    v43 = *(_QWORD *)(v17 + 24);
    v45 = *(_QWORD *)(v17 + 48);
    v44 = *(_OWORD *)(v17 + 32);
    v46 = *(_QWORD *)(v17 + 56);
    v18 = *(_OWORD *)(v17 + 80);
    v47 = *(_OWORD *)(v17 + 64);
    v48 = v18;
    v52 = *(_QWORD *)(v17 + 144);
    v19 = *(_OWORD *)(v17 + 128);
    v20 = *(_OWORD *)(v17 + 96);
    v50 = *(_OWORD *)(v17 + 112);
    v51 = v19;
    v49 = v20;
    v53 = *(_QWORD *)(v17 + 152);
    v21 = *(_QWORD *)(v17 + 176);
    v54 = *(_OWORD *)(v17 + 160);
    v56 = *(_OWORD *)(v17 + 184);
    __p = *(_OWORD *)(v17 + 200);
    v22 = *(_QWORD *)(v17 + 216);
    v55 = v21;
    v58 = v22;
    *(_QWORD *)(v17 + 200) = 0;
    *(_QWORD *)(v17 + 208) = 0;
    *(_QWORD *)(v17 + 216) = 0;
    v40 = sub_223EFEEDC((uint64_t *)(a1 + 72), (uint64_t)&v41);
    v23 = (_OWORD *)(v16 + 16 * v15);
    if ((_QWORD)__p)
      operator delete((void *)__p);
    v25 = *(_OWORD **)(a1 + 160);
    v24 = *(_QWORD *)(a1 + 168);
    if ((unint64_t)v25 < v24)
    {
      *v25 = *v23;
      v26 = v25 + 1;
      v27 = v40;
      goto LABEL_23;
    }
    v38 = v7;
    v39 = v8;
    v29 = *(_OWORD **)(a1 + 152);
    v30 = v25 - v29;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      sub_22316E078();
    v32 = v24 - (_QWORD)v29;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 60)
        sub_223174E94();
      v34 = (char *)operator new(16 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[16 * v30];
    v36 = &v34[16 * v33];
    *(_OWORD *)v35 = *v23;
    v26 = v35 + 16;
    if (v25 == v29)
    {
      v7 = v38;
      v8 = v39;
      *(_QWORD *)(a1 + 152) = v35;
      *(_QWORD *)(a1 + 160) = v26;
      *(_QWORD *)(a1 + 168) = v36;
      v13 = a6;
      v27 = v40;
      if (v25)
LABEL_22:
        operator delete(v25);
    }
    else
    {
      v7 = v38;
      v8 = v39;
      do
      {
        *((_OWORD *)v35 - 1) = *(v25 - 1);
        v35 -= 16;
        --v25;
      }
      while (v25 != v29);
      v25 = *(_OWORD **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v35;
      *(_QWORD *)(a1 + 160) = v26;
      *(_QWORD *)(a1 + 168) = v36;
      v13 = a6;
      v27 = v40;
      if (v25)
        goto LABEL_22;
    }
LABEL_23:
    *(_QWORD *)(a1 + 160) = v26;
    v37 = *(_QWORD *)(a1 + 200) + 88 * v13;
    *(_WORD *)(*(_QWORD *)(v37 + 32) + 2 * (*(_DWORD *)(v37 + 72) * a2 + *(_DWORD *)(v37 + 76) * a3)) = v27;
    if (a6)
    {
      if (a2 >= 2)
        sub_223EFF114(a1, a2 - 1, a3, a6, (a2 >> 1) - 1, a3 >> 1, v7, v27);
      if (a3 >= 2)
        sub_223EFF584(a1, a2, a3 - 1, a6, a2 >> 1, (a3 >> 1) - 1, v8, v27);
    }
    return;
  }
  if (*(_DWORD *)(a1 + 52) != a6)
  {
    v28 = a6 + 1;
    sub_223EFE094(a1, 2 * a2, 2 * a3, a4 >> 1, a5 >> 1, a6 + 1);
    sub_223EFFF2C(a1, 2 * a2, (2 * a3) | 1, v8 >> 1, v7 >> 1, v28);
    sub_223F002F4(a1, (2 * a2) | 1, 2 * a3, v8 >> 1, v7 >> 1, v28);
    sub_223F006BC(a1, (2 * a2) | 1, (2 * a3) | 1, v8 >> 1, v7 >> 1, v28);
  }
}

void sub_223EFE458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223EFE470(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    v4 = *(std::__shared_weak_count **)(i - 72);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223EFE4FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  char *v10;
  char *v11;
  void *v12;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 136);
    *(_QWORD *)(a1 + 16) = i - 136;
    v6 = *(std::__shared_weak_count **)(i - 72);
    if (!v6)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
LABEL_10:
      v9 = *(void **)(i - 112);
      if (!v9)
        goto LABEL_12;
LABEL_11:
      *(_QWORD *)(i - 104) = v9;
      operator delete(v9);
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = *(void **)(i - 112);
    if (v9)
      goto LABEL_11;
LABEL_12:
    v10 = (char *)*v5;
    if (*v5)
    {
      v11 = *(char **)(i - 128);
      v4 = *v5;
      if (v11 != v10)
      {
        do
        {
          v12 = (void *)*((_QWORD *)v11 - 3);
          if (v12)
          {
            *((_QWORD *)v11 - 2) = v12;
            operator delete(v12);
          }
          v11 -= 224;
        }
        while (v11 != v10);
        v4 = *v5;
      }
      *(_QWORD *)(i - 128) = v10;
      operator delete(v4);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223EFE5F0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;

  v2 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 5);
    if (v7 >= 0x124924924924925)
      sub_22316E078();
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v8[224 * v7];
    do
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      v12 = *(_OWORD *)(v4 + v9);
      *((_QWORD *)v11 + 2) = *(_QWORD *)(v4 + v9 + 16);
      *(_OWORD *)v11 = v12;
      *((_QWORD *)v11 + 3) = *(_QWORD *)(v4 + v9 + 24);
      v13 = *(_OWORD *)(v4 + v9 + 32);
      *((_QWORD *)v11 + 6) = *(_QWORD *)(v4 + v9 + 48);
      *((_OWORD *)v11 + 2) = v13;
      *((_QWORD *)v11 + 7) = *(_QWORD *)(v4 + v9 + 56);
      *((_OWORD *)v11 + 4) = *(_OWORD *)(v4 + v9 + 64);
      v15 = *(_OWORD *)(v4 + v9 + 112);
      v14 = *(_OWORD *)(v4 + v9 + 128);
      v16 = *(_OWORD *)(v4 + v9 + 96);
      *((_QWORD *)v11 + 18) = *(_QWORD *)(v4 + v9 + 144);
      *((_OWORD *)v11 + 7) = v15;
      *((_OWORD *)v11 + 8) = v14;
      *((_OWORD *)v11 + 6) = v16;
      *((_OWORD *)v11 + 5) = *(_OWORD *)(v4 + v9 + 80);
      *((_QWORD *)v11 + 19) = *(_QWORD *)(v4 + v9 + 152);
      v17 = *(_OWORD *)(v4 + v9 + 160);
      *((_QWORD *)v11 + 22) = *(_QWORD *)(v4 + v9 + 176);
      *((_OWORD *)v11 + 10) = v17;
      v18 = *(_OWORD *)(v4 + v9 + 184);
      *(_QWORD *)&v8[v9 + 200] = 0;
      *(_OWORD *)(v11 + 184) = v18;
      *((_QWORD *)v11 + 26) = 0;
      *((_QWORD *)v11 + 27) = 0;
      v20 = *(_BYTE **)(v4 + v9 + 200);
      v19 = *(_BYTE **)(v4 + v9 + 208);
      v21 = v19 - v20;
      if (v19 != v20)
      {
        if (v21 < 0)
          sub_22367C394();
        v22 = (char *)operator new(v19 - v20);
        *(_QWORD *)&v8[v9 + 200] = v22;
        v23 = &v22[8 * (v21 >> 3)];
        *((_QWORD *)v11 + 26) = v22;
        *((_QWORD *)v11 + 27) = v23;
        memcpy(v22, v20, v21);
        *((_QWORD *)v11 + 26) = v23;
      }
      v9 += 224;
    }
    while (v10 + 224 != v5);
    *(_QWORD *)(a1 + 8) = &v8[v9];
    v2 = a2;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v25 = (_BYTE *)v2[3];
  v24 = (_BYTE *)v2[4];
  v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0)
      sub_22316E078();
    v27 = (char *)operator new(v24 - v25);
    *(_QWORD *)(a1 + 24) = v27;
    *(_QWORD *)(a1 + 32) = v27;
    v28 = &v27[16 * (v26 >> 4)];
    *(_QWORD *)(a1 + 40) = v28;
    memcpy(v27, v25, v26);
    *(_QWORD *)(a1 + 32) = v28;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = &off_24EC5ABE8;
  *(_BYTE *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_22449B9E8((_QWORD *)(a1 + 56), (uint64_t)(v2 + 7));
  *(_WORD *)(a1 + 128) = *((_WORD *)v2 + 64);
  return a1;
}

void sub_223EFE858(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *v5;

  sub_223167354(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  sub_223EFE90C((void **)v1);
  _Unwind_Resume(a1);
}

void sub_223EFE88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void **v11;
  char *v13;
  char *v14;
  void *v15;
  void *v16;

  v13 = (char *)*v11;
  if (*v11)
  {
    v14 = (char *)v11[1];
    v15 = *v11;
    if (v14 != v13)
    {
      do
      {
        v16 = (void *)*((_QWORD *)v14 - 3);
        if (v16)
        {
          *((_QWORD *)v14 - 2) = v16;
          operator delete(v16);
        }
        v14 -= 224;
      }
      while (v14 != v13);
      v15 = *v11;
    }
    v11[1] = v13;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void **sub_223EFE90C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 224;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223EFE97C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 224;
    }
  }
  return a1;
}

void sub_223EFE9DC(void **a1, void **a2)
{
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  void *v11;

  if (a2 != a1)
  {
    v2 = a2;
    while (1)
    {
      v5 = (std::__shared_weak_count *)v2[8];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      v8 = v2[3];
      if (v8)
        goto LABEL_11;
LABEL_12:
      v9 = (char *)*v2;
      if (*v2)
      {
        v10 = (char *)v2[1];
        v4 = *v2;
        if (v10 != v9)
        {
          do
          {
            v11 = (void *)*((_QWORD *)v10 - 3);
            if (v11)
            {
              *((_QWORD *)v10 - 2) = v11;
              operator delete(v11);
            }
            v10 -= 224;
          }
          while (v10 != v9);
          v4 = *v2;
        }
        v2[1] = v9;
        operator delete(v4);
      }
      v2 += 17;
      if (v2 == a1)
        return;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = v2[3];
    if (!v8)
      goto LABEL_12;
LABEL_11:
    v2[4] = v8;
    operator delete(v8);
    goto LABEL_12;
  }
}

uint64_t sub_223EFEAB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 224;
        *(_QWORD *)(a1 + 16) = v2 - 224;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 224;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223EFEB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  uint64_t v24;

  v7 = a7;
  v24 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    do
    {
      v11 = *(_OWORD *)(v9 - 224);
      *(_QWORD *)(v7 - 208) = *(_QWORD *)(v9 - 208);
      *(_OWORD *)(v7 - 224) = v11;
      *(_QWORD *)(v7 - 200) = *(_QWORD *)(v9 - 200);
      v12 = *(_OWORD *)(v9 - 192);
      *(_QWORD *)(v7 - 176) = *(_QWORD *)(v9 - 176);
      *(_OWORD *)(v7 - 192) = v12;
      *(_QWORD *)(v7 - 168) = *(_QWORD *)(v9 - 168);
      *(_OWORD *)(v7 - 160) = *(_OWORD *)(v9 - 160);
      v14 = *(_OWORD *)(v9 - 112);
      v13 = *(_OWORD *)(v9 - 96);
      v15 = *(_OWORD *)(v9 - 128);
      *(_QWORD *)(v7 - 80) = *(_QWORD *)(v9 - 80);
      *(_OWORD *)(v7 - 112) = v14;
      *(_OWORD *)(v7 - 96) = v13;
      *(_OWORD *)(v7 - 128) = v15;
      *(_OWORD *)(v7 - 144) = *(_OWORD *)(v9 - 144);
      *(_QWORD *)(v7 - 72) = *(_QWORD *)(v9 - 72);
      v16 = *(_OWORD *)(v9 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(v9 - 48);
      *(_OWORD *)(v7 - 64) = v16;
      v17 = *(_OWORD *)(v9 - 40);
      *(_QWORD *)(v7 - 24) = 0;
      v18 = v7 - 24;
      *(_OWORD *)(v7 - 40) = v17;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      v20 = *(_BYTE **)(v9 - 24);
      v19 = *(_BYTE **)(v9 - 16);
      v21 = v19 - v20;
      if (v19 != v20)
      {
        if (v21 < 0)
          sub_22367C394();
        v22 = (char *)operator new(v19 - v20);
        *(_QWORD *)(v7 - 24) = v22;
        *(_QWORD *)(v7 - 16) = v22;
        v10 = &v22[8 * (v21 >> 3)];
        *(_QWORD *)(v7 - 8) = v10;
        memcpy(v22, v20, v21);
        *(_QWORD *)(v7 - 16) = v10;
      }
      v9 -= 224;
      v7 = v24 - 224;
      v24 -= 224;
    }
    while (v9 != a5);
  }
  return v7;
}

void sub_223EFEC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 - 16) = v12;
    operator delete(v12);
  }
  sub_223EFEC9C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223EFEC9C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 + 200);
      if (v5)
      {
        *(_QWORD *)(v3 + 208) = v5;
        operator delete(v5);
      }
      v3 += 224;
    }
  }
  return a1;
}

uint64_t sub_223EFECFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  void *v17;
  uint64_t v18;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x124924924924924)
    sub_22316E078();
  v5 = (uint64_t)(a1 + 2);
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v6 = 0x124924924924924;
  else
    v6 = v3;
  if (v6 > 0x124924924924924)
    sub_223174E94();
  v8 = 224 * v6;
  v17 = operator new(224 * v6);
  v18 = (uint64_t)v17 + 224 * v2;
  *(_OWORD *)v18 = *(_OWORD *)a2;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v18 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v18 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v18 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v18 + 144) = *(_QWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v18 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v18 + 128) = v9;
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v18 + 80) = v11;
  *(_OWORD *)(v18 + 96) = v10;
  *(_QWORD *)(v18 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(v18 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(v18 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v18 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(v18 + 208) = 0;
  *(_QWORD *)(v18 + 216) = 0;
  *(_OWORD *)(v18 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(v18 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  v12 = sub_223EFEB24(v5, a1[1], a1[1], *a1, *a1, v18, v18);
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v18 + 224;
  a1[2] = (uint64_t)v17 + v8;
  while (v14 != v13)
  {
    v15 = (void *)*((_QWORD *)v14 - 3);
    if (v15)
    {
      *((_QWORD *)v14 - 2) = v15;
      operator delete(v15);
    }
    v14 -= 224;
  }
  if (v13)
    operator delete(v13);
  return v18 + 224;
}

void sub_223EFEEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223EFEAB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223EFEEDC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v18 = sub_223EFECFC(a1, a2);
    v10 = (_QWORD *)a1[3];
    a1[1] = v18;
    v12 = (_QWORD *)a1[4];
    v11 = a1[5];
    if ((unint64_t)v12 >= v11)
      goto LABEL_3;
LABEL_13:
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    v19 = v12 + 3;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 - v10);
    goto LABEL_25;
  }
  v4 = *(_OWORD *)a2;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v3 = v4;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v3 + 32) = v5;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(v3 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(v3 + 112) = v7;
  *(_OWORD *)(v3 + 128) = v6;
  *(_OWORD *)(v3 + 96) = v8;
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(v3 + 152) = *(_QWORD *)(a2 + 152);
  v9 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(v3 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(v3 + 160) = v9;
  *(_OWORD *)(v3 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_OWORD *)(v3 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(v3 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  v10 = (_QWORD *)a1[3];
  a1[1] = v3 + 224;
  v12 = (_QWORD *)a1[4];
  v11 = a1[5];
  if ((unint64_t)v12 < v11)
    goto LABEL_13;
LABEL_3:
  v13 = 0xAAAAAAAAAAAAAAABLL * (v12 - v10);
  v14 = v13 + 1;
  if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v10) >> 3);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v17 = (char *)operator new(24 * v16);
  }
  else
  {
    v17 = 0;
  }
  v20 = &v17[8 * (v12 - v10)];
  v21 = &v17[24 * v16];
  v19 = v20 + 24;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  if (v12 == v10)
  {
    a1[3] = (uint64_t)v20;
    a1[4] = (uint64_t)v19;
    a1[5] = (uint64_t)v21;
  }
  else
  {
    do
    {
      v22 = *(v12 - 3);
      v12 -= 3;
      *((_QWORD *)v20 - 3) = v22;
      v20 -= 24;
      *(_OWORD *)(v20 + 8) = *(_OWORD *)(v12 + 1);
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
    }
    while (v12 != v10);
    v12 = (_QWORD *)a1[3];
    v23 = (_QWORD *)a1[4];
    a1[3] = (uint64_t)v20;
    a1[4] = (uint64_t)v19;
    a1[5] = (uint64_t)v21;
    while (v23 != v12)
    {
      if (*(v23 - 1))
        operator delete((void *)*(v23 - 3));
      v23 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
LABEL_25:
  a1[4] = (uint64_t)v19;
  return v13;
}

void sub_223EFF114(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  float64_t v20;
  uint64_t v21;
  float64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64_t v33;
  float64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  float64_t v45;
  uint64_t v46;
  float64_t v47;
  uint64_t v48;
  float64x2_t *v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64_t v58;
  float64_t v59;
  float v60;
  float v61;
  unint64_t v62;
  int v63;
  double v64;
  float64x2_t v65;
  uint64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v9 = a4 - 1;
  v10 = *(_QWORD *)(a1 + 176);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 88 * v9 + 32)
                           + *(_DWORD *)(v10 + 88 * v9 + 72) * a5
                           + *(_DWORD *)(v10 + 88 * v9 + 76) * a6);
  if (v11 == 4)
  {
    v38 = (_QWORD *)(a1 + 96);
    v37 = *(_QWORD *)(a1 + 96);
    v39 = *(_QWORD *)(a1 + 200) + 88 * v9;
    v40 = *(unsigned __int16 *)(*(_QWORD *)(v39 + 32) + 2 * (*(_DWORD *)(v39 + 72) * a5 + *(_DWORD *)(v39 + 76) * a6));
    if (a8 >= v40)
      v41 = v40;
    else
      v41 = a8;
    if (a8 <= v40)
      v42 = v40;
    else
      v42 = a8;
    v43 = *(_DWORD *)(a1 + 48) >> v9;
    if (v43 >= a7)
      v44 = a7;
    else
      v44 = v43;
    ++*(_QWORD *)(a1 + 120);
    v63 = 0;
    v62 = v42;
    sub_223EEFF74(v37 + 24 * v41, (uint64_t)&v62, (uint64_t)&v67);
    v45 = v67.f64[0];
    v46 = *v38 + 24 * v42;
    v63 = 0;
    v62 = v41;
    sub_223EEFF74(v46, (uint64_t)&v62, (uint64_t)&v67);
    v47 = v67.f64[0];
    v48 = *(_QWORD *)(a1 + 72);
    v49 = (float64x2_t *)(v48 + 224 * v41);
    v50 = (float64x2_t *)(v48 + 224 * v42);
    v51.f64[0] = v49[11].f64[0];
    v52.f64[0] = v50[11].f64[0];
    v65 = vaddq_f64(v49[10], v50[10]);
    v66 = *(_OWORD *)&vaddq_f64(v51, v52);
    v53.f64[0] = v49[9].f64[0];
    v54.f64[0] = v50[9].f64[0];
    v55 = vaddq_f64(v49[5], v50[5]);
    v56 = vaddq_f64(v49[8], v50[8]);
    v57 = vaddq_f64(v49[6], v50[6]);
    v69 = vaddq_f64(v49[7], v50[7]);
    v70 = v56;
    v67 = v55;
    v68 = v57;
    v71 = *(_OWORD *)&vaddq_f64(v53, v54);
    v58 = v50->f64[0];
    v59 = v49->f64[0];
    (*(void (**)(unint64_t *__return_ptr, uint64_t, float64x2_t *, float64x2_t *, float64_t))(**(_QWORD **)&v49->f64[1] + 16))(&v62, *(_QWORD *)&v49->f64[1], &v67, &v65, v49[9].f64[1] + v50[9].f64[1]);
    v60 = (float)v44;
    if (v64 / (double)(unint64_t)(*(_QWORD *)&v58 + *(_QWORD *)&v59) >= v49[1].f64[0])
      v61 = INFINITY;
    else
      v61 = (v64 - (v49[3].f64[1] + v50[3].f64[1]) + 0.00000000999999994) / v60;
    *(float *)(*(_QWORD *)&v47 + 4) = v60;
    *(float *)(*(_QWORD *)&v47 + 8) = v61;
    *(_QWORD *)(*(_QWORD *)&v45 + 4) = *(_QWORD *)(*(_QWORD *)&v47 + 4);
    *(float *)v67.f64 = v61;
    *(_QWORD *)((char *)v67.f64 + 4) = v41 | (v42 << 32);
    sub_223EEFC90(a1 + 128, (uint64_t)&v67, (char **)&v62);
  }
  else if (v11 == 1)
  {
    sub_223EFF9F4(a1, a2, a3, a4, a8, a7);
  }
  else if (!*(_BYTE *)(*(_QWORD *)(v10 + 88 * v9 + 32)
                      + *(_DWORD *)(v10 + 88 * v9 + 72) * a5
                      + *(_DWORD *)(v10 + 88 * v9 + 76) * a6))
  {
    do
    {
      a5 >>= 1;
      a6 >>= 1;
      --v9;
    }
    while (!*(_BYTE *)(*(_QWORD *)(v10 + 88 * v9 + 32)
                      + *(_DWORD *)(v10 + 88 * v9 + 72) * a5
                      + *(_DWORD *)(v10 + 88 * v9 + 76) * a6));
    v13 = (_QWORD *)(a1 + 96);
    v12 = *(_QWORD *)(a1 + 96);
    v14 = *(_QWORD *)(a1 + 200) + 88 * v9;
    v15 = *(unsigned __int16 *)(*(_QWORD *)(v14 + 32) + 2 * (*(_DWORD *)(v14 + 72) * a5 + *(_DWORD *)(v14 + 76) * a6));
    if (a8 >= v15)
      v16 = v15;
    else
      v16 = a8;
    if (a8 <= v15)
      v17 = v15;
    else
      v17 = a8;
    v18 = *(_DWORD *)(a1 + 48) >> v9;
    if (v18 >= a7)
      v19 = a7;
    else
      v19 = v18;
    ++*(_QWORD *)(a1 + 120);
    v63 = 0;
    v62 = v17;
    sub_223EEFF74(v12 + 24 * v16, (uint64_t)&v62, (uint64_t)&v67);
    v20 = v67.f64[0];
    v21 = *v13 + 24 * v17;
    v63 = 0;
    v62 = v16;
    sub_223EEFF74(v21, (uint64_t)&v62, (uint64_t)&v67);
    v22 = v67.f64[0];
    v23 = *(_QWORD *)(a1 + 72);
    v24 = (float64x2_t *)(v23 + 224 * v16);
    v25 = (float64x2_t *)(v23 + 224 * v17);
    v26.f64[0] = v24[11].f64[0];
    v27.f64[0] = v25[11].f64[0];
    v65 = vaddq_f64(v24[10], v25[10]);
    v66 = *(_OWORD *)&vaddq_f64(v26, v27);
    v28.f64[0] = v24[9].f64[0];
    v29.f64[0] = v25[9].f64[0];
    v30 = vaddq_f64(v24[5], v25[5]);
    v31 = vaddq_f64(v24[8], v25[8]);
    v32 = vaddq_f64(v24[6], v25[6]);
    v69 = vaddq_f64(v24[7], v25[7]);
    v70 = v31;
    v67 = v30;
    v68 = v32;
    v71 = *(_OWORD *)&vaddq_f64(v28, v29);
    v33 = v25->f64[0];
    v34 = v24->f64[0];
    (*(void (**)(unint64_t *__return_ptr, uint64_t, float64x2_t *, float64x2_t *, float64_t))(**(_QWORD **)&v24->f64[1] + 16))(&v62, *(_QWORD *)&v24->f64[1], &v67, &v65, v24[9].f64[1] + v25[9].f64[1]);
    v35 = (float)v19;
    if (v64 / (double)(unint64_t)(*(_QWORD *)&v33 + *(_QWORD *)&v34) >= v24[1].f64[0])
      v36 = INFINITY;
    else
      v36 = (v64 - (v24[3].f64[1] + v25[3].f64[1]) + 0.00000000999999994) / v35;
    *(float *)(*(_QWORD *)&v22 + 4) = v35;
    *(float *)(*(_QWORD *)&v22 + 8) = v36;
    *(_QWORD *)(*(_QWORD *)&v20 + 4) = *(_QWORD *)(*(_QWORD *)&v22 + 4);
    *(float *)v67.f64 = v36;
    *(_QWORD *)((char *)v67.f64 + 4) = v16 | (v17 << 32);
    sub_223EEFC90(a1 + 128, (uint64_t)&v67, (char **)&v62);
  }
}

void sub_223EFF584(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  float64_t v20;
  uint64_t v21;
  float64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64_t v33;
  float64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  float64_t v45;
  uint64_t v46;
  float64_t v47;
  uint64_t v48;
  float64x2_t *v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64_t v58;
  float64_t v59;
  float v60;
  float v61;
  unint64_t v62;
  int v63;
  double v64;
  float64x2_t v65;
  uint64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v9 = a4 - 1;
  v10 = *(_QWORD *)(a1 + 176);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 88 * v9 + 32)
                           + *(_DWORD *)(v10 + 88 * v9 + 72) * a5
                           + *(_DWORD *)(v10 + 88 * v9 + 76) * a6);
  if (v11 == 4)
  {
    v38 = (_QWORD *)(a1 + 96);
    v37 = *(_QWORD *)(a1 + 96);
    v39 = *(_QWORD *)(a1 + 200) + 88 * v9;
    v40 = *(unsigned __int16 *)(*(_QWORD *)(v39 + 32) + 2 * (*(_DWORD *)(v39 + 72) * a5 + *(_DWORD *)(v39 + 76) * a6));
    if (a8 >= v40)
      v41 = v40;
    else
      v41 = a8;
    if (a8 <= v40)
      v42 = v40;
    else
      v42 = a8;
    v43 = *(_DWORD *)(a1 + 44) >> v9;
    if (v43 >= a7)
      v44 = a7;
    else
      v44 = v43;
    ++*(_QWORD *)(a1 + 120);
    v63 = 0;
    v62 = v42;
    sub_223EEFF74(v37 + 24 * v41, (uint64_t)&v62, (uint64_t)&v67);
    v45 = v67.f64[0];
    v46 = *v38 + 24 * v42;
    v63 = 0;
    v62 = v41;
    sub_223EEFF74(v46, (uint64_t)&v62, (uint64_t)&v67);
    v47 = v67.f64[0];
    v48 = *(_QWORD *)(a1 + 72);
    v49 = (float64x2_t *)(v48 + 224 * v41);
    v50 = (float64x2_t *)(v48 + 224 * v42);
    v51.f64[0] = v49[11].f64[0];
    v52.f64[0] = v50[11].f64[0];
    v65 = vaddq_f64(v49[10], v50[10]);
    v66 = *(_OWORD *)&vaddq_f64(v51, v52);
    v53.f64[0] = v49[9].f64[0];
    v54.f64[0] = v50[9].f64[0];
    v55 = vaddq_f64(v49[5], v50[5]);
    v56 = vaddq_f64(v49[8], v50[8]);
    v57 = vaddq_f64(v49[6], v50[6]);
    v69 = vaddq_f64(v49[7], v50[7]);
    v70 = v56;
    v67 = v55;
    v68 = v57;
    v71 = *(_OWORD *)&vaddq_f64(v53, v54);
    v58 = v50->f64[0];
    v59 = v49->f64[0];
    (*(void (**)(unint64_t *__return_ptr, uint64_t, float64x2_t *, float64x2_t *, float64_t))(**(_QWORD **)&v49->f64[1] + 16))(&v62, *(_QWORD *)&v49->f64[1], &v67, &v65, v49[9].f64[1] + v50[9].f64[1]);
    v60 = (float)v44;
    if (v64 / (double)(unint64_t)(*(_QWORD *)&v58 + *(_QWORD *)&v59) >= v49[1].f64[0])
      v61 = INFINITY;
    else
      v61 = (v64 - (v49[3].f64[1] + v50[3].f64[1]) + 0.00000000999999994) / v60;
    *(float *)(*(_QWORD *)&v47 + 4) = v60;
    *(float *)(*(_QWORD *)&v47 + 8) = v61;
    *(_QWORD *)(*(_QWORD *)&v45 + 4) = *(_QWORD *)(*(_QWORD *)&v47 + 4);
    *(float *)v67.f64 = v61;
    *(_QWORD *)((char *)v67.f64 + 4) = v41 | (v42 << 32);
    sub_223EEFC90(a1 + 128, (uint64_t)&v67, (char **)&v62);
  }
  else if (v11 == 1)
  {
    sub_223EFFC90(a1, a2, a3, a4, a8, a7);
  }
  else if (!*(_BYTE *)(*(_QWORD *)(v10 + 88 * v9 + 32)
                      + *(_DWORD *)(v10 + 88 * v9 + 72) * a5
                      + *(_DWORD *)(v10 + 88 * v9 + 76) * a6))
  {
    do
    {
      a5 >>= 1;
      a6 >>= 1;
      --v9;
    }
    while (!*(_BYTE *)(*(_QWORD *)(v10 + 88 * v9 + 32)
                      + *(_DWORD *)(v10 + 88 * v9 + 72) * a5
                      + *(_DWORD *)(v10 + 88 * v9 + 76) * a6));
    v13 = (_QWORD *)(a1 + 96);
    v12 = *(_QWORD *)(a1 + 96);
    v14 = *(_QWORD *)(a1 + 200) + 88 * v9;
    v15 = *(unsigned __int16 *)(*(_QWORD *)(v14 + 32) + 2 * (*(_DWORD *)(v14 + 72) * a5 + *(_DWORD *)(v14 + 76) * a6));
    if (a8 >= v15)
      v16 = v15;
    else
      v16 = a8;
    if (a8 <= v15)
      v17 = v15;
    else
      v17 = a8;
    v18 = *(_DWORD *)(a1 + 44) >> v9;
    if (v18 >= a7)
      v19 = a7;
    else
      v19 = v18;
    ++*(_QWORD *)(a1 + 120);
    v63 = 0;
    v62 = v17;
    sub_223EEFF74(v12 + 24 * v16, (uint64_t)&v62, (uint64_t)&v67);
    v20 = v67.f64[0];
    v21 = *v13 + 24 * v17;
    v63 = 0;
    v62 = v16;
    sub_223EEFF74(v21, (uint64_t)&v62, (uint64_t)&v67);
    v22 = v67.f64[0];
    v23 = *(_QWORD *)(a1 + 72);
    v24 = (float64x2_t *)(v23 + 224 * v16);
    v25 = (float64x2_t *)(v23 + 224 * v17);
    v26.f64[0] = v24[11].f64[0];
    v27.f64[0] = v25[11].f64[0];
    v65 = vaddq_f64(v24[10], v25[10]);
    v66 = *(_OWORD *)&vaddq_f64(v26, v27);
    v28.f64[0] = v24[9].f64[0];
    v29.f64[0] = v25[9].f64[0];
    v30 = vaddq_f64(v24[5], v25[5]);
    v31 = vaddq_f64(v24[8], v25[8]);
    v32 = vaddq_f64(v24[6], v25[6]);
    v69 = vaddq_f64(v24[7], v25[7]);
    v70 = v31;
    v67 = v30;
    v68 = v32;
    v71 = *(_OWORD *)&vaddq_f64(v28, v29);
    v33 = v25->f64[0];
    v34 = v24->f64[0];
    (*(void (**)(unint64_t *__return_ptr, uint64_t, float64x2_t *, float64x2_t *, float64_t))(**(_QWORD **)&v24->f64[1] + 16))(&v62, *(_QWORD *)&v24->f64[1], &v67, &v65, v24[9].f64[1] + v25[9].f64[1]);
    v35 = (float)v19;
    if (v64 / (double)(unint64_t)(*(_QWORD *)&v33 + *(_QWORD *)&v34) >= v24[1].f64[0])
      v36 = INFINITY;
    else
      v36 = (v64 - (v24[3].f64[1] + v25[3].f64[1]) + 0.00000000999999994) / v35;
    *(float *)(*(_QWORD *)&v22 + 4) = v35;
    *(float *)(*(_QWORD *)&v22 + 8) = v36;
    *(_QWORD *)(*(_QWORD *)&v20 + 4) = *(_QWORD *)(*(_QWORD *)&v22 + 4);
    *(float *)v67.f64 = v36;
    *(_QWORD *)((char *)v67.f64 + 4) = v16 | (v17 << 32);
    sub_223EEFC90(a1 + 128, (uint64_t)&v67, (char **)&v62);
  }
}

void sub_223EFF9F4(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64_t v33;
  float64_t v34;
  float v35;
  float v36;
  unint64_t v37;
  int v38;
  double v39;
  float64x2_t v40;
  uint64_t v41;
  _OWORD v42[4];
  uint64_t v43;
  uint64_t v44;

  LODWORD(v10) = a2;
  v44 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    v12 = a4;
    v13 = *(_QWORD *)(a1 + 176) + 88 * a4;
    v14 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 32)
                             + (*(_DWORD *)(v13 + 72) * v10 + *(_DWORD *)(v13 + 76) * a3));
    if (v14 != 1)
      break;
    ++a4;
    v10 = (2 * (_DWORD)v10) | 1u;
    sub_223EFF9F4(a1, v10, (2 * a3), v12 + 1, a5, a6);
    a3 = (2 * a3) | 1;
  }
  if (v14 == 4)
  {
    v15 = *(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 200) + 88 * a4;
    v17 = *(unsigned __int16 *)(*(_QWORD *)(v16 + 32)
                              + 2 * (*(_DWORD *)(v16 + 72) * v10 + *(_DWORD *)(v16 + 76) * a3));
    if (a5 >= v17)
      v18 = v17;
    else
      v18 = a5;
    if (a5 <= v17)
      a5 = v17;
    else
      a5 = a5;
    if (*(_DWORD *)(a1 + 48) >> a4 >= a6)
      v19 = a6;
    else
      v19 = *(_DWORD *)(a1 + 48) >> a4;
    ++*(_QWORD *)(a1 + 120);
    v38 = 0;
    v37 = a5;
    sub_223EEFF74(v15 + 24 * v18, (uint64_t)&v37, (uint64_t)v42);
    v20 = *(_QWORD *)&v42[0];
    v21 = *(_QWORD *)(a1 + 96) + 24 * a5;
    v38 = 0;
    v37 = v18;
    sub_223EEFF74(v21, (uint64_t)&v37, (uint64_t)v42);
    v22 = *(_QWORD *)&v42[0];
    v23 = *(_QWORD *)(a1 + 72);
    v24 = (float64x2_t *)(v23 + 224 * v18);
    v25 = (float64x2_t *)(v23 + 224 * a5);
    v26.f64[0] = v24[11].f64[0];
    v27.f64[0] = v25[11].f64[0];
    v40 = vaddq_f64(v24[10], v25[10]);
    v41 = *(_OWORD *)&vaddq_f64(v26, v27);
    v28.f64[0] = v24[9].f64[0];
    v29.f64[0] = v25[9].f64[0];
    v30 = vaddq_f64(v24[5], v25[5]);
    v31 = vaddq_f64(v24[8], v25[8]);
    v32 = vaddq_f64(v24[6], v25[6]);
    v42[2] = vaddq_f64(v24[7], v25[7]);
    v42[3] = v31;
    v42[0] = v30;
    v42[1] = v32;
    v43 = *(_OWORD *)&vaddq_f64(v28, v29);
    v33 = v25->f64[0];
    v34 = v24->f64[0];
    (*(void (**)(unint64_t *__return_ptr, uint64_t, _OWORD *, float64x2_t *, float64_t))(**(_QWORD **)&v24->f64[1] + 16))(&v37, *(_QWORD *)&v24->f64[1], v42, &v40, v24[9].f64[1] + v25[9].f64[1]);
    v35 = (float)v19;
    if (v39 / (double)(unint64_t)(*(_QWORD *)&v33 + *(_QWORD *)&v34) >= v24[1].f64[0])
      v36 = INFINITY;
    else
      v36 = (v39 - (v24[3].f64[1] + v25[3].f64[1]) + 0.00000000999999994) / v35;
    *(float *)(v22 + 4) = v35;
    *(float *)(v22 + 8) = v36;
    *(_QWORD *)(v20 + 4) = *(_QWORD *)(v22 + 4);
    *(float *)v42 = v36;
    *(_QWORD *)((char *)v42 + 4) = v18 | (a5 << 32);
    sub_223EEFC90(a1 + 128, (uint64_t)v42, (char **)&v37);
  }
}

void sub_223EFFC90(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64_t v33;
  float64_t v34;
  float v35;
  float v36;
  unint64_t v37;
  int v38;
  double v39;
  float64x2_t v40;
  uint64_t v41;
  _OWORD v42[4];
  uint64_t v43;
  uint64_t v44;

  LODWORD(v9) = a3;
  v44 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    v12 = a4;
    v13 = *(_QWORD *)(a1 + 176) + 88 * a4;
    v14 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 32)
                             + (*(_DWORD *)(v13 + 72) * a2 + *(_DWORD *)(v13 + 76) * v9));
    if (v14 != 1)
      break;
    ++a4;
    v9 = (2 * (_DWORD)v9) | 1u;
    sub_223EFFC90(a1, (2 * a2), v9, v12 + 1, a5, a6);
    a2 = (2 * a2) | 1;
  }
  if (v14 == 4)
  {
    v15 = *(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 200) + 88 * a4;
    v17 = *(unsigned __int16 *)(*(_QWORD *)(v16 + 32)
                              + 2 * (*(_DWORD *)(v16 + 72) * a2 + *(_DWORD *)(v16 + 76) * v9));
    if (a5 >= v17)
      v18 = v17;
    else
      v18 = a5;
    if (a5 <= v17)
      a5 = v17;
    else
      a5 = a5;
    if (*(_DWORD *)(a1 + 44) >> a4 >= a6)
      v19 = a6;
    else
      v19 = *(_DWORD *)(a1 + 44) >> a4;
    ++*(_QWORD *)(a1 + 120);
    v38 = 0;
    v37 = a5;
    sub_223EEFF74(v15 + 24 * v18, (uint64_t)&v37, (uint64_t)v42);
    v20 = *(_QWORD *)&v42[0];
    v21 = *(_QWORD *)(a1 + 96) + 24 * a5;
    v38 = 0;
    v37 = v18;
    sub_223EEFF74(v21, (uint64_t)&v37, (uint64_t)v42);
    v22 = *(_QWORD *)&v42[0];
    v23 = *(_QWORD *)(a1 + 72);
    v24 = (float64x2_t *)(v23 + 224 * v18);
    v25 = (float64x2_t *)(v23 + 224 * a5);
    v26.f64[0] = v24[11].f64[0];
    v27.f64[0] = v25[11].f64[0];
    v40 = vaddq_f64(v24[10], v25[10]);
    v41 = *(_OWORD *)&vaddq_f64(v26, v27);
    v28.f64[0] = v24[9].f64[0];
    v29.f64[0] = v25[9].f64[0];
    v30 = vaddq_f64(v24[5], v25[5]);
    v31 = vaddq_f64(v24[8], v25[8]);
    v32 = vaddq_f64(v24[6], v25[6]);
    v42[2] = vaddq_f64(v24[7], v25[7]);
    v42[3] = v31;
    v42[0] = v30;
    v42[1] = v32;
    v43 = *(_OWORD *)&vaddq_f64(v28, v29);
    v33 = v25->f64[0];
    v34 = v24->f64[0];
    (*(void (**)(unint64_t *__return_ptr, uint64_t, _OWORD *, float64x2_t *, float64_t))(**(_QWORD **)&v24->f64[1] + 16))(&v37, *(_QWORD *)&v24->f64[1], v42, &v40, v24[9].f64[1] + v25[9].f64[1]);
    v35 = (float)v19;
    if (v39 / (double)(unint64_t)(*(_QWORD *)&v33 + *(_QWORD *)&v34) >= v24[1].f64[0])
      v36 = INFINITY;
    else
      v36 = (v39 - (v24[3].f64[1] + v25[3].f64[1]) + 0.00000000999999994) / v35;
    *(float *)(v22 + 4) = v35;
    *(float *)(v22 + 8) = v36;
    *(_QWORD *)(v20 + 4) = *(_QWORD *)(v22 + 4);
    *(float *)v42 = v36;
    *(_QWORD *)((char *)v42 + 4) = v18 | (a5 << 32);
    sub_223EEFC90(a1 + 128, (uint64_t)v42, (char **)&v37);
  }
}

void sub_223EFFF2C(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD **v29;
  _OWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 __p;
  uint64_t v58;

  v7 = a5;
  v8 = a4;
  v12 = *(_QWORD *)(a1 + 176) + 88 * a6;
  if (*(_BYTE *)(*(_QWORD *)(v12 + 32) + *(_DWORD *)(v12 + 72) * a2 + *(_DWORD *)(v12 + 76) * a3) == 4)
  {
    v13 = *(_QWORD *)(a1 + 224) + 136 * a6;
    v14 = *(unsigned __int16 *)(*(_QWORD *)(v13 + 80) + 2
                                                      * (*(_DWORD *)(v13 + 120) * a2 + *(_DWORD *)(v13 + 124) * a3));
    v15 = *(_QWORD *)(v13 + 24);
    v16 = *(_QWORD *)v13 + 224 * v14;
    v41 = *(_OWORD *)v16;
    v42 = *(_QWORD *)(v16 + 16);
    v43 = *(_QWORD *)(v16 + 24);
    v45 = *(_QWORD *)(v16 + 48);
    v44 = *(_OWORD *)(v16 + 32);
    v46 = *(_QWORD *)(v16 + 56);
    v17 = *(_OWORD *)(v16 + 80);
    v47 = *(_OWORD *)(v16 + 64);
    v48 = v17;
    v52 = *(_QWORD *)(v16 + 144);
    v18 = *(_OWORD *)(v16 + 128);
    v19 = *(_OWORD *)(v16 + 96);
    v50 = *(_OWORD *)(v16 + 112);
    v51 = v18;
    v49 = v19;
    v53 = *(_QWORD *)(v16 + 152);
    v20 = *(_QWORD *)(v16 + 176);
    v54 = *(_OWORD *)(v16 + 160);
    v56 = *(_OWORD *)(v16 + 184);
    __p = *(_OWORD *)(v16 + 200);
    v21 = *(_QWORD *)(v16 + 216);
    v55 = v20;
    v58 = v21;
    *(_QWORD *)(v16 + 200) = 0;
    *(_QWORD *)(v16 + 208) = 0;
    *(_QWORD *)(v16 + 216) = 0;
    v22 = sub_223EFEEDC((uint64_t *)(a1 + 72), (uint64_t)&v41);
    v23 = (_OWORD *)(v15 + 16 * v14);
    if ((_QWORD)__p)
      operator delete((void *)__p);
    v25 = *(_OWORD **)(a1 + 160);
    v24 = *(_QWORD *)(a1 + 168);
    if ((unint64_t)v25 < v24)
    {
      *v25 = *v23;
      v26 = v25 + 1;
      goto LABEL_23;
    }
    v39 = v7;
    v40 = v8;
    v29 = (_OWORD **)(a1 + 152);
    v30 = *(_OWORD **)(a1 + 152);
    v31 = v25 - v30;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      sub_22316E078();
    v33 = v24 - (_QWORD)v30;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 60)
        sub_223174E94();
      v35 = (char *)operator new(16 * v34);
      v29 = (_OWORD **)(a1 + 152);
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[16 * v31];
    v37 = &v35[16 * v34];
    *(_OWORD *)v36 = *v23;
    v26 = v36 + 16;
    if (v25 == v30)
    {
      v7 = v39;
      v8 = v40;
      *(_QWORD *)(a1 + 152) = v36;
      *(_QWORD *)(a1 + 160) = v26;
      *(_QWORD *)(a1 + 168) = v37;
      if (v25)
LABEL_22:
        operator delete(v25);
    }
    else
    {
      v7 = v39;
      v8 = v40;
      do
      {
        *((_OWORD *)v36 - 1) = *(v25 - 1);
        v36 -= 16;
        --v25;
      }
      while (v25 != v30);
      v25 = *v29;
      *(_QWORD *)(a1 + 152) = v36;
      *(_QWORD *)(a1 + 160) = v26;
      *(_QWORD *)(a1 + 168) = v37;
      if (v25)
        goto LABEL_22;
    }
LABEL_23:
    *(_QWORD *)(a1 + 160) = v26;
    v38 = *(_QWORD *)(a1 + 200) + 88 * a6;
    *(_WORD *)(*(_QWORD *)(v38 + 32) + 2 * (*(_DWORD *)(v38 + 72) * a2 + *(_DWORD *)(v38 + 76) * a3)) = v22;
    if (a6)
    {
      if (a2 >= 2)
        sub_223EFF114(a1, a2 - 1, a3, a6, (a2 >> 1) - 1, a3 >> 1, v7, v22);
      sub_223EFFC90(a1, a2, a3 - 1, a6, v22, v8);
    }
    return;
  }
  if (*(_DWORD *)(a1 + 52) != a6)
  {
    v27 = a4 >> 1;
    v28 = a6 + 1;
    sub_223EFE094(a1, 2 * a2, 2 * a3, v27, a5 >> 1, v28);
    sub_223EFFF2C(a1, 2 * a2, (2 * a3) | 1, v27, v7 >> 1, v28);
    sub_223F002F4(a1, (2 * a2) | 1, 2 * a3, v27, v7 >> 1, v28);
    sub_223F006BC(a1, (2 * a2) | 1, (2 * a3) | 1, v27, v7 >> 1, v28);
  }
}

void sub_223F002DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223F002F4(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD **v29;
  _OWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 __p;
  uint64_t v58;

  v7 = a5;
  v8 = a4;
  v12 = *(_QWORD *)(a1 + 176) + 88 * a6;
  if (*(_BYTE *)(*(_QWORD *)(v12 + 32) + *(_DWORD *)(v12 + 72) * a2 + *(_DWORD *)(v12 + 76) * a3) == 4)
  {
    v13 = *(_QWORD *)(a1 + 224) + 136 * a6;
    v14 = *(unsigned __int16 *)(*(_QWORD *)(v13 + 80) + 2
                                                      * (*(_DWORD *)(v13 + 120) * a2 + *(_DWORD *)(v13 + 124) * a3));
    v15 = *(_QWORD *)(v13 + 24);
    v16 = *(_QWORD *)v13 + 224 * v14;
    v41 = *(_OWORD *)v16;
    v42 = *(_QWORD *)(v16 + 16);
    v43 = *(_QWORD *)(v16 + 24);
    v45 = *(_QWORD *)(v16 + 48);
    v44 = *(_OWORD *)(v16 + 32);
    v46 = *(_QWORD *)(v16 + 56);
    v17 = *(_OWORD *)(v16 + 80);
    v47 = *(_OWORD *)(v16 + 64);
    v48 = v17;
    v52 = *(_QWORD *)(v16 + 144);
    v18 = *(_OWORD *)(v16 + 128);
    v19 = *(_OWORD *)(v16 + 96);
    v50 = *(_OWORD *)(v16 + 112);
    v51 = v18;
    v49 = v19;
    v53 = *(_QWORD *)(v16 + 152);
    v20 = *(_QWORD *)(v16 + 176);
    v54 = *(_OWORD *)(v16 + 160);
    v56 = *(_OWORD *)(v16 + 184);
    __p = *(_OWORD *)(v16 + 200);
    v21 = *(_QWORD *)(v16 + 216);
    v55 = v20;
    v58 = v21;
    *(_QWORD *)(v16 + 200) = 0;
    *(_QWORD *)(v16 + 208) = 0;
    *(_QWORD *)(v16 + 216) = 0;
    v22 = sub_223EFEEDC((uint64_t *)(a1 + 72), (uint64_t)&v41);
    v23 = (_OWORD *)(v15 + 16 * v14);
    if ((_QWORD)__p)
      operator delete((void *)__p);
    v25 = *(_OWORD **)(a1 + 160);
    v24 = *(_QWORD *)(a1 + 168);
    if ((unint64_t)v25 < v24)
    {
      *v25 = *v23;
      v26 = v25 + 1;
      goto LABEL_23;
    }
    v39 = v7;
    v40 = v8;
    v29 = (_OWORD **)(a1 + 152);
    v30 = *(_OWORD **)(a1 + 152);
    v31 = v25 - v30;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      sub_22316E078();
    v33 = v24 - (_QWORD)v30;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 60)
        sub_223174E94();
      v35 = (char *)operator new(16 * v34);
      v29 = (_OWORD **)(a1 + 152);
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[16 * v31];
    v37 = &v35[16 * v34];
    *(_OWORD *)v36 = *v23;
    v26 = v36 + 16;
    if (v25 == v30)
    {
      v7 = v39;
      v8 = v40;
      *(_QWORD *)(a1 + 152) = v36;
      *(_QWORD *)(a1 + 160) = v26;
      *(_QWORD *)(a1 + 168) = v37;
      if (v25)
LABEL_22:
        operator delete(v25);
    }
    else
    {
      v7 = v39;
      v8 = v40;
      do
      {
        *((_OWORD *)v36 - 1) = *(v25 - 1);
        v36 -= 16;
        --v25;
      }
      while (v25 != v30);
      v25 = *v29;
      *(_QWORD *)(a1 + 152) = v36;
      *(_QWORD *)(a1 + 160) = v26;
      *(_QWORD *)(a1 + 168) = v37;
      if (v25)
        goto LABEL_22;
    }
LABEL_23:
    *(_QWORD *)(a1 + 160) = v26;
    v38 = *(_QWORD *)(a1 + 200) + 88 * a6;
    *(_WORD *)(*(_QWORD *)(v38 + 32) + 2 * (*(_DWORD *)(v38 + 72) * a2 + *(_DWORD *)(v38 + 76) * a3)) = v22;
    if (a6)
    {
      sub_223EFF9F4(a1, a2 - 1, a3, a6, v22, v7);
      if (a3 >= 2)
        sub_223EFF584(a1, a2, a3 - 1, a6, a2 >> 1, (a3 >> 1) - 1, v8, v22);
    }
    return;
  }
  if (*(_DWORD *)(a1 + 52) != a6)
  {
    v27 = a4 >> 1;
    v28 = a6 + 1;
    sub_223EFE094(a1, 2 * a2, 2 * a3, v27, a5 >> 1, v28);
    sub_223EFFF2C(a1, 2 * a2, (2 * a3) | 1, v27, v7 >> 1, v28);
    sub_223F002F4(a1, (2 * a2) | 1, 2 * a3, v27, v7 >> 1, v28);
    sub_223F006BC(a1, (2 * a2) | 1, (2 * a3) | 1, v27, v7 >> 1, v28);
  }
}

void sub_223F006A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223F006BC(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  unint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD **v30;
  _OWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  unsigned int v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 __p;
  uint64_t v60;

  LODWORD(v6) = a6;
  v9 = a3;
  v10 = a2;
  v12 = *(_QWORD *)(a1 + 176) + 88 * a6;
  if (*(_BYTE *)(*(_QWORD *)(v12 + 32) + *(_DWORD *)(v12 + 72) * a2 + *(_DWORD *)(v12 + 76) * a3) == 4)
  {
    v13 = a6;
LABEL_6:
    v16 = *(_QWORD *)(a1 + 224) + 136 * v13;
    v17 = *(unsigned __int16 *)(*(_QWORD *)(v16 + 80)
                              + 2 * (*(_DWORD *)(v16 + 120) * v10 + *(_DWORD *)(v16 + 124) * v9));
    v18 = *(_QWORD *)(v16 + 24);
    v19 = *(_QWORD *)v16 + 224 * v17;
    v43 = *(_OWORD *)v19;
    v44 = *(_QWORD *)(v19 + 16);
    v45 = *(_QWORD *)(v19 + 24);
    v47 = *(_QWORD *)(v19 + 48);
    v46 = *(_OWORD *)(v19 + 32);
    v48 = *(_QWORD *)(v19 + 56);
    v20 = *(_OWORD *)(v19 + 80);
    v49 = *(_OWORD *)(v19 + 64);
    v50 = v20;
    v54 = *(_QWORD *)(v19 + 144);
    v21 = *(_OWORD *)(v19 + 128);
    v22 = *(_OWORD *)(v19 + 96);
    v52 = *(_OWORD *)(v19 + 112);
    v53 = v21;
    v51 = v22;
    v55 = *(_QWORD *)(v19 + 152);
    v23 = *(_QWORD *)(v19 + 176);
    v56 = *(_OWORD *)(v19 + 160);
    v58 = *(_OWORD *)(v19 + 184);
    __p = *(_OWORD *)(v19 + 200);
    v24 = *(_QWORD *)(v19 + 216);
    v57 = v23;
    v60 = v24;
    *(_QWORD *)(v19 + 200) = 0;
    *(_QWORD *)(v19 + 208) = 0;
    *(_QWORD *)(v19 + 216) = 0;
    v25 = sub_223EFEEDC((uint64_t *)(a1 + 72), (uint64_t)&v43);
    v26 = (_OWORD *)(v18 + 16 * v17);
    if ((_QWORD)__p)
      operator delete((void *)__p);
    v28 = *(_OWORD **)(a1 + 160);
    v27 = *(_QWORD *)(a1 + 168);
    if ((unint64_t)v28 < v27)
    {
      *v28 = *v26;
      v29 = v28 + 1;
      goto LABEL_25;
    }
    v40 = v26;
    v41 = v25;
    v42 = v13;
    v30 = (_OWORD **)(a1 + 152);
    v31 = *(_OWORD **)(a1 + 152);
    v32 = v28 - v31;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      sub_22316E078();
    v34 = v27 - (_QWORD)v31;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      if (v35 >> 60)
        sub_223174E94();
      v36 = (char *)operator new(16 * v35);
      v30 = (_OWORD **)(a1 + 152);
    }
    else
    {
      v36 = 0;
    }
    v37 = &v36[16 * v32];
    v38 = &v36[16 * v35];
    *(_OWORD *)v37 = *v40;
    v29 = v37 + 16;
    if (v28 == v31)
    {
      v25 = v41;
      v13 = v42;
      *(_QWORD *)(a1 + 152) = v37;
      *(_QWORD *)(a1 + 160) = v29;
      *(_QWORD *)(a1 + 168) = v38;
      if (!v28)
      {
LABEL_25:
        *(_QWORD *)(a1 + 160) = v29;
        v39 = *(_QWORD *)(a1 + 200) + 88 * v13;
        *(_WORD *)(*(_QWORD *)(v39 + 32) + 2 * (*(_DWORD *)(v39 + 72) * v10 + *(_DWORD *)(v39 + 76) * v9)) = v25;
        if ((_DWORD)v6)
        {
          sub_223EFF9F4(a1, v10 - 1, v9, v6, v25, a5);
          sub_223EFFC90(a1, v10, v9 - 1, v6, v25, a4);
        }
        return;
      }
    }
    else
    {
      v13 = v42;
      do
      {
        *((_OWORD *)v37 - 1) = *(v28 - 1);
        v37 -= 16;
        --v28;
      }
      while (v28 != v31);
      v28 = *v30;
      *(_QWORD *)(a1 + 152) = v37;
      *(_QWORD *)(a1 + 160) = v29;
      *(_QWORD *)(a1 + 168) = v38;
      v25 = v41;
      if (!v28)
        goto LABEL_25;
    }
    operator delete(v28);
    goto LABEL_25;
  }
  while ((_DWORD)v6 != *(_DWORD *)(a1 + 52))
  {
    a4 = a4 >> 1;
    a5 = a5 >> 1;
    v6 = (v6 + 1);
    v14 = 2 * v9;
    sub_223EFE094(a1, 2 * v10, v14, a4, a5, v6);
    v9 = (2 * v9) | 1;
    sub_223EFFF2C(a1, 2 * v10, v9, a4, a5, v6);
    v10 = (2 * v10) | 1;
    sub_223F002F4(a1, v10, v14, a4, a5, v6);
    v15 = *(_QWORD *)(a1 + 176) + 88 * v6;
    if (*(_BYTE *)(*(_QWORD *)(v15 + 32) + *(_DWORD *)(v15 + 72) * v10 + *(_DWORD *)(v15 + 76) * v9) == 4)
    {
      v13 = v6;
      goto LABEL_6;
    }
  }
}

void sub_223F00A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223F00A68(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v12;
  float64x2_t v13;
  double v22;
  float64x2_t v23;
  unint64_t v24;
  float64x2_t v25;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float64x2_t v46;
  double v52;
  __int128 v54;
  double v55;
  int8x16_t v56;
  float64_t v57;
  int8x16_t v58;
  float64_t v59;
  int8x16_t v60;
  double v61;

  sub_22322BBD0((uint64_t)&v56);
  v9.f64[0] = v57;
  *(_QWORD *)&v10.f64[0] = v56.i64[0];
  _Q7.f64[0] = v59;
  v12.f64[0] = v61;
  v13.f64[0] = *(float64_t *)(a2 + 16);
  _Q2 = *(int64x2_t *)a2;
  __asm { FMLA            D16, D7, V2.D[1] }
  _D19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v56, *(double *)a2), *(float64x2_t *)&v58, *(float64x2_t *)a2, 1), *(float64x2_t *)&v60, *(double *)&v13).f64[1];
  __asm { FMLA            D17, D19, V1.D[1] }
  v22 = sqrt(_D17 + (_D16 + v61 * v13.f64[0]) * (_D16 + v61 * v13.f64[0]));
  if (v22 == 0.0 || v22 <= 0.00000001)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0x3FF0000000000000;
    v33 = 1.79769313e308;
  }
  else
  {
    *(_QWORD *)&v23.f64[0] = vextq_s8(v56, v56, 8uLL).u64[0];
    v24 = vextq_s8(v58, v58, 8uLL).u64[0];
    v25 = (float64x2_t)vextq_s8(v60, v60, 8uLL);
    v31 = (float64x2_t)vdupq_laneq_s64(_Q2, 1);
    *(_QWORD *)&_D19 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
    v8.f64[0] = 1.0 / v22;
    *(_QWORD *)&v27.f64[0] = v56.i64[0];
    v27.f64[1] = v23.f64[0];
    *(_QWORD *)&v28.f64[0] = v58.i64[0];
    *(_QWORD *)&v28.f64[1] = v24;
    *(_QWORD *)&v29.f64[0] = v60.i64[0];
    v29.f64[1] = v25.f64[0];
    _Q17 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmulq_n_f64(vmulq_n_f64(v27, v8.f64[0]), *(double *)_Q2.i64), v31, vmulq_n_f64(v28, v8.f64[0])), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13.f64[0], 0), vmulq_n_f64(v29, v8.f64[0]));
    v31.f64[0] = vmlad_n_f64(vmlad_n_f64(*(double *)_Q2.i64 * vmulq_f64(v9, v8).f64[0], _D19, vmulq_f64(_Q7, v8).f64[0]), v13.f64[0], vmulq_f64(v12, v8).f64[0]);
    v32 = vextq_s8(_Q17, _Q17, 8uLL).u64[0];
    v33 = 1.79769313e308;
    if (v8.f64[0] != 0.0 && v8.f64[0] > 0.00000001)
    {
      if (*(double *)_Q17.i64 != 0.0)
      {
        v34 = 0.0 - *(double *)_Q17.i64;
        if (*(double *)_Q17.i64 >= 0.0)
          v34 = *(double *)_Q17.i64;
        if (v34 > 0.00000001)
          goto LABEL_17;
      }
      v35 = *(double *)&_Q17.i64[1];
      if (*(double *)&_Q17.i64[1] != 0.0)
      {
        if (*(double *)&_Q17.i64[1] < 0.0)
          v35 = 0.0 - *(double *)&_Q17.i64[1];
        if (v35 > 0.00000001)
          goto LABEL_17;
      }
      if (v31.f64[0] == 0.0)
        goto LABEL_19;
      v36 = 0.0 - v31.f64[0];
      if (v31.f64[0] >= 0.0)
        v36 = v31.f64[0];
      if (v36 <= 0.00000001)
      {
LABEL_19:
        v33 = 1.79769313e308;
      }
      else
      {
LABEL_17:
        *(_QWORD *)&v37 = *(_OWORD *)&vdivq_f64(v31, v8);
        *(_QWORD *)&_Q28.f64[0] = _Q17.i64[0];
        *(_QWORD *)&_Q28.f64[1] = v32;
        _Q26 = vdivq_f64(_Q28, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8.f64[0], 0));
        _D29 = *(_QWORD *)(a1 + 8);
        __asm { FMLA            D11, D29, V26.D[1] }
        _D29 = *(_QWORD *)(a1 + 32);
        __asm { FMLA            D28, D29, V26.D[1] }
        _Q28.f64[0] = vmlad_n_f64(_Q28.f64[0], *(double *)(a1 + 40), v37);
        _D30 = *(_QWORD *)(a1 + 56);
        __asm
        {
          FMLA            D29, D30, V26.D[1]
          FMLA            D30, D28, V26.D[1]
          FMLA            D28, D19, V26.D[1]
        }
        _Q28.f64[0] = vmlad_n_f64(_Q28.f64[0], v13.f64[0], v37);
        v33 = a4 - (_Q28.f64[0] + _Q28.f64[0]) + vmlad_n_f64(_D30, vmlad_n_f64(_D29, *(double *)(a1 + 64), v37), v37);
      }
    }
    *(_QWORD *)&v10.f64[1] = v58.i64[0];
    *(_QWORD *)&v23.f64[1] = v24;
    v9.f64[1] = v59;
    *(float64_t *)a3 = v8.f64[0];
    v46.f64[0] = v8.f64[0];
    v46.f64[1] = v8.f64[0];
    _Q5 = vmulq_f64(v10, v46);
    v46.f64[0] = v8.f64[0];
    v46.f64[1] = v8.f64[0];
    _Q7 = vmulq_f64(v23, v46);
    _Q22.f64[0] = v8.f64[0];
    _Q22.f64[1] = v8.f64[0];
    _Q3 = vmulq_f64(v9, _Q22);
    __asm
    {
      FMLA            D22, D19, V5.D[1]
      FMLA            D5, D19, V7.D[1]
    }
    _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v13.f64[0], vmulq_f64(v25, v8).f64[0]);
    __asm { FMLA            D2, D19, V3.D[1] }
    v52 = vmlad_n_f64(_D2, v13.f64[0], vmulq_f64(v12, v8).f64[0]);
    __asm { FMLA            D0, D5, V17.D[1] }
    v13.f64[0] = _D0 + v52 * v31.f64[0];
    *(float64_t *)(a3 + 24) = v31.f64[0];
    *(_QWORD *)&v54 = _Q17.i64[0];
    *((_QWORD *)&v54 + 1) = v32;
    *(_OWORD *)(a3 + 8) = v54;
    if (v13.f64[0] != 1.0)
    {
      v55 = v13.f64[0] + -1.0;
      if (v13.f64[0] < 1.0)
        v55 = 1.0 - v13.f64[0];
      if (v55 > 0.00000001)
      {
        v13.f64[0] = sqrt(v13.f64[0]);
        _Q17.i64[1] = v32;
        *(float64x2_t *)(a3 + 8) = vdivq_f64((float64x2_t)_Q17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13.f64[0], 0));
        *(_QWORD *)(a3 + 24) = *(_OWORD *)&vdivq_f64(v31, v13);
      }
    }
  }
  *(double *)(a3 + 32) = v33;
}

void sub_223F00D6C()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223F00D80(uint64_t a1, int32x2_t *a2, float32x4_t *a3, uint64_t a4, uint64_t a5, double a6, float32x2_t a7)
{
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  unsigned __int32 v16;
  unsigned __int32 v17;
  unsigned __int32 v18;
  unsigned __int32 v20;
  unsigned __int32 v21;
  unsigned __int32 v22;
  unsigned __int32 v23;
  float32x4_t v24;
  float32x4_t v25;
  double v26;
  int8x16_t v27;
  int8x16_t v28;
  double v29;
  int8x16_t v30;
  double v31;
  int8x16_t v32;
  double v33;
  double v34;
  unsigned int v35;
  unsigned __int32 v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  double v41;
  float64x2_t v42;
  double v43;
  unsigned __int32 v44;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  double v50;
  unsigned int v51;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  unsigned __int32 v57;
  unsigned __int32 v58;
  unsigned __int32 v59;
  unsigned __int32 v60;
  unsigned __int32 v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  double v66;
  float64x2_t v67;
  double v68;
  float64x2_t v69;
  double v70;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v16 = a2[1].u32[0];
  v17 = a2[1].u32[1];
  v18 = a2->u32[1];
  _CF = v16 >= a2->i32[0];
  v20 = v16 - a2->i32[0];
  if (_CF)
    v21 = v20 + 1;
  else
    v21 = 0;
  _CF = v17 >= v18;
  v22 = v17 - v18;
  if (_CF)
    v23 = v22 + 1;
  else
    v23 = 0;
  *(_QWORD *)a1 = v23 * (unint64_t)v21;
  *(_QWORD *)(a1 + 8) = a5;
  *(double *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a2->i8;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v24 = *a3;
  v25 = a3[1];
  a7.i32[0] = a3[2].i32[0];
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)&v26 = *(_OWORD *)&vcvtq_f64_f32(a7);
  v27 = (int8x16_t)vcvt_hight_f64_f32(v25);
  v28 = (int8x16_t)vcvt_hight_f64_f32(v24);
  *(_QWORD *)&v29 = vextq_s8(v27, v27, 8uLL).u64[0];
  v30 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v25.f32);
  *(_QWORD *)&v31 = vextq_s8(v28, v28, 8uLL).u64[0];
  v32 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v24.f32);
  *(_QWORD *)&v33 = vextq_s8(v30, v30, 8uLL).u64[0];
  *(_QWORD *)&v34 = vextq_s8(v32, v32, 8uLL).u64[0];
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v35 = a2->u32[1];
  v36 = a2[1].u32[1];
  if (v35 == v36 + 1)
  {
    v37.f64[0] = 0.0;
    v12.f64[0] = 0.0;
    v11.f64[0] = 0.0;
    v38.f64[0] = 0.0;
    v39 = 0.0;
    v10.f64[0] = 0.0;
    v40.f64[0] = 0.0;
    v41 = 0.0;
    v9.f64[0] = 0.0;
    v42.f64[0] = 0.0;
    v43 = 0.0;
    v44 = a2->u32[1];
    v13.f64[0] = 0.0;
  }
  else
  {
    v42.f64[0] = 0.0;
    v43 = 0.0;
    v13.f64[0] = 0.0;
    v37.f64[0] = 0.0;
    v12.f64[0] = 0.0;
    v11.f64[0] = 0.0;
    v38.f64[0] = 0.0;
    v39 = 0.0;
    v10.f64[0] = 0.0;
    v40.f64[0] = 0.0;
    v41 = 0.0;
    v9.f64[0] = 0.0;
    do
    {
      v46 = a2->i32[0];
      v47 = a2[1].i32[0] + 1;
      if (a2->i32[0] != v47)
      {
        v48 = *(_DWORD *)(a4 + 16);
        v49 = *(_QWORD *)a4 + 2 * *(_DWORD *)(a4 + 20) * v35;
        v50 = (double)v35;
        v51 = v48 * v46;
        do
        {
          LOWORD(_Q30.f64[0]) = *(_WORD *)(v49 + 2 * v51);
          __asm { FCVT            D30, H30 }
          v54.f64[0] = (double)v46;
          v55 = (double)v46 * _Q30.f64[0];
          v54.f64[1] = (double)v35;
          v56 = vmulq_n_f64(v54, _Q30.f64[0]);
          v7.f64[0] = _Q30.f64[0] * v55;
          v8.f64[0] = _Q30.f64[0] * (v50 * _Q30.f64[0]);
          v37.f64[1] = v12.f64[0];
          v12.f64[0] = _Q30.f64[0] * _Q30.f64[0];
          v38.f64[1] = v39;
          v40.f64[1] = v41;
          v37 = vmlaq_n_f64(v37, v56, v55);
          v11 = vaddq_f64(v11, v7);
          v38 = vmlaq_n_f64(v38, v56, v50 * _Q30.f64[0]);
          v10 = vaddq_f64(v10, v8);
          v40 = vmlaq_n_f64(v40, v56, _Q30.f64[0]);
          v9 = vaddq_f64(v9, v12);
          v39 = v38.f64[1];
          v12 = (float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL);
          *(_QWORD *)&v41 = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
          *(float64x2_t *)(a1 + 80) = v37;
          *(float64_t *)(a1 + 96) = v11.f64[0];
          *(float64x2_t *)(a1 + 104) = v38;
          *(float64_t *)(a1 + 120) = v10.f64[0];
          *(float64x2_t *)(a1 + 128) = v40;
          *(float64_t *)(a1 + 144) = v9.f64[0];
          v42.f64[1] = v43;
          v42 = vaddq_f64(v42, v56);
          *(_QWORD *)&v43 = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
          v13 = vaddq_f64(v13, _Q30);
          *(float64_t *)(a1 + 176) = v13.f64[0];
          *(float64x2_t *)(a1 + 160) = v42;
          ++v46;
          v51 += v48;
        }
        while (v47 != v46);
      }
    }
    while (v35++ != v36);
    v36 = a2[1].u32[1];
    v44 = a2->u32[1];
    v35 = v36 + 1;
  }
  v57 = a2[1].u32[0];
  _CF = v57 >= a2->i32[0];
  v58 = v57 - a2->i32[0];
  if (_CF)
    v59 = v58 + 1;
  else
    v59 = 0;
  v60 = v35 - v44;
  if (v36 >= v44)
    v61 = v60;
  else
    v61 = 0;
  *(_QWORD *)&v62.f64[0] = v27.i64[0];
  v62.f64[1] = v29;
  *(_QWORD *)&v63.f64[0] = v32.i64[0];
  v63.f64[1] = v34;
  v64.f64[0] = v31;
  *(_QWORD *)&v64.f64[1] = v30.i64[0];
  *(double *)(a1 + 176) = *(double *)v28.i64 * v42.f64[0] + v33 * v43 + v26 * v13.f64[0];
  *(float64x2_t *)(a1 + 160) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, v42.f64[0]), v64, v43), v62, v13.f64[0]);
  v65 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, v37.f64[0]), v64, v12.f64[0]), v62, v11.f64[0]);
  v66 = *(double *)v28.i64 * v37.f64[0] + v33 * v12.f64[0] + v26 * v11.f64[0];
  v67 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, v38.f64[0]), v64, v39), v62, v10.f64[0]);
  v68 = *(double *)v28.i64 * v38.f64[0] + v33 * v39 + v26 * v10.f64[0];
  v69 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, v40.f64[0]), v64, v41), v62, v9.f64[0]);
  v70 = *(double *)v28.i64 * v40.f64[0] + v33 * v41 + v26 * v9.f64[0];
  *(double *)(a1 + 96) = v66 * *(double *)v32.i64 + v68 * v31 + v70 * *(double *)v27.i64;
  *(float64x2_t *)(a1 + 80) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v32.i64), v67, v31), v69, *(double *)v27.i64);
  *(double *)(a1 + 120) = v66 * v34 + v68 * *(double *)v30.i64 + v70 * v29;
  *(float64x2_t *)(a1 + 104) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v65, v34), v67, *(double *)v30.i64), v69, v29);
  *(double *)(a1 + 144) = v66 * *(double *)v28.i64 + v68 * v33 + v70 * v26;
  *(double *)(a1 + 152) = (double)(v59 * (unint64_t)v61);
  *(float64x2_t *)(a1 + 128) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v28.i64), v67, v33), v69, v26);
  *(float64x2_t *)(a1 + 184) = vcvtq_f64_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(a2[1], *a2)), (float32x2_t)0x3F0000003F000000));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a5 + 16))(&v72, a5, a1 + 80);
  *(_QWORD *)(a1 + 24) = v72;
  *(_OWORD *)(a1 + 32) = v73;
  *(_QWORD *)(a1 + 48) = v74;
  *(_QWORD *)(a1 + 56) = v75;
  return a1;
}

void sub_223F01108(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 208) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F01128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, float64x2_t a10, double a11, double a12, float64x2_t a13)
{
  uint64_t v14;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)a1 = *(_QWORD *)a3 + *(_QWORD *)a2 + *(_QWORD *)a4 + *(_QWORD *)a5;
  *(_QWORD *)(a1 + 8) = a6;
  *(double *)(a1 + 16) = a7;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 64) = xmmword_2245F5400;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v14 = *(_QWORD *)(a5 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  __asm { FMOV            V1.2D, #0.25 }
  *(float64x2_t *)(a1 + 184) = vmulq_f64(vaddq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(a2 + 184), *(float64x2_t *)(a3 + 184)), *(float64x2_t *)(a4 + 184)), *(float64x2_t *)(a5 + 184)), _Q1);
  *(double *)(a1 + 152) = *(double *)(a2 + 152) + *(double *)(a3 + 152) + *(double *)(a4 + 152) + *(double *)(a5 + 152);
  _Q1.f64[0] = *(float64_t *)(a2 + 176);
  a10.f64[0] = *(float64_t *)(a3 + 176);
  v20 = vaddq_f64(_Q1, a10);
  a10.f64[0] = *(float64_t *)(a4 + 176);
  v21 = vaddq_f64(v20, a10);
  a10.f64[0] = *(float64_t *)(a5 + 176);
  v22 = vaddq_f64(v21, a10);
  *(float64x2_t *)(a1 + 160) = vaddq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(a2 + 160), *(float64x2_t *)(a3 + 160)), *(float64x2_t *)(a4 + 160)), *(float64x2_t *)(a5 + 160));
  *(float64_t *)(a1 + 176) = v22.f64[0];
  v22.f64[0] = *(float64_t *)(a2 + 144);
  a13.f64[0] = *(float64_t *)(a3 + 144);
  v23 = vaddq_f64(v22, a13);
  a13.f64[0] = *(float64_t *)(a4 + 144);
  v24 = vaddq_f64(v23, a13);
  a13.f64[0] = *(float64_t *)(a5 + 144);
  v25 = vaddq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(a2 + 80), *(float64x2_t *)(a3 + 80)), *(float64x2_t *)(a4 + 80)), *(float64x2_t *)(a5 + 80));
  v26 = vaddq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(a2 + 128), *(float64x2_t *)(a3 + 128)), *(float64x2_t *)(a4 + 128)), *(float64x2_t *)(a5 + 128));
  v27 = vaddq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(a2 + 112), *(float64x2_t *)(a3 + 112)), *(float64x2_t *)(a4 + 112)), *(float64x2_t *)(a5 + 112));
  *(float64x2_t *)(a1 + 96) = vaddq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(a2 + 96), *(float64x2_t *)(a3 + 96)), *(float64x2_t *)(a4 + 96)), *(float64x2_t *)(a5 + 96));
  *(float64x2_t *)(a1 + 112) = v27;
  *(float64x2_t *)(a1 + 128) = v26;
  *(_QWORD *)(a1 + 144) = *(_OWORD *)&vaddq_f64(v24, a13);
  *(float64x2_t *)(a1 + 80) = v25;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(&v29, a6, a1 + 80, a1 + 160);
  *(_QWORD *)(a1 + 24) = v29;
  *(_OWORD *)(a1 + 32) = v30;
  *(_QWORD *)(a1 + 48) = v31;
  *(_QWORD *)(a1 + 56) = v32;
  return a1;
}

void sub_223F012E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 208) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223F01308(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int8x16_t v4;
  uint64_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v2 = *(uint64_t **)(a1 + 56);
      v3 = *(uint64_t **)(a1 + 64);
      if (v2 == v3)
      {
        v4 = 0uLL;
      }
      else
      {
        v4.i64[0] = *v2;
        v4.i64[1] = *v2;
        do
        {
          v5 = *v2++;
          v6.i64[0] = v5;
          v7.i64[0] = v5;
          v7.i64[1] = v5;
          v8.i64[0] = v4.i64[0];
          v8.i64[1] = v5;
          v6.i64[1] = vextq_s8(v4, v4, 8uLL).u64[0];
          v4 = vbslq_s8((int8x16_t)vcgtq_f32(v8, v6), v7, v4);
        }
        while (v2 != v3);
      }
      *(int8x16_t *)a1 = v4;
    }
    if (*(_BYTE *)(a1 + 52))
    {
      sub_22369E650(*(_QWORD *)(a1 + 64), *(float32x2_t **)(a1 + 56), 0, 0, &v12);
      v9 = *(unsigned __int8 *)(a1 + 52);
      *(_QWORD *)(a1 + 20) = v12;
      v10 = v13;
      v11 = v14;
      if (!v9)
        *(_BYTE *)(a1 + 52) = 1;
      *(_OWORD *)(a1 + 28) = v10;
      *(_QWORD *)(a1 + 44) = v11;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    if (*(_BYTE *)(a1 + 52))
      *(_BYTE *)(a1 + 52) = 0;
  }
}

uint64_t sub_223F01410(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void sub_223F01458(char **a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  unint64_t v45;
  int8x8_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  char *v66;
  _QWORD *v67;
  unint64_t v68;
  int8x8_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  _QWORD **v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v77;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char **v88;
  char *v89;
  char *v90;
  char *v91;
  void *__p;
  char *v93;
  char *v94;
  char **p_p;
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 10;
  __p = a3;
  v7 = (char *)sub_2238F2290((uint64_t)(a2 + 10), (uint64_t)a3, (uint64_t)&unk_2245BA939, (_OWORD **)&__p)[6];
  __p = a3;
  sub_2238F2290((uint64_t)v6, (uint64_t)a3, (uint64_t)&unk_2245BA939, (_OWORD **)&__p);
  if (v7)
  {
    v8 = 0;
    v9 = -1;
    v10 = v7;
    do
    {
      v10 = *(char **)v10;
      ++v9;
      v8 += 16;
    }
    while (v10);
    if (v9 >= 0xFFFFFFFFFFFFFFFLL)
      sub_22316E078();
    v11 = (char *)operator new(v8);
    v12 = v11;
    v13 = 0;
    do
    {
      *(_OWORD *)&v11[v13] = *((_OWORD *)v7 + 1);
      v7 = *(char **)v7;
      v13 += 16;
    }
    while (v7);
    v89 = &v11[v8];
    v7 = &v11[v13];
  }
  else
  {
    v89 = 0;
    v12 = 0;
  }
  v14 = a2 + 5;
  __p = a3;
  v15 = sub_223F05CF0(a2 + 5, (uint64_t)a3, (_OWORD **)&__p);
  v16 = (uint64_t *)v15[6];
  v17 = v15[7];
  __p = 0;
  v93 = 0;
  v94 = 0;
  v88 = a1;
  if (!v17)
  {
    v19 = 0;
    v18 = 0;
    p_p = (char **)&__p;
    v20 = 0;
    if (!v16)
      goto LABEL_16;
    do
    {
LABEL_14:
      v96 = *((_OWORD *)v16 + 1);
      sub_2232E9564(&p_p, &v96);
      v16 = (uint64_t *)*v16;
    }
    while (v16);
    v20 = (char *)__p;
    v18 = v93;
    v19 = v94;
    goto LABEL_16;
  }
  if (v17 >> 60)
    sub_22316E078();
  v18 = (char *)operator new(16 * v17);
  v19 = &v18[16 * v17];
  __p = v18;
  v93 = v18;
  v94 = v19;
  p_p = (char **)&__p;
  v20 = v18;
  if (v16)
    goto LABEL_14;
LABEL_16:
  v90 = v19;
  v91 = v20;
  v21 = sub_22456636C((unsigned __int8 *)a3);
  v22 = (int8x8_t)a2[11];
  if (v22)
  {
    v23 = (uint8x8_t)vcnt_s8(v22);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      v24 = v21;
      if (v21 >= *(_QWORD *)&v22)
        v24 = v21 % *(_QWORD *)&v22;
    }
    else
    {
      v24 = (*(_QWORD *)&v22 - 1) & v21;
    }
    v25 = *v6;
    v26 = *(uint64_t ***)(*v6 + 8 * v24);
    if (v26)
    {
      v27 = *v26;
      if (*v26)
      {
        v28 = *(_QWORD *)&v22 - 1;
        if (v23.u32[0] < 2uLL)
        {
          while (1)
          {
            v30 = v27[1];
            if (v30 == v21)
            {
              if (v27[2] == *a3 && v27[3] == a3[1])
                goto LABEL_43;
            }
            else if ((v30 & v28) != v24)
            {
              goto LABEL_74;
            }
            v27 = (uint64_t *)*v27;
            if (!v27)
              goto LABEL_74;
          }
        }
        do
        {
          v32 = v27[1];
          if (v32 == v21)
          {
            if (v27[2] == *a3 && v27[3] == a3[1])
            {
LABEL_43:
              if (v23.u32[0] > 1uLL)
              {
                if (v21 >= *(_QWORD *)&v22)
                  v21 %= *(_QWORD *)&v22;
              }
              else
              {
                v21 &= v28;
              }
              v33 = *(uint64_t **)(v25 + 8 * v21);
              do
              {
                v34 = v33;
                v33 = (uint64_t *)*v33;
              }
              while (v33 != v27);
              if (v34 == a2 + 12)
                goto LABEL_60;
              v35 = v34[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v35 >= *(_QWORD *)&v22)
                  v35 %= *(_QWORD *)&v22;
              }
              else
              {
                v35 &= v28;
              }
              if (v35 != v21)
              {
LABEL_60:
                if (!*v27)
                  goto LABEL_61;
                v36 = *(_QWORD *)(*v27 + 8);
                if (v23.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&v22)
                    v36 %= *(_QWORD *)&v22;
                }
                else
                {
                  v36 &= v28;
                }
                if (v36 != v21)
LABEL_61:
                  *(_QWORD *)(v25 + 8 * v21) = 0;
              }
              v37 = *v27;
              if (*v27)
              {
                v38 = *(_QWORD *)(v37 + 8);
                if (v23.u32[0] > 1uLL)
                {
                  if (v38 >= *(_QWORD *)&v22)
                    v38 %= *(_QWORD *)&v22;
                }
                else
                {
                  v38 &= v28;
                }
                if (v38 != v21)
                {
                  *(_QWORD *)(*v6 + 8 * v38) = v34;
                  v37 = *v27;
                }
              }
              *v34 = v37;
              *v27 = 0;
              --a2[13];
              v39 = (_QWORD *)v27[6];
              if (v39)
              {
                do
                {
                  v40 = (_QWORD *)*v39;
                  operator delete(v39);
                  v39 = v40;
                }
                while (v40);
              }
              v41 = (void *)v27[4];
              v27[4] = 0;
              if (v41)
                operator delete(v41);
              operator delete(v27);
              break;
            }
          }
          else
          {
            if (v32 >= *(_QWORD *)&v22)
              v32 %= *(_QWORD *)&v22;
            if (v32 != v24)
              break;
          }
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
    }
  }
LABEL_74:
  while (v20 != v18)
  {
    __p = v20;
    v42 = sub_2238F2290((uint64_t)v6, (uint64_t)v20, (uint64_t)&unk_2245BA939, (_OWORD **)&__p) + 4;
    v43 = sub_22342DA5C(v42, (uint64_t)a3);
    if (v43)
    {
      sub_2231AFBB8(v42, v43, (uint64_t)&__p);
      v44 = __p;
      __p = 0;
      if (v44)
        operator delete(v44);
    }
    v20 += 16;
  }
  v45 = sub_22456636C((unsigned __int8 *)a3);
  v46 = (int8x8_t)a2[6];
  if (v46)
  {
    v47 = (uint8x8_t)vcnt_s8(v46);
    v47.i16[0] = vaddlv_u8(v47);
    if (v47.u32[0] > 1uLL)
    {
      v48 = v45;
      if (v45 >= *(_QWORD *)&v46)
        v48 = v45 % *(_QWORD *)&v46;
    }
    else
    {
      v48 = (*(_QWORD *)&v46 - 1) & v45;
    }
    v49 = *v14;
    v50 = *(uint64_t ***)(*v14 + 8 * v48);
    if (v50)
    {
      v51 = *v50;
      if (*v50)
      {
        v52 = *(_QWORD *)&v46 - 1;
        if (v47.u32[0] < 2uLL)
        {
          while (1)
          {
            v54 = v51[1];
            if (v54 == v45)
            {
              if (v51[2] == *a3 && v51[3] == a3[1])
                goto LABEL_107;
            }
            else if ((v54 & v52) != v48)
            {
              goto LABEL_138;
            }
            v51 = (uint64_t *)*v51;
            if (!v51)
              goto LABEL_138;
          }
        }
        do
        {
          v56 = v51[1];
          if (v56 == v45)
          {
            if (v51[2] == *a3 && v51[3] == a3[1])
            {
LABEL_107:
              if (v47.u32[0] > 1uLL)
              {
                if (v45 >= *(_QWORD *)&v46)
                  v45 %= *(_QWORD *)&v46;
              }
              else
              {
                v45 &= v52;
              }
              v57 = *(uint64_t **)(v49 + 8 * v45);
              do
              {
                v58 = v57;
                v57 = (uint64_t *)*v57;
              }
              while (v57 != v51);
              if (v58 == a2 + 7)
                goto LABEL_124;
              v59 = v58[1];
              if (v47.u32[0] > 1uLL)
              {
                if (v59 >= *(_QWORD *)&v46)
                  v59 %= *(_QWORD *)&v46;
              }
              else
              {
                v59 &= v52;
              }
              if (v59 != v45)
              {
LABEL_124:
                if (!*v51)
                  goto LABEL_125;
                v60 = *(_QWORD *)(*v51 + 8);
                if (v47.u32[0] > 1uLL)
                {
                  if (v60 >= *(_QWORD *)&v46)
                    v60 %= *(_QWORD *)&v46;
                }
                else
                {
                  v60 &= v52;
                }
                if (v60 != v45)
LABEL_125:
                  *(_QWORD *)(v49 + 8 * v45) = 0;
              }
              v61 = *v51;
              if (*v51)
              {
                v62 = *(_QWORD *)(v61 + 8);
                if (v47.u32[0] > 1uLL)
                {
                  if (v62 >= *(_QWORD *)&v46)
                    v62 %= *(_QWORD *)&v46;
                }
                else
                {
                  v62 &= v52;
                }
                if (v62 != v45)
                {
                  *(_QWORD *)(*v14 + 8 * v62) = v58;
                  v61 = *v51;
                }
              }
              *v58 = v61;
              *v51 = 0;
              --a2[8];
              v63 = (_QWORD *)v51[6];
              if (v63)
              {
                do
                {
                  v64 = (_QWORD *)*v63;
                  operator delete(v63);
                  v63 = v64;
                }
                while (v64);
              }
              v65 = (void *)v51[4];
              v51[4] = 0;
              if (v65)
                operator delete(v65);
              operator delete(v51);
              break;
            }
          }
          else
          {
            if (v56 >= *(_QWORD *)&v46)
              v56 %= *(_QWORD *)&v46;
            if (v56 != v48)
              break;
          }
          v51 = (uint64_t *)*v51;
        }
        while (v51);
      }
    }
  }
LABEL_138:
  if (v12 != v7)
  {
    v66 = v12;
    do
    {
      __p = v66;
      v67 = sub_223F05CF0(v14, (uint64_t)v66, (_OWORD **)&__p);
      v68 = sub_22456636C((unsigned __int8 *)a3);
      v69 = (int8x8_t)v67[5];
      if (v69)
      {
        v70 = v68;
        v71 = (uint8x8_t)vcnt_s8(v69);
        v71.i16[0] = vaddlv_u8(v71);
        if (v71.u32[0] > 1uLL)
        {
          v72 = v68;
          if (v68 >= *(_QWORD *)&v69)
            v72 = v68 % *(_QWORD *)&v69;
        }
        else
        {
          v72 = (*(_QWORD *)&v69 - 1) & v68;
        }
        v73 = *(_QWORD ***)(v67[4] + 8 * v72);
        if (v73)
        {
          v74 = *v73;
          if (*v73)
          {
            v75 = *(_QWORD *)&v69 - 1;
            if (v71.u32[0] < 2uLL)
            {
              while (1)
              {
                v77 = v74[1];
                if (v77 == v70)
                {
                  if (v74[2] == *a3 && v74[3] == a3[1])
                    goto LABEL_169;
                }
                else if ((v77 & v75) != v72)
                {
                  goto LABEL_141;
                }
                v74 = (_QWORD *)*v74;
                if (!v74)
                  goto LABEL_141;
              }
            }
            do
            {
              v79 = v74[1];
              if (v79 == v70)
              {
                if (v74[2] == *a3 && v74[3] == a3[1])
                {
LABEL_169:
                  v80 = v74[1];
                  if (v71.u32[0] > 1uLL)
                  {
                    if (v80 >= *(_QWORD *)&v69)
                      v80 %= *(_QWORD *)&v69;
                  }
                  else
                  {
                    v80 &= v75;
                  }
                  v81 = v67[4];
                  v82 = *(_QWORD **)(v81 + 8 * v80);
                  do
                  {
                    v83 = v82;
                    v82 = (_QWORD *)*v82;
                  }
                  while (v82 != v74);
                  if (v83 == v67 + 6)
                    goto LABEL_186;
                  v84 = v83[1];
                  if (v71.u32[0] > 1uLL)
                  {
                    if (v84 >= *(_QWORD *)&v69)
                      v84 %= *(_QWORD *)&v69;
                  }
                  else
                  {
                    v84 &= v75;
                  }
                  if (v84 != v80)
                  {
LABEL_186:
                    if (!*v74)
                      goto LABEL_187;
                    v85 = *(_QWORD *)(*v74 + 8);
                    if (v71.u32[0] > 1uLL)
                    {
                      if (v85 >= *(_QWORD *)&v69)
                        v85 %= *(_QWORD *)&v69;
                    }
                    else
                    {
                      v85 &= v75;
                    }
                    if (v85 != v80)
LABEL_187:
                      *(_QWORD *)(v81 + 8 * v80) = 0;
                  }
                  v86 = *v74;
                  if (*v74)
                  {
                    v87 = *(_QWORD *)(v86 + 8);
                    if (v71.u32[0] > 1uLL)
                    {
                      if (v87 >= *(_QWORD *)&v69)
                        v87 %= *(_QWORD *)&v69;
                    }
                    else
                    {
                      v87 &= v75;
                    }
                    if (v87 != v80)
                    {
                      *(_QWORD *)(v67[4] + 8 * v87) = v83;
                      v86 = *v74;
                    }
                  }
                  *v83 = v86;
                  *v74 = 0;
                  --v67[7];
                  operator delete(v74);
                  break;
                }
              }
              else
              {
                if (v79 >= *(_QWORD *)&v69)
                  v79 %= *(_QWORD *)&v69;
                if (v79 != v72)
                  break;
              }
              v74 = (_QWORD *)*v74;
            }
            while (v74);
          }
        }
      }
LABEL_141:
      v66 += 16;
    }
    while (v66 != v7);
  }
  *v88 = v12;
  v88[1] = v7;
  v88[2] = v89;
  v88[3] = v91;
  v88[4] = v18;
  v88[5] = v90;
}

void sub_223F01D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  if (!v18)
    _Unwind_Resume(exception_object);
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_223F01D98(uint64_t a1, float **a2, uint64_t a3, float32x2_t a4, float32x2_t a5, float a6, float a7, float a8)
{
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int8x16_t v15;
  void *v16;
  uint64_t v17;
  _OWORD *v18;
  size_t v19;
  char *v20;
  void *v21;
  int64_t v22;
  _OWORD *v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  float32x2_t *v27;
  unint64_t v28;
  float32x2_t v29;
  float v30;
  float32x2_t *v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float v36;
  float32x2_t v37;
  float v38;
  double v39;
  double v40;
  double v41;
  float v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float32x2_t v46;
  unint64_t v47;
  double v48;
  int8x16_t v49;
  _OWORD *v50;
  unint64_t v51;
  const float *v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  unint64_t v62;
  float32x2_t *v63;
  float32x2_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  float32x2_t v68;
  unint64_t v69;
  double v70;
  int8x16_t v71;
  _OWORD *v72;
  unint64_t v73;
  const float *v74;
  int8x16_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  unint64_t v84;
  float32x2_t *v85;
  float32x2_t v86;
  _BOOL8 v87;
  const void **v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  char *v92;
  size_t v93;
  _DWORD v94[2];
  _OWORD *v95;
  char *v96;
  char *v97;
  _OWORD *v98;
  char *v99;
  char *v100;
  void *v101;
  _BYTE *v102;
  void *__p;
  _BYTE *v104;
  char v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x4x2_t v108;
  float32x4x2_t v109;

  v12 = vsub_f32(a5, a4);
  v13 = (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1);
  v13.f32[0] = sqrtf(vmla_lane_f32(vmul_f32(v12, v12), v13, v12, 1).f32[0]);
  v14 = vdiv_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 0));
  v106 = vadd_f32(vmul_n_f32(v14, -a6), a4);
  v107 = vadd_f32(vmul_n_f32(v14, a6), a5);
  sub_223FBC4C4(a2, &v106, &v101, 0.000001);
  if (!v105)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v16 = v101;
  v17 = v102 - (_BYTE *)v101;
  if (v102 == v101)
  {
    v18 = 0;
    v20 = 0;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v21 = __p;
    v22 = v104 - (_BYTE *)__p;
    if (v104 != __p)
      goto LABEL_5;
  }
  else
  {
    if (v17 < 0)
      sub_22316E078();
    v18 = operator new(v102 - (_BYTE *)v101);
    v95 = v18;
    v97 = (char *)v18 + 8 * (v17 >> 3);
    v19 = v17 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v18, v16, v19);
    v20 = (char *)v18 + v19;
    v96 = (char *)v18 + v19;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v21 = __p;
    v22 = v104 - (_BYTE *)__p;
    if (v104 != __p)
    {
LABEL_5:
      if (v22 < 0)
        sub_22316E078();
      v23 = operator new(v22);
      v98 = v23;
      v100 = (char *)v23 + 8 * (v22 >> 3);
      v24 = v22 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v23, v21, v24);
      v25 = (char *)v23 + v24;
      v99 = (char *)v23 + v24;
      if (*(_BYTE *)(a3 + 24))
        goto LABEL_7;
LABEL_22:
      v43 = v20 - (char *)v18;
      v33 = 0.0;
      v32 = 0.0;
      if ((unint64_t)(v20 - (char *)v18) < 0x18)
        goto LABEL_36;
      v44 = v43 & 0xFFFFFFFFFFFFFFF8;
      if ((unint64_t)(v43 >> 3) <= 1)
        v45 = 1;
      else
        v45 = v43 >> 3;
      v46 = *(float32x2_t *)((char *)v18 + v44 - 8);
      if (v45 >= 8)
      {
        v15.i64[1] = *(_QWORD *)((char *)v18 + v44 - 8);
        v47 = v45 & 0xFFFFFFFFFFFFFFF8;
        v49 = (int8x16_t)vdupq_lane_s32((int32x2_t)v46, 0);
        v50 = v18 + 2;
        v48 = 0.0;
        v51 = v45 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v52 = (const float *)(v50 - 2);
          v108 = vld2q_f32(v52);
          v54 = *(int32x4_t *)v50;
          v53 = *((int8x16_t *)v50 + 1);
          v50 += 4;
          v55 = (int8x16_t)vuzp1q_s32(v54, (int32x4_t)v53);
          v56 = (int8x16_t)vuzp2q_s32(v54, (int32x4_t)v53);
          v57 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8(v49, (int8x16_t)v108.val[0], 0xCuLL), v108.val[0]), vsubq_f32(v108.val[1], (float32x4_t)vextq_s8(v15, (int8x16_t)v108.val[1], 0xCuLL)));
          v58 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v108.val[0], v55, 0xCuLL), (float32x4_t)v55), vsubq_f32((float32x4_t)v56, (float32x4_t)vextq_s8((int8x16_t)v108.val[1], v56, 0xCuLL)));
          v108.val[0] = (float32x4_t)vcvt_hight_f64_f32(v57);
          v59 = vcvtq_f64_f32(*(float32x2_t *)v57.f32);
          v60 = vcvt_hight_f64_f32(v58);
          v61 = vcvtq_f64_f32(*(float32x2_t *)v58.f32);
          v48 = v48
              + v59.f64[0]
              + v59.f64[1]
              + *(double *)v108.val[0].i64
              + *(double *)&v108.val[0].i64[1]
              + v61.f64[0]
              + v61.f64[1]
              + v60.f64[0]
              + v60.f64[1];
          v15 = v56;
          v49 = v55;
          v51 -= 8;
        }
        while (v51);
        if (v45 == v47)
          goto LABEL_35;
        v46 = (float32x2_t)vextq_s8(v53, v53, 8uLL).u64[0];
      }
      else
      {
        v47 = 0;
        v48 = 0.0;
      }
      v62 = v45 - v47;
      v63 = (float32x2_t *)v18 + v47;
      do
      {
        v64 = *v63++;
        *(float32x2_t *)v15.i8 = v64;
        v48 = v48 + vmul_lane_f32(vadd_f32(v64, v46), vsub_f32(v64, v46), 1).f32[0];
        v46 = v64;
        --v62;
      }
      while (v62);
LABEL_35:
      v32 = v48 * 0.5;
LABEL_36:
      v65 = v25 - (char *)v23;
      if ((unint64_t)v65 < 0x18)
        goto LABEL_49;
      v66 = v65 & 0xFFFFFFFFFFFFFFF8;
      if ((unint64_t)(v65 >> 3) <= 1)
        v67 = 1;
      else
        v67 = v65 >> 3;
      v68 = *(float32x2_t *)((char *)v23 + v66 - 8);
      if (v67 >= 8)
      {
        v15.i64[1] = *(_QWORD *)((char *)v23 + v66 - 8);
        v69 = v67 & 0xFFFFFFFFFFFFFFF8;
        v71 = (int8x16_t)vdupq_lane_s32((int32x2_t)v68, 0);
        v72 = v23 + 2;
        v70 = 0.0;
        v73 = v67 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v74 = (const float *)(v72 - 2);
          v109 = vld2q_f32(v74);
          v76 = *(int32x4_t *)v72;
          v75 = *((int8x16_t *)v72 + 1);
          v72 += 4;
          v77 = (int8x16_t)vuzp1q_s32(v76, (int32x4_t)v75);
          v78 = (int8x16_t)vuzp2q_s32(v76, (int32x4_t)v75);
          v79 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8(v71, (int8x16_t)v109.val[0], 0xCuLL), v109.val[0]), vsubq_f32(v109.val[1], (float32x4_t)vextq_s8(v15, (int8x16_t)v109.val[1], 0xCuLL)));
          v80 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v109.val[0], v77, 0xCuLL), (float32x4_t)v77), vsubq_f32((float32x4_t)v78, (float32x4_t)vextq_s8((int8x16_t)v109.val[1], v78, 0xCuLL)));
          v109.val[0] = (float32x4_t)vcvt_hight_f64_f32(v79);
          v81 = vcvtq_f64_f32(*(float32x2_t *)v79.f32);
          v82 = vcvt_hight_f64_f32(v80);
          v83 = vcvtq_f64_f32(*(float32x2_t *)v80.f32);
          v70 = v70
              + v81.f64[0]
              + v81.f64[1]
              + *(double *)v109.val[0].i64
              + *(double *)&v109.val[0].i64[1]
              + v83.f64[0]
              + v83.f64[1]
              + v82.f64[0]
              + v82.f64[1];
          v15 = v78;
          v71 = v77;
          v73 -= 8;
        }
        while (v73);
        if (v67 == v69)
          goto LABEL_48;
        v68 = (float32x2_t)vextq_s8(v75, v75, 8uLL).u64[0];
      }
      else
      {
        v69 = 0;
        v70 = 0.0;
      }
      v84 = v67 - v69;
      v85 = (float32x2_t *)v23 + v69;
      do
      {
        v86 = *v85++;
        v70 = v70 + vmul_lane_f32(vadd_f32(v86, v68), vsub_f32(v86, v68), 1).f32[0];
        v68 = v86;
        --v84;
      }
      while (v84);
LABEL_48:
      v33 = v70 * 0.5;
      goto LABEL_49;
    }
  }
  v23 = 0;
  v25 = 0;
  if (!*(_BYTE *)(a3 + 24))
    goto LABEL_22;
LABEL_7:
  v27 = *(float32x2_t **)a3;
  v26 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v26)
  {
    v32 = 0.0;
    v33 = 0.0;
  }
  else
  {
    v28 = (v26 - (uint64_t)v27) >> 4;
    v29 = vsub_f32(v107, v106);
    v30 = sqrtf(vmla_lane_f32(vmul_f32(v29, v29), (float32x2_t)vdup_lane_s32((int32x2_t)v29, 1), v29, 1).f32[0]);
    if (v28 <= 1)
      v28 = 1;
    v31 = v27 + 1;
    v32 = 0.0;
    v33 = 0.0;
    do
    {
      v34 = v31[-1];
      v35 = vmul_f32(v29, (float32x2_t)vrev64_s32((int32x2_t)vadd_f32(v106, vmul_f32(vadd_f32(v34, *v31), (float32x2_t)0xBF000000BF000000))));
      v36 = vsub_f32(v35, (float32x2_t)vdup_lane_s32((int32x2_t)v35, 1)).f32[0] / v30;
      v37 = vsub_f32(*v31, v34);
      LODWORD(v38) = vmul_lane_f32(v37, v37, 1).u32[0];
      v39 = fabsf(v36);
      v40 = v37.f32[0];
      v41 = v37.f32[0] * 0.5;
      if (v41 <= v39)
      {
        if (v36 >= 0.0)
          v33 = v33 + v38;
        else
          v32 = v32 + v38;
      }
      else
      {
        v42 = (v41 - v39) * v40;
        if (v36 >= 0.0)
        {
          v33 = v33 + (float)(v38 - v42);
          v32 = v32 + v42;
        }
        else
        {
          v33 = v33 + v42;
          v32 = v32 + (float)(v38 - v42);
        }
      }
      v31 += 2;
      --v28;
    }
    while (v28);
  }
LABEL_49:
  *(float *)v94 = v32;
  *(float *)&v94[1] = v33;
  v87 = v32 >= v33;
  if (a7 > 0.0 && *(float *)&v94[v87] < a7 || a8 > 0.0 && (float)(*(float *)&v94[v32 < v33] / *(float *)&v94[v87]) < a8)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    if (!v23)
      goto LABEL_58;
  }
  else
  {
    v88 = (const void **)(&v95 + 3 * (v32 < v33));
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v90 = *v88;
    v89 = v88[1];
    v91 = v89 - v90;
    if (v89 != v90)
    {
      if (v91 < 0)
        sub_22316E078();
      v92 = (char *)operator new(v89 - v90);
      *(_QWORD *)a1 = v92;
      *(_QWORD *)(a1 + 16) = &v92[8 * (v91 >> 3)];
      v93 = v91 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v92, v90, v93);
      *(_QWORD *)(a1 + 8) = &v92[v93];
    }
    *(_BYTE *)(a1 + 24) = 1;
    if (!v23)
      goto LABEL_58;
  }
  v99 = (char *)v23;
  operator delete(v23);
  v18 = v95;
LABEL_58:
  if (v18)
  {
    v96 = (char *)v18;
    operator delete(v18);
  }
  if (v105)
  {
    if (__p)
    {
      v104 = __p;
      operator delete(__p);
    }
    if (v101)
    {
      v102 = v101;
      operator delete(v101);
    }
  }
}

void sub_223F02388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_2233400F8((uint64_t)va);
  sub_2233401B4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223F023B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  sub_2233401B4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_223F023F0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  _QWORD *v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  __int128 v20;
  _QWORD *v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  float v26;
  void *v27;
  float32x4_t v28;
  float32x2_t v29;
  int32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float *v49;
  unint64_t v50;
  float32x2_t v51;
  unint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  void **v56;
  char *v57;
  unint64_t v59;
  uint64_t v61;
  float v62;
  float v63;
  uint64_t v64;
  _QWORD *v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  size_t prime;
  void *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  size_t v75;
  size_t v76;
  size_t v77;
  _QWORD *i;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  size_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  _QWORD *v94;
  void *v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x4_t v99;
  void *__p[2];
  uint64_t v101;
  char v102;
  float32x2_t v103;
  float32x2_t v104;
  char v105;
  float32x4_t v106;
  float32x2_t v107;
  float v108;
  float v109;
  char v110;
  __int128 v111;

  v12 = sub_22342DA5C((_QWORD *)(a1 + 24), a2);
  v13.i64[0] = *(_QWORD *)(a2 + 40);
  v14.i64[0] = *(_QWORD *)(a2 + 56);
  v15 = (float32x2_t)vzip1_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v14.i8);
  v13.i32[2] = *(_DWORD *)(a2 + 48);
  v14.i32[2] = *(_DWORD *)(a2 + 64);
  v16 = (float32x2_t)vtrn2q_s32(v13, v14).u64[0];
  v13.i64[0] = vzip2q_s32(v13, v14).u64[0];
  v17.i64[0] = *(_QWORD *)(a2 + 88);
  v17.i32[2] = *(_DWORD *)(a2 + 96);
  v18 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v15, vnegq_f32(v17).f32[0]), v16, *(float32x2_t *)v17.f32, 1), *(float32x2_t *)v13.i8, v17, 2);
  v14.i64[0] = vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v16, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v16, 1), 0xCuLL).u64[0];
  *(float32x2_t *)v17.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v15, COERCE_FLOAT(*a4)), *(float32x2_t *)v14.i8, *(float32x2_t *)a4, 1), *(float32x2_t *)v13.i8, *((float *)a4 + 2));
  v19 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v15, COERCE_FLOAT(*(_QWORD *)((char *)a4 + 12))), *(float32x2_t *)v14.i8, *(float32x2_t *)((char *)a4 + 12), 1), *(float32x2_t *)v13.i8, *((float *)a4 + 5));
  *(float32x2_t *)&v20 = vadd_f32(*(float32x2_t *)v17.f32, v18);
  *((float32x2_t *)&v20 + 1) = vadd_f32(v18, v19);
  if (v12)
    v21 = v12 + 4;
  else
    v21 = 0;
  v111 = v20;
  v22 = *(float *)(a1 + 4);
  v107.f32[0] = v22;
  v23 = *((float *)v21 + 28);
  v24 = v23 < v22;
  if (v23 != v22)
  {
    v25 = v23 - v22;
    v26 = v22 - v23;
    if (!v24)
      v26 = v25;
    if (v26 > 0.000001 && *((_BYTE *)v21 + 80))
    {
      sub_223FBB9C8(v21 + 7, (float *)&v107, __p);
      v27 = (void *)v21[11];
      if (v27)
      {
        v21[12] = v27;
        operator delete(v27);
      }
      *(_OWORD *)(v21 + 11) = *(_OWORD *)__p;
      v21[13] = v101;
      v22 = v107.f32[0];
    }
  }
  *((float *)v21 + 28) = v22;
  sub_223FBE948((float **)v21 + 11, (float32x2_t *)&v111, &v107, 0.000001);
  if (!v110)
    return 0;
  v29.i32[0] = v107.i32[1];
  v28.i32[0] = v107.i32[0];
  v34 = *(float32x2_t *)(a2 + 40);
  v30.i32[0] = *(_DWORD *)(a2 + 48);
  v35 = *(float32x2_t *)(a2 + 56);
  v31.i32[0] = *(_DWORD *)(a2 + 64);
  v36 = *(float32x2_t *)(a2 + 72);
  v32.i32[0] = *(_DWORD *)(a2 + 80);
  *(float32x2_t *)v37.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(v34, v107.f32[0]), v35, v107.f32[1]), 0, v36);
  *(float32x2_t *)&v37.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v28.f32), v29, v31), 0, v32);
  v28.i64[0] = *(_QWORD *)(a2 + 88);
  v28.i32[2] = *(_DWORD *)(a2 + 96);
  v38 = vaddq_f32(v37, v28);
  v37.f32[0] = v108;
  v33.f32[0] = v109;
  *(float32x2_t *)v39.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(v34, v108), v35, v109), 0, v36);
  *(float32x2_t *)&v39.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v37.f32), v33, v31), 0, v32);
  v40 = vaddq_f32(v28, v39);
  v39.i64[0] = *(_QWORD *)(a3 + 40);
  v30.i64[0] = *(_QWORD *)(a3 + 56);
  v41 = (float32x2_t)vzip1_s32(*(int32x2_t *)v39.f32, *(int32x2_t *)v30.i8);
  v39.i32[2] = *(_DWORD *)(a3 + 48);
  v30.i32[2] = *(_DWORD *)(a3 + 64);
  v42 = (float32x2_t)vtrn2q_s32((int32x4_t)v39, v30).u64[0];
  v37.i64[0] = *(_QWORD *)(a3 + 88);
  v37.i32[2] = *(_DWORD *)(a3 + 96);
  v39.i64[0] = vzip2q_s32((int32x4_t)v39, v30).u64[0];
  v43 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v41, vnegq_f32(v37).f32[0]), v42, *(float32x2_t *)v37.f32, 1), *(float32x2_t *)v39.f32, v37, 2);
  v44 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v42, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v42, 1), 0xCuLL).u64[0];
  v45 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v41, v38.f32[0]), v44, *(float32x2_t *)v38.f32, 1), *(float32x2_t *)v39.f32, v38, 2);
  *(float32x2_t *)v38.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v41, v40.f32[0]), v44, *(float32x2_t *)v40.f32, 1), *(float32x2_t *)v39.f32, v40, 2);
  *(float32x2_t *)v40.f32 = vadd_f32(v45, v43);
  *(float32x2_t *)&v40.u32[2] = vadd_f32(v43, *(float32x2_t *)v38.f32);
  v106 = v40;
  sub_223FBE948((float **)(a3 + 360), (float32x2_t *)&v106, &v103, 0.000001);
  if (!v105)
    return 0;
  sub_223F01D98((uint64_t)__p, (float **)(a3 + 360), a3 + 392, v103, v104, *(float *)(a1 + 8), *(float *)(a1 + 12), *(float *)(a1 + 16));
  if (!v102)
    return 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v47 = v103;
  v48 = v104;
  v96 = *(float32x2_t *)(a3 + 40);
  v7.i32[0] = *(_DWORD *)(a3 + 48);
  v98 = *(float32x2_t *)(a3 + 56);
  v5.i32[0] = *(_DWORD *)(a3 + 64);
  v97 = *(float32x2_t *)(a3 + 72);
  v6.i32[0] = *(_DWORD *)(a3 + 80);
  v46.i64[0] = *(_QWORD *)(a3 + 88);
  v46.i32[2] = *(_DWORD *)(a3 + 96);
  v99 = v46;
  __p[0] = (void *)a2;
  v49 = (float *)sub_223F05CF0((uint64_t *)(a1 + 64), a2, (_OWORD **)__p);
  v50 = sub_22456636C((unsigned __int8 *)a3);
  v52 = v50;
  v53 = *((_QWORD *)v49 + 5);
  if (v53)
  {
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)v53);
    v54.i16[0] = vaddlv_u8(v54);
    if (v54.u32[0] > 1uLL)
    {
      v4 = v50;
      if (v50 >= v53)
        v4 = v50 % v53;
    }
    else
    {
      v4 = (v53 - 1) & v50;
    }
    v56 = *(void ***)(*((_QWORD *)v49 + 4) + 8 * v4);
    if (v56)
    {
      v57 = (char *)*v56;
      if (*v56)
      {
        if (v54.u32[0] < 2uLL)
        {
          while (1)
          {
            v61 = *((_QWORD *)v57 + 1);
            if (v61 == v50)
            {
              if (*((_QWORD *)v57 + 2) == *(_QWORD *)a3 && *((_QWORD *)v57 + 3) == *(_QWORD *)(a3 + 8))
                goto LABEL_107;
            }
            else if ((v61 & (v53 - 1)) != v4)
            {
              goto LABEL_45;
            }
            v57 = *(char **)v57;
            if (!v57)
              goto LABEL_45;
          }
        }
        do
        {
          v59 = *((_QWORD *)v57 + 1);
          if (v59 == v50)
          {
            if (*((_QWORD *)v57 + 2) == *(_QWORD *)a3 && *((_QWORD *)v57 + 3) == *(_QWORD *)(a3 + 8))
              goto LABEL_107;
          }
          else
          {
            if (v59 >= v53)
              v59 %= v53;
            if (v59 != v4)
              break;
          }
          v57 = *(char **)v57;
        }
        while (v57);
      }
    }
  }
LABEL_45:
  v57 = (char *)operator new(0x48uLL);
  *(_QWORD *)v57 = 0;
  *((_QWORD *)v57 + 1) = v52;
  *((_OWORD *)v57 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v57 + 4) = 0;
  *(_OWORD *)(v57 + 40) = xmmword_224660820;
  *(_OWORD *)(v57 + 56) = xmmword_224657FC0;
  v62 = (float)(unint64_t)(*((_QWORD *)v49 + 7) + 1);
  v63 = v49[16];
  if (!v53 || (float)(v63 * (float)v53) < v62)
  {
    v66 = 1;
    if (v53 >= 3)
      v66 = (v53 & (v53 - 1)) != 0;
    v67 = v66 | (2 * v53);
    v68 = vcvtps_u32_f32(v62 / v63);
    if (v67 <= v68)
      prime = v68;
    else
      prime = v67;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v53 = *((_QWORD *)v49 + 5);
    }
    if (prime > v53)
      goto LABEL_59;
    if (prime >= v53)
      goto LABEL_92;
    v82 = vcvtps_u32_f32((float)*((unint64_t *)v49 + 7) / v49[16]);
    if (v53 < 3 || (v83 = (uint8x8_t)vcnt_s8((int8x8_t)v53), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
    {
      v82 = std::__next_prime(v82);
    }
    else
    {
      v84 = 1 << -(char)__clz(v82 - 1);
      if (v82 >= 2)
        v82 = v84;
    }
    if (prime <= v82)
      prime = v82;
    if (prime >= v53)
    {
      v53 = *((_QWORD *)v49 + 5);
    }
    else
    {
      if (prime)
      {
LABEL_59:
        if (prime >> 61)
          sub_223174E94();
        v70 = operator new(8 * prime);
        v71 = (void *)*((_QWORD *)v49 + 4);
        *((_QWORD *)v49 + 4) = v70;
        if (v71)
          operator delete(v71);
        v72 = 0;
        *((_QWORD *)v49 + 5) = prime;
        do
          *(_QWORD *)(*((_QWORD *)v49 + 4) + 8 * v72++) = 0;
        while (prime != v72);
        v74 = v49 + 12;
        v73 = (_QWORD *)*((_QWORD *)v49 + 6);
        if (!v73)
          goto LABEL_91;
        v75 = v73[1];
        v76 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v77 = v75 & v76;
          *(_QWORD *)(*((_QWORD *)v49 + 4) + 8 * v77) = v74;
          for (i = (_QWORD *)*v73; *v73; i = (_QWORD *)*v73)
          {
            v79 = i[1] & v76;
            if (v79 == v77)
            {
              v73 = i;
            }
            else
            {
              v80 = *((_QWORD *)v49 + 4);
              if (*(_QWORD *)(v80 + 8 * v79))
              {
                *v73 = *i;
                v81 = 8 * v79;
                *i = **(_QWORD **)(*((_QWORD *)v49 + 4) + v81);
                **(_QWORD **)(*((_QWORD *)v49 + 4) + v81) = i;
              }
              else
              {
                *(_QWORD *)(v80 + 8 * v79) = v73;
                v73 = i;
                v77 = v79;
              }
            }
          }
LABEL_91:
          v53 = prime;
          goto LABEL_92;
        }
        if (v75 >= prime)
          v75 %= prime;
        *(_QWORD *)(*((_QWORD *)v49 + 4) + 8 * v75) = v74;
        v85 = (_QWORD *)*v73;
        if (!*v73)
          goto LABEL_91;
        while (1)
        {
          v87 = v85[1];
          if (v87 >= prime)
            v87 %= prime;
          if (v87 == v75)
            goto LABEL_85;
          v88 = *((_QWORD *)v49 + 4);
          if (*(_QWORD *)(v88 + 8 * v87))
          {
            *v73 = *v85;
            v86 = 8 * v87;
            *v85 = **(_QWORD **)(*((_QWORD *)v49 + 4) + v86);
            **(_QWORD **)(*((_QWORD *)v49 + 4) + v86) = v85;
            v85 = v73;
LABEL_85:
            v73 = v85;
            v85 = (_QWORD *)*v85;
            if (!v85)
              goto LABEL_91;
          }
          else
          {
            *(_QWORD *)(v88 + 8 * v87) = v73;
            v73 = v85;
            v85 = (_QWORD *)*v85;
            v75 = v87;
            if (!v85)
              goto LABEL_91;
          }
        }
      }
      v95 = (void *)*((_QWORD *)v49 + 4);
      *((_QWORD *)v49 + 4) = 0;
      if (v95)
        operator delete(v95);
      v53 = 0;
      *((_QWORD *)v49 + 5) = 0;
    }
LABEL_92:
    v89 = v53 - 1;
    if ((v53 & (v53 - 1)) != 0)
    {
      if (v52 >= v53)
      {
        v4 = v52 % v53;
        v64 = *((_QWORD *)v49 + 4);
        v65 = *(_QWORD **)(v64 + 8 * (v52 % v53));
        if (v65)
          goto LABEL_48;
      }
      else
      {
        v4 = v52;
        v64 = *((_QWORD *)v49 + 4);
        v65 = *(_QWORD **)(v64 + 8 * v52);
        if (v65)
          goto LABEL_48;
      }
    }
    else
    {
      v4 = v89 & v52;
      v64 = *((_QWORD *)v49 + 4);
      v65 = *(_QWORD **)(v64 + 8 * (v89 & v52));
      if (v65)
        goto LABEL_48;
    }
    goto LABEL_94;
  }
  v64 = *((_QWORD *)v49 + 4);
  v65 = *(_QWORD **)(v64 + 8 * v4);
  if (v65)
  {
LABEL_48:
    *(_QWORD *)v57 = *v65;
    goto LABEL_105;
  }
LABEL_94:
  *(_QWORD *)v57 = *((_QWORD *)v49 + 6);
  *((_QWORD *)v49 + 6) = v57;
  *(_QWORD *)(v64 + 8 * v4) = v49 + 12;
  if (!*(_QWORD *)v57)
    goto LABEL_106;
  v90 = *(_QWORD *)(*(_QWORD *)v57 + 8);
  if ((v53 & (v53 - 1)) != 0)
  {
    if (v90 >= v53)
      v90 %= v53;
  }
  else
  {
    v90 &= v53 - 1;
  }
  v65 = (_QWORD *)(*((_QWORD *)v49 + 4) + 8 * v90);
LABEL_105:
  *v65 = v57;
LABEL_106:
  ++*((_QWORD *)v49 + 7);
LABEL_107:
  v51.i32[0] = v47.i32[1];
  *(float32x2_t *)v91.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(v96, v47.f32[0]), v98, v47.f32[1]), 0, v97);
  *(float32x2_t *)&v91.u32[2] = vmla_f32(vmla_f32(vmul_f32(v7, v47), v51, v5), 0, v6);
  v92 = vaddq_f32(v99, v91);
  v51.i32[0] = v48.i32[1];
  *(float32x2_t *)v91.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(v96, v48.f32[0]), v98, v48.f32[1]), 0, v97);
  *(float32x2_t *)&v91.u32[2] = vmla_f32(vmla_f32(vmul_f32(v7, v48), v51, v5), 0, v6);
  *((float32x2_t *)v57 + 4) = v47;
  *((float32x2_t *)v57 + 5) = v48;
  *((_DWORD *)v57 + 14) = v92.i32[2];
  v93 = vaddq_f32(v99, v91);
  *((_QWORD *)v57 + 6) = v92.i64[0];
  *((_DWORD *)v57 + 17) = v93.i32[2];
  *(_QWORD *)(v57 + 60) = v93.i64[0];
  __p[0] = (void *)a3;
  v94 = sub_2238F2290(a1 + 104, a3, (uint64_t)&unk_2245BA939, (_OWORD **)__p);
  sub_223340BF8((uint64_t)(v94 + 4), a2, (_OWORD *)a2);
  return 1;
}

void sub_223F02C54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F02C68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  float32x4_t v5;
  float32x4_t v6;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t *v14;
  float32x4_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v22;
  uint64_t v24;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  float32x4_t *v85;
  float32x4_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  float32x4_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t i;
  _QWORD *v110;
  char *v111;
  unint64_t *v112;
  _QWORD *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  float32x4_t *v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  float32x4_t *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint8x8_t v149;
  void **v150;
  char *v151;
  unint64_t v153;
  uint64_t v155;
  __int128 v156;
  float v157;
  float v158;
  uint64_t v159;
  _QWORD *v160;
  _BOOL8 v161;
  unint64_t v162;
  unint64_t v163;
  size_t prime;
  void **v165;
  void *v166;
  void *v167;
  uint64_t v168;
  _QWORD *v169;
  size_t v170;
  size_t v171;
  size_t v172;
  _QWORD *j;
  size_t v174;
  uint64_t v175;
  unint64_t v176;
  uint8x8_t v177;
  uint64_t v178;
  _QWORD *v179;
  void *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  size_t v184;
  void **v185;
  int v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  BOOL v196;
  uint64_t v197;
  uint64_t v198;
  float32x2_t v199;
  float32x2_t v200;
  float32x2_t v201;
  float32x2_t v202;
  float32x2_t v203;
  float32x2_t v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  uint64_t v211;
  float32x2_t *v212;
  int8x16_t v213;
  int8x16_t v214;
  float32x2_t v215;
  uint64_t v216;
  int32x2_t *v217;
  float32x2_t *v218;
  float v219;
  int8x16_t v220;
  float v221;
  int8x16_t v222;
  float32x4_t v223;
  int8x16_t v224;
  float32x4_t v225;
  float v226;
  float v227;
  float v228;
  float32x4_t v229;
  float v230;
  float v231;
  float v232;
  float32x2_t v233;
  int32x2_t v234;
  int32x2_t v235;
  float32x4_t v236;
  int8x16_t v237;
  int8x16_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v246;
  unint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  _OWORD *v258;
  char *v259;
  unint64_t v260;
  unint64_t v261;
  _OWORD *v262;
  int v263;
  uint64_t v264;
  uint8x8_t v265;
  unint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  unint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  unint64_t v273;
  _OWORD *v274;
  _OWORD *v275;
  _OWORD **v276;
  _OWORD *v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  int v286;
  uint8x8_t v287;
  unint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  unint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  _QWORD *v294;
  unint64_t v295;
  _OWORD *v296;
  _OWORD **v297;
  _OWORD *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  char *v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  float v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  _BYTE *v317;
  uint64_t v318;
  unint64_t v319;
  int8x8_t v320;
  uint8x8_t v321;
  unint64_t v322;
  unint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  unint64_t v327;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  int8x8_t v332;
  uint8x8_t v333;
  unint64_t v334;
  _QWORD *v335;
  _QWORD *v336;
  uint64_t v337;
  unint64_t v339;
  uint64_t v341;
  void *v342;
  char v343;
  const void *v344;
  uint64_t v345;
  char *v346;
  size_t v347;
  uint64_t v348;
  _QWORD *v349;
  int v350;
  uint64_t v351;
  _QWORD *v352;
  int v353;
  _BYTE *v354;
  _BYTE *v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  float v362;
  unint64_t v363;
  int8x8_t v364;
  uint8x8_t v365;
  unint64_t v366;
  _QWORD *v367;
  _QWORD *v368;
  uint64_t v369;
  unint64_t v371;
  uint64_t v373;
  unint64_t v374;
  char *v375;
  char *v376;
  _QWORD *v377;
  char *v378;
  _QWORD *v379;
  _OWORD *v380;
  _QWORD *v381;
  unint64_t v382;
  int8x8_t v383;
  uint8x8_t v384;
  unint64_t v385;
  _QWORD *v386;
  _QWORD *v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v391;
  _QWORD *v393;
  unint64_t v394;
  unint64_t v395;
  char *v396;
  char *v397;
  char *v398;
  char *v399;
  __int128 v400;
  _QWORD *v401;
  char v402;
  uint64_t v403;
  float32x2_t **v404;
  uint64_t v405;
  _QWORD *v406;
  int v407;
  uint64_t v408;
  _QWORD *v409;
  int v410;
  _BYTE *v411;
  _BYTE *v412;
  _QWORD *v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  char *v419;
  uint64_t v420;
  _QWORD *k;
  uint64_t *v422;
  char *v423;
  char **v424;
  char *v425;
  _QWORD *v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  char *v433;
  char *v434;
  char *v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  char *v439;
  _QWORD *v440;
  void *v441;
  _QWORD *v442;
  _QWORD *v443;
  void *v444;
  _QWORD *v445;
  _QWORD *v446;
  void *v447;
  _QWORD *result;
  uint64_t v449;
  _QWORD *v450;
  void *v451;
  float32x4_t v452;
  uint64_t v453;
  char *v455;
  uint64_t *v456;
  char *v457;
  uint64_t v458;
  _QWORD *v459;
  char *v460;
  float32x4_t v461;
  _OWORD *v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t *v465;
  char *v466;
  uint64_t v468;
  _QWORD *v469;
  unint64_t v470;
  void *v471;
  void *v472;
  char *v473;
  void *v474;
  char *v475;
  char *v476;
  void *v477;
  char *v478;
  char *v479;
  void *v480[2];
  void *v481[2];
  int v482;
  void *v483[2];
  void *v484[2];
  int v485;
  void *__p[2];
  _BYTE v487[36];
  unsigned __int8 v488;
  void *v489[3];
  char v490;
  void *v491;
  char *v492;
  uint64_t v493;
  int v494;
  _QWORD v495[3];
  _QWORD *v496;
  _BYTE v497[20];
  int v498;
  unsigned __int8 v499;
  uint64_t v500;

  v500 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v468 = a1;
  sub_223F05BFC(__p);
  if (**((int **)__p[0] + 7) <= 1)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_2540CDFF8);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDFF8))
    {
      qword_2540CDFF0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_ExtentsTrim");
      __cxa_guard_release(&qword_2540CDFF8);
    }
    v9 = qword_2540CDFF0;
    *(_BYTE *)(qword_2540CDFF0 + 16) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v9 = std::chrono::steady_clock::now();
    *(_BYTE *)(v9 + 16) = 1;
  }
  v495[0] = &off_24EC641B0;
  v496 = v495;
  *(_OWORD *)v483 = 0u;
  *(_OWORD *)v484 = 0u;
  v485 = 1065353216;
  v11 = *a2;
  v10 = a2[1];
  if (v10 != *a2)
  {
    v12 = 0;
    v3 = 0;
    do
    {
      if (*(_BYTE *)(v11 + v12 + 384))
      {
        __p[0] = (void *)(v11 + v12);
        sub_2236BA6E0((uint64_t)v483, v11 + v12, (uint64_t)&unk_2245BA939, (_OWORD **)__p)[4] = v3;
        v11 = *a2;
        v10 = a2[1];
      }
      ++v3;
      v12 += 464;
    }
    while (v3 < 0x34F72C234F72C235 * ((v10 - v11) >> 4));
  }
  v13 = *(_OWORD **)(v468 + 40);
  v459 = (_QWORD *)(v468 + 40);
  v14 = (uint64_t *)(v468 + 24);
  v15.i64[0] = 0;
  *(_OWORD *)v480 = 0u;
  *(_OWORD *)v481 = 0u;
  v482 = 1065353216;
  if (!v13)
    goto LABEL_10;
LABEL_13:
  while (2)
  {
    *(_OWORD *)v497 = v13[1];
    v17 = sub_22456636C(v497);
    if (v483[1])
    {
      *(int8x8_t *)v15.f32 = vcnt_s8((int8x8_t)v483[1]);
      v15.i16[0] = vaddlv_u8(*(uint8x8_t *)v15.f32);
      if (v15.u32[0] > 1uLL)
      {
        v18 = v17;
        if ((void *)v17 >= v483[1])
          v18 = v17 % (unint64_t)v483[1];
      }
      else
      {
        v18 = ((unint64_t)v483[1] - 1) & v17;
      }
      v19 = (_QWORD *)*((_QWORD *)v483[0] + v18);
      if (v19)
      {
        v20 = (_QWORD *)*v19;
        if (v20)
        {
          if (v15.u32[0] < 2uLL)
          {
            while (1)
            {
              v24 = v20[1];
              if (v17 == v24)
              {
                if (v20[2] == *(_QWORD *)v497 && v20[3] == *(_QWORD *)&v497[8])
                  goto LABEL_107;
              }
              else if ((v24 & ((uint64_t)v483[1] - 1)) != v18)
              {
                goto LABEL_39;
              }
              v20 = (_QWORD *)*v20;
              if (!v20)
                goto LABEL_39;
            }
          }
          do
          {
            v22 = v20[1];
            if (v17 == v22)
            {
              if (v20[2] == *(_QWORD *)v497 && v20[3] == *(_QWORD *)&v497[8])
              {
LABEL_107:
                v13 = *(_OWORD **)v13;
                if (!v13)
                  goto LABEL_10;
                goto LABEL_13;
              }
            }
            else
            {
              if ((void *)v22 >= v483[1])
                v22 %= (unint64_t)v483[1];
              if (v22 != v18)
                break;
            }
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
      }
    }
LABEL_39:
    v25 = *(int8x8_t *)(v468 + 32);
    v26 = *((_QWORD *)v13 + 1);
    v27 = (uint8x8_t)vcnt_s8(v25);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(_QWORD *)&v25)
        v26 %= *(_QWORD *)&v25;
    }
    else
    {
      v26 &= *(_QWORD *)&v25 - 1;
    }
    v28 = *(_QWORD **)v13;
    v29 = *(_QWORD **)(*v14 + 8 * v26);
    do
    {
      v30 = v29;
      v29 = (_QWORD *)*v29;
    }
    while (v29 != (_QWORD *)v13);
    if (v30 == v459)
      goto LABEL_800;
    v31 = v30[1];
    if (v27.u32[0] > 1uLL)
    {
      if (v31 >= *(_QWORD *)&v25)
        v31 %= *(_QWORD *)&v25;
    }
    else
    {
      v31 &= *(_QWORD *)&v25 - 1;
    }
    v32 = *(_QWORD *)v13;
    if (v31 == v26)
    {
LABEL_58:
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 8);
        goto LABEL_60;
      }
    }
    else
    {
LABEL_800:
      if (!v28)
        goto LABEL_57;
      v33 = v28[1];
      if (v27.u32[0] > 1uLL)
      {
        v34 = v28[1];
        if (v33 >= *(_QWORD *)&v25)
          v34 = v33 % *(_QWORD *)&v25;
      }
      else
      {
        v34 = v33 & (*(_QWORD *)&v25 - 1);
      }
      v32 = *(_QWORD *)v13;
      if (v34 != v26)
      {
LABEL_57:
        *(_QWORD *)(*v14 + 8 * v26) = 0;
        v32 = *(_QWORD *)v13;
        goto LABEL_58;
      }
LABEL_60:
      if (v27.u32[0] > 1uLL)
      {
        if (v33 >= *(_QWORD *)&v25)
          v33 %= *(_QWORD *)&v25;
      }
      else
      {
        v33 &= *(_QWORD *)&v25 - 1;
      }
      if (v33 != v26)
      {
        *(_QWORD *)(*v14 + 8 * v33) = v30;
        v32 = *(_QWORD *)v13;
      }
    }
    *v30 = v32;
    *(_QWORD *)v13 = 0;
    --*(_QWORD *)(v468 + 48);
    v35 = (void *)*((_QWORD *)v13 + 15);
    if (v35)
    {
      *((_QWORD *)v13 + 16) = v35;
      operator delete(v35);
    }
    if (*((_BYTE *)v13 + 112))
    {
      v36 = (void *)*((_QWORD *)v13 + 11);
      if (v36)
      {
        *((_QWORD *)v13 + 12) = v36;
        operator delete(v36);
      }
    }
    operator delete(v13);
    sub_223F01458((char **)__p, v14, v497);
    v38 = *(_QWORD *)&v487[8];
    v37 = *(_QWORD *)&v487[16];
    if (*(_QWORD *)&v487[8] == *(_QWORD *)&v487[16])
    {
      if (*(_QWORD *)&v487[8])
        goto LABEL_73;
    }
    else
    {
      do
      {
        v39 = sub_22456636C((unsigned __int8 *)v38);
        if (v483[1])
        {
          *(int8x8_t *)v15.f32 = vcnt_s8((int8x8_t)v483[1]);
          v15.i16[0] = vaddlv_u8(*(uint8x8_t *)v15.f32);
          if (v15.u32[0] > 1uLL)
          {
            v40 = v39;
            if ((void *)v39 >= v483[1])
              v40 = v39 % (unint64_t)v483[1];
          }
          else
          {
            v40 = ((unint64_t)v483[1] - 1) & v39;
          }
          v41 = (_QWORD *)*((_QWORD *)v483[0] + v40);
          if (v41)
          {
            v42 = (_QWORD *)*v41;
            if (v42)
            {
              if (v15.u32[0] < 2uLL)
              {
                while (1)
                {
                  v46 = v42[1];
                  if (v39 == v46)
                  {
                    if (v42[2] == *(_QWORD *)v38 && v42[3] == *(_QWORD *)(v38 + 8))
                      goto LABEL_76;
                  }
                  else if ((v46 & ((uint64_t)v483[1] - 1)) != v40)
                  {
                    goto LABEL_77;
                  }
                  v42 = (_QWORD *)*v42;
                  if (!v42)
                    goto LABEL_77;
                }
              }
              do
              {
                v44 = v42[1];
                if (v39 == v44)
                {
                  if (v42[2] == *(_QWORD *)v38 && v42[3] == *(_QWORD *)(v38 + 8))
                  {
LABEL_76:
                    sub_223F061DC((uint64_t)v480, v42 + 4, v42 + 4);
                    break;
                  }
                }
                else
                {
                  if ((void *)v44 >= v483[1])
                    v44 %= (unint64_t)v483[1];
                  if (v44 != v40)
                    break;
                }
                v42 = (_QWORD *)*v42;
              }
              while (v42);
            }
          }
        }
LABEL_77:
        v38 += 16;
      }
      while (v38 != v37);
      v38 = *(_QWORD *)&v487[8];
      if (*(_QWORD *)&v487[8])
LABEL_73:
        operator delete((void *)v38);
    }
    if (__p[0])
      operator delete(__p[0]);
    v13 = v28;
    if (v28)
      continue;
    break;
  }
LABEL_10:
  v477 = 0;
  v478 = 0;
  v479 = 0;
  v474 = 0;
  v475 = 0;
  v476 = 0;
  v16 = (char *)v484[0];
  v465 = (uint64_t *)(v468 + 24);
  if (!v484[0])
  {
    v111 = 0;
    v113 = v481[0];
    if (v481[0])
      goto LABEL_239;
    goto LABEL_187;
  }
  v3 = 0x1FFFFFFFFFFFFFFFLL;
  do
  {
    if (sub_22342DA5C(v465, (uint64_t)(v16 + 16)))
    {
      v48 = *((_QWORD *)v16 + 4);
      if (*(_DWORD *)(*a2 + 464 * v48 + 224))
      {
        v49 = v475;
        if (v475 >= v476)
        {
          v50 = (char *)v474;
          v51 = v475 - (_BYTE *)v474;
          v52 = (v475 - (_BYTE *)v474) >> 3;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61)
            goto LABEL_789;
          v54 = v476 - (_BYTE *)v474;
          if ((v476 - (_BYTE *)v474) >> 2 > v53)
            v53 = v54 >> 2;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            if (v55 >> 61)
              goto LABEL_785;
            v56 = (char *)operator new(8 * v55);
            v57 = &v56[8 * v52];
            *(_QWORD *)v57 = *((_QWORD *)v16 + 4);
            v47 = (uint64_t)(v57 + 8);
            v58 = v49 - v50;
            if (v49 == v50)
            {
LABEL_156:
              v474 = v57;
              v476 = &v56[8 * v55];
              if (v50)
                operator delete(v50);
              goto LABEL_110;
            }
          }
          else
          {
            v56 = 0;
            v57 = (char *)(8 * v52);
            *(_QWORD *)(8 * v52) = v48;
            v47 = 8 * v52 + 8;
            v58 = v49 - v50;
            if (v49 == v50)
              goto LABEL_156;
          }
          v81 = v58 - 8;
          if (v81 < 0x58)
            goto LABEL_801;
          if ((unint64_t)(v49 - &v56[v51]) < 0x20)
            goto LABEL_801;
          v82 = (v81 >> 3) + 1;
          v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
          v84 = &v49[-v83];
          v57 -= v83;
          v85 = (float32x4_t *)&v56[v51 - 16];
          v86 = (float32x4_t *)(v49 - 16);
          v87 = v82 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v5 = v86[-1];
            v15 = *v86;
            v85[-1] = v5;
            *v85 = v15;
            v85 -= 2;
            v86 -= 2;
            v87 -= 4;
          }
          while (v87);
          v49 = v84;
          if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_801:
            do
            {
              v88 = *((_QWORD *)v49 - 1);
              v49 -= 8;
              *((_QWORD *)v57 - 1) = v88;
              v57 -= 8;
            }
            while (v49 != v50);
          }
          goto LABEL_156;
        }
        *(_QWORD *)v475 = v48;
        v47 = (uint64_t)(v49 + 8);
LABEL_110:
        v475 = (char *)v47;
        goto LABEL_111;
      }
      v60 = v478;
      if (v478 < v479)
      {
        *(_QWORD *)v478 = v48;
        v61 = v60 + 8;
LABEL_177:
        v478 = v61;
        sub_223F01458((char **)__p, v465, (_QWORD *)v16 + 2);
        v107 = *(void **)&v487[8];
        v108 = *(_QWORD *)&v487[16];
        for (i = *(_QWORD *)&v487[8]; i != v108; i += 16)
        {
          *(_QWORD *)v497 = i;
          v110 = sub_2236BA6E0((uint64_t)v483, i, (uint64_t)&unk_2245BA939, (_OWORD **)v497);
          sub_223F061DC((uint64_t)v480, v110 + 4, v110 + 4);
        }
        if (v107)
          operator delete(v107);
        if (__p[0])
          operator delete(__p[0]);
        goto LABEL_111;
      }
      v72 = (char *)v477;
      v73 = v478 - (_BYTE *)v477;
      v74 = (v478 - (_BYTE *)v477) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
LABEL_789:
        sub_22367C394();
      v76 = v479 - (_BYTE *)v477;
      if ((v479 - (_BYTE *)v477) >> 2 > v75)
        v75 = v76 >> 2;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v75;
      if (v77)
      {
        if (v77 >> 61)
LABEL_785:
          sub_223174E94();
        v78 = (char *)operator new(8 * v77);
        v79 = &v78[8 * v74];
        *(_QWORD *)v79 = *((_QWORD *)v16 + 4);
        v61 = v79 + 8;
        v80 = v60 - v72;
        if (v60 == v72)
          goto LABEL_175;
      }
      else
      {
        v78 = 0;
        v79 = (char *)(8 * v74);
        v97 = (_QWORD *)(8 * v74);
        *v97 = v48;
        v61 = (char *)(v97 + 1);
        v80 = v60 - v72;
        if (v60 == v72)
        {
LABEL_175:
          v477 = v79;
          v479 = &v78[8 * v77];
          if (v72)
            operator delete(v72);
          goto LABEL_177;
        }
      }
      v98 = v80 - 8;
      if (v98 < 0x58)
        goto LABEL_802;
      if ((unint64_t)(v60 - &v78[v73]) < 0x20)
        goto LABEL_802;
      v99 = (v98 >> 3) + 1;
      v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
      v101 = &v60[-v100];
      v79 -= v100;
      v102 = &v78[v73 - 16];
      v103 = v60 - 16;
      v104 = v99 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v105 = *(_OWORD *)v103;
        *((_OWORD *)v102 - 1) = *((_OWORD *)v103 - 1);
        *(_OWORD *)v102 = v105;
        v102 -= 32;
        v103 -= 32;
        v104 -= 4;
      }
      while (v104);
      v60 = v101;
      if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_802:
        do
        {
          v106 = *((_QWORD *)v60 - 1);
          v60 -= 8;
          *((_QWORD *)v79 - 1) = v106;
          v79 -= 8;
        }
        while (v60 != v72);
      }
      goto LABEL_175;
    }
    v59 = v478;
    if (v478 < v479)
    {
      *(_QWORD *)v478 = *((_QWORD *)v16 + 4);
      v478 = v59 + 8;
      goto LABEL_111;
    }
    v62 = (char *)v477;
    v63 = v478 - (_BYTE *)v477;
    v64 = (v478 - (_BYTE *)v477) >> 3;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 61)
      goto LABEL_789;
    v66 = v479 - (_BYTE *)v477;
    if ((v479 - (_BYTE *)v477) >> 2 > v65)
      v65 = v66 >> 2;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
      v67 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
    {
      if (v67 >> 61)
        goto LABEL_785;
      v68 = (char *)operator new(8 * v67);
      v69 = &v68[8 * v64];
      *(_QWORD *)v69 = *((_QWORD *)v16 + 4);
      v70 = (uint64_t)(v69 + 8);
      v71 = v59 - v62;
      if (v59 == v62)
        goto LABEL_165;
LABEL_159:
      v89 = v71 - 8;
      if (v89 < 0x58)
        goto LABEL_803;
      if ((unint64_t)(v59 - v68 - v63) < 0x20)
        goto LABEL_803;
      v90 = (v89 >> 3) + 1;
      v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
      v92 = &v59[-v91];
      v69 -= v91;
      v93 = (float32x4_t *)&v68[v63 - 16];
      v94 = (float32x4_t *)(v59 - 16);
      v95 = v90 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v5 = v94[-1];
        v15 = *v94;
        v93[-1] = v5;
        *v93 = v15;
        v93 -= 2;
        v94 -= 2;
        v95 -= 4;
      }
      while (v95);
      v59 = v92;
      if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_803:
        do
        {
          v96 = *((_QWORD *)v59 - 1);
          v59 -= 8;
          *((_QWORD *)v69 - 1) = v96;
          v69 -= 8;
        }
        while (v59 != v62);
      }
      goto LABEL_165;
    }
    v68 = 0;
    v69 = (char *)(8 * v64);
    *(_QWORD *)(8 * v64) = *((_QWORD *)v16 + 4);
    v70 = 8 * v64 + 8;
    v71 = v59 - v62;
    if (v59 != v62)
      goto LABEL_159;
LABEL_165:
    v477 = v69;
    v479 = &v68[8 * v67];
    if (v62)
      operator delete(v62);
    v478 = (char *)v70;
LABEL_111:
    v16 = *(char **)v16;
  }
  while (v16);
  v16 = (char *)v477;
  v111 = v478;
  if (v477 == v478)
  {
    v111 = (char *)v477;
    v113 = v481[0];
    if (v481[0])
      goto LABEL_239;
LABEL_187:
    v471 = 0;
    v472 = 0;
    v473 = 0;
    if (v16 == v111)
      goto LABEL_363;
    goto LABEL_188;
  }
  v112 = (unint64_t *)v477;
  do
  {
    sub_223F061DC((uint64_t)v480, v112, v112);
    ++v112;
  }
  while (v112 != (unint64_t *)v478);
  v113 = v481[0];
  if (!v481[0])
    goto LABEL_187;
LABEL_239:
  while (2)
  {
    v142 = v113[2];
    v143 = *a2;
    v144 = *a2 + 464 * v142;
    LOBYTE(__p[0]) = 0;
    v487[0] = 0;
    v487[4] = 0;
    v488 = 0;
    LOBYTE(v489[0]) = 0;
    v490 = 0;
    v492 = 0;
    v493 = 0;
    v491 = 0;
    v494 = -1082130432;
    if (*(_BYTE *)(v144 + 320))
    {
      v145 = v143 + 464 * v142;
      __p[0] = *(void **)(v145 + 304);
      __p[1] = *(void **)(v145 + 312);
      v487[0] = 1;
    }
    if (*(_BYTE *)(v143 + 464 * v142 + 356))
    {
      *(_OWORD *)&v487[4] = *(_OWORD *)(v143 + 464 * v142 + 324);
      *(_QWORD *)&v487[20] = *(_QWORD *)(v143 + 464 * v142 + 340);
      *(_QWORD *)&v487[28] = *(_QWORD *)(v143 + 464 * v142 + 348);
      v488 = 1;
    }
    sub_223331FC0((uint64_t)v489, v143 + 464 * v142 + 360);
    v146 = sub_22456636C((unsigned __int8 *)v144);
    v147 = v146;
    v148 = *(_QWORD *)(v468 + 32);
    if (v148)
    {
      v149 = (uint8x8_t)vcnt_s8((int8x8_t)v148);
      v149.i16[0] = vaddlv_u8(v149);
      if (v149.u32[0] > 1uLL)
      {
        v3 = v146;
        if (v146 >= v148)
          v3 = v146 % v148;
      }
      else
      {
        v3 = (v148 - 1) & v146;
      }
      v150 = *(void ***)(*v465 + 8 * v3);
      if (v150)
      {
        v151 = (char *)*v150;
        if (*v150)
        {
          if (v149.u32[0] < 2uLL)
          {
            while (1)
            {
              v155 = *((_QWORD *)v151 + 1);
              if (v155 == v146)
              {
                if (*((_QWORD *)v151 + 2) == *(_QWORD *)v144 && *((_QWORD *)v151 + 3) == *(_QWORD *)(v144 + 8))
                  goto LABEL_342;
              }
              else if ((v155 & (v148 - 1)) != v3)
              {
                goto LABEL_269;
              }
              v151 = *(char **)v151;
              if (!v151)
                goto LABEL_269;
            }
          }
          do
          {
            v153 = *((_QWORD *)v151 + 1);
            if (v153 == v146)
            {
              if (*((_QWORD *)v151 + 2) == *(_QWORD *)v144 && *((_QWORD *)v151 + 3) == *(_QWORD *)(v144 + 8))
                goto LABEL_342;
            }
            else
            {
              if (v153 >= v148)
                v153 %= v148;
              if (v153 != v3)
                break;
            }
            v151 = *(char **)v151;
          }
          while (v151);
        }
      }
    }
LABEL_269:
    v151 = (char *)operator new(0x98uLL);
    *(_QWORD *)v151 = 0;
    *((_QWORD *)v151 + 1) = v147;
    v156 = *(_OWORD *)v144;
    *((_QWORD *)v151 + 18) = 0;
    *((_OWORD *)v151 + 1) = v156;
    *((_OWORD *)v151 + 2) = 0u;
    *((_OWORD *)v151 + 3) = 0u;
    *((_OWORD *)v151 + 4) = 0u;
    *((_OWORD *)v151 + 5) = 0u;
    *((_OWORD *)v151 + 6) = 0u;
    *((_OWORD *)v151 + 7) = 0u;
    *((_OWORD *)v151 + 8) = 0u;
    *((_DWORD *)v151 + 36) = -1082130432;
    v157 = (float)(unint64_t)(*(_QWORD *)(v468 + 48) + 1);
    v158 = *(float *)(v468 + 56);
    if (!v148 || (float)(v158 * (float)v148) < v157)
    {
      v161 = (v148 & (v148 - 1)) != 0;
      if (v148 < 3)
        v161 = 1;
      v162 = v161 | (2 * v148);
      v163 = vcvtps_u32_f32(v157 / v158);
      if (v162 <= v163)
        prime = v163;
      else
        prime = v162;
      if (prime == 1)
      {
        prime = 2;
        v165 = (void **)(v468 + 24);
      }
      else
      {
        v165 = (void **)(v468 + 24);
        if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v148 = *(_QWORD *)(v468 + 32);
        }
      }
      if (prime <= v148)
      {
        if (prime >= v148)
          goto LABEL_319;
        v176 = vcvtps_u32_f32((float)*(unint64_t *)(v468 + 48) / *(float *)(v468 + 56));
        if (v148 < 3 || (v177 = (uint8x8_t)vcnt_s8((int8x8_t)v148), v177.i16[0] = vaddlv_u8(v177), v177.u32[0] > 1uLL))
        {
          v176 = std::__next_prime(v176);
        }
        else
        {
          v178 = 1 << -(char)__clz(v176 - 1);
          if (v176 >= 2)
            v176 = v178;
        }
        if (prime <= v176)
          prime = v176;
        if (prime >= v148)
        {
          v148 = *(_QWORD *)(v468 + 32);
          v181 = v148 - 1;
          if ((v148 & (v148 - 1)) != 0)
          {
LABEL_332:
            if (v147 >= v148)
            {
              v3 = v147 % v148;
              v159 = *v465;
              v160 = *(_QWORD **)(*v465 + 8 * (v147 % v148));
              if (!v160)
                goto LABEL_321;
            }
            else
            {
              v3 = v147;
              v159 = *v465;
              v160 = *(_QWORD **)(*v465 + 8 * v147);
              if (!v160)
                goto LABEL_321;
            }
            goto LABEL_272;
          }
LABEL_320:
          v3 = v181 & v147;
          v159 = *v465;
          v160 = *(_QWORD **)(*v465 + 8 * (v181 & v147));
          if (!v160)
            goto LABEL_321;
LABEL_272:
          *(_QWORD *)v151 = *v160;
          goto LABEL_340;
        }
        if (!prime)
        {
          v180 = *v165;
          *v165 = 0;
          if (v180)
            operator delete(v180);
          v148 = 0;
          *(_QWORD *)(v468 + 32) = 0;
          v181 = -1;
          goto LABEL_320;
        }
      }
      if (prime >> 61)
        sub_223174E94();
      v166 = operator new(8 * prime);
      v167 = *v165;
      *v165 = v166;
      if (v167)
        operator delete(v167);
      v168 = 0;
      *(_QWORD *)(v468 + 32) = prime;
      do
        *((_QWORD *)*v165 + v168++) = 0;
      while (prime != v168);
      v169 = (_QWORD *)*v459;
      if (!*v459)
      {
LABEL_331:
        v148 = prime;
        v181 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_332;
        goto LABEL_320;
      }
      v170 = v169[1];
      v171 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v172 = v170 & v171;
        *((_QWORD *)*v165 + v172) = v459;
        for (j = (_QWORD *)*v169; *v169; j = (_QWORD *)*v169)
        {
          v174 = j[1] & v171;
          if (v174 == v172)
          {
            v169 = j;
          }
          else if (*((_QWORD *)*v165 + v174))
          {
            *v169 = *j;
            v175 = 8 * v174;
            *j = **(_QWORD **)((char *)*v165 + v175);
            **(_QWORD **)((char *)*v165 + v175) = j;
          }
          else
          {
            *((_QWORD *)*v165 + v174) = v169;
            v169 = j;
            v172 = v174;
          }
        }
        goto LABEL_331;
      }
      if (v170 < prime)
      {
        *((_QWORD *)*v165 + v170) = v459;
        v179 = (_QWORD *)*v169;
        if (*v169)
          goto LABEL_326;
        goto LABEL_318;
      }
      v170 %= prime;
      *((_QWORD *)*v165 + v170) = v459;
      v179 = (_QWORD *)*v169;
      if (!*v169)
      {
LABEL_318:
        v148 = prime;
LABEL_319:
        v181 = v148 - 1;
        if ((v148 & (v148 - 1)) != 0)
          goto LABEL_332;
        goto LABEL_320;
      }
      while (1)
      {
LABEL_326:
        v184 = v179[1];
        if (v184 >= prime)
          v184 %= prime;
        if (v184 == v170)
          goto LABEL_325;
        if (*((_QWORD *)*v165 + v184))
        {
          *v169 = *v179;
          v183 = 8 * v184;
          *v179 = **(_QWORD **)((char *)*v165 + v183);
          **(_QWORD **)((char *)*v165 + v183) = v179;
          v179 = v169;
LABEL_325:
          v169 = v179;
          v179 = (_QWORD *)*v179;
          if (!v179)
            goto LABEL_331;
        }
        else
        {
          *((_QWORD *)*v165 + v184) = v169;
          v169 = v179;
          v179 = (_QWORD *)*v179;
          v170 = v184;
          if (!v179)
            goto LABEL_331;
        }
      }
    }
    v159 = *v465;
    v160 = *(_QWORD **)(*v465 + 8 * v3);
    if (v160)
      goto LABEL_272;
LABEL_321:
    *(_QWORD *)v151 = *v459;
    *v459 = v151;
    *(_QWORD *)(v159 + 8 * v3) = v459;
    if (*(_QWORD *)v151)
    {
      v182 = *(_QWORD *)(*(_QWORD *)v151 + 8);
      if ((v148 & (v148 - 1)) != 0)
      {
        if (v182 >= v148)
          v182 %= v148;
      }
      else
      {
        v182 &= v148 - 1;
      }
      v160 = (_QWORD *)(*v465 + 8 * v182);
LABEL_340:
      *v160 = v151;
    }
    ++*(_QWORD *)(v468 + 48);
LABEL_342:
    v185 = (void **)(v151 + 32);
    if (v151[48] != v487[0])
    {
      if (!v151[48])
      {
        *((_OWORD *)v151 + 2) = *(_OWORD *)__p;
        v151[48] = 1;
        v186 = v151[84];
        if (v186 != v488)
          goto LABEL_345;
        goto LABEL_350;
      }
      v151[48] = 0;
LABEL_349:
      v186 = v151[84];
      if (v186 != v488)
        goto LABEL_345;
      goto LABEL_350;
    }
    if (!v151[48])
      goto LABEL_349;
    *(_OWORD *)v185 = *(_OWORD *)__p;
    v186 = v151[84];
    if (v186 != v488)
    {
LABEL_345:
      if (v186)
      {
        v151[84] = 0;
      }
      else
      {
        *(_OWORD *)(v151 + 52) = *(_OWORD *)&v487[4];
        *(_OWORD *)(v151 + 68) = *(_OWORD *)&v487[20];
        v151[84] = 1;
      }
      goto LABEL_353;
    }
LABEL_350:
    if (v186)
    {
      *(_OWORD *)(v151 + 52) = *(_OWORD *)&v487[4];
      *(_OWORD *)(v151 + 68) = *(_OWORD *)&v487[20];
    }
LABEL_353:
    sub_223331FC0((uint64_t)(v151 + 88), (uint64_t)v489);
    if (v185 != __p)
      sub_2233320C8((_QWORD *)v151 + 15, (char *)v491, v492, (v492 - (_BYTE *)v491) >> 3);
    v15.i32[0] = v494;
    *((_DWORD *)v151 + 36) = v494;
    if (v491)
    {
      v492 = (char *)v491;
      operator delete(v491);
    }
    if (v490 && v489[0])
    {
      v489[1] = v489[0];
      operator delete(v489[0]);
    }
    v113 = (_QWORD *)*v113;
    if (v113)
      continue;
    break;
  }
  v16 = (char *)v477;
  v111 = v478;
  v471 = 0;
  v472 = 0;
  v473 = 0;
  if (v477 == v478)
  {
LABEL_363:
    v115 = 0;
    goto LABEL_364;
  }
LABEL_188:
  v114 = v475;
  v456 = (uint64_t *)v474;
  if (v474 == v475)
  {
    v115 = 0;
    if (v111 == v16)
      goto LABEL_364;
    goto LABEL_214;
  }
  v115 = 0;
  v116 = v16;
  while (2)
  {
    v460 = v116;
    v117 = *(_QWORD *)v116;
    v118 = v456;
    while (2)
    {
      v119 = *v118;
      if (v115 < v473)
      {
        *(_QWORD *)v115 = v117;
        *((_QWORD *)v115 + 1) = v119;
        v115 += 16;
        goto LABEL_193;
      }
      v120 = (char *)v471;
      v121 = (v115 - (_BYTE *)v471) >> 4;
      v122 = v121 + 1;
      if ((unint64_t)(v121 + 1) >> 60)
        sub_2236EA0B4();
      v123 = v473 - (_BYTE *)v471;
      if ((v473 - (_BYTE *)v471) >> 3 > v122)
        v122 = v123 >> 3;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF0)
        v124 = 0xFFFFFFFFFFFFFFFLL;
      else
        v124 = v122;
      if (v124 >> 60)
        sub_223174E94();
      v125 = (char *)operator new(16 * v124);
      v126 = &v125[16 * v121];
      *(_QWORD *)v126 = v117;
      *((_QWORD *)v126 + 1) = v119;
      if (v115 == v120)
      {
        v115 = v126 + 16;
        v471 = &v125[16 * v121];
        v472 = v126 + 16;
        v473 = &v125[16 * v124];
        if (!v120)
          goto LABEL_193;
        goto LABEL_208;
      }
      v127 = (float32x4_t *)&v125[16 * v121];
      do
      {
        v128 = (char *)&v127[-1];
        v15 = *((float32x4_t *)v115 - 1);
        v127[-1] = v15;
        v115 -= 16;
        --v127;
      }
      while (v115 != v120);
      v115 = v126 + 16;
      v471 = v128;
      v472 = v126 + 16;
      v473 = &v125[16 * v124];
      if (v120)
LABEL_208:
        operator delete(v120);
LABEL_193:
      v472 = v115;
      if (++v118 != (uint64_t *)v114)
        continue;
      break;
    }
    v116 = v460 + 8;
    if (v460 + 8 != v111)
      continue;
    break;
  }
  v111 = v478;
  if (v478 != v16)
  {
LABEL_214:
    v129 = 0;
    while (1)
    {
      v131 = v129++;
      v130 = (v111 - v16) >> 3;
      if (v129 < v130)
        break;
LABEL_216:
      if (v129 >= v130)
        goto LABEL_364;
    }
    v132 = v129;
    while (1)
    {
      if (v115 < v473)
      {
        *(_QWORD *)v115 = *(_QWORD *)&v16[8 * v131];
        *((_QWORD *)v115 + 1) = *(_QWORD *)&v16[8 * v132];
        v115 += 16;
      }
      else
      {
        v133 = (char *)v471;
        v134 = (v115 - (_BYTE *)v471) >> 4;
        v135 = v134 + 1;
        if ((unint64_t)(v134 + 1) >> 60)
          sub_2236EA0B4();
        v136 = v473 - (_BYTE *)v471;
        if ((v473 - (_BYTE *)v471) >> 3 > v135)
          v135 = v136 >> 3;
        if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0)
          v137 = 0xFFFFFFFFFFFFFFFLL;
        else
          v137 = v135;
        if (v137 >> 60)
          sub_223174E94();
        v138 = (char *)operator new(16 * v137);
        v139 = &v138[16 * v134];
        *(_QWORD *)v139 = *(_QWORD *)&v16[8 * v131];
        *((_QWORD *)v139 + 1) = *(_QWORD *)&v16[8 * v132];
        if (v115 != v133)
        {
          v140 = (float32x4_t *)&v138[16 * v134];
          do
          {
            v141 = (char *)&v140[-1];
            v15 = *((float32x4_t *)v115 - 1);
            v140[-1] = v15;
            v115 -= 16;
            --v140;
          }
          while (v115 != v133);
          v115 = v139 + 16;
          v471 = v141;
          v472 = v139 + 16;
          v473 = &v138[16 * v137];
          if (!v133)
            goto LABEL_220;
LABEL_235:
          operator delete(v133);
          v111 = v478;
          goto LABEL_220;
        }
        v115 = v139 + 16;
        v471 = &v138[16 * v134];
        v472 = v139 + 16;
        v473 = &v138[16 * v137];
        if (v133)
          goto LABEL_235;
      }
LABEL_220:
      v472 = v115;
      if (++v132 >= (v111 - v16) >> 3)
      {
        v130 = (v111 - v16) >> 3;
        goto LABEL_216;
      }
    }
  }
LABEL_364:
  v187 = (char *)v471;
  if (v471 != v115)
  {
    v455 = 0;
    v457 = 0;
    v188 = 0;
    while (1)
    {
      v189 = *(_QWORD *)v187;
      v190 = *a2;
      v191 = *a2 + 464 * *(_QWORD *)v187;
      if (!*(_BYTE *)(v191 + 384)
        || *(_QWORD *)(v191 + 368) - *(_QWORD *)(v191 + 360) < 0x10uLL
        || (v192 = *((_QWORD *)v187 + 1), v193 = v190 + 464 * v192, !*(_BYTE *)(v193 + 384))
        || *(_QWORD *)(v193 + 368) - *(_QWORD *)(v193 + 360) < 0x10uLL
        || ((v194 = *(unsigned __int8 *)(v190 + 464 * v189 + 104),
             v195 = *(unsigned __int8 *)(v190 + 464 * v192 + 104),
             v194 == 1)
          ? (v196 = v195 == 1)
          : (v196 = 0),
            v196))
      {
LABEL_394:
        v216 = v468;
        goto LABEL_395;
      }
      if (v194 == v195)
        break;
LABEL_393:
      v211 = v190 + 464 * v189;
      v212 = (float32x2_t *)(v190 + 464 * v192);
      LODWORD(__p[0]) = 897988541;
      if ((sub_223F064FC((float *)(v211 + 28), (float *)&v212[3] + 1, (float *)__p, *(double *)v15.i64, *(double *)v5.i64, *(double *)v6.i64, _Q3) & 1) != 0)goto LABEL_394;
      v217 = (int32x2_t *)(v211 + 16);
      v218 = v212 + 2;
      v219 = *(float *)(v211 + 36);
      v213.i64[0] = *(_QWORD *)(v211 + 28);
      v220 = v213;
      *(float *)&v220.i32[2] = v219;
      v221 = v212[4].f32[1];
      *(float32x2_t *)v214.i8 = *(float32x2_t *)((char *)v212 + 28);
      v222 = v214;
      *(float *)&v222.i32[2] = v221;
      v225 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v222, (int32x4_t)v222), v222, 0xCuLL);
      v223 = (float32x4_t)vextq_s8(vextq_s8(v222, v222, 0xCuLL), v222, 8uLL);
      v224 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v220, v220, 0xCuLL), v220, 8uLL), v225), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v220, (int32x4_t)v220), v220, 0xCuLL), v223);
      v225.f32[0] = fabsf(*(float *)v224.i32);
      v226 = fabsf(*(float *)&v224.i32[1]);
      v227 = fabsf(*(float *)&v224.i32[2]);
      if (v225.f32[0] <= v226)
      {
        if (v226 <= v227)
        {
LABEL_402:
          _Q3.i32[0] = *(_DWORD *)(v211 + 24);
          *(int32x2_t *)v225.f32 = *v217;
          v233 = (float32x2_t)vdup_lane_s32(*v217, 1);
          v225.i32[2] = _Q3.i32[0];
          v229 = (float32x4_t)vextq_s8(v220, v220, 8uLL);
          v234 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v220.i8, (float32x2_t)*v217), v233, *(float32x2_t *)v220.i8, 1), *(float32x2_t *)_Q3.f32, *(float32x2_t *)v229.f32);
          v233.i32[0] = v212[3].i32[0];
          *(float32x2_t *)v229.f32 = *v218;
          v229.i32[2] = v233.i32[0];
          v235 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v222.i8, *v218), (float32x2_t)vdup_lane_s32((int32x2_t)*v218, 1), *(float32x2_t *)v222.i8, 1), v233, (float32x2_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL));
          *(float32x2_t *)v222.i8 = vdiv_f32(vsub_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v222.i8, *(int8x8_t *)v220.i8, 4uLL), (float32x2_t)vzip1_s32(v234, v235)), vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v220.i8, *(int8x8_t *)v222.i8, 4uLL), (float32x2_t)vzip1_s32(v235, v234))), (float32x2_t)vdup_laneq_s32((int32x4_t)v224, 2));
          goto LABEL_403;
        }
        v229 = (float32x4_t)vextq_s8(v220, v220, 8uLL);
        v215.i32[0] = *(_DWORD *)(v211 + 24);
        *(int32x2_t *)v225.f32 = *v217;
        v225.i32[2] = v215.i32[0];
        v231 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v220.i8, (float32x2_t)*v217), (float32x2_t)vdup_lane_s32(*v217, 1), *(float32x2_t *)v220.i8, 1), v215, *(float32x2_t *)v229.f32).f32[0];
        v215.i32[0] = v212[3].i32[0];
        *(float32x2_t *)v229.f32 = *v218;
        v229.i32[2] = v215.i32[0];
        v232 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v222.i8, *v218), (float32x2_t)vdup_lane_s32((int32x2_t)*v218, 1), *(float32x2_t *)v222.i8, 1), v215, (float32x2_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL)).f32[0];
        v222.i32[1] = 0;
        v222.i32[3] = 0;
        *(float *)v222.i32 = (float)((float)(v219 * v232) - (float)(v221 * v231)) / *(float *)&v224.i32[1];
        *(float *)&v222.i32[2] = (float)((float)(*(float *)v214.i32 * v231) - (float)(*(float *)v213.i32 * v232))
                               / *(float *)&v224.i32[1];
      }
      else
      {
        if (v225.f32[0] <= v227)
          goto LABEL_402;
        v229 = (float32x4_t)vextq_s8(v220, v220, 8uLL);
        v223.i32[0] = *(_DWORD *)(v211 + 24);
        *(int32x2_t *)v225.f32 = *v217;
        v225.i32[2] = v223.i32[0];
        v228 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v220.i8, (float32x2_t)*v217), (float32x2_t)vdup_lane_s32(*v217, 1), *(float32x2_t *)v220.i8, 1), *(float32x2_t *)v223.f32, *(float32x2_t *)v229.f32).f32[0];
        v223.i32[0] = v212[3].i32[0];
        *(float32x2_t *)v229.f32 = *v218;
        v229.i32[2] = v223.i32[0];
        v230 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v222.i8, *v218), (float32x2_t)vdup_lane_s32((int32x2_t)*v218, 1), *(float32x2_t *)v222.i8, 1), *(float32x2_t *)v223.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL)).f32[0];
        v222.i32[0] = 0;
        v222.i32[3] = 0;
        *(float *)&v222.i32[1] = (float)((float)(v221 * v228) - (float)(v219 * v230)) / *(float *)v224.i32;
        *(float *)&v222.i32[2] = (float)((float)(*(float *)&v213.i32[1] * v230) - (float)(*(float *)&v214.i32[1] * v228))
                               / *(float *)v224.i32;
      }
LABEL_403:
      v216 = v468;
      v236.i64[0] = 0x3F0000003F000000;
      v236.i64[1] = 0x3F0000003F000000;
      v237 = (int8x16_t)vmlaq_f32(vnegq_f32((float32x4_t)v222), vaddq_f32(v229, v225), v236);
      v238 = (int8x16_t)vsubq_f32(vaddq_f32((float32x4_t)v224, (float32x4_t)v222), (float32x4_t)v222);
      v236.i64[0] = vextq_s8(v238, v238, 8uLL).u64[0];
      v239 = vmlaq_n_f32((float32x4_t)v222, (float32x4_t)v238, vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v238.i8, *(float32x2_t *)v237.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v237.i8, 1), *(float32x2_t *)v238.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v237, v237, 8uLL), *(float32x2_t *)v236.f32), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v238.i8, *(float32x2_t *)v238.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v238.i8, 1), *(float32x2_t *)v238.i8, 1), *(float32x2_t *)v236.f32, *(float32x2_t *)v236.f32)).f32[0]);
      v238.i64[0] = vextq_s8(v224, v224, 8uLL).u64[0];
      *(float *)v238.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.i8, *(float32x2_t *)v224.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v224.i8, 1), *(float32x2_t *)v224.i8, 1), *(float32x2_t *)v238.i8, *(float32x2_t *)v238.i8).f32[0]);
      *(float *)v238.i32 = *(float *)v238.i32 + *(float *)v238.i32;
      v240 = vdivq_f32((float32x4_t)v224, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v238.i8, 0));
      v241 = vsubq_f32(v239, v240);
      v242 = vaddq_f32(v240, v239);
      __asm { FMOV            V3.4S, #9.5 }
      v246 = vmulq_f32(vsubq_f32(v242, v241), _Q3);
      v6 = vsubq_f32(v241, v246);
      v5 = vaddq_f32(v242, v246);
      if (v457 >= v188)
      {
        v247 = 0xCCCCCCCCCCCCCCCDLL * ((v457 - v455) >> 3) + 1;
        if (v247 > 0x666666666666666)
          sub_22316E078();
        v452 = v6;
        v461 = v5;
        if (0x999999999999999ALL * ((v188 - v455) >> 3) > v247)
          v247 = 0x999999999999999ALL * ((v188 - v455) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v188 - v455) >> 3) >= 0x333333333333333)
          v248 = 0x666666666666666;
        else
          v248 = v247;
        if (v248 > 0x666666666666666)
          sub_223174E94();
        v249 = (char *)operator new(40 * v248);
        v250 = v457;
        v251 = &v249[8 * ((v457 - v455) >> 3)];
        *(_OWORD *)v251 = *(_OWORD *)v187;
        *((_DWORD *)v251 + 6) = v452.i32[2];
        *((_QWORD *)v251 + 2) = v452.i64[0];
        v15.i64[0] = v461.i64[0];
        *(_QWORD *)(v251 + 28) = v461.i64[0];
        *((_DWORD *)v251 + 9) = v461.i32[2];
        if (v457 == v455)
        {
          v254 = &v249[8 * ((v457 - v455) >> 3)];
          v253 = v455;
          v188 = &v249[40 * v248];
          v457 = v251 + 40;
          if (v455)
            goto LABEL_416;
        }
        else
        {
          v252 = &v249[8 * ((v457 - v455) >> 3)];
          v253 = v455;
          do
          {
            v254 = v252 - 40;
            v15 = *(float32x4_t *)(v250 - 40);
            *(float32x4_t *)(v252 - 40) = v15;
            v255 = *((_QWORD *)v250 - 3);
            *((_DWORD *)v252 - 4) = *((_DWORD *)v250 - 4);
            *((_QWORD *)v252 - 3) = v255;
            v256 = *(_QWORD *)(v250 - 12);
            *((_DWORD *)v252 - 1) = *((_DWORD *)v250 - 1);
            *(_QWORD *)(v252 - 12) = v256;
            v250 -= 40;
            v252 -= 40;
          }
          while (v250 != v455);
          v188 = &v249[40 * v248];
          v457 = v251 + 40;
          if (v455)
LABEL_416:
            operator delete(v253);
        }
        v455 = v254;
        goto LABEL_395;
      }
      v15 = *(float32x4_t *)v187;
      *(_OWORD *)v457 = *(_OWORD *)v187;
      *((_DWORD *)v457 + 6) = v6.i32[2];
      *((_QWORD *)v457 + 2) = v6.i64[0];
      *((_DWORD *)v457 + 9) = v5.i32[2];
      *(_QWORD *)(v457 + 28) = v5.i64[0];
      v457 += 40;
LABEL_395:
      v187 += 16;
      if (v187 == v115)
      {
        *(_OWORD *)__p = 0u;
        *(_OWORD *)v487 = 0u;
        *(_DWORD *)&v487[16] = 1065353216;
        v257 = v455;
        if (v455 == v457)
          goto LABEL_601;
        while (1)
        {
          *(_QWORD *)v497 = 0;
          v261 = *((_QWORD *)v257 + 1);
          *(_QWORD *)v497 = *(_QWORD *)v257;
          v260 = *(_QWORD *)v497;
          v470 = v261;
          v262 = (_OWORD *)(*a2 + 464 * *(_QWORD *)v497);
          v462 = (_OWORD *)(*a2 + 464 * v261);
          v263 = sub_223F023F0(v216, (uint64_t)v262, (uint64_t)v462, (_QWORD *)v257 + 2);
          v264 = v468;
          if (v263)
            break;
LABEL_464:
          v286 = sub_223F023F0(v264, (uint64_t)v462, (uint64_t)v262, (_QWORD *)v257 + 2);
          v259 = v457;
          if (v286)
          {
            if (v480[1])
            {
              v287 = (uint8x8_t)vcnt_s8((int8x8_t)v480[1]);
              v287.i16[0] = vaddlv_u8(v287);
              if (v287.u32[0] > 1uLL)
              {
                v288 = v260;
                if ((void *)v260 >= v480[1])
                  v288 = v260 % (unint64_t)v480[1];
              }
              else
              {
                v288 = ((unint64_t)v480[1] - 1) & v260;
              }
              v289 = (_QWORD *)*((_QWORD *)v480[0] + v288);
              if (v289)
              {
                v290 = (_QWORD *)*v289;
                if (v290)
                {
                  if (v287.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v292 = v290[1];
                      if (v260 == v292)
                      {
                        if (v290[2] == v260)
                          goto LABEL_424;
                      }
                      else if ((v292 & ((uint64_t)v480[1] - 1)) != v288)
                      {
                        goto LABEL_485;
                      }
                      v290 = (_QWORD *)*v290;
                      if (!v290)
                        goto LABEL_485;
                    }
                  }
                  do
                  {
                    v291 = v290[1];
                    if (v260 == v291)
                    {
                      if (v290[2] == v260)
                        goto LABEL_424;
                    }
                    else
                    {
                      if ((void *)v291 >= v480[1])
                        v291 %= (unint64_t)v480[1];
                      if (v291 != v288)
                        break;
                    }
                    v290 = (_QWORD *)*v290;
                  }
                  while (v290);
                }
              }
            }
LABEL_485:
            v293 = sub_223F06830((uint64_t *)__p, v260, v497);
            v294 = v293;
            v296 = (_OWORD *)v293[4];
            v295 = v293[5];
            if ((unint64_t)v296 < v295)
            {
              *v296 = *v462;
              v258 = v296 + 1;
            }
            else
            {
              v297 = (_OWORD **)(v293 + 3);
              v298 = (_OWORD *)v293[3];
              v299 = v296 - v298;
              v300 = v299 + 1;
              if ((unint64_t)(v299 + 1) >> 60)
LABEL_787:
                sub_22316E078();
              v301 = v295 - (_QWORD)v298;
              if (v301 >> 3 > v300)
                v300 = v301 >> 3;
              if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFF0)
                v302 = 0xFFFFFFFFFFFFFFFLL;
              else
                v302 = v300;
              if (v302)
              {
                if (v302 >> 60)
LABEL_790:
                  sub_223174E94();
                v303 = (char *)operator new(16 * v302);
              }
              else
              {
                v303 = 0;
              }
              v304 = &v303[16 * v299];
              *(_OWORD *)v304 = *v462;
              v305 = v304;
              if (v296 != v298)
              {
                do
                {
                  *((_OWORD *)v305 - 1) = *(v296 - 1);
                  v305 -= 16;
                  --v296;
                }
                while (v296 != v298);
                v296 = *v297;
              }
              v258 = v304 + 16;
              v294[3] = v305;
              v294[4] = v304 + 16;
              v294[5] = &v303[16 * v302];
              if (v296)
                operator delete(v296);
            }
            v259 = v457;
            v294[4] = v258;
          }
LABEL_424:
          v257 += 40;
          v216 = v468;
          if (v257 == v259)
          {
            v306 = *(_QWORD **)v487;
            if (!*(_QWORD *)v487)
              goto LABEL_601;
            while (1)
            {
              v307 = v306[2];
              v308 = *a2;
              v309 = *a2 + 464 * v307;
              v310 = *(float *)(v216 + 8);
              v311 = sub_22342DA5C(v465, v309);
              if (v311)
                v312 = (uint64_t)(v311 + 4);
              else
                v312 = 0;
              v314 = v306[3];
              v313 = v306[4];
              if (v314 == v313)
                goto LABEL_586;
              v315 = 0;
              v316 = v308;
              v317 = (_BYTE *)(v312 + 56);
              v458 = v316;
              v463 = v307;
              v318 = v316 + 464 * v307 + 392;
              while (2)
              {
                v319 = sub_22456636C((unsigned __int8 *)v314);
                v320 = *(int8x8_t *)(v216 + 72);
                if (!*(_QWORD *)&v320)
                  goto LABEL_564;
                v321 = (uint8x8_t)vcnt_s8(v320);
                v321.i16[0] = vaddlv_u8(v321);
                if (v321.u32[0] > 1uLL)
                {
                  v322 = v319;
                  if (v319 >= *(_QWORD *)&v320)
                    v322 = v319 % *(_QWORD *)&v320;
                }
                else
                {
                  v322 = (*(_QWORD *)&v320 - 1) & v319;
                }
                v323 = *(_QWORD *)(*(_QWORD *)(v216 + 64) + 8 * v322);
                if (!v323)
                {
                  v330 = 0;
                  if (!*(_BYTE *)(v312 + 80))
                    goto LABEL_776;
                  goto LABEL_566;
                }
                v324 = *(_QWORD **)v323;
                if (!*(_QWORD *)v323)
                  goto LABEL_564;
                if (v321.u32[0] < 2uLL)
                {
                  v325 = *(_QWORD *)&v320 - 1;
                  while (1)
                  {
                    v329 = v324[1];
                    if (v319 == v329)
                    {
                      if (v324[2] == *(_QWORD *)v314 && v324[3] == *(_QWORD *)(v314 + 8))
                        goto LABEL_538;
                    }
                    else if ((v329 & v325) != v322)
                    {
                      goto LABEL_564;
                    }
                    v324 = (_QWORD *)*v324;
                    if (!v324)
                      goto LABEL_564;
                  }
                }
                while (1)
                {
                  v327 = v324[1];
                  if (v319 == v327)
                    break;
                  if (v327 >= *(_QWORD *)&v320)
                    v327 %= *(_QWORD *)&v320;
                  if (v327 != v322)
                    goto LABEL_564;
LABEL_522:
                  v324 = (_QWORD *)*v324;
                  if (!v324)
                    goto LABEL_564;
                }
                if (v324[2] != *(_QWORD *)v314 || v324[3] != *(_QWORD *)(v314 + 8))
                  goto LABEL_522;
LABEL_538:
                v331 = sub_22456636C((unsigned __int8 *)v309);
                v332 = (int8x8_t)v324[5];
                if (v332)
                {
                  v333 = (uint8x8_t)vcnt_s8(v332);
                  v333.i16[0] = vaddlv_u8(v333);
                  if (v333.u32[0] > 1uLL)
                  {
                    v334 = v331;
                    if (v331 >= *(_QWORD *)&v332)
                      v334 = v331 % *(_QWORD *)&v332;
                  }
                  else
                  {
                    v334 = (*(_QWORD *)&v332 - 1) & v331;
                  }
                  v335 = *(_QWORD **)(v324[4] + 8 * v334);
                  if (v335)
                  {
                    v336 = (_QWORD *)*v335;
                    if (v336)
                    {
                      if (v333.u32[0] < 2uLL)
                      {
                        v337 = *(_QWORD *)&v332 - 1;
                        while (1)
                        {
                          v341 = v336[1];
                          if (v331 == v341)
                          {
                            if (v336[2] == *(_QWORD *)v309 && v336[3] == *(_QWORD *)(v309 + 8))
                              goto LABEL_582;
                          }
                          else if ((v341 & v337) != v334)
                          {
                            goto LABEL_564;
                          }
                          v323 = 0;
                          v330 = 0;
                          v336 = (_QWORD *)*v336;
                          if (!v336)
                            goto LABEL_565;
                        }
                      }
                      while (1)
                      {
                        v339 = v336[1];
                        if (v331 == v339)
                        {
                          if (v336[2] == *(_QWORD *)v309 && v336[3] == *(_QWORD *)(v309 + 8))
                          {
LABEL_582:
                            v330 = (unint64_t)(v336 + 4) & 0xFFFFFFFFFFFFFF00;
                            v323 = ((_BYTE)v336 + 32);
                            if (!*(_BYTE *)(v312 + 80))
                              goto LABEL_776;
                            goto LABEL_566;
                          }
                        }
                        else
                        {
                          if (v339 >= *(_QWORD *)&v332)
                            v339 %= *(_QWORD *)&v332;
                          if (v339 != v334)
                            break;
                        }
                        v323 = 0;
                        v330 = 0;
                        v336 = (_QWORD *)*v336;
                        if (!v336)
                          goto LABEL_565;
                      }
                    }
                  }
                }
LABEL_564:
                v323 = 0;
                v330 = 0;
LABEL_565:
                if (!*(_BYTE *)(v312 + 80))
LABEL_776:
                  sub_22324A974();
LABEL_566:
                sub_223F01D98((uint64_t)v497, (float **)(v312 + 56), v318, *(float32x2_t *)(v330 | v323), *(float32x2_t *)((v330 | v323) + 8), v310, 0.0, 0.0);
                if (v499)
                {
                  if (*(unsigned __int8 *)(v312 + 80) == v499)
                  {
                    if (v317 != v497)
                      sub_2233320C8((_QWORD *)(v312 + 56), *(char **)v497, *(char **)&v497[8], (uint64_t)(*(_QWORD *)&v497[8] - *(_QWORD *)v497) >> 3);
                  }
                  else
                  {
                    if (*(_BYTE *)(v312 + 80))
                    {
                      v342 = *(void **)v317;
                      if (*(_QWORD *)v317)
                      {
                        *(_QWORD *)(v312 + 64) = v342;
                        operator delete(v342);
                      }
                      v343 = 0;
                    }
                    else
                    {
                      *(_QWORD *)v317 = 0;
                      *(_QWORD *)(v312 + 64) = 0;
                      *(_QWORD *)(v312 + 72) = 0;
                      v344 = *(const void **)v497;
                      v345 = *(_QWORD *)&v497[8] - *(_QWORD *)v497;
                      if (*(_QWORD *)&v497[8] != *(_QWORD *)v497)
                      {
                        if (v345 < 0)
                          sub_22316E078();
                        v346 = (char *)operator new(*(_QWORD *)&v497[8] - *(_QWORD *)v497);
                        *(_QWORD *)(v312 + 56) = v346;
                        *(_QWORD *)(v312 + 64) = v346;
                        *(_QWORD *)(v312 + 72) = &v346[8 * (v345 >> 3)];
                        v347 = v345 & 0xFFFFFFFFFFFFFFF8;
                        memcpy(v346, v344, v347);
                        *(_QWORD *)(v312 + 64) = &v346[v347];
                      }
                      v343 = 1;
                      v216 = v468;
                    }
                    *(_BYTE *)(v312 + 80) = v343;
                  }
                  if (v499 && *(_QWORD *)v497)
                  {
                    *(_QWORD *)&v497[8] = *(_QWORD *)v497;
                    operator delete(*(void **)v497);
                  }
                  v315 = 1;
                }
                v314 += 16;
                if (v314 != v313)
                  continue;
                break;
              }
              v308 = v458;
              v307 = v463;
              if ((v315 & 1) != 0)
              {
                sub_223F01308(v312);
                *(_DWORD *)(v458 + 464 * v463 + 224) = 0;
              }
LABEL_586:
              v348 = v308 + 464 * v307;
              v349 = (_QWORD *)(v348 + 304);
              v350 = *(unsigned __int8 *)(v348 + 320);
              if (v350 != *(unsigned __int8 *)(v312 + 16))
              {
                v355 = (_BYTE *)(v348 + 320);
                if (!v350)
                {
                  *v349 = *(_QWORD *)v312;
                  *(_QWORD *)(v308 + 464 * v307 + 312) = *(_QWORD *)(v312 + 8);
                  *v355 = 1;
                  v351 = v308 + 464 * v307;
                  v352 = (_QWORD *)(v351 + 324);
                  v353 = *(unsigned __int8 *)(v351 + 356);
                  if (v353 != *(unsigned __int8 *)(v312 + 52))
                    goto LABEL_589;
                  goto LABEL_594;
                }
                *v355 = 0;
LABEL_593:
                v351 = v308 + 464 * v307;
                v352 = (_QWORD *)(v351 + 324);
                v353 = *(unsigned __int8 *)(v351 + 356);
                if (v353 != *(unsigned __int8 *)(v312 + 52))
                  goto LABEL_589;
                goto LABEL_594;
              }
              if (!*(_BYTE *)(v348 + 320))
                goto LABEL_593;
              *v349 = *(_QWORD *)v312;
              *(_QWORD *)(v308 + 464 * v307 + 312) = *(_QWORD *)(v312 + 8);
              v351 = v308 + 464 * v307;
              v352 = (_QWORD *)(v351 + 324);
              v353 = *(unsigned __int8 *)(v351 + 356);
              if (v353 != *(unsigned __int8 *)(v312 + 52))
              {
LABEL_589:
                v354 = (_BYTE *)(v351 + 356);
                if (v353)
                {
                  *v354 = 0;
                }
                else
                {
                  *v352 = *(_QWORD *)(v312 + 20);
                  v357 = (_QWORD *)(v308 + 464 * v307 + 324);
                  v357[1] = *(_QWORD *)(v312 + 28);
                  v357[2] = *(_QWORD *)(v312 + 36);
                  v357[3] = *(_QWORD *)(v312 + 44);
                  *v354 = 1;
                }
                goto LABEL_597;
              }
LABEL_594:
              if (v353)
              {
                *v352 = *(_QWORD *)(v312 + 20);
                v356 = (_QWORD *)(v308 + 464 * v307 + 324);
                v356[1] = *(_QWORD *)(v312 + 28);
                v356[2] = *(_QWORD *)(v312 + 36);
                v356[3] = *(_QWORD *)(v312 + 44);
              }
LABEL_597:
              sub_223331FC0(v308 + 464 * v307 + 360, v312 + 56);
              v306 = (_QWORD *)*v306;
              if (!v306)
              {
LABEL_601:
                v358 = v481[0];
                if (!v481[0])
                  goto LABEL_717;
                goto LABEL_604;
              }
            }
          }
        }
        if (v480[1])
        {
          v265 = (uint8x8_t)vcnt_s8((int8x8_t)v480[1]);
          v265.i16[0] = vaddlv_u8(v265);
          if (v265.u32[0] > 1uLL)
          {
            v266 = v261;
            if ((void *)v261 >= v480[1])
              v266 = v261 % (unint64_t)v480[1];
          }
          else
          {
            v266 = ((unint64_t)v480[1] - 1) & v261;
          }
          v267 = (_QWORD *)*((_QWORD *)v480[0] + v266);
          if (v267)
          {
            v268 = (_QWORD *)*v267;
            if (v268)
            {
              if (v265.u32[0] < 2uLL)
              {
                while (1)
                {
                  v270 = v268[1];
                  if (v261 == v270)
                  {
                    if (v268[2] == v261)
                      goto LABEL_464;
                  }
                  else if ((v270 & ((uint64_t)v480[1] - 1)) != v266)
                  {
                    goto LABEL_446;
                  }
                  v268 = (_QWORD *)*v268;
                  if (!v268)
                    goto LABEL_446;
                }
              }
              do
              {
                v269 = v268[1];
                if (v261 == v269)
                {
                  if (v268[2] == v261)
                    goto LABEL_464;
                }
                else
                {
                  if ((void *)v269 >= v480[1])
                    v269 %= (unint64_t)v480[1];
                  if (v269 != v266)
                    break;
                }
                v268 = (_QWORD *)*v268;
              }
              while (v268);
            }
          }
        }
LABEL_446:
        v271 = sub_223F06830((uint64_t *)__p, v261, &v470);
        v272 = v271;
        v274 = (_OWORD *)v271[4];
        v273 = v271[5];
        if ((unint64_t)v274 < v273)
        {
          *v274 = *v262;
          v275 = v274 + 1;
LABEL_463:
          v264 = v468;
          v272[4] = v275;
          goto LABEL_464;
        }
        v276 = (_OWORD **)(v271 + 3);
        v277 = (_OWORD *)v271[3];
        v278 = v274 - v277;
        v279 = v278 + 1;
        if ((unint64_t)(v278 + 1) >> 60)
          goto LABEL_787;
        v280 = v273 - (_QWORD)v277;
        if (v280 >> 3 > v279)
          v279 = v280 >> 3;
        if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFF0)
          v281 = 0xFFFFFFFFFFFFFFFLL;
        else
          v281 = v279;
        if (v281)
        {
          if (v281 >> 60)
            goto LABEL_790;
          v282 = v281;
          v283 = (char *)operator new(16 * v281);
          v281 = v282;
          v284 = &v283[16 * v278];
          *(_OWORD *)v284 = *v262;
          v285 = (uint64_t)v284;
          if (v274 == v277)
            goto LABEL_461;
          do
          {
LABEL_459:
            *(_OWORD *)(v285 - 16) = *(v274 - 1);
            v285 -= 16;
            --v274;
          }
          while (v274 != v277);
          v274 = *v276;
        }
        else
        {
          v283 = 0;
          v284 = (char *)(16 * v278);
          *(_OWORD *)(16 * v278) = *v262;
          v285 = 16 * v278;
          if (v274 != v277)
            goto LABEL_459;
        }
LABEL_461:
        v275 = v284 + 16;
        v272[3] = v285;
        v272[4] = v284 + 16;
        v272[5] = &v283[16 * v281];
        if (v274)
          operator delete(v274);
        goto LABEL_463;
      }
    }
    v197 = v190 + 464 * v189;
    v198 = v190 + 464 * v192;
    v15.i32[0] = *(_DWORD *)(v197 + 36);
    v199 = *(float32x2_t *)(v197 + 28);
    v200 = (float32x2_t)vdup_lane_s32((int32x2_t)v199, 1);
    v201 = vmla_f32(vmla_lane_f32(vmul_f32(v199, v199), v200, v199, 1), *(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32);
    v6.i32[0] = *(_DWORD *)(v198 + 36);
    v202 = *(float32x2_t *)(v198 + 28);
    v203 = (float32x2_t)vdup_lane_s32((int32x2_t)v202, 1);
    v204 = vmla_f32(vmla_lane_f32(vmul_f32(v202, v202), v203, v202, 1), *(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
    if (v201.f32[0] == 1.0)
      goto LABEL_387;
    v205 = v201.f32[0] + -1.0;
    if (v201.f32[0] < 1.0)
      v205 = 1.0 - v201.f32[0];
    if (v205 <= 0.000001)
    {
LABEL_387:
      if (v204.f32[0] != 1.0)
      {
        v209 = v204.f32[0] + -1.0;
        if (v204.f32[0] < 1.0)
          v209 = 1.0 - v204.f32[0];
        if (v209 > 0.000001)
        {
          LODWORD(v207) = vmla_f32(vmla_f32(vmul_f32(v199, v202), v203, v200), *(float32x2_t *)v6.f32, *(float32x2_t *)v15.f32).u32[0];
          v208 = sqrtf(v204.f32[0]);
          goto LABEL_391;
        }
      }
      LODWORD(v210) = vmla_f32(vmla_f32(vmul_f32(v199, v202), v203, v200), *(float32x2_t *)v6.f32, *(float32x2_t *)v15.f32).u32[0];
    }
    else
    {
      if (v204.f32[0] == 1.0)
        goto LABEL_390;
      v206 = v204.f32[0] + -1.0;
      if (v204.f32[0] < 1.0)
        v206 = 1.0 - v204.f32[0];
      if (v206 <= 0.000001)
      {
LABEL_390:
        LODWORD(v207) = vmla_f32(vmla_f32(vmul_f32(v199, v202), v203, v200), *(float32x2_t *)v6.f32, *(float32x2_t *)v15.f32).u32[0];
        v208 = sqrtf(v201.f32[0]);
      }
      else
      {
        LODWORD(v207) = vmla_f32(vmla_f32(vmul_f32(v199, v202), v203, v200), *(float32x2_t *)v6.f32, *(float32x2_t *)v15.f32).u32[0];
        v208 = sqrtf(vmul_f32(v201, v204).f32[0]);
      }
LABEL_391:
      v210 = v207 / v208;
    }
    v15.f32[0] = acosf(fabsf(v210)) * 57.296;
    v5.i32[0] = *(_DWORD *)v468;
    if (v15.f32[0] < *(float *)v468)
      goto LABEL_394;
    goto LABEL_393;
  }
  v455 = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v487 = 0u;
  *(_DWORD *)&v487[16] = 1065353216;
  v216 = v468;
  v358 = v481[0];
  if (!v481[0])
    goto LABEL_717;
LABEL_604:
  v464 = (_QWORD *)(v216 + 64);
  while (2)
  {
    v359 = v358[2];
    v360 = *a2;
    v361 = *a2 + 464 * v359;
    v362 = *(float *)(v216 + 8);
    v363 = sub_22456636C((unsigned __int8 *)v361);
    v364 = *(int8x8_t *)(v216 + 112);
    if (!*(_QWORD *)&v364)
      goto LABEL_605;
    v365 = (uint8x8_t)vcnt_s8(v364);
    v365.i16[0] = vaddlv_u8(v365);
    if (v365.u32[0] > 1uLL)
    {
      v366 = v363;
      if (v363 >= *(_QWORD *)&v364)
        v366 = v363 % *(_QWORD *)&v364;
    }
    else
    {
      v366 = (*(_QWORD *)&v364 - 1) & v363;
    }
    v367 = *(_QWORD **)(*(_QWORD *)(v216 + 104) + 8 * v366);
    if (!v367)
      goto LABEL_605;
    v368 = (_QWORD *)*v367;
    if (!*v367)
      goto LABEL_605;
    if (v365.u32[0] < 2uLL)
    {
      v369 = *(_QWORD *)&v364 - 1;
      while (1)
      {
        v373 = v368[1];
        if (v363 == v373)
        {
          if (v368[2] == *(_QWORD *)v361 && v368[3] == *(_QWORD *)(v361 + 8))
            goto LABEL_633;
        }
        else if ((v373 & v369) != v366)
        {
          goto LABEL_605;
        }
        v368 = (_QWORD *)*v368;
        if (!v368)
          goto LABEL_605;
      }
    }
    while (2)
    {
      v371 = v368[1];
      if (v363 != v371)
      {
        if (v371 >= *(_QWORD *)&v364)
          v371 %= *(_QWORD *)&v364;
        if (v371 != v366)
          goto LABEL_605;
        goto LABEL_619;
      }
      if (v368[2] != *(_QWORD *)v361 || v368[3] != *(_QWORD *)(v361 + 8))
      {
LABEL_619:
        v368 = (_QWORD *)*v368;
        if (!v368)
          goto LABEL_605;
        continue;
      }
      break;
    }
LABEL_633:
    v374 = v368[7];
    if (!v374)
    {
      v375 = 0;
      v376 = 0;
      v377 = (_QWORD *)v368[6];
      if (v377)
        goto LABEL_636;
LABEL_703:
      v216 = v468;
      goto LABEL_713;
    }
    if (v374 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v375 = (char *)operator new(24 * v374);
    v376 = &v375[24 * v374];
    v377 = (_QWORD *)v368[6];
    if (!v377)
      goto LABEL_703;
LABEL_636:
    v453 = v360;
    v378 = v375;
    do
    {
LABEL_638:
      v380 = v377 + 2;
      v381 = sub_223340F28(v464, (uint64_t)(v377 + 2));
      if (!v381)
        goto LABEL_773;
      v382 = sub_22456636C((unsigned __int8 *)v361);
      v383 = (int8x8_t)v381[5];
      if (!*(_QWORD *)&v383)
        goto LABEL_773;
      v384 = (uint8x8_t)vcnt_s8(v383);
      v384.i16[0] = vaddlv_u8(v384);
      if (v384.u32[0] > 1uLL)
      {
        v385 = v382;
        if (v382 >= *(_QWORD *)&v383)
          v385 = v382 % *(_QWORD *)&v383;
      }
      else
      {
        v385 = (*(_QWORD *)&v383 - 1) & v382;
      }
      v386 = *(_QWORD **)(v381[4] + 8 * v385);
      if (!v386 || (v387 = (_QWORD *)*v386) == 0)
LABEL_773:
        sub_223198218("unordered_map::at: key not found");
      if (v384.u32[0] < 2uLL)
      {
        v388 = *(_QWORD *)&v383 - 1;
        while (1)
        {
          v391 = v387[1];
          if (v382 == v391)
          {
            if (v387[2] == *(_QWORD *)v361 && v387[3] == *(_QWORD *)(v361 + 8))
              goto LABEL_667;
          }
          else if ((v391 & v388) != v385)
          {
            goto LABEL_773;
          }
          v387 = (_QWORD *)*v387;
          if (!v387)
            goto LABEL_773;
        }
      }
      while (1)
      {
        v389 = v387[1];
        if (v382 == v389)
          break;
        if (v389 >= *(_QWORD *)&v383)
          v389 %= *(_QWORD *)&v383;
        if (v389 != v385)
          goto LABEL_773;
LABEL_649:
        v387 = (_QWORD *)*v387;
        if (!v387)
          goto LABEL_773;
      }
      if (v387[2] != *(_QWORD *)v361 || v387[3] != *(_QWORD *)(v361 + 8))
        goto LABEL_649;
LABEL_667:
      v393 = v387 + 4;
      if (v378 < v376)
      {
        *(_OWORD *)v378 = *v380;
        *((_QWORD *)v378 + 2) = v393;
        v378 += 24;
        v379 = (_QWORD *)(v468 + 24);
        v377 = (_QWORD *)*v377;
        if (!v377)
          break;
        goto LABEL_638;
      }
      v394 = 0xAAAAAAAAAAAAAAABLL * ((v378 - v375) >> 3) + 1;
      if (v394 > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      if (0x5555555555555556 * ((v376 - v375) >> 3) > v394)
        v394 = 0x5555555555555556 * ((v376 - v375) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v376 - v375) >> 3) >= 0x555555555555555)
        v395 = 0xAAAAAAAAAAAAAAALL;
      else
        v395 = v394;
      if (v395 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v396 = (char *)operator new(24 * v395);
      v397 = &v396[8 * ((v378 - v375) >> 3)];
      *(_OWORD *)v397 = *v380;
      *((_QWORD *)v397 + 2) = v393;
      if (v378 == v375)
      {
        v399 = &v396[8 * ((v378 - v375) >> 3)];
        v376 = &v396[24 * v395];
        v378 = v397 + 24;
        v379 = (_QWORD *)(v468 + 24);
        if (v375)
          goto LABEL_679;
      }
      else
      {
        v398 = &v396[8 * ((v378 - v375) >> 3)];
        do
        {
          v399 = v398 - 24;
          v400 = *(_OWORD *)(v378 - 24);
          *((_QWORD *)v398 - 1) = *((_QWORD *)v378 - 1);
          *(_OWORD *)(v398 - 24) = v400;
          v378 -= 24;
          v398 -= 24;
        }
        while (v378 != v375);
        v376 = &v396[24 * v395];
        v378 = v397 + 24;
        v379 = (_QWORD *)(v468 + 24);
        if (v375)
LABEL_679:
          operator delete(v375);
      }
      v375 = v399;
      v377 = (_QWORD *)*v377;
    }
    while (v377);
    if (v375 == v378)
    {
      v216 = v468;
      goto LABEL_713;
    }
    v401 = sub_22342DA5C(v379, v361);
    v216 = v468;
    v402 = 0;
    if (v401)
      v403 = (uint64_t)(v401 + 4);
    else
      v403 = 0;
    v404 = (float32x2_t **)v375;
    do
    {
      if (!*(_BYTE *)(v403 + 80))
        sub_22324A974();
      sub_223F01D98((uint64_t)v497, (float **)(v403 + 56), v453 + 464 * v359 + 392, *v404[2], v404[2][1], v362, 0.0, 0.0);
      if (v499)
      {
        sub_223331FC0(v403 + 56, (uint64_t)v497);
        if (v499 && *(_QWORD *)v497)
        {
          *(_QWORD *)&v497[8] = *(_QWORD *)v497;
          operator delete(*(void **)v497);
        }
        v402 = 1;
      }
      v404 += 3;
    }
    while (v404 != (float32x2_t **)v378);
    if ((v402 & 1) != 0)
    {
      sub_223F01308(v403);
      v405 = v453 + 464 * v359;
      *(_DWORD *)(v405 + 224) = 0;
      v406 = (_QWORD *)(v405 + 304);
      v407 = *(unsigned __int8 *)(v405 + 320);
      if (v407 == *(unsigned __int8 *)(v403 + 16))
      {
        if (*(_BYTE *)(v405 + 320))
        {
          *v406 = *(_QWORD *)v403;
          *(_QWORD *)(v453 + 464 * v359 + 312) = *(_QWORD *)(v403 + 8);
          v408 = v453 + 464 * v359;
          v409 = (_QWORD *)(v408 + 324);
          v410 = *(unsigned __int8 *)(v408 + 356);
          if (v410 != *(unsigned __int8 *)(v403 + 52))
          {
LABEL_700:
            v411 = (_BYTE *)(v408 + 356);
            if (v410)
            {
              *v411 = 0;
            }
            else
            {
              *v409 = *(_QWORD *)(v403 + 20);
              v414 = (_QWORD *)(v453 + 464 * v359 + 324);
              v414[1] = *(_QWORD *)(v403 + 28);
              v414[2] = *(_QWORD *)(v403 + 36);
              v414[3] = *(_QWORD *)(v403 + 44);
              *v411 = 1;
            }
            goto LABEL_712;
          }
LABEL_709:
          if (v410)
          {
            *v409 = *(_QWORD *)(v403 + 20);
            v413 = (_QWORD *)(v453 + 464 * v359 + 324);
            v413[1] = *(_QWORD *)(v403 + 28);
            v413[2] = *(_QWORD *)(v403 + 36);
            v413[3] = *(_QWORD *)(v403 + 44);
          }
LABEL_712:
          sub_223331FC0(v453 + 464 * v359 + 360, v403 + 56);
          goto LABEL_713;
        }
      }
      else
      {
        v412 = (_BYTE *)(v405 + 320);
        if (!v407)
        {
          *v406 = *(_QWORD *)v403;
          *(_QWORD *)(v453 + 464 * v359 + 312) = *(_QWORD *)(v403 + 8);
          *v412 = 1;
          v408 = v453 + 464 * v359;
          v409 = (_QWORD *)(v408 + 324);
          v410 = *(unsigned __int8 *)(v408 + 356);
          if (v410 != *(unsigned __int8 *)(v403 + 52))
            goto LABEL_700;
          goto LABEL_709;
        }
        *v412 = 0;
      }
      v408 = v453 + 464 * v359;
      v409 = (_QWORD *)(v408 + 324);
      v410 = *(unsigned __int8 *)(v408 + 356);
      if (v410 != *(unsigned __int8 *)(v403 + 52))
        goto LABEL_700;
      goto LABEL_709;
    }
LABEL_713:
    if (v375)
      operator delete(v375);
LABEL_605:
    v358 = (_QWORD *)*v358;
    if (v358)
      continue;
    break;
  }
LABEL_717:
  v416 = *a2;
  v415 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v417 = v415 - v416;
  if (v417)
  {
    v418 = 0x34F72C234F72C235 * (v417 >> 4);
    if (v418 > 0xAAAAAAAAAAAAAAALL)
      sub_223323BA8();
    v419 = (char *)operator new(0xF72C234F72C234F8 * (v417 >> 4));
    *a3 = v419;
    a3[2] = &v419[24 * v418];
    bzero(v419, 24 * ((24 * v418 - 24) / 0x18) + 24);
    v420 = 0;
    v466 = v419;
    a3[1] = &v419[24 * ((24 * v418 - 24) / 0x18) + 24];
    v469 = (_QWORD *)(v216 + 64);
    for (k = sub_223340F28((_QWORD *)(v216 + 64), v416); ; k = sub_223340F28(v469, *a2 + 464 * v420))
    {
      if (k)
      {
        v422 = (uint64_t *)k[6];
        if (v422)
        {
          v423 = &v466[24 * v420];
          v424 = (char **)(v423 + 8);
          v425 = (char *)*((_QWORD *)v423 + 1);
          v426 = v423 + 16;
          do
          {
            while (1)
            {
              *(_QWORD *)v497 = v422[6];
              *(_DWORD *)&v497[8] = *((_DWORD *)v422 + 14);
              *(_QWORD *)&v497[12] = *(uint64_t *)((char *)v422 + 60);
              v498 = *((_DWORD *)v422 + 17);
              if ((unint64_t)v425 >= *v426)
                break;
              v427 = v422[6];
              *((_DWORD *)v425 + 2) = *((_DWORD *)v422 + 14);
              *(_QWORD *)v425 = v427;
              v428 = *(_QWORD *)&v497[12];
              *((_DWORD *)v425 + 5) = v498;
              *(_QWORD *)(v425 + 12) = v428;
              *v424 = v425 + 24;
              v422 = (uint64_t *)*v422;
              v425 += 24;
              if (!v422)
                goto LABEL_720;
            }
            v429 = *(char **)v423;
            v430 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v425[-*(_QWORD *)v423] >> 3);
            v431 = v430 + 1;
            if (v430 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_223323BA8();
            if (0x5555555555555556 * ((uint64_t)(*v426 - (_QWORD)v429) >> 3) > v431)
              v431 = 0x5555555555555556 * ((uint64_t)(*v426 - (_QWORD)v429) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v426 - (_QWORD)v429) >> 3) >= 0x555555555555555)
              v432 = 0xAAAAAAAAAAAAAAALL;
            else
              v432 = v431;
            if (v432)
            {
              if (v432 > 0xAAAAAAAAAAAAAAALL)
                sub_223174E94();
              v433 = (char *)operator new(24 * v432);
            }
            else
            {
              v433 = 0;
            }
            v434 = &v433[24 * v430];
            *(_QWORD *)v434 = *(_QWORD *)v497;
            *((_DWORD *)v434 + 2) = *(_DWORD *)&v497[8];
            *(_QWORD *)(v434 + 12) = *(_QWORD *)&v497[12];
            *((_DWORD *)v434 + 5) = v498;
            v435 = v434;
            if (v425 != v429)
            {
              do
              {
                v436 = *((_QWORD *)v425 - 3);
                v425 -= 24;
                v437 = *((_DWORD *)v425 + 2);
                *((_QWORD *)v435 - 3) = v436;
                v435 -= 24;
                *((_DWORD *)v435 + 2) = v437;
                v438 = *(_QWORD *)(v425 + 12);
                *((_DWORD *)v435 + 5) = *((_DWORD *)v425 + 5);
                *(_QWORD *)(v435 + 12) = v438;
              }
              while (v425 != v429);
              v425 = *(char **)v423;
            }
            *(_QWORD *)v423 = v435;
            v439 = v434 + 24;
            *v424 = v434 + 24;
            *v426 = &v433[24 * v432];
            if (v425)
              operator delete(v425);
            *v424 = v439;
            v422 = (uint64_t *)*v422;
            v425 = v439;
          }
          while (v422);
        }
      }
LABEL_720:
      if (++v420 >= (unint64_t)(0x34F72C234F72C235 * ((a2[1] - *a2) >> 4)))
        break;
    }
  }
  v440 = *(_QWORD **)v487;
  if (*(_QWORD *)v487)
  {
    do
    {
      v450 = (_QWORD *)*v440;
      v451 = (void *)v440[3];
      if (v451)
      {
        v440[4] = v451;
        operator delete(v451);
      }
      operator delete(v440);
      v440 = v450;
    }
    while (v450);
  }
  v441 = __p[0];
  __p[0] = 0;
  if (v441)
    operator delete(v441);
  if (v455)
    operator delete(v455);
  if (v471)
  {
    v472 = v471;
    operator delete(v471);
  }
  if (v474)
    operator delete(v474);
  if (v477)
  {
    v478 = (char *)v477;
    operator delete(v477);
  }
  v442 = v481[0];
  if (v481[0])
  {
    do
    {
      v443 = (_QWORD *)*v442;
      operator delete(v442);
      v442 = v443;
    }
    while (v443);
  }
  v444 = v480[0];
  v480[0] = 0;
  if (v444)
    operator delete(v444);
  v445 = v484[0];
  if (v484[0])
  {
    do
    {
      v446 = (_QWORD *)*v445;
      operator delete(v445);
      v445 = v446;
    }
    while (v446);
  }
  v447 = v483[0];
  v483[0] = 0;
  if (v447)
    operator delete(v447);
  if (!v496)
    sub_223198474();
  (*(void (**)(_QWORD *))(*v496 + 48))(v496);
  result = v496;
  if (v496 == v495)
  {
    v449 = 4;
    result = v495;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v449))();
  }
  else if (v496)
  {
    v449 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v449))();
  }
  return result;
}

void sub_223F058FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CDFF8);
  _Unwind_Resume(a1);
}

void sub_223F05914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  void *v45;
  void *v46;

  if (__p)
    operator delete(__p);
  if (a22)
  {
    operator delete(a22);
    v45 = a25;
    if (!a25)
    {
LABEL_5:
      v46 = a28;
      if (!a28)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else
  {
    v45 = a25;
    if (!a25)
      goto LABEL_5;
  }
  operator delete(v45);
  v46 = a28;
  if (!a28)
  {
LABEL_7:
    sub_22322E828((uint64_t)&a31);
    sub_22322E828((uint64_t)&a37);
    sub_22318A1C8((_QWORD *)(v43 - 192));
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(v46);
  goto LABEL_7;
}

void sub_223F05BFC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE008);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE008))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE000);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE008);
  }
  *a1 = qword_2540CE000;
}

void sub_223F05C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE008);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE008);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F05CF0(uint64_t *a1, uint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;

  v7 = sub_22456636C((unsigned __int8 *)a2);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v12[1];
            if (v16 == v7)
            {
              if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
                return v12;
            }
            else if ((v16 & (v9 - 1)) != v3)
            {
              goto LABEL_28;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_28;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v7)
          {
            if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_28:
  v17 = a1 + 2;
  v12 = operator new(0x48uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = **a3;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *((_DWORD *)v12 + 16) = 1065353216;
  v18 = (float)(unint64_t)(a1[3] + 1);
  v19 = *((float *)a1 + 8);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = a1[1];
    }
    if (prime > v9)
    {
LABEL_42:
      if (prime >> 61)
        sub_223174E94();
      v26 = operator new(8 * prime);
      v27 = (void *)*a1;
      *a1 = (uint64_t)v26;
      if (v27)
        operator delete(v27);
      v28 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v28++) = 0;
      while (prime != v28);
      v29 = (_QWORD *)*v17;
      if (!*v17)
        goto LABEL_74;
      v30 = v29[1];
      v31 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v32 = v30 & v31;
        *(_QWORD *)(*a1 + 8 * v32) = v17;
        for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
        {
          v34 = i[1] & v31;
          if (v34 == v32)
          {
            v29 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v34))
          {
            *v29 = *i;
            v35 = 8 * v34;
            *i = **(_QWORD **)(*a1 + v35);
            **(_QWORD **)(*a1 + v35) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v34) = v29;
            v29 = i;
            v32 = v34;
          }
        }
        goto LABEL_74;
      }
      if (v30 >= prime)
        v30 %= prime;
      *(_QWORD *)(*a1 + 8 * v30) = v17;
      v39 = (_QWORD *)*v29;
      if (!*v29)
      {
LABEL_74:
        v9 = prime;
        v42 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_75;
        goto LABEL_90;
      }
      while (1)
      {
        v41 = v39[1];
        if (v41 >= prime)
          v41 %= prime;
        if (v41 == v30)
          goto LABEL_68;
        if (*(_QWORD *)(*a1 + 8 * v41))
        {
          *v29 = *v39;
          v40 = 8 * v41;
          *v39 = **(_QWORD **)(*a1 + v40);
          **(_QWORD **)(*a1 + v40) = v39;
          v39 = v29;
LABEL_68:
          v29 = v39;
          v39 = (_QWORD *)*v39;
          if (!v39)
            goto LABEL_74;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v41) = v29;
          v29 = v39;
          v39 = (_QWORD *)*v39;
          v30 = v41;
          if (!v39)
            goto LABEL_74;
        }
      }
    }
    if (prime < v9)
    {
      v36 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < v9)
      {
        if (!prime)
        {
          v43 = (void *)*a1;
          *a1 = 0;
          if (v43)
            operator delete(v43);
          v9 = 0;
          a1[1] = 0;
          v42 = -1;
          goto LABEL_90;
        }
        goto LABEL_42;
      }
      v9 = a1[1];
    }
    v42 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
LABEL_75:
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v20 = *a1;
        v21 = *(_QWORD **)(*a1 + 8 * (v8 % v9));
        if (v21)
          goto LABEL_31;
      }
      else
      {
        v3 = v8;
        v20 = *a1;
        v21 = *(_QWORD **)(*a1 + 8 * v8);
        if (v21)
          goto LABEL_31;
      }
      goto LABEL_91;
    }
LABEL_90:
    v3 = v42 & v8;
    v20 = *a1;
    v21 = *(_QWORD **)(*a1 + 8 * (v42 & v8));
    if (v21)
      goto LABEL_31;
    goto LABEL_91;
  }
  v20 = *a1;
  v21 = *(_QWORD **)(*a1 + 8 * v3);
  if (v21)
  {
LABEL_31:
    *v12 = *v21;
LABEL_97:
    *v21 = v12;
    goto LABEL_98;
  }
LABEL_91:
  *v12 = *v17;
  *v17 = v12;
  *(_QWORD *)(v20 + 8 * v3) = v17;
  if (*v12)
  {
    v44 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v44 >= v9)
        v44 %= v9;
    }
    else
    {
      v44 &= v9 - 1;
    }
    v21 = (_QWORD *)(*a1 + 8 * v44);
    goto LABEL_97;
  }
LABEL_98:
  ++a1[3];
  return v12;
}

void sub_223F061C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2238BBFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F061DC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_223F064E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223F064FC(float *a1, float *a2, float *a3, double a4, double a5, double a6, float32x4_t a7)
{
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32x4_t v18;
  BOOL v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;

  v7 = fabsf(*a1);
  v8 = fabsf(a1[1]);
  v9 = fabsf(a1[2]);
  if (v7 <= v8)
  {
    if (v8 > v9)
    {
      v10 = 1;
      v11 = a1[1];
      if (v11 == 0.0)
        return 1;
      goto LABEL_9;
    }
  }
  else if (v7 > v9)
  {
    v10 = 0;
    v11 = *a1;
    if (*a1 == 0.0)
      return 1;
    goto LABEL_9;
  }
  v10 = 2;
  v11 = a1[2];
  if (v11 == 0.0)
    return 1;
LABEL_9:
  v12 = *a3;
  v13 = 0.0 - v11;
  if (v11 >= 0.0)
    v13 = v11;
  if (v13 > v12)
  {
    v14 = *a2;
    if (*a2 != 0.0)
    {
      v15 = 0.0 - v14;
      if (*a2 >= 0.0)
        v15 = *a2;
      if (v15 > v12)
        goto LABEL_27;
    }
    v16 = a2[1];
    if (v16 != 0.0)
    {
      if (v16 < 0.0)
        v16 = 0.0 - v16;
      if (v16 > v12)
        goto LABEL_27;
    }
    v17 = a2[2];
    if (v17 != 0.0)
    {
      if (v17 < 0.0)
        v17 = 0.0 - v17;
      if (v17 > v12)
      {
LABEL_27:
        a7.i64[0] = *(_QWORD *)a1;
        a7.f32[2] = a1[2];
        v18 = vmulq_n_f32(a7, a2[v10] / v11);
        v19 = v14 < v18.f32[0];
        if (v14 != v18.f32[0])
        {
          v20 = v14 - v18.f32[0];
          v21 = v18.f32[0] - v14;
          if (!v19)
            v21 = v20;
          if (v21 > v12)
            return 0;
        }
        v22 = a2[1];
        if (v22 != v18.f32[1])
        {
          v23 = v18.f32[1] - v22;
          if (v22 >= v18.f32[1])
            v23 = v22 - v18.f32[1];
          if (v23 > v12)
            return 0;
        }
        v18.f32[0] = a2[2];
        if (v18.f32[0] != v18.f32[2])
        {
          v24 = v18.f32[2] - v18.f32[0];
          if (v18.f32[0] >= v18.f32[2])
            v24 = v18.f32[0] - v18.f32[2];
          if (v24 > v12)
            return 0;
        }
      }
    }
  }
  return 1;
}

void sub_223F0666C()
{
  JUMPOUT(0x227684CE8);
}

_WORD *sub_223F06680(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24EC641B0;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_223F066B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24EC641B0;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

void sub_223F066D8()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  kdebug_trace();
  sub_223F05BFC(&v2);
  if (**(int **)(v2 + 56) <= 1)
  {
    v0 = atomic_load((unsigned __int8 *)&qword_2540CE018);
    if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE018))
    {
      qword_2540CE010 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_ExtentsTrim");
      __cxa_guard_release(&qword_2540CE018);
    }
    v1 = qword_2540CE010;
    if (*(_BYTE *)(qword_2540CE010 + 16))
    {
      *(_QWORD *)(v1 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v1;
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
}

void sub_223F0679C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE018);
  _Unwind_Resume(a1);
}

uint64_t sub_223F067B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection13ExtentTrimmer11trimExtent"
                     "sERNS3_6vectorINS6_24ContinuousTrackingResultENS3_9allocatorIS9_EEEEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection13ExtentTrimmer1"
                                "1trimExtentsERNS3_6vectorINS6_24ContinuousTrackingResultENS3_9allocatorIS9_EEEEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection13ExtentTrimmer11trimExtentsERNS3_6vectorINS6_24ContinuousTrackingResultENS3_9allocatorIS9_EEEEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection13ExtentTrimmer11trimExtentsERNS3_6vectorINS6_24ContinuousTrackingResultENS3_9allocatorIS9_EEEEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F06824()
{
  return &unk_24EC64210;
}

_QWORD *sub_223F06830(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *v10 = *v17;
LABEL_90:
    *v17 = v10;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_223174E94();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_68;
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v13;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v13;
    v35 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v16 = *a1;
      v17 = *(_QWORD **)(*a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*a1 + 8 * v37))
      {
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
LABEL_62:
        v25 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v37) = v25;
        v25 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        a1[1] = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = a1[1];
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v5) = v13;
  if (*v10)
  {
    v40 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_223F06CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223EB996C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F06CE0(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v10 = *a1;
  v9 = a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v9 != v10)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3) > 0x924924924924924)
      sub_22316E078();
    v11 = (char *)operator new(0xAAAAAAAAAAAAAAB4 * ((v9 - v10) >> 3));
    *a2 = (uint64_t)v11;
    a2[1] = (uint64_t)v11;
    a2[2] = (uint64_t)&v11[0xAAAAAAAAAAAAAAB4 * ((v9 - v10) >> 3)];
    do
    {
      v13 = *(_DWORD *)(v10 + 8);
      v14 = *(_DWORD *)(v10 + 12);
      if (v14 == v13)
      {
        LODWORD(v6) &= 0xFFFFFF00;
        v15 = a2[2];
        if ((unint64_t)v11 < v15)
        {
          *v11 = 0;
          v11[24] = 0;
LABEL_5:
          v12 = v11 + 28;
          goto LABEL_6;
        }
      }
      else
      {
        v16 = a1[3];
        if (!v16
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v17 = (float *)(v16 + 12 * v13);
        v18 = &v17[3 * (v14 - v13)];
        v3 = v17[1];
        v2 = v17[2];
        v4 = *v17;
        v5 = v2;
        v7 = v3;
        v6 = *v17;
        do
        {
          v19 = v17[1];
          if (*v17 < v6)
            v6 = *v17;
          if (v19 < v7)
            v7 = v17[1];
          v20 = v17[2];
          if (v20 < v5)
            v5 = v17[2];
          if (v4 < *v17)
            v4 = *v17;
          if (v3 < v19)
            v3 = v17[1];
          if (v2 < v20)
            v2 = v17[2];
          v17 += 3;
        }
        while (v17 != v18);
        v15 = a2[2];
        if ((unint64_t)v11 < v15)
        {
          *(float *)v11 = v6;
          *((float *)v11 + 1) = v7;
          *((float *)v11 + 2) = v5;
          *((float *)v11 + 3) = v4;
          *((float *)v11 + 4) = v3;
          *((float *)v11 + 5) = v2;
          v11[24] = 1;
          goto LABEL_5;
        }
      }
      v21 = (char *)*a2;
      v22 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v11[-*a2] >> 2);
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) > 0x924924924924924)
        sub_22316E078();
      v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (_QWORD)v21) >> 2);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x492492492492492)
        v25 = 0x924924924924924;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 > 0x924924924924924)
          sub_223174E94();
        v26 = (char *)operator new(28 * v25);
        v27 = (uint64_t)&v26[28 * v22];
        *(_BYTE *)v27 = 0;
        *(_BYTE *)(v27 + 24) = 0;
        if (v14 == v13)
          goto LABEL_38;
      }
      else
      {
        v26 = 0;
        v27 = 4 * ((uint64_t)&v11[-*a2] >> 2);
        *(_BYTE *)v27 = 0;
        *(_BYTE *)(v27 + 24) = 0;
        if (v14 == v13)
          goto LABEL_38;
      }
      *(float *)v27 = v6;
      *(float *)(v27 + 4) = v7;
      *(float *)(v27 + 8) = v5;
      *(float *)(v27 + 12) = v4;
      *(float *)(v27 + 16) = v3;
      *(float *)(v27 + 20) = v2;
      *(_BYTE *)(v27 + 24) = 1;
LABEL_38:
      v28 = &v26[28 * v25];
      v12 = (char *)(v27 + 28);
      if (v11 == v21)
      {
        *a2 = v27;
        a2[1] = (uint64_t)v12;
        a2[2] = (uint64_t)v28;
      }
      else
      {
        v29 = 0;
        do
        {
          v30 = v27 + v29;
          *(_BYTE *)(v27 + v29 - 28) = 0;
          v31 = &v11[v29];
          *(_BYTE *)(v27 + v29 - 4) = 0;
          if (v11[v29 - 4])
          {
            v32 = *(_QWORD *)(v31 - 28);
            *(_DWORD *)(v27 + v29 - 20) = *((_DWORD *)v31 - 5);
            *(_QWORD *)(v27 + v29 - 28) = v32;
            v33 = *((_QWORD *)v31 - 2);
            *(_DWORD *)(v30 - 8) = *((_DWORD *)v31 - 2);
            *(_QWORD *)(v30 - 16) = v33;
            *(_BYTE *)(v30 - 4) = 1;
          }
          v29 -= 28;
        }
        while (&v11[v29] != v21);
        v11 = (char *)*a2;
        *a2 = v27 + v29;
        a2[1] = (uint64_t)v12;
        a2[2] = (uint64_t)v28;
        if (!v11)
          goto LABEL_6;
      }
      operator delete(v11);
LABEL_6:
      a2[1] = (uint64_t)v12;
      v10 += 24;
      v11 = v12;
    }
    while (v10 != v9);
  }
}

void sub_223F0707C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F070A0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  BOOL v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  _BOOL8 v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _BYTE size[32];
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  uint64_t v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;

  LODWORD(v42) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)size = 0;
  v44 = 0;
  sub_22346A424((unint64_t *)(a1 + 32), &v44, (unint64_t *)size, 1, &v42, 1, 0);
  *(_QWORD *)(a1 + 72) = 0;
  LODWORD(v42) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)size = 0;
  *(_DWORD *)&size[8] = 0;
  v44 = 0;
  v45 = 0;
  sub_22346985C(a1 + 112, (unsigned int *)&v44, (uint64_t *)size, 1, (uint64_t)&v42, 1, 0);
  *(_QWORD *)(a1 + 160) = 0;
  LOBYTE(v42) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)size = 0;
  v44 = 0;
  sub_223316930((size_t *)(a1 + 192), &v44, (void **)size, 1, (void **)&v42, 1, 0);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  v41 = 0;
  if (a2)
    v6 = a3 == 0;
  else
    v6 = 1;
  v7 = v6;
  if (v6)
    v8 = 0;
  else
    v8 = a2 | ((unint64_t)a3 << 32);
  if (HIDWORD(v8))
    v9 = v8 << 32;
  else
    v9 = 0;
  v10 = v8 != 0;
  if ((_DWORD)v8)
    v11 = HIDWORD(v8) == 0;
  else
    v11 = 1;
  v12 = v9 | v10;
  *(_QWORD *)size = v8;
  *(_QWORD *)&size[8] = v9 | v10;
  size[16] = 0;
  size[24] = 0;
  v44 = v9 | v10;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v42 = v13;
  if (((v9 >> 30) & ((v9 >> 30) - 1)) != 0)
    v14 = 4;
  else
    v14 = v9 >> 30;
  sub_22346A424(&v36, &v42, &v44, 1, &v41, 1, v14);
  *(_OWORD *)a1 = *(_OWORD *)size;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)&size[12];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v39;
  *(_QWORD *)(a1 + 32) = v36;
  v15 = *(void **)(a1 + 40);
  if (v15)
    free(v15);
  v16 = v38;
  *(_QWORD *)(a1 + 40) = v37;
  *(_QWORD *)(a1 + 48) = v16;
  v17 = ((unint64_t)a2 << 32) | 3;
  v41 = 0;
  if (v7)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v18 = a3;
  }
  v19 = HIDWORD(v17) * v17;
  if (v7)
    v19 = 0;
  if (HIDWORD(v17))
    v20 = v17 << 32;
  else
    v20 = 0;
  *(_QWORD *)size = v17;
  *(_DWORD *)&size[8] = v18;
  *(_QWORD *)&size[12] = v20 | ((_DWORD)v17 != 0);
  *(_DWORD *)&size[20] = v19;
  size[24] = 0;
  BYTE4(v36) = 0;
  v44 = *(_QWORD *)&size[12];
  v45 = v19;
  if (HIDWORD(v17))
    v21 = v17 == 0;
  else
    v21 = 1;
  v22 = v7 | v21;
  if (v22)
    v17 = 0;
  v42 = v17;
  if (v22)
    v23 = 0;
  else
    v23 = v18;
  v43 = v23;
  if (((4 * v19) & (4 * v19 - 1)) != 0)
    v24 = 4;
  else
    v24 = 4 * v19;
  sub_22346985C((uint64_t)&v37, (unsigned int *)&v42, (uint64_t *)&v44, 1, (uint64_t)&v41, 1, v24);
  v25 = *(_OWORD *)&size[16];
  *(_OWORD *)(a1 + 72) = *(_OWORD *)size;
  *(_OWORD *)(a1 + 88) = v25;
  v26 = v37;
  *(_QWORD *)(a1 + 104) = v36;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v39[8];
  *(_QWORD *)(a1 + 152) = v40;
  *(_QWORD *)(a1 + 112) = v26;
  v27 = *(void **)(a1 + 120);
  if (v27)
    free(v27);
  v28 = *(_QWORD *)v39;
  *(_QWORD *)(a1 + 120) = v38;
  *(_QWORD *)(a1 + 128) = v28;
  LOBYTE(v41) = 0;
  *(_QWORD *)size = v8;
  *(_QWORD *)&size[8] = v12;
  size[16] = 0;
  size[24] = 0;
  v44 = v12;
  if ((HIDWORD(v9) & (HIDWORD(v9) - 1)) != 0)
    v29 = 1;
  else
    v29 = HIDWORD(v9);
  v42 = v13;
  sub_223316930(&v36, &v42, (void **)&v44, 1, (void **)&v41, 1, v29);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)size;
  *(_OWORD *)(a1 + 172) = *(_OWORD *)&size[12];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)v39;
  *(_QWORD *)(a1 + 192) = v36;
  v30 = *(void **)(a1 + 200);
  if (v30)
    free(v30);
  v31 = v38;
  *(_QWORD *)(a1 + 200) = v37;
  *(_QWORD *)(a1 + 208) = v31;
  *(_QWORD *)size = a3 * (unint64_t)((4 * a2 + 15) & 0xFFFFFFF0);
  if (*(_QWORD *)size)
    v32 = malloc_type_malloc(*(size_t *)size, 0xAE2F145AuLL);
  else
    v32 = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a2 | ((unint64_t)a3 << 32);
  v33 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 248) = ((unint64_t)(((4 * a2 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
  *(_QWORD *)(a1 + 256) = v32;
  if (v33)
    free(v33);
  return a1;
}

void sub_223F07454(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)v1[32];
  if (v3)
  {
    free(v3);
    v1[32] = 0;
  }
  v4 = (void *)v1[25];
  if (v4)
    free(v4);
  v1[25] = 0;
  v5 = (void *)v1[15];
  if (v5)
    free(v5);
  v1[15] = 0;
  v6 = (void *)v1[5];
  if (v6)
    free(v6);
  v1[5] = 0;
  _Unwind_Resume(exception_object);
}

void sub_223F074B4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 40))
    JUMPOUT(0x223F074A8);
  JUMPOUT(0x223F074A4);
}

void sub_223F074C4(unsigned int *a1@<X0>, uint64_t *a2@<X1>, float32x2_t *a3@<X2>, float64x2_t *a4@<X3>, _QWORD *a5@<X4>, _BYTE *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  float32x2_t v8;
  float32x2_t v9;
  int v11;
  int v14;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  uint64_t v36;
  int i;
  unsigned int v38;
  _BYTE *v39;
  unsigned int v40;
  int v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t *v51;
  BOOL v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  _DWORD *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  _DWORD *v78;
  unsigned int v79;
  _DWORD *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  unint64_t v96;
  float32x4_t v97;
  float32x4_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  BOOL v102;
  float32x4_t *v103;
  unint64_t v104;
  int j;
  _DWORD *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  float32x4_t v112;
  int8x16_t v113;
  int32x4_t v114;
  int32x4_t v115;
  float32x2_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  float32x2_t v120;
  float32x4_t v121;
  int8x16_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x4_t v126;
  char *v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  float32x4_t v133;
  float32x4_t v134;
  _DWORD *v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  float v143;
  float v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  float32x4_t v151;
  _BOOL4 v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  unsigned int v179;
  _DWORD *v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  float32x2_t *v186;
  float32x2_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x2_t *v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x2_t *v194;
  _BOOL4 v195;
  uint64_t v196;
  BOOL v197;
  BOOL v198;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  signed int v206;
  signed int v207;
  float v208;
  signed int v209;
  signed int v210;
  float v211;
  signed int v212;
  signed int v213;
  float v214;
  signed int v215;
  signed int v216;
  float v217;
  signed int v218;
  float v219;
  signed int v220;
  int v221;
  float v222;
  signed int v223;
  float v224;
  signed int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  float32x4_t v230;
  int8x16_t v231;
  float32x2_t v232;
  int8x16_t v233;
  __int128 v234;
  char v235;
  int8x16_t v236;
  float32x4_t v237;
  int8x16_t v238;
  float32x4_t v239;
  float32x4_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  float v245;
  float32x2_t v246;
  float32x2_t v247;
  int v248;
  float *v249;
  int v250;
  uint64_t v251;
  unint64_t v252;
  int8x16_t v253;
  float32x2_t v254;
  float32x2_t v255;
  BOOL v257;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int v262;
  int v263;
  _DWORD *v264;
  unsigned int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  _DWORD *v269;
  int v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  unsigned int v274;
  int v275;
  uint64_t v276;
  _DWORD *v277;
  uint64_t v278;
  uint64_t v279;
  _OWORD *v280;
  unint64_t v281;
  unint64_t v282;
  _DWORD *v283;
  unint64_t v284;
  _DWORD *v285;
  _OWORD *v286;
  unint64_t v287;
  unint64_t v288;
  _OWORD *v289;
  unint64_t v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  uint64_t v300;
  unsigned int v301;
  float v302;
  BOOL v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  BOOL v307;
  BOOL v308;
  _BOOL4 v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  BOOL v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  float32x4_t v320;
  float32x4_t *v321;
  unint64_t v322;
  unint64_t v323;
  float32x4_t *v324;
  unint64_t v325;
  float32x4_t v326;
  float32x4_t *v327;
  unint64_t v328;
  _QWORD *exception;
  _BYTE *v330;
  _DWORD *v332;
  _DWORD *v333;
  _DWORD *v334;
  signed int v335;
  signed int v336;
  float v338;
  float32x4_t v339;
  float32x2_t v340;
  int8x16_t v341;
  int8x16_t v342;
  int8x16_t v343;
  _DWORD *v344;
  int8x16_t v345;
  int8x16_t v346;
  float32x2_t v347;
  float32x2_t v348;
  float64x2_t v349;
  int v350;
  int v351;
  float64x2_t v352;
  __int128 v353;
  int v354;
  float64x2_t v355;
  int8x16_t v356;
  float64x2_t v357;
  float32x2_t v358;
  float64x2_t v359;
  float32x2_t v360;
  float64x2_t v361;
  float32x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float32x4_t v365;
  uint64_t v366;
  __int128 v367;
  _BYTE v368[12];
  __int32 v369;
  float v370;
  float32x2_t v371;
  __int32 v372;
  float v373;
  float32x2_t v374;
  __int32 v375;
  float v376;
  float32x2_t v377;
  __int32 v378;
  float v379;
  float32x2_t v380;
  __int32 v381;
  _DWORD v382[60];
  void *__p;
  _DWORD *v384;
  int v385;
  _BYTE v386[3];
  char v387;
  float32x2_t v388;
  _BYTE v389[24];
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  int v404;
  uint64_t v405;

  v405 = *MEMORY[0x24BDAC8D0];
  v11 = a3[11].i32[0];
  if (v11 != a1[60]
    || (v14 = a3[11].i32[1], v14 != a1[61])
    || a5[1] - *a5 != 0xAAAAAAAAAAAAAAABLL * ((a2[12] - a2[11]) >> 2))
  {
    *a6 = 0;
    a6[80] = 0;
    return;
  }
  v18 = *((_QWORD *)a1 + 32);
  if (v18)
  {
    v19 = *((_QWORD *)a1 + 30);
    v20 = *((_QWORD *)a1 + 31);
    v21 = (HIDWORD(v20) * HIDWORD(v19));
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = (_DWORD *)(v18 + *((_QWORD *)a1 + 29));
      v24 = (_DWORD *)((char *)v23 + v21);
      v25 = *((_QWORD *)a1 + 31);
      v26 = HIDWORD(v20) - (v20 * v19);
      do
      {
        *v23 = 0;
        v23 = (_DWORD *)((char *)v23 + v25);
        v27 = v22 + 1;
        if (v22 + 1 == (_DWORD)v19)
          v22 = 0;
        else
          ++v22;
        if (v27 == (_DWORD)v19)
          v23 = (_DWORD *)((char *)v23 + v26);
      }
      while (v23 != v24);
    }
  }
  v28 = a1[42];
  if ((_DWORD)v28 == 1)
  {
    v29 = a1[43];
    v30 = a1[40];
    if ((_DWORD)v29 == (_DWORD)v30)
    {
      bzero(*((void **)a1 + 25), a1[41] * v29);
    }
    else if ((_DWORD)v30)
    {
      v40 = a1[41];
      if (v40)
      {
        v41 = v14;
        v42 = (char *)*((_QWORD *)a1 + 25);
        v43 = v40 - 1;
        if (v40 != 1)
        {
          do
          {
            bzero(v42, v30);
            v42 += v29;
            --v43;
          }
          while (v43);
        }
        bzero(v42, v30);
        v14 = v41;
      }
    }
  }
  else
  {
    v31 = a1[40];
    if (v31)
    {
      v32 = a1[41];
      if (v32)
      {
        v33 = v31 - 1;
        v34 = (_BYTE *)*((_QWORD *)a1 + 25);
        v35 = v32 - 1;
        if (v35)
        {
          v36 = a1[43];
          if (v33)
          {
            for (i = 0; i != v35; ++i)
            {
              v38 = v33;
              v39 = v34;
              do
              {
                *v39 = 0;
                v39 += v28;
                --v38;
              }
              while (v38);
              *v39 = 0;
              v34 += v36;
            }
          }
          else
          {
            do
            {
              *v34 = 0;
              v34 += v36;
              --v35;
            }
            while (v35);
          }
        }
        for (; v33; --v33)
        {
          *v34 = 0;
          v34 += v28;
        }
        *v34 = 0;
      }
    }
  }
  v385 = 0;
  v44 = a1[21];
  v330 = a6;
  if ((_DWORD)v44 != 1)
  {
    v53 = a1[18];
    v54 = a1[19];
    v55 = a1[20];
    if (v53)
      v56 = v54 == 0;
    else
      v56 = 1;
    if (v56 || v55 == 0)
      goto LABEL_119;
    v58 = v53 - 1;
    v59 = v54 - 1;
    v60 = a1[22];
    v61 = (_DWORD *)*((_QWORD *)a1 + 15);
    v62 = v55 - 1;
    if (v62)
    {
      v63 = a1[23];
      if (!v59)
      {
        if (v58)
        {
          for (j = 0; j != v62; ++j)
          {
            v106 = v61;
            v107 = v58;
            do
            {
              *v106 = v385;
              v106 += v44;
              --v107;
            }
            while (v107);
            *v106 = v385;
            v61 += v63;
          }
LABEL_115:
          if (v58)
          {
            v108 = 4 * v44;
            do
            {
              *v61 = v385;
              v61 = (_DWORD *)((char *)v61 + v108);
              --v58;
            }
            while (v58);
          }
          goto LABEL_118;
        }
        do
        {
          *v61 = v385;
          v61 += v63;
          --v62;
        }
        while (v62);
LABEL_118:
        *v61 = v385;
        goto LABEL_119;
      }
      v64 = 4 * v63;
      v65 = v60;
      if (!v58)
      {
        do
        {
          v80 = v61;
          v81 = v59;
          do
          {
            *v80 = v385;
            v80 = (_DWORD *)((char *)v80 + v65 * 4);
            --v81;
          }
          while (v81);
          *v80 = v385;
          v61 = (_DWORD *)((char *)v61 + v64);
          ++v58;
        }
        while (v58 != v62);
        do
        {
LABEL_73:
          *v61 = v385;
          v61 += v60;
          --v59;
        }
        while (v59);
        goto LABEL_118;
      }
      v66 = 0;
      v67 = 4 * v44;
      v68 = &v61[v65];
      do
      {
        v69 = 0;
        v70 = v68;
        v71 = v61;
        do
        {
          v72 = v70;
          v73 = v71;
          v74 = v58;
          do
          {
            *v73 = v385;
            v73 = (_DWORD *)((char *)v73 + v67);
            --v74;
          }
          while (v74);
          *v73 = v385;
          v71 = (_DWORD *)((char *)v71 + v65 * 4);
          ++v69;
          v70 = &v72[v65];
        }
        while (v69 != v59);
        v75 = v58;
        do
        {
          *v72 = v385;
          v72 = (_DWORD *)((char *)v72 + v67);
          --v75;
        }
        while (v75);
        *v72 = v385;
        v61 = (_DWORD *)((char *)v61 + v64);
        ++v66;
        v68 = (_DWORD *)((char *)v68 + v64);
      }
      while (v66 != v62);
    }
    if (!v59)
      goto LABEL_115;
    if (v58)
    {
      v76 = 0;
      v77 = 4 * v60;
      do
      {
        v78 = v61;
        v79 = v58;
        do
        {
          *v78 = v385;
          v78 += v44;
          --v79;
        }
        while (v79);
        *v78 = v385;
        v61 = (_DWORD *)((char *)v61 + v77);
        ++v76;
      }
      while (v76 != v59);
      goto LABEL_115;
    }
    goto LABEL_73;
  }
  v45 = a1[22];
  v46 = (void *)a1[18];
  if (v45 != (_DWORD)v46)
  {
    v387 = 0;
    __p = v46;
    *(_QWORD *)&v367 = &v387;
    *((_QWORD *)&v367 + 1) = &__p;
    *(_QWORD *)v368 = &v385;
    if ((_DWORD)v46)
    {
      v82 = a1[19];
      if (v82)
      {
        v83 = a1[20];
        if (v83)
        {
          v382[0] = 0;
          v382[1] = (_DWORD)v46 - 1;
          v382[2] = 1;
          v382[3] = v82 - 1;
          v84 = a1[23];
          v382[6] = a1[23];
          v85 = *((_QWORD *)a1 + 15);
          *(_QWORD *)v389 = 0;
          v388 = 0;
          v86 = v83 - 1;
          v382[4] = v45;
          v382[5] = v83 - 1;
          if (v83 != 1)
          {
            v87 = 4 * v84;
            do
            {
              sub_223469FB8((uint64_t)v382, (uint64_t)&v388, (uint64_t)&v367, v85);
              v85 += v87;
              --v86;
            }
            while (v86);
          }
          sub_223469FB8((uint64_t)v382, (uint64_t)&v388, (uint64_t)&v367, v85);
        }
      }
    }
    goto LABEL_119;
  }
  v47 = a1[23];
  v48 = a1[19];
  v49 = v48 * v45;
  if ((_DWORD)v47 != (_DWORD)v49)
  {
    if (!v45)
      goto LABEL_119;
    if (!v48)
      goto LABEL_119;
    v88 = a1[20];
    if (!v88)
      goto LABEL_119;
    v89 = *((_QWORD *)a1 + 15);
    v90 = v88 - 1;
    if (v88 == 1)
    {
      v351 = v14;
      v354 = v11;
      v93 = (float32x4_t *)*((_QWORD *)a1 + 15);
LABEL_320:
      if (!(_DWORD)v49 || v93)
      {
        v11 = v354;
        v14 = v351;
        if (!(_DWORD)v49)
          goto LABEL_119;
      }
      else
      {
        v11 = v354;
        v14 = v351;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_323;
        }
      }
      v323 = v49 - ((_DWORD)v49 != 0) + 1;
      if (v323 >= 0x10 && (v93 >= (float32x4_t *)v386 || &v385 >= &v93->i32[v49]))
      {
        v324 = (float32x4_t *)((char *)v93 + 4 * (v323 & 0xFFFFFFFFFFFFFFF8));
        v49 -= v323 & 0xFFFFFFFFFFFFFFF8;
        v326 = vld1q_dup_f32((const float *)&v385);
        v327 = v93 + 1;
        v328 = v323 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v327[-1] = v326;
          *v327 = v326;
          v327 += 2;
          v328 -= 8;
        }
        while (v328);
        if (v323 == (v323 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_119;
      }
      else
      {
        v324 = v93;
      }
      v325 = v49 + 1;
      do
      {
        v324->i32[0] = v385;
        v324 = (float32x4_t *)((char *)v324 + 4);
        --v325;
      }
      while (v325 > 1);
      goto LABEL_119;
    }
    if (!(_DWORD)v49)
      goto LABEL_119;
    v351 = v14;
    v354 = v11;
    v91 = 0;
    v92 = 4 * v47;
    v93 = (float32x4_t *)*((_QWORD *)a1 + 15);
    while (v93
         || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v94 = v93;
      v95 = v49;
      if (v49 < 8)
        goto LABEL_97;
      if (v93 < (float32x4_t *)v386)
      {
        v94 = v93;
        v95 = v49;
        if ((unint64_t)&v385 < v89 + 4 * v49 + v92 * v91)
          goto LABEL_97;
      }
      v96 = 0;
      v94 = (float32x4_t *)((char *)v93 + 4 * (v49 & 0xFFFFFFF8));
      v97 = vld1q_dup_f32((const float *)&v385);
      do
      {
        v98 = &v93[v96 / 0x10];
        *v98 = v97;
        v98[1] = v97;
        v96 += 32;
      }
      while (((4 * v49) & 0x3FFFFFFE0) != v96);
      v95 = v49 & 7;
      if ((v49 & 0xFFFFFFF8) != v49)
      {
LABEL_97:
        v99 = v95 + 1;
        do
        {
          v94->i32[0] = v385;
          v94 = (float32x4_t *)((char *)v94 + 4);
          --v99;
        }
        while (v99 > 1);
      }
      v93 = (float32x4_t *)((char *)v93 + v92);
      if ((_DWORD)++v91 == v90)
        goto LABEL_320;
    }
LABEL_323:
    abort();
  }
  v50 = a1[20] * v47;
  v51 = (float32x4_t *)*((_QWORD *)a1 + 15);
  if ((_DWORD)v50)
    v52 = v51 == 0;
  else
    v52 = 0;
  if (!v52)
  {
    if (!(_DWORD)v50)
      goto LABEL_119;
    goto LABEL_101;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_323;
  }
LABEL_101:
  v100 = v50 - ((_DWORD)v50 != 0) + 1;
  if (v100 < 0x10)
    goto LABEL_106;
  v101 = 4 * v50;
  if (!(_DWORD)v50)
    v101 = 4;
  v102 = &v385 < (int *)((char *)v51 + v101);
  if (v51 < (float32x4_t *)v386 && v102)
  {
LABEL_106:
    v103 = v51;
LABEL_107:
    v104 = v50 + 1;
    do
    {
      v103->i32[0] = v385;
      v103 = (float32x4_t *)((char *)v103 + 4);
      --v104;
    }
    while (v104 > 1);
    goto LABEL_119;
  }
  v103 = (float32x4_t *)((char *)v51 + 4 * (v100 & 0xFFFFFFFFFFFFFFF8));
  v50 -= v100 & 0xFFFFFFFFFFFFFFF8;
  v320 = vld1q_dup_f32((const float *)&v385);
  v321 = v51 + 1;
  v322 = v100 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v321[-1] = v320;
    *v321 = v320;
    v321 += 2;
    v322 -= 8;
  }
  while (v322);
  if (v100 != (v100 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_107;
LABEL_119:
  v363 = *a4;
  v364 = a4[1];
  v359 = a4[2];
  v361 = a4[3];
  v355 = a4[4];
  v357 = a4[5];
  v349 = a4[6];
  v352 = a4[7];
  v109 = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)a3 + 16))(a3);
  v110 = a2;
  v347 = *(float32x2_t *)(v109 + 16);
  v348 = *(float32x2_t *)(v109 + 8);
  sub_223F06CE0(a2, (uint64_t *)&__p);
  sub_223F08E58((uint64_t)v382, a3, a7, a8);
  v111 = 0;
  v112 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v349), v352);
  v113 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v355), v357);
  v114 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v359), v361);
  v115 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v363), v364);
  v121 = (float32x4_t)vtrn2q_s32(v115, v114);
  v116 = (float32x2_t)vzip2q_s32(v115, v114).u64[0];
  v117 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v121.f32, 1);
  v118 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v121.f32, 0);
  v119 = (int8x16_t)vnegq_f32(v112);
  v345 = (int8x16_t)v115;
  v346 = (int8x16_t)v114;
  v120 = (float32x2_t)vzip1_s32(*(int32x2_t *)v115.i8, *(int32x2_t *)v114.i8);
  *(float32x2_t *)v123.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v120, *(float *)v119.i32), *(float32x2_t *)v121.f32, *(float32x2_t *)v112.f32, 1), v116, v112, 2);
  *(int32x2_t *)v121.f32 = vdup_lane_s32(*(int32x2_t *)v113.i8, 1);
  v339 = v112;
  v122 = vextq_s8(v113, v113, 8uLL);
  *(float32x2_t *)&v123.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v119.i8), *(float32x2_t *)v121.f32, *(float32x2_t *)v112.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL), *(float32x2_t *)v122.i8);
  *(_QWORD *)v389 = 0;
  v388 = 0;
  *(_QWORD *)&v389[8] = 0x3F80000000000000;
  *(_QWORD *)&v389[16] = 0;
  v390 = 0;
  v391 = 0x3F80000000000000;
  v393 = 0;
  v392 = 0;
  v394 = 0x3F80000000000000;
  v395 = 0;
  v396 = 0;
  v397 = 0x3F80000000000000;
  v124 = (float32x2_t)vextq_s8(v118, v117, 0xCuLL).u64[0];
  v399 = 0;
  v398 = 0;
  v400 = 0x3F80000000000000;
  v401 = 0;
  v402 = 0;
  v403 = 0;
  v404 = 1065353216;
  do
  {
    v118.i32[0] = v382[v111 + 26];
    v125 = *(float32x2_t *)&v382[v111 + 24];
    *(float32x2_t *)v126.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v120, v125.f32[0]), v124, v125, 1), v116, *(float *)v118.i32);
    *(float32x2_t *)&v126.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v113.i8, v125), *(float32x2_t *)v121.f32, v125, 1), *(float32x2_t *)v118.i8, *(float32x2_t *)v122.i8);
    v118 = (int8x16_t)vaddq_f32(v123, v126);
    v125.i32[0] = v382[v111 + 29];
    v126.i64[0] = *(_QWORD *)&v382[v111 + 27];
    v127 = (char *)&v388 + v111 * 4;
    *(_DWORD *)((char *)&v388 + v111 * 4 + 8) = v118.i32[2];
    *(_QWORD *)v127 = v118.i64[0];
    *(float32x2_t *)(v127 + 12) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v120, v126.f32[0]), v124, *(float32x2_t *)v126.f32, 1), v116, v125.f32[0]);
    *((_DWORD *)v127 + 5) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v126.f32), *(float32x2_t *)v121.f32, *(float32x2_t *)v126.f32, 1), v125, *(float32x2_t *)v122.i8).u32[0];
    v111 += 6;
  }
  while (v111 != 36);
  v342 = v122;
  v343 = v113;
  sub_223F09724((uint64_t)&v367, (uint64_t)&v388, *(double *)&v116, *(double *)&v120, (int32x4_t)v123, v121, *(double *)&v124, *(double *)v118.i64);
  v135 = __p;
  v136 = (_DWORD *)*a2;
  v332 = (_DWORD *)a2[1];
  v333 = v384;
  if (__p != v384 || v136 != v332)
  {
    v143 = (float)v11;
    v338 = (float)v14;
    v340 = (float32x2_t)vextq_s8(v346, v346, 8uLL).u64[0];
    v341 = vextq_s8(v345, v345, 8uLL);
    v134.i32[0] = 0;
    v144 = a7;
    do
    {
      v334 = v135;
      if (*((_BYTE *)v135 + 24))
      {
        v130.i64[0] = *(_QWORD *)v135;
        v145 = v130;
        v128.i32[0] = v135[3];
        v145.i32[2] = v135[2];
        v146 = v145;
        v146.i32[0] = v128.i32[0];
        v131.i32[0] = DWORD1(v367);
        v133.i32[0] = HIDWORD(v367);
        v132.i32[0] = DWORD2(v367);
        v147 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v131)), 0), v145, v146);
        v148 = v147;
        v148.i32[1] = v135[4];
        v149 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v132)), 0), v147, v148);
        v131 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, v133)), 0);
        v132 = v149;
        v132.i32[2] = v135[5];
        v150 = vbslq_s8(v131, v149, v132);
        v131.i32[1] = DWORD2(v367);
        *(float32x2_t *)v132.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)((char *)&v367 + 4), *(float32x2_t *)v150.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v150.i8, 1), *(float32x2_t *)((char *)&v367 + 4), 1);
        v151 = (float32x4_t)vextq_s8(v150, v150, 8uLL);
        *(float32x2_t *)v132.i8 = vmla_f32(*(float32x2_t *)v132.i8, *(float32x2_t *)v151.f32, *(float32x2_t *)v133.f32);
        v152 = (float)(*(float *)&v367 + *(float *)v132.i32) <= 0.0;
        if ((float)(*(float *)&v367 + *(float *)v132.i32) <= 0.0)
        {
          v128.i32[1] = v130.i32[1];
          v128.i32[2] = v334[2];
          v130.i32[0] = *(_DWORD *)&v368[4];
          v151.i32[0] = *(_DWORD *)&v368[8];
          v131.i32[0] = v369;
          v153 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v130)), 0), v145, v128);
          v154 = v153;
          v154.i32[1] = v334[4];
          v155 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, v151)), 0), v153, v154);
          v158 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v131)), 0);
          v156 = v155;
          v156.i32[2] = v334[5];
          v157 = vbslq_s8(v158, v155, v156);
          v158.i32[1] = *(_DWORD *)&v368[8];
          *(int32x2_t *)v132.i8 = vdup_lane_s32(*(int32x2_t *)v157.i8, 1);
          *(float32x2_t *)v156.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v368[4], *(float32x2_t *)v157.i8), *(float32x2_t *)v132.i8, *(float32x2_t *)&v368[4], 1);
          v130 = vextq_s8(v157, v157, 8uLL);
          *(float *)v156.i32 = vmla_f32(*(float32x2_t *)v156.i8, *(float32x2_t *)v130.i8, *(float32x2_t *)v131.i8).f32[0];
          v152 = (float)(*(float *)v368 + *(float *)v156.i32) <= 0.0;
          if ((float)(*(float *)v368 + *(float *)v156.i32) <= 0.0)
          {
            v158.i32[0] = v371.i32[1];
            v130.i32[0] = v371.i32[0];
            v131.i32[0] = v372;
            v159 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v130)), 0), v145, v128);
            v160 = v159;
            v160.i32[1] = v334[4];
            v161 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v158)), 0), v159, v160);
            v164 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v131)), 0);
            v162 = v161;
            v162.i32[2] = v334[5];
            v163 = vbslq_s8(v164, v161, v162);
            v164.i32[1] = v371.i32[1];
            *(int32x2_t *)v132.i8 = vdup_lane_s32(*(int32x2_t *)v163.i8, 1);
            *(float32x2_t *)v162.i8 = vmla_lane_f32(vmul_f32(v371, *(float32x2_t *)v163.i8), *(float32x2_t *)v132.i8, v371, 1);
            v130 = vextq_s8(v163, v163, 8uLL);
            *(float *)v162.i32 = vmla_f32(*(float32x2_t *)v162.i8, *(float32x2_t *)v130.i8, *(float32x2_t *)v131.i8).f32[0];
            v152 = (float)(v370 + *(float *)v162.i32) <= 0.0;
            if ((float)(v370 + *(float *)v162.i32) <= 0.0)
            {
              v164.i32[0] = v374.i32[1];
              v130.i32[0] = v374.i32[0];
              v131.i32[0] = v375;
              v165 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v130)), 0), v145, v128);
              v166 = v165;
              v166.i32[1] = v334[4];
              v167 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v164)), 0), v165, v166);
              v170 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v131)), 0);
              v168 = v167;
              v168.i32[2] = v334[5];
              v169 = vbslq_s8(v170, v167, v168);
              v170.i32[1] = v374.i32[1];
              *(int32x2_t *)v132.i8 = vdup_lane_s32(*(int32x2_t *)v169.i8, 1);
              *(float32x2_t *)v168.i8 = vmla_lane_f32(vmul_f32(v374, *(float32x2_t *)v169.i8), *(float32x2_t *)v132.i8, v374, 1);
              v130 = vextq_s8(v169, v169, 8uLL);
              *(float *)v168.i32 = vmla_f32(*(float32x2_t *)v168.i8, *(float32x2_t *)v130.i8, *(float32x2_t *)v131.i8).f32[0];
              v152 = (float)(v373 + *(float *)v168.i32) <= 0.0;
              if ((float)(v373 + *(float *)v168.i32) <= 0.0)
              {
                v170.i32[0] = v377.i32[1];
                v130.i32[0] = v377.i32[0];
                v131.i32[0] = v378;
                v171 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v130)), 0), v145, v128);
                v172 = v171;
                v172.i32[1] = v334[4];
                v173 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v170)), 0), v171, v172);
                v174 = v173;
                v174.i32[2] = v334[5];
                v175 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v131)), 0), v173, v174);
                *(int32x2_t *)v132.i8 = vdup_lane_s32(*(int32x2_t *)v175.i8, 1);
                *(float32x2_t *)v174.i8 = vmla_lane_f32(vmul_f32(v377, *(float32x2_t *)v175.i8), *(float32x2_t *)v132.i8, v377, 1);
                v130 = vextq_s8(v175, v175, 8uLL);
                *(float *)v174.i32 = vmla_f32(*(float32x2_t *)v174.i8, *(float32x2_t *)v130.i8, *(float32x2_t *)v131.i8).f32[0];
                v152 = (float)(v376 + *(float *)v174.i32) <= 0.0;
                if ((float)(v376 + *(float *)v174.i32) <= 0.0)
                {
                  v130.i32[0] = v380.i32[0];
                  v130 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v130)), 0);
                  v176 = vbslq_s8(v130, v145, v128);
                  v177 = v176;
                  v177.i32[1] = v334[4];
                  v129.i32[0] = v380.i32[1];
                  v130.i32[0] = v381;
                  v178 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v129)), 0), v176, v177);
                  v128 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v134, (float32x4_t)v130)), 0);
                  v129 = v178;
                  v129.i32[2] = v334[5];
                  v145 = vbslq_s8(v128, v178, v129);
                  *(int32x2_t *)v129.i8 = vdup_lane_s32(*(int32x2_t *)v145.i8, 1);
                  *(float32x2_t *)v128.i8 = vmla_lane_f32(vmul_f32(v380, *(float32x2_t *)v145.i8), *(float32x2_t *)v129.i8, v380, 1);
                  v145.i64[0] = vextq_s8(v145, v145, 8uLL).u64[0];
                  v152 = (float)(v379
                               + vmla_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v145.i8, *(float32x2_t *)v130.i8).f32[0]) <= 0.0;
                }
              }
            }
          }
        }
        if (v152)
        {
          v179 = v136[4];
          v350 = v136[5];
          if (v179 != v350)
          {
            v344 = v136;
            do
            {
              v180 = (_DWORD *)(v110[11] + 12 * v179);
              v181 = v136[2];
              v182 = *v180 + v181;
              v183 = v180[1] + v181;
              v184 = v180[2] + v181;
              v185 = v110[3];
              v186 = (float32x2_t *)(v185 + 12 * v182);
              v145.i32[0] = v186[1].i32[0];
              v187 = *v186;
              v131 = v346;
              v132 = v342;
              v188.i32[3] = v343.i32[3];
              *(float32x2_t *)v189.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v345.i8, COERCE_FLOAT(*v186)), *(float32x2_t *)v346.i8, *v186, 1), *(float32x2_t *)v343.i8, *(float *)v145.i32);
              v133 = (float32x4_t)v341;
              *(float32x2_t *)&v189.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v341.i8, *v186), v340, *v186, 1), *(float32x2_t *)v145.i8, *(float32x2_t *)v342.i8);
              v190.i32[3] = v339.i32[3];
              v145 = (int8x16_t)vaddq_f32(v189, v339);
              *(_DWORD *)v389 = v145.i32[2];
              v388 = *(float32x2_t *)v145.i8;
              v191 = (float32x2_t *)(v185 + 12 * v183);
              v187.i32[0] = v191[1].i32[0];
              *(float32x2_t *)v192.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v345.i8, COERCE_FLOAT(*v191)), *(float32x2_t *)v346.i8, *v191, 1), *(float32x2_t *)v343.i8, v187.f32[0]);
              *(float32x2_t *)&v192.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v341.i8, *v191), v340, *v191, 1), v187, *(float32x2_t *)v342.i8);
              v193 = vaddq_f32(v192, v339);
              *(_DWORD *)&v389[12] = v193.i32[2];
              *(_QWORD *)&v389[4] = v193.i64[0];
              v194 = (float32x2_t *)(v185 + 12 * v184);
              v193.i32[0] = v194[1].i32[0];
              *(float32x2_t *)v129.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v345.i8, COERCE_FLOAT(*v194)), *(float32x2_t *)v346.i8, *v194, 1), *(float32x2_t *)v343.i8, v193.f32[0]);
              v129.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v341.i8, *v194), v340, *v194, 1), *(float32x2_t *)v193.f32, *(float32x2_t *)v342.i8);
              v128 = (int8x16_t)vaddq_f32((float32x4_t)v129, v339);
              LODWORD(v390) = v128.i32[2];
              *(_QWORD *)&v389[16] = v128.i64[0];
              v195 = *(float *)&v145.i32[2] > a7;
              if (*(float *)&v145.i32[2] > a7)
              {
                v195 = *(float *)&v389[12] > a7;
                if (*(float *)&v389[12] > a7)
                  v195 = *(float *)&v390 > a7;
              }
              v196 = v179;
              if (v195)
              {
                v145.i32[1] = *(_DWORD *)&v389[4];
                v129.i32[1] = v348.i32[1];
                *(float32x2_t *)v130.i8 = vmla_f32(v347, v348, vdiv_f32(v388, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v389, 0)));
                v365 = (float32x4_t)v130;
                if (*(float *)v130.i32 < v143 && *(float *)v130.i32 >= 0.0)
                {
                  *(float32x2_t *)v129.i8 = vmla_f32(v347, v348, vdiv_f32(*(float32x2_t *)&v389[4], (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v389[12], 0)));
                  v197 = *(float *)&v130.i32[1] >= 0.0 && *(float *)&v130.i32[1] < v338;
                  v198 = v197 && *(float *)v129.i32 < v143;
                  if (v198
                    && *(float *)v129.i32 >= 0.0
                    && *(float *)&v129.i32[1] >= 0.0
                    && *(float *)&v129.i32[1] < v338)
                  {
                    *(float32x2_t *)v130.i8 = vmla_f32(v347, v348, vdiv_f32(*(float32x2_t *)&v389[16], (float32x2_t)vdup_laneq_s32((int32x4_t)v128, 2)));
                    if (*(float *)v130.i32 < v143
                      && *(float *)v130.i32 >= 0.0
                      && *(float *)&v130.i32[1] >= 0.0
                      && *(float *)&v130.i32[1] < v338)
                    {
                      v201 = floorf(v365.f32[0]);
                      if (v201 != (float)(int)v201)
                        goto LABEL_338;
                      v202 = floorf(v365.f32[1]);
                      if (v202 != (float)(int)v202)
                        goto LABEL_338;
                      v203 = ceilf(v365.f32[0]);
                      if (v203 != (float)(int)v203)
                        goto LABEL_338;
                      v204 = ceilf(v365.f32[1]);
                      if (v204 != (float)(int)v204)
                        goto LABEL_338;
                      v205 = floorf(*(float *)v129.i32);
                      if (v205 != (float)(int)v205)
                        goto LABEL_338;
                      v206 = vcvtms_s32_f32(v365.f32[0]);
                      v207 = vcvtms_s32_f32(*(float *)v129.i32);
                      if (v206 >= v207)
                        v206 = v207;
                      v208 = floorf(*(float *)&v129.i32[1]);
                      if (v208 != (float)(int)v208)
                        goto LABEL_338;
                      v209 = vcvtms_s32_f32(v365.f32[1]);
                      v210 = vcvtms_s32_f32(*(float *)&v129.i32[1]);
                      if (v209 >= v210)
                        v209 = v210;
                      v211 = ceilf(*(float *)v129.i32);
                      if (v211 != (float)(int)v211)
                        goto LABEL_338;
                      v212 = vcvtps_s32_f32(v365.f32[0]);
                      v213 = vcvtps_s32_f32(*(float *)v129.i32);
                      if (v212 <= v213)
                        v212 = v213;
                      v214 = ceilf(*(float *)&v129.i32[1]);
                      if (v214 != (float)(int)v214)
                        goto LABEL_338;
                      v215 = vcvtps_s32_f32(v365.f32[1]);
                      v216 = vcvtps_s32_f32(*(float *)&v129.i32[1]);
                      if (v215 <= v216)
                        v215 = v216;
                      v217 = floorf(*(float *)v130.i32);
                      if (v217 != (float)(int)v217)
                        goto LABEL_338;
                      v218 = vcvtms_s32_f32(*(float *)v130.i32);
                      if (v206 >= v218)
                        v206 = v218;
                      v336 = v206;
                      v219 = floorf(*(float *)&v130.i32[1]);
                      if (v219 != (float)(int)v219)
                        goto LABEL_338;
                      v220 = vcvtms_s32_f32(*(float *)&v130.i32[1]);
                      v221 = v209 >= v220 ? v220 : v209;
                      v222 = ceilf(*(float *)v130.i32);
                      if (v222 != (float)(int)v222)
                        goto LABEL_338;
                      v223 = vcvtps_s32_f32(*(float *)v130.i32);
                      if (v212 > v223)
                        v223 = v212;
                      v224 = ceilf(*(float *)&v130.i32[1]);
                      if (v224 != (float)(int)v224)
                      {
LABEL_338:
                        exception = __cxa_allocate_exception(8uLL);
                        *exception = &off_24EC7AC38;
                        __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
                      }
                      v225 = vcvtps_s32_f32(*(float *)&v130.i32[1]);
                      if (v215 > v225)
                        v225 = v215;
                      v335 = v225;
                      if (v221 <= v225 && v336 <= v223)
                      {
                        v226 = v110[7];
                        v227 = v226 + 12 * v182;
                        v228 = v226 + 12 * v183;
                        v229 = v226 + 12 * v184;
                        v190.i64[0] = *(_QWORD *)v227;
                        v190.i32[2] = *(_DWORD *)(v227 + 8);
                        v188.i64[0] = *(_QWORD *)v228;
                        v188.i32[2] = *(_DWORD *)(v228 + 8);
                        v230 = vaddq_f32(v190, v188);
                        v188.i64[0] = *(_QWORD *)v229;
                        v188.i32[2] = *(_DWORD *)(v229 + 8);
                        v231 = (int8x16_t)vaddq_f32(v230, v188);
                        v232 = (float32x2_t)vextq_s8(v231, v231, 8uLL).u64[0];
                        v233 = (int8x16_t)vmulq_n_f32((float32x4_t)v231, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v231.i8, *(float32x2_t *)v231.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v231.i8, 1), *(float32x2_t *)v231.i8, 1), v232, v232).f32[0]));
                        *(float32x2_t *)&v234 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v345.i8, *(float *)v233.i32), *(float32x2_t *)v346.i8, *(float32x2_t *)v233.i8, 1), *(float32x2_t *)v343.i8, (float32x4_t)v233, 2);
                        *((float32x2_t *)&v234 + 1) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v341.i8, *(float32x2_t *)v233.i8), v340, *(float32x2_t *)v233.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v233, v233, 8uLL), *(float32x2_t *)v342.i8);
                        v353 = v234;
                        v235 = *(_BYTE *)(*a5 + v196);
                        v236 = (int8x16_t)vsubq_f32((float32x4_t)v129, v365);
                        v237 = (float32x4_t)vextq_s8(vextq_s8(v236, v236, 0xCuLL), v236, 8uLL);
                        v238 = (int8x16_t)vsubq_f32((float32x4_t)v130, v365);
                        v239 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v238, (int32x4_t)v238), v238, 0xCuLL);
                        v240 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v236, (int32x4_t)v236), v236, 0xCuLL);
                        v132 = vextq_s8(vextq_s8(v238, v238, 0xCuLL), v238, 8uLL);
                        v241 = (int8x16_t)vsubq_f32(vmulq_f32(v237, v239), vmulq_f32(v240, (float32x4_t)v132));
                        v133 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v241, (int32x4_t)v241), v241, 0xCuLL);
                        v131 = vextq_s8(vextq_s8(v241, v241, 0xCuLL), v241, 8uLL);
                        v242 = (int8x16_t)vmlsq_f32(vmulq_f32(v237, v133), v240, (float32x4_t)v131);
                        *(float32x2_t *)v134.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v242.i8, *(float32x2_t *)v238.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v238.i8, 1), *(float32x2_t *)v242.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v238, v238, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v242, v242, 8uLL));
                        v243 = (int8x16_t)vdivq_f32((float32x4_t)v242, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 0));
                        v130 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)v132, v133), v239, (float32x4_t)v131);
                        *(float32x2_t *)v131.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v236.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v236.i8, 1), *(float32x2_t *)v130.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v236, v236, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL));
                        v244 = (int8x16_t)vdivq_f32((float32x4_t)v130, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v131.i8, 0));
                        v245 = 1.0 / *(float *)v389;
                        v9.f32[0] = 1.0 / *(float *)&v389[12];
                        v8.f32[0] = 1.0 / *(float *)&v128.i32[2];
                        v246 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v244.i8, 1);
                        v358 = (float32x2_t)vextq_s8(v244, v244, 8uLL).u64[0];
                        v360 = *(float32x2_t *)v244.i8;
                        v247 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v243.i8, 1);
                        v362 = *(float32x2_t *)v243.i8;
                        v356 = vextq_s8(v243, v243, 8uLL);
                        v248 = v223 + 1;
                        do
                        {
                          v249 = (float *)(*((_QWORD *)a1 + 32) + 4 * v336 + a1[63] * v221);
                          v250 = v336;
                          do
                          {
                            *(float *)&v252 = (float)v250;
                            *((float *)&v252 + 1) = (float)v221;
                            v253 = (int8x16_t)vsubq_f32((float32x4_t)v252, v365);
                            v129 = vextq_s8(v253, v253, 8uLL);
                            *(float32x2_t *)v145.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v360, *(float32x2_t *)v253.i8), v246, *(float32x2_t *)v253.i8, 1), *(float32x2_t *)v129.i8, v358);
                            v254 = vmla_lane_f32(vmul_f32(v362, *(float32x2_t *)v253.i8), v247, *(float32x2_t *)v253.i8, 1);
                            v128 = v356;
                            v255 = vmla_f32(v254, *(float32x2_t *)v129.i8, *(float32x2_t *)v356.i8);
                            *(float *)v128.i32 = (float)(1.0 - *(float *)v145.i32) - v255.f32[0];
                            v257 = *(float *)v128.i32 < 0.0 || *(float *)v128.i32 > 1.0 || v255.f32[0] > 1.0;
                            if (!v257 && v255.f32[0] >= 0.0 && *(float *)v145.i32 >= 0.0 && *(float *)v145.i32 <= 1.0)
                            {
                              *(float *)v128.i32 = v245 * *(float *)v128.i32;
                              *(float *)v128.i32 = vmla_f32(vmla_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v145.i8, v9), v255, v8).f32[0];
                              if (*(float *)v128.i32 > *v249)
                              {
                                *v249 = *(float *)v128.i32;
                                v259 = a1[22];
                                v260 = a1[23];
                                v261 = *((_QWORD *)a1 + 15);
                                if (v260 == -1
                                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
                                {
                                  abort();
                                }
                                v251 = v261 + 4 * (v259 * v250 + v260 * v221);
                                v145.i32[1] = DWORD1(v353);
                                *(_QWORD *)v251 = v353;
                                *(_DWORD *)(v251 + 8) = DWORD2(v353);
                                *(_BYTE *)(*((_QWORD *)a1 + 25) + a1[42] * v250 + a1[43] * v221) = v235;
                              }
                            }
                            ++v250;
                            ++v249;
                          }
                          while (v248 != v250);
                          v52 = v221++ == v335;
                          v110 = a2;
                        }
                        while (!v52);
                      }
                    }
                  }
                }
              }
              v179 = v196 + 1;
              a7 = v144;
              v136 = v344;
              v134.i32[0] = 0;
            }
            while ((_DWORD)v196 + 1 != v350);
          }
        }
      }
      v135 = v334 + 7;
      v136 += 6;
    }
    while (v334 + 7 != v333 || v136 != v332);
  }
  v137 = a1[2];
  if ((_DWORD)v137 != 1)
  {
    if (!*a1)
      goto LABEL_272;
    v262 = a1[1];
    if (!v262)
      goto LABEL_272;
    v263 = *a1 - 1;
    v264 = (_DWORD *)*((_QWORD *)a1 + 5);
    v265 = v262 - 1;
    if (v265)
    {
      v266 = a1[3];
      if (*a1 == 1)
      {
        do
        {
          *v264 = 0;
          v264 += v266;
          --v265;
        }
        while (v265);
LABEL_271:
        *v264 = 0;
        goto LABEL_272;
      }
      v267 = 0;
      v268 = 4 * v266;
      do
      {
        v269 = v264;
        v270 = v263;
        do
        {
          *v269 = 0;
          v269 += v137;
          --v270;
        }
        while (v270);
        *v269 = 0;
        v264 = (_DWORD *)((char *)v264 + v268);
        ++v267;
      }
      while (v267 != v265);
    }
    if (v263)
    {
      v271 = 4 * v137;
      do
      {
        *v264 = 0;
        v264 = (_DWORD *)((char *)v264 + v271);
        --v263;
      }
      while (v263);
    }
    goto LABEL_271;
  }
  v138 = a1[3];
  v139 = *a1;
  if ((_DWORD)v138 != (_DWORD)v139)
  {
    if (!(_DWORD)v139)
      goto LABEL_272;
    v272 = a1[1];
    if (!v272)
      goto LABEL_272;
    v273 = *((_QWORD *)a1 + 5);
    v274 = v272 - 1;
    if (v272 == 1)
    {
LABEL_254:
      if (v273
        || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        v284 = v139 - ((_DWORD)v139 != 0) + 1;
        if (v284 >= 8)
        {
          v285 = (_DWORD *)(v273 + 4 * (v284 & 0xFFFFFFFFFFFFFFF8));
          v139 -= v284 & 0xFFFFFFFFFFFFFFF8;
          v289 = (_OWORD *)(v273 + 16);
          v290 = v284 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            *(v289 - 1) = 0uLL;
            *v289 = 0uLL;
            v289 += 2;
            v290 -= 8;
          }
          while (v290);
          if (v284 == (v284 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_272;
        }
        else
        {
          v285 = (_DWORD *)v273;
        }
        v291 = v139 + 1;
        do
        {
          *v285++ = 0;
          --v291;
        }
        while (v291 > 1);
        goto LABEL_272;
      }
    }
    else
    {
      v275 = 0;
      v276 = 4 * v138;
      while (v273
           || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        v277 = (_DWORD *)v273;
        v278 = v139;
        if (v139 < 8)
          goto LABEL_248;
        v279 = 0;
        v277 = (_DWORD *)(v273 + 4 * (v139 & 0xFFFFFFF8));
        do
        {
          v280 = (_OWORD *)(v273 + v279);
          *v280 = 0uLL;
          v280[1] = 0uLL;
          v279 += 32;
        }
        while (((4 * v139) & 0x3FFFFFFE0) != v279);
        v278 = v139 & 7;
        if ((v139 & 0xFFFFFFF8) != v139)
        {
LABEL_248:
          v281 = v278 + 1;
          do
          {
            *v277++ = 0;
            --v281;
          }
          while (v281 > 1);
        }
        v273 += v276;
        if (++v275 == v274)
          goto LABEL_254;
      }
    }
    goto LABEL_340;
  }
  v140 = a1[1] * v138;
  v141 = *((_QWORD *)a1 + 5);
  if ((_DWORD)v140)
    v142 = v141 == 0;
  else
    v142 = 0;
  if (!v142)
  {
    if (!(_DWORD)v140)
      goto LABEL_272;
    goto LABEL_252;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_340:
    abort();
  }
LABEL_252:
  v282 = v140 - ((_DWORD)v140 != 0) + 1;
  if (v282 >= 8)
  {
    v283 = (_DWORD *)(v141 + 4 * (v282 & 0xFFFFFFFFFFFFFFF8));
    v140 -= v282 & 0xFFFFFFFFFFFFFFF8;
    v286 = (_OWORD *)(v141 + 16);
    v287 = v282 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(v286 - 1) = 0uLL;
      *v286 = 0uLL;
      v286 += 2;
      v287 -= 8;
    }
    while (v287);
    if (v282 == (v282 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_272;
  }
  else
  {
    v283 = (_DWORD *)v141;
  }
  v288 = v140 + 1;
  do
  {
    *v283++ = 0;
    --v288;
  }
  while (v288 > 1);
LABEL_272:
  v292 = a1[60];
  if (v292)
  {
    v293 = a1[61];
    if ((_DWORD)v293)
    {
      v294 = 0;
      v295 = 0;
      v296 = *((_QWORD *)a1 + 32);
      v297 = *((_QWORD *)a1 + 29);
      v298 = a1[62];
      v299 = a1[63];
      do
      {
        v300 = 0;
        v301 = v294;
        do
        {
          v302 = *(float *)(v296 + v297 + v301);
          if (v302 >= 0.00000011921)
            *(float *)(*((_QWORD *)a1 + 5) + 4 * (a1[2] * v295 + a1[3] * (_DWORD)v300)) = 1.0 / v302;
          ++v300;
          v301 += v299;
        }
        while (v293 != v300);
        ++v295;
        v294 += v298;
      }
      while (v295 != v292);
    }
  }
  v366 = *((_QWORD *)a1 + 5);
  if (a1[1])
    v303 = *a1 == 0;
  else
    v303 = 1;
  v304 = *((_QWORD *)a1 + 1);
  if (v303)
    v305 = 0;
  else
    v305 = *(_QWORD *)a1;
  if (HIDWORD(v305) * HIDWORD(v304) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_339;
  }
  v306 = *((_QWORD *)a1 + 15);
  v307 = !a1[18] || a1[19] == 0;
  v308 = v307 || a1[20] == 0;
  v309 = v308;
  v310 = *((_QWORD *)a1 + 9);
  v311 = v308 ? 0 : a1[20];
  v312 = *(_QWORD *)(a1 + 21);
  v313 = a1[23];
  if (v311 * v313 == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_339;
  }
  v314 = v309 ? 0 : v310;
  v315 = *((_QWORD *)a1 + 25);
  v316 = !a1[41] || a1[40] == 0;
  v317 = *((_QWORD *)a1 + 20);
  v318 = *((_QWORD *)a1 + 21);
  v319 = v316 ? 0 : v317;
  if (HIDWORD(v319) * HIDWORD(v318) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
LABEL_339:
    abort();
  }
  *(_QWORD *)v330 = v366;
  *((_QWORD *)v330 + 1) = v305;
  *((_QWORD *)v330 + 2) = v304;
  *((_QWORD *)v330 + 3) = v306;
  *((_QWORD *)v330 + 4) = v314;
  *((_DWORD *)v330 + 10) = v311;
  *(_QWORD *)(v330 + 44) = v312;
  *((_DWORD *)v330 + 13) = v313;
  *((_QWORD *)v330 + 7) = v315;
  *((_QWORD *)v330 + 8) = v319;
  *((_QWORD *)v330 + 9) = v318;
  v330[80] = 1;
  if (__p)
  {
    v384 = __p;
    operator delete(__p);
  }
}

void sub_223F08E18(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x340];
  if (!STACK[0x340])
    _Unwind_Resume(a1);
  STACK[0x348] = (unint64_t)v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_223F08E58(uint64_t a1, float32x2_t *a2, float a3, float a4)
{
  float32x2_t *v8;
  uint64_t v9;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  __int32 v19;
  uint64_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  unsigned __int32 v33;
  float v34;
  float32x4_t v35;
  float32x2_t v36;
  float v37;
  float v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float v42;
  unsigned __int32 v43;
  float v44;
  float32x4_t v45;
  float32x2_t v46;
  float v47;
  float v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float v52;
  float v53;
  int8x16_t v54;
  float v55;
  unsigned __int32 v56;
  float32x4_t v57;
  float32x2_t v58;
  float v59;
  float v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float v64;
  float v65;
  int8x16_t v66;
  float v67;
  unsigned __int32 v68;
  float32x4_t v69;
  float32x2_t v70;
  float v71;
  float v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float v76;
  float v77;
  int8x16_t v78;
  float v79;
  unsigned __int32 v80;
  float32x4_t v81;
  float32x2_t v82;
  float v83;
  float v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float v89;
  float v90;
  int8x16_t v91;
  float v92;
  unsigned __int32 v93;
  float v95;
  BOOL v96;
  int8x16_t v97;
  float v98;
  int8x16_t v99;
  float32x2_t v100;
  uint64_t v101;
  __int32 v102;
  uint64_t v103;
  uint64_t v104;
  float v105;

  *(_OWORD *)a1 = xmmword_2245F53D0;
  *(_OWORD *)(a1 + 16) = xmmword_2245F53D0;
  *(_OWORD *)(a1 + 32) = xmmword_2245F53D0;
  *(_OWORD *)(a1 + 48) = xmmword_2245F53D0;
  *(_OWORD *)(a1 + 64) = xmmword_2245F53D0;
  *(_OWORD *)(a1 + 80) = xmmword_2245F53D0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (float32x2_t *)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 1065353216;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0x3F80000000000000;
  v103 = 0;
  v9 = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 56))(v9, &v103, &v104);
  __asm { FMOV            V1.2S, #-1.0 }
  v100 = vadd_f32(a2[12], _D1);
  v15 = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, float32x2_t *, uint64_t *))(*(_QWORD *)v15 + 56))(v15, &v100, &v101);
  *v8 = 0;
  *(float *)(a1 + 104) = a3;
  *(_OWORD *)(a1 + 108) = xmmword_224657E40;
  *(_DWORD *)(a1 + 124) = 0;
  *(float *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 140) = 1065353216;
  v22.i32[0] = HIDWORD(v104);
  v16 = -v105;
  v25.i32[0] = v104;
  v17 = v104;
  *(_QWORD *)(a1 + 144) = v104;
  v18 = v105;
  *(float *)(a1 + 152) = v105;
  *(float *)(a1 + 156) = v16;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = v25.i32[0];
  v23.i32[0] = HIDWORD(v101);
  v25.f32[0] = -*(float *)&v101;
  v19 = v102;
  *(_DWORD *)(a1 + 176) = v102;
  *(_QWORD *)(a1 + 192) = v17;
  v20 = v101;
  *(_QWORD *)(a1 + 168) = v101;
  v26.i32[0] = v102;
  *(_DWORD *)(a1 + 180) = v102;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = v25.i32[0];
  *(_QWORD *)(a1 + 200) = LODWORD(v18);
  *(float *)(a1 + 208) = v16;
  *(_DWORD *)(a1 + 212) = v22.i32[0];
  v21.f32[0] = -v23.f32[0];
  *(_QWORD *)(a1 + 216) = v20;
  *(_DWORD *)(a1 + 224) = v19;
  *(_DWORD *)(a1 + 228) = 0;
  v22.i32[0] = *(_DWORD *)(a1 + 116);
  v23.i64[0] = *(_QWORD *)(a1 + 108);
  v24 = v23;
  v24.i32[2] = v22.i32[0];
  *(int32x2_t *)v25.f32 = vdup_lane_s32(*(int32x2_t *)v23.f32, 1);
  *(_DWORD *)(a1 + 232) = v26.i32[0];
  *(_DWORD *)(a1 + 236) = v21.i32[0];
  *(float32x2_t *)v26.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), *(float32x2_t *)v25.f32, *(float32x2_t *)v23.f32, 1), v22, v22);
  if (*(float *)v26.i32 == 1.0
    || (*(float *)v26.i32 >= 1.0 ? (v27 = *(float *)v26.i32 + -1.0) : (v27 = 1.0 - *(float *)v26.i32), v27 <= 0.000001))
  {
    v26.i32[0] = v8[1].i32[0];
    v33 = vmla_f32(vmla_lane_f32(vmul_f32(*v8, *(float32x2_t *)v23.f32), *(float32x2_t *)v25.f32, *v8, 1), v22, *(float32x2_t *)v26.i8).u32[0];
  }
  else
  {
    v21.f32[0] = 1.0 / sqrtf(*(float *)v26.i32);
    v24 = vmulq_n_f32(v24, v21.f32[0]);
    *(float32x2_t *)v25.f32 = *v8;
    v25.i32[2] = v8[1].i32[0];
    v28 = vmul_lane_f32(v21, *(float32x2_t *)v23.f32, 1);
    v29 = vmul_f32(v22, v21);
    v30 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.f32, 1);
    v31 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), v28, *(float32x2_t *)v24.f32, 1), v31, v29).f32[0];
    if (v32 == 1.0)
    {
      v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL);
    }
    else
    {
      if (v32 >= 1.0)
        v95 = v32 + -1.0;
      else
        v95 = 1.0 - v32;
      v96 = v95 > 0.000001;
      v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL);
      if (v96)
      {
        v30.f32[0] = sqrtf(v32);
        v97 = (int8x16_t)vmulq_n_f32(v24, 1.0 / v30.f32[0]);
        v34 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v97.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1), *(float32x2_t *)v25.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL), *(float32x2_t *)v26.i8).f32[0];
        v25 = (float32x4_t)vdupq_lane_s32((int32x2_t)v30, 0);
        v24 = vdivq_f32(v24, v25);
        goto LABEL_10;
      }
    }
    v33 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v24.f32), v30, *(float32x2_t *)v25.f32, 1), v31, *(float32x2_t *)v26.i8).u32[0];
  }
  v34 = -*(float *)&v33;
LABEL_10:
  *(float *)a1 = v34;
  *(_DWORD *)(a1 + 12) = v24.i32[2];
  v25.i32[0] = *(_DWORD *)(a1 + 140);
  v26.i64[0] = *(_QWORD *)(a1 + 132);
  v35 = (float32x4_t)v26;
  v35.i32[2] = v25.i32[0];
  v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  *(_QWORD *)(a1 + 4) = v24.i64[0];
  v37 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v36, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v37 == 1.0 || (v37 >= 1.0 ? (v38 = v37 + -1.0) : (v38 = 1.0 - v37), v38 <= 0.000001))
  {
    v26.i32[0] = *(_DWORD *)(a1 + 128);
    v43 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 120), *(float32x2_t *)v35.f32), v36, *(float32x2_t *)(a1 + 120), 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
  }
  else
  {
    v36.f32[0] = 1.0 / sqrtf(v37);
    v35 = vmulq_n_f32(v35, v36.f32[0]);
    v24.i64[0] = *(_QWORD *)(a1 + 120);
    v24.i32[2] = *(_DWORD *)(a1 + 128);
    v39 = vmul_lane_f32(v36, *(float32x2_t *)v26.i8, 1);
    v40 = vmul_f32(*(float32x2_t *)v25.f32, v36);
    v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 1);
    v25.i64[0] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    v42 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), v39, *(float32x2_t *)v35.f32, 1), *(float32x2_t *)v25.f32, v40).f32[0];
    if (v42 == 1.0)
    {
      v26 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL);
    }
    else
    {
      v98 = v42 + -1.0;
      if (v42 < 1.0)
        v98 = 1.0 - v42;
      v96 = v98 > 0.000001;
      v26 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL);
      if (v96)
      {
        v25.f32[0] = sqrtf(v42);
        v99 = (int8x16_t)vmulq_n_f32(v35, 1.0 / v25.f32[0]);
        v44 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v99.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1), *(float32x2_t *)v24.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), *(float32x2_t *)v26.i8).f32[0];
        v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
        v35 = vdivq_f32(v35, v25);
        goto LABEL_19;
      }
    }
    v43 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v35.f32), v41, *(float32x2_t *)v24.f32, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
  }
  v44 = -*(float *)&v43;
LABEL_19:
  *(float *)(a1 + 16) = v44;
  *(_DWORD *)(a1 + 28) = v35.i32[2];
  v25.i32[0] = *(_DWORD *)(a1 + 164);
  v26.i64[0] = *(_QWORD *)(a1 + 156);
  v45 = (float32x4_t)v26;
  v45.i32[2] = v25.i32[0];
  v46 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  *(_QWORD *)(a1 + 20) = v35.i64[0];
  v47 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v46, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v47 == 1.0 || (v47 >= 1.0 ? (v48 = v47 + -1.0) : (v48 = 1.0 - v47), v48 <= 0.000001))
  {
    v26.i32[0] = *(_DWORD *)(a1 + 152);
    v56 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 144), *(float32x2_t *)v45.f32), v46, *(float32x2_t *)(a1 + 144), 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
LABEL_31:
    v55 = -*(float *)&v56;
    goto LABEL_32;
  }
  v46.f32[0] = 1.0 / sqrtf(v47);
  v45 = vmulq_n_f32(v45, v46.f32[0]);
  v35.i64[0] = *(_QWORD *)(a1 + 144);
  v35.i32[2] = *(_DWORD *)(a1 + 152);
  v49 = vmul_lane_f32(v46, *(float32x2_t *)v26.i8, 1);
  v50 = vmul_f32(*(float32x2_t *)v25.f32, v46);
  v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.f32, 1);
  v25.i64[0] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
  v52 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), v49, *(float32x2_t *)v45.f32, 1), *(float32x2_t *)v25.f32, v50).f32[0];
  if (v52 == 1.0 || (v52 >= 1.0 ? (v53 = v52 + -1.0) : (v53 = 1.0 - v52), v53 <= 0.000001))
  {
    v26 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL);
    v56 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v45.f32), v51, *(float32x2_t *)v35.f32, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
    goto LABEL_31;
  }
  v25.f32[0] = sqrtf(v52);
  v54 = (int8x16_t)vmulq_n_f32(v45, 1.0 / v25.f32[0]);
  v26 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL);
  v55 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v54.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1), *(float32x2_t *)v35.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), *(float32x2_t *)v26.i8).f32[0];
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
  v45 = vdivq_f32(v45, v25);
LABEL_32:
  *(float *)(a1 + 32) = v55;
  *(_DWORD *)(a1 + 44) = v45.i32[2];
  v25.i32[0] = *(_DWORD *)(a1 + 188);
  v26.i64[0] = *(_QWORD *)(a1 + 180);
  v57 = (float32x4_t)v26;
  v57.i32[2] = v25.i32[0];
  v58 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  *(_QWORD *)(a1 + 36) = v45.i64[0];
  v59 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v58, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v59 == 1.0 || (v59 >= 1.0 ? (v60 = v59 + -1.0) : (v60 = 1.0 - v59), v60 <= 0.000001))
  {
    v26.i32[0] = *(_DWORD *)(a1 + 176);
    v68 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 168), *(float32x2_t *)v57.f32), v58, *(float32x2_t *)(a1 + 168), 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
LABEL_44:
    v67 = -*(float *)&v68;
    goto LABEL_45;
  }
  v58.f32[0] = 1.0 / sqrtf(v59);
  v57 = vmulq_n_f32(v57, v58.f32[0]);
  v45.i64[0] = *(_QWORD *)(a1 + 168);
  v45.i32[2] = *(_DWORD *)(a1 + 176);
  v61 = vmul_lane_f32(v58, *(float32x2_t *)v26.i8, 1);
  v62 = vmul_f32(*(float32x2_t *)v25.f32, v58);
  v63 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 1);
  v25.i64[0] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
  v64 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32), v61, *(float32x2_t *)v57.f32, 1), *(float32x2_t *)v25.f32, v62).f32[0];
  if (v64 == 1.0 || (v64 >= 1.0 ? (v65 = v64 + -1.0) : (v65 = 1.0 - v64), v65 <= 0.000001))
  {
    v26 = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
    v68 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v57.f32), v63, *(float32x2_t *)v45.f32, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
    goto LABEL_44;
  }
  v25.f32[0] = sqrtf(v64);
  v66 = (int8x16_t)vmulq_n_f32(v57, 1.0 / v25.f32[0]);
  v26 = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
  v67 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v66.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1), *(float32x2_t *)v45.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), *(float32x2_t *)v26.i8).f32[0];
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
  v57 = vdivq_f32(v57, v25);
LABEL_45:
  *(float *)(a1 + 48) = v67;
  *(_DWORD *)(a1 + 60) = v57.i32[2];
  v25.i32[0] = *(_DWORD *)(a1 + 212);
  v26.i64[0] = *(_QWORD *)(a1 + 204);
  v69 = (float32x4_t)v26;
  v69.i32[2] = v25.i32[0];
  v70 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  *(_QWORD *)(a1 + 52) = v57.i64[0];
  v71 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v70, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v71 == 1.0 || (v71 >= 1.0 ? (v72 = v71 + -1.0) : (v72 = 1.0 - v71), v72 <= 0.000001))
  {
    v26.i32[0] = *(_DWORD *)(a1 + 200);
    v80 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 192), *(float32x2_t *)v69.f32), v70, *(float32x2_t *)(a1 + 192), 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
LABEL_57:
    v79 = -*(float *)&v80;
    goto LABEL_58;
  }
  v70.f32[0] = 1.0 / sqrtf(v71);
  v69 = vmulq_n_f32(v69, v70.f32[0]);
  v57.i64[0] = *(_QWORD *)(a1 + 192);
  v57.i32[2] = *(_DWORD *)(a1 + 200);
  v73 = vmul_lane_f32(v70, *(float32x2_t *)v26.i8, 1);
  v74 = vmul_f32(*(float32x2_t *)v25.f32, v70);
  v75 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.f32, 1);
  v25.i64[0] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
  v76 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), v73, *(float32x2_t *)v69.f32, 1), *(float32x2_t *)v25.f32, v74).f32[0];
  if (v76 == 1.0 || (v76 >= 1.0 ? (v77 = v76 + -1.0) : (v77 = 1.0 - v76), v77 <= 0.000001))
  {
    v26 = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL);
    v80 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v69.f32), v75, *(float32x2_t *)v57.f32, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
    goto LABEL_57;
  }
  v25.f32[0] = sqrtf(v76);
  v78 = (int8x16_t)vmulq_n_f32(v69, 1.0 / v25.f32[0]);
  v26 = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL);
  v79 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v78.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1), *(float32x2_t *)v57.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL), *(float32x2_t *)v26.i8).f32[0];
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
  v69 = vdivq_f32(v69, v25);
LABEL_58:
  *(float *)(a1 + 64) = v79;
  *(_DWORD *)(a1 + 76) = v69.i32[2];
  v25.i32[0] = *(_DWORD *)(a1 + 236);
  v26.i64[0] = *(_QWORD *)(a1 + 228);
  v81 = (float32x4_t)v26;
  v81.i32[2] = v25.i32[0];
  v82 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  *(_QWORD *)(a1 + 68) = v69.i64[0];
  v83 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v82, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v83 == 1.0 || (v83 >= 1.0 ? (v84 = v83 + -1.0) : (v84 = 1.0 - v83), v84 <= 0.000001))
  {
    v26.i32[0] = *(_DWORD *)(a1 + 224);
    v93 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 216), *(float32x2_t *)v81.f32), v82, *(float32x2_t *)(a1 + 216), 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8).u32[0];
LABEL_70:
    v92 = -*(float *)&v93;
    goto LABEL_71;
  }
  v82.f32[0] = 1.0 / sqrtf(v83);
  v81 = vmulq_n_f32(v81, v82.f32[0]);
  v69.i64[0] = *(_QWORD *)(a1 + 216);
  v69.i32[2] = *(_DWORD *)(a1 + 224);
  v85 = vmul_lane_f32(v82, *(float32x2_t *)v26.i8, 1);
  v86 = vmul_f32(*(float32x2_t *)v25.f32, v82);
  v87 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.f32, 1);
  v88 = (float32x2_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
  v89 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32), v85, *(float32x2_t *)v81.f32, 1), v88, v86).f32[0];
  if (v89 == 1.0 || (v89 >= 1.0 ? (v90 = v89 + -1.0) : (v90 = 1.0 - v89), v90 <= 0.000001))
  {
    v93 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v81.f32), v87, *(float32x2_t *)v69.f32, 1), v88, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)).u32[0];
    goto LABEL_70;
  }
  v88.f32[0] = sqrtf(v89);
  v91 = (int8x16_t)vmulq_n_f32(v81, 1.0 / v88.f32[0]);
  v92 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v91.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.i8, 1), *(float32x2_t *)v69.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)).f32[0];
  v81 = vdivq_f32(v81, (float32x4_t)vdupq_lane_s32((int32x2_t)v88, 0));
LABEL_71:
  *(float *)(a1 + 80) = v92;
  *(_DWORD *)(a1 + 92) = v81.i32[2];
  *(_QWORD *)(a1 + 84) = v81.i64[0];
  return a1;
}

uint64_t sub_223F09724(uint64_t result, uint64_t a2, double a3, double a4, int32x4_t a5, float32x4_t a6, double a7, double a8)
{
  float32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float v48;
  int8x16_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float v59;
  float v60;
  int8x16_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float v71;
  float v72;
  int8x16_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float v85;
  float v86;
  int8x16_t v87;
  float32x4_t v88;
  float v89;
  BOOL v90;
  int8x16_t v91;
  float32x2_t v92;
  float v93;
  int8x16_t v94;
  float32x2_t v95;

  *(_OWORD *)result = xmmword_2245F53D0;
  *(_OWORD *)(result + 16) = xmmword_2245F53D0;
  *(_OWORD *)(result + 32) = xmmword_2245F53D0;
  *(_OWORD *)(result + 48) = xmmword_2245F53D0;
  *(_OWORD *)(result + 64) = xmmword_2245F53D0;
  *(_OWORD *)(result + 80) = xmmword_2245F53D0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0x3F80000000000000;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0x3F80000000000000;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0x3F80000000000000;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_DWORD *)(result + 188) = 1065353216;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0x3F80000000000000;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 232) = 0x3F80000000000000;
  v8 = *(float32x2_t *)a2;
  *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 8);
  *(float32x2_t *)(result + 96) = v8;
  v9 = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(result + 116) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(result + 108) = v9;
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(result + 128) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(result + 120) = v10;
  v11 = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(result + 140) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(result + 132) = v11;
  v12 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(result + 152) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(result + 144) = v12;
  v13 = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(result + 164) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(result + 156) = v13;
  v14 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(result + 176) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(result + 168) = v14;
  v15 = *(_QWORD *)(a2 + 84);
  *(_DWORD *)(result + 188) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(result + 180) = v15;
  v16 = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(result + 200) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(result + 192) = v16;
  v17 = *(_QWORD *)(a2 + 108);
  *(_DWORD *)(result + 212) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(result + 204) = v17;
  v18 = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(result + 224) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(result + 216) = v18;
  v19 = *(_QWORD *)(a2 + 132);
  *(_DWORD *)(result + 236) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(result + 228) = v19;
  LODWORD(a4) = *(_DWORD *)(a2 + 20);
  a6.i64[0] = *(_QWORD *)(a2 + 12);
  v20 = a6;
  v20.i32[2] = LODWORD(a4);
  v21 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v22 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v21, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v22.f32[0] == 1.0 || (v22.f32[0] >= 1.0 ? (v23 = v22.f32[0] + -1.0) : (v23 = 1.0 - v22.f32[0]), v23 <= 0.000001))
  {
    v22.i32[0] = *(_DWORD *)(a2 + 8);
    v29 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)a6.f32), v21, *(float32x2_t *)a2, 1), *(float32x2_t *)&a4, v22);
  }
  else
  {
    *(float *)&a8 = 1.0 / sqrtf(v22.f32[0]);
    v20 = vmulq_n_f32(v20, *(float *)&a8);
    a5.i64[0] = *(_QWORD *)a2;
    a5.i32[2] = *(_DWORD *)(a2 + 8);
    v24 = vmul_lane_f32(*(float32x2_t *)&a8, *(float32x2_t *)a6.f32, 1);
    v25 = vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a8);
    v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
    *(_QWORD *)&a4 = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    v27 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), v24, *(float32x2_t *)v20.f32, 1), *(float32x2_t *)&a4, v25).f32[0];
    if (v27 == 1.0)
    {
      v28 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
    }
    else
    {
      if (v27 >= 1.0)
        v89 = v27 + -1.0;
      else
        v89 = 1.0 - v27;
      v90 = v89 > 0.000001;
      v28 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
      if (v90)
      {
        v26.f32[0] = sqrtf(v27);
        v91 = (int8x16_t)vmulq_n_f32(v20, 1.0 / v26.f32[0]);
        v92 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v91.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.i8, 1), *(float32x2_t *)a5.i8, 1);
        *(_QWORD *)&a4 = vextq_s8(v91, v91, 8uLL).u64[0];
        v29 = vmla_f32(v92, *(float32x2_t *)&a4, v28);
        *(float *)&a4 = -v29.f32[0];
        a5 = vdupq_lane_s32((int32x2_t)v26, 0);
        v20 = vdivq_f32(v20, (float32x4_t)a5);
        goto LABEL_10;
      }
    }
    v29 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v20.f32), v26, *(float32x2_t *)a5.i8, 1), *(float32x2_t *)&a4, v28);
  }
  *(float *)&a4 = -v29.f32[0];
LABEL_10:
  *(_DWORD *)result = LODWORD(a4);
  *(_DWORD *)(result + 12) = v20.i32[2];
  *(_QWORD *)(result + 4) = v20.i64[0];
  LODWORD(a4) = *(_DWORD *)(a2 + 44);
  a6.i64[0] = *(_QWORD *)(a2 + 36);
  v30 = a6;
  v30.i32[2] = LODWORD(a4);
  v31 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v31, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v32.f32[0] == 1.0 || (v32.f32[0] >= 1.0 ? (v33 = v32.f32[0] + -1.0) : (v33 = 1.0 - v32.f32[0]), v33 <= 0.000001))
  {
    v32.i32[0] = *(_DWORD *)(a2 + 32);
    v39 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 24), *(float32x2_t *)a6.f32), v31, *(float32x2_t *)(a2 + 24), 1), *(float32x2_t *)&a4, v32);
  }
  else
  {
    v29.f32[0] = 1.0 / sqrtf(v32.f32[0]);
    v30 = vmulq_n_f32(v30, v29.f32[0]);
    a5.i64[0] = *(_QWORD *)(a2 + 24);
    a5.i32[2] = *(_DWORD *)(a2 + 32);
    v34 = vmul_lane_f32(v29, *(float32x2_t *)a6.f32, 1);
    v35 = vmul_f32(*(float32x2_t *)&a4, v29);
    v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.f32, 1);
    *(_QWORD *)&a4 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
    v37 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32), v34, *(float32x2_t *)v30.f32, 1), *(float32x2_t *)&a4, v35).f32[0];
    if (v37 == 1.0)
    {
      v38 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
    }
    else
    {
      if (v37 >= 1.0)
        v93 = v37 + -1.0;
      else
        v93 = 1.0 - v37;
      v90 = v93 > 0.000001;
      v38 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
      if (v90)
      {
        v36.f32[0] = sqrtf(v37);
        v94 = (int8x16_t)vmulq_n_f32(v30, 1.0 / v36.f32[0]);
        v95 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v94.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v94.i8, 1), *(float32x2_t *)a5.i8, 1);
        *(_QWORD *)&a4 = vextq_s8(v94, v94, 8uLL).u64[0];
        v39 = vmla_f32(v95, *(float32x2_t *)&a4, v38);
        *(float *)&a4 = -v39.f32[0];
        a5 = vdupq_lane_s32((int32x2_t)v36, 0);
        v30 = vdivq_f32(v30, (float32x4_t)a5);
        goto LABEL_19;
      }
    }
    v39 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v30.f32), v36, *(float32x2_t *)a5.i8, 1), *(float32x2_t *)&a4, v38);
  }
  *(float *)&a4 = -v39.f32[0];
LABEL_19:
  *(_DWORD *)(result + 16) = LODWORD(a4);
  *(_DWORD *)(result + 28) = v30.i32[2];
  *(_QWORD *)(result + 20) = v30.i64[0];
  LODWORD(a4) = *(_DWORD *)(a2 + 68);
  a6.i64[0] = *(_QWORD *)(a2 + 60);
  v40 = a6;
  v40.i32[2] = LODWORD(a4);
  v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v42 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v41, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v42.f32[0] == 1.0 || (v42.f32[0] >= 1.0 ? (v43 = v42.f32[0] + -1.0) : (v43 = 1.0 - v42.f32[0]), v43 <= 0.000001))
  {
    v42.i32[0] = *(_DWORD *)(a2 + 56);
    v51 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 48), *(float32x2_t *)a6.f32), v41, *(float32x2_t *)(a2 + 48), 1), *(float32x2_t *)&a4, v42);
LABEL_31:
    *(float *)&a4 = -v51.f32[0];
    goto LABEL_32;
  }
  v39.f32[0] = 1.0 / sqrtf(v42.f32[0]);
  v40 = vmulq_n_f32(v40, v39.f32[0]);
  a5.i64[0] = *(_QWORD *)(a2 + 48);
  a5.i32[2] = *(_DWORD *)(a2 + 56);
  v44 = vmul_lane_f32(v39, *(float32x2_t *)a6.f32, 1);
  v45 = vmul_f32(*(float32x2_t *)&a4, v39);
  v46 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1);
  *(_QWORD *)&a4 = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
  v47 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), v44, *(float32x2_t *)v40.f32, 1), *(float32x2_t *)&a4, v45).f32[0];
  if (v47 == 1.0 || (v47 >= 1.0 ? (v48 = v47 + -1.0) : (v48 = 1.0 - v47), v48 <= 0.000001))
  {
    v51 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v40.f32), v46, *(float32x2_t *)a5.i8, 1), *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
    goto LABEL_31;
  }
  v46.f32[0] = sqrtf(v47);
  v49 = (int8x16_t)vmulq_n_f32(v40, 1.0 / v46.f32[0]);
  v50 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v49.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1), *(float32x2_t *)a5.i8, 1);
  *(_QWORD *)&a4 = vextq_s8(v49, v49, 8uLL).u64[0];
  v51 = vmla_f32(v50, *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
  *(float *)&a4 = -v51.f32[0];
  a5 = vdupq_lane_s32((int32x2_t)v46, 0);
  v40 = vdivq_f32(v40, (float32x4_t)a5);
LABEL_32:
  *(_DWORD *)(result + 32) = LODWORD(a4);
  *(_DWORD *)(result + 44) = v40.i32[2];
  *(_QWORD *)(result + 36) = v40.i64[0];
  LODWORD(a4) = *(_DWORD *)(a2 + 92);
  a6.i64[0] = *(_QWORD *)(a2 + 84);
  v52 = a6;
  v52.i32[2] = LODWORD(a4);
  v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v54 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v53, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v54.f32[0] == 1.0 || (v54.f32[0] >= 1.0 ? (v55 = v54.f32[0] + -1.0) : (v55 = 1.0 - v54.f32[0]), v55 <= 0.000001))
  {
    v54.i32[0] = *(_DWORD *)(a2 + 80);
    v63 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 72), *(float32x2_t *)a6.f32), v53, *(float32x2_t *)(a2 + 72), 1), *(float32x2_t *)&a4, v54);
LABEL_44:
    *(float *)&a4 = -v63.f32[0];
    goto LABEL_45;
  }
  v51.f32[0] = 1.0 / sqrtf(v54.f32[0]);
  v52 = vmulq_n_f32(v52, v51.f32[0]);
  a5.i64[0] = *(_QWORD *)(a2 + 72);
  a5.i32[2] = *(_DWORD *)(a2 + 80);
  v56 = vmul_lane_f32(v51, *(float32x2_t *)a6.f32, 1);
  v57 = vmul_f32(*(float32x2_t *)&a4, v51);
  v58 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1);
  *(_QWORD *)&a4 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  v59 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32), v56, *(float32x2_t *)v52.f32, 1), *(float32x2_t *)&a4, v57).f32[0];
  if (v59 == 1.0 || (v59 >= 1.0 ? (v60 = v59 + -1.0) : (v60 = 1.0 - v59), v60 <= 0.000001))
  {
    v63 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v52.f32), v58, *(float32x2_t *)a5.i8, 1), *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
    goto LABEL_44;
  }
  v58.f32[0] = sqrtf(v59);
  v61 = (int8x16_t)vmulq_n_f32(v52, 1.0 / v58.f32[0]);
  v62 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v61.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1), *(float32x2_t *)a5.i8, 1);
  *(_QWORD *)&a4 = vextq_s8(v61, v61, 8uLL).u64[0];
  v63 = vmla_f32(v62, *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
  *(float *)&a4 = -v63.f32[0];
  a5 = vdupq_lane_s32((int32x2_t)v58, 0);
  v52 = vdivq_f32(v52, (float32x4_t)a5);
LABEL_45:
  *(_DWORD *)(result + 48) = LODWORD(a4);
  *(_DWORD *)(result + 60) = v52.i32[2];
  *(_QWORD *)(result + 52) = v52.i64[0];
  LODWORD(a4) = *(_DWORD *)(a2 + 116);
  a6.i64[0] = *(_QWORD *)(a2 + 108);
  v64 = a6;
  v64.i32[2] = LODWORD(a4);
  v65 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v66 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v65, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v66.f32[0] == 1.0 || (v66.f32[0] >= 1.0 ? (v67 = v66.f32[0] + -1.0) : (v67 = 1.0 - v66.f32[0]), v67 <= 0.000001))
  {
    v66.i32[0] = *(_DWORD *)(a2 + 104);
    v75 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 96), *(float32x2_t *)a6.f32), v65, *(float32x2_t *)(a2 + 96), 1), *(float32x2_t *)&a4, v66);
LABEL_57:
    *(float *)&a4 = -v75.f32[0];
    goto LABEL_58;
  }
  v63.f32[0] = 1.0 / sqrtf(v66.f32[0]);
  v64 = vmulq_n_f32(v64, v63.f32[0]);
  a5.i64[0] = *(_QWORD *)(a2 + 96);
  a5.i32[2] = *(_DWORD *)(a2 + 104);
  v68 = vmul_lane_f32(v63, *(float32x2_t *)a6.f32, 1);
  v69 = vmul_f32(*(float32x2_t *)&a4, v63);
  v70 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.f32, 1);
  *(_QWORD *)&a4 = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
  v71 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32), v68, *(float32x2_t *)v64.f32, 1), *(float32x2_t *)&a4, v69).f32[0];
  if (v71 == 1.0 || (v71 >= 1.0 ? (v72 = v71 + -1.0) : (v72 = 1.0 - v71), v72 <= 0.000001))
  {
    v75 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v64.f32), v70, *(float32x2_t *)a5.i8, 1), *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
    goto LABEL_57;
  }
  v70.f32[0] = sqrtf(v71);
  v73 = (int8x16_t)vmulq_n_f32(v64, 1.0 / v70.f32[0]);
  v74 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v73.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.i8, 1), *(float32x2_t *)a5.i8, 1);
  *(_QWORD *)&a4 = vextq_s8(v73, v73, 8uLL).u64[0];
  v75 = vmla_f32(v74, *(float32x2_t *)&a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL));
  *(float *)&a4 = -v75.f32[0];
  a5 = vdupq_lane_s32((int32x2_t)v70, 0);
  v64 = vdivq_f32(v64, (float32x4_t)a5);
LABEL_58:
  *(_DWORD *)(result + 64) = LODWORD(a4);
  *(_DWORD *)(result + 76) = v64.i32[2];
  *(_QWORD *)(result + 68) = v64.i64[0];
  LODWORD(a4) = *(_DWORD *)(a2 + 140);
  a6.i64[0] = *(_QWORD *)(a2 + 132);
  v76 = a6;
  v76.i32[2] = LODWORD(a4);
  v77 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v78 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v77, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)&a4, *(float32x2_t *)&a4);
  if (v78.f32[0] == 1.0 || (v78.f32[0] >= 1.0 ? (v79 = v78.f32[0] + -1.0) : (v79 = 1.0 - v78.f32[0]), v79 <= 0.000001))
  {
    v78.i32[0] = *(_DWORD *)(a2 + 128);
    *(float *)(result + 80) = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 120), *(float32x2_t *)a6.f32), v77, *(float32x2_t *)(a2 + 120), 1), *(float32x2_t *)&a4, v78).f32[0];
    *(_DWORD *)(result + 92) = LODWORD(a4);
    *(_QWORD *)(result + 84) = a6.i64[0];
  }
  else
  {
    v75.f32[0] = 1.0 / sqrtf(v78.f32[0]);
    v80 = vmulq_n_f32(v76, v75.f32[0]);
    a5.i64[0] = *(_QWORD *)(a2 + 120);
    a5.i32[2] = *(_DWORD *)(a2 + 128);
    v81 = vmul_lane_f32(v75, *(float32x2_t *)a6.f32, 1);
    v82 = vmul_f32(*(float32x2_t *)&a4, v75);
    v83 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.f32, 1);
    v84 = (float32x2_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
    v85 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32), v81, *(float32x2_t *)v80.f32, 1), v84, v82).f32[0];
    if (v85 == 1.0 || (v85 >= 1.0 ? (v86 = v85 + -1.0) : (v86 = 1.0 - v85), v86 <= 0.000001))
    {
      *(float *)(result + 80) = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v80.f32), v83, *(float32x2_t *)a5.i8, 1), v84, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL)).f32[0];
      *(_DWORD *)(result + 92) = v80.i32[2];
      *(_QWORD *)(result + 84) = v80.i64[0];
    }
    else
    {
      v83.f32[0] = sqrtf(v85);
      v87 = (int8x16_t)vmulq_n_f32(v80, 1.0 / v83.f32[0]);
      v88 = vdivq_f32(v80, (float32x4_t)vdupq_lane_s32((int32x2_t)v83, 0));
      *(float *)(result + 80) = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v87.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), *(float32x2_t *)a5.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL)).f32[0];
      *(_DWORD *)(result + 92) = v88.i32[2];
      *(_QWORD *)(result + 84) = v88.i64[0];
    }
  }
  return result;
}

void sub_223F09F90(unint64_t a1@<X0>, float32x2_t **a2@<X8>, float a3@<S0>)
{
  float v4;
  BOOL v5;
  float32x2_t *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  __float2 v11;
  float32x2_t v12;
  __float2 v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  float32x2_t *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  float32x2_t *v28;
  float32x2_t *v29;
  float32x2_t v30;
  float32x2_t *v31;
  int64_t v32;
  unint64_t v33;
  float32x2_t *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  const double *v52;
  double *v53;
  uint64_t v54;
  const double *v55;
  double *v56;
  float32x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  float32x2_t *v61;
  float32x2_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  float32x2_t *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x2_t *v74;
  _OWORD *v75;
  float32x2_t *v76;
  uint64_t v77;
  __int128 v78;
  float32x2_t v79;
  unint64_t v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  float32x2_t *v90;
  float32x2_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float32x2_t *v95;
  _OWORD *v96;
  float32x2_t *v97;
  uint64_t v98;
  __int128 v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t *v102;
  unint64_t v104;
  float32x2_t v105;
  float32x2_t v107;
  void *__p;
  float32x2_t *v109;
  char *v110;
  float64x2x2_t v111;
  float64x2x2_t v112;

  v4 = fabsf(a3);
  v5 = a3 != 0.0 && v4 > 0.000001;
  if (!v5 || a1 <= 2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  __p = 0;
  v109 = 0;
  v110 = 0;
  if (a1 >> 60)
    sub_22316E078();
  v7 = (float32x2_t *)operator new(16 * a1);
  v8 = 0;
  __p = v7;
  v109 = v7;
  v110 = (char *)&v7[2 * a1];
  v9 = 0.0;
  do
  {
    v11 = __sincosf_stret(v9 * 0.017453);
    v12 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v11.__sinval), LODWORD(v11.__cosval)), a3);
    v13 = __sincosf_stret((float)(v9 * 0.017453) + -1.5708);
    v14 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v13.__sinval), LODWORD(v13.__cosval)), a3 * 0.1);
    v15 = vadd_f32(v12, v14);
    v16 = vsub_f32(v12, v14);
    if (v7 < (float32x2_t *)v110)
    {
      *v7 = v15;
      v7[1] = v16;
      v10 = (uint64_t)&v7[2];
      goto LABEL_12;
    }
    v17 = (float32x2_t *)__p;
    v18 = (char *)v7 - (_BYTE *)__p;
    v19 = ((char *)v7 - (_BYTE *)__p) >> 4;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60)
      sub_22316E078();
    v21 = v110 - (_BYTE *)__p;
    if ((v110 - (_BYTE *)__p) >> 3 > v20)
      v20 = v21 >> 3;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v22 = 0xFFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 60)
        sub_223174E94();
      v23 = (char *)operator new(16 * v22);
      v24 = (float32x2_t *)&v23[16 * v19];
      v25 = &v23[16 * v22];
      *v24 = v15;
      v24[1] = v16;
      v10 = (uint64_t)&v24[2];
      v26 = (char *)v7 - (char *)v17;
      if (v7 == v17)
      {
LABEL_29:
        __p = v24;
        v110 = v25;
LABEL_30:
        operator delete(v7);
        goto LABEL_12;
      }
    }
    else
    {
      v23 = 0;
      v24 = (float32x2_t *)(16 * v19);
      v25 = 0;
      *v24 = v15;
      v24[1] = v16;
      v10 = 16 * v19 + 16;
      v26 = (char *)v7 - (char *)v17;
      if (v7 == v17)
        goto LABEL_29;
    }
    v27 = v26 - 16;
    if (v27 < 0x3F0)
      goto LABEL_24;
    v31 = v7 - 2;
    v32 = (char *)&v7[-2] - (char *)v17;
    v33 = v32 & 0xFFFFFFFFFFFFFFF0;
    if (&v23[v18 - 16 - (v32 & 0xFFFFFFFFFFFFFFF0)] > &v23[v18 - 16])
      goto LABEL_24;
    if (&v23[v18 - 8 - v33] > &v23[v18 - 8])
      goto LABEL_24;
    if ((float32x2_t *)((char *)v31 - v33) > v31)
      goto LABEL_24;
    v34 = v7 - 1;
    if ((float32x2_t *)((char *)&v7[-1] - v33) > &v7[-1])
      goto LABEL_24;
    v35 = v32 & 0xFFFFFFFFFFFFFFF0;
    v36 = (unint64_t)&v23[v18 - v35 - 16];
    v37 = &v23[v18 - 8];
    v38 = (unint64_t)&v23[v18 - v35 - 8];
    v39 = (unint64_t)v31 - v35;
    v40 = (unint64_t)v34 - v35;
    v41 = v36 >= (unint64_t)v34 || v39 >= (unint64_t)v37;
    v42 = !v41;
    v43 = v36 >= (unint64_t)v7 || v40 >= (unint64_t)v37;
    v44 = !v43;
    v45 = v38 >= (unint64_t)v34 || v39 >= (unint64_t)v24;
    v46 = !v45;
    v47 = v38 >= (unint64_t)v7 || v40 >= (unint64_t)v24;
    v48 = !v47;
    v49 = v38 >= (unint64_t)v37 || v36 >= (unint64_t)v24;
    if (!v49 || v42 || v44 || v46 || v48)
    {
LABEL_24:
      v28 = v7;
      v29 = v24;
      do
      {
LABEL_25:
        v30 = v28[-2];
        v28 -= 2;
        v29[-2] = v30;
        v29 -= 2;
        v29[1] = v28[1];
      }
      while (v28 != v17);
      goto LABEL_26;
    }
    v50 = (v27 >> 4) + 1;
    v51 = 16 * (v50 & 0x1FFFFFFFFFFFFFFCLL);
    v28 = &v7[v51 / 0xFFFFFFFFFFFFFFF8];
    v29 = &v24[v51 / 0xFFFFFFFFFFFFFFF8];
    v52 = (const double *)&v7[-4];
    v53 = (double *)&v24[-4];
    v54 = v50 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v111 = vld2q_f64(v52);
      v55 = v52 - 4;
      v112 = vld2q_f64(v55);
      vst2q_f64(v53, v111);
      v56 = v53 - 4;
      vst2q_f64(v56, v112);
      v53 -= 8;
      v52 -= 8;
      v54 -= 4;
    }
    while (v54);
    if (v50 != (v50 & 0x1FFFFFFFFFFFFFFCLL))
      goto LABEL_25;
LABEL_26:
    v7 = (float32x2_t *)__p;
    __p = v29;
    v110 = v25;
    if (v7)
      goto LABEL_30;
LABEL_12:
    v109 = (float32x2_t *)v10;
    v9 = (float)(360.0 / (float)a1) + v9;
    ++v8;
    v7 = (float32x2_t *)v10;
  }
  while (v8 != a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v57 = (float32x2_t *)operator new(8 * a1);
  *a2 = v57;
  a2[1] = v57;
  a2[2] = &v57[a1];
  v58 = 1;
  do
  {
    sub_22369F3FC((float32x2_t *)__p + 2 * v58 - 2, (float32x2_t *)__p + 2 * v58, &v107, 1);
    v61 = a2[1];
    v60 = (unint64_t)a2[2];
    if ((unint64_t)v61 < v60)
    {
      *v61 = v107;
      v59 = (uint64_t)&v61[1];
      goto LABEL_74;
    }
    v62 = *a2;
    v63 = (char *)v61 - (char *)*a2;
    v64 = v63 >> 3;
    v65 = (v63 >> 3) + 1;
    if (v65 >> 61)
      sub_22316E078();
    v66 = v60 - (_QWORD)v62;
    if (v66 >> 2 > v65)
      v65 = v66 >> 2;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
      v67 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
    {
      if (v67 >> 61)
        sub_223174E94();
      v68 = operator new(8 * v67);
      v69 = (float32x2_t *)&v68[8 * v64];
      *v69 = v107;
      v59 = (uint64_t)&v69[1];
      v70 = (char *)((char *)v61 - (char *)v62);
      if (v61 == v62)
      {
LABEL_85:
        *a2 = v69;
        a2[1] = (float32x2_t *)v59;
        a2[2] = (float32x2_t *)&v68[8 * v67];
        if (v61)
          goto LABEL_95;
        goto LABEL_74;
      }
    }
    else
    {
      v68 = 0;
      v69 = (float32x2_t *)(8 * v64);
      *(float32x2_t *)(8 * v64) = v107;
      v59 = 8 * v64 + 8;
      v70 = (char *)((char *)v61 - (char *)v62);
      if (v61 == v62)
        goto LABEL_85;
    }
    v71 = (unint64_t)(v70 - 8);
    if (v71 < 0x58)
      goto LABEL_137;
    if ((unint64_t)((char *)v61 - &v68[v63]) < 0x20)
      goto LABEL_137;
    v72 = (v71 >> 3) + 1;
    v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    v74 = &v61[v73 / 0xFFFFFFFFFFFFFFF8];
    v69 = (float32x2_t *)((char *)v69 - v73);
    v75 = &v68[8 * v64 - 16];
    v76 = v61 - 2;
    v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v78 = *(_OWORD *)v76->f32;
      *(v75 - 1) = *(_OWORD *)v76[-2].f32;
      *v75 = v78;
      v75 -= 2;
      v76 -= 4;
      v77 -= 4;
    }
    while (v77);
    v61 = v74;
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_137:
      do
      {
        v79 = v61[-1];
        --v61;
        v69[-1] = v79;
        --v69;
      }
      while (v61 != v62);
    }
    v61 = *a2;
    *a2 = v69;
    a2[1] = (float32x2_t *)v59;
    a2[2] = (float32x2_t *)&v68[8 * v67];
    if (v61)
LABEL_95:
      operator delete(v61);
LABEL_74:
    a2[1] = (float32x2_t *)v59;
    ++v58;
  }
  while (v58 != a1);
  sub_22369F3FC(v109 - 2, (float32x2_t *)__p, &v107, 1);
  v81 = a2[1];
  v80 = (unint64_t)a2[2];
  if ((unint64_t)v81 >= v80)
  {
    v83 = *a2;
    v84 = (char *)v81 - (char *)*a2;
    v85 = v84 >> 3;
    v86 = (v84 >> 3) + 1;
    if (v86 >> 61)
      sub_22316E078();
    v87 = v80 - (_QWORD)v83;
    if (v87 >> 2 > v86)
      v86 = v87 >> 2;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
      v88 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v88 = v86;
    if (v88)
    {
      if (v88 >> 61)
        sub_223174E94();
      v89 = operator new(8 * v88);
    }
    else
    {
      v89 = 0;
    }
    v90 = (float32x2_t *)&v89[8 * v85];
    v91 = (float32x2_t *)&v89[8 * v88];
    *v90 = v107;
    v82 = v90 + 1;
    if (v81 != v83)
    {
      v92 = (char *)v81 - (char *)v83 - 8;
      if (v92 < 0x58)
        goto LABEL_138;
      if ((unint64_t)((char *)v81 - v89 - v84) < 0x20)
        goto LABEL_138;
      v93 = (v92 >> 3) + 1;
      v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
      v95 = &v81[v94 / 0xFFFFFFFFFFFFFFF8];
      v90 = (float32x2_t *)((char *)v90 - v94);
      v96 = &v89[8 * v85 - 16];
      v97 = v81 - 2;
      v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *(_OWORD *)v97->f32;
        *(v96 - 1) = *(_OWORD *)v97[-2].f32;
        *v96 = v99;
        v96 -= 2;
        v97 -= 4;
        v98 -= 4;
      }
      while (v98);
      v81 = v95;
      if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_138:
        do
        {
          v100 = v81[-1];
          --v81;
          v90[-1] = v100;
          --v90;
        }
        while (v81 != v83);
      }
      v81 = *a2;
    }
    *a2 = v90;
    a2[1] = v82;
    a2[2] = v91;
    if (v81)
      operator delete(v81);
  }
  else
  {
    *v81 = v107;
    v82 = v81 + 1;
  }
  a2[1] = v82;
  v101 = *a2;
  v102 = v82 - 1;
  if (*a2 != v82 && v102 > v101)
  {
    v104 = (unint64_t)&v101[1];
    do
    {
      v105 = *(float32x2_t *)(v104 - 8);
      *(float32x2_t *)(v104 - 8) = *v102;
      *v102-- = v105;
      v41 = v104 >= (unint64_t)v102;
      v104 += 8;
    }
    while (!v41);
  }
  if (__p)
  {
    v109 = (float32x2_t *)__p;
    operator delete(__p);
  }
}

void sub_223F0A634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223F0A67C(uint64_t *a1, char **a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  int v7;
  int v8;
  uint64_t **v9;
  uint64_t **v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  double v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  double v30;
  double v31;
  _BOOL4 v32;
  uint64_t **v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  double v39;
  double v40;
  _BOOL4 v41;
  double v42;
  BOOL v43;
  _QWORD *v44;
  _QWORD *v45;

  sub_223F0ABC8((uint64_t)a2, 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - a1[1]) >> 3));
  sub_223F0AE18(a1);
  v4 = (__int128 *)a1[1];
  v5 = (__int128 *)a1[2];
  if (v4 == v5)
    goto LABEL_13;
  if ((char *)v5 - (char *)v4 == 40)
  {
    sub_223F0DA98(a2, (uint64_t)v4);
  }
  else
  {
    v6 = (__int128 *)a1[4];
    if (v6 == v5)
      goto LABEL_12;
    v7 = 0;
    v8 = *(_DWORD *)v4;
    do
    {
      if (*(_DWORD *)v6 != v8)
        break;
      if (v8 != *((_DWORD *)v6 + 2))
        break;
      v6 = (__int128 *)((char *)v6 + 40);
      a1[4] = (uint64_t)v6;
      ++v7;
    }
    while (v6 != v5);
    if (v7 != 1)
    {
LABEL_12:
      sub_223F0DBD0(a1, (uint64_t)a2);
      goto LABEL_13;
    }
    sub_223F0DD38((uint64_t)a1, (uint64_t)v4, v4, (uint64_t)v4 + 40, a1 + 17, (uint64_t)a2);
  }
  a1[4] += 40;
LABEL_13:
  v9 = (uint64_t **)a1[9];
  v10 = (uint64_t **)a1[10];
  while (1)
  {
LABEL_15:
    while (1)
    {
      v11 = (int *)a1[2];
      v12 = (int *)a1[4];
      if (v9 == v10)
        break;
      if (v12 != v11)
      {
        v13 = *v12;
        v14 = (*v9)[4];
        if (*v12 >= 0)
          *(_QWORD *)&v15 = 0x8000000000000000 - COERCE__INT64((double)v13);
        else
          v15 = (double)v13;
        if (v14 >= 0)
          v14 = 0x8000000000000000 - v14;
        v16 = *(_QWORD *)&v15 >= (unint64_t)v14;
        v17 = *(_QWORD *)&v15 - v14;
        if (v17 != 0 && v16 && v17 >= 0x41)
          goto LABEL_28;
      }
      sub_223F0B530((uint64_t)a1, a2);
      v10 = (uint64_t **)a1[9];
      v18 = a1[10];
      v9 = v10;
      if (v10 != (uint64_t **)v18)
      {
LABEL_29:
        v9 = v10;
        while (1)
        {
          v20 = *v9;
          if (*((_BYTE *)*v9 + 40))
            break;
          v21 = v18 - (_QWORD)v9;
          if (v18 - (uint64_t)v9 >= 9)
          {
            v22 = 0;
            v23 = v21 >> 3;
            v24 = (unint64_t)((v21 >> 3) - 2) >> 1;
            v25 = v9;
            do
            {
              v26 = &v25[v22 + 1];
              v27 = (2 * v22) | 1;
              v28 = 2 * v22 + 2;
              if (v28 < v23)
              {
                v29 = v26[1];
                v30 = *((double *)v29 + 4);
                v31 = *((double *)*v26 + 4);
                v32 = *((double *)v29 + 3) < *((double *)*v26 + 3);
                if (v30 != v31)
                  v32 = v30 < v31;
                if (v32)
                {
                  ++v26;
                  v27 = v28;
                }
              }
              *v25 = *v26;
              v25 = v26;
              v22 = v27;
            }
            while (v27 <= v24);
            v33 = (uint64_t **)(v18 - 8);
            if (v26 == v33)
            {
              *v26 = v20;
            }
            else
            {
              *v26 = *v33;
              *v33 = v20;
              v34 = (char *)v26 - (char *)v9 + 8;
              if (v34 >= 9)
              {
                v35 = (((unint64_t)v34 >> 3) - 2) >> 1;
                v36 = &v9[v35];
                v37 = *v36;
                v38 = *v26;
                v39 = *((double *)*v26 + 4);
                v40 = *((double *)*v36 + 4);
                v41 = *((double *)*v26 + 3) < *((double *)*v36 + 3);
                if (v39 != v40)
                  v41 = v39 < v40;
                if (v41)
                {
                  do
                  {
                    *v26 = v37;
                    v26 = v36;
                    if (!v35)
                      break;
                    v35 = (v35 - 1) >> 1;
                    v36 = &v9[v35];
                    v37 = *v36;
                    v42 = *((double *)*v36 + 4);
                    v43 = *((double *)v38 + 3) < *((double *)*v36 + 3);
                    if (v39 != v42)
                      v43 = v39 < v42;
                  }
                  while (v43);
                  *v26 = v38;
                }
              }
            }
          }
          a1[10] -= 8;
          v19 = *v20;
          *(_QWORD *)(v19 + 8) = v20[1];
          *(_QWORD *)v20[1] = v19;
          --a1[15];
          operator delete(v20);
          v10 = (uint64_t **)a1[9];
          v18 = a1[10];
          v9 = v10;
          if (v10 == (uint64_t **)v18)
            goto LABEL_15;
        }
        v10 = (uint64_t **)v18;
      }
    }
    if (v12 == v11)
      break;
LABEL_28:
    sub_223F0B038((uint64_t)a1, (uint64_t)a2);
    v10 = (uint64_t **)a1[9];
    v18 = a1[10];
    v9 = v10;
    if (v10 != (uint64_t **)v18)
      goto LABEL_29;
  }
  v45 = (_QWORD *)a1[17];
  v44 = a1 + 17;
  sub_223198030((uint64_t)(v44 - 1), v45);
  *(v44 - 1) = v44;
  *v44 = 0;
  v44[1] = 0;
  return sub_223F0B9D8((uint64_t *)a2);
}

uint64_t sub_223F0A9BC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;

  sub_223198030(a1 + 128, *(_QWORD **)(a1 + 136));
  if (*(_QWORD *)(a1 + 120))
  {
    v3 = *(_QWORD *)(a1 + 104);
    v2 = *(uint64_t **)(a1 + 112);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 120) = 0;
    if (v2 != (uint64_t *)(a1 + 104))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 104));
    }
  }
  v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 48) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_223F0AA64(_QWORD *a1, int *a2, int *a3)
{
  int v4;
  int v5;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  char **v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;

  v4 = *a2;
  v5 = *a3;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char **)(a1 + 1);
    v10 = (char *)a1[1];
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v10) >> 3) + 1;
    if (v11 > 0x666666666666666)
      sub_22316E078();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (_QWORD)v10) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x666666666666666)
        sub_223174E94();
      v14 = (char *)operator new(40 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * ((v7 - v10) >> 3)];
    *(_DWORD *)v15 = v4;
    *((_DWORD *)v15 + 1) = v5;
    *((_DWORD *)v15 + 2) = v4;
    *((_DWORD *)v15 + 3) = v5;
    *((_QWORD *)v15 + 2) = 0;
    *((_QWORD *)v15 + 4) = 0;
    v8 = v15 + 40;
    if (v7 != v10)
    {
      do
      {
        v16 = *(_OWORD *)(v7 - 40);
        v17 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v15 - 24) = v17;
        *(_OWORD *)(v15 - 40) = v16;
        v15 -= 40;
        v7 -= 40;
      }
      while (v7 != v10);
      v7 = *v9;
    }
    a1[1] = v15;
    a1[2] = v8;
    a1[3] = &v14[40 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_DWORD *)v7 = v4;
    *((_DWORD *)v7 + 1) = v5;
    *((_DWORD *)v7 + 2) = v4;
    *((_DWORD *)v7 + 3) = v5;
    *((_QWORD *)v7 + 2) = 0;
    v8 = v7 + 40;
    *((_QWORD *)v7 + 4) = 0;
  }
  a1[2] = v8;
  result = a1[347];
  *((_QWORD *)v8 - 2) = result;
  a1[347] = result + 1;
  return result;
}

void sub_223F0ABC8(uint64_t a1, unint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _BYTE *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v4 = *(_BYTE **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[24 * ((v5 - v4) / 24)];
    v8 = v7;
    if (v5 != v4)
    {
      v9 = &v6[24 * ((v5 - v4) / 24)];
      do
      {
        v10 = *(_OWORD *)(v5 - 24);
        v8 = v9 - 24;
        *((_QWORD *)v9 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v5 -= 24;
        v9 -= 24;
      }
      while (v5 != v4);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[24 * a2];
    if (v4)
      operator delete(v4);
  }
  v11 = *(_BYTE **)(a1 + 24);
  if (2 * a2 > (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v11) >> 5)
  {
    if ((2 * a2) >> 59)
      sub_22316E078();
    v12 = *(_BYTE **)(a1 + 32);
    v13 = (char *)operator new(a2 << 6);
    v14 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFE0];
    v15 = v14;
    if (v12 != v11)
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFE0];
      do
      {
        v17 = *((_OWORD *)v12 - 1);
        v15 = v16 - 32;
        *((_OWORD *)v16 - 2) = *((_OWORD *)v12 - 2);
        *((_OWORD *)v16 - 1) = v17;
        v12 -= 32;
        v16 -= 32;
      }
      while (v12 != v11);
    }
    *(_QWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = &v13[64 * a2];
    if (v11)
      operator delete(v11);
  }
  v18 = *(_BYTE **)(a1 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v18) >> 4) < 6 * a2)
  {
    if (6 * a2 >= 0x555555555555556)
      sub_22316E078();
    v19 = *(_BYTE **)(a1 + 56);
    v20 = (char *)operator new(288 * a2);
    v21 = &v20[48 * ((v19 - v18) / 48)];
    v22 = v21;
    if (v19 != v18)
    {
      v23 = &v20[48 * ((v19 - v18) / 48)];
      do
      {
        v24 = *((_OWORD *)v19 - 3);
        v25 = *((_OWORD *)v19 - 1);
        v22 = v23 - 48;
        *((_OWORD *)v23 - 2) = *((_OWORD *)v19 - 2);
        *((_OWORD *)v23 - 1) = v25;
        *((_OWORD *)v23 - 3) = v24;
        v19 -= 48;
        v23 -= 48;
      }
      while (v19 != v18);
    }
    *(_QWORD *)(a1 + 48) = v22;
    *(_QWORD *)(a1 + 56) = v21;
    *(_QWORD *)(a1 + 64) = &v20[288 * a2];
    if (v18)
      operator delete(v18);
  }
}

char *sub_223F0AE18(_QWORD *a1)
{
  uint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *result;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  __int16 v22;

  v2 = a1[1];
  v3 = (int *)a1[2];
  v4 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - v2) >> 3));
  v22 = 0;
  if (v3 == (int *)v2)
    v5 = 0;
  else
    v5 = v4;
  sub_223F0BDE4(v2, v3, (uint64_t)&v22, v5, 1);
  v6 = (char *)a1[1];
  v7 = (char *)a1[2];
  result = v6;
  if (v6 == v7)
    goto LABEL_23;
  v9 = v6 + 40;
  if (v6 + 40 == v7)
    goto LABEL_22;
  v10 = *(_DWORD *)v6;
  while (1)
  {
    v11 = v10;
    v10 = *(_DWORD *)v9;
    if (__PAIR64__(*((_DWORD *)v9 - 9), v11) == *(_QWORD *)v9
      && *((_DWORD *)v9 - 8) == *((_DWORD *)v9 + 2)
      && *((_DWORD *)v9 - 7) == *((_DWORD *)v9 + 3))
    {
      break;
    }
    v9 += 40;
    if (v9 == v7)
      goto LABEL_22;
  }
  v12 = v9 - 40;
  if (v9 - 40 == v7)
  {
LABEL_22:
    result = (char *)a1[2];
LABEL_23:
    v7 = result;
    goto LABEL_24;
  }
  v13 = v9 + 40;
  if (v13 != v7)
  {
    do
    {
      if (*(_DWORD *)v12 != *(_DWORD *)v13
        || *((_DWORD *)v12 + 1) != *((_DWORD *)v13 + 1)
        || *((_DWORD *)v12 + 2) != *((_DWORD *)v13 + 2)
        || *((_DWORD *)v12 + 3) != *((_DWORD *)v13 + 3))
      {
        v14 = *(_OWORD *)v13;
        v15 = *((_OWORD *)v13 + 1);
        *((_QWORD *)v12 + 9) = *((_QWORD *)v13 + 4);
        *(_OWORD *)(v12 + 56) = v15;
        *(_OWORD *)(v12 + 40) = v14;
        v12 += 40;
      }
      v13 += 40;
    }
    while (v13 != v7);
    v6 = (char *)a1[1];
    v7 = (char *)a1[2];
  }
  if (v12 + 40 != v7)
  {
    v7 = v12 + 40;
    a1[2] = v12 + 40;
  }
LABEL_24:
  if (v7 == v6)
    goto LABEL_34;
  v16 = (unsigned __int128)((v7 - v6) * (__int128)0x6666666666666667) >> 64;
  v17 = (v16 >> 4) + ((unint64_t)v16 >> 63);
  if (v17 <= 1)
    v17 = 1;
  if (v17 < 2)
  {
    v18 = 0;
LABEL_32:
    v21 = (unint64_t *)&v6[40 * v18 + 16];
    do
    {
      *v21 = v18;
      v21 += 5;
      ++v18;
    }
    while (v17 != v18);
    goto LABEL_34;
  }
  v19 = 0;
  v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v6 + 56;
  do
  {
    *(v20 - 5) = v19;
    *v20 = v19 + 1;
    v20 += 10;
    v19 += 2;
  }
  while (v19 != v18);
  if (v17 != v18)
    goto LABEL_32;
LABEL_34:
  a1[4] = v6;
  return result;
}

void sub_223F0B038(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _DWORD *v6;
  __int32 v7;
  __int32 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  int8x16_t v19;
  __int128 v20;
  int8x16_t v21;
  __int128 v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  int v26;
  _QWORD *v27;
  int8x16_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t **v33;
  int *v34;
  int *v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int *v45;
  _OWORD *v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v56[2];
  uint64_t v57;
  int8x16_t v58;
  __int128 v59;
  uint64_t v60;
  int8x16_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[3];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_OWORD *)(v3 + 16);
  v61 = *(int8x16_t *)v3;
  v62 = v5;
  v63 = v4;
  v6 = (_DWORD *)(v3 + 40);
  v7 = v61.i32[0];
  if (v61.i32[0] == v61.i32[2] && (v8 = v61.i32[1], v61.i32[1] == v61.i32[3]))
  {
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    if (v9 != v10)
    {
      do
      {
        if (*(_DWORD *)v9 != v7 || *(_DWORD *)(v9 + 4) != v8)
          break;
        v12 = *(uint64_t **)(v9 + 8);
        sub_223F0F474((_QWORD *)v9, v10);
        *(_QWORD *)(a1 + 48) -= 16;
        v13 = (uint64_t *)v12[1];
        v14 = v12;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v18 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v18);
        }
        if (*(uint64_t **)(a1 + 128) == v12)
          *(_QWORD *)(a1 + 128) = v15;
        v11 = *(uint64_t **)(a1 + 136);
        --*(_QWORD *)(a1 + 144);
        sub_2231AFE60(v11, v12);
        operator delete(v12);
        v9 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(a1 + 48);
      }
      while (v9 != v10);
      v3 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v16 = *(_DWORD **)(a1 + 16);
    if (v6 != v16)
    {
      do
      {
        if (*v6 == v6[2])
        {
          v17 = v6[1];
          v18 = *v6 != v61.i32[0] || v17 == v6[3];
          if (v18 || v17 != v61.i32[1])
            goto LABEL_27;
        }
        else if (*(_QWORD *)v6 != v61.i64[0])
        {
          goto LABEL_27;
        }
        v6 += 10;
      }
      while (v6 != v16);
      v6 = *(_DWORD **)(a1 + 16);
    }
  }
LABEL_27:
  v19 = *(int8x16_t *)v3;
  v20 = *(_OWORD *)(v3 + 16);
  v57 = *(_QWORD *)(v3 + 32);
  v56[0] = v19;
  v56[1] = v20;
  v21 = *(int8x16_t *)v3;
  v22 = *(_OWORD *)(v3 + 16);
  v60 = *(_QWORD *)(v3 + 32);
  v59 = v22;
  v58 = v21;
  v23 = (uint64_t *)(a1 + 136);
  v24 = *(_QWORD **)(a1 + 136);
  v25 = (uint64_t *)(a1 + 136);
  if (v24)
  {
    v25 = (uint64_t *)(a1 + 136);
    do
    {
      v26 = sub_223F0EA2C(a1 + 152, (uint64_t)(v24 + 4), (uint64_t)v56);
      v27 = v24 + 1;
      if (!v26)
      {
        v27 = v24;
        v25 = v24;
      }
      v24 = (_QWORD *)*v27;
    }
    while (*v27);
    v3 = *(_QWORD *)(a1 + 32);
  }
  if ((_DWORD *)v3 != v6)
  {
    v54 = a1 + 104;
    do
    {
      v28 = *(int8x16_t *)v3;
      v29 = *(_OWORD *)(v3 + 16);
      v63 = *(_QWORD *)(v3 + 32);
      v61 = v28;
      v62 = v29;
      if (v25 == v23)
      {
        v41 = *v23;
        v42 = a1 + 136;
        if (*v23)
        {
          do
          {
            v43 = v41;
            v41 = *(_QWORD *)(v41 + 8);
          }
          while (v41);
        }
        else
        {
          do
          {
            v43 = *(_QWORD *)(v42 + 16);
            v18 = *(_QWORD *)v43 == v42;
            v42 = v43;
          }
          while (v18);
        }
        v44 = (int *)(v43 + 32);
        v45 = (int *)(v43 + 72);
        v25 = (uint64_t *)sub_223F0DD38(a1, v43 + 72, (__int128 *)(v43 + 72), (uint64_t)&v61, v25, a2);
        BYTE8(v65) = 1;
        if (sub_223F0F5D4(a1 + 160, v44, v45, v61.i32, (uint64_t)&v64))
        {
          v46 = operator new(0x38uLL);
          v47 = v65;
          v46[1] = v64;
          v46[2] = v47;
          *((_QWORD *)v46 + 6) = v25;
          v48 = *(_QWORD **)(a1 + 112);
          *(_QWORD *)v46 = v54;
          *((_QWORD *)v46 + 1) = v48;
          *v48 = v46;
          v49 = *(_QWORD *)(a1 + 120) + 1;
          *(_QWORD *)(a1 + 112) = v46;
          *(_QWORD *)(a1 + 120) = v49;
          v66[0] = v46;
          sub_223F24750((void **)(a1 + 72), v66);
          v25[14] = *(_QWORD *)(a1 + 112) + 16;
        }
        goto LABEL_36;
      }
      if (v25 == *(uint64_t **)(a1 + 128))
      {
        v36 = sub_223F0DD38(a1, (uint64_t)(v25 + 4), (__int128 *)v25 + 2, (uint64_t)&v61, v25, a2);
        if (v61.i32[0] != v61.i32[2])
          goto LABEL_57;
      }
      else
      {
        v30 = v25[14];
        if (v30)
        {
          *(_BYTE *)(v30 + 24) = 0;
          v25[14] = 0;
        }
        v31 = (uint64_t **)*v25;
        v32 = v25;
        if (*v25)
        {
          do
          {
            v33 = v31;
            v31 = (uint64_t **)v31[1];
          }
          while (v31);
        }
        else
        {
          do
          {
            v33 = (uint64_t **)v32[2];
            v18 = *v33 == v32;
            v32 = (uint64_t *)v33;
          }
          while (v18);
        }
        v34 = (int *)(v33 + 4);
        v35 = (int *)(v33 + 9);
        v36 = sub_223F0DD38(a1, (uint64_t)(v33 + 9), (__int128 *)v25 + 2, (uint64_t)&v61, v25, a2);
        BYTE8(v65) = 1;
        if (sub_223F0F5D4(a1 + 160, v34, v35, v61.i32, (uint64_t)&v64))
        {
          v37 = operator new(0x38uLL);
          v38 = v65;
          v37[1] = v64;
          v37[2] = v38;
          *((_QWORD *)v37 + 6) = v36;
          v39 = *(_QWORD **)(a1 + 112);
          *(_QWORD *)v37 = v54;
          *((_QWORD *)v37 + 1) = v39;
          *v39 = v37;
          v40 = *(_QWORD *)(a1 + 120) + 1;
          *(_QWORD *)(a1 + 112) = v37;
          *(_QWORD *)(a1 + 120) = v40;
          v66[0] = v37;
          sub_223F24750((void **)(a1 + 72), v66);
          *((_QWORD *)v36 + 14) = *(_QWORD *)(a1 + 112) + 16;
        }
        if (v61.i32[0] != v61.i32[2])
        {
LABEL_57:
          v61 = vextq_s8(v61, v61, 8uLL);
          v63 ^= 0x20uLL;
          goto LABEL_58;
        }
      }
      if (v61.i32[1] != v61.i32[3])
        goto LABEL_57;
LABEL_58:
      BYTE8(v65) = 1;
      if (sub_223F0F5D4(a1 + 160, v61.i32, (int *)v25 + 8, (int *)v25 + 18, (uint64_t)&v64))
      {
        v50 = operator new(0x38uLL);
        v51 = v65;
        v50[1] = v64;
        v50[2] = v51;
        *((_QWORD *)v50 + 6) = v25;
        v52 = *(_QWORD **)(a1 + 112);
        *(_QWORD *)v50 = v54;
        *((_QWORD *)v50 + 1) = v52;
        *v52 = v50;
        v53 = *(_QWORD *)(a1 + 120) + 1;
        *(_QWORD *)(a1 + 112) = v50;
        *(_QWORD *)(a1 + 120) = v53;
        v66[0] = v50;
        sub_223F24750((void **)(a1 + 72), v66);
        v25[14] = *(_QWORD *)(a1 + 112) + 16;
      }
      v25 = (uint64_t *)v36;
LABEL_36:
      v3 = *(_QWORD *)(a1 + 32) + 40;
      *(_QWORD *)(a1 + 32) = v3;
    }
    while ((_DWORD *)v3 != v6);
  }
}

void sub_223F0B530(uint64_t a1, _QWORD *a2)
{
  char **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  int *v28;
  int *v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  int8x16_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _OWORD *v42;

  v3 = (char **)(a1 + 72);
  v4 = **(_QWORD **)(a1 + 72);
  v5 = (uint64_t *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 48);
  v7 = *(_OWORD *)(v6 + 88);
  v37 = *(int8x16_t *)(v6 + 72);
  v38 = v7;
  v39 = *(_QWORD *)(v6 + 104);
  v8 = *(_QWORD *)(v6 + 120);
  v9 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
  {
    do
    {
      v10 = v9;
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    v11 = v6;
    do
    {
      v10 = *(_QWORD *)(v11 + 16);
      v12 = *(_QWORD *)v10 == v11;
      v11 = v10;
    }
    while (v12);
  }
  v13 = *(_QWORD **)(v10 + 120);
  v14 = *(_OWORD *)(v10 + 48);
  v35[0] = *(_OWORD *)(v10 + 32);
  v35[1] = v14;
  v36 = *(_QWORD *)(v10 + 64);
  if (*(_QWORD *)&v35[0] != *((_QWORD *)&v35[0] + 1))
    goto LABEL_14;
  if (v37.i32[0] == v37.i32[2])
  {
    if (v37.i32[0] != LODWORD(v35[0]) || v37.i32[1] == v37.i32[3] || v37.i32[3] != DWORD1(v35[0]))
      goto LABEL_14;
  }
  else if (v37.i64[1] != *(_QWORD *)&v35[0])
  {
    goto LABEL_14;
  }
  v37 = vextq_s8(v37, v37, 8uLL);
  v39 ^= 0x20uLL;
LABEL_14:
  v15 = v38;
  *(int8x16_t *)(v10 + 72) = v37;
  *(_OWORD *)(v10 + 88) = v15;
  *(_QWORD *)(v10 + 104) = v39;
  *(_QWORD *)(v10 + 120) = sub_223F24940(a2, (int *)v35, v37.i32, v5, v13, v8);
  v16 = *(_QWORD **)(v6 + 8);
  if (v16)
  {
    do
    {
      v17 = v16;
      v16 = (_QWORD *)*v16;
    }
    while (v16);
  }
  else
  {
    v18 = (_QWORD *)v6;
    do
    {
      v17 = (_QWORD *)v18[2];
      v12 = *v17 == (_QWORD)v18;
      v18 = v17;
    }
    while (!v12);
  }
  if (*(_QWORD *)(a1 + 128) == v6)
    *(_QWORD *)(a1 + 128) = v17;
  v19 = *(uint64_t **)(a1 + 136);
  --*(_QWORD *)(a1 + 144);
  sub_2231AFE60(v19, (uint64_t *)v6);
  operator delete((void *)v6);
  sub_223F0B860(v3);
  if (v10 != *(_QWORD *)(a1 + 128))
  {
    v20 = *(_QWORD *)(v10 + 112);
    if (v20)
    {
      *(_BYTE *)(v20 + 24) = 0;
      *(_QWORD *)(v10 + 112) = 0;
    }
    v21 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      do
      {
        v22 = v21;
        v21 = *(_QWORD *)(v21 + 8);
      }
      while (v21);
    }
    else
    {
      v23 = v10;
      do
      {
        v22 = *(_QWORD *)(v23 + 16);
        v12 = *(_QWORD *)v22 == v23;
        v23 = v22;
      }
      while (v12);
    }
    BYTE8(v41) = 1;
    if (sub_223F0F5D4(a1 + 160, (int *)(v22 + 32), (int *)v35, v37.i32, (uint64_t)&v40))
    {
      v24 = operator new(0x38uLL);
      v25 = v41;
      v24[1] = v40;
      v24[2] = v25;
      *((_QWORD *)v24 + 6) = v10;
      v26 = *(_QWORD **)(a1 + 112);
      *(_QWORD *)v24 = a1 + 104;
      *((_QWORD *)v24 + 1) = v26;
      *v26 = v24;
      v27 = *(_QWORD *)(a1 + 120) + 1;
      *(_QWORD *)(a1 + 112) = v24;
      *(_QWORD *)(a1 + 120) = v27;
      v42 = v24;
      sub_223F24750((void **)v3, &v42);
      *(_QWORD *)(v10 + 112) = *(_QWORD *)(a1 + 112) + 16;
    }
  }
  v28 = *(int **)(v10 + 8);
  if (v28)
  {
    do
    {
      v29 = v28;
      v28 = *(int **)v28;
    }
    while (v28);
  }
  else
  {
    do
    {
      v29 = *(int **)(v10 + 16);
      v12 = *(_QWORD *)v29 == v10;
      v10 = (uint64_t)v29;
    }
    while (!v12);
  }
  if (v29 != (int *)(a1 + 136))
  {
    v30 = *((_QWORD *)v29 + 14);
    if (v30)
    {
      *(_BYTE *)(v30 + 24) = 0;
      *((_QWORD *)v29 + 14) = 0;
    }
    BYTE8(v41) = 1;
    if (sub_223F0F5D4(a1 + 160, (int *)v35, v37.i32, v29 + 18, (uint64_t)&v40))
    {
      v31 = operator new(0x38uLL);
      v32 = v41;
      v31[1] = v40;
      v31[2] = v32;
      *((_QWORD *)v31 + 6) = v29;
      v33 = *(_QWORD **)(a1 + 112);
      *(_QWORD *)v31 = a1 + 104;
      *((_QWORD *)v31 + 1) = v33;
      *v33 = v31;
      v34 = *(_QWORD *)(a1 + 120) + 1;
      *(_QWORD *)(a1 + 112) = v31;
      *(_QWORD *)(a1 + 120) = v34;
      v42 = v31;
      sub_223F24750((void **)v3, &v42);
      *((_QWORD *)v29 + 14) = *(_QWORD *)(a1 + 112) + 16;
    }
  }
}

void sub_223F0B860(char **a1)
{
  char *v1;
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  _BOOL4 v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  _BOOL4 v24;
  double v25;
  BOOL v26;
  uint64_t v27;

  v1 = *a1;
  v2 = a1[1];
  v3 = *(uint64_t **)*a1;
  v4 = v2 - *a1;
  if (v4 >= 9)
  {
    v5 = 0;
    v6 = v4 >> 3;
    v7 = (unint64_t)((v4 >> 3) - 2) >> 1;
    v8 = *a1;
    do
    {
      v9 = &v8[8 * v5 + 8];
      v10 = (2 * v5) | 1;
      v11 = 2 * v5 + 2;
      if (v11 < v6)
      {
        v12 = *((_QWORD *)v9 + 1);
        v13 = *(double *)(v12 + 32);
        v14 = *(double *)(*(_QWORD *)v9 + 32);
        v15 = *(double *)(v12 + 24) < *(double *)(*(_QWORD *)v9 + 24);
        if (v13 != v14)
          v15 = v13 < v14;
        if (v15)
        {
          v9 += 8;
          v10 = v11;
        }
      }
      *(_QWORD *)v8 = *(_QWORD *)v9;
      v8 = v9;
      v5 = v10;
    }
    while (v10 <= v7);
    v16 = v2 - 8;
    if (v9 == v16)
    {
      *(_QWORD *)v9 = v3;
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v16;
      *(_QWORD *)v16 = v3;
      v17 = v9 - v1 + 8;
      if (v17 >= 9)
      {
        v18 = (((unint64_t)v17 >> 3) - 2) >> 1;
        v19 = &v1[8 * v18];
        v20 = *(_QWORD *)v19;
        v21 = *(_QWORD *)v9;
        v22 = *(double *)(*(_QWORD *)v9 + 32);
        v23 = *(double *)(*(_QWORD *)v19 + 32);
        v24 = *(double *)(*(_QWORD *)v9 + 24) < *(double *)(*(_QWORD *)v19 + 24);
        if (v22 != v23)
          v24 = v22 < v23;
        if (v24)
        {
          do
          {
            *(_QWORD *)v9 = v20;
            v9 = v19;
            if (!v18)
              break;
            v18 = (v18 - 1) >> 1;
            v19 = &v1[8 * v18];
            v20 = *(_QWORD *)v19;
            v25 = *(double *)(*(_QWORD *)v19 + 32);
            v26 = *(double *)(v21 + 24) < *(double *)(*(_QWORD *)v19 + 24);
            if (v22 != v25)
              v26 = v22 < v25;
          }
          while (v26);
          *(_QWORD *)v9 = v21;
        }
      }
    }
  }
  a1[1] -= 8;
  v27 = *v3;
  *(_QWORD *)(v27 + 8) = v3[1];
  *(_QWORD *)v3[1] = v27;
  --a1[6];
  operator delete(v3);
}

uint64_t *sub_223F0B9D8(uint64_t *result)
{
  __int128 *v1;
  __int128 *v2;
  __int128 *v3;
  _QWORD *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 *v45;
  unint64_t v46;
  __int128 *v47;
  __int128 *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v2 = (__int128 *)result[6];
  v1 = (__int128 *)result[7];
  if (v2 == v1)
  {
    v1 = (__int128 *)result[6];
    v32 = (_OWORD *)result[3];
    v31 = (_OWORD *)result[4];
    if (v32 == v31)
      goto LABEL_74;
  }
  else
  {
    v3 = (__int128 *)result[6];
    do
    {
      while (1)
      {
        v5 = (unint64_t *)*((_QWORD *)v3 + 1);
        v4 = (_QWORD *)*((_QWORD *)v3 + 2);
        v6 = (uint64_t *)v4[1];
        if (v5 && v6 != 0)
        {
          v8 = *v5;
          v9 = *v6;
          if ((*v5 & 0x8000000000000000) == 0)
            v8 = 0x8000000000000000 - *v5;
          if (v9 >= 0)
            v9 = 0x8000000000000000 - v9;
          v10 = v8 - v9 <= 0x80 ? 0 : -1;
          if (!(v8 > v9 ? v10 : v9 - v8 > 0x80))
          {
            v12 = v5[1];
            v13 = v6[1];
            if (v12 >= 0)
              v12 = 0x8000000000000000 - v12;
            if (v13 >= 0)
              v13 = 0x8000000000000000 - v13;
            v14 = (unint64_t)(v12 - v13) <= 0x80 ? 0 : -1;
            if (!(v12 > (unint64_t)v13 ? v14 : (unint64_t)(v13 - v12) > 0x80))
              break;
          }
        }
        if (v3 != v2)
        {
          v16 = *v3;
          v17 = v3[2];
          v2[1] = v3[1];
          v2[2] = v17;
          *v2 = v16;
          v18 = v2 + 3;
          v19 = v3[5];
          v20 = v3[3];
          v2[4] = v3[4];
          v2[5] = v19;
          v2[3] = v20;
          *((_QWORD *)v2 + 2) = v2 + 3;
          *((_QWORD *)v2 + 8) = v2;
          v21 = *((_QWORD *)v2 + 4);
          if (v21)
          {
            *(_QWORD *)(v21 + 24) = v2;
            *(_QWORD *)(*((_QWORD *)v2 + 9) + 32) = v18;
          }
          if (*((_QWORD *)v2 + 10))
          {
            *(_QWORD *)(*((_QWORD *)v2 + 3) + 32) = v2;
            *(_QWORD *)(*((_QWORD *)v2 + 10) + 24) = v18;
          }
        }
        v2 += 6;
        v1 = (__int128 *)result[7];
        v3 += 6;
        if (v3 == v1)
          goto LABEL_40;
      }
      v22 = *(_QWORD **)(v4[4] + 16);
      if (v22 != v4)
      {
        v23 = *(_QWORD **)(v4[4] + 16);
        do
        {
          v23[1] = v5;
          v23 = *(_QWORD **)(v23[4] + 16);
        }
        while (v23 != v4);
      }
      v24 = v4[3];
      v25 = *(_QWORD *)(v4[2] + 24);
      v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 4) + 16) + 16);
      *(_QWORD *)(v26 + 24) = v25;
      *(_QWORD *)(v25 + 32) = v26;
      v27 = v22[2];
      *(_QWORD *)(v24 + 32) = v27;
      *(_QWORD *)(v27 + 24) = v24;
      v3 += 6;
    }
    while (v3 != v1);
LABEL_40:
    v28 = (__int128 *)result[6];
    if (v2 != v1)
    {
      v1 = v2;
      result[7] = (uint64_t)v2;
    }
    if (v28 == v1)
    {
      v2 = v1;
      v32 = (_OWORD *)result[3];
      v31 = (_OWORD *)result[4];
      if (v32 == v31)
        goto LABEL_74;
    }
    else
    {
      v29 = v28;
      do
      {
        v30 = *((_QWORD *)v29 + 1);
        *(_QWORD *)(*(_QWORD *)v29 + 8) = v29;
        if (v30)
          *(_QWORD *)(v30 + 16) = v29;
        v29 += 3;
      }
      while (v29 != v1);
      v2 = v1;
      v1 = v28;
      v32 = (_OWORD *)result[3];
      v31 = (_OWORD *)result[4];
      if (v32 == v31)
      {
LABEL_74:
        if (v1 == v2)
          return result;
        *((_QWORD *)v1 + 3) = v1;
        *((_QWORD *)v1 + 4) = v1;
        v44 = v1 + 6;
        v45 = v1 + 3;
        if (v1 + 6 == v2)
          goto LABEL_84;
        v46 = (char *)v2 - (char *)v1 - 192;
        if (v46 >= 0x60)
        {
          v49 = v46 / 0x60 + 1;
          v50 = v49 & 0x7FFFFFFFFFFFFFELL;
          v51 = 96 * (v49 & 0x7FFFFFFFFFFFFFELL);
          v45 = (__int128 *)((char *)v45 + v51);
          v47 = (__int128 *)&v44[(unint64_t)v51 / 8];
          v48 = &v1[(unint64_t)v51 / 0x10];
          v52 = (_QWORD *)v1 + 15;
          v53 = v49 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            *(v52 - 6) = v52 - 3;
            *(v52 - 5) = v52 - 3;
            result = v52 + 9;
            v52[6] = v52 + 9;
            v52[7] = v52 + 9;
            *v52 = v52 - 9;
            v52[1] = v52 - 9;
            v52[12] = v52 + 3;
            v52[13] = v52 + 3;
            v52 += 24;
            v53 -= 2;
          }
          while (v53);
          if (v49 == v50)
          {
            v1 = (__int128 *)&v44[12 * v50 - 12];
LABEL_84:
            *((_QWORD *)v1 + 9) = v45;
            *((_QWORD *)v1 + 10) = v45;
            return result;
          }
        }
        else
        {
          v47 = v1 + 6;
          v48 = v1;
        }
        do
        {
          *((_QWORD *)v48 + 9) = v47;
          *((_QWORD *)v48 + 10) = v47;
          *((_QWORD *)v48 + 15) = v45;
          *((_QWORD *)v48 + 16) = v45;
          v45 = v47 + 3;
          v48 = v47;
          v47 += 6;
        }
        while (v47 != v2);
        v1 = v47 - 6;
        v45 = v47 - 3;
        goto LABEL_84;
      }
    }
  }
  v33 = v32;
  do
  {
    if (*((_QWORD *)v33 + 2))
    {
      if (v33 != v32)
      {
        v34 = v33[1];
        *v32 = *v33;
        v32[1] = v34;
        v35 = *((_QWORD *)v32 + 2);
        v36 = v35;
        do
        {
          *(_QWORD *)(v36 + 8) = v32;
          v36 = *(_QWORD *)(*(_QWORD *)(v36 + 32) + 16);
        }
        while (v36 != v35);
        v31 = (_OWORD *)result[4];
      }
      v32 += 2;
    }
    v33 += 2;
  }
  while (v33 != v31);
  v37 = (_OWORD *)result[3];
  if (v32 != v31)
  {
    v31 = v32;
    result[4] = (uint64_t)v32;
  }
  if (v37 == v31)
  {
    v1 = (__int128 *)result[6];
    v2 = (__int128 *)result[7];
    goto LABEL_74;
  }
  v38 = *result;
  v39 = result[1];
  while (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 8);
    if (v40)
    {
      v41 = *(_QWORD *)(v38 + 8);
      while (1)
      {
        v42 = *(_QWORD *)(v41 + 32);
        if (!v42)
          break;
        v41 = *(_QWORD *)(v41 + 32);
        if (v42 == v40)
        {
          v41 = *(_QWORD *)(v38 + 8);
          if (*(_QWORD *)(v40 + 32))
            goto LABEL_64;
          goto LABEL_71;
        }
      }
      do
      {
LABEL_71:
        v43 = v40;
        v40 = *(_QWORD *)(v40 + 24);
      }
      while (v40);
      *(_QWORD *)(v41 + 32) = v43;
      *(_QWORD *)(v43 + 24) = v41;
    }
LABEL_64:
    v38 += 24;
  }
  return result;
}

void sub_223F0BDE4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  int *v18;
  __int128 *v19;
  int *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  __n128 *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

uint64_t sub_223F0C258(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;

  v3 = *a2;
  if ((_DWORD)v3 != *a3)
    return (int)v3 < *a3;
  v4 = a2[2];
  if ((_DWORD)v3 == (_DWORD)v4)
  {
    v5 = a2[1];
    v6 = a3[2];
    if (v5 == a2[3])
    {
      if ((_DWORD)v3 == v6)
      {
        v7 = a3[1];
        v8 = v5 < v7;
        v9 = v5 <= v7;
        v10 = v8;
        if (v7 == a3[3])
          return v10;
        else
          return v9;
      }
    }
    else if ((_DWORD)v3 == v6)
    {
      return v5 < a3[1];
    }
    return 1;
  }
  v12 = (int)a3[2];
  if ((_DWORD)v3 == (_DWORD)v12)
    return 0;
  v13 = a2[1];
  v14 = a3[1];
  if ((_DWORD)v13 != v14)
    return (int)v13 < v14;
  v15 = v4 - v3;
  v16 = v3 - v12;
  v17 = a2[3] - v13;
  v18 = v13 - (int)a3[3];
  if (v15 >= 0)
    v19 = v15;
  else
    v19 = -v15;
  if (v17 >= 0)
    v20 = v17;
  else
    v20 = -v17;
  if (v16 >= 0)
    v21 = v16;
  else
    v21 = -v16;
  if (v18 >= 0)
    v22 = v18;
  else
    v22 = -v18;
  v23 = v22 * v19;
  v24 = v20 * v21;
  v25 = v18 ^ v15;
  v26 = (double)(v23 - v24);
  v27 = v17 ^ v16;
  v28 = (double)(v24 - v23);
  if (v23 < v24)
    v26 = -v28;
  if (v27 < 0)
    v26 = (double)(v23 + v24);
  if (v23 > v24)
    v28 = -(double)(v23 - v24);
  if (v27 >= 0)
    v28 = -(double)(v23 + v24);
  if (v25 < 0)
    v26 = v28;
  return v26 > 0.0;
}

uint64_t sub_223F0C3AC(uint64_t result, int *a2, uint64_t a3)
{
  uint64_t v4;
  int *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  uint64_t v45;

  if ((int *)result == a2)
    return result;
  v4 = result;
  v5 = (int *)(result + 40);
  if ((int *)(result + 40) == a2)
    return result;
  v7 = 0;
  v8 = result;
  while (2)
  {
    v10 = v5;
    result = sub_223F0C258(a3, v5, (_DWORD *)v8);
    if (!(_DWORD)result)
      goto LABEL_6;
    v11 = *(_DWORD *)(v8 + 40);
    v12 = *(_DWORD *)(v8 + 44);
    v13 = *(_DWORD *)(v8 + 48);
    v14 = *(_DWORD *)(v8 + 52);
    v44 = *(_OWORD *)(v8 + 56);
    v45 = *(_QWORD *)(v8 + 72);
    v15 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v10 = *(_OWORD *)v8;
    *((_OWORD *)v10 + 1) = v15;
    *((_QWORD *)v10 + 4) = *(_QWORD *)(v8 + 32);
    v9 = v4;
    if (v8 == v4)
      goto LABEL_5;
    v16 = v14 - (uint64_t)v12;
    if (v13 - (uint64_t)v11 >= 0)
      v17 = v13 - (uint64_t)v11;
    else
      v17 = v11 - (uint64_t)v13;
    if (v16 >= 0)
      v18 = v14 - (uint64_t)v12;
    else
      v18 = v12 - (uint64_t)v14;
    if (v11 == v13)
    {
      if (v12 == v14)
      {
        v19 = v7;
        while (1)
        {
          v21 = v4 + v19;
          v22 = *(_DWORD *)(v4 + v19 - 40);
          if (v11 == v22)
          {
            if (v11 == *(_DWORD *)(v21 - 32))
            {
              v23 = *(_DWORD *)(v4 + v19 - 36);
              if (v23 == *(_DWORD *)(v4 + v19 - 28))
              {
                if (v12 >= v23)
                  goto LABEL_51;
              }
              else if (v12 > v23)
              {
                v9 = v4 + v19;
                goto LABEL_5;
              }
            }
          }
          else if (v11 >= v22)
          {
            goto LABEL_51;
          }
          v8 -= 40;
          v20 = *(_OWORD *)(v4 + v19 - 24);
          *(_OWORD *)v21 = *(_OWORD *)(v4 + v19 - 40);
          *(_OWORD *)(v21 + 16) = v20;
          *(_QWORD *)(v21 + 32) = *(_QWORD *)(v4 + v19 - 8);
          v19 -= 40;
          if (!v19)
            goto LABEL_4;
        }
      }
      v40 = v7;
      while (1)
      {
        v42 = v4 + v40;
        v43 = *(_DWORD *)(v4 + v40 - 40);
        if (v11 == v43)
        {
          if (v11 == *(_DWORD *)(v42 - 32))
          {
            v9 = v4 + v40;
            if (v12 >= *(_DWORD *)(v4 + v40 - 36))
              goto LABEL_5;
          }
        }
        else if (v11 >= v43)
        {
          goto LABEL_51;
        }
        v8 -= 40;
        v41 = *(_OWORD *)(v4 + v40 - 24);
        *(_OWORD *)v42 = *(_OWORD *)(v4 + v40 - 40);
        *(_OWORD *)(v42 + 16) = v41;
        *(_QWORD *)(v42 + 32) = *(_QWORD *)(v4 + v40 - 8);
        v40 -= 40;
        if (!v40)
          goto LABEL_4;
      }
    }
    result = v7;
    while (1)
    {
      v25 = v4 + result;
      v26 = *(_DWORD *)(v4 + result - 40);
      v27 = v11 < v26;
      if (v11 != v26)
      {
LABEL_28:
        if (!v27)
          goto LABEL_51;
        goto LABEL_30;
      }
      v28 = *(int *)(v25 - 32);
      if (v11 == (_DWORD)v28)
        break;
      v29 = *(_DWORD *)(v4 + result - 36);
      v27 = v12 < v29;
      if (v12 != v29)
        goto LABEL_28;
      v30 = v11 - v28;
      v31 = v12 - (uint64_t)*(int *)(v4 + result - 28);
      if (v30 >= 0)
        v32 = v30;
      else
        v32 = -v30;
      if (v31 >= 0)
        v33 = v12 - (uint64_t)*(int *)(v4 + result - 28);
      else
        v33 = *(int *)(v4 + result - 28) - (uint64_t)v12;
      v34 = v33 * v17;
      v35 = v32 * v18;
      v36 = v31 ^ (v13 - (uint64_t)v11);
      v37 = v30 ^ v16;
      v38 = (double)(v34 - v35);
      v39 = (double)(v35 - v34);
      if (v34 < v35)
        v38 = -v39;
      if (v37 < 0)
        v38 = (double)(v34 + v35);
      if (v34 > v35)
        v39 = -(double)(v34 - v35);
      if (v37 >= 0)
        v39 = -(double)(v34 + v35);
      if (v36 < 0)
        v38 = v39;
      if (v38 <= 0.0)
      {
LABEL_51:
        v9 = v8;
        goto LABEL_5;
      }
LABEL_30:
      v8 -= 40;
      v24 = *(_OWORD *)(v4 + result - 24);
      *(_OWORD *)v25 = *(_OWORD *)(v4 + result - 40);
      *(_OWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 32) = *(_QWORD *)(v4 + result - 8);
      result -= 40;
      if (!result)
      {
LABEL_4:
        v9 = v4;
        goto LABEL_5;
      }
    }
    v9 = v4 + result;
LABEL_5:
    *(_DWORD *)v9 = v11;
    *(_DWORD *)(v9 + 4) = v12;
    *(_DWORD *)(v9 + 8) = v13;
    *(_DWORD *)(v9 + 12) = v14;
    *(_OWORD *)(v9 + 16) = v44;
    *(_QWORD *)(v9 + 32) = v45;
LABEL_6:
    v5 = v10 + 10;
    v7 += 40;
    v8 = (uint64_t)v10;
    if (v10 + 10 != a2)
      continue;
    return result;
  }
}

uint64_t sub_223F0C67C(uint64_t result, int *a2, uint64_t a3)
{
  int *v4;
  int *v5;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  __int128 v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  __int128 v31;
  int v32;
  BOOL v33;
  int v34;
  __int128 v35;
  int v36;
  BOOL v37;
  __int128 v38;
  uint64_t v39;

  if ((int *)result != a2)
  {
    v4 = (int *)result;
    v5 = (int *)(result + 40);
    if ((int *)(result + 40) != a2)
    {
      do
      {
        v7 = v5;
        result = sub_223F0C258(a3, v5, v4);
        if ((_DWORD)result)
        {
          v8 = *v7;
          v9 = v4[11];
          v10 = v4[12];
          v11 = v4[13];
          v38 = *(_OWORD *)(v4 + 14);
          v39 = *((_QWORD *)v4 + 9);
          v12 = v10 - *v7;
          v13 = v11 - v9;
          if (v12 >= 0)
            v14 = v10 - v8;
          else
            v14 = v8 - v10;
          if (v13 >= 0)
            result = v11 - v9;
          else
            result = v9 - v11;
          if (v8 == (_DWORD)v10)
          {
            if (v9 == (_DWORD)v11)
            {
              do
              {
                while (1)
                {
                  do
                  {
                    while (1)
                    {
                      v15 = v4;
                      v31 = *((_OWORD *)v4 + 1);
                      *(_OWORD *)(v4 + 10) = *(_OWORD *)v4;
                      *(_OWORD *)(v4 + 14) = v31;
                      *((_QWORD *)v4 + 9) = *((_QWORD *)v4 + 4);
                      v32 = *(v4 - 10);
                      v4 -= 10;
                      v33 = v8 < v32;
                      if (v8 == v32)
                        break;
                      if (!v33)
                        goto LABEL_4;
                    }
                  }
                  while (v8 != *(v15 - 8));
                  v34 = *(v15 - 9);
                  if (v34 != *(v15 - 7))
                    break;
                  if (v9 >= v34)
                    goto LABEL_4;
                }
              }
              while (v9 <= v34);
            }
            else
            {
              do
              {
                while (1)
                {
                  v15 = v4;
                  v35 = *((_OWORD *)v4 + 1);
                  *(_OWORD *)(v4 + 10) = *(_OWORD *)v4;
                  *(_OWORD *)(v4 + 14) = v35;
                  *((_QWORD *)v4 + 9) = *((_QWORD *)v4 + 4);
                  v36 = *(v4 - 10);
                  v4 -= 10;
                  v37 = v8 < v36;
                  if (v8 == v36)
                    break;
                  if (!v37)
                    goto LABEL_4;
                }
              }
              while (v8 != *(v15 - 8) || v9 < *(v15 - 9));
            }
          }
          else
          {
            while (1)
            {
              while (1)
              {
                v15 = v4;
                v16 = *((_OWORD *)v4 + 1);
                *(_OWORD *)(v4 + 10) = *(_OWORD *)v4;
                *(_OWORD *)(v4 + 14) = v16;
                *((_QWORD *)v4 + 9) = *((_QWORD *)v4 + 4);
                v17 = *(v4 - 10);
                v4 -= 10;
                v18 = v8 < v17;
                if (v8 == v17)
                  break;
                if (!v18)
                  goto LABEL_4;
              }
              v19 = *(v15 - 8);
              if (v8 == (_DWORD)v19)
                break;
              v20 = *(v15 - 9);
              if (v9 == v20)
              {
                v21 = v8 - v19;
                v22 = v9 - (uint64_t)*(v15 - 7);
                if (v21 >= 0)
                  v23 = v21;
                else
                  v23 = -v21;
                if (v22 >= 0)
                  v24 = v9 - (uint64_t)*(v15 - 7);
                else
                  v24 = *(v15 - 7) - (uint64_t)v9;
                v25 = v24 * v14;
                v26 = v23 * result;
                v27 = v22 ^ v12;
                v28 = v21 ^ v13;
                v29 = (double)(v25 - v26);
                v30 = (double)(v26 - v25);
                if (v25 < v26)
                  v29 = -v30;
                if (v28 < 0)
                  v29 = (double)(v25 + v26);
                if (v25 > v26)
                  v30 = -(double)(v25 - v26);
                if (v28 >= 0)
                  v30 = -(double)(v25 + v26);
                if (v27 < 0)
                  v29 = v30;
                if (v29 <= 0.0)
                  break;
              }
              else if (v9 >= v20)
              {
                break;
              }
            }
          }
LABEL_4:
          *v15 = v8;
          v15[1] = v9;
          v15[2] = v10;
          v15[3] = v11;
          *((_OWORD *)v15 + 1) = v38;
          *((_QWORD *)v15 + 4) = v39;
        }
        v5 = v7 + 10;
        v4 = v7;
      }
      while (v7 + 10 != a2);
    }
  }
  return result;
}

uint64_t sub_223F0C8C4(__int128 *a1, int *a2, int *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v8 = sub_223F0C258(a4, a2, a1);
  result = sub_223F0C258(a4, a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *a1;
      v11 = a1[1];
      v12 = *((_QWORD *)a1 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = *((_OWORD *)a3 + 1);
      *a1 = *(_OWORD *)a3;
      a1[1] = v14;
      *((_QWORD *)a1 + 4) = v13;
      *((_QWORD *)a3 + 4) = v12;
      result = 1;
LABEL_10:
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      return result;
    }
    v25 = *a1;
    v26 = a1[1];
    v27 = *((_QWORD *)a1 + 4);
    v28 = *((_QWORD *)a2 + 4);
    v29 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v29;
    *((_QWORD *)a1 + 4) = v28;
    *((_QWORD *)a2 + 4) = v27;
    *(_OWORD *)a2 = v25;
    *((_OWORD *)a2 + 1) = v26;
    if (sub_223F0C258(a4, a3, a2))
    {
      v10 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      v30 = *((_QWORD *)a2 + 4);
      v31 = *((_QWORD *)a3 + 4);
      v32 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v32;
      *((_QWORD *)a2 + 4) = v31;
      *((_QWORD *)a3 + 4) = v30;
      result = 2;
      goto LABEL_10;
    }
    return 1;
  }
  if ((_DWORD)result)
  {
    v15 = *(_OWORD *)a2;
    v16 = *((_OWORD *)a2 + 1);
    v17 = *((_QWORD *)a2 + 4);
    v18 = *((_QWORD *)a3 + 4);
    v19 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v19;
    *((_QWORD *)a2 + 4) = v18;
    *((_QWORD *)a3 + 4) = v17;
    *(_OWORD *)a3 = v15;
    *((_OWORD *)a3 + 1) = v16;
    if (!sub_223F0C258(a4, a2, a1))
      return 1;
    v20 = *a1;
    v21 = a1[1];
    v22 = *((_QWORD *)a1 + 4);
    v23 = *((_QWORD *)a2 + 4);
    v24 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v24;
    *((_QWORD *)a1 + 4) = v23;
    *((_QWORD *)a2 + 4) = v22;
    result = 2;
    *(_OWORD *)a2 = v20;
    *((_OWORD *)a2 + 1) = v21;
  }
  return result;
}

_DWORD *sub_223F0CA38(__int128 *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  __int128 *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v4 = a2;
  v6 = a1[1];
  v64 = *a1;
  v65 = v6;
  v66 = *((_QWORD *)a1 + 4);
  if ((sub_223F0C258(a3, (int *)&v64, (_DWORD *)(a2 - 40)) & 1) != 0)
  {
    v7 = a1;
    do
      v7 += 10;
    while ((sub_223F0C258(a3, (int *)&v64, v7) & 1) == 0);
  }
  else
  {
    v8 = (_DWORD *)a1 + 10;
    do
    {
      v7 = v8;
      if ((unint64_t)v8 >= v4)
        break;
      v9 = sub_223F0C258(a3, (int *)&v64, v8);
      v8 = v7 + 10;
    }
    while (!v9);
  }
  if ((unint64_t)v7 < v4)
  {
    do
      v4 -= 40;
    while ((sub_223F0C258(a3, (int *)&v64, (_DWORD *)v4) & 1) != 0);
  }
LABEL_95:
  while ((unint64_t)v7 < v4)
  {
    v10 = *(_OWORD *)v7;
    v11 = *((_OWORD *)v7 + 1);
    v69 = *((_QWORD *)v7 + 4);
    v67 = v10;
    v68 = v11;
    v12 = *(_OWORD *)v4;
    v13 = *(_OWORD *)(v4 + 16);
    *((_QWORD *)v7 + 4) = *(_QWORD *)(v4 + 32);
    *(_OWORD *)v7 = v12;
    *((_OWORD *)v7 + 1) = v13;
    v14 = v67;
    v15 = v68;
    *(_QWORD *)(v4 + 32) = v69;
    *(_OWORD *)v4 = v14;
    *(_OWORD *)(v4 + 16) = v15;
    v16 = SDWORD2(v64) - (uint64_t)(int)v64;
    v17 = SHIDWORD(v64) - (uint64_t)SDWORD1(v64);
    if (v16 >= 0)
      v18 = SDWORD2(v64) - (uint64_t)(int)v64;
    else
      v18 = (int)v64 - (uint64_t)SDWORD2(v64);
    if (v17 >= 0)
      v19 = SHIDWORD(v64) - (uint64_t)SDWORD1(v64);
    else
      v19 = SDWORD1(v64) - (uint64_t)SHIDWORD(v64);
    if ((_DWORD)v64 == DWORD2(v64))
    {
      if (DWORD1(v64) == HIDWORD(v64))
      {
        while (1)
        {
          while (1)
          {
            v35 = v7[10];
            v7 += 10;
            v34 = v35;
            if ((_DWORD)v64 == v35)
              break;
            if ((int)v64 < v34)
              goto LABEL_56;
          }
          if ((_DWORD)v64 != v7[2])
            break;
          v36 = v7[1];
          if (v36 == v7[3])
          {
            if (SDWORD1(v64) < v36)
              break;
          }
          else if (SDWORD1(v64) <= v36)
          {
            break;
          }
        }
      }
      else
      {
        do
        {
          while (1)
          {
            v38 = v7[10];
            v7 += 10;
            v37 = v38;
            if ((_DWORD)v64 == v38)
              break;
            if ((int)v64 < v37)
              goto LABEL_56;
          }
        }
        while ((_DWORD)v64 == v7[2] && SDWORD1(v64) >= v7[1]);
      }
    }
    else
    {
      do
      {
        while (1)
        {
          do
          {
            while (1)
            {
              v21 = v7[10];
              v7 += 10;
              v20 = v21;
              if ((_DWORD)v64 == v21)
                break;
              if ((int)v64 < v20)
                goto LABEL_56;
            }
            v22 = (int)v7[2];
          }
          while ((_DWORD)v64 == (_DWORD)v22);
          v23 = v7[1];
          if (DWORD1(v64) == v23)
            break;
          if (SDWORD1(v64) < v23)
            goto LABEL_56;
        }
        v24 = (int)v64 - v22;
        v25 = SDWORD1(v64) - (uint64_t)(int)v7[3];
        if (v24 >= 0)
          v26 = v24;
        else
          v26 = -v24;
        if (v25 >= 0)
          v27 = SDWORD1(v64) - (uint64_t)(int)v7[3];
        else
          v27 = (int)v7[3] - (uint64_t)SDWORD1(v64);
        v28 = v27 * v18;
        v29 = v26 * v19;
        v30 = v25 ^ v16;
        v31 = v24 ^ v17;
        v32 = (double)(v28 - v29);
        v33 = (double)(v29 - v28);
        if (v28 < v29)
          v32 = -v33;
        if (v31 < 0)
          v32 = (double)(v28 + v29);
        if (v28 > v29)
          v33 = -(double)(v28 - v29);
        if (v31 >= 0)
          v33 = -(double)(v28 + v29);
        if (v30 < 0)
          v32 = v33;
      }
      while (v32 <= 0.0);
    }
LABEL_56:
    if ((_DWORD)v64 == DWORD2(v64))
    {
      if (DWORD1(v64) == HIDWORD(v64))
      {
        do
        {
          while (1)
          {
            do
            {
              while (1)
              {
                v54 = *(_DWORD *)(v4 - 40);
                v4 -= 40;
                v53 = v54;
                if ((_DWORD)v64 == v54)
                  break;
                if ((int)v64 >= v53)
                  goto LABEL_95;
              }
            }
            while ((_DWORD)v64 != *(_DWORD *)(v4 + 8));
            v55 = *(_DWORD *)(v4 + 4);
            if (v55 != *(_DWORD *)(v4 + 12))
              break;
            if (SDWORD1(v64) >= v55)
              goto LABEL_95;
          }
        }
        while (SDWORD1(v64) <= v55);
      }
      else
      {
        do
        {
          while (1)
          {
            v57 = *(_DWORD *)(v4 - 40);
            v4 -= 40;
            v56 = v57;
            if ((_DWORD)v64 == v57)
              break;
            if ((int)v64 >= v56)
              goto LABEL_95;
          }
        }
        while ((_DWORD)v64 != *(_DWORD *)(v4 + 8) || SDWORD1(v64) < *(_DWORD *)(v4 + 4));
      }
    }
    else
    {
      while (1)
      {
        while (1)
        {
          v40 = *(_DWORD *)(v4 - 40);
          v4 -= 40;
          v39 = v40;
          if ((_DWORD)v64 == v40)
            break;
          if ((int)v64 >= v39)
            goto LABEL_95;
        }
        v41 = *(int *)(v4 + 8);
        if ((_DWORD)v64 == (_DWORD)v41)
          break;
        v42 = *(_DWORD *)(v4 + 4);
        if (DWORD1(v64) == v42)
        {
          v43 = (int)v64 - v41;
          v44 = SDWORD1(v64) - (uint64_t)*(int *)(v4 + 12);
          if (v43 >= 0)
            v45 = v43;
          else
            v45 = -v43;
          if (v44 >= 0)
            v46 = SDWORD1(v64) - (uint64_t)*(int *)(v4 + 12);
          else
            v46 = *(int *)(v4 + 12) - (uint64_t)SDWORD1(v64);
          v47 = v46 * v18;
          v48 = v45 * v19;
          v49 = v44 ^ v16;
          v50 = v43 ^ v17;
          v51 = (double)(v47 - v48);
          v52 = (double)(v48 - v47);
          if (v47 < v48)
            v51 = -v52;
          if (v50 < 0)
            v51 = (double)(v47 + v48);
          if (v47 > v48)
            v52 = -(double)(v47 - v48);
          if (v50 >= 0)
            v52 = -(double)(v47 + v48);
          if (v49 < 0)
            v51 = v52;
          if (v51 <= 0.0)
            goto LABEL_95;
        }
        else if (SDWORD1(v64) >= v42)
        {
          goto LABEL_95;
        }
      }
    }
  }
  v58 = (__int128 *)(v7 - 10);
  if (v7 - 10 != (_DWORD *)a1)
  {
    v59 = *v58;
    v60 = *(_OWORD *)(v7 - 6);
    *((_QWORD *)a1 + 4) = *((_QWORD *)v7 - 1);
    *a1 = v59;
    a1[1] = v60;
  }
  v61 = v64;
  v62 = v65;
  *((_QWORD *)v7 - 1) = v66;
  *v58 = v61;
  *(_OWORD *)(v7 - 6) = v62;
  return v7;
}

uint64_t sub_223F0CE08(__int128 *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v6 = 0;
  v7 = a1[1];
  v59 = *a1;
  v60 = v7;
  v61 = *((_QWORD *)a1 + 4);
  do
    v6 += 40;
  while ((sub_223F0C258(a3, (int *)((char *)a1 + v6), &v59) & 1) != 0);
  v8 = (unint64_t)a1 + v6;
  v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 10;
    }
    while ((sub_223F0C258(a3, a2, &v59) & 1) == 0);
  }
  else
  {
    do
      a2 -= 10;
    while (!sub_223F0C258(a3, a2, &v59));
  }
  if (v8 < (unint64_t)a2)
  {
    v10 = (unint64_t)a1 + v6;
    v11 = a2;
LABEL_11:
    v12 = *(_OWORD *)v10;
    v13 = *(_OWORD *)(v10 + 16);
    v64 = *(_QWORD *)(v10 + 32);
    v62 = v12;
    v63 = v13;
    v14 = *(_OWORD *)v11;
    v15 = *((_OWORD *)v11 + 1);
    *(_QWORD *)(v10 + 32) = *((_QWORD *)v11 + 4);
    *(_OWORD *)v10 = v14;
    *(_OWORD *)(v10 + 16) = v15;
    v16 = v62;
    v17 = v63;
    *((_QWORD *)v11 + 4) = v64;
    *(_OWORD *)v11 = v16;
    *((_OWORD *)v11 + 1) = v17;
    v18 = (int)v59 - (uint64_t)SDWORD2(v59);
    v19 = SDWORD1(v59) - (uint64_t)SHIDWORD(v59);
    if (v18 >= 0)
      v20 = (int)v59 - (uint64_t)SDWORD2(v59);
    else
      v20 = SDWORD2(v59) - (uint64_t)(int)v59;
    if (v19 >= 0)
      v21 = SDWORD1(v59) - (uint64_t)SHIDWORD(v59);
    else
      v21 = SHIDWORD(v59) - (uint64_t)SDWORD1(v59);
    if ((_DWORD)v59 != DWORD2(v59))
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v23 = *(_DWORD *)(v10 + 40);
            v10 += 40;
            v22 = v23;
            if (v23 == (_DWORD)v59)
              break;
            if (v22 >= (int)v59)
              goto LABEL_59;
          }
          v24 = *(_DWORD *)(v10 + 4);
          v25 = *(int *)(v10 + 8);
          if ((_DWORD)v59 == (_DWORD)v25)
            break;
          if (v24 != DWORD1(v59))
            goto LABEL_47;
          v26 = v25 - (int)v59;
          v27 = *(int *)(v10 + 12) - (uint64_t)SDWORD1(v59);
          if (v26 >= 0)
            v28 = v26;
          else
            v28 = -v26;
          if (v27 >= 0)
            v29 = *(int *)(v10 + 12) - (uint64_t)SDWORD1(v59);
          else
            v29 = SDWORD1(v59) - (uint64_t)*(int *)(v10 + 12);
          v30 = v28 * v21;
          v31 = v29 * v20;
          v32 = v26 ^ v19;
          v33 = v27 ^ v18;
          v34 = (double)(v30 - v31);
          v35 = (double)(v31 - v30);
          if (v30 < v31)
            v34 = -v35;
          if (v33 < 0)
            v34 = (double)(v31 + v30);
          if (v30 > v31)
            v35 = -(double)(v30 - v31);
          if (v33 >= 0)
            v35 = -(double)(v31 + v30);
          if (v32 < 0)
            v34 = v35;
          if (v34 <= 0.0)
            goto LABEL_59;
        }
        if (v24 == *(_DWORD *)(v10 + 12))
        {
          if ((_DWORD)v59 == DWORD2(v59))
          {
            if (DWORD1(v59) == HIDWORD(v59))
            {
LABEL_47:
              if (v24 >= SDWORD1(v59))
                goto LABEL_59;
            }
            else if (v24 > SDWORD1(v59))
            {
              goto LABEL_59;
            }
          }
        }
        else if ((_DWORD)v59 == DWORD2(v59))
        {
          goto LABEL_47;
        }
      }
    }
    while (1)
    {
      while (1)
      {
        v37 = *(_DWORD *)(v10 + 40);
        v10 += 40;
        v36 = v37;
        if (v37 == (_DWORD)v59)
          break;
        if (v36 >= (int)v59)
          goto LABEL_59;
      }
      if ((_DWORD)v59 != *(_DWORD *)(v10 + 8))
        break;
      v38 = *(_DWORD *)(v10 + 4);
      if (v38 == *(_DWORD *)(v10 + 12))
      {
        if ((_DWORD)v59 == DWORD2(v59))
        {
          if (DWORD1(v59) == HIDWORD(v59))
          {
LABEL_58:
            if (v38 >= SDWORD1(v59))
              break;
          }
          else if (v38 > SDWORD1(v59))
          {
            break;
          }
        }
      }
      else if ((_DWORD)v59 == DWORD2(v59))
      {
        goto LABEL_58;
      }
    }
LABEL_59:
    v9 = v10 - 40;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v40 = *(v11 - 10);
          v11 -= 10;
          v39 = v40;
          if (v40 == (_DWORD)v59)
            break;
          if (v39 < (int)v59)
            goto LABEL_10;
        }
        v41 = v11[2];
        if ((_DWORD)v59 == (_DWORD)v41)
          break;
        if ((_DWORD)v59 != DWORD2(v59))
        {
          v43 = v11[1];
          if (v43 == DWORD1(v59))
          {
            v44 = v41 - (int)v59;
            v45 = v11[3] - (uint64_t)SDWORD1(v59);
            if (v44 >= 0)
              v46 = v44;
            else
              v46 = -v44;
            if (v45 >= 0)
              v47 = v11[3] - (uint64_t)SDWORD1(v59);
            else
              v47 = SDWORD1(v59) - (uint64_t)v11[3];
            v48 = v46 * v21;
            v49 = v47 * v20;
            v50 = v44 ^ v19;
            v51 = v45 ^ v18;
            v52 = (double)(v48 - v49);
            v53 = (double)(v49 - v48);
            if (v48 < v49)
              v52 = -v53;
            if (v51 < 0)
              v52 = (double)(v49 + v48);
            if (v48 > v49)
              v53 = -(double)(v48 - v49);
            if (v51 >= 0)
              v53 = -(double)(v49 + v48);
            if (v50 < 0)
              v52 = v53;
            if (v52 > 0.0)
            {
LABEL_10:
              if (v10 >= (unint64_t)v11)
                goto LABEL_93;
              goto LABEL_11;
            }
          }
          else if (v43 < SDWORD1(v59))
          {
            goto LABEL_10;
          }
        }
      }
      v42 = v11[1];
      if (v42 != v11[3])
        break;
      if ((_DWORD)v59 != DWORD2(v59))
        goto LABEL_10;
      if (DWORD1(v59) == HIDWORD(v59))
      {
LABEL_89:
        if (v42 < SDWORD1(v59))
          goto LABEL_10;
      }
      else if (v42 <= SDWORD1(v59))
      {
        goto LABEL_10;
      }
    }
    if ((_DWORD)v59 != DWORD2(v59))
      goto LABEL_10;
    goto LABEL_89;
  }
LABEL_93:
  if ((__int128 *)v9 != a1)
  {
    v54 = *(_OWORD *)v9;
    v55 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)a1 + 4) = *(_QWORD *)(v9 + 32);
    *a1 = v54;
    a1[1] = v55;
  }
  v56 = v59;
  v57 = v60;
  *(_QWORD *)(v9 + 32) = v61;
  *(_OWORD *)v9 = v56;
  *(_OWORD *)(v9 + 16) = v57;
  return v9;
}

BOOL sub_223F0D1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 40;
      if (!sub_223F0C258(a3, (int *)(a2 - 40), (_DWORD *)a1))
        return 1;
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(v8 + 32);
      v13 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(v8 + 32) = v11;
      result = 1;
      *(_OWORD *)v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      return result;
    case 3uLL:
      sub_223F0C8C4((__int128 *)a1, (int *)(a1 + 40), (int *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      v24 = (__int128 *)(a1 + 40);
      v25 = (__int128 *)(a1 + 80);
      v26 = a2 - 40;
      sub_223F0C8C4((__int128 *)a1, (int *)(a1 + 40), (int *)(a1 + 80), a3);
      if (!sub_223F0C258(a3, (int *)v26, (_DWORD *)(a1 + 80)))
        return 1;
      v27 = *v25;
      v28 = *(_OWORD *)(a1 + 96);
      v29 = *(_QWORD *)(a1 + 112);
      v30 = *(_QWORD *)(v26 + 32);
      v31 = *(_OWORD *)(v26 + 16);
      *v25 = *(_OWORD *)v26;
      *(_OWORD *)(a1 + 96) = v31;
      *(_QWORD *)(a1 + 112) = v30;
      *(_QWORD *)(v26 + 32) = v29;
      *(_OWORD *)v26 = v27;
      *(_OWORD *)(v26 + 16) = v28;
      if (!sub_223F0C258(a3, (int *)(a1 + 80), (_DWORD *)(a1 + 40)))
        return 1;
      v32 = *(_QWORD *)(a1 + 72);
      v34 = *v24;
      v33 = *(_OWORD *)(a1 + 56);
      v35 = *(_OWORD *)(a1 + 96);
      *v24 = *v25;
      *(_OWORD *)(a1 + 56) = v35;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 112);
      *v25 = v34;
      *(_OWORD *)(a1 + 96) = v33;
      *(_QWORD *)(a1 + 112) = v32;
      if (!sub_223F0C258(a3, (int *)(a1 + 40), (_DWORD *)a1))
        return 1;
      v36 = *(_QWORD *)(a1 + 32);
      v38 = *(_OWORD *)a1;
      v37 = *(_OWORD *)(a1 + 16);
      v39 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v24;
      *(_OWORD *)(a1 + 16) = v39;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72);
      *v24 = v38;
      *(_OWORD *)(a1 + 56) = v37;
      result = 1;
      *(_QWORD *)(a1 + 72) = v36;
      return result;
    case 5uLL:
      sub_223F0D458(a1, (__int128 *)(a1 + 40), (int *)(a1 + 80), (__int128 *)(a1 + 120), (__int128 *)(a2 - 40), a3);
      return 1;
    default:
      v14 = (_DWORD *)(a1 + 80);
      sub_223F0C8C4((__int128 *)a1, (int *)(a1 + 40), (int *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if (sub_223F0C258(a3, (int *)v15, v14))
    {
      v20 = *(_OWORD *)(v15 + 16);
      v40 = *(_OWORD *)v15;
      v41 = v20;
      v42 = *(_QWORD *)(v15 + 32);
      v21 = v16;
      do
      {
        v22 = a1 + v21;
        v23 = *(_OWORD *)(a1 + v21 + 96);
        *(_OWORD *)(v22 + 120) = *(_OWORD *)(a1 + v21 + 80);
        *(_OWORD *)(v22 + 136) = v23;
        *(_QWORD *)(v22 + 152) = *(_QWORD *)(a1 + v21 + 112);
        if (v21 == -80)
        {
          v18 = a1;
          goto LABEL_7;
        }
        v21 -= 40;
      }
      while ((sub_223F0C258(a3, (int *)&v40, (_DWORD *)(v22 + 40)) & 1) != 0);
      v18 = a1 + v21 + 120;
LABEL_7:
      v19 = v41;
      *(_OWORD *)v18 = v40;
      *(_OWORD *)(v18 + 16) = v19;
      *(_QWORD *)(v18 + 32) = v42;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (_DWORD *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

__n128 sub_223F0D458(uint64_t a1, __int128 *a2, int *a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __n128 result;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;

  sub_223F0C8C4((__int128 *)a1, (int *)a2, a3, a6);
  if (sub_223F0C258(a6, (int *)a4, a3))
  {
    v12 = *(_OWORD *)a3;
    v13 = *((_OWORD *)a3 + 1);
    v14 = *((_QWORD *)a3 + 4);
    v15 = *((_QWORD *)a4 + 4);
    v16 = a4[1];
    *(_OWORD *)a3 = *a4;
    *((_OWORD *)a3 + 1) = v16;
    *((_QWORD *)a3 + 4) = v15;
    *((_QWORD *)a4 + 4) = v14;
    *a4 = v12;
    a4[1] = v13;
    if (sub_223F0C258(a6, a3, a2))
    {
      v17 = *a2;
      v18 = a2[1];
      v19 = *((_QWORD *)a2 + 4);
      v20 = *((_QWORD *)a3 + 4);
      v21 = *((_OWORD *)a3 + 1);
      *a2 = *(_OWORD *)a3;
      a2[1] = v21;
      *((_QWORD *)a2 + 4) = v20;
      *((_QWORD *)a3 + 4) = v19;
      *(_OWORD *)a3 = v17;
      *((_OWORD *)a3 + 1) = v18;
      if (sub_223F0C258(a6, (int *)a2, (_DWORD *)a1))
      {
        v22 = *(_OWORD *)a1;
        v23 = *(_OWORD *)(a1 + 16);
        v24 = *(_QWORD *)(a1 + 32);
        v25 = *((_QWORD *)a2 + 4);
        v26 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v26;
        *(_QWORD *)(a1 + 32) = v25;
        *((_QWORD *)a2 + 4) = v24;
        *a2 = v22;
        a2[1] = v23;
      }
    }
  }
  if (sub_223F0C258(a6, (int *)a5, a4))
  {
    v28 = *a4;
    v29 = a4[1];
    v30 = *((_QWORD *)a4 + 4);
    v31 = *((_QWORD *)a5 + 4);
    v32 = a5[1];
    *a4 = *a5;
    a4[1] = v32;
    *((_QWORD *)a4 + 4) = v31;
    *((_QWORD *)a5 + 4) = v30;
    *a5 = v28;
    a5[1] = v29;
    if (sub_223F0C258(a6, (int *)a4, a3))
    {
      v33 = *(_OWORD *)a3;
      v34 = *((_OWORD *)a3 + 1);
      v35 = *((_QWORD *)a3 + 4);
      v36 = *((_QWORD *)a4 + 4);
      v37 = a4[1];
      *(_OWORD *)a3 = *a4;
      *((_OWORD *)a3 + 1) = v37;
      *((_QWORD *)a3 + 4) = v36;
      *((_QWORD *)a4 + 4) = v35;
      *a4 = v33;
      a4[1] = v34;
      if (sub_223F0C258(a6, a3, a2))
      {
        v38 = *a2;
        v39 = a2[1];
        v40 = *((_QWORD *)a2 + 4);
        v41 = *((_QWORD *)a3 + 4);
        v42 = *((_OWORD *)a3 + 1);
        *a2 = *(_OWORD *)a3;
        a2[1] = v42;
        *((_QWORD *)a2 + 4) = v41;
        *((_QWORD *)a3 + 4) = v40;
        *(_OWORD *)a3 = v38;
        *((_OWORD *)a3 + 1) = v39;
        if (sub_223F0C258(a6, (int *)a2, (_DWORD *)a1))
        {
          result = *(__n128 *)a1;
          v43 = *(_OWORD *)(a1 + 16);
          v44 = *(_QWORD *)(a1 + 32);
          v45 = *((_QWORD *)a2 + 4);
          v46 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v46;
          *(_QWORD *)(a1 + 32) = v45;
          *((_QWORD *)a2 + 4) = v44;
          *a2 = (__int128)result;
          a2[1] = v43;
        }
      }
    }
  }
  return result;
}

__n128 sub_223F0D61C(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  int64_t v12;
  __int128 *v13;
  int64_t v14;
  __n128 result;
  __n128 v16;
  __n128 *v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v26 = v4;
    v27 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__int128 *)(a1 + 40 * v12);
      v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_223F0C258(a2, (int *)(a1 + 40 * v12), (_DWORD *)v13 + 10))
      {
        v13 = (__int128 *)((char *)v13 + 40);
        v12 = v14;
      }
      if ((sub_223F0C258(a2, (int *)v13, v7) & 1) == 0)
      {
        v16 = v7[1];
        v23 = *v7;
        v24 = v16;
        v25 = v7[2].n128_i64[0];
        do
        {
          v17 = (__n128 *)v13;
          v18 = (__n128)*v13;
          v19 = v13[1];
          v7[2].n128_u64[0] = *((_QWORD *)v13 + 4);
          *v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12)
            break;
          v20 = (2 * v12) | 1;
          v13 = (__int128 *)(a1 + 40 * v20);
          v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if (sub_223F0C258(a2, (int *)(a1 + 40 * v20), (_DWORD *)v13 + 10))
            {
              v13 = (__int128 *)((char *)v13 + 40);
              v20 = v21;
            }
          }
          v7 = v17;
          v12 = v20;
        }
        while (!sub_223F0C258(a2, (int *)v13, &v23));
        result = v23;
        v22 = v24;
        v17[2].n128_u64[0] = v25;
        *v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

unint64_t sub_223F0D788(unint64_t result, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v6;
  int *v7;
  int64_t v8;
  uint64_t v10;
  int *v11;
  __int128 v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  __int128 v45;
  __int128 v46;
  int *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  if ((uint64_t)((uint64_t)a2 - result) >= 41)
  {
    v57 = v3;
    v58 = v4;
    v6 = (int *)a2;
    v7 = (int *)result;
    v8 = ((unint64_t)a2 - result) / 0x28;
    do
    {
      v10 = 0;
      v51 = *(_OWORD *)v7;
      v52 = *((_OWORD *)v7 + 1);
      v53 = *((_QWORD *)v7 + 4);
      v11 = v7;
      do
      {
        v14 = v11;
        v15 = v10 + 1;
        v11 += 10 * v10 + 10;
        v16 = 2 * v10;
        v10 = (2 * v10) | 1;
        v17 = v16 + 2;
        if (v17 >= v8)
          goto LABEL_7;
        v18 = v11[10];
        v19 = *v11;
        if ((_DWORD)v19 == v18)
        {
          v20 = v14[10 * v15 + 2];
          if ((_DWORD)v19 == (_DWORD)v20)
          {
            v21 = v11[1];
            v22 = v14[10 * v15 + 3];
            v23 = v11[12];
            if (v21 == v22)
            {
              if ((_DWORD)v19 != v23)
                goto LABEL_6;
              v24 = v11[11];
              if (v24 != v11[13])
              {
                if (v21 <= v24)
                  goto LABEL_6;
                goto LABEL_7;
              }
            }
            else
            {
              if ((_DWORD)v19 != v23)
                goto LABEL_6;
              v24 = v11[11];
            }
            if (v21 < v24)
              goto LABEL_6;
          }
          else
          {
            v25 = v11[12];
            if ((_DWORD)v19 != (_DWORD)v25)
            {
              v26 = v11[1];
              result = v11[11];
              if ((_DWORD)v26 == (_DWORD)result)
              {
                v27 = v20 - v19;
                v28 = v19 - v25;
                v29 = v14[10 * v15 + 3] - v26;
                v30 = v26 - v11[13];
                if (v27 >= 0)
                  v31 = v27;
                else
                  v31 = -v27;
                if (v29 >= 0)
                  v32 = v29;
                else
                  v32 = -v29;
                if (v28 >= 0)
                  v33 = v28;
                else
                  v33 = -v28;
                if (v30 >= 0)
                  v34 = v30;
                else
                  v34 = -v30;
                v35 = v34 * v31;
                result = v32 * v33;
                v36 = v30 ^ v27;
                v37 = v29 ^ v28;
                v38 = (double)(v35 - result);
                v39 = (double)(result - v35);
                if (v35 < result)
                  v38 = -v39;
                if (v37 < 0)
                  v38 = (double)(v35 + result);
                if (v35 > result)
                  v39 = -(double)(v35 - result);
                if (v37 >= 0)
                  v39 = -(double)(v35 + result);
                if (v36 < 0)
                  v38 = v39;
                if (v38 > 0.0)
                {
LABEL_6:
                  v11 += 10;
                  v10 = v17;
                }
              }
              else if ((int)v26 < (int)result)
              {
                goto LABEL_6;
              }
            }
          }
        }
        else if ((int)v19 < v18)
        {
          goto LABEL_6;
        }
LABEL_7:
        v12 = *(_OWORD *)v11;
        v13 = *((_OWORD *)v11 + 1);
        *((_QWORD *)v14 + 4) = *((_QWORD *)v11 + 4);
        *(_OWORD *)v14 = v12;
        *((_OWORD *)v14 + 1) = v13;
      }
      while (v10 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
      v6 -= 10;
      if (v11 == v6)
      {
        *((_QWORD *)v11 + 4) = v53;
        *(_OWORD *)v11 = v51;
        *((_OWORD *)v11 + 1) = v52;
      }
      else
      {
        v40 = *(_OWORD *)v6;
        v41 = *((_OWORD *)v6 + 1);
        *((_QWORD *)v11 + 4) = *((_QWORD *)v6 + 4);
        *(_OWORD *)v11 = v40;
        *((_OWORD *)v11 + 1) = v41;
        *(_OWORD *)v6 = v51;
        *((_OWORD *)v6 + 1) = v52;
        *((_QWORD *)v6 + 4) = v53;
        v42 = (char *)v11 - (char *)v7 + 40;
        if (v42 >= 41)
        {
          v43 = (v42 / 0x28uLL - 2) >> 1;
          v44 = &v7[10 * v43];
          result = sub_223F0C258(a3, v44, v11);
          if ((_DWORD)result)
          {
            v45 = *(_OWORD *)v11;
            v46 = *((_OWORD *)v11 + 1);
            v56 = *((_QWORD *)v11 + 4);
            v54 = v45;
            v55 = v46;
            do
            {
              v47 = v44;
              v48 = *(_OWORD *)v44;
              v49 = *((_OWORD *)v44 + 1);
              *((_QWORD *)v11 + 4) = *((_QWORD *)v44 + 4);
              *(_OWORD *)v11 = v48;
              *((_OWORD *)v11 + 1) = v49;
              if (!v43)
                break;
              v43 = (v43 - 1) >> 1;
              v44 = &v7[10 * v43];
              result = sub_223F0C258(a3, v44, &v54);
              v11 = v47;
            }
            while ((result & 1) != 0);
            v50 = v55;
            *(_OWORD *)v47 = v54;
            *((_OWORD *)v47 + 1) = v50;
            *((_QWORD *)v47 + 4) = v56;
          }
        }
      }
    }
    while (v8-- > 2);
  }
  return result;
}

void sub_223F0DA98(char **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32) & 0x1FLL;
  v6 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[24 * v9];
    *(_QWORD *)v14 = v3;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v4;
    v7 = v14 + 24;
    if (v6 != v8)
    {
      do
      {
        v15 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v6 -= 24;
      }
      while (v6 != v8);
      v6 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[24 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = v3;
    *((_QWORD *)v6 + 1) = 0;
    v7 = v6 + 24;
    *((_QWORD *)v6 + 2) = v4;
  }
  a1[1] = v7;
}

uint64_t *sub_223F0DBD0(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t **v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  uint64_t *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[48];
  uint64_t v29;
  uint64_t v30;

  v2 = result[1];
  if (v2 + 40 != result[4])
  {
    v4 = result;
    v5 = (uint64_t **)(result + 16);
    v6 = result + 17;
    do
    {
      v9 = *(_OWORD *)(v2 + 16);
      v26 = *(_OWORD *)v2;
      v27 = v9;
      *(_QWORD *)v28 = *(_QWORD *)(v2 + 32);
      v10 = *(_OWORD *)(v2 + 56);
      *(_OWORD *)&v28[8] = *(_OWORD *)(v2 + 40);
      *(_OWORD *)&v28[24] = v10;
      *(_QWORD *)&v28[40] = *(_QWORD *)(v2 + 72);
      v11 = sub_223F0E064(a2, (int *)v2, (int *)(v2 + 40));
      v22 = *(_OWORD *)v28;
      v23 = *(_OWORD *)&v28[16];
      v24 = *(_OWORD *)&v28[32];
      v20 = v26;
      v21 = v27;
      *(_QWORD *)&v25 = 0;
      *((_QWORD *)&v25 + 1) = v11;
      result = sub_223F0E7F8(v5, v6, &v30, &v29, (uint64_t)&v20);
      if (!*result)
      {
        v12 = result;
        v13 = operator new(0x80uLL);
        v14 = v23;
        v13[4] = v22;
        v13[5] = v14;
        v15 = v24;
        v16 = v21;
        v13[2] = v20;
        v13[3] = v16;
        v17 = v25;
        v13[6] = v15;
        v13[7] = v17;
        v18 = v30;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = v18;
        *v12 = (uint64_t)v13;
        v19 = (uint64_t *)**v5;
        if (v19)
        {
          *v5 = v19;
          v7 = (uint64_t *)*v12;
        }
        else
        {
          v7 = (uint64_t *)v13;
        }
        result = sub_2231A9A8C((uint64_t *)v4[17], v7);
        ++v4[18];
      }
      v8 = v2 + 80;
      v2 += 40;
    }
    while (v8 != v4[4]);
  }
  return result;
}

_OWORD *sub_223F0DD38(uint64_t a1, uint64_t a2, __int128 *__sz, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  _OWORD *v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  int8x16_t v48;
  __int128 v49;
  _BYTE v50[48];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  int8x16_t v56;
  __int128 v57;
  _BYTE v58[48];
  uint64_t v59;
  uint64_t v60;

  v9 = *(_OWORD *)(a2 + 16);
  v56 = *(int8x16_t *)a2;
  v57 = v9;
  v10 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)&v58[8] = *(_OWORD *)a4;
  *(_OWORD *)&v58[24] = *(_OWORD *)(a4 + 16);
  v11 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)v58 = v10;
  *(_QWORD *)&v58[40] = v11;
  v13 = *(_QWORD *)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v55 = *(_OWORD *)(a4 + 16);
  v14 = *(_QWORD *)(a4 + 32);
  v15 = __sz[1];
  v52 = *__sz;
  v53 = v15;
  v54 = *((_QWORD *)__sz + 4);
  if (v13 == v12)
  {
    v16 = v13;
    v13 = v12;
  }
  else
  {
    v14 ^= 0x20uLL;
    v16 = v12;
  }
  v17 = sub_223F0E064(a6, (int *)__sz, (int *)a4);
  v49 = v55;
  *(_OWORD *)&v50[8] = v52;
  v18 = (_QWORD **)(a1 + 128);
  v48.i64[0] = v16;
  v48.i64[1] = v13;
  *(_QWORD *)v50 = v14;
  *(_OWORD *)&v50[24] = v53;
  *(_QWORD *)&v50[40] = v54;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = v19;
  v20 = sub_223F0E7F8((_QWORD *)(a1 + 128), a5, &v60, &v59, (uint64_t)&v48);
  v21 = (_QWORD *)*v20;
  if (!*v20)
  {
    v22 = v20;
    v21 = operator new(0x80uLL);
    v23 = *(_OWORD *)&v50[16];
    *((_OWORD *)v21 + 4) = *(_OWORD *)v50;
    *((_OWORD *)v21 + 5) = v23;
    v24 = v51;
    *((_OWORD *)v21 + 6) = *(_OWORD *)&v50[32];
    *((_OWORD *)v21 + 7) = v24;
    v25 = v49;
    *((int8x16_t *)v21 + 2) = v48;
    *((_OWORD *)v21 + 3) = v25;
    v26 = v60;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = v26;
    *v22 = (uint64_t)v21;
    v27 = (_QWORD *)**v18;
    v28 = v21;
    if (v27)
    {
      *v18 = v27;
      v28 = (uint64_t *)*v22;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 136), v28);
    ++*(_QWORD *)(a1 + 144);
    if (*(_DWORD *)a4 != *(_DWORD *)(a4 + 8))
      goto LABEL_11;
LABEL_10:
    if (*(_DWORD *)(a4 + 4) == *(_DWORD *)(a4 + 12))
      goto LABEL_16;
    goto LABEL_11;
  }
  if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 8))
    goto LABEL_10;
LABEL_11:
  v29 = *(_OWORD *)(a4 + 16);
  v48 = *(int8x16_t *)a4;
  v49 = v29;
  *(_OWORD *)&v50[24] = *(_OWORD *)(a4 + 16);
  *(_QWORD *)v50 = *(_QWORD *)(a4 + 32);
  *(int8x16_t *)&v50[8] = vextq_s8(v48, v48, 8uLL);
  v51 = 0uLL;
  *(_QWORD *)&v50[40] = *(_QWORD *)v50 ^ 0x20;
  v30 = sub_223F0E7F8((_QWORD *)(a1 + 128), v21, &v60, &v59, (uint64_t)&v48);
  v21 = (_QWORD *)*v30;
  if (!*v30)
  {
    v31 = v30;
    v21 = operator new(0x80uLL);
    v32 = *(_OWORD *)&v50[16];
    *((_OWORD *)v21 + 4) = *(_OWORD *)v50;
    *((_OWORD *)v21 + 5) = v32;
    v33 = v51;
    *((_OWORD *)v21 + 6) = *(_OWORD *)&v50[32];
    *((_OWORD *)v21 + 7) = v33;
    v34 = v49;
    *((int8x16_t *)v21 + 2) = v48;
    *((_OWORD *)v21 + 3) = v34;
    v35 = v60;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = v35;
    *v31 = (uint64_t)v21;
    v36 = (_QWORD *)**v18;
    v37 = v21;
    if (v36)
    {
      *v18 = v36;
      v37 = (uint64_t *)*v31;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 136), v37);
    ++*(_QWORD *)(a1 + 144);
  }
  v48.i64[0] = *(_QWORD *)(a4 + 8);
  v48.i64[1] = (uint64_t)v21;
  sub_223F0E660((char **)(a1 + 40), &v48);
LABEL_16:
  *(_OWORD *)v50 = *(_OWORD *)v58;
  *(_OWORD *)&v50[16] = *(_OWORD *)&v58[16];
  *(_OWORD *)&v50[32] = *(_OWORD *)&v58[32];
  v48 = v56;
  v49 = v57;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = v17;
  v38 = sub_223F0E7F8((_QWORD *)(a1 + 128), v21, &v60, &v59, (uint64_t)&v48);
  v39 = (_OWORD *)*v38;
  if (!*v38)
  {
    v40 = v38;
    v39 = operator new(0x80uLL);
    v41 = *(_OWORD *)&v50[16];
    v39[4] = *(_OWORD *)v50;
    v39[5] = v41;
    v42 = v51;
    v39[6] = *(_OWORD *)&v50[32];
    v39[7] = v42;
    v43 = v49;
    v39[2] = v48;
    v39[3] = v43;
    v44 = v60;
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = v44;
    *v40 = (uint64_t)v39;
    v45 = (_QWORD *)**v18;
    v46 = (uint64_t *)v39;
    if (v45)
    {
      *v18 = v45;
      v46 = (uint64_t *)*v40;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 136), v46);
    ++*(_QWORD *)(a1 + 144);
  }
  return v39;
}

char *sub_223F0E064(uint64_t a1, int *__sz, int *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  int v18;
  _BOOL4 v20;
  unsigned int v21;
  _BOOL4 v24;
  int v25;
  char **v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  _QWORD *v80;
  char *v81;
  char *v82;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;

  v7 = *__sz;
  v6 = __sz[1];
  v8 = __sz[2];
  v9 = __sz[3];
  v11 = *__sz != v8 || v6 != v9;
  v12 = *a3;
  v13 = a3[2];
  if (*a3 == v13)
  {
    v15 = a3[1];
    v16 = a3[3];
    v14 = v15 != v16;
    if (v11 && v15 == v16)
    {
      if (v7 != v12 || v6 != v15)
      {
        v18 = a3[1];
        if (v8 != v12 || v9 != v15)
          goto LABEL_15;
        v21 = 1;
        v18 = __sz[3];
        if (v12 == v13)
          goto LABEL_40;
        goto LABEL_38;
      }
LABEL_39:
      v21 = 1;
      v18 = __sz[1];
      if (v12 == v13)
        goto LABEL_40;
      goto LABEL_38;
    }
  }
  else
  {
    v14 = 1;
  }
  if (!v11 && v14)
  {
    v18 = a3[1];
    if (v12 != v7 || v18 != v6)
    {
      v15 = a3[3];
      if (v13 != v7 || v15 != v6)
        goto LABEL_15;
      v21 = 1;
      if (v12 == v13)
        goto LABEL_40;
LABEL_38:
      v24 = 1;
      goto LABEL_44;
    }
    goto LABEL_39;
  }
  v18 = a3[1];
  v15 = a3[3];
LABEL_15:
  v20 = v12 != v13 || v18 != v15;
  v21 = v11 ^ v20 ^ 1;
  if (v12 != v13)
    goto LABEL_38;
LABEL_40:
  v25 = a3[3];
  v24 = v18 != v25;
  if (v11 && v18 == v25)
  {
    if (v7 != v12 || v6 != v18)
    {
      v84 = v9 == v18 && v8 == v12;
      v27 = (char **)(a1 + 48);
      v28 = v21;
      if (!v84)
        goto LABEL_46;
      goto LABEL_55;
    }
LABEL_54:
    v27 = (char **)(a1 + 48);
    v28 = v21;
    goto LABEL_55;
  }
LABEL_44:
  if (v11 || !v24)
  {
LABEL_45:
    v27 = (char **)(a1 + 48);
    v28 = v21;
LABEL_46:
    v28 |= 2uLL;
    goto LABEL_55;
  }
  if (v12 == v7 && v18 == v6)
    goto LABEL_54;
  if (v13 != v7)
    goto LABEL_45;
  v27 = (char **)(a1 + 48);
  v28 = v21;
  if (a3[3] != v6)
    goto LABEL_46;
LABEL_55:
  v85 = *((_QWORD *)a3 + 2);
  v86 = *((_QWORD *)__sz + 2);
  v30 = v27[1];
  v29 = (unint64_t)v27[2];
  if ((unint64_t)v30 >= v29)
  {
    v32 = *v27;
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v30 - *v27) >> 4);
    v34 = v33 + 1;
    if (v33 + 1 > 0x555555555555555)
      goto LABEL_130;
    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v32) >> 4);
    if (2 * v35 > v34)
      v34 = 2 * v35;
    if (v35 >= 0x2AAAAAAAAAAAAAALL)
      v36 = 0x555555555555555;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 > 0x555555555555555)
        goto LABEL_129;
      v37 = (char *)operator new(48 * v36);
    }
    else
    {
      v37 = 0;
    }
    v38 = &v37[48 * v33];
    *(_OWORD *)v38 = 0u;
    *((_OWORD *)v38 + 1) = 0u;
    *((_QWORD *)v38 + 4) = 0;
    *((_QWORD *)v38 + 5) = v28;
    v31 = v38 + 48;
    if (v30 != v32)
    {
      do
      {
        v39 = *((_OWORD *)v30 - 3);
        v40 = *((_OWORD *)v30 - 1);
        *((_OWORD *)v38 - 2) = *((_OWORD *)v30 - 2);
        *((_OWORD *)v38 - 1) = v40;
        *((_OWORD *)v38 - 3) = v39;
        v38 -= 48;
        v30 -= 48;
      }
      while (v30 != v32);
      v30 = *v27;
    }
    *v27 = v38;
    v27[1] = v31;
    v27[2] = &v37[48 * v36];
    if (v30)
      operator delete(v30);
  }
  else
  {
    *(_OWORD *)v30 = 0u;
    *((_OWORD *)v30 + 1) = 0u;
    *((_QWORD *)v30 + 4) = 0;
    *((_QWORD *)v30 + 5) = v28;
    v31 = v30 + 48;
  }
  v27[1] = v31;
  v41 = (unint64_t)v27[2];
  if ((unint64_t)v31 < v41)
  {
    *(_OWORD *)v31 = 0u;
    *((_OWORD *)v31 + 1) = 0u;
    *((_QWORD *)v31 + 4) = 0;
    *((_QWORD *)v31 + 5) = v28;
    v42 = v31 + 48;
    v27[1] = v31 + 48;
    v44 = *(_QWORD **)a1;
    v43 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD **)a1 == v43)
    {
LABEL_94:
      v63 = *((_QWORD *)__sz + 3);
      v64 = *((_QWORD *)__sz + 4) & 0x1FLL;
      v65 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v44 >= v65)
      {
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)v44) >> 3);
        v67 = 2 * v66;
        if (2 * v66 <= 1)
          v67 = 1;
        if (v66 >= 0x555555555555555)
          v68 = 0xAAAAAAAAAAAAAAALL;
        else
          v68 = v67;
        if (v68 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_129;
        v69 = 3 * v68;
        v70 = operator new(24 * v68);
        *v70 = v63;
        v70[1] = 0;
        v70[2] = v64;
        v43 = v70 + 3;
        *(_QWORD *)a1 = v70;
        *(_QWORD *)(a1 + 8) = v70 + 3;
        *(_QWORD *)(a1 + 16) = &v70[v69];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *v44 = v63;
        v44[1] = 0;
        v43 = v44 + 3;
        v44[2] = v64;
      }
      *(_QWORD *)(a1 + 8) = v43;
      v57 = *((_QWORD *)a3 + 3);
      v58 = *((_QWORD *)a3 + 4) & 0x1FLL;
      v59 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v43 >= v59)
        goto LABEL_105;
LABEL_91:
      *v43 = v57;
      v43[1] = 0;
      v60 = v43 + 3;
      v43[2] = v58;
      v61 = v85;
      v62 = v86;
      goto LABEL_120;
    }
    goto LABEL_90;
  }
  v45 = *v27;
  v46 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *v27) >> 4);
  v47 = v46 + 1;
  if (v46 + 1 > 0x555555555555555)
LABEL_130:
    sub_22316E078();
  v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (_QWORD)v45) >> 4);
  if (2 * v48 > v47)
    v47 = 2 * v48;
  if (v48 >= 0x2AAAAAAAAAAAAAALL)
    v49 = 0x555555555555555;
  else
    v49 = v47;
  if (v49)
  {
    if (v49 > 0x555555555555555)
      goto LABEL_129;
    v50 = (char *)operator new(48 * v49);
  }
  else
  {
    v50 = 0;
  }
  v51 = &v50[48 * v46];
  *(_OWORD *)v51 = 0u;
  *((_OWORD *)v51 + 1) = 0u;
  v52 = &v50[48 * v49];
  *((_QWORD *)v51 + 4) = 0;
  *((_QWORD *)v51 + 5) = v28;
  v42 = v51 + 48;
  if (v31 == v45)
  {
    *v27 = v51;
    v27[1] = v42;
    v56 = v31;
    v27[2] = v52;
  }
  else
  {
    v53 = v31;
    do
    {
      v54 = *((_OWORD *)v53 - 3);
      v55 = *((_OWORD *)v53 - 1);
      *((_OWORD *)v51 - 2) = *((_OWORD *)v53 - 2);
      *((_OWORD *)v51 - 1) = v55;
      *((_OWORD *)v51 - 3) = v54;
      v51 -= 48;
      v53 -= 48;
    }
    while (v53 != v45);
    v56 = *v27;
    *v27 = v51;
    v27[1] = v42;
    v27[2] = v52;
    if (!v56)
    {
      v27[1] = v42;
      v44 = *(_QWORD **)a1;
      v43 = *(_QWORD **)(a1 + 8);
      if (*(_QWORD **)a1 == v43)
        goto LABEL_94;
      goto LABEL_90;
    }
  }
  operator delete(v56);
  v27[1] = v42;
  v44 = *(_QWORD **)a1;
  v43 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v43)
    goto LABEL_94;
LABEL_90:
  v57 = *((_QWORD *)a3 + 3);
  v58 = *((_QWORD *)a3 + 4) & 0x1FLL;
  v59 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v43 < v59)
    goto LABEL_91;
LABEL_105:
  v71 = *(_QWORD **)a1;
  v72 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v43 - *(_QWORD *)a1) >> 3);
  v73 = v72 + 1;
  if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - (_QWORD)v71) >> 3);
  if (2 * v74 > v73)
    v73 = 2 * v74;
  if (v74 >= 0x555555555555555)
    v75 = 0xAAAAAAAAAAAAAAALL;
  else
    v75 = v73;
  if (!v75)
  {
    v76 = 0;
    goto LABEL_115;
  }
  if (v75 > 0xAAAAAAAAAAAAAAALL)
LABEL_129:
    sub_223174E94();
  v76 = (char *)operator new(24 * v75);
LABEL_115:
  v77 = &v76[24 * v72];
  v78 = &v76[24 * v75];
  *(_QWORD *)v77 = v57;
  *((_QWORD *)v77 + 1) = 0;
  *((_QWORD *)v77 + 2) = v58;
  v60 = v77 + 24;
  if (v43 == v71)
  {
    v61 = v85;
    v62 = v86;
    *(_QWORD *)a1 = v77;
    *(_QWORD *)(a1 + 8) = v60;
    *(_QWORD *)(a1 + 16) = v78;
    if (!v43)
      goto LABEL_120;
    goto LABEL_119;
  }
  v62 = v86;
  do
  {
    v79 = *(_OWORD *)(v43 - 3);
    *((_QWORD *)v77 - 1) = *(v43 - 1);
    *(_OWORD *)(v77 - 24) = v79;
    v77 -= 24;
    v43 -= 3;
  }
  while (v43 != v71);
  v43 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v77;
  *(_QWORD *)(a1 + 8) = v60;
  *(_QWORD *)(a1 + 16) = v78;
  v61 = v85;
  if (v43)
LABEL_119:
    operator delete(v43);
LABEL_120:
  *(_QWORD *)(a1 + 8) = v60;
  v80 = *(_QWORD **)a1;
  *((_QWORD *)v31 - 6) = *(_QWORD *)a1 + 24 * v62;
  v81 = v31 - 48;
  *((_QWORD *)v42 - 6) = &v80[3 * v61];
  v82 = v42 - 48;
  *((_QWORD *)v81 + 2) = v82;
  *((_QWORD *)v82 + 2) = v81;
  return v81;
}

void sub_223F0E660(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  int v19;
  char *v20;
  _BOOL4 v21;
  BOOL v22;
  _BOOL4 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  BOOL v28;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_22316E078();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_223174E94();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
  v14 = *a1;
  v15 = v6 - *a1;
  if (v15 >= 17)
  {
    v16 = (((unint64_t)v15 >> 4) - 2) >> 1;
    v17 = &v14[16 * v16];
    v18 = *((_DWORD *)v6 - 4);
    v19 = *((_DWORD *)v6 - 3);
    v20 = v6 - 16;
    v21 = v19 < *((_DWORD *)v17 + 1);
    v22 = v18 == *(_DWORD *)v17;
    v23 = v18 < *(_DWORD *)v17;
    if (v22)
      v23 = v21;
    if (v23)
    {
      v24 = *(_OWORD *)v20;
      v25 = *(_QWORD *)v20;
      v26 = HIDWORD(*(_QWORD *)v20);
      do
      {
        v27 = v20;
        v20 = v17;
        *(_QWORD *)v27 = *(_QWORD *)v17;
        *((_QWORD *)v27 + 1) = *((_QWORD *)v17 + 1);
        if (!v16)
          break;
        v16 = (v16 - 1) >> 1;
        v17 = &v14[16 * v16];
        v28 = *(_DWORD *)v17 > (int)v25;
        if (*(_DWORD *)v17 == (_DWORD)v25)
          v28 = *((_DWORD *)v17 + 1) > (int)v26;
      }
      while (v28);
      *(_OWORD *)v20 = v24;
    }
  }
}

uint64_t *sub_223F0E7F8(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || (v11 = (uint64_t)(a1 + 3), sub_223F0EA2C((uint64_t)(a1 + 3), a5, (uint64_t)(a2 + 4))))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v13 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v13;
        return v13 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v12 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v13 = v12;
        v12 = (_QWORD *)v12[1];
      }
      while (v12);
    }
    else
    {
      v17 = a2;
      do
      {
        v13 = (_QWORD *)v17[2];
        v18 = *v13 == (_QWORD)v17;
        v17 = v13;
      }
      while (v18);
    }
    if (sub_223F0EA2C((uint64_t)(a1 + 3), (uint64_t)(v13 + 4), a5))
      goto LABEL_16;
    v19 = (_QWORD *)*v9;
    if (*v9)
    {
      do
      {
        while (1)
        {
          v20 = v19;
          v21 = (uint64_t)(v19 + 4);
          if (!sub_223F0EA2C((uint64_t)(a1 + 3), a5, (uint64_t)(v19 + 4)))
            break;
          v19 = (_QWORD *)*v20;
          v9 = v20;
          if (!*v20)
            goto LABEL_41;
        }
        if (!sub_223F0EA2C((uint64_t)(a1 + 3), v21, a5))
          break;
        v9 = v20 + 1;
        v19 = (_QWORD *)v20[1];
      }
      while (v19);
      goto LABEL_41;
    }
LABEL_19:
    v20 = v9;
LABEL_41:
    *a3 = v20;
    return v9;
  }
  if (!sub_223F0EA2C((uint64_t)(a1 + 3), (uint64_t)(a2 + 4), a5))
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  a4 = a2 + 1;
  v14 = a2[1];
  if (v14)
  {
    v15 = (_QWORD *)a2[1];
    do
    {
      v16 = v15;
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  else
  {
    v22 = a2;
    do
    {
      v16 = (_QWORD *)v22[2];
      v18 = *v16 == (_QWORD)v22;
      v22 = v16;
    }
    while (!v18);
  }
  if (v16 != v9)
  {
    if (!sub_223F0EA2C(v11, a5, (uint64_t)(v16 + 4)))
    {
      v23 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          while (1)
          {
            v20 = v23;
            v24 = (uint64_t)(v23 + 4);
            if (!sub_223F0EA2C(v11, a5, (uint64_t)(v23 + 4)))
              break;
            v23 = (_QWORD *)*v20;
            v9 = v20;
            if (!*v20)
              goto LABEL_41;
          }
          if (!sub_223F0EA2C(v11, v24, a5))
            break;
          v9 = v20 + 1;
          v23 = (_QWORD *)v20[1];
        }
        while (v23);
        goto LABEL_41;
      }
      goto LABEL_19;
    }
    v14 = *a4;
  }
  if (v14)
  {
    *a3 = v16;
    return v16;
  }
  else
  {
    *a3 = a2;
  }
  return a4;
}

uint64_t sub_223F0EA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  int *v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  _BOOL4 v38;
  _BOOL4 v39;
  unint64_t v40;
  BOOL v41;
  int v43;
  BOOL v44;
  int *v45;
  int v46;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 56);
  if (v3 <= v4)
    v5 = 40;
  else
    v5 = 0;
  if (v3 <= v4)
    v6 = a2 + 40;
  else
    v6 = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 56);
  if (v7 <= v8)
    v9 = 40;
  else
    v9 = 0;
  if (v7 <= v8)
    v10 = a3 + 40;
  else
    v10 = a3;
  v11 = *(_DWORD *)(a2 + v5);
  v12 = *(_DWORD *)(v6 + 8);
  v13 = *(_DWORD *)(v6 + 4);
  v14 = *(_DWORD *)(v6 + 12);
  v15 = v13 < v14;
  if (v11 != v12)
    v15 = v11 < v12;
  if (v15)
    v16 = v11;
  else
    v16 = *(_DWORD *)(v6 + 8);
  if (v15)
    v17 = (int *)v6;
  else
    v17 = (int *)(v6 + 8);
  v18 = *(_DWORD *)(v10 + 8);
  v19 = *(_DWORD *)(a3 + v9);
  v20 = *(_DWORD *)(v10 + 4);
  v21 = *(_DWORD *)(v10 + 12);
  v22 = v20 < v21;
  if (v19 != v18)
    v22 = v19 < v18;
  if (v22)
    v23 = v19;
  else
    v23 = *(_DWORD *)(v10 + 8);
  if (v16 < v23)
  {
    if (v22)
      v24 = (int *)v10;
    else
      v24 = (int *)(v10 + 8);
    return sub_223F0ED54(a1 + 1, (int *)a2, (int *)(a2 + 40), v24);
  }
  if (v16 > v23)
    return sub_223F0ED54(a1 + 1, (int *)a3, (int *)(a3 + 40), v17) ^ 1;
  v26 = *(_QWORD *)(v6 + 16);
  v27 = *(_QWORD *)(v10 + 16);
  if (v26 == v27)
  {
    if (v3 == v4)
    {
      LODWORD(v28) = *(_DWORD *)(a2 + 4);
      LODWORD(v29) = 0;
      v30 = v7 > v8;
      if (v7 == v8)
      {
LABEL_36:
        v31 = *(unsigned int *)(a3 + 4);
LABEL_63:
        v38 = (int)v29 < SHIDWORD(v31);
        v41 = (_DWORD)v28 == (_DWORD)v31;
        v39 = (int)v28 < (int)v31;
        if (v41)
          return v38;
        else
          return v39;
      }
    }
    else if (v3 <= v4)
    {
      v28 = *(unsigned int *)(a2 + 44) | 0xFFFFFFFF00000000;
      v29 = HIDWORD(v28);
      v30 = v7 > v8;
      if (v7 == v8)
        goto LABEL_36;
    }
    else
    {
      v28 = *(unsigned int *)(a2 + 12) | 0x100000000;
      v29 = HIDWORD(v28);
      v30 = v7 > v8;
      if (v7 == v8)
        goto LABEL_36;
    }
    if (v30)
      v31 = *(unsigned int *)(a3 + 12) | 0x100000000;
    else
      v31 = *(unsigned int *)(a3 + 44) | 0xFFFFFFFF00000000;
    goto LABEL_63;
  }
  if (v26 >= v27)
  {
    if (v3 == v4)
    {
      v33 = *(_DWORD *)(a2 + 4);
      v34 = v7 > v8;
      if (v7 != v8)
        goto LABEL_45;
    }
    else
    {
      v37 = (int *)(a2 + 44);
      if (v3 > v4)
        v37 = (int *)(a2 + 12);
      v33 = *v37;
      v34 = v7 > v8;
      if (v7 != v8)
      {
LABEL_45:
        if (!v34)
        {
          v40 = *(unsigned int *)(a3 + 44) | 0xFFFFFFFF00000000;
          goto LABEL_69;
        }
        if (*(_DWORD *)a3 == *(_DWORD *)(a3 + 8))
        {
          v35 = *(unsigned int *)(a3 + 4);
          if ((_DWORD)v35 != *(_DWORD *)(a3 + 12))
            goto LABEL_68;
        }
        else
        {
          LODWORD(v35) = *(_DWORD *)(a3 + 12);
        }
        v35 = v35;
LABEL_68:
        v40 = v35 | 0x100000000;
LABEL_69:
        if (v33 != (_DWORD)v40)
          return v33 < (int)v40;
        v41 = v19 == v18 && v20 == v21;
        return !v41 || SHIDWORD(v40) > 0;
      }
    }
    v40 = *(unsigned int *)(a3 + 4);
    goto LABEL_69;
  }
  if (v3 != v4)
  {
    if (v3 <= v4)
    {
      v32 = *(unsigned int *)(a2 + 44) | 0xFFFFFFFF00000000;
      goto LABEL_83;
    }
    if (*(_DWORD *)a2 == *(_DWORD *)(a2 + 8))
    {
      v36 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v36 != *(_DWORD *)(a2 + 12))
        goto LABEL_82;
    }
    else
    {
      LODWORD(v36) = *(_DWORD *)(a2 + 12);
    }
    v36 = v36;
LABEL_82:
    v32 = v36 | 0x100000000;
    goto LABEL_83;
  }
  v32 = *(unsigned int *)(a2 + 4);
LABEL_83:
  if (v7 == v8)
  {
    v43 = *(_DWORD *)(a3 + 4);
    v44 = v43 <= (int)v32;
    if (v43 != (_DWORD)v32)
      return !v44;
  }
  else
  {
    v45 = (int *)(a3 + 44);
    if (v7 > v8)
      v45 = (int *)(a3 + 12);
    v46 = *v45;
    v44 = v46 <= (int)v32;
    if (v46 != (_DWORD)v32)
      return !v44;
  }
  return v11 == v12 && v13 == v14 && v32 < 0;
}

uint64_t sub_223F0ED54(uint64_t a1, int *a2, int *a3, int *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v14;
  int64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;

  v8 = *a2;
  if (*a2 != a2[2] || (v9 = a2[1], (_DWORD)v9 != a2[3]))
  {
    if (*a3 != a3[2] || a3[1] != a3[3])
      return sub_223F0F01C(a1, a2, (uint64_t)a3, a4);
    v14 = sub_223F0F138(a1, a3, a2, a4, 1);
    if (!v14)
    {
      v15.i64[0] = (int)*(_QWORD *)a3;
      v15.i64[1] = (int)HIDWORD(*(_QWORD *)a3);
      v16 = vcvtq_f64_s64(v15);
      v15.i64[0] = (int)*(_QWORD *)a4;
      v15.i64[1] = (int)HIDWORD(*(_QWORD *)a4);
      v17 = vsubq_f64(v16, vcvtq_f64_s64(v15));
      v18.f64[1] = v17.f64[1];
      v18.f64[0] = 2.0;
      v19 = vmulq_f64(v17, v17);
      v20 = vmulq_f64(v17, v18);
      return vdivq_f64(vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1)), v20).f64[0] >= sub_223F0F360(a1, a2, a4);
    }
    return v14 == -1;
  }
  v10 = *a3;
  if (*a3 != a3[2] || (v11 = a3[1], (_DWORD)v11 != a3[3]))
  {
    v14 = sub_223F0F138(a1, a2, a3, a4, 0);
    if (!v14)
    {
      v21.i64[0] = (int)*(_QWORD *)a2;
      v21.i64[1] = (int)HIDWORD(*(_QWORD *)a2);
      v22 = vcvtq_f64_s64(v21);
      v21.i64[0] = (int)*(_QWORD *)a4;
      v21.i64[1] = (int)HIDWORD(*(_QWORD *)a4);
      v23 = vsubq_f64(v22, vcvtq_f64_s64(v21));
      v24.f64[1] = v23.f64[1];
      v24.f64[0] = 2.0;
      v25 = vmulq_f64(v23, v23);
      v26 = vmulq_f64(v23, v24);
      return vdivq_f64(vaddq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1)), v26).f64[0] < sub_223F0F360(a1, a3, a4);
    }
    return v14 == -1;
  }
  if (v8 > v10)
  {
    v12 = a4[1];
    if (v12 <= (int)v9)
      return 0;
LABEL_19:
    v27 = *a4;
    return (((double)(int)v9 - (double)v12) * ((double)(int)v9 - (double)v12)
          + ((double)v8 - (double)v27) * ((double)v8 - (double)v27))
         / ((double)v8 - (double)v27 + (double)v8 - (double)v27) < (((double)(int)v11 - (double)v12)
                                                                  * ((double)(int)v11 - (double)v12)
                                                                  + ((double)v10 - (double)v27)
                                                                  * ((double)v10 - (double)v27))
                                                                 / ((double)v10 - (double)v27 + (double)v10
                                                                                              - (double)v27);
  }
  if (v8 >= v10)
    return v11 + v9 < 2 * a4[1];
  v12 = a4[1];
  if (v12 < (int)v11)
    goto LABEL_19;
  return 1;
}

BOOL sub_223F0F01C(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  double v24;

  if (*((_QWORD *)a2 + 2) == *(_QWORD *)(a3 + 16))
  {
    v5 = a2[2];
    v6 = a2[3];
    v7 = *a2 - v5;
    v8 = v5 - *a4;
    v9 = a2[1] - v6;
    v10 = v6 - a4[1];
    if (v7 >= 0)
      v11 = v7;
    else
      v11 = -v7;
    if (v9 >= 0)
      v12 = v9;
    else
      v12 = -v9;
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = -v8;
    if (v10 >= 0)
      v14 = v10;
    else
      v14 = -v10;
    v15 = v14 * v11;
    v16 = v12 * v13;
    v17 = v10 ^ v7;
    v18 = (double)(v15 - v16);
    v19 = v9 ^ v8;
    v20 = (double)(v16 - v15);
    if (v15 < v16)
      v18 = -v20;
    if (v19 < 0)
      v18 = (double)(v15 + v16);
    if (v15 > v16)
      v20 = -(double)(v15 - v16);
    if (v19 >= 0)
      v20 = -(double)(v15 + v16);
    if (v17 < 0)
      v18 = v20;
    return v18 > 0.0;
  }
  else
  {
    v24 = sub_223F0F360(a1, a2, a4);
    return v24 < sub_223F0F360(a1, (int *)a3, a4);
  }
}

uint64_t sub_223F0F138(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  int v48;
  unsigned int v49;

  v5 = *a3;
  v6 = a3[1];
  v8 = a3[2];
  v7 = a3[3];
  v10 = *a4;
  v9 = a4[1];
  v11 = v8 - v10;
  v12 = v6 - v7;
  v13 = v7 - v9;
  if (v5 - v8 >= 0)
    v14 = v5 - v8;
  else
    v14 = v8 - v5;
  if (v12 >= 0)
    v15 = v6 - v7;
  else
    v15 = v7 - v6;
  if (v11 >= 0)
    v16 = v8 - v10;
  else
    v16 = v10 - v8;
  if (v13 >= 0)
    v17 = v7 - v9;
  else
    v17 = v9 - v7;
  v18 = v17 * v14;
  v19 = v15 * v16;
  v20 = v12 ^ v11;
  if ((v13 ^ (v5 - v8)) < 0)
  {
    if (v20 < 0)
    {
      v22 = v18 > v19;
      v21 = v18 - v19;
      if (!v22)
      {
LABEL_26:
        if ((a3[8] & 0x20) != 0)
          return 1;
        else
          return 0xFFFFFFFFLL;
      }
    }
    else
    {
      v21 = v18 + v19;
    }
  }
  else
  {
    if (v20 < 0 || v18 >= v19)
      goto LABEL_26;
    v21 = v19 - v18;
  }
  if (!v21)
    goto LABEL_26;
  v23 = a2[1];
  if ((_DWORD)v5 == (_DWORD)v8)
  {
    if ((int)v9 >= (int)v23 || a5)
    {
      if ((int)v9 > (int)v23)
        v38 = a5;
      else
        v38 = 0;
      return (v38 << 31 >> 31);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v25 = *a2;
    v26 = v7 - v6;
    v27 = v10 - v25;
    v28 = v9 - v23;
    if (v8 - v5 >= 0)
      v29 = v8 - v5;
    else
      v29 = v5 - v8;
    if (v26 >= 0)
      v30 = v7 - v6;
    else
      v30 = v6 - v7;
    if (v27 >= 0)
      v31 = v10 - v25;
    else
      v31 = v25 - v10;
    if (v28 >= 0)
      v32 = v9 - v23;
    else
      v32 = v23 - v9;
    v33 = v32 * v29;
    v34 = v31 * v30;
    v35 = v27 ^ v26;
    v36 = (double)(v33 - v34);
    v37 = (double)(v34 - v33);
    if (v33 < v34)
      v36 = -v37;
    if (v35 < 0)
      v36 = (double)(v33 + v34);
    if (v33 > v34)
      v37 = -(double)(v33 - v34);
    if (v35 >= 0)
      v37 = -(double)(v33 + v34);
    if ((v28 ^ (v8 - v5)) < 0)
      v36 = v37;
    if (v36 <= 0.0)
    {
      v39 = (double)(int)v10 - (double)(int)v25;
      v40 = (double)(int)v9 - (double)(int)v23;
      v41 = (v40 - v39) * (((double)(int)v8 - (double)(int)v5) * (v39 + v40));
      v42 = ((double)(int)v7 - (double)(int)v6 + (double)(int)v7 - (double)(int)v6) * v39 * v40;
      v43 = v41;
      v44 = v42;
      if (v41 >= 0.0)
        *(_QWORD *)&v43 = 0x8000000000000000 - *(_QWORD *)&v41;
      if (v42 >= 0.0)
        *(_QWORD *)&v44 = 0x8000000000000000 - *(_QWORD *)&v42;
      if (*(_QWORD *)&v43 - *(_QWORD *)&v44 <= 4uLL)
        v45 = 0;
      else
        v45 = -1;
      if (*(_QWORD *)&v43 > *(_QWORD *)&v44)
        v46 = v45;
      else
        v46 = *(_QWORD *)&v44 - *(_QWORD *)&v43 > 4uLL;
      v47 = v46;
      v48 = v46 ^ a5;
      if (a5)
        v49 = -1;
      else
        v49 = 1;
      if ((v47 & v48) != 0)
        return v49;
      else
        return 0;
    }
    else if ((a3[8] & 0x20) != 0)
    {
      return a5 ^ 1u;
    }
    else
    {
      return (a5 << 31 >> 31);
    }
  }
}

double sub_223F0F360(uint64_t a1, int *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;

  v3 = *a2;
  v4 = a2[2];
  if ((_DWORD)v3 == (_DWORD)v4)
    return ((double)(int)v3 - (double)*a3) * 0.5;
  v6 = a2[3];
  v7 = a2[1];
  v8 = (double)(int)v6 - (double)(int)v7;
  v9 = ((double)(int)v4 - (double)(int)v3) * ((double)(int)v4 - (double)(int)v3);
  v10 = sqrt(v9 + v8 * v8);
  v11 = v8 < 0.0;
  v12 = (v10 - v8) / v9;
  v13 = 1.0 / (v8 + v10);
  if (!v11)
    v12 = v13;
  v14 = v4 - v3;
  v15 = v6 - v7;
  v16 = *a3 - v3;
  v17 = a3[1] - v7;
  if (v14 >= 0)
    v18 = v14;
  else
    v18 = -v14;
  if (v15 >= 0)
    v19 = v15;
  else
    v19 = -v15;
  if (v16 >= 0)
    v20 = v16;
  else
    v20 = -v16;
  if (v17 >= 0)
    v21 = v17;
  else
    v21 = -v17;
  v22 = v21 * v18;
  v23 = v20 * v19;
  v24 = v17 ^ v14;
  v25 = v16 ^ v15;
  v26 = (double)(v22 - v23);
  v27 = (double)(v23 - v22);
  if (v22 < v23)
    v26 = -v27;
  if (v25 < 0)
    v26 = (double)(v22 + v23);
  if (v22 > v23)
    v27 = -(double)(v22 - v23);
  if (v25 >= 0)
    v27 = -(double)(v22 + v23);
  if (v24 < 0)
    v26 = v27;
  return v12 * v26;
}

_QWORD *sub_223F0F474(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _BOOL4 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;

  v2 = a2 - (_QWORD)result;
  if (a2 - (uint64_t)result >= 17)
  {
    v3 = 0;
    v4 = v2 >> 4;
    v5 = *result;
    v6 = result[1];
    v7 = (unint64_t)((v2 >> 4) - 2) >> 1;
    v8 = result;
    do
    {
      v9 = (uint64_t)&v8[2 * v3 + 2];
      v10 = (2 * v3) | 1;
      v11 = 2 * v3 + 2;
      if (v11 < v4)
      {
        v12 = *(_DWORD *)(v9 + 16);
        v13 = v12 == *(_DWORD *)v9;
        v14 = v12 < *(_DWORD *)v9;
        if (v13)
          v14 = *(_DWORD *)(v9 + 20) < *(_DWORD *)(v9 + 4);
        if (v14)
        {
          v9 += 16;
          v10 = v11;
        }
      }
      *v8 = *(_QWORD *)v9;
      v8[1] = *(_QWORD *)(v9 + 8);
      v8 = (_QWORD *)v9;
      v3 = v10;
    }
    while (v10 <= v7);
    if (v9 == a2 - 16)
    {
      *(_QWORD *)v9 = v5;
      *(_QWORD *)(v9 + 8) = v6;
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)(a2 - 16);
      *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 16) = v5;
      *(_QWORD *)(a2 - 8) = v6;
      v15 = v9 - (_QWORD)result + 16;
      if (v15 >= 17)
      {
        v16 = (((unint64_t)v15 >> 4) - 2) >> 1;
        v17 = &result[2 * v16];
        v18 = *(_DWORD *)v9 < *(_DWORD *)v17;
        if (*(_DWORD *)v9 == *(_DWORD *)v17)
          v18 = *(_DWORD *)(v9 + 4) < *((_DWORD *)v17 + 1);
        if (v18)
        {
          v19 = *(_OWORD *)v9;
          v20 = *(_QWORD *)v9;
          v21 = HIDWORD(*(_QWORD *)v9);
          do
          {
            v22 = (_QWORD *)v9;
            v9 = (uint64_t)v17;
            *v22 = *v17;
            v22[1] = v17[1];
            if (!v16)
              break;
            v16 = (v16 - 1) >> 1;
            v17 = &result[2 * v16];
            v23 = *(_DWORD *)v17 > (int)v20;
            if (*(_DWORD *)v17 == (_DWORD)v20)
              v23 = *((_DWORD *)v17 + 1) > (int)v21;
          }
          while (v23);
          *(_OWORD *)v9 = v19;
        }
      }
    }
  }
  return result;
}

uint64_t sub_223F0F5D4(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int *v6;
  int *v7;
  int *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  double v63;
  unint64_t v64;
  double v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  double v70;
  unint64_t v71;
  double v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  double v77;
  unint64_t v78;
  double v79;
  BOOL v80;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  v10 = *a2;
  if ((_DWORD)v10 != a2[2] || (v11 = a2[1], (_DWORD)v11 != a2[3]))
  {
    v31 = *a3;
    if ((_DWORD)v31 != a3[2] || (v32 = a3[1], (_DWORD)v32 != a3[3]))
    {
      if (*a4 != a4[2] || a4[1] != a4[3])
      {
        v39 = *((_QWORD *)a3 + 2);
        if (*((_QWORD *)a2 + 2) == v39 || v39 == *((_QWORD *)a4 + 2))
          return 0;
        sub_223F1309C(a1 + 4, a2, a3, a4, a5);
        if (*v8 != v8[2])
          goto LABEL_82;
        goto LABEL_81;
      }
      if (*((_QWORD *)a2 + 2) == *((_QWORD *)a3 + 2))
        return 0;
      v37 = a1 + 4;
      a2 = a4;
      a3 = v8;
      a4 = v7;
      v38 = 3;
      goto LABEL_80;
    }
    if (*(_QWORD *)a4 == *((_QWORD *)a4 + 1))
    {
      result = sub_223F10384(a1 + 2, a3, a4, a2, 1);
      if (!(_DWORD)result)
        return result;
      v33 = a1 + 4;
      a2 = v7;
      v34 = v6;
      v35 = v8;
      v36 = 1;
      goto LABEL_53;
    }
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)a4 + 2))
      return 0;
    v42 = *((_QWORD *)a4 + 4);
    if ((a2[8] & 0x20) != 0)
    {
      if ((v42 & 0x20) == 0)
      {
LABEL_79:
        v37 = a1 + 4;
        a2 = a3;
        a3 = v8;
        v38 = 2;
        goto LABEL_80;
      }
    }
    else if ((v42 & 0x20) != 0)
    {
      return 0;
    }
    v43 = v10 - v31;
    v44 = v31 - a4[2];
    v45 = a2[1] - v32;
    v46 = v32 - a4[3];
    if (v10 - v31 >= 0)
      v47 = v10 - v31;
    else
      v47 = v31 - v10;
    if (v45 >= 0)
      v48 = v45;
    else
      v48 = -v45;
    if (v44 >= 0)
      v49 = v44;
    else
      v49 = -v44;
    if (v46 >= 0)
      v50 = v46;
    else
      v50 = -v46;
    v51 = v50 * v47;
    v52 = v48 * v49;
    v53 = v46 ^ v43;
    v54 = v45 ^ v44;
    if (v53 < 0)
    {
      if (v54 < 0)
      {
        v56 = v51 > v52;
        v55 = v51 - v52;
        if (!v56)
          return 0;
      }
      else
      {
        v55 = v51 + v52;
      }
    }
    else
    {
      result = 0;
      if (v54 < 0 || v51 >= v52)
        return result;
      v55 = v52 - v51;
    }
    if (!v55)
      return 0;
    goto LABEL_79;
  }
  v12 = *a3;
  v13 = a3[2];
  if ((_DWORD)v12 != v13 || (v14 = a3[1], (_DWORD)v14 != a3[3]))
  {
    if (*a4 == a4[2])
    {
      v41 = a4[1];
      if (v41 == a4[3])
      {
        if ((_DWORD)v12 == (_DWORD)v10 && v13 == *a4 && a3[1] == (_DWORD)v11 && a3[3] == v41)
          return 0;
        v33 = a1 + 4;
        v34 = a4;
        v35 = v7;
        v36 = 2;
LABEL_53:
        sub_223F1052C(v33, a2, v34, v35, v36, a5);
        if (*v8 != v8[2])
          goto LABEL_82;
        goto LABEL_81;
      }
    }
    if (*((_QWORD *)a3 + 2) == *((_QWORD *)a4 + 2))
      return 0;
    v37 = a1 + 4;
    v38 = 1;
LABEL_80:
    sub_223F1131C(v37, a2, a3, a4, v38, a5);
    if (*v8 != v8[2])
    {
LABEL_82:
      if (*v7 != v7[2])
        goto LABEL_147;
      v58 = v7[1];
      if (v58 == v7[3])
        goto LABEL_147;
      v67 = *((_QWORD *)v7 + 4);
      if ((v67 & 0x20) != 0)
        v68 = v7[3];
      else
        v68 = v7[1];
      v69 = *(_QWORD *)(a5 + 8);
      if (v69 >= 0)
        v69 = 0x8000000000000000 - v69;
      if (v68 >= 0)
        *(_QWORD *)&v70 = 0x8000000000000000 - COERCE__INT64((double)v68);
      else
        v70 = (double)v68;
      v80 = (unint64_t)v69 >= *(_QWORD *)&v70;
      v71 = v69 - *(_QWORD *)&v70;
      if (v71 == 0 || !v80 || v71 <= 0x40)
      {
        if ((v67 & 0x20) == 0)
          v58 = v7[3];
        if (v58 >= 0)
          *(_QWORD *)&v72 = 0x8000000000000000 - COERCE__INT64((double)v58);
        else
          v72 = (double)v58;
        v80 = *(_QWORD *)&v72 >= (unint64_t)v69;
        v73 = *(_QWORD *)&v72 - v69;
        if (!v80 || v73 <= 0x40)
        {
LABEL_147:
          if (*v6 != v6[2])
            return 1;
          v59 = v6[1];
          if (v59 == v6[3])
            return 1;
          v74 = *((_QWORD *)v6 + 4);
          if ((v74 & 0x20) != 0)
            v75 = v6[3];
          else
            v75 = v6[1];
          v76 = *(_QWORD *)(a5 + 8);
          if (v76 >= 0)
            v76 = 0x8000000000000000 - v76;
          if (v75 >= 0)
            *(_QWORD *)&v77 = 0x8000000000000000 - COERCE__INT64((double)v75);
          else
            v77 = (double)v75;
          v80 = (unint64_t)v76 >= *(_QWORD *)&v77;
          v78 = v76 - *(_QWORD *)&v77;
          if (v78 == 0 || !v80 || v78 <= 0x40)
          {
            if ((v74 & 0x20) == 0)
              v59 = v6[3];
            if (v59 >= 0)
              *(_QWORD *)&v79 = 0x8000000000000000 - COERCE__INT64((double)v59);
            else
              v79 = (double)v59;
            v80 = (unint64_t)(*(_QWORD *)&v79 - v76) > 0x40 && *(_QWORD *)&v79 >= (unint64_t)v76;
            if (!v80)
              return 1;
          }
        }
      }
      return 0;
    }
LABEL_81:
    v57 = v8[1];
    if (v57 != v8[3])
    {
      v60 = *((_QWORD *)v8 + 4);
      if ((v60 & 0x20) != 0)
        v61 = v8[3];
      else
        v61 = v8[1];
      v62 = *(_QWORD *)(a5 + 8);
      if (v62 >= 0)
        v62 = 0x8000000000000000 - v62;
      if (v61 >= 0)
        *(_QWORD *)&v63 = 0x8000000000000000 - COERCE__INT64((double)v61);
      else
        v63 = (double)v61;
      v80 = (unint64_t)v62 >= *(_QWORD *)&v63;
      v64 = v62 - *(_QWORD *)&v63;
      if (v64 != 0 && v80 && v64 > 0x40)
        return 0;
      if ((v60 & 0x20) == 0)
        v57 = v8[3];
      if (v57 >= 0)
        *(_QWORD *)&v65 = 0x8000000000000000 - COERCE__INT64((double)v57);
      else
        v65 = (double)v57;
      v80 = *(_QWORD *)&v65 >= (unint64_t)v62;
      v66 = *(_QWORD *)&v65 - v62;
      if (v80 && v66 > 0x40)
        return 0;
    }
    goto LABEL_82;
  }
  v15 = *a4;
  if ((_DWORD)v15 != a4[2] || (v16 = a4[1], (_DWORD)v16 != a4[3]))
  {
    result = sub_223F10384(a1 + 2, a2, a3, a4, 3);
    if (!(_DWORD)result)
      return result;
    v33 = a1 + 4;
    a2 = v8;
    v34 = v7;
    v35 = v6;
    v36 = 3;
    goto LABEL_53;
  }
  v18 = v10 - v12;
  v17 = v10 - v12 < 0;
  v19 = v12 - v15;
  v20 = v11 - v14;
  v21 = v14 - v16;
  if (v17)
    v22 = -v18;
  else
    v22 = v18;
  if (v20 >= 0)
    v23 = v20;
  else
    v23 = -v20;
  if (v19 >= 0)
    v24 = v19;
  else
    v24 = -v19;
  if (v21 >= 0)
    v25 = v21;
  else
    v25 = -v21;
  v26 = v25 * v22;
  v27 = v24 * v23;
  v28 = v19 ^ v20;
  if ((v21 ^ v18) < 0)
  {
    if (v28 < 0)
    {
      v56 = v26 > v27;
      v30 = v26 - v27;
      if (!v56)
        return 0;
    }
    else
    {
      v30 = v26 + v27;
    }
LABEL_152:
    if (!v30)
      return 0;
    sub_223F0FB70(a1 + 4, a2, a3, a4, a5);
    if (*v8 != v8[2])
      goto LABEL_82;
    goto LABEL_81;
  }
  result = 0;
  if ((v28 & 0x8000000000000000) == 0 && v26 < v27)
  {
    v30 = v27 - v26;
    goto LABEL_152;
  }
  return result;
}

void sub_223F0FB70(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  double v51;
  double v52;
  double v53;
  BOOL v54;
  double v55;
  double v56;
  BOOL v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  BOOL v63;
  double v64;
  double v65;
  BOOL v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  BOOL v82;
  double v83;
  BOOL v84;
  double v85;
  double v86;
  BOOL v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  BOOL v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  _BOOL4 v101;
  _BOOL4 v102;
  double v103;
  BOOL v104;
  _BOOL4 v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  _BOOL4 v112;
  double v113;
  double v114;

  v5 = *a2;
  v6 = a2[1];
  v7 = (double)(int)v5;
  v8 = *a3;
  v9 = a3[1];
  v10 = (double)(int)v8;
  v11 = (double)(int)v5 - (double)(int)v8;
  v12 = *a4;
  v13 = a4[1];
  v14 = (double)(int)v12;
  v15 = (double)(int)v8 - (double)(int)v12;
  v16 = (double)(int)v6;
  v17 = (double)(int)v9;
  v18 = (double)(int)v6 - (double)(int)v9;
  v19 = (double)(int)v13;
  v20 = (double)(int)v9 - (double)(int)v13;
  v21 = v5 - v8;
  v22 = v8 - v12;
  v23 = v6 - v9;
  v24 = v9 - v13;
  if (v21 >= 0)
    v25 = v21;
  else
    v25 = -v21;
  if (v22 >= 0)
    v26 = v22;
  else
    v26 = -v22;
  if (v23 >= 0)
    v27 = v23;
  else
    v27 = -v23;
  if (v24 >= 0)
    v28 = v24;
  else
    v28 = -v24;
  v29 = v28 * v25;
  v30 = v27 * v26;
  v31 = v24 ^ v21;
  v32 = v23 ^ v22;
  v33 = (double)(v29 - v30);
  v34 = (double)(v30 - v29);
  if (v29 < v30)
    v33 = -v34;
  if (v32 < 0)
    v33 = (double)(v29 + v30);
  if (v29 > v30)
    v34 = -(double)(v29 - v30);
  if (v32 >= 0)
    v34 = -(double)(v29 + v30);
  if (v31 < 0)
    v33 = v34;
  v35 = v10 + v14;
  v36 = v16 + v17;
  v37 = v11 * (v7 + v10);
  v38 = v37 * v20;
  if (v37 * v20 >= 0.0)
  {
    v40 = 0.0;
    v39 = v38 + 0.0;
    v44 = v18 * v36;
    v45 = v18 * v36 * v20;
    v46 = 3.0;
    if (v45 >= 0.0)
    {
      v47 = v45 + v39;
      v43 = 0.0;
      if (v39 < 0.0 && (v45 > 0.0 || v39 > 0.0))
      {
        v58 = (v39 * 3.0 - (v45 + v45)) / v47;
        if (v58 < 0.0)
          v58 = -v58;
LABEL_47:
        v46 = v58 + 1.0;
        v48 = v40;
        v39 = v47;
        v51 = v17 + v19;
        v52 = v15 * v35;
        v53 = v52 * v18;
        v54 = v52 * v18 <= 0.0;
        if (v52 * v18 < 0.0)
          goto LABEL_48;
        goto LABEL_38;
      }
LABEL_45:
      v58 = 2.0;
      if (v46 >= 2.0)
        v58 = v46;
      goto LABEL_47;
    }
    v43 = 0.0;
  }
  else
  {
    v39 = 0.0;
    v40 = 0.0 - v38;
    v41 = 2.0;
    if (v38 > 0.0)
    {
      v42 = (v38 + v38 + 0.0) / v40;
      v41 = -v42;
      if (v42 >= 0.0)
        v41 = v42;
    }
    v43 = v41 + 1.0;
    v44 = v18 * v36;
    v45 = v18 * v36 * v20;
    v46 = 0.0;
    if (v45 >= 0.0)
    {
      v47 = v45 + 0.0;
      goto LABEL_45;
    }
  }
  v48 = v40 - v45;
  if (v45 > 0.0 || v40 < 0.0)
  {
    v43 = (v45 + v45 + v40 * v43) / v48;
    v49 = -v43;
    v50 = v43 < 0.0;
  }
  else
  {
    v49 = 2.0;
    v50 = v43 < 2.0;
  }
  if (v50)
    v43 = v49;
  v43 = v43 + 1.0;
  v51 = v17 + v19;
  v52 = v15 * v35;
  v53 = v52 * v18;
  v54 = v52 * v18 <= 0.0;
  if (v52 * v18 < 0.0)
  {
LABEL_48:
    v59 = v39 - v53;
    if (v54 && v39 >= 0.0)
    {
      v60 = 2.0;
      if (v46 >= 2.0)
        v60 = v46;
    }
    else
    {
      v60 = (v53 + v53 + v46 * v39) / v59;
      if (v60 < 0.0)
        v60 = -v60;
    }
    v46 = v60 + 1.0;
    v55 = v48;
    v39 = v59;
    v61 = v20 * v51;
    v62 = v18 * (v20 * v51);
    v63 = v62 <= 0.0;
    if (v62 >= 0.0)
      goto LABEL_57;
    goto LABEL_65;
  }
LABEL_38:
  v55 = v53 + v48;
  if (v48 < 0.0 && (v53 > 0.0 || v48 > 0.0))
  {
    v43 = (v43 * v48 - (v53 + v53)) / v55;
    v56 = -v43;
    v57 = v43 < 0.0;
  }
  else
  {
    v56 = 2.0;
    v57 = v43 < 2.0;
  }
  if (v57)
    v43 = v56;
  v43 = v43 + 1.0;
  v61 = v20 * v51;
  v62 = v18 * (v20 * v51);
  v63 = v62 <= 0.0;
  if (v62 >= 0.0)
  {
LABEL_57:
    v64 = v62 + v55;
    if (v55 < 0.0 && (v62 > 0.0 || v55 > 0.0))
    {
      v43 = (v43 * v55 - (v62 + v62)) / v64;
      v65 = -v43;
      v66 = v43 < 0.0;
    }
    else
    {
      v65 = 2.0;
      v66 = v43 < 2.0;
    }
    if (v66)
      v43 = v65;
    v43 = v43 + 1.0;
    v69 = v11 * v52;
    if (v69 < 0.0)
      goto LABEL_86;
LABEL_74:
    v70 = 0.0;
    v71 = v69 + 0.0;
    v72 = v11 * v61;
    v73 = 3.0;
    if (v72 < 0.0)
    {
      v74 = 0.0;
      goto LABEL_90;
    }
    v75 = v71 + v72;
    v74 = 0.0;
    if (v71 < 0.0 && (v71 > 0.0 || v72 > 0.0))
    {
      v76 = (v71 * 3.0 - (v72 + v72)) / v75;
      v77 = -v76;
      if (v76 >= 0.0)
        v77 = v76;
      v74 = 0.0;
LABEL_104:
      v73 = v77 + 1.0;
      v80 = v70;
      v71 = v75;
      v83 = v37 * v15;
      v84 = v37 * v15 <= 0.0;
      if (v37 * v15 >= 0.0)
        goto LABEL_97;
LABEL_105:
      if (v84 && v71 >= 0.0)
      {
        v88 = 2.0;
        if (v73 >= 2.0)
          v88 = v73;
      }
      else
      {
        v88 = (v83 + v83 + v73 * v71) / (v71 - v83);
        if (v88 < 0.0)
          v88 = -v88;
      }
      v73 = v88 + 1.0;
      v85 = v80;
      v71 = v71 - v83;
      v89 = 0.5;
      v90 = v7 - v14;
      v91 = v16 - v19;
      v92 = v15 * v44;
      v93 = v15 * v44 <= 0.0;
      if (v15 * v44 < 0.0)
        goto LABEL_124;
      goto LABEL_114;
    }
LABEL_102:
    v77 = 2.0;
    if (v73 >= 2.0)
      v77 = v73;
    goto LABEL_104;
  }
LABEL_65:
  v67 = v39 - v62;
  if (v63 && v39 >= 0.0)
  {
    v68 = 2.0;
    if (v46 >= 2.0)
      v68 = v46;
  }
  else
  {
    v68 = (v62 + v62 + v46 * v39) / v67;
    if (v68 < 0.0)
      v68 = -v68;
  }
  v46 = v68 + 1.0;
  v64 = v55;
  v39 = v67;
  v69 = v11 * v52;
  if (v69 >= 0.0)
    goto LABEL_74;
LABEL_86:
  v71 = 0.0;
  v70 = 0.0 - v69;
  v78 = 2.0;
  if (v69 > 0.0)
  {
    v79 = (v69 + v69 + 0.0) / v70;
    v78 = -v79;
    if (v79 >= 0.0)
      v78 = v79;
  }
  v74 = v78 + 1.0;
  v72 = v11 * v61;
  v73 = 0.0;
  if (v72 >= 0.0)
  {
    v75 = v72 + 0.0;
    goto LABEL_102;
  }
LABEL_90:
  v80 = v70 - v72;
  if (v72 > 0.0 || v70 < 0.0)
  {
    v74 = (v72 + v72 + v70 * v74) / v80;
    v81 = -v74;
    v82 = v74 < 0.0;
  }
  else
  {
    v81 = 2.0;
    v82 = v74 < 2.0;
  }
  if (v82)
    v74 = v81;
  v74 = v74 + 1.0;
  v83 = v37 * v15;
  v84 = v37 * v15 <= 0.0;
  if (v37 * v15 < 0.0)
    goto LABEL_105;
LABEL_97:
  v85 = v83 + v80;
  if (v80 < 0.0 && (v83 > 0.0 || v80 > 0.0))
  {
    v74 = (v74 * v80 - (v83 + v83)) / v85;
    v86 = -v74;
    v87 = v74 < 0.0;
  }
  else
  {
    v86 = 2.0;
    v87 = v74 < 2.0;
  }
  if (v87)
    v74 = v86;
  v74 = v74 + 1.0;
  v89 = 0.5;
  v90 = v7 - v14;
  v91 = v16 - v19;
  v92 = v15 * v44;
  v93 = v15 * v44 <= 0.0;
  if (v15 * v44 < 0.0)
  {
LABEL_124:
    if (v93 && v71 >= 0.0)
    {
      v96 = 2.0;
      if (v73 >= 2.0)
        v96 = v73;
    }
    else
    {
      v96 = (v92 + v92 + v73 * v71) / (v71 - v92);
      if (v96 < 0.0)
        v96 = -v96;
    }
    v73 = v96 + 1.0;
    v94 = v85;
    v71 = v71 - v92;
    goto LABEL_136;
  }
LABEL_114:
  v94 = v92 + v85;
  if (v85 < 0.0 && (v92 > 0.0 || v85 > 0.0))
  {
    v95 = (v74 * v85 - (v92 + v92)) / v94;
    if (v95 < 0.0)
      v95 = -v95;
  }
  else
  {
    v95 = 2.0;
    if (v74 >= 2.0)
      v95 = v74;
  }
  v74 = v95 + 1.0;
LABEL_136:
  v97 = v89 / v33;
  v98 = sqrt((v90 * v90 + v91 * v91) * ((v11 * v11 + v18 * v18) * (v15 * v15 + v20 * v20)));
  v99 = v98 + v64;
  if (v64 < 0.0 && (v98 > 0.0 || v64 > 0.0))
  {
    v100 = (v43 * v64 + v98 * -5.0) / v99;
    if (v100 < 0.0)
      v100 = -v100;
  }
  else
  {
    v100 = 5.0;
    if (v43 >= 5.0)
      v100 = v43;
  }
  v101 = v39 < 0.0;
  v102 = v64 > 0.0 || v39 < 0.0;
  v103 = v71 - v94;
  v104 = v39 > 0.0 || v64 < 0.0;
  v105 = v71 < 0.0;
  if (v94 > 0.0)
    v105 = 1;
  v106 = v39 - v99;
  if (v99 > 0.0)
    v101 = 1;
  *(double *)a5 = v97 * (v39 - v64);
  *(double *)(a5 + 8) = v97 * v103;
  *(double *)(a5 + 16) = v97 * v106;
  *(_BYTE *)(a5 + 24) = 1;
  if (v102 && v104)
  {
    v107 = (v43 * v64 + v46 * v39) / (v39 - v64);
    if (v107 < 0.0)
      v107 = -v107;
    v108 = 1.0;
    v109 = 1.0;
    if (!v105)
      goto LABEL_166;
  }
  else
  {
    if (v46 >= v43)
      v107 = v46;
    else
      v107 = v43;
    v108 = 1.0;
    v109 = 1.0;
    if (!v105)
      goto LABEL_166;
  }
  if (v71 <= 0.0 && v94 >= 0.0)
  {
LABEL_166:
    if (v73 >= v74)
      v110 = v73;
    else
      v110 = v74;
    goto LABEL_169;
  }
  v110 = (v74 * v94 + v73 * v71) / v103;
  if (v110 < 0.0)
    v110 = -v110;
LABEL_169:
  v111 = v100 + v108;
  v112 = v39 > 0.0;
  if (v99 < 0.0)
    v112 = 1;
  if (v101 && v112)
  {
    v113 = (v46 * v39 + v99 * v111) / v106;
    if (v113 < 0.0)
      v113 = -v113;
  }
  else if (v46 >= v111)
  {
    v113 = v46;
  }
  else
  {
    v113 = v111;
  }
  v114 = v113 + 1.0;
  if (v107 + v109 > 64.0 || v110 + 1.0 > 64.0 || v114 > 64.0)
    sub_223F143E8();
}

uint64_t sub_223F10384(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;

  if (a5 == 2)
  {
    if (*a4 == *a2 && a4[1] == a2[1] && a4[2] == *a3)
      return a4[3] != a3[1];
    return 1;
  }
  v6 = *a2;
  v7 = *a3;
  v8 = a3[1];
  v9 = v6 - v7;
  v10 = v7 - *a4;
  v11 = a2[1] - v8;
  v12 = v8 - a4[1];
  if (v6 - v7 >= 0)
    v13 = v6 - v7;
  else
    v13 = v7 - v6;
  if (v11 >= 0)
    v14 = a2[1] - v8;
  else
    v14 = v8 - a2[1];
  if (v10 >= 0)
    v15 = v7 - *a4;
  else
    v15 = *a4 - v7;
  if (v12 >= 0)
    v16 = v8 - a4[1];
  else
    v16 = a4[1] - v8;
  v17 = v16 * v13;
  v18 = v14 * v15;
  v19 = v12 ^ v9;
  v20 = v11 ^ v10;
  v21 = (double)(v17 - v18);
  v22 = (double)(v18 - v17);
  if (v17 < v18)
    v21 = -v22;
  if (v20 < 0)
    v21 = (double)(v17 + v18);
  if (v17 > v18)
    v22 = -(double)(v17 - v18);
  if (v20 >= 0)
    v22 = -(double)(v17 + v18);
  if (v19 < 0)
    v21 = v22;
  v23 = v7 - a4[2];
  v24 = v8 - a4[3];
  if (v23 >= 0)
    v25 = v7 - a4[2];
  else
    v25 = a4[2] - v7;
  if (v24 >= 0)
    v26 = v24;
  else
    v26 = -v24;
  v27 = v26 * v13;
  v28 = v25 * v14;
  v29 = v24 ^ v9;
  v30 = v23 ^ v11;
  v31 = (double)(v27 - v28);
  v32 = (double)(v28 - v27);
  if (v27 < v28)
    v31 = -v32;
  if (v30 < 0)
    v31 = (double)(v27 + v28);
  if (v27 > v28)
    v32 = -(double)(v27 - v28);
  if (v30 >= 0)
    v32 = -(double)(v27 + v28);
  if (v29 < 0)
    v31 = v32;
  if (a5 != 3)
  {
    if (a5 == 1 && (int)v6 >= (int)v7)
      return v21 < 0.0;
    goto LABEL_50;
  }
  if ((int)v7 < (int)v6)
  {
LABEL_50:
    if (v21 < 0.0)
      return 1;
  }
  return v31 < 0.0;
}

void sub_223F1052C(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  BOOL v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  BOOL v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  BOOL v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  BOOL v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  BOOL v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  BOOL v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  _BOOL4 v196;
  _BOOL4 v197;
  BOOL v198;
  BOOL v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;

  v6 = *a4;
  v7 = a4[1];
  v8 = a4[2];
  v9 = a4[3];
  v11 = *a2;
  v10 = a2[1];
  v12 = *a3;
  v13 = a3[1];
  v14 = v9 - v7;
  v15 = v6 - v8;
  v16 = v12 - v11;
  v17 = v13 - v10;
  if (v9 - v7 >= 0)
    v18 = v9 - v7;
  else
    v18 = v7 - v9;
  if (v15 >= 0)
    v19 = v6 - v8;
  else
    v19 = v8 - v6;
  if (v16 >= 0)
    v20 = v12 - v11;
  else
    v20 = v11 - v12;
  if (v17 >= 0)
    v21 = v13 - v10;
  else
    v21 = v10 - v13;
  v22 = v21 * v18;
  v23 = v20 * v19;
  v24 = v16 ^ v15;
  if ((v17 ^ v14) < 0)
  {
    v25 = -(double)(v23 + v22);
    v26 = (double)(v23 - v22);
    v79 = v22 > v23;
    v27 = v22 - v23;
    if (v79)
      v26 = -(double)v27;
    if (v24 < 0)
      v25 = v26;
  }
  else if (v24 < 0)
  {
    v25 = (double)(v23 + v22);
  }
  else if (v22 >= v23)
  {
    v25 = (double)(v22 - v23);
  }
  else
  {
    v25 = -(double)(v23 - v22);
  }
  v28 = v7 - v9;
  v29 = v9 - v10;
  v30 = v8 - v11;
  if (v7 - v9 >= 0)
    v31 = v7 - v9;
  else
    v31 = v9 - v7;
  if (v29 >= 0)
    v32 = v9 - v10;
  else
    v32 = v10 - v9;
  if (v30 >= 0)
    v33 = v8 - v11;
  else
    v33 = v11 - v8;
  v34 = v33 * v31;
  v35 = v32 * v19;
  v36 = v29 ^ v15;
  if ((v30 ^ v28) < 0)
  {
    v37 = -(double)(v34 + v35);
    v38 = (double)(v35 - v34);
    v79 = v34 > v35;
    v39 = v34 - v35;
    if (v79)
      v38 = -(double)v39;
    if (v36 < 0)
      v37 = v38;
  }
  else if (v36 < 0)
  {
    v37 = (double)(v34 + v35);
  }
  else if (v34 >= v35)
  {
    v37 = (double)(v34 - v35);
  }
  else
  {
    v37 = -(double)(v35 - v34);
  }
  v40 = v8 - v12;
  if (v9 - v13 >= 0)
    v41 = v9 - v13;
  else
    v41 = v13 - v9;
  if (v40 >= 0)
    v42 = v8 - v12;
  else
    v42 = v12 - v8;
  v43 = v42 * v31;
  v44 = v41 * v19;
  v45 = (v9 - v13) ^ v15;
  if ((v40 ^ v28) < 0)
  {
    if ((v45 & 0x8000000000000000) == 0)
    {
      v47 = v43 + v44;
      goto LABEL_60;
    }
    v47 = v43 - v44;
    if (v43 > v44)
      goto LABEL_60;
    v46 = v44 - v43;
  }
  else if (v45 < 0)
  {
    v46 = v43 + v44;
  }
  else
  {
    v46 = v43 - v44;
    if (v43 < v44)
    {
      v47 = v44 - v43;
LABEL_60:
      v48 = -(double)v47;
      goto LABEL_63;
    }
  }
  v48 = (double)v46;
LABEL_63:
  v49 = v11 - v12;
  v50 = v8 - v6;
  if (v10 - v13 >= 0)
    v51 = v10 - v13;
  else
    v51 = v13 - v10;
  if (v49 >= 0)
    v52 = v11 - v12;
  else
    v52 = v12 - v11;
  if (v50 >= 0)
    v53 = v8 - v6;
  else
    v53 = v6 - v8;
  v54 = v51 * v53;
  v55 = v52 * v18;
  v56 = v49 ^ v14;
  if (((v10 - v13) ^ v50) < 0)
  {
    if (v56 < 0)
    {
      v58 = v54 - v55;
      if (v54 <= v55)
      {
        v57 = v55 - v54;
        goto LABEL_120;
      }
    }
    else
    {
      v58 = v55 + v54;
    }
LABEL_80:
    v59 = -(double)v58;
    v60 = (double)(int)v13;
    v61 = (double)(int)v10;
    v62 = (double)(int)v11;
    v63 = (double)(int)v12;
    if (v59 != 0.0)
      goto LABEL_81;
LABEL_121:
    v80 = v25 / (v37 * 8.0);
    if (v80 >= 0.0)
    {
      v69 = 0.0;
      v81 = v80 + 0.0;
      v84 = v37 / (v25 + v25);
      v75 = 5.0;
      v65 = 0.0;
      if (v84 < 0.0)
      {
LABEL_128:
        v76 = v81 - v84;
        if (v84 <= 0.0 && v81 >= 0.0)
        {
          v85 = 4.0;
          v86 = v75 < 4.0;
          goto LABEL_146;
        }
        v97 = v84 * 4.0 + v81 * v75;
LABEL_145:
        v75 = v97 / v76;
        v85 = -v75;
        v86 = v75 < 0.0;
LABEL_146:
        if (v86)
          v75 = v85;
LABEL_148:
        v68 = v75 + 1.0;
        v77 = v60 - v61;
        v78 = (v62 + v63) * 0.5;
        v79 = v78 <= 0.0;
        if (v78 < 0.0)
          goto LABEL_149;
        goto LABEL_141;
      }
      v87 = v84 + 0.0;
      v68 = 5.0;
    }
    else
    {
      v81 = 0.0;
      v69 = 0.0 - v80;
      v82 = 4.0;
      if (v80 > 0.0)
      {
        v83 = (v80 * 4.0 + 0.0) / v69;
        v82 = -v83;
        if (v83 >= 0.0)
          v82 = v83;
      }
      v65 = v82 + 1.0;
      v84 = v37 / (v25 + v25);
      if (v84 < 0.0)
      {
        v75 = 0.0;
        goto LABEL_128;
      }
      v87 = v84 + v69;
      v68 = 0.0;
      if (v69 < 0.0 && (v84 > 0.0 || v69 > 0.0))
      {
        v88 = (v69 * v65 + v84 * -4.0) / v87;
        if (v88 < 0.0)
          v88 = -v88;
        goto LABEL_140;
      }
    }
    v88 = 4.0;
    if (v65 >= 4.0)
      v88 = v65;
LABEL_140:
    v65 = v88 + 1.0;
    v69 = v87;
    v76 = v81;
    v77 = v60 - v61;
    v78 = (v62 + v63) * 0.5;
    v79 = v78 <= 0.0;
    if (v78 < 0.0)
      goto LABEL_149;
    goto LABEL_141;
  }
  if (v56 < 0)
  {
    v57 = v55 + v54;
  }
  else
  {
    v57 = v54 - v55;
    if (v54 < v55)
    {
      v58 = v55 - v54;
      goto LABEL_80;
    }
  }
LABEL_120:
  v59 = (double)v57;
  v60 = (double)(int)v13;
  v61 = (double)(int)v10;
  v62 = (double)(int)v11;
  v63 = (double)(int)v12;
  if ((double)v57 == 0.0)
    goto LABEL_121;
LABEL_81:
  v64 = sqrt(v48 * (v37 * (v25 * v25 + v59 * v59))) / (v59 * v59);
  if ((_DWORD)a5 == 2)
  {
    if (v64 < 0.0)
    {
      v65 = 0.0;
      v66 = 0.0 - v64;
      v67 = 9.0;
      if (v64 > 0.0)
      {
        v67 = (v64 * 9.0 + 0.0) / v66;
        if (v67 < 0.0)
          v67 = -v67;
      }
      v68 = v67 + 1.0;
      v69 = 0.0;
      v70 = v37 + v48;
      v71 = 1.0;
      if (v37 < 0.0)
        goto LABEL_98;
LABEL_97:
      if (v48 >= 0.0)
        goto LABEL_103;
      goto LABEL_98;
    }
    v68 = 0.0;
    v69 = v64 + 0.0;
    v65 = 10.0;
    v66 = 0.0;
    v70 = v37 + v48;
    v71 = 1.0;
    if (v37 >= 0.0)
      goto LABEL_97;
  }
  else
  {
    if (v64 < 0.0)
    {
      v68 = 0.0;
      v69 = 0.0 - v64;
      v72 = 9.0;
      if (v64 > 0.0)
      {
        v72 = (v64 * 9.0 + 0.0) / v69;
        if (v72 < 0.0)
          v72 = -v72;
      }
      v65 = v72 + 1.0;
      v66 = 0.0;
      v70 = v37 + v48;
      v71 = 1.0;
      if (v37 < 0.0)
        goto LABEL_98;
      goto LABEL_97;
    }
    v65 = 0.0;
    v66 = v64 + 0.0;
    v68 = 10.0;
    v69 = 0.0;
    v70 = v37 + v48;
    v71 = 1.0;
    if (v37 >= 0.0)
      goto LABEL_97;
  }
LABEL_98:
  if (v37 > 0.0 || v48 > 0.0)
  {
    v73 = (v37 - v48) / v70;
    if (v73 < 0.0)
      v71 = -v73;
    else
      v71 = v73;
  }
LABEL_103:
  v74 = v25 * v70 / (v59 * (v59 + v59));
  v75 = v71 + 1.0 + 1.0 + 1.0 + 4.0 + 1.0;
  if (v74 >= 0.0)
  {
    v76 = v74 + v66;
    if (v66 >= 0.0 || v74 <= 0.0 && v66 <= 0.0)
    {
      if (v68 >= v75)
        v75 = v68;
      goto LABEL_148;
    }
    v97 = v68 * v66 - v74 * v75;
    goto LABEL_145;
  }
  if (v74 > 0.0 || v69 < 0.0)
  {
    v75 = (v65 * v69 + v74 * v75) / (v69 - v74);
    if (v75 < 0.0)
      v75 = -v75;
  }
  else if (v65 >= v75)
  {
    v75 = v65;
  }
  v65 = v75 + 1.0;
  v69 = v69 - v74;
  v76 = v66;
  v77 = v60 - v61;
  v78 = (v62 + v63) * 0.5;
  v79 = v78 <= 0.0;
  if (v78 < 0.0)
  {
LABEL_149:
    v91 = 0.0;
    v92 = 0.0 - v78;
    v98 = 0.0;
    if (!v79)
    {
      v99 = (v78 * 0.0 + 0.0) / v92;
      v98 = -v99;
      if (v99 >= 0.0)
        v98 = v99;
    }
    v89 = v98 + 1.0;
    v90 = 0.0;
    if (v77 < 0.0)
      goto LABEL_153;
LABEL_142:
    v93 = v77 * v76;
    v94 = v77 * v69;
    v95 = v68;
    v96 = v65;
    goto LABEL_154;
  }
LABEL_141:
  v89 = 0.0;
  v90 = v78 + 0.0;
  v91 = 1.0;
  v92 = 0.0;
  if (v77 >= 0.0)
    goto LABEL_142;
LABEL_153:
  v93 = -(v77 * v69);
  v94 = -(v77 * v76);
  v95 = v65;
  v96 = v68;
LABEL_154:
  v100 = v96 + 0.0;
  v101 = v95 + 0.0 + 1.0;
  v102 = v90 + v93;
  if ((v90 < 0.0 || v93 < 0.0) && (v90 > 0.0 || v93 > 0.0))
  {
    v106 = (v91 * v90 - v93 * v101) / v102;
    v103 = -v106;
    if (v106 >= 0.0)
      v103 = v106;
    v104 = v100 + 1.0;
    v105 = v92 + v94;
    if (v92 < 0.0)
      goto LABEL_167;
  }
  else
  {
    if (v91 >= v101)
      v103 = v91;
    else
      v103 = v101;
    v104 = v100 + 1.0;
    v105 = v92 + v94;
    if (v92 < 0.0)
      goto LABEL_167;
  }
  if (v94 >= 0.0)
  {
LABEL_169:
    if (v89 >= v104)
      v107 = v89;
    else
      v107 = v104;
    goto LABEL_174;
  }
LABEL_167:
  if (v92 <= 0.0 && v94 <= 0.0)
    goto LABEL_169;
  v107 = (v89 * v92 - v94 * v104) / v105;
  if (v107 < 0.0)
    v107 = -v107;
LABEL_174:
  v108 = v62 - v63;
  v109 = (v60 + v61) * 0.5;
  if (v109 >= 0.0)
  {
    v114 = 0.0;
    v115 = v109 + 0.0;
    v111 = 0.0;
    v110 = 1.0;
    if (v108 >= 0.0)
    {
LABEL_179:
      v116 = v108 * v76;
      v117 = v108 * v69;
      v118 = v68;
      goto LABEL_182;
    }
  }
  else
  {
    v110 = 0.0;
    v111 = 0.0 - v109;
    v112 = 0.0;
    if (v109 > 0.0)
    {
      v113 = (v109 * 0.0 + 0.0) / v111;
      v112 = -v113;
      if (v113 >= 0.0)
        v112 = v113;
    }
    v114 = v112 + 1.0;
    v115 = 0.0;
    if (v108 >= 0.0)
      goto LABEL_179;
  }
  v116 = -(v108 * v69);
  v117 = -(v108 * v76);
  v118 = v65;
  v65 = v68;
LABEL_182:
  v119 = (double)(int)v7;
  v120 = v65 + 0.0;
  v121 = v118 + 0.0 + 1.0;
  v122 = v115 + v116;
  if ((v115 < 0.0 || v116 < 0.0) && (v115 > 0.0 || v116 > 0.0))
  {
    v110 = (v110 * v115 - v116 * v121) / v122;
    v121 = -v110;
    v123 = v110 < 0.0;
  }
  else
  {
    v123 = v110 < v121;
  }
  if (!v123)
    v121 = v110;
  v124 = (double)(int)v6;
  v125 = (double)(int)v9 - v119;
  v126 = v120 + 1.0;
  v127 = v111 + v117;
  if ((v111 < 0.0 || v117 < 0.0) && (v111 > 0.0 || v117 > 0.0))
  {
    v129 = (v114 * v111 - v117 * v126) / v127;
    if (v129 >= 0.0)
      v128 = v129;
    else
      v128 = -v129;
  }
  else if (v114 >= v126)
  {
    v128 = v114;
  }
  else
  {
    v128 = v126;
  }
  v130 = v124 - (double)(int)v8;
  v131 = v103 + 1.0;
  v132 = v107 + 1.0;
  v133 = v125 * v124;
  v134 = v125 * v124 <= 0.0;
  if (v125 * v124 >= 0.0)
  {
    v136 = 0.0;
    v135 = v133 + 0.0;
    v140 = v130 * v119;
    v141 = 2.0;
    if (v140 >= 0.0)
    {
      v142 = v135 + v140;
      v139 = 0.0;
      if (v135 < 0.0 && (v135 > 0.0 || v140 > 0.0))
      {
        v146 = (v135 + v135 - v140) / v142;
        if (v146 < 0.0)
          v146 = -v146;
        v139 = 0.0;
        goto LABEL_216;
      }
LABEL_214:
      v146 = 1.0;
      if (v141 >= 1.0)
        v146 = v141;
LABEL_216:
      v141 = v146 + 1.0;
      v135 = v142;
      v143 = v136;
      goto LABEL_221;
    }
    v139 = 0.0;
  }
  else
  {
    v135 = 0.0;
    v136 = 0.0 - v133;
    v137 = 1.0;
    if (!v134)
    {
      v138 = (v133 + 0.0) / v136;
      v137 = -v138;
      if (v138 >= 0.0)
        v137 = v138;
    }
    v139 = v137 + 1.0;
    v140 = v130 * v119;
    v141 = 0.0;
    if (v140 >= 0.0)
    {
      v142 = v140 + 0.0;
      goto LABEL_214;
    }
  }
  v143 = v136 - v140;
  if (v140 > 0.0 || v136 < 0.0)
  {
    v139 = (v140 + v136 * v139) / v143;
    v144 = -v139;
    v145 = v139 < 0.0;
  }
  else
  {
    v144 = 1.0;
    v145 = v139 < 1.0;
  }
  if (v145)
    v139 = v144;
  v139 = v139 + 1.0;
LABEL_221:
  v147 = -(v125 * v102);
  if (v125 >= 0.0)
    v148 = v125 * v102;
  else
    v148 = -(v125 * v105);
  if (v125 >= 0.0)
    v149 = v103 + 1.0;
  else
    v149 = v132;
  if (v125 < 0.0)
  {
    v150 = v103 + 1.0;
  }
  else
  {
    v147 = v125 * v105;
    v150 = v132;
  }
  v151 = v149 + 1.0;
  v152 = v143 + v148;
  if ((v143 < 0.0 || v148 < 0.0) && (v143 > 0.0 || v148 > 0.0))
  {
    v154 = (v139 * v143 - v148 * v151) / v152;
    v153 = -v154;
    if (v154 >= 0.0)
      v153 = v154;
  }
  else if (v139 >= v151)
  {
    v153 = v139;
  }
  else
  {
    v153 = v151;
  }
  v155 = v125 * v125;
  v156 = v121 + 1.0;
  v157 = v128 + 1.0;
  v158 = v150 + 1.0;
  v159 = v135 + v147;
  if ((v135 < 0.0 || v147 < 0.0) && (v135 > 0.0 || v147 > 0.0))
  {
    v160 = (v141 * v135 - v147 * v158) / v159;
    if (v160 < 0.0)
      v160 = -v160;
  }
  else if (v141 >= v158)
  {
    v160 = v141;
  }
  else
  {
    v160 = v150 + 1.0;
  }
  v161 = v155 + v130 * v130;
  v162 = v153 + 1.0;
  v163 = v130 < 0.0;
  v164 = -(v130 * v127);
  v165 = -(v130 * v122);
  v166 = v130 * v122;
  v167 = v130 * v127;
  if (v163)
  {
    v166 = v164;
    v168 = v157;
  }
  else
  {
    v168 = v156;
  }
  if (v163)
    v169 = v165;
  else
    v169 = v167;
  if (v163)
    v170 = v156;
  else
    v170 = v157;
  v171 = v168 + 1.0;
  v172 = v152 + v166;
  if ((v152 < 0.0 || v166 < 0.0) && (v152 > 0.0 || v166 > 0.0))
  {
    v173 = (v152 * v162 - v166 * v171) / v172;
    if (v173 < 0.0)
      v173 = -v173;
  }
  else if (v162 >= v171)
  {
    v173 = v162;
  }
  else
  {
    v173 = v171;
  }
  v174 = v160 + 1.0;
  v175 = v170 + 1.0;
  v176 = v159 + v169;
  v177 = sqrt(v161);
  if ((v159 < 0.0 || v169 < 0.0) && (v159 > 0.0 || v169 > 0.0))
  {
    v185 = (v159 * v174 - v169 * v175) / v176;
    v186 = -v185;
    if (v185 >= 0.0)
      v186 = v185;
    v179 = v173 + 1.0;
    v180 = 1.0;
    v181 = v186 + 1.0;
    v182 = 1.0 / v177;
    if (v172 < v176)
      goto LABEL_274;
  }
  else
  {
    if (v174 >= v175)
      v178 = v174;
    else
      v178 = v175;
    v179 = v173 + 1.0;
    v180 = 1.0;
    v181 = v178 + 1.0;
    v182 = 1.0 / v177;
    if (v172 < v176)
    {
LABEL_274:
      v183 = v179;
      v184 = v172;
      goto LABEL_279;
    }
  }
  v183 = v181;
  v184 = v176;
  v181 = v179;
  v176 = v172;
LABEL_279:
  v187 = v181 + 3.0;
  v188 = v183 + 3.0;
  v189 = v182 * v184;
  v190 = v187 + v180;
  v191 = v182 * v176;
  v192 = v102 + v191;
  if ((v102 < 0.0 || v191 < 0.0) && (v102 > 0.0 || v191 > 0.0))
  {
    v193 = (v102 * v131 - v191 * v190) / v192;
    if (v193 < 0.0)
      v193 = -v193;
    v194 = v188 + v180;
    v195 = v105 + v189;
    if (v105 < 0.0)
      goto LABEL_292;
  }
  else
  {
    if (v131 >= v190)
      v193 = v131;
    else
      v193 = v187 + v180;
    v194 = v188 + v180;
    v195 = v105 + v189;
    if (v105 < 0.0)
      goto LABEL_292;
  }
  if (v189 >= 0.0)
    goto LABEL_294;
LABEL_292:
  if (v105 <= 0.0 && v189 <= 0.0)
  {
LABEL_294:
    if (v132 >= v194)
      v194 = v132;
    goto LABEL_299;
  }
  v194 = (v105 * v132 - v189 * v194) / v195;
  if (v194 < 0.0)
    v194 = -v194;
LABEL_299:
  v196 = v127 > 0.0 || v122 < 0.0;
  v197 = v192 < 0.0;
  if (v195 > 0.0)
    v197 = 1;
  v198 = v102 > 0.0;
  if (v105 < 0.0)
    v198 = 1;
  v199 = v105 > 0.0 || v102 < 0.0;
  *(double *)a6 = v102 - v105;
  *(double *)(a6 + 8) = v122 - v127;
  *(double *)(a6 + 16) = v192 - v195;
  *(_BYTE *)(a6 + 24) = 1;
  if (v199 && v198)
  {
    v200 = (v102 * v131 + v105 * v132) / (v102 - v105);
    if (v200 < 0.0)
      v200 = -v200;
    v201 = 1.0;
    v202 = 1.0;
    v203 = 1.0;
    if (!v196)
      goto LABEL_322;
  }
  else
  {
    if (v131 >= v132)
      v200 = v131;
    else
      v200 = v132;
    v201 = 1.0;
    v202 = 1.0;
    v203 = 1.0;
    if (!v196)
      goto LABEL_322;
  }
  if (v122 <= 0.0 && v127 >= 0.0)
  {
LABEL_322:
    if (v156 >= v157)
      v204 = v156;
    else
      v204 = v157;
    goto LABEL_325;
  }
  v204 = (v122 * v156 + v127 * v157) / (v122 - v127);
  if (v204 < 0.0)
    v204 = -v204;
LABEL_325:
  v205 = v193 + v201;
  v206 = v194 + v202;
  v207 = v200 + v203;
  if (v197 && (v192 > 0.0 || v195 < 0.0))
  {
    v205 = (v192 * v205 + v195 * v206) / (v192 - v195);
    if (v205 < 0.0)
      v205 = -v205;
  }
  else if (v205 < v206)
  {
    v205 = v194 + v202;
  }
  v208 = v204 + 1.0;
  v209 = v205 + 1.0;
  if (v207 > 64.0 || v208 > 64.0 || v209 > 64.0)
    sub_223F163BC(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, v207 > 64.0, v208 > 64.0, v209 > 64.0);
}

void sub_223F1131C(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  BOOL v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  BOOL v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  BOOL v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  BOOL v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  double v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  double v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  double v198;
  double v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  BOOL v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  BOOL v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  BOOL v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  BOOL v316;
  double v317;
  double v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  BOOL v337;
  BOOL v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  BOOL v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  BOOL v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  double v382;
  double v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  double v435;
  double v436;

  v6 = *a3;
  v7 = a3[1];
  v8 = a3[2];
  v9 = a3[3];
  v10 = (double)(int)v6 - (double)(int)v8;
  v11 = (double)(int)v7 - (double)(int)v9;
  v12 = a4[2];
  v13 = a4[3];
  v15 = *a4;
  v14 = a4[1];
  v16 = v7 - v9;
  v17 = v6 - v8;
  v18 = v13 - v14;
  v19 = v12 - v15;
  if (v7 - v9 >= 0)
    v20 = v7 - v9;
  else
    v20 = v9 - v7;
  if (v17 >= 0)
    v21 = v6 - v8;
  else
    v21 = v8 - v6;
  if (v18 >= 0)
    v22 = v13 - v14;
  else
    v22 = v14 - v13;
  if (v19 >= 0)
    v23 = v12 - v15;
  else
    v23 = v15 - v12;
  v24 = v23 * v20;
  v25 = v22 * v21;
  v26 = v18 ^ v17;
  if ((v19 ^ v16) < 0)
  {
    if ((v26 & 0x8000000000000000) == 0)
    {
      v27 = v25 + v24;
      goto LABEL_19;
    }
    if (v24 > v25)
    {
      v28 = -(double)(v24 - v25);
      goto LABEL_26;
    }
    v29 = v25 - v24;
    goto LABEL_25;
  }
  if (v26 < 0)
  {
    v29 = v25 + v24;
LABEL_25:
    v28 = (double)v29;
    goto LABEL_26;
  }
  if (v24 < v25)
  {
    v27 = v25 - v24;
LABEL_19:
    v28 = -(double)v27;
    goto LABEL_26;
  }
  v28 = (double)(v24 - v25);
LABEL_26:
  v30 = (double)(int)v15;
  v31 = (double)(int)v14;
  v32 = v10 * v10 + v11 * v11;
  if (v28 != 0.0)
  {
    v40 = (double)(int)v12 - v30;
    v41 = (double)(int)v13 - v31;
    v42 = sqrt(v32);
    v43 = sqrt(v40 * v40 + v41 * v41);
    v44 = v14 - v13;
    if (v14 - v13 >= 0)
      v45 = v14 - v13;
    else
      v45 = v13 - v14;
    v46 = v23 * v21;
    v47 = v45 * v20;
    v48 = v44 ^ v16;
    if ((v19 ^ v17) < 0)
    {
      if (v48 < 0)
      {
        v50 = v46 - v47;
        if (v46 <= v47)
        {
          v95 = (double)(v47 - v46);
          v96 = v42 * v43;
          v97 = v42 * v43 + v95;
          v98 = 5.0;
          v99 = v42 * v43 <= 0.0;
          if (v42 * v43 >= 0.0)
            goto LABEL_277;
          goto LABEL_271;
        }
      }
      else
      {
        v50 = v47 + v46;
      }
    }
    else
    {
      if (v48 < 0)
      {
        v95 = (double)(v47 + v46);
        v96 = v42 * v43;
        v97 = v42 * v43 + v95;
        v98 = 5.0;
        v99 = v42 * v43 <= 0.0;
        if (v42 * v43 >= 0.0)
          goto LABEL_277;
        goto LABEL_271;
      }
      v49 = v46 - v47;
      if (v46 >= v47)
      {
        v95 = (double)v49;
        v96 = v42 * v43;
        v97 = v42 * v43 + (double)v49;
        v98 = 5.0;
        v99 = v42 * v43 <= 0.0;
        if (v42 * v43 >= 0.0)
          goto LABEL_277;
        goto LABEL_271;
      }
      v50 = v47 - v46;
    }
    v155 = (double)v50;
    if (v50)
    {
      v156 = v42 * v43 + v155;
      v157 = 5.0;
      if (v42 * v43 < 0.0)
      {
        v157 = (v42 * v43 * 5.0 - v155) / v156;
        if (v157 < 0.0)
          v157 = -v157;
      }
      v98 = v157 + 1.0 + 3.0;
      v97 = v28 * v28 / v156;
      goto LABEL_277;
    }
    v95 = -v155;
    v96 = v42 * v43;
    v97 = v42 * v43 - v155;
    v98 = 5.0;
    v99 = v42 * v43 <= 0.0;
    if (v42 * v43 >= 0.0)
      goto LABEL_277;
LABEL_271:
    if (!v99 || v95 > 0.0)
    {
      v170 = (v95 + v96 * -5.0) / v97;
      if (v170 >= 0.0)
        v98 = v170;
      else
        v98 = -v170;
    }
LABEL_277:
    v171 = *a2;
    v172 = a2[1];
    v173 = v6 - v171;
    if (v7 - v172 >= 0)
      v174 = v7 - v172;
    else
      v174 = v172 - v7;
    if (v173 >= 0)
      v175 = v6 - v171;
    else
      v175 = v171 - v6;
    v176 = v175 * v20;
    v177 = v174 * v21;
    v178 = (v7 - v172) ^ v17;
    if ((v173 ^ v16) < 0)
    {
      if ((v178 & 0x8000000000000000) == 0)
      {
        v179 = v176 + v177;
        goto LABEL_289;
      }
      if (v176 > v177)
      {
        v180 = -(double)(v176 - v177);
        goto LABEL_296;
      }
      v181 = v177 - v176;
    }
    else
    {
      if ((v178 & 0x8000000000000000) == 0)
      {
        if (v176 < v177)
        {
          v179 = v177 - v176;
LABEL_289:
          v180 = -(double)v179;
          goto LABEL_296;
        }
        v180 = (double)(v176 - v177);
LABEL_296:
        v182 = v13 - v172;
        if (v12 - v171 >= 0)
          v183 = v12 - v171;
        else
          v183 = v171 - v12;
        if (v182 >= 0)
          v184 = v13 - v172;
        else
          v184 = v172 - v13;
        v185 = v184 * v23;
        v186 = v183 * v22;
        v187 = (v12 - v171) ^ v18;
        if ((v182 ^ v19) < 0)
        {
          if ((v187 & 0x8000000000000000) == 0)
          {
            v188 = v186 + v185;
            goto LABEL_308;
          }
          if (v185 > v186)
          {
            v189 = -(double)(v185 - v186);
            goto LABEL_315;
          }
          v190 = v186 - v185;
        }
        else
        {
          if ((v187 & 0x8000000000000000) == 0)
          {
            if (v185 < v186)
            {
              v188 = v186 - v185;
LABEL_308:
              v189 = -(double)v188;
              goto LABEL_315;
            }
            v189 = (double)(v185 - v186);
LABEL_315:
            if (v7 >= 0)
              v191 = a3[1];
            else
              v191 = -v7;
            if (v6 >= 0)
              v192 = *a3;
            else
              v192 = -v6;
            v193 = v20 * v192;
            v194 = v191 * v21;
            v195 = v16 ^ v6;
            v196 = v17 ^ v7;
            if (v195 < 0)
            {
              v199 = (double)(v194 - v193);
              if (v193 > v194)
                v199 = -(double)(v193 - v194);
              if (v196 < 0)
                v198 = v199;
              else
                v198 = -(double)(v193 + v194);
            }
            else
            {
              if (v196 < 0)
              {
                v197 = v193 + v194;
              }
              else
              {
                v197 = v193 - v194;
                if (v193 < v194)
                {
                  v198 = -(double)(v194 - v193);
                  goto LABEL_332;
                }
              }
              v198 = (double)v197;
            }
LABEL_332:
            if (v12 >= 0)
              v200 = a4[2];
            else
              v200 = -v12;
            if (v13 >= 0)
              v201 = a4[3];
            else
              v201 = -v13;
            v202 = v201 * v23;
            v203 = v22 * v200;
            v204 = v18 ^ v12;
            if ((v19 ^ v13) < 0)
            {
              v206 = -(double)(v203 + v202);
              v209 = (double)(v203 - v202);
              if (v202 > v203)
                v209 = -(double)(v202 - v203);
              if (v204 < 0)
                v206 = v209;
              v207 = 1.0 / v28;
              v208 = 1.0 / v28 * (v40 * v198);
              if (v208 < 0.0)
                goto LABEL_360;
              goto LABEL_348;
            }
            if (v204 < 0)
            {
              v205 = v203 + v202;
            }
            else
            {
              v205 = v202 - v203;
              if (v202 < v203)
              {
                v206 = -(double)(v203 - v202);
                v207 = 1.0 / v28;
                v208 = 1.0 / v28 * (v40 * v198);
                if (v208 < 0.0)
                {
LABEL_360:
                  v211 = 0.0;
                  v210 = 0.0 - v208;
                  v220 = 5.0;
                  if (v208 > 0.0)
                  {
                    v221 = (v208 * 5.0 + 0.0) / v210;
                    v220 = -v221;
                    if (v221 >= 0.0)
                      v220 = v221;
                  }
                  v214 = v220 + 1.0;
                  v212 = v207 * (v10 * v206);
                  if (v212 < 0.0)
                  {
                    v213 = 0.0;
                    v215 = v210 - v212;
                    if (v212 > 0.0)
                      goto LABEL_367;
                    goto LABEL_365;
                  }
                  v217 = 0.0;
                  v216 = v212 + 0.0;
                  goto LABEL_375;
                }
LABEL_348:
                v210 = 0.0;
                v211 = v208 + 0.0;
                v212 = v207 * (v10 * v206);
                v213 = 6.0;
                if (v212 < 0.0)
                {
                  v214 = 0.0;
                  v215 = 0.0 - v212;
                  if (v212 > 0.0)
                    goto LABEL_367;
LABEL_365:
                  if (v210 >= 0.0)
                  {
                    v222 = 5.0;
                    v223 = v214 < 5.0;
                    goto LABEL_368;
                  }
LABEL_367:
                  v214 = (v212 * 5.0 + v210 * v214) / v215;
                  v222 = -v214;
                  v223 = v214 < 0.0;
LABEL_368:
                  if (v223)
                    v214 = v222;
                  v214 = v214 + 1.0;
                  v224 = v207 * (v11 * v206);
                  if (v224 >= 0.0)
                  {
LABEL_371:
                    v225 = 0.0;
                    v226 = v224 + 0.0;
                    v227 = v207 * (v41 * v198);
                    v228 = 6.0;
                    if (v227 < 0.0)
                    {
                      v229 = 0.0;
                      v230 = 0.0 - v227;
                      if (v227 > 0.0)
                        goto LABEL_385;
LABEL_383:
                      if (v225 >= 0.0)
                      {
                        v233 = 5.0;
                        v234 = v229 < 5.0;
LABEL_386:
                        if (v234)
                          v229 = v233;
                        v229 = v229 + 1.0;
LABEL_399:
                        v239 = v10 * v43;
                        v110 = v10 * v43 < 0.0;
                        v240 = v211;
                        v241 = v213;
                        v242 = v215;
                        v243 = v214;
                        if (v110)
                        {
                          v240 = -v215;
                          v242 = -v211;
                          v241 = v214;
                          v243 = v213;
                        }
                        v244 = v243 + 3.0 + 1.0;
                        v245 = v239 * v242;
                        v246 = v239 * v240 + 0.0;
                        v247 = v241 + 3.0 + 1.0;
                        if (v247 <= 0.0)
                          v248 = 1.0;
                        else
                          v248 = v247 + 1.0;
                        if (v244 <= 0.0)
                          v249 = 1.0;
                        else
                          v249 = v244 + 1.0;
                        v250 = v40 * v42;
                        v110 = v40 * v42 < 0.0;
                        v251 = v211;
                        v252 = v213;
                        v253 = v215;
                        v254 = v214;
                        if (v110)
                        {
                          v251 = -v215;
                          v253 = -v211;
                          v252 = v214;
                          v254 = v213;
                        }
                        v255 = v245 + 0.0;
                        v256 = v254 + 3.0;
                        v257 = v250 * v253;
                        v258 = v252 + 3.0 + 1.0;
                        v259 = v250 * v251;
                        v260 = v246 + v259;
                        if ((v246 < 0.0 || v259 < 0.0) && (v246 > 0.0 || v259 > 0.0))
                        {
                          v261 = (v246 * v248 - v259 * v258) / v260;
                          if (v261 < 0.0)
                            v261 = -v261;
                          v262 = v256 + 1.0;
                          v263 = v255 + v257;
                          if (v255 < 0.0)
                          {
LABEL_424:
                            if (v255 > 0.0 || v257 > 0.0)
                            {
                              v249 = (v255 * v249 - v257 * v262) / v263;
                              v262 = -v249;
                              v264 = v249 < 0.0;
LABEL_428:
                              if (v264)
                                v249 = v262;
                              v265 = v11 * v43;
                              v266 = v226;
                              v267 = v228;
                              v268 = v230;
                              v269 = v229;
                              if (v265 < 0.0)
                              {
                                v266 = -v230;
                                v268 = -v226;
                                v267 = v229;
                                v269 = v228;
                              }
                              v270 = v261 + 1.0;
                              v271 = v269 + 3.0;
                              v272 = v265 * v268;
                              v273 = v267 + 3.0 + 1.0;
                              v274 = v265 * v266;
                              v275 = v260 + v265 * v266;
                              if ((v260 < 0.0 || v274 < 0.0) && (v260 > 0.0 || v274 > 0.0))
                              {
                                v279 = (v260 * v270 - v274 * v273) / v275;
                                v270 = -v279;
                                if (v279 >= 0.0)
                                  v270 = v279;
                                v276 = v249 + 1.0;
                                v277 = v271 + 1.0;
                                v278 = v263 + v272;
                                if (v263 < 0.0)
                                {
LABEL_444:
                                  if (v263 > 0.0 || v272 > 0.0)
                                  {
                                    v281 = (v263 * v276 - v272 * v277) / v278;
                                    if (v281 >= 0.0)
                                      v280 = v281;
                                    else
                                      v280 = -v281;
LABEL_452:
                                    v282 = v42 * v41;
                                    v283 = v226;
                                    v284 = v228;
                                    v285 = v230;
                                    v286 = v229;
                                    if (v282 < 0.0)
                                    {
                                      v283 = -v230;
                                      v285 = -v226;
                                      v284 = v229;
                                      v286 = v228;
                                    }
                                    v287 = v98 + 1.0;
                                    v288 = v270 + 1.0;
                                    v289 = v286 + 3.0;
                                    v290 = v282 * v285;
                                    v291 = v284 + 3.0 + 1.0;
                                    v292 = v282 * v283;
                                    v293 = v275 + v282 * v283;
                                    if ((v275 < 0.0 || v292 < 0.0) && (v275 > 0.0 || v292 > 0.0))
                                    {
                                      v294 = (v275 * v288 - v292 * v291) / v293;
                                      if (v294 < 0.0)
                                        v294 = -v294;
                                      v295 = v287 + 1.0;
                                      v296 = v280 + 1.0;
                                      v297 = v289 + 1.0;
                                      v298 = v278 + v290;
                                      if (v278 < 0.0)
                                      {
LABEL_467:
                                        if (v278 > 0.0 || v290 > 0.0)
                                        {
                                          v300 = (v278 * v296 - v290 * v297) / v298;
                                          if (v300 >= 0.0)
                                            v299 = v300;
                                          else
                                            v299 = -v300;
                                          goto LABEL_475;
                                        }
LABEL_469:
                                        if (v296 >= v297)
                                          v299 = v296;
                                        else
                                          v299 = v297;
LABEL_475:
                                        v301 = -(int)v172;
                                        if (v301 >= 0)
                                          v302 = v301;
                                        else
                                          v302 = -v301;
                                        if (v171 >= 0)
                                          v303 = *a2;
                                        else
                                          v303 = -v171;
                                        v304 = v303 * v23;
                                        v305 = v302 * v22;
                                        v306 = v18 ^ v301;
                                        if ((v19 ^ v171) < 0)
                                        {
                                          if ((v306 & 0x8000000000000000) == 0)
                                          {
                                            v308 = v304 + v305;
                                            goto LABEL_489;
                                          }
                                          v308 = v304 - v305;
                                          if (v304 > v305)
                                            goto LABEL_489;
                                          v307 = v305 - v304;
                                        }
                                        else if (v306 < 0)
                                        {
                                          v307 = v304 + v305;
                                        }
                                        else
                                        {
                                          v307 = v304 - v305;
                                          if (v304 < v305)
                                          {
                                            v308 = v305 - v304;
LABEL_489:
                                            v309 = -(double)v308;
                                            goto LABEL_492;
                                          }
                                        }
                                        v309 = (double)v307;
LABEL_492:
                                        v310 = v294 + 1.0;
                                        v311 = v299 + 1.0;
                                        v312 = v42 * v309;
                                        if (v42 * v309 >= 0.0)
                                        {
                                          v314 = v298 + v312;
                                          if (v298 < 0.0 && (v298 > 0.0 || v312 > 0.0))
                                          {
                                            v311 = (v298 * v311 + v312 * -4.0) / v314;
                                            v315 = -v311;
                                            v316 = v311 < 0.0;
                                          }
                                          else
                                          {
                                            v315 = 4.0;
                                            v316 = v311 < 4.0;
                                          }
                                          if (v316)
                                            v311 = v315;
                                          v311 = v311 + 1.0;
                                        }
                                        else
                                        {
                                          if (v293 < 0.0 || v312 > 0.0)
                                          {
                                            v313 = (v293 * v310 + v312 * 4.0) / (v293 - v312);
                                            if (v313 < 0.0)
                                              v313 = -v313;
                                          }
                                          else
                                          {
                                            v313 = 4.0;
                                            if (v310 >= 4.0)
                                              v313 = v310;
                                          }
                                          v310 = v313 + 1.0;
                                          v314 = v298;
                                          v293 = v293 - v312;
                                        }
                                        v317 = (v97 + v97) * v180;
                                        v318 = v295 + 1.0 + 1.0 + 1.0;
                                        v319 = v303 * v21;
                                        v320 = v17 ^ v171;
                                        v321 = v16 ^ v301;
                                        v322 = v302 * v20;
                                        if (v320 < 0)
                                        {
                                          if ((v321 & 0x8000000000000000) == 0)
                                          {
                                            v323 = v319 + v322;
LABEL_515:
                                            v324 = v317 * v189;
                                            v325 = v318 + 1.0;
                                            v326 = v43 * -(double)v323;
                                            if (v326 < 0.0)
                                              goto LABEL_516;
LABEL_525:
                                            v328 = v314 + v326;
                                            if (v314 < 0.0 && (v314 > 0.0 || v326 > 0.0))
                                            {
                                              v329 = (v311 * v314 + v326 * -4.0) / v328;
                                              if (v329 < 0.0)
                                                v329 = -v329;
                                            }
                                            else
                                            {
                                              v329 = 4.0;
                                              if (v311 >= 4.0)
                                                v329 = v311;
                                            }
                                            v311 = v329 + 1.0;
LABEL_539:
                                            v330 = v328 + 0.0;
                                            v331 = v311 + 1.0;
                                            if (v311 <= 0.0)
                                              v331 = 1.0;
                                            v332 = v293 + 0.0;
                                            v333 = v310 + 1.0;
                                            if (v310 <= 0.0)
                                              v333 = 1.0;
                                            v334 = sqrt(v324);
                                            v335 = v325 * 0.5 + 1.0;
                                            if ((_DWORD)a5 == 2)
                                            {
                                              v336 = v334 + v330;
                                              if (v330 < 0.0 && (v334 > 0.0 || v330 > 0.0))
                                              {
                                                v331 = (v330 * v331 - v335 * v334) / v336;
                                                v335 = -v331;
                                                v337 = v331 < 0.0;
                                              }
                                              else
                                              {
                                                v337 = v331 < v335;
                                              }
                                              if (v337)
                                                v331 = v335;
                                              v331 = v331 + 1.0;
                                            }
                                            else
                                            {
                                              if (v332 < 0.0 && (v334 > 0.0 || v332 > 0.0))
                                              {
                                                v333 = (v332 * v333 - v335 * v334) / (v334 + v332);
                                                v335 = -v333;
                                                v338 = v333 < 0.0;
                                              }
                                              else
                                              {
                                                v338 = v333 < v335;
                                              }
                                              if (v338)
                                                v333 = v335;
                                              v333 = v333 + 1.0;
                                              v332 = v334 + v332;
                                              v336 = v330;
                                            }
                                            v339 = v97 * v97;
                                            v340 = v287 + v287 + 1.0 + 1.0;
                                            v341 = v340 + v331;
                                            v342 = v336 / v339;
                                            v343 = v340 + v333;
                                            v344 = v332 / v339;
                                            v345 = -(v332 / v339);
                                            v346 = -v342;
                                            if (v239 < 0.0)
                                              v347 = v345;
                                            else
                                              v347 = v342;
                                            if (v239 < 0.0)
                                              v348 = v343;
                                            else
                                              v348 = v341;
                                            if (v239 < 0.0)
                                              v349 = -v342;
                                            else
                                              v349 = v344;
                                            if (v239 < 0.0)
                                              v350 = v341;
                                            else
                                              v350 = v343;
                                            v351 = v350 + 3.0;
                                            v352 = v239 * v349;
                                            v353 = v348 + 3.0 + 1.0;
                                            v354 = v239 * v347;
                                            v355 = v211 + v354;
                                            if ((v211 < 0.0 || v354 < 0.0) && (v211 > 0.0 || v354 > 0.0))
                                            {
                                              v353 = (v213 * v211 - v354 * v353) / v355;
                                              if (v353 < 0.0)
                                                v353 = -v353;
                                              v356 = v351 + 1.0;
                                              v357 = v215 + v352;
                                              if (v215 < 0.0)
                                              {
LABEL_584:
                                                if (v215 > 0.0 || v352 > 0.0)
                                                {
                                                  v214 = (v214 * v215 - v352 * v356) / v357;
                                                  v356 = -v214;
                                                  v358 = v214 < 0.0;
LABEL_588:
                                                  if (v358)
                                                    v214 = v356;
                                                  v359 = v342;
                                                  v360 = v341;
                                                  v361 = v344;
                                                  v362 = v343;
                                                  if (v250 < 0.0)
                                                  {
                                                    v359 = v345;
                                                    v360 = v343;
                                                    v361 = -v342;
                                                    v362 = v341;
                                                  }
                                                  v363 = v353 + 1.0;
                                                  v364 = v362 + 3.0;
                                                  v365 = v360 + 3.0;
                                                  v366 = v250 * v361;
                                                  v367 = v365 + 1.0;
                                                  v368 = v250 * v359;
                                                  v369 = v355 + v368;
                                                  if ((v355 < 0.0 || v368 < 0.0) && (v355 > 0.0 || v368 > 0.0))
                                                  {
                                                    v373 = (v355 * v363 - v368 * v367) / v369;
                                                    if (v373 >= 0.0)
                                                      v363 = v373;
                                                    else
                                                      v363 = -v373;
                                                    v370 = v214 + 1.0;
                                                    v371 = v364 + 1.0;
                                                    v372 = v357 + v366;
                                                    if (v357 < 0.0)
                                                      goto LABEL_605;
                                                  }
                                                  else
                                                  {
                                                    if (v363 < v367)
                                                      v363 = v367;
                                                    v370 = v214 + 1.0;
                                                    v371 = v364 + 1.0;
                                                    v372 = v357 + v366;
                                                    if (v357 < 0.0)
                                                    {
LABEL_605:
                                                      if (v357 > 0.0 || v366 > 0.0)
                                                      {
                                                        v370 = (v357 * v370 - v366 * v371) / v372;
                                                        v371 = -v370;
                                                        v374 = v370 < 0.0;
LABEL_609:
                                                        if (v374)
                                                          v375 = v371;
                                                        else
                                                          v375 = v370;
                                                        if (v265 < 0.0)
                                                          v376 = v345;
                                                        else
                                                          v376 = v342;
                                                        if (v265 < 0.0)
                                                          v377 = v343;
                                                        else
                                                          v377 = v341;
                                                        if (v265 < 0.0)
                                                          v378 = -v342;
                                                        else
                                                          v378 = v344;
                                                        if (v265 < 0.0)
                                                          v379 = v341;
                                                        else
                                                          v379 = v343;
                                                        v380 = v379 + 3.0;
                                                        v381 = v377 + 3.0;
                                                        v382 = v265 * v378;
                                                        v383 = v381 + 1.0;
                                                        v384 = v265 * v376;
                                                        v385 = v226 + v384;
                                                        if ((v226 < 0.0 || v384 < 0.0) && (v226 > 0.0 || v384 > 0.0))
                                                        {
                                                          v386 = (v228 * v226 - v384 * v383) / v385;
                                                          if (v386 < 0.0)
                                                            v386 = -v386;
                                                          v387 = v380 + 1.0;
                                                          v388 = 1.0;
                                                          v389 = v230 + v382;
                                                          if (v230 < 0.0)
                                                          {
LABEL_637:
                                                            if (v230 > 0.0 || v382 > 0.0)
                                                            {
                                                              v391 = (v229 * v230 - v382 * v387) / v389;
                                                              v390 = -v391;
                                                              if (v391 >= 0.0)
                                                                v390 = v391;
LABEL_644:
                                                              v392 = v386 + v388;
                                                              if (v282 < 0.0)
                                                                v393 = v345;
                                                              else
                                                                v393 = v342;
                                                              if (v282 < 0.0)
                                                                v394 = v343;
                                                              else
                                                                v394 = v341;
                                                              if (v282 < 0.0)
                                                              {
                                                                v395 = v341;
                                                              }
                                                              else
                                                              {
                                                                v346 = v344;
                                                                v395 = v343;
                                                              }
                                                              v396 = v395 + 3.0;
                                                              v397 = v394 + 3.0;
                                                              v398 = v282 * v346;
                                                              v399 = v397 + 1.0;
                                                              v400 = v282 * v393;
                                                              v401 = v385 + v400;
                                                              if ((v385 < 0.0 || v400 < 0.0)
                                                                && (v385 > 0.0 || v400 > 0.0))
                                                              {
                                                                v405 = (v385 * v392 - v400 * v399) / v401;
                                                                v392 = -v405;
                                                                if (v405 >= 0.0)
                                                                  v392 = v405;
                                                                v402 = v390 + 1.0;
                                                                v403 = v396 + 1.0;
                                                                v404 = v389 + v398;
                                                                if (v389 < 0.0)
                                                                {
LABEL_665:
                                                                  if (v389 > 0.0 || v398 > 0.0)
                                                                  {
                                                                    v406 = (v389 * v402 - v398 * v403) / v404;
                                                                    if (v406 < 0.0)
                                                                      v406 = -v406;
                                                                    v407 = 1.0;
                                                                    v408 = 1.0;
                                                                    if (v342 < v344)
                                                                    {
LABEL_671:
                                                                      v409 = v342;
                                                                      v410 = v363 + v407;
                                                                      v411 = v375 + 1.0;
                                                                      v412 = v341 + v408;
                                                                      if (v28 >= 0.0)
                                                                        goto LABEL_672;
                                                                      goto LABEL_685;
                                                                    }
LABEL_684:
                                                                    v420 = v343;
                                                                    v409 = v344;
                                                                    v343 = v341;
                                                                    v344 = v342;
                                                                    v410 = v363 + v407;
                                                                    v411 = v375 + 1.0;
                                                                    v412 = v420 + v408;
                                                                    if (v28 >= 0.0)
                                                                    {
LABEL_672:
                                                                      v413 = v28 * v409;
                                                                      v414 = v343 + 1.0 + 1.0;
                                                                      v415 = v28 * v344;
                                                                      v416 = v369 + v415;
                                                                      if ((v369 < 0.0 || v415 < 0.0)
                                                                        && (v369 > 0.0 || v415 > 0.0))
                                                                      {
                                                                        v425 = (v369 * v410 - v415 * v414) / v416;
                                                                        if (v425 >= 0.0)
                                                                          v417 = v425;
                                                                        else
                                                                          v417 = -v425;
                                                                        v418 = v412 + 1.0;
                                                                        v419 = v372 + v413;
                                                                        if (v372 < 0.0)
                                                                          goto LABEL_699;
                                                                      }
                                                                      else
                                                                      {
                                                                        if (v410 >= v414)
                                                                          v417 = v410;
                                                                        else
                                                                          v417 = v414;
                                                                        v418 = v412 + 1.0;
                                                                        v419 = v372 + v413;
                                                                        if (v372 < 0.0)
                                                                        {
LABEL_699:
                                                                          if (v372 <= 0.0 && v413 <= 0.0)
                                                                            goto LABEL_701;
                                                                          v428 = v372 * v411 - v413 * v418;
                                                                          goto LABEL_718;
                                                                        }
                                                                      }
                                                                      if (v413 >= 0.0)
                                                                      {
LABEL_701:
                                                                        if (v411 >= v418)
                                                                          v424 = v411;
                                                                        else
                                                                          v424 = v418;
                                                                        v426 = 1.0;
                                                                        v162 = v369 - v372;
                                                                        if (v369 < 0.0)
                                                                          goto LABEL_722;
LABEL_721:
                                                                        if (v372 <= 0.0)
                                                                          goto LABEL_724;
                                                                        goto LABEL_722;
                                                                      }
                                                                      goto LABEL_699;
                                                                    }
LABEL_685:
                                                                    v421 = v343 + 1.0 + 1.0;
                                                                    v422 = -(v344 * v28);
                                                                    v423 = -(v409 * v28);
                                                                    v416 = v369 + v422;
                                                                    if ((v369 < 0.0 || v422 < 0.0)
                                                                      && (v369 > 0.0 || v422 > 0.0))
                                                                    {
                                                                      v427 = (v369 * v410 - v422 * v421) / v416;
                                                                      v417 = -v427;
                                                                      if (v427 >= 0.0)
                                                                        v417 = v427;
                                                                      v424 = v412 + 1.0;
                                                                      v419 = v372 + v423;
                                                                      if (v372 < 0.0)
                                                                      {
LABEL_710:
                                                                        if (v372 > 0.0 || v423 > 0.0)
                                                                        {
                                                                          v428 = v372 * v411 - v423 * v424;
LABEL_718:
                                                                          v429 = v428 / v419;
                                                                          v424 = -v429;
                                                                          if (v429 >= 0.0)
                                                                            v424 = v429;
                                                                          v426 = 1.0;
                                                                          v162 = v369 - v372;
                                                                          if (v369 >= 0.0)
                                                                            goto LABEL_721;
                                                                          goto LABEL_722;
                                                                        }
LABEL_712:
                                                                        if (v411 >= v424)
                                                                          v424 = v411;
                                                                        v426 = 1.0;
                                                                        v162 = v369 - v372;
                                                                        if (v369 >= 0.0)
                                                                          goto LABEL_721;
LABEL_722:
                                                                        if (v369 > 0.0 || v372 < 0.0)
                                                                        {
                                                                          v163 = (v369 * v410 + v372 * v411) / v162;
                                                                          if (v163 < 0.0)
                                                                            v163 = -v163;
LABEL_727:
                                                                          v430 = v392 + v426;
                                                                          v431 = v406 + v408;
                                                                          v166 = v401 - v404;
                                                                          if ((v401 < 0.0 || v404 > 0.0)
                                                                            && (v401 > 0.0 || v404 < 0.0))
                                                                          {
                                                                            v167 = (v401 * v430 + v404 * v431) / v166;
                                                                            if (v167 < 0.0)
                                                                              v167 = -v167;
                                                                          }
                                                                          else if (v430 >= v431)
                                                                          {
                                                                            v167 = v430;
                                                                          }
                                                                          else
                                                                          {
                                                                            v167 = v431;
                                                                          }
                                                                          v432 = v424 + 1.0;
                                                                          v433 = v417 + 1.0;
                                                                          v168 = v416 - v419;
                                                                          if (v416 >= 0.0 && v419 <= 0.0
                                                                            || v416 <= 0.0 && v419 >= 0.0)
                                                                          {
                                                                            if (v433 >= v432)
                                                                              v169 = v417 + 1.0;
                                                                            else
                                                                              v169 = v424 + 1.0;
                                                                            goto LABEL_747;
                                                                          }
                                                                          v169 = (v419 * v432 + v433 * v416) / v168;
                                                                          if (v169 >= 0.0)
                                                                            goto LABEL_747;
LABEL_746:
                                                                          v169 = -v169;
                                                                          goto LABEL_747;
                                                                        }
LABEL_724:
                                                                        if (v410 >= v411)
                                                                          v163 = v410;
                                                                        else
                                                                          v163 = v411;
                                                                        goto LABEL_727;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      if (v410 >= v421)
                                                                        v417 = v410;
                                                                      else
                                                                        v417 = v421;
                                                                      v424 = v412 + 1.0;
                                                                      v419 = v372 + v423;
                                                                      if (v372 < 0.0)
                                                                        goto LABEL_710;
                                                                    }
                                                                    if (v423 >= 0.0)
                                                                      goto LABEL_712;
                                                                    goto LABEL_710;
                                                                  }
LABEL_667:
                                                                  if (v402 >= v403)
                                                                    v406 = v402;
                                                                  else
                                                                    v406 = v403;
                                                                  v407 = 1.0;
                                                                  v408 = 1.0;
                                                                  if (v342 < v344)
                                                                    goto LABEL_671;
                                                                  goto LABEL_684;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                if (v392 < v399)
                                                                  v392 = v397 + 1.0;
                                                                v402 = v390 + 1.0;
                                                                v403 = v396 + 1.0;
                                                                v404 = v389 + v398;
                                                                if (v389 < 0.0)
                                                                  goto LABEL_665;
                                                              }
                                                              if (v398 >= 0.0)
                                                                goto LABEL_667;
                                                              goto LABEL_665;
                                                            }
LABEL_639:
                                                            if (v229 >= v387)
                                                              v390 = v229;
                                                            else
                                                              v390 = v387;
                                                            goto LABEL_644;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          if (v228 >= v383)
                                                            v386 = v228;
                                                          else
                                                            v386 = v381 + 1.0;
                                                          v387 = v380 + 1.0;
                                                          v388 = 1.0;
                                                          v389 = v230 + v382;
                                                          if (v230 < 0.0)
                                                            goto LABEL_637;
                                                        }
                                                        if (v382 >= 0.0)
                                                          goto LABEL_639;
                                                        goto LABEL_637;
                                                      }
LABEL_607:
                                                      v374 = v370 < v371;
                                                      goto LABEL_609;
                                                    }
                                                  }
                                                  if (v366 >= 0.0)
                                                    goto LABEL_607;
                                                  goto LABEL_605;
                                                }
LABEL_586:
                                                v358 = v214 < v356;
                                                goto LABEL_588;
                                              }
                                            }
                                            else
                                            {
                                              if (v213 >= v353)
                                                v353 = v213;
                                              v356 = v351 + 1.0;
                                              v357 = v215 + v352;
                                              if (v215 < 0.0)
                                                goto LABEL_584;
                                            }
                                            if (v352 >= 0.0)
                                              goto LABEL_586;
                                            goto LABEL_584;
                                          }
                                          if (v319 <= v322)
                                          {
                                            v324 = v317 * v189;
                                            v325 = v318 + 1.0;
                                            v326 = v43 * (double)(v322 - v319);
                                            if (v326 >= 0.0)
                                              goto LABEL_525;
                                          }
                                          else
                                          {
                                            v324 = v317 * v189;
                                            v325 = v318 + 1.0;
                                            v326 = v43 * -(double)(v319 - v322);
                                            if (v326 >= 0.0)
                                              goto LABEL_525;
                                          }
                                        }
                                        else if (v321 < 0)
                                        {
                                          v324 = v317 * v189;
                                          v325 = v318 + 1.0;
                                          v326 = v43 * (double)(v319 + v322);
                                          if (v326 >= 0.0)
                                            goto LABEL_525;
                                        }
                                        else
                                        {
                                          if (v319 < v322)
                                          {
                                            v323 = v322 - v319;
                                            goto LABEL_515;
                                          }
                                          v324 = v317 * v189;
                                          v325 = v318 + 1.0;
                                          v326 = v43 * (double)(v319 - v322);
                                          if (v326 >= 0.0)
                                            goto LABEL_525;
                                        }
LABEL_516:
                                        if (v293 < 0.0 || v326 > 0.0)
                                        {
                                          v327 = (v310 * v293 + v326 * 4.0) / (v293 - v326);
                                          if (v327 < 0.0)
                                            v327 = -v327;
                                        }
                                        else
                                        {
                                          v327 = 4.0;
                                          if (v310 >= 4.0)
                                            v327 = v310;
                                        }
                                        v310 = v327 + 1.0;
                                        v328 = v314;
                                        v293 = v293 - v326;
                                        goto LABEL_539;
                                      }
                                    }
                                    else
                                    {
                                      if (v288 >= v291)
                                        v294 = v288;
                                      else
                                        v294 = v291;
                                      v295 = v287 + 1.0;
                                      v296 = v280 + 1.0;
                                      v297 = v289 + 1.0;
                                      v298 = v278 + v290;
                                      if (v278 < 0.0)
                                        goto LABEL_467;
                                    }
                                    if (v290 >= 0.0)
                                      goto LABEL_469;
                                    goto LABEL_467;
                                  }
LABEL_446:
                                  if (v276 >= v277)
                                    v280 = v276;
                                  else
                                    v280 = v277;
                                  goto LABEL_452;
                                }
                              }
                              else
                              {
                                if (v270 < v273)
                                  v270 = v273;
                                v276 = v249 + 1.0;
                                v277 = v271 + 1.0;
                                v278 = v263 + v272;
                                if (v263 < 0.0)
                                  goto LABEL_444;
                              }
                              if (v272 >= 0.0)
                                goto LABEL_446;
                              goto LABEL_444;
                            }
LABEL_426:
                            v264 = v249 < v262;
                            goto LABEL_428;
                          }
                        }
                        else
                        {
                          if (v248 >= v258)
                            v261 = v248;
                          else
                            v261 = v252 + 3.0 + 1.0;
                          v262 = v256 + 1.0;
                          v263 = v255 + v257;
                          if (v255 < 0.0)
                            goto LABEL_424;
                        }
                        if (v257 >= 0.0)
                          goto LABEL_426;
                        goto LABEL_424;
                      }
LABEL_385:
                      v229 = (v227 * 5.0 + v225 * v229) / v230;
                      v233 = -v229;
                      v234 = v229 < 0.0;
                      goto LABEL_386;
                    }
                    v235 = v227 + v226;
                    v236 = 6.0;
                    v229 = 0.0;
                    if (v226 < 0.0 && (v227 > 0.0 || v226 > 0.0))
                    {
                      v237 = (v226 * 6.0 + v227 * -5.0) / v235;
                      v238 = -v237;
                      if (v237 >= 0.0)
                        v238 = v237;
                      v229 = 0.0;
LABEL_398:
                      v228 = v238 + 1.0;
                      v230 = v225;
                      v226 = v235;
                      goto LABEL_399;
                    }
LABEL_396:
                    v238 = 5.0;
                    if (v236 >= 5.0)
                      v238 = v236;
                    goto LABEL_398;
                  }
LABEL_378:
                  v226 = 0.0;
                  v225 = 0.0 - v224;
                  v231 = 5.0;
                  if (v224 > 0.0)
                  {
                    v232 = (v224 * 5.0 + 0.0) / v225;
                    v231 = -v232;
                    if (v232 >= 0.0)
                      v231 = v232;
                  }
                  v229 = v231 + 1.0;
                  v227 = v207 * (v41 * v198);
                  if (v227 < 0.0)
                  {
                    v228 = 0.0;
                    v230 = v225 - v227;
                    if (v227 > 0.0)
                      goto LABEL_385;
                    goto LABEL_383;
                  }
                  v236 = 0.0;
                  v235 = v227 + 0.0;
                  goto LABEL_396;
                }
                v216 = v211 + v212;
                v217 = 6.0;
                v214 = 0.0;
                if (v211 < 0.0 && (v211 > 0.0 || v212 > 0.0))
                {
                  v218 = (v211 * 6.0 + v212 * -5.0) / v216;
                  if (v218 >= 0.0)
                    v219 = (v211 * 6.0 + v212 * -5.0) / v216;
                  else
                    v219 = -v218;
                  v214 = 0.0;
                  v210 = 0.0;
                  goto LABEL_377;
                }
LABEL_375:
                v219 = 5.0;
                if (v217 >= 5.0)
                  v219 = v217;
LABEL_377:
                v213 = v219 + 1.0;
                v215 = v210;
                v211 = v216;
                v224 = v207 * (v11 * v206);
                if (v224 >= 0.0)
                  goto LABEL_371;
                goto LABEL_378;
              }
            }
            v206 = (double)v205;
            v207 = 1.0 / v28;
            v208 = 1.0 / v28 * (v40 * v198);
            if (v208 < 0.0)
              goto LABEL_360;
            goto LABEL_348;
          }
          v190 = v186 + v185;
        }
        v189 = (double)v190;
        goto LABEL_315;
      }
      v181 = v176 + v177;
    }
    v180 = (double)v181;
    goto LABEL_296;
  }
  v33 = v15 - v8;
  if (v14 - v9 >= 0)
    v34 = v14 - v9;
  else
    v34 = v9 - v14;
  if (v33 >= 0)
    v35 = v15 - v8;
  else
    v35 = v8 - v15;
  v36 = v35 * v20;
  v37 = v34 * v21;
  v38 = (v14 - v9) ^ v17;
  if ((v33 ^ v16) < 0)
  {
    v39 = -(double)(v37 + v36);
    v51 = (double)(v37 - v36);
    v99 = v36 > v37;
    v52 = v36 - v37;
    if (v99)
      v51 = -(double)v52;
    if (v38 < 0)
      v39 = v51;
  }
  else if (v38 < 0)
  {
    v39 = (double)(v37 + v36);
  }
  else if (v36 >= v37)
  {
    v39 = (double)(v36 - v37);
  }
  else
  {
    v39 = -(double)(v37 - v36);
  }
  v54 = *a2;
  v53 = a2[1];
  v55 = v53 - v9;
  if (v54 - v8 >= 0)
    v56 = v54 - v8;
  else
    v56 = v8 - v54;
  if (v55 >= 0)
    v57 = v53 - v9;
  else
    v57 = v9 - v53;
  v58 = v57 * v21;
  v59 = v56 * v20;
  v60 = v55 ^ v17;
  v61 = (double)(v58 - v59);
  v62 = (double)(v59 - v58);
  v63 = (v54 - v8) ^ v16;
  if (v58 < v59)
    v61 = -v62;
  if (v63 < 0)
    v61 = (double)(v58 + v59);
  if (v58 > v59)
    v62 = -(double)(v58 - v59);
  if (v63 >= 0)
    v62 = -(double)(v58 + v59);
  if (v60 < 0)
    v64 = v62;
  else
    v64 = v61;
  v65 = v53 - v14;
  v66 = v54 - v15;
  if (v53 - v14 >= 0)
    v67 = v53 - v14;
  else
    v67 = v14 - v53;
  if (v66 >= 0)
    v68 = v54 - v15;
  else
    v68 = v15 - v54;
  v69 = v68 * v20;
  v70 = v67 * v21;
  v71 = v66 ^ v16;
  v72 = (double)(v69 - v70);
  v73 = v65 ^ v17;
  v74 = (double)(v70 - v69);
  if (v69 < v70)
    v72 = -v74;
  if (v73 < 0)
    v72 = (double)(v70 + v69);
  if (v69 > v70)
    v74 = -(double)(v69 - v70);
  if (v73 >= 0)
    v74 = -(double)(v70 + v69);
  if (v71 < 0)
    v75 = v74;
  else
    v75 = v72;
  v76 = ((double)(int)v8 + v30) * 0.5;
  v77 = v10 * (v76 - (double)(int)v54);
  if (v77 >= 0.0)
  {
    v82 = 0.0;
    v83 = v77 + 0.0;
    v78 = 2.0;
    v79 = 0.0;
  }
  else
  {
    v78 = 0.0;
    v79 = 0.0 - v77;
    v80 = 1.0;
    if (v77 > 0.0)
    {
      v81 = (v77 + 0.0) / v79;
      v80 = -v81;
      if (v81 >= 0.0)
        v80 = v81;
    }
    v82 = v80 + 1.0;
    v83 = 0.0;
  }
  v84 = v64 * v75;
  v85 = ((double)(int)v9 + v31) * 0.5;
  v86 = v11 * (v85 - (double)(int)v53);
  if (v86 >= 0.0)
  {
    v88 = v86 + v83;
    if (v83 < 0.0 && (v86 > 0.0 || v83 > 0.0))
    {
      v100 = (v78 * v83 - v86) / v88;
      if (v100 < 0.0)
        v100 = -v100;
      v78 = v100 + 1.0;
      v90 = sqrt(v84);
      if ((_DWORD)a5 == 2)
        goto LABEL_115;
    }
    else
    {
      v89 = 1.0;
      if (v78 >= 1.0)
        v89 = v78;
      v78 = v89 + 1.0;
      v90 = sqrt(v84);
      if ((_DWORD)a5 == 2)
        goto LABEL_115;
    }
  }
  else
  {
    if (v86 > 0.0 || v79 < 0.0)
    {
      v87 = (v86 + v82 * v79) / (v79 - v86);
      if (v87 < 0.0)
        v87 = -v87;
    }
    else
    {
      v87 = 1.0;
      if (v82 >= 1.0)
        v87 = v82;
    }
    v82 = v87 + 1.0;
    v88 = v83;
    v79 = v79 - v86;
    v90 = sqrt(v84);
    if ((_DWORD)a5 == 2)
    {
LABEL_115:
      v93 = v90 + v79;
      if (v79 < 0.0 && (v90 > 0.0 || v79 > 0.0))
      {
        v94 = (v82 * v79 + v90 * -2.5) / v93;
        if (v94 < 0.0)
          v94 = -v94;
      }
      else
      {
        v94 = 2.5;
        if (v82 >= 2.5)
          v94 = v82;
      }
      v82 = v94 + 1.0;
      goto LABEL_133;
    }
  }
  v91 = v90 + v88;
  if (v88 < 0.0 && (v90 > 0.0 || v88 > 0.0))
  {
    v92 = (v78 * v88 + v90 * -2.5) / v91;
    if (v92 < 0.0)
      v92 = -v92;
  }
  else
  {
    v92 = 2.5;
    if (v78 >= 2.5)
      v92 = v78;
  }
  v78 = v92 + 1.0;
  v88 = v91;
  v93 = v79;
LABEL_133:
  v101 = v82 + 3.0;
  v102 = v93 / v32;
  v103 = v78 + 3.0;
  v104 = v88 / v32;
  if (v76 >= 0.0)
  {
    v108 = 0.0;
    v109 = v76 + 0.0;
    v105 = 1.0;
    v106 = 0.0;
  }
  else
  {
    v105 = 0.0;
    v106 = 0.0 - v76;
    v107 = 0.0;
    if (v76 > 0.0)
    {
      v107 = (v76 * 0.0 + 0.0) / v106;
      if (v107 < 0.0)
        v107 = -v107;
    }
    v108 = v107 + 1.0;
    v109 = 0.0;
  }
  v110 = v10 < 0.0;
  v111 = -(v10 * v104);
  v112 = -(v10 * v102);
  v113 = v10 * v102;
  v114 = v10 * v104;
  if (v110)
    v115 = v111;
  else
    v115 = v113;
  if (v110)
    v116 = v103;
  else
    v116 = v101;
  if (v110)
  {
    v117 = v101;
  }
  else
  {
    v112 = v114;
    v117 = v103;
  }
  v118 = v116 + 1.0;
  v119 = v109 + v115;
  if (v109 >= 0.0 && v115 >= 0.0 || v109 <= 0.0 && v115 <= 0.0)
  {
    if (v105 < v118)
      v105 = v118;
    v120 = v117 + 1.0;
    v121 = v106 + v112;
    if (v106 < 0.0)
      goto LABEL_160;
LABEL_159:
    if (v112 >= 0.0)
      goto LABEL_162;
    goto LABEL_160;
  }
  v105 = (v105 * v109 - v115 * v118) / v119;
  if (v105 < 0.0)
    v105 = -v105;
  v120 = v117 + 1.0;
  v121 = v106 + v112;
  if (v106 >= 0.0)
    goto LABEL_159;
LABEL_160:
  if (v106 > 0.0 || v112 > 0.0)
  {
    v131 = (v108 * v106 - v112 * v120) / v121;
    v122 = -v131;
    if (v131 >= 0.0)
      v122 = v131;
    v123 = 1.0;
    v124 = v85 <= 0.0;
    if (v85 < 0.0)
      goto LABEL_166;
LABEL_173:
    v129 = 0.0;
    v130 = v85 + 0.0;
    v126 = 0.0;
    v125 = 1.0;
    goto LABEL_174;
  }
LABEL_162:
  if (v108 >= v120)
    v122 = v108;
  else
    v122 = v120;
  v123 = 1.0;
  v124 = v85 <= 0.0;
  if (v85 >= 0.0)
    goto LABEL_173;
LABEL_166:
  v125 = 0.0;
  v126 = 0.0 - v85;
  v127 = 0.0;
  if (!v124)
  {
    v128 = (v85 * 0.0 + 0.0) / v126;
    v127 = -v128;
    if (v128 >= 0.0)
      v127 = v128;
  }
  v129 = v127 + 1.0;
  v130 = 0.0;
LABEL_174:
  v132 = v11 < 0.0;
  v133 = -(v11 * v104);
  v134 = -(v11 * v102);
  v135 = v11 * v102;
  v136 = v11 * v104;
  if (v132)
    v137 = v133;
  else
    v137 = v135;
  if (v132)
    v138 = v103;
  else
    v138 = v101;
  if (v132)
    v139 = v134;
  else
    v139 = v136;
  if (!v132)
    v101 = v103;
  v140 = v138 + 1.0;
  v141 = v130 + v137;
  if ((v130 < 0.0 || v137 < 0.0) && (v130 > 0.0 || v137 > 0.0))
  {
    v145 = (v125 * v130 - v137 * v140) / v141;
    v125 = -v145;
    if (v145 >= 0.0)
      v125 = v145;
    v142 = 1.0;
    v143 = v101 + 1.0;
    v144 = v126 + v139;
    if (v126 < 0.0)
      goto LABEL_197;
  }
  else
  {
    if (v125 < v140)
      v125 = v140;
    v142 = 1.0;
    v143 = v101 + 1.0;
    v144 = v126 + v139;
    if (v126 < 0.0)
      goto LABEL_197;
  }
  if (v139 >= 0.0)
    goto LABEL_199;
LABEL_197:
  if (v126 <= 0.0 && v139 <= 0.0)
  {
LABEL_199:
    if (v129 >= v143)
      v143 = v129;
    goto LABEL_204;
  }
  v143 = (v129 * v126 - v139 * v143) / v144;
  if (v143 < 0.0)
    v143 = -v143;
LABEL_204:
  v146 = v105 + v142;
  v147 = v122 + v123;
  v148 = v39 * 0.5 / sqrt(v32);
  if (v39 >= 0.0)
  {
    if (v148 >= 0.0)
    {
      v149 = v148 + v119;
      if (v119 < 0.0 && (v148 > 0.0 || v119 > 0.0))
      {
        v150 = v119 * v146 + v148 * -5.0;
LABEL_241:
        v154 = v150 / v149;
        if (v154 < 0.0)
          v154 = -v154;
        goto LABEL_243;
      }
LABEL_222:
      v154 = 5.0;
      if (v146 >= 5.0)
        v154 = v146;
LABEL_243:
      v159 = v154 + 1.0;
      v151 = v121;
      v158 = v147;
      v160 = 1.0;
      v161 = 1.0;
      v162 = v119 - v121;
      if (v119 < 0.0)
        goto LABEL_245;
      goto LABEL_244;
    }
    v151 = v121 - v148;
    if (v148 <= 0.0 && v121 >= 0.0)
      goto LABEL_216;
    v152 = v148 * 5.0 + v121 * v147;
  }
  else
  {
    if (v148 < 0.0)
    {
      v149 = v119 - v148;
      if (v148 > 0.0 || v119 < 0.0)
      {
        v150 = v148 * 5.0 + v119 * v146;
        goto LABEL_241;
      }
      goto LABEL_222;
    }
    v151 = v148 + v121;
    if (v121 >= 0.0 || v148 <= 0.0 && v121 <= 0.0)
    {
LABEL_216:
      v153 = 5.0;
      if (v147 >= 5.0)
        v153 = v122 + v123;
      goto LABEL_238;
    }
    v152 = v121 * v147 + v148 * -5.0;
  }
  v153 = v152 / v151;
  if (v153 < 0.0)
    v153 = -v153;
LABEL_238:
  v158 = v153 + 1.0;
  v149 = v119;
  v159 = v146;
  v160 = 1.0;
  v161 = 1.0;
  v162 = v119 - v121;
  if (v119 < 0.0)
    goto LABEL_245;
LABEL_244:
  if (v121 <= 0.0)
  {
LABEL_247:
    if (v146 >= v147)
      v163 = v146;
    else
      v163 = v147;
    goto LABEL_250;
  }
LABEL_245:
  if (v119 <= 0.0 && v121 >= 0.0)
    goto LABEL_247;
  v163 = (v119 * v146 + v121 * v147) / v162;
  if (v163 < 0.0)
    v163 = -v163;
LABEL_250:
  v164 = v125 + v160;
  v165 = v143 + v161;
  v166 = v141 - v144;
  if ((v141 < 0.0 || v144 > 0.0) && (v141 > 0.0 || v144 < 0.0))
  {
    v167 = (v141 * v164 + v144 * v165) / v166;
    if (v167 < 0.0)
      v167 = -v167;
  }
  else if (v164 >= v165)
  {
    v167 = v164;
  }
  else
  {
    v167 = v143 + v161;
  }
  v168 = v149 - v151;
  if (v149 >= 0.0 && v151 <= 0.0 || v149 <= 0.0 && v151 >= 0.0)
  {
    if (v159 >= v158)
      v169 = v159;
    else
      v169 = v158;
    goto LABEL_747;
  }
  v169 = (v151 * v158 + v149 * v159) / v168;
  if (v169 < 0.0)
    goto LABEL_746;
LABEL_747:
  *(double *)a6 = v162;
  *(double *)(a6 + 8) = v166;
  *(double *)(a6 + 16) = v168;
  *(_BYTE *)(a6 + 24) = 1;
  v434 = v163 + 1.0;
  v435 = v167 + 1.0;
  v436 = v169 + 1.0;
  if (v434 > 64.0 || v435 > 64.0 || v436 > 64.0)
    sub_223F1B7D8(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, v434 > 64.0, v435 > 64.0, v436 > 64.0);
}

void sub_223F1309C(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  double v47;
  unint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  double v84;
  unint64_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  BOOL v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  BOOL v111;
  double v112;
  double v113;
  double v114;
  double v115;
  BOOL v116;
  double v117;
  double v118;
  double v119;
  BOOL v120;
  double v121;
  double v122;
  double v123;
  double v124;
  BOOL v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  BOOL v138;
  double v139;
  BOOL v140;
  double v141;
  double v142;
  BOOL v143;
  double v144;
  double v145;
  BOOL v146;
  double v147;
  BOOL v148;
  double v149;
  double v150;
  BOOL v151;
  double v152;
  BOOL v153;
  double v154;
  BOOL v155;
  double v156;
  double v157;
  BOOL v158;
  double v159;
  double v160;
  BOOL v161;
  double v162;
  BOOL v163;
  double v164;
  double v165;
  BOOL v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  BOOL v179;
  double v180;
  BOOL v181;
  double v182;
  double v183;
  BOOL v184;
  double v185;
  double v186;
  BOOL v187;
  double v188;
  BOOL v189;
  double v190;
  double v191;
  double v192;
  BOOL v193;
  double v194;
  double v195;
  double v196;
  BOOL v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  BOOL v213;
  BOOL v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;

  v5 = a2[2];
  v6 = a2[3];
  v8 = *a2;
  v7 = a2[1];
  if (v8 >= 0)
    v9 = *a2;
  else
    v9 = -v8;
  if (v7 >= 0)
    v10 = a2[1];
  else
    v10 = -v7;
  if (v5 >= 0)
    v11 = a2[2];
  else
    v11 = -v5;
  if (v6 >= 0)
    v12 = a2[3];
  else
    v12 = -v6;
  v13 = v12 * v9;
  v14 = v10 * v11;
  v15 = v7 ^ v5;
  if ((v6 ^ v8) < 0)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v16 = v14 + v13;
      goto LABEL_19;
    }
    if (v13 > v14)
    {
      v17 = -(double)(v13 - v14);
      goto LABEL_26;
    }
    v18 = v14 - v13;
    goto LABEL_25;
  }
  if (v15 < 0)
  {
    v18 = v14 + v13;
LABEL_25:
    v17 = (double)v18;
    goto LABEL_26;
  }
  if (v13 < v14)
  {
    v16 = v14 - v13;
LABEL_19:
    v17 = -(double)v16;
    goto LABEL_26;
  }
  v17 = (double)(v13 - v14);
LABEL_26:
  v19 = a3[2];
  v20 = a3[3];
  v21 = *a3;
  v22 = a3[1];
  if (v21 >= 0)
    v23 = *a3;
  else
    v23 = -v21;
  if (v22 >= 0)
    v24 = a3[1];
  else
    v24 = -v22;
  if (v19 >= 0)
    v25 = a3[2];
  else
    v25 = -v19;
  if (v20 >= 0)
    v26 = a3[3];
  else
    v26 = -v20;
  v27 = v26 * v23;
  v28 = v24 * v25;
  v29 = v22 ^ v19;
  if ((v20 ^ v21) < 0)
  {
    if ((v29 & 0x8000000000000000) == 0)
    {
      v30 = v28 + v27;
      goto LABEL_44;
    }
    if (v27 > v28)
    {
      v31 = -(double)(v27 - v28);
      goto LABEL_51;
    }
    v32 = v28 - v27;
    goto LABEL_50;
  }
  if (v29 < 0)
  {
    v32 = v28 + v27;
LABEL_50:
    v31 = (double)v32;
    goto LABEL_51;
  }
  if (v27 < v28)
  {
    v30 = v28 - v27;
LABEL_44:
    v31 = -(double)v30;
    goto LABEL_51;
  }
  v31 = (double)(v27 - v28);
LABEL_51:
  v33 = a4[2];
  v34 = a4[3];
  v35 = *a4;
  v36 = a4[1];
  v37 = (double)(int)v33 - (double)(int)v35;
  v38 = (double)(int)v34 - (double)(int)v36;
  if (v35 >= 0)
    v39 = *a4;
  else
    v39 = -v35;
  if (v36 >= 0)
    v40 = a4[1];
  else
    v40 = -v36;
  if (v33 >= 0)
    v41 = a4[2];
  else
    v41 = -v33;
  if (v34 >= 0)
    v42 = a4[3];
  else
    v42 = -v34;
  v43 = v42 * v39;
  v44 = v40 * v41;
  v45 = v36 ^ v33;
  if ((v34 ^ v35) < 0)
  {
    if ((v45 & 0x8000000000000000) == 0)
    {
      v46 = v44 + v43;
      goto LABEL_69;
    }
    if (v43 > v44)
    {
      v47 = -(double)(v43 - v44);
      goto LABEL_76;
    }
    v48 = v44 - v43;
    goto LABEL_75;
  }
  if (v45 < 0)
  {
    v48 = v44 + v43;
LABEL_75:
    v47 = (double)v48;
    goto LABEL_76;
  }
  if (v43 < v44)
  {
    v46 = v44 - v43;
LABEL_69:
    v47 = -(double)v46;
    goto LABEL_76;
  }
  v47 = (double)(v43 - v44);
LABEL_76:
  v49 = (double)(int)v5 - (double)(int)v8;
  v50 = (double)(int)v6 - (double)(int)v7;
  v51 = (double)(int)v19 - (double)(int)v21;
  v52 = (double)(int)v20 - (double)(int)v22;
  v53 = v5 - v8;
  v54 = v6 - v7;
  v55 = v19 - v21;
  v56 = v20 - v22;
  if (v53 >= 0)
    v57 = v53;
  else
    v57 = -v53;
  if (v54 >= 0)
    v58 = v54;
  else
    v58 = -v54;
  if (v55 >= 0)
    v59 = v55;
  else
    v59 = -v55;
  if (v56 >= 0)
    v60 = v56;
  else
    v60 = -v56;
  v61 = v60 * v57;
  v62 = v59 * v58;
  v63 = v55 ^ v54;
  if ((v56 ^ v53) < 0)
  {
    if ((v63 & 0x8000000000000000) == 0)
    {
      v64 = v61 + v62;
      goto LABEL_94;
    }
    if (v61 > v62)
    {
      v65 = -(double)(v61 - v62);
      goto LABEL_101;
    }
    v66 = v62 - v61;
    goto LABEL_100;
  }
  if (v63 < 0)
  {
    v66 = v61 + v62;
LABEL_100:
    v65 = (double)v66;
    goto LABEL_101;
  }
  if (v61 < v62)
  {
    v64 = v62 - v61;
LABEL_94:
    v65 = -(double)v64;
    goto LABEL_101;
  }
  v65 = (double)(v61 - v62);
LABEL_101:
  v67 = v33 - v35;
  v68 = v34 - v36;
  if (v67 >= 0)
    v69 = v67;
  else
    v69 = -v67;
  if (v68 >= 0)
    v70 = v68;
  else
    v70 = -v68;
  v71 = v70 * v59;
  v72 = v69 * v60;
  v73 = v68 ^ v55;
  v74 = v67 ^ v56;
  if (v73 < 0)
  {
    if ((v74 & 0x8000000000000000) == 0)
    {
      v76 = v71 + v72;
      goto LABEL_115;
    }
    v76 = v71 - v72;
    if (v71 > v72)
      goto LABEL_115;
    v75 = v72 - v71;
  }
  else if (v74 < 0)
  {
    v75 = v71 + v72;
  }
  else
  {
    v75 = v71 - v72;
    if (v71 < v72)
    {
      v76 = v72 - v71;
LABEL_115:
      v77 = -(double)v76;
      goto LABEL_118;
    }
  }
  v77 = (double)v75;
LABEL_118:
  v78 = v49 * v49 + v50 * v50;
  v79 = v51 * v51 + v52 * v52;
  v80 = v69 * v58;
  v81 = v67 ^ v54;
  v82 = v68 ^ v53;
  v83 = v70 * v57;
  v84 = sqrt(v37 * v37 + v38 * v38);
  if (v81 < 0)
  {
    if (v82 < 0)
    {
      if (v80 <= v83)
      {
        v86 = (double)(v83 - v80);
        v87 = sqrt(v78);
        v88 = v84 * v65;
        v89 = sqrt(v79);
        if (v84 * v65 < 0.0)
          goto LABEL_125;
      }
      else
      {
        v86 = -(double)(v80 - v83);
        v87 = sqrt(v78);
        v88 = v84 * v65;
        v89 = sqrt(v79);
        if (v84 * v65 < 0.0)
          goto LABEL_125;
      }
      goto LABEL_131;
    }
    v85 = v83 + v80;
  }
  else
  {
    if (v82 < 0)
    {
      v86 = (double)(v83 + v80);
      v87 = sqrt(v78);
      v88 = v84 * v65;
      v89 = sqrt(v79);
      if (v84 * v65 < 0.0)
        goto LABEL_125;
      goto LABEL_131;
    }
    if (v80 >= v83)
    {
      v86 = (double)(v80 - v83);
      v87 = sqrt(v78);
      v88 = v84 * v65;
      v89 = sqrt(v79);
      if (v84 * v65 < 0.0)
        goto LABEL_125;
      goto LABEL_131;
    }
    v85 = v83 - v80;
  }
  v86 = -(double)v85;
  v87 = sqrt(v78);
  v88 = v84 * v65;
  v89 = sqrt(v79);
  if (v84 * v65 < 0.0)
  {
LABEL_125:
    v90 = 0.0;
    v91 = 0.0 - v88;
    v92 = 4.0;
    if (v88 > 0.0)
    {
      v93 = (v88 * 4.0 + 0.0) / v91;
      v92 = -v93;
      if (v93 >= 0.0)
        v92 = v93;
    }
    v94 = v92 + 1.0;
    v95 = v87 * v77;
    v96 = 0.0;
    if (v87 * v77 >= 0.0)
    {
      v97 = v95 + 0.0;
      goto LABEL_153;
    }
LABEL_133:
    v98 = v91 - v95;
    if (v95 > 0.0 || v91 < 0.0)
    {
      v101 = (v95 * 4.0 + v91 * v94) / v98;
      if (v101 < 0.0)
        v101 = -v101;
      v94 = v101 + 1.0;
      v99 = v89 * v86;
      v100 = v89 * v86 <= 0.0;
      if (v89 * v86 >= 0.0)
        goto LABEL_142;
    }
    else
    {
      if (v94 < 4.0)
        v94 = 4.0;
      v94 = v94 + 1.0;
      v99 = v89 * v86;
      v100 = v89 * v86 <= 0.0;
      if (v89 * v86 >= 0.0)
        goto LABEL_142;
    }
LABEL_156:
    v109 = v98 - v99;
    if (v100 && v98 >= 0.0)
    {
      v110 = 4.0;
      v111 = v94 < 4.0;
    }
    else
    {
      v94 = (v99 * 4.0 + v94 * v98) / v109;
      v110 = -v94;
      v111 = v94 < 0.0;
    }
    if (v111)
      v94 = v110;
    v94 = v94 + 1.0;
    v98 = v109;
    v102 = v90;
    v103 = v47 * v65;
    if (v103 < 0.0)
      goto LABEL_164;
LABEL_148:
    v104 = 0.0;
    v105 = v103 + 0.0;
    v106 = v17 * v77;
    v107 = 4.0;
    if (v106 < 0.0)
    {
      v108 = 0.0;
      goto LABEL_168;
    }
    v121 = v105 + v106;
    v108 = 0.0;
    if (v105 < 0.0 && (v105 > 0.0 || v106 > 0.0))
    {
      v122 = (v105 * 4.0 + v106 * -3.0) / v121;
      v107 = -v122;
      if (v122 >= 0.0)
        v107 = (v105 * 4.0 + v106 * -3.0) / v121;
      v108 = 0.0;
LABEL_190:
      v107 = v107 + 1.0;
      v105 = v121;
      v114 = v104;
      v115 = v31 * v86;
      v116 = v31 * v86 <= 0.0;
      if (v31 * v86 >= 0.0)
        goto LABEL_177;
      goto LABEL_191;
    }
LABEL_188:
    if (v107 < 3.0)
      v107 = 3.0;
    goto LABEL_190;
  }
LABEL_131:
  v91 = 0.0;
  v90 = v88 + 0.0;
  v95 = v87 * v77;
  v96 = 5.0;
  if (v87 * v77 < 0.0)
  {
    v94 = 0.0;
    goto LABEL_133;
  }
  v97 = v90 + v95;
  v94 = 0.0;
  if (v90 >= 0.0 || v90 <= 0.0 && v95 <= 0.0)
  {
LABEL_153:
    if (v96 < 4.0)
      v96 = 4.0;
    goto LABEL_155;
  }
  v226 = (v90 * 5.0 + v95 * -4.0) / v97;
  v96 = -v226;
  if (v226 >= 0.0)
    v96 = (v90 * 5.0 + v95 * -4.0) / v97;
  v94 = 0.0;
LABEL_155:
  v96 = v96 + 1.0;
  v98 = v91;
  v90 = v97;
  v99 = v89 * v86;
  v100 = v89 * v86 <= 0.0;
  if (v89 * v86 < 0.0)
    goto LABEL_156;
LABEL_142:
  v102 = v99 + v90;
  if (v90 < 0.0 && (v99 > 0.0 || v90 > 0.0))
  {
    v133 = (v96 * v90 + v99 * -4.0) / v102;
    if (v133 < 0.0)
      v133 = -v133;
    v96 = v133 + 1.0;
    v103 = v47 * v65;
    if (v103 >= 0.0)
      goto LABEL_148;
  }
  else
  {
    if (v96 < 4.0)
      v96 = 4.0;
    v96 = v96 + 1.0;
    v103 = v47 * v65;
    if (v103 >= 0.0)
      goto LABEL_148;
  }
LABEL_164:
  v105 = 0.0;
  v104 = 0.0 - v103;
  v112 = 3.0;
  if (v103 > 0.0)
  {
    v113 = (v103 * 3.0 + 0.0) / v104;
    v112 = -v113;
    if (v113 >= 0.0)
      v112 = v113;
  }
  v108 = v112 + 1.0;
  v106 = v17 * v77;
  v107 = 0.0;
  if (v106 >= 0.0)
  {
    v121 = v106 + 0.0;
    goto LABEL_188;
  }
LABEL_168:
  v114 = v104 - v106;
  if (v106 > 0.0 || v104 < 0.0)
  {
    v117 = (v106 * 3.0 + v104 * v108) / v114;
    if (v117 < 0.0)
      v117 = -v117;
    v108 = v117 + 1.0;
    v115 = v31 * v86;
    v116 = v31 * v86 <= 0.0;
    if (v31 * v86 >= 0.0)
    {
LABEL_177:
      v118 = v115 + v105;
      if (v105 < 0.0 && (v115 > 0.0 || v105 > 0.0))
      {
        v107 = (v107 * v105 + v115 * -3.0) / v118;
        v119 = -v107;
        v120 = v107 < 0.0;
      }
      else
      {
        v119 = 3.0;
        v120 = v107 < 3.0;
      }
      if (v120)
        v107 = v119;
      v107 = v107 + 1.0;
      v126 = v49 * v31 * v84;
      if (v126 < 0.0)
        goto LABEL_214;
      goto LABEL_199;
    }
  }
  else
  {
    if (v108 < 3.0)
      v108 = 3.0;
    v108 = v108 + 1.0;
    v115 = v31 * v86;
    v116 = v31 * v86 <= 0.0;
    if (v31 * v86 >= 0.0)
      goto LABEL_177;
  }
LABEL_191:
  v123 = v114 - v115;
  if (v116 && v114 >= 0.0)
  {
    v124 = 3.0;
    v125 = v108 < 3.0;
  }
  else
  {
    v108 = (v115 * 3.0 + v108 * v114) / v123;
    v124 = -v108;
    v125 = v108 < 0.0;
  }
  if (v125)
    v108 = v124;
  v108 = v108 + 1.0;
  v118 = v105;
  v114 = v123;
  v126 = v49 * v31 * v84;
  if (v126 < 0.0)
  {
LABEL_214:
    v128 = 0.0;
    v127 = 0.0 - v126;
    v134 = 5.0;
    if (v126 > 0.0)
    {
      v135 = (v126 * 5.0 + 0.0) / v127;
      v134 = -v135;
      if (v135 >= 0.0)
        v134 = v135;
    }
    v131 = v134 + 1.0;
    v129 = v17 * v51 * v84;
    if (v129 < 0.0)
    {
      v130 = 0.0;
      goto LABEL_219;
    }
    v132 = v129 + v127;
    v130 = 0.0;
    if (v127 < 0.0 && (v129 > 0.0 || v127 > 0.0))
    {
      v131 = (v127 * v131 + v129 * -5.0) / v132;
      if (v131 < 0.0)
        v131 = -v131;
      v130 = 0.0;
LABEL_235:
      v131 = v131 + 1.0;
      v127 = v132;
      v136 = v128;
      v139 = v87 * (v51 * v47);
      v140 = v139 <= 0.0;
      if (v139 >= 0.0)
        goto LABEL_226;
      goto LABEL_236;
    }
LABEL_233:
    if (v131 < 5.0)
      v131 = 5.0;
    goto LABEL_235;
  }
LABEL_199:
  v127 = 0.0;
  v128 = v126 + 0.0;
  v129 = v17 * v51 * v84;
  v130 = 6.0;
  v131 = 0.0;
  if (v129 >= 0.0)
  {
    v132 = v129 + 0.0;
    goto LABEL_233;
  }
LABEL_219:
  v136 = v128 - v129;
  if (v129 > 0.0 || v128 < 0.0)
  {
    v130 = (v129 * 5.0 + v128 * v130) / v136;
    v137 = -v130;
    v138 = v130 < 0.0;
  }
  else
  {
    v137 = 5.0;
    v138 = v130 < 5.0;
  }
  if (v138)
    v130 = v137;
  v130 = v130 + 1.0;
  v139 = v87 * (v51 * v47);
  v140 = v139 <= 0.0;
  if (v139 >= 0.0)
  {
LABEL_226:
    v141 = v139 + v136;
    if (v136 < 0.0 && (v139 > 0.0 || v136 > 0.0))
    {
      v130 = (v130 * v136 + v139 * -5.0) / v141;
      v142 = -v130;
      v143 = v130 < 0.0;
    }
    else
    {
      v142 = 5.0;
      v143 = v130 < 5.0;
    }
    if (v143)
      v130 = v142;
    v130 = v130 + 1.0;
    v147 = v87 * (v31 * v37);
    v148 = v147 <= 0.0;
    if (v147 < 0.0)
      goto LABEL_252;
    goto LABEL_244;
  }
LABEL_236:
  v144 = v127 - v139;
  if (v140 && v127 >= 0.0)
  {
    v145 = 5.0;
    v146 = v131 < 5.0;
  }
  else
  {
    v131 = (v139 * 5.0 + v131 * v127) / v144;
    v145 = -v131;
    v146 = v131 < 0.0;
  }
  if (v146)
    v131 = v145;
  v131 = v131 + 1.0;
  v127 = v144;
  v141 = v136;
  v147 = v87 * (v31 * v37);
  v148 = v147 <= 0.0;
  if (v147 < 0.0)
  {
LABEL_252:
    if (v148 && v141 >= 0.0)
    {
      v152 = 5.0;
      v153 = v130 < 5.0;
    }
    else
    {
      v130 = (v147 * 5.0 + v130 * v141) / (v141 - v147);
      v152 = -v130;
      v153 = v130 < 0.0;
    }
    if (v153)
      v130 = v152;
    v130 = v130 + 1.0;
    v149 = v127;
    v141 = v141 - v147;
    v154 = v89 * (v17 * v37);
    v155 = v154 <= 0.0;
    if (v154 >= 0.0)
      goto LABEL_260;
    goto LABEL_268;
  }
LABEL_244:
  v149 = v147 + v127;
  if (v127 < 0.0 && (v147 > 0.0 || v127 > 0.0))
  {
    v131 = (v131 * v127 + v147 * -5.0) / v149;
    v150 = -v131;
    v151 = v131 < 0.0;
  }
  else
  {
    v150 = 5.0;
    v151 = v131 < 5.0;
  }
  if (v151)
    v131 = v150;
  v131 = v131 + 1.0;
  v154 = v89 * (v17 * v37);
  v155 = v154 <= 0.0;
  if (v154 >= 0.0)
  {
LABEL_260:
    v156 = v154 + v141;
    if (v141 < 0.0 && (v154 > 0.0 || v141 > 0.0))
    {
      v130 = (v130 * v141 + v154 * -5.0) / v156;
      v157 = -v130;
      v158 = v130 < 0.0;
    }
    else
    {
      v157 = 5.0;
      v158 = v130 < 5.0;
    }
    if (v158)
      v130 = v157;
    v130 = v130 + 1.0;
    v162 = v89 * (v49 * v47);
    v163 = v162 <= 0.0;
    if (v162 < 0.0)
      goto LABEL_284;
    goto LABEL_276;
  }
LABEL_268:
  v159 = v149 - v154;
  if (v155 && v149 >= 0.0)
  {
    v160 = 5.0;
    v161 = v131 < 5.0;
  }
  else
  {
    v131 = (v154 * 5.0 + v131 * v149) / v159;
    v160 = -v131;
    v161 = v131 < 0.0;
  }
  if (v161)
    v131 = v160;
  v131 = v131 + 1.0;
  v149 = v159;
  v156 = v141;
  v162 = v89 * (v49 * v47);
  v163 = v162 <= 0.0;
  if (v162 < 0.0)
  {
LABEL_284:
    if (v163 && v156 >= 0.0)
    {
      v167 = 5.0;
      if (v130 >= 5.0)
        v167 = v130;
    }
    else
    {
      v167 = (v162 * 5.0 + v130 * v156) / (v156 - v162);
      if (v167 < 0.0)
        v167 = -v167;
    }
    v130 = v167 + 1.0;
    v164 = v149;
    v156 = v156 - v162;
    v168 = v50 * v31 * v84;
    if (v168 >= 0.0)
      goto LABEL_293;
    goto LABEL_299;
  }
LABEL_276:
  v164 = v162 + v149;
  if (v149 < 0.0 && (v162 > 0.0 || v149 > 0.0))
  {
    v131 = (v131 * v149 + v162 * -5.0) / v164;
    v165 = -v131;
    v166 = v131 < 0.0;
  }
  else
  {
    v165 = 5.0;
    v166 = v131 < 5.0;
  }
  if (v166)
    v131 = v165;
  v131 = v131 + 1.0;
  v168 = v50 * v31 * v84;
  if (v168 >= 0.0)
  {
LABEL_293:
    v169 = 0.0;
    v170 = v168 + 0.0;
    v171 = v17 * v52 * v84;
    v172 = 6.0;
    v173 = 0.0;
    if (v171 >= 0.0)
    {
      v174 = v171 + 0.0;
      goto LABEL_318;
    }
    goto LABEL_304;
  }
LABEL_299:
  v170 = 0.0;
  v169 = 0.0 - v168;
  v175 = 5.0;
  if (v168 > 0.0)
  {
    v176 = (v168 * 5.0 + 0.0) / v169;
    v175 = -v176;
    if (v176 >= 0.0)
      v175 = v176;
  }
  v173 = v175 + 1.0;
  v171 = v17 * v52 * v84;
  if (v171 >= 0.0)
  {
    v174 = v171 + v169;
    v172 = 0.0;
    if (v169 < 0.0 && (v171 > 0.0 || v169 > 0.0))
    {
      v227 = (v169 * v173 + v171 * -5.0) / v174;
      v173 = -v227;
      if (v227 >= 0.0)
        v173 = v227;
      v172 = 0.0;
LABEL_320:
      v173 = v173 + 1.0;
      v169 = v174;
      v177 = v170;
      v180 = v87 * (v52 * v47);
      v181 = v180 <= 0.0;
      if (v180 < 0.0)
        goto LABEL_321;
      goto LABEL_311;
    }
LABEL_318:
    if (v173 < 5.0)
      v173 = 5.0;
    goto LABEL_320;
  }
  v172 = 0.0;
LABEL_304:
  v177 = v170 - v171;
  if (v171 > 0.0 || v170 < 0.0)
  {
    v172 = (v171 * 5.0 + v170 * v172) / v177;
    v178 = -v172;
    v179 = v172 < 0.0;
  }
  else
  {
    v178 = 5.0;
    v179 = v172 < 5.0;
  }
  if (v179)
    v172 = v178;
  v172 = v172 + 1.0;
  v180 = v87 * (v52 * v47);
  v181 = v180 <= 0.0;
  if (v180 < 0.0)
  {
LABEL_321:
    v185 = v169 - v180;
    if (v181 && v169 >= 0.0)
    {
      v186 = 5.0;
      v187 = v173 < 5.0;
    }
    else
    {
      v173 = (v180 * 5.0 + v173 * v169) / v185;
      v186 = -v173;
      v187 = v173 < 0.0;
    }
    if (v187)
      v173 = v186;
    v173 = v173 + 1.0;
    v169 = v185;
    v182 = v177;
    v188 = v87 * (v31 * v38);
    v189 = v188 <= 0.0;
    if (v188 >= 0.0)
      goto LABEL_329;
LABEL_352:
    if (v189 && v182 >= 0.0)
    {
      v201 = 5.0;
      if (v172 >= 5.0)
        v201 = v172;
    }
    else
    {
      v201 = (v188 * 5.0 + v172 * v182) / (v182 - v188);
      if (v201 < 0.0)
        v201 = -v201;
    }
    v172 = v201 + 1.0;
    v190 = v169;
    v182 = v182 - v188;
    v192 = v89 * (v17 * v38);
    v193 = v192 <= 0.0;
    if (v192 >= 0.0)
      goto LABEL_335;
    goto LABEL_361;
  }
LABEL_311:
  v182 = v180 + v177;
  if (v177 < 0.0 && (v180 > 0.0 || v177 > 0.0))
  {
    v172 = (v172 * v177 + v180 * -5.0) / v182;
    v183 = -v172;
    v184 = v172 < 0.0;
  }
  else
  {
    v183 = 5.0;
    v184 = v172 < 5.0;
  }
  if (v184)
    v172 = v183;
  v172 = v172 + 1.0;
  v188 = v87 * (v31 * v38);
  v189 = v188 <= 0.0;
  if (v188 < 0.0)
    goto LABEL_352;
LABEL_329:
  v190 = v188 + v169;
  if (v169 < 0.0 && (v188 > 0.0 || v169 > 0.0))
  {
    v206 = (v173 * v169 + v188 * -5.0) / v190;
    if (v206 < 0.0)
      v206 = -v206;
    v173 = v206 + 1.0;
    v192 = v89 * (v17 * v38);
    v193 = v192 <= 0.0;
    if (v192 >= 0.0)
      goto LABEL_335;
LABEL_361:
    v202 = v190 - v192;
    if (v193 && v190 >= 0.0)
    {
      v203 = 5.0;
      if (v173 >= 5.0)
        v203 = v173;
    }
    else
    {
      v203 = (v192 * 5.0 + v173 * v190) / v202;
      if (v203 < 0.0)
        v203 = -v203;
    }
    v173 = v203 + 1.0;
    v190 = v202;
    v194 = v182;
    v196 = v89 * (v50 * v47);
    v197 = v196 <= 0.0;
    if (v196 < 0.0)
      goto LABEL_370;
    goto LABEL_341;
  }
  v191 = 5.0;
  if (v173 >= 5.0)
    v191 = v173;
  v173 = v191 + 1.0;
  v192 = v89 * (v17 * v38);
  v193 = v192 <= 0.0;
  if (v192 < 0.0)
    goto LABEL_361;
LABEL_335:
  v194 = v192 + v182;
  if (v182 >= 0.0 || v192 <= 0.0 && v182 <= 0.0)
  {
    v195 = 5.0;
    if (v172 >= 5.0)
      v195 = v172;
    v172 = v195 + 1.0;
    v196 = v89 * (v50 * v47);
    v197 = v196 <= 0.0;
    if (v196 >= 0.0)
      goto LABEL_341;
LABEL_370:
    v204 = v194 - v196;
    if (v197 && v194 >= 0.0)
    {
      v205 = 5.0;
      if (v172 >= 5.0)
        v205 = v172;
    }
    else
    {
      v205 = (v196 * 5.0 + v172 * v194) / v204;
      if (v205 < 0.0)
        v205 = -v205;
    }
    v172 = v205 + 1.0;
    v198 = v190;
    v194 = v204;
    v200 = v114 + v156;
    if (v114 < 0.0)
      goto LABEL_392;
    goto LABEL_391;
  }
  v207 = (v172 * v182 + v192 * -5.0) / v194;
  if (v207 < 0.0)
    v207 = -v207;
  v172 = v207 + 1.0;
  v196 = v89 * (v50 * v47);
  v197 = v196 <= 0.0;
  if (v196 < 0.0)
    goto LABEL_370;
LABEL_341:
  v198 = v196 + v190;
  if (v190 < 0.0 && (v196 > 0.0 || v190 > 0.0))
  {
    v208 = (v173 * v190 + v196 * -5.0) / v198;
    if (v208 < 0.0)
      v208 = -v208;
    v173 = v208 + 1.0;
    v200 = v114 + v156;
    if (v114 < 0.0)
      goto LABEL_392;
  }
  else
  {
    v199 = 5.0;
    if (v173 >= 5.0)
      v199 = v173;
    v173 = v199 + 1.0;
    v200 = v114 + v156;
    if (v114 < 0.0)
      goto LABEL_392;
  }
LABEL_391:
  if (v156 >= 0.0)
  {
LABEL_394:
    if (v130 >= v108)
      v209 = v130;
    else
      v209 = v108;
    goto LABEL_397;
  }
LABEL_392:
  if (v114 <= 0.0 && v156 <= 0.0)
    goto LABEL_394;
  v209 = (v130 * v156 - v108 * v114) / v200;
  if (v209 < 0.0)
    v209 = -v209;
LABEL_397:
  v210 = v118 + v164;
  if ((v164 < 0.0 || v118 < 0.0) && (v164 > 0.0 || v118 > 0.0))
  {
    v211 = (v131 * v164 - v107 * v118) / v210;
    if (v211 < 0.0)
      v211 = -v211;
  }
  else if (v131 >= v107)
  {
    v211 = v131;
  }
  else
  {
    v211 = v107;
  }
  v212 = v102 - v98;
  if ((v98 > 0.0 || v102 < 0.0) && (v98 < 0.0 || v102 > 0.0))
  {
    v94 = (v94 * v98 + v96 * v102) / v212;
    if (v94 < 0.0)
      v94 = -v94;
  }
  else if (v96 >= v94)
  {
    v94 = v96;
  }
  v213 = v164 < 0.0;
  if (v156 > 0.0)
    v213 = 1;
  v214 = v164 > 0.0 || v156 < 0.0;
  v215 = v94 + 1.0;
  v216 = v156 - v164;
  if (v214 && v213)
  {
    v217 = (v131 * v164 + v130 * v156) / v216;
    if (v217 < 0.0)
      v217 = -v217;
  }
  else if (v130 >= v131)
  {
    v217 = v130;
  }
  else
  {
    v217 = v131;
  }
  v218 = v215 + v217 + 1.0;
  v219 = v194 - v198;
  if ((v194 < 0.0 || v198 > 0.0) && (v194 > 0.0 || v198 < 0.0))
  {
    v220 = (v173 * v198 + v172 * v194) / v219;
    if (v220 < 0.0)
      v220 = -v220;
  }
  else if (v172 >= v173)
  {
    v220 = v172;
  }
  else
  {
    v220 = v173;
  }
  v221 = v209 + 1.0;
  v222 = v211 + 1.0;
  v223 = v200 - v210;
  if ((v200 < 0.0 || v210 > 0.0) && (v200 > 0.0 || v210 < 0.0))
  {
    v224 = (v200 * v221 + v210 * v222) / v223;
    if (v224 < 0.0)
      v224 = -v224;
  }
  else if (v221 >= v222)
  {
    v224 = v209 + 1.0;
  }
  else
  {
    v224 = v211 + 1.0;
  }
  v225 = v215 + v224 + 1.0 + 1.0;
  *(double *)a5 = v216 / v212;
  *(double *)(a5 + 8) = v219 / v212;
  *(double *)(a5 + 16) = v223 / v212;
  *(_BYTE *)(a5 + 24) = 1;
  if (v218 + 1.0 > 64.0 || v215 + v220 + 1.0 + 1.0 > 64.0 || v225 > 64.0)
    sub_223F23840();
}

void sub_223F143E8()
{
  int *v0;
  int *v1;
  int *v2;
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  double v69;
  _DWORD *v70;
  double v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  unint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int *v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int *v133;
  unint64_t v134;
  double v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unsigned int *v149;
  unint64_t v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unsigned int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  int *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  double v172;
  int *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unsigned int *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unsigned int *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unsigned int *v216;
  unint64_t v217;
  int v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  int v225;
  _DWORD *v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unsigned int *v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unsigned int *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unsigned int *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  int v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  _DWORD *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  int *v271;
  unint64_t v272;
  uint64_t v273;
  int v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  int *v281;
  double v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  double v298;
  int v299;
  double v300;
  int *v301;
  double v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  double v306;
  uint64_t v307;
  int v308;
  double v309;
  int *v310;
  int v311;
  int v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  int v318;
  _DWORD *v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  int *v325;
  unint64_t v326;
  int v327;
  int v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  int v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unsigned int *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  int v347;
  double v348;
  int *v349;
  int v350;
  unsigned int v351;
  int v352;
  unsigned int v353;
  int v354;
  int v355;
  char v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367[64];
  int v368;
  int v369[64];
  int v370;
  _DWORD v371[64];
  int v372;
  int v373[64];
  int v374;
  int v375[64];
  int v376;
  _DWORD v377[64];
  int v378;
  int v379[64];
  int v380;
  int v381[64];
  int v382;
  _DWORD v383[64];
  int v384;
  int v385[64];
  int v386;
  int v387[64];
  int v388;
  int v389;
  int v390;
  int v391;
  int __src[64];
  int v393;
  _DWORD __dst[64];
  int v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  int v403;
  _DWORD v404[64];
  int v405;
  _DWORD v406[64];
  int v407;
  _DWORD v408[64];
  int v409;
  _DWORD v410[64];
  int v411;
  _DWORD v412[64];
  int v413;
  _DWORD v414[65];
  uint64_t v415;

  MEMORY[0x24BDAC7A8]();
  v358 = v5;
  v356 = v6;
  v415 = *MEMORY[0x24BDAC8D0];
  v7 = *v0;
  v8 = *v1;
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      v362 = 0;
      v363 = 1;
      v411 = 0;
      v11 = *v2;
      v12 = v8 - v11;
      if (v8 > v11)
        goto LABEL_4;
      goto LABEL_10;
    }
    v10 = v8 - v7;
    v362 = -1;
  }
  else
  {
    v362 = 1;
    v10 = v7 - v8;
  }
  v363 = 0;
  v410[0] = v10;
  v410[1] = 0;
  v411 = v362;
  v11 = *v2;
  v12 = v8 - v11;
  if (v8 > v11)
  {
LABEL_4:
    v13 = 1;
    LODWORD(v14) = v12;
    goto LABEL_5;
  }
LABEL_10:
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = 0;
    v364 = 1;
    v413 = 0;
    v15 = v7 - v11;
    if (v7 > v11)
      goto LABEL_6;
    goto LABEL_12;
  }
  v14 = -v12;
  v13 = -1;
LABEL_5:
  v364 = 0;
  v412[0] = v14;
  v412[1] = 0;
  v413 = v13;
  v15 = v7 - v11;
  if (v7 > v11)
  {
LABEL_6:
    v16 = 1;
LABEL_7:
    v355 = 0;
    v414[0] = v15;
    v414[1] = 0;
    goto LABEL_14;
  }
LABEL_12:
  if (v15 < 0)
  {
    v15 = -v15;
    v16 = -1;
    goto LABEL_7;
  }
  LODWORD(v15) = 0;
  v16 = 0;
  v355 = 1;
LABEL_14:
  v414[64] = v16;
  v17 = v0[1];
  v18 = v1[1];
  v353 = v15;
  v360 = v17 - v18;
  if (v17 <= v18)
  {
    if (((v17 - v18) & 0x8000000000000000) == 0)
    {
      v20 = 0;
      v19 = 0;
      v365 = 1;
      v405 = 0;
      v21 = v2[1];
      v22 = v18 - v21;
      v352 = v16;
      v357 = v4;
      if (v18 > v21)
        goto LABEL_17;
      goto LABEL_25;
    }
    v20 = v18 - v17;
    v19 = -1;
  }
  else
  {
    v19 = 1;
    v20 = v17 - v18;
  }
  v365 = 0;
  v404[0] = v20;
  v404[1] = 0;
  v405 = v19;
  v21 = v2[1];
  v22 = v18 - v21;
  v352 = v16;
  v357 = v4;
  if (v18 > v21)
  {
LABEL_17:
    v23 = 1;
    v24 = v22;
    goto LABEL_18;
  }
LABEL_25:
  if ((v22 & 0x8000000000000000) == 0)
  {
    v24 = 0;
    v23 = 0;
    v366 = 1;
    v407 = 0;
    v25 = v17 - v21;
    if (v17 > v21)
      goto LABEL_19;
    goto LABEL_27;
  }
  v24 = -v22;
  v23 = -1;
LABEL_18:
  v366 = 0;
  v406[0] = v24;
  v406[1] = 0;
  v407 = v23;
  v25 = v17 - v21;
  if (v17 > v21)
  {
LABEL_19:
    v26 = 1;
    goto LABEL_20;
  }
LABEL_27:
  if (v25 < 0)
  {
    v25 = -v25;
    v26 = -1;
LABEL_20:
    v354 = 0;
    v408[0] = v25;
    v408[1] = 0;
    v409 = v26;
    v27 = v8 + v7;
    if (v27 >= 1)
      goto LABEL_21;
    goto LABEL_29;
  }
  LODWORD(v25) = 0;
  v26 = 0;
  v354 = 1;
  v409 = 0;
  v27 = v8 + v7;
  if (v27 >= 1)
  {
LABEL_21:
    v400 = v27;
    v28 = 1;
    v401 = 1;
    v29 = v11 + v8;
    if (v29 < 1)
      goto LABEL_43;
    goto LABEL_31;
  }
LABEL_29:
  if (v27 < 0)
  {
    v400 = -v27;
    if ((unint64_t)-v27 >> 32)
      v28 = -2;
    else
      v28 = -1;
    v401 = v28;
    v29 = v11 + v8;
    if (v29 < 1)
    {
LABEL_43:
      if (v29 < 0)
      {
        v402 = -v29;
        if ((unint64_t)-v29 >> 32)
          v30 = -2;
        else
          v30 = -1;
        v403 = v30;
        v31 = v18 + v17;
        if (v18 + v17 >= 1)
          goto LABEL_45;
      }
      else
      {
        v30 = 0;
        v403 = 0;
        v31 = v18 + v17;
        if (v18 + v17 >= 1)
          goto LABEL_45;
      }
LABEL_50:
      if (v31 < 0)
      {
        v396 = -v31;
        if ((unint64_t)-v31 >> 32)
          v32 = -2;
        else
          v32 = -1;
      }
      else
      {
        v32 = 0;
      }
      goto LABEL_55;
    }
  }
  else
  {
    v28 = 0;
    v401 = 0;
    v29 = v11 + v8;
    if (v29 < 1)
      goto LABEL_43;
  }
LABEL_31:
  v402 = v29;
  v30 = 1;
  v403 = 1;
  v31 = v18 + v17;
  if (v18 + v17 < 1)
    goto LABEL_50;
LABEL_45:
  v396 = v31;
  v32 = 1;
LABEL_55:
  v397 = v32;
  v33 = v21 + v18;
  v359 = v3;
  v351 = v25;
  v350 = v26;
  if (v21 + v18 < 1)
  {
    if (v33 < 0)
    {
      v398 = -v33;
      if ((unint64_t)-v33 >> 32)
        v34 = -2;
      else
        v34 = -1;
    }
    else
    {
      v34 = 0;
    }
  }
  else
  {
    v398 = v33;
    v34 = 1;
  }
  v35 = v412;
  v399 = v34;
  if ((v363 | v366) == 1)
  {
    v393 = 0;
  }
  else
  {
    v36 = 0;
    v37 = 0;
    if (v362 >= 0)
      v38 = v362;
    else
      v38 = -v362;
    if (v23 >= 0)
      v39 = v23;
    else
      v39 = -v23;
    v40 = v38 - 1;
    v41 = v40 + v39;
    if (v40 + v39 >= 0x40)
      v41 = 64;
    v393 = v41;
    do
    {
      v43 = 0;
      v44 = 0;
      if (v36 >= v40)
        v45 = v40;
      else
        v45 = v36;
      v46 = ~v45;
      v47 = v410;
      do
      {
        if (v36 + v43 < v39)
        {
          v48 = v24 * *v47;
          v37 += v48;
          v44 += HIDWORD(v48);
        }
        --v43;
        ++v47;
      }
      while (v46 != v43);
      __src[v36] = v37;
      v37 = v44 + HIDWORD(v37);
      ++v36;
      v42 = v393;
    }
    while (v36 < v393);
    if (v37 && v393 != 64)
    {
      __src[v393] = v37;
      v42 = ++v393;
    }
    if (v9 > 0 != v22 > 0)
      v393 = -v42;
  }
  v361 = v19;
  if ((v364 | v365) == 1)
  {
    v49 = v12;
    v391 = 0;
  }
  else
  {
    v50 = 0;
    v51 = 0;
    if (v13 >= 0)
      v52 = v13;
    else
      v52 = -v13;
    if (v19 >= 0)
      v53 = v19;
    else
      v53 = -v19;
    v54 = v52 - 1;
    v55 = v54 + v53;
    if (v54 + v53 >= 0x40)
      v55 = 64;
    v391 = v55;
    do
    {
      v57 = 0;
      v58 = 0;
      if (v50 >= v54)
        v59 = v54;
      else
        v59 = v50;
      v60 = ~v59;
      v61 = v412;
      do
      {
        if (v50 + v57 < v53)
        {
          v62 = v20 * (unint64_t)*v61;
          v51 += v62;
          v58 += HIDWORD(v62);
        }
        --v57;
        ++v61;
      }
      while (v60 != v57);
      *(&v389 + v50) = v51;
      v51 = v58 + HIDWORD(v51);
      ++v50;
      v56 = v391;
    }
    while (v50 < v391);
    if (v51 && v391 != 64)
    {
      *(&v389 + v391) = v51;
      v56 = ++v391;
    }
    v49 = v12;
    if (v12 > 0 != v360 > 0)
      v391 = -v56;
  }
  sub_223F15F80(__dst, __src, &v389);
  if (v395 >= 0)
    v67 = v395;
  else
    v67 = -v395;
  if ((_DWORD)v67)
  {
    if (v67 == 1)
    {
      v68 = 0;
      LODWORD(v63) = __dst[0];
      v69 = (double)v63;
    }
    else if (v67 == 2)
    {
      v68 = 0;
      LODWORD(v63) = __dst[1];
      LODWORD(v64) = __dst[0];
      v69 = (double)v63 * 4294967300.0 + (double)v64;
    }
    else
    {
      v70 = &__dst[v67];
      LODWORD(v65) = *(v70 - 2);
      LODWORD(v63) = *(v70 - 1);
      LODWORD(v66) = *(v70 - 3);
      v69 = ((double)v63 * 4294967300.0 + (double)v65) * 4294967300.0 + (double)v66;
      v68 = 32 * v67 - 96;
    }
    if (v395 < 0)
      v69 = -v69;
  }
  else
  {
    v68 = 0;
    v69 = 0.0;
  }
  v71 = ldexp(v69, v68);
  v72 = v363;
  if (!v28)
    v72 = 1;
  if (v72 == 1)
  {
    v393 = 0;
  }
  else
  {
    v73 = 0;
    v74 = 0;
    if (v362 >= 0)
      v75 = v362;
    else
      v75 = -v362;
    if (v28 >= 0)
      v76 = v28;
    else
      v76 = -v28;
    v77 = v75 - 1;
    v78 = v77 + v76;
    if (v77 + v76 >= 0x40)
      v78 = 64;
    v393 = v78;
    v79 = &v400;
    do
    {
      v81 = 0;
      v82 = 0;
      if (v73 >= v77)
        v83 = v77;
      else
        v83 = v73;
      v84 = ~v83;
      v85 = v410;
      do
      {
        if (v73 + v81 < v76)
        {
          v86 = *((unsigned int *)v79 + v81) * (unint64_t)*v85;
          v74 += v86;
          v82 += HIDWORD(v86);
        }
        --v81;
        ++v85;
      }
      while (v84 != v81);
      __src[v73] = v74;
      v74 = v82 + HIDWORD(v74);
      ++v73;
      v80 = v393;
      v79 = (uint64_t *)((char *)v79 + 4);
    }
    while (v73 < v393);
    if (v74 && v393 != 64)
    {
      __src[v393] = v74;
      v80 = ++v393;
    }
    if (v9 > 0 != v28 > 0)
      v393 = -v80;
  }
  v87 = v365;
  if (!v32)
    v87 = 1;
  v88 = v13;
  if (v87 == 1)
  {
    v391 = 0;
  }
  else
  {
    v89 = 0;
    v90 = 0;
    if (v361 >= 0)
      v91 = v361;
    else
      v91 = -v361;
    if (v32 >= 0)
      v92 = v32;
    else
      v92 = -v32;
    v93 = v91 - 1;
    v94 = v93 + v92;
    if (v93 + v92 >= 0x40)
      v94 = 64;
    v391 = v94;
    v95 = &v396;
    do
    {
      v97 = 0;
      v98 = 0;
      if (v89 >= v93)
        v99 = v93;
      else
        v99 = v89;
      v100 = ~v99;
      v101 = v404;
      do
      {
        if (v89 + v97 < v92)
        {
          v102 = *((unsigned int *)v95 + v97) * (unint64_t)*v101;
          v90 += v102;
          v98 += HIDWORD(v102);
        }
        --v97;
        ++v101;
      }
      while (v100 != v97);
      *(&v389 + v89) = v90;
      v90 = v98 + HIDWORD(v90);
      ++v89;
      v96 = v391;
      v95 = (uint64_t *)((char *)v95 + 4);
    }
    while (v89 < v391);
    if (v90 && v391 != 64)
    {
      *(&v389 + v391) = v90;
      v96 = ++v391;
    }
    if (v360 > 0 != v32 > 0)
      v391 = -v96;
  }
  sub_223F1625C(__dst, __src, &v389);
  v103 = v364;
  if (!v30)
    v103 = 1;
  if (v103 == 1)
  {
    v391 = 0;
    v104 = v23;
    v105 = v357;
  }
  else
  {
    v106 = 0;
    v107 = 0;
    v108 = &v402;
    if (v13 >= 0)
      v109 = v13;
    else
      v109 = -v13;
    if (v30 >= 0)
      v110 = v30;
    else
      v110 = -v30;
    v111 = v109 - 1;
    v112 = v111 + v110;
    if (v111 + v110 >= 0x40)
      v112 = 64;
    v391 = v112;
    do
    {
      v114 = 0;
      v115 = 0;
      if (v106 >= v111)
        v116 = v111;
      else
        v116 = v106;
      v117 = ~v116;
      v118 = v412;
      do
      {
        if (v106 + v114 < v110)
        {
          v119 = *((unsigned int *)v108 + v114) * (unint64_t)*v118;
          v107 += v119;
          v115 += HIDWORD(v119);
        }
        --v114;
        ++v118;
      }
      while (v117 != v114);
      *(&v389 + v106) = v107;
      v107 = v115 + HIDWORD(v107);
      ++v106;
      v113 = v391;
      v108 = (uint64_t *)((char *)v108 + 4);
    }
    while (v106 < v391);
    if (v107)
    {
      v104 = v23;
      if (v391 != 64)
      {
        *(&v389 + v391) = v107;
        v113 = ++v391;
      }
    }
    else
    {
      v104 = v23;
    }
    v105 = v357;
    if (v49 > 0 != v30 > 0)
      v391 = -v113;
  }
  v120 = v366;
  if (!v34)
    v120 = 1;
  if (v120 == 1)
  {
    v388 = 0;
  }
  else
  {
    v121 = 0;
    v122 = 0;
    if (v104 >= 0)
      v123 = v104;
    else
      v123 = -v104;
    if (v34 >= 0)
      v124 = v34;
    else
      v124 = -v34;
    v125 = v123 - 1;
    v126 = 64;
    if (v125 + v124 < 0x40)
      v126 = v125 + v124;
    v127 = &v398;
    v388 = v126;
    do
    {
      v129 = 0;
      v130 = 0;
      if (v121 >= v125)
        v131 = v125;
      else
        v131 = v121;
      v132 = ~v131;
      v133 = v406;
      do
      {
        if (v121 + v129 < v124)
        {
          v134 = *((unsigned int *)v127 + v129) * (unint64_t)*v133;
          v122 += v134;
          v130 += HIDWORD(v134);
        }
        --v129;
        ++v133;
      }
      while (v132 != v129);
      v387[v121] = v122;
      v122 = v130 + HIDWORD(v122);
      ++v121;
      v128 = v388;
      v127 = (uint64_t *)((char *)v127 + 4);
    }
    while (v121 < v388);
    if (v122 && v388 != 64)
    {
      v387[v388] = v122;
      v128 = ++v388;
    }
    if (v22 > 0 != v34 > 0)
      v388 = -v128;
  }
  v135 = 0.5 / v71;
  sub_223F1625C(__src, &v389, v387);
  if ((v356 & 1) != 0 || v105)
  {
    v136 = v395;
    if (((v395 != 0) & ~v366) != 0)
    {
      v137 = 0;
      v138 = 0;
      if (v395 >= 0)
        v139 = v395;
      else
        v139 = -v395;
      if (v104 >= 0)
        v140 = v104;
      else
        v140 = -v104;
      v141 = v139 - 1;
      v142 = v141 + v140;
      if (v141 + v140 >= 0x40)
        v142 = 64;
      v388 = v142;
      v143 = v406[0];
      do
      {
        v145 = 0;
        v146 = 0;
        if (v137 >= v141)
          v147 = v141;
        else
          v147 = v137;
        v148 = ~v147;
        v149 = __dst;
        do
        {
          if (v137 + v145 < v140)
          {
            v150 = v143 * (unint64_t)*v149;
            v138 += v150;
            v146 += HIDWORD(v150);
          }
          --v145;
          ++v149;
        }
        while (v148 != v145);
        v387[v137] = v138;
        v138 = v146 + HIDWORD(v138);
        ++v137;
        v144 = v388;
      }
      while (v137 < v388);
      if (v138 && v388 != 64)
      {
        v387[v388] = v138;
        v144 = ++v388;
      }
      if (v22 > 0 != v136 > 0)
        v388 = -v144;
    }
    else
    {
      v388 = 0;
    }
    v151 = v393;
    if (((v393 != 0) & ~v365) != 0)
    {
      v152 = 0;
      v153 = 0;
      if (v393 >= 0)
        v154 = v393;
      else
        v154 = -v393;
      if (v361 >= 0)
        v155 = v361;
      else
        v155 = -v361;
      v156 = v154 - 1;
      v157 = v156 + v155;
      if (v156 + v155 >= 0x40)
        v157 = 64;
      v386 = v157;
      v158 = v404[0];
      do
      {
        v160 = 0;
        v161 = 0;
        if (v152 >= v156)
          v162 = v156;
        else
          v162 = v152;
        v163 = ~v162;
        v164 = __src;
        do
        {
          if (v152 + v160 < v155)
          {
            v165 = v158 * (unint64_t)*v164;
            v153 += v165;
            v161 += HIDWORD(v165);
          }
          --v160;
          ++v164;
        }
        while (v163 != v160);
        v385[v152] = v153;
        v153 = v161 + HIDWORD(v153);
        ++v152;
        v159 = v386;
      }
      while (v152 < v386);
      if (v153 && v386 != 64)
      {
        v385[v386] = v153;
        v159 = ++v386;
      }
      if (v360 > 0 != v151 > 0)
        v386 = -v159;
    }
    else
    {
      v386 = 0;
    }
    sub_223F15F80(&v389, v387, v385);
    if (v391 >= 0)
      v170 = v391;
    else
      v170 = -v391;
    if ((_DWORD)v170)
    {
      if (v170 == 1)
      {
        v171 = 0;
        LODWORD(v166) = v389;
        v172 = (double)v166;
      }
      else if (v170 == 2)
      {
        v171 = 0;
        LODWORD(v166) = v390;
        LODWORD(v167) = v389;
        v172 = (double)v166 * 4294967300.0 + (double)v167;
      }
      else
      {
        v173 = &v389 + v170;
        LODWORD(v168) = *(v173 - 2);
        LODWORD(v166) = *(v173 - 1);
        LODWORD(v169) = *(v173 - 3);
        v172 = ((double)v166 * 4294967300.0 + (double)v168) * 4294967300.0 + (double)v169;
        v171 = 32 * v170 - 96;
      }
      if (v391 < 0)
        v172 = -v172;
      *(long double *)v359 = v135 * ldexp(v172, v171);
      if (v105)
      {
LABEL_291:
        if (v363)
        {
          v382 = 0;
        }
        else
        {
          v174 = 0;
          v175 = 0;
          if (v362 >= 0)
            v176 = v362;
          else
            v176 = -v362;
          v177 = v176 - 1 + v176;
          if (v177 >= 0x40)
            LODWORD(v177) = 64;
          v382 = v177;
          v178 = v410[0];
          do
          {
            v179 = 0;
            v180 = 0;
            if (v174 >= v176 - 1)
              v181 = v176 - 1;
            else
              v181 = v174;
            v182 = ~v181;
            v183 = v410;
            do
            {
              if (v174 + v179 < v176)
              {
                v184 = v178 * (unint64_t)*v183;
                v175 += v184;
                v180 += HIDWORD(v184);
              }
              --v179;
              ++v183;
            }
            while (v182 != v179);
            v381[v174] = v175;
            v175 = v180 + HIDWORD(v175);
            ++v174;
          }
          while (v174 < v382);
          if (v175 && v382 != 64)
            v381[v382++] = v175;
        }
        if (v365)
        {
          v380 = 0;
        }
        else
        {
          v185 = 0;
          v186 = 0;
          if (v361 >= 0)
            v187 = v361;
          else
            v187 = -v361;
          v188 = v187 - 1 + v187;
          if (v188 >= 0x40)
            LODWORD(v188) = 64;
          v380 = v188;
          v189 = v404[0];
          do
          {
            v190 = 0;
            v191 = 0;
            if (v185 >= v187 - 1)
              v192 = v187 - 1;
            else
              v192 = v185;
            v193 = ~v192;
            v194 = v404;
            do
            {
              if (v185 + v190 < v187)
              {
                v195 = v189 * (unint64_t)*v194;
                v186 += v195;
                v191 += HIDWORD(v195);
              }
              --v190;
              ++v194;
            }
            while (v193 != v190);
            v379[v185] = v186;
            v186 = v191 + HIDWORD(v186);
            ++v185;
          }
          while (v185 < v380);
          if (v186 && v380 != 64)
            v379[v380++] = v186;
        }
        sub_223F1625C(v383, v381, v379);
        if (v364)
        {
          v376 = 0;
        }
        else
        {
          v196 = 0;
          v197 = 0;
          if (v88 >= 0)
            v198 = v88;
          else
            v198 = -v88;
          v199 = v198 - 1 + v198;
          if (v199 >= 0x40)
            LODWORD(v199) = 64;
          v376 = v199;
          v200 = v412[0];
          do
          {
            v201 = 0;
            v202 = 0;
            if (v196 >= v198 - 1)
              v203 = v198 - 1;
            else
              v203 = v196;
            v204 = ~v203;
            v205 = v412;
            do
            {
              if (v196 + v201 < v198)
              {
                v206 = v200 * (unint64_t)*v205;
                v197 += v206;
                v202 += HIDWORD(v206);
              }
              --v201;
              ++v205;
            }
            while (v204 != v201);
            v375[v196] = v197;
            v197 = v202 + HIDWORD(v197);
            ++v196;
          }
          while (v196 < v376);
          if (v197 && v376 != 64)
            v375[v376++] = v197;
        }
        if (v366)
        {
          v374 = 0;
        }
        else
        {
          v207 = 0;
          v208 = 0;
          if (v104 >= 0)
            v209 = v104;
          else
            v209 = -v104;
          v210 = v209 - 1 + v209;
          if (v210 >= 0x40)
            LODWORD(v210) = 64;
          v374 = v210;
          v211 = v406[0];
          do
          {
            v212 = 0;
            v213 = 0;
            if (v207 >= v209 - 1)
              v214 = v209 - 1;
            else
              v214 = v207;
            v215 = ~v214;
            v216 = v406;
            do
            {
              if (v207 + v212 < v209)
              {
                v217 = v211 * (unint64_t)*v216;
                v208 += v217;
                v213 += HIDWORD(v217);
              }
              --v212;
              ++v216;
            }
            while (v215 != v212);
            v373[v207] = v208;
            v208 = v213 + HIDWORD(v208);
            ++v207;
          }
          while (v207 < v374);
          if (v208 && v374 != 64)
            v373[v374++] = v208;
        }
        sub_223F1625C(v377, v375, v373);
        v218 = v384;
        if (v384 && (v219 = v378) != 0)
        {
          v220 = 0;
          v221 = 0;
          if (v384 >= 0)
            v222 = v384;
          else
            v222 = -v384;
          if (v378 >= 0)
            v223 = v378;
          else
            v223 = -v378;
          v224 = v222 - 1;
          v225 = v224 + v223;
          if (v224 + v223 >= 0x40)
            v225 = 64;
          v386 = v225;
          v226 = v377;
          do
          {
            v228 = 0;
            v229 = 0;
            if (v220 >= v224)
              v230 = v224;
            else
              v230 = v220;
            v231 = ~v230;
            v232 = v383;
            do
            {
              if (v220 + v228 < v223)
              {
                v233 = v226[v228] * (unint64_t)*v232;
                v221 += v233;
                v229 += HIDWORD(v233);
              }
              --v228;
              ++v232;
            }
            while (v231 != v228);
            v385[v220] = v221;
            v221 = v229 + HIDWORD(v221);
            ++v220;
            v227 = v386;
            ++v226;
          }
          while (v220 < v386);
          if (v221 && v386 != 64)
          {
            v385[v386] = v221;
            v227 = ++v386;
          }
          if (v218 > 0 != v219 > 0)
          {
            v227 = -v227;
            v386 = v227;
          }
        }
        else
        {
          v227 = 0;
          v386 = 0;
        }
        if (v355)
        {
          v370 = 0;
        }
        else
        {
          v234 = 0;
          v235 = 0;
          if (v352 >= 0)
            v236 = v352;
          else
            v236 = -v352;
          v237 = v236 - 1 + v236;
          if (v237 >= 0x40)
            LODWORD(v237) = 64;
          v370 = v237;
          do
          {
            v238 = 0;
            v239 = 0;
            if (v234 >= v236 - 1)
              v240 = v236 - 1;
            else
              v240 = v234;
            v241 = ~v240;
            v242 = v414;
            do
            {
              if (v234 + v238 < v236)
              {
                v243 = v353 * (unint64_t)*v242;
                v235 += v243;
                v239 += HIDWORD(v243);
              }
              --v238;
              ++v242;
            }
            while (v241 != v238);
            v369[v234] = v235;
            v235 = v239 + HIDWORD(v235);
            ++v234;
          }
          while (v234 < v370);
          if (v235 && v370 != 64)
            v369[v370++] = v235;
        }
        if (v354)
        {
          v368 = 0;
        }
        else
        {
          v244 = 0;
          v245 = 0;
          if (v350 >= 0)
            v246 = v350;
          else
            v246 = -v350;
          v247 = v246 - 1 + v246;
          if (v247 >= 0x40)
            LODWORD(v247) = 64;
          v368 = v247;
          do
          {
            v248 = 0;
            v249 = 0;
            if (v244 >= v246 - 1)
              v250 = v246 - 1;
            else
              v250 = v244;
            v251 = ~v250;
            v252 = v408;
            do
            {
              if (v244 + v248 < v246)
              {
                v253 = v351 * (unint64_t)*v252;
                v245 += v253;
                v249 += HIDWORD(v253);
              }
              --v248;
              ++v252;
            }
            while (v251 != v248);
            v367[v244] = v245;
            v245 = v249 + HIDWORD(v245);
            ++v244;
          }
          while (v244 < v368);
          if (v245 && v368 != 64)
            v367[v368++] = v245;
        }
        sub_223F1625C(v371, v369, v367);
        if (v227 && (v258 = v372) != 0)
        {
          v259 = 0;
          v260 = 0;
          if (v227 >= 0)
            v261 = v227;
          else
            v261 = -v227;
          if (v372 >= 0)
            v262 = v372;
          else
            v262 = -v372;
          v263 = v261 - 1;
          v264 = v261 - 1 + v262;
          if (v264 >= 0x40)
            LODWORD(v264) = 64;
          v388 = v264;
          v265 = v371;
          do
          {
            v267 = 0;
            v268 = 0;
            if (v259 >= v263)
              v269 = v263;
            else
              v269 = v259;
            v270 = ~v269;
            v271 = v385;
            do
            {
              if (v259 + v267 < v262)
              {
                v272 = v265[v267] * (unint64_t)*v271;
                v260 += v272;
                v268 += HIDWORD(v272);
              }
              --v267;
              ++v271;
            }
            while (v270 != v267);
            v387[v259] = v260;
            v260 = v268 + HIDWORD(v260);
            ++v259;
            v266 = v388;
            ++v265;
          }
          while (v259 < v388);
          if (v260 && v388 != 64)
          {
            v387[v388] = v260;
            v266 = ++v388;
          }
          if (v227 > 0 != v258 > 0)
          {
            v266 = -v266;
            v388 = v266;
          }
        }
        else
        {
          v266 = 0;
          v388 = 0;
        }
        if (v266 >= 0)
          v273 = v266;
        else
          v273 = -v266;
        if ((_DWORD)v273)
        {
          if (v273 == 1)
          {
            v274 = 0;
            LODWORD(v254) = v387[0];
            v275 = (double)v254;
          }
          else if (v273 == 2)
          {
            v274 = 0;
            LODWORD(v254) = v387[1];
            LODWORD(v255) = v387[0];
            v275 = (double)v254 * 4294967300.0 + (double)v255;
          }
          else
          {
            v281 = &v387[v273];
            LODWORD(v256) = *(v281 - 2);
            LODWORD(v254) = *(v281 - 1);
            LODWORD(v257) = *(v281 - 3);
            v275 = ((double)v254 * 4294967300.0 + (double)v256) * 4294967300.0 + (double)v257;
            v274 = 32 * v273 - 96;
          }
          if (v266 < 0)
            v275 = -v275;
          v282 = ldexp(v275, v274);
          v277 = *(double *)v359;
          v278 = sqrt(v282);
          if (*(double *)v359 < 0.0)
            goto LABEL_470;
        }
        else
        {
          v276 = ldexp(0.0, 0);
          v277 = *(double *)v359;
          v278 = sqrt(v276);
          if (*(double *)v359 < 0.0)
          {
LABEL_470:
            if (v391)
            {
              v283 = 0;
              v284 = 0;
              if (v391 >= 0)
                v285 = v391;
              else
                v285 = -v391;
              v286 = v285 - 1 + v285;
              if (v286 >= 0x40)
                LODWORD(v286) = 64;
              v384 = v286;
              do
              {
                v287 = 0;
                v288 = 0;
                if (v283 >= v285 - 1)
                  v289 = v285 - 1;
                else
                  v289 = v283;
                v290 = v289 + 1;
                v291 = v283;
                do
                {
                  if (v291 < v285)
                  {
                    v292 = *(&v389 + v291) * (unint64_t)*(&v389 + v287);
                    v284 += v292;
                    v288 += HIDWORD(v292);
                  }
                  ++v287;
                  --v291;
                }
                while (v290 != v287);
                v383[v283] = v284;
                v284 = v288 + HIDWORD(v284);
                ++v283;
              }
              while (v283 < v384);
              if (v284 && v384 != 64)
                v383[v384++] = v284;
            }
            else
            {
              v384 = 0;
            }
            sub_223F15F80(v385, v383, v387);
            if (v386 >= 0)
              v297 = v386;
            else
              v297 = -v386;
            v298 = 0.0;
            if ((_DWORD)v297)
            {
              if (v297 == 1)
              {
                v299 = 0;
                LODWORD(v293) = v385[0];
                v300 = (double)v293;
              }
              else if (v297 == 2)
              {
                v299 = 0;
                LODWORD(v293) = v385[1];
                LODWORD(v294) = v385[0];
                v300 = (double)v293 * 4294967300.0 + (double)v294;
              }
              else
              {
                v301 = &v385[v297];
                LODWORD(v295) = *(v301 - 2);
                LODWORD(v293) = *(v301 - 1);
                LODWORD(v296) = *(v301 - 3);
                v300 = ((double)v293 * 4294967300.0 + (double)v295) * 4294967300.0 + (double)v296;
                v299 = 32 * v297 - 96;
              }
              if (v386 < 0)
                v300 = -v300;
            }
            else
            {
              v299 = 0;
              v300 = 0.0;
            }
            v302 = ldexp(v300, v299);
            v306 = v135 * v302;
            if (v391 >= 0)
              v307 = v391;
            else
              v307 = -v391;
            if ((_DWORD)v307)
            {
              if (v307 == 1)
              {
                v308 = 0;
                LODWORD(v302) = v389;
                v309 = (double)*(unint64_t *)&v302;
              }
              else if (v307 == 2)
              {
                v308 = 0;
                LODWORD(v302) = v390;
                LODWORD(v303) = v389;
                v309 = (double)*(unint64_t *)&v302 * 4294967300.0 + (double)v303;
              }
              else
              {
                v310 = &v389 + v307;
                LODWORD(v304) = *(v310 - 2);
                LODWORD(v302) = *(v310 - 1);
                LODWORD(v305) = *(v310 - 3);
                v309 = ((double)*(unint64_t *)&v302 * 4294967300.0 + (double)v304) * 4294967300.0 + (double)v305;
                v308 = 32 * v307 - 96;
              }
              if (v391 >= 0)
                v298 = v309;
              else
                v298 = -v309;
            }
            else
            {
              v308 = 0;
            }
            v280 = v306 / (v278 + ldexp(v298, v308));
            goto LABEL_516;
          }
        }
        v279 = v135 * v278;
        if (v135 >= 0.0)
          v280 = v277 + v279;
        else
          v280 = v277 - v279;
LABEL_516:
        *(double *)(v359 + 16) = v280;
      }
    }
    else
    {
      *(long double *)v359 = v135 * ldexp(0.0, 0);
      if (v105)
        goto LABEL_291;
    }
  }
  if (v358)
  {
    v311 = v393;
    if (v393 && (v312 = v411) != 0)
    {
      v313 = 0;
      v314 = 0;
      if (v393 >= 0)
        v315 = v393;
      else
        v315 = -v393;
      if (v411 >= 0)
        v316 = v411;
      else
        v316 = -v411;
      v317 = v315 - 1;
      v318 = v317 + v316;
      if (v317 + v316 >= 0x40)
        v318 = 64;
      v388 = v318;
      v319 = v410;
      do
      {
        v321 = 0;
        v322 = 0;
        if (v313 >= v317)
          v323 = v317;
        else
          v323 = v313;
        v324 = ~v323;
        v325 = __src;
        do
        {
          if (v313 + v321 < v316)
          {
            v326 = v319[v321] * (unint64_t)*v325;
            v314 += v326;
            v322 += HIDWORD(v326);
          }
          --v321;
          ++v325;
        }
        while (v324 != v321);
        v387[v313] = v314;
        v314 = v322 + HIDWORD(v314);
        ++v313;
        v320 = v388;
        ++v319;
      }
      while (v313 < v388);
      if (v314 && v388 != 64)
      {
        v387[v388] = v314;
        v320 = ++v388;
      }
      if (v311 > 0 != v312 > 0)
        v388 = -v320;
    }
    else
    {
      v388 = 0;
    }
    v327 = v395;
    if (v395 && (v328 = v413) != 0)
    {
      v329 = 0;
      v330 = 0;
      if (v395 >= 0)
        v331 = v395;
      else
        v331 = -v395;
      if (v413 >= 0)
        v332 = v413;
      else
        v332 = -v413;
      v333 = v331 - 1;
      v334 = v333 + v332;
      if (v333 + v332 >= 0x40)
        v334 = 64;
      v386 = v334;
      do
      {
        v336 = 0;
        v337 = 0;
        if (v329 >= v333)
          v338 = v333;
        else
          v338 = v329;
        v339 = ~v338;
        v340 = __dst;
        do
        {
          if (v329 + v336 < v332)
          {
            v341 = v35[v336] * (unint64_t)*v340;
            v330 += v341;
            v337 += HIDWORD(v341);
          }
          --v336;
          ++v340;
        }
        while (v339 != v336);
        v385[v329] = v330;
        v330 = v337 + HIDWORD(v330);
        ++v329;
        v335 = v386;
        ++v35;
      }
      while (v329 < v386);
      if (v330 && v386 != 64)
      {
        v385[v386] = v330;
        v335 = ++v386;
      }
      if (v327 > 0 != v328 > 0)
        v386 = -v335;
    }
    else
    {
      v386 = 0;
    }
    sub_223F15F80(&v389, v387, v385);
    if (v391 >= 0)
      v346 = v391;
    else
      v346 = -v391;
    if ((_DWORD)v346)
    {
      if (v346 == 1)
      {
        v347 = 0;
        LODWORD(v342) = v389;
        v348 = (double)v342;
      }
      else if (v346 == 2)
      {
        v347 = 0;
        LODWORD(v342) = v390;
        LODWORD(v343) = v389;
        v348 = (double)v342 * 4294967300.0 + (double)v343;
      }
      else
      {
        v349 = &v389 + v346;
        LODWORD(v344) = *(v349 - 2);
        LODWORD(v342) = *(v349 - 1);
        LODWORD(v345) = *(v349 - 3);
        v348 = ((double)v342 * 4294967300.0 + (double)v344) * 4294967300.0 + (double)v345;
        v347 = 32 * v346 - 96;
      }
      if (v391 < 0)
        v348 = -v348;
    }
    else
    {
      v347 = 0;
      v348 = 0.0;
    }
    *(long double *)(v359 + 8) = v135 * ldexp(v348, v347);
  }
}

